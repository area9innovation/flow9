import preprocessor/preprocessor;
import lingo/flow/flowast;

simpleTestCases = [
	Pair("", ""),
	Pair("#ifdef FALSE_CONDITION #endif", ""),
	Pair("#ifdef FALSE_CONDITION abc = 'abc'+ { Some(one()) };#endif", ""),
	Pair("#ifdef TRUE_CONDITION abc = 'abc'+ { Some(one()) }; #else bac = 'bac'+ { Some(two()) }; #endif", "abc = 'abc'+ { Some(one()) }; "),
	Pair("#ifdef FALSE_CONDITION abc = 'abc'+ { Some(one()) }; #else bac = 'bac'+ { Some(two()) }; #endif", "bac = 'bac'+ { Some(two()) }; "),
	Pair("#ifdef FALSE_CONDITION abc = 'abc'+ { Some(one()) }; #elif TRUE_CONDITION cab = 'cab'+ { Some(three()) }; #else bac = 'bac'+ { Some(two()) };  #endif", "cab = 'cab'+ { Some(three()) }; "),
	Pair("
//#ifdef FALSE_CONDITION
abc = 'abc'+ { Some(one()) };
//#else
//bac = 'bac'+ { Some(two()) };
//#endif",
		"//#ifdef FALSE_CONDITION
abc = 'abc'+ { Some(one()) };
//#else
//bac = 'bac'+ { Some(two()) };
//#endif"),
];

flowGrammar = compilePegGrammar("#include lingo/flow.lingo");

// DO NOT ALTER strings position, since the indices in flow ast will be different
sources = [
	"#ifdef COMPILE
	import runtime;
	main() {
		println(\"Hello world\"); 
	}
	#endif",
];

complexTestCases = [
	Pair(\ -> {
			text = preprocessSource(sources[0], PreprocessorInfo(["COMPILE"]));
			parsic(flowGrammar, text, defaultPegActions);
		},
		FaProgram([FaImport("runtime", 0, 15)], [FaFunction("main", [], [], [FaSequence([FaPostOp(FaVarRef("println", 28, 35), [FaCallArgs([FaString(["Hello world"], 36, 49)], 35, 50)], 28, 50)], 24, 55)], 17, 57)], 0)
	),
	Pair(\ -> {
			text = preprocessSource(sources[0], PreprocessorInfo([]));
			parsic(flowGrammar, text, defaultPegActions);
		},
		FaProgram([], [], 0)
	),
];

main() {
	println("Testing total cases of " + i2s(length(simpleTestCases) + length(complexTestCases)));

	iteri(simpleTestCases, \i, case -> {
		header = "Simple test case " + i2s(i + 1) + " ";
		res = preprocessSource(case.first, PreprocessorInfo(["TRUE_CONDITION"]));

		if (res != case.second)
			println(header + "FAILED" + "\nExpected:\n" + case.second + "\nGot:\n" + res)
		else
			println(header + "PASSED");
	});

	iteri(complexTestCases, \i, case -> {
		header = "Complex test case " + i2s(i + 1) + " ";
		res = case.first();

		if (res != case.second)
			println(header + "FAILED" + "\nExpected:\n" + toString(case.second) + "\nGot:\n" + toString(res))
		else
			println(header + "PASSED");
	});
}
