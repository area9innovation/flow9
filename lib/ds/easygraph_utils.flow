import ds/easygraph;

export {
	// Topological sort of the graph - result is a a lookup from node id to what order it should be
	topSortEasyGraph(graph : EasyGraph<?, ??>) -> Tree<int, int>; 

	// What are roots in this graph?
	findEGRoots(graph : EasyGraph<?, ??>) -> Set<int>;

	// What are sinks in this graph?
	findSinks(graph : EasyGraph<?, ??>) -> Set<int>;

	// Breadth-first spanning tree
	breadthFirstSearch(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??>;

	// Depth first spanning tree
	depthFirstSearch(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??>;

	// Reverse a graph
	reverseEasyGraph(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??>;

	// Generates a reachability set for each node in an acyclic graph: What nodes can be reached?
	// Notice the sets do not include the root node for each set.
	reachableClosure(graph : EasyGraph<?, ??>) -> Tree<int, Set<int>>;

	// What is the reachable set from this node?
	reachableClosureFromNode(graph : EasyGraph<?, ??>, node : int) -> Set<int>;

	// Transitively reduces a graph - keeps as few edges to maintain the same reachability as the original
	transitiveReduction(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??>;
}

EGSortAcc : (numbers : Tree<int, int>, parents : Tree<int, int>);

topSortEasyGraph(graph : EasyGraph<?, ??>) -> Tree<int, int> {
	roots = findEGRoots(graph);
	parents = {
		rootParents = foldSet(roots, makeTree(), \acc, r -> setTree(acc, r, 1));
		foldTree(graph.edges, rootParents, \from, arcs, acc -> {
			fold(arcs, acc, \acc2, arc -> {
				times = lookupTreeDef(acc2, arc.to, 0);
				setTree(acc2, arc.to, times + 1)
			})
		})
	}

	foldSet(roots, EGSortAcc(makeTree(), parents), \acc, root -> {
		rootSort = topSortEasyGraphFromNode(graph, root, acc.parents);
		sizeAcc = sizeTree(acc.numbers);
		numbers = foldTree(rootSort.numbers, acc.numbers, \k, v, acc2 -> {
			setTree(acc2, k, v + sizeAcc);
		});
		EGSortAcc(numbers, rootSort.parents)
	}).numbers;
}

topSortEasyGraphFromNode(graph : EasyGraph<?, ??>, node : int, parents : Tree<int, int>) -> EGSortAcc {
	numberEasyNodes(graph, node, EGSortAcc(makeTree(), parents))
}

numberEasyNodes(graph : EasyGraph<?, ??>, node : int, acc : EGSortAcc) -> EGSortAcc {
	eitherFn(lookupTree(acc.parents, node),
		\num -> {
			if (num == 0) {
				assert(false, "parents map was build wrong");
				acc
			} else if (num == 1) {
				numbers2 = setTree(acc.numbers, node, sizeTree(acc.numbers));

				arcs : [int] = getAdjacentEGNodes(graph, node);

				fold(arcs, EGSortAcc(numbers2, acc.parents), \pnp, arc -> {
					numberEasyNodes(graph, arc, pnp)
				})
			} else {
				parents2 = setTree(acc.parents, node, num - 1);
				EGSortAcc(acc.numbers, parents2)
			}
		},
		\-> { 			
			assert(false, "parents map was build wrong");
			acc
		}
	)
}

findEGRoots(graph : EasyGraph<?, ??>) -> Set<int> {
	allNodes : Set<int> = foldTree(graph.nodes, makeSet(), \n, v, acc -> insertSet(acc, n));
	foldTree(graph.edges, allNodes, \from, es, acc -> {
		fold(es, acc, \acc2, e -> {
			if (e.from != e.to) {
				removeSet(acc2, e.to);
			} else acc2
		});
	});
}


findSinks(graph : EasyGraph<?, ??>) -> Set<int> {
	allNodes : Set<int> = foldTree(graph.nodes, makeSet(), \n, v, acc -> insertSet(acc, n));
	foldTree(graph.edges, allNodes, \from, es, acc -> {
		fold(es, acc, \acc2, e -> {
			if (e.from != e.to) {
				removeSet(acc2, e.from);
			} else acc2
		});
	});
}

BfsAcc(queue : [int], visited : Set<int>, edges : [GEdge<?>]);

breadthFirstSearch(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??> {
	roots = findEGRoots(graph);
	acc = BfsAcc(set2array(roots), roots, []);

	edges = doBfs(graph, acc);

	fold(edges.edges, EasyGraph(graph.nodes, makeTree(), 0), \acc2, e -> {
		addEGEdge(acc2, e);
	});
}

doBfs(graph : EasyGraph<?, ??>, acc : BfsAcc<??>) -> BfsAcc<??> {
	if (acc.queue == []) {
		acc
	} else {
		from = acc.queue[0];
		rest = tail(acc.queue);
		edges : [GEdge] = lookupTreeDef(graph.edges, from, []);
		nacc = fold(edges, BfsAcc(rest, acc.visited, acc.edges), \acc2, edge : GEdge -> {
			to = edge.to;
			if (containsSet(acc2.visited, to)) acc2
			else {
				BfsAcc(arrayPush(acc2.queue, to), insertSet(acc2.visited, to), arrayPush(acc2.edges, edge))
			}
		});
		doBfs(graph, nacc);
	}
}

DfsAcc(visited : Set<int>, edges : [GEdge<?>]);

depthFirstSearch(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??> {
	roots = findEGRoots(graph);
	edges = foldSet(roots, DfsAcc(makeSet(), []), \acc, root -> {
		doDfs(graph, DfsAcc(makeSet(), acc.edges), root);
	});

	fold(edges.edges, EasyGraph(graph.nodes, makeTree(), 0), \acc2, e -> {
		addEGEdge(acc2, e);
	});
}


doDfs(graph : EasyGraph<?, ??>, acc : DfsAcc<??>, from : int) -> DfsAcc<??> {
	edges : [GEdge] = lookupTreeDef(graph.edges, from, []);
	fold(edges, DfsAcc(insertSet(acc.visited, from), acc.edges), \acc2 : DfsAcc, edge : GEdge -> {
		to = edge.to;
		if (containsSet(acc2.visited, to)) acc2
		else {
			nacc = DfsAcc(acc2.visited, arrayPush(acc2.edges, edge));
			doDfs(graph, nacc, to);
		}
	});
}

reverseEasyGraph(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??> {
	foldTree(graph.edges, EasyGraph(graph.nodes, makeTree(), 0), \from, edges, acc -> {
		fold(edges, acc, \acc2, edge -> {
			addEGEdge(acc2, GEdge(edge.to, edge.from, edge.data, edge.weight))
		});
	});
}


reachableClosure(graph : EasyGraph<?, ??>) -> Tree<int, Set<int>> {
	foldTree(graph.nodes, makeTree(), \from, n, acc -> {
		reachable = doDfs(graph, DfsAcc(makeSet(), []), from);
		setTree(acc, from, removeSet(reachable.visited, from))
	});
}

reachableClosureFromNode(graph : EasyGraph<?, ??>, node : int) -> Set<int> {
	removeSet(doReachableClosureFromNode(graph, makeSet(), node), node)
}

doReachableClosureFromNode(graph : EasyGraph<?, ??>, visited : Set<int>, from : int) -> Set<int> {
	edges : [GEdge] = lookupTreeDef(graph.edges, from, []);
	fold(edges, insertSet(visited, from), \acc2 : Set<int>, edge : GEdge -> {
		to = edge.to;
		if (containsSet(acc2, to)) acc2
		else {
			doReachableClosureFromNode(graph, acc2, to);
		}
	});
}

transitiveReduction(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??> {
	closure = reachableClosure(graph);

	superflousEdges = foldTree(graph.nodes, makeSet(), \from, n, acc -> {
		reachable = lookupTreeDef(closure, from, makeSet());

		edges : [GEdge] = lookupTreeDef(graph.edges, from, []);
		fold(edges, acc, \acc2, edge -> {
			to = edge.to;
			if (to == from) acc2
			else {
				fold(edges, acc2, \acc3, edge2 -> {
					to2 = edge2.to;
					if (to == to2) acc3
					else {
						// Two edges going out from "from".
						// Check if we can reach one of them from the other -
						// if so, it is transitive, and we can get rid of it
						toReachable = lookupTreeDef(closure, to, makeSet());
						if (containsSet(toReachable, to2)) {
							insertSet(acc3, edge2)
						} else acc3
					}
				});
			}
		});
	});

	foldTree(graph.edges, EasyGraph(graph.nodes, makeTree(), 0), \from, edges, acc -> {
		fold(edges, acc, \acc2, edge -> {
			if (containsSet(superflousEdges, edge)) acc2
			else addEGEdge(acc2, edge)
		})
	});
}
