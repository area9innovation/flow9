import ds/easygraph;
import ds/easygraph_utils;
import ds/tree;

export {
	reachableEdgeClosure(graph : EasyGraph<?, ??>) -> Tree<int, Set<GEdge<??>>>;
}

CachedClosure(
	graph : EasyGraph<?, ??>,
	closureCache : ref Tree<int, Set<GEdge<??>>>
);

reachableEdgeClosure(graph : EasyGraph<?, ??>) -> Tree<int, Set<GEdge<??>>> {
	// Initialize the cache
	cachedClosure = CachedClosure(graph, ref makeTree());

	// Compute the reachable edge closure for each node in the graph
	traverseInOrder(graph.nodes, \nodeId, __ -> {
		computeReachableEdgesCached(cachedClosure, nodeId);
		{}
	});

	^(cachedClosure.closureCache)
}

computeReachableEdgesCached(cachedClosure : CachedClosure<?, ??>, nodeId : int) -> Set<GEdge<??>> {
	lookup = lookupTree(^(cachedClosure.closureCache), nodeId);

	switch(lookup) {
		Some(edges): edges; // Return from cache if already computed

		None(): {
			// Not in cache, compute reachable edges using DFS
			visitedNodes : ref Set<int> = ref makeSet();
			edges = doTransitiveReachableEdgesFromNode(cachedClosure.graph, cachedClosure, visitedNodes, makeSet(), nodeId);

			// Update cache
			cachedClosure.closureCache := setTree(^(cachedClosure.closureCache), nodeId, edges);

			edges
		}
	}
}

doTransitiveReachableEdgesFromNode(graph : EasyGraph<?, ??>, cachedClosure : CachedClosure<?, ??>, visitedNodes : ref Set<int>, visitedEdges : Set<GEdge<??>>, from : int) -> Set<GEdge<??>> {
	if (containsSet(^visitedNodes, from)) {
		// Already visited this node, return accumulated edges
		visitedEdges
	} else {
		visitedNodes := insertSet(^visitedNodes, from);
		edges : [GEdge<??>] = lookupTreeDef(graph.edges, from, []);
		fold(edges, visitedEdges, \acc : Set<GEdge<??>>, edge : GEdge<??> -> {
			to = edge.to;
			if (containsSet(^visitedNodes, to)) acc
			else {
				newVisitedEdges = insertSet(acc, edge);
				doTransitiveReachableEdgesFromNode(graph, cachedClosure, visitedNodes, newVisitedEdges, to);
			}
		});
	}
}
