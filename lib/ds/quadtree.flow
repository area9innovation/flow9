// Â© Copyright 2012 Area9 Technologies.

import maybe;
import math/math;

// Quad-trees are two-dimensional trees that can efficiently represent a set of 2d points
// with a value in a way that supports quick lookup, and similar.
// A quad-tree is defined over a square box. Each node in the quadtree divides
// the area into 4 equally-sized squares.

export {
	QuadTree(
		// The point the value is at
		point : Maybe<QPoint>, 
		// The value at this point. Can be the def. value for internal nodes
		value : ref ?, 
		// The children
		children : [QuadTree<?>]
	);

		QPoint(x : double, y : double);
	
	// Each quadtree point has a value. We need a default value "d" here
	// for "internal" nodes.
	makeQTree(d : ?) -> QuadTree<?>;

	// Inserts the point p into a QuadTree or one of its children with the value "v". 
	// The bounds of our world are defined by [x1, x2] and [y1, y2].
	// We need a default value "d" to be able to construct "internal" nodes.
	insertQTree(t : QuadTree<?>, p : QPoint, value : ?, def : ?, x1 : double, y1 : double, x2 : double, y2 : double) -> QuadTree<?>;

	// Iterate a quadtree until a given criteria is met.
	// To help distinguish between "internal" nodes and real nodes, we need the default "d" value.
	// In other words, we only call fn with real points.
	iterQTreeUntil(t : QuadTree<?>, d : ?, x1 : double, y1 : double, x2 : double, y2 : double, 
		fn : (t : QuadTree<?>, x1 : double, y1 : double, x2 : double, y2 : double) -> bool) -> void;
}

makeQTree(d : ?) -> QuadTree<?> {
	QuadTree(None(), ref d, []);
}

insertQTree(t : QuadTree<?>, p : QPoint, v : ?, d : ?, x1 : double, y1 : double, x2 : double, y2 : double) -> QuadTree<?> {
	if (length(t.children) == 0) {
		// A leaf
		switch (t.point) {
			None(): QuadTree(Some(p), ref v, []);
			Some(tp): {
				if (abs(tp.x - p.x) + abs(tp.y - p.y) < 0.1) {
					insertQChild(t, p, v, d, x1, y1, x2, y2);
				} else {
					// First, push the existing point down into a node
					t1 = insertQChild(makeQTree(d), tp, ^(t.value), d, x1, y1, x2, y2);
					t1.value := d;
					// And then insert the new point as well
					insertQChild(t1, p, v, d, x1, y1, x2, y2);
				}
			}
		}
	} else {
		insertQChild(t, p, v, d, x1, y1, x2, y2);
	}
}

insertQChild(t : QuadTree<?>, p0 : QPoint, v : ?, d : ?, x1 : double, y1 : double, x2 : double, y2 : double) -> QuadTree<?> {
	//	Force the point into bounds, to avoid infinite loops
	p = QPoint(min(max(p0.x, x1), x2), min(max(p0.y, y1), y2));
	// Find the middle lines, and the quadrant in which to insert p.
	sx = (x1 + x2) * 0.5;
	sy = (y1 + y2) * 0.5;
	right = p.x >= sx;
	bottom = p.y >= sy;
	i = (b2i(bottom) * 2) + b2i(right);

	children = if (length(t.children) == 0) { 
		[ makeQTree(d), makeQTree(d), makeQTree(d), makeQTree(d) ]
	} else t.children;

	child = children[i];
	// Find the bounds of the quadrant
	nx1 = if (right) sx else x1;
	ny1 = if (bottom) sy else y1;
	nx2 = if (right) x2 else sx;
	ny2 = if (bottom) y2 else sy;
	// Recursive insert
	newchild = insertQTree(child, p, v, d, nx1, ny1, nx2, ny2);
	QuadTree(t.point, ref d, replace(children, i, newchild));
}

iterQTreeUntil(t : QuadTree<?>, d : ?, x1 : double, y1 : double, x2 : double, y2 : double, 
	fn : (t : QuadTree<?>, x1 : double, y1 : double, x2 : double, y2 : double) -> bool) -> void {
	if (^(t.value) != d && !fn(t, x1, y1, x2, y2)) {
		sx = (x1 + x2) * 0.5;
		sy = (y1 + y2) * 0.5;
		children = t.children;
		if (length(children) > 0) {
			iterQTreeUntil(children[0], d, x1, y1, sx, sy, fn);
			iterQTreeUntil(children[1], d, sx, y1, x2, sy, fn);
			iterQTreeUntil(children[2], d, x1, sy, sx, y2, fn);
			iterQTreeUntil(children[3], d, sx, sy, x2, y2, fn);
		}
	}
}
