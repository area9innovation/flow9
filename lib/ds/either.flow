import maybe;
/*
import runtime;
import string;
*/

export {
	// NOTE 
	// The either type does currently not work well with the flowc1 compiler. 

	Either<?, ??> ::= Left<?>, Right<??>;
		Left(value: ?);
		Right(value: ??);

	// Is left value
	isLeft(e: Either<?, ??>) -> bool;

	// Is right value
	isRight(e: Either<?, ??>) -> bool { !isLeft(e); };

	// get left value
	eitherLeft(e: Either<?, ??>) -> Maybe<?>;

	// get the right value
	eitherRight(e: Either<?, ??>) -> Maybe<??>;

	// Make the reverse either type
	eitherFlip(e: Either<?, ??>) -> Either<??, ?>;

	// call either left or right 
	eitherLr(e: Either<?, ??>, left: (leftValue: ?) -> ???, right: (rightValue: ??) -> ???) -> ???;
}

isLeft(e: Either<?, ??>) -> bool
{
	switch (e) {
		Left(__): true;
		Right(__): false;
	}
}

eitherLeft(e: Either<?, ??>) -> Maybe<?> {
	switch (e) {
		Left(v): Some(v);
		Right(__): None();
	}
}

eitherRight(e: Either<?, ??>) -> Maybe<??> {
	switch (e) {
		Left(__): None();
		Right(v): Some(v);
	}
}

eitherLr(e: Either<?, ??>, left: (leftValue: ?) -> ???, right: (rightValue: ??) -> ???) -> ??? {
	switch (e) {
		Left(v): left(v);
		Right(v): right(v);
	}
}

// Make the reverse either type
eitherFlip(e: Either<?, ??>) -> Either<??, ?>
{
	switch (e) {
		Left(v): Right(v);
		Right(v): Left(v);
	}
}

/*

main() {
	e1: Either<int, string> = Left(1);
	e2: Either<int, string> = Right("a");
	e3: Either<double, string> = Left(42.0);

	// Should print: e1: left: 1
	println("e1: ");
	eitherLr(e1, \v -> println("left: " + i2s(v)), \v -> println("right: " + v));

	// Should print: e2: right: a
	println("e2: ");
	eitherLr(e2, \v: int -> println("left: " + i2s(v)), \v: string -> println("right: " + v));

	// Should print: e1: Flip, right: 1
	println("e1: Flip");
	eitherLr(eitherFlip(e1), \v -> println("left: " + v), \v -> println("right: " + i2s(v)));

	// Should print: e2: Flip, left: a
	println("e2: Flip");
	eitherLr(eitherFlip(e2), \v -> println("left: " + v), \v -> println("right: " + i2s(v)));

	// Should print: e3: Some(42.0)
	println("e3: ");
	println(toString(eitherLeft(e3));
}

*/
