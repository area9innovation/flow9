import ds/hashmap;
import sys/concurrent;

export {

	// Thread-safe version of HashMap
	ConcurHashMap : (map : native, dummy : [Pair<?, ??>]);

	makeConcurHashMap(hash : (?) -> int) -> ConcurHashMap<?, ??>;
	setConcurHashMap : (m : ConcurHashMap<?, ??>, key : ?, value : ??) -> void;
	lookupConcurHashMap : (m : ConcurHashMap<?, ??>, key : ?) -> Maybe<??>;
	getConcurHashMap : (m : ConcurHashMap<?, ??>, key : ?, defval : ??) -> ??;
	containsKeyConcurHashMap : (m : ConcurHashMap<?, ??>, key : ?) -> bool;
	valuesConcurHashMap : (m : ConcurHashMap<?, ??>) -> [??];
	removeConcurHashMap : (m : ConcurHashMap<?, ??>, key : ?) -> void;
	keysConcurHashMap : (m : ConcurHashMap<?, ??>) -> [?];
	sizeConcurHashMap : (m : ConcurHashMap<?, ??>) -> int;
	clearConcurHashMap : (m : ConcurHashMap<?, ??>) -> void;

	iterConcurHashMap(hashMap : ConcurHashMap<?, ??>, fn : (key : ?, value : ??) -> void) -> void;

	foldConcurHashMap(hashMap : ConcurHashMap<?, ??>, acc: ???, f: (key: ?, value: ??, acc: ???) -> ???) -> ???;

	mapConcurHashMap(hashMap : ConcurHashMap<?, ??>, fn : (key : ?, value : ??) -> ???) -> ConcurHashMap<?, ???>;

	// Merges two hash maps. t2 overrides t1 on duplicate entries.
	// (complexity is O(t1+t2))
	mergeConcurHashMap(h1 : ConcurHashMap<?, ??>, h2 : ConcurHashMap<?, ??>) -> void;

	// Merges two hash maps with resolving of common keys.
	mergeConcurHashMapCustom(h1 : ConcurHashMap<?, ??>, h2 : ConcurHashMap<?, ??>, resolve : (?, ??, ??) -> ??) -> void;

	pairs2ConcurHashMap : (pairs : [Pair<?, ??>], hash : (?) -> int) -> ConcurHashMap<?, ??>;
	pairs2ConcurHashMapArray(pairs : [Pair<?, [??]>], hash : (?) -> int) -> ConcurHashMap<?, [??]>;
	concurHashMap2pairs : (hashMap : ConcurHashMap<?, ??>) -> [Pair<?, ??>];
	tree2ConcurHashMap : (tree : Tree<?, ??>, hash : (?) -> int) -> ConcurHashMap<?, ??>;

	// Make a copy of hash map. Since ConcurHashMap is mutable, it may make sense.
	copyConcurHashMap(hashMap : ConcurHashMap<?, ??>) -> ConcurHashMap<?, ??>;

	// Make an empty copy of hash map. 
	// This function makes sense in operations with descendant data structures like HashSet<?> (i.e. intersectHashSets)
	prototypeConcurHashMap(hashMap : ConcurHashMap<?, ??>) -> ConcurHashMap<?, ??>;

	equalsConcurHashMap(h1 : ConcurHashMap<?, ??>, h2 : ConcurHashMap<?, ??>) -> bool;

}

makeConcurHashMap(hash : (?) -> int) -> ConcurHashMap<?, ??> {
	dummy: [Pair<?, ??>] = [];
	ConcurHashMap(makeConcurHashMapNative(hash, dummy), dummy);
}
setConcurHashMap(m : ConcurHashMap<?, ??>, key : ?, value : ??) -> void {
	setConcurHashMapNative(m.map, key, value);
}
lookupConcurHashMap(m : ConcurHashMap<?, ??>, key : ?) -> Maybe<??> {
	dummy: [Pair<?, ??>] = [];
	getConcurHashMapNative(m.map, key, dummy);
}
getConcurHashMap(m : ConcurHashMap<?, ??>, key : ?, defval : ??) -> ?? {
	dummy: [Pair<?, ??>] = [];
	switch (getConcurHashMapNative(m.map, key, dummy)) {
		Some(v): v;
		None(): defval;
	}
}
containsKeyConcurHashMap(m : ConcurHashMap<?, ??>, key : ?) -> bool {
	dummy: [Pair<?, ??>] = [];
	containsKeyConcurHashMapNative(m.map, key, dummy);
}
valuesConcurHashMap(m : ConcurHashMap<?, ??>) -> [??] {
	dummy: [Pair<?, ??>] = [];
	valuesConcurHashMapNative(m.map, dummy);
}
removeConcurHashMap(m : ConcurHashMap<?, ??>, key : ?) -> void {
	dummy: [Pair<?, ??>] = [];
	removeConcurHashMapNative(m.map, key, dummy);
}
keysConcurHashMap(m : ConcurHashMap<?, ??>) -> [?] {
	dummy: [Pair<?, ??>] = [];
	keysConcurHashMapNative(m.map, dummy);
}
sizeConcurHashMap(m : ConcurHashMap<?, ??>) -> int {
	dummy: [Pair<?, ??>] = [];
	sizeConcurHashMapNative(m.map, dummy);
}
clearConcurHashMap(m : ConcurHashMap<?, ??>) -> void {
	dummy: [Pair<?, ??>] = [];
	clearConcurHashMapNative(m.map, dummy);
}

native makeConcurHashMapNative : (hash: (?) -> int, __ : [Pair<?, ??>]) -> native = ConcurHashMap.make;
native setConcurHashMapNative : io (m : native, key : ?, value : ??) -> void = ConcurHashMap.set;
native getConcurHashMapNative : (m : native, key : ?, __ : [Pair<?, ??>]) -> Maybe<??> = ConcurHashMap.get;
native containsKeyConcurHashMapNative : (m : native, key : ?, __ : [Pair<?, ??>]) -> bool = ConcurHashMap.containsKey;
native valuesConcurHashMapNative : (m : native, __ : [Pair<?, ??>]) -> [??] = ConcurHashMap.values;
native removeConcurHashMapNative : io (m : native, key : ?, __ : [Pair<?, ??>]) -> void = ConcurHashMap.remove;
native keysConcurHashMapNative : (m : native, __ : [Pair<?, ??>]) -> [?] = ConcurHashMap.keys;
native sizeConcurHashMapNative : (m : native, __ : [Pair<?, ??>]) -> int = ConcurHashMap.size;
native clearConcurHashMapNative : io (m : native, __ : [Pair<?, ??>]) -> void = ConcurHashMap.clear;
native cloneConcurHashMapNative : io (m : native, __ : [Pair<?, ??>]) -> native = ConcurHashMap.clone;
native iterConcurHashMapNative : io (m : native, f : (?, ??) -> void, __ : [Pair<?, ??>]) -> void = ConcurHashMap.iter;
native funcConcurHashMapNative : (m : native, __ : [Pair<?, ??>]) -> (?) -> int = ConcurHashMap.hash;

iterConcurHashMap(hashMap : ConcurHashMap<?, ??>, fn : (key : ?, value : ??) -> void) -> void {
	iterConcurHashMapNative(hashMap.map, fn, hashMap.dummy);
}

foldConcurHashMap(hashMap : ConcurHashMap<?, ??>, acc: ???, f: (key: ?, value: ??, acc: ???) -> ???) -> ??? {
	ac = ref acc;
	iterConcurHashMapNative(hashMap.map, \k, v -> ac := f(k, v, ^ac), hashMap.dummy);
	^ac;
}

mapConcurHashMap(hashMap : ConcurHashMap<?, ??>, f: (key: ?, value: ??) -> ???) -> ConcurHashMap<?, ???> {
	mapped_dummy: [Pair<?, ??>] = [];
	mapped = makeConcurHashMap(funcConcurHashMapNative(hashMap.map, mapped_dummy));
	iterConcurHashMapNative(hashMap.map, 
		\key, value -> setConcurHashMapNative(mapped.map, key, f(key, value)), 
		hashMap.dummy
	);
	mapped;
}

mergeConcurHashMap(h1 : ConcurHashMap<?, ??>, h2 : ConcurHashMap<?, ??>) -> void {
	iterConcurHashMapNative(h2.map, \k, v -> setConcurHashMapNative(h1.map, k, v), h1.dummy);
}

mergeConcurHashMapCustom(h1 : ConcurHashMap<?, ??>, h2 : ConcurHashMap<?, ??>, resolve : (?, ??, ??) -> ??) -> void {
	iterConcurHashMapNative(h2.map, \k, v2 ->
		switch (getConcurHashMapNative(h1.map, k, h1.dummy)) {
			Some(v1): setConcurHashMapNative(h1.map, k, resolve(k, v1, v2));
			None(): setConcurHashMapNative(h1.map, k, v2);
		}, h1.dummy
	);
}

pairs2ConcurHashMap(pairs : [Pair<?, ??>], hash : (?) -> int) -> ConcurHashMap<?, ??> {
	dummy: [Pair<?, ??>] = [];
	m = makeConcurHashMapNative(hash, dummy);
	iter(pairs, \pair -> setConcurHashMapNative(m, pair.first, pair.second));
	ConcurHashMap(m, dummy);
}

pairs2ConcurHashMapArray(pairs : [Pair<?, [??]>], hash : (?) -> int) -> ConcurHashMap<?, [??]> {
	dummy : [Pair<?, [??]>] = [];
	m = makeConcurHashMapNative(hash, dummy);
	iter(pairs, \pair : Pair<?, [??]> -> {
		n_arr : [??] = switch (getConcurHashMapNative(m, pair.first, dummy)) {
			Some(arr): concat(arr, pair.second);
			None(): pair.second;
		}
		setConcurHashMapNative(m, pair.first, n_arr);
	});
	ConcurHashMap(m, dummy);
}

concurHashMap2pairs(hashMap : ConcurHashMap<?, ??>) -> [Pair<?, ??>] {
	if (sizeConcurHashMap(hashMap) >= 10) {
		list2array(foldConcurHashMap(hashMap, makeList(), \k, v, a -> Cons(Pair(k, v), a)))
	} else {
		foldConcurHashMap(hashMap, [], \k, v, a -> arrayPush(a, Pair(k, v)))
	}
}

tree2ConcurHashMap(tree : Tree<?, ??>, hash : (?) -> int) -> ConcurHashMap<?, ??> {
	dummy: [Pair<?, ??>] = [];
	m = makeConcurHashMapNative(hash, dummy);
	traverseInOrder(tree, \k, v -> setConcurHashMapNative(m, k, v));
	ConcurHashMap(m, dummy);
}

copyConcurHashMap(hashMap : ConcurHashMap<?, ??>) -> ConcurHashMap<?, ??> {
	ConcurHashMap(cloneConcurHashMapNative(hashMap.map, hashMap.dummy), hashMap.dummy);
}

prototypeConcurHashMap(hashMap : ConcurHashMap<?, ??>) -> ConcurHashMap<?, ??> {
	makeConcurHashMap(funcConcurHashMapNative(hashMap.map, hashMap.dummy));
}

equalsConcurHashMap(h1 : ConcurHashMap<?, ??>, h2 : ConcurHashMap<?, ??>) -> bool {
	if (sizeConcurHashMap(h1) != sizeConcurHashMap(h2)) false else {
		ret = ref true;
		dummy: [Pair<?, ??>] = [];
		iterConcurHashMapNative(h1.map, \k, v1 ->
			switch (getConcurHashMapNative(h2.map, k, dummy)) {
				Some(v2): if (v1 != v2) ret := false;
				None(): ret := false;
			}, []
		);
		^ret;
	}
}

// Fallbacks for concurrent hash map

ConcurHashMapImpl(
	map : HashMap<?, ??>,
	get: (?) -> Maybe<??>,
	set: (?, ??) -> void,
	remove: (?) -> void,
	contains: (?) -> bool,
	keys: () -> [?],
	values: () -> [??],
	size: () -> int,
	clear: () -> void,
	iter: ((?, ??) -> void) -> void,
	clone: () -> ConcurHashMapImpl<?, ??>
);

makeConcurHashMapNative(hash: (?) -> int, p : [Pair<?, ??>]) -> native {
	flow(makeConcurHashMapImpl(hash, p));
}

makeConcurHashMapImpl(hash: (?) -> int, p : [Pair<?, ??>]) -> ConcurHashMapImpl<?, ??> {
	m : HashMap<?, ??> = makeHashMap(hash);
	ConcurHashMapImpl(
		m,
		synchronizedUnaryFn(m, \k -> lookupHashMap(m, k)),        // get
		synchronizedBinaryFn(m, \k, v -> setHashMap(m, k, v)),    // set
		synchronizedUnaryFn(m, \k -> removeFromHashMap(m, k)),    // remove
		synchronizedUnaryFn(m, \k -> containsKeyHashMap(m, k)),   // contains
		synchronizedConstFn(m, \ -> hashMapKeys(m)),              // keys
		synchronizedConstFn(m, \ -> hashMapValues(m)),            // values
		synchronizedConstFn(m, \ -> sizeHashMap(m)),              // size
		synchronizedConstFn(m, \ -> clearHashMap(m)),             // clear
		synchronizedUnaryFn(m, \f -> iterHashMap(m, f)),          // iter
		synchronizedConstFn(m, \ -> {
			clone = makeConcurHashMapImpl(hash, p);
			iterHashMap(m, \k, v -> setHashMap(clone.map, k, v));
			clone
		}),              // clone
	);
}


getConcurHashMapNative(n : native, key : ?, __ : [Pair<?, ??>]) -> Maybe<??> {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.get(key);
}

setConcurHashMapNative(n : native, key : ?, value : ??) -> void {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.set(key, value);
}

removeConcurHashMapNative(n : native, key : ?, __ : [Pair<?, ??>]) -> void {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.remove(key);
}

containsKeyConcurHashMapNative(n : native, key : ?, __ : [Pair<?, ??>]) -> bool {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.contains(key);
}

keysConcurHashMapNative(n : native, __ : [Pair<?, ??>]) -> [?] {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.keys();
}

valuesConcurHashMapNative(n : native, __ : [Pair<?, ??>]) -> [??] {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.values();
}

sizeConcurHashMapNative(n : native, __ : [Pair<?, ??>]) -> int {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.size();
}

clearConcurHashMapNative(n : native, __ : [Pair<?, ??>]) -> void {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.clear();
}

funcConcurHashMapNative(n : native, __ : [Pair<?, ??>]) -> (?) -> int {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	funcHashMap(m.map);
}

iterConcurHashMapNative(n : native, fn : (key : ?, value : ??) -> void, __ : [Pair<?, ??>]) -> void {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	m.iter(fn);
}

cloneConcurHashMapNative(n : native, __ : [Pair<?, ??>]) -> native {
	m = cast(flow(n) : flow -> ConcurHashMapImpl<?, ??>);
	flow(m.clone());
}
