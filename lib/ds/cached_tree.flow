import ds/tree;
import fusion;

export {
	// Given a dynamic array of values, construct a factory that can produce a tree of it
	getCachedTree(data : Transform<[?]>, getKey : (?) -> ??) -> CachedTree<??, ?>;

	CachedTree(
		// When you need a tree of the data, call this. It will cache the tree when possible
		getTree : () -> Tree<??, ?>, 
		// To free memory, call this
		clear : () -> void, 
		// When done, call this
		dispose : () -> void
	);
}

getCachedTree(data : Transform<[?]>, getKey : (?) -> ??) -> CachedTree<??, ?> {
	hasData = ref false;
	cachedTree = ref makeTree();
	us = fsubscribe(data, \__ -> {
		hasData := false;
		cachedTree := makeTree();
	});
	CachedTree(
		\ -> {
			if (!^hasData) {
				cdata = fgetValue(data);
				cachedTree := fold(cdata, makeTree(), \acc, d -> {
					setTree(acc, getKey(d), d);
				});
				hasData := true;
			}
			^cachedTree
		},
		\ -> {
			hasData := false;
			cachedTree := makeTree();
		},
		\ -> callList(us)
	)
}
