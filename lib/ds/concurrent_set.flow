import runtime;
import sys/concurrent;

export {
	ConcurrentSet(
		map : native, // The underlying concurrent hash map
		dummy: [?]    // So we have the polymorphism as part of the type
	);

	makeConcurrentSet() -> ConcurrentSet<?>;
	addConcurrentSet(set : ConcurrentSet<?>, value : ?) -> void;
	add2ConcurrentSet(set : ConcurrentSet<?>, normal : [?]) -> void;
	removeConcurrentSet(set : ConcurrentSet<?>, value : ?) -> void;
	remove2ConcurrentSet(set : ConcurrentSet<?>, values : [?]) -> void;
	containsConcurrentSet(set : ConcurrentSet<?>, value : ?) -> bool;
	isEmptyConcurrentSet(set : ConcurrentSet<?>) -> bool;
	sizeConcurrentSet(set : ConcurrentSet<?>) -> int;
	clearConcurrentSet(set : ConcurrentSet<?>) -> void;
	set2arrayConcurrent(set : ConcurrentSet<?>) -> [?];
	mergeConcurrentSets(a : ConcurrentSet<?>, b : ConcurrentSet<?>) -> ConcurrentSet<?>;
	differenceConcurrentSets(a : ConcurrentSet<?>, b : ConcurrentSet<?>) -> ConcurrentSet<?>;
}

makeConcurrentSet() -> ConcurrentSet<?> {
	ConcurrentSet(initConcurrentHashMap(), [])
}

add2ConcurrentSet(set : ConcurrentSet<?>, normal : [?]) -> void {
	iter(normal, \v -> {
		setConcurrentHashMap(set.map, v, true)
	});
}

addConcurrentSet(set : ConcurrentSet<?>, value : ?) -> void {
	setConcurrentHashMap(set.map, value, true);
}

removeConcurrentSet(set : ConcurrentSet<?>, value : ?) -> void {
	removeConcurrentHashMap(set.map, value);
}

remove2ConcurrentSet(set : ConcurrentSet<?>, values : [?]) -> void {
	iter(values, \v -> {
		removeConcurrentSet(set, v)
	});
}

containsConcurrentSet(set : ConcurrentSet<?>, value : ?) -> bool {
	containsConcurrentHashMap(set.map, value)
}

isEmptyConcurrentSet(set : ConcurrentSet<?>) -> bool {
	sizeConcurrentHashMap(set.map) == 0
}

sizeConcurrentSet(set : ConcurrentSet<?>) -> int {
	sizeConcurrentHashMap(set.map)
}

clearConcurrentSet(set : ConcurrentSet<?>) -> void {
	clearConcurrentHashMap(set.map)
}

set2arrayConcurrent(set : ConcurrentSet<?>) -> [?] {
	keysConcurrentHashMap(set.map)
}

mergeConcurrentSets(a : ConcurrentSet<?>, b : ConcurrentSet<?>) -> ConcurrentSet<?> {
	result = makeConcurrentSet();
	setAllConcurrentHashMap(result.map, a.map);
	setAllConcurrentHashMap(result.map, b.map);
	result
}

differenceConcurrentSets(a : ConcurrentSet<?>, b : ConcurrentSet<?>) -> ConcurrentSet<?> {
	result = makeConcurrentSet();
	iter(set2arrayConcurrent(a), \v -> {
		if (!containsConcurrentSet(b, v)) {
			addConcurrentSet(result, v)
		}
	});
	result
}