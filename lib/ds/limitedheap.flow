import ds/tree;
import math;

export {
	// Make a heap with a maximum capacity, keeping only the N biggest elements
	makeLimitedHeap(limit : int, initialPayload : Tree<double, [?]>) -> LimitedHeap<?>;

	// Insert a payload with a given score, and keep it if it is big enough and within the capacity
	insertLimitedHeap(heap : LimitedHeap<?>, score : double, payload : ?) -> LimitedHeap<?>;

	// Extract the heap as a useful array
	limitedHeap2array(heap : LimitedHeap<?>) -> [Pair<double, ?>];

	// The bookkeeping structure
	LimitedHeap(
		// How many elements are in the heap so far?
		count : int, 
		// What is the max capacity we need?
		limit : int, 
		// What is the score of the minimum element?
		minimumScore : double, 
		// The heap itself
		heap : Tree<double, [?]>
	);
}

makeLimitedHeap(limit : int, initialPayload : Tree<double, [?]>) -> LimitedHeap<?> {
	// TODO: If the initial payload contains
	minElement = popmin(initialPayload);
	minScore = switch (minElement) {
		PopResult(k, v, r): k;
		EmptyPopResult(): doubleMax;
	}

	LimitedHeap(
		sizeTree(initialPayload),
		limit,
		minScore,
		initialPayload
	);
}

insertLimitedHeap(heap : LimitedHeap<?>, score : double, payload : ?) -> LimitedHeap<?> {
	if (heap.count < heap.limit) {
		LimitedHeap(
			heap.count + 1,
			heap.limit,
			min(score, heap.minimumScore),
			treePushToArrayValue(heap.heap, score, payload)
		);
	} else {
		if (score <= heap.minimumScore) heap
		else {
			// We have to pull something out
			discard = popmin(heap.heap);
			switch (discard) {
				EmptyPopResult(): {
					// Strange, but OK, we will insert outselves
					LimitedHeap(
						heap.count,
						heap.limit,
						min(score, heap.minimumScore),
						treePushToArrayValue(heap.heap, score, payload)
					);
				}
				PopResult(k, v, rest): {
					tv = tail(v);
					if (tv == []) {
						// OK, we cleared the lowest key, so see if there is a new minimum
						minElement = popmin(rest);
						switch (minElement) {
							PopResult(m1, v1, r): {
								LimitedHeap(
									heap.count,
									heap.limit,
									min(score, m1),
									treePushToArrayValue(rest, score, payload)
								);
							}
							EmptyPopResult(): {
								// OK, we are completely empty
								oneless = setTree(rest, k, tail(v));
								LimitedHeap(
									heap.count,
									heap.limit,
									min(score, heap.minimumScore),
									treePushToArrayValue(oneless, score, payload)
								);
							}
						}
					} else {
						// We did not clear a key, so we have to take out just one element
						// from the minimum and then add the new guy
						oneless = setTree(rest, k, tv);
						LimitedHeap(
							heap.count,
							heap.limit,
							min(score, heap.minimumScore),
							treePushToArrayValue(oneless, score, payload)
						);
					}
				}
			}
		}
	}
}

limitedHeap2array(heap : LimitedHeap<?>) -> [Pair<double, ?>] {
	foldTree(heap.heap, [], \score, payloads, acc : [Pair<double, ?>] -> {
		concat(acc, map(payloads, \p -> Pair(score, p)))
	});
}

/*
main() {
	h0 = makeLimitedHeap(3, makeTree());
	println(limitedHeap2array(h0));

	fold(generate(0, 1000, \i -> {
		i
	}), h0, \acc, i -> {
		score = random();
		acc2 = insertLimitedHeap(acc, score, i);
		println("Inserted " + d2s(score));
		println(limitedHeap2array(acc2));
		acc2;
	});
	quit(0);
}
*/
