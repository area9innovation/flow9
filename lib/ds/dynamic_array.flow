import ds/heckel_diff;
import ds/array_diff;
import net/url_parameter;
import fusion;

export {
	DynamicArray<?> ::= DynamicArrayContainer<?>, DynamicArrayModifier<?>;
		DynamicArrayModifier<?> ::= DynamicArrayMap<?>, DynamicArrayMapi<?>, DynamicArraySubMap<?>, DynamicArraySubMapi<?>, DynamicArrayMapu<?>, DynamicArrayMapiu<?>,
			DynamicArrayFilter<?>, DynamicArrayConcat<?>, DynamicArraySubrange<?>, DynamicArrayMerge<?>, DynamicArrayConstruct<?>;

		DynamicArrayContainer(
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>
		);

		DynamicArrayMap(
			container : DynamicArray<flow>,
			fn : (flow) -> ?,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayMapi(
			container : DynamicArray<flow>,
			fn : (int, flow) -> ?,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArraySubMap(
			container : DynamicArray<flow>,
			fn : (flow) -> Transform<?>,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArraySubMapi(
			container : DynamicArray<flow>,
			fn : (Transform<int>, flow) -> Transform<?>,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayMapu(
			container : DynamicArray<flow>,
			fn : (flow) -> Disposable<?>,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayMapiu(
			container : DynamicArray<flow>,
			fn : (Transform<int>, flow) -> Disposable<?>,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayFilter(
			container : DynamicArray<?>,
			fn : (?) -> bool,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayConcat(
			container1 : DynamicArray<?>,
			container2 : DynamicArray<?>,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArraySubrange(
			container : DynamicArray<flow>,
			index : Transform<int>,
			length : Transform<int>,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayMerge(
			container : DynamicArray<DynamicArray<?>>,
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

		DynamicArrayConstruct(
			container : DynamicArray<?>,
			fn : [() -> () -> void],
			mutable values : [?],
			mutable linked : bool,
			subscribers : DList<(HeckelOperationSimple<?>) -> void>,
			mutable dispose : [() -> void]
		);

			HeckelOperationSimple<?> ::= HeckelInsert<?>, HeckelDelete;

	makeDynamicArray(values : [?]) -> DynamicArray<?>;
	makeDynamicArrayFromTransform(a : Transform<[?]>) -> DynamicArray<?>;
	subscribeDynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> void;
	subscribe2DynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> void;
	makeSubscribeDynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> () -> void;
	makeSubscribe2DynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> () -> void;
	listenDynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void;
	listen2DynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void;
	bidirectionalLinkDynamicArray(a : DynamicArray<?>, b : DynamicArray<??>, a2b : (a : [?]) -> void, b2a : (b : [??]) -> void) -> () -> void;

	insertDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void;
	// moveDynamicArray(a : DynamicArray<?>, f : int, t : int) -> void;
	deleteDynamicArray(a : DynamicArray<?>, i : int) -> void;
	removeDynamicArray(a : DynamicArray<?>, v : ?) -> bool;
	replaceDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void;
	appendDynamicArray(a : DynamicArray<?>, v : ?) -> void;
	pushDynamicArray(a : DynamicArray<?>, v : ?) -> void;
	nextDynamicArray(a : DynamicArray<?>, b : [?]) -> void;

	mapDynamicArray(a : DynamicArray<?>, fn : (?) -> ??) -> DynamicArray<??>;
	mapiDynamicArray(a : DynamicArray<?>, fn : (int, ?) -> ??) -> DynamicArray<??>;
	submapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<??>) -> DynamicArray<??>;
	submapiDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> Transform<??>) -> DynamicArray<??>;
	mapuDynamicArray(a : DynamicArray<?>, fn : (?) -> Disposable<??>) -> DynamicArray<??>;
	mapiuDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> Disposable<??>) -> DynamicArray<??>;

	iteriuDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> [() -> void]) -> () -> void;

	filterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> DynamicArray<?>;
	subfilterDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<bool>) -> DynamicArray<?>;
	filtermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> DynamicArray<??>;
	filtersubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> DynamicArray<??>;
	subfiltermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<Transform<??>>) -> DynamicArray<??>;

	concatDynamicArray(a1 : DynamicArray<?>, a2 : DynamicArray<?>) -> DynamicArray<?>;
	subrangeDynamicArray(a : DynamicArray<?>, index : Transform<int>, len : Transform<int>) -> DynamicArray<?>;
	orderDynamicArray(a : DynamicArray<?>, order : DynamicArray<int>) -> DynamicArray<?>;
	mergeDynamicArray(a : DynamicArray<DynamicArray<?>>) -> DynamicArray<?>;
	constructDynamicArray(a : DynamicArray<?>, fn : [() -> () -> void]) -> DynamicArray<?>;

	findDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<Maybe<?>>;
	findiDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<Maybe<int>>;
	findmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> Transform<Maybe<??>>;
	findsubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> Transform<Maybe<??>>;
	containsDynamicArray(a : DynamicArray<?>, v : ?) -> Transform<bool>;
	existsDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<bool>;
	elementAtDynamicArray(a : DynamicArray<?>, index : Transform<int>) -> Transform<Maybe<?>>;
	elementAtDynamicArrayDef(a : DynamicArray<?>, index : Transform<int>, def : ?) -> Transform<?>;
	firstElementDynamicArray(a : DynamicArray<?>) -> Transform<Maybe<?>>;

	// foldDynamicArray(a : DynamicArray<?>, fn : (acc : ??, v : ?) -> ??) -> Transform<??>;

	lengthDynamicArray(a : DynamicArray<?>) -> Transform<int>;
	transformDynamicArray(a : DynamicArray<?>) -> Transform<[?]>;
	selectDynamicArray(a : Transform<?>, fn : (?) -> [??]) -> DynamicArray<??>;

	getDynamicArrayLength(a : DynamicArray<?>) -> int;
	getDynamicArrayValue(a : DynamicArray<?>) -> [?];
	getDynamicArrayElementAt(a : DynamicArray<?>, index : int) -> Maybe<?>;
	getDynamicArrayElementAtDef(a : DynamicArray<?>, index : int, def : ?) -> ?;

	applyFilterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> void;

	dynamicArray2s(a : DynamicArray<?>) -> string;
}

debugDynamicArray = isUrlParameterTrue("debug_dynamic_array");

makeDynamicArray(values : [?]) -> DynamicArray<?> {
	if (debugDynamicArray) {
		println("makeDA: " + toString(values));
	}

	DynamicArrayContainer(values, false, makeDList());
}

makeDynamicArrayFromTransform(a : Transform<[?]>) -> DynamicArray<?> {
	da = makeDynamicArray(fgetValue(a));

	constructDynamicArray(
		da,
		[makeSubscribe2(a, \aa -> nextDynamicArray(da, aa))]
	)
}

subscribeDynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> void {
	uns = ref nop;
	dispose = listen2DynamicArray(a, \__ -> { ^uns(); uns := interruptibleDeferUntilNextFrameRendered(\ -> fn(a.values)); });

	fn(a.values);

	\ -> {
		dispose();
		^uns();
	}
}

subscribe2DynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> void {
	uns = ref nop;
	dispose = listen2DynamicArray(a, \__ -> { ^uns(); uns := interruptibleDeferUntilNextFrameRendered(\ -> fn(a.values)); });

	\ -> {
		dispose();
		^uns();
	}
}

makeSubscribeDynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> () -> void {
	\ -> subscribeDynamicArray(a, fn);
}

makeSubscribe2DynamicArray(a : DynamicArray<?>, fn : ([?]) -> void) -> () -> () -> void {
	\ -> subscribe2DynamicArray(a, fn);
}

listenDynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void {
	dispose = listen2DynamicArray(a, fn);
	iteri(a.values, \i, aa -> fn(HeckelInsert(i, aa)));
	dispose;
}

listen2DynamicArray(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void {
	linkDynamicArray(a);
	u = listen2DynamicArrayContainer(a, fn);

	\ -> {
		u();
		unlinkDynamicArray(a);
	};
}

listen2DynamicArrayContainer(a : DynamicArray<?>, fn : (HeckelOperationSimple<?>) -> void) -> () -> void {
	n = pushDList(a.subscribers, fn);

	\ -> {
		removeDList(a.subscribers, n);
	}
}

bidirectionalLinkDynamicArray(a : DynamicArray<?>, b : DynamicArray<??>, a2b : (a : [?]) -> void, b2a : (b : [??]) -> void) -> () -> void {
	nested = ref false;
	u1 = subscribeDynamicArray(a, \v -> if (!^nested) {
		nested := true;
		a2b(v);
		nested := false;
	});
	u2 = subscribe2DynamicArray(b, \v -> if (!^nested) {
		nested := true;
		b2a(v);
		nested := false;
	});

	\ -> {
		u1();
		u2();
	}
}

linkDynamicArray(a : DynamicArray<?>) -> void {
	if (!a.linked) {
		a.linked ::= true;

		if (debugDynamicArray) {
			switch (a : DynamicArray<?>) {
				DynamicArrayModifier(): {
					println("linkDA:\n" + dynamicArray2s(a));
				}
				default: {}
			}
		}

		switch (a : DynamicArray<?>) {
			DynamicArrayMap(__, __, __, __,__, __) : {
				a.dispose ::=
					[
						listen2DynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i, a.fn(v));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i);
								}
							}
						})
					];
				a.values ::= map(a.container.values, a.fn);
			}
			DynamicArrayMapi(__, __, __, __, __, __) : {
				a.dispose ::=
					[
						listen2DynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i, a.fn(i, v));
									fori(i + 1, getDynamicArrayLengthInternal(a.container) - 1, \j -> {
										maybeApply(getDynamicArrayElementAtInternal(a.container, j), \vv -> replaceDynamicArray(a, j, a.fn(j, vv)));
									});
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i);
									fori(i, getDynamicArrayLengthInternal(a.container) - 1, \j -> {
										maybeApply(getDynamicArrayElementAtInternal(a.container, j), \vv -> replaceDynamicArray(a, j, a.fn(j, vv)));
									});
								}
							}
						})
					];
				a.values ::= mapi(a.container.values, a.fn);
			}
			DynamicArraySubMap(__, __, __, __, __, __) : {
				disposers = ref [];
				indexes = ref [];

				a.dispose ::=
					[
						listen2DynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									index = make(i);
									indexes := insertArray(^indexes, i, index);
									r = a.fn(v);
									disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, getValue(index), vv))());
									insertDynamicArray(a, i, fgetValue(r));

									fori(i + 1, length(^indexes) - 1, \j -> next(^indexes[j], j));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									^disposers[i];
									indexes := removeIndex(^indexes, i);
									disposers := removeIndex(^disposers, i);

									deleteDynamicArray(a, i);
									fori(i, length(^indexes) - 1, \j -> next(^indexes[j], j));
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
							indexes := [];
						}
					];

				a.values ::= mapi(a.container.values, \i, v -> {
					index = make(i);
					indexes := insertArray(^indexes, i, index);
					r = a.fn(v);
					disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, getValue(index), vv))());
					fgetValue(r);
				});
			}
			DynamicArraySubMapi(__, __, __, __, __, __) : {
				disposers = ref [];
				indexes = ref [];

				a.dispose ::=
					[
						listen2DynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									index = make(i);
									indexes := insertArray(^indexes, i, index);
									r = a.fn(index, v);
									disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, getValue(index), vv))());
									insertDynamicArray(a, i, fgetValue(r));

									fori(i + 1, length(^indexes) - 1, \j -> next(^indexes[j], j));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									^disposers[i];
									indexes := removeIndex(^indexes, i);
									disposers := removeIndex(^disposers, i);

									deleteDynamicArray(a, i);
									fori(i, length(^indexes) - 1, \j -> next(^indexes[j], j));
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
							indexes := [];
						}
					];

				a.values ::= mapi(a.container.values, \i, v -> {
					index = make(i);
					indexes := insertArray(^indexes, i, index);
					r = a.fn(index, v);
					disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, getValue(index), vv))());
					fgetValue(r);
				});
			}
			DynamicArrayMapu(__, __, __, __, __, __) : {
				disposers = ref [];
				a.dispose ::=
					[
						listen2DynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									r = a.fn(v);
									disposers := insertArray(^disposers, i, r.dispose);
									insertDynamicArray(a, i, r.value);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									^disposers[i];
									disposers := removeIndex(^disposers, i);
									deleteDynamicArray(a, i);
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
						}
					];

				valuesDisposers = map(a.container.values, \v -> a.fn(v));

				disposers := map(valuesDisposers, \v -> v.dispose);
				a.values ::= map(valuesDisposers, \v -> v.value);
			}
			DynamicArrayMapiu(__, __, __, __, __, __) : {
				disposers = ref [];
				indexes = ref [];

				a.dispose ::=
					[
						listen2DynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									index = make(i);
									r = a.fn(index, v);
									indexes := insertArray(^indexes, i, index);
									disposers := insertArray(^disposers, i, r.dispose);

									insertDynamicArray(a, i, r.value);
									fori(i + 1, length(^indexes) - 1, \j -> next(^indexes[j], j));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									^disposers[i];
									indexes := removeIndex(^indexes, i);
									disposers := removeIndex(^disposers, i);

									deleteDynamicArray(a, i);
									fori(i, length(^indexes) - 1, \j -> next(^indexes[j], j));
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
							indexes := [];
						}
					];

				valuesDisposers = mapi(a.container.values, \i, v -> {
					index = make(i);
					r = a.fn(index, v);
					indexes := insertArray(^indexes, i, index);
					r;
				});

				disposers := map(valuesDisposers, \v -> v.dispose);
				a.values ::= map(valuesDisposers, \v -> v.value);
			}
			DynamicArrayFilter(__, __, __, __, __, __) : {
				result = ref [];
				a.dispose ::=
					[
						listen2DynamicArray(a.container, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									if (a.fn(v)) {
										result := insertArray(^result, i, true);
										insertDynamicArray(a, countA(subrange(^result , 0, i), idfn), v);
									} else {
										result := insertArray(^result, i, false);
									}
								}
								// HeckelMove(f, t): {
								// 	result := moveElement(^result , f, t);
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									if (^result[i]) {
										result := removeIndex(^result, i);
										deleteDynamicArray(a, countA(subrange(^result, 0, i), idfn));
									} else {
										result := removeIndex(^result, i);
									}
								}
							}
						})
					];

				a.values ::= filtermapi(a.container.values, \i, v -> {
					if (a.fn(v)) {
						result := insertArray(^result, i, true);
						Some(v);
					} else {
						result := insertArray(^result, i, false);
						None();
					}
				});
			}
			DynamicArrayConcat(__, __, __, __, __, __) : {
				a.dispose ::=
					[
						listen2DynamicArray(a.container1, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i, v);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i);
								}
							}
						}),
						listen2DynamicArray(a.container2, \op -> {
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									insertDynamicArray(a, i + getDynamicArrayLengthInternal(a.container1), v);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f + length((a.container1).values), t + length((a.container1).values));
								// }
								HeckelDelete(i): {
									deleteDynamicArray(a, i + getDynamicArrayLengthInternal(a.container1));
								}
							}
						})
					];
				a.values ::= concat(a.container1.values, a.container2.values);
			}
			DynamicArraySubrange(__, __, __, __, __, __, __) : {
				a.dispose ::=
					[
						make2SubscribeUns(
							a.index,
							a.length,
							\ind, len ->
								[
									listen2DynamicArray(a.container, \op -> {
										switch (op : HeckelOperationSimple<?>) {
											HeckelInsert(i, v): {
												if (i < ind + len) {
													deleteDynamicArray(a, len - 1);
													if (i >= ind) {
														insertDynamicArray(a, i - ind, v);
													} else {
														maybeApply(getDynamicArrayElementAtInternal(a.container, ind), \vv -> insertDynamicArray(a, 0, vv));
													}
												}
											}
											// HeckelMove(f, t): { // TODO
											// 	if (f >= ind && f < ind + len) {
											// 		if (t >= ind && t < ind + len) {
											// 			moveDynamicArray(a, f - ind, t - ind);
											// 		} else {
											// 			deleteDynamicArray(a, f - ind);
											// 		}
											// 	} else {
											// 		if (t >= ind && t < ind + len) {
											// 			insertDynamicArray(a, t - ind, a.container.values[f]);
											// 		}
											// 	}
											// }
											HeckelDelete(i): {
												if (i < ind + len) {
													deleteDynamicArray(a, max(i - ind, 0));
													maybeApply(getDynamicArrayElementAtInternal(a.container, ind + len - 1), \vv -> insertDynamicArray(a, len - 1, vv));
												}
											}
										}
									})
								]
						)()
					];
				a.values ::= subrange(a.container.values, fgetValue(a.index), fgetValue(a.length));
			}
			DynamicArrayMerge(__, __, __, __, __) : {
				disposers = ref [];
				sizes = ref [];
				indexes = ref [];

				a.dispose ::=
					[
						listen2DynamicArray(a.container, \dop -> {
							switch (dop : HeckelOperationSimple<DynamicArray<?>>) {
								HeckelInsert(j, dv): {
									index = make(j);
									disposers := insertArray(^disposers, j,
										listen2DynamicArray(dv, \op -> {
											switch (op : HeckelOperationSimple<?>) {
												HeckelInsert(i, v): {
													sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] + 1);
													insertDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i, v);
												}
												// HeckelMove(f, t): {
												// 	moveDynamicArray(a, f, t);
												// }
												HeckelDelete(i): {
													sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] - 1);
													deleteDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i);
												}
											}
										})
									);
									indexes := insertArray(^indexes, j, index);
									sizes := insertArray(^sizes, j, getDynamicArrayLengthInternal(dv));
									fori(j + 1, length(^indexes) - 1, \k -> next(^indexes[k], k));

									iteri(dv.values, \i, v -> insertDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i, v));
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(j): {
									index = sum(subrange(^sizes, 0, getValue(^indexes[j])));
									size = ^sizes[j];

									^disposers[j];
									indexes := removeIndex(^indexes, j);
									sizes := removeIndex(^sizes, j);
									disposers := removeIndex(^disposers, j);
									fori(j, length(^indexes) - 1, \k -> next(^indexes[k], k));

									fori(index, index + size - 1, \i -> deleteDynamicArray(a, i));
								}
							}
						}),
						\ -> {
							applyall(^disposers);
							disposers := [];
							indexes := [];
							sizes := [];
						}
					];

				a.values ::= foldi(a.container.values, [], \j, acc, dv -> {
					index = make(j);
					disposers := insertArray(^disposers, j,
						listen2DynamicArray(dv, \op -> {
							// println("op");
							// println(op);
							switch (op : HeckelOperationSimple<?>) {
								HeckelInsert(i, v): {
									sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] + 1);
									insertDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i, v);
								}
								// HeckelMove(f, t): {
								// 	moveDynamicArray(a, f, t);
								// }
								HeckelDelete(i): {
									sizes := replace(^sizes, getValue(index), ^sizes[getValue(index)] - 1);
									deleteDynamicArray(a, sum(subrange(^sizes, 0, getValue(index))) + i);
								}
							}
						})
					);
					indexes := insertArray(^indexes, j, index);
					sizes := insertArray(^sizes, j, getDynamicArrayLengthInternal(dv));

					concat(acc, dv.values);
				});
			}
			DynamicArrayConstruct(__, __, __, __, __, __) : {
				a.dispose ::= arrayPush(map(a.fn, apply0), listen2DynamicArray(a.container, \__ -> a.values ::= a.container.values));
				a.values ::= a.container.values;
			}
			default: {}
		}

		switch (a : DynamicArray<?>) {
			DynamicArrayModifier(): {
				iterDList(a.subscribers, \fn -> iteri(a.values, \i, aa -> fn(HeckelInsert(i, aa))));
			}
			default: {}
		}
	}
}

unlinkDynamicArray(a : DynamicArray<?>) -> void {
	if (a.linked && lengthDList(a.subscribers) == 0) {
		a.linked ::= false;

		switch (a : DynamicArray<?>) {
			DynamicArrayModifier(): {
				if (debugDynamicArray) {
					println("unlinkDA:\n" + dynamicArray2s(a));
				}
				applyall(a.dispose);
				a.dispose ::= [];
			}
			default : {}
		}
	}
}

insertDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void {
	ii = min(getDynamicArrayLengthInternal(a), max(i, 0));

	a.values ::= insertArray(a.values, ii, v);

	if (a.linked) {
		iterDList(a.subscribers, \fn -> fn(HeckelInsert(ii, v)));
	}
}

// moveDynamicArray(a : DynamicArray<?>, f : int, t : int) -> void {
// 	tt = min(getDynamicArrayLengthInternal(a) - 1, max(t, 0));

// 	if (existsIndex(a.values, f) && f != tt) {
// 		a.values ::= moveElement(a.values, f, tt);

// 		if (a.linked) {
// 			iterDList(a.subscribers, \fn -> fn(HeckelMove(f, tt)));
// 		}
// 	}
// }

deleteDynamicArray(a : DynamicArray<?>, i : int) -> void {
	if (existsIndex(a.values, i)) {
		a.values ::= removeIndex(a.values, i);

		if (a.linked) {
			iterDList(a.subscribers, \fn -> fn(HeckelDelete(i)));
		}
	}
}

removeDynamicArray(a : DynamicArray<?>, v : ?) -> bool {
	index = elemIndex(a.values, v, -1);

	if (index >= 0) {
		deleteDynamicArray(a, index);
		true;
	} else {
		false;
	}
}

replaceDynamicArray(a : DynamicArray<?>, i : int, v : ?) -> void {
	ii = min(getDynamicArrayLengthInternal(a), max(i, 0));

	if (length(a.values) == ii || a.values[ii] != v) {
		deleteDynamicArray(a, ii);
		insertDynamicArray(a, ii, v);
	}
}

appendDynamicArray(a : DynamicArray<?>, v : ?) -> void {
	insertDynamicArray(a, getDynamicArrayLengthInternal(a), v);
}

pushDynamicArray(a : DynamicArray<?>, v : ?) -> void {
	if (!contains(a.values, v)) {
		insertDynamicArray(a, getDynamicArrayLengthInternal(a), v);
	}
}

nextDynamicArray(a : DynamicArray<?>, b : [?]) -> void {
	iter(heckelDiff(a.values, b), \op -> {
		switch (op : HeckelOperation<?>) {
			HeckelInsert(i, v): {
				insertDynamicArray(a, i, v);
			}
			HeckelMove(f, t): {
				// moveDynamicArray(a, f, t);
			}
			HeckelDelete(i): {
				deleteDynamicArray(a, i);
			}
		}
	});
}

nextDynamicArrayDiff(a : DynamicArray<?>, b : [?]) -> void {
	iter(arrayDiff(a.values, b, false), \op -> {
		switch (op : ArrayOperation<?>) {
			ArrayNop(oldindex, newindex): {}
			ArrayInsert(oldindex, newindex, value): insertDynamicArray(a, oldindex, value);
			ArrayReplace(oldindex, newindex, value): replaceDynamicArray(a, oldindex, value);
			ArrayRemove(oldindex, newindex): deleteDynamicArray(a, oldindex);
		}
	});
}

mapDynamicArray(a : DynamicArray<?>, fn : (?) -> ??) -> DynamicArray<??> {
	DynamicArrayMap(a, fn, [], false, makeDList(), []);
}

mapiDynamicArray(a : DynamicArray<?>, fn : (int, ?) -> ??) -> DynamicArray<??> {
	DynamicArrayMapi(a, fn, [], false, makeDList(), []);
}

submapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<??>) -> DynamicArray<??> {
	DynamicArraySubMap(a, fn, [], false, makeDList(), []);
}

submapiDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> Transform<??>) -> DynamicArray<??> {
	DynamicArraySubMapi(a, fn, [], false, makeDList(), []);
}

mapuDynamicArray(a : DynamicArray<?>, fn : (?) -> Disposable<??>) -> DynamicArray<??> {
	DynamicArrayMapu(a, fn, [], false, makeDList(), []);
}

mapiuDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> Disposable<??>) -> DynamicArray<??> {
	DynamicArrayMapiu(a, fn, [], false, makeDList(), []);
}

iteriuDynamicArray(a : DynamicArray<?>, fn : (Transform<int>, ?) -> [() -> void]) -> () -> void {
	da = mapiuDynamicArray(a, \i, v -> {d = fn(i, v); Disposable(false, \ -> applyall(d));});
	linkDynamicArray(da);
	\ -> {
		unlinkDynamicArray(da);
	}
}

filterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> DynamicArray<?> {
	DynamicArrayFilter(a, fn, [], false, makeDList(), []);
}

subfilterDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<bool>) -> DynamicArray<?> {
	filtermapDynamicArray(submapDynamicArray(a, \v -> fif(fn(v), const(Some(v)), const(None()))), idfn);
}

filtermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> DynamicArray<??> {
	mapDynamicArray(filterDynamicArray(mapDynamicArray(a, fn), isSome), \v ->
		switch (v : Maybe<??>) {
			Some(vv): vv;
			None(): flow(0);
		}
	);
}

filtersubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> DynamicArray<??> {
	// submapDynamicArray(a, \v -> flow(fpair(const(v), fn(v))));
	mapDynamicArray(filterDynamicArray(submapDynamicArray(a, fn), isSome), \v -> {
		switch (v : Maybe<??>) {
			Some(vv): vv;
			None(): flow(0);
		}
	});
}

subfiltermapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<Transform<??>>) -> DynamicArray<??> {
	submapDynamicArray(filterDynamicArray(mapDynamicArray(a, fn), isSome), \v ->
		switch (v) {
			Some(vv): vv;
			None(): flow(0);
		}
	);
}

concatDynamicArray(a1 : DynamicArray<?>, a2 : DynamicArray<?>) -> DynamicArray<?> {
	DynamicArrayConcat(a1, a2, [], false, makeDList(), []);
}

subrangeDynamicArray(a : DynamicArray<?>, index : Transform<int>, len : Transform<int>) -> DynamicArray<?> {
	DynamicArraySubrange(a, index, len, [], false, makeDList(), []);
}

orderDynamicArray(a : DynamicArray<?>, order : DynamicArray<int>) -> DynamicArray<?> {
	filtersubmapDynamicArray(order, \o -> elementAtDynamicArray(a, const(o)))
	|> (\f -> constructDynamicArray(f, [\ -> { linkDynamicArray(a); \ -> unlinkDynamicArray(a); }]));
}

mergeDynamicArray(a : DynamicArray<DynamicArray<?>>) -> DynamicArray<?> {
	DynamicArrayMerge(a, [], false, makeDList(), []);
}

constructDynamicArray(a : DynamicArray<?>, fn : [() -> () -> void]) -> DynamicArray<?> {
	DynamicArrayConstruct(a, fn, [], false, makeDList(), []);
}

findDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<Maybe<?>> {
	res = make(None());
	resId = ref -1;

	fconstructable(
		res,
		\ -> listenDynamicArray(a, \op -> {
			switch (op : HeckelOperationSimple<?>) {
				HeckelInsert(i, v): {
					if (i <= ^resId) {
						resId := ^resId + 1;
					}

					if (isNone(getValue(res)) && fn(v)) {
						next(res, Some(v));
						resId := i;
					}
				}
				// HeckelMove(f, t): {
				// 	moveDynamicArray(a, f, t);
				// }
				HeckelDelete(i): {
					if (i < ^resId) {
						resId := ^resId - 1;
					}

					if (i == ^resId) {
						resId := -1;
						maybeApply(getValue(res), \r -> {
							next(res, None());
						});
					}
				}
			}
		})
	);
}

findiDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<Maybe<int>> {
	res = make(None());

	fconstructable(
		res,
		\ -> listenDynamicArray(a, \op -> {
			switch (op : HeckelOperationSimple<?>) {
				HeckelInsert(i, v): {
					if (i <= either(getValue(res), -1)) {
						next(res, Some(either(getValue(res), -1) + 1))
					}

					if (isNone(getValue(res))) {
						next(res, Some(i));
					}
				}
				// HeckelMove(f, t): {
				// 	moveDynamicArray(a, f, t);
				// }
				HeckelDelete(i): {
					if (i <= either(getValue(res), -1)) {
						next(res, Some(either(getValue(res), -1) - 1))
					}

					if (i == either(getValue(res), -1)) {
						next(res, None());
					}
				}
			}
		})
	)
}

findmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Maybe<??>) -> Transform<Maybe<??>> {
	res = make(None());
	resId = ref -1;

	fconstructable(
		res,
		\ -> listenDynamicArray(a, \op -> {
			switch (op : HeckelOperationSimple<?>) {
				HeckelInsert(i, v): {
					if (i <= ^resId) {
						resId := ^resId + 1;
					}

					if (isNone(getValue(res))) {
						r = fn(v);

						if (isSome(r)) {
							next(res, r);
							resId := i;
						}
					}
				}
				// HeckelMove(f, t): {
				// 	moveDynamicArray(a, f, t);
				// }
				HeckelDelete(i): {
					if (i < ^resId) {
						resId := ^resId - 1;
					}

					if (i == ^resId) {
						resId := -1;
						maybeApply(getValue(res), \r -> {
							next(res, None());
						});
					}
				}
			}
		})
	);
}

findsubmapDynamicArray(a : DynamicArray<?>, fn : (?) -> Transform<Maybe<??>>) -> Transform<Maybe<??>> {
	findmapDynamicArray(submapDynamicArray(a, fn), idfn);
}

containsDynamicArray(a : DynamicArray<?>, v : ?) -> Transform<bool> {
	fselect(findDynamicArray(a, \vv -> vv == v), isSome |> FLift);
}

existsDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> Transform<bool> {
	fselect(findDynamicArray(a, fn), isSome |> FLift);
}

elementAtDynamicArray(a : DynamicArray<?>, index : Transform<int>) -> Transform<Maybe<?>> {
	elem = make(None());

	fconstructable(
		elem,
		\ -> {
			dispose =
				[
					listen2DynamicArray(a, \op -> {
						switch (op : HeckelOperationSimple<?>) {
							HeckelInsert(i, v): {
								if (i == fgetValue(index)) {
									next(elem, Some(a.values[fgetValue(index)]));
								} else if (i < fgetValue(index) && getDynamicArrayLengthInternal(a) > fgetValue(index)) {
									next(elem, Some(a.values[fgetValue(index)]));
								}
							}
							// HeckelMove(f, t): {
							// 	moveDynamicArray(a, f, t);
							// }
							HeckelDelete(i): {
								if (i <= fgetValue(index)) {
									next(elem, if (getDynamicArrayLengthInternal(a) > fgetValue(index)) Some(a.values[fgetValue(index)]) else None());
								}
							}
						}
					}),
					makeSubscribe(index, \ind -> {
						next(elem, if (getDynamicArrayLengthInternal(a) > ind) Some(a.values[ind]) else None());
					})()
				];

			\ -> applyall(dispose);
		}
	);
}

elementAtDynamicArrayDef(a : DynamicArray<?>, index : Transform<int>, def : ?) -> Transform<?> {
	fselect(elementAtDynamicArray(a, index), FLift(\vv -> either(vv, def)));
}

firstElementDynamicArray(a : DynamicArray<?>) -> Transform<Maybe<?>> {
	elementAtDynamicArray(a, const(0));
}

// foldDynamicArray(a : DynamicArray<?>, def : ??, fn : (acc : ??, v : ?) -> ??) -> Transform<??> {
// 	result = make(def);
// 	uns := listen2DynamicArray(a, \op -> {
// 		switch (op : HeckelOperationSimple<?>) {
// 			HeckelInsert(i, v): {
// 				index = make(i);
// 				r = a.fn(index, v);
// 				indexes := insertArray(^indexes, i, index);
// 				disposers := insertArray(^disposers, i, makeSubscribe2(r, \vv -> replaceDynamicArray(a, i, vv))());
// 				insertDynamicArray(a, i, fgetValue(r));
// 			}
// 			// HeckelMove(f, t): {
// 			// 	moveDynamicArray(a, f, t);
// 			// }
// 			HeckelDelete(i): {
// 				^disposers[i];
// 				indexes := removeIndex(^indexes, i);
// 				disposers := removeIndex(^disposers, i);
// 				deleteDynamicArray(a, i);
// 			}
// 		}
// 	});

// 	fdisposable(
// 		result,
// 		\ -> {
// 			^uns();
// 		}
// 	)
// }

lengthDynamicArray(a : DynamicArray<?>) -> Transform<int> {
	len = make(0);

	fconstructable(
		len,
		\ -> {
			dispose = listen2DynamicArray(a, \__ -> next(len, getDynamicArrayLengthInternal(a)));
			next(len, getDynamicArrayLengthInternal(a));
			dispose;
		}
	);
}

transformDynamicArray(a : DynamicArray<?>) -> Transform<[?]> {
	aa = make([]);

	fconstructable(
		aa,
		\ -> {
			dispose = listen2DynamicArray(a, \__ -> next(aa, a.values));
			next(aa, a.values);
			dispose;
		}
	);
}

selectDynamicArray(t : Transform<?>, fn : (?) -> [??]) -> DynamicArray<??> {
	da = makeDynamicArray([]);

	constructDynamicArray(
		da,
		[makeSubscribe(t, \v -> nextDynamicArray(da, fn(v)))]
	)
}

getDynamicArrayLength(a : DynamicArray<?>) -> int {
	length(getDynamicArrayValue(a));
}

getDynamicArrayLengthInternal(a : DynamicArray<?>) -> int {
	length(a.values);
}

getDynamicArrayValue(a : DynamicArray<?>) -> [?] {
	switch (a : DynamicArray<?>) {
		DynamicArrayModifier(): {
			linkDynamicArray(a);
			unlinkDynamicArray(a);
			a.values;
		}
		default: {
			a.values;
		}
	}
}

getDynamicArrayElementAt(a : DynamicArray<?>, index : int) -> Maybe<?> {
	if (index >= 0) {
		values = getDynamicArrayValue(a);

		if (length(values) > index) {
			Some(values[index]);
		} else {
			None();
		}
	} else {
		None();
	}
}

getDynamicArrayElementAtInternal(a : DynamicArray<?>, index : int) -> Maybe<?> {
	if (index >= 0) {
		if (length(a.values) > index) {
			Some(a.values[index]);
		} else {
			None();
		}
	} else {
		None();
	}
}

getDynamicArrayElementAtDef(a : DynamicArray<?>, index : int, def : ?) -> ? {
	either(getDynamicArrayElementAt(a, index), def);
}

applyFilterDynamicArray(a : DynamicArray<?>, fn : (?) -> bool) -> void {
	id = ref 0;
	iter(a.values, \v -> {
		if (fn(v)) {
			id := ^id + 1;
		} else {
			deleteDynamicArray(a, ^id);
		}
	});
}

dynamicArray2s(a : DynamicArray<?>) -> string {
	switch (a : DynamicArray<?>) {
		DynamicArrayMap(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArrayMap";
		}
		DynamicArrayMapi(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArrayMapi";
		}
		DynamicArraySubMap(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArraySubMap";
		}
		DynamicArraySubMapi(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArraySubMapi";
		}
		DynamicArrayMapu(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArrayMapu";
		}
		DynamicArrayMapiu(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArrayMapiu";
		}
		DynamicArrayFilter(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArrayFilter";
		}
		DynamicArrayConcat(__, __, __, __, __, __) : {
			dynamicArray2s(a.container1) + dynamicArray2s(a.container2) + "\n\t|> DynamicArrayMapi";
		}
		DynamicArraySubrange(__, __, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArraySubrange";
		}
		DynamicArrayMerge(__, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArrayMerge";
		}
		DynamicArrayConstruct(__, __, __, __, __, __) : {
			dynamicArray2s(a.container) + "\n\t|> DynamicArrayConstruct";
		}
		DynamicArrayContainer(__, __, __) : {
			"DynamicArrayContainer(\n" + strGlue(map(a.values, \v -> "\t" + substring(toString(v), 0, 256)), "\n") + "\n)";
		}
	}
}