import runtime;

export {
	// Functions for operations with expanding Vector<?> type.
	// Vector<?> may be created with a default value, which is used
	// in case we try to access a vector with index out of bounds.
	//
	//	  CAUTION: Vector type is mutable.
	//
	// Currently vector natives are supported only in java runtime.

	// A structure-wrapper around a native type. 
	Vector : (vect : native, defVal : Maybe<?>);

	// Create a vector with a given capacity. Initially it is empty.
	makeVector(capacity : int) -> Vector<?>;

	// Create a vector with a given capacity and one element v.
	makeVector1(capacity : int, v : ?) -> Vector<?>;

	// Create a vector from an array.
	buildVector(arr : [?]) -> Vector<?>;

	// Create a vector with a given capacity and default value. Initially it is empty.
	makeVectorDefVal(capacity : int, defVal : ?) -> Vector<?>;

	//Create a vector with a given capacity, one element v and default value.
	makeVectorDefVal1(capacity : int, v : ?, defVal : ?) -> Vector<?>;

	// Safely access vector by index, O(1)
	getVector(vector : Vector<?>, i : int) -> Maybe<?>;

	// Safely access vector by index using a default value in case index is out of bounds, O(1)
	getVectorDef(vector : Vector<?>, i : int, def : ?) -> ?;

	// Unsafe vector getter, may cause runtime errors. 
	// Use only if you are sure that index is valid.
	getVectorUnsafe(vector : Vector<?>, i : int) -> ?;

	// Vector setter: modifies vector at index i in case i is a valid index, O(1).
	setVector(vector : Vector<?>, i : int, val : ?) -> void;

	// Vector setter: modifies vector at index i, O(1).
	// Use only if you are sure that index is valid, otherwise runtime error will occur.
	setVectorUnsafe(vector : Vector<?>, i : int, val : ?) -> void;

	// Adds a new element to a vector, O(1)
	pushVector(vector : Vector<?>, val : ?) -> void;

	// Remove element at index i from a vector in case i is a valid index, O(n) 
	removeVector(vector : Vector<?>, i : int) -> void;

	// Returns the length of a vector
	sizeVector(vector : Vector<?>) -> int;

	// Clears a vector
	clearVector(vector : Vector<?>) -> void;

	// iter variants for vector
	iterVector(vector : Vector<?>, fn : (?) -> void) -> void;
	iteriVector(vector : Vector<?>, fn : (int, ?) -> void) -> void;

	// map variants for vector
	mapVector(vector : Vector<?>, fn : (?) -> ??) -> Vector<??>;
	mapiVector(vector : Vector<?>, fn : (int, ?) -> ??) -> Vector<??>;

	// fold variants for vector
	foldVector(vector : Vector<?>, init : ??,  fn : (??, ?) -> ??) -> ??;
	foldiVector(vector : Vector<?>, init : ??,  fn : (int, ??, ?) -> ??) -> ??;

	// Converts a vector into array
	vector2array(vector : Vector<?>) -> [?];

	// Converts an array into vector
	array2vector(arr : [?]) -> Vector<?>;

	// Copies a vector. Since vectors are mutable, sometimes we might want to make a copy.
	copyVector(vector : Vector<?>) -> Vector<?>;

	// Append one vector with another. Modifies (expands) the first one.
	appendVector(v1 : Vector<?>, v2 : Vector<?>) -> void;

	// Reduces a vector to a given size. Capacity is kept.
	resizeVector(v : Vector<?>, size : int) -> void;

	// Reduces vector capacity to its size. Size is kept.
	trimToSizeVector(v : Vector<?>) -> void;

	// Takes a fragment of v at given index with a give length
	subVector(v : Vector<?>, index : int, len : int) -> Vector<?>;
}

// Set of private natives
native makeNativeVector : io (capacity : int, __: [?]) -> native = Native.makeVector;
native getNativeVector : (vector : native, i : int) -> ? = Native.getVector;
native setNativeVector : io (vector : native, i : int, val : ?) -> void = Native.setVector;
native addNativeVector : io (vector : native, val : ?) -> void = Native.addVector;
native removeNativeVector : io (vector : native, i : int, __: [?]) -> void = Native.removeVector;
native sizeNativeVector : (vector : native, __: [?]) -> int = Native.sizeVector;
native clearNativeVector : io (vector : native, __: [?]) -> void = Native.clearVector;
native trimToSizeNativeVector : io (vector : native, __: [?]) -> void = Native.trimToSizeVector;
native subNativeVector : io (vector : native, index : int, len : int, __: [?]) -> native = Native.subVector;
native vector2arrayNative : io (vector : native) -> [?] = Native.vector2array;
native array2vectorNative : io (arr : [?]) -> native = Native.array2vector;

// Accessors to natives:

makeVector(capacity : int) -> Vector<?> {
	dummy: [?] = [];
	Vector(makeNativeVector(capacity, dummy), None());
}

makeVector1(capacity : int, v : ?) -> Vector<?> {
	dummy: [?] = [];
	ret = Vector(makeNativeVector(capacity, dummy), None());
	addNativeVector(ret.vect, v);
	ret;
}

buildVector(arr : [?]) -> Vector<?> {
	dummy: [?] = [];
	ret = Vector(makeNativeVector(length(arr) * 2, dummy), None());
	iter(arr, \v -> addNativeVector(ret.vect, v));
	ret;
}

makeVectorDefVal(capacity : int, defVal : ?) -> Vector<?> {
	dummy: [?] = [];
	Vector(makeNativeVector(capacity, dummy), Some(defVal));
}

makeVectorDefVal1(capacity : int, v : ?, defVal : ?) -> Vector<?> {
	dummy: [?] = [];
	ret = Vector(makeNativeVector(capacity, dummy), Some(defVal));
	addNativeVector(ret.vect, v);
	ret;
}

getVector(vector : Vector<?>, i : int) -> Maybe<?> {
	dummy: [?] = [];
	if (0 <= i && i < sizeNativeVector(vector.vect, dummy)) {
		Some(getNativeVector(vector.vect, i));
	} else {
		vector.defVal;
	}
}

getVectorDef(vector : Vector<?>, i : int, def : ?) -> ? {
	dummy: [?] = [];
	if (0 <= i && i < sizeNativeVector(vector.vect, dummy)) {
		getNativeVector(vector.vect, i);
	} else {
		def;
	}
}

getVectorUnsafe(vector : Vector<?>, i : int) -> ? {
	getNativeVector(vector.vect, i);
}

setVector(vector : Vector<?>, i : int, val : ?) -> void {
	dummy: [?] = [];
	if (0 <= i && i < sizeNativeVector(vector.vect, dummy)) {
		setNativeVector(vector.vect, i, val);
	}
}

setVectorUnsafe(vector : Vector<?>, i : int, val : ?) -> void {
	setNativeVector(vector.vect, i, val);
}

pushVector(vector : Vector<?>, val : ?) -> void {
	addNativeVector(vector.vect, val);
}

removeVector(vector : Vector<?>, i : int) -> void {
	dummy: [?] = [];
	if (0 <= i && i < sizeNativeVector(vector.vect, dummy)) {
		removeNativeVector(vector.vect, i, dummy);
	}
}

sizeVector(vector : Vector<?>) -> int {
	dummy: [?] = [];
	sizeNativeVector(vector.vect, dummy);
}

clearVector(vector : Vector<?>) -> void {
	dummy: [?] = [];
	clearNativeVector(vector.vect, dummy);
}

resizeVector(vector : Vector<?>, size : int) -> void {
	dummy: [?] = [];
	original_size = sizeNativeVector(vector.vect, dummy);
	fori(1, original_size - size, \i ->
		removeNativeVector(vector.vect, original_size - i, dummy)
	);
}

trimToSizeVector(vector : Vector<?>) -> void {
	dummy: [?] = [];
	trimToSizeNativeVector(vector.vect, dummy);
}

subVector(vector : Vector<?>, index : int, len : int) -> Vector<?> {
	dummy: [?] = [];
	Vector(subNativeVector(vector.vect, index, len, dummy), vector.defVal);
}

vector2array(vector : Vector<?>) -> [?] {
	vector2arrayNative(vector.vect);
}

array2vector(arr : [?]) -> Vector<?> {
	Vector(array2vectorNative(arr), None());
}

// Set of flow fallbacks for natives:

makeNativeVector(capacity : int, __: [?]) -> native {
	flow(ref []);
};

getNativeVector(vector : native, i : int) -> ? {
	arr = cast(flow(vector) : flow -> ref [?]);
	^arr[i];
}

setNativeVector(vector : native, i : int, val : ?) -> void {
	arr = cast(flow(vector) : flow -> ref [?]);
	arr := insertArray(^arr, i, val);
}

addNativeVector(vector : native, val : ?) -> void {
	arr = cast(flow(vector) : flow -> ref [?]);
	refArrayPush(arr, val);
}

removeNativeVector(vector : native, i : int, __: [?]) -> void {
	arr = cast(flow(vector) : flow -> ref [flow]);
	arr := removeIndex(^arr, i);
}

sizeNativeVector(vector : native, __: [?]) -> int {
	arr = cast(flow(vector) : flow -> ref [flow]);
	length(^arr);
}

clearNativeVector(vector : native, __: [?]) -> void {
	arr = cast(flow(vector) : flow -> ref [flow]);
	arr := [];
}

resizeNativeVector(vector : native, size : int, __: [?]) -> void {
	arr = cast(flow(vector) : flow -> ref [flow]);
	arr := take(^arr, size);
}

trimToSizeNativeVector(vector : native, __: [?]) -> void {
}

subNativeVector(vector : native, index : int, len : int, __: [?]) -> native {
	arr = cast(flow(vector) : flow -> ref [flow]);
	flow(ref subrange(^arr, index, len));
}

vector2arrayNative(vector : native) -> [?] {
	^cast(flow(vector) : flow -> ref [?]);
}

array2vectorNative(arr : [?]) -> native {
	cast((ref arr) : ref [?] -> flow);
}

// Auxiliary vector functions:

iterVector(vector : Vector<?>, fn : (?) -> void) -> void {
	doIterVector(vector, fn, 0);
}

doIterVector(vector : Vector<?>, fn : (?) -> void, i : int) -> void {
	if (i < sizeVector(vector)) {
		fn(getNativeVector(vector.vect, i));
		doIterVector(vector, fn, i + 1);
	}
}

iteriVector(vector : Vector<?>, fn : (int, ?) -> void) -> void {
	doIteriVector(vector, fn, 0);
}

doIteriVector(vector : Vector<?>, fn : (int, ?) -> void, i : int) -> void {
	if (i < sizeVector(vector)) {
		fn(i, getNativeVector(vector.vect, i));
		doIteriVector(vector, fn, i + 1);
	}
}

mapVector(vector : Vector<?>, fn : (?) -> ??) -> Vector<??> {
	ret = makeVector(sizeVector(vector));
	doMapVector(vector, fn, ret, 0);
}

doMapVector(vector : Vector<?>, fn : (?) -> ??, ret : Vector<??>, i : int) -> Vector<??> {
	if (i == sizeVector(vector)) ret else {
		pushVector(ret, fn(getNativeVector(vector.vect, i)));
		doMapVector(vector, fn, ret, i + 1);
	}
}

mapiVector(vector : Vector<?>, fn : (int, ?) -> ??) -> Vector<??> {
	ret = makeVector(sizeVector(vector));
	doMapiVector(vector, fn, ret, 0);
}

doMapiVector(vector : Vector<?>, fn : (int, ?) -> ??, ret : Vector<??>, i : int) -> Vector<??> {
	if (i == sizeVector(vector)) ret else {
		pushVector(ret, fn(i, getNativeVector(vector.vect, i)));
		doMapiVector(vector, fn, ret, i + 1);
	}
}

foldVector(vector : Vector<?>, init : ??,  fn : (??, ?) -> ??) -> ?? {
	doFoldVector(vector, init, fn, 0);
}

doFoldVector(vector : Vector<?>, val : ??,  fn : (??, ?) -> ??, i : int) -> ?? {
	if (i == sizeVector(vector)) val else {
		doFoldVector(vector, fn(val, getNativeVector(vector.vect, i)), fn, i + 1);
	}
}

foldiVector(vector : Vector<?>, init : ??,  fn : (int, ??, ?) -> ??) -> ?? {
	doFoldiVector(vector, init, fn, 0);
}

doFoldiVector(vector : Vector<?>, val : ??,  fn : (int, ??, ?) -> ??, i : int) -> ?? {
	if (i == sizeVector(vector)) val else {
		doFoldiVector(vector, fn(i, val, getNativeVector(vector.vect, i)), fn, i + 1);
	}
}

copyVector(vector : Vector<?>) -> Vector<?> {
	copy = makeVector(sizeVector(vector));
	iterVector(vector, \x -> pushVector(copy, x));
	copy;
}

appendVector(v1 : Vector<?>, v2 : Vector<?>) -> void {
	iterVector(v2, \x -> pushVector(v1, x));
}
