import ds/list;

export {
	makeQueue() -> Queue<?>;
	pushQueue(q : Queue<?>, value : ?) -> Queue<?>;
	popQueue(q : Queue<?>) -> QueuePop;
		QueuePop(queue : Queue<?>, value : Maybe<?>);
}

Queue(pushStack : List<?>, popStack : List<?>);

makeQueue() -> Queue<?> {
	Queue(makeList(), makeList());
}
pushQueue(q : Queue<?>, value : ?) -> Queue<?> {
	Queue(q with pushStack = Cons(value, q.pushStack));
}

popQueue(q : Queue<?>) -> QueuePop {
	switch (q.popStack) {
		EmptyList(): {
			nq = movePushToPopStack(q);
			switch (nq.popStack) {
				EmptyList(): {
					QueuePop(nq, None());
				}
				Cons(h, t): {
					fq = Queue(nq with popStack = t);
					QueuePop(fq, Some(h))
				}
			}
		}
		Cons(h, t): {
			QueuePop(Queue(q with popStack = t), Some(h))
		}
	}
}

movePushToPopStack(q : Queue<?>) -> Queue<?> {
	switch (q.pushStack) {
		EmptyList(): q;
		Cons(h, t): {
			movePushToPopStack(Queue(t, Cons(h, q.popStack)))
		}
	}
}