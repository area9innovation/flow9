import runtime;
import ds/array;
import ds/set;
import math/math;

import formats/json/json;

// See https://github.com/thi-ng/umbrella/tree/develop/packages/transducers for inspiration
// which is © 2016 - 2020 Karsten Schmidt - Apache Software License 2.0 

/*
TODO:
https://docs.thi.ng/umbrella/transducers/modules/_index_.html
compose(a : Reducer<?, ??>, b : Reducer<??, ???>) -> Reducer<?, ???>
add, count, div, mul, sub, 
dup, duplicate, every, any, some, 

benchmark, cat/concat, choices/random, converge, fill, fillN, frequencies, 
groupBinary, groupbyMap, groupByObject, interleave, interpolate, keep,
permutations, last, line, mapNth, mapKeys, mapVals, matchFirst, matchLast,
mean, min, movingAverage, movingMedian, padLast, padSides, page, 
partition, partitionBy, range, repeat, repeatedly, reverse, run, 
sample, scan, step, 

drop, dropNth, dropWhile, takeLast, takeNth, takeWhile, trim

throttle,
toggle, debug/trace, tween, wordWrap, 

parallel/multiplex, 

Wishlist to match flow interface:
	map, fold, filter, filtermap: // Available
	iter, 
	hash, 
	find == filter+take?
	forall == every, exists == any /some, 

	serialization, deserialization, 
	conversions, math operations, reflection of types, reflection of code…
	trim, left, right, ... other common string-based methods

*/

export {
	// A reducer represents a processing pipeline.
	// The individual values we send in for processing is ?,
	// while the resulting type of the pipeline is ?? (i.e. acc)
	Reducer(
		// The initial value
		init : () -> ??, 
		// Each step is done here
		reduce : (acc : ??, value : ?) -> ReducerResult<??>,
		// The final value is transformed here
		final : (acc : ??) -> ??, 
	);

		// At each processing step, we either get a value or stop processing
		ReducerResult<?> ::= ReduceAcc<?>, Reduced<?>;
			// When the reduction should continue
			ReduceAcc(value : ?);
			// Used when we are fully reduced and should stop
			Reduced(value : ?);

	//
	// Drivers (all linear time)
	//

	// Evaluate a reducer on this array of values
	rreduce(v : [?], r : Reducer<?, ??>) -> ??;

	// Evaluate a reducer on this list of values
	rreduceList(v : List<?>, r : Reducer<?, ??>) -> ??;

	// Evaluate a reducer on this tree of values
	rreduceTree(v : Tree<?, ??>, r : Reducer<Pair<?, ??>, ???>) -> ???;

	// Evaluate a reducer on the keys from this tree
	rreduceTreeKeys(v : Tree<?, ??>, r : Reducer<?, ???>) -> ???;

	// Evaluate a reducer on this set of values
	rreduceSet(set : Set<?>, r : Reducer<?, ??>) -> ??;

	// Char-wise iteration
	rreduceString(str : string, r : Reducer<string, ?>) -> ?;
	// Char-wise iteration as unicode
	rreduceChars(str : string, r : Reducer<int, ?>) -> ?;

	rreduceJson(json : Json, reducer : Reducer<RAssign<Json>, ??>) -> ??;
		// An assignment is a path to the place in the structure where it belongs and the value to put there
		RAssign(lvalue : RLValue, value : ?);

		// An "address" in an JSON object to place a value
		RLValue ::= RLeaf, RLObject, RLArray;
			// Immediate value
			RLeaf();
			// Place the value inside this key in an object
			RLObject(key : string, rvalue : RLValue);
			// Add the value to this place inside this array
			RLArray(rvalue : RLValue);
			// TODO: Implement this
			RLArrayIndex(index : int, rvalue : RLValue);

	// TODO: multimap, tuples, graphs, dlist, behaviour/transforms

	//
	// Reducers
	//

	// Collect items in a list - O(n)
	rlist() -> Reducer<?, List<?>>;
	// Collect items in array - O(n^2)
	rarray() -> Reducer<?, [?]>;
	// Collect items in a set - O(n log n)
	rset() -> Reducer<?, Set<?>>;
	// Collect items in a tree - O(n log n). Pairs are key=value
	rtree() -> Reducer<Pair<?, ??>, Tree<?, ??>>;
	// Prints each item
	rdebug() -> Reducer<?, bool>;

	// Collect chars into a string - O(n^2)
	rstring() -> Reducer<string, string>;
	// Collect char codes into a string - O(n^2)
	rchars() -> Reducer<int, string>;
	// You can use rlist() and the list2string to get O(n)

	// Construct a JSON object based on a bunch of assignments
	// This is O(n^2) time, unfortunately, so beware!
	rjson() -> Reducer<RAssign<Json>, Json>;

	// Fold the values using this initial value, and this function
	rfold(init : ??, fn : (??, ?) -> ??) -> Reducer<?, ??>;

	// graphs, dlist, behaviour/transforms

	//
	// Transducers
	//

	// Transforms a reducer by a fn
	rmap(r : Reducer<?, ???>, fn : (??) -> ?) -> Reducer<??, ???>;

	// Keeps only distinct values - n log n
	rdistinct(r : Reducer<?, ??>) -> Reducer<?, ??>;

	// Keeps values that match the condition
	rfilter(r : Reducer<?, ??>, fn : (?) -> bool) -> Reducer<?, ??>;

	// Takes the first n values
	rtake(r : Reducer<?, ??>, n : int) -> Reducer<?, ??>;

	// Drops the first n values
	rdrop(r : Reducer<?, ??>, n : int) -> Reducer<?, ??>;

	// Keeps the maximum result value - this is different from the package, where it is the input values
	rmaxOutput(r : Reducer<?, ??>) -> Reducer<?, ??>;

	// A similar thing for input is maybe also relevant
	// rmaxInput(r : Reducer<?, ?>) -> Reducer<?, ?>;

}

//
// Drivers
//

rreduce(vs : [?], r : Reducer<?, ??>) -> ?? {
	acc = doRReduce(r, r.init(), vs, 0);
	r.final(acc);
}

doRReduce(r : Reducer<?, ??>, acc : ??, vs : [?], i : int) -> ?? {
	if (i < length(vs)) {
		v = r.reduce(acc, vs[i]);
		switch (v) {
			ReduceAcc(nacc): {
				doRReduce(r, nacc, vs, i + 1)
			}
			Reduced(val): val;
		}
	} else acc;
}

rreduceList(vs : List<?>, r : Reducer<?, ??>) -> ?? {
	acc = doRReduceList(r, r.init(), vs);
	r.final(acc);
}

doRReduceList(r : Reducer<?, ??>, acc : ??, vs : List<?>) -> ?? {
	switch (vs) {
		EmptyList(): acc;
		Cons(v1, t): {
			v = r.reduce(acc, v1);
			switch (v) {
				ReduceAcc(nacc): {
					doRReduceList(r, nacc, t)
				}
				Reduced(val): val;
			}
		}
	}
}

rreduceTree(tree : Tree<?, ??>, r : Reducer<Pair<?, ??>, ???>) -> ??? {
	acc = doRReduceTree(r, r.init(), tree);
	r.final(acc.value);
}

doRReduceTree(r : Reducer<Pair<?, ??>, ???>, acc : ???, tree : Tree<?, ??>) -> ReducerResult<???> {
	switch (tree : Tree) {
		TreeEmpty(): ReduceAcc(acc);
		TreeNode(k, v, left, right, depth): {
			acc1 = doRReduceTree(r, acc, left);
			switch (acc1) {
				ReduceAcc(nacc1): {
					// OK, there is more
					acc2 = r.reduce(nacc1, Pair(k, v));
					switch (acc2) {
						ReduceAcc(nacc2): {
							// OK, there is more
							doRReduceTree(r, nacc2, right);
						}
						Reduced(value): acc2; // We are done
					}
				}
				Reduced(value): acc1;	// We are done
			}
		}
	}
}

rreduceTreeKeys(tree : Tree<?, ??>, r : Reducer<?, ???>) -> ??? {
	acc = doRReduceTreeKeys(r, r.init(), tree);
	r.final(acc.value);
}

doRReduceTreeKeys(r : Reducer<?, ???>, acc : ???, tree : Tree<?, ??>) -> ReducerResult<???> {
	switch (tree : Tree) {
		TreeEmpty(): ReduceAcc(acc);
		TreeNode(k, v, left, right, depth): {
			acc1 = doRReduceTreeKeys(r, acc, left);
			switch (acc1) {
				ReduceAcc(nacc1): {
					// OK, there is more
					acc2 = r.reduce(nacc1, k);
					switch (acc2) {
						ReduceAcc(nacc2): {
							// OK, there is more
							doRReduceTreeKeys(r, nacc2, right);
						}
						Reduced(value): acc2; // We are done
					}
				}
				Reduced(value): acc1;	// We are done
			}
		}
	}
}

rreduceSet(set : Set<?>, r : Reducer<?, ??>) -> ?? {
	rreduceTreeKeys(set.tree, r);
}

rreduceString(str : string, r : Reducer<string, ?>) -> ? {
	acc = doRReduceString(r, r.init(), 0, str);
	r.final(acc);
}

doRReduceString(r : Reducer<string, ?>, acc : ?, i : int, str : string) -> ? {
	if (i < strlen(str)) {
		val = r.reduce(acc, getCharAt(str, i));
		switch (val) {
			ReduceAcc(nacc): {
				doRReduceString(r, nacc, i + 1, str)
			}
			Reduced(nacc): nacc;
		}
	} else acc;
}

rreduceChars(str : string, r : Reducer<int, ?>) -> ? {
	acc = doRReduceChars(r, r.init(), 0, str);
	r.final(acc);
}

doRReduceChars(r : Reducer<int, ?>, acc : ?, i : int, str : string) -> ? {
	if (i < strlen(str)) {
		val = r.reduce(acc, getCharCodeAt(str, i));
		switch (val) {
			ReduceAcc(nacc): {
				doRReduceChars(r, nacc, i + 1, str)
			}
			Reduced(nacc): nacc;
		}
	} else acc;
}


//
// Reducers
//

rlist() -> Reducer<?, List<?>> {
	Reducer(\ -> makeList(), \acc : List<?>, v : ? -> ReduceAcc(Cons(v, acc)), \acc : List<?> -> acc);
}

rarray() -> Reducer<?, [?]> {
	Reducer(\ -> [], \acc : [?], v : ? -> ReduceAcc(arrayPush(acc, v)), \acc : [?] -> acc);
}

rset() -> Reducer<?, Set<?>> {
	Reducer(\ -> makeSet(), \acc : Set<?>, v : ? -> ReduceAcc(insertSet(acc, v)), \acc : Set<?> -> acc);
}

rtree() -> Reducer<Pair<?, ??>, Tree<?, ??>> {
	Reducer(\ -> makeTree(), \acc : Tree<?, ??>, v : Pair<?, ??> -> ReduceAcc(setTree(acc, v.first, v.second)), \acc : Tree<?, ??> -> acc);
}

rstring() -> Reducer<string, string> {
	Reducer(\ -> "", \acc : string, v : string -> ReduceAcc(acc +v), \acc -> acc);
}

rchars() -> Reducer<int, string> {
	Reducer(\ -> "", \acc : string, v : int -> ReduceAcc(acc + fromCharCode(v)), \acc -> acc);
}


rfold(init : ??, fn : (??, ?) -> ??) -> Reducer<?, ??> {
	Reducer(\ -> init, \acc, v -> ReduceAcc(fn(acc, v)), \acc : ?? -> acc);
}


rdebug() -> Reducer<?, bool> {
	Reducer(\ -> false,
		\acc, v : ? -> {
			println(v);
			ReduceAcc(acc);
		}, 
		\acc -> acc
	)
}


rreduceJson(json : Json, reducer : Reducer<RAssign<Json>, ??>) -> ?? {
	acc = doRReduceJson(reducer, reducer.init(), \v -> v, json);
	reducer.final(acc.value);
}

doRReduceJson(reducer : Reducer<RAssign<Json>, ??>, acc : ??, lvalueWrap : (RLValue) -> RLValue, json : Json) -> ReducerResult<??> {
	switch (json) {
		JsonObject(members): {
			doRReduceJsonObject(reducer, acc, lvalueWrap, 0, members);
		}
		JsonArray(elements): {
			doRReduceJsonArray(reducer, acc, lvalueWrap, 0, elements);
		}
		JsonNull(): reducer.reduce(acc, RAssign(lvalueWrap(RLeaf()), json));
		JsonBool(v): reducer.reduce(acc, RAssign(lvalueWrap(RLeaf()), json));
		JsonDouble(v): reducer.reduce(acc, RAssign(lvalueWrap(RLeaf()), json));
		JsonString(v): reducer.reduce(acc, RAssign(lvalueWrap(RLeaf()), json));
	}
}

doRReduceJsonObject(reducer : Reducer<RAssign<Json>, ??>, acc : ??, lvalueWrap : (RLValue) -> RLValue, i : int, members : [Pair<string, Json>]) -> ReducerResult<??> {
	if (i < length(members)) {
		member = members[i];
		lvalue = \v -> lvalueWrap(RLObject(member.first, v));
		v = doRReduceJson(reducer, acc, lvalue, member.second);
		switch (v) {
			ReduceAcc(nacc): {
				doRReduceJsonObject(reducer, nacc, lvalueWrap, i + 1, members)
			}
			Reduced(val): v;
		}
	} else ReduceAcc(acc);
}

doRReduceJsonArray(reducer : Reducer<RAssign<Json>, ??>, acc : ??, lvalueWrap : (RLValue) -> RLValue, i : int, elements : [Json]) -> ReducerResult<??> {
	if (i < length(elements)) {
		lvalue = \v -> lvalueWrap(RLArray(v));
		element = elements[i];
		v = doRReduceJson(reducer, acc, lvalue, element);
		switch (v) {
			ReduceAcc(nacc): {
				doRReduceJsonArray(reducer, nacc, lvalueWrap, i + 1, elements)
			}
			Reduced(val): v;
		}

	} else ReduceAcc(acc);
}

rjson() -> Reducer<RAssign<Json>, Json> {
	Reducer(
		\ -> JsonNull(),
		\acc, val -> {
			ReduceAcc(jsonRAssign(acc, val))
		},
		\acc -> {
			acc
		}
	)
}

jsonRAssign(acc : Json, assign : RAssign<Json>) -> Json {
	switch (assign.lvalue) {
		RLeaf(): assign.value;
		RLObject(key, lvalue2): {
			fieldValue = getJsonFieldValue(acc, key, JsonNull());
			setJsonField(acc, key, jsonRAssign(fieldValue, RAssign(lvalue2, assign.value)));
		}
		RLArray(lvalue2): {
			pushJsonValue(acc, jsonRAssign(JsonNull(), RAssign(lvalue2, assign.value)));
		}
	}
}

//
// Transducers
//

rmap(r : Reducer<?, ???>, fn : (??) -> ?) -> Reducer<??, ???> {
	Reducer(
		r.init,
		\acc : ???, v : ?? -> {
            r.reduce(acc, fn(v))
		},
		r.final,
	)
}

rdistinct(r : Reducer<?, ??>) -> Reducer<?, ??> {
	seen = ref makeSet();
	Reducer(
		r.init,
		\acc, v -> {
			if (containsSet(^seen, v)) ReduceAcc(acc)
			else {
				seen := insertSet(^seen, v);
				r.reduce(acc, v)
			}
		},
		r.final,
	)
}

rfilter(r : Reducer<?, ??>, fn : (?) -> bool) -> Reducer<?, ??> {
	Reducer(
		r.init,
		\acc, v -> {
			if (fn(v)) {
				r.reduce(acc, v)
			} else ReduceAcc(acc)
		},
		r.final,
	)
}

rtake(r : Reducer<?, ??>, n : int) -> Reducer<?, ??> {
	i = ref 0;
	Reducer(
		r.init,
		\acc, v -> {
			if (^i < n) {
				i := ^i + 1;
				r.reduce(acc, v)
			} else {
				Reduced(acc);
			}
		},
		r.final,
	)
}

rdrop(r : Reducer<?, ??>, n : int) -> Reducer<?, ??> {
	i = ref 0;
	Reducer(
		r.init,
		\acc, v -> {
			val = r.reduce(acc, v);
			if (^i < n) {
				i := ^i + 1;
				// We ignore the result, but keep flag on whether we are done or not
				switch (val) {
					Reduced(nacc): Reduced(acc);
					ReduceAcc(nacc): ReduceAcc(acc);
				}
			} else {
				val;
			}
		},
		r.final,
	)
}

rmaxOutput(r : Reducer<?, ??>) -> Reducer<?, ??> {
	Reducer(
		r.init,
		\acc, v -> {
			val = r.reduce(acc, v);
			switch (val) {
				Reduced(nacc): Reduced(max(acc, nacc));
				ReduceAcc(nacc): ReduceAcc(max(acc, nacc));
			}
		},
		r.final,
	)
}

/*
//
// Testing
//

main() {
	// To combine into an array
	f = rreduce([1, 1, 2, 3, 2, 5, 2, 1], rfilter(rdistinct(rmap(rarray(), i2s)), \n -> n % 3 == 0));
	println(f);	// ["3"]

	f2 = rreduceTree(setTree(makeTree1(2, -2), 1, -1), rarray());
	println(f2);	// [Pair(1, -1), Pair(2, -2)]

	f3 = rreduceSet(buildSet([3,1,2,3,6]), rarray());
	println(f3);	// [1,2,3,6]

	json1 : Json = parseJson("
		{
			a: 0,
			b: [
				1,
				2,
				3
			],
			c: {
				d: true,
				e: null
			}
		}
	");

	// Reduce to a list of json-assignments
	jassigns : [RAssign<Json>] = rreduceJson(json1, rarray());
	iter(jassigns, println);
	// RAssign(RLObject("a", RLeaf()), JsonDouble(0.0))
	// RAssign(RLObject("b", RLArray(RLeaf())), JsonDouble(1.0))
	// RAssign(RLObject("b", RLArray(RLeaf())), JsonDouble(2.0))
	// RAssign(RLObject("b", RLArray(RLeaf())), JsonDouble(3.0))
	// RAssign(RLObject("c", RLObject("d", RLeaf())), JsonBool(true))
	// RAssign(RLObject("c", RLObject("e", RLeaf())), JsonNull())

	// Then restruct as JSON object again
	json2 = rreduce(jassigns, rjson());
	println(json2stringFormatted(json2));
	// Same output as the input

	leafs = rreduce(jassigns, rmap(rarray(), \assign : RAssign -> assign.value));
	println(leafs);
	// [JsonDouble(0.0), JsonDouble(1.0), JsonDouble(2.0), JsonDouble(3.0), JsonBool(true), JsonNull()]

	s1 : [string] = rreduceString("Char by Char", rtake(rarray(), 10));

	s2 : [int] = rreduceChars("Char by Char", rdrop(rarray(), 5));
	s3 = rreduce(s2, rchars());
	println("Result " + s3);

	quit(0);
}
*/