import ds/egraph;
import math/math;

export {
	// Extracts the best enode for each class
	extractEGraph(e : EGraph<?>, benefitFn : (ENode<?>, [EClassBenefit<?>]) -> EClassBenefit<?>) -> Tree<int,  EClassBenefit<?>>;

	EClassBenefit(
		// The benefit of this
		benefit : int,
		// The node that wins
		node : ENode<?>
	);
}

ExtractorEnv(
	egraph : EGraph<?>,
	benefitFn : (ENode<?>, [EClassBenefit<?>]) -> EClassBenefit<?>,
	// The highest benefit so far per class
	benefits : ref Tree<int, EClassBenefit<?>>,
	// What eclasses are we currently extracting? Attempt to avoid infinite loops
	extracting : ref Set<int>,
);

// https://github.com/egraphs-good/egg/blob/main/src/extract.rs
extractEGraph(e : EGraph<?>, benefitFn : (ENode<?>, [EClassBenefit<?>]) -> EClassBenefit<?>) -> Tree<int,  EClassBenefit<?>> {
	env = ExtractorEnv(e, benefitFn, ref makeTree(), ref makeSet());
	calcEClassBenefits(env);
	^(env.benefits);
}

calcEClassBenefits(e : ExtractorEnv<?>) -> void {
	work = ref false;
	roots = getEClasses(e.egraph);
	iterSet(roots, \eclass : int -> {
		getEClassBenefit(e, eclass);
		{}
	});
	if (^work) {
		calcEClassBenefits(e);
	}
}

getEClassBenefit(env : ExtractorEnv<?>, eclass : int) -> Maybe<EClassBenefit<?>> {
	mbenefit = lookupTree(^(env.benefits), eclass);
	mbenefit ?? {
		Some(mbenefit)
	} : {
		if (containsSet(^(env.extracting), eclass)) None()
		else {
			env.extracting := insertSet(^(env.extracting), eclass);
			nodes = getEClassNodes(env.egraph, eclass);
			res = foldSet(nodes, mbenefit, \acc, node -> {
				nbenefit = getENodeBenefit(env, node);
				switch (nbenefit) {
					None(): acc;
					Some(benefit): {
						switch (acc) {
							None(): {
								env.benefits := setTree(^(env.benefits), eclass, benefit);
								Some(benefit);
							}
							Some(ec): {
								if (benefit.benefit > ec.benefit) {
									env.benefits := setTree(^(env.benefits), eclass, benefit);
									Some(benefit);
								} else acc;
							}
						}
					}
				}
			});
			env.extracting := removeSet(^(env.extracting), eclass);

			res;
		}
	}
}

getENodeBenefit(env : ExtractorEnv<?>, node : ENode<?>) -> Maybe<EClassBenefit<?>> {
	childbenefits = filtermap(node.args, \arg -> {
		getEClassBenefit(env, arg)
	});
	if (length(childbenefits) == length(node.args)) {
		benefit = env.benefitFn(node, map(childbenefits, \cc -> cc));
		Some(benefit);
	} else None();
}
