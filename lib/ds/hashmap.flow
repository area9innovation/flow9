import ds/arrayutils;
import ds/tree;
import ds/dlist;
import string;
import math/math;

export {

/* Benchmarks.
Speedup of HashMap<int, int> operations, compared with Tree<int, int> (x times)
dependent on the sample map size (from 1 000 000 to 10 elements)
           1000000   100000   10000   1000   100   10
Creation    4.6        4.6      4.8    4.4   3.8   1.6
Adding      5.0        5.4      4.3    4.4   3.5   1.5
Removing    8.7        6.0      4.2    2.6   2.5   1.8
Lookup      6.8        4.0      3.3    2.3   1.9   1.4

Speedup of HashMap<string, string> operations, compared with Tree<string, string> (x times)
dependent on the sample map size (from 1 000 000 to 10 elements), using 'fastHashString'
           1000000   100000   10000   1000   100   10
Creation    5.1       4.0       3.5    2.5   1.9   1.2
Adding      5.0       2.9       3.4    2.0   1.9   1.0
Removing    6.4       5.1       3.5    2.4   2.0   1.3
Lookup      4.9       3.6       2.6    1.7   1.3   0.9
*/

	// A hash table, containing key-value pairs.
	// USE WITH CAUTION, because it is a mutable data structure,
	// so calls of set/remove functions change their arguments.
	//
	// Tests (tools/flowc/tests/ds/hashmap_test) show, that it is approx. 
	// 5 times faster for integer and string keys, then Tree<?, ??>.
	//
	// Hash collisions are handled with conventional Tree<?, ??> data structure. 
	HashMap(
		data : [ref Tree<?, ??>],
		hash : (?) -> int,
		size : ref int,
		loadFactor : double // By default is 0.75
	);

	// Creates a hash map with a given hash function.
	makeHashMap(hash : (?) -> int) -> HashMap<?, ??>;

	// Creates a hash map with a given hash function and specific load factor
	makeHashMapWithLoadFactor(hash : (?) -> int, loadFactor : double) -> HashMap<?, ??>;

	lookupHashMap : (hashMap : HashMap<?, ??>, key : ?) -> Maybe<??>;
	lookupHashMapDef : (hashMap : HashMap<?, ??>, key : ?, defaultValue : ??) -> ??;

	containsKeyHashMap : (hashMap : HashMap<?, ??>, key : ?) -> bool;

	setHashMap : (hashMap : HashMap<?, ??>, key : ?, value : ??) -> HashMap<?, ??>;

	removeFromHashMap : (tree : HashMap<?, ??>, key : ?) -> HashMap<?, ??>;

	// count the number of nodes in tree. Complexity is O(1).
	sizeHashMap : (HashMap<?, ??>) -> int;

	iterHashMap(hashMap : HashMap<?, ??>, fn : (key : ?, value : ??) -> void) -> void;

	foldHashMap(hashMap : HashMap<?, ??>, acc: ???, f: (key: ?, value: ??, acc: ???) -> ???) -> ???;

	mapHashMap(hashMap : HashMap<?, ??>, fn : (key : ?, value : ??) -> ???) -> HashMap<?, ???>;

	// Merges two hash maps. t2 overrides t1 on duplicate entries.
	// (complexity is O(t1+t2))
	mergeHashMap(h1 : HashMap<?, ??>, h2 : HashMap<?, ??>) -> HashMap<?, ??>;

	// Collect all it's keys in an array
	getHashMapKeys(hashMap : HashMap<?, ??>) -> [?];

	// Collect all it's values in an array
	getHashMapValues(hashMap : HashMap<?, ??>) -> [??];

	pairs2hashMap : (pairs : [Pair<?, ??>], hash : (?) -> int) -> HashMap<?, ??>;
	pairs2hashMapWithLoadFactor : (pairs : [Pair<?, ??>], hash : (?) -> int, loadFactor : double) -> HashMap<?, ??>;
	hashMap2pairs : (hashMap : HashMap<?, ??>) -> [Pair<?, ??>];
	pairs2hashMapArray : (pairs : [Pair<?, [??]>], hash : (?) -> int) -> HashMap<?, [??]>;

	// Get bucket (data) index for a given key; returns -1 if there are no buckets
	hashMapIndex(hashMap : HashMap<?, ??>, key : ?) -> int;
}

sizeHashMap(hashMap : HashMap<?, ??>) -> int {
	^(hashMap.size)
}

makeHashMap(hash : (?) -> int) -> HashMap<?, ??> {
	// The default capacity of hash map is 4
	makeHashMapOfVolume(hash, defaultHashMapCapacity, defaultHashMapLoadFactor)
}

makeHashMapWithLoadFactor(hash : (?) -> int, loadFactor : double) -> HashMap<?, ??> {
	// The default capacity of hash map is 4
	makeHashMapOfVolume(hash, defaultHashMapCapacity, loadFactor)
}

defaultHashMapLoadFactor = 0.75;
defaultHashMapCapacity = 4;

makeHashMapOfVolume(hash : (?) -> int, volume : int, loadFactor : double) -> HashMap<?, ??> {
	// The initial size of hash map is 0
	HashMap(arrayRepeatDeferred(\ -> ref makeTree(), volume), hash, ref 0, loadFactor)
}

lookupHashMap(hashMap : HashMap<?, ??>, key : ?) -> Maybe<??> {
	index = hashMapIndex(hashMap, key);
	if (index >= 0) {
		lookupTree(^(hashMap.data[index]), key)
	} else {
		None()
	}
}

lookupHashMapDef(hashMap : HashMap<?, ??>, key : ?, defaultValue : ??) -> ?? {
	either(lookupHashMap(hashMap, key), defaultValue)
}

containsKeyHashMap(hashMap : HashMap<?, ??>, key : ?) -> bool {
	index = hashMapIndex(hashMap, key);
	index >= 0 && containsKeyTree(^(hashMap.data[index]), key)
}

setHashMap(hashMap : HashMap<?, ??>, key : ?, value : ??) -> HashMap<?, ??> {
	resized = resizeHashMapOnDemand(hashMap);
	i = hashMapIndex(resized, key);
	if (i >= 0) {
		bucket = ^(resized.data[i]);
		switch (lookupTree(bucket, key)) {
			Some(__): { }
			None(): resized.size := ^(resized.size) + 1;
		}
		resized.data[i] := setTree(bucket, key, value);
	}
	resized
}

resizeHashMapOnDemand(hashMap : HashMap<?, ??>) -> HashMap<?, ??> {
	if (cast(^(hashMap.size) + 1 : int -> double) > cast(length(hashMap.data): int -> double) * hashMap.loadFactor) {
		resized = makeHashMapOfVolume(hashMap.hash, length(hashMap.data) * 2, hashMap.loadFactor);
		iter(hashMap.data, 
			\bucket -> {
				traverseInOrder(^bucket, \key, value -> {
						i = hashMapIndex(resized, key);
						if (i >= 0)
							resized.data[i] := setTree(^(resized.data[i]), key, value);
					}
				)
			}
		);
		resized.size := ^(hashMap.size);
		resized
	} else {
		hashMap
	}
}

removeFromHashMap(hashMap : HashMap<?, ??>, key : ?) -> HashMap<?, ??> {
	i = hashMapIndex(hashMap, key);
	if (i >= 0) {
		bucket = ^(hashMap.data[i]);
		switch (lookupTree(bucket, key)) {
			Some(__): hashMap.size := ^(hashMap.size) - 1;
			None(): { }
		}
		hashMap.data[i] := removeFromTree(bucket, key);
	}
	hashMap
}

iterHashMap(hashMap : HashMap<?, ??>, fn : (key : ?, value : ??) -> void) -> void {
	iter(hashMap.data, 
		\tree -> traverseInOrder(^tree, \key, value -> fn(key, value))
	)
}

foldHashMap(hashMap : HashMap<?, ??>, acc: ???, f: (key: ?, value: ??, acc: ???) -> ???) -> ??? {
	fold(hashMap.data, acc,
		\ac, tree -> foldTree(^tree, ac, \key, value, a -> f(key, value, a))
	)
}

mapHashMap(hashMap : HashMap<?, ??>, f: (key: ?, value: ??) -> ???) -> HashMap<?, ???> {
	foldHashMap(hashMap, 
		makeHashMapOfVolume(hashMap.hash, length(hashMap.data), hashMap.loadFactor), 
		\key, value, acc -> setHashMap(acc,key, f(key, value))
	)
}

mergeHashMap(h1 : HashMap<?, ??>, h2 : HashMap<?, ??>) -> HashMap<?, ??> {
	merged = makeHashMapOfVolume(h1.hash, (sizeHashMap(h1) + sizeHashMap(h2)) * 2, (h1.loadFactor + h2.loadFactor) / 2.0);
	add2merged = \key, value -> { setHashMap(merged, key, value); { }};
	iterHashMap(h1, add2merged);
	iterHashMap(h2, add2merged);
	merged
}

getHashMapKeys(hashMap : HashMap<?, ??>) -> [?] {
	res = ref [];
	iterHashMap(hashMap, \k, __ -> refArrayPush(res, k));
	^res
}

getHashMapValues(hashMap : HashMap<?, ??>) -> [??] {
	res = ref [];
	iterHashMap(hashMap, \__, v -> refArrayPush(res, v));
	^res
}

pairs2hashMap(pairs : [Pair<?, ??>], hash : (?) -> int) -> HashMap<?, ??> {
	pairs2hashMapWithLoadFactor(pairs, hash, defaultHashMapLoadFactor)
}

pairs2hashMapWithLoadFactor(pairs : [Pair<?, ??>], hash : (?) -> int, loadFactor : double) -> HashMap<?, ??> {
	len = cast(cast(length(pairs) : int -> double) / loadFactor : double -> int) * 2;
	hashMap = makeHashMapOfVolume(hash, len, loadFactor);
	iter(pairs, \pair -> { setHashMap(hashMap, pair.first, pair.second); { }});
	hashMap
}

pairs2hashMapArray(pairs : [Pair<?, [??]>], hash : (?) -> int) -> HashMap<?, [??]> {
	len = floor(i2d(length(pairs)) / defaultHashMapLoadFactor) * 2;
	hashMap = makeHashMapOfVolume(hash, len, defaultHashMapLoadFactor);
	fold(pairs, hashMap, \newHashMap, pair -> { 
		setHashMap(
			newHashMap,
			pair.first,
			concat(lookupHashMapDef(hashMap, pair.first, []), pair.second)
		);
	});
}

hashMap2pairs(hashMap : HashMap<?, ??>) -> [Pair<?, ??>] {
	if (sizeHashMap(hashMap) >= 10) {
		list2array(foldHashMap(hashMap, makeList(), \k, v, a -> Cons(Pair(k, v), a)))
	} else {
		foldHashMap(hashMap, [], \k, v, a -> arrayPush(a, Pair(k, v)))
	}
}

hashMapIndex(hashMap : HashMap<?, ??>, key : ?) -> int {
	len = length(hashMap.data);
	if (len > 0) {
		i = hashMap.hash(key) % length(hashMap.data);
		if (i < 0) {
			i + length(hashMap.data);
		} else {
			i
		}
	} else {
		-1
	}
}
