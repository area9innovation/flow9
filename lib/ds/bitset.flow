import ds/array;
import runtime;
import math/bits;
import maybe;

export {
    BitSet(
        data : [ref int], 
        bitcount: int
    );

    makeBitSet(bitcount: int) -> BitSet;
    setBitSet(set: BitSet, i: int) -> BitSet;
    unsetBitSet(set: BitSet, i: int) -> BitSet;
    getBitSet(set: BitSet, i: int) -> Maybe<bool>;

	// Non-destructive merge of sets.
	mergeBitSets(set1: BitSet, set2: BitSet) -> BitSet;
}

makeBitSet(bitcount) {
    n = (bitcount + 31) / 32;
	BitSet(map(enumFromTo(0, n-1), \e -> ref 0), bitcount);
}

setBitSet(set, i) {
	if (i >= 0 && i < set.bitcount) {
		set.data[i / 32] := bitOr(^(set.data[i / 32]), bitShl(1, i % 32));
	};
	set;
}

unsetBitSet(set, i) {
	if (i >= 0 && i < set.bitcount) {
		set.data[i / 32] := bitAnd(^(set.data[i / 32]), bitNot(bitShl(1, i % 32)));
	};
	set;
}

getBitSet(set, i) {
	if ((i >= 0) && (i < set.bitcount)) {
		Some(bitAnd(^(set.data[i / 32]), bitShl(1, i % 32)) != 0);
	} else {
		None();
	}
}

mergeBitSets(set1, set2) {
	res = makeBitSet(max(set1.bitcount, set2.bitcount));
	l1 = length(set1.data);
	l2 = length(set2.data);
	iteri(res.data, \i, e -> {
		res.data[i] := bitOr(
			if (i >= l1) 0 else ^(set1.data[i]),
			if (i >= l2) 0 else ^(set2.data[i]),
		);
	});
	res;
}