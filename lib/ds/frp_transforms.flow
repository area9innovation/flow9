import ds/frp_utils;

export {
	rselect(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??>;
	rselect1(v : Frp1<?>, w : Frp1<?>, fn : (?, ??) -> ???) -> Frp1<???>;
	rselect2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???>;

	// Merge two streams into one
	rmerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;
	rmergef2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??>;

	// Pick a substream
	rfirst(f : Frp2<?, ??>) -> Frp1<?>;
	rfirstf(f : Frp2<?, ??>) -> Frp1<?>;
	rsecond(f : Frp2<?, ??>) -> Frp1<??>;
	rsecondf(f : Frp2<?, ??>) -> Frp1<??>;

	// Switch between two frps depending on a condition
	rif1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;
	riff1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?>;

	// rif2(condition : Frp1<bool>, thenElse : Frp2<?, ??>) -> Frp1<?>;

	radd(v : Frp1<double>, w : Frp1<double>) -> Frp1<double>;
	rsub(v : Frp1<double>, w : Frp1<double>) -> Frp1<double>;
	rmul(v : Frp1<double>, w : Frp1<double>) -> Frp1<double>;
	rdiv(v : Frp1<double>, w : Frp1<double>) -> Frp1<double>;
	rneg(f : Frp1<double>) -> Frp1<double>;
	rabs(a : Frp1<double>) -> Frp1<double>;
	radd2(f : Frp2<double, double>) -> Frp1<double>;
	rsub2(f : Frp2<double, double>) -> Frp1<double>;
	rmul2(f : Frp2<double, double>) -> Frp1<double>;
	rdiv2(f : Frp2<double, double>) -> Frp1<double>;

	raddi(v : Frp1<int>, w : Frp1<int>) -> Frp1<int>;
	rsubi(v : Frp1<int>, w : Frp1<int>) -> Frp1<int>;
	rmuli(v : Frp1<int>, w : Frp1<int>) -> Frp1<int>;
	rdivi(v : Frp1<int>, w : Frp1<int>) -> Frp1<int>;
	rnegi(f : Frp1<int>) -> Frp1<int>;
	raddi2(f : Frp2<int, int>) -> Frp1<int>;
	rsubi2(f : Frp2<int, int>) -> Frp1<int>;
	rmuli2(f : Frp2<int, int>) -> Frp1<int>;
	rdivi2(f : Frp2<int, int>) -> Frp1<int>;

	rgreater(v : Frp1<double>, w : Frp1<double>) -> Frp1<bool>;
	rless(v : Frp1<double>, w : Frp1<double>) -> Frp1<bool>;
	rgreater2(f : Frp2<double, double>) -> Frp1<bool>;
	rless2(f : Frp2<double, double>) -> Frp1<bool>;

	rgreateri(v : Frp1<int>, w : Frp1<int>) -> Frp1<bool>;
	rlessi(v : Frp1<int>, w : Frp1<int>) -> Frp1<bool>;
	rgreateri2(f : Frp2<int, int>) -> Frp1<bool>;
	rlessi2(f : Frp2<int, int>) -> Frp1<bool>;

	rmax(v : Frp1<?>, w : Frp1<?>) -> Frp1<?>;
	rmin(v : Frp1<?>, w : Frp1<?>) -> Frp1<?>;
	rmax2(f : Frp2<?, ?>) -> Frp1<?>;
	rmin2(f : Frp2<?, ?>) -> Frp1<?>;

	req(b : Frp1<?>, v : ?) -> Frp1<bool>;
	rneq(a : Frp1<?>, v : ?) -> Frp1<bool>;

	requal(v : Frp1<?>, w : Frp1<?>) -> Frp1<bool>;
	rnotEqual(v : Frp1<?>, w : Frp1<?>) -> Frp1<bool>;
	rnot(b : Frp1<bool>) -> Frp1<bool>;
	rAnd(v : Frp1<bool>, w : Frp1<bool>) -> Frp1<bool>;
	ror(v : Frp1<bool>, w : Frp1<bool>) -> Frp1<bool>;
	rxor(v : Frp1<bool>, w : Frp1<bool>) -> Frp1<bool>;

	requal2(f : Frp2<?, ?>) -> Frp1<bool>;
	rnotEqual2(f : Frp2<?, ?>) -> Frp1<bool>;
	rand2(f : Frp2<bool, bool>) -> Frp1<bool>;
	ror2(f : Frp2<bool, bool>) -> Frp1<bool>;
	rxor2(f : Frp2<bool, bool>) -> Frp1<bool>;
}


rselect(f : Frp1<?>, fn : (?) -> ??) -> Frp1<??> {
	s = rmake1(fn(rget1(f)));
	rsubscribe1To1(f, \v -> {
		rnext1(s, fn(v));
	}, s);
	s;
}

rselect1(v : Frp1<?>, w : Frp1<?>, fn : (?, ??) -> ???) -> Frp1<???> {
	s = rmake1(fn(rget1(v), rget1(w)));
	rsubscribe1To1(v, \vv -> {
		rnext1(s, fn(vv, rget1(w)));
	}, s);
	rsubscribe1To1(w, \vv -> {
		rnext1(s, fn(rget1(v), vv));
	}, s);
	s;
}

rselect2(f : Frp2<?, ??>, fn : (?, ??) -> ???) -> Frp1<???> {
	s = rmake1(fn(rgetFirst2(f), rgetSecond2(f)));
	rsubscribe2To1(f, \v, w -> {
		rnext1(s, fn(v, w));
	}, s);
	s;
}

rmerge2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = rmake2(rget1(f1), rget1(f2));
	rsubscribe1To2(f1, \v -> rnextFirst2(s, v), s);
	rsubscribe1To2(f2, \v -> rnextSecond2(s, v), s);
	s;
}

rmergef2(f1 : Frp1<?>, f2 : Frp1<??>) -> Frp2<?, ??> {
	s = rmake2(rget1(f1), rget1(f2));
	rsubscribe1To2(f1, \v -> rnextFirstf2(s, v), s);
	rsubscribe1To2(f2, \v -> rnextSecondf2(s, v), s);
	s;
}

rfirst(f : Frp2<?, ??>) -> Frp1<?> {
	s = rmake1(rgetFirst2(f));
	rsubscribe2To1(f, \v, w -> {
		rnext1(s, v);
	}, s);
	s;
}

rfirstf(f : Frp2<?, ??>) -> Frp1<?> {
	s = rmake1(rgetFirst2(f));
	rsubscribe2To1(f, \v, w -> {
		rnextf1(s, v);
	}, s);
	s;
}

rsecond(f : Frp2<?, ??>) -> Frp1<??> {
	s = rmake1(rgetFirst2(f));
	rsubscribe2To1(f, \v, w -> {
		rnext1(s, w);
	}, s);
	s;
}

rsecondf(f : Frp2<?, ??>) -> Frp1<??> {
	s = rmake1(rgetFirst2(f));
	rsubscribe2To1(f, \v, w -> {
		rnextf1(s, w);
	}, s);
	s;
}



rif1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = rmake1(if (rget1(condition)) rget1(then) else rget1(else_));
	rsubscribe1To1(then, \v -> {
		if (rget1(condition)) {
			rnext1(s, v);
		}
	}, s);
	rsubscribe1To1(else_, \v -> {
		if (!rget1(condition)) {
			rnext1(s, v);
		} 
	}, s);
	rsubscribe1To1(condition, \c -> {
		rnext1(s, if (c) rget1(then) else rget1(else_));
	}, s);
	s;
}


riff1(condition : Frp1<bool>, then : Frp1<?>, else_ : Frp1<?>) -> Frp1<?> {
	s = rmake1(if (rget1(condition)) rget1(then) else rget1(else_));
	rsubscribe1To1(then, \v -> {
		if (rget1(condition)) {
			rnextf1(s, v);
		}
	}, s);
	rsubscribe1To1(else_, \v -> {
		if (!rget1(condition)) {
			rnextf1(s, v);
		} 
	}, s);
	rsubscribe1To1(condition, \c -> {
		rnextf1(s, if (c) rget1(then) else rget1(else_));
	}, s);
	s;
}


/*
rif2(condition : Frp1<bool>, thenElse : Frp2<?, ??>) -> Frp1<?> {
	s = rmake1(if (rget1(condition)) rget1(then) else rget1(else_));
}

*/



radd(v : Frp1<double>, w : Frp1<double>) -> Frp1<double> {
	rselect1(v, w, \vv, ww -> vv + ww);
}
radd2(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> v + w);
}

rsub(v : Frp1<double>, w : Frp1<double>) -> Frp1<double> {
	rselect1(v, w, \vv, ww -> vv - ww);
}
rsub2(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> v - w);
}

rmul(v : Frp1<double>, w : Frp1<double>) -> Frp1<double> {
	rselect1(v, w, \vv, ww -> vv * ww);
}
rmul2(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> v * w);
}

rdiv(v : Frp1<double>, w : Frp1<double>) -> Frp1<double> {
	rselect1(v, w, \vv, ww -> if (ww == 0.0) 0.0 else vv / ww);
}
rdiv2(f : Frp2<double, double>) -> Frp1<double> {
	rselect2(f, \v, w -> if (w == 0.0) 0.0 else v / w);
}

rneg(f : Frp1<double>) -> Frp1<double> {
	rselect(f, \v -> -v);
}


raddi(v : Frp1<int>, w : Frp1<int>) -> Frp1<int> {
	rselect1(v, w, \vv, ww -> vv + ww);
}
raddi2(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> v + w);
}

rsubi(v : Frp1<int>, w : Frp1<int>) -> Frp1<int> {
	rselect1(v, w, \vv, ww -> vv - ww);
}
rsubi2(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> v - w);
}

rmuli(v : Frp1<int>, w : Frp1<int>) -> Frp1<int> {
	rselect1(v, w, \vv, ww -> vv * ww);
}
rmuli2(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> v * w);
}

rdivi(v : Frp1<int>, w : Frp1<int>) -> Frp1<int> {
	rselect1(v, w, \vv, ww -> if (ww == 0) 0 else vv / ww);
}
rdivi2(f : Frp2<int, int>) -> Frp1<int> {
	rselect2(f, \v, w -> if (w == 0) 0 else v / w);
}

rnegi(f : Frp1<int>) -> Frp1<int> {
	rselect(f, \v -> -v);
}


rgreater(v : Frp1<double>, w : Frp1<double>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv > ww);
}
rgreater2(f : Frp2<double, double>) -> Frp1<bool> {
	rselect2(f, \v, w -> v > w);
}

rless(v : Frp1<double>, w : Frp1<double>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv < ww);
}
rless2(f : Frp2<double, double>) -> Frp1<bool> {
	rselect2(f, \v, w -> v < w);
}

rgreateri(v : Frp1<int>, w : Frp1<int>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv > ww);
}
rgreateri2(f : Frp2<int, int>) -> Frp1<bool> {
	rselect2(f, \v, w -> v > w);
}

rlessi(v : Frp1<int>, w : Frp1<int>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv < ww);
}
rlessi2(f : Frp2<int, int>) -> Frp1<bool> {
	rselect2(f, \v, w -> v < w);
}

rmax(v : Frp1<?>, w : Frp1<?>) -> Frp1<?> {
	rselect1(v, w, \vv, ww -> if (vv > ww) vv else ww);
}
rmax2(f : Frp2<?, ?>) -> Frp1<?> {
	rselect2(f, \v, w -> if (v > w) v else w);
}

rmin(v : Frp1<?>, w : Frp1<?>) -> Frp1<?> {
	rselect1(v, w, \vv, ww -> if (vv < ww) vv else ww);
}
rmin2(f : Frp2<?, ?>) -> Frp1<?> {
	rselect2(f, \v, w -> if (v < w) v else w);
}

req(f : Frp1<?>, v : ?) -> Frp1<bool> {
	rselect(f, \vv -> vv == v);
}

rneq(f : Frp1<?>, v : ?) -> Frp1<bool> {
	rselect(f, \vv -> vv != v);
}

requal(v : Frp1<?>, w : Frp1<?>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv == ww);
}
requal2(f : Frp2<?, ?>) -> Frp1<bool> {
	rselect2(f, \v, w -> v == w);
}

rnotEqual(v : Frp1<?>, w : Frp1<?>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv != ww);
}
rnotEqual2(f : Frp2<?, ?>) -> Frp1<bool>{
	rselect2(f, \v, w -> v != w);
}
rnot(f : Frp1<bool>) -> Frp1<bool> {
	rselect(f, \v -> !v);
}

rAnd(v : Frp1<bool>, w : Frp1<bool>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv && ww);
}
rand2(f : Frp2<bool, bool>) -> Frp1<bool> {
	rselect2(f, \v, w -> v && w);
}

ror(v : Frp1<bool>, w : Frp1<bool>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv || ww);
}
ror2(f : Frp2<bool, bool>) -> Frp1<bool>{
	rselect2(f, \v, w -> v || w);
}

rxor(v : Frp1<bool>, w : Frp1<bool>) -> Frp1<bool> {
	rselect1(v, w, \vv, ww -> vv != ww);
}
rxor2(f : Frp2<bool, bool>) -> Frp1<bool>{
	rselect2(f, \v, w -> v != w);
}
rabs(f : Frp1<double>) -> Frp1<double>{
	rselect(f, \v -> if (v < 0.0) -v else v );
}
