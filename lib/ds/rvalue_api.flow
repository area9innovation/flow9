import ds/rvalue;
import ds/array;
import math/math;

export {
	// A structure to help extract the recursive parts of a data structure in a uniform API
	RecApi(
		// Clear out recursive children to make the parent value canonical to comparison
		clean : (?) -> ?,
		// Extract the recursive children of a value
		getChildren : (?) -> [?],
		// Reconstitute a value from the parent with these children
		combine : (?, [?]) -> ?
	);

	// A fold that works on recursive structures
	// This visits parents before children
	recfold(a : RecApi<?>, x : ?, init : ??, fn : (??, ?)->??) -> ??;

	// Maps recursively over a structure
	recmap(a : RecApi<?>, x : ?, fn : (?) -> ?) -> ?;

	// Convert a value ? to an RValue<?>
	value2r(rc : RecApi<?>, v : ?) -> RValue<?>;
	// Convert an RValue<?> to a value ?
	r2value(rc : RecApi<?>, r : RValue<?>) -> ?;
}


recfold(a : RecApi<?>, x : ?, init : ??, fn : (??, ?)->??) -> ?? {
	parent = fn(init, a.clean(x));
	fold(a.getChildren(x), parent, \acc, c -> {
		recfold(a, c, acc, fn)
	})
}

recmap(a : RecApi<?>, x : ?, fn : (?) -> ?) -> ? {
	parent = fn(a.clean(x));
	children = map(a.getChildren(x), \c -> recmap(a, c, fn));
	a.combine(parent, children)
}

value2r(rc : RecApi<?>, v : ?) -> RValue<?> {
	RValue(
		rc.clean(v),
		mapi(rc.getChildren(v), \i, c -> RMember(i2s(i), value2r(rc, c)))
	)
}

r2value(rc : RecApi<?>, r : RValue<?>) -> ? {
	rc.combine(r.value, map(r.children, \c -> r2value(rc, c.value)))
}
