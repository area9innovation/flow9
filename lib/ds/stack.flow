import ds/vector;

export {
	// A mutable stack data structure based on Vector
	// Use only when mutability is absolutely necessary
	Stack(vector : Vector<?>);

	// Create a new empty stack
	makeStack() -> Stack<?>;

	// Check if stack is empty
	isEmptyStack(stack : Stack<?>) -> bool;

	// Push an element onto the stack
	pushStack(stack : Stack<?>, value : ?) -> void;

	// Pop an element from the stack
	// Returns None() if stack is empty
	popStack(stack : Stack<?>) -> Maybe<?>;

	// Pop an element from the stack
	// Returns None() if stack is empty
	popStackDef(stack : Stack<?>, def : ?) -> ?;

	// Pop an element from the stack with a custom function for empty case
	// This avoids allocating a Maybe when the stack is empty
	popStackFn(stack : Stack<?>, emptyFn : () -> ?) -> ?;

	// Discords the top elemen on the stack
	discardStack : (stack : Stack<?>) -> void;

	// Peek at the top element without removing it
	// Returns None() if stack is empty
	peekStack(stack : Stack<?>) -> Maybe<?>;

	// Get the current size of the stack
	sizeStack(stack : Stack<?>) -> int;

	// Clear all elements from the stack
	clearStack(stack : Stack<?>) -> void;

	// Convert a stack to an array (top of stack is at index 0)
	stack2array(stack : Stack<?>) -> [?];

	// Convert an array to a stack (array[0] becomes top of stack)
	array2stack(arr : [?]) -> Stack<?>;

	// Copy a stack
	copyStack(stack : Stack<?>) -> Stack<?>;
}

makeStack() -> Stack<?> {
	Stack(makeVector(16));
}

isEmptyStack(stack : Stack<?>) -> bool {
	sizeVector(stack.vector) == 0;
}

pushStack(stack : Stack<?>, value : ?) -> void {
	pushVector(stack.vector, value);
}

popStack(stack : Stack<?>) -> Maybe<?> {
	size = sizeVector(stack.vector);
	if (size > 0) {
		lastIndex = size - 1;
		result = getVector(stack.vector, lastIndex);
		removeVector(stack.vector, lastIndex);
		result;
	} else {
		None();
	}
}

popStackDef(stack : Stack<?>, def : ?) -> ? {
	size = sizeVector(stack.vector);
	if (size > 0) {
		lastIndex = size - 1;
		result = getVectorUnsafe(stack.vector, lastIndex);
		removeVector(stack.vector, lastIndex);
		result;
	} else {
		def
	}
}

popStackFn(stack : Stack<?>, emptyFn : () -> ?) -> ? {
	size = sizeVector(stack.vector);
	if (size > 0) {
		lastIndex = size - 1;
		result = getVectorUnsafe(stack.vector, lastIndex);
		removeVector(stack.vector, lastIndex);
		result
	} else {
		emptyFn();
	}
}

discardStack(stack : Stack<?>) -> void {
	size = sizeVector(stack.vector);
	if (size > 0) {
		removeVector(stack.vector, size - 1);
	}
}

peekStack(stack : Stack<?>) -> Maybe<?> {
	size = sizeVector(stack.vector);
	getVector(stack.vector, size - 1);
}

sizeStack(stack : Stack<?>) -> int {
	sizeVector(stack.vector);
}

clearStack(stack : Stack<?>) -> void {
	clearVector(stack.vector);
}

stack2array(stack : Stack<?>) -> [?] {
	arr = vector2array(stack.vector);
	reverseA(arr); // Reverse to get top of stack at index 0
}

array2stack(arr : [?]) -> Stack<?> {
	stack = makeStack();
	// Push in reverse order so that array[0] is at the top
	iter(reverseA(arr), \v -> pushStack(stack, v));
	stack;
}

copyStack(stack : Stack<?>) -> Stack<?> {
	Stack(copyVector(stack.vector));
}