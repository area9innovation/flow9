// Â© Copyright 2011 Area9 Innovation. All rights reserved

import runtime;
import arrayutils;

export {

	NTree : (k : ?, children : [NTree<?>]);

	pushNTree(t : NTree<?>, child : NTree<?>) -> NTree<?>;
	applyTree(t : NTree<?>, fn : (?) -> void) -> void;
	depthTree(startDepth : int, t : NTree<?>, fn : (depth : int, ?) -> void) -> void;
	foldNTree(t : NTree<?>, acc : ??, accFn : (??, ?) -> ??) -> ??;
	foldDepthNTree(startDepth : int, t : NTree<?>, acc : ??, accWithDepth : (int, ??, ?) -> ??) -> ??;
	mapNTree(t : NTree<?>, fn : (?) -> ??) -> NTree<??>;
	filterNTree(t : NTree<?>, predicate : (item : ?) -> bool) -> Maybe<NTree<?>>;

	Forest : (trees : [NTree<?>]);

	pushTree(t : NTree<?>, forest : Forest<?>) -> Forest<?>;
	concatForest(f1 : Forest<?>, f2 : Forest<?>) -> Forest<?>;
	applyForest(f : Forest<?>, fn : (?) -> void) -> void;
	depthForest(depth : int, f : Forest<?>, fn : (depth : int, ?) -> void) -> void;
}

pushTree(t : NTree<?>, forest : Forest<?>) -> Forest<?> {
	Forest(arrayPush(forest.trees, t));
}

concatForest(f1 : Forest<?>, f2 : Forest<?>) -> Forest<?> {
	Forest(concat(f1.trees, f2.trees));
}

applyForest(f : Forest<?>, fn : (?) -> void) -> void {
	iter(f.trees, \t -> applyTree(t, fn));
}

applyTree(t : NTree<?>, fn : (?) -> void) -> void {
	fn(t.k);
	iter(t.children, \ct -> {
		applyTree(ct, fn);
	});
}

depthForest(depth : int, f : Forest<?>, fn : (int, ?) -> void) -> void {
	iter(f.trees, \t -> depthTree(depth, t, fn));
}

depthTree(depth : int, t : NTree<?>, fn : (depth : int, ?) -> void) -> void {
	fn(depth, t.k);
	ndepth = depth + 1;
	iter(t.children, \ct -> {
		depthTree(ndepth, ct, fn);
	});
}

foldNTree(t : NTree<?>, acc : ??, accFn : (??, ?) -> ??) -> ?? {
	foldDepthNTree(0, t, acc, \depth, _acc, item -> accFn(_acc, item));
}

foldDepthNTree(startDepth : int, t : NTree<?>, acc : ??, accWithDepth : (int, ??, ?) -> ??) -> ?? {
	result = ref acc;
	depthTree(startDepth, t, \depth, item -> {
		result := accWithDepth(depth, ^result, item)
	});
	^result;
}

ifPushNTree(t : NTree<?>, condition : bool, child : NTree<?>) -> NTree<?> {
	NTree(
		t.k,
		ifArrayPush(t.children, condition, child)
	);
}

pushNTree(t : NTree<?>, child : NTree<?>) -> NTree<?> {
	NTree(
		t.k,
		arrayPush(t.children, child)
	);
}

mapNTree(t : NTree<?>, fn : (?) -> ??) -> NTree<??> {
	NTree(
		fn(t.k),
		map(t.children, \item -> mapNTree(item, fn))
	);
}

filterNTree(t : NTree<?>, predicate : (item : ?) -> bool) -> Maybe<NTree<?>> {

	if (predicate(t.k)) {
		filtered =
			NTree(
				t.k,
				filtermap(
					t.children,
					\child -> filterNTree(child, predicate)
				)
			);

		Some(filtered);
	} else {
		None();
	};
}
