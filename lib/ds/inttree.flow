// Â© Copyright 2011 Area9 Innovation. All rights reserved

import bits;
import runtime;

// A tree of 32-bit int keys with arbitrary values.
// Lookup is relatively fast, while insert can be slowish
export {
	makeIntTree() -> ref IntTree<?>;
	lookupIntTree : (tree : ref IntTree<?>, key : int) -> Maybe<?>;
	lookupIntTreeDef : (tree : ref IntTree<?>, key : int, def : ?) -> ?;
	addOrUpdateIntTree : (tree : ref IntTree<?>, key : int, value : ?) -> IntTree<?>;

	iterIntTree(tree : ref IntTree<?>, fn : (int, ?) -> void) -> void;
	IntTree<?> ::= IntTreeNode<?>, IntTreeValue<?>, IntTreeNone;

	emptyIntTree(i : ref IntTree<?>) -> bool;
}

	IntTreeNode(children : [ref IntTree<?>]);
	IntTreeValue(key : int, value : ?);
	IntTreeNone();

makeIntTree() {
	ref IntTreeNone();
}

emptyIntTree(i : ref IntTree<?>) -> bool {
	^i == IntTreeNone();
}

lookupIntTree(tree, key) {
	t = ^tree;
	switch (t : IntTree) {
		IntTreeNode(children): {
			nibble = bitAnd(key, 15);
			rest = if (key >= 0) key / 16 else bitUshr(key, 4);
			lookupIntTree(children[nibble], rest);
		}
		IntTreeValue(k, v): if (k == key) Some(v) else None();
		IntTreeNone(): None();
	}
}

lookupIntTreeDef(tree, key, def) {
	t = ^tree;
	switch (t : IntTree) {
		IntTreeNode(children): {
			nibble = bitAnd(key, 15);
			rest = if (key >= 0) key / 16 else bitUshr(key, 4);
			lookupIntTreeDef(children[nibble], rest, def);
		}
		IntTreeValue(k, v): if (k == key) v else def;
		IntTreeNone(): def;
	}
}

iterIntTree(tree, fn) {
	doIterIntTree(tree, 0, 1, fn);
}

doIterIntTree(tree : ref IntTree<?>, lobits : int, level : int, fn : (int, ?) -> void) -> void {
	t = ^tree;
	switch (t : IntTree) {
		IntTreeNode(children): {
			iteri(children, \i, c -> doIterIntTree(c, lobits + i * level, bitShl(level, 4), fn));
		}
		IntTreeValue(k, v): fn(k * level + lobits, v);
		IntTreeNone(): {}
	}
}

addOrUpdateIntTree(tree : ref IntTree<?>, key : int, value : ?) -> IntTree<?> {
	t = ^tree;
	switch (t : IntTree) {
		IntTreeNode(children): {
			nibble = bitAnd(key, 15);
			rest = if (key >= 0) key / 16 else bitUshr(key, 4);
			children[nibble] := addOrUpdateIntTree(children[nibble], rest, value);
			t;
		}
		IntTreeValue(k, v): {
			if (k == key) {
				IntTreeValue(key, value);
			} else {
				existingNibble = bitAnd(k, 15);
				existingRest = if (k >= 0) k / 16 else bitUshr(k, 4);
				nt : () -> ref IntTree = \ -> ref IntTreeNone();
				
				e : [ref IntTree] = [ nt(), ref IntTreeNone(), ref IntTreeNone(), ref IntTreeNone(),
					ref IntTreeNone(), ref IntTreeNone(), ref IntTreeNone(), ref IntTreeNone(), 
					ref IntTreeNone(), ref IntTreeNone(), ref IntTreeNone(), ref IntTreeNone(), 
					ref IntTreeNone(), ref IntTreeNone(), ref IntTreeNone(), ref IntTreeNone(), 
				];
				e[existingNibble] := IntTreeValue(existingRest, v);
				refactored = ref IntTreeNode(e);
				addOrUpdateIntTree(refactored, key, value);
			}
		}
		IntTreeNone(): {
			IntTreeValue(key, value);
		}
	}
}

