
import ds/array; // filter, exists
import promise;
import ds/tree;
import algorithms;

export {

	// Removes elements from "a" that exist in "b".
	// Does not remove duplicates from the resulting array, but does remove duplicates of elements from b.
	// Example: subtractA([1, 2, 2, 1, 3], [1]) = [2, 2, 3]
	subtractA(a : [?], b : [?]) -> [?];

	// Removes items from "a" that don't exist in "b".
	intersection(a : [?], b : [?]) -> [?];

	// Returns true if intersection of "a" and "b" is not empty.
	isIntersecting(a : [?], b : [?]) -> bool;

	// Checks if each element of subset exists in superset
	isSubArray(subset : [?], superset : [?]) -> bool;

	// For fast folding when we have heavy fold function. Can be used if:
	// fn (fn (x1, x2), x3) = fn (x1, fn (x2, x3))
	binaryFold : (xs : [?], init : ??, return : (?) -> ??, fn : (??, ??) -> ??) -> ??;

	// Common case where you have two accumulating arguments
	fold2(a : [?], init1 : ??, init2 : ???, fn : (??, ???, ?) -> Pair<??, ???>) -> Pair<??, ???>;
	foldi2(a : [?], init1 : ??, init2 : ???, fn : (int, ??, ???, ?) -> Pair<??, ???>) -> Pair<??, ???>;

	// Functions for performing synchronous array operations with an asynchronous function.
	foldAsync(xs : [?], init : ??, fn : (??, ?, (??) -> void, (???) -> void) -> void, onOK : (??) -> void, onError : (???) -> void) -> void;
	foldiAsync(xs : [?], init : ??, fn : (int, ??, ?, (??) -> void, (???) -> void) -> void, onOK : (??) -> void, onError : (???) -> void) -> void;
	// Same as doneP(allP(map(xs, \x -> Promise(\f, r -> f(x, f, r)))), fulfill, reject)
	mapAsync(xs : [?], fn : (?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void;
	mapiAsync(xs : [?], fn : (int, ?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void;

	mapiAsyncChunked(xs : [?], fn : (int, ?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void;

	// Same as doneP(parallelP(map(xs, \x -> Promise(\f, r -> f(x, f, r)))), fulfill, reject)
	mapAsyncParallel(xs : [?], fn : (?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void;
	mapiAsyncParallel(xs : [?], fn : (int, ?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void;
	// Same as doneP(parallelXP(map(splitByNumber(xs, chunkSize), \x -> Promise(\f, r -> fn(x, f, r))), simultaneous), \x -> fulfill(concatA(x)), reject)
	mapAsyncParallelChunked(xs : [?], chunkSize : int, simultaneous : int, fn : ([?], ([??]) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void;


	iterAsync(xs : [?], fn : (?, () -> void, (??) -> void) -> void, fulfill : () -> void, reject : (??) -> void) -> void;

	iteriAsync(xs : [?], fn : (int, ?, () -> void, (??) -> void) -> void, onOK : () -> void, onError : (??) -> void) -> void;

	iterAsyncParallelChunked(xs : [?], chunkSize : int, simultaneous : int, fn : ([?], () -> void, (???) -> void) -> void, fulfill : () -> void, reject : (???) -> void) -> void;

	// Count from start until the predicate is false, and collect all products from fn into an array
	generateWhile : (start : int, predicate : (int) -> bool, fn : (i : int) -> ?) -> [?];
	generateWhile2 : (start : ?, predicate : (?) -> bool, step: (?) -> ?, fn : (?) -> ??) -> [??];

	// Replaces the element at position i in xs with x. Pads xs with pad if i
	// is beyond the end of xs. Fails for negative i.
	replaceAtAndPad : (pad : ?, xs : [?], i : int, x : ?) -> [?];

	// Pads xs with pad s.t. the resulting array is of length i. Nop if the
	// length of xs is larger than i.
	padArray : (xs : [?], pad : ?, i : int) -> [?];

	// True if xs is increasing according to the total ordering relation gt.
	// I.e. gt(xs[i + n], xs[i]) for all i and positive n s.t. i and i + n are
	// in range. True if xs is empty or singleton.
	isIncreasingArray : (xs : [?], gt : (?, ?) -> bool) -> bool;

	// Gets the index of best element in xs according to the betterThan
	// relation. betterThan(a, b) should be a linear ordering and return true
	// if a is strictly better than b. Prefers earlier equivalently good
	// elements above later elements. Assumes xs is non-empty.
	getBesti : (xs : [?], betterThan : (?, ?) -> bool) -> int;

	zip : (left : [?], right : [??]) -> [Pair<?, ??>];

	// Folds over the pointwise zip of the elements of left and right.
	// Returns fallback if the number of elements do not match.
	zipFold : (left : [?], right : [??], acc : ???, fallback : () -> ???, f : (???, ?, ??) -> ???) -> ???;

	// Folds over the pointwise zip of the elements of left and right.
	// Only zips for as long as there are elements in both left and right.
	zipFoldShorter : (left : [?], right : [??], acc : ???, f : (???, ?, ??) -> ???) -> ???;

	// Folds over the pointwise zip of the elements of left and right.
	// Fails if the left and right do not have the same number of elements.
	zipFold0 : (left : [?], right : [??], acc : ???, f : (???, ?, ??) -> ???) -> ???;

	// Zips left and right using f. Fails if left and right are not of equal
	// length.
	zipWith0 : (left : [?], right : [??], f : (?, ??) -> ???) -> [???];

	// True if elements in left and right are pointwise equal by eq. False
	// if the length of the arrays are not equal.
	isArrayEqualBy : (left : [?], right : [??], eq : (?, ??) -> bool) -> bool;

	// Applies the function to the integers [0; count]. E.g.:
	//	 mapRange(3, f) ==> [f(0), f(1), f(2)]
	mapRange : (count : int, f : (value : int) -> ?) -> [?];

	// True if all elements of a sorted array are distinct according to equ.
	// The equ comparison must be an equality function must agree with the
	// order of the array sorting.
	uniqueSortedArray : (xs : [?], equ : (?, ?) -> bool) -> bool;

	// Sorts as and groups the elements into equivalence classes (as given by
	// compare). Equivalence classes are sorted according to compare.
	sortGroupBy : (as : [?], compare : (?, ?)->int) -> [[?]];
	// Groups the elements into equivalence classes (as given by compare).
	// arrayGroupBy([3, 1, 1, 2, 3, 3, 3], eq) ==> [[3], [1, 1], [2,], [3, 3, 3]]
	// without changing the order of the elements
	arrayGroupBy(as : [?], compare : (?, ?) -> bool) -> [[?]];
	// The same as arrayPush but append only if condition is true
	ifArrayPush : ([?], bool, ?) -> [?];
	ifArrayPushMany(array : [?], rules : [Pair<bool, ?>]) -> [?];

	maybeArrayPush : (array : [?], value : Maybe<?>) -> [?];
	maybeArrayPushMany : (array : [?], values : [Maybe<?>]) -> [?];

	// Selects array elements based on the given indexes
	reorderArray(a : [?], indexes : [int]) -> [?];

	// Returns array of calls to x(), repeated n times
	arrayRepeatDeferred : (x : () -> ?, n : int)->[?];

	// Gets an array element by index wrapped in Some, or None if out of bounds
	elementAtM(a : [?], idx : int) -> Maybe<?>;

	elementAtMap(a : [?], idx : int, fn : (?) -> ??, def : ??) -> ??;

	// map while fn returns something
	mapM(xs : [?], fn : (?) -> Maybe<??>) -> Maybe<[??]>;
	mapiM(xs : [?], fn : (int, ?) -> Maybe<??>) -> Maybe<[??]>;
	// fold while fn returns something
	foldM(xs : [?], init : ??, fn : (??, ?) -> Maybe<??>) -> Maybe<??>;
	foldiM(xs : [?], init : ??, fn : (int, ??, ?) -> Maybe<??>) -> Maybe<??>;

	// Removes the last element of the array. O(n)
	removeLastElement(a : [?]) -> [?];
}

// Removes elements from a that are equal to elements of b.
// Does not remove duplicates from the resulting array.
// Example: subtractA([1, 2, 2, 1, 3], [1]) = [2, 2, 3]
subtractA(a : [?], b : [?]) -> [?] {
	if (length(b) < 20) {
		filter(a, \v -> !contains(b, v))
	} else {
		bSet = fold(b, makeTree(), \acc, x -> setTree(acc, x, true));
		filter(a, \v -> !lookupTreeDef(bSet, v, false))
	}
}

intersection(a : [?], b : [?]) -> [?] {
	if (length(b) < 20) {
		filter(a, \v -> contains(b, v))
	} else {
		bSet = fold(b, makeTree(), \acc, x -> setTree(acc, x, true));
		filter(a, \v -> lookupTreeDef(bSet, v, false))
	}
}

isIntersecting(a, b) {
	if (length(b) > length(a)) {
		isIntersecting(b, a)
	} else {
		if (length(b) < 20) {
			exists(a, \v -> contains(b, v))
		} else {
			bSet = fold(b, makeTree(), \acc, x -> setTree(acc, x, true));
			exists(a, \v -> lookupTreeDef(bSet, v, false))
		}
	}
}

// [-Revise-] optimize it
isSubArray(subset : [?], superset : [?]) -> bool {
	if (subset == []) {
		true
	} else {
		x = subset[0];

		if (contains(superset, x)) {
			isSubArray(
				tail(subset),
				removeFirst(superset, x)
			)
		} else {
			false
		}
	}
}

binaryFold(
	xs : [?],
	init : ??,
	return : (?) -> ??,
	fn : (??, ??) -> ??
) -> ?? {
	if (xs == []) init
	else {
		n = length(xs);
		if (n == 1) {
			fn(init, return(xs[0]))
		} else {
			rest = n % 2;
			binaryFold(
				map(
					enumFromTo(0, n / 2 - 1),
					\i -> {
						current = 2 * i + rest;
						fn(return(xs[current]), return(xs[current + 1]))
					}
				),
				if (rest == 1) {
					fn(init, return(xs[0]))
				} else {
					init
				},
				idfn,
				fn
			)
		}
	}
}

foldAsync(xs : [?], init : ??, fn : (??, ?, (??) -> void, (???) -> void) -> void, onOK : (??) -> void, onError : (???) -> void) -> void {
	foldiAsync2(xs, 0, init, \__, acc, x, onOKFn, onErrorFn -> fn(acc, x, onOKFn, onErrorFn), onOK, onError)
}

foldiAsync(xs : [?], init : ??, fn : (int, ??, ?, (??) -> void, (???) -> void) -> void, onOK : (??) -> void, onError : (???) -> void) -> void {
	foldiAsync2(xs, 0, init, fn, onOK, onError)
}

foldiAsync2(xs : [?], i : int, acc : ??, fn : (int, ??, ?, (??) -> void, (???) -> void) -> void, onOK : (??) -> void, onError : (???) -> void) -> void {
	if (xs == []) {
		onOK(acc)
	} else {
		x = xs[0];
		t = tail(xs);
		fn(i, acc, x, \acc2 -> {
			foldiAsync2(t, i + 1, acc2, fn, onOK, onError)
		}, onError)
	}
}

mapAsync(xs : [?], fn : (?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void {
	promises = map(xs, \x -> Promise(\fulf, rej -> fn(x, fulf, rej)));
	doneP(allP(promises), fulfill, reject);
}

mapiAsync(xs : [?], fn : (int, ?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void {
	promises = mapi(xs, \i, x -> Promise(\fulf, rej -> fn(i, x, fulf, rej)));
	doneP(allP(promises), fulfill, reject);
}

mapiAsyncChunked(xs : [?], fn : (int, ?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void {
	chunkSize = max(1, min(64, (length(xs) + 32) / 64));
	promises = mapi(xs, \i, x -> Promise(\fulf, rej -> fn(i, x, fulf, rej)));
	doneP(allPchunked(promises, chunkSize), fulfill, reject);
}

mapAsyncParallel(xs : [?], fn : (?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void {
	promises = map(xs, \x -> Promise(\fulf, rej -> fn(x, fulf, rej)));
	doneP(parallelP(promises), fulfill, reject);
}

mapiAsyncParallel(xs : [?], fn : (int, ?, (??) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void {
	promises = mapi(xs, \i, x -> Promise(\fulf, rej -> fn(i, x, fulf, rej)));
	doneP(parallelP(promises), fulfill, reject);
}

mapAsyncParallelChunked(xs : [?], chunkSize : int, simultaneous : int, fn : ([?], ([??]) -> void, (???) -> void) -> void, fulfill : ([??]) -> void, reject : (???) -> void) -> void {
	chunks = splitByNumber(xs, chunkSize);
	promises = map(chunks, \x -> Promise(\fulf, rej -> fn(x, fulf, rej)));
	doneP(parallelXP(promises, simultaneous), \chunksResults -> fulfill(concatA(chunksResults)), reject);
}

iterAsync(xs : [?], fn : (?, () -> void, (??) -> void) -> void, onOK : () -> void, onError : (??) -> void) -> void {
	foldAsync(xs, 0, \acc, x, onOKFn, onErrorFn -> {
		fn(x, \-> onOKFn(acc), onErrorFn)
	}, \__ -> onOK(), onError)
}

iteriAsync(xs : [?], fn : (int, ?, () -> void, (??) -> void) -> void, onOK : () -> void, onError : (??) -> void) -> void {
	foldiAsync(xs, 0, \i, acc, x, onOKFn, onErrorFn -> {
		fn(i, x, \-> onOKFn(acc), onErrorFn)
	}, \__ -> onOK(), onError)
}

iterAsyncParallelChunked(xs : [?], chunkSize : int, simultaneous : int, fn : ([?], () -> void, (???) -> void) -> void, fulfill : () -> void, reject : (???) -> void) -> void {
	chunks = splitByNumber(xs, chunkSize);
	promises = map(chunks, \x -> Promise(\fulf, rej -> fn(x, \-> fulf(0), rej)));
	doneP(parallelXP(promises, simultaneous), \__ -> fulfill(), reject);
}

generateWhile(start, predicate, fn) {
	generateWhile2(start, predicate, \i -> i + 1, fn)
}

generateWhile2(start, predicate, step, fn) {
	generateHelper(start, predicate, step, fn, EmptyList());
}

generateHelper(start : ?, predicate : (?) -> bool, step : (?) -> ?, fn : (?) -> ??, join : List<??>) -> [??] {
	if (!predicate(start)) list2array(join)
	else generateHelper(step(start), predicate, step, fn, Cons(fn(start), join));
}

fold2(a : [?], init1 : ??, init2 : ???, fn : (??, ???, ?) -> Pair<??, ???>) -> Pair<??, ???> {
	fold(a, Pair(init1, init2), \acc : Pair<??, ???>, e -> {
		fn(acc.first, acc.second, e)
	})
}

foldi2(a : [?], init1 : ??, init2 : ???, fn : (int, ??, ???, ?) -> Pair<??, ???>) -> Pair<??, ???> {
	foldi(a, Pair(init1, init2), \i, acc : Pair<??, ???>, e -> {
		fn(i, acc.first, acc.second, e)
	})
}

replaceAtAndPad(pad : ?, xs : [?], i : int, x : ?) -> [?] {
	replace(padArray(xs, pad, i), i, x);
}

padArray(xs : [?], pad : ?, i : int) -> [?] {
	if (i <= length(xs)) {
		xs
	} else {
		concat(xs, arrayRepeat(pad, i - length(xs)));
	}
}

isIncreasingArray(xs : [?], gt : (?, ?) -> bool) -> bool {
	fold(enumFromTo(1, length(xs) - 1), true, \p, i -> {
		p && gt(xs[i], xs[i - 1])
	});
}

getBesti (xs : [?], betterThan : (?, ?) -> bool) -> int {
	foldi(tail(xs), Pair(0, xs[0]), \i, best : Pair<int,?>, x -> {
		if (betterThan(x, best.second)) Pair(i + 1, x) else best
	}).first;
}

zip(left : [?], right : [??]) -> [Pair<?, ??>] {
	zipWith(left, right, \l, r->Pair(l, r));
}

zipFold(left : [?], right : [??], acc : ???, fallback : () -> ???, f : (???, ?, ??) -> ???) -> ??? {
	l1 = length(left);
	l2 = length(right);

	if (l1 == l2) {
		fold(enumFromTo(0, l1 - 1), acc, \acc1, i->f(acc1, left[i], right[i]))
	} else {
		fallback()
	}
}

zipFoldShorter(left : [?], right : [??], acc : ???, f : (???, ?, ??) -> ???) -> ??? {
	l1 = length(left);
	l2 = length(right);

	if (l1 <= l2) {
		fold(enumFromTo(0, l1 - 1), acc, \acc1, i -> f(acc1, left[i], right[i]))
	} else {
		fold(enumFromTo(0, l2 - 1), acc, \acc1, i -> f(acc1, left[i], right[i]))
	}
}

zipFold0(left : [?], right : [??], acc : ???, f : (???, ?, ??) -> ???) -> ??? {
	zipFold(left, right, acc, \->fail0("Expected the same number of elements."), f);
}

zipWith0(left : [?], right : [??], f : (?, ??) -> ???) -> [???] {
	zipFold0(left, right, [], \a, l, r -> arrayPush(a, f(l, r)));
}

isArrayEqualBy(left : [?], right : [??], eqFn : (?, ??) -> bool) -> bool {
	zipFold(left, right, true, \-> false, \a, x, y -> a && eqFn(x, y));
}

mapRange(count : int, f : (value : int) -> ?) -> [?] {
	map(enumFromTo(0, count - 1), f);
}

uniqueSortedArray(xs : [?], equ : (?, ?) -> bool) -> bool {
	uniqueSortedArrayWorker(xs, 0, equ);
}

uniqueSortedArrayWorker(xs : [?], i : int, equ : (?, ?) -> bool) -> bool {
	if (i + 1 < length(xs)) {
		if (equ(xs[i], xs[i + 1])) {
			false
		} else {
			uniqueSortedArrayWorker(xs, i + 1, equ);
		}
	} else {
		true;
	}
}

sortGroupBy(as : [?], compare : (?, ?)->int) -> [[?]] {
	sorted = mergeSort(as, compare);
	arrayGroupBy(sorted, \a,b->compare(a,b) == 0);
}

arrayGroupBy(as : [?], compare : (?, ?) -> bool) -> [[?]] {
	list2array(sortedGroupByWorker(as, 0, [], makeList(), compare));
}

sortedGroupByWorker(as : [?], i : int, g : [?], gs : List<[?]>, equals : (?, ?) -> bool) -> List<[?]> {
	if (i < length(as)) {
		a = as[i];

		if (length(g) == 0 || equals(g[0], a)) {
			sortedGroupByWorker(as, i + 1, arrayPush(g, a), gs, equals)
		} else {
			sortedGroupByWorker(as, i + 1, [a], Cons(g, gs), equals);
		}
	} else if (length(g) > 0) {
		Cons(g, gs)
	} else {
		gs;
	}
}

ifArrayPush(array : [?], condition : bool, value : ?) {
	if (condition) arrayPush(array, value) else array
}

ifArrayPushMany(array : [?], rules : [Pair<bool, ?>]) -> [?] {
	concat(
		array,
		concatA(map(rules, \rule -> if (rule.first) [rule.second] else []))
	)
}

maybeArrayPush(array : [?], value : Maybe<?>) -> [?] {
	eitherMap(
		value,
		\v -> arrayPush(array, v),
		array
	)
}

maybeArrayPushMany(array : [?], values : [Maybe<?>]) -> [?] {
	concat(array, filtermap(values, idfn));
}

reorderArray(a : [?], indexes : [int]) -> [?] {
	l = fold(indexes, makeList(), \acc, index -> {
		if (existsIndex(a, index)) {
			Cons(a[index], acc)
		} else {
			acc
		}
	});
	list2array(l)
}

arrayRepeatDeferred(x : () -> ?, n : int) -> [?] {
	if (n <= 0) [] else map(enumFromTo(1, n), \__ -> x());
}

elementAtM(a : [?], idx : int) -> Maybe<?> {
	if (existsIndex(a, idx)) {
		Some(a[idx])
	} else {
		None()
	}
}

elementAtMap(a : [?], idx : int, fn : (?) -> ??, def : ??) -> ?? {
	if (existsIndex(a, idx)) {
		fn(a[idx])
	} else {
		def
	}
}

removeLastElement(a : [?]) -> [?] {
	subrange(a, 0, length(a) - 1)
}

mapM(xs : [?], fn : (?) -> Maybe<??>) -> Maybe<[??]> {
	fold(xs, Some([]), \accM : Maybe<[??]>, x : ? -> maybeBind(accM, \acc : [??] -> maybeMap(fn(x), \y -> arrayPush(acc, y))));
}

mapiM(xs : [?], fn : (int, ?) -> Maybe<??>) -> Maybe<[??]> {
	foldi(xs, Some([]), \i, accM : Maybe<[??]>, x : ? -> maybeBind(accM, \acc : [??] -> maybeMap(fn(i, x), \y -> arrayPush(acc, y))));
}

foldM(xs : [?], init : ??, fn : (??, ?) -> Maybe<??>) -> Maybe<??> {
	fold(xs, Some(init), \accM : Maybe<??>, x : ? -> maybeBind(accM, \acc : ?? -> fn(acc, x)));
}

foldiM(xs : [?], init : ??, fn : (int, ??, ?) -> Maybe<??>) -> Maybe<??> {
	foldi(xs, Some(init), \i, accM : Maybe<??>, x : ? -> maybeBind(accM, \acc : ?? -> fn(i, acc, x)));
}
