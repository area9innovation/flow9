import ds/digraph;
import ds/easygraph;
import forcelayout;

import ui/slider;
import graphics/arrow_graphics;

// Converts digraph to FORM by using user-defined functions for drawing nodes and edges

export {
	DiGraphLayoutType ::= DiGraphLayersLayout, DiGraphForceLayout;
		DiGraphLayersLayout : (); // http://en.m.wikipedia.org/wiki/Layered_graph_drawing
		DiGraphForceLayout : ();

	/////////////////////
	// Convert to FORM
	/////////////////////
	// TODO: change size to Behaviour
	diGraph2Form(
		graph : DiGraph, 
		sinks : [int], 
		size : WidthHeight, 
		node2formFn : (GNode<?>) -> Form, 
		edge2formFn : (GEdge<??>) -> (Point, Point) -> Form,
		type : DiGraphLayoutType
	) -> Form;

	multiRootDiGraph2Form(
		graph : DiGraph, 
		sources : [int],
		sinks : [int], 
		size : WidthHeight, 
		node2formFn : (GNode<?>) -> Form, 
		edge2formFn : (GEdge<??>) -> (Point, Point) -> Form,
		type : DiGraphLayoutType
	) -> Form;

	anyGraph2Form(
		nodes : [GNode], 
		edges : [GEdge], 
		sources : [int], 
		sinks : [int], 
		size : WidthHeight, 
		node2formFn : (GNode<?>) -> Form, 
		edge2formFn : (GEdge<??>) -> (Point, Point) -> Form
	) -> Form;

	/////////////////////
	// Helpers
	/////////////////////
	node2formSimple(form : Form, fillcolor : int, color : int, stroke : double, fontSize : double) -> Form;
	
	edge2formSimple() -> (Point, Point) -> Form;
	edge2formSimpleWithLabel(label : string) -> (Point, Point) -> Form;

	DIGRAPH_VIEW_SIZE_SIMPLE = WidthHeight(6000.0, 3000.0); //WidthHeight(3000.0, 1600.0); 
}

DiGraphView : (
	nodesView : Tree<int, Form>,
	edgesView : Tree<Pair<int, int>, (Point, Point) -> Form>
);

makeDiGraphView(nodes : [GNode], edges : [GEdge], node2formFn : (GNode<?>) -> Form, edge2formFn : (GEdge<??>) -> (Point, Point) -> Form) -> DiGraphView {
	nodesView = 
		fold(nodes, makeTree(), \acc, node -> {
				setTree(acc, node.id, node2formFn(node))
		});
	
	edgesView =
		fold(edges, makeTree(), \acc, edge -> {
			setTree(acc, Pair(edge.from, edge.to), edge2formFn(edge))
		});

	DiGraphView(nodesView, edgesView)
}

/////////////////////////
// Entry point
/////////////////////////
diGraph2Form(
	graph : DiGraph, 
	sinks : [int], 
	size : WidthHeight, 
	node2formFn : (GNode<?>) -> Form, 
	edge2formFn : (GEdge<??>) -> (Point, Point) -> Form, 
	type : DiGraphLayoutType
) -> Form {
	multiRootDiGraph2Form(graph, [graph.root.id], sinks, size, node2formFn, edge2formFn, type)
}

multiRootDiGraph2Form(
	graph : DiGraph, 
	sources : [int],
	sinks : [int], 
	size : WidthHeight, 
	node2formFn : (GNode<?>) -> Form, 
	edge2formFn : (GEdge<??>) -> (Point, Point) -> Form,
	type : DiGraphLayoutType
) -> Form {
	nodes = getGNodes(graph);
	edges = getGEdges(graph);

	switch(type) {
		DiGraphLayersLayout(): {
			unpair(layersNodesLayout(graph, sources, sinks, size), \node2layerMap, node2coordinate -> {
				edge2distances = calculateDistanceNew(edges, node2layerMap, size);

				view = makeDiGraphView(nodes, edges, node2formFn, edge2formFn);

				layout = forceDiGraphLayout(nodes, edges, sources, sinks, size, defaultParams, node2coordinate, edge2distances, true);

				formDiGraphLayout(layout, view)

				//addLayoutParametersSliders(\params -> {
				//	Group([
				//		Offset(0.0, 50.0, EasyButton("Tick", "", orange, \-> generate(0, 3, \i -> forceTick(layout)) |> ignore, [])),
				//		...
				//	])
				//});
			})
		}
		DiGraphForceLayout(): {
			anyGraph2Form(nodes, edges, sources, sinks, size, node2formFn, edge2formFn)
		}
	}
}

anyGraph2Form(nodes : [GNode], edges : [GEdge], sources : [int], sinks : [int], size : WidthHeight, node2formFn : (GNode<?>) -> Form, edge2formFn : (GEdge<??>) -> (Point, Point) -> Form) -> Form {
	view = makeDiGraphView(nodes, edges, node2formFn, edge2formFn);

	node2coordinate = calculateCoordinatesOld(nodes, sources, sinks, size);
	edge2distances = calculateDistanceOld(edges, size);

	layout = forceDiGraphLayout(nodes, edges, sources, sinks, size, defaultParams, node2coordinate, edge2distances, false);
	generate(0, 100, \i -> forceTick(layout));
	formDiGraphLayout(layout, view);

/*	
	addLayoutParametersSliders(\params -> {
		layout = forceDiGraphLayout(nodes, edges, sources, sinks, size, params, node2coordinate, edge2distances, false);

		Group([
			Offset(0.0, 50.0, EasyButton("Tick", "", orange, \-> generate(0, 3, \i -> forceTick(layout)) |> ignore, [])),
			formDiGraphLayout(layout, view)
		])
	})
*/
}

/////////////////////////////
// Layers layout
/////////////////////////////
layersNodesLayout(graph : DiGraph, sources : [int], sinks : [int], size : WidthHeight) -> Pair<Tree<int, int>, Tree<int, Point>> {

	dag = removeBackGEdgesAndLoops(graph, sources);

	nodes = getGNodes(dag);
	
	node2layerMap = calculateLayers(dag, sources, sinks);
	layer2nodesMap = foldTree(node2layerMap, makeTree(), \node, distance, acc -> treePushToArrayValue(acc, distance, node));

	node2orderMap = calculateOrders(dag, node2layerMap, layer2nodesMap);

	node2coordinateAndGaps = calculateCoordinatesNew(nodes, sources, sinks, node2orderMap, node2layerMap, size);
	node2coordinate2 = improveCorrdinatesRec(dag, node2coordinateAndGaps.first, layer2nodesMap, 0, node2coordinateAndGaps.second);

	Pair(node2layerMap, node2coordinate2)
}

removeBackGEdgesAndLoops(graph : DiGraph<?, ??>, sources : [int]) -> DiGraph<?, ??> {
	egraph = diGraph2easyGraph(graph);

	backEdges = collectBackEGEdges(egraph, sources);

	nodes = getGNodes(graph);
	edges = getGEdges(graph);

	nonBackEdges = filter(edges, \edge -> !contains(backEdges, edge) && edge.from != edge.to);

	filterDiGraph(graph, buildSet(map(nodes, \n -> n.id)), buildSet(map(nonBackEdges, \e -> Pair(e.from, e.to))));
}

calculateLayers(graph : DiGraph, sources : [int], sinks : [int]) -> Tree<int, int> {
	node2spanningChildren = buildLongestSpanningTree(graph, sources);

	node2layer = 
		fold(sources, makeTree(), \acc, source -> {
			calculateLayers2(source, 0, acc, node2spanningChildren);
		});

	maxLayer = foldTree(node2layer, 0, \node, layer, acc -> max(layer, acc));

	fold(sinks, node2layer, \acc, sink -> {
		setTree(acc, sink, maxLayer + 1)
	})
}

calculateLayers2(curr : int, layer : int, acc : Tree<int, int>, node2spanningChildren : Tree<int, [int]>) -> Tree<int, int> {
	prevLayer = lookupTreeDef(acc, curr, -1);
	acc2 = 
		if (layer > prevLayer) {
			setTree(acc, curr, layer);
		} else {
			acc
		};

	children = lookupTreeDef(node2spanningChildren, curr, []);

	fold(children, acc2, \acc3, child -> {
		calculateLayers2(child, layer + 1, acc3, node2spanningChildren)
	})
}

buildLongestSpanningTree(graph : DiGraph, sources : [int]) -> Tree<int, [int]> {
	init = LongestSpanningTreeState(makeSet(), makeTree(), makeTree());

	res = fold(sources, init, \acc, source -> {
		buildLongestSpanningTree2(graph, source, -1, 0, acc);
	});

	foldTree(res.node2spanningParent, makeTree(), \node, parent, acc -> {
		treePushToArrayValue(acc, parent, node)
	})
}

LongestSpanningTreeState : (
	visited : Set<int>,
	node2distanceFromRoot : Tree<int, int>,
	node2spanningParent : Tree<int, int>
);

buildLongestSpanningTree2(graph : DiGraph, curr : int, parent : int, distance : int, state : LongestSpanningTreeState) -> LongestSpanningTreeState {
	visitedBefore = containsSet(state.visited, curr);

	prevDistance = lookupTreeDef(state.node2distanceFromRoot, curr, -1);

	newState = 
		if (distance > prevDistance) {
			LongestSpanningTreeState(
				insertSet(state.visited, curr),
				setTree(state.node2distanceFromRoot, curr, distance),
				setTree(state.node2spanningParent, curr, parent)
			)
		} else {
			LongestSpanningTreeState(
				insertSet(state.visited, curr),
				state.node2distanceFromRoot,
				state.node2spanningParent
			)
		};

	newDistance = max(distance, prevDistance);
	
	if (visitedBefore) {
		newState
	} else {
		succs = getSuccessors(graph, curr);

		fold(succs, newState, \acc, succ -> {
			buildLongestSpanningTree2(graph, succ, curr, newDistance + 1, acc)
		})
	}
}

calculateOrders(graph : DiGraph, node2layerMap : Tree<int, int>, layer2nodesMap : Tree<int, [int]>) -> Tree<int, int> {
	maxLayer = foldTree(node2layerMap, 0, \__, distance, acc -> max(acc, distance));

	fold(enumFromTo(0, maxLayer), makeTree(), \acc, distance -> {
		nodes = lookupTreeDef(layer2nodesMap, distance, []);

		weight2nodes : Tree<double, [int]> = 
			fold(nodes, makeTree(), \acc2 : Tree<double, [int]>, node -> {
				inEdges = getInputGEdges(graph, node);
				ancessors = map(inEdges, \edge -> edge.from);

				ancessorsFromPrevDistance =
					filter(ancessors, \accessor -> {
						d = lookupTreeDef(node2layerMap, accessor, -1);

						d == distance - 1
					});

				sumOfAncessorsOrders = 
					fold(ancessorsFromPrevDistance, 0, \acc3, accessor -> {
						acc3 + lookupTreeDef(acc, accessor, 0)
					});

				weigth = i2d(sumOfAncessorsOrders) / i2d(length(ancessorsFromPrevDistance));

				treePushToArrayValue(acc2, weigth, node)
			});

		sortedNodes = 
			foldTree(weight2nodes, [], \__, ns, acc4 -> {
				concat(acc4, ns)
			});

		foldi(sortedNodes, acc, \i, acc5, node -> {
			setTree(acc5, node, i)
		})
	})
}

calculateCoordinatesNew(nodes : [GNode], sources : [int], sinks : [int], node2orderMap : Tree<int, int>, node2layerMap : Tree<int, int>, size : WidthHeight) -> Triple<Tree<int, Point>, double, double> {
	maxLayer = foldTree(node2layerMap, 0, \__, layer, acc -> max(acc, layer));

	//println("maxLayer = " + i2s(maxLayer));
	
	layer2nodes = foldTree(node2layerMap, makeTree(), \node, layer, acc -> treePushToArrayValue(acc, layer, node));

	layer2maxOrder = 
		foldTree(layer2nodes, makeTree(), \layer, ns, acc -> {
			maxOrder = 
				fold(ns, 0, \acc2, node -> {
					order = lookupTreeDef(node2orderMap, node, 0);

					max(acc2, order)
				});

			setTree(acc, layer, maxOrder)
		});

	globalMaxOrder = foldTree(layer2maxOrder, 0, \__, maxOrder, acc -> max(acc, maxOrder));

	//println("globalMaxOrder = " + i2s(globalMaxOrder));

	effectiveWidth = size.width - 100.0;
	effectiveHeight = size.height - 100.0;

	xgap = min(360.0, effectiveWidth / i2d(globalMaxOrder)); // best distance between nodes on the same layer
	ygap = min(150.0, effectiveHeight /  i2d(maxLayer));

	//println("xgap = " + d2s(xgap));
	//println("ygap = " + d2s(ygap));

	node2coordinate = 
	 	foldi(nodes, makeTree(), \i, acc, node -> {
		order = lookupTreeDef(node2orderMap, node.id, 0);
		layer = lookupTreeDef(node2layerMap, node.id, 0);

			maxOrder = lookupTreeDef(layer2maxOrder, layer, 0);

			border = (effectiveWidth - i2d(maxOrder) * xgap) / 2.0;

			x = border + i2d(order) * xgap; //(effectiveWidth * i2d(order)) / i2d(maxOrder);
			y = ygap * i2d(layer);

			setTree(acc, node.id, Point(x,y))
		});

	Triple(node2coordinate, xgap, ygap)
}

improveCorrdinatesRec(graph : DiGraph, node2coordinate : Tree<int, Point>, layer2nodesMap : Tree<int, [int]>, i : int, xgap : double) -> Tree<int, Point> {
	println("Recursive coordinates improving, iteration #" + i2s(i));

	node2coordinate2 = improveCorrdinates(graph, node2coordinate, layer2nodesMap, xgap);

	if (node2coordinate == node2coordinate2 || i > 5) {
		node2coordinate2
	} else {
		improveCorrdinatesRec(graph, node2coordinate2, layer2nodesMap, i + 1, xgap)
	}
}

improveCorrdinates(graph : DiGraph, node2coordinateMap : Tree<int, Point>, layer2nodesMap : Tree<int, [int]>, xgap : double) -> Tree<int, Point> {
	reshuffleNodes(
		node2coordinateMap, 
		layer2nodesMap, 
		//\nodes, node1, node2, n2c -> layer2deltaWeight(graph, nodes, node1, node2, n2c), 
		\layer, nodes, node1, node2, n2c -> layer2intersectionWeight(graph, layer, nodes, node1, node2, n2c, layer2nodesMap), 
		xgap
	)
}

node2deltaWeight(graph : DiGraph, node : int, node2coordinateMap : Tree<int, Point>) -> double {
	nCoordinate = lookupTreeDef(node2coordinateMap, node, Point(0.0, 0.0));

	succs = getSuccessors(graph, node);

	fold(succs, 0.0, \acc3, succ -> {
		succCoordinate = lookupTreeDef(node2coordinateMap, succ, Point(0.0, 0.0));

		acc3 + abs(succCoordinate.x - nCoordinate.x)
	})
}

layer2deltaWeight(graph : DiGraph, nodes : [int], node1 : int, node2 : int, node2coordinateMap : Tree<int, Point>) -> double {
	node2deltaWeight(graph, node1, node2coordinateMap) + node2deltaWeight(graph, node2, node2coordinateMap)
}

layer2intersectionWeight(graph, layer : int, nodes : [int], node1 : int, node2 : int, node2coordinateMap : Tree<int, Point>, layer2nodesMap : Tree<int, [int]>) -> Pair<int, double> {
	intersections = numberOfIntersectionsPerLayer(graph, layer, nodes, node2coordinateMap, layer2nodesMap);

	delta = layer2deltaWeight(graph, nodes, node1, node2, node2coordinateMap);

	Pair(intersections, delta)
}

numberOfIntersectionsPerLayer(graph : DiGraph, layer : int, nodes : [int], node2coordinateMap : Tree<int, Point>, layer2nodesMap : Tree<int, [int]>) -> int {
	nodesOfTheNextLayer = lookupTreeDef(layer2nodesMap, layer + 1, []);

	allNodes = concat(nodes, subrange(nodesOfTheNextLayer, 0, 4));

	segments =
		fold(allNodes, [], \acc, node -> {
			from = lookupTreeDef(node2coordinateMap, node, Point(0.0, 0.0));

			edges = getOutGEdges(graph, node);

			fold(edges, acc, \acc2, edge -> {
				to = lookupTreeDef(node2coordinateMap, edge.to, Point(0.0, 0.0));

				arrayPush(acc2, Segment(from, to))
			})
		});

	numberOfSegmentsIntersections(segments)
}

numberOfSegmentsIntersections(segments : [Segment]) -> int {
	foldi(segments, 0, \i, acc, s1 -> {
		foldi(segments, acc, \j, acc2, s2 -> {
			if (j > i) {
				pM = getSegmentsIntersection(s1, s2);

				switch(pM) {
					Some(p): {
						if (p == s1.start || p == s1.end || p == s2.start || p == s2.end) {
							acc2 
						} else {
							acc2 + 1
						}
					}
					None(): acc2
				}
			} else {
				acc2
			}
		})
	})
}

reshuffleNodes(node2coordinateMap : Tree<int, Point>, layer2nodesMap : Tree<int, [int]>, layer2weightFn : (int, [int], int, int, Tree<int, Point>) -> ?, xgap : double) -> Tree<int, Point> {
	foldTree(layer2nodesMap, node2coordinateMap, \layer, nodes, accMap : Tree<int, Point> -> {
		reshuffleNodesInLayer(layer, nodes, accMap, layer2weightFn, xgap)
	})
}

reshuffleNodesInLayer(layer : int, nodes : [int], node2coordinateMap : Tree<int, Point>, layer2weightFn : (int, [int], int, int, Tree<int, Point>) -> ?, xgap : double) -> Tree<int, Point> {
	fold(nodes, node2coordinateMap, \accMap, node1 : int -> {
		coordinate1 = lookupTreeDef(accMap, node1, Point(0.0, 0.0));

		bestNodeForSwappingM : Maybe<Pair<int, ?>> = 
			fold(nodes, None(), \acc3M : Maybe<Pair<int, ?>>, node2 : int -> {
				if (node1 == node2) {
					acc3M
				} else {
					coordinate2 = lookupTreeDef(accMap, node2, Point(0.0, 0.0));

					weight = layer2weightFn(layer, nodes, node1, node2, accMap); 

					// swap node1 and node2 in the map
					newAccMap = swapKeysInTree(accMap, node1, node2, coordinate1, coordinate2);

					newWeight = layer2weightFn(layer, nodes, node1, node2, newAccMap); 

					if (newWeight < weight) {
						switch(acc3M) {
							Some(acc3): {
								if (acc3.second > newWeight) {
									// node2 is better to swap with node1 than one we found before
									Some(Pair(node2, newWeight))
								} else {
									acc3M
								}
							}
							None(): {
								// the first node we can swap the will give better results than current config
								Some(Pair(node2, newWeight))
							}
						}
					} else {
						acc3M
					}
				}
			});

		accMap2 = 
			switch(bestNodeForSwappingM) {
				Some(bestNodeForSwapping): {
					node2 = bestNodeForSwapping.first;
					coordinate2 = lookupTreeDef(accMap, node2, Point(0.0, 0.0));

					swapKeysInTree(accMap, node1, node2, coordinate1, coordinate2);
				}
				None(): accMap;
			};

		if (length(nodes) == 1) {
			accMap2
		} else {
			accMap3 = moveNodeInFront(nodes, node1, accMap2, xgap);

			node2 = nodes[0];

			weight = layer2weightFn(layer, nodes, node1, node2, accMap2); 
			newWeight = layer2weightFn(layer, nodes, node1, node2, accMap3); 

			if (newWeight < weight) {
				accMap3
			} else {
				accMap2
			}
		}
	})
}

swapKeysInTree(tree : Tree<?, ??>, k1 : ?, k2 : ?, v1 : ??, v2 : ??) -> Tree<?, ??> {
	mapTree2(tree, \k, v -> if (k == k1) v2 else if (k == k2) v1 else v);
}

moveNodeInFront(nodes : [int], node : int, node2coordinateMap : Tree<int, Point>, xgap : double) -> Tree<int, Point> {
	if (length(nodes) == 1) {
		node2coordinateMap
	} else {
		mostLeftNodeAndCoordinateM = 
			fold(nodes, None(), \accM : Maybe<Pair<int, Point>>, n -> {
				c = lookupTreeDef(node2coordinateMap, n, Point(0.0, 0.0));

				switch(accM) {
					Some(acc): {
						if (acc.second > c) {
							Some(Pair(n, c))
						} else {
							accM
						}
					}
					None(): {
						Some(Pair(n, c))
					}
				}
			});

		coordinate = lookupTreeDef(node2coordinateMap, node, Point(0.0, 0.0));

		switch(mostLeftNodeAndCoordinateM) {
			Some(mostLeftNodeAndCoordinate): {
				if (mostLeftNodeAndCoordinate.first == node) {
					// nothing to do
					node2coordinateMap
				} else {
					fold(nodes, node2coordinateMap, \acc, n -> {
						if (n == node) {
							setTree(acc, n, mostLeftNodeAndCoordinate.second)
						} else {
							c = lookupTreeDef(acc, n, Point(0.0, 0.0));

							if (c < coordinate) {
								setTree(acc, n, Point(c.x + xgap, c.y))
							} else {
								acc
							}
						}
					})
				}
	 		}
			None(): {
				// something wrong
				node2coordinateMap
			}
		}
	}
}

calculateDistanceNew(edges : [GEdge], node2layerMap : Tree<int, int>, size : WidthHeight) -> Tree<GEdge, Pair<double, double>> {
	maxLayer = foldTree(node2layerMap, 0, \__, distance, acc -> max(acc, distance));	

	layerDistance = (size.height - 100.0) / i2d(maxLayer);
	
	fold(edges, makeTree(), \acc, edge -> {
		fromDistance = lookupTreeDef(node2layerMap, edge.from, 0);
		toDistance = lookupTreeDef(node2layerMap, edge.to, 0);
		distanceGuess = max(layerDistance, layerDistance * i2d(iabs(toDistance - fromDistance)));

		distances = Pair(distanceGuess, 3.0 * distanceGuess);

		setTree(acc, edge, distances)
	})
}

/////////////////////////////
// Circle layout
/////////////////////////////
calculateCoordinatesOld(nodes : [GNode], sources : [int], sinks : [int], size : WidthHeight) -> Tree<int, Point> {
	nodesCount = length(nodes);

 	foldi(nodes, makeTree(), \i, acc, node -> {
		point = 
			if (contains(sources, i)) {
				x = size.width / 2.0;
				y = 0.0;

				Point(x,y)
			} else if (contains(sinks, i)) {
				x = size.width / 2.0;
				y = size.height;

				Point(x,y)

			} else {
				t = 2.0 * PI * i2d(i) / i2d(nodesCount);

				x = cos(t) * (size.width - 100.0) / 2.0  + size.width / 2.0;
				y = sin(t) * (size.height - 100.0) / 2.0  + size.height / 2.0;

				Point(x,y)
			};

		setTree(acc, node.id, point)
	})
}

calculateDistanceOld(edges : [GEdge], size : WidthHeight) -> Tree<GEdge, Pair<double, double>> {
	fold(edges, makeTree(), \acc, edge -> {
		setTree(acc, edge, Pair(75.0, 75.0))
	})
}

/////////////////////////
// Force layout sliders
/////////////////////////

ForceLayoutParams : (
	alpha : double,
	friction : double,
	gravity : double,
	theta : double
);

addLayoutParametersSliders(graph2formFn : (ForceLayoutParams) -> Form) -> Form {
	alphaB = make(0.1);
	frictionB = make(0.9);
	gravityB = make(0.03);
	thetaB = make(0.8);

	alphaSlider = makeNumericSlider(alphaB, 0.0, 1.0, 0.01, 100.0);
	frictionSlider = makeNumericSlider(frictionB, 0.0, 1.0, 0.01, 100.0);
	gravitySlider = makeNumericSlider(gravityB, 0.0, 1.0, 0.01, 100.0);
	thetaSlider = makeNumericSlider(thetaB, 0.0, 1.0, 0.01, 100.0);

	paramsB = select4(alphaB, frictionB, gravityB, thetaB, \alpha, friction, gravity, theta -> {
		ForceLayoutParams(alpha, friction, gravity, theta)
	});

	doUpdateB = make(false);

	sliders = 
		Lines([
			Cols([Text("Alpha", []), Fixed(10.0, 0.0), alphaSlider, Select(alphaB, \a -> Text(d2s(a), []))]),
			Cols([Text("Friction", []), Fixed(10.0, 0.0), frictionSlider, Select(frictionB, \f -> Text(d2s(f), []))]),
			Cols([Text("Gravity", []), Fixed(10.0, 0.0), gravitySlider, Select(gravityB, \g -> Text(d2s(g), []))]),
			Cols([Text("Theta", []), Fixed(10.0, 0.0), thetaSlider, Select(thetaB, \t -> Text(d2s(t), []))]),
			EasyButton("Update", "", orange, \-> { next(doUpdateB, !getValue(doUpdateB)) }, [])
		]);

	graphForm = Select(doUpdateB, \__ -> {
		params = getValue(paramsB);

		graph2formFn(params)
	});

	Group([
		graphForm,
		sliders
	])
}

/////////////////////////
// Graph -> Force layout
/////////////////////////

defaultParams = ForceLayoutParams(0.1, 0.9, 0.03, 0.8);

forceDiGraphLayout(nodes : [GNode], edges : [GEdge], sources : [int], sinks : [int], size : WidthHeight, params : ForceLayoutParams, node2coordinate : Tree<int, Point>, edge2distances : Tree<GEdge, Pair<double, double>>, fixycoordinate : bool) -> ForceLayout {
	id2index = 
		foldi(nodes, makeTree(), \i, acc, node -> {
			setTree(acc, node.id, i)
		});

	fnodes = mapi(nodes, \index, node -> {
		coordinate = lookupTreeDef(node2coordinate, node.id, Point(0.0,0.0));

		if (contains(sources, node.id)) {
			ForceNode(make(coordinate.x), make(coordinate.y), ref coordinate.x, ref coordinate.y, 100.0, 1000.0, false, true, node.id);
		} else if (contains(sinks, node.id)) {
			ForceNode(make(coordinate.x), make(coordinate.y), ref coordinate.x, ref coordinate.y, 100.0, 1000.0, false, true, node.id);
		} else {
			ForceNode(make(coordinate.x), make(coordinate.y), ref coordinate.x, ref coordinate.y, 10.0, 1000.0, false, fixycoordinate, node.id);
		}
	});

	fedges = map(edges, \edge -> {
		distances = lookupTreeDef(edge2distances, edge, Pair(0.0, 0.0));

		fromIndex = lookupTreeDef(id2index, edge.from, -1);
		toIndex = lookupTreeDef(id2index, edge.to, -1);

		ForceEdge(fromIndex, toIndex, 1.0, distances.first, distances.second)
	});

	ForceLayout(
		size, // size
		ref params.alpha, // alpha
		params.friction, // friction
		params.gravity, // gravity
		params.theta, // theta
		fnodes, // nodes
		fedges, // edges
	)
}

/////////////////////////
// Force layout -> Form
/////////////////////////
formDiGraphLayout(layout : ForceLayout, view : DiGraphView) -> Form {
	nodesAndSizes : Pair<[Form], Tree<int, DynamicBehaviour<WidthHeight>>> =
		foldi(layout.nodes, Pair([], makeTree()), \index, acc : Pair<[Form], Tree<int, DynamicBehaviour<WidthHeight>>>, node : ForceNode -> {

			nodeForm = lookupTreeDef(view.nodesView, node.id, Empty());

			nodeWHB : DynamicBehaviour<WidthHeight> = makeWH();

			nodeForm2 = Inspect([ISize(nodeWHB)], nodeForm);

			nodeForm3 : Form = 
				Slider(
					node.x, 
					node.y, 
					const(layout.size.width), 
					const(layout.size.height), 
					nodeForm2, 
					[]
				);

			Pair(
				arrayPush(acc.first, nodeForm3),
				setTree(acc.second, index, nodeWHB)
			)
		});

	edgesForms = 
		mapi(layout.edges, \i, edge -> {
			sourceNode = layout.nodes[edge.source];
			targetNode = layout.nodes[edge.target];

			sourceSize = lookupTreeDef(nodesAndSizes.second, edge.source, makeWH());
			targetSize = lookupTreeDef(nodesAndSizes.second, edge.target, makeWH());

			edgeFormFn = lookupTreeDef(view.edgesView, Pair(sourceNode.id, targetNode.id), \__, __ -> Empty());

			Select2(
				select3(sourceNode.x, sourceNode.y, sourceSize, \x, y, wh -> Point(x + wh.width / 2.0, y + wh.height / 2.0)), 
				select3(targetNode.x, targetNode.y, targetSize, \x, y, wh -> Point(x + wh.width / 2.0, y + wh.height / 2.0)), 
				edgeFormFn
			)
		});

	Border(50.0, 50.0, 50.0, 50.0, 
		Group(concat(edgesForms, nodesAndSizes.first))
	)
}

/////////////////////
// Helpers
/////////////////////
node2formSimple(form : Form, fillcolor : int, color : int, stroke : double, fontSize : double) -> Form {
	borderSize = fontSize / 2.0;
	roundSize = fontSize / 3.0;

	Rounded(roundSize, [Fill(fillcolor), Stroke(color), StrokeWidth(stroke)], 
		Border(borderSize, borderSize, borderSize, borderSize, form)
	)
}

edge2formSimple() -> (Point, Point) -> Form {
	\from : Point, to : Point -> {
		ArrowForm(from, to, [Stroke(black), StrokeOpacity(0.8), StrokeWidth(1.0)])
	}
}

edge2formSimpleWithLabel(label : string) -> (Point, Point) -> Form {
	\from : Point, to : Point -> {
		drawBoxArrow(
			from.x, 
			from.y, 
			to.x, 
			to.y, 
			[Stroke(0x000000), HeadArrow(), LabelAbove(label, [FontSize(8.0)])], 
			10.0, 
			45.0
		)
	}
}