import ds/hashmap;

export {
	// Specialized version of general associaitive container with integer keys.
	// Optimized for performance.
	// As a fallback uses a hash map.

	IntMap : (map : native, __: [?]);

	// Creates an IntMap with a given hash function.
	makeIntMap() -> IntMap<?>;
	// Creates an IntMap with a given initial capacity. init_capacity is ignored in JS
	makeIntMapCap(init_capacity : int) -> IntMap<?>;

	lookupIntMap : (intMap : IntMap<?>, key : int) -> Maybe<?>;

	lookupIntMapDef : (intMap : IntMap<?>, key : int, defaultValue : ?) -> ?;

	containsKeyIntMap : (intMap : IntMap<?>, key : int) -> bool;

	setIntMap : (intMap : IntMap<?>, key : int, value : ?) -> void;

	removeFromIntMap : (tree : IntMap<?>, key : int) -> void;

	clearIntMap(intMap : IntMap<?>) -> void;

	// count the number of nodes in tree. Complexity is O(1).
	sizeIntMap : (IntMap<?>) -> int;

	iterIntMap(intMap : IntMap<?>, fn : (key : int, value : ?) -> void) -> void;

	foldIntMap(intMap : IntMap<?>, acc: ??, f: (key: int, value: ?, acc: ??) -> ??) -> ??;

	mapIntMap(intMap : IntMap<?>, fn : (key : int, value : ?) -> ??) -> IntMap<??>;

	// Merges two int maps. t2 overrides t1 on duplicate entries.
	// (complexity is O(t1+t2))
	mergeIntMap(h1 : IntMap<?>, h2 : IntMap<?>) -> void;

	// Merges two int maps with resolving of common keys.
	mergeIntMapCustom(h1 : IntMap<?>, h2 : IntMap<?>, resolve : (int, ?, ?) -> ?) -> void;

	// Collect all it's keys in an array
	intMapKeys(intMap : IntMap<?>) -> [int];

	// Collect all it's values in an array
	intMapValues(intMap : IntMap<?>) -> [?];

	pairs2intMap : (pairs : [Pair<int, ?>]) -> IntMap<?>;
	pairs2intMapArray(pairs : [Pair<int, [?]>]) -> IntMap<[?]>;
	intMap2pairs : (intMap : IntMap<?>) -> [Pair<int, ?>];
	tree2intMap : (tree : Tree<int, ?>) -> IntMap<?>;

	// Make a copy of int map. Since IntMap is mutable, it may make sense.
	copyIntMap(intMap : IntMap<?>) -> IntMap<?>;

	equalsIntMap(h1 : IntMap<?>, h2 : IntMap<?>) -> bool;
}

sizeIntMap(intMap : IntMap<?>) -> int {
	sizeNativeIntMap(intMap.map);
}

makeIntMap() -> IntMap<?> {
	makeIntMapCap(16) // init_capacity is ignored in JS
}

makeIntMapCap(init_capacity : int) -> IntMap<?> {
	IntMap(makeNativeIntMap(init_capacity), []);
}

lookupIntMap(intMap : IntMap<?>, key : int) -> Maybe<?> {
	getNativeIntMap(intMap.map, key);
}

lookupIntMapDef(intMap : IntMap<?>, key : int, defaultValue : ?) -> ? {
	switch (getNativeIntMap(intMap.map, key)) {
		Some(v): v;
		None(): defaultValue;
	}
}

containsKeyIntMap(intMap : IntMap<?>, key : int) -> bool {
	containsNativeIntMap(intMap.map, key);
}

setIntMap(intMap : IntMap<?>, key : int, value : ?) -> void {
	setNativeIntMap(intMap.map, key, value);
}

removeFromIntMap(intMap : IntMap<?>, key : int) -> void {
	removeNativeIntMap(intMap.map, key);
}

clearIntMap(intMap : IntMap<?>) -> void {
	clearNativeIntMap(intMap.map);
}

iterIntMap(intMap : IntMap<?>, fn : (key : int, value : ?) -> void) -> void {
	iterNativeIntMap(intMap.map, fn);
}

foldIntMap(intMap : IntMap<?>, acc: ??, f: (key: int, value: ?, acc: ??) -> ??) -> ?? {
	ac = ref acc;
	iterNativeIntMap(intMap.map, \k, v -> ac := f(k, v, ^ac));
	^ac;
}

mapIntMap(intMap : IntMap<?>, f: (key: int, value: ?) -> ??) -> IntMap<??> {
	mapped = cloneNativeIntMap(intMap.map);
	iterNativeIntMap(intMap.map, \key, value -> setNativeIntMap(mapped, key, f(key, value)));
	IntMap(mapped, []);
}

mergeIntMap(h1 : IntMap<?>, h2 : IntMap<?>) -> void {
	iterNativeIntMap(h2.map, \k, v -> setNativeIntMap(h1.map, k, v));
}

mergeIntMapCustom(h1 : IntMap<?>, h2 : IntMap<?>, resolve : (int, ?, ?) -> ?) -> void {
	iterNativeIntMap(h2.map, \k, v2 -> {
		switch (getNativeIntMap(h1.map, k)) {
			Some(v1): setNativeIntMap(h1.map, k, resolve(k, v1, v2));
			None(): setNativeIntMap(h1.map, k, v2);
		}
	});
}

intMapKeys(intMap : IntMap<?>) -> [int] {
	res = ref [];
	iterNativeIntMap(intMap.map, \k, __ -> refArrayPush(res, k));
	^res
}

intMapValues(intMap : IntMap<?>) -> [?] {
	res = ref [];
	iterNativeIntMap(intMap.map, \__, v -> refArrayPush(res, v));
	^res
}

pairs2intMap(pairs : [Pair<int, ?>]) -> IntMap<?> {
	len = floor(i2d(length(pairs)) / 0.75) * 2;
	m = makeNativeIntMap(len);
	iter(pairs, \pair -> setNativeIntMap(m, pair.first, pair.second));
	IntMap(m, []);
}

pairs2intMapArray(pairs : [Pair<int, [?]>]) -> IntMap<[?]> {
	len = floor(i2d(length(pairs)) / 0.75) * 2;
	m = makeNativeIntMap(len);
	iter(pairs, \pair -> {
		n_arr = switch (getNativeIntMap(m, pair.first)) {
			Some(arr): concat(arr, [pair.second]);
			None(): [pair.second];
		}
		setNativeIntMap(m, pair.first, n_arr);
	});
	IntMap(m, []);
}

intMap2pairs(intMap : IntMap<?>) -> [Pair<int, ?>] {
	if (sizeIntMap(intMap) >= 10) {
		list2array(foldIntMap(intMap, makeList(), \k, v, a -> Cons(Pair(k, v), a)))
	} else {
		foldIntMap(intMap, [], \k, v, a -> arrayPush(a, Pair(k, v)))
	}
}

tree2intMap(tree : Tree<int, ?>) -> IntMap<?> {
	m = makeNativeIntMap(sizeTree(tree));
	traverseInOrder(tree, \k, v -> setNativeIntMap(m, k, v));
	IntMap(m, []);
}

copyIntMap(intMap : IntMap<?>) -> IntMap<?> {
	IntMap(cloneNativeIntMap(intMap.map), []);
}

equalsIntMap(h1 : IntMap<?>, h2 : IntMap<?>) -> bool {
	if (sizeIntMap(h1) != sizeIntMap(h2)) false else {
		ret = ref true;
		iterNativeIntMap(h1.map, \k, v1 ->
			switch (getNativeIntMap(h2.map, k)) {
				Some(v2): if (v1 != v2) ret := false;
				None(): ret := false;
			}
		);
		^ret;
	}
}

// Currently natives are implemented only for JS platform

native makeNativeIntMap : (cap: int) -> native = NativeIntMap.init;
native setNativeIntMap : (m : native, key : int, value : ?) -> void = NativeIntMap.set;
native getNativeIntMap : (m : native, key : int) -> Maybe<?> = NativeIntMap.get;
native removeNativeIntMap : (m : native, key : int) -> void = NativeIntMap.remove;
native containsNativeIntMap : (m : native, key : int) -> bool = NativeIntMap.contains;
native sizeNativeIntMap : (m : native) -> int = NativeIntMap.size;
native clearNativeIntMap : (m : native) -> void = NativeIntMap.clear;
native cloneNativeIntMap : (m : native) -> native = NativeIntMap.clone;
native iterNativeIntMap : (m : native, f : (int, ?) -> void) -> void = NativeIntMap.iter;

// FALLBACKS FOR NON-NATIVE IMPLEMENTATION - USE HASH MAP

sizeNativeIntMap(hm : native) -> int {
	sizeHashMap(cast(flow(hm) : flow -> HashMap<int, ?>));
}

clearNativeIntMap(hm : native) -> void {
	clearHashMap(cast(flow(hm) : flow -> HashMap<int, ?>));
}

makeNativeIntMap(init_capacity : int) -> native {
	flow(makeHashMapCap(idfn, init_capacity));
}

getNativeIntMap(hm : native, key : int) -> Maybe<?> {
	lookupHashMap(cast(flow(hm) : flow -> HashMap<int, ?>), key);
}

containsNativeIntMap(hm : native, key : int) -> bool {
	containsKeyHashMap(cast(flow(hm) : flow -> HashMap<int, ?>), key);
}

setNativeIntMap(hm : native, key : int, value : ?) -> void {
	setHashMap(cast(flow(hm) : flow -> HashMap<int, ?>), key, value);
}

removeNativeIntMap(hm : native, key : int) -> void {
	removeFromHashMap(cast(flow(hm) : flow -> HashMap<int, ?>), key);
}

iterNativeIntMap(hm : native, fn : (key : int, value : ?) -> void) -> void {
	iterHashMap(cast(flow(hm) : flow -> HashMap<int, ?>), fn);
}

cloneNativeIntMap(hm : native) -> native {
	flow(copyHashMap(cast(flow(hm) : flow -> HashMap<int, ?>)));
}
