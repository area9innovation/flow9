import ds/treeutils;
import ds/set;

// Directed weighted rooted graph implementation based on adjacency lists

// See easygraph.flow for an interface, which is probably easier to work with.

export {
	// to avoid returning Maybe<__>, there are error values 'badedge' & 'badnode'
	DiGraph : (
		root : GNode<?>, 
		badnode : GNode<?>, 
		badedge : GEdge<??>, 
		nodes : Tree<int, GNode<?>>, 
		outedges : Tree<int, [GEdge<??>]>, 
		nodesNumber : int, 
		edgesNumber : int, 
		nextNodeId : int, // might be different from nodesNumber if some nodes are absent
		inDegree : Tree<int, int>
	);
	
	GNode : (id : int, data : ?);

	GEdge : (from : int, to : int, data : ?, weight : int);

	//////////////////////////
	// constructor. You have to start with the data in the root node of the graph.
	// baddata is a value used for non-existant nodes, similar with badedge data.
	//////////////////////////
	createDiGraph(rootdata : ?, baddata : ?, badedgedata : ??) -> DiGraph<?, ??>;

	//////////////////////////
	// add / update nodes
	//////////////////////////
	// just adds new node to graph, nodes with duplicate data
	addGNode(graph : DiGraph<?, ??>, data : ?) -> Pair<DiGraph<?, ??>, GNode<?>>;

	// Check if node with same data already exists. Linear time!
	addGNodeSafe(graph : DiGraph<?, ??>, data : ?, eqFn : (?, ?) -> bool) -> Pair<DiGraph<?, ??>, GNode<?>>;
	
	updateGNode(graph : DiGraph<?, ??>, id : int, data : ?) -> Pair<DiGraph<?, ??>, GNode<?>>;

	//////////////////////////
	// add / update edges
	//////////////////////////
	// check if edge is not a direct loop (from == to), check if any edge between those two nodes already exists
	addGEdge(graph : DiGraph<?, ??>, from : int, to : int, data : ??, weight : int) -> Pair<DiGraph<?, ??>, Maybe<GEdge<??>>>;

	// No checks, just unconditional add. be careful! However, it should be faster
	addGEdgeUnsafe(graph : DiGraph<?, ??>, from : int, to : int, data : ??, weight : int) -> Pair<DiGraph<?, ??>, GEdge<??>>;

	updateGEdge(graph : DiGraph<?, ??>, from : int, to : int, data : ??, weight : int) -> DiGraph<?, ??>;

	//////////////////////////
	// getters
	//////////////////////////
	getGNode(graph : DiGraph<?, ??>, id : int) -> GNode<?>;

	getGEdge(graph : DiGraph<?, ??>, from : int, to : int) -> GEdge<??>;

	getOutGEdges(graph : DiGraph<?, ??>, from : int) -> [GEdge<??>];

	getSuccessors(graph : DiGraph<?, ??>, id : int) -> [int];

	getInDegree(graph : DiGraph<?, ??>, id : int) -> int;

	getOutDegree(graph : DiGraph<?, ??>, id : int) -> int;

	numberOfGNodes(graph : DiGraph<?, ??>) -> int;

	numberOfGEdges(graph : DiGraph<?, ??>) -> int;

	// note, this will work very slow
	getInputGEdges(graph : DiGraph<?, ??>, id : int) -> [GEdge<??>];

	existsGNode(graph : DiGraph<?, ??>, id : int) -> bool;

	//////////////////////////
	// DAG algorithms
	//////////////////////////
	// returns mapping node id -> order
	topSortDiGraph(graph : DiGraph<?, ??>, visibleEdges : Set<GEdge<??>>) -> Tree<int, int>; // careful! this one will work only if this is DAG

	topSortDiGraphFromNode(graph : DiGraph<?, ??>, visibleEdges : Set<GEdge<??>>, start : GNode<?>) -> Tree<int, int>;
	
	//////////////////////////
	// search / traversal engines 
	//////////////////////////
	// deep first, parameters of fn are are: 
	// - accumulator
	// - current node
	// - previous node
	// - if current node was already visited (we wont go deeper if current node is already visited)
	foldDiGraph(graph : DiGraph<?, ??>, init : ???, fn : (???, GNode<?>, Maybe<GNode<?>>, bool) -> ???) -> ???; 

	foldDiGraphFromNode(graph : DiGraph<?, ??>, node : GNode<?>, init : ???, fn : (???, GNode<?>, Maybe<GNode<?>>, Maybe<GEdge>, bool) -> Pair<???, bool>) -> ???;

	collectGNodes(graph : DiGraph<?, ??>, fn : (GNode<?>) -> bool) -> [GNode<?>];

	getGNodes(graph : DiGraph<?, ??>) -> [GNode<?>];

	getGEdges(graph : DiGraph<?, ??>) -> [GEdge<??>];

	// out degree of a leaf is zero
	getGLeaves(graph : DiGraph<?, ??>) -> [GNode<?>];

	getNonGLeaves(graph : DiGraph<?, ??>) -> [GNode<?>];

	collectReachableGNodes(graph : DiGraph<?, ??>) -> [GNode];

	findGNode(graph : DiGraph<?, ??>, needle : ?, eqFn : (?, ?) -> bool) -> Maybe<GNode<?>>;

	findGNodeCustom(graph : DiGraph<?, ??>, checkFn : (GNode<?>) -> bool) -> Maybe<GNode<?>>;

	//////////////////////////
	// complex modifications
	//////////////////////////
	appendDiGraph(g1 : DiGraph<?, ??>, g2 : DiGraph<?, ??>) -> Pair<DiGraph<?, ??>, (int) -> int>;

	appendDiGraphSafe(g1 : DiGraph<?, ??>, g2 : DiGraph<?, ??>, eqFn : (?, ?) -> bool) -> Pair<DiGraph<?, ??>, (int) -> int>;

	// Find out what nodes corresponds to in the original graph
	relateDiGraphs(from : DiGraph<?, ??>, to : DiGraph<?, ??>, eqFn : (?, ?) -> bool) -> Tree<int, [int]>;

	// TODO: Split into two: filter and reverse, and also avoid sinks parameter
	reverseDiGraph(graph : DiGraph<?, ??>, sinks : [int], fakeData : ?, except : [int]) -> DiGraph<?, ??>;

	//////////////////////////
	// copy graph
	//////////////////////////
	// root would be copied anyway
	filterDiGraph(graph : DiGraph<?, ??>, onlynodes : Set<int>, onlyedges : Set<Pair<int, int>>) -> DiGraph<?, ??>;

	filterDiGraph2(graph : DiGraph<?, ??>, onlynodes : Set<int>) -> DiGraph<?, ??>;

	// 
	mapDiGraph(graph : DiGraph<?, ??>, nodeFn : (GNode<?>) -> GNode<?>, edgeFn : (GEdge<??>) -> GEdge<???>) -> DiGraph<?, ???>;

	copyGraphWithoutEdges(graph : DiGraph<?, ??>) -> DiGraph<?, ??>;

	copyReachableGraph(graph : DiGraph<?, ??>) -> DiGraph<?, ??>;
	
	// Creates new graph that contains only nodes that are reachable from the root of the original graph by edges that fits criteria. 
	copyReachableBySomeEdgesGraph(graph : DiGraph<?, ??>, checkEdgeFn : (GEdge<??>) -> bool) -> DiGraph<?, ??>;
}

//////// constructor ///////////
createDiGraph(rootdata : ?, baddata : ?, badedgedata : ??) -> DiGraph<?, ??> {
	root = GNode(0, rootdata);

	createDiGraph2(root, baddata, badedgedata)
}

createDiGraph2(root : GNode, baddata : ?, badedgedata : ??) -> DiGraph<?, ??> {
	nodes = setTree(makeTree(), root.id, root);

	DiGraph(root, GNode(-1, baddata), GEdge(-1, -1, badedgedata, 0), nodes, makeTree(), 1, 0, root.id + 1, makeTree())
}


//////// add nodes ///////////
addNodeInternal(graph : DiGraph<?, ??>, node : GNode<?>) -> DiGraph {
	newNodes = setTree(graph.nodes, node.id, node);

	DiGraph(graph.root, graph.badnode, graph.badedge, newNodes, graph.outedges, graph.nodesNumber + 1, graph.edgesNumber, max(graph.nextNodeId, node.id + 1), graph.inDegree);
}

nextDigraphId(graph : DiGraph<?, ??>) -> int {
	graph.nextNodeId
}

addColoredNode(graph : DiGraph<?, ??>, data : ?) -> Pair<DiGraph<?, ??>, GNode<?>> {
	id = nextDigraphId(graph);

	node = GNode(id, data);

	Pair(addNodeInternal(graph, node), node)
}

addGNode(graph : DiGraph<?, ??>, data : ?) -> Pair<DiGraph<?, ??>, GNode<?>> {
	addColoredNode(graph, data)
}

addGNodeSafe(graph : DiGraph<?, ??>, data : ?, eqFn : (?, ?) -> bool) -> Pair<DiGraph<?, ??>, GNode<?>> {
	nodeM = findGNode(graph, data, eqFn);

	switch(nodeM) {
		Some(node): {
			Pair(graph, node)
		}
		None(): {
			addGNode(graph, data)
		}
	}
}

updateGNode(graph : DiGraph<?, ??>, id : int, newData : ?) -> Pair<DiGraph<?, ??>, GNode<?>> {
	node = getGNode(graph, id);

	newNode = GNode(node.id, newData);

	newNodes = setTree(graph.nodes, id, newNode);

	newGraph = DiGraph(graph.root, graph.badnode, graph.badedge, newNodes, graph.outedges, graph.nodesNumber, graph.edgesNumber, graph.nextNodeId, graph.inDegree);

	Pair(newGraph, newNode)
}

//////// add edges ///////////
addEdgeInternal(graph : DiGraph<?, ??>, edge : GEdge) -> Pair<DiGraph<?, ??>, Maybe<GEdge<??>>> {
	arcs = getOutGEdges(graph, edge.from);

	if (exists(arcs, \arc -> arc.to == edge.to)) {
		Pair(graph, None())
	} else {
		newEdges = setTree(graph.outedges, edge.from, arrayPush(arcs, edge));

		newGraph = DiGraph(graph.root, graph.badnode, graph.badedge, graph.nodes, newEdges, graph.nodesNumber, graph.edgesNumber + 1, graph.nextNodeId, incTreeValue(graph.inDegree, edge.to));		

		Pair(newGraph, Some(edge))
	}
}

addGEdge(graph : DiGraph<?, ??>, from : int, to : int, data : ??, weight : int) -> Pair<DiGraph<?, ??>, Maybe<GEdge<??>>> {
	assertId(graph, from);
	assertId(graph, to);

	if (from == to) {
		Pair(graph, None())
	} else {
		newArc = GEdge(from, to, data, weight);

		addEdgeInternal(graph, newArc)
	}	
}

addGEdgeUnsafe(graph : DiGraph<?, ??>, from : int, to : int, data : ??, weight : int) -> Pair<DiGraph<?, ??>, GEdge<??>> {
	assertId(graph, to);

	arc = GEdge(from, to, data, weight);

	arcs = getOutGEdges(graph, from);

	newEdges = setTree(graph.outedges, from, arrayPush(arcs, arc));

	newGraph = DiGraph(graph.root, graph.badnode, graph.badedge, graph.nodes, newEdges, graph.nodesNumber, graph.edgesNumber + 1, graph.nextNodeId, incTreeValue(graph.inDegree, to));

	Pair(newGraph, arc)
}

updateGEdge(graph : DiGraph<?, ??>, from : int, to : int, data : ??, weight : int) -> DiGraph<?, ??> {
	arcs : [GEdge<??>] = getOutGEdges(graph, from);

	newArcs : [GEdge<??>] = map(arcs, \arc : GEdge -> {
		if (arc.to == to) {
			GEdge(arc.from, arc.to, data, weight)
		} else {
			arc
		}
	});

	newEdges = setTree(graph.outedges, from, newArcs);

	DiGraph(graph.root, graph.badnode, graph.badedge, graph.nodes, newEdges, graph.nodesNumber, graph.edgesNumber, graph.nextNodeId, graph.inDegree);
}

//////// getters ///////////
getGNode(graph : DiGraph<?, ??>, id : int) -> GNode<?> {
	lookupTreeDef(graph.nodes, id, graph.badnode);
}

assertId(graph : DiGraph<?, ??>, id : int) {
	getGNode(graph, id) |> ignore; // check if node exists
}

getGEdge(graph : DiGraph<?, ??>, from : int, to : int) -> GEdge<??> {
	arcs = getOutGEdges(graph, from);

	edgeM = find(arcs, \arc -> arc.to == to);

	either(edgeM, graph.badedge)
}

getOutGEdges(graph : DiGraph<?, ??>, from : int) -> [GEdge<??>] {
	assertId(graph, from);

	lookupTreeDef(graph.outedges, from, []);
}

getSuccessors(graph : DiGraph<?, ??>, id : int) -> [int] {
	map(getOutGEdges(graph, id), \arc -> arc.to)
}

getInDegree(graph : DiGraph<?, ??>, id : int) -> int {
	lookupTreeDef(graph.inDegree, id, 0)
}

getOutDegree(graph : DiGraph<?, ??>, id : int) -> int {
	getOutGEdges(graph, id) |> length
}

numberOfGNodes(graph : DiGraph<?, ??>) -> int {
	graph.nodesNumber
}
	
numberOfGEdges(graph : DiGraph<?, ??>) -> int {
	graph.edgesNumber
}

getInputGEdges(graph : DiGraph<?, ??>, to : int) -> [GEdge<??>] {
	foldTree(graph.outedges, [], \from, arcs, acc -> {
		fold(arcs, acc, \acc2, arc -> {
			if (arc.to == to) {
				arrayPush(acc2, arc)
			} else {
				acc2
			}
		})
	})
}

existsGNode(graph : DiGraph<?, ??>, id : int) -> bool {
	lookupTree(graph.nodes, id) |> isSome
}

//////// algorithms ///////////
topSortDiGraph(graph : DiGraph<?, ??>, visibleEdges : Set<GEdge<??>>) -> Tree<int, int> {
	topSortDiGraphFromNode(graph, visibleEdges, graph.root) 
}

topSortDiGraphFromNode(graph : DiGraph<?, ??>, visibleEdges : Set<GEdge<??>>, start : GNode<?>) -> Tree<int, int> {
	parents = foldTree(graph.outedges, setTree(makeTree(), start.id, 1), \from, arcs, acc -> {
		fold(arcs, acc, \acc2, arc -> {
			if (containsSet(visibleEdges, arc)) {
				times = lookupTreeDef(acc2, arc.to, 0);

				setTree(acc2, arc.to, times + 1)
			} else {
				acc2
			}
		})
	});

	//dumpTree("parents:", parents);
	
	numberNodes(graph, start, parents, makeTree(), visibleEdges).second
}

numberNodes(graph : DiGraph<?, ??>, node : GNode<?>, parents : Tree, numbers : Tree, visibleEdges : Set<GEdge>) -> Pair<Tree, Tree<int, int>> {
	eitherFn(lookupTree(parents, node.id),
		\num -> {
			if (num == 0) {
				assert(false, "parents map was builded wrong");
				Pair(parents, numbers)
			} else if (num == 1) {
				numbers2 = setTree(numbers, node.id, sizeTree(numbers));

				arcs = getOutGEdges(graph, node.id);

				fold(arcs, Pair(parents, numbers2), \pnp : Pair<Tree, Tree>, arc -> {
					if (containsSet(visibleEdges, arc)) {
						toN = getGNode(graph, arc.to);

						numberNodes(graph, toN, pnp.first, pnp.second, visibleEdges)
					} else {
						pnp
					}
				})
			} else {	
				parents2 = setTree(parents, node.id, num - 1);
				Pair(parents2, numbers)
			}


		},
		\-> { 			
			assert(false, "parents map was builded wrong");
			Pair(parents, numbers)
		}
	)
}

//////// search engines ///////////
// fn parameters: accamulator, node, if it was visited
foldDiGraph(graph : DiGraph<?, ??>, init : ???, fn : (???, GNode<?>, Maybe<GNode<?>>, bool) -> ???) -> ??? {
	foldDiGraph2(graph, graph.root, None(), None(), init, makeTree(), \a, c, pM, eM, v -> Pair(fn(a, c, pM, v), true)).first
}

foldDiGraphFromNode(graph : DiGraph<?, ??>, node : GNode<?>, init : ???, fn : (???, GNode<?>, Maybe<GNode<?>>, Maybe<GEdge>, bool) -> Pair<???, bool>) -> ??? {
	foldDiGraph2(graph, node, None(), None(), init, makeTree(), fn).first
}

foldDiGraph2(graph : DiGraph<?, ??>, node : GNode<?>, prev : Maybe<GNode<?>>, edge : Maybe<GEdge>, init : ???, visited : Tree<int, bool>, fn : (???, GNode<?>, Maybe<GNode<?>>, Maybe<GEdge>, bool) -> Pair<???, bool>) -> Pair<???, Tree> {
	if (lookupTree(visited, node.id) == None()) {
		acc = fn(init, node, prev, edge, false);

		visited2 = setTree(visited, node.id, true);

		if (acc.second) {
			arcs = getOutGEdges(graph, node.id);

			fold(arcs, Pair(acc.first, visited2), \avp : Pair<???, Tree<int, bool>>, arc : GEdge -> {
				toN = getGNode(graph, arc.to);

				foldDiGraph2(graph, toN, Some(node), Some(arc), avp.first, avp.second, fn)		
			})
		} else {
			Pair(acc.first, visited2)
		}
	} else {
		acc = fn(init, node, prev, edge, true);

		Pair(acc.first, visited)
	}
}

collectGNodes(graph : DiGraph<?, ??>, fn : (GNode<?>) -> bool) -> [GNode<?>] {
	foldTree(graph.nodes, [], \id, node, acc -> {
		if (fn(node)) {
			arrayPush(acc, node)
		} else {
			acc
		}
	})
}

getGNodes(graph : DiGraph<?, ??>) -> [GNode<?>] {
	collectGNodes(graph, \node -> true)
}

getGEdges(graph : DiGraph<?, ??>) -> [GEdge<??>] {
	foldTree(graph.outedges, [], \__, arcs, acc -> concat(acc, arcs))
}

getGLeaves(graph : DiGraph<?, ??>) -> [GNode<?>] {
	collectGNodes(graph, \node -> { getOutGEdges(graph, node.id) == [] })
}

getNonGLeaves(graph : DiGraph<?, ??>) -> [GNode<?>] {
	collectGNodes(graph, \node -> { getOutGEdges(graph, node.id) != [] })
}

collectReachableGNodes(graph : DiGraph<?, ??>) -> [GNode] {
	foldDiGraph(graph, [], \acc, node, __, visited -> {
		if (visited) {
			acc
		} else {
			arrayPush(acc, node)
		}
	})
}

collectReachableGEdges(graph : DiGraph<?, ??>) -> [GEdge] {
	foldDiGraphFromNode(graph, graph.root, [], \acc, node, prevM, edgeM, visited -> { 
		acc2 = 
			switch(edgeM) {
				Some(edge): arrayPush(acc, edge);
				None(): acc;
			};

		Pair(acc2, true) 
	})
}

findGNode(graph : DiGraph<?, ??>, needle : ?, eqFn : (?, ?) -> bool) -> Maybe<GNode<?>> {
	foldTree(graph.nodes, None(), \k, v, acc -> {
		if (eqFn(v.data, needle)) {
			Some(v)
		} else {
			acc
		}
	})
}

findGNodeCustom(graph : DiGraph<?, ??>, checkFn : (GNode<?>) -> bool) -> Maybe<GNode<?>> {
	foldTree(graph.nodes, None(), \k, node, acc -> {	
		if (isNone(acc) && checkFn(node)) {
			Some(node)
		} else {
			acc
		}
	})
}

//////// complex modifications ///////////
appendDiGraph(g1 : DiGraph<?, ??>, g2 : DiGraph<?, ??>) -> Pair<DiGraph<?, ??>, (int) -> int> {
	appendDiGraphCustom(g1, g2, addGNode)
}

appendDiGraphSafe(g1 : DiGraph<?, ??>, g2 : DiGraph<?, ??>, eqFn : (?, ?) -> bool) -> Pair<DiGraph<?, ??>, (int) -> int> {
	appendDiGraphCustom(g1, g2, \graph, data -> addGNodeSafe(graph, data, eqFn))
}

appendDiGraphCustom(g1 : DiGraph<?, ??>, g2 : DiGraph<?, ??>, addNodeFn : (DiGraph<?, ??>, ?) -> Pair<DiGraph<?, ??>, GNode<?>>) -> Pair<DiGraph<?, ??>, (int) -> int> {
	gWithNodes = foldTree(g2.nodes, Pair(g1, makeTree()), \id, node, acc -> {
		gnp = addNodeFn(acc.first, node.data);

		Pair(gnp.first, setTree(acc.second, id, gnp.second.id))
	});
	
	old2new = \id -> lookupTreeDef(gWithNodes.second, id, -1);

	Pair(
		foldTree(g2.outedges, gWithNodes.first, \__, arcs, acc -> {
			fold(arcs, acc, \acc2, arc -> {
				addGEdge(acc2, arc.from |> old2new, arc.to |> old2new, arc.data, arc.weight).first
			})			
		}),
		old2new
	)
}

relateDiGraphs(from : DiGraph<?, ??>, to : DiGraph<?, ??>, eqFn : (?, ?) -> bool) -> Tree<int, [int]> {
	fromNodes = getGNodes(from);

	fold(fromNodes, makeTree(), \acc, fromNode : GNode<?>-> {
		toNodes = collectGNodes(to, \n -> eqFn(fromNode.data, n.data));

		if (toNodes == []) {
			acc
		} else {
			setTree(acc, fromNode.id, map(toNodes, \n -> n.id))
		}
	})
}

reverseDiGraph(graph : DiGraph<?, ??>, sinks : [int], fakeData : ?, except : [int]) -> DiGraph<?, ??> {
	unpair(addGNode(graph, fakeData), \graphWithFakeNode, fakeNode -> {
		graph2 = 
			fold(sinks, graphWithFakeNode, \accGraph, sink -> {
				addGEdge(accGraph, sink, fakeNode.id, graph.badedge.data, 0).first
			});

		newGraph = DiGraph(fakeNode, graph2.badnode, graph2.badedge, graph2.nodes, makeTree(), graph2.nodesNumber, 0, graph.nextNodeId, makeTree());

		straightEdges = getGEdges(graph2);

		fold(straightEdges, newGraph, \accGraph, straightEdge -> {
			if (contains(except, straightEdge.to) || contains(except, straightEdge.from)) {
				accGraph
			} else {
				addGEdge(accGraph, straightEdge.to, straightEdge.from, straightEdge.data, straightEdge.weight).first	
			}
		})
	})
}

//////////////////////////
// copy graph
//////////////////////////
filterDiGraph(graph : DiGraph<?, ??>, onlynodes : Set<int>, onlyedges : Set<Pair<int, int>>) -> DiGraph<?, ??> {
	graphWithRoot = createDiGraph2(graph.root, graph.badnode.data, graph.badedge.data);

	graphWithNodes = 
		fold(getGNodes(graph), graphWithRoot, \acc, node -> {
			if (node == graph.root) {
				acc
			} else if (containsSet(onlynodes, node.id)) {
				addNodeInternal(acc, node)
			} else {
				acc
			}
		});

	graphWithEdges =
		fold(getGEdges(graph), graphWithNodes, \acc, edge -> {
			if (containsSet(onlyedges, Pair(edge.from, edge.to))) {
				addEdgeInternal(acc, edge).first
			} else {
				acc
			}
		});

	graphWithEdges
}

filterDiGraph2(graph : DiGraph<?, ??>, onlynodes : Set<int>) -> DiGraph<?, ??> {
	graphWithRoot = createDiGraph2(graph.root, graph.badnode.data, graph.badedge.data);

	graphWithNodes = 
		fold(getGNodes(graph), graphWithRoot, \acc, node -> {
			if (node == graph.root) {
				acc
			} else if (containsSet(onlynodes, node.id)) {
				addNodeInternal(acc, node)
			} else {
				acc
			}
		});

	graphWithEdges =
		fold(getGEdges(graph), graphWithNodes, \acc, edge -> {
			if (containsSet(onlynodes, edge.from) && containsSet(onlynodes, edge.to)) {
				addEdgeInternal(acc, edge).first
			} else {
				acc
			}
		});

	graphWithEdges
}

mapDiGraph(graph : DiGraph<?, ??>, nodeFn : (GNode<?>) -> GNode<?>, edgeFn : (GEdge<??>) -> GEdge<???>) -> DiGraph<?, ???> {
	root = nodeFn(graph.root);
	badnode = nodeFn(graph.badnode);
	badedge = edgeFn(graph.badedge);

	graphWithRoot = createDiGraph2(root, badnode.data, badedge.data);

	graphWithNodes = 
		fold(getGNodes(graph), graphWithRoot, \acc, node -> {
			if (node == graph.root) {
				acc
			} else {
				addNodeInternal(acc, nodeFn(node))
			}
		});

	graphWithEdges =
		fold(getGEdges(graph), graphWithNodes, \acc, edge -> {
			addEdgeInternal(acc, edgeFn(edge)).first
		});

	graphWithEdges
}

copyGraphWithoutEdges(graph : DiGraph<?, ??>) -> DiGraph<?, ??> {
	DiGraph(graph.root, graph.badnode, graph.badedge, graph.nodes, makeTree(), graph.nodesNumber, 0, graph.nextNodeId, makeTree())
}

copyReachableGraph(graph : DiGraph<?, ??>) -> DiGraph<?, ??> {
	reachableNodes = collectReachableGNodes(graph);
	reachableEdges = collectReachableGEdges(graph);

	filterDiGraph(
		graph, 
		buildSet(map(reachableNodes, \n -> n.id)), 
		buildSet(map(reachableEdges, \e -> Pair(e.from, e.to)))
	)
}

// Creates new graph that contains only nodes that are reachable from the root of the original graph by edges that fits criteria. 
copyReachableBySomeEdgesGraph(graph : DiGraph<?, ??>, checkEdgeFn : (GEdge<??>) -> bool) -> DiGraph<?, ??> {
	nodesAndEdges : Pair<[GNode], [GEdge]> = 
		foldDiGraphFromNode(graph, graph.root, Pair([], []), \acc, node, prevM, edgeM, visited -> {
			unpair(acc, \nodes, edges -> {
				switch(edgeM) {
					Some(edge): {
						if (checkEdgeFn(edge)) {
							nodes2 = if (visited) nodes else arrayPush(nodes, node);
							edges2 = arrayPush(edges, edge);

							acc2 = Pair(nodes2, edges2);

							Pair(acc2, true)
						} else {
							Pair(acc, false)
						}
					}
					None(): {
						nodes2 = if (visited) nodes else arrayPush(nodes, node);
						edges2 = edges;

						acc2 = Pair(nodes2, edges2);

						Pair(acc2, true)
					}
				}
			})
		});

	filterDiGraph(
		graph, 
		buildSet(map(firstOfPair(nodesAndEdges), \n : GNode -> n.id)), 
		buildSet(map(secondOfPair(nodesAndEdges), \e : GEdge -> Pair(e.from, e.to)))
	)
}
