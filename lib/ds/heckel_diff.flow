import ds/tree;
import math/math;

export {
	heckelDiff(o : [?], n : [?]) -> [HeckelOperation<?>];

		HeckelOperation<?> ::= HeckelInsert<?>, HeckelMove, HeckelDelete;
			HeckelInsert(index : int, value : ?);
			HeckelMove(from : int, to : int);
			HeckelDelete(index : int);
}

HeckelRef(
	mutable nc : int,
	mutable oc : int,
	mutable olno : [int]
);

HeckelValue(
	mutable value : ?,
	mutable reference : HeckelRef,
	mutable position : int
);

heckelDiff(o : [?], n : [?]) -> [HeckelOperation<?>] {
	if (length(o) == 0) {
		mapi(n, \i, nn -> HeckelInsert(i, nn));
	} else if (length(n) == 0) {
		mapi(o, \i, nn -> HeckelDelete(length(o) - i - 1));
	} else {
		table = ref makeTree();

		na = map(n, \nn -> {
			eitherFn(
				lookupTree(^table, nn),
				\v -> {
					v.nc ::= v.nc + 1;

					HeckelValue(
						nn,
						v,
						-1
					);
				},
				\ -> {
					v = HeckelRef(1, 0, []);
					table := setTree(^table, nn, v);

					HeckelValue(
						nn,
						v,
						-1
					);
				}
			);
		});

		oa = mapi(o, \j, nn -> {
			eitherFn(
				lookupTree(^table, nn),
				\v -> {
					v.oc ::= v.oc + 1;
					v.olno ::= arrayPush(v.olno, j);

					HeckelValue(
						nn,
						v,
						-1
					);
				},
				\ -> {
					v = HeckelRef(0, 1, [j]);
					table := setTree(^table, nn, v);

					HeckelValue(
						nn,
						v,
						-1
					);
				}
			);
		});

		iteri(na, \i, nn -> {
			if (nn.position < 0 && nn.reference.nc > 0 && nn.reference.oc > 0) {
				nn.position ::= nn.reference.olno[0];
				(oa[nn.reference.olno[0]]).position ::= i;

				(nn.reference).oc ::= nn.reference.oc - 1;
				(nn.reference).olno ::= tail((nn.reference).olno);
			}
		});

		oar = ref oa;
		ri = ref 0;

		concat(
			filtermap(oa, \ov -> {
				if (ov.position < 0) {
					i = ^ri;
					oar := removeIndex(^oar, i);
					fori(i, length(^oar) - 1, \j -> {
						ov2 = ^oar[j];
						if (ov2.position >= 0) (na[ov2.position]).position ::= ((na[ov2.position]).position - 1);
					});

					Some(HeckelDelete(i))
				} else {
					ri := ^ri + 1;

					None()
				}
			}),
			filtermapi(na, \i, nv -> {
				if (nv.position < 0) {
					Some(HeckelInsert(i, nv.value))
				} else {
					vv = ^oar[nv.position].value;
					oar := removeIndex(^oar, nv.position);
					fori(nv.position, length(^oar) - 1, \j -> {
						ov2 = ^oar[j];
						if (ov2.position >= 0) (na[ov2.position]).position ::= ((na[ov2.position]).position - 1);
					});

					if (nv.value == vv) {
						if (nv.position == 0) {
							None();
						} else {
							Some(HeckelMove(nv.position + i, i));
						}
					} else {
						println("NOPE");
						if (nv.position == 0) {
							None();
						} else {
							Some(HeckelMove(nv.position + i, i));
						}
					}
				}
			})
		);
	}
}

// main() {
// 	a1 = generate(0, 10000, \__ -> floor(random() * 500.0));
// 	a2 = generate(0, 10000, \__ -> floor(random() * 500.0));

// 	dd = heckelDiff(a1, a2);

// 	a3 = fold(dd, a1, \acc, op -> {
// 		switch (op) {
// 			HeckelInsert(i, v): {
// 				insertArray(acc, i, v);
// 			}
// 			HeckelMove(f, t): {
// 				moveElement(acc, f, t);
// 			}
// 			HeckelDelete(i): {
// 				removeIndex(acc, i);
// 			}
// 		}
// 	});

// 	assertEquals(a2, a3);

// 	println(a3);
// }