// Â© Copyright 2011 Area9 Technologies.

import string;

export {
	Trie(key : string, value : Maybe<?>, children : [Trie<?>]);
	makeTrie() -> Trie<?>;

	// Adds a word to the trie. Keep substrings longer than 1 character in each node to make a compact trie
	addTrie(trie : Trie<?>, key : string, value : ?) -> Trie<?>;

	// Adds a word to the trie. Only uses 1 character in each node, so not as efficient. Useful for dictionary-like algorithms
	addTrie1(trie : Trie<?>, key : string, value : ?) -> Trie<?>;

	addTrieCustom(trie : Trie<?>, key : string, value : ?, resolveCollision : (key : string, old : ?, new : ?) -> ?) -> Trie<?>;
	addTrie1Custom(trie : Trie<?>, key : string, value : ?, resolveCollision : (key : string, old : ?, new : ?) -> ?) -> Trie<?>;

	mapTrie(trie: Trie<?>, f: (key: string, value: ?) -> ??) -> Trie<??>;
	foldTrie(trie: Trie<?>, acc: ??, f: (key: string, value: ?, acc: ??) -> ??) -> ??;
	foldTrie1(trie: Trie<?>, acc: ??, skipEmpty : bool, f: (key: string, value: Maybe<?>, acc: ??, parents : List<Trie<?>>) -> ??) -> ??;
	filterTrie(trie: Trie<?>, f: (key: string, value: ?) -> bool) -> Trie<?>;

	mergeTrie(t1 : Trie<?>, t2 : Trie<?>) -> Trie<?>;
	mergeTrie1(t1 : Trie<?>, t2 : Trie<?>) -> Trie<?>;

	mergeTrieCustom(t1 : Trie<?>, t2 : Trie<?>, resolveCollision : (key : string, t1 : ?, t2 : ?) -> ?) -> Trie<?>;
	mergeTrie1Custom(t1 : Trie<?>, t2 : Trie<?>, resolveCollision : (key : string, t1 : ?, t2 : ?) -> ?) -> Trie<?>;

	// Create a trie with pre-defined key-value pairs
	pairs2trie(pairs : [Pair<string, ?>]) -> Trie<?>;

	// Lookup this key - does not work reliably with addTrie1!
	lookupTrie(trie : Trie<?>, key : string) -> Maybe<?>;
	lookupTrieDef(trie : Trie<?>, key : string, def : ?) -> ?;

	// returns a Trie under this prefix
	lookupTriePrefix(trie : Trie<?>, prefix : string) -> Trie<?>;

	getTrieValues(trie : Trie<?>) -> [?];

	// Construct an iterator for this trie. The iterator is mutable
	charwiseLookupTrie(trie : Trie<?>) -> TrieCharwiseSearchProcess;

	// Call update with a single character to iterate the trie in that direction
	TrieCharwiseSearchProcess : (reset : () -> void, update : (string) -> TrieSearchResult);

	// Is the current position a prefix, and is it a key?
	// (I wonder why we do not place the value here)
	TrieSearchResult(isPrefix : bool, isKey : bool);
}

makeTrie() {
	Trie("", None(), []);
}

addTrieCustom(trie : Trie<?>, k1 : string, v1 : ?, resolveCollision : (key : string, old : ?, new : ?) -> ?) -> Trie<?> {
	k2 = trie.key;
	resolve = \k : string, old1 : Maybe<?>, new1 : ?  -> {
		Some(if (isNone(old1)) new1 else resolveCollision(k, either(old1, new1), new1));
	}

	if (k1 == k2) {
		Trie(k1, resolve(k1, trie.value, v1), trie.children);
	} else {
		l1 = strlen(k1);
		l2 = strlen(k2);
		prefixi = sharedPrefix(k1, k2);
		prefix = strLeft(k1, prefixi);
		if (prefixi < l2) {
			// Split
			suffix2 = substring(k2, prefixi, l2 - prefixi);
			trie2 = Trie(suffix2, trie.value, trie.children);
			if (prefixi == l1) {
				Trie(prefix, Some(v1), [trie2]);
			} else {
				suffix1 = substring(k1, prefixi, l1 - prefixi);
				trie1 = Trie(suffix1, Some(v1), []);
				if (suffix1 < suffix2) {
					Trie(prefix, None(), [trie1, trie2]);
				} else {
					Trie(prefix, None(), [trie2, trie1]);
				}
			}
		} else {
			// prefixi == l2
			// l1 > l2
			suffix1 = substring(k1, prefixi, l1 - prefixi);
			c = trie.children;
			cl = length(c);
			fc = getCharAt(suffix1, 0);
			// Find the place where we should go
			p = findTrieEntry(c, 0, cl, fc);
			if (p == cl) {
				// At the end
				Trie(k2, trie.value, arrayPush(c, Trie(suffix1, Some(v1), [])));
			} else {
				r = c[p];
				if (fc < strLeft(r.key, 1)) {
					// Before this point
					head = subrange(c, 0, p);
					tail0 = subrange(c, p, cl - p);
					result = concat(arrayPush(head, Trie(suffix1, Some(v1), [])), tail0);
					Trie(k2, trie.value, result);
				} else {
					// Replace
					r2 = addTrie(r, suffix1, v1);
					Trie(k2, trie.value, replace(c, p, r2));
				}
			}
		}
	}
}

addTrie1Custom(trie : Trie<?>, key : string, value : ?, resolveCollision : (key : string, old : ?, new : ?) -> ?) -> Trie<?> {
	resolve = \k : string, old1 : Maybe<?>, new1 : ? -> {
		Some(if (isNone(old1)) new1 else resolveCollision(k, either(old1, new1), new1));
	}
	char = getCharAt(key, 0);
	rest = strRight(key, 1);

	c = trie.children;
	cl = length(c);
	// Find the place where we should go
	p = findTrieEntry(c, 0, cl, char);
	if (p == cl) {
		// At the end
		t = makeTrie1(key, Some(value));
		Trie(trie.key, trie.value, arrayPush(c, t));
	} else {
		r = c[p];
		if (char < getCharAt(r.key, 0)) {
			// Before this point
			head = subrange(c, 0, p);
			tail0 = subrange(c, p, cl - p);
			result = concat(arrayPush(head, makeTrie1(key, Some(value))), tail0);
			Trie(trie.key, trie.value, result);
		} else {
			r2 = if (rest == "") {
				// Final bit, just update the bit
				Trie(r.key, resolve(r.key, r.value, value), r.children);
			} else {
				addTrie1(r, rest, value);
			}
			Trie(trie.key, trie.value, replace(c, p, r2));
		}
	}
}


addTrie(trie, key, value) {
	addTrieCustom(trie, key, value, \__, __, new -> new);
}

addTrie1(trie : Trie<?>, key : string, value : ?) -> Trie<?> {
	addTrie1Custom(trie, key, value, \__, __, new -> new);
}

makeTrie1(key : string, value : Maybe<?>) -> Trie<?> {
	if (key == "") Trie("", value, [])
	else {
		char = getCharAt(key, 0);
		rest = strRight(key, 1);
		if (rest == "") {
			Trie(char, value, []);
		} else {
			tail0 = makeTrie1(rest, value);
			Trie(char, None(), [tail0])
		}
	}
}

lookupTrie(trie, k1) {
	k2 = trie.key;
	if (k1 == k2) {
		trie.value;
	} else {
		l1 = strlen(k1);
		l2 = strlen(k2);
		prefixi = sharedPrefix(k1, k2);
		if (prefixi < l2) {
			// No match
			None();
 		} else {
			suffix1 = substring(k1, prefixi, l1 - prefixi);
			c = trie.children;
			cl = length(c);
			fc = getCharAt(suffix1, 0);
			// Find the place where we should go
			p = findTrieEntry(c, 0, cl, fc);
			if (p == cl) {
				None();
			} else {
				r = c[p];
				lookupTrie(r, suffix1);
			}
		}
	}
}

lookupTrieDef(trie : Trie<?>, key : string, def : ?) -> ? {
	switch (lookupTrie(trie, key)) {
		None() : def;
		Some(v) : v;
	}
}

lookupTriePrefix(trie, prefix) {
	if (prefix == "") {
		trie
	} else {
		switch (find(trie.children, \ch -> startsWith(prefix, ch.key))) {
			None(): makeTrie();
			Some(chTrie): lookupTriePrefix(chTrie, strRight(prefix, strlen(chTrie.key)))
		}
	}
}

getTrieValues(trie : Trie<?>) -> [?] {
	fold(trie.children, eitherMap(trie.value, v2a, []), \acc : [?], ch -> {
		concat(acc, getTrieValues(ch))
	})
}

charwiseLookupTrie(initialTrie : Trie<?>) -> TrieCharwiseSearchProcess {
	//state
	trie : ref Trie<?> = ref makeTrie();
	key = ref "";
	kl = ref 0;
	isValuedNode = ref false;

	ss = ref "";
	ssl = ref 0;

	isPrefix = ref true;

	updateTrie = \newTrie : Trie<?> -> {
		trie := newTrie;
		key := ^trie.key;
		kl := strlen(^key);
		isValuedNode := isSome(^trie.value);
	}

	initState = \ -> {
		updateTrie(initialTrie);
		ss := "";
		ssl := 0;
		isPrefix := true;
	}

	initState();

	doLookup = \c -> {
		assert(strlen(c) == 1, "charwiseLookupTrie should get string of one char");
		if (^isPrefix) {
			if (^ssl == ^kl) {
				//Its time to choose one of children to continue
				ss := c;
				ssl := 1;
				ch = ^trie.children;
				cl = length(ch);
				// Find the place where we should go
				p = findTrieEntry(ch, 0, cl, c);
				if (p == cl) {
					// There is no child that starts with c
					isPrefix := false;
					TrieSearchResult(false, false);
				} else {
					// Exists child that starts with c
					updateTrie(ch[p]);
					isPrefix := getCharAt(^key, 0) == c;
					TrieSearchResult(^isPrefix, ^isPrefix && ^kl == 1 && ^isValuedNode);
				}
			} else {
				// We continue processing of current node
				if (getCharAt(^key, ^ssl) == c) {
					ss := ^ss + c;
					ssl := ^ssl + 1;
					TrieSearchResult(true, ^kl == ^ssl && ^isValuedNode);
				} else {
					isPrefix := false;
					TrieSearchResult(false, false);
				}
			}

		} else {
			TrieSearchResult(false, false)
		}
	}
	TrieCharwiseSearchProcess(initState, doLookup);
}

sharedPrefix(s1 : string, s2 : string) -> int {
	l1 = strlen(s1);
	l2 = strlen(s2);
	minl = min(l1, l2);
	countUntil(0, minl, \i -> {
		getCharAt(s1, i) != getCharAt(s2, i);
	})
}

// Do a binary search for the partition point
findTrieEntry(c : [Trie<?>], low : int, high : int, fc : string) -> int {
	if (low == high) low
	else {
		m = (high + low) / 2;
		mc = getCharAt((c[m]).key, 0);
		if (mc == fc) {
			m
		} else if (mc > fc) {
			findTrieEntry(c, low, m, fc);
		} else {
			findTrieEntry(c, m + 1, high, fc);
		}
	};
}

mapTrie(trie: Trie<?>, f: (key: string, value: ?) -> ??) -> Trie<??> {
	v = switch(trie.value) {
		None() : None();
		Some(v) : Some(f(trie.key, v));
	}
	Trie(trie.key, v, map(trie.children, \c -> mapTrie(c, f)));
}

foldTrie(trie: Trie<?>, acc: ??, f: (key: string, value: ?, acc: ??) -> ??) -> ?? {
	acc0 = switch(trie.value) {
		None() : acc;
		Some(v) : f(trie.key, v, acc);
	}
	fold(trie.children, acc0, \acc1, trie1 -> foldTrie(trie1, acc1, f));
}

doFoldTrie1(trie: Trie<?>, acc: ??, skipEmpty : bool, parents : List<Trie<?>>, f: (key: string, value: Maybe<?>, acc: ??, parents : List<Trie<?>>) -> ??) -> ?? {
	parents1 = Cons(trie, parents);
	acc0 = if (skipEmpty) switch(trie.value) {None() : acc; Some(v) : f(trie.key, trie.value, acc, parents1);}
	else f(trie.key, trie.value, acc, parents1);
	fold(trie.children, acc0, \acc1, trie1 -> doFoldTrie1(trie1, acc1, skipEmpty, parents1, f));
}

foldTrie1(trie: Trie<?>, acc: ??, skipEmpty : bool, f: (key: string, value: Maybe<?>, acc: ??, parents : List<Trie<?>>) -> ??) -> ?? {
	doFoldTrie1(trie, acc, skipEmpty, makeList(), f);
}

filterTrie(trie: Trie<?>, f: (key: string, value: ?) -> bool) -> Trie<?> {
	ok = switch(trie.value) {
		None() : false;
		Some(v) : f(trie.key, v);
	}
	children = filter(map(trie.children, \c -> filterTrie(c, f)), \t -> t.children == [] && isNone(t.value));
	if (ok || children != []) Trie(trie.key, if (ok) trie.value else None(), children) else makeTrie();
}

mergeTrie(t1 : Trie<?>, t2 : Trie<?>) -> Trie<?> {
	foldTrie(t2, t1, \k, v, acc -> addTrie(acc, k, v));
}

mergeTrie1(t1 : Trie<?>, t2 : Trie<?>) -> Trie<?> {
	foldTrie(t2, t1, \k, v, acc -> addTrie1(acc, k, v));
}

mergeTrieCustom(t1 : Trie<?>, t2 : Trie<?>, resolveCollision : (key : string, t1 : ?, t2 : ?) -> ?) -> Trie<?> {
	foldTrie(t2, t1, \k, v, acc -> addTrieCustom(acc, k, v, resolveCollision));
}

mergeTrie1Custom(t1 : Trie<?>, t2 : Trie<?>, resolveCollision : (key : string, t1 : ?, t2 : ?) -> ?) -> Trie<?> {
	foldTrie(t2, t1, \k, v, acc -> addTrie1Custom(acc, k, v, resolveCollision));
}

pairs2trie(pairs : [Pair<string, ?>]) -> Trie<?> {
	fold(pairs, makeTrie(), \acc, p -> addTrie(acc, p.first, p.second));
}

/*
printTrie(t : Trie) -> void {
	indentStep = "\t";
	print : ref (string, Trie) -> void = ref \__, __ -> {};
	print := \indent, t2 : Trie -> {
		println(indent + toString(t2.key) + eitherMap(t2.value, \v -> " : " + toString(v), ""));
		iter(t2.children, \ch -> ^print(indent + indentStep, ch))
	}
	println("-- Trie --");
	if (t != makeTrie()) ^print("", t)
	else println("Empty trie");
	println("-- Trie end --");
}

main() {
	println("[ Add to Trie]");
	addFn = addTrie1;
	t0 = makeTrie();
	t1 = addFn(t0, "Thed", 0);
	t2 = addFn(t1, "Thee", 1);
	t3 = addFn(t2, "Then", 2);
	t4 = addFn(t3, "Thea", 3);
	t5 = addFn(t4, "Thd", 4);
	t6 = addFn(t5, "The", 5);
	printTrie(t6);

	println("\n[ Prefix lookup ]");
	prefixes = ["Th", "The", "Thee", "Theg"];
	iter(prefixes, \p -> {
		pt = lookupTriePrefix(t6, p);
		println("\nPrefix: " + p);
		printTrie(pt);
		println("Values: " + toString(getTrieValues(pt)));
	});

	println("\n[ Key lookup ]");
	println(lookupTrie(t4, "Thez"));

	println("\n[ Search ]");
	search = charwiseLookupTrie(t6);
	search.update("Q") |> println;
	search.reset();
	search.update("T") |> println;
	search.update("h") |> println;
	search.update("e") |> println;
	search.update("n") |> println;
	search.update("{") |> println;
	quit(0)
}
*/

