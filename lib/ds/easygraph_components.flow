import ds/easygraph;

export {
	// Returns a list of subgraphs, where each subgraph is a connected component
	splitGraphComponents(graph : EasyGraph<?, ??>) -> [EasyGraph<?, ??>];
}

// Returns a list of subgraphs, where each subgraph is a connected component
// Returns a list of subgraphs, where each subgraph is a connected component
splitGraphComponents(graph : EasyGraph<?, ??>) -> [EasyGraph<?, ??>] {
    // Get all nodes
    allNodes = getEGNodes(graph);
    
    if (length(allNodes) == 0) {
        []
    } else {
        // Keep track of which nodes we've assigned to components
        assignedNodes = ref makeSet();
        components = ref [];
        
        // For each unassigned node, find its component
        iter(allNodes, \node -> {
            if (!containsSet(^assignedNodes, node.id)) {
                // Find all nodes reachable in either direction
                reachableNodes = ref makeSet();
                
                // First do forward search
                deepFirstSearchInEasyGraph(
                    graph,
                    node.id,
                    makeSet(),
                    \acc, curr, __, __ -> {
                        // Add current node to reachable set
                        reachableNodes := insertSet(^reachableNodes, curr);
                        Pair(acc, true)
                    },
                    \acc, __, __ -> acc
                );
                
                // Then do backward search from all found nodes
                deepFirstSearchInEasyGraphBackward(
                    graph,
                    node.id,
                    makeSet(),
                    \acc, curr, __, __ -> {
                        // Add current node to reachable set
                        reachableNodes := insertSet(^reachableNodes, curr);
                        Pair(acc, true)
                    },
                    \acc, __, __ -> acc
                );
                
                // Build a subgraph containing exactly these nodes and their edges
                nodeSubset = filterTree(graph.nodes, \id, __ -> containsSet(^reachableNodes, id));
                
                edgeSubset = foldTree(graph.edges, makeTree(), \from, edges, acc -> {
                    if (containsSet(^reachableNodes, from)) {
                        // Keep only edges to reachable nodes
                        filteredEdges = filter(edges, \edge -> containsSet(^reachableNodes, edge.to));
                        if (length(filteredEdges) > 0) {
                            setTree(acc, from, filteredEdges)
                        } else acc
                    } else acc
                });
                
                // Count edges
                edgeCount = foldTree(edgeSubset, 0, \__, edges, acc -> acc + length(edges));
                
                // Create subgraph
                subgraph = EasyGraph(
                    nodeSubset,
                    edgeSubset,
                    edgeCount
                );
                
                // Add to results if non-empty
                if (sizeTree(nodeSubset) > 0) {
                    components := arrayPush(^components, subgraph);
                }
                
                // Mark these nodes as assigned
                assignedNodes := mergeSets(^assignedNodes, ^reachableNodes);
            }
        });
        
        ^components
    }
}

/*
main() {
	// Create a complex test graph with multiple components:
	//
	// Component 1:		Component 2:
	//	  A					X
	//  /   \			  /   \
	// B	 C			 Y	   Z
	//  \  /  \			  \   /
	//   D	   E		    W
	//	  \  /
	//	    F

	graph = makeEasyGraph();
	
	// Add nodes
	nodes = ["A", "B", "C", "D", "E", "F", "X", "Y", "Z", "W"];
	graph1 = foldi(nodes, graph, \i, acc, name -> {
		addEGNode(acc, GNode(i + 1, name))
	});

	// Add edges
	edges = [Pair(1, 2), Pair(1, 3), Pair(2, 4), Pair(3, 4), Pair(3, 5), Pair(4, 6), Pair(5, 6), Pair(7, 8), Pair(7, 9), Pair(8, 10), Pair(9, 10)];
	graph2 = fold(edges, graph1, \acc, edge : Pair<int, int> -> {
		addEGEdge(acc, GEdge(edge.first, edge.second, nodes[edge.first - 1] + " -> " + nodes[edge.second - 1], 1))
	});

	components = splitGraphComponents(graph2);

	// Validate results
	println("Original graph:");
	printGraph(graph2);
	
	println("\nComponents:");
	iteri(components, \i, component -> {
		println("Component " + i2s(i) + ":");
		printGraph(component);
	});
	quit(0);
}

printGraph(graph : EasyGraph<string, string>) {
	nodes = getEGNodes(graph);
	edges = getEGEdges(graph);
	
	println("Nodes: " + strGlue(map(nodes, \n -> n.data), ", "));
	println("Edges:");
	iter(edges, \e -> {
		fromNode = getEGNode(graph, e.from, GNode(-1, "?"));
		toNode = getEGNode(graph, e.to, GNode(-1, "?"));
		println("  " + fromNode.data + " -> " + toNode.data + " (" + e.data + ", weight: " + i2s(e.weight) + ")");
	});
}
*/