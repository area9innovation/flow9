import ds/tree;
import string;

// Multiset implementation

export {
	MultiSet : (tree : Tree<?, int>);

	makeMultiSet() -> MultiSet<?>;
	makeMultiSet1(v : ?) -> MultiSet<?>;

	buildMultiSet(xs : [Pair<?, int>]) -> MultiSet<?>;  // O(n*log(n))

	// Modifiers.
	//-----------

	// Direct set operation: set multiplicity of an element explicitly. Caution: it must be > 0!
	setMultiSet(s : MultiSet<?>, value : ?, count: int) -> MultiSet<?>;

	// Insert element: if present, keep its multiplicity, otherwise set it as 1.
	insertMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?>;

	// Remove element completely. Effectively it is setting its multiplicity to 0.
	removeMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?>;

	// Increment value multiplicity by 1. If not exists, creates an entry.
	incMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?>;

	// Decrement value multiplicity by 1. If becomes 0, the element is removed.
	decMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?>;

	// Getters.
	//---------

	// Get the multiplicity of an element. If not present in the underlying tree, 0 is returned.
	getMultiSet(s : MultiSet<?>, value : ?) -> int;

	// Cheсks if multiplicity of a value is > 0.
	containsMultiSet(s : MultiSet<?>, value : ?) -> bool;

	// Cheсks if exists an element, satisfying fn, has multiplicity > 0.
	existsMultiSet(s : MultiSet<?>, fn : (?) -> bool) -> bool;  // O(n)

	// Sum multiplicity of all elements, satiafying fn.
	countMultiSet(s : MultiSet<?>, fn : (?) -> bool) -> int;  // O(n)

	// Number of elements with multiplicity > 0.
	sizeMultiSet(s : MultiSet<?>) -> int; // O(n)

	isEmptyMultiSet(s : MultiSet<?>) -> bool; // O(1)

	// Traversals.
	//------------

	foldMultiSet(s : MultiSet<?>, init : ??, fn : (??, ?, int) -> ??) -> ??;
	mapMultiSet(s : MultiSet<?>, fn : (?, int) -> Pair<??, int>) -> MultiSet<??>;
	iterMultiSet(s : MultiSet<?>, fn : (?, int) -> void) -> void;
	filterMultiSet(s : MultiSet<?>, fn : (?, int) -> bool) -> MultiSet<?>;

	multiSet2pairs(s : MultiSet<?>) -> [Pair<?, int>];
	multiSet2array(s : MultiSet<?>) -> [?];

	// Multiset operations.
	//--------------------

	// max(a[i], b[i])
	uniteMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?>;

	// a[i] + b[i]
	sumMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?>;

	// min(a[i], b[i])
	intersectMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?>;

	// a[i] - b[i]
	diffMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?>;

	// forall i: a[i] <= b[i]
	subMultiSets(smaller : MultiSet<?>, greater : MultiSet<?>) -> bool;

	// dump
	multiSet2string(s : MultiSet<?>) -> string;
	multiSet2stringExt(s : MultiSet<?>, fn : (?, int) -> string) -> string;

	// Since sets are based on trees, which might not be balanced identically, you can not use == directly on sets
	equalMultiSet(a : MultiSet<?>, b : MultiSet<?>) -> bool;
}

// constructors
makeMultiSet() -> MultiSet<?> {
	MultiSet(makeTree());
}

makeMultiSet1(v : ?) -> MultiSet<?> {
	MultiSet(makeTree1(v, 1));
}

buildMultiSet(xs : [Pair<?, int>]) -> MultiSet<?> {
	fold(xs, makeTree(), \acc, p -> setTree(acc, p.first, p.second)) |> MultiSet;
}

// modifiers

setMultiSet(s : MultiSet<?>, value : ?, count: int) -> MultiSet<?> {
	setTree(s.tree, value, count) |> MultiSet;
}

insertMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?> {
	m = lookupTreeDef(s.tree, value, 0);
	if (m > 0) s else {
		setTree(s.tree, value, 1) |> MultiSet;
	}
}

removeMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?> {
	m = lookupTreeDef(s.tree, value, 0);
	if (m <= 0) s else {
		removeFromTree(s.tree, value) |> MultiSet;
	}
}

incMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?> {
	setTree(s.tree, value, lookupTreeDef(s.tree, value, 0) + 1) |> MultiSet;
}

decMultiSet(s : MultiSet<?>, value : ?) -> MultiSet<?> {
	m = lookupTreeDef(s.tree, value, 0);
	if (m <= 1) {
		removeFromTree(s.tree, value) |> MultiSet;
	} else {
		setTree(s.tree, value, m - 1) |> MultiSet;
	}
}

// getters

getMultiSet(s : MultiSet<?>, value : ?) -> int {
	lookupTreeDef(s.tree, value, 0);
}

containsMultiSet(s : MultiSet<?>, value : ?) -> bool {
	lookupTreeDef(s.tree, value, 0) > 0;
}

existsMultiSet(s : MultiSet<?>, fn : (?) -> bool) -> bool {
	foldMultiSet(s, false, \acc, v, i -> acc || fn(v));
}

countMultiSet(s : MultiSet<?>, fn : (?) -> bool) -> int {
	foldMultiSet(s, 0, \acc, v, i -> if (fn(v)) acc + i else acc);
}

sizeMultiSet(s : MultiSet<?>) -> int {
	sizeTree(s.tree); // O(n)
}

isEmptyMultiSet(s : MultiSet<?>) -> bool {
	isEmptyTree(s.tree);
}

// traversals

foldMultiSet(s : MultiSet<?>, init : ??, fn : (??, ?, int) -> ??) -> ?? {
	foldTree(s.tree, init, \k, v, acc -> fn(acc, k, v));
}

mapMultiSet(s : MultiSet<?>, fn : (?, int) -> Pair<??, int>) -> MultiSet<??> {
	foldMultiSet(s, makeTree(), \acc, x, i -> {
		p = fn(x, i);
		setTree(acc, p.first, p.second);
	}) |> MultiSet;
}

iterMultiSet(s : MultiSet<?>, fn : (?, int) -> void) -> void {
	traverseInOrder(s.tree, \k, v -> fn(k, v));
}

filterMultiSet(s : MultiSet<?>, fn : (?, int) -> bool) -> MultiSet<?> {
	foldMultiSet(s, makeTree(), \acc, x, i -> {
		if (fn(x, i)) {
			setTree(acc, x, i)
		} else {
			acc
		}
	}) |> MultiSet;
}

multiSet2pairs(s : MultiSet<?>) -> [Pair<?, int>] {
	tree2pairs(s.tree);
}

multiSet2array(s : MultiSet<?>) -> [?] {
	getTreeKeys(s.tree);
}

// multiset operations

uniteMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?> {
	foldTree(b.tree, a.tree, \x, i, acc ->
		setTree(acc, x, max(lookupTreeDef(acc, x, 0), i))
	) |> MultiSet;
}

sumMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?> {
	foldTree(b.tree, a.tree, \x, i, acc ->
		setTree(acc, x, lookupTreeDef(acc, x, 0) + i)
	) |> MultiSet;
}

intersectMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?> {
	foldTree(a.tree, makeTree(), \x, i, acc -> {
		m = min(i, lookupTreeDef(b.tree, x, 0));
		if (m <= 0) acc else setTree(acc, x, m);
	}) |> MultiSet;
}

diffMultiSets(a : MultiSet<?>, b : MultiSet<?>) -> MultiSet<?> {
	foldTree(a.tree, makeTree(), \x, i, acc -> {
		m = i - lookupTreeDef(b.tree, x, 0);
		if (m <= 0) acc else setTree(acc, x, m);
	}) |> MultiSet;
}

subMultiSets(smaller : MultiSet<?>, greater : MultiSet<?>) -> bool {
	foldTree(smaller.tree, true, \x, i, acc ->
		acc && i <= lookupTreeDef(greater.tree, x, 0)
	);
}


// dump

multiSet2string(s : MultiSet<?>) -> string {
	multiSet2stringExt(s, \x, i -> toString(x) + ":" + i2s(i));
}

multiSet2stringExt(s : MultiSet<?>, fn : (?, int) -> string) -> string {
	strGlue(map(multiSet2pairs(s), \p -> fn(p.first, p.second)), ", ");
}

equalMultiSet(a : MultiSet<?>, b : MultiSet<?>) -> bool {
	s1 = sizeMultiSet(a);
	s2 = sizeMultiSet(b);
	if (s1 != s2) false else {
		foldMultiSet(a, true, \acc, ae, i -> {
			acc && i == getMultiSet(b, ae)
		});
	}
}
