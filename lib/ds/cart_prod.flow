import ds/array;

// Cartesian product of arrays: if c = [a_1, a_2, ... , a_n] then
// c is interpreted as a_1 x a_2 x ... x a_n

export {
	// Cartesian product of sets (elements of the array).
	CartProd : (sets : [[?]]);

	// Cartesian product initial iterator: all indexes are 0
	initCartProd(prod : CartProd<?>) -> [int];

	// Next state at traversing Cartesian product. If the state is final - returns None().
	nextCartProd(v : [int], prod : CartProd<?>) -> Maybe<[int]>;

	// The number of elements in the Cartesian product
	sizeCartProd(prod : CartProd<?>) -> int;

	isEmptyCartProd(prod : CartProd<?>) -> bool;

	// Map all tuples of product. The result has sizeCartProd(prod) elements.
	mapCartProd(prod : CartProd<?>, f : ([?]) -> ??) -> [??];

	// Traverse all tuples of product.
	iterCartProd(prod : CartProd<?>, f : ([?]) -> void) -> void;
	foldCartProd(prod : CartProd<?>, init : ??, f : (??, [?]) -> ??) -> ??;
	filtermapCartProd(prod : CartProd<?>, f : ([?]) -> Maybe<??>) -> [??];
}

initCartProd(prod : CartProd<?>) -> [int] {
	map(prod.sets, \__ -> 0);
}

nextCartProd(v : [int], prod : CartProd<?>) -> Maybe<[int]> {
	keep = ref false;
	next = mapi(v, \i, n -> {
		if (^keep) n else 
		if (n + 1 < length(prod.sets[i])) {
			keep := true;
			n + 1;
		} else 0
	});
	if (^keep) Some(next) else None();
}

sizeCartProd(prod : CartProd<?>) -> int {
	fold (prod.sets, if (prod.sets == []) 0 else 1, \acc, s -> acc * length(s));
}

isEmptyCartProd(prod : CartProd<?>) -> bool {
	prod.sets == [] || exists(prod.sets, \s -> s == []);
}

mapCartProd(prod : CartProd<?>, f : ([?]) -> ??) -> [??] {
	if (sizeCartProd(prod) == 0) [] else {
		arr = ref [];
		doMapCartProd(prod, initCartProd(prod), arr, f);
		^arr;
	}
}

doMapCartProd(prod : CartProd<?>, v : [int], arr : ref [??], f : ([?]) -> ??) -> void {
	d = mapi(v, \i, n -> prod.sets[i][n]);
	refArrayPush(arr, f(d));
	switch (nextCartProd(v, prod)) {
		Some(next): doMapCartProd(prod, next, arr, f);
		None(): {};
	}
}

iterCartProd(prod : CartProd<?>, f : ([?]) -> void) -> void {
	if (sizeCartProd(prod) > 0) {
		doIterCartProd(prod, initCartProd(prod), f)
	}
}

doIterCartProd(prod : CartProd<?>, v : [int], f : ([?]) -> void) -> void {
	f(mapi(v, \i, n -> prod.sets[i][n]));
	switch (nextCartProd(v, prod)) {
		Some(next): doIterCartProd(prod, next, f);
		None(): {};
	}
}

foldCartProd(prod : CartProd<?>, init : ??, f : (??, [?]) -> ??) -> ?? {
	if (sizeCartProd(prod) == 0) init else
	doFoldCartProd(prod, initCartProd(prod), init, f)
}

doFoldCartProd(prod : CartProd<?>, v : [int], val : ??, f : (??, [?]) -> ??) -> ?? {
	d = mapi(v, \i, n -> prod.sets[i][n]);
	new_val = f(val, d);
	switch (nextCartProd(v, prod)) {
		Some(next): doFoldCartProd(prod, next, new_val, f);
		None(): new_val;
	}
}

filtermapCartProd(prod : CartProd<?>, f : ([?]) -> Maybe<??>) -> [??] {
	if (sizeCartProd(prod) == 0) [] else {
		arr = ref [];
		doFiltermapCartProd(prod, initCartProd(prod), arr, f);
		^arr;
	}
}

doFiltermapCartProd(prod : CartProd<?>, v : [int], arr : ref [??], f : ([?]) -> Maybe<??>) -> void {
	d = mapi(v, \i, n -> prod.sets[i][n]);
	maybeApply(f(d), \val -> refArrayPush(arr, val));
	switch (nextCartProd(v, prod)) {
		Some(next): doFiltermapCartProd(prod, next, arr, f);
		None(): { };
	}
}
