import array;
import runtime;
import bits;
import maybe;

export {
	BitVector(
		data : [int], 
		bitcount: int
	);

	// Create an instance of BitVector and fill it using init function.
	makeBitVector(bitcount: int, init : (int) -> bool) -> BitVector;

	// This operation has O(n) complexity.
	setBitVector(set: BitVector, i: int) -> BitVector;

	// This operation has O(n) complexity.
	unsetBitVector(set: BitVector, i: int) -> BitVector;

	// This operation has O(1) complexity.
	getBitVector(set: BitVector, i: int) -> Maybe<bool>;

	// Fast boolean operations for bit vectors.
	// Be sure, that these vectors have the same number of bits, otherwise operation hardly has sense.
	// All these functions have O(n) complexity.
	bitVectorOr(set1: BitVector, set2: BitVector) -> BitVector;
	bitVectorAnd(set1: BitVector, set2: BitVector) -> BitVector;
	bitVectorXor(set1: BitVector, set2: BitVector) -> BitVector;
	bitVectorNot(set: BitVector) -> BitVector;
}

makeBitVector(bitcount : int, init : (int) -> bool) {
	BitVector(
		map(enumFromTo(0, bitcount / 32),
			\i -> {
				k = i * 32;
				fold(enumFromTo(0, 31), 0,
					\acc, j -> if (j + k < bitcount && init(j + k)) acc + bitShl(1, j) else acc
				)
			}
		), 
		bitcount
	);
}

setBitVector(set, i) {
	if (i >= 0 && i < set.bitcount) {
		ind = i / 32;
		newArray = mapi(set.data,
			\j, b -> {
				if (j != ind) b else {
					bitOr(b, bitShl(1, i % 32));
				}
			}
		);
		BitVector(newArray, set.bitcount);
	} else {
		set;
	}
}

unsetBitVector(set, i) {
	if (i >= 0 && i < set.bitcount) {
		ind = i / 32;
		newArray = mapi(set.data,
			\j, b -> {
				if (j != ind) b else {
					bitAnd(b, bitNot(bitShl(1, i % 32)));
				}
			}
		);
		BitVector(newArray, set.bitcount);
	} else {
		set;
	}
}

getBitVector(set, i) {
	if ((i >= 0) && (i < set.bitcount)) {
		Some(bitAnd(set.data[i / 32], bitShl(1, i % 32)) != 0);
	} else {
		None();
	}
}

bitVectorOr(set1: BitVector, set2: BitVector) -> BitVector {
	bitVectorBinaryOperation(set1, set2, \v1, v2 -> bitOr(v1, v2))
}

bitVectorAnd(set1: BitVector, set2: BitVector) -> BitVector {
	bitVectorBinaryOperation(set1, set2, \v1, v2 -> bitAnd(v1, v2))
}

bitVectorXor(set1: BitVector, set2: BitVector) -> BitVector {
	bitVectorBinaryOperation(set1, set2, \v1, v2 -> bitXor(v1, v2))
}

bitVectorBinaryOperation(set1: BitVector, set2: BitVector, operation : (int, int) -> int) -> BitVector {
	BitVector(
		mapi(set1.data, \i, v -> if (i < length(set2.data)) operation(v, set2.data[i]) else v),
		set1.bitcount
	)
}

bitVectorNot(set: BitVector) -> BitVector {
	BitVector(map(set.data, \i -> bitNot(i)), set.bitcount)
}
