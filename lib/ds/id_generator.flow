import maybe;
import ds/tree;
import string;

export {
	createStringIdGenerator(prefix : string) -> IdGenerator;
	generateIntId() -> int;
}

intIdR = ref 0;

generateIntId() -> int {
	currentId = ^intIdR;
	intIdR := currentId + 1;
	currentId
}

idCounterTreeR : ref Tree<string, int> = ref makeTree();

IdGenerator(prefix : string, nextId : () -> string);

getStringId(
	idPrefix : string
) -> string {
	idTree = ^idCounterTreeR;
	currentId = eitherMap(lookupTree(idTree, idPrefix), \count -> count + 1, 1);
	idCounterTreeR := setTree(idTree, idPrefix, currentId);
	concatStrings([
		if(idPrefix != "") {idPrefix + "_"} else "",
		i2s(currentId)
	])
}

createStringIdGenerator(prefix : string) -> IdGenerator {
	maybeApply(lookupTree(^idCounterTreeR, prefix), \__-> println("Warning: creating a prefix that has already been created"));
	IdGenerator(prefix, \-> getStringId(prefix));
}