import maybe;
import ds/tree;
import string;

export {
	// Explanation how to use:
	// create generator structure by corresponding function and then use its "nextId" function for generating id
	createStringIdGenerator(prefix : string) -> StringIdGenerator;
	
	// returns a function for generating id
	createIntIdGenerator() -> () -> int;
}

idCounterTreeR : ref Tree<string, int> = ref makeTree();

StringIdGenerator(prefix : string, nextId : () -> string);

getStringId(
	idPrefix : string
) -> string {
	idTree = ^idCounterTreeR;
	currentId = eitherMap(lookupTree(idTree, idPrefix), \count -> count + 1, 1);
	idCounterTreeR := setTree(idTree, idPrefix, currentId);
	concatStrings([
		if(idPrefix != "") {idPrefix + "_"} else "",
		i2s(currentId)
	])
}

createStringIdGenerator(prefix : string) -> StringIdGenerator {
	maybeApply(lookupTree(^idCounterTreeR, prefix), \__-> println("Warning: creating a prefix that has already been created"));
	StringIdGenerator(prefix, \-> getStringId(prefix));
}

createIntIdGenerator() -> () -> int {
	idCounterR = ref 1;
	\-> {
		currentId = ^idCounterR;
		idCounterR := currentId + 1;
		currentId
	}
}