import ds/digraph;
import math/math;

// Dijkstra algorithm implementation

export{
	// Find distances from specified node to all reachable nodes in the graph 
	// using Dijkstra algorithm based on integer weights of the edges 
	// and then select shortest path to one of the specified nodes.
	shortestGPath(graph : DiGraph<?, ??>, from : GNode<?>, tos : [GNode<?>]) -> [GEdge<??>];

	// More general implementation based on custom edge costs that replace weights
	// NOTE: make sure addCostsFn doesn't produce overflow
	shortestGPathForCustomCosts(graph : DiGraph<?, ??>, from : GNode<?>, tos : [GNode<?>], edgeCostFn : (GEdge<??>) -> ???, infCost : ???, initCost : ???, addCostsFn : (???, ???) -> ???) -> [GEdge<??>];

	// Get distances from specified node to all reachable nodes in the graph
	getDistanceMap(graph : DiGraph<?, ??>, from : GNode<?>) -> Tree<int, int>;
}

shortestGPath(graph : DiGraph<?, ??>, from : GNode<?>, tos : [GNode<?>]) -> [GEdge<??>] {
	shortestGPathForCustomCosts(
		graph, 
		from, 
		tos, 
		\arc -> arc.weight, 
		intMax, 
		0, 
		\a,b -> {
			s = a+b;
			if (s < a || s < b) {
				// Overflow!
				intMax
			} else s;
		})
}

shortestGPathForCustomCosts(graph : DiGraph<?, ??>, from : GNode<?>, tos : [GNode<?>], edgeCostFn : (GEdge<??>) -> ???, infCost : ???, initCost : ???, addDistance : (???, ???) -> ???) -> [GEdge<??>] {
	addDistanceAsserted = \a, b -> {
		s = addDistance(a, b);
		assert(s >= a && s >= b, "addDistance function overflow");
		s
	}

	if (tos == []) {
		// something is wrong
		[]
	} else {
		// Dijkstra's algorithm
		state = initPathState(graph, from, tos, infCost, initCost);

		//dumpState(state);

		res = findDistance(graph, state, edgeCostFn, infCost, addDistanceAsserted);

		//dumpState(res);

		// searching for the closest node to "from"
		to : GNode<?> = fold(tos, Pair(tos[0], infCost), \acc : Pair<GNode<?>, ???>, t : GNode<?> -> {
			distance = lookupTreeDef(res.distanceMap, t.id, infCost);
			
			if (distance < acc.second) {
				Pair(t, distance)
			} else {
				acc
			}
		}).first;

		path = buildPathStepByStep(res.spTree, to.id, makeList());

		head = headList(path, graph.badedge);

		path2 = if (head.from == from.id) path else makeList();

		//assert(head.from == from.id, "something wrong with map of previouse elements");

		//foldList(path, [], \acc, id -> arrayPush(acc, getGNode(graph, id)))
		list2array(path2) |> reverseA
	}
}

getDistanceMap(graph : DiGraph<?, ??>, from : GNode<?>) -> Tree<int, int> {
	state = initPathState(graph, from, collectGNodes(graph, \node -> true), intMax, 0);

	res = findDistance(graph, state, \edge -> edge.weight, intMax, \a, b -> a + b);
	res.distanceMap
}

DijkstraState : (distanceMap : Tree<int, ?>, nodesQueue : Set<Pair<?, int>>, spTree : Tree<int, GEdge<??>>, visited : Set<int>, targetsLeft : Set<int>);

initPathState(graph : DiGraph<?, ??>, from : GNode<?>, tos : [GNode<?>], infCost : ???, initCost : ???) -> DijkstraState<???, ??> {
	distanceMap = setTree(makeTree(), from.id, initCost);
	nodesQueue = insertSet(makeSet(), Pair(initCost, from.id));
	DijkstraState(distanceMap, nodesQueue, makeTree(), makeSet(), buildSet(map(tos, \to -> to.id)))
}

dumpState(state : DijkstraState<?, ??>) -> void {
	t2string = \l, t -> {
		foldTree(t, l + ": ", \k, v, acc -> { 
			acc + "\n" + toString(k) + " - " + toString(v)
		})
	};

	t2string("distanceMap", state.distanceMap) |> println;
	("nodesQueue: " + set2string(state.nodesQueue)) |> println;
}

buildPathStepByStep(spTree : Tree, curr : int, path : List<GEdge<??>>) -> List<GEdge<??>> {
	eitherMap(
		lookupTree(spTree, curr),
		\arc -> {
			buildPathStepByStep(spTree, arc.from, Cons(arc, path))
		},
		path
	)
}

findDistance(graph : DiGraph<?, ??>, state : DijkstraState<???, ??>, edgeCostFn : (GEdge) -> ???, infCost : ???, addDistance : (???, ???) -> ???) -> DijkstraState<???, ??> {
	popm = popMinSet(state.nodesQueue);	

	switch (popm) {
		// we've just finished with this path
		None(): state;
		Some(pop): {
			unpair(pop.value,
				\distance, id -> {
					if (distance == infCost) { // seems other nodes are not rechable
						state
					} else if (getGNode(graph, id) == graph.badnode) { // removed node
						state
					} else {
						// println("popped - distance: " + toString(distance) + ", id: " + toString(id));

						assert(distance != infCost, "distance is infinite for current node");

						targetsLeft = removeSet(state.targetsLeft, id);
						if (isEmptySet(targetsLeft)) {
							state
						} else {
							arcs = getOutGEdges(graph, id);

							// walk through all successor
							newState = fold(arcs, DijkstraState(state.distanceMap, pop.rest, state.spTree, insertSet(state.visited, id), targetsLeft), \acc, arc -> {
								updateDistance(acc, arc.to, edgeCostFn(arc), id, distance, arc, infCost, addDistance)
							});

							//dumpState(newState);

							findDistance(graph, newState, edgeCostFn, infCost, addDistance);
						}
					}
				}
			)		
		}
	}
}

updateDistance(state : DijkstraState<?, ??>, id : int, weight : ?, parent : int, parentDistance : ?, arc : GEdge, infCost : ?, addDistance : (?, ?) -> ?) -> DijkstraState<?, ??> {
	//println("to: " + i2s(id));

	if (containsSet(state.visited, id)) {
		state;
	} else {
		distance = lookupTreeDef(state.distanceMap, id, infCost);
		key = Pair(distance, id);

		newDistance = addDistance(parentDistance, weight);

		if (distance > newDistance) {
			// update distance both in map and queue
			newKey = Pair(newDistance, id);
			distanceMap2 = setTree(state.distanceMap, id, newDistance);
			nodesQueue2 = updateSet(state.nodesQueue, key, newKey);
			spTree2 = setTree(state.spTree, id, arc);
			DijkstraState(distanceMap2, nodesQueue2, spTree2, state.visited, state.targetsLeft)
		} else {
			state
		}
	}
}
