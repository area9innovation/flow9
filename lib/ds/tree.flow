// © Copyright 2011 Area9 Technologies.

// See ds/treeutils.flow for additional helpers

import maybe;
import ds/tuples;
import runtime;
import ds/list;

export {
	// A binary tree with keys of type ? and values of type ??
	Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
		TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
		TreeEmpty : ();

	// Make an empty tree
	makeTree : () -> Tree<?, ??>;

	// Make a tree of one element
	makeTree1 : (key : ?, value : ??) -> TreeNode<?, ??>;

	lookupTree : (tree : Tree<?, ??>, key : ?) -> Maybe<??>;
	lookupTreeDef : (x : Tree<?, ??>, key : ?, defaultValue : ??) -> ??;

	// If key is not found, getDefValue constructs a value, saves it in the tree and returns result as well
	lookupTreeSet(tree : ref Tree<?, ??>, key : ?, getDefValue : (?) -> ??) -> ??;

	// Add a node or updates value of existing one.
	setTree : (tree : Tree<?, ??>, key : ?, value : ??) -> Tree<?, ??>;
	setTreeValues : (tree : Tree<?, ??>, keyValuePairs : [Pair<?, ??>]) -> Tree<?, ??>;
	removeFromTree : (tree : Tree<?, ??>, key : ?) -> Tree<?, ??>;

	// popmax(t, f) = split t in a new tree & a highest value.
	popmax(tree : Tree<?, ??>) -> TreePopResult<?, ??>;

	// This is symmetric to popmax
	popmin(tree : Tree<?, ??>) -> TreePopResult<?, ??>;

	// Struct PopResult is used by popmax and popmin to return a triple of key, value & the new tree with max popped.
	TreePopResult<?, ??> ::= PopResult<?, ??>, EmptyPopResult;
		PopResult(k : ?, v : ??, rest : Tree<?, ??>);
		EmptyPopResult();

	traversePreOrder : (tree : Tree<?, ??>, fn : (key : ?, value : ??) -> void) -> void;
	traverseInOrder : (tree : Tree<?, ??>, fn : (key : ?, value : ??) -> void) -> void;
	traverseRInOrder : (tree : Tree<?, ??>, fn : (key : ?, value : ??) -> void) -> void;

	findInOrder(tree : Tree<?, ??>, fn : (key : ?, value : ??) -> Maybe<???>) -> Maybe<???>;
	findRInOrder(tree : Tree<?, ??>, fn : (key : ?, value : ??) -> Maybe<???>) -> Maybe<???>;
	findPreOrder(tree : Tree<?, ??>, fn : (key : ?, value : ??) -> Maybe<???>) -> Maybe<???>;

	// using inorder traversal
	foldTree : (tree: Tree<?, ??>,
		acc: ???,
		f: (key: ?, value: ??, acc: ???) -> ???
	) -> ???;
	// using reverse inorder traversal
	foldRTree : (tree: Tree<?, ??>,
		acc: ???,
		f: (key: ?, value: ??, acc: ???) -> ???
	) -> ???;

	foldTreeBinary(
		tree: Tree<?, ??>,
		fn : (key : ?, value : ??, left : ???, right : ???) -> ???,
		emptyValue : ???
	) -> ???;

	// Fold for Tree with monoidal values.
	// Mempty is the monoidal zero/neutral element.
	// Mappend must be associative operation and act like identity if argument is mempty.
	foldMonoidalTree(
		tree: Tree<?, ??>,
		mappend : (??, ??) -> ??,
		mempty : ??
	) -> ??;

	// copy tree applying function to stored value in preorder
	mapTree : (tree: Tree<?, ??>,
		f: (value: ??) -> ???
	) -> Tree<?, ???>;

	// same as mapTree, but give the key too to fn
	mapTree2 : (tree: Tree<?, ??>,
		fn: (key: ?, value: ??) -> ???
	) -> Tree<?, ???>;

	// same as filter() but for tree
	filterTree : (tree: Tree<?, ??>,
		f: (key: ?, value: ??) -> bool
	) -> Tree<?, ??>;

	// count the number of nodes in tree. Complexity is O(n).
	sizeTree : (Tree<?, ??>) -> int;

	// A helper that adds an element to an array as the value of a key. This is useful when you have a tree of arrays values
	// Adds a singleton array if the key does not occur in the tree.
	treePushToArrayValue(tree : Tree<?, [??]>, key : ?, value : ??) -> Tree<?, [??]>;

	treePushToArrayUnique(tree : Tree<?, [??]>, key : ?, value : ??) -> Tree<?, [??]>;

	// A helper which removes an element from an array as the value of a key. This is useful when you have a tree of arrays values
	treeRemoveFromArrayValue(tree : Tree<?, [??]>, key : ?, value : ??) -> Tree<?, [??]>;

	// A helper that gets the array associated with a key - returning [] if there is no such key. This is useful when you have a tree of arrays values
	getTreeArrayValue(tree : Tree<?, [??]>, key : ?) -> [??];

	foldArrayTree(tree: Tree<?, [??]>, init: ???, f: (key: ?, value: ??, acc: ???) -> ???) -> ???;

	// True if tree contains the given key.
	containsKeyTree : (tree : Tree<?, ??>, key : ?)->bool;

	// Recursively travel the tree and collect all it's keys in an array
	getTreeKeys(tree : Tree<?, ??>) -> [?];
	// Recursively travel the tree and collect all it's values in an array
	getTreeValues(tree : Tree<?, ??>) -> [??];

	// Merges two trees. t2 overrides t1 on duplicate entries.
	// (complexity is O(t2 log (t1+t2)))
	mergeTree(t1 : Tree<?, ??>, t2 : Tree<?, ??>) -> Tree<?, ??>;

	// merges 2 trees, uses callback if similar key exists in both trees
	mergeTreeCustom(t1 : Tree<?, ??>, t2 : Tree<?, ??>, fn : (?, ??, ??) -> ??) -> Tree<?, ??>;

	// Since trees can be balanced differently, == does not work for comparison. Use this instead
	equalTrees(t1 : Tree<?, ??>, t2 : Tree<?, ??>) -> bool;

	// Compares only the structure of trees. Does NOT check values
	equalTreesStructure(t1 : Tree<?, ??>, t2 : Tree<?, ??>) -> bool;

	pairs2tree : (pairs : [Pair<?, ??>]) -> Tree<?, ??>;
	tree2pairs : (tree : Tree<?, ??>) -> [Pair<?, ??>];

	values2tree : (values : [?], getKey : (?) -> ??) -> Tree<??, ?>;
	values2treeEx : (xs : [?], getKey : (?) -> ??, getValue : (?) -> ???) -> Tree<??, ???>;

	// Converts array to tree with merging same keys. If no key exists, tries to merge with defValue instead.
	values2treeMerge : (
		xs : [?],
		getKey : (?) -> ??,
		defValue : ???,
		mergeFn : (???, ?) -> ???
	) -> Tree<??, ???>;

	values2arrayTree : (xs : [?], getKey : (?)->??)->Tree<??, [?]>;

	tree2list : (tree : Tree<?, ??>) -> List<Pair<?, ??>>;

	// Converts a tree into an array by projecting each key, value pair into
	// some value using pr.
	convertTreeToArray : (tree : Tree<?, ??>, conv : (?, ??) -> ???) -> [???];
	filtermapTreeToArray : (tree : Tree<?, ??>, filterMapFn : (?, ??) -> Maybe<???>) -> [???];

	// Useful for counting
	incTreeValue : (tree : Tree<?, int>, key : ?) -> Tree<?, int>;
	decTreeValue : (tree : Tree<?, int>, key : ?) -> Tree<?, int>;

	// True if there is a key, value pair in tree that satisfies p.
	existsTree : (tree : Tree<?, ??>, p : (?, ??) -> bool) -> bool;
	// True if all key, value pairs in tree that satisfies p.
	allTreeSatisfies : (tree : Tree<?, ??>, p : (?, ??) -> bool) -> bool;

	// Updates the value at key if it exists.
	mapTreeEntry : (tree : Tree<?, ??>, key : ?, f : (??) -> ??) -> Tree<?, ??>;

	// Updates the value at key if it exists otherwise sets def.
	mapTreeEntryDef : (tree : Tree<?, ??>, key : ?, fn : (??) -> ??, def : ??) -> Tree<?, ??>;

	groupTreesOrdered : (trees : [Tree<?, ??>]) -> Tree<?, [??]>;

	// Catamorphisms over a tree.
	cataTree : (
		tree : Tree<?, ??>,
		onLeaf : ???,
		onNode : (key : ?, value : ??, left : ???, right : ???, depth : int) -> ???
	) -> ???;
	// Catamorphisms over a tree. Only descends into subtrees if required.
	cataTreeLazy : (
		tree : Tree<?, ??>,
		onLeaf : ???,
		onNode : (key : ?, value : ??, left : () -> ???, right : () -> ???, depth : int) -> ???
	) -> ???;

	// True if the tree seems to be large (≳1000 key/value pairs).
	largeTree : (tree : Tree<?, ??>) -> bool;

	// Finds value for such key k1 in the tree, that k1 <= key < k2, where k2 is the closest greater key to the k1.
	treeIntervalSearch(tree : Tree<?, ??>, key : ?) -> Maybe<??>;
}

makeTree() {
	TreeEmpty();
}

makeTree1(key, value) {
	TreeNode(key, value, TreeEmpty(), TreeEmpty(), 1);
}

// implemented by the C++ runner
native setTree : (tree : Tree<?, ??>, key : ?, value : ??) -> Tree<?, ??> = Native.fast_setTree;

setTree(set : Tree<?, ??>, key : ?, value : ??) {
	switch (set : Tree) {
	TreeNode(k, v, left, right, depth):
		if (key < k) {
			rebalancedTree(k, v, setTree(left, key, value), right);
		} else if (key == k) {
			// Update the value of this node
			TreeNode(k, value, left, right, depth);
		} else {
			rebalancedTree(k, v, left, setTree(right, key, value));
		}
	TreeEmpty():
		TreeNode(key, value, TreeEmpty(), TreeEmpty(), 1);
	}
}

setTreeValues(tree : Tree<?, ??>, keyValuePairs : [Pair<?, ??>]) -> Tree<?, ??> {
	fold(keyValuePairs, tree, \acc, kvPair -> {
		unpair(kvPair, \key, value -> {
			setTree(acc, key, value)
		});
	})
}

mkTreeNode(k : ?, v : ??, left : Tree<?, ??>, right : Tree<?, ??>) -> TreeNode<?, ??> {
	TreeNode(k, v, left, right, max(treeDepth(left), treeDepth(right)) + 1);
}

rebalancedTree(k : ?, v : ??, left : Tree<?, ??>, right : Tree<?, ??>) -> Tree<?, ??> {
	leftDepth = treeDepth(left);
	rightDepth = treeDepth(right);

	balance = leftDepth - rightDepth;

	composed = TreeNode(k, v, left, right, max(leftDepth, rightDepth) + 1);

	if (balance == -1 || balance == 0 || balance == 1) {
		composed;
	} else if (balance < 0) {
		// Right-right or right-left?
		switch (right : Tree) {
			TreeEmpty(): composed;
			TreeNode(rk, rv, rl, rr, rdepth): {
				if (treeDepth(rl) < treeDepth(rr)) {
					// Right right
					treeLeftRotation(composed);
				} else {
					// Right left
					treeLeftRotation(mkTreeNode(k, v, left, treeRightRotation(right)));
				}
			}
		}
	} else {
		// Left-left or left-right?
		switch (left : Tree) {
			TreeEmpty(): composed;
			TreeNode(lk, lv, ll, lr, ldepth): {
				if (treeDepth(ll) < treeDepth(lr)) {
					// Left right
					treeRightRotation(mkTreeNode(k, v, treeLeftRotation(left), right));
				} else {
					// Left left
					treeRightRotation(composed);
				}
			}
		}
	}
}

// implemented by the C++ runner
native lookupTree : (tree : Tree<?, ??>, key : ?) -> Maybe<??> = Native.fast_lookupTree;

lookupTree(set : Tree<?, ??>, key : ?) {
	switch (set : Tree) {
		TreeNode(k, v, l, r, depth):
					if (key < k) {
						lookupTree(l, key);
					} else if (key == k) {
						Some(v);
					} else {
						lookupTree(r, key);
					}
		TreeEmpty():
					None();
	}
}

lookupTreeDef(x, key, defaultValue) {
	either(lookupTree(x,key), defaultValue);
}

lookupTreeSet(refTree, key, setFn) {
	eitherFn(lookupTree(^refTree, key),
		idfn,
		\ -> {
			ret = setFn(key);
			refTree := setTree(^refTree, key, ret);
			ret
		}
	)
};

removeFromTree(set : Tree<?, ??>, key : ?) {
	// TODO: We should do rebalancing here as well. http://en.wikipedia.org/wiki/AVL_tree
	switch (set : Tree) {
		TreeNode(k, v, left, right, depth):
					if (key < k) {
						mkTreeNode(k, v, removeFromTree(left, key), right);
					} else if (key == k) {
						mergeTreeInternal(left, right);
					} else {
						mkTreeNode(k, v, left, removeFromTree(right, key));
					}
		TreeEmpty(): set;
	}
}

// mergeTreeInternal = a new tree from merging 2 trees; do this by picking the top key/value from
// the leftmost tree & making that the new interior key/value.
// This breaks order and lookups on a merged tree may fail. So not safe to use this outside
// of binarytree.flow
mergeTreeInternal(t1 : Tree<?, ??>, t2 : Tree<?, ??>) -> Tree<?, ??> {
	switch (t1 : Tree) {
		TreeEmpty(): t2;
		TreeNode(k1, v1, l1, r1, d1):
			switch (t2 : Tree) {
				TreeEmpty(): t1;
				TreeNode(k2, v2, l2, r2, d2): {
					p = popmax(t1);
					switch (p) {
						EmptyPopResult(): t1;
						PopResult(mk, mv, mrest): mkTreeNode(mk, mv, mrest, t2);
					}
				}
			}
	}
}

popmax(t) {
	switch (t : Tree) {
		TreeEmpty(): EmptyPopResult();
		TreeNode(k, v, l, r, d):
			switch (r : Tree) {
				TreeEmpty(): // so k,v is the bottom right corner value
					PopResult(k, v, l);
				TreeNode(k1, v1, l1, r1, d1): {
					p = popmax(r);
					switch (p) {
						EmptyPopResult(): p;
						PopResult(mk, mv, mrest): PopResult(mk, mv, mkTreeNode(k, v, l, mrest));
					}
				}
			}
	}
}

popmin(t) {
	switch (t : Tree) {
		TreeEmpty(): EmptyPopResult();
		TreeNode(k, v, l, r, d):
			switch (l : Tree) {
				TreeEmpty(): // so k,v is the bottom left corner value
					PopResult(k, v, r);
				TreeNode(k1, v1, l1, r1, d1): {
					p = popmin(l);
					switch (p) {
						EmptyPopResult(): p;
						PopResult(mk, mv, mrest): PopResult(mk, mv, mkTreeNode(k, v, mrest, r));
					}
				}
			}
	}
}


traversePreOrder(tree, fn) {
	switch (tree : Tree) {
		TreeEmpty(): {}
		TreeNode(k, v, left, right, depth): {
			fn(k, v);
			traversePreOrder(left, fn);
			traversePreOrder(right, fn);
		}
	}
}

traverseInOrder(tree, fn) {
	switch (tree : Tree) {
		TreeEmpty(): {}
		TreeNode(k, v, left, right, depth): {
			traverseInOrder(left, fn);
			fn(k, v);
			traverseInOrder(right, fn);
		}
	}
}

traverseRInOrder(tree, fn) {
	switch (tree : Tree) {
		TreeEmpty(): {}
		TreeNode(k, v, left, right, depth): {
			traverseRInOrder(right, fn);
			fn(k, v);
			traverseRInOrder(left, fn);
		}
	}
}

findInOrder(tree, fn) {
	switch (tree : Tree) {
		TreeEmpty(): None();
		TreeNode(k, v, left, right, depth): {
			eitherFn(
				findInOrder(left, fn), // trying left part
				\v1 -> Some(v1), // found in left part
				\ -> { // trying this node
					eitherFn(
						fn(k, v),
						\v2 -> Some(v2),
						\ -> { // trying right part
							findInOrder(right, fn)
						}
					)
				}
			)
		}
	}
}

findRInOrder(tree, fn) {
	switch (tree : Tree) {
		TreeEmpty(): None();
		TreeNode(k, v, left, right, depth): {
			eitherFn(
				findRInOrder(right, fn), // trying right part
				\v1 -> Some(v1), // found in right part
				\ -> { // trying this node
					eitherFn(
						fn(k, v),
						\v2 -> Some(v2),
						\ -> { // trying left part
							findRInOrder(left, fn)
						}
					)
				}
			)
		}
	}
}

findPreOrder(tree, fn) {
	switch (tree : Tree) {
		TreeEmpty(): None();
		TreeNode(k, v, left, right, depth): {
			eitherFn(
				fn(k, v),
				\v1 -> Some(v1),
				\ -> {
					eitherFn(
						findInOrder(left, fn),
						\v2 -> Some(v2),
						\ -> { // trying right part
							findInOrder(right, fn)
						}
					)
				}
			)
		}
	}
}

foldTree(tree, acc, f) {
	switch (tree : Tree) {
		TreeEmpty(): acc;
		TreeNode(k, v, left, right, depth): {
			acc1 = foldTree(left, acc, f);
			acc2 = f(k, v, acc1);
			foldTree(right, acc2, f);
		}
	}
}

foldTreeBinary(
	tree: Tree<?, ??>,
	fn : (key : ?, value : ??, left : ???, right : ???) -> ???,
	emptyValue : ???
) -> ??? {
	switch (tree : Tree) {
		TreeEmpty(): emptyValue;
		TreeNode(k, v, left, right, __): {
			fn(
				k,
				v,
				foldTreeBinary(left, fn, emptyValue),
				foldTreeBinary(right, fn, emptyValue)
			);
		}
	}
}

foldMonoidalTree(
	tree: Tree<?, ??>,
	mappend : (??, ??) -> ??,
	mempty : ??
) -> ?? {
	foldTreeBinary(
		tree,
		\__, value, left, right -> mappend(left, mappend(value, right)),
		mempty
	)
}

foldRTree(tree, acc, f) {
	switch (tree : Tree) {
		TreeEmpty(): acc;
		TreeNode(k, v, left, right, depth): {
			acc1 = foldRTree(right, acc, f);
			acc2 = f(k, v, acc1);
			foldRTree(left, acc2, f);
		}
	}
}

mapTree(tree, f) {
	switch (tree : Tree) {
		TreeEmpty(): TreeEmpty();
		TreeNode(k, v, left, right, depth): {
			TreeNode(k, f(v), mapTree(left, f), mapTree(right, f), depth)
		}
	}
}

mapTree2(tree, f) {
	switch (tree : Tree) {
		TreeEmpty(): TreeEmpty();
		TreeNode(k, v, left, right, depth): {
			TreeNode(k, f(k, v), mapTree2(left, f), mapTree2(right, f), depth)
		}
	}
}

doFilterTree(tree : Tree<?, ??>, acc : Tree<?, ??>, f : (?, ??) -> bool) -> Tree<?, ??> {
	switch (tree : Tree) {
		TreeEmpty(): acc;
		TreeNode(k, v, left, right, depth): {
			acc1 = doFilterTree(left, acc, f);
			acc2 = if (f(k, v)) setTree(acc1, k, v) else acc1;
			doFilterTree(right, acc2, f);
		}
	}
}

filterTree(tree, f) {
	doFilterTree(tree, makeTree(), f);
}

sizeTree(t) {
	switch (t : Tree) {
		TreeEmpty(): 0;
		TreeNode(k, v, l, r, depth): 1 + sizeTree(l) + sizeTree(r);
	}
}

treePushToArrayValue(tree, key, value) {
	c = lookupTreeDef(tree, key, []);
	setTree(tree, key, arrayPush(c, value))
}

treePushToArrayUnique(tree, key, value) {
	c = lookupTreeDef(tree, key, []);
	if (!contains(c, value)) {
		setTree(tree, key, arrayPush(c, value))
	} else {
		tree
	}
}

treeRemoveFromArrayValue(tree, key, value) {
	eitherMap(
		lookupTree(tree, key),
		\v -> {
			r = removeFirst(v, value);
			if (length(r) == 0) {
				removeFromTree(tree, key);
			} else {
				setTree(tree, key, r);
			}
		},
		tree
	)
}

getTreeArrayValue(tree, key) {
	lookupTreeDef(tree, key, [])
}

treeDepth(tree : Tree<?, ??>) -> int {
	switch (tree : Tree) {
		TreeEmpty(): 0;
		TreeNode(__, __, __, __, depth): depth;
	}
}

treeRightRotation(tree : Tree<?, ??>) -> Tree<?, ??> {
	switch (tree : Tree) {
		TreeEmpty(): tree;
		TreeNode(k, v, left, right, depth): {
			switch (left : Tree) {
				TreeEmpty(): {
					tree;
				}
				TreeNode(ck, cv, cleft, cright, cdepth): {
					mkTreeNode(ck, cv, cleft, mkTreeNode(k, v, cright, right));
				}
			}
		}
	}
}

treeLeftRotation(tree : Tree<?, ??>) -> Tree<?, ??> {
	switch (tree : Tree) {
		TreeEmpty(): tree;
		TreeNode(k, v, left, right, depth): {
			switch (right : Tree) {
				TreeEmpty(): {
					tree;
				}
				TreeNode(ck, cv, cleft, cright, cdepth): {
					mkTreeNode(ck, cv, mkTreeNode(k, v, left, cleft), cright);
				}
			}
		}
	}
}

foldArrayTree(tree: Tree<?, [??]>, init: ???, f: (key: ?, value: ??, acc: ???) -> ???) -> ??? {
	foldTree(tree, init, \key, arr, acc -> {
		fold(arr, acc, \acc2, value -> {
			f(key, value, acc2)
		})
	})
}

containsKeyTree(tree, key) {
	isSome(lookupTree(tree, key))
}

getTreeKeys(tree : Tree<?, ??>) -> [?] {
	switch (tree : Tree) {
		TreeEmpty(): [];
		TreeNode(k, v, left, right, depth): {
			concat3(getTreeKeys(left), [k], getTreeKeys(right));
		}
	}
}

getTreeValues(tree : Tree<?, ??>) -> [??] {
	switch (tree : Tree) {
		TreeEmpty(): [];
		TreeNode(k, v, left, right, depth): {
			concat3(getTreeValues(left), [v], getTreeValues(right));
		}
	}
}

mergeTree(t1 : Tree<?, ??>, t2 : Tree<?, ??>) -> Tree<?, ??> {
	foldTree(t2, t1, \k, v, acc -> {
		setTree(acc, k, v)
	})
}

mergeTreeCustom(t1 : Tree<?, ??>, t2 : Tree<?, ??>, fn : (?, ??, ??) -> ??) -> Tree<?, ??> {
	foldTree(t2, t1, \k, v, acc -> {
		vv = eitherMap(
			lookupTree(acc, k),
			\v2 -> fn(k, v, v2),
			v
		);
		setTree(acc, k, vv);
	});
}

equalTrees(t1 : Tree<?, ??>, t2 : Tree<?, ??>) -> bool {
	t1 == t2 || (sizeTree(t1) == sizeTree(t2) && foldTree(t1, true, \k1, v1, acc ->
		acc && eitherMap(
			lookupTree(t2, k1),
			eq(v1),
			false
		)
	))
}

equalTreesStructure(t1 : Tree<?, ??>, t2 : Tree<?, ??>) -> bool {
	t1 == t2 || (sizeTree(t1) == sizeTree(t2) && forall(getTreeKeys(t1), \k1 ->
		containsKeyTree(t2, k1)
	))
}

pairs2tree(pairs : [Pair<?, ??>]) -> Tree<?, ??> {
	fold(pairs, makeTree(), \t : Tree<?, ??>, p -> setTree(t, p.first, p.second))
}

tree2pairs(tree : Tree<?, ??>) -> [Pair<?, ??>] {
	convertTreeToArray(tree, \k, v -> Pair(k, v));
}

values2tree(values : [?], getKey : (?) -> ??) -> Tree<??, ?> {
	values2treeEx(values, getKey, idfn)
}

values2treeEx(xs : [?], getKey : (?) -> ??, getVal : (?) -> ???) -> Tree<??, ???> {
	fold(xs, makeTree(), \tree, x : ? -> setTree(tree, getKey(x), getVal(x)));
}

values2treeMerge(xs : [?], getKey : (?) -> ??, defValue : ???, mergeFn : (???, ?) -> ???) -> Tree<??, ???> {
	fold(xs, makeTree(), \t, x -> {
		k = getKey(x);
		a = lookupTreeDef(t, k, defValue);
		setTree(t, k, mergeFn(a, x));
	});
}

values2arrayTree(xs : [?], getKey : (?) -> ??) -> Tree<??, [?]> {
	fold(xs, makeTree(), \t, d -> treePushToArrayValue(t, getKey(d), d));
}

tree2list(tree : Tree<?, ??>) -> List<Pair<?, ??>> {
	foldTree(tree, makeList(), \key, value, acc -> Cons(Pair(key, value), acc));
}

convertTreeToArray(tree : Tree<?, ??>, conv : (?, ??) -> ???) -> [???] {
	if (largeTree(tree)) {
		list2array(foldTree(tree, EmptyList(), \k, v, l -> Cons(conv(k, v), l)))
	} else {
		foldTree(tree, [], \key, value, acc -> arrayPush(acc, conv(key, value)));
	}
}

filtermapTreeToArray(tree : Tree<?, ??>, filterMapFn : (?, ??) -> Maybe<???>) -> [???] {
	pairs = tree2pairs(tree);
	filtermap(pairs, \p : Pair<?, ??> -> filterMapFn(p.first, p.second))
}

incTreeValue(tree : Tree<?, int>, key : ?) -> Tree<?, int> {
	n = lookupTreeDef(tree, key, 0);
	setTree(tree, key, n + 1)
}

decTreeValue(tree : Tree<?, int>, key : ?) -> Tree<?, int> {
	n = lookupTreeDef(tree, key, 0);
	setTree(tree, key, n - 1)
}

existsTree(tree : Tree<?, ??>, p : (?, ??) -> bool) -> bool {
	cataTreeLazy(tree, false,
		\key, value, pLeft, pRight, __ ->
			if (p(key, value)) true
			else pLeft() || pRight()
	);
}

allTreeSatisfies(tree : Tree<?, ??>, p : (?, ??) -> bool) -> bool {
	cataTreeLazy(tree, true,
		\key, value, pLeft, pRight, __ ->
			if (p(key, value)) pLeft() && pRight()
			else false
	);
}

mapTreeEntry(tree : Tree<?, ??>, key : ?, f : (??) -> ??) -> Tree<?, ??> {
	eitherMap(
		lookupTree(tree, key),
		\value -> setTree(tree, key, f(value)),
		tree
	);
}

mapTreeEntryDef(tree : Tree<?, ??>, key : ?, fn : (??) -> ??, def : ??) -> Tree<?, ??> {
	setTree(tree, key, eitherMap(lookupTree(tree, key), fn, def));
}

groupTreesOrdered(trees : [Tree<?, ??>]) -> Tree<?, [??]> {
	fold(trees, makeTree(), \a0, tree->
		foldTree(tree, a0, \key, value, a1->
			treePushToArrayValue(a1, key, value)
		)
	);
}

cataTree(tree : Tree<?, ??>, onLeaf : ???, onNode : (key : ?, value : ??, left : ???, right : ???, depth : int) -> ???) -> ??? {
	switch (tree) {
		TreeEmpty(): onLeaf;
		TreeNode(key, value, left, right, depth):
			onNode(
				key,
				value,
				cataTree(left, onLeaf, onNode),
				cataTree(right, onLeaf, onNode),
				depth
			);
	};
}

cataTreeLazy(tree : Tree<?, ??>, onLeaf : ???, onNode : (key : ?, value : ??, left : () -> ???, right : () -> ???, depth : int) -> ???) -> ??? {
	switch (tree) {
		TreeEmpty(): onLeaf;
		TreeNode(key, value, left, right, depth):
			onNode(
				key,
				value,
				\->cataTreeLazy(left, onLeaf, onNode),
				\->cataTreeLazy(right, onLeaf, onNode),
				depth
			);
	};
}

largeTree(tree : Tree<?, ??>) -> bool {
	switch (tree) {
		TreeEmpty(): false;
		TreeNode(__, __, __, __, depth): depth >= 10;
	}
}

treeIntervalSearch(tree : Tree<?, ??>, key : ?) -> Maybe<??> {
	binaryTreeIntervalSearch(tree, makeTree(), key)
}

binaryTreeIntervalSearch(tree : Tree<?, ??>, parent : Tree<?, ??>, key : ?) -> Maybe<??> {
	switch (tree) {
		TreeNode(k, value, left, right, __):
			if (key < k) {
				// If the key is strictly less then the key in the current node,
				// we definitely should consider a left subtree
				binaryTreeIntervalSearch(left, tree, key);
			} else {
				// Look for the closest greater node. It can be:
				// a) a parent, if there's no right subtree
				// b) a leftmost subnode in the right node
				closest = switch (right) {
					TreeEmpty(): parent;
					TreeNode(__, __, __, r, __): leftmostNode(right);
				}
				switch (closest) {
					TreeNode(closest_key,__, __, __, __): {
						if (key < closest_key) {
							// The closest greater key is less, then given - current node is a soultion
							Some(value)
						} else
							// Interval, which we search for lies strictly to the right
							binaryTreeIntervalSearch(right, TreeEmpty(), key)
					}
					// There are no greater keys, so current node satisfies
					TreeEmpty(): Some(value)
				}
			}
		TreeEmpty(): None();
	}
}

leftmostNode(tree : Tree<?, ??>) -> Tree<?, ??> {
	switch (tree) {
		TreeNode(__, __, left, __, __):
			switch (left) {
				TreeNode(__, __, __, __, __): leftmostNode(left);
				TreeEmpty(): tree;
			}
		TreeEmpty(): tree;
	}
}
