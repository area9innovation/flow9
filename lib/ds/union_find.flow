import ds/array;
import runtime;

export {
	// Pre-make n individual sets
	makeUnionFind(nsets : int) -> UnionFind;

	// Find the root set this set belongs to. If i is beyond the end, it is considered a singular set
	unionFind(u : UnionFind, i : int) -> int;

	// Join these two sets
	unionUnion(u : UnionFind, x : int, y : int) -> int;

	// For each set, what is the parent this set belongs to?
	// If it points to itself, it is the root of a set.
	UnionFind(mutable parents : [ref int]);
}

makeUnionFind(nodes : int) -> UnionFind {
	UnionFind(generate(0, nodes, \i -> ref i));
}

unionFind(u : UnionFind, i : int) -> int {
	unionEnsureCapacity(u, i);
	pr : ref int = u.parents[i];
	p = ^pr;
	if (p == i) i
	else {
		rp = unionFind(u, p);
		// Path compression
		pr := rp;
		rp;
	}
}

unionUnion(u : UnionFind, x : int, y : int) -> int {
	xset = unionFind(u, x);
	yset = unionFind(u, y);
	if (random() < 0.5) {
		u.parents[xset] := yset;
		yset;
	} else {
		u.parents[yset] := xset;
		xset;
	}
}

unionEnsureCapacity(u : UnionFind, i : int) -> void {
	n = length(u.parents);
	if (i >= n) {
		// Be sure to at least double capacity
		end = max(2 * n, i + 1);
		newParents = concat(u.parents, generate(n, end, \j -> ref j));
		// println([i, n, end, length(newParents)]);
		u.parents ::= newParents;
	}
}
