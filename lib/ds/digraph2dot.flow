import ds/digraph;
import algorithms;

// Converts digraph to string in DOT format by using user-defined styles of nodes, edges and graph itself

export {
	DiGraphStyle<?> ::= DotGraphLabel, DotCluster, DotSubgraph<?>;
		DotGraphLabel : (label : string);
		DotCluster : (nodeIds : Set<int>);
		DotSubgraph : (edges : [GEdge<?>]);

	GNodeStyle ::= DotLabel, DotColor, DotFillColor, DotShape, DotStyle;

	GEdgeStyle ::= DotLabel, DotColor, DotWidth, DotBidirectional;

		DotLabel : (label : string);
		DotColor : (color : string);
		DotFillColor : (color : string);
		DotShape : (shape : string);
		DotWidth : (width : string);
		DotStyle : (style : string);
		DotBidirectional : ();

	diGraph2dot(graph : DiGraph<?, ??>, graphstyles : [DiGraphStyle<??>], node2styles : (GNode<?>) -> [GNodeStyle], edge2styles : (GEdge<??>) -> [GEdgeStyle]) -> string;

	anyGraph2dot(root : int, nodes : [GNode<?>], edges : [GEdge<??>], graphstyles : [DiGraphStyle<???>], node2styles : (GNode<?>) -> [GNodeStyle], edge2styles : (GEdge<??>) -> [GEdgeStyle]) -> string;
}

diGraph2dot(graph : DiGraph<?, ??>, graphstyles : [DiGraphStyle<??>], node2styles : (GNode<?>) -> [GNodeStyle], edge2styles : (GEdge<??>) -> [GEdgeStyle]) -> string {
	// filter out edges that belongs to the subgraph if specified, otherwise use all edges
	edges = 
		extract(graphstyles, getGEdges(graph), \style : DiGraphStyle<??> -> {
			switch(style) {
				DotSubgraph(edges) : {
					edges |> Some;
				}
				default: None();
			};
		});

	nodesIds = map(edges, \edge -> [edge.from, edge.to]) |> concatA |> uniq;

	nodes = map(nodesIds, \nodeId -> getGNode(graph, nodeId));

	anyGraph2dot(graph.root.id, nodes, getGEdges(graph), graphstyles, node2styles, edge2styles)
}

anyGraph2dot(root : int, nodes : [GNode<?>], edges : [GEdge<??>], graphstyles : [DiGraphStyle<???>], node2styles : (GNode<?>) -> [GNodeStyle], edge2styles : (GEdge<??>) -> [GEdgeStyle]) -> string {
	// split available nodes into clusters if specified, otherwise create one cluster with all nodes in it
	clusters : [[GNode<?>]] = extract(graphstyles, [ nodes ], \style -> {
		switch(style) {
			DotCluster(cluster): {
				clustersPair : Pair<[GNode<?>], [GNode<?>]> = unzip(nodes, \node -> containsSet(cluster, node.id));

				[ clustersPair.first, clustersPair.second ] |> Some
			}
			default: None();
		}
	});

	dumpGClusters(root, clusters, edges, graphstyles, node2styles, edge2styles)
}

dumpGClusters(root : int, clusters : [[GNode<?>]], edges : [GEdge<??>], graphstyles : [DiGraphStyle<???>], node2styles : (GNode<?>) -> [GNodeStyle], edge2styles : (GEdge<??>) -> [GEdgeStyle]) -> string {
	clustersDumps = mapi(clusters, \i, nodes -> dumpGNodes(nodes, node2styles, root));

	notEmptyClustersDumps = filter(clustersDumps, \dump -> dump != "");

	nodesDump = 
		if (length(notEmptyClustersDumps) == 1) {
			notEmptyClustersDumps[0]
		} else {
			foldi(notEmptyClustersDumps, "", \i, acc, clusterDump -> {
				if (i == length(notEmptyClustersDumps) - 1) {
					acc + "\n" + clusterDump
				} else {
					acc + "\nsubgraph cluster {\n" + clusterDump + " color=\"orange\" }";
				}	
			})
		};

	edgesDump = dumpGEdges(edges, edge2styles);

	dumpGClusters2(graphstyles, nodesDump, edgesDump)
}

dumpGClusters2(styles : [DiGraphStyle<??>], nodesDump : string, edgesDump : string) -> string {
	stylesAttrs = 
		map(styles, \style -> {
			switch(style) {
				DotGraphLabel(label): "label=\"" + label + "\"";
				default: "";
			}
		});

	"digraph graphname {\n" +
	//	"concentrate=true\n" +
		nodesDump + "\n" +
		edgesDump + "\n" +
		strGlue(stylesAttrs, " ") + "\n}"
}

dumpGNodes(nodes : [GNode<?>], node2styles : (GNode<?>) -> [GNodeStyle], root : int) -> string {
	nodesDumps = map(nodes, \node -> {
		styles = node2styles(node);

		i2s(node.id) + " [" + dumpGNode(node, styles, root) + "];"
	});

	strGlue(nodesDumps, "\n") 
}

dumpGNode(node : GNode<?>, styles : [GNodeStyle], root : int) -> string {
	rootAttr = if (node.id == root) " root=\"true\"" else "";

	stylesAttrs = 
		map(styles, \style -> {
			switch(style) {
				DotLabel(label): if (label == "") "" else " label=\"" + label + "\"";
				DotColor(color): if (color == "") "" else " color=\"" + color + "\" penwidth=\"10\"";
				DotShape(shape): if (shape == "") "" else " shape=\"" + shape + "\"";
				DotStyle(dstyle): if (dstyle == "") "" else " style=\"" + dstyle + "\"";
				DotFillColor(color): if (color == "") "" else " fillcolor=\"" + color + "\"";
			}
		});

	strGlue(stylesAttrs, " ") + rootAttr// + " style=\"filled,dashed\""
}

dumpGEdges(edges : [GEdge<??>], edge2styles : (GEdge<??>) -> [GEdgeStyle]) -> string {
	edgesDumps = 
		map(edges, \edge -> {
			styles = edge2styles(edge);

			label = dumpGEdge(edge, styles);

			label2 = if (label == "") "" else " [" + label + "]";

			i2s(edge.from) + " -> " + i2s(edge.to) + label2 + ";"
		});

	strGlue(edgesDumps, "\n") 
}

dumpGEdge(edge : GEdge<??>, styles : [GEdgeStyle]) -> string {
	stylesAttrs = 
		map(styles, \style -> {
			switch(style) {
				DotLabel(label): if (label == "") "" else " label=\"" + label + "\"";
				DotColor(color): if (color == "") "" else " color=\"" + color + "\"";
				DotWidth(width): if (width == "") "" else " penwidth=\"" + width + "\"";
				DotBidirectional(): " dir=\"both\"";
			}
		});

	strGlue(stylesAttrs, " ")
}