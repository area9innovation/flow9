import ds/easygraph_utils;

export {
	// Add reverse edges to a graph, so it is effectively undirected
	// If we want to use findEGEdgeCut in a undirected graph, you have to remove the
	// reverse edge yourself first.
	makeUndirectedGraph(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??>;

	// For a directed edge, what nodes become unreachable when removing this edge
	EdgeCutAnalysis(
		edge : GEdge<??>,        // The edge being analyzed
		fromReachable : Set<int>, // What nodes are reachable from 'from' when edge is removed
		toReachable : Set<int>    // What nodes are reachable from 'to' when edge is removed
	);

	// Given an edge, find what nodes become unreachable when removing it
	findEGEdgeCut(graph : EasyGraph<?, ??>, edge : GEdge<??>) -> EdgeCutAnalysis<?, ??>;

	// Find edge cuts in a graph component. The graph should be strongly connected
	// (i.e., every node can reach every other node)
	// Give it a function to decide which edges to cut
	findEGEdgeCuts(graph : EasyGraph<?, ??>, cutEdge : (GEdge<??>) -> bool) -> [EdgeCutAnalysis<?, ??>];
}

// Convert a directed graph to undirected by adding reverse edges
makeUndirectedGraph(graph : EasyGraph<?, ??>) -> EasyGraph<?, ??> {
	// Add reverse of each edge
	foldTree(graph.edges, graph, \from, edges, acc -> {
		fold(edges, acc, \acc2, edge -> {
			if (edge.from == edge.to) acc2  // Skip self-loops
			else addEGEdge(acc2, GEdge(edge.to, edge.from, edge.data, edge.weight))
		})
	})
}

findEGEdgeCuts(graph : EasyGraph<?, ??>, cutEdge : (GEdge<??>) -> bool) -> [EdgeCutAnalysis<?, ??>] {
	// First get all edges
	allEdges : [GEdge<??>] = getEGEdges(graph);

	// For each edge, analyze what happens when we remove it
	filtermap(allEdges, \edge -> {
		if (cutEdge(edge)) {
			Some(findEGEdgeCut(graph, edge))
		} else None();
	});
}

findEGEdgeCut(graph : EasyGraph<?, ??>, edge : GEdge<??>) -> EdgeCutAnalysis<?, ??> {
	// Create graph without this edge
	modifiedGraph = removeEGEdge(graph, edge);

	// Find what's reachable from both sides
	fromReachable = reachableClosureFromNode(modifiedGraph, edge.from);
	toReachable = reachableClosureFromNode(modifiedGraph, edge.to);

	EdgeCutAnalysis(
		edge,
		fromReachable,
		toReachable
	);
}

/*main() {
	// Create a directed graph:
	//   A -> B -> C -> D
	//   A -> C
	// Expect an edge cut at C->D, since after removing it,
	// D is unreachable from A,B,C

	// Create nodes
	graph0 = makeEasyGraph();
	graph1 = fold(["A", "B", "C", "D"], graph0, \acc, name -> {
		p = addEGNodeData(acc, name);
		p.first;
	});

	// Add edges
	edges = [
		Pair(0, 1), // A->B
		Pair(1, 2), // B->C
		Pair(2, 3), // C->D
		Pair(0, 2)  // A->C
	];
	graph2 = fold(edges, graph1, \acc, edge -> {
		addEGEdge(acc, GEdge(edge.first, edge.second, "edge", 1))
	});

	// Find edge cuts for all edges
	cuts = findEGEdgeCuts(graph2, \e -> true);

	// Print results
	println("\nDirected Graph Analysis:");
	iter(cuts, \cut -> {
		fromNode = lookupTree(graph2.nodes, cut.edge.from);
		toNode = lookupTree(graph2.nodes, cut.edge.to);

		fromText = either(maybeMap(fromNode, \n -> n.data), "?");
		toText = either(maybeMap(toNode, \n -> n.data), "?");

		println("\nEdge cut at: " + fromText + " -> " + toText);

		println("  " + fromText + " reachable: " + nodesSetToString(graph2, cut.fromReachable));
		println("  " + toText + "  reachable: " + nodesSetToString(graph2, cut.toReachable));
	});
	quit(0);
}

nodesSetToString(graph : EasyGraph<string, string>, nodes : Set<int>) -> string {
	nodesList = set2array(nodes);
	nodeNames = filtermap(nodesList, \id -> {
		node = lookupTree(graph.nodes, id);
		maybeMap(node, \n -> n.data);
	});
	strGlue(nodeNames, ", ");
}

*/