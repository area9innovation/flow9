import ds/hashmap;
import string;

// Hash set implementation

export {

	// A hash table bases set of values.
	// USE WITH CAUTION, because it is a mutable data structure,
	// so calls of insert/remove functions change their arguments.
	HashSet : (hashMap : HashMap<?, bool>);

	makeHashSet(hash : (?) -> int) -> HashSet<?>;
	makeHashSet1(v : ?, hash : (?) -> int) -> HashSet<?>;

	buildHashSet(xs : [?], hash : (?) -> int) -> HashSet<?>;  // O(n)

	// modifiers
	insertHashSet(s : HashSet<?>, value : ?) -> void;  // O(1)

	removeHashSet(s : HashSet<?>, value : ?) -> void;  // O(1)

	clearHashSet(s : HashSet<?>) -> void;

	// getters
	containsHashSet(s : HashSet<?>, value : ?) -> bool; // O(1)

	existsHashSet(s : HashSet<?>, fn : (?) -> bool) -> bool;  // O(1)

	sizeHashSet(s : HashSet<?>) -> int; // O(1)

	isEmptyHashSet(s : HashSet<?>) -> bool; // O(1)

	// traversals
	foldHashSet(s : HashSet<?>, init : ??, fn : (??, ?) -> ??) -> ??;

	mapHashSet(s : HashSet<?>, fn : (?) -> ??) -> HashSet<??>;
	iterHashSet(s : HashSet<?>, fn : (?) -> void) -> void;

	filterHashSet(s : HashSet<?>, fn : (?) -> bool) -> HashSet<?>;

	hashSet2array(s : HashSet<?>) -> [?];

	// classic set operations
	// a or b
	mergeHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?>;
	// Merge array of sets
	mergeHashSetsA(xs : [HashSet<?>], hash : (?) -> int ) -> HashSet<?>;

	// a and b
	intersectHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?>;

	// a \ b
	differenceHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?>;

	// dump
	hashSet2string(s : HashSet<?>) -> string;
	hashSet2stringExt(s : HashSet<?>, fn : (?) -> string) -> string;

	// Since sets are based on trees, which might have hash tables of different size, you can not use == directly on sets
	equalHashSet(a : HashSet<?>, b : HashSet<?>) -> bool;

	// Make a copy of s. Since HashSet is mutable, it may make sense.
	copyHashSet(s : HashSet<?>) -> HashSet<?>;

	set2hashSet(s : Set<?>, hash : (?) -> int) -> HashSet<?>;
}

// constructors
makeHashSet(hash : (?) -> int) -> HashSet<?> {
	HashSet(makeHashMap(hash))
}

makeHashSet1(v : ?, hash : (?) -> int) -> HashSet<?> {
	hashSet = makeHashSet(hash);
	insertHashSet(hashSet, v);
	hashSet;
}

buildHashSet(xs : [?], hash : (?) -> int) -> HashSet<?> {
	hashSet = makeHashSet(hash);
	iter(xs, \x -> insertHashSet(hashSet, x));
	hashSet;
}

// modifiers
insertHashSet(s : HashSet<?>, value : ?) -> void {
	setHashMap(s.hashMap, value, true);
}

removeHashSet(s : HashSet<?>, value : ?) -> void {
	removeFromHashMap(s.hashMap, value)
}

clearHashSet(s : HashSet<?>) -> void {
	clearHashMap(s.hashMap);
}

// getters
containsHashSet(s : HashSet<?>, value : ?) -> bool {
	containsKeyHashMap(s.hashMap, value)
}

existsHashSet(s : HashSet<?>, fn : (?) -> bool) -> bool {
	foldHashSet(s, false, \acc, v -> {
		acc || fn(v)
	})
}

sizeHashSet(s : HashSet<?>) -> int {
	sizeHashMap(s.hashMap) // O(1)
}

isEmptyHashSet(s : HashSet<?>) -> bool {
	sizeHashMap(s.hashMap) == 0
}

// traversals
foldHashSet(s : HashSet<?>, init : ??, fn : (??, ?) -> ??) -> ?? {
	foldHashMap(s.hashMap, init, \k, v, acc -> {
		fn(acc, k)
	})
}

mapHashSet(s : HashSet<?>, fn : (?) -> ??) -> HashSet<??> {
	mapped = HashSet(prototypeHashMap(s.hashMap));
	iterHashSet(s, \x -> insertHashSet(mapped, fn(x)));
	mapped;
}

iterHashSet(s : HashSet<?>, fn : (?) -> void) -> void {
	iterHashMap(s.hashMap, \k, v -> fn(k));
}


filterHashSet(s : HashSet<?>, fn : (?) -> bool) -> HashSet<?> {
	filtered = HashSet(prototypeHashMap(s.hashMap));
	iterHashSet(s, \x ->
		if (fn(x)) {
			insertHashSet(filtered, x)
		}
	);
	filtered;
}

hashSet2array(s : HashSet<?>) -> [?] {
	hashMapKeys(s.hashMap)  // O(n)
}

// classic set operations
mergeHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?> {
	merged = copyHashSet(a);
	mergeHashMap(merged.hashMap, b.hashMap);
	merged;
}

intersectHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?> {
	intersected = HashSet(prototypeHashMap(a.hashMap));
	iterHashSet(a, \ax ->
		if (containsHashSet(b, ax)) {
			insertHashSet(intersected, ax);
		}
	);
	intersected;
}

differenceHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?> {
	difference = HashSet(prototypeHashMap(a.hashMap));
	iterHashSet(a, \x ->
		if (!containsHashSet(b, x)) {
			insertHashSet(difference, x);
		}
	);
	difference;
}

// dump
hashSet2string(s : HashSet<?>) -> string {
	hashSet2stringExt(s, toString);
}

hashSet2stringExt(s : HashSet<?>, fn : (?) -> string) -> string {
	strGlue(map(hashSet2array(s), fn), ", ")
}

equalHashSet(a : HashSet<?>, b : HashSet<?>) -> bool {
	s1 = sizeHashSet(a);
	s2 = sizeHashSet(b);
	if (s1 != s2)
		false
	else {
		foldHashSet(a, true, \acc, ae -> acc && containsHashSet(b, ae))
	}
}

mergeHashSetsA(xs : [HashSet<?>], hash : (?) -> int) -> HashSet<?> {
	fold(xs, makeHashSet(hash), mergeHashSets)
}

copyHashSet(s : HashSet<?>) -> HashSet<?> {
	HashSet(copyHashMap(s.hashMap));
}

set2hashSet(s : Set<?>, hash : (?) -> int) -> HashSet<?> {
	hs = HashSet(makeHashMapCap(hash, sizeSet(s)));
	iterSet(s, \x -> insertHashSet(hs, x));
	hs;
}
