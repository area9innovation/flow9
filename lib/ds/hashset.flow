import ds/hashmap;
import string;

// Hash set implementation

export {

	// A hash table bases set of values.
	// USE WITH CAUTION, because it is a mutable data structure,
	// so calls of insert/remove functions change their arguments.
	HashSet : (hashMap : HashMap<?, bool>);

	makeHashSet(hash : (?) -> int) -> HashSet<?>;
	makeHashSet1(v : ?, hash : (?) -> int) -> HashSet<?>;

	buildHashSet(xs : [?], hash : (?) -> int) -> HashSet<?>;  // O(n)

	// modifiers
	insertHashSet(s : HashSet<?>, value : ?) -> HashSet<?>;  // O(1)

	removeHashSet(s : HashSet<?>, value : ?) -> HashSet<?>;  // O(1)

	updateHashSet(s : HashSet<?>, value : ?, newValue : ?) -> HashSet<?>;  // remove value if any; then add newValue if none yet

	// getters
	containsHashSet(s : HashSet<?>, value : ?) -> bool; // O(1)

	existsHashSet(s : HashSet<?>, fn : (?) -> bool) -> bool;  // O(1)

	sizeHashSet(s : HashSet<?>) -> int; // O(1)

	isEmptyHashSet(s : HashSet<?>) -> bool; // O(1)

	// traversals
	foldHashSet(s : HashSet<?>, init : ??, fn : (??, ?) -> ??) -> ??;

	mapHashSet(s : HashSet<?>, fn : (?) -> ??) -> HashSet<??>;
	iterHashSet(s : HashSet<?>, fn : (?) -> void) -> void;

	filterHashSet(s : HashSet<?>, fn : (?) -> bool) -> HashSet<?>;

	hashSet2array(s : HashSet<?>) -> [?];
	hashSet2set(s : HashSet<?>) -> Set<?>;
	set2hashSet(s : Set<?>, hash : (?) -> int) -> HashSet<?>;

	// classic set operations
	// a or b
	mergeHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?>;
	// Merge array of sets
	mergeHashSetsA(xs : [HashSet<?>], hash : (?) -> int ) -> HashSet<?>;

	// a and b
	intersectHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?>;

	// a \ b
	differenceHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?>;

	// dump
	hashSet2string(s : HashSet<?>) -> string;
	hashSet2stringExt(s : HashSet<?>, fn : (?) -> string) -> string;

	// Since sets are based on trees, which might have hash tables of different size, you can not use == directly on sets
	equalHashSet(a : HashSet<?>, b : HashSet<?>) -> bool;

	// If hash set contains any elements x, pops it and returns Some(x), otherwise returns None(). O(n) complexity.
	popHashSet(s : HashSet<?>) -> Maybe<?>;

	// Make a copy of s. Since HashSet is mutable, it may make sense.
	copyHashSet(s : HashSet<?>) -> HashSet<?>;
}

// constructors
makeHashSet(hash : (?) -> int) -> HashSet<?> {
	HashSet(makeHashMap(hash))
}

makeHashSet1(v : ?, hash : (?) -> int) -> HashSet<?> {
	insertHashSet(makeHashSet(hash), v)
}

buildHashSet(xs : [?], hash : (?) -> int) -> HashSet<?> {
	fold(xs, makeHashSet(hash), insertHashSet)
}

// modifiers
insertHashSet(s : HashSet<?>, value : ?) -> HashSet<?> {
	setHashMap(s.hashMap, value, true) |> HashSet
}

removeHashSet(s : HashSet<?>, value : ?) -> HashSet<?> {
	removeFromHashMap(s.hashMap, value) |> HashSet
}

updateHashSet(s : HashSet<?>, value : ?, newValue : ?) -> HashSet<?> {
	tree = removeFromHashMap(s.hashMap, value);
	insertHashSet(HashSet(tree), newValue)
}

// getters
containsHashSet(s : HashSet<?>, value : ?) -> bool {
	containsKeyHashMap(s.hashMap, value)
}

existsHashSet(s : HashSet<?>, fn : (?) -> bool) -> bool {
	foldHashSet(s, false, \acc, v -> {
		acc || fn(v)
	})
}

sizeHashSet(s : HashSet<?>) -> int {
	sizeHashMap(s.hashMap) // O(1)
}

isEmptyHashSet(s : HashSet<?>) -> bool {
	sizeHashMap(s.hashMap) == 0
}

// traversals
foldHashSet(s : HashSet<?>, init : ??, fn : (??, ?) -> ??) -> ?? {
	foldHashMap(s.hashMap, init, \k, v, acc -> {
		fn(acc, k)
	})
}

mapHashSet(s : HashSet<?>, fn : (?) -> ??) -> HashSet<??> {
	foldHashSet(s, makeHashSet(s.hashMap.hash), \acc, x -> insertHashSet(acc, fn(x)))
}

iterHashSet(s : HashSet<?>, fn : (?) -> void) -> void {
	iterHashMap(s.hashMap, \k, v -> fn(k));
}


filterHashSet(s : HashSet<?>, fn : (?) -> bool) -> HashSet<?> {
	foldHashSet(s, makeHashSet(s.hashMap.hash), \acc, x -> {
		if (fn(x)) {
			insertHashSet(acc, x)
		} else {
			acc
		}
	})
}

hashSet2array(s : HashSet<?>) -> [?] {
	getHashMapKeys(s.hashMap)  // O(n)
}

hashSet2set(s : HashSet<?>) -> Set<?> {
	foldHashSet(s, makeSet(), \acc, x -> insertSet(acc, x));
}

set2hashSet(s : Set<?>, hash : (?) -> int) -> HashSet<?> {
	foldSet(s, makeHashSet(hash), \acc, x -> insertHashSet(acc, x));
}

// classic set operations
mergeHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?> {
	HashSet(mergeHashMap(a.hashMap, b.hashMap))
}

intersectHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?> {
	foldHashSet(a, makeHashSet(a.hashMap.hash), \acc, ax -> {
		if (containsHashSet(b, ax)) {
			insertHashSet(acc, ax)
		} else {
			acc
		}
	})
}

differenceHashSets(a : HashSet<?>, b : HashSet<?>) -> HashSet<?> {
	foldHashSet(a, makeHashSet(a.hashMap.hash), \acc, x -> {
		if (containsHashSet(b, x)) {
			acc
		} else {
			insertHashSet(acc, x)
		}
	})
}

// dump
hashSet2string(s : HashSet<?>) -> string {
	hashSet2stringExt(s, toString);
}

hashSet2stringExt(s : HashSet<?>, fn : (?) -> string) -> string {
	strGlue(map(hashSet2array(s), fn), ", ")
}

equalHashSet(a : HashSet<?>, b : HashSet<?>) -> bool {
	s1 = sizeHashSet(a);
	s2 = sizeHashSet(b);
	if (s1 != s2)
		false
	else {
		foldHashSet(a, true, \acc, ae -> acc && containsHashSet(b, ae))
	}
}

mergeHashSetsA(xs : [HashSet<?>], hash : (?) -> int) -> HashSet<?> {
	fold(xs, makeHashSet(hash), mergeHashSets)
}

popHashSet(s : HashSet<?>) -> Maybe<?> {
	maybeMap(popHashMap(s.hashMap), \p -> p.first);
}

copyHashSet(s : HashSet<?>) -> HashSet<?> {
	HashSet(copyHashMap(s.hashMap));
}