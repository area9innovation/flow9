import runtime;
import sys/concurrent;

export {
	// The actual state value. Do not change manually
	ConcurrentState(state : ref ?);

	// Create a new concurrent state with initial value
	makeConcurrentState(initialValue : ?) -> ConcurrentState<?>;

	// Process the state with a transformation function
	// Blocks until complete and returns the new value
	// The entire get-transform-update cycle is atomic
	processConcurrentState(state : ConcurrentState<?>, fn : (?) -> ?) -> ?;

	// Get current value
	getConcurrentState(state : ConcurrentState<?>) -> ?;

	// Transform state and extract data atomically
	// Returns the extracted value while updating the state
	extractConcurrentState(state : ConcurrentState<?>, fn : (?) -> Pair<?, ??>) -> ??;
}

makeConcurrentState(initialValue : ?) -> ConcurrentState<?> {
	ConcurrentState(ref initialValue)
}

processConcurrentState(state : ConcurrentState<?>, fn : (?) -> ?) -> ? {
	processFunc = synchronizedUnaryFn(state.state, \ignored -> {
		currentValue = ^(state.state);
		newValue = fn(currentValue);
		state.state := newValue;
		newValue
	});
	processFunc(true)
}

getConcurrentState(state : ConcurrentState<?>) -> ? {
	processConcurrentState(state, \x -> x)
}

extractConcurrentState(state : ConcurrentState<?>, fn : (?) -> Pair<?, ??>) -> ?? {
	extractFunc = synchronizedUnaryFn(state.state, \ignored -> {
		currentValue = ^(state.state);
		pair = fn(currentValue);
		state.state := pair.first;
		pair.second
	});
	extractFunc(true)
}