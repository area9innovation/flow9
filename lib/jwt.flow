import ds/array;
import formats/json/json;

export {
	// Create a JWT signed with HS256 (HmacSHA256).
	native createJwt : (
		key : string,
		issuer : string,
		subject : string,
		audience : string,
		// Dates are expected to be ISO 8601 format
		expiration : string,
		notbefore : string,
		issuedat : string,
		id : string
	) -> string = FlowJwt.createJwt;

	// Create a JWT signed with HS256 (HmacSHA256).
	// Only JsonString and JsonDouble can be used
	createJwtClaims(
		key : string,
		claims : JsonObject
	) -> string;

	// Verify JWT's signed with HS256 (HmacSHA256). The key is the base64 encoded secret.
	// Return "OK" if the JWT signatuer is valid.
	native verifyJwt : (jwt : string, key : string) -> string = FlowJwt.verifyJwt;

	// Decode an JWT signed with HS256 (HmacSHA256). The key is the base64 encoded secret.
	native decodeJwt : (
		jwt : string,
		key : string,
		callback : (issuer : string, subject : string, audience : string, expiration : string, notBefore : string, issuedAt : string, id : string, impersonatedByUserId : string) -> void,
		onError : (verify : string) -> void
	) -> void = FlowJwt.decodeJwt;

	// Verify JWT's, signed with the public/private key algorithms: RSA or ECDSA
	// The algorithm argument must be one of the "RS256", "RS384", "RS512", "ES256", "ES384", "ES512" or "" (empty).
	// If algorithm argument is empty, then the function gets the actual algorithm from "alg" member of jwt's header.
	// For example the header can be {"alg": "ES256"} for this case.
	// When the algorithm is RS (RSA), then the key string must be one of:
	//   1. The public key in x509 format (PEM)
	//   2. Json object (JWK format) with two required fields "n" and "e" (the public key modulus and exponent) for example {"n": "6S7asUuzq5Q_3U9rbs-PkDV", "e": "AQAB"}
	// When the algorithm is ES (ECDSA) then the key string must be one of:
	//   1. The public key in x509 format (PEM)
	//   2. Json object (JWK format) with three required fields "x", "y" and "crv" (the point and the curve) for example {"x": "AYeAr-K3BMaS", "y": "AGLdv92aARm6efe_sE", "crv": "P-521"}
	// See https://datatracker.ietf.org/doc/html/rfc7518 for all the details.
	// Return "OK" if the JWT is valid, otherwise an error message.
	native verifyJwtWithPublicKey : (jwt : string, key : string, algorithm : string) -> string = FlowJwt.verifyJwtWithPublicKey;
}

createJwtClaims(
	key : string,
	claims : JsonObject
) -> string {

	pair = fold(
		claims.members,
		Pair([],[]),
		\acc : Pair<[string], [flow]>, p : Pair<string, Json> -> {
			switch(p.second) {
				JsonString(s): Pair(arrayPush(acc.first, p.first), arrayPush(acc.second, s));
				JsonDouble(d): Pair(arrayPush(acc.first, p.first), arrayPush(acc.second, d));
				default: acc; // skip
			}
		}
	);
	createJwtClaimsNative(key, pair.first, pair.second);
}

native createJwtClaimsNative : (
	key : string,
	keys : [string],
	values : [flow]
) -> string = FlowJwt.createJwtClaims;


createJwtClaimsNative(
	key : string,
	keys : [string],
	values : [flow]
) -> string {
	""; // Not implemented
}

createJwt(
	key : string,
	issuer : string,
	subject : string,
	audience : string,
	// Dates are expected to be ISO 8601 format
	expiration : string,
	notbefore : string,
	issuedat : string,
	id : string
) -> string {
	""; // Not implemented
}

verifyJwt(jwt : string, key : string) -> string {
	""; // Not implemented
}

verifyJwtWithPublicKey(jwt : string, key : string, algorithm : string) -> string {
	"Not implemented";
}

decodeJwt(
	jwt : string,
	key : string,
	callback : (issuer : string, subject : string, audience : string, expiration : string, notBefore : string, issuedAt : string, id : string, impersonatedByUserId : string) -> void,
	onError : (verify : string) -> void
) -> void {
	onError("decodeJwt is not implemented");
}
