export {
	// recognize array of flow
	native isArray : (value : flow) -> bool = Native.isArray;
	// check if these are structs of the same type; isSameStructType(a,a) == isStruct
	native isSameStructType : (value1 : flow, value2 : flow) -> bool = Native.isSameStructType;
	// compare numbers and strings by value, and structs, arrays or closures by pointer
	native isSameObj : (value1 : ?, value2 : ?) -> bool = Native.isSameObj;

	// Construct a struct of the given name with the given parameters
		IllegalStruct(); // Common default value for makeStructValue
	native makeStructValue : (structname : string, args : [flow], default_value : flow) -> flow = Native.makeStructValue;

	// If value is a struct, extract the argument values
	native extractStructArguments : (value : flow) -> [flow] = Native.extractStructArguments;

	// What is the type tag for this value? Supported only in cpp
	// 0: void, 1: bool, 2: int, 3: double, 4 : string, 5: array, 6: struct, 12: code pointer, 20: native function
	// 31: reference, 32: native value, 34: closure pointer, 48: captured frame
	native getDataTagForValue : (value : flow) -> int = Native.getDataTagForValue;

	// Converts int or double value to double value.
	number2double(value : ?) -> double;

	// A special function to strip away the type. Useful to make arrays of mixed things [flow(1), flow("a")], or to subvert the type checker
	flow(i : ?) -> flow;

	flow2b(f : flow) -> bool;
	flow2i(f : flow) -> int;
	flow2d(f : flow) -> double;
	flow2s(f : flow) -> string;

	// Convert any value to a string
	toString : (?) -> string;
}

flow(i : ?) -> flow {
	cast(i : ? -> flow);
}

toString(v : ?) -> string {
	toString2(flow(v));
}

native toString2 : (flow) -> string = Native.toString;

flow2b(f : flow) -> bool {
	cast(f : flow -> bool);
}

flow2i(f : flow) -> int {
	cast(f : flow -> int);
}

flow2d(f : flow) -> double {
	cast(f : flow -> double);
}

flow2s(f : flow) -> string {
	cast(f : flow -> string);
}

number2double(value : ?) -> double {
	number2double2(flow(value));
}

native number2double2 : io (value : flow) -> double = Native.number2double;

extractStructArguments(value : flow) -> [flow] {
	[]
}

getDataTagForValue(value : flow) -> int {
	0;
}
