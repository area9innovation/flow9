export {
	// recognize array of flow
	native isArray : (value : flow) -> bool = Native.isArray;
	// check if these are structs of the same type; isSameStructType(a,a) == isStruct
	native isSameStructType : (value1 : ?, value2 : ??) -> bool = Native.isSameStructType;
	// compare numbers and strings by value, and structs, arrays or closures by pointer
	native isSameObj : (value1 : ?, value2 : ?) -> bool = Native.isSameObj;

	// Construct a struct of the given name with the given parameters
		IllegalStruct(); // Common default value for makeStructValue
	native makeStructValue : (structname : string, args : [flow], default_value : flow) -> flow = Native.makeStructValue;

	// If value is a struct, extract the argument values, otherwise return an empty array;
	native extractStructArguments : (value : flow) -> [flow] = Native.extractStructArguments;

	// If value is a struct, extract the name of the struct, otherwise empty string.
	// Currently is implemented in: java backend.
	native extractStructName : (value : flow) -> string = Native.extractStructName;

	// Returns the type of a value, like 'int', 'bool', 'Some', etc.
	// Currently is implemented in: java backend.
	native runtimeValueType : (flow) -> string = Native.runtimeValueType;

	// Check, if a struct is known to the runtime.
	// Currently is implemented in: java backend.
	native isStructName : (name : string) -> bool = Native.isStructName;

	// If value is a function, return its arity. If not a function, returns -1.
	// Currently is implemented in: java backend.
	native extractFuncArity : (fn : flow) -> int = Native.extractFuncArity;

	// Returns the names of struct fields or empty array, if is not a struct.
	// Currently is implemented in: java backend.
	native structFieldNames : (struct_name : string) -> [string] = Native.structFieldNames;

	// Sets the mutable field value. If not a struct is passed, nothing happens.
	// Currently is implemented in: java backend.
	native setMutableField : (struct_val : flow, field : string, value : flow) -> void = Native.setMutableField;

	// In some cases, i.e. when implementing an interpreter, it is needed to operate with 'void' as it was a value.
	// Currently is implemented in: java backend.
	native voidValue : () -> flow = Native.voidValue;

	// Checks if a function in runtime exists.
	// Currently is implemented in: java backend.
	native hostCallExists : io (name: string) -> bool = Native.hostCallExists;

	// What is the type tag for this value? Supported only in cpp and java
	// 0: void, 1: bool, 2: int, 3: double, 4 : string, 5: array, 6: struct, 12: code pointer, 20: native function
	// 31: reference, 32: native value, 34: closure pointer, 48: captured frame
	native getDataTagForValue : (value : flow) -> int = Native.getDataTagForValue;

	// Constants for gata tags, returned by getDataTagForValue
	void_data_tag = 0;
	bool_data_tag = 1;
	int_data_tag = 2;
	double_data_tag = 3;
	string_data_tag = 4;
	array_data_tag = 5;
	struct_data_tag = 6;
	reference_data_tag = 31;
	native_data_tag = 32;
	function_data_tag = 34;

	// Converts int or double value to double value.
	number2double(value : ?) -> double;

	// A special function to strip away the type. Useful to make arrays of mixed things [flow(1), flow("a")], or to subvert the type checker
	flow(i : ?) -> flow;

	flow2b(f : flow) -> bool;
	flow2i(f : flow) -> int;
	flow2d(f : flow) -> double;
	flow2s(f : flow) -> string;

	// Convert any value to a string
	toString : (?) -> string;
}

flow(i : ?) -> flow {
	cast(i : ? -> flow);
}

toString(v : ?) -> string {
	toString2(flow(v));
}

native toString2 : (flow) -> string = Native.toString;

flow2b(f : flow) -> bool {
	cast(f : flow -> bool);
}

flow2i(f : flow) -> int {
	cast(f : flow -> int);
}

flow2d(f : flow) -> double {
	cast(f : flow -> double);
}

flow2s(f : flow) -> string {
	cast(f : flow -> string);
}

number2double(value : ?) -> double {
	number2double2(flow(value));
}

native number2double2 : io (value : flow) -> double = Native.number2double;

extractStructArguments(value : flow) -> [flow] {
	[]
}

extractStructName(value : flow) -> string {
	"";
}

runtimeValueType(value : flow) -> string {
	"";
}

extractFuncArity(fn : flow) -> int {
	-1;
}

structFieldNames(struct_name : string) -> [string] {
	[]
}

setMutableField(struct_val : flow, field : string, value : flow) -> void {
}

getDataTagForValue(value : flow) -> int {
	0;
}

hostCallExists(name : string) -> bool {
	false;
}
