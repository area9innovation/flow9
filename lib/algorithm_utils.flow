
import ds/array; // filter, exists
import ds/tree;

export {
	// Removes elements from "a" that exist in "b".
	// Does not remove duplicates from the resulting array, but does remove duplicates of elements from b.
	// Example: subtractA([1, 2, 2, 1, 3], [1]) = [2, 2, 3]
	subtractA(a : [?], b : [?]) -> [?];
	subtractAfn(a : [?], b : [??], fn : (?) -> ??) -> [?];

	// Removes items from "a" that don't exist in "b".
	intersection(a : [?], b : [?]) -> [?];
	intersectionFn(a : [?], b : [??], fn : (?) -> ??) -> [?];
}

// Removes elements from a that are equal to elements of b.
// Does not remove duplicates from the resulting array.
// Example: subtractA([1, 2, 2, 1, 3], [1]) = [2, 2, 3]
subtractA(a : [?], b : [?]) -> [?] {
	subtractAfn(a, b, idfn)
}

subtractAfn(a : [?], b : [??], fn : (?) -> ??) -> [?] {
	if (length(b) < 20) {
		filter(a, \v -> !contains(b, fn(v)))
	} else {
		bSet = fold(b, makeTree(), \acc, x -> setTree(acc, x, true));
		filter(a, \v -> !lookupTreeDef(bSet, fn(v), false))
	}
}

intersection(a : [?], b : [?]) -> [?] {
	intersectionFn(a, b, idfn)
}

intersectionFn(a : [?], b : [??], fn : (?) -> ??) -> [?] {
	if (length(b) < 20) {
		filter(a, \v -> contains(b, fn(v)))
	} else {
		bSet = fold(b, makeTree(), \acc, x -> setTree(acc, x, true));
		filter(a, \v -> lookupTreeDef(bSet, fn(v), false))
	}
}

