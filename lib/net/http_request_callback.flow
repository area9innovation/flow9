import runtime;

export {
	HttpRequestCallbacks(
		onData : (string) -> void,
		onError : (string) -> void,
		onStatus : (int) -> void
	);

	mergeHttpRequestCallbacks(cbs : [HttpRequestCallbacks]) -> HttpRequestCallbacks;

	setHttpRequestCallback(cb : (url : string, postMethod : bool, headers : [KeyValue], params : [KeyValue]) -> HttpRequestCallbacks) -> void;
	clearHttpRequestCallback() -> void;

	getHttpRequestCallback() -> Maybe<(url : string, postMethod : bool, headers : [KeyValue], params : [KeyValue]) -> HttpRequestCallbacks>;
}

httpRequestCallback : ref Maybe<(url : string, postMethod : bool, headers : [KeyValue], params : [KeyValue]) -> HttpRequestCallbacks> = ref None();

setHttpRequestCallback(cb : (url : string, postMethod : bool, headers : [KeyValue], params : [KeyValue]) -> HttpRequestCallbacks) -> void {
	httpRequestCallback := Some(cb);
}

clearHttpRequestCallback() -> void {
	httpRequestCallback := None();
}

getHttpRequestCallback() -> Maybe<(url : string, postMethod : bool, headers : [KeyValue], params : [KeyValue]) -> HttpRequestCallbacks> {
	^httpRequestCallback;
}

mergeHttpRequestCallbacks(cbs : [HttpRequestCallbacks]) -> HttpRequestCallbacks {
	HttpRequestCallbacks(
		\data -> iter(cbs, \cb -> cb.onData(data)),
		\err -> iter(cbs, \cb -> cb.onError(err)),
		\status -> iter(cbs, \cb -> cb.onStatus(status))
	)
}
