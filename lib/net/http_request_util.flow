import ds/tuples;
import date;
import maybe;
import algorithm_utils;
import formats/html/html;

export {
	HttpRequestParamPosition ::= HRPPosition, HRPPositionAny;
		HRPPosition(pos : int);
		HRPPositionAny();

	HttpRequestSelectionRule ::= HRRSURL, HRRSPost, HRRSHeader, HRRSParam;
		HRRSURL(url : string);
		HRRSPost(post : bool);
		HRRSHeader(header : KeyValue, position : HttpRequestParamPosition);
		HRRSParam(param : KeyValue, position : HttpRequestParamPosition);

	HttpRequestPrepareOptions ::= HRPOTimeFiltering, HRPOFilterParams;
		HRPOTimeFiltering();
		HRPOFilterParams(keys : [string]);

	HttpRequestsCompareRule ::= HRCRCompareAll, HRCRCompareURL, HRCRComparePost, HRCRCompareHeader, HRCRCompareHeaderValues, HRCRCompareParam, HRCRCompareParamValues;
		HRCRCompareAll();
		HRCRCompareURL();
		HRCRComparePost();
		HRCRCompareHeader();
		HRCRCompareHeaderValues(keys : [string]);
		HRCRCompareParam();
		HRCRCompareParamValues(keys : [string]);

	HttpResponseHandleRule ::= HRHResponseAcceptWithoutChecking, HRHResponseCheckType, HRHResponseCheckTypeAndStatus, HRHResponseCheckAll, HRHResponseReject;
		HRHResponseAcceptWithoutChecking();
		HRHResponseCheckType();
		HRHResponseCheckTypeAndStatus();
		HRHResponseCheckAll();
		HRHResponseReject();

	HttpRequestRecordHandleRule(
		requestSelectionRules : [HttpRequestSelectionRule],
		requestPrepareOptions : [HttpRequestPrepareOptions],
		requestsCompareRules : [HttpRequestsCompareRule],
		responseHandleRule : HttpResponseHandleRule
	);

	setHttpRequestHandleRules(rules : [ HttpRequestRecordHandleRule ]) -> void;
	getHttpRequestHandleRules() -> [ HttpRequestRecordHandleRule ];
	isHttpRequestHandleRulesSet() -> bool;

	filterRequestRecordHeaders(headers : [KeyValue]) -> [KeyValue];

	filterRequestRecordParams(params : [KeyValue]) -> [KeyValue];

	/** Converts a list of KeyValue pairs to application/x-www-form-urlencoded
	 *
	 * If in any of KeyValue pairs the key or the value is an empty string,
	 * that pair will not be included in the resulting string.
	 * In the case of encode = false parameter values will be not urlencoded
	 */
	serializeRequestParameters(params : [KeyValue], encode : bool) -> string;

	/** Creates a URL query string, e.g. "?k1=v1&k2=v2".
	 *
	 * If in any of KeyValue pairs the key or the value is an empty string,
	 * that pair will not be included in the resulting string.
	 *
	 * If a resulting query string is empty, the question mark is not added.
	 */
	urlQuery(params : [KeyValue]) -> string;

	/** Creates a URL fragment string, e.g. "#k1=v1&k2=v2".
	 *
	 * If in any of KeyValue pairs the key or the value is an empty string,
	 * that pair will not be included in the resulting string.
	 *
	 * If a resulting fragment string is empty, the hash sign is not added.
	 */
	urlFragment(params : [KeyValue]) -> string;
}

httpRequestHandleRules : ref Maybe<[ HttpRequestRecordHandleRule ]> = ref None();

filterRequestRecordHeaders(headers : [KeyValue]) -> [KeyValue] {
	filter(headers, \p -> !(p.key == "Authorization" && startsWith(p.value, "Bearer ")))
}

filterRequestRecordParams(params : [KeyValue]) -> [KeyValue] {
	filter(params, \p -> p.key != "t" && p.key != "jwt")
}

setHttpRequestHandleRules(rules : [ HttpRequestRecordHandleRule ]) -> void {
	httpRequestHandleRules := Some(rules);
}

getHttpRequestHandleRules() -> [ HttpRequestRecordHandleRule ] {
	either(
		^httpRequestHandleRules,
		[]
	)
}
isHttpRequestHandleRulesSet() -> bool {
	isSome(^httpRequestHandleRules)
}

serializeRequestParameters(params : [KeyValue], encode : bool) -> string {
	serializeKeyValue : (KeyValue) -> Maybe<string> = \kv ->
		if (kv.key == "" || kv.value == "")
			None()
		else
			Some(kv.key + "=" + (if (encode) urlEncode(kv.value) else kv.value));
	strGlue(filtermap(params, serializeKeyValue), "&");
}

urlQuery(params : [KeyValue]) -> string {
	serializedParams = serializeRequestParameters(params, true);
	if (serializedParams == "") "" else "?" + serializedParams;
}

urlFragment(params : [KeyValue]) -> string {
	serializedParams = serializeRequestParameters(params, false);
	if (serializedParams == "") "" else "#" + serializedParams;
}
