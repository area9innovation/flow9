// Â© Copyright 2011 Area9 Technologies.
import ds/tuples;

export {
	// List of allowed request methods for httpCustomRequest
	RequestMethod ::= RequestMethodBase, PUT, PATCH, DELETE;
	RequestMethodBase ::= GET, POST;
		GET();
		POST();
		PUT();
		PATCH();
		DELETE();


	// Describes content for httpCustomRequest functionality.
	// RequestParameters contains KeyValue pairs for application/x-www-urlencoded and multipart/form-data requests content types.
	// RequestPayload contains a string which should be written into request body.
	RequestData ::= RequestPayload, RequestParameters;
		RequestPayload(data : string);
		RequestParameters(parameters : [KeyValue]);

	UploadEventListener ::= UploadSelect, UploadSelectUnfit, UploadCancel, UploadOnlyEventListener;
		// Here we get the filename and the size.
		UploadSelect(onSelect: (name: string, size: int) -> bool);
		// What to do if the selected file doesn't fit
		UploadSelectUnfit(onSelectUnfit : () -> void);
		// If the user cancels openFileDialog
		UploadCancel(onCancel: () -> void);

	// used in filesystem.flow
	UploadOnlyEventListener ::= UploadData, UploadProgress, UploadOpen, UploadError;
		// Once the upload is done, here is the browser response
		UploadData(onData: (data:string) -> void);
		// During the upload, we get progress data
		UploadProgress(onProgress: (loaded:double, total:double) -> void);
		// When the connection to upload is opened
		UploadOpen(onOpen: () -> void);
		// When something goes wrong
		UploadError(onError: (err:string) -> void);

	method2string(method : RequestMethod) -> string;
	string2method(method : string) -> RequestMethod; // POST by default

	ResponseEncoding ::= ResponseEncodingAuto, ResponseEncodingUtf8, ResponseEncodingWtf8, ResponseEncodingByte;
		// defined by url flags
		ResponseEncodingAuto();
		ResponseEncodingUtf8();
		ResponseEncodingWtf8();	// Old format, for backward compatibility. https://simonsapin.github.io/wtf-8/
		// Without encoding - each symbol is a one byte length
		ResponseEncodingByte();

	responseEncoding2string(responseEncoding : ResponseEncoding) -> string;
	string2responseEncoding(responseEncoding : string) -> ResponseEncoding; // ResponseEncodingAuto() by default

	// Request style options
	RequestStyle ::= RequestAsync, RequestEncoding, RequestHeaders, RequestTimeout, RequestData, RequestNoCacheTimestamp, RequestOnChunk;
		RequestAsync(async : bool);
		RequestEncoding(responseEncoding : ResponseEncoding);
		RequestHeaders(headers : [KeyValue]);
		RequestTimeout(timeout : int);
		RequestNoCacheTimestamp(enabled : bool);
		RequestOnChunk(onChunk: (chunk: string, loaded: double, total: double) -> void);
}

method2string(method : RequestMethod) -> string {
	switch(method) {
		GET(): "GET";
		POST(): "POST";
		PUT(): "PUT";
		PATCH(): "PATCH";
		DELETE(): "DELETE";
	}
}

string2method(method : string) -> RequestMethod {
	if (method == "GET") {
		GET()
	} else if (method == "PUT") {
		PUT()
	} else if (method == "PATCH") {
		PATCH()
	} else if (method == "DELETE") {
		DELETE()
	} else {
		POST()
	}
}

responseEncoding2string(responseEncoding : ResponseEncoding) -> string {
	switch(responseEncoding) {
		ResponseEncodingAuto(): "auto";
		ResponseEncodingUtf8(): "utf8";
		ResponseEncodingWtf8(): "wtf8"
		ResponseEncodingByte(): "byte";
	}
}

string2responseEncoding(responseEncoding : string) -> ResponseEncoding {
	if (responseEncoding == "utf8") {
		ResponseEncodingUtf8();
	} else if (responseEncoding == "wtf8") {
		ResponseEncodingWtf8();
	} else if (responseEncoding == "byte") {
		ResponseEncodingByte()
	} else {
		ResponseEncodingAuto()
	}
}