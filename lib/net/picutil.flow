import sys/target; // mobile
import fs/filesystem; // fileExists
import string;
import net/url_utils; // removeTokenFromUrl

export {
	// A pair of debugging functions to get server content when product is executed locally.
	// Applies
	setPictureServerURL(url : string) -> void;
	addServerPathIfRelative(url : string) -> string;  // used in renderForm

	// A pair of debugging functions enabling paths mapping for Picture and Video.
	// Make sure your mapping function is fast.
	// Also it is important to remove mapping as soon as it's unneeded anymore.
	addMediaPathMapping(mapping : (string) -> string) -> void;
	removeMediaPathMapping(mapping : (string) -> string) -> void;
	applyMediaPathMapping(url : string) -> string; // used in renderForm

	// Temporal hack so that c++ runner can locate media files
	fixPictureUrl(url: string) -> string;
}


picServerURL = ref "";

setPictureServerURL(url : string) -> void {
	picServerURL := url;
}

addServerPathIfRelative(url : string) {
	if (^picServerURL == "" || strContains(url, "://") || startsWith(url, "data:") || (!mobile && fileExists(url))) {
		// No content server provided and or absolute path
		// or if available by relative path (server side execution or content is downloaded) #36668
		url
	} else {
		^picServerURL + url
	}
}

// Let's use by default keys without tokens.
mediaPathMappings : ref [(string) -> string] = ref [removeTokenFromUrl];

addMediaPathMapping(mapping) {
	refArrayPush(mediaPathMappings, mapping)
}

removeMediaPathMapping(mapping) {
	mediaPathMappings := removeFirst(^mediaPathMappings, mapping)
}

applyMediaPathMapping(url : string) -> string {
	fold(^mediaPathMappings, url, \acc,mapping -> mapping(acc))
}

fixPictureUrl(url : string) -> string {
	i = strIndexOf(url, "?v=");
	url1 = if (i >= 0 && !js) strLeft(url, i) else url;

	if (fileExists(url1) || !fileExists(getUrlParameter("imagePrefix") + url1)) url1
	else getUrlParameter("imagePrefix") + url1
}
