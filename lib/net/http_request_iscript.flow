import net/http_request_util;
import material/internal/types;

export {
	HttpRequestResponseCompareFns(
		requestsCompareFn : (received : IScriptRequestRecord, stored : IScriptRequestRecord) -> bool,
		responseCompareFn : (received : IScriptRequestRespose, stored : IScriptRequestRespose) -> bool
	);

	getHttpRequestResponseCompareFns(r : IScriptRequestRecord) -> HttpRequestResponseCompareFns;

	setDummyHttpRequestCompareRules(rules : [HttpRequestsCompareRule]) -> void;
	getDummyHttpRequestCompareRules() -> [HttpRequestsCompareRule];
	isDummyHttpRequestCompareRulesSet() -> bool;

	setDummyHttpResponseHandleRule(rule : HttpResponseHandleRule) -> void;
	getDummyHttpResponseHandleRule() -> HttpResponseHandleRule;
	isDummyHttpResponseHandleRuleSet() -> bool;

	dummyHttpRequestCompareFn(received : IScriptRequestRecord, stored : IScriptRequestRecord) -> bool;
	dummyHttpResponseCompareFn(left : IScriptRequestRespose, right : IScriptRequestRespose) -> bool;
}

dummyHttpRequestCompareRules : ref Maybe<[HttpRequestsCompareRule]> = ref None();

dummyHttpResponseHandleRule : ref Maybe<HttpResponseHandleRule> = ref None();

setDummyHttpRequestCompareRules(rules : [HttpRequestsCompareRule]) -> void {
	dummyHttpRequestCompareRules := Some(rules);
}

getDummyHttpRequestCompareRules() -> [HttpRequestsCompareRule] {
	either(
		^dummyHttpRequestCompareRules,
		[]
	)
}

isDummyHttpRequestCompareRulesSet() -> bool {
	isSome(^dummyHttpRequestCompareRules)
}

setDummyHttpResponseHandleRule(rule : HttpResponseHandleRule) -> void {
	dummyHttpResponseHandleRule := Some(rule);
}

getDummyHttpResponseHandleRule() -> HttpResponseHandleRule {
	either(
		^dummyHttpResponseHandleRule,
		HRHResponseCheckAll()
	)
}

isDummyHttpResponseHandleRuleSet() -> bool {
	isSome(^dummyHttpResponseHandleRule)
}


timeFilteredKeyValues(kv : [KeyValue]) -> [KeyValue] {
	filter(kv, \v -> !isSome(validateTime(v.value)))
}

paramFilteredKeyValues(kv : [KeyValue], options : HRPOFilterParams ) -> [KeyValue] {
	subtractAfn(kv, options.keys, \v -> v.key)
}


filterRequestRecord(record : IScriptRequestRecord, options : [HttpRequestPrepareOptions]) -> IScriptRequestRecord {
	IScriptRequestRecord(
		record.url,
		record.post,
		filterRequestRecordHeaders(record.headers)
		|> (\v -> if (contains(options, HRPOTimeFiltering())) timeFilteredKeyValues(v) else v),
		filterRequestRecordParams(record.params)
		|> (\v -> if (contains(options, HRPOTimeFiltering())) timeFilteredKeyValues(v) else v)
		|> (\v -> if (contains(options, HRPOFilterParams([]))) paramFilteredKeyValues(v, extractStruct(options, HRPOFilterParams([]))) else v),
		record.delay,
		record.response
	)
}

dummyHttpRequestCompareFn(received2 : IScriptRequestRecord, stored2 : IScriptRequestRecord) -> bool {
	received = filterRequestRecord(received2, []);
	stored = filterRequestRecord(stored2, []);
	if (isDummyHttpRequestCompareRulesSet()) {
		compareRequestsWithRules(received, stored, getDummyHttpRequestCompareRules())
	} else {
		(received.url == stored.url && received.post == stored.post && received.headers == stored.headers && received.params == stored.params);
	}
}

dummyHttpResponseCompareFn(left : IScriptRequestRespose, right : IScriptRequestRespose) -> bool {
	if (isDummyHttpResponseHandleRuleSet()) {
		handleResponseWithRule(left, right, getDummyHttpResponseHandleRule())
	} else {
		left == right
	}
}

compareRequestsWithRules(req1 : IScriptRequestRecord, req2 : IScriptRequestRecord, rules : [HttpRequestsCompareRule]) -> bool {
	fold(rules, true, \acc, rcr -> {
		if (acc) {
			switch (rcr : HttpRequestsCompareRule) {
				HRCRCompareAll() : {
					req1.url == req2.url && req1.post == req2.post &&
						req1.headers == req2.headers && req1.params == req2.params
				}
				HRCRCompareURL() : req1.url == req2.url;
				HRCRComparePost() : req1.post == req2.post;
				HRCRCompareHeader() : req1.headers == req2.headers;
				HRCRCompareHeaderValues(keys) : {
					fold(keys, true, \acc2, kcv ->
						eitherMap(
							find(req1.headers, \v2 -> v2.key == kcv),
							\v3 -> eitherMap(find(req2.headers, \v2 -> v2.key == kcv), \v4 -> v3 == v4, false),
							false
						)
					)
				}
				HRCRCompareParam() : req1.params == req2.params;
				HRCRCompareParamValues(keys) : {
					fold(keys, true, \acc2, kcv ->
						eitherMap(
							find(req1.params, \v2 -> v2.key == kcv),
							\v3 -> eitherMap(find(req2.params, \v2 -> v2.key == kcv), \v4 -> v3 == v4, false),
							false
						)
					)
				}
			}
		} else acc
	})
}

handleResponseWithRule(res1 : IScriptRequestRespose, res2 : IScriptRequestRespose, rule : HttpResponseHandleRule) -> bool {
	switch (rule : HttpResponseHandleRule) {
		HRHResponseAcceptWithoutChecking() : true;
		HRHResponseCheckType() : {
			switch (res1 : IScriptRequestRespose) {
				IScriptRequestOk(__) : {
					switch (res2 : IScriptRequestRespose) {
						IScriptRequestOk(__): true;
						default: false;
					}
				}
				IScriptRequestError(__) : {
					switch (res2 : IScriptRequestRespose) {
						IScriptRequestError(__): true;
						default: false;
					}
				}
				IScriptRequestStatus(__) : {
					switch (res2 : IScriptRequestRespose) {
						IScriptRequestStatus(__): true;
						default: false;
					}
				}
			}
		};
		HRHResponseCheckTypeAndStatus() : {
			switch (res1 : IScriptRequestRespose) {
				IScriptRequestOk(data) : {
					switch (res2 : IScriptRequestRespose) {
						IScriptRequestOk(_data): strLeft(data, strIndexOf(data, "\n")) == strLeft(_data, strIndexOf(_data, "\n"));
						default: false;
					}
				}
				IScriptRequestError(error) : {
					switch (res2 : IScriptRequestRespose) {
						IScriptRequestError(_error): strLeft(error, strIndexOf(error, "\n")) == strLeft(_error, strIndexOf(_error, "\n"));
						default: false;
					}
				}
				IScriptRequestStatus(status) : {
					switch (res2 : IScriptRequestRespose) {
						IScriptRequestStatus(_status): status == res2.status;
						default: false;
					}
				}
			}
		};
		HRHResponseCheckAll() : res1 == res2;
		HRHResponseReject() : false;
	}
}

getHttpRequestResponseCompareFns(requestRecord : IScriptRequestRecord) -> HttpRequestResponseCompareFns {
	if (isHttpRequestHandleRulesSet()) {
		// Handle Rules is set
		// Search through an array of rules to find the first suitable rule for 'requestRecord'.
		fold(getHttpRequestHandleRules(), None(), \acc, handleRule -> {
			// Result: acc = None() - not found, Some(rule) - found suitable rule
			if (isNone(acc)) {
				// Cycle through the atom rules in the current rule and check their compliance.
				fold(handleRule.requestSelectionRules, true, \acc2, rsr -> {
					if (acc2) {
						switch (rsr : HttpRequestSelectionRule) {
							HRRSURL(url) : if (requestRecord.url != url) false else acc2;
							HRRSPost(post) : if (requestRecord.post != post) false else acc2;
							HRRSHeader(header, position) : {
								switch (position : HttpRequestParamPosition) {
									HRPPosition(pos) : if (elementAt(requestRecord.headers, pos, KeyValue("", "")) != header) false else acc2;
									HRPPositionAny() : if (!contains(requestRecord.headers, header)) false else acc2;
								}
							};
							HRRSParam(param, position) : {
								switch (position : HttpRequestParamPosition) {
									HRPPosition(pos) : if (elementAt(requestRecord.params, pos, KeyValue("", "")) != param) false else acc2;
									HRPPositionAny() : if (!contains(requestRecord.params, param)) false else acc2;
								}
							};
						}
					} else acc2;
				})
				|> (\v -> if (v) {
						// The current rule is suitable, return it
						Some(handleRule)
					} else {
						// The current rule is not suitable, return acc
						acc
					})
			} else
				// The suitable rule is already set in acc - return acc
				acc
			}
		)
		// Check is suitable rule found.
		|> (\v0 -> eitherMap(v0,
			// if suitable rule is found, then create compare functions based on it
			\rule -> {
				// Request compare
				requestCompareFn = if (rule.requestsCompareRules != []) {
					\received2 : IScriptRequestRecord, stored2 : IScriptRequestRecord -> {
						received = filterRequestRecord(received2, rule.requestPrepareOptions);
						stored = filterRequestRecord(stored2, rule.requestPrepareOptions);
						compareRequestsWithRules(received, stored, rule.requestsCompareRules)
					}
				} else dummyHttpRequestCompareFn;

				// Response compare
				responseCompareFn = \received : IScriptRequestRespose, stored : IScriptRequestRespose -> {
					handleResponseWithRule(received, stored, rule.responseHandleRule)
				}
				HttpRequestResponseCompareFns(
					requestCompareFn,
					responseCompareFn
				)
			},
			// If not found - return dummy compare functions
			HttpRequestResponseCompareFns(
				dummyHttpRequestCompareFn,
				dummyHttpResponseCompareFn
			)
		))
	} else {
		HttpRequestResponseCompareFns(
			dummyHttpRequestCompareFn,
			dummyHttpResponseCompareFn
		)
	}
}

