import string;
import sys/target;

export {
	// Set/Listen URL hash (anchor) value (bug 31634)

	// Use this to change the URL in the browser, while staying on the same page
	native setUrlHash : io (hash : string) -> void = RenderSupport.setUrlHash;

	// Return a string from the URL after hash mark (including #)
	native getUrlHash : io () -> string = RenderSupport.getUrlHash;

	// Register a function to be called when the user uses back/forward or similar, but we stay on the same page
	native addUrlHashListener : io (cb : (code : string) -> void) -> () -> void = RenderSupport.addUrlHashListener;

	// Return a string from the URL till hash mark (excluding #)
	getUrlTillHash : () -> string;

	// Get a parameter from the URL that was passed after hash mark.
	// Returns parameter as is, if it was urlencoded result would be urlencoded too (e.g. "mail%40example.com").
	getUrlHashParameter(name : string) -> string;

	removeParameterFromUrlHash(name : string) -> void;
}

getUrlHash() -> string { "" }

setUrlHash(hash : string) -> void {}

getUrlTillHash() -> string {
	url = loaderUrl();
	takeBefore(url, "#", url)
}

getUrlHashParameter(name : string) -> string {
	if (cpp) ""
	else {
		hash = ltrim2(getUrlHash(), "#");
		fold(strSplit(hash, "&"), "", \acc, p -> {
			s = strSplit(p, "=");
			if (s[0] == name && length(s) > 1) s[1] else acc
		})
	}
}

removeParameterFromUrlHash(name : string) -> void {
	if (!cpp) {
		hash = ltrim2(getUrlHash(), "#");
		newHash = filter(strSplit(hash, "&"), \p -> strSplit(p, "=")[0] != name)
			|> \arr -> strGlue(arr, "&");
		setUrlHash(newHash);
	}
}
