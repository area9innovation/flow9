import net/http;
import formats/json/json;
import math/sha1;
import text/blueprint;
import formats/html/html;
import date;

/*
	This is a library which allow you to construct valid OData requests for in an OData client.

	The Open Data Protocol (OData) is a data access protocol built on core
	protocols like HTTP and commonly accepted methodologies like REST for the web.

	More at http://www.odata.org
*/

export {
	DQuery ::= DSelectQuery, DInsertQuery, DUpdateQuery, DDeleteQuery, DCountQuery, DBatchQuery;
		DSelectQuery(resource : DResource, parameters : [DParameter]);
		DInsertQuery(resource : DCommonResourceU, entity : Json, parameters : [DParameter]);
		DUpdateQuery(resource : DSpecificResource, value : Json);
		DDeleteQuery(resource : DSpecificResource);
		DCountQuery(resource : DCommonResourceU, parameters : [DParameter]);
		DBatchQuery(queries : [DQuery]);

	DResource ::= DCommonResourceU, DSpecificResource, DFunction;
		DCommonResourceU ::= DCommonResource, DCommonResource2;
			// Resource is typically a table name
			DCommonResource(resource : string);
			DCommonResource2(resource : string, parent : DResource);
		// Resource is typically a table name, and value is a primary key
		DSpecificResource(resource : DResource, value : DResourceValue);
		DFunction(resource : DResource, parameters : [DFunctionParameter]);
			DFunctionParameter(name : string, value : DResourceValue);

	DParameter ::= DExpand, DSelect, DFilter, DOrderBy, DSkip, DTop, DCompute, DApply;
		DExpand(values : [DExpandValueU]);
			DExpandValueU ::= DExpandValue, DCount;
				DExpandValue(resource : string, parameters : [DExpandParameterU]);
					DExpandParameterU ::= DParameter, DCountParameter, DLevels;
						DCountParameter();
						DLevels(value : DLevelsValueU);
							DLevelsValueU ::= DLevelsValue, DLevelsMax;
								DLevelsValue(value : int);
								DLevelsMax();
		DSelect(resources : [string]);
		DFilter(filter : DExpression);
		DOrderBy(values : [DOrderByValue]);
			DOrderByValue(resource : DPropertyU, ascending : bool);
		DSkip(val : int);
		DTop(val: int);
		DCompute(expression : DExpression, alias : string);
		DApply(expressions : [DApplyExpression]);
			DApplyExpression ::= DAggregate, DGroupBy, DFilter, DApplyExpandU;
				DAggregate(expressions : [DAggregateExpressionU]);
					DAggregateExpressionU ::= DAggregateExpression, DAggregateWithResource;
						DAggregateExpression(property : DExpression, method : DAggregateMethod, alias : string);
							DAggregateMethod ::= DSum, DMin, DMax, DAverage, DCountDistinct;
								DSum();
								DMin();
								DMax();
								DAverage();
								DCountDistinct();
						DAggregateWithResource(resource : DPropertyU, expressions : [DAggregateExpressionU]);
				DGroupBy(properties : [DPropertyU], expressions : [DApplyExpression]);
				DApplyExpandU ::= DApplyExpand, DApplyExpandFilter;
					DApplyExpand(resource : string, expands : [DApplyExpandU]);
					DApplyExpandFilter(resource : string, filter : DFilter, expands : [DApplyExpandU]);


	DResourceValue ::= DInt, DString, DDouble, DBool, DDate, DDateTime, DNull;
		DInt(val : int);
		DString(val : string);
		DDouble(val : double);
		DBool(val : bool);
		DDate(val : Date);
		DDateTime(val : Time);
		DNull();

	DExpression ::= DResourceValue, DPropertyU, DBinaryExpression, DComparison, DLogicalExp, DBuiltIn, DCount;

		DPropertyU ::= DProperty, DProperty2;
			DProperty(resource : string);
			DProperty2(resource : string, parent : DPropertyU);

		DBinaryExpression(left : DExpression, op : DBinaryOp, right : DExpression);
			DBinaryOp ::= DAdd, DSub, DMul, DDiv, DMod;
				DAdd();
				DSub();
				DMul();
				DDiv();
				DMod();

		DComparison(left : DExpression, op : DComparisonOp, right : DExpression);
			DComparisonOp ::= DEq, DNe, DGt, DGe, DLt, DLe;
				DEq();
				DNe();
				DGt();
				DGe();
				DLt();
				DLe();

		DInValues ::= DResourceArray, DPropertyU;
			DResourceArray(values : [DResourceValue]);

		DLogicalExp ::= DAnd, DAnd2, DOr, DOr2, DNot, DHas, DIn, DAny, DAll;
			DAnd(expressions : [DExpression]);
			DAnd2(expr1 : DExpression, expr2 : DExpression);
			DOr(expressions : [DExpression]);
			DOr2(expr1 : DExpression, expr2 : DExpression);
			DNot(expression : DExpression);
			DHas(resource : DPropertyU, val : DExpression);
			DIn(resource : DPropertyU, values : DInValues);
			DAny(resource : DPropertyU, alias : string, expression : DExpression);
			DAll(resource : DPropertyU, alias : string, expression : DExpression);

		DBuiltIn ::=
			DFContains, DFEndsWith, DFStartsWith, DFLength, DFIndexOf, DFSubstring, DFToLower, DFToUpper, DFTrim, DFConcat,
			DFDay, DFMonth, DFYear, DFHour, DFMinute, DFSecond, /*DFFractionalSeconds,*/ DFDate, DFTime, /*DFTotalOffsetMinutes, DFNow, DFMinDateTime, DFMaxDateTime,*/
			DFRound, DFFloor, DFCeiling;

				// String functions
				DFContains(str : DExpression, substr : DExpression);
				DFEndsWith(str : DExpression, substr : DExpression);
				DFStartsWith(str : DExpression, substr : DExpression);
				DFLength(str : DExpression);
				DFIndexOf(str : DExpression, substr : DExpression);
				DFSubstring(str : DExpression, from : DExpression, toM : Maybe<DExpression>);
				DFToLower(str : DExpression);
				DFToUpper(str : DExpression);
				DFTrim(str : DExpression);
				DFConcat(str1 : DExpression, str2 : DExpression);

				// Date and time functions
				DFDay(dateTime : DExpression);
				DFMonth(dateTime : DExpression);
				DFYear(dateTime : DExpression);
				DFHour(dateTime : DExpression);
				DFMinute(dateTime : DExpression);
				DFSecond(dateTime : DExpression);
				// DFFractionalSeconds(date : DExpression);
				DFDate(dateTime : DExpression);
				DFTime(dateTime : DExpression);
				// DFTotalOffsetMinutes(dateTime : DExpression);
				// DFNow();
				// DFMinDateTime();
				// DFMaxDateTime();

				// Math functions
				DFRound(val : DExpression);
				DFFloor(val : DExpression);
				DFCeiling(val : DExpression);

		DCount(property : DPropertyU);


	makeODataRequest(host : string, jwt : string, query : DQuery, callback : (Json) -> void, onError : (string) -> void) -> void;
	// Calls onError if whole batch or at least one of subrequests has failed
	makeODataBatchRequest(host : string, jwt : string, queries : [DQuery], onOK : ([Json]) -> void, onError : (string) -> void) -> void;
	makeODataBatchRequest2(host : string, jwt : string, queries : [DQuery], callback : ([DResponse]) -> void, onError : (string) -> void) -> void;

	DResponse ::= DGoodResponse, DBadResponse;
		DGoodResponse(data : Json);
		DBadResponse(data : Json);

	specifyResource(resource : DCommonResourceU, value : DResourceValue) -> DSpecificResource;
	makeODataBind(fieldName : string, resourceName : string, value : Json) -> Pair<string, Json>;
	json2ResourceValue(json : Json) -> DResourceValue;


	/*
		Examples of DQuery that is uses in makeODataRequest
		---------------------------------------------------
		Get all the people:
		DSelectQuery(
			DCommonResource("People"),
			[]
		)

		GET ~/People

		---------------------------------------------------
		Get person with id 'russel':
		DSelectQuery(
			DSpecificResource(
				DCommonResource("People"),
				DString("russel")
			),
			[]
		)

		GET ~/People('russel')

		---------------------------------------------------
		Get info about Russel and his trips:
		DSelectQuery(
			DSpecificResource(
				DCommonResource("People"),
				DString("russel")
			),
			[
				DExpand([DExpandValue("Trips", [])])
			]
		)

		GET ~/People('russel')?$expand=Trips

		---------------------------------------------------
		Get Russel's first trip:
		DSelectQuery(
			DSpecificResource(
				DCommonResouce2(
					"Trips",
					DSpecificResource(
						DCommonResource("People"),
						DString("russel")
					)
				),
				DInt(0)
			),
			[]
		)

		GET ~/People('russel')/Trips(0)

		---------------------------------------------------
		Get people that are older than 25 and younger than 38 and
		sort them by FirstName (descending) and UserName (ascending)
		DSelectQuery(
			DCommonResource("People"),
			[
				DFilter(
					DAnd2(
						DGt("age", DInt(25)),
						DLt("age", DInt(48)),
					)
				),
				DOrderBy([
					DOrderByValue(DProperty("FirstName"), false),
					DOrderByValue(DProperty("UserName"), true)
				])
			]
		)

		GET ~/People/?$filter=age gt 25 and age lt 38&$orderby=FirstName desc,UserName"

		---------------------------------------------------
		Get UserNames and FirstNames of first five people and Description of their Trips
		DSelectQuery(
			DCommonResource("People"),
			[
				DSelect(["UserName", "FirstName"]),
				DExpand([DExpandValue("Trips", [DSelect(["Description"])])]),
				DTop(5)
			]
		)

		GET ~/People?$select=UserName,FirstName&$expand=Trips($select=Description)&$top=5

		---------------------------------------------------
		Delete people with id 'russel'
		DSelectQuery(
			DSpecificResource(
				DComonResource("People"),
				DString("russel")
			),
			[]
		)

		DELETE ~/People('russel')

		---------------------------------------------------
		Change Russel's FirstName, LastName and BestFriend
		considering that BestFriend is expandable field
		DUpdateQuery(
			DSpecificResource(
				DCommonResource("People"),
				DString("russel")
			),
			JsonObject([
				Pair("FirstName", JsonString("New first name")),
				Pair("LastName", JsonString("New last name")),
				Pair("BestFriend@odata.bind", JsonString("People('Ronald')"))
			])
		)

		PATCH ~/People('russel')
		{
			"FirstName": "New first name",
			"LastName": "New last name",
			"BestFriend@odata.bind": "People('Ronald')"
		}

		---------------------------------------------------
		GET ~/Sales?$apply=aggregate(Amount with sum as Total,Amount with max as MxA)
		DSelectQuery(
			DCommonResource("Sales"),
			[DApply([
				DAggregate([
					DAggregateExpression(DProperty("Amount"), DSum(), "Total"),
					DAggregateExpression(DProperty("Amount"), DMax(), "MxA")
				])
			])]
		)

		---------------------------------------------------
		GET ~/Products?$apply=aggregate(Sales(Amount with sum as Tax))
		DSelectQuery(
			DCommonResource("Products"),
			[DApply([
				DAggregate([
					DAggregateWithResource(
						DProperty("Sales"),
						[DAggregateExpression(DProperty("Amount"), DSum(), "Tax")]
					)
				])
			])]
		)

		---------------------------------------------------
		GET ~/Customers?$apply=groupby((Name))
		DSelectQuery(
			DCommonResource("Customers"),
			[DApply([DGroupBy([DProperty("Name")], [])])]
		)

		---------------------------------------------------
		GET ~/Products?$apply=groupby((Name,Sales/Currency/Code),aggregate(Sales/Amount with sum as Total))
		DSelectQuery(
			DCommonResource("Products"),
			[DApply([
				DGroupBy(
					[
						DProperty("Name"),
						DProperty2("Code", DProperty2("Currency", DProperty("Sales")))
					],
					[
						DAggregate([
							DAggregateExpression(DProperty2("Amount", DProperty("Sales")), DSum(), "Total"),
						])
					]
				)
			])]
		)

		---------------------------------------------------
		Batch requests are also supported more at
		www.odata.org/getting-started/advanced-tutorial/#batch

		More examples at http://www.odata.org/getting-started/
	*/
}

ODataQuery(method : RequestMethod, data : RequestData, resource : string);

specifyResource(resource : DCommonResourceU, value : DResourceValue) -> DSpecificResource {
	DSpecificResource(resource, value)
}

makeODataBind(fieldName : string, resourceName : string, value : Json) -> Pair<string, Json> {
	fieldValue = if (value == JsonNull()) {
		value
	} else {
		JsonString(resourceName + "(" + json2string(value) + ")")
	}
	Pair(fieldName + "@odata.bind", fieldValue);
}

json2ResourceValue(json : Json) -> DResourceValue {
	switch (json) {
		JsonNull(): DNull();
		JsonBool(v): DBool(v);
		JsonString(s): DString(s);
		JsonDouble(v): {
			intV = trunc(v);
			if (i2d(intV) == v) DInt(intV)
			else DDouble(v)
		}
		default: DString(json2string(json))
	}
}

buildODataQuery(query : DQuery) -> ODataQuery {
	switch (query : DQuery) {
		DSelectQuery(resource, parameters): {
			paramsStr = if (length(parameters) > 0) "?" + parameters2string(parameters, "&") else "";
			res = resource2string(resource) + paramsStr;
			ODataQuery(GET(), RequestParameters([]), res);
		}
		DInsertQuery(resource, entity, parameters): {
			paramsStr = if (length(parameters) > 0) "?" + parameters2string(parameters, "&") else "";
			res = resource2string(resource) + paramsStr;
			ODataQuery(POST(), RequestPayload(json2string(entity)), res);
		}
		DUpdateQuery(resource, value): ODataQuery(PATCH(), RequestPayload(json2string(value)), resource2string(resource));
		DDeleteQuery(resource): ODataQuery(DELETE(), RequestParameters([]), resource2string(resource));
		DBatchQuery(queries): buildBatchQuery(queries);
		DCountQuery(resource, parameters): {
			paramsStr = if (length(parameters) > 0) "?" + parameters2string(parameters, "&") else "";
			res = resource2string(resource) + "/$count" + paramsStr;
			ODataQuery(GET(), RequestParameters([]), res);
		}
	};
}

buildBatchQuery(queries : [DQuery]) -> ODataQuery {
	boundary = "--" + SHA1(time2string(timestamp()));
	body = superglue(queries, \query -> {
		odataQuery = buildODataQuery(query);
		method = odataQuery.method;
		resource = odataQuery.resource;
		hasBody = !isSameStructType(method, GET()) && !isSameStructType(method, DELETE());
		body = switch (odataQuery.data) {
			RequestPayload(body): body;
			default: "";
		};
		blueprint("
			%boundary%
			Content-Type: application/http
			Content-Transfer-Encoding: binary

			%method% %resource% HTTP/1.1
			Content-Type: application/json
			Accept: application/json
			% if hasBody %
				\n%body%
			% endif %
		",
		[
			"boundary", boundary,
			"hasBody", b2s(hasBody),
			"method", method2string(method),
			"resource", resource,
			"body", body
		])
	}, "\n") + "\n" + boundary + "--";

	ODataQuery(POST(), RequestPayload(body), "$batch");
}

resource2string(resource : DResource) -> string {
	switch (resource : DResource) {
		DCommonResource(res): res;
		DCommonResource2(res, parent): resource2string(parent) + "/" + res;
		DSpecificResource(res, value): resource2string(res) + "(" + resourceValue2string(value) + ")";
		DFunction(res, parameters): resource2string(res) + "(" + functionParameters2string(parameters) + ")";
	}
}

resourceValue2string(value : DResourceValue) -> string {
	switch (value : DResourceValue) {
		DInt(val): i2s(val);
		DString(val): "'" + urlEncode(val) + "'";
		DDouble(val): d2s(val);
		DBool(val): b2s(val);
		DDate(val): date2string(val);
		DDateTime(val): dbDateTime2utc(time2db(val));
		DNull(): "null";
	}
}

functionParameters2string(parameters : [DFunctionParameter]) -> string {
	superglue(
		parameters,
		\parameter -> parameter.name + "=" + resourceValue2string(parameter.value),
		","
	)
}

applyExpression2string(applyExpression : DApplyExpression) -> string {
	switch (applyExpression) {
		DAggregate(expressions): "aggregate(" + aggregateExpressions2string(expressions) + ")";
		DGroupBy(properties, expressions): {
			propertiesS = superglue(properties, expression2string, ",");
			if (length(expressions) > 0) {
				expressionsS = superglue(expressions, applyExpression2string, "/");
				"groupby((" + propertiesS + "), " + expressionsS + ")";
			} else {
				"groupby((" + propertiesS + "))";
			}
		}
		DFilter(expression): "filter(" + expression2string(expression) + ")";
		DApplyExpand(resource, expands): {
			if (length(expands) > 0) {
				expandsS = superglue(expands, applyExpression2string, ",");
				"expand(" + resource + "," + superglue(expands, applyExpression2string, ",") + ")"
			} else {
				"expand(" + resource + ")"
			}
		}
		DApplyExpandFilter(resource, dFilter, expands): {
			filterS = applyExpression2string(dFilter);
			if (length(expands) > 0) {
				expandsS = superglue(expands, applyExpression2string, ",");
				"expand(" + resource + "," + filterS + "," + superglue(expands, applyExpression2string, ",") + ")"
			} else {
				"expand(" + resource + "," + filterS + ")"
			}
		}

	}
}

aggregateExpressions2string(expressions : [DAggregateExpressionU]) -> string {
	superglue(expressions, aggregateExpression2string, ",")
}

aggregateExpression2string(expression : DAggregateExpressionU) -> string {
	switch (expression) {
		DAggregateExpression(property, method, alias): {
			expr = expression2string(property);
			methodS = aggregationMethod2string(method);
			expr + " with " + methodS + " as " + alias;
		}
		DAggregateWithResource(resource, expressions): {
			res = expression2string(resource);
			expr = aggregateExpressions2string(expressions);
			res + "(" + expr + ")";
		}
	}
}

aggregationMethod2string(method : DAggregateMethod) -> string {
	switch (method) {
		DSum(): "sum";
		DMin(): "min";
		DMax(): "max";
		DAverage(): "average";
		DCountDistinct(): "countdistinct";
	}
}

parameters2string(parameters : [DExpandParameterU], separator : string) -> string {
	superglue(
		parameters,
		\parameter -> {
			switch (parameter : DExpandParameterU) {
				DExpand(values): if (length(values) > 0) "$expand=" + expand2string(values) else "";
				DSelect(resources): if (length(resources) > 0) "$select=" + strGlue(resources, ",") else "";
				DFilter(expression): "$filter=" + expression2string(expression);
				DOrderBy(values): if (length(values) > 0) "$orderby=" + orderBy2string(values) else "";
				DSkip(val): "$skip=" + i2s(val);
				DTop(val): "$top=" + i2s(val);
				DCountParameter(): "$count=true";
				DLevels(levelsValue): {
					levelsValueS = switch (levelsValue) {
						DLevelsValue(value): i2s(value);
						DLevelsMax(): "max"
					}
					"$levels=" + levelsValueS
				}
				DCompute(expression, alias): "$compute=" + expression2string(expression) + " as " + alias;
				DApply(expressions): "$apply=" + superglue(expressions, applyExpression2string, "/");
			}
		},
		separator
	)
}

expand2string(values : [DExpandValueU]) -> string {
	superglue(
		values,
		\value -> {
			switch (value) {
				DExpandValue(resource, parameters): {
					parametersS = parameters2string(parameters, ";");
					resource + if (strlen(parametersS) > 0) "(" + parametersS + ")" else ""
				};
				DCount(__): count2string(value);
			}
		},
		","
	)
}

count2string(count : DCount) -> string {
	property2string(count.property) + "/$count";
}

property2string(property : DPropertyU) -> string {
	switch (property) {
		DProperty(res): res;
		DProperty2(res, parent): property2string(parent) + "/" + res;
	}
}

expression2string(expression : DExpression) -> string {
	switch (expression) {
		DResourceValue(): resourceValue2string(expression);
		DPropertyU(): property2string(expression);
		DBinaryExpression(left, op, right): expression2string(left) + " " + binaryOp2string(op) + " " + expression2string(right);
		DComparison(left, op, right): expression2string(left) + " " + comparisonOp2string(op) + " " + expression2string(right);
		DLogicalExp(): logicalExpression2string(expression);
		DBuiltIn(): builtinFunction2string(expression);
		DCount(__): count2string(expression);
	}
}

logicalExpression2string(expression : DLogicalExp) -> string {
	switch (expression) {
		DAnd(expressions): superglue(expressions, \e -> "(" + expression2string(e) + ")", " and ");
		DAnd2(expr1, expr2): "(" + expression2string(expr1) + ") and (" + expression2string(expr2) + ")";
		DOr(expressions): superglue(expressions, \e -> "(" + expression2string(e) + ")", " or ");
		DOr2(expr1, expr2): "(" + expression2string(expr1) + ") or (" + expression2string(expr2) + ")";
		DNot(expr): "not (" + expression2string(expr) + ")";
		DHas(resource, val): expression2string(resource) + " has " + expression2string(val);
		DIn(resource, values): expression2string(resource) + " in " + dInValues2string(values);
		DAny(resource, alias, expr) : expression2string(resource) + "/any(" + alias + ":" + expression2string(expr) + ")";
		DAll(resource, alias, expr) : expression2string(resource) + "/all(" + alias + ":" + expression2string(expr) + ")";
	}
}

dInValues2string(values : DInValues) -> string {
	switch (values) {
		DResourceArray(v): "(" + superglue(v, resourceValue2string, ",") + ")";
		DPropertyU(): expression2string(values)
	}
}

builtinFunction2string(function : DBuiltIn) -> string {
	switch (function) {
		DFContains(str, substr): makeBuiltinFunction("contains", [str, substr]);
		DFEndsWith(str, substr): makeBuiltinFunction("endswith", [str, substr]);
		DFStartsWith(str, substr): makeBuiltinFunction("startswith", [str, substr]);
		DFLength(str): makeBuiltinFunction("length", [str]);
		DFIndexOf(str, substr): makeBuiltinFunction("indexof", [str, substr]);
		DFSubstring(str, from, toM): makeBuiltinFunction("substring", eitherMap(toM, \to -> [str, from, to], [str, from]));
		DFToLower(str): makeBuiltinFunction("tolower", [str]);
		DFToUpper(str): makeBuiltinFunction("toupper", [str]);
		DFTrim(str): makeBuiltinFunction("trim", [str]);
		DFConcat(str1, str2): makeBuiltinFunction("concat", [str1, str2]);

		DFDay(dateTime): makeBuiltinFunction("day", [dateTime]);
		DFMonth(dateTime): makeBuiltinFunction("month", [dateTime]);
		DFYear(dateTime): makeBuiltinFunction("year", [dateTime]);
		DFHour(dateTime): makeBuiltinFunction("hour", [dateTime]);
		DFMinute(dateTime): makeBuiltinFunction("minute", [dateTime]);
		DFSecond(dateTime): makeBuiltinFunction("second", [dateTime]);
		DFDate(dateTime): makeBuiltinFunction("date", [dateTime]);
		DFTime(dateTime): makeBuiltinFunction("time", [dateTime]);

		DFRound(val): makeBuiltinFunction("round", [val]);
		DFFloor(val): makeBuiltinFunction("floor", [val]);
		DFCeiling(val): makeBuiltinFunction("ceiling", [val]);
	}
}

makeBuiltinFunction(name : string, parameters : [DExpression]) -> string {
	parametersS = superglue(parameters, expression2string, ",");
	name + "(" + parametersS + ")"
}

binaryOp2string(op : DBinaryOp) -> string {
	switch (op) {
		DAdd(): "add";
		DSub(): "sub";
		DMul(): "mul";
		DDiv(): "div";
		DMod(): "mod";
	}
}

comparisonOp2string(op : DComparisonOp) -> string {
	switch (op) {
		DEq(): "eq";
		DNe(): "ne";
		DGt(): "gt";
		DGe(): "ge";
		DLt(): "lt";
		DLe(): "le";
	}
}

orderBy2string(values : [DOrderByValue<DPropertyU, bool>]) -> string {
	superglue(
		values,
		\value -> expression2string(value.resource) + if (value.ascending) "" else " desc",
		","
	)
}


makeODataBatchRequest(host : string, jwt : string, queries : [DQuery], onOK : ([Json]) -> void, onError : (string) -> void) -> void {
	callback = \responses : [DResponse] -> {
		errorM = findmap(responses, \response -> {
			switch (response) {
				DGoodResponse(__): None();
				DBadResponse(v): Some(json2string(v));
			}
		});
		eitherFn(
			errorM,
			onError,
			\-> {
				results = map(responses, \response -> {
					switch (response) {
						DGoodResponse(v): v;
						DBadResponse(v): v;		// Should never happen
					}
				});
				onOK(results)
			}
		)
	}
	makeODataBatchRequest2(host, jwt, queries, callback, onError)
}

makeODataBatchRequest2(host : string, jwt : string, queries : [DQuery], callback : ([DResponse]) -> void, onError : (string) -> void) -> void {
	callback2 = \data, headers -> callback(parseBatchResponse(data, headers));
	makeODataRequest2(host, jwt, DBatchQuery(queries), callback2, onError)
}

makeODataRequest(host : string, jwt : string, query : DQuery, callback : (Json) -> void, onError : (string) -> void) -> void {
	callback2 = \data, headers -> {
		isBatch = isSameStructType(query, DBatchQuery([]));
		result = if (isBatch) {
			responses = parseBatchResponse(data, headers);
			JsonArray(map(responses, \response -> {
				switch (response) {
					DGoodResponse(v): v;
					DBadResponse(v): v;
				}
			}))
		} else {
			parseJson(data)
		}
		callback(result)
	}
	makeODataRequest2(host, jwt, query, callback2, onError)
}

makeODataRequest2(host : string, jwt : string, query : DQuery, callback : (string, [KeyValue]) -> void, onError : (string) -> void) -> void {
	if (isUrlParameterTrue("odataDQuery")) println(query);
	q = buildODataQuery(query);
	method = q.method;
	data = q.data;
	isBatch = isSameStructType(query, DBatchQuery([]));
	contentType = if (isBatch) {
		body = switch (data) {
			RequestPayload(body): body;
			default: "";
		};
		boundary = substring(body, 2, strIndexOf(body, "\n") - 2);
		"multipart/mixed;boundary=" + boundary
	} else {
		"application/json"
	}
	accept = if (isBatch) "multipart/mixed" else "application/json";

	headers : [KeyValue] = [
		KeyValue("Accept", accept),
		KeyValue("Authorization", "Bearer " + jwt),
		KeyValue("Content-Type", contentType)
	] |> (\acc -> ifArrayPush(acc, isBatch, KeyValue("Prefer", "continue-on-error=true")));

	httpCustomRequest(
		host + q.resource,
		q.method,
		headers,
		data,
		\status, respData, respHeaders -> {
			if (isErrorStatus(status)) {
				onError(respData)
			} else {
				callback(respData, respHeaders)
			}
		},
		true
	)
}

parseBatchResponse(response : string, respHeaders : [KeyValue]) -> [DResponse] {
	contentType = findDef(respHeaders, \header -> toLowerCase(header.key) == "content-type", KeyValue("", "")).value;
	boundary = "--"+ takeAfter(contentType, "boundary=", "");
	chunks = strSplit(response, boundary);
	responses = subrange(chunks, 1, length(chunks) - 2);
	map(responses, \resp -> {
		jsonS = strRight(resp, strIndexOf(resp, "{"));
		json = parseJson(jsonS);
		status = takeBetween(resp, "HTTP/1.1 ", " ", "");
		if (isErrorStatus(s2i(status))) {
			DBadResponse(json)
		} else {
			DGoodResponse(json)
		}
	})
}
