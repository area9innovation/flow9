
import string;
import ds/tree;
import formats/json/json;

export {
	// Get a parameter from the URL
	// For POST request it requires parameters to be url-encoded, as for *.serverbc files
	getUrlParameter(name : string) -> string;

	// Native version of getUrlParameter, but it has worse performance
	native getUrlParameterNative : io (name : string) -> string = Native.getUrlParameter;
	// Get a list of parameters from the URL
	native getAllUrlParametersArray : io () -> [[string]] = Native.getAllUrlParameters;

	// Simple version with a default value if parameter is not specified
	getUrlParameterDef(name: string, def: string) -> string;

	getUrlParameterBoolDef(name: string, def: bool) -> bool;

	// Advanced version with mapping of the result to something
	eitherGetUrlParameter(name : string, mapFn : (string) -> ?, def : ?) -> ?;

	// Advanced version with validation and mapping of the result to something.
	eitherGetUrlValidParameter(name : string, valid : (string) -> bool, mapFn : (string) -> ?, def : ?) -> ?;

	// Returns
	//   false for unset parameters
	//   true if value is empty (parameter is specified with no value)
	//   false if value is in the list (0, false, FALSE)
	//   true if value is not in that list
	// So it has difference with isParameterTrue
	isUrlParameterTrue(name : string) -> bool;

	// Is not equal to !isUrlParameterTrue(name) as getUrlParameter returns "" for unset parameter.
	// So, for unset parameter isUrlParameterTrue = false and isUrlParameterFalse = false.
	// If parameter is specified with no value, then isUrlParameterTrue = true and isUrlParameterFalse = false.
	isUrlParameterFalse(name : string) -> bool;

	isParameterTrue(name : string) -> bool;  // "true", "TRUE" or "1"
	isParameterFalse(name : string) -> bool;  // "false", "FALSE" or "0"

	// getUrlParameter with build-in stringEncodeFix
	getUrlParameterEncode(param : string) -> string;

	// Check if parameter given in URL
	isUrlParameterSet(name : string) -> bool;
}

isUrlParameterSet(name : string) {
	isSome(lookupTree(allUrlParameters, name));
}

isUrlParameterTrue(name : string) {
	isParamTrue = eitherFn(lookupTree(allUrlParameters, name), \param -> !isParameterFalse(param), \-> false);
	if (toLowerCase(name) == "new" && !isParamTrue) {
		debugStorage = parseJson(getKeyValue("local-parameters", ""));
		getJsonBoolField(debugStorage, "new", false);
	} else {
		isParamTrue
	}
}

isUrlParameterFalse(name : string) {
	param = getUrlParameter(name);
	isParameterFalse(param)
}

isParameterTrue(param : string) {
	param == "true" || param == "1" || param == "TRUE";
}

isParameterFalse(param : string) {
	param == "false" || param == "0" || param == "FALSE";
}

eitherGetUrlParameter(name : string, mapFn : (string) -> ?, def : ?) -> ? {
	param = getUrlParameter(name);
	if (param != "") mapFn(param) else def
}

eitherGetUrlValidParameter(name : string, valid : (string) -> bool, mapFn : (string) -> ?, def : ?) -> ? {
	param = getUrlParameter(name);
	if (valid(param)) mapFn(param) else def
}

getUrlParameterDef(name: string, def: string) -> string {
	param = getUrlParameter(name);
	if (param != "") param else def
}

getUrlParameterBoolDef(name: string, def: bool) -> bool {
	if (isUrlParameterSet(name)) {
		if (isUrlParameterTrue(name))
			true
		else if (isUrlParameterFalse(name))
			false
		else def
	} else def
}

getUrlParameterEncode(param : string) {
	stringEncodeFix(getUrlParameter(param))
}

getAllUrlParameters() -> Tree<string, string> {
	fold(getAllUrlParametersArray(), makeTree(), \acc, par -> setTree(acc, par[0], par[1]))
}

getUrlParameter(name : string) -> string {
	lookupTreeDef(allUrlParameters, name, "")
}

allUrlParameters : Tree<string, string> = getAllUrlParameters();
