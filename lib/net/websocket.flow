import ds/array;

/*
	Websocket implementation in flow. Check
		https://developer.mozilla.org/ru/docs/Web/API/WebSocket
	for JS websocket documentation.

	Note that module works only under JS, iOS, Android, CPP targets and refers only to client side application.
	If you need to use websocket on server, check up server/websocket.flow.
*/

export {
	WSCapabilities : (
		// Send a message via websocket.
		// Returns true if message is queued for sending.
		send : (msg : string) -> bool,
		// Close the connection client-side
		close : (code : int, reason : string) -> void,
		// Checks if the websocket has unsent messages in queue via send.
		// Equals false if all queued messages were sent
		// Not supported on iOS, always returns false
		hasBufferedData : () -> bool
	);


	WSListener : (
		onClose : (code : int, reason : string, wasClean : bool) -> void,
		onError : (errorMsg : string) -> void,
		onMessage : (msg : string) -> void,
		onOpen : () -> void
	);

	wsOpen : (
		url : string,
		onEvents : WSListener) -> WSCapabilities;
}

wsOpen(
	url : string,
	onEvents : WSListener) -> WSCapabilities {

	webSocket =
		wsOpenNative(
			url,
			onEvents.onClose,
			onEvents.onError,
			onEvents.onMessage,
			onEvents.onOpen
		);

	WSCapabilities(
		\msg -> wsSendNative(webSocket, msg),
		\code, reason -> wsCloseNative(webSocket, code, reason),
		\ -> wsHasBufferedDataNative(webSocket)
	);
}

native wsOpenNative : (
	url : string,
	onClose : (code : int, reason : string, wasClean : bool) -> void,
	onError : (errorMsg : string) -> void,
	onMessage : (msg : string) -> void,
	onOpen : () -> void) -> native = WebSocketSupport.open;

native wsSendNative : (
	webSocket : native,
	msg : string
) -> bool = WebSocketSupport.send;

native wsCloseNative : (
	webSocket : native,
	code : int,
	reason : string
) -> void = WebSocketSupport.close;

native wsHasBufferedDataNative : (
	webSocket : native
) -> bool = WebSocketSupport.hasBufferedData;
