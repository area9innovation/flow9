// Â© Copyright 2011 Area9 Innovation. All rights reserved
import runtime;
import string;

export {
	hashString(key : string) -> int;
	// Faster version of hash for strings, uses tail recursion
	fastHashString(key : string) -> int;
	// Even faster version of hash for strings: uses only 'cutoff' symbols from the string
	fastHashStringWithCutoff(key : string, cutoff : int) -> int;
}

// http://en.wikipedia.org/wiki/Fowler_Noll_Vo_hash
hashString(key) {
	hash = 0x811C9DC5;

	fold(string2utf8(key), hash, \acc, b -> {
		bitXor(acc, b) * 16777619;
	});
}

/*
import bits;

hashByte(k : int, b : int) -> int {
	bitXor(k, bitAnd(b, 0xff)) * 16777619;
}

hashInt(k : int, i : int) -> int {
	h1 = hashByte(k, i);
	h2 = hashByte(h1, bitUshr(i, 8));
	h3 = hashByte(h2, bitUshr(i, 16));
	hashByte(h3, bitUshr(i, 24));
}
*/

fastHashString(key : string) -> int {
	fastHashStringTailRecursion(key, strlen(key), strlen(key), 0x811C9DC5, 0, 0)
}

fastHashStringWithCutoff(key : string, cutoff : int) -> int {
	fastHashStringTailRecursion(key, strlen(key), cutoff, 0x811C9DC5, 0, 0)
}

fastHashStringTailRecursion(key : string, len : int, cutoff : int, acc : int, ind : int, i : int) -> int {
	if (i == cutoff || i == len) {
		acc 
	} else {
		fastHashStringTailRecursion(
			key, len, cutoff, 
			bitXor(acc, getCharCodeAt(key, ind)) * 1677761,
			(ind + 1021) % len,
			i + 1
		)
	}
}
