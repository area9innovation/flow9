import material/material_dialog;

export {
    // JS Only

	// Content displayed in browser print dialog
	MPrintTarget(m : Material) -> Material;
	// Similar to MPrintTarget, only every element is printed on different page
	// By default TPrintPages uses web view size as available space for printing
	// TPrintPageSize variable or ShowMPrintDialog dialog let to redefine this size with any other
	MPrintPages(m : [Material]) -> Material;
	// Change content when printing
	MIfPrint(then : Material, elsem : Material) -> Material;

	// Show dialog to select page size for printing
	// Selected page size affects only content inside TPrintPages/MPringPages and can be read from TPrintPageSize
	ShowMPrintDialog(manager : MaterialManager) -> () -> void;
	// Same as ShowMPrintDialog, only takes pages for printing as parameter
	ShowMPrintPagesDialog(manager : MaterialManager, pages : [Material], style : [MPrintStyle]) -> () -> void;

	// Styles for print customizations
	MPrintStyle ::= MPrintSelectedPageSize, MPrintSelectedOrientation;
		MPrintSelectedPageSize(selPageSize : DynamicBehaviour<int>);
		MPrintSelectedOrientation(selOrientation : DynamicBehaviour<int>);

	// Default chrome print dialog sizes
	MPrintPaperSizes = [
		Pair("A0", A0),
		Pair("A1", A1),
		Pair("A2", A2),
		Pair("A3", A3),
		Pair("A4", A4),
		Pair("A5", A5),
		Pair("Legal", Legal),
		Pair("Letter", Letter),
		Pair("Tabloid", LedgerTabloid),
		Pair(_("Custom"), zeroWH)
	];

	// Printing units helpers

	cm2pixels(cm : double) {
		cm * 96.0 / 2.54
	}

	pixels2cm(px : double) {
		px * 2.54 / 96.0
	}

	mm2pixels(mm : double) {
		mm * 96.0 / 25.4
	}

	pixels2mm(px : double) {
		px * 25.4 / 96.0
	}

	whmm2pixels(wh : WidthHeight) {
		WidthHeight(
			mm2pixels(wh.width),
			mm2pixels(wh.height)
		)
	}

	whpixels2mm(wh : WidthHeight) {
		WidthHeight(
			pixels2mm(wh.width),
			pixels2mm(wh.height)
		)
	}
}


// International Paper Sizes

// A Series Paper Sizes
A4A0 = WidthHeight(1682., 2378.) |> whmm2pixels;
A2A0 = WidthHeight(1189., 1682.) |> whmm2pixels;
A0 = WidthHeight(841., 1189.) |> whmm2pixels;
A1 = WidthHeight(594., 841.) |> whmm2pixels;
A2 = WidthHeight(420., 594.) |> whmm2pixels;
A3 = WidthHeight(297., 420.) |> whmm2pixels;
A4 = WidthHeight(210., 297.) |> whmm2pixels;
A5 = WidthHeight(148., 210.) |> whmm2pixels;
A6 = WidthHeight(105., 148.) |> whmm2pixels;
A7 = WidthHeight(74., 105.) |> whmm2pixels;
A8 = WidthHeight(52., 74.) |> whmm2pixels;
A9 = WidthHeight(37., 52.) |> whmm2pixels;
A10 = WidthHeight(26., 37.) |> whmm2pixels;

// B Series Paper Sizes
B0 = WidthHeight(1000., 1414.) |> whmm2pixels;
B1 = WidthHeight(707., 1000.) |> whmm2pixels;
B2 = WidthHeight(500., 707.) |> whmm2pixels;
B3 = WidthHeight(353., 500.) |> whmm2pixels;
B4 = WidthHeight(250., 353.) |> whmm2pixels;
B5 = WidthHeight(176., 250.) |> whmm2pixels;
B6 = WidthHeight(125., 176.) |> whmm2pixels;
B7 = WidthHeight(88., 125.) |> whmm2pixels;
B8 = WidthHeight(62., 88.) |> whmm2pixels;
B9 = WidthHeight(44., 62.) |> whmm2pixels;
B10 = WidthHeight(31., 44.) |> whmm2pixels;

// C Series Envelope Sizes
C0 = WidthHeight(917., 1297.) |> whmm2pixels;
C1 = WidthHeight(648., 917.) |> whmm2pixels;
C2 = WidthHeight(458., 648.) |> whmm2pixels;
C3 = WidthHeight(324., 458.) |> whmm2pixels;
C4 = WidthHeight(229., 324.) |> whmm2pixels;
C5 = WidthHeight(162., 229.) |> whmm2pixels;
C6 = WidthHeight(114., 162.) |> whmm2pixels;
C7 = WidthHeight(81., 114.) |> whmm2pixels;
C8 = WidthHeight(57., 81.) |> whmm2pixels;
C9 = WidthHeight(40., 57.) |> whmm2pixels;
C10 = WidthHeight(28., 40.) |> whmm2pixels;

// US Paper Sizes
HalfLetter = WidthHeight(140., 216.) |> whmm2pixels;
Letter = WidthHeight(216., 279.) |> whmm2pixels;
Legal = WidthHeight(216., 356.) |> whmm2pixels;
JuniorLegal = WidthHeight(127., 203.) |> whmm2pixels;
LedgerTabloid = WidthHeight(279., 432.) |> whmm2pixels;

// Material helpers

MPrintTarget(m : Material) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TPrintTarget(m2t(m, p))))
}

MPrintPages(m : [Material]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TPrintPages(map(m, \_m -> m2t(_m, p)))))
}

MIfPrint(then : Material, elsem : Material) -> Material {
    MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TIfPrint(m2t(then, p), m2t(elsem, p))))
}

ShowMPrintDialog(manager : MaterialManager) -> () -> void {
	ShowMPrintPagesDialog(manager, [], []);
}

ShowMPrintPagesDialog(manager : MaterialManager, pages : [Material], style : [MPrintStyle]) -> () -> void {
    close = make(false);
    selectedPageSize = extractStruct(style, MPrintSelectedPageSize(make(4))).selPageSize;
    selectedOrientation = extractStruct(style, MPrintSelectedOrientation(make(0))).selOrientation;
    widthS = make("21.0");
    heightS = make("29.7");

    ShowMDialog(
        manager,
        close,
        [
            MDialogTitle(_("Print Dialog")),
            MDialogActions([
                MTextButton(_("CLOSE"), \ -> reverseBehaviour(close), [], []),
                MTextButton(_("PRINT"), \ -> showPrintDialog(), [], []),
            ]),
            MDialogUseFrame(),
            MDialogClickOutToClose()
        ],
        MConstruct(
            [
                make2SubscribeUns(selectedPageSize, selectedOrientation, \s, o -> {
                    if (s >= length(MPrintPaperSizes) - 1 || s < 0) {
                        [
                            makeSubscribe(fwh(fselect(widthS, FLift(\w -> cm2pixels(s2d(w)))), fselect(heightS, FLift(\h -> cm2pixels(s2d(h))))), \v -> {
                                next(TPrintPageSize, Some(v))
                            })()
                        ]
                    } else {
                        next(TPrintPageSize, Some(if (o == 0) MPrintPaperSizes[s].second else WidthHeight(MPrintPaperSizes[s].second.height, MPrintPaperSizes[s].second.width)));

                        [];
                    }
                }),
                \ -> \ -> next(TPrintPageSize, None())
            ],
            MLines([
                MDropDown(selectedPageSize, "", map(MPrintPaperSizes, firstOfPair), [MLabel(_("Page Size:")), MWidth(-1.0)]),
                MShowAnimationHeight(
                    fselect(selectedPageSize, FLift(\s -> s >= length(MPrintPaperSizes) - 1 || s < 0)),
                    MBaselineCols([
                        MTextInput(widthS, [MWidth(64.0)], []),
                        MText(_("cm"), []),
                        MIcon("close", [])
                        |> (\f -> MBorder4(12.0, f)),
                        MTextInput(heightS, [MWidth(64.0)], []),
                        MText(_("cm"), [])
                    ])
                    |> MBorderTop(12.0)
                    |> MCenterX,
                    [MAutoStart()]
                ),
                MShowAnimationHeight(
                    fselect(selectedPageSize, FLift(\s -> s < length(MPrintPaperSizes) - 1 && s >= 0)),
                    MDropDown(selectedOrientation, "", [_("Portrait"), _("Landscape")], [MLabel(_("Orientation:")), MWidth(-1.0)])
                    |> MBorderTop(12.0),
                    [MAutoStart()]
                ),
				if (length(pages) > 0)
					MScale(const(Factor(0.0, 0.0)), MPrintPages(map(pages, \p -> MIfPrint(p, TEmpty()))))
				else
					TEmpty()
            ])
            |> (\f -> MAvailableWidth(f, const(260.0)))
        )
    );

    \ -> reverseBehaviour(close);
}
