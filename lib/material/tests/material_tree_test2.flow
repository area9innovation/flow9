import material/material_ui;

main() {
	manager = makeMaterialManager([]);
	expan = make(makeSet());

	mtree1 = MTree(
		const([
			makeTreeNodeHere(
				2,
				[
					MTreeNodeCustomExpander(\__, __, __, __ -> TEmpty(), \__, __ -> TEmpty()),
					MTreeNodeCustomHighlighter(\wh -> {
						TRectangle([MFill(MGrey(200)), GradientFill(0.0, [GradientPoint(black, 0.0, 1.0), GradientPoint(black, 0.1, 0.0)])], TSizedWidthHeight(fwidth(wh), faddition(fheight(wh), const(1.5))))
					})
				]
			)
		]),
		[
			MTreeSelection(make(makeSet())),
			MTreeExpanded(expan),
			MItemsLength(make(0)),
			MMultiSelection(make(makeSet()))
		]
	);

	treeWidthB = make(0.0);
	mtree2 = MAttachWidthCopy(MTree(
		const([
			makeTreeNodeHere(
				2,
				[
					MTreeNodeCustomExpander(\mManager, focus, isExpandedB, color -> {
						MIconToggle2T(
							mManager,
							focus.parent,
							MIconToggle(
								"arrow_drop_up",
								[MIconSize(16.), FillOpacity(1.), color, MToggleFalseIcon("arrow_drop_down", [MIconSize(16.), FillOpacity(1.), color])],
								[MToggleValue(isExpandedB)]
							)
						)
					}, \contentBoxB, color -> {
						TTranslate(
							fselect(contentBoxB, FLift(\ch -> Point(0., 6.0 - 0.5 * ch.height))),
							TBaseAlignA(
								TPadA(16., 0.,
									TAttach(TFillY(), \fm ->
										TSelect(fm.height, \hgt ->
											TGraphics(
												[LineTo(0., hgt - 6.)],
												[MStroke(color), StrokeWidth(2.)]
											)
										)
									)
								)
							)
						)
					}),
					MTreeNodeCustomHighlighter(\wh -> {
						TTranslate(
							fselect2(treeWidthB, fwidth(wh), FLift2(\treeWidth, width -> Point(width - treeWidth, 0.0))),
							TRectangle([MFill(MGrey(200))], TSizedWidthHeight(treeWidthB, faddition(fheight(wh), const(1.5))))
						)
					})
				]
			)
		]),
		[
			MTreeSelection(make(makeSet())),
			MTreeExpanded(expan),
			MItemsLength(make(0)),
			MMultiSelection(make(makeSet()))
		]
	), treeWidthB);


	// makeSubscribe(expan, println)();

	mrender(manager, true, MCols2(MScroll(mtree1, TFillXY(), []), MScroll(mtree2, TFillXY(), [])));

	// fail("0");
}

makeTreeNodeMaterial(expandedB : DynamicBehaviour<bool>) -> Material {
	MBaselineCols([
		MFixedX(32.0),
		MTextInput(make("content"), [], []),
		MTextButton("expand / collapse", \ -> reverseBehaviour(expandedB), [], [])
	])
};

makeTreeNodeHere(ch : int, style : [MTreeNodeStyle]) -> MTreeNode {
	expandedB = make(true);
	 MTreeNode(
		expandedB,
		makeTreeNodeMaterial,
		if (ch > 0)
			make(generate(0, 10, \__ -> makeTreeNodeHere(ch - 1, style)))
		else
			make([]),
		concat([
			MSelected(make(false)),
			MExpanded(expandedB),
			MChildSelected(make(false)),
		], style)
	);
} 
