import material/material_ui;

main() {
	manager = makeMaterialManager([]);

	// MTree without icons and lines
	mtree1 = MTree(
		const([
			makeTreeNodeHere(
				2,
				[
					MTreeNodeCustomIcon(\__, __ -> MEmpty()),
					MTreeNodeCustomLine(\__, __ -> MEmpty()),
					MTreeNodeCustomHighlighter(\wh -> {
						TRectangle([MFill(MGrey(200)), GradientFill(0.0, [GradientPoint(black, 0.0, 1.0), GradientPoint(black, 0.1, 0.0)])], TSizedWidthHeight(fwidth(wh), faddition(fheight(wh), const(1.5))))
					})
				]
			)
		]),
		[
			MTreeSelection(make(makeSet())),
			MTreeExpanded(make(makeSet())),
			MItemsLength(make(0)),
			MMultiSelection(make(makeSet()))
		]
	);

	treeWidthB = make(0.0);
	// MTree with custom icons and default line
	mtree2 = MAttachWidthCopy(MTree(
		const([
			makeTreeNodeHere(
				2,
				[
					MTreeNodeCustomIcon(\isExpandedB, color -> {
						MIconToggle(
							"arrow_drop_up",
							[MIconSize(16.), FillOpacity(1.), color, MToggleFalseIcon("arrow_drop_down", [MIconSize(16.), FillOpacity(1.), color])],
							[MToggleValue(isExpandedB)]
						)
					}),
					MTreeNodeCustomHighlighter(\wh -> {
						TTranslate(
							fselect2(treeWidthB, fwidth(wh), FLift2(\treeWidth, width -> Point(width - treeWidth, 0.0))),
							TRectangle([MFill(MGrey(200))], TSizedWidthHeight(treeWidthB, faddition(fheight(wh), const(1.5))))
						)
					})
				]
			)
		]),
		[
			MTreeSelection(make(makeSet())),
			MTreeExpanded(make(makeSet())),
			MItemsLength(make(0)),
			MMultiSelection(make(makeSet()))
		]
	), treeWidthB);

	mrender(manager, true, MLines2(MScroll(mtree1, TFillXY(), []), MScroll(mtree2, TFillXY(), [])));
}

makeTreeNodeMaterial(expandedB : DynamicBehaviour<bool>) -> Material {
	MBaselineCols([
		MFixedX(32.0),
		MText("content", []),
		// MTextInput(make("content"), [], []),
		MTextButton("expand / collapse", \ -> reverseBehaviour(expandedB), [], [])
	])
};

makeTreeNodeHere(ch : int, style : [MTreeNodeStyle]) -> MTreeNode {
	expandedB = make(true);
	 MTreeNode(
		expandedB,
		makeTreeNodeMaterial,
		if (ch > 0)
			make(generate(0, 10, \__ -> makeTreeNodeHere(ch - 1, style)))
		else
			make([]),
		concat([
			MSelected(make(false)),
			MExpanded(expandedB),
			MChildSelected(make(false)),
		], style)
	);
} 
