import material/material_ui;

MDropDownCombinedStyle ::= MDropDownStyle, MAutoCompleteStyle, MHideAllOnEmpty;
	// With this style, autocomplete result of getDropDownOrAutoComplete will not shown the list list without some text in the field
	MHideAllOnEmpty();

main () {
	items1 = generate(0, 5, i2s);
	items2 = generate(0, 50, i2s);

	selected = make(-1);
	fpprint("selected")(selected);

	text = make("");
	fpprint("text")(text);

	style = [
		MMultipleSelection(make([]), [
			MWidth(240.0),
			MNonSpecifiedString("Test string"),
		]),
		MDropDownStyles([
			MWidth(340.0)
		]),
		MAutoCompleteStyles([MWidth(540.0)]),
		MAutoCompleteState([]),
		MItemsLimit(10),
		MRequiredField(),
		MLabel("Test label"),
		MShowAnyItem(),
		MInputInspector(text)
	];

	selecteD = make(-1);
	selecteD2 = make(-1);

	fpprint("indexB")(selecteD);
	fpprint("indexB2")(selecteD2);

	getDropDownAutocomplete1 =
		getDropDownOrAutoComplete(
			selecteD,
			items2,
			true,
			None(),
			-1,
			"non-specified",
			[MDropDownBorder(100., 0., 0., 0.)]
		);

	getDropDownAutocomplete2 =
		getDropDownOrAutoCompleteFixed(
			selecteD2,
			items2,
			true,
			None(),
			-1,
			"non-specified",
			[MDropDownBorder(100., 0., 0., 0.)]
		);

	view = MLines([
		MDropDownOrAutoComplete(items1, selected, style),
		MFixedY(16.0),
		MDropDownOrAutoComplete(items2, selected, style),
		getDropDownAutocomplete1 |> MBorderTop(4.),
		getDropDownAutocomplete2 |> MBorderTop(4.),
	]);

	mrender(makeMaterialManager([]), true, view);
}

getDropDownOrAutoComplete(
	indexB : DynamicBehaviour<int>,
	items : [string],
	showAnyItem : bool,
	maxDropDownLength : Maybe<int>,
	defaultIndex : int,
	nonSpecified : string,
	style : [MDropDownCombinedStyle]
) -> Material {

	maxCountItems = either(maxDropDownLength, 15);
	allItems = concat(if (showAnyItem) ["Any"] else [], map(items, \i -> substring(i, 0, 200)));
	if (length(items) <= maxCountItems) {
		dropDownStyle = filtermap(style, \s -> switch (s : MDropDownCombinedStyle) {
			MDropDownStyle(): {
				v : Maybe<MDropDownStyle> = Some(s);
				v;
			}
			default: None();
		});

		MConstruct(
			[makeSubscribe(indexB, \i -> if (showAnyItem && i == 0) nextDistinct(indexB, -1))],
			MDropDown(indexB, nonSpecified, allItems, removeAllStructs(dropDownStyle, MLabel("")))
		);
	} else {
		itemB = make("");

		metaAppAutocompleteStyles = [
			MWidth(250.0),
			MLabel(_("Start typing")),
			MShowDropDownArrow(true),
			MShowUnderline(true),
			MCurrentMatches(\arr -> {
				nextDistinct(indexB,
					either(
						findmap(arr, \item ->
							if (item.third.score == i2d(intMax))
								Some(if (showAnyItem && item.first == 0) -1 else item.first)
							else None()
						),
						defaultIndex
					)
				)
			})
		];

		styleA = filtermap(style, \s -> switch (s : MDropDownCombinedStyle) {
			MAutoCompleteStyle(): {
				v : Maybe<MAutoCompleteStyle> = Some(s);
				v;
			};
			default: None();
		});
		buttonStateA = filtermap(style, \s -> switch (s : MDropDownCombinedStyle) {
			MButtonState(): {
				v : Maybe<MButtonState> = Some(s);
				v;
			};
			default: None();
		});
		autoCompleteStyles = replaceStructMany(metaAppAutocompleteStyles, styleA);

		MConstruct([
			\ -> connectSelectDistinctu(indexB, itemB, \index -> elementAt(
				allItems,
				index,
				if (showAnyItem) allItems[0] else ""
			))
		], MAutoComplete(
			itemB,
			allItems,
			if (!containsStruct(style, MHideAllOnEmpty())) {
				replaceStructMany(autoCompleteStyles, [MShowAllOnEmpty(), extractStruct(autoCompleteStyles, MMaxHeight(200.))])
			} else { autoCompleteStyles },
			buttonStateA
		))
	}
}

getDropDownOrAutoCompleteFixed(
	selected : DynamicBehaviour<int>,
	items : [string],
	showAnyItem : bool,
	maxDropDownLength : Maybe<int>,
	defaultIndex : int,
	nonSpecified : string,
	style : [MDropDownCombinedStyle]
) -> Material {

	cuttedItems = map(items, \i -> substring(i, 0, 200));
	
	border = extractStruct(style, MDropDownBorder(0., 12., 0., 0.));

	dropDownStyle = filtermap(style, \st -> switch (st) {
		MDropDownStyle(): {v : Maybe<MDropDownStyle> = Some(st); v}
		default: None();
	})
	|> (\st -> if (nonSpecified == "") st else replaceStruct(st, MNonSpecified(MMenuSingleLine(nonSpecified, []))))
	|> (\st -> replaceStruct(st, border))
	|> (\st -> removeAllStructs(st, MLabel("")));

	metaAppAutocompleteStyles = [
		MWidth(250.0),
		MLabel(_("Start typing")),
		MShowDropDownArrow(true),
		MShowUnderline(true),
		MCurrentMatches(\arr ->
			nextDistinct(selected,
				either(
					findmap(arr, \item ->
						if (item.third.score == i2d(intMax))
							Some(if (showAnyItem && item.first == 0) -1 else item.first)
						else None()
					),
					defaultIndex
				)
			)
		)
	];

	styleA =
		filtermap(style, \s -> switch (s : MDropDownCombinedStyle) {
			MAutoCompleteStyle(): {v : Maybe<MAutoCompleteStyle> = Some(s); v};
			default: None();
		});
	autoCompleteStyles =
		replaceStructMany(metaAppAutocompleteStyles, styleA)
		|> (\st ->
				if (contains(style, MHideAllOnEmpty())) st
				else replaceStructMany(st, [MShowAllOnEmpty(), extractStruct(st, MMaxHeight(200.))])
		);
	buttonStateA =
		filtermap(style, \s -> switch (s : MDropDownCombinedStyle) {
			MButtonState(): {v : Maybe<MButtonState> = Some(s); v};
			default: None();
		});

	styles = [
		eitherMap(maxDropDownLength, \m -> [MItemsLimit(m)], []),
		if (showAnyItem) [MShowAnyItem()] else [],
		[
			MDropDownStyles(dropDownStyle),
			MAutoCompleteStyles(autoCompleteStyles),
			MAutoCompleteState(buttonStateA)
		]
	]
	|> concatA;

	MDropDownOrAutoComplete(cuttedItems, selected, styles)
}