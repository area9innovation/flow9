import material/material_ui;

main () {
	items1 = generate(0, 5, i2s);
	items2 = generate(0, 50, i2s);

	selected = make(-1);
	fpprint("selected")(selected);

	text = make("");
	fpprint("text")(text);

	enabledStyle = \st -> Pair(st, make(true));
	disabledStyle = \st -> Pair(st, make(false));
	styles = [
		disabledStyle(
			MMultipleSelection(make([]), [
				MWidth(240.0),
				// MNonSpecifiedString("Test string"),
			]),
		),

		enabledStyle(MDropDownStyles([MWidth(340.0)])),
		disabledStyle(MDropDownStyles([MNonSpecified(MMenuSingleLine("No selection", []))])),
		disabledStyle(MDropDownStyles([MAddClearButton()])),

		enabledStyle(MAutoCompleteStyles([MWidth(540.0)])),
		disabledStyle(MAutoCompleteStyles([MDictionaryDynamic(make(reverseA(items2)))])),

		enabledStyle(MAutoCompleteState([])),
		enabledStyle(MItemsLimit(10)),
		disabledStyle(MRequiredField()),
		disabledStyle(MLabel("Test label")),
		disabledStyle(MShowAnyItem()),
		disabledStyle(MCustomAnyItem("Without selection")),
		disabledStyle(MInputInspector(text)),
		disabledStyle(MHideBrowseButton()),
		disabledStyle(MChangeOnClick()),
	];

	selecteD = make(-1);
	selecteD2 = make(-1);

	fpprint("indexB")(selecteD);
	fpprint("indexB2")(selecteD2);

	mkView = \style -> MLines([
		MDropDownOrAutoComplete(items1, selected, style),
		MFixedY(16.0),
		MDropDownOrAutoComplete(items2, selected, style),
	]);

	flags = map(styles, secondOfPair);
	view = MLines(concat(
		map(styles, unpairC(\st, flagB -> {
			MCheckBox(MText(toString(st), []), flagB, [MIconButtonBorder(2.0)]);
		})),
		[
			MFixedY(16.0),
			MSelect(
				fmerge(flags),
				\values -> {
					style0 = filtermap(styles, unpairC(\st, flagB -> {
						if (getValue(flagB)) {
							Some(st);
						} else {
							None();
						}
					}));

					ddStyles = extractStructMany(style0, MDropDownStyles([]));
					acStyles = extractStructMany(style0, MAutoCompleteStyles([]));
					acStates = extractStructMany(style0, MAutoCompleteState([]));

					style = concat(
						replaceStructMany(style0, [MDropDownStyles([]), MAutoCompleteStyles([]), MAutoCompleteState([])]),
						[	MDropDownStyles(mapConcat(ddStyles, \st -> st.style)),
							MAutoCompleteStyles(mapConcat(acStyles, \st -> st.style)),
							MAutoCompleteState(mapConcat(acStates, \st -> st.state)),
						]
					);
					mkView(style);
				}
			),
		]
	));

	mrender(makeMaterialManager([]), true, view);
}
