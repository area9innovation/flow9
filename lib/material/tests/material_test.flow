import material/internal/material_icons;
import material/material_timeperiodpicker;
import tropic/trender;
import ds/set;
import ui/videoplayer;
import material/extra/icon_picker/material_icon_picker;
import material/extra/filebrowser/material_filebrowser;
import material/extra/filesystem/localfilesystem_extended_api;
import material/material_snackbar;
import net/appurl;
import sys/platformevent;

Person(name: string, subtitle: string, imageurl : string);
Painting(name : string, artist : string, imageurl : string);

main() {
	setLocalFilesystemExtAPI();

	imageMapIndex = make(-1);
	starttime = timestamp();
	selectedItems = make([0]);
	showFab = make(true);
	manager = makeMaterialManager([makeMaterialTheme(true, MIndigo(500), MPinkA(400))]);
	setAppUrl("/material");
	time = make(stamp2time(timestamp()));
	progress = make(false);
	inspectScroll = makeTScrollInspectVisible();

	playing = make(false);
	looping = make(false);
	vfullscreen = make(false);
	keepAspectRatio = make(true);
	position = make(0.);
	vlength = make(1.);
	volume = make(0.);
	posSlider = make(0.);
	timeRange = make(false);
	videoSize = make(WidthHeight(640., 360.));
	subtitles = make(VideoSubtitle("", []));

	addPlatformEventListener(ApplicationSuspended(), \ -> println("Application suspended"));
	addPlatformEventListener(ApplicationUserIdle(), \ -> println("User idle"));
	addPlatformEventListener(ApplicationUserActive(), \ -> println("User active"));
	addPlatformEventListener(ApplicationResumed(), \ -> println("Application resumed"));

	grapes = "Abouriou
Acıkara
Agiorgitiko
Aglianico
Aleatico
Alfrocheiro
Alicante Bouschet
Aragonês
Aramon
Areni Noir
Aspiran
Băbească Neagră
Babić
Baco Noir
Baga
Barbarossa
Barbera
Bastardo
Black Muscat
Blauburger
Blauburgunder
Blauer Frühburgunder
Blauer Spätburgunder
Blauer Wildbacher
Blaufränkisch
Bobal
Bonarda
Brachetto
Braquet
Breton
Brocol
Brunello
Burgund Mare
Cabernet
Cabernet Dorsa
Cabernet Franc
Cabernet Gernischt
Cabernet Sauvignon
Cabernet Severny
Caladoc
Callet
Canaiolo
Cannonau
Carcajolo Nero
Carignan
Carmenère
Carnelian
Castelão
Catawba
Cencibel
Centurian
Cesanese
Chambourcin
Chancellor
Charbono
Chiavennasca
Ciliegiolo
Cinsault
Colorino
Concord
Corvina
Cot
Couderc Noir
Counoise
Criolla Chica
Crljenak Kaštelanski
Croatina
Delaware
Dolcetto
Domina
Dornfelder
Dunkelfelder
Durif
Espadeiro
Evmolpia
Fer Servadou
Fetească Neagră
Fogoneu
Franconia
Frankovka
Frappato
Freisa
Frühburgunder
Gaglioppo
Gamay
Gamé
Gamza
Garnacha
Garrut
Graciano
Grand Noir de la Calmette
Grenache
Grignolino
Grolleau
Groppello
Harriague
Helfensteiner
Heroldrebe
Isabella
Jaen
​João de Santarém
Jurançon Noir
Kadarka
Kalecik Karası
Kékfrankos
Lagrein
Lambrusco
Lemberger
Limnio
Lledoner Pelut
Magaratch Ruby
Magliocco
Malbec
Malvasia Nera
Mammolo
Mandilaria
Manto Negro
Maratheftiko
Maréchal Foch
Marselan
Marzemino
Mataro
Mavro
Mavrodaphne
Mavrud
Mazuelo
Melnik
Melnik 55
Mencía
Merlot
Mission
Modra Frankinja
Modri Pinot
Molinara
Monastrell
Mondeuse
Monica
Montepulciano
Morellino
Moreto
Moristel
Morrastel
Mourisco Tinto
Mourvèdre
Müllerebe
Muscardin
Muscat Hamburg
Nebbiolo
Negramoll
Negrette
Negroamaro
Nerello Cappuccio
Nerello Mascalese
Nero d'Avola
Nero di Troia
Nielluccio
Norton
Öküzgözü
Ormeasco
Ottavianello
País
Pamid
Papazkarasi
Parraleta
Pelaverga
Periquita
Perricone
Petit Verdot
Petite Sirah
Piedirosso
Pignolo
Pineau d'Aunis
Pinenc
Pinot Meunier
Pinot Nero
Pinot Noir
Pinotage
Plavac Mali
Portan
Portugieser
Poulsard
Pressac
Prieto Picudo
Primitivo
Prokupac
Prugnolo Gentile
Raboso
Ramisco
Refosco
Rondinella
Rondo
Rossese
Rouchet
Royalty
Rubin
Rubired
Ruby Cabernet
Ruen
Rufete
Sagrantino
Salvador
Samsó
Samtrot
Sangiovese
Saperavi
Schiava
Schioppettino
Schwarzriesling
Sciaccarello
Segalin
Seibel
Shiraz
Sousão
Spanna
Spätburgunder
St Laurent
Syrah
Taminga
Tannat
Tarrango
Tempranillo
Teran
Teroldego
Tibouren
Tinta Amarela
Tinta Barroca
Tinta Cão
Tinta Miúda
Tinta Negra
Tinta Pinheira
Tinta Roriz
Tintilia
Tinto Fino
Touriga Franca
Touriga Nacional
Tribidrag
Trincadeira
Trollinger
Trousseau
Ull de Llebre
Uva Rara
Vaccarèse
Valdiguié
Vavrinecke
Vernatsch
Vespolina
Villard Noir
Vranac
Xynomavro
Zinfandel
Zweigelt";

	carContent = [
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/denise-nouvion-wallpapers-4-1280x800.jpg", []), [MCarouselText("Denise Nouvion", "Cloudy Mountain"), MOnClick(\ -> println("mountains click"))]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/adrian-zorzano-wallpaper-1280x800.jpg", []), [MCarouselText("Adrian Zorzano", "")]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/michael-olivo-wallpaper-1280x800.jpg", []), [MCarouselText("Michael Olivo", "The Transition Period")]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/Mike-Dornseif-wallpaper-1280x800.jpg", []), [MCarouselText("Mike Dornseif", "Abstract Nod To The Past")]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/adrian-zorzano-wallpaper-1280x800.jpg", []), [MCarouselText("Adrian Zorzano", "")]),
	];
	datatableMenu = \i : int ->
		MMenu(
		MIconButton("more_vert", nop, [], []),
		[
			MMenuSingleLine("First", [MPrimaryAction(MIcon("settings", []))],),
			MMenuSingleLine("Second", [MPrimaryAction(MIcon("settings", []))],),
			MMenuSingleLine("Third", [MPrimaryAction(MIcon("settings", []))],),
		], [MOnListClick(const(true), \__ -> println(i)), MSingleSelection(make(min(i - 1, 2))), MCondensed(false)]);
	// MMenu(
	// 	MIconButton("more_vert", [], []),
	// 	[
	// 		MMenuSingleLine("Settings", [MPrimaryAction(MIcon("settings", []))],),
	// 		MMenuSingleLine("Never show this message",
	// 			{
	// 				dynIcon = make(TEmptyIcon());
	// 				[
	// 					MPrimaryAction(MDynamicIcon(dynIcon)),
	// 					MOnClick(\ ->  next(dynIcon, if (getValue(dynIcon) == TEmptyIcon()) MIcon("check", []) else TEmptyIcon()))
	// 				]
	// 			}),
	// 		MSeparatorLine(),
	// 		MSubMenu("Sub Menu", [
	// 			MMenuSingleLine("Undo", [MEnabled(const(false)), MPrimaryAction(MIcon("undo", [])), MAdditionalText("Ctrl+Z")]),
	// 			MMenuSingleLine("Redo", [MPrimaryAction(MIcon("redo", [])), MAdditionalText("Ctrl+Y")],),
	// 			MSeparatorLine(),
	// 			MSubMenu("Another Sub Menu", [
	// 				MMenuSingleLine("Undo", [],),
	// 				MMenuSingleLine("Redo", [],)
	// 			], [MOnListClick(const(false), println), MEnabled(const(true))])
	// 		], [MOnListClick(const(true), \__ -> println(i))]),
	// 		MMenuSingleLine("Exit", [MAdditionalText("Alt+F4")])
	// 	], [MOnListClick(const(true), \__ -> println(i))]);

	lightBackground = make(true);
	isArabicState = make(false);
	sliderValue = make(50.);
	sliderEnabled = make(true);
	search = make("");
	iconName = make("home");
	leftexpander1 = make(true);
	leftexpander2 = make(false);
	rightExpander = make(false);
	menuselected = make(false);
	subscribe2(menuselected, \m -> next(rightExpander, false));
	subSideNav = make(TEmpty());
	sidenavWidth = 320.0;
	primaryColor = make(getPrimaryColor(manager));
	accentColor = make(getAccentColor(manager));

	us = mrender(manager, true,
		MAppStructure([
				MAppBar(MToolbar(
					leftexpander2,
					MCenterY(MText("Try to stretch", [MTitle()])),
					[
						MTextInput(search, [TextInputType(NumericType()), MaxChars(3), AutoAlign(AutoAlignCenter()), MFilterAction(println), MWidth(200.), MLabel("Search?")], []),
						MIconButton("search", \ -> println("Searching " + getValue(search)), [getToolbarItemsColor(manager)], [])
						|> (\f -> MCenterY(f)),
						MIconButton("more_horiz", \ -> next(rightExpander, !getValue(rightExpander)), [getToolbarItemsColor(manager)], [])
						|> (\f -> MCenterY(f)),
					],
					[]
				)),

				MLeftNav(MSideNav(
					// You can use MSNSmallHead xor MSNCardHead xor MSNCustomHead , as you wish. For examples look at material_sidebar
					MSNCardHead(
						"http://build.area9innovation.com/material/head_background.jpg",
						MSNHeadPhoto(const("http://api.adorable.io/avatars/72/eott@adorable.io.png"), nop),
					 	[
					 		MSNHeadPhoto(const("http://api.adorable.io/avatars/72/rott@adorable.io.png"), nop),
					 		MSNHeadPhoto(const("http://api.adorable.io/avatars/72/tott@adorable.io.png"), nop),
					 	],
						const("Jonathan Lee"),
						const("heyfromjonathan@gmail.com")
					),
/*					MNavigation([ //To check it you have to comment MList and MSubList sections
						MNavigationMenu("1Hello", [
							MNavigationSubmenu("1hello", \ -> println("submenu selected")),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
						]),
						MNavigationMenu("2World", [
							MNavigationAction(\ -> println("menu selected"))
						]),
						MNavigationMenu("3Hello", [
							MNavigationSubmenu("3hello", nop),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
						]),
						MNavigationMenu("4World", [
							MNavigationSubmenu("4hellO", nop),
							MNavigationSubmenu("worlD", nop),
							MNavigationSubmenu("hellO", nop),
							MNavigationSubmenu("worlD", nop),
						])
					], [MNavigationOnSelect(menuselected)]),
*/					MList( // MList section
						[
							MSingleLine("Abbey Christensen", [MPrimaryAction(MIcon("check_box", []))]),
							MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", []))]),
							MSingleLine("Mary Johnson", [MPrimaryAction(MIcon("sms_failed", []))]),
							MSingleLine("Peter Carlsson", [MPrimaryAction(MIcon("favorite", []))]),
						],
						[],
						[
							MListSelection(const(true), false, false, selectedItems),
						]
					),
					leftexpander2,
					[
						MSubList( // MSubList section
							MSelect(selectedItems, \s -> MList(
								if (s == [0])
									[
										MSingleLine("SubMenu1", [MPrimaryAction(MIcon("check_box", []))]),
										MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", []))]),
									]
								else if (s == [1]) []
								else if (s == [2])
									[
										MSingleLine("SubMenu3", [MPrimaryAction(MIcon("check_box", []))]),
										MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", []))]),
									]
								else [], [], []))),
					]
				), leftexpander2, [MSideNavMini()]),
				MRightNav(
					MAvailable(
						MGroup([
							MInteractive([TMouseDown(make(false))], TRectangle([Fill(green), FillOpacity(0.5)], TFillWY(150.0))),
							MNavigation([
								MNavigationMenu("Hello", [
									MNavigationSubmenu("hello", \ -> println("submenu selected")),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
								]),
								MNavigationMenu("World", [
									MNavigationAction(\ -> println("menu selected"))
								]),
								MNavigationMenu("Hello", [
									MNavigationSubmenu("hello", nop),
									MNavigationMenu("Hello", [
										MNavigationSubmenu("hello", nop),
										MNavigationSubmenu("world", nop),
										MNavigationSubmenu("hello", nop),
										MNavigationSubmenu("world", nop),
										MNavigationSubmenu("hello", nop),
										MNavigationSubmenu("world", nop),
									]),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
								]),
								MNavigationMenu("World", [
									MNavigationSubmenu("hellO", nop),
									MNavigationSubmenu("worlD", nop),
									MNavigationSubmenu("hellO", nop),
									MNavigationSubmenu("worlD", nop),
								])
							], [MNavigationOnSelect(menuselected), MInCard()]),
						]),
						TFillWY(150.0)
					),
					rightExpander,
					[MSideNavWidth(150.0), MSideNavPersistent(const(true))]
				),

				MContent(
					MLinesA([
						MToolbar(
							leftexpander1,
							MCenterY(MText("Secondary toolbar", [MTitle()])),
							[
								MIconButton("settings", \ -> println("click!"), [], [])
								|> (\f -> MCenterY(f)),
								MIconButton("refresh", \ -> println("click!"), [], [MEnabled(const(false))])
								|> (\f -> MCenterY(f)),
							],
							[
								MBackgroundStyle([MFill(MBlue(700))]),
								MItemsColor(MWhite()),
								MCustomExpander(MIconToggle("face", [MToggleFalseIcon("extension", [])], []))
							]
						),
						MMenuPanel([
							MMenu(
								MTextButton("File", nop, [], []),
								[
									MSubMenu("New",
										[
											MMenuSingleLine("Document", [MPrimaryAction(MIcon("assignment", [MBlue(500)]))]),
											MMenuSingleLine("Spreadsheet", [MPrimaryAction(MIcon("speaker_notes", [MGreen(500)]))]),
											MMenuSingleLine("Presentation", [MPrimaryAction(MIcon("settings_system_daydream", [MAmber(500)]))]),
										],
										[
											MOnListClick(const(true), \i -> println("File New " + i2s(i)))
										]),
									MMenuSingleLine("Open...", [MPrimaryAction(MIcon("folder_open", [])), MAdditionalText("Ctrl+O")]),
									MMenuSingleLine("Save", [MPrimaryAction(MIcon("save", [])), MAdditionalText("Ctrl+S")]),
									MMenuSingleLine("Save As...", [MAdditionalText("Ctrl+Shift+S")]),
									MSeparatorLine(),
									MMenuSingleLine("Page Setttings...", []),
									MMenuSingleLine("Print", [MPrimaryAction(MIcon("print", [])), MAdditionalText("Ctrl+P")]),
									MSeparatorLine(),
									MMenuSingleLine("Exit", [MPrimaryAction(MIcon("exit_to_app", [])), MAdditionalText("Ctrl+F4")]),
								], [MOnListClick(const(true), \i -> println("File " + i2s(i))), MMenuIndent(), MFixPosition(true)]),
							MMenu(
								MTextButton("Edit", nop, [], []),
								[
									MMenuSingleLine("Undo", [MPrimaryAction(MIcon("undo", [])), MAdditionalText("Ctrl+Z")]),
									MMenuSingleLine("Redo", [MEnabled(const(false)), MPrimaryAction(MIcon("redo", [])), MAdditionalText("Ctrl+Y")],),
									MSeparatorLine(),
									MMenuSingleLine("Cut", [MPrimaryAction(MIcon("content_cut", [])), MAdditionalText("Ctrl+X")]),
									MMenuSingleLine("Copy", [MPrimaryAction(MIcon("content_copy", [])), MAdditionalText("Ctrl+C")]),
									MMenuSingleLine("Paste", [MPrimaryAction(MIcon("content_paste", [])), MAdditionalText("Ctrl+V")]),
									MSeparatorLine(),
									MMenuSingleLine("Select All", [MAdditionalText("Ctrl+A")]),
								], [MOnListClick(const(true), \i -> println("Edit " + i2s(i))), MMenuIndent()]),
							MMenu(
								MTextButton("Help", nop, [], []),
								[
									MMenuSingleLine("Documentation", [MPrimaryAction(MIcon("help", [])), MAdditionalText("F1")]),
									MSeparatorLine(),
									MMenuSingleLine("About", []),
								], [MOnListClick(const(true), \i -> println("Help " + i2s(i))), MMenuIndent()]),
						], []),
						MBorder(8.0, 8.0, if (mobile) 8. else 24., 8.0, MLinesA([
							MBaselineCols([
								MSelect(primaryColor, \c -> MTextButton("PRIMARY COLOR", \ -> {
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(primaryColor)],
										MColorPicker(primaryColor, [
											MaterialColorPicker(),
											MDialogButtons([
												MButtonOk("", \ -> updateMaterialTheme(
													manager,
													makeMaterialTheme(getValue(manager.white), getValue(primaryColor), getValue(accentColor))
												)),
												MButtonCancel("esc", \ -> next(close, true))
											])
										])
									)
								}, [MButtonRaised(), c], [MShortcut("p")])),
								MSelect(accentColor, \c -> MTextButton("ACCENT COLOR", \ -> {
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(accentColor)],
										MColorPicker(accentColor, [
											MaterialColorPicker(),
											MDialogButtons([
												MButtonOk("", \ -> updateMaterialTheme(
													manager,
													makeMaterialTheme(getValue(manager.white), getValue(primaryColor), getValue(accentColor))
												)),
												MButtonCancel("esc", \ -> next(close, true))
											])
										])
									)
								}, [MButtonRaised(), c], [MShortcut("A")]))
							]),
							MCursor(FingerCursor(), MParagraph("Others have failed, I will not.", [MDisplay2(), MWidth(400.)])),
							MParagraph("Science, my boy, is made up of mistakes, but they are mistakes which it is useful to make, because they lead little by little to the truth.", [MSubheading(), MWidth(400.)]),
							// |> (\f -> MAvailable(f, TFixed(640., 400.))),
							MSplitter(TRectangle([Fill(green)], TFillXY()), TRectangle([Fill(red)], TFillXY()), TFillXH(400.),
								[MSplitterSize(150., 170., 200., -1.)]),
							MColsA([TRectangle([Fill(yellow)], TFixed(150., 20.)), TRectangle([Fill(blue)], TFixed(8., 20.)),
								TRectangle([Fill(yellow)], TFixed(400., 20.)), ]),
							MColsA([
								MSwitchControl(make(false), [MOnOffText("ON", "OFF"), MFocusId(const(20))]),
								MSwitchControl(lightBackground, [MOnOffText("LIGHT", "DARK")]),
								MSwitchControl(isArabicState, [MOnOffText("Arabic", "English")])
							])
							|> (\f -> MComponentGroup(f, [MEnabled(sliderEnabled)]))
							|> (\f -> MConstruct([
									makeSubscribe2(lightBackground, \w -> {
										showSnackbar = make(true);
										nextDistinct(manager.white, w);

										if (w)
											showMSnackbar(manager, "Light Theme", [
												MTextButton("CLOSE", \ -> next(showSnackbar, false), [], []),
												MSnackbarVisible(showSnackbar)
											])
										else
											showMSnackbar(manager, "Dark Theme", [])
									}),
									makeSubscribe2(isArabicState, \isArabic ->
										if (isArabic) setLang("ar") else setLang("en")
									)
								], f)),

							MFloatingButton("send", [], [MOnClick(\ -> next(showFab, false)), MEnabled(showFab)]),

							TFixed(0.0, 20.0),

							MCheckBox(MText("Enable slider", [MBody()]), sliderEnabled, []),

							TFixed(0.0, 20.0),

							MColsA([
								MChip("Fanta", [MCloseButton(), MEnabled(const(false)), MOrange(500)]),
								MChip("Sprite", [MCloseButton(), MAvatar("http://popsop.com/wp-content/uploads/sprite_new_logo_small.jpg", []), MEnabled(const(false)),]),
								MChip("7-Up", [MCloseButton(), MLetterIcon("7", [MGreen(500)], [MWhite()])]),
								MChip("Coca-Cola", [MCloseButton(), MRed(500), MChipSelectable(const(true), make(false))]),
								MChip("Pepsi", [MCloseButton(), MChipSelectable(const(true), make(false)), MIndigo(500)]),
								MChip("Dr Pepper", [MChipSelectable(const(true), make(true)), MPurple(500)]),
							]),

							TFixed(0.0, 20.0),

							MSelect(sliderEnabled, \en -> {
								if (!en) TEmpty()
								else MProgressBar([WidthHeight(520.0, 5.0)])
							}),

							TFixed(0.0, 20.0),

							MProgressBarDeterm(fselect(sliderValue, FLift(\slv -> slv / 100.)), []/*getAccentColor(manager), MColor(getAccentColor(manager).color, 200, getAccentColor(manager).accent), WidthHeight(-1.0, -1.0)*/),

							TFixed(0.0, 20.0),

							{
								btn = TFrame(0.0, 20.0, [MFill(getPrimaryColor(manager))], TFixed(40.0, 40.0));
								MColsA([
									MProgressCircle([getAccentColor(manager)],
										// clickable(manager, btn, \ -> next(progress, !getValue(progress)))
									),
									TFixed(8.0, 0.0),
									MProgressCircleDeterm(fselect(sliderValue, FLift(\slv -> slv / 100.)), [getAccentColor(manager), MAddArrow(const(1.5))],
										// clickable(manager, btn, nop)
									)
								])
							},

							TFixed(0.0, 24.0),
							MCarousel(carContent, make(0), [MCarouselEnableArrows(), MLoopScroll(), MCarouselItemSpan(2),
								MCarouselMaximize(make(false), [MCarouselContentZoom(1., 5., 0.25)])])
							|> (\f -> MAvailable(f, TFillMin(640., 0.)))
							|> MCenterX,
							TFixed(0.0, 24.0),

							MColsA(
								MRadios(
									make(-1), [],
									map(enumFromTo(0, 4), \i -> MText(i2s(i), []))
								)
							)
							|> (\f -> MComponentGroup(f, [MEnabled(sliderEnabled)])),

							MAvailable(
								MSlider(sliderValue, [MSliderIconLeft("volume_up"), MSliderDisplayValue(true), MSliderRange(5., 95.), MSliderDiscrete(), MSliderStep(10.), MSliderUndefined(make(true))])
								|> (\f -> MComponentGroup(f, [MEnabled(sliderEnabled)])),
								TFixed(360.0, 0.0)
							),

							MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
							|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true))])),
							MTextInput(make(""), [MFloatingLabel(), /*MRed(500),*/ MLabel("Label"), MShowEditIcon(true), /*MInputTemplate("__/__/____", \s -> {println(s); isDigits(s);})*/ MDynamicSize()], [MHelperText(const(Some("Hint text")), false)]),
							MTextInput(make(""), [Multiline(true), MaxChars(20000), MWidth(400.), MMaxLines(1), MFloatingLabel(), /*MRed(500),*/ MLabel("Hint text"), MShowEditIcon(true), /*MInputTemplate("__/__/____", \s -> {println(s); isDigits(s);})*/], []),
							MTextInput(make(""), [Multiline(true), MaxChars(20000), MWidth(400.), MMaxLines(-1), MFloatingLabel(), /*MRed(500),*/ MLabel("Hint text"), MShowEditIcon(true), /*MInputTemplate("__/__/____", \s -> {println(s); isDigits(s);})*/], []),
							MTextInput(make("disabled"), [MWidth(480.), MLabel("some text")], [MEnabled(const(false))]),

							MAutoComplete(make(""), [grapes], [Multiline(true), MShowDropDownArrow(true), MLabel("Search"), MShowLeftButton(true), MShowAllOnEmpty()/*MWidth(400.), MMaxHeight(200.)*/], []),
							MAutoComplete(make(""), [grapes], [Multiline(true), MShowDropDownArrow(true), MLabel("Search"), MShowLeftButton(true), MShowAllOnEmpty(), MNativeInput(false), MSuggestionsOnTop()/*MWidth(400.), MMaxHeight(200.)*/], []),
							// example of using MAutoComplete as Dialog
							{
								content = make("");
								label = "Search";
								MSelect(content, \con -> MTextButton(if (con == "") label else con, \ -> {
									close = make(false);
									foc = make(true);

									ShowMDialog(manager, close, [MDialogFullScreen(), MDialogCustomFrame(100., 100., 100., 100., TEmpty())],
										MConstruct(
											[\ -> subscribe2(foc, \f ->  timer(15, \ -> if (!getValue(foc)) next(close, true)))],
											MAutoComplete(content, [grapes], [MLabel("Search"), MWidth(400.), MMaxHeight(200.), MShowLeftButton(true)], [TTextInputFocus(foc)])
										)
									);
								}, [], [MOnLongClick(\ -> println("long click")), MOnLongTouch(\ -> println("long touch")), MOnClick(\ -> println("click"))]))
							},

							MAutoComplete(make(""), [grapes], [
								MLabel("Search with custom style"), MWidth(400.), MMaxHeight(200.),
								MCompletionFn(\com, isSelected, setWordFn -> {
									face =
										MColsA([
											MLinesA([
												TFillX(),
												MEllipsisText(com.sentence, [MSubheading()]),
												MEllipsisText("comment", [MListBody()]),
											])
											|> (\f -> MBorder(64., 0., 0., 0., f))
											|> MCenterY,
											MAvatar("http://blackdesert-info.ru/wp-content/uploads/vinograd.png", [])
											|> (\f -> MBorder(16., 0., 16., 0., f))
											|> MCenterY
										])
										|> (\f -> MAvailable(f, TFillXH(80.)))
										|> (\f -> MFixSize(f, TFillXH(80.)));
									MComponent([MOnClick(\ -> setWordFn(com)), MRippleType(const(MRippleFill()))], \focus ->
										makeMListLine(face, focus, const(isSelected), const(true), [],
											[MFill(getAccentColor(manager)), FillOpacity(0.4)]
										)
									)
								}), MShowLeftButton(true)
							], []),
							TFixed(0.0, 8.0),
							MParagraph("Test with various elements:", [MWidth(400.)]),
							TFixed(0.0, 8.0),
							MColsA([
								MIconButton("chevron_left", \ -> println("click!"), [getPrimaryColor(manager)], []),
								MIconButton("chevron_left", \ -> println("click!"), [], [MEnabled(const(false))]),

								MDropDown(make(-1), "Pick", ["One", "Two", "Three"], [MWidth(-1.0), MGroups([Pair(0, "First Group"), Pair(2, "Second Group")]), MEnabled(const(false))])
							]),

							TFixed(0.0, 8.0),
							MColsA([
								MText("MDropDownMenu:   ", [MSubheading()]) |> (\f -> MCenterYIn(f, TFixed(0., 32.))),
								MDropDownMenu(map([Pair("One", "today"), Pair("Two", "chat_bubble"), Pair("Three", "favorite")], \t ->
									MMenuSingleLine(t.first, [MPrimaryAction(MIcon(t.second, []))])), make(-1),
									[MNonSpecified(MMenuSingleLine("Pick", [MPrimaryAction(MIcon("grade", []))])), MMaxHeight(88.)])
							]),
							TFixed(0.0, 8.0),

							MIconToggle("today", [MTeal(100), FillOpacity(1.0)], [MTooltipText(const("tooltip text")), MToggleValue(make(false)), MEnabled(const(false))]),
							TFixed(0.0, 8.0),
							MIconToggle("android", [MBlack(), FillOpacity(1.0)], [MTooltipText(const("tooltip text"))]),
							TFixed(0.0, 8.0),
							MIcon("message", [MIconCounter(const(24), [])]),

							MDataTable([
									MColumn("input fields", "type some text", 400, []),
								],
								[
									[MSmallEditDialog(make(""), [MLabel("InlineText"), MWidth(400.), /*MShowEditIcon(true),*/ MaxChars(20)], [])],
									[MSmallEditDialog(make(""), [MLabel("InlineText with floating label"), MWidth(400.), MFloatingLabel()], [])],
								],
								[]),
							TPicture("https://s3-us-west-2.amazonaws.com/s.cdpn.io/167451/test_BG.jpg", [])
							// TRectangle([Fill(blue)], TFixed(1000., 1000.))
							|> (\f ->
								MFilter(
									[
										Shader(
											"
												uniform highp mat3 u_cmatrix;

												attribute highp vec2 a_VertexPos;
												attribute lowp vec4 a_VertexColor;
												attribute frag_highp vec2 a_VertexTexCoord;

												out frag_highp vec2 v_texCoord;

												void main()
												{
													gl_Position = vec4(u_cmatrix * vec3(a_VertexPos, 1.0), 1.0);
													v_texCoord = a_VertexTexCoord;
												}
											",
											"
												uniform sampler2D s_tex;
												uniform vec4 filterArea;
												uniform vec4 bounds;

												uniform float sepia;
												uniform float noise;
												uniform float noiseSize;
												uniform float scratch;
												uniform float scratchDensity;
												uniform float scratchWidth;
												uniform float vignetting;
												uniform float vignettingAlpha;
												uniform float vignettingBlur;
												uniform float seed;

												in frag_highp vec2 v_texCoord;

												const float SQRT_2 = 1.414213;
												const vec3 SEPIA_RGB = vec3(112.0 / 255.0, 66.0 / 255.0, 20.0 / 255.0);

												float rand(vec2 co) {
													return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
												}

												vec3 Overlay(vec3 src, vec3 dst)
												{
													return vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),
																(dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),
																(dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)));
												}


												void main()
												{
													gl_FragColor = texture2D(s_tex, v_texCoord);
													vec3 color = gl_FragColor.rgb;

													if (sepia > 0.0)
													{
														float gray = (color.x + color.y + color.z) / 3.0;
														vec3 grayscale = vec3(gray);

														color = Overlay(SEPIA_RGB, grayscale);

														color = grayscale + sepia * (color - grayscale);
													}

													vec2 dimensions = vec2(bounds[2], bounds[3]);
													vec2 coord = v_texCoord * filterArea.xy / dimensions.xy;

													if (vignetting > 0.0)
													{
														float outter = SQRT_2 - vignetting * SQRT_2;
														vec2 dir = vec2(vec2(0.5, 0.5) - coord);
														dir.y *= dimensions.y / dimensions.x;
														float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignettingBlur * SQRT_2), 0.0, 1.0);
														color.rgb *= darker + (1.0 - darker) * (1.0 - vignettingAlpha);
													}

													if (scratchDensity > seed && scratch != 0.0)
													{
														float phase = seed * 256.0;
														float s = mod(floor(phase), 2.0);
														float dist = 1.0 / scratchDensity;
														float d = distance(coord, vec2(seed * dist, abs(s - seed * dist)));
														if (d < seed * 0.6 + 0.4)
														{
															highp float period = scratchDensity * 10.0;

															float xx = coord.x * period + phase;
															float aa = abs(mod(xx, 0.5) * 4.0);
															float bb = mod(floor(xx / 0.5), 2.0);
															float yy = (1.0 - bb) * aa + bb * (2.0 - aa);

															float kk = 2.0 * period;
															float dw = scratchWidth / dimensions.x * (0.75 + seed);
															float dh = dw * kk;

															float tine = (yy - (2.0 - dh));

															if (tine > 0.0) {
																float _sign = sign(scratch);

																tine = s * tine / period + scratch + 0.1;
																tine = clamp(tine + 1.0, 0.5 + _sign * 0.5, 1.5 + _sign * 0.5);

																color.rgb *= tine;
															}
														}
													}

													if (noise > 0.0 && noiseSize > 0.0)
													{
														vec2 pixelCoord = v_texCoord.xy * filterArea.xy;
														pixelCoord.x = floor(pixelCoord.x / noiseSize);
														pixelCoord.y = floor(pixelCoord.y / noiseSize);

														float _noise = rand(pixelCoord * noiseSize * seed) - 0.5;
														color += _noise * noise;
													}

													gl_FragColor.rgb = color;
												}
											",
											[
												Uniform("filterArea", "vec4", "[0, 0, 0, 0]"),
												Uniform("bounds", "vec4", "[0, 0, 0, 0]"),
												Uniform("seed", "1f", "0.0"),
												Uniform("sepia", "1f", "0.3"),
												Uniform("noise", "1f", "0.1"),
												Uniform("noiseSize", "1f", "1.0"),
												Uniform("value", "1f", "1.0"),
												Uniform("scratch", "1f", "1.0"),
												Uniform("scratchDensity", "1f", "0.3"),
												Uniform("scratchWidth", "1f", "1.0"),
												Uniform("vignetting", "1f", "0.0"),
												Uniform("vignettingAlpha", "1f", "1.0"),
												Uniform("vignettingBlur", "1f", "0.0")
											]
										)
									],
									f
								)
							),
							{
								lSelection = make([2]);
								MDataTable([
									MColumn("Student", "Name & surname of student", 96, [
										MSort(\i1,i2 -> {
											sortOrder = ["Trevor Carter", "Lena Bareket", "Rachel Kelley", "Joseph Dang"];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Average score", "Student's average score", 56, [
										MSort(\i1,i2 -> {
											sortOrder = [3.8, 4.1, 33.6, 4.8];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Year of birth", "Student's birth year", 96, [
										MSort(\i1,i2 -> {
											sortOrder = [1960, 1990, 1982, 1978];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Comment", "Some comment about the student", 128, [
										MSort(\i1,i2 -> {genericCompare(i1, i2)})
									]),
									MColumn("Course", "Course in which the student learns", 72, []),
									MColumn("More", "Additional options", 48, []),
								], [
									[MText("Trevor Carter", [MDataRow()]), MText("3.8", [MDataRow()]),  MText("1960", [MDataRow()]),  MSmallEditDialog(make("Very good person"), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed(), */MaxChars(16)], []),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(-1), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(1)],
									[MText("Lena Bareket", [MDataRow()]), MText("4.1", [MDataRow()]),  MText("1990", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(0), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(2)],
									[MText("Rachel Kelley", [MDataRow()]), MText("33.6", [MDataRow()]), MText("1982", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(1), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(3)],
									[MText("Joseph Dang", [MDataRow()]), MText("4.8", [MDataRow()]),  MText("1978", [MDataRow()]), MSmallEditDialog(make("Disabled comment"), [MLabel("Add a comment"), MWidth(128.)/*MCondensed()*/], [MEnabled(const(false))]),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(2), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(4)],
								//], [MMultiSelection(make(buildSet([0, 2]))), MPagination(make(3), ["2", "3", "4", "20"]), MFullWidth(),
								], [
									MCheckBoxSelection([]),
									MHoverEnabled(const(false)),
									/*MFullWidth,*/
									MHeaderActions(
									 	MSelect(lSelection, \ls ->
									 		if (length(ls) > 0)
										 		MColsA([
											 		MText(i2s(length(ls)) + if (length(ls) == 1) " item selected" else " items selected", [MSubheading(), getPrimaryColor(manager)]) |> MCenterY,
											 		TFillX(),
											 		MIconButton("delete", nop, [], []) |> MCenterY
											 	])
											 else
											 	MText("MCheckBoxSelection", [MTitle()]) |> MCenterY
										)
									 	|> (\f -> MBorder(16., 0., 16., 0., f))
									 	|> (\f -> MAvailable(f, TFillXH(56.)))
									 	, []),
									MListSelection(const(true), true, true, lSelection),
									MPagination(make(2), [2, 3, 4, 20]),
									MSortingDefault(make(MSortingParam(-1, true))),
									/*MPaginationAutoScaling(), */
									MMinTableHeigth(262.0),
									// MInCard(),
									MWidthByContent()
								])
							|> (\f -> MBorder(16.0, 32.0, 16.0, 32.0, f))
							},

							MDataTable([
									MColumn("Student", "Name & surname of student", 96, [
										MSort(\i1,i2 -> {
											sortOrder = ["Trevor Carter", "Lena Bareket", "Rachel Kelley", "Joseph Dang"];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Average score", "Student's average score", 56, [
										MSort(\i1,i2 -> {
											sortOrder = [3.8, 4.1, 33.6, 4.8];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Year of birth", "Student's birth year", 96, [
										MSort(\i1,i2 -> {
											sortOrder = [1960, 1990, 1982, 1978];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Comment", "Some comment about the student", 128, [
										MSort(\i1,i2 -> {genericCompare(i1, i2)})
									]),
									MColumn("Course", "Course in which the student learns", 72, []),
									MColumn("More", "Additional options", 48, []),
								], [
									[MText("Trevor Carter", [MDataRow()]), MText("3.8", [MDataRow()]),  MText("1960", [MDataRow()]),  MSmallEditDialog(make("Very good person"), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed(), */MaxChars(16)], []), MDropDown(make(0), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(1)],
									[MText("Lena Bareket", [MDataRow()]), MText("4.1", [MDataRow()]),  MText("1990", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []), MDropDown(make(1), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(2)],
									[MText("Rachel Kelley", [MDataRow()]), MText("33.6", [MDataRow()]), MText("1982", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []), MDropDown(make(2), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(3)],
									[MText("Joseph Dang", [MDataRow()]), MText("4.8", [MDataRow()]),  MText("1978", [MDataRow()]), MSmallEditDialog(make("Disabled comment"), [MLabel("Add a comment"), MWidth(128.)/*MCondensed()*/], [MEnabled(const(false))]), MDropDown(make(0), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(4)],
								//], [MMultiSelection(make(buildSet([0, 2]))), MPagination(make(3), ["2", "3", "4", "20"]), MFullWidth(),
								], [
									MListSelection(const(true), false, false, make([2])),
									MPagination(make(2), [2, 3, 4, 20]),
									MSortingDefault(make(MSortingParam(-1, true))),
									MPaginationAutoScaling(),
									MMinTableHeigth(262.0),
									MInCard(),
									MWidthByContent()
								])
							|> (\f -> MBorder(16.0, 32.0, 16.0, 32.0, f))
							|> (\f -> MExplicitTheme(f, fnot(manager.white), [])),

							MList(
								[
									MTripleLine("Abbey Christensen", generate(0, 20, \i -> "text" + i2s(i) + if (i == 5 || i == 10 || i == 15) "\n" else " ") |> concatStrings, [MPrimaryAction(MAvatar("http://api.adorable.io/avatars/40/rott@adorable.io.png", [])),
										MSecondaryAction(MIcon("chat_bubble", [])),
										MRightLeaveBehind(MBorder(16., 0., 16., 0., MIcon("send", [])), \ -> println("send"), [MGapSize(120., true),
											{pos = make(0.); subscribe2(pos, println); MLeaveBehindPosition(pos);}]),
										MLeftLeaveBehind(MBorder(16., 0., 16., 0., MIcon("delete", [])), \ -> println("delete"), [MGapSize(120., false)])]),
									MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", [])), MSecondaryAction(MIcon("today", [])), MEnabled(const(false)),
										MRightLeaveBehind(MBorder(16., 0., 16., 0., MIcon("send", [])), \ -> println("send"), []),
										MLeftLeaveBehind(MBorder(16., 0., 16., 0., MIcon("delete", [])), \ -> println("delete"), [])]),
									MSingleLine("Mary Johnson", [MPrimaryAction(MIcon("sms_failed", [])), MSecondaryAction(MIcon("chat_bubble", [])),
										MRightLeaveBehind(MBorder(16., 0., 16., 0., MIcon("send", [])), \ -> println("send"), [MGapSize(20., false)])]),
									MSingleLine("Peter Carlsson", [MPrimaryAction(MIcon("favorite", [])), MSecondaryAction(MIcon("chat_bubble", [])),
										MLeftLeaveBehind(MBorder(16., 0., 16., 0., MIcon("delete", [])), \ -> println("delete"), [MGapSize(20., true)])]),
								], [MAddSeparators()], [MListSelection(const(true), false, true, make([])), MOnListClick(const(true), println)])
							|> (\f -> MBorder(-8., 0., -8., 8., f)),
							MSelect(time, \t -> MText("hour: " + toString(t.hour) + ", minute: " + toString(t.min), [])),
							MFlexibleGrid(const([
								MTextButton("DISABLED", nop, [MButtonRaised()], [MEnabled(const(false))])
								|> (\f -> MBorder4(4., f)),
								MTextButton("TIME", \ -> {
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(time), MDialogDraggable(TFixed(0., 0.), TFillXH(100.))],
										MTimePicker(time, [
											MTimeAMPM(true),
											MTimeMin(Time(0, 0, 0, 9, 30, 20)),
											MTimeMax(Time(0, 0, 0, 20, 40, 40)),
											MTimeSeconds(true),
											//MEnabled(const(false)),
											MDialogButtons([
												MButtonOk("", nop),
												MButtonCancel("esc", \ -> next(close, true))
											])
										])
									)
								}, [], [MShortcut("t"), MOnRightClick(\ -> println("right")), MOnMiddleClick(\ -> println("middle"))])
								|> (\f -> MBorder4(4., f)),
								MTextButton("VIDEO", \ -> {
									picM = make(TEmpty());
									getFrameFn = ref \ -> "";

									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToClose(), MDialogUseFrame(), MDialogScroll()],
										MLinesA([
											MConstruct(
												[
													\ -> fconnect(fdivide(position, vlength), posSlider),
													\ -> fconnect(fmultiply(posSlider, vlength), position),
													makeSubscribe(position, \p -> {
														subt =
															if (p < 20. && p > 0.)
																d2s(p) + " Subtitle"
															else
																"";

														nextDistinct(
															subtitles,
															VideoSubtitle(
																subt,
																concat(
																	MTextStyle2CharacterStyle(manager.focus, [MSubheading(), MWhite()]),
																	[BackgroundFill(MColor2int(MBackgroundColor(false))), BackgroundFillOpacity(1.)]
																)
															)
														);
													})
												],
												MLinesA([
													MAudioPlayer(
														"images/material_test/big_buck_bunny.mp4",
														[
															StreamStatus(\s -> println("First Audio Player Stream Status: " + s)),
															FVideoLoop(looping),
															FVideoControls([PauseResume(), VolumeControl(), FullScreenPlayer(), Scrubber(), PlayerControlsAlwaysVisible(), PlaybackRateControl()]),
															FVideoTimeRange(fif(timeRange, const(2.), const(0.)), fif(timeRange, const(4.), const(0.))),
															MWidth(280.),
															MEnabled(const(false))
														]
													),
													MFixedY(8.),
													MAudioPlayer(
														"images/material_test/big_buck_bunny.mp4",
														[
															StreamStatus(\s -> println("Second Audio Player Stream Status: " + s)),
															FVideoLoop(looping),
															FVideoControls([PauseResume(), VolumeControl(), FullScreenPlayer(), Scrubber(), PlayerControlsAlwaysVisible(), PlaybackRateControl()]),
															FVideoTimeRange(fif(timeRange, const(2.), const(0.)), fif(timeRange, const(4.), const(0.))),
															MOrange(200)
														]
													)
													|> (\f -> MAvailable(f, TFillWY(640.))),
													MFixedY(8.),
													MVideoPlayer(
														"images/material_test/big_buck_bunny.mp4",
														videoSize,
														[
															StreamStatus(\s -> println("Video Player Stream Status: " + s)),
															FVideoLoop(looping),
															FVideoPosition(position),
															FVideoControls([PauseResume(), VolumeControl(), FullScreenPlayer(), Scrubber(), PlayerControlsAlwaysVisible(), PlaybackRateControl()]),
															FVideoTimeRange(fif(timeRange, const(2.), const(0.)), fif(timeRange, const(4.), const(0.))),
															FVideoKeepAspectRatio(keepAspectRatio),
															FVideoSubtitles(subtitles),
															FVideoGetCurrentFrame(getFrameFn),
															MRed(500)
														]
													),
													MLines2(
														MTextButton("GET FRAME", \ -> next(picM, MPicture(^getFrameFn(), [])), [MButtonRaised()], []),
														MMutable(picM)
													),
													MVideoPlayer(
														"https://www.youtube.com/watch?v=Q8TXgCzxEnw",
														videoSize,
														[]
													),
													MVideoPlayer(
														"https://vimeo.com/222990241",
														videoSize,
														[]
													)
												])
											),
											MColsA([
												MSwitchControl(timeRange, [MOnOffText("Time Range", "")]),
												MSwitchControl(keepAspectRatio, [MOnOffText("Keep Aspect Ratio", "")])
											])
										])
									)
								}, [MButtonRaised(), MPurple(500)], [MShortcut("v")])
								|> (\f -> MBorder4(4., f)),
								MTextButton("DATE", \ -> {
									date = make(stamp2date(timestamp()));
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(date), MDialogDraggable(TFixed(0., 0.), TFillXH(96.))],
										MDatePicker(date, [
											MDialogButtons([
												MButtonOk("", nop),
												MButtonCancel("esc", \ -> next(close, true))
											]),
											//MEnabled(const(false)),
											MDateMin(addYearsToDate(stamp2date(timestamp()), -10)),
											MDateMax(addYearsToDate(stamp2date(timestamp()), 5))
										])
									)
								}, [MButtonRaised()], [MShortcut("d")])
								|> (\f -> MBorder4(4., f)),
								MTextButton("FILEBROWSER", \ -> showCustomMFileBrowser(manager, "Material Filebrowser", [], [CancelExtFBB(nop)], []), [MButtonRaised(), MOrange(500)], [MShortcut("f")])
								|> (\f -> MBorder4(4., f)),
								MTextButton("SNAPSHOT & SERIALIZATION", \ -> {
									date = make(stamp2date(timestamp()));
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToClose(), MDialogScroll()], {
										deserializeSnapshot(serializeSnapshot(manager.grabSnapshot()));
									})
								}, [MButtonRaised()], [MShortcut("s")])
								|> (\f -> MBorder4(4., f)),
								{
									pickerColor = make(MAmber(500));
									MSelect(pickerColor, \c -> MTextButton("COLOR", \ -> {
										close = make(false);
										ShowMDialog(manager, close, [MDialogClickOutToCancel(pickerColor), /*MDialogDraggable(TFixed(0., 0.), TFillXH(96.))*/],
											MColorPicker(pickerColor, [
												MaterialColorPicker(),
												//MEnabled(const(false)),
												MDialogButtons([
													MButtonOk("", nop),
													MButtonCancel("esc", \ -> next(close, true))
												]),
												MOpacityPicker(make(1.0))
											])
										)
									}, [MButtonRaised(), c], [MShortcut("c")]))
									|> (\f -> MBorder4(4., f))
								},
								MTextButton("ERASE", \ -> {
									close = make(false);
									ShowMDialog(manager, close,
										[
											MDialogClickOutToClose(),
											MDialogTitle("Are you sure?"),
											MDialogUseFrame(),
											MDialogActions([
												// MDropDown(make(-1), "Pick", ["One", "Two", "Three"], []),
												MTextButton("CANCEL", \ -> {
													println("CANCEL");
													next(close, true);
												}, [], [MShortcut("esc")]),
												MTextButton("ERASE", \ -> {
													println("ERASE");
													next(close, true);
												}, [MRed(500)], [MShortcut("enter")]),
											]),
											MDialogDraggable(TFixed(0., 0.), TFillXH(52.))
										],
										MText("You'll lose all photos and media!", [MListBody()])
									)
								}, [MRed(500), MButtonRaised()], [IScriptId("MEraseButton"), MShortcut("e")])
								|> (\f -> MBorder4(4., f)),
								MTextClickable("MTextClickable", nop, [MBackgroundStyle([Fill(black)])], [])
								|> (\f -> MBorder4(4., f)),
								MTextClickable(
									"3",
									nop,
									[],
									[
										MHighlightOnHover(const(false)),
										MRippleType(const(MRippleCenter())),
										MRippleWidthHeight(const(WidthHeight(36., 36.))),
										MRippleRoundedCorners(false)
									]
								)
								|> (\f -> MBorder4(4., f)),
								MSelect(iconName, \ic -> MIconButton(ic, \ -> showMIconDialog(manager, iconName), [], [MShortcut("i")]))
								|> (\f -> MBorder4(4., f)),
							]), [MKeepOrder(), MAnimationEnabled(true)]),
							TFixed(0.0, 24.0),
							MTimePeriodPicker(manager, make(WeeklyPeriod(2, 5, 3)), []),
							TFixed(0.0, 24.0),
							MCarousel(carContent, make(0), [])
							|> (\f -> MAvailable(f, TFixed(640., 0.)))
							|> MCenterX,
							TFixed(0.0, 24.0),
							// {
							// 	pos = make(zeroPoint);

							// 	TConstruct(
							// 		[
							// 			\ -> subscribe(pos, println)
							// 		],
							// 		TCurrentPosition(pos, TRectangle([Fill(green)], TFixed(100., 100.)))
							// 	)
							// },

							MChart(
								MChartData(["Day", "Guardians of the Galaxy", "The Avengers", "Transformers: Age of Extinction"],
									generate(1, 15, \i -> i2s(i)),
									[
										[1.0,  37.8, 80.8, 41.8],
										[2.0,  30.9, 69.5, 32.4],
										[3.0,  25.4, 57.0, 25.7],
										[4.0,  11.7, 18.8, 10.5],
										[5.0,  11.9, 17.6, 10.4],
										[6.0,   8.8, 13.6,  7.7],
										[7.0,   7.6, 12.3,  9.6],
										[8.0,  12.3, 29.2, 10.6],
										[9.0,  16.9, 42.9, 14.8],
										[10.0, 12.8, 30.9, 11.6],
										[11.0,  5.3,  7.9,  4.7],
										[12.0,  6.6,  8.4,  5.2],
										[13.0,  4.8,  6.3,  3.6],
										[14.0,  4.2,  6.2,  3.4]
									 ]
									 |> (\f -> map(f, \r -> map(r, \v -> v)))), [
											MChartCurve(),
											MChartTitle("Box Office Earnings in First Two Weeks of Opening"),
											MChartSubtitle("in millions of dollars (USD)"),
											WidthHeight(-1., 600.),
											MChartType([MBarChart(), MLineChart(), MBarChart()]),
											MBarWidth(10., 4.),
											MOnChartClick([println, println, nop1]),
											// MChartScale(2.)
										]),
							TFixed(0.0, 8.0),
								[MCard([
									MRichMediaBlock(TEmpty(), [
										MBackgroundImage("http://frugalfrolicker.com/wp-content/uploads/2015/07/Kangaroo-Valley-10.jpg", false),
										MCardHeight(150.0)
									]),
									MPrimaryTextBlock("Kangaroo Valley Safari", "Located two hours south of Sydney in the Southern Highlands of New South Wales", []),
									MActionBlock([
										MTextButton("SHARE", nop, [getAccentColor(manager)], [MOnClickAsync(\fn -> { println("click"); timer(5000, fn); })]),
										MTextButton("EXPLORE", nop, [getAccentColor(manager)], [])
									], [], []),
									MSeparatorBlock(),
									MExpanderBlock(
										MColsA([MText("VIEW COMMENTS", [MButtonStyle()]), TFillX()]),
										\ ->
											MList(
												[
													MTripleLine("Sandra Adams", "Wow! This looks amazing. I'm so excited to make this at home.", [MPrimaryAction(MAvatar("https://upload.wikimedia.org/wikipedia/en/8/8b/Anni_Albers.jpg", []))]),
													MTripleLine("David Park", "Then we'll go with that data file! Hey, you add a one and two zeros to that or we walk!", [MPrimaryAction(MAvatar("http://www.nobelprize.org/nobel_prizes/physics/laureates/1933/dirac_postcard.jpg", []))])
												],
												[],
												[]
											),
										make(false), [MNoDispose()]
									)
								],
								[
									MCardWidth(340.0)
								], []),
								MCard([
									MCard([
										MCard([
											MPrimaryTextBlock("Rate this album", "Jam City", []),
											MSupportingTextBlock("Dream A Garden", []),
											MSeparatorBlock(),
											MActionBlock([
												MIconButton("thumb_up", nop, [], []),
												MIconButton("thumb_down", nop, [], []),
											], [], [])
										], [MCardWidth(240.0)], []),
										MRichMediaBlock(TEmpty(), [
											MBackgroundImage("http://cdn3.pitchfork.com/albums/21562/homepage_large.154a1f4f.jpg", false),
											MCardWidth(100.0),
											MMoreMenu([MMenuSingleLine("About", [])], [MOnListClick(const(true), println)])
										]),
									], [], [])
								],
								[
									MCardWidth(340.0),
								], []),
								MTextCard(
									"Kangaroo Valley Safari",
									"Located two hours south of Sydney in the Southern Highlands of New South Wales",
									[
										getPrimaryColor(manager),
										MCardWidth(340.0)
									], [
										MOnClick(\ -> println("click")),
										MOnDoubleClick(\ -> println("double click")),
										MOnTripleClick(\ -> println("triple click"))
									]),
								MCard([
									MPrimaryTextBlock("Unlimited music now", "You can listen to radio with no limits on Google Play Music.", []),
									MActionBlock([
										MTextButton("LISTEN NOW", nop, [], []),
									], [], [])
								],
								[
									MMoreMenu([
										MMenuSingleLine("Settings", [MPrimaryAction(MIcon("settings", []))],),
										MMenuSingleLine("Never show this message",
											{
												dynIcon = make(TEmpty());
												[
													MPrimaryAction(MMutable(dynIcon)),
													MOnClick(\ ->  next(dynIcon, if (getValue(dynIcon) == TEmpty()) MIcon("check", []) else TEmpty()))
												]
											}),
										MSeparatorLine(),
										MSubMenu("Sub Menu", [
											MMenuSingleLine("Undo", [MEnabled(const(false)), MPrimaryAction(MIcon("undo", [])), MAdditionalText("Ctrl+Z")]),
											MMenuSingleLine("Redo", [MPrimaryAction(MIcon("redo", [])), MAdditionalText("Ctrl+Y")],),
											MSeparatorLine(),
											MSubMenu("Another Sub Menu", [
												MMenuSingleLine("Undo", [],),
												MMenuSingleLine("Redo", [],)
											], [MOnListClick(const(false), println), MEnabled(const(true))])
										], [MOnListClick(const(true), println)]),
										MMenuSingleLine("Exit", [MAdditionalText("Alt+F4")])
									], [MOnListClick(const(true), println), MMaxHeight(100.)]),
									MBlueGrey(700),
									MCardWidth(340.0)
								], []),
								MCard([
									MPrimaryTextBlock("Pre-fab homes", "", [
										MBackgroundImage("http://www.img.lirent.net/2014/10/Android-Lollipop-wallpapers-d.jpg", false),
										MCardHeight(200.0),
										MCardAlignBottom()
									]),
									MActionBlock([], [
										MIconButton("favorite", nop, [], []),
										MIconButton("bookmark", nop, [], []),
										MIconButton("share", nop, [], [])
									], [])
								],
								[
									MCardWidth(340.0)
								], []),
								MCard([
									MRichMediaBlock(TEmpty(), [
										MCardHeight(170.0)
									]),
									MPrimaryTextBlock("Unlimited music now", "You can listen to radio with no limits on Google Play Music.", []),
									MSeparatorBlock(),
									MActionBlock([
										MTextButton("SHARE", nop, [], []),
										MTextButton("EXPLORE", nop, [], [])
									], [
										MIconButton("favorite", nop, [MBlue(0)], []),
										MIconButton("bookmark", nop, [MBlue(0)], []),
										MIconButton("share", nop, [MBlue(0)], [])
									], [])
								],
								[
									MBackgroundImage("http://orig11.deviantart.net/20eb/f/2015/030/6/f/_minflat__dark_material_design_wallpaper__4k__by_dakoder-d8fjqzu.jpg", false),
									MCardWidth(340.0)
								], [])]
							|> (\f -> MLines2A(MFlexibleGrid(const(f), [CenterAlign(), MAnimationEnabled(true)]), MReorderGrid(map(f, \ri -> MReorderItem(ri, [])), make([]), [CenterAlign()])))
							|> (\f -> MScaleAvailable(const(Factor(0.9, 1.)), f))
							|> MCenter,
							{
								Saramago = Person(
									"Jose Saramago",
									"Portuguese Writer",
									"http://www.nobelprize.org/nobel_prizes/literature/laureates/1998/saramago.jpg"
								);

								Pele = Person(
									"Pelé",
									"Brazilian Football Player",
									"http://palhansen.com/content/images/stories/pele-6533487.jpg"
								);

								Dirac = Person(
									"Paul Dirac",
									"English Physicist",
									"http://www.nobelprize.org/nobel_prizes/physics/laureates/1933/dirac_postcard.jpg"
								);

								ChuckClose = Person(
									"Chuck Close",
									"American Artist",
									"http://www.worldsciencefestival.com/wp-content/uploads/2010/10/painting_blind.jpg"
								);

								people = [Saramago, Pele, Dirac, ChuckClose];

								MGridList(
									map(people, \person -> {
										content = if (person.imageurl == "") MIcon("person", [MIconSize(36.0)]) else TPicture(person.imageurl, []);
										MGridListCell(content, if (person.subtitle != "") [person.name] else [person.name], [MGridListFooter()])
									})
									|> const,
									[MGridListCellAspectRatio(2.0/3.0), MGridListCellMinWidth(150.0), MNoScroll()]
								)
							},
							{

								kandinsky = Painting(
									"Circle on a Circle",
									"Vassily Kandinsky",
									"https://upload.wikimedia.org/wikipedia/commons/f/f0/Vassily_Kandinsky,_1923_-_Circles_in_a_Circle.jpg"
								);

								klee = Painting(
									"Miraculous Landing, or the 112!",
									"Paul Klee",
									"http://totallyhistory.com/wp-content/uploads/2011/07/Miraculous_Landing_or_the_-112-_by_Paul_Klee_1920.jpg"
								);

								albers = Painting(
									"Homage to the Square: Soft Spoken",
									"Josef Albers",
									"http://www.metmuseum.org/toah/images/h2/h2_1972.40.7.jpg"
								);

								duchamp = Painting(
									"Nude Descending a Staircase, No 2",
									"Marcel Duchamp",
									"https://derlandstreicher.files.wordpress.com/2014/11/200px-duchamp_-_nude_descending_a_staircase.jpg"
								);

								magritte = Painting(
									"The False Mirror",
									"René Magritte",
									"http://www.renemagritte.org/images/paintings/the-false-mirror.jpg"
								);

								matisse = Painting(
									"The Piano Lesson",
									"Henri Matisse",
									"http://www.henrimatisse.org/images/gallery/the-piano-lesson.jpg"
								);

								paintings = [kandinsky, klee, albers, duchamp, magritte, matisse];

								selected = make(-1);
								subscribe(selected, \idx -> {
									if (idx >= 0)
										println("Clicked on '" + paintings[idx].name + "'");
								});
								MGridList(
									mapi(paintings, \idx, painting -> {
										content = if (painting.imageurl == "") MIcon("person", [MIconSize(36.0)]) else TPicture(painting.imageurl, []);
										cellstyle = if (idx == 0) [MGridListHeader(), MIconButton("star", nop, [MIconSize(24.0), MWhite()], []), MGridListIconLeft()] else [MGridListHeader()];
										MGridListCell(content, if (painting.artist != "") [painting.name, painting.artist] else [painting.name], cellstyle);
									})
									|> const,
									[MGridListCellAspectRatio(1.0), MGridListCellMinWidth(200.0), MNoScroll(), MSingleSelection(selected)]
								)
							},
							TFixed(0.0, 8.0),
							MScale(const(Factor(0.5, 0.3)), MImageMap(TPicture("http://www.henrimatisse.org/images/gallery/the-piano-lesson.jpg", []),
								[
									MArea([Point(55.0, 426.0), Point(54.0, 2.0), Point(115.0, 3.0), Point(198.0, 425.0)]),

								],
								imageMapIndex,
								[]
							)),
							TFixed(0.0, 8.0),
						])),
						MGroup2(
								TRectangle([MFill(MBlue(50))], TFillXH(400.0)),
								MMovable(
									MTextCard(
										"Move me!",
										"You can dragg me inside the area",
										[
											getPrimaryColor(manager),
											MCardWidth(264.0)
										],
										[MOnClick(\ -> println("dragging"))]
									),
									TFillXH(400.0),
									[]
								),
							),
						{
							mouseDown = make(false);
							mousePosition = make(zeroPoint);

							cameraX = make(0.0);
							cameraY = make(0.0);
							cameraZ = make(1000.0);

							sceneRotationX = make(0.);
							sceneRotationY = make(0.);
							sceneRotationZ = make(0.);

							updateLookAt = make(false);

							camera =
								F3DPerspectiveCamera(const(50.0), const(1.0), const(0.01), const(6000.0))
								|> (\c -> F3DLookAt(c, const(0.0), const(0.0), const(0.0), updateLookAt))
								|> (\c -> F3DPosition(c, cameraX, cameraY, cameraZ));

							light =
								F3DPointLight(const(white), const(1.0), const(0.0), const(1.0))
								|> (\c -> F3DPosition(c, cameraX, cameraY, cameraZ));


							scene =
								F3DScene(
									const([
										light,
										F3DScene(
											const([
												F3DLoader("images/material_test/mixer.obj", "images/material_test/mixer.obj.mtl"),
												F3DLoader("images/material_test/room.obj", "images/material_test/room.obj.mtl"),
												// F3DLoader("images/material_test/table.obj", "images/material_test/table.obj.mtl"),
												// F3DLoader("images/material_test/ph_can.obj", "images/material_test/ph_can.obj.mtl"),
												// F3DLoader("images/material_test/hands.obj", "images/material_test/hands.obj.mtl"),
												// F3DLoader("images/material_test/digital_weight.obj", "images/material_test/digital_weight.obj.mtl")
											])
										)
										|> (\s -> F3DRotation(s, sceneRotationX, sceneRotationY, sceneRotationZ))
									])
								);

							T3DStage(
								const(WidthHeight(1000.0, 1000.0)),
								scene,
								camera,
								[]
							)
							|> (\f -> TFrame(0.0, 4.0, [MStroke(getPrimaryColor(manager)), StrokeWidth(2.0)], f))
							|> (\f -> TBorder4(4.0, f))
							|> (\f ->
								TMouseWheelInteractive(
									manager.manager,
									TFrame(0., 0., interactiveRectangleStyle, f),
									\dx -> false,
									\dy -> {
										next(cameraZ, min(max(getValue(cameraZ) - dy * 100., 0.0), 3000.0));

										reverseBehaviour(updateLookAt);

										true;
									}
								)
							)
							|> (\f ->
								TInteractive(
									[
										MouseMiddleDown(\mi -> {
											if (mi.inside()) {
												next(mouseDown, true);
												next(mousePosition, Point(mi.x, mi.y));

												true;
											} else {
												false;
											}
										}),
										MouseMiddleUp(\m -> {
											nextDistinct(mouseDown, false);

											false;
										}),
										MouseMove(\m -> {
											mi = m();

											if (getValue(mouseDown) && mi.inside) {
												mdx = (mi.x - getValue(mousePosition).x) / 10.0;
												mdy = (mi.y - getValue(mousePosition).y) / 10.0;

												next(mousePosition, Point(mi.x, mi.y));

												nextDistinct(sceneRotationX, getValue(sceneRotationX) + mdy);
												nextDistinct(sceneRotationY, getValue(sceneRotationY) + mdx);

												reverseBehaviour(updateLookAt);

												true;
											} else {
												false;
											}
										})
									],
									f
								)
							)
						},
						MText("MDynamicList with 400000 lines", [MHeadline()])
						|> (\f -> MBorder(8., 32., 8., 32., f))
						|> MCenterX,
						MDynamicList(
							(\i -> [
								MSingleLine("Abbey Christensen " + i2s(i * 4 + 0), [MPrimaryAction(MTooltip(MIconButton("send", \ -> println("send"), [], []), MText("Send", []), [])),
									MSecondaryAction(MIcon("chat_bubble", []))]),
								MSingleLine("Alex Nelson " + i2s(i * 4 + 1), [MPrimaryAction(MIcon("today", [])), MSecondaryAction(MIcon("today", [])), MEnabled(const(false))]),
								MSingleLine("Mary Johnson " + i2s(i * 4 + 2), [MPrimaryAction(MIcon("sms_failed", [])), MSecondaryAction(MIcon("chat_bubble", []))]),
								MSingleLine("Peter Carlsson " + i2s(i * 4 + 3), [MPrimaryAction(MIcon("favorite", [])), MSecondaryAction(MIcon("chat_bubble", []))]),
							])
							|> (\f2 -> concatA(generate(0, 100000, \i -> f2(i)))) |> const,
							[MAddSeparators()],
							[MListReorder(make([]), const(true)), MListSelection(const(true), false, true, make([])), MOnListClick(const(true), println)]
						)
						|> (\f -> MBorder(-8., 0., -8., 8., f))
						|> (\f -> MAvailable(f, TFillXH(600.)))
						|> (\f -> MScaleAvailable(const(Factor(0.6, 0.)), f))
						|> MCenterX,
						TRectangle([Fill(black), FillOpacity(0.5)], TFillXH(56.0))
					])
				),
				MFloatingContent(
					MFloatingButton("add", [
							MFabSpeedDial("Select Action",
								[
									MFabIconButton("content_copy", "Copy", \ -> println("content_copy"), [MGreen(500)]),
									MFabIconButton("content_cut", "Cut", \ -> println("content_cut"), [MBlue(500)]),
									MFabIconButton("content_paste", "Paste", \ -> println("content_paste"), [MOrange(500)]),
									MFabAvatar("http://www.bauhaus-movement.com/designer/assets/images/designer/Designer-Wassily-Kandinsky.jpg", "Send to Wassily", \ -> println("send_to_wassily")),
									MFabLetterIcon("T", "Send to Tanya", \ -> println("send_to_tanya"), [], MRed(500))
								],
								[]
							),
							FillOpacity(1.0),
							MRight(),
							MBottom(),
							inspectScroll
						],
						[MOnClick(\ -> println("Main Action"))]
					)
				)
			],
			[MNoContentBorder(), inspectScroll, MAppStructureFlexible([])],
		)
		|> (\f -> MConstruct([\ -> MAddShortcutDialog(manager)], f))
	);

	if (getUrlParameter("profile") >= "1") {
		us();
		println(d2s((timestamp() - starttime) / 1000.0) + ", s");
		quit(0);
	}
}