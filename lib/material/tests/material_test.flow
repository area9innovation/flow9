import material/internal/material_icons;
import material/material_timeperiodpicker;
import tropic/trender;
import ds/set;
import ui/videoplayer;
import material/extra/icon_picker/material_icon_picker;
import material/extra/filebrowser/material_filebrowser;
import material/extra/filesystem/localfilesystem_extended_api;
import material/material_snackbar;
import net/appurl;
import sys/platformevent;

Person(name: string, subtitle: string, imageurl : string);
Painting(name : string, artist : string, imageurl : string);

main() {
	if (getUrlParameter("renderer") == "") {
		setRendererType("html");
	}
	setWindowTitle("Material Test");
	setLocalFilesystemExtAPI();

	imageMapIndex = make(-1);
	starttime = timestamp();
	selectedItems = make([0]);
	showFab = make(true);
	manager = makeMaterialManager([makeAccessibleMaterialTheme(true, MCustomColor(0x6200EE), MCustomColor(0x03DAC6))]);
	setAppUrl("/material");
	time = make(stamp2time(timestamp()));
	progress = make(false);
	inspectScroll = makeTScrollInspectVisible();

	playing = make(false);
	looping = make(false);
	vfullscreen = make(false);
	keepAspectRatio = make(true);
	cover = make(true);
	position = make(0.);
	vlength = make(1.);
	volume = make(0.);
	posSlider = make(0.);
	timeRange = make(false);
	videoSize = make(WidthHeight(640., 360.));
	subtitles = make(VideoSubtitle("", []));

	addPlatformEventListener(ApplicationSuspended(), \ -> println("Application suspended"));
	addPlatformEventListener(ApplicationUserIdle(), \ -> println("User idle"));
	addPlatformEventListener(ApplicationUserActive(), \ -> println("User active"));
	addPlatformEventListener(ApplicationResumed(), \ -> println("Application resumed"));

	grapes = "#include material/tests/material_test_grapes.txt";

	carContent = [
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/denise-nouvion-wallpapers-4-1280x800.jpg", []), [MCarouselText("Denise Nouvion", "Cloudy Mountain"), MOnClick(\ -> println("mountains click"))]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/adrian-zorzano-wallpaper-1280x800.jpg", []), [MCarouselText("Adrian Zorzano", "")]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/michael-olivo-wallpaper-1280x800.jpg", []), [MCarouselText("Michael Olivo", "The Transition Period")]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/Mike-Dornseif-wallpaper-1280x800.jpg", []), [MCarouselText("Mike Dornseif", "Abstract Nod To The Past")]),
		MCarouselContent(TPicture("http://thefoxisblack.com/desktop-wallpaper/adrian-zorzano-wallpaper-1280x800.jpg", []), [MCarouselText("Adrian Zorzano", "")]),
	];
	datatableMenu = \i : int ->
		MMenu(
		MIconButton("more_vert", nop, [], []),
		[
			MMenuSingleLine("First", [MPrimaryAction(MIcon("settings", []))],),
			MMenuSingleLine("Second", [MPrimaryAction(MIcon("settings", []))],),
			MMenuSingleLine("Third", [MPrimaryAction(MIcon("settings", []))],),
		], [MOnListClick(const(true), \__ -> println(i)), MSingleSelection(make(min(i - 1, 2))), MCondensed(false)]);
	// MMenu(
	// 	MIconButton("more_vert", [], []),
	// 	[
	// 		MMenuSingleLine("Settings", [MPrimaryAction(MIcon("settings", []))],),
	// 		MMenuSingleLine("Never show this message",
	// 			{
	// 				dynIcon = make(TEmptyIcon());
	// 				[
	// 					MPrimaryAction(MDynamicIcon(dynIcon)),
	// 					MOnClick(\ ->  next(dynIcon, if (getValue(dynIcon) == TEmptyIcon()) MIcon("check", []) else TEmptyIcon()))
	// 				]
	// 			}),
	// 		MSeparatorLine(),
	// 		MSubMenu("Sub Menu", [
	// 			MMenuSingleLine("Undo", [MEnabled(const(false)), MPrimaryAction(MIcon("undo", [])), MAdditionalText("Ctrl+Z")]),
	// 			MMenuSingleLine("Redo", [MPrimaryAction(MIcon("redo", [])), MAdditionalText("Ctrl+Y")],),
	// 			MSeparatorLine(),
	// 			MSubMenu("Another Sub Menu", [
	// 				MMenuSingleLine("Undo", [],),
	// 				MMenuSingleLine("Redo", [],)
	// 			], [MOnListClick(const(false), println), MEnabled(const(true))])
	// 		], [MOnListClick(const(true), \__ -> println(i))]),
	// 		MMenuSingleLine("Exit", [MAdditionalText("Alt+F4")])
	// 	], [MOnListClick(const(true), \__ -> println(i))]);

	lightBackground = make(fgetValue(manager.white));
	isArabicState = make(false);
	sliderValue = make(50.);
	sliderEnabled = make(true);
	search = make("");
	iconName = make("home");
	leftexpander1 = make(true);
	leftexpander2 = make(false);
	rightExpander = make(false);
	menuselected = make(false);
	subscribe2(menuselected, \m -> next(rightExpander, false));
	subSideNav = make(TEmpty());
	sidenavWidth = 320.0;
	primaryColor = make(MThemeColor2MColor(manager, MPrimaryColor()));
	accentColor = make(MThemeColor2MColor(manager, MAccentColor()));
	openText = make("");
	htmlFn = make(None());

	us = mrender(manager, true,
		MAppStructure([
				MAppBar(MToolbar(
					leftexpander2,
					MCenterY(MText("Try to stretch", [MTitle()])),
					[
						MTextInput(search, [TextInputType(NumericType()), MaxChars(3), AutoAlign(AutoAlignCenter()), MFilterAction(println), MWidth(200.), MLabel("Search?")], []),
						MIconButton("search", \ -> println("Searching " + getValue(search)), [], [])
						|> (\f -> MCenterY(f)),
						MIconButton("more_horiz", \ -> next(rightExpander, !getValue(rightExpander)), [], [])
						|> (\f -> MCenterY(f)),
					],
					[]
				)),

				MLeftNav(MSideNav(
					// You can use MSNSmallHead xor MSNCardHead xor MSNCustomHead , as you wish. For examples look at material_sidebar
					MSNCardHead(
						"http://build.area9innovation.com/material/head_background.jpg",
						MSNHeadPhoto(const("http://api.adorable.io/avatars/72/eott@adorable.io.png"), nop),
					 	[
					 		MSNHeadPhoto(const("http://api.adorable.io/avatars/72/rott@adorable.io.png"), nop),
					 		MSNHeadPhoto(const("http://api.adorable.io/avatars/72/tott@adorable.io.png"), nop),
					 	],
						const("Jonathan Lee"),
						const("heyfromjonathan@gmail.com")
					),
/*					MNavigation([ //To check it you have to comment MList and MSubList sections
						MNavigationMenu("1Hello", [
							MNavigationSubmenu("1hello", \ -> println("submenu selected")),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
						]),
						MNavigationMenu("2World", [
							MNavigationAction(\ -> println("menu selected"))
						]),
						MNavigationMenu("3Hello", [
							MNavigationSubmenu("3hello", nop),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
							MNavigationSubmenu("hello", nop),
							MNavigationSubmenu("world", nop),
						]),
						MNavigationMenu("4World", [
							MNavigationSubmenu("4hellO", nop),
							MNavigationSubmenu("worlD", nop),
							MNavigationSubmenu("hellO", nop),
							MNavigationSubmenu("worlD", nop),
						])
					], [MNavigationOnSelect(menuselected)]),
*/					MList( // MList section
						[
							MSingleLine("Abbey Christensen", [MPrimaryAction(MIcon("check_box", []))]),
							MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", []))]),
							MSingleLine("Mary Johnson", [MPrimaryAction(MIcon("sms_failed", []))]),
							MSingleLine("Peter Carlsson", [MPrimaryAction(MIcon("favorite", []))]),
						],
						[],
						[
							MListSelection(const(true), false, false, selectedItems),
						]
					),
					leftexpander2,
					[
						MSubList( // MSubList section
							MSelect(selectedItems, \s -> MList(
								if (s == [0])
									[
										MSingleLine("SubMenu1", [MPrimaryAction(MIcon("check_box", []))]),
										MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", []))]),
									]
								else if (s == [1]) []
								else if (s == [2])
									[
										MSingleLine("SubMenu3", [MPrimaryAction(MIcon("check_box", []))]),
										MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", []))]),
									]
								else [], [], []))),
					]
				), leftexpander2, [MSideNavMini()]),
				MRightNav(
					MAvailable(
						MGroup([
							MInteractive([TMouseDown(make(false))], TRectangle([Fill(green), FillOpacity(0.5)], TFillWY(150.0))),
							MNavigation([
								MNavigationMenu("Hello", [
									MNavigationSubmenu("hello", \ -> println("submenu selected")),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
								]),
								MNavigationMenu("World", [
									MNavigationAction(\ -> println("menu selected"))
								]),
								MNavigationMenu("Hello", [
									MNavigationSubmenu("hello", nop),
									MNavigationMenu("Hello", [
										MNavigationSubmenu("hello", nop),
										MNavigationSubmenu("world", nop),
										MNavigationSubmenu("hello", nop),
										MNavigationSubmenu("world", nop),
										MNavigationSubmenu("hello", nop),
										MNavigationSubmenu("world", nop),
									]),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
									MNavigationSubmenu("hello", nop),
									MNavigationSubmenu("world", nop),
								]),
								MNavigationMenu("World", [
									MNavigationSubmenu("hellO", nop),
									MNavigationSubmenu("worlD", nop),
									MNavigationSubmenu("hellO", nop),
									MNavigationSubmenu("worlD", nop),
								])
							], [MNavigationOnSelect(menuselected), MInCard()]),
						]),
						TFillWY(150.0)
					),
					rightExpander,
					[MSideNavWidth(150.0), MSideNavPersistent(const(true))]
				),

				MContent(
					MLinesA([
						MToolbar(
							leftexpander1,
							MCenterY(MText("Secondary toolbar", [])),
							[
								MIconButton("settings", \ -> println("click!"), [], [])
								|> (\f -> MCenterY(f)),
								MIconButton("refresh", \ -> println("click!"), [], [MEnabled(const(false))])
								|> (\f -> MCenterY(f)),
							],
							[
								MBackgroundStyle([MFill(MBlue(700))]),
								MItemsColor(MWhite()),
								MCustomExpander(MIconToggle("face", [MToggleFalseIcon("extension", [])], []))
							]
						),
						MMenuPanel([
							MMenu(
								MTextButton("File", nop, [], []),
								[
									MSubMenu("New",
										[
											MMenuSingleLine("Document", [MPrimaryAction(MIcon("assignment", [MBlue(500)]))]),
											MMenuSingleLine("Spreadsheet", [MPrimaryAction(MIcon("speaker_notes", [MGreen(500)]))]),
											MMenuSingleLine("Presentation", [MPrimaryAction(MIcon("settings_system_daydream", [MAmber(500)]))]),
										],
										[
											MOnListClick(const(true), \i -> println("File New " + i2s(i)))
										]),
									MMenuSingleLine("Open...", [
										MPrimaryAction(MIcon("folder_open", [])), MAdditionalText("Ctrl+O"), MOnClick(\ -> openFileDialog(1, ["*.*"], \ff -> next(openText, toString(ff))))]),
									MMenuSingleLine("Save", [MPrimaryAction(MIcon("save", [])), MAdditionalText("Ctrl+S")]),
									MMenuSingleLine("Save As...", [MAdditionalText("Ctrl+Shift+S")]),
									MSeparatorLine(),
									MMenuSingleLine("Page Setttings...", []),
									MMenuSingleLine("Print", [MPrimaryAction(MIcon("print", [])), MAdditionalText("Ctrl+P")]),
									MSeparatorLine(),
									MMenuSingleLine("Exit", [MPrimaryAction(MIcon("exit_to_app", [])), MAdditionalText("Ctrl+F4")]),
								], [MOnListClick(const(true), \i -> println("File " + i2s(i))), MMenuIndent(), MCondensed(true), MFixPosition(true)]),
							MMenu(
								MTextButton("Edit", nop, [], []),
								[
									MMenuSingleLine("Undo", [MPrimaryAction(MIcon("undo", [])), MAdditionalText("Ctrl+Z")]),
									MMenuSingleLine("Redo", [MEnabled(const(false)), MPrimaryAction(MIcon("redo", [])), MAdditionalText("Ctrl+Y")],),
									MSeparatorLine(),
									MMenuSingleLine("Cut", [MPrimaryAction(MIcon("content_cut", [])), MAdditionalText("Ctrl+X")]),
									MMenuSingleLine("Copy", [MPrimaryAction(MIcon("content_copy", [])), MAdditionalText("Ctrl+C")]),
									MMenuSingleLine("Paste", [MPrimaryAction(MIcon("content_paste", [])), MAdditionalText("Ctrl+V")]),
									MSeparatorLine(),
									MMenuSingleLine("Select All", [MAdditionalText("Ctrl+A")]),
								], [MOnListClick(const(true), \i -> println("Edit " + i2s(i))), MMenuIndent(), MCondensed(true), MEnabled(const(false))]),
							MMenu(
								MTextButton("Help", nop, [], []),
								[
									MMenuSingleLine("Documentation", [MPrimaryAction(MIcon("help", [])), MAdditionalText("F1")]),
									MSeparatorLine(),
									MMenuSingleLine("About", []),
								], [MOnListClick(const(true), \i -> println("Help " + i2s(i))), MMenuIndent(), MCondensed(true)]),
						], []),
						MBorder(8.0, 8.0, if (mobile) 8. else 24., 8.0, MLinesA([
							MDynamicParagraph(openText, []),
							MBaselineCols([
								MTextButton("PRIMARY COLOR", \ -> {
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(primaryColor)],
										MColorPicker(primaryColor, [
											MaterialColorPicker(),
											MDialogButtons([
												MButtonOk("", \ -> updateMaterialTheme(
													manager,
													makeMaterialTheme(getValue(manager.white), getValue(primaryColor), getValue(accentColor))
												)),
												MButtonCancel("esc", \ -> next(close, true))
											])
										])
									)
								}, [MButtonRaised(), MPrimaryColor()], [MShortcut("p")]),
								MTextButton("ACCENT COLOR", \ -> {
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(accentColor)],
										MColorPicker(accentColor, [
											MaterialColorPicker(),
											MDialogButtons([
												MButtonOk("", \ -> updateMaterialTheme(
													manager,
													makeMaterialTheme(getValue(manager.white), getValue(primaryColor), getValue(accentColor))
												)),
												MButtonCancel("esc", \ -> next(close, true))
											])
										])
									)
								}, [MButtonRaised(), MAccentColor()], [MShortcut("A")])
							]),
							MCursor(FingerCursor(), MParagraph("<b>Others</b> have failed, I will not.", [MDisplay2(), MWidth(400.), EscapeHTML(false)])),
							MParagraph("لوريم ايبسوم هو نموذج افتراضي يوضع في التصاميم لتعرض على العميل ليتصور طريقه وضع النصوص<b> بالتصاميم </b>سواء كانت تصاميم مطبوعه ... بروشور او فلاير على سبيل المثال ... او نماذج مواقع انترنت ... وعند موافقه العميل المبدئيه على التصميم يتم ازالة هذا النص من التصميم ويتم وضع النصوص النهائية المطلوبة للتصميم ويقول البعض ان وضع النصوص التجريبية بالتصميم قد تشغل المشاهد عن وضع الكثير من الملاحظات او الانتقادات للتصميم الاساسي. وخلافاَ للاعتقاد السائد فإن لوريم إيبسوم ليس نصاَ عشوائياً، بل إن له جذور في الأدب اللاتيني الكلاسيكي منذ العام 45 قبل الميلاد. من كتاب حول أقاصي الخير والشر", [EscapeHTML(false)]),
							MParagraph("Science, my boy, is made up of mistakes, but they are mistakes which it is useful to make, because they lead little by little to the truth.", [MSubheading(), MWidth(400.), EscapeHTML(false)]),
							MCursor(FingerCursor(), MParagraph("<b>Others</b> have failed, I will not.", [MDisplay2(), MWidth(400.)])),
							MParagraph("لوريم ايبسوم هو نموذج افتراضي يوضع في التصاميم لتعرض على العميل ليتصور طريقه وضع النصوص<b> بالتصاميم </b>سواء كانت تصاميم مطبوعه ... بروشور او فلاير على سبيل المثال ... او نماذج مواقع انترنت ... وعند موافقه العميل المبدئيه على التصميم يتم ازالة هذا النص من التصميم ويتم وضع النصوص النهائية المطلوبة للتصميم ويقول البعض ان وضع النصوص التجريبية بالتصميم قد تشغل المشاهد عن وضع الكثير من الملاحظات او الانتقادات للتصميم الاساسي. وخلافاَ للاعتقاد السائد فإن لوريم إيبسوم ليس نصاَ عشوائياً، بل إن له جذور في الأدب اللاتيني الكلاسيكي منذ العام 45 قبل الميلاد. من كتاب حول أقاصي الخير والشر", []),
							MParagraph("Science, my boy, is made up of mistakes, but they are mistakes which it is useful to make, because they lead little by little to the truth.", [MSubheading(), MWidth(400.)]),
							// |> (\f -> MAvailable(f, TFixed(640., 400.))),
							MSplitter(TRectangle([Fill(green)], TFillXY()), TRectangle([Fill(red)], TFillXY()), TFillXH(400.),
								[MSplitterSize(150., 170., 200., -1.)]),
							MColsA([TRectangle([Fill(yellow)], TFixed(150., 20.)), TRectangle([Fill(blue)], TFixed(8., 20.)),
								TRectangle([Fill(yellow)], TFixed(400., 20.)), ]),
							MColsA([
								MSwitchControl(make(false), [MOnOffText("ON", "OFF"), MFocusId(const(20))]),
								MSwitchControl(lightBackground, [MOnOffText("LIGHT", "DARK")]),
								MSwitchControl(isArabicState, [MOnOffText("Arabic", "English")])
							])
							|> (\f -> MComponentGroup(f, [MEnabled(sliderEnabled)]))
							|> (\f -> MConstruct([
									makeSubscribe2(lightBackground, \w -> {
										showSnackbar = make(true);
										nextDistinct(manager.white, w);

										if (w)
											showMSnackbar(manager, "Light Theme", [
												MTextButton("CLOSE", \ -> next(showSnackbar, false), [], []),
												MSnackbarVisible(showSnackbar)
											])
										else
											showMSnackbar(manager, "Dark Theme", [])
									}),
									makeSubscribe2(isArabicState, \isArabic ->
										if (isArabic) setLang("ar") else setLang("en")
									)
								], f)),

							MFloatingButton("send", [], [MOnClick(\ -> next(showFab, false)), MEnabled(showFab)]),

							TFixed(0.0, 20.0),

							MCheckBox(MText("Enable slider", [MBody()]), sliderEnabled, []),

							TFixed(0.0, 20.0),

							MColsA([
								MChip("Fanta", [MCloseButton(), MEnabled(const(false)), MOrange(500)]),
								MChip("Sprite", [MCloseButton(), MAvatar("http://popsop.com/wp-content/uploads/sprite_new_logo_small.jpg", []), MEnabled(const(false)),]),
								MChip("7-Up", [MCloseButton(), MLetterIcon("7", [MGreen(500)], [MWhite()])]),
								MChip("Coca-Cola", [MCloseButton(), MRed(500), MChipSelectable(const(true), make(false))]),
								MChip("Pepsi", [MCloseButton(), MChipSelectable(const(true), make(false)), MIndigo(500)]),
								MChip("Dr Pepper", [MChipSelectable(const(true), make(true)), MPurple(500)]),
							]),

							TFixed(0.0, 20.0),

							MSelect(sliderEnabled, \en -> {
								if (!en) TEmpty()
								else MProgressBar([WidthHeight(520.0, 5.0)])
							}),

							TFixed(0.0, 20.0),

							MProgressBarDeterm(fselect(sliderValue, FLift(\slv -> slv / 100.)), []),

							TFixed(0.0, 20.0),

							{
								btn = TFrame(0.0, 20.0, [MThemeFill(manager, MPrimaryColor())], TFixed(40.0, 40.0));
								MColsA([
									MProgressCircle([MAccentColor()],
										// clickable(manager, btn, \ -> next(progress, !getValue(progress)))
									),
									TFixed(8.0, 0.0),
									MProgressCircleDeterm(fselect(sliderValue, FLift(\slv -> slv / 100.)), [MAccentColor()],
										// clickable(manager, btn, nop)
									)
								])
							},

							TFixed(0.0, 24.0),
							MCarousel(carContent, make(0), [MCarouselEnableArrows(true), MLoopScroll(), MCarouselItemSpan(2),
								MCarouselMaximize(make(false), [MCarouselContentZoom(1., 5., 0.25)])])
							|> (\f -> MAvailable(f, TFillMin(640., 0.)))
							|> MCenterX,
							TFixed(0.0, 24.0),

							MColsA(
								MRadios(
									make(-1), [],
									map(enumFromTo(0, 4), \i -> MText(i2s(i), []))
								)
							)
							|> (\f -> MComponentGroup(f, [MEnabled(sliderEnabled)])),

							MExpander(
								MBaselineCols2(
									MSlider(sliderValue, [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderRange(5., 95.), MSliderDiscrete(true), MSliderStep(10.), MSliderUndefined(make(true)), MKeysEnabled(const(false))]),
									MText("\tMSlider", [])
								),
								\ ->
									MPrintPages([
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderUndefined(make(true))]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderRange(5., 95.), MSliderDiscrete(true), MSliderStep(10.)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true)]),
										MSlider(make(95.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderUndefined(make(true)), MSliderChooseRange(make(0.0), make(95.0)), MSliderRange(5., 95.), MSliderDiscrete(true), MSliderStep(10.)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderUndefined(make(true)), MSliderChooseRange(make(0.0), make(1.0))]),
										MSlider(make(95.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderChooseRange(make(0.0), make(95.0)), MSliderRange(5., 95.), MSliderDiscrete(true), MSliderStep(10.)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderChooseRange(make(0.0), make(1.0)), MCondensed(true)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderUndefined(make(true)), MCondensed(true)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderRange(5., 95.), MSliderDiscrete(true), MSliderStep(10.), MCondensed(true)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MCondensed(true)]),
										MSlider(make(95.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderUndefined(make(true)), MSliderChooseRange(make(0.0), make(95.0)), MSliderRange(5., 95.), MSliderDiscrete(true), MSliderStep(10.), MCondensed(true)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderUndefined(make(true)), MSliderChooseRange(make(0.0), make(1.0)), MCondensed(true)]),
										MSlider(make(95.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderChooseRange(make(0.0), make(95.0)), MSliderRange(5., 95.), MSliderDiscrete(true), MSliderStep(10.), MCondensed(true)]),
										MSlider(make(0.0), [MSliderIconLeft("volume_up"), MSliderShowValueInput(true), MSliderChooseRange(make(0.0), make(1.0)), MCondensed(true)])
									]),
								make(false),
								[]
							)
							|> (\f -> MComponentGroup(f, [MEnabled(sliderEnabled)]))
							|> (\f -> MAvailableWidth(f, const(500.0))),

							MExpander(
								MBaselineCols2(
									MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
									|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true))])),
									MText("MIconButton + MTooltip", [])
								),
								\ ->
									MCols([
										MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
										|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true)), MTooltipAlignment(MTop())])),
										MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
										|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true)), MTooltipAlignment(MTryTopFirst())])),
										MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
										|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true)), MTooltipAlignment(MTryBottomFirst())])),
										MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
										|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true)), MTooltipAlignment(MNoAlignment())])),
										MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
										|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true)), MTooltipAlignment(MLeft())])),
										MIconButton("https", \ -> next(showFab, true), [MGreen(400), FillOpacity(1.0), MIconSize(32.0)], [])
										|> (\f -> MTooltip(f, MText("Show FAB", []), [MEnabled(const(true)), MTooltipAlignment(MRight())])),
									]),
								make(false),
								[]
							)
							|> (\f -> MAvailableWidth(f, const(500.0))),
							MTextInput(make(""), [MFloatingLabel(), /*MRed(500),*/ MLabel("Label"), MShowEditIcon(true), /*MInputTemplate("__/__/____", \s -> {println(s); isDigits(s);})*/ MDynamicSize()], [MHelperText(const(Some("Hint text")), false)]),
							MTextInput(make(""), [MFloatingLabel(), /*MRed(500),*/ MLabel("Label"), MShowEditIcon(true), /*MInputTemplate("__/__/____", \s -> {println(s); isDigits(s);})*/ MDynamicSize(), MLeftIcon("help", [])], [MHelperText(const(Some("Hint text")), false)]),
							MTextInput(make(""), [Multiline(true), MaxChars(20000), MWidth(480.), MMaxLines(1), MFloatingLabel(), /*MRed(500),*/ MLabel("Hint text"), MShowEditIcon(true), /*MInputTemplate("__/__/____", \s -> {println(s); isDigits(s);})*/], []),
							MTextInput(make(""), [Multiline(true), MaxChars(20000), MWidth(480.), MMaxLines(-1), MFloatingLabel(), /*MRed(500),*/ MLabel("Hint text"), MShowEditIcon(true), /*MInputTemplate("__/__/____", \s -> {println(s); isDigits(s);})*/], []),
							MTextInput(make("disabled"), [MWidth(480.), MLabel("some text")], [MEnabled(const(false))]),
							MTextInput(make("Outlined"), [MWidth(480.), MLabel("some text"), MOutlined()], []),
							MTextInput(make("Outlined"), [MWidth(480.), MLabel("some text"), MOutlined(), MFloatingLabel()], []),
							MTextInput(make("Outlined"), [MWidth(480.), MLabel("some text"), MOutlined(), MFloatingLabel(), MLeftIcon("help", [])], []),
							MTextInput(make("Disabled Outlined"), [MWidth(480.), MLabel("some text"), MOutlined()], [MEnabled(const(false))]),
							MTextInput(make("Filled"), [MWidth(480.), MLabel("some text"), MFilled()], []),
							MTextInput(make("Filled"), [MWidth(480.), MLabel("some text"), MFilled(), MFloatingLabel()], []),
							MTextInput(make("Filled"), [MWidth(480.), MLabel("some text"), MFilled(), MFloatingLabel(), MLeftIcon("help", [])], []),
							MTextInput(make("Disabled Filled"), [MWidth(480.), MLabel("some text"), MFilled()], [MEnabled(const(false))]),

							MAutoComplete(make(""), [grapes], [MShowDropDownArrow(true), MLabel("Search"), MShowLeftButton(true), MShowAllOnEmpty()/*MWidth(400.), MMaxHeight(200.)*/], []),
							MAutoComplete(make(""), [grapes], [MShowDropDownArrow(true), MLabel("Search"), MShowLeftButton(true), MShowAllOnEmpty(), MNativeInput(false), MSuggestionsPlacement(MTryTopFirst())/*MWidth(400.), MMaxHeight(200.)*/], []),
							// example of using MAutoComplete as Dialog
							{
								content = make("");
								label = "Search";
								MSelect(content, \con -> MTextButton(if (con == "") label else con, \ -> {
									close = make(false);
									foc = make(true);

									ShowMDialog(manager, close, [],
										MConstruct(
											[\ -> subscribe2(foc, \f ->  timer(15, \ -> if (!getValue(foc)) next(close, true)))],
											MAutoComplete(content, [grapes], [MLabel("Search"), MWidth(400.), MMaxHeight(200.), MShowLeftButton(true)], [TTextInputFocus(foc)])
										)
									);
								}, [], [MOnLongClick(\ -> println("long click")), MOnLongTouch(\ -> println("long touch")), MOnClick(\ -> println("click"))]))
							},

							MAutoComplete(make(""), [grapes], [
								MLabel("Search with custom style"), MWidth(400.), MMaxHeight(200.),
								MCompletionFn(\com, isSelected, setWordFn -> {
									face =
										MColsA([
											MLinesA([
												TFillX(),
												MEllipsisText(com.sentence, [MSubheading()]),
												MEllipsisText("comment", [MListBody()]),
											])
											|> (\f -> MBorder(64., 0., 0., 0., f))
											|> MCenterY,
											MAvatar("http://blackdesert-info.ru/wp-content/uploads/vinograd.png", [])
											|> (\f -> MBorder(16., 0., 16., 0., f))
											|> MCenterY
										])
										|> (\f -> MAvailable(f, TFillXH(80.)))
										|> (\f -> MFixSize(f, TFillXH(80.)));
									MComponent([MOnClick(\ -> setWordFn(com)), MRippleType(const(MRippleFill()))], \focus ->
										makeMListLine(face, focus, const(isSelected), const(true), [],
											[MThemeFill(manager, MAccentColor()), FillOpacity(0.4)]
										)
									)
								}), MShowLeftButton(true)
							], []),
							TFixed(0.0, 8.0),
							MParagraph("Test with various elements:", [MWidth(400.)]),
							TFixed(0.0, 8.0),
							MColsA([
								MIconButton("chevron_start", \ -> println("click!"), [MPrimaryColor()], []),
								MIconButton("chevron_start", \ -> println("click!"), [], [MEnabled(const(false))]),

								MDropDown(make(-1), "Pick", ["One", "Two", "Three"], [MWidth(-1.0), MGroups([Pair(0, "First Group"), Pair(2, "Second Group")]), MEnabled(const(false))])
							]),

							MDropDown(make(-1), "Pick", ["One", "Two", "Three"], [
								MWidth(200.0),
								MGroups([Pair(0, "First Group"), Pair(2, "Second Group")]),
								MOutlined(),
								MRippleColor(const(MRed(500))), MRippleOutlineColor(const(MRed(500)))
							])
							|> MBorderTopBottom(4.0),
							MDropDown(make(-1), "", ["One", "Two", "Three"], [
								MWidth(200.0),
								MGroups([Pair(0, "First Group"), Pair(2, "Second Group")]),
								MOutlined()
							])
							|> MBorderTopBottom(4.0),
							MDropDown(make(-1), "", ["One", "Two", "Three"], [
								MWidth(200.0),
								MGroups([Pair(0, "First Group"), Pair(2, "Second Group")]),
								MFilled()
							])
							|> MBorderTopBottom(4.0),
							MMultiSelectDropDown(make([]), ["One", "Two", "Three"], [
								MWidth(200.0),
								MOutlined(),
								MButtonTitle(const("multi-select"))
							])
							|> MBorderTopBottom(4.0),
							TFixed(0.0, 8.0),
							MBaselineColsA([
								MText("MDropDownMenu: ", [MSubheading()]),
								MDropDownMenu(map([Pair("One", "today"), Pair("Two", "chat_bubble"), Pair("Three", "favorite")], \t ->
									MMenuSingleLine(t.first, [MPrimaryAction(MIcon(t.second, []))])), make(-1),
									[MNonSpecified(MMenuSingleLine("Pick", [MPrimaryAction(MIcon("grade", []))])), MMaxHeight(88.), MRippleColor(const(MRed(500))), MRippleOutlineColor(const(MRed(500)))]),

								MDropDownMenu(map([Pair("One", "today"), Pair("Two", "chat_bubble"), Pair("Three", "favorite")], \t ->
									MMenuSingleLine(t.first, [MPrimaryAction(MIcon(t.second, []))])), make(-1),
									[
										MNonSpecified(MMenuSingleLine("Pick", [MPrimaryAction(MIcon("grade", []))])),
										MMaxHeight(88.),
										MOutlined()
									]
								) |> MBorderLeft(8.),
								MDropDownMenu(map([Pair("One", "today"), Pair("Two", "chat_bubble"), Pair("Three", "favorite")], \t ->
									MMenuSingleLine(t.first, [MPrimaryAction(MIcon(t.second, []))])), make(-1),
									[
										MNonSpecified(MMenuSingleLine("Pick", [MPrimaryAction(MIcon("grade", []))])),
										MMaxHeight(88.),
										MFilled()
									]
								) |> MBorderLeft(8.)
							]),
							TFixed(0.0, 8.0),

							MIconToggle("today", [MTeal(100), FillOpacity(1.0)], [MTooltipText(const("tooltip text")), MToggleValue(make(false)), MEnabled(const(false))]),
							TFixed(0.0, 8.0),
							MIconToggle("android", [MBlack(), FillOpacity(1.0)], [MTooltipText(const("tooltip text"))]),
							TFixed(0.0, 8.0),
							MIcon("message", [MIconCounter(const(24), [])]),

							MDataTable([
									MColumn("input fields", "type some text", 400, []),
								],
								[
									[MSmallEditDialog(make(""), [MLabel("InlineText"), MWidth(400.), /*MShowEditIcon(true),*/ MaxChars(20)], [])],
									[MSmallEditDialog(make(""), [MLabel("InlineText with floating label"), MWidth(400.), MFloatingLabel()], [])],
								],
								[]),
							{
								lSelection = make([2]);
								MDataTable([
									MColumn("Student", "Name & surname of student", 96, [
										MSort(\i1,i2 -> {
											sortOrder = ["Trevor Carter", "Lena Bareket", "Rachel Kelley", "Joseph Dang"];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Average score", "Student's average score", 56, [
										MSort(\i1,i2 -> {
											sortOrder = [3.8, 4.1, 33.6, 4.8];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Year of birth", "Student's birth year", 96, [
										MSort(\i1,i2 -> {
											sortOrder = [1960, 1990, 1982, 1978];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Comment", "Some comment about the student", 128, [
										MSort(\i1,i2 -> {genericCompare(i1, i2)})
									]),
									MColumn("Course", "Course in which the student learns", 72, []),
									MColumn("More", "Additional options", 48, []),
								], [
									[MText("Trevor Carter", [MDataRow()]), MText("3.8", [MDataRow()]),  MText("1960", [MDataRow()]),  MSmallEditDialog(make("Very good person"), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed(), */MaxChars(16)], []),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(-1), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(1)],
									[MText("Lena Bareket", [MDataRow()]), MText("4.1", [MDataRow()]),  MText("1990", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(0), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(2)],
									[MText("Rachel Kelley", [MDataRow()]), MText("33.6", [MDataRow()]), MText("1982", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(1), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(3)],
									[MText("Joseph Dang", [MDataRow()]), MText("4.8", [MDataRow()]),  MText("1978", [MDataRow()]), MSmallEditDialog(make("Disabled comment"), [MLabel("Add a comment"), MWidth(128.)/*MCondensed()*/], [MEnabled(const(false))]),
										MDropDownMenu(map(["First", "Second", "Three"], \t ->
											MMenuSingleLine(t, [])), make(2), [MNonSpecified(MMenuSingleLine("Pick", [])), MDataTableRow()]),
										datatableMenu(4)],
								//], [MMultiSelection(make(buildSet([0, 2]))), MPagination(make(3), ["2", "3", "4", "20"]), MFullWidth(),
								], [
									MCheckBoxSelection([]),
									MHoverEnabled(const(false)),
									/*MFullWidth,*/
									MHeaderActions(
									 	MSelect(lSelection, \ls ->
									 		if (length(ls) > 0)
										 		MColsA([
											 		MText(i2s(length(ls)) + if (length(ls) == 1) " item selected" else " items selected", [MSubheading(), MPrimaryColor()]) |> MCenterY,
											 		TFillX(),
											 		MIconButton("delete", nop, [], []) |> MCenterY
											 	])
											 else
											 	MText("MCheckBoxSelection", [MTitle()]) |> MCenterY
										)
									 	|> (\f -> MBorder(16., 0., 16., 0., f))
									 	|> (\f -> MAvailable(f, TFillXH(56.)))
									 	, []),
									MListSelection(const(true), true, true, lSelection),
									MPagination(make(2), [2, 3, 4, 20]),
									MSortingDefault(make(MSortingParam(-1, true))),
									/*MPaginationAutoScaling(), */
									MMinTableHeigth(262.0),
									// MInCard(),
									MWidthByContent()
								])
							|> (\f -> MBorder(16.0, 32.0, 16.0, 32.0, f))
							},

							MDataTable([
									MColumn("Student", "Name & surname of student", 96, [
										MSort(\i1,i2 -> {
											sortOrder = ["Trevor Carter", "Lena Bareket", "Rachel Kelley", "Joseph Dang"];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Average score", "Student's average score", 56, [
										MSort(\i1,i2 -> {
											sortOrder = [3.8, 4.1, 33.6, 4.8];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Year of birth", "Student's birth year", 96, [
										MSort(\i1,i2 -> {
											sortOrder = [1960, 1990, 1982, 1978];
											genericCompare(sortOrder[i1], sortOrder[i2]);
										})
									]),
									MColumn("Comment", "Some comment about the student", 128, [
										MSort(\i1,i2 -> {genericCompare(i1, i2)})
									]),
									MColumn("Course", "Course in which the student learns", 72, []),
									MColumn("More", "Additional options", 48, []),
								], [
									[MText("Trevor Carter", [MDataRow()]), MText("3.8", [MDataRow()]),  MText("1960", [MDataRow()]),  MSmallEditDialog(make("Very good person"), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed(), */MaxChars(16)], []), MDropDown(make(0), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(1)],
									[MText("Lena Bareket", [MDataRow()]), MText("4.1", [MDataRow()]),  MText("1990", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []), MDropDown(make(1), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(2)],
									[MText("Rachel Kelley", [MDataRow()]), MText("33.6", [MDataRow()]), MText("1982", [MDataRow()]), MSmallEditDialog(make(""), [MLabel("Add a comment"), MWidth(128.), MShowEditIcon(true), /*MCondensed()*/], []), MDropDown(make(2), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(3)],
									[MText("Joseph Dang", [MDataRow()]), MText("4.8", [MDataRow()]),  MText("1978", [MDataRow()]), MSmallEditDialog(make("Disabled comment"), [MLabel("Add a comment"), MWidth(128.)/*MCondensed()*/], [MEnabled(const(false))]), MDropDown(make(0), "", ["First ", "Second", "Third"], [MDataTableRow()]), datatableMenu(4)],
								//], [MMultiSelection(make(buildSet([0, 2]))), MPagination(make(3), ["2", "3", "4", "20"]), MFullWidth(),
								], [
									MListSelection(const(true), false, false, make([2])),
									MPagination(make(2), [2, 3, 4, 20]),
									MSortingDefault(make(MSortingParam(-1, true))),
									MPaginationAutoScaling(),
									MMinTableHeigth(262.0),
									MInCard(),
									MWidthByContent()
								])
							|> (\f -> MBorder(16.0, 32.0, 16.0, 32.0, f))
							|> (\f -> MExplicitTheme(f, fnot(manager.white), [])),

							MList(
								[
									MTripleLine("Abbey Christensen", generate(0, 20, \i -> "text" + i2s(i) + if (i == 5 || i == 10 || i == 15) "\n" else " ") |> concatStrings, [MPrimaryAction(MAvatar("http://api.adorable.io/avatars/40/rott@adorable.io.png", [])),
										MSecondaryAction(MIcon("chat_bubble", [])),
										MSelectionEnabled(const(false)),
										MRightLeaveBehind(MBorder(16., 0., 16., 0., MIcon("send", [])), \ -> println("send"), [MGapSize(120., true),
											{pos = make(0.); subscribe2(pos, println); MLeaveBehindPosition(pos);}]),
										MLeftLeaveBehind(MBorder(16., 0., 16., 0., MIcon("delete", [])), \ -> println("delete"), [MGapSize(120., false)])]),
									MSingleLine("Alex Nelson", [MPrimaryAction(MIcon("today", [])), MSecondaryAction(MIcon("today", [])), MEnabled(const(false)),
										MRightLeaveBehind(MBorder(16., 0., 16., 0., MIcon("send", [])), \ -> println("send"), []),
										MLeftLeaveBehind(MBorder(16., 0., 16., 0., MIcon("delete", [])), \ -> println("delete"), [])]),
									MSingleLine("Mary Johnson", [MPrimaryAction(MIcon("sms_failed", [])), MSecondaryAction(MIcon("chat_bubble", [])),
										MRightLeaveBehind(MBorder(16., 0., 16., 0., MIcon("send", [])), \ -> println("send"), [MGapSize(20., false)])]),
									MSingleLine("Peter Carlsson", [MPrimaryAction(MIcon("favorite", [])), MSecondaryAction(MIcon("chat_bubble", [])),
										MLeftLeaveBehind(MBorder(16., 0., 16., 0., MIcon("delete", [])), \ -> println("delete"), [MGapSize(20., true)])]),
								], [MAddSeparators()], [MListSelection(const(true), false, true, make([])), MOnListClick(const(true), println)])
							|> (\f -> MBorder(-8., 0., -8., 8., f)),
							MSelect(time, \t -> MText("hour: " + toString(t.hour) + ", minute: " + toString(t.min), [])),
							MFlexibleGrid(const([
								MTextButton("DISABLED", nop, [MButtonRaised()], [MEnabled(const(false))])
								|> (\f -> MBorder4(4., f)),
								MTextButton(
									"PRINT",
									\ -> ShowMPrintPagesDialog(manager, map(enumFromTo(0, 100), \i ->
										TRectangle([Fill(if (i % 2 == 0) blue else green), Stroke(red), StrokeWidth(2.0)], TFillXY())
									), [])
									|> ignore,
									[],
									[MShortcut("p")]
								),
								MTextButton("TIME", \ -> {
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(time), MDialogDraggable(TFixed(0., 0.), TFillXH(100.))],
										MTimePicker(time, [
											MTimeAMPM(true),
											MTimeMin(Time(0, 0, 0, 9, 30, 20)),
											MTimeMax(Time(0, 0, 0, 20, 40, 40)),
											MTimeSeconds(true),
											//MEnabled(const(false)),
											MDialogButtons([
												MButtonOk("", nop),
												MButtonCancel("esc", \ -> next(close, true))
											])
										])
									)
								}, [], [MRippleOutlineStyle([StrokeWidth(4.0)]), MShortcut("t"), MOnRightClick(\ -> println("right")), MOnMiddleClick(\ -> println("middle"))])
								|> (\f -> MBorder4(4., f)),
								MTextButton("VIDEO", \ -> {
									picM = make(TEmpty());
									getFrameFn = ref \ -> "";

									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToClose(), MDialogUseFrame(), MDialogScroll()],
										MLinesA([
											MConstruct(
												[
													\ -> fconnect(fdivide(position, vlength), posSlider),
													\ -> fconnect(fmultiply(posSlider, vlength), position),
													makeSubscribe(position, \p -> {
														subt =
															if (p < 20. && p > 0.)
																d2s(p) + " Subtitle"
															else
																"";

														nextDistinct(
															subtitles,
															VideoSubtitle(
																subt,
																concat(
																	MTextStyle2CharacterStyle(manager.focus, [MSubheading(), MWhite()]),
																	[BackgroundFill(MColor2int(MBackgroundMColor(false))), BackgroundFillOpacity(1.)]
																)
															)
														);
													})
												],
												MLinesA([
													{
														multiPlaying = make(true);

														MCols2(
															MMultiAudioPlayer(
																["images/material_test/big_buck_bunny.mp4"],
																[
																	StreamStatus(\s -> println("First Audio Player Stream Status: " + s)),
																	FVideoLoop(looping),
																	FVideoControls([PauseResume(), VolumeControl(), FullScreenPlayer(), Scrubber(), PlayerControlsAlwaysVisible(), PlaybackRateControl()]),
																	FVideoTimeRange(fif(timeRange, const(2.), const(0.)), fif(timeRange, const(4.), const(0.))),
																	// MWidth(280.),
																	// MEnabled(const(false)),
																	FVideoPlay(multiPlaying)
																]
															),
															MIconToggle("pause", [MToggleFalseIcon("play_arrow", [])], [MToggleValue(multiPlaying)])
														)
														|> (\f -> MAvailable(f, TFixed(200.0, 100.0)))
														|> (\f -> MConstruct([makeSubscribe(multiPlaying, println)], f))
													},
													MAudioPlayer(
														"images/material_test/big_buck_bunny.mp4",
														[
															StreamStatus(\s -> println("First Audio Player Stream Status: " + s)),
															FVideoLoop(looping),
															FVideoControls([PauseResume(), VolumeControl(), FullScreenPlayer(), Scrubber(), PlayerControlsAlwaysVisible(), PlaybackRateControl()]),
															FVideoTimeRange(fif(timeRange, const(2.), const(0.)), fif(timeRange, const(4.), const(0.))),
															MWidth(280.),
															MEnabled(const(false))
														]
													),
													MFixedY(8.),
													MAudioPlayer(
														"images/material_test/big_buck_bunny.mp4",
														[
															StreamStatus(\s -> println("Second Audio Player Stream Status: " + s)),
															FVideoLoop(looping),
															FVideoControls([PauseResume(), VolumeControl(), FullScreenPlayer(), Scrubber(), PlayerControlsAlwaysVisible(), PlaybackRateControl()]),
															FVideoTimeRange(fif(timeRange, const(2.), const(0.)), fif(timeRange, const(4.), const(0.))),
															MOrange(200)
														]
													)
													|> (\f -> MAvailable(f, TFillWY(640.))),
													MFixedY(8.),
													MVideoPlayer(
														"images/material_test/big_buck_bunny.mp4",
														videoSize,
														[
															StreamStatus(\s -> println("Video Player Stream Status: " + s)),
															FVideoLoop(looping),
															FVideoPosition(position),
															FVideoControls([PauseResume(), VolumeControl(), FullScreenPlayer(), Scrubber(), PlayerControlsAlwaysVisible(), PlaybackRateControl()]),
															FVideoTimeRange(fif(timeRange, const(2.), const(0.)), fif(timeRange, const(4.), const(0.))),
															FVideoKeepAspectRatio(keepAspectRatio),
															FVideoSubtitles(subtitles),
															FVideoGetCurrentFrame(getFrameFn),
															MRed(500),
															FVideoAdditionalSources([
																FVideoSource("http://clips.vorwaerts-gmbh.de/big_buck_bunny.webm", "video/webm"),
																FVideoSource("http://clips.vorwaerts-gmbh.de/big_buck_bunny.ogv", "video/ogv")
															]),
															FVideoCoverBox(cover, [])
														]
													),
													MLines2(
														MTextButton("GET FRAME", \ -> next(picM, MPicture(^getFrameFn(), [])), [MButtonRaised()], []),
														MMutable(picM)
													),
													MVideoPlayer(
														"https://www.youtube.com/watch?v=Q8TXgCzxEnw",
														videoSize,
														[]
													),
													MVideoPlayer(
														"https://vimeo.com/222990241",
														videoSize,
														[]
													)
												])
											),
											MColsA([
												MSwitchControl(timeRange, [MOnOffText("Time Range", "")]),
												MSwitchControl(keepAspectRatio, [MOnOffText("Keep Aspect Ratio", "")]),
												MSwitchControl(cover, [MOnOffText("Cover Box", "")])
											])
										])
									)
								}, [MButtonRaised(), MPurple(500)], [MShortcut("v")])
								|> (\f -> MBorder4(4., f)),
								MTextButton("DATE", \ -> {
									date = make(stamp2date(timestamp()));
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToCancel(date), MDialogDraggable(TFixed(0., 0.), TFillXH(96.))],
										MDatePicker(date, [
											MDialogButtons([
												MButtonOk("", nop),
												MButtonCancel("esc", \ -> next(close, true))
											]),
											//MEnabled(const(false)),
											MDateMin(addYearsToDate(stamp2date(timestamp()), -10)),
											MDateMax(addYearsToDate(stamp2date(timestamp()), 5))
										])
									)
								}, [MButtonRaised()], [MShortcut("d")])
								|> (\f -> MBorder4(4., f)),
								MTextButton("FILEBROWSER", \ -> showCustomMFileBrowser(manager, "Material Filebrowser", [], [CancelExtFBB(nop)], []), [MButtonRaised(), MOrange(500)], [MShortcut("f")])
								|> (\f -> MBorder4(4., f)),
								MTextButton("SNAPSHOT & SERIALIZATION", \ -> {
									close = make(false);
									ShowMDialog(manager, close, [MDialogClickOutToClose(), MDialogScroll(), MDialogFullScreen()], {
										timer(5000, \ -> next(close, true));
										deserializeSnapshot(serializeSnapshot(manager.grabSnapshot()));
									})
								}, [MButtonRaised()], [MShortcut("s")]),
								MTextButton("HTML", \ -> {
									close = make(false);
									content = wrapFlowHTML(eitherMap(getValue(htmlFn), apply0, ""));
									ShowMDialog(manager, close, [MDialogClickOutToClose(), MDialogScroll(), MDialogFullScreen()], {
										// timer(5000, \ -> next(close, true));
										MRealHTML(content, const(WidthHeight(getStageWidth(), getStageHeight())), []);
									})
								}, [MButtonRaised()], [MShortcut("h")])
								|> (\f -> MBorder4(4., f)),
								{
									pickerColor = make(MAmber(500));
									MSelect(pickerColor, \c -> MTextButton("COLOR", \ -> {
										close = make(false);
										ShowMDialog(manager, close, [MDialogClickOutToCancel(pickerColor), /*MDialogDraggable(TFixed(0., 0.), TFillXH(96.))*/],
											MColorPicker(pickerColor, [
												MaterialColorPicker(),
												//MEnabled(const(false)),
												MDialogButtons([
													MButtonOk("", nop),
													MButtonCancel("esc", \ -> next(close, true))
												]),
												MOpacityPicker(make(1.0))
											])
										)
									}, [MButtonRaised(), c], [MShortcut("c")]))
									|> (\f -> MBorder4(4., f))
								},
								MTextButton("ERASE", \ -> {
									close = make(false);
									ShowMDialog(manager, close,
										[
											MDialogClickOutToClose(),
											MDialogTitle("Are you sure? <b>Are you sure?</b> Are you sure? Are you sure? Are you sure? Are you sure? Are you sure? Are you sure? Are you sure? Are you sure? Are you sure? Are you sure?"),
											MDialogUseFrame(),
											MDialogActions([
												// MDropDown(make(-1), "Pick", ["One", "Two", "Three"], []),
												MTextButton("CANCEL", \ -> {
													println("CANCEL");
													next(close, true);
												}, [], [MShortcut("esc")]),
												MTextButton("ERASE", \ -> {
													println("ERASE");
													next(close, true);
												}, [MRed(500)], [MShortcut("enter")]),
												MTextButton("CANCEL", \ -> {
													println("CANCEL");
													next(close, true);
												}, [], [MShortcut("esc")]),
												MTextButton("ERASE", \ -> {
													println("ERASE");
													next(close, true);
												}, [MRed(500)], [MShortcut("enter")]),
												MTextButton("CANCEL", \ -> {
													println("CANCEL");
													next(close, true);
												}, [], [MShortcut("esc")]),
												MTextButton("ERASE", \ -> {
													println("ERASE");
													next(close, true);
												}, [MRed(500)], [MShortcut("enter")]),
												MTextButton("CANCEL", \ -> {
													println("CANCEL");
													next(close, true);
												}, [], [MShortcut("esc")]),
												MTextButton("ERASE", \ -> {
													println("ERASE");
													next(close, true);
												}, [MRed(500)], [MShortcut("enter")]),
												MTextButton("CANCEL", \ -> {
													println("CANCEL");
													next(close, true);
												}, [], [MShortcut("esc")]),
												MTextButton("ERASE", \ -> {
													println("ERASE");
													next(close, true);
												}, [MRed(500)], [MShortcut("enter")])
											])
											// MDialogDraggable(TFixed(0., 0.), TFillXH(52.))
										],
										MLines([
											MText("You'll lose all photos and media!", [MListBody()]),
											MTextInput(make(""), [MWidth(400.0)], [])
											|> (\f ->
												MConstruct(
													[
														\ ->
															ShowMFloatingAction(
																manager,
																MText("You'll lose all photos and media!", [MListBody()])
																|> (\f2 -> MFrame(0.0, 0.0, [MFill(MRed(500))], f2))
															)
													],
													f
												)
											)
										])
									)
								}, [MRed(500), MButtonRaised()], [IScriptId("MEraseButton"), MShortcut("e")])
								|> (\f -> MBorder4(4., f)),
								MTextClickable("MTextClickable", nop, [MBackgroundStyle([Fill(black)])], [])
								|> (\f -> MBorder4(4., f)),
								MTextClickable(toUpperCase("MTextClickable"), nop, [MBackgroundStyle([Fill(black)]), MCustomFont(10.0, "RobotoMedium", 0.87)], [])
								|> (\f -> MBorder4(4., f)),
								MTextClickable(
									"3",
									nop,
									[],
									[
										MHighlightOnHover(const(false)),
										MRippleType(const(MRippleCenter())),
										MRippleWidthHeight(const(WidthHeight(36., 36.))),
										MRippleRoundedCorners(false)
									]
								)
								|> (\f -> MBorder4(4., f)),
								MSelect(iconName, \ic -> MIconButton(ic, \ -> showMIconDialog(manager, iconName), [], [MShortcut("i")]))
								|> (\f -> MBorder4(4., f)),
							]), [MOrdered(true), MAnimationEnabled(true)]),
							TFixed(0.0, 24.0),
							MTimePeriodPicker(manager, make(WeeklyPeriod(2, 5, 3)), []),
							TFixed(0.0, 24.0),
							MCarousel(carContent, make(0), [])
							|> (\f -> MAvailable(f, TFixed(640., 0.)))
							|> MCenterX,
							TFixed(0.0, 24.0),
							// {
							// 	pos = make(zeroPoint);

							// 	TConstruct(
							// 		[
							// 			\ -> subscribe(pos, println)
							// 		],
							// 		TCurrentPosition(pos, TRectangle([Fill(green)], TFixed(100., 100.)))
							// 	)
							// },
								[MCard([
									MRichMediaBlock(TEmpty(), [
										MBackgroundImage("http://frugalfrolicker.com/wp-content/uploads/2015/07/Kangaroo-Valley-10.jpg", false),
										MCardHeight(150.0)
									]),
									MPrimaryTextBlock("Kangaroo Valley Safari", "Located two hours south of Sydney in the Southern Highlands of New South Wales", []),
									MActionBlock([
										MTextButton("SHARE", nop, [MAccentColor()], [MOnClickAsync(\fn -> { println("click"); timer(5000, fn); })]),
										MTextButton("EXPLORE", nop, [MAccentColor()], [])
									], [], []),
									MSeparatorBlock(),
									MExpanderBlock(
										MColsA([MText("VIEW COMMENTS", [MButtonFont()]), TFillX()]),
										\ ->
											MList(
												[
													MTripleLine("Sandra Adams", "Wow! This looks amazing. I'm so excited to make this at home.", [MPrimaryAction(MAvatar("https://upload.wikimedia.org/wikipedia/en/8/8b/Anni_Albers.jpg", []))]),
													MTripleLine("David Park", "Then we'll go with that data file! Hey, you add a one and two zeros to that or we walk!", [MPrimaryAction(MAvatar("http://www.nobelprize.org/nobel_prizes/physics/laureates/1933/dirac_postcard.jpg", []))])
												],
												[],
												[]
											),
										make(false), [MNoDispose()]
									)
								],
								[
									MCardWidth(340.0)
								], []),
								MCard([
									MCard([
										MCard([
											MPrimaryTextBlock("Rate this album", "Jam City", []),
											MSupportingTextBlock("Dream A Garden", []),
											MSeparatorBlock(),
											MActionBlock([
												MIconButton("thumb_up", nop, [], []),
												MIconButton("thumb_down", nop, [], []),
											], [], [])
										], [MCardWidth(240.0)], []),
										MRichMediaBlock(TEmpty(), [
											MBackgroundImage("http://cdn3.pitchfork.com/albums/21562/homepage_large.154a1f4f.jpg", false),
											MCardWidth(100.0),
											MMoreMenu([MMenuSingleLine("About", [])], [MOnListClick(const(true), println)], [])
										]),
									], [], [])
								],
								[
									MCardWidth(340.0),
								], []),
								MTextCard(
									"Kangaroo Valley Safari",
									"Located two hours south of Sydney in the Southern Highlands of New South Wales",
									[
										MPrimaryColor(),
										MCardWidth(340.0)
									], [
										MOnClick(\ -> println("click")),
										MOnDoubleClick(\ -> println("double click")),
										MOnTripleClick(\ -> println("triple click"))
									]),
								MCard([
									MPrimaryTextBlock("Unlimited music now", "You can listen to radio with no limits on Google Play Music.", []),
									MActionBlock([
										MTextButton("LISTEN NOW", nop, [], []),
									], [], [])
								],
								[
									MMoreMenu([
										MMenuSingleLine("Settings", [MPrimaryAction(MIcon("settings", []))],),
										MMenuSingleLine("Never show this message",
											{
												dynIcon = make(TEmpty());
												[
													MPrimaryAction(MMutable(dynIcon)),
													MOnClick(\ ->  next(dynIcon, if (getValue(dynIcon) == TEmpty()) MIcon("check", []) else TEmpty()))
												]
											}),
										MSeparatorLine(),
										MSubMenu("Sub Menu", [
											MMenuSingleLine("Undo", [MEnabled(const(false)), MPrimaryAction(MIcon("undo", [])), MAdditionalText("Ctrl+Z")]),
											MMenuSingleLine("Redo", [MPrimaryAction(MIcon("redo", [])), MAdditionalText("Ctrl+Y")],),
											MSeparatorLine(),
											MSubMenu("Another Sub Menu", [
												MMenuSingleLine("Undo", [],),
												MMenuSingleLine("Redo", [],)
											], [MOnListClick(const(false), println), MEnabled(const(true))])
										], [MOnListClick(const(true), println)]),
										MMenuSingleLine("Exit", [MAdditionalText("Alt+F4")])
									], [MOnListClick(const(true), println), MMaxHeight(100.)], []),
									MBlueGrey(700),
									MCardWidth(340.0)
								], []),
								MCard([
									MPrimaryTextBlock("Pre-fab homes", "", [
										MBackgroundImage("http://www.img.lirent.net/2014/10/Android-Lollipop-wallpapers-d.jpg", false),
										MCardHeight(200.0),
										MCardAlignBottom()
									]),
									MActionBlock([], [
										MIconButton("favorite", nop, [], []),
										MIconButton("bookmark", nop, [], []),
										MIconButton("share", nop, [], [])
									], [])
								],
								[
									MCardWidth(340.0)
								], []),
								MCard([
									MRichMediaBlock(TEmpty(), [
										MCardHeight(170.0)
									]),
									MPrimaryTextBlock("Unlimited music now", "You can listen to radio with no limits on Google Play Music.", []),
									MSeparatorBlock(),
									MActionBlock([
										MTextButton("SHARE", nop, [], []),
										MTextButton("EXPLORE", nop, [], [])
									], [
										MIconButton("favorite", nop, [MBlue(0)], []),
										MIconButton("bookmark", nop, [MBlue(0)], []),
										MIconButton("share", nop, [MBlue(0)], [])
									], [])
								],
								[
									MBackgroundImage("http://orig11.deviantart.net/20eb/f/2015/030/6/f/_minflat__dark_material_design_wallpaper__4k__by_dakoder-d8fjqzu.jpg", false),
									MCardWidth(340.0)
								], [])]
							|> (\f ->
								MTabs(
									[
										MTab(
											MFlexibleGrid(const(f), [CenterAlign(), MAnimationEnabled(true), MWrapNewRow(false), TSetRTL(true)]),
											const("MFlexibleGrid"),
											[]
										),
										MTab(
											MReorderGrid(map(f, \ri -> MReorderItem(ri, [])), make([]), [TFillersSupport(), CenterAlign(), TWrapNewRow(true), TSetRTL(true)]),
											const("MReorderGrid"),
											[]
										),
										MTab(
											MDynamicChart(
												const(
													[
														MBarChartColumn(
															"Guardians of the Galaxy",
															[37.8, 30.9, 25.4, 11.7, 11.9, 8.8, 7.6, 12.3, 16.9, 12.8, 5.3, 6.6, 4.8, 4.2],
															[MBarWidth(10., 4.), MOnListClick(const(true), println), MColumnShowValuesOnHover(const(true))]
														),
														MLineChartColumn(
															"The Avengers",
															[80.8, 69.5, 57.0, 18.8, 17.6, 13.6, 12.3, 29.2, 42.9, 30.9, 7.9, 8.4, 6.3, 6.2],
															[MChartCurve(), MOnListClick(const(true), println), MColumnShowValuesOnHover(const(true))]
														),
														MBarChartColumn(
															"Transformers: Age of Extinction",
															[41.8, 32.4, 25.7, 10.5, 10.4, 7.7, 9.6, 10.6, 14.8, 11.6, 4.7, 5.2, 3.6, 3.4],
															[MBarWidth(10., 4.), MColumnShowValuesOnHover(const(true))]
														)
													]
												),
												const(generate(1, 15, \i -> MChartRow(i2s(i), i2d(i)))),
												[
													MChartTitle("Box Office Earnings in First Two Weeks of Opening"),
													MChartSubtitle("in millions of dollars (USD)"),
													MAxesStyle(
														[
															MAxisGridCenter(const(2.0))
														],
														[
															MAxisGridCenter(const(50.0)),
															MAxisCaption(const("Earnings"))
														]
													)
												]
											),
											const("MDynamicChart"),
											[]
										)
									],
									make(0),
									[]
								)
							)
							|> (\f -> MAvailableHeight(f, const(800.0)))
							|> (\f -> MScaleAvailable(const(Factor(0.9, 1.)), f))
							|> MCenter,
							{
								Saramago = Person(
									"Jose Saramago",
									"Portuguese Writer",
									"http://www.nobelprize.org/nobel_prizes/literature/laureates/1998/saramago.jpg"
								);

								Pele = Person(
									"Pelé",
									"Brazilian Football Player",
									"http://palhansen.com/content/images/stories/pele-6533487.jpg"
								);

								Dirac = Person(
									"Paul Dirac",
									"English Physicist",
									"http://www.nobelprize.org/nobel_prizes/physics/laureates/1933/dirac_postcard.jpg"
								);

								ChuckClose = Person(
									"Chuck Close",
									"American Artist",
									"http://www.worldsciencefestival.com/wp-content/uploads/2010/10/painting_blind.jpg"
								);

								people = [Saramago, Pele, Dirac, ChuckClose];

								MGridList(
									map(people, \person -> {
										content = if (person.imageurl == "") MIcon("person", [MIconSize(36.0)]) else TPicture(person.imageurl, []);
										MGridListCell(content, if (person.subtitle != "") [person.name] else [person.name], [MGridListFooter()])
									})
									|> const,
									[MGridListCellAspectRatio(2.0/3.0), MGridListCellMinWidth(150.0), MNoScroll()]
								)
							},
							{

								kandinsky = Painting(
									"Circle on a Circle",
									"Vassily Kandinsky",
									"https://upload.wikimedia.org/wikipedia/commons/f/f0/Vassily_Kandinsky,_1923_-_Circles_in_a_Circle.jpg"
								);

								klee = Painting(
									"Miraculous Landing, or the 112!",
									"Paul Klee",
									"http://totallyhistory.com/wp-content/uploads/2011/07/Miraculous_Landing_or_the_-112-_by_Paul_Klee_1920.jpg"
								);

								albers = Painting(
									"Homage to the Square: Soft Spoken",
									"Josef Albers",
									"http://www.metmuseum.org/toah/images/h2/h2_1972.40.7.jpg"
								);

								duchamp = Painting(
									"Nude Descending a Staircase, No 2",
									"Marcel Duchamp",
									"https://derlandstreicher.files.wordpress.com/2014/11/200px-duchamp_-_nude_descending_a_staircase.jpg"
								);

								magritte = Painting(
									"The False Mirror",
									"René Magritte",
									"http://www.renemagritte.org/images/paintings/the-false-mirror.jpg"
								);

								matisse = Painting(
									"The Piano Lesson",
									"Henri Matisse",
									"http://www.henrimatisse.org/images/gallery/the-piano-lesson.jpg"
								);

								paintings = [kandinsky, klee, albers, duchamp, magritte, matisse];

								selected = make(-1);
								subscribe(selected, \idx -> {
									if (idx >= 0)
										println("Clicked on '" + paintings[idx].name + "'");
								});
								MGridList(
									mapi(paintings, \idx, painting -> {
										content = if (painting.imageurl == "") MIcon("person", [MIconSize(36.0)]) else TPicture(painting.imageurl, []);
										cellstyle = if (idx == 0) [MGridListHeader(), MIconButton("star", nop, [MIconSize(24.0), MWhite()], []), MGridListIconLeft()] else [MGridListHeader()];
										MGridListCell(content, if (painting.artist != "") [painting.name, painting.artist] else [painting.name], cellstyle);
									})
									|> const,
									[MGridListCellAspectRatio(1.0), MGridListCellMinWidth(200.0), MNoScroll(), MSingleSelection(selected)]
								)
							},
							TFixed(0.0, 8.0),
							MScale(const(Factor(0.5, 0.3)), MImageMap(TPicture("http://www.henrimatisse.org/images/gallery/the-piano-lesson.jpg", []),
								[
									MArea([Point(55.0, 426.0), Point(54.0, 2.0), Point(115.0, 3.0), Point(198.0, 425.0)]),

								],
								imageMapIndex,
								[]
							)),
							TFixed(0.0, 8.0),
						])),
						MGroup2(
								TRectangle([MFill(MBlue(50))], TFillXH(400.0)),
								MMovable(
									MTextCard(
										"Move me!",
										"You can dragg me inside the area",
										[
											MPrimaryColor(),
											MCardWidth(264.0)
										],
										[MOnClick(\ -> println("dragging")), MPassClicks()]
									),
									TFillXH(400.0),
									[]
								),
							),
						MText("MDynamicList with 400000 lines", [MHeadline()])
						|> (\f -> MBorder(8., 32., 8., 32., f))
						|> MCenterX,
						MDynamicList(
							(\i -> [
								MSingleLine("Abbey Christensen " + i2s(i * 4 + 0), [MPrimaryAction(MTooltip(MIconButton("send", \ -> println("send"), [], []), MText("Send", []), [])),
									MSecondaryAction(MIcon("chat_bubble", [])), MSelectionEnabled(const(false))]),
								MSingleLine("Alex Nelson " + i2s(i * 4 + 1), [MPrimaryAction(MIcon("today", [])), MSecondaryAction(MIcon("today", [])), MEnabled(const(false))]),
								MSingleLine("Mary Johnson " + i2s(i * 4 + 2), [MPrimaryAction(MIcon("sms_failed", [])), MSecondaryAction(MIcon("chat_bubble", []))]),
								MSingleLine("Peter Carlsson " + i2s(i * 4 + 3), [MPrimaryAction(MIcon("favorite", [])), MSecondaryAction(MIcon("chat_bubble", []))]),
							])
							|> (\f2 -> concatA(generate(0, 100000, \i -> f2(i)))) |> const,
							[MAddSeparators()],
							[MListReorder(make([]), const(true)), MListSelection(const(true), false, true, make([])), MOnListClick(const(true), println)]
						)
						|> (\f -> MBorder(-8., 0., -8., 8., f))
						|> (\f -> MAvailable(f, TFillXH(600.)))
						|> (\f -> MScaleAvailable(const(Factor(0.6, 0.)), f))
						|> MCenterX,
						TRectangle([Fill(black), FillOpacity(0.5)], TFillXH(56.0))
					])
				),
				MFloatingContent(
					MFloatingButton("add", [
							MFabSpeedDial("Select Action",
								[
									MFabIconButton("content_copy", "Copy", \ -> println("content_copy"), [MGreen(500)]),
									MFabIconButton("content_cut", "Cut", \ -> println("content_cut"), [MBlue(500)]),
									MFabIconButton("content_paste", "Paste", \ -> println("content_paste"), [MOrange(500)]),
									MFabAvatar("http://www.bauhaus-movement.com/designer/assets/images/designer/Designer-Wassily-Kandinsky.jpg", "Send to Wassily", \ -> println("send_to_wassily")),
									MFabLetterIcon("T", "Send to Tanya", \ -> println("send_to_tanya"), [], MRed(500))
								],
								[]
							),
							FillOpacity(1.0),
							MRight(),
							MBottom(),
							inspectScroll
						],
						[MOnClick(\ -> println("Main Action"))]
					)
				)
			],
			[inspectScroll, MAppStructureFlexible([])],
		)
		|> (\f -> MConstruct([\ -> MAddShortcutDialog(manager, nop)], f))
		|> (\f -> MExtractHTML(f, \fn -> next(htmlFn, Some(fn))))
	);

	if (getUrlParameter("profile") >= "1") {
		us();
		println(d2s((timestamp() - starttime) / 1000.0) + ", s");
		quit(0);
	}
}