import material/material2tropic;
import string;

editableString(str : string, setMaxLinesValue : bool) -> Material {
	maxLines = if (setMaxLinesValue) {
		strCountOf(str, "\n") + 1;
	} else {
		-1;
	}
	style = [
		Multiline(true),
		MMaxLines(maxLines),
		// This style does not work if str has 66 lines or more and MMaxLines(-1) is used
		MTextInputScrollStyle([
			MEnabled(const(false)),
			TScrollEnabled(const(false)),
			TScrollAxisEnabled(const(true), const(false)),
			TScrollDisableMouseWheel(),
			TScrollDontHandle(),
		])
	];
	MTextInput(make(str), style, []);
}

main() {
	mManager = makeMaterialManager([]);
	setRendererType("html");

	// Create a dynamic behavior for the number of lines
	linesInputB = make("66");

	setMaxLinesValueB = make(false);

	// Transform the input string to integer using fselectLift
	linesCountB = make(20); // Default value

	// Update linesCountB whenever linesInputB changes
	subscribe(linesInputB, \lines -> {
		count = max(1, s2i(lines));
		next(linesCountB, count);
	});

	// Generate text based on line count
	generateMultilineText = \count, prefix -> {
		strGlue(generate(0, count, \i -> prefix + i2s(i) + " of the multiline text input.\n"), "");
	};

	// Create behaviors for multiline texts
	longText1B = make(generateMultilineText(20, "Line "));
	longText2B = make(generateMultilineText(20, "Another line "));

	// Update texts whenever count changes
	subscribe(linesCountB, \count -> {
		next(longText1B, generateMultilineText(count, "Line "));
		next(longText2B, generateMultilineText(count, "Another line "));
	});

	// Create UI content
	content = MLines([
		// Input for controlling number of lines
		MBorder(0.0, 0.0, 0.0, 8.0,
			MLines2(
				MCols([
					MText("Number of lines: ", []),
					MTextInput(linesInputB, [MWidth(80.0)], [])
				]),
				MCheckBox(MText("Set MMaxLines Value", []), setMaxLinesValueB, [])
			)
		),

		// Scrollable container with two editable strings
		MScroll(
			MSelect(setMaxLinesValueB, \setMaxLinesValue -> {
				MLines([
					MText("First multiline text input:", [MTitle()]),
					MSelect(longText1B, \text -> editableString(text, setMaxLinesValue)),
					MText("Second multiline text input:", [MTitle()]),
					MSelect(longText2B, \text -> editableString(text, setMaxLinesValue))
				]);
			}),
			MFixed(400.0, 300.0),
			[]
		)
	]);

	mrender(mManager, true, content);
}
