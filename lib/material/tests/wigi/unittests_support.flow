import wigi/wigi_engine;
import wigi/controller;
import material/tests/wigi/unittests_support_types;

export{
	// Subscribes for value changing to record runtime events
	// Use action during playback to emulate recorded runtime events
	addSupportForTestCaseRecorder(engine : WigiEngine, wigiName : WigiCellName, testSupport : MWTestSupport) -> () -> void;
	MWTestPlaybackSupport(closeDialog : DynamicBehaviour<bool>, playbackEngine : ref Maybe<WigiEngine>);

	// somtimes for single element we have to create several test support handlers, i.e: input, output, actions, etc...
	// this handy function will create new cell name
	makeRuntimeName(cell : WigiCellName, subname : string) -> WigiCellName;
}

addSupportForTestCaseRecorder(engine : WigiEngine, wigiName : WigiCellName, testSupport : MWTestSupport) -> () -> void {
	uns1 = addInteractiveElementToRuntime(wigiName, ^(testSupport.actionRunner));
	uns2 = subscribe2(^(testSupport.actionHandler), \v -> ^maybeRecordWigiEvent(WigiRuntimeEvent(wigiName, v)));

	\ -> applyall([uns1, uns2])
}

addInteractiveElementToRuntime(wigiName : WigiCellName, action : (flow) -> void) -> () -> void {
	wigiRuntimeSet(wigiName, action);
	\ -> {
		wigiRuntimeRemove(wigiName);
	}
}

makeRuntimeName(cell : WigiCellName, subname : string) -> WigiCellName {
	if (subname != "") WigiCellName(cell.name + "#" + subname, cell.namespace)
	else cell
}