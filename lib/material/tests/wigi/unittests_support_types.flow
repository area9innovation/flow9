import behaviour;

export {
	MWTestSupport(actionHandler : ref DynamicBehaviour<flow>, actionRunner : ref (flow) -> void);

	// it is default use case for simple elements that depends only on one behaviours
	createMWTestSupportDefault(value : DynamicBehaviour<flow>) -> MWTestSupport;
	// this it the most complex situation for cases when element defines its own internal actions
	createMWTestSupportInitialized(actionHandler : DynamicBehaviour<flow>, actionRunner : (flow) -> void) -> MWTestSupport;
	// creates "empty" MWTestSupport to be populated later in the element's code.
	createMWTestSupport() -> MWTestSupport;
}

createMWTestSupportInitialized(actionHandler : DynamicBehaviour<flow>, actionRunner : (flow) -> void) -> MWTestSupport {
	MWTestSupport(ref actionHandler, ref actionRunner)
}

createMWTestSupport() -> MWTestSupport {
	createMWTestSupportInitialized(make(None()), nop1)
}

createMWTestSupportDefault(value : DynamicBehaviour<flow>) -> MWTestSupport {
	createMWTestSupportInitialized(value, \v -> next(value, v))	
}
