import material/material_dialog;

export {
	debugRender(m : Material) -> () -> void;

	MVoidStyleCheckBox(name : string, style : ?, styles : DynamicBehaviour<[flow]>) -> Material;
	MBoolStyleCheckBoxSwitchControl(name : string, defValue : bool, makeStyleFn : (bool) -> ?, getStyleValueFn : (?) -> bool, styles : DynamicBehaviour<[flow]>) -> Material;
	MIntStyleCheckBoxSlider(name : string, defValue : int, makeStyleFn : (int) -> ?, getStyleValueFn : (?) -> int, styles : DynamicBehaviour<[flow]>) -> Material;
	MDoubleStyleCheckBoxSlider(name : string, defValue : double, makeStyleFn : (double) -> ?, getStyleValueFn : (?) -> double, styles : DynamicBehaviour<[flow]>) -> Material;
	MStringStyleCheckBoxTextInput(name : string, defValue : string, makeStyleFn : (string) -> ?, getStyleValueFn : (?) -> string, styles : DynamicBehaviour<[flow]>) -> Material;
	MColorStyleDialog(manager : MaterialManager, name : string, defValue : MColor, makeStyleFn : (MColor) -> ?, getStyleValueFn : (?) -> MColor,
		styles : DynamicBehaviour<[flow]>) -> Material;
	MStructStyleDropdown(name : string, values : [?], defValue : ?, makeStyleFn : (?) -> ??, getStyleValueFn : (??) -> ?, styles : DynamicBehaviour<[flow]>) -> Material;
	MSubStyle(name : string, defValue : [?], makeStyleFn : ([?]) -> ??, getStyleValueFn : (??) -> [?], subStyles : (DynamicBehaviour<[?]>) -> [Material],
		styles : DynamicBehaviour<[flow]>) -> Material;

	MDynamicBoolStyleCheckBoxSwitchControl(name : string, defValue : DynamicBehaviour<bool>, makeStyleFn : (DynamicBehaviour<bool>) -> ?,
		getStyleValueFn : (?) -> Transform<bool>, styles : DynamicBehaviour<[flow]>) -> Material;
}

debugRender(m : Material) -> () -> void {
	manager = makeMaterialManager([]);

	MAppStructure(
		[
			MContent(m)
		],
		[]
	)
	|> (\f -> mrender(manager, true, f))
}

MVoidStyleCheckBox(name : string, style : ?, styles : DynamicBehaviour<[flow]>) -> Material {
	stylePresent = make(isSome(tryExtractStruct(getValue(styles), style)));

	MConstruct(
		[
			makeSubscribe2(styles, \stls ->
				nextDistinct(
					stylePresent,
					isSome(tryExtractStruct(stls, style))
				)
			)
		],
		MCheckBox(
			TEmpty(),
			stylePresent,
			[
				MOnNewValue(\v ->
					nextDistinct(
						styles,
						if (v)
							arrayPush(removeAllStructs(getValue(styles), style), style)
						else
							removeAllStructs(getValue(styles), style)
					)
				),
				MLabel(name)
			]
		)
	)
}

MBoolStyleCheckBoxSwitchControl(name : string, defValue : bool, makeStyleFn : (bool) -> ?, getStyleValueFn : (?) -> bool, styles : DynamicBehaviour<[flow]>) -> Material {
	switchValue = make(defValue);
	defStyle = makeStyleFn(getValue(switchValue));
	styleB = make(if (isSome(tryExtractStruct(getValue(styles), defStyle))) Some(defStyle) else None());
	stylePresent = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(removeAllStructs(getValue(styles), defStyle), newSt),
						\ ->
							removeAllStructs(getValue(styles), defStyle)
					),
				 \stls ->
					eitherFn(
						tryExtractStruct(stls, defStyle),
						\st -> {
							nextDistinct(switchValue, getStyleValueFn(st));
							Some(st)
						},
						\ ->
							None()
					)
			),
			makeSubscribe2(switchValue, \v ->
				nextDistinct(styleB, Some(makeStyleFn(v)))
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v)
								Some(makeStyleFn(getValue(switchValue)))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MSwitchControl(switchValue, [])
			)
		)
	)
}

MDynamicBoolStyleCheckBoxSwitchControl(name : string, defValue : DynamicBehaviour<bool>, makeStyleFn : (DynamicBehaviour<bool>) -> ?,
	getStyleValueFn : (?) -> Transform<bool>, styles : DynamicBehaviour<[flow]>) -> Material {
	switchValue = defValue;
	defStyle = makeStyleFn(switchValue);
	styleB = make(if (isSome(tryExtractStruct(getValue(styles), defStyle))) Some(defStyle) else None());
	stylePresent = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(removeAllStructs(getValue(styles), defStyle), newSt),
						\ ->
							removeAllStructs(getValue(styles), defStyle)
					),
				 \stls ->
					eitherFn(
						tryExtractStruct(stls, defStyle),
						\st -> {
							nextDistinct(switchValue, fgetValue(getStyleValueFn(st)));
							Some(st)
						},
						\ ->
							None()
					)
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v)
								Some(makeStyleFn(switchValue))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MSwitchControl(switchValue, [])
			)
		)
	)
}

MIntStyleCheckBoxSlider(name : string, defValue : int, makeStyleFn : (int) -> ?, getStyleValueFn : (?) -> int, styles : DynamicBehaviour<[flow]>) -> Material {
	sliderValue = make(i2d(defValue));
	defStyle = makeStyleFn(defValue);
	styleB = make(if (isSome(tryExtractStruct(getValue(styles), defStyle))) Some(defStyle) else None());
	stylePresent = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(removeAllStructs(getValue(styles), defStyle), newSt),
						\ ->
							removeAllStructs(getValue(styles), defStyle)
					),
				 \stls ->
					eitherFn(
						tryExtractStruct(stls, defStyle),
						\st -> {
							nextDistinct(sliderValue, i2d(getStyleValueFn(st)));
							Some(st)
						},
						\ ->
							None()
					)
			),
			makeSubscribe2(sliderValue, \v ->
				nextDistinct(styleB, Some(makeStyleFn(floor(v))))
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v)
								Some(makeStyleFn(floor(getValue(sliderValue))))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MSlider(sliderValue, [])
			)
		)
	)
}

MDoubleStyleCheckBoxSlider(name : string, defValue : double, makeStyleFn : (double) -> ?, getStyleValueFn : (?) -> double, styles : DynamicBehaviour<[flow]>) -> Material {
	sliderValue = make(defValue);
	defStyle = makeStyleFn(defValue);
	styleB = make(if (isSome(tryExtractStruct(getValue(styles), defStyle))) Some(defStyle) else None());
	stylePresent = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(removeAllStructs(getValue(styles), defStyle), newSt),
						\ ->
							removeAllStructs(getValue(styles), defStyle)
					),
				 \stls ->
					eitherFn(
						tryExtractStruct(stls, defStyle),
						\st -> {
							nextDistinct(sliderValue, getStyleValueFn(st));
							Some(st)
						},
						\ ->
							None()
					)
			),
			makeSubscribe2(sliderValue, \v ->
				nextDistinct(styleB, Some(makeStyleFn(v)))
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v)
								Some(makeStyleFn(getValue(sliderValue)))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MSlider(sliderValue, [])
			)
		)
	)
}

MStringStyleCheckBoxTextInput(name : string, defValue : string, makeStyleFn : (string) -> ?, getStyleValueFn : (?) -> string, styles : DynamicBehaviour<[flow]>) -> Material {
	inputValue = make(defValue);
	defStyle = makeStyleFn(defValue);
	styleB = make(if (isSome(tryExtractStruct(getValue(styles), defStyle))) Some(defStyle) else None());
	stylePresent = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(removeAllStructs(getValue(styles), defStyle), newSt),
						\ ->
							removeAllStructs(getValue(styles), defStyle)
					),
				 \stls ->
					eitherFn(
						tryExtractStruct(stls, defStyle),
						\st -> {
							nextDistinct(inputValue, getStyleValueFn(st));
							Some(st)
						},
						\ ->
							None()
					)
			),
			makeSubscribe2(inputValue, \v ->
				nextDistinct(styleB, Some(makeStyleFn(v)))
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v)
								Some(makeStyleFn(getValue(inputValue)))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MTextInput(inputValue, [], [])
			)
		)
	)
}

MColorStyleDialog(manager : MaterialManager, name : string, defValue : MColor, makeStyleFn : (MColor) -> ?, getStyleValueFn : (?) -> MColor,
	styles : DynamicBehaviour<[flow]>) -> Material {
	closeColorPicker = make(false);
	colorValue = make(defValue);
	defStyle = makeStyleFn(defValue);
	styleB = make(if (isSome(tryExtractStruct(getValue(styles), defStyle))) Some(defStyle) else None());
	stylePresent = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(removeAllStructs(getValue(styles), defStyle), newSt),
						\ ->
							removeAllStructs(getValue(styles), defStyle)
					),
				 \stls ->
					eitherFn(
						tryExtractStruct(stls, defStyle),
						\st -> {
							nextDistinct(colorValue, getStyleValueFn(st));
							Some(st)
						},
						\ ->
							None()
					)
			),
			makeSubscribe2(colorValue, \v ->
				nextDistinct(styleB, Some(makeStyleFn(v)))
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v)
								Some(makeStyleFn(getValue(colorValue)))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MSelect(
					colorValue,
					\cv ->
						MTextButton(
							"Pick Color",
							\ -> {
								next(closeColorPicker, false);

								ShowMDialog(
									manager,
									closeColorPicker,
									[MDialogClickOutToCancel(colorValue)],
									MColorPicker(
										colorValue,
										[
											MaterialColorPicker(),
											//MEnabled(const(false)),
											MDialogButtons([
												MButtonOk("enter", \ -> next(closeColorPicker, true)),
												MButtonCancel("esc", \ -> next(closeColorPicker, true))
											])
										]
									)
								)
							},
							[cv, MButtonRaised()],
							[]
						)
				)
			)
		)
	)
}

MStructStyleDropdown(name : string, values : [?], defValue : ?, makeStyleFn : (?) -> ??, getStyleValueFn : (??) -> ?, styles : DynamicBehaviour<[flow]>) -> Material {
	dropdownValue : DynamicBehaviour<int> = make(findiDef(values, \v : ? -> v == defValue, -1));
	defStyle : [??] = map(values, \v : ? -> makeStyleFn(v));
	styleB : DynamicBehaviour<Maybe<??>> = make(if (isSome(tryExtractStructMany(getValue(styles), defStyle))) Some(makeStyleFn(defValue)) else None());
	stylePresent : Transform<bool> = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(fold(defStyle, getValue(styles), \acc, v -> removeAllStructs(acc, v)), newSt),
						\ ->
							fold(defStyle, getValue(styles), \acc, v -> removeAllStructs(acc, v))
					),
				 \stls ->
					eitherFn(
						tryExtractStructMany(stls, defStyle),
						\st -> {
							nextDistinct(dropdownValue, findiDef(values, \v : ? -> v == getStyleValueFn(st), -1));
							Some(st)
						},
						\ ->
							None()
					)
			),
			makeSubscribe2(dropdownValue, \v ->
				if (v >= 0)
					nextDistinct(styleB, Some(makeStyleFn(values[v])))
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v && getValue(dropdownValue) >= 0)
								Some(makeStyleFn(values[getValue(dropdownValue)]))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MDropDown(dropdownValue, "Pick a value", map(values, \v : flow -> v.structname), [])
			)
		)
	)
}

MSubStyle(name : string, defValue : [?], makeStyleFn : ([?]) -> ??, getStyleValueFn : (??) -> [?], subStyles : (DynamicBehaviour<[?]>) -> [Material],
	styles : DynamicBehaviour<[flow]>) -> Material {
	styleValue = make(defValue);
	defStyle = makeStyleFn(defValue);
	styleB = make(if (isSome(tryExtractStruct(getValue(styles), defStyle))) Some(defStyle) else None());
	stylePresent = fselect(styleB, isSome |> FLift);

	MConstruct(
		[
			\ -> bidirectionalLink(
				styleB,
				styles,
				\st ->
					eitherFn(
						st,
						\newSt ->
							arrayPush(removeAllStructs(getValue(styles), defStyle), newSt),
						\ ->
							removeAllStructs(getValue(styles), defStyle)
					),
				 \stls ->
					eitherFn(
						tryExtractStruct(stls, defStyle),
						\st -> {
							nextDistinct(styleValue, getStyleValueFn(st));
							Some(st)
						},
						\ ->
							None()
					)
			),
			makeSubscribe2(styleValue, \v ->
				nextDistinct(styleB, Some(makeStyleFn(v)))
			)
		],
		MBaselineCols2(
			MCheckBox(
				TEmpty(),
				make(fgetValue(stylePresent)),
				[
					MOnNewValue(\v ->
						nextDistinct(
							styleB,
							if (v)
								Some(makeStyleFn(getValue(styleValue)))
							else
								None()
						)
					),
					MLabel(name)
				]
			),
			MShow(
				stylePresent,
				MFlexibleGrid(subStyles(styleValue) |> (\f -> map(f, \v -> MBorder(8., 8., 8., 8., v))) |> const, [])
			)
		)
	)
}