import material/material_ui;

opacity = 0.6;

main() {
	manager = makeMaterialManager([]);
	
	idxB = make(0);
	color = 0xFFFFFF;
	
	buttonSwitcher = \button, isLeft -> MExplicitTheme(
		button,
		const(true),
		[UpdateMaterialTheme(\theme ->
			MaterialTheme(theme with shape = MaterialShapeManager(
				theme.shape with small = setTree(theme.shape.small, "icon",
					MaterialShapeRange(
						if (isLeft) {
							MaterialShape(defaultMaterialRoundedCorner, defaultMaterialSharpCorner, defaultMaterialSharpCorner, defaultMaterialRoundedCorner)
						} else {
							MaterialShape(defaultMaterialSharpCorner, defaultMaterialRoundedCorner, defaultMaterialRoundedCorner, defaultMaterialSharpCorner)
						},
						defaultMaterialShapeApplicable,
						MaterialShapeLimit(0., 20., 0., 0.5),
						MaterialShapeLimit(0., 6., 0., 0.5)
					)
				)
			))
		)]
	);
	
	view = 
		MGroup2(
			MFrame(0.0, 0.0, [MFill(MBlack())], TFillXY()),
			MBorder4(120.0, 
				MColsA(mapi(["visibility", "visibility_off"], \iconIdx, icon -> {
					buttonSwitcher(
						MSelect(feq(idxB, iconIdx), \isSelected -> MIconButton(
							icon,
							\-> nextDistinct(idxB, iconIdx),
							concat(
								[
									FillOpacity(opacity)
								],
								if (isSelected) [
									MWhite(),
									MCircleBackground(MWhite(), 32.0),
									MIconButtonBorders(0.0, 0.0, 0.0, 0.0),
								] else [
									MRed(500),
									MIconButtonBorders(4.0, 4.0, 4.0, 4.0)
								]
							),
							[]
						)),
						iconIdx == 0
					)
				}))
				|> (\m -> MCopySize(m, \sz -> MFrame(0.0, 4., [
						Stroke(mixColors(color, black, opacity, 1. - opacity)),
						StrokeWidth(2.0)
					], sz), true)
				)
			)
		);
	
	mrender(manager, true, view);
}
