import flowutils;
import material/material_ui;

main() {

	elementsCount = 399;
	hardToRender = false;
	isSameSize = false;

	start = ref 0.;

	makeItem = \i, d -> {
		size = TSized(const(d.second));
		MGroup2(
			MCenterIn(MText(i2s(i), [MDisplay1(), MWhite()]), size),
			size
		)
		|> (\m -> MConstruct([\ -> {
				if (hardToRender) generate(0, 1000000, \j -> j * j) |> ignore;
				deferUntilNextFrameRendered(\ -> println("CONS " + i2s(i) + ",  " + d2s(timestamp() - ^start) + " ms "));
				\ -> println("DISP " + i2s(i))
			}], m))
		|> addMBackground(d.first)
	}

	data = generate(0, elementsCount, \i -> 
		Pair(MGreen(200 * (i % 4 + 1)), WidthHeight(200., 200.))
	);

	items = mapi(data, makeItem);

	additionalItem = makeItem(elementsCount, Pair(MBlue(200), WidthHeight(200., 200.)));

	itemsB = make([]);
	showText = make(true);

	showItemsFn = \ -> {
		println("START");
		start := timestamp();
		nextDistinct(showText, false);
		timer(10, \ -> nextDistinct(itemsB, items));
	};
	
	resetFn = \ -> {
		println("RESET");
		nextDistinct(itemsB, []);
		nextDistinct(showText, true);
	}

	addItemStartFn = \ -> {
		println("ADD AT START");
		start := timestamp();
		nextDistinct(itemsB, concat([additionalItem], getValue(itemsB)));
	}

	addItemEndFn = \ -> {
		println("ADD AT END");
		start := timestamp();
		nextDistinct(itemsB, concat(getValue(itemsB), [additionalItem]));
	}

	content = 
		MGroup2(
			MFlexibleGrid(itemsB, ifArrayPush([MKeepOrder()], isSameSize, MSameSize())),
			MShow(showText, MCenter(MText("EMPTY", [MHeadline()])))
		)
		|> (\m -> MScroll(m, TFillXY(), []))
		|> addMBackground(MGrey(400))
		|> MBorderLeftRight(200.)
		|> (\m -> MGroup2(m, MLines([
				MTextButton("SHOW ITEMS", showItemsFn, [], []),
				MTextButton("RESET", resetFn, [], []),
				MTextButton("ADD ITEM START", addItemStartFn, [], []),
				MTextButton("ADD ITEM END", addItemEndFn, [], []),
			])));

	mrender(makeMaterialManager([]), true, content);
}