import material/material_ui;
import pebbles/pebble_tabs;
import material/material_iscripter;
import pebbles/pebblifier;

main() {
	// update and check the branch
	manager = makeMaterialManager([defaultMaterialTheme]);
	pebbleController = makePebbleController2(manager);
	registerDispatcher(pebbleController, "home", \-> buildTestTabs(manager, pebbleController));
	mrender(manager, true, getPebblesControlledView(pebbleController));
	validateCurrentPebbleAndInitView(pebbleController, manager, makeSimplePebble("home"));
	timer(1000, \-> applyHandler("mslider", "2.5"));
	timer(2000, \-> applyHandler("mslider", "3.5"));
	timer(3000, \-> applyHandler("mtextinput", "Hello"));
	timer(4000, \-> applyHandler("mswitchcontrol", "true"));
	timer(5000, \-> applyHandler("mdropdown", "1"));
	timer(6000, \-> applyHandler("mcheckbox_first", "true"));
	timer(7000, \-> applyHandler("mradio", "2"));
	timer(8000, \-> applyHandler("mradio", "0"));
	timer(9000, \-> applyHandler("mcheckbox_first", "false"));
}

materialSet(manager : MaterialManager, pebbleController : PebbleController) -> [Pair<Material, string>] {
	strings = ["first", "second", "third"];
	radioB = make(-1);
	radioB1 = make(-1);
	inputB = make("");

	[
		Pair(MTextButton("OK", \-> openDialog(manager, pebbleController, "mtextbutton"), [], [IScriptId("mtextbutton_open")]), "mtextbutton_open"),
		Pair(MIconButton("add", \-> openDialog(manager, pebbleController, "miconbutton"), [], [IScriptId("miconbutton_open")]), "miconbutton_open"),
		Pair(MTextButton("OPEN", \-> println("openbutton"), [], [IScriptId("openbutton")]), "openbutton"),
		Pair(MIconButton("clear", \-> println("clearbutton"), [], [IScriptId("clearbutton")]), "clearbutton"),
		Pair(MIconToggle("keyboard_arrow_up", [MToggleFalseIcon("keyboard_arrow_down", [MIconSize(18.0), MGrey(700), FillOpacity(1.0)]), MGrey(700), MIconSize(18.0),FillOpacity(1.0)], [IScriptId("up")]), "up"),
		Pair(MLines(mapi(strings, \i, str -> MCheckBox(MText(str, []), make(false), [IScriptId("mcheckbox_" + str), MEnabled(const(i % 2 == 0))]))), "mcheckbox_"),
		Pair(MLines(mapi(strings, \i, str -> MRadio(MText(str, []), i, radioB, [IScriptId("mradio")]))), "mradio"),
		Pair(MLines(MRadios(radioB1, [IScriptId("mradios")], mapi(strings, \i, str -> MText(str, [])))), "mradios"),
		Pair(MDropDown(make(-1), "", strings, [IScriptId("mdropdown")]), "mdropdown"),
		Pair(MSlider(make(0.0), [IScriptId("mslider"), MSliderRange(2.0, 10.0), MWidth(200.0)]), "mslider"),
		Pair(MSwitchControl(make(false), [IScriptId("mswitchcontrol")]), "mswitchcontrol"),
		Pair(MTextInput(inputB, [MWidth(200.0), MFilterAction(println)], [IScriptId("mtextinput")]), "mtextinput"),
	];
}

markMaterial(set : Pair<Material, string>) -> Material {
	MFrame(8.0, 0.0, [Stroke(red)],
		MLines2(
			MText(set.second, []),
			MGroup2(
				MFixed(300.0, 160.0),
				MBorder(8.0, 8.0, 8.0, 8.0, set.first)
			)
		)
	);
}

buildTestTabs(manager : MaterialManager, controller : PebbleController) -> Material {
	buildPebbledTabs(
		controller,
		[
			Pair("handled", buildPrimitivesTab(manager, controller)),
			Pair("pebbled", buildPrimitivesPebbleTab(manager, controller)),
		],
		[]
	)
}

buildPrimitivesPebbleTab(manager : MaterialManager, pebbleController : PebbleController) -> Material {

	peblledSet = materialSet(manager, pebbleController);

	MPebblifier(
		MFrame(16.0, 0.0, [],
			MFlexibleGrid(
				make(map(peblledSet, markMaterial)),
				[]
			)
		),
		pebbleController,
		["mslider", "mradios", "mdropdown", "mswitchcontrol", "mtextinput", "mtextbutton_open", "mcheckbox_first"]
	)
}

buildPrimitivesTab(manager : MaterialManager, pebbleController : PebbleController) -> Material {

	peblledSet = tailFrom(materialSet(manager, pebbleController), 2);

	MFrame(16.0, 0.0, [],
		MFlexibleGrid(
			make(map(peblledSet, markMaterial)),
			[]
		)
	) |> MIscripter
}

openDialog(manager : MaterialManager, controller : PebbleController, id : string) -> void {
	close = make(false);
	ShowMDialog(
		manager,
		close,
		[
			MDialogUseFrame(),
			MDialogTitle("Hi there"),
		],
		MPebblifier(
			MLines([
				MText("We just need to say something", []),
				MCols2(TFillX(), MTextButton(_("CLOSE"), \-> {
					next(close, true);
				}, [], [IScriptId(id + "_close"), MShortcut("esc")])),
			]),
			controller,
			["mtextbutton_close"]
		) |> (\m -> MAvailable(m, MFixedX(260.0)))
	)
}