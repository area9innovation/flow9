import runtime;
import material/material_ui;

main() {
	data = generate(0, 500, \index -> Pair(i2s(index), "Some text"));
	
	tabs = MTabs([
			MTab(buildCustomTable(data), const("Custom pagination"), []),
			MTab(buildStandardTable(data), const("Standard pagination"), []),
		],
		make(1),
		[]
	);
	
	mrender(makeMaterialManager([]), true, tabs);
}

buildCustomTable(tableData : [Pair<string, string>]) -> Material {
	currentPageB = make(0);
	termsPerPage = 8;

	getPageData = \pageNum -> {
		index = pageNum * termsPerPage;
		srcLength = length(tableData);
		dstLength = if ((index + termsPerPage) > srcLength) srcLength - index else termsPerPage;

		subrange(tableData, index, dstLength);
	};

	MSelect(currentPageB, \currentPage -> {
		beginIndex = currentPage * termsPerPage;
		srcLength = length(tableData);
		endIndex = if ((beginIndex + termsPerPage) > srcLength) srcLength else beginIndex + termsPerPage;
		
		table = MDataTable(
			[
				MColumn("Number", "", 384, []),
				MColumn("Text", "", 384, []),
			],
			map(getPageData(currentPage), \rowData -> {
				
				[
					MText(rowData.first, []),
					MText(rowData.second, []),
				]
			}),
			[MRowHeight(88.0), MNoFooter()]
		);
		
		MLet("table", table, MLines([
			TDisplay("table"),
			TFixed(0.0, 8.0),
			MLet("left_button", 
				MIconButton("keyboard_arrow_left", \ -> if (currentPage > 0) next(currentPageB, currentPage - 1), [], []), 
				MAvailable(
					MCols([
						TFillX(),
						MCenterYIn(MText(i2s(beginIndex + 1) + "-" + i2s(endIndex) + " of " + i2s(srcLength), [MCaption()]), TGhost("left_button")),
						TFixed(24.0, 0.0),
						TDisplay("left_button"),
						TFixed(16.0, 0.0),
						MIconButton("keyboard_arrow_right", \ -> {
								maxPage = length(tableData) / termsPerPage;

								if (currentPage < maxPage)
									next(currentPageB, currentPage + 1);
							},
							[],
							[]
						),
						TFixed(16.0, 0.0),
					]),
					TGhost("table")
				)
			),
		]))
	})
}

buildStandardTable(tableData : [Pair<string, string>]) -> Material {
	currentPage = make(5);

	MDataTable(
		[
			MColumn("Number", "", 384, []),
			MColumn("Text", "", 384, []),
		],
		map(tableData, \rowData -> {
			[
				MText(rowData.first, []),
				MText(rowData.second, []),
			]
		}),
		[
			// MRowHeight(88.0),
			MPagination(make(4), [8, 10, 20, 15]),
			MCurrentPage(currentPage),
			MPaginationAutoScaling(),
			MCondensed(true)
		]
	)
		|> (\m -> MLines2(m, MTextButton("NEXT", \ -> next(currentPage, getValue(currentPage) + 1), [], [])))
}