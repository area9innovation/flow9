import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/material_docking_ui;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	lightBackground = make(false);
	isArabicState = make(false);
	
	// Inizialize an empty docking state
	state =	makeMDockingEmptyState(mmanager, [
		MDockingEnableLoadAndStoreCache("TestUI", true),
	]);

	panelsEnable = {
			updateEnableMenu = make(false);
			filterPanels = ["Library", "Toolbar"];

			enabledT = fsubselect(state.enabled, FLift(\enA -> 
				fmerge(enA)
				//  fmerge(map(enA, \c -> getValue(enA[c])))
			 ));

				MSelect2(enabledT, updateEnableMenu, \enA, tt -> {
				// MSelect2(state.enabled, updateEnableMenu, \enA, tt -> {
// println("ENAB MENU");
					MMenu(
						MIconButton("tune", nop, [], []),
						map(filter(getValue(state.title), \tit -> !contains(filterPanels, tit)), \t -> {
							i = elemIndex(getValue(state.title), t, -1);
							MMenuSingleLine(formatString(_("Show %1 Panel"), [t]),
								concat(if (getValue(getValue(state.enabled)[i])) [MPrimaryAction(MIcon("done", [MBlue(800)]))] else [], [
									MOnClick(\ -> {
										// reverseBehaviour(enA[i]);
										reverseBehaviour(getValue(state.enabled)[i]);
										reverseBehaviour(updateEnableMenu);
									}), 
									MCustomTextStyle([MGrey(600)])
								])
							)
						}), [MMenuIndent()]
					)
				})

				

		};

	customRed = [
		MDPanelContent(
			MText("red",[MWhite()])
				|> (\t -> MCenterIn(t, TFillXY()))
				|> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, 0.0, 0.0, [MFill(MRed(600))], tr), false))
		)
	];

	customYellow= [
		MDPanelContent(
				MText("yellow",[MGrey(900)])
				// |> (\t -> MCenterIn(t, TFixed(210.0, 400.0)))
				|> (\t -> MCenterIn(t, TFillXY()))
				|> (\t -> MCopySize(t, \tr -> TRounded(0.0, 0.0, 0.0, 0.0,  [MFill(MYellow(400))], tr), false))
		)
	];

	// customPanel4 = [
	// 	MDockingPanelCustomItem(
	// 			MDockingArea(true, state, "mobileDock", 200, [/*MDockingBottomLines(), MDAreaDontScroll()*/MDPanelDontResize()]),
	// 		WidthHeight(240.0, 400.0), []
	// 	)
	// ];

	// toolbarCustom = [
	// 	MDockingPanelCustomItem(
	// 		MMenuPanel(
	// 			[
	// 				MIcon("notifications", []) |> MBorderRight(12.0),
	// 				MIcon("person", []) |> MBorderRight(12.0),
	// 				MIcon("group", []) |> MBorderRight(12.0),
	// 				MIcon("poll", []) |> MBorderRight(12.0),
	// 				MIcon("public", [])
	// 			],
	// 			[MHeight(48.), /*MMenuPanelBackground(toolbarBgColor)*/]
	// 		),
	// 		WidthHeight(48.0, 400.0),
	// 		[]
	// 	)
	// ];

	// toolbarCustom2 = [
	// 	MDockingPanelCustomItem(
	// 		MText("400 x 48",[MGrey(900)])
	// 			|> (\t -> MCenterIn(t, TFixed(100.0, 48.0)))
	// 			|> (\t -> MCopySize(t, \tr ->  TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MAmber(400))], tr), false)),
	// 		WidthHeight(48.0, 100.0), []
	// 	)
	// ];

	// toolbarCustomB = [
	// 	MDockingPanelCustomItem(
	// 		MText("400 x 48",[MGrey(900)])
	// 			// |> (\t -> MCenterIn(t, TFixed(100.0, 48.0)))
	// 			|> (\t -> MCenterIn(t, TFillXY())),
	// 			// |> (\t -> MCopySize(t, \tr ->  TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MBlue(400))], tr), false)),
	// 		WidthHeight(48.0, 100.0), []
	// 	)
	// ];

	PanelCustomButtonsA = [
		MDPanelCustomButton("sync", "A Custom Button",  nop, [/*MGrey(900)*/]),
	];

	r = 8.0;
	addTxt = \s : string, st : [MTextStyle] -> MText(s, st) |> (\t -> MCenterIn(t, TFillXY()));
	// customDark1 = [
	// 	MDockingPanelCustomItem(
	// 		MText("dark",[MWhite()])
	// 			|> (\t -> MCenterIn(t, TFillXY()))
	// 			// |> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, r, r, [MFill(MGrey(900))], tr), false))
	// 		,WidthHeight(240.0, 100.0), []
	// 	)
	// ];

	// customDark2 = [
	// 	MDockingPanelCustomItem(
	// 		MText("dark",[MWhite()])
	// 			|> (\t -> MCenterIn(t, TFillXY()))
	// 			// |> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, r, r, [MFill(MGrey(900))], tr), false))
	// 		,WidthHeight(240.0, 360.0), []
	// 	)
	// ];

	panels =
	[
		MDockingPanel("Toolbar",
			MDPanelToolbar([
				MDPanelToolbarItem("notifications", []),
				MDPanelToolbarItem("person", []),
				MDPanelToolbarItem("group", []),
				MDPanelToolbarItem("poll", []),
				MDPanelToolbarItem("public", [])
			]), 
			MDock(30, 0, 0), zeroWH, 
			[
				MDPanelEnabled(make(true)),
			// WidthHeight(48.0, 100.0), [], [
				// MDPanelForceDarkTheme(), 
				MDPanelForceHorizontalWhenMobile()
			]
		),

		// MDockingPanel("Toolbar2",
		// 	MDPanelToolbar([
		// 		MDPanelToolbarItem("person", []),
		// 		MDPanelToolbarItem("poll", []),
		// 		MDPanelToolbarItem("notifications", []),
		// 		MDPanelToolbarItem("public", []),
		// 		MDPanelToolbarItem("group", []),
		// 		MDPanelToolbarItem("android", []),
		// 		MDPanelToolbarItem("donut_small", []),
		// 		MDPanelToolbarItem("theaters", []),
		// 		MDPanelToolbarItem("mail", [])
		// 	]), 
		// 	MDock(30, 0, 1), zeroWH, 
		// 	[
		// 		// MDPanelEnabled(make(false)),

		// 		MDPanelAllowedGroups([]),
		// 	// WidthHeight(48.0, 100.0), [], [
		// 		MDPanelForceDarkTheme(), 
		// 		// MDPanelForceHorizontalWhenMobile()
		// 	]
		// ),



		MDockingPanel("Mobile1",
			// customRed,
			MDPanelContent(addTxt("resizable", [])), 
			MDock(-1, 0, 2), 
			WidthHeight(240.0, 100.0), [
				MDPanelExpanded(make(false)),

				MDPanelIcon("folder_open"),
				MDPanelPosition(make(Point(550.0, 100.0))),
				// MDPanelForceDarkTheme(), 
			]
		),
		MDockingPanel("Mobile2",
			// customYellow,
			MDPanelContent(addTxt("resizable", [])), 
			MDock(-1, 0, 2),
			WidthHeight(240.0, 100.0), 
			[
				MDPanelEnabled(make(false)),

				// MDPanelIcon("folder_open"),
				// MDPanelForceDarkTheme(), 
				MDPanelPosition(make(Point(750.0, 172.0))),
			]
		),


		MDockingPanel("Panel1",
			MDPanelContent(addTxt("resizable", [])),
			MDock(10, 0, 0),
			WidthHeight(240.0, 100.0),
			[
				MDPanelExpanded(make(true)),
				MDPanelIcon("devices"),
				// MDPanelForceDarkTheme(), 
				// MDPanelDontResize(),
				MDPanelShowCloseBtn()
			]
		),
		MDockingPanel("Panel2",
			MDPanelContent(addTxt("resizable", [])),
			MDock(10, 0, 1),
			WidthHeight(240.0, 100.0),
			[
				// MDPanelEnabled(make(false)),

				// MDPanelIcon("devices"),
				// MDPanelForceDarkTheme(), 
				// MDPanelDontResize(),
				MDPanelShowCloseBtn()
			]
		),


		// MDockingPanel("Panel3",
		// 	MDPanelContent(addTxt("resizable", [])),
		// 	MDock(20, 0, 0),
		// 	WidthHeight(240.0, 100.0),
		// 	[
		// 		// MDPanelEnabled(make(false)),

		// 		// MDPanelIcon("devices"),
		// 		MDPanelForceDarkTheme(), 
		// 		// MDPanelDontResize(),
		// 		MDPanelShowCloseBtn(),
		// 		MDPanelBackground(MYellow(100), MGreen(700)),
		// 		MDPanelTopbarBackground(MYellow(200), MGreen(800)),
		// 		MDPanelTitleColor(MBlue(700), MYellow(500))
		// 	]
		// ),


		MDockingPanel("Panel4",
			MDPanelContent(addTxt("dock everywhere", [])),
			MDock(20, 0, 1),
			WidthHeight(240.0, 100.0),
			[
				MDPanelExpanded(make(false)),
				// MDPanelForceDarkTheme(), 

				// MDPanelIcon("devices"),
				// MDPanelDontResize(),
				MDPanelCustomButtons(PanelCustomButtonsA),
				MDPanelShowCloseBtn()
			]
		),

		MDockingPanel("Panel5",
			MDPanelContent(addTxt("light", [])),
			MDock(20, 0, 2),
			WidthHeight(240.0, 100.0),
			[
				MDPanelEnabled(make(false)),

				// MDPanelForceLightTheme(),
				// MDPanelIcon("devices"),
				// MDPanelDontResize(),
				MDPanelShowCloseBtn(),

				
			]
		),

		MDockingPanel("Panel6",
			MDPanelContent(addTxt("dark", [])),
			MDock(20, 0, 3),
			WidthHeight(240.0, 100.0),
			[
				// MDPanelEnabled(make(false)),

				// MDPanelIcon("devices"),
				// MDPanelForceDarkTheme(), 
				// MDPanelDontResize(),
				MDPanelShowCloseBtn()
			]
		),

		
		// MDockingPanel("Fixed",
		// 	MDPanelContent(addTxt("don't resize", [])),
		// 	MDock(20, 0, 0),
		// 	WidthHeight(240.0, 100.0),
		// 	[
		// 		MDPanelIcon("dvr"),
		// 		MDPanelExpanded(make(true)),
		// 		MDPanelDontResize(),

		// 		MDPanelShowCloseBtn(), 
		// 		MDPanelForceDarkTheme(),
		// 		// MDPanelHideExpanderBtn(),

		// 		// MDockingDontCollapsePanel()
		// 	]
		// ),
	];
	
	layout1 =
		MSelect(mmanager.white, \w ->
		MLines([

			MDockingArea(false, state, 10, [
				MDAreaGroupName("B"),
			]),	

			MScroll(
				MCols([

					MDockingArea(true, state, 30, [
						MDAreaGroupName("A"),
						MDAreaExpandLastPanel(),
					]),

					MDContent(
						state,
						TRectangle([MFill(if (w) MGrey(600) else MGrey(700))], TFillXY()),
						// TRectangle([MFill(if (w) MCustomColor(0x121212) else MGrey(700))], TFillXY()),
						[]
					),

					MDockingArea(true, state, 40, [
						MDAreaGroupName("A"),
						MDockingRightCols(),
						// MDAreaHideSideExpander(),
						// MDAreaBackground(MYellow(300), MGreen(900))
					]),

				]),
				TFillXY(), [TScrollDontHandle()]
			),
			MDockingArea(false, state, 20, [
				MDAreaGroupName("B"),
				MDAreaExpandLastPanel(),
				MDockingBottomLines(),
			]),
		])
	);

	app = 
		MAppStructure([
			MAppBar(MToolbar(
				make(false),
				MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
				[
					MSwitchControl(lightBackground, [MOnOffText("DARK", "LIGHT"), MWhite()]), 	// debug use
					// MSwitchControl(isArabicState, [MOnOffText("Arabic", "English"), MWhite()]),	// debug use
					MTooltip(
						MTextButton("Save Layout",\ -> {
								setMDockingStateKeyValue(state) |> ignore;
								showMSnackbar(mmanager, "Layout Saved", []);

							},
							[MGrey(900)],
							[]
						),
						MText("Save UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					MTooltip(
						MTextButton("Reset Layout",\ -> {
								removeMDockingStateKeyValue(state);
								showMSnackbar(mmanager, "Cache deleted, please refresh browser page", []);
							},
							[MButtonRaised(), MWhite()],
							[]
						),
						MText("Delete stored UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					panelsEnable
				],
				[MItemsColor(getToolbarItemsColor(mmanager))]
			)),
			MContent(
				// MDockingUI(state, panels, layout1, [MDockingMobileOffset(Point(292.0, 16.0))]),

				makeMDEditorUI(
					"Test_UI",
					state,
					MEmpty(),
					makeMDockingLayoutFnTLRB(		
						MDArea(30, [MDAreaGroupName("B")]),
						MDArea(10, [MDAreaGroupName("A")]),
						MDArea(20, [MDAreaGroupName("A")]),
						MDArea(40, [MDAreaGroupName("B")]),
						[]
					),
					panels,
					[
						MDockingMobileOffset(Point(292.0, 16.0)),
					]
				)

			)
		], [])
			// Debug use
			|> (\f -> MConstruct([
				makeSubscribe(lightBackground, \w -> {
					nextDistinct(mmanager.white, !w);
				}),
				makeSubscribe(isArabicState, \isArabic -> {
					if (isArabic) setLang("ar") else setLang("en");
				})
			], f));

	

	mrender(mmanager, true, app);
}