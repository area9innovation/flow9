import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/material_docking_ui;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	lightBackground = make(false);
	isArabicState = make(false);
	
	// Inizialize an empty docking state
	state =	makeMDockingEmptyStateWithKey("TestUI", mmanager, [
		MDockingEnableLoadAndStoreCache(true)
	]);

	panelsEnable = \st : MDockingState -> {
			updateEnableMenu = make(false);
			filterPanels = ["Library", "Toolbar"];

				MSelect(updateEnableMenu, \tt ->
					MMenu(
						MIconButton("tune", nop, [], []),
						map(filter(getValue(st.title), \tit -> !contains(filterPanels, tit)), \t -> {
							i = elemIndex(getValue(st.title), t, -1);
							MMenuSingleLine("Show " + getValue(st.title)[i] + " panel",
								concat(if (getValue(getValue(st.enabled)[i])) [MPrimaryAction(MIcon("done", [MBlue(800)]))] else [],
								[MOnClick(\ -> {next(getValue(st.enabled)[i], !getValue(getValue(st.enabled)[i]));
										next(updateEnableMenu, !getValue(updateEnableMenu));
									}), MCustomTextStyle([MGrey(900)])]
								)
							)
						}), [MMenuIndent()]
					)
				)

		};

	customRed = [
		MDockingPanelCustomItem(
			MText("red",[MWhite()])
				|> (\t -> MCenterIn(t, TFillXY()))
				|> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, 0.0, 0.0, [MFill(MRed(600))], tr), false)),
			WidthHeight(240.0, 96.0), []
		)
	];

	customYellow= [
		MDockingPanelCustomItem(
				MText("yellow",[MGrey(900)])
				// |> (\t -> MCenterIn(t, TFixed(210.0, 400.0)))
				|> (\t -> MCenterIn(t, TFillXY()))
				|> (\t -> MCopySize(t, \tr -> TRounded(0.0, 0.0, 0.0, 0.0,  [MFill(MYellow(400))], tr), false)),
			WidthHeight(210.0, 400.0), []
		)
	];

	customPanel4 = [
		MDockingPanelCustomItem(
				MDockingArea(true, state, "mobileDock", 200, [/*MDockingBottomtLines(), MDockingDontScroll()*/MDockingDontResize()]),
			WidthHeight(240.0, 400.0), []
		)
	];

	toolbarCustom = [
		MDockingPanelCustomItem(
			MMenuPanel(
				[
					MIcon("notifications", []) |> MBorderRight(12.0),
					MIcon("person", []) |> MBorderRight(12.0),
					MIcon("group", []) |> MBorderRight(12.0),
					MIcon("poll", []) |> MBorderRight(12.0),
					MIcon("public", [])
				],
				[MHeight(48.), /*MMenuPanelBackground(toolbarBgColor)*/]
			),
			WidthHeight(48.0, 400.0),
			[]
		)
	];

	toolbarCustom2 = [
		MDockingPanelCustomItem(
			MText("400 x 48",[MGrey(900)])
				|> (\t -> MCenterIn(t, TFixed(96.0, 48.0)))
				|> (\t -> MCopySize(t, \tr ->  TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MAmber(400))], tr), false)),
			WidthHeight(48.0, 96.0), []
		)
	];

	toolbarCustomB = [
		MDockingPanelCustomItem(
			MText("400 x 48",[MGrey(900)])
				// |> (\t -> MCenterIn(t, TFixed(96.0, 48.0)))
				|> (\t -> MCenterIn(t, TFillXY())),
				// |> (\t -> MCopySize(t, \tr ->  TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MBlue(400))], tr), false)),
			WidthHeight(48.0, 96.0), []
		)
	];

	PanelCustomButtonsA = [
		MDockingCustomButton("sync", "Change Theme",  \ -> reverseBehaviour(lightBackground), [/*MGrey(900)*/]),
	];

	r = 8.0;
	addTxt = \s : string, mc : MColor -> MText(s,[mc]) |> (\t -> MCenterIn(t, TFillXY()));
	customDark1 = [
		MDockingPanelCustomItem(
			MText("dark",[MWhite()])
				|> (\t -> MCenterIn(t, TFillXY()))
				// |> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, r, r, [MFill(MGrey(900))], tr), false))
			,WidthHeight(240.0, 96.0), []
		)
	];

	customDark2 = [
		MDockingPanelCustomItem(
			MText("dark",[MWhite()])
				|> (\t -> MCenterIn(t, TFillXY()))
				// |> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, r, r, [MFill(MGrey(900))], tr), false))
			,WidthHeight(240.0, 360.0), []
		)
	];

	mobileItems =
	[
		MDockingPanel("Mobile1",
			// customRed,
			[MDockingPanelCustomItem(addTxt("resizable", MWhite()), WidthHeight(240.0, 96.0), [])], 
			MDock(-1, 0, 2), [], [
				MDPanelIcon("folder_open"),
				MDPanelPosition(make(Point(550.0, 100.0))),
				MDockingForceDarkTheme(), 
			]
		),
		MDockingPanel("Mobile2",
			// customYellow,
			[MDockingPanelCustomItem(addTxt("resizable", MWhite()), WidthHeight(240.0, 96.0), [])], 
			MDock(-1, 0, 2), [], [
				// MDPanelIcon("folder_open"),
				MDockingForceDarkTheme(), 
				MDPanelPosition(make(Point(750.0, 172.0))),
			]
		),
		MDockingPanel("Panel1",
			[MDockingPanelCustomItem(addTxt("resizable", MWhite()), WidthHeight(240.0, 96.0), [])],
			MDock(10, 0, 1),
			["A", "B"], [
				MDPanelIcon("devices"),
				MDockingForceDarkTheme(), 
				// MDockingDontResize(),
				MDockingDisableButton()
			]
		),
		MDockingPanel("Panel2",
			[MDockingPanelCustomItem(addTxt("resizable", MWhite()), WidthHeight(240.0, 96.0), [])],
			MDock(10, 0, 1),
			["A", "B"], [
				// MDPanelIcon("devices"),
				MDockingForceDarkTheme(), 
				// MDockingDontResize(),
				MDockingDisableButton()
			]
		),
		// MDockingPanel("Panel3",
		// 	[MDockingPanelCustomItem(addTxt("toolbar", MWhite()), WidthHeight(240.0, 96.0), [])],
		// 	MDock(30, 0, 0),
		// 	["A", "B"], [
		// 		// MDPanelIcon("devices"),
		// 		MDockingForceDarkTheme(), 
		// 		// MDockingDontResize(),
		// 		MDockingDisableButton(),
		// 		MDPDontShowDockedTopBar()
		// 	]
		// ),
		MDockingPanel("Panel4",
			[MDockingPanelCustomItem(addTxt("dock everywhere", MWhite()), WidthHeight(240.0, 96.0), [])],
			MDock(20, 0, 1),
			[], [
				// MDPanelIcon("devices"),
				MDockingForceDarkTheme(), 
				// MDockingDontResize(),
				MDockingCustomButtons(PanelCustomButtonsA),
				MDockingDisableButton()
			]
		),
		MDockingPanel("Fixed",
			[MDockingPanelCustomItem(addTxt("don't resize", MWhite()), WidthHeight(240.0, 96.0), [])], 
			MDock(20, 0, 0),
			["A"], [
				MDPanelIcon("dvr"),
				MDPanelExpanded(make(true)),
				MDockingDontResize(),
				MDockingDisableButton(), 
				MDockingForceDarkTheme(), 
			]
		),
	];
	
	layout1 =
		MSelect(mmanager.white, \w ->
		MGroup2(
			// TRectangle([MFill(if (w) MGrey(600) else MGrey(700))], TFillXY()),
			TRectangle([MFill(if (w) MCustomColor(0x121212) else MGrey(700))], TFillXY()),
			MLines([
				// MDockingArea(false, state, "B", 30, [
				// ]),	
				MScroll(
					MCols([
						MDockingArea(true, state, "A", 10, [
							MDockingColFillLast(),
						]),	
						TFillXY(),
						MDockingArea(true, state,  "A", 20, [
							MDockingRightCols(),
						]),
					]),
					TFillXY(), [TScrollDontHandle()]
				),
				// MDockingArea(false, state, "B", 40, [
				// 		MDockingBottomtLines(),
				// 	]),
			])
		)
	);

	app = 
		MAppStructure([
			MAppBar(MToolbar(
				make(false),
				MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
				[
					// MSwitchControl(lightBackground, [MOnOffText("DARK", "LIGHT"), MWhite()]), 	// debug use
					// MSwitchControl(isArabicState, [MOnOffText("Arabic", "English"), MWhite()]),	// debug use
					MTooltip(
						MTextButton("Delete Cache",\ -> {
								removeMDockingStateKeyValue(state);
							},
							[MGrey(900)],
							[]
						),
						MText("Delete stored UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					MTooltip(
						MTextButton("Store Cache",\ -> {
								setMDockingStateKeyValue(state) |> ignore
							},
							[MButtonRaised(), MWhite()],
							[]
						),
						MText("Save UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					panelsEnable(state)
				],
				[MItemsColor(getToolbarItemsColor(mmanager))]
			)),
			MContent(
				MDockingUI(state, mobileItems, layout1, [MDockingMobileOffset(Point(292.0, 16.0))]),
			)
		], [])
			|> (\f -> MConstruct([
				makeSubscribe2(lightBackground, \w -> {
					nextDistinct(mmanager.white, !w);
				}),
				makeSubscribe2(isArabicState, \isArabic -> {
					if (isArabic) setLang("ar") else setLang("en");
				})
			], f));

	

	mrender(mmanager, true, app);
}