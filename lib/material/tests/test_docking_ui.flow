import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/docking_ui;
import ds/treeutils;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	lightBackground = make(false);
	isArabicState = make(false);

	enable1 = make(true);
	enable2 = make(false);
	dynamicAreaItems = make([]);
	dynamicPanelItems = make([]);

	// Inizialize an empty docking state
	state =	makeMDockingEmptyState(mmanager, [
		MDockingEnableLoadAndStoreCache("TestUI", true),
		MDEditorContentBackground(MGrey(300), MGrey(300)),
		MDMobileOffset(Point(320.0, 320.0)),
		// Workspaces
		MDWorkspaceRenameDefault("Classic"),
		// NOTE: How to add custom workspaces: material_docking_styles.flow
		MDAddCustomWorkspaces([
			// MDWorkspace(
			// 	"Compact",
			// 	"{\"DockingAreas\":{\"Top\":{\"areaId\":10,\"visible\":true,\"accordion\":false},\"Right\":{\"areaId\":30,\"visible\":true,\"accordion\":true},\"Left\":{\"areaId\":20,\"visible\":true,\"accordion\":false},\"Bottom\":{\"areaId\":40,\"visible\":false,\"accordion\":false}},\"Panels\":{\"0\":{\"title\":\"User Panel\",\"areaId\":-1,\"colId\":0,\"rowId\":0,\"x\":344,\"y\":172,\"w\":240,\"h\":140,\"mobileW\":240,\"mobileH\":140,\"dockedW\":240,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"1\":{\"title\":\"User Panel 2\",\"areaId\":-1,\"colId\":0,\"rowId\":1,\"x\":344,\"y\":131,\"w\":240,\"h\":140,\"mobileW\":240,\"mobileH\":140,\"dockedW\":240,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"2\":{\"title\":\"User Panel 3\",\"areaId\":-1,\"colId\":0,\"rowId\":2,\"x\":392,\"y\":416,\"w\":480,\"h\":480,\"mobileW\":480,\"mobileH\":480,\"dockedW\":480,\"dockedH\":480,\"(enabled)\":true,\"visible\":false,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":false},\"3\":{\"title\":\"User Panel 4\",\"areaId\":-1,\"colId\":0,\"rowId\":3,\"x\":428,\"y\":464,\"w\":360,\"h\":360,\"mobileW\":360,\"mobileH\":360,\"dockedW\":360,\"dockedH\":360,\"(enabled)\":false,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":false},\"4\":{\"title\":\"User Panel 5\",\"areaId\":-1,\"colId\":0,\"rowId\":4,\"x\":343,\"y\":89,\"w\":480,\"h\":480,\"mobileW\":480,\"mobileH\":480,\"dockedW\":480,\"dockedH\":480,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"5\":{\"title\":\"Menu Toolbar\",\"areaId\":10,\"colId\":0,\"rowId\":5,\"x\":500,\"y\":560,\"w\":24,\"h\":24,\"mobileW\":24,\"mobileH\":24,\"dockedW\":24,\"dockedH\":24,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":false},\"6\":{\"title\":\"System Tools\",\"areaId\":10,\"colId\":1,\"rowId\":6,\"x\":536,\"y\":608,\"w\":48,\"h\":240,\"mobileW\":48,\"mobileH\":240,\"dockedW\":48,\"dockedH\":240,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":false},\"7\":{\"title\":\"Extra Tools\",\"areaId\":10,\"colId\":1,\"rowId\":7,\"x\":572,\"y\":656,\"w\":48,\"h\":96,\"mobileW\":48,\"mobileH\":96,\"dockedW\":48,\"dockedH\":96,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":true},\"8\":{\"title\":\"Settings\",\"areaId\":10,\"colId\":1,\"rowId\":8,\"x\":608,\"y\":704,\"w\":48,\"h\":48,\"mobileW\":48,\"mobileH\":48,\"dockedW\":48,\"dockedH\":48,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":true},\"9\":{\"title\":\"Vertical Buttons\",\"areaId\":20,\"colId\":0,\"rowId\":9,\"x\":644,\"y\":752,\"w\":48,\"h\":240,\"mobileW\":48,\"mobileH\":240,\"dockedW\":48,\"dockedH\":240,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":false},\"10\":{\"title\":\"Bug Button\",\"areaId\":20,\"colId\":0,\"rowId\":10,\"x\":680,\"y\":800,\"w\":48,\"h\":48,\"mobileW\":48,\"mobileH\":48,\"dockedW\":48,\"dockedH\":48,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":true},\"11\":{\"title\":\"Button Right\",\"areaId\":40,\"colId\":0,\"rowId\":11,\"x\":716,\"y\":848,\"w\":44,\"h\":44,\"mobileW\":44,\"mobileH\":44,\"dockedW\":44,\"dockedH\":44,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":true},\"12\":{\"title\":\"Button Left\",\"areaId\":40,\"colId\":0,\"rowId\":12,\"x\":752,\"y\":896,\"w\":44,\"h\":44,\"mobileW\":44,\"mobileH\":44,\"dockedW\":44,\"dockedH\":44,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":true,\"endAligned\":false},\"13\":{\"title\":\"Library Panel 5\",\"areaId\":20,\"colId\":1,\"rowId\":13,\"x\":788,\"y\":944,\"w\":280,\"h\":140,\"mobileW\":280,\"mobileH\":140,\"dockedW\":280,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"14\":{\"title\":\"Library Panel 4\",\"areaId\":20,\"colId\":1,\"rowId\":14,\"x\":824,\"y\":992,\"w\":280,\"h\":140,\"mobileW\":280,\"mobileH\":140,\"dockedW\":280,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"15\":{\"title\":\"Library Panel 3\",\"areaId\":20,\"colId\":1,\"rowId\":15,\"x\":860,\"y\":1040,\"w\":280,\"h\":140,\"mobileW\":280,\"mobileH\":140,\"dockedW\":280,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"16\":{\"title\":\"Library Panel 2\",\"areaId\":20,\"colId\":1,\"rowId\":16,\"x\":896,\"y\":1088,\"w\":280,\"h\":140,\"mobileW\":280,\"mobileH\":140,\"dockedW\":280,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"17\":{\"title\":\"Library Panel\",\"areaId\":20,\"colId\":1,\"rowId\":17,\"x\":932,\"y\":1136,\"w\":280,\"h\":140,\"mobileW\":280,\"mobileH\":140,\"dockedW\":280,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false},\"18\":{\"title\":\"Menu Panel 1\",\"areaId\":30,\"colId\":0,\"rowId\":18,\"x\":968,\"y\":1184,\"w\":320,\"h\":140,\"mobileW\":320,\"mobileH\":140,\"dockedW\":320,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":true,\"sideExpanded\":false,\"endAligned\":false},\"19\":{\"title\":\"Menu Panel 2\",\"areaId\":30,\"colId\":0,\"rowId\":19,\"x\":1004,\"y\":1232,\"w\":320,\"h\":140,\"mobileW\":320,\"mobileH\":140,\"dockedW\":320,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":false,\"endAligned\":false},\"20\":{\"title\":\"Menu Panel 4\",\"areaId\":30,\"colId\":0,\"rowId\":20,\"x\":1040,\"y\":1280,\"w\":320,\"h\":140,\"mobileW\":320,\"mobileH\":140,\"dockedW\":320,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":false,\"endAligned\":false},\"21\":{\"title\":\"Menu Panel 5\",\"areaId\":30,\"colId\":0,\"rowId\":21,\"x\":1076,\"y\":1328,\"w\":320,\"h\":140,\"mobileW\":320,\"mobileH\":140,\"dockedW\":320,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":false,\"endAligned\":false},\"22\":{\"title\":\"Menu Panel 6\",\"areaId\":30,\"colId\":0,\"rowId\":22,\"x\":1112,\"y\":1376,\"w\":320,\"h\":140,\"mobileW\":320,\"mobileH\":140,\"dockedW\":320,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":false,\"endAligned\":false},\"23\":{\"title\":\"Preview Panel 2\",\"areaId\":30,\"colId\":1,\"rowId\":23,\"x\":1148,\"y\":1424,\"w\":240,\"h\":140,\"mobileW\":240,\"mobileH\":140,\"dockedW\":240,\"dockedH\":140,\"(enabled)\":true,\"visible\":true,\"expanded\":false,\"sideExpanded\":false,\"endAligned\":false},\"24\":{\"title\":\"Preview Panel 3\",\"areaId\":30,\"colId\":1,\"rowId\":24,\"x\":1184,\"y\":1472,\"w\":240,\"h\":140,\"mobileW\":240,\"mobileH\":140,\"dockedW\":240,\"dockedH\":140,\"(enabled)\":true,\"visible\":false,\"expanded\":false,\"sideExpanded\":true,\"endAligned\":false}}}"
			// )
		]),
		// MDWorkspaceSelected("Compact") // This will start editor from Compact WS when the cache is empty (so only the first time) 
	]);

	panelsEnable = {
		updateEnableMenu = make(false);
		filterPanels = ["Library", "Toolbar"];
		// NOTE: A panel can be enabled with MDPanelEnabled style, and this value is not stored in the browser's cache, but could be changed ouside the application e.g. access rights
		// When a panel is enabled could be visible or not, and this could be changed by the user through MDPanelVisible style. The value is stored in the cache and can be remembered ina  workspace
		// DO NOT ACCESS DIRECTLY THE DOCKIG STATE to change a panel's visibility, but use MDPanelVisible style
		// enabledT = fsubselect(state.enabled, FLift(\enA -> fmerge(enA)));
		enabledPanelsT = 
			fsubselect(state.panelStyle, FLift(\psA -> fmerge(map(psA, \ps -> 
				fpair(
					extractStruct(ps, MDPanelEnabled(const(true))).enabled,
					extractStruct(ps, MDPanelVisible(make(true))).visible
				)
			))));
		enabledT = fsubselect(state.panelStyle, FLift(\psA -> fmerge(map(psA, \ps -> extractStruct(ps, MDPanelEnabled(const(true))).enabled))));
		areaIdsT = fselect(state.areaStyle, FLift(\as -> getTreeKeys(as)));

		MConstruct(
			[
				\-> fconnect(
					ffiltermapi(areaIdsT, \i, aId -> {
						as = getValue(state.areaStyle);
						areaStyleA = lookupTreeDef(as, aId, []);
						if (!isSome(tryExtractStruct(areaStyleA, MDAreaVisible(make(true))))) None() else {
							areaEnable = fsubselect(state.areaEnabled, FLift(\ae -> make(lookupTreeDef(ae, aId, true))));
							areaName = lookupTreeDef(reverseTree(getValue(state.dockingAreas)), aId, "") + " Docking Area";
							Some(
								MMenuCustomLine(
									MCols2(
										MVisible(areaEnable, MIcon("done", [MBlue(800)])),
										MSelect(areaEnable, \ae -> { 
											MText(areaName, [MGrey(600)]) |> MBorderStart(12.0)
										})
									),
									[
										MOnClick(\ -> {
											next(state.areaEnabled, setTree(getValue(state.areaEnabled), aId, !fgetValue(areaEnable)));
											reverseBehaviour(updateEnableMenu);
										}),
										MTooltipText(
											const(formatString(_(if (fgetValue(areaEnable)) "Hide %1" else "Show %1"), [areaName]))
										)
									]
								)
							)
						}
					}),
					dynamicAreaItems
				),
				\-> fconnect(
						ffiltermapi(fselect2Lift(enabledT, state.enabled, \enableA, visibleA -> zip(enableA, visibleA)),\i, pair ->  unpair(pair, \enabled, enabledB -> {
						title = elementAt(getValue(state.title), i, "Title not found");
						pstyle = elementAt(getValue(state.panelStyle), i, []);
						visibleB = extractStruct(pstyle, MDPanelVisible(make(true))).visible;
						if (!contains(filterPanels, title) && enabled) {
							Some(
								MMenuCustomLine(
									MCols2(
										MVisible(enabledB, MIcon("done", [MBlue(800)])),
										MText(title, [MGrey(600)]) |> MBorderStart(12.0)
									),
								[
									MOnClick(\ -> reverseBehaviour(visibleB)),
									MTooltipText(
										const(formatString(_(if (getValue(visibleB)) "Hide %1" else "Show %1"), [title]))
									)
								]
							))
						} else None()
					})),
					dynamicPanelItems
				)
			],
			MDynamicMenu(
				MIconButton("tune", nop, [], []),
				fconcat(
					fconcat(dynamicAreaItems, const([MSeparatorLine()])),
					dynamicPanelItems
				),
				[MMenuIndent()]
			)
		) |> addMTooltip(_("Enable/Disable Settings"))
	}

	makeContent = \label: string ->  MBorder4(8.0, MParagraph(label, [MGrey(700), MSubtitle()])) |> MBorderBottom(8.0) |> MCenter;
	menuPanelW = 320.0;
	libraryPanelW = 280.0;
	libraryMsg = "\"This panel can be undocked by the handle on the top-left in its toolbar\"";
	
	// Create a docking UI with helpers fn
	dEditor = makeMDEditor(
		state,
		makeMDockingLayoutFnTLRB(
			state, 
			MCenter(MText(_("Working Area"), [MGrey(700)])),
			MDArea("Top", [MDAreaGroupName("B")]),
			MDArea("Left", [MDAreaGroupName("A"), /*MDAreaVisible(make(true))*/]),
			MDArea("Right", [MDAreaGroupName("A"), MDAreaVisible(make(true)), MDAreaAccordion(make(true), Some("Menu Panel 5"))]),
			MDArea("Bottom", [MDAreaGroupName("B"), MDAreaVisible(make(false))])
		),
		[
			// Mobile Panels
			MDPanel("User Panel", MDAreaDock("", 0), makeContent(" - - "), WidthHeight(240.0, 140.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn(), MDPanelVisible(make(true))]),
			MDPanel("User Panel 2", MDAreaDock("", 0), makeContent(" - - "), WidthHeight(240.0, 140.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn()]),
			MDPanel("User Panel 3", MDAreaDock("", 0), makeContent(" - - "), WidthHeight(480.0, 480.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn(), MDPanelVisible(make(false))]),
			MDPanel("User Panel 4", MDAreaDock("", 0), makeContent(" This panel will be disabled soon "), WidthHeight(360.0, 360.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn(),  MDPanelEnabled(enable1)]),
			MDPanel("User Panel 5", MDAreaDock("", 0), makeContent(" This panel has been enabled right now "), WidthHeight(480.0, 480.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn(), MDPanelEnabled(enable2)]),
			// Docked Panels
			MDToolbar(
				"Menu Toolbar",
				MDAreaDock("Top", 0),
				[
					MColsA([
						MTextClickable("File", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Selection", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("View", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Go", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Run", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Terminal", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Help", nop, [MCaptionColumn()], []) |> MCenterY,
						TFillX(),
						MIconButton("logout", nop, [MIconSize(16.0), MIconButtonBorder(0.0)], []) |> MCenterY
					]) |> MCenterY
				],
				[MDToolbarThickness(24.0),  MDToolbarFullSizeFixed()]
			),
			MDToolbar(
				"System Tools",
				MDAreaDock("Top", 1),
				[
					MIconButton("content_cut", nop, [], []),
					MIconButton("content_copy", nop, [], []),
					MIconButton("content_paste", nop, [], []),
					MIconButton("undo", nop, [], []),
					MIconButton("redo", nop, [], [])
				],
				[MDToolbarEndAlign(make(false)), MDPanelDontMove()]
			),
			MDToolbar(
				"Extra Tools",
				MDAreaDock("Top", 1),
				[
					MIconButton("add_to_drive", nop, [], []),
					MIconButton("addchart", nop, [], []),
				],
				[MDToolbarEndAlign(make(true))]
			),
			MDToolbar(
				"Settings",
				MDAreaDock("Top", 1),
				[
					MIconButton("settings", nop, [], []),
				],
				[MDToolbarEndAlign(make(true)), MDPanelDontMove()]
			),
			MDToolbar(
				"Vertical Buttons",
				MDAreaDock("Left", 0),
				[
					MIconButton("android", nop, [], []),
					MIconButton("donut_small", nop, [], []),
					MIconButton("theaters", nop, [], []),
					MIconButton("mail", nop, [], []),
					MIconButton("camera_roll", nop, [], []),

				],
				[MDToolbarVerticalWhenMobile()]
			),
			MDToolbar(
				"Bug Button",
				MDAreaDock("Left", 0),
				[
					MIconButton("bug_report", nop, [], []),
				],
				[MDToolbarEndAlign(make(true)), MDPanelDontMove(), MDToolbarVerticalWhenMobile()]
			),
			MDToolbar(
				"Button Right",
				MDAreaDock("Bottom", 0),
				[
					MColsA([	
						MTextButton("CANCEL", \ -> println("cancel"), [MRed(500)], [])  |> MCenterY,
						TFixed(8.0, 0.0),
						MTextButton("CONFIRM", \ -> println("confirm"), [MButtonRaised()], []) |> MCenterY,
					]) |> MBorderLeftRight(4.0) |> MCenterY
				],
				[MDToolbarThickness(44.0), MDToolbarEndAlign(make(true))]
			),
			MDToolbar(
				"Button Left",
				MDAreaDock("Bottom", 0),
				[MColsA([	
					MTextButton(">  flow9/lib/material/tests/test_docking_ui.flow", \ -> println("Open"), [MGrey(700)], [])  |> MCenterY,
				]) |> MBorderLeftRight(4.0) |> MCenterY],
				[MDToolbarThickness(44.0), MDToolbarEndAlign(make(false))]
			),
			MDPanel("Library Panel 5", MDAreaDock("Left", 1), makeContent(libraryMsg), WidthHeight(libraryPanelW, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelExpanded(make(false))]),
			MDPanel("Library Panel 4", MDAreaDock("Left", 1), makeContent(libraryMsg), WidthHeight(libraryPanelW, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelExpanded(make(false))]),
			MDPanel("Library Panel 3", MDAreaDock("Left", 1), makeContent(libraryMsg), WidthHeight(libraryPanelW, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelExpanded(make(false))]),
			MDPanel("Library Panel 2", MDAreaDock("Left", 1), makeContent("\"This panel cannot be undocked\""), WidthHeight(libraryPanelW, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelExpanded(make(true)), MDPanelDontMove()]),
			MDPanel("Library Panel", MDAreaDock("Left", 1), makeContent(libraryMsg), WidthHeight(libraryPanelW, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelExpanded(make(true))]),
			MDPanel("Menu Panel 1", MDAreaDock("Right", 0), makeContent(" \"This column act as an accordion menu\" "), WidthHeight(menuPanelW, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 2", MDAreaDock("Right", 0), makeContent(" - - "), WidthHeight(menuPanelW, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 4", MDAreaDock("Right", 0), makeContent(" - - "), WidthHeight(menuPanelW, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 5", MDAreaDock("Right", 0), makeContent(" - - "), WidthHeight(menuPanelW, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 6", MDAreaDock("Right", 0), makeContent(" - - "), WidthHeight(menuPanelW, 140.0), [MDPanelIcon("toc")/*, MDPanelDontMove()*/]),
			MDPanel("Preview Panel 2", MDAreaDock("Right", 1), makeContent(" - - "), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelShowCloseBtn(), MDPanelSideExpanded(make(false))]),
			MDPanel("Preview Panel 3", MDAreaDock("Right", 1), makeContent(" - - "), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelShowCloseBtn(), MDPanelVisible(make(false))])
		]
	);

	app = 
		MAppStructure([
			MAppBar(MToolbar(
				make(false),
				MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
				[
					// MSwitchControl(lightBackground, [MOnOffText("DARK", "LIGHT"), MWhite()]), 	// debug use
					// MSwitchControl(isArabicState, [MOnOffText("Arabic", "English"), MWhite()]),	// debug use
					MTooltip(
						makeMDWorkspaceMenuBtn(state),
						MText("Workspaces", []),
						[]
					),
					panelsEnable
				],
				[MItemsColor(getToolbarItemsColor(mmanager))]
			)),
			MContent(dEditor)
		], [])
			// Debug use
			|> (\f -> MConstruct([
				makeSubscribe(lightBackground, \w -> {
					setManagerWhite(mmanager, !w);
				}),
				makeSubscribe(isArabicState, \isArabic -> {
					if (isArabic) setLang("ar") else setLang("en");
				}),
				\-> {
						timer(5000, \ -> next(enable1, false));
						timer(8000, \ -> next(enable2, true));
						nop
					}
			], f));

	mrender(mmanager, true, app);
}