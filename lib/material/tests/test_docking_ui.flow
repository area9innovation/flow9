import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/docking_ui;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	lightBackground = make(false);
	isArabicState = make(false);
	
	// Inizialize an empty docking state
	state =	makeMDockingEmptyState(mmanager, [
		MDockingEnableLoadAndStoreCache("TestUI", true),
	]);

	panelsEnable = {
		updateEnableMenu = make(false);
		filterPanels = ["Library", "Toolbar"];
		enabledT = fsubselect(state.enabled, FLift(\enA -> fmerge(enA)));
		MSelect2(enabledT, updateEnableMenu, \enA, tt -> {
			MMenu(
				MIconButton("tune", nop, [], []),

				map(filter(getValue(state.title), \tit -> !contains(filterPanels, tit)), \t -> {
					i = elemIndex(getValue(state.title), t, -1);

					MMenuSingleLine(formatString(_(if (getValue(getValue(state.enabled)[i])) "Hide %1" else "Show %1"), [t]),
						concat(
							if (getValue(getValue(state.enabled)[i])) [MPrimaryAction(MIcon("done", [MBlue(800)]))] else [], 
							[
								MOnClick(\ -> {
									reverseBehaviour(getValue(state.enabled)[i]);
									reverseBehaviour(updateEnableMenu);
								}), 
								MCustomTextStyle([MGrey(600)])
							]
						)
					)

				}), 

				[MMenuIndent()]
			)
		})
	}

	openFileB = make(false);
	openSelectionB = make(false);

	// Create a docking UI with helpers fn
	dEditor = makeMDEditor(
		"Test_UI",
		state,
		makeMDockingLayoutFnTLRB(
			state, 
			MEmpty(),
			MDArea("Top", [MDAreaGroupName("B")]),
			MDArea("Left", [MDAreaGroupName("A")]),
			MDArea("Right", [MDAreaGroupName("A")]),
			MDArea("Bottom", [MDAreaGroupName("B")])
		),
		[
			MDToolbarCustom(
				"Menu Toolbar",
				MDAreaDock("Top", 0),
				MColsA([
					MTextClickable("File", \ -> reverseBehaviour(openFileB), [MCaptionColumn()], []) 
						|> (\m -> MMenu(m, [MMenuSingleLine("New File", []), MMenuSingleLine("Load File", []),], [MBelowButton(), MOpenMenu(openFileB)])),
					MTextClickable("Selection", \ -> reverseBehaviour(openSelectionB), [MCaptionColumn()], [])
						|> (\m -> MMenu(m, [MMenuSingleLine("Undo", []), MMenuSingleLine("Redo", []),], [MBelowButton(), MOpenMenu(openSelectionB)])),

					MTextClickable("View", nop, [MCaptionColumn()], []),
					MTextClickable("Go", nop, [MCaptionColumn()], []),
					MTextClickable("Run", nop, [MCaptionColumn()], []),
					MTextClickable("Terminal", nop, [MCaptionColumn()], []),
					MTextClickable("Help", nop, [MCaptionColumn()], [])
						|> (\m -> MMenu(m, [MMenuSingleLine("Welcome", []), MMenuSingleLine("Getting Started", []), MMenuSingleLine("Documentation", []),], [MBelowButton(), MOpenMenu(openSelectionB)])),
					TFillX(),
					MIconButton("logout", nop, [MIconSize(16.0), MIconButtonBorder(0.0)], []) |> MCenterY
					// MTextClickable("Login", nop, [MCaptionColumn()], [])

				])

				,
				true,
				[MDPanelToolbarThickness(24.0), MDPanelDontMove()]
			),
			MDToolbar(
				"System Tools",
				MDAreaDock("Top", 1),
				[
					MIconButton("content_cut", nop, [], []),
					MIconButton("content_copy", nop, [], []),
					MIconButton("content_paste", nop, [], []),
					MIconButton("undo", nop, [], []),
					MIconButton("redo", nop, [], [])
				],
				[MDPanelEndAlign(make(false)), MDPanelDontMove()]
			),
			MDToolbar(
				"Vertical Buttons",
				MDAreaDock("Left", 0),
				[
					MIconButton("android", nop, [], []),
					MIconButton("donut_small", nop, [], []),
					MIconButton("theaters", nop, [], []),
					MIconButton("mail", nop, [], []),
					MIconButton("camera_roll", nop, [], []),

				],
				[MDPanelVerticalToolbarWhenMobile()]
			),
			MDToolbar(
				"Bug Button",
				MDAreaDock("Left", 0),
				[
					MIconButton("bug_report", nop, [], []),
				],
				[ MDPanelEndAlign(make(true)), MDPanelDontMove(), MDPanelVerticalToolbarWhenMobile()]
			),
			MDToolbar(
				"Extra Tools",
				MDAreaDock("Top", 1),
				[
					MIconButton("add_to_drive", nop, [], []),
					MIconButton("addchart", nop, [], []),
				],
				[MDPanelEndAlign(make(true))]
			),
			MDToolbarCustom(
				"Button Right",
				MDAreaDock("Bottom", 0),
				MColsA([	
					MTextButton("CANCEL", \ -> println("cancel"), [MRed(500)], [])  |> MCenterY,
					TFixed(8.0, 0.0),
					MTextButton("CONFIRM", \ -> println("confirm"), [MButtonRaised()], []) |> MCenterY,
				]) |> MBorderLeftRight(4.0) |> MCenterY,
				false,
				[MDPanelToolbarThickness(48.0), MDPanelEndAlign(make(true))]
			),
			MDToolbar(
				"Settings",
				MDAreaDock("Top", 1),
				[
					MIconButton("settings", nop, [], []),
				],
				[MDPanelEndAlign(make(true)), MDPanelDontMove()]
			),

			MDPanel("Library Panel", MDAreaDock("Left", 1), MEmpty(), WidthHeight(240.0, 100.0), [MDPanelIcon("collections_bookmark"), MDPanelShowCloseBtn()]),
			MDPanel("Properties Panel", MDAreaDock("Right", 0), MEmpty(), WidthHeight(240.0, 100.0), [MDPanelShowCloseBtn()]),
			// MDPanel("Properties Panel", MDAreaDock("Right", 0), TRectangle([MFill(MRed(500))], TFixed(340.0, 200.0)), WidthHeight(240.0, 100.0), [MDPanelShowCloseBtn()]),
			MDPanel("User Panel", MDAreaDock("", 0), MEmpty(), WidthHeight(240.0, 100.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn()])
		],
		[MDockingMobileOffset(Point(292.0, 16.0))]
	);


	app = 
		MAppStructure([
			MAppBar(MToolbar(
				make(false),
				MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
				[
					MSwitchControl(lightBackground, [MOnOffText("DARK", "LIGHT"), MWhite()]), 	// debug use
					// MSwitchControl(isArabicState, [MOnOffText("Arabic", "English"), MWhite()]),	// debug use
					MTooltip(
						MTextButton("Save Layout",\ -> {
								setMDockingStateKeyValue(state) |> ignore;
								showMSnackbar(mmanager, "Layout Saved", []);

							},
							[MGrey(900)],
							[]
						),
						MText("Save UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					MTooltip(
						MTextButton("Reset Layout",\ -> {
								removeMDockingStateKeyValue(state);
								showMSnackbar(mmanager, "Cache deleted, please refresh browser page", []);
							},
							[MButtonRaised(), MWhite()],
							[]
						),
						MText("Delete stored UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					panelsEnable
				],
				[MItemsColor(getToolbarItemsColor(mmanager))]
			)),
			MContent(dEditor)
		], [])
			// Debug use
			|> (\f -> MConstruct([
				makeSubscribe(lightBackground, \w -> {
					nextDistinct(mmanager.white, !w);
				}),
				makeSubscribe(isArabicState, \isArabic -> {
					if (isArabic) setLang("ar") else setLang("en");
				})
			], f));

	mrender(mmanager, true, app);
}