import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/material_docking_ui;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	search = make("");
	rightExpander = make(true);

	// Inizialize state with panel's info
	state =	MDockingState(
		mmanager,					// manterial manager,
		make(zeroPoint),		// mouseXy,
		make([]), 					// title,
		make([]), 					// panelIcon,
		make([[]]),					// content,
		make([[]]),     			// dock,
		make([[]]),					// group,
		make([]),					// size,
		make([]),					// mobileSize,
		make([]),					// dockedSize,
		make([make(Point(100.0, 0.0)), make(Point(150.0, 100.0)), make(Point(180.0, 250.0)), make(Point(50.0, 100.0)), make(Point(900.0, 100.0)), make(Point(600.0, 50.0)),
			make(zeroPoint), make(zeroPoint), make(zeroPoint), make(zeroPoint), make(zeroPoint), make(zeroPoint)]),			// positions,
		make([make(true), make(true), make(true), make(true), make(true), make(true),make(true), make(true), make(true), make(true), make(true)]),				// enabled,
		make([make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true)]),     		// expanded,
		make([make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true), make(true)]),     		// sideexpanded,
		make([]),					// colorScheme
		make([[]]),					// dockingStyle,
		"",							// keyGroupName
	);

	// Create panel's content
	fileTools = [
			MDockingPanelButtonsItem("content_cut", "cut", []),
			MDockingPanelButtonsItem("content_copy", "copy", []),
			MDockingPanelButtonsItem("content_paste", "paste", []),
			MDockingPanelButtonsItem("undo", "undo", []),
			MDockingPanelButtonsItem("redo", "redo", []),
			MDockingPanelButtonsItem("save", "save", []),
		];

	panelsEnable = {
			updateEnableMenu = make(false);
			filterPanels = ["Library", "Toolbar"];

				MSelect(updateEnableMenu, \tt ->
					MMenu(
						MIconButton("tune", nop, [], []),
						map(filter(getValue(state.title), \tit -> !contains(filterPanels, tit)), \t -> {
							i = elemIndex(getValue(state.title), t, -1);
							MMenuSingleLine("Show " + getValue(state.title)[i] + " panel",
								concat(if (getValue(getValue(state.enabled)[i])) [MPrimaryAction(MIcon("done", [MBlue(800)]))] else [],
								[MOnClick(\ -> {next(getValue(state.enabled)[i], !getValue(getValue(state.enabled)[i]));
										next(updateEnableMenu, !getValue(updateEnableMenu));
									})]
								)
							)
						}), [MMenuIndent()]
					)
				)

		};

	enableTools = [
		MDockingPanelCustomItem(panelsEnable, WidthHeight(48.0, 48.0), [])
	];

	personTools = [
		MDockingPanelToolbarItem("notifications", []),
		MDockingPanelToolbarItem("person", []),
		MDockingPanelToolbarItem("group", []),
		MDockingPanelToolbarItem("poll", []),
		MDockingPanelToolbarItem("public", []),
	];

	favTools = [MDockingPanelToolbarItem("star", [])];

	imageTools = [
		MDockingPanelToolbarItem("add_a_photo", []),
		MDockingPanelToolbarItem("texture", []),
		MDockingPanelToolbarItem("transform", []),
		MDockingPanelToolbarItem("view_comfy", []),
		MDockingPanelToolbarItem("tune", []),
		MDockingPanelToolbarItem("exposure", []),
		MDockingPanelToolbarItem("style", []),
		MDockingPanelToolbarItem("grid_on", []),
		MDockingPanelToolbarItem("tonality", []),
		MDockingPanelToolbarItem("timelapse", []),
	];


	searchTools = [
			MTextInput(make("Search?"), [], []),
			MIconButton("search", nop, [], [])
		];

	panel0 = [
			MDockingPanelButtonsItem("home", "home", []),
			MDockingPanelButtonsItem("folder", "folder", []),
			MDockingPanelButtonsItem("cloud", "cloud", []),
			MDockingPanelButtonsItem("file_upload", "file upload", []),
			MDockingPanelButtonsItem("file_download", "file download", []),
			MDockingPanelButtonsItem("attachment", "attachment", []),
			MDockingPanelButtonsItem("mail", "mail", []),
		];

	panel1 = [
			MDockingPanelButtonsItem("directions", "directions", []),
			MDockingPanelButtonsItem("directions_bike", "bike", []),
			MDockingPanelButtonsItem("directions_boat", "boat", []),
			MDockingPanelButtonsItem("directions_bus", "bus", []),
			MDockingPanelButtonsItem("directions_car", "car", []),
			MDockingPanelButtonsItem("directions_railway", "railway", []),
			MDockingPanelButtonsItem("directions_run", "run", []),
			MDockingPanelButtonsItem("directions_subway", "subway", []),
			MDockingPanelButtonsItem("directions_walk", "walk", []),
		];

	customPanel = [
		MDockingPanelCustomItem(
			MCenter(MText("custom panel",[])),
			WidthHeight(240.0, 400.0), []
		)
	];

	customPanel2 = [
		MDockingPanelCustomItem(
			// MCols([
					// MDockingArea(true, state, "mobileDock", 100, [MDockingDontShowSeparators(), MDockingRightCols()]),

				// MLines([

					// MDockingArea(false, state, "mobileDock", 101, [MDockingDontShowSeparators(), MDockingBottomtLines()]),
					// MCenterIn(MText("mobile dockable panel",[]), TFillXY()),
					// MDockingArea(false, state, "mobileDock", 102, [MDockingDontShowSeparators()]),

				// ]),
					// MDockingArea(true, state, "mobileDock", 103, [MDockingDontShowSeparators()]),

			// ]),

			MCenter(MText("bottom panel",[])),
			WidthHeight(196.0, 400.0), []
		)
	];

	customPanel3 = [
		MDockingPanelCustomItem(
				MDockingArea(true, state, "mobileDock", 200, [/*MDockingBottomtLines(), MDockingDontScroll()*/MDockingDontResize()]),
			WidthHeight(240.0, 400.0), []
		)
	];


	panel3 = [
			MDockingPanelToolbarItem("home", []),
			MDockingPanelToolbarItem("folder", []),
			MDockingPanelToolbarItem("cloud", []),
			MDockingPanelToolbarItem("file_upload", []),
			MDockingPanelToolbarItem("file_download", []),
			MDockingPanelToolbarItem("attachment", []),
			MDockingPanelToolbarItem("mail", []),
		];

	panel4 = [
			MDockingPanelButtonsItem("usb", "usb", []),
			MDockingPanelButtonsItem("bluetooth", "bluetooth", []),
	];

	panel5 = [
		MDockingPanelButtonsItem("battery_charging_full", "battery", []),
		MDockingPanelButtonsItem("gps_fixed", "gps", []),
		MDockingPanelButtonsItem("network_wifi", "network", []),
	];

	// Setting up mobile panels
	// Note:  -When panels are docked into MDockingLines by default they are flipped in horizontal position
	//		  -When panels are docked into MDockingCols by default they are flipped in vertical position
	//		  -When panels are floating by default they are flipped in vertical position, if you need to flip them you can use MDockingMobileHorizontal style

	mobileCustomButtonsA = [
		MDockingCustomButton("phone_android", "this is a tooltip", nop, []),
		MDockingCustomButton("file_download", "this is a tooltip", nop, [])
	];

	deviceCustomButtonsA = [
		MDockingCustomButton("sync", "sync", nop, [MBlue(400)]),
		MDockingCustomButton("keyboard", "this is a tooltip", nop, [])
	];

	mapsCustomButtonsA = [
		MDockingCustomButton("add_location", "this is a tooltip", nop, []),
		MDockingCustomButton("flight", "this is a tooltip", nop, [])
	];

	mobileItems =
	[
		MDockingPanel("File", "folder_open", panel0, 10, 0, ["A", "mobileDock"], [MDockingDontResize()]),
		MDockingPanel("Maps", "map", panel1, -1, 1, ["A", "mobileDock"], [MDockingCustomButtons(mapsCustomButtonsA)]),
		MDockingPanel("Bottom 1", "folder_shared", customPanel2, -1, 0, ["A", "B"], [MDockingDisableButton(), MDockingFillSpace()]),
		MDockingPanel("Mobile", "folder_shared", panel0, -1, 0, ["A"], [MDockingDisableButton(), MDockingCustomButtons(mobileCustomButtonsA)]),
		MDockingPanel("Device1", "developer_mode", panel4, 20, 0, ["A"], [MDockingForceDarkTheme(), MDockingDisableButton()]),
		MDockingPanel("Device2", "devices", panel5, 20, 0, ["A"], [MDockingCustomButtons(deviceCustomButtonsA), MDockingForceDarkTheme(), MDockingDisableButton()]),
		MDockingPanel("Device3", "dvr", panel5, 20, 0, ["A"], [MDockingDisableButton(), MDockingCustomButtons(deviceCustomButtonsA), MDockingForceDarkTheme(), MDockingDisableButton()]),
		MDockingPanel("", "", imageTools, 30, 0, ["A" , "B"], [MDockingDisableButton()]),
		MDockingPanel("", "", personTools, 30, 0, ["A", "B"], [MDockingMobileHorizontal(), MDockingDisableButton()]),
		MDockingPanel("", "", enableTools, 30, 0, ["B"], [MDockingDisableButton()]),
	];

	// Setting up the layout using MDockingArea
	layout =
	MSelect(mmanager.white, \w ->
		MGroup2(
			TRectangle([MFill(if (w) MGrey(600) else MGrey(700))], TFillXY()),

			MLines([
				MDockingArea(false, state, "B", 30, [MDockingDontShowSeparators(), MDockingDontResize()]),
				MScroll(
					MCols([
						MDockingArea(true, state, "A", 10, []),
						MScroll(
							MCenterIn(
								MGroup2(
									TRectangle([MFill(if (w) MGrey(50) else MGrey(900))], TFixed(400.0, 300.0)),
									MBorder(8.0, 8.0, 8.0, 8.0, MParagraph("Science, my boy, is made up of mistakes, but they are mistakes which it is useful to make, because they lead little by little to the truth.", [MSubheading(), MWidth(400.)]))
								),
								TFillXY()
							),
							TFillXY(), [/*TScrollDontHandle()*/]
						),
						MDockingArea(true, state,  "A", 20, [MDockingRightCols()/*, MDockingFillSpace()*/]),
					]),
					TFillXY(), [TScrollDontHandle()]
				),
				MDockingArea(false, state, "B", 40, [MDockingBottomtLines(), MDockingDontScroll()]),
			]),
		)

	);

	app = MAppStructure([
				MAppBar(MToolbar(
					make(false),
					MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
					[
						MTextInput(search, [MWidth(200.), getToolbarItemsColor(mmanager), MCustomTextStyle([getToolbarItemsColor(mmanager)]), MLabel("Search?")], []),
						MIconButton("search", \ -> println("Searching " + getValue(search)), [getToolbarItemsColor(mmanager)], [])
						|> (\f -> MCenterY(f)),
						MIconButton("more_horiz", \ -> next(rightExpander, !getValue(rightExpander)), [getToolbarItemsColor(mmanager)], [])
						|> (\f -> MCenterY(f)),
					],
					[MItemsColor(getToolbarItemsColor(mmanager))]
				)),
				MContent(MDockingUI(state, mobileItems, layout, []))
	], []);

	mrender(mmanager, true, app);
}