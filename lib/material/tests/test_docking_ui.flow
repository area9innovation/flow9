import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/material_docking_ui;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	lightBackground = make(false);
	isArabicState = make(false);

	// Inizialize an empty docking state
	state =	makeMDockingEmptyStateWithKey("TestUI", mmanager, []);

	panelsEnable = {
			updateEnableMenu = make(false);
			filterPanels = ["Library", "Toolbar"];

				MSelect(updateEnableMenu, \tt ->
					MMenu(
						MIconButton("tune", nop, [], []),
						map(filter(getValue(state.title), \tit -> !contains(filterPanels, tit)), \t -> {
							i = elemIndex(getValue(state.title), t, -1);
							MMenuSingleLine("Show " + getValue(state.title)[i] + " panel",
								concat(if (getValue(getValue(state.enabled)[i])) [MPrimaryAction(MIcon("done", [MBlue(800)]))] else [],
								[MOnClick(\ -> {next(getValue(state.enabled)[i], !getValue(getValue(state.enabled)[i]));
										next(updateEnableMenu, !getValue(updateEnableMenu));
									}), MCustomTextStyle([MGrey(900)])]
								)
							)
						}), [MMenuIndent()]
					)
				)

		};

	customPanel = [
		MDockingPanelCustomItem(
			MText("240 x 96",[MGrey(900)])
				|> (\t -> MCenterIn(t, TFixed(240.0, 96.0)))
				|> (\t -> MCopySize(t, \tr ->  TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MGreen(400))], tr), false)),
			WidthHeight(240.0, 96.0), []
		)
	];

	customPanel2 = [
		MDockingPanelCustomItem(
			MCenter(MText("fixed size - 240 x 130",[])),
			WidthHeight(240.0, 130.0), []
		)
	];

	customSquare = [
		MDockingPanelCustomItem(
			MText("red",[MWhite()])
				|> (\t -> MCenterIn(t, TFillXY()))
				|> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, 0.0, 0.0, [MFill(MRed(600))], tr), false)),
			WidthHeight(120.0, 120.0), []
		)
	];

	customYellow= [
		MDockingPanelCustomItem(
				MText("280 x 400",[MGrey(900)])
				|> (\t -> MCenterIn(t, TFixed(280.0, 400.0)))
				|> (\t -> MCopySize(t, \tr -> TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MYellow(300))], tr), false)),
			WidthHeight(280.0, 400.0), []
		)
	];

	customPanel4 = [
		MDockingPanelCustomItem(
				MDockingArea(true, state, "mobileDock", 200, [/*MDockingBottomtLines(), MDockingDontScroll()*/MDockingDontResize()]),
			WidthHeight(240.0, 400.0), []
		)
	];

	toolbarCustom = [
		MDockingPanelCustomItem(
			MMenuPanel(
				[
					MIcon("notifications", []) |> MBorderRight(12.0),
					MIcon("person", []) |> MBorderRight(12.0),
					MIcon("group", []) |> MBorderRight(12.0),
					MIcon("poll", []) |> MBorderRight(12.0),
					MIcon("public", [])
				],
				[MHeight(48.), /*MMenuPanelBackground(toolbarBgColor)*/]
			),
			WidthHeight(48.0, 400.0),
			[]
		)
	];

	toolbarCustom2 = [
		MDockingPanelCustomItem(
			MText("400 x 48",[MGrey(900)])
				|> (\t -> MCenterIn(t, TFixed(96.0, 48.0)))
				|> (\t -> MCopySize(t, \tr ->  TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MAmber(400))], tr), false)),
			WidthHeight(48.0, 96.0), []
		)
	];

	toolbarCustomB = [
		MDockingPanelCustomItem(
			MText("400 x 48",[MGrey(900)])
				// |> (\t -> MCenterIn(t, TFixed(96.0, 48.0)))
				|> (\t -> MCenterIn(t, TFillXY())),
				// |> (\t -> MCopySize(t, \tr ->  TRounded(16.0, 16.0, 16.0, 16.0, [MFill(MBlue(400))], tr), false)),
			WidthHeight(48.0, 96.0), []
		)
	];

	deviceCustomButtonsA = [
		MDockingCustomButton("sync", "Change Theme",  \ -> reverseBehaviour(lightBackground), [MGrey(900)]),
	];

	r = 8.0;
	addTxt = \s : string, mc : MColor -> MText(s,[mc]) |> (\t -> MCenterIn(t, TFillXY()));
	customDark1 = [
		MDockingPanelCustomItem(
			MText("dark",[MWhite()])
				|> (\t -> MCenterIn(t, TFillXY()))
				// |> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, r, r, [MFill(MGrey(900))], tr), false))
			,WidthHeight(240.0, 96.0), []
		)
	];

	customDark2 = [
		MDockingPanelCustomItem(
			MText("dark",[MWhite()])
				|> (\t -> MCenterIn(t, TFillXY()))
				// |> (\t -> MCopySize(t, \tr ->  TRounded(0.0, 0.0, r, r, [MFill(MGrey(900))], tr), false))
			,WidthHeight(240.0, 360.0), []
		)
	];

	mobileItems =
	[
		MDockingPanel("Fixed", "dvr", 
			[MDockingPanelCustomItem(addTxt("\"resizable\"", MGrey(900)),WidthHeight(240.0, 96.0), [])],
			10, 0, ["A", "B"], [
				// MDockingDontResize(), 
				MDockingDisableButton(), 
			]
		),
		MDockingPanel("File fixed", "folder_open", 
			[MDockingPanelCustomItem(addTxt("\"resizable\"", MGrey(900)),WidthHeight(240.0, 360.0), [])],
			10, 0, 
			["A", "B"], [
				MDPanelExpanded(make(false)),

			// MDockingDontResize()
			]
		),
		MDockingPanel("Mobile", "folder_open", customSquare, -1, 0, ["A", "B"], [
			MDPanelPosition(make(Point(750.0, 130.0))),
			MDockingCustomButtons(deviceCustomButtonsA),
		]),
		MDockingPanel("Device1", "devices", 
			[MDockingPanelCustomItem(addTxt("\"resizable\"", MWhite()),WidthHeight(240.0, 360.0), [])],
			20, 0, 
			["A", "B"], [
				MDockingForceDarkTheme(), 
				// MDockingDontResize(),
				MDockingDisableButton()
			]
		),
		MDockingPanel("Fixed", "dvr", 
			[MDockingPanelCustomItem(addTxt("\"don't resize\"", MWhite()),WidthHeight(240.0, 96.0), [])],
			20, 0, ["A"], [
				MDPanelExpanded(make(true)),
				MDockingDontResize(),
				MDockingDisableButton(), 
				MDockingForceDarkTheme(), 
			]
		),
		MDockingPanel("Toolbar Fixed", "", toolbarCustomB, 30, 0, ["A", "B"], [MDPanelEnabled(make(true)), MDockingDontResize()]), 
		MDockingPanel("Material Toolbar", "", toolbarCustom, 30, 0, ["A", "B"], [MDPanelEnabled(make(true))]),
		// MDockingPanel("Toolbar3", "", toolbarCustomB, 40, 0, ["A", "B"], [MDPanelEnabled(make(true))]),
		// MDockingPanel("Toolbar3", "", toolbarCustom2, 40, 0, ["A", "B"], [MDPanelEnabled(make(true))]),
	];

	// Setting up the layout using MDockingArea
	layout =
	MSelect(mmanager.white, \w ->
		MGroup2(
			TRectangle([MFill(if (w) MGrey(600) else MGrey(700))], TFillXY()),

			MLines([

				// MDockingArea(false, state, "B", 30, [
				// 	MDockingDontResize()
				// 	]),


				MScroll(
					MCols([

						// MDockingArea(true, state, "A", 10, [
						// 	MDockingColFillLast(),
						// 	// MDockingDontScroll()
						// ]),
						MScroll(
							MCenterIn(
								MGroup2(
									TRectangle([MFill(if (w) MGrey(50) else MGrey(900))], TFixed(400.0, 300.0)),
									MBorder(8.0, 8.0, 8.0, 8.0, MParagraph("Science, my boy, is made up of mistakes, but they are mistakes which it is useful to make, because they lead little by little to the truth.", [MSubheading(), MWidth(400.)]))
								),
								TFillXY(),
							),
							TFillXY(), [/*TScrollDontHandle()*/]
						),

						MDockingArea(true, state,  "A", 20, [
							MDockingRightCols(),
							// MDockingDontResize()
							// MDockingDontScroll()
						]),

					]),
					TFillXY(), [TScrollDontHandle()]
				),

				// MDockingArea(false, state, "B", 40, [MDockingBottomtLines(), MDockingDontScroll()]),
			]),
		)

	);


	app = 
		MAppStructure([
			MAppBar(MToolbar(
				make(false),
				MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
				[
					MSwitchControl(lightBackground, [MOnOffText("DARK", "LIGHT"), MWhite()]),
					MSwitchControl(isArabicState, [MOnOffText("Arabic", "English"), MWhite()]),
					MTooltip(
						MTextButton("Delete UI",\ -> {
								removeMDockingStateKeyValue(state);
							},
							[MGrey(900)],
							[]
						),
						MText("Delete stored UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					MTooltip(
						MTextButton("Save UI",\ -> {
								setMDockingStateKeyValue(state) |> ignore
							},
							[MButtonRaised(), MWhite()],
							[]
						),
						MText("Save UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					panelsEnable
				],
				[MItemsColor(getToolbarItemsColor(mmanager))]
			)),
			MContent(MDockingUI(state, mobileItems, layout, [MDockingMobileOffset(Point(292.0, 16.0))]))
		], [])
			|> (\f -> MConstruct([
				makeSubscribe2(lightBackground, \w -> {
					nextDistinct(mmanager.white, !w);
				}),
				makeSubscribe2(isArabicState, \isArabic -> {
					if (isArabic) setLang("ar") else setLang("en");
				})
			], f));

	mrender(mmanager, true, app);
}