import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/docking_ui;
import ds/treeutils;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	lightBackground = make(false);
	isArabicState = make(false);
	
	// Inizialize an empty docking state
	state =	makeMDockingEmptyState(mmanager, [
		MDockingEnableLoadAndStoreCache("TestUI", true),
		MDMobileOffset(Point(320.0, 320.0))
	]);

	panelsEnable = {
		updateEnableMenu = make(false);
		filterPanels = ["Library", "Toolbar"];
		enabledT = fsubselect(state.enabled, FLift(\enA -> fmerge(enA)));

		MSelect3(enabledT, updateEnableMenu, state.areaStyle, \enA, tt, as -> {
			areaStylesA = getTreeValues(as);
			areaIdsA = getTreeKeys(as);
			areaEnabledT = fmerge(map(areaStylesA, \asA -> extractStruct(asA, MDAreaEnable(make(true))).enable));

			panelsEnableA =
				map(filter(getValue(state.title), \tit -> !contains(filterPanels, tit)), \t -> {
						i = elemIndex(getValue(state.title), t, -1);
							MMenuCustomLine(
								MCols2(
									MVisible(getValue(state.enabled)[i], MIcon("done", [MBlue(800)])),
									MText(t, [MGrey(600)]) |> MBorderStart(12.0)
								),
								[
									MOnClick(\ -> {
										reverseBehaviour(getValue(state.enabled)[i]);
										reverseBehaviour(updateEnableMenu);
									}),
									MTooltipText(
										const(formatString(_(if (getValue(getValue(state.enabled)[i])) "Hide %1" else "Show %1"), [t]))
									)
								]
						)
					});

			areasEnableA =
				filtermap(areaIdsA, \aId -> {
					areaStyleA = lookupTreeDef(as, aId, []);
					if (!isSome(tryExtractStruct(areaStyleA, MDAreaEnable(make(true))))) None() else {
						areaEnable = extractStruct(areaStyleA, MDAreaEnable(make(true))).enable;
						areaName = lookupTreeDef(reverseTree(getValue(state.dockingAreas)), aId, "") + " Docking Area";
						Some(
							MMenuCustomLine(
								MCols2(
									MVisible(areaEnable, MIcon("done", [MBlue(800)])),
									MSelect(areaEnable, \ae -> { 
										MText(areaName, [MGrey(600)]) |> MBorderStart(12.0)
									})
								),
								[
									MOnClick(\ -> {
										reverseBehaviour(areaEnable);
										reverseBehaviour(updateEnableMenu);
									}),
									MTooltipText(
										const(formatString(_(if (getValue(areaEnable)) "Hide %1" else "Show %1"), [areaName]))
									)
								]
							)
						)
					}
				});
			MSelect(areaEnabledT, \__ -> 
				MMenu(
					MIconButton("tune", nop, [], []),
					concatA([
						areasEnableA,
						if (areasEnableA != []) [MSeparatorLine()] else [],
						panelsEnableA
					]), 
					[]
				)
			)
		})
	}

	makeContent = \ ->  MText(" - - ", [MGrey(600), MSubheading()]) |> MBorderBottom(8.0) |> MCenter;
	
	// Create a docking UI with helpers fn
	dEditor = makeMDEditor(
		state,
		makeMDockingLayoutFnTLRB(
			state, 
			MEmpty(),
			MDArea("Top", [MDAreaGroupName("B"), MDAreaEnable(make(true))]),
			MDArea("Left", [MDAreaGroupName("A")]),
			MDArea("Right", [MDAreaGroupName("A"), MDAreaEnable(make(true)), MDAreaAccordion(make(true), Some("Menu Panel 2"))]),
			MDArea("Bottom", [MDAreaGroupName("B"), MDAreaEnable(make(false))])
		),
		[
			// Mobile Panels
			MDPanel("User Panel", MDAreaDock("", 0), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn()]),
			MDPanel("User Panel 2", MDAreaDock("", 0), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn()]),
			MDPanel("User Panel 3", MDAreaDock("", 0), makeContent(), WidthHeight(480.0, 480.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn(), MDPanelEnabled(make(false))]),
			// Docked Panels
			MDToolbar(
				"Menu Toolbar",
				MDAreaDock("Top", 0),
				[
					MColsA([
						MTextClickable("File", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Selection", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("View", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Go", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Run", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Terminal", nop, [MCaptionColumn()], []) |> MCenterY,
						MTextClickable("Help", nop, [MCaptionColumn()], []) |> MCenterY,
						TFillX(),
						MIconButton("logout", nop, [MIconSize(16.0), MIconButtonBorder(0.0)], []) |> MCenterY
					]) |> MCenterY
				],
				[MDToolbarThickness(24.0),  MDToolbarFullSizeFixed()]
			),
			MDToolbar(
				"System Tools",
				MDAreaDock("Top", 1),
				[
					MIconButton("content_cut", nop, [], []),
					MIconButton("content_copy", nop, [], []),
					MIconButton("content_paste", nop, [], []),
					MIconButton("undo", nop, [], []),
					MIconButton("redo", nop, [], [])
				],
				[MDToolbarEndAlign(make(false)), MDPanelDontMove()]
			),
			MDToolbar(
				"Extra Tools",
				MDAreaDock("Top", 1),
				[
					MIconButton("add_to_drive", nop, [], []),
					MIconButton("addchart", nop, [], []),
				],
				[MDToolbarEndAlign(make(true))]
			),
			MDToolbar(
				"Settings",
				MDAreaDock("Top", 1),
				[
					MIconButton("settings", nop, [], []),
				],
				[MDToolbarEndAlign(make(true)), MDPanelDontMove()]
			),
			MDToolbar(
				"Vertical Buttons",
				MDAreaDock("Left", 0),
				[
					MIconButton("android", nop, [], []),
					MIconButton("donut_small", nop, [], []),
					MIconButton("theaters", nop, [], []),
					MIconButton("mail", nop, [], []),
					MIconButton("camera_roll", nop, [], []),

				],
				[MDToolbarVerticalWhenMobile()]
			),
			MDToolbar(
				"Bug Button",
				MDAreaDock("Left", 0),
				[
					MIconButton("bug_report", nop, [], []),
				],
				[ MDToolbarEndAlign(make(true)), MDPanelDontMove(), MDToolbarVerticalWhenMobile()]
			),
			MDToolbar(
				"Button Right",
				MDAreaDock("Bottom", 0),
				[
					MColsA([	
						MTextButton("CANCEL", \ -> println("cancel"), [MRed(500)], [])  |> MCenterY,
						TFixed(8.0, 0.0),
						MTextButton("CONFIRM", \ -> println("confirm"), [MButtonRaised()], []) |> MCenterY,
					]) |> MBorderLeftRight(4.0) |> MCenterY
				],
				[MDToolbarThickness(44.0), MDToolbarEndAlign(make(true))]
			),
			MDToolbar(
				"Button Left",
				MDAreaDock("Bottom", 0),
				[MColsA([	
					MTextButton(">  flow9/lib/material/tests/test_docking_ui.flow", \ -> println("Open"), [MGrey(700)], [])  |> MCenterY,
				]) |> MBorderLeftRight(4.0) |> MCenterY],
				// false,
				[MDToolbarThickness(44.0), MDToolbarEndAlign(make(false))]
			),
			MDPanel("Library Panel 5", MDAreaDock("Left", 1), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), /*MDPanelShowCloseBtn(),*/ MDPanelExpanded(make(false))]),
			MDPanel("Library Panel 4", MDAreaDock("Left", 1), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), /*MDPanelShowCloseBtn(),*/ MDPanelExpanded(make(false))]),
			MDPanel("Library Panel 3", MDAreaDock("Left", 1), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), /*MDPanelShowCloseBtn(),*/ MDPanelExpanded(make(false))]),
			MDPanel("Library Panel 2", MDAreaDock("Left", 1), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), /*MDPanelShowCloseBtn(),*/ MDPanelExpanded(make(false))]),
			MDPanel("Library Panel", MDAreaDock("Left", 1), makeContent(), WidthHeight(240.0, 140.0), [
				MDPanelIcon("collections_bookmark"), /*MDPanelShowCloseBtn(),*/ MDPanelExpanded(make(false)), MDPanelDontMove(),
			]),
			MDPanel("Menu Panel 1", MDAreaDock("Right", 0), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 2", MDAreaDock("Right", 0), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 4", MDAreaDock("Right", 0), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 5", MDAreaDock("Right", 0), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("toc"), MDPanelDontMove()]),
			MDPanel("Menu Panel 6", MDAreaDock("Right", 0), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("toc")/*, MDPanelDontMove()*/]),
			MDPanel("Preview Panel 2", MDAreaDock("Right", 1), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelShowCloseBtn(), MDPanelSideExpanded(make(false))]),
			MDPanel("Preview Panel 3", MDAreaDock("Right", 1), makeContent(), WidthHeight(240.0, 140.0), [MDPanelIcon("collections_bookmark"), MDPanelShowCloseBtn(), MDPanelEnabled(make(false))])
		]
	);


	app = 
		MAppStructure([
			MAppBar(MToolbar(
				make(false),
				MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
				[
					MSwitchControl(lightBackground, [MOnOffText("DARK", "LIGHT"), MWhite()]), 	// debug use
					// MSwitchControl(isArabicState, [MOnOffText("Arabic", "English"), MWhite()]),	// debug use
					makeMDWorkspaceMenuBtn(state),
					panelsEnable
				],
				[MItemsColor(getToolbarItemsColor(mmanager))]
			)),
			MContent(dEditor)
		], [])
			// Debug use
			|> (\f -> MConstruct([
				makeSubscribe(lightBackground, \w -> {
					nextDistinct(mmanager.white, !w);
				}),
				makeSubscribe(isArabicState, \isArabic -> {
					if (isArabic) setLang("ar") else setLang("en");
				})
			], f));

	mrender(mmanager, true, app);
}