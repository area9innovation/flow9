import material/material;
import material/material_manager;
import material/material2tropic;
import material/extra/docking_ui/docking_ui;

main() {
	mmanager = makeMaterialManager([makeMaterialTheme(true, MBlue(500), MPinkA(500))]);

	lightBackground = make(false);
	isArabicState = make(false);
	
	// Inizialize an empty docking state
	state =	makeMDockingEmptyState(mmanager, [
		MDockingEnableLoadAndStoreCache("TestUI", true),
	]);

	panelsEnable = {
		updateEnableMenu = make(false);
		filterPanels = ["Library", "Toolbar"];
		enabledT = fsubselect(state.enabled, FLift(\enA -> fmerge(enA)));
		MSelect2(enabledT, updateEnableMenu, \enA, tt -> {
			MMenu(
				MIconButton("tune", nop, [], []),
				map(filter(getValue(state.title), \tit -> !contains(filterPanels, tit)), \t -> {
					i = elemIndex(getValue(state.title), t, -1);
					MMenuSingleLine(formatString(_("Show %1 Panel"), [t]),
						concat(if (getValue(getValue(state.enabled)[i])) [MPrimaryAction(MIcon("done", [MBlue(800)]))] else [], [
							MOnClick(\ -> {
								reverseBehaviour(getValue(state.enabled)[i]);
								reverseBehaviour(updateEnableMenu);
							}), 
							MCustomTextStyle([MGrey(600)])
						])
					)
				}), [MMenuIndent()]
			)
		})
	};

	PanelCustomButtonsA = [
		MDPanelCustomButton("sync", "A Custom Button",  nop, [/*MGrey(900)*/]),
	];

	r = 8.0;
	addTxt = \s : string, st : [MTextStyle] -> MText(s, st) |> (\t -> MCenterIn(t, TFillXY()));

	panels =
	[
		MDockingPanel("Toolbar",
			MDPanelToolbar([
				MDPanelToolbarItem("notifications", []),
				MDPanelToolbarItem("person", []),
				MDPanelToolbarItem("group", []),
				MDPanelToolbarItem("poll", []),
				MDPanelToolbarItem("public", [])
			]), 
			MDock(30, 0, 0), zeroWH, 
			[
				MDPanelEnabled(make(true)),
				MDPanelVerticalToolbarWhenMobile()
			]
		),
		MDockingPanel("Toolbar2",
			MDPanelToolbar([
				MDPanelToolbarItem("person", []),
				MDPanelToolbarItem("poll", []),
				MDPanelToolbarItem("notifications", []),
				MDPanelToolbarItem("public", []),
				MDPanelToolbarItem("group", []),
				MDPanelToolbarItem("android", []),
				MDPanelToolbarItem("donut_small", []),
				MDPanelToolbarItem("theaters", []),
				MDPanelToolbarItem("mail", [])
			]), 
			MDock(-1, 0, 1), zeroWH, 
			[
				MDPanelAllowedGroups([]),
			]
		),
		MDockingPanel("Mobile1",
			MDPanelContent(addTxt("resizable", [])), 
			MDock(-1, 0, 2), 
			WidthHeight(240.0, 100.0), [
				MDPanelExpanded(make(false)),

				MDPanelIcon("folder_open"),
				MDPanelPosition(make(Point(550.0, 100.0))),
			]
		),
		MDockingPanel("Mobile2",
			MDPanelContent(addTxt("resizable", [])), 
			MDock(-1, 0, 2),
			WidthHeight(240.0, 100.0), 
			[
				MDPanelEnabled(make(false)),
				MDPanelPosition(make(Point(750.0, 172.0))),
			]
		),
		MDockingPanel("Panel1",
			MDPanelContent(addTxt("resizable", [])),
			MDock(10, 0, 0),
			WidthHeight(240.0, 100.0),
			[
				MDPanelExpanded(make(true)),
				MDPanelIcon("devices"),
				MDPanelShowCloseBtn()
			]
		),
		MDockingPanel("Panel2",
			MDPanelContent(addTxt("resizable", [])),
			MDock(10, 0, 1),
			WidthHeight(240.0, 100.0),
			[
				MDPanelShowCloseBtn()
			]
		),
		// MDockingPanel("Panel3",
		// 	MDPanelContent(addTxt("resizable", [])),
		// 	MDock(20, 0, 0),
		// 	WidthHeight(240.0, 100.0),
		// 	[
		// 		// MDPanelEnabled(make(false)),

		// 		// MDPanelIcon("devices"),
		// 		MDPanelForceDarkTheme(), 
		// 		// MDPanelDontResize(),
		// 		MDPanelShowCloseBtn(),
		// 		MDPanelBackground(MYellow(100), MGreen(700)),
		// 		MDPanelTopbarBackground(MYellow(200), MGreen(800)),
		// 		MDPanelTitleColor(MBlue(700), MYellow(500))
		// 	]
		// ),
		MDockingPanel("Panel4",
			MDPanelContent(addTxt("dock everywhere", [])),
			MDock(20, 0, 1),
			WidthHeight(240.0, 100.0),
			[
				MDPanelExpanded(make(false)),
				MDPanelCustomButtons(PanelCustomButtonsA),
				MDPanelShowCloseBtn()
			]
		),
		MDockingPanel("Panel5",
			MDPanelContent(addTxt("light", [])),
			MDock(20, 0, 2),
			WidthHeight(240.0, 100.0),
			[
				MDPanelEnabled(make(false)),
				MDPanelShowCloseBtn(),		
			]
		),

		MDockingPanel("Panel6",
			MDPanelContent(addTxt("dark", [])),
			MDock(20, 0, 3),
			WidthHeight(240.0, 100.0),
			[
				MDPanelShowCloseBtn()
			]
		),		
		// MDockingPanel("Fixed",
		// 	MDPanelContent(addTxt("don't resize", [])),
		// 	MDock(20, 0, 0),
		// 	WidthHeight(240.0, 100.0),
		// 	[
		// 		MDPanelIcon("dvr"),
		// 		MDPanelExpanded(make(true)),
		// 		MDPanelDontResize(),

		// 		MDPanelShowCloseBtn(), 
		// 		MDPanelForceDarkTheme(),
		// 		// MDPanelHideExpanderBtn(),

		// 		// MDockingDontCollapsePanel()
		// 	]
		// ),
	];
	
	layout1 =
		MSelect(mmanager.white, \w ->
		MLines([
			MDockingArea(false, state, 10, [
				MDAreaGroupName("B"),
			]),	
			MScroll(
				MCols([
					MDockingArea(true, state, 30, [
						MDAreaGroupName("A"),
						MDAreaExpandLastPanel(),
					]),
					MDContent(
						state,
						TRectangle([MFill(if (w) MGrey(600) else MGrey(700))], TFillXY()),
					),

					MDockingArea(true, state, 40, [
						MDAreaGroupName("A"),
						MDockingRightCols(),
						// MDAreaHideSideExpander(),
						// MDAreaBackground(MYellow(300), MGreen(900))
					]),

				]),
				TFillXY(), [TScrollDontHandle()]
			),
			MDockingArea(false, state, 20, [
				MDAreaGroupName("B"),
				MDAreaExpandLastPanel(),
				MDockingBottomLines(),
			]),
		])
	);

	dEditor = {
		// Create a docking UI without helpers fn
		// MDockingUI(state, panels, layout1, [MDockingMobileOffset(Point(292.0, 16.0))]);
		
		// Create a docking UI with helpers fn
		makeMDEditor(
			"Test_UI",
			state,
			makeMDockingLayoutFnTLRB(
				state, 
				MEmpty(),
				MDArea("Top", [MDAreaGroupName("B")]),
				MDArea("Left", [MDAreaGroupName("A")]),
				MDArea("Right", [MDAreaGroupName("A")]),
				MDArea("Bottom", [MDAreaGroupName("B")])
			),
			[
				MDToolbar(
					MDAreaDock("Top", 0),
					[
						MDPanelToolbarItem("content_cut", []),
						MDPanelToolbarItem("content_copy", []),
						MDPanelToolbarItem("content_paste", []),
						MDPanelToolbarItem("undo", []),
						MDPanelToolbarItem("redo", [])
					],
					[MDPanelHideToolbarSeparators(), MDPanelEndAlign(make(false)), MDPanelDontMove()]
				),
				MDToolbar(
					MDAreaDock("Left", 1),
					[
						MDPanelToolbarItem("person", []),
						MDPanelToolbarItem("group", []),
						MDPanelToolbarItem("poll", [])
					],
					[MDPanelHideToolbarSeparators()]
				),
				MDToolbar(
					MDAreaDock("Top", 0),
					[
						MDPanelToolbarItem("fast_rewind", []),
						MDPanelToolbarItem("play_arrow", []),
						MDPanelToolbarItem("pause", []),
						MDPanelToolbarItem("fast_forward", [])
					],
					[MDPanelHideToolbarSeparators()]
				),
				MDToolbar(
					MDAreaDock("Left", 1),
					[
						MDPanelToolbarItem("android", []),
						MDPanelToolbarItem("donut_small", []),
						MDPanelToolbarItem("theaters", []),
						MDPanelToolbarItem("mail", []),
						MDPanelToolbarItem("camera_roll", []),

					],
					[MDPanelHideToolbarSeparators(),  MDPanelEndAlign(make(true)),/* MDPanelDontMove(), */MDPanelVerticalToolbarWhenMobile()]
				),
				MDToolbar(
					MDAreaDock("Top", 0),
					[
						MDPanelToolbarItem("add_to_drive", []),
						MDPanelToolbarItem("addchart", []),
					],
					[MDPanelHideToolbarSeparators(), MDPanelEndAlign(make(true))]
				),
				MDToolbar(
					MDAreaDock("Top", 0),
					[
						MDPanelToolbarItem("settings", []),
					],
					[MDPanelEndAlign(make(true)), MDPanelDontMove()]
				),
				MDPanel("Library Panel", MDAreaDock("Left", 0), MEmpty(), WidthHeight(240.0, 100.0), [MDPanelIcon("collections_bookmark"), MDPanelShowCloseBtn()]),
				MDPanel("Properties Panel", MDAreaDock("Right", 0), MEmpty(), WidthHeight(240.0, 100.0), [MDPanelShowCloseBtn()]),
				MDPanel("User Panel", MDAreaDock("", 0), MEmpty(), WidthHeight(240.0, 100.0), [MDPanelIcon("account_circle"), MDPanelShowCloseBtn()])
			],
			[MDockingMobileOffset(Point(292.0, 16.0))]
		)
	}

	app = 
		MAppStructure([
			MAppBar(MToolbar(
				make(false),
				MCenterY(MText("MDocking UI test", [MTitle(), getToolbarItemsColor(mmanager)])),
				[
					MSwitchControl(lightBackground, [MOnOffText("DARK", "LIGHT"), MWhite()]), 	// debug use
					// MSwitchControl(isArabicState, [MOnOffText("Arabic", "English"), MWhite()]),	// debug use
					MTooltip(
						MTextButton("Save Layout",\ -> {
								setMDockingStateKeyValue(state) |> ignore;
								showMSnackbar(mmanager, "Layout Saved", []);

							},
							[MGrey(900)],
							[]
						),
						MText("Save UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					MTooltip(
						MTextButton("Reset Layout",\ -> {
								removeMDockingStateKeyValue(state);
								showMSnackbar(mmanager, "Cache deleted, please refresh browser page", []);
							},
							[MButtonRaised(), MWhite()],
							[]
						),
						MText("Delete stored UI layout in browser's cache (only JS)" , []),
						[]
					) |> MBorderRight(8.0),
					panelsEnable
				],
				[MItemsColor(getToolbarItemsColor(mmanager))]
			)),
			MContent(dEditor)
		], [])
			// Debug use
			|> (\f -> MConstruct([
				makeSubscribe(lightBackground, \w -> {
					nextDistinct(mmanager.white, !w);
				}),
				makeSubscribe(isArabicState, \isArabic -> {
					if (isArabic) setLang("ar") else setLang("en");
				})
			], f));

	mrender(mmanager, true, app);
}