import material/material2tropic;

start = ref timestamp();

main() {

	manager = makeMaterialManager([]);

	startTime = timestamp();
	hardToRender = false;

	scrollPosition = makePoint();
	scrollPositionScale = make(zeroPositionScale);
	contentWH = makeWH();
	scrollWH = makeWH();

	cont2material = \s -> {
		itemPosScale = make(zeroPositionScale);
		showItem =
			fselect3(scrollWH, itemPosScale, scrollPositionScale, \swh, ps, sps -> {
				y = ps.pos.y - sps.pos.y;
				y >= 0. && y < swh.height
			});

		// if (s == "0") fpprint("itemPosScale")(itemPosScale) |> ignore;
		if (s == "100") fpprint("showItem")(showItem) |> ignore;

		MText(s + " content", [])
		|> (\m -> MConstruct([\ -> {
			if (hardToRender) generate(0, intMax / 1024, \i -> i + 1) |> ignore;
			deferUntilNextFrameRendered(\ -> println("CONS " + s + ",  " + d2s(timestamp() - ^start) + " ms "));
			\ -> println("DISP " + s)
		}], m))
		|> (\m -> MShow(showItem, m))
		|> (\m -> MPositionScale(itemPosScale, m))
		|> MBorderLeft(-15.)
	};

	selection = make(makeSet());
	itemsLength = make(0);

	fpprint("selection")(selection);
	fpprint("itemsLength")(itemsLength);

	items =
		make(
			generate(0, 2300, \i -> MTreeNode(i2s(i), cont2material, const([]), []))
		);

	// timer(10000, \ -> {
	// 	println("UPD");
	// 	dynArrayPush(items, MTreeNode("last item", cont2material, const([]), []))
	// });

	tabContent =
		MTree(
			items,
			[
				MTreeSelection(selection),
				// MTreeLazyLoad(20, None()),
				// MTreeOrder(make([])),
				// MItemsLength(itemsLength)
			]
		)
		|> (\m -> MConstruct([\ -> {
			deferUntilNextFrameRendered(\ -> println("CONS TREE,  " + d2s(timestamp() - ^start) + " ms "));
			\ -> println("DISP TREE")
		}], m))
		|> (\m -> MScroll(m, TFillXY(), [MScrollPosition(scrollPosition), MScrollWidthHeight(contentWH, scrollWH)]))
		// |> (\m -> MPositionScale(scrollPositionScale, m))
		;

	selectedTab = make(0);
	content = MTabs(
		[
			MTab(MText("first Tab", []), const("first tab"), []),
			MTab(tabContent, const("second tab"), []),
		],
		selectedTab,
		[]
	)
	|> (\m -> MConstruct([
			makeSubscribe2(selectedTab, \__ -> start := timestamp())
		], m))
	;

	mrender(manager, true, content);

	println("time : " + d2s(timestamp() - startTime));
}