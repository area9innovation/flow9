import material/material_ui;

main() {
	manager = makeMaterialManager([]);
	setRendererType(getUrlParameterDef("renderer", "html"));

	selectedIdx = make(-1);
	fpprint("selectedIdx")(selectedIdx);

	itemsLen = s2i(getUrlParameterDef("items", "1000"));
	data = make(generate(0, itemsLen, \i -> i));
	cols = 20;
	rowsFixedFn = \v -> generate(0, cols, \i -> TFixed(40.0, 20.0));
	rowsTextFn = \v -> generate(0, cols, \i -> MDynamicText(const("Line " + i2s(v)), []));
	rowsEllipsisFn = \v -> generate(0, cols, \i -> MEllipsisText("Line " + i2s(v), []));
	rowsDropdownFn = \v -> generate(0, cols, \i -> MDropDown(make(-1), "Pick", ["One", "Two", "Three"], [
		MWidth(120.0),
		MGroups([Pair(0, "First Group"), Pair(2, "Second Group")]),
		MOutlined(),
		MCondensed(true)
	]));
	columns = generate(0, cols, \i -> MColumn("col" + i2s(i), "", 48, []));

	style = [
		// MSingleSelection(selectedIdx),
		MPaginationAutoScaling(),
		// MListSelectionEnabled(fselectLift(data, \arr -> mapi(arr, \i, __ -> const(i % 2 == 0)))),
		// TScrollEnabled(const(true)),
		// MWidthByContent(),
		MRowHeight(24.)
	];

	table = \fn : (int) -> [Material] ->
		MDynamicDataTable(
			columns,
			fselect(data, FLift(\d -> map(d, fn))),
			style
		);

	tableDomRender = \fn : (int) -> [Material] ->
		MDynamicDataTable(
			columns,
			fselect(data, FLift(\d -> map(d, fn))),
			concat(style, [MDomRender()])
		);

	tableLightWeight = \fn : (int) -> [Material] ->
		MLightweightDataTable(
			columns,
			data,
			fn,
			style
		);

	if (isUrlParameterTrue("test")) {
		timer(10000, \ -> testRenders([
			Triple("MDataTable with fixed", table(rowsFixedFn), false),
			Triple("MDomRender with fixed", tableDomRender(rowsFixedFn), true),
			Triple("MLightweightDataTable with fixed", tableLightWeight(rowsFixedFn), false),

			Triple("MDataTable with text", table(rowsTextFn), false),
			Triple("MDomRender with text", tableDomRender(rowsTextFn), true),
			Triple("MLightweightDataTable with text", tableLightWeight(rowsTextFn), false),

			Triple("MDataTable with ellipsis", table(rowsEllipsisFn), false),
			Triple("MDomRender with ellipsis", tableDomRender(rowsEllipsisFn), true),
			Triple("MLightweightDataTable with ellipsis", tableLightWeight(rowsEllipsisFn), false),

			Triple("MDataTable with dropdown", table(rowsDropdownFn), false),
			Triple("MDomRender with dropdown", tableDomRender(rowsDropdownFn), true),
			Triple("MLightweightDataTable with dropdown", tableLightWeight(rowsDropdownFn), false),
		]));
	} else {
		println("before render");
		content = MScrollBox((if (isUrlParameterTrue("light")) tableLightWeight else if (isUrlParameterTrue("dom_render")) tableDomRender else table)(rowsEllipsisFn));
		start = timestamp();
		mrender(manager, true, content);
		end = timestamp();
		println("Render time : " + d2s(end - start));
	}
}

testRenders(tuples : [Triple<string, Material, bool>]) -> void {
	manager = makeMaterialManager([]);
	if (length(tuples) > 0) {
		timer(5000, \ -> {
			setMDomRenderEnabled(tuples[0].third);
			testRender(tuples[0].first, tuples[0].second);
			testRenders(tail(tuples));
		});
	}
}

testRender(name : string, content : Material) {
	manager = makeMaterialManager([]);
	// println("before render " + name);
	start = timestamp();
	d = mrender(manager, true, MAvailable(MScrollBox(content), TFixed(4096.0, 2048.0)));
	end = timestamp();
	println(name + ": " + d2s(end - start));
	d();
}