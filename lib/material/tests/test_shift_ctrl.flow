import material/material;
import material/material_manager;
import material/material2tropic;

main() {
	manager = makeMaterialManager([]);

	keyb = makeTKeyBroadcast();
	shiftHeld = make(false);
	ctrlHeld = make(false);

	mat = 
		MConstruct(
			concat(
				if (isUrlParameterTrue("fix"))
					[
						/* This is how I expect it works */ 
						\ -> addKeyEventListener(
							getStage(), 
							"keydown", 
							\key: string, ctrl: bool, shift: bool, alt: bool, meta: bool, keyCode: int, preventDefault -> {
								println("---------------- keydown -------------------");
								println(key);
								println(ctrl);
								println(shift);
								println(alt);
								println(meta);
								println(keyCode);
								println("------------------------------------------");

								next(shiftHeld, shift);
								next(ctrlHeld, ctrl);
							}
						),
						\ -> addKeyEventListener(
							getStage(), 
							"keyup", 
							\key: string, ctrl: bool, shift: bool, alt: bool, meta: bool, keyCode: int, preventDefault -> {
								println("--------------- keyup ------------------");
								println(key);
								println(ctrl);
								println(shift);
								println(alt);
								println(meta);
								println(keyCode);
								println("------------------------------------------");

								next(shiftHeld, shift);
								next(ctrlHeld, ctrl);

								if (keyCode == 16) next(shiftHeld, false);
								if (keyCode == 17) next(ctrlHeld, false);
							}
						),
					]
				else /* This is how it works now */
					[
						makeSubscribe(keyb.pressed, \k -> {
							nextDistinct(shiftHeld, k.shift);
							nextDistinct(ctrlHeld, k.ctrl);
						}),
						
					],
				[
					makeSubscribe(shiftHeld, \shi -> {println("shift: " + b2s(shi))}),
					makeSubscribe(ctrlHeld, \ctr -> {println("ctrl: " + b2s(ctr))}),
				]
			),
			MInteractive(
				[
					keyb
				],
				MGroup([
					TRectangle([Fill(orange)], TSized(const(WidthHeight(400.0, 400.0)))),
					MLines([
						if (isUrlParameterTrue("fix")) MText("This is how I expect it works\n", [MHeadline()]) else MText("This is how it works now\nCompile with -- fix=true parameter to see how it should be\n", [MHeadline()]),
						MIf(shiftHeld, MText("shift pressed",[MHeadline()]), MText("shift unpressed",[MHeadline()])),
						MIf(ctrlHeld, MText("ctrl pressed",[MHeadline()]), MText("ctrl unpressed",[MHeadline()]))
			   		]),
				])
			)
		);
	mrender(manager, true, mat);
}