import flowutils;
import material/material_ui;
import tropic/tflexiblegrid;

main() {
	setRendererType("html");

	iter(
		enumFromTo(0, 100000),
		\i -> {
			println("Iteration " + i2s(i));
			testBFBlocksInfiniteLoop() |> ignore;
		}
	)
}

testBFBlocksInfiniteLoop() {
	println("Running testBFBlocksInfiniteLoop...");
	getRandomBool = \ -> random() > 0.5;
	allowNegative = getRandomBool();
	allowHugeNumbers = getRandomBool();
	allowMicroNumbers = getRandomBool();
	allowRegularNumbers = getRandomBool() || !allowHugeNumbers && !allowMicroNumbers;
	getRandom =
		if (allowNegative)
			\ ->
				if (allowRegularNumbers && random() > 0.5 || !allowHugeNumbers && !allowMicroNumbers)
					random() * 1000.0 - 1000.0 / 2.0
				else if (allowHugeNumbers && random() > 0.5 || !allowMicroNumbers)
					random() * doubleMax - doubleMax / 2.0
				else
					random() * 0.0001 - 0.0001 / 2.0
		else
			\ ->
				if (allowRegularNumbers && random() > 0.5 || !allowHugeNumbers && !allowMicroNumbers)
					random() * 1000.0
				else if (allowHugeNumbers && random() > 0.5 || !allowMicroNumbers)
					random() * doubleMax
				else
					random() * 0.0001;

	// Parameters that could potentially cause an infinite loop
	blocks = [
		BFBlock(getRandom(), getRandom()),
		BFBlock(getRandom(), getRandom()),
		BFBlock(getRandom(), getRandom()),
		BFBlock(getRandom(), getRandom()),
		BFBlock(getRandom(), getRandom()),
		BFBlock(getRandom(), getRandom()),
		BFBlock(getRandom(), getRandom()),
	];
	vertical = getRandomBool();
	par = BFParameters(
		getRandomBool(),
		getRandomBool(),
		getRandomBool(),
		vertical,
		if (random() > 0.5) None() else Some(floor(random() * 10.0) + 1),
		getRandomBool(),
		getRandomBool()
	);
	size = WidthHeight(getRandom(), getRandom());

	println("Blocks: ");
	println(blocks);
	println("Parameters: ");
	println(par);
	println("Size: ");
	println(size);

	// This should not cause an infinite loop
	state = bfFitBlocks(size, blocks, par);
	lastPoint = ref Point(0.0, 0.0);

	result = fold(tree2pairs(state.p), [], \acc : [[Point]], p : Pair<int, Pair<BFBlock, Point>> -> {
		if (length(acc) == 0) {
			[[p.second.second]];
		} else {
			lastLine = lastElement(acc, []);
			if (length(lastLine) == 0 || (if (vertical) ^lastPoint.x == p.second.second.x else ^lastPoint.y == p.second.second.y)) {
				lastPoint := p.second.second;
				replace(acc, length(acc) - 1, arrayPush(lastLine, p.second.second));
			} else {
				lastPoint := p.second.second;
				arrayPush(acc, [p.second.second]);
			}
		}
	});

	println(result);
	if (!allowNegative && !allowHugeNumbers && length(tree2pairs(state.p)) < length(blocks)) {
		println("FAIL!!!");
	}
	println("testBFBlocksInfiniteLoop passed.");
	result;
}