import material/internal/material_icons;
import material/material2tropic;
import material/material_dialog;
import material/material_ui;
import material/internal/material_toolbar;
import material/internal/material_app_structure;
import material/internal/material_card;
import material/material_snackbar;
import tropic/trender;
import ds/set;
import material/material_manager;
Person(name: string, subtitle: string, imageurl : string);
Painting(name : string, artist : string, imageurl : string);

main() {
	manager = makeMaterialManager([]);
	
	currentStepId = make(0);

	enabledStep5 = make(false);
	enabledStep6 = MEnabled(enabledStep5);
	contentTI = make("");

	content =
		// TFillXYXY(700., 400., 2000., 2000.0)
		// TFillXY()
		TFixed(594., 190.)
		|> (\f -> TRectangle([MFill(MGrey(400))], f));

	step1content =
		[
			content,
			MTextInput(contentTI, [MLabel("Some text"), MWidth(200.0)], [])
		]
		|> MGroup;

	step4content =
		[
			content,
			MCheckBox(MText("enabledStep5", [MTitle()]), enabledStep5, []),
		]
		|> MGroup;

	steps = [
		MStep(const("Step 1"), \ -> step1content, [MEditableStep(true)], []),
		MStep(const("Step 2"), \ -> content, [MOptionalStep(make("optional msg")), MEditableStep(true)], []),
		MStep(const("Step 3"), \ -> content, [MEditableStep(true)], []),
		MStep(const("Step 4"), \ -> step4content, [], []),
		MStep(const("Step 5"), \ -> content, [MEditableStep(true)], [MEnabled(enabledStep5), ]),
		MStep(const("Step 6"), \ -> content, [MEditableStep(true)], []),
	];

	steppers = [
		MStepper(
			map(steps, \step -> {
				MStep(step with 
					type = [MEditableStep(true), MClickableStep(const(true))],
					state = [MExpanded(make(true)), MCompleteStatus(make(false))]
				)
			}),
			currentStepId, 
			VerticalStepper([
				LinearStepper(true),
				AlternativeLabel(),
				StepEditableOnComplete(),
			]),
			[
				MHStepperNoHeaderSeparators(),
				MHStepperFooterBorder(0.0, 0.0, 0.0, 0.0),
				MStepperCustomFooter(\p, c, continueButton, b -> {
					stepId = make(-1);
					MConstruct(
						[\-> {
							nextDistinct(stepId, getValue(currentStepId));
							\-> nextDistinct(stepId, -1);
						}],
						MShowLazy(
							fselect2Lift(currentStepId, stepId, \v1, v2 -> v1 == v2 && v2 < (length(steps) - 1)),
							\-> {
								continueButton |> MBorderTopBottom(8.0)
							}
						)
					)
				}),
				MCheckCircleIconColor(MGreen(700)),
				MStepperContentFrame(0.0, 4.0),
			]
		),
		MStepper(
			steps, 
			currentStepId, 
			HorizontalStepper([AlternativeLabel()]), 
			[
				MCompleteButton("COMPLETE", [MRed(500), MButtonRaised()], []),
				MContinueButton("NEXT", [MRed(500), MButtonRaised()], []),
				MStepperCustomFooter(\p, c, n, b -> MCols([c, TFillX(), p, n]) |> b |> (\f -> MLines2(MSeparator(true), f)))
			]
		),
		MStepper(
			steps,
			currentStepId,
			VerticalStepper([]), 
			[
				MCompleteButton("COMPLETE", [MRed(500), MButtonRaised()], []),
				MContinueButton("NEXT", [MRed(500), MButtonRaised()], [])
			]
		),
		MStepper(
			steps,
			currentStepId,
			MobileStepper(MobileStepText(), []),
			[]
		),
		MStepper(
			steps, 
			currentStepId,
			MobileStepper(
				MobileStepProgressBar([MProgressBarDetermStyle(MGreen(900), MGrey(500), WidthHeight(-1., 4.))]),
				[
					MOnlyContinueButton()
				]
			),
			[
				MContinueButton("NEXT", [MGreen(900), MFullWidth(), MButtonRaised()], [])
			]
		),
	];

	selectedStepper = make(-1);
	mrender(manager, true,
		MAppStructure(
			[
				MContent(MLines2A(
					MFlexibleGrid(const(generate(0, length(steppers), \i -> {
						label  = "Stepper " + i2s(i + 1);
						onSelect = \-> nextDistinct(selectedStepper, i);
						MIf(
							feq(selectedStepper, i),
							MTextButton(label, onSelect, [MButtonRaised()], []),
							MTextButton(label, onSelect, [], [])
						)
					})), []) |> MBorderBottom(24.0),
					MSelect(selectedStepper, \i -> {
						stepper = elementAtM(steppers, i);
						stepper ?? stepper : MEmpty()
					})
				))
			],
			[],
		)
		|> (\f -> MConstruct([makeSubscribe(currentStepId, println)], f))
	)
}
