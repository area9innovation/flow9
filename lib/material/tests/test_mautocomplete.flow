import material/material;
import material/material_manager;
import material/material_dialog;

main() {
	manager = makeMaterialManager([]);
	setRendererType("html");
	text = make("");

	defaultCompletion = defaultCompletionFn(manager, manager.focus, []).fn;

	dictDef = generate(0, 30, \i -> "content" + i2s(i));

	dictionary = make(dictDef); 

	autoComplete =
		MAutoComplete(text, dictDef, [
			// MShowClearIcon(true, false),
			MOutlined(),
			MOutlineOpacity(0.),
			// MFilled(),
			MLabel("Label"),
			// MFloatingLabel(),
			// MFloatingLabelAlwaysOnTop(),

			MCustomTextStyle([MPrimaryColor(), MSubheading()]),
			// MMaxHeight(200.),
			// MMaxResults(3),
			// MTextInputOutOfPopup(),
			MSuggestionsPlacement(MTryTopFirst()),
			// MSuggestionInLine(false),
			MInputBackgroundStyle([MFill(MGreen(200))], [MFill(MRed(200))]),
			MSuggestionsBackgroundStyle([MFill(MBlue(200))]),
			// MWidth(300.),
			// MCustomPopup(None(), None(), Some(const(500.))),
			MCustomPopup(None(), None(), Some(fsubtract(fwidth(manager.stageWH), const(32.)))),
			// MCompletionFn(\match, sel, setWord -> {
			// 	defaultCompletion(match, sel, \sm -> {
			// 		println("ON CUSTOM COMPLETION FN");
			// 		setWord(sm);
			// 	})
			// }),
			// MDictionaryDynamic(dictionary),
			// MAutoCompleteStartSearch(3, 1000),
			// MAutoCompleteShowMoreButton()
			// MSuggestionsSameZorderMode(),
			// MSuggestionsDynamicListMode(),
			// MKeepFocusOnSelect()
			MLeftIcon("search", [MIconSize(22.), MPrimaryColor()]),
			// MStartCustomButton(MIcon("search", []), MIcon("search", []), 0., true)
			// MStartCustomButton(TEmpty(), TEmpty(), 0., true),
			// MShowLeftButton(true)
			MInputBorders(12., 11., 0., 10.),
			MShowAllOnEmpty()
		], [])
		|> MBorderTop(700.)
		|> (\m -> MCols2(m, TFillXH(32.) |> MDebugPurple))
		|> (\m -> MBorder4(16., m));

	content =
		MGroup2(
			TFillXY() |> addMBackground(MGrey(300)),
			MLines2(autoComplete, MText("Bottom", []))
		);

	mrender(manager, true, content);

	// timer(5000, \ -> {
	// 	println("UPDATE DICT");
	// 	nextDistinct(dictionary, generate(31, 60, \i -> "content" + i2s(i)))
	// });
}