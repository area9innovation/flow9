import material/material2tropic;
import material/material_ui;

main() {
	manager = makeMaterialManager([]);
	setRendererType("html");

	content =
		MScrollOrFit(
		// MScrollOrFitAlternative(
			MConstruct(
				[\ -> {println("CONS"); nop}],
				TRectangle([MFill(MGreen(200))], TFixed(200., 800.))
			),
			TFillMin(0., 160.),
			30.
		)
		|> MDebugMetricsBlue
		|> (\m -> MBorder4(20., m));

	mrender(manager, true, content);
}

// MScrollOrFit(content : Material, box : Material, threshold : double) -> Material {
// 	contentHeight = make(0.);
// 	availableHeight = make(0.);
// 	scale = fselect2(contentHeight, availableHeight, FLift2(\ch, ah ->
// 		if (ah == 0. || ch - ah > threshold) 1. else min(1., ah / ch)
// 	));

// 	fpprint("contentHeight")(contentHeight);
// 	fpprint("availableHeight")(availableHeight);
// 	fpprint("scale")(scale);

// 	scrollEnabled = fgreater(fsubtract(contentHeight, availableHeight), const(threshold));

// 	MGroup2(
// 		content,
// 		MSelect(scrollEnabled, \se ->
// 			MText("Scroll is " + if (se) "enabled" else "disabled", [])
// 		)
// 	)
// 	|> (\m -> MAttachHeight(m, contentHeight))
// 	|> (\m -> MScale(ffactor2(scale), m))
// 	|> (\m -> MScroll(
// 		m,
// 		MAttachHeight(box, availableHeight),
// 		[
// 			MScrollCropByContent(),
// 			TScrollEnabled(scrollEnabled),
// 			MScrollCropEnabled(scrollEnabled)
// 		])
// 	)
// }

MScrollOrFitAlternative(content, box, threshold) -> Material {
	availableWHB = make(WidthHeight(0.0, 0.0));
	mainWHB = make(WidthHeight(0.0, 0.0));
	MSelect2(fstall(fheight(mainWHB), 0), fstall(fheight(availableWHB), 0), \mainH, availableH -> {
		deltaH = mainH - availableH;
		if (deltaH < threshold && deltaH >= 0.0) {
			MZoomToFill(
				content,
				MAttachAvailable(box, availableWHB),
				false
			)
		} else {
			MScroll(
				content,
				box,
				[MScrollWidthHeight(mainWHB, availableWHB), MScrollCropByContent()]
			)
		}
	})
}