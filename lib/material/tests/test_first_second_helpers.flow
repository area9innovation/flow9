import material/material2tropic;

main() {
	manager = makeMaterialManager([]);
	setRendererType("html");

	availwidth = make(200.);
	availheight = make(200.);
	useRTLVersions = make(false);
	rtlB = make(false);
	alignWidthOption = make(0);
	alignHeightOption = make(0);

	item1Option = make(0);
	item1width = make(200.);
	item1height = make(200.);
	item1 = MSelect(item1Option, \v ->
		if (v == 0) MFrame(0., 0., [MFill(MBlue(200)), FillOpacity(0.8)], TSizedWidthHeight(item1width, item1height))
		else MFrame(0., 0., [MFill(MBlue(200)), FillOpacity(0.8)], TFillXYXYT(item1width, item1height, const(doubleMax), const(doubleMax)))
	);

	item2Option = make(0);
	item2width = make(100.);
	item2height = make(100.);
	item2 = MSelect(item2Option, \v ->
		if (v == 0) MIcon("android", [])
		else if (v == 1) MFrame(0., 0., [MFill(MRed(200)), FillOpacity(0.8)], TSizedWidthHeight(item2width, item2height))
		else MFrame(0., 0., [MFill(MGreen(200)), FillOpacity(0.8)], TFillXYXYT(item2width, item2height, const(doubleMax), const(doubleMax)))
	);

	sizeSlider = \v, label -> MLines2(
		MText(label, [MCaptionColumn()]),
		MSlider(v, [MSliderRange(0., 600.), MSliderShowValueInput(true), MSliderShowValueInputEnabled(const(false))])
	);
	alignItemWidth = \it -> MSelect(alignWidthOption, \o -> {
		fn = if (o == 0) MAlignStartFill else if (o == 1) \v -> MCenterX(v) else MAlignEndFill;
		fn(it);
	});
	alignItemHeight = \it -> MSelect(alignHeightOption, \o -> {
		fn = if (o == 0) MAlignTop else if (o == 1) \v -> MCenterY(v) else MAlignBottom;
		fn(it);
	});
	
	tab1Content = 
		MLines([
			MAttachToFirst(
				item1,
				item2 |> alignItemWidth |> alignItemHeight
			)
			|> MDebugPurple
			|> (\m -> MAvailable(m, TSizedWidthHeight(availwidth, availheight))),

			MAttachToSecond(
				item2 |> alignItemWidth |> alignItemHeight,
				item1
			)
			|> MDebugPurple
			|> (\m -> MAvailable(m, TSizedWidthHeight(availwidth, availheight)))
			|> MBorderTop(8.)
		]);

	tab2Content = 
		MLines([
			MSelect(useRTLVersions, \use -> {
				fn = if (use) MLinesAWidthByFirst else MLinesWidthByFirst;
				fn(item1, item2 |> alignItemWidth)
			})
			|> MDebugPurple
			|> (\m -> MAvailable(m, TSizedWidthHeight(availwidth, availheight))),

			MSelect(useRTLVersions, \use -> {
				fn = if (use) MLinesAWidthBySecond else MLinesWidthBySecond;
				fn(item2 |> alignItemWidth, item1)
			})
			|> MDebugPurple
			|> (\m -> MAvailable(m, TSizedWidthHeight(availwidth, availheight)))
			|> MBorderTop(8.)
		]);

	tab3Content = MLines([
		MSelect(useRTLVersions, \use -> {
			fn = if (use) MColsAHeightByFirst else MColsHeightByFirst;
			fn(item1, item2 |> alignItemHeight)
		})
		|> MDebugPurple
		|> (\m -> MAvailable(m, TSizedWidthHeight(availwidth, availheight))),

		MSelect(useRTLVersions, \use -> {
			fn = if (use) MColsAHeightBySecond else MColsHeightBySecond;
			fn(item2 |> alignItemHeight, item1)
		})
		|> MDebugPurple
		|> (\m -> MAvailable(m, TSizedWidthHeight(availwidth, availheight)))
		|> MBorderTop(8.)
	]);

	content =
		MLines([
			MCols2(
				MLines2(
					MText("Dominant item", [MBodyBold()]),
					MCols2(
						mapi([
								MText("TSized", []),
								MText("Filler with minimal size", [])
							],
							\i, it -> MRadio(it, i, item1Option, [])
						) |> MLines,
						MLines2(
							sizeSlider(item1width, "item 1 width"),
							sizeSlider(item1height, "item 1 height")
						)
						|> MBorderStart(8.)
					),
				) |> (\m -> MAvailableWidth(m, fselectLift(manager.stageWH, \wh -> wh.width / 2.))),
				MLines2(
					MText("Subdominant item", [MBodyBold()]),
					MCols2(
						mapi([
								MText("Icon", []),
								MText("TSized", []),
								MText("Filler with minimal size", [])
							],
							\i, it -> MRadio(it, i, item2Option, [])
						) |> MLines,
						MLines2(
							sizeSlider(item2width, "item 1 width"),
							sizeSlider(item2height, "item 1 height")
						)
						|> MBorderStart(8.)
						|> (\m -> MShow(fgreateri(item2Option, const(0)), m))
					)
				)
			),

			MCols2(
				MLines([
					MText("Available", [MBodyBold()]),
					sizeSlider(availwidth, "width"),
					sizeSlider(availheight, "height")
				]) |> (\m -> MAvailableWidth(m, fselectLift(manager.stageWH, \wh -> wh.width / 2.))),
				MLines([
					MText("RTL", [MBodyBold()]),
					MCols2(
						MCheckBox(MText("Use *A version", []), useRTLVersions, []),
						MSwitchControl(rtlB, [MOnOffText("Arabic", "English")])
						|> (\m -> MConstruct([makeSubscribe2(rtlB, \v -> setLang(if (v) "ar" else "en"))], m))
					),
					MText("Align", [MBodyBold()]),
					mapi(["Start", "Center", "End"], \i, v -> MRadio(MText(v, []), i, alignWidthOption, [])) |> MCols,
					mapi(["Top", "Center", "Bottom"], \i, v -> MRadio(MText(v, []), i, alignHeightOption, [])) |> MCols
				])
			),
			
			MDynamicTabs(const([
				MTab(tab1Content, const("Attach To"), []),
				MTab(tab2Content, const("Lines"), []),
				MTab(tab3Content, const("Cols"), [])
			]), make(0), [])
			|> MBorderLeftRight(16.)
		])
		|> MBorderTop(50.);

	mrender(manager, true, content)
}