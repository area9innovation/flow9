import material/material;
import material/make_subscribe;
import tropic/tropic_constant;

export {
	TCopySizeAttach(content : Tropic, copyFn : (Tropic) -> Tropic, above : bool, wh : DynamicBehaviour<WidthHeight>) -> Tropic;
	TCopySize2Attach(content : Tropic, copyFn : (Tropic, Tropic) -> Tropic, wh : DynamicBehaviour<WidthHeight>) -> Tropic;

	TAttachSelect(t : Tropic, fn : (WidthHeight) -> Tropic) -> Tropic;
	MAttachSelect(t : Material, fn : (WidthHeight) -> Material) -> Material;

	// Creates TLet or MLet which places TDisplay above or below scope
	// TDisplay is created before scope so TGhosts always have constant metrics if TDisplay do
	TLetDisplay(name : string, value : Tropic, scope : Tropic, above : bool) -> Tropic;
	MLetDisplay(name : string, value : Material, scope : Tropic, above : bool) -> Material;

	TCopySizes(content : [Tropic], copyFn : (sizes : [Tropic], tropics : [Tropic]) -> Tropic) -> Tropic;

	TZoomOnOverflow(content : Tropic, container : Tropic, crop : bool) -> Tropic;
}

TLetDisplay(name : string, value : Tropic, scope : Tropic, above : bool) -> Tropic {
	TLet(
		name,
		value,
		TransformTAcc2(\t2a -> {
			ba1 = TDisplay(name) |> t2a;
			ba2 = scope |> t2a;

			TAcc(
				FGroup([
					ba1.form,
					ba2.form
				] |> (\f : [FForm] -> if (above) f else reverseA(f)), true),
				TFormMetrics(
					fmax(ba1.metrics.width, ba2.metrics.width),
					fmax(ba1.metrics.height, ba2.metrics.height),
					fmax(ba1.metrics.baseline, ba2.metrics.baseline)
				),
				fmax(ba1.minWidth, ba2.minWidth),
				fmax(ba1.minHeight, ba2.minHeight),
				fmax(ba1.maxWidth, ba2.maxWidth),
				fmax(ba1.maxHeight, ba2.maxHeight),
				fmax(ba1.xFillers, ba2.xFillers),
				fmax(ba1.yFillers, ba2.yFillers),
				if (isUrlParameterTrue("group2filler")) fmax(ba1.addFillers, ba2.addFillers) else const(false),
				ba1.xConstant && ba2.xConstant,
				ba1.yConstant && ba2.yConstant,
				concat(ba1.disposers, ba2.disposers)
			)
		})
	)
}

MLetDisplay(name : string, value : Material, scope : Tropic, above : bool) -> Material {
	MLet(
		name,
		value,
		TransformTAcc2(\t2a -> {
			ba1 = TDisplay(name) |> t2a;
			ba2 = scope |> t2a;

			TAcc(
				FGroup([
					ba1.form,
					ba2.form
				] |> (\f : [FForm] -> if (above) f else reverseA(f)), true),
				TFormMetrics(
					fmax(ba1.metrics.width, ba2.metrics.width),
					fmax(ba1.metrics.height, ba2.metrics.height),
					fmax(ba1.metrics.baseline, ba2.metrics.baseline)
				),
				fmax(ba1.minWidth, ba2.minWidth),
				fmax(ba1.minHeight, ba2.minHeight),
				fmax(ba1.maxWidth, ba2.maxWidth),
				fmax(ba1.maxHeight, ba2.maxHeight),
				fmax(ba1.xFillers, ba2.xFillers),
				fmax(ba1.yFillers, ba2.yFillers),
				if (isUrlParameterTrue("group2filler")) fmax(ba1.addFillers, ba2.addFillers) else const(false),
				ba1.xConstant && ba2.xConstant,
				ba1.yConstant && ba2.yConstant,
				concat(ba1.disposers, ba2.disposers)
			)
		})
	)
}

TCopySizeAttach(content : Tropic, copyFn : (Tropic) -> Tropic, above : bool, wh : DynamicBehaviour<WidthHeight>) -> Tropic {
	TransformTAcc2(\t2a -> {
		b1 = content |> t2a;
		tr = TAcc2SizeAttach(b1, wh);
		b2 = copyFn(tr) |> t2a;

		TAcc(
			FGroup([
				b1.form,
				b2.form
			] |> (\f : [FForm] -> if (above) f else reverseA(f)), true),
			b1.metrics,
			b1.minWidth,
			b1.minHeight,
			b1.maxWidth,
			b1.maxHeight,
			b1.xFillers,
			b1.yFillers,
			b1.addFillers,
			b1.xConstant,
			b1.yConstant,
			concat(b1.disposers, b2.disposers)
		)
	})
}

TCopySize2Attach(content : Tropic, copyFn : (Tropic, Tropic) -> Tropic, wh : DynamicBehaviour<WidthHeight>) -> Tropic {
	TransformTAcc2(\t2a -> {
		b1 = content |> t2a;
		tr = TAcc2SizeAttach(b1, wh);
		b2 =
			copyFn(
				tr,
				TFForm(b1.form, wh2TFormMetrics(wh))
			) |> t2a;

		TAcc(
			b2.form,
			b2.metrics,
			b2.minWidth,
			b2.minHeight,
			b2.maxWidth,
			b2.maxHeight,
			b2.xFillers,
			b2.yFillers,
			b2.addFillers,
			b2.xConstant,
			b2.yConstant,
			concat(b1.disposers, b2.disposers)
		)
	})
}

TAttachSelect(t : Tropic, fn : (WidthHeight) -> Tropic) -> Tropic {
	TAttach(t, \m -> {
		TSelect(fwidthheight(m.width, m.height), fn)
	})
}

MAttachSelect(t : Material, fn : (WidthHeight) -> Material) -> Material {
	MAttach(t, \m -> {
		MSelect(fwidthheight(m.width, m.height), fn)
	})
}

TCopySizes(content : [Tropic], copyFn : (tropics : [Tropic], sizes : [Tropic]) -> Tropic) -> Tropic {
	TransformTAcc2(\t2a -> {
		b1 = map(content, t2a);
		tr = map(b1, TAcc2Size);
		b2 = copyFn(tr, map(b1, \b -> TNative(\__, __ -> b))) |> t2a;

		TAcc(
			b2.form,
			b2.metrics,
			b2.minWidth,
			b2.minHeight,
			b2.maxWidth,
			b2.maxHeight,
			b2.xFillers,
			b2.yFillers,
			b2.addFillers,
			b2.xConstant,
			b2.yConstant,
			b2.disposers
		)
	})
}

TZoomOnOverflow(content : Tropic, container : Tropic, keepAspect : bool) -> Tropic {
	TCopySize(
		container,
		\tr ->
			TTweak([TFitZoom(keepAspect, false)], TGroup2(content, tr), tr),
		true
	);
}