import material/internal/material_clickable;
import sys/keycodes;

export {
	MScroll2T(manager : MaterialManager, parent : MFocusGroup, m : MScroll, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	extractMScrollStyle(style : [flow]) -> [MScrollStyle];
	extractTScrollStyle(style : [flow]) -> [TScrollStyle];
}

//TODO: Add arrows to scrollbars
MScroll2T(manager : MaterialManager, parent : MFocusGroup, m : MScroll, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	scrollToFocusEnabled = extractStruct(m.style, MScrollToFocusEnabled(const(true))).enabled;
	currentPoint : TMouseXY = extractStruct(m.style, TMouseXY(makePoint()));
	scrollPosition : TScrollPosition = extractStruct(m.style, TScrollPosition(makePoint()));
	moving : TScrollMoving = extractStruct(m.style, TScrollMoving(make(false)));
	scrollWH : TScrollWidthHeight = extractStruct(m.style, TScrollWidthHeight(makeWH(), makeWH()));
	persistent : TScrollPersistent = extractStruct(m.style, TScrollPersistent(const(!mobile)));
	barstyles : TScrollbars = extractStruct(m.style, TScrollbars(materialScrollBar, materialScrollBar));
	keyFilter : TKeyFilter =
		tryExtractStruct(m.style, TKeyFilter(\__ -> true))
		|> (\kf ->
			extractStruct(
				m.style,
				TKeyFilter(\ke -> {
					eitherMap(kf, \fn -> fn.fn(ke), true) &&
					((ke.utf == "up" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.vertical), true)) ||
					(ke.utf == "down" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.vertical), true)) ||
					(ke.utf == "left" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.horizontal), true)) ||
					(ke.utf == "right" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.horizontal), true)))
				})
			)
		);

	// Maximum scroll offset (0 if content fits available box)
	maxWH = fwhmax(fwhsubtract(scrollWH.content, scrollWH.box), const(WidthHeight(0., 0.)));

	uns = initUnsM();
	subscribedToCurrent = ref false;
	scrollToFocusBorder = 8.;

	scrollContent = \newParent ->
		TConstruct(
			[
				makeSubscribe(ftransistor(scrollToFocusEnabled, newParent.focusedId), \foc ->
					if (foc != -1 && !^subscribedToCurrent) {
						subscribedToCurrent := true;
						dispUnsM(uns);

						setUnsM(
							uns,
							makeSubscribeUns(fthrottle(getCurrentFocusedItemBehaviour(manager), 33), \currentMFocusM -> {
								eitherMap(currentMFocusM, \currentMFocus -> {
									focusedPositionScale = fgetValue(currentMFocus.position);

									focusedPosition =
										if (focusedPositionScale.scale.x == 0. || focusedPositionScale.scale.y == 0.) {
											position = make(zeroPoint);
											u = interruptibleTimer(600, \ -> nextDistinct(position, fgetValue(currentMFocus.position).pos)); // For scroll into animated dialog
											Pair(position, u)
										}
										else
											Pair(const(zeroPoint), nop);

									focusedWH = currentMFocus.widthHeight;

									uns2 = make3Subscribe(focusedWH, maxWH, focusedPosition.first, \fWH, mwh, __ -> {
										sp = getValue(scrollPosition.position);
										bwh = getValue(scrollWH.box);
										sfp = PositionScale2Point(fgetValue(newParent.position));
										fps = fgetValue(currentMFocus.position).pos;

										realPosX = fps.x - sfp.x;
										realPosY = fps.y - sfp.y;

										nextDistinct(
											scrollPosition.position,
											Point(
												if (realPosX < 0.)
													forceRange(sp.x + realPosX - scrollToFocusBorder, 0., mwh.width)
												else if (realPosX + fWH.width > bwh.width)
													forceRange(
														sp.x + realPosX + min(fWH.width - bwh.width + scrollToFocusBorder, -scrollToFocusBorder),
														0.,
														mwh.width
													)
												else
													sp.x,
												if (realPosY < 0.)
													forceRange(sp.y + realPosY - scrollToFocusBorder, 0., mwh.height)
												else if (realPosY + fWH.height > bwh.height)
													forceRange(
														sp.y + realPosY + min(fWH.height - bwh.height + scrollToFocusBorder, -scrollToFocusBorder),
														0.,
														mwh.height
													)
												else
													sp.y
											)
										);
									})();

									[focusedPosition.second, uns2]
								}, [])
							})()
						)
					} else if (^subscribedToCurrent && foc == -1) {
						subscribedToCurrent := false;

						dispUnsM(uns)
					}
				),
				\ -> \ -> dispUnsM(uns)
			],
			m2t(m.content, newParent)
		);

	MComponentGroup2T(
		manager,
		parent,
		extractStruct(m.style, MFocusName("MScroll")).name,
		concat(
			extractMComponentGroupState(m.style),
			[
				IScriptBehaviour("point", currentPoint.point, ISInputValue([], serialize(getValue(currentPoint.point)), true)),
				IScriptBehaviour("down", moving.moving, ISInputValue([], serialize(getValue(moving.moving)), true)),
				IScriptBehaviour("position", scrollPosition.position, ISInputValue([], serialize(getValue(scrollPosition.position)), true)),
				AccessRole("scroll")
			]
		),
		\newParent ->
			TScroll(
				manager.manager,
				scrollContent(newParent),
				m2t(m.box, newParent),
				replaceStructMany(
					extractTScrollStyle(m.style),
					[
						currentPoint,
						scrollPosition,
						moving,
						scrollWH,
						persistent,
						barstyles,
						keyFilter,
						TSetRTL(newParent.rtl)
					]
				)
			)
	);
}

extractMScrollStyle(style : [flow]) -> [MScrollStyle] {
	filtermap(style, \st: flow ->
		switch (st : flow) {
			MScrollStyle(): {v : Maybe<MScrollStyle> = Some(st); v};
			default: None();
		}
	)
}

extractTScrollStyle(style : [flow]) -> [TScrollStyle] {
	filtermap(style, \st: flow ->
		switch (st : flow) {
			TScrollStyle(): {v : Maybe<TScrollStyle> = Some(st); v};
			default: None();
		}
	)
}