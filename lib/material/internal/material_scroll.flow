import material/internal/material_clickable;
import material/internal/material_progress;
import sys/keycodes;

export {
	MScroll2T(manager : MaterialManager, parent : MFocusGroup, m : MScroll, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MRecyclerGrid2T(manager : MaterialManager, parent : MFocusGroup, m : MRecyclerGrid, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	extractMScrollStyle(style : [flow]) -> [MScrollStyle];
	extractTScrollStyle(style : [flow]) -> [TScrollStyle];
}

//TODO: Add arrows to scrollbars
MScroll2T(manager : MaterialManager, parent : MFocusGroup, m : MScroll, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	scrollToFocusEnabled = extractStruct(m.style, MScrollToFocusEnabled(const(true))).enabled;
	currentPoint : TMouseXY = extractStruct(m.style, TMouseXY(makePoint()));
	scrollPosition : TScrollPosition = extractStruct(m.style, TScrollPosition(makePoint()));
	moving : TScrollMoving = extractStruct(m.style, TScrollMoving(make(false)));
	scrollWH : TScrollWidthHeight = extractStruct(m.style, TScrollWidthHeight(makeWH(), makeWH()));
	persistent : TScrollPersistent = extractStruct(m.style, TScrollPersistent(const(false)));
	barstyles : TScrollbars = extractStruct(m.style, TScrollbars(materialScrollBar, materialScrollBar));
	expandOnHover : TExpandOnHover = extractStruct(m.style, TExpandOnHover(true));
	spinner =
		maybeMap(
			tryExtractStruct(m.style, MScrollSpinner(make(false), [])),
			\sp -> {
				offset =
					if (contains(sp.style, MScrollSpinnerPushContent())) extractStruct(sp.style, MScrollSpinnerOffset(64.0, 40.0)).max
					else 0.0;
				Pair(sp, offset)
			});
	keyFilter : TKeyFilter =
		tryExtractStruct(m.style, TKeyFilter(\__ -> true))
		|> (\kf ->
			extractStruct(
				m.style,
				TKeyFilter(\ke -> {
					eitherMap(kf, \fn -> fn.fn(ke), true) &&
					((ke.utf == "up" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.vertical), true)) ||
					(ke.utf == "down" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.vertical), true)) ||
					(ke.utf == "left" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.horizontal), true)) ||
					(ke.utf == "right" && eitherMap(getCurrentFocusedItem(manager), \fc -> isNone(fc.parent.horizontal), true)))
				})
			)
		);
	enabled = fand(extractStruct(m.style, TScrollEnabled(const(true))).enabled, extractStruct(m.style, MEnabled(const(true))).enabled);

	MComponentGroup2T(
		manager,
		parent,
		extractStruct(m.style, MFocusName("MScroll")).name,
		concat(
			extractMComponentGroupState(m.style),
			[
				IScriptBehaviour("point", currentPoint.point, ISInputValue([], serialize(getValue(currentPoint.point)), true)),
				IScriptBehaviour("down", moving.moving, ISInputValue([], serialize(getValue(moving.moving)), true)),
				IScriptBehaviour("position", scrollPosition.position, ISInputValue([], serialize(getValue(scrollPosition.position)), true)),
				MScrollInfo(scrollPosition.position, scrollWH.content, enabled, scrollToFocusEnabled)
			]
		),
		\newParent ->
			TScroll(
				manager.manager,
				m2t(m.content, newParent)
				|> (\t -> eitherMap(spinner, \sp -> TBorderT(zero, fif(sp.first.spin, const(sp.second), zero), zero, zero, t), t)),
				m2t(m.box, newParent),
				replaceStructMany(
					extractTScrollStyle(m.style),
					[
						currentPoint,
						scrollPosition,
						moving,
						scrollWH,
						persistent,
						barstyles,
						expandOnHover,
						keyFilter,
						TSetRTL(newParent.rtl),
						TScrollEnabled(enabled)
					]
				)
			)
	)
	|> (\t -> eitherMap(spinner, \sp -> MPullSpin(manager, parent, scrollPosition.position, sp.first, t, m2t), t))
}

extractMScrollStyle(style : [flow]) -> [MScrollStyle] {
	filtermap(style, \st: flow ->
		switch (st : flow) {
			MScrollStyle(): {v : Maybe<MScrollStyle> = Some(st); v};
			default: None();
		}
	)
}

extractTScrollStyle(style : [flow]) -> [TScrollStyle] {
	filtermap(style, \st: flow ->
		switch (st : flow) {
			TScrollStyle(): {v : Maybe<TScrollStyle> = Some(st); v};
			default: None();
		}
	)
}

MRecyclerGridContainer(id : int, row : int, column : int, material : Material, size : DynamicBehaviour<WidthHeight>, position : DynamicBehaviour<Point>, mutable cached : Maybe<Tropic>);
emptyMRecyclerGridContainer = MRecyclerGridContainer(-1, -1, -1, TEmpty(), makeWH(), makePoint(), None());

boundsOverlap(bounds1 : Bounds, bounds2 : Bounds) -> bool {
	max(bounds1.minX, bounds1.maxX) >= min(bounds2.minX, bounds2.maxX) &&
		min(bounds1.minX, bounds1.maxX) <= max(bounds2.minX, bounds2.maxX) &&
		max(bounds1.minY, bounds1.maxY) >= min(bounds2.minY, bounds2.maxY) &&
		min(bounds1.minY, bounds1.maxY) <= max(bounds2.minY, bounds2.maxY)
}

pointwh2bounds(point : Point, wh : WidthHeight) -> Bounds {
	Bounds(point.x, point.y, point.x + wh.width, point.y + wh.height);
}

fpointwh2bounds(point : Transform<Point>, wh : Transform<WidthHeight>) -> Transform<Bounds> {
	fselect2(point, wh, pointwh2bounds |> FLift2);
}

bounds2w(bounds : Bounds) -> double {
	bounds.maxX - bounds.minX
}

bounds2h(bounds : Bounds) -> double {
	bounds.maxY - bounds.minY
}

insetBounds(bounds : Bounds, left : double, top : double, right : double, bottom : double) -> Bounds {
	Bounds(bounds.minX + left, bounds.minY + top, bounds.maxX - right, bounds.maxY - bottom);
}

MRecyclerGridId(row : int, column : int);

updateMRecyclerGridContainers(containers : [[MRecyclerGridContainer]], lastRow : Maybe<int>, lastColumn : Maybe<int>, availableWH : WidthHeight) -> void {
	updateMRecyclerGridContainers2(zeroPoint, containers, 0, 0, lastRow, lastColumn, availableWH);
}

updateMRecyclerGridContainers2(
	position : Point,
	containers : [[MRecyclerGridContainer]],
	row : int,
	column : int,
	lastRow : Maybe<int>,
	lastColumn : Maybe<int>,
	availableWH : WidthHeight
) -> void {
	if (length(containers) > row && length(containers[row]) > column && eitherMap(lastRow, \lr -> lr > row || (lr == row && eitherMap(lastColumn, \lc -> lc >= column, true)), true)) {
		container = containers[row][column];
		next(container.position, position);

		initSize = getValue(container.size);
		emptyInitSize = initSize.width <= 0.0 || initSize.height <= 0.0;

		if (emptyInitSize) {
			next(container.size, availableWH);
		}

		size = getValue(container.size);
		containerBounds = pointwh2bounds(position, size);

		if (column == 0 && length(containers) > 1) {
			updateMRecyclerGridContainers2(Point(position.x + size.width, position.y), containers, row, column + 1, lastRow, lastColumn, availableWH);
			newPosition = fold(containers[row], Point(0.0, containerBounds.maxY), \acc, c -> {
				Point(0.0, max(acc.y, getValue(c.position).y + getValue(c.size).height));
			});
			updateMRecyclerGridContainers2(newPosition, containers, row + 1, column, lastRow, lastColumn, availableWH);
		} else {
			updateMRecyclerGridContainers2(Point(position.x + size.width, position.y), containers, row, column + 1, lastRow, lastColumn, availableWH);
		}
	}
}

filterVisibleMRecyclerGridContainers(containers : [[MRecyclerGridContainer]], scrollBounds : Bounds, availableWH : WidthHeight) -> [MRecyclerGridId] {
	position = ref zeroPoint;
	filterDone = ref false;
	chunkSize = 1000;

	concatA(
		generate(0, ceil(i2d(length(containers)) / i2d(chunkSize)), \i -> {
			if (^filterDone) {
				[]
			} else {
				containersChunk = subrange(containers, 0, chunkSize * (i + 1));

				r = filterVisibleMRecyclerGridContainers2(^position, containersChunk, chunkSize * i, 0, scrollBounds, availableWH);

				if (length(r) > 0 && !exists(r, \rr -> rr.row == chunkSize * (i + 1) - 1)) {
					filterDone := true;
					r;
				} else {
					position := fold(containersChunk[length(containersChunk) - 1], ^position, \acc, c -> {
						Point(0.0, max(acc.y, getValue(c.position).y + getValue(c.size).height));
					});
					r;
				}
			}
		})
	)
}

filterVisibleMRecyclerGridContainers2(position : Point, containers : [[MRecyclerGridContainer]], row : int, column : int, scrollBounds : Bounds, availableWH : WidthHeight) -> [MRecyclerGridId] {
	if (length(containers) > row && length(containers[row]) > column) {
		container = containers[row][column];
		next(container.position, position);

		initSize = getValue(container.size);
		emptyInitSize = initSize.width <= 0.0 || initSize.height <= 0.0;

		if (emptyInitSize) {
			next(container.size, availableWH);
		}

		size = getValue(container.size);
		containerBounds = pointwh2bounds(position, size);
		emptySize = size.width <= 0.0 || size.height <= 0.0;

		if (emptySize) {
			[MRecyclerGridId(row, column)]
		} else if (boundsOverlap(scrollBounds, containerBounds)) {
			if (column == 0 && length(containers) > 1) {
				r = filterVisibleMRecyclerGridContainers2(Point(position.x + size.width, position.y), containers, row, column + 1, scrollBounds, availableWH);
				newPosition = fold(containers[row], Point(0.0, containerBounds.maxY), \acc, c -> {
					Point(0.0, max(acc.y, getValue(c.position).y + getValue(c.size).height));
				});

				concat3(
					[MRecyclerGridId(row, column)],
					r,
					filterVisibleMRecyclerGridContainers2(newPosition, containers, row + 1, column, scrollBounds, availableWH)
				);
			} else {
				concat(
					[MRecyclerGridId(row, column)],
					filterVisibleMRecyclerGridContainers2(Point(position.x + size.width, position.y), containers, row, column + 1, scrollBounds, availableWH)
				);
			}
		} else if (position.x > scrollBounds.maxX || position.y > scrollBounds.maxY) {
			[];
		} else {
			if (column == 0 && length(containers) > 1) {
				r = filterVisibleMRecyclerGridContainers2(Point(position.x + size.width, position.y), containers, row, column + 1, scrollBounds, availableWH);
				newPosition = fold(containers[row], zeroPoint, \acc, c -> {
					Point(0.0, max(acc.y, getValue(c.position).y + getValue(c.size).height));
				});

				concat(
					r,
					filterVisibleMRecyclerGridContainers2(newPosition, containers, row + 1, column, scrollBounds, availableWH)
				);
			} else {
				filterVisibleMRecyclerGridContainers2(Point(position.x + size.width, position.y), containers, row, column + 1, scrollBounds, availableWH);
			}
		}
	} else {
		[];
	}
}

getMRecyclerGridContentSize(containers : [[MRecyclerGridContainer]]) -> WidthHeight {
	gridSize : Pair<int, WidthHeight> =
		foldWhile(containers, Pair(0, WidthHeight(0.0, 0.0)), \accHeight : Pair<int, WidthHeight>, cc -> {
			rowSize : Pair<int, WidthHeight> =
				foldWhile(cc, Pair(0, WidthHeight(0.0, 0.0)), \accWidth : Pair<int, WidthHeight>, c -> {
					size = getValue(c.size);

					if (size.width > 0.0 && size.height > 0.0) {
						Some(Pair(accWidth.first + 1, WidthHeight(accWidth.second.width + size.width, max(accWidth.second.height, size.height))));
					} else {
						None();
					}
				});

			size =
				WidthHeight(
					rowSize.second.width / i2d(max(rowSize.first, 1)) * i2d(length(cc)),
					rowSize.second.height
				);

			if (size.width > 0.0 && size.height > 0.0) {
				Some(Pair(accHeight.first + 1, WidthHeight(max(accHeight.second.width, size.width), accHeight.second.height + size.height)));
			} else {
				None();
			}
		});

	WidthHeight(
		gridSize.second.width,
		gridSize.second.height / i2d(max(gridSize.first, 1)) * i2d(length(containers))
	);
}

TCached(t : Tropic) -> Tropic {
	cachedB = ref None();
	uns = ref nop;
	instancesCounter = ref 0;

	TransformTAcc2(\t2a -> {
		instancesCounter := ^instancesCounter + 1;
		^uns();
		uns := nop;
		b = eitherFn(^cachedB, \cb -> cb, \ -> { b = t2a(t); cachedB := Some(b); b; });

		TAcc(b with
			disposers =
				[
					\ -> {
						instancesCounter := ^instancesCounter - 1;

						^uns();
						uns := interruptibleTimer(10000, \ -> // Dispose if clip is detroyed for more than 10s
							if (^instancesCounter == 0) {
								maybeApply(^cachedB, \cb -> {
									applyall(cb.disposers);
									cachedB := None();
								})
							}
						);
					}
				]
		)
	})
}

MRecyclerGrid2T(manager : MaterialManager, parent : MFocusGroup, m : MRecyclerGrid, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	sameSize = if (contains(m.style, TSameSize())) Some(makeWH()) else None();
	scrollSize : TScrollWidthHeight = extractStruct(m.style, MScrollWidthHeight(make(zeroWH), make(zeroWH)));
	contentSize = make(zeroWH);
	initWH = fselect2(contentSize, m.items, FLift2(\cs, it -> WidthHeight(cs.width / i2d(max(either(maxA(map(it, length)), 0), 1)), cs.height / i2d(max(length(it), 1)))));
	availableWH = fselect2(scrollSize.box, m.items, FLift2(\cs, it -> WidthHeight(cs.width / i2d(max(either(maxA(map(it, length)), 0), 1)), cs.height / i2d(max(length(it), 1)))));
	items =
		fguard(
			fsubmapi(fsplit2d(m.items), \row, mi ->
				fsubmapi(mi, \column, it ->
					fselect2(row, column, FLift2(\r, c ->
						MRecyclerGridContainer(
							r * 10000 + c,
							r,
							c,
							it,
							either(sameSize, makeWH()),
							makePoint(),
							None()
						)
					))
				)
			),
			make([])
		);
	position = extractStruct(m.style, MScrollPosition(makePoint())).position;
	scrollBounds = fselect3(position, contentSize, scrollSize.box, \p0, cwh, bwh -> {
		p = Point(min(p0.x, cwh.width - bwh.width), min(p0.y, cwh.height - bwh.height));

		Bounds(
			dfloor(p.x / bwh.width - 0.1) * bwh.width,
			dfloor(p.y / bwh.height - 0.1) * bwh.height,
			dceil(p.x / bwh.width + 1.1) * bwh.width,
			dceil(p.y / bwh.height + 1.1) * bwh.height
		);
	});
	scrollPercent = tryExtractStruct(m.style, TScrollPercent(makePoint()));
	cachedPercent = ref zeroPoint;

	containers : DynamicBehaviour<[MRecyclerGridId]> = make([]);
	needsUpdate = make(true);
	contentSizeNeedsUpdate = make(true);

	scrollToItemPending = ref None();
	maybeApply(
		tryExtractStruct(m.style, MScrollToItem(ref nop2)),
		\msti -> {
			msti.fn := \r, c -> {
				scrollToItemPending := Some(Pair(r, c));
				next(needsUpdate, true);
				next(contentSizeNeedsUpdate, true);
			}
		}
	);

	SelectTGroup(
		containers,
		\index, __, id ->
			TSelect(
				fthrottleUntilNextFrameRendered(fselect(items.first, FLift(\it ->
					if (length(it) > id.row && length(it[id.row]) > id.column)
						it[id.row][id.column]
					else
						emptyMRecyclerGridContainer
				))),
				\c : MRecyclerGridContainer -> {
					wh = makeWH();

					TConstruct(
						[
							makeSubscribe(wh, \v -> {
								if (v.width > 0.0 && v.height > 0.0) {
									v2 = getValue(c.size);

									if (v != v2) {
										next(c.size, v);
										next(needsUpdate, true);
										next(contentSizeNeedsUpdate, true);
									}
								}
							})
						],
						TTranslate(
							c.position,
							TFixSize(
								TAvailable(
									eitherFn(
										c.cached,
										\tcached -> tcached,
										\ -> {
											tcached : Tropic = MComponentGroup2T(manager, parent, "MRecyclerGridItem", [MFocusId(const(c.id))], \p -> m2t(c.material, p));
											c.cached ::= Some(tcached);
											tcached;
										}
									)
									|> (\f ->
										if (isNone(sameSize) || (c.row == 0 && c.column == 0))
											TInspect(
												[ISize(wh)],
												f
											)
										else
											f
									),
									TSized(availableWH)
								),
								TEmpty()
							)
						)
					)
				}
			)
	)
	|> (\f ->
		TGroup2(
			f,
			TVisible(
				fselectdelay(contentSizeNeedsUpdate, \csnu -> if (csnu) 0 else 300),
				TTranslate(
					position,
					TCenterIn(MProgressCircle2T(manager, parent, MProgressCircle([])), TSized(scrollSize.box))
				)
			)
		)
	)
	|> (\f ->
		MScroll2T(
			manager,
			parent,
			MScroll(
				TFixSize(f, TSized(contentSize)),
				TFillXY(),
				replaceStructMany(
					extractMScrollStyle(m.style),
					[MScrollPosition(position), scrollSize]
				)
			),
			m2t
		)
	)
	|> (\f ->
		TConstruct(
			[
				items.second,
				\ -> {
					manager.manager.deltaTimer.attach();
					manager.manager.deltaTimer.detach;
				},
				makeSubscribe(
					fthrottleUntilNextFrameRendered(fpair(
						fselectWithLast(flength(items.first), FLift2(\prevLen, curLen -> {
							if (prevLen > curLen) {
								next(contentSizeNeedsUpdate, true);
							}

							curLen;
						})),
						scrollBounds
					)),
					\__ -> next(needsUpdate, true)
				),
				makeSubscribe(manager.manager.deltaTimer.timer, \__ -> {
					if (getValue(needsUpdate)) {
						next(needsUpdate, false);

						it = getValue(items.first);
						if (getValue(contentSizeNeedsUpdate)) {
							next(contentSizeNeedsUpdate, false);
							next(contentSize, getMRecyclerGridContentSize(it));
						}

						eitherFn(
							^scrollToItemPending,
							\sti -> {
								r = sti.first;
								c = sti.second;

								if (length(it) <= r || length(it[r]) <= c) {
									scrollToItemPending := None();
								} else if (contains(getValue(containers), MRecyclerGridId(r, c))) {
									updateMRecyclerGridContainers(it, Some(r), Some(c), fgetValue(initWH));

									if (getValue(position) == getValue(it[r][c].position)) {
										scrollToItemPending := None();
										next(needsUpdate, true);
									} else {
										next(position, getValue(it[r][c].position));
										next(needsUpdate, true);
									}
								} else {
									next(
										containers,
										mapi(it, \i, rr -> filtermapi(rr, \j, cc -> if (r > i || (r == i && c >= j)) Some(MRecyclerGridId(i, j)) else None()))
										|> concatA
									);

									next(needsUpdate, true);
								}
							},
							\ -> {
								sb = fgetValue(scrollBounds);

								newContainers = filterVisibleMRecyclerGridContainers(it, sb, fgetValue(initWH));
								nextDistinct(containers, newContainers);

								maybeApply(scrollPercent, \sp -> {
									next(sp.percent, ^cachedPercent);
								});
							}
						);
					}
				})
			]
			|> (\subs ->
				eitherMap(
					scrollPercent,
					\sp -> {
						concat(
							[
								makeSubscribe(sp.percent, \p -> {
									if (getValue(needsUpdate) == getValue(contentSizeNeedsUpdate)) {
										cachedPercent := p;
									}
								})
							],
							subs
						)
					},
					subs
				)
			),
			f
		)
	)
}

MPullSpinState(from : double, to : double);

MPullSpin(manager : MaterialManager, parent : MFocusGroup, topleft : DynamicBehaviour<Point>, spinner : MScrollSpinner, tr : Tropic, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	down = make(false);
	mouse = make(zeroPoint);
	isDragging = make(false);
	spin = spinner.spin;
	resetAnimation = make(Pair(false, false));

	position = extractStruct(spinner.style, MScrollSpinnerOffset(64.0, 40.0));
	offset = ref 0.0;
	arrowColor = extractStruct(spinner.style, MFill(MGrey(600))).color;
	arrowOpacity = extractStruct(spinner.style, FillOpacity(1.0)).opacity;
	bezier = extractStruct(spinner.style, MBezier(const(easingStandartCurve))).bezier;
	duration = tryExtractStruct(spinner.style, MDuration(const(0.0)));
	iosSpinner = contains(spinner.style, MIosStyledSpinner());
	size = extractStruct(spinner.style, MScrollSpinnerSize(if (iosSpinner) 24. else 20.)).size;

	state = make(MPullSpinState(0., 0.));
	arrowScale = make(0.0);
	circleScale = make(1.0);
	opacity = make(0.0);
	posY = make(0.0);

	customSpinner = tryExtractStruct(spinner.style, MCustomSpinner(\__, __, __, __ -> TEmpty())); 
	draggingMouseY = make(None());
	iterationPrc = make(0.);
	releasePrc = make(0.);
	resetPrc = make(0.);

	TCopySize(tr, \sz ->
		TGroup2(
			eitherMap(customSpinner, \cs -> m2t(cs.spinner(draggingMouseY, iterationPrc, releasePrc, resetPrc), parent),
				if (iosSpinner) {
					linesCount = 12;
					generate(0, linesCount, \i ->
						TFrame(0., size / 24., [MFill(MCustomColor(0x69717d)), FillOpacity(i2d(i) / i2d(linesCount))], TFixed(size / 4., size / 12.))
						|> TBorderLeft(size / 4.)
						|> (\t -> TRotate(fselect(iterationPrc, FLift(\ip -> 
								360. / i2d(linesCount) * (1. + dfloor(ip * i2d(linesCount)) + i2d(i))
							)), t))
					)
					|> TGroup
					|> (\t -> TFixSize(t, TFixed(size, size)))
					|> (\t -> TTranslate(const(Point(size / 2., position.normal)), t))
					|> (\t -> TShow(spin, t))
				} else 
					ProgressCircleWithArrow(
						manager.focus,
						fselect(state, FLift(\st -> st.from)),
						fselect(state, FLift(\st -> st.to)),
						2.0,
						size / 2.,
						arrowScale,
						arrowColor,
						arrowOpacity,
						true,
						0.75,
						1.
					)
					|> (\t -> TTranslate(fpoint(const(size), const(0.0)), t))
					|> (\t -> TScale(ffactor2(circleScale), t))
					|> (\t -> TAlpha(opacity, t))
					|> (\t -> TTranslate(fpoint(const(0.0), posY), t))
			)
			|> (\t -> TCenterXIn(t, sz))
			|> (\t -> TCropSize(sz, t))
			|> (\t -> MEasingAnimation(
					manager,
					parent,
					eitherMap(duration, \d -> d.duration, const(1.)),
					bezier,
					spin,
					\v ->
						Some(v),
					\v, prc -> {
						nextDistinct(state, MPullSpinState(
							360. * (0.5 * prc + max(0., prc - 0.5)) + 180.0,
							360. * (0.5 * prc - max(0., 0.5 - prc)) + 90.0
						));
						nextDistinct(iterationPrc, prc);
					},
					[MLoop(\v -> if (v) Some(v) else None())],
					t
				))
			|> (\t -> MEasingAnimation(
					manager,
					parent,
					eitherMap(duration, \d -> d.duration, const(0.2)),
					bezier,
					spin,
					\v ->
						if (v) Some(getValue(posY)) else None(),
					\y, prc -> {
						nextDistinct(arrowScale, 1.0 - prc);
						nextDistinct(posY, lerp(y, position.normal, prc));
						nextDistinct(releasePrc, prc);
					},
					[],
					t
				))
			|> (\t -> MEasingAnimation(
					manager,
					parent,
					eitherMap(duration, \d -> d.duration, const(0.33)),
					bezier,
					resetAnimation,
					\v ->
						if (v.first) Some(Quadruple(
							v.second,
							getValue(state),
							getValue(opacity),
							getValue(posY)
						))
						else None(),
					\v, prc -> {
						nextDistinct(state,
							MPullSpinState(
								lerp(v.second.from, 0., prc),
								lerp(v.second.to, 0., prc),
							)
						);
						nextDistinct(opacity, lerp(v.third, 0., prc));

						if (v.first) {
							nextDistinct(circleScale, 1.0 - prc)
						} else {
							nextDistinct(posY, lerp(v.fourth, 0., prc));
						}

						if (prc == 1.0) {
							nextDistinct(resetAnimation, Pair(false, false));
							nextDistinct(circleScale, 1.0);
							nextDistinct(posY, 0.0);
						}
						nextDistinct(resetPrc, prc);
					},
					[],
					t
				)),

			TInteractive(
				[
					TMouseDownGhost(down),
					TMouseXY(mouse)
				],
				TRectangle(interactiveRectangleStyle, sz)
			)
		),
		true
	)
	|> (\t -> 
		TConstruct(
			[
				makeSubscribe2(down, \d -> 
					if (!getValue(spin)) {
						if (getValue(topleft).y < 4.0 && d) {
							nextDistinct(isDragging, true);
							offset := getValue(posY) - getValue(mouse).y;
						} else if (getValue(isDragging) && !d) {
							if (getValue(posY) > position.normal) {
								nextDistinct(spin, true);
							} else {
								nextDistinct(resetAnimation, Pair(true, false))
							}
							nextDistinct(isDragging, false);
							nextDistinct(draggingMouseY, None());
						}
					}
				),
				makeSubscribe2(mouse, \xy ->
					if (getValue(isDragging)) {
						pos = xy.y + ^offset;
						nextDistinct(draggingMouseY, Some(xy.y));
						nextDistinct(posY, min(pos, position.max));
						nextDistinct(state, MPullSpinState(
							min(pos * 10.0, pos * 2.0 + 360.0),
							pos * 2.0
						));
						nextDistinct(opacity, min(pos / 45.0, 1.0));
						nextDistinct(arrowScale, min(pos / 45.0, 1.0));
					}
				),
				makeSubscribe2(spin, \sp -> if (!sp) nextDistinct(resetAnimation, Pair(true, true)))
			],
			t
		)
	)
}