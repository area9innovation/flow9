import material/internal/material_shadow;
import material/internal/material_util;

export {
	// indeterminate
	MProgressBar2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBar) -> Tropic;
	MProgressCircle2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircle) -> Tropic;

	// determinate, percent should grow from 0.0 to 1.0
	MProgressBarDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBarDeterm) -> Tropic;
	MProgressCircleDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircleDeterm) -> Tropic;

	ProgressCircleWithArrow(parent : MFocusGroup, from : Transform<double>, to : Transform<double>, stroke : double, radius : double,
		triangleScale : Transform<double>, col : int, opacity : double, background : bool, lengthMultiplier : double, rotationMultiplier : double,
		duration : Maybe<double>, useNativeAnimation : bool) -> Tropic;

	mProgressEnabled = ref !isUrlParameterFalse("materialProgress");

	nativeAnimation = !isUrlParameterFalse("nativeAnimation");
}

MProgressBarDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBarDeterm) -> Tropic {
	percent = m.percent;
	style = m.style;

	animated = !contains(style, MNoAnimation());
	progress = make(fgetValue(percent));
	size = extractStruct(style, WidthHeight(-1., -1.));
	color = extractMColor(parent, style, MPrimaryColor());
	defBackground = MColor(color with shade = if (color.color == CCustom()) MTintColor(color) else 200);
	backgroundColor = extractStruct(style, MProgressBackgroundColor(defBackground)).color;
	backgroundOpacity = extractStruct(style, MProgressBackgroundOpacity(0.25)).opacity;

	TLet("rect", TGroup2(if (size.width >= 0.0) TFixed(size.width, 0.0) else TFillX(), TFixed(0.0, if (size.height >= 0.0) size.height else 4.0)),
		TGroup2(
			TRectangle([MThemeFill(parent, backgroundColor), FillOpacity(backgroundOpacity)], TDisplay("rect")),
			TTweak([TAlign(const(b2d(getDefaultRtl())), const(0.0))],
				TScale(fselect(if (animated) progress else percent, FLift(\p -> Factor(p, 1.0))),
					TGhost("rect") |> addTBackground(color)
				),
				TGhost("rect")
			)
		)
	)
	|> (\f ->
		if (animated)
			MEasingAnimation(
				manager,
				parent,
				const(1.),
				const(easingStandartCurve),
				percent,
				\newPercent -> Some(Pair(getValue(progress), newPercent)),
				\newPercent, t -> nextDistinct(progress, lerp(newPercent.first, newPercent.second, t)),
				concatA([
					extractStructMany(style, MDuration(const(1.))),
					extractStructMany(style, MBezier(const(easingStandartCurve))),
					[MForceAnimation(), MStopOffScreen(true)]
				]),
				f
			)
		else f
	)
	|> makeTropicConstant2(size.width, size.height)
}

MProgressBar2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressBar) -> Tropic {
	style = m.style;

	size = extractStruct(style, WidthHeight(-1., -1.));
	color = extractMColor(parent, style, MPrimaryColor());
	defBackground = MColor(color with shade = if (color.color == CCustom()) MTintColor(color) else 100);
	backgroundColor = extractStruct(style, MProgressBackgroundColor(defBackground)).color;
	backgroundOpacity = extractStruct(style, MProgressBackgroundOpacity(1.0)).opacity;

	bar = TGroup2(
		TAnimation(
			TFixed(size.width, size.height)
			|> addTBackground(color),
			const([
				FAnimationKeyframe([
					FTranslateValue(Point(-size.width * 0.5, 0.0)),
					FScaleValue(Factor(0.5, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(size.width * 2.0 / 3.0, 0.0)),
					FScaleValue(Factor(1.0, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(size.width * 5.0 / 3.0, 0.0)),
					FScaleValue(Factor(2.0 / 3.0, 1.0))
				])
			]),
			[
				FAnimationDuration(const(2.5)),
				FAnimationIterations(const(intMax)),
				FAnimationEasing(const(easingLinearCurve))
			]
		),
		TAnimation(
			TFixed(size.width, size.height)
			|> addTBackground(color),
			const([
				FAnimationKeyframe([
					FTranslateValue(Point(-size.width, 0.0)),
					FScaleValue(Factor(0.5, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(-size.width, 0.0)),
					FScaleValue(Factor(0.5, 1.0))
				]),
				FAnimationKeyframe([
					FTranslateValue(Point(size.width, 0.0)),
					FScaleValue(Factor(1.0 / 3.0, 1.0))
				])
			]),
			[
				FAnimationDuration(const(2.5)),
				FAnimationIterations(const(intMax)),
				FAnimationEasing(const(easingLinearCurve))
			]
		)
	);

	TGroup2(
		TRectangle([MThemeFill(parent, backgroundColor), FillOpacity(backgroundOpacity)], TFixed(size.width, size.height)),
		TMask(bar, TRectangle([Fill(black)], TFixed(size.width, size.height)))
	)
}

MProgressCircleDeterm2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircleDeterm) -> Tropic {
	style = m.style;
	percent = m.percent;

	circleSize = extractStruct(style, MProgressCircleSize(4.0, 20.0));
	color = extractMColor(parent, style, MPrimaryColor());
	size = (circleSize.radius + circleSize.stroke) * 2.0;
	arrowScale = extractStruct(style, MAddArrow(zero)).arrowScale;
	noRotation = contains(style, MNoRotation());

	ProgressCircleWithArrow(parent, fselect(percent, FLift(\p -> min(1.0, max(0.0, p)) * 360.)), make(0.), circleSize.stroke, circleSize.radius, arrowScale,
		extractStruct(style, MFill(color)).color, extractStruct(style, FillOpacity(1.0)).opacity, false, 1., if (noRotation) 1. else 2., None(), false)
	|> (\f -> TTranslate(const(Point(size / 2., size / 2.)), f))
	|> makeTropicConstant2(size, size)
}

MProgressCircle2T(manager : MaterialManager, parent : MFocusGroup, m : MProgressCircle) -> Tropic {
	style = m.style;

	circleSize = extractStruct(style, MProgressCircleSize(4.0, 20.0));
	color = extractMColor(parent, style, MPrimaryColor());
	size = (circleSize.radius + circleSize.stroke) * 2.0;
	noRotation = contains(style, MNoRotation());

	from = make(0.0);
	to = make(0.0);
	arrowScale = extractStruct(style, MAddArrow(zero)).arrowScale;

	deltaTimer = manager.manager.deltaTimer;
	duration = 0.65;

	tick = make(false);
	arcMax = 360.0;
	progress = ref getValue(from);
	progressMultiplier = 13.0 * 180.0 / 24.0;

	beforeFn = \tr -> {
		prog = ^progress;

		if (tr) {
			progress := prog - arcMax;
			next(to, prog);
			next(from, prog - arcMax);
		} else {
			next(from, prog);
			next(to, prog);
		}
	}

	ProgressCircleWithArrow(parent, from, to, circleSize.stroke, circleSize.radius, arrowScale, extractStruct(style, MFill(color)).color,
		extractStruct(style, FillOpacity(1.0)).opacity, false, if (noRotation) 1. else 0.75, if (noRotation) 0. else 1., Some(duration), nativeAnimation)
	|> (\progressCircle -> TTranslate(const(Point(size / 2., size / 2.)), progressCircle))
	|> (\progressCircle ->
		if (^mProgressEnabled) {
			if (nativeAnimation) {
				animationPercent = make(0.);
				animationDirection = make(true);
				currentFrom = ref 0.;

				TAnimation(progressCircle, const([
					FAnimationKeyframe([FAlphaValue(1.)]),
					FAnimationKeyframe([FAlphaValue(0.99)]),
				]), [
					FAnimationPercent(animationPercent),
					FAnimationAlternate(),
					FAnimationIterations(const(intMax)),
					FAnimationEasing(const(easingStandartCurve)),
					FAnimationDuration(const(duration))
				])
				|> (\t -> TConstruct([
						makeSubscribe2(animationPercent, \prc -> {
							if (prc == 1.0 || prc == 0.0) reverseBehaviour(animationDirection);
							if (prc == 0.0) currentFrom := getValue(from);
							if (getValue(animationDirection))
								nextDistinct(to, ^currentFrom + arcMax * prc)
							else
								nextDistinct(from, ^currentFrom + arcMax * (1. - prc))
						}
						)
					], t))
			} else
			MEasingAnimation(manager, parent, const(duration), const(easingStandartCurve), tick,
				\tr -> {
					beforeFn(tr);

					Some(tr)
				},
				\tr, p -> {
					prog = ^progress;

					if (tr) {
						next(from, prog - arcMax * (1.0 - p));
						next(to, prog)
					} else {
						next(from, prog);
						next(to, prog + arcMax * p)
					}
				},
				[MAutoStart(), MLoop(\tr -> {beforeFn(!tr); Some(!tr)}), MForceAnimation(), MStopOffScreen(true)],
				TConstructRenderable(
					[
						\ -> { deltaTimer.attach(); \ -> deltaTimer.detach(); },
						\ -> subscribe2(deltaTimer.timer, \dt -> {
							progress := ^progress + progressMultiplier * (dt / duration);
						}),
					],
					TGroup2(
						TRectangle(interactiveRectangleStyle, TFixed(size, size)),
						progressCircle
					)
				)
			)
		} else
			progressCircle
	)
	|> makeTropicConstant2(size, size)
}

ProgressCircleWithArrow(parent : MFocusGroup, from : Transform<double>, to : Transform<double>, stroke : double, radius : double,
	triangleScale : Transform<double>, col : int, opacity : double, background : bool, lengthMultiplier : double, rotationMultiplier : double,
	duration : Maybe<double>, useNativeAnimation : bool) -> Tropic {

	innerR = radius /*10.0*/;
	outterR = 2.0 * radius /*20.0*/;
	triangleMetrics = 5.0;
	shadow = const(4.0);

	triangle =
		TGraphics([LineTo(0.0, 2.0), LineTo(sqrt(2.0), 1.0), LineTo(0.0, 0.0), ClosePath()], [Fill(col), FillOpacity(opacity)])
		|> (\m -> TScale(fselect(triangleScale, FLift(\s -> Factor(triangleMetrics * s, triangleMetrics * s))), m))
		|> (\m -> TTranslate(fselect(triangleScale, FLift(\s -> (Point(0.0, -innerR - triangleMetrics * s)))), m))
		|> (\m -> TRotate(if (rotationMultiplier == 1.) from else fselect(from, FLift(\fr -> fr * rotationMultiplier)), m));

	outterCircle = \ ->
		TCircle(outterR, [Fill(white)])
		|> (\m -> TShadowShape(parent, shadow, m, RoundShape()))
		|> (\m -> TTranslate(const(Point(-outterR, -outterR)), m));

	TDynamicGraphics(
		fselect2(from, to, FLift2(\f, t ->
			CustomSector2(
				0.,
				0.,
				radius,
				0.0,
				abs(t - f) * lengthMultiplier,
				false,
				[]
			).path
		)),
		const([
			Stroke(col),
			StrokeWidth(stroke),
			StrokeOpacity(opacity),
		])
	)
	|> (\tr ->
		if (useNativeAnimation) {
			TAnimation(
				TRotate(fmultiply(from, const(lengthMultiplier)), tr),
				const([
					FAnimationKeyframe([FRotateValue(0.)]),
					FAnimationKeyframe([FRotateValue(360.)]),
				]),
				[
					FAnimationIterations(const(intMax)),
					FAnimationDuration(const(2. * either(duration, 0.))),
				]
			)
		} else {
			TRotate(
				fselect2(from, to, FLift2(\f, t ->
					if (t > f)
						f * rotationMultiplier
					else
						f * rotationMultiplier + (t - f) * lengthMultiplier
				)),
				tr
			)
		}
	)
	|> (\f -> TGroup2(f, triangle))
	|> (\f -> if (!background) f else TGroup2(outterCircle(), f))
}