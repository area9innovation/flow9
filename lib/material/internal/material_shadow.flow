import material/measing;
import material/internal/material_theme;

export {
	// Change to true if you want to use filter shadows instead of gradient shadow which are looking awful now.
	useShadowFilters = ref !mobile || js || isUrlParameterTrue("filterShadows");
	showMaterialShadows = ref !isUrlParameterFalse("materialShadows");

	// Adds a shadow to reflect the z-order as specified in
	// https://www.google.com/design/spec/what-is-material/elevation-shadows.html
	// z is between 0.0 (no shade) to 24.0
	TShadow(parent : MFocusGroup, z : Transform<double>, t : Tropic) -> Tropic;
	TEasedShadow(manager : MaterialManager, parent : MFocusGroup, z : Transform<double>, t : Tropic, duration : double) -> Tropic;

	TShadowShape(parent : MFocusGroup, z : Transform<double>, t : Tropic, shape: ShadowShape) -> Tropic;
	TEasedShadowShape(manager : MaterialManager, parent : MFocusGroup, z : Transform<double>, t : Tropic, duration : double, shape : ShadowShape) -> Tropic;
}

TShadow(parent : MFocusGroup, z : Transform<double>, t : Tropic) -> Tropic {
	TShadowShape(parent, z, t, RectangleShape("MEmpty"));
}

TEasedShadow(manager : MaterialManager, parent : MFocusGroup, z : Transform<double>, t : Tropic, duration : double) -> Tropic {
	TEasedShadowShape(manager, parent, z, t, duration, RectangleShape("MEmpty"))
}

TEasedShadowShape(manager : MaterialManager, parent : MFocusGroup, z0 : Transform<double>, t : Tropic, duration : double,
	shape : ShadowShape) -> Tropic {
	if (parent.theme.enableAnimations) {
		zAnimation = make(fgetValue(z0));

		TShadowShape(parent, zAnimation, t, shape)
		|> (\f ->
			MEasingAnimation(
				manager,
				parent,
				const(duration),
				const(easingStandartCurve),
				z0,
				\v : double -> if (v != getValue(zAnimation)) Some(Pair(getValue(zAnimation), v)) else None(),
				\v, dx -> next(zAnimation, v.first + dx*(v.second - v.first)),
				[MContinueOnNone()],
				f
			)
		)
	} else {
		TShadowShape(parent, z0, t, shape)
	}
}

roundedCornerRectangle(x : double, y : double, width : double, height : double) -> [StaticGraphicOp] {
	[
		MoveTo(x, y),
		LineTo(x + width, y),
		CubicBezierTo(x, y + height, x, y),
		LineTo(x, y)
	]
}

TRoundedRectangleShadow(tr : Tropic, lightBackground : bool, z : Transform<double>) -> Tropic {
	shadowOpacity = if (lightBackground) 0.16 else 0.24;
	gradientStyle = [GradientPoint(black, shadowOpacity, 0.0), GradientPoint(black, 0.0, 1.0)];
	cornerRadius = 4.;

	TransformTAcc2(\tac -> {
		b1 = tr |> tac;

		TAcc(
			FGroup2(
				FMutable(fselect3(b1.metrics.width, b1.metrics.height, z, \wd, hgt, r -> {
					if (r > 0. && wd > 0. && hgt > 0.) {
						sideOffset = r / 2.;
						topOffset = r / 4.;
						bottomOffset = r;

						FGroup(
							[
								// Top
								FScale(
									const(1.),
									const(topOffset / sideOffset),
									FMask(
										FGraphics(
											rectangle(-sideOffset, -sideOffset, sideOffset * 2., sideOffset * 2.),
											[RadialGradient(), GradientFill(0., gradientStyle)]
										),
										FGraphics(
											rectangle(-sideOffset, -sideOffset, sideOffset, sideOffset),
											[Fill(black)]
										)
									)
								),
								FGraphics(
									roundedCornerRectangle(0., 0., cornerRadius, cornerRadius),
									[Fill(black), FillOpacity(shadowOpacity)]
								),
								FGraphics(
									rectangle(0., -topOffset, wd, topOffset),
									[GradientFill(270., gradientStyle)]
								),
								FScale(
									const(1.),
									const(topOffset / sideOffset),
									FMask(
										FGraphics(
											rectangle(wd - sideOffset, -sideOffset, sideOffset * 2., sideOffset * 2.),
											[RadialGradient(), GradientFill(0., gradientStyle)]
										),
										FGraphics(
											rectangle(wd, -sideOffset, sideOffset, sideOffset),
											[Fill(black)]
										)
									)
								),
								FGraphics(
									roundedCornerRectangle(wd, 0., -cornerRadius, cornerRadius),
									[Fill(black), FillOpacity(shadowOpacity)]
								),
								// Sides
								FGraphics(
									rectangle(-sideOffset, 0., sideOffset, hgt),
									[GradientFill(180., gradientStyle)]
								),
								FGraphics(
									rectangle(wd, 0., sideOffset, hgt),
									[GradientFill(0., gradientStyle)]
								),
								// Bottom
								FScale(
									const(1.),
									const(bottomOffset / sideOffset),
									FMask(
										FGraphics(
											rectangle(-sideOffset, (hgt - bottomOffset) * sideOffset / bottomOffset,
												sideOffset * 2., sideOffset * 2.),
											[RadialGradient(), GradientFill(0., gradientStyle)]
										),
										FGraphics(
											rectangle(-sideOffset, hgt * sideOffset / bottomOffset, sideOffset, sideOffset),
											[Fill(black)]
										)
									)
								),
								FGraphics(
									roundedCornerRectangle(0., hgt, cornerRadius, -cornerRadius),
									[Fill(black), FillOpacity(shadowOpacity)]
								),
								FGraphics(
									rectangle(0., hgt, wd, bottomOffset),
									[GradientFill(90., gradientStyle)]
								),
								FScale(
									const(1.),
									const(bottomOffset / sideOffset),
									FMask(
										FGraphics(
											rectangle(wd - sideOffset, (hgt - bottomOffset) * sideOffset / bottomOffset,
												sideOffset * 2., sideOffset * 2.),
											[RadialGradient(), GradientFill(0., gradientStyle)]
										),
										FGraphics(
											rectangle(wd, hgt * sideOffset / bottomOffset, sideOffset, sideOffset),
											[Fill(black)]
										)
									)
								),
								FGraphics(
									roundedCornerRectangle(wd, hgt, -cornerRadius, -cornerRadius),
									[Fill(black), FillOpacity(shadowOpacity)]
								),
							],
							false
						)
					} else {
						FEmpty()
					}
				})),
				b1.form,
				false
			),
			b1.metrics,
			b1.minWidth,
			b1.minHeight,
			b1.maxWidth,
			b1.maxHeight,
			b1.xFillers,
			b1.yFillers,
			b1.addFillers,
			b1.xConstant,
			b1.yConstant,
			b1.disposers,
		)
	})
}

TRoundShadow(tr : Tropic, lightBackground : bool, z : Transform<double>) -> Tropic {
	shadowOpacity = if (lightBackground) 0.32 else 0.48;

	TransformTAcc2(\tac -> {
		b1 = tr |> tac;

		TAcc(
			FGroup2(
				FMutable(fselect3(b1.metrics.width, b1.metrics.height, z, \wd, hgt, r -> {
					if (r > 0. && wd > 0. && hgt > 0.) {
						gradientStyle =
							[
								GradientPoint(black, shadowOpacity, 0.0),
								GradientPoint(black, shadowOpacity, (wd - r) / (wd + r)),
								GradientPoint(black, 0.0, 1.0)
							];

						FOval2(wd / 2., wd / 2. + r / 4., wd + r, wd + r, [RadialGradient(), GradientFill(0.0, gradientStyle)])
						|> (\f ->
							if (hgt == wd)
								f
							else
								FScale(const(1.), const(hgt / wd), f)
						)
						|> (\f ->
							FMask(
								FOval2(wd / 2., hgt / 2., wd + r * 2., hgt + r * 2., [Stroke(black), StrokeWidth(r * 2.)]),
								f
							)
						)
					} else {
						FEmpty()
					}
				})),
				b1.form,
				false
			),
			b1.metrics,
			b1.minWidth,
			b1.minHeight,
			b1.maxWidth,
			b1.maxHeight,
			b1.xFillers,
			b1.yFillers,
			b1.addFillers,
			b1.xConstant,
			b1.yConstant,
			b1.disposers,
		)
	})
}

TBottomRectangleShadow(tr : Tropic, lightBackground : bool, z : Transform<double>) -> Tropic {
	shadowOpacity = if (lightBackground) 0.16 else 0.24;
	gradientStyle = [GradientPoint(black, shadowOpacity, 0.0), GradientPoint(black, 0.0, 1.0)];

	TransformTAcc2(\tac -> {
		b1 = tr |> tac;

		TAcc(
			FGroup2(
				FMutable(fselect3(b1.metrics.width, b1.metrics.height, z, \wd, hgt, r -> {
					if (r > 0. && wd > 0. && hgt > 0.) {
						shadowOffset = r / 2.;

						FGraphics(
							rectangle(0., hgt, wd, shadowOffset),
							[GradientFill(90., gradientStyle)]
						)
					} else {
						FEmpty()
					}
				})),
				b1.form,
				false
			),
			b1.metrics,
			b1.minWidth,
			b1.minHeight,
			b1.maxWidth,
			b1.maxHeight,
			b1.xFillers,
			b1.yFillers,
			b1.addFillers,
			b1.xConstant,
			b1.yConstant,
			b1.disposers,
		)
	})
}

TShadowShape(parent : MFocusGroup, zo : Transform<double>, t : Tropic, shape : ShadowShape) -> Tropic {
	lightBackground = getLightBackground(parent);

	if (!^showMaterialShadows || zo == zero) {
		t
	} else if (^useShadowFilters) {
		TCopySize(
			t,
			\tr -> TSelect(zo, \z ->
				if (z == 0.0) TEmpty()
				else {
					zPercent = z / 24.;

					placement1 = lerp(0., 19., zPercent);
					color1 = lerp(0.1, 0.3, zPercent);
					blur1 = lerp(0., 38., zPercent);

					placement2 = lerp(0., 15., zPercent);
					color2 = lerp(0.24, 0.22, zPercent);
					blur2 = lerp(2., 12., zPercent);

					colorMultiplier = 1.5;
					blurMultiplier = if (js) 1. else 3.;

					addFilter = \size ->
						TFilter(
							[
								// shadow by key light
								DropShadow([
									Placement(90.0, placement1),
									Color(black, color1 * colorMultiplier),
									Radius(blur1 * blurMultiplier),
								]),
								// shadow by ambient light
								// DropShadow([
								// 	Placement(90.0, placement2),
								// 	Color(black, color2),
								// 	Radius(blur2 * blurMultiplier),
								// ])
							],
							size
						);


					switch (shape: ShadowShape) {
						RectangleShape(component):
							TBorder(-0.5, -0.5, -0.5, -0.5, tr)
							|> (\f -> MShape(parent, [MFill(MBackgroundColor(lightBackground))], f, component))
							|> addFilter
							|> (\f -> TCenterIn(f, tr));
						BottomRectangleShape():
							TBorder(0.0, 0.0, 0.0, -0.5, tr)
							|> (\f -> TRectangle([MFill(MBackgroundColor(lightBackground))], f))
							|> addFilter
							|> (\f -> TCenterIn(f, tr));
						RoundShape():
							TAttach(tr, \m ->
								TSelect(m.width, \wd ->
									TCenterIn(
										TCircle(wd / 2.0 - 0.5, [MFill(MBackgroundColor(lightBackground))])
										|> addFilter,
										TFixed(wd, wd)
									)
								)
							);
						TropicShape(ts):
							ts
							|> addFilter;
					}
				}
			),
			false
		)
	} else {
		switch (shape : ShadowShape) {
			RectangleShape(component): {
				shp = getShapeByComponent(parent, component).defaultShape;

				switch (shp.tl : MaterialShapeCorner) {
					RoundedCornerPercent(__) : TRoundShadow(t, lightBackground, zo);
					default : TRoundedRectangleShadow(t, lightBackground, zo);
				}
			}
			BottomRectangleShape(): {
				TBottomRectangleShadow(t, lightBackground, zo);
			}
			RoundShape(): {
				TRoundShadow(t, lightBackground, zo)
			}
			TropicShape(ts):
				ts; //May be it should be updated if somebody will need somthing like this - http://www.clker.com/cliparts/K/q/x/H/S/b/fish-shadow-md.png
		}
	}
	/*else {
		TSelect(zo, \z ->
			if (z == 0.0) TEmpty()
			else {
				TFilter(
					concat(
						// shadow by key light
						[
							DropShadow([
								Placement(90.0, z * if (flash) 0.5 else 1.5),
								Color(black, if (lightBackground) 0.16 else 0.24),
								Radius((if (flash) 1.5 else 3.0) * z),
								Spread(if (flash) 1.0 else 2.0),
							])
						],
						// shadow by ambient light
						map([0.0, 180.0, 270.0], \ang -> {
							DropShadow([
								Placement(ang, z / if (flash) 9.0 else 3.0),
								Color(black, if (lightBackground) 0.16 else 0.24),
								Radius((if (flash) 1.5 else 3.0) * z / 3.0),
								Spread(if (flash) 1.0 else 2.0),
							])
						})
					),
					// [
					// 	DropShadow([
					// 		Placement(0.0, dpow(z, 1.1) * 0.5),
					// 		Color(black, 0.22),
					// 		Radius(1.0 + z * 0.4),
					// 		Spread(1.0 + z * 0.4),
					// 	]),
					// 	DropShadow([
					// 		Placement(90.0, dpow(z, 1.2) * 0.5),
					// 		Color(black, 0.10 + z * 0.1),
					// 		Radius(dpow(z, 1.2) * 0.5),
					// 		Spread(dpow(z, 1.2) * 0.5),
					// 	])
					// ],
					switch (shape: ShadowShape) {
						RectangleShape():
							TBorder(-0.5, -0.5, -0.5, -0.5, TGhost("content"))
							|> (\f -> TRounded(2.0, 2.0, 2.0, 2.0, [MFill(MBackgroundColor(lightBackground)))], f))
							|> (\f -> TCenterIn(f, TGhost("content")));
						BottomRectangleShape():
							TBorder(0.0, 0.0, 0.0, -0.5, TGhost("content"))
							|> (\f -> TRectangle([MFill(MBackgroundColor(lightBackground)))], f))
							|> (\f -> TCenterIn(f, TGhost("content")));
						RoundShape():
							TAttach(TGhost("content"), \m -> {
								wd = fgetValue(m.width);
								TCenterIn(
									TCircle(wd / 2.0 - 0.5, [MFill(MBackgroundColor(lightBackground)))]),
									TFixed(wd, wd)
								)
							});
						TropicShape(tr):
							TDisplay("content");
					}
				)
			}
		)
		|> (\f -> TGroup2(f, TDisplay("content")))
		|> (\f -> TLet("content", t, f))
	}*/
}