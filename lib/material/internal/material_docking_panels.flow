import material/material;
import material/internal/types;
import material/internal/material_util;

// TODO : Used nowhere, maybe delete

export {
	MDockingUI2T(manager : MaterialManager, m : MDockingUI, lightBackground : bool, m2t : (Material) -> Tropic) -> Tropic;
	MDockingArea2T(manager : MaterialManager, m : MDockingArea, lightBackground : bool, m2t : (Material) -> Tropic) -> Tropic;
}

makePanelContent(state : MDockingState, id : int, mobilePanel : bool, flipped : bool, resizePressed : DynamicBehaviour<bool>, lightBackground : bool, style : [MDockingStyle], m2t : (Material) -> Tropic) -> Material {
	bgColor = MColor2int(extractStruct(style, MDockingBackground(if (lightBackground) MGrey(300) else MGrey(950))).color);
	contentA = getValue(state.content)[id];
	dontShowSep = contains(style, MDockingDontShowSeparators());
	width = getTropicMetrics(m2t(getValue(state.size)[id])).width;
	height = getTropicMetrics(m2t(getValue(state.size)[id])).height;

	pad = 10.0;
	minWidth = 48.0;
	handleHeight = 36.0;
	sep = if (dontShowSep) TEmpty() else {if (flipped) MSeparator(false) else MSeparator(true);};

	resizeBar = {
		dot = TRounded(1.0, 1.0, 1.0, 1.0, [MFill(MGrey(700))], TFixed(1.0, 1.0));
		gapW = TFixed(2.0, 0.0);
		gapH = TFixed(0.0, 2.0);
		cornerSpace = TFixed(24.0, 18.0);

		MLines([
			TFillY(),
			MCols([
				TFillX(),  
				MCursor(
					MoveCursor(),
					MGroup2(
						TRectangle(interactiveRectangleStyle, cornerSpace ),
						MAvailable(
							MLines([
								TFillY(),
								MCols([
									TFillX(), 
									MLines([
										MCols([TFixed(6.0, 0.0), dot]),
										gapH,
										MCols([TFixed(3.0, 0.0), dot, gapW, dot]),
										gapH,
										MCols([dot, gapW, dot, gapW, dot])
									]), 
									TFixed(3.0, 0.0)
								]),
								TFixed(0.0, 3.0)
							]),
							cornerSpace
						)	
					)	    
				)		
			])
		]) |> (\f -> MInteractive([TMouseDown(resizePressed)], f ));
	};

	buttonsA = mapi(contentA, \i, c -> {		
		switch (c : MDockingPanelItem) {
			MDockingPanelButtonsItem(ic, lb, st): {

				panelHeight = if (dontShowSep) (minWidth * i2d(length(contentA))) else (minWidth * i2d(length(contentA))) + (i2d(length(contentA)) - 1.0);
				size = TFixed(width, panelHeight);
				next(state.size, replace(getValue(state.size), id , size));

				onClick  = extractStruct(st, MOnClick(nop));
				p = if (flipped) {
					MCols2(
						MGroup([
							MAvailable(
								MCols([
									MIconButton(ic, [MIconSize(24.0)], [onClick]) |>(\f -> MCenter(f)), 
									TFillXY(), 
								])|>(\f -> MCenterIn(f,TFixed(minWidth, minWidth) )), 
								TFillXH(width)
							)
						]),     
						if (i == length(contentA) - 1) TEmpty() else sep
					);
				} else {
					MLines2(
						MGroup([
							MAvailable(
								MCols([
									if (width <= 100.0)
									MIcon(ic, [MIconSize(24.0)]) |> (\f -> MCenterIn(f,TFillXH(minWidth)))
									else
									MIcon(ic, [MIconSize(24.0)]) |> (\f -> MCenterY(f)),
									if (width <= 100.0) TEmpty() else TFillXY(), 
									if (width <= 100.0) TEmpty() else
									MText(lb, [MListBody])|>(\f -> MCenterY(f))
								]),
								TFillXH(minWidth)  
							),
						]),
						if (i == length(contentA) - 1) TEmpty() else {if (dontShowSep) TEmpty() else sep}
					);
				}

				MBorder(pad, 0.0, pad, 0.0, p);
			}
			MDockingPanelCustomItem(mat): mat ;	 
		};
	});

	MGroup([ 
		if (flipped) MCols(buttonsA) else MLines(buttonsA),
		if (mobilePanel) resizeBar else TEmpty()
	]);
}

makeMovablePanel(manager : MaterialManager, state : MDockingState, id : int, position : DynamicBehaviour<Point>, cursorPosition : DynamicBehaviour<[Point]>, enabled : DynamicBehaviour<bool>, minimizedA : DynamicBehaviour<[int]>, visibleA : DynamicBehaviour<[bool]>, defSizeA : DynamicBehaviour<[Material]>, style : [MDockingStyle], lightBackground : bool, m2t : (Material) -> Tropic) -> Tropic {
	leftHandle = contains(style, MDockingLeftHandle());
	rightHandle = contains(style, MDockingRightHandle());
	vertical = if (leftHandle || rightHandle) true else false;
	flipped = contains(style, MDockingFlipHorizontal());
	ifMobile = extractStruct(style, MDockingMobileWatcher(make(false))).mobile;
	title = getValue(state.title)[id];
	size = m2t(getValue(state.size)[id]);
	closeButton = contains(style, MDockingCloseButton());
	dontShowSep  = contains(style, MDockingDontShowSeparators());
	panelIcon0 = getValue(state.panelIcon)[id];
	panelIcon =if (panelIcon0 == "") "web_asset" else panelIcon0;
	dockA = state.dock;
	sizeA = state.size;

	resizePressed = make(false);
	isResizing = make(false);
	
	content = makePanelContent(state, id, true, flipped, resizePressed, lightBackground, style, m2t);

	width = getTropicMetrics(m2t(getValue(state.size)[id])).width;
	height = getTropicMetrics(m2t(getValue(state.size)[id])).height;
	defWidth = getTropicMetrics(m2t(getValue(defSizeA)[id])).width;
	defHeight = getTropicMetrics(m2t(getValue(defSizeA)[id])).height;
	color = MColor2int(extractStruct(style, MWhite()));
	bgColor = MColor2int(extractStruct(style, MDockingBackground(if (lightBackground) MGrey(300) else MGrey(950))).color);

	handleHeight = 36.0;
	pad = 0.0;
	expanded = make(getValue(state.expanded)[id]);
	expandedA = getValue(state.expanded);

	mouseXyLocal = make(zeroPoint);
	dragPressed = make(false);
	WH = make(WidthHeight(width, height));

	simpleDragHandleBar = {
		if (flipped) {
			MCenterIn(
				MCols([
					TRounded(1.0, 1.0, 1.0, 1.0, [Fill(color)], TFixed(1.0, 18.0)),
					TFixed(2.0, 0.0),
					TRounded(1.0, 1.0, 1.0, 1.0, [Fill(color)], TFixed(1.0, 18.0))
				]),
				TFixed(handleHeight, 24.0)
			); 
		} else { 
			MCenterIn(
				MLines([
					TRounded(1.0, 1.0, 1.0, 1.0, [Fill(color)], TFixed(18.0, 1.0)),
					TFixed(0.0, 2.0),
					TRounded(1.0, 1.0, 1.0, 1.0, [Fill(color)], TFixed(18.0, 1.0))
				]),
				TFixed(24.0, handleHeight)
			); 
		};
	};

	makeIconToggleButton = \b : DynamicBehaviour<bool>, on : string, off : string, iconSize: double, iconColor : MColor -> {
		MIconButton(on, [MIconSize(iconSize), iconColor], [MOnClick(\ -> next(state.expanded, replace(getValue(state.expanded), id , !getValue(state.expanded)[id])))])
			|> (\f -> MSelect(state.expanded,\e -> 
				if (e[id]) f else MIconButton(off, [MIconSize(iconSize), iconColor], [
					MOnClick(\ -> {
						next(state.expanded, replace(getValue(state.expanded), id , !getValue(state.expanded)[id]));
						})
					])
				)
			) |> MCenterY
		}

	topBar = MAvailable(
		MGroup([
			TRounded(3.0, 3.0, 0.0, 0.0, [MFill(MGrey(950))], TFillXH(handleHeight))
				|> (\f -> MSelect(state.expanded,\e -> if (e[id]) f else TRounded(3.0, 3.0, 3.0, 3.0, [MFill(MGrey(950))], TFillXY()))),
			if (width < 88.0)
				MCenterIn(simpleDragHandleBar, TFillXH(handleHeight))
			else
			MCols([
				TFixed(8.0, 0.0),
				MIcon(panelIcon, [MIconSize(18.0), MWhite()]) |> MCenterY,
				TFixed(8.0, 0.0),
				MEllipsisText(title, [MWhite(), MCaptionSolid, MMinWidth(120.0)])|> MCenterY,
				TFillX(),
				MIconButton("remove", [MIconSize(18.0), MWhite()], [
					MOnClick(\ -> { 
						next(visibleA, replace(getValue(visibleA), id , false));
						next(minimizedA, arrayPush(getValue(minimizedA), id));
					})
				]) |> MCenterY,
				if (closeButton)
					MCols2(MIconButton("remove_red_eye", [MIconSize(18.0), MWhite()], [
						MOnClick(\ -> next(enabled, false))
					])|> MCenterY,TFixed(4.0, 0.0))
				else TEmpty(),
				makeIconToggleButton(expanded, "keyboard_arrow_up", "keyboard_arrow_down", 18.0, MWhite()),

			])
		]),
		TFillXH(handleHeight)
	);

	makePanel = \c : Material -> {
			MInteractive(
				[TMouseXY(mouseXyLocal)],
				if (flipped) 
					MCols([
						MAvailable(
							MSelect(state.expanded,\e ->
								MGroup([
									if (e[id]) TRounded(3.0, 0.0, 0.0, 3.0, [MFill(MGrey(950))], TFillXY())
									else TRounded(3.0, 3.0, 3.0, 3.0, [MFill(MGrey(950))], TFillXY()),
									MCenterIn(simpleDragHandleBar, TFixed(handleHeight, width)),
								])
							),
							TFixed(handleHeight, width)
						),
						MAvailable(
							MGroup([
								TRectangle([Fill(113355)], m2t(size) |> TRotate90 ),
								MCenterIn(MBorder(pad, pad, pad, pad, c), size |> TRotate90),
							]),
							size |> TRotate90 
						)
					])
				else
					MAvailable(
						MLines([
							topBar,
							MSelect(state.expanded,\e -> if (e[id])
								MGroup([TRectangle([Fill(bgColor)], TFillXY()), c])
								else TEmpty()
							)
						]),
						MSelect(WH, \wh -> TFixed(wh.width, wh.height))
					)
			)	
	}

	movablePanel =
		MDraggable(id, MShadow(const(2.0),
				MInteractive([TMouseDownGhost(dragPressed)],
					MConstruct([makeSubscribe(dragPressed, \p -> if (p) next(cursorPosition, replace(getValue(cursorPosition), id, getValue(mouseXyLocal)))),
						],
						makePanel(content) 
					)
				)), []);

	MConstruct([
		makeSubscribe(enabled,\e -> {
			if (e) next(visibleA, replace(getValue(visibleA), id , e));
			next(minimizedA, removeIndex(getValue(minimizedA), elemIndex(getValue(minimizedA), id, -intMax)));
		}),
		makeSubscribe(resizePressed, \p -> {
				if (p) {
					next(isResizing, true);
				} else {
					if (getValue(isResizing)) {
						next(isResizing, false);

						// if ((getValue(mouseXyLocal).x < defWidth) || (getValue(mouseXyLocal).y < defHeight)) {
						// 	// next(sizeA, replace(getValue(sizeA), id, getValue(defSizeA)[id]));
						// } else {
						// 	// next(sizeA, replace(getValue(sizeA), id, getValue(defSizeA)[id]));
						// 	// 
						// 	// next(sizeA, replace(getValue(sizeA), id, TFixed(getValue(WH).width, getValue(WH).height)));
						// }
					}
				}
			}),
			makeSubscribe(mouseXyLocal, \mxy -> { 
				if (getValue(isResizing)) {
					next(WH, WidthHeight(mxy.x, mxy.y));
				};
			}),
		],
		MSelect(dockA, \d -> if (d[id][0] < 0) {
			next(ifMobile, true); 
			MShow(
				enabled,
				MSelect(visibleA, \v ->
					if (v[id]) MTranslate(const(getValue(position)), movablePanel)
					else TEmpty()
				)
			);
		} else {
			next(ifMobile, false); 
			TEmpty();
		})
	) |> m2t;
}

makeDockedPanel(manager : MaterialManager, state : MDockingState, id : int, isCol : bool, style : [MDockingStyle], handleHeight: double, resizePressedV : DynamicBehaviour<bool>, panelSizeA : DynamicBehaviour<[Material]>, lightBackground : bool, m2t : (Material) -> Tropic) -> Tropic {
	bgColor = extractStruct(style, MDockingBackground(if (lightBackground) MGrey(200) else MGrey(950))).color;
	color = extractStruct(style, MGrey(950));
	leftHandle = contains(style, MDockingLeftHandle());
	rightHandle = contains(style, MDockingRightHandle());
	title = getValue(state.title)[id];
	pstyle = getValue(state.style)[id];
	panelIcon0 = getValue(state.panelIcon)[id]; 
	panelIcon = if (panelIcon0 == "") "web_asset" else panelIcon0;

	panelSizeId = getValue(panelSizeA)[id];
	dropSize = 4.0;
	flipped = contains(pstyle, MDockingFlipHorizontal());
	vertical = !isCol;
	dockedBarHeight = 36.0;
	resizePressed = make(false);
	isResizing = make(false);
	mouseXyLocal = make(zeroPoint);
	WH = make(WidthHeight(getTropicMetrics(m2t(panelSizeId)).width, getTropicMetrics(m2t(panelSizeId)).height + dropSize));
	expanded = make(getValue(state.expanded)[id]);
	
	isHovering = make(false);
	separatorColor = extractStruct(style, MDockingHandlesColor(if (lightBackground) MGrey(300) else MGrey(600), MBlue(600))).color;
	draggingColor = extractStruct(style, MDockingHandlesColor(if (lightBackground) MGrey(300) else MGrey(600), MBlue(600))).hoverColor;
	barColor = MGrey(300);
	textColor = MGrey(950);

	width = if (isCol) getTropicMetrics(m2t(getValue(state.size)[id])).width else getTropicMetrics(m2t(getValue(state.size)[id])).height;
	height = if (isCol) getTropicMetrics(m2t(getValue(state.size)[id])).height else getTropicMetrics(m2t(getValue(state.size)[id])).width;
	size = TFixed(width, height);

	content = makePanelContent(state, id, false, vertical, resizePressed, lightBackground, pstyle, m2t);
	pad = 10.0;
	rnd = 0.0;

	posCorrection = 
	if (leftHandle || vertical) {dx = 4.0; dy = (height / 2.0) - 12.0; Point(dx, -dy);} 
		else if (rightHandle){dx = 4.0; dy = (height / 2.0) - 12.0; Point(dx, dy);} 
			// else {dx = (width / 2.0) - 12.0; dy = 4.0; Point(-dx, dy);};
			else {dx = 0.0; dy = 0.0; Point(-dx, dy);};

	handle =  {
		r = 2.0;
		t = 1.0;
		if (vertical) {
			TGroup2(
				TRectangle(interactiveRectangleStyle, TFixed(handleHeight, 24.0)),
				TCenterIn(
					TLines([
						TCols([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(2.0, 0.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
						TFixed(0.0, 2.0),
						TCols([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(2.0, 0.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
						TFixed(0.0, 2.0),
						TCols([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(2.0, 0.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
						TFixed(0.0, 2.0),
						TCols([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(2.0, 0.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
					]),
					TFixed(handleHeight, 24.0)
				)
			);
		} else {
			TGroup2(
				TRectangle([MFill(bgColor), FillOpacity(0.5)], TFixed(24.0, handleHeight)),
				TCenterIn(
					TCols([
						TLines([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(0.0, 2.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
						TFixed(2.0, 0.0),
						TLines([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(0.0, 2.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
						TFixed(2.0, 0.0),
						TLines([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(0.0, 2.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
						TFixed(2.0, 0.0),
						TLines([TRounded(r, r, r, r, [MFill(color)], TFixed(t, t)), TFixed(0.0, 2.0), TRounded(r, r, r, r, [MFill(color)], TFixed(t, t))]),
					]),
					TFixed(24.0, handleHeight)
				)
			);
		};
	};

	makeIconToggleButton = \b : DynamicBehaviour<bool>, on : string, off : string, iconSize: double, iconColor : MColor -> {
		MIconButton(on, [MIconSize(iconSize), iconColor], [MOnClick(\ -> next(state.expanded, replace(getValue(state.expanded), id , !getValue(state.expanded)[id])))])
			|> (\f -> MSelect(state.expanded,\e -> 
				if (e[id]) f else MIconButton(off, [MIconSize(iconSize), iconColor], [
					MOnClick(\ -> next(state.expanded, replace(getValue(state.expanded), id , !getValue(state.expanded)[id])))
					])
				)
			) |> MCenterY
		}

	topBar = {
		MAvailable(
			MGroup([
				TRounded(0.0, 0.0, 0.0, 0.0, [MFill(barColor), FillOpacity(0.7)], TFillXH(dockedBarHeight)) 
				|> (\f -> MSelect(state.expanded,\e -> if (e[id]) f else {
					next(WH, WidthHeight(getValue(WH).width, 0.0));
					TRounded(0.0, 0.0, 0.0, 0.0, [MFill(barColor)], TFillXH(dockedBarHeight));
				})),
				// if (width < 88.0)
					// MCenterIn(dragHandle, TFillXH(handleHeight))
				// else
				MCols([
					TFixed(8.0, 0.0),
					MIcon(panelIcon, [MIconSize(18.0), textColor]) |> MCenterY,
					TFixed(8.0, 0.0),
					MEllipsisText(title, [textColor, MCaptionSolid, MMinWidth(120.0)]) |> MCenterY,
					TFillX(),
					makeIconToggleButton(expanded, "keyboard_arrow_up", "keyboard_arrow_down", 18.0, textColor),
					TFixed(4.0, 0.0),
				])
			]),
			TFillXH(dockedBarHeight)
		);
	};

	panelSize = if (isCol) TSizeOf(TLines2(TFillXH(dockedBarHeight), size)) else TCols2(handle, size);
	draggingShape = MAvailable(
		MGroup2(
			TRectangle([MFill(bgColor)], m2t(panelSize)), 
			if (leftHandle || vertical) MCols2(MCenterIn(handle, TFillWY(handleHeight)), MCenterIn(MBorder(pad, pad, pad, pad, content), size))
				else if (rightHandle) MCols2(MCenterIn(MBorder(pad, pad, pad, pad, content), size), MCenterIn(handle, TFillWY(handleHeight)))
					else MLines2(topBar, content)
		), panelSize
	);
	
	dragHandle = m2t(MDraggable(id, topBar, [TDragShape(TTranslate(const(posCorrection), m2t(MAlpha(const(0.2), draggingShape))))]));
	handleBar = if (vertical) TCenterXIn(dragHandle, TFillWY(handleHeight)) else TCenterIn(dragHandle, TFillXH(handleHeight));

	panel = if (vertical) MCols([handleBar,  MCenterXIn(content, size)])
		else MLines([handleBar, MSelect(state.expanded, \e -> if (e[id]) MCenterXIn(content, size) else TFillXH(0.0))]);

	draggingHandle = MSelect(manager.manager.dragging, \dr -> 
		if (dr >= 0) TEmpty()
		else MSelect(state.expanded, \e -> if (e[id]) {
			MCursor(MoveCursor(),
				MInteractive([TMouseDown(resizePressed), TMouseInside(isHovering, false)],
					MSelect(isHovering,\h -> if (h) TRectangle([MFill(draggingColor)], TFillXH(dropSize)) else TRectangle([MFill(separatorColor)], TFillXH(dropSize)))
				)
			)
			} else TRectangle([MFill(separatorColor)], TFillXH(dropSize))
		)
	);

	MConstruct([
			makeSubscribe(resizePressed, \p -> {
				if (p) {
					next(isResizing, true);
				} else {
					if (getValue(isResizing)) {
						next(isResizing, false);
						next(panelSizeA, replace(getValue(panelSizeA), id , TFillXH(getValue(mouseXyLocal).y)));
					}
				}
			}),
			makeSubscribe(mouseXyLocal, \mxy -> { 
				if (getValue(isResizing)) {
					next(WH, WidthHeight(mxy.x, mxy.y));
				};
			}),

		],
		MInteractive([TMouseXY(mouseXyLocal)],
		MSelect(WH,\wh ->{
			MAvailable(
				MLines([
					MGroup2(TRectangle([MFill(bgColor)], TFillXY()), panel),
					draggingHandle
				]),
				TFillXH(wh.height)
			); 
		})
		)
	) |> m2t;
}

updateDockingPositions(d: int, id : int, dockA : DynamicBehaviour<[[int]]>, panelsArray : DynamicBehaviour<[[int]]>, panelsOrder : DynamicBehaviour<[int]>, isRow : DynamicBehaviour<bool>) -> void {
	tempA = make([]);
	colId = getValue(panelsOrder)[0];
	rowId = getValue(panelsOrder)[1];
	
	if (!fold(getValue(panelsArray), false, \acc, a -> acc || contains(a, d))) {
		if (getValue(isRow)) next(panelsArray, replace(getValue(panelsArray), colId, insertArray(getValue(panelsArray)[colId], rowId, d)))
			else next(panelsArray, insertArray(getValue(panelsArray), colId, [d]));
	} else {
		colIndex = if (colId < length(getValue(panelsArray))) colId else (length(getValue(panelsArray)) - 1);
		prevPos = if (getValue(isRow)) elemIndex(getValue(panelsArray)[colIndex], d, -intMax) else elemIndex(getValue(panelsArray), [d], -intMax);
		if (prevPos == -intMax) {

			replaced = if (getValue(isRow)) {
				index = if (colId < length(getValue(panelsArray))) colId else (length(getValue(panelsArray)) - 1);
				replace(getValue(panelsArray), index, insertArray(getValue(panelsArray)[index], rowId, d));
			} else {
				insertArray(getValue(panelsArray), colId, [d]);
			}
			next(panelsArray, mapi(replaced, \i, item -> if (i == colId) item else removeFirst(item, d)));

		} else {
			if (getValue(isRow)) {
				updated = if (prevPos <= rowId) {
					inserted = insertArray(getValue(panelsArray)[colIndex], rowId, d);
					removeIndex(inserted, prevPos);
				} else {
					uniq(insertArray(getValue(panelsArray)[colId], rowId, d));
				};
				next(panelsArray, replace(getValue(panelsArray), colId, updated));
			} else {
				updated = if (prevPos <= colId) {
					inserted = insertArray(getValue(panelsArray), colId, [d]);
					removed = mapi(inserted, \i, item -> if (i == colId) item else removeFirst(item, d));
					removeIndex(removed, prevPos);
				} else {
					uniq(insertArray(getValue(panelsArray), colId, [d]));
				};
				next(panelsArray, updated);
			}
		}
	};
	//Update state
	next(tempA, getValue(dockA));
	iteri(getValue(panelsArray), \i, item -> {
		index = if (i < length(getValue(panelsArray))) i else length(getValue(panelsArray)) - 1;
		iteri(item, \j, itm -> next(tempA, replace(getValue(tempA), itm, [id, index, j])));	
	});
	next(dockA, getValue(tempA));
}

dockingDropLine(manager : MaterialManager, state : MDockingState, onDrop : DynamicBehaviour<int>, panelsArray : DynamicBehaviour<[[int]]>, defPanelsOrder : [int], 
	id : int, groupName : string, color : MColor, panelsOrder : DynamicBehaviour<[int]>, size : Tropic, defRow : bool, isRow : DynamicBehaviour<bool>, 
	lastDropSize : DynamicBehaviour<Tropic>, defDockingCol : bool, isDockingCol : DynamicBehaviour<bool>, m2t : (Material) -> Tropic) -> Material {

	dockA = state.dock;
	groupA = state.group;
	onHover = make(-1);
	hoverColor = MOrange(700);
	dropLineOpacity = 0.5; //debug use
	dropLineOpacityHover = 1.6;
	hovering = make(false);

	MSelect(manager.manager.dragging, \dr -> 
		if (dr >= 0 && contains(getValue(groupA)[dr], groupName)) {
			MGroup([
				MDropSpot(onHover, onDrop, TRectangle([MFill(color), FillOpacity(dropLineOpacity)], size)),
				MConstruct([
					makeSubscribe(onHover, \h -> if (h >= 0) {
							next(isDockingCol, defDockingCol); 
							next(panelsOrder, [defPanelsOrder[0], defPanelsOrder[1]]); 
							next(lastDropSize, size); 
							next(isRow, defRow);
							dockedLength = if (getValue(isDockingCol)) getTropicMetrics(getValue(lastDropSize)).width else getTropicMetrics(getValue(lastDropSize)).height;
							if (/*(*/getValue(isRow) /*&& (dockedLength == getTropicMetrics(m2t(getValue(state.size)[h])).width))*/) next(hovering, true)
								else if (!getValue(isRow)) next(hovering, true)
									else next(hovering, false);
						} else next(hovering, false)
					),
					makeSubscribe(onDrop, \d -> if (d >= 0) updateDockingPositions(d, id, dockA, panelsArray, panelsOrder, isRow))],
					MSelect(hovering, \h -> if (h) TRectangle([MFill(hoverColor), FillOpacity(dropLineOpacityHover)], size) else TEmpty())
				)
			]);
		} else //size
		TRectangle([MFill(MGrey(300))], size)
	);
}

MDockingArea2T(manager : MaterialManager, m : MDockingArea, lightBackground : bool, m2t : (Material) -> Tropic) -> Tropic {
	state = m.state;
	id = m.id;
	isCol = m.isColumn; 
	groupName = m.groupName;
	contentA = getValue(state.content);
	dockA = state.dock;
	groupA = state.group;
	sizeA = getValue(state.size);

	onDragging = manager.manager.dragging;
	dockedPanelsGrid = make([[]]);
	onDrop = make(-1);
	order = make([0, 0]);
	isRow = make(false);
	isDockingCol = make(true);
	lastDropSize = make(TEmpty());
	dockedBarHeight = 36.0;

	leftHandle = contains(m.style, MDockingLeftHandle());
	rightHandle = contains(m.style, MDockingRightHandle());
	isToolbar  = contains(m.style, MDockingToolbar());
	onlyRows  = contains(m.style, MDockingOnlyRows());

	isRightCol  = contains(m.style, MDockingRightCols());
	dontShowSep  = contains(m.style, MDockingDontShowSeparators());
	bgColor = extractStruct(m.style, MDockingBackground(if (lightBackground) MGrey(200) else MGrey(950))).color;
	color = extractStruct(m.style, MBlue(600));
	vertical = if (leftHandle || rightHandle) true else false;

	overlayColor = MOrange(500);
	overlayOpacity = 0.6;
	dropSize = 4.0;
	handleHeight = dropSize;
	separatorSpace = 8.0;
	separatorColor = extractStruct(m.style, MDockingHandlesColor(if (lightBackground) MGrey(300) else MGrey(600), MBlue(600))).color;
	draggingColor = extractStruct(m.style, MDockingHandlesColor(if (lightBackground) MGrey(300) else MGrey(600), MBlue(600))).hoverColor;
	pad = 10.0;

	bottomLine = MAlpha(const(0.5), TRounded(2.0, 2.0, 2.0, 2.0, [MFill(MGrey(400))], if (isCol) TFixed(8.0, 2.0) else TFixed(2.0, 8.0)));

	WHA = map(contentA,\c -> makeWH());
	WHRA = map(contentA,\c -> makeWH());
	panelSizeA = make([TEmpty()]);

	iteri(sizeA, \i, s -> next(panelSizeA, replace(getValue(panelSizeA), i , MLines2(s, TFillXH(dockedBarHeight)))));

	extractDockedPanelsId = \d: [[int]] -> {
		dockIdSorted = sortCustom(filter(mapi(d, \i, v -> if (v[0] == id) [v[1], v[2], i] else []), \item -> item != []), \v -> v, true);
		colsIdSorted = map(dockIdSorted, \item -> item[2]);
		colGroups = sortCustom(filter(uniq(map(d, \v -> if (v[0] == id) v[1] else -intMax)), \v -> v >= 0), \v -> v, true);
		filter(map(colGroups, \item -> filter(map(colsIdSorted, \c -> if (d[c][1] == item ) c else -intMax), \itm -> itm != -intMax)), \item -> item != []);
	}
			

	MSelect(dockA, \d -> { 
		dockedPanelsCols = extractDockedPanelsId(d); 
		next(dockedPanelsGrid, dockedPanelsCols);

		if (dockedPanelsCols != []) {

				//DOCKED PANELS
				if (isCol) {
					MCols(
						mapi(dockedPanelsCols, \i, singleColA -> {
							resizePressedV = make(false);
							resizePressedH = make(false);
							isResizingV = make(false);
							isResizingH = make(false);
							mouseXyLocal = make(zeroPoint);
							mouseXyLocalR = make(zeroPoint);
							WH = WHA[i];
							WHR = WHRA[i];

							contentPanel = \scrollSize : Tropic -> {
								MGroup([
									TRectangle([MFill(bgColor)], scrollSize),
									MScroll(
										MLines(
											if (dockedPanelsCols != []) mapi(singleColA, \j, s -> {
												rowSize = TFillXH(handleHeight);
												style = getValue(state.style)[s];
													makeDropRow = \a : int, b : int c : MColor-> {
														MSelect(onDragging, \dr -> if (dr >= 0 && contains(getValue(groupA)[dr], groupName)) {
																// if (getTropicMetrics(m2t(getValue(state.size)[dr])).width == dockedLength)
																	dockingDropLine(manager, state, onDrop, dockedPanelsGrid, [a, b], id, groupName, color, order, rowSize, true, isRow, lastDropSize, true, isDockingCol, m2t)
																// else TEmpty();
															// } else TEmpty()
															} else {
																if (j == 0) {
																	TRectangle([MFill(c)], rowSize)
																} else {
																	TEmpty();
																}
															}	
														);
													};
												MLines([
													makeDropRow(i, j, separatorColor),
													makeDockedPanel(manager, state, s, isCol, style, dropSize, resizePressedV, panelSizeA, lightBackground, m2t),
													if (j == length(singleColA) - 1) makeDropRow(i, j + 1, bgColor) else TEmpty()
												]);
											}) else [TEmpty()]
										),
										scrollSize,
										[]
									)
								]);
							};

							contentColumn = {
								MConstruct([
									makeSubscribe(resizePressedV, \p -> {
										if (p) {
											next(isResizingV, true);
										} else {
											if (getValue(isResizingV)) {
												next(isResizingV, false);
											}
										}
									}),
									makeSubscribe(resizePressedH, \p -> {
										if (p) {
											next(isResizingH, true);
										} else {
											if (getValue(isResizingH)) {
												next(isResizingH, false);
											}
										}
									}),
									makeSubscribe(mouseXyLocal, \mxy -> { 
										if (getValue(isResizingV)) {
											next(WH, WidthHeight(getValue(WH).width, mxy.y));
										};
										if (getValue(isResizingH)) {
											next(WH, WidthHeight(mxy.x, getValue(WH).height));
										};
									}),
									makeSubscribe(mouseXyLocalR, \mxy -> { 
										if (getValue(isResizingH)) {
											next(WHR, WidthHeight(mxy.x, mxy.y));
										};
									}),
								],
								MInteractive([TMouseXY(mouseXyLocal)],
									if (isRightCol)
									MSelect(WHR, \wh -> {
										maxPanelSize = TSizeOf(TGroup(mapi(singleColA, \j, s -> m2t(sizeA[s]))));
										colBg = TGroup2(maxPanelSize, TFillWY(-wh.width));
										contentPanel(colBg)
									})
									else
									MSelect(WH, \wh -> {
										maxPanelSize = TSizeOf(TGroup(mapi(singleColA, \j, s -> m2t(sizeA[s]))));
										colBg = TGroup2(maxPanelSize, TFillWY(wh.width));
										contentPanel(colBg)
									})
								));
						};

							colSize = TSelect(state.size, \ss -> if (isToolbar) TMinimumGroup2(m2t(ss[i]), TFillWY(dropSize)) else TFillWY(dropSize));
							makeDropCol = \a : int, b : int -> {
								MSelect(onDragging, \dr -> if (dr >= 0 && contains(getValue(groupA)[dr], groupName)) {
									// if (getTropicMetrics(m2t(getValue(state.size)[dr])).width == dockedLength)
										dockingDropLine(manager, state, onDrop, dockedPanelsGrid, [a, b], id, groupName, color, order, colSize, false, isRow, lastDropSize, true, isDockingCol, m2t)
									} else {
										isHovering = make(false);
										draggingHandle = MCursor(
											MoveCursor(),
											MInteractive([ 
												TMouseDown(resizePressedH), 
												TMouseInside(isHovering, false)
												],
												MSelect(isHovering,\h -> if (h) TRectangle([MFill(draggingColor)], colSize) else TRectangle([MFill(separatorColor)], colSize))
											)
										);
									if (!isRightCol){
											if (a != 0) {
												draggingHandle;
											} else {
												TRectangle([MFill(separatorColor)], colSize);
											}
										} else {
											if (a == 0) {
												draggingHandle;
											} else {
												TRectangle([MFill(separatorColor)], colSize);
											}
										}
									}	
								);
							};

							newOrigin = if (isRightCol) MInteractive([TMouseXY(mouseXyLocalR)], TRectangle([MFill(MBlue(800))], TFillWY(0.0))) else TEmpty();

							if (i == 0 && length(dockedPanelsCols) != 1) 
								MCols([ 
									if (onlyRows) TEmpty() else makeDropCol(i, 0),
									contentColumn,
									makeDropCol(i + 1, 0),
									newOrigin
								])
							else if (i == 0 && length(dockedPanelsCols) == 1) 
								MCols([
									if (onlyRows) TEmpty() else makeDropCol(i, 0),
									contentColumn,
									makeDropCol(i + 1, 0),
									newOrigin
								])
							else if (i == length(dockedPanelsCols) - 1)
								MCols([contentColumn, makeDropCol(i + 1, 0), newOrigin]) 
							else 
								MCols([contentColumn, makeDropCol(i + 1, 0), newOrigin])  
	

						})
					);

				} else {
					MLines(
						mapi(dockedPanelsCols, \i, singleColA -> {
							colBg = TGroup(mapi(singleColA, \j, s -> {TGroup2(TFillX(), TMinimumGroup2(TRotate90(m2t(sizeA[s])), TFillWY(dropSize)));}));
							rowBg = TGroup(mapi(singleColA, \j, s -> {TGroup2(TFillX(), TFixed (0.0, getTropicMetrics(m2t(sizeA[s])).width));}));
								WH = WHA[i];
								WH2 = WHRA[i];
							MGroup([
								TRectangle([MFill(bgColor)], rowBg),
								MScroll(
									MCols(
										if (dockedPanelsCols != []) mapi(singleColA, \j, s -> {
											style = getValue(state.style)[s];
											colSize = TFixed(handleHeight, getTropicMetrics(m2t(sizeA[s])).width);
											dockedLength = getTropicMetrics(colSize).height;
											makeDropCol = \a : int, b : int -> {
												MSelect(onDragging, \dr -> {
													if (dr >= 0 && contains(getValue(groupA)[dr], groupName)) {
														if (getTropicMetrics(m2t(getValue(state.size)[dr])).width == dockedLength)
															dockingDropLine(manager, state, onDrop, dockedPanelsGrid, [a, b], id, groupName, color, order, colSize, true, isRow, lastDropSize, false, isDockingCol, m2t)
														else TEmpty();
													} else TEmpty()
												});
											}
											MCols2(
												MGroup([
													// makeDockedPanel(manager, state, s, isCol, style, dropSize, resizePressedV, panelSizeA, lightBackground, m2t),
													makeDropCol(i, j)
												]),
												if (j == length(singleColA) - 1) 
													MGroup2(
														MSelect(state.size, \ss -> MCenterIn(bottomLine, TMinimumGroup2(TRotate90(m2t(ss[s])), TFillWY(dropSize)))),
														makeDropCol(i, j + 1)
													)
												else TEmpty()
											)
										}) else [TEmpty()]
									),
									colBg,
									[]
								),
								if (i == 0) TEmpty() else  {if (dontShowSep) TEmpty() else MAlpha(const(0.3), MBorder(pad, 0.0, pad, 0.0,  MSeparator(true)))}
							]);
						}),
					)
				};

		} else {
		//NO PANELS DOCKED
		dockingDropLine(manager, state, onDrop, dockedPanelsGrid, [0, 0], id, groupName, color, order, if(isCol) TFillWY(dropSize) else TFillXH(dropSize), false, isRow, lastDropSize, isCol, isDockingCol, m2t);
	}
})
|> (\f -> m2t(f));
}

MDockingUI2T(manager : MaterialManager, m : MDockingUI, lightBackground : bool, m2t : (Material) -> Tropic) -> Tropic {
	state = m.state;
	layout = m.layout;
	itemsA = m.panels;
	titleA = state.title;
	dockA = state.dock;
	expandedA = state.expanded;
	contentA = state.content;
	panelIconA = state.panelIcon;
	sizeA = state.size;
	groupA = state.group;
	panelsStyleA = state.style;
	onDrop = make(-1);
	cursorPositionA = make([]);
	minimizedA = make([]);
	visibleA = make([]);
	defSizeA = make([]);

	if (getValue(dockA) == [[]])
		iteri(itemsA, \i, p -> {
			next(cursorPositionA, replace(getValue(cursorPositionA), i , zeroPoint));
			next(titleA, replace(getValue(titleA), i , p.title));
			next(panelIconA, replace(getValue(panelIconA), i , p.panelIcon));
			next(dockA, replace(getValue(dockA), i , [p.dockingAreaId, p.order, i]));
			next(contentA, replace(getValue(contentA), i , p.content));
			next(expandedA, replace(getValue(expandedA), i , true));
			next(groupA, replace(getValue(groupA), i , p.allowedGroups));
			next(sizeA, replace(getValue(sizeA), i , p.size));
			next(defSizeA, replace(getValue(defSizeA), i , p.size));
			next(panelsStyleA, replace(getValue(panelsStyleA), i , p.style));
			next(minimizedA, replace(getValue(minimizedA), i , -1));
			next(visibleA, replace(getValue(visibleA), i , true));
		});

	mainDropArea = MConstruct([
		makeSubscribe(onDrop, \d -> { 
			if (d >= 0) {
				style = itemsA[d].style;
				leftHandle = contains(style, MDockingLeftHandle());
				rightHandle = contains(style, MDockingRightHandle());
				width = getTropicMetrics(m2t(getValue(sizeA)[d])).width;
				height = getTropicMetrics(m2t(getValue(sizeA)[d])).height;

				posCorrection =
				if (getValue(dockA)[d][0] >= 0) { 
					if (leftHandle || rightHandle){dx = 4.0; dy = (height / 2.0); Point(dx, dy);
					} else {dx = if (d >= 0)  (width / 2.0) else 0.0; dy = 4.0; Point(dx, dy);}
				} else {
					getValue(cursorPositionA)[d];
				}
				next(itemsA[d].position, Point(manager.manager.xy().x - posCorrection.x, manager.manager.xy().y - posCorrection.y));
				next(itemsA[d].enabled, true);
				next(dockA, mapi(getValue(dockA), \j, item -> if (j == d) [-1, item[1], item[2]] else item)); //undock panel
				next(cursorPositionA, replace(getValue(cursorPositionA), d, Point(0.0,0.0)));
			} 
		})
	],
	//overlay layout 
	MSelect(manager.manager.dragging, \dr -> {
		if (dr >= 0) MDropSpot2(make(-1), onDrop, TRectangle([MFill(MBlue(600)), FillOpacity(0.0)], TFillXY()), false) else TEmpty()
	}));

	movablePanels = mapi(itemsA, \i, p -> makeMovablePanel(manager, state, i, p.position, cursorPositionA, p.enabled, minimizedA, visibleA, defSizeA, p.style, lightBackground, m2t));

	minimizedBar = { 
		minimizedBarH = 26.0;
		MLines2(
			TFillY(),
			MSelect(minimizedA, \mmA ->
			MScroll( 
					MCols(
						concat(
							[TFixed(4.0, 0.0)],
							map(mmA, \mm -> if (mm >= 0) {

								minimizedButton =\ color : MColor -> { 
									closeButton = contains(itemsA[mm].style, MDockingCloseButton());
									MSelect(itemsA[mm].enabled, \e -> if (e) 
										MAvailable(
											MGroup([
												TRounded(2.5, 2.5, 0.0, 0.0, [MFill(color)], TFillXY()),
													MCols([
														TFixed(8.0, 0.0),
														MIcon("web_asset", [MIconSize(16.0), MWhite()]) |> MCenterY,
														TFixed(4.0, 0.0),
														MAvailable(
															MEllipsisText(itemsA[mm].title, [MWhite(), MCaptionSolid, MMinWidth(80.0)]),
															TFixed(80.0, minimizedBarH)
														)|> MCenterY,
														TFillX(),
														if (closeButton)
															MIconButton("close", [MIconSize(14.0), MWhite()], [
																MOnClick(\ -> {
																	next(minimizedA, removeIndex(getValue(minimizedA), elemIndex(getValue(minimizedA), mm, -intMax))); 
																	next(itemsA[mm].enabled, false);
																})
															])|> MCenterY
														else TEmpty(),
														TFixed(4.0, 0.0),
													]),
											]),
											TFixed(155.0, minimizedBarH)
										)
										else TEmpty()
									);
								};

								MCols2(
									MShadow(const(2.0),
									MRawButton(minimizedButton(MGrey(950)), minimizedButton(MGrey(800)), minimizedButton(MGrey(800)), minimizedButton(MGrey(950)), "", [], [
										TOnClicked(\ -> {
											next(visibleA, replace(getValue(visibleA), mm , true));
											next(minimizedA, removeIndex(getValue(minimizedA), elemIndex(getValue(minimizedA), mm, -intMax)));
										})])
									),
									TFixed(4.0, 0.0)
								)} else TEmpty()
							)
						)
					),
					TFillXH(minimizedBarH),
					[]
				)
			)
		);
	};

	MGroup(concatA([[layout], movablePanels, [minimizedBar],  [mainDropArea]])) |> (\f -> m2t(f));
}