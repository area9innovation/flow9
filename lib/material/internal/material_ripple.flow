import material/internal/material_clickable;

export {
	MRippleOnDownDefault2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, rippleType : Transform<RippleType>) -> Tropic;
	MRippleOnDown2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, color : Transform<MColor>, opacity : Transform<double>,
		rippleType : Transform<RippleType>, focused : Transform<bool>, hovered : Transform<bool>, component : string) -> Tropic;

	MRipple2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, trigger : Transform<bool>, style : [MRippleStyle]) -> Tropic;
}

MRippleOnDownDefault2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, rippleType : Transform<RippleType>) -> Tropic {
	MRippleOnDown2T(
		manager,
		parent,
		content,
		const(contrastingMColor(parent)),
		const(1.0),
		rippleType,
		const(false),
		const(false),
		parent.name
	)
}

MRippleOnDown2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, color : Transform<MColor>, opacity : Transform<double>,
	rippleType : Transform<RippleType>, focused : Transform<bool>, hovered : Transform<bool>, component : string) -> Tropic {
	down = make(false);
	point = make(zeroPoint);

	MRipple2T(
		manager,
		parent,
		mouseOnDownAround(manager, [TPressed(down), MMousePosition(point)], content),
		down,
		[
			MRipplePosition(point),
			MRippleColor(color),
			MRippleOpacity(opacity),
			MRippleType(rippleType),
			MRippleFocused(focused),
			MRippleHovered(hovered),
			MRippleShape(component),
			MRippleOverlay(true)
		]
	)
}

MRipple2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, trigger : Transform<bool>, style : [MRippleStyle]) -> Tropic {
	enabled = extractStruct(style, MEnabled(const(true))).enabled;
	rippleType = extractStruct(style, MRippleType(const(MNoRipple()))).type;
	focused = extractStruct(style, MRippleFocused(const(false))).focused;
	hovered = extractStruct(style, MRippleHovered(const(false))).hovered;
	selected = extractStruct(style, MRippleSelected(const(false))).selected;
	triggered = fselectdelay(fmax(trigger, focused), \tr -> if (tr) 0 else 400);

	if (parent.theme.enableRipple && enabled != const(false) &&
		(rippleType != const(MNoRipple()) || focused != const(false) || hovered != const(false) || selected != const(false))) {
		point = extractStruct(style, MRipplePosition(const(zeroPoint))).position;
		color = extractStruct(style, MRippleColor(const(contrastingMColor(parent)))).color;
		opacity = extractStruct(style, MRippleOpacity(const(0.1))).opacity;
		shape = extractStruct(style, MRippleShape("")).component;
		overlay = extractStruct(style, MRippleOverlay(true)).overlay;

		isCircleCenteredRipple = rippleType == const(MRippleCenter()) && getShapeByComponent(parent, shape).defaultShape == defaultMaterialRoundShape;

		TransformTAcc2(\t2a -> {
			b1 = content |> t2a;
			rippleWH = tryExtractStruct(style, MRippleWidthHeight(const(WidthHeight(0., 0.))));
			showRipple = fand(enabled, fmin(fneq(rippleType, MNoRipple()), fmax(fmax(selected, focused), fmax(hovered, triggered))));

			wd = eitherMap(rippleWH, \b -> fselect(b.wh, FLift(\wh -> wh.width)), b1.metrics.width);
			hgt = eitherMap(rippleWH, \b -> fselect(b.wh, FLift(\wh -> wh.height)), b1.metrics.height);
			box = eitherMap(rippleWH, \b -> b.wh, fwidthheight(b1.metrics.width, b1.metrics.height));

			egrowth = makeMEasing(if (isCircleCenteredRipple) 0.3 else 0.6, easingStandartCurve, manager.manager.deltaTimer);
			efade = makeMEasing(0.4, easingStandartCurve, manager.manager.deltaTimer);

			next(egrowth.percent, 0.0);
			next(efade.percent, 1.0);

			startingPoint = ref fgetValue(point);

			opacityPercent =
				fmin(
					fmultiply(
						fmax(
							fsubtract(const(1.0), fmultiply(efade.percent, const(1.0))),
							fif(fmax(selected, focused), const(0.8), fif(hovered, const(0.4), zero))
						),
						fif(fselect(color, FLift(\c -> MColor2int(c) != black)), const(2.0), const(1.0))
					),
					const(1.0)
				);
			rippleOpacity = fmultiply(opacity, opacityPercent);
			radiusPercent = fif(triggered, egrowth.percent, fif(fmax(hovered, selected), const(1.0), zero));
			radius =
				fmultiply(
					if (isCircleCenteredRipple)
						fselect(box, FLift(\b -> max(b.width, b.height) / 2.0))
					else
						fselect(box, FLift(\b -> sqrt(b.width * b.width + b.height * b.height))),
					radiusPercent
				);
			position =
				fif(
					fmax(feq(rippleType, MRippleCenter()), fmin(fmax(hovered, selected), fnot(triggered))),
					fselect2(box, radius, FLift2(\b, r -> Point(b.width / 2.0 - r, b.height / 2.0 - r))),
					fselect(radius, FLift(\r -> Point(^startingPoint.x - r, ^startingPoint.y - r)))
				);

			rippleContent =
				FAlpha(
					rippleOpacity,
					FTranslate(
						fselect(position, FLift(\pt -> pt.x)),
						fselect(position, FLift(\pt -> pt.y)),
						FGraphics(
							fselect(radius, FLift(\r -> [GCircle(r, r, r)])),
							fselect(color, FLift(\c -> [MFill(c)]))
						)
					)
				);

			rippleFForm = \ -> {
				rippleContent
				|> (\f ->
					if (isCircleCenteredRipple) {
						f;
					} else if (shape != "") {
						container = FMaterialShape(parent, [Fill(black)], shape);

						FMask(f, FMutable(fselect(box, container |> FLift)));
					} else {
						FMask(f, FMutable(fselect2(rippleType, box, FLift2(\rt, b ->
							switch (rt : RippleType) {
								MRippleFill(): {
									FRectangle(b.width, b.height, [Fill(black)])
								}
								MRippleCenter(): {
									FTranslate(
										const((b.width - b.height) / 4.0),
										const((b.height - b.width) / 4.0),
										FCircle((b.width + b.height) / 4.0, [Fill(black)])
									);
								}
								MNoRipple(): {
									FEmpty();
								}
							}
						))))
					}
				)
			};

			contentFForm =
				if (isSome(rippleWH))
					FTranslate(
						fdivide(fmax(fsubtract(wd, b1.metrics.width), const(0.)), const(2.)),
						fdivide(fmax(fsubtract(hgt, b1.metrics.height), const(0.)), const(2.)),
						b1.form
					)
				else
					b1.form;

			TAcc(
				FDecorator(
					FConstruct(
						[
							makeSubscribe2(trigger, \tr -> {
								if (tr) {
									startingPoint := fgetValue(point);

									efade.stop();
									egrowth.start();
								} else {
									efade.start();
								}
							}),
							makeSubscribeUns(focused, \tr -> {
								if (tr) {
									startingPoint := Point(fgetValue(box).width / 2.0, fgetValue(box).height / 2.0);

									efade.stop();
									egrowth.start();

									[efade.start]
								} else {
									[]
								}
							})
						]
						|> (\arr -> concat(arr, eitherMap(tryExtractStruct(style, MRipplePercents(make(0.), make(0.))), 
								\prcs -> [
									\ -> fconnect(egrowth.percent, prcs.growth),
									\ -> fconnect(efade.percent, prcs.fade)
								],
								[]
						))),
						contentFForm
					),
					[
						Pair(
							showRipple,
							rippleFForm
						)
					],
					overlay
				),
				if (isSome(rippleWH))
					TFormMetrics(
						wd,
						hgt,
						faddition(b1.metrics.baseline, fdivide(fmax(fsubtract(hgt, b1.metrics.height), const(0.)), const(2.)))
					)
				else
					b1.metrics,
				b1.minWidth,
				b1.minHeight,
				b1.maxWidth,
				b1.maxHeight,
				b1.xFillers,
				b1.yFillers,
				b1.addFillers,
				b1.xConstant,
				b1.yConstant,
				b1.disposers
			)
		})
	} else {
		content;
	}
}