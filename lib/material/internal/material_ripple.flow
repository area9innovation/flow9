import fusion_utils;
import material/internal/material_clickable;
import material/measing;
import material/internal/material_mutable;

// Internal to material

export {
	MRippleOnDownDefault2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, rippleType : Transform<RippleType>) -> Tropic;
	MRippleOnDown2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, color : Transform<MColor>, opacity : Transform<double>,
		rippleType : Transform<RippleType>, highlighted : Transform<bool>, roundedCorners : bool) -> Tropic;

	MRipple2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, trigger : Transform<bool>, style : [MRippleStyle]) -> Tropic;

	defaultRippleColor : MColor = MGrey(500);
	defaultRippleOpacity : double = 0.5;
	defaultHighlightOpacity : double = 0.5;
}

MRippleOnDownDefault2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, rippleType : Transform<RippleType>) -> Tropic {
	MRippleOnDown2T(
		manager,
		parent,
		content,
		const(defaultRippleColor),
		const(defaultRippleOpacity),
		rippleType,
		const(false),
		false
	)
}

MRippleOnDown2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, color : Transform<MColor>, opacity : Transform<double>,
	rippleType : Transform<RippleType>, highlighted : Transform<bool>, roundedCorners : bool) -> Tropic {
	down = make(false);
	point = make(zeroPoint);

	MRipple2T(
		manager,
		parent,
		mouseOnDownAround(manager, [TPressed(down), MMousePosition(point)], content),
		down,
		[
			MRipplePosition(point),
			MRippleColor(color),
			MRippleOpacity(opacity),
			MRippleType(rippleType),
			MRippleHighlight(fselect3(highlighted, color, opacity, \h, c, co -> if (h) Some([MFill(c), FillOpacity(co)]) else None())),
			MRippleRoundedCorners(roundedCorners),
			MRippleOverlay(true)
		]
	)
}

MRipple2T(manager : MaterialManager, parent : MFocusGroup, content : Tropic, trigger : Transform<bool>, style : [MRippleStyle]) -> Tropic {
	rippleType = extractStruct(style, MRippleType(const(MNoRipple()))).type;
	opacity = extractStruct(style, MRippleOpacity(const(defaultRippleOpacity))).opacity;
	highlight = extractStruct(style, MRippleHighlight(const(None()))).highlight;

	if (parent.theme.enableRipple && (!isFConst(rippleType) || fgetValue(rippleType) != MNoRipple() || !isFConst(highlight) || fgetValue(highlight) != None() ||
		!isFConst(opacity) || fgetValue(opacity) != 0.)) {
		point = extractStruct(style, MRipplePosition(const(zeroPoint))).position;
		color = extractStruct(style, MRippleColor(const(defaultRippleColor))).color;
		roundedCorners = extractStruct(style, MRippleRoundedCorners(false)).rounded;
		overlay = extractStruct(style, MRippleOverlay(true)).overlay;

		TransformTAcc2(\t2a -> {
			radiusOffset =
				fselect(rippleType, FLift(\rt -> {
					switch (rt : RippleType) {
						MRippleFill(): Pair(rippleRadiusFill, rippleOffsetFill);
						MRippleCenter(): Pair(rippleRadiusCentered, rippleOffsetCentered);
						MRippleCustom(rippleRadius, rippleOffset): Pair(rippleRadius, rippleOffset);
						MNoRipple(): Pair(\__, __ -> 0., \__, __, __ -> zeroPoint);
					}
				}));

			b1 = content |> t2a;
			rippleWH = tryExtractStruct(style, MRippleWidthHeight(const(WidthHeight(0., 0.))));
			showHighlight = fselect(highlight, isSome |> FLift);
			showRipple = make(false);

			wd = eitherMap(rippleWH, \b -> fselect(b.wh, FLift(\wh -> wh.width)), b1.metrics.width);
			hgt = eitherMap(rippleWH, \b -> fselect(b.wh, FLift(\wh -> wh.height)), b1.metrics.height);
			box = eitherMap(rippleWH, \b -> b.wh, fwidthheight(b1.metrics.width, b1.metrics.height));

			egrowth = makeMEasing(0.6, mStandartCurve, manager.manager.deltaTimer);
			efade = makeMEasing(0.6, mStandartCurve, manager.manager.deltaTimer);

			startingPoint = ref fgetValue(point);

			disp =
				[
					makeSubscribe2(trigger, \tr -> {
						if (tr) {
							startingPoint := fgetValue(point);

							efade.stop();
							egrowth.start();
						} else {
							efade.start();
						}
					})()
				];

			rippleOpacity : Transform<double> =
				fselect2(
					opacity,
					efade.percent,
					FLift2(\co, pfade -> co * (1. - pfade))
				);

			radius : Transform<double> =
				fselect3(
					radiusOffset,
					box,
					egrowth.percent,
					\ro : Pair<(box : WidthHeight, click : Point) -> double, (box : WidthHeight, click : Point, radius : double) -> Point>, b : WidthHeight, pradius : double ->
						ro.first(b, ^startingPoint) * pradius
				);

			ripplePosition : Transform<Point> =
				fselect3(
					radiusOffset,
					box,
					radius,
					\ro : Pair<(box : WidthHeight, click : Point) -> double, (box : WidthHeight, click : Point, radius : double) -> Point>, b : WidthHeight, r : double -> {
						pt = ro.second(b, ^startingPoint, r);
						Point(pt.x - r, pt.y - r);
					}
				);

			rippleContent : FForm =
				FAlpha(
					rippleOpacity,
					FTranslate(
						fselect(ripplePosition, FLift(\pt -> pt.x)),
						fselect(ripplePosition, FLift(\pt -> pt.y)),
						FMutable(fselect(color, FLift(\c ->
							FScale(
								radius,
								radius,
								FCircle(1.0, [MFill(c)])
							)
						)))
					)
				);

			rippleFForm = \ -> {
				FDecorator(
					rippleContent,
					[
						Pair(
							showHighlight,
							\ ->
								FMutable(fselect4(radiusOffset, highlight, color, opacity, \ro : Pair<(WidthHeight, Point) -> double, (WidthHeight, Point, double) -> Point>, h, c, co ->
									eitherMap(
										h,
										\hlt -> {
											b = fgetValue(box);
											p = fgetValue(point);
											r = ro.first(b, p);
											tr = ro.second(b, p, r);

											FTranslate(
												const(tr.x - r),
												const(tr.y - r),
												FCircle(r, if (hlt == []) [MFill(c), FillOpacity(co)] else hlt)
											)
										},
										FEmpty()
									)
								))
						)
					],
					false
				)
				|> (\f ->
					if (roundedCorners && !js)
						FMask(f, FMutable(fselect(box, FLift(\wh -> FGraphics(perfectRoundedRect(wh.width, wh.height, 2.), [Fill(black)])))))
					else
						FCrop(zero, zero, wd, hgt, f)
				)
			};

			contentFForm =
				if (isSome(rippleWH))
					FTranslate(
						fdivide(fmax(fsubtract(wd, b1.metrics.width), const(0.)), const(2.)),
						fdivide(fmax(fsubtract(hgt, b1.metrics.height), const(0.)), const(2.)),
						b1.form
					)
				else
					b1.form;

			TAcc(
				FDecorator(
					contentFForm,
					[
						Pair(
							fmax(
								showRipple,
								showHighlight
							),
							rippleFForm
						)
					],
					overlay
				),
				if (isSome(rippleWH))
					TFormMetrics(
						wd,
						hgt,
						faddition(b1.metrics.baseline, fdivide(fmax(fsubtract(hgt, b1.metrics.height), const(0.)), const(2.)))
					)
				else
					b1.metrics,
				b1.minWidth,
				b1.minHeight,
				b1.maxWidth,
				b1.maxHeight,
				b1.xFillers,
				b1.yFillers,
				b1.addFillers,
				b1.xConstant,
				b1.yConstant,
				arrayPush(
					concat(b1.disposers, disp),
					makeSubscribeUns(trigger, \tr -> {
						if (tr) {
							nextDistinct(showRipple, true);
							[]
						} else {
							[interruptibleTimer(600, \ -> next(showRipple, false))]
						}
					})()
				)
			)
		})
	} else
		content
}

rippleRadiusCentered(box : WidthHeight, click : Point) -> double {
	min(box.width, box.height) / 2.0
}

rippleOffsetCentered(box : WidthHeight, click : Point, radius : double) -> Point {
	Point(box.width / 2.0 - radius, box.height / 2.0 - radius)
}

rippleRadiusFill(box : WidthHeight, click : Point) -> double {
	b = box;
	p = click;
	radiusVariants = [
		hypot(p.x, p.y), hypot(b.width - p.x, p.y),
		hypot(p.x, b.height - p.y), hypot(b.width - p.x, b.height - p.y)
	];
	either(maxA(radiusVariants), 0.0)
}

rippleOffsetFill(box : WidthHeight, click : Point, radius : double) -> Point {
	Point(click.x - radius, click.y - radius)
}

hypot(a : double, b : double) -> double {
	sqrt(a*a + b*b)
}