import tropic/selecttarray;
import material/internal/material_mutable;

export {
	SelectMLines2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMLines2AT(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMCols2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMColsA2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMGroup2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;

	SelectMDynamicLines2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMDynamicLinesA2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMDynamicCols2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMDynamicColsA2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;
	SelectMDynamicGroup2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
		makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic;

	MDynamicArrayLines(m : DynamicArray<Material>) -> Material;
	MDynamicArrayLinesA(m : DynamicArray<Material>) -> Material;
	MDynamicArrayCols(m : DynamicArray<Material>) -> Material;
	MDynamicArrayColsA(m : DynamicArray<Material>) -> Material;
	MDynamicArrayGroup(m : DynamicArray<Material>) -> Material;
}

SelectMLines2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTLines(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMLinesItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMLines", [AccessRole("hidden")], f))
}

SelectMLines2AT(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTLinesA(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMLinesItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMLines", [AccessRole("hidden")], f))
}

SelectMCols2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTCols(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMColsItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMCols", [AccessRole("hidden")], f))
}

SelectMColsA2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTColsA(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMColsAItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMColsA", [AccessRole("hidden")], f))
}

SelectMGroup2T(manager : MaterialManager, parent : MFocusGroup, values : Transform<[?]>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTGroup(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMGroupItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMGroup", [AccessRole("hidden")], f))
}


SelectMDynamicLines2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTDynamicLines(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMDynamicLinesItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMDynamicLines", [AccessRole("hidden")], f))
}

SelectMDynamicLinesA2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTDynamicLinesA(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMDynamicLineAsItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMDynamicLinesA", [AccessRole("hidden")], f))
}

SelectMDynamicCols2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTDynamicCols(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMDynamicColsItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMDynamicCols", [AccessRole("hidden")], f))
}

SelectMDynamicColsA2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTDynamicColsA(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMDynamicColsAItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMDynamicColsA", [AccessRole("hidden")], f))
}

SelectMDynamicGroup2T(manager : MaterialManager, parent : MFocusGroup, values : DynamicArray<?>,
	makeTropicFn : (index :  Transform<int>, id : int, ?, MFocusGroup) -> Tropic) -> Tropic {
	(\p -> SelectTDynamicGroup(values, \i, id, v ->
		MComponentGroup2T(manager, p, "SelectMDynamicGroupItem", [MFocusId(i), AccessRole("hidden")], \p2 -> makeTropicFn(i, id, v, p2))))
	|> (\f -> MComponentGroup2T(manager, parent, "SelectMDynamicGroup", [AccessRole("hidden")], f))
}

MDynamicArrayLines(m : DynamicArray<Material>) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\parent -> MGetMaterial2Tropic(\m2t -> {
		SelectMDynamicLines2T(
			manager,
			parent,
			m,
			\__, __, c, p -> {
				m2t(c, p)
			}
		)
	})))
}

MDynamicArrayLinesA(m : DynamicArray<Material>) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\parent -> MGetMaterial2Tropic(\m2t -> {
		SelectMDynamicLinesA2T(
			manager,
			parent,
			m,
			\__, __, c, p -> {
				m2t(c, p)
			}
		)
	})))
}

MDynamicArrayCols(m : DynamicArray<Material>) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\parent -> MGetMaterial2Tropic(\m2t -> {
		SelectMDynamicCols2T(
			manager,
			parent,
			m,
			\__, __, c, p -> {
				m2t(c, p)
			}
		)
	})))
}

MDynamicArrayColsA(m : DynamicArray<Material>) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\parent -> MGetMaterial2Tropic(\m2t -> {
		SelectMDynamicColsA2T(
			manager,
			parent,
			m,
			\__, __, c, p -> {
				m2t(c, p)
			}
		)
	})))
}

MDynamicArrayGroup(m : DynamicArray<Material>) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\parent -> MGetMaterial2Tropic(\m2t -> {
		SelectMDynamicGroup2T(
			manager,
			parent,
			m,
			\__, __, c, p -> {
				m2t(c, p)
			}
		)
	})))
}