import material/internal/types;

export {
	switchMaterialFocus(focus : MaterialFocus, mFocusFn : (MFocus) -> ?, mFocusGroupFn : (MFocusGroup) -> ?) -> ?;
	switchMaterialManagerOrFocus(
		parent : MaterialManagerOrFocus,
		managerFn : (MaterialManager) -> ?,
		mFocusFn : (MFocus) -> ?,
		mFocusGroupFn : (MFocusGroup) -> ?
	) -> ?;

	getCurrentFocusedItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MFocus>>;
	getCurrentHoveredItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MFocus>>;
	getCurrentPressedItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MFocus>>;
	getCurrentActiveItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MaterialFocus>>;

	getCurrentFocusedItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MFocus>>;
	getCurrentHoveredItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MFocus>>;
	getCurrentPressedItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MFocus>>;
	getCurrentActiveItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MaterialFocus>>;
}

switchMaterialFocus(focus : MaterialFocus, mFocusFn : (MFocus) -> ?, mFocusGroupFn : (MFocusGroup) -> ?) -> ? {
	switch (focus : MaterialFocus) {
		MFocus(__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __): {
			mFocusFn(focus)
		}
		MFocusGroup(__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __): {
			mFocusGroupFn(focus)
		}
	}
}



switchMaterialManagerOrFocus(
	parent : MaterialManagerOrFocus,
	managerFn : (MaterialManager) -> ?,
	mFocusFn : (MFocus) -> ?,
	mFocusGroupFn : (MFocusGroup) -> ?
) -> ? {
	switch (parent : MaterialManagerOrFocus) {
		MaterialManager(__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __): managerFn(parent);
		MaterialFocus(): {
			switchMaterialFocus(parent, mFocusFn, mFocusGroupFn);
		}
	}
};

getCurrentFocusedItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MFocus>> {
	getCurrentFocusedItemBehaviour2(manager.focus)
}

getCurrentFocusedItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MFocus>> {
	fsubselect(parent.focusedId, FLift(\fid ->
		eitherMap(
			lookupTree(getValue(parent.focusIds), fid),
			\foc ->
				switchMaterialFocus(
					foc,
					\f -> {
						if (fgetValue(f.focused))
							const(Some(f))
						else
							const(None())
					},
					\f -> {
						getCurrentFocusedItemBehaviour2(f)
					}
				),
			const(None()),
		)
	))
}

getCurrentHoveredItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MFocus>> {
	getCurrentHoveredItemBehaviour2(manager.focus)
}

getCurrentHoveredItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MFocus>> {
	fsubselect(parent.focusIds, FLift(\fid ->
		fold(getTreeValues(fid), const(None()), \acc, foc ->
			fifsome(
				acc,
				acc,
				switchMaterialFocus(
					foc,
					\f -> fif(f.hover, const(Some(f)), acc),
					\f -> getCurrentHoveredItemBehaviour2(f)
				)
			)
		)
	))
}

getCurrentPressedItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MFocus>> {
	getCurrentPressedItemBehaviour2(manager.focus)
}

getCurrentPressedItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MFocus>> {
	fsubselect(parent.focusIds, FLift(\fid ->
		fold(getTreeValues(fid), const(None()), \acc, foc ->
			fifsome(
				acc,
				acc,
				switchMaterialFocus(
					foc,
					\f -> fif(f.down, const(Some(f)), acc),
					\f -> getCurrentPressedItemBehaviour2(f)
				)
			)
		)
	))
}

getCurrentActiveItemBehaviour(manager : MaterialManager) -> Transform<Maybe<MaterialFocus>> {
	getCurrentActiveItemBehaviour2(manager.focus)
}

getCurrentActiveItemBehaviour2(parent : MFocusGroup) -> Transform<Maybe<MaterialFocus>> {
	fsubselect(parent.focusIds, FLift(\fid ->
		fold(getTreeValues(fid), const(None()), \acc, foc ->
			fifsome(
				acc,
				acc,
				switchMaterialFocus(
					foc,
					\f -> fif(f.active, const(Some(f)), acc),
					\f -> fif(f.active, const(Some(f)), getCurrentActiveItemBehaviour2(f))
				)
			)
		)
	))
}
