import material/internal/material_menu;

export {
	MDropDown2T(manager : MaterialManager, parent : MFocusGroup, m : MDropDown, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MDropDown2T(manager : MaterialManager, parent : MFocusGroup, m : MDropDown, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	leftDecorations = extractStruct(m.style, MLeftDecorations([])).extraItems;
	rightDecorations = extractStruct(m.style, MRightDecorations([])).extraItems;
	groups = extractStruct(m.style, MGroups([])).groups;
	nonSpec = MMenuSingleLine(m.nonSpecified, []);
	border = extractStruct(m.style, MDropDownBorder(0., 0., 0., 0.));
	outlined = contains(m.style, MOutlined());
	filled = contains(m.style, MFilled());

	lLen = length(leftDecorations);
	rLen = length(rightDecorations);
	emptyDecorations = lLen + rLen == 0;

	MDropDownMenu2T(
		manager,
		parent,
		MDropDownMenu(
			mapi(m.items, \i, it ->
				MMenuSingleLine(it,
					if (emptyDecorations) []
					else
						concat(
							if (i < lLen) [MPrimaryAction(leftDecorations[i])] else	[],
							if (i < rLen) [MSecondaryAction(rightDecorations[i])] else []
						)
				)
			)
			|> (\f -> fold(groups, f, \acc, gr -> insertArray(acc, gr.first, MMenuGroupLine(gr.second, [])))),
			m.current,
			MDropDownStyle2MDropDownMenuStyle(fold(
				[MButtonTitle(felementAt(const(m.items), m.current, const(m.nonSpecified)))],
				m.style,
				\style, s -> addStyleIfAbsent(style, s)
			))
			|> (\arr ->
				if (m.nonSpecified == "") arr
				else concat3(arr, [MNonSpecified(nonSpec)], if (filled) [] else [MSelectedAlwaysOnTop(nonSpec)])
			)
			|> (\arr -> if (!outlined) arr else concat(arr, [MOutlined()]))
		),
		m2t
	)
	|> (\t -> TBorder(border.left, border.top, border.right, border.bottom, t))
}

MDropDownStyle2MDropDownMenuStyle(style : [MDropDownStyle]) -> [MDropDownMenuStyle] {
	filtermap(style, \st -> switch (st) {
		MDropDownMenuStyle() : {a : Maybe<MDropDownMenuStyle> = Some(st); a};
		default : None()
	})
}
