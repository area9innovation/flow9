import material/internal/material_button;
import material/internal/material_progress;

export {
	MToolbar2T(manager : MaterialManager, parent : MFocusGroup, m : MToolbar, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	tryExtractMToolbarItemsMColor(parent : MFocusGroup, bgStyle : [TGraphicsStyle], style : [flow]) -> Maybe<MColor>;
}

MExtendedToolbarState(
	expand : Transform<bool>,
	maxHeight : double,
	factor : DynamicBehaviour<double>
);

MToolbar2T(manager : MaterialManager, parent : MFocusGroup, m : MToolbar, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	bgStyle = extractStruct(m.style, MBackgroundStyle([MFill(getPrimaryColor(parent))])).style;
	itemsColor = tryExtractMToolbarItemsMColor(parent, bgStyle, m.style);
	width = extractStruct(m.style, MWidth(-1.)).width;
	minHeight = extractStruct(m.style, MHeight(56.)).height;
	backgroundImage = tryExtractStruct(m.style, MBackgroundImage("", true));
	elevation  = extractStruct(m.style, MElevation(const(6.))).elevation;
	toolbarContent = tryExtractStruct(m.style, MToolbarContent(TEmpty(), false));
	toolbarFAB = tryExtractStruct(m.style, MFloatingButton("", [], []));
	showExpander = extractStruct(m.style, MShowExpander(const(true))).show;
	backButton = tryExtractStruct(m.style, MToolbarBackButton(TEmpty()));
	extended =
		maybeMap(
			tryExtractStruct(m.style, MExtendedToolbar(const(false), [])),
			\ext -> MExtendedToolbarState(
				ftransistor(
					extractStruct(ext.style, MEnabled(const(true))).enabled,
					ext.expand
				),
				extractStruct(ext.style, MMaxHeight(128.)).height,
				make(b2d(fgetValue(ext.expand)))
			)
		);

	height = eitherMap(
		extended,
		\ext -> flerp(minHeight, ext.maxHeight, ext.factor),
		const(minHeight)
	);

	right = \p ->
		map(m.right, \r -> {
			switch (r) {
				MCenterY(__): {
					m2t(r, p)
				}
				default: m2t(r, p) |> if (isNone(extended)) TCenterY else idfn;
			}
		})
		|> TColsA;

	(\p ->
		MIfLazy2T(
			manager,
			p,
			showExpander,
			\se, p2 ->
				MToolbarTitle2T(manager, p2, m.title, m2t, backButton, extended)
				|> (\title -> if (se) {
					customExpander =
						extractStruct(
							m.style,
							MCustomExpander(MIconToggle("arrow_back", [MToggleFalseIcon("menu", [])], []))
						).expander;

					toggleIcon =
						switch (customExpander : Material) {
							MIconToggle(icon, style, state):
								MIconToggle(
									icon,
									style,
									arrayPush(extractMButtonState(m.style), MToggleValue(m.expander))
								);
							MIconButton(name, onClick, style, state):
								MIconButton(
									name,
									\ -> {
										reverseBehaviour(m.expander);
										onClick();
									},
									style,
									extractMButtonState(m.style)
								);
							default: customExpander;
						};

					expander =
						m2t(toggleIcon, p2)
						|> (\f -> TBorder(4., 0., if (isSome(backButton)) 4. else 12., 0., f))
						|> if (isSome(extended)) idfn else TCenterY;

					TCols2A(expander, title)
				} else
					title
					|> TBorderLeft(24.)
				),
			false
		)
		|> TAlignStart
		|> (\t -> TGroup2(t, TFillX()))
		|> (\t -> TCols2A(t, right(p) |> TBorderRight(4.)))
		|> (\f ->
			eitherFn(
				toolbarContent,
				\tc ->
					TGroup([
						TFillXY(),
						m2t(tc.content, p)
						|> (\f2 ->
							if (tc.addBorders)
								TBorder(32., 88., 32., 32., f2)
							else
								f2
						),
						f
					]),
				\ ->
					TGroup2(TFillXY(), f)
			)
		)
		|> (\t -> eitherMap(
				backgroundImage,
				\im ->
					TGroup2(
						TZoomToFill(
							MPicture2T(manager, p, MPicture(im.image, []), m2t),
							TFillXY(),
							true
						)
						|> (\t2 -> TAlpha(
								eitherMap(extended, \e -> e.factor, const(1.)),
								t2
							)),
						t
					),
				t
			))
		|> (\f -> TFrame(0., 0., bgStyle, f))
		|> (\t -> TAvailable(t,
			if (width > 0.0)
				TSizedHeight(width, height)
			else
				TFillXHT(height)
		))
	)
	|> (\f ->
		eitherFn(
			itemsColor,
			\ic ->
				MComponentGroup2T(
					manager,
					parent,
					"MToolbar",
					[
						MaterialTheme(
							MaterialPalette(
								getLightBackground(parent),
								ic,
								getAccentColor(parent),
								ic,
								ic,
								ic,
								ic
							),
							parent.theme.shape,
							parent.theme.type,
							parent.theme.enableAnimations,
							parent.theme.enableRipple,
						)
					],
					f
				),
			\ ->
				f(parent)
		)
	)
	|> (\t -> TShadowShape(parent, elevation, t, BottomRectangleShape()))
	|> (\f ->
		eitherFn(
			toolbarFAB,
			\tf ->
				TCopySize2(f, \tr, f2 -> TFixSize(TLines2(f2, m2t(tf, parent)), tr)),
			\ ->
				f
		)
	)
	|> (\t -> eitherMap(extended, \ext -> {
				startFactor = ref getValue(ext.factor);
				MEasingAnimation(
					manager,
					parent,
					const(0.3),
					const(easingFastOutSlowIn),
					ext.expand,
					\e -> {
						startFactor := getValue(ext.factor);
						Some(e)
					},
					\e, prc -> {
						next(ext.factor, lerp(^startFactor, b2d(e), prc))
					},
					[],
					t
				)},
			t
	))
}

MToolbarTitle2T(manager : MaterialManager, parent : MFocusGroup, title : Material, m2t : (Material, MFocusGroup) -> Tropic,
	backButton : Maybe<MToolbarBackButton>, extended : Maybe<MExtendedToolbarState>) -> Tropic {

	addBackButton =
		\toolbarTitle ->
			eitherMap(
				extended,
				\ext -> {
					lb = flerp(20., 36., ext.factor);
					bb = flerp(16., 24., ext.factor);

					TLines2(TFillY(), TBorderT(lb, zero, zero, bb, toolbarTitle))
				},
				TCenterY(toolbarTitle)
			)
			|> (\t -> TGroup2(TFixed(24., 0.), t))
			|> (\t -> eitherMap(
					backButton,
					\bb -> TCols2A(m2t(bb.button, parent) |> TCenterY, t),
					t
				))
			|> TBorderRight(8.);

	m2ellipsis = \text, textStyle : [MEllipsisTextStyle] ->
		eitherMap(
			extended,
			\ext ->
				TSelect(flerp(20., 24., ext.factor), \font ->
					MEllipsisText2T(
						manager,
						parent,
						MEllipsisText(
							text,
							replaceStructMany(textStyle, [
								extractStruct(textStyle, MShowTooltip(const(true))),
								MFullWidth(),
								MCustomFont(font, "Roboto", 0.87)
							])
						),
						m2t
					)
				),
			MEllipsisText2T(
				manager,
				parent,
				MEllipsisText(
					text,
					if (textStyle == [])
						[MTitle(), MShowTooltip(const(true))]
					else
						replaceStructMany(textStyle, [extractStruct(textStyle, MShowTooltip(const(true)))])
				),
				m2t
			)
		)
		|> addBackButton;

	switch (title : Material) {
		MEllipsisText(text, textStyle): 	m2ellipsis(text, textStyle);
		MText(text, textStyle): 			m2ellipsis(text, textStyle);
		MCenterY(c):						MToolbarTitle2T(manager, parent, c, m2t, backButton, extended);
		default: 							m2t(title, parent) |> addBackButton;
	}
}

tryExtractMToolbarItemsMColor(parent : MFocusGroup, bgStyle : [TGraphicsStyle], style : [flow]) -> Maybe<MColor> {
	if (extractStruct(bgStyle, FillOpacity(1.)).opacity == 1.)
		eitherFn(
			tryExtractStruct(bgStyle, Fill(black)),
			\fl ->
				Some(extractStruct(style, MItemsColor(
					if (fl.color == MColor2int(getPrimaryColor(parent))) {
						if (fl.color == MColor2int(getToolbarItemsColor(parent))) {
							sameLightMColor(parent);
						} else {
							getToolbarItemsColor(parent);
						}
					} else {
						MTextMColor(MCustomColor(fl.color))
					}
				)).color),
			\ ->
				maybeMap(tryExtractStruct(style, MItemsColor(MWhite())), \ic -> ic.color)
		)
	else
		maybeMap(tryExtractStruct(style, MItemsColor(MWhite())), \ic -> ic.color)
}