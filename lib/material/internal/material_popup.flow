import material/internal/material_scroll;
import material/internal/material_shadow;

export {
	MPopup(items : [[Material]], positionScale : Transform<PositionScale>, style : [MPopupStyle]);

	MPopupStyle ::= RMWidth, RMOffset, MElevation, RMSelected, RMBorders, RMOutterBorder, MOpenMenu,
		RMLeftAnimation, RMHeight, RMClickOutToClose, RMTranslateAnimation, RMScaleAnimation,
		RMAlphaAnimation, MSameZorder, RMSameFocus, RMScrollArea, MFixPosition,
		MBackgroundStyle, // Transparency only works in combination with RMNoShadow
		RMNoScrollbars, TScrollPosition, RMCurrentHeight, RMCurrentWidth, RMDontHandle, RMNoSnapSize,
		RMNoShadow, TScrollWidthHeight, MCustomScale, MComponentGroupState, MFocusOnPrevious, MBlockClicks, MRippleShape, MActive;

		RMWidth(width : Transform<double>);
		RMOffset(offset : Transform<Pair<WidthHeight, double>>);
		RMSelected(selected : int);
		RMBorders(borders : double);
		// Doesn't let a popup closer than border to the edge of screen
		RMOutterBorder(border : double);
		RMLeftAnimation(leftAnimation : bool);
		RMClickOutToClose();
		RMTranslateAnimation();
		RMScaleAnimation();
		RMAlphaAnimation();
		RMSameFocus(focus : MaterialFocus);
		RMScrollArea(from : int, to : int);
		RMNoScrollbars();
		RMCurrentHeight(height : DynamicBehaviour<double>);
		RMCurrentWidth(width : DynamicBehaviour<double>);
		RMDontHandle();
		RMNoSnapSize();
		RMHeight(min : double, max : double);

		// Shadow always applies background to your popup, color of
		// background depends on color scheme of your manager. If you need to
		// remove background completely or not satisfied with the shadow,
		// use this one. You can also apply your custom shadow of kind you want
		// to the content itself.
		RMNoShadow();

	RenderMPopup(manager : MaterialManager, parent : MFocusGroup, m : MPopup, m2t : (Material, MFocusGroup) -> Tropic) -> void;
}

popupDownFnUns = initUnsM();

RenderMPopup(manager : MaterialManager, parent : MFocusGroup, m : MPopup, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	items = if (getDefaultRtl()) map(m.items, reverseA) else m.items;
	style = m.style;
	positionScale0 = m.positionScale;
	stageWH = makeWH();

	dpiScale = extractStruct(manager.manager.renderStyle, TInspectDpiFactor(make(Factor(1.0, 1.0)))).factor;
	elevation = extractStruct(style, MElevation(const(8.))).elevation;
	customScale = tryExtractStruct(style, MCustomScale(const(Factor(1., 1.))));
	positionScale = eitherMap(customScale, \cus -> fselect2(positionScale0, cus.factor, FLift2(\ps, cs ->
		PositionScale(ps.pos, Point(cs.x, cs.y)))), positionScale0);

	offset = extractStruct(style, RMOffset(const(Pair(WidthHeight(0., 0.), 0.)))).offset;
	mWidth = extractStruct(style, RMWidth(const(-1.))).width;
	fixPosition = tryExtractStruct(style, MFixPosition(true));
	scrollArea = extractStruct(style, RMScrollArea(0, 0));
	borders = extractStruct(style, RMBorders(16.)).borders;
	additionalBorder = extractStruct(style, RMOutterBorder(8.0)).border;

	mHeight = extractStruct(style, RMHeight(-1., -1.)) |> (\f -> RMHeight(f.min - borders * 2., f.max - borders * 2.));
	maxHeight = \wh : WidthHeight, offs : Point, ps : PositionScale -> {
		hgt0 = wh.height / ps.scale.y - borders * 2.;

		hgt =
			eitherMap(fixPosition,
				\fp ->
					if (fp.top) {if (ps.pos.y > 0.) hgt0 - (ps.pos.y / ps.scale.y + offs.y) else hgt0}
					else max(ps.pos.y, 0.),
				hgt0
			);
		
		if (mHeight.max > 0. && scrollArea.from < scrollArea.to)
			min(mHeight.max, max(max(mHeight.min, 0.), hgt))
		else if (mHeight.min > 0.)
			max(mHeight.min, hgt)
		else
			hgt
	};

	selected = extractStruct(style, RMSelected(-1)).selected;
	inspectVisible = extractStruct(style, makeTScrollInspectVisible());
	scrollPosition : TScrollPosition = extractStruct(style, MScrollPosition(make(zeroPoint)));
	menuOpened = extractStruct(style, MOpenMenu(make(false))).opened;
	leftAnimation = extractStruct(style, RMLeftAnimation(true)).leftAnimation;
	sameZorder = extractStruct(style, MSameZorder(false)).same;
	sameFocus = tryExtractStruct(style, RMSameFocus(manager.focus));
	currentHeight = extractStruct(style, RMCurrentHeight(make(0.))).height;
	currentWidth = extractStruct(style, RMCurrentWidth(make(0.))).width;
	dontHandle = contains(style, RMDontHandle());
	scrollWH = extractStruct(style, MScrollWidthHeight(makeWH(), makeWH()));
	blockClicks = contains(style, MBlockClicks());
	shape = extractStruct(style, MRippleShape("")).component;

	zorder = getValue(manager.manager.zorder);
	newZorder = zorder + 1;
	previousFocus =
		if (contains(style, MFocusOnPrevious())) {
			eitherFn(
				getCurrentFocusedItem(manager),
				\fi -> Some(fi),
				\ -> getPreviousFocusedItem(manager)
			)
		} else {
			None();
		};

	if (!sameZorder) nextDistinct(manager.manager.zorder, newZorder);

	uns = initUnsM();
	beginAnimation = make(false);
	nextDistinct(menuOpened, true);

	sizes : [[DynamicBehaviour<WidthHeight>]] = generate(0, length(items), \i -> generate(0, length(items[i]), \__ -> makeWH()));

	sizesB = fmerge(map(sizes, \s -> fold(s, const(WidthHeight(0., 0.)), \acc : Transform<WidthHeight>, s2 : Transform<WidthHeight> ->
		fselect2(acc, s2, FLift2(\wh1, wh2 -> WidthHeight(wh1.width + wh2.width, max(wh1.height, wh2.height))))
	)));
	positionDpiScale = fselect2(positionScale, dpiScale, FLift2(\psc : PositionScale, dsc : Factor ->
		PositionScale(Point(psc.pos.x / dsc.x, psc.pos.y / dsc.y), Point(psc.scale.x / dsc.x, psc.scale.y / dsc.y))));

	startingOffset = make(zeroPoint);
	startingPosition =
		eitherMap(
			fixPosition, 
			\fp ->
				if (fp.top)
					fselect2(startingOffset, positionDpiScale, FLift2(\so : Point, ps : PositionScale ->
						Point(ps.pos.x + so.x, ps.pos.y + so.y)
					))
				else
					fselect3(startingOffset, positionDpiScale, currentHeight, \so : Point, ps : PositionScale, curH ->
						Point(ps.pos.x + so.x, ps.pos.y + so.y - curH)
					),
			fselect5(
				startingOffset,
				positionDpiScale,
				stageWH,
				currentWidth,
				currentHeight,
				\so : Point, ps : PositionScale, sWH : WidthHeight, curW, curH -> {
					wd = additionalBorder + curW * ps.scale.x;
					hgt = additionalBorder + (curH + borders * 2.) * ps.scale.y;

					Point(
						min(
							if (ps.pos.x + so.x < 0.) {
								if (ps.pos.x > 0.)
									0.
								else
									ps.pos.x
							} else
								ps.pos.x + so.x,
							max(
								sWH.width - wd,
								ps.pos.x - wd
							)
						),
						min(
							if (ps.pos.y + so.y < 0.) {
								if (ps.pos.y > 0.)
									0.
								else
									ps.pos.y
							} else
								ps.pos.y + so.y,
							max(
								sWH.height - hgt,
								ps.pos.y - hgt
							)
						)
					)
			})
		);

	popupDownFn = \h, mi : MouseDownInfo -> {
			if (mi.inside()) {
				dispUnsM(popupDownFnUns);

				manager.downInsideFocus ::= Some(either(sameFocus, RMSameFocus(manager.focus)).focus);
				// Timeout to keep focus inside autocomplete popup
				setUnsM(
					popupDownFnUns,
					interruptibleTimer(120, \ -> manager.downInsideFocus ::= None())
				);
			}

			h
		};

	popupClickOutDownFn = \h, mi : MouseDownInfo -> {
			if (!h && mi.inside()) {
				next(menuOpened, false);
			}

			h || blockClicks
		};

	contentWH =
		fselect2(sizesB, mWidth, FLift2(\szs, w ->
			fold(szs, WidthHeight(0., 0.), \acc, sz ->
				WidthHeight(if (w > 0.) w else max(sz.width, acc.width), sz.height + acc.height)
			)
			|> (\wh ->
				WidthHeight(
					if (contains(style, RMNoSnapSize()) || w > 0.)
						wh.width
					else
						(if (mobile) 56. else 64.)
						|> (\snappingSize -> dceil(wh.width / snappingSize) * snappingSize),
					wh.height
				)
			)
		));

	popupPart = \par, start, end ->
		TEvenGrid(
			generate(start, end, \i ->
				mapi(items[i], \j, it -> TAttachBox(m2t(it, par), sizes[i][j]))
			)
		)
		|> (\f -> TGroup2(f, TFillX()));

	(\p ->
		TLines(
			[
				if (scrollArea.from > 0)
					[popupPart(p, 0, min(scrollArea.from, length(items)))]
				else
					[],
				if (scrollArea.from < scrollArea.to)
					[
						MGetFocusGroup(\p2 ->
							popupPart(p2, max(scrollArea.from, 0), min(scrollArea.to, length(items)))
						)
						|> (\f ->
							MScroll2T(
								manager,
								p,
								MScroll(
									f,
									TFillXY(),
									[scrollPosition, inspectVisible, scrollWH]
									|> (\st ->
										if (contains(style, RMNoScrollbars()))
											concat(st, [TScrollEnabled(const(false)), TScrollbars(invisibleScrollBar, invisibleScrollBar)])
										else
											st
									)
								),
								m2t
							)
						)
					]
				else
					[],
				if (scrollArea.to < length(items))
					[popupPart(p, max(scrollArea.to, 0), length(items))]
				else
					[]
			]
			|> concatA
		)
		|> (\t -> TAvailableWidthHeight(t, currentWidth, currentHeight))
		|> (\f ->
			TConstruct(
				[
					make4Subscribe(
						contentWH,
						stageWH,
						offset,
						positionDpiScale,
						\realSize, wh, offs, ps -> {
							maxSize =
								WidthHeight(
									max(wh.width / ps.scale.x, 0.),
									max(
										maxHeight(
											wh,
											Point(offs.first.width, offs.second + if (selected < 0) offs.first.height else 0.),
											ps
										),
										0.
									)
								);

							wd = min(realSize.width, maxSize.width);
							hgt = min(realSize.height, maxSize.height);

							nextDistinct(currentWidth, wd);
							nextDistinct(currentHeight, hgt);

							offsetX =
								if (!leftAnimation)
									offs.first.width - wd
								else
									offs.first.width;

							szs = fgetValue(sizesB);
							offsY = dsum(map(subrange(szs, 0, selected), \sz -> sz.height));

							offsetY =
								if (selected >= 0)
									offs.second - offsY - borders + getValue(scrollPosition.position).y
								else
									offs.second + offs.first.height;

							if (selected >= 0 && scrollArea.from < scrollArea.to)
								nextDistinct(
									scrollPosition.position,
									Point(
										0.,
										if (realSize.height > maxSize.height && maxSize.height > 0.)
											max(
												0.,
												min(
													offsY - (hgt - szs[selected].height) / 2.,
													realSize.height - maxSize.height
												)
											)
										else
											0.
									)
								);

							nextDistinct(startingOffset, Point(offsetX * ps.scale.x, offsetY * ps.scale.y))
						}
					)
				],
				f
			)
		)
		|> TBorderTopBottom(borders)
		|> (\f -> MPopupAlphaAnimation(manager, p, f, style, beginAnimation, alphaContentDelay, alphaContentDuration))
		|> (\f -> MShapeFrame(p, extractStruct(style, MBackgroundStyle([MFill(MDialogColor(getLightBackground(p)))])).style, f, shape))
		|> (\f -> MPopupScaleAnimation(manager, p, f, style, beginAnimation, elevation))
		|> (\f -> MPopupAlphaAnimation(manager, p, f, style, beginAnimation, alphaDelay, alphaDuration))
		|> (\f -> if (dontHandle) f else TInteractive([TMouseDown(make(false))], f))
		|> (\f ->
			if (isSome(sameFocus))
				TCopySize(
					f,
					\tr ->
						TInteractive(
							[
								MouseDown2(popupDownFn),
								MouseRightDown2(popupDownFn),
								MouseMiddleDown2(popupDownFn)
							],
							tr
						),
					true
				)
			else
				f
		)
		|> (\f -> TScale(fselect(positionDpiScale, FLift(\psc -> Factor(psc.scale.x, psc.scale.y))), f))
	)
	|> (\f ->
		MComponentGroup2T(
			manager,
			parent,
			"MPopup",
			concat(
				extractMComponentGroupState(style)
				|> (\f2 -> if (sameZorder) f2 else concatStyles(f2, [MZorder(const(newZorder))])),
				[IScriptBehaviour("opened", menuOpened, ISInputValue([], "bool", false))]
			),
			f
		)
	)
	|> (\f -> if (dontHandle) f else disableInteractivesBelow(f))
	|> (\f -> MPopupTranslateAnimation(manager, parent, f, style, beginAnimation, startingPosition))
	|> (\f ->
		if (contains(style, RMClickOutToClose()))
			TGroup2(
				TInteractive(
					[
						MouseDown2(popupClickOutDownFn),
						MouseRightDown2(popupClickOutDownFn),
						MouseMiddleDown2(popupClickOutDownFn)
					],
					TRectangle(interactiveRectangleStyle, TFillXY())
				),
				f
			)
		else
			f
	)
	|> (\f ->
		TConstruct(
			[
				makeSubscribe(menuOpened, \op -> if (op) deferUntilRender(\ -> next(beginAnimation, true)) else dispUnsM(uns))
			],
			f
		)
	)
	|> (\t -> TAttachAvailable(t, stageWH))
	|> (\f -> {
		tUns = ref Some(trender(f, manager.manager.renderStyle));

		fwUns = onFullWindow(\fw -> if (fw) {
			dispUnsM(tUns);
			setUnsM(tUns, trender(f, manager.manager.renderStyle));
		});

		setUnsM(
			uns,
			\ -> {
				fwUns();
				dispUnsM(tUns);
				if (!sameZorder) {
					nextDistinct(manager.manager.zorder, zorder);
				};

				maybeApply(previousFocus, \pf -> {
					nextDistinct(pf.focused, true);

					if (isNone(manager.downInsideFocus)) {
						manager.downInsideFocus ::= Some(pf);
						deferred(\ -> manager.downInsideFocus ::= None());
					}
				});
			}
		);
	})
}

alphaDuration = mStepOf5TransitionDuration(2);
alphaDelay = 0.;
alphaContentDuration = mStepOf5TransitionDuration(3) - mStepOf5TransitionDuration(1);
alphaContentDelay = mStepOf5TransitionDuration(1);
alphaStart = 0.0;
alphaFinish = 1.0;

MPopupAlphaAnimation(manager : MaterialManager, parent : MFocusGroup, content : Tropic, style : [MPopupStyle], beginAnimation : DynamicBehaviour<bool>, delay : double,
	duration : double) -> Tropic {
	if (parent.theme.enableAnimations && contains(style, RMAlphaAnimation())) {
		alphaAnimation = make(alphaStart);

		MEasingAnimation(
			manager,
			parent,
			const(duration),
			const(easingStandartCurve),
			beginAnimation,
			\v -> {
				if (v)
					Some(Pair(alphaStart, alphaFinish))
				else
					None()
			},
			\v, px -> next(alphaAnimation, lerp(v.first, v.second, px)),
			[MDelay(delay)],
			TAlpha(alphaAnimation, content)
		)
	} else
		content
}

heightDuration = mStepOf5TransitionDuration(3);
heightStart = 0.25;
heightFinish = 1.0;

widthDuration = mStepOf5TransitionDuration(2);
widthStart = 0.5;
widthFinish = 1.0;

MPopupScaleAnimation(manager : MaterialManager, parent : MFocusGroup,
	content : Tropic, style : [MPopupStyle],
	beginAnimation : DynamicBehaviour<bool>, elevation : Transform<double>) -> Tropic {
	leftAnimation = extractStruct(style, RMLeftAnimation(true)).leftAnimation;
	maybeShadow =
		\f -> if ( contains(style, RMNoShadow()) ) {
			f;
		} else {
			TShadowShape(parent, elevation, f, RectangleShape("MDialog"));
		};

	if (parent.theme.enableAnimations && contains(style, RMScaleAnimation())) {
		scaleAnimation = make(Factor(widthStart, heightStart));

		(\tr, mi ->
			MEasingAnimation(
				manager,
				parent,
				const(widthDuration),
				const(easingStandartCurve),
				beginAnimation,
				\v -> {
					if (v)
						Some(Pair(widthStart, widthFinish))
					else
						None()
				},
				\v, px -> next(scaleAnimation, Factor(lerp(v.first, v.second, px), getValue(scaleAnimation).y)),
				[],
				TCropSize(TScale(scaleAnimation, tr), mi)
			)
			|> (\f2 ->
				MEasingAnimation(
					manager,
					parent,
					const(heightDuration),
					const(easingStandartCurve),
					beginAnimation,
					\v -> {
						if (v)
							Some(Pair(heightStart, heightFinish))
						else
							None()
					},
					\v, px -> next(scaleAnimation, Factor(getValue(scaleAnimation).x, lerp(v.first, v.second, px))),
					[],
					f2
				)
			)
			|> maybeShadow
			|> (\f3 ->
				if (leftAnimation)
					f3
				else
					TCols2(
						TSubtractGroup2(tr, TScale(scaleAnimation, tr)),
						f3
					)
			)
			|> (\f2 -> TFixSize(f2, tr))
		)
		|> (\f -> TCopySize2(content, f))
	} else {
		maybeShadow(content);
	}
}

translateDuration = easingTransitionDuration;
translateStart = -48.0;
translateFinish = 0.;

MPopupTranslateAnimation(manager : MaterialManager, parent : MFocusGroup, content : Tropic, style : [MPopupStyle], beginAnimation : DynamicBehaviour<bool>,
	startingB : Transform<Point>) -> Tropic {
	if (parent.theme.enableAnimations && contains(style, RMTranslateAnimation())) {
		translateAnimation = make(Point(0., if (contains(style, RMTranslateAnimation())) translateStart else translateFinish));
		xyB = fpointaddition(startingB, translateAnimation);

		MEasingAnimation(
			manager,
			parent,
			const(translateDuration),
			const(easingStandartCurve),
			beginAnimation,
			\v -> {
				if (v)
					Some(Pair(translateStart, translateFinish))
				else
					None()
			},
			\v, px -> next(translateAnimation, Point(0., lerp(v.first, v.second, px))),
			[],
			TTranslate(
				xyB,
				TCopySize(
					content,
					\tr ->
						TShow(
							fneq(translateAnimation, Point(0., translateFinish)),
							TInteractive([RollOver(nop1), RollOut(nop1)], tr)
						),
					true
				)
			)
		)
	} else
		TTranslate(startingB, content)
}
