import material/material;

export {
	// Simplified version of MTransformTAcc
	MTransformTAcc2(fn : ((Material) -> TAcc) -> TAcc) -> Material;

	TSetMinSize(size : Tropic) -> (Tropic) -> Tropic;
	TSetMinWidth(width : Tropic) -> (Tropic) -> Tropic;
	TSetMinWidth2(minWidth : Transform<double>) -> (Tropic) -> Tropic;
	TSetMinHeight(height : Tropic) -> (Tropic) -> Tropic;
	TSetMinHeight2(minHeight : Transform<double>) -> (Tropic) -> Tropic;

	TSetMaxSize(size : Tropic) -> (Tropic) -> Tropic;
	TSetMaxWidth(width : Tropic) -> (Tropic) -> Tropic;
	TSetMaxWidth2(maxWidth : Transform<double>) -> (Tropic) -> Tropic;
	TSetMaxHeight(height : Tropic) -> (Tropic) -> Tropic;
	TSetMaxHeight2(maxHeight : Transform<double>) -> (Tropic) -> Tropic;

	MSetMinSize(size : Material) -> (Material) -> Material;
	MSetMinWidth(width : Material) -> (Material) -> Material;
	MSetMinWidth2(minWidth : Transform<double>) -> (Material) -> Material;
	MSetMinHeight(height : Material) -> (Material) -> Material;
	MSetMinHeight2(minHeight : Transform<double>) -> (Material) -> Material;

	MSetMaxSize(size : Material) -> (Material) -> Material;
	MSetMaxWidth(width : Material) -> (Material) -> Material;
	MSetMaxWidth2(maxWidth : Transform<double>) -> (Material) -> Material;
	MSetMaxHeight(height : Material) -> (Material) -> Material;
	MSetMaxHeight2(maxHeight : Transform<double>) -> (Material) -> Material;

	MSetMaxAvailableWidth(width : Material) -> (Material) -> Material;
	MSetMaxAvailableHeight(height : Material) -> (Material) -> Material;

	TFixWidth(width : Tropic) -> (Tropic) -> Tropic;
	TSetWidth(width : Tropic) -> (Tropic) -> Tropic { TFixWidth(width) };
	TFixHeight(height : Tropic) -> (Tropic) -> Tropic;
	TSetHeight(width : Tropic) -> (Tropic) -> Tropic { TFixHeight(width) };
	TFixHeight2Maybe(width : Transform<Maybe<double>>) -> (Tropic) -> Tropic;

	MFixWidth(width : Material) -> (Material) -> Material;
	MSetWidth(width : Material) -> (Material) -> Material { MFixWidth(width) };
	MFixHeight(height : Material) -> (Material) -> Material;
	MSetHeight(width : Material) -> (Material) -> Material { MFixHeight(width) };

	TSetXFillers(xFillers : Transform<double>) -> (Tropic) -> Tropic;
	TSetYFillers(yFillers : Transform<double>) -> (Tropic) -> Tropic;
	MSetXFillers(xFillers : Transform<double>) -> (Material) -> Material;
	MSetYFillers(yFillers : Transform<double>) -> (Material) -> Material;
	MSetAddFillers(addFillers : Transform<bool>) -> (Material) -> Material;

	MAvailableWidthPreventFillers(m : Material, avWidth : Transform<double>) -> Material;
	TAvailableWidthPreventFillers(t : Tropic, avWidth : Transform<double>) -> Tropic;
	MAvailableHeightPreventFillers(m : Material, avHeight : Transform<double>) -> Material;
	TAvailableHeightPreventFillers(t : Tropic, avHeight : Transform<double>) -> Tropic;
}

MTransformTAcc2(fn : ((Material) -> TAcc) -> TAcc) -> Material {
	MTransformTAcc(\t2a, p, s, mo -> fn(\mat -> t2a(mat, p, s, mo)))
}

TSetMinSize(size : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TGroup2(size |> TSizeOf, tropic)
}

TSetMinWidth(width : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TGroup2(width |> TWidth, tropic)
}

TSetMinWidth2(minWidth : Transform<double>) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\t2a -> {
		b = t2a(tropic);

		TAcc(
			b.form,
			b.metrics,
			minWidth,
			b.minHeight,
			b.maxWidth,
			b.maxHeight,
			b.xFillers,
			b.yFillers,
			b.addFillers,
			b.xConstant,
			b.yConstant,
			b.disposers
		)
	})
}

TSetMinHeight(height : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TGroup2(height |> THeight, tropic)
}

TSetMinHeight2(minHeight : Transform<double>) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\t2a -> {
		b = t2a(tropic);

		TAcc(
			b.form,
			b.metrics,
			b.minWidth,
			minHeight,
			b.maxWidth,
			b.maxHeight,
			b.xFillers,
			b.yFillers,
			b.addFillers,
			b.xConstant,
			b.yConstant,
			b.disposers
		)
	})
}

TSetMaxSize(size : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TMinimumGroup2(size |> TSizeOf, tropic)
}

TSetMaxWidth(width : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\tac -> {
		b = tropic |> tac;
		wdb = width |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				fmin(b.metrics.width, wdb.metrics.width),
				b.metrics.height,
				b.metrics.baseline
			),
			fmin(b.minWidth, wdb.minWidth),
			b.minHeight,
			fmin(b.maxWidth, wdb.maxWidth),
			b.maxHeight,
			fmax(b.xFillers, wdb.xFillers),
			b.yFillers,
			const(false),
			b.xConstant && wdb.xConstant,
			b.yConstant,
			concat(b.disposers, wdb.disposers)
		)
	})
}

TSetMaxWidth2(maxWidth : Transform<double>) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\t2a -> {
		b = t2a(tropic);

		TAcc(
			b.form,
			b.metrics,
			b.minWidth,
			b.minHeight,
			maxWidth,
			b.maxHeight,
			b.xFillers,
			b.yFillers,
			b.addFillers,
			b.xConstant,
			b.yConstant,
			b.disposers
		)
	})
}

TSetMaxHeight(height : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\tac -> {
		b = tropic |> tac;
		hdb = height |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				b.metrics.width,
				fmin(b.metrics.height, hdb.metrics.height),
				b.metrics.baseline
			),
			b.minWidth,
			fmin(b.minHeight, hdb.minHeight),
			b.maxWidth,
			fmin(b.maxHeight, hdb.maxHeight),
			b.xFillers,
			fmax(b.yFillers, hdb.yFillers),
			const(false),
			b.xConstant,
			b.yConstant && hdb.yConstant,
			concat(b.disposers, hdb.disposers)
		)
	})
}

TSetMaxHeight2(maxHeight : Transform<double>) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\t2a -> {
		b = t2a(tropic);

		TAcc(
			b.form,
			b.metrics,
			b.minWidth,
			b.minHeight,
			b.maxWidth,
			maxHeight,
			b.xFillers,
			b.yFillers,
			b.addFillers,
			b.xConstant,
			b.yConstant,
			b.disposers
		)
	})
}

MSetMinSize(size : Material) -> (Material) -> Material {
	\material -> MGroup2(size |> MSizeOf, material)
}

MSetMinWidth(width : Material) -> (Material) -> Material {
	\material -> MGroup2(width |> (\f -> MScale(const(Factor(1., 0.)), f)), material)
}

MSetMinWidth2(minWidth : Transform<double>) -> (Material) -> Material {
	\m -> MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> 
		TSetMinWidth2(minWidth)(m2t(m, p))
	))
}

MSetMinHeight(height : Material) -> (Material) -> Material {
	\material -> MGroup2(height |> (\f -> MScale(const(Factor(0., 1.)), f)), material)
}

MSetMinHeight2(minHeight : Transform<double>) -> (Material) -> Material {
	\m -> MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> 
		TSetMinHeight2(minHeight)(m2t(m, p))
	))
}

MSetMaxSize(size : Material) -> (Material) -> Material {
	\material -> MMinimumGroup2(size |> MSizeOf, material)
}

MSetMaxWidth(width : Material) -> (Material) -> Material {
	\material -> MTransformTAcc2(\tac -> {
		b = material |> tac;
		wdb = width |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				fmin(b.metrics.width, wdb.metrics.width),
				b.metrics.height,
				b.metrics.baseline
			),
			fmin(b.minWidth, wdb.minWidth),
			b.minHeight,
			fmin(b.maxWidth, wdb.maxWidth),
			b.maxHeight,
			fmax(b.xFillers, wdb.xFillers),
			b.yFillers,
			const(false),
			b.xConstant && wdb.xConstant,
			b.yConstant,
			concat(b.disposers, wdb.disposers)
		)
	})
}

MSetMaxWidth2(maxWidth : Transform<double>) -> (Material) -> Material {
	\m -> MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> 
		TSetMaxWidth2(maxWidth)(m2t(m, p))
	))
}

MSetMaxHeight(height : Material) -> (Material) -> Material {
	\material -> MTransformTAcc2(\tac -> {
		b = material |> tac;
		hdb = height |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				b.metrics.width,
				fmin(b.metrics.height, hdb.metrics.height),
				b.metrics.baseline
			),
			b.minWidth,
			fmin(b.minHeight, hdb.minHeight),
			b.maxWidth,
			fmin(b.maxHeight, hdb.maxHeight),
			b.xFillers,
			fmax(b.yFillers, hdb.yFillers),
			const(false),
			b.xConstant,
			b.yConstant && hdb.yConstant,
			concat(b.disposers, hdb.disposers)
		)
	})
}

MSetMaxHeight2(maxHeight : Transform<double>) -> (Material) -> Material {
	\m -> MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> 
		TSetMaxHeight2(maxHeight)(m2t(m, p))
	))
}

MSetMaxAvailableWidth(width : Material) -> (Material) -> Material {
	\material -> MTransformTAcc(\t2a, pi, st, mo -> {
		wdb = t2a(width, pi, st, mo);
		b = t2a(material, TParentInfo(pi with maxX = fmin(wdb.metrics.width, pi.maxX)), st, mo);

		TAcc(
			b.form,
			TFormMetrics(
				fmin(b.metrics.width, wdb.metrics.width),
				b.metrics.height,
				b.metrics.baseline
			),
			fmin(b.minWidth, wdb.minWidth),
			b.minHeight,
			fmin(b.maxWidth, wdb.maxWidth),
			b.maxHeight,
			fmax(b.xFillers, wdb.xFillers),
			b.yFillers,
			const(false),
			b.xConstant && wdb.xConstant,
			b.yConstant,
			concat(b.disposers, wdb.disposers)
		)
	})
}

MSetMaxAvailableHeight(height : Material) -> (Material) -> Material {
	\material -> MTransformTAcc(\t2a, pi, st, mo -> {
		hdb = t2a(height, pi, st, mo);
		b = t2a(material, TParentInfo(pi with maxY = fmin(hdb.metrics.height, pi.maxY)), st, mo);

		TAcc(
			b.form,
			TFormMetrics(
				b.metrics.width,
				fmin(b.metrics.height, hdb.metrics.height),
				b.metrics.baseline
			),
			b.minWidth,
			fmin(b.minHeight, hdb.minHeight),
			b.maxWidth,
			fmin(b.maxHeight, hdb.maxHeight),
			b.xFillers,
			fmax(b.yFillers, hdb.yFillers),
			const(false),
			b.xConstant,
			b.yConstant && hdb.yConstant,
			concat(b.disposers, hdb.disposers)
		)
	})
}

TFixWidth(width : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\tac -> {
		b = tropic |> tac;
		wdb = width |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				wdb.metrics.width,
				b.metrics.height,
				b.metrics.baseline
			),
			wdb.minWidth,
			b.minHeight,
			wdb.maxWidth,
			b.maxHeight,
			wdb.xFillers,
			b.yFillers,
			b.addFillers,
			wdb.xConstant,
			b.yConstant,
			concat(b.disposers, wdb.disposers)
		)
	})
}

TFixHeight(height : Tropic) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\tac -> {
		b = tropic |> tac;
		hgtb = height |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				b.metrics.width,
				hgtb.metrics.height,
				hgtb.metrics.baseline
			),
			b.minWidth,
			hgtb.minHeight,
			b.maxWidth,
			hgtb.maxHeight,
			b.xFillers,
			hgtb.yFillers,
			b.addFillers,
			b.xConstant,
			hgtb.yConstant,
			concat(b.disposers, hgtb.disposers)
		)
	})
}

TFixHeight2Maybe(height : Transform<Maybe<double>>) -> (Tropic) -> Tropic {
	\tropic -> TransformTAcc2(\tac -> {
		b : TAcc = tropic |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				b.metrics.width,
				feither(height, b.metrics.height),
				feither(height, b.metrics.baseline)
			),
			b.minWidth,
			feither(height, b.minHeight),
			b.maxWidth,
			feither(height, b.maxHeight),
			b.xFillers,
			feitherMap(height, \__ -> 0., b.yFillers),
			b.addFillers,
			b.xConstant,
			isFConst(height) && b.yConstant,
			b.disposers
		)
	})
}

MFixWidth(width : Material) -> (Material) -> Material {
	\material -> MTransformTAcc2(\tac -> {
		b = material |> tac;
		wdb = width |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				wdb.metrics.width,
				b.metrics.height,
				b.metrics.baseline
			),
			wdb.minWidth,
			b.minHeight,
			wdb.maxWidth,
			b.maxHeight,
			wdb.xFillers,
			b.yFillers,
			b.addFillers,
			wdb.xConstant,
			b.yConstant,
			concat(b.disposers, wdb.disposers)
		)
	})
}

MFixHeight(height : Material) -> (Material) -> Material {
	\material -> MTransformTAcc2(\tac -> {
		b = material |> tac;
		hgtb = height |> tac;

		TAcc(
			b.form,
			TFormMetrics(
				b.metrics.width,
				hgtb.metrics.height,
				hgtb.metrics.baseline
			),
			b.minWidth,
			hgtb.minHeight,
			b.maxWidth,
			hgtb.maxHeight,
			b.xFillers,
			hgtb.yFillers,
			b.addFillers,
			b.xConstant,
			hgtb.yConstant,
			concat(b.disposers, hgtb.disposers)
		)
	})
}

TSetXFillers(xFillers : Transform<double>) -> (Tropic) -> Tropic {
	\t -> TransformTAcc2(\t2a -> TAcc(t2a(t) with xFillers = xFillers))
}

TSetYFillers(yFillers : Transform<double>) -> (Tropic) -> Tropic {
	\t -> TransformTAcc2(\t2a -> TAcc(t2a(t) with yFillers = yFillers))
}

MSetXFillers(xFillers : Transform<double>) -> (Material) -> Material {
	\m -> MTransformTAcc2(\t2a -> TAcc(t2a(m) with xFillers = xFillers))
}

MSetYFillers(yFillers : Transform<double>) -> (Material) -> Material {
	\m -> MTransformTAcc2(\t2a -> TAcc(t2a(m) with yFillers = yFillers))
}

MSetAddFillers(addFillers : Transform<bool>) -> (Material) -> Material {
	\m -> MTransformTAcc2(\t2a -> TAcc(t2a(m) with addFillers = addFillers))
}

MAvailableWidthPreventFillers(m : Material, avWidth : Transform<double>) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TAvailableWidthPreventFillers(m2t(m, p), avWidth)))
}

TAvailableWidthPreventFillers(t : Tropic, avWidth : Transform<double>) -> Tropic {
	TransformTAcc2(\t2a -> {
		b = t2a(TAvailableWidth(t, avWidth));
		xFillersCheck = feq(b.xFillers, 0.0);
		minW = fif(xFillersCheck, fmin(b.minWidth, avWidth), fmax(b.minWidth, avWidth));
		TAcc(b with 
			minWidth = minW,
			maxWidth = fmax(fif(xFillersCheck, b.maxWidth, avWidth), minW),
			xFillers = zero
		)
	})
}

MAvailableHeightPreventFillers(m : Material, avHeight : Transform<double>) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TAvailableHeightPreventFillers(m2t(m, p), avHeight)))
}

TAvailableHeightPreventFillers(t : Tropic, avHeight : Transform<double>) -> Tropic {
	TransformTAcc2(\t2a -> {
		b = t2a(TAvailableHeight(t, avHeight));
		yFillersCheck = feq(b.yFillers, 0.0);
		minH = fif(yFillersCheck, fmin(b.minHeight, avHeight), fmax(b.minHeight, avHeight));
		TAcc(b with 
			minHeight = minH,
			maxHeight = fmax(fif(yFillersCheck, b.maxHeight, avHeight), minH),
			yFillers = zero
		)
	})
}