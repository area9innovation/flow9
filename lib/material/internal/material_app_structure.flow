import material/internal/material_toolbar;

export {
	MAppStructure2T(manager : MaterialManager, parent : MFocusGroup, m : MAppStructure, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MAppState(
	interactionId : int,
	content : Pair<Material, Transform<bool>>,
	floatingContent : Pair<Material, Transform<bool>>,
	appBar : Maybe<MAppBarState>,
	leftNav : Maybe<MAppNav>,
	rightNav : Maybe<MAppNav>,
	bottomSheet : Maybe<MBottomSheetState>,
	flexible : Maybe<MAppFlexibleState>,
	point : DynamicBehaviour<Point>,
	down : DynamicBehaviour<bool>,
	wh : DynamicBehaviour<WidthHeight>,
	availWH : DynamicBehaviour<WidthHeight>,
	scrollInspect : TScrollInspectVisible,
	scrollParent : DynamicBehaviour<Maybe<MFocusGroup>>,
	state : [MComponentGroupState],
);

MAppNav(content : Material, expander : DynamicBehaviour<bool>, mini : bool, persistent : Transform<bool>, width : double, miniWidth : double,
	gap : Transform<double>, swipeEnabled : Transform<bool>, focusEnabled : Transform<bool>);

MAppFlexibleState(persistent : Transform<bool>, persistentB : DynamicBehaviour<bool>, showExpander : Transform<bool>, showToolbar : Transform<bool>);

MAppBarState(
	content : Material,
	focusEnabled : Transform<bool>,
	scrollPosition : DynamicBehaviour<Point>,
	floatingToolbar : Maybe<MFloatingToolbarState>,
	extendToolbar : Maybe<MExtendedAppBarState>
);

MFloatingToolbarState(
	translation : Transform<double>,
	expanded : Transform<bool>,
	subs : [() -> () -> void]
);

MExtendedAppBarState(
	trigger : DynamicBehaviour<bool>,
	image : Maybe<MBackgroundImage>,
	style : [MExtendedToolbarStyle]
);

MBottomSheetState(
	content : (expanded : Transform<bool>) -> Material,
	expanding : Maybe<MExpandingBottomSheet>,
	modal : Maybe<MModalBottomSheetState>,
	style : [MBottomSheetStyle]
);

MModalBottomSheetState(
	show : DynamicBehaviour<bool>,
	progress : DynamicBehaviour<double>
);

MBottomSheetAnimationTrigger(
	mouseDown : bool,
	expanded : bool,
	screenHeight : double
);

MBottomSheetAnimationStartState(
	pointY : double,
	boxHeight : double,
	scrollPositionY : double
);

sideNavStandardWidth = 320.;

MAppStructure2T(manager : MaterialManager, parent : MFocusGroup, m : MAppStructure, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
		state = makeMAppState(manager, m);

		TDisplay("MAppContent")
		|> (\t -> eitherMap(state.flexible,
				\__ -> TCols2(t, TGhost("MAppSideSheet")),
				t)
			)
		|> restrictSizeBySideNavs(state)
		|> (\f : Tropic ->
			eitherMap(state.appBar, \ab -> {
				scrollEnabled = eitherMap(ab.extendToolbar, \eab -> fnot(eab.trigger), const(true));
				scrollStyle = [
					[
						state.scrollInspect,
						TScrollPosition(ab.scrollPosition),
						TScrollKeysEnabled(const(true)),
						TScrollMouseEnabled(scrollEnabled)
					],
					if (isSome(ab.floatingToolbar) || isSome(ab.extendToolbar)) [
						TScrollDisableOutOfBounds(const(true)),
						TScrollbars(invisibleScrollBar, invisibleScrollBar),
					]
					else []
				]
				|> concatA;

				(if (isSome(ab.floatingToolbar)) TLines2(THeight(TGhost("MAppBar")), f) else f)
				|> wrapContentByScroll(manager, parent, state.scrollParent, m2t, m.style, scrollStyle)
				|> (\t -> if (isNone(ab.floatingToolbar)) TLines2(THeight(TGhost("MAppBar")), t) else t)
				|> (\t -> TGroup2SameMetrics(t, TDisplay("MAppBar")))
				|> (\t : Tropic ->
					eitherMap(ab.extendToolbar, \eab ->
						MSwipe2T(manager, parent, MSwipe(t, [
							MOnSwipeUp(\p, delta -> {
								nextDistinct(eab.trigger, false);
								false;
							}),
							MOnSwipeDown(\p, delta -> {
								if (getValue(ab.scrollPosition) == zeroPoint) nextDistinct(eab.trigger, true);
								false;
							})
						]), m2t),
					t))
				},
				wrapContentByScroll(manager, parent, state.scrollParent, m2t, m.style, [
					state.scrollInspect,
					TScrollKeysEnabled(const(true)),
				])(f)
			)
		)
		|> (\t -> eitherMap(
				state.bottomSheet,
				\bs -> eitherMap(bs.expanding, \__ -> t, TLines2(t, TGhost("MAppBottomSheet"))),
				t
			))
		|> (\t -> TGroupSameMetrics([
				t,
				TDisplay("MModalBottomSheetBackground"),
				TDisplay("MAppBottomSheet") |> TAlignBottom,
				TDisplay("MAppFloatingContent")
			]))
		|> (\t -> eitherMap(state.flexible,
				\__ -> TGroup2(t, TCols([TFillX(), TDisplay("MAppSideSheet"), TGhost("MAppRightPanelSize")])),
				t)
			)
		|> (\f ->
			TGroup2SameMetrics(
				f,
				eitherMap(state.leftNav, \__ ->	TDisplay("MAppLeftPanel"), TEmpty())
				|> (\f2 ->
					eitherMap(state.rightNav,
						\rn ->
							TIf(
								rn.persistent,
								TGroup2WithoutMetrics(TDisplay("MAppRightPanel"), f2),
								TGroup2WithoutMetrics(f2, TDisplay("MAppRightPanel"))
							),
						f2
					)
				)
			)
		)
		|> (\f -> letAppBar(manager, parent, f, state, m2t))
		|> (\f -> letContentAndSize(manager, parent, f, m.style, state, m2t))
		|> (\f -> letBottomSheet(manager, parent, f, state, m2t))
		|> (\f -> letSideSheet(manager, parent, f, state, m2t))
		|> (\f -> letExpander(manager, parent, f, state, m2t, false))
		|> (\f -> letExpander(manager, parent, f, state, m2t, true))
		|> (\f -> letFloatingContent(manager, parent, f, state, m2t))
		|> (\f -> letFlextibleApp(f, state))
}

letBottomSheet(manager : MaterialManager, parent : MFocusGroup, content : Tropic, state : MAppState, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	
	bgLayer =
		eitherMap(
			state.bottomSheet,
			\bottom ->
				eitherMap(bottom.modal, \mdl -> {
					down = make(false);
					alpha = fmultiply(mdl.progress, const(0.6));

					TRectangle([MFill(MBlack())], TGhost("MAppSize"))
					|> (\t -> TAlpha(alpha, t))
					|> (\t -> TInteractive([TMouseDown(down)], t))
					|> (\t -> TConstruct([makeSubscribe2(down, \d -> if (!d) nextDistinct(mdl.show, false))], t))
					|> disableInteractivesBelow
					|> (\t -> TShow(fneq(mdl.progress, 0.), t))
				},
				TEmpty()
			),
			TEmpty()
		);

	eitherMap(
		state.bottomSheet,
		\bottom -> {
			minBottomSheetHeight = eitherMap(bottom.modal, \__ -> 0., 56.);
			gapThreshold = extractStruct(bottom.style, MSwipeGap(24.)).gap;
			expanded = extractStruct(bottom.style, MExpanded(make(false))).expanded;
			swipeDownEnabled = extractStruct(bottom.style, MSwipeDownEnabled(const(true))).enabled;

			screenHeight = fheight(state.availWH);

			bottomSheetMaxCollapsed = fdivide(screenHeight, const(2.)); 
			collapsedHeight0 =
				extractStruct(
					bottom.style,
					MCollapsedHeight(eitherMap(bottom.modal, \__ -> bottomSheetMaxCollapsed, const(minBottomSheetHeight)))
				).height;
			collapsedHeight = 
				eitherMap(
					bottom.expanding,
					\__ -> const(minBottomSheetHeight),
					eitherMap(
						bottom.modal,
						\__ -> collapsedHeight0,
						fmin(
							fmax(collapsedHeight0, const(minBottomSheetHeight)),
							bottomSheetMaxCollapsed
						)
					)
				);

			bottomSheetHeight0 = make(0.);
			bottomSheetHeight =
				fmin(
					screenHeight,
					eitherMap(
						bottom.modal,
						\__ -> bottomSheetHeight0,
						fmax(bottomSheetHeight0, collapsedHeight)
					)
				);

			startState = ref MBottomSheetAnimationStartState(0., 0., 0.);
			mouseDown = make(false);
			closeOnClick = isSome(bottom.modal);
			scrollPosition = make(zeroPoint);
			scrollBarStyle = TScrollbarStyle(materialScrollBar with visible = expanded);

			blockSwiping = make(false);
			swipeEnabled = fand(fnot(blockSwiping), fOr(swipeDownEnabled, fnot(expanded)));

			expandingProgress = make(0.);
			expanding2tropic = \bottomContent0 -> \e -> {
				radius = 24.;
				icon = tryExtractStruct(e.style, MExpandingBottomSheetIcon(""));
				additionalItems = extractStruct(e.style, MExpandingBottomSheetAdditional([])).items;
				bgColor = extractStruct(e.style, parent.theme.palette.accent);

				bottomContent =
					TGroup2(
						TRectangle([MFill(MWhite())], TFillXY()),
						TAlpha(expandingProgress, bottomContent0)
					);

				[
					[
						MIconButton("keyboard_arrow_down", \ -> next(expanded, false), [], [])
						|> (\m -> MScale(ffactor2(expandingProgress), m))
					],
					eitherMap(icon, \ic -> [MBorder4(8., MIcon(ic.icon, []))], []),
					[
						MDynamicText(e.title, []),
						MScaleAvailable(ffactor2(fmin(fmultiply(expandingProgress, const(2.)), const(1.))), TFillX())
					],
					additionalItems
				]
				|> concatA
				|> MBaselineColsA
				|> (\m -> MExplicitTheme(m, const(isLightMColor(bgColor)), []))
				|> (\m -> m2t(m, parent))
				|> TBorderLeftRight(8.)
				|> (\t -> TCenterYIn(t, TFixed(0., minBottomSheetHeight)))
				|> (\t -> TCopySize(t, \tr -> TRounded(radius, 0., 0., 0., [MFill(bgColor)], tr), false))
				|> (\t -> clickable(manager, parent, t, \ -> next(expanded, true)))
				|> (\t -> TGroup2(TAlpha(expandingProgress, TRectangle([MFill(bgColor)], TFixed(radius, radius))), t))
				|> TAlignEnd
				|> (\t -> TLines2(t, bottomContent))
			};

			animationTrigger = fselect3(mouseDown, expanded, screenHeight, \d, e, h -> MBottomSheetAnimationTrigger(d, e, h));
			animationFreeze = make(false);

			m2t(bottom.content(expanded), parent)
			|> addTBackground(MWhite())
			|> (\t -> eitherMap(bottom.modal, \mdl ->
				TAnimatedExpander(manager, parent, t, mdl.show, [
					MAnimationDuration(const(0.3)),
					MExpandFromStart(),
					MExpanderProgress(mdl.progress)
				]), t))
			|> (\t -> TCopySize(t, \tr -> TInteractive([TMouseDownGhost(mouseDown)], tr), true))
			|> disableInteractivesBelow
			|> (\t -> eitherMap(bottom.expanding, expanding2tropic(t), t))
			|> (\t ->
				MScroll2T(manager, parent,
					MScroll(
						t,
						TFillXHT(bottomSheetHeight),
						[
							TScrollCropByContent(),
							TScrollDisableOutOfBounds(const(true)),
							TScrollEnabled(expanded),
							TScrollbars(scrollBarStyle, scrollBarStyle),
							TScrollPosition(scrollPosition)
						]
					),
					m2t
				)
			)
			|> (\t -> TGroup2(TFillXH(minBottomSheetHeight), t))
			|> (\m ->
					MEasingAnimation(
						manager,
						parent,
						const(0.3),
						const(easingFastOutSlowIn),
						animationTrigger,
						\trigger ->
							if (trigger.mouseDown || getValue(blockSwiping)) None()
							else {
								from = fgetValue(bottomSheetHeight);
								to = if (trigger.expanded) trigger.screenHeight else fgetValue(collapsedHeight);

								maybeApply(bottom.modal, \mdl ->
									if (from <= fgetValue(collapsedHeight)) nextDistinct(mdl.show, false)
								);

								if (from == to) None() else Some(Pair(from, to))
							},
						\coord, prc -> {
							nextDistinct(expandingProgress, if (coord.first < coord.second) prc else 1. - prc);			
							nextDistinct(bottomSheetHeight0, lerp(coord.first, coord.second, prc))
						},
						[MFreezeAnimation(animationFreeze), MAutoStart()],
						m
					)
				)
			|> (\t -> eitherMap(bottom.expanding, \__ -> t, TShadowShape(parent, const(16.), t, RectangleShape("MBottomSheet"))))
			|> (\t -> TConstruct([
					[
						makeSubscribe2(mouseDown, \d -> {
							if (d)
								startState :=
									MBottomSheetAnimationStartState(
										getValue(state.point).y,
										fgetValue(bottomSheetHeight),
										fgetValue(scrollPosition).y
									)
							else {
								gap = ^startState.pointY - getValue(state.point).y;
								allowStateChange = if (gap == 0.) closeOnClick else fgetValue(swipeEnabled);

								if (allowStateChange) {
									newExpanded = gap > if (fgetValue(expanded)) 0. else gapThreshold;
									nextDistinct(expanded, newExpanded);
									if (!newExpanded) {
										maybeApply(bottom.modal, \mdl -> if (gap == 0.) nextDistinct(mdl.show, false));
										nextDistinct(scrollPosition, zeroPoint)
									};
								}
							}
							nextDistinct(blockSwiping, false);
						}),
						makeSubscribe2(
							ftransistor(fand(mouseDown, swipeEnabled), state.point),
							\p -> if (^startState.scrollPositionY == 0.)
									nextDistinct(bottomSheetHeight0, ^startState.boxHeight + (^startState.pointY - p.y))
						),
						makeSubscribe2(scrollPosition, \__ -> nextDistinct(blockSwiping, true)),
					],
					eitherMap(bottom.modal, \mdl -> [
						makeSubscribe2(mdl.show, \s -> if (!s) {
							nextDistinct(animationFreeze, true);
							nextDistinct(expanded, false)
						}),
						makeSubscribe2(mdl.progress, \pr -> if (pr == 0.) nextDistinct(animationFreeze, false))
					], [])
				] |> concatA, t))
			|> restrictSizeBySideNavs(state)
			|> (\t -> eitherMap(state.flexible,
					\fl -> TShow(fnot(fl.persistent), t),
					t
				))
		},
		TEmpty()
	)
	|> (\t -> TLet("MAppBottomSheet", t, content))
	|> (\t -> TLet("MModalBottomSheetBackground", bgLayer, t))
}

letSideSheet(manager : MaterialManager, parent : MFocusGroup, content : Tropic, state : MAppState, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	eitherMap(
		state.bottomSheet,
		\bottom -> if (isSome(bottom.modal)) TEmpty() else {
			sideSheet = \ ->
				m2t(bottom.content(const(true)), parent)
				|> disableInteractivesBelow
				|> (\t -> TAvailable(t, TFillWY(sideNavStandardWidth)))
				|> (\t -> TLines2(THeight(TGhost("MAppBar")), t));

			eitherMap(
				state.flexible,
				\fl -> TShowLazy(fl.persistent, sideSheet),
				TEmpty()
			)
		},
		TEmpty()
	)
	|> (\t -> TLet("MAppSideSheet", t, content))
}

makeMAppState(manager : MaterialManager, m : MAppStructure) -> MAppState {
	appWH = extractStruct(m.style, MAppWH(makeWH())).wh;
	scrollInspect = extractStruct(m.style, makeTScrollInspectVisible());
	mouseDown = make(false);

	flexible =
		maybeMap(
			tryExtractStruct(m.style, MAppStructureFlexible([])),
			\asf -> {
				enabled = extractStruct(asf.style, MEnabled(const(true))).enabled;
				showExpander = extractStruct(asf.style, MShowExpander(const(false))).show;
				showToolbar = extractStruct(asf.style, MShowToolbar(const(true))).show;
				mWidth = extractStruct(asf.style, MWidth(1296.)).width;
				persistentB = extractStruct(asf.style, MPersistent(make(false))).persistent;
				persistent = fif(enabled, fselect(appWH, FLift(\wh -> wh.width > mWidth)), const(false));

				MAppFlexibleState(
					persistent,
					persistentB,
					fOr(fnot(persistent), showExpander),
					fOr(fnot(persistent), showToolbar)
				)
			}
		);

	tryExtractNav = \left : bool ->
		maybeMap(
			tryExtractStruct(m.parts, if (left) MLeftNav(TEmpty(), make(false), []) else MRightNav(TEmpty(), make(false), [])),
			\nav : MNav -> {
				navMini = contains(nav.style, MSideNavMini());
				navMiniWidth = extractStruct(nav.style, MListMinimizedWidth(72.)).width;
				navSwipe : MSwipeLeftOrRight =
					extractStruct(
						m.style,
						if (left)
							MSwipeLeft(const(if (navMini) navMiniWidth else 16.), const(mobile))
						else
							MSwipeRight(const(if (navMini) navMiniWidth else 16.), const(mobile))
					);

				navPersistent = extractStruct(nav.style, MSideNavPersistent(const(false))).persistent;

				MAppNav(
					nav.content,
					nav.expander,
					navMini,
					eitherMap(
						flexible,
						\flx -> fOr(navPersistent, flx.persistent),
						navPersistent
					),
					extractStruct(
						nav.style,
						MSideNavWidth(if (getStageWidth() > 360. || cpp) sideNavStandardWidth else getStageWidth() / 9. * 8.)
					).width,
					navMiniWidth,
					navSwipe.gapLength,
					navSwipe.enabled,
					if (navMini) const(true) else nav.expander
				)
			}
		);

	leftNav = tryExtractNav(changeBoolIfRTL(true));
	rightNav = tryExtractNav(changeBoolIfRTL(false));
	content =
		Pair(
			extractStruct(m.parts, MContent(TEmpty())).content,
			fand(
				eitherMap(leftNav, \ln -> fOr(ln.persistent, fnot(ln.expander)), const(true)),
				eitherMap(rightNav, \rn -> fOr(rn.persistent, fnot(rn.expander)), const(true))
			)
		);
	floatingContent = Pair(extractStruct(m.parts, MFloatingContent(TEmpty())).content, content.second);
	appBar =
		maybeMap(
			tryExtractStruct(m.parts, MAppBar(TEmpty())),
			\fc -> {
				focusEnabled =
					fand(
						eitherMap(leftNav, \ln -> if (ln.mini) const(true) else fOr(ln.persistent, fnot(ln.expander)), const(true)),
						eitherMap(rightNav, \rn -> if (rn.mini) const(true) else fOr(rn.persistent, fnot(rn.expander)), const(true))
					);

				scrollPosition = make(zeroPoint);

				extendToolbar =
					maybeMap(
						tryExtractStruct(m.style, MExtendedAppBar([])),
						\eab : MExtendedAppBar ->
							MExtendedAppBarState(
								make(false),
								tryExtractStruct(eab.style, MBackgroundImage("", false)),
								{filtermap(eab.style, \st -> switch (st : MExtendedAppBarStyle) {
									MExtendedToolbarStyle() : Some(st);
									default : None()
								})}
							)
					);

				floatingToolbar =
					if (contains(m.style, MFloatingToolbar()) && mobile) {
						startPoint = ref 0.;
						updateStartPoint = \ -> startPoint := getValue(scrollPosition).y;

						isUp = fselectWithLast(scrollPosition, FLift2(\last, new ->
							new.y - last.y > 0.
						));

						expanded =
							ftransistor(
								fnot(mouseDown),
								fnot(isUp)
							);

						delta = fselect(scrollPosition, FLift(\sp -> sp.y - ^startPoint));

						subs = [
							makeSubscribe2(isUp, \__ ->
								if (!getValue(mouseDown)) updateStartPoint()
							),
							makeSubscribe2(mouseDown, \d ->
								if (d) updateStartPoint()
							)
						];

						Some(MFloatingToolbarState(delta, expanded, subs))
					} else None();

				MAppBarState(
					fc.content,
					focusEnabled,
					scrollPosition,
					floatingToolbar,
					extendToolbar
				)
			}
		);

	bottomSheet =
		maybeMap(
			tryExtractStruct(m.parts, MBottomSheet(\__ -> TEmpty(), [])),
			\bs -> MBottomSheetState(
				bs.content,
				tryExtractStruct(bs.style, MExpandingBottomSheet(const(""), [])),
				if (mobile)
					maybeMap(
						tryExtractStruct(bs.style, MModalBottomSheet(make(false))),
						\mdl -> MModalBottomSheetState(mdl.show, make(0.))
					)
				else None(),
				bs.style
			)
		);

	MAppState(
		makeTropicTag(manager),
		content,
		floatingContent,
		appBar,
		leftNav,
		rightNav,
		bottomSheet,
		flexible,
		make(zeroPoint),
		mouseDown,
		appWH,
		makeWH(),
		scrollInspect,
		make(None()),
		extractMComponentGroupState(m.style),
	);
}

letContentAndSize(manager : MaterialManager, parent : MFocusGroup, content : Tropic, style : [MAppStyle], state : MAppState,
	m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {

	mainContent =
		MComponentGroup2T(
			manager,
			parent,
			"MAppContent",
			concat(state.state, [MFocusEnabled(state.content.second), MFocusId(const(2)), AccessRole("document"), MSetParent(state.scrollParent)]),
			\p ->
				state.content.first
				|> (\m -> m2t(m, p))
				|> TAlignStart
				|> (\t ->
					if (contains(style, MNoContentBorder()))
						t
					else
						TBorder4(8., t)
				)
				|> (\t -> eitherMap(tryExtractStruct(style, MContentMaxWidth(zero)), \mw -> TZoomMaxWidth(t, mw.maxWidth), t))
		);

	TGroup2(
		TAttachBox(TDisplay("MAppSize"), state.wh),
		TInteractive([TMouseDownGhost(state.down), TMouseXY(state.point)], TRectangle(interactiveRectangleStyle, TGhost("MAppSize")))
	)
	|> (\t -> TAttachAvailable(t, state.availWH))
	|> (\t -> TLet("MAppSize", content, t))
	|> (\t -> TLet("MAppContent", mainContent, t))
}

letAppBar(manager : MaterialManager, parent : MFocusGroup, content : Tropic, state : MAppState, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	makeAppBar = \ab : MAppBarState -> {
		extTool =
			eitherMap(
				ab.extendToolbar,
				\eab : MExtendedAppBarState -> switch (ab.content : Material) {
							MToolbar(expander, title, right, style):
								MToolbar(
									expander,
									title,
									right,
									replaceStruct(style, MExtendedToolbar(eab.trigger, eab.style))
									|> (\st : [MToolbarStyle] -> eitherMap(eab.image, \im : MToolbarStyle -> arrayPush(st, im), st))
								)
								|> (\m -> MConstruct([makeSubscribe2(feq(ab.scrollPosition, zeroPoint), \v ->
										if (!v) nextDistinct(eab.trigger, false)
									)], m));
							default: ab.content;
						},
				ab.content
			);

		eitherFn(
			state.flexible,
			\flx ->
				MShow2(
					manager,
					parent,
					flx.showToolbar,
					\p ->
						MComponentGroup2T(
							manager,
							p,
							"MAppBar",
							[
								MFocusEnabled(ab.focusEnabled),
								MFocusId(const(0)),
								AccessRole("toolbar")
							],
							\p2 ->
								switch (extTool : Material) {
									MToolbar(expander, title, right, style):
										MToolbar2T(
											manager,
											p2,
											MToolbar(
												expander,
												title,
												right,
												replaceStruct(style,
													MShowExpander(fand(flx.showExpander, extractStruct(style, MShowExpander(const(true))).show))
												)
											),
											m2t
										);
									default: m2t(extTool, p2);
								}
						)
				),
			\ ->
				MComponentGroup2T(
					manager,
					parent,
					"MAppBar",
					[
						MFocusEnabled(ab.focusEnabled),
						MFocusId(const(0)),
						AccessRole("toolbar")
					],
					\p -> m2t(extTool, p)
				)
		)
		|> (\t ->
				eitherMap(
					ab.floatingToolbar, \ft ->
		 			TConstruct(ft.subs,	TCollapsingBox(manager, parent, t, ft.translation, ft.expanded, false)),
		 			t
		 		)
			);
	}

	eitherMap(
		state.appBar,
		\ab : MAppBarState ->
			TLet("MAppBar", makeAppBar(ab), content),
		content
	)
}

letFloatingContent(manager : MaterialManager, parent : MFocusGroup, content : Tropic, state : MAppState,
	m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	MComponentGroup2T(
		manager,
		parent,
		"MAppFloatingContent",
		[
			MFocusEnabled(state.floatingContent.second),
			MFocusId(const(4)),
			AccessRole("presentation")
		],
		\p ->
			m2t(
				MLines2(
					state.floatingContent.first,
					MSelect(manager.floatingActions, \fac : [flow] -> MLinesA(
						map(fac, \l : flow -> cast(l : flow -> Material))
					))
				),
				p
			)
	)
	|> (\t -> eitherMap(state.flexible,
		\__ -> TCols2(t, TGhost("MAppSideSheet")),
		t)
	)
	|> restrictSizeBySideNavs(state)
	|> (\t -> TLines2(t, TGhost("MAppBottomSheet")))
	|> (\t -> TLet("MAppFloatingContent", t, content))
}

letFlextibleApp(content : Tropic, state : MAppState) -> Tropic {
	eitherMap(
		state.flexible,
		\flx ->
			TConstruct(
				[
					make2Subscribe(flx.persistent, flx.showExpander, \p, se -> {
						maybeApply(state.leftNav, \ln -> deferred(\ -> nextDistinct(ln.expander, p && !se)));
						nextDistinct(flx.persistentB, p);
					})
				],
				content
			),
		content
	)
}

letExpander(manager : MaterialManager, parent : MFocusGroup, content : Tropic, state : MAppState,
	m2t : (Material, MFocusGroup) -> Tropic, left : bool) -> Tropic {
	eitherMap(
		if (left) state.leftNav else state.rightNav,
		\nav : MAppNav -> {
			sideNavWidth = make(0.);
			
			scaleX = fif(
				fand(nav.persistent, nav.expander),
				const(1.),
				const(if (nav.mini) nav.miniWidth / nav.width else 0.)
			);

			eContent =
				switch (nav.content) {
					MSideNav(h, l, ex, st): {
						MSideNav(
							h,
							l,
							ex,
							replaceStructMany(
								st,
								if (nav.mini)
									[MSideNavMini(), MListMinimizedWidth(nav.miniWidth), MSideNavWidth(nav.width)]
								else
									[MSideNavWidth(nav.width)]
							)
						)
					}
					default: nav.content;
				}

			expander2Point = if (left) {\e -> if (e) 0. else -nav.width} else {\e -> if (e) 0. else nav.width};
			ePointX = make(expander2Point(getValue(nav.expander)));
			delta2Point =
				if (left)
					{\d -> min(max(-nav.width, expander2Point(getValue(nav.expander)) + d), 0.)}
				else
					{\d -> min(max(0., expander2Point(getValue(nav.expander)) + d), nav.width)};
			bgMouseDown = make(false);
			mouseDown = ref false;
			startingPoint = ref Point(-1., -1.);
			trigger = make(Pair(fgetValue(ePointX), fgetValue(ePointX)));
			showPanel = fneq(ePointX, expander2Point(false));
			panelName = if (left) "MAppLeftPanel" else "MAppRightPanel";
			bgAlpha =
				if (nav.width != 0.)
					flerp(0., 0.6, fselect(ePointX, FLift(\ep -> 1. - ep / expander2Point(false))))
				else
					const(0.6);

			sideNav =
				MComponentGroup2T(
					manager,
					parent,
					panelName,
					[
						MFocusEnabled(nav.focusEnabled),
						MFocusId(const(if (left) 1 else 3)),
						AccessRole("list"),
						IScriptBehaviour("expander", nav.expander, ISInputValue([], "bool", false))
					],
					\p -> m2t(eContent, p)
				)
				|> (\t -> TAttachWidth(t, sideNavWidth))
				|> (\t ->
					if (nav.mini)
						TCropSize(
							TFillWYT(
								fselect(ePointX, FLift(\ep ->
									max(nav.width - abs(ep), nav.miniWidth)
								))
							),
							t
						)
						|> (\f -> TShadow(parent, const(2.), f))
					else
						TRenderOnce(showPanel, \ -> 
							t
							|> (\f -> TShadow(parent, const(2.), f))
							|> (\f -> TTranslate(fselect(ePointX, FLift(\ep -> Point(ep, 0.))), f))
						)
				)
				|> (\f -> if (left) f else TCols2(TFillX(), f));

			TGroup2(
				(
					\ -> TRectangle([Fill(black)], TGhost("MAppSize"))
					|> (\f -> TAlpha(bgAlpha, f))
					|> (\f -> mouseDownAround(manager, None(), bgMouseDown, make(false), nop, f))
					|> disableInteractivesBelow
					|> disableMouseWheelBelow
					|> (\f -> TCursor(FingerCursor(), f))
				)
				|> (\f -> TShowLazy(fand(fnot(nav.persistent), showPanel), f)),

				sideNav
			)
			|> (\f ->
				MEasingAnimation(
					manager,
					parent,
					fif(nav.expander, const(easingEnteringDuration), const(easingLeavingDuration)),
					fif(nav.expander, const(easingDecelerationCurve), const(easingAccelerationCurve)),
					trigger,
					\tr -> {
						if (tr.first != tr.second)
							Some(tr)
						else
							None()
					},
					\tr, px -> next(ePointX, lerp(tr.first, tr.second, px)),
					[],
					f
				)
			)
			|> (\f ->
				if (nav.mini)
					TLines2(THeight(TGhost("MAppBar")), f)
				else
					TIf(nav.persistent, TLines2(THeight(TGhost("MAppBar")), f), f)
			)
			|> (\f -> TCropSize(TGhost("MAppSize"), f))
			|> (\f ->
				TConstruct(
					[
						// Close expander on bg click, check if finger movement has begun
						makeSubscribe2(bgMouseDown, \d ->
							if (!d && (!^mouseDown || ^startingPoint == fgetValue(state.point)) && fgetValue(nav.expander))
								next(nav.expander, false)
						),
						makeSubscribe2(state.point, \pt ->
							if (^mouseDown && fgetValue(state.down) && isCurrentMInteractionItemId(manager, state.interactionId)) {
								// Block other interaction items if panel is being moved
								dx = abs(pt.x - ^startingPoint.x);
								dy = abs(pt.y - ^startingPoint.y);

								// Update panel point
								next(ePointX, delta2Point(pt.x - ^startingPoint.x));

								if (dx > dy && dx > 4.) {
									blockOtherMInteractionItemIds(manager, state.interactionId);
								} else if (dy > dx && dy > 4.) {
									removeMInteractionItemId(manager, state.interactionId);
									next(nav.expander, getValue(nav.expander));
								}
							}
						),
						makeSubscribe2(state.down, \d ->
							if (d) {
								if (fgetValue(nav.swipeEnabled) && !fgetValue(nav.persistent) && !^mouseDown) {
									pt = fgetValue(state.point);

									// Start panel movement
									if (pt.x < (if (left) fgetValue(nav.gap) else getRealStageWidthHeight(manager).width - fgetValue(nav.gap)) ||
										fgetValue(nav.expander)) {
										nextDistinct(trigger, Pair(fgetValue(ePointX), fgetValue(ePointX)));

										mouseDown := true;
										startingPoint := Point(pt.x, pt.y);

										addMInteractionItemId(manager, state.interactionId);
									}
								}
							} else if (^mouseDown) {
								// Finish panel movement
								fn = \a, b -> if (left) a > b else a < b;
								next(nav.expander,
									fn(fgetValue(ePointX), expander2Point(false) / 3.0)
								);
								mouseDown := false;
							}
						),
						\ -> subscribe(nav.expander, \e -> nextDistinct(trigger, Pair(fgetValue(ePointX), expander2Point(e))))
					],
					f
				)
			)
			|> (\f -> TLet(panelName, f, content))
			|> (\f -> TLet(panelName + "Size", TSizedWidth(fmultiply(sideNavWidth, scaleX), 0.), f))
		},
		content
	)
}

restrictSizeBySideNavs(state : MAppState) -> (Tropic) -> Tropic {
	\t ->
		concat3(
			eitherMap(state.leftNav, \__ ->	[TDisplay("MAppLeftPanelSize")], []),
			[t],
			eitherMap(state.rightNav, \__ -> [TDisplay("MAppRightPanelSize")], []),
		)
		|> TCols
}

wrapContentByScroll(
	manager : MaterialManager,
	parent : MFocusGroup,
	scrollParent : DynamicBehaviour<Maybe<MFocusGroup>>,
	m2t : (Material, MFocusGroup) -> Tropic,
	appStyle : [MAppStyle],
	style : [TScrollStyle]) -> (Tropic) -> Tropic {

	\t ->
		if (contains(appStyle, MNoScroll()))
			TCenterXIn(t, TFillXY())
		else
			MScroll2T(manager, parent, MScroll(t, TFillXY(), arrayPush(style, MGetParent(scrollParent))), m2t)
}