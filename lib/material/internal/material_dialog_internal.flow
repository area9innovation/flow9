import material/internal/material_ellipsis;
import material/internal/material_movable;
import material/internal/material_component;
import material/internal/tropic_size_util;

export {
	MDialogStyle ::= MDialogTitle, MDialogCustomTitle, MDialogAccessibleName, MDialogActions, MDialogActionsCondensed, MDialogUseFrame, MDialogCustomFrame, MDialogNoCenter, MDialogScroll, MDialogScrollStyle,
		MDialogNoAnimation, MDialogFullScreen, MDialogFullWindow, MDialogKeyEventBlock, MDialogClickOutToClose, MDialogClickOutToCancel, MDialogDraggable, MMovableOrigin,
		MDialogResizable, MResizableControlOnStart, MDialogResizableWithInitialSize, MDialogPopupStyle, MDialogHide, MFocusOnPrevious, MFloatingContent, MDialogCloseButton,
		MComponentGroupState, MButtonTitles, MDialogNonModal, MDialogOnClose, MSameZorder, MDialogActionsNoEndAlign, MAddSafeArea,
		MPassClicks, MDialogDraggableInitialAlign, MDialogInspectWidth, MDialogInspectHeight;

		// These are very commonly recommended
		MDialogTitle(title : string);
		MDialogCustomTitle(title : Material);
		MDialogAccessibleName(name : Transform<string>); // It will be used by screenreader
		MDialogUseFrame();
		MDialogScroll();
		MDialogScrollStyle(style : [MScrollStyle]);
		MDialogKeyEventBlock();
		MDialogActions(actions : [Material]);
		MDialogActionsCondensed(); // Decreases border between content and actions

		MDialogCustomFrame(start : double, top : double, end : double, bottom : double, frame : Material);
		MDialogNoCenter();
		MDialogCloseButton(close : Material); // it looks like not too "Material"
		MDialogNoAnimation();
		MDialogFullScreen();
		// Hide all clips outside and below dialog
		// Defaults to true in js with MDialogUseFrame and MDialogFullScreen styles present
		MDialogFullWindow(fullWindow : bool);
		MDialogClickOutToClose();
		// e.g. useful for MTimePicker and similar, close dialog and act as a "cancel" button
		MDialogClickOutToCancel(pickerValue : DynamicBehaviour<flow>);
		// See MMovableGrabArea for info on padding and grabArea
		MDialogDraggable(padding : Material, grabArea : Material);
		// Align draggable dialog
		MDialogDraggableInitialAlign(xAlign : double, yAlign : double);
		// Set the Resizable mode. The dialog size depends on its content.
		MDialogResizable();
		// Set the Resizable mode. Set the initial size of the dialog.
		MDialogResizableWithInitialSize(size : Material);
		// Hides dialog without disposing it but changing zorder
		MDialogHide(hide : Transform<bool>);
		MButtonTitles(titles : Tree<string, string>);
		MDialogNonModal();
		// Allow to run callback every time the dialog is getting closed
		MDialogOnClose(onClose : () -> void);
		MDialogActionsNoEndAlign();
		MDialogInspectWidth(width : DynamicBehaviour<double>);
		MDialogInspectHeight(height : DynamicBehaviour<double>);

		MDialogPopupStyle ::= MDialogPopupCanClose, MDialogPopupSaveEnabled, MDialogPopupNotResize, MDialogPopupOnClose, MDialogPopupFullScreen;
			MDialogPopupCanClose(canCloseCheck : () -> bool);
			MDialogPopupSaveEnabled(enabled : Transform<bool>);
			MDialogPopupNotResize();
			MDialogPopupFullScreen();
			MDialogPopupOnClose(onClose : () -> void);

	renderMDialog(manager : MaterialManager, closeWhen : Transform<bool>, style : [MDialogStyle], content : Material,
		m2t : (Material, MFocusGroup) -> Tropic) -> void {
		renderMDialog2(manager, closeWhen, style, content, m2t, \t -> trender(t, manager.manager.renderStyle))
	};

	renderMDialog2(manager : MaterialManager, closeWhen : Transform<bool>, style : [MDialogStyle], content : Material,
		m2t : (Material, MFocusGroup) -> Tropic, renderFn : (Tropic) -> () -> void) -> void;

	renderMSnackbar(manager : MaterialManager, text : string, style : [MSnackbarStyle], m2t : (Material, MFocusGroup) -> Tropic, renderFn : (Tropic) -> () -> void) -> void;
	// MTextVisible is for snackbar action, should not be raised (restricted to one action only);
	MSnackbarStyle ::= MTextButton, MMaxLines, MSnackbarVisible, MWidth, MColor, MSnackbarTextColor, MSnackbarAutoDisappear,
		MSnackbarAutoDisappearTime, MSnackbarNoButton, MSnackbarAlignLeft, MSnackBarOffset, MSnackbarFadeAnimation, CommonAlignment, MSnackbarOnDisappear;
		// MSnackbarVisible can be used for getting of current snackbar state and for its closing, but not for showing of snackbar;
		MSnackbarVisible(visible : DynamicBehaviour<bool>);
		MSnackbarTextColor(color : MColor);
		MSnackbarAutoDisappear(enabled : bool);
		MSnackbarAutoDisappearTime(ms : int);
		MSnackbarNoButton();
		MSnackbarAlignLeft(left : bool); // TODO : get rid of
		MSnackBarOffset(offset : Point);
		MSnackbarFadeAnimation(fade : bool); // Change in/out animation type
		MSnackbarOnDisappear(fn : () -> void);
}

isDialogRendering = ref false;

fwZorder = make(-1);
fwAnimated = ref make(false);
fwDialogs : ref [Pair<int, DynamicBehaviour<bool>>] = ref [];

registerFWDialog(zorder, isCurrent) {
	refArrayPush(fwDialogs, Pair(zorder, isCurrent))
};

unregisterFWDialog(zorder) {
	fwDialogs := filter(^fwDialogs, \p -> p.first != zorder)
};

// Workaround to control the order of subscriptions
updateCurrentFWDialog(zorder) {
	iter(^fwDialogs, \p -> nextDistinct(p.second, false));
	maybeApply(find(^fwDialogs, \p -> p.first == zorder), \p -> nextDistinct(p.second, true))
}

renderMDialog2(
	manager : MaterialManager,
	closeWhen : Transform<bool>,
	style : [MDialogStyle],
	content : Material,
	m2t : (Material, MFocusGroup) -> Tropic,
	renderFn : (Tropic) -> () -> void) -> void {

	if (!fgetValue(closeWhen)) renderMDialog3(manager, closeWhen, style, content, m2t, renderFn)
}

renderMDialog3(
	manager : MaterialManager,
	closeWhen : Transform<bool>,
	style : [MDialogStyle],
	content : Material,
	m2t : (Material, MFocusGroup) -> Tropic,
	renderFn : (Tropic) -> () -> void) -> void {

	us = ref [];
	disp = \ -> dispUnsA(us);

	currentFocusedItem = getCurrentFocusedItem(manager);
	previousFocus =
		if (extractStruct(style, MFocusOnPrevious(true)).enabled) {
			eitherFn(
				currentFocusedItem,
				\fi -> Some(fi),
				\ -> getPreviousFocusedItem(manager)
			)
		} else {
			None();
		};

	u1 =
		switch (closeWhen : Transform<bool>) {
			DynamicBehaviour(val, __): {
				subscribe2(closeWhen, \__ -> if (^val) disp());
			}
			default: makeSubscribe2(closeWhen, \val -> if (val) disp())();
		};

	title = tryExtractStruct(style, MDialogTitle(""));
	customTitle = tryExtractStruct(style, MDialogCustomTitle(TEmpty()));
	actions = tryExtractStruct(style, MDialogActions([]));
	closeButton = tryExtractStruct(style, MDialogCloseButton(TEmpty()));

	scrolls = contains(style, MDialogScroll());
	scrollStyle = extractStruct(style, MDialogScrollStyle([]));
	fullScreen = contains(style, MDialogFullScreen());
	useFrame = contains(style, MDialogUseFrame());
	fullWindow = extractStruct(style, MDialogFullWindow(fullScreen && useFrame && js)).fullWindow;
	blockKeyboardEvents = contains(style, MDialogKeyEventBlock());
	clickOutToClose = contains(style, MDialogClickOutToClose());
	clickOutToCancel = tryExtractStruct(style, MDialogClickOutToCancel(make(false)));

	createSize = maybeMap(tryExtractStruct(style, MDialogResizableWithInitialSize(MEmpty())), \st -> MResizableOnCreate(st.size));
	resizable = contains(style, MDialogResizable()) || isSome(createSize);
	draggable = tryExtractStruct(style, MDialogDraggable(TEmpty(), TEmpty()));
	initialAlign = extractStruct(style, MDialogDraggableInitialAlign(0.5, 0.5));
	hideDialog0 = tryExtractStruct(style, MDialogHide(const(false)));
	hideDialog = eitherMap(hideDialog0, \hd -> hd.hide, const(false));
	noCenter = contains(style, MDialogNoCenter());
	floatingContent = tryExtractStruct(style, MFloatingContent(TEmpty()));
	nonModal = contains(style, MDialogNonModal());
	sameZorder = extractStruct(style, MSameZorder(nonModal)).same;
	zUns = if (sameZorder) nop else pushZorder(manager);
	zorder = fgetValue(manager.manager.zorder);
	passClicks = contains(style, MPassClicks());

	onClose = extractStruct(style, MDialogOnClose(nop)).onClose;
	name = "MDialog";
	dialogMinWidth = 280.;

	customFrame =
		if (useFrame)
			MDialogCustomFrame(24., 24., 24., 24.,
				TSelect(manager.forceRender, \__ ->
					TShadowShape(
						manager.focus,
						const(6.0),
						MShape(
							manager.focus,
							[MThemeFill(manager, if (fullScreen) MBackgroundColor() else MSurfaceColor())],
							if (fullScreen) TBorder4(8.0, TFillXY()) else TFillXY(),
							name
						),
						RectangleShape(name)
					)
				)
				|> (\shp -> if (fullScreen) TBorder4(-8.0, shp) else shp)
			) |> Some
		else
			tryExtractStruct(style, MDialogCustomFrame(0., 0., 0., 0., TEmpty()));

	sideBorder = if (fullScreen) 0. else if (mobile) 12. else 24.;
	down = make(false);
	point = make(zeroPoint);
	insideDialogB = make(false);
	pressedOutsideB = fstall(fand(down, fnot(insideDialogB)), 0);
	noAnimation = contains(style, MDialogNoAnimation()) || (!cpp && fullScreen)
		|| !manager.theme.enableAnimations || noCenter || isSome(draggable);
	disableBelow = \en -> \f : Tropic -> if (en) f |> disableInteractivesBelow |> disableMouseWheelBelow else f;
	cs = if (isMaterialLogLevelEnabled(MaterialError())) captureStringCallstack() else "";

	dialogResizableMinSize = 24.;
	actionsW = make(0.);
	contentW = make(0.);
	titleW = make(0.);
	titleCloseW = make(0.);

	boxW = extractStruct(style, MDialogInspectWidth(make(0.))).width;
	boxH = extractStruct(style, MDialogInspectHeight(make(0.))).height;

	availW = make(0.);
	animated = make(false);

	(\p -> {
		isRTL = p.rtl;

		dialogTitle : Tropic =
			eitherFn(
				customTitle,
				\t ->
					TCopySize2(
						m2t(t.title, p),
						\sz, tr ->
							TBorder(0., 0., 0., -8.,
								TMask(tr,
									MShape(
										manager.focus,
										[Fill(white)],
										TBorder(0., 0., 0., 8., sz),
										name
									)
								)
							)
					),
				\ ->
					eitherMap(
						title,
						\ttl ->
							MDynamicParagraph2T(
								p,
								const(ttl.title),
								[MTitle(), ParagraphMargin(0.0, 0.0), TagName("h2")]
							)
							|> (\t ->
								eitherMap(
									customFrame,
									\cf ->
										TBorderDir(0., 0., 0., cf.top, t, isRTL),
									t
								)
							),
						TEmpty()
					)
			)
			|> (\t -> TAttachWidth(t, titleW))
			|> (\t ->
				eitherMap(
					closeButton,
					\cb -> TBaselineCols2Dir(
						t |> TAlignStart,
						TAttachWidth(m2t(cb.close, p), titleCloseW),
						isRTL
					),
					t
				)
			)
			|> (\t -> TAvailableWidth(t, fmax(contentW, actionsW)));

		contentM : Tropic =
			(if (content != TEmpty() && content != MEmpty())
				content
				|> (\m -> if (fullScreen) MGroup2(TFillXY(), m) else m)
				|> (\m ->
					if (scrolls)
						MScroll2T(
							manager,
							p,
							MScroll(m, TFillXY(), arrayPush(scrollStyle.style, MScrollCropByContent())),
							m2t
						)
					else
						m2t(m, p)
				)
			else if (fullScreen)
				TFillXY()
			else
				TEmpty())
			|> (\t ->
				eitherMap(
					floatingContent,
					\fc ->
						TCopySize(
							t,
							\tr ->
								TAvailable(m2t(fc.content, p), tr),
							true
						),
					t
				)
			)
			|> (\t -> TGroup2(t, TFixed(eitherMap(customFrame, \cf -> dialogMinWidth - cf.start - cf.end, dialogMinWidth), 0.0)))
			|> (\t -> TAttachWidth(t, contentW));

		actionsM =
			eitherMap(
				actions,
				\act -> {
					actionsW0 = make(0.);
					actionsBorderLeft = if (contains(act.actions, TFillX()) || contains(style, MDialogActionsNoEndAlign())) 16.0 else 0.0;
					endBorderGap = eitherMap(customFrame, \cf -> const(if (fullScreen && cf.end > 0.0) 8.0 else cf.end), zero);

					availMinW =
						fsubtract(
							faddition(
								fmax(contentW, faddition(titleW, titleCloseW)),
								endBorderGap
							),
							const(actionsBorderLeft)
						);

					availMaxW =
						fsubtract(
							availW,
							const(actionsBorderLeft + eitherMap(customFrame, \cf -> cf.start + cf.end, 0.0))
						);

					TFlexibleGrid(
						const(map(act.actions, \ac -> m2t(MBorderEnd(8.)(ac), p))),
						if (contains(style, MDialogActionsNoEndAlign()))
							[TBaselineAlign(), TFillersSupport(), TAvailableMinMax(availMinW, availMaxW)]
						else
							[EndAlign(), TBaselineAlign(), TFillersSupport(), TAvailableMinMax(availMinW, availMaxW)]
					)
					|> TBorderLeft(actionsBorderLeft)
					|> TBorderTopBottom(8.)
					|> (\t -> TAttachWidth(t, actionsW0))
					|> (\t -> eitherMap(customFrame, \cf -> TBorderDir(cf.start, 0.0, if (fullScreen) max(cf.end - 8.0, 0.0) else 0.0, 0.0, t, isRTL), t))
					|> (\t -> TConstruct([\ -> fconnect(fmin(availMaxW, fsubtract(actionsW0, endBorderGap)), actionsW)], t))
				},
				TEmpty()
			);


		TLines2Dir(dialogTitle, contentM, isRTL)
		|> (\t : Tropic ->
			eitherMap(
				customFrame,
				\cf ->
					TBorderDir(
						cf.start,
						cf.top,
						cf.end,
						if (isNone(actions)) cf.bottom else if (contains(style, MDialogActionsCondensed())) 0. else 24.,
						t,
						isRTL
					),
				t
			)
		)
		|> (\t -> TLines2(t, actionsM)) // Do not use TLines2Dir here, actions are already aligned into TFlexibleGrid
		|> (\t -> TAttachWidthHeight(t, boxW, boxH))
		|> (\t ->
			if (clickOutToClose || isSome(clickOutToCancel))
				TFrame(0., 0., interactiveRectangleStyle, t)
				// We use a global handler for unhandled mouse events. This is necessary to get the global coordinates of the mouse.
				// So here we just check if the mouse is inside
				|> (\t2 -> TInteractive(
					[
						MouseDown2(\h, mi -> {
							next(insideDialogB, mi.inside());
							h
						}),
					],
					t2))
			else
				t
		)
		|> (\t ->
			eitherMap(customFrame,
				\cf ->
					m2t(cf.frame, p)
					|> (\t2 -> TAvailableWidthHeight(t2, boxW, boxH))
					|> (\t2 -> TGroup2(t2, t)),
				t
			)
		)
		|> disableBelow(!passClicks && sameZorder)
		|> (\t -> if (!passClicks && sameZorder) TCursor(ArrowCursor(), t) else t)
		|> (\t : Tropic ->
			if (resizable)
				MResizable2T(
					manager,
					p,
					MResizable(
						t,
						concatA([
							[MResizableMinMax(
								TFixed(dialogResizableMinSize, dialogResizableMinSize),
								TFillXY()
							)],
							extractStructMany(style, MResizableControlOnStart())
						])
						|> (\st -> maybeArrayPush(st, createSize))
					),
					m2t
				)
			else
				t
		)
		|> (\t ->
			if (noAnimation) {
				TConstruct([\ -> {deferred(\ -> nextDistinct(animated, true)); nop}], t)
			} else {
				TOrigin(
					const(Factor(-0.5, -0.5)),
					TGroup2(
						TOrigin(
							const(Factor(0.5, 0.5)),
							TRectangle(interactiveRectangleStyle, TSized(fwh(boxW, boxH))) // Invisible reactangle to keep metrics static
						),
						TAnimation(
							TOrigin(
								const(Factor(0.5, 0.5)),
								TCropSize(TSized(fwh(boxW, boxH)), t)
							),
							fif(
								animated,
								const([]),
								const(
									[
										FAnimationKeyframe([
											FScaleValue(Factor(0.0, 0.0)),
											FAlphaValue(0.0)
										]),
										FAnimationKeyframe([
											FScaleValue(Factor(1.0, 1.0)),
											FAlphaValue(1.0)
										])
									]
								)
							),
							[
								FAnimationDuration(const(0.6)),
								FAnimationEasing(const(easingStandartCurve)),
								FAnimationOnFinish(\ -> nextDistinct(animated, true))
							]
						)
					)
				);
			}
		)
		|> (\t ->
			if (noCenter || isSome(draggable))
				t
			else
				TCenter(t)
		)
		|> (\t : Tropic ->
			eitherMap(
				draggable,
				\dr -> {
					sPos = make(zeroPoint);
					origin = extractStruct(style, MMovableOrigin(const(Factor(0.5, 0.5))));

					MMovable(
						t,
						TFillXY(),
						[
							MMovableGrabArea(
								dr.padding
								|> (\m -> MAvailableWidthHeight(m, boxW, boxH)),
								dr.grabArea
								|> (\m -> MAvailableWidthHeight(m, boxW, boxH))
							),
							MInteractionsOnTop(),
							MMovablePosition(sPos),
							origin
						]
					)
					|> (\mov -> MMovable2T(manager, p, mov, m2t))
					|> (\mov ->
						if (noCenter) mov
						else {
							avH = make(0.);
							TConstruct(
								[
									\ -> {
										// align dialog
										nextDistinct(sPos, Point(
											(getValue(availW) - getValue(boxW)) * initialAlign.xAlign,
											(getValue(avH) - getValue(boxH)) * initialAlign.yAlign
										));
										nop
									},
								],
								TAttachAvailableHeight(mov, avH)
							);
						}
					);
				},
				t
			))
		|> (\t -> TAttachAvailableWidth(t, availW))
		|> (\t -> TBorder(sideBorder, sideBorder, sideBorder, sideBorder, t))
		|> (\t : Tropic -> if (extractStruct(style, MAddSafeArea(true)).add) m2t(MSafeArea(t), p) else t)
		|> (\t ->
			TGroup([ // click events shall not pass
				TInteractive(
					[
						TMouseDownGhost(down),
						TMouseXY(point)
					]
					|> (\inter -> ifArrayPush(inter, blockKeyboardEvents, makeTKey(\k -> {materialLog(toString(k), MaterialInfo()); k != noKey}))),

					TFillXY()
					|> (\t2 ->
						if (nonModal) {
							TRectangle(interactiveRectangleStyle, t2)
						} else {
							if (noAnimation) {
								TRectangle([Fill(black), FillOpacity(0.5)], t2)
							} else {
								TAnimation(
									TRectangle([Fill(black), FillOpacity(0.5)], t2),
									fif(
										animated,
										const([]),
										const([
											FAnimationKeyframe([
												FAlphaValue(0.0)
											]),
											FAnimationKeyframe([
												FAlphaValue(1.0)
											])
										])
									),
									[
										FAnimationDuration(const(0.6)),
										FAnimationEasing(const(easingStandartCurve)),
										FAnimationOnFinish(\ -> nextDistinct(animated, true))
									]
								);
							}
						}
					)
					|> (\t2 ->
						if (clickOutToClose)
							TConstruct(
								[makeSubscribe2(pressedOutsideB, \__ -> disp())],
								t2
							)
						else
							eitherMap(
								clickOutToCancel,
								\cotc -> {
									lastValue = getValue(cotc.pickerValue);
									TConstruct(
										[
											makeSubscribe2(pressedOutsideB, \__ -> {
												next(cotc.pickerValue, lastValue);
												disp();
											})
										],
										t2
									)
								},
								t2
							)
					)
					|> (\t2 ->
						if (blockKeyboardEvents)
							TGroup2SameMetrics(t2, TAlpha(make(0.), extractStruct(manager.style, MCaptureKeys(\__ -> TEmpty())).capture(manager)))
						else
							t2
					)
				)
				|> disableBelow(!nonModal), // Disable all other mouse events except handled

				TInteractive(
					[KeyUp2(\h, ke -> if (!h && ke.keycode == KEY_ESCAPE) {disp(); true} else h)],
					TRectangle(interactiveRectangleStyle, TFillXY())
				),

				t
			])
		)
		|> (\t ->
			if (isSome(hideDialog0)) {
				unsZord = initUnsM();

				TConstruct(
					[
						makeSubscribe(hideDialog, \hd -> if (hd && !sameZorder) setUnsM(unsZord, popZorder(manager)) else dispUnsM(unsZord)),
						\ -> \ -> dispUnsM(unsZord)
					],
					TVisible(fnot(hideDialog), t)
				)
			} else {
				t
			}
		)
	})
	|> (\t -> {
		TSelect(manager.forceRender, \__ ->
			MComponentGroup2T(
				manager,
				manager.focus,
				name,
				[
					IScriptBehaviour("point", point, ISInteractionEvent()),
					IScriptBehaviour("down", down, ISInteractionEvent()),
					IScriptBehaviour("inside", insideDialogB, ISInteractionEvent()),
					IScriptBehaviour("animated", animated, ISAppearanceEvent()),
					extractStruct(style, UpdateMaterialTheme(idfn)),
					MSetReady(animated)
				]
				|> (\arr -> maybeArrayPush(arr, tryExtractStruct(style, MSetRTL(false))))
				|> (\arr -> maybeArrayPush(arr, tryExtractStruct(style, MIsReady(make(false))))),
				t
			)
		)
	})
	|> (\f ->
		if (isMaterialLogLevelEnabled(MaterialError()) && strlen(cs) > 3) {
			color = randomMColor();

			TCopySize(
				f,
				\sz ->
					TGroup2(
						TRounded(4.0, 4.0, 4.0, 4.0, [MStroke(color)], sz |> TBorderBottom(-1.0) |> TBorderRight(-1.0)),
						TFrame(
							0.0,
							4.0,
							[MFill(color)],
							TBorder(
								2.0, 0.0, 2.0, 0.0,
								MComponent2T(
									manager,
									manager.focus,
									"MDialogCallstack",
									[
										MOnClick(\ -> iter(concat3([">>>"], strSplit(cs, "\n"), ["<<<"]), println)),
										MTooltipText(const("Click to print callstack to the console")),
										MRippleType(MRippleFill() |> const)
									],
									\__ -> MText2T(manager.focus, getCallstackEntryPoint(cs), [MTextMColor(color), MOverline()]),
									m2t
								)
							)
						)
					),
				true
			);
		} else {
			f;
		}
	)
	|> (\t -> TAccess([
		AccessRole("dialog"),
		FAccessAttribute("aria-label", extractStruct(style, MDialogAccessibleName(const(eitherMap(title, \ttl -> ttl.title, "Dialog")))).name),
		FAccessAttribute("flow-force-focus", const(b2s(isSome(currentFocusedItem))))
	], t))
	|> (\t ->
		if (!fullWindow || resizable) {
			t
		} else {
			isCurrent = make(false);
			registerFWDialog(zorder, isCurrent);

			fw = make(false);

			keysCapture = extractStruct(manager.style, MCaptureKeys(\__ -> TEmpty())).capture(manager);
			mouseCapture = extractStruct(manager.style, MCaptureMouse(\__ -> TEmpty())).capture(manager);
			longTouchCapture = extractStruct(manager.style, MCaptureLongTouch(\__ -> TEmpty())).capture(manager);

			TConstruct(
				[
					makeSubscribe(feq(fwZorder, zorder), \cur -> if (cur) updateCurrentFWDialog(zorder)),
					\ -> fconnect(fand(fand(animated, fnot(hideDialog)), fand(fnot(manager.iscript.showPanel), isCurrent)), fw)
				],

				TFullWindow(
					fw,
					TGroup([
						TShow(fw, keysCapture),
						TShow(fw, mouseCapture),
						t,
						TShow(fw, longTouchCapture)
					])
				)
			)
		})
	|> (\t ->
		us :=
			concatA([[
				u1,
				zUns,
				onClose
			],
			if (fullWindow) [
				{
					prevfwZorder = getValue(fwZorder);
					if (zorder > prevfwZorder) {
						nextDistinct(fwZorder, zorder);
						fwAnimated := animated;
						\ -> nextDistinct(fwZorder, prevfwZorder);
					} else nop
				},
				makeSubscribe2(feq(fwZorder, zorder), \fwz ->
					if (fwz) fwAnimated := animated
				)(),
				renderFn(t),
				\ -> unregisterFWDialog(zorder)
			]
			else {
				startRender = \ -> {
					uns = initUnsM();
					rFn = \ -> {
						isDialogRendering := true;
						setUnsM(uns, renderFn(t));
						isDialogRendering := false;
					}
					if (^isDialogRendering) {
						setUnsM(uns, interruptibleTimer(0, rFn))
					} else {
						rFn()
					};
					[\ -> dispUnsM(uns)]
				}
				if (fgetValue(fwZorder) < 0 || zorder < fgetValue(fwZorder))
					startRender()
				else
					[make2SubscribeUns(fwZorder, ^fwAnimated, \fzorder, an -> if (zorder >= fzorder && an) startRender() else [])()]
			},
			[
				\ -> maybeApply(previousFocus, \pf -> {
					deferred(\ -> {
						if (isNone(getCurrentFocusedItem(manager)) && fgetValue(pf.focusEnabled)) {
							nextDistinct(pf.focused, true);
						}
					});

					if (isNone(manager.downInsideFocus)) {
						setDownInsideFocus(manager, pf)
					}
				})
			]
		])
	);
}

snackbarDisp = initUnsM();

renderMSnackbar(manager : MaterialManager, text0 : string, style : [MSnackbarStyle], m2t : (Material, MFocusGroup) -> Tropic, renderFn  : (Tropic) -> () -> void) -> void {
	closeSnackbar = \ -> maybeApply(^snackbarDisp, \fn -> {
		snackbarDisp := None();
		fn();
		maybeApply(tryExtractStruct(style, MSnackbarOnDisappear(nop)), \d -> d.fn());
	});
	closeSnackbar();

	maxLines = extractStruct(style, MMaxLines(10)).lines;
	text =
		if (maxLines < 0) text0
		else concatStrings(take(strSplitLeave(text0, "\n"), maxLines * 2 - 1));

	lightBackground = getLightBackground(manager.focus);
	bgColor =
		either(
			tryExtractStruct(style, MBlack()),
			MBackgroundMColor(!lightBackground)
		);
	textColor : MColor =
		eitherMap(
			tryExtractStruct(style, MSnackbarTextColor(MBlack())),
			\tc -> tc.color,
			MDefaultTextColor(!lightBackground)
		);

	autoDisappear = extractStruct(style, MSnackbarAutoDisappear(true)).enabled;
	autoDisappearTime = extractStruct(style, MSnackbarAutoDisappearTime(6000)).ms;

	alignment = eitherMap(
		tryExtractStruct(style, MSnackbarAlignLeft(true)),
		\align -> if (align.left) LeftAlign() else RightAlign(),
		extractCommonAlignment(style)
	);
	offset = extractStruct(style, MSnackBarOffset(zeroPoint)).offset;
	width = extractStruct(style, MWidth(568.0)).width;
	minWidth = 240.;
	visible = extractStruct(style, MSnackbarVisible(make(false))).visible;
	progress = make(0.);
	fadeAnimation = extractStruct(style, MSnackbarFadeAnimation(offset.y != 0.)).fade;

	customButton = tryExtractStruct(style, MTextButton("", nop, [], []));
	button =
		either(customButton,
			if (contains(style, MSnackbarNoButton())) TEmpty()
			else MIconButton("clear", closeSnackbar, [textColor], [MButtonTitle(const("Close snackbar"))])
		)
		|> MCenterY |> MBorderLeft(8.0);

	snackBar =
		MParagraph(text, [textColor, MBody()])
		|> MBorderTopBottom(16.)
		|> MCenterY
		|> (\t -> MGroup2(t, TFixed(minWidth, 0.)))
		|> (\t -> MBaselineCols2(t, button))
		|> (\t -> MBorderA(16., 0., 8., 0., t))
		|> (\t -> m2t(t, manager.focus))
		|> (\t -> TAvailable(t, if (width == -1.) TFillX() else TFillMax(width, 0.)))
		|> (\t -> MShapeFrame(manager.focus, [MFill(bgColor)], t, "MSnackbar"))
		|> (\t -> TShadowShape(manager.focus, const(6.0), t, RectangleShape("MSnackbar")))
		|> (\t -> TBorder4(24.0, t))
		|> (\t -> TTranslate(const(offset), t))
		|> (\t ->
			if (fadeAnimation)
				MEasingAnimation(
					manager,
					manager.focus,
					const(0.3),
					const(easingFastOutSlowIn),
					visible,
					\v -> Some(v),
					\v, prc ->
						nextDistinct(progress, if (v) prc else 1.0 - prc),
					[],
					TLet("bar", TAlpha(progress, t), TCenterIn(TScale(ffactor2(flerp(0.9, 1., progress)), TDisplay("bar")), TGhost("bar")))
				)
			else
				TAnimatedExpander(manager, manager.focus, t, visible, [MNoCrop(), MExpanderProgress(progress), MExpandFromStart()])
		)
		|> (\t -> TAccess([
			AccessRole("dialog"),
			FAccessAttribute("aria-label", const(text)),
			FAccessAttribute("flow-force-focus", const("true"))
		], t))
		|> TAlignBottom
		|> TAlignHorizontalDir(alignment, manager.focus.rtl)
		|> (\t -> TConstruct([\ -> subscribe2(visible, \v -> if (!v) closeSnackbar())], t));

	renderDisp = renderFn(snackBar);
	nextDistinct(visible, true);
	timerDisp = if (autoDisappear) interruptibleTimer(autoDisappearTime, closeSnackbar) else nop;

	setUnsM(
		snackbarDisp,
		\ -> {
			timerDisp();
			timer(300, renderDisp);
			nextDistinct(visible, false);
		}
	)
}