import material/internal/material_dialog_internal;
import material/internal/material_focus;

export {
	MEGItem ::= MEGTextInput, MEGDropDown, MEGTimePicker, MEGDatePicker, MEGMutable, Material, MEGSwitchControl, MEGCheckBox;
		MEGTextInput(label : string, value : DynamicBehaviour<flow>, style : [MEGTextInputStyle]);
			MEGTextInputStyle ::= MEGItemStyle, MInputFilter, MHelperText, MNativeInput, MPreparedSentenceMatcher, MFilterAction,
				MSentenceMatcher, MMaxResults, MEGConvertFn, MInputError, Multiline, MDictionary, MShowUnderline, MCustomTextStyle, TextInputType;

			MEGConvertFn(v2sFn : (flow) -> string, s2vFn : (string) -> flow);

		MEGDropDown(label : string, value : DynamicBehaviour<flow>, undefined : Pair<flow, string>, items : [Pair<flow, string>],
			style : [MEGItemStyle]);
			MEGDropDownStyle ::= MEGItemStyle;

		MEGTimePicker(label : string, value : DynamicBehaviour<Time>, style : [MEGTimePickerStyle]);
			MEGTimePickerStyle ::= MEGTextInputStyle, MTimeAMPM, MTimeMin, MTimeMax;

		MEGDatePicker(label : string, value : DynamicBehaviour<DateOrTime>, style : [MEGDatePickerStyle]);
			MEGDatePickerStyle ::= MEGTextInputStyle, MDateMin, MDateMax;
			DateOrTime ::= Date, Time;

		MEGSwitchControl(label : string, value : DynamicBehaviour<bool>, style : [MEGSwitchControlStyle]);
			MEGSwitchControlStyle ::= MEGItemStyle, MOnOffText;

		MEGCheckBox(label : string, value : DynamicBehaviour<bool>, style : [MEGItemStyle]);

		MEGMutable(content : Transform<MEGItem>);

	extractMEGItemStyle(style : [flow]) -> [MEGItemStyle];

		MEGItemStyle ::= MButtonState, MShowLabel, MLeftIcon, MWidth, MColor, ReadOnly;
			MShowLabel(show : bool);

	extractMEGItemState(style : [flow], label : string) -> [MEGItemState];

		MEGItemState ::= MButtonState, MLabel, MLeftIcon, MWidth, MColor, MTooltipText;

		MEGComponentStyle ::= MEGSwitchControlOrTextInputStyle, MEGTimePickerStyle, MEGDatePickerStyle;
		MEGSwitchControlOrTextInputStyle ::= MEGTextInputStyle, MEGSwitchControlStyle;

	extractMEGTextInputStyle(style : [flow]) -> [MEGTextInputStyle];
	extractMEGDatePickerStyle(style : [flow]) -> [MEGDatePickerStyle];
	extractMEGTimePickerStyle(style : [flow]) -> [MEGTimePickerStyle];
	extractMEGSwitchControlStyle(style : [flow]) -> [MEGSwitchControlStyle];

	extractMTextInputStyle(style : [flow], label : string) -> [MTextInputStyle];
	extractMTextInputState(style : [flow]) -> [MTextInputState];
}

extractMEGItemStyle(style : [flow]) -> [MEGItemStyle] {
	concatA([
		extractMButtonState(style),
		extractStructMany(style, MShowLabel(true)),
		extractStructMany(style, MLeftIcon("")),
		extractStructMany(style, MWidth(-1.)),
		extractStructMany(style, MWhite()),
		extractStructMany(style, ReadOnly(false))
	])
}

extractMEGItemState(style : [flow], label : string) -> [MEGItemState] {
	clickEnabled = MClickEnabled(const(!extractStruct(style, ReadOnly(false)).readOnly));
	width = extractStruct(style, MWidth(-1.));

	concatA([
		extractMButtonState(style),
		extractStructMany(style, MLeftIcon("")),
		extractStructMany(style, MWhite()),
		extractStructMany(style, MTooltipText(const("")))
	])
	|> (\f -> replaceStructMany(f, [clickEnabled, width]))
	|> (\f ->
		if (extractStruct(style, MShowLabel(true)).show)
			arrayPush(f, MLabel(label))
		else
			f
	)
}

extractMEGTextInputStyle(style : [flow]) -> [MEGTextInputStyle] {
	concatA([
		extractMEGItemStyle(style),
		extractStructMany(style, MHelperText(const(None()), false)),
		extractStructMany(style, MInputFilter(\s, __ -> s)),
		extractStructMany(style, MNativeInput(true)),
		extractStructMany(style, MPreparedSentenceMatcher(const(dummySentenceMatcher))),
		extractStructMany(style, MSentenceMatcher(buildSentenceMatcher, simpleSentenceMatcher)),
		extractStructMany(style, MMaxResults(0)),
		extractStructMany(style, MFilterAction(nop1)),
		extractStructMany(style, MEGConvertFn(\__ -> "", \__ -> false)),
		extractStructMany(style, Multiline(false)),
		extractStructMany(style, MDictionary([])),
		extractStructMany(style, MShowUnderline(false)),
		extractStructMany(style, MCustomTextStyle([])),
	])
}

extractMEGDatePickerStyle(style : [flow]) -> [MEGDatePickerStyle] {
	concatA([
		extractMEGTextInputStyle(style),
		extractStructMany(style, MDateMin(stamp2date(timestamp()))),
		extractStructMany(style, MDateMax(stamp2date(timestamp()))),
	])
}

extractMEGTimePickerStyle(style : [flow]) -> [MEGTimePickerStyle] {
	concatA([
		extractMEGTextInputStyle(style),
		extractStructMany(style, MTimeAMPM(true)),
		extractStructMany(style, MTimeMin(stamp2time(timestamp()))),
		extractStructMany(style, MTimeMax(stamp2time(timestamp()))),
	])
}

extractMEGSwitchControlStyle(style : [flow]) -> [MEGSwitchControlStyle] {
	concatA([
		extractMEGItemStyle(style),
		extractStructMany(style, MOnOffText("", ""))
	])
}

extractMTextInputStyle(style : [flow], label : string) -> [MTextInputStyle] {
	width = extractStruct(style, MWidth(-1.));

	concatA([
		extractStructMany(style, MLeftIcon("")),
		extractStructMany(style, MWhite()),
		extractStructMany(style, ReadOnly(true)),
		extractStructMany(style, MNativeInput(true)),
		extractStructMany(style, MFilterAction(nop1)),
		extractStructMany(style, Multiline(false)),
		extractStructMany(style, MShowUnderline(false))
	])
	|> (\f -> arrayPush(f, width))
	|> (\f ->
		if (extractStruct(style, MShowLabel(true)).show)
			concat(f, [MLabel(label), MFloatingLabel()])
		else
			arrayPush(f, MLabel(""))
	)
}

extractMTextInputState(style : [flow]) -> [MTextInputState] {
	concatA([
		extractMButtonState(style),
		extractStructMany(style, MHelperText(const(None()), false)),
		extractStructMany(style, MInputFilter(\s, __ -> s))
	])
}
