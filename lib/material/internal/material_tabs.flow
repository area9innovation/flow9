import material/internal/material_toolbar;
import material/internal/material_grid;
import material/internal/tropic_size_util;

export {
	MDynamicTabs2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicTabs, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

tabsPanelHeight = 48.;
tabsPanelHeightWithIcons = 72.;
bordersGap = 24.;
defaultTabFontStyle = MButton1();

MDynamicTabs2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicTabs, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	tabsId = makeTropicTag(manager);
	mColor = extractMColor(parent, m.style, MPrimaryColor());
	fillOpacity = extractStruct(m.style, FillOpacity(1.));
	bgStyle = extractStruct(m.style, MBackgroundStyle([MFill(mColor), fillOpacity])).style;
	tabsBgStyle = extractStruct(m.style, MTabsBackgroundStyle(bgStyle)).style;
	tabsContentBgStyle = extractStruct(m.style, MTabsContentBackgroundStyle([])).style;
	itemsColor = tryExtractMToolbarItemsMColor(parent, mergeTGraphicsStyles(bgStyle, tabsBgStyle), m.style);
	indicatorColor : MColor = MThemeColor2MColor(parent, extractStruct(m.style, MTabsIndicatorColor(MAccentColor())).color);
	indicatorHeight = extractStruct(m.style, MTabsIndicatorHeight(2.)).height;
	indicatorAbove = contains(m.style, MTabIndicatorOnTop());
	addAction = tryExtractStruct(m.style, MTabsAddAction(\__ -> TEmpty()));
	elevation = extractStruct(m.style, MElevation(const(if (js) 0. else 2.))).elevation;
	order = tryExtractStruct(m.style, MListReorder(make([]), const(false)));
	maxHeight = tryExtractStruct(m.style, MMaxHeight(tabsPanelHeight));
	tabsHeight = make(eitherMap(maxHeight, \mh -> mh.height, tabsPanelHeight));
	tabsAlign = extractStruct(m.style, MTabsAlign(StartAlign())).direction;
	showTabsPanel = extractStruct(m.style, MTabsPanelShow(const(true))).show;
	noDispose = contains(m.style, MNoDispose());
	noDimming = contains(m.style, MTabsNoDimming());
	capitalizeTitle = !contains(m.style, MTabsNoCapitalization());
	preRender = contains(m.style, MPreRender());
	tabWidth0 = extractStruct(m.style, MTabWidthLimited(128., if (contains(m.style, MLargeView())) 320. else 256.));
	showTooltip : MShowTooltip = extractStruct(m.style, MShowTooltip(const(true)));
	plusButton = extractStruct(m.style, MTabsPanelButton(TEmpty(), false, false));
	noScroll = contains(m.style, MNoScroll());
	horizontalSeparators = tryExtractStruct(m.style, MTabsHorizontalSeparator(0., MWhite(), MWhite()));
	verticalSeparators = tryExtractStruct(m.style, MTabsVerticalSeparators(0., MWhite()));
	iconAlign = tryExtractStruct(m.style, MTabsIconAlign(StartAlign()));
	titleAlignIcon = contains(m.style, MTabsIconTitleAlign());
	oneLineTitle = isSome(iconAlign) || titleAlignIcon;
	grabDelay = extractStructMany(m.style, MGrabDelay(0));
	isKeepTabColor = !contains(m.style, MTabChangeIndicatorColor());
	rescaleEnabled0 = extractStruct(m.style, MTabTitleRescaleEnabled(const(true))).enabled;
	iconHideable = contains(m.style, MTabIconHideable());

	tabsFontStyle = fold(m.style, defaultTabFontStyle, \acc, st -> switch(st) {
		MFontStyle() : st;
		default : acc;
	});

	isAnyIcon = fselect(m.tabs, FLift(\tabs -> exists(tabs, \t -> containsStruct(t.style, MTabIcon(TEmpty())))));

	extractMinWidth = \st -> extractStruct(st, tabWidth0).minWidth;
	addBordersGap = \mw : double -> mw + bordersGap;

	tabsMinWidth : DynamicBehaviour<[double]> = make(map(fgetValue(m.tabs), \tb -> addBordersGap(extractMinWidth(tb.style))));

	inspectScroll = makeTScrollInspectVisible();
	contentScrollStyle = extractMScrollStyle(m.style);
	scrollPosition = make(zeroPoint);
	stageWidth = make(0.);
	tabWidth = tryExtractStruct(m.style, MWidth(0.0));
	tabsWidths : DynamicBehaviour<[double]> = make(generate(0, length(fgetValue(m.tabs)), \i -> getValue(tabsMinWidth)[i]));
	panelButtonW = make(0.);

	oldTabs : ref [MTab] = ref fgetValue(m.tabs);

	(\p0 ->
		(\p ->
			MSelect2T(manager, p, "MTabsHeader", [AccessRole("tablist"), MFocusId(const(0))], m.tabs, \tbs : [MTab], p2 -> {
				protocol : [ArrayOperation<MTab>] = arrayDiffReversed(^oldTabs, tbs, false);
				tbsLength = length(tbs);

				sel = ref getValue(m.selected);
				tbsMinWidth : ref [double] = ref getValue(tabsMinWidth);
				replaced = ref [];
				iconsVisible = make([]);
				showIcons = fsubselect(iconsVisible, FLift(\iconsVis -> fands(iconsVis, true)));

	 			iter(protocol, \op -> switch (op : ArrayOperation<MTab>) {
					ArrayNop(__, __): {}
					ArrayInsert(__, y, v): {
						if (y <= ^sel)
							sel := min(^sel + 1, tbsLength - 1);

						tbsMinWidth := insertArray(^tbsMinWidth, y, addBordersGap(extractMinWidth(v.style)));
					}
					ArrayReplace(__, y, v): {
						if (y == ^sel && !contains(^replaced, ^sel))
							eitherFn(
								findi(^oldTabs, \tb -> tb == v),
								\id -> {
									tbsMinWidth := swapIndexes(^tbsMinWidth, y, id);
									refArrayPush(replaced, id);
									sel := id;
								},
								\ -> {
									tbsMinWidth := replace(^tbsMinWidth, y, addBordersGap(extractMinWidth(v.style)));
								}
							);
					}
					ArrayRemove(__, y): {
						if (y <= ^sel)
							sel := forceRange(^sel - 1, 0, tbsLength - 1);

						tbsMinWidth := removeIndex(^tbsMinWidth, y);
					}
				});

	 			nextDistinct(m.selected, ^sel);
	 			nextDistinct(tabsWidths, ^tbsMinWidth);
	 			nextDistinct(tabsMinWidth, []);
	 			nextDistinct(tabsMinWidth, ^tbsMinWidth);

				oldTabs := tbs;

				tabHeader2T = \i, tb -> {
					tabMinWidth = extractMinWidth(tb.style);

					onClick =
						extractStruct(tb.style, MOnClick(nop)).click
						|> (\onClk -> MOnClick(\ -> {
							onClk();
							selectedIndex = getValue(m.selected);
							confirm = if (selectedIndex >=0 && selectedIndex < tbsLength && selectedIndex != i) {
								extractStruct(tbs[selectedIndex].style, MTabConfirmSwitch(\cb -> cb(true))).confirm;
							} else {
								\cb -> cb(true)
							};

							confirm(\isApproved -> {
								if (isApproved) { nextDistinct(m.selected, i); }
							})
						}));
					tabPanelId = fif(feq(m.selected, i), const(makeTabpanelId(tabsId, i)), const(""));
					focusState = replaceStructMany(tb.style, 
						[onClick, AccessRole("tab"), FAccessAttribute("aria-controls", tabPanelId), MRippleType(const(MRippleFill()))]
					);
					tabIcon = tryExtractStruct(tb.style, MTabIcon(TEmpty()));
					
					rescaleEnabled = fand(rescaleEnabled0, extractStruct(tb.style, MTabTitleRescaleEnabled(const(true))).enabled);
					maxLines = extractStruct(tb.style, MMaxLines(2)).lines;
					widthByContent = contains(tb.style, MWidthByContent());
					centerTitle = !(titleAlignIcon && isSome(tabIcon));
					availableW = make(0.);
					fullWidth = make(0.);
					iconW = make(0.);
					isIconVisible = make(true);
					dynArrayPush(iconsVisible, isIconVisible);
					colorT = fselectLift(fand(const(!isKeepTabColor), feq(m.selected, i)), \selected -> if (selected) Some(indicatorColor) else itemsColor);

					TSelect2(tb.text, colorT, \txt, color ->
						if (txt != "") {
							MTabsText(manager, p2, txt, capitalizeTitle, centerTitle, rescaleEnabled, showTooltip, maxLines, tabsFontStyle, color, fullWidth, widthByContent, m2t)
							|> TBorderTopBottom(2.)
						} else if (isSome(iconAlign)) TFillX()
						else TEmpty()
					)
					|> (
						if (oneLineTitle && isSome(tabIcon)) idfn
						else TSetMinWidth2(if (widthByContent) fullWidth else const(tabMinWidth))
					)
					|> (\t -> eitherMap(tabIcon, \ti ->
							switch (ti.icon) {
								MIcon(name, style) : MSelect(colorT, \color ->
									eitherMap(color, \iconColor -> MIcon(name, replaceStruct(style, iconColor)), ti.icon)
								);
								default : ti.icon;
							}
							|> (\ic -> m2t(ic, p2))
							|> (\t2 -> if (oneLineTitle) TBorderLeftRight(2.)(t2) else TCenterX(t2) |> TBorderTopBottom(2.))
							|> (\t2 -> TAttachWidth(t2, iconW))
							|> (\t2 -> if (oneLineTitle) {
								isRightAlign = eitherMap(iconAlign, \align -> commonAlignment2abs(align.align, p.rtl) == RightAlign(), false);
								TCols2Dir(TShow(showIcons, t2), t, isRightAlign)
								|> (\t3 -> if (titleAlignIcon) TCenterX(t3) else t3)
							} else {
								TLines2(t2, t)
							}),
						t
					))
					|> TBorderLeftRight(bordersGap / 2.)
					|> (if (oneLineTitle) TCenterY else TCenter)
					|> (\t ->
						MComponent2T(
							manager,
							p2,
							"MTabsButton",
							focusState,
							\focus ->
								TCopySize(
									{
										if (noDimming) t
										else TAlpha(
											fif(fmaxA([feq(m.selected, i), focus.down, focus.focused, focus.hover], false), const(1.), const(secondaryTextOpacity)),
											t
										)
									}
									|> (\t2 : Tropic -> eitherMap(addAction, \addAct -> m2t(MCols2A(t2, addAct.action(i)), p2), t2)),
									\tr -> TShowLazy(fOr(focus.focused, focus.down), \ -> TRectangle([MFill(MGrey(500)), FillOpacity(0.3)], tr)),
									true
								),
							m2t
						)
					)
					|> (\t -> eitherMap(horizontalSeparators, \separator -> {
							TLines2(t, TIfLazy2(feq(m.selected, i), \slctd -> {
								col = if (slctd) separator.selectedColor else separator.notSelectedColor;
								TRectangle([MThemeFill(parent, col)], TFillXH(separator.height))
							}, true))
						}, t))
					|> (\t -> eitherMap(verticalSeparators, \separator ->
						if (i != tbsLength - 1) TCols2A(t, TRectangle([MThemeFill(parent, separator.color)], TFillWY(separator.width))) else t, t))
					|> (\t ->
						TransformTAcc(\t2a, pi, s, mo -> {
							bf = t2a(t, pi, s, mo);

							uns1 = make2Subscribe(bf.minWidth, fif(fand(const(iconHideable), showIcons), iconW, zero), \mwi0, icw : double -> {
								mwi = mwi0 - icw;
								tabsMinWidth0 = getValue(tabsMinWidth);
								tabs0 = fgetValue(m.tabs);

								if (i < length(tabs0)) {
									lenTabsMinWidth = length(tabsMinWidth0);
									nextDistinct(tabsMinWidth,
										if (i < lenTabsMinWidth)
											replace(tabsMinWidth0, i, mwi)
										else
											concat3(
												tabsMinWidth0,
												generate(0, i - lenTabsMinWidth, \i2 ->
													addBordersGap(extractMinWidth(tabs0[i2 + lenTabsMinWidth].style))
												),
												[mwi]
											)
										);
								}
							})();

							uns2 = makeSubscribe(fstall(bf.metrics.height, 0), \h ->
								nextDistinct(tabsHeight, max(getValue(tabsHeight), h))
							)();

							uns3 = makeSubscribe(pi.maxX, \w ->
								nextDistinct(availableW, w)
							)();

							TAcc(bf with disposers = concat(bf.disposers, [uns1, uns2, uns3]))
						})
						|> (\t2 -> TAvailableWidth(t2, fselect(tabsWidths, FLift(\tw ->
									if (i < length(tw))
										tw[i]
									else if (i < length(fgetValue(m.tabs)))
										extractMinWidth(fgetValue(m.tabs)[i].style) + bordersGap
									else
										tabWidth0.minWidth + bordersGap
								))))
						|> (\t2 -> TAvailableHeight(t2, tabsHeight))
					)
					|> (\t -> if (iconHideable) TConstruct([
							make3Subscribe(availableW, fullWidth, iconW, \avW, fw, iw ->
								nextDistinct(isIconVisible, fw + iw + bordersGap <= avW)
							)
						], t)
						else t
					)
				}

				mapi(tbs, tabHeader2T)
				// TODO : Maybe MReorderTemplate here
				|> (\t : [Tropic] ->
					eitherFn(
						order,
						\or ->
							MReorderGrid2T(
								manager,
								p2,
								map(t, \tb -> MReorderItem(tb, [])),
								or.order,
								concat([MEnabled(or.enabled), MVertical()], grabDelay),
								m2t
							)
							|> (\t2 -> TAvailableHeight(t2, const(0.))),
						\ ->
							TColsDir(t, p.rtl)
					)
				)
			})
			|> makeTropicConstantHeight(None())
			|> (\t -> TGroup2(
					t,
					MTabsIndicator(manager, p, tabsWidths, m.selected, order, scrollPosition, inspectScroll, tabsHeight, indicatorColor, indicatorHeight, indicatorAbove)
				)
			)
			|> (\t -> TAttachAvailableWidth(t, stageWidth))
			|> (\t : Tropic -> if (plusButton.button != TEmpty()) {
				if (plusButton.alignOppositeSide) {
					leftSide = switch (tabsAlign) {
						StartAlign() : p.rtl;
						EndAlign() : !p.rtl;
						LeftAlign() : false;
						RightAlign() : true;
						CenterAlign() : p.rtl;
					}
					TCopySize2(
						TFillWYT(faddition(fmax(stageWidth, fselect(tabsMinWidth, FLift(dsum))), panelButtonW)),
						\sz, __ ->
							TGroup2(
								m2t(plusButton.button, p)
								|> (\t2 -> TAttachWidth(t2, panelButtonW))
								|> (\t2 -> TTweak([TAlign(const(b2d(!leftSide)), const(0.5))], t2, sz))
								|> (\t2 -> if (plusButton.showSeparator)
									eitherMap(horizontalSeparators, \separator ->
										TLines2(
											t2,
											TRectangle([MThemeFill(parent, separator.notSelectedColor)], TGroup2(TWidth(sz), TFixed(0., separator.height)))
											|> TBorderTop(-separator.height)
										),
										t2
									)
									else t2
								),
								TBorderT(if (leftSide) panelButtonW else zero, zero, if (leftSide) zero else panelButtonW, zero, t)
								|> (\t2 -> TTweak([TAlign(const(b2d(leftSide)), const(0.5))], t2, sz))
							)
					)
				}
				else
					m2t(MCols2A(t, plusButton.button |> MCenterY), p)
			} else t)
			|> (\t -> TFrame(0., 0., tabsBgStyle, t))
			|> (\t -> switch (tabsAlign) {
				StartAlign() : TAlignStartDir(t, p.rtl);
				EndAlign() : TAlignEndDir(t, p.rtl);
				LeftAlign() : TAlignLeft(t);
				RightAlign() : TAlignRight(t);
				CenterAlign() : TTweak([TAlign(const(0.5), const(0.0))], t, TFillX());
			})
			|> (\t ->
				TConstruct(
					[
						make2Subscribe(stageWidth, tabsMinWidth, \sw : double, minWidths : [double] -> {
							lenMW = length(minWidths);

							widths : Pair<[double], [double]> = generate(0, length(fgetValue(m.tabs)), \i -> {
								tabWidthStyle = extractStruct(fgetValue(m.tabs)[i].style, tabWidth0);
								minW = 
									if (i < lenMW)
										minWidths[i]
									else
										addBordersGap(tabWidthStyle.minWidth);
								Pair(
									minW,
									if (contains(fgetValue(m.tabs)[i].style, MWidthByContent())) minW
									else if (tabWidthStyle.maxWidth == -1.) -1.
									else addBordersGap(tabWidthStyle.maxWidth)
								)
							}) |> unzipA;

							newWidths = distributeSizesEvenly(widths.first, widths.second, sw);
							next(tabsWidths, newWidths);
						}),

						\ -> fconnectSelect(isAnyIcon, tabsHeight, \b ->
							max(getValue(tabsHeight), if (b && !oneLineTitle) tabsPanelHeightWithIcons else tabsPanelHeight)
						)
					],
					t
				)
			)
			|> (\t ->
				MScroll2T(
					manager,
					p,
					MScroll(
						t,
						TFillXHT(tabsHeight),
						[TScrollbars(invisibleScrollBar, invisibleScrollBar), inspectScroll, MScrollPosition(scrollPosition)]
					),
					m2t
				)
			)
			|> (\t -> TFrame(0., 0., bgStyle, t))
			|> (\t -> TShadowShape(p, elevation, t, BottomRectangleShape()))
		)
		|> (\makeTabsHeader ->
			eitherFn(
				itemsColor,
				\ic ->
					MComponentGroup2T(
						manager,
						p0,
						"MTabs",
						[
							MaterialTheme(p0.theme with palette =
								MaterialPalette(p0.theme.palette with
									onBackground = MThemedColor(ic, ic),
									onSurface = MThemedColor(ic, ic)
								)
							)
						],
						makeTabsHeader
					),
				\ ->
					makeTabsHeader(p0)
			)
		)
		|> (\t -> TLines2InvertZorder(
				TIf(showTabsPanel, t, TFillX()),
				SelectMGroup2T(manager, p0, m.tabs, \i, id, tab, p2 -> {
					tabEn = feq2(m.selected, i);

					(\p3 -> MComponentGroup2T(manager, p3, "MTabsContent", [
							MEnabled(tabEn),
							MFocusEnabled(tabEn),
							MFocusId(const(id)),
							AccessRole("tabpanel"),
							FAccessAttribute("id", fselectLift(i, \ii -> makeTabpanelId(tabsId, ii)))
						], \p4 ->
						m2t(MAlignStart(tab.content), p4)
					))
					|> (\makeTabContent ->
						if (preRender)
							MShowPreRender2T(manager, p2, tabEn, makeTabContent)
						else if (noDispose)
							MRenderOnce2T(manager, p2, tabEn, makeTabContent)
						else
							TShowLazy(tabEn, \ -> makeTabContent(p2))
					)
				})
				|> (\t2 : Tropic -> if (noScroll) t2 else MScroll2T(manager, p0, MScroll(t2, TFillXY(), contentScrollStyle), m2t))
			)
			|> (\tabsContent -> eitherMap(tabWidth, \w -> TAvailableWidth(tabsContent, const(w.width)), tabsContent))
			|> (\tabsContent -> TFrame(0., 0., tabsContentBgStyle, tabsContent))
		)
	)
	|> (\t ->
		MComponentGroup2T(
			manager,
			parent,
			"MDynamicTabs",
			[
				IScriptBehaviour("selected", m.selected, ISInputValue(map(fgetValue(m.tabs), \tab -> tab.text), "index", true)),
			],
			t
		)
	)
}

MTabsText(
	manager : MaterialManager,
	parent : MFocusGroup,
	text0 : string,
	capitalizeTitle : bool,
	centerTitle : bool,
	rescaleEnabled : Transform<bool>,
	showTooltip : MShowTooltip,
	maxLines : int,
	tabsFontStyle : MFontStyle,
	itemsColor : Maybe<MColor>,
	fullWidth : DynamicBehaviour<double>,
	widthByContent : bool,
	m2t : (Material, MFocusGroup) -> Tropic,
) -> Tropic {
	text = if (capitalizeTitle) toUpperCase(text0) else text0;
	customFont = MFontStyle2MFont(parent, tabsFontStyle);

	if (widthByContent) {
		style = concatA([
			[customFont],
			eitherMap(itemsColor, v2a, [])
		]);
		TAttachWidth(MText2T(parent, text, style), fullWidth)
	} else {
		truncated = make(false);
		showRescaled = fand(rescaleEnabled, truncated);
		style = concatA([
			if (centerTitle) [
				CenterAlign(),
				MEllipsisTextAlignment(CenterAlign())
			] else [],
			[MMaxLines(maxLines), showTooltip],
			eitherMap(itemsColor, v2a, [])
		]);
		TGroup2(
			TVisible(fnot(showRescaled), MEllipsisText2T(manager, parent, MEllipsisText(
				text,
				concat(
					style,
					[
						customFont,
						MTextIsTruncated(truncated),
						MEllipsisTextGetFullWidth(\fw -> nextDistinct(fullWidth, fw))
					]
				)
			), m2t))
			|> TFixHeight2Maybe(fif(showRescaled, const(Some(0.)), const(None()))),
			TShowLazy(showRescaled, \ -> MEllipsisText2T(manager, parent, MEllipsisText(
				text,
				arrayPush(
					style,
					MFont(customFont with size = customFont.size / 1.5),
				)
			), m2t))
		)
	}
}

MTabAnimation(
	xTranslation : double,
	trop : double,
	scroll : double
);

MTabsIndicatorInfo(
	width : double,
	tabsWidths : [double],
	selected : int,
	order : [int]
);

MTabsIndicatorInfo2MTabAnimation(info : MTabsIndicatorInfo) -> MTabAnimation {
	wds = info.tabsWidths;
	sel = info.selected;
	ord = findiDef(info.order, eq(sel), sel);

	if (sel >= 0 && sel < length(wds)) {
		fullW = dsum(wds);
		nTransWidth = dsum(generate(0, ord, \i -> wds[elementAt(info.order, i, i)]));
		nTrop = wds[ord];

		MTabAnimation(
			nTransWidth,
			nTrop,
			forceRange(0., nTransWidth - info.width / 2. + nTrop / 2., fullW - info.width)
		);
	} else {
		MTabAnimation(
			0.0,
			0.0,
			0.0
		);
	}
}

MTabsIndicator(manager : MaterialManager, parent : MFocusGroup, tabsWidths : DynamicBehaviour<[double]>, selected : Transform<int>, order : Maybe<MListReorder>,
	scrollPosition : DynamicBehaviour<Point>, inspectScroll : TScrollInspectVisible, tabsHeight : DynamicBehaviour<double>,
	indicatorColor : MColor, lineHeight : double, indicatorAbove : bool
) -> Tropic {

	prevS = ref fgetValue(selected);
	isRTL = parent.rtl;
	orderI : ([int]) -> [int] = if (isRTL) reverseA else idfn;
	orderD : ([double]) -> [double] = if (isRTL) reverseA else idfn;
	orderedTabsWidths = fselect(tabsWidths, FLift(orderD));

	trigger =
		fselect4(
			fwidth(inspectScroll.widthHeight),
			orderedTabsWidths,
			eitherFn(
				order,
				\__ -> selected,
				\ -> if (isRTL)
						fsubtracti(fsubtracti(flength(orderedTabsWidths), selected), const(1))
					else
						selected
			),
			eitherMap(order, \or -> fselect(or.order, FLift(orderI)), const([])),
			\wd, twds : [double], sel, ord -> MTabsIndicatorInfo(wd, twds, sel, ord)
		);

	indicatorBaseWidth = 100.; 

	TAnimation(
		TFixed(indicatorBaseWidth, lineHeight)
		|> addTBackground(indicatorColor),
		fselect(fselectWithLast(fselect(trigger, MTabsIndicatorInfo2MTabAnimation |> FLift), FIdentity2()), FLift(\p : Pair<MTabAnimation, MTabAnimation> -> {
			next(scrollPosition, Point(p.second.scroll, 0.0));
			sel = fgetValue(trigger).selected;

			if (^prevS == sel || !parent.theme.enableAnimations) {
				[
					FAnimationKeyframe([
						FTranslateValue(Point(p.second.xTranslation, 0.0)),
						FScaleValue(Factor(p.second.trop / indicatorBaseWidth, 1.0))
					])
				];
			} else {
				prevS := sel;

				[
					FAnimationKeyframe([
						FTranslateValue(Point(p.first.xTranslation, 0.0)),
						FScaleValue(Factor(p.first.trop / indicatorBaseWidth, 1.0))
					]),
					FAnimationKeyframe([
						FTranslateValue(Point(p.second.xTranslation, 0.0)),
						FScaleValue(Factor(p.second.trop / indicatorBaseWidth, 1.0))
					])
				];
			}
		})),
		[
			FAnimationDuration(const(easingTransitionDuration)),
			FAnimationEasing(const(easingStandartCurve)),
		]
	)
	|> makeTropicConstantHeight(Some(lineHeight))
	|> (\t -> if (indicatorAbove) t else TTranslate(fselect(tabsHeight, FLift(\th -> Point(0., th - lineHeight))), t))
}

// b styles override sty
mergeTGraphicsStyles(a : [TGraphicsStyle], b : [TGraphicsStyle]) -> [TGraphicsStyle] {
	bFillOpacity = extractStruct(b, FillOpacity(1.)).opacity;
	bStrokeOpacity = extractStruct(b, StrokeOpacity(1.)).opacity;

	fold(b, a, \acc, st ->
		switch (st : TGraphicsStyle) {
			RadialGradient() : if (bFillOpacity > 0.) replaceStruct(acc, st) else acc;
			Fill(__) : if (bFillOpacity > 0.) replaceStruct(acc, st) else acc;
			GradientFill(__, __) : if (bFillOpacity > 0.) replaceStruct(acc, st) else acc;

			Stroke(__) : if (bStrokeOpacity > 0.) replaceStruct(acc, st) else acc;
			StrokeLineGradient(__, __) : if (bStrokeOpacity > 0.) replaceStruct(acc, st) else acc;
			StrokeWidth(__) : if (bStrokeOpacity > 0.) replaceStruct(acc, st) else acc;

			TStyleWithSelector(__, __) : replaceStruct(acc, st);
			TStyle(__) : replaceStruct(acc, st);

			FillOpacity(opacity) : if (opacity > 0.) replaceStruct(acc, st) else acc;
			StrokeOpacity(opacity) : if (opacity > 0.) replaceStruct(acc, st) else acc;

			UseSvg(): arrayPush(acc, st);
		}
	)
}

makeTabpanelId(tabsId, tabId) -> string{
	"tabs" + i2s(tabsId) + "_tabpanel" + i2s(tabId);
}
