import material/internal/material_toolbar;
import material/internal/material_grid;
import material/internal/tropic_size_util;

export {
	MDynamicTabs2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicTabs, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

tabsPanelHeight = 48.;
tabsPanelHeightWithIcons = 72.;
bordersGap = 24.;
defaultTabFontStyle = MButton1();

MDynamicTabs2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicTabs, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	mColor = extractStruct(m.style, getPrimaryColor(parent));
	fillOpacity = extractStruct(m.style, FillOpacity(1.));
	bgStyle = extractStruct(m.style, MBackgroundStyle([MFill(mColor), fillOpacity])).style;
	tabsBgStyle = extractStruct(m.style, MTabsBackgroundStyle(bgStyle)).style;
	tabsContentBgStyle = extractStruct(m.style, MTabsContentBackgroundStyle([])).style;
	itemsColor = tryExtractMToolbarItemsMColor(parent, mergeTGraphicsStyles(bgStyle, tabsBgStyle), m.style);
	indicatorColor : MColor = extractStruct(m.style, MTabsIndicatorColor(getAccentColor(parent))).color;
	indicatorAbove = contains(m.style, MTabIndicatorOnTop());
	addAction = tryExtractStruct(m.style, MTabsAddAction(\__ -> TEmpty()));
	elevation = extractStruct(m.style, MElevation(const(if (js) 0. else 2.))).elevation;
	order = tryExtractStruct(m.style, MListReorder(make([]), const(false)));
	maxHeight = tryExtractStruct(m.style, MMaxHeight(tabsPanelHeight));
	tabsHeight = make(eitherMap(maxHeight, \mh -> mh.height, tabsPanelHeight));
	tabsAlign = extractStruct(m.style, MTabsAlign(StartAlign())).direction;
	noDispose = contains(m.style, MNoDispose());
	noDimming = contains(m.style, MTabsNoDimming());
	preRender = contains(m.style, MPreRender());
	tabWidth0 = extractStruct(m.style, MCustomWidth(128., if (contains(m.style, MLargeView())) 320. else 256.));
	showTooltip : MShowTooltip = extractStruct(m.style, MShowTooltip(const(true)));
	plusButton = extractStruct(m.style, MTabsPanelButton(TEmpty())).button;
	noScroll = contains(m.style, MNoScroll());
	horizontalSeparators = tryExtractStruct(m.style, MTabsHorizontalSeparator(0., MWhite(), MWhite()));
	verticalSeparators = tryExtractStruct(m.style, MTabsVerticalSeparators(0., MWhite()));
	leftAlignIcon = contains(m.style, MTabsIconLeftAlign());
	grabDelay = extractStructMany(m.style, MGrabDelay(0));

	tabsFontStyle = fold(m.style, defaultTabFontStyle, \acc, st -> switch(st) {
		MFontStyle() : st;
		default : acc;
	});

	isAnyIcon = fselect(m.tabs, FLift(\tabs -> exists(tabs, \t -> containsStruct(t.style, MTabIcon(TEmpty())))));

	extractMinWidth = \st -> extractStruct(st, tabWidth0).minWidth;
	addBordersGap = \mw : double -> mw + bordersGap;

	tabsMinWidth : DynamicBehaviour<[double]> = make(map(fgetValue(m.tabs), \tb -> addBordersGap(extractMinWidth(tb.style))));

	inspectScroll = makeTScrollInspectVisible();
	contentScrollInspect = extractStruct(m.style, makeTScrollInspectVisible());
	scrollPosition = make(zeroPoint);
	stageWidth = make(0.);
	tabWidth = tryExtractStruct(m.style, MWidth(0.0));
	tabsWidths : DynamicBehaviour<[double]> = make(generate(0, length(fgetValue(m.tabs)), \i -> getValue(tabsMinWidth)[i]));

	oldTabs : ref [MTab] = ref fgetValue(m.tabs);

	(\p0 ->
		(\p ->
			MSelect2T(manager, p, "MTabsHeader", [AccessRole("tablist"), MFocusId(const(0))], m.tabs, \tbs : [MTab], p2 -> {
				protocol : [ArrayOperation<MTab>] = arrayDiffReversed(^oldTabs, tbs, false);
				tbsLength = length(tbs);

				sel = ref getValue(m.selected);
				tbsMinWidth : ref [double] = ref getValue(tabsMinWidth);
				replaced = ref [];

	 			iter(protocol, \op -> switch (op : ArrayOperation<MTab>) {
					ArrayNop(__, __): {}
					ArrayInsert(__, y, v): {
						if (y <= ^sel)
							sel := min(^sel + 1, tbsLength - 1);

						tbsMinWidth := insertArray(^tbsMinWidth, y, addBordersGap(extractMinWidth(v.style)));
					}
					ArrayReplace(__, y, v): {
						if (y == ^sel && !contains(^replaced, ^sel))
							eitherFn(
								findi(^oldTabs, \tb -> tb == v),
								\id -> {
									tbsMinWidth := swapIndexes(^tbsMinWidth, y, id);
									refArrayPush(replaced, id);
									sel := id;
								},
								\ -> {
									tbsMinWidth := replace(^tbsMinWidth, y, addBordersGap(extractMinWidth(v.style)));
								}
							);
					}
					ArrayRemove(__, y): {
						if (y <= ^sel)
							sel := forceRange(^sel - 1, 0, tbsLength - 1);

						tbsMinWidth := removeIndex(^tbsMinWidth, y);
					}
				});

	 			nextDistinct(m.selected, ^sel);
	 			nextDistinct(tabsWidths, ^tbsMinWidth);
	 			nextDistinct(tabsMinWidth, []);
	 			nextDistinct(tabsMinWidth, ^tbsMinWidth);

				oldTabs := tbs;

				tabHeader2T = \i, tb -> {
					tabMinWidth = extractMinWidth(tb.style);

					onClick =
						extractStruct(tb.style, MOnClick(nop)).click
						|> (\onClk -> MOnClick(\ -> {
							onClk();
							selectedIndex = getValue(m.selected);
							confirm = if (selectedIndex >=0 && selectedIndex < tbsLength && selectedIndex != i) {
								extractStruct(tbs[selectedIndex].style, MTabConfirmSwitch(\cb -> cb(true))).confirm;
							} else {
								\cb -> cb(true)
							};

							confirm(\isApproved -> {
								if (isApproved) { nextDistinct(m.selected, i); }
							})
						}));
					focusState = replaceStructMany(tb.style, [onClick, AccessRole("tab"), MRippleType(const(MRippleFill()))]);
					tabIcon = tryExtractStruct(tb.style, MTabIcon(TEmpty()));

					TSelect(tb.text, \txt ->
						if (txt != "")
							MTabsText(manager, p2, txt, tabMinWidth, showTooltip, tabsFontStyle, itemsColor, m2t)
							|> TBorderTopBottom(2.)
						else if (leftAlignIcon) TFillX()
						else TEmpty()
					)
					|> (if (leftAlignIcon) idfn else TSetMinWidth2(const(tabMinWidth)))
					|> (\t -> eitherMap(tabIcon, \ti ->
							m2t(ti.icon, p2)
							|> (if (leftAlignIcon)
									TBorderLeftRight(2.)
								else
									\t2 -> TCenterX(t2) |> TBorderTopBottom(2.)
							)
							|> (\t2 -> if (leftAlignIcon) TCols2(t2, t) else TLines2(t2, t)),
						t
					))
					|> TBorderLeftRight(bordersGap / 2.)
					|> (if (leftAlignIcon) TCenterY else TCenter)
					|> (\t ->
						MComponent2T(
							manager,
							p2,
							"MTabsButton",
							focusState,
							\focus ->
								TCopySize(
									{
										if (noDimming) t
										else TAlpha(
											fif(fmaxA([feq(m.selected, i), focus.down, focus.focused, focus.hover], false), const(1.), const(0.6)),
											t
										)
									}
									|> (\t2 : Tropic -> eitherMap(addAction, \addAct -> m2t(MCols2A(t2, addAct.action(i)), p2), t2)),
									\tr -> TShowLazy(fOr(focus.focused, focus.down), \ -> TRectangle([MFill(MGrey(500)), FillOpacity(0.3)], tr)),
									true
								),
							m2t
						)
					)
					|> (\t -> eitherMap(horizontalSeparators, \separator -> {
							TLines2(t, TIfLazy2(feq(m.selected, i), \slctd -> {
								col = if (slctd) separator.selectedColor else separator.notSelectedColor;
								TRectangle([MFill(col)], TFillXH(separator.height))
							}, true))
						}, t))
					|> (\t -> eitherMap(verticalSeparators, \separator ->
						if (i != tbsLength - 1) TCols2A(t, TRectangle([MFill(separator.color)], TFillWY(separator.width))) else t, t))
					|> (\t ->
						TransformTAcc2(\t2a -> {
							bf = t |> t2a;

							uns1 = makeSubscribe(bf.minWidth, \mwi : double -> {
								tabsMinWidth0 = getValue(tabsMinWidth);
								tabs0 = fgetValue(m.tabs);

								if (i < length(tabs0)) {
									lenTabsMinWidth = length(tabsMinWidth0);
									nextDistinct(tabsMinWidth,
										if (i < lenTabsMinWidth)
											replace(tabsMinWidth0, i, mwi)
										else
											concat3(
												tabsMinWidth0,
												generate(0, i - lenTabsMinWidth, \i2 ->
													addBordersGap(extractMinWidth(tabs0[i2 + lenTabsMinWidth].style))
												),
												[mwi]
											)
										);
								}
							})();

							uns2 = makeSubscribe(bf.metrics.height, \h ->
								nextDistinct(tabsHeight, max(getValue(tabsHeight), h))
							)();

							TAcc(bf with disposers = concat(bf.disposers, [uns1, uns2]))
						})
						|> (\t2 -> TAvailableWidth(t2, fselect(tabsWidths, FLift(\tw ->
									if (i < length(tw))
										tw[i]
									else if (i < length(fgetValue(m.tabs)))
										extractMinWidth(fgetValue(m.tabs)[i].style) + bordersGap
									else
										tabWidth0.minWidth + bordersGap
								))))
						|> (\t2 -> TAvailableHeight(t2, tabsHeight))
					)
				}

				mapi(tbs, tabHeader2T)
				// TODO : Maybe MReorderTemplate here
				|> (\t : [Tropic] ->
					eitherFn(
						order,
						\or ->
							MReorderGrid2T(
								manager,
								p2,
								map(t, \tb -> MReorderItem(tb, [])),
								or.order,
								concat([MEnabled(or.enabled), MVertical()], grabDelay),
								m2t
							)
							|> (\t2 -> TAvailableHeight(t2, const(0.))),
						\ ->
							TColsDir(t, p.rtl)
					)
				)
			})
			|> makeTropicConstantHeight(None())
			|> (\t -> TGroup2(
					t,
					MTabsBottomLine(manager, p, tabsWidths, m.selected, order, scrollPosition, inspectScroll, tabsHeight, indicatorColor, indicatorAbove)
				)
			)
			|> (\t -> TAttachAvailableWidth(t, stageWidth))
			|> (\t : Tropic -> if (plusButton != TEmpty()) m2t(MCols2A(t, plusButton |> MCenterY), p) else t)
			|> (\t -> TFrame(0., 0., tabsBgStyle, t))
			|> (\t -> switch (tabsAlign) {
				StartAlign() : TAlignStartDir(t, p.rtl);
				EndAlign() : TAlignEndDir(t, p.rtl);
				LeftAlign() : TAlignLeft(t);
				RightAlign() : TAlignRight(t);
				CenterAlign() : TTweak([TAlign(const(0.5), const(0.0))], t, TFillX());
			})
			|> (\t ->
				TConstruct(
					[
						make2Subscribe(stageWidth, tabsMinWidth, \sw : double, minWidths : [double] -> {
							lenMW = length(minWidths);

							widths : Pair<[double], [double]> = generate(0, length(fgetValue(m.tabs)), \i -> {
								tabWidthStyle = extractStruct(fgetValue(m.tabs)[i].style, tabWidth0);
								Pair(
									if (i < lenMW)
										minWidths[i]
									else
										addBordersGap(tabWidthStyle.minWidth),

									if (tabWidthStyle.maxWidth == -1.) -1. else addBordersGap(tabWidthStyle.maxWidth)
								)
							}) |> unzipA;

							newWidths = distributeSizesEvenly(widths.first, widths.second, sw);
							next(tabsWidths, newWidths);
						}),

						\ -> fconnectSelect(isAnyIcon, tabsHeight, \b ->
							max(getValue(tabsHeight), if (b && !leftAlignIcon) tabsPanelHeightWithIcons else tabsPanelHeight)
						)
					],
					t
				)
			)
			|> (\t ->
				MScroll2T(
					manager,
					p,
					MScroll(
						t,
						TFillXHT(tabsHeight),
						[TScrollbars(invisibleScrollBar, invisibleScrollBar), inspectScroll, MScrollPosition(scrollPosition)]
					),
					m2t
				)
			)
			|> (\t -> TFrame(0., 0., bgStyle, t))
			|> (\t -> TShadowShape(p, elevation, t, BottomRectangleShape()))
		)
		|> (\makeTabsHeader ->
			eitherFn(
				itemsColor,
				\ic ->
					MComponentGroup2T(
						manager,
						p0,
						"MTabs",
						[
							MaterialTheme(p0.theme with palette =
								MaterialPalette(getLightBackground(p0), ic, getAccentColor(p0), ic, ic, ic, ic)
							)
						],
						makeTabsHeader
					),
				\ ->
					makeTabsHeader(p0)
			)
		)
		|> (\t -> TLines2(
				t,
				SelectMGroup2T(manager, p0, m.tabs, \i, id, tab, p2 -> {
					tabEn = feq2(m.selected, i);

					(\ -> MComponentGroup2T(manager, p2, "MTabsContent", [MEnabled(tabEn), MFocusEnabled(tabEn), MFocusId(const(id))], \p3 ->
						m2t(MAlignStart(tab.content), p3)
					))
					|> (\makeTabContent ->
						if (preRender)
							TIfPreRender(tabEn, makeTabContent(), TEmpty(), false)
						else if (noDispose)
							TRenderOnce(tabEn, makeTabContent)
						else
							TShowLazy(tabEn, makeTabContent)
					)
				})
				|> (\t2 : Tropic -> if (noScroll) t2 else MScroll2T(manager, p0, MScroll(t2, TFillXY(), [contentScrollInspect]), m2t))
			)
			|> (\tabsContent -> eitherMap(tabWidth, \w -> TAvailableWidth(tabsContent, const(w.width)), tabsContent))
			|> (\tabsContent -> TFrame(0., 0., tabsContentBgStyle, tabsContent))
		)
	)
	|> (\t ->
		MComponentGroup2T(
			manager,
			parent,
			"MDynamicTabs",
			[
				IScriptBehaviour("selected", m.selected, ISInputValue(map(fgetValue(m.tabs), \tab -> tab.text), "index", true)),
				AccessRole("composite")
			],
			t
		)
	)
}

MTabsText(
	manager : MaterialManager,
	parent : MFocusGroup,
	text : string,
	minWidth : double,
	showTooltip : MShowTooltip,
	tabsFontStyle : MFontStyle,
	itemsColor : Maybe<MColor>,
	m2t : (Material, MFocusGroup) -> Tropic
) -> Tropic {
	textLen = strlen(text);

	// itemsColor2 : Maybe<MTextStyle> = itemsColor; // does not help neko
	itemsColor2 : Maybe<MTextStyle> = switch (itemsColor) {
		Some(color): Some(color);
		None(): None();
	}
	style : [MTextStyle] = maybeArrayPush([tabsFontStyle], itemsColor2);

	if (textLen < floor(minWidth / 14.))
		TCenterX(MText2T(parent, toUpperCase(text), style))
	else {
		newText = splitText(toUpperCase(text));

		if (newText.second != "") {
			newTabsFontStyle = if (tabsFontStyle == defaultTabFontStyle) {
				MCaptionColumnSelected()
			} else tabsFontStyle;
			newTextStyle : [MTextStyle] = maybeArrayPush([newTabsFontStyle], itemsColor2);

			TLines2(
				MText2T(parent, newText.first, newTextStyle)
				|> TCenterX,
				(if (textLen < floor(minWidth / 7.))
					MText2T(parent, newText.second, newTextStyle)
				else
					MEllipsisText2T(
						manager,
						parent,
						MEllipsisText(toUpperCase(newText.second), arrayPush(newTextStyle, showTooltip)),
						m2t
					)
				) |> TCenterX
			)
		} else
			MEllipsisText2T(manager, parent, MEllipsisText(toUpperCase(text), arrayPush(style, showTooltip)), m2t)
			|> TCenterX
	}
}

splitText(text : string) -> Pair<string, string> {
	splitText2(text, strLeft(text, 18), strRight(text, 18))
}

splitText2(text : string, text1 : string, text2 : string) -> Pair<string, string> {
	if (endsWith(text1, " ")) {
		Pair(strLeft(text, strlen(text1) - 1), strRight(text, strlen(text1)))
	} else if (startsWith(text2, " ")) {
		Pair(strLeft(text, strlen(text2)), strRight(text, strlen(text2)))
	} else {
		if (strlen(text1) == 0 || strlen(text2) == 0)
			Pair(text, "")
		else
			splitText2(
				text,
				strLeft(text, strlen(text1) - 1),
				strRight(text, strlen(text1) - 1)
			)
	}
}

MTabAnimation(
	trans : Point,
	trop : double,
	scroll : double);

MTabsBottomLineInfo(
	width : double,
	tabsWidths : [double],
	selected : int,
	order : [int]);

MTabsBottomLine(manager : MaterialManager, parent : MFocusGroup, tabsWidths : DynamicBehaviour<[double]>, selected : Transform<int>, order : Maybe<MListReorder>,
	scrollPosition : DynamicBehaviour<Point>, inspectScroll : TScrollInspectVisible, tabsHeight : DynamicBehaviour<double>,
	indicatorColor : MColor, indicatorAbove : bool
) -> Tropic {

	prevTrans = ref 0.;
	prevTropW = ref 0.;
	prevScroll = ref 0.;
	prevS = ref fgetValue(selected);
	trans = make(zeroPoint);
	tropW = make(0.);
	lineHeight = 2.0;
	isRTL = parent.rtl;
	orderedTabsWidths = fselect(tabsWidths, FLift(arrayRTL2(isRTL)));

	trigger =
		fselect4(
			fwidth(inspectScroll.widthHeight),
			orderedTabsWidths,
			eitherFn(
				order,
				\__ -> selected,
				\ -> if (isRTL)
						fsubtracti(fsubtracti(flength(orderedTabsWidths), selected), const(1))
					else
						selected
			),
			eitherMap(order, \or -> fselect(or.order, FLift(arrayRTL2(isRTL))), const([])),
			\wd, twds, sel, ord -> MTabsBottomLineInfo(wd, twds, sel, ord)
		);

	MEasingAnimation(
		manager,
		parent,
		const(easingTransitionDuration),
		const(easingStandartCurve),
		trigger,
		\info : MTabsBottomLineInfo -> {
			wds = info.tabsWidths;
			sel = info.selected;
			ord = findiDef(info.order, eq(sel), sel);

			if (length(wds) == 0)
				nextDistinct(tropW, 0.);

			if (sel >= 0 && sel < length(wds)) {
				prevTrans := getValue(trans).x;
				prevTropW := getValue(tropW);
				prevScroll := getValue(scrollPosition).x;

				fullW = dsum(wds);
				nTransWidth = generate(0, ord, \i ->
					wds[elementAt(info.order, i, i)]
				)
				|> dsum;
				nTrop = wds[ord];

				tAnim = MTabAnimation(
					Point(nTransWidth, 0.),
					nTrop,
					forceRange(0., nTransWidth - info.width / 2. + nTrop / 2., fullW - info.width)
				);

				if (^prevS == sel || !parent.theme.enableAnimations) {
					nextDistinct(trans, tAnim.trans);
					nextDistinct(tropW, tAnim.trop);
					nextDistinct(scrollPosition, Point(tAnim.scroll, 0.));

					None()
				} else {
					prevS := sel;

					Some(tAnim);
				}
			} else {
				None()
			}
		},
		\tAnim, p -> {
			nextDistinct(trans, Point(lerp(^prevTrans, tAnim.trans.x, p), 0.));
			nextDistinct(tropW, lerp(^prevTropW, tAnim.trop, p));
			nextDistinct(scrollPosition, Point(lerp(^prevScroll, tAnim.scroll, p), 0.));
		},
		[MAutoStart()],
		TSizedWidth(tropW, lineHeight)
		|> addTBackground(indicatorColor)
		|> (\t -> TTranslate(trans, t))
	)
	|> makeTropicConstantHeight(Some(lineHeight))
	|> (\t -> if (indicatorAbove) t else TTranslate(fselect(tabsHeight, FLift(\th -> Point(0., th - lineHeight))), t))
}

// b styles override sty
mergeTGraphicsStyles(a : [TGraphicsStyle], b : [TGraphicsStyle]) -> [TGraphicsStyle] {
	bFillOpacity = extractStruct(b, FillOpacity(1.)).opacity;
	bStrokeOpacity = extractStruct(b, StrokeOpacity(1.)).opacity;

	fold(b, a, \acc, st ->
		switch (st : TGraphicsStyle) {
			RadialGradient() : if (bFillOpacity > 0.) replaceStruct(acc, st) else acc;
			Fill(__) : if (bFillOpacity > 0.) replaceStruct(acc, st) else acc;
			GradientFill(__, __) : if (bFillOpacity > 0.) replaceStruct(acc, st) else acc;

			Stroke(__) : if (bStrokeOpacity > 0.) replaceStruct(acc, st) else acc;
			StrokeLineGradient(__, __) : if (bStrokeOpacity > 0.) replaceStruct(acc, st) else acc;
			StrokeWidth(__) : if (bStrokeOpacity > 0.) replaceStruct(acc, st) else acc;

			TStyleWithSelector(__, __) : replaceStruct(acc, st);
			TStyle(__) : replaceStruct(acc, st);

			FillOpacity(opacity) : if (opacity > 0.) replaceStruct(acc, st) else acc;
			StrokeOpacity(opacity) : if (opacity > 0.) replaceStruct(acc, st) else acc;
		}
	)
}
