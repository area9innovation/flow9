import material/internal/material_textinput;

export {
	MSlider2T(manager : MaterialManager, parent : MFocusGroup, m : MSlider, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MSliderThumb(
	percent : DynamicBehaviour<double>,
	active : DynamicBehaviour<bool>,
	focused : DynamicBehaviour<bool>,
	hovered : Transform<bool>,
	min : Transform<double>,
	max : Transform<double>,
	restrictPercent : (double) -> double,
	isStart : bool
);

MSlider2T(manager : MaterialManager, parent : MFocusGroup, m : MSlider, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	sliderId = makeTropicTag(manager);
	color : MColor = extractMColor(parent, m.style, MAccentColor());
	inactiveColorM : Maybe<MColor> = maybeMap(
		tryExtractStruct(m.style, MInactiveAreaColor(MAccentColor())),
		\ic -> MThemeColor2MColor(parent, ic.color)
	);
	itemsColor = tryExtractStruct(m.style, MItemsColor(MWhite()));
	iconLeft = extractStruct(m.style, MSliderIconLeft("")).name;
	iconRight = extractStruct(m.style, MSliderIconRight("")).name;
	sliderRange = extractStruct(m.style, MSliderRange(0., 1.));
	sliderStep = extractStruct(m.style, MSliderStep(-1.)).value;
	sliderSteps = extractStruct(m.style, MSliderSteps([])).steps;
	showValueInput = extractStruct(m.style, MSliderShowValueInput(false)).show;
	valueEnabled = extractStruct(m.style, MSliderShowValueInputEnabled(const(true))).enabled;
	isDiscrete = extractStruct(m.style, MSliderDiscrete(sliderStep > 0.)).discrete;
	showValue = extractStruct(m.style, MSliderShowValue(isDiscrete)).show;
	showDiscreteValues = tryExtractStruct(m.style, MSliderShowDiscreteValues(const(false)));
	mWidth = extractStruct(m.style, MWidth(-1.)).width;
	fullWidth = mWidth < 0.;
	enabled = fand(parent.enabled, extractStruct(m.style, MEnabled(const(true))).enabled);
	chooseRange = tryExtractStruct(m.style, MSliderChooseRange(make(0.), make(0.)));
	sliderUndefinedM : Maybe<MSliderUndefined> = tryExtractStruct(m.style, MSliderUndefined(make(true)));
	condensed = extractStruct(m.style, MCondensed(false)).condensed;
	downAnywhere = extractStruct(m.style, MMouseDown(make(false))).down;
	down2 = fand(downAnywhere, enabled);
	sliderTooltip = tryExtractStruct(m.style, MSliderTooltip(\__ -> ""));
	thumbRadius = extractStruct(m.style, MSliderThumbRadius(const(if (condensed) 6.0 else 8.0))).radius;
	mousePosition : MMousePosition = extractStruct(m.style, MMousePosition(make(zeroPoint)));
	point = mousePosition.point;
	hover = make(false);

	isRTL = parent.rtl;
	lightBackground = getLightBackground(parent);

	minMax = sliderRange.max - sliderRange.min;
	stepPercent = if (sliderStep > 0.) sliderStep / minMax else 0.05;

	sliderWidth = make(mWidth);
	percent = make(0.);
	editString = make("");
	drag = ref false;
	tooltipText = make("");
	cursorPercent = fdivide(fsubtract(fpointX(point), const(12.0)), sliderWidth) |> (\p -> if (isRTL) fsubtract(const(1.), p) else p);

	percent2value = \p -> sliderRange.min + p * minMax;
	percent2strvalue = \p -> d2st(percent2value(p), 2);
	value2percent = if (minMax != 0.) \v -> (v - sliderRange.min) / minMax else \v -> 0.;

	snapPercent = \p ->
		if (length(sliderSteps) > 0 && isDiscrete)
			percent2value(p)
			|> (\f ->
				fold(sliderSteps, Pair(-1.0, -1.0), \acc, ss ->
					if (acc.second >= 0.0) {
						if (acc.second > abs(ss - f))
							Pair(ss, abs(ss - f))
						else
							acc
					} else {
						Pair(ss, abs(ss - f))
					}
				).first
			)
			|> value2percent
		else if (sliderStep > 0. && isDiscrete)
			roundTo(forceRange(p, 0.0, 1.0) * minMax, sliderStep) + sliderRange.min
			|> (\f -> if (f > sliderRange.max) f - sliderStep else if (f < sliderRange.min) f + sliderStep else f)
			|> value2percent
		else
			forceRange(p, 0.0, 1.0);

	setNewPercent = \thumb, prc ->
		nextDistinct(thumb.percent, snapPercent(thumb.restrictPercent(prc)));


	discreteValues =
		if (length(sliderSteps) > 0 && isDiscrete)
			map(sliderSteps, \ss -> (ss - sliderRange.min) / minMax)
		else if (sliderStep > 0. && minMax != 0. && minMax / sliderStep < 2000. && isDiscrete) {
			mValue = sliderRange.min;
			generate(
				0,
				floor(minMax / sliderStep) |> (\f -> if ((mValue + sliderStep * i2d(f)) <= sliderRange.max) f + 1 else f),
				\i -> (sliderStep * i2d(i)) / minMax
			);
		} else
			[];

	focusGroupState =
		concat(
			extractMComponentGroupState(m.style),
			[
				IScriptBehaviour("downAnywhere", downAnywhere, ISInteractionEvent()),
				IScriptBehaviour("value", m.value, ISInputValue([], "double", true)),
				IScriptBehaviour("minValue", make(sliderRange.min), ISInputValue([], "double", true)),
				IScriptBehaviour("maxValue", make(sliderRange.max), ISInputValue([], "double", true))
			]
			|> (\f : [IScriptBehaviour] ->
				eitherMap(
					sliderUndefinedM,
					\su : MSliderUndefined ->
						arrayPush(f, IScriptBehaviour("undefined", su.undefined, ISInputValue([], "bool", false))),
					f
				)
			)
		);

	addIcon = \title, left -> \t ->
		if (title != "") {
			iconStyle = \en -> concatA([
				eitherMap(itemsColor, \ic -> [ic.color], []),
				if (en) [] else [MIconDisabled()]
			]);
			icon = MIfLazy2T(manager, parent, enabled, \en, p -> MIcon2T(p, title, iconStyle(en)), true);
			TBaselineCols2Dir(icon, t, left == isRTL)
		}
		else
			t;

	sliderUndefined = eitherMap(sliderUndefinedM, \su -> su.undefined, const(false));
	switchOffUndefined = \ -> maybeApply(sliderUndefinedM, \su -> nextDistinct(su.undefined, false));

	customThumb : Maybe<MCustomThumb> = tryExtractStruct(m.style, MCustomThumb(\__, __ -> TEmpty()));

	mkCustomThumb : Maybe<(Transform<bool>, Transform<bool>) -> Tropic> =
		maybeMap(customThumb, \thumb -> \down, focused ->
			TLet(
				"thumb",
				m2t(thumb.mkThumb(down, focused), parent),
				TShift(TDisplay("thumb"), TScale(const(Factor(0.5, 1.0)), TGhost("thumb")))
			)
		);

	customBar = tryExtractStruct(m.style, MCustomBar(\__, __, __ -> TEmpty()));

	barHeight0 = make(0.);
	barHeight = eitherMap(customBar, \__ -> barHeight0, const(4.));
	activeItemStyle = \en -> [MFill(if (en) color else MGrey(400))];
	unactiveItemStyle = \en ->
		eitherFn(inactiveColorM, \ic -> [MFill(ic), FillOpacity(0.3)], \-> mDisabledStyle(lightBackground))
		|> (\st -> if (en) st else replaceStruct(st, FillOpacity(extractStruct(st, FillOpacity(0.0)).opacity / 4.0)));
	outlinedStyle = replaceStruct(mDisabledStyle(lightBackground), FillOpacity(defaultDisabledItemOpacity(lightBackground)));

	makeCircleThumb = \foc, st -> {
		radius =
			if (condensed)
				fif(fmax3(foc.focused, fOr(hover, foc.hover), down2), thumbRadius, const(0.))
			else
				thumbRadius;

		circleStyle = fselect(foc.enabled, FLift(st));
		setMarker = \t -> t |> MHintMarker(manager, foc, false);

		TCenteredCircle(foc.parent, radius, circleStyle, setMarker)
		|> (\f -> TBorderT(radius, radius, zero, zero, f))
		|> (\f -> TShadowShape(foc.parent, const(3.0), f, RectangleShape("MSlider")))
		|> (\f -> TTranslate(fpoint(fnegate(radius), fnegate(radius)), f))
		|> (\f -> TShow(fneq(radius, 0.0), f))
	}

	makeValueLabel = \foc, thumbPercent, style -> {
		thumbRadiusT =
			if (condensed)
				fif(fmax3(foc.focused, fOr(hover, foc.hover), down2), thumbRadius, const(0.))
			else
				thumbRadius;

		radius = 14.;
		dsqrt2 = 1. / sqrt(2.);

		label =
			TSelect(thumbPercent, \prc ->
				MText2T(foc.parent, percent2strvalue(prc), [MCustomFont(radius, "Roboto", 1.), MWhite()])
			)
			|> (\t -> TCenterIn(t, TFixed(2.0 * radius, 2.0 * radius)));

		TGroupSameMetrics([
			TSelect(style, \st -> TCircle(radius, st)),
			TDynamicGraphics(fselect(thumbRadiusT, FLift(\smallradius -> [
				MoveTo(radius, radius),
				LineTo((1. + dsqrt2) * radius, (1. + dsqrt2) * radius),
				CubicBezierTo(1.05 * radius, 2.75 * radius, 1.05 * radius, 2.1 * radius),
				CubicBezierTo(radius + dsqrt2 * smallradius, 3. * radius + (1. - dsqrt2) * smallradius, 1.05 * radius, 3. * radius),
				LineTo(radius, 3. * radius + smallradius),
				LineTo(radius - dsqrt2 * smallradius, 3. * radius + (1. - dsqrt2) * smallradius),
				CubicBezierTo(0.95 * radius, 2.75 * radius, 0.95 * radius, 3. * radius),
				CubicBezierTo((1. - dsqrt2) * radius, (1. + dsqrt2) * radius, 0.95 * radius, 2.1 * radius),
				ClosePath()
			])), style),
			label
		])
		|> (\t -> TTranslate(fselect(thumbRadiusT, FLift(\smallradius -> Point(-radius, -3. * radius - smallradius))), t))
	}

	makeThumb = \thumb, sliderFoc, style -> {
		name = "MSlider";
		activeU : Transform<bool> = thumb.active;
		thumbPoint = fselect2(thumb.percent, sliderWidth, FLift2(\p, sw -> Point((if (isRTL) 1. - p else p) * sw, 0.)));
		focused = make(false);
		focusDown = make(false);
		haloRadius = fmultiply(thumbRadius, const(2.0));

		MComponent2T(manager, sliderFoc, name,
			[
				AccessRole("slider"),
				FAccessAttribute("aria-valuenow", fd2s(fselect(thumb.percent, FLift(percent2value)))),
				FAccessAttribute("aria-valuemin", fd2s(fselect(thumb.min, FLift(percent2value)))),
				FAccessAttribute("aria-valuemax", fd2s(fselect(thumb.max, FLift(percent2value)))),
				extractStruct(m.style, MRippleType(const(MRippleCenter()))),
				MRippleColor(const(color)),
				MMouseDown(focusDown),
				extractStruct(m.style, MHighlightOnFocus(const(true))),
				extractStruct(m.style, MHighlightOnHover(const(!condensed))),
				extractStruct(m.style, MHighlightOnSelect(const(!condensed))),
				MRippleSelected(thumb.hovered),
				MRippleTrigger(if (condensed) const(false) else activeU),
				MPassClicks(),
				MFocused(thumb.focused),
				MCursorShape(const(DefaultCursor())),
				extractStruct(m.style, MButtonTitle(const(name)))
			], \foc -> {
				onKeyDown = \h, ke ->
					if (!h && fgetValue(sliderFoc.keysEnabled) && fgetValue(foc.focused)) {
						if (ke.utf == "left") { setNewPercent(thumb, getValue(thumb.percent) - stepPercent); true }
						else if (ke.utf == "right") { setNewPercent(thumb, getValue(thumb.percent) + stepPercent); true }
						else false
					} else h;

				eitherFn(mkCustomThumb, \ct -> ct(thumb.active, foc.focused), \ -> {
					circle = makeCircleThumb(foc, style);
					if (showValue)
						TGroup2(
							makeValueLabel(
								foc,
								thumb.percent,
								const(style(true))
							)
							|> (\t -> TShow(fand(foc.enabled, fOr(activeU, foc.focused)), t)),
							circle
						)
					else circle
				})
				|> (\t -> TInteractive([KeyDown2(onKeyDown)], t))
				|> (\t ->
					TConstruct(
						[
							\ -> {
								if (fgetValue(foc.focused)) {
									switchOffUndefined();
								}

								nop;
							}
						],
						t
					)
				)
				|> (\t -> TShow(fif(sliderUndefined, fOr(hover, foc.focused), const(true)), t))
				|> (\t -> TBorderT(haloRadius, haloRadius, zero, zero, t))
				|> (\t -> TFixSize(t, TSized(fwh(fmultiply(haloRadius, const(2.0)), fmultiply(haloRadius, const(2.0))))))
			},
			m2t
		)
		|> (\t -> TTranslate(fpoint(fnegate(haloRadius), fnegate(haloRadius)), t))
		|> (\t -> TBorderT(zero, fdivide(barHeight, const(2.)), zero, zero, t))
		|> (\t ->
			TConstruct(
				[
					makeSubscribe2Trigger(activeU, cursorPercent, \p -> setNewPercent(thumb, p)),
					makeSubscribe2(thumb.active, \act -> if (act) deferred( \ -> nextDistinct(focused, true)))
				],
				t
			)
		)
		|> (\t -> TTranslate(thumbPoint, t));
	}

	makeValueInput = \thumb -> {
		extraTextInputWidth = if (sliderStep <= 0.) 2 else if (sliderStep < 1.) strlen(d2s(sliderStep)) - 1 else 1;
		width = i2d(max(strlen(i2s(floor(sliderRange.min))), strlen(i2s(floor(sliderRange.max)))) + extraTextInputWidth) * 12.;

		strValue = make("");

		MTextInput2T(
			manager,
			parent,
			MTextInput(
				strValue,
				arrayPushMaybe(
					[TextInputType(NumericType()), color, MWidth(width), MNumericStep(const(sliderStep))],
					maybeMap(itemsColor, \ic -> MCustomTextStyle([ic.color]))
				),
				[
					MEnabled(fand(valueEnabled, enabled)),
					MInputFilter(\es, foc -> {
						if (es != "") switchOffUndefined();
						if (foc) es else if (fgetValue(sliderUndefined)) "" else percent2strvalue(getValue(thumb.percent))
					})
				]
			),
			m2t
		)
		|> (\t -> TConstruct([
				make2Subscribe(thumb.percent, sliderUndefined, \p, su ->
					nextDistinct(strValue, if (su) "" else percent2strvalue(p))
				),
				makeSubscribe2(strValue, \sv -> setNewPercent(thumb, value2percent(s2d(sv))))
			], t))
	}

	makeSliderIcon = \title ->
		if (title == "") TEmpty()
		else {
			iconStyle = \en -> concatA([
				eitherMap(itemsColor, \ic -> [ic.color], []),
				if (en) [] else [MIconDisabled()]
			]);
			MIfLazy2T(manager, parent, enabled, \en, p -> MIcon2T(p, title, iconStyle(en)), true)
		}

	sliderBar = \foc, type, prc ->
		TSelect(foc.enabled, \en -> {
			circleGap = if (en || isSome(customThumb)) zero else thumbRadius;
			barLength = fsubtract(fmultiply(prc, sliderWidth), if (type == ActiveBar()) fmultiply(circleGap, const(2.0)) else circleGap);
			border = faddition(fmin(const(0.), barLength), circleGap);
			style = if (type != ActiveBar()) unactiveItemStyle(en) else activeItemStyle(en);

			eitherMap(
				customBar,
				\cb -> TAttachHeight(m2t(cb.makeBar(type, fmax(barLength, const(0.)), style), foc), barHeight0),
				if (condensed)
					TRectangle(style, TSizedWidthHeight(fmax(barLength, const(0.)), barHeight))
				else
					TRounded(2.0, 2.0, 2.0, 2.0, style, TSizedWidthHeight(fmax(barLength, const(0.)), barHeight))
			)
			|> (\t -> TBorderT(if (type == LeftBar()) zero else border, zero, if (type == RightBar()) zero else border, zero, t))
		});

	makeOuterValueLink = \value : DynamicBehaviour<double>, prc ->
		[
			\ -> { nextDistinct(prc, snapPercent(value2percent(getValue(value)))); nop},
			makeSubscribe2(value, \v -> {nextDistinct(prc, snapPercent(value2percent(v))); switchOffUndefined()}),
			makeSubscribe2(fpair(prc, sliderUndefined), \p -> if (!p.second) nextDistinct(value, percent2value(p.first)))
		];

	rangeStartPercent = make(0.);
	rangeEndPercent = make(0.);

	startThumb =
		MSliderThumb(
			rangeStartPercent,
			make(false),
			make(false),
			if (isSome(chooseRange))
				fand(
					fselect(cursorPercent, FLift(\prc -> abs(prc - getValue(rangeStartPercent)) <= abs(prc - getValue(rangeEndPercent)))),
					hover
				)
			else
				hover,
			const(value2percent(sliderRange.min)),
			if (isSome(chooseRange)) rangeEndPercent else const(value2percent(sliderRange.max)),
			\p -> min(p, fgetValue(rangeEndPercent) - (if (isDiscrete) stepPercent else min(0.01, stepPercent))),
			true
		);

	endThumb =
		MSliderThumb(
			rangeEndPercent,
			make(false),
			make(false),
			if (isSome(chooseRange))
				fand(
					fselect(cursorPercent, FLift(\prc -> abs(prc - getValue(rangeStartPercent)) > abs(prc - getValue(rangeEndPercent)))),
					hover
				)
			else
				hover,
			if (isSome(chooseRange)) rangeStartPercent else const(value2percent(sliderRange.min)),
			const(value2percent(sliderRange.max)),
			if (isSome(chooseRange)) \p -> max(p, fgetValue(rangeStartPercent) + (if (isDiscrete) stepPercent else min(0.01, stepPercent))) else idfn,
			false
		);

	addDiscreteValues = \foc -> \f2 ->
		TGroup2(
			f2,
			(\ ->
				map(discreteValues, \v -> {
					tickColor = fselect2(startThumb.percent, endThumb.percent, FLift2(\st, e -> {
						light = if (v >= st && v <= e) isLightMColor(color) else lightBackground;
						MDialogMColor(!light)
					}));
					TTranslate(
						fselect2(sliderWidth, barHeight, FLift2(\w, h -> {x = 2.0 + v * (w - 4.0) - h / 2.; Point(if (isRTL) (w - 4.0) - x else x, 0.)})),
						TSelect(
							tickColor,
							\col ->
								TRounded(1.0, 1.0, 1.0, 1.0, [MFill(col)], TSizedWidthHeight(fsubtract(barHeight, const(2.0)), fsubtract(barHeight, const(2.0))))
						)
						|> (\f3 -> TBorder4(1.0, f3))
					)
				})
				|> TGroup
			)
			|> (\t -> TShowLazy(fand(
					eitherFn(
						showDiscreteValues,
						\sdv -> sdv.show,
						\ -> fand(
							foc.enabled,
							fmax3(fOr(down2, fOr(startThumb.focused, endThumb.focused)), startThumb.active, endThumb.active)
						)
					),
					fselect(sliderWidth, FLift(\w -> i2d(length(discreteValues)) < w / 10.))
				), t
			))
		);

	(\foc : MFocusGroup -> {
		rangeStartPercentU = fif(sliderUndefined, const(0.), rangeStartPercent);
		rangeEndPercentU = fif(fand(sliderUndefined, fnot(fOr(hover, fOr(startThumb.focused, endThumb.focused)))), const(0.), rangeEndPercent);

		leftBar =
			sliderBar(foc, LeftBar(), rangeStartPercentU);
		activeBar =
			sliderBar(foc, ActiveBar(), fsubtract(rangeEndPercentU, rangeStartPercentU));
		rightBar =
			sliderBar(foc, RightBar(), fsubtract(const(1.), rangeEndPercentU));

		concat3(
			[
				TColsDir([leftBar, activeBar, rightBar], isRTL)
				|> addDiscreteValues(foc)
			],
			eitherMap(chooseRange, \__ -> [makeThumb(startThumb, foc, activeItemStyle)], []),
			[
				makeThumb(endThumb, foc, activeItemStyle)
			]
		)
		|> TGroupSameMetrics
		|> TFixWidth(TSizedWidth(sliderWidth, 0.))
		|> (\t -> if (!fullWidth) t else TAttachAvailableWidth(t, sliderWidth))
		|> (\t -> if (condensed) TBorder(0., 7., 0., 7., t) else TBorder(0., 9., 0., 9., t))
	})
	|> (\makeSlider -> MComponentGroup2T(manager, parent, "MSliderContainer", focusGroupState, makeSlider))
	|> (\t -> if (condensed) TBorder(12., 6., 12., 2., t) else TBorder(12., 8., 12., 8., t))
	|> (\t ->
		TCopySize(
			t,
			\tr ->
				TShow(
					enabled,
					TCursor(
						FingerCursor(),
						TInteractive(
							[
								if (mobile)
									TMouseDownGhost(downAnywhere)
								else
									TMouseDown(downAnywhere),
								TMouseXY(point),
								if (mobile)
									TMouseDownGhost(hover)
								else
									TMouseInside(hover, false)
							],
							TFrame(0.0, 0.0, interactiveRectangleStyle, tr)
						)
					)
				),
			false
		)
	)
	|> (\t -> TBorder(-6., 0., -6., 0., t))
	|> (\t -> TConstruct(concat([
		makeSubscribe2(down2, \d ->
			if (d) {
				switchOffUndefined();
				prc = snapPercent(fgetValue(cursorPercent));
				thumb =
					if (isSome(chooseRange) && abs(prc - getValue(rangeStartPercent)) <= abs(prc - getValue(rangeEndPercent)))
						startThumb
					else
						endThumb;

				nextDistinct(thumb.percent, prc);
				nextDistinct(thumb.active, true);
			} else {
				nextDistinct(startThumb.active, false);
				nextDistinct(endThumb.active, false);
			}
		),
		makeSubscribeUns(fOr(startThumb.active, endThumb.active), \active -> {
			if (active) {
				addMInteractionItemId(manager, sliderId);

				[
					makeSubscribe2(point, \p -> {
						if (isCurrentMInteractionItemId(manager, sliderId))
							blockOtherMInteractionItemIds(manager, sliderId);
					})()
				]
			} else {
				[]
			}
		})],
		eitherFn(
			chooseRange,
			\chR -> concat(
				makeOuterValueLink(chR.end, rangeEndPercent),
				makeOuterValueLink(chR.start, rangeStartPercent)
			),
			\ -> makeOuterValueLink(m.value, rangeEndPercent)
		)
	), t))
	|> (\t -> eitherMap(sliderTooltip, \tooltip -> {
			contentW = make(0.);
			posScale = make(zeroPositionScale);

			tooltipText2 = fselect(cursorPercent, FLift(\prc ->
				tooltip.textFn(percent2value(snapPercent(prc)))
			));
			MTooltip2T(
				manager,
				parent,
				MTooltip(
					TPositionScale(posScale, TAttachWidth(t, contentW)),
					MSelect(tooltipText2, \txt -> MText(txt, [])),
					[
						MTooltipAlignment(MTop()),
						MLightBackground(lightBackground),
						MTranslatePosition(fselect3(point, contentW, posScale, \p, cw, ps -> Point((p.x - cw / 2.) * ps.scale.x, 0.))),
						MEnabled(fneq(tooltipText2, ""))
					]
				),
				m2t
			)
		}, t))
	|> (\t -> if (condensed) TBorder(0., -7., 0., -7., t) else TBorder(0., -3., 0., -3., t))
	|> TBorderLeftRight(11.)
	|> (\t -> TBaselineOffset(const(6.), t))
	|> (\t : Tropic -> if (showValueInput) TBaselineColsDir([if (isSome(chooseRange)) makeValueInput(startThumb) else TEmpty(), t, makeValueInput(endThumb)], isRTL) else t)
	|> (\t -> TBaselineColsDir([makeSliderIcon(iconLeft), t, makeSliderIcon(iconRight)], isRTL))
}

mirrorIfRTL(isRTL : bool) -> (double) -> double {
	\value -> if (isRTL) 1.0 - value else value
}

TCenteredCircle(
	parent : MFocusGroup,
	radius0 : Transform<double>,
	style : Transform<[TGraphicsStyle]>,
	setMarker : (Tropic) -> Tropic
) -> Tropic {

	radius = faddition(radius0, const(1.));

	TSelect2(radius, style, \r, st -> TCircle(r, st))
	|> setMarker
	|> (\t -> TBorderT(fnegate(radius), fnegate(radius), zero, zero, t))
}