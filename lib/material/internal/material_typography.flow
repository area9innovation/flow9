import material/internal/material_theme;
import material/internal/mstring;

export {
	// Will take care of font size, color opacity, interline spacing based on guidelines. Give it
	// pure white or black as color
	MText2T(parent : MFocusGroup, text : string, style : [MTextStyle]) -> Tropic;

	// Will take care of font size, color opacity, interline spacing based on guidelines. Give it
	// pure white or black as color
	MDynamicParagraph2T(parent : MFocusGroup, text : Transform<string>, style : [MParagraphStyle]) -> Tropic;

	extractMTextStyleDef(style : [MParagraphStyle], def : MFontStyleBundle) -> [MTextStyle];
	
	MFontStyleBundle(color : MThemeColor, fontStyle : MFontStyle, enabled : bool);

	MTextStyle2TCharacterStyle(parent : MFocusGroup, text : string, style : [MTextStyle]) -> [TCharacterStyle];
	MTextStyle2CharacterStyle(parent : MFocusGroup, style : [MParagraphStyle]) -> [CharacterStyle];

	MCharacterStyle2MTextStyle(style : [CharacterStyle]) -> [MTextStyle];
	MFontStyle2MFont(parent : MFocusGroup, style : MFontStyle) -> MFont;
	overrideMTextStylePerAlphabet(parent : MFocusGroup, text: string, styles: [MTextStyle]) -> [MTextStyle];

	style2MTextStyle(style : [?]) -> [MTextStyle];

	setMLang(lang : string) -> void;
	addMLangFontFamily(text : string, style : [TCharacterStyle]) -> [TCharacterStyle];

	// Not recommended for using because fill opacity is affected by text color but not material theme.
	// Use MTextStyle2CharacterStyle or MTextStyle2CharacterStyleDef instead.
	MFontStyle2CharacterStyle(parent : MFocusGroup, style : MFontStyle, darkText : bool) -> [BasicCharacterStyle];

	addTagName(style : [MParagraphStyle]) -> ([TCharacterStyle]) -> [TCharacterStyle];
	updateOnFontWrapper(parent : MFocusGroup, makeTropic : () -> Tropic) -> Tropic;

	getHeadingTagFromFontSize(fontSize : double) -> Maybe<string>;
}

getDisabledTextOpacity(dark : bool) -> double {
	commonMultiplier = \base, new -> new / (1.0 - base);
	l1 = \base, new -> (new - base); // "/1.0" omitted
	l2 = \base, new -> (new - 1.0) / base;
	f = \base, new, text -> { // quadratic interpolation from base opacity and current opacity values
		commonMultiplier(base, new) * (l1(base, new) - text * l2(base, new));
	};
	if (dark) {
		f(disabledItemOpacityDarkBase, ^disabledItemOpacityDark, disabledTextOpacityDark);
	} else {
		f(disabledItemOpacityBase, ^disabledItemOpacity, disabledTextOpacity);
	};
}

currentMLang = ref "";
currentMLangFont = ref "";

MText2T(parent : MFocusGroup, text : string, style : [MTextStyle]) -> Tropic {
	updateOnFontWrapper(parent, \ -> TText(text, MTextStyle2TCharacterStyle(parent, text, style)))
}

MDynamicParagraph2T(parent : MFocusGroup, text : Transform<string>, style : [MParagraphStyle]) -> Tropic {
	mTextStyle = style2MTextStyle(style);
	fontStyle = extractMFontStyleDef(mTextStyle, getFontStyle(parent));
	mWidth = extractStruct(style, MWidth(-1.)).width;

	interlineSpacing = eitherFn(tryExtractStruct(style, InterlineSpacing(0.)), idfn, \ -> MFontStyle2InterlineSpacing(parent, fontStyle));
	paragraphMargin = eitherFn(tryExtractStruct(style, ParagraphMargin(0., 0.)), idfn, \ -> MFontStyle2ParagraphMargin(parent, fontStyle));

	cropLongWords = extractStructMany(style, CropWords(true));

	parStyle =
		concat([ParagraphWidth(const(mWidth)), paragraphMargin, interlineSpacing], cropLongWords)
		|> (\parStyle : [TParagraphStyle] ->
			arrayPush(parStyle, commonAlignment2abs(extractCommonAlignmentFromMParagraphStyles(style), extractStruct(style, SetRTL(parent.rtl)).rtl))
		)
		|> (\parStyle : [TParagraphStyle] -> arrayPushMaybe(parStyle, tryExtractStruct(style, FullWidth())))
		|> (\parStyle : [TParagraphStyle] -> arrayPushMaybe(parStyle, tryExtractStruct(style, Justify())))
		|> (\parStyle : [TParagraphStyle] -> arrayPushMaybe(parStyle, tryExtractStruct(style, ParagraphMetrics(nop1))));

	makeTParagraph = \ -> {
		characterStyle = MTextStyle2TCharacterStyle(parent, fgetValue(text), mTextStyle);
		TParagraph(text, concat(characterStyle, parStyle))
	};
	updateOnFontWrapper(parent, makeTParagraph)
}

MTextStyle2TCharacterStyle(parent : MFocusGroup, text : string, style : [MTextStyle]) -> [TCharacterStyle] {
	dynamicColor = maybeMap(
		tryExtractStruct(style, MDynamicColor(const(MWhite()))),
		\dc -> FDynamicColor(fselect(dc.color, FLift(\col -> MThemeColor2int(parent, col))))
	);

	MTextStyle2CharacterStyleDef(parent, style, MFontStyleBundle(getTextColor(parent), getFontStyle(parent), true))
	|> (\st -> arrayPush(st, extractStruct(style, SetRTL(parent.rtl))))
	|> (\st -> eitherMap(dynamicColor, \dc -> arrayPush(st, dc), st))
	|> (\st -> addMLangFontFamily(text, st))
	|> addTagName(style)
	|> addLangAttribute(style);
}

addTagName(style : [MParagraphStyle]) -> ([TCharacterStyle]) -> [TCharacterStyle] {
	\characterStyle ->
		eitherFn(
			tryExtractStruct(style, TagName("")),
			\tn -> arrayPush(characterStyle, tn),
			\ -> {
				fontSize = extractStruct(characterStyle, FontSize(0.0)).size;

				arrayPushMaybe(
					characterStyle,
					maybeMap(
						getHeadingTagFromFontSize(fontSize),
						\tag -> TagName(tag)
					)
				)
			}
		)
}

getHeadingTagFromFontSize(fontSize : double) -> Maybe<string> {
	if (fontSize >= 96.0) {
		Some("h1");
	} else if (fontSize >= 60.0) {
		Some("h2");
	} else if (fontSize >= 48.0) {
		Some("h3");
	} else if (fontSize >= 34.0) {
		Some("h4");
	} else if (fontSize >= 24.0) {
		Some("h5");
	} else if (fontSize >= 20.0) {
		Some("h6");
	} else {
		None();
	}
}

addLangAttribute(style : [MParagraphStyle]) -> ([TCharacterStyle]) -> [TCharacterStyle] {
	\characterStyle ->
		eitherMap(
			tryExtractStruct(style, LangAttribute(const(""))),
			\la -> arrayPush(characterStyle, la),
			characterStyle
		)
}

updateOnFontWrapper(parent : MFocusGroup, makeTropic : () -> Tropic) -> Tropic {
	eitherFn(parent.theme.fontWrapper, \wrapper -> TSelect(wrapper, \__ -> makeTropic()), makeTropic);
}

extractMTextStyleDef(style : [MParagraphStyle], def : MFontStyleBundle) -> [MTextStyle] {
	bundle = extractMFontStyleBundle(style, def);

	[bundle.color, bundle.fontStyle]
	|> (\st -> if (bundle.enabled) st else arrayPush(st, MTextDisabled()))

}

extractMFontStyleBundle(style : [MParagraphStyle], def : MFontStyleBundle) -> MFontStyleBundle {
	fold(style, def, \acc : MFontStyleBundle, st : MParagraphStyle ->
		switch (st : MParagraphStyle) {
			MThemeColor() : MFontStyleBundle(acc with color = st);
			MFontStyle() : MFontStyleBundle(acc with fontStyle = st);
			MTextDisabled() : MFontStyleBundle(acc with enabled = false);
			default : acc;
		}
	)
}

extractMFontStyleDef(style : [MParagraphStyle], def : MFontStyle) -> MFontStyle {
	fold(style, def, \acc : MFontStyle, st : MParagraphStyle ->
		switch (st : MParagraphStyle) {
			MFontStyle() : st;
			default : acc;
		}
	)
}

MTextStyle2CharacterStyle(parent : MFocusGroup, style : [MParagraphStyle]) -> [CharacterStyle] {
	MTextStyle2CharacterStyleDef(parent, style, MFontStyleBundle(if (getLightBackground(parent)) MBlack() else MWhite(), MBody(), true))
}

MTextStyle2CharacterStyleDef(parent : MFocusGroup, style : [MParagraphStyle], def : MFontStyleBundle) -> [CharacterStyle] {
	extractMFontStyleBundle(style, def)
	|> (\bundle : MFontStyleBundle -> {
		intColor = MThemeColor2int(parent, bundle.color);
		font = MFontStyle2MFont(parent, bundle.fontStyle);
		wrappedFont = eitherMap(
			parent.theme.fontWrapper,
			\wrapper -> fgetValue(wrapper).wrapper(font, intColor, bundle.enabled),
			font
		);
		arrayPush(
			MFont2CharacterStyle(wrappedFont, intColor == black)
			|> (\characterStyle ->
				if (bundle.enabled)
					arrayPushMaybe(characterStyle, tryExtractStruct(style, FillOpacity(1.0)))
				else
					replaceStruct(characterStyle, extractStruct(style, FillOpacity(getDisabledTextOpacity(intColor == black))))
			),
			Fill(
				if (bundle.enabled)
					intColor
				else if (rgb2cielab(int2rgb(intColor)).l < 50.)
					black
				else
					white
			)
		)
	})
	|> (\characterStyle ->
		eitherMap(
			tryExtractStruct(style, Underlined([])),
			\un ->
				arrayPush(
					characterStyle,
					Underlined(
						replaceStructMany(un.style,
							[
								extractStruct(un.style, Stroke(extractStruct(characterStyle, Fill(black)).color)),
								extractStruct(un.style, StrokeOpacity(extractStruct(characterStyle, FillOpacity(1.)).opacity)),
								extractStruct(un.style, StrokeWidth(max(1., extractStruct(characterStyle, FontSize(1.)).size / 10.)))
							]
						)
					)
				),
			characterStyle
		)
	)
	|> (\characterStyle -> arrayPush(characterStyle, extractStruct(style, EscapeHTML(true))))
	|> (\characterStyle -> arrayPushMaybe(characterStyle, tryExtractStruct(style, LetterSpacing(0.0))))
	|> (\characterStyle -> arrayPushMaybe(characterStyle, tryExtractStruct(style, WordSpacing(zero))))
}

MFont2CharacterStyle(mcf : MFont, darkText : bool) -> [BasicCharacterStyle] {
	[
		FontSize(mcf.size),
		FontFamily(mcf.family),
		FillOpacity(if (darkText) mcf.darkOpacity else mcf.lightOpacity)
	];
}

// https://material.io/guidelines/style/color.html#color-text-background-colors
MFontStyle2CharacterStyle(parent : MFocusGroup, style : MFontStyle, darkText : bool) -> [BasicCharacterStyle] {
	MFont2CharacterStyle(MFontStyle2MFont(parent, style), darkText);
}

// Reverse function for special cases
MCharacterStyle2MTextStyle(style : [CharacterStyle]) -> [MTextStyle] {
	fontFamily = ref "Roboto";
	fontSize = ref 14.0;
	fill = ref black;
	fillOpacity = ref primaryTextOpacityDark;

	iter(style, \s ->
		switch (s) {
			FontFamily(name) : fontFamily := name;
			FontSize(size) : fontSize := size;
			Fill(col) : fill := col;
			FillOpacity(op) : fillOpacity := op;
			default : {}
		}
	);

	[MCustomColor(^fill), MCustomFont(^fontSize, ^fontFamily, ^fillOpacity)]
}

MFontStyle2MFont(parent : MFocusGroup, style : MFontStyle) -> MFont {
	switch (style : MFontStyle) {
		MFont(__, __, __, __, __, __): style;
		MThemedFont(): MThemedFont2MFont(parent, style);
	}
}

overrideMTextStylePerAlphabet(parent : MFocusGroup, text: string, styles: [MTextStyle]) -> [MTextStyle] {
	alphabet = detectAlphabet(text);
	if (alphabet == "arb") {
		map(styles, \s -> {
			switch (s) {
				MFontStyle(): {
					font = MFontStyle2MFont(parent, s);
					fsize = FontSize(font.size);
					ffamily = FontFamily(font.family);
					charStyles = applyAlphabetStyles(detectAlphabet(text), [fsize, ffamily]);

					MFont(
						extractStruct(charStyles, fsize).size,
						extractStruct(charStyles, ffamily).name,
						font.darkOpacity,
						font.lightOpacity,
						font.paragraphMargin,
						font.interlineSpacing
					);
				}
				default: s;
			}
		})
	} else styles
}
MFontStyle2ParagraphMargin(parent : MFocusGroup, style : MFontStyle) -> ParagraphMargin {
	switch (style : MFontStyle) {
		MFont(__, __, __, __, paragraphMargin, __): paragraphMargin;
		MThemedFont(): MFontStyle2ParagraphMargin(parent, MThemedFont2MFont(parent, style));
	}
}

MFontStyle2InterlineSpacing(parent : MFocusGroup, style : MFontStyle) -> InterlineSpacing {
	switch (style : MFontStyle) {
		MFont(__, __, __, __, __, interlineSpacing): interlineSpacing;
		MThemedFont(): MFontStyle2InterlineSpacing(parent, MThemedFont2MFont(parent, style));
	}
}

style2MTextStyle(style : [?]) -> [MTextStyle] {
	filtermap(style, \st : flow ->
		switch (st) {
			MTextStyle() : {a : Maybe<MTextStyle> = Some(st); a};
			default : None()
		}
	)
	|> (\arr -> arrayPush(arr, extractStruct(style, EscapeHTML(true))))
}

setMLang(lang : string) -> void {
	currentMLang := lang;

	currentMLangFont :=
		if (lang == "ja") {
			getJapaneseFont().name
		} else if (lang == "ko") {
			getKoreanFont().name
		} else if (isChinese(lang)) {
			fontFamily = getChineseFont().name;

			if (fontFamily == "NotoSans")
				"Tahoma"
			else
				fontFamily
		} else {
			""
		}
}

addMLangFontFamily(text : string, style : [TCharacterStyle]) -> [TCharacterStyle] {
	if (^currentMLangFont != "" && containsHanScript(text)) {
		replaceStruct(style, FontFamily(^currentMLangFont))
	} else {
		style
	}
}