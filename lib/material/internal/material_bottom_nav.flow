import material/internal/material_clickable;
import material/internal/material_icons;

export {
	MBottomNav2T(manager: MaterialManager, parent : MFocusGroup, m : MBottomNav) -> Tropic;
}

MBottomNav2T(manager: MaterialManager, parent : MFocusGroup, m : MBottomNav) -> Tropic {
	height = 56.0;
	leftRightBorder = 12.0;
	scrollGap = 160.;
	scrollPoint = extractStruct(m.style, makeTScrollInspectVisible()).topleft;
	scrollShift = ref 0.0;

	numActions = i2d(length(m.actions));
	showAllLabels = contains(m.style, MShowAllLabels()) || numActions <= 3.0;

	fill = extractStruct(m.style, MFill(sameLightMColor(parent)));
	opacity = extractStruct(m.style, FillOpacity(1.0));
	blur = extractStructMany(m.style, Blur([]));

	activeIconColor = extractStruct(m.style, MActiveIconColor(contrastingMColor(parent))).color;
	inactiveIconColorDef = if (activeIconColor == MBlack() || activeIconColor == MWhite()) activeIconColor else MGrey(500);
	inactiveIconColor = extractStruct(m.style, MInactiveIconColor(inactiveIconColorDef)).color;

	screenWidth = make(0.);
	box = TSizedWidth(fdivide(screenWidth, const(numActions)), height);

	action2Material = \i, action -> {
		onClick = extractStruct(action.style, MOnClick(nop)).click;
		TIfLazy(feq(m.selected, i), \active -> {
			iconColor = if (active) activeIconColor else inactiveIconColor;
			iconOpacity = FillOpacity(if (active) 0.87 else 0.54);
			size = if (active) MBody() else MCaption();

			badge = extractStructMany(action.style, MIconCounter(const(0), []));
			icon = MIcon2T(parent, action.iconName, concat(badge, [iconColor, iconOpacity]));
			label =	MText2T(parent, action.label, [size, iconColor]);

			if (showAllLabels || active)
				TLines2(TCenterX(icon),	TCenterX(label))
				|> TCenterY
				|> TBorderLeftRight(leftRightBorder)
				|> (\t -> TAvailable(t, box))
			else
				icon
				|> TBorderLeftRight(leftRightBorder)
				|> (\t -> TCenterIn(t, box))
		})
		|> (\t -> mouseOnDownAround(manager, [MOnClick(\ -> {
				onClick();
				nextDistinct(m.selected, i)
			})], t))
		|> (\t -> TCursor(FingerCursor(), t))
	};

	mapi(m.actions, action2Material)
	|> (\t -> TColsRTL(t, parent.rtl))
	|> (\t -> TGroup2(TFilter(blur, TRectangle([fill, opacity], TFillXH(height))), t))
	|> (\t -> TConstruct([
			makeSubscribe2(scrollPoint, \sp -> {
				e = getValue(m.expander);
				if (sp.y < ^scrollShift - scrollGap && !e) {
					scrollShift := sp.y;
					nextDistinct(m.expander, true);
				} else if (sp.y > ^scrollShift + scrollGap && e) {
					scrollShift := sp.y;
					nextDistinct(m.expander, false);
				} else if (sp.y < ^scrollShift && e || sp.y > ^scrollShift && !e) {
					scrollShift := sp.y;
				}
			})
		],
		t
	))
	|> (\t -> TAnimatedExpander(manager, parent, t, m.expander, [MExpandFromStart()]))
	|> (\t ->
		MComponentGroup2T(
			manager,
			parent,
			"MBottomNav",
			[
				IScriptBehaviour("selected", m.selected, ISInputValue(map(m.actions, \action -> action.label), "index", true)),
				IScriptBehaviour("expander", m.expander, ISInputValue([], "bool", false))
			],
			\__ -> t
		)
	)
	|> TAlignBottom
	|> (\t -> TAttachAvailableWidth(t, screenWidth))
}