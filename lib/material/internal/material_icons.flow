import material/internal/material_typography;
import material/internal/material_mutable;
import material/internal/material_shadow;
import material/internal/material_icons_list;

export {
	MIcon2T(parent : MFocusGroup, name : string, style : [MIconStyle]) -> Tropic;
	standardIconSize = 24.0;

	MAvatar2T(parent : MFocusGroup, imageurl : string, style : [MAvatarStyle]) -> Tropic;
	MLetterIcon2T(manager : MaterialManager, parent : MFocusGroup, m : MLetterIcon) -> Tropic;

	defaultMMenuIcon = "menu";
	defaultMTextInputIcon = "subject";
	defaultMTimePickerIcon = "access_time";
	defaultMDatePickerIcon = "today";
	defaultMSwitchControlIcon = "adjust";

	MAddLabelAndLeftIcon(manager : MaterialManager, parent : MFocusGroup, content : Tropic, style : [flow], highlighted : Transform<bool>,
		labelBorder : double) -> Tropic;

	MAnimatedIcon2T(parent : MFocusGroup, icon1 : MIcon, icon2 : MIcon, value : Transform<bool>, sameSize : bool, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	MHamburgerArrowAnimatedIcon(
		expander : Transform<bool>,
		style : [MIconStyle]) -> Material;

	MHamburgerCloseAnimatedIcon(
		expander : Transform<bool>,
		style : [MIconStyle]) -> Material;

	MPlayPauseAnimatedIcon(
		expander : Transform<bool>,
		style : [MIconStyle]) -> Material;
}

MIcon2T(parent : MFocusGroup, name : string, style : [MIconStyle]) -> Tropic {
	isRTL = parent.rtl;
	type = extractStruct(style, MIconType(MIconFilled())).type;
	iconicFontDef = getMaterialIconicFontByType(type);
	iconicFont =
		eitherFn(
			tryExtractStruct(style, MIconicFont(iconicFontDef)),
			\s : MIconicFont ->
				s.font,
			\ ->
				getIconicFontByFamily(extractStruct(style, FontFamily(iconicFontDef.family)).name)
		);
	// TODO : Load non-default material iconic font on request, not from the start
	iconInfo = getIconInfo(name, iconicFont, type);
	fontFamilyStyle = FontFamily(iconInfo.second);

	// Color logic specified by https://www.google.com/design/spec/style/icons.html#icons-system-icons
	disabled = contains(style, MIconDisabled());
	circleBackground = extractStruct(style, MCircleBackground(MWhite(), 0.));
	defaultIconColor =
		if (circleBackground.size > 0.)
			MContrastingTextColor(circleBackground.color)
		else
			MIconsColor();
	iconColor =
		MThemeColor2MColor(
			parent,
			extractMColor(parent, style, defaultIconColor)
			|> (\iconColor ->
				if (disabled && iconColor != MBlack() && iconColor != MWhite())
					defaultIconColor
				else
					iconColor
			)
		);
	fill = MFill(iconColor);
	opacity =
		extractStruct(
			style,
			if (MColor2int(iconColor) == black) {
				// 0.2052 = 38% opacity of the enabled state
				if (disabled) FillOpacity(0.2052) else FillOpacity(0.54)
			} else {
				if (disabled) FillOpacity(0.5) else FillOpacity(1.)
			}
		);
	size = extractStruct(style, MIconSize(24.0)).size;
	elevation = tryExtractStruct(style, MElevation(zero));
	iconCounter = tryExtractStruct(style, MIconCounter(const(0), []));
	iconDescription = extractStruct(style, MIconDescription("")).description;

	maxSize = max(circleBackground.size, size);
	centerInBox = \t -> TCenterIn(t, TFixed(maxSize, maxSize));

	code = switch (iconInfo.first) {
		MIconGlyphInvariant(code): code;
		MIconGlyphMirrored(ltrCode): ltrCode;
		MIconGlyphAlternated(ltrCode, rtlCode): if (isRTL) rtlCode else ltrCode;
	};
	needsMirror = isRTL && switch (iconInfo.first) {
		MIconGlyphInvariant(__): false;
		MIconGlyphMirrored(__): true;
		MIconGlyphAlternated(__, __): false;
	};

	(
		if (name == "play_arrow_reversed") customPlayArrowReversed(fill, opacity, size)
		else TText(fromCharCode(code), [fill, opacity, FontSize(size), fontFamilyStyle, EscapeHTML(js)])
	)
	|> (\t ->
		if (iconDescription == "") t
		else TAccess([AccessRole("presentation"), FAccessHidden(), TagName("p")], t)
	)
	|> (\f -> TCenterInFixSize(f, TFixed(size, size)))
	|> (\t ->
		if (iconDescription == "") t
		else TAccess([FAccessAttribute("aria-label", const(iconDescription))], t)
	)
	|> (\f ->
		if (needsMirror)
			TScale(const(Factor(-1.0, 1.0)), f)
			|> (\t -> TTranslate(const(Point(size, 0.0)), t))
		else
			f
	)
	|> (\f -> TSize(TFixed(size, size), f))
	|> (\f ->
		eitherMap(
			iconCounter,
			\ic -> {
				enabled = extractStruct(ic.style, MEnabled(const(true))).enabled;
				cColor = extractStruct(ic.style, MRed(500));
				cSize = extractStruct(ic.style, MIconSize(min(size / 3., 12.))).size;
				numBorders = cSize / 3.;
				limited = contains(ic.style, MIconCounterLimited());
				localization = extractStruct(ic.style, LocalizationEnabled(false));

				TDynamicText(
					fselect(ic.value, FLift(\v -> if (limited && v > 99) "99+" else i2s(v))),
					concat(
						MTextStyle2CharacterStyle(
							parent,
							ifArrayPush([MBodyBold(), MTextMColor(cColor)], disabled, MTextDisabled())
						),
						[Resolution(2.0), ParagraphWidth(const(0.)), localization]
					)
				)
				|> (\f2 -> TTweak([TFitZoom(true, false), TAlign(const(0.5), const(0.5))], f2, TFixed((cSize - numBorders) * 2., (cSize - numBorders) * 2.)))
				|> (\f2 -> TBorder4(numBorders, f2))
				|> (\f2 ->
					TGroup2SameMetrics(
						MShape(
							parent,
							[MFill(cColor)],
							TFixed(cSize * 2.0, cSize * 2.0),
							"MIcon"
						),
						f2
					)
				)
				|> (\f2 -> TBorderDir(0., -cSize / 4. * 3., -cSize / 4. * 3., 0., f2, isRTL))
				|> (\f2 -> TTweak([TAlign(const(b2d(!isRTL)), zero)], f2, f))
				|> (\f2 -> TShow(enabled, f2))
				|> (\f2 -> TGroup2SameMetrics(f, f2))
			},
			f
		)
	)
	|> (\f ->
		if (circleBackground.size > 0.0)
			TGroup2SameMetrics(
				MShape(
					parent,
					[opacity, MThemeFill(parent, circleBackground.color)],
					TFixed(circleBackground.size, circleBackground.size),
					"MIcon"
				)
				|> centerInBox,
				f
				|> centerInBox
			)
			|> (\fs ->
				eitherMap(
					elevation,
					\el ->
						TShadowShape(parent, el.elevation, fs, RoundShape()),
					fs
				)
			)
		else
			eitherMap(
				elevation,
				\el ->
					TCopySize(
						f,
						\__ ->
							TSelect(el.elevation, \v -> {
								c = ceil(sqrt(v + 1.) * 1.3);

								generate(-2, c, \i ->
									TText(fromCharCode(code), [Fill(black), FillOpacity(abs(i2d(i)) * 0.4 / i2d(c)), FontSize(size + i2d(i) * 2.), fontFamilyStyle])
									|> (\f2 -> TTranslate(const(Point(-i2d(i), if (i < 0) -i2d(i) else -i2d(i) / 2.)), f2))
								)
								|> TGroup
							}),
						false
					),
				f
			)
	)
	|> (\f -> TBaselineOffset(const(-size / 4. - max((circleBackground.size - size) / 2., 0.)), f))
	|> makeTropicConstant(None(), None())
}

MAvatar2T(parent : MFocusGroup, imageurl: string, style : [MAvatarStyle]) {
	avatarSize = extractStruct(style, MIconSize(36.)).size;

	TZoomToFill(
		TPicture(imageurl, eitherMap(tryExtractStruct(style, OnLoaded(nop)), v2a, [])),
		TFixed(avatarSize, avatarSize),
		false
	)
	|> (\f ->
		if (!contains(style, MNoCrop()))
			TMask(
				f,
				MShape(
					parent,
					[Fill(0x000000), FillOpacity(1.0)],
					TFixed(avatarSize, avatarSize),
					"MAvatar"
				)
			)
		else
			f
	)
	|> (\f -> TBaselineOffset(const(-avatarSize / 4.), f))
	|> makeTropicConstant(None(), None())
}

MLetterIcon2T(manager : MaterialManager, parent : MFocusGroup, m : MLetterIcon) -> Tropic {
	text = m.text;
	iconStyle = m.iconStyle;
	textStyle = m.textStyle;

	color = extractMColor(parent, iconStyle, MPrimaryColor());
	textColor = extractStruct(textStyle, MTextMColor(color));
	size = extractStruct(iconStyle, MIconSize(24.0)).size;

	textStyle2 =
		if (length(extractStructMany(textStyle, MWhite())) == length(textStyle)) {
			[MCustomFont(size / 1.8, "Roboto", if (textColor == MBlack()) 0.86 else 1.)]
			|> (\f : [MTextStyle] -> arrayPush(f, textColor))
		} else {
			replaceStruct(textStyle, textColor);
		};

	opacity = extractStruct(iconStyle, FillOpacity(1.));
	textMetrics = getStaticFormSize(Text(text, MTextStyle2CharacterStyle(parent, textStyle2)));

	TCopySize(
		TCenterIn(
			MText2T(parent, text, textStyle2),
			TFixed(size, size)
		),
		\__ ->
			MShape(
				parent,
				[MFill(color), opacity],
				TFixed(size, size),
				"MLetterIcon"
			),
		false
	)
	|> (\letterIcon -> TBaseline(const(textMetrics.baseline + (size - textMetrics.height) / 2.), letterIcon))
	|> makeTropicConstant(None(), None())
}

MAddLabelAndLeftIcon(manager : MaterialManager, parent : MFocusGroup, content : Tropic, style : [flow], highlighted : Transform<bool>,
	labelBorder : double) -> Tropic {

	MAddLabel(manager, parent, content, style, highlighted, labelBorder)
	|> (\label ->
		eitherMap(
			tryExtractStruct(style, MLeftIcon("", [])),
			\li ->
				(if (li.icon != "") {
					ic = if (isMaterialIcon(li.icon)) li.icon else defaultMMenuIcon;
					TIfLazy2(
						highlighted,
						\v -> MIcon2T(parent, ic, if (v) [MAccentColor()] else []),
						true
					)
				} else
					TEmpty()
				)
				|> (\f2 ->
					TransformTAcc2(\t2a -> {
						acc = f2 |> t2a;

						TAcc(
							FTranslate(const(16.), fnegate(acc.metrics.baseline), acc.form),
							TFormMetrics(
								const(72.),
								zero,
								zero
							),
							const(72.),
							zero,
							const(72.),
							zero,
							zero,
							zero,
							acc.addFillers,
							true,
							true,
							acc.disposers
						)
					})
				)
				|> (\t -> TBaselineCols2Dir(t, label, parent.rtl)),
			label
		)
	)
}

MAddLabel(manager : MaterialManager, parent : MFocusGroup, content : Tropic, style : [flow], highlighted : Transform<bool>, labelBorder : double) -> Tropic {
	outlined = contains(style, MOutlined());
	if (outlined) content
	else eitherMap(
		tryExtractStruct(style, MLabel("")),
		\lbl -> {
			dropDownWarning = tryExtractStruct(style, MDropDownMenuWarning(const(None()), []));
			TIfLazy2(
				highlighted,
				\v -> {
					textColorDef = const(if (v) MAccentColor() else MTextColor());
					textColor =
						eitherMap(dropDownWarning,
							\ddw -> {
								warningColor = extractStruct(ddw.style, MDropDownMenuWarningColor(const(MErrorColor()))).color;
								fif(fselectLift(ddw.text, \txtM -> eitherMap(txtM, \txt -> txt != "", false)), warningColor, textColorDef);
							},
							textColorDef
						);
					
					MText2T(parent, lbl.label, [MCaption(), MDynamicColor(textColor)]);
				},
				true
			)
			|> TBorderBottom(labelBorder)
			|> (\t ->
				TransformTAcc2(\t2a -> {
					acc = t2a(t);
					newMetrics = TFormMetrics(acc.metrics with baseline = acc.metrics.height);
					TAcc(acc with metrics = newMetrics, xConstant = true, yConstant = true)
				})
			)
			|> (\t -> TLines2Dir(t, content, parent.rtl))
		},
		content
	)
}

MAnimatedIcon2T(parent : MFocusGroup, icon1 : MIcon, icon2 : MIcon, value : Transform<bool>, sameSize : bool, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	animIcon =
		if (icon2.name == "menu" && icon1.name == "arrow_back")	Some(MHamburgerArrowAnimatedIcon)
		else if (icon2.name == "menu" && icon1.name == "close")	Some(MHamburgerCloseAnimatedIcon)
		else if (icon2.name == "play_arrow" && icon1.name == "pause") Some(MPlayPauseAnimatedIcon)
		else None();

	eitherMap(animIcon, \makeIcon ->
		makeIcon(value, icon1.style),
		MCommonAnimatedIcon(parent, value, icon1, icon2)
	)
	|> (\m -> m2t(m, parent))
}

MCommonAnimatedIcon(parent : MFocusGroup, value : Transform<bool>, icon1 : MIcon, icon2 : MIcon) -> Material {
	percent = make(b2d(fgetValue(value)));

	content =
		TGroup2(
			TAlpha(fselect(percent, FLift(\p -> max(0., 2. * p - 1.))), MIcon2T(parent, icon1.name, icon1.style)),
			TAlpha(fselect(percent, FLift(\p -> max(0., 1. - 2. * p))), MIcon2T(parent, icon2.name, icon2.style))
		);

	makeScale = \p -> (abs(p) - 0.5) * (abs(p) - 0.5) + 0.75;

	animatedIcon(value, const(easingTransitionDuration), percent, None(), Some(makeScale), content, [FillOpacity(1.)])
}

MHamburgerArrowAnimatedIcon(expander : Transform<bool>, style : [MIconStyle]) -> Material {

	fillColor = extractStruct(style, MBlack());
	rec = TRectangle([MFill(fillColor)], TFixed(18.0, 2.0));
	percent = make(b2d(fgetValue(expander)));

	pos1 = fselect(percent, FLift(\p -> Point(3. + p, 6.0 + 6.*p)));
	rot1 = fmultiply(percent, const(-45.));
	scale13 = fselect(percent, FLift(\p -> Factor(1.0 - p + 8.0 / 9.0 / sqrt(2.0) * p, 1.0)));

	pos2 = fselect(percent, FLift(\p -> Point(3. + 2.*p, 11.0)));
	scale2 = fselect(percent, FLift(\p -> Factor(1.0 - p + 5.0 / 6.0 * p, 1.0)));

	pos3 = fselect(percent, FLift(\p -> Point(3. + p, 18.0 - 6.*p)));
	rot3 = fmultiply(percent, const(45.));

	content =
		TGroup([
			rec
				|> (\f -> TScale(scale13, f))
				|> (\f -> TRotate(rot1, f))
				|> (\f -> TTranslate(pos1, f)),
			rec
				|> (\f -> TScale(scale2, f))
				|> (\f -> TTranslate(pos2, f)),
			rec
				|> (\f -> TTranslate(const(Point(0.0, -2.0)), f))
				|> (\f -> TScale(scale13, f))
				|> (\f -> TRotate(rot3, f))
				|> (\f -> TTranslate(pos3, f)),
		])
		|> (\t -> TBaseline(const(18.), t));

	makeRotate = \p -> (p - 1.) * 180.;

	animatedIcon(
		expander,
		const(easingTransitionDuration),
		percent,
		Some(makeRotate),
		None(),
		content,
		style
	)
}

MHamburgerCloseAnimatedIcon(expander : Transform<bool>, style : [MIconStyle]) -> Material {

	fillColor = extractStruct(style, MBlack());
	rec = TRectangle([MFill(fillColor)], TFixed(18.0, 2.0));
	percent = make(b2d(fgetValue(expander)));

	pos1 = fselect(percent, FLift(\p -> Point(3. + 3. * p - p / sqrt(2.), 6. + 12.*p - p / sqrt(2.))));
	rot1 = fmultiply(percent, const(-45.));
	scale13 = fselect(percent, FLift(\p -> Factor(1.0 - 1. / 18. * p, 1.0)));

	pos2 = fselect(percent, FLift(\p -> Point(3. + 5. * p, 11.0)));
	scale2 = fselect(percent, FLift(\p -> Factor(forceRange(2.0 - 3. * p, 0., 1.), 1.0)));

	pos3 = fselect(percent, FLift(\p -> Point(3. + 3. * p - p / sqrt(2.), 18. - 12.*p + p / sqrt(2.))));
	rot3 = fmultiply(percent, const(45.));

	content =
		TGroup([
			rec
				|> (\f -> TScale(scale13, f))
				|> (\f -> TRotate(rot1, f))
				|> (\f -> TTranslate(pos1, f)),
			rec
				|> (\f -> TScale(scale2, f))
				|> (\f -> TTranslate(pos2, f)),
			rec
				|> (\f -> TTranslate(const(Point(0.0, -2.0)), f))
				|> (\f -> TScale(scale13, f))
				|> (\f -> TRotate(rot3, f))
				|> (\f -> TTranslate(pos3, f)),
		])
		|> (\t -> TBaseline(const(18.), t));

	makeRotate = \p -> (p - 1.) * 180.;

	animatedIcon(
		expander,
		const(easingTransitionDuration),
		percent,
		Some(makeRotate),
		None(),
		content,
		style
	)
}

MPlayPauseAnimatedIcon(expander : Transform<bool>, style : [MIconStyle]) -> Material {

	fillColor = extractStruct(style, MBlack());
	percent = make(b2d(fgetValue(expander)));
	makeRotate = \p -> 90. * p;

	content =
		TGroup2(
			TDynamicGraphics(
				fselect(percent, FLift(\p -> [
					MoveTo(8.0 - 3.0 * p, 5.0 + p),
					LineTo(19.0, 12.0 - 6.0 * p),
					LineTo(19.0, 12.0 - 2.0 * p),
					LineTo(8.0 - 3.0 * p, 12.0 - 2.0 * p),
					ClosePath()
				])),
				const([MFill(fillColor)])
			),
			TDynamicGraphics(
				fselect(percent, FLift(\p -> [
					MoveTo(8.0 - 3.0 * p, 19.0 - p),
					LineTo(19.0, 12.0 + 6.0 * p),
					LineTo(19.0, 12.0 + 2.0 * p),
					LineTo(8.0 - 3.0 * p, 12.0 + 2.0 * p),
					ClosePath()
				])),
				const([MFill(fillColor)])
			)
		);

	animatedIcon(
		expander,
		const(easingTransitionDuration),
		percent,
		Some(makeRotate),
		None(),
		content,
		style
	)
}

animatedIcon(
	expander : Transform<bool>,
	duration : Transform<double>,
	percent : DynamicBehaviour<double>,
	makeRotate : Maybe<(double) -> double>,
	makeScale : Maybe<(double) -> double>,
	content : Tropic,
	style : [MIconStyle]) -> Material {

	iconSize = extractStruct(style, MIconSize(standardIconSize)).size;

	disabled = contains(style, MIconDisabled());
	iconColor =	extractStruct(style, MBlack());
	opacity =
		extractStruct(
			style,
			if (MColor2int(iconColor) == black) {
				if (disabled) FillOpacity(0.38) else FillOpacity(0.54)
			} else {
				if (disabled) FillOpacity(0.5) else FillOpacity(1.)
			}
		).opacity;

	percentR = cloneBehaviour(percent);
	rotate = eitherMap(makeRotate, \fn -> fselect(percentR, FLift(fn)), const(0.));
	scale = eitherMap(makeScale, \fn -> fselect(percentR, FLift(fn)), const(1.));

	MMEasingAnimation(
		duration,
		const(easingLinearOutSlowIn),
		expander,
		\e -> Some(e),
		\e, prc -> {
			newPrc = if (e) prc else prc - 1.;
			next(percentR, newPrc);
			next(percent, abs(newPrc));
		},
		[],
		content
	)
		|> (\m -> MTranslate(const(Point(-standardIconSize / 2., -standardIconSize / 2.)), m))
		|> (\m -> MScale(ffactor2(scale), m))
		|> (\m -> MRotate(rotate, m))
		|> (\m -> MTranslate(const(Point(standardIconSize / 2., standardIconSize / 2.)), m))
		|> (\m -> MFixSizeKeepBaseline(m, TFixed(standardIconSize, standardIconSize)))
		|> (\m -> MScale(ffactor2(const(max(iconSize / standardIconSize, 0.))), m))
		|> (\m -> MAlpha(const(opacity), m))
}

// Special case. Reversed "play_arrow" is shifted on iPad
customPlayArrowReversed(fill : Fill, opacity : FillOpacity, iconSize : double) -> Tropic {
	TGraphics(
		[
			MoveTo(16., 5.),
			LineTo(16., 19.),
			LineTo(5., 12.)
		],
		[fill, opacity]
	)
	|> (\t -> TFixSize(t, TFixed(24., 24.)))
	|> (\t -> TBaseline(const(18.), t))
	|> (\t -> TScale(ffactor2(const(iconSize / 24.)), t))
}