import material/internal/material_textinput;
import material/internal/material_dropdown;
import material/internal/material_list;

export {
	MDynamicDataTable2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicDataTable, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MDynamicDataTable2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicDataTable, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	style = m.style;
	rows = m.rows;

	reorderList = tryExtractStruct(style, MListReorder(make([]), const(false)));
	isReorderEnabled = eitherMap(reorderList, \rl : MListReorder -> fgetValue(rl.enabled), false);
	reorderShowIcon = !contains(style, MListReorderHideIcon());
	// Reserved space for column with drag&drop reorder icon. Icon added at function MListLine2T
	reorderIconSpace = if (isReorderEnabled && reorderShowIcon) 40. else 0.;
	paginationDef = MPagination(make(0), []);
	pagination = if (isSome(reorderList)) paginationDef else extractStruct(style, paginationDef);
	isEmptyPagination = pagination.rowsPerPage == [];
	autoPagination = isNone(reorderList) && isEmptyPagination && contains(style, MPaginationAutoScaling());
	anyTypePagination = !isEmptyPagination || autoPagination;

	singleSelection = tryExtractStruct(style, MSingleSelection(make(-1)));
	multiSelection = tryExtractStruct(style, MMultiSelection(make(makeSet())));

	headerActions = extractStruct(style, MHeaderActions(TEmpty(), []));
	replaceHeader = contains(headerActions.style, MReplaceHeader());

	currentPage = tryExtractStruct(style, MCurrentPage(make(0)));
	scrollPosition = extractStruct(style, MScrollPosition(make(zeroPoint)));

	selection : MListSelection =
		extractStruct(style, MListSelection(
			const(isSome(singleSelection) || isSome(multiSelection)),
			isSome(multiSelection),
			false,
			make([])
		));
	selectionEnabled : MListSelectionEnabled = extractStruct(style, MListSelectionEnabled(const([])));
	hoverEnabled : MHoverEnabled = extractStruct(style, MHoverEnabled(const(true)));
	expandRowEnabled = extractStruct(style, MExpandRow(const(false))).enabled;
	scrollEnabled = extractStruct(style, TScrollEnabled(const(false))).enabled;
	onClick : MOnListClick = extractStruct(style, MOnListClick(const(false), nop1));
	clickEnabled : MClickEnabled = extractStruct(style, MClickEnabled(const(true)));

	rowHeight = extractStruct(style, MRowHeight(if (extractStruct(style, MCondensed(false)).condensed) 32. else 48.)).height;
	headerRowHeight = extractStruct(style, MHeaderRowHeight(rowHeight)).height;
	lineHeight = \isHeader -> if (isHeader) headerRowHeight else rowHeight;
	checkboxSelection = tryExtractStruct(style, MCheckBoxSelection([]));
	checkboxColor = eitherMap(checkboxSelection, \cs -> extractStruct(cs.style, getPrimaryColor(parent)), getPrimaryColor(parent));
	checkboxBorder = \rh -> forceRange((rh - 24.) / 2., 0., 12.);
	checkboxColumnWidth = checkboxBorder(rowHeight) * 3. / 2. + standardIconSize;

	headerStyle = tryExtractStruct(style, MHeaderStyle([], [], []));
	rowBackgroundStyle = tryExtractStruct(style, MRowBackgroundStyle(\__ -> []));
	selectedBgStyle : Maybe<MSelectedBackgroundStyle> = tryExtractStruct(style, MSelectedBackgroundStyle([]));
	hasExtOrderBy = contains(style, MExternalSort());
	crop = !contains(style, MNoCrop());
	goToIndex = tryExtractStruct(style, MGoToIndex(make(-1)));
	fixedRow = tryExtractStruct(style, MFixedRow(const(false), [], []));
	showFixedRow = eitherMap(fixedRow, \fr -> fr.show, const(false));
	showRowNumbers = contains(style, MShowRowNumbers());
	mRowsPerPage = tryExtractStruct(style, MRowsPerPage(make(0)));

	widthByContent = contains(style, MWidthByContent());
	columns0 = m.columns
		|> (\arr -> if (widthByContent) map(arr, \col -> MColumnDynamic(col.header, col.tooltip, col.width, arrayPush(col.style, MWidthByContent()))) else arr)
		|> (\arr -> if (showRowNumbers) concat([MColumn("#", "Row number", 80, [MWidthByContent()])], arr) else arr);
	columns = columns0
		|> (\arr -> if (isSome(checkboxSelection)) concat([MColumn("", "", floor(checkboxColumnWidth), [MMaxWidth(floor(checkboxColumnWidth))])], arr) else arr);
	columnsCount = length(columns);
	isAnyWidthByContent = widthByContent || any(map(columns, \col -> contains(col.style, MWidthByContent())));

	defaultSorted : MSortingDefault = extractStruct(style, MSortingDefault(make(MSortingParam(0, true))));
	listSortedCallback = extractStruct(style, MListSorted(nop1)).newOrderCallback;
	sortedByB : DynamicBehaviour<Triple<int, bool, Maybe<MSort>>> = make(Triple(-1, true, None()));
	sortColumnNumberB = make(-1);
	sortUpdating = tryExtractStruct(style, MUpdateSorting(0));

	updatingTrigger = make(true);
	maybeApply(sortUpdating, \su -> updateTrigger(updatingTrigger, su.delay));

	sortingResult = fsubselect(rows, FLift(\rws : [[Material]] ->
		fselect2(sortedByB, updatingTrigger, FLift2(\sb : Triple<int, bool, Maybe<MSort>>, __ -> {
			sorted =
				if (sb.first >= 0 && sb.first < (columnsCount - (b2i(showRowNumbers) + b2i(isSome(checkboxSelection)))) && !hasExtOrderBy)
					eitherFn(
						sb.third,
						\sc ->
							mergeSort(
								enumFromTo(0, length(rws) - 1),
								\a, b ->
									if (sb.second) sc.colCompares(a, b)
									else sc.colCompares(b, a)
							),
						\ ->
							map(
								sortCustom(
									mapi(rws, \j, r ->
										Pair({
											cellM = r[sb.first];
											switch (cellM) {
												MMutable(mutContent): fgetValue(mutContent);
												TMutable(mutContent): fgetValue(mutContent);
												default: cellM
											}
										}, j)),
									firstOfPair, sb.second
								),
								secondOfPair
							)
					)
				else enumFromTo(0, length(rws) - 1);
			listSortedCallback(sorted);
			sorted
		})
	)));

	rowsCountB = flength(rows);

	fixPaginationCurrent = \current -> forceRange(current, 0, length(pagination.rowsPerPage) - 1);

	page = make(Pair(0, 0));

	updatePageNumber = \newPageNumber ->
		nextDistinct(page, Pair(newPageNumber, getValue(page).second));

	updateRowsPerPage = \newRowsPerPage ->
		nextDistinct(page, Pair(getValue(page).first, newRowsPerPage));

	pageNumber = fFirstOfPair(page);
	rowsPerPage = fSecondOfPair(page);

	pageNumberB = make(0);

	// Width handling

	border = 16.;
	externalBorder = 16.;
	screenW = make(0.);
	rowsBoxH = make(0.);

	fullWidthAdvanced = contains(style, MFullWidthAdvanced());
	fullWidth = contains(style, MFullWidth()) || fullWidthAdvanced;

	minWidths = mapi(columns, \i, c -> i2d(c.width) + border);

	cellWs : Transform<[[DynamicBehaviour<double>]]> =
		fselect(rowsCountB, FLift(\rc ->
			generate(0, rc + b2i(isSome(fixedRow)), \__ ->
				generate(0, columnsCount, \i ->
					if (!widthByContent && !contains(columns[i].style, MWidthByContent())) make(0.)
					else if (isSome(checkboxSelection) && i == 0) make(checkboxColumnWidth)
					else make(^tropicFillersMax)
				)
			)
		));

	columnWidths : [Transform<double>] =
		generate(0, columnsCount, \i ->
			if (widthByContent || contains(columns[i].style, MWidthByContent()))
				fsubselect(cellWs, FLift(\cWs ->
					fsubselect(page, FLift(\pg ->
						fsubselect(sortingResult, FLift(\srt ->	{
							currentRows =
								eitherMap(
									fixedRow,
									\__ -> concat([firstElement(cWs, [])],
										map(subrange(srt, pg.first, pg.second), \idx -> elementAt(tail(cWs), idx, []))
									),
									map(subrange(srt, pg.first, pg.second), \idx -> elementAt(cWs, idx, []))
								);

							faddition(
								fmaxA(
									map(currentRows, \row -> elementAt(row, i, make(0.))),
									i2d(columns[i].width)
								),
								const(border)
							)
						}))
					))
				))
			else if (fullWidth)
				make(minWidths[i])
			else
				const(minWidths[i])
		);

	tableWidth : (Transform<int>) -> Transform<double> = \expRow ->
		if (columnsCount == 0)
			const(0.)
		else
			fselect2(fmerge(columnWidths), expRow, FLift2(\colWs : [double], er : int ->
				dsum(mapSplitWidths(colWs, er, \ws -> either(maxA(ws), 0.))) + 2. * externalBorder
			));

	prevER = ref 1;

	countExpandRow : (double, double) -> int = \aw, widthsSum ->
		(if (^prevER == 1 && (aw - externalBorder * 2.) < widthsSum * 2. / 3. && aw != 0.)
			2
		else if (^prevER == 2 && (aw - externalBorder * 2.) > widthsSum)
			1
		else
			^prevER) |> (\f -> {prevER := f; f});

	minWidthsSum = if (isAnyWidthByContent) tableWidth(const(1)) else const(dsum(minWidths));

	expandRow =
		fif(
			expandRowEnabled,
			fselect2(screenW, minWidthsSum, FLift2(countExpandRow)),
			const(1)
		);

	// Height handling

	separators = !contains(style, MNoSeparators());
	separatorsHeight = b2d(separators);

	noFooter = contains(style, MNoFooter()) && !anyTypePagination;
	footerHeight = if (noFooter) 0. else 56.;
	footerMinWidth = make(0.);
	tableHeight = make(0.);

	countRowHeight = \er : int ->
		rowHeight * i2d(er) + separatorsHeight;

	minimumRowsDef = 3;
	minTableHeightDef = i2d(minimumRowsDef + b2i(!replaceHeader)) * countRowHeight(1) + footerHeight;
	minTableHeight =
		extractStruct(style, MMinTableHeigth(minTableHeightDef)).height
		|> (\h -> max(h, rowHeight + footerHeight));

	minimumRows = \er -> min(
		ceil((minTableHeight - footerHeight) / countRowHeight(er)) - b2i(!replaceHeader),
		fgetValue(rowsCountB)
	);

	// Helpers

	makeChkbox = \p, trigger, en, onClk, h -> {
		lh = lineHeight(h);
		MCheckBox2T(
			manager,
			p,
			MCheckBox(TEmpty(), trigger, [MIconButtonBorder(checkboxBorder(lh)), checkboxColor, MEnabled(en), MOnClick(onClk)]),
			m2t
		)
		|> (\t -> TBorderA(-checkboxBorder(lh) / 2., 0., 0., 0., t))
		|> (\t -> TCenterYIn(t, TFixed(0., lh)))
	}

	cellBox = \i, h -> TSizedWidth(columnWidths[i], lineHeight(h));

	alignCellContent = \colstyle : [MColumnStyle], box : Tropic ->
		\content : Tropic -> {
			right = changeBoolIfRTL(contains(colstyle, RightAlign()));
			center = contains(colstyle, CenterAlign());
			TCopySize(
				box,
				\tr ->
					TTweak(
						[TAlign(const(if (center) 0.5 else if (right) 1. else 0.), const(0.5))],
						TBorderA(8., 0., 8., 1., TAvailable(content, TBorderA(-16., 0., 0., -1., tr))),
						tr
					),
				false
			)
		}

	expandContent = \cells : [Tropic], er : int ->
		map(
			if (length(cells) > 0 && isNone(checkboxSelection))
				splitWidths(cells, er)
			else
				splitByNumber(cells, er),
			TLines);

	// Header

	tableHeader = \p -> if (replaceHeader) TEmpty() else
		mapi(columns0, \i0, c : MColumnDynamic -> {
			rightAlign = changeBoolIfRTL(contains(c.style, RightAlign()));
			sortStyle = if (isSome(reorderList)) None() else tryExtractStruct(c.style, MSort(\__, __ -> 0));
			sortable = isNone(reorderList) && (hasExtOrderBy || contains(c.style, MAutoSort()));
			i = i0 - b2i(showRowNumbers);

			makeHeaderTitle = \isSelected : bool ->
				TSelect(c.header, \header ->
					MEllipsisText2T(
						manager,
						p,
						MEllipsisText(
							header,
							eitherMap(headerStyle, \hs -> hs.textStyle, [if (isSelected) MCaptionColumnSelected() else MCaptionColumn()])
						),
						m2t
					)
				);

			(if (isSome(sortStyle) || sortable) {
				hover = make(false);

				clickColumn = \ -> {
					sb = fgetValue(sortedByB);
					asc =
						if (sb.first == -1)
							getValue(defaultSorted.sorting).isAsc
						else if (sb.first == i)
							!sb.second
						else
							false;

					nextDistinct(defaultSorted.sorting, MSortingParam(i, asc));
					next(sortedByB, Triple(i, asc, sortStyle))
				};

				if (getValue(defaultSorted.sorting).colIndex == i)
					clickColumn();

				mouseDownAround(manager, None(), make(false), hover, clickColumn,
					TIfLazy2(
						fselect(sortedByB, FLift(\sb : Triple<int, bool, Maybe<MSort>> -> sb.first == i)),
						\sb ->
							TIfLazy2(
								hover,
								\h ->
									TCols(
										[
											makeHeaderTitle(h)
												|> (\t -> TBorderA(0.0, 0.0, 4.0, 0.0, t)),
											if (sb)
												TIfLazy2(fselect(sortedByB, FLift(secondOfTriple)), \sb0 ->
													MIcon2T(p, if (sb0) "arrow_upward" else "arrow_downward", [MIconSize(15.)]),
													true
												)
											else if (h)
												MIcon2T(p, "arrow_downward", [MIconSize(15.), FillOpacity(0.24)])
											else
												TFixed(16., 0.)
										]
											|> (\f2 -> if (rightAlign) reverseA(f2) else f2)
									),
								false
							),
						false
					)
				)
			} else
				makeHeaderTitle(false)
			)
			|> (\f2 : Tropic ->
				if (c.tooltip == const(""))
					f2
				else
					MTooltip2T(manager, p, MTooltip(f2, MDynamicText(c.tooltip, [MTooltipDesktop(), sameLightMColor(p)]), []), m2t)
			)
			|> alignCellContent(c.style, cellBox(i0 + b2i(isSome(checkboxSelection)), true))
		})
		|> (\headers : [Tropic] -> {

			addCheckbox = \colHeaders : Tropic ->
				eitherMap(
					checkboxSelection,
					\__ -> {
						selAll = make(false);
						selPage =
							fselect3(
								fif(scrollEnabled, fselect(rowsCountB, FLift(\rc -> Pair(0, rc))), page),
								sortingResult,
								fsubselect(selectionEnabled.enabled, FLift(fmerge)),
								\pg, sr, en ->
									fold(
										enumFromTo(pg.first, min(pg.first + pg.second, length(sr)) - 1),
										[], \acc, i ->
											ifArrayPush(acc, elementAt(en, i, true), elementAt(sr, i, i))
									)
							);

						makeChkbox(p, selAll,
							if (selection.multiple)
								fand(selection.enabled, fselect(selPage, FLift(\pg -> length(pg) > 0)))
							else
								const(false),
							\ -> nextDistinct(selection.selected,
								if (getValue(selAll))
									concat(getValue(selection.selected), fgetValue(selPage)) |> uniq
								else
									filter(getValue(selection.selected), \x -> !contains(fgetValue(selPage), x))
							),
							true
						)
							|> (\t ->
								if (selection.multiple) {
									TConstruct(
										[
											make2Subscribe(selection.selected, selPage, \sel, pg ->
												nextDistinct(
													selAll,
													length(pg) != 0 && length(sel) >= length(pg)
														&& forall(pg, \i -> contains(sel, i))
												)
											)
										],
										t
									)
								} else
									t
								)
							|> (\chkbox -> TCols2A(chkbox, colHeaders))
					},
					colHeaders
				);

			TSelect(expandRow, \er ->
				expandContent(headers, er)
				|> TColsA
			)
			|> addCheckbox
			|> (\f2 -> TBorderA(externalBorder, 0., externalBorder + reorderIconSpace, 0., f2))
		})
		|> (\f ->
			eitherMap(
				headerStyle,
				\hs ->
					TCopySize(
						f,
						\tr ->
							TRounded(2., 2., 0., 0., hs.background, tr),
						false
					),
				f
			)
		);

	addHeaderActions = \p -> \t : Tropic ->
		if (headerActions.actions != TEmpty())
			TLines2(
				m2t(headerActions.actions, p)
				|> (\t2 -> TAvailableHeight(t2, const(rowHeight))),
				t
			)
		else t;

	footer = \p -> (
		if (anyTypePagination)
			MSelect2T(manager, p, "MDynamicDataTableFooter", [], rowsCountB, \rowsCount, p2 -> {
				makeFooterButton = \title : string, makeUpdatedRow : (Pair<int, int>) -> int, makeEnabled : (Pair<int, int>) -> bool ->
					MIconButton2T(
						manager,
						p2,
						MIconButton(
							title,
							\ -> updatePageNumber(makeUpdatedRow(getValue(page))),
							[],
							[MEnabled(fselect(page, FLift(makeEnabled)))]
						),
						m2t
					)
					|> TCenterY;

				hideFooter = eitherMap(minA(pagination.rowsPerPage), \rpp -> rowsCount < rpp, false);

				if (!isEmptyPagination) {
					selectedRowsPerPage = fixPaginationCurrent(getValue(pagination.current));
					updateRowsPerPage(pagination.rowsPerPage[selectedRowsPerPage])
				};

				if (hideFooter)
					TEmpty()
				else
					concatA([
						[TFillX()],
						if (length(pagination.rowsPerPage) > 1)
							[
								MText2T(p2, "Rows per Page:", [MCaption()])
								|> TCenterY
								|> (\t -> TBorder(8., 0., 16., 0., t)),
								MDropDown2T(
									manager,
									p2,
									MDropDown(
										pagination.current,
										"",
										map(pagination.rowsPerPage, toString),
										[MDataTableFooter(), MCroppedButton()]
									),
									m2t
								)
								|> (\f2 ->
									TConstruct([
										makeSubscribe2(pagination.current, \c ->
											updateRowsPerPage(pagination.rowsPerPage[c])
										)
									], f2)
								)
								|> TCenterY
								|> TBorderRight(16.)
							]
						else
							[],

						[
							TSelect(page, \pg -> {
								text =  formatString(
									if (getDefaultRtl()) _("%1 of %2-%3") else _("%3-%2 of %1"),
									[i2s(rowsCount), i2s(max(min(pg.first + pg.second, rowsCount), 0)), i2s(min(pg.first + 1, rowsCount))]
								);

								MText2T(p2, text, [MCaption()])
							})
								|> TCenterY
								|> TBorderRight(16.),
							makeFooterButton(
								"first_page",
								\__ -> 0,
								\pg -> pg.first > 0
							)
								|> hideIfLittlePages(rowsCount, rowsPerPage),
							makeFooterButton(
								"navigate_before",
								\pg -> max(pg.first - pg.second, 0),
								\pg -> pg.first > 0
							),
							makeFooterButton(
								"navigate_next",
								\pg -> min(pg.first + pg.second, rowsCount - if (fgetValue(scrollEnabled)) pg.second else 0),
								\pg -> (rowsCount > 0) && (pg.first + pg.second < rowsCount)
							),
							makeFooterButton(
								"last_page",
								\pg -> (rowsCount - 1) / pg.second * pg.second,
								\pg -> pg.first + pg.second < rowsCount
							)
								|> hideIfLittlePages(rowsCount, rowsPerPage)
						]
					])
					|> TColsA
					|> (\t -> TAvailableHeight(t, const(footerHeight)))
					|> makeTropicConstantHeight(footerHeight |> Some)
			})
		else if (noFooter)
			TEmpty()
		else
			TFixed(0., footerHeight)
	)
	|> (\t -> TAttachMinWidth(t, footerMinWidth));

	(\p -> {
		// Data rows
		MSelect2T(manager, p, "MDynamicDataTableLines", [], expandRow, \er, p2 ->
			eitherMap(
				fixedRow,
				\fr -> fconcat(const([fr.cols]), rows),
				rows
			)
			|> (\rc -> fmapi(rc, \j, row -> {
					addCheckbox = \p3 : MFocusGroup -> \cells : Tropic ->
						eitherMap(checkboxSelection, \cs -> {
							j0 = j - b2i(isSome(fixedRow));
							if (j0 >= 0) {
								selRow = make(contains(getValue(selection.selected), j0));
								makeChkbox(p3, selRow,
									fsubselect(selectionEnabled.enabled, FLift(\en ->
										fand(selection.enabled, elementAt(en, j0, const(true))),
									)),
									\ -> {
										sel = getValue(selection.selected);

										if (selection.multiple) {
											if (!getValue(selRow))
												nextDistinct(selection.selected, removeAll(sel, j0))
											else if (!contains(sel, j0))
												nextDistinct(selection.selected, arrayPush(sel, j0))
										} else {
											if (getValue(selRow))
												nextDistinct(selection.selected, [j0])
											else if (selection.toggle)
												nextDistinct(selection.selected, [])
										}
									},
									false
								)
								|> (\t -> TConstruct(
										[\ -> fconnectSelect(selection.selected, selRow, \s -> contains(s, j0))], t
									))
								|> (\t -> TCols2A(t, cells))
							} else
								TBorderA(checkboxColumnWidth, 0., 0., 0., cells)
							},
							cells
						);
					row2 = if (showRowNumbers) concat([MText(i2s(j + 1), [])], row) else row;
					makeLineContent = \p3 : MFocusGroup ->
						mapi(row2, \i0, cell -> {
							i = i0 + b2i(isSome(checkboxSelection));
							if (i >= columnsCount)
								TEmpty()
							else {
								colStyle = columns[i].style;
								box = cellBox(i, false);
								// TODO : improve
								// Hotfix : rerender content in the column if rowsCountB changed.
								content =
									if (contains(colStyle, MWidthByContent()))
										MSelect(cellWs, \cws ->
											MAttachWidth(cell, elementAt(elementAt(cws, j, []), i, make(0.0)))
										)
									else
										cell;

								MCellContent2T(manager, p3,	content, rowHeight,	box, crop, m2t)
								|> alignCellContent(colStyle, box)
							}
						})
							|> (\cells -> expandContent(cells, er))
							|> TColsA
							|> addCheckbox(p3)
							|> TBorderLeftRight(externalBorder)
							|> (\t -> TFixSize(t, TFillXH(countRowHeight(er) - separatorsHeight)))
							|> (\t -> eitherMap(rowBackgroundStyle, \rb ->
										TIfLazy2(
											fselect(selection.selected, FLift(\arr -> contains(arr, j))),
											\v -> if (v && isSome(selectedBgStyle)) t else TFrame(0., 0., rb.fn(j), t),
											false
										), t
									))
							|> (\t -> if (separators) TLines2(t, m2t(MSeparator(true), p3)) else t);

					MCustomLine(
						MGetFocusGroup(makeLineContent),
						[clickEnabled, MHeight(countRowHeight(er))]
					);
				})
			)
			|> (\rws0 : Transform<[MCustomLine]> ->
				(
					if (isSome(fixedRow))
						fselect(rws0, tail |> FLift)
					else
						rws0
				)
				|> (\rws : Transform<[MCustomLine]> ->
					eitherFn(
						reorderList,
						\rl ->
							MSelect2T(
								manager,
								p2,
								"MDataTableContent",
								[],
								rws,
								\f4, p3 ->
									MList2T(
										manager,
										p3,
										MList(
											f4,
											concat(
												[MSideBorders(const(0.)), MAddScroll(None())],
												eitherMap(selectedBgStyle, v2a, [])
											),
											[selection, onClick, rl, hoverEnabled]
											|> (\st : [MListState] -> ifArrayPush(st, !reorderShowIcon, MListReorderHideIcon()))
										),
										m2t
									)
							),
						\ -> {
							listSort = make([]);

							TConstruct(
								[
									\ -> fconnect(sortingResult, listSort),
								]
								|> (\arr -> maybeArrayPush(arr,
										maybeMap(mRowsPerPage, \mrpp -> \ -> fconnect(rowsPerPage, mrpp.rowsPerPage)))),
								MDynamicList2T(
									manager,
									p2,
									MDynamicList(
										cast(rws : Transform<[MCustomLine]> -> Transform<[MListLine]>),
										concat(
											[MSideBorders(const(0.))],
											eitherMap(selectedBgStyle, v2a, [])
										),
										[selection, selectionEnabled, onClick, MListReorder(listSort, const(false)), scrollPosition, TScrollEnabled(scrollEnabled),
											MScrollbars(
												TScrollbarStyle(getMaterialScrollBar().x with visible = scrollEnabled),
												TScrollbarStyle(getMaterialScrollBar().y with visible = scrollEnabled)
											), hoverEnabled, MScrollBound(scrollEnabled, scrollEnabled)]
									),
									m2t
								)
							)
						}
					)
				)
				|> (\f : Tropic ->
					eitherMap(
						fixedRow,
						\fr -> {
							bStyle = filtermap(fr.style, \st -> switch (st) {
								TGraphicsStyle() : {a : Maybe<TGraphicsStyle> = Some(st); a};
								default : None()
							});

							onFixedRowClick = tryExtractStruct(fr.style, MOnClick(nop));

							TCopySize(
								MSelect2T(manager, p2, "MDataTableFixedRow", [], rws0, \fr2, p3 ->
									firstElement(fr2, MCustomLine(TEmpty(), [])).content
									|> (\f4 -> eitherMap(
										onFixedRowClick,
										\onclk ->
											MComponent([
												MOnClick(onclk.click),
												MRippleType(const(MRippleFill())),
												clickEnabled
											], \__ -> f4),
										f4
									))
									|> (\f4 -> m2t(f4, p3))
								),
								\tr -> TRounded(2., 2., 0., 0., bStyle, tr),
								false
							)
							|> (\t -> TShow(fr.show, t))
							|> (\t -> TLines2(t, f))
						},
						f
					)
				)
			)
			|> (\f2 ->
				TAvailableHeight(
					f2,
					fselect3(rowsPerPage, rowsCountB, showFixedRow, \rpp, rc, fr ->
						i2d(min(rpp, rc) + b2i(fr)) * countRowHeight(er)
					)
				)
			)
		)
		|> (\f -> TConstruct(
				concat(
					if (isEmptyPagination) [
						makeSubscribeUns(
						fOr(const(autoPagination), scrollEnabled),
						\v ->
							if (v)
								[make4Subscribe(
									rowsBoxH,
									expandRow,
									showFixedRow,
									rowsCountB,
									\height, er, fr, rowsCount -> {
										newRowsCount =
											forceRange(
												floor(height / countRowHeight(er)),
												minimumRows(er),
												rowsCount + b2i(fr)
											) - b2i(fr);

										pg = getValue(page);
										if (pg.second != newRowsCount)
											next(page,
												Pair(
													forceRange(
														pg.first * newRowsCount / max(pg.second, 1),
														0,
														max(rowsCount - 1, 0)
													),
													newRowsCount
												)
											);
								})()]
							else
								[makeSubscribe(rowsCountB, updateRowsPerPage)()]
					)] else
						[],

					if (fullWidth && !widthByContent && length(columnWidths) > 0) [
						make3Subscribe(screenW, expandRow, fmerge(columnWidths), \width, er, colWs -> {
							miw =
								mapi(columns, \i, c -> {
									if (contains(c.style, MWidthByContent()))
										colWs[i]
									else
										minWidths[i]
								})
								|> (\arr ->
									mapSplitWidths(arr, er,
										\r -> either(maxA(r), -1.)
									)
								);

							maw =
								mapi(columns, \i, c -> {
									if (contains(c.style, MWidthByContent()))
										colWs[i]
									else {
										w = extractStruct(c.style, MMaxWidth(-1)).width;

										if (w == -1)
											-1.
										else if (w < c.width)
											i2d(c.width) + border
										else
											i2d(w) + border
									}
								})
								|> (\arr ->
									mapSplitWidths(arr, er,
										\r -> if (contains(r, -1.)) -1. else either(maxA(r), -1.)
									)
								);

							newSizes =
								distributeSizesEvenly(
									miw,
									maw,
									max(width - externalBorder * 2. - reorderIconSpace, getValue(footerMinWidth))
								);

							iteri(
								splitWidths(columnWidths, er),
								\i, r -> iter(r, \r0 : Transform<double> ->
									switch (r0) {
										DynamicBehaviour(__, __):
											nextDistinct(r0, newSizes[i]);
										default: {}
									}
								)
							)
						})] else []
					),
					f
				)
		)
		|> (\t -> TAttachAvailableHeight(t, rowsBoxH))
		|> (if (!anyTypePagination && isFConst(m.rows) && !fgetValue(scrollEnabled) && isFConst(expandRow))
				makeTropicConstantHeight(Some(i2d(fgetValue(rowsCountB)) * countRowHeight(fgetValue(expandRow))))
			else idfn)
		|> (\t -> if (separators) TLines2(m2t(MSeparator(true), p), t) else t)
		// Header
		|> (\f -> TLines2(tableHeader(p), f))
		|> addHeaderActions(p)
		// Bottom bar
		|> (\f : Tropic -> TLines2(f, footer(p)))
		// Card
		|> (\f ->
			if (contains(style, MInCard())) {
				MShapeFrame(p, [Fill(if (getLightBackground(p)) white else 0x424242)], f, "MDynamicDataTable")
				|> (\f2 -> TShadowShape(p, const(2.0), f2, RectangleShape("MDynamicDataTable")))
			} else
				f)
		|> (\f ->
			TConstruct(
				[
					makeSubscribe(selection.selected, \ar -> {
						maybeApply(singleSelection, \ss -> nextDistinct(ss.selected, if (length(ar) > 0) ar[0] else -1));
						maybeApply(multiSelection, \ms -> nextDistinct(ms.selected, buildSet(ar)));
					}),
					make2Subscribe(page, expandRow, \pg, er -> {
						if (anyTypePagination)
							nextDistinct(scrollPosition.position, Point(0., i2d(pg.first) * countRowHeight(er)));

						maybeApply(currentPage, \cp -> nextDistinct(cp.page, pg.first / max(pg.second, 1)));
					}),
					\ -> fBidirectionalLink(sortedByB, sortColumnNumberB, \sb -> nextDistinct(sortColumnNumberB, sb.first), \num -> {
						sortColumn =
							if (num >= 0 && isNone(reorderList))
								tryExtractStruct(columns[num].style, MSort(\__, __ -> 0))
							else
								None();

						nextDistinct(sortedByB, Triple(num, !getValue(defaultSorted.sorting).isAsc, sortColumn));
					}),
					\ -> fBidirectionalLink(page, pageNumberB,
							\pair -> nextDistinct(pageNumberB, pair.first / max(pair.second, 1)),
							\num -> {
								rpp = fgetValue(rowsPerPage);
								rowsCount = fgetValue(rowsCountB);
								updatePageNumber(forceRange(num * rpp, 0, rowsCount - 1))
							})
				]
				|> (\f2 ->
					eitherMap(
						singleSelection,
						\ss ->
							concat([makeSubscribe(ss.selected, \ar -> nextDistinct(selection.selected, if (ar >= 0) [ar] else []))], f2),
						f2
					)
				)
				|> (\f2 ->
					eitherMap(
						multiSelection,
						\ms ->
							concat([makeSubscribe(ms.selected, \ar -> nextDistinct(selection.selected, set2array(ar)))], f2),
						f2
					)
				)
				|> (\f2 ->
					eitherMap(
						currentPage,
						\cp ->
							concat(
								[
									make2Subscribe(cp.page, rowsCountB, \pg, rowsCount -> {
										rpp = fgetValue(rowsPerPage);
										updatePageNumber(max(0, min(pg * rpp, rowsCount -1)))
									})
								],
								f2
							),
						f2
					)
				)
				|> (\f2 ->
					eitherMap(
						goToIndex,
						\gti ->
							concat(
								[
									make2Subscribe(gti.index, rowsCountB, \ind, rowsCount ->
										fromArrayIndex([ind],  Pair(0, rowsCount), rowsCount, fgetValue(sortingResult))
										|> (\f3 -> if (length(f3) > 0) {
												rpp = fgetValue(rowsPerPage);
												updatePageNumber(if (rpp == 0) 0 else f3[0] / rpp * rpp)
											})
									)
								],
								f2
							),
						f2
					)
				),
				f
			)
		)
		|> (\t -> TAvailableWidth(t, tableWidth(expandRow)))
		|> (\t -> if (fullWidthAdvanced) TTweak([TSnapSize(8., -1., false)], t, TEmpty()) else t)
		|> (if (!anyTypePagination && isFConst(m.rows) && !fgetValue(scrollEnabled)) makeTropicConstantHeight(None()) else idfn)
		|> (if (fullWidth || isAnyWidthByContent) idfn else makeTropicConstantWidth(None()))
		|> (\t ->
			if (fullWidth) {
				table = if (autoPagination || fgetValue(scrollEnabled)) t else TAttachHeight(t, tableHeight);
				box = if (autoPagination || fgetValue(scrollEnabled)) TFillXY() else TFillXHT(tableHeight);
				MScroll2T(manager, p, MScroll(table, box, [MScrollCropByContent()]), m2t)
			} else t)
	})
	|> (\f ->
		MComponentGroup2T(
			manager,
			parent,
			"MDynamicDataTable",
			[
				IScriptBehaviour("current_page", pageNumberB, ISInputValue([], "int", true)),
				IScriptBehaviour("sort_by", sortColumnNumberB, ISInputValue(map(columns, \c -> fgetValue(c.header)), "index", true))
			],
			f
		)
	)
	|> (\t -> if (isFConst(expandRowEnabled) && !fgetValue(expandRowEnabled) && !fullWidth) t else TAttachWidth2(TFillX(), screenW, t))
}

MCellContent2T(manager : MaterialManager, parent : MFocusGroup, c : Material, rowHeight : double, box : Tropic, crop : bool, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	wrapCellContent = \m -> MCellContent2T(manager, parent, m, rowHeight, box, crop, m2t);
	wrapCellContentDef = \m -> MCellContentDefault2T(parent, m, box, crop, m2t);

	switch (c) {
		MSmallEditDialog(__, __, __): {
			MSmallEditDialog2T(manager, parent, c, m2t)
		}
		MSwitchControl(__, __): {
			TBorder(-4.0, -8., -4.0, -8., MSwitchControl2T(manager, parent, c, m2t))
		}
		MDropDown(__, __, __, __): {
			TBorder(-24., 0., -24., 0., MDropDown2T(manager, parent, c, m2t))
		}
		MDropDownMenu(__, __, __): {
			TBorder(-24., 0., -24., 0., MDropDownMenu2T(manager, parent, c, m2t))
		}
		MText(text, style): {
			MEllipsisText2T(manager, parent, MEllipsisText(text, replaceStructMany(style, [MShowTooltip(const(true))])), m2t)
		}
		MIconButton(name, onClick, style, state): {
			MIconButton2T(manager, parent, MCellIconButton(name, onClick, style, state, rowHeight), m2t)
		}
		MTooltip(cont, tooltip, st): {
			MTooltip2T(manager, parent, MTooltip(wrapCellContent(cont), tooltip, st), m2t)
		}
		MConstruct(cons, content): {
			TConstruct(cons, wrapCellContent(content));
		}
		MShow(show, content): {
			TShow(show, wrapCellContent(content));
		}
		MVisible(visible, content): {
			TVisible(visible, wrapCellContent(content));
		}
		MMutable(contentT): {
			TMutable(fselect(contentT, FLift(wrapCellContent)))
		}
		MIf(cond, contentA, contentB): {
			TIf(cond, wrapCellContent(contentA), wrapCellContent(contentB))
		}
		MGroup(elements): {
			TGroup(map(elements, wrapCellContent))
		}
		MGroup2(m1, m2): {
			TGroup2(wrapCellContent(m1), wrapCellContent(m2))
		}
		MLines(elements): {
			TLinesA(map(elements, wrapCellContent))
		}
		MLines2(m1, m2): {
			TLines2(wrapCellContent(m1), wrapCellContent(m2))
		}
		MCols(elements): {
			TColsA(map(elements, wrapCellContent))
		}
		MCols2(m1, m2): {
			TCols2(wrapCellContent(m1), wrapCellContent(m2))
		}
		MCenter(m): {
			TCenter(wrapCellContent(m))
		}
		MCenterX(m): {
			TCenterX(wrapCellContent(m))
		}
		MCenterY(m): {
			TCenterY(wrapCellContent(m))
		}
		MBorder(l, t, r, b, m): {
			TBorder(l, t, r, b, wrapCellContent(m))
		}
		MClickable(m, onClick): {
			clickable(manager, parent, wrapCellContent(m), onClick)
		}
		MInspect(inspectors, m): {
			TInspect(inspectors, wrapCellContent(m))
		}
		MMenu(button, items, style): {
			switch (button) {
				MIconButton(name, onClick, iconStyle, state): {
					wrapCellContentDef(MMenu(MCellIconButton(name, onClick, iconStyle, state, rowHeight), items, style))
				}
				default: wrapCellContentDef(c);
			}
		}
		default: {
			wrapCellContentDef(c)
		}
	}
}

MCellIconButton(name : string, onClick : () -> void, style : [MIconButtonStyle], state : [MButtonState], rowHeight : double) -> MIconButton {
	iconSize : MIconSize = MIconSize(min(extractStruct(style, MIconSize(if (rowHeight > 32.) 24. else 18.)).size, rowHeight));
	circleBackground : MCircleBackground =
		extractStruct(style, MCircleBackground(MRed(500), 0.))
		|> (\f -> MCircleBackground(f.color, min(f.size, rowHeight)));
	border : MIconButtonBorder =
		MIconButtonBorder(
			forceRange(
				extractStruct(style, MIconButtonBorder(iconSize.size / 2.)).border,
				0.,
				(rowHeight - iconSize.size) / 2.
			)
		);

	MIconButton(name, onClick, replaceStructMany(style, [iconSize, circleBackground, border]), state);
}

MCellContentDefault2T(parent : MFocusGroup, c : Material, box : Tropic, crop : bool,  m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	m2t(c, parent)
	|> (\f -> if (crop) TCopySize2(f, \tr2, f3 -> TCropSize(TMinimumGroup2(tr2, box), f3)) else f)
}

toArrayIndex(arr : [int], pageNumber : int, rowsCount : int, sortedBy : [int]) -> [int] {
	filtermap(arr, \a -> {
		idx = pageNumber + a;
		if (idx >= 0 && idx < rowsCount)
			Some(if (sortedBy != []) sortedBy[idx] else idx)
		else
			None()
	})
}

fromArrayIndex(ar : [int], pg : Pair<int, int>, rowsCount : int, sortedBy : [int]) -> [int] {
	fold(ar, [], \acc, arInd -> {
		if (arInd < rowsCount) {
			a = (if (sortedBy != []) elemIndex(sortedBy, arInd, 0) else arInd) - pg.first;
			if (a >= 0 && a < pg.second)
				arrayPush(acc, a)
			else
				acc
		} else {
			acc
		}
	})
}

hideIfLittlePages(rowsCount : int, rowsPerPage : Transform<int>) -> (Tropic) -> Tropic {
	\t -> TShow(fselect(rowsPerPage, FLift(\rpp -> divCeil(rowsCount, rpp) > 2)), t)
}

divCeil(a : int, b : int) -> int {
	ceil(i2d(a) / i2d(b))
}



splitWidths(arr : [?], er : int) -> [[?]] {
	concat([[arr[0]]], splitByNumber(arr |> tail, er))
}

mapSplitWidths(arr : [?], er : int, fn : ([?]) -> double) -> [double] {
	map(splitWidths(arr, er), fn)
}

updateTrigger(trigger : DynamicBehaviour<bool>, delay : int) -> void {
	timer(delay, \ -> {
		reverseBehaviour(trigger);
		updateTrigger(trigger, delay)
	})
}
