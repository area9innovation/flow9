import material/internal/material_textinput;
import material/internal/material_dropdown;
import material/internal/material_list;

export {
	MDynamicDataTable2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicDataTable, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MDynamicDataTable2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicDataTable, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	style = m.style;
	rows = m.rows;
	rowsCountB = flength(rows);

	sorting = makeMSortingState(rows, style);
	paginationState = makeMPaginationState(style);
	page = paginationState.page;

	state = makeMDataTableState(m, manager, parent, m2t, rowsCountB, paginationState, sorting);

	reorderList = tryExtractStruct(style, MListReorder(make([]), const(false)));
	isReorderEnabled = eitherMap(reorderList, \rl : MListReorder -> fgetValue(rl.enabled), false);
	reorderShowIcon = !contains(style, MListReorderHideIcon());
	// Reserved space for column with drag&drop reorder icon. Icon added at function MListLine2T
	reorderIconSpace = if (isReorderEnabled && reorderShowIcon) 40. else 0.;

	rowsBoxScrollPosition : TScrollPosition = extractStruct(style, MScrollPosition(make(zeroPoint)));
	hoverEnabled : MHoverEnabled = extractStruct(style, MHoverEnabled(const(true)));
	expandRowEnabled = extractStruct(style, MExpandRow(const(false))).enabled;
	isDefExpandRow = isFConst(expandRowEnabled) && !fgetValue(expandRowEnabled);
	scrollEnabled = extractStruct(style, TScrollEnabled(const(false))).enabled;
	
	defaultHS = MHeaderStyle([], [], []);
	headerStyle = tryExtractStruct(style, defaultHS);
	rowBackgroundStyle = tryExtractStruct(style, MRowBackgroundStyle(\__ -> []));
	selectedBgStyle : Maybe<MSelectedBackgroundStyle> = tryExtractStruct(style, MSelectedBackgroundStyle([]));
	mRowsPerPage = tryExtractStruct(style, MRowsPerPage(make(0)));
	
	showFixedRow = eitherMap(state.fixedRow, \fr -> fr.show, const(false));
	lifted = eitherMap(tryExtractStruct(style, MDataTableInnerScroll(MStandardMode(), [])), \is -> is.mode == MLiftedFirstColumnMode(), false);
	isAnyWidthByContent = state.widthByContent || any(map(state.columns, isWidthByContent));

	screenW = make(0.);
	rowsBoxH = make(0.);
	
	splitWithoutHead : ([flow], int) -> [flow] = \arr : [flow], er : int -> {
		concat(map(colsHead(state, arr), v2a), splitByNumber(colsTail(state, arr), er));
	}
	mapSplitWithoutHead = \arr : [flow], er, fn -> map(splitWithoutHead(arr, er), fn);

	tableWidth : (Transform<int>) -> Transform<double> = \expRow ->
		if (length(state.columns) == 0)
			const(0.)
		else
			fselect2(fmerge(state.columnWidths), expRow, FLift2(\colWs : [double], er : int ->
				dsum(mapSplitWithoutHead(if (lifted) colsTail(state, colWs) else colWs, er, \ws -> either(maxA(ws), 0.))) + 2. * state.externalBorder
			));

	minWidthsSum = if (isAnyWidthByContent) tableWidth(const(1)) else fsum(state.minWidths);
	
	innerScrollState = makeMInnerScrollState(state.fullWidth, screenW, minWidthsSum, state.externalBorder, style);
	isInnerScroll = isSome(innerScrollState);
	glued = eitherMap(innerScrollState, \is -> is.glued, false);

	expandRow = initExpandRow(expandRowEnabled, screenW, minWidthsSum, state.externalBorder);

	// Height handling

	separatorsHeight = extractStruct(style, MRowSpacing(b2d(state.separators))).spacing;

	noFooter = contains(style, MNoFooter()) && !paginationState.anyType;
	footerHeight = if (noFooter) 0. else 56.;
	footerMinWidth = make(0.);
	tableHeight = make(0.);

	countRowHeight0 = \er : int, isHeader : bool ->
		state.lineHeight(isHeader) * (i2d(er) + b2d(lifted && !isHeader)) + separatorsHeight;
	countRowHeight = \er -> countRowHeight0(er, false);
	countHeaderRowHeight = \er -> countRowHeight0(er, true);

	minimumRowsDef = 3;
	minTableHeightDef = i2d(minimumRowsDef) * countRowHeight(1) + b2d(!state.replaceHeader) * countHeaderRowHeight(1) + footerHeight;
	minTableHeight =
		extractStruct(style, MMinTableHeigth(minTableHeightDef)).height
		|> (\h -> max(h, state.rowHeight + footerHeight));

	minimumRows = \er -> min(
		ceil((minTableHeight - b2d(!state.replaceHeader) * countHeaderRowHeight(1) - footerHeight) / countRowHeight(er)),
		fgetValue(rowsCountB)
	);

	rowsAvailableHeight =
		fselect4(paginationState.rowsPerPage, rowsCountB, showFixedRow, expandRow, \rpp, rc, fr, er ->
			i2d(min(rpp, rc) + b2i(fr)) * countRowHeight(er)
		);

	currentVisibleRowsCount =
		fselect2(rowsCountB, page, FLift2(\rc, p -> min(p.second, rc - p.first)));

	visibleRowsHeight =
		fselect3(currentVisibleRowsCount, showFixedRow, expandRow, \vrc, fr, er ->
			i2d(vrc + b2i(fr)) * countRowHeight(er)
		);

	// Helpers
	expandContent = \cells : [Tropic], er : int -> map(splitWithoutHead(cells, er), TLines);

	wrapItemsForFirstColumnMode = \items -> 
		eitherMap(innerScrollState, \is ->
			if (is.lifted) colsTail(state,items)
			else if (is.glued) concat([TShow(fnot(is.visible), colsHead(state, items) |> TCols)], colsTail(state, items))
			else items,
			items
		);

	wrapIntoBorders = \t -> eitherMap(innerScrollState, \is ->
		if (is.glued) TBorderT(fif(is.visible, zero, const(state.externalBorder)), zero, const(state.externalBorder), zero, t)
		else t |> TBorderLeftRight(state.externalBorder),
		t |> TBorderLeftRight(state.externalBorder)
	);

	// Header
	tableHeader = \headers, p ->
		TSelect(expandRow, \er ->
			expandContent(headers, er)
			|> wrapItemsForFirstColumnMode
			|> (\t -> TColsDir(t, p.rtl))
		)
		|> wrapIntoBorders
		|> (\t -> TBorderDir(0., 0., reorderIconSpace, 0., t, p.rtl))
		|> (\t ->
			eitherMap(
				headerStyle,
				\hs ->
					TCopySize(
						t,
						\tr ->
							TRounded(2., 2., 0., 0., hs.background, tr),
						false
					),
				t
			)
		);

	addHeaderActions = \p -> \t : Tropic ->
		if (state.headerActions.actions != TEmpty())
			TLines2(
				m2t(state.headerActions.actions, p)
				|> (\t2 -> TAvailableHeight(t2, const(state.rowHeight))),
				t
			)
		else t;

	(\p -> {
		headers =
			MDTTitles(state, p, sorting, defaultHS, headerStyle, isSome(reorderList), scrollEnabled, rowsCountB, page);
		footer =
			MDTFooter(manager, p, paginationState, rowsCountB, scrollEnabled, noFooter, footerHeight, footerMinWidth, m2t);

		// Data rows
		MSelect2T(manager, p, "MDynamicDataTableLines", [], expandRow, \er, p2 ->
			eitherMap(
				state.fixedRow,
				\fr -> fconcat(const([fr.cols]), rows),
				rows
			)
			|> (\rc -> fmapi(rc, \j0, row -> {

					j = j0 - b2i(isSome(state.fixedRow));
					
					makeLineContent = \p3 : MFocusGroup ->
						state.makeCells(p3, j, row)
						|> (\cells : [Tropic] -> expandContent(cells, er))
						|> wrapItemsForFirstColumnMode
						|> (\t -> TColsDir(t, p.rtl))
						|> wrapIntoBorders
						|> (if (lifted) TBorderTop(state.rowHeight) else idfn)
						|> (\t -> TFixSize(t, TFillXH(countRowHeight(er) - separatorsHeight)))
						|> (\t -> eitherMap(rowBackgroundStyle, \rb -> if (j == -1) t else
									TIfLazy2(
										fselect(state.selection.selected, FLift(\arr -> contains(arr, j))),
										\v -> if (v && isSome(selectedBgStyle)) t else TFrame(0., 0., rb.fn(j), t),
										false
									), t
								))
						|> (\t -> if (state.separators) TLines2(t, m2t(MSeparator(true), p3)) else t);

					MCustomLine(
						MGetFocusGroup(makeLineContent),
						[state.clickEnabled, MHeight(countRowHeight(er))]
					);
				})
			)
			|> (\rws0 : Transform<[MCustomLine]> ->
				(
					if (isSome(state.fixedRow))
						fselect(rws0, tail |> FLift)
					else
						rws0
				)
				|> (\rws : Transform<[MCustomLine]> ->
					eitherFn(
						reorderList,
						\rl ->
							MSelect2T(
								manager,
								p2,
								"MDataTableContent",
								[],
								rws,
								\f4, p3 ->
									MList2T(
										manager,
										p3,
										MList(
											f4,
											concat(
												[MSideBorders(const(0.)), MAddScroll(None())],
												eitherMap(selectedBgStyle, v2a, [])
											),
											[state.selection, state.onClick, rl, hoverEnabled]
											|> (\st : [MListState] -> ifArrayPush(st, !reorderShowIcon, MListReorderHideIcon()))
										),
										m2t
									)
							),
						\ -> {
							listSort = make([]);

							TConstruct(
								[
									\ -> fconnect(sorting.result, listSort),
								]
								|> (\arr -> maybeArrayPush(arr,
										maybeMap(mRowsPerPage, \mrpp -> \ -> fconnect(paginationState.rowsPerPage, mrpp.rowsPerPage)))),
								MDynamicList2T(
									manager,
									p2,
									MDynamicList(
										cast(rws : Transform<[MCustomLine]> -> Transform<[MListLine]>),
										concat(
											[MSideBorders(const(0.))],
											eitherMap(selectedBgStyle, v2a, [])
										),
										[state.selection, state.selectionEnabled, state.onClick, MListReorder(listSort, const(false)),
											rowsBoxScrollPosition, TScrollEnabled(scrollEnabled),
											MScrollbars(
												TScrollbarStyle(getMaterialScrollBar().x with visible = scrollEnabled),
												TScrollbarStyle(getMaterialScrollBar().y with visible = scrollEnabled)
											), hoverEnabled, MScrollBound(scrollEnabled, scrollEnabled)]
									),
									m2t
								)
							)
						}
					)
				)
				|> (\f : Tropic ->
					eitherMap(
						state.fixedRow,
						\fr -> {
							bStyle = filtermap(fr.style, \st -> switch (st) {
								TGraphicsStyle() : {a : Maybe<TGraphicsStyle> = Some(st); a};
								default : None()
							});

							onFixedRowClick = tryExtractStruct(fr.style, MOnClick(nop));

							TCopySize(
								MSelect2T(manager, p2, "MDataTableFixedRow", [], rws0, \fr2, p3 ->
									firstElement(fr2, MCustomLine(TEmpty(), [])).content
									|> (\f4 -> eitherMap(
										onFixedRowClick,
										\onclk ->
											MComponent([
												MOnClick(onclk.click),
												MRippleType(const(MRippleFill())),
												state.clickEnabled
											], \__ -> f4),
										f4
									))
									|> (\f4 -> m2t(f4, p3))
								),
								\tr -> TRounded(2., 2., 0., 0., bStyle, tr),
								false
							)
							|> (\t -> TShow(fr.show, t))
							|> (\t -> TLines2(t, f))
						},
						f
					)
				)
			)
		)
		|> (\f -> TAvailableHeight(f, rowsAvailableHeight))
		|> (\f -> TConstruct(
				concat(
					if (paginationState.isEmpty) [
						makeSubscribeUns(
						fOr(const(paginationState.auto), scrollEnabled),
						\v ->
							if (v)
								[make4Subscribe(
									rowsBoxH,
									expandRow,
									showFixedRow,
									rowsCountB,
									\height, er, fr, rowsCount -> {
										newRowsCount =
											forceRange(
												floor(height / countRowHeight(er)),
												minimumRows(er),
												rowsCount + b2i(fr)
											) - b2i(fr);

										pg = getValue(page);
										if (pg.second != newRowsCount)
											next(page,
												Pair(
													forceRange(
														pg.first * newRowsCount / max(pg.second, 1),
														0,
														max(rowsCount - 1, 0)
													),
													newRowsCount
												)
											);
								})()]
							else
								[makeSubscribe(rowsCountB, paginationState.updateRowsPerPage)()]
					)] else
						[],

					if (state.fullWidth && !state.widthByContent && length(state.columnWidths) > 0) [
						make4Subscribe(screenW, expandRow, fmerge(state.columnWidths), fmerge(state.minWidths), \width, er, colWs, minWs -> {
							cutFirstColumn = \arr : [flow] -> if (lifted || glued) colsTail(state, arr) else arr;

							miw =
								mapi(state.columns, \i, c -> {
									if (isWidthByContent(c))
										colWs[i]
									else
										minWs[i]
								})
								|> (\arr ->
									mapSplitWithoutHead(arr, er,
										\r -> either(maxA(r), -1.)
									)
								)
								|> cutFirstColumn;

							maw =
								mapi(state.columns, \i, c -> {
									if (isWidthByContent(c))
										colWs[i]
									else {
										w = extractStruct(c.style, MMaxWidth(-1)).width;

										if (w == -1)
											-1.
										else
											max(i2d(w) + state.cellBorder, minWs[i])
									}
								})
								|> (\arr ->
									mapSplitWithoutHead(arr, er,
										\r -> if (contains(r, -1.)) -1. else either(maxA(r), -1.)
									)
								)
								|> cutFirstColumn;

							newSizes =
								distributeSizesEvenly(
									miw,
									maw,
									max(width - state.externalBorder * 2. - reorderIconSpace, getValue(footerMinWidth))
									- if (glued) dsum(colsHead(state, colWs)) else 0.
								);

							iteri(
								splitWithoutHead(state.columnWidths, er) |> cutFirstColumn,
								\i, r -> iter(r, \r0 : Transform<double> ->
									switch (r0) {
										DynamicBehaviour(__, __):
											nextDistinct(r0, newSizes[i]);
										default: {}
									}
								)
							)
						})] else []
					),
					f
				)
		)
		|> (\t -> TAttachAvailableHeight(t, rowsBoxH))
		|> (if (!paginationState.anyType && isFConst(m.rows) && !fgetValue(scrollEnabled) && isFConst(expandRow))
				makeTropicConstantHeight(Some(i2d(fgetValue(rowsCountB)) * countRowHeight(fgetValue(expandRow))))
			else idfn)
		|> (\t -> if (state.separators) TLines2(m2t(MSeparator(true), p), t) else t)
		// Header
		|> (\f -> TLines2(tableHeader(headers, p), f))
		|> (\t : Tropic -> eitherMap(innerScrollState, \is -> {
				defaultScrollBarStyle : TScrollbars = extractStruct(is.style, getMaterialScrollBar());

				scrollStyle = concat(is.style, [
					TScrollInspectShowScrolling(is.visibilityInspector),
					MScrollPosition(is.position),
					MScrollDisableOutOfBounds(const(true)),
					TScrollEnabled(is.enabled),
					MScrollbars(
						TScrollbarStyle(defaultScrollBarStyle.x with visible = is.enabled),
						TScrollbarStyle(defaultScrollBarStyle.y with visible = is.enabled)
					)
				]);

				scroll =
					if (paginationState.auto || (!paginationState.anyType && fgetValue(scrollEnabled)))
						MScroll(t, TFillMin(0., minTableHeight - footerHeight), arrayPush(scrollStyle, MScrollCropByContent()))
					else {
						contentHeight = make(0.);
						MScroll(MAttachHeight(t, contentHeight), TFillXHT(contentHeight), scrollStyle)
					}

				MScroll2T(manager, p, scroll, m2t)
			}, t))
		|> MDTFirstColumn(state, p, headers, rows, sorting, innerScrollState, expandRow, rowsBoxScrollPosition,
				rowBackgroundStyle, selectedBgStyle,visibleRowsHeight, rowsAvailableHeight)
		|> addHeaderActions(p)
		// Bottom bar
		|> (\f : Tropic -> TLines2(f, footer))
		// Card
		|> (\f ->
			if (contains(style, MInCard())) {
				MShapeFrame(p, [Fill(if (getLightBackground(p)) white else 0x424242)], f, "MDynamicDataTable")
				|> (\f2 -> TShadowShape(p, const(2.0), f2, RectangleShape("MDynamicDataTable")))
			} else
				f)
		|> (\f ->
			TConstruct(
				concat(
					[\ -> fBidirectionalLink(
						fpair(page, expandRow),
						fpair(rowsBoxScrollPosition.position, expandRow),
						\pair -> if (paginationState.anyType)
							nextDistinct(rowsBoxScrollPosition.position, Point(0., i2d(pair.first.first) * countRowHeight(pair.second))),
						\pair ->
							paginationState.updatePageNumber(floor(pair.first.y) / floor(countRowHeight(pair.second)))
					)],
					state.subs
				),
				f
			)
		)
		|> (\t -> TAvailableWidth(t, if (isInnerScroll) fmin(screenW, tableWidth(expandRow)) else tableWidth(expandRow)))
		|> (\t -> if (state.fullWidthAdvanced) TTweak([TSnapSize(8., -1., false)], t, TEmpty()) else t)
		|> (if (!paginationState.anyType && isFConst(m.rows) && !fgetValue(scrollEnabled)) makeTropicConstantHeight(None()) else idfn)
		|> (if (state.fullWidth || isAnyWidthByContent || isInnerScroll || !isDefExpandRow) idfn else makeTropicConstantWidth(None()))
		|> (\t ->
			if (state.fullWidth) {
				table = if (paginationState.auto || fgetValue(scrollEnabled)) t else TAttachHeight(t, tableHeight);
				box = if (paginationState.auto || fgetValue(scrollEnabled)) TFillXY() else TFillXHT(tableHeight);
				MScroll2T(manager, p, MScroll(table, box, [MScrollCropByContent()]), m2t)
			} else t)
	})
	|> (\f ->
		MComponentGroup2T(
			manager,
			parent,
			"MDynamicDataTable",
			[
				MEnabled(state.enabled),
				IScriptBehaviour("current_page", paginationState.pageNumber, ISInputValue([], "int", true)),
				IScriptBehaviour("sort_by", sorting.sortColumnNumber, ISInputValue(map(state.columns, \c -> fgetValue(c.header)), "index", true))
			],
			f
		)
	)
	|> (\t ->
		if (isInnerScroll || !isDefExpandRow) TAttachAvailableWidth(t, screenW)
		else if (state.fullWidth) TAttachWidth2(TFillX(), screenW, t)
		else t
	)
}

MDTState(
	manager : MaterialManager,
	columns : [MColumnDynamic],
	cellWs : Transform<[[DynamicBehaviour<double>]]>,
	minWidths : [Transform<double>],
	columnWidths : [Transform<double>],
	rowHeight: double,
	lineHeight : (bool) -> double,
	headerActions : MHeaderActions,
	replaceHeader : bool,
	separators : bool,
	selection : MListSelection,
	selectionEnabled : MListSelectionEnabled,
	onClick : MOnListClick,
	clickEnabled : MClickEnabled,
	fixedRow : Maybe<MFixedRow>,
	fullWidthAdvanced : bool,
	fullWidth : bool,
	cellBorder : double,
	externalBorder : double,
	showRowNumbers : bool,
	widthByContent : bool,
	headCount : int,
	isCheckboxColumn : (int) -> bool,
	makeChkbox : (MFocusGroup, DynamicBehaviour<bool>, Transform<bool>, () -> void, Maybe<[MIconStyle]>) -> Tropic,
	makeCells : (MFocusGroup, int, [Material]) -> [Tropic],
	cellBox : (int, bool) -> Tropic,
	enabled : Transform<bool>,
	subs : [() -> () -> void],
	m2t : (Material, MFocusGroup) -> Tropic
);

makeMDataTableState(
	m : MDynamicDataTable,
	manager : MaterialManager,
	parent : MFocusGroup,
	m2t : (Material, MFocusGroup) -> Tropic,
	rowsCountB : Transform<int>,
	paginationState : MPaginationState,
	sorting : MSortingState
) -> MDTState {
	style = m.style;

	cellBorder = 16.;
	externalBorder = 16.;

	enabled = extractStruct(style, MEnabled(const(true))).enabled;

	rowHeight = extractStruct(style, MRowHeight(if (extractStruct(style, MCondensed(false)).condensed) 32. else 48.)).height;
	headerActions = extractStruct(style, MHeaderActions(TEmpty(), []));
	replaceHeader = contains(headerActions.style, MReplaceHeader());
	headerRowHeight = if (replaceHeader) 0. else extractStruct(style, MHeaderRowHeight(rowHeight)).height;
	lineHeight = \isHeader -> if (!isHeader) rowHeight else headerRowHeight;

	separators = !contains(style, MNoSeparators());
	onClick : MOnListClick = extractStruct(style, MOnListClick(const(false), nop1));
	clickEnabled : MClickEnabled = extractStruct(style, MClickEnabled(const(true)));

	singleSelection = tryExtractStruct(style, MSingleSelection(make(-1)));
	multiSelection = tryExtractStruct(style, MMultiSelection(make(makeSet())));
	selection : MListSelection =
		extractStruct(style, MListSelection(
			const(isSome(singleSelection) || isSome(multiSelection)),
			isSome(multiSelection),
			false,
			make([])
		));
	selectionEnabled : MListSelectionEnabled = extractStruct(style, MListSelectionEnabled(const([])));

	crop = !contains(style, MNoCrop());
	fixedRow = tryExtractStruct(style, MFixedRow(const(false), [], []));

	fullWidthAdvanced = contains(style, MFullWidthAdvanced());
	fullWidth = contains(style, MFullWidth()) || fullWidthAdvanced;

	checkboxSelection = tryExtractStruct(style, MCheckBoxSelection([]));
	isCheckboxColumn = \i -> isSome(checkboxSelection) && i == 0;
	checkboxColor = eitherMap(checkboxSelection, \cs -> extractMColor(parent, cs.style, MPrimaryColor()), MPrimaryColor());
	checkboxBorder = \rh -> forceRange((rh - 24.) / 2., 0., 12.);
	checkboxColumnWidth = checkboxBorder(rowHeight) * 3. / 2. + standardIconSize - cellBorder;

	makeChkbox = \p, trigger, en, onClk, hStyle -> {
		lh = lineHeight(isSome(hStyle));
		chStyle =
			[MIconButtonBorder(checkboxBorder(lh)), checkboxColor, MEnabled(en), MOnClick(onClk)]
			|> (\st -> eitherMap(hStyle, \hs : [MIconStyle] -> concat3(st, hs, [MUncheckedIconStyle(hs)]), st));

		MCheckBox2T(manager, p, MCheckBox(TEmpty(), trigger, chStyle), m2t)
		|> (\t -> TBorderDir(-checkboxBorder(lh) / 2. - cellBorder / 2., 0., 0., 0., t, p.rtl))
		|> (\t -> TCenterYIn(t, TFixed(0., lh)))
	}

	showRowNumbers = contains(style, MShowRowNumbers());

	widthByContent = contains(style, MWidthByContent());
	headCount = 1 + b2i(showRowNumbers) + b2i(isSome(checkboxSelection));

	columns = m.columns
		|> (\arr -> map(arr, \col ->
			if (widthByContent || contains(col.style, MWidthByContent()))
				MColumnDynamic(col with style = arrayPush(col.style, MWidthByContentLimited(const(-1.), const(-1.))))
			else col
		))
		|> (\arr -> if (showRowNumbers) concat([MColumn("#", "Row number", 80, [MWidthByContentLimited(const(-1.), const(-1.))])], arr) else arr)
		|> (\arr -> if (isSome(checkboxSelection)) concat([MColumn("", "", floor(checkboxColumnWidth), [MMaxWidth(floor(checkboxColumnWidth))])], arr) else arr);

	columnsCount = length(columns);

	cellWs : Transform<[[DynamicBehaviour<double>]]> =
		fselect(rowsCountB, FLift(\rc ->
			generate(0, rc + b2i(isSome(fixedRow)), \__ ->
				generate(0, columnsCount, \i ->
					if (isCheckboxColumn(i)) make(checkboxColumnWidth)
					else make(0.0)
				)
			)
		));

	minWidths = map(columns, \c -> fselect(c.width, FLift(\w -> i2d(w) + cellBorder)));
	columnWidths : [Transform<double>] =
		mapi(columns, \i, col ->
			eitherMap(
				tryExtractStruct(col.style, MWidthByContentLimited(const(-1.), const(-1.))), \mwc ->
				fsubselect(cellWs, FLift(\cWs ->
					fsubselect(paginationState.page, FLift(\pg ->
						fsubselect(sorting.result, FLift(\srt ->	{
							currentRows =
								eitherMap(
									fixedRow,
									\__ -> concat([firstElement(cWs, [])],
										map(subrange(srt, pg.first, pg.second), \idx -> elementAt(tail(cWs), idx, []))
									),
									map(subrange(srt, pg.first, pg.second), \idx -> elementAt(cWs, idx, []))
								);

							(
								if (length(currentRows) != 0)
									fmaxA(map(currentRows, \row -> elementAt(row, i, make(0.))), 0.)
								else
									fi2d(col.width)
							)
							|> (\colW -> fselect3(colW, mwc.minWidth, mwc.maxWidth, \cw, minW, maxW ->
									if (maxW == -1.) max(cw, minW)
									else forceRange(cw, minW, maxW)
								))
							|> (\colW -> faddition(colW, const(cellBorder)))
						}))
					))
				)),
			if (fullWidth)
				make(fgetValue(minWidths[i]))
			else
				minWidths[i]
			)
		);

	cellBox = \i, h -> TSizedWidth(columnWidths[i], lineHeight(h));

	makeCells = \p, j, row -> {
		checkbox = eitherMap(checkboxSelection, \__ ->
			if (j >= 0) {
				selRow = make(contains(getValue(selection.selected), j));
				makeChkbox(p, selRow,
					fsubselect(selectionEnabled.enabled, FLift(\en ->
						fand(selection.enabled, elementAt(en, j, const(true))),
					)),
					\ -> {
						sel = getValue(selection.selected);

						if (selection.multiple) {
							if (!getValue(selRow))
								nextDistinct(selection.selected, removeAll(sel, j))
							else if (!contains(sel, j))
								nextDistinct(selection.selected, arrayPush(sel, j))
						} else {
							if (getValue(selRow))
								nextDistinct(selection.selected, [j])
							else if (selection.toggle)
								nextDistinct(selection.selected, [])
						}
					},
					None()
				)
				|> (\t -> TConstruct(
					[\ -> fconnectSelect(selection.selected, selRow, \s -> contains(s, j))], t
				))
				|> v2a
			}
			else [TFixed(checkboxColumnWidth, 0.)],
			[]
		);

		fullRow = [
			checkbox,
			if (showRowNumbers) [MText(i2s(j + 1), [])] else [],
			row
		] |> concatA;

		mapi(fullRow, \i, cell -> {
			if (i >= columnsCount)
				TEmpty()
			else {
				colStyle = columns[i].style;
				box = cellBox(i, false);
				content =
					eitherMap(
						tryExtractStruct(colStyle, MWidthByContentLimited(const(-1.), const(-1.))), \wbcl ->
						MSelect(fstall(cellWs, 0), \cws -> {
							widthInspector = elementAt(elementAt(cws, j + b2i(isSome(fixedRow)), []), i, make(0.0));
							if (fgetValue(wbcl.maxWidth) == -1.)
								MAttachWidth(cell, widthInspector)
							else
								MInspect([IMaxWidth(widthInspector)], cell)
						}),
						cell
					);

				MCellContent2T(manager, p, content, rowHeight, box, crop && !isCheckboxColumn(i), m2t)
				|> alignCellContent(p, cellBorder, colStyle, box)
			}
		})
	};

	subs = concatA([
			[makeSubscribe(selection.selected, \ar -> {
				maybeApply(singleSelection, \ss -> nextDistinct(ss.selected, if (length(ar) > 0) ar[0] else -1));
				maybeApply(multiSelection, \ms -> nextDistinct(ms.selected, buildSet(ar)));
			})],
			sorting.subs(columns),
			paginationState.subs(rowsCountB, sorting.result)
		])
		|> (\f2 ->
			eitherMap(
				singleSelection,
				\ss ->
					concat([makeSubscribe(ss.selected, \ar -> nextDistinct(selection.selected, if (ar >= 0) [ar] else []))], f2),
				f2
			)
		)
		|> (\f2 ->
			eitherMap(
				multiSelection,
				\ms ->
					concat([makeSubscribe(ms.selected, \ar -> nextDistinct(selection.selected, set2array(ar)))], f2),
				f2
			)
		);

	MDTState(
		manager,
		columns,
		cellWs,
		minWidths,
		columnWidths,
		rowHeight,
		lineHeight,
		headerActions,
		replaceHeader,
		separators,
		selection,
		selectionEnabled,
		onClick,
		clickEnabled,
		fixedRow,
		fullWidthAdvanced,
		fullWidth,
		cellBorder,
		externalBorder,
		showRowNumbers,
		widthByContent,
		headCount,
		isCheckboxColumn,
		makeChkbox,
		makeCells,
		cellBox,
		enabled,
		subs,
		m2t
	)
}

MPaginationState(
	pagination : MPagination,
	page : DynamicBehaviour<Pair<int, int>>,
	pageNumber : DynamicBehaviour<int>,
	rowsPerPage : Transform<int>,
	updatePageNumber : (int) -> void,
	updateRowsPerPage : (int) -> void,
	anyType : bool,
	auto : bool,
	isEmpty : bool,
	hideAutoPaginationFooter : bool,
	subs : (Transform<int>, Transform<[int]>) -> [() -> () -> void]
);

makeMPaginationState(style : [MDataTableStyle]) -> MPaginationState {
	reorderList = tryExtractStruct(style, MListReorder(make([]), const(false)));
	currentPage = tryExtractStruct(style, MCurrentPage(make(0)));
	goToIndex = tryExtractStruct(style, MGoToIndex(make(-1)));
	paginationDef = MPagination(make(0), []);
	pagination = if (isSome(reorderList)) paginationDef else extractStruct(style, paginationDef);
	isEmpty = pagination.rowsPerPage == [];
	auto = isNone(reorderList) && isEmpty && contains(style, MPaginationAutoScaling());
	anyType = !isEmpty || auto;

	hideAutoPaginationFooter = contains(style, MHideAutoPaginationFooter());

	page = make(Pair(0, 0));

	updatePageNumber = \newPageNumber ->
		nextDistinct(page, Pair(newPageNumber, getValue(page).second));

	updateRowsPerPage = \newRowsPerPage ->
		nextDistinct(page, Pair(getValue(page).first, newRowsPerPage));

	pageNumber = make(0);
	rowsPerPage = fSecondOfPair(page);

	subs = \rowsCountB, sortingResult -> [
		\ -> fBidirectionalLink(page, pageNumber,
			\pair -> nextDistinct(pageNumber, pair.first / max(pair.second, 1)),
			\num -> {
				rpp = fgetValue(rowsPerPage);
				rowsCount = fgetValue(rowsCountB);
				updatePageNumber(forceRange(num * rpp, 0, rowsCount - 1))
			})
		]
		|> (\sbs ->
			eitherMap(
				currentPage,
				\cp ->
					concat(
						[
							make2Subscribe(cp.page, rowsCountB, \pg, rowsCount -> {
								rpp = fgetValue(rowsPerPage);
								updatePageNumber(max(0, min(pg * rpp, rowsCount -1)))
							}),
							\ -> fconnectSelect(page, cp.page, \pg -> pg.first / max(pg.second, 1))
						],
						sbs
					),
				sbs
			)
		)
		|> (\sbs ->
			eitherMap(
				goToIndex,
				\gti ->
					concat(
						[
							make2Subscribe(gti.index, rowsCountB, \ind, rowsCount ->
								fromArrayIndex([ind],  Pair(0, rowsCount), rowsCount, fgetValue(sortingResult))
								|> (\f3 -> if (length(f3) > 0) {
										rpp = fgetValue(rowsPerPage);
										updatePageNumber(if (rpp == 0) 0 else f3[0] / rpp * rpp)
									})
							)
						],
						sbs
					),
				sbs
			)
		);

	MPaginationState(
		pagination,
		page,
		pageNumber,
		rowsPerPage,
		updatePageNumber,
		updateRowsPerPage,
		anyType,
		auto,
		isEmpty,
		hideAutoPaginationFooter,
		subs
	)
}

MSortingState(
	result : Transform<[int]>,
	sortedBy : DynamicBehaviour<MDataTableSorting>,
	sortColumnNumber : DynamicBehaviour<int>,
	hasExtOrderBy : bool,
	onColumnClick : (int, Maybe<MSort>, bool) -> void,
	subs : ([MColumnDynamic]) -> [() -> () -> void]
);

MDataTableSorting(
	column : int,
	ascending : bool,
	sortInfo : Maybe<MSort>,
);

makeMSortingState(rows : Transform<[[Material]]>, style : [MDataTableStyle]) -> MSortingState {
	reorderList = tryExtractStruct(style, MListReorder(make([]), const(false)));
	defaultParam : DynamicBehaviour<MSortingParam> = extractStruct(style, MSortingDefault(make(MSortingParam(0, true)))).sorting;
	listSortedCallback = extractStruct(style, MListSorted(nop1)).newOrderCallback;
	sortedBy : DynamicBehaviour<MDataTableSorting> = make(MDataTableSorting(-1, true, None()));
	sortColumnNumber = make(-1);
	sortUpdating = tryExtractStruct(style, MUpdateSorting(0));
	hasExtOrderBy = contains(style, MExternalSort());

	updatingTrigger = make(true);
	maybeApply(sortUpdating, \su -> updateTrigger(updatingTrigger, su.delay));

	result = fsubselect(rows, FLift(\rws : [[Material]] ->
		fselect2(sortedBy, updatingTrigger, FLift2(\sb : MDataTableSorting, __ -> {
			sorted =
				if (sb.column >= 0 && !hasExtOrderBy)
					eitherFn(
						sb.sortInfo,
						\sInfo ->
							mergeSort(
								enumFromTo(0, length(rws) - 1),
								\a, b ->
									if (sb.ascending) sInfo.colCompares(a, b)
									else sInfo.colCompares(b, a)
							),
						\ ->
							map(
								sortCustom(
									mapi(rws, \j, r ->
										Pair({
											cellM = elementAt(r, sb.column, TEmpty());
											switch (cellM) {
												MMutable(mutContent): fgetValue(mutContent);
												TMutable(mutContent): fgetValue(mutContent);
												default: cellM
											}
										}, j)),
									firstOfPair, sb.ascending
								),
								secondOfPair
							)
					)
				else enumFromTo(0, length(rws) - 1);
			listSortedCallback(sorted);
			sorted
		})
	)));

	onColumnClick = \i, columnSortStyle, checkIsCurrent ->
		if (!checkIsCurrent || getValue(defaultParam).colIndex == i) {
			sb = fgetValue(sortedBy);
			
			if (sb.column == i && !sb.ascending) {
				nextDistinct(defaultParam, MSortingParam(-1, true));
				next(sortedBy, MDataTableSorting(-1, false, None()))
			} else {
				asc =
					if (sb.column == -1)
						getValue(defaultParam).isAsc
					else
						sb.column != i;
				nextDistinct(defaultParam, MSortingParam(i, asc));
				next(sortedBy, MDataTableSorting(i, asc, columnSortStyle))
			}
		}

	subs = \columns -> [
		\ -> fBidirectionalLink(sortedBy, sortColumnNumber,
			\sb -> nextDistinct(sortColumnNumber, sb.column),
			\num -> {
				sortColumn =
					if (num >= 0 && isNone(reorderList))
						tryExtractStruct(columns[num].style, MSort(\__, __ -> 0))
					else
						None();

				nextDistinct(sortedBy, MDataTableSorting(num, !getValue(defaultParam).isAsc, sortColumn));
			})
	];

	MSortingState(
		result,
		sortedBy,
		sortColumnNumber,
		hasExtOrderBy,
		onColumnClick,
		subs
	)
}

MInnerScrollState(
	lifted : bool,
	glued : bool,
	gluedStyle : Maybe<[MGluedFirstColumnModeStyle]>,
	enabled : Transform<bool>,
	visibilityInspector : DynamicBehaviour<bool>,
	visible : Transform<bool>,
	position : DynamicBehaviour<Point>,
	style : [MScrollStyle]
);

makeMInnerScrollState(
	fullWidth : bool,
	screenW : Transform<double>,
	minWidthsSum : Transform<double>,
	externalBorder : double,
	style : [MDataTableStyle]) -> Maybe<MInnerScrollState> {

	innerScroll = tryExtractStruct(style, MDataTableInnerScroll(MStandardMode(), []));

	maybeMap(innerScroll, \is -> {
		lifted = is.mode == MLiftedFirstColumnMode();
		gluedStyle = switch (is.mode) {
			MGluedFirstColumnMode(gstyle) : Some(gstyle);
			default : None()
		};
		glued = isSome(gluedStyle);
		enabled = if (fullWidth) fless(screenW, faddition(minWidthsSum, const(2. * externalBorder))) else const(true);
		visibilityInspector = make(false);
		visible = fstall(fand(enabled, visibilityInspector), 0);
		position = extractStruct(is.style, MScrollPosition(makePoint())).position;
		uiEnabled = fand(enabled, extractStruct(style, MEnabled(const(true))).enabled);
		MInnerScrollState(lifted, glued, gluedStyle, uiEnabled, visibilityInspector, visible, position, is.style)
	});
}

MDTTitles(
	state : MDTState,
	p : MFocusGroup,
	sorting : MSortingState,
	defaultHS : MHeaderStyle,
	headerStyle : Maybe<MHeaderStyle>,
	isReorder : bool,
	scrollEnabled : Transform<bool>,
	rowsCountB : Transform<int>,
	page : DynamicBehaviour<Pair<int, int>>,
) -> [Tropic] {
	mapi(state.columns, \i0, c : MColumnDynamic -> if (state.replaceHeader) state.cellBox(i0, true) else {
		colHeaderStyle = tryExtractStruct(concat(c.style, eitherMap(headerStyle, \e -> [e], [])), defaultHS);
		arrowStyle = eitherMap(colHeaderStyle, \chs -> style2MIconStyle(chs.textStyle), []);
		rightAlign = (contains(c.style, RightAlign()) != (p.rtl && !isUrlParameterTrue("new"))) || contains(c.style, if (p.rtl) StartAlign() else EndAlign());
		sortStyle = if (isReorder) None() else tryExtractStruct(c.style, MSort(\__, __ -> 0));
		sortable = isSome(sortStyle) || (!isReorder && (sorting.hasExtOrderBy || contains(c.style, MAutoSort())));
		i = i0 - state.headCount + 1;

		defHeaderTitle = \isSelected : bool -> {
			defFont = if (isSelected) MCaptionColumnSelected() else MCaptionColumn();
			TSelect(c.header, \header ->
				MEllipsisText2T(
					state.manager,
					p,
					MEllipsisText(
						header,
						eitherMap(colHeaderStyle, \hs -> concat([defFont], hs.textStyle), [defFont])
					),
					state.m2t
				)
			)};

		makeHeaderTitle = 
			eitherMap(
				tryExtractStruct(c.style, MColumnCustomTitle(\__ -> TEmpty())),
				\customTitle -> \isSelected -> state.m2t(customTitle.fn(isSelected), p),
				defHeaderTitle
			);

		(if (sortable) {
			hover = make(false);
			clickColumn = \checkIsCurrent -> sorting.onColumnClick(i, sortStyle, checkIsCurrent);
			clickColumn(true);

				TIfLazy2(
					fselect(sorting.sortedBy, FLift(\sb : MDataTableSorting -> sb.column == i)),
					\isSorting ->
						TIfLazy2(
							fand(state.enabled, hover),
							\h ->
								TCols(
									[
										makeHeaderTitle(h)
											|> (\t -> TBorderDir(0.0, 0.0, 4.0, 0.0, t, p.rtl)),
										if (isSorting)
											TIfLazy2(fselect(sorting.sortedBy, FLift(\sb -> sb.ascending)), \sb0 ->
												MIcon2T(p, if (sb0) "arrow_upward" else "arrow_downward", concat([MIconSize(15.)], arrowStyle)),
												true
											)
										else if (h)
											MIcon2T(p, "arrow_upward", concat([MIconSize(15.), FillOpacity(0.24)], arrowStyle))
										else
											TFixed(16., 0.)
									]
										|> (\f2 -> if (rightAlign) reverseA(f2) else f2)
								),
							false
						),
					false
				)
				|> (\t -> mouseOnDownAroundCommon(state.manager, [
						THovering(hover),
						MOnClick(\ -> clickColumn(false)),
						TEnabled(state.enabled)
					], t))
		} else
			makeHeaderTitle(false)
		)
		|> (\f2 : Tropic ->
			if (c.tooltip == const(""))
				f2
			else
				MTooltip2T(state.manager, p,
					MTooltip(f2, MSelect(c.tooltip, \t -> MText(t, [MTooltipDesktop(), sameLightMColor(p)])), [MBlockHover()]),
					state.m2t
				)
		)
		|> (\t -> if (state.isCheckboxColumn(i0)) {
				selAll = make(false);
				selPage =
					fselect3(
						fif(scrollEnabled, fselect(rowsCountB, FLift(\rc -> Pair(0, rc))), page),
						sorting.result,
						fsubselect(state.selectionEnabled.enabled, FLift(fmerge)),
						\pg, sr, en ->
							fold(
								subrange(sr, pg.first, min(pg.second, length(sr))),
								[], \acc, j ->
									ifArrayPush(
										acc, 
										elementAt(en, j, true), 
										j
									)
							)
					);

				state.makeChkbox(p, selAll,
					if (state.selection.multiple)
						fand(state.selection.enabled, fselect(selPage, FLift(\pg -> length(pg) > 0)))
					else
						const(false),
					\ -> nextDistinct(state.selection.selected,
						if (getValue(selAll))
							concat(getValue(state.selection.selected), fgetValue(selPage)) |> uniq
						else 
							filter(getValue(state.selection.selected), \x -> !contains(fgetValue(selPage), x))
					),
					Some(arrowStyle)
				)
				|> (\t2 ->
					if (state.selection.multiple)
						TConstruct(
							[
								make2Subscribe(state.selection.selected, selPage, \sel, pg ->
									nextDistinct(
										selAll,
										length(pg) != 0 && length(sel) >= length(pg)
											&& forall(pg, \j -> contains(sel, j))
									)
								)
							],
							t2
						)
					else
						t2
				)
			} else t
		)
		|> alignCellContent(p, state.cellBorder, c.style, state.cellBox(i0, true))
	});
}

MDTFirstColumn(
	state : MDTState,
	parent : MFocusGroup,
	headers : [Tropic],
	rows : Transform<[[Material]]>,
	sorting : MSortingState,
	innerScrollState : Maybe<MInnerScrollState>,
	expandRow : Transform<int>,
	rowsBoxScrollPosition : TScrollPosition,
	rowBackgroundStyle : Maybe<MRowBackgroundStyle>,
	selectedBgStyle : Maybe<MSelectedBackgroundStyle>,
	visibleRowsHeight : Transform<double>,
	rowsAvailableHeight : Transform<double>,
) -> (Tropic) -> Tropic {
	\table ->
		eitherMap(innerScrollState, \is -> if (is.glued || is.lifted) {

			implementExpandRow = \isHeader ->
				\t -> TBorderT(zero, zero, zero, fselect(expandRow, FLift(\er -> state.lineHeight(isHeader) * (i2d(er - 1)))), t);

			firstColumnWidth = arrayPush(colsHead(state, state.columnWidths), const(state.externalBorder)) |> fsum;

			firstColumnHeader =
				(
					if (is.lifted) TFixed(0., state.lineHeight(true))
					else colsHead(state, headers) |> TCols |> TBorderLeft(state.externalBorder)
				)
				|> implementExpandRow(true);

			cells =
				fselect2(sorting.result, rows, FLift2(\sortRes, rws -> {
					map(sortRes, \i -> elementAt(rws, i, []))
					|> (\arr -> eitherMap(state.fixedRow, \fr -> concat([fr.cols], arr), arr))
					|> (\arr -> mapi(arr, \i0, row -> {
						i = i0 - b2i(isSome(state.fixedRow));
						state.makeCells(parent, i, row)
						|> (\cells -> colsHead(state, cells))
						|> TCols
						|> (\t ->
							if (is.lifted)
								TAlpha(fselect(is.position, FLift(\isp -> max(0.5, 1. - abs(isp.x) / 100.))), t)
								|> TBorderBottom(state.rowHeight)
							else t
						)
						|> implementExpandRow(false)
						|> TBorderLeft(state.externalBorder)
						|> (\t -> if (is.glued)
								eitherMap(rowBackgroundStyle, \rb -> if (i == -1) t else
									TIfLazy2(
										fselect(state.selection.selected, FLift(\arr2 -> contains(arr2, sortRes[i]))),
										\v -> if (v && isSome(selectedBgStyle)) TFrame(0., 0., eitherMap(selectedBgStyle, \sbs -> sbs.style, []), t)
											else TFrame(0., 0., rb.fn(sortRes[i]), t),
										false
									), t
								)
							else t
						)
						|> (\t -> if (is.glued)
							MComponent2T(state.manager, parent, "MDataTableLine" + i2s(i), [
								MOnClick(\ -> MListOnClickHandler(state.selection, state.selectionEnabled, state.onClick)(sortRes[i])),
								MRippleType(const(MRippleFill())),
								state.clickEnabled
							], \__ -> t, state.m2t) else t)
						|> (\t -> if (state.separators && is.glued) TLines2(t, MSeparator2T(state.manager, parent, true)) else t)
					}))
				}));

			firstColumn =
				TSelect(eitherMap(state.fixedRow, \__ -> fselect(cells, FLift(tail)), cells), TLines)
				|> (\t -> MScroll2T(state.manager, parent, MScroll(t, TFillXY(), [
						MScrollCropByContent(),
						TScrollEnabled(const(false)),
						MScrollbars(
							TScrollbarStyle(getMaterialScrollBar().x with visible = const(false)),
							TScrollbarStyle(getMaterialScrollBar().y with visible = const(false))
						),
						rowsBoxScrollPosition,
						MScrollBound(const(false), const(false))
					]), state.m2t))
				|> (\t -> eitherMap(state.fixedRow, \fr -> {
						bStyle =
							filtermap(fr.style, \st -> switch (st) {
								TGraphicsStyle() : {a : Maybe<TGraphicsStyle> = Some(st); a};
								default : None()
							});

						TSelect(cells, \cells0 -> firstElement(cells0, TEmpty()))
						|> (\t2 -> TCopySize(t2, \tr -> TRounded(2., 2., 0., 0., bStyle, tr), false))
						|> (\t2 -> TShow(fr.show, t2))
						|> (\t2 -> TLines2(t2, t))
					}, t))
				|> (\t -> TAlpha(fif(parent.enabled, const(1.), const(if (getLightBackground(parent)) 0.26 else 0.3)), t))
				|> (\t -> TAvailableHeight(t, rowsAvailableHeight))
				|> (\t -> if (state.separators && is.glued) TLines2(MSeparator2T(state.manager, parent, true), t) else t)
				|> (\t -> TAvailableWidth(t, firstColumnWidth))
				|> (\t -> TLines2(firstColumnHeader, t))
				|> (\t ->
						eitherMap(is.gluedStyle, \gStyle ->
							TGroup2(
								TShow(is.visible, t),
								TShow(
									extractStruct(gStyle, MSeparatorVisible(is.visible)).visible,
									TAvailableHeight(
										MSeparator2T(state.manager, parent, false),
										faddition(visibleRowsHeight, fselect(expandRow, FLift(\er -> state.lineHeight(true) * i2d(er))))
									)
								)
								|> (\sep -> TBorderT(firstColumnWidth, zero, zero, zero, sep))
							),
							t
						)
				);

			TGroup2(
				if (is.glued) TBorderT(fif(is.visible, firstColumnWidth, zero), zero, zero, zero, table) else table,
				firstColumn
			)
		} else table, table)
}

MDTFooter(
	manager : MaterialManager,
	parent : MFocusGroup,
	paginationState : MPaginationState,
	rowsCountB : Transform<int>,
	scrollEnabled : Transform<bool>,
	noFooter : bool,
	footerHeight : double,
	footerMinWidth : DynamicBehaviour<double>,
	m2t : (Material, MFocusGroup) -> Tropic
) -> Tropic {

	pagination = paginationState.pagination;
	page = paginationState.page;
	fixPaginationCurrent = \current -> forceRange(current, 0, length(pagination.rowsPerPage) - 1);
	
	footer =
		if (paginationState.anyType)
			MSelect2T(manager, parent, "MDynamicDataTableFooter", [], rowsCountB, \rowsCount, p2 -> {
				makeFooterButton = \title : string, makeUpdatedRow : (Pair<int, int>) -> int, makeEnabled : (Pair<int, int>) -> bool ->
					MIconButton2T(
						manager,
						p2,
						MIconButton(
							title,
							\ -> paginationState.updatePageNumber(makeUpdatedRow(getValue(page))),
							[],
							[MEnabled(fselect(page, FLift(makeEnabled)))]
						),
						m2t
					)
					|> TCenterY;

				showFooter =
					eitherMap(minA(pagination.rowsPerPage),
						\rpp -> const(rowsCount >= rpp),
						fOr(const(!paginationState.hideAutoPaginationFooter), fselect(paginationState.rowsPerPage, FLift(\rpp -> rowsCount > rpp)))
					);

				if (!paginationState.isEmpty) {
					selectedRowsPerPage = fixPaginationCurrent(getValue(pagination.current));
					paginationState.updateRowsPerPage(pagination.rowsPerPage[selectedRowsPerPage])
				};

				
				concatA([
					[TFillX()],
					if (length(pagination.rowsPerPage) > 1)
						[
							MText2T(p2, _("Rows per Page:"), [MCaption()])
							|> TCenterY
							|> (\t -> TBorder(8., 0., 16., 0., t)),
							MDropDown2T(
								manager,
								p2,
								MDropDown(
									pagination.current,
									"",
									map(pagination.rowsPerPage, toString),
									[MDataTableFooter(), MCroppedButton()]
								),
								m2t
							)
							|> (\f2 ->
								TConstruct([
									makeSubscribe2(pagination.current, \c ->
										paginationState.updateRowsPerPage(pagination.rowsPerPage[c])
									)
								], f2)
							)
							|> TCenterY
							|> TBorderRight(16.)
						]
					else
						[],

					[
						TSelect(page, \pg -> {
							text =  formatString(
								if (parent.rtl) _("%1 of %2-%3") else _("%3-%2 of %1"),
								[i2s(rowsCount), i2s(max(min(pg.first + pg.second, rowsCount), 0)), i2s(min(pg.first + 1, rowsCount))]
							);

							MText2T(p2, text, [MCaption()])
						})
							|> TCenterY
							|> TBorderRight(16.),
						makeFooterButton(
							"first_page",
							\__ -> 0,
							\pg -> pg.first > 0
						)
							|> hideIfLittlePages(rowsCount, paginationState.rowsPerPage),
						makeFooterButton(
							"navigate_before",
							\pg -> max(pg.first - pg.second, 0),
							\pg -> pg.first > 0
						),
						makeFooterButton(
							"navigate_next",
							\pg -> min(pg.first + pg.second, rowsCount - if (fgetValue(scrollEnabled)) pg.second else 0),
							\pg -> (rowsCount > 0) && (pg.first + pg.second < rowsCount)
						),
						makeFooterButton(
							"last_page",
							\pg -> (rowsCount - 1) / pg.second * pg.second,
							\pg -> pg.first + pg.second < rowsCount
						)
							|> hideIfLittlePages(rowsCount, paginationState.rowsPerPage)
					]
				])
				|> (\t -> TColsDir(t, parent.rtl))
				|> (\t -> TAvailableHeight(t, const(footerHeight)))
				|> makeTropicConstantHeight(footerHeight |> Some)
				|> (\t -> TShowLazy(showFooter, \ -> t))
			})
		else if (noFooter)
			TEmpty()
		else
			TFixed(0., footerHeight);

	footer
	|> (\t -> TAttachMinWidth(t, footerMinWidth));
}

MCellContent2T(manager : MaterialManager, parent : MFocusGroup, c : Material, rowHeight : double, box : Tropic, crop : bool, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	wrapCellContent = \m -> MCellContent2T(manager, parent, m, rowHeight, box, crop, m2t);
	wrapCellContentDef = \m -> MCellContentDefault2T(parent, m, box, crop, m2t);

	switch (c) {
		MSmallEditDialog(__, __, __): {
			MSmallEditDialog2T(manager, parent, c, m2t)
		}
		MSwitchControl(__, __): {
			TBorder(-4.0, -8., -4.0, -8., MSwitchControl2T(manager, parent, c, m2t))
		}
		MDropDown(__, __, __, __): {
			TBorder(-24., 0., -24., 0., MDropDown2T(manager, parent, c, m2t))
		}
		MDropDownMenu(__, __, __): {
			TBorder(-24., 0., -24., 0., MDropDownMenu2T(manager, parent, c, m2t))
		}
		MText(text, style): {
			MEllipsisText2T(manager, parent, MEllipsisText(text, replaceStructMany(style, [MShowTooltip(const(true))])), m2t)
		}
		MIconButton(name, onClick, style, state): {
			MIconButton2T(manager, parent, MCellIconButton(name, onClick, style, state, rowHeight), m2t)
		}
		MTooltip(cont, tooltip, st): {
			MTooltip2T(manager, parent, MTooltip(wrapCellContent(cont), tooltip, st), m2t)
		}
		MConstruct(cons, content): {
			TConstruct(cons, wrapCellContent(content));
		}
		MShow(show, content): {
			TShow(show, wrapCellContent(content));
		}
		MVisible(visible, content): {
			TVisible(visible, wrapCellContent(content));
		}
		MMutable(contentT): {
			TMutable(fselect(contentT, FLift(wrapCellContent)))
		}
		MIf(cond, contentA, contentB): {
			TIf(cond, wrapCellContent(contentA), wrapCellContent(contentB))
		}
		MGroup(elements): {
			TGroup(map(elements, wrapCellContent))
		}
		MGroup2(m1, m2): {
			TGroup2(wrapCellContent(m1), wrapCellContent(m2))
		}
		MLines(elements): {
			TLinesDir(map(elements, wrapCellContent), parent.rtl)
		}
		MLines2(m1, m2): {
			TLines2Dir(wrapCellContent(m1), wrapCellContent(m2), parent.rtl)
		}
		MCols(elements): {
			TColsDir(map(elements, wrapCellContent), parent.rtl)
		}
		MCols2(m1, m2): {
			TCols2Dir(wrapCellContent(m1), wrapCellContent(m2), parent.rtl)
		}
		MCenter(m): {
			TCenter(wrapCellContent(m))
		}
		MCenterX(m): {
			TCenterX(wrapCellContent(m))
		}
		MCenterY(m): {
			TCenterY(wrapCellContent(m))
		}
		MBorder(l, t, r, b, m): {
			TBorder(l, t, r, b, wrapCellContent(m))
		}
		MClickable(m, onClick): {
			clickable(manager, parent, wrapCellContent(m), onClick)
		}
		MInteractive(interactivity, m): {
			TInteractive(interactivity, wrapCellContent(m))
		}
		MInspect(inspectors, m): {
			TInspect(inspectors, wrapCellContent(m))
		}
		MMenu(button, items, style): {
			switch (button) {
				MIconButton(name, onClick, iconStyle, state): {
					wrapCellContentDef(MMenu(MCellIconButton(name, onClick, iconStyle, state, rowHeight), items, style))
				}
				default: wrapCellContentDef(c);
			}
		}
		MGetFocusGroup(fn): {
			wrapCellContent(fn(parent))
		}
		MGetManager(fn): {
			wrapCellContent(fn(manager))
		}
		MGetMaterial2Tropic(fn): {
			wrapCellContent(fn(m2t))
		}
		default: {
			wrapCellContentDef(c)
		}
	}
}

MCellIconButton(name : string, onClick : () -> void, style : [MIconButtonStyle], state : [MButtonState], rowHeight : double) -> MIconButton {
	iconSize : MIconSize = MIconSize(min(extractStruct(style, MIconSize(if (rowHeight > 32.) 24. else 18.)).size, rowHeight));
	circleBackground : MCircleBackground =
		extractStruct(style, MCircleBackground(MRed(500), 0.))
		|> (\f -> MCircleBackground(f.color, min(f.size, rowHeight)));
	border : MIconButtonBorder =
		MIconButtonBorder(
			forceRange(
				extractStruct(style, MIconButtonBorder(iconSize.size / 2.)).border,
				0.,
				(rowHeight - iconSize.size) / 2.
			)
		);

	MIconButton(name, onClick, replaceStructMany(style, [iconSize, circleBackground, border]), state);
}

MCellContentDefault2T(parent : MFocusGroup, c : Material, box : Tropic, crop : bool,  m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	m2t(c, parent)
	|> (\f -> if (crop) TCopySize2(f, \tr2, f3 -> TCropSize(TMinimumGroup2(tr2, box), f3)) else f)
}

initExpandRow(enabled : Transform<bool>, screenW : Transform<double>, minWidthsSum : Transform<double>, externalBorder : double) -> Transform<int> {
	prevER = ref 1;

	countExpandRow : (double, double) -> int = \aw, widthsSum ->
		(if (^prevER == 1 && (aw - externalBorder * 2.) < widthsSum * 2. / 3. && aw != 0.)
			2
		else if (^prevER == 2 && (aw - externalBorder * 2.) > widthsSum)
			1
		else
			^prevER) |> (\f -> {prevER := f; f});

	fif(
		enabled,
		fselect2(screenW, minWidthsSum, FLift2(countExpandRow)),
		const(1)
	);
}

alignCellContent(parent : MFocusGroup, cellBorder : double, colstyle : [MColumnStyle], box : Tropic) -> (Tropic) -> Tropic {
	\content : Tropic -> {
		right = (contains(colstyle, RightAlign()) != (parent.rtl && !isUrlParameterTrue("new"))) || contains(colstyle, if (parent.rtl) StartAlign() else EndAlign());
		center = contains(colstyle, CenterAlign());
		TCopySize(
			box,
			\tr ->
				TTweak(
					[TAlign(const(if (center) 0.5 else if (right) 1. else 0.), const(0.5))],
					TBorderDir(cellBorder / 2., 0., cellBorder / 2., 1.,
						TAvailable(content, TBorderDir(-cellBorder, 0., 0., -1., tr, parent.rtl)),
						parent.rtl
					),
					tr
				),
			false
		)
	}
}

colsHead(state : MDTState, arr : [?]) -> [?] {
	take(arr, state.headCount)
}

colsTail(state : MDTState, arr : [?]) -> [?] {
	tailFrom(arr, state.headCount)
}

isWidthByContent(col : MColumnDynamic) -> bool {
	containsStruct(col.style, MWidthByContentLimited(const(-1.), const(-1.)))
}

toArrayIndex(arr : [int], pageNumber : int, rowsCount : int, sortedBy : [int]) -> [int] {
	filtermap(arr, \a -> {
		idx = pageNumber + a;
		if (idx >= 0 && idx < rowsCount)
			Some(if (sortedBy != []) sortedBy[idx] else idx)
		else
			None()
	})
}

fromArrayIndex(ar : [int], pg : Pair<int, int>, rowsCount : int, sortedBy : [int]) -> [int] {
	fold(ar, [], \acc, arInd -> {
		if (arInd < rowsCount) {
			a = (if (sortedBy != []) elemIndex(sortedBy, arInd, 0) else arInd) - pg.first;
			if (a >= 0 && a < pg.second)
				arrayPush(acc, a)
			else
				acc
		} else {
			acc
		}
	})
}

hideIfLittlePages(rowsCount : int, rowsPerPage : Transform<int>) -> (Tropic) -> Tropic {
	\t -> TShow(fselect(rowsPerPage, FLift(\rpp -> divCeil(rowsCount, rpp) > 2)), t)
}

divCeil(a : int, b : int) -> int {
	ceil(i2d(a) / i2d(b))
}

updateTrigger(trigger : DynamicBehaviour<bool>, delay : int) -> void {
	timer(delay, \ -> {
		reverseBehaviour(trigger);
		updateTrigger(trigger, delay)
	})
}