import material/internal/material_button;

export {
	MCarousel2T(manager : MaterialManager, parent : MFocusGroup, m : MCarousel, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

goldenRatio = (1. + sqrt(5.)) / 2.;
contentZoomDef = MCarouselContentZoom(1., 1., 0.);

MCarousel2T(manager : MaterialManager, parent : MFocusGroup, m : MCarousel, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	state = makeMCarouselState(manager, m);

	if (state.contentsLength > 0)
		(\p -> {
			boxWH = makeWH();

			mapi(m.contents, \i, c -> MCarouselContent2T(manager, p, c, i, m.style, state, m2t))
			|> TGroup
			|> (\f -> TTranslate(fpoint(state.tx, const(0.)), f))
			|> (\f -> TCrop(const(zeroPoint), state.wh, f))
			|> (\f ->
				TConstruct(
					[
						makeSubscribe(
							fselect(boxWH, FLift(\wh ->
								WidthHeight(
									if (wh.width < 120.) {if (wh.height < 120.) 120. else wh.height * goldenRatio} else wh.width,
									if (wh.height < 120.) {if (wh.width < 120.) 120. else wh.width / goldenRatio} else wh.height
								)
							)),	\wh -> {
								nextDistinct(state.wh, wh);
								nextDistinct(state.tx, -wh.width * i2d(getValue(state.activeIdx)));
								next(state.activeIdx, getValue(state.activeIdx)); // in order to trigger the animation
							}
						)
					],
					f
				)
			)
			|> (\t -> TAttachAvailable(t, boxWH))
			|> (\f ->
				if (state.contentsLength > state.itemsSpan)
					MSwipe2T(
						manager,
						p,
						MSwipe(
							f,
							[
								MOnSwipeLeft(state.swipeFn),
								MOnSwipeRight(state.swipeFn),
								TPressed(state.down),
								MCurrentInteractive(state.swipeInteractive),
								MEnabled(
									eitherMap(
										state.maximize,
										\mx ->
											if (contains(mx.style, MDisableSwipe()))
												fand(state.enabled, fnot(mx.maximized))
											else
												state.enabled,
										state.enabled
									)
								)
							]
						),
						m2t
					)
				else
					f
			)
			|> (\f ->
				if (state.enableChevrons)
					MCarouselChevrons(manager, p, f, state, m2t)
					|> (\f2 ->
						eitherMap(
							state.maximize,
							\mx ->
								if (contains(mx.style, MNoChevrons()))
									TVisible(fnot(mx.maximized), f2)
								else
									f2,
							f2
						)
					)
				else
					f
			)
			|> (\f ->
				if (isSome(state.progress))
					MCarouselProgress(manager, p, f, state)
					|> (\f2 ->
						eitherMap(
							state.maximize,
							\mx ->
								if (contains(mx.style, MNoProgress()))
									TVisible(fnot(mx.maximized), f2)
								else
									f2,
							f2
						)
					)
				else
					f
			)
			|> (\f ->
				[
					(\cz : MCarouselContentZoom, vis0 : bool -> {
						vis =
							eitherMap(
								state.maximize,
								\mx ->
									eitherFn(
										tryExtractStruct(mx.style, cz),
										\mxCz -> {
											fselect(mx.maximized, FLift(\mxd -> {
												zoom = if (mxd) mxCz else cz;
												nextDistinct(state.zoomScale, max(min(1., zoom.max), zoom.min));
												vis0 || mxd
											}))
										},
										\ ->
											if (vis0)
												fselect(mx.maximized, FLift(\mxd -> {
													if (mxd)
														nextDistinct(state.zoomScale, 1.);
													!mxd
												}))
											else
												const(false)
									),
								const(vis0)
							);

						if (vis == const(false)) []
						else {
							czStep : () -> double =
								eitherMap(
									state.maximize,
									\mx ->
										eitherMap(
											tryExtractStruct(mx.style, cz),
											\mxCz -> \ ->
												if (getValue(mx.maximized))
													mxCz.step
												else
													cz.step,
											\ -> cz.step
										),
									\ -> cz.step
								);

							[
								MCarouselZoomButton(manager, parent, m2t, state, "zoom_in", vis, \ -> state.addToContentZoom(czStep())),
								MCarouselZoomButton(manager, parent, m2t, state, "zoom_out", vis, \ -> state.addToContentZoom(-czStep())),
							]
						}
					})
					|> (\makeZoomButtons ->
						eitherMap(
							state.contentZoom,
							\cz -> makeZoomButtons(cz, true),
							makeZoomButtons(contentZoomDef, false)
						)
					),

					eitherMap(
						state.maximize,
						\mx ->
							[
								MIconToggle2T(
									manager,
									p,
									MIconToggle(
										"fullscreen_exit",
										[
											state.buttonsColor, MIconButtonBorder(8.), MElevation(const(2.)),
											MToggleFalseIcon("fullscreen", [state.buttonsColor, MElevation(const(2.))])
										],
										[MEnabled(state.enabled), MToggleValue(mx.maximized)]
									),
									m2t
								)
								|> (\f2 -> TBorder(0., 8., 8., 8., f2))
							],
						[]
					)
				]
				|> concatA
				|> (\buttons ->
					if (length(buttons) > 0)
						TCopySize(
							f,
							\tr -> {
								defTranslation = const(Point(0., -state.bottomMargin));

								TBaselineColsA(buttons)
								|> TBorderLeftRight(8.)
								|> (\f3 ->
									TTranslate(
										eitherMap(
											state.maximize,
											\mx ->
												if (contains(mx.style, MShowTextOverlay()))
													defTranslation
												else
													fif(fnot(mx.maximized), defTranslation, const(zeroPoint)),
											defTranslation
										),
										f3
									)
								)
								|> (\f3 -> TTweak([TAlign(const(b2d(!getDefaultRtl())), const(1.))], f3, tr))
							},
							true
						)
					else
						f
				)
			)
			|> (\f ->
				eitherMap(
					state.maximize,
					\mx ->
						if (contains(mx.style, MMaximizeFullscreen()))
							TFullScreen(mx.maximized, f)
						else
							TFullWindow(mx.maximized, f),
					f
				)
			)
			|> (\f -> TConstruct(state.subs, f))
		})
		|> (\f -> MComponentGroup2T(manager, parent, "MCarousel", [
					// IScriptBehaviour("active", m.activeIdx, MInputValue(generate(0, length(m.contents), idfn))),
					IScriptBehaviour("tx", state.tx, ISAppearanceEvent()),
					IScriptBehaviour("scale", state.zoomScale, ISAppearanceEvent())
					// , IScriptBehaviour("swipe_down", state.down)
				], f))
	else
		TEmpty()
}

MCarouselState(
	contentsLength : int,
	wh : DynamicBehaviour<WidthHeight>,
	itemWidth : Transform<double>,
	tx : DynamicBehaviour<double>,
	down : DynamicBehaviour<bool>,
	enabled : Transform<bool>,
	activeIdx : DynamicBehaviour<int>,
	activeI : DynamicBehaviour<int>,
	goToPrev : () -> void,
	goToNext : () -> void,
	swipeInteractive : DynamicBehaviour<Maybe<bool>>,
	swipeFn : (Point, Point) -> bool,
	maximize : Maybe<MCarouselMaximize>,
	contentZoom : Maybe<MCarouselContentZoom>,
	addToContentZoom : (double) -> void,
	zoomScale : DynamicBehaviour<double>,
	itemsSpan : int,
	endlessScroll : bool,
	enableArrows : bool,
	enableChevrons : bool,
	progress : Maybe<MCarouselProgressState>,
	bottomMargin : double,
	buttonsColor : MColor,
	iconSize : double,
	subs : [() -> () -> void]
);

MCarouselProgressState(
	bottom : bool,
	activeColor : MColor,
	inactiveColor : MColor
);

makeMCarouselState(manager : MaterialManager, m : MCarousel) -> MCarouselState {
	customPanning = extractStruct(m.style, MCarouselCustomPanning(make(0.), make(false)));
	duration = extractStruct(m.style, MAnimationDuration(const(0.5))).seconds;
	endlessScroll = contains(m.style, MLoopScroll());

	// Group carousel items by N elements
	itemsSpan = max(extractStruct(m.style, MCarouselItemSpan(1)).span, 1);
	contentsLength =
		if (!endlessScroll)
			floor(i2d(length(m.contents)) / i2d(itemsSpan)) * itemsSpan
		else
			length(m.contents);

	enableArrows = contains(m.style, MCarouselEnableArrows());
	enableChevrons = !contains(m.style, MNoChevrons()) && contentsLength > itemsSpan;
	enableProgress = !contains(m.style, MNoProgress()) && contentsLength > itemsSpan;

	wh = makeWH();
	itemWidth = fselect(wh, FLift(\v -> v.width / i2d(itemsSpan)));
	uns = initUnsM();
	targetTx = make(0.);
	tx = customPanning.shiftX;
	down = customPanning.mousedown;
	enabled = extractStruct(m.style, MEnabled(const(true))).enabled;
	activeIdx = m.activeIdx;
	activeI = make(0);
	fs = make(false);

	hasPrev = ref false;
	hasNext = ref false;
	goToPrev = \ -> if (^hasPrev) next(activeIdx, getValue(activeIdx) - 1) else next(activeIdx, contentsLength - 1);
	goToNext = \ -> if (^hasNext) next(activeIdx, getValue(activeIdx) + 1) else next(activeIdx, 0);

	swipeInteractive = extractStruct(m.style, MCurrentInteractive(make(None()))).current;
	carouselMaximize = tryExtractStruct(m.style, MCarouselMaximize(make(false), []));
	contentZoom = tryExtractStruct(m.style, contentZoomDef);
	zoomScale = make(1.);
	addToContentZoom : (double) -> void =
		(\cz : (double) -> void ->
			eitherMap(
				carouselMaximize,
				\mx ->
					eitherMap(
						tryExtractStruct(mx.style, contentZoomDef),
						\mxCz ->
							\ad -> {
								if (getValue(mx.maximized))
									nextDistinct(zoomScale, min(max(mxCz.min, getValue(zoomScale) + ad), mxCz.max))
								else
									cz(ad)
							},
						cz
					),
				cz
			)
		)
		|> (\f2 ->
			eitherMap(
				contentZoom,
				\cz ->
					f2(\ad -> nextDistinct(zoomScale, min(max(cz.min, getValue(zoomScale) + ad), cz.max))),
				f2(nop1)
			)
		);
	hasTitle = exists(m.contents, \c -> extractStruct(c.style, MCarouselText("", "")).title != "");
	hasSubtitle = exists(m.contents, \c -> extractStruct(c.style, MCarouselText("", "")).subtitle != "");
	bottomMargin =
		if (hasTitle && hasSubtitle)
			64.
		else if (hasTitle)
			50.
		else if (hasSubtitle)
			46.
		else
			0.;
	buttonsColor = extractStruct(m.style, MCarouselButtonsColor(MWhite())).color;

	progress =
		if (enableProgress) {
			progressColors = extractStruct(m.style, MProgressColors(buttonsColor, MGrey(500)));
			Some(
				MCarouselProgressState(
					contains(m.style, MProgressAtBottom()),
					progressColors.active,
					progressColors.inactive
				)
			)
		} else None();

	iconSize = extractStruct(m.style, MIconSize(36.)).size;

	updatePanning = \delta -> {
		// Accumulate the displacement
		newTx = getValue(tx) + delta.x;

		if (endlessScroll) {
			next(tx, newTx);
		} else {
			// Allow panning only if there is a next/previous page
			// TODO: Should allow spring beyond the first/last contents
			sTx = newTx + i2d(getValue(activeIdx)) * fgetValue(itemWidth);

			if ((sTx > 0.0 && ^hasPrev) || (sTx < 0.0 && ^hasNext))
				next(tx, max(min(newTx, 0.), -fgetValue(itemWidth) * i2d(contentsLength - 1)));
		}
	}

	endPanning = \ -> {
		// If panning horizontally for more than half of the screen, switch page
		sTx = getValue(tx) + i2d(getValue(activeIdx)) * fgetValue(itemWidth);

		if (abs(sTx) > fgetValue(itemWidth) * 0.1) {
			if (sTx > 0.0) {
				goToPrev();
			} else {
				goToNext();
			}
		} else {
			// in order to trigger the animation
			next(activeIdx, getValue(activeIdx));
		}
	}

	swipeFn = \p : Point, delta : Point -> {
		updatePanning(delta);
		true
	}

	subs =
		[
			\ -> subscribe2(targetTx, \finalTx -> {
				startTx = getValue(tx);
				dispUnsM(uns);

				easing = makeEasing(fgetValue(duration), easingStandartCurve, manager.manager.deltaTimer, nop);

				setUnsM(
					uns,
					subscribe2(easing.percent, \t -> {
						if (getValue(down)) {
							dispUnsM(uns);
						} else {
							next(tx, lerp(startTx, finalTx, t));
						}
					})
				);

				easing.start();
			}),
			makeSubscribe(down, \d -> if (!d) endPanning()),
			// Animates the transition snap
			\ -> subscribe(activeIdx, \idx -> {
				hasPrev := endlessScroll || idx > 0;
				hasNext := endlessScroll || idx < contentsLength - 1;

				aI =
					if (idx >= 0)
						idx % contentsLength
					else
						(idx + 1) % contentsLength + contentsLength - 1;

				nextDistinct(activeI, aI);
				next(targetTx, -fgetValue(itemWidth) * i2d(idx));
			}),
			\ -> subscribe2(activeI, \i -> {
				nextDistinct(zoomScale, 1.);
				idx = fgetValue(activeIdx);
				nextDistinct(activeIdx, floor(i2d(idx) / i2d(contentsLength)) * contentsLength + i);
			}),
			\ -> \ -> dispUnsM(uns)
		];

	MCarouselState(
		contentsLength,
		wh,
		itemWidth,
		tx,
		down,
		enabled,
		activeIdx,
		activeI,
		goToPrev,
		goToNext,
		swipeInteractive,
		swipeFn,
		carouselMaximize,
		contentZoom,
		addToContentZoom,
		zoomScale,
		itemsSpan,
		endlessScroll,
		enableArrows,
		enableChevrons,
		progress,
		bottomMargin,
		buttonsColor,
		iconSize,
		subs
	)
}

MCarouselProgress(manager : MaterialManager, parent : MFocusGroup, content : Tropic, state : MCarouselState) -> Tropic {
	eitherMap(
		state.progress, \pr ->
		TCopySize(
			content,
			\tr ->
				generate(0, state.contentsLength, \i ->
					TIf(
						feq(state.activeI, i),
						TShadowShape(parent, const(4.), TCircle(4., [MFill(pr.activeColor)]), RoundShape())
						|> (\f -> TAlpha(fif(state.enabled, const(1.), const(0.5)), f)),

						TShadowShape(parent, const(2.), TCircle(4., [MFill(pr.inactiveColor)]), RoundShape())
						|> (\f ->
							TIf(state.enabled,
								mouseDownAround(manager, None(), make(false), make(false), \ -> next(state.activeI, i), f)
								|> (\f2 -> TCursor(FingerCursor(), f2)),
								TAlpha(const(0.5), f)
							)
						)
					)
					|> (\f -> TBorder(2., 16., 2., 16., f))
				)
				|> TCols
				|> (\f -> if (pr.bottom) TLines2(TFillY(), f) else f)
				|> (\f -> TCenterXIn(f, tr)),
			true
		),
		content
	)
}

MCarouselChevrons(manager : MaterialManager, parent : MFocusGroup, content : Tropic, state : MCarouselState, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	leftFocused = make(false);
	rightFocused = make(false);

	makeChevron = \isLeft -> {
		focused = make(false);
		onClick = if (isLeft) state.goToPrev else state.goToNext;
		selfFocused = if (isLeft) leftFocused else rightFocused;
		otherFocused = if (isLeft) rightFocused else leftFocused;

		MIconButton2T(
			manager,
			parent,
			MIconButton(
				if (isLeft) "chevron_left" else "chevron_right",
				onClick,
				[state.buttonsColor, MIconSize(state.iconSize), MIconButtonBorder(8.), MElevation(const(2.))],
				[MEnabled(state.enabled)]
				|> (\f ->
					if (state.enableArrows)
						concat(f, [
							MFocused(selfFocused),
							MShortcutFilter(\foc, k -> {
								filtered = k.keycode == (if (isLeft) 37 else 39) && (foc || fgetValue(otherFocused));
								if (filtered) onClick();
								filtered
							})
						])
					else
						f
				)
			),
			m2t
		)
		|> (\f -> TBorder4(8., f))
		|> (\t -> TCenterYIn(t, TFillY()))
	}

	TCols([
		makeChevron(true),
		TFillX(),
		makeChevron(false)
	])
	|> (\f ->
		TCopySize(
			content,
			\tr ->
				TAvailable(f, tr),
			true
		)
	)
}

MCarouselContent2T(manager : MaterialManager, parent : MFocusGroup, c : MCarouselContent, i : int, style : [MCarouselStyle], state : MCarouselState,
	m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	textColor = extractStruct(style, MCarouselTextColor(MWhite())).color;
	contentScaling = !contains(style, MCarouselNoContentScaling());
	bgStyle = extractStruct(style, MBackgroundStyle([MFill(MBackgroundColor(!getLightBackground(parent)))])).style;

	carouselBox =
		TSizedWidthHeight(
			fdivide(fwidth(state.wh), const(i2d(state.itemsSpan))),
			fheight(state.wh)
		);

	makeTitle = \text, font : MFontStyle ->
		if (text != "")
			MEllipsisText2T(manager, parent, MEllipsisText(text, [font, textColor, MShowTooltip(const(true))]), m2t)
		else
			TEmpty();

	(\p ->
		(\p2 ->
			if (contentScaling) // Crop content to the size of the box
				TTweak([TFillZoom(true)], m2t(c.content, p2), carouselBox)
			else
				TCropSize(carouselBox, m2t(c.content, p2))
		)
		|> (\f ->
			if (isSome(state.contentZoom) ||
				eitherMap(state.maximize, \mx -> containsStruct(mx.style, contentZoomDef), false)) {

				currentInteractive = make(None());
				xOfBounds = make(0.);
				disableOutOfBounds = make(false);
				zoomScale = make(1.);
				uns = initUnsM();

				TConstruct(
					[
						make2Subscribe2(currentInteractive, state.swipeInteractive, \ci, si -> {
							if (isSome(ci) && isSome(si)) {
								next(disableOutOfBounds, false);
								nextDistinct(state.swipeInteractive, None());
								nextDistinct(currentInteractive, Some(false));
							} else if (isNone(ci) && isNone(si)) {
								dispUnsM(uns);
							}
						}),
						make2Subscribe(currentInteractive, xOfBounds, \ci, xob -> {
							if (xob != 0. && isSome(ci)) {
								next(disableOutOfBounds, true);
								nextDistinct(currentInteractive, None());
								nextDistinct(state.swipeInteractive, Some(false));

								prevTx = getValue(state.tx);
								dispUnsM(uns);
								setUnsM(
									uns,
									makeSubscribe2(state.tx, \tx -> {
										if (if (xob > 0.) tx > prevTx + 1. else tx < prevTx - 1.) {
											next(disableOutOfBounds, false);
											nextDistinct(state.swipeInteractive, None());
											nextDistinct(currentInteractive, Some(false));
										}
									})()
								);
							}
						}),
						make2Subscribe(state.activeI, state.zoomScale, \activeI, zs ->
							nextDistinct(zoomScale, if (activeI == i) zs else 1.)
						),
						\ -> \ -> dispUnsM(uns)
					],
					m2t(
						MZoomMaterial(
							MGetFocusGroup(f),
							zoomScale,
							[
								MCurrentInteractive(currentInteractive),
								MScrollOutOfBounds(xOfBounds, make(0.)),
								MScrollDisableOutOfBounds(disableOutOfBounds),
								MEnabled(state.enabled)
							]
						),
						p
					)
				)
			} else
				f(p)
		)
		|> (\f ->
			if (state.bottomMargin != 0.) { // Add text overlay and place it at the bottom
				text = extractStruct(c.style, MCarouselText("", ""));
				footerColor = extractStruct(style, MCarouselFooterColor(MGrey(900))).color;
				footerOpacity = extractStruct(style, MCarouselFooterOpacity(0.8)).opacity;

				TCopySize(
					f,
					\tr ->
						TLines2(
							makeTitle(text.title, MSubheading()),
							makeTitle(text.subtitle, MCaption())
						)
						|> (\f2 -> TBorder4(16., f2))
						|> (\f2 -> TGroup2(TFillX(), f2))
						|> (\f2 -> TFixSize(f2, TFillXH(state.bottomMargin)))
						|> (\f2 -> TFrame(0., 0., [MFill(footerColor), FillOpacity(footerOpacity)], f2))
						|> (\f2 -> TAvailable(f2, carouselBox))
						|> (\f2 ->
							eitherMap(
								state.maximize,
								\mx ->
									if (contains(mx.style, MShowTextOverlay()))
										f2
									else
										TShow(fnot(mx.maximized), f2),
								f2
							)
						)
						|> (\f2 -> TTweak([TAlign(const(0.), const(1.))], f2, tr)),
					true
				)
			} else
				f
		)
	)
	|> (\f -> // Add OnClick
		eitherFn(
			tryExtractStruct(c.style, MOnClick(nop)),
			\oc ->
				TIf(
					state.enabled,
					MComponent2T(
						manager,
						parent,
						"MCarouselClickable",
						[MOnClick(oc.click), MFocusEnabled(const(false)), MAddFocusGroup(true)],
						\focus -> f(focus.parent),
						m2t
					),
					f(parent)
				),
			\ ->
				f(parent)
		)
	)
	|> (\f -> TFrame(0., 0., bgStyle, f)) // Add background
	|> (\f -> TAvailable(f, carouselBox))
	// |> (\f ->
	// 	TInteractive(
	// 		[
	// 			FineGrainMouseWheel(\mi -> addToContentZoom(mi.dy))
	// 		],
	// 		f
	// 	)
	// )
	|> (\f ->
			TTranslate(
				if (state.endlessScroll)
					fselect2(state.tx, state.itemWidth, FLift2(\tx0, wd ->
						if (wd > 0.) {
							len = i2d(state.contentsLength);
							fullWidth = wd * len;
							currentIndex = dceil(-tx0 / wd);
							currentWidth = currentIndex * wd;
							currentPage = (currentIndex + len / 2. - i2d(i)) / len;
							currentTranslate = dfloor(if (currentPage < 0.) currentPage - 1. else currentPage) * fullWidth + i2d(i) * wd;

							Point(currentTranslate, 0.)
						} else
							zeroPoint
					))
				else
					fselect(state.itemWidth, FLift(\wd -> Point(i2d(i) * wd, 0.))),
				f
			)
	)
}

MCarouselZoomButton(
	manager : MaterialManager,
	parent : MFocusGroup,
	m2t : (Material, MFocusGroup) -> Tropic,
	state : MCarouselState,
	name : string,
	visible : Transform<bool>,
	onClick : () -> void) -> Tropic {

	MIconButton2T(
		manager,
		parent,
		MIconButton(
			name,
			onClick,
			[state.buttonsColor, MIconButtonBorder(8.), MElevation(const(2.))],
			[MEnabled(state.enabled)]
		),
		m2t
	)
	|> (\f2 -> TShow(visible, f2))
	|> (\f2 -> TBorder(0., 8., 8., 8., f2))
}