import material/internal/material_grid;
import material/internal/material_list_util;

export {
	MList2T(manager : MaterialManager, parent : MFocusGroup, m : MList, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MDynamicList2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicList, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MList2T(manager : MaterialManager, parent : MFocusGroup, m : MList, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	state = makeMListInnerState(defaultListState(manager, parent, m2t), concat(m.style, m.state));

	down = make(false);
	MComponentGroup2T(
		manager,
		parent,
		"MList",
		[
			IScriptBehaviour("selected", state.selection.selected, ISInputValue([], "[int]", true)),
			extractStruct(m.state, IScriptRecordingEnabled(const(true))),
			AccessRole("list")
		],
		\p ->
			MGetFocusGroup(\p2 -> eitherFn(
				state.reorder,
				\rdr -> {
					reorderState = concatA([
						[MEnabled(fminA([state.enabled, rdr.enabled, fnot(down)], false))],
						extractStructMany(m.state, MGrabDelay(0)),
						extractStructMany(m.state, MReorderDropSpot(MEmpty())),
						extractStructMany(m.state, MReorderCustomDraggingOrder()),
					]);

					MReorderGrid2T(
						manager,
						p2,
						mapi(m.lines, \i, line -> MReorderItem(MGetFocusGroup(\par -> MListLine2T(par, const(i), const(line), state, down)), [])),
						rdr.order,
						reorderState,
						m2t
					)
				},
				\ ->
					TLines(mapi(m.lines, \i, line -> MListLine2T(p2, const(i), const(line), state, down)))
			))
			|> (\f : Material ->
				eitherMap(
					tryExtractStruct(m.style, MAddScroll(None())),
					\addScroll -> {
						scrl = either(addScroll.scrollInpect, TScrollInspectVisible(make(zeroPoint), make(WidthHeight(-1., -1.))));
						wh = getValue(scrl.widthHeight);
						scrollBox =	wh2Tropic(wh);
						MScroll2T(manager, p, MScroll(f, scrollBox, [scrl]), m2t)
					},
					m2t(f, p)
				)
			)
			|> (\f -> TConstruct(state.subs, f))
			|> (\t -> if (m.lines == []) eitherMap(state.emptyMessage, \em -> TCenter(m2t(em, p)), t) else t)
	)
	|> MListAddAvailable(state)
}

MDynamicListData(
	lineHeights : MDynamicListLineHeights,
	items : [MListLine],
	sameHeight : bool
);

MDynamicListLineHeights(
	lineHeights : [Maybe<double>],
	itemsLength : int
);

MDynamicListItem(
	id : int,
	translation : double
);

MDynamicList2T(manager : MaterialManager, parent : MFocusGroup, m : MDynamicList, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {

	state = makeMListInnerState(defaultListState(manager, parent, m2t), concat(m.style, m.state));
	scrollPosition : TScrollPosition = extractStruct(m.state, MScrollPosition(make(zeroPoint)));
	addScroll = !contains(m.state, MNoScroll());

	boxH = make(0.);
	availableW = make(0.);
	hgt = make(0.);

	down = make(false);
	draggingItem = make(-1);
	draggingXY = make(zeroPoint);

	changingSize = ref false;
	metricsLock = ref false;
	prevBottomItem : ref MDynamicListItem = ref MDynamicListItem(0, 0.);
	prevItemsCount : ref Pair<int, double> = ref Pair(0, 0.);
	prevLineHeights : ref MDynamicListLineHeights = ref MDynamicListLineHeights([], 0);

	itemsLoadQuota = 1000;
	loadQuota = make(itemsLoadQuota);

	itemsHeights0 = tryExtractStruct(m.state, MItemsHeights(\__ -> zero));
	heightsTree : ref Tree<int, DynamicBehaviour<Maybe<double>>> = ref makeTree();
	itemsHeights : (int) -> DynamicBehaviour<Maybe<double>> = \i ->
		lookupTreeSet(heightsTree, i, \__ ->
			eitherMap(
				itemsHeights0,
				\ih -> fgetValue(ih.height(i)),
				MListLine2Height(fgetValue(m.items)[i], state)
			)
			|> (\hg -> make(if (hg > 0.) Some(hg) else None()))
		);

	dynListData : Transform<MDynamicListData> =
		fsubselect(m.items, FLift(\itms : [MListLine] -> {
			sh = isNone(itemsHeights0) && !containsStruct(itms, dummySubmenuLine());

			if (sh) {
				il = length(itms);
				ih : Maybe<double> =
					if (il > 0)
						Some(MListLine2Height(itms[0], state))
					else
						None();

				nextDistinct(hgt, i2d(il) * either(ih, 0.));
				const(
					MDynamicListData(
						MDynamicListLineHeights([ih], il),
						itms,
						sh
					)
				)
			}
			else
				fsubselect(loadQuota, FLift(\lq -> {
					il = min(length(itms), lq);
					eitherMap(
						state.reorder,
						\rdr ->
							fselect2(
								fmerge(generate(0, il, itemsHeights)),
								rdr.order,
								FLift2(\lh : [Maybe<double>], ord : [int] -> {
									nextDistinct(hgt, dsum(map(lh, \v -> either(v, 0.))));
									lhgts =	generate(0, il, \i -> elementAt(lh, elementAt(ord, i, i), None()));

									MDynamicListData(
										MDynamicListLineHeights(lhgts, il),
										itms,
										sh
									)
								})
							),
						fselect(
							fmerge(generate(0, il, itemsHeights)),
							FLift(\lh : [Maybe<double>] -> {
								nextDistinct(hgt, dsum(map(lh, \v -> either(v, 0.))));
								MDynamicListData(
									MDynamicListLineHeights(lh, il),
									itms,
									sh
								)
							})
						) |> fthrottleNextFrame
					)
				}))
		}));

	items = fselect(dynListData, FLift(\data : MDynamicListData -> data.items));
	sameHeight = fselect(dynListData, FLift(\data -> data.sameHeight));
	itemsLength = fselect(dynListData, FLift(\data -> data.lineHeights.itemsLength));
	hasItems = fselect(itemsLength, FLift(\il -> il > 0));

	translates : DynamicBehaviour<[DynamicBehaviour<MDynamicListItem>]> = make([]);

	(\par ->
		MGetFocusGroup(\par2 ->
			SelectMGroup2T(
				manager,
				par2,
				translates,
				\__, __, tr : DynamicBehaviour<MDynamicListItem>, p -> {
					itemId = fselect(tr, FLift(\t -> t.id));
					materialLog("Rerender container " + i2s(fgetValue(itemId)), MaterialInfo());
					lineHeight = make(0.);
					hgtUns = initUnsM();

					lineId =
						eitherMap(
							state.reorder,
							\rdr ->
								fselect2(itemId, rdr.order, FLift2(\id, ord ->
									elementAt(ord, id, id)
								)),
							itemId
						);

					lineContent =
						fselect2(items, lineId, FLift2(\itms, i ->
							elementAt(itms, i, dummySingleLine())
						));

					MListLine2T(p, lineId, lineContent, state, down)
					|> (\line -> TAttachHeightTrigger(line, lineHeight, fnot(sameHeight)))
					|> (\t -> TConstruct(
							[
								make2SubscribeTrigger(fnot(sameHeight), lineHeight, lineId, \hg, i -> {
									dispUnsM(hgtUns);
									itemHgt : DynamicBehaviour<Maybe<double>> = itemsHeights(i);
									hgFn = \ -> nextDistinct(itemHgt, Some(hg));

									if (^metricsLock)
										setUnsM(
											hgtUns,
											interruptibleTimer(0, hgFn)
										)
									else
										hgFn();
								}),
								\ -> \ -> dispUnsM(hgtUns)
							],
							t
					))
					|> (\listLine ->
						eitherMap(
							state.reorder,
							\rdr ->
								if (isFConst(rdr.enabled) && !fgetValue(rdr.enabled)) {
									listLine
								} else {
									rdrdown = make(false);
									point = make(Point(-1., -1.));
									hover = make(false);
									grabDelay = extractStruct(m.state, MGrabDelay(300)).delay;

									TVisible(fselect2(draggingItem, lineId, FLift2(\dr, ln -> dr != ln)), listLine)
									|> (\listLineVisible ->
										TCopySize(
											listLineVisible,
											\trop ->
												MComponent2T(
													manager,
													p,
													"MDynamicListDragDropHandle",
													[
														MFocusEnabled(const(false)),
														MClickEnabled(rdr.enabled),
														THovering(hover),
														TPressed(rdrdown),
														MMousePosition(point),
														MOnTouch(grabDelay, \ -> {
															if (!getValue(down)) {
																nextDistinct(draggingXY, getValue(point));
																nextDistinct(draggingItem, fgetValue(lineId));
															}
														}),
														MCursorShape(const(DefaultCursor())),
														MPassClicks(),
														MMobileForceHover()
													],
													\__ -> trop,
													m2t
												),
											true
										)
									)
									|> (\listLineVisible ->
										TConstruct(
											[
												make2Subscribe(hover, fif(rdr.enabled, draggingItem, const(-1)), \h, hId -> if (h && hId >= 0) {
													id = fgetValue(lineId);
													ordr = fgetValue(rdr.order);

													nextDistinct(
														rdr.order,
														insertArray(removeIndex(ordr, findiDef(ordr, eq(hId), -1)), findiDef(ordr, eq(id), -1), hId)
													);
												}),
												makeSubscribe2(fand(rdr.enabled, rdrdown), \d ->
													if (!d)
														nextDistinct(draggingItem, -1)
												)
											],
											listLineVisible
										)
									)
								},
							listLine
						)
					)
					|> makeTropicConstantHeight(Some(0.))
					|> (\listLine -> TTranslate(fselect(tr, FLift(\t -> Point(0., t.translation))), listLine))
				}
			)
			|> (\f ->
				TransformTAcc2(\t2a -> {
					bf = f |> t2a;

					TAcc(
						bf.form,
						TFormMetrics(
							bf.metrics.width,
							hgt,
							hgt
						),
						bf.minWidth,
						hgt,
						bf.maxWidth,
						hgt,
						zero,
						bf.yFillers,
						bf.addFillers,
						bf.xConstant,
						bf.yConstant,
						bf.disposers
					)
				})
			)
			|> MListAddAvailable(state)
		)
		|> (\f ->
			if (addScroll)
				MScroll2T(
					manager,
					par,
					MScroll(
						f,
						TFillXY(),
						replaceStructMany(extractMScrollStyle(m.state), [scrollPosition, MScrollToFocusEnabled(const(false))])
					),
					m2t
				)
			else
				m2t(f, par)
		)
		|> (\f ->
			TConstruct(
				[
					make3Subscribe(dynListData, scrollPosition.position, boxH, \data, sPosition, boxHeight -> {
						itms = data.items;
						lhgts = data.lineHeights;
						sh = data.sameHeight;

						if (!contains(lhgts.lineHeights, None())) {
							metricsLock := true;

							lineHeightsChanged = ^prevLineHeights != lhgts;

							lineHeights = map(lhgts.lineHeights, \v -> either(v, 0.));
							il = lhgts.itemsLength;
							getLineHeights = \idx -> lineHeights[if (sh) 0 else idx];

							lineHeight2translate = \idStart, idEnd ->
								if (sh)
									lineHeights[0] * i2d(idEnd - idStart)
								else
									dsum(subrange(lineHeights, idStart, max(0, idEnd - idStart)));

							bottomItem : MDynamicListItem =
								updateWhile(
									if (lineHeightsChanged)
										MDynamicListItem(
											^prevBottomItem.id,
											lineHeight2translate(0, ^prevBottomItem.id)
										)
									else
										^prevBottomItem,
									\item -> {
										id = item.id;

										if (id < 0 || id >= il)
											Some(MDynamicListItem(0, 0.))
										else
											if (sPosition.y <= item.translation + getLineHeights(id)) {
												if (id == 0 || sPosition.y >= item.translation)
													None()
												else
													Some(MDynamicListItem(id - 1, item.translation - getLineHeights(id - 1)))
											} else {
												if (id == il - 1)
													None()
												else
													Some(MDynamicListItem(id + 1, item.translation + getLineHeights(id)))
											}
									}
								);

							bottomItemChanged = ^prevBottomItem != bottomItem;

							itemsCount : Pair<int, double> =
								updateWhile(
									if (sh || (!bottomItemChanged && !lineHeightsChanged))
										^prevItemsCount
									else
										Pair(
											^prevItemsCount.first,
											lineHeight2translate(bottomItem.id, bottomItem.id + ^prevItemsCount.first)
										),
									\item : Pair<int, double> -> {
										id = bottomItem.id + item.first;
										heightWithoutBottomItem = item.second - getLineHeights(bottomItem.id);

										if (id < 0 || id > il)
											Some(Pair(0, 0.))
										else
											if (boxHeight <= heightWithoutBottomItem && addScroll) {
												if (id == 0 || boxHeight >= heightWithoutBottomItem - getLineHeights(id - 1))
													None()
												else
													Some(Pair(item.first - 1, item.second - getLineHeights(id - 1)))
											} else {
												if (id == il)
													None()
												else
													Some(Pair(item.first + 1, item.second + getLineHeights(id)))
											}
									}
								);

							itemsCountChanged = ^prevItemsCount != itemsCount;

							if (itemsCount.first > 0) {
								topItem =
									MDynamicListItem(
										bottomItem.id + itemsCount.first,
										bottomItem.translation + itemsCount.second
									);

								prevTranslates = getValue(translates);

								newTranslates =
									if (lineHeightsChanged)
										foldi(enumFromTo(bottomItem.id, topItem.id - 1), Triple([], 0., 0), \i, acc, id -> {
											itemTranslation = secondOfTriple(acc) + lineHeight2translate(thirdOfTriple(acc), id);
											item = MDynamicListItem(id, itemTranslation);

											tr =
												if (i < length(prevTranslates)) {
													nextDistinct(prevTranslates[i], item);
													prevTranslates[i]
												} else
													make(item);

											Triple(arrayPush(firstOfTriple(acc), tr), itemTranslation, id)
										})
										|> firstOfTriple
										|> Some
									else if (bottomItemChanged || itemsCountChanged)
										prevTranslates
										|> (\translatesPrev : [DynamicBehaviour<MDynamicListItem >] ->
											if (itemsCount.first < length(translatesPrev)) {
												filter(translatesPrev, \tr : DynamicBehaviour<MDynamicListItem> ->
													getTrId(tr) < topItem.id && getTrId(tr) >= bottomItem.id
												)
												|> uniq;
											} else
												translatesPrev
										)
										|> (\translatesPrev : [DynamicBehaviour<MDynamicListItem>] ->
											if (itemsCount.first > length(translatesPrev)) {
												maxId = either(maxA(map(translatesPrev, getTrId)), -1);

												concat(translatesPrev, generate(0, itemsCount.first - length(translatesPrev), \i -> {
													id0 = maxId + i + 1;
													id = if (id0 > length(itms) - 1) id0 - itemsCount.first else id0;

													translation = bottomItem.translation + lineHeight2translate(bottomItem.id, id);

													make(MDynamicListItem(id, translation))
												}));
											} else
												translatesPrev
										)
										|> (\translatesPrev : [DynamicBehaviour<MDynamicListItem >] -> {
											bottomLine = bottomItem.id - bottomItem.id % itemsCount.first + itemsCount.first;

											iter(translatesPrev, \tr -> {
												id = getTrId(tr);

												if (id < bottomItem.id || id >= topItem.id) {
													newId =
														(bottomLine + id % itemsCount.first)
														|> (\f2 -> if (f2 >= topItem.id) f2 - itemsCount.first else f2);

													translation = bottomItem.translation + lineHeight2translate(bottomItem.id, newId);

													nextDistinct(tr, MDynamicListItem(newId, translation))
												}
											});

											Some(translatesPrev)
										})
									else // if nothing changed
										None();

								maybeApply(newTranslates, \tr -> nextDistinct(translates, tr));

								materialLogFn(
									\ ->
										map(getValue(translates), \tr -> getValue(tr).id)
										|> (\f2 ->
											if (length(f2) != length(uniq(f2))
												|| either(minA(f2), bottomItem.id) < bottomItem.id
												|| either(maxA(f2), topItem.id - 1) >= topItem.id) {

												println("MDynamicList error");
												println(bottomItem);
												println(topItem);
												println(itemsCount);
												println(f2);
											}
										),
									MaterialInfo(),
									nop
								);

								if (addScroll && !^changingSize && !sh && il != length(itms)
									&& sPosition.y > (fgetValue(hgt) - boxHeight) * i2d(il - itemsLoadQuota / 5) / i2d(il)) {

									changingSize := true;
									newItemsLength = il + itemsLoadQuota;

									deferred(\ -> {
										nextDistinct(loadQuota, newItemsLength);
										changingSize := false;
									})
								}
							} else
								nextDistinct(translates, []);

							prevBottomItem := bottomItem;
							prevItemsCount := itemsCount;
							prevLineHeights := lhgts;

							metricsLock := false;
						}
					})
				]
				|> (\subs ->
					eitherMap(
						state.reorder,
						\rdr ->
							arrayPush(
								subs,
								makeSubscribe(itemsLength, \il -> {
									sl = getValue(rdr.order);
									if (length(sl) < il) {
										nextDistinct(rdr.order, concat(sl, enumFromTo(length(sl), il - 1)))
									} else if (length(sl) > il) {
										nextDistinct(rdr.order, filter(sl, \s -> s < il))
									}
								})
							),
						subs
					)
				),
				f
			)
		)
		|> (\f2 -> TIf(hasItems, f2, eitherMap(state.emptyMessage, \em -> TCenter(m2t(em, par)), TFillX())))
	)
	|> (\f ->
		MComponentGroup2T(
			manager,
			parent,
			"MDynamicList",
			concat(
				[
					IScriptBehaviour("selected", state.selection.selected, ISInputValue([], "[int]", true)),
					AccessRole("list")
				],
				// |> (\st ->
				// 	eitherMap(
				// 		state.reorder,
				// 		\rdr -> {
				// 			arrayPush(st, IScriptBehaviour("order", rdr.order, ISInputValue([], "[int]", true)));
				// 		},
				// 		st
				// 	)
				// ),
				extractStructMany(m.state, IScriptRecordingEnabled(const(true)))
			),
			f
		)
	)
	|> (\f ->
		eitherMap(
			state.reorder,
			\rdr ->
				TConstruct(
					[
						makeSubscribe2Uns(fif(rdr.enabled, draggingItem, const(-1)), \dr ->
							if (dr >= 0) {
								mouseXY = make(zeroPoint);

								[
									(\par ->
										MListLine2T(par, const(dr), const(fgetValue(items)[dr]), state, down)
										|> (\t -> TAvailableWidth(t, availableW))
										|> (\t -> MGrabAnimation(state.manager, par, t))
									)
									|> (\fn -> MComponentGroup2T(manager, parent, "MDynamicListDraggable", [], fn))
									|> (\t -> TTranslate(
											fselect(mouseXY, FLift(\xy0 -> Point(xy0.x - getValue(draggingXY).x, xy0.y - getValue(draggingXY).y))),
											t
										))
									|> (\t -> MMonitorMousePosition(manager, mouseXY, t)())
								]
							} else {
								[]
							}
						)
					],
					f
				),
			f
		)
	)
	|> (\f -> TAttachWidth(f, availableW))
	|> (\f -> TAttachAvailableHeight(f, boxH))
	|> MListAddAvailable(state)
}

dummySubmenuLine() -> MSubmenuLine {
	MSubmenuLine(MSingleLine("", []), const([]), [], make(false))
}

dummySingleLine() -> MSingleLine {
	MSingleLine("", [])
}

getTrId(tr : DynamicBehaviour<MDynamicListItem>) -> int {
	getValue(tr).id
}