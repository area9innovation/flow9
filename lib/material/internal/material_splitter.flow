import material/internal/material_scroll;

export {
	MSplitter2T(manager : MaterialManager, parent : MFocusGroup, m : MSplitter, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MSplitterPercentMinMax(min : double, max : double);

MSplitter2T(manager : MaterialManager, parent : MFocusGroup, m : MSplitter, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	percent = extractStruct(m.style, MSplitterValue(make(0.5))).percent;
	pressed = make(false);
	innerPercent = cloneBehaviour(percent);
	mouseXY = makePoint();
	itemId = makeTropicTag(manager);

	separatorDefSize = 8.0;
	minInteractiveSize = if (mobile) 50. else separatorDefSize;
	dividerW = extractStruct(m.style, MSplitterSeparatorSize(separatorDefSize)).size;
	splitterColor = extractMColor(parent, m.style, MGrey(950));
	splitterOpacity = extractStruct(m.style, FillOpacity(1.));
	handleColor = MThemeColor2MColor(parent, extractStruct(m.style, MSplitterHandleColor(MWhite())).color);
	showHandle = extractStruct(m.style, MSplitterShowHandle(const(true))).show;
	sizeWatcher = extractStruct(m.style, MSplitterSizeWatcher(make(0.0))).size;

	splitterHandle = !contains(m.style, MSplitterDontHandle());
	splitterLimits = extractStruct(m.style, MSplitterLimits(zero, const(-1.), zero, const(-1.)));
	splitterWH = tryExtractStruct(m.style, MSplitterWidthHeight(makeWH(), makeWH()));
	vertical = !contains(m.style, MSplitterHorizontal());
	enabled = extractStruct(m.style, MEnabled(const(true))).enabled;
	separatorEnabled = extractStruct(m.style, MSplitterSeparatorEnabled(const(true))).enabled;
	stageWH = makeWH();
	stageW = fwidth(stageWH);
	stageH = fheight(stageWH);
	stageSize = if (vertical) stageW else stageH;
	scrollStyle = extractStruct(m.style, MSplitterScrollStyle([])).style;

	minMax =
		fsubselect2(stageSize, separatorEnabled, \stSize, sEn ->
			if (stSize > dividerW) {
				dividerGap = if (sEn) dividerW / stSize / 2. else 0.;
				fselect4(splitterLimits.min1, splitterLimits.max1, splitterLimits.min2, splitterLimits.max2, \min1, max1, min2, max2 -> {
					MSplitterPercentMinMax(
						max(
							max(min1 / stSize + dividerGap, dividerGap),
							if (max2 > 0.)
								max(1. - dividerGap - max(max2, min2) / stSize, dividerGap)
							else
								dividerGap
						),
						min(
							if (max1 > 0.)
								min(max(max1, min1) / stSize + dividerGap, 1. - dividerGap)
							else
								1. - dividerGap,
							max(1. - dividerGap - max(min2, 0.) / stSize, dividerGap),
						)
					)
				});
			} else {
				const(MSplitterPercentMinMax(doubleMin, doubleMax))
			}
		);

	sizeByDirection = \sz -> if (vertical) TSizedWidth(sz, 0.) else TSizedHeight(0., sz);
	fillerSizeByDirection = if (vertical) TFillWYT else TFillXHT;
	cursor = if (vertical) EWResizeCursor() else NSResizeCursor();

	handle =
		TRounded(1.0, 1.0, 1.0, 1.0, [MFill(handleColor)], TFixed(2.0, 16.0))
		|> (if (vertical) idfn else TRotate90Left)
		|> (\t -> TShow(showHandle, t));

	transCoord =
		fselect2(innerPercent, stageSize, FLift2(\perc, s -> {
			dist = if (vertical && parent.rtl) (1. - perc) * s else perc * s;
			nextDistinct(sizeWatcher, dist);
			dist - dividerW / 2.0;
		}));

	trans = if (vertical) fpoint(transCoord, const(0.)) else fpoint(const(0.), transCoord);

	splitter =
		TGroup([
			TCursor(cursor, TRectangle([MFill(splitterColor), splitterOpacity], fillerSizeByDirection(const(dividerW)))),
			TCenterIn(handle, fillerSizeByDirection(const(dividerW))),
			TRectangle(interactiveRectangleStyle, fillerSizeByDirection(const(minInteractiveSize)))
			|> (\t2 -> TCursor(cursor, t2))
			|> (\t2 -> TTranslate(const(Point((dividerW - minInteractiveSize) / 2., 0.)), t2))
		])
		|> (\t -> TTranslate(trans, t))
		|> (\t -> TInteractive([
				if (splitterHandle) TMouseDown(pressed) else TMouseDownGhost(pressed),
				TMouseXY(mouseXY),
			], t))
		|> (\t -> TShow(fand(enabled, separatorEnabled), t))
		|> (\t ->
			TConstruct(
				[
					\ -> bidirectionalLink(
						percent,
						innerPercent,
						\p -> forceRange(p, fgetValue(minMax).min, fgetValue(minMax).max),
						idfn
					),
					makeSubscribe2(pressed, \pr -> if (pr) addMInteractionItemId(manager, itemId)),
					make3Subscribe2(mouseXY, stageSize, minMax, \mxy, s, mm -> {
						nextDistinct(
							innerPercent,
							forceRange(
								if (isCurrentMInteractionItemId(manager, itemId) && getValue(pressed)) {
									blockOtherMInteractionItemIds(manager, itemId);

									if (vertical)
										if (parent.rtl) 1. - mxy.x / s else mxy.x / s
									else
									 	mxy.y / s;
								} else
									getValue(percent),
								mm.min,
								mm.max
							)
						);
					})
				],
				t
			)
		);

	makeContentBox = \p, isLeft -> {
		countPercent = \prc -> if (isLeft) prc else (1.0 - prc);

		scrollSize = \v, sSize ->
			fif(enabled,
				if (v) fselect3(innerPercent, sSize, separatorEnabled, \prc, s, sEn ->
					countPercent(prc) * s - if (sEn) dividerW / 2. else 0.
				)
				else sSize,
				if (isLeft || !v) sSize else const(0.)
			);

		scrollWidth = scrollSize(vertical, stageW);
		scrollHeight = scrollSize(!vertical, stageH);
		scrollBox =	fwidthheight(scrollWidth, scrollHeight);

		MScroll2T(manager, p, MScroll(MAlignStart(if (isLeft) m.m1 else m.m2), TSized(scrollBox), scrollStyle), m2t)
		|> (\t -> eitherMap(splitterWH, \swh ->
				TConstruct([\ -> fconnect(scrollBox, if (isLeft) swh.left else swh.right)], t),
				t
			))
	};

	minSize = fselect2Lift(splitterLimits.min1, splitterLimits.min2, \min1, min2 ->
		max(0., min1) + dividerW + max(0., min2)
	);

	maxSize = fselect4(splitterLimits.min1, splitterLimits.max1, splitterLimits.min2, splitterLimits.max2, \min1, max1, min2, max2 -> {
		max3(0., min1, max1) + dividerW + max3(0., min2, max2)
	});

	(\p ->
		TAttachBox2(
			TGroup2(
				sizeByDirection(minSize),

				TSelect(fand(fgreater(splitterLimits.max1, zero), fgreater(splitterLimits.max2, zero)), \maxLimitEnabled -> {
					if (maxLimitEnabled) {
						TAvailable(m2t(m.size, p), fillerSizeByDirection(maxSize))
 					} else {
						m2t(m.size, p)
					}
				})
			),
			stageWH,
			[
				makeContentBox(p, true),
				sizeByDirection(fif(separatorEnabled, const(dividerW), zero)),
				makeContentBox(p, false)
				|> (\t -> TShow(enabled, t))
			]
			|> (if (vertical) \t -> TColsDir(t, parent.rtl) else TLines)
			|> (\t -> TGroup2(t, splitter))
		)
	)
	|> (\f -> MComponentGroup2T(
		manager,
		parent,
		"MSplitter",
		concat3(
			[IScriptBehaviour("percent", innerPercent, ISInputValue([], "double", true))],
			extractDynamicBehaviours(enabled, "enabled", ISEnableEvent()),
			extractStructMany(m.style, MFocusId(const(-1)))
		),
		f
	))
}
