import material/internal/material_scroll;

export {
	MSplitter2T(manager : MaterialManager, parent : MFocusGroup, m : MSplitter, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MSplitterPercentMinMax(min : double, max : double);

MSplitter2T(manager : MaterialManager, parent : MFocusGroup, m : MSplitter, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	percent = extractStruct(m.style, MSplitterValue(make(0.5))).percent;
	pressed = make(false);
	innerPercent = cloneBehaviour(percent);
	mouseXY = makePoint();
	itemId = makeTropicTag(manager);

	dividerW = extractStruct(m.style, MSplitterSeparatorSize(8.0)).size;
	splitterColor = extractStruct(m.style, if (getLightBackground(parent)) MGrey(950) else MGrey(100));
	handleColor = extractStruct(m.style, MSplitterHandleColor(if (getLightBackground(parent)) MWhite() else MGrey(950))).color;
	sizeWatcher = extractStruct(m.style, MSplitterSizeWatcher(make(0.0))).size;
	
	splitterHandle = !contains(m.style, MSplitterDontHandle());
	splitterSize = extractStruct(m.style, MSplitterSize(0., -1., 0., -1.));
	splitterWH = tryExtractStruct(m.style, MSplitterWidthHeight(makeWH(), makeWH()));
	vertical = !contains(m.style, MSplitterHorizontal());
	enabled = extractStruct(m.style, MEnabled(const(true))).enabled;
	stageWH = makeWH();
	stageW = fwidth(stageWH);
	stageH = fheight(stageWH);
	stageSize = if (vertical) stageW else stageH;

	minMax =
		fselect(stageSize, FLift(\metric ->
			if (metric > 0.) {
				dividerGap = dividerW / metric / 2.;

				MSplitterPercentMinMax(
					max(
						max(splitterSize.min1 / metric + dividerGap, dividerGap),
						if (splitterSize.max2 > 0.)
							max(1. - dividerGap - max(splitterSize.max2, splitterSize.min2) / metric, dividerGap)
						else
							dividerGap
					),
					min(
						if (splitterSize.max1 > 0.)
							min(max(splitterSize.max1, splitterSize.min1) / metric + dividerGap, 1. - dividerGap)
						else
							1. - dividerGap,
						max(1. - dividerGap - max(splitterSize.min2, 0.) / metric, dividerGap),
					)
				)
			} else
				MSplitterPercentMinMax(doubleMin, doubleMax)
		));

	fillerSizeFn = if (vertical) TFillWY else TFillXH;
	fixedSizeFn = \sz -> if (vertical) TFixed(sz, 0.) else TFixed(0., sz);
	cursor = if (vertical) EWResizeCursor() else NSResizeCursor();

	handle =
		TRounded(1.0, 1.0, 1.0, 1.0, [MFill(handleColor)], TFixed(2.0, 16.0))
		|> (if (vertical) idfn else TRotate90Left);

	transCoord =
		fselect2(innerPercent, stageSize, FLift2(\perc, s -> {
			nextDistinct(sizeWatcher, s * perc);
			perc * s - dividerW / 2.0;
		}));

	trans = if (vertical) fpoint(transCoord, const(0.)) else fpoint(const(0.), transCoord);

	splitter =
		TGroup2(
			TRectangle([MFill(splitterColor)], fillerSizeFn(dividerW)),
			TCenterIn(handle, fillerSizeFn(dividerW))
		)
		|> (\t -> TTranslate(trans, t))
		|> (\t -> TShow(enabled, t))
		|> (\t -> TCursor(cursor, t))
		|> (\t -> TInteractive([
				if (splitterHandle) TMouseDown(pressed) else TMouseDownGhost(pressed),
				TMouseXY(mouseXY),
			], t))
		|> (\t ->
			TConstruct(
				[
					\ -> bidirectionalLink(
						percent,
						innerPercent,
						\p -> forceRange(p, fgetValue(minMax).min, fgetValue(minMax).max),
						idfn
					),
					makeSubscribe(pressed, \pr -> if (pr) addMInteractionItemId(manager, itemId)),
					make3Subscribe(mouseXY, stageSize, minMax, \mxy, s, mm ->
						nextDistinct(
							innerPercent,
							forceRange(
								if (isCurrentMInteractionItemId(manager, itemId) && getValue(pressed)) {
									blockOtherMInteractionItemIds(manager, itemId);

									if (vertical)
									 	mxy.x / s
									else
									 	mxy.y / s;
								} else
									getValue(innerPercent),
								mm.min,
								mm.max
							)
						)
					)
				],
				t
			)
		);

	makeContentBox = \p, isLeft -> {
		countPercent = \prc -> if (isLeft) prc else (1.0 - prc);

		scrollSize = \v, sSize ->
			fif(enabled,
				if (v) fselect2(innerPercent, sSize, FLift2(\prc, s -> countPercent(prc) * s - (dividerW / 2.))) else sSize,
				if (isLeft || !v) sSize else const(0.)
			);

		scrollWidth = scrollSize(vertical, stageW);
		scrollHeight = scrollSize(!vertical, stageH);
		scrollBox =	fwidthheight(scrollWidth, scrollHeight);

		MScroll2T(manager, p, MScroll(if (isLeft) m.m1 else m.m2, TSized(scrollBox), []), m2t)
		|> (\t -> eitherMap(splitterWH, \swh -> 
				TConstruct([\ -> fconnect(scrollBox, if (isLeft) swh.left else swh.right)], t),
				t
			))
	};

	(\p ->
		TAttachBox2(
			TGroup2(
				fixedSizeFn(max(0., splitterSize.min1) + dividerW + max(0., splitterSize.min2)),

				if (splitterSize.max1 > 0. && splitterSize.max2 > 0.)
					TAvailable(
						m2t(m.size, p),
						fillerSizeFn(max3(0., splitterSize.min1, splitterSize.max1) + dividerW + max3(0., splitterSize.min2, splitterSize.max2))
					)
				else
					m2t(m.size, p)
			),
			stageWH,
			[
				makeContentBox(p, true),
				fixedSizeFn(dividerW),
				makeContentBox(p, false)
				|> (\t -> TShow(enabled, t))
			]
			|> (if (vertical) TCols else TLines)
			|> (\t -> TGroup2(t, splitter))
		)
	)
	|> (\f -> MComponentGroup2T(
		manager,
		parent,
		"MSplitter",
		concat3(
			[IScriptBehaviour("percent", innerPercent, ISInputValue([], "double", true))],
			extractDynamicBehaviours(enabled, "enabled", ISEnableEvent()),
			extractStructMany(m.style, MFocusId(const(-1)))
		),
		f
	))
}
