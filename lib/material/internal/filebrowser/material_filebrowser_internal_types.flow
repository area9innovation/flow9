import fs/filebrowser;
import material/material;
import material/extra/filesystem/filesystem_extended_types;

export {
	FbObject(fullPath : string, url : string);

	FbMStyle ::= FbStyle, FbMInitStyle;
		FbMInitStyle ::= FbPathProcessing, FbAdditionalText, FbTopPanelCustomItem, FbGetCurrentPathB,
				FbGetContentUpdateFn, FbFolderSelection, FbInitialSelection, FbDropFileFn, FbMultiSelect, FbHideBottomPanel,
				FbAllowPathInput, FbFileFilter, FbSelectedNames, FbWhatIsChanged, FbGetFilesPreview, FbUploadMaxFileSize,
				FbUploadImageMaxResolution, FbUploadVideoMaxBitrate, FbFileUseRegisteredIcons;

			FbPathProcessing(func:(string) -> string);
			FbTopPanelCustomItem(getItem : (closeDialog : () -> void, enabled : Transform<bool>) -> Material, requiredAccessRight : PathAccessRight);
			FbGetCurrentPathB(path : DynamicBehaviour<string>);
			FbGetContentUpdateFn(fn : (updateCall : () -> void) -> void);
			FbFolderSelection();
			// sel name will be displayed in filename textinput on start
			// default value is ""
			FbInitialSelection(sel : string);
			FbDropFileFn(fn : (files : [native]) -> void);
			// allows to select several files at once
			FbMultiSelect();
			// hide panel with "file name" input
			FbHideBottomPanel();
			// user may directly type desired path
			FbAllowPathInput();
			// filter available files by path
			FbFileFilter(fn : (string) -> bool);
			// Set/Get elements names in the current folder which are selected (or should be selected)
			// Use together with FbGetCurrentPathB() style
			FbSelectedNames(filenamesB : DynamicBehaviour<[string]>);
			// Trying to detect which elements were created/removed in the current folder while FileBrowser works
			// Does not catch any changes if folder is not active
			// (i.e. if you will open a folder where some elements were added/removed - you will not get callback)
			// Returns full path to changed element
			FbWhatIsChanged(fn : (added : [string], removed : [string], closeDialog : () -> void) -> void);
			// Define the converter for "Files Paths" to "Material Preview"
			// Used to load all preview contents at once
			FbGetFilesPreview(fn : (filesPaths : [string], ([Pair<string, Material>]) -> void) -> void);
			// Maximal allowed size of files for uploading (bytes) - used for files dropping
			FbUploadMaxFileSize(size : int);
			// Maximal allowed resolution of the images for uploading (pixels) - used for files dropping
			FbUploadImageMaxResolution(resolution : int);
			// Maximal allowed bitrate of the videos for uploading (kbps) - used for files dropping
			FbUploadVideoMaxBitrate(bitrate : int);
			// Allows to use in filebrowser icons, registerd by the app (for every extension), or simple (by default)
			FbFileUseRegisteredIcons(useRegistered : bool);

	FileBrowserButtonsM ::= OpenExtFBB, SaveExtFBB, CancelExtFBB, CustomExtFBB, CustomWithUpdateFBB;
		OpenExtFBB(func : ([FbObject]) -> void);
		SaveExtFBB(func : ([FbObject]) -> void);
		CancelExtFBB(func : () -> void);
		CustomExtFBB(caption : string, func : (string, [string]) -> void);
		CustomWithUpdateFBB(caption : string, func : (string, [string], () -> void) -> void);

	FbSourceBase64(filename : string, contentBase64 : string);

	FbFilterUploadDialog ::= FbFilterMaxValues, FbFilterDefaultBehaviours;

		FbFilterMaxValues ::= FbFilterMaxSize, FbFilterMaxResolution, FbFilterMaxBitrate;

			// Max allowed size of the file (in bytes)
			FbFilterMaxSize(size : int);
			// Max allowed resolution for each dimension (in px)
			FbFilterMaxResolution(size : int);
			// Max allowed bitrate for the video (in kb/sec)
			FbFilterMaxBitrate(bitrate : int);

		FbFilterDefaultBehaviours ::= FbDefaultResolutionReduce, FbDefaultBitrateReduce;

			FbDefaultResolutionReduce(reduce : bool);
			FbDefaultBitrateReduce(reduce : bool);

	filebrowserPictureExtensions = [".jpg", ".jpeg", ".png", ".bmp", ".svg"];
	filebrowserVideoExtensions = [".mp4", ".webm", ".m4v", ".mov", ".flv", ".avi"];
	filebrowserAudioExtensions = [".mp3", ".m4a"];

	removeDotInExtensions(ext : [string]) -> [string] { map(ext, \e -> ltrim2(e, ".")); }
}
