import fs/api_filebrowser;
import material/material;
import material/extra/filesystem/filesystem_extended_api;
import material/internal/filebrowser/material_filebrowser_internal_types;

export{
	// Filebrowser API
	SetMFileBrowser(type : FileBrowserDialogType, fileBrowser : (ext : [string], style : [FbMStyle], onDone : ([FbObject]) -> void, onCancel : () -> void) -> void) -> void;
	CallMFileBrowser(type : FileBrowserDialogType, ext : [string], style : [FbMStyle], onDone : ([FbObject]) -> void, onCancel : () -> void) -> void;
	isMFileBrowserInitialized(type : FileBrowserDialogType) -> bool;

	// Resolve content of file API, can be used in implementation of FilebrowserAPI
	// register new resolve content handler for specified ext
	registerMResolveContentAPI(ext : [string], getForm : (filename : string) -> Material, options : [ResolveContentStyle]) -> void;
	// get preview Material for specified file
	resolveContent2Material(filename : string) -> Maybe<Material>;

	ResolveContentStyle ::= ResolveContentThumbnail;
		// path to a thumbnail instead of real blob
		ResolveContentThumbnail();

	// Registration of icon/view for file extensions (extension without dot, like "jpg")
	registerDefaultViewForFileExtension(extension : string, fn : (size : double) -> Material) -> void;
	// Removing of icon/view for file extensions (extension without dot, like "jpg")
	removeDefaultViewForFileExtension(extension : string) -> void;
	// Get registered or default icon/view for the file extensions (extension without dot, like "jpg")
	getDefaultViewForFileExtension(extension : string, size : double, defaultViewM : Maybe<Material>) -> Material;
	// Fast registration of pre-settled icon/view for a list of extensions
	registerListOfDefaultViewsForFileExtensions(colored : bool) -> void;
}

// Filebrowser API
fileBrowsersM : ref Tree<FileBrowserDialogType, (ext : [string], style : [FbMStyle], onDone : ([FbObject]) -> void, onCancel : () -> void) -> void> = ref makeTree();

SetMFileBrowser(type : FileBrowserDialogType, fileBrowser : (ext : [string], style : [FbMStyle], onDone : ([FbObject]) -> void, onCancel : () -> void) -> void) -> void {
	maybeApply(lookupTree(^fileBrowsersM, type), \searchResult->{
		fileBrowsersM := removeFromTree(^fileBrowsersM, type)
	});
	fileBrowsersM := setTree(^fileBrowsersM, type, fileBrowser)
}

CallMFileBrowser(type : FileBrowserDialogType, ext : [string], style : [FbMStyle], onDone : ([FbObject]) -> void, onCancel : () -> void) -> void {
	switch(lookupTree(^fileBrowsersM, type)) {
		Some(fileBrowser): {
			fileBrowser(ext, style, onDone, onCancel)
		}
		None(): {
			println("MFileBrowser API for type=" + toString(type) + ", isn't set.")
		}
	}
}

isMFileBrowserInitialized(type : FileBrowserDialogType) -> bool {
	isSome(lookupTree(^fileBrowsersM, type));
}

// Resolve content of file API
MResolveContentAPI : (
	ext : [string],
	getMaretial : (filename : string) -> Material,
	options : [ResolveContentStyle],
);

rcMAPI : ref [MResolveContentAPI] = ref [];

registerMResolveContentAPI(ext : [string], getMaretial : (filename : string) -> Material, options : [ResolveContentStyle]) -> void {
	refArrayPush(rcMAPI, MResolveContentAPI(map(ext, toLowerCase), getMaretial, options))
}

resolveContent2Material(filename : string) -> Maybe<Material> {
	ext = toLowerCase("." + getUrlExtension(filename));
	maybeMap(
		find(^rcMAPI, \api -> contains(api.ext, ext)),
		\api -> {
			thumbnail = contains(api.options, ResolveContentThumbnail());
			convertFn = if (thumbnail) getFilesystemExtAPI().convert2thumbnailPath else getFilesystemExtAPI().convert2realPath;
			api.getMaretial(filename |> convertFn);
		}
	)
}

MDefaultExtensionView : (
	extension : string,
	getView : (size : double) -> Material
);

registeredIconsR : ref [MDefaultExtensionView] = ref [];

registerDefaultViewForFileExtension(extension : string, getView : (size : double) -> Material) -> void {
	ext = toUpperCase(if (startsWith(extension, ".")) strRight(extension, 1) else extension);
	eitherFn(
		findi(^registeredIconsR, \icon -> icon.extension == ext),
		\i -> registeredIconsR := replace(^registeredIconsR, i, MDefaultExtensionView(ext, getView)),
		\-> refArrayPush(registeredIconsR, MDefaultExtensionView(ext, getView))
	);
}

removeDefaultViewForFileExtension(extension : string) -> void {
	ext = toUpperCase(if (startsWith(extension, ".")) strRight(extension, 1) else extension);
	maybeApply(
		findi(^registeredIconsR, \icon -> icon.extension == ext),
		\i -> registeredIconsR := removeIndex(^registeredIconsR, i)
	);
}
	
getDefaultViewForFileExtension(extension : string, size : double, defaultViewM : Maybe<Material>) -> Material {
	ext = toUpperCase(if (startsWith(extension, ".")) strRight(extension, 1) else extension);
	eitherMap(
		find(^registeredIconsR, \icon -> icon.extension == ext),
		\icon -> icon.getView(size),
		eitherFn(defaultViewM, idfn, \-> getDefaultIcon(ext, size, MTeal(500)))
	);
}

getDefaultIcon(extensionUpper : string, size : double, color : MColor) -> Material {
	MGroup2(
		MIcon("insert_drive_file", [MIconSize(size), color]),
		MLines2(
			TFixed(0., size * 5. / 8.),
			MCenterXIn(
				MText(extensionUpper, [MWhite(), MCustomFont(size / 5., "RobotoMedium", primaryTextOpacity)]),
				TFixed(size, 1.)
			)
		)
	);
}

registerListOfDefaultViewsForFileExtensions(colored : bool) -> void {
	iter([
			Pair("PNG", MGreen(500)),
			Pair("JPG", MGreen(500)),
			Pair("JPEG", MGreen(500)),
			Pair("AVI", MPurple(500)),
			Pair("MOV", MPurple(500)),
			Pair("MP4", MPurple(500)),
			Pair("WEBM", MPurple(500)),
			Pair("TXT", MBlue(500)),
			Pair("DOC", MBlue(500)),
			Pair("DOCX", MBlue(500)),
			Pair("PDF", MRed(500)),
			Pair("HTML", MPink(400)),
			Pair("HTM", MPink(400)),
			Pair("PHP", MPink(400)),
		],
		\pair -> registerDefaultViewForFileExtension(
			pair.first,
			\size -> getDefaultIcon(pair.first, size,
				if (colored) pair.second else MTeal(500)
			)
		)
	);
}
