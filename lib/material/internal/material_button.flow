import material/internal/material_icons;
import material/internal/material_component;
import material/internal/material_ellipsis;

export {
	MTextButton2T(manager : MaterialManager, parent : MFocusGroup, m : MTextButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MTextClickable2T(manager : MaterialManager, parent : MFocusGroup, m : MTextClickable, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MIconButton2T(manager : MaterialManager, parent : MFocusGroup, m : MIconButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MIconToggle2T(manager : MaterialManager, parent : MFocusGroup, m : MIconToggle, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	MCheckBox2T(manager : MaterialManager, parent : MFocusGroup, m : MCheckBox, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MRadio2T(manager : MaterialManager, parent : MFocusGroup, m : MRadio, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MSwitchControl2T(manager : MaterialManager, parent : MFocusGroup, m : MSwitchControl, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MFloatingButton2T(manager : MaterialManager, parent : MFocusGroup, m : MFloatingButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
	MChip2T(manager : MaterialManager, parent : MFocusGroup, m : MChip, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;

	MRawButton2T(manager : MaterialManager, parent : MFocusGroup, m : MRawButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic;
}

MTextButton2T(manager : MaterialManager, parent : MFocusGroup, m : MTextButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	color : MColor = extractStruct(m.style, getPrimaryColor(parent));
	contained = contains(m.style, MContained());
	outlined = contains(m.style, MOutlined());
	fullWidth = contains(m.style, MFullWidth());
	buttonTextColor = extractStructMany(m.style, MButtonTextColor(false));
	onClick = extractStruct(m.state, MOnClick(nop)).click |> (\f -> MOnClick(\ -> {m.onClick(); f();}));
	elevation = \focus ->
		extractStruct(m.style,
			MElevation(
				if (contained)
					fif(focus.down, const(6.), const(if (getLightBackground(parent)) 2. else 3.))
				else
					zero
			)
		).elevation;
	leftIcon = tryExtractStruct(m.style, MLeftIcon(""));
	rightIcon = tryExtractStruct(m.style, MRightIcon(""));
	paddings = extractStruct(m.style, MButtonPaddings(16.0, 10.0, 16.0, 9.0));

	textColor : MColor =
		if (contained) {
			if (color == getPrimaryColor(parent) &&
				(getToolbarItemsColor(parent) == MWhite() || getToolbarItemsColor(parent) == MBlack())) {
				getToolbarItemsColor(parent)
			} else if (length(buttonTextColor) > 0) {
				if (buttonTextColor[0].white)
					MWhite()
				else
					MBlack()
			} else {
				MTextMColor(color)
			}
		} else {
			color
		};
	textStyle =
		extractStruct(m.style, MCustomTextStyle([MButton1(), textColor])).style
		|> (\textStyle ->
			if (isNone(tryExtractStruct(textStyle, textColor)))
				arrayPush(textStyle, textColor)
			else
				textStyle
		);

	addLeftRightIcons = \t : Tropic, disabled : bool -> {
		eitherMap(
			leftIcon,
			\li ->
				TCols2A(
					MIcon2T(parent, li.icon, if (disabled) [MIconDisabled()] else [textColor])
					|> (\f2 -> TTranslate(const(Point(0., -3.5)), f2))
					|> (\f2 -> TFixSize(f2, TFixed(standardIconSize, 0.))),
					t
				),
			t
		)
		|> (\f ->
			eitherMap(
				rightIcon,
				\ri ->
					TCols2A(
						f,
						MIcon2T(parent, ri.icon, if (disabled) [MIconDisabled()] else [textColor])
						|> (\f2 -> TTranslate(const(Point(0., -3.5)), f2))
						|> (\f2 -> TFixSize(f2, TFixed(standardIconSize, 0.)))
					),
				f
			)
		)
	}

	disabled = \ ->
		MText2T(
			parent,
			m.text,
			replaceStructMany(textStyle, [getTextColor(parent), MTextDisabled()])
		)
		|> (\f -> addLeftRightIcons(f, true))
		|> (\f -> TBorder(paddings.left, paddings.top, paddings.right, paddings.bottom, f))
		|> (\f -> if (fullWidth) TCenterX(f) else f)
		|> (\f ->
			MShapeFrame(
				parent,
				if (outlined)
					[
						Stroke(contrastingColor(parent)),
						StrokeOpacity(0.2),
						Fill(black),
						FillOpacity(0.0)
					]
				else
					[
						Fill(contrastingColor(parent)),
						FillOpacity(if (contained) 0.12 else 0.0)
					],
				f,
				"MTextButton"
			)
		);

	focusState =
		concat(
			concatStyles(
				replaceStruct(m.state, onClick),
				[
					MRippleType(const(MRippleFill())),
					MRippleColor(const(textColor)),
					MHighlightOnFocus(const(true)),
					MHighlightOnHover(const(true)),
					MRippleShape("MTextButton"),
					MButtonTitle(const(m.text))
				]
			),
			[FAccessAttribute("aria-label", const(m.text))]
		);

	(\ -> MText2T(
		parent,
		m.text,
		textStyle
	)
	|> (\f -> addLeftRightIcons(f, false))
	|> (\f -> TBorder(paddings.left, paddings.top, paddings.right, paddings.bottom, f))
	|> (\f -> if (fullWidth) TCenterX(f) else f))
	|> (\f ->
		MComponent2T(
			manager,
			parent,
			"MTextButton",
			focusState,
			\focus -> {
				el = elevation(focus);

				(\ -> f()
				|> (\f2 ->
					if (contained || outlined)
						MShapeFrame(
							parent,
							if (outlined)
								[
									Stroke(contrastingColor(parent)),
									StrokeOpacity(0.4),
									Fill(black),
									FillOpacity(0.0)
								]
							else
								[
									MFill(color),
									FillOpacity(1.0)
								],
							f2,
							"MTextButton"
						)
					else
						f2
				)
				|> (\f2 ->
					if (el != zero)
						TEasedShadowShape(
							manager,
							parent,
							el,
							if (contained)
								f2
							else
								MShapeFrame(parent, [MFill(MBackgroundColor(getLightBackground(parent)))], f2, "MTextButton"),
							0.3,
							RectangleShape("MTextButton")
						)
					else
						f2
				))
				|> (\f2 -> TIfLazy2(focus.enabled, \b -> if (b) f2() else disabled(), !fullWidth))
			},
			m2t
		)
	)
	|> (if (fullWidth) makeTropicConstantHeight(None()) else makeTropicConstant(None(), None()))
}

// This type is added for the correct typechecking of variable 'paddings'.
MButtonBordersOrPaddings ::= MButtonBorders, MButtonPaddings;

MTextClickable2T(manager : MaterialManager, parent : MFocusGroup, m : MTextClickable, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	paddings = if (containsStruct(m.style, MButtonBorders(8., 4., 8., 4.)))
		extractStruct(m.style, MButtonBorders(8., 4., 8., 4.))
	else
		extractStruct(m.style, MButtonPaddings(8., 4., 8., 4.));
	onClick = extractStruct(m.state, MOnClick(nop)).click |> (\f -> MOnClick(\ -> {m.onClick(); f();}));
	backgroundStyle = extractStruct(m.style, MBackgroundStyle([])).style;
	raised = isSome(tryExtractStruct(backgroundStyle, Fill(black))) && extractStruct(backgroundStyle, FillOpacity(1.)).opacity > 0.;
	elevation = \focus ->
		extractStruct(m.style,
			MElevation(
				if (raised)
					fif(focus.down, const(6.), const(if (getLightBackground(parent)) 2. else 3.))
				else
					zero
			)
		).elevation;
	fullWidth = contains(m.style, MFullWidth());

	textStyle : [MTextStyle] =
		filtermap(m.style, \st ->
			switch (st : MClickableTextStyle) {
				MTextStyle() : {a : Maybe<MTextStyle> = Some(st); a}
				default : None();
			}
		)
		|> (\arr -> ifArrayPush(arr, raised, MTextMColor(extractStruct(backgroundStyle, Fill(black)).color |> MCustomColor)));

	focusState =
		concat(
			replaceStructMany(
				m.state,
				[
					onClick,
					extractStruct(m.state, MRippleType(const(MRippleFill()))),
					extractStruct(m.state, MRippleShape("MTextClickable")),
					extractStruct(m.state, MHighlightOnFocus(const(true))),
					extractStruct(m.state, MHighlightOnHover(const(true)))
				]
			),
			[
				FAccessAttribute("aria-label", const(m.text)),
				MButtonTitle(const(m.text))
			]
		);

	(\en -> MText2T(parent, m.text, if (en) textStyle else arrayPush(textStyle, MTextDisabled()))
	|> (\f -> TBorderA(paddings.left, paddings.top, paddings.right, paddings.bottom, f))
	|> (\f -> if (fullWidth) TCenterX(f) else f)
	|> (\f -> if (raised) MShapeFrame(parent, if (en) backgroundStyle else [Fill(contrastingColor(parent)), FillOpacity(0.12)], f, "MTextClickable") else f))
	|> (\f ->
		MComponent2T(
			manager,
			parent,
			"MTextClickable",
			focusState,
			\focus -> {
				el = elevation(focus);

				TIfLazy2(focus.enabled, f, !fullWidth)
				|> (\f2 ->
					if (el != zero)
						TEasedShadowShape(
							manager,
							parent,
							el,
							if (raised)
								f2
							else
								MShapeFrame(parent, [MFill(MBackgroundColor(getLightBackground(parent)))], f2, "MTextClickable"),
							0.3,
							RectangleShape("MTextClickable")
						)
					else
						f2
				)
			},
			m2t
		)
	)
	|> (if (fullWidth) makeTropicConstantHeight(None()) else makeTropicConstant(None(), None()))
}

style2MIconStyle(style : [?]) -> [MIconStyle] {
	concatA([
		extractStructMany(style, MColor(CWhite(), 0, false)),
		extractStructMany(style, FillOpacity(0.)),
		extractStructMany(style, MIconSize(0.)),
		extractStructMany(style, MIconDisabled()),
		extractStructMany(style, MCircleBackground(MWhite(), 0.)),
		extractStructMany(style, MElevation(zero)),
		extractStructMany(style, MIconCounter(const(0), [])),
	])
}

MIconButton2T(manager : MaterialManager, parent : MFocusGroup, m : MIconButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	circleBackground = extractStruct(m.style, MCircleBackground(MRed(500), 0.));
	iconSize = extractStruct(m.style, MIconSize(standardIconSize)).size;
	border = max(extractStruct(m.style, MIconButtonBorder(iconSize / 2.0)).border - max(circleBackground.size - iconSize, 0.) / 2., 0.);
	onClick = extractStruct(m.state, MOnClick(nop)).click |> (\f -> MOnClick(\ -> {m.onClick(); f();}));
	disabled = contains(m.style, MIconDisabled());
	defaultIconColor =
		if (circleBackground.size > 0.)
			MTextMColor(circleBackground.color)
		else
			getIconColor(parent);
	iconColor =
		extractStruct(m.style, defaultIconColor)
		|> (\iconColor ->
			if (disabled && iconColor != MBlack() && iconColor != MWhite())
				defaultIconColor
			else
				iconColor
		);

	focusState =
		concat(
			concatStyles(
				replaceStruct(m.state, onClick),
				[
					MRippleType(const(MRippleCenter())),
					MRippleColor(const(iconColor)),
					MHighlightOnFocus(const(true)),
					MHighlightOnHover(const(true)),
					MButtonTitle(const(m.name)),
					MRippleShape("MIconButton")
				]
			),
			[FAccessAttribute("aria-label", const(m.name))]
		);

	MComponent2T(
		manager,
		parent,
		"MIconButton " + m.name,
		focusState,
		\focus ->
			TIfLazy2(focus.enabled, \en ->
				MIcon2T(
					parent,
					m.name,
					style2MIconStyle(m.style)
					|> (\f -> if (!en) replaceStruct(f, MIconDisabled()) else f)
				),
				true
			)
			|> (\f -> TBorder4(border * 3.0 / 4.0, f)),
		m2t
	)
	|> (\f -> TBorder4(border / 4.0, f))
	|> makeTropicConstant(None(), None())
}

MIconToggle2T(manager : MaterialManager, parent : MFocusGroup, m : MIconToggle, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	value = extractStruct(m.state, MToggleValue(make(false))).value;
	valueLink = tryExtractStruct(m.state, MToggleValueLink(const(false), nop1));
	onClick = extractStruct(m.style, MOnClick(nop)).click |> (\f -> MOnClick(\ -> {reverseBehaviour(value); f();}));
	rippleType = extractStruct(m.state, MRippleType(const(MRippleCenter())));
	highlightOnFocus = extractStruct(m.state, MHighlightOnFocus(const(true)));

	iconSize = extractStruct(m.style, MIconSize(standardIconSize)).size;
	buttonBorder = extractStruct(m.style, MIconButtonBorder(iconSize / 2.0)).border;
	circleBackground = extractStruct(m.style, MCircleBackground(MRed(500), 0.));
	border = max(buttonBorder - circleBackground.size, 0.);
	iconStyle = style2MIconStyle(m.style);
	disabled = contains(m.style, MIconDisabled());
	defaultIconColor =
		if (circleBackground.size > 0.)
			MTextMColor(circleBackground.color)
		else
			getIconColor(parent);
	iconColor =
		extractStruct(m.style, defaultIconColor)
		|> (\iconColor ->
			if (disabled && iconColor != MBlack() && iconColor != MWhite())
				defaultIconColor
			else
				iconColor
		);

	falseIcon = extractStruct(m.style, MToggleFalseIcon(m.icon, []));
	falseIconSize = extractStruct(falseIcon.style, MIconSize(iconSize)).size;
	falseCircleBackground : MCircleBackground = extractStruct(falseIcon.style, circleBackground);
	falseIconStyle = replaceStructMany(falseIcon.style, [falseCircleBackground, MIconSize(falseIconSize)]);
	falseDisabled = contains(falseIconStyle, MIconDisabled());
	falseDefaultIconColor =
		if (falseCircleBackground.size > 0.)
			MTextMColor(falseCircleBackground.color)
		else
			getIconColor(parent);
	falseIconColor =
		extractStruct(falseIconStyle, defaultIconColor)
		|> (\falseIconColor ->
			if (falseDisabled && falseIconColor != MBlack() && falseIconColor != MWhite())
				falseDefaultIconColor
			else
				falseIconColor
		);

	sameSize = iconSize == falseIconSize && circleBackground.size == falseCircleBackground.size;

	focusState =
		concat(
			replaceStructMany(
				m.state,
				[
					onClick,
					rippleType,
					MRippleColor(fif(value, const(iconColor), const(falseIconColor))),
					extractStruct(m.state, MHighlightOnFocus(const(true))),
					extractStruct(m.state, MHighlightOnHover(const(true)))
				]
			),
			[
				IScriptBehaviour("value", value, ISValueEvent()),
				FAccessAttribute("aria-checked", fif(value, const("true"), const("false"))),
				FAccessAttribute("aria-label", fif(value, const(m.icon), const(falseIcon.icon))),
				MButtonTitle(const(m.icon + " " + falseIcon.icon))
			]
		);

	MComponent2T(
		manager,
		parent,
		"MIconToggle",
		focusState,
		\focus ->
			TIfLazy2(focus.enabled, \en ->
				TIfLazy2(value, \val ->
					if (val)
						MIcon2T(parent, m.icon, if (en) iconStyle else replaceStruct(iconStyle, MIconDisabled()))
					else
						MIcon2T(parent, falseIcon.icon, if (en) falseIconStyle else replaceStruct(falseIconStyle, MIconDisabled())),
					sameSize
				)
				|> (\iconToggle -> TBorder4(border * 3.0 / 4.0, iconToggle)),
				sameSize
			),
		m2t
	)
	|> (\iconToggle -> TBorder4(border / 4.0, iconToggle))
	|> (\iconToggle ->
		eitherMap(
			valueLink,
			\vl -> {
				TConstruct(
					[
						\ -> fBidirectionalLink(
							vl.value,
							value,
							\v -> nextDistinct(value, v),
							vl.onChange
						)
					],
					iconToggle
				)
			},
			iconToggle
		)
	)
	|> if (sameSize) makeTropicConstant(None(), None()) else idfn
}

MCheckBox2T(manager : MaterialManager, parent : MFocusGroup, m : MCheckBox, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	MCheckable2T(manager, parent, "MCheckBox", m.value, m.caption, m.style, "check_box", "check_box_outline_blank", false, "checkbox", m2t)
}

MRadio2T(manager : MaterialManager, parent : MFocusGroup, m : MRadio, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	checked = make(getValue(m.activeValue) == m.thisValue);
	TConstruct(
		[
			\ -> fBidirectionalLink(m.activeValue, checked, \v -> nextDistinct(checked, v == m.thisValue), \ch -> if (ch) nextDistinct(m.activeValue, m.thisValue))
		],
		MCheckable2T(manager, parent, "MRadio", checked, m.caption, m.style, "radio_button_checked", "radio_button_unchecked", true, "radio", m2t)
	)
}

MCheckable2T(manager : MaterialManager, parent : MFocusGroup, name : string, value : DynamicBehaviour<bool>, captionM : Material, style : [MCheckableStyle],
	iNameChecked : string, iNameUnchecked : string, cannotUncheck : bool, accessRole : string, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	mcolor : MColor = extractStruct(style, getAccentColor(parent));
	iconStyle = MCheckableStyle2IconStyle(style);
	iconSize = extractStruct(style, MIconSize(standardIconSize)).size;
	iconButtonBorder = extractStruct(style, MIconButtonBorder(iconSize / 2.)).border;
	border4 = extractStruct(style, MIconBorder4(iconButtonBorder, iconButtonBorder, iconButtonBorder, iconButtonBorder));
	uncheckedIconStyle = extractStruct(style, MUncheckedIconStyle(replaceStruct(iconStyle, getIconColor(parent)))).style;
	captionPosition = extractStruct(style, MCaptionPosition(MAfterPosition()));
	onClick = extractStruct(style, MOnClick(nop)).click |> (\f -> MOnClick(\ -> {next(value, cannotUncheck || !getValue(value)); f();}));
	onNewValue = tryExtractStruct(style, MOnNewValue(nop1));
	mWidth = extractStruct(style, MWidth(-1.)).width;
	clickEnabled = extractStruct(style, MClickEnabled(const(true))).enabled;
	enabled = extractStruct(style, MEnabled(const(true))).enabled;

	caption = \en ->
		switch (captionM) {
			MText(text, tStyle): {
				MIfLazy2T(
					manager,
					parent,
					en,
					\e, p2 ->
						if (e)
							m2t(captionM, p2)
						else
							MText2T(p2, text, arrayPush(tStyle, MTextDisabled())),
					true
				)
			}
			default: m2t(captionM, parent)
		}

	focusState =
		concat(
			concatStyles(
				replaceStruct(style, onClick),
				[
					MRippleColor(fif(value, const(mcolor), const(MBlack()))),
					MRippleType(const(MRippleCenter())),
					MHighlightOnFocus(const(true)),
					MHighlightOnHover(const(true)),
					MRippleOverlay(false),
					AccessRole(accessRole),
					MAddFocusGroup(true)
				]
			),
			[
				IScriptBehaviour("value", value, ISInputValue([], "bool", true)),
				FAccessAttribute("aria-checked", fif(value, const("true"), const("false"))),
				FAccessAttribute("aria-label", const(name)),
				// MButtonTitle(m.icon + " " + falseIcon.icon)
			]
		);

	MComponent2T(
		manager,
		parent,
		name,
		focusState,
		\focus ->
			TIfLazy2(focus.enabled, \en ->
				TIfLazy2(value, \val ->
					if (val)
						MIcon2T(parent, iNameChecked, if (en) replaceStruct(iconStyle, mcolor) else arrayPush(iconStyle, MIconDisabled()))
					else
						MIcon2T(parent, iNameUnchecked, if (en) uncheckedIconStyle else arrayPush(uncheckedIconStyle, MIconDisabled())),
					true
				),
				true
			)
			|> (\f -> TBorder(border4.left * 3.0 / 4.0, border4.top * 3.0 / 4.0, border4.right * 3.0 / 4.0, border4.bottom * 3.0 / 4.0, f)),
		m2t
	)
	|> (\f -> TBorder(border4.left / 4.0, border4.top / 4.0, border4.right / 4.0, border4.bottom / 4.0, f))
	|> (\f -> {
		cap = caption(fmin(enabled, parent.enabled));

		switch (captionPosition.pos) {
			MBeforePosition() : TBaselineCols2A(cap, f);
			MAfterPosition() : TBaselineCols2A(f, cap);
			MRightPosition() : TBaselineCols2(f, cap);
			MLeftPosition() : TBaselineCols2(cap, f);
			MTopPosition() : TLinesXCenter([cap, f]);
			MBottomPosition() : TLinesXCenter([f, cap]);
		}
	})
	|> makeTropicConstantHeight(None())
	|> (\checkable ->
		eitherMap(
			onNewValue,
			\onv ->
				TConstruct(
					[makeSubscribe(value, onv.fn)],
					checkable
				),
			checkable
		)
	)
	|> (\checkable -> MAddLabelAndLeftIcon(manager, parent, checkable, style, const(false), 0.))
	|> (\checkable -> if (mWidth >= 0.) TAvailableWidth(checkable, const(mWidth)) else checkable)
}

MCheckableStyle2IconStyle(style : [MCheckableStyle]) -> [MIconStyle] {
	filtermap(style, \st ->
		switch (st) {
			MIconStyle() : {a : Maybe<MIconStyle> = Some(st); a}
			default : None()
		}
	)
}

MSwitchControl2T(manager : MaterialManager, parent : MFocusGroup, m : MSwitchControl, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	color : MColor = extractStruct(m.style, getAccentColor(parent));
	onOffText = tryExtractStruct(m.style, MOnOffText("", ""));
	thumbPosition = make(Point(if (changeBoolIfRTL(getValue(m.value))) 18. else 0., 0.));
	onClick =
		extractStruct(m.style, MOnClick(nop)).click
		|> (\f -> MOnClick(\ -> {reverseBehaviour(m.value); f();}));
	enabled = extractStruct(m.style, MEnabled(const(true))).enabled;

	focusState =
		concat(
			concatStyles(
				replaceStruct(m.style, onClick),
				[
					MRippleType(const(MRippleCenter())),
					MRippleColor(fif(m.value, const(color), const(MGrey(500)))),
					MRipplePosition(const(Point(24., 24.))),
					MRippleShape("MSwitchControl"),
					MRippleOverlay(false),
					MHighlightOnFocus(const(true)),
					MHighlightOnHover(const(true)),
				]
			),
			[
				IScriptBehaviour("value", m.value, ISInputValue(eitherMap(onOffText, \txt -> [txt.off, txt.on], ["False", "True"]), "bool", true)),
				FAccessAttribute("aria-checked", fif(m.value, const("true"), const("false"))),
				MButtonTitle(const(eitherMap(onOffText, \txt -> txt.off + " " + txt.on, "")))
			]
		);
	TGroup2WithoutMetrics( // Track
		TIfLazy2(
			m.value,
			\v ->
				TIfLazy2(
					fmin(parent.enabled, enabled),
					\en ->
						TFrame(
							0.,
							7.,
							[
								MFill(if (en && v) color else contrastingMColor(parent)),
								FillOpacity(
									if (en) {
										if (v) 0.5 else if (getLightBackground(parent)) 0.38 else 0.3
									} else {
										if (getLightBackground(parent)) 0.12 else 0.1
									}
								)
							],
							TFixed(32., 14.)
						),
					true
				),
			true
		)
		|> (\f -> TTranslate(const(Point(17., 17.)), f)),
		MComponent2T(
			manager,
			parent,
			"MSwitchControl",
			focusState,
			\focus ->
				TIfLazy2( // Thumb
					m.value,
					\v ->
						TIfLazy2(
							focus.enabled,
							\en ->
								MShape(
									parent,
									[
										MFill(
											if (en && v)
												color
											else
												MGrey(if (getLightBackground(parent) && en) 50 else if (!en && !getLightBackground(parent)) 800 else 400)
										)
									],
									TFixed(20., 20.),
									"MSwitchControl"
								),
							true
						),
					true
				)
				|> (\t -> TShadowShape(parent, const(3.), t, RectangleShape("MSwitchControl")))
				|> (\t -> TBorder4(11., t)),
			m2t
		)
		|> (\t -> TBorder4(3., t))
		|> (\f -> TTranslate(thumbPosition, f))
	)
	|> makeTropicConstant(64. |> Some, 48. |> Some)
	|> (\f -> TBaseline(const(29.), f))
	|> (\f ->
		eitherMap(
			onOffText,
			\text ->
				TGroup2(
					TIfLazy2(
						fmin(parent.enabled, enabled),
						\en ->
							MText2T(parent, text.on, [MButton1(), if (en) color else MTextDisabled()]),
						true
					)
					|> (\t -> TVisible(feq(m.value, true), t)),

					MText2T(parent, if (text.off != "") text.off else text.on, [MButton1(), MTextDisabled()])
					|> (\t -> TVisible(feq(m.value, false), t))
				)
				|> (\t -> TBorderA(0., 0., 24., 0., t))
				|> (\t -> TBaselineCols2A(f, t)),
			f
		)
	)
	|> (\f ->
		MEasingAnimation(
			manager,
			parent,
			const(easingTransitionDuration),
			const(easingStandartCurve),
			m.value,
			\v ->
				Some(v),
			\v, p ->
				nextDistinct(thumbPosition, Point(lerp(0., 18., if (changeBoolIfRTL(v)) p else 1. - p), 0.)),
			[],
			f
		)
	)
	|> (\f -> MAddLabelAndLeftIcon(manager, parent, f, m.style, const(false), 0.))
	|> makeTropicConstant(None(), None())
}

MFloatingButton2T(manager : MaterialManager, parent : MFocusGroup, m : MFloatingButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	speedDial = tryExtractStruct(m.style, MFabSpeedDial("", [], []));
	bgColor = extractStruct(m.style, getAccentColor(parent));
	iconColor = extractStruct(m.style, MIconColor(MWhite())).color;
	iconOpacity = extractStruct(m.style, FillOpacity(1.));
	buttonSize = if (extractStruct(m.style, MFabMini(false)).mini) 40. else 56.;
	elevation = \down -> extractStruct(m.style, MElevation(fif(down, const(12.), const(6.)))).elevation;
	scrollPoint = extractStruct(m.style, makeTScrollInspectVisible()).topleft;

	showActionButtons = make(false);
	enabled = extractStruct(m.state, MEnabled(const(true))).enabled;
	onClick =
		extractStruct(m.state, MOnClick(nop)).click
		|> (\click ->
			eitherFn(
				speedDial,
				\sd -> \ -> {
					sab = getValue(showActionButtons);
					if (sab) click();

					next(showActionButtons, !sab);
				},
				\ -> click
			)
		);

	buttonScale = make(if (fgetValue(enabled)) Factor(1., 1.) else Factor(0., 0.));
	iconRotate = make(if (fgetValue(enabled)) 0. else -30.);
	buttonBorders = if (mobile) 16. else 24.;
	height = buttonSize + buttonBorders + 56.;
	scrollUp = make(true);
	point = make(Point(0.0, if (fgetValue(scrollUp)) 0. else height));
	scrollShift = ref 0.;

	focusState =
		concat(
			replaceStructMany(
				m.state,
				[
					MEnabled(fand(scrollUp, enabled)),
					MOnClick(onClick),
					MHighlightOnFocus(const(true)),
					MRippleType(const(MRippleCenter())),
					MRippleColor(const(iconColor)),
					MButtonTitle(const(m.icon))
				]
			),
			[
				FAccessAttribute("aria-label", const(m.icon))
			]
		);

	eitherFn(
		speedDial,
		\sd -> {
			openIcon = extractStruct(sd.style, MOpenIcon("close")).icon;

			TIfLazy2(
				showActionButtons,
				\s ->
					MIcon2T(parent, if (s) openIcon else m.icon, [iconColor, iconOpacity]),
				true
			)
		},
		\ -> MIcon2T(parent, m.icon, [iconColor, iconOpacity])
	)
	|> (\f -> TRotate(iconRotate, f))
	|> (\f -> TCenterIn(f, TFixed(buttonSize, buttonSize)))
	|> (\f ->
		TGroup2(
			MShape(
				parent,
				[MFill(bgColor)],
				TFixed(buttonSize, buttonSize),
				"MFloatingButton"
			),
			f
		)
	)
	|> (\f ->
		MComponent2T(
			manager,
			parent,
			"MFloatingButton",
			focusState,
			\focus ->
				TEasedShadowShape(manager, parent, elevation(focus.down), f, 0.3, RectangleShape("MFloatingButton"))
				|> (\f2 ->
					eitherFn(
						speedDial,
						\sd -> {
							hover2 = make(false);

							TGroup2SameMetrics(
								f2,
								TShowLazy(showActionButtons, \ -> MFabSpeedDial2T(manager, parent, sd, buttonSize, showActionButtons, hover2, m2t))
							)
							|> (\f3 ->
								TConstruct(
									if (!mobile)
										[\ -> fconnect(fOr(focus.hover, hover2), showActionButtons)]
									else
										[],
									f3
								)
							)
						},
						\ -> f2
					)
				),
			m2t
		)
	)
	|> (\f ->
		MEasingAnimation(
			manager,
			parent,
			const(easingTransitionDuration),
			const(easingStandartCurve),
			enabled,
			\s -> {
				next(showActionButtons, false);
				Some(s)
			},
			\s, d0 -> {
				d = if (s) d0 else 1. - d0;

				next(iconRotate, lerp(-30., 0., d));
				next(buttonScale, Factor(d, d));
			},
			[],
			TScale(buttonScale, f)
		)
	)
	|> (\f -> TCenterIn(f, TFixed(buttonSize, buttonSize)))
	|> (\f -> TBorder4(buttonBorders, f))
	|> makeTropicConstant(None(), None())
	|> (\f ->
		if (contains(m.style, MFabHalfUp()))
			TTranslate(const(Point(0., -buttonSize / 2. - buttonBorders)), f)
		else
			f
	)
	|> (\f -> if (changeBoolIfRTL(contains(m.style, MRight()))) TCols2(TFillX(), f) else f)
	|> (\f ->
		if (contains(m.style, MTop()) || contains(m.style, MBottom()))
			TTweak([TAlign(zero, const(b2d(contains(m.style, MBottom()))))], f, TFillY())
		else
			f
	)
	|> (\f -> TTranslate(point, f))
	|> (\f ->
		MEasingAnimation(
			manager,
			parent,
			fif(scrollUp, const(easingEnteringDuration), const(easingLeavingDuration)),
			fif(scrollUp, const(easingDecelerationCurve), const(easingAccelerationCurve)),
			scrollUp,
			\s ->
				Some(s),
			\s, py ->
				next(point, Point(0., lerp(0., height, if (s) 1. - py else py))),
			[],
			f
		)
	)
	|> (\f ->
		TConstruct([
				makeSubscribe2(scrollPoint, \sp -> {
					su = getValue(scrollUp);

					if (sp.y < ^scrollShift - 160. && !su) {
						scrollShift := sp.y;
						nextDistinct(scrollUp, true);
					} else if (sp.y > ^scrollShift + 160. && su) {
						scrollShift := sp.y;
						nextDistinct(scrollUp, false);
					} else if (sp.y < ^scrollShift && su || sp.y > ^scrollShift && !su) {
						scrollShift := sp.y;
					}
				}),
			],
			f
		)
	)
}

MFabSpeedDial2T(manager : MaterialManager, parent : MFocusGroup, m : MFabSpeedDial, mainSize : double, showActionButtons : DynamicBehaviour<bool>,
	hover : DynamicBehaviour<bool>, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	size = extractStruct(m.style, MIconSize(42.)).size;
	textStyle =
		extractStruct(m.style,
			MFabLabelsTextStyle([
				if (mobile)
					contrastingMColor(parent)
				else
					sameLightMColor(parent)
			])
		).textStyle;
	textBgStyle = [MFill(extractStruct(m.style, MDialogColor(mobile == getLightBackground(parent))))];
	buttonBorder = (mainSize - size) / 2.;
	mainLabelSize = getTWordMetrics(MText2T(parent, m.label, textStyle), makeTree()).width + 8.;
	textSize = either(maxA(map(m.actions, \a -> getTWordMetrics(MText2T(parent, a.label, textStyle), makeTree()).width)), 142.) + 8.;
	actionsLength = length(m.actions);

	map(m.actions, \a -> {
		onClick = \ -> {a.onClick(); reverseBehaviour(showActionButtons)};

		TCols([
			TFillX(),
			if (a.label != "")
				TCenterY(
					TFrame(4., 2., textBgStyle, MText2T(parent, a.label, textStyle))
					|> (\f -> TShadowShape(parent, const(4.), f, RectangleShape("MFloatingButton")))
				)
			else
				TFixed(8., 0.),
			switch (a) {
				MFabIconButton(icon, __, __, iconStyle): {
					bgColor = extractStruct(iconStyle, getAccentColor(parent));
					iconColor = extractStruct(iconStyle, MIconColor(MTextMColor(bgColor))).color;

					MIconButton2T(
						manager,
						parent,
						MIconButton(
							icon,
							onClick,
							eitherFn(
								tryExtractStruct(iconStyle, FillOpacity(1.)),
								\fo -> [fo, iconColor, MIconButtonBorder((size - 24.) / 2.)],
								\ -> [iconColor, MIconButtonBorder((size - 24.) / 2.)]
							),
							[]
						),
						m2t
					)
					|> (\f ->
						TGroup2(
							MShape(
								parent,
								[MFill(bgColor)],
								TFixed(size, size),
								"MIconButton"
							),
							f
						)
					)
				}
				MFabAvatar(imageurl, __, __): {
					MAvatar2T(parent, imageurl, [MIconSize(size)])
					|> (\f ->
						TGroup2(
							MShape(
								parent,
								[MFill(MDialogColor(getLightBackground(parent)))],
								TFixed(size, size),
								"MAvatar"
							),
							f
						)
					)
					|> (\f ->
						MComponent2T(
							manager,
							parent,
							"MFabAvatar",
							[MOnClick(onClick), MRippleType(const(MRippleCenter()))],
							\__ -> f,
							m2t
						)
					)
				}
				MFabLetterIcon(text, __, __, letterTextStyle, bgColor): {
					MLetterIcon2T(manager, parent, MLetterIcon(text, [MIconSize(size), bgColor, FillOpacity(1.)], letterTextStyle))
					|> (\f ->
						MComponent2T(
							manager,
							parent,
							"MFabLetterIcon",
							[MOnClick(onClick), MRippleType(const(MRippleCenter()))],
							\__ -> f,
							m2t
						)
					)
				}
			}
			|> (\f -> TShadowShape(parent, const(4.), f, RectangleShape(substring(a.structname, 0, 1) + substring(a.structname, 4, strlen(a.structname)))))
			|> (\f -> TBorder(buttonBorder + 16. , buttonBorder, buttonBorder, buttonBorder, f))
		])
	})
	|> (\f -> TAvailable(TLines(f), TFixed(max(textSize, mainLabelSize + 16.0) + mainSize, mainSize * i2d(actionsLength))))
	|> (\f ->
		TLines2(
			f,
			TTweak(
				[TAlign(const(1.), const(0.5))],
				TFrame(4., 2., textBgStyle, MText2T(parent, m.label, textStyle))
				|> (\f2 -> TShadowShape(parent, const(4.), f2, RectangleShape("MFloatingButton"))),
				TFixed(max(textSize, mainLabelSize), mainSize + 16.),
			)
		)
	)
	|> (\f -> if (!mobile) TCopySize(f, \tr -> TInteractive([TMouseInside(hover, false)], tr), true) else f)
	|> (\f -> TTranslate(const(Point(-max(textSize, mainLabelSize) - 16., -mainSize * i2d(actionsLength) - 8.)), f))
}


MChip2T(manager : MaterialManager, parent : MFocusGroup, m : MChip, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	title = m.title;
	style = m.style;

	chipContentHeight = 16.;
	visible =  extractStruct(style, MChipVisible(make(true))).visible;
	enabled = extractStruct(style, MEnabled(const(true))).enabled;
	selectable = extractStruct(style, MChipSelectable(const(false), make(false)));
	chipHoverActive = extractStruct(style, MChipHoverActive(const(-1), const(false)));
	extHover = fneq(chipHoverActive.hover, -1);
	active = chipHoverActive.active;
	onClose = tryExtractStruct(style, MOnClose(\ -> true));
	onClick0 = extractStruct(style, MOnClick(nop)).click;
	onClick = \ -> {
		onClick0();
		if (fgetValue(selectable.enabled)) reverseBehaviour(selectable.selected)
	};
	width = tryExtractStruct(style, MWidth(-1.));
	color = extractStruct(style, getPrimaryColor(parent));
	shadeColor = MColor(color.color, min(900, color.shade + 200), color.accent);
	icon : Material =
		extractStructMany(style, MAvatar("", []))
		|> (\f ->
			if (length(f) > 0)
				f[0]
			else
				extractStructMany(style, MLetterIcon("", [], []))
				|> (\f2 -> if (length(f2) > 0) f2[0] else TEmpty())
		);
	focusEnabled = make(true);
	focusHover = make(false);
	focusDown = make(false);
	focusFocused = make(false);

	focusState = [MEnabled(enabled), MOnClick(onClick), MRippleType(const(MNoRipple())), MButtonTitle(const(m.title)), MAdditionalRollOutCheck()];

	(\p -> (\hov, sel -> {
		col : MColor = if (sel) {if (hov) MTextMColor(shadeColor) else MTextMColor(color) } else if (hov) MWhite() else MBlack();
		op : double = if (col == MWhite()) 1. else 0.32;

		eitherMap(
			width,
			\w -> MEllipsisText2T(manager, parent, MEllipsisText(title, [MDataRow(), col]), m2t),
			MText2T(parent, title, [MDataRow(), col])
		)
		|> (\f -> TCenterYIn(f, TFixed(0., chipContentHeight)))
		|> (\f ->
			if (icon != TEmpty()) {
				TCols2A(
					switch (icon) {
						MLetterIcon(text, iconStyle, textStyle): {
							MLetterIcon2T(
								manager,
								p,
								MLetterIcon(
									text,
									replaceStruct(iconStyle, MIconSize(32.))
									|> (\f2 ->
										if (hov) {
											extractStruct(iconStyle, getPrimaryColor(parent))
											|> (\f3 -> replaceStruct(f2, MColor(f3.color, min(900, f3.shade + 200), f3.accent)))
										} else f2),
									textStyle
								)
							)
						}
						MAvatar(url, avatarStyle): {
							MAvatar2T(p, url, replaceStruct(avatarStyle, MIconSize(32.)))
						}
						default: TEmpty();
					}
					|> (\f2 -> TBorderA(-13., -8., 8., -8., f2)),
					f)
			} else
				f)
		|> TBorderLeftRight(4.)
		|> (\f ->
			if (contains(style, MCloseButton()) || isSome(onClose)) {
				onClickClose = \ -> eitherFn(onClose, \oc -> if (oc.close()) next(visible, false), \ -> next(visible, false));

				MIconButton2T(
					manager,
					p,
					MIconButton(
						"cancel",
						onClickClose,
						[MIconSize(20.), FillOpacity(op), col, MIconButtonBorder(0.)],
						[MEnabled(enabled), MRippleType(const(MNoRipple())), MFocusEnabled(const(false)), MDisableHover(),
							MCursorShape(const(DefaultCursor())), AccessRole("")]
					),
					m2t
				)
				|> (\f2 -> TBorderA(4., -2., 0., -2., f2))
				|> (\f2 -> TCols2A(f, f2))
			} else {
				f
			}
		)
	})
	|> (\f ->
		TCopySize(
			TIfLazy2(fOr(focusEnabled, active), \en ->
				if (en)
					(\hov ->
						TIfLazy2(
							fOr(fand(selectable.enabled, selectable.selected), active),
							\sel -> {
								col =
									if (sel) {
										if (hov) shadeColor else color
									} else
										MGrey(if (hov) 600 else 300);
								MShapeFrame(
									parent,
									[MFill(col)],
									TBorder4(8., f(hov, sel)),
									"MChip"
								)
							},
							true
						)
					)
					|> (\f2 -> TIfLazy2(fmaxA([focusHover, focusDown, focusFocused, extHover], true), f2, true))
				else
					TAlpha(
						const(0.63),
						MShapeFrame(
							parent,
							[MFill(MGrey(300))],
							TBorder4(8., f(false, false)),
							"MChip"
						)
					),
				true
			),
			\tr ->
				MComponent2T(
					manager,
					p,
					"MChip",
					focusState,
					\focus ->
						TConstruct(
							[
								\ -> fconnect(focus.enabled, focusEnabled),
								\ -> fconnect(focus.hover, focusHover),
								\ -> fconnect(focus.down, focusDown),
								\ -> fconnect(focus.focused, focusFocused)
							],
							tr
						),
					m2t
				),
			false
		)
	)
	|> (\t -> eitherMap(width, \w -> TAvailableWidth(t, const(w.width)), t))
	|> (\f -> TBorder4(4., f))
	)
	|> (\f ->
		MComponentGroup2T(
			manager,
			parent,
			"MChipContainer",
			[
				IScriptBehaviour("visible", visible, ISAppearanceEvent()),
				IScriptBehaviour("selected", selectable.selected, ISSelectionEvent())
			],
			\par -> MIfLazy2T(manager, par, visible, \v, p -> if (v) makeTropicConstant(None(), None())(f(p)) else TEmpty(), false)
		)
	)
}

MRawButton2T(manager : MaterialManager, parent : MFocusGroup, m : MRawButton, m2t : (Material, MFocusGroup) -> Tropic) -> Tropic {
	normal = \ -> m2t(m.normal, parent);
	hovered = \ -> m2t(m.hover, parent);
	pressed = \ -> m2t(m.pressed, parent);
	disabled = \ -> m2t(m.disabled, parent);

	state : [MButtonState] =
		if (m.shortcut == "")
			arrayPush(m.state, MShortcut(m.shortcut))
		else
			m.state;

	MComponent2T(
		manager,
		parent,
		"MRawButton",
		state,
		\focus ->
			TIfLazy2(focus.enabled, \en ->
				if (en)
					TIfLazy2(focus.down, \d ->
						if (d)
							pressed()
						else
							TIfLazy2(fOr(focus.hover, focus.focused), \h ->
								if (h) hovered() else normal(), false
							),
						false
					)
				else
					disabled(),
				false
			),
		m2t
	);
}
