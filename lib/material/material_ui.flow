import material/material_dialog;
import material/material_snackbar;
import material/internal/material_reorder;
import ui/animate/teasing;
import form/realhtmlworkaround;
import net/integration_url_parameter;

export {
	// A function which constructs a bunch of MRadio that belong to one group
	// first MRadio's index is 0
	MRadios(index : DynamicBehaviour<int>, style : [MCheckableStyle], captions : [Material]) -> [Material];

	// Help to create common patterns, when you need to place smth at the top
	// of another material
	MOnTop(base : Material, material : Material) -> Material;
	MRightShift(m : Material) -> Material;

	// Construct material only once when condition is or becomes true.
	MLazyOnCondition(condition : Transform<bool>, fn : () -> Material) -> Material;
	// Lazy sibling of MShow.
	MShowLazy(condition : Transform<bool>, fn : () -> Material) -> Material;
	// Construct lines in list only when they are in visible space of scroll
	MLazyList(lines : [() -> Material], scrollInspect : TScrollInspectVisible) -> Material;
	// MLazyList with forceLoad - backdoor for loading specific item and items above it without scrolling
	MLazyListExtended(lines : [Pair<() -> Material, Transform<bool>>], scrollInspect : TScrollInspectVisible) -> Material;

	// Helper for standard popup menu
	// topLeft is catched only when isVisible becomes true
	MPopupMenu(topleft : DynamicBehaviour<Point>, isVisible : DynamicBehaviour<bool>, items : [MMenuLine]) -> Material;

	// Helper for lifting element up, above popups and dialogs
	MTopMost(content : Material, style : [MTopMostStyle]) -> Material;
		MTopMostStyle ::= MMovablePosition, MMovableEnabled, MDelay;
			MMovableEnabled(enabled : Transform<bool>);

	// Helper for creating dashed or dotted circle
	MDashedCircle(radius : double, dashNumber : int, color : MColor) -> Material;

	MEditGrid(items : [[MEGItem]], style : [MEGItemStyle]) -> Material;
	MEGItem2M(item : MEGItem, gstyle : [MEGItemStyle]) -> Material;

	makeMRealHTML(key : string, html : MRealHTML) -> Material;

	MRealHTMLCrossDomain(url : string, domain : string, wh : Transform<WidthHeight>, sendChannel : DynamicBehaviour<string>,
		receiveChannel : DynamicBehaviour<string>, targetOrigin : string, key : string, onLoaded : () -> void,
		zoomEnabled : Transform<bool>) -> Material;
	MRealHTMLCrossDomain2(url : string, domain : string, wh : Transform<WidthHeight>, sendChannel : DynamicBehaviour<string>,
		receiveChannel : DynamicBehaviour<string>, targetOrigin : string, key : string, onLoaded : () -> void, onError : (string) -> void,
		zoomEnabled : Transform<bool>) -> Material;

	// Changes items on every dragging ends
	MReorderCols(items : DynamicBehaviour<[?]>, materialize : (?) -> Material, style : [MReorderStyle]) -> Material;
	MReorderLines(items : DynamicBehaviour<[?]>, materialize : (?) -> Material,	style : [MReorderStyle]) -> Material;

	// index - position in array, id - unique identifier
	SelectMLines(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material;
	SelectMLinesA(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material;
	SelectMCols(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material;
	SelectMColsA(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material;
	SelectMGroup(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material;

	MAudioPlayer(filename : string, style : [MAudioPlayerStyle]) -> Material;
		MAudioPlayerStyle ::= MVideoPlayerStyle, MWidth;

	// FVideoTimeRange style disabled
 	MMultiAudioPlayer(filenames : [string], mstyle : [MMultiAudioPlayerStyle]) -> Material;
 		MMultiAudioPlayerStyle ::= FVideoStyle, IndexInPlaylist;

 		// to switch files (samples) in multiplayer
		IndexInPlaylist(index : DynamicBehaviour<int>);

	// use to place material on top of placeholder over other elements
	MInlinePopup(
		manager : MaterialManager,
		placeholder : Material,
		positionScale : Transform<PositionScale>,
		popup : Material
	) -> Material;

	MInlinePopupPosition(
		manager : MaterialManager,
		placeholder : Material,
		position : Transform<Point>,
		popup : Material
	) -> Material;

	MAddShortcutDialog(manager : MaterialManager, onDismiss : () -> void) -> () -> void;

	MDropDownOrAutoComplete(
		items : [string],
		selected : DynamicBehaviour<int>,
		style : [MDropDownOrAutoCompleteStyle],
	) -> Material;

	MSeparatedButton(mainButton : MTextButton, iconButton : MIconButton, menuLines : [MMenuLine], widthByButton : bool) -> Material;

	// MRequiredField, MLabel replace corresponding inner autocomplete styles
	MDropDownOrAutoCompleteStyle ::= MDropDownStyles, MAutoCompleteStyles, MAutoCompleteState, MMultipleSelection,
		MItemsLimit, MRequiredField, MLabel, MShowAnyItem, MCustomAnyItem, MChangeOnClick, MInputInspector;

		MDropDownStyles(style : [MDropDownStyle]);
		MMultipleSelection(selected : DynamicBehaviour<[int]>, style : [MMultiSelectDropDownStyle]);
		MAutoCompleteStyles(style : [MAutoCompleteStyle]);
		MAutoCompleteState(state : [MTextInputState]);
		MItemsLimit(limit : int);
		MShowAnyItem(); // Adds "Any" option. Doesn`t work with multi-selection.
		MCustomAnyItem(text : string);
		MChangeOnClick(); // Changes selected only when click on autocomplete item.
		MInputInspector(text : DynamicBehaviour<string>); // Intended for MAutoComplete case.

	MCollapsingBox(
		content : Material,
		yTrans : Transform<double>,
		expand : Transform<bool>,
		absoluteOffsetMode : bool,
		fade : bool
	) -> Material;

	// Construct an HTML stage with the given metrics
	MHTMLStage(wh : Transform<WidthHeight>, constructor : (stage : native) -> () -> void) -> Material;

	MLinesSeparated(values : [Material]) -> Material;
	MColsSeparated(values : [Material]) -> Material;

	MPictureFill(picURL : string, style : [MPictureStyle]) -> Material;
	MPictureFit(picURL : string, style : [MPictureStyle]) -> Material;

	MTabs(tabs : [MTab], selected : DynamicBehaviour<int>, style : [MTabsStyle]) -> Material {
		MDynamicTabs(const(tabs), selected, style)
		|> MCallstack;
	};

	MDataTable(columns : [MColumnDynamic], rows : [[Material]], style : [MDataTableStyle]) -> Material {
		MDynamicDataTable(columns, const(rows), style)
		|> MCallstack;
	};

	MTextStyle2CharacterStyleRootParent(style : [MParagraphStyle]) -> [CharacterStyle];
	MFontStyle2CharacterStyleRootParent(style : MFontStyle, darkText : bool) -> [BasicCharacterStyle];
}

MRadios(index : DynamicBehaviour<int>, style : [MCheckableStyle], captions : [Material]) -> [Material] {
	mapi(captions, \i, cp -> MRadio(cp, i, index, style))
}

MRightShift(m : Material) -> Material {
	MCols2(TFillX(), m)
}

MOnTop(base : Material, material : Material) -> Material {
	MLet("base", base,
		MGroup2(
			TDisplay("base"),
			MSize(
				TGhost("base"),
				material
			)
		)
	)
}

MLazyOnCondition(condition : Transform<bool>, fn : () -> Material) -> Material {
	if (fgetValue(condition)) {
		fn()
	} else {
		material = make(TEmpty());
		create = ref None();

		MConstruct(
			[\ -> {
				uns = fsubscribe(condition, \c -> if (c) onlyOnce(create, \ -> next(material, fn())));
				\ -> callList(uns)
			}],
			MMutable(material)
		)
	}
}

MShowLazy(condition : Transform<bool>, fn : () -> Material) -> Material {
	MLazyOnCondition(condition, \ -> MShow(condition, fn()))
}

MLazyList(lines : [() -> Material], scrollInspect : TScrollInspectVisible) -> Material {
	MLazyListExtended(map(lines, \line -> Pair(line, const(false))), scrollInspect)
}

MLazyListExtended(lines : [Pair<() -> Material, Transform<bool>>], scrollInspect : TScrollInspectVisible) -> Material {
	height = make(0.0);
	loadState0 : [DynamicBehaviour<bool>] = generate(0, length(lines), \__ -> make(false));
	loadState = mapi(loadState0, \i, loaded -> fOrs(concat([loaded], map(tailFrom(lines, i), \p -> p.second)), true));

	loadLazy = ref nop;
	loadLazy := \ -> if (getValue(height) <= getValue(scrollInspect.topleft).y + getValue(scrollInspect.widthHeight).height) {
		// scrolled to the end of list
		maybeApply(find(loadState0, \b -> !getValue(b)), // not loaded guy
			\b -> {
				next(b, true); // load him!
				^loadLazy(); // check again
			});
	}

	MConstruct([
		\ -> subscribe(scrollInspect.topleft, \__ -> ^loadLazy()),
		\ -> subscribe2(scrollInspect.widthHeight, \__ -> ^loadLazy())
	], TEmpty())
		|> (\m -> arrayPush(mapi(lines, \i, line -> MShowLazy(loadState[i], line.first)), m))
		|> MLines
		|> (\m -> MAttachHeight(m, height));
}

// this can help to close all currently opened popups to have only latest be visible at a time
mPopupMenuAllVisibility : ref [Pair<int, DynamicBehaviour<bool>>] = ref [];
mPopupMenuAllVisibilityCounter = ref 0;

MPopupMenu(topleft : DynamicBehaviour<Point>, isVisible : DynamicBehaviour<bool>, items : [MMenuLine]) -> Material {
	id = ^mPopupMenuAllVisibilityCounter + 1;
	mPopupMenuAllVisibilityCounter := id;
	m = MTranslate(fselect(isVisible, FLift(\b -> getValue(topleft))), MMenu(TEmpty(), items, [MOpenMenu(isVisible)]));
 	mPopupMenuAllVisibility := arrayPush(^mPopupMenuAllVisibility, Pair(id, isVisible));
 	MConstruct([
 		makeSubscribe(isVisible, \vis -> if (vis) iter(^mPopupMenuAllVisibility, \kv -> if (kv.first != id) nextDistinct(kv.second, false))),
		\-> \-> mPopupMenuAllVisibility := filter(^mPopupMenuAllVisibility, \kv -> kv.first != id),
	], m);

}

MTopMost(content : Material, style : [MTopMostStyle]) -> Material {
	movPosition = extractStruct(style, MMovablePosition(make(zeroPoint))).position;
	movingEnabled = extractStruct(style, MMovableEnabled(const(true))).enabled;
	delay = extractStruct(style, MDelay(0.)).delay * 1000. |> floor;

	dialogBorder = if (mobile) 12. else 24.;

	close : ref DynamicBehaviour<bool> = ref make(false);
	elementClip = ref TEmpty();

	MGetManager(\manager ->
		MMoveClip(
			MComponentGroup(
				MCopySize2(content, \tr, sz -> 
					MGroup2(
						MCursor(ArrowCursor(), MTranslate(movPosition, sz |> disableMInteractivesBelow)),
						MMovable(tr, TFillXY(), [MMovablePosition(movPosition), MEnabled(movingEnabled)])
					)
				),
				[MZorder(manager.manager.zorder)]
			),
			\el -> elementClip := el
		)
		|> (\m -> MConstruct([
			makeSubscribe2(manager.manager.zorder, \ord -> {
				next(^close, true);
				close := make(false);
				if (ord > 0)
					timer(delay, \ ->
						ShowMDialog(
							manager,
							^close,
							[
								MDialogNonModal(),
								MDialogNoCenter(),
								MDialogNoAnimation(),
								MPassClicks()
							],
							^elementClip
							|> MBorderTop(-dialogBorder)
							|> MBorderLeft(-dialogBorder)
						)
					)
			})
		], m))
	)
}

MDashedCircle(radius : double, dashNumber : int, color : MColor) -> Material {
	stepSize = 180. / i2d(dashNumber);

	TGraphics(
		generate(0, dashNumber, \i ->
			SectorPath(radius, radius, radius, stepSize * i2d(i) * 2., stepSize * (i2d(i) * 2. + 1.), false, false, true)
		)
		|> concatA,
		[MStroke(color)]
	)
}

MEditGrid(items : [[MEGItem]], style : [MEGItemStyle]) -> Material {
	width = extractStruct(style, MWidth(-1.)).width;

	map(items, \it ->
		map(it, \i ->
			MEGItem2M(
				i,
				if (width >= 0. && length(it) > 1)
					replaceStruct(style, MWidth(-1.))
				else
					style
			)
		)
		|> MBaselineCols
		|> (\f ->
			if (width >= 0.)
				MAvailable(f, TFillWY(width))
			else
				f
		)
	)
	|> MLines
}

MEGItem2M(item : MEGItem, gstyle : [MEGItemStyle]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> MEGItem2T(p, item, gstyle, m2t)))
}

makeMRealHTML(key : string, html : MRealHTML) -> Material {
	visValue = make(getValue(isAllRealHTMLDisplayed));

	MConstruct(
		[
			\ -> {
				controlTree := setTree(^controlTree, key, RealHTMLControl(visValue));
				\ -> controlTree := removeFromTree(^controlTree, key);
			}
		],
		MVisible(fmin(isAllRealHTMLDisplayed, visValue), html)
	)
}

MRealHTMLCrossDomain(
	url : string,
	domain : string,
	wh : Transform<WidthHeight>,
	sendChannel : DynamicBehaviour<string>,
	receiveChannel : DynamicBehaviour<string>,
	targetOrigin : string,
	key : string,
	onLoaded : () -> void,
	zoomEnabled : Transform<bool>
) -> Material {
	MRealHTMLCrossDomain2(url, domain, wh, sendChannel, receiveChannel, targetOrigin, key, onLoaded, ignore, zoomEnabled);
}

MRealHTMLCrossDomain2(
	url : string,
	domain : string,
	wh : Transform<WidthHeight>,
	sendChannel : DynamicBehaviour<string>,
	receiveChannel : DynamicBehaviour<string>,
	targetOrigin : string,
	key : string,
	onLoaded : () -> void,
	onError : (string) -> void,
	zoomEnabled : Transform<bool>
) -> Material {
	sendToJS = ref nop1;
	getHostCall = \hc -> sendToJS := \msg -> hc("postMessage", [msg, targetOrigin]) |> ignore;
	flowCallBack = \args -> {
		if (length(args) == 2 && args[0] == "postMessage")
			next(receiveChannel, args[1]);
		""
	};
	zoomEnabledB = make(fgetValue(zoomEnabled));

	MConstruct(
		[
			\ -> subscribe(sendChannel, \m -> ^sendToJS(m)),
			\ -> fconnect(zoomEnabled, zoomEnabledB)
		],
		makeMRealHTML(
			key,
			MRealHTML(
				url,
				wh,
				[
					FlowCallback(flowCallBack),
					PageHostcallSetter(getHostCall),
					OverridePageDomain(domain),
					UpdateCachedContent(true),
					OnPageLoaded(onLoaded),
					OnError(onError),
					ZoomEnabled(zoomEnabledB)
				]
			)
		)
	)
}

MReorderCols(items : DynamicBehaviour<[?]>, materialize : (?) -> Material, style : [MReorderStyle]) -> Material {
	MReorderTemplate(items, materialize, style, false)
}

MReorderLines(items : DynamicBehaviour<[?]>, materialize : (?) -> Material, style : [MReorderStyle]) -> Material {
	MReorderTemplate(items, materialize, style, true)
}

SelectMLines(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material {
	MGetManager(\manager ->
		MGetFocusGroup(\parent ->
			MGetMaterial2Tropic(\m2t ->
				SelectMLines2T(manager, parent, values, \index, id, v, p -> m2t(makeMaterialFn(index, id, v), p))
			)
		)
	)
}

SelectMLinesA(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material {
	MGetManager(\manager ->
		MGetFocusGroup(\parent ->
			MGetMaterial2Tropic(\m2t ->
				SelectMLines2AT(manager, parent, values, \index, id, v, p -> m2t(makeMaterialFn(index, id, v), p))
			)
		)
	)
}

SelectMCols(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material {
	MGetManager(\manager ->
		MGetFocusGroup(\parent ->
			MGetMaterial2Tropic(\m2t ->
				SelectMCols2T(manager, parent, values, \index, id, v, p -> m2t(makeMaterialFn(index, id, v), p))
			)
		)
	)
}

SelectMColsA(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material {
	MGetManager(\manager ->
		MGetFocusGroup(\parent ->
			MGetMaterial2Tropic(\m2t ->
				SelectMColsA2T(manager, parent, values, \index, id, v, p -> m2t(makeMaterialFn(index, id, v), p))
			)
		)
	)
}

SelectMGroup(values : Transform<[?]>, makeMaterialFn : (index :  Transform<int>, id : int, ?) -> Material) -> Material {
	MGetManager(\manager ->
		MGetFocusGroup(\parent ->
			MGetMaterial2Tropic(\m2t ->
				SelectMGroup2T(manager, parent, values, \index, id, v, p -> m2t(makeMaterialFn(index, id, v), p))
			)
		)
	)
}

MAudioPlayer(filename : string, style : [MAudioPlayerStyle]) -> Material {
	mWidth = extractStruct(style, MWidth(-1.)).width;
	audioWH = if (mWidth > 0.) make(WidthHeight(mWidth, 0.)) else makeWH();

	videoStyle =
		filtermap(style, \st ->
			switch (st) {
				MVideoPlayerStyle() : {a : Maybe<MVideoPlayerStyle> = Some(st); a};
				default : None()
			}
		);

	MVideoPlayer(
		filename,
		audioWH,
		videoStyle
		|> (\st ->
			eitherMap(
				tryExtractStruct(st, FVideoControls([])),
				\vc -> replaceStruct(st, FVideoControls(removeAllStructs(vc.controls, FullScreenPlayer()))),
				st
			)
		)
		|> (\st ->
			eitherMap(
				tryExtractStruct(st, MPlayerControls([])),
				\pc -> replaceStruct(st, MPlayerControls(removeAllStructs(pc.controls, FullScreenPlayer()))),
				st
			)
		)
		|> (\st -> replaceStruct(st, MPlayerPanelAutoHide(false)))
	)
	|> (\audioPlayer ->
		if (mWidth > 0.)
			audioPlayer
		else {
			avW = make(0.);

			MConstruct(
				[
					\ -> fconnectSelect(avW, audioWH, \w -> WidthHeight(w, 0.))
				],
				MAttachAvailableWidth(audioPlayer, avW)
			)
		}
	)
}

SampleStates(
	length : [DynamicBehaviour<double>],
	position : [DynamicBehaviour<double>],
	isPlay : [DynamicBehaviour<bool>],
	isReady : [DynamicBehaviour<bool>]
);

MMultiAudioPlayer(filenames : [string], mStyle : [MMultiAudioPlayerStyle]) -> Material {
 	amount = length(filenames);

 	if (amount > 0) {
	  	fvStyle = filtermap(removeAllStructs(mStyle, FVideoTimeRange(const(0.), const(0.))), \st ->
			switch (st) {
				FVideoStyle() : {a : Maybe<FVideoStyle> = Some(st); a};
				default : None()
			}
		);

	  	// FVideoStyle properties
	 	lenEx = extractStruct(fvStyle, FVideoLength(make(0.))).length;
	 	posEx = extractStruct(fvStyle, FVideoPosition(make(0.))).position;
	 	playEx = extractStruct(fvStyle, FVideoPlay(make(false))).play;
	 	loopEx = extractStruct(fvStyle, FVideoLoop(make(false))).loop;
	 	synchrocallEx = extractStruct(fvStyle, SynchroCalls(nop, nop));

	  	// MMultiAudioPlayerStyle properties
	 	currIndexB = extractStruct(mStyle, IndexInPlaylist(make(0))).index;

	  	// init properties for each audio
	 	states = SampleStates(
	 		map(filenames, \__ -> make(0.0)),
	 		map(filenames, \__ -> make(0.0)),
	 		map(filenames, \__ -> make(false)),
	 		map(filenames, \__ -> make(false)),
	 	);

	  	synchrocalls = mapi(filenames, \i, __ ->
	 		SynchroCalls(
	 			// set ready
	 			\-> nextDistinct(states.isReady[i], true),
	 			// play next or stop in the end
	 			\-> {
	 				// reset position (for js)
	 				nextDistinct(states.position[i], 0.);
	 				// if last audio
	 				if (i == amount - 1) {
	 					if (!fgetValue(loopEx)) {
	 						// if not looping
	 						nextDistinct(playEx, false);
	 						synchrocallEx.onStop();
	 					}
	 				}
	 				// next for case with length == 1
	 				next(currIndexB, (i + 1) % amount);
	 			}
	 		)
	 	);

	  	players = mapi(filenames, \i, url ->
	 		TVideo(
	 			url,
	 			make(WidthHeight(-1., -1.)),		// not to draw
	 			replaceStructMany(fvStyle,
	 				[
	 					FVideoLength(states.length[i]),
	 					FVideoPosition(states.position[i]),
	 					FVideoPlay(states.isPlay[i]),
	 					synchrocalls[i],
	 				]
	 			)
	 		)
	 	);

	  	changeAudioPlaying = \index, isPlay -> {
	 		nextDistinct(states.isPlay[index], isPlay);
	 	}

	  	playerPos = fsubselect(
	 		currIndexB,
	 		FLift(\index ->
	 			faddition(
	 				fsum(subrange(states.length, 0, index)),	// sum of previous lengths
	 				states.position[index]					// current possition
	 			)
	 		)
	 	);
	 	playerPosChange = \pos -> nextDistinct(posEx, pos);
	 	userPosChange = \pos -> {
	 		allLength = fgetValue(fmerge(states.length));
	 		// last index ; length sum of previous audio
	 		lastEnd = foldi(allLength, Pair(-1, 0.), \i, acc, len -> {
	 			newEnd = acc.second + len;
	 			isNext = (acc.first + 1 == i);
	 			if (isNext && newEnd < pos) Pair(i, newEnd)
	 			else acc;
	 		});

	 		currIndex = getValue(currIndexB);
	 		newIndex = lastEnd.first + 1;
	 		if (newIndex != currIndex) {
		  		// reset current player
		 		changeAudioPlaying(currIndex, false);
		 		nextDistinct(states.position[currIndex], 0.);
		 		// start new player
		 		nextDistinct(states.position[newIndex], pos - lastEnd.second);
		 		nextDistinct(currIndexB, newIndex);
	 		} else {
	 			nextDistinct(states.position[newIndex], pos - lastEnd.second);
	 		}
	 	}

		// rendering (empty)
		MConstruct(
			[
				// when all audios ready
				makeSubscribe(fands(states.isReady, false), \isReady ->
					if (isReady) synchrocallEx.onStart()
				),
				// sum all audio lengths. but refresh total length only after all data is got (all lengths > 0)
				\-> fconnectSelect(fmerge(states.length), lenEx, \lens -> {
						if (all(map(lens, \l -> l > 0.0)))
							dsum(lens)
						else
							0.0
					}),
				// set possition
				\-> fBidirectionalLink(playerPos, posEx, playerPosChange, userPosChange),
				// not make2Subscribe(currIndexB, playEx) due to looping in 1-element array
				makeSubscribeUns(fselectWithLast(currIndexB, FLift2(\old, new -> Pair(old, new))), \oldAndNewIndexes ->
					unpair(oldAndNewIndexes, \oldIndex, newIndex -> {
						if (oldIndex != newIndex) {
							// reset current player before switching
							nextDistinct(states.isPlay[oldIndex], false);
							nextDistinct(states.position[oldIndex], 0.0);
						}
						changeAudioPlaying(newIndex, getValue(playEx));

						[
							fconnect(states.isPlay[newIndex], playEx)
						]
					})
				),
				\-> subscribe(playEx, \isPlay -> {
					changeAudioPlaying(getValue(currIndexB), isPlay);
				})
			],
			MGroup(players)
		)
	} else {
		MEmpty();
	}
}

MInlinePopup(
	manager : MaterialManager,
	placeholder : Material,
	positionScale : Transform<PositionScale>,
	popup : Material
) -> Material {
	positionScaleB = make(zeroPositionScale);
	MConstruct(
		[\-> mrender(manager, false, MTranslate(
			fselect2(
				positionScaleB,
				positionScale,
				FLift2(\ps : PositionScale, ps2 : PositionScale -> {
					Point(ps.pos.x + ps2.pos.x * ps.scale.x, ps.pos.y + ps2.pos.y * ps.scale.y)
				})
			),
			MScale(
				fselect2(
					positionScaleB,
					positionScale,
					FLift2(\ps, ps2 -> Factor(ps.scale.x * ps2.scale.x, ps.scale.y * ps2.scale.y))
				),
				popup
			)
		))],
		MPositionScale(positionScaleB, placeholder)
	);
}

MInlinePopupPosition(
	manager : MaterialManager,
	placeholder : Material,
	position : Transform<Point>,
	popup : Material
) -> Material {
	MInlinePopup(manager, placeholder, fselect(position, FLift(\pos -> PositionScale(pos, Point(1.0, 1.0)))), popup);
}

MAddShortcutDialog(manager : MaterialManager, onDismiss : () -> void) -> () -> void {
	if (mobile && js && ios() &&
			getKeyValue("progressive_shortcut_dialog_shown", "false") == "false" && 
			!isUrlParameterTrue("progressive_shortcut_dialog_hide")) {

		onClose = ref nop;

		takeSharedKeyValue("progressive_shortcut_dialog_shown", \value -> {
			if (s2b(value)) {
				onDismiss();
				onClose := nop;
			} else {
				closeB = make(false);
				uns = interruptibleDeferUntilNextFrameRendered(\-> {
					showTooltipImageFn = \filename, size, framePos, frameWidth, frameHeight -> {
						imageTooltipVisible = make(false);
						MCenterX(MGroup2(
							MPicture(
								"images/progressive_web/" + filename,
								[
									size,
									OnLoaded(\ -> reverseBehaviour(imageTooltipVisible))
								]
							),
							TTranslate(
								const(framePos),
								TRounded4(4.0, [MStroke(MRed(500)), StrokeWidth(2.0)], TFixed(frameWidth, frameHeight))
							)
							|> (\f -> TVisible(imageTooltipVisible, f))
						));
					}

					ShowMDialog(
						manager,
						closeB,
						[
							MDialogUseFrame(),
							MDialogActions([
								MTextButton(
									_("OK"),
									\ -> {
										onDismiss();
										setKeyValue("progressive_shortcut_dialog_shown", "true");
										storeSharedKeyValue("progressive_shortcut_dialog_shown", "true", nop1);
										nextDistinct(closeB, true);
									},
									[],
									[]
								)
							]),
							MDialogTitle(_("Add to Home Screen")),
							MDialogScroll()
						],
						MAvailableWidth(
							MLines(
								if (strContains(toLowerCase(getBrowser()), "safari")) {
									[
										MParagraph(_("To add this website as shortcut to Home Screen click on share button:"), []),
										showTooltipImageFn("ios_safari_share_button.png", WidthHeight(60.0, 60.0), Point(0.0, 0.0), 60.0, 60.0),
										MFixedY(20.0),
										MParagraph(_("Then navigate to \"Add to Home Screen\" and select it:"), []),
										MFixedY(12.0),
										showTooltipImageFn("iphone_safari_add_to_home.png", WidthHeight(225.0, 140.0), Point(122.0, 12.0), 80.0, 80.0)
									]
								} else {
									[MParagraph(_("Open safari to add this website as shortcut to Home Screen"), [])]
								}
							),
							const(280.0)
						)
					);
				});
				onClose := \ -> {
					onDismiss();
					uns();
					nextDistinct(closeB, true);
				}
			}
		});
		\ -> {
			^onClose();
			onClose := nop;
		}
	} else {
		onDismiss();
		nop;
	}
}

MDropDownOrAutoComplete(
	items0 : [string],
	selected : DynamicBehaviour<int>,
	style : [MDropDownOrAutoCompleteStyle]
) -> Material {

	limit = extractStruct(style, MItemsLimit(15)).limit;
	isRequired = contains(style, MRequiredField());
	labelM = tryExtractStruct(style, MLabel(""));
	multiSelection = tryExtractStruct(style, MMultipleSelection(make([]), []));
	changeOnClick = contains(style, MChangeOnClick());

	showAnyItem = contains(style, MShowAnyItem()) && isNone(multiSelection);
	anyItem = extractStruct(style, MCustomAnyItem(_("Any"))).text;
	items = concat(if (showAnyItem) [anyItem] else [], items0);

	isError =
		eitherMap(
			multiSelection,
			\ms -> fOr(feq(ms.selected, []), feq(ms.selected, [-1])),
			feq(selected, -1)
		);

	makeMAutoCompleteControl = \ -> {
		idxs2string = \idxs -> strGlue(map(idxs, \idx -> elementAt(items, idx, if (showAnyItem) items[0] else "")), ", ");

		trimStr = \s -> trim(s) |> toLowerCase;
		string2idxsMulti = \str ->
			filtermap(strSplit2WithoutLeave(str, [",", ";"]), \sel ->
				findi(items, \item -> trimStr(item) == trimStr(sel))
			);
		string2idxs = \str -> findiDef(items, \item -> trimStr(item) == trimStr(str), -1);

		selectedStrB =
			eitherMap(multiSelection,
				\ms -> idxs2string(getValue(ms.selected)),
				idxs2string([getValue(selected)])
			)
			|> make;

		autoCompleteStyle =
			extractStruct(style, MAutoCompleteStyles([])).style
			|> (\st -> eitherMap(labelM,
				\labelStyle -> replaceStruct(st, MLabel(labelStyle.label)),
				st
			))
			|> (\st -> ifArrayPush(st, changeOnClick, MCompletionFn(\com, isSelected, setWordFn ->
					MGetManager(\manager -> MGetFocusGroup(\parent -> {
						wrapSetWordFn = \sm -> {nextDistinct(selected, string2idxs(getValue(selectedStrB))); setWordFn(sm)};
						defaultCompletionFn(manager, parent, st).fn(com, isSelected, wrapSetWordFn)
					}))
			)));
		autoCompleteState =
			extractStruct(style, MAutoCompleteState([])).state
			|> (\st ->
				if (isRequired) {
					error = fif(isError, const(Some(Pair("Required field", true))), const(None()));
					replaceStruct(st, MInputError(error, [MRequiredField()]));
				} else
					st
			);

		MConstruct(
			[
				\ ->
					eitherMap(multiSelection,
						\ms -> bidirectionalLink(ms.selected, selectedStrB, idxs2string, string2idxsMulti),
						bidirectionalLink(selected, selectedStrB, \idx -> idxs2string([idx]), \str -> if (changeOnClick) fgetValue(selected) else string2idxs(str))
					),
				eitherMap(
					tryExtractStruct(style, MInputInspector(make(""))),
					\insp -> makeSubscribe(selectedStrB, \str -> nextDistinct(insp.text, str)),
					\ -> nop
				)
			],
			MAutoComplete(selectedStrB, items, autoCompleteStyle, autoCompleteState)
		)
	}

	if (length(items0) > limit)
		makeMAutoCompleteControl()
	else
		eitherMap(
			multiSelection,
			\multiSelect -> MMultiSelectDropDown(multiSelect.selected, items, concat(multiSelect.style, [MAddDoneButton(), MAddClearButton()])),
			MConstruct(
				[makeSubscribe(selected, \i -> if (showAnyItem && i == 0) nextDistinct(selected, -1))],
				MDropDown(selected, "", items, extractStruct(style, MDropDownStyles([])).style)
			)
		)
		|> (\m -> eitherMap(labelM,	\labelStyle ->
			MLines2(
				MText(labelStyle.label, [MCaption()]) |> MBorderBottom(4.0),
				m
			),
			m
		))
		|> (\m -> if (isRequired)
			MLines2(
				m,
				MText(_("Required field"), [MErrorColor(), MCaptionSolid()])
				|> (\m2 -> MVisible(isError, m2))
				|> MBorderTop(4.0)
			)
			else m
		)
}

MSeparatedButton(mainButton : MTextButton, iconButton : MIconButton, menuLines : [MMenuLine], widthByButton : bool) -> Material {
	posScale1 = make(zeroPositionScale);
	posScale2 = make(zeroPositionScale);

	buttonWH = makeWH();

	MGetManager(\manager -> 
		MCopySize2(mainButton, \sz, tr ->
			MColsA([
				tr,
				TRectangle([MThemeFill(manager, MPrimaryColor())], TGroup2(THeight(sz), TFixed(1., 0.))),

				MIconButton(iconButton with state = arrayPush(iconButton.state, MRippleShape("MTextButton")))
				|> (\m -> MMenu(
					m,
					menuLines,
					concatA([
						[MMenuShift(fselect2(posScale1, posScale2, FLift2(\ps1, ps2 -> Point(ps1.pos.x - ps2.pos.x, 40.0))))],
						if (widthByButton) [
							MMenuCustomButtonSize(buttonWH),
							MWidthByButton()
						] else []
					])
				))
				|> (\m -> MPositionScale(posScale2, m))
				|> (\m -> MBorderA(-4., -4., -3., -4., m))
			])
		)
		|> (\m -> MPositionScale(posScale1, m))
		|> (\m -> MAttachBox(m, buttonWH))
		|> (\m -> MFrame(0.0, 4.0, [MThemeStroke(manager, MPrimaryColor()), StrokeWidth(1.0)], m))
	)
}

MCollapsingBox(content : Material, yTrans : Transform<double>, expand : Transform<bool>, absoluteOffsetMode : bool, fade : bool) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t ->
		TCollapsingBox(manager, p, m2t(content, p), yTrans, expand, None(), None(), absoluteOffsetMode, fade)
	)))
}

MHTMLStage(wh : Transform<WidthHeight>, constructor : (stage : native) -> () -> void) -> Material {
	MComponentGroup(
		THTMLStage(wh, constructor),
		[MFocusName("MHTMLStage")]
	)
}

MLinesSeparated(values : [Material]) -> Material {
	widthArray = map(values, \__ -> make(0.0));
	maxWidth = fmaxA(widthArray, 0.0);

	MLines(interleave(
		mapi(values, \i, v -> {
			width = widthArray[i];
			MAttachWidth(v, width)
		}),
		MAvailableWidth(MSeparator(true), maxWidth)
	))
}

MColsSeparated(values : [Material]) -> Material {
	heightArray = map(values, \__ -> make(0.0));
	maxHeight = fmaxA(heightArray, 0.0);

	MCols(interleave(
		mapi(values, \i, v -> {
			height = heightArray[i];
			MAttachHeight(v, height)
		}),
		MAvailableHeight(MSeparator(false), maxHeight)
	))
}

MPictureTweak(picURL : string, style : [MPictureStyle]) {
	showLoading = extractStruct(style, MPictureShowLoading(true)).show;
	customLoading = tryExtractStruct(style, MPictureCustomLoading(TEmpty()));
	tstyle = MPictureStyle2TPictureStyle(style);

	if (showLoading || isSome(customLoading)) {
		onPicLoaded = extractStruct(style, OnLoaded(nop)).fn;
		picLoading = make(false);
		uns = interruptibleTimer(100, \ -> next(picLoading, true));

		picSize =
			eitherMap(
				tryExtractStruct(tstyle, TPictureSize(const(WidthHeight(0., 0.)))),
				\ds -> Some(ds.size),
				maybeMap(
					tryExtractStruct(tstyle, WidthHeight(-1.0, -1.0)),
					\cs -> const(cs)
				)
			);

		pstyle = replaceStruct(tstyle, OnLoaded(\ -> {uns(); onPicLoaded(); nextDistinct(picLoading, false);}));

		MGroup2(
			TPicture(picURL, pstyle),
			MShow(
				picLoading,
				eitherMap(
					customLoading,
					\cl -> cl.loading,
					MProgressCircle([])
					|> (\f -> MAlpha(const(0.72), f))
				)
				|> MCenter
			)
		)
	} else {
		TPicture(picURL, tstyle)
	}
}

MPictureFill(picURL : string, style : [MPictureStyle]) {
	MTweak(
		[
			TFillZoom(true)
		],
		MPictureTweak(picURL, style),
		TFillXY()
	)
}

MPictureFit(picURL : string, style : [MPictureStyle]) {
	MTweak(
		[
			TFitZoom(true, false)
		],
		MPictureTweak(picURL, style),
		TFillXY()
	)
}

MTextStyle2CharacterStyleRootParent(style : [MParagraphStyle]) -> [CharacterStyle] {
	MTextStyle2CharacterStyle(createRootMFocusGroup([]), style)
}

MFontStyle2CharacterStyleRootParent(style : MFontStyle, darkText : bool) -> [BasicCharacterStyle] {
	MFontStyle2CharacterStyle(createRootMFocusGroup([]), style, darkText)
}