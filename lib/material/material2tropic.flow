import material/material_manager;
import material/internal/material_app_structure;
import material/internal/material_bottom_nav;
import material/internal/material_card;
import material/internal/material_carousel;
import material/internal/material_chart;
import material/internal/material_expander;
import material/internal/material_gridlist;
import material/internal/material_imagemap;
import material/internal/material_navigation;
import material/internal/material_pickers;
import material/internal/material_player;
import material/internal/material_sidenav;
import material/internal/material_steppers;
import material/internal/material_tree;
import material/internal/material_backdrop;
import material/internal/debug_subscribers;
import material/iscript/material_iscript;
import material/iscript/material_subscribers_panel;

import tropic/tropic_profile;
import sys/progressivewebtools;

export {
	// Use this if you render multiple materials with single MaterialManager
	// 'captureKeys' assumes that material has the entire screen and captures tab , ctr+i
	mrender(manager : MaterialManager, captureKeys : bool, m : Material) -> () -> void;
	
	// In difference to mrender renders content over all 
	// iframes and textinputs of previous render calls
	mrenderStage(manager : MaterialManager, captureKeys : bool, m : Material) -> () -> void;

	// Only for special use
	material2tropic(manager : MaterialManager, m : Material) -> Tropic;
	material2tropicWithParent(manager : MaterialManager, parent : MFocusGroup, m : Material) -> Tropic;

	material2nativeForm(manager : MaterialManager, m : Material) -> Form;
}

// You can have more than one render counter only if you have dialogs opened.
// Otherwise somebody forgot to call disposer from mrender
renderCounterRef = ref 0;

mrender(manager : MaterialManager, captureKeys : bool, m : Material) -> () -> void {
	mrender2stage(manager, false, captureKeys, m);
}

mrenderStage(manager : MaterialManager, captureKeys : bool, m : Material) -> () -> void {
	mrender2stage(manager, true, captureKeys, m);
}

mrender2stage(manager : MaterialManager, toStage : bool, captureKeys : bool, m : Material) -> () -> void {
	mrenderInit = timestamp();

	renderCounterRef := ^renderCounterRef + 1;

	if (^mSpeechAccessiblityEnabled)
		initSpeechSynthesis();

	if (js && (isUrlParameterTrue("accessenabled") || ((strContains(toLowerCase(getBrowser()), "chrom") || strContains(toLowerCase(getBrowser()), "crios")
		|| strContains(toLowerCase(getBrowser()), "firefox") || strContains(toLowerCase(getBrowser()), "safari") || strContains(toLowerCase(getBrowser()), "explorer"))
		&& !isUrlParameterFalse("accessenabled")))) {
		fAccessibilityEnabled := true;
		setAccessibilityEnabled(true);
		setEnableFocusFrame(false);
	}

	setDropCurrentFocusOnMouse(false);

	materialLogFn(
		\ -> {
			println("render counter: " + i2s(^renderCounterRef));

			setLeakingSubscribersHandler(100, 50, \subscribersCount, value -> {
				if (subscribersCount != subscribersCountBelowThreshold) {
					dumpValue = value |> getValue |> behaviourValueToString;
					println("ERROR: Too many subscribers (" + toString(subscribersCount) + ") to " + dumpValue);
					materialLogFn(
						printCallstack,
						MaterialWarning(),
						nop
					)
				}
			});
		},
		MaterialError(),
		nop
	);

	t0 = material2tropic(manager, m);

	mouseCapture = extractStruct(manager.style, MCaptureMouse(\__ -> TEmpty())).capture(manager);
	longTouchCapture = extractStruct(manager.style, MCaptureLongTouch(\__ -> TEmpty())).capture(manager);

	t1 =
		[
			mouseCapture,
			t0,
			longTouchCapture
		]
		|> (\t ->
			if (captureKeys)
				concat([extractStruct(manager.style, MCaptureKeys(\__ -> TEmpty())).capture(manager)], t)
			else
				t
		)
		|> TGroup;

	// Create the top IScript menu last.
	t = t1
		|> (\f -> TAvailable(f, TSized(manager.iscript.available)))
		|> (\f ->
			materialLogFn(
				\ -> {
					println("render counter: " + i2s(^renderCounterRef));

					MSubscribersPanel2T(manager, f, \mat, p -> material2tropicWithParent(manager, p, mat))
				},
				MaterialError(),
				\ -> f
			)
		)
		|> (\f -> TCropSize(TSized(manager.iscript.available), f))
		|> (\f -> TLines2(TIf(manager.iscript.showPanel, TFixed(0.0, 48.0), TEmpty()), f));

	initMaterialManagerSubs(manager);

	// trenderManager without warning
	// TTweak for integer width on mobile
	r =
		trender2Stage(
			if (mobile)
				TTweak([TSnapSize(1., 1., true)], t, TEmpty())
			else
				t,
			manager.manager.renderStyle, 
			toStage
		);

	manager.manager.findPositionScaleFn := r.second;
	dispose = r.first;

	renderId = manager.nextRenderId();
	manager.findPositionScaleFns ::= setTree(manager.findPositionScaleFns, renderId, ^(manager.manager.findPositionScaleFn));

	disp = \ -> {
		renderCounterRef := ^renderCounterRef - 1;

		manager.findPositionScaleFns ::= removeFromTree(manager.findPositionScaleFns, renderId);

		manager.manager.findPositionScaleFn :=
			foldTree(
				manager.findPositionScaleFns,
				Pair(-1, dummyTFinder),
				\key, tFinder, acc : Pair<int, (int) -> PositionScale> ->
					if (acc.first < key)
						Pair(key, tFinder)
					else
						acc
			).second;

		dispose();

		manager.disposers ::= removeFromTree(manager.disposers, renderId);
		disposeMaterialManagerSubs(manager);
	}

	manager.disposers ::= setTree(manager.disposers, renderId, disp);

	if (getUrlParameterDef("profile", "") >= "1") {
		println("mrender took " + d2s(timestamp() - mrenderInit) + " ms");
	}

	disp;
}

materialZoomWarningDialogEnabled = ref false;

initMaterialManagerSubs(manager : MaterialManager) -> void {
	if (isNone(lookupTree(manager.disposers, -1))) {
		m2t = \mat, p -> material2tropicWithParent(manager, p, mat);

		if (^materialZoomWarningDialogEnabled && js && !mobile && getRendererType() == "html" && getBrowserZoom() != 1.0 && !s2b(getKeyValue("zoom_warning_shown", "false"))) {
			key = if (macosx()) "Cmd" else "Ctrl";

			deferUntilNextFrameRendered(\ ->
				renderMSnackbar(
					manager,
					_("Warning: You are using page zoom which causes\nproblems with text.\nTo prevent those problems set page zoom to 100%\nand then use " + key + "+/" + key + "- to set required zoom."),
					[MSnackbarAutoDisappear(false), MSnackbarOnDisappear(\ -> setKeyValue("zoom_warning_shown", "true") |> ignore)],
					\m, p ->
						material2tropicWithParent(manager, p, m),
					\t ->
						trender(
							t,
							manager.manager.renderStyle
						)
				)
			);
		}

		manager.disposers ::=
			setTree(
				manager.disposers,
				-1,
				[
					handleRealEvents(
						MouseDown2(\h, mi -> captureIScriptMouseDownEvent(manager, h, mi, \ -> Point(0., 0.), "canvas")),
						getStage(),
						ref true,
						getStage(),
						[intMax],
						false,
						false
					),
					handleRealEvents(
						MouseUp2(\h, mi -> captureIScriptMouseEvent(manager, h, mi, \ -> Point(0., 0.), "canvas", "mouseup")),
						getStage(),
						ref true,
						getStage(),
						[intMax],
						false,
						false
					),
					handleRealEvents(
						MouseMove2(\h, mi -> captureIScriptMouseEvent(manager, h, mi, \ -> Point(0., 0.), "canvas", "mousemove")),
						getStage(),
						ref true,
						getStage(),
						[intMax],
						false,
						false
					),
					handleIScriptState(manager),
					makeSubscribe2(manager.focus.focusEnabled, \fen -> if (!fen) {
						nextDistinct(manager.focus.focusedId, -1);
						nextDistinct(manager.focus.focused, false);
					})(),
					makeSubscribe2(manager.focus.focusedId, \foc -> {
						if (manager.focus.previousFocusedId != foc) {
							if (foc != -1) {
								nextDistinct(manager.focus.focused, true);
								nextDistinct(manager.focus.nextId, foc);
							}

							maybeApply(lookupTree(fgetValue(manager.focus.focusIds), manager.focus.previousFocusedId), \v -> switchMaterialFocus(
								v,
								\fc -> {
									next(fc.focused, false);
								},
								\fc -> {
									next(fc.focused, false);
									if (foc != -1)
										next(fc.nextId, -1);
									next(fc.focusedId, -1);
								}
							));

							maybeApply(lookupTree(fgetValue(manager.focus.focusIds), foc), \v -> switchMaterialFocus(
								v,
								\fc -> {
									if (fgetValue(fc.focusEnabled)) {
										next(fc.focused, true);
									} else {
										nextDistinct(fc.focused, false);
										deferred(\ -> next(manager.focus.focusedId, -1));
									}
								},
								\fc -> {
									next(fc.focused, true);
								}
							));

							(manager.focus).previousFocusedId ::= foc;
						}
					})(),
					trender(
						MIScriptPanels2T(manager, m2t),
						manager.manager.renderStyle
					),
					makeSubscribeUns(manager.iscript.replayCursor.visibleB, \v -> {
						if (v)
							[
								makeSubscribeUns(manager.iscript.replayCursor.positionB, \p -> {
									[
										trender(
											TTranslate(const(p), TSelect(manager.iscript.replayCursor.shapeB, idfn)),
											manager.manager.renderStyle
										)
									]
								})()
							]
						else
							[]
					})()
				]
				|> (\d -> \ -> applyall(d))
			);
	}
}

disposeMaterialManagerSubs(manager : MaterialManager) -> void {
	if (sizeTree(manager.disposers) == 1) {
		maybeApply(lookupTree(manager.disposers, -1), \d -> {
			d();
			manager.disposers ::= makeTree();
		})
	}
}

material2nativeForm(manager : MaterialManager, m : Material) -> Form {
	tropic2nativeForm(material2tropic(manager, m), emptyStylesheet);
}

material2tropic(manager : MaterialManager, m : Material) -> Tropic {
	rend = MaterialRender(manager, manager.nextRenderId());

	TConstruct(
		[
			makeSubscribe(manager.white, \w -> {
				setKeyValue("dark_mode", b2s(!w)) |> ignore;

				if (w != getLightBackground(manager.focus)) {
					updateMaterialTheme(manager, MLightTheme(manager.theme, w))
				}
			}),
			makeSubscribe2(getDefaultRtlB(), \__ -> {
				rerenderEnabled = getValue(
					extractStruct(manager.style, MForceRenderOnLangChangedEnabled(make(true))).enabled
				);
				if (rerenderEnabled) reverseBehaviour(manager.forceRender)
			})
		],
		TSelect(
			manager.forceRender,
			\__ -> {
				setiOSBackgroundColor(MColor2int(MBackgroundColor(getLightBackground(manager))));
				setiOSStatusBarColor(MColor2int(getPrimaryColor(manager)));
				setiOSStatusBarIconsTheme(MTextColor(getToolbarItemsColor(manager)) == black);

				rootFocus = manager.focus;
				rootFocus.rtl ::= extractStruct(manager.style, MSetRTL(getDefaultRtl())).rtl;

				trop = doMaterial2tropic(rend, m, rootFocus);

				if (getUrlParameterDef("profile", "") >= "1") {
					profileTropic(trop);
				}

				trop;
			}
		)
	)
}

material2tropicWithParent(manager : MaterialManager, parent : MFocusGroup, m : Material) -> Tropic {
	rend = MaterialRender(manager, manager.nextRenderId());

	doMaterial2tropic(rend, m, parent)
}

objectCreatedMap : ref Tree<string, int> = ref makeTree();

doMaterial2tropic(rend : MaterialRender, m : Material, parent : MFocusGroup) -> Tropic {
	TEmpty();
}


