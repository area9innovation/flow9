import material/material;

export {
	TArrow(from : Point, to : Point, tailWidth : double, headWidth : double, headLength : double, style : [TGraphicsStyle]) -> Tropic;
	MArrow(from : Point, to : Point, tailWidth : double, headWidth : double, headLength : double, style : [TGraphicsStyle]) -> Material
		{TArrow(from, to, tailWidth, headWidth, headLength, style)};

	MCircle(radius : double, style : [TGraphicsStyle]) -> Material
		{TCircle(radius, style)};

	TArc(from : double, to : double, stroke : double, radius : double, style : [TGraphicsStyle]) -> Tropic;
	MArc(from : double, to : double, stroke : double, radius : double, style : [TGraphicsStyle]) -> Material
		{TArc(from, to, stroke, radius, style)};

	TArc360(stroke : double, radius : double, style : [TGraphicsStyle]) -> Tropic;
	MArc360(stroke : double, radius : double, style : [TGraphicsStyle]) -> Tropic
		{TArc360(stroke, radius, style)};

	TSegment(from : double, to : double, radius : double, style : [TGraphicsStyle]) -> Tropic;
	MSegment(from : double, to : double, radius : double, style : [TGraphicsStyle]) -> Tropic
		{TSegment(from, to, radius, style)};

	TSector(from : double, to : double, radius : double, style : [TGraphicsStyle]) -> Tropic;
	MSector(from : double, to : double, radius : double, style : [TGraphicsStyle]) -> Tropic
		{TSector(from, to, radius, style)};
}

TArrow(from : Point, to : Point, tailWidth : double, headWidth : double, headLength : double, style : [TGraphicsStyle]) -> Tropic {
	distance = \x, y -> sqrt(x * x + y * y);
	arrowLength = distance(to.x - from.x, to.y - from.y);
	arrowAngle = if (to.y == from.y) {
		if (to.x > from.x) 0.0 else 180.0
	} else {
		arrowAngleCos = (to.x - from.x) / arrowLength;
		if (from.y > to.y) -(acos(arrowAngleCos) * 180.0) / PI else (acos(arrowAngleCos) * 180.0) / PI
	}

	realHeadLength = if (headLength > arrowLength / 2.0) arrowLength / 2.0 else headLength;
	realHeadWidth = (realHeadLength / headLength) * headWidth;
	realTailWidth = (realHeadLength / headLength) * tailWidth;
	tailLength = arrowLength - realHeadLength;

	TRotate(
		const(arrowAngle),
		TGraphics(
			[
				MoveTo(from.x, from.y),
				LineTo(from.x, from.y + realTailWidth / 2.0),
				LineTo(from.x + tailLength, from.y + realTailWidth / 2.0),
				LineTo(from.x + tailLength, from.y + realHeadWidth / 2.0),
				LineTo(from.x + arrowLength, from.y),
				LineTo(from.x + tailLength, from.y - realHeadWidth / 2.0),
				LineTo(from.x + tailLength, from.y - realTailWidth / 2.0),
				LineTo(from.x, from.y - realTailWidth / 2.0),
				ClosePath()
			],
			style
		)
	);
}

TArc(from : double, to : double, stroke : double, radius : double, style : [TGraphicsStyle]) -> Tropic {
	innerR = radius - stroke / 2.0;
	outterR = radius + stroke / 2.0;

	TFixSize(
		TMask(
			TSector(from, to, outterR, style),
			TGraphics(
				concat(
					SectorPath(outterR, outterR, innerR, 0.0, 360.0, false, false, false),
					[
						LineTo(outterR, 0.0),
						LineTo(0.0, 0.0),
						LineTo(0.0, outterR * 2.0),
						LineTo(outterR * 2.0, outterR * 2.0),
						LineTo(outterR * 2.0, 0.0),
						LineTo(outterR, 0.0),
						ClosePath()
					]
				),
				[Fill(white)]
			)
		),
		TFixed(radius * 2., radius * 2.)
	)
}

TArc360(stroke : double, radius : double, style : [TGraphicsStyle]) -> Tropic {
	innerR = radius - stroke / 2.0;
	outterR = radius + stroke / 2.0;

	TMask(
		TCircle(outterR, style),
		TGraphics(
			concat(
				SectorPath(outterR, outterR, innerR, 0.0, 360.0, false, false, false),
				[
					LineTo(outterR, 0.0),
					LineTo(0.0, 0.0),
					LineTo(0.0, outterR * 2.0),
					LineTo(outterR * 2.0, outterR * 2.0),
					LineTo(outterR * 2.0, 0.0),
					LineTo(outterR, 0.0),
					ClosePath()
				]
			),
			[Fill(white)]
		)
	);
}

TSegment(from : double, to : double, radius : double, style : [TGraphicsStyle]) -> Tropic {
	TFixSize(
		TGraphics(
			SectorPath(radius, radius, radius, from, to, false, false, false),
			style
		),
		TFixed(radius * 2., radius * 2.)
	)
}

TSector(from : double, to : double, radius : double, style : [TGraphicsStyle]) -> Tropic {
	TFixSize(
		TTranslate(
			const(Point(radius, radius)),
			TRotate(
				const(if (to > from) from else to),
				TGraphics(Sector(0., 0., radius, abs(to - from), []).path, style)
			)
		),
		TFixed(radius * 2., radius * 2.)
	)
}