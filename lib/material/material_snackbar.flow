import material/material2tropic;

export {
	// https://material.io/design/components/snackbars.html
	// Creation of new snackbar destroys previous one;
	showMSnackbar(manager : MaterialManager, text : string, style : [MSnackbarStyle]) -> void;
	// MTextVisible is for snackbar action, should not be raised (restricted to one action only);
	MSnackbarStyle ::= MTextButton, MSnackbarVisible, MWidth, MColor, MSnackbarTextColor, MSnackbarAutoDisappear,
			MSnackbarAutoDisappearTime, MSnackbarNoButton, MSnackbarAlignLeft, MSnackBarOffset;
		// MSnackbarVisible can be used for getting of current snackbar state and for its closing, but not for showing of snackbar;
		MSnackbarVisible(visible : DynamicBehaviour<bool>);
		MSnackbarTextColor(color : MColor);
		MSnackbarAutoDisappear(enabled : bool);
		MSnackbarAutoDisappearTime(ms : int);
		MSnackbarNoButton();
		MSnackbarAlignLeft(left : bool);
		MSnackBarOffset(offset : Point);
}

snackbarDisp = initUnsM();

showMSnackbar(manager : MaterialManager, text : string, style : [MSnackbarStyle]) -> void {
	closeSnackbar = \ -> dispUnsM(snackbarDisp);
	closeSnackbar();

	lightBackground = getLightBackground(manager.focus);
	bgColor = 
		either(
			tryExtractStruct(style, MBlack()),
			MBackgroundColor(!lightBackground)
		);
	textColor : MColor =
		eitherMap(
			tryExtractStruct(style, MSnackbarTextColor(MBlack())),
			\tc -> tc.color,
			MDefaultTextColor(!lightBackground)
		);
	
	autoDisappear = extractStruct(style, MSnackbarAutoDisappear(true)).enabled;
	autoDisappearTime = extractStruct(style, MSnackbarAutoDisappearTime(6000)).ms;

	alignLeft = extractStruct(style, MSnackbarAlignLeft(true)).left;
	offset = extractStruct(style, MSnackBarOffset(zeroPoint)).offset;
	width = extractStruct(style, MWidth(568.0)).width;
	minWidth = 240.;
	visible = extractStruct(style, MSnackbarVisible(make(false))).visible;

	customButton = tryExtractStruct(style, MTextButton("", nop, [], []));
	button =
		either(customButton,
			if (contains(style, MSnackbarNoButton())) TEmpty()
			else MIconButton("clear", closeSnackbar, [textColor], [])
		)
		|> MCenterY;

	snackBar =
		MEllipsisText(text, [textColor, MBody()])
		|> MBorderTopBottom(16.)
		|> MCenterY
		|> (\t -> MGroup2(t, TFixed(minWidth, 0.)))
		|> (\t -> MBaselineCols2(t, button))
		|> (\t -> material2tropic(manager, t))
		|> (\t -> TBorderA(16.0, 0.0, 8.0, 0.0, t))
		|> (\t -> TAvailable(t, if (width == -1.) TFillX() else TFillMax(width, 0.)))
		|> (\t -> MShapeFrame(manager.focus, [MFill(bgColor)], t, "MSnackbar"))
		|> (\t -> TShadowShape(manager.focus, const(6.0), t, RectangleShape("MSnackbar")))
		|> (\t -> TBorder4(24.0, t))
		|> (\t -> TTranslate(const(offset), t))
		|> (\t -> TAnimatedExpander(manager, manager.focus, t, visible, [MExpandFromStart(), MNoCrop()]))
		|> TAlignBottom
		|> (if (alignLeft) TAlignStart else TAlignEnd)
		|> (\t -> TConstruct([\ -> subscribe2(visible, \v -> if (!v) closeSnackbar())], t));

	renderDisp = trender(snackBar, manager.manager.renderStyle);
	nextDistinct(visible, true);
	timerDisp = if (autoDisappear) interruptibleTimer(autoDisappearTime, closeSnackbar) else nop;

	setUnsM(
		snackbarDisp,
		\ -> {
			timerDisp();
			renderDisp();
			nextDistinct(visible, false);
		}
	)
}