import material/material_gui;
import ui/animate/easing;

export {
	MEasingAnimation(manager : MaterialManager, parent : MFocusGroup, duration : Transform<double>, bezier : Transform<CubicBezierEasing>, trigger : Transform<?>, beforeEach : (?) -> Maybe<??>,
		percent : (??, double) -> void, style : [MEasingAnimationStyle<??>], t : Tropic) -> Tropic;
	MMEasingAnimation(duration : Transform<double>, bezier : Transform<CubicBezierEasing>, trigger : Transform<?>, beforeEach : (?) -> Maybe<??>,
		percent : (??, double) -> void, style : [MEasingAnimationStyle<??>], t : Material) -> Material;

		MEasingAnimationStyle<?> ::=
			MLoop, MAutoStart, MContinueOnNone, MForceAnimation, MDelay, MFreezeAnimation,
			MStopOffScreen, MAnimating, MIsAnimationPlayed, MDuration, MBezier, MEnabled, MAnimationOnFinish;

			MLoop(beforeLoop : (?) -> Maybe<?>);
			MAutoStart();
			MContinueOnNone();
			MForceAnimation();
			MDelay(delay : double);
			// Lets you freeze and unfreeze the animation. When freezed,
			//   it doesn't react to either trigger or timer changes. When
			//   unfreezed, animation starts from same point it finished at
			MFreezeAnimation(freeze : Transform<bool>);
			// Stop if form is off-screen
			MStopOffScreen(stop : bool);

			// Shows if animation is playing
			MAnimating(animating : DynamicBehaviour<bool>);

			// Shows if animation has finished playing
			MIsAnimationPlayed(played : DynamicBehaviour<bool>);

			MAnimationOnFinish(onFinish : () -> void);

	MEasing(
		start : () -> void,
		stop : () -> void,
		percent : DynamicBehaviour<double>
	);

	makeMEasing(duration : double, bezier : CubicBezierEasing, deltaTimer : LazyDeltaTimer) -> MEasing;

	MGrabAnimation(manager : MaterialManager, parent : MFocusGroup, content : Tropic) -> Tropic;

	mStepOf5TransitionDuration = \step : int -> easingTransitionDuration * i2d(step) / 5.;

	MAnimatedHide(show : Transform<bool>, content : Material, durationM : Maybe<Transform<double>>) -> Material;
	MAnimatedResizer(width : Transform<double>, height : Transform<double>, style : [MAnimatedResizerStyle]) -> Material; // -1. is for filler
		MAnimatedResizerStyle ::= MDuration, MResizerMaxWidth, MResizerMaxHeight, MResizerPercent;
			MResizerMaxWidth(width : Transform<double>);
			MResizerMaxHeight(height : Transform<double>);
			MResizerPercent(percent : DynamicBehaviour<double>);

	MSizeAnimation(content : Material, style : [MEasingAnimationStyle<Pair<WidthHeight, WidthHeight>>]) -> Material;
	MWidthAnimation(content : Material, style : [MEasingAnimationStyle<Pair<double, double>>]) -> Material;
	MHeightAnimation(content : Material, style : [MEasingAnimationStyle<Pair<double, double>>]) -> Material;

	MEasingScaleAnimation(factor : Transform<Factor>, content : Material, style : [MEasingAnimationStyle<Pair<Factor, Factor>>]) -> Material;

	MBorderAnimation(
		left : Transform<double>,
		top : Transform<double>,
		right : Transform<double>,
		bottom : Transform<double>,
		content : Material,
		style : [MEasingAnimationStyle<Pair<Quadruple<double, double, double, double>, Quadruple<double, double, double, double>>>]
	) -> Material;

	MAlphaAnimation(alpha : Transform<double>, content : Material, style : [MEasingAnimationStyle<Pair<double, double>>]) -> Material;

	MShowAnimation(show : Transform<bool>, content : Material, style : [MEasingAnimationStyle<bool>]) -> Material;
	MShowAnimationWidth(show : Transform<bool>, content : Material, style : [MEasingAnimationStyle<bool>]) -> Material;
	MShowAnimationHeight(show : Transform<bool>, content : Material, style : [MEasingAnimationStyle<bool>]) -> Material;
}

MEasingAnimation(manager : MaterialManager, parent : MFocusGroup, duration : Transform<double>, bezier : Transform<CubicBezierEasing>, trigger : Transform<?>, beforeEach : (?) -> Maybe<??>,
	percent : (??, double) -> void, style : [MEasingAnimationStyle<??>], t : Tropic) -> Tropic {
	animFn = makeMEasingAnimationFn(manager, parent, duration, bezier, trigger, beforeEach, percent, style);
	stopOffScreen = extractStruct(style, MStopOffScreen(false)).stop;

	if (stopOffScreen)
		TConstructRenderable([animFn], t)
	else
		TConstruct([animFn], t)
}

MMEasingAnimation(duration : Transform<double>, bezier : Transform<CubicBezierEasing>, trigger : Transform<?>, beforeEach : (?) -> Maybe<??>,
	percent : (??, double) -> void, style : [MEasingAnimationStyle<??>], t : Material) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\parent -> {
		animFn = makeMEasingAnimationFn(manager, parent, duration, bezier, trigger, beforeEach, percent, style);
		stopOffScreen = extractStruct(style, MStopOffScreen(false)).stop;

		if (stopOffScreen)
			MConstructRenderable([animFn], t)
		else
			MConstruct([animFn], t)
	}))
}

makeMEasingAnimationFn(manager : MaterialManager, parent : MFocusGroup, duration0 : Transform<double>, bezier0 : Transform<CubicBezierEasing>, trigger : Transform<?>, beforeEach : (?) -> Maybe<??>,
	percent0 : (??, double) -> void, style : [MEasingAnimationStyle<??>]) -> () ->  () -> void {
	\ -> {
		duration = extractStruct(style, MDuration(duration0)).duration;
		bezier = extractStruct(style, MBezier(bezier0)).bezier;
		bezierY = ref lerpCurve(0., 1., fgetValue(bezier));
		passed = ref 0.;
		mloop : (??) -> Maybe<??> = extractStruct(style, MLoop(\__ -> None())).beforeLoop;
		autoStart = contains(style, MAutoStart());
		continueOnNone = contains(style, MContinueOnNone());
		context : ref Maybe<??> = ref None();
		forceAnim = contains(style, MForceAnimation());
		delay = extractStruct(style, MDelay(-1.)).delay;
		freeze = extractStruct(style, MFreezeAnimation(const(false))).freeze;
		animating = extractStruct(style, MAnimating(make(false))).animating;
		played = extractStruct(style, MIsAnimationPlayed(make(false))).played;
		enabled = extractStruct(style, MEnabled(const(true))).enabled;
		percent = \c, p -> {
			if (p == 1.) {
				nextDistinct(animating, false);
				nextDistinct(played, true);
			} else if (p == 0.) {
				nextDistinct(played, false);
				nextDistinct(animating, true);
			}

			percent0(c, p);
		};
		animUns = ref nop;
		timerUns = ref nop;
		checkTimerUns = ref nop;

		retriggerFn = ref nop;

		makeCheckTimerFn = \dr -> {
			dispUns(checkTimerUns);

			checkTimerUns := interruptibleTimer(max(floor((dr - ^passed + max(delay, 0.)) * 1000. - 6.), 0), \ -> ^retriggerFn());
		};

		resetPassedFn = \cont -> {
			context := Some(cont);
			passed := 0.;

			makeCheckTimerFn(fgetValue(duration));
			if (delay >= 0.) dispUns(timerUns);
			percent(cont, 0.);
		};

		finishAnimationFn = \ -> {
			if (delay >= 0.) dispUns(timerUns);
			dispUns(animUns);

			maybeApply(^context, \c -> percent(c, 1.));
		};

		retriggerFn := \ -> {
			passed := fgetValue(duration);

			maybeApply(^context, \con ->
				switch (mloop(con)) {
					None(): finishAnimationFn();
					Some(context2): resetPassedFn(context2);
				}
			)
		};

		newPassedFn = \dt -> if (!fgetValue(freeze)) {
			(^passed + dt)
			|> (\newPassed ->
				if (newPassed < fgetValue(duration)) {
					passed := newPassed;

					maybeApply(^context, \con ->
						percent(con, ^bezierY(newPassed / fgetValue(duration)))
					);
				}
			)
		};

		subscribeToDeltaTimerFn = \ -> {
			if (^animUns == nop) {
				manager.manager.deltaTimer.attach();

				animUns :=
					subscribe2(manager.manager.deltaTimer.timer, newPassedFn)
					|> (\f -> \ -> { dispUns(checkTimerUns); f(); manager.manager.deltaTimer.detach(); })
			}
		};

		startingDelayFn = \fn -> {
			if (delay >= 0.) {
				dispUns(timerUns);
				timerUns := interruptibleTimer(floor(delay * 1000.), fn)
			} else
				fn();
		}

		switchTrigger = \tv, en -> {
			if (!en) {
				if (delay >= 0.) dispUns(timerUns);
				dispUns(animUns);

				switch (beforeEach(tv)) {
					None(): {}
					Some(cont): {
						percent(cont, 1.);
					}
				}
			} else if (!fgetValue(freeze)) {
				switch (beforeEach(tv)) {
					None(): {
						if (!continueOnNone) {
							if (delay >= 0.) dispUns(timerUns);
							dispUns(animUns);
						}
					}
					Some(cont): {
						startingDelayFn(\ ->
							if (parent.theme.enableAnimations || forceAnim) {
								resetPassedFn(cont);
								subscribeToDeltaTimerFn();
							} else {
								percent(cont, 1.);
							}
						);
					}
				}
			}
		}

		disp =
			if (autoStart)
				make2Subscribe(trigger, enabled, switchTrigger)()
			else
				make2Subscribe2(trigger, enabled, switchTrigger)();

		dispBezier =
			makeSubscribe2(bezier, \bz ->
				bezierY := lerpCurve(0., 1., bz)
			)();
		dispDuration =
			makeSubscribe2(duration, \dr ->
				if (^animUns != nop) makeCheckTimerFn(dr)
			)();
		dispFreeze =
			makeSubscribe(freeze, \f ->
				if (f) dispUns(checkTimerUns)
				else makeCheckTimerFn(fgetValue(duration))
			)();

		\ -> {
			disp();
			dispBezier();
			dispDuration();
			dispFreeze();
			if (delay >= 0.) dispUns(timerUns);

			if (^animUns != nop) {
				dispUns(animUns);

				maybeApply(^context, \c -> percent(c, 1.));
			}
		}
	}
}

makeMEasing(duration : double, bezier : CubicBezierEasing, deltaTimer : LazyDeltaTimer) -> MEasing {
	bezierY = lerpCurve(0., 1., bezier);
	percent = make(0.);
	uns = ref nop;
	passed = ref 0.;

	fn = \p -> if (^uns != nop) {
		passed := p;

		if (p >= duration) {
			dispUns(uns);
			nextDistinct(percent, 1.);
		} else {
			nextDistinct(percent, bezierY(p / duration))
		}
	};

	MEasing(
		\ -> {
			dispUns(uns);
			passed := 0.;
			nextDistinct(percent, 0.);
			deltaTimer.attach();

			uns := {
				us = [
					subscribe(deltaTimer.timer, \dt -> fn(^passed + dt)),
					interruptibleTimer(floor(duration * 1000.0), \ -> fn(duration))
				];

				\ -> {
					applyall(us);
					timer(1000, deltaTimer.detach);
				}
			}
		},
		\ -> {
			dispUns(uns);
			nextDistinct(percent, 0.);
		},
		percent
	)
}

MGrabAnimation(manager : MaterialManager, parent : MFocusGroup, content : Tropic) -> Tropic {
	scaleRange = 0.1;
	trigger = make(true);
	scale = make(1.);
	contentWH = makeWH();

	MEasingAnimation(
		manager,
		parent,
		const(easingEnteringDuration),
		fif(trigger, const(easingDecelerationCurve), const(easingAccelerationCurve)),
		trigger,
		\tr ->
			Some(tr),
		\tr, v ->
			nextDistinct(
				scale,
				if (tr)
					lerp(1., 1. + scaleRange, v)
				else
					lerp(1. + scaleRange, 1. + scaleRange * 3. / 4., v)
			),
		[
			MLoop(\tr -> if (tr) Some(!tr) else None()),
			MAutoStart()
		],
		TTranslate(
			fselect2(scale, contentWH, FLift2(\sc, wh -> Point(wh.width * (0.5 - sc / 2.), wh.height * (0.5 - sc / 2.)))),
			TScale(ffactor2(scale), TAttachBox(content, contentWH))
		)
	)
}

MAnimatedResizer(width : Transform<double>, height : Transform<double>, style : [MAnimatedResizerStyle]) -> Material {
	if (width == const(-1.) && height == const(1.))
		TFillXY()
	else {
		duration = extractStruct(style, MDuration(const(easingTransitionDuration))).duration;
		maxWidth = tryExtractStruct(style, MResizerMaxWidth(const(0.)));
		maxHeight = tryExtractStruct(style, MResizerMaxHeight(const(0.)));
		percent = extractStruct(style, MResizerPercent(make(1.))).percent;

		prevWH = ref WidthHeight(fgetValue(width), fgetValue(height));

		MTransformTAcc(\t2a, pi, s, mo -> {
			wd =
				fif(feq(width, -1.), pi.maxX, width)
				|> (\w -> eitherMap(maxWidth, \mw -> fmin(w, mw.width), w));
			hgt =
				fif(feq(height, -1.), pi.maxY, height)
				|> (\h -> eitherMap(maxHeight, \mh -> fmin(h, mh.height), h));

			size = fselect(percent, FLift(\p ->
				WidthHeight(lerp(^prevWH.width, fgetValue(wd), p), lerp(^prevWH.height, fgetValue(hgt), p))
			));

			MMEasingAnimation(
				duration,
				const(easingStandartCurve),
				fwidthheight(wd, hgt),
				\wh -> {
					prevWH := fgetValue(size);
					Some(wh)
				},
				\wh, p -> nextDistinct(percent, p),
				[],
				TSized(size)
			)
			|> (\m -> t2a(m, pi, s, mo))
		})
	}
}

MAnimatedHide(show : Transform<bool>, content : Material, durationM : Maybe<Transform<double>>) -> Material {
	percent = make(b2d(fgetValue(show)));
	duration = either(durationM, const(easingTransitionDuration));

	MMEasingAnimation(
		duration,
		const(easingStandartCurve),
		show,
		\op -> Some(op),
		\op, p -> nextDistinct(percent, if (op) p else 1. - p),
		[],
		MAlpha(percent, content)
	)
	|> (\m -> MTransformTAcc2(\t2a -> {
		b = t2a(m);
		newMetrics =
			TFormMetrics(b.metrics with
				width = fif(show, b.metrics.width, const(0.)),
				height = fif(show, b.metrics.height, const(0.))
			);
		TAcc(b with metrics = newMetrics)
	}))
}

MSizeAnimation(content : Material, style : [MEasingAnimationStyle<Pair<WidthHeight, WidthHeight>>]) -> Material {
	triggerWH = makeWH();
	easedWidth = make(0.0);
	easedHeight = make(0.0);
	animating = extractStruct(style, MAnimating(make(false))).animating;
	autoStart = contains(style, MAutoStart());

	MMEasingAnimation(
		const(0.3),
		const(easingFastOutSlowIn),
		triggerWH,
		\wh ->
			Some(Pair(WidthHeight(getValue(easedWidth), getValue(easedHeight)), wh)),
		\wh, v -> {
			nextDistinct(easedWidth, lerp(wh.first.width, wh.second.width, v));
			nextDistinct(easedHeight, lerp(wh.first.height, wh.second.height, v));
		},
		replaceStruct(style, MAnimating(animating)),
		MTransformTAcc2(\m2a -> {
			b = m2a(content);
			disposers = [fconnect(fwidthheight(b.metrics.width, b.metrics.height), triggerWH)];

			nextDistinct(easedWidth, if (autoStart) 0.0 else getValue(triggerWH).width);
			nextDistinct(easedHeight, if (autoStart) 0.0 else getValue(triggerWH).height);

			TAcc(b with
				form = FCrop(zero, zero, fif(animating, easedWidth, b.metrics.width), fif(animating, easedHeight, b.metrics.height), b.form),
				metrics = TFormMetrics(fif(animating, easedWidth, b.metrics.width), fif(animating, easedHeight, b.metrics.height), b.metrics.baseline),
				disposers = concat(b.disposers, disposers)
			)
		})
	)
}

MWidthAnimation(content : Material, style : [MEasingAnimationStyle<Pair<double, double>>]) -> Material {
	triggerWidth = make(0.0);
	easedWidth = make(0.0);
	animating = extractStruct(style, MAnimating(make(false))).animating;
	autoStart = contains(style, MAutoStart());

	MMEasingAnimation(
		const(0.3),
		const(easingFastOutSlowIn),
		triggerWidth,
		\wd ->
			Some(Pair(getValue(easedWidth), wd)),
		\wd, v -> {
			nextDistinct(easedWidth, lerp(wd.first, wd.second, v));
		},
		replaceStruct(style, MAnimating(animating)),
		MTransformTAcc2(\m2a -> {
			b = m2a(content);
			disposers = [fconnect(b.metrics.width, triggerWidth)];

			nextDistinct(easedWidth, if (autoStart) 0.0 else getValue(triggerWidth));

			TAcc(b with
				form = FCrop(zero, zero, fif(animating, easedWidth, b.metrics.width), b.metrics.height, b.form),
				metrics = TFormMetrics(fif(animating, easedWidth, b.metrics.width), b.metrics.height, b.metrics.baseline),
				disposers = concat(b.disposers, disposers)
			)
		})
	)
}

MHeightAnimation(content : Material, style : [MEasingAnimationStyle<Pair<double, double>>]) -> Material {
	triggerHeight = make(0.0);
	easedHeight = make(0.0);
	animating = extractStruct(style, MAnimating(make(false))).animating;
	autoStart = contains(style, MAutoStart());

	MMEasingAnimation(
		const(0.3),
		const(easingFastOutSlowIn),
		triggerHeight,
		\hgt ->
			Some(Pair(getValue(easedHeight), hgt)),
		\hgt, v -> {
			nextDistinct(easedHeight, lerp(hgt.first, hgt.second, v));
		},
		replaceStruct(style, MAnimating(animating)),
		MTransformTAcc2(\m2a -> {
			b = m2a(content);
			disposers = [fconnect(b.metrics.height, triggerHeight)];

			nextDistinct(easedHeight, if (autoStart) 0.0 else getValue(triggerHeight));

			TAcc(b with
				form = FCrop(zero, zero, b.metrics.width, fif(animating, easedHeight, b.metrics.height), b.form),
				metrics = TFormMetrics(b.metrics.width, fif(animating, easedHeight, b.metrics.height), b.metrics.baseline),
				disposers = concat(b.disposers, disposers)
			)
		})
	)
}

MEasingScaleAnimation(factor : Transform<Factor>, content : Material, style : [MEasingAnimationStyle<Pair<Factor, Factor>>]) -> Material {
	autoStart = contains(style, MAutoStart());
	scaleAnimation = make([]);

	animationFn = \fc : Pair<Factor, Factor> -> {
		next(
			scaleAnimation,
			[
				FAnimationKeyframe(
					if (fc.first != fc.second)
						[
							FScaleValue(Factor(
								fc.first.x,
								fc.first.y
							))
						]
					else
						[
							FScaleValue(Factor(0.0, 0.0))
						]
				),
				FAnimationKeyframe(
					[
						FScaleValue(Factor(1.0, 1.0))
					]
				)
			]
		);
	};

	MConstruct(
		[
			if (autoStart)
				makeSubscribe(fselectWithLast(factor, FIdentity2()), animationFn)
			else
				makeSubscribe2(fselectWithLast(factor, FIdentity2()), animationFn)
		],
		MAnimation(
			content,
			scaleAnimation,
			[
				FAnimationDuration(extractStruct(style, MDuration(const(0.3))).duration),
				FAnimationEasing(extractStruct(style, MBezier(const(easingFastOutSlowIn))).bezier),
				FAnimationOnFinish(extractStruct(style, MAnimationOnFinish(nop)).onFinish)
			]
		)
	);
}

MAlphaAnimation(alpha : Transform<double>, content : Material, style : [MEasingAnimationStyle<Pair<double, double>>]) -> Material {
	autoStart = contains(style, MAutoStart());
	alphaAnimation = make([]);
	contentSize = makeWH();

	animationFn = \a : Pair<double, double> -> {
		next(
			alphaAnimation,
			[
				FAnimationKeyframe(
					if (a.first != a.second)
						[
							FAlphaValue(a.first)
						]
					else
						[
							FAlphaValue(0.0)
						]
				),
				FAnimationKeyframe(
					[
						FAlphaValue(a.second)
					]
				)
			]
		);
	};

	MConstruct(
		[
			if (autoStart)
				makeSubscribe(fselectWithLast(alpha, FIdentity2()), animationFn)
			else
				makeSubscribe2(fselectWithLast(alpha, FIdentity2()), animationFn)
		],
		MAnimation(
			content,
			alphaAnimation,
			[
				FAnimationDuration(extractStruct(style, MDuration(const(0.3))).duration),
				FAnimationEasing(extractStruct(style, MBezier(const(easingFastOutSlowIn))).bezier),
				FAnimationOnFinish(extractStruct(style, MAnimationOnFinish(nop)).onFinish)
			]
		)
	);
}

MBorderAnimation(
	start : Transform<double>,
	top : Transform<double>,
	end : Transform<double>,
	bottom : Transform<double>,
	content : Material,
	style : [MEasingAnimationStyle<Pair<Quadruple<double, double, double, double>, Quadruple<double, double, double, double>>>]
) -> Material {
	easedStart = make(0.0);
	easedTop = make(0.0);
	easedEnd = make(0.0);
	easedBottom = make(0.0);
	autoStart = contains(style, MAutoStart());

	MConstruct(
		[
			\ -> {
				nextDistinct(easedStart, if (autoStart) 0.0 else fgetValue(start));
				nextDistinct(easedTop, if (autoStart) 0.0 else fgetValue(top));
				nextDistinct(easedEnd, if (autoStart) 0.0 else fgetValue(end));
				nextDistinct(easedBottom, if (autoStart) 0.0 else fgetValue(bottom));
				nop;
			}
		],
		MMEasingAnimation(
			const(0.3),
			const(easingFastOutSlowIn),
			fquadruple(start, top, end, bottom),
			\q ->
				Some(
					Pair(
						Quadruple(
							getValue(easedStart),
							getValue(easedTop),
							getValue(easedEnd),
							getValue(easedBottom)
						),
						q
					)
				),
			\q, v -> {
				nextDistinct(
					easedStart,
					lerp(q.first.first, q.second.first, v)
				);

				nextDistinct(
					easedTop,
					lerp(q.first.second, q.second.second, v)
				);

				nextDistinct(
					easedEnd,
					lerp(q.first.third, q.second.third, v)
				);

				nextDistinct(
					easedBottom,
					lerp(q.first.fourth, q.second.fourth, v)
				);
			},
			style,
			MBorderTA(
				easedStart,
				easedTop,
				easedEnd,
				easedBottom,
				content
			)
		)
	);
}

MShowAnimation(show : Transform<bool>, content : Material, style : [MEasingAnimationStyle<bool>]) -> Material {
	contentWidth = make(0.0);
	contentHeight = make(0.0);
	easedWidth = make(0.0);
	easedHeight = make(0.0);
	easedAlpha = make(0.0);
	autoStart = contains(style, MAutoStart());
	animating = extractStruct(style, MAnimating(make(false))).animating;

	MConstruct(
		[
			\ -> {
				next(easedAlpha, b2d(if (autoStart) !fgetValue(show) else fgetValue(show)));
				nop;
			}
		],
		MMEasingAnimation(
			const(0.3),
			const(easingFastOutSlowIn),
			show,
			\p -> Some(p),
			\p, v -> {
				nextDistinct(
					easedWidth,
					lerp(getValue(easedWidth), if (p) getValue(contentWidth) else 0.0, v)
				);

				nextDistinct(
					easedHeight,
					lerp(getValue(easedHeight), if (p) getValue(contentHeight) else 0.0, v)
				);

				nextDistinct(
					easedAlpha,
					lerp(b2d(!p), b2d(p), v)
				);
			},
			replaceStruct(style, MAnimating(animating)),
			MShow(
				fneq(easedAlpha, 0.0),
				MTransformTAcc2(\m2a -> {
					b = m2a(content);
					disposers = [fconnect(b.metrics.width, contentWidth), fconnect(b.metrics.height, contentHeight)];

					nextDistinct(easedWidth, if (autoStart) 0.0 else getValue(contentWidth));
					nextDistinct(easedHeight, if (autoStart) 0.0 else getValue(contentHeight));

					TAcc(b with
						form = FAlpha(easedAlpha, b.form),
						metrics = TFormMetrics(fif(animating, easedWidth, b.metrics.width), fif(animating, easedHeight, b.metrics.height), b.metrics.baseline),
						disposers = concat(b.disposers, disposers)
					)
				})
			)
		)
	);
}

MShowAnimationWidth(show : Transform<bool>, content : Material, style : [MEasingAnimationStyle<bool>]) -> Material {
	contentWidth = make(0.0);
	easedWidth = make(0.0);
	easedAlpha = make(0.0);
	autoStart = contains(style, MAutoStart());
	animating = extractStruct(style, MAnimating(make(false))).animating;

	MConstruct(
		[
			\ -> {
				next(easedAlpha, b2d(if (autoStart) !fgetValue(show) else fgetValue(show)));
				nop;
			}
		],
		MMEasingAnimation(
			const(0.3),
			const(easingFastOutSlowIn),
			show,
			\p -> Some(p),
			\p, v -> {
				nextDistinct(
					easedWidth,
					lerp(getValue(easedWidth), if (p) getValue(contentWidth) else 0.0, v)
				);

				nextDistinct(
					easedAlpha,
					lerp(b2d(!p), b2d(p), v)
				);
			},
			replaceStruct(style, MAnimating(animating)),
			MShow(
				fneq(easedAlpha, 0.0),
				MTransformTAcc2(\m2a -> {
					b = m2a(content);
					disposers = [fconnect(b.metrics.width, contentWidth)];

					nextDistinct(easedWidth, if (autoStart) 0.0 else getValue(contentWidth));

					TAcc(b with
						form = FAlpha(easedAlpha, b.form),
						metrics = TFormMetrics(fif(animating, easedWidth, b.metrics.width), b.metrics.height, b.metrics.baseline),
						disposers = concat(b.disposers, disposers)
					)
				})
			)
		)
	);
}

MShowAnimationHeight(show : Transform<bool>, content : Material, style : [MEasingAnimationStyle<bool>]) -> Material {
	contentHeight = make(0.0);
	easedHeight = make(0.0);
	easedAlpha = make(0.0);
	autoStart = contains(style, MAutoStart());
	animating = extractStruct(style, MAnimating(make(false))).animating;

	MConstruct(
		[
			\ -> {
				next(easedAlpha, b2d(if (autoStart) !fgetValue(show) else fgetValue(show)));
				nop;
			}
		],
		MMEasingAnimation(
			const(0.3),
			const(easingFastOutSlowIn),
			show,
			\p -> Some(p),
			\p, v -> {
				nextDistinct(
					easedHeight,
					lerp(getValue(easedHeight), if (p) getValue(contentHeight) else 0.0, v)
				);

				nextDistinct(
					easedAlpha,
					lerp(b2d(!p), b2d(p), v)
				);
			},
			replaceStruct(style, MAnimating(animating)),
			MShow(
				fneq(easedAlpha, 0.0),
				MTransformTAcc2(\m2a -> {
					b = m2a(content);
					disposers = [fconnect(b.metrics.height, contentHeight)];

					nextDistinct(easedHeight, if (autoStart) 0.0 else getValue(contentHeight));

					TAcc(b with
						form = FAlpha(easedAlpha, b.form),
						metrics = TFormMetrics(b.metrics.width, fif(animating, easedHeight, b.metrics.height), b.metrics.baseline),
						disposers = concat(b.disposers, disposers)
					)
				})
			)
		)
	);
}