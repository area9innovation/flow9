import material/iscript/material_iscript_filesystem_local;
import material/iscript/material_iscript_filesystem_db;

export {
	updateBatchTestFilenames(manager : MaterialManager, path : string) -> void;
	playIScriptFromFile(manager : MaterialManager, fileName : string) -> void;
	playIScriptIfNeeded(manager : MaterialManager) -> void;

	IScriptReplayStyles ::= ISRSourceLocal, ISRSourceDB, ISRDelay;
		ISRSourceLocal();
		ISRSourceDB();
		ISRDelay(defaultDelay : int);

	playIScriptIfNeededWithStyles(manager : MaterialManager, styles : [IScriptReplayStyles]) -> void;
	playBatchTestsFromDirectory(manager : MaterialManager, directory : string) -> void;
	saveIScript(manager : MaterialManager, name : string, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	updateIScriptFile(manager : MaterialManager, currentScriptFilename : string,
		updateFn : (storedIScript : StoredIScript) -> StoredIScript) -> void;
}

updateBatchTestFilenames(manager : MaterialManager, path : string) -> void {
	getFilesystemExtAPI().readDirectory(
		path,
		\__, files -> {
			testFiles = sort(filter(files, \v1 -> endsWith(v1, ".iscript")));
			next(manager.iscript.batchTestFileNamesB, testFiles);
		},
		\error -> iScriptInfo(manager, "Too few elements. " + error, None())
	)
}

playIScriptFromFile(manager : MaterialManager, fileName : string) -> void {
	iScriptFromFile(manager, fileName);
	next(manager.iscript.iScriptStateB, IScriptReplaying());
}

playIScriptIfNeeded(manager : MaterialManager) -> void {
	playIScriptIfNeededWithStyles(manager, [ISRSourceLocal(), ISRSourceDB()])
}

playIScriptIfNeededWithStyles(manager : MaterialManager, styles : [IScriptReplayStyles]) -> void {
	scriptFileName = getUrlParameter(PLAYISCRIPT_URLPAR);
	batchTestsDirectory = getUrlParameter(PLAYBATCHISCRIPT_URLPAR);

	isrReplayLocalSource = containsStruct(styles, ISRSourceLocal());
	isrReplayDBSource = containsStruct(styles, ISRSourceDB());

	replayDelay =
		if (isDigits(getUrlParameter(PLAYDELAY_URLPAR)))
			s2i(getUrlParameter(PLAYDELAY_URLPAR))
		else
			eitherMap(tryExtractStruct(styles, ISRDelay(0)), \v -> v.defaultDelay, 0);

	if (isrReplayLocalSource) {
		if (!js && scriptFileName != "" && !isIScriptDBPath(scriptFileName)) {
			storeFilesystemExtAPI = getFilesystemExtAPI();
			setLocalFilesystemExtAPI();
			if (fileExists(scriptFileName)) {
				iScriptInfo(manager, "playiscript: " + scriptFileName, None());
				timer(replayDelay, \ -> playIScriptFromFile(manager, scriptFileName));
			} else {
				iScriptInfo(manager, "IScript file not found: " + scriptFileName, None());
			}
			setFilesystemExtAPI(storeFilesystemExtAPI);
		} else if (!js && batchTestsDirectory != "" && !isIScriptDBPath(batchTestsDirectory)) {
			storeFilesystemExtAPI = getFilesystemExtAPI();
			setLocalFilesystemExtAPI();
			if (isDirectory(batchTestsDirectory)) {
				folderName = if (!endsWith(batchTestsDirectory, "\\")) batchTestsDirectory + "\\" else batchTestsDirectory;
				iScriptInfo(manager, "playbatchiscript: " + folderName, None());
				timer(replayDelay, \ -> playBatchTestsFromDirectory(manager, folderName));
			} else {
				iScriptInfo(manager, "Batch directory not found: " + batchTestsDirectory, None());
			}
			setFilesystemExtAPI(storeFilesystemExtAPI);
		}
	} else if (isrReplayDBSource && isIScriptFilesystemDBInitialized(manager)) {
		if (isIScriptDBPath(scriptFileName)) {
			storeCurrentAndSetIScriptDBPartition(manager);
			iScriptFromDB2(manager, scriptFileName,
				\v : StoredIScript -> {
					restoreCurrentDBPartition(manager);
					iScriptInfo(manager, "playiscript: " + scriptFileName, None());
					timer(replayDelay,
						\ -> {
							next(manager.iscript.iScriptB, v.script);
							next(manager.iscript.iScriptStateB, IScriptReplaying());
						}
					);
				},
				\err_msg -> {
					restoreCurrentDBPartition(manager);
					iScriptInfo(manager, err_msg, None());
				}
			)
		} else if (isIScriptDBPath(batchTestsDirectory)) {
			storeCurrentAndSetIScriptDBPartition(manager);
			getFilesystemExtAPI().isDirectory(batchTestsDirectory,
				\b -> if (b) {
						folderName = if (!endsWith(batchTestsDirectory, "\\")) batchTestsDirectory + "\\" else batchTestsDirectory;
						iScriptInfo(manager, "playbatchiscript: " + folderName, None());
						next(manager.iscript.currentBatchTestsDirectoryB, folderName);
						updateBatchTestFilenames(manager, folderName);
						restoreCurrentDBPartition(manager);
						timer(replayDelay, \ -> next(manager.iscript.iScriptStateB, IScriptBatchReplaying()));
					} else {
						restoreCurrentDBPartition(manager);
						iScriptInfo(manager, "Batch directory not found: " + batchTestsDirectory, None());
					}
			)
		}
	}
}

playBatchTestsFromDirectory(manager : MaterialManager, folderName : string) -> void {
	if (folderName != "") {
		next(manager.iscript.currentBatchTestsDirectoryB, folderName);
		updateBatchTestFilenames(manager, folderName);
		next(manager.iscript.iScriptStateB, IScriptBatchReplaying());
	}
}

saveIScript(manager : MaterialManager, name : string, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	fileName = changeFileExt(name, ".iscript");

	next(manager.iscript.currentFileNameB, fileName);

	if (iScriptToFile(manager, fileName)) {
		next(manager.iscript.scriptChangedB, false);
	} else {
		closeB = make(false);
		renderMDialog(manager, closeB, [
				MDialogUseFrame(),
				MDialogActions([MTextButton("OK", \ -> next(closeB, true), [], [MShortcut("enter")])])
			],
			MText("Error saving IScript!", []),
			m2t
		);
	}
}

updateIScriptFile(
	manager : MaterialManager,
	currentScriptFilename : string,
	updateFn : (storedIScript : StoredIScript) -> StoredIScript) -> void {

	if (startsWith(currentScriptFilename, "DB:/")) {
		storeCurrentAndSetIScriptDBPartition(manager);

		iScriptFromDB2(manager, currentScriptFilename,
			\currentScript : StoredIScript -> {
				resultScript = updateFn(currentScript);
				iScriptToDB2(
					manager,
					currentScriptFilename,
					resultScript,
					\ -> restoreCurrentDBPartition(manager),
					\err_msg -> {
						restoreCurrentDBPartition(manager);
						iScriptInfo(manager, err_msg, None());
					}
				)
			},
			\err_msg -> {
				restoreCurrentDBPartition(manager);
				iScriptInfo(manager, err_msg, None());
			}
		)
	}
	else {
		currentScript = storedIScriptFromFile(currentScriptFilename);
		resultScript = updateFn(currentScript);
		res = iScriptToFile2(manager, resultScript, currentScriptFilename);
		if (!res) {
			iScriptInfo(manager, "Update of local iScript file failed.", None());
		}
	}
}
