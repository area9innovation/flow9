import material/material2tropic;

export {
	// ! "Content" field in next functions must be decorated with MBackground or similar.

	// Shows a modal dialog
	ShowMDialog(manager : MaterialManager, closeWhen : Transform<bool>, style : [MDialogStyle], content : Material) -> void;

	// Show a modal dialog with a single button
	ShowMConfirmation(manager : MaterialManager, title : string, button : string, shortcut : string, dialogContent : Material) -> void;

	// Shows a modal dialog with save and cancel callbacks
	ShowMDialogWithCallbacks(manager : MaterialManager, view : Material, saveEnabled : Transform<bool> , onSave : () -> void, onCancel : () -> void) -> void;

	// styles for standard two-button dialog
	MDialogWithCallbacksStyle ::= MDialogWithCallbacksSaveTitle, MDialogWithCallbacksCancelTitle, MDialogWithCallbacksSaveEnabled, MDialogWithCallbacksIgnoreEnter, MDialogStyle;
		MDialogWithCallbacksSaveTitle(title : string); // title for save button
		MDialogWithCallbacksCancelTitle(title : string); // title for cancel button
		MDialogWithCallbacksSaveEnabled(enabled : Transform<bool>); // is save button clickable
		MDialogWithCallbacksIgnoreEnter();
	// customizable version of standard two-button dialog
	ShowMDialogWithCallbacksCustom(manager : MaterialManager, view : Material, styles : [MDialogWithCallbacksStyle], onSave : () -> void, onCancel : () -> void) -> void;
	// Show floating button
	ShowMFloatingAction(manager : MaterialManager, m : Material) -> () -> void;
}

ShowMDialog(manager : MaterialManager, closeWhen : Transform<bool>, style : [MDialogStyle], content : Material) -> void {
	cs = if (isMaterialLogLevelEnabled(MaterialError())) captureStringCallstack() else "";

	renderMDialog2(
		manager,
		closeWhen,
		style,
		content,
		\m, p ->
			material2tropicWithParent(manager, p, m),
		\t ->
			trender(
				TAvailable(
					TTranslate(fif(manager.iscript.showPanel, const(Point(0.0, 48.0)), const(zeroPoint)), t),
					TIf(manager.iscript.showPanel, TSized(manager.iscript.available), TFillXY())
				)
				|> (\f ->
					materialLogFn(
						\ ->
							TFixSize(
								TLines2(
									TFixed(36., 36.),
									f
								),
								TFillXY()
							),
						MaterialError(),
						\ -> f
					)
				)
				|> (\f ->
					if (isMaterialLogLevelEnabled(MaterialError()) && strlen(cs) > 3)
						TCopySize(
							f,
							\sz ->
								TGroup2(
									TRounded(4.0, 4.0, 4.0, 4.0, [MStroke(MRedA(400))], sz |> TBorderBottom(-1.0) |> TBorderRight(-1.0)),
									TFrame(
										0.0,
										4.0,
										[MFill(MRedA(400))],
										TBorder(
											2.0, 0.0, 2.0, 0.0,
											mouseDownAround(
												manager,
												None(),
												make(false),
												make(false),
												\ -> iter(concat3(["---"], strSplit(cs, "\n"), ["---"]), println),
												MText2T(manager.focus, firstLineOfCallStack(cs), [MWhite(), MOverline()])
											)
										)
									)
								),
							true
						)
					else
						f
				),
				manager.manager.renderStyle
			)
	);
}

ShowMConfirmation(manager : MaterialManager, title : string, button : string, shortcut : string, dialogContent : Material) -> void {
	close = make(false);
	ShowMDialog(manager, close,
		[
			MDialogTitle(title),
			MDialogUseFrame(),
			MDialogActions([
				MTextButton(button, \ -> next(close, true), [], [MShortcut(shortcut)]),
			]),
			MDialogScroll()
		],
		dialogContent
	)
}

ShowMDialogWithCallbacks(manager : MaterialManager, view : Material, saveEnabled : Transform<bool> , onSave : () -> void, onCancel : () -> void) -> void {
	ShowMDialogWithCallbacksCustom(manager, view, [MDialogWithCallbacksSaveEnabled(saveEnabled)], onSave, onCancel);
}

ShowMDialogWithCallbacksCustom(manager : MaterialManager, view : Material, styles : [MDialogWithCallbacksStyle], onSave : () -> void, onCancel : () -> void) -> void {
	close = make(false);

	saveStr = extractStruct(styles, MDialogWithCallbacksSaveTitle(_("SAVE"))).title;
	cancelStr = extractStruct(styles, MDialogWithCallbacksCancelTitle(_("CANCEL"))).title;
	saveEnabled = extractStruct(styles, MDialogWithCallbacksSaveEnabled(const(true))).enabled;
	ignoreEnter = contains(styles, MDialogWithCallbacksIgnoreEnter());

	onSaveDialog = \-> {
		next(close, true);
		onSave();
	};

	onCancelDialog = \-> {
		next(close, true);
		onCancel();
	};

	dialogStyles = subtractA(styles, 
		[
			MDialogUseFrame(), MDialogScroll(), MDialogActions([]), 
			MDialogWithCallbacksSaveTitle(""), MDialogWithCallbacksCancelTitle(""), MDialogWithCallbacksSaveEnabled(const(true))
		]);
	dialogStyles2 = map(dialogStyles, \style -> cast(style : MDialogWithCallbacksStyle -> MDialogStyle));

	ShowMDialog(manager, close,
		concatA([
			[
				MDialogUseFrame(),
				MDialogScroll(),
				MDialogActions([
					MTextButton(cancelStr, onCancelDialog, [], [MShortcut("esc")]),
					MTextButton(saveStr, onSaveDialog, [MButtonRaised()],
						if (ignoreEnter) [MEnabled(saveEnabled)] else [MEnabled(saveEnabled), MShortcut("enter")]
					),
				])
			],
			dialogStyles2
			]),
		view
		|> MSetMinWidth(MFixedX(256.))
	)
}

ShowMFloatingAction(manager : MaterialManager, m : Material) -> () -> void {
	next(manager.floatingActions, arrayPush(getValue(manager.floatingActions), m));
	\ -> next(manager.floatingActions, removeFirst(getValue(manager.floatingActions), m))
}
