import colorspace;
import form/colors;

export {
	// https://www.google.com/design/spec/style/color.html#color-color-palette

	// To construct a color, use one of the functions below
	MColor(color : MColorName, shade : int, accent : bool);

		MColorName ::= CBlue, CIndigo, CDeepPurple, CPurple,
			CBlueGrey, CLightBlue, CCyan, CTeal, CGreen, CLightGreen, CLime,
			CYellow, CAmber, COrange,
			CDeepOrange, CRed, CPink, CBrown,
			CGrey, CBlack, CWhite, CCustom;

			// Cool colors
			CBlue();
			CIndigo();
			CDeepPurple();
			CPurple();

			// Fresh colors
			CBlueGrey();
			CLightBlue();
			CCyan();
			CTeal();
			CGreen();
			CLightGreen();
			CLime();

			// Warm colors
			CYellow();
			CAmber();
			COrange();

			// Hot colors
			CDeepOrange();
			CRed();
			CPink();
			CBrown();

			// Neutral colors
			CGrey();
			CBlack();
			CWhite();

			// Custom color
			CCustom();


	// Recommended shade is 500. Available shades: 50, 100, 200, ..., 900
	// The higher the shade number is, the darker the color is.
	// Accent colors only support these shades: 100, 200, 400, 700

		MBlue(shade : int) -> MColor { MColor(CBlue(), shade, false) }
		MBlueA(shade : int) -> MColor { MColor(CBlue(), shade, true) }
		MIndigo(shade : int) -> MColor { MColor(CIndigo(), shade, false) }
		MIndigoA(shade : int) -> MColor { MColor(CIndigo(), shade, true) }
		MDeepPurple(shade : int) -> MColor { MColor(CDeepPurple(), shade, false) }
		MDeepPurpleA(shade : int) -> MColor { MColor(CDeepPurple(), shade, true) }
		MPurple(shade : int) -> MColor { MColor(CPurple(), shade, false) }
		MPurpleA(shade : int) -> MColor { MColor(CPurple(), shade, true) }

		MLightBlue(shade : int) -> MColor { MColor(CLightBlue(), shade, false) }
		MLightBlueA(shade : int) -> MColor { MColor(CLightBlue(), shade, true) }
		MCyan(shade : int) -> MColor { MColor(CCyan(), shade, false) }
		MCyanA(shade : int) -> MColor { MColor(CCyan(), shade, true) }
		MTeal(shade : int) -> MColor { MColor(CTeal(), shade, false) }
		MTealA(shade : int) -> MColor { MColor(CTeal(), shade, true) }
		MGreen(shade : int) -> MColor { MColor(CGreen(), shade, false) }
		MGreenA(shade : int) -> MColor { MColor(CGreen(), shade, true) }
		MLightGreen(shade : int) -> MColor { MColor(CLightGreen(), shade, false) }
		MLightGreenA(shade : int) -> MColor { MColor(CLightGreen(), shade, true) }
		MLime(shade : int) -> MColor { MColor(CLime(), shade, false) }
		MLimeA(shade : int) -> MColor { MColor(CLime(), shade, true) }

		MYellow(shade : int) -> MColor { MColor(CYellow(), shade, false) }
		MYellowA(shade : int) -> MColor { MColor(CYellow(), shade, true) }
		MAmber(shade : int) -> MColor { MColor(CAmber(), shade, false) }
		MAmberA(shade : int) -> MColor { MColor(CAmber(), shade, true) }
		MOrange(shade : int) -> MColor { MColor(COrange(), shade, false) }
		MOrangeA(shade : int) -> MColor { MColor(COrange(), shade, true) }

		MDeepOrange(shade : int) -> MColor { MColor(CDeepOrange(), shade, false) }
		MDeepOrangeA(shade : int) -> MColor { MColor(CDeepOrange(), shade, true) }
		MRed(shade : int) -> MColor { MColor(CRed(), shade, false) }
		MRedA(shade : int) -> MColor { MColor(CRed(), shade, true) }
		MPink(shade : int) -> MColor { MColor(CPink(), shade, false) }
		MPinkA(shade : int) -> MColor { MColor(CPink(), shade, true) }

		MBrown(shade : int) -> MColor { MColor(CBrown(), shade, false) }
		MGrey(shade : int) -> MColor { MColor(CGrey(), shade, false) }
		MBlueGrey(shade : int) -> MColor { MColor(CBlueGrey(), shade, false) }
		MBlack() -> MColor { MColor(CBlack(), 0, false) }
		MWhite() -> MColor { MColor(CWhite(), 0, false) }

		// App background colors
		// https://www.google.com/design/spec/style/color.html#color-themes
		MStatusBarColor(lightBackground : bool) -> MColor { if (lightBackground) MGrey(300) else MBlack() }
		MAppBarColor(lightBackground : bool) -> MColor { if (lightBackground) MGrey(100) else MGrey(900) }
		MBackgroundColor(lightBackground : bool) -> MColor { if (lightBackground) MGrey(50) else MColor(CCustom(), 0x303030, false)}
		MDialogColor(lightBackground : bool) -> MColor { if (lightBackground) MWhite() else MGrey(800) }
		MDefaultTextColor(lightBackground : bool) -> MColor { if (lightBackground) MBlack() else MWhite() }

		// Custom color
		// Should be used only in special cases
		MCustomColor(color : int) -> MColor { MColor(CCustom(), color, false) }

		MErrorColor() -> MColor { MCustomColor(0xb00020) }

	// Convert this color to RGB hex
	MColor2int(m : MColor) -> int;

	// What color should text have with this background color?
	MTextColor(m : MColor) -> int;
	MTextMColor(m : MColor) -> MColor;

	// Make this color lighter
	MTintColor(m : MColor) -> int;

	// Make this color darker
	MShadeColor(m : MColor) -> int;

	// Fill and Stroke with MaterialColor
	MFill(mcolor : MColor) -> Fill;
	MStroke(mcolor : MColor) -> Stroke;

	// Available MColor int values
	mColorPaletteValues : [int];
	mColorPaletteAccentValues : [int];

	// MColors palette
	mColorPalette : Tree<string, [int]>;
	mColorPaletteAccent : Tree<string, [int]>;

	// Convert to string
	mColorName2s(color : MColor) -> string;
	mColorShade2s(color : MColor) -> string; // If color type is CCustom returns hex value of the color

	// Get MColorName structure from structname string
	structname2mColorName(color : string) -> MColorName;

	// Get string from struct: MColor(CBlue, shade, false) -> "MBlue(shade)"
	mColorFn2s(m : MColor) -> string;

	materialShades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];
	materialAccentShades = [100, 200, 400, 700];

	mCustomColor2MColor(color : MColor) -> MColor;

	adjustMColorShade(color : MColor, delta : int) -> MColor;

	isLightMColor(color : MColor) -> bool;
	invertMColorBrightness(color : MColor) -> MColor;

	randomMColor() -> MColor;
}

mColorPalette = pairs2tree([
	Pair("CRed", [0xFFEBEE, 0xFFCDD2, 0xEF9A9A, 0xE57373, 0xEF5350, 0xF44336, 0xE53935, 0xD32F2F, 0xC62828, 0xB71C1C]),
	Pair("CPink", [0xFCE4EC, 0xF8BBD0, 0xF48FB1, 0xF06292, 0xEC407A, 0xE91E63, 0xD81B60, 0xC2185B, 0xAD1457, 0x880E4F]),
	Pair("CPurple", [0xF3E5F5, 0xE1BEE7, 0xCE93D8, 0xBA68C8, 0xAB47BC, 0x9C27B0, 0x8E24AA, 0x7B1FA2, 0x6A1B9A, 0x4A148C]),
	Pair("CDeepPurple", [0xEDE7F6, 0xD1C4E9, 0xB39DDB, 0x9575CD, 0x7E57C2, 0x673AB7, 0x5E35B1, 0x512DA8, 0x4527A0, 0x311B92]),
	Pair("CIndigo", [0xE8EAF6, 0xC5CAE9, 0x9FA8DA, 0x7986CB, 0x5C6BC0, 0x3F51B5, 0x3949AB, 0x303F9F, 0x283593, 0x1A237E]),
	Pair("CBlue", [0xE3F2FD, 0xBBDEFB, 0x90CAF9, 0x64B5F6, 0x42A5F5, 0x2196F3, 0x1E88E5, 0x1976D2, 0x1565C0, 0x0D47A1]),
	Pair("CLightBlue", [0xE1F5FE, 0xB3E5FC, 0x81D4FA, 0x4FC3F7, 0x29B6F6, 0x03A9F4, 0x039BE5, 0x0288D1, 0x0277BD, 0x01579B]),
	Pair("CCyan", [0xE0F7FA, 0xB2EBF2, 0x80DEEA, 0x4DD0E1, 0x26C6DA, 0x00BCD4, 0x00ACC1, 0x0097A7, 0x00838F, 0x006064]),
	Pair("CTeal", [0xE0F2F1, 0xB2DFDB, 0x80CBC4, 0x4DB6AC, 0x26A69A, 0x009688, 0x00897B, 0x00796B, 0x00695C, 0x004D40]),
	Pair("CGreen", [0xE8F5E9, 0xC8E6C9, 0xA5D6A7, 0x81C784, 0x66BB6A, 0x4CAF50, 0x43A047, 0x388E3C, 0x2E7D32, 0x1B5E20]),
	Pair("CLightGreen", [0xF1F8E9, 0xDCEDC8, 0xC5E1A5, 0xAED581, 0x9CCC65, 0x8BC34A, 0x7CB342, 0x689F38, 0x558B2F, 0x33691E]),
	Pair("CLime", [0xF9FBE7, 0xF0F4C3, 0xE6EE9C, 0xDCE775, 0xD4E157, 0xCDDC39, 0xC0CA33, 0xAFB42B, 0x9E9D24, 0x827717]),
	Pair("CYellow", [0xFFFDE7, 0xFFF9C4, 0xFFF59D, 0xFFF176, 0xFFEE58, 0xFFEB3B, 0xFDD835, 0xFBC02D, 0xF9A825, 0xF57F17]),
	Pair("CAmber", [0xFFF8E1, 0xFFECB3, 0xFFE082, 0xFFD54F, 0xFFCA28, 0xFFC107, 0xFFB300, 0xFFA000, 0xFF8F00, 0xFF6F00]),
	Pair("COrange", [0xFFF3E0, 0xFFE0B2, 0xFFCC80, 0xFFB74D, 0xFFA726, 0xFF9800, 0xFB8C00, 0xF57C00, 0xEF6C00, 0xE65100]),
	Pair("CDeepOrange", [0xFBE9E7, 0xFFCCBC, 0xFFAB91, 0xFF8A65, 0xFF7043, 0xFF5722, 0xF4511E, 0xE64A19, 0xD84315, 0xBF360C]),
	Pair("CBrown", [0xEFEBE9, 0xD7CCC8, 0xBCAAA4, 0xA1887F, 0x8D6E63, 0x795548, 0x6D4C41, 0x5D4037, 0x4E342E, 0x3E2723]),
	Pair("CGrey", [0xFAFAFA, 0xF5F5F5, 0xEEEEEE, 0xE0E0E0, 0xBDBDBD, 0x9E9E9E, 0x757575, 0x616161, 0x424242, 0x212121]),
	Pair("CBlueGrey", [0xECEFF1, 0xCFD8DC, 0xB0BEC5, 0x90A4AE, 0x78909C, 0x607D8B, 0x546E7A, 0x455A64, 0x37474F, 0x263238])
]);

mColorPaletteValues = getTreeValues(mColorPalette) |> concatA;

color2int(name : MColorName, shade : int) -> int {
	if (name == CCustom()) shade
	else {
		paletteA = lookupTreeDef(mColorPalette, name.structname, []);
		colorInt = elementAt(paletteA, shade / 100, 0);

		if (length(paletteA) == 0)
			println("color2int error: unknow color's name " + toString(name));
		if(colorInt == 0)
			println("color2int error: wrong color's shade " + i2s(shade));
		colorInt;
	}
}

mColorPaletteAccent = pairs2tree([
	Pair("CRed", [0xFF8A80, 0xFF5252, 0xFF1744, 0xD40000]),
	Pair("CPink", [0xFF80AB, 0xFF4081, 0xF50057, 0xC51162]),
	Pair("CPurple", [0xEA80FC, 0xE040FB, 0xD500F9, 0xAA00FF]),
	Pair("CDeepPurple", [0xB388FF, 0x7C4DFF, 0x651FFF, 0x6200EA]),
	Pair("CIndigo", [0x8C9EFF, 0x536DFE, 0x3D5AFE, 0x304FFE]),
	Pair("CBlue", [0x82B1FF, 0x448AFF, 0x2979FF, 0x2962FF]),
	Pair("CLightBlue", [0x80D8FF, 0x40C4FF, 0x00B0FF, 0x0091EA]),
	Pair("CCyan", [0x84FFFF, 0x18FFFF, 0x00E5FF, 0x00B8D4]),
	Pair("CTeal", [0xA7FFEB, 0x64FFDA, 0x1DE9B6, 0x00BFA5]),
	Pair("CGreen", [0xB9F6CA, 0x69F0AE, 0x00E676, 0x00C853]),
	Pair("CLightGreen", [0xCCFF90, 0xB2FF59, 0x76FF03, 0x64DD17]),
	Pair("CLime", [0xF4FF81, 0xEEFF41, 0xC6FF00, 0xAEEA00]),
	Pair("CYellow", [0xFFFF8D, 0xFFFF00, 0xFFEA00, 0xFFD600]),
	Pair("CAmber", [0xFFE57F, 0xFFD740, 0xFFC400, 0xFFAB00]),
	Pair("COrange", [0xFFD180, 0xFFAB40, 0xFF9100, 0xFF6D00]),
	Pair("CDeepOrange", [0xFF9E80, 0xFF6E40, 0xFF3D00, 0xDD2C00])
]);

randomMColor() -> MColor {
	palette = if (random() > 0.5) mColorPaletteAccent else mColorPalette;
	paletteKeys = getTreeKeys(palette);
	colors = lookupTreeDef(palette, paletteKeys[floor(random() * i2d(length(paletteKeys)))], []);

	mCustomColor2MColor(MCustomColor(colors[floor(random() * i2d(length(colors)))]));
}

mColorPaletteAccentValues = getTreeValues(mColorPaletteAccent) |> concatA;

colorAccent2int(name : MColorName, shade : int) -> int {
	cs = lookupTreeDef(mColorPaletteAccent, name.structname, []);
	if (length(cs) >= 3) {
		if (shade <= materialAccentShades[0]) cs[0]
		else if (shade <= materialAccentShades[1]) cs[1]
		else if (shade <= materialAccentShades[2]) cs[2]
		else cs[3]; // 700
	} else {
		700
	}
}

MColor2int(m : MColor) -> int {
	switch (m.color) {
		CWhite(): white;
		CBlack(): black;

		CBrown(): color2int(m.color, m.shade);
		CGrey(): color2int(m.color, m.shade);
		CBlueGrey(): color2int(m.color, m.shade);

		default: {
			if (m.accent) colorAccent2int(m.color, m.shade)
			else color2int(m.color, m.shade)
		}
	}
}

MTextColor(m : MColor) -> int {
	if (isLightMColor(m))
		black
	else
		white;
}

MTextMColor(m : MColor) -> MColor {
	if (isLightMColor(m))
		MBlack()
	else
		MWhite();
}

// Make this color lighter
MTintColor(m : MColor) -> int {
	opa = switch (m.color) {
		CGrey(): if (m.shade <= 300) 0.4 else 0.2;
		default: 0.2;
	}
	mixColors(MColor2int(m), white, 1.0, opa);
}

// Make this color darker
MShadeColor(m : MColor) -> int {
	col = switch (m.color) {
		CBlue(): MIndigo(900);
		CIndigo(): MIndigo(900);
		CDeepPurple(): MIndigo(900);
		CPurple(): MIndigo(900);

		CBlueGrey(): MBlueGrey(900);
		CLightBlue(): MBlueGrey(900);
		CCyan(): MBlueGrey(900);
		CTeal(): MBlueGrey(900);
		CGreen(): MBlueGrey(900);
		CLightGreen(): MBlueGrey(900);
		CLime(): MBlueGrey(900);

		CYellow(): MDeepOrange(900);
		CAmber(): MDeepOrange(900);
		COrange(): MDeepOrange(900);

		CDeepOrange(): MBrown(900);
		CRed(): MBrown(900);
		CPink(): MBrown(900);
		CBrown(): MBrown(900);

		CGrey(): MGrey(900);
		CBlack(): MBlack();
		CWhite(): MGrey(900);
		CCustom(): MBlack();
	}
	opa = switch (m.color) {
		CGrey(): if (m.shade <= 300) 0.1 else 0.2;
		default: 0.2;
	}
	mixColors(MColor2int(m), MColor2int(col), if (m.color == CCustom()) 1. else 1. - opa, opa);
}

MFill(mcolor : MColor) -> Fill {
	Fill(MColor2int(mcolor))
}

MStroke(mcolor : MColor) -> Stroke {
	Stroke(MColor2int(mcolor))
}

mColorName2s(color : MColor) -> string {
	switch (color.color) {
		CRed(): "Red";
		CPink(): "Pink";
		CPurple(): "Purple";
		CDeepPurple(): "Deep Purple";
		CIndigo(): "Indigo";
		CBlue(): "Blue";
		CLightBlue(): "Light Blue";
		CCyan(): "Cyan";
		CTeal(): "Teal";
		CGreen(): "Green";
		CLightGreen(): "Light Green";
		CLime(): "Lime";
		CYellow(): "Yellow";
		CAmber(): "Amber";
		COrange(): "Orange";
		CDeepOrange(): "Deep Orange";
		CBrown(): "Brown";
		CGrey(): "Grey";
		CBlueGrey(): "Blue Grey";
		CWhite(): "White";
		CBlack(): "Black";
		CCustom(): "Custom";
	}
}

mColorShade2s(color : MColor) -> string {
	if (color.color == CCustom()) {
		"#" + formatColor(color.shade)
	} else {
		if (color.shade > 0)
			((if (color.accent) "A" else "") + i2s(color.shade))
		else
			""
	}
}

structname2mColorName(color : string) -> MColorName {
	if (color == "CRed")
		CRed()
	else if (color == "CPink")
		CPink()
	else if (color == "CPurple")
		CPurple()
	else if (color == "CDeepPurple")
		CDeepPurple()
	else if (color == "CIndigo")
		CIndigo()
	else if (color == "CBlue")
		CBlue()
	else if (color == "CLightBlue")
		CLightBlue()
	else if (color == "CCyan")
		CCyan()
	else if (color == "CTeal")
		CTeal()
	else if (color == "CGreen")
		CGreen()
	else if (color == "CLightGreen")
		CLightGreen()
	else if (color == "CLime")
		CLime()
	else if (color == "CYellow")
		CYellow()
	else if (color == "CAmber")
		CAmber()
	else if (color == "COrange")
		COrange()
	else if (color == "CDeepOrange")
		CDeepOrange()
	else if (color == "CBrown")
		CBrown()
	else if (color == "CGrey")
		CGrey()
	else if (color == "CBlueGrey")
		CBlueGrey()
	else if (color == "CBlack")
		CPink()
	else if (color == "CWhite")
		CPink()
	else
		CCustom()
}

mColorFn2s(m : MColor) -> string {
	switch (m.color : MColorName) {
		CRed() : {
			if (m.accent)
				"MRedA(" + i2s(m.shade) + ")"
			else
				"MRed(" + i2s(m.shade) + ")"
		}
		CPink() : {
			if (m.accent)
				"MPinkA(" + i2s(m.shade) + ")"
			else
				"MPink(" + i2s(m.shade) + ")"
		}
		CPurple() : {
			if (m.accent)
				"MPurpleA(" + i2s(m.shade) + ")"
			else
				"MPurple(" + i2s(m.shade) + ")"
		}
		CDeepPurple() : {
			if (m.accent)
				"MDeepPurpleA(" + i2s(m.shade) + ")"
			else
				"MDeepPurple(" + i2s(m.shade) + ")"
		}
		CIndigo() : {
			if (m.accent)
				"MIndigoA(" + i2s(m.shade) + ")"
			else
				"MIndigo(" + i2s(m.shade) + ")"
		}
		CBlue() : {
			if (m.accent)
				"MBlueA(" + i2s(m.shade) + ")"
			else
				"MBlue(" + i2s(m.shade) + ")"
		}
		CLightBlue() : {
			if (m.accent)
				"MLightBlueA(" + i2s(m.shade) + ")"
			else
				"MLightBlue(" + i2s(m.shade) + ")"
		}
		CCyan() : {
			if (m.accent)
				"MCyanA(" + i2s(m.shade) + ")"
			else
				"MCyan(" + i2s(m.shade) + ")"
		}
		CTeal() : {
			if (m.accent)
				"MTealA(" + i2s(m.shade) + ")"
			else
				"MTeal(" + i2s(m.shade) + ")"
		}
		CGreen() : {
			if (m.accent)
				"MGreenA(" + i2s(m.shade) + ")"
			else
				"MGreen(" + i2s(m.shade) + ")"
		}
		CLightGreen() : {
			if (m.accent)
				"MLightGreenA(" + i2s(m.shade) + ")"
			else
				"MLightGreen(" + i2s(m.shade) + ")"
		}
		CLime() :{
			if (m.accent)
				"MLimeA(" + i2s(m.shade) + ")"
			else
				"MLime(" + i2s(m.shade) + ")"
		}
		CYellow() : {
			if (m.accent)
				"MYellowA(" + i2s(m.shade) + ")"
			else
				"MYellow(" + i2s(m.shade) + ")"
		}
		CAmber() : {
			if (m.accent)
				"MAmberA(" + i2s(m.shade) + ")"
			else
				"MAmber(" + i2s(m.shade) + ")"
		}
		COrange() : {
			if (m.accent)
				"MOrangeA(" + i2s(m.shade) + ")"
			else
				"MOrange(" + i2s(m.shade) + ")"
		}
		CDeepOrange() : {
			if (m.accent)
				"MDeepOrangeA(" + i2s(m.shade) + ")"
			else
				"MDeepOrangeA(" + i2s(m.shade) + ")"
		}
		CBrown() : {
			"MBrown(" + i2s(m.shade) + ")"
		}
		CGrey() : {
			"MGrey(" + i2s(m.shade) + ")"
		}
		CBlueGrey() : {
			"MBlueGrey(" + i2s(m.shade) + ")"
		}
		CBlack() : {
			"MBlack()"
		}
		CWhite() : {
			"MWhite()"
		}
		CCustom() : {
		"MCustomColor(" + i2s(color2int(CCustom(), m.shade)) + ")"
		}
	}
}

mCustomColor2MColor(color : MColor) -> MColor {
	switch (color.color : MColorName) {
		CCustom(): {
			newColor0 = MColor2int(color);

			if (newColor0 == black) {
				MBlack()
			} else if (newColor0 == white) {
				MWhite()
			} else if (contains(mColorPaletteValues, newColor0)) {
				either(
					findInOrder(mColorPalette, \k, v ->
						if (contains(v, newColor0))
							Some(MColor(structname2mColorName(k), materialShades[findiDef(v, \v0 -> v0 == newColor0, 0)], false))
						else
							None()),
					newColor0 |> MCustomColor
				)
			} else if (contains(mColorPaletteAccentValues, newColor0)) {
				either(
					findInOrder(mColorPaletteAccent, \k, v ->
						if (contains(v, newColor0))
							Some(MColor(structname2mColorName(k), materialAccentShades[findiDef(v, \v0 -> v0 == newColor0, 0)], true))
						else
							None()),
					newColor0 |> MCustomColor
				)
			} else {
				newColor0 |> MCustomColor
			}
		}
		default: color;
	}
}

adjustMColorShade(color : MColor, delta : int) -> MColor {
	MColor(color.color, color.shade + delta, color.accent)
}

isLightMColor(color : MColor) -> bool {
	getColorBrightness(color) > 0.6
}

invertMColorBrightness(color : MColor) -> MColor {
	hslColor = rgb2hsl(int2rgb(MColor2int(color)));
	MCustomColor(rgb2int(hsl2rgb(HSL(hslColor with l = 100.0 - hslColor.l))));
}

getColorBrightness(color : MColor) -> double {
	rgbColor = int2rgb(MColor2int(color));
	(0.299 * i2d(rgbColor.r) + 0.587 * i2d(rgbColor.g) + 0.114 * i2d(rgbColor.b)) / 255.0;
}