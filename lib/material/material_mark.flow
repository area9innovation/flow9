
// Hightlight relevant text.
// TODO: Hightlight gets lost on clip update.
import material/material;

export {
	MMark(text : Transform<string>, m : Material) -> Material;
}

native loadMarkJsLibrary : (cb : (loaded : bool) -> void) -> void = Mark.loadMarkJsLibrary;

MMark(text : Transform<string>, m : Material) -> Material {
	if (js) {
		if (text == const("")) m
		else {
			mut = make(MEmpty());

			loadMarkJsLibrary(
				\loaded -> {
					if (loaded) {
						mat = MGetManager(\manager -> {
							// TODO: Use different id?
							id = i2s(makeTagId(manager.manager));
							querySelectorField = "markText" + "-" + id;
							MConstruct(
								[
									\-> {
											// DOM not ready on first call: Can't find element.
										\-> deferUntilRender(\-> hostCall("performMark", [fgetValue(text), querySelectorField])|>ignore);
										\-> hostCall("performUnMark", [querySelectorField])|>ignore
									},
									makeSubscribe2(text, \t -> {
										hostCall("performMark", [t, querySelectorField])|>ignore;
									}),
								],
								MAccess([ClassName(querySelectorField)], m)
							)
						});
						next(mut, mat)
					} else next(mut, m)
				}
			);
			MMutable(mut);
		}
	} else {
		devtrace("MMark supported only in js.");
		m
	}
}