import ds/tree;

export {
	IconicFont(caption : string, family : string, iconsMap : Tree<string, IconicFontIcon>);
		IconicFontIcon(name : string, glyph : int, htmlTag : string, group : string);

	materialIcons = IconicFont("Material Icons", "MaterialIcons", makeTree());

	makeIconicFont(caption : string, family : string, icons : [IconicFontIcon]) -> IconicFont;

	// Returns list of all icons defined in the font
	getIconicFontIconNames(font : IconicFont) -> [string];
	// Tests if the iconName defined in the font
	isIconicFontIcon(font : IconicFont, iconName : string) -> bool;
	// Returns first available icon defined in the font
	getIconicFontDefaultIconName(font : IconicFont) -> string;
	// returns icons grouped by their group name
	getIconicFontIconGroups(font : IconicFont) -> [Pair<string, [string]>];
	// returns icon glyph for given icon name or font's default icon if icon not found
	getIconicFontGlyph(font : IconicFont, iconName : string) -> int;
	// returns icon html tag for given icon name or font's default icon if icon not found
	getIconicFontHtmlTag(font : IconicFont, iconName : string) -> string;

	setWigiIconicFonts(fonts : [IconicFont]) -> void;
	getWigiIconicFonts() -> [IconicFont];

	// Find defined font byt family name or returns materialIcons if not found
	getIconicFontByFamily(family : string) -> IconicFont;
}

wigiIconicFonts : ref [IconicFont] = ref [];

setWigiIconicFonts(fonts : [IconicFont]) -> void {
	wigiIconicFonts := fonts;
}

getWigiIconicFonts() -> [IconicFont] {
	concat([materialIcons], ^wigiIconicFonts);
}

makeIconicFont(caption : string, family : string, icons : [IconicFontIcon]) -> IconicFont {
	IconicFont(caption, family, pairs2tree(map(icons, \icon -> Pair(icon.name, icon))));
}

getIconicFontGlyph(font : IconicFont, iconName : string) -> int {
	eitherFn(lookupTree(font.iconsMap, iconName),
		\icon -> icon.glyph,
		\ -> if (font.iconsMap == TreeEmpty()) 0 else getIconicFontGlyph(font, getIconicFontDefaultIconName(font))
	)
}

getIconicFontHtmlTag(font : IconicFont, iconName : string) -> string {
	eitherFn(lookupTree(font.iconsMap, iconName),
		\icon -> icon.htmlTag,
		\ -> if (font.iconsMap == TreeEmpty()) "" else getIconicFontHtmlTag(font, getIconicFontDefaultIconName(font))
	)
}

getIconicFontIconNames(font : IconicFont) -> [string] {
	getTreeKeys(font.iconsMap);
}

isIconicFontIcon(font : IconicFont, iconName : string) -> bool {
	containsKeyTree(font.iconsMap, iconName);
}

getIconicFontDefaultIconName(font : IconicFont) -> string {
	names = getIconicFontIconNames(font);
	if (names == []) "" else names[0];
}

getIconicFontIconGroups(font : IconicFont) -> [Pair<string, [string]>] {
	groupsTree = foldTree(font.iconsMap, makeTree(), \name, icon : IconicFontIcon, acc : Tree<string, [string]> -> treePushToArrayValue(acc, icon.group, name));
	foldTree(groupsTree, [], \groupName, iconsInGroup, acc : [Pair<string, [string]>] -> arrayPush(acc, Pair(groupName, iconsInGroup)));
}

getIconicFontByFamily(family : string) -> IconicFont {
	fonts = getWigiIconicFonts();
	findDef(fonts, \f -> f.family == family, fonts[0]);
}
