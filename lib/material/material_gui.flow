import material/material;

export {
	// Bunch of helpers to inspect sizes. Consider using MInspect also.

	MAttachBox(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material;
	MAttachWidth(m : Material, width : DynamicBehaviour<double>) -> Material;
	MAttachHeight(m : Material, height : DynamicBehaviour<double>) -> Material;
	MAttachWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material;

	MAttachAvailable(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material;
	MAttachAvailableWidth(m : Material, width : DynamicBehaviour<double>) -> Material;
	MAttachAvailableHeight(m : Material, height : DynamicBehaviour<double>) -> Material;
	MAttachAvailableWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material;

	// Inspects m, draws content
	MAttachBox2(m : Material, box : DynamicBehaviour<WidthHeight>, content : Material) -> Material;
	MAttachWidth2(m : Material, width : DynamicBehaviour<double>, content : Material) -> Material;
	MAttachHeight2(m : Material, height : DynamicBehaviour<double>, content : Material) -> Material;

	// Special cases to inspect
	MAttachBoxThrottle(m : Material, box : DynamicBehaviour<WidthHeight>, maxDelta : int) -> Material;

	MThrottleMetrics(m : Material, maxDelta : int) -> Material;

	// Helpers to set available for only width, only height, or both
	MAvailableWidth(m : Material, available : Transform<double>) -> Material;
	MAvailableHeight(m : Material, available : Transform<double>) -> Material;
	MAvailableWidthHeight(m : Material, width : Transform<double>, height : Transform<double>) -> Material;

	// MAlign helpers

	MAlignStart(m : Material) -> Material; // Align left if LTR, align right if RTL
	MAlignEnd(m : Material) -> Material;   // Align right if LTR, align left if RTL
	MAlignLeft(m : Material) -> Material;
	MAlignTop(m : Material) -> Material;
	MAlignRight(m : Material) -> Material;
	MAlignBottom(m : Material) -> Material;

	MAlignTopLeft(m : Material) -> Material;
	MAlignTopCenter(m : Material) -> Material;
	MAlignTopRight(m : Material) -> Material;
	MAlignCenterRight(m : Material) -> Material;
	MAlignBottomRight(m : Material) -> Material;
	MAlignBottomCenter(m : Material) -> Material;
	MAlignBottomLeft(m : Material) -> Material;
	MAlignCenterLeft(m : Material) -> Material;

	// MBorder helpers

	// MBorder with equal borders on all 4 sides
	MBorder4(border : double, m : Material) -> Material;

	MBorderTop(border : double) -> (Material) -> Material;
	MBorderBottom(border : double) -> (Material) -> Material;
	MBorderLeft(border : double) -> (Material) -> Material;
	MBorderRight(border : double) -> (Material) -> Material;
	MBorderStart(border : double) -> (Material) -> Material;
	MBorderEnd(border : double) -> (Material) -> Material;

	MBorderTopBottom(border : double) -> (Material) -> Material;
	MBorderLeftRight(border : double) -> (Material) -> Material;

	// Dynamic version of MBorder
	MBorderT(left : Transform<double>, top : Transform<double>, right : Transform<double>, bottom : Transform<double>, m : Material) -> Material;

	// MDebug helpers

	// MDebug that shows metrics on top of the material
	MDebugMetrics(c : int, m : Material) -> Material;
	MDebugPositionScale(c : int, m : Material) -> Material;
	MDebugViewBounds(c : int, m : Material) -> Material;
	MDebugConstruct(tag : string, m : Material) -> Material;

	// MGroup with zero metrics
	// Useful inside complicated components with lots of layers, metrics of which aren't used
	MGroupWithoutMetrics(g : [Material]) -> Material;
	MGroup2WithoutMetrics(g1 : Material, g2 : Material) -> Material {MGroupWithoutMetrics([g1, g2])};
	// MGroup that has metrics of the first Material
	MGroupSameMetrics(g : [Material]) -> Material;
	MGroup2SameMetrics(g1 : Material, g2 : Material) -> Material {MGroupSameMetrics([g1, g2])};

	MFixed(x : double, y : double) -> Material {TFixed(x, y)};
	MFixedX(x : double) -> Material {TFixed(x, 0.)};
	MFixedY(y : double) -> Material {TFixed(0., y)};

	MFillXY() -> Material {TFillXY()};
	MFillX() -> Material {TFillX()};
	MFillY() -> Material {TFillY()};
	MFillXH(h: double) -> Material {TFillXH(h)};
	MFillWY(w: double) -> Material {TFillWY(w)};

	MSelect2(v1 : Transform<?>, v2 : Transform<??>, fn : (?, ??) -> Material) -> Material;
	MSelect3(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, fn : (?, ??, ???) -> Material) -> Material;
	MSelect4(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, fn : (?, ??, ???, ????) -> Material) -> Material;
	MSelect5(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, v5 : Transform<?????>, fn : (?, ??, ???, ????, ?????) -> Material) -> Material;

	MSelectConstantMetrics(value : Transform<?>, fn : (?) -> Material) -> Material;

	// Copies size of content to copyFn, copyFn result has no effect on overall metrics
	// If above is true result of copyFn is placed on top of content
	// Useful when you need to place TInteractive above or below another one
	MCopySize(content : Material, copyFn : (Tropic) -> Material, above : bool) -> Material;
	// Similar to MCopySize, only resulting material has metrics of copyFn
	// copyFn has two parameters: size of the content, and content itself
	MCopySize2(content : Material, copyFn : (Tropic, Material) -> Material) ->  Material;

	MProportionGrid(c : [[Pair<Transform<Factor>, Material>]]) -> Material;
	MProportionLines(c : [Pair<Transform<double>, Material>]) -> Material;
	MProportionCols(c : [Pair<Transform<double>, Material>]) -> Material;
	MProportionBaselineCols(c : [Pair<Transform<double>, Material>]) -> Material;
	MProportionColsA(c : [Pair<Transform<double>, Material>]) -> Material;

	// Common helpers of centering a number of tropics
	MColsXCenter(cols : [Material]) -> Material;
	MColsYCenter(cols : [Material]) -> Material;
	MBaselineColsXCenter(cols : [Material]) -> Material;
	MBaselineColsYCenter(cols : [Material]) -> Material;
	MColsYCenterA(cols : [Material]) -> Material;
	MLinesXCenter(lines : [Material]) -> Material;
	MLinesYCenter(lines : [Material]) -> Material;
	MBaselineLinesXCenter(lines : [Material]) -> Material;
	MBaselineLinesYCenter(lines : [Material]) -> Material;
	// Deprecated. Use MColsYCenter instead.
	MColsCenterY(items : [Material]) -> Material {MColsYCenter(items)};

	// Common helpers for creating groups of elements with the same available width or height
	MColsSameWidth(cols : [Material]) -> Material;
	MColsSameHeight(cols : [Material]) -> Material;
	MLinesSameWidth(lines : [Material]) -> Material;
	MLinesSameHeight(lines : [Material]) -> Material;

	// if the content fits in the box then it returns the content
	// if the content does not fit then it returns a zoomed out content
	// the final metrics is a metrics of the final content
	MZoomToFit(content : Material, box : Material) -> Material;
	MScaleXY(factor : double) -> (Material) -> Material;
	// Helpers for turning Material
	MRotate90(m : Material) -> Material;
	MRotate90Left(m : Material) -> Material;

	MCropWidth(content : Material, width : Material) -> Material;
	MCropHeight(content : Material, height : Material) -> Material;

	MEvenGrid(content : [[Material]]) -> Material;

	// Returns material with its minimum metrics
	MMinimumMetrics(content : Material) -> Material;
	MRemoveMinMetrics(content : Material) -> Material;
	MFixSizeKeepBaseline(m : Material, size : Material) -> Material;
	MBaseline(baseline : Transform<double>, m : Material) -> Material;

	// Dynamic version of MFrame
	MFrameT(margin : Transform<double>, radius : Transform<double>, style : [TGraphicsStyle], box : Material) -> Material;

	// Helper for dynamic text
	MDynamicText(text : Transform<string>, style : [MTextStyle]) -> Material;

	// Show text and progressbar below
 	MLoading(text : string) -> Material;

	// Simplified version of MTransformTAcc
	MTransformTAcc2(fn : ((Material) -> TAcc) -> TAcc) -> Material;

	// Hide tropic if available size is less than material metrics
	MIfFits(m : Material) -> Material;

	MConstructRenderable(constructors : [() -> () -> void], m : Material) -> Material;

	// Zoom material if its metrics are bigger than maxWH
	MZoomMax(m : Material, maxWH : Transform<WidthHeight>) -> Material;
	// Zoom material if its width is bigger than maxWidth
	MZoomMaxWidth(m : Material, maxWidth : Transform<double>) -> Material;
	// Zoom material if its height is bigger than maxHeight
	MZoomMaxHeight(m : Material, maxHeight : Transform<double>) -> Material;

	// Helpers to make Material not transparent for events
	disableMMouseWheelBelow(content : Material) -> Material;
	disableMInteractivesBelow(content : Material) -> Material;

	MMouseWheelInteractive(m : Material, deltaX : (double) -> bool, deltaY : (double) -> bool) -> Material;

	M3DStage(wh : Transform<WidthHeight>, scene : F3DObject, camera : F3DObject, style : [F3DStageStyle]) -> Material;
}

// Inner helpers
// DO NOT EXPORT

Material2Tropic(m : Material, fn : (tr : Tropic) -> Tropic) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> fn(m2t(m, p))))
}

Material2Tropic2(m1 : Material, m2 : Material, fn : (tr1 : Tropic, tr2 : Tropic) -> Tropic) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> fn(m2t(m1, p), m2t(m2, p))))
}

Material2TropicA(m : [Material], fn : (tr : [Tropic]) -> Tropic) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> fn(map(m, \_m -> m2t(_m, p)))))
}

MGroupWithoutMetrics(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TGroupWithoutMetrics(tr))
}

MGroupSameMetrics(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TGroupSameMetrics(tr))
}

MMinimumMetrics(m : Material) -> Material {
	Material2Tropic(m, \tr -> TMinimumMetrics(tr))
}

MSelect2(v1 : Transform<?>, v2 : Transform<??>, fn : (?, ??) -> Material) -> Material {
	t = fselect2(v1, v2, FLift2(fn));

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MSelect3(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, fn : (?, ??, ???) -> Material) -> Material {
	t = fselect3(v1, v2, v3, fn);

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MSelect4(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, fn : (?, ??, ???, ????) -> Material) -> Material {
	t = fselect4(v1, v2, v3, v4, fn);

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MSelect5(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, v5 : Transform<?????>, fn : (?, ??, ???, ????, ?????) -> Material) -> Material {
	t = fselect5(v1, v2, v3, v4, v5, fn);

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MCopySize(content : Material, copyFn : (Tropic) -> Material, above : bool) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t ->  TCopySize(m2t(content, p), \sz -> m2t(copyFn(sz), p), above)))
}

MCopySize2(content : Material, copyFn : (Tropic, Material) -> Material) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t ->  TCopySize2(m2t(content, p), \sz, tr -> m2t(copyFn(sz, tr), p))))
}

MTransformTAcc2(fn : ((Material) -> TAcc) -> TAcc) -> Material {
	MTransformTAcc(\t2a, p, s, mo -> fn(\mat -> t2a(mat, p, s, mo)))
}

MAttachBox(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material {
	Material2Tropic(m, \tr -> TAttachBox(tr, box));
}

MAttachWidth(m : Material, width : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachWidth(tr, width));
}

MAttachHeight(m : Material, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachHeight(tr, height));
}

MAttachWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachWidthHeight(tr, width, height));
}

MAttachAvailable(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailable(tr, box));
}

MAttachAvailableWidth(m : Material, width : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailableWidth(tr, width));
}

MAttachAvailableHeight(m : Material, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailableHeight(tr, height));
}

MAttachAvailableWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailableWidthHeight(tr, width, height));
}

MAttachBox2(m : Material, box : DynamicBehaviour<WidthHeight>, c : Material) -> Material {
	Material2Tropic2(m, c, \tr1, tr2 -> TAttachBox2(tr1, box, tr2));
}

MAttachWidth2(m : Material, width : DynamicBehaviour<double>, c : Material) -> Material {
	Material2Tropic2(m, c, \tr1, tr2 -> TAttachWidth2(tr1, width, tr2));
}

MAttachHeight2(m : Material, height : DynamicBehaviour<double>, c : Material) -> Material {
	Material2Tropic2(m, c, \tr1, tr2 -> TAttachHeight2(tr1, height, tr2));
}

MAttachBoxThrottle(m : Material, box : DynamicBehaviour<WidthHeight>, maxDelta : int) -> Material {
	Material2Tropic(m, \tr -> TAttachBoxThrottle(tr, box, maxDelta));
}

MThrottleMetrics(m : Material, maxDelta : int) -> Material {
	Material2Tropic(m, \tr -> TThrottleMetrics(tr, maxDelta));
}

MProportionGrid(c : [[Pair<Transform<Factor>, Material>]]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionGrid(map(c, \r -> map(r, \pr -> Pair(pr.first, m2t(pr.second, p)))))))
}

MProportionLines(c : [Pair<Transform<double>, Material>]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionLines(map(c, \pr -> Pair(pr.first, m2t(pr.second, p))))))
}

MProportionCols(c : [Pair<Transform<double>, Material>]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionCols(map(c, \pr -> Pair(pr.first, m2t(pr.second, p))))))
}

MProportionBaselineCols(c : [Pair<Transform<double>, Material>]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionBaselineCols(map(c, \pr -> Pair(pr.first, m2t(pr.second, p))))))
}

MProportionColsA(c : [Pair<Transform<double>, Material>]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionColsA(map(c, \pr -> Pair(pr.first, m2t(pr.second, p))))))
}

MSizedWidth(width : Transform<double>, height : double) -> Material {
	TSizedWidth(width, height);
}

MSizedHeight(width : double, height : Transform<double>) -> Material {
	TSizedHeight(width, height);
}

MColsXCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsXCenter(tr))
}

MColsYCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsYCenter(tr))
}

MBaselineColsXCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TBaselineColsXCenter(tr))
}

MBaselineColsYCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TBaselineColsYCenter(tr))
}

MColsYCenterA(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsYCenterA(tr))
}

MLinesXCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TLinesXCenter(tr))
}

MLinesYCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TLinesYCenter(tr))
}

MBaselineLinesXCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TBaselineLinesXCenter(tr))
}

MBaselineLinesYCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TBaselineLinesYCenter(tr))
}

MColsSameWidth(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsSameWidth(tr))
}

MColsSameHeight(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsSameHeight(tr))
}

MLinesSameWidth(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TLinesSameWidth(tr))
}

MLinesSameHeight(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TLinesSameHeight(tr))
}

MEvenGrid(content : [[Material]]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TEvenGrid(map(content, \c -> map(c, \i -> m2t(i, p))))))
}

MSelectConstantMetrics(value : Transform<?>, fn : (?) -> Material) -> Material {
	MTransformTAcc(\t2a, pi, ss, mo -> {
		bf = t2a(MMutable(fselect(value, FLift(fn))), pi, ss, mo);

		wd = bf.metrics.width |> fgetValue |> const;
		hgt = bf.metrics.height |> fgetValue |> const;

		TAcc(
			bf.form,
			TFormMetrics(
				wd,
				hgt,
				if (bf.yConstant) bf.metrics.baseline |> fgetValue |> const else bf.metrics.baseline
			),
			if (bf.xConstant) wd else bf.minWidth,
			if (bf.yConstant) hgt else bf.minHeight,
			if (bf.xConstant) wd else bf.maxWidth,
			if (bf.yConstant) hgt else bf.maxHeight,
			if (bf.xConstant) zero else bf.xFillers,
			if (bf.yConstant) zero else bf.yFillers,
			bf.addFillers,
			bf.xConstant,
			bf.yConstant,
			bf.disposers
		)
	})
}

MAvailableWidth(m : Material, available : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TAvailableWidth(tr, available))
}

MAvailableHeight(m : Material, available : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TAvailableHeight(tr, available))
}

MAvailableWidthHeight(m : Material, width : Transform<double>, height : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TAvailableWidthHeight(tr, width, height))
}

MZoomToFit(content : Material, box : Material) -> Material {
	cwh = makeWH();
	bwh = makeWH();
	scale = fselect2(cwh, bwh, FLift2(\c, b ->
		if (c.width <= b.width && c.height <= b.height)
			Factor(1.0, 1.0)
		else if (c.width == 0.0 || c.height == 0.0)
			Factor(0.0, 0.0)
		else
			min(b.width / c.width, b.height / c.height)
			|> (\fc -> Factor(fc, fc))
	));

	MGroup2(
		MScale(scale, MInspect([ISize(cwh)], content)),
		MFixSize(MInspect([ISize(bwh)], MVisible(make(false), box)), TEmpty())
	)
}

MScaleXY(factor : double) -> (Material) -> Material {
	\m -> MScale(ffactor2(const(factor)), m)
}

MCropWidth(content : Material, width : Material) -> Material {
	MLet("content", content, MCropSize(MGroup2(MHeightOf(MGhost("content")), MWidthOf(width)), MDisplay("content")));
}

MCropHeight(content : Material, height : Material) -> Material {
	MLet("content", content, MCropSize(MGroup2(MWidthOf(MGhost("content")), MHeightOf(height)), MDisplay("content")));
}

MRemoveMinMetrics(content : Material) -> Material {
	MTransformTAcc(\t2a, pi, ss, mo -> {
		bf = t2a(content, pi, ss, mo);
		TAcc(bf with
			minWidth = bf.metrics.width,
			minHeight = bf.metrics.height,
			maxWidth = bf.metrics.width,
			maxHeight = bf.metrics.height,
			xFillers = zero,
			yFillers =  zero,
		)
	})
}

MAlignStart(m : Material) -> Material {
	if (getDefaultRtl()) MAlignRight(m) else m
}

MAlignEnd(m : Material) -> Material {
	if (!getDefaultRtl()) MAlignRight(m) else m
}

MAlignLeft(m : Material) -> Material {
	MTweak([TAlign(const(0.0), const(0.0))], m, TFillX())
}

MAlignTop(m : Material) -> Material {
	MTweak([TAlign(const(0.0), const(0.0))], m, TFillY())
}

MAlignRight(m : Material) -> Material {
	MTweak([TAlign(const(1.0), const(0.0))], m, TFillX())
}

MAlignBottom(m : Material) -> Material {
	MTweak([TAlign(const(0.0), const(1.0))], m, TFillY())
}

MAlignTopLeft(m : Material) -> Material {
	MTweak([TAlign(const(0.0), const(0.0))], m, TFillXY())
}

MAlignTopCenter(m : Material) -> Material {
	MTweak([TAlign(const(0.5), const(0.0))], m, TFillXY())
}

MAlignTopRight(m : Material) -> Material {
	MTweak([TAlign(const(1.0), const(0.0))], m, TFillXY())
}

MAlignCenterRight(m : Material) -> Material {
	MTweak([TAlign(const(1.0), const(0.5))], m, TFillXY())
}

MAlignBottomRight(m : Material) -> Material {
	MTweak([TAlign(const(1.0), const(1.0))], m, TFillXY())
}

MAlignBottomCenter(m : Material) -> Material {
	MTweak([TAlign(const(0.5), const(1.0))], m, TFillXY())
}

MAlignBottomLeft(m : Material) -> Material {
	MTweak([TAlign(const(0.0), const(1.0))], m, TFillXY())
}

MAlignCenterLeft(m : Material) -> Material {
	MTweak([TAlign(const(0.0), const(0.5))], m, TFillXY())
}

MBorderTop(border : double) -> (Material) -> Material {
	\m -> MBorder(0., border, 0., 0., m)
}

MBorderBottom(border : double) -> (Material) -> Material {
	\m -> MBorder(0., 0., 0., border, m)
}

MBorderLeft(border : double) -> (Material) -> Material {
	\m -> MBorder(border, 0., 0., 0., m)
}

MBorderRight(border : double) -> (Material) -> Material {
	\m -> MBorder(0., 0., border, 0., m)
}

MBorderStart(border : double) -> (Material) -> Material {
	\m -> MBorderA(border, 0., 0., 0., m)
}

MBorderEnd(border : double) -> (Material) -> Material {
	\m -> MBorderA(0., 0., border, 0., m)
}

MBorderTopBottom(border : double) -> (Material) -> Material {
	\m -> MBorder(0., border, 0., border, m)
}

MBorderLeftRight(border : double) -> (Material) -> Material {
	\m -> MBorder(border, 0., border, 0., m)
}

MFixSizeKeepBaseline(m : Material, size : Material) -> Material {
	MTransformTAcc(\t2a, pi, ss, mo -> {
		bf = t2a(m, pi, ss, mo);
		sf = t2a(size, pi, ss, mo);

		TAcc(
			bf.form,
			TFormMetrics(
				sf.metrics.width,
				sf.metrics.height,
				bf.metrics.baseline
			),
			sf.minWidth,
			sf.minHeight,
			sf.maxWidth,
			sf.maxHeight,
			sf.xFillers,
			sf.yFillers,
			sf.addFillers,
			sf.xConstant,
			sf.yConstant && isFConst(bf.metrics.baseline),
			sf.disposers
		)
	})
}

MBaseline(baseline : Transform<double>, m : Material) -> Material {
	Material2Tropic(m, \tr -> TBaseline(baseline, tr))
}

MBorderT(left : Transform<double>, top : Transform<double>, right : Transform<double>, bottom : Transform<double>, m : Material) -> Material {
	Material2Tropic(m, \tr -> TBorderT(left, top, right, bottom, tr))
}

MFrameT(margin : Transform<double>, radius : Transform<double>, style : [TGraphicsStyle], box : Material) -> Material {
	Material2Tropic(box, \tr -> TFrameT(margin, radius, style, tr))
}

MDynamicText(text : Transform<string>, style : [MTextStyle]) -> Material {
	MSelect(text, \txt -> if (txt == "") TEmpty() else MText(txt, style))
}

MLoading(text : string) -> Material {
	label = MText(text, [])
		|> MCenterX
		|> MBorderLeftRight(8.);

	MAvailable(
		MGroup2(
			MZoomToFill(MProgressBar([MBlue(200), MProgressBackgroundColor(MWhite()), WidthHeight(100.0, 10.0)]), TFillXY(), false) |> MCenterX,
			TDisplay("Label") |> MCenterX
		),
		TGhost("Label")
	)
	|> (\m -> MLet("Label", label, m))
}

MDebugMetrics(c : int, m : Material) -> Material {
	Material2Tropic(m, \tr -> TDebugMetrics(c, tr))
}

MDebugPositionScale(c : int, m : Material) -> Material {
	Material2Tropic(m, \tr -> TDebugPositionScale(c, tr))
}

MDebugViewBounds(c : int, m : Material) -> Material {
	Material2Tropic(m, \tr -> TDebugViewBounds(c, tr))
}

MDebugConstruct(tag : string, m : Material) -> Material {
	Material2Tropic(m, \tr -> TDebugConstruct(tag, tr))
}

MBorder4(border : double, m : Material) -> Material {
	Material2Tropic(m, \tr -> TBorder4(border, tr))
}

MRotate90(m : Material) -> Material {
	Material2Tropic(m, TRotate90)
}

MRotate90Left(m : Material) -> Material {
	Material2Tropic(m, TRotate90Left)
}

MIfFits(m : Material) -> Material {
	Material2Tropic(m, \tr -> TIfFits(tr))
}

MConstructRenderable(constructors : [() -> () -> void], m : Material) -> Material {
	Material2Tropic(m, \tr -> TConstructRenderable(constructors, tr));
}

MZoomMax(m : Material, maxWH : Transform<WidthHeight>) -> Material {
	Material2Tropic(m, \tr -> TZoomMax(tr, maxWH))
}

MZoomMaxWidth(m : Material, maxWidth : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TZoomMaxWidth(tr, maxWidth))
}

MZoomMaxHeight(m : Material, maxHeight : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TZoomMaxHeight(tr, maxHeight))
}

disableMMouseWheelBelow(m : Material) -> Material {
	Material2Tropic(m, disableMouseWheelBelow)
}

disableMInteractivesBelow(m : Material) -> Material {
	Material2Tropic(m, disableInteractivesBelow)
}

MMouseWheelInteractive(m : Material, deltaX : (double) -> bool, deltaY : (double) -> bool) -> Material {
	MGetManager(\manager -> Material2Tropic(m, \tr -> TMouseWheelInteractive(manager.manager, tr, deltaX, deltaY)));
}

M3DStage(wh : Transform<WidthHeight>, scene : F3DObject, camera : F3DObject, style : [F3DStageStyle]) -> Material {
	T3DStage(wh, scene, camera, style);
}