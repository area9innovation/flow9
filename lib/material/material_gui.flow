import material/material;
import tropic/tropic_gui;

export {

	// Bunch of helpers to inspect sizes
	
	MAttachBox(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material;
	MAttachWidth(m : Material, width : DynamicBehaviour<double>) -> Material;
	MAttachHeight(m : Material, height : DynamicBehaviour<double>) -> Material;
	MAttachWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material;

	MAttachAvailable(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material;
	MAttachAvailableWidth(m : Material, width : DynamicBehaviour<double>) -> Material;
	MAttachAvailableHeight(m : Material, height : DynamicBehaviour<double>) -> Material;
	MAttachAvailableWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material;

	// Inspects m, draws content
	MAttachBox2(m : Material, box : DynamicBehaviour<WidthHeight>, content : Material) -> Material;
	MAttachWidth2(m : Material, width : DynamicBehaviour<double>, content : Material) -> Material;
	MAttachHeight2(m : Material, height : DynamicBehaviour<double>, content : Material) -> Material;

	// Special cases to inspect
	MAttachBoxThrottle(m : Material, box : DynamicBehaviour<WidthHeight>, maxDelta : int) -> Material;

	// MGroup with zero metrics
	// Useful inside complicated components with lots of layers, metrics of which aren't used
	MGroupWithoutMetrics(g : [Material]) -> Material;
	MGroup2WithoutMetrics(g1 : Material, g2 : Material) -> Material {MGroupWithoutMetrics([g1, g2])};
	// MGroup that has metrics of the first Material
	MGroupSameMetrics(g : [Material]) -> Material;
	MGroup2SameMetrics(g1 : Material, g2 : Material) -> Material {MGroupSameMetrics([g1, g2])};

	// Returns material with its minimum metrics
	MMinimumMetrics(content : Material) -> Material;

	MFixed(x : double, y : double) -> Material {TFixed(x, y)};
	MFixedX(x : double) -> Material {TFixed(x, 0.)};
	MFixedY(y : double) -> Material {TFixed(0., y)};

	MFillXY() -> Material {TFillXY()};
	MFillX() -> Material {TFillX()};
	MFillY() -> Material {TFillY()};
	MFillXH(h: double) -> Material {TFillXH(h)};
	MFillWY(w: double) -> Material {TFillWY(w)};

	MSelect2(v1 : Transform<?>, v2 : Transform<??>, fn : (?, ??) -> Material) -> Material;
	MSelect3(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, fn : (?, ??, ???) -> Material) -> Material;
	MSelect4(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, fn : (?, ??, ???, ????) -> Material) -> Material;
	MSelect5(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, v5 : Transform<?????>, fn : (?, ??, ???, ????, ?????) -> Material) -> Material;

	MSelectConstantMetrics(value : Transform<?>, fn : (?) -> Material) -> Material;

	// Copies size of content to copyFn, copyFn result has no effect on overall metrics
	// If above is true result of copyFn is placed on top of content
	// Useful when you need to place TInteractive above or below another one
	MCopySize(content : Material, copyFn : (Tropic) -> Material, above : bool) -> Material;
	// Similar to MCopySize, only resulting material has metrics of copyFn
	// copyFn has two parameters: size of the content, and content itself
	MCopySize2(content : Material, copyFn : (Tropic, Material) -> Material) ->  Material;

	// Simplified version of MTransformTAcc
	MTransformTAcc2(fn : ((Material) -> TAcc) -> TAcc) -> Material;

	MProportionGrid(c : [[Pair<Transform<Factor>, Material>]]) -> Material;
	MProportionLines(c : [Pair<Transform<double>, Material>]) -> Material;
	MProportionCols(c : [Pair<Transform<double>, Material>]) -> Material;

	MProportionColsA(c : [Pair<Transform<double>, Material>]) -> Material;

	// Common helpers of centering a number of tropics
	MColsYCenter(cols : [Material]) -> Material;
	MColsYCenterA(cols : [Material]) -> Material;
	MLinesXCenter(lines : [Material]) -> Material;

	// Common helpers for creating groups of elements with the same available width or height
	MColsSameHeight(cols : [Material]) -> Material;
	MLinesSameWidth(lines : [Material]) -> Material;

	TEvenGrid(content : [[Tropic]]) -> Tropic;
	MEvenGrid(content : [[Material]]) -> Material;

	// Helpers to set available for only width, only height, or both
	MAvailableWidth(m : Material, available : Transform<double>) -> Material;
	MAvailableHeight(m : Material, available : Transform<double>) -> Material;
	MAvailableWidthHeight(m : Material, width : Transform<double>, height : Transform<double>) -> Material;

	MCropWidth(content : Material, width : Material) -> Material;
	MCropHeight(content : Material, height : Material) -> Material;

	// if the content fits in the box then it returns the content
	// if the content does not fit then it returns a zoomed out content
	// the final metrics is a metrics of the final content
	MZoomToFit(content : Material, box : Material) -> Material;
	MScaleXY(factor : double) -> (Material) -> Material;

	MRemoveMinMetrics(content : Material) -> Material;

	MBorderTop(border : double) -> (Material) -> Material;
	MBorderBottom(border : double) -> (Material) -> Material;
	MBorderLeft(border : double) -> (Material) -> Material;
	MBorderRight(border : double) -> (Material) -> Material;
	MBorderStart(border : double) -> (Material) -> Material;
	MBorderEnd(border : double) -> (Material) -> Material;

	MBorderTopBottom(border : double) -> (Material) -> Material;
	MBorderLeftRight(border : double) -> (Material) -> Material;

	MFixSizeKeepBaseline(m : Material, size : Material) -> Material;
	MBaseline(baseline : Transform<double>, m : Material) -> Material;

	// Align items in the common Y-center.
	// Make sure that MBaselineCols can't help you before using MColsCenterY
	MColsCenterY(items : [Material]) -> Material;

	// Dynamic version of MBorder
	MBorderT(left : Transform<double>, top : Transform<double>, right : Transform<double>, bottom : Transform<double>, m : Material) -> Material;

	// Dynamic version of MFrame
	MFrameT(margin : Transform<double>, radius : double, style : [TGraphicsStyle], box : Material) -> Material;

	// Helper for dynamic text
	MDynamicText(text : Transform<string>, style : [MTextStyle]) -> Material;

	// MDebug that shows metrics on top of the material
	MDebugMetrics(c : int, m : Material) -> Material;
	MDebugPositionScale(c : int, m : Material) -> Material;
	MDebugViewBounds(c : int, m : Material) -> Material;

	// MBorder with equal borders on all 4 sides
	MBorder4(border : double, m : Material) -> Material;

	// Helper for turning Material
	MRotate90(m : Material) -> Material;
	MRotate90Left(m : Material) -> Material;

	// Helper for creating dashed or dotted circle
	MDashedCircle(radius : double, dashNumber : int, color : MColor) -> Material;

	// Hide tropic if available size is less than material metrics
	MIfFits(m : Material) -> Material;
}

// Inner helpers
// DO NOT EXPORT

Material2Tropic(m : Material, fn : (tr : Tropic) -> Tropic) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> fn(m2t(m, p))))
}

Material2Tropic2(m1 : Material, m2 : Material, fn : (tr1 : Tropic, tr2 : Tropic) -> Tropic) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> fn(m2t(m1, p), m2t(m2, p))))
}

Material2TropicA(m : [Material], fn : (tr : [Tropic]) -> Tropic) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> fn(map(m, \_m -> m2t(_m, p)))))
}

MGroupWithoutMetrics(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TGroupWithoutMetrics(tr))
}

MGroupSameMetrics(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TGroupSameMetrics(tr))
}

MMinimumMetrics(m : Material) -> Material {
	Material2Tropic(m, \tr -> TMinimumMetrics(tr))
}

MSelect2(v1 : Transform<?>, v2 : Transform<??>, fn : (?, ??) -> Material) -> Material {
	t = fselect2(v1, v2, FLift2(fn));

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MSelect3(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, fn : (?, ??, ???) -> Material) -> Material {
	t = fselect3(v1, v2, v3, fn);

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MSelect4(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, fn : (?, ??, ???, ????) -> Material) -> Material {
	t = fselect4(v1, v2, v3, v4, fn);

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MSelect5(v1 : Transform<?>, v2 : Transform<??>, v3 : Transform<???>, v4 : Transform<????>, v5 : Transform<?????>, fn : (?, ??, ???, ????, ?????) -> Material) -> Material {
	t = fselect5(v1, v2, v3, v4, v5, fn);

	if (isFConst(t)) {
		// If we are constant, let's avoid the mutable altogether
		fgetValue(t)
	} else {
		MMutable(t);
	}
}

MCopySize(content : Material, copyFn : (Tropic) -> Material, above : bool) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t ->  TCopySize(m2t(content, p), \sz -> m2t(copyFn(sz), p), above)))
}

MCopySize2(content : Material, copyFn : (Tropic, Material) -> Material) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t ->  TCopySize2(m2t(content, p), \sz, tr -> m2t(copyFn(sz, tr), p))))
}

MTransformTAcc2(fn : ((Material) -> TAcc) -> TAcc) -> Material {
	MTransformTAcc(\t2a, p, s, mo -> fn(\mat -> t2a(mat, p, s, mo)))
}

MAttachBox(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material {
	Material2Tropic(m, \tr -> TAttachBox(tr, box));
}

MAttachWidth(m : Material, width : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachWidth(tr, width));
}

MAttachHeight(m : Material, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachHeight(tr, height));
}

MAttachWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachWidthHeight(tr, width, height));
}

MAttachAvailable(m : Material, box : DynamicBehaviour<WidthHeight>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailable(tr, box));
}

MAttachAvailableWidth(m : Material, width : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailableWidth(tr, width));
}

MAttachAvailableHeight(m : Material, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailableHeight(tr, height));
}

MAttachAvailableWidthHeight(m : Material, width : DynamicBehaviour<double>, height : DynamicBehaviour<double>) -> Material {
	Material2Tropic(m, \tr -> TAttachAvailableWidthHeight(tr, width, height));
}

MAttachBox2(m : Material, box : DynamicBehaviour<WidthHeight>, c : Material) -> Material {
	Material2Tropic2(m, c, \tr1, tr2 -> TAttachBox2(tr1, box, tr2));
}

MAttachWidth2(m : Material, width : DynamicBehaviour<double>, c : Material) -> Material {
	Material2Tropic2(m, c, \tr1, tr2 -> TAttachWidth2(tr1, width, tr2));
}

MAttachHeight2(m : Material, height : DynamicBehaviour<double>, c : Material) -> Material {
	Material2Tropic2(m, c, \tr1, tr2 -> TAttachHeight2(tr1, height, tr2));
}

MAttachBoxThrottle(m : Material, box : DynamicBehaviour<WidthHeight>, maxDelta : int) -> Material {
	Material2Tropic(m, \tr -> TAttachBoxThrottle(tr, box, maxDelta));
}

MProportionGrid(c : [[Pair<Transform<Factor>, Material>]]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionGrid(map(c, \r -> map(r, \pr -> Pair(pr.first, m2t(pr.second, p)))))))
}

MProportionLines(c : [Pair<Transform<double>, Material>]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionLines(map(c, \pr -> Pair(pr.first, m2t(pr.second, p))))))
}

MProportionCols(c : [Pair<Transform<double>, Material>]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionCols(map(c, \pr -> Pair(pr.first, m2t(pr.second, p))))))
}

MProportionColsA(c : [Pair<Transform<double>, Material>]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TProportionColsA(map(c, \pr -> Pair(pr.first, m2t(pr.second, p))))))
}

MSizedWidth(width : Transform<double>, height : double) -> Material {
	TSizedWidth(width, height);
}

MSizedHeight(width : double, height : Transform<double>) -> Material {
	TSizedHeight(width, height);
}

MColsYCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsYCenter(tr))
}

MColsYCenterA(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsYCenterA(tr))
}

MLinesXCenter(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TLinesXCenter(tr))
}

MColsSameHeight(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TColsSameHeight(tr))
}

MLinesSameWidth(m : [Material]) -> Material {
	Material2TropicA(m, \tr -> TLinesSameWidth(tr))
}

TEvenGrid(content : [[Tropic]]) -> Tropic {
	if (length(content) > 0 && length(content[0]) > 0)
		TransformTAcc(\t2a, p, s, mo -> {
			maxX = p.maxX;
			maxY = p.maxY;

			columnWidths = generate(0, either(maxA(map(content, length)), 0), \__ -> make(0.));
			rowHeights = generate(0, length(content), \__ -> make(0.));

			translatesX = generate(0, length(columnWidths), \__ -> make(0.));
			translatesY = generate(0, length(rowHeights), \__ -> make(0.));

			contentAcc =
				mapi(content, \j, c -> mapi(c, \i, tr ->
					t2a(
						tr,
						TParentInfo(
							columnWidths[i],
							rowHeights[j],
							p.environment,
							fworldtransform(p.transformMatrix, fpoint2transform(fpoint(translatesX[i], translatesY[j]))),
							p.worldVisible,
							p.viewBounds
						),
						s,
						mo
					)
				));
			form =
				FGroup(
					mapi(contentAcc, \j, c -> mapi(c, \i, tacc -> FTranslate(translatesX[i], translatesY[j], tacc.form))) |> concatA,
					true
				);
			disp = concatA(map(concatA(contentAcc), \tacc -> tacc.disposers));

			minWidths = generate(0, length(columnWidths), \i -> fmaxA(map(contentAcc, \c -> if (i < length(c)) c[i].minWidth else zero), 0.)) |> fmerge;
			minHeights = map(contentAcc, \c -> fmaxA(map(c, \tacc -> tacc.minHeight), 0.)) |> fmerge;
			maxWidths = generate(0, length(columnWidths), \i -> fmaxA(map(contentAcc, \c -> if (i < length(c)) c[i].maxWidth else zero), 0.)) |> fmerge;
			maxHeights = map(contentAcc, \c -> fmaxA(map(c, \tacc -> tacc.maxHeight), 0.)) |> fmerge;
			xFillers = generate(0, length(columnWidths), \i -> fmaxA(map(contentAcc, \c -> if (i < length(c)) c[i].xFillers else zero), 0.)) |> fmerge;
			yFillers = map(contentAcc, \c -> fmaxA(map(c, \tacc -> tacc.yFillers), 0.)) |> fmerge;

			realWidths = generate(0, length(columnWidths), \i -> fmaxA(map(contentAcc, \c -> if (i < length(c)) c[i].minWidth else zero), 0.));
			realHeights = map(contentAcc, \c -> fmaxA(map(c, \tacc -> tacc.metrics.height), 0.));

			uns1 =
				make4Subscribe(minWidths, maxWidths, maxX, xFillers, \minW, maxW, mx, xf -> {
					wd = ref 0.;

					iteri(distributeSizesEvenly2(minW, maxW, map(columnWidths, getValue), xf, max(mx, dsum(minW))), \i, nw -> {
						nextDistinct(translatesX[i], ^wd);
						wd := ^wd + nw;
						nextDistinct(columnWidths[i], nw);
					})
				})();

			uns2 =
				make4Subscribe(minHeights, maxHeights, maxY, yFillers, \minH, maxH, my, yf -> {
					hgt = ref 0.;

					iteri(distributeSizesEvenly2(minH, maxH, map(rowHeights, getValue), yf, max(my, dsum(minH))), \i, nh -> {
						nextDistinct(translatesY[i], ^hgt);
						hgt := ^hgt + nh;
						nextDistinct(rowHeights[i], nh);
					})
				})();

			TAcc(
				form,
				TFormMetrics(
					fsum(realWidths),
					fsum(realHeights),
					zero
				),
				fselect(minWidths, FLift(dsum)),
				fselect(minHeights, FLift(dsum)),
				fselect(maxWidths, FLift(dsum)),
				fselect(maxHeights, FLift(dsum)),
				fselect(xFillers, FLift(dsum)),
				fselect(yFillers, FLift(dsum)),
				const(false),
				false,
				false,
				concatA([disp, [uns1, uns2]])
			)
		})
	else
		TEmpty()
}

distributeSizesEvenly2(minWidths : [double], maxWidths : [double], columnWidths0 : [double], xFillers : [double], availableWidth : double) -> [double] {
	columnsCount = either(minA([length(minWidths), length(maxWidths), length(columnWidths0)]), 0);

	additionThreshold = 0.;
	sumFillers = max(dsum(xFillers), 1.);

	if (columnsCount > 0) {
		columnWidths = generate(0, columnsCount, \i -> max(columnWidths0[i], minWidths[i]));
		sumWidth = dsum(columnWidths);

		if (sumWidth < availableWidth - additionThreshold || sumWidth > availableWidth + additionThreshold) {
			available = availableWidth - sumWidth;
			addition = available / sumFillers;

			availableForAddition =
				mapi(subrange(maxWidths, 0, columnsCount), \i, mw -> ref
					xFillers[i] > 0. && (if (sumWidth < availableWidth)
						(mw > minWidths[i] && columnWidths[i] < mw) || (mw < minWidths[i])
					else
						columnWidths[i] > minWidths[i])
				);

			newWidths =
				mapi(subrange(columnWidths, 0, columnsCount), \i, cw -> ref
					if (^(availableForAddition[i])) {
						nw = cw + addition * xFillers[i];

						if (nw < minWidths[i]) {
							availableForAddition[i] := false;
							minWidths[i];
						} else if (maxWidths[i] >= minWidths[i] && nw > maxWidths[i]) {
							availableForAddition[i] := false;
							maxWidths[i];
						} else {
							nw
						}
					} else {
						if (minWidths[i] > 0.) {
							if (minWidths[i] <= maxWidths[i])
								min(max(cw, minWidths[i]), maxWidths[i])
							else
								max(cw, minWidths[i])
						} else
							cw
					}
				);

			updateWhile(
				countA(availableForAddition, \afa -> ^afa)
				|> (\afa ->
					if (afa > 0)
						(availableWidth - fold(newWidths, 0., \acc, nw -> acc + ^nw)) / sumFillers
					else
						0.
				),
				\newAddition -> {
					if ((newAddition > additionThreshold || newAddition < additionThreshold) &&
						foldi(availableForAddition, false, \i, acc, afa -> {
							if (^afa) {
								newWidths[i] :=
									max(minWidths[i], ^(newWidths[i]) + newAddition * xFillers[i])
									|> (\f -> if (minWidths[i] < maxWidths[i]) min(f, maxWidths[i]) else f);
								false
							} else {
								acc
							}
						}))
						Some((availableWidth - fold(newWidths, 0., \acc, nw -> acc + ^nw)) / i2d(countA(availableForAddition, \afa -> ^afa)))
					else
						None()
				}
			);

			map(newWidths, \nw -> ^nw);
		} else {
			columnWidths
		}
	} else
		columnWidths0
}

MEvenGrid(content : [[Material]]) -> Material {
	MGetFocusGroup(\p -> MGetMaterial2Tropic(\m2t -> TEvenGrid(map(content, \c -> map(c, \i -> m2t(i, p))))))
}

MSelectConstantMetrics(value : Transform<?>, fn : (?) -> Material) -> Material {
	MTransformTAcc(\t2a, pi, ss, mo -> {
		bf = t2a(MMutable(fselect(value, FLift(fn))), pi, ss, mo);

		wd = bf.metrics.width |> fgetValue |> const;
		hgt = bf.metrics.height |> fgetValue |> const;

		TAcc(
			bf.form,
			TFormMetrics(
				wd,
				hgt,
				if (bf.yConstant) bf.metrics.baseline |> fgetValue |> const else bf.metrics.baseline
			),
			if (bf.xConstant) wd else bf.minWidth,
			if (bf.yConstant) hgt else bf.minHeight,
			if (bf.xConstant) wd else bf.maxWidth,
			if (bf.yConstant) hgt else bf.maxHeight,
			if (bf.xConstant) zero else bf.xFillers,
			if (bf.yConstant) zero else bf.yFillers,
			bf.addFillers,
			bf.xConstant,
			bf.yConstant,
			bf.disposers
		)
	})
}

MAvailableWidth(m : Material, available : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TAvailableWidth(tr, available))
}

MAvailableHeight(m : Material, available : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TAvailableHeight(tr, available))
}

MAvailableWidthHeight(m : Material, width : Transform<double>, height : Transform<double>) -> Material {
	Material2Tropic(m, \tr -> TAvailableWidthHeight(tr, width, height))
}

MZoomToFit(content : Material, box : Material) -> Material {
	MTransformTAcc2(\t2a -> {
		cont = content |> t2a;
		bx = box |> t2a;

		zoom = fselect4(cont.metrics.width, cont.metrics.height, bx.metrics.width, bx.metrics.height,
			\width, height, maxWidth, maxHeight -> {
				if (width <= maxWidth && height <= maxHeight)
					1.0
				else if (width == 0.0 || height == 0.0)
					0.0
				else min(maxWidth / width, maxHeight / height);
			}
		);

		TAcc(
			FScale(zoom, zoom, cont.form),
			TFormMetrics(
				fmultiply(cont.metrics.width, zoom),
				fmultiply(cont.metrics.height, zoom),
				fmultiply(cont.metrics.baseline, zoom)
			),
			fmultiply(cont.minWidth, zoom),
			fmultiply(cont.minHeight, zoom),
			fmultiply(cont.maxWidth, zoom),
			fmultiply(cont.maxHeight, zoom),
			cont.xFillers,
			cont.yFillers,
			cont.addFillers,
			cont.xConstant && bx.xConstant && cont.yConstant && bx.yConstant,
			cont.xConstant && bx.xConstant && cont.yConstant && bx.yConstant,
			concat(cont.disposers, bx.disposers)
		);
	});
}

MScaleXY(factor : double) -> (Material) -> Material {
	\m -> MScale(const(Factor(factor, factor)), m)
}

MCropWidth(content : Material, width : Material) -> Material {
	MLet("content", content, MCropSize(MGroup2(MHeightOf(MGhost("content")), MWidthOf(width)), MDisplay("content")));
}

MCropHeight(content : Material, height : Material) -> Material {
	MLet("content", content, MCropSize(MGroup2(MWidthOf(MGhost("content")), MHeightOf(height)), MDisplay("content")));
}

MRemoveMinMetrics(content : Material) -> Material {
	MTransformTAcc(\t2a, pi, ss, mo -> {
		bf = t2a(content, pi, ss, mo);

		TAcc(
			bf.form,
			TFormMetrics(
				bf.metrics.width,
				bf.metrics.height,
				bf.metrics.baseline
			),
			bf.metrics.width,
			bf.metrics.height,
			bf.metrics.width,
			bf.metrics.height,
			zero,
			zero,
			bf.addFillers,
			bf.xConstant,
			bf.yConstant,
			bf.disposers
		)
	})
}

MBorderTop(border : double) -> (Material) -> Material {
	\m -> MBorder(0., border, 0., 0., m)
}

MBorderBottom(border : double) -> (Material) -> Material {
	\m -> MBorder(0., 0., 0., border, m)
}

MBorderLeft(border : double) -> (Material) -> Material {
	\m -> MBorder(border, 0., 0., 0., m)
}

MBorderRight(border : double) -> (Material) -> Material {
	\m -> MBorder(0., 0., border, 0., m)
}

MBorderStart(border : double) -> (Material) -> Material {
	\m -> MBorderA(0., 0., border, 0., m)
}

MBorderEnd(border : double) -> (Material) -> Material {
	\m -> MBorderA(0., 0., border, 0., m)
}

MBorderTopBottom(border : double) -> (Material) -> Material {
	\m -> MBorder(0., border, 0., border, m)
}

MBorderLeftRight(border : double) -> (Material) -> Material {
	\m -> MBorder(border, 0., border, 0., m)
}

MFixSizeKeepBaseline(m : Material, size : Material) -> Material {
	MTransformTAcc(\t2a, pi, ss, mo -> {
		bf = t2a(m, pi, ss, mo);
		sf = t2a(size, pi, ss, mo);

		TAcc(
			bf.form,
			TFormMetrics(
				sf.metrics.width,
				sf.metrics.height,
				bf.metrics.baseline
			),
			sf.minWidth,
			sf.minHeight,
			sf.maxWidth,
			sf.maxHeight,
			sf.xFillers,
			sf.yFillers,
			sf.addFillers,
			sf.xConstant,
			sf.yConstant && isFConst(bf.metrics.baseline),
			sf.disposers
		)
	})
}

MBaseline(baseline : Transform<double>, m : Material) -> Material {
	Material2Tropic(m, \tr -> TBaseline(baseline, tr))
}

MColsCenterY(items : [Material]) -> Material {
	idxs = enumFromTo(0, length(items) - 1);
	groupHeight = MGroup(
		map(idxs, \idx -> MHeightOf(TGhost("item" + i2s(idx))))
	);

	MLetMany(
		mapi(items, \idx, item -> Pair("item" + i2s(idx), item)),
		MCols(
			map(idxs, \idx ->
				MCenterYIn(
					TDisplay("item" + i2s(idx)),
					groupHeight
				)
			)
		)
	);
}

MBorderT(left : Transform<double>, top : Transform<double>, right : Transform<double>, bottom : Transform<double>, m : Material) -> Material {
	Material2Tropic(m, \tr -> TBorderT(left, top, right, bottom, tr))
}

MFrameT(margin : Transform<double>, radius : double, style : [TGraphicsStyle], box : Material) -> Material {
	Material2Tropic(box, \tr -> TFrameT(margin, radius, style, tr))
}

MDynamicText(text : Transform<string>, style : [MTextStyle]) -> Material {
	MSelect(text, \txt -> if (txt == "") TEmpty() else MText(txt, style))
}

MDebugMetrics(c : int, m : Material) -> Material {
	Material2Tropic(m, \tr -> TDebugMetrics(c, tr))
}

MDebugPositionScale(c : int, m : Material) -> Material {
	Material2Tropic(m, \tr -> TDebugPositionScale(c, tr))
}

MDebugViewBounds(c : int, m : Material) -> Material {
	Material2Tropic(m, \tr -> TDebugViewBounds(c, tr))
}

MBorder4(border : double, m : Material) -> Material {
	Material2Tropic(m, \tr -> TBorder4(border, tr))
}

MRotate90(m : Material) -> Material {
	Material2Tropic(m, TRotate90)
}

MRotate90Left(m : Material) -> Material {
	Material2Tropic(m, TRotate90Left)
}

MDashedCircle(radius : double, dashNumber : int, color : MColor) -> Material {
	stepSize = 180. / i2d(dashNumber);

	TGraphics(
		generate(0, dashNumber, \i -> 
			SectorPath(radius, radius, radius, stepSize * i2d(i) * 2., stepSize * (i2d(i) * 2. + 1.), false, false, true)
		)
		|> concatA,
		[MStroke(color)]
	)
}

MIfFits(m : Material) -> Material {
	Material2Tropic(m, \tr -> TIfFits(tr))
}