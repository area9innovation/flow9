import material/internal/types;
import formats/json/json;
import text/serialize;

export {
	packIScript(iscript : IScript) -> string;
	packStoredIScript(storedIScript : StoredIScript) -> string;
	unpackStoredIScript(s : string) -> StoredIScript;

	packIScriptAliases(aliases : [Pair<IScriptComponentDescriptor, string>]) -> string;
	packIScriptStack(iScriptStack : Tree<double, [IScriptRecord]>) -> string;

	unpackIScriptAliases(s : string, version : string) -> [Pair<IScriptComponentDescriptor, string>];
	unpackIScriptStack(s : string, version : string) -> Tree<double, [IScriptRecord]>;

	packIScriptScenario(scenario : IScriptScenario) -> string;
	unpackIScriptScenario(s : string) -> IScriptScenario;
}

lookupNameToPack = [
	Pair("IScriptIdentifierList", "ISIDL"),
	Pair("IScriptFocusTreePosition", "ISFTP"),
	Pair("IScriptFormPosition", "ISFP"),
	Pair("IScriptId", "ISI"),
	Pair("IScriptComponentDescriptor", "ISCD"),
	Pair("IScriptAdditionalInfo", "ISAI"),
	Pair("IScriptRequestOk", "ISRO"),
	Pair("IScriptRequestError", "ISRE"),
	Pair("IScriptRequestStatus", "ISRS"),
	Pair("IScriptRequestRecord", "ISRR"),
	Pair("IScriptScreenshot", "ISS"),
	Pair("IScriptBehaviourDescriptor", "ISBD"),
	Pair("IScriptLogicalScreenshot", "ISLS"),
	Pair("IScriptVisualScreenshot", "ISVS"),
	Pair("IScriptCheck", "ISC"),
	Pair("IScriptNested", "ISN"),
	Pair("IScriptBehaviourRecord", "ISBR"),
	Pair("IScriptInputRecord", "ISIR"),
	Pair("IScriptOutputRecord", "ISOR"),
	Pair("IScript", "IS"),
	Pair("StoredIScript", "SIS"),
	Pair("IScriptStageWidthHeight", "ISWH"),
	Pair("IScriptUrlRecord", "ISUR"),
	Pair("Pair", "P"),
	Pair("ISMouseEvent", "ISME"),
	Pair("ISKeyEvent", "ISKE"),
	Pair("ISInteractionEvent", "ISIE"),
	Pair("ISClickEvent", "ISCE"),
	Pair("ISAppearanceEvent", "ISAE"),
	Pair("ISEnableEvent", "ISEE"),
	Pair("ISSelectionEvent", "ISSE"),
	Pair("ISMiscEvent", "ISMIE"),
	Pair("ISWigiEvent", "ISWE"),
	Pair("ISPebbleEvent", "ISPE"),
	Pair("ISInputValue", "ISIPE"),
	Pair("ISCustomIScriptRecordType", "ISCISRT"),
];

lookupNameToPackTree = pairs2tree(lookupNameToPack);

lookupPackToNameTree = pairs2tree(map(lookupNameToPack, \v -> Pair(v.second, v.first)));

nameToPack(s : string) -> string {
	lookupTreeDef(lookupNameToPackTree, s, s)
}

packToName(s : string) -> string {
	lookupTreeDef(lookupPackToNameTree, s, s)
}

braces(s : string) -> string {
	"(" + s + ")";
}

bracesA(s : [string]) -> string {
	"(" + strGlue(s, ", ") + ")";
}

bracesWithNameA(name : string, s : [string]) -> string {
	name + "(" + strGlue(s, ", ") + ")";
}

bq(s : string) -> string {
	braces(toString(s));
}

packIScriptIdentifierList(l : List<IScriptIdentifier>) -> string {
	ids =
		concatA(
			map(
				list2array(l),
				\v : IScriptIdentifier -> { // List -> array of strings
					switch (v : IScriptIdentifier) {
						IScriptFocusTreePosition(id) : [nameToPack(v.structname) + braces(toString(id))];
						IScriptFormPosition(id) : [nameToPack(v.structname) + braces(i2s(id))];
						IScriptId(id) : [nameToPack(v.structname) + braces(toString(id))]; // quote string
					};
				}
			)
		);

	bracesWithNameA(
		nameToPack("IScriptIdentifierList"),
		ids
	)
}

packIScriptAliases(aliases : [Pair<IScriptComponentDescriptor, string>]) -> string {
	packArray(map(aliases, \alias : Pair<IScriptComponentDescriptor, string> -> {
		packPair(
			Pair(
				packIScriptComponentDescriptor(alias.first),
				toString(alias.second)
			)
		)
	}))
}

packAdditionalInfo(additionalInfo : IScriptAdditionalInfo) -> string {
	inputs = toString(additionalInfo.inputs); // [Pair<string, string>]
	outputs = toString(additionalInfo.outputs); // [string]
	aliases = packIScriptAliases(additionalInfo.aliases);

	bracesWithNameA(
		nameToPack("IScriptAdditionalInfo"),
		[
			inputs,
			outputs,
			aliases
		]
	);
}

packIScriptRequestRecord(v : IScriptRequestRecord) -> string {
	// IScriptRequestRecord(url : string, post : bool, headers : [KeyValue], params : [KeyValue], delay : double, response : IScriptRequestRespose)
	// r = switch (v.response : IScriptRequestRespose) {
	// 	IScriptRequestOk(data) : bq(data);
	// 	IScriptRequestError(error) : bq(error);
	// 	IScriptRequestStatus(status) : braces(i2s(status));
	// };

	bracesWithNameA(
		nameToPack("IScriptRequestRecord"),
		[
			toString(v.url),
			b2s(v.post),
			toString(v.headers),
			toString(v.params),
			toString(v.delay),
			toString(v.response)
			// bracesWithNameA(nameToPack(v.response.structname), [r])
		]
	)
	// "IScriptRequestRecord"
}

packPairStringify(v : Pair) -> string {
	bracesWithNameA(
		nameToPack("Pair"),
		[
			toString(v.first),
			toString(v.second)
		]
	)
}

packPair(v : Pair) -> string {
	bracesWithNameA(
		nameToPack("Pair"),
		[
			v.first,
			v.second
		]
	)
}

packArray(v : [string]) -> string {
	"[" + strGlue(v, ", ") + "]"
}

packIScriptScreenshot(v : IScriptScreenshot) -> string {
	//IScriptScreenshot(behaviours : Tree<Pair<[int], string>, Tree<string, flow>>, check : bool))
	bracesWithNameA(
		nameToPack("IScriptScreenshot"),
		[
			packArray(map(tree2pairs(v.behaviours), \v0 : Pair<Pair<[int], string>, Tree<string, flow>> ->
				packPair(
					Pair(
						packPairStringify(v0.first),
						packArray(map(tree2pairs(v0.second), packPairStringify))
					)
				)
			)),
			toString(v.check)
		]
	)
	// "IScriptScreenshot"
}

packIScriptBehaviourDescriptor(v : IScriptBehaviourDescriptor) -> string {
	bracesWithNameA(
		nameToPack("IScriptBehaviourDescriptor"),
		[
			packIScriptComponentDescriptor(v.component),
			toString(v.name)
		]
	)
}

packIScriptComponentDescriptor(v : IScriptComponentDescriptor) -> string {
	bracesWithNameA(
		nameToPack("IScriptComponentDescriptor"),
		[
			toString(v.name),
			packIScriptIdentifierList(v.id)
		]
	)
}

packIScriptLogicalScreenshot(v : IScriptLogicalScreenshot) -> string {
	// IScriptLogicalScreenshot(string, WidthHeight)
	bracesWithNameA(nameToPack("IScriptLogicalScreenshot"), [toString(v.screenshot), toString(v.size)])
	// "IScriptLogicalScreenshot"
}

packIScriptVisualScreenshot(v : IScriptVisualScreenshot) -> string {
	// IScriptVisualScreenshot(string, WidthHeight)
	bracesWithNameA(nameToPack("IScriptVisualScreenshot"), [toString(v.screenshot)])
}

packIScriptCheck(v : IScriptCheck) -> string {
	// IScriptCheck(behaviourDescriptor : IScriptBehaviourDescriptor, checkFn : (flow) -> bool, type : IScriptRecordType)
	// functions in IScript are not serialize.
	nameToPack("IScriptCheck")
}

packIScriptNested(v : IScriptNested) -> string {
	// IScriptNested(componentName : string, id : List<IScriptIdentifier>, iScript : IScript)
	bracesWithNameA(
		nameToPack("IScriptNested"),
		[
			toString(v.componentName),
			packIScriptIdentifierList(v.id),
			packIScript(v.iScript)
		])
	// "IScriptNested"
}

packIScriptBehaviourRecord(v : IScriptBehaviourRecord) -> string {
	// IScriptBehaviourRecord(descriptor : IScriptBehaviourDescriptor, value : flow, type : IScriptRecordType, callstack : string)
	bracesWithNameA(
		nameToPack("IScriptBehaviourRecord"),
		[
			packIScriptBehaviourDescriptor(v.descriptor),
			toString(v.value),
			packIScriptRecordType(v.type),
			toString(v.callstack),
		]
	)
	// "IScriptBehaviourRecord"
}

packIScriptRecordType(v : IScriptRecordType) -> string {
	switch (v : IScriptRecordType) {
		ISInputValue(possibleValues, valueTypeHelper, canBeScriptInput): {
			bracesWithNameA(
				"ISInputValue",
				[
					packArray(map(possibleValues, toString)),
					toString(valueTypeHelper),
					toString(canBeScriptInput)
				]
			)
		}
		ISCustomIScriptRecordType(name) : {
			bracesWithNameA(
				"ISCustomIScriptRecordType",
				[
					toString(name)
				]
			)
		}
		default: {
			bracesWithNameA(
				nameToPack(v.structname),
				[]
			)
		}
	}
}

packIScriptInputRecord(v : IScriptInputRecord) -> string {
	// IScriptInputRecord(behaviourDescriptor : IScriptBehaviourDescriptor, name : string, possibleValues : [flow], valueTypeHelper : string)
	bracesWithNameA(
		nameToPack("IScriptInputRecord"),
		[
			packIScriptBehaviourDescriptor(v.behaviourDescriptor),
			toString(v.name),
			toString(v.possibleValues),
			toString(v.valueTypeHelper)
		])
	// "IScriptInputRecord"
}

packIScriptOutputRecord(v : IScriptOutputRecord) -> string {
	// IScriptOutputRecord(behaviourDescriptor : IScriptBehaviourDescriptor, name : string)
	bracesWithNameA(
		nameToPack("IScriptOutputRecord"),
		[
			packIScriptBehaviourDescriptor(v.behaviourDescriptor),
			toString(v.name)
		])
	// "IScriptOutputRecord"
}

packIScriptStageWidthHeight(v : IScriptStageWidthHeight) -> string {
	bracesWithNameA(
		nameToPack("IScriptStageWidthHeight"),
		[
			toString(v.wh)
		]
	)
}

packIScriptUrlRecord(v : IScriptUrlRecord) -> string {
	bracesWithNameA(
		nameToPack("IScriptUrlRecord"),
		[
			toString(v.url)
		]
	)
}

packIScriptStack(iScriptStack : Tree<double, [IScriptRecord]>) -> string {
	packArray(map(tree2pairs(iScriptStack), \v : Pair<double, [IScriptRecord]> -> {
		delay = d2s(v.first);
		packPair(
			Pair(
				if (!strContains(delay, ".")) delay + ".0" else delay,
				packArray(map(v.second, \iScriptRecord -> {
					switch (iScriptRecord : IScriptRecord) {
						IScriptRequestRecord(__, __, __, __, __, __) : packIScriptRequestRecord(iScriptRecord);
						IScriptScreenshot(__, __) : packIScriptScreenshot(iScriptRecord);
						IScriptLogicalScreenshot(__, __) : packIScriptLogicalScreenshot(iScriptRecord);
						IScriptVisualScreenshot(__) : packIScriptVisualScreenshot(iScriptRecord);
						IScriptCheck(__, __, __) : packIScriptCheck(iScriptRecord);
						IScriptNested(name, id, iscr) : packIScriptNested(iScriptRecord);
						IScript(__, __) : packIScript(iScriptRecord);
						IScriptBehaviourRecord(__, __, __, __) : packIScriptBehaviourRecord(iScriptRecord);
						IScriptInputRecord(__, __, __, __) : packIScriptInputRecord(iScriptRecord);
						IScriptOutputRecord(__, __) : packIScriptOutputRecord(iScriptRecord);
						IScriptStageWidthHeight(__) : packIScriptStageWidthHeight(iScriptRecord);
						IScriptUrlRecord(__) : packIScriptUrlRecord(iScriptRecord);
					}
				}))
			)
		)
	}))
}

packIScript(iscript : IScript) -> string {
	iscriptStack = packIScriptStack(iscript.stack);

	bracesWithNameA(
		nameToPack("IScript"),
		[
			toString(iscript.recordingStarted),
			iscriptStack
		]
	)
}

packStoredIScript(storedIScript : StoredIScript) -> string {
	assertEquals(sizeTree(lookupNameToPackTree), sizeTree(lookupPackToNameTree));

	packedAdditionalInfo = packAdditionalInfo(storedIScript.additionalInfo);
	packedIScript = packIScript(storedIScript.script);
	bracesWithNameA(
		nameToPack("StoredIScript"),
		[
			toString(storedIScript.version),
			packedAdditionalInfo,
			packedIScript
		]
	)
}

unpackStoredIScript(s : string) -> StoredIScript {
	version = strSplit(substring(s, 0, 10), "\"")[1];
	fixups = unpackIScriptFixup(version);

	cast(deserialize2(s, fixups, StoredIScript("", makeEmptyIScriptAdditionalInfo(), makeEmptyIScript())) : flow -> StoredIScript);
}

makeIScriptFixup(version : string) -> Tree<string, (args : [flow]) -> flow> {
	//make sure that we have a number in a format that will not cause crashes
	fixNumber = \number -> s2d(d2s(number));

	values2treeEx(
		lookupNameToPack,
		\v0 : Pair<string, string> -> v0.second,
		\v0 : Pair<string, string> -> \_args -> {
			finalArgs = _args;
			if ((version == "0.9b" || version == "") && v0.first == "IScriptBehaviourDescriptor") {
				if (length(finalArgs) == 3)
					IScriptBehaviourDescriptor(IScriptComponentDescriptor(flow(finalArgs[0]), flow(finalArgs[2])), flow(finalArgs[1]))
				else
					IllegalStruct()
			} else {
				makeStructValue(v0.first, finalArgs, IllegalStruct());
			}
		}
	) |> (\tree -> setTree(tree, nameToPack("IScript"),
		\_args -> {
			addValues = \args : [flow] -> {
				[
					args[0],
					if (version == "0.9b" || version == "") {
						fold(args[1], makeTree(), \acc, a : Pair<double, IScriptRecord> -> treePushToArrayValue(acc, a.first, a.second))
					} else {
						pairs2tree(map(args[1], \p : Pair<double, [IScriptRecord]> -> Pair(p.first |> fixNumber, p.second)))
					}
				]
			};
			finalArgs = _args |> addValues;
			makeStructValue("IScript", finalArgs, IllegalStruct());
		})
	) |> (\tree -> setTree(tree, nameToPack("IScriptScreenshot"),
		\_args -> {
			addValues = \args : [flow] -> {
				[
					pairs2tree(
						map(args[0],
						\v0 : Pair<Pair<[int], string>, [Pair<string, flow>]> -> Pair(v0.first, pairs2tree(v0.second)))
					),
					args[1]
				]
			};
			finalArgs = _args |> addValues;
			makeStructValue("IScriptScreenshot", finalArgs, IllegalStruct());
		})
	) |> (\tree -> setTree(tree, nameToPack("IScriptIdentifierList"),
		\_args -> {
			fold(_args, makeList(), \acc, l -> concatList(l, acc))
		})
	) |> (\tree -> setTree(tree, nameToPack("IScriptFocusTreePosition"),
		\_args -> {
			if (version == "0.9b" || version == "") {
				array2list(map(_args[0], \v0 -> makeStructValue("IScriptFocusTreePosition", [v0], IllegalStruct())))
			} else {
				Cons(makeStructValue("IScriptFocusTreePosition", _args, IllegalStruct()), EmptyList())
			}
		})
	) |> (\tree -> setTree(tree, nameToPack("IScriptId"),
		\_args -> {
			Cons(makeStructValue("IScriptId", _args, IllegalStruct()), EmptyList())
		})
	) |> (\tree -> setTree(tree, nameToPack("StoredIScript"),
		\_args -> {
			addValues = \args : [flow] -> {
				if (length(args) == 2)
					[
						"",
						args[0],
						args[1]
					]
				else
					args
			};
			finalArgs = _args |> addValues;
			makeStructValue("StoredIScript", finalArgs, IllegalStruct());
		})
	) |> (\tree -> setTree(tree, nameToPack("IScriptRequestRecord"),
		\_args -> {
			addValues = \args : [flow] -> {
				if (length(args) >= 5)
					replace(args, 4, fixNumber(args[4]))
				else
					args
			};
			finalArgs = _args |> addValues;
			makeStructValue("IScriptRequestRecord", finalArgs, IllegalStruct());
		})
	)
}

unpackIScriptFixupGenerated : ref Tree<string, ref Maybe<Tree<string, (args : [flow]) -> flow>>> = ref makeTree();

unpackIScriptFixup(version : string) -> Tree<string, (args : [flow]) -> flow> {
	onlyOnce(lookupTreeSet(unpackIScriptFixupGenerated, version, \__ -> ref None()), \ -> makeIScriptFixup(version))
}

unpackIScriptAliases(s : string, version : string) -> [Pair<IScriptComponentDescriptor, string>] {
	fixups = unpackIScriptFixup(version);
	cast(deserialize2(s, fixups, []) : flow -> [Pair<IScriptComponentDescriptor, string>]);
}

unpackIScriptStack(s : string, version : string) -> Tree<double, [IScriptRecord]> {
	fixups = unpackIScriptFixup(version);
	cast(deserialize2(s, fixups, makeTree()) : flow -> Tree<double, [IScriptRecord]>);
}

packIScriptScenario(scenario : IScriptScenario) -> string {
	JsonObject(
		[
			Pair("description", JsonString(getValue(scenario.descriptionB))),
			Pair("scripts", JsonArray(
				mapConcat(getValue(scenario.scriptsB),
					\sr : IScriptScenarioRecord -> {
						[JsonObject([Pair("path", JsonString(sr.scriptPath)), Pair("description", JsonString(getValue(sr.descriptionB)))])]
					}
				))
			)
		]
	)
	|> json2string
}

unpackIScriptScenario(s : string) -> IScriptScenario {
	scenarioJson = parseJson(s);

	IScriptScenario(
		make(""),
		make(getJsonStringField(scenarioJson, "description", "")),
		make(false),
		make(-1),
		make(
			mapConcat(getJsonArrayField(scenarioJson, "scripts"), \v -> {
				[IScriptScenarioRecord(getJsonStringField(v, "path", ""), make(getJsonStringField(v, "description", "")))]
			})
		)
	)
}
