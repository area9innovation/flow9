import material/internal/types;
import material/internal/material_dialog_internal;
import material/internal/material_popup;
import material/internal/material_button;
import material/material;
import material/material_gui;

export {

	IScriptFilterType ::= FTNoIScript, FTIScriptRecords, FTIScriptBehaviourDescriptors, FTIScriptRecordTypes;
		FTNoIScript();
		FTIScriptRecords(records : [IScriptRecord]);
		FTIScriptRecordTypes(types : [IScriptRecordType]);
		FTIScriptBehaviourDescriptors(componentNames : string, behaviourNames : string, ids : string);

	recordValuesTypes = [
		IScriptRequestRecord("", false, [], [], 0.0, IScriptRequestOk("")),
		IScriptScreenshot(makeTree(), false),
		IScriptLogicalScreenshot("", WidthHeight(0.0, 0.0)),
		IScriptVisualScreenshot(""),
		IScriptCheck(IScriptBehaviourDescriptor(IScriptComponentDescriptor("", makeList()), ""), \__ -> false, ISMouseEvent()),
		IScriptNested("", makeList(), IScript(0.0, makeTree())),
		IScript(0.0, makeTree()),
		IScriptBehaviourRecord(IScriptBehaviourDescriptor(IScriptComponentDescriptor("", makeList()), ""), flow, ISMouseEvent(), ""),
		IScriptInputRecord(IScriptBehaviourDescriptor(IScriptComponentDescriptor("", makeList()), ""), "", [], ""),
		IScriptOutputRecord(IScriptBehaviourDescriptor(IScriptComponentDescriptor("", makeList()), ""), ""),
		IScriptStageWidthHeight(WidthHeight(0., 0.)),
	];

	recordTypeValuesTypes =	[
		ISDetailedTextEvent(),
		ISMouseEvent(),
		ISKeyEvent(),
		ISInteractionEvent(),
		ISClickEvent(),
		ISAppearanceEvent(),
		ISValueEvent(),
		ISEnableEvent(),
		ISSelectionEvent(),
		ISMiscEvent(),
		ISWigiEvent(),
		ISPebbleEvent(),
		ISInputValue([], "", false),
		ISCustomIScriptRecordType("")
	];

	renderFilterPopup(
		manager : MaterialManager,
		parent : MFocusGroup,
		m2t : (Material, MFocusGroup) -> Tropic,
		filterTypesB : DynamicBehaviour<[IScriptFilterType]>,
		searchB : DynamicBehaviour<string>,
		filterPopupOpenedB : DynamicBehaviour<bool>,
		posScaleB : DynamicBehaviour<PositionScale>,
		caseSensitiveB : DynamicBehaviour<bool>
	) -> void;

	renderSearchChip(
		manager : MaterialManager,
		searchB : DynamicBehaviour<string>,
		caseSensitiveB : DynamicBehaviour<bool>
	) -> Material;

	renderFilterChips(
		manager : MaterialManager,
		filterTypesB : DynamicBehaviour<[IScriptFilterType]>
	) -> Material;

	checkBehaviour(behaviourDescriptor : IScriptBehaviourDescriptor, behaviourFilter : FTIScriptBehaviourDescriptors, caseSensitive : bool) -> bool;
}

iscriptRecordToString(value : IScriptRecord) -> string {
	switch (value : IScriptRecord) {
		IScriptRequestRecord(__, __, __, __, __, __) : "Request";
		IScriptScreenshot(__, __) : "Screenshot";
		IScriptLogicalScreenshot(__, __) : "Logical screenshot";
		IScriptVisualScreenshot(__) : "Visual screenshot";
		IScriptCheck(__, __, __) : "Check";
		IScriptNested(__, __, __) : "Nested IScript";
		IScript(__, __) : "IScript";
		IScriptBehaviourRecord(__, __, __, __) : "Behaviour";
		IScriptInputRecord(__, __, __, __) : "Input";
		IScriptOutputRecord(__, __) : "Output";
		IScriptStageWidthHeight(__) : "Stage";
		IScriptUrlRecord(__) : "URL";
		IScriptSearchBehaviourRecord(__, __, __) : "Search behaviour";
		IScriptSearchText(__, __): "Search Text";
	}
}

iscriptRecordTypeToString(value : IScriptRecordType) -> string {
	switch (value : IScriptRecordType) {
		ISDetailedTextEvent() : "Detailed Text Event";
		ISMouseEvent() : "Mouse Event";
		ISKeyEvent() : "Key Event";
		ISInteractionEvent() : "Interaction Event";
		ISClickEvent() : "Click Event";
		ISAppearanceEvent() : "Appearance Event";
		ISValueEvent() : "Value Event";
		ISEnableEvent() : "Enable Event";
		ISSelectionEvent() : "Selection Event";
		ISMiscEvent() : "Miscellaneous Event";
		ISWigiEvent() : "Wigi Event";
		ISPebbleEvent() : "Pebble Event";
		ISInputValue(__, __, __) : "Input Event";
		ISCustomIScriptRecordType(__) : "Custom Event";
	}
}

renderFilterPopup(
	manager : MaterialManager,
	parent : MFocusGroup,
	m2t : (Material, MFocusGroup) -> Tropic,
	filterTypesB : DynamicBehaviour<[IScriptFilterType]>,
	searchB : DynamicBehaviour<string>,
	filterPopupOpenedB : DynamicBehaviour<bool>,
	posScaleB : DynamicBehaviour<PositionScale>,
	caseSensitiveB : DynamicBehaviour<bool>
) -> void {
		RenderMPopup(
			manager,
			parent,
			filterPopup(manager, m2t, filterTypesB, searchB, filterPopupOpenedB, posScaleB, caseSensitiveB),
			m2t
		);
}

filterPopup(
	manager : MaterialManager,
	m2t : (Material, MFocusGroup) -> Tropic,
	filterTypesB : DynamicBehaviour<[IScriptFilterType]>,
	searchB : DynamicBehaviour<string>,
	filterPopupOpenedB : DynamicBehaviour<bool>,
	posScaleB : DynamicBehaviour<PositionScale>,
	caseSensitiveB : DynamicBehaviour<bool>
) -> MPopup {
	inputSearchB = make(getValue(searchB));
	inputSearchClearEnableB = fneq(inputSearchB, "");

	centerYIn30 = \f -> MCenterYIn(f, TFixed(0.0, 30.0));

	recordValuesB = make([]);
	recordTypeValuesB = make([]);
	caseSensB = make(getValue(caseSensitiveB));
	componentNamesB = make("");
	behaviourNamesB = make("");
	idsB = make("");

	filterTypes = getValue(filterTypesB);
	nextDistinct(recordValuesB, extractStruct(filterTypes, FTIScriptRecords([])).records);
	nextDistinct(recordTypeValuesB, extractStruct(filterTypes, FTIScriptRecordTypes([])).types);

	behaviourFilter = extractStruct(filterTypes, FTIScriptBehaviourDescriptors("", "", ""));
	nextDistinct(componentNamesB, behaviourFilter.componentNames);
	nextDistinct(behaviourNamesB, behaviourFilter.behaviourNames);
	nextDistinct(idsB, behaviourFilter.ids);

	filterRecord = \hintText : string, fieldName : string, fieldNamesArray : [IScriptRecord], selectedB : DynamicBehaviour <[IScriptRecord]> -> {
		MSelect(
			selectedB,
			\selected -> MLines([
				MText(fieldName + if (length(selected) > 0) " (" + i2s(length(selected)) + ")" else "", []),
				TFixed(0.0, 8.0),
				MDropDownMenu(
					map(filter(fieldNamesArray, \f -> !contains(selected, f)),
						\nm -> MMenuSingleLine(
							iscriptRecordToString(nm),
							[
								MOnClick(\-> {
									if (!contains(selected, nm))
										nextDistinct(selectedB, arrayPush(fgetValue(selectedB), nm));
								})
							]
						)
					),
					make(-1),
					[
						MCustomButton(MLines([
							MCols([
								MText(hintText, [MCustomFont(16.0, "Roboto", 0.54)]) |> centerYIn30,
								TFillX(),
								MIcon("arrow_drop_down", [MIconSize(30.0)])
							]),
							TRectangle([Fill(0xdfdfdf)], TFillXH(1.0))
						]))
					]
				),
				TFixed(0.0, 8.0),
				MLines(mapi(selected, \i, val ->
					MLines([
						MFrame(3.0, 16.0, [MFill(MGrey(400)), FillOpacity(0.5)],
							MCols([
								TFixed(10.0, 0.0),
								MCenterYIn(MEllipsisText(val.structname, [MBody(), MMinWidth(250.0)]), TFixed(0.0, 24.0)),
								TFillX(),
								MIconButton("cancel", \-> nextDistinct(selectedB, removeIndex(selected, i)), [MIconButtonBorder(0.0)], [MEnabled(const(true))])
							])
						),
						TFixed(0.0, 6.0)
					])
				))
			])
		)
	};

	filterRecordType = \hintText : string, fieldName : string, fieldNamesArray : [IScriptRecordType], selectedB : DynamicBehaviour <[IScriptRecordType]> -> {
		MSelect(selectedB,
			\selected -> MLines([
				MText(fieldName + if (length(selected) > 0) " (" + i2s(length(selected)) + ")" else "", []),
				TFixed(0.0, 8.0),
				MDropDownMenu(
					map(filter(fieldNamesArray, \f -> !contains(selected, f)),
						\nm -> MMenuSingleLine(
							iscriptRecordTypeToString(nm),
							[
								MOnClick(\ -> if (!contains(selected, nm)) nextDistinct(selectedB, arrayPush(fgetValue(selectedB), nm)))
							]
						)
					),
					make(-1),
					[
						MCustomButton(MLines([
							MCols([
								MText(hintText, [MCustomFont(16.0, "Roboto", 0.54)]) |> centerYIn30,
								TFillX(),
								MIcon("arrow_drop_down", [MIconSize(30.0)])
							]),
							TRectangle([Fill(0xdfdfdf)], TFillXH(1.0))
						]))
					]
				),
				TFixed(0.0, 8.0),
				MLines(mapi(selected, \i, val ->
					MLines([
						MFrame(3.0, 16.0, [MFill(MGrey(400)), FillOpacity(0.5)],
							MCols([
								TFixed(10.0, 0.0),
								MCenterYIn(MEllipsisText(val.structname, [MBody(), MMinWidth(250.0)]), TFixed(0.0, 24.0)),
								TFillX(),
								MIconButton("cancel", \-> nextDistinct(selectedB, removeIndex(selected, i)), [MIconButtonBorder(0.0)], [MEnabled(const(true))])
							])
						),
						TFixed(0.0, 6.0)
					])
				))
			])
		)
	};

	MPopup(
		[
			[
				MAvailable(
					MBorder(16.0, 0.0, 16.0, 0.0,
					MLines(
					[
						MTextInput(inputSearchB, [MWidth(-1.0), MFloatingLabel(), MLabel("Search..."), MShowClearIcon(true, false)], []),
						MFixedY(8.0),
						filterRecord("Select type...", "Record", recordValuesTypes, recordValuesB),
						MFixedY(24.0),
						filterRecordType("Select type...", "Record Type", recordTypeValuesTypes, recordTypeValuesB),
						MFixedY(16.0),
						MTooltip(
							MTextInput(componentNamesB, [MWidth(-1.0), MFloatingLabel(), MLabel("Component names"), MShowClearIcon(true, false)], []),
							MText("Enter the names separated by commas.", []),
							[]
							),
						MTooltip(
							MTextInput(behaviourNamesB, [MWidth(-1.0), MFloatingLabel(), MLabel("Behaviuor names"), MShowClearIcon(true, false)], []),
							MText("Enter the names separated by commas.", []),
							[]
							),
						MTooltip(
							MTextInput(idsB, [MWidth(-1.0), MFloatingLabel(), MLabel("IDs"), MShowClearIcon(true, false)], []),
							MLines([
								MText("Enter the IDs separated by commas.", [MWhite()]),
								MText("Format", [MWhite()]),
								MText("  integer -> IScriptFocusTreePosition", [MWhite()]),
								MText("  letter f and an integer -> IScriptFormPosition", [MWhite()]),
								MText("  text in quotation marks \" -> IScriptId", [MWhite()]),
								MText("Example: 2, \"textinput\", f4", [MWhite()]),
								]),
							[]
							),
						MFixedY(8.0),
						MBaselineCols([
							MText("Case sensitive search", []),
							MFillX(),
							MSwitchControl(caseSensB, []),
						]),
						MFixedY(24.0),
						MCols([
							MTextButton("CLEAR", \ -> {
								nextDistinct(inputSearchB, "");
								nextDistinct(recordValuesB, []);
								nextDistinct(recordTypeValuesB, []);
								nextDistinct(caseSensB, false);
								nextDistinct(componentNamesB, "");
								nextDistinct(behaviourNamesB, "");
								nextDistinct(idsB, "");
							}, [], []),
							MFillX(),
							MTextButton("APPLY", \ -> {
								nextDistinct(filterTypesB,
									if (length(getValue(recordValuesB)) == 0
									&& length(getValue(recordTypeValuesB)) == 0
									&& getValue(componentNamesB) == ""
									&& getValue(behaviourNamesB) == ""
									&& getValue(idsB) == "")
									[FTNoIScript()]
								else
									concatA([
										if (getValue(recordValuesB) == []) [] else [FTIScriptRecords(getValue(recordValuesB))],
										if (getValue(recordTypeValuesB) == []) [] else [FTIScriptRecordTypes(getValue(recordTypeValuesB))],
										if (getValue(componentNamesB) == "" && getValue(behaviourNamesB) == "" && getValue(idsB) == "")
											[]
										else
											[FTIScriptBehaviourDescriptors(getValue(componentNamesB), getValue(behaviourNamesB), checkBehaviourIds(getValue(idsB)))]
									])
								);
								nextDistinct(caseSensitiveB, getValue(caseSensB));
								nextDistinct(searchB, getValue(inputSearchB));
								next(filterPopupOpenedB, false);
							}, [MButtonRaised()], [MShortcut("enter")]),
							MTextButton("CANCEL", \ -> next(filterPopupOpenedB, false), [], [MShortcut("esc")])
						])
					]
					)
				),
					MFixedX(320.0)
				)
			]
		],
		posScaleB,
		[
			MOpenMenu(filterPopupOpenedB),
			RMClickOutToClose(),
			MRippleShape("MMenu"),
			MActive(make(true))
		]
	);
}

checkBehaviourIds(id : string) -> string {
	ids = splitFilterString(id);
	strGlue(filter(map(ids, checkId), \s -> s != ""), ", ")
}

checkId(r : string) -> string {
	r0 = trim(r);
	if (r0 == "")
		""
	else {
		if (isDigits(r0)) {
			 r0
		} else if (strlen(r0) > 1 && startsWith(toLowerCase(r0), "f") && isDigits(strRight(r0, 1))) {
			r0
		} else if (strlen(r0) > 2 && startsWith(r0, "\"") && endsWith(r0, "\"")) {
			r0
		} else ""
	}
}

renderSearchChip(
	manager : MaterialManager,
	searchB : DynamicBehaviour<string>,
	caseSensitiveB : DynamicBehaviour<bool>
) -> Material {
	MComponentGroupSelect(
		fpair(searchB, caseSensitiveB),
		\v -> {
			if (v.first != "") {
				MChip(v.first + if (v.second) ":cs" else "", [MCloseButton(), MOnClose(\ -> { nextDistinct(searchB, ""); true })])
			} else {
				TEmpty();
			}
		},
		[MFocusName("Filter string")]
	)
}

idToString(r : string) -> string {
	r0 = trim(r);
	if (r0 == "")
		""
	else {
		if (isDigits(r0)) {
			"IScriptFocusTreePosition(" + r0 + ")"
		} else if (strlen(r0) > 1 && startsWith(toLowerCase(r0), "f") && isDigits(strRight(r0, 1))) {
			"IScriptFormPosition(" + strRight(r0, 1) + ")"
		} else if (strlen(r0) > 2 && startsWith(r0, "\"") && endsWith(r0, "\"")) {
			"IScriptId(" + strRight(strLeft(r0, strlen(r0) - 1), 1) + ")"
		} else ""
	}
}

idToStruct(r : string) -> IScriptIdentifier {
	r0 = trim(r);
	if (r0 == "")
		IScriptFocusTreePosition(0)
	else {
		if (isDigits(r0)) {
			IScriptFocusTreePosition(s2i(r0))
		} else if (strlen(r0) > 1 && startsWith(toLowerCase(r0), "f") && isDigits(strRight(r0, 1))) {
			IScriptFormPosition(s2i(strRight(r0, 1)))
		} else if (strlen(r0) > 2 && startsWith(r0, "\"") && endsWith(r0, "\"")) {
			IScriptId(strRight(strLeft(r0, strlen(r0) - 1), 1))
		} else IScriptFocusTreePosition(0)
	}
}

splitFilterString(v : string) -> [string] {
	skip = make(true);
	strSplitContextFilter(
		v, ",", true,
		\s -> {
			if (s == "\"")
				next(skip, getValue(skip) == false);
			getValue(skip);
		}
	) |> (\f -> map(f, trim))
}

renderFilterChips(
	manager : MaterialManager,
	filterTypesB : DynamicBehaviour<[IScriptFilterType]>
) -> Material {
	MSelect(
		filterTypesB,
		\v -> {
			behaviourFilter = extractStruct(v, FTIScriptBehaviourDescriptors("", "", ""));

			MLines([
				if (containsStruct(v, FTIScriptRecords([]))) {
					recordFilter = extractStruct(v, FTIScriptRecords([]));

					MCols(
						mapi(recordFilter.records, \i, r -> {
							MChip(r.structname, [
								MCloseButton(),
								MOnClose(\ -> {
									nextDistinct(
										filterTypesB,
										if (length(recordFilter.records) > 1)
											replaceStruct(getValue(filterTypesB), FTIScriptRecords(removeIndex(recordFilter.records, i)))
										else
											removeAllStructs(getValue(filterTypesB), FTIScriptRecords([]))
									);
									true
								})
							])
						})
					)
				} else {
					TEmpty()
				},

				if (containsStruct(v, FTIScriptRecordTypes([]))) {
					recordTypeFilter = extractStruct(getValue(filterTypesB), FTIScriptRecordTypes([]));

					MCols(
						mapi(recordTypeFilter.types, \i, r -> {
							MChip(r.structname, [
								MCloseButton(),
								MOnClose(\ -> {
									nextDistinct(
										filterTypesB,
										if (length(recordTypeFilter.types) > 1)
											replaceStruct(getValue(filterTypesB), FTIScriptRecordTypes(removeIndex(recordTypeFilter.types, i)))
										else
											removeAllStructs(getValue(filterTypesB), FTIScriptRecordTypes([]))
									);
									true
								})
							])
						})
					) /*|> (\t -> MScroll2T(manager, p, MScroll(t, TFillXH(16.0), []), m2t))*/
				} else {
					TEmpty()
				},

				if (behaviourFilter.componentNames != "") {
					componentNames = splitFilterString(behaviourFilter.componentNames);

					MCols(
						mapi(componentNames, \i, r -> {
							MChip(r,
								[
									MCloseButton(),
									MOnClose(\ -> {
										nextDistinct(filterTypesB,
											replaceStruct(
												getValue(filterTypesB),
												FTIScriptBehaviourDescriptors(
													strGlue(removeIndex(componentNames, i), ", "),
													behaviourFilter.behaviourNames,
													behaviourFilter.ids
												)
											)
										);
										true
									})
								]
							)
						})
					)
				} else {
					TEmpty()
				},

				if (behaviourFilter.behaviourNames != "") {
					behaviourNames = splitFilterString(behaviourFilter.behaviourNames);

					MCols(
						mapi(behaviourNames, \i, r -> {
							MChip(r,
								[
									MCloseButton(),
									MOnClose(\ -> {
										nextDistinct(filterTypesB,
											replaceStruct(
												getValue(filterTypesB),
												FTIScriptBehaviourDescriptors(
													behaviourFilter.componentNames,
													strGlue(removeIndex(behaviourNames, i), ", "),
													behaviourFilter.ids
												)
											)
										);
										true
									})
								]
							)
						})
					)
				} else {
					TEmpty()
				},

				if (behaviourFilter.ids != "") {
					MChip("[" + behaviourFilter.ids + "]",
						[
							MCloseButton(),
							MOnClose(\ -> {
								nextDistinct(filterTypesB,
									replaceStruct(
										getValue(filterTypesB),
										FTIScriptBehaviourDescriptors(
											behaviourFilter.componentNames,
											behaviourFilter.behaviourNames,
											""
										)
									)
								);
							true
							})
						]
					)
				} else {
					TEmpty()
				}
			])
		}
	)
}

checkBehaviour(behaviourDescriptor : IScriptBehaviourDescriptor, behaviourFilter : FTIScriptBehaviourDescriptors, caseSensitive : bool) -> bool {
	isComponentName = if (behaviourFilter.componentNames != "") {
		componentNames = splitFilterString(behaviourFilter.componentNames);
		if (caseSensitive)
			contains(componentNames, trim(behaviourDescriptor.component.name))
		else
			contains(map(componentNames, toLowerCase), toLowerCase(trim(behaviourDescriptor.component.name)))
	} else true;

	isBehaviourName = if (behaviourFilter.behaviourNames != "") {
		behaviourNames = splitFilterString(behaviourFilter.behaviourNames);
		if (caseSensitive)
			contains(behaviourNames, trim(behaviourDescriptor.name))
		else
			contains(map(behaviourNames, toLowerCase), toLowerCase(trim(behaviourDescriptor.name)))
	} else true;

	isId = if (behaviourFilter.ids != "") {
		ids = splitFilterString(behaviourFilter.ids);
		idArray = list2array(behaviourDescriptor.component.id);

		forall(ids, \v -> contains(idArray, idToStruct(v)));
	} else true;
	isComponentName && isBehaviourName && isId
}
