import material/iscript/material_iscript_dialog;
import material/internal/material_list;

export {
	MFocusTree(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material;
}


MFocusTree(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> Material {
	MFocusTree2T(manager, manager.focus, m2t, 0)
	|> (\f -> MGetFocusGroup(\p -> MList2T(manager, p, MList([f], [], []), m2t)))
	|> (\f -> MBorder(0., 8., 0., 8., f))
	|> (\f -> MScroll(f, TFillXY(), [IScriptRecordingEnabled(const(false))]))
}

MFocusTree2T(manager : MaterialManager, focus : MaterialFocus, m2t : (Material, MFocusGroup) -> Tropic, tabLevel : int) -> MListLine {
	emptyResult : [MListLine] = []; // Typechecker workaround
	hover = make(false);

	switchMaterialFocus(
		focus,
		\f ->
			MCustomLine(
				(\p -> TBaselineCols([
					MText2T(p, i2s(fgetValue(f.id)), [MCaption()])
					|> TSetMinWidth(TFixed(18., 0.))
					|> (\f2 -> TBorder(32. + i2d(tabLevel) * 16., 0., 8., 0., f2)),
					MEllipsisText2T(manager, p, MEllipsisText(f.name, [MCaptionSolid(), MShowTooltip(const(true))]), m2t)
					|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
					eitherMap(
						f.iScriptId,
						\id ->
							MEllipsisText2T(manager, p, MEllipsisText(id, [MCaption(), MShowTooltip(const(true))]), m2t)
							|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
						TEmpty()
					),
					MIconButton2T(
						manager,
						p,
						MIconButton(
							"add",
							\ ->
								addIScriptEventDialog(
									manager,
									focus,
									\rec -> addIScriptRecordWithDelay(manager, rec.first, rec.second),
									nop,
									m2t
								),
							[MIconSize(16.), MIconButtonBorder(4.)],
							[]
						),
						m2t
					)
					|> (\f2 -> TBorder(0., 0., 8., 0., f2))
				])
				|> (\f2 ->
					TConstruct(
						[
							makeSubscribe2focusHovered(manager, \ -> Some(f), hover)
						],
						f2
					)
				)
				|> TCenterY)
				|> MGetFocusGroup,
				[MClickEnabled(const(false)), MHeight(32.), THovering(hover)]
			),
		\f -> {
			expanded = make(false);
			hasItems = fselect(f.focusIds, FLift(\it -> sizeTree(it) > 0));

			MSubmenuLine(
				MCustomLine(
					(\p -> TBaselineCols([
						TIfLazy2(
							hasItems,
							\it ->
								TIfLazy2(
									expanded,
									\ex ->
										MIcon2T(
											p,
											if (ex)
												"arrow_drop_up"
											else
												"arrow_drop_down",
											if (it)
												[MIconSize(18.)]
											else
												[MIconSize(18.), FillOpacity(0.2)]
										),
									true
								),
							true
						)
						|> (\f2 -> TBorder(8. + i2d(tabLevel) * 16., 0., 0., 0., f2)),
						MText2T(p, i2s(fgetValue(f.id)), [MCaption()])
						|> TSetMinWidth(TFixed(16., 0.))
						|> (\f2 -> TBorder(8., 0., 8., 0., f2)),
						MEllipsisText2T(manager, p, MEllipsisText(f.name, [MCaptionSolid(), MShowTooltip(const(true))]), m2t)
						|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
						eitherMap(
							f.iScriptId,
							\id ->
								MEllipsisText2T(manager, p, MEllipsisText(id, [MCaption(), MShowTooltip(const(true))]), m2t)
								|> (\f2 -> TBorder(0., 0., 4., 0., f2)),
							TEmpty()
						),
						MIconButton2T(
							manager,
							p,
							MIconButton(
								"add",
								\ ->
									addIScriptEventDialog(
										manager,
										focus,
										\rec -> addIScriptRecordWithDelay(manager, rec.first, rec.second),
										nop,
										m2t
									),
								[MIconSize(18.), MIconButtonBorder(4.)],
								[]
							),
							m2t
						)
						|> (\f2 -> TBorder(0., 0., 8., 0., f2))
					])
					|> (\f2 ->
						TConstruct(
							[
								makeSubscribe2focusHovered(manager, \ -> Some(f), hover)
							],
							f2
						)
					)
					|> TCenterY)
					|> MGetFocusGroup,
					[MClickEnabled(hasItems), MHeight(32.), THovering(hover)]
				),
				fsubmap(
					fselect(f.focusIds, getTreeValues |> FLift),
					\f2 -> fif(f2.recordingEnabled, const(MFocusTree2T(manager, f2, m2t, tabLevel + 1)), const(MCustomLine(MEmpty(), [])))
				),
				[],
				expanded
			)
		}
	)
}