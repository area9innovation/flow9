import material/internal/material_edit_grid;
import material/internal/filebrowser/material_filebrowser_internal;
import material/iscript/material_iscript_util;
import material/iscript/material_iscript_filesystem;

export {
	getIScriptRecordButtons(
		manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic, script : Pair<double, IScriptRecord>,
		addPlay : bool, addFn : (Pair<double, IScriptRecord>) -> void, replaceFn : (Pair<double, IScriptRecord>) -> void,
		removeFn : () -> void
	) -> [Material];

	addIScriptRecordHover(manager : MaterialManager, script : Pair<double, IScriptRecord>, hover : DynamicBehaviour<bool>) -> (Material) -> Material;

	addIScriptEventDialog(manager : MaterialManager, focus : MaterialFocus, onOk : (Pair<double, IScriptRecord>) -> void,
		onCancel : () -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	editIScriptRecordDialog(manager : MaterialManager, editRecord : Pair<double, IScriptEditableRecord>,
		onOk : (Pair<double, IScriptRecord>) -> void, onCancel : () -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	defineGlobalAliasOnFocusDialog(manager : MaterialManager, focus : MaterialFocus, onOk : (string) -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	defineGlobalAliasDialog(manager : MaterialManager, componentName : string, id : List<IScriptIdentifier>, onOk : (string) -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	showRecordingModeDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	showRecordSettingsDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	showReplaySettingsDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	viewIScriptLogicalScreenshotDialog(manager : MaterialManager, screenshot : string, size : WidthHeight,
		m2t : (Material, MFocusGroup) -> Tropic) -> void;
	viewIScriptVisualScreenshotDialog(manager : MaterialManager, screenshot : string, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	showLogicalScreenshotCompareDialog(manager : MaterialManager, results : [IScriptReplayResult], m2t : (Material, MFocusGroup) -> Tropic) -> void;

	loadLocalIScriptDialog(manager : MaterialManager, appendToCurrent : bool, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	saveIScriptDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	loadDBIScriptDialog(manager : MaterialManager, appendToCurrent : bool, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	saveDBIScriptDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	saveLocalIScript(manager : MaterialManager, name : string, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	saveDBIScript(manager : MaterialManager, name : string, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	extendedLoadSaveIScriptDialog(manager : MaterialManager, storedIScript : StoredIScript, m2t : (Material, MFocusGroup) -> Tropic, isRunningB : Transform<bool>, onClose : () -> void) -> void;

	loadLocalIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	saveLocalIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	saveLocalIScriptScenario(manager : MaterialManager, path : string, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	loadDBIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	saveDBIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
	saveDBIScriptScenario(manager : MaterialManager, path : string, m2t : (Material, MFocusGroup) -> Tropic) -> void;

	scenarioViewDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void;
}

transformIntoInputDialog(manager : MaterialManager, onOk : (string) -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);
	nameIsOkB = make(false);
	nameErrorTextB = make(None());
	assignedNameB = make("");

	elements = [
		MParagraph("You are trying to transform event record into input record. Please, assign the unique name for it.", []),
		MFixed(0.0, 16.0),
		MConstruct([
				makeSubscribe2(assignedNameB, \un -> {
					if (isInputNameUnique(manager, un))
						nextDistinct(nameErrorTextB, None())
					else
						next(nameErrorTextB, Some(Pair("This name is already used", true)));
				})
			],
			MTextInput(assignedNameB,
				[MLabel("Assign name"), MFloatingLabel()],
				[MInputError(nameErrorTextB, [MInputIsOk(nameIsOkB), MRequiredField()])]
			)
		)
	];

	content = MGetFocusGroup(\p ->
		MLines(map(elements, \it -> MEGItem2T(p, it, [MWidth(400.)], m2t)))
	);

	dialogActions = MDialogActions([
		MTextButton("CANCEL", \ -> next(closeWhenB, true), [], [MShortcut("esc")]),
		MTextButton("TRANSFORM", \ -> {
			next(closeWhenB, true);
			onOk(getValue(assignedNameB));
		}, [], [MShortcut("enter"), MEnabled(feq(nameIsOkB, true))])
	]);

	dialogStyle = [
		MDialogTitle("Record transform"),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

transformIntoEventDialog(manager : MaterialManager, maybeInitial : Maybe<flow>, possibleValues : [flow], typeHelper : string, onOk : (flow) -> void,
	m2t : (Material, MFocusGroup) -> Tropic) -> void {

	closeWhenB = make(false);

	pair = makeValueInputByTypeHint(possibleValues, typeHelper, None(), const(true));
	valueB = pair.first;
	valueInputMaterial = MGetFocusGroup(\p -> MEGItem2T(p, pair.second, [], m2t));

	maybeApply(maybeInitial, \initial -> next(valueB, initial));

	elements = [
		MParagraph("You are trying to transform input record into event record. Please, enter the value for it.", []),
		MFixed(0.0, 16.0),
		valueInputMaterial
	];

	content = MGetFocusGroup(\p ->
		MLines(map(elements, \it -> MEGItem2T(p, it, [MWidth(400.)], m2t)))
	);

	dialogActions = MDialogActions([
		MTextButton("CANCEL", \ -> next(closeWhenB, true), [], [MShortcut("esc")]),
		MTextButton("TRANSFORM", \ -> {
			next(closeWhenB, true);
			onOk(getValue(valueB));
		}, [], [MShortcut("enter"),])
	]);

	dialogStyle = [
		MDialogTitle("Record transform"),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

getIScriptRecordButtons(
	manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic, script : Pair<double, IScriptRecord>,
	addPlay : bool, addFn : (Pair<double, IScriptRecord>) -> void, replaceFn : (Pair<double, IScriptRecord>) -> void,
	removeFn : () -> void
) -> [Material] {
	time = firstOfPair(script);
	r = secondOfPair(script);

	deleteButton = MIconButton(
		"delete",
		removeFn,
		[MRed(500), MIconSize(20.)],
		[MTooltipText(const(_("Delete action")))]
	);

	editButton = MIconButton(
		"edit",
		\ -> {
			editIScriptRecordDialog(
				manager,
				cast(script : Pair<double, IScriptRecord> -> Pair<double, IScriptEditableRecord>),
				replaceFn,
				nop,
				m2t
			)
		},
		[MIconSize(20.)],
		[MTooltipText(const(_("Edit action")))]
	);

	buttons =
		switch (r : IScriptRecord) {
			IScriptBehaviourRecord(descriptor, value, type, callstack) : {
				playButton =
					if (addPlay) {
						MIconButton(
							"play_arrow",
							\ ->
								repeatBehaviourById(manager, descriptor, value) |> ignore,
							[MGreen(500), MIconSize(20.)],
							[MTooltipText(const(_("Fire action")))]
						)
					} else
						MEmpty();

				transformIntoInputButton =
					switch (type) {
						ISInputValue(pv, th, canInput) : {
							if (canInput) {
								MIconButton(
									"input",
									\ -> {
										transformIntoInputDialog(
											manager,
											\name -> {
												newRecord = Pair(time, IScriptInputRecord(descriptor, name, pv, th));
												replaceFn(newRecord);
											},
											m2t
										)
									},
									[MIconSize(20.)],
									[MTooltipText(const(_("Transform into script input")))]
								)
							} else
								MEmpty();
						}
						default : MEmpty();
					};

				[
					playButton,
					transformIntoInputButton,
					editButton,
				]
			}
			IScriptRequestRecord(url, post, headers, params, delay, response) : [];
			IScriptScreenshot(__, __) : [
				if (addPlay) {
					MIconButton(
						"play_arrow",
						\ ->
							applyIScriptScreenshot(manager, r),
						[MGreen(500), MIconSize(20.)],
						[MTooltipText(const(_("Apply screenshot")))]
					)
				} else {
					MEmpty()
				}
			];
			IScript(recordingStarted, stack) : [
				// if (addPlay) {
				// 	MIconButton(
				// 		"play_arrow",
				// 		\ -> applyIScriptScreenshot(manager, r),
				// 		[MGreen(500), MIconSize(20.)],
				// 		[MTooltipText("Apply screenshot")]
				// 	)
				// } else {
				// 	MEmpty()
				// }
			];
			IScriptLogicalScreenshot(screenshot, size) : [
				// if (addPlay) {
				// 	MIconButton(
				// 		"play_arrow",
				// 		\ ->
				// 			applyIScriptScreenshot(manager, r),
				// 		[MGreen(500), MIconSize(20.)],
				// 		[MTooltipText("Apply screenshot")]
				// 	)
				// } else {
				// 	MEmpty()
				// },
				MIconButton(
					"pageview",
					\ -> viewIScriptLogicalScreenshotDialog(manager, screenshot, size, m2t),
					[MIconSize(20.)],
					[MTooltipText(const(_("View screenshot")))]
				)
			];
			IScriptVisualScreenshot(screenshot) : [
				MIconButton(
					"pageview",
					\ -> viewIScriptVisualScreenshotDialog(manager, screenshot, m2t),
					[MIconSize(20.)],
					[MTooltipText(const(_("View screenshot")))]
				)
			];
			IScriptInputRecord(descriptor, name, pv, th) : {
				transformIntoEventButton = MIconButton(
					"transform",
					\ -> {
						inputValue = findDef(getValue(manager.iscript.input), \input -> input.name == name, IScriptInputValue("", "", None()));

						transformIntoEventDialog(
							manager,
							inputValue.value,
							pv,
							th,
							\value -> {
								newRecord = Pair(time, IScriptBehaviourRecord(descriptor, value, ISInputValue(pv, th, true), ""));
								replaceFn(newRecord);
							},
							m2t
						)
					},
					[MIconSize(20.)],
					[MTooltipText(const(_("Transform into event")))]
				);

				addOutputButton = MIconButton(
					"launch",
					\ -> {
						freeIndex = countUntil(1, 100000, \i -> isOutputNameUnique(manager, name + "_output_" + i2s(i)));
						newRecord = Pair(time + 1.0, IScriptOutputRecord(descriptor, name + "_output_" + i2s(freeIndex)));
						addFn(newRecord);
					},
					[MIconSize(20.)],
					[MTooltipText(const(_("Add output nearby")))]
				);

				[
					transformIntoEventButton,
					addOutputButton,
					editButton,
				]
			}
			IScriptOutputRecord(__, __) : [editButton];
			default:
				[]
		}

	arrayPush(buttons, deleteButton);
}

addIScriptRecordHover(manager : MaterialManager, script : Pair<double, IScriptRecord>, hover : DynamicBehaviour<bool>) -> (Material) -> Material {
	eitherMap(
		switch (script.second : IScriptRecord) {
			IScriptBehaviourRecord(descriptor, value, type, callstack) : {
				getMaterialFocusByIScriptId(manager.focus, descriptor.component.id);
			}
			IScriptInputRecord(descriptor, __, __, __) : {
				getMaterialFocusByIScriptId(manager.focus, descriptor.component.id);
			}
			IScriptOutputRecord(descriptor, __) : {
				getMaterialFocusByIScriptId(manager.focus, descriptor.component.id);
			}
			default:
				None();
		},
		\f -> \content ->
			MConstruct(
				[
					makeSubscribe2focusHovered(manager, \ -> Some(f), hover)
				],
				content
			),
		idfn
	)
}

addIScriptEventDialog(manager : MaterialManager, focus : MaterialFocus, onOk : (Pair<double, IScriptRecord>) -> void,
	onCancel : () -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void {

	closeWhenB = make(false);

	behaviourNames = getTreeKeys(focus.behaviours);
	behaviourTypes : [IScriptRecordType] = map(getTreeValues(focus.behaviours), \pair : Pair<DynamicBehaviour<flow>, IScriptRecordType>, -> pair.second);

	getBehaviourValue = \bid -> {
		if (bid >= 0)
			getValue(either(lookupTree(focus.behaviours, behaviourNames[bid]), Pair(make(""), ISMiscEvent())).first)
		else
			flow("")
	}

	recordTimeB = make(0.0);
	uniqueNameB = make("");

	nameIsOkB = make(true);
	nameErrorTextB = make(None());
	eventDurationB = make(100.0);

	focId = getFullMFocusId(focus);

	availableEventsIndexes = filtermapi(behaviourTypes, \i, type -> {
		if (isSameStructType(type, ISMiscEvent()))
			None()
		else
			Some(i);
	});
	availableInputsIndexes = filtermapi(behaviourTypes, \i, type -> {
		switch (type) {
			ISInputValue(__, __, canBeInput) : if (canBeInput) Some(i) else None();
			default : None();
		}
	});
	availableOutputsIndexes = filtermapi(behaviourTypes, \i, type -> {
		isAvailableForOutput = isSameStructType(type, ISInputValue([], "", false)) || isSameStructType(type, ISMiscEvent());

		if (isAvailableForOutput)
			Some(i)
		else
			None();
	});

	behaviourIdB = make(if (length(availableEventsIndexes) > 0) availableEventsIndexes[0] else -1);
	valueB : DynamicBehaviour<flow> = make(getBehaviourValue(getValue(behaviourIdB)));

	actionIndexB = make(0);
	actions = [
		Pair(0, "Event"),
		Pair(1, "Input"),
		Pair(2, "Output")
	];

	eventElements = [
		MEGDropDown("Event", behaviourIdB, Pair(-1, "No events available"), map(availableEventsIndexes, \i -> Pair(i, behaviourNames[i])), []),
		MEGMutable(fselect(behaviourIdB, FLift(\bid -> {
			if (bid >= 0) {
				durationInput = MEGTextInput("Event duration (ms)", eventDurationB, [MInputFilter(\s, foc -> d2s(max(s2d(s), 0.)))]);

				switch (behaviourTypes[bid] : IScriptRecordType) { // TODO
					ISDetailedTextEvent() : MEmpty();
					ISMouseEvent() : durationInput;
					ISKeyEvent() : MEmpty();
					ISInteractionEvent() : MEmpty();
					ISClickEvent() : MEmpty();
					ISAppearanceEvent() : MEmpty();
					ISValueEvent() : MEmpty();
					ISEnableEvent() : MEmpty();
					ISSelectionEvent() : MEmpty();

					ISMiscEvent() : {
						next(valueB, getBehaviourValue(bid));
						MEGSwitchControlOrTextInput("Input value", valueB, [MHelperText(const(Some(getTypeString(getValue(valueB)))), true)]);
					}
					ISWigiEvent() : MEmpty();
					ISPebbleEvent() : MEmpty();
					ISInputValue(pv, typeHint, __) : {
						next(valueB, getBehaviourValue(bid));
						pair = makeValueInputByTypeHint(pv, typeHint, None(), const(true));

						MConstruct([
								\ -> fconnect(pair.first, valueB)
							],
							MGetFocusGroup(\p -> MEGItem2T(p, pair.second, [], m2t))
						)
					}
					ISCustomIScriptRecordType(__) : MEmpty();
				}
			} else
				TEmpty()
		})))
	];

	makeNameInput = \checkUniqueFn -> {
		MConstruct([
				makeSubscribe2(uniqueNameB, \un -> {
					if (checkUniqueFn(manager, un))
						nextDistinct(nameErrorTextB, None())
					else
						next(nameErrorTextB, Some(Pair("This name is already used", true)));
				})
			],
			MTextInput(uniqueNameB,
				[MLabel("Assign name"), MFloatingLabel()],
				[MInputError(nameErrorTextB, [MInputIsOk(nameIsOkB), MRequiredField()])]
			)
		)
	}

	inputElements = [
		MEGDropDown("Select Input", behaviourIdB, Pair(-1, "No inputs available"), map(availableInputsIndexes, \i -> Pair(i, behaviourNames[i])), []),
		makeNameInput(isInputNameUnique)
	];

	outputElements = [
		MEGDropDown("Select value to output", behaviourIdB, Pair(-1, "No outputs available"), map(availableOutputsIndexes, \i -> Pair(i, behaviourNames[i])), []),
		makeNameInput(isOutputNameUnique)
	];

	elements = [
		MParagraph("Id: [" + IScriptId2s(focId) + "]", [MSubheading(), MWidth(-1.)]),
		MEGTextInput("Delay after beginning (ms)", recordTimeB, [MInputFilter(\s, foc -> d2s(max(s2d(s), 0.)))]),
		MEGDropDown("Action type", actionIndexB, Pair(-1, "Select Action type"), actions, []),
		MEGMutable(fselect(actionIndexB, FLift(\actionIndex -> {
			next(uniqueNameB, "");

			actionElements =
				if (actionIndex == 0) {
					eventElements
				} else if (actionIndex == 1) {
					bid = getValue(behaviourIdB);
					idExists = exists(availableInputsIndexes, \idx -> idx == bid);

					if (!idExists) {
						newBid = if (length(availableInputsIndexes) > 0) availableInputsIndexes[0] else -1;
						next(behaviourIdB, newBid);
					}

					inputElements
				} else if (actionIndex == 2) {
					bid = getValue(behaviourIdB);
					idExists = exists(availableOutputsIndexes, \idx -> idx == bid);

					if (!idExists) {
						newBid = if (length(availableOutputsIndexes) > 0) availableOutputsIndexes[0] else -1;
						next(behaviourIdB, newBid);
					}

					outputElements
				} else
					[];

			MGetFocusGroup(\p -> MLines(map(actionElements, \it -> MEGItem2T(p, it, [MWidth(400.)], m2t))))
		})))
	];

	content = MGetFocusGroup(\p ->
		MLines(map(elements, \it -> MEGItem2T(p, it, [MWidth(400.)], m2t)))
	);

	dialogActions = MDialogActions([
		MTextButton("CANCEL", \ -> {
			next(closeWhenB, true);
			onCancel()
		}, [], [MShortcut("esc")]),
		MTextButton("ADD TO SCRIPT", \ -> {
			actionIndex = getValue(actionIndexB);
			bid = getValue(behaviourIdB);
			recordTime = getValue(recordTimeB);
			uniqueName = getValue(uniqueNameB);
			eventDuration = getValue(eventDurationB);

			descriptor = IScriptBehaviourDescriptor(
				IScriptComponentDescriptor(
					focus.name,
					focId
				),
				behaviourNames[bid]
			);

			result : Pair<double, IScriptRecord> =
				if (actionIndex == 0) {
					callstackString = getCallstackIfNeeded(manager);

					res : Pair<double, IScriptRecord> =
						switch (behaviourTypes[bid]) {
							// ISMouseEvent() :
							// 	Pair(
							// 		recordTime,
							// 		IScriptEventRecord(
							// 			descriptor,
							// 			true,
							// 			false,
							// 			eventDuration
							// 		)
							// 	);
							default : Pair(
								recordTime,
								IScriptBehaviourRecord(
									descriptor,
									getValue(valueB),
									behaviourTypes[bid],
									callstackString
								)
							);
						}

					res
				} else if (actionIndex == 1) {
					valuesAndHint : Pair<[flow], string> =
						switch (behaviourTypes[bid]) {
							ISInputValue(pv, typeHint, __) : Pair(pv, typeHint);
							default : Pair([], "");
						};

					Pair(
						recordTime,
						IScriptInputRecord(
							descriptor,
							uniqueName,
							valuesAndHint.first,
							valuesAndHint.second
						)
					)
				} else {
					Pair(
						recordTime,
						IScriptOutputRecord(
							descriptor,
							uniqueName
						)
					)
				}

			next(closeWhenB, true);
			onOk(result);
		}, [], [MShortcut("enter"), MEnabled(fand(fneq(behaviourIdB, -1), feq(nameIsOkB, true)))])
	]);

	dialogStyle = [
		MDialogTitle(focus.name),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

editIScriptRecordDialog(manager : MaterialManager, editRecord : Pair<double, IScriptEditableRecord>,
	onOk : (Pair<double, IScriptRecord>) -> void, onCancel : () -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void {

	closeWhenB = make(false);
	record = editRecord.second;
	recordTimeB = make(editRecord.first);
	uniqueNameB = make("");
	nameIsOkB = make(true);
	nameErrorTextB = make(None());
	eventDurationB = make(100.0);
	valueB : DynamicBehaviour<flow> = make(flow(""));

	makeNameInput = \checkUniqueFn, initialName -> {
		MConstruct([
				makeSubscribe2(uniqueNameB, \un -> {
					if (un == initialName || checkUniqueFn(manager, un))
						nextDistinct(nameErrorTextB, None())
					else
						next(nameErrorTextB, Some(Pair("This name is already used", true)));
				})
			],
			MTextInput(uniqueNameB,
				[MLabel("Assigned name"), MFloatingLabel()],
				[MInputError(nameErrorTextB, [MInputIsOk(nameIsOkB), MRequiredField()])]
			)
		)
	}

	actionElement =
		switch (record : IScriptEditableRecord) {
			IScriptInputRecord(descriptor, name, __, __) : {
				next(uniqueNameB, name);

				makeNameInput(isInputNameUnique, name);
			}
			IScriptOutputRecord(descriptor, name) : {
				next(uniqueNameB, name);

				makeNameInput(isOutputNameUnique, name);
			}
			IScriptBehaviourRecord(descriptor, value, type, __) : {
				next(valueB, value);

				switch (type) {
					ISMiscEvent() : MEGTextInput("Input value", valueB, [MHelperText(const(Some(getTypeString(value))), true)]);
					ISInputValue(pv, typeHint, __) : {
						pair = makeValueInputByTypeHint(pv, typeHint, None(), const(true));

						MConstruct([
								\ -> fconnect(pair.first, valueB)
							],
							MGetFocusGroup(\p -> MEGItem2T(p, pair.second, [], m2t))
						)
					}
					default : MEmpty();
				}
			}
			default: TEmpty()
		}

	triple =
		switch (record : IScriptEditableRecord) {
			IScriptInputRecord(descriptor, __, __, __) : Triple("Input \"" + descriptor.name + "\"", descriptor.component.id, descriptor.component.name);
			IScriptOutputRecord(descriptor, __) : Triple("Output \"" + descriptor.name + "\"", descriptor.component.id, descriptor.component.name);
			IScriptBehaviourRecord(descriptor, __, __, __) : Triple("Event \"" + descriptor.name + "\"", descriptor.component.id, descriptor.component.name);
			default : Triple("", makeList(), "");
		}

	recordAction = triple.first;
	id = triple.second;
	title = triple.third;

	elements = [
		MParagraph("Id: [" + IScriptId2s(id) + "]", [MSubheading(), MWidth(-1.)]),
		MFixed(0.0, 8.0),
		MText(recordAction, [MSubheading()]),
		MFixed(0.0, 8.0),
		MEGTextInput("Delay after beginning (ms)", recordTimeB, [MInputFilter(\s, foc -> d2s(max(s2d(s), 0.)))]),
		actionElement
	];

	content = MGetFocusGroup(\p ->
		MLines(map(elements, \it -> MEGItem2T(p, it, [MWidth(400.)], m2t)))
	);

	dialogActions = MDialogActions([
		MTextButton("CANCEL", \ -> {
			next(closeWhenB, true);
			onCancel()
		}, [], [MShortcut("esc")]),
		MTextButton("APPLY", \ -> {
			recordTime = getValue(recordTimeB);
			uniqueName = getValue(uniqueNameB);
			eventDuration = getValue(eventDurationB);
			value = getValue(valueB);

			result : Pair<double, IScriptRecord> = Pair(recordTime,
				switch (record : IScriptEditableRecord) {
					IScriptInputRecord(descriptor, __, pv, helper) : IScriptInputRecord(descriptor, uniqueName, pv, helper);
					IScriptOutputRecord(descriptor, __) : IScriptOutputRecord(descriptor, uniqueName);
					IScriptBehaviourRecord(descriptor, __, type, cs) : IScriptBehaviourRecord(descriptor, value, type, cs);
					default: record;
				}
			);

			next(closeWhenB, true);
			onOk(result);
		}, [], [MShortcut("enter"), MEnabled(feq(nameIsOkB, true))])
	]);

	dialogStyle = [
		MDialogTitle(title),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

defineGlobalAliasOnFocusDialog(manager : MaterialManager, focus : MaterialFocus, onOk : (string) -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	defineGlobalAliasDialog(
		manager,
		focus.name,
		getFullMFocusId(focus),
		onOk,
		m2t
	);
}

defineGlobalAliasDialog(manager : MaterialManager, componentName : string, id : List<IScriptIdentifier>, onOk : (string) -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);
	aliasB = make("");

	content = MAvailable(
		MLines([
			MParagraph("You are defining new alias for component", []),
			MFixed(0.0, 8.0),
			MParagraph(componentName + " [" + IScriptId2s(id) + "]", [MSubheading()]),
			MFixed(0.0, 24.0),
			MTextInput(aliasB, [], [])
		]),
		MFixed(560.0, 0.0)
	);

	dialogActions = MDialogActions([
		MTextButton("CLOSE", \ -> next(closeWhenB, true), [], [MShortcut("esc")]),
		MTextButton("DEFINE", \ -> {
				next(closeWhenB, true);
				onOk(getValue(aliasB));
			}, [], [MShortcut("enter"), MEnabled(fneq(aliasB, ""))]
		),
	]);

	dialogStyle = [
		MDialogTitle("Component alias definition"),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

showRecordingModeDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);
	material = MText("You already have recorded script. Do you want to continue recording or start a new record?", []);
	captureOptions = manager.iscript.getCaptureOptions();

	dialogStyle = [
		MDialogTitle("Choose record mode"),
		MDialogUseFrame(),
		MDialogScroll(),
		MDialogActions([
			MTextButton("CANCEL", \ -> {
					next(closeWhenB, true);
					setIScriptState(manager, IScriptStopped());
				},
				[], [MShortcut("esc")]
			),
			MTextButton("CONTINUE", \ -> {
					next(closeWhenB, true);
					setIScriptState(manager, IScriptRecording(captureOptions, true));
				},
				[], []
			),
			MTextButton("START NEW", \ -> {
					next(closeWhenB, true);
					setIScriptState(manager, IScriptRecording(captureOptions, false));
				},
				[], [MShortcut("enter")]
			)
		]),
		IScriptRecordingEnabled(const(false))
	];

	content = MGetFocusGroup(\p -> {
		MLines(map([
				material
			],
			\it -> MEGItem2T(p, it, [MWidth(400.)], m2t)
		))
	});

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

showRecordSettingsDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);

	content = MAvailable(
		MLines([
			MBaselineCols([
				MText("Capture callstack", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureCallstack, []),
			]),

			MBaselineCols([
				MText("Detailed capture for text inputs", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureTextDetails, []),
			]),
			MBaselineCols([
				MText("Capture HTTP requests", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureHttpRequests, []),
			]),
			MBaselineCols([
				MText("Capture mouse events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureMouseEvents, []),
			]),
			MBaselineCols([
				MText("Capture keystroke events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureKeyEvents, []),
			]),
			MBaselineCols([
				MText("Capture interaction events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureInteractionEvents, []),
			]),
			MBaselineCols([
				MText("Capture hover events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureHover, [
					MEnabled(manager.iscript.settings.captureInteractionEvents)
				]),
			]),
			MBaselineCols([
				MText("Capture click events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureClickEvents, []),
			]),
			MBaselineCols([
				MText("Capture appearance events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureAppearanceEvents, []),
			]),
			MBaselineCols([
				MText("Capture value events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureValueEvents, []),
			]),
			MBaselineCols([
				MText("Capture enable events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureEnableEvents, []),
			]),
			MBaselineCols([
				MText("Capture selection events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureSelectionEvents, []),
			]),
			MBaselineCols([
				MText("Capture input events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureInputValues, []),
			]),
			MBaselineCols([
				MText("Capture wigi events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureWigiEvents, []),
			]),
			MBaselineCols([
				MText("Capture pebble events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.capturePebbleEvents, []),
			]),
			MBaselineCols([
				MText("Capture custom events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureCustomTypes, []),
			]),
			MBaselineCols([
				MText("Capture misc events", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.captureMiscEvents, []),
			]),
		]),
		MFixed(400.0, 0.0)
	);

	dialogActions = MDialogActions([
		MTextButton("CLOSE", \ -> next(closeWhenB, true), [], [MShortcut("esc")]),
	]);

	dialogStyle = [
		MDialogTitle("Record settings"),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

showReplaySettingsDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);
	currentCursorScheme = make(getIScriptReplayCurrentCursorSchemeId(manager));
	repeats = make(i2d(getValue(manager.iscript.settings.replayRepeats)));

	content = MAvailable(
		MLines([
			// MBaselineCols([
			// 	MText("Apply first screenshot (reset state)", [MSubheading()]),
			// 	TFillX(),
			// 	MSwitchControl(manager.iscript.settings.replayApplyFirstScreenshot, []),
			// ]),
			MBaselineCols([
				MText("Check errors", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.replayCheckErrors, []),
			]),
			// MBaselineCols([
			// 	MText("Check all behaviours", [MSubheading()]),
			// 	TFillX(),
			// 	MSwitchControl(
			// 		manager.iscript.settings.replayCheckAllBehaviours,
			// 		[MEnabled(manager.iscript.settings.replayCheckErrors)]
			// 	),
			// ]),
			MBaselineCols([
				MText("Verbose output", [MSubheading()]),
				TFillX(),
				MSwitchControl(manager.iscript.settings.replayVerbose, []),
			]),
			if (js)
				MBaselineCols([
					MText("Enabled profile", [MSubheading()]),
					TFillX(),
					MSwitchControl(manager.iscript.settings.replayProfile, []),
				])
			else
				MEmpty(),
			MBaselineCols([
				MText("Speed", [MSubheading()]),
				TFillX(),
				MSlider(manager.iscript.settings.replaySpeed, [MWidth(200.0), MSliderRange(0.1, 10.0), MSliderDisplayValue(true)]),
			]),
			MBaselineCols([
				MText("Timeout, ms", [MSubheading()]),
				TFillX(),
				MSlider(manager.iscript.settings.replayTimeout,
					[MWidth(200.0), MSliderRange(0.0, 1000.0), MSliderDisplayValue(true), MSliderStep(50.0)]),
			]),
			MConstruct(
				[
					makeSubscribe(repeats,
						\v -> nextDistinct(manager.iscript.settings.replayRepeats, round(v))
					)
				],
				MBaselineCols([
					MText("Repeat counts", [MSubheading()]),
					TFillX(),
					MSlider(repeats,
						[MWidth(200.0), MSliderRange(1.0, 10.0), MSliderDisplayValue(true), MSliderStep(1.0)]),
				])
			),
			MBaselineCols([
				MText("Current cursor theme", [MSubheading()]),
				TFillX(),
				MDropDownMenu(
					mapi(getIScriptReplayCursorSchemes(manager), \i, v ->
						MMenuCustomLine(
							MBaselineCols(
								[
									MCenterIn(v.defaultCursor.shape, TFixed(32.0, 32.0)),
									MFixedX(16.0),
									MCenterY(MText(v.name, []))
								]
							),
							[MOnClick(\ -> setIScriptReplayCurrentCursorSchemeId(manager, i))]
							)
						),
					currentCursorScheme,
					[])
			]),

		]),
		MFixed(400.0, 0.0)
	);

	dialogActions = MDialogActions([
		MTextButton("CLOSE", \ -> next(closeWhenB, true), [], [MShortcut("esc")]),
	]);

	dialogStyle = [
		MDialogTitle("Replay settings"),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}

viewIScriptLogicalScreenshotDialog(manager : MaterialManager, screenshot : string, size : WidthHeight, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);

	TFixSize(
		TFForm(deserializeLogicalSnapshot(manager, screenshot, true, m2t), zeroTMetrics),
		TFixed(size.width, size.height)
	)
	|> (\f ->
		renderMDialog(
			manager,
			closeWhenB,
			[
				MDialogTitle("Right click any text to add it to record stack"),
				MDialogUseFrame(),
				MDialogScroll(),
				MDialogActions([
					// MTextButton("CANCEL", \ -> {
					// 	next(closeWhenB, true);
					// }, [], [MShortcut("esc")]),
					MTextButton("OK", \ -> {
						next(closeWhenB, true);
						// lc = getValue(loadChoice);

						// if (lc == 0)
						// 	next(manager.iscript.iScriptB, iScript)
						// else if (lc == 1)
						// 	addRecordToIScript(manager, Pair(getValue(recordTime), iScript), getValue(fileName))
						// else
						// 	iScriptToFile2(manager, iScript, getValue(fileName)) |> ignore
					}, [], [MShortcut("enter")])
				]),
				IScriptRecordingEnabled(const(false))
			],
			f,
			m2t
		)
	)
}

viewIScriptVisualScreenshotDialog(manager : MaterialManager, screenshot : string, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);
	availViewSizeB = make(WidthHeight(0.0, 0.0));

	MAttachBox(
		MSelect(availViewSizeB,
			\vs -> MGroup2(
				MZoom(TPicture(screenshot, []), TFixed(vs.width, vs.height), true),
				MFillXY()
			)
		),
		availViewSizeB
	)
	|> (\f ->
		renderMDialog(
			manager,
			closeWhenB,
			[
				MDialogTitle("Visual screenshot"),
				MDialogUseFrame(),
				MDialogScroll(),
				MDialogActions([
					MTextButton("OK", \ -> {
						next(closeWhenB, true);
					}, [], [MShortcut("enter")])
				]),
				IScriptRecordingEnabled(const(false))
			],
			f,
			m2t
		)
	)
}

showLogicalScreenshotCompareDialog(
	manager : MaterialManager,
	replayResults : [IScriptReplayResult],
	m2t : (Material, MFocusGroup) -> Tropic
) -> void {
	replayResultsRef = ref replayResults;

	if (length(^replayResultsRef) > 0) {
		closeWhenB = make(false);

		resultDataTable = make([]);

		updateResultDataTable = \ -> {
			res = mapi(
				^replayResultsRef,
				\i : int, v : IScriptReplayResult -> {
					iconSuccess = MIcon("done", [MGreen(500)]);
					iconCurrent = MIcon("done_all", [MGreen(500)]);
					iconError = MIcon("clear", [MRed(500)]);
					[
						MText(i2s(i), []),
						MText(fileNameOnly(v.filepath), []),
						if (v.isReplaySuccessful) iconSuccess else iconError,
						if (isSome(v.iscriptVisualScreenshotM))
							MZoom(TPicture(either(v.iscriptVisualScreenshotM, IScriptVisualScreenshot("")).screenshot, []), TFixed(120.0, 90.0), true)
						else
							MCenterIn(iconError, TFixed(120.0, 90.0)),
						MZoom(TPicture(v.afterReplayVisualScreenshot.screenshot, []), TFixed(120.0, 90.0), true),
						if (isSome(v.iscriptLogicalScreenshotM)) {
							if (either(v.iscriptLogicalScreenshotM, IScriptLogicalScreenshot("", WidthHeight(0., 0.))).screenshot == v.afterReplayLogicalScreenshot.screenshot)
								iconSuccess
							else
								iconError
						} else iconError
					]
				}
			);
			next(resultDataTable, res)
		}

		updateResultDataTable();

		compareFn = \rowId -> {
			closeWhen2B = make(false);
			transparentB = make(0.5);
			availViewSizeB = make(WidthHeight(0.0, 0.0));

			prevRR = (^replayResultsRef)[rowId];

			iscriptVisualScreenshot = make(either(prevRR.iscriptVisualScreenshotM, IScriptVisualScreenshot("")).screenshot);
			replayVisualScreenshot = prevRR.afterReplayVisualScreenshot.screenshot;

			dialogStyle2 = [
				MDialogTitle("Compare screenshots"),
				MDialogUseFrame(),
				MDialogActions([
					MTextButton("SET REPLAY SCREENSHOT AS CORRECT IN ISCRIPT", \ -> {
						next(iscriptVisualScreenshot, prevRR.afterReplayVisualScreenshot.screenshot);
						replayResultsRef := replace(^replayResultsRef, rowId,
							IScriptReplayResult(
								prevRR.filepath,
								prevRR.isReplaySuccessful,
								Some(prevRR.afterReplayLogicalScreenshot),
								Some(prevRR.afterReplayVisualScreenshot),
								prevRR.afterReplayLogicalScreenshot,
								prevRR.afterReplayVisualScreenshot
							)
						);
						updateIScriptFile(manager, prevRR.filepath,
							\storedIScript : StoredIScript -> {
								storedIScript.script.stack
								|> (\stack -> switch (findIScriptLastRecordKeyValueOfType(stack, IScriptLogicalScreenshot("", WidthHeight(0., 0.)))) {
									Some(v) : replaceRecordInIScriptStack(stack, v.first, v.second, prevRR.afterReplayLogicalScreenshot);
									None() : addIScriptStackRecord(stack, prevRR.afterReplayLogicalScreenshot);
								})
								|> (\stack -> switch (findIScriptLastRecordKeyValueOfType(stack, IScriptVisualScreenshot(""))) {
									Some(v) : replaceRecordInIScriptStack(stack, v.first, v.second, prevRR.afterReplayVisualScreenshot);
									None() : addIScriptStackRecord(stack, prevRR.afterReplayVisualScreenshot);
								})
								|> (\stack ->
								StoredIScript(
									storedIScriptCurrentVersion,
									storedIScript.additionalInfo,
									IScript(
										storedIScript.script.recordingStarted,
										stack
									)
								))
							}
						);
						updateResultDataTable();
					}, [], []),
					MTextButton("CLOSE", \ -> next(closeWhen2B, true), [], [MShortcut("esc")])
				]),
				IScriptRecordingEnabled(const(false))
			];

			content2 =
				MLines([
					MSlider(transparentB, [MSliderRange(0.0, 1.0), MSliderStep(0.1), MSliderDisplayValue(true), MSliderIconLeft("brightness_1"), MSliderIconRight("brightness_5")]),
					MAttachBox(
						MGroupSameMetrics(
							[
								MFillXY(),
								MSelect(iscriptVisualScreenshot, \vs -> if (vs != "") MZoom(TPicture(vs, []), MFillXY(), true) else MFillXY()),
								MZoom(MAlpha(transparentB, TPicture(replayVisualScreenshot, [])), MFillXY(), true)
							]
						),
						availViewSizeB
					)
				]);

			renderMDialog(
				manager,
				closeWhen2B,
				dialogStyle2,
				content2,
				m2t
			)
		};

		dialogStyle = [
			MDialogTitle("Resulting screenshots"),
			MDialogUseFrame(),
			MDialogScroll(),
			MDialogActions([MTextButton("CLOSE", \ -> next(closeWhenB, true), [], [MShortcut("esc")])]),
			IScriptRecordingEnabled(const(false))
		];

		content =
			MLines([
				MFixedY(16.0),
				MDynamicDataTable(
					[
						MColumn("#", "", 48, [CenterAlign()]),
						MColumn("Filename", "IScript filename", 196, []),
						MColumn("Replay result", "", 80, [CenterAlign()]),
						MColumn("IScript screenshot", "", 144, [CenterAlign()]),
						MColumn("Replay screenshot", "", 144, [CenterAlign()]),
						MColumn("Screenshots are equal", "", 120, [CenterAlign()])
					],
					resultDataTable,
					[TScrollEnabled(const(true)), MFullWidth(), MRowHeight(90.0), MOnListClick(const(true), compareFn)]
				)
				|> (\f -> MGroup2(TFillXY(), f))
			]);

		renderMDialog(
			manager,
			closeWhenB,
			dialogStyle,
			content,
			m2t
		);
	}
}

loadIScriptDialog(
	manager : MaterialManager,
	onOpen : ([FbObject]) -> void,
	onCancel : () -> void,
	title : string,
	extensions : [string],
	additionalStyle : [FbMStyle],
	appendToCurrent : bool,
	recordTimeB : DynamicBehaviour,
	m2t : (Material, MFocusGroup) -> Tropic
) -> void {

	recordTimeInputB = make(d2s(getValue(recordTimeB)));
	closeDelayDialog = make(false);
	saveDelayEnable = fneq(recordTimeInputB, "");

	delayDialog = \__, __ -> {
		renderMDialog(manager, closeDelayDialog,
			[
				MDialogTitle("Enter delay value"),
				MDialogUseFrame(),
				MDialogActions([
					MTextButton(_("CANCEL"), \-> next(closeDelayDialog, true), [], [MShortcut("esc")]),
					MTextButton(
						_("SET"),
						\ -> {
							next(recordTimeB, s2d(getValue(recordTimeInputB)));
							next(closeDelayDialog, true);
						},
						[],
						[
							MShortcut("enter"),
							MEnabled(saveDelayEnable)
						]
					)
				]),
			],
			MConstruct(
				[],
				MCols([
					MFixSize(MText("Delay (ms):", []), TFixed(75.0, 20.0)),
					TFixed(8.0, 0.0),
					MTextInput(
						recordTimeInputB,
						[
							TextInputType(NumericType()),
							MWidth(400.0),
							MMaxLines(1)
						],
						[
							MEnabled(const(true))
						]
					)
				])
			),
			m2t
		)
	}

	renderCustomMFileBrowser(manager, manager.focus, title, extensions,
		concat(
			if (appendToCurrent) [CustomExtFBB("Delay (ms)", delayDialog)] else [],
			[
				OpenExtFBB(onOpen),
				CancelExtFBB(onCancel)
			]
		),
		concatA([
			[
				FbModalWindow(true)
			],
			additionalStyle
		]),
		m2t
	);
}

loadLocalIScriptDialog(manager : MaterialManager, appendToCurrent : bool, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	storeFilesystemExtAPI = getFilesystemExtAPI();

	restoreFilesystemExtAPI = \ -> setFilesystemExtAPI(storeFilesystemExtAPI);

	setLocalFilesystemExtAPI();

	recordTimeB = make(0.);

	onOpen = \fileObjects : [FbObject] -> {
		if (fileObjects != []) {
			fileName = fileObjects[0].fullPath;
			next(manager.iscript.currentFileNameB, fileName);
			if (appendToCurrent)
				addIScriptRecordWithDelay(manager, getValue(recordTimeB), iScriptFromLocalFile2(manager, fileName))
			else
				iScriptFromLocalFile(manager, fileName);
		} else {
			// Should never happens
			iScriptInfo(manager, "Warning: no files selected", None());
		}
		restoreFilesystemExtAPI();
	};

	onCancel = \ -> restoreFilesystemExtAPI();

	loadIScriptDialog(
		manager,
		onOpen,
		onCancel,
		"Open file",
		[".iscript"],
		[
			FbCurrentPath(make("")),
			FbStartDir(getCurrentDirectory())
		],
		appendToCurrent,
		recordTimeB,
		m2t
	);
}

saveIScriptDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	fileNameB = make(getValue(manager.iscript.currentFileNameB));

	storeFilesystemExtAPI = getFilesystemExtAPI();

	restoreFilesystemExtAPI = \ -> setFilesystemExtAPI(storeFilesystemExtAPI);

	setLocalFilesystemExtAPI();
	onSave = \fileObjects -> {
		if (fileObjects != []) {
			filename = if (strContains(fileObjects[0].fullPath, ".iscript"))
				fileObjects[0].fullPath
			else
				concatStrings([fileObjects[0].fullPath, ".iscript"]);
			next(fileNameB, filename);
			iScriptInfo(manager, filename, None());
			saveLocalIScript(manager, getValue(fileNameB), m2t);
		} else {
			// Should never happen
			iScriptInfo(manager, "Warning: no files selected", None());
		}
		restoreFilesystemExtAPI();
	};

	onCancel = \ -> restoreFilesystemExtAPI();

	renderCustomMFileBrowser(manager, manager.focus, "Save file as...", [".iscript"],
		[
			SaveExtFBB(onSave),
			CancelExtFBB(onCancel)
		],
		[
			FbModalWindow(true),
			FbCurrentPath(make("")),
			FbStartDir(getCurrentDirectory())
		], m2t);
}

loadDBIScriptDialog(manager : MaterialManager, appendToCurrent : bool, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		storeCurrentAndSetIScriptDBPartition(manager);

		recordTimeB = make(0.);

		onOpen = \fileObjects : [FbObject] -> {
			if (fileObjects != []) {
				fileName = fileObjects[0].fullPath;
				next(manager.iscript.currentFileNameB, fileName);
				if (appendToCurrent)
					iScriptFromDB2(
						manager,
						fileName,
						\storedIScript -> addIScriptRecordWithDelay(manager, getValue(recordTimeB), storedIScript.script),
						\err_msg -> iScriptInfo(manager, err_msg, None())
					)
				else
					iScriptFromDB(manager, fileName);
			} else {
				// Should never happens
				iScriptInfo(manager, "Warning: no files selected", None());
			}
			restoreCurrentDBPartition(manager);
		};

		onCancel = \ -> restoreCurrentDBPartition(manager);

		loadIScriptDialog(
			manager,
			onOpen,
			onCancel,
			"Open file",
			[".iscript"],
			[],
			appendToCurrent,
			recordTimeB,
			m2t
		);
	}
}

saveDBIScriptDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		storeCurrentAndSetIScriptDBPartition(manager);

		onSave = \fileObjects -> {
			if (fileObjects != []) {
				filename = fileObjects[0].fullPath;
				next(manager.iscript.currentFileNameB, filename);

				iScriptInfo(manager, filename, None());

				saveDBIScript(manager, filename, m2t)
			} else {
				// Should never happen
				iScriptInfo(manager, "Warning: no files selected", None());
			}

			restoreCurrentDBPartition(manager);
		};

		onCancel = \ -> restoreCurrentDBPartition(manager);

		renderCustomMFileBrowser(manager, manager.focus, "Save file as...", [".iscript"],
			[
				SaveExtFBB(onSave),
				CancelExtFBB(onCancel)
			],
			[
				FbModalWindow(true),
			], m2t
		);
	}
}

saveLocalIScript(manager : MaterialManager, name : string, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	fileName = changeFileExt(name, ".iscript");

	next(manager.iscript.currentFileNameB, fileName);

	if (iScriptToLocalFile(manager, fileName)) {
		next(manager.iscript.scriptChangedB, false);
	} else {
		closeB = make(false);
		renderMDialog(manager, closeB, [
				MDialogUseFrame(),
				MDialogActions([MTextButton("OK", \ -> next(closeB, true), [], [MShortcut("enter")])])
			],
			MText("Error saving IScript!", []),
			m2t
		);
	}
}

saveDBIScript(manager : MaterialManager, name : string, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		fileName = changeFileExt(name, ".iscript");
		iScriptToDB2(
			manager,
			fileName,
			prepareCurrentIScriptForSave(manager),
			\ -> next(manager.iscript.scriptChangedB, false),
			\err_msg -> {
				closeB = make(false);
				renderMDialog(
					manager,
					closeB,
					[
						MDialogUseFrame(),
						MDialogActions([MTextButton("OK", \ -> next(closeB, true), [], [MShortcut("enter")])])
					],
					MText("Error saving IScript!", []),
					m2t
				)
			}
		)
	}
}

extendedLoadSaveIScriptDialog(
	manager : MaterialManager,
	storedIScript : StoredIScript,
	m2t : (Material, MFocusGroup) -> Tropic,
	isRunningB : Transform<bool>,
	onClose : () -> void
) -> void {
	loadChoice = make(0);
	loadChoices =
		[
			"Replace current IScript",
			"Add to current IScript",
			"Save to file"
		];

	fileName = make("mtest.txt");
	recordTime = make(0.);

	MGetFocusGroup(\p ->
		[
			MEGDropDown("Load Type", loadChoice, Pair(-1, "Select Load Type"), mapi(loadChoices, \i, bn -> Pair(i, bn)), []),
			MEGMutable(fselect(loadChoice, FLift(\lc -> {
				if (lc == 1)
					MEGTextInput("Delay (ms)", recordTime, [MInputFilter(\s, foc -> d2s(max(s2d(s), 0.)))])
				else if (lc == 2)
					MEGTextInput("File Name", fileName, [])
				else
					TEmpty()
			})))
		]
		|> (\f -> map(f, \it -> MEGItem2T(p, it, [MWidth(400.)], m2t)))
		|> MLines
	)
	|> (\f ->
		renderMDialog(
			manager,
			fnot(isRunningB),
			[
				MDialogTitle("Load IScript"),
				MDialogUseFrame(),
				MDialogScroll(),
				MDialogActions([
					MTextButton("CANCEL", \ -> {
						onClose();
					}, [], [MShortcut("esc")]),
					MTextButton("OK", \ -> {
						onClose();
						lc = getValue(loadChoice);

						if (lc == 0)
							loadStoredIScript(manager, storedIScript)
						else if (lc == 1)
							addIScriptRecordWithDelay(manager, getValue(recordTime), storedIScript.script)
						else
							iScriptToLocalFile2(manager, storedIScript, getValue(fileName)) |> ignore
					}, [], [MShortcut("enter")])
				]),
				IScriptRecordingEnabled(const(false))
			],
			f,
			m2t
		)
	);
}

loadLocalIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	storeFilesystemExtAPI = getFilesystemExtAPI();

	restoreFilesystemExtAPI = \ -> setFilesystemExtAPI(storeFilesystemExtAPI);

	setLocalFilesystemExtAPI();

	fileNameB = make("");

	onOpen = \fileObjects -> {
		if (fileObjects != []) {
			fileName = fileObjects[0].fullPath;
			next(manager.iscript.scenario.pathB, fileName);
			iScriptScenarioFromLocalFile(manager, fileName);
		} else {
			// Should never happens
			iScriptInfo(manager, "Warning: no files selected", None());
		}
		restoreFilesystemExtAPI();
	};

	onCancel = \ -> restoreFilesystemExtAPI();

	renderCustomMFileBrowser(manager, manager.focus, "Open scenario", [".iscenario"],
		[
			OpenExtFBB(onOpen),
			CancelExtFBB(onCancel)
		],
		[
			FbModalWindow(true),
			FbCurrentPath(make("")),
			FbStartDir(getCurrentDirectory())
		],
		m2t
	);
}

saveLocalIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	storeFilesystemExtAPI = getFilesystemExtAPI();

	restoreFilesystemExtAPI = \ -> setFilesystemExtAPI(storeFilesystemExtAPI);

	setLocalFilesystemExtAPI();
	onSave = \fileObjects -> {
		if (fileObjects != []) {
			filename = if (strContains(fileObjects[0].fullPath, ".iscenario"))
				fileObjects[0].fullPath
			else
				concatStrings([fileObjects[0].fullPath, ".iscenario"]);
			iScriptInfo(manager, filename, None());
			saveLocalIScriptScenario(manager, filename, m2t);
		} else {
			// Should never happen
			iScriptInfo(manager, "Warning: no files selected", None());
		}
		restoreFilesystemExtAPI();
	};

	onCancel = \ -> restoreFilesystemExtAPI();

	renderCustomMFileBrowser(manager, manager.focus, "Save scenario as...", [".iscenario"],
		[
			SaveExtFBB(onSave),
			CancelExtFBB(onCancel)
		],
		[
			FbModalWindow(true),
			FbCurrentPath(make("")),
			FbStartDir(getCurrentDirectory())
		],
		m2t
	);
}

saveLocalIScriptScenario(manager : MaterialManager, path : string, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	fileName = if (path != "") changeFileExt(path, ".iscenario") else "untitled.iscenario";

	next(manager.iscript.scenario.pathB, fileName);

	if (iScriptScenarioToLocalFile(manager, fileName)) {
		next(manager.iscript.scenario.scenarioChangedB, false);
	} else {
		closeB = make(false);
		renderMDialog(manager, closeB, [
				MDialogUseFrame(),
				MDialogActions([MTextButton("OK", \ -> next(closeB, true), [], [MShortcut("enter")])])
			],
			MText("Error saving IScriptScenario!", []),
			m2t
		);
	}
}

loadDBIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		storeCurrentAndSetIScriptDBPartition(manager);

		recordTimeB = make(0.);

		onOpen = \fileObjects : [FbObject] -> {
			if (fileObjects != []) {
				fileName = fileObjects[0].fullPath;
				next(manager.iscript.scenario.pathB, fileName);
				iScriptScenarioFromDB(manager, fileName);
			} else {
				// Should never happens
				iScriptInfo(manager, "Warning: no files selected", None());
			}
			restoreCurrentDBPartition(manager);
		};

		onCancel = \ -> restoreCurrentDBPartition(manager);

		renderCustomMFileBrowser(manager, manager.focus, "Open scenario", [".iscenario"],
			[
				OpenExtFBB(onOpen),
				CancelExtFBB(onCancel)
			],
			[
				FbModalWindow(true),
			],
			m2t
		);
	}
}

saveDBIScriptScenarioDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		storeCurrentAndSetIScriptDBPartition(manager);

		onSave = \fileObjects -> {
			if (fileObjects != []) {
				filename = if (strContains(fileObjects[0].fullPath, ".iscenario"))
					fileObjects[0].fullPath
				else
					concatStrings([fileObjects[0].fullPath, ".iscenario"]);

				next(manager.iscript.scenario.pathB, filename);

				iScriptInfo(manager, filename, None());

				saveDBIScriptScenario(manager, filename, m2t)
			} else {
				// Should never happen
				iScriptInfo(manager, "Warning: no files selected", None());
			}

			restoreCurrentDBPartition(manager);
		};

		onCancel = \ -> restoreCurrentDBPartition(manager);

		renderCustomMFileBrowser(manager, manager.focus, "Save scenario as...", [".iscenario"],
			[
				SaveExtFBB(onSave),
				CancelExtFBB(onCancel)
			],
			[
				FbModalWindow(true),
			],
			m2t
		);
	}
}

saveDBIScriptScenario(manager : MaterialManager, path : string, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		fileName = if (path != "") changeFileExt(path, ".iscenario") else "untitled.iscenario";
		next(manager.iscript.scenario.pathB, fileName);

		iScriptScenarioToDB(
			manager,
			fileName,
			manager.iscript.scenario,
			\ -> next(manager.iscript.scenario.scenarioChangedB, false),
			\err_msg -> {
				closeB = make(false);
				renderMDialog(
					manager,
					closeB,
					[
						MDialogUseFrame(),
						MDialogActions([MTextButton("OK", \ -> next(closeB, true), [], [MShortcut("enter")])])
					],
					MText("Error saving IScriptScenario!", []),
					m2t
				)
			}
		)
	}
}

addLocalIScriptsDialog(manager : MaterialManager, scenarioScriptsB : DynamicBehaviour<[IScriptScenarioRecord]>, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	storeFilesystemExtAPI = getFilesystemExtAPI();

	restoreFilesystemExtAPI = \ -> setFilesystemExtAPI(storeFilesystemExtAPI);

	setLocalFilesystemExtAPI();

	recordTimeB = make(0.);

	onOpen = \fileObjects : [FbObject] -> {
		if (fileObjects != []) {
			nextDistinct(
				scenarioScriptsB,
				concat(
					getValue(scenarioScriptsB),
					map(fileObjects, \v -> IScriptScenarioRecord(relatingPath(v.fullPath, resolveRelativePath(".")), make("")))
				)
			)
		} else {
			// Should never happens
			iScriptInfo(manager, "Warning: no files selected", None());
		}
		restoreFilesystemExtAPI();
	};

	onCancel = \ -> restoreFilesystemExtAPI();

	loadIScriptDialog(
		manager,
		onOpen,
		onCancel,
		"Open file(s)",
		[".iscript"],
		[
			FbCurrentPath(make("")),
			FbStartDir(getCurrentDirectory()),
			FbMultiSelect(),
		],
		false,
		recordTimeB,
		m2t
	);
}

addDBIScriptsDialog(manager : MaterialManager, scenarioScriptsB : DynamicBehaviour<[IScriptScenarioRecord]>, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		storeCurrentAndSetIScriptDBPartition(manager);

		recordTimeB = make(0.);

		onOpen = \fileObjects : [FbObject] -> {
			if (fileObjects != []) {
				next(
					scenarioScriptsB,
					concat(
						getValue(scenarioScriptsB),
						map(fileObjects, \v -> IScriptScenarioRecord(v.fullPath, make("")))
					)
				)
			} else {
				// Should never happens
				iScriptInfo(manager, "Warning: no files selected", None());
			}
			restoreCurrentDBPartition(manager);
		};

		onCancel = \ -> restoreCurrentDBPartition(manager);

		loadIScriptDialog(
			manager,
			onOpen,
			onCancel,
			"Open file(s)",
			[".iscript"],
			[FbMultiSelect()],
			false,
			recordTimeB,
			m2t
		);
	}
}

scenarioViewDialog(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhenB = make(false);

	scenarioPath = getValue(manager.iscript.scenario.pathB);
	scenarioDescriptionB = make(getValue(manager.iscript.scenario.descriptionB));
	scenarioScriptsB : DynamicBehaviour<[IScriptScenarioRecord]> = make(getValue(manager.iscript.scenario.scriptsB));

	selectedScriptsB : DynamicBehaviour<[int]> = make([]);
	isSelectedB : Transform<bool> = fselect(selectedScriptsB, FLift(\v -> length(v) != 0));
	actions = concatA([
		if (cpp) [
			MTextButton("ADD LOCAL SCRIPT(S)", \ -> addLocalIScriptsDialog(manager, scenarioScriptsB, m2t), [], [])
		] else [],
		if (isIScriptFilesystemDBPresent(manager)) [
			MTextButton("ADD DB SCRIPT(S)", \ -> addDBIScriptsDialog(manager, scenarioScriptsB, m2t), [], [])
		] else [],
		[
			MTextButton(
				"DELETE SELECTED",
				\ -> {
					selectedScripts = getValue(selectedScriptsB);
					if (length(selectedScripts) > 0) {
						nextDistinct(
							scenarioScriptsB,
							mapiConcat(getValue(scenarioScriptsB), \i, v -> if (contains(selectedScripts, i)) [] else [v])
						)
					};
					next(selectedScriptsB, []);
				},
				[],
				[MEnabled(isSelectedB)]
			),
			TFillX(),
			MTextButton("CANCEL", \ -> next(closeWhenB, true), [], [MShortcut("esc")]),
			MTextButton(
				"UPDATE",
				\ -> {
					nextDistinct(
						manager.iscript.scenario.scenarioChangedB,
						(getValue(manager.iscript.scenario.scriptsB) != getValue(scenarioScriptsB)) ||
						(getValue(manager.iscript.scenario.descriptionB) != getValue(scenarioDescriptionB))
					);
					nextDistinct(manager.iscript.scenario.scriptsB, getValue(scenarioScriptsB));
					nextDistinct(manager.iscript.scenario.descriptionB, getValue(scenarioDescriptionB));
				},
				[],
				[]
			),
			MTextButton(
				"UPDATE AND CLOSE",
				\ -> {
					nextDistinct(
						manager.iscript.scenario.scenarioChangedB,
						(getValue(manager.iscript.scenario.scriptsB) != getValue(scenarioScriptsB)) ||
						(getValue(manager.iscript.scenario.descriptionB) != getValue(scenarioDescriptionB))
					);
					nextDistinct(manager.iscript.scenario.scriptsB, getValue(scenarioScriptsB));
					nextDistinct(manager.iscript.scenario.descriptionB, getValue(scenarioDescriptionB));
					next(closeWhenB, true);
				},
				[],
				[]
			),
		]]);
	dialogStyle = [
		MDialogTitle("Scripts scenario"),
		MDialogUseFrame(),
		MDialogScroll(),
		MDialogActions(actions),
		IScriptRecordingEnabled(const(false))
	];

	content =
		MLines([
			MText("Scenario path: " + scenarioPath, []),
			MFixedY(16.0),
			MText("Scenario description:", []),
			MTextInput(scenarioDescriptionB, [Multiline(true), MMaxLines(4), MLabel("Scenario description")], []),
			MFixedY(16.0),
			MDynamicDataTable(
				[
					MColumn("#", "", 48, [CenterAlign()]),
					MColumn("Script path", "", 192, []),
					MColumn("Script name", "", 96, []),
					MColumn("Description", "", 192, [CenterAlign()]),
					MColumn("", "", 32, [CenterAlign()]),
					MColumn("", "", 32, [CenterAlign()]),
					MColumn("", "", 32, [CenterAlign()]),
					MColumn("", "", 32, [CenterAlign()]),
				],
				fselect(scenarioScriptsB,
					FLift(\scripts ->
						mapi(scripts,
							\i : int, v : IScriptScenarioRecord -> {
							iconSuccess = MIcon("done", [MGreen(500)]);
							iconCurrent = MIcon("done_all", [MGreen(500)]);
							iconError = MIcon("clear", [MRed(500)]);
							[
								MText(i2s(i + 1), []),
								MText(dirName(v.scriptPath), []),
								MText(fileNameOnly(v.scriptPath), []),
								MTextInput(v.descriptionB, [MLabel("script description")], []),
								MIconButton(
									"arrow_upward",
									\ -> nextDistinct(scenarioScriptsB, moveElement(getValue(scenarioScriptsB), i, i - 1)),
									[],
									[MTooltipText(const("Move iscript up"))]
								),
								MIconButton(
									"arrow_downward",
									\ -> nextDistinct(scenarioScriptsB, moveElement(getValue(scenarioScriptsB), i, i + 1)),
									[],
									[MTooltipText(const("Move iscript down"))]
								),
								MIconButton(
									"delete",
									\ -> nextDistinct(scenarioScriptsB, removeIndex(getValue(scenarioScriptsB), i)),
									[],
									[MTooltipText(const("Delete iscript"))]
								),
								MIconButton(
									"open_in_browser",
									\ -> iScriptFromLocalFile(manager, v.scriptPath),
									[],
									[MTooltipText(const("Open as current iscript"))]
								),
							]
						})
					)
				),
				[
					TScrollEnabled(const(true)),
					MFullWidth(),
					// MRowHeight(90.0),
					MExpandRow(const(true)),
					MListSelection(const(true), true, true, selectedScriptsB),
				]
			)
			|> (\f -> MGroup2(TFillXY(), f))
		]);

	renderMDialog(
		manager,
		closeWhenB,
		dialogStyle,
		content,
		m2t
	);
}
