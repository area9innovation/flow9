import material/iscript/material_focus_tree;
export {
	generateIScriptFromCommands(manager : MaterialManager, input : string) -> void;
}

IScriptGeneratorCommands ::= ISGFindFocus, ISGSetFocusContent, ISGPressButton, ISGCheckBehaviour;

ISGFindFocus(name : string);
ISGSetFocusContent(focusName : string, content : string);
ISGPressButton(name : string);
ISGCheckBehaviour(focusName : string, behaviourName : string, content : string);

generateIScriptFromCommands(manager : MaterialManager, input : string) -> void {
	commands : [IScriptGeneratorCommands] = deserialize3(input);
	println(commands);
	runIScriptCommands(manager, commands);
}

runIScriptCommands(manager : MaterialManager, commands : [IScriptGeneratorCommands]) -> void {
	if (length(commands) >= 1) {
		command = commands[0];
		switch(command) {
			ISGFindFocus(name): {
				//foc = getMaterialFocusByUniqueIdRec(manager.focus, name);
				runIScriptCommands(manager, tail(commands));
			}
			ISGSetFocusContent(focusName, content): {
				foc = getMaterialFocusByUniqueIdRec(manager.focus, focusName);
				if (getValue(manager.iscript.settings.replayCheckErrors)) {
					maybeApply(foc, \f -> next(f.focused, true));
					deferUntilRender(\ -> {
						iter(s2a(content), \c -> {
							emitKeyEvent(currentClip(), "keydown", fromCharCode(c), false, false, false, false, 0);
						});
						deferUntilRender(\ -> runIScriptCommands(manager, tail(commands)));
					})
				} else {
					maybeApply(
						lookupTree(eitherMap(foc, \f -> f.behaviours, makeTree()), "content"),
						\b -> next(b.first, content)
					);
					runIScriptCommands(manager, tail(commands));
				}
			};
			ISGPressButton(name): {
				foc = getMaterialFocusByUniqueIdRec(manager.focus, name);
				if (getValue(manager.iscript.settings.replayCheckErrors)) {
					//press from mouse. should we allow to press from keyboard?
					maybeApply(foc, \f -> {
						x = fgetValue(f.position).pos.x + (fgetValue(f.widthHeight).width / 2.);
						y = fgetValue(f.position).pos.y + (fgetValue(f.widthHeight).height / 2.);

						emitMouseEvent(
							currentClip(),
							"mousedown",
							x,
							y
						);
						emitMouseEvent(
							currentClip(),
							"mouseup",
							x,
							y
						);
					})
				} else {
					maybeApply(
						lookupTree(eitherMap(foc, \f -> f.behaviours, makeTree()), "click"),
						\b -> next(b.first, true)
					)
				}
				runIScriptCommands(manager, tail(commands));
			}
			ISGCheckBehaviour(focusName, behaviourName, content): {
				foc = getMaterialFocusByUniqueIdRec(manager.focus, focusName);
				pprint(toString(command) + ":")(maybeMap(
					lookupTree(eitherMap(foc, \f -> f.behaviours, makeTree()), behaviourName),
					\b -> getValue(b.first) == content
				)) |> ignore;
				runIScriptCommands(manager, tail(commands));
			}
		}
	}
}

getMaterialFocusByUniqueIdRec(parent : MFocusGroup, id : string) -> Maybe<MaterialFocus> {
	iScriptIdParent : MFocusGroup =
		if (isSome(parent.iScriptId))
			parent
		else
			getIScriptUniqueIdParent(parent);
	iScriptIds : Tree<string, MaterialFocus> = getValue(iScriptIdParent.iScriptIds);
	eitherFn(
		lookupTree(iScriptIds, id),
		\v -> Some(v),
		\ -> foldTree(getValue(parent.focusIds), None(), \k : int, v : MaterialFocus, acc : Maybe<MaterialFocus> -> {
			if (isNone(acc)) {
				switchMaterialFocus(
					v,
					\f -> maybeBind(f.iScriptId, \isi -> if (isi == id) Some(f) else None()),
					\f -> getMaterialFocusByUniqueIdRec(f, id)
				)
			} else acc
		})
	)
}