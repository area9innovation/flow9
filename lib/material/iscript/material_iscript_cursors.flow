import material/internal/material_theme;

export {
	ReplayCursor(name : string, point : Point, shape : Tropic);

	IScriptReplayCursorScheme(
		name : string,
		description : string,
		defaultCursor : ReplayCursor,
		checkCursorShape : (manager : MaterialManager, event : string, value : flow) -> ReplayCursor
		);

	initIScriptReplayCursor(manager : MaterialManager) -> void;
	initIScriptReplayCursorShapes(manager : MaterialManager) -> void;
	clearIScriptReplayCursorEvents(manager : MaterialManager) -> void;

	showIScriptReplayCursor(manager : MaterialManager) -> void;
	hideIScriptReplayCursor(manager : MaterialManager) -> void;
	iscriptReplayCheckCursorShape(manager : MaterialManager, event : string, value : flow) -> void;

	getIScriptReplayCursorSchemes(manager : MaterialManager) -> [IScriptReplayCursorScheme];

	setIScriptReplayCurrentCursorSchemeId(manager : MaterialManager, id : int) -> void;
	getIScriptReplayCurrentCursorSchemeId(manager : MaterialManager) -> int;
	getIScriptReplayCurrentCursorScheme(manager : MaterialManager) -> IScriptReplayCursorScheme;
}

iscriptReplayCursorSchemesR : ref [IScriptReplayCursorScheme] = ref [];
iscriptReplayCurrentCursorSchemeR : ref IScriptReplayCursorScheme =
	ref IScriptReplayCursorScheme("", "",
		ReplayCursor("", Point(0.0, 0.0), TEmpty()),
		\__, __, __ -> ReplayCursor("", Point(0.0, 0.0), TEmpty())
	);
iscriptReplayCurrentCursorSchemeIdR : ref int = ref 0;
iscriptReplayDefaultCursorSchemeId  = 0;

iscriptReplayCursorHoverR : ref bool = ref false;
iscriptReplayCursorClickR : ref bool = ref false;

iscriptReplayCursorInitR : ref bool = ref false;

disposeCursorShapeChange : ref [() -> void] = ref [];

iscriptReplayCurrentCursorR : ref ReplayCursor = ref ReplayCursor("", Point(0.0, 0.0), TEmpty());

replayCursorShapes : [ReplayCursor] =
[
	ReplayCursor("Aero", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/aero.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Aero Link", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/aero_link.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Android blue", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/android_blue.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Android blue Link", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/android_link.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Crystal", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/crystal.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Crystal Link", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/crystal_link.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Cut the Rope", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/cut_the_rope.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Cut the Rope Link", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/cut_the_rope_link.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Mac OS X", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/mac_os_x.b64", [WidthHeight(32.0, 32.0)])),
	ReplayCursor("Mac OS X Link", Point(0., 0.), TPicture("data:image/png;base64," + "#include material/iscript/cursors/mac_os_x_link.b64", [WidthHeight(32.0, 32.0)])),
];

initIScriptReplayCursorShapes(manager : MaterialManager) -> void {
	refArrayPush(iscriptReplayCursorSchemesR,
		IScriptReplayCursorScheme("Aero theme", "Default cursor", replayCursorShapes[0],
			\m, e, v -> if (^iscriptReplayCursorHoverR) replayCursorShapes[1] else replayCursorShapes[0]
		)
	);
	refArrayPush(iscriptReplayCursorSchemesR,
		IScriptReplayCursorScheme("Android blue theme", "", replayCursorShapes[2],
			\m, e, v -> if (^iscriptReplayCursorHoverR) replayCursorShapes[3] else replayCursorShapes[2]
		)
	);
	refArrayPush(iscriptReplayCursorSchemesR,
		IScriptReplayCursorScheme("Crystal theme", "", replayCursorShapes[4],
			\m, e, v -> if (^iscriptReplayCursorHoverR) replayCursorShapes[5] else replayCursorShapes[4]
		)
	);
	refArrayPush(iscriptReplayCursorSchemesR,
		IScriptReplayCursorScheme("Cut the Rope theme", "", replayCursorShapes[6],
			\m, e, v -> if (^iscriptReplayCursorHoverR) replayCursorShapes[7] else replayCursorShapes[6]
		)
	);
	refArrayPush(iscriptReplayCursorSchemesR,
		IScriptReplayCursorScheme("Mac OS X theme", "", replayCursorShapes[8],
			\m, e, v -> if (^iscriptReplayCursorHoverR) replayCursorShapes[9] else replayCursorShapes[8]
		)
	);
	refArrayPush(iscriptReplayCursorSchemesR,
		IScriptReplayCursorScheme(
			"Circle theme",
			"Default circle cursor",
			ReplayCursor("Circle", Point(8.0, 8.0), TCircle(16., [MFill(getAccentColor(manager.focus)), FillOpacity(0.7)])),
			\m, e, v -> {
				if (e == "mousemove")
					ReplayCursor("Circle", Point(8.0, 8.0), TCircle(16., [MFill(getPrimaryColor(manager.focus)), FillOpacity(0.7)]))
				else
					ReplayCursor("Circle", Point(8.0, 8.0), TCircle(16., [MFill(getAccentColor(manager.focus)), FillOpacity(0.7)]))
			}
		)
	);
	iscriptReplayCurrentCursorSchemeR := (^iscriptReplayCursorSchemesR)[iscriptReplayDefaultCursorSchemeId];
}

initIScriptReplayCursor(manager : MaterialManager) -> void {
	iscriptReplayCursorInitR := true;
	initIScriptReplayCursorShapes(manager);
	iscriptReplayCurrentCursorSchemeIdR := iscriptReplayDefaultCursorSchemeId;

	iscriptReplayCurrentCursorR := (^iscriptReplayCurrentCursorSchemeR).defaultCursor;
	updateReplayCursorInfo(manager);
}

showIScriptReplayCursor(manager : MaterialManager) -> void {
	if (!(^iscriptReplayCursorInitR)) {
		initIScriptReplayCursor(manager)
	}
	clearIScriptReplayCursorEvents(manager);
	next(manager.iscript.replayCursor.visibleB, true);
}

hideIScriptReplayCursor(manager : MaterialManager) -> void {
	next(manager.iscript.replayCursor.visibleB, false);
}

iscriptReplayCheckCursorShape(manager : MaterialManager, event : string, value : flow) -> void {
	if (event == "hover" && ^iscriptReplayCursorHoverR != flow(value)) {
		iscriptReplayCursorHoverR := flow(value);

		iscriptReplayCurrentCursorR := (^iscriptReplayCurrentCursorSchemeR).checkCursorShape(manager, event, value);
		updateReplayCursorInfo(manager);
	}
}

clearIScriptReplayCursorEvents(manager : MaterialManager) -> void {
	if (!(^iscriptReplayCursorInitR)) {
		initIScriptReplayCursor(manager)
	}
	iscriptReplayCursorHoverR := false;
	iscriptReplayCursorClickR := false;
	iscriptReplayCheckCursorShape(manager, "", false);
}

getIScriptReplayCursorSchemes(manager : MaterialManager) -> [IScriptReplayCursorScheme] {
	if (!(^iscriptReplayCursorInitR)) {
		initIScriptReplayCursor(manager)
	}
	^iscriptReplayCursorSchemesR
}

setIScriptReplayCurrentCursorSchemeId(manager : MaterialManager, id : int) -> void {
	if (!(^iscriptReplayCursorInitR)) {
		initIScriptReplayCursor(manager)
	}
	clearIScriptReplayCursorEvents(manager);

	iscriptReplayCurrentCursorSchemeIdR := id;
	iscriptReplayCurrentCursorSchemeR := (^iscriptReplayCursorSchemesR)[id];

	iscriptReplayCurrentCursorR := (^iscriptReplayCurrentCursorSchemeR).defaultCursor;
	updateReplayCursorInfo(manager);
}

getIScriptReplayCurrentCursorSchemeId(manager : MaterialManager) -> int {
	^iscriptReplayCurrentCursorSchemeIdR
}

getIScriptReplayCurrentCursorScheme(manager : MaterialManager) -> IScriptReplayCursorScheme {
	^iscriptReplayCurrentCursorSchemeR
}

makeEmptyReplayCursor() -> ReplayCursor {
	ReplayCursor("", Point(0.0, 0.0), TEmpty())
}

makeEmptyIScriptReplayCursorScheme() -> IScriptReplayCursorScheme {
	IScriptReplayCursorScheme("", "", makeEmptyReplayCursor(), \__, __, __ -> makeEmptyReplayCursor())
}

updateReplayCursorInfo(manager : MaterialManager) -> void {
	dispUnsA(disposeCursorShapeChange);
	disposeCursorShapeChange := [
		interruptibleDeferUntilNextFrameRendered(
			\ -> nextDistinct(manager.iscript.replayCursor.shapeB, (^iscriptReplayCurrentCursorR).shape)
		),
		interruptibleDeferUntilNextFrameRendered(
			\ -> nextDistinct(manager.iscript.replayCursor.clickPointB, (^iscriptReplayCurrentCursorR).point)
		)
	]
}