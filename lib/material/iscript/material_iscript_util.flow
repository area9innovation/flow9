import material/iscript/material_iscript_form;
import material/iscript/material_iscript_screenshot;
import material/iscript/material_iscript_cursors;
import material/iscript/material_iscript_filesystem;
import material/iscript/material_iscript_config;
import net/http_request_callback;
import net/http_request_util;

export {
	replayIScript(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic, onFinished : (bool) -> void, handleInputOutput : bool) -> () -> void;

	getBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, focusExists : bool, enabled : bool, focusable : bool, click : bool) -> Maybe<DynamicBehaviour<flow>>;
	repeatBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, value : flow) -> bool;

	subscribeToIScriptBehavioursFocus(manager : MaterialManager, captureHttp : bool) -> () -> void;

	substituteHttpRequest(manager : MaterialManager) -> () -> void;
	makeValueInputByTypeHint(possibleValues : [flow], typeHelper : string, maybeInitial : Maybe<flow>, enabledB : Transform<bool>) -> Pair<DynamicBehaviour<flow>, MEGItem>;
	getDefaultValueByTypeHint(typeHint : string) -> flow;

	loadStoredIScript(manager : MaterialManager, storedIScript : StoredIScript) -> void;

	onIScriptReplayFinish(manager : MaterialManager, compareDialog : ([IScriptReplayResult]) -> void) -> ([IScriptReplayResult]) -> void;

	handleIScriptState(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> () -> void;

	isIScriptUrlParamsSet() -> bool;
}

stopIScriptReplay(manager : MaterialManager) -> void {
	next(manager.iscript.state, IScriptStopped());
}

replayIScript(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic, onFinished : (bool) -> void, handleInputOutput : bool) -> () -> void {
	iScriptInfo(manager, "Replay IScript", None());
	replayIScript2(manager, getValue(manager.iscript.script), m2t, onFinished, handleInputOutput);
}

ContiniousTimer(
	start : () -> void,
	stop : () -> void,
	pause : () -> void,
	timeout : double,
);

continiousTimer(tree : Tree<double, [() -> bool]>, timeout : double, maxRepeats : int, onFinished : (bool) -> void) -> ContiniousTimer {
	isFinished = ref true;
	delays : ref [Pair<double, double>] = ref [];
	r = repeatable2(1, false);
	started = ref 0.0;
	uns = ref [];

	deferredFns = ref [];
	deferredTime = ref 0.0;
	currentRepeat = ref 0;

	startFn = \ -> {
		started := timestamp() - either(minA(map(^delays, \v -> v.first)), 0.0);
		r.start();
	};
	stopFn = \ -> {
		dispUnsA(uns);
	};
	pauseFn = \ -> {
		r.stop();
	};
	initFn = \ -> {
		isFinished := false;
		delays := map(getTreeKeys(tree), \v -> Pair(v, v)); // Pair(current replaying time with timeouts, recorded time)

		uns :=
			[
				r.stop,
				\ -> if (!(^isFinished)) {
					isFinished := true;
					onFinished(length(^delays) == 0);
				},
				makeSubscribe2(r.value, \ts -> {
					if (length(^delays) == 0) {
						dispUnsA(uns);
					}

					// check timeouted elements
					if (^deferredFns != []) {
						if (^currentRepeat > maxRepeats) {
							deferredFns := [];
							currentRepeat := 0;
							dispUnsA(uns);
						} else {
							if (^deferredTime < ts - ^started) {
								// repeat all fns
								deferredFns := mapConcat(^deferredFns, \fn -> if (!fn()) [fn] else []);

								if (^deferredFns != []) {
									// repeat was unsuccessful
									currentRepeat := ^currentRepeat + 1;
									deferredTime := ^deferredTime + timeout;
								} else {
									// repeat was successful - shift all delay.first values to the current timeout
									delays := map(^delays, \v -> Pair(v.first + timeout * i2d(^currentRepeat), v.second));
								}
							}
						}
					} else {
						foldWhile(^delays, ts - ^started, \t, d -> {
							if (d.first < t) {
								deferredFns := [];

								maybeApply(
									lookupTree(tree, d.second),
									\records -> iter(records,
										\fn -> if (!fn()) {
											// Add to timeout elements
											println("*** Timeout Fn");
											deferredFns := arrayPush(^deferredFns, fn);
											deferredTime := d.first + timeout;
											currentRepeat := 1;
										}
									)
								);
								delays := subrange(^delays, 1, length(^delays));
								Some(t)
							} else {
								None()
							}
						})
						|> ignore
					}
				})()
			];
	}

	ContiniousTimer(
		\ -> {
			if (^isFinished == true || length(^delays) == 0) {
				initFn();
			}

			startFn();
		},
		stopFn,
		pauseFn,
		timeout
	)
}

replayIScript2(manager : MaterialManager, iScript : IScript, m2t : (Material, MFocusGroup) -> Tropic, onFinished : (bool) -> void, handleInputOutput : bool) -> () -> void {
	stopDelay = either(maxA(getTreeKeys(iScript.stack)), 1.0);
	defaultTimeout = getValue(manager.iscript.settings.replayTimeout) / getValue(manager.iscript.settings.replaySpeed);
	maxRepeats = getValue(manager.iscript.settings.replayRepeats);

	foldTree(iScript.stack, makeTree(), \delay, records, acc ->
		setTree(
			acc,
			delay / getValue(manager.iscript.settings.replaySpeed),
			map(records, \r -> \ -> replayIScriptRecord(manager, r, m2t, handleInputOutput))
		)
	)
	|> (\t -> continiousTimer(t, defaultTimeout, maxRepeats, onFinished))
	|> (\t -> {
		if (getValue(manager.iscript.settings.replayProfile)) {
			startProfile(getValue(manager.iscript.currentFileNameB));
		}
		t.start();

		\ -> {
			t.stop();
			endProfile();
		}
	})
}

replayIScriptRecord(manager : MaterialManager, record : IScriptRecord, m2t : (Material, MFocusGroup) -> Tropic, handleInputOutput : bool) -> bool {
	switch (record : IScriptRecord) {
		IScriptBehaviourRecord(descriptor, value, type, callstack): {
			repeatBehaviourById(manager, descriptor, value) || descriptor.name == "focused"
		}
		IScriptInputRecord(descriptor, name, possibleValues, __) : {
			if (handleInputOutput) {
				inputValues = getValue(manager.iscript.input);
				idx = findiDef(inputValues, \input -> input.name == name, -1);

				eitherMap(
					inputValues[idx].value,
					\v -> {
						repeatBehaviourById(manager, descriptor, v)
					},
					false
					// \ -> {
					// 	showValueInputDialog(
					// 		manager,
					// 		record,
					// 		\value -> repeatBehaviourById(manager, descriptor, value) |> ignore,
					// 		m2t
					// 	);
					// }
				);
			} else {
				true;
			}
		}
		IScriptOutputRecord(descriptor, name) : {
			if (handleInputOutput) {
				value : Maybe<flow> = eitherFn(
					getBehaviourById(manager, descriptor, true, false, false, false),
					\beh -> Some(getValue(beh)),
					\ -> None()
				);

				outputValues = getValue(manager.iscript.output);
				idx = findiDef(outputValues, \output -> output.name == name, -1);

				next(manager.iscript.output, replace(outputValues, idx, IScriptOutputValue(name, true, value)));
			}

			true;
		}
		IScriptStageWidthHeight(wh): {
			iScriptInfo(manager, "canvas width/height: " + toString(wh), None());
			nextDistinct(stageWidthHeight, Some(wh));

			true;
		}
		IScriptRequestRecord(url, post, headers, params, delay, response): {
			requestCreated = timestamp();

			if (getValue(manager.iscript.settings.replayCheckErrors) /*&& containsList(getValue(manager.iscript.requests), Pair(time, record))*/) {
				uns = ref [];

				checkRequestFn = \rq -> if (^uns != []) {
					// if (containsList(rq, Pair(time, record))) {
					// 	dispUnsA(uns);
					// 	// Only as info for now
					// 	iScriptInfo(manager, "Request error " + url + " : isn't executed", None());
					// } else {
						dispUnsA(uns);
					// }
				};

				uns :=
					[
						interruptibleTimer(max(ceil(delay), 1000), \ -> checkRequestFn(getValue(manager.iscript.requests))),
						makeSubscribe2(manager.iscript.requests, checkRequestFn)()
					];
			}

			true;
		}
		IScriptScreenshot(__, check): {
			if (!check) {
				applyIScriptScreenshot(manager, record);

				true;
			} else {
				record2 = getIScriptScreenshot(manager, check);
				d = diffIScriptScreenshot(record, record2);

				if (sizeTree(d) > 0) {
					iScriptError(manager, "IScriptScreenshot error : screenshots aren't equal", None());
					traverseInOrder(d, \k, v ->
						iScriptError(
							manager,
							foldTree(v, "\t" + toString(k) + " :", \k2, v2, acc2 ->
								acc2 + "\n\t\t" + toString(k2) + " : " + eitherMap(v2.first, toString, "") + " - " + eitherMap(v2.second, toString, "")
							),
							None() // todo:
							// Some(k)
						)
					);

					false;
				} else {
					true;
				}
			}
		}
		IScriptCheck(descriptor, checkFn, type): {
			checkBehaviourById(manager, descriptor, checkFn)
		}
		IScriptNested(componentName, id, iScriptNested): {
			// replayIScript2(manager, iScriptNested, m2t, false);
			true;
		}
		IScript(recordingStarted, stack): {
			// replayIScript2(manager, record, m2t, false);
			true;
		}
		IScriptUrlRecord(url) : {
			if (url != loaderUrl()) {
				getUrlN(url, "");

				false;
			} else {
				true;
			}
		}
		default: {
			true;
		}
	}
}

getBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, focusExists : bool, enabled : bool, focusable : bool, click : bool) -> Maybe<DynamicBehaviour<flow>> {
	idString = IScriptId2s(behaviourDescriptor.component.id);
	noSuchFocusString = "No such focus: [" + idString + "] " + behaviourDescriptor.name;

	eitherFn(
		getMaterialFocusByIScriptId(manager.focus, behaviourDescriptor.component.id),
		\fc ->
			if (fc.name == behaviourDescriptor.component.name) {
				if (focusable && fgetValue(fc.focusEnabled) == false) {
					iScriptError(manager, "Component focus is disabled: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
						Some(behaviourDescriptor.component.id));
					None()
				} else if ((click || enabled) && fgetValue(fc.enabled) == false) {
					iScriptError(manager, "Component is disabled: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
						Some(behaviourDescriptor.component.id));
					None()
				} else if (click && fgetValue(switchMaterialFocus(fc, \f -> f.parent.zorderEnabled, \f -> f.zorderEnabled)) == false) {
					iScriptError(manager, "Component clicks are disabled: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
						Some(behaviourDescriptor.component.id));
					None()
				} else {
					eitherFn(
						lookupTree(fc.behaviours, behaviourDescriptor.name),
						\beh ->
							Some(beh.first),
						\ -> {
							if (focusExists) iScriptError(manager, "No such behaviour: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
								Some(behaviourDescriptor.component.id));
							None()
						}
					)
				}
			} else {
				if (focusExists) iScriptError(manager, noSuchFocusString, Some(behaviourDescriptor.component.id));
				None()
			},
		\ -> {
			if (focusExists) iScriptError(manager, noSuchFocusString, Some(behaviourDescriptor.component.id));
			None()
		}
	)
}

repeatBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, value : flow) -> bool {
	name = behaviourDescriptor.name;
	componentName = behaviourDescriptor.component.name;

	iscriptReplayCheckCursorShape(manager, name, value);

	addHeight = \pnt -> Point(pnt.x, pnt.y + if (isIScriptEnabled(manager)) 48.0 else 0.0);
	checkStr =
		if (getValue(manager.iscript.settings.replayCheckErrors))
			">> Check " + componentName + " " + name + " value " + toString(value)
		else
			">> Replay " + componentName + " " + name + " value " + toString(value);

	emitMouseEv = \event, point -> {
		emitMouseEvent(
			currentClip(), event,
			point.x,
			point.y
		);

		next(manager.iscript.replayCursor.positionB,
			Point(
				point.x - getValue(manager.iscript.replayCursor.clickPointB).x,
				point.y - getValue(manager.iscript.replayCursor.clickPointB).y
			)
		);

		iScriptInfo(
			manager,
			checkStr + " = " + event + " at (" + toString(point.x) + ", " + toString(point.y) + ")",
			Some(behaviourDescriptor.component.id)
		);
	}

	if (getValue(manager.iscript.settings.replayCheckErrors)) { // replay option "Check errors" is on
		if ((name == "mousedown" || name == "mouseup" || name == "mousemove") && isSameStructType(value, zeroPoint)) {
			emitMouseEv(name, cast(value : flow -> Point) |> addHeight);
			true
		} else if ((name == "keypress" || name == "keydown" || name == "keyup") && isSameStructType(value, KeyEventRecord("", false, false, false, false, 0))) {
			kst = cast(value : flow -> KeyEventRecord);
			iScriptInfo(
				manager,
				checkStr,
				Some(behaviourDescriptor.component.id)
			);
			emitKeyEvent(currentClip(), name, kst.utf, kst.ctrl, kst.shift, kst.alt, kst.meta, kst.keycode);
			true
		} else {
			replayBehaviour = contains(getValue(manager.iscript.settings.replayReplayBehaviours), name);
			checkEnabled = replayBehaviour;
			checkFocused = replayBehaviour && name == "focused";
			checkClickable = replayBehaviour && ((name == "down" && flow(value) != None()) || (name == "click" && flow(value) == true)
				|| (name == "hover" && flow(value) == true) || name == "position");
			checkExists = checkFocused || checkClickable;
			eitherMap(
				getBehaviourById(manager, behaviourDescriptor, checkExists, checkEnabled, checkFocused, checkClickable),
				\b -> {
					if (replayBehaviour) {
						// Behaviours we need to replay
						if (name == "point" && false) {
							eitherFn(
								getMaterialFocusByIScriptId(manager.focus, behaviourDescriptor.component.id),
								\f -> {
									down = getValue(either(
										getBehaviourById(
											manager,
											IScriptBehaviourDescriptor(behaviourDescriptor.component, "down"),
											false,
											false,
											false,
											false
										),
										make(None())
									));

									if (flow(down) == true || (flow(down) != false && isSome(down))) {
										p = f.position();
										emitMouseEv("mousemove", Point(p.pos.x + value.x, p.pos.y + value.y));
									};

									true
								},
								\ -> {
									iScriptError(
										manager,
										"Check Errors. No such focus: " + name,
										Some(behaviourDescriptor.component.id)
									);
									false
								}
							)
						} else if (name == "down" && false) {
							mouseEvent = if (flow(value) != None() && flow(value) != false) "mousedown" else "mouseup";

							eitherFn(
								getMaterialFocusByIScriptId(manager.focus, behaviourDescriptor.component.id),
								\f -> {
									pnt =
										eitherFn(
											if (flow(value) == true || flow(value) == false) {
												None()
											} else {
												value
											},
											\pnt -> {
												p = f.position();
												mx = p.pos.x + pnt.x;
												my = p.pos.y + pnt.y;
												Point(mx, my);
											},
											\ -> {
												eitherFn(
													getBehaviourById(
														manager,
														IScriptBehaviourDescriptor(behaviourDescriptor.component, "point"),
														false,
														false,
														false,
														false
													),
													\pnt -> {
														p = f.position();
														mx = p.pos.x + getValue(pnt).x;
														my = p.pos.y + getValue(pnt).y;
														Point(mx, my);
													},
													\ -> {
														wh = f.widthHeight();
														p = f.position();
														mx = p.pos.x + wh.width / 2.0;
														my = p.pos.y + wh.height / 2.0;
														Point(mx, my);
													}
												);
											}
										);

									emitMouseEv(mouseEvent, pnt);
									true
								},
								\ -> {
									iScriptError(
										manager,
										"Check Errors. No such focus: " + name,
										Some(behaviourDescriptor.component.id)
									);
									false
								}
							)
						} else {
							next(b, value);
							true
						}
					} else {
						if (contains(getValue(manager.iscript.settings.replayCheckedBehaviours), name) && name != "position") {
							// Checked behaviours
							if (getValue(b) != flow(value)) {
								iScriptError(manager, "Check Errors. " + componentName + " " + name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "] doesn't match: " +
									toString(getValue(b)) + " != " + toString(value), Some(behaviourDescriptor.component.id));
								false
							} else {
								true
							}
						} else // All unchecked behaviours
						{
							true
						}
					}
				},
				!checkExists
			)
		}
	} else { // replay option "Check errors" is off
		if (countList(behaviourDescriptor.component.id) == 0) {
			if ((name == "mousedown" || name == "mouseup" || name == "mousemove") && isSameStructType(value, zeroPoint)) {
				emitMouseEv("mousemove", cast(value : flow -> Point) |> addHeight);
				true
			} else if ((name == "keypress" || name == "keydown" || name == "keyup") && isSameStructType(value, KeyEventRecord("", false, false, false, false, 0))) {
				if (componentName == "canvas") {
					kst = cast(value : flow -> KeyEventRecord);
					iScriptInfo(
						manager,
						checkStr + " = set",
						Some(behaviourDescriptor.component.id)
					);
					emitKeyEvent(currentClip(), name, kst.utf, kst.ctrl, kst.shift, kst.alt, kst.meta, kst.keycode);
				}

				true
			} else {
				false
			}
		} else if (!strContains(name, "pebble")) {
			mv = getBehaviourById(manager, behaviourDescriptor, name != "click" && name != "hover" && name != "point",
				name != "click" && name != "hover" && name != "point", name == "focused", false);
			switch (mv) {
				None(): {
					true;
				}
				Some(bv): {
					iScriptInfo(
						manager,
						checkStr + " = set",
						Some(behaviourDescriptor.component.id)
					);
					next(bv, flow2b(value));
					true;
				}
			}
		} else {
			true;
		}
	}
}

checkBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, fn : (flow) -> bool) -> bool {
	eitherMap(
		getMaterialFocusByIScriptId(manager.focus, behaviourDescriptor.component.id),
		\fc ->
			if (fc.name == behaviourDescriptor.component.name)
				eitherMap(
					lookupTree(fc.behaviours, behaviourDescriptor.name),
					\beh -> {
						fn(getValue(beh.first));
					},
					false
				)
			else
				false,
		false
	)
}

subscribeToIScriptBehavioursFocus(manager : MaterialManager, captureHttp : bool) -> () -> void {

	if (captureHttp) {
		if (isNone((manager.iscript).httpRequestDisposer))
		(manager.iscript).httpRequestDisposer ::= Some(subscribeToHttpRequest(manager));
	};

	subscribeToIScriptBehavioursFocus2(manager, manager.focus)
	|> (\uns -> arrayPush(uns, subscribeToStageWidthHeight(manager)))
	|> (\uns -> \ -> applyall(uns))
}

subscribeToStageWidthHeight(manager : MaterialManager) -> () -> void {
	deferUntilNextFrameRendered(\ -> addIScriptStageWidthHeight(manager));

	addEventListener(currentClip(), "resize", \ -> addIScriptStageWidthHeight(manager))
}

substituteHttpRequest(manager : MaterialManager) -> () -> void {
	next(
		manager.iscript.requests,
		foldIScriptStack(getValue(manager.iscript.script).stack, makeList(), \acc, delay, record ->
			switch (record : IScriptRecord) {
				IScriptRequestRecord(__, __, __, __, __, __): Cons(Pair(delay, record), acc);
				default: acc;
			}
		)
	);

	if (countList(getValue(manager.iscript.requests)) > 0) {
		setHttpRequestCallback(\url, post, headers2, params2 -> {
			headers = filterRequestRecordHeaders(headers2);
			params = filterRequestRecordParams(params2);
			received = IScriptRequestRecord(url, post, headers, params, 0., IScriptRequestOk(""));
			compareFns : HttpRequestResponseCompareFns = getHttpRequestResponseCompareFns(received);

			eitherFn(
				foldList(getValue(manager.iscript.requests), None(), \acc, r -> {
					if (isNone(acc)) {
						rec = r.second;
						switch (rec : IScriptRecord) {
							IScriptRequestRecord(_url, _post, _headers, _params, delay, response): {
								compareFns.requestsCompareFn(received, rec)
								|> (\v -> if (v) Some(rec) else acc)
							}
							default: acc;
						}
					} else {
						acc;
					}
				}),
				\rq : IScriptRequestRecord -> {
					HttpRequestCallbacks(
						\data -> {
							compareFns.responseCompareFn(IScriptRequestOk(data), rq.response)
							|> (\v -> if (v) {
								next(manager.iscript.requests, filterList(getValue(manager.iscript.requests), \r -> r.second != rq));
							}
							else {
								iScriptError(manager, "Request error " + url + " : wrong response", None());
							})
						},
						\error -> {
							compareFns.responseCompareFn(IScriptRequestError(error), rq.response)
							|> (\v -> if (v) {
								next(manager.iscript.requests, filterList(getValue(manager.iscript.requests), \r -> r.second != rq));
							}
							else {
								iScriptError(manager, "Request error " + url + " : wrong response", None());
							})
						},
						\status -> {
							// if (rq.response == IScriptRequestStatus(status)) {
							// 	next(manager.iscript.requests, filterList(getValue(manager.iscript.requests), \r -> r.second == rq));
							// } else {
							// 	println("Request error");
							// 	println("status");
							// 	println(status);
							// }
						}
					)
				},
				\ -> {
					HttpRequestCallbacks(
						\data -> {
							iScriptError(manager, "Request error " + url + " " + toString(params2) + " : unknown request", None());
						},
						\error -> {
							iScriptError(manager, "Request error " + url + " " + toString(params2) + " : unknown request", None());
						},
						\status -> {
							// println("Unknown request");
							// println("status");
							// println(status);
						}
					)
				}
			)
		});
	};

	\ -> {
		clearHttpRequestCallback();
		if (countList(getValue(manager.iscript.requests)) > 0) {
			if (getUrlParameter(UP_ISCRIPTTEST) != "") {
				iter(list2array(getValue(manager.iscript.requests)), \v -> println(v))
			}
			iScriptError(manager, "Requests error : " + i2s(countList(getValue(manager.iscript.requests))) + " requests left in queue", None());
			next(manager.iscript.requests, makeList());
		}
	}
}

subscribeToHttpRequest(manager : MaterialManager) -> () -> void {
	setHttpRequestCallback(\url, post, headers, params2 -> {
		params = filter(params2, \p -> p.key != "t" && p.key != "jwt");
		time = timestamp();

		HttpRequestCallbacks(
			\data -> {
				addIScriptRequestRecord(manager, url, post, headers, params, timestamp() - time, IScriptRequestOk(data));
			},
			\error -> {
				addIScriptRequestRecord(manager, url, post, headers, params, timestamp() - time, IScriptRequestError(error));
			},
			\status -> {
				// addRecord(IScriptRequestStatus(status));
			}
		);
	});

	clearHttpRequestCallback;
}

subscribeToIScriptBehavioursFocus2(manager : MaterialManager, focus : MFocusGroup) -> [() -> void] {
	foldTree(getValue(focus.focusIds), [], \k, v, acc ->
		switchMaterialFocus(
			v,
			\f ->
				if (fgetValue(f.recordingEnabled))
					arrayPush(acc, initIScriptRecording(manager, f, false))
				else
					acc,
			\f ->
				if (fgetValue(f.recordingEnabled))
					concat(acc, subscribeToIScriptBehavioursFocus2(manager, f))
				else
					acc
		)
	)
	|> (\f -> arrayPush(f, initIScriptRecording(manager, focus, false)))
}

makeValueInputByTypeHint(possibleValues : [flow], typeHelper : string, maybeInitial : Maybe<flow>, enabledB : Transform<bool>) -> Pair<DynamicBehaviour<flow>, MEGItem> {
	result : Pair<DynamicBehaviour<flow>, MEGItem> =
		if (typeHelper == "bool" && length(possibleValues) > 1) {
			valueB = make(either(maybeInitial, flow(false)));

			Pair(
				valueB,
				MEGSwitchControl(
					"Choose value",
					cast(valueB : DynamicBehaviour<flow> -> DynamicBehaviour<bool>),
					[
						MOnOffText(flow2s(possibleValues[0]), flow2s(possibleValues[1])),
						MEnabled(enabledB),
					]
				)
			);
		} else if (typeHelper == "index") {
			valueB = make(either(maybeInitial, flow(-1)));

			Pair(
				valueB,
				MEGDropDown(
					"Choose value",
					valueB,
					Pair(-1, "Select value"),
					mapi(possibleValues, \i, pv -> Pair(i, pv)),
					[MEnabled(enabledB)]
				)
			);
		} else if (typeHelper == "int") {
			valueB = make(either(maybeInitial, flow(0)));

			Pair(
				valueB,
				MEGTextInput(
					"Enter value",
					valueB,
					[
						MNativeInput(true),
						MEnabled(enabledB),
						MHelperText(const(Some(typeHelper)), true),
						TextInputType(NumericType())
					]
				)
			);
		} else if (typeHelper == "double") {
			valueB = make(either(maybeInitial, flow(0.0)));

			Pair(
				valueB,
				MEGTextInput(
					"Enter value",
					valueB,
					[
						MNativeInput(true),
						MEnabled(enabledB),
						MHelperText(const(Some(typeHelper)), true),
						TextInputType(NumericType())
					]
				)
			);
		} else if (typeHelper == "string" || typeHelper == "") {
			valueB = make(either(maybeInitial, flow("")));

			Pair(
				valueB,
				MEGTextInput(
					"Enter value",
					valueB,
					[
						MNativeInput(true),
						MEnabled(enabledB),
						MHelperText(const(Some(typeHelper)), true)
					]
				)
			);
		} else if (startsWith(typeHelper, "[")) {
			valueB = make(either(maybeInitial, flow([])));

			Pair(
				valueB,
				MEGTextInput(
					"Enter value",
					valueB,
					[
						MNativeInput(true),
						MEnabled(enabledB),
						MHelperText(const(Some(typeHelper)), true)
					]
				)
			);
		} else {
			valueB = make(either(maybeInitial, flow(deserialize(typeHelper, IllegalStruct()))));

			Pair(
				valueB,
				MEGTextInput(
					"Enter value",
					valueB,
					[
						MNativeInput(true),
						MEnabled(enabledB),
						MHelperText(const(Some(typeHelper)), true)
					]
				)
			);
		}

	result
}

getDefaultValueByTypeHint(typeHint : string) -> flow {
	result : flow =
		if (typeHint == "bool")
			flow(false)
		else if (typeHint == "index")
			flow(-1)
		else if (typeHint == "int")
			flow(0)
		else if (typeHint == "double")
			flow(0.0)
		else if (typeHint == "string" || typeHint == "")
			flow("")
		else if (startsWith(typeHint, "["))
			flow([])
		else
			flow(deserialize(typeHint, IllegalStruct()));

	result
}

showValueInputDialog(manager : MaterialManager, record : IScriptInputRecord, onEnter : (flow) -> void, m2t : (Material, MFocusGroup) -> Tropic) -> void {
	closeWhen = make(false);

	pair = makeValueInputByTypeHint(record.possibleValues, record.valueTypeHelper, None(), const(true));
	valueB = pair.first;
	content = MGetFocusGroup(\p -> MEGItem2T(p, pair.second, [MWidth(400.)], m2t));

	dialogActions = MDialogActions([
		// MTextButton("CANCEL", \ -> {
		// 	next(closeWhen, true);
		// 	onCancel()
		// }, [], [MShortcut("esc")]),
		MTextButton("PROCEED", \ -> {
			next(closeWhen, true);
			onEnter(getValue(valueB));
		}, [], [MShortcut("enter")])
	]);

	dialogStyle = [
		MDialogTitle("Please, enter value for input \"" + record.name + "\""),
		MDialogUseFrame(),
		MDialogScroll(),
		dialogActions,
		IScriptRecordingEnabled(const(false))
	];

	renderMDialog(
		manager,
		closeWhen,
		dialogStyle,
		content,
		m2t
	);
}

loadStoredIScript(manager : MaterialManager, storedIScript : StoredIScript) -> void {
	loadAdditionalIScriptInfo(manager, storedIScript.additionalInfo);
	next(manager.iscript.script, storedIScript.script);
}

startIScriptRecording(manager : MaterialManager, options : CaptureOptions, continueRec : bool) -> [() -> void] {
	if (continueRec) {
		resumeCurrentIScript(manager);
	} else {
		clearCurrentIScript(manager);
	}

	// addIScriptUrlRecord(manager, loaderUrl());
	addIScriptScreenshot(manager, false);

	[
		subscribeToIScriptBehavioursFocus(manager, options.captureHttpRequests),
		\ -> {
			next(manager.iscript.scriptChangedB, true);
		}
	]
}

startIScriptReplaying(
	manager : MaterialManager,
	m2t : (Material, MFocusGroup) -> Tropic,
	onFinish : ([IScriptReplayResult]) -> void
) -> [() -> void] {
	if (!isIScriptEmpty(manager)) {
		tempStageWidthHeight = getValue(stageWidthHeight);

		nextDistinct(manager.iscript.output, map(getValue(manager.iscript.output), \ov -> IScriptOutputValue(ov.name, false, None())));
		nextDistinct(manager.iscript.errors, makeList());

		showIScriptReplayCursor(manager);

		(manager.iscript).httpRequestDisposer ::= Some(substituteHttpRequest(manager));
		[
			replayIScript(
				manager,
				m2t,
				\b -> {
					onFinish(
						[
							IScriptReplayResult(
								getValue(manager.iscript.currentFileNameB),
								b,
								extractLastLogicalScreenshot(manager),
								extractLastVisualScreenshot(manager),
								getIScriptLogicalScreenshot(manager),
								getIScriptVisualScreenshot(manager, true)
							)
						]
					)
				},
				true
			),
			\ -> nextDistinct(stageWidthHeight, tempStageWidthHeight)
		]
		|> (\d -> \ -> applyall(d))
		|> (\f -> (manager.iscript).replayDisposer ::= Some(f))
	};
	[]
}

startIScriptScenarioReplaying(
	manager : MaterialManager,
	m2t : (Material, MFocusGroup) -> Tropic,
	onFinish : ([IScriptReplayResult]) -> void
) -> [() -> void] {
	if (!isIScriptScenarioEmpty(manager)) {
		nextDistinct(manager.iscript.output, map(getValue(manager.iscript.output), \ov -> IScriptOutputValue(ov.name, false, None())));
		nextDistinct(manager.iscript.errors, makeList());
		scenarioTestResults = ref [];

		iScriptInfo(manager, "=== Start Scenario Tests ===", None());
		next(manager.iscript.scenario.runningIScriptIdxB, 0);

		stopScenarioReplay = \ -> {
			onFinish(^scenarioTestResults);
		};
		[
			makeSubscribeUns(
				fselect2(
					manager.iscript.scenario.scriptsB,
					manager.iscript.scenario.runningIScriptIdxB,
					FLift2(\scriptRecords, id ->
						if (id >= 0 && id < length(scriptRecords))
							Some(scriptRecords[id])
						else
							None()
					)
				),
				\scriptRecordM -> {
					eitherFn(
						scriptRecordM,
						\scriptRecord -> {
							uns = ref [];

							scriptPath = scriptRecord.scriptPath;

							tempStageWidthHeight = getValue(stageWidthHeight);

							iScriptInfo(manager, "Replaying " + scriptPath, None());

							next(manager.iscript.currentFileNameB, scriptPath);

							onSuccess = \ -> {
								showIScriptReplayCursor(manager);

								(manager.iscript).httpRequestDisposer ::= Some(substituteHttpRequest(manager));
								[
									replayIScript(manager, m2t,
										\b -> {
											hideIScriptReplayCursor(manager);

											if (!b) {
												iScriptError(manager, scriptPath + " finished with errors", None());
											}

											iscriptLogicalScreenshotM = extractLastLogicalScreenshot(manager);
											iscriptVisualScreenshotM = extractLastVisualScreenshot(manager);

											afterReplayLogicalScreenshot = getIScriptLogicalScreenshot(manager);
											afterReplayVisualScreenshot = getIScriptVisualScreenshot(manager, true);

											refArrayPush(
												scenarioTestResults,
												IScriptReplayResult(
													scriptPath,
													b,
													iscriptLogicalScreenshotM,
													iscriptVisualScreenshotM,
													afterReplayLogicalScreenshot,
													afterReplayVisualScreenshot
												)
											);

											outputValues : [Pair<string, Maybe<flow>>] = map(getValue(manager.iscript.output), \ov : IScriptOutputValue -> Pair(ov.name, ov.value));
											if (length(outputValues) > 0) {
												setFileContent("iscript_output.txt", getFileContent("iscript_output.txt") + serialize(outputValues)) |> ignore;
											}
											iScriptInfo(manager, "", None());

											if (isIScriptScenarioReplaying(manager)) {
												next(manager.iscript.scenario.runningIScriptIdxB, getValue(manager.iscript.scenario.runningIScriptIdxB) + 1);
											} else {
												stopScenarioReplay();
											}
										},
										true
									),
									\ -> nextDistinct(stageWidthHeight, tempStageWidthHeight)
								]
								|> (\d -> \ -> applyall(d))
								|> (\f -> (manager.iscript).replayDisposer ::= Some(f))
							};

							onError = \ -> {
								disposeIScriptHandler(manager);
								next(manager.iscript.scenario.runningIScriptIdxB, getValue(manager.iscript.scenario.runningIScriptIdxB) + 1);
							};

							uns := [
								\ -> disposeIScriptHandler(manager),
								\ -> clearIScriptAdditionalInfo(manager),
								loadIScriptFile(manager, scriptPath, onSuccess, onError)
							];

							[\ -> dispUnsA(uns)];
						},
						\ -> {
							stopScenarioReplay();
							[];
						}
					);
				}
			)()
		]
		|> (\d -> \ -> applyall(d))
		|> (\f -> (manager.iscript).replayScenarioDisposer ::= Some(f));
		[]
	} else {
		[]
	}
}

disposeIScriptHandler(manager : MaterialManager) -> void {
	maybeApply((manager.iscript).httpRequestDisposer, apply0);
	(manager.iscript).httpRequestDisposer ::= None();
	maybeApply((manager.iscript).replayDisposer, apply0);
	(manager.iscript).replayDisposer ::= None();
}

disposeIScriptScenarioHandler(manager : MaterialManager) -> void {
	maybeApply((manager.iscript).replayScenarioDisposer, apply0);
	(manager.iscript).replayScenarioDisposer ::= None();
}

handleIScriptState(manager : MaterialManager, m2t : (Material, MFocusGroup) -> Tropic) -> () -> void {
	makeSubscribe2Uns(manager.iscript.state, \state -> {
		switch (state) {
			IScriptRecording(options, continue): {
				disposeIScriptHandler(manager);
				startIScriptRecording(manager, options, continue);
			}
			IScriptRecordingPaused(options, continue): {
				[]
			}
			IScriptReplaying(onFinish): {
				disposeIScriptHandler(manager);
				startIScriptReplaying(manager, m2t, onFinish);
			}
			IScriptReplayingPaused(): {
				[]
			}
			IScriptScenarioReplaying(onFinish): {
				disposeIScriptHandler(manager);
				disposeIScriptScenarioHandler(manager);
				startIScriptScenarioReplaying(manager, m2t, onFinish);
			}
			IScriptScenarioReplayingPaused(): {
				[]
			}
			IScriptStopped(): {
				disposeIScriptHandler(manager);
				disposeIScriptScenarioHandler(manager);
				[]
			}
			IScriptAddMFocusRecord(addDialog): {
				[
					make2SubscribeUns(getCurrentHoveredItemBehaviour(manager), getCurrentPressedItemBehaviour(manager), \hb, pb -> {
						eitherFn(
							pb,
							\p -> {
								setIScriptState(manager, IScriptStopped());
								addDialog(p);

								[]
							},
							\ -> {
								eitherMap(
									hb,
									\h -> [highlightMaterialFocus(manager, h)],
									[]
								);
							}
						);
					})()
				]
			}
			IScriptAddMFocusGroupRecord(addDialog): {
				[
					make2SubscribeUns(getCurrentHoveredItemBehaviour(manager), getCurrentPressedItemBehaviour(manager), \hb, pb -> {
						eitherFn(
							pb,
							\p -> {
								setIScriptState(manager, IScriptStopped());
								addDialog(p.parent);

								[]
							},
							\ -> {
								eitherMap(
									hb,
									\h -> [highlightMaterialFocus(manager, h.parent)],
									[]
								);
							}
						);
					})()
				]
			}
			IScriptAddMFocusAlias(addDialog): {
				[
					make2SubscribeUns(getCurrentHoveredItemBehaviour(manager), getCurrentPressedItemBehaviour(manager), \hb, pb -> {
						eitherFn(
							pb,
							\p -> {
								setIScriptState(manager, IScriptStopped());
								addDialog(p);

								[]
							},
							\ -> {
								eitherMap(
									hb,
									\h -> [highlightMaterialFocus(manager, h)],
									[]
								);
							}
						);
					})()
				]
			}
			IScriptAddMFocusGroupAlias(addDialog): {
				[
					make2SubscribeUns(getCurrentHoveredItemBehaviour(manager), getCurrentPressedItemBehaviour(manager), \hb, pb -> {
						eitherFn(
							pb,
							\p -> {
								setIScriptState(manager, IScriptStopped());
								addDialog(p.parent);

								[]
							},
							\ -> {
								eitherMap(
									hb,
									\h -> [highlightMaterialFocus(manager, h.parent)],
									[]
								);
							}
						);
					})()
				]
			}
		}
	})()
}

onIScriptReplayFinish(manager : MaterialManager, compareDialog : ([IScriptReplayResult]) -> void) -> ([IScriptReplayResult]) -> void {
	\b -> {
		hideIScriptReplayCursor(manager);

		if (countA(b, \v -> v.isReplaySuccessful) < length(b)) {
			iScriptError(manager, "IScript replay finished with errors", None());
		} else {
			iScriptInfo(manager, "IScript replay completed successfully", None());
		}

		outputValues = map(getValue(manager.iscript.output), \ov : IScriptOutputValue -> Pair(ov.name, ov.value));

		if (length(outputValues) > 0) {
			setFileContent("iscript_output.txt", serialize(outputValues)) |> ignore;
		}

		nextDistinct(manager.iscript.state, IScriptStopped());

		// If there was a run with the parameter "playiscript", then we exit with the result return.
		if (length(b) > 1) {
			iScriptInfo(manager, "=== End Scenario ===", None());
			if (getUrlParameter(UP_ISCRIPTPLAYSCENARIO) != "")
				quit(countA(b, \v -> !v.isReplaySuccessful))
			else
				compareDialog(b);
		} else {
			if (getUrlParameter(UP_ISCRIPTPLAY) != "")
				quit(b2i(countA(b, \v -> v.isReplaySuccessful) < length(b)))
			else
				compareDialog(b);
		}
	}
}

isIScriptUrlParamsSet() -> bool {
	isUrlParameterTrue(UP_ISCRIPTRECORD) ||
	getUrlParameter(UP_ISCRIPTPLAY) != "" || getUrlParameter(UP_ISCRIPTPLAYSCENARIO) != ""
}

