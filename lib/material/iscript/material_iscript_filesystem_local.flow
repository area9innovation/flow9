import material/internal/material_iscript_internal;
import material/iscript/material_iscript_pack;
import sys/system;

export {
	iScriptToLocalFile(manager : MaterialManager, filename : string) -> bool;
	iScriptToLocalFile2(manager : MaterialManager, storedIScript : StoredIScript, filename : string) -> bool;
	iScriptToLocalFileUrlEncode(manager : MaterialManager, filename : string) -> bool;
	iScriptToLocalFileUrlEncodeJS(manager : MaterialManager, filename : string) -> void;
	iScriptFromLocalFile(manager : MaterialManager, filename : string) -> void;
	iScriptFromLocalFile2(manager : MaterialManager, filename : string) -> IScript;
	iScriptFromUrlEncode(manager : MaterialManager, file : string) -> Pair<bool, Maybe<string>>;
	storedIScriptFromLocalFile(filename : string) -> StoredIScript;

	iScriptScenarioToLocalFile(manager : MaterialManager, filename : string) -> bool;
	iScriptScenarioFromLocalFile(manager : MaterialManager, filename : string) -> void;
}

iScriptToLocalFile(manager : MaterialManager, filename : string) -> bool {
	iScriptToLocalFile2(
		manager,
		prepareCurrentIScriptForSave(manager),
		filename
	)
}

iScriptToLocalFile2(manager : MaterialManager, storedIScript : StoredIScript, filename : string) -> bool {
	setFileContent(
		filename,
		packStoredIScript(storedIScript)
	)
}

iScriptToLocalFileUrlEncode(manager : MaterialManager, filename : string) -> bool {
	setFileContent(
		filename,
		iScriptUrlEncodeFile(manager)
	)
}

iScriptToLocalFileUrlEncodeJS(manager : MaterialManager, filename : string) -> void {
	saveFileClient(
		filename,
		iScriptUrlEncodeFile(manager),
		""
	)
}

iScriptUrlEncodeFile(manager : MaterialManager) -> string {
	json2string(JsonObject([
		Pair("iscript", JsonString(urlEncode(packStoredIScript(prepareCurrentIScriptForSave(manager)))))
	]))
}

iScriptFromLocalFile(manager : MaterialManager, filename : string) -> void {
	next(manager.iscript.script, iScriptFromLocalFile2(manager, filename));
}

iScriptFromLocalFile2(manager : MaterialManager, filename : string) -> IScript {
	storedIScript : StoredIScript = storedIScriptFromLocalFile(filename);

	loadAdditionalIScriptInfo(manager, storedIScript.additionalInfo);

	storedIScript.script
}

iScriptFromUrlEncode(manager : MaterialManager, file : string) -> Pair<bool, Maybe<string>> {
	json = parseJson(file);
	script = getJsonStringField(json, "iscript", "");

	if (script != "") {
		callId = getJsonStringField(json, "callid", "");
		checkErrors = getJsonBoolField(json, "iscriptcheckerrors", getValue(manager.iscript.settings.replayCheckErrors));

		storedIScript : StoredIScript = unpackStoredIScript(urlDecode(script));
		loadAdditionalIScriptInfo(manager, storedIScript.additionalInfo);
		next(manager.iscript.script, storedIScript.script);
		next(manager.iscript.settings.replayCheckErrors, checkErrors);

		Pair(true, if (callId != "") Some(callId) else None())
	} else {
		Pair(false, None())
	}
}

storedIScriptFromLocalFile(filename : string) -> StoredIScript {
	unpackStoredIScript(getFileContent(filename))
}

iScriptScenarioToLocalFile(manager : MaterialManager, filename : string) -> bool {
	setFileContent(
		filename,
		packIScriptScenario(manager.iscript.scenario)
	)
}

iScriptScenarioFromLocalFile(manager : MaterialManager, filename : string) -> void {
	if (fileExists(filename)) {
		scenario = unpackIScriptScenario(getFileContent(filename));
		next(manager.iscript.scenario.pathB, filename);
		next(manager.iscript.scenario.descriptionB, getValue(scenario.descriptionB));
		next(manager.iscript.scenario.scriptsB, getValue(scenario.scriptsB));
		nextDistinct(manager.iscript.scenario.scenarioChangedB, false);
		nextDistinct(manager.iscript.scenario.runningIScriptIdxB, -1);
	}
}
