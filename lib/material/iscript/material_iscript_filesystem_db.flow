import material/internal/material_iscript_internal;
import material/iscript/material_iscript_pack;
import material/extra/filesystem/localfilesystem_extended_api;
import material/extra/filesystem/filesystemdb_partition;

export {
	setIScriptFilesystemDBHandler(manager : MaterialManager, jwt : string, iScriptPartitionId : int) -> void;
	resetIScriptFilesystemDBHandler(manager : MaterialManager) -> void;

	isIScriptFilesystemDBInitialized(manager : MaterialManager) -> bool;
	getIScriptFilesystemDBPartitionName(manager : MaterialManager) -> string;
	getIScriptFilesystemDBPartitionId(manager : MaterialManager) -> int;

	storeCurrentAndSetIScriptDBPartition(manager : MaterialManager) -> void;
	restoreCurrentDBPartition(manager : MaterialManager) -> void;

	iScriptToDB(manager : MaterialManager, filename : string) -> void;
	iScriptToDB2(manager : MaterialManager, filename : string, storedIScript : StoredIScript, onDone : () -> void, onError : (string) -> void ) -> void;
	iScriptFromDB(manager : MaterialManager, scriptname : string) -> void;
	iScriptFromDB2(manager : MaterialManager, scriptname : string, onDone: (storedIScript : StoredIScript) -> void, onError : (string) -> void) -> void;
	storedIScriptFromDB(manager : MaterialManager, scriptname : string, onDone: (storedIScript : StoredIScript) -> void, onError : (string) -> void) -> void;

	isIScriptDBPath(path : string) -> bool;

	iScriptScenarioToDB(manager : MaterialManager, path : string, scenario : IScriptScenario, onDone : () -> void, onError : (string) -> void ) -> void;
	iScriptScenarioFromDB(manager : MaterialManager, path : string) -> void;
	iScriptScenarioFromDB2(manager : MaterialManager, path : string, onDone : (scenario : IScriptScenario) -> void, onError : (string) -> void) -> void;
}

setIScriptFilesystemDBHandler(manager : MaterialManager, jwt : string, iScriptPartitionId : int) -> void {
	next(manager.iscript.filesystemDB, Some(IScriptFilesystemDB("IScripts", jwt, iScriptPartitionId, fsAPIGetPartitionId())));
}

resetIScriptFilesystemDBHandler(manager : MaterialManager) -> void {
	next(manager.iscript.filesystemDB, None());
}

isIScriptFilesystemDBInitialized(manager : MaterialManager) -> bool {
	isSome(getValue(manager.iscript.filesystemDB))
}

getIScriptFilesystemDBPartitionName(manager : MaterialManager) -> string {
	eitherMap(getValue(manager.iscript.filesystemDB), \fs -> fs.partitionName, "IScripts");
}

getIScriptFilesystemDBPartitionId(manager : MaterialManager) -> int {
	eitherMap(getValue(manager.iscript.filesystemDB), \fs -> fs.iScriptPartitionId, -1);
}

storeCurrentAndSetIScriptDBPartition(manager : MaterialManager) -> void {
	maybeApply(getValue(manager.iscript.filesystemDB), \fs -> {
		fs.storedPartitionId ::= fsAPIGetPartitionId();
		fsAPISetPartitionId(getIScriptFilesystemDBPartitionId(manager));
	});
}

restoreCurrentDBPartition(manager : MaterialManager) -> void {
	maybeApply(getValue(manager.iscript.filesystemDB), \fs -> {
		fsAPISetPartitionId(fs.storedPartitionId);
	});
}

iScriptToDB(manager : MaterialManager, filename : string) -> void {
	iScriptToDB2(
		manager,
		filename,
		prepareCurrentIScriptForSave(manager),
		nop,
		\err_msg -> iScriptInfo(manager, err_msg, None())
	)
}

iScriptToDB2(manager : MaterialManager, filename : string, storedIScript : StoredIScript, onDone : () -> void, onError : (string) -> void ) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		getFilesystemExtAPI().setFileContent(
			filename,
			packStoredIScript(storedIScript),
			onDone,
			\err_msg -> onError(err_msg)
		)
	} else {
		onError("IScriptDBFilesystemExtAPI is not set");
	}
}

iScriptFromDB(manager : MaterialManager, scriptname : string) -> void {
	iScriptFromDB2(
		manager,
		scriptname,
		\storedIScript : StoredIScript -> {
			next(manager.iscript.script, storedIScript.script);
		},
		\err_msg -> {
			iScriptInfo(manager, err_msg, None())
		}
	);
}

iScriptFromDB2(manager : MaterialManager, scriptname : string, onDone : (storedIScript : StoredIScript) -> void, onError : (string) -> void) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		getFilesystemExtAPI().getFileContent(
			scriptname,
			\s : string -> {
				storedIScript : StoredIScript = unpackStoredIScript(s);
				loadAdditionalIScriptInfo(manager, storedIScript.additionalInfo);
				onDone(storedIScript)
			},
			\err_msg -> {
				onError(err_msg);
			}
		)
	} else {
		onError("IScriptDBFilesystemExtAPI is not set");
	}
}

storedIScriptFromDB(manager : MaterialManager, scriptname : string, onDone: (storedIScript : StoredIScript) -> void, onError : (string) -> void) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		getFilesystemExtAPI().getFileContent(
			scriptname,
			\s : string -> onDone(unpackStoredIScript(s)),
			\err_msg -> onError(err_msg)
		)
	} else onError("IScriptDBFilesystemExtAPI is not set")
}

isIScriptDBPath(path : string) -> bool {
	startsWith(path, "DB:/")
}

iScriptScenarioToDB(manager : MaterialManager, path : string, scenario : IScriptScenario, onDone : () -> void, onError : (string) -> void ) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		getFilesystemExtAPI().setFileContent(
			path,
			packIScriptScenario(scenario),
			onDone,
			\err_msg -> onError(err_msg)
		)
	} else {
		onError("IScriptDBFilesystemExtAPI is not set");
	}
}

iScriptScenarioFromDB(manager : MaterialManager, path : string) -> void {
	iScriptScenarioFromDB2(
		manager,
		path,
		\scenario : IScriptScenario -> {
			next(manager.iscript.scenario.pathB, path);
			next(manager.iscript.scenario.descriptionB, getValue(scenario.descriptionB));
			next(manager.iscript.scenario.scriptsB, getValue(scenario.scriptsB));
			nextDistinct(manager.iscript.scenario.scenarioChangedB, false);
			nextDistinct(manager.iscript.scenario.runningIScriptIdxB, -1);
		},
		\err_msg -> {
			iScriptInfo(manager, err_msg, None())
		}
	);
}

iScriptScenarioFromDB2(manager : MaterialManager, path : string, onDone : (scenario : IScriptScenario) -> void, onError : (string) -> void) -> void {
	if (isIScriptFilesystemDBInitialized(manager)) {
		getFilesystemExtAPI().getFileContent(
			path,
			\s : string -> {
				scenario = unpackIScriptScenario(s);
				onDone(scenario);
			},
			\err_msg -> {
				onError(err_msg);
			}
		)
	} else {
		onError("IScriptDBFilesystemExtAPI is not set");
	}
}
