import material/internal/material_iscript_internal;
import material/iscript/material_iscript_form;
import material/iscript/material_iscript_cursors;

export {
	repeatBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, value : flow) -> bool;
	getBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, focusExists : bool, enabled : bool, focusable : bool, click : bool) -> Maybe<DynamicBehaviour<flow>>;

	replayGeneratedRecord(manager : MaterialManager, record : IScriptGeneratedRecord) -> bool;
}


repeatBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, value : flow) -> bool {
	name = behaviourDescriptor.name;
	componentName = behaviourDescriptor.component.name;

	addHeight = \pnt -> Point(pnt.x, pnt.y + if (isIScriptEnabled(manager)) 48.0 else 0.0);
	checkStr =
		if (getValue(manager.iscript.settings.replayCheckErrors))
			">> Emit " + componentName + " " + name + " value " + toString(value)
		else
			">> Replay " + componentName + " " + name + " value " + toString(value);

	emitMouseEv = \event, point -> {
		emitMouseEvent(
			currentClip(), event,
			point.x,
			point.y
		);

		next(manager.iscript.replayCursor.positionB,
			Point(
				point.x - getValue(manager.iscript.replayCursor.clickPointB).x,
				point.y - getValue(manager.iscript.replayCursor.clickPointB).y
			)
		);

		iScriptInfo(
			manager,
			checkStr + " = " + event + " at (" + toString(point.x) + ", " + toString(point.y) + ")",
			Some(behaviourDescriptor.component.id)
		);
	}

	if (getValue(manager.iscript.settings.replayCheckErrors)) { // replay option "Check errors" is on
		if ((name == "mousedown" || name == "mouseup" || name == "mousemove") && isSameStructType(value, zeroPoint)) {
			point = cast(value : flow -> Point) |> addHeight;
			emitMouseEv(name, point);

			if (name == "mousedown" && behaviourDescriptor.component.id != makeList()) {
				eitherFn(
					maybeBind(
						getMaterialFocusByIScriptId(manager.focus, behaviourDescriptor.component.id),
						\foc -> switchMaterialFocus(
							foc,
							\f -> Some(f),
							\f -> None()
						)
					),
					\foc -> {
						down = getValue(foc.down);
						if (!down) iScriptError(manager, "Mousedown: down is false at " + toString(point), Some(behaviourDescriptor.component.id));
						down
					},
					\ -> {
						iScriptError(manager, "Mousedown: can't find focus at "+ toString(point), Some(behaviourDescriptor.component.id));
						false
					}
				)
			} else {
				true
			}
		} else if ((name == "keypress" || name == "keydown" || name == "keyup") && isSameStructType(value, KeyEventRecord("", false, false, false, false, 0))) {
			kst = cast(value : flow -> KeyEventRecord);

			isFocused = if (name == "keydown") {
				eitherMap(
					getMaterialFocusByIScriptId(manager.focus, behaviourDescriptor.component.id),
					\foc -> {
						switchMaterialFocus(
							foc,
							\f -> {
								Some(f.focused)
							},
							\f -> {
								None()
							}
						)
					},
					None()
				)
			} else {
				None()
			};
			emitKey = \ -> {
				iScriptInfo(
					manager,
					checkStr,
					Some(behaviourDescriptor.component.id)
				);
				emitKeyEvent(currentClip(), name, kst.utf, kst.ctrl, kst.shift, kst.alt, kst.meta, kst.keycode);
				true
			}
			eitherFn(
				isFocused,
				\focused -> {
					if (getValue(focused)) {
						emitKey()
					} else {
						iScriptError(manager, "Text input is not focused", Some(behaviourDescriptor.component.id));
						false
					}
				},
				emitKey
			)
		} else {
			iscriptReplayCheckCursorShape(manager, name, value);
			replayBehaviour = contains(getValue(manager.iscript.settings.replayReplayBehaviours), name);
			checkEnabled = replayBehaviour;
			checkFocused = replayBehaviour && name == "focused";
			checkClickable = replayBehaviour && ((name == "down" && flow(value) != None()) || (name == "click" && flow(value) == true)
				|| (name == "hover" && flow(value) == true) || name == "position");
			checkExists = checkFocused || checkClickable;
			eitherMap(
				getBehaviourById(manager, behaviourDescriptor, checkExists, checkEnabled, checkFocused, checkClickable),
				\b -> {
					if (replayBehaviour) {
						// Behaviours we need to replay
						next(b, value);
						true
					} else {
						if (contains(getValue(manager.iscript.settings.replayCheckedBehaviours), name) && name != "position") {
							// Checked behaviours
							if (getValue(b) != flow(value)) {
								iScriptError(manager, "Check Errors. " + componentName + " " + name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "] doesn't match: " +
									toString(getValue(b)) + " != " + toString(value), Some(behaviourDescriptor.component.id));
								false
							} else {
								true
							}
						} else // All unchecked behaviours
						{
							true
						}
					}
				},
				!checkExists
			)
		}
	} else { // replay option "Check errors" is off
		if (countList(behaviourDescriptor.component.id) == 0) {
			if ((name == "mousedown" || name == "mouseup" || name == "mousemove") && isSameStructType(value, zeroPoint)) {
				emitMouseEv("mousemove", cast(value : flow -> Point) |> addHeight);
				true
			} else if ((name == "keypress" || name == "keydown" || name == "keyup") && isSameStructType(value, KeyEventRecord("", false, false, false, false, 0))) {
				if (componentName == "canvas") {
					kst = cast(value : flow -> KeyEventRecord);
					iScriptInfo(
						manager,
						checkStr + " = set",
						Some(behaviourDescriptor.component.id)
					);
					emitKeyEvent(currentClip(), name, kst.utf, kst.ctrl, kst.shift, kst.alt, kst.meta, kst.keycode);
				}

				true
			} else {
				false
			}
		} else if (!strContains(name, "pebble")) {
			mv = getBehaviourById(manager, behaviourDescriptor, name != "click" && name != "hover" && name != "point",
				name != "click" && name != "hover" && name != "point", name == "focused", false);
			switch (mv) {
				None(): {
					true;
				}
				Some(bv): {
					iScriptInfo(
						manager,
						checkStr + " = set",
						Some(behaviourDescriptor.component.id)
					);
					next(bv, flow2b(value));
					true;
				}
			}
		} else {
			true;
		}
	}
}

getBehaviourById(manager : MaterialManager, behaviourDescriptor : IScriptBehaviourDescriptor, focusExists : bool, enabled : bool, focusable : bool, click : bool) -> Maybe<DynamicBehaviour<flow>> {
	idString = IScriptId2s(behaviourDescriptor.component.id);
	noSuchFocusString = "No such focus: [" + idString + "] " + behaviourDescriptor.name;

	eitherFn(
		getMaterialFocusByIScriptId(manager.focus, behaviourDescriptor.component.id),
		\fc ->
			if (fc.name == behaviourDescriptor.component.name) {
				if (focusable && fgetValue(fc.focusEnabled) == false) {
					iScriptError(manager, "Component focus is disabled: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
						Some(behaviourDescriptor.component.id));
					None()
				} else if ((click || enabled) && fgetValue(fc.enabled) == false) {
					iScriptError(manager, "Component is disabled: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
						Some(behaviourDescriptor.component.id));
					None()
				} else if (click && fgetValue(switchMaterialFocus(fc, \f -> f.parent.zorderEnabled, \f -> f.zorderEnabled)) == false) {
					iScriptError(manager, "Component clicks are disabled: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
						Some(behaviourDescriptor.component.id));
					None()
				} else {
					eitherFn(
						lookupTree(fc.behaviours, behaviourDescriptor.name),
						\beh ->
							Some(beh.first),
						\ -> {
							if (focusExists) iScriptError(manager, "No such behaviour: " + behaviourDescriptor.name + " in focus:  [" + IScriptId2s(behaviourDescriptor.component.id) + "]",
								Some(behaviourDescriptor.component.id));
							None()
						}
					)
				}
			} else {
				if (focusExists) iScriptError(manager, noSuchFocusString, Some(behaviourDescriptor.component.id));
				None()
			},
		\ -> {
			if (focusExists) iScriptError(manager, noSuchFocusString, Some(behaviourDescriptor.component.id));
			None()
		}
	)
}

replayGeneratedRecord(
	manager : MaterialManager,
	record : IScriptGeneratedRecord
) -> bool {
	focusSearch = \runCommand, start, id -> {
		if (countList(id) == 1) {
			idStr = getIscriptIdFromDescriptor(id);
			runCommand(getMaterialFocusByUniqueIdRec(start, idStr))
		} else {
			runCommand(getMaterialFocusByPathRec(start, id))
		}
	};
	cantFindError = \id -> {
		iScriptError(manager, "Can't find a focus by path", Some(id));
		false
	};
	getText = \f -> map(getTextFromIScriptForm(takeLogicalSnapshot(f.form)), trim);
	replayRecordCommand = \rec, start -> {
		switch(rec : IScriptGeneratedRecordCommand) {
			IScriptSearchBehaviourRecord(descriptor, value) : {
				iScriptInfo(manager, "Searching starting node " + toString(start.name), Some(descriptor.component.id));
				runCommand = \focusM : Maybe<MaterialFocus> -> eitherFn(
					focusM,
					\f : MaterialFocus -> {
						value2 = if (descriptor.name == "mousedown" || descriptor.name == "mouseup") {
							x = fgetValue(f.position).pos.x + (fgetValue(f.widthHeight).width / 2.);
							y = fgetValue(f.position).pos.y + (fgetValue(f.widthHeight).height / 2.) - 48.;
							Point(x, y);
						} else value;
						descriptor2 = IScriptBehaviourDescriptor(IScriptComponentDescriptor(f.name, getFullMFocusId(f)), descriptor.name);
						repeatBehaviourById(manager, descriptor2, value2)
					},
					\ -> cantFindError(descriptor.component.id)
				);
				focusSearch(runCommand, start, descriptor.component.id)
			}
			IScriptSearchText(text, id): {
				iScriptInfo(manager, "Searching text '" + text + "'", Some(id));
				runCommand = \focusM : Maybe<MaterialFocus> -> eitherFn(
					focusM,
					\f : MaterialFocus -> {
						texts = getText(f);
						result = contains(texts, text);
						if (!result) iScriptError(manager, "Can't find text '" + text + "' in " + toString(texts), Some(id));
						result
					},
					\ -> cantFindError(id)
				);
				focusSearch(runCommand, start, id)
			}
			IScriptCountChildren(target, num): {
				iScriptInfo(manager, "Counting children", Some(target));
				eitherFn(
					getMaterialFocusByCondition(
						start,
						getIscriptIdFromDescriptor(target),
						\__ -> true
					),
					\f -> {
						children = length(getTreeKeys(getValue(f.focusIds)));
						result = num == children;
						if (!result) iScriptError(manager, "Expected " + i2s(num) + ", got " + i2s(children) + " children", Some(target));
						result
					},
					\ -> cantFindError(target)
				);
			}
		}
	};
	switch(record : IScriptGeneratedRecord) {
		IScriptGeneratedStart(start, command): {
			iScriptInfo(manager, "Searching start " + toString(start), None());
			eitherFn(
				getMaterialFocusByCondition(
					manager.focus,
					getIscriptIdFromDescriptor(start.id),
					\ff -> contains(getText(ff), start.text)
				),
				\f -> replayRecordCommand(command, f),
				\ -> cantFindError(start.id)
			)
		};
		IScriptSearchBehaviourRecord(__, __): replayRecordCommand(record, manager.focus);
		IScriptSearchText(__, __): replayRecordCommand(record, manager.focus);
		IScriptCountChildren(__, __): replayRecordCommand(record, manager.focus);
	}
}

getMaterialFocusByUniqueIdRec(focus : MFocusGroup, id : string) -> Maybe<MaterialFocus> {
	findInOrder(
		getValue(focus.focusIds),
		\__, v : MaterialFocus -> {
			eitherFn(
				maybeBind(v.iScriptId, \isi -> if (isi == id) Some(v) else None()),
				\result -> Some(result),
				\ -> switchMaterialFocus(
					v,
					\__ -> None(),
					\f -> getMaterialFocusByUniqueIdRec(f, id)
				)
			)
		}
	)
}

getMaterialFocusByCondition(focus : MFocusGroup, id : string, fn : (MaterialFocus) -> bool) -> Maybe<MFocusGroup> {
	findInOrder(
		getValue(focus.focusIds),
		\__, v : MaterialFocus -> {
			switchMaterialFocus(
				v,
				\__ -> None(),
				\f -> if (fn(f) && (eitherMap(f.iScriptId, \isi -> isi == id, false) || f.name == id)) {
					Some(f)
				} else {
					getMaterialFocusByCondition(f, id, fn)
				}
			)
		}
	)
}

getMaterialFocusByPathRec(focus : MFocusGroup, path : List<IScriptIdentifier>) -> Maybe<MaterialFocus> {
	id = getIscriptIdFromDescriptor(path);
	eitherFn(
		lookupTree(getValue(focus.iScriptIds), id),
		\mf -> {
			if (countList(path) > 1) {
				switchMaterialFocus(
					mf,
					\__ -> None(),
					\f -> getMaterialFocusByPathRec(f, tailList(path))
				)
			} else {
				Some(mf)
			}
		},
		\ -> findInOrder(
			getValue(focus.iScriptIds),
			\__, v : MaterialFocus -> {
				switchMaterialFocus(
					v,
					\f -> maybeBind(f.iScriptId, \isi -> if (isi == id && countList(path) == 1) Some(f) else None()),
					\f -> getMaterialFocusByPathRec(f, path)
				)
			}
		)
	)
}

getIscriptIdFromDescriptor(path : List<IScriptIdentifier>) -> string {
	switch(headList(path, IScriptId(""))) {
		IScriptId(id) : id;
		default : "";
	}
}