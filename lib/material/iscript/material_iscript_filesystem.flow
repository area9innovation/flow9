import material/iscript/material_iscript_filesystem_local;
import material/iscript/material_iscript_filesystem_db;
import material/iscript/material_iscript_generator;

export {
	playIScriptFromLocalFile(manager : MaterialManager, fileName : string, onFinish : ([IScriptReplayResult]) -> void) -> void;

	IScriptReplayStyles ::= ISRSourceLocal, ISRSourceDB, ISRDelay;
		ISRSourceLocal();
		ISRSourceDB();
		ISRDelay(defaultDelay : int);

	playIScriptIfNeededWithStylesOnFinish(manager : MaterialManager, styles : [IScriptReplayStyles], onFinish : ([IScriptReplayResult]) -> void) -> void;
	playScenarioFromLocalFile(manager : MaterialManager, directory : string, onFinish : ([IScriptReplayResult]) -> void) -> void;

	updateIScriptFile(manager : MaterialManager, currentScriptFilename : string,
		updateFn : (storedIScript : StoredIScript) -> StoredIScript) -> void;

	loadIScriptFile(manager : MaterialManager, name : string, onSuccess : () -> void, onError : () -> void) -> () -> void;
}

playIScriptIfNeededWithStylesOnFinish(manager : MaterialManager, styles : [IScriptReplayStyles], onFinish : ([IScriptReplayResult]) -> void) -> void {
	scriptFileName = getUrlParameter(UP_ISCRIPTPLAY);
	scenarioPath = getUrlParameter(UP_ISCRIPTPLAYSCENARIO);
	generateFileName = getUrlParameter(UP_ISCRIPTGENERATEPLAY);

	isrReplayLocalSource = containsStruct(styles, ISRSourceLocal());
	isrReplayDBSource = containsStruct(styles, ISRSourceDB());

	replayDelay =
		if (isDigits(getUrlParameter(UP_ISCRIPTSTARTDELAY)))
			s2i(getUrlParameter(UP_ISCRIPTSTARTDELAY))
		else
			eitherMap(tryExtractStruct(styles, ISRDelay(0)), \v -> v.defaultDelay, 0);

	speed = getUrlParameter(UP_ISCRIPTREPLAYSPEED);
	if (speed != "")
		next(manager.iscript.settings.replaySpeed, s2d(speed));

	if (isrReplayLocalSource) {
		if (!js && scriptFileName != "" && !isIScriptDBPath(scriptFileName)) {
			storeFilesystemExtAPI = getFilesystemExtAPI();
			setLocalFilesystemExtAPI();
			if (fileExists(scriptFileName)) {
				iScriptInfo(manager, "playiscript: " + scriptFileName, None());
				timer(replayDelay, \ -> playIScriptFromLocalFile(manager, scriptFileName, onFinish));
			} else {
				iScriptInfo(manager, "IScript file not found: " + scriptFileName, None());
			}
			setFilesystemExtAPI(storeFilesystemExtAPI);
		} else if (!js && scenarioPath != "" && !isIScriptDBPath(scenarioPath)) {
			storeFilesystemExtAPI = getFilesystemExtAPI();
			setLocalFilesystemExtAPI();
			if (fileExists(scenarioPath)) {
				iScriptInfo(manager, "playiscriptscenario: " + scenarioPath, None());
				timer(replayDelay, \ -> playScenarioFromLocalFile(manager, scenarioPath, onFinish));
			} else {
				iScriptInfo(manager, "IScript scenario not found: " + scenarioPath, None());
			}
			setFilesystemExtAPI(storeFilesystemExtAPI);
		} else if (!js && generateFileName != "" && !isIScriptDBPath(scriptFileName)) {
			storeFilesystemExtAPI = getFilesystemExtAPI();
			setLocalFilesystemExtAPI();
			if (fileExists(generateFileName)) {
				iScriptInfo(manager, "play generated iscript: " + generateFileName, None());
				timer(replayDelay, \ -> generateAndPlayIScriptFromLocalFile(manager, generateFileName, onFinish));
			} else {
				iScriptInfo(manager, "IScript file not found: " + generateFileName, None());
			}
			setFilesystemExtAPI(storeFilesystemExtAPI);
		}
	} else if (isrReplayDBSource && isIScriptFilesystemDBInitialized(manager)) {
		if (isIScriptDBPath(scriptFileName)) {
			storeCurrentAndSetIScriptDBPartition(manager);
			iScriptFromDB2(manager, scriptFileName,
				\v : StoredIScript -> {
					restoreCurrentDBPartition(manager);
					iScriptInfo(manager, "playiscript: " + scriptFileName, None());
					timer(replayDelay,
						\ -> {
							next(manager.iscript.script, v.script);
							setIScriptState(manager, IScriptReplaying(onFinish));
						}
					);
				},
				\err_msg -> {
					restoreCurrentDBPartition(manager);
					iScriptInfo(manager, err_msg, None());
				}
			)
		} else if (isIScriptDBPath(scenarioPath)) {
			storeCurrentAndSetIScriptDBPartition(manager);
			getFilesystemExtAPI().fileExists(scenarioPath,
				\b -> if (b) {
					iScriptInfo(manager, "playiscriptscenario: " + scenarioPath, None());
					iScriptScenarioFromDB2(manager, scenarioPath,
						\scenario : IScriptScenario -> {
							next(manager.iscript.scenario.pathB, scenarioPath);
							next(manager.iscript.scenario.descriptionB, getValue(scenario.descriptionB));
							next(manager.iscript.scenario.scriptsB, getValue(scenario.scriptsB));
							nextDistinct(manager.iscript.scenario.scenarioChangedB, false);
							nextDistinct(manager.iscript.scenario.runningIScriptIdxB, -1);
							restoreCurrentDBPartition(manager);
							timer(replayDelay, \ -> setIScriptState(manager, IScriptScenarioReplaying(onFinish)));
						},
						\err_msg -> {
							restoreCurrentDBPartition(manager);
							iScriptInfo(manager, err_msg, None());
						}
					)
				}
			)
		}
	}
}

playIScriptFromLocalFile(manager : MaterialManager, fileName : string, onFinish : ([IScriptReplayResult]) -> void) -> void {
	onLoadSuccess = \ -> setIScriptState(manager, IScriptReplaying(onFinish));

	onLoadError = \ -> iScriptError(manager, "Error loading local iscript.", None());

	loadIScriptFile(manager, fileName, onLoadSuccess, onLoadError) |> ignore;
}

playScenarioFromLocalFile(manager : MaterialManager, scenarioPath : string, onFinish : ([IScriptReplayResult]) -> void) -> void {
	onLoadSuccess = \ -> setIScriptState(manager, IScriptScenarioReplaying(onFinish));

	onLoadError = \ -> iScriptError(manager, "Error loading local iscript scenario.", None());

	loadIScriptScenarioFile(manager, scenarioPath, onLoadSuccess, onLoadError) |> ignore;
}

generateAndPlayIScriptFromLocalFile(manager : MaterialManager, fileName : string, onFinish : ([IScriptReplayResult]) -> void) -> void {
	generateIScriptFromCommands(manager, getFileContent(fileName));
	setIScriptState(manager, IScriptReplaying(onFinish))
}

updateIScriptFile(
	manager : MaterialManager,
	currentScriptFilepath : string,
	updateFn : (storedIScript : StoredIScript) -> StoredIScript) -> void {

	if (isIScriptDBPath(currentScriptFilepath)) {
		storeCurrentAndSetIScriptDBPartition(manager);

		iScriptFromDB2(manager, currentScriptFilepath,
			\currentScript : StoredIScript -> {
				resultScript = updateFn(currentScript);
				iScriptToDB2(
					manager,
					currentScriptFilepath,
					resultScript,
					\ -> restoreCurrentDBPartition(manager),
					\err_msg -> {
						restoreCurrentDBPartition(manager);
						iScriptInfo(manager, err_msg, None());
					}
				)
			},
			\err_msg -> {
				restoreCurrentDBPartition(manager);
				iScriptInfo(manager, err_msg, None());
			}
		)
	}
	else {
		currentScript = storedIScriptFromLocalFile(currentScriptFilepath);
		resultScript = updateFn(currentScript);
		res = iScriptToLocalFile2(manager, resultScript, currentScriptFilepath);
		if (!res) {
			iScriptInfo(manager, "Update of local iScript file failed.", None());
		}
	}
}

loadIScriptFile(manager : MaterialManager, name : string, onSuccess : () -> void, onError : () -> void) -> () -> void {
	if (isIScriptDBPath(name)) {
		storeCurrentAndSetIScriptDBPartition(manager);
		disposed = ref false;

		iScriptFromDB2(
			manager,
			name,
			\v : StoredIScript -> if (!^disposed) {
				restoreCurrentDBPartition(manager);
				next(manager.iscript.script, v.script);

				onSuccess();
			},
			\err_msg -> if (!^disposed) {
				restoreCurrentDBPartition(manager);
				iScriptError(manager, err_msg, None());

				onError();
			}
		);

		\ -> disposed := true;
	} else {
		interruptibleDeferUntilNextFrameRendered(\ -> {
			iScriptFromLocalFile(manager, name);
			onSuccess();
		});
	}
}

loadIScriptScenarioFile(manager : MaterialManager, scenarioPath : string, onSuccess : () -> void, onError : () -> void) -> () -> void {
	if (isIScriptDBPath(scenarioPath)) {
		storeCurrentAndSetIScriptDBPartition(manager);
		disposed = ref false;

		getFilesystemExtAPI().fileExists(
			scenarioPath,
			\b -> if (b) {
				iScriptScenarioFromDB2(manager, scenarioPath,
					\scenario : IScriptScenario -> {
						next(manager.iscript.scenario.pathB, scenarioPath);
						next(manager.iscript.scenario.descriptionB, getValue(scenario.descriptionB));
						next(manager.iscript.scenario.scriptsB, getValue(scenario.scriptsB));
						nextDistinct(manager.iscript.scenario.scenarioChangedB, false);
						nextDistinct(manager.iscript.scenario.runningIScriptIdxB, -1);
						restoreCurrentDBPartition(manager);

						onSuccess();
					},
					\err_msg -> {
						restoreCurrentDBPartition(manager);
						iScriptError(manager, err_msg, None());

						onError();
					}
				)
			}
		);

		\ -> disposed := true;
	} else {
		interruptibleDeferUntilNextFrameRendered(\ -> {
			iScriptScenarioFromLocalFile(manager, scenarioPath);
			onSuccess();
		});
	}
}