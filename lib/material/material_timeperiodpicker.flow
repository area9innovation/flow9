import material/material_ui;

export {
	MTimePeriodPicker(
		manager : MaterialManager,
		timePeriod : DynamicBehaviour<TimePeriod>,
		style : [MTimePeriodPickerStyle]) -> Material;

		TimePeriod ::= HourlyPeriod, DailyPeriod,
			WeeklyPeriod, MonthlyPeriod, YearlyPeriod;

			HourlyPeriod(minute : int, sec : int);
			DailyPeriod(hour : int, minute : int);
			WeeklyPeriod(dayOfWeek : int, hour : int, minute : int);

			MonthlyPeriod ::= DateOfMonthPeriod, WeekDayOfMonthPeriod;

				DateOfMonthPeriod(date : int);
				// 3, 1 = every third Tuesday
				WeekDayOfMonthPeriod(ordering : int, dayOfWeek : int);

			YearlyPeriod(month : int, day : int, hour : int, minute : int);

		MTimePeriodPickerStyle ::= MEnabled, MSpaceSize;
			// Space between pickers
			// 16px by default
			MSpaceSize(size : double);

	MTimePeriodMTimePicker(
		time : DynamicBehaviour<Time>,
		manager : MaterialManager,
		showSec : bool,
		showTitle : bool,
		enabled : Transform<bool>) -> Material;

	timePeriod2string(period : TimePeriod) -> string;
	// Convert TimePeriod: utc -> localTime or localTime -> utc
	convertTimePeriod(period : TimePeriod, toUtcTime : bool) -> TimePeriod;
}

MTimePeriodPicker(
	manager : MaterialManager,
	timePeriod : DynamicBehaviour<TimePeriod>,
	style : [MTimePeriodPickerStyle]) -> Material {

	spaceSize = extractStruct(style, MSpaceSize(16.)).size;
	enabled = extractStruct(style, MEnabled(const(true))).enabled;
	currentMTPDate = timestamp() |> stamp2time;

	showMTPMonth = make(false);
	showMTPOrder = make(false);
	showMTPWeekDay = make(false);
	showMTPDay = make(false);
	showMTPSecond = make(false);
	showMTPTime = make(false);
	showMTPDate = make(false);

	selectedMTPPeriod = make(0);
	selectedMTPMonth = make(0);
	selectedMTPOrder = make(0);
	selectedMTPWeekDay = make(0);
	selectedMTPDay = make(0);
	selectedMTPTime = make(currentMTPDate);

	// Update Functions

	updateMTPSelectors = \period -> {
		nextDistinct(showMTPMonth, false);
		nextDistinct(showMTPOrder, false);
		nextDistinct(showMTPWeekDay, false);
		nextDistinct(showMTPDay, false);
		nextDistinct(showMTPSecond, false);
		if (period == 0) {
			nextDistinct(showMTPSecond, true);
			nextDistinct(showMTPTime, false);
			nextDistinct(showMTPDate, false);
		}  else if (period == 1) {
			nextDistinct(showMTPTime, true);
			nextDistinct(showMTPDate, false);
		}  else if (period == 2) {
			nextDistinct(showMTPWeekDay, true);
			nextDistinct(showMTPTime, true);
			nextDistinct(showMTPDate, false);
		}  else if (period == 3) {
			if (getValue(selectedMTPMonth) == 0) {
				nextDistinct(showMTPOrder, true);
				nextDistinct(showMTPWeekDay, true);
				nextDistinct(showMTPDate, false);
			} else {
				nextDistinct(showMTPDay, true);
			}
			nextDistinct(showMTPTime, false);
			nextDistinct(showMTPDate, false);
			nextDistinct(showMTPMonth, true);
		}  else if (period == 4) {
			nextDistinct(showMTPDate, true);
			nextDistinct(showMTPDay, false);
			nextDistinct(showMTPTime, true);
		}
	};

	updateMTPSelectorsByMonthPeriod = \period -> {
		if (period == 0 && getValue(selectedMTPPeriod) == 3) {
			nextDistinct(showMTPOrder, true);
			nextDistinct(showMTPWeekDay, true);
			nextDistinct(showMTPDay, false);
		} else if (period == 1 && getValue(selectedMTPPeriod) == 3) {
			nextDistinct(showMTPOrder, false);
			nextDistinct(showMTPWeekDay, false);
			nextDistinct(showMTPDay, true);
		}
	};

	// Selectors

	periodMTPSelector = \ -> MTimePeriodSelectorMenu(
		_("Frequency"),
		[_("Hourly"), _("Daily"), _("Weekly"), _("Monthly"), _("Yearly")],
		selectedMTPPeriod,
		enabled
	);

	monthMTPSelector = \ -> MTimePeriodSelectorMenu(
		_("Type"),
		[_("By Day Of The Week"), _("By Date")],
		selectedMTPMonth,
		enabled
	);

	dateMTPSelector = \ -> MTimePeriodMDatePicker(selectedMTPTime, manager, enabled);

	orderMTPSelector = \ -> MTimePeriodSelectorMenu(
		_("Order"),
		[_("First"), _("Second"), _("Third"), _("Fourth")],
		selectedMTPOrder,
		enabled
	);

	weekDayMTPSelector = \ -> MTimePeriodSelectorMenu(
		_("Week day"),
		[
			_("Monday"),
			_("Tuesday"),
			_("Wednesday"),
			_("Thursday"),
			_("Friday"),
			_("Saturday"),
			_("Sunday")
		],
		selectedMTPWeekDay,
		enabled
	);

	dayMTPSelector = \ -> MTimePeriodSelectorMenu(
		_("Day"),
		generate(1, 32, i2s),
		selectedMTPDay,
		enabled
	);

	timeMTPSelector = \ -> MTimePeriodMTimePicker(selectedMTPTime, manager, false, true, enabled);
	timeMTPSelectorWithSec = \ -> MTimePeriodMTimePicker(selectedMTPTime, manager, true, true, enabled);

	insSpace = \m : () -> Material -> \ -> MCols2(MFixedX(spaceSize), m());

	MConstruct(
		[
			\ -> selectu(
				timePeriod,
				\newTimePeriod -> {
					switch (newTimePeriod : TimePeriod) {
						HourlyPeriod(minute, sec): {
							nextDistinct(selectedMTPPeriod, 0);
							updateMTPSelectors(0);
							nextDistinct(selectedMTPTime, Time(2017, 1, 1, 0, minute, sec));
						};
						DailyPeriod(hour, minute): {
							nextDistinct(selectedMTPPeriod, 1);
							updateMTPSelectors(1);
							nextDistinct(selectedMTPTime, Time(currentMTPDate.year, 1, 1, hour, minute, 0));
						};
						WeeklyPeriod(d, h, m): {
							nextDistinct(selectedMTPPeriod, 2);
							updateMTPSelectors(2);
							nextDistinct(selectedMTPWeekDay, d);
							nextDistinct(selectedMTPTime, Time(currentMTPDate.year, 1, 1, h, m, 0));
						};
						WeekDayOfMonthPeriod(o, d): {
							nextDistinct(selectedMTPPeriod, 3);
							nextDistinct(showMTPOrder, true);
							nextDistinct(showMTPWeekDay, true);
							nextDistinct(showMTPDay, false);
							nextDistinct(showMTPSecond, false);
							nextDistinct(selectedMTPMonth, 0);
							nextDistinct(showMTPMonth, true);
							nextDistinct(selectedMTPOrder, o);
							nextDistinct(selectedMTPWeekDay, d);
						};
						DateOfMonthPeriod(d): {
							nextDistinct(selectedMTPPeriod, 3);
							nextDistinct(showMTPOrder, false);
							nextDistinct(showMTPWeekDay, false);
							nextDistinct(showMTPDay, true);
							nextDistinct(showMTPSecond, false);
							nextDistinct(showMTPMonth, true);
							nextDistinct(selectedMTPMonth, 1);
							nextDistinct(selectedMTPDay, d);
						};
						YearlyPeriod(m, d, h, mi): {
							nextDistinct(selectedMTPPeriod, 4);
							updateMTPSelectors(4);
							nextDistinct(selectedMTPTime, Time(currentMTPDate.year, m, d, h, mi, 0));
						};
					};
				}
			).second,
			makeSubscribe(
				fpair(fmerge([selectedMTPPeriod, selectedMTPMonth, selectedMTPOrder, selectedMTPWeekDay, selectedMTPDay]), selectedMTPTime),
				\sel : Pair<[int], Time> -> {
					updateMTPSelectors(firstOfPair(sel)[0]);
					updateMTPSelectorsByMonthPeriod(firstOfPair(sel)[1]);

					nextDistinct(
						timePeriod,
						buildPeriod(
							firstOfPair(sel)[0],
							firstOfPair(sel)[1],
							firstOfPair(sel)[2],
							firstOfPair(sel)[3],
							firstOfPair(sel)[4],
							secondOfPair(sel)
						)
					);
				}
			)
		],
		MCols([
			periodMTPSelector(),
			MShowLazy(showMTPMonth, monthMTPSelector |> insSpace),
			MShowLazy(showMTPDate, dateMTPSelector |> insSpace),
			MShowLazy(showMTPOrder, orderMTPSelector |> insSpace),
			MShowLazy(showMTPWeekDay, weekDayMTPSelector |> insSpace),
			MShowLazy(showMTPDay, dayMTPSelector |> insSpace),
			MShowLazy(showMTPTime, timeMTPSelector |> insSpace),
			MShowLazy(showMTPSecond, timeMTPSelectorWithSec |> insSpace)
		])
	)
}

buildPeriod(
	period : int,
	monthlyPeriod : int,
	order : int,
	weekDay : int,
	day : int,
	time : Time) -> TimePeriod {

	if (period == 0)
		HourlyPeriod(time.min, time.sec)
	else if (period == 1)
		DailyPeriod(time.hour, time.min)
	else if (period == 2)
		WeeklyPeriod(weekDay, time.hour, time.min)
	else if (period == 3)
		if (monthlyPeriod == 0)
			WeekDayOfMonthPeriod(order, weekDay)
		else
			DateOfMonthPeriod(day)
	else
		YearlyPeriod(time.month, time.day, time.hour, time.min)
};

timePeriod2string(period : TimePeriod) -> string {
	getWeekDay = \num -> {
		if (num == 0) _("Monday")
		else if (num == 1) _("Tuesday")
		else if (num == 2) _("Wednesday")
		else if (num == 3) _("Thursday")
		else if (num == 4) _("Friday")
		else if (num == 5) _("Saturday")
		else _("Sunday")
	};

	getOrdering = \num -> {
		if (num == 0) _("first")
		else if (num == 1) _("second")
		else if (num == 2) _("third")
		else _("forth")
	};

	m2s = \m -> formatString("%1%2", [if (m < 10) "0" else "", i2s(m)]);
	localTimePeriod = convertTimePeriod(period, false);

	switch (localTimePeriod : TimePeriod) {
		HourlyPeriod(minute, sec):
			formatString(_("Hourly at %1:%2"), [m2s(minute), m2s(sec)]);
		DailyPeriod(hour, minute):
			formatString(_("Daily at %1:%2"), [i2s(hour), m2s(minute)]);
		WeeklyPeriod(d, h, m):
			formatString(_("Weekly on %1 at %2:%3"), [getWeekDay(d), i2s(h), m2s(m)]);
		WeekDayOfMonthPeriod(o, d):
			formatString(_("Monthly on %1 %2"), [getOrdering(o), getWeekDay(d)]);
		DateOfMonthPeriod(d):
			formatString(_("Monthly on date %1"), [i2s(d + 1)]);
		YearlyPeriod(m, d, h, mi):
			formatString(_("Yearly on %1 %2 at %3:%4"), [monthString(Date(2017, m, d), true), i2s(d), i2s(h), m2s(mi)]);
	}
}

convertTimePeriod(period : TimePeriod, toUtcTime : bool) -> TimePeriod {

	convertTime2New = \oldTime -> {
		if (toUtcTime) oldTime |> time2stamp2 |> localTime2utc |> stamp2time
		else oldTime |> time2stamp |> stamp2time2
	}
	utc2LocalHours = \_hour, _mins -> {
		localTime = convertTime2New(Time(2017, 10, 3, _hour, _mins, 0));
		DailyPeriod(localTime.hour, localTime.min)
	}

	utc2LocalDayOfWeeks = \d, _hour, _mins -> {
		utcTime = Time(2017, 10, 3, _hour, _mins, 0);
		localTime = convertTime2New(utcTime);
		newWeekDay =
			if (utcTime.day != localTime.day) {
				if (utcTime > localTime) {
					if (d == 0) 6 else d - 1
				} else {
					if (d == 6) 0 else d + 1
				}
			} else d;

		WeeklyPeriod(newWeekDay, localTime.hour, localTime.min)
	}

	utc2LocalDateTouch = \m, d, h, mi -> {
		localTime = convertTime2New(Time(2017, m, d, h, mi, 0));
		YearlyPeriod(localTime.month, localTime.day, localTime.hour, localTime.min)
	}

	switch (period : TimePeriod) {
		HourlyPeriod(minute, sec): HourlyPeriod(minute, sec);
		DailyPeriod(hour, minute): utc2LocalHours(hour, minute);
		WeeklyPeriod(d, h, m): utc2LocalDayOfWeeks(d, h, m);
		WeekDayOfMonthPeriod(o, d): WeekDayOfMonthPeriod(o, d);
		DateOfMonthPeriod(d): DateOfMonthPeriod(d);
		YearlyPeriod(m, d, h, mi): utc2LocalDateTouch(m, d, h, mi);
	}
}

MTimePeriodSelectorMenu(
	label : string,
	items : [string],
	behaviour : DynamicBehaviour<int>,
	enabled : Transform<bool>) -> Material {

	menuLines = map(items, \item -> MMenuSingleLine(item, []));
	MDropDownMenu(menuLines, behaviour, [MLabel(label)])
};

MTimePeriodMTimePicker(
	time : DynamicBehaviour<Time>,
	manager : MaterialManager,
	showSec : bool,
	showTitle : bool,
	enabled : Transform<bool>) -> Material {
	
	touchTimePicker = MIconButton("timer", \ -> {
		close = make(false);
		pickedTime = make(
			if (isNullTime(getValue(time)))
				stamp2time(timestamp())
			else {
				getValue(time);
			}
		);

		customStyles = if (showSec) [MTimeSeconds(true), MTimeMax(Time(2017, 1, 1, 0, 59, 59))] else [];
		ShowMDialog(manager, close, [],
			MTimePicker(pickedTime,
				concat(
					customStyles,
					[
						MDialogButtons([
							MButtonOk("enter", \ -> {
								nextDistinct(time, getValue(pickedTime));
								next(close, true);
							}),
							MButtonCancel("esc", \ -> next(close, true))
						]),
						MTimeAMPM(false)
					]
				)
			)
		)
	}, [], [MEnabled(const(true))]);

	time2stringWithoutDate = \t -> {
		if (showSec) lpad(i2s(t.min), "0", 2) + ":" + lpad(i2s(t.sec), "0", 2)
		else lpad(i2s(t.hour), "0", 2) + ":" + lpad(i2s(t.min), "0", 2)
	}

	MLines([
		MShow(const(showTitle), MText(_("Time"), [])),
		MBaselineCols([
			MSelect(time, \t -> MText(t |> time2stringWithoutDate, [])),
			touchTimePicker,
		])
	])
}

MTimePeriodMDatePicker(time : DynamicBehaviour<Time>, manager : MaterialManager, enabled : Transform<bool>) -> Material {
	touchDatePicker = MIconButton("today", \ -> {
		close = make(false);
		pickedDate = make(
			if (isNullTime(getValue(time)))
				stamp2date(timestamp())
			else {
				initialTime = getValue(time);
				Date(initialTime.year, initialTime.month, initialTime.day)
			}
		);

		ShowMDialog(manager, close, [],
			MDatePicker(pickedDate, [
				MDialogButtons([
					MButtonOk("enter", \ -> {
						picked = getValue(pickedDate);
						timeVal = getValue(time);
						nextDistinct(
							time,
							Time(picked.year, picked.month, picked.day, timeVal.hour, timeVal.min, timeVal.sec)
						);
						next(close, true);
					}),
					MButtonCancel("esc", \ -> next(close, true))
				]),
				MDateMin(addYearsToDate(stamp2date(timestamp()), -10)),
				MYearDisabled()
			])
		)
	}, [], [MEnabled(const(true))]);

	time2stringWithDate = \t -> {
		lpad(i2s(t.day), "0", 2) + "/" + lpad(i2s(t.month), "0", 2)
	}

	MLines([
		MText(_("Date"), []),
		MCols([
			MCenterYIn(MSelect(time, \t -> MText(t |> time2stringWithDate, [])), TFixed(0.0, 48.0)),
			touchDatePicker,
		])
	])
}