import material/material_dialog;

export {
	MCPDialogStyle ::= MCPHideClearColorButtons, MCPDefaultColor, MCPDisableMainPalette, MCPAdditionalColors, MCPForceUpdate,
					MCPOpacity, MCPOpacityDefault, MCPOnColorChange, MCPOnSave, MCPSaveCaption;
		MCPHideClearColorButtons : ();
		MCPDefaultColor : (defaultColor : MColor);
		MCPDisableMainPalette : ();
		MCPAdditionalColors : (additionalColors : DynamicBehaviour<[int]>);
		MCPOpacity : (opacity : DynamicBehaviour<double>);
		MCPOpacityDefault : (opacity : double);
		MCPOnColorChange : (onChange : (color : MColor, opacity : DynamicBehaviour<double>) -> void);
		// use next instead nextDistinct
		MCPForceUpdate();
		MCPOnSave(fn : () -> void);
        MCPSaveCaption(caption : string);

	showMColorPickerDialogPopup(
		manager : MaterialManager,
		color : DynamicBehaviour<int>,
		style : [MCPDialogStyle]
	) -> void;

	embeddedMultiSelectColorPicker(colorsB : DynamicBehaviour<[int]>, additionalColors: DynamicBehaviour<[int]>) -> Material;
}

makeForceFn(force : bool) -> ((DynamicBehaviour<?>, ?) -> void) {
	if (force) next	else nextDistinct;
}

showMColorPickerDialogPopup(
	manager : MaterialManager,
	color : DynamicBehaviour<int>,
	style : [MCPDialogStyle]
) -> void {
	hideClearColorButtons = contains(style, MCPHideClearColorButtons());
	defaultColor = extractStruct(style, MCPDefaultColor(MBlack())).defaultColor;
	disableMainPalette = contains(style, MCPDisableMainPalette());
	additionalColors = extractStruct(style, MCPAdditionalColors(make([]))).additionalColors;
	opacityPicker = tryExtractStruct(style, MCPOpacity(make(0.)));
	onSave = tryExtractStruct(style, MCPOnSave(nop));
	onColorChange = tryExtractStruct(style, MCPOnColorChange(nop2));
	saveCaption = extractStruct(style, MCPSaveCaption(_("SAVE"))).caption;

	showClearButtons = MClearCustomColorsButtons(
		\colorToRemove -> next(additionalColors, removeAll(getValue(additionalColors), MColor2int(colorToRemove))),
		\ -> next(additionalColors, [])
	);
	mColor = color |> getValue |> MCustomColor |> make;
	opacity = maybeMap(opacityPicker, \op -> cloneBehaviour(op.opacity));
	defaultOpacity = eitherMap(opacity, \op -> extractStruct(style, MCPOpacityDefault(getValue(op))).opacity, 1.);

	onOK = \ -> {
		force = contains(style, MCPForceUpdate());
		makeForceFn(force)(color, MColor2int(getValue(mColor)));
		maybeApply(opacityPicker, \op -> makeForceFn(force)(op.opacity, eitherMap(opacity, getValue, 1.)));
		maybeApply(onSave, \onsave -> onsave.fn());
	};

	close = make(false);
	ShowMDialog(manager, close, [MFocusOnPrevious(true)],
		MColorPicker(mColor,
			concatA([
				[
					MDialogButtons([
						MTextButton(_("RESET"), \ -> {
								nextDistinct(mColor, defaultColor);
								maybeApply(opacity, \op -> nextDistinct(op, defaultOpacity))
							}, [MLeftIcon("format_color_reset", [])], []),
						MTextButton(_("CANCEL"), \ -> next(close, true), [], [MShortcut("esc")]),
						MTextButton(saveCaption, \ -> {
							updateAdditionalColors(additionalColors, MColor2int(getValue(mColor)));
							onOK();
							next(close, true);
						}, [MButtonRaised()], [MShortcut("enter")]),
					]),
					MaterialColorPicker()
				],
				getCommonStylesForAdditionalColors(additionalColors),
				if (!hideClearColorButtons) [showClearButtons] else [],
				if (disableMainPalette) [MColorPickerDisableMainPalette()] else [],
				eitherMap(opacity, \op -> [MOpacityPicker(op)], [])
			])
		)
		|> (\m -> eitherMap(opacity, \op -> eitherMap(onColorChange, \onChange ->
			MConstruct([
				makeSubscribe2(mColor, \col -> onChange.onChange(col, op))
			], m), m), m))
	);
}

updateAdditionalColors(additionalColors : DynamicBehaviour<[int]>, newColor : int) -> void {
	colors = getValue(additionalColors);
	if (!contains(colors, newColor))
		nextDistinct(additionalColors, arrayPush(colors, newColor));
}

getCommonStylesForAdditionalColors(additionalColors : DynamicBehaviour<[int]>) -> [MColorPickerMultiSelectStyle] {
	[
		MColorPickerAdditionalColors(
			fmap(additionalColors, \c -> mCustomColor2MColor(MCustomColor(c)))
		),
		MCustomColorPickerDialog(
			MTextButton(_("CUSTOM COLOR"), nop, [], []),
			\c -> updateAdditionalColors(additionalColors, MColor2int(c))
		)
	]
}

embeddedMultiSelectColorPicker(colorsB : DynamicBehaviour<[int]>, additionalColors: DynamicBehaviour<[int]>) -> Material {
	colorsSetB = make(makeSet());
	MConstruct(
		[
			\ -> bidirectionalLink(
				colorsB,
				colorsSetB,
				\colorsIntArr -> buildSet(map(colorsIntArr, \i -> mCustomColor2MColor(MCustomColor(i)))),
				\colorsSet -> map(set2array(colorsSet), MColor2int)
			)
		],
		MColorPickerMultiSelect(
			colorsSetB,
			getCommonStylesForAdditionalColors(additionalColors)
		)
	)
}