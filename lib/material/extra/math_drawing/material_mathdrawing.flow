import material/material;
export {
	fraction2material(num : Material, denum : Material, colorB : Behaviour<int>, decreaseMargin : bool) -> Material;
}
fraction2material(num : Material, denum : Material, colorB : Behaviour<int>, decreaseMargin : bool) -> Material {
	offsetPoint = \offsetB -> fselect(offsetB, FLift(\offset -> Point(offset, 0.0)));

	numWhB = makeWH();
	numBaselineB = make(0.0);
	numOB = make(0.0);
	numOWB = make(0.0);
	numOffset = offsetPoint(numOB);
	numFOffset = offsetPoint(numOWB);

	numFiller = TSelect2(numWhB, numOB, \nWh, nO -> {
		TFixed(nO, nWh.height)
	});

	denumWhB = makeWH();
	denumBaselineB = make(0.0);
	denumOB = make(0.0);
	denumOWB = make(0.0);
	denumOffset = offsetPoint(denumOB);
	denumFOffset = offsetPoint(denumOWB);

	denumFiller = TSelect2(denumWhB, denumOB, \dnWh, dnO -> {
		TFixed(dnO, dnWh.height)
	});

	lineWB = make(0.0);
	heightB = make(0.0);
	baselineB = make(0.0);
	
	MConstruct(
		[make4Subscribe(
			numWhB,
			denumWhB,
			heightB,
			fselect2(numBaselineB, denumBaselineB, FLift2(min)),
			\numWH, denumWH, h, baseline -> {
				margin = if (decreaseMargin) 0.0 else 4.0;
				nextDistinct(lineWB, max(numWH.width, denumWH.width) + margin * 2.0);
				numO = max((denumWH.width - numWH.width) * 0.5, 0.0) + margin;
				denumO = max((numWH.width - denumWH.width) * 0.5, 0.0) + margin;
				nextDistinct(numOB, numO);
				nextDistinct(denumOB, denumO);
				nextDistinct(numOWB, numO + numWH.width);
				nextDistinct(denumOWB, denumO + denumWH.width);
				// ToDo fix baseline
				nextDistinct(baselineB, - denumWH.height + 5.0);
			}
		)],
		MInspect(
			[IHeight(heightB)],
			MBaselineOffset(
				baselineB,
				MLines([
					MGroup([
						numFiller,
						MTranslate(numOffset,
							MInspect([ISize(numWhB)], MBorder(
								0.0, 0.0, 0.0, 1.5,
								MInspect([IBaseline(numBaselineB)], num)
							))
						),
						MTranslate(numFOffset, numFiller)
					]),
					MGraphics(
						fselect(lineWB, FLift(\lineW ->
							GPath([
								MoveTo(0.0, 0.0),
								LineTo(lineW, 0.0),
								ClosePath()
							])
						)),
						fselect(colorB, FLift(\color ->
							[MStroke(colorInt2MColor(color)), StrokeWidth(1.0)]
						))
					),
					MGroup([
						denumFiller,
						MTranslate(denumOffset,
							MInspect([ISize(denumWhB)], MBorder(
								0.0, 2.0, 0.0, 0.0,
								MInspect([IBaseline(denumBaselineB)], denum)
							)),
						),
						MTranslate(denumFOffset, denumFiller)
					])
				])
			)
		)
	);
}