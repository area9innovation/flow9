import material/extra/material2html/engine;

export {

	// Return HTML page created from Material
	material2Html(m : Material, manager : Material2HtmlManager) -> string;

	// Return required elements for insert to HTML HEAD and BODY (pair.first - for HEAD, pair.second for BODY)
	getRequiredElements() -> Pair<[[string]], [[string]]>;

	// Convert required elements to HTML for insert
	requiredElements2Html(elements : [[string]]) -> string;

	// Convert Material to HTML element (with elements interaction if need)
	material2HtmlElement(material : Material, manager : Material2HtmlManager) -> string;

	// Use links to styles and scripts instead of file contents
	material2HtmlUseLinks = ref false;
}

getBaseMaterialPath() { // Try to determine the path relatively platforms path
	appPath = getApplicationPath();
	dirs = filter(strSplit2WithoutLeave(appPath, ["\\", "/"]), \folder -> folder != "");

	i = elemIndex(dirs, "platforms", -1);

	if (i == -1) ""
	else strGlue(concat(
		if (startsWith(appPath, "/")) [""] else [], // restore leading slash (for absolute path on *nix systems)
		concat(subrange(dirs, 0, i - 1), [ "material", "" ])
	), "/");
}

getRequiredElements() {
	path = getBaseMaterialPath() + "material/extra/material2html/";

	Pair(
		[
			[
				"raw",
				"
				<meta charset=\"utf-8\">
				<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">
				<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0\">
				<link href=\"https://fonts.googleapis.com/css?family=Roboto:regular,bold,italic,thin,light,bolditalic,black,medium&amp;lang=en\" rel=\"stylesheet\" type=\"text/css\">
				<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">
				"
			],
			[ "style", if (^material2HtmlUseLinks) "css/material.blue-orange.min.css" else getFileContent(path + "css/material.blue-orange.min.css") ],
			[ "style", if (^material2HtmlUseLinks) "css/getmdl-select.min.css" else getFileContent(path + "css/getmdl-select.min.css") ],
			[ "style", if (^material2HtmlUseLinks) "css/fmdl.css" else getFileContent(path + "css/fmdl.css") ],
			[ "style", if (^material2HtmlUseLinks) "css/md-date-time-picker.min.css" else getFileContent(path + "css/md-date-time-picker.min.css") ],
		],
		[
			[
				"raw",
				"
				<!--[if lt IE 9]>
					<script>" + (if (^material2HtmlUseLinks) "js/html5shiv.min.js" else getFileContent(path + "js/html5shiv.min.js")) + "</script>
				<![endif]-->

				<!--[if IE]>
					<script>" + (if (^material2HtmlUseLinks) "js/es5-shim.min.js" else getFileContent(path + "js/es5-shim.min.js")) + "</script>
					<script>" + (if (^material2HtmlUseLinks) "js/classlist.min.js" else getFileContent(path + "js/classlist.min.js")) + "</script>
					<script>" + (if (^material2HtmlUseLinks) "js/selectivizr-min.js" else getFileContent(path + "js/selectivizr-min.js")) + "</script>
					<script>" + (if (^material2HtmlUseLinks) "js/flexie.min.js" else getFileContent(path + "js/flexie.min.js")) + "</script>
				<![endif]-->
				"
			],
			[ "script", if (^material2HtmlUseLinks) "js/material.min.js" else getFileContent(path + "js/material.min.js") ],
			[ "script", if (^material2HtmlUseLinks) "js/getmdl-select.min.js" else getFileContent(path + "js/getmdl-select.min.js") ],
			[ "script", if (^material2HtmlUseLinks) "js/flyd.js" else getFileContent(path + "js/flyd.js") ],
			[ "script", if (^material2HtmlUseLinks) "js/fmdl.js" else getFileContent(path + "js/fmdl.js") ],
			[ "script", if (^material2HtmlUseLinks) "js/moment.min.js" else getFileContent(path + "js/moment.min.js") ],
			[ "script", if (^material2HtmlUseLinks) "js/md-date-time-picker.min.js" else getFileContent(path + "js/md-date-time-picker.min.js") ],

		]
	);
}

requiredElements2Html(elements : [[string]]) -> string {
	if (^material2HtmlUseLinks) {
		map(elements, \el -> {
			if (el[0] == "raw") {
				"\t\t\t" + el[1] + "\n";
			} else if (el[0] == "style")  {
				"\t\t\t<link rel=\"stylesheet\" href=\"" + el[1] + "\">\n";
			} else if (el[0] == "script") {
				"\t\t\t<script type=\"text/javascript\" src=\"" + el[1] + "\"></script>\n";
			} else {
				"";
			}
		})
		|> concatStrings;
	} else {
		map([ "raw", "style", "script" ], \type -> {
			typeAttribute = if (type == "style") " type=\"text/css\"" else if (type == "script") " type=\"text/javascript\"" else "";
			fold(filter(elements, \element -> element[0] == type), "", \acc, element -> acc + element[1] + "\n")
				|> (\content -> if (type == "raw") content else content |> enclose("<" + type + typeAttribute + ">", "</" + type + ">"))
		}) |> glue("");
	}
}

material2HtmlElement(material : Material, manager : Material2HtmlManager) material2Tags(material, manager) |> tags2HTML;

material2Html(material : Material, manager : Material2HtmlManager) {
	required = getRequiredElements();

	"<html lang=\"en\" class=\"mdl-js\">
		<head>" +

			(required.first |> requiredElements2Html) +

		"</head>
		<body>" +

			material2HtmlElement(material, manager) +

			(required.second |> requiredElements2Html) +

		"</body>
	</html>";
}
