import material/material;
import material/material2tropic;

export {
	virtualKeyboard(layout : KeyboardLayout, onKey : (string) -> void) -> Material;

	englishKeyboard() -> KeyboardLayout;
	numericKeyboard() -> KeyboardLayout;
}

KeyboardLayout(
	lowercase : [[string]],
	uppercase : [[string]]
);

englishKeyboard() -> KeyboardLayout {
	KeyboardLayout([
		["`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "backspace"],
		["tab","q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "[", "]", "\\"],
		["caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", ";", "'", "enter"],
		["shift", "z", "x", "c", "v", "b", "n", "m", ",", ".", "/", "shift"],
		["@", " "],
	], [
		["~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "_", "+", "backspace"],
		["tab","Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "{", "}", "|"],
		["caps", "A", "S", "D", "F", "G", "H", "J", "K", "L", ":", "\"", "enter"],
		["shift", "Z", "X", "C", "V", "B", "N", "M", "<", ">", "?", "shift"],
		["@", " "],
	])
}

cursorKeyboard() -> KeyboardLayout {
	keys = [
		["home", "up"],
		["end", "down"],
		[""],
		["", "↑"],
		["←", "↓", "→"]
	];
	KeyboardLayout(keys, keys);
}

numericKeyboard() -> KeyboardLayout {
	keys = [
		["²", "√", "%", "-"],
		["7", "8", "9", "+"],
		["4", "5", "6", "*"],
		["1", "2", "3", "/"],
		["0", ".", "=", "enter"],
	];
	KeyboardLayout(keys, keys)
}

virtualKeyboard(layout : KeyboardLayout, onKey : (string) -> void) -> Material {
	shift = make(false);
	lock = make(false);
	MSelect(shift, \s -> {
		MLines(map(if (s) layout.uppercase else layout.lowercase, \row -> {
			MCols(
				map(row, \k -> {
					if (k == "") {
						MFixed(52.0, 40.0)
					} else {
						MBorder4(2.0, MTextButton(k, \ -> {
							if (k == "shift") {
								next(shift, !getValue(shift));
							} else if (k == "caps") {
								if (getValue(lock)) {
									next(shift, !getValue(shift));
									next(lock, false);
								} else {
									next(shift, true);
									next(lock, true);
								}
							} else {
								onKey(k);
								if (!getValue(lock)) {
									nextDistinct(shift, false);
								}
							}
						}, concat([MBlack(), MOutlined()], 
							if (k == " ") [MButtonPaddings(368.0, 10.0, 16.0, 9.0)] else []), [])
						)
					}
				})
			)
		}));
	})
}

/*
main() {
	mrender(makeMaterialManager([]), true, 
		MCols([
			virtualKeyboard(englishKeyboard(), println),
			MFixed(8.0, 0.0),
			virtualKeyboard(cursorKeyboard(), println),
			MFixed(8.0, 0.0),
			virtualKeyboard(numericKeyboard(), println),
		])
	)
}
*/
