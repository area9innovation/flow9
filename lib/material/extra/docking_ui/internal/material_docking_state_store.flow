import material/extra/docking_ui/internal/material_docking_state;

export {
	dockingStateSavePanelStateByName(prefix : string, dockingState : MDockingState, title : string, enabled : bool) -> bool;
	dockingStateSavePanelState(prefix : string, dockingState : MDockingState, i : int, expanded : bool) -> bool;
	dockingStateLoadPanelStates(prefix : string, keyGroupName : string, defaultValues : [bool]) -> [DynamicBehaviour<bool>];
	dockingStateGetPanelEnabled(dockingState : MDockingState, title : string) -> DynamicBehaviour<bool>;
	dockingStateGetPanelExpanded(dockingState : MDockingState, title : string) -> DynamicBehaviour<bool>;
	dockingStateGetPanelSideExpanded(dockingState : MDockingState, title : string) -> DynamicBehaviour<bool>;

	dockingStateCreateAndLoad(
		// Material Manager
		manager : MaterialManager,
		// stores mouse position in th UI
		mouseXy : DynamicBehaviour<Point>,
		// stores panel's title
		title : DynamicBehaviour<[string]>,
		// stores panel's icon
		panelIcon : DynamicBehaviour<[string]>,
		// stores panel's content
		content : DynamicBehaviour<[[MDockingPanelItem]]>,
		// stores ui layout
		dock : DynamicBehaviour<[[int]]>,
		// stores group's name
		group : DynamicBehaviour<[[string]]>,
		// stores default panel's size
		size : DynamicBehaviour<[Tropic]>,
		// stores mobile panel's size
		mobileSize : DynamicBehaviour<[Tropic]>,
		// stores docked panel's size
		dockedSize : DynamicBehaviour<[Tropic]>,
		// stores panel's position
		positions : DynamicBehaviour<[DynamicBehaviour<Point>]>,
		// stores color scheme
		colorScheme : DynamicBehaviour<[int]>,
		// stores panel's style
		style : DynamicBehaviour<[[MDockingStyle]]>,
		// key name to store/load enabled/expanded/sideExpanded
		keyGroupName : string,
		// default values lists
		defaultEnabled : [bool], defaultExpanded : [bool], defaultSideExpanded : [bool],
	) -> MDockingState;
}

dockingStateGetPanelEnabled(dockingState : MDockingState, title : string) -> DynamicBehaviour<bool> {
	i = elemIndex(getValue(dockingState.title), title, -1);
	getValue(dockingState.enabled)[i];
}

dockingStateGetPanelExpanded(dockingState : MDockingState, title : string) -> DynamicBehaviour<bool> {
	i = elemIndex(getValue(dockingState.title), title, -1);
	getValue(dockingState.expanded)[i];
}

dockingStateGetPanelSideExpanded(dockingState : MDockingState, title : string) -> DynamicBehaviour<bool> {
	i = elemIndex(getValue(dockingState.title), title, -1);
	getValue(dockingState.sideExpanded)[i];
}

dockingStateLoadPanelStates(prefix : string, keyGroupName : string, defaultValues : [bool]) -> [DynamicBehaviour<bool>] {
	mapi(defaultValues, \i, v -> {
		make(s2b(getKeyValue(prefix + keyGroupName + "Panel_" + i2s(i), b2s(defaultValues[i]))))
	});
}

dockingStateSavePanelStateByName(prefix : string, dockingState : MDockingState, title : string, enabled : bool) -> bool {
	dockingStateSavePanelState(prefix, dockingState, elemIndex(getValue(dockingState.title), title, -1), enabled);
}

dockingStateSavePanelState(prefix : string, dockingState : MDockingState, i : int, expanded : bool) -> bool {
	setKeyValue(prefix + dockingState.keyGroupName + "Panel_" + i2s(i), b2s(expanded));
}

dockingStateCreateAndLoad(
	// Material Manager
	manager : MaterialManager,
	// stores mouse position in th UI
	mouseXy : DynamicBehaviour<Point>,
	// stores panel's title
	title : DynamicBehaviour<[string]>,
	// stores panel's icon
	panelIcon : DynamicBehaviour<[string]>,
	// stores panel's content
	content : DynamicBehaviour<[[MDockingPanelItem]]>,
	// stores ui layout
	dock : DynamicBehaviour<[[int]]>,
	// stores group's name
	group : DynamicBehaviour<[[string]]>,
	// stores default panel's size
	size : DynamicBehaviour<[Tropic]>,
	// stores mobile panel's size
	mobileSize : DynamicBehaviour<[Tropic]>,
	// stores docked panel's size
	dockedSize : DynamicBehaviour<[Tropic]>,
	// stores panel's position
	positions : DynamicBehaviour<[DynamicBehaviour<Point>]>,
	// stores color scheme
	colorScheme : DynamicBehaviour<[int]>,
	// stores panel's style
	style : DynamicBehaviour<[[MDockingStyle]]>,
	// key name to store/load enabled/expanded/sideExpanded
	keyGroupName : string,
	// default values lists
	defaultEnabled : [bool], defaultExpanded : [bool], defaultSideExpanded : [bool],
	) -> MDockingState {
		MDockingState(manager, mouseXy, title, panelIcon, content, dock, group, size, mobileSize, dockedSize, positions,
			make(dockingStateLoadPanelStates("enabled", keyGroupName, defaultEnabled)),		// enabled,
			make(dockingStateLoadPanelStates("expanded", keyGroupName, defaultExpanded)),		// expanded,
			make(dockingStateLoadPanelStates("sideExpanded", keyGroupName, defaultSideExpanded)),	// sideExpanded
			colorScheme, style, keyGroupName,);
}