import material/material_manager;
import material/extra/docking_ui/internal/material_docking_styles;

export{
	MDockingState(
		// Material Manager
		manager : MaterialManager,
		// stores mouse position in th UI
		mouseXy : DynamicBehaviour<Point>,
		// stores panel's title
		title : DynamicBehaviour<[string]>,
		// stores panel's icon
		panelIcon : DynamicBehaviour<[string]>,
		// stores panel's content
		content : DynamicBehaviour<[[MDockingPanelItem]]>,
		// stores ui layout
		dock : DynamicBehaviour<[MDock]>,
		// stores group's name
		group : DynamicBehaviour<[[string]]>,
		// stores default panel's size
		size : DynamicBehaviour<[WidthHeight]>,
		// stores mobile panel's size
		mobileSize : DynamicBehaviour<[WidthHeight]>,
		// stores docked panel's size
		dockedSize : DynamicBehaviour<[WidthHeight]>,
		// stores panel's position
		positions : DynamicBehaviour<[DynamicBehaviour<Point>]>,
		// stores panel's enable state
		enabled : DynamicBehaviour<[DynamicBehaviour<bool>]>,
		// stores panel's expanded state
		expanded : DynamicBehaviour<[DynamicBehaviour<bool>]>,
		// stores panel's expanded state on a side
		sideExpanded : DynamicBehaviour<[DynamicBehaviour<bool>]>,
		// stores color scheme
		colorScheme : DynamicBehaviour<[int]>,
		// stores panel's style
		panelStyle : DynamicBehaviour<[[MDockingStyle]]>,
		// styles used globally for the UI
		style : [MDockingStateStyle],
		// key name to store/load docking state
		keyGroupName : string,
	);

	MDock(
		// MDockingArea where the panel is docked by default (a negative number means the panel is floating, undocked)
		areaId : int,
		// Col position of the panel inside the MDockingArea
		colId : int,
		// Row position of the panel inside the MDockingArea
		rowId : int,
	);

	MDockingStateStyle ::= MDockingEnableLoadAndStoreCache;
		//Enable browser cache usage
		MDockingEnableLoadAndStoreCache(cacheEnabled : bool);

	// Create an empty state
	makeMDockingEmptyState(manager : MaterialManager) -> MDockingState;
	makeMDockingEmptyStateWithKey(keyGroupName : string, manager : MaterialManager, style : [MDockingStateStyle]) -> MDockingState;
}

makeMDockingEmptyState(manager : MaterialManager) -> MDockingState {
	MDockingState(manager, make(zeroPoint), make([]), make([]), make([[]]), make([]), make([[]]), make([]), make([]), make([]), make([]), make([]), make([]), make([]), make([]), make([[]]), [], "");
}

makeMDockingEmptyStateWithKey(keyGroupName : string, manager : MaterialManager, style : [MDockingStateStyle]) -> MDockingState {
	MDockingState(manager, make(zeroPoint), make([]), make([]), make([[]]), make([]), make([[]]), make([]), make([]), make([]), make([]), make([]), make([]), make([]), make([]), make([[]]), style, keyGroupName);
}
