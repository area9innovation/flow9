import material/material_manager;
import material/extra/docking_ui/internal/material_docking_styles;

export{

	// NOTE - Do not create a custom MDockingState but make always an empty one with this:
	makeMDockingEmptyState(manager : MaterialManager, style : [MDockingStyle]) -> MDockingState;

	MDockingState(
		// Material Manager
		manager : MaterialManager,
		// stores mouse position in th UI
		mouseXy : DynamicBehaviour<Point>,
		// size of the working area (limit resizing for docked areas)
		stageWH : DynamicBehaviour<WidthHeight>,
		// size of the working area (limit resizing for mobile panels)
		editorWH : DynamicBehaviour<WidthHeight>,
		// stores panel's title
		title : DynamicBehaviour<[string]>,
		// stores panel's icon
		panelIcon : DynamicBehaviour<[string]>,
		// stores panel's content
		content : DynamicBehaviour<[MDockingPanelContent]>,
		// stores ui layout
		dock : DynamicBehaviour<[MDock]>,
		// all docking areas by title and id
		dockingAreas : DynamicBehaviour<Tree<string, int>>,
		// this id indicates which movable panel is placed on the z-order top layer : -1 default value for no one
		activePanel : DynamicBehaviour<int>,
		// stores group's name
		group : DynamicBehaviour<[[string]]>,
		// stores default panel's size
		size : DynamicBehaviour<[WidthHeight]>,
		// stores mobile panel's size
		mobileSize : DynamicBehaviour<[WidthHeight]>,
		// stores docked panel's size
		dockedSize : DynamicBehaviour<[WidthHeight]>,
		// stores panel's position
		positions : DynamicBehaviour<[DynamicBehaviour<Point>]>,
		// stores panel's enable state
		enabled : DynamicBehaviour<[DynamicBehaviour<bool>]>,
		// stores panel's expanded state
		expanded : DynamicBehaviour<[DynamicBehaviour<bool>]>,
		// stores panel's expanded state on a side
		sideExpanded : DynamicBehaviour<[DynamicBehaviour<bool>]>,
		// stores area's enable state
		areaEnabled : DynamicBehaviour<Tree<int /*areaId*/, bool>>,
		// stores area's accordion mode
		areaAccordion : DynamicBehaviour<Tree<int /*areaId*/, bool>>,
		// redraw the entire ui
		loadWorkspace : DynamicBehaviour<bool>,
		// redraw the entire ui
		redraw : DynamicBehaviour<bool>,
		// stores panel's style
		panelStyle : DynamicBehaviour<[[MDockingPanelStyle]]>,
		// stores area's style
		areaStyle : DynamicBehaviour<Tree<int /*areaId*/, [MDockingAreaStyle]>>,
		// styles used globally for the UI
		style : [MDockingStyle]
	);

	MDock(
		// MDockingArea where the panel is docked by default (a negative number means the panel is floating, undocked)
		areaId : int,
		// Col position of the panel inside the MDockingArea
		colId : int,
		// Row position of the panel inside the MDockingArea
		rowId : int
	);
}

makeMDockingEmptyState(manager : MaterialManager, style : [MDockingStyle]) -> MDockingState {
	MDockingState(
		manager, 
		make(zeroPoint),		// mouseXy
		makeWH(),				// stageWH
		makeWH(),				// editorWH
		make([]),				// title
		make([]),				// panelIcon
		make([]),				// content
		make([]),				// dock
		make(TreeEmpty()),		// dockingAreas
		make(-1),				// activePanel
		make([[]]),				// group
		make([]),				// size
		make([]),				// mobileSize
		make([]),				// dockedSize
		make([]),				// positions
		make([]), 				// enabled
		make([]), 				// expanded
		make([]), 				// sideExpanded
		make(TreeEmpty()),		// areaEnabled
		make(TreeEmpty()), 		// areaAccordion
		make(false),			// loadworkspace
		make(false),			// redraw
		make([[]]),				// panelStyle
		make(TreeEmpty()),		// areaStyle
		style
	);
}
