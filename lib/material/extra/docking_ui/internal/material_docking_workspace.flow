import material/material;
import material/material_dialog;
import material/material_snackbar;
import material/extra/docking_ui/internal/material_docking_state;
import formats/json/json_utils;


export {
    
    // Cache docking state
	addDockingSuffix(input : string) -> string;

	getMDSCachedString(state : MDockingState) -> string;
	setMDockingStateKeyValue(state : MDockingState) -> bool;
	removeMDockingStateKeyValue(state : MDockingState) -> void;

	resetMDWorkspace(state : MDockingState) -> void;
	makeMDWorkspaceMenuBtn(state : MDockingState) -> Material;
	applySelectedWSOnStartup(state : MDockingState,) -> void;
}

hasWorkspaceFlag() -> bool {
	isUrlParameterTrue("devtools") || isUrlParameterTrue("workspaces")
}

addDockingSuffix(input : string) -> string {
	// input + "_MDockingPanels"
	input + "_MDPanels"
}

getMDSCachedString(state : MDockingState) -> string {
	keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
    getKeyValue(keyGroupName |> addDockingSuffix, "");
}

resetMDWorkspace(state : MDockingState) -> void {
	next(state.redraw, false); // reset to default layout
	reverseBehaviour(state.loadWorkspace);
}

dockingState2json(state : MDockingState) -> Json {
	areasAjson = JsonObject(
		map(reverseA(getTreeKeys(getValue(state.dockingAreas))),\areaName -> {
			areaId = lookupTreeDef(getValue(state.dockingAreas), areaName, intMin);
			areaStyle = lookupTreeDef(getValue(state.areaStyle), areaId, []);
			areaEnable = lookupTreeDef(getValue(state.areaEnabled), areaId, true);
			accordionEnable = lookupTreeDef(getValue(state.areaAccordion), areaId, false);

			Pair(areaName,
				JsonObject(
					[
						Pair("areaId", JsonDouble(i2d(areaId))),
						Pair("enabled", JsonBool(areaEnable)),
						Pair("accordion", JsonBool(accordionEnable)),
					]
				)
			);
		}));

	panelsAjson = 
		JsonObject(
			mapi(getValue(state.dock),\panelId, dock -> {
				title = getValue(state.title)[panelId];
				enabled = getValue(getValue(state.enabled)[panelId]);
				expanded = getValue(getValue(state.expanded)[panelId]);
				sideExpanded = getValue(getValue(state.sideExpanded)[panelId]);
				size = getValue(state.size)[panelId];
				mobileSize = getValue(state.mobileSize)[panelId];
				dockedSize = getValue(state.dockedSize)[panelId];
				pos = getValue(getValue(state.positions)[panelId]);
				pstyle = getValue(state.panelStyle)[panelId];
				isEndAligned = getValue(extractStruct(pstyle, MDToolbarEndAlign(make(false))).endAlign);

				Pair(i2s(panelId),
					JsonObject(
						[
							Pair("title", JsonString(title)),
							Pair("areaId", JsonDouble(i2d(dock.areaId))),
							Pair("colId", JsonDouble(i2d(dock.colId))),
							Pair("rowId", JsonDouble(i2d(dock.rowId))),
							Pair("x", JsonDouble(pos.x)),
							Pair("y", JsonDouble(pos.y)),
							Pair("w", JsonDouble(size.width)),
							Pair("h", JsonDouble(size.height)),
							Pair("mobileW", JsonDouble(mobileSize.width)),
							Pair("mobileH", JsonDouble(mobileSize.height)),
							Pair("dockedW", JsonDouble(dockedSize.width)),
							Pair("dockedH", JsonDouble(dockedSize.height)),
							Pair("enabled", JsonBool(enabled)),
							Pair("expanded", JsonBool(expanded)),
							Pair("sideExpanded", JsonBool(sideExpanded)),
							Pair("endAligned", JsonBool(isEndAligned)),
						]
					)
				);
			})
		);

	workspaceJson = JsonObject([
		Pair("DockingAreas", areasAjson),
		Pair("Panels", panelsAjson)
	]);

	// json2stringFormatted(workspaceJson) |> println;  // Debug print
	workspaceJson
}

setMDockingStateKeyValue(state : MDockingState) -> bool {
	keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
	savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
    jName = 
        eitherMap(
            getJsonFieldValueM(parseJson(savedString), "Selected"),
            \wsName -> parseJson(savedString),
            setJsonField(parseJson(savedString), "Selected",  JsonString("Current"))
        );
    njson = setJsonField(jName, "Current",  dockingState2json(state));
	if (savedString != "") setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson)) else false;
}

removeMDockingStateKeyValue(state : MDockingState) -> void {
	keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
    savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
    njson = setJsonField(parseJson(savedString), "Current",  JsonNull());
    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson)) |> ignore;
}

applySelectedWSOnStartup(state : MDockingState,) -> void {
	savedString = getMDSCachedString(state);

	if (savedString == "") {
		defaultWSName = extractStruct(state.style, MDWorkspaceRenameDefault("Default")).name;
		defaultWSSelected = extractStruct(state.style, MDWorkspaceSelected(defaultWSName)).name;
		savedStringJson = parseJson(savedString);
		selectedJson = getJsonFieldValue(savedStringJson, "Selected", JsonNull());
		selectedName = getJsonStringValue(selectedJson, defaultWSSelected);

		customWorkspacesA = extractStruct(state.style, MDAddCustomWorkspaces([])).workspaces;
		selectedWS = firstElement(filtermap(customWorkspacesA, \ws -> if (ws.name == defaultWSSelected) Some(ws) else None()), MDWorkspace(defaultWSName, ""));

		njson = setJsonField(parseJson(savedString), "Current",  parseJson(selectedWS.datajson));
		njson2 = setJsonField(njson, "Selected",  JsonString(selectedWS.name));
		keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
		setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson2)) |> ignore;
	}
}

setMDWorkspaceName(state : MDockingState, name : string) -> bool {
	keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
	savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
    njson = setJsonField(parseJson(savedString), "Selected",  JsonString(name));
    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson));
}

makeItemMenuLinesA(state : MDockingState, itemsA: [Pair<string, Json>], selectedNameB : DynamicBehaviour<string>, isUser : bool) -> [MMenuCustomLine] {
	savedString = getMDSCachedString(state);
	iconStyleOn = [state.manager.theme.palette.primary, MIconSize(20.0)];
	textStyleA = [MGrey(600)];

	mapi(itemsA, \i, ws -> {
		wsName = ws.first;
		wsLayout =  ws.second;
		MMenuCustomLine(
			MBaselineColsA([
				MVisible(fselectLift(selectedNameB, \sel -> sel == wsName), MIcon("done", iconStyleOn)) |> MCenterY,
				MText(_(wsName), textStyleA) |> MBorderStart(12.0) |> MCenterY,
				TFillX(),
				if (isUser && hasWorkspaceFlag()) MIcon("person", [MGrey(200), MIconSize(20.0)]) |> MBorderEnd(12.0) |> MCenterY else MEmpty(),
				// MIcon("refresh", [MGrey(400), MIconSize(22.0)]) |> MBorderEnd(12.0) |> MCenterY,
				// MIcon("close", [MGrey(400), MIconSize(22.0)]) |> MBorderEnd(12.0) |> MCenterY
			]) |> MCenterY,
			[MOnClick(\ -> {
				keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
				njson = setJsonField(parseJson(savedString), "Current",  wsLayout);
				njson2 = setJsonField(njson, "Selected",  JsonString(wsName));
				setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson2)) |> ignore;
				reverseBehaviour(state.loadWorkspace);
				showMSnackbar(state.manager, _("Workspace " + "\"" + wsName + "\" Applied"), []);
			})]
		)
	})
}


makeMDWorkspaceMenuBtn(state : MDockingState) -> Material {
    updateMenu = make(true);
    iconStyleOn = [state.manager.theme.palette.primary, MIconSize(20.0)];
    iconStyleOff = [MGrey(400), MIconSize(20.0)];
    textStyleA = [MGrey(600)];
    gapW = 32.0;
    keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
	defaultWSName = extractStruct(state.style, MDWorkspaceRenameDefault("Default")).name;
	defaultWSSelected = extractStruct(state.style, MDWorkspaceSelected(defaultWSName)).name;
	customWorkspacesA = extractStruct(state.style, MDAddCustomWorkspaces([])).workspaces;


    MSelect(updateMenu, \__ -> {
		savedString = getMDSCachedString(state);
		savedStringJson = parseJson(savedString);
        selectedName = getJsonStringValue(getJsonFieldValue(savedStringJson, "Selected", JsonNull()), defaultWSSelected);
        selectedNameB = make(selectedName);

		wsMembersA = getJsonObjectValue(getJsonFieldValueCustom(savedStringJson, "Workspaces", JsonNull(), [JsonFieldTreatAsPath(".")]), []);
		workspacesJObj = getJsonFieldValueCustom(savedStringJson, "Workspaces", JsonNull(), [JsonFieldTreatAsPath(".")]);
		userWorkspacesA = makeItemMenuLinesA(state, wsMembersA, selectedNameB, true);
		systemWorkspacesA = makeItemMenuLinesA(state, map(customWorkspacesA, \ws -> Pair(ws.name, parseJson(ws.datajson))), selectedNameB, false);

		systemWSNamesA = arrayPush(
			map(customWorkspacesA, \ws -> ws.name),
			defaultWSName
		);

		isNotSystemT = fselectLift(updateMenu, \__ -> !contains(systemWSNamesA, getValue(selectedNameB)));

        MMenu(
            MIconButton("view_carousel", 
                \ -> {
                    savedString_ = getKeyValue(keyGroupName |> addDockingSuffix, "");
                    selectedName_ = getJsonStringValue(getJsonFieldValue(parseJson(savedString_), "Selected", JsonNull()), defaultWSSelected);
                    nextDistinct(selectedNameB, selectedName_);
                }, 
                [MIconButtonBorder(8.0)], []
            ),
            concatA([
				userWorkspacesA,
                if (userWorkspacesA != []) [MSeparatorLine()] else [],
				systemWorkspacesA,
				[
					MMenuCustomLine(
                        MBaselineColsA([
                            MVisible(fselectLift(selectedNameB, \sel -> sel == defaultWSName), MIcon("done", iconStyleOn)),
                            MText(_(defaultWSName), textStyleA)  |> MBorderStart(12.0)
                            ]),
                        [
                            MOnClick(\ -> {
                                removeMDockingStateKeyValue(state);
                                reverseBehaviour(state.loadWorkspace);
                                setMDWorkspaceName(state, defaultWSName);
                                showMSnackbar(state.manager, _("Workspace \"" + defaultWSName + "\" Applied"), []);
                            })
                        ]
                    ),

                    MSeparatorLine(),
                    MMenuCustomLine(
                        MText(_("Add Workspace"), textStyleA) |> MBorderStart(gapW) |> MBorderEnd(gapW),
                        [MOnClick(\ -> {
                            saveEditWorkspaceDialog(state, updateMenu, true);
                        })]		
                    ),
                    MMenuCustomLine(
                        MText(_("Delete Workspace"), textStyleA) |> MBorderStart(gapW) |> MBorderEnd(gapW),
                        [
                            MOnClick(
                                confirmDeleteDialogFn(state.manager, formatString(_("Delete %1?"), [getValue(selectedNameB)]), _("DELETE"), \ -> {
									currentWSJson = dockingState2json(state);
									nWsA = filtermap(wsMembersA, \p -> if (p.first != getValue(selectedNameB)) Some(p) else None());
                                    njs = setJsonField(savedStringJson, "Workspaces",  JsonObject(nWsA));
                                	njs2 = setJsonField(njs, "Current",  currentWSJson);
									njs3 = setJsonField(njs2, "Selected",  JsonString("Current"));
                                    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs3));
                               		reverseBehaviour(state.loadWorkspace);
                                    reverseBehaviour(updateMenu);
                                    showMSnackbar(state.manager, _("Workspace \"" + getValue(selectedNameB) + "\" Deleted"), []);
                                })
                            ),
                            MEnabled(isNotSystemT)
                        ]		
                    ),
                ],
                // Devtools buttons
                if (hasWorkspaceFlag()) [
                    MMenuCustomLine(
                        MText(_("Rename Workspace (dev)"), textStyleA) |> MBorderStart(gapW) |> MBorderEnd(gapW),
                        [
                            MOnClick(\ -> {
                                saveEditWorkspaceDialog(state, updateMenu, false);
                            }),
                            MEnabled(isNotSystemT)
                        ]		
                    ),
                    MMenuCustomLine(
                        MText(_("Update Workspace (dev)"), textStyleA) |> MBorderStart(gapW),
						[
							MOnClick(\ -> {
								currentWSJson = dockingState2json(state);
								njs = setJsonField(
									setJsonField( 
										setJsonField(savedStringJson, "Selected",  JsonString(getValue(selectedNameB))),
										"Current",  currentWSJson
									),
									"Workspaces",
									setJsonField(workspacesJObj, getValue(selectedNameB), currentWSJson)
								);
								setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs));
								reverseBehaviour(updateMenu);
								showMSnackbar(state.manager, _("\"" + getValue(selectedNameB) + "\" Workspace Updated"), []);
							}), 
							MEnabled(isNotSystemT)
						]
                    ),
                    MSeparatorLine(),
					// Debug
					// MMenuCustomLine(
                    //     MText(_("Save Current Workspace (dev)"), textStyleA) |> MBorderStart(gapW),
                    //     [
                    //         MOnClick(\ -> {
					// 			currentWSJson = dockingState2json(state);
					// 			njs = setJsonField(
					// 				setJsonField(savedStringJson, "Current",  currentWSJson),
					// 				"Selected", JsonString("Current")
					// 			);
					// 			setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs));
					// 			showMSnackbar(state.manager, _("Current Workspace Saved"), []);
					// 		})
                    //     ]
                    // ),
					MMenuCustomLine(
						MBaselineColsA([
							MIcon("content_copy", iconStyleOff) |> MCenterY,
							MText(_("Copy Current Workspace (dev)"), textStyleA) |> MBorderStart(12.0) |> MCenterY,
						]) |> MCenterY,
                        [
                            MOnClick(\ -> {
								currentWSJson = dockingState2json(state);
								setClipboard(toString(json2string(currentWSJson)));
								println(" > Current Workspace Copied To Clipboard");
								println(json2stringFormatted(currentWSJson));
								showMSnackbar(state.manager, _(getValue(selectedNameB) + " Workspace Copied To Clipboard"), []);
							})
                        ]
                    ),
					// Debug
					// MMenuCustomLine(
                    //     MText(_("Copy All Cached Workspaces (dev)"), textStyleA) |> MBorderStart(gapW),
                    //     [
                    //         MOnClick(\ -> {
					// 			allWS = json2stringFormatted(parseJson(
					// 				getKeyValue(keyGroupName |> addDockingSuffix, "")
					// 			));
					// 			setClipboard(allWS);
					// 			println(" > All Workspaces Copied To Clipboard");
					// 			println(allWS);
					// 			showMSnackbar(state.manager, _("All Workspaces Copied To Clipboard"), []);
					// 		}),
                    //         MEnabled(fselectLift(state.enabled, \enA -> savedString != ""))
                    //     ]
                    // ),
					MSeparatorLine(),
				] else [],
				[
                    MMenuCustomLine(
                        MText(_("Clear Workspaces"), textStyleA) |> MBorderStart(gapW),
                        // "Reset Layout", 
                        [
                            MOnClick(
                                confirmDeleteDialogFn(state.manager, _("All saved workspaces will be deleted, are you sure?"), _("DELETE"),
                                    \ -> {
                                        removeKeyValue(keyGroupName |> addDockingSuffix);
                                        reverseBehaviour(updateMenu);
                                        reverseBehaviour(state.loadWorkspace);
                                        showMSnackbar(state.manager, _("Browser Cache Cleared"), []);
                                    }
                                )
                            ),
                            MEnabled(fselectLift(state.enabled, \enA -> savedString != ""))
                        ]
                    )
                ]
            ]),
            [MBelowButton()]
        )
    })
}

saveEditWorkspaceDialog(state : MDockingState, updateMenu : DynamicBehaviour<bool>, addNew : bool) -> void {
    keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
    savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
	savedStringJson = parseJson(savedString);
	workspacesJObj = getJsonFieldValueCustom(savedStringJson, "Workspaces", JsonNull(), [JsonFieldTreatAsPath(".")]);

	defaultWSName = extractStruct(state.style, MDWorkspaceRenameDefault("Default")).name;
    selectedName = getJsonStringValue(getJsonFieldValue(savedStringJson, "Selected", JsonNull()), defaultWSName);
	selectedJObj = getJsonFieldValueCustom(savedStringJson, "Workspaces." + selectedName, JsonNull(), [JsonFieldTreatAsPath(".")]);
    nameB = make(if (addNew) "" else selectedName);
    closeB = make(false);
    dtitle = if (addNew) "Add" else "Edit";

    saveWorkspace = \ -> {
		currentWSJson = dockingState2json(state);
		njs = setJsonField(
			setJsonField( 
				setJsonField(savedStringJson, "Selected",  JsonString(getValue(nameB))),
				"Current",  currentWSJson
			),
			"Workspaces",
			setJsonField(workspacesJObj, getValue(nameB), currentWSJson)
		);
        setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs));
        reverseBehaviour(updateMenu);
		 showMSnackbar(state.manager, _("Workspace \"" + getValue(nameB) + "\" Added"), []);
    }

    editWorkspace = \ -> {
		currentWSJson = dockingState2json(state);
		njs = setJsonField(
			setJsonField(savedStringJson, "Selected",  JsonString(getValue(nameB))),
			"Workspaces",
			setJsonField(
				removeJsonField(workspacesJObj, selectedName),
				getValue(nameB), selectedJObj
			)
		);
        setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs));
        reverseBehaviour(updateMenu);
        showMSnackbar(state.manager, _("Workspace \"" + selectedName + "\"  Renamed To \"" + getValue(nameB) + "\""), []);
    }

    ShowMDialog(
        state.manager,
        closeB,
        [
            MDialogUseFrame(),
            MDialogClickOutToClose(),
            MDialogCustomTitle(
                MText(formatString(_("%1 Workspace Name"), [dtitle]), [MTitle()])
            ),
            MDialogActions([
                MAlignEnd(MColsA([
                    MTextButton(_("CANCEL"), \-> nextDistinct(closeB, true), [], [MShortcut("esc")])|> MBorderEnd(4.0),
                    MTextButton(_("CONFIRM"), \-> {
                        if (addNew) saveWorkspace() else editWorkspace();
                        nextDistinct(closeB, true);
                    }, [MButtonRaised()], [MShortcut("enter"),  MEnabled(fselectLift(nameB, \n -> n != ""))]),
                ])),
            ])
        ],
        MAvailable(
            MTextInput(nameB, [], [MFocused(make(true))]),
            TFillWY(320.0)
        ) |> MBorderTop(8.0)
    );
}

confirmDeleteDialogFn(manager : MaterialManager, title : string, deleteLabel : string, deleteFn : () -> void) -> () -> void {
    closeDialogB = make(false);
    closeFn = \-> next(closeDialogB, true);
   \ -> ShowMDialog(manager, closeDialogB,
        [
            MDialogTitle(title),
            MDialogClickOutToClose(),
            MDialogUseFrame(),
            MDialogActions([
                MTextButton(_("CANCEL"), closeFn, [], [MShortcut("esc")]),
                MTextButton(deleteLabel,
                \ -> {
                    deleteFn();
                    closeFn();
                }, [MButtonRaised()], [MShortcut("enter")])
            ]),
        ], MEmpty()
    );
}