import material/material;
import material/material_dialog;
import material/material_snackbar;
import material/extra/docking_ui/internal/material_docking_state;


export {
    
    // Cache docking state
	addDockingSuffix(input : string) -> string;
	dockingState2json(state : MDockingState) -> Json;
	setMDockingStateKeyValue(state : MDockingState) -> bool;
	removeMDockingStateKeyValue(state : MDockingState) -> void;

    makeMDWorkspaceMenuBtn(state : MDockingState) -> Material;
}

addDockingSuffix(input : string) -> string {
	input + "_MDockingPanels"
}

dockingState2json(state : MDockingState) -> Json {
	dockA = getValue(state.dock);
	dockAjson = 
		JsonObject(
			mapi(dockA,\panelId, dock -> {
				title = getValue(state.title)[panelId];
				enabled = getValue(getValue(state.enabled)[panelId]);
				expanded = getValue(getValue(state.expanded)[panelId]);
				sideExpanded = getValue(getValue(state.sideExpanded)[panelId]);
				size = getValue(state.size)[panelId];
				mobileSize = getValue(state.mobileSize)[panelId];
				dockedSize = getValue(state.dockedSize)[panelId];
				pos = getValue(getValue(state.positions)[panelId]);
				pstyle = getValue(state.panelStyle)[panelId];
				isEndAligned = getValue(extractStruct(pstyle, MDToolbarEndAlign(make(false))).endAlign);

				Pair(i2s(panelId),
					JsonObject(
						[
							Pair("title", JsonString(title)),
							Pair("areaId", JsonDouble(i2d(dock.areaId))),
							Pair("colId", JsonDouble(i2d(dock.colId))),
							Pair("rowId", JsonDouble(i2d(dock.rowId))),
							Pair("x", JsonDouble(pos.x)),
							Pair("y", JsonDouble(pos.y)),
							Pair("w", JsonDouble(size.width)),
							Pair("h", JsonDouble(size.height)),
							Pair("mobileW", JsonDouble(dockedSize.width)),
							Pair("mobileH", JsonDouble(dockedSize.height)),
							Pair("dockedW", JsonDouble(dockedSize.width)),
							Pair("dockedH", JsonDouble(dockedSize.height)),
							Pair("enabled", JsonBool(enabled)),
							Pair("expanded", JsonBool(expanded)),
							Pair("sideExpanded", JsonBool(sideExpanded)),
							Pair("endAligned", JsonBool(isEndAligned)),
						]
					)
				);

			}));
	// json2stringFormatted(dockAjson) |> println;  // Debug print
	dockAjson
}

setMDockingStateKeyValue(state : MDockingState) -> bool {
	keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
	savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
    jName = 
        eitherMap(
            getJsonFieldValueM(parseJson(savedString), "Name"),
            \wsName -> parseJson(savedString),
            setJsonField(parseJson(savedString), "Name",  JsonString("Default"))
            
        );
    njson = setJsonField(jName, "Current",  JsonString(json2string(dockingState2json(state))));
    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson));
}

removeMDockingStateKeyValue(state : MDockingState) -> void {
	keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
    savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
    njson = setJsonField(parseJson(savedString), "Current",  JsonNull());
    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson)) |> ignore;
}

setMDWorkspaceName(state : MDockingState, name : string) -> bool {
	keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
	savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
    njson = setJsonField(parseJson(savedString), "Name",  JsonString(name));
    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson));
}

makeMDWorkspaceMenuBtn(state : MDockingState) -> Material {
    updateMenu = make(true);
    iconStyleA = [state.manager.theme.palette.primary, MIconSize(20.0)];
    textStyleA = [MGrey(600)];
    gapW = 32.0;

    MSelect(updateMenu, \__ -> {
        keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
        savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
        customWorkspacesA = getJsonArrayValue(getJsonFieldValue(parseJson(savedString), "Workspaces", JsonNull()), []);
        selectedName = getJsonStringValue(getJsonFieldValue(parseJson(savedString), "Name", JsonNull()), "Default");
        selectedNameB = make(selectedName);

        workspacesNameA = mapi(customWorkspacesA, \i, ws -> {
            wsName = getJsonStringValue(getJsonFieldValue(ws, "Name", JsonNull()), "");
            wsLayout = getJsonFieldValue(ws, "Workspace", JsonNull());

            MMenuCustomLine(
                MBaselineColsA([
                    MVisible(fselectLift(selectedNameB, \sel -> sel == wsName), MIcon("done", iconStyleA)),
                    MText(wsName, textStyleA) |> MBorderStart(12.0),
                ]),
                [MOnClick(\ -> {
                    removeMDockingStateKeyValue(state);

                    njson = setJsonField(parseJson(savedString), "Current",  wsLayout);
                    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njson)) |> ignore;

                    reverseBehaviour(state.loadWorkspace);
                    setMDWorkspaceName(state, wsName);
                    showMSnackbar(state.manager, "Workspace " + wsName + " applied", []);
                })]		
            )
        });

        MMenu(
            MIconButton("view_carousel", 
                \ -> {
                    savedString_ = getKeyValue(keyGroupName |> addDockingSuffix, "");
                    selectedName_ = getJsonStringValue(getJsonFieldValue(parseJson(savedString_), "Name", JsonNull()), "Default");
                    nextDistinct(selectedNameB, selectedName_);
                }, 
                [MIconButtonBorder(8.0)], []
            ),
            concatA([
                workspacesNameA,
                if (workspacesNameA != []) [MSeparatorLine()] else [],
                [
                    MMenuCustomLine(
                        MBaselineColsA([
                            MVisible(fselectLift(selectedNameB, \sel -> sel == "Default"), MIcon("done", iconStyleA)),
                            MText("Default", textStyleA)  |> MBorderStart(12.0)
                            ]),
                        [
                            MOnClick(\ -> {
                                removeMDockingStateKeyValue(state);
                                reverseBehaviour(state.loadWorkspace);
                                setMDWorkspaceName(state, "Default");
                                showMSnackbar(state.manager, "Default workspace applied", []);
                            })
                        ]
                    ),
                    MSeparatorLine(),
                    MMenuCustomLine(
                        MText("Add Workspace", textStyleA) |> MBorderStart(gapW),
                        [MOnClick(\ -> {
                            saveEditWorkspaceDialog(state, updateMenu, true);
                        })]		
                    ),
                    MMenuCustomLine(
                        MText("Remove Workspace", textStyleA) |> MBorderStart(gapW),
                        [
                            MOnClick(
                                confirmDeleteDialogFn(state.manager, "Remove " + getValue(selectedNameB) + "?", "DELETE", \ -> {
                                    p = firstElement(
                                        filtermapi(customWorkspacesA, \i, ws -> {
                                        wsName = getJsonStringValue(getJsonFieldValue(ws, "Name", JsonNull()), "");
                                        if (wsName == getValue(selectedNameB)) Some(Pair(i, ws)) else None()
                                    }), Pair(0, JsonNull()));
                                    iWs = p.first;
                                    selWs = p.second;
                                    nWs = setJsonField(selWs, "Workspace",  JsonString(json2string(dockingState2json(state))));
                                    nWsA = removeIndex(customWorkspacesA, iWs);
                                    njs = setJsonField(parseJson(savedString), "Workspaces",  JsonArray(nWsA));
                                    setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs));
                                    setMDWorkspaceName(state, "Default");
                                    reverseBehaviour(updateMenu);
                                    showMSnackbar(state.manager, getValue(selectedNameB) + " workspace removed", []);
                                })
                            ),
                            MEnabled(fselectLift(updateMenu, \__ -> getValue(selectedNameB) != "Default" && customWorkspacesA != []))
                        ]		
                    ),
                ],
                // Devtools buttons
                if (isUrlParameterTrue("devtools")) [
                    // MMenuCustomLine(
                    //     MText("Rename Workspace", textStyleA) |> MBorderStart(gapW),
                    //     [
                    //         MOnClick(\ -> {
                    //             saveEditWorkspaceDialog(state, updateMenu, false);
                    //         }),
                    //         MEnabled(fselectLift(updateMenu, \__ -> getValue(selectedNameB) != "Default"))
                    //     ]		
                    // ),
                    // MMenuCustomLine(
                    //     MText("Update Workspace", textStyleA) |> MBorderStart(gapW), [
                    //     MOnClick(\ -> {
                    //         if (customWorkspacesA != []) {
                    //             p = firstElement(
                    //                 filtermapi(customWorkspacesA, \i, ws -> {
                    //                 wsName = getJsonStringValue(getJsonFieldValue(ws, "Name", JsonNull()), "");
                    //                 if (wsName == getValue(selectedNameB)) Some(Pair(i, ws)) else None()
                    //             }), Pair(0, JsonNull()));
                    //             iWs = p.first;
                    //             selWs = p.second;
                    //             nWs = setJsonField(selWs, "Workspace",  JsonString(json2string(dockingState2json(state))));
                    //             nWsA = replace(customWorkspacesA, iWs ,nWs);
                    //             njs = setJsonField(parseJson(savedString), "Workspaces",  JsonArray(nWsA));
                    //             njs2 = setJsonField(njs, "Current",  JsonString(json2string(dockingState2json(state))));
                    //             setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs2));
                    //             reverseBehaviour(updateMenu);
                    //             showMSnackbar(state.manager, getValue(selectedNameB) + " workspace updated", []);
                    //         }
                    //     }), 
                    //     MEnabled(fselectLift(updateMenu, \__ -> getValue(selectedNameB) != "Default"))]
                    // ),
                    MSeparatorLine(),
                    MMenuCustomLine(
                        MText("Clear browser cache", textStyleA) |> MBorderStart(gapW),
                        // "Reset Layout", 
                        [
                            MOnClick(
                                confirmDeleteDialogFn(state.manager, "All saved workspaces will be deleted, are you sure?", "DELETE",                                        
                                    \ -> {
                                        removeKeyValue(keyGroupName |> addDockingSuffix);
                                        reverseBehaviour(updateMenu);
                                        reverseBehaviour(state.loadWorkspace);
                                        showMSnackbar(state.manager, "Browser cache cleared", []);
                                    }
                                )
                            ),
                            MEnabled(fselectLift(state.enabled, \enA -> savedString != ""))
                        ]
                    )
                ] else []
            ]),
            [MBelowButton()]
        )
    })
}

saveEditWorkspaceDialog(state : MDockingState, updateMenu : DynamicBehaviour<bool>, addNew : bool) -> void {
    keyGroupName = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).keyGroupName;
    savedString = getKeyValue(keyGroupName |> addDockingSuffix, "");
    customWorkspacesA = getJsonArrayValue(getJsonFieldValue(parseJson(savedString), "Workspaces", JsonNull()), []);
    selectedName = getJsonStringValue(getJsonFieldValue(parseJson(savedString), "Name", JsonNull()), "Default");
    nameB = make(if (addNew) "" else selectedName);
    closeB = make(false);
    dtitle = if (addNew) "Add" else "Edit";

    saveWorkspace = \ -> {
        nwsA = arrayPush(customWorkspacesA, JsonObject([
            Pair("Name", JsonString(getValue(nameB))),
            Pair("Workspace", JsonString(json2string(dockingState2json(state))))
        ]));
        njs = setJsonField(parseJson(savedString), "Workspaces",  JsonArray(nwsA));
        njs2 = setJsonField(njs, "Name",  JsonString(getValue(nameB)));
        setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs2));
        reverseBehaviour(updateMenu);
    }

    editWorkspace = \ -> {
        p = firstElement(
            filtermapi(customWorkspacesA, \i, ws -> {
            wsName = getJsonStringValue(getJsonFieldValue(ws, "Name", JsonNull()), "");
            if (wsName == selectedName) Some(Pair(i, ws)) else None()
        }), Pair(0, JsonNull()));
        iWs = p.first;
        selWs = p.second;
        nWs = setJsonField(selWs, "Name",  JsonString(getValue(nameB)));
        nWsA = replace(customWorkspacesA, iWs ,nWs);
        njs = setJsonField(parseJson(savedString), "Workspaces",  JsonArray(nWsA));
        njs2 = setJsonField(njs, "Name",  JsonString(getValue(nameB)));
        setKeyValue(keyGroupName |> addDockingSuffix, json2string(njs2));
        reverseBehaviour(updateMenu);
        showMSnackbar(state.manager, "\"" + selectedName + "\" workspace name updated to \"" + getValue(nameB) + "\"", []);
    }

    ShowMDialog(
        state.manager,
        closeB,
        [
            MDialogUseFrame(),
            MDialogClickOutToClose(),
            MDialogCustomTitle(
                MText(_(dtitle + " Workspace Name"), [MTitle()])
            ),
            MDialogActions([
                MAlignEnd(MColsA([
                    MTextButton("CANCEL", \-> nextDistinct(closeB, true), [], [])|> MBorderEnd(4.0),
                    MTextButton(_("CONFIRM"), \-> {
                        if (addNew) saveWorkspace() else editWorkspace();
                        nextDistinct(closeB, true);
                    }, [MButtonRaised()], []),
                ])),
            ])
        ],
        MAvailable(
            MTextInput(nameB, [], []),
            TFillWY(320.0)
        ) |> MBorderTop(8.0)
    );
}


confirmDeleteDialogFn(manager : MaterialManager, title : string, deleteLabel : string, deleteFn : () -> void) -> () -> void {
    closeDialogB = make(false);
    closeFn = \-> next(closeDialogB, true);
   \ -> ShowMDialog(manager, closeDialogB,
        [
            MDialogTitle(_(title)),
            MDialogClickOutToClose(),
            MDialogUseFrame(),
            MDialogActions([
                MTextButton(_("CANCEL"), closeFn, [], [MShortcut("esc")]),
                MTextButton(_(deleteLabel), 
                \ -> {
                    deleteFn();
                    closeFn();
                }, [MButtonRaised()], [MShortcut("enter")])
            ]),
        ], MEmpty()
    );
}