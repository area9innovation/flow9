import fusion;
import material/material_color;
import material/extra/docking_ui/internal/material_docking_styles;


export{

	// Inactive color without panels
	editorBgColorLight : MColor = MCustomColor(0xebebeb);
	editorBgColorDark : MColor = MCustomColor(0x151515);

	// Panel's background
	panelBgColorLight : MColor = MCustomColor(0xfafafa);
	panelBgColorDark : MColor = MCustomColor(0x212121);

	// Panel's toolbar
	topbarColorLight : MColor = MCustomColor(0xf4f4f4);
	topbarColorDark : MColor = MCustomColor(0x191919);

	// Colors for titles and icons used in toolbars
	titleColorLight : MColor = MGrey(950);
	titleColorDark : MColor = MWhite();
	
	// Other colors
	sideExpanderHoverColorLight : MColor = MCustomColor(0xf9f9f9);
	sideExpanderHoverColorDark : MColor = MCustomColor(0x252525);

	mobileResizeHandleColorLight : MColor = MGrey(600);
	mobileResizeHandleColorDark : MColor = MGrey(800);

	smallDragHandleColorLight : MColor = MGrey(600);
	smallDragHandleColorDark : MColor = MGrey(200);

	bgHandleColorLight : MColor = MGrey(50);
	bgHandleColorDark : MColor = MBlack();

	toolbarHandleColorLight : MColor = MGrey(600);
	toolbarHandleColorDark : MColor = MGrey(400);

	dockingPrimaryColor : MColor = MBlue(500);
	dockingActiveColor : MColor = MOrangeA(400);
	
	// Round corners
	dockingRadius = 4.0;

	// Separators
	dockingGap = 2.0;
	dockingSafeResizeGap = 4.0;

	// Main Helpers Opacity
	dockingHelpersOpacity = 0.0;

	// Resize Helper
	dockingHelperResize = 12.0;
	dockingHelperResizeOpacity = dockingHelpersOpacity;

	// Drop Helper
	dockingHelperDropSize = 12.0;
	dockingHelperDropOpacity = dockingHelpersOpacity;
	dockingHelperDropColorV = dockingPrimaryColor;
	dockingHelperDropColorH = MRed(500);

	// Topbar for toolbar content drag helper
	dockingTopbarDragHelperColor : MColor = MGreen(500);
	dockingTopbarDragHelperOpacity = dockingHelpersOpacity;

	// Mobile Resize Helper
	mobileResizeHelperColor : MColor = MYellow(700);
	mobileResizeHelperOpacity = dockingHelpersOpacity;
	mobileResizeHelperSize = 18.0; 

	// Hover Drop Line
	dockingDropLineHoverSize = 4.0;
	dockingDropLineHoverColor : MColor = dockingActiveColor;
	dockingDropLineHoverOpacity = 0.8;

	// Inactive Drop Line
	inactiveDropLineSize = 8.0;

	dockingItemHeight = 48.0;
	dockingBarHeightPanel = 36.0;
	dockingBarHeightToolbar = 10.0; // interactive size
	dockingTopBarHandleWidth = 24.0;
	dockingHandleH = 14.0;
	dockingHandleW = 1.0;
	dockingSideCollapsedSize = 12.0;
	dockingDragHandleOpacity = 1.0;
	dockingCollapsedSeparatorH = 0.0;

	dockingMobileOpacity = 0.3;
	sideExpanderButtonSize = 14.0;
	sideExpanderIconSize = 12.0;

	dockingToolbarIconSize = 22.0;
	dockingToolbarIconOpacity = 0.565;

	dockingTopBarIconSize = 22.0;

	dockingTitleOpacity = 0.7;
	dockingTitleFont = MCustomFont(12.0, "Roboto", 	dockingTitleOpacity);

	getDockingRadius(style : [MDockingStyle]) -> double;
	getDSeparatorSize(isColumn : bool, style : [MDockingStyle]) -> double;
	
	editorBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	editorContentBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	mobileResizeHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	smallDragHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor;
	sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	titleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	topBarColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	toolbarHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
}


// MDockingUI theme

getDockingRadius(style : [MDockingStyle]) -> double {
	extractStruct(style, MDEditorRadius(dockingRadius)).radius
}

getDSeparatorSize(isColumn : bool, style : [MDockingStyle]) -> double {
	g = extractStruct(style, MDEditorGap(dockingGap)).size;
	sepV = extractStruct(style, MDEditorColumnsGap(g)).size;
	sepH = extractStruct(style, MDEditorRowsGap(g)).size;
	if (isColumn) sepV else sepH;
}

themeMode(light : bool, style : [MDockingStyle]) -> bool {
	if (contains(style, MDPanelForceDarkTheme())) false 
		else if (contains(style, MDPanelForceLightTheme())) true 
			else light;
}

panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	p = extractStruct(style, MDEditorPanelsBackground(panelBgColorLight, panelBgColorDark));
	b = extractStruct(style, MDPanelBackground(p.lightColor, p.darkColor));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

editorBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	b = extractStruct(style, MDEditorBackground(editorBgColorLight, editorBgColorDark));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

editorContentBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	b = extractStruct(style, MDEditorContentBackground(panelBgColorLight, panelBgColorDark));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

topBarColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	t = extractStruct(style, 	MDEditorPanelsTopbarBackground(topbarColorLight, topbarColorDark));
	b = extractStruct(style, MDPanelTopbarBackground(t.lightColor, t.darkColor));
 	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

titleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	t = extractStruct(style, MDEditorTitlesBackground(titleColorLight, titleColorDark));
	c = extractStruct(style, MDPanelTitleColor(t.lightColor, t.darkColor));
 	if (themeMode(light, style)) c.lightColor else c.darkColor;
}

separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor {
	b = extractStruct(style, MDEditorBackground(editorBgColorLight, editorBgColorDark));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

smallDragHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) smallDragHandleColorLight else smallDragHandleColorDark;
}

mobileResizeHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) mobileResizeHandleColorLight else mobileResizeHandleColorDark;
}

sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	e = extractStruct(style, MDEditorBackground(editorBgColorLight, editorBgColorDark));
	c = extractStruct(style, MDSideExpanderBackground(e.lightColor, e.darkColor));
 	if (themeMode(light, style))  c.lightColor else c.darkColor;
}

sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	c = extractStruct(style, MDSideExpanderHoverColor(sideExpanderHoverColorLight, sideExpanderHoverColorDark));
 	if (themeMode(light, style))  c.lightColor else c.darkColor;
}

toolbarHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	if (themeMode(light, style)) toolbarHandleColorLight else toolbarHandleColorDark;
}
