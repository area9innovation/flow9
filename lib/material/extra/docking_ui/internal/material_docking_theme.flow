import fusion;
import material/material_color;
import material/extra/docking_ui/internal/material_docking_styles;


export{
	// MDockingUI theme
	bgColorLight : MColor = MGrey(200);
	bgColorDark : MColor = MCustomColor(0x191919);
	panelBgColorLight : MColor = MGrey(100);
	panelBgColorDark : MColor = MGrey(900);
	separatorColorLight : MColor = MCustomColor(0xe8e8e8);
	separatorColorDark : MColor = MCustomColor(0x151515);

	dockingDropLineHoverColor : MColor = MOrange(400);
	dockingDropLineOpacity = 0.2;

	dockedTitleColorLight : MColor = MGrey(950);
	dockedTitleColorDark : MColor = MWhite();
	dockedBarColorLight : MColor = bgColorLight;
	dockedBarColorDark : MColor = bgColorDark;

	sideExpanderBgColorLight : MColor = MGrey(100);
	sideExpanderBgColorDark : MColor = MGrey(900);
	sideExpanderHoverColorLight : MColor = MCustomColor(0xf9f9f9);
	sideExpanderHoverColorDark : MColor = MCustomColor(0x252525);

	textColorLight : MColor = MGrey(950);
	textColorDark : MColor = MWhite();
	iconColorLight : MColor = MGrey(950);
	iconColorDark : MColor = MWhite();

	mobileTitleColorLight : MColor = MGrey(950);
	mobileTitleColorDark : MColor = MWhite();
	mobileBarColorLight : MColor = MBlack();
	mobileBarColorDark : MColor = MBlack();
	mobileHandleColorLight : MColor = MGrey(600);
	mobileHandleColorDark : MColor = MGrey(800);

	bgHandleColorLight : MColor = MGrey(50);
	bgHandleColorDark : MColor = MBlack();

	resizeHandleColorLight : MColor = MGrey(700);
	resizeHandleColorDark : MColor = MGrey(200);

	dockingPrimaryColor : MColor = MBlue(500);

	dockingItemHeight = 48.0;
	dockingDropSize = 14.0;
	dockingDragSize = 5.0;
	dockingBarHeight = 36.0;
	dockingHandleH = 14.0;
	dockingHandleW = 1.0;
	dockingSideCollapsedSize = 36.0;
	dockingRadius = 2.0;
	dockingDragHandleOpacity = 1.0;
	dockingCollapsedSeparatorH = 0.0;
	dockingMobileOpacity = 0.7;
	sideExpanderButtonSize = 14.0;

	dockingToolbarIconSize = 22.0;
	dockingTopBarIconSize = 18.0;

	bgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	mobileHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	resizeHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor;
	sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	dockedTitleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
}

bgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
	bgStyle = extractStruct(style, MDockingBackground(bgColorLight, bgColorDark));
	if (fgetValue(theme)) bgStyle.lightColor else bgStyle.darkColor;
}

panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
	if (fgetValue(theme)) panelBgColorLight else panelBgColorDark;
}

separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
 	if (fgetValue(theme)) separatorColorLight else separatorColorDark;
}

resizeHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
 	if (fgetValue(theme)) resizeHandleColorLight else resizeHandleColorDark;
}

mobileHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
 	if (fgetValue(theme)) mobileHandleColorLight else mobileHandleColorDark;
}

sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
 	if (fgetValue(theme)) sideExpanderBgColorLight else sideExpanderBgColorDark;
}

sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
 	if (fgetValue(theme)) sideExpanderHoverColorLight else sideExpanderHoverColorDark;
}

dockedTitleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	theme = if (contains(style, MDockingForceDarkTheme())) const(false) else if (contains(style, MDockingForceLightTheme())) const(true) else const(light);
 	if (fgetValue(theme)) dockedTitleColorLight else dockedTitleColorDark;
}