import fusion;
import material/material_color;
import material/extra/docking_ui/internal/material_docking_styles;


export{
	// MDockingUI theme

	// Inactive color without panels
	// areaBgColorLight : MColor = MGrey(200);
	// areaBgColorDark : MColor = MCustomColor(0x191919);

	areaBgColorLight : MColor = MOrange(300);
	areaBgColorDark : MColor = MPurple(300);

	// Panel's background
	panelBgColorLight : MColor = MGrey(100);
	panelBgColorDark : MColor = MGrey(900);

	// Panel's toolbar
	barColorLight : MColor = panelBgColorLight;
	barColorDark : MColor = panelBgColorDark;
	// barColorLight : MColor = areaBgColorLight;
	// barColorDark : MColor = areaBgColorDark;
	textColorLight : MColor = MGrey(950);
	textColorDark : MColor = MWhite();

	// Resize bars
	// separatorColorLight : MColor = MCustomColor(0xe8e8e8);
	// separatorColorDark : MColor = MCustomColor(0x151515);
	separatorColorLight : MColor = areaBgColorLight;
	separatorColorDark : MColor = areaBgColorDark;

	dockingDropLineHoverColor : MColor = MOrange(400);
	dockingDropLineOpacity = 1.2;
	// dockingDropLineOpacity = 0.2;

	sideExpanderBgColorLight : MColor = separatorColorLight;
	// sideExpanderBgColorDark : MColor = panelBgColorDark;

		// sideExpanderBgColorLight : MColor = separatorColorLight;
	sideExpanderBgColorDark : MColor = separatorColorDark;

	sideExpanderHoverColorLight : MColor = MCustomColor(0xf9f9f9);
	sideExpanderHoverColorDark : MColor = MCustomColor(0x252525);

	mobileHandleColorLight : MColor = MGrey(600);
	mobileHandleColorDark : MColor = MGrey(800);

	bgHandleColorLight : MColor = MGrey(50);
	bgHandleColorDark : MColor = MBlack();

	resizeHandleColorLight : MColor = MGrey(700);
	resizeHandleColorDark : MColor = MGrey(200);

	dockingPrimaryColor : MColor = MBlue(500);

	dockingItemHeight = 48.0;
	dockingDropSize = 14.0;
	dockingDragSize = 5.0;
	dockingBarHeight = 36.0;
	dockingHandleH = 14.0;
	dockingHandleW = 1.0;
	dockingSideCollapsedSize = 36.0;
	// dockingRadius = 2.0;
	dockingRadius = 16.0; //////////////////////////////////REMOVE AFTER TEST
	dockingDragHandleOpacity = 1.0;
	dockingCollapsedSeparatorH = 0.0;
	dockingMobileOpacity = 0.7;
	sideExpanderButtonSize = 14.0;

	dockingToolbarIconSize = 22.0;
	dockingTopBarIconSize = 18.0;

	areaBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	mobileHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	resizeHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor;
	sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	dockedTitleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
}

themeMode(light : bool, style : [MDockingStyle]) -> bool {
	if (contains(style, MDockingForceDarkTheme())) false 
		else if (contains(style, MDockingForceLightTheme())) true 
			else light;
}

areaBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	bgStyle = extractStruct(style, MDockingBackground(areaBgColorLight, areaBgColorDark));
	if (themeMode(light, style)) bgStyle.lightColor else bgStyle.darkColor;
}

panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	if (themeMode(light, style)) panelBgColorLight else panelBgColorDark;
}

separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor {
	if (themeMode(light, style)) separatorColorLight else separatorColorDark;
}

resizeHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) resizeHandleColorLight else resizeHandleColorDark;
}

mobileHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) mobileHandleColorLight else mobileHandleColorDark;
}

sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) sideExpanderBgColorLight else sideExpanderBgColorDark;
}

sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) sideExpanderHoverColorLight else sideExpanderHoverColorDark;
}

dockedTitleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) textColorLight else textColorDark;
}