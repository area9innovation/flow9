import fusion;
import material/material_color;
import material/extra/docking_ui/internal/material_docking_styles;


export{
	// MDockingUI theme

	// Inactive color without panels
	areaBgColorLight : MColor = MCustomColor(0xebebeb);
	areaBgColorDark : MColor = MCustomColor(0x151515);

	// Panel's toolbar
	barColorLight : MColor = MCustomColor(0xf4f4f4);
	barColorDark : MColor = MCustomColor(0x191919);

	textColorLight : MColor = MGrey(950);
	textColorDark : MColor = MWhite();

	// Panel's background
	panelBgColorLight : MColor = MCustomColor(0xfafafa);
	panelBgColorDark : MColor = MCustomColor(0x212121);

	// Resize bars
	separatorColorLight : MColor = areaBgColorLight;
	separatorColorDark : MColor = areaBgColorDark;

	// Editor's backgroud (working area)
	editorBgColorSecondaryLight  : MColor = MCustomColor(0xd3d3d3);
	editorBgColorSecondaryDark : MColor = MGrey(800);
	editorBgColorLight  : MColor = panelBgColorLight;
	editorBgColorDark :MColor = panelBgColorDark;

	sideExpanderBgColorLight : MColor = separatorColorLight;
	sideExpanderBgColorDark : MColor = separatorColorDark;

	sideExpanderHoverColorLight : MColor = MCustomColor(0xf9f9f9);
	sideExpanderHoverColorDark : MColor = MCustomColor(0x252525);

	mobileHandleColorLight : MColor = MGrey(600);
	mobileHandleColorDark : MColor = MGrey(800);

	bgHandleColorLight : MColor = MGrey(50);
	bgHandleColorDark : MColor = MBlack();

	smallHandleColorLight : MColor = MGrey(600);
	resizeHandleColorDark : MColor = MGrey(200);
	toolbarHandleColorLight : MColor = MGrey(500);
	toolbarHandleColorDark : MColor = MGrey(600);

	dockingPrimaryColor : MColor = MBlue(500);
	dockingActiveColor : MColor = MOrangeA(500);
	
	// Round corners
	dockingRadius = 4.0; //2.0;

	// Main Helpers Opacity
	dockingHelpersOpacity = 0.0;

	// Separators
	dockingSeparatorSize = 2.0;

	// Resize Helper
	dockingHelperResize = 12.0;
	dockingHelperResizeOpacity = dockingHelpersOpacity;

	// Drop Helper
	dockingHelperDropSize = 12.0;
	dockingHelperDropOpacity = dockingHelpersOpacity;

	// Topbar for toolbar content drag helper
	dockingTopbarDragHelperColor : MColor = MGreen(500);
	dockingTopbarDragHelperOpacity = dockingHelpersOpacity;

	// Mobile Resize Helper
	mobileResizeHelperColor : MColor = MYellow(700);
	mobileResizeHelperOpacity = dockingHelpersOpacity;
	mobileResizeHelperSize = 36.0; 

	// Hover Drop Line
	dockingDropLineHoverSize = 4.0;
	dockingDropLineHoverColor : MColor = dockingActiveColor;
	dockingDropLineHoverOpacity = 0.8;

	// Inactive Drop Line
	inactiveDropLineSize = 8.0;

	dockingItemHeight = 48.0;
	dockingBarHeightPanel = 36.0;
	dockingBarHeightToolbar = 10.0; // interactive size
	dockingTopBarHandleWidth = 24.0;
	dockingHandleH = 14.0;
	dockingHandleW = 1.0;
	dockingSideCollapsedSize = 36.0; // 26.0;
	dockingDragHandleOpacity = 1.0;
	dockingCollapsedSeparatorH = 0.0;

	dockingMobileOpacity = 0.3;
	sideExpanderButtonSize = 14.0;

	dockingToolbarIconSize = 22.0;
	dockingToolbarIconOpacity = 0.565;

	dockingTopBarIconSize = 20.0; //18.0;

	dockingTitleOpacity = 0.7;
	dockingTitleFont = MCustomFont(12.0, "Roboto", 	dockingTitleOpacity);

	getDSeparatorSize(isColumn : bool, style : [MDockingStyle]) -> double;

	areaBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	editorBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	mobileHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	smallHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor;
	sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	titleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	topBarColorFn(light : bool, style : [MDockingStyle]) -> MColor;
	toolbarHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor;
}


getDSeparatorSize(isColumn : bool, style : [MDockingStyle]) -> double {
	sepV = extractStruct(style, MDCustomSeparatorV(dockingSeparatorSize)).size;
	sepH = extractStruct(style, MDCustomSeparatorH(dockingSeparatorSize)).size;
	if (isColumn) sepV else sepH;
}

themeMode(light : bool, style : [MDockingStyle]) -> bool {
	if (contains(style, MDPanelForceDarkTheme())) false 
		else if (contains(style, MDPanelForceLightTheme())) true 
			else light;
}

areaBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	b = extractStruct(style, MDAreaBackground(areaBgColorLight, areaBgColorDark));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

panelBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	b = extractStruct(style, MDPanelBackground(panelBgColorLight, panelBgColorDark));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

editorBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	b = extractStruct(style, MDEditorBackground(editorBgColorLight, editorBgColorDark));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

topBarColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	b = extractStruct(style, MDPanelTopbarBackground(barColorLight, barColorDark));
 	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

titleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	c = extractStruct(style, MDPanelTitleColor(textColorLight, textColorDark));
 	if (themeMode(light, style)) c.lightColor else c.darkColor;
}

separatorColorFn(light : bool, style : [MDockingStyle])  -> MColor {
	b = extractStruct(style, MDAreaBackground(separatorColorLight, separatorColorDark));
	if (themeMode(light, style)) b.lightColor else b.darkColor;
}

smallHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) smallHandleColorLight else resizeHandleColorDark;
}

mobileHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) mobileHandleColorLight else mobileHandleColorDark;
}

sideExpanderBgColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) sideExpanderBgColorLight else sideExpanderBgColorDark;
}

sideExpanderHoverColorFn(light : bool, style : [MDockingStyle]) -> MColor {
 	if (themeMode(light, style)) sideExpanderHoverColorLight else sideExpanderHoverColorDark;
}

toolbarHandleColorFn(light : bool, style : [MDockingStyle]) -> MColor {
	if (themeMode(light, style)) toolbarHandleColorLight else toolbarHandleColorDark;
}
