import material/material_color;
import material/material;

export {

	// NOTE: Default values, for initial colors or sizes, are in material_docking_theme.flow

	MDockingPanelContent ::= MDPanelContent, MDToolbarContent;
		// Use it for standard panels with custom content
		MDPanelContent(content : Material);
		// Rotating toolbar with fixed space and alignment for buttons, when docked in cols will be arranged as vertical
		MDToolbarContent(buttons : [Material]);


	MDockingPanelStyle ::= 
		MDPanelDontMove, MDPanelDontResize, MDPanelForceDarkTheme, MDPanelForceLightTheme, MDPanelBackground, MDPanelTopbarBackground, MDPanelTitleColor,
		MDPanelHideSideExpander, MDPanelHideTopbar, MDPanelTitleEllipsis, MDPanelTopbarButtons, MDPanelTopbarCustomButtons, MDPanelTopbarCustomButtonsStart, MDPanelHideExpanderBtn, 
		MDPanelShowCloseBtn, MDPanelIcon, MDPanelPosition, MDPanelMimimumSize,MDPanelEnabled, MDPanelVisible, MDPanelExpanded, MDPanelSideExpanded, MDPanelAllowedGroups,
		MDToolbarVerticalWhenMobile, MDToolbarThickness, MDToolbarFullSizeFixed, MDToolbarEndAlign;

		// NOTE: A panel can be enabled with MDPanelEnabled style, and this value is not stored in the browser's cache, but could be changed ouside the application e.g. access rights
		// When a panel is enabled could be visible or not, and this could be changed by the user through MDPanelVisible style. The value is stored in the cache and can be remembered ina  workspace
		// DO NOT ACCESS DIRECTLY THE DOCKIG STATE to change a panel's visibility, but use MDPanelVisible style

		// Enable or disable a panel (this is not stored in the browser's cache)
		MDPanelEnabled(enabled : Transform<bool>);
		// Show or hide a panel by default (if it is enabled)
		MDPanelVisible(visible : DynamicBehaviour<bool>);

		// Initial position for a mobile panel, this will overwrite MDMobileOffset settings
		MDPanelPosition(position : DynamicBehaviour<Point>);
		// Expand or not a panel by default
		MDPanelExpanded(expanded : DynamicBehaviour<bool>);
		// Side-expand or not a panel by default
		MDPanelSideExpanded(sideExpanded : DynamicBehaviour<bool>);
		// Dock a panel only on allowed groups
		MDPanelAllowedGroups(allowedGroups : [string]);
		// Panel icon
		MDPanelIcon(icon : string);
		// Minimum size of a panel when resized (may differ from initial size)
		MDPanelMimimumSize(size : WidthHeight);

		// Do not admit undocking and repositioning of a docked panel
		MDPanelDontMove();
		// Do not admit resizing of docking areas if applied to MDockingArea (or mobile panels if applied to MDockingPanel)
		MDPanelDontResize();

		// Force dark theme and it will not change
		MDPanelForceDarkTheme();
		// Force light theme and it will not change
		MDPanelForceLightTheme();

		// Override background color for a single panel
		MDPanelBackground(lightColor : MColor, darkColor : MColor);
		// Override background color for a single panel topbar
		MDPanelTopbarBackground(lightColor : MColor, darkColor : MColor);
		// Override title color for a single panel
		MDPanelTitleColor(lightColor : MColor, darkColor : MColor);

		// Hide panel Topbar when docked
		MDPanelHideTopbar();
		// Do not collapse/expand dockable column if a panel contain this style
		MDPanelHideSideExpander();

		// Ellipsis for top bar panel title
		MDPanelTitleEllipsis(width : double);
		// Add disable button to panel
		MDPanelShowCloseBtn();
		// Dont show the expander button inside a panel
		MDPanelHideExpanderBtn();

		// Set a custom array of buttons in the panel top bar
		MDPanelTopbarButtons(buttons : [MDPanelCustomToggleButton]);
		MDPanelTopbarCustomButtons(buttons : [Material]);
		MDPanelTopbarCustomButtonsStart(buttons : [Material]); // Placed after panel's title
			// Custom button type
			MDPanelCustomToggleButton(icon : string, tooltip : string, onClick : () -> void, style : [MDPanelCustomButtonStyle]);
				MDPanelCustomButtonStyle ::= MColor; //, MDPanelBtnIconOFF, MDPanelBtnTooltipOFF, MDPanelBtnColorOFF;
					// MDPanelBtnIconOFF(icon : string);
					// MDPanelBtnTooltipOFF(tooltip : string);
					// MDPanelBtnColorOFF(color : MColor);

		
		// Toolbars

		// Align element to the end of the line/column - NOTE: used for toolbars
		MDToolbarEndAlign(endAlign : DynamicBehaviour<bool>);

		// Make a fixed and undockable toolbar that will fill all available space in the area
		MDToolbarFullSizeFixed();
		// Flip mobile panels into vertical position (default is horizontal)
		MDToolbarVerticalWhenMobile();
		// Customize toolbar height (this value affects also the space between toolbar buttons) -- default : 48px
		MDToolbarThickness(thickness : double);



	MDockingAreaStyle ::=
		MDAreaGroupName, MDockingRightCols, MDockingBottomLines, MDAreaVisible, /* MDAreaBackground,*/ MDAreaDontResize, MDAreaDontScroll,
		MDAreaScrollStyle, MDAreaHideSideMenu, MDAreaHideSideExpander, MDAreaExpandLastPanel, MDAreaForceDarkTheme, MDAreaForceLightTheme, MDAreaAccordion;
	
		// Many docking areas could have the same group name, this is required for panels with MDPanelAllowedGroups
		MDAreaGroupName(groupName : string);
		// Change dragging handles position if MDockingArea cols are aligned to the right
		MDockingRightCols();
		// Change dragging handles position if MDockingArea lines are aligned to the bottom
		MDockingBottomLines();
		// Do not resize a docking area
		MDAreaDontResize();
		// Do not admit scrolling
		MDAreaDontScroll();
		// Customize scrollbars for a single area (overrides MDEditorAreaScrollStyle)
		MDAreaScrollStyle(style : [MScrollStyle]);
		// Do not collapse/expand dockable columns
		MDAreaHideSideExpander();
		// Hide side menu contained in side expander button (when visible)
		MDAreaHideSideMenu();
		// Show/hide a docking area, default : true
		MDAreaVisible(visible : DynamicBehaviour<bool>);

		// Force dark theme and it will not change
		MDAreaForceDarkTheme();
		// Force light theme and it will not change
		MDAreaForceLightTheme();

		// Panels in the same column will act as single accordion menu, only one panel could be expanded at once
		// openPanelName = None(), means that menu starts with all expanders closed by default
		// This setting will override MDPanelExpanded style used for docked panels
		MDAreaAccordion(enable : DynamicBehaviour<bool>, openPanelName : Maybe<string>);

		// Change background color for a docking area
		// MDAreaBackground(lightColor : MColor, darkColor : MColor); // act on area bg

		// In a column takes space from the last panel (TFillY on the bottom)
		// Default is from first panel (takes space from the top)
		MDAreaExpandLastPanel();

	// Workspaces

	// NOTE: Workspaces can be created by the user on the fly (using functions in makeMDWorkspaceMenuBtn see: material_docking_workspaces.flow),
	// but also added by code with MDAddCustomWorkspaces style, these one cannot be deleted or renamed. 
	// A custom workspace is given by a name and a json string as data, a TIP to create is:
	// 1. Use "workspaces" flag
	// 2. In the working application, make changes to the layout until desired workspaces is reached
	// 3. Use the "Copy Current Workspace" button, from workspaces menu, to get the relative json string
	// 4. Add a custom workspace with name and copied json string (example in test_docking_ui.flow)

	MDWorkspacesStyle ::= MDWorkspaceSelected, MDWorkspaceRenameDefault, MDAddCustomWorkspaces;
		// Rename default system workspaces which is "Default"
		MDWorkspaceRenameDefault(name : string);
		// Add custom workspaces
		MDAddCustomWorkspaces(workspaces : [MDWorkspace]);
			MDWorkspace(
				name : string,
				datajson : string,
			);

		// Start with a workspace different from default
		MDWorkspaceSelected(name : string); 

	MDockingStyle ::= 
		MDockingPanelStyle, MDWorkspacesStyle,
		MDockingDropSize, MDMobileOffset, MDockingEnableLoadAndStoreCache, MDEditorBackground, MDEditorContentBackground,
		MDEditorContentBackgroundDontHandle, MDEditorPanelsBackground, MDEditorPanelsTopbarBackground, MDEditorTitlesBackground, MDSideExpanderBackground,
		MDSideExpanderHoverColor, MDEditorGap, MDEditorColumnsGap, MDEditorRowsGap, MDEditorRadius, MDEditorBorders, MDEditorAreaScrollStyle;

		// DropSize thickness for MDockingAreas
		MDockingDropSize(size : double);
		// Offset position for default mobile panels, used to tweak the automatic position when no value is provided
		MDMobileOffset(offsetPosition : Point);

		// Editor backgorund color, includes separator and side expanded buttons
		MDEditorBackground(lightColor : MColor, darkColor : MColor); // act on area bg
		// Backgroud color for the working area in the editor
		MDEditorContentBackground(lightColor : MColor, darkColor : MColor);
		// Don't handle working area background from the editor
		MDEditorContentBackgroundDontHandle();
		// Change background color for side expander button
		MDSideExpanderBackground(lightColor : MColor, darkColor : MColor);
		// Change background color for side expander button on hover
		MDSideExpanderHoverColor(lightColor : MColor, darkColor : MColor);

		// Change background color all panels
		MDEditorPanelsBackground(lightColor : MColor, darkColor : MColor);
		// Change background color all topbars
		MDEditorPanelsTopbarBackground(lightColor : MColor, darkColor : MColor);
		// Change background color all titles
		MDEditorTitlesBackground(lightColor : MColor, darkColor : MColor);

		// Editor radius used for panels
		MDEditorRadius(radius : double);
		// Editor external borders
		MDEditorBorders(left : double, top : double, right : double, bottom : double);
	
		// General gap for both columns and rows (default gap : 2.0)
		MDEditorGap(size : double);
		// Customize vertical separator
		MDEditorColumnsGap(size : double);
		// Customize horizontal separator
		MDEditorRowsGap(size : double);

		// Customize scrollbars for all areas in the editor
		MDEditorAreaScrollStyle(style : [MScrollStyle]);

		// Enable browser cache usage
		MDockingEnableLoadAndStoreCache(keyGroupName : string, cacheEnabled : bool);
}
