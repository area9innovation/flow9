import material/material2tropic;
import material/extra/docking_ui/internal/material_docking_utils;
import material/extra/docking_ui/internal/material_docking_drop;

export {
	// NOTE: example in flow9/lib/material/tests/test_docking_ui.flow

	// Each panel can be movable or docked, and it's defined by:
	MDockingPanel(
		// note: if content is [MDockingPanelToolbarItem] is not used
		title : string,
		// creates easily different standard panels as array of MDockingPanelItems
		content : MDockingPanelContent,
		// store the position where the panel is docked
		panelDock : MDock,
		// starting panel size
		size : WidthHeight,
		// panel's style
		style : [MDockingPanelStyle]
	);
						
	makeMovablePanel(state : MDockingState, panelId : int, cursorPositionA : DynamicBehaviour<[Point]>) -> Material;
	makeDockedPanel(isColumn : bool, colA : [int], state : MDockingState, panelId : int, style : [MDockingStyle]) -> Material;
}


makeDockingPanelContent(state : MDockingState, panelId : int, mobilePanel : bool, isVerticalToolbarMobile : bool, resizePressed : DynamicBehaviour<bool>, isHovering : DynamicBehaviour<bool>, style : [MDockingStyle]) -> Material {
	manager = state.manager;
	panelContent = getValue(state.content)[panelId];
	dontResize  = contains(style, MDPanelDontResize());
	pstyle = getValue(state.panelStyle)[panelId];
	isToolbar = isDockingToolbar(state, panelId);
	isEndAligned = getValue(extractStruct(pstyle, MDToolbarEndAlign(make(false))).endAlign);
	dRadius = getDockingRadius(state.style);

	// Theme
	darkTheme = contains(pstyle, MDPanelForceDarkTheme());
	lightTheme = contains(pstyle, MDPanelForceLightTheme());
	theme = if (darkTheme) const(false) else if (lightTheme) const(true) else manager.white;

	resizeHandleMobile = MInteractive(
		[
			TMouseDown(resizePressed), 
			TMouseInside(isHovering, false)
		],
		makeMDockingResizeHandleMobile(state, resizePressed, style)
			|> MBorderEnd(dRadius / 2.0)
			|> MBorderBottom(dRadius / 2.0)
	);

	content = 
		switch (panelContent : MDockingPanelContent) {
			MDToolbarContent(buttonsA): {			
				buttonsA
				|> (\m -> {
					if (isPanelFullSize(state, panelId)) if (isVerticalToolbarMobile) MColsA(m) else MLinesA(m) else {
						if (isEndAligned) {
							if (isVerticalToolbarMobile) MAlignCenterEnd(MColsA(m)) else MAlignBottomEnd(MLines(m))
						} else {
							if (isVerticalToolbarMobile) MAlignCenterStart(MColsA(m)) else MAlignTopCenter(MLines(m))
						}
					}
				})
			}
			MDPanelContent(mat) : mat;
		};

	MGroup([
		content,
		if (mobilePanel) {
			if (dontResize || isToolbar) TEmpty() else resizeHandleMobile;
		} else TEmpty()
	])
	|> (\m -> if (isToolbar) m else MCropSize(TFillXY(), m))
	|> (\m -> (MExplicitTheme(m, theme, [])));
}

makePanelTopBar(docked : bool, panelId: int, colA : [int], state : MDockingState, isColumn: bool, pTheme : bool) -> Material {
	manager = state.manager;
	pstyle = getValue(state.panelStyle)[panelId];
	enabled = getValue(state.enabled)[panelId];
	expanded = getValue(state.expanded)[panelId];
	sideExpanded = getValue(state.sideExpanded)[panelId];
	title = getValue(state.title)[panelId];
	minTitleEllipsisWidth = extractStruct(pstyle, MDPanelTitleEllipsis(120.0)).width;
	dontMove = contains(pstyle, MDPanelDontMove());
	dRadius = getDockingRadius(state.style);
	// Order
	isFirstPanel = panelId == firstElement(colA, intMax);
	isLastPanel = panelId == lastElement(colA, intMax);
	// Topbar
	isToolbar = isDockingToolbar(state, panelId);
	toolbarThickness = extractStruct(pstyle, MDToolbarThickness(dockingItemHeight)).thickness;
	isVerticalToolbarMobile = !contains(pstyle, MDToolbarVerticalWhenMobile());
	topBarH = if (isToolbar) dockingBarHeightToolbar else dockingBarHeightPanel;
	topBarSize = makeHSize(topBarH, isColumn || !isToolbar);
	hideTopbar = contains(pstyle, MDPanelHideTopbar());
	// Prop
	disableButton = contains(pstyle, MDPanelShowCloseBtn());
	disableExpander = contains(pstyle, MDPanelHideExpanderBtn());
	// Colorsm
	barColorFn : MColor = topBarColorFn(pTheme, state.style);
	tColorFn : MColor = titleColorFn(pTheme, pstyle);
	sepColorFn = separatorColorFn(pTheme, state.style);
	toolbarSepColorFn = toolbarHandleColorFn(pTheme, state.style);

	addTooltip = \label : string, m : Material -> MTooltip(m , MText(label, [MTooltipDesktop()]), []);
	getPanelIcon = \st : [MIconStyle] ->  {
		icon = extractStruct(pstyle, MDPanelIcon("web_asset")).icon;
		MIcon(icon, concat([tColorFn], st));
	}

	makeIconToggleButton = \boolB : DynamicBehaviour<bool>,
		iconOn : string, iconOff : string,
		tooltipOn : string, tooltipOff :string,
		iconSize: double, clickFn : () -> void,
		iconColor : MColor, fill : double -> {
			MSelect(boolB,\b -> if (b) MIconButton(iconOn, clickFn, [MIconSize(iconSize), iconColor, FillOpacity(fill), MIconButtonBorder(1.0)], []) |> (\m -> addTooltip(tooltipOn, m))
				else MIconButton(iconOff, clickFn, [MIconSize(iconSize), iconColor, FillOpacity(fill), MIconButtonBorder(1.0)], []) |> (\m -> addTooltip(tooltipOff, m))
			) |> MCenterY
	}

	linedHandle = \enableHover : bool, rotate : bool ->  makeMDockingLinedHandle(rotate, docked, state, toolbarSepColorFn, panelId, colA, enableHover, false, pTheme);

	// Drag handle
	mobileDragHandle = \rotate : bool -> {
		cursor = fif(fselect(manager.manager.dragging, FLift(\dr -> dr >= 0)), const(GrabbingCursor()), const(GrabCursor()));		
		linedHandle(true, rotate) 
		|> (\m -> 
			if (dontMove) m else {
				MSelect(state.mobileSize, \ms -> {
					draggingShape = 
						TRounded(dRadius, dRadius, dRadius, dRadius, [MFill(dockingPrimaryColor), FillOpacity(dockingMobileOpacity)],
							TFixed(
								ms[panelId].width, 
								if (getValue(getValue(state.expanded)[panelId])) ms[panelId].height else dockingBarHeightPanel
							)
						);						
					dsRotated = draggingShape |> (\ds -> if (isToolbar && isVerticalToolbarMobile) TRotate90(ds) else ds);	
					positionCorrection = if (isToolbar) zeroPoint else Point(-(ms[panelId].width / 2.0) + dockingTopBarHandleWidth, 0.0);
					// Draggable handle
					MDraggable(panelId, m, [
						TDragShape(TTranslate(const(positionCorrection), dsRotated)),
						TCursorShape(DynamicCursor(cursor))
					])
				})
			}
		)
		|> (\m -> if (rotate) MCenterX(m) else MCenterY(m))
	}

	// Panel's buttons
	topbarButtonsA = extractStruct(pstyle, MDPanelTopbarButtons([])).buttons;
	topbarButtons = topbarButtonsA != [];
	topbarCustomButtonsA = map(extractStruct(pstyle, MDPanelTopbarCustomButtons([])).buttons, \btn -> btn |> MCenterY);
	topbarCustomButtons = topbarCustomButtonsA != [];
	panelButtonsA = map(topbarButtonsA, \btn -> {
		clickedB = make(false);
		switch (btn) {
			MDPanelCustomToggleButton(ic, tt, clkFn, st) : {
				btnColor = extractStruct(st, tColorFn);
				makeIconToggleButton(clickedB, ic, ic, tt, tt, dockingTopBarIconSize, clkFn, btnColor, 0.5);
			}
			default: MEmpty();
		} |> MCenterY

	});

	// TopBar Content
	panelTopBarButtons = {
		MBaselineColsA([
			getPanelIcon([MIconSize(dockingTopBarIconSize), FillOpacity(dockingTitleOpacity)])
				|> MBorderStart(10.0)
				|> MCenterY,
			MEllipsisText(title, [tColorFn, dockingTitleFont, MMinWidth(minTitleEllipsisWidth)]) 
				|> MBorderStart(10.0)
				|> MCenterY,
			TFillX(),
			MBaselineColsA(concat(topbarCustomButtonsA, [])) |> MCenterY |> showIf(topbarCustomButtons),
			MBaselineColsA(panelButtonsA) |> MCenterY |> showIf(topbarButtons),
			MSeparator(false) |> MBorderTopBottom(8.0) |> MBorderLeftRight(4.0) |> MCenterY |> showIf(topbarCustomButtons || topbarButtons),
			if (disableButton)
				MIconButton("close", \ -> next(enabled, false), [MIconSize(dockingTopBarIconSize - 4.0), tColorFn, MIconButtonBorder(1.0), FillOpacity(0.5)], [])
					|> MBorderStart(6.0)
					|> (\m -> addTooltip("hide panel", m))
					|> MCenterY
			else TEmpty(),
			TFixed(4.0, 0.0),

			if (disableExpander)
				TEmpty()
			else
				makeIconToggleButton(
					expanded,
					"keyboard_arrow_up",
					"keyboard_arrow_down",
					"collapse panel",
					"expand panel",
					dockingTopBarIconSize,
					\ -> {
						reverseBehaviour(expanded);
						// next(state.dock, getValue(state.dock)); //force redraw (should be used for mobile)
					},
					tColorFn,
					0.5
				) |> showIf(isColumn || !docked),
			TFixed(8.0, 0.0)
		])
		|> (\m -> if (docked) m else MGroup2(m, mobileDragHandle(!isColumn)))
	}

	dockedTopBar = \isSideExpanded : bool  -> {
		MAvailable(
			MGroup([
				// Topbar background
				if (isToolbar) MEmpty() else {
					if (isColumn) {
						if (isSideExpanded) {
							MIfLazy(expanded,\e -> 
								if (e) TRounded(dRadius, dRadius, 0.0, 0.0, [MFill(barColorFn), FillOpacity(1.0)], TFillXH(topBarH))
									else TRounded(dRadius, dRadius, dRadius, dRadius, [MFill(barColorFn)], TFillXH(topBarH))
							)
						} else {
							isHovering = make(false);
							MInteractive(
								[
									TMouseInside(isHovering, false)
								],
								MSelect(fselect2(manager.manager.dragging, isHovering, FLift2(\dr, h -> if (dr > 0) false else h)), \b -> {
									TRounded4(dRadius, [MFill(if (b) dockingDropLineHoverColor else barColorFn), FillOpacity(if (b) 0.8 else 1.0)], TFillXH(topBarH)) 	
								})
							) |> (\m -> addTooltip(title + " panel", m))
						}

					} else {				
						TRectangle([MFill(barColorFn), /*FillOpacity(0.0)*/], TFillXH(topBarH))
					}
				},
				// Topbar content
				if (isToolbar) linedHandle(true, isColumn) else  panelTopBarButtons |> showIf(isSideExpanded)
				
			]), topBarSize
		) |> showIf(!hideTopbar);
	};

	mobileTopBar =
		if (isToolbar) mobileDragHandle(isColumn) else {
			MAvailable(
				MGroup([
					MSelect(expanded,\e -> if (e) TRounded(dRadius, dRadius, 0.0, 0.0, [MFill(barColorFn)], TFillXY())
						else TRounded(dRadius, dRadius, dRadius, dRadius, [MFill(barColorFn)], TFillXY())	
					),
					if (isSameStructType(getValue(state.content)[panelId], MDToolbarContent([])))
						MCenterIn(linedHandle(false, isColumn), TFillXH(topBarH))
					else panelTopBarButtons			
				]),
				TFillXH(topBarH)
			);
		}

	MSelect(getValue(state.sideExpanded)[panelId], \se -> {
		if (se) {
			if (docked) dockedTopBar(se) else mobileTopBar;
		} else {
			dockedTopBar(se);
		}
	});
}

makeMovablePanel(state : MDockingState, panelId : int, cursorPositionA : DynamicBehaviour<[Point]>) -> Material {
	manager = state.manager;
	itemId = makeTropicTag(manager);
	dockA = state.dock;
	groupA = state.group;
	enabled = getValue(state.enabled)[panelId];
	expanded = getValue(state.expanded)[panelId];
	position = getValue(state.positions)[panelId];
	pstyle = concat(state.style, getValue(state.panelStyle)[panelId]);
	isVerticalToolbarMobile = !contains(pstyle, MDToolbarVerticalWhenMobile());
	cacheEnabled = extractStruct(state.style, MDockingEnableLoadAndStoreCache("", false)).cacheEnabled;
	dRadius = getDockingRadius(state.style);

	
	// Theme
	darkTheme = contains(pstyle, MDPanelForceDarkTheme());
	lightTheme = contains(pstyle, MDPanelForceLightTheme());
	mobileTheme = if (darkTheme) const(false) else if (lightTheme) const(true) else manager.white;

	resizePressed = make(false);
	isResizing = make(false);
	isHovering = make(false);
	dContent = makeDockingPanelContent(state, panelId, true, isVerticalToolbarMobile, resizePressed, isHovering, pstyle);

	isToolbar = isDockingToolbar(state, panelId);
	topBarH = if (isToolbar) dockingBarHeightToolbar else dockingBarHeightPanel;

	// Size
	size = getValue(state.size)[panelId];
	minWidth = size.width;
	minHeight = size.height + topBarH;

	msize = getValue(state.mobileSize)[panelId];
	width = msize.width;
	height = msize.height + topBarH;

	disableButton = contains(pstyle, MDPanelShowCloseBtn());

	mouseXyLocal = make(zeroPoint);
	dragPressed = make(false);
	tempWH = make(WidthHeight(width, height));

	resizablePanel = \c : Material, lg : bool -> {	
		addShadow = \m : Material -> {
			MShadowShape(const(4.0), m, 
				TropicShape(
					TRounded4(dRadius, [MFill(panelBgColorFn(lg, pstyle))], TFillXY())
				)
			)
		}
		panelTopBar = makePanelTopBar(false, panelId, [], state, !isVerticalToolbarMobile, lg);
		 
		MConstruct([
				makeSubscribe2(isResizing, \rs -> {
					if (!rs) {
					// update mobile size
					next(state.mobileSize, replace(getValue(state.mobileSize), panelId , getValue(tempWH)));
				}
			})
		],
		MInteractive([TMouseXY(mouseXyLocal)],
			if (isToolbar) {
				toolbarSize = TFixed(width, size.height + topBarH) |> (\m -> if (!isVerticalToolbarMobile) m else TRotate90(m));
					[
						panelTopBar,
						c
					]
					|> (\m -> if (isVerticalToolbarMobile) MCols(m) else MLines(m))
					|> addShadow
					|> (\m -> MCopySize(m, \sz -> MAvailable(m,	sz), true)) // fix for zero-size fillers
					|> (\m -> MAvailable(m,	toolbarSize))
			} else {
				MSelect(expanded,\e -> {
					MAvailable(
						MLines2(
							panelTopBar,
							if (e) c else TEmpty() 
						)
						|> addShadow,
						if (e) TSized(tempWH) else TSelect(tempWH, \wh ->  TFixed(wh.width, dockingBarHeightPanel)),
					)
				})	
			}
		))
	}

	movablePanel = \lg -> {
		MConstruct([
			makeSubscribe(dragPressed, \p -> {
				if (p) next(cursorPositionA, replace(getValue(cursorPositionA), panelId, getValue(mouseXyLocal)));
			})],
			resizablePanel(dContent, lg)
		)
		|> (\m-> MInteractive([TMouseDownGhost(dragPressed)], m))
		|> (\m->
			MMovable(
				m,
				TFillXY(),
				[
					MMovableCustomCursor(MoveCursor()),
					MMovableDontPassClicks(),
					MMovablePosition(position)
				]
			)
		)
	}

	MConstruct([
		makeSubscribe2(isResizing, \rs -> { 
			if (!rs) {
				// Update mobile size only (do not affect dockedSize)
				updateH(state.mobileSize, panelId,  getValue(tempWH).height - topBarH);
				updateW(state.mobileSize, panelId,  getValue(tempWH).width);
			}
		}),
		makeSubscribe2(resizePressed, \p -> {
			if (p) {
				addMInteractionItemId(manager, itemId);
				next(isResizing, true);
			} else {
				if (getValue(isResizing)) next(isResizing, false);
			}
		}),
		makeSubscribe(mouseXyLocal, \mxy -> {
			if (isCurrentMInteractionItemId(manager, itemId) && getValue(isResizing)) {
				rtlCorrection = if (getDefaultRtl()) 1.0 else 1.0;
				blockOtherMInteractionItemIds(manager, itemId);
				nextDistinct(tempWH, WidthHeight(getValue(tempWH).width, max(minHeight, mxy.y)));
				nextDistinct(tempWH, WidthHeight(max(minWidth, rtlCorrection * mxy.x), getValue(tempWH).height));
			}
		})
	],	
	MSelect2(dockA, mobileTheme, \d, lg -> {
		if (d[panelId].areaId < 0) {
			next(getValue(state.sideExpanded)[panelId], true);
			MShowLazy(enabled, \ -> movablePanel(lg));
		} else MEmpty();	
	}))
}

makeDockedPanel(isColumn : bool, colA : [int], state : MDockingState, panelId : int, style : [MDockingStyle]) -> Material {
	manager = state.manager;
	pstyle = concat(state.style, getValue(state.panelStyle)[panelId]);
	dontMove  = contains(pstyle, MDPanelDontMove());
	isToolbar = isDockingToolbar(state, panelId);
	toolbarThickness = extractStruct(pstyle, MDToolbarThickness(dockingItemHeight)).thickness;
	isVerticalToolbarMobile = !contains(pstyle, MDToolbarVerticalWhenMobile());
	isEndAligned = getValue(extractStruct(pstyle, MDToolbarEndAlign(make(false))).endAlign);
	fillSpace = contains(pstyle, MDToolbarFullSizeFixed());
	dRadius = getDockingRadius(state.style);
	
	// Order
	isFirstPanel = panelId == firstElement(colA, intMax);
	isLastPanel = panelId == lastElement(colA, intMax);

	// Expanded
	expanded = getValue(state.expanded)[panelId];
	sideExpanded = getValue(state.sideExpanded)[panelId];
	enabled = getValue(state.enabled)[panelId];
	
	// Theme
	darkTheme = contains(pstyle, MDPanelForceDarkTheme());
	lightTheme = contains(pstyle, MDPanelForceLightTheme());
	dockedTheme = if (darkTheme) const(false) else if (lightTheme) const(true) else manager.white;
	toolbarSepColorFn = toolbarHandleColorFn(fgetValue(dockedTheme), state.style);


	// Panel's content
	dContent = makeDockingPanelContent(state, panelId, false, !isColumn, make(false), make(false), pstyle);
	dPanel = \lg : bool -> {
		if (isToolbar) {
			dContent 
		} else {
			MSelect(expanded, \e -> {
				croppedContent = MCropSize(TFillXY(), dContent);

				if (isColumn) {
					if (e) croppedContent else TFillXH(dockingCollapsedSeparatorH);
				} else	croppedContent;

			}) 
			|> (\m -> if (!isColumn) m else MShowLazy(sideExpanded, \ -> m))
		} 
	}

	MSelect(dockedTheme, \lg -> {
		[
			makePanelTopBar(true, panelId, colA, state, isColumn, lg)	
				|> (\m -> 
					if (dontMove || fillSpace) m else {
						MSelect(state.dockedSize, \ms -> {
							cursor = fif(fselect(manager.manager.dragging, FLift(\dr -> dr >= 0)), const(GrabbingCursor()), const(GrabCursor()));
							draggingShape = 
								TRounded(dRadius, dRadius, dRadius, dRadius, [MFill(dockingPrimaryColor), FillOpacity(dockingMobileOpacity)],
									TFixed(
										ms[panelId].width, 
										if (getValue(getValue(state.expanded)[panelId])) ms[panelId].height else dockingBarHeightPanel
									)
								);
							dsRotated = draggingShape |> (\ds -> if (isToolbar && isVerticalToolbarMobile) TRotate90(ds) else ds);	

							// Draggable handle
							MDraggable(panelId, m, [
								TDragShape(TTranslate(const(zeroPoint), dsRotated)),
								TCursorShape(DynamicCursor(cursor))
							])
						})
					}
				),
			dPanel(lg),
			makeMDockingLinedHandle(isColumn, true, state, toolbarSepColorFn, panelId, colA, false, true, lg)
				|> showIf(containsDockingToolbarButtons(state, colA) && isPanelFullSize(state, panelId))
		]
		|> (\r -> {
			if (isToolbar) {
				if (isColumn) MLinesA(if (isEndAligned) reverseA(r) else r)
					else MColsA(if (isEndAligned) reverseA(r) else r)
			} else MLines(r)
		})
		// Panel's BG rounded
		|> (\m -> 
			MGroup2(
				TRounded4(dRadius, [MFill(panelBgColorFn(lg, pstyle))], TFillXY()), 
				m
			)
		)
	})
}