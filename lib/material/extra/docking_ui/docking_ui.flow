import material/extra/docking_ui/internal/material_docking_ui;

export {	

	// Helpers for a docking editor

	makeMDEditor(
		// The docking state
		state : MDockingState,
		// Draw a layout for the docking editor
		layout : Material,
		// Panels in the editor
		panels : [MDPanelType]
	) -> Material;

	// Panels docked in each docking area
	MDPanelType ::= MDPanel, MDToolbar;

		MDPanel(
			// Panel's title
			title : string,
			// Where is the panbel docked 
			position : MDAreaDock,
			// Panel's content
			content : Material,
			// Starting panel size
			minSize : WidthHeight,
			// panel's style
			style : [MDockingPanelStyle]
		);

		// A toolbar is intended as a row/column of MDToolbars: no-resizable panel with buttons and menus (in general materials)
		// Unlike panels, MDtoolbar can be aligned to the start (default) or the end of the row (right/bottom), - check 'MDToolbarEndAlign' style
		// MDToolbar can be moved and docked in a different position in the same row/column, or to different rows/columns, or also undocked as mobile
		// Thickness is fixed at 48px by default but can be changed with 'MDToolbarThickness' style, check material_docking_styles.flow
		// Automatically rotate to vertical position when docked to a column
		// Use 'MDToolbarFullSizeFixed' style for a single MDToolbar that fills all available space in the area and is not dockable (alignment is ignored)
		MDToolbar(
			// Toolbar's title
			title : string,
			// Where is the panbel docked 
			position : MDAreaDock,
			// Toolbar's content
			content : [Material],
			// Toolbar's style
			style : [MDockingPanelStyle]
		);

		// NOTE: !!! Use 'areaTitle' empty to start with the panel undocked !!! 
		// If the panel is docked to MDCols, 'position' is reffered to the COL ID, if MDLines to the ROW ID
		MDAreaDock(areaTitle : string, position : int);


	// Helpers for docking areas

	// Docking cols
	makeMDCols(state : MDockingState, area : MDArea) -> Material;
	// Docking cols reversed version - Right to left
	makeMDColsR(state : MDockingState, area : MDArea) -> Material;
	// Docking lines
	makeMDLines(state : MDockingState, area : MDArea) -> Material;
	// Docking lines reversed version - Bottom to top
	makeMDLinesB(state : MDockingState, area : MDArea) -> Material;

	// Hook for docking areas in layout and styles for customizations
	MDArea(title : string, style : [MDockingAreaStyle]);


	// Helpers for layout functions

	// Left - docking layout
	makeMDockingLayoutFnL(state : MDockingState, editorContent : Material, left : MDArea) -> Material;
	// Right - docking layout
	makeMDockingLayoutFnR(state : MDockingState, editorContent : Material, right : MDArea) -> Material;
	// Left, Right - docking layout
	makeMDockingLayoutFnLR(state : MDockingState, editorContent : Material, left : MDArea, right : MDArea) -> Material;
	// Top, Left, Right - docking layout
	makeMDockingLayoutFnTLR(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea) -> Material;
	// Top, Left - docking layout
	makeMDockingLayoutFnTL(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea) -> Material;
	// Top, Right - docking layout
	makeMDockingLayoutFnTR(state : MDockingState, editorContent : Material, top : MDArea, right : MDArea) -> Material;
	// Top, Left, Right, Bottom - docking layout
	makeMDockingLayoutFnTLRB(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea, bottom : MDArea) -> Material;
}


makeMDEditor(
	state : MDockingState,
	layout : Material, 
	panels : [MDPanelType]
) -> Material {
	panelsA = mapi(panels, \j, p -> {
		panelStyle = p.style;
		areaId = lookupTreeDef(getValue(state.dockingAreas), p.position.areaTitle, -1);
		panelType2DockingPanel(areaId, j, p)
	});
	MDockingUI(state, panelsA, layout, state.style) |> (\c -> MAttachBox(c, state.editorWH))
}


panelType2DockingPanel(areaId : int, rowId : int, pt : MDPanelType) -> MDockingPanel {
	switch(pt) {
		MDPanel(t, ad, cnt, sz, st) : {
			MDockingPanel(
				t,
				MDPanelContent(cnt),
				MDock(areaId, ad.position, rowId),
				sz,
				st
			);

		}
		MDToolbar(t, p, cntA, st) : {
			MDockingPanel(
				t,
				MDToolbarContent(cntA),
				MDock(areaId, p.position, rowId),
				zeroWH,
				st
			);
		}
	}
}


makeMDCols(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title, area.style);
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	makeMDockingArea(true, state, areaId);
}
makeMDColsR(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title, concat([MDockingRightCols()], area.style));
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	makeMDockingArea(true, state, areaId)
}
makeMDLines(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title, area.style);
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	makeMDockingArea(false, state, areaId);
}
makeMDLinesB(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title, concat([MDockingBottomLines()], area.style));
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	makeMDockingArea(false, state, areaId);
}

makeMDockingLayoutFnL(state : MDockingState, editorContent : Material, left : MDArea) -> Material {
	MColsA([
		makeMDCols(state, left),
		MDContent(state, editorContent)
	]);
}

makeMDockingLayoutFnR(state : MDockingState, editorContent : Material, right : MDArea) -> Material {
	MColsA([
		MDContent(state, editorContent),
		makeMDColsR(state, right)
	]);
}

makeMDockingLayoutFnLR(state : MDockingState, editorContent : Material, left : MDArea, right : MDArea) -> Material {
	MColsA([
		makeMDCols(state, left),
		MDContent(state, editorContent),
		makeMDColsR(state, right)
	]);
}

makeMDockingLayoutFnTLR(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea) -> Material {
	MLinesA([
		makeMDLines(state, top),
		MColsA([
			makeMDCols(state, left),
			MDContent(state, editorContent),
			makeMDColsR(state, right)
		]),
	]);
}

makeMDockingLayoutFnTL(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea) -> Material {
	MLinesA([
		makeMDLines(state, top),
		MColsA([
			makeMDColsR(state, left),
			MDContent(state, editorContent)
		]),
	]);
}

makeMDockingLayoutFnTR(state : MDockingState, editorContent : Material, top : MDArea, right : MDArea) -> Material {
	MLinesA([
		makeMDLines(state, top),
		MColsA([
			MDContent(state, editorContent),
			makeMDColsR(state, right)
		]),
	]);
}

makeMDockingLayoutFnTLRB(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea, bottom : MDArea) -> Material {
	MLinesA([
		makeMDLines(state, top),
		MColsA([
			makeMDCols(state, left),
			MDContent(state, editorContent),
			makeMDColsR(state, right)
		]),
		makeMDLinesB(state, bottom)
	]);
}