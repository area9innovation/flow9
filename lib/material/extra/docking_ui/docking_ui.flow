import material/extra/docking_ui/internal/material_docking_ui;

export {	

	// Helpers for a docking editor

	makeMDEditor(
		// A label for the editor
		keyGroupName : string,
		// The docking state
		state : MDockingState,
		// Draw a layout for the docking editor
		layout : Material,
		// Panels in the editor
		panels : [MDPanelType],
		// Some docking styles
		style : [MDockingStyle]
	) -> Material;

	// Panels docked in each docking area
	MDAreaPanels(title : string, panels : [MDPanelType]);
		MDPanelType ::= MDPanel, MDToolbar, MDToolbarCustom;

			MDPanel(
				// Panel's title
				title : string,
				// Where is the panbel docked 
				position : MDAreaDock,
				// Panel's content
				content : Material,
				// Starting panel size
				minSize : WidthHeight,
				// panel's style
				style : [MDockingPanelStyle]
			);

			// Automatically rotate to vertical position when docked to a column
			MDToolbar(
				// Panel's title
				title : string,
				// Where is the panbel docked 
				position : MDAreaDock,
				// Each item is centerend in a 48 x 48 px squared box (for free-size items, use MDToolbarCustom)
				// Thickness is fixed at 48px by default but can be changed with 'MDPanelToolbarThickness' style, see material_docking_styles.flow;
				// Accordingly also the squared box size will change
				items : [Material],
				// panel's style
				style : [MDockingPanelStyle]
			);

			MDToolbarCustom(
				// Panel's title
				title : string,
				// Where is the panbel docked 
				position : MDAreaDock,
				// Toolbar's content
				content : Material,
				// Toolbar's content will take all available size, if so MDPanelEndAlign will be ignored 
				fillSpace : bool,
				// panel's style
				style : [MDockingPanelStyle]
			);


			// NOTE: !!! Use 'areaTitle' empty to start with the panel undocked !!! 
			// If the panel is docked to MDCols, 'position' points the col ID, if MDLines the row ID
			MDAreaDock(areaTitle : string, position : int);


	// Helpers for docking areas

	// Docking cols
	makeMDCols(state : MDockingState, area : MDArea) -> Material;
	// Docking cols reversed version - Right to left
	makeMDColsR(state : MDockingState, area : MDArea) -> Material;
	// Docking lines
	makeMDLines(state : MDockingState, area : MDArea) -> Material;
	// Docking lines reversed version - Bottom to top
	makeMDLinesB(state : MDockingState, area : MDArea) -> Material;

	// Hook for docking areas in layout and styles for customizations
	MDArea(title : string, style : [MDockingAreaStyle]);


	// Helpers for layout functions

	// Left, Right - docking layout
	makeMDockingLayoutFnLR(state : MDockingState, editorContent : Material, left : MDArea, right : MDArea) -> Material;
	// Top, Left, Right - docking layout
	makeMDockingLayoutFnTLR(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea) -> Material;
	// Top, Left, Right, Bottom - docking layout
	makeMDockingLayoutFnTLRB(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea, bottom : MDArea) -> Material;
}



makeMDEditor(
	keyGroupName : string,
	state : MDockingState,
	layout : Material, 
	panels : [MDPanelType],
	style : [MDockingStyle]
) -> Material {
	panelsA = mapi(panels, \j, p -> {
		panelStyle = p.style;
		areaId = lookupTreeDef(getValue(state.dockingAreas), p.position.areaTitle, -1);
		panelType2DockingPanel(areaId, j, p)
	});

	filteredStyle = removeAllStructs(style, MDockingEnableLoadAndStoreCache("", false));

	MDockingUI(state, panelsA, layout, concat(filteredStyle, [
		MDockingEnableLoadAndStoreCache(keyGroupName, true)
	]))
}


panelType2DockingPanel(areaId : int, rowId : int, pt : MDPanelType) -> MDockingPanel {
	switch(pt) {
		MDPanel(t, ad, cnt, sz, st) : {
			MDockingPanel(
				t,
				MDPanelContent(cnt),
				MDock(areaId, ad.position, rowId),
				sz,
				st
			);

		}
		MDToolbar(t, p, itms, st) : {
			MDockingPanel(
				t,
				MDPanelToolbarButtons(itms),
				MDock(areaId, p.position, rowId),
				zeroWH,
				st
			);
		}
		MDToolbarCustom(t, p, cnt, fs, st) : {
			MDockingPanel(
				t,
				MDPanelToolbarCustom(cnt),
				MDock(areaId, p.position, rowId),
				WidthHeight(0.0, if (fs) -1.0 else 0.0),
				st
			);
		}
	}
}





makeMDCols(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title);
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	MDockingArea(true, state, areaId, area.style);
}
makeMDColsR(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title);
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	MDockingArea(true, state, areaId, concat([MDockingRightCols()], area.style))
}
makeMDLines(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title);
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	MDockingArea(false, state, areaId, area.style);
}
makeMDLinesB(state : MDockingState, area : MDArea) -> Material {
	initializeDockingAreas(state, area.title);
	areaId = lookupTreeDef(getValue(state.dockingAreas), area.title, 0);
	MDockingArea(false, state, areaId, concat([MDockingBottomLines()], area.style));
}

makeMDockingLayoutFnLR(state : MDockingState, editorContent : Material, left : MDArea, right : MDArea) -> Material {
	MColsA([
		makeMDCols(state, left),
		MDContent(state, editorContent),
		makeMDColsR(state, right)
	]);
}

makeMDockingLayoutFnTLR(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea) -> Material {
	MLinesA([
		makeMDLines(state, top),
		MColsA([
			makeMDCols(state, left),
			MDContent(state, editorContent),
			makeMDColsR(state, right)
		]),
	]);
}

makeMDockingLayoutFnTLRB(state : MDockingState, editorContent : Material, top : MDArea, left : MDArea, right : MDArea, bottom : MDArea) -> Material {
	MLinesA([
		makeMDLines(state, top),
		MColsA([
			makeMDCols(state, left),
			MDContent(state, editorContent),
			makeMDColsR(state, right)
		]),
		makeMDLinesB(state, bottom)
	]);
}