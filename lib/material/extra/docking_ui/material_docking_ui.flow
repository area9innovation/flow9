import material/material;
import material/internal/types;
import material/internal/material_util;

import material/extra/docking_ui/internal/material_docking_state;
import material/extra/docking_ui/internal/material_docking_state_store;
import material/extra/docking_ui/internal/material_docking_styles;
import material/extra/docking_ui/internal/material_docking_theme;
import material/extra/docking_ui/internal/material_docking_panels;

export {

	// USAGE:
	// - Set up a dockable UI defining two main elements, "panels" and "layout", and stores layout changes into a "state".
	// - Define your panels as of array of MDockingPanels, each one differs for the content kind (MDockingPanelItem)
	// - Inizialize the MDockingState with panel's information using "makeMDockingState" function
	// - Design your layout using MDockingAreas as dockable areas.

	// NOTE:
	// - MDockingAreas can act as a "dockable MCols" or "MLines" (by "isColumn")
	// - each MDockingArea has unique id
	// - different MDockingAreas can have the same groupName
	// - the groupNames are used by MDockingPanel in the "allowedGroups" field
	// - each panel can have a vertical or horizontal orientation, but its size is defined by default as vertical
	// - when docked on cols a panel will be shown as vertical, when on lines as horizontal
	// - when mobile a panel will be vertical, but you can flip it with MDockingMobileHorizontal() style
	// - example in material/tests/test_docking_ui.flow

	MDockingUI(state : MDockingState, panels : [MDockingPanel], layout : Material, style : [MDockingStyle]) -> Material;
	MDockingArea(isColumn : bool, state : MDockingState, groupName : string, id : int, style : [MDockingStyle]) -> Material;
}

updateDockingPositions(d: int, id : int, dockA : DynamicBehaviour<[[int]]>, panelsArray : DynamicBehaviour<[[int]]>, panelsOrder : DynamicBehaviour<[int]>, isRow : DynamicBehaviour<bool>) -> void {
	tempA = make([]);
	colId = getValue(panelsOrder)[0];
	rowId = getValue(panelsOrder)[1];

	if (!fold(getValue(panelsArray), false, \acc, a -> acc || contains(a, d))) {
		if (getValue(panelsArray) != [[]]) {
			if (getValue(isRow)) next(panelsArray, replace(getValue(panelsArray), colId, insertArray(getValue(panelsArray)[colId], rowId, d)))
				else next(panelsArray, insertArray(getValue(panelsArray), colId, [d]));
		} else {
			println("error: empty panels array");
		}
	} else {
		colIndex = if (colId < length(getValue(panelsArray))) colId else (length(getValue(panelsArray)) - 1);
		prevPos = if (getValue(isRow)) elemIndex(getValue(panelsArray)[colIndex], d, -intMax) else elemIndex(getValue(panelsArray), [d], -intMax);
		if (prevPos == -intMax) {

			replaced = if (getValue(isRow)) {
				index = if (colId < length(getValue(panelsArray))) colId else (length(getValue(panelsArray)) - 1);
				replace(getValue(panelsArray), index, insertArray(getValue(panelsArray)[index], rowId, d));
			} else {
				insertArray(getValue(panelsArray), colId, [d]);
			}
			next(panelsArray, mapi(replaced, \i, item -> if (i == colId) item else removeFirst(item, d)));

		} else {
			if (getValue(isRow)) {
				updated = if (prevPos <= rowId) {
					inserted = insertArray(getValue(panelsArray)[colIndex], rowId, d);
					removeIndex(inserted, prevPos);
				} else {
					uniq(insertArray(getValue(panelsArray)[colId], rowId, d));
				};
				next(panelsArray, replace(getValue(panelsArray), colId, updated));
			} else {
				updated = if (prevPos <= colId) {
					inserted = insertArray(getValue(panelsArray), colId, [d]);
					removed = mapi(inserted, \i, item -> if (i == colId) item else removeFirst(item, d));
					removeIndex(removed, prevPos);
				} else {
					uniq(insertArray(getValue(panelsArray), colId, [d]));
				};
				next(panelsArray, updated);
			}
		}
	};
	//Update state
	next(tempA, getValue(dockA));
	iteri(getValue(panelsArray), \i, item -> {
		index = if (i < length(getValue(panelsArray))) i else length(getValue(panelsArray)) - 1;
		iteri(item, \j, itm -> next(tempA, replace(getValue(tempA), itm, [id, index, j])));
	});
	next(dockA, getValue(tempA));
}


dockingDropLine(state : MDockingState, onDrop : DynamicBehaviour<int>, panelsArray : DynamicBehaviour<[[int]]>, defPanelsOrder : [int],
	id : int, groupName : string, color : MColor, panelsOrder : DynamicBehaviour<[int]>, size : Tropic, defRow : bool, isRow : DynamicBehaviour<bool>,
	lastDropSize : DynamicBehaviour<Tropic>, defDockingCol : bool, isDockingCol : DynamicBehaviour<bool>, zorder : int) -> Material {

	manager = state.manager;
	dockA = state.dock;
	groupA = state.group;
	onHover = make(-1);
	hoverColor = dockingDropLineHoverColor;
	dropLineOpacity = dockingDropLineOpacity;
	dropLineOpacityHover = 1.0;
	hovering = make(false);

	MSelect(manager.manager.dragging, \dr ->
		if ((dr >= 0) && (dr < length(getValue(state.title))) && zorder >= getValue(manager.manager.zorder) && (dr < length(getValue(groupA))) && (contains(getValue(groupA)[dr], groupName))) {
			MGroup([
				MDropSpot2(onHover, onDrop, TRectangle([MFill(color), FillOpacity(dropLineOpacity)], size), false),
				MConstruct([
					makeSubscribe(onHover, \h -> if (h >= 0) {
							next(isDockingCol, defDockingCol);
							next(panelsOrder, [defPanelsOrder[0], defPanelsOrder[1]]);
							next(lastDropSize, size);
							next(isRow, defRow);
							// dockedLength = if (getValue(isDockingCol)) getTropicMetri cs(getValue(lastDropSize)).width else getTropicMetrics(getValue(lastDropSize)).height;
							if (/*(*/getValue(isRow) /*&& (dockedLength == getTropicMetrics(m2t(getValue(state.size)[h])).width))*/) next(hovering, true)
								else if (!getValue(isRow)) next(hovering, true)
									else next(hovering, false);
						} else next(hovering, false)
					),
					makeSubscribe(onDrop, \d -> if (d >= 0) {
						updateDockingPositions(d, id, dockA, panelsArray, panelsOrder, isRow);
					})],
					MSelect(hovering, \h -> if (h) TRectangle([MFill(hoverColor), FillOpacity(dropLineOpacityHover)], size) else TEmpty())
				)
			]);
		} else
		TRectangle([MFill(MGrey(300))], size)
	);
}

extractDockedPanelsId(d: [[int]], id : int) -> [[int]] {
	dockIdSorted = sortCustom(filter(mapi(d, \i : int, v : [int] -> if (v[0] == id) [v[1], v[2], i] else []), \item -> item != []), \v -> v, true);
	colsIdSorted = map(dockIdSorted, \item -> item[2]);
	colGroups = sortCustom(filter(uniq(map(d, \v -> if (v[0] == id) v[1] else -intMax)), \v -> v >= 0), \v -> v, true);
	filter(map(colGroups, \item -> filter(map(colsIdSorted, \c -> if (d[c][1] == item ) c else -intMax), \itm -> itm != -intMax)), \item -> item != []);
}

MDockingArea(isColumn : bool, state : MDockingState, groupName : string, id : int, style : [MDockingStyle]) -> Material {
	// println("area" + i2s(id));
	MSelect(state.size, \szs ->
		if (szs != []) {
			manager = state.manager;
			itemId = makeTropicTag(manager);
			dockA = state.dock;
			groupA = state.group;
			contentA = getValue(state.content);
			sizeA = getValue(state.size);
			dockedSizeA = getValue(state.dockedSize);
			mobileSizeA = getValue(state.mobileSize);

			onDragging = manager.manager.dragging;
			dockedPanelsGrid = make([[]]);
			onDrop = make(-1);
			order = make([0, 0]);
			isRow = make(false);
			isDockingCol = make(true);
			lastDropSize = make(TEmpty());

			highlightDrop = make(true);
			zorder = getValue(manager.manager.zorder);

			dontResize  = contains(style, MDockingDontResize());
			dontScroll  = contains(style, MDockingDontScroll());
			dontSideExpand = contains(style, MDockingDontCollapseColumn());

			isRightCol  = contains(style, MDockingRightCols());
			isBottomLine = contains(style, MDockingBottomtLines());
			dontShowSep  = contains(style, MDockingDontShowSeparators());
			fillHeightArea = contains(style, MDockingFillSpace());

			darkTheme = contains(style, MDockingForceDarkTheme());
			theme = if (darkTheme) const(false) else manager.white;
			color = extractStruct(style, MBlue(600));
			vertical = !isColumn;

			overlayColor = MOrange(500);
			overlayOpacity = 0.6;
			dropSize = extractStruct(style, MDockingDropSize(dockingDropSize)).size;
			dragSize = dockingDragSize;
			handleHeight = dropSize;
			rowSize = if (isColumn) TFillXH(dropSize) else TFillWY(dropSize);
			colSize = if (isColumn) TFillWY(dropSize) else TFillXH(dropSize);
			colSizeDrag = if (isColumn) TFillWY(dragSize) else TFillXH(dragSize);

			pad = 10.0;
			redraw = make(false);
			sideExpandedA = map(contentA,\c -> make(false));


			WA = map(contentA,\c -> make(0.0));
			WRA = map(contentA,\c -> make(0.0));
			HA = map(contentA,\c -> make(0.0));
			HRA = map(contentA,\c -> make(0.0));

			panelSizeA = make([TEmpty()]);

			// Update panelSizeA
			iteri(sizeA, \i, s -> next(panelSizeA, replace(getValue(panelSizeA), i , TLines2(s, TFillXH(dockingBarHeight)))));


			// Array of docked panels in a single resizable column/row
			makeDockedArray = \i : int, dockedPanelsCols : [[int]], singleColA : [int], resizePressedV : DynamicBehaviour<bool>, resizePressedH : DynamicBehaviour<bool>, light : bool -> {

				lastPanel = length(singleColA) - 1;
				lastCol = length(dockedPanelsCols) - 1;
				isResizing = make(false);
				mouseXyLocal = make(zeroPoint);
				mouseXyLocalR = make(zeroPoint);
				maxPanelSize = TSizeOf(TGroup(map(singleColA, \s -> if (dockedSizeA != []) dockedSizeA[s] else TEmpty())));
				dontResizeAll = fold(singleColA, true, \acc, p -> acc && contains(getValue(state.style)[p], MDockingDontResize()));
				dontSideExpandPanel = fold(singleColA, false, \acc, p -> acc || contains(getValue(state.style)[p], MDockingDontCollapsePanel()));

				panelsWidthA = map(singleColA, \s -> getTropicMetrics(getValue(state.size)[s]).width);
				dockedWidthA = map(singleColA, \s -> getTropicMetrics(getValue(state.dockedSize)[s]).width);
				mobileWidthA = map(singleColA, \s -> getTropicMetrics(getValue(state.mobileSize)[s]).width);

				maxPanelsWidth = either(maxA(panelsWidthA), -doubleMax);
				maxDockedWidth = either(maxA(dockedWidthA), -doubleMax);
				maxMobileWidth = either(maxA(mobileWidthA), -doubleMax);
				se = getValue(getValue(state.sideExpanded)[singleColA[0]]);

				currXy = make(zeroPoint);
				panelWH = makeWH();
				if (getValue(WA[i]) == 0.0) next(WA[i], maxPanelsWidth);
				if (getValue(HA[i]) == 0.0) next(HA[i], maxPanelsWidth);


				// Dropping line for rows
				makeInnerDroppingLine = \a : int, b : int, c : MColor, lg : bool, s : int -> {
					dragCorrection = if  ((dontResize || dontResizeAll) && length(dockedPanelsCols) == 1) 0.0 else dragSize;
					separatorSize = if (isColumn) {
						if (isRightCol) {
							if (a != lastCol) TSubtractGroup2(rowSize, TFixed(dropSize - dragSize, 0.0)) else TSubtractGroup2(rowSize, TFixed(dropSize + dropSize - dragCorrection, 0.0));
						} else {
							if (a != 0) TSubtractGroup2(rowSize, TFixed(dropSize - dragSize, 0.0)) else TSubtractGroup2(rowSize, TFixed(dropSize + dropSize - dragCorrection, 0.0));
						}
					} else {
						TFillWY(dropSize);
					}

					MSelect(onDragging, \dr -> {
						if ((dr >= 0) && (dr < length(getValue(groupA))) && (contains(getValue(groupA)[dr], groupName))) {
							if (isColumn) {
								if (isSameStructType(getValue(state.content)[dr][0], MDockingPanelToolbarItem("", []))) {
										dockingDropLine(state, onDrop, dockedPanelsGrid, [a, b], id, groupName, color, order, separatorSize, true, isRow, lastDropSize, true, isDockingCol, zorder)
								} else {
									if (isRightCol) {
										MOffset(dropSize - dragSize, 0.0, dockingDropLine(state, onDrop, dockedPanelsGrid, [a, b], id, groupName, c, order, separatorSize, true, isRow, lastDropSize, true, isDockingCol, zorder));
									} else {
										if (a == 0)
										MOffset(dropSize, 0.0, dockingDropLine(state, onDrop, dockedPanelsGrid, [a, b], id, groupName, c, order, separatorSize, true, isRow, lastDropSize, true, isDockingCol, zorder))
										else
										dockingDropLine(state, onDrop, dockedPanelsGrid, [a, b], id, groupName, c, order, separatorSize, true, isRow, lastDropSize, true, isDockingCol, zorder);
									}
								}

							} else {
								dockingDropLine(state, onDrop, dockedPanelsGrid, [a, b], id, groupName, color, order, separatorSize, true, isRow, lastDropSize, true, isDockingCol, zorder);
							}
						} else TEmpty()
					});
				};

				contents = \scrollingSize : Tropic, lg : bool -> {
					cnt = mapi(singleColA, \j, s -> {
						panelStyle = getValue(state.style)[s];
						enabled = getValue(state.enabled)[s];
						fillHeight = fillHeightArea || contains(panelStyle, MDockingFillSpace());

						//ENABLED
						MSelect(enabled, \e -> if (e) {
							MGroup([
								if (dockedSizeA != []) makeDockingPanel(true, state, s, groupName, isColumn, j == lastPanel, panelStyle, dropSize, make([]), sideExpandedA[i], zorder)
									else TEmpty(),

								// Dropping area overlay
								if (isColumn)
								MLines([
									makeInnerDroppingLine(i, j, dockingPrimaryColor, lg, s),
									if (se) {
										if (j == lastPanel || fillHeight) MSelect(getValue(state.expanded)[s], \ee -> if (ee) TFillY() else TEmpty())
										else TEmpty();
									} else {TEmpty();},
									if (j == lastPanel) makeInnerDroppingLine(i, j + 1, dockingPrimaryColor, lg, s) else TEmpty()
								])
								else
								MColsA([
									makeInnerDroppingLine(i, j, dockingPrimaryColor, lg, s),
									if (se) {
										if (j == lastPanel) MSelect(getValue(state.expanded)[s], \ee -> if (ee) TFillX() else TEmpty())
										else TEmpty();
									} else {TEmpty();},
									if (j == lastPanel) makeInnerDroppingLine(i, j + 1, dockingPrimaryColor, lg, s) else TEmpty()
								])
							])} else TEmpty()
						);
					});

					cntA = if (isColumn) MLines(cnt) else MColsA(cnt);
					if (dontScroll)  MCropSize(scrollingSize, cntA) else MScroll(cntA, scrollingSize, []);
				}

				//Side Expander Button
				sideExpFn = \ -> {
					iter(singleColA, \c -> reverseBehaviour(getValue(state.sideExpanded)[c]));
					reverseBehaviour(redraw);
				}

				sideExpBtnLabel = if (isRightCol) {
					if (se) "skip_next" else "skip_previous";
				} else {
					if (!se) "skip_next" else "skip_previous";
				}

				sideExpBtnItem = \lg : bool -> MGroup2(
					TRectangle([MFill(sideExpanderBgColorFn(lg, style))], TFillXH(sideExpanderButtonSize)),
					if (isRightCol) MColsA([TFillX(), MIcon(sideExpBtnLabel, [MIconSize(sideExpanderButtonSize - 2.0), dockedTitleColorFn(lg, style)]), TFixed(2.0, 2.0)])
					else MColsA([TFixed(2.0, 2.0), MIcon(sideExpBtnLabel, [MIconSize(sideExpanderButtonSize - 2.0), dockedTitleColorFn(lg, style)]), TFillX()]),
				);

				sideExpBtnItemHover = \lg : bool -> MGroup2(
					TRectangle([MFill(sideExpanderHoverColorFn(lg, style))], TFillXH(sideExpanderButtonSize)),
					if (isRightCol) MColsA([TFillX(), MIcon(sideExpBtnLabel, [MIconSize(sideExpanderButtonSize - 2.0), dockedTitleColorFn(lg, style)]), TFixed(2.0, 2.0),])
					else MColsA([TFixed(2.0, 2.0), MIcon(sideExpBtnLabel, [MIconSize(sideExpanderButtonSize - 2.0), dockedTitleColorFn(lg, style)])]),
				) ;

				sideExpanderBtn = \lg : bool -> MRawButton(sideExpBtnItem(lg), sideExpBtnItemHover(lg), sideExpBtnItem(lg), sideExpBtnItem(lg),
					"", [], [TOnClicked(sideExpFn)]);

				bgAndContentCol =\ colWidth : Transform<double> -> {
					MGroup2(
						if (se) TRectangle([MFill(bgColorFn(light, style))], TSelect(colWidth, \w  -> TFillWY(w)))
							else TRectangle([MFill(bgColorFn(light, style))], TFillWY(dockingSideCollapsedSize)),
						if (se) contents(TSelect(colWidth, \w -> TFillWY(w)), light) else contents(TFillWY(dockingSideCollapsedSize), light)
					);
				}


				bgAndContentRow =\ rowHeight : Transform<double> -> {
					MGroup2(
						if (se) TRectangle([MFill(bgColorFn(light, style))], TSelect(rowHeight, \h  -> TFillXH(h)))
							else TRectangle([MFill(bgColorFn(light, style))], TFillXH(dockingSideCollapsedSize)),
						if (se) contents(TSelect(rowHeight, \h  -> TFillXH(h)), light) else contents(TFillXH(dockingSideCollapsedSize), light)
					);
				}

				// A resizable column or row of panels
				MSelect(getValue(state.enabled)[i], \e -> {
					MConstruct([
						makeSubscribe(resizePressedH, \p -> {
							if (p) {
								addMInteractionItemId(manager, itemId);
								next(currXy, getValue(state.mouseXy));
								next(panelWH, WidthHeight(getValue(WA[i]),getValue(HA[i])));
								next(isResizing, true);
							} else {
								if (getValue(isResizing)) next(isResizing, false);
							}
						}),
						makeSubscribe(state.mouseXy, \mxy -> {
							if (isCurrentMInteractionItemId(manager, itemId) && getValue(isResizing)) {
								rtlCorrection = if (getDefaultRtl()) -1.0 else 1.0; // correction the direction of width changing depending of rtl mode
								blockOtherMInteractionItemIds(manager, itemId);
								if (isColumn) {
									if (isRightCol) nextDistinct(WA[i], max(maxPanelsWidth, getValue(panelWH).width + rtlCorrection*(getValue(currXy).x - mxy.x)))
										else nextDistinct(WA[i], max(maxPanelsWidth, getValue(panelWH).width - rtlCorrection*(getValue(currXy).x - mxy.x)));
								 } else {
									if (isBottomLine) nextDistinct(HA[i], max(maxPanelsWidth, getValue(panelWH).height + (getValue(currXy).y - mxy.y)))
										else nextDistinct(HA[i], max(maxPanelsWidth, getValue(panelWH).height - (getValue(currXy).y - mxy.y)));
								 }
							};
						}),
						// \ -> \-> println("dispose" + i2s(id)),
					],
					MInteractive([TMouseXY(mouseXyLocal)],
						MLines2(
							if ((isColumn && !dontSideExpand && !dontSideExpandPanel))  sideExpanderBtn(light) else TEmpty(),
							if (isColumn) bgAndContentCol(WA[i]) else bgAndContentRow(HA[i])
						)
					));
				});
			}

			// Dropping line for cols
			makeOuterDroppingLine = \a : int, b : int, maxLenght : int, lg : bool, resizePressedH : DynamicBehaviour<bool>, singleColA : [int] -> {
				MSelect(onDragging, \dr -> {
						if ((dr >= 0) && (dr < length(getValue(groupA))) && (contains(getValue(groupA)[dr], groupName))) {
							dockingDropLine(state, onDrop, dockedPanelsGrid, [a, b], id, groupName, color, order, colSize, false, isRow, lastDropSize, true, isDockingCol, zorder)
						} else {
							TEmpty();
						}
				});
			};

			// Cols separator
			makeOuterSeparator = \a : int, b : int, maxLenght : int, singleColA : [int], lg : bool, resizePressedH : DynamicBehaviour<bool>, bgColor : MColor -> {

				isHovering = make(false);
				dontResizeAll = fold(singleColA, true, \acc, p -> acc && contains(getValue(state.style)[p], MDockingDontResize()));

				handle = TRectangle([MFill(resizeHandleColorFn(lg, style))], if (isColumn) TFixed(dockingHandleW, dockingHandleH) else TFixed(dockingHandleH, dockingHandleW));
				draggingHandleInactive = TRectangle([MFill(separatorColorFn(lg, style))], colSizeDrag);
				draggingHandleActive = {
					MCursor(
						MoveCursor(),
						MInteractive([TMouseDown(resizePressedH), TMouseInside(isHovering, false)],
							MGroup2(
								MSelect(isHovering, \h -> {
									if (h) TRectangle([MFill(dockingPrimaryColor), FillOpacity(dockingDragHandleOpacity)], colSizeDrag)
								else TRectangle([MFill(bgColor), FillOpacity(dockingDragHandleOpacity)], colSizeDrag)
								}),
								MCenterIn(handle, colSizeDrag)
							)
						)
					);
				}
				draggingHandle = {
					if (maxLenght == 1) {
						if (dontResizeAll || dontResize) TEmpty()
							else {if (getValue(getValue(state.sideExpanded)[singleColA[0]])) draggingHandleActive else draggingHandleInactive;}
					} else {
						if (dontResizeAll || dontResize) draggingHandleInactive else {if (getValue(getValue(state.sideExpanded)[singleColA[0]])) draggingHandleActive else TEmpty();}
					}
				};
				if (isRightCol || isBottomLine) {
					if (a != maxLenght) draggingHandle else TEmpty();
				} else {
					if (a != 0) draggingHandle else TEmpty();
				}
			};

			MSelect(redraw, \r -> {
				MSelect(dockA, \d -> {
					dockedPanelsCols = extractDockedPanelsId(d, id);
					next(dockedPanelsGrid, dockedPanelsCols);

					if (dockedPanelsCols != []) {

					droppingArea=
						mapi(dockedPanelsCols, \i, singleColA -> {
							lastPanel = length(singleColA) - 1;
							resizePressedV = make(false);
							resizePressedH = make(false);
							isResizing = make(false);
							mouseXyLocal = make(zeroPoint);
							mouseXyLocalR = make(zeroPoint);
							l = length(dockedPanelsCols);

							containsDark = fold(singleColA, false, \acc, a -> acc || contains(getValue(state.style)[a], MDockingForceDarkTheme()));
							containsLight = fold(singleColA, false, \acc, a -> acc || contains(getValue(state.style)[a], MDockingForceLightTheme()));

							maxPanelSize = TSizeOf(TGroup(map(singleColA, \s -> if (dockedSizeA != []) dockedSizeA[s] else TEmpty())));

							panelsWidthA = map(singleColA, \s -> getTropicMetrics(getValue(state.size)[s]).width);
							dockedWidthA = map(singleColA, \s -> getTropicMetrics(getValue(state.dockedSize)[s]).width);
							mobileWidthA = map(singleColA, \s -> getTropicMetrics(getValue(state.mobileSize)[s]).width);

							panelsHeightA = map(singleColA, \s -> getTropicMetrics(getValue(state.size)[s]).height);
							dockedHeightA = map(singleColA, \s -> getTropicMetrics(getValue(state.dockedSize)[s]).height);
							mobileHeightA = map(singleColA, \s -> getTropicMetrics(getValue(state.mobileSize)[s]).height);

							maxPanelsWidth = either(maxA(panelsWidthA), -doubleMax);
							maxDockedWidth = either(maxA(dockedWidthA), -doubleMax);
							maxMobileWidth = either(maxA(mobileWidthA), -doubleMax);

							dontResizeAll = fold(singleColA, true, \acc, p -> acc && contains(getValue(state.style)[p], MDockingDontResize()));
							isToolbarItem = isSameStructType(getValue(state.content)[singleColA[0]][0], MDockingPanelToolbarItem("", []));

							//Side expanded state of panels
							se = getValue(getValue(state.sideExpanded)[singleColA[0]]);
							iter(singleColA, \c -> nextDistinct(getValue(state.sideExpanded)[c], se));

							colSpace = \k : double, idx : int -> {
								psize = TCols2(maxPanelSize, TFillWY(dragSize * k));
								if (isColumn) {
									if (se) TSelect(WA[i], \w -> TFillWY(w  + (dragSize * k)))
										else TFillWY(dockingSideCollapsedSize + (dragSize * k));
								} else {
									if (se) TSelect(HA[i], \h -> TFillXH(h  + (dragSize * k)))
										else TFillXH(dockingSideCollapsedSize  + (dragSize * k));
								}
							}

							droppingAreaSpace = \idx : int, len : int -> {
								if (idx == 0 && len == 1) {if (dontResizeAll || dontResize || isToolbarItem) colSpace(0.0, idx) else colSpace(1.0, idx)}
								else if (idx == 0 && len != 1) {if (isRightCol) colSpace(0.0, idx) else colSpace(1.0, idx)}
								else if (idx != 0 && i == len - 1) colSpace(1.0, idx)
								else colSpace(1.0, idx)
							}

							// Single resizable col with dragging handles
							singleColComplete = \idx : int, len : int , lg : bool -> {
								if (idx == 0 && len == 1)
								[
									makeOuterSeparator(idx, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
									makeDockedArray(idx, dockedPanelsCols, singleColA, resizePressedV, resizePressedH, lg),
									makeOuterSeparator(idx + 1, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
								]
								else if (idx == 0 && len != 1)
								[
									makeOuterSeparator(idx, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
									makeDockedArray(idx, dockedPanelsCols, singleColA, resizePressedV, resizePressedH, lg),
									if (isRightCol || isBottomLine) TEmpty() else makeOuterSeparator(idx + 1, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
								]
								else if (idx != 0 && i == len - 1)
								[
									if (!isRightCol && !isBottomLine) TEmpty() else makeOuterSeparator(idx, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
									makeDockedArray(idx, dockedPanelsCols, singleColA, resizePressedV, resizePressedH, lg),
									makeOuterSeparator(idx + 1, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
								]
								else
								[
									if (!isRightCol && !isBottomLine) TEmpty() else makeOuterSeparator(idx, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
									makeDockedArray(idx, dockedPanelsCols, singleColA, resizePressedV, resizePressedH, lg),
									if (isRightCol || isBottomLine) TEmpty() else makeOuterSeparator(idx + 1, 0, len, singleColA, lg, resizePressedH, separatorColorFn(lg, style)),
								]
							}


							//Dropping areas over docked panels
							overlayDroppingHandles = \ idx : int, len : int, lg : bool -> {
								if (idx == 0 && len == 1)
								[
									makeOuterDroppingLine(idx, 0, len, lg, resizePressedH, singleColA),
									if (isColumn) TFillX() else TFillY(),
									makeOuterDroppingLine(idx + 1, 0, len, lg, resizePressedH, singleColA),
								]
								else if (idx == 0 && len != 1)
								[
									makeOuterDroppingLine(idx, 0, l, lg, resizePressedH, singleColA),
									if (isColumn) TFillX() else TFillY(),
									if (isRightCol) TEmpty() else makeOuterDroppingLine(idx + 1, 0, len, lg, resizePressedH, singleColA),
								]
								else if (idx != 0 && i == len - 1)
								[
									if (!isRightCol) TEmpty() else makeOuterDroppingLine(idx, 0, len, lg, resizePressedH, singleColA),
									if (isColumn) TFillX() else TFillY(),
									makeOuterDroppingLine(idx + 1, 0, len, lg, resizePressedH, singleColA),
								]
								else
								[
									if (!isRightCol) TEmpty() else makeOuterDroppingLine(idx, 0, len, lg, resizePressedH, singleColA),
									if (isColumn) TFillX() else TFillY(),
									if (isRightCol) TEmpty() else makeOuterDroppingLine(idx + 1, 0, len, lg, resizePressedH, singleColA),
								]
							}


							enabled = fmerge(map(singleColA, \sca -> getValue(state.enabled)[sca]));

							// drip
							MSelect(enabled, \e -> {
								atLeastOneEnabledInCol = fold(singleColA, false, \acc, a -> acc || getValue(getValue(state.enabled)[a]));
								atLeastOneEnabled = fold(dockedPanelsCols, false, \acc, singleColA2 -> acc ||
									fold(singleColA2, false, \acc2, a -> acc2 || getValue(getValue(state.enabled)[a])));
								dontSideExpandPanel = fold(singleColA, false, \acc, p -> acc || contains(getValue(state.style)[p], MDockingDontCollapsePanel()));

								if (atLeastOneEnabledInCol) {
									MSelect(manager.white, \ww -> {
										w = if (containsDark) false else if (containsLight) true else ww;
										MAvailable(
											if (isColumn)
											MGroup([
												MColsA(singleColComplete(i, l, w)),
												MLines2(
													if (dontSideExpand || dontSideExpandPanel) TEmpty() else TFillXH(sideExpanderButtonSize),
													MColsA(overlayDroppingHandles(i, l, w))
												)
											]) else
											MGroup([
												MLines(singleColComplete(i, l, w)),
												MLines(overlayDroppingHandles(i, l, w)),
											]),
											droppingAreaSpace(i, l)
										)
									});

								} else if (atLeastOneEnabled) {
									TEmpty();
								} else {
									// NO PANELS ENABLED
									dockingDropLine(state, onDrop, dockedPanelsGrid, [0, 0], id, groupName, color, order, colSize, false, isRow, lastDropSize, isColumn, isDockingCol, zorder);
								}
							});
						});

						if (isColumn) MColsA(droppingArea) else MLines(droppingArea);

					} else {
						// NO PANELS DOCKED
						dockingDropLine(state, onDrop, dockedPanelsGrid, [0, 0], id, groupName, color, order, colSize, false, isRow, lastDropSize, isColumn, isDockingCol, zorder);
					}
				});
			});

		} else {
			TEmpty();
		}
	);
	//|> (\f -> (MShadow(const(16.0), f)))
}

MDockingUI(state : MDockingState, panelsA : [MDockingPanel], layout : Material, style : [MDockingStyle]) -> Material {
	updateMDockingState(state, panelsA);
	manager = state.manager;
	titleA = state.title;
	panelIconA = state.panelIcon;
	contentA = state.content;
	dockA = state.dock;
	groupA = state.group;
	sizeA = state.size;
	mPositiosA = state.positions;
	expandedA = state.expanded;
	panelsStyleA = state.style;

	onDrop = make(-1);
	localPositionA = make([]);
	minimizedA = make([]);
	visibleA = make([]);
	defSizeA = make([]);
	start = make(false);
	positionScale = make(zeroPositionScale);
	zorder = getValue(manager.manager.zorder);

	iteri(panelsA, \i, p -> {
		next(localPositionA, replace(getValue(localPositionA), i , zeroPoint));
		next(panelsStyleA, replace(getValue(panelsStyleA), i , p.style));
	});

	//overlay layout
	mainDropArea = MConstruct([
		makeSubscribe(onDrop, \d -> {
			if (d >= 0) {
				pstyle = panelsA[d].style;
				width = getTropicMetrics(getValue(sizeA)[d]).width;
				height = getTropicMetrics(getValue(sizeA)[d]).height;
				posCorrection =
				if (getValue(dockA)[d][0] >= 0) {
						dx = if (d >= 0)  (width / 2.0) else 0.0; dy = 4.0; Point(dx, dy);
				} else {
					getValue(localPositionA)[d];
				}
				next(getValue(state.positions)[d], Point(
					manager.manager.xy().x  - posCorrection.x - getValue(positionScale).pos.x,
					manager.manager.xy().y - posCorrection.y - getValue(positionScale).pos.y
				));
				next(getValue(state.enabled)[d], true);
				if (getValue(dockA)[d][0] >= 0) next(dockA, mapi(getValue(dockA), \j, item -> if (j == d) [-1, item[1], item[2]] else item)); //undock panel
				next(localPositionA, replace(getValue(localPositionA), d, zeroPoint));
			}
		})
	],
	MSelect(manager.manager.dragging, \dr -> {
		if ((dr >= 0) && (dr < length(panelsA)) && zorder >= getValue(manager.manager.zorder)) MDropSpot2(make(-1), onDrop, TRectangle(interactiveRectangleStyle, TFillXY()), false) else TEmpty()
	}));

	movablePanels = mapi(panelsA, \i, p -> makeDockingPanel(false, state, i, "", false, false, [], 0.0, localPositionA, make(true), zorder));
	MInteractive([TMouseXY(state.mouseXy)],
		MGroup(concatA([
			[TPositionScale(positionScale, TRectangle([MFill(MGrey(100))], TFillXY()))],
			[MScroll(layout, TFillXY(), [])],
			movablePanels,
			[mainDropArea]
		]))
	);
}