import material/internal/filebrowser/material_filebrowser_internal;
import material/material2tropic;

export {
	// Initialization and start of filebrowser using custom style
	showCustomMFileBrowser(manager : MaterialManager, caption : string, ext : [string], buttons : [FileBrowserButtonsM], style : [FbMStyle]) -> void;

	// Allow to set Filebrowser API (initialization API by default style)
	// Example of usage fileDir, imageDir:
	// 		Some(Pair(initFolderB, true))	- value of initial folder will be taken from behaviour initFolderB each time when CallMFileBrowser is call,
	//										  up level of the filesystem structure will be limited by initFolderB path
	// 		Some(Pair(const(""), false))	- initial folder always will be "" (current working dir for c++, root website folder for flash - if possible to use them),
	//										  you can browse the filesystem back to the root element
	// 		None()							- don't initialize this API
	setMFileBrowserAPI(manager : MaterialManager, fileDir : Maybe<Pair<Behaviour<string>, bool>>, imageDir : Maybe<Pair<Behaviour<string>, bool>>, customButton : Maybe<CustomWithUpdateFBB>, style : [FbMInitStyle]) -> void;
	// Set current path for FileDialogs
	setCurrentPathForDialogs(path : string) -> void;
}

currentDialogPathM = make("");

//
setMFileBrowserAPI(manager : MaterialManager, fileDir : Maybe<Pair<Behaviour<string>, bool>>, imageDir : Maybe<Pair<Behaviour<string>, bool>>,
	customButton : Maybe<CustomWithUpdateFBB>, style : [FbMInitStyle]) -> void {
	addCustomButton = \buttons : [FileBrowserButtonsM] ->
		switch (customButton : Maybe<CustomWithUpdateFBB>) {
				Some(btn): btn |> (\res : FileBrowserButtonsM -> concat([res], buttons)) |> (\res : [FileBrowserButtonsM] -> res);
				None(): buttons;
		};

	titleOpen = if (contains(style, FbFolderSelection())) "Open folder" else "Open file";

	m2t = \m, p -> material2tropicWithParent(manager, p, m);

	maybeApply(fileDir, \_fileDir ->{
		unpair(_fileDir, \fileStartDirB, limitFileFolder -> {
			SetMFileBrowser(OpenFileDialog(), \ext, customStyle, onDone, onCancel ->
				renderCustomMFileBrowser(
					manager,
					manager.focus,
					titleOpen,
					ext,
					[CancelExtFBB(onCancel), OpenExtFBB(onDone)] |> addCustomButton, concat3(style, customStyle,
					[FbCurrentPath(currentDialogPathM), FbStartDir(getValue(fileStartDirB)), FbLimitAccessToUpperFolder(limitFileFolder)]),
					m2t
				)
			);
			SetMFileBrowser(SaveFileDialog(), \ext, customStyle, onDone, onCancel ->
				renderCustomMFileBrowser(
					manager,
					manager.focus,
					"Save file",
					ext,
					[CancelExtFBB(onCancel), SaveExtFBB(onDone)] |> addCustomButton, concat3(style, customStyle,
					[FbCurrentPath(currentDialogPathM), FbStartDir(getValue(fileStartDirB)), FbLimitAccessToUpperFolder(limitFileFolder)]),
					m2t
				)
			);
		})
	});

	maybeApply(imageDir, \_imageDir ->{
		unpair(_imageDir, \imageStartDirB, limitImageFolder -> {
			SetMFileBrowser(MediaFileDialog(), \ext, customStyle, onDone, onCancel ->
				renderCustomMFileBrowser(
					manager,
					manager.focus,
					"Insert an image",
					ext,
					[CancelExtFBB(onCancel), OpenExtFBB(onDone)] |> addCustomButton, concat3(style, customStyle,
					[FbModalWindow(false), FbStartDir(getValue(imageStartDirB)), FbLimitAccessToUpperFolder(limitImageFolder)]),
					m2t
				)
			);
		})
	});
}

// file browser dialod view
showCustomMFileBrowser(manager : MaterialManager, caption : string, ext :[string], buttons : [FileBrowserButtonsM], styles : [FbMStyle]) -> void {
	renderCustomMFileBrowser(manager, manager.focus, caption, ext, buttons, styles, \mat, p -> material2tropicWithParent(manager, p, mat));
}

setCurrentPathForDialogs(path : string) -> void {
	next(currentDialogPathM, path);
}
