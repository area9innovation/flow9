import material/material;
import pebbles/pebble_controller;

export {

	MBreadcrumb : (
		parts : Transform<[?]>,
		partCaption : (int, ?) -> string,
		goToPart : (int, ?) -> void,
		getChildren : (?) -> [?],
		style : [MBreadcrumbStyle]
	) -> Material;

	MBreadcrumbStyle ::=
		MBreadcrumbActiveStyle, MBreadcrumbInactiveStyle,
		MBreadcrumbIconStyle, MBreadcrumbIconBorder,
		MEnabled;

		MBreadcrumbActiveStyle : (style : [MTextStyle]);
		MBreadcrumbInactiveStyle : (style : [MTextStyle]);
		MBreadcrumbIconStyle : (style : [MIconStyle]);
		MBreadcrumbIconBorder : (border : double);
}

MBreadcrumb(
	parts : Transform<[?]>,
	partCaption : (int, ?) -> string,
	goToPart : (int, ?) -> void,
	getChildren : (?) -> [?],
	style : [MBreadcrumbStyle]
) -> Material {
	MGetManager(\manager -> MGetFocusGroup(\parent ->
		MBreadcrumbInternal(manager, parent, parts, partCaption, goToPart, getChildren, style)
	));
}

MBreadcrumbInternal(
	manager : MaterialManager,
	parent : MFocusGroup,
	parts : Transform<[?]>,
	partCaption : (int, ?) -> string,
	goToPart : (int, ?) -> void,
	getChildren : (?) -> [?],
	style : [MBreadcrumbStyle]
) -> Material {

	activeStyle =
		extractStruct(style,
			MBreadcrumbActiveStyle([
				MSubheading(),
				getPrimaryColor(parent)
			])
		).style;

	inactiveStyle =
		extractStruct(style,
			MBreadcrumbInactiveStyle([
				MSubheading(),
				MDefaultTextColor(getValue(manager.white))
			])
		).style;

	iconStyle =
		extractStruct(style,
			MBreadcrumbIconStyle([
				MIconSize(20.0),
				MDefaultTextColor(getValue(manager.white))
			])
		).style;

	iconBorder =
		extractStruct(style,
			MBreadcrumbIconBorder(2.0)
		).border;

	MFlexibleGrid(fselect(parts, FLift(\ps -> {
		lastIndex = length(ps) - 1;

		mapi(ps, \i, part : ? ->
			if (i == lastIndex)
				MText(partCaption(i, part), inactiveStyle)
			else {
				siblings = getChildren(part);
				breadcrumb =
					MFocusClickable(
						[MOnClick(\ -> goToPart(i, part))],
						\focus ->
							MText(partCaption(i, part), activeStyle)
					);
				arrow = MIcon("chevron_right", iconStyle);

				rightItem =
					if (siblings == [])
						arrow
					else {
						openMenu = make(false);
						
						MFocusClickable(
							[MOnClick(\ -> reverseBehaviour(openMenu))],
							\focus ->
								MMenu(
									arrow,
									mapi(siblings, \j, sibling ->
										MMenuSingleLine(
											partCaption(j, sibling),
											[MOnClick(\ -> goToPart(j, sibling))]
										)
									),
									[MOpenMenu(openMenu)]
								)
						)
				}

				MCols2(breadcrumb, rightItem |> MBorderLeftRight(iconBorder))
			}
		);
	})), [MOrdered(true)])
}
