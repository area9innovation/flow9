import material/extra/breadcrumb/breadcrumb;
import pebbles/pebble_controller;

export {
	MPebbleBreadcrumb : (
		controller : PebbleController,
		style : [MPebbleBreadcrumbStyle]
	) -> Material;

	MPebbleBreadcrumbStyle ::= MBreadcrumbStyle, MPebbleBreadcrumbCaption;
		MPebbleBreadcrumbCaption(fn : (Pebble) -> string);
}

MPebbleBreadcrumb(
	controller : PebbleController,
	style : [MPebbleBreadcrumbStyle]
) -> Material {
	MBreadcrumb(
		fselect(controller.currentPebbleB, FLift(\pebble ->
			breadcrumbPathFromPebble(pebble, controller)
		)),
		extractStruct(style, MPebbleBreadcrumbCaption(nicePebbleName)).fn,
		\pebble -> setViewFromPebble(controller, pebble),
		\pebble -> childrenOfPebble(pebble, controller),
		extractBreadcrumbStyle(style)
	);
}

// Pebble utils

breadcrumbPathFromPebble(pebble : Pebble, controller : PebbleController) -> [Pebble] {
	mapi(pebble.path, \i, part -> {
		step = Pebble( take(pebble.path, i+1) );

		either(
			findStepInPebbleHistory(step, controller),
			step
		);
	});
}

findStepInPebbleHistory(step : Pebble, controller : PebbleController) -> Maybe<Pebble> {
	mask = pebble2mask(step);

	find(
		reverseA( getValue(controller.pebbleStackB) ),
		\pebble -> pebble2mask(pebble) == mask
	);
}

childrenOfPebble(pebble : Pebble, controller : PebbleController) -> [Pebble] {
	pebbleMask = pebble2mask(pebble);

	filtermap(getTreeKeys(^(controller.dispatchers)), \candidate -> {
		if (startsWith(candidate, pebbleMask+"/")
			&& !strContains(strRight(candidate, strlen(pebbleMask)+1), "/")) {

			Some(mask2pebble(candidate));
		} else {
			None();
		}
	});
}

nicePebbleName(pebble : Pebble) -> string {
	name =
		if (pebble.path != []) {
			pebble.path[length(pebble.path)-1].name;
		} else {
			"";
		}

	strReplace(toCapitalization(name), "_", " ")
}

extractBreadcrumbStyle(style : [MPebbleBreadcrumbStyle]) -> [MBreadcrumbStyle] {
	filtermap(style, \s -> switch (s : MPebbleBreadcrumbStyle) {
		MBreadcrumbStyle() : Some(s);
		default : None();
	})
}