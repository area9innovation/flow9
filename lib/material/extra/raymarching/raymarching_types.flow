import fusion;

export {
	RMObject ::= RMScene, RMLights;
	RMScene ::= RMCompositeObject, RMPrimitive, RMUnaryOperator, RMBinaryOperator, RMMaterial, RMInteractive, RMEmpty;
		RMPrimitive ::= RMSphere, RMPlane, RMBox, RMRoundBox, RMBoxFrame, RMTorus, RMCappedTorus, RMCylinder, RMRoundedCylinder;
			RMSphere(radius : DynamicBehaviour<double>);
			RMPlane(normal : DynamicBehaviour<RMXYZ>);
			RMBox(box : DynamicBehaviour<RMXYZ>);
			RMRoundBox(box : DynamicBehaviour<RMXYZ>, radius : DynamicBehaviour<double>);
			RMBoxFrame(box : DynamicBehaviour<RMXYZ>, thickness : DynamicBehaviour<double>);
			RMTorus(revolutionRadius : DynamicBehaviour<double>, tubeRadius : DynamicBehaviour<double>);
			RMCappedTorus(revolutionRadius : DynamicBehaviour<double>, tubeRadius : DynamicBehaviour<double>, percent : DynamicBehaviour<double>);
			RMCylinder(height : DynamicBehaviour<double>, radius : DynamicBehaviour<double>);
			RMRoundedCylinder(height : DynamicBehaviour<double>, radius : DynamicBehaviour<double>, radiusRounded : DynamicBehaviour<double>);
		RMCompositeObject(
			object : RMPrimitive,
			name : string,
			color : RMBaseMaterial,
			materialProperties : [RMMaterialProperties],
			position : DynamicBehaviour<RMCoordinate>,
			trigger : DynamicBehaviour<RMTrigger>
		);
		RMCompositeLight(size : double, name : string, color : int, position : RMCoordinate);
		RMUnaryOperator ::= RMSTranslate;
			RMSTranslate(object : RMScene, d : DynamicBehaviour<RMCoordinate>);
		RMBinaryOperator ::= RMUnion2, RMUnion, RMIntersection2, RMIntersection, RMSubtraction2, RMSubtraction, RMSmoothOperators;
		RMSmoothOperators ::= RMSmoothUnion2, RMSmoothUnion, RMSmoothIntersection2, RMSmoothIntersection, RMSmoothSubtraction2, RMSmoothSubtraction;
			RMUnion2(object1 : RMScene, object2 : RMScene);
			RMUnion(objects : [RMScene]);
			RMIntersection2(object1 : RMScene, object2 : RMScene);
			RMIntersection(objects : [RMScene]);
			RMSubtraction2(object1 : RMScene, object2 : RMScene); //order matters
			RMSubtraction(objects : [RMScene]); //order matters
			RMSmoothUnion2(object1 : RMScene, object2 : RMScene, k : DynamicBehaviour<double>);
			RMSmoothUnion(objects : [RMScene], k : DynamicBehaviour<double>); //order matters
			RMSmoothIntersection2(object1 : RMScene, object2 : RMScene, k : DynamicBehaviour<double>);
			RMSmoothIntersection(objects : [RMScene], k : DynamicBehaviour<double>); //order matters
			RMSmoothSubtraction2(object1 : RMScene, object2 : RMScene, k : DynamicBehaviour<double>); //order matters
			RMSmoothSubtraction(objects : [RMScene], k : DynamicBehaviour<double>); //order matters
		RMMaterial(object : RMScene, color : RMBaseMaterial, materialProperties : [RMMaterialProperties]);
		RMBaseMaterial ::= RMColor, RMTexture;
		RMMaterialProperties ::= RMReflect;
			RMTexture(
				texture : DynamicBehaviour<string>, //URL or base64
				parameters : DynamicBehaviour<RMTextureParameters>
			);
				RMTextureParameters (
					scale : RMTextureTilingParameter,
					translate : RMTextureTilingParameter,
					rotate : RMTextureTilingParameter,
					step : RMTextureTilingParameter
				);
				RMTextureTilingParameter(
					zx_z : double,
					zx_x : double,
					xy_x : double,
					xy_y : double,
					zy_z : double,
					zy_y : double
				);
			RMColor(color : DynamicBehaviour<int>);
			RMReflect(mixCoef : DynamicBehaviour<double>);
	RMLights ::= RMCompositeLight, RMLTranslate, RMLightMaterial, RMLight, RMPlus, RMEmpty;
		RMLTranslate(object : RMLights, d : RMCoordinate);
		RMLightMaterial(object : RMLights, color : int);
		RMLight(size : double);
		RMPlus(object1 : RMLights, object2 : RMLights);
		RMEmpty();

		RMInteractive(object : RMInteractiveObject, trigger : DynamicBehaviour<RMTrigger>);
		RMInteractiveObject ::= RMPrimitive, RMSmoothOperators;
		RMTrigger ::= RMMouseHover, RMMouseHoverIn, RMMouseHoverOut, RMMouseDownleft;
			RMMouseHover();
			RMMouseHoverIn();
			RMMouseHoverOut();
			RMMouseDownleft();

	RMSettings(
		camera : DynamicBehaviour<RMCamera>,
		showFps : DynamicBehaviour<bool>,
		firstPersonCamera : DynamicBehaviour<bool>,
		thirdPersonCameraLimits : DynamicBehaviour<Pair<double, double>>,
		firstPersonCameraLimits : DynamicBehaviour<Pair<double, double>>,
		firstPersonCameraSpeed : DynamicBehaviour<double>,
		firstPersonCameraLeftMouseButtonUnlock : DynamicBehaviour<bool>,
		backgroundColor : DynamicBehaviour<int>,
		backgroundTransparency : DynamicBehaviour<double>,
	);
	RMCamera(position : RMXYZ, lookAt : RMXYZ);

	RMCoordinate ::= RMXYZ, RMX, RMY, RMZ, RMXY, RMXZ, RMYZ;
		RMXYZ(x : double, y : double, z : double);
		RMXY(x : double, y : double);
		RMXZ(x : double, z : double);
		RMYZ(y : double, z : double);
		RMX(x : double);
		RMY(y : double);
		RMZ(z : double);

	RMIExp ::= RMICall, RMIP, RMIDouble, RMIInt, RMIBool, RMIXYZ, RMIVar, RMIConcat, RMIProperty, RMIJSObject, RMIEmpty;
		RMICall(fn : RMC, args : [RMIExp]);
		// A function, either an operator or function call
		RMC ::= RMIOp, RMIFn;
			// Operators are unary (prefix notation), binary operators, or the ? operator for ternary in GLSL syntax
			RMIOp(opName : string);
			// Function call syntax for these functions
			RMIFn(fnName : string);
		// The point to which we have to measure the distance
		RMIP();
		RMIDouble(num : double);
		RMIInt(num : int);
		RMIBool(num : bool);
		RMIXYZ(x : double, y : double, z : double);
		RMIVar(name : string);
		RMIConcat(exp1 : RMIExp, exp2 : RMIExp);
		RMIProperty(exp : RMIExp, id : int, property : RMIExp);
		RMIJSObject(properties : Tree<string, RMIExp>);
		RMIEmpty();

	makeDefaultRMTexture() -> RMTexture;
	makeDefaultRMSettings() -> RMSettings;
	makeDefaultRMCamera() -> RMCamera;
}

makeDefaultRMTexture() -> RMTexture {
	RMTexture(
		make(""),
		make(RMTextureParameters(
			RMTextureTilingParameter(1., 1., 1., 1., 1., 1.),
			RMTextureTilingParameter(0., 0., 0., 0., 0., 0.),
			RMTextureTilingParameter(0., 0., 0., 0., 0., 0.),
			RMTextureTilingParameter(1., 1., 1., 1., 1., 1.)
		))
	)
}

makeDefaultRMSettings() -> RMSettings {
	RMSettings(
		make(makeDefaultRMCamera()),
		make(false),
		make(false),
		make(Pair(-PI/2., PI/2.)), 
		make(Pair(-PI/2., PI/2.)),
		make(1.0),
		make(false),
		make(0x7f7fb3),
		make(1.0),
	)
}

makeDefaultRMCamera() -> RMCamera {
	RMCamera(RMXYZ(-10., 10., 0.), RMXYZ(0., 0., 0.))
}
