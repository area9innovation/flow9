import material/material_ui;
import material/extra/raymarching/raymarching_rm2rmi;
import material/extra/raymarching/raymarching_rmi2code;

export {
	MRaymarching(scene : RMScene, light : RMLights, settings : RMSettings) -> Material;
	MDynamicRaymarching(sceneB : Transform<RMScene>, lightB : Transform<RMLights>, settings : RMSettings) -> Material;

	makeRaymarchingMaterialTexture(material : Material, texture : DynamicBehaviour<string>) -> Material;
}

raymarchingCurrentId = ref 0;

MRaymarching(scene : RMScene, light : RMLights, settings : RMSettings) -> Material {
	MDynamicRaymarching(const(scene), const(light), settings)
}

MDynamicRaymarching(sceneB : Transform<RMScene>, lightB : Transform<RMLights>, settings : RMSettings) -> Material {
	id = ^raymarchingCurrentId;
	raymarchingCurrentId := id + 1;
	rmiScene = RMScene2RMIExp(fgetValue(sceneB), false);
	glsl = RMIExp2GLSL(rmiScene.second);
	glslSimple = RMIExp2GLSL(RMScene2RMIExp(fgetValue(sceneB), true).second);
	topLevelDistanceFunctions = rmiTree2GLSL(rmiScene.first.topLevelSmoothObjects);
	baseMaterial = RMIExp2GLSLMaterial(rmiScene.second);
	jsScene = RMIExp2JS(RMScene2RMIExpJS(fgetValue(sceneB)));
	lightGlsl = RMIExp2GLSL(RMLights2RMIExp(fgetValue(lightB)));

	cameraB = settings.camera;
	cameraPositionStr = formatString("%1, %2, %3", [
		d2s(fgetValue(cameraB).position.x),
		d2s(fgetValue(cameraB).position.y),
		d2s(fgetValue(cameraB).position.z)
	]);
	cameraLookAtStr = formatString("%1, %2, %3", [
		d2s(fgetValue(cameraB).lookAt.x),
		d2s(fgetValue(cameraB).lookAt.y),
		d2s(fgetValue(cameraB).lookAt.z)
	]);

	materialsB = make(extractMaterialsFromRMScene(fgetValue(sceneB)));
	fixCounter = \c -> if (c < 1) 1 else c;
	countMaterials = \materials -> {
		count = fold2(materials, 0, 0, \acc1, acc2, m -> switch(m.color) {
			RMTexture(texture, parameters): Pair(acc1 + 1, acc2);
			RMColor(col): Pair(acc1, acc2 + 1);
		});
		Pair(fixCounter(count.first), fixCounter(count.second))
	};
	countedMaterials = countMaterials(getValue(materialsB));

	transformationsChangesB = make(extractTransformationsBehaviours(fgetValue(sceneB)));
	transformationsB = make(extractTransformationsFromRMScene(fgetValue(sceneB)));
	objectParametersB = make(extractObjectParametersFromRMScene(fgetValue(sceneB)));
	smoothCoefficientsB = make(extractSmoothCoefficientsFromRMScene(fgetValue(sceneB)));

	webglContextLoadedB = make(false);
	fpsB = make(0);

	MConstruct(
		[
			make2Subscribe2(
				fthrottle(sceneB, 500), fthrottle(lightB, 500),
				\s, l -> {
					newRMIScene = RMScene2RMIExp(s, false);
					newTopLevelDistanceFunctions = rmiTree2GLSL(newRMIScene.first.topLevelSmoothObjects);
					materials = extractMaterialsFromRMScene(s);
					next(materialsB, materials);
					countedMaterialsChanged = countMaterials(materials);
					next(transformationsChangesB, extractTransformationsBehaviours(s));
					next(transformationsB, extractTransformationsFromRMScene(s));
					next(objectParametersB, extractObjectParametersFromRMScene(s));
					next(smoothCoefficientsB, extractSmoothCoefficientsFromRMScene(s));
					fixEmptyDistance = \str, fixStr -> if (str == "") fixStr else str;
					hostCall("recompileShader", [
						i2s(id),
						blueprint(
							"#include material/extra/raymarching/raymarching.frag",
							[
								"distanceFunction", fixEmptyDistance(RMIExp2GLSL(newRMIScene.second), "ObjectInfo(MAX_DIST, -1, -1, true, Material(vec3(0.), 0.))"),
								"simpleDistance", fixEmptyDistance(RMIExp2GLSL(RMScene2RMIExp(s, true).second), "MAX_DIST"),
								"light", RMIExp2GLSL(RMLights2RMIExp(l)),
								"baseMaterial", RMIExp2GLSLMaterial(newRMIScene.second),
								"numTextures", i2s(countedMaterialsChanged.first),
								"numColors", i2s(countedMaterialsChanged.second),
								"topLevelDistanceFunction", newTopLevelDistanceFunctions,
								"numSmooth", i2s(fixCounter(newRMIScene.first.smoothObjectsCounter)),
							]
						)
					]);
					hostCall(
						"setDistanceFunction",
						[
							i2s(id),
							formatString("(p, positions, objectParameters, smoothCoefficients, defaultDistance) => {return %1;}", [fixEmptyDistance(RMIExp2JS(RMScene2RMIExpJS(s)), "defaultDistance")])
						]
					) |> ignore;
				}
			),
			makeSubscribe2(
				fthrottle(cameraB, 500),
				\c -> {
					hostCall("setCameraPosition", [
						i2d(id),
						c.position.x,
						c.position.y,
						c.position.z
					]) |> ignore;
					hostCall("setCameraLookAt", [
						i2d(id),
						c.lookAt.x,
						c.lookAt.y,
						c.lookAt.z
					]) |> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(materialsB, FLift(\materials -> fmerge(filtermap(materials, \material -> switch(material.color) {
					RMTexture(texture, parameters): Some(texture);
					RMColor(col): None();
				})))),
				\textures -> {
					hostCall("resetTextures", [i2s(id)]) |> ignore;
					mapi(
						textures,
						\i, texture -> {
							hostCall("loadNewTexture", [i2s(id), texture])
						}
					)|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(materialsB, FLift(\materials -> fmerge(filtermap(materials, \material -> switch(material.color) {
					RMTexture(texture, parameters): Some(parameters);
					RMColor(col): None();
				})))),
				\parameters -> {
					textureParameters = mapConcat(
						parameters,
						\parameter -> concatA([
							RMTextureTilingParameter2FloatArray(parameter.scale), [0., 0.], //allignment bits
							RMTextureTilingParameter2FloatArray(parameter.translate), [0., 0.],
							RMTextureTilingParameter2FloatArray(parameter.rotate), [0., 0.],
							RMTextureTilingParameter2FloatArray(parameter.step), [0., 0.],
						])
					);
					hostCall("loadNewTextureParameters", [flow(i2s(id)), flow(textureParameters)])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(materialsB, FLift(\materials -> fmerge(filtermap(materials, \material -> switch(material.color) {
					RMTexture(texture, parameters): None();
					RMColor(color): Some(color);
				})))),
				\col -> {
					parameters = mapConcat(
						col,
						\c -> {
							h = hexColor2RMI(c);
							[h.x, h.y, h.z, 0.] //allignment bits
						}
					);
					hostCall("updateMaterialsColorParameters", [flow(i2s(id)), flow(parameters)])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(materialsB, FLift(\materials -> fmerge(map(materials, \material -> extractStruct(
					material.materialProperties,
					RMReflect(make(0.0))
				).mixCoef)))),
				\reflectivness -> {
					parameters = mapConcat(
						reflectivness,
						\r -> {
							[r, 0., 0., 0.] //allignment bits
						}
					);
					hostCall("updateMaterialsReflectivnessParameters", [flow(i2s(id)), flow(parameters)])|> ignore;
				}
			),
			\ -> addMessageEventListener(\message, origin -> {
				parsedMessage = parseJson(message);
				if (getJsonIntField(parsedMessage, "webglContextLoaded", -1) == id)
					next(webglContextLoadedB, true);

				getObjectId = \event -> getJsonIntField(parsedMessage, event, -1);
				triggers = [
					Pair(RMMouseHover(), getObjectId("mouseHoverObjectId")),
					Pair(RMMouseHoverIn(), getObjectId("mouseHoverInObjectId")),
					Pair(RMMouseHoverOut(), getObjectId("mouseHoverOutObjectId")),
					Pair(RMMouseDownleft(), getObjectId("mouseDownLeftObjectId")),
				];
				filteredTriggers = filter(triggers, \t -> t.second != -1);
				if (filteredTriggers != []) {
					topLevelObjects = RMScene2RMIExp(fgetValue(sceneB), false).first.topLevelObjects;
					iter(
						filteredTriggers,
						\t -> {
							maybeApply(
								lookupTree(topLevelObjects, t.second),
								\obj -> {
									iter(
										extractTriggersFromRMScene(obj),
										\i -> {
											next(i, t.first);
										}
									)
								}
							)
						}
					)
				}

				fps = getJsonIntField(parsedMessage, "fps", -1);
				if (fps != -1) next(fpsB, fps);

				cameraPosition = getJsonObjectField(parsedMessage, "cameraPosition");
				cameraLookAt = getJsonObjectField(parsedMessage, "cameraLookAt");

				if (length(cameraPosition.members) == 3 && length(cameraLookAt.members) == 3) {
					newCamera = RMCamera(
						RMXYZ(
							getJsonDoubleField(cameraPosition, "x", 0.),
							getJsonDoubleField(cameraPosition, "y", 0.),
							getJsonDoubleField(cameraPosition, "z", 0.)
						),
						RMXYZ(
							getJsonDoubleField(cameraLookAt, "x", 0.),
							getJsonDoubleField(cameraLookAt, "y", 0.),
							getJsonDoubleField(cameraLookAt, "z", 0.)
						)
					);
					switch(settings.camera) {
						DynamicBehaviour(v, s): nextDistinct(DynamicBehaviour(v, s), newCamera);
						ConstBehaviour(__): {}
					}
					
				}
			}),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(transformationsChangesB, FLift(fmerge)),
				\__ -> {
					transformations = getValue(transformationsB);
					preparedTransformations = map(transformations, prepareTransformations);
					hostCall("updateObjectPositions", [flow(i2s(id)), flow(preparedTransformations)])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(objectParametersB, FLift(fmerge)),
				\parameters -> {
					hostCall("updateObjectParameters", [flow(i2s(id)), flow(parameters)])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(smoothCoefficientsB, FLift(fmerge)),
				\smoothCoefficients -> {
					parameters = mapConcat(
						smoothCoefficients,
						\sc -> {
							[sc, 0., 0., 0.] //allignment bits
						}
					);
					hostCall("updateSmoothCoefficients", [flow(i2s(id)), flow(parameters)])|> ignore;
				}
			),
			makeSubscribe2Trigger(
				webglContextLoadedB,
				settings.firstPersonCamera,
				\firstPersonCamera -> {
					hostCall("toggleFirstPersonCamera", [flow(i2s(id)), flow(firstPersonCamera)])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				settings.thirdPersonCameraLimits,
				\thirdPersonCameraLimits -> {
					hostCall("changeThirdPersonCameraLimits", [
						flow(i2s(id)), 
						flow(thirdPersonCameraLimits.first), 
						flow(thirdPersonCameraLimits.second)
					])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				settings.firstPersonCameraLimits,
				\firstPersonCameraLimits-> {
					hostCall("changeFirstPersonCameraLimits", [
						flow(i2s(id)), 
						flow(firstPersonCameraLimits.first),
						flow(firstPersonCameraLimits.second)
					])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				settings.firstPersonCameraSpeed,
				\firstPersonCameraSpeed-> {
					hostCall("changeFirstPersonCameraSpeed", [flow(i2s(id)), flow(firstPersonCameraSpeed)])|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				settings.firstPersonCameraLeftMouseButtonUnlock,
				\firstPersonCameraLeftMouseButtonUnlock-> {
					hostCall("changeFirstPersonCameraLeftMouseButtonUnlock", [flow(i2s(id)), flow(firstPersonCameraLeftMouseButtonUnlock)])|> ignore;
				}
			),
			make2SubscribeTrigger(
				webglContextLoadedB,
				settings.backgroundColor,
				settings.backgroundTransparency,
				\backgroundColor, backgroundTransparency -> {
					h = hexColor2RMI(backgroundColor);
					hostCall("changeBackgroundColor", [flow(i2s(id)), flow(h.x), flow(h.y), flow(h.z), flow(backgroundTransparency)])|> ignore;
				}
			),
		],
		MGroup2(
			displayRaymarchingCanvas(
				id,
				webglContextLoadedB,
				blueprint("#include material/extra/raymarching/raymarching.js", [
					"cameraPosition", cameraPositionStr,
					"cameraLookAt", cameraLookAtStr,
					"distanceFunction", jsScene,
					"firstPersonCamera", b2s(getValue(settings.firstPersonCamera)),
				]),
				"#include material/extra/raymarching/raymarching.vert",
				blueprint("#include material/extra/raymarching/raymarching.frag", [
					"distanceFunction", glsl,
					"simpleDistance", glslSimple,
					"light", lightGlsl,
					"baseMaterial", baseMaterial,
					"numTextures", i2s(countedMaterials.first),
					"numColors", i2s(countedMaterials.second),
					"topLevelDistanceFunction", topLevelDistanceFunctions,
					"numSmooth", i2s(fixCounter(rmiScene.first.smoothObjectsCounter)),
				])
			),
			MShow(settings.showFps, MSelect(fpsB, \fps -> MText(i2s(fps) + " fps", [])))
		)
	)
}

sharedScriptInserted : ref Maybe<native> = ref None();
displayRaymarchingCanvas(id : int, webglContextLoadedB : Transform<bool>, scriptContent : string, shaderVertex : string, shaderFragment : string) -> Material {
	whB = make(WidthHeight(0.0, 0.0));
	MInspect([IAvailable(whB)], 
		MHTMLStage(whB, \stage -> {
			canvas = createElement("canvas");
			scriptGLM = createElement("script");
			scriptShaderVertex = createElement("script");
			scriptShaderFragment = createElement("script");
			script = createElement("script");

			setCanvasSize = \wh -> {
				setAttribute(canvas, "width", d2s(wh.width), true);
				setAttribute(canvas, "height", d2s(wh.height), true);
			};

			setAttribute(scriptGLM, "src", "js/glm-js.min.js", true);
			setAttribute(scriptGLM, "onload", "rayMain(" + "\"" + i2s(id) + "\"" + ")", true);
			setAttribute(canvas, "id", "rayCanvas" + i2s(id), true);
			setAttribute(canvas, "tabindex", "1", true); //allow canvas catch key events
			setCanvasSize(fgetValue(whB));
			unsSize = makeSubscribeTrigger(webglContextLoadedB, whB, \wh -> {
				setCanvasSize(wh);
				hostCall("resizeCanvas", [id])|>ignore;
			})();
			setAttribute(scriptShaderVertex, "type", "text/plain", true);
			setAttribute(scriptShaderVertex, "id", "vertex-shader" + i2s(id), true);
			setAttribute(scriptShaderVertex, "innerHTML", shaderVertex, true);
			setAttribute(scriptShaderFragment, "type", "text/plain", true);
			setAttribute(scriptShaderFragment, "id", "fragment-shader"  + i2s(id), true);
			setAttribute(scriptShaderFragment, "innerHTML", shaderFragment, false);
			setAttribute(script, "innerHTML", scriptContent, false);

			setClipStyle(stage, "overflow", "auto");

			// This script contains global storage to dipatch hostCalls between multiple contexts. So it is injected only once.
			sharedScript = onlyOnce(sharedScriptInserted, \ -> {
				shScript = createElement("script");
				setAttribute(shScript, "innerHTML", "#include material/extra/raymarching/raymarching_common.js", true);
				appendChild(stage, shScript);
				shScript;
			});

			appendChild(stage, scriptGLM);
			appendChild(stage, canvas);
			appendChild(stage, scriptShaderVertex);
			appendChild(stage, scriptShaderFragment);
			appendChild(stage, script);
			\ -> {
				unsSize();
				removeElementChild(stage, scriptGLM);
				removeElementChild(stage, canvas);
				removeElementChild(stage, scriptShaderVertex);
				removeElementChild(stage, scriptShaderFragment);
				removeElementChild(stage, script);
				removeElementChild(stage, sharedScript);
			}
		})
	)
}

extractMaterialsFromRMScene(obj : RMScene) -> [RMMaterial] {
	switch(obj) {
		RMCompositeObject(object, name, color, materialProperties, position, rotation, scale, trigger): [RMMaterial(object, color, materialProperties)];
		RMPrimitive(): [];
		RMTranslate(object, d): extractMaterialsFromRMScene(object);
		RMRotate(object, r): extractMaterialsFromRMScene(object);
		RMScale(object, s): extractMaterialsFromRMScene(object);
		RMUnion2(object1, object2): concat(extractMaterialsFromRMScene(object1), extractMaterialsFromRMScene(object2));
		RMUnion(objects): mapConcat(objects, extractMaterialsFromRMScene);
		RMIntersection2(object1, object2): concat(extractMaterialsFromRMScene(object1), extractMaterialsFromRMScene(object2));
		RMIntersection(objects): mapConcat(objects, extractMaterialsFromRMScene);
		RMSubtraction2(object1, object2): concat(extractMaterialsFromRMScene(object1), extractMaterialsFromRMScene(object2));
		RMSubtraction(objects): mapConcat(objects, extractMaterialsFromRMScene);
		RMSmoothUnion2(object1, object2, k): concat(extractMaterialsFromRMScene(object1), extractMaterialsFromRMScene(object2));
		RMSmoothUnion(objects, k): mapConcat(objects, extractMaterialsFromRMScene);
		RMSmoothIntersection2(object1, object2, k): concat(extractMaterialsFromRMScene(object1), extractMaterialsFromRMScene(object2));
		RMSmoothIntersection(objects, k): mapConcat(objects, extractMaterialsFromRMScene);
		RMSmoothSubtraction2(object1, object2, k): concat(extractMaterialsFromRMScene(object1), extractMaterialsFromRMScene(object2));
		RMSmoothSubtraction(objects, k): mapConcat(objects, extractMaterialsFromRMScene);
		RMMaterial(object, color, materialProperties): [obj];
		RMInteractive(object, trigger): extractMaterialsFromRMScene(object);
		RMEmpty(): [];
	}
}

extractTriggersFromRMScene(obj : RMScene) -> [DynamicBehaviour<RMTrigger>] {
	switch(obj) {
		RMCompositeObject(object, name, color, materialProperties, position, rotation, scale, trigger): switch(trigger) {
			DynamicBehaviour(__, __): [trigger];
			ConstBehaviour(__): [];
		};
		RMPrimitive(): [];
		RMTranslate(object, d): extractTriggersFromRMScene(object);
		RMRotate(object, r): extractTriggersFromRMScene(object);
		RMScale(object, s): extractTriggersFromRMScene(object);
		RMUnion2(object1, object2): concat(extractTriggersFromRMScene(object1), extractTriggersFromRMScene(object2));
		RMUnion(objects): mapConcat(objects, extractTriggersFromRMScene);
		RMIntersection2(object1, object2): concat(extractTriggersFromRMScene(object1), extractTriggersFromRMScene(object2));
		RMIntersection(objects): mapConcat(objects, extractTriggersFromRMScene);
		RMSubtraction2(object1, object2): concat(extractTriggersFromRMScene(object1), extractTriggersFromRMScene(object2));
		RMSubtraction(objects): mapConcat(objects, extractTriggersFromRMScene);
		RMSmoothUnion2(object1, object2, k): [];
		RMSmoothUnion(objects, k): [];
		RMSmoothIntersection2(object1, object2, k): [];
		RMSmoothIntersection(objects, k): [];
		RMSmoothSubtraction2(object1, object2, k): [];
		RMSmoothSubtraction(objects, k): [];
		RMMaterial(object, color, materialProperties): extractTriggersFromRMScene(object);
		RMInteractive(object, trigger): switch(trigger) {
			DynamicBehaviour(__, __): [trigger];
			ConstBehaviour(__): [];
		};
		RMEmpty(): [];
	}
}

extractTransformationsFromRMScene(obj : RMScene) -> [RMUnaryOperator] {
	switch(obj) {
		RMCompositeObject(object, name, color, materialProperties, position, rotation, scale, trigger): [RMTranslate(RMRotate(RMScale(RMEmpty(), scale), rotation), position)];
		RMPrimitive(): [RMScale(RMEmpty(), const(RMXYZ(1., 1., 1.)))];
		RMTranslate(object, d): map(extractTransformationsFromRMScene(object), \o -> RMTranslate(o, d));
		RMRotate(object, r): map(extractTransformationsFromRMScene(object), \o -> RMRotate(o, r));
		RMScale(object, s): map(extractTransformationsFromRMScene(object), \o -> RMScale(o, s));
		RMUnion2(object1, object2): concat(extractTransformationsFromRMScene(object1), extractTransformationsFromRMScene(object2));
		RMUnion(objects): mapConcat(objects, extractTransformationsFromRMScene);
		RMIntersection2(object1, object2): concat(extractTransformationsFromRMScene(object1), extractTransformationsFromRMScene(object2));
		RMIntersection(objects): mapConcat(objects, extractTransformationsFromRMScene);
		RMSubtraction2(object1, object2): concat(extractTransformationsFromRMScene(object1), extractTransformationsFromRMScene(object2));
		RMSubtraction(objects): mapConcat(objects, extractTransformationsFromRMScene);
		RMSmoothUnion2(object1, object2, k): concat(extractTransformationsFromRMScene(object1), extractTransformationsFromRMScene(object2));
		RMSmoothUnion(objects, k): mapConcat(objects, extractTransformationsFromRMScene);
		RMSmoothIntersection2(object1, object2, k): concat(extractTransformationsFromRMScene(object1), extractTransformationsFromRMScene(object2));
		RMSmoothIntersection(objects, k): mapConcat(objects, extractTransformationsFromRMScene);
		RMSmoothSubtraction2(object1, object2, k): concat(extractTransformationsFromRMScene(object1), extractTransformationsFromRMScene(object2));
		RMSmoothSubtraction(objects, k): mapConcat(objects, extractTransformationsFromRMScene);
		RMMaterial(object, color, materialProperties): extractTransformationsFromRMScene(object);
		RMInteractive(object, trigger): extractTransformationsFromRMScene(object);
		RMEmpty(): [];
	}
}

extractTransformationsBehaviours(obj : RMScene) -> [Behaviour<RMCoordinate>] {
	switch(obj) {
		RMCompositeObject(object, name, color, materialProperties, position, rotation, scale, trigger): [position, rotation, scale];
		RMPrimitive(): [];
		RMTranslate(object, d): arrayPush(extractTransformationsBehaviours(object), d);
		RMRotate(object, r): arrayPush(extractTransformationsBehaviours(object), r);
		RMScale(object, s): arrayPush(extractTransformationsBehaviours(object), s);
		RMUnion2(object1, object2): concat(extractTransformationsBehaviours(object1), extractTransformationsBehaviours(object2));
		RMUnion(objects): mapConcat(objects, extractTransformationsBehaviours);
		RMIntersection2(object1, object2): concat(extractTransformationsBehaviours(object1), extractTransformationsBehaviours(object2));
		RMIntersection(objects): mapConcat(objects, extractTransformationsBehaviours);
		RMSubtraction2(object1, object2): concat(extractTransformationsBehaviours(object1), extractTransformationsBehaviours(object2));
		RMSubtraction(objects): mapConcat(objects, extractTransformationsBehaviours);
		RMSmoothUnion2(object1, object2, k): concat(extractTransformationsBehaviours(object1), extractTransformationsBehaviours(object2));
		RMSmoothUnion(objects, k): mapConcat(objects, extractTransformationsBehaviours);
		RMSmoothIntersection2(object1, object2, k): concat(extractTransformationsBehaviours(object1), extractTransformationsBehaviours(object2));
		RMSmoothIntersection(objects, k): mapConcat(objects, extractTransformationsBehaviours);
		RMSmoothSubtraction2(object1, object2, k): concat(extractTransformationsBehaviours(object1), extractTransformationsBehaviours(object2));
		RMSmoothSubtraction(objects, k): mapConcat(objects, extractTransformationsBehaviours);
		RMMaterial(object, color, materialProperties): extractTransformationsBehaviours(object);
		RMInteractive(object, trigger): extractTransformationsBehaviours(object);
		RMEmpty(): [];
	}
}

prepareTransformations(obj : RMScene) -> [double] {
	switch(obj) {
		RMTranslate(object, d): {
			c = expandRMCoordinate(getValue(d));
			if (c != RMXYZ(0., 0., 0.)) {
				concat([0., c.x, c.y, c.z], prepareTransformations(object));
			} else {
				prepareTransformations(object);
			}
		}
		RMRotate(object, r): {
			c = expandRMCoordinate(getValue(r));
			if (c != RMXYZ(0., 0., 0.)) {
				concat([1., c.x, c.y, c.z], prepareTransformations(object));
			} else {
				prepareTransformations(object);
			}
		}
		RMScale(object, s): {
			c = expandRMCoordinate(getValue(s));
			if (c != RMXYZ(1., 1., 1.)) {
				concat([2., c.x, c.y, c.z], prepareTransformations(object));
			} else {
				prepareTransformations(object);
			}
		}
		default: []
	}
}

extractObjectParametersFromRMScene(obj : RMScene) -> [Transform<double>] {
	fRMX = \coord -> fselect(coord, FLift(\c -> c.x));
	fRMY = \coord -> fselect(coord, FLift(\c -> c.y));
	fRMZ = \coord -> fselect(coord, FLift(\c -> c.z));
	getPrimitiveParameters = \o -> {
		switch(o) {
			RMSphere(radius): [radius, const(0.), const(0.), const(0.)];
			RMPlane(normal): [fRMX(normal), fRMY(normal), fRMZ(normal), const(0.)];
			RMBox(box):  [fRMX(box), fRMY(box), fRMZ(box), const(0.)];
			RMRoundBox(box, radius): [fRMX(box), fRMY(box), fRMZ(box), radius];
			RMBoxFrame(box, thickness): [fRMX(box), fRMY(box), fRMZ(box), thickness];
			RMTorus(revolutionRadius, tubeRadius): [revolutionRadius, tubeRadius, const(0.), const(0.)];
			RMCappedTorus(revolutionRadius, tubeRadius, percent): [revolutionRadius, tubeRadius, fselect(percent, FLift(\p -> sin(PI * p))), fselect(percent, FLift(\p -> cos(PI * p)))];
			RMCylinder(height, radius): [height, radius, const(0.), const(0.)];
			RMRoundedCylinder(height, radius, radiusRounded): [height, fdivide(radius, const(2.)), radiusRounded, const(0.)];
		}
	};
	switch(obj) {
		RMCompositeObject(object, name, color, materialProperties, position, rotation, scale, trigger): getPrimitiveParameters(object);
		RMPrimitive(): getPrimitiveParameters(obj);
		RMTranslate(object, d): extractObjectParametersFromRMScene(object);
		RMRotate(object, r): extractObjectParametersFromRMScene(object);
		RMScale(object, s): extractObjectParametersFromRMScene(object);
		RMUnion2(object1, object2): concat(extractObjectParametersFromRMScene(object1), extractObjectParametersFromRMScene(object2));
		RMUnion(objects): mapConcat(objects, extractObjectParametersFromRMScene);
		RMIntersection2(object1, object2): concat(extractObjectParametersFromRMScene(object1), extractObjectParametersFromRMScene(object2));
		RMIntersection(objects): mapConcat(objects, extractObjectParametersFromRMScene);
		RMSubtraction2(object1, object2): concat(extractObjectParametersFromRMScene(object1), extractObjectParametersFromRMScene(object2));
		RMSubtraction(objects): mapConcat(objects, extractObjectParametersFromRMScene);
		RMSmoothUnion2(object1, object2, k): concat(extractObjectParametersFromRMScene(object1), extractObjectParametersFromRMScene(object2));
		RMSmoothUnion(objects, k): mapConcat(objects, extractObjectParametersFromRMScene);
		RMSmoothIntersection2(object1, object2, k): concat(extractObjectParametersFromRMScene(object1), extractObjectParametersFromRMScene(object2));
		RMSmoothIntersection(objects, k):  mapConcat(objects, extractObjectParametersFromRMScene);
		RMSmoothSubtraction2(object1, object2, k): concat(extractObjectParametersFromRMScene(object1), extractObjectParametersFromRMScene(object2));
		RMSmoothSubtraction(objects, k):  mapConcat(objects, extractObjectParametersFromRMScene);
		RMMaterial(object, color, materialProperties): extractObjectParametersFromRMScene(object);
		RMInteractive(object, trigger): extractObjectParametersFromRMScene(object);
		RMEmpty(): [];
	}
}

extractSmoothCoefficientsFromRMScene(obj : RMScene) -> [Transform<double>] {
	switch(obj) {
		RMCompositeObject(object, name, color, materialProperties, position, rotation, scale, trigger): [];
		RMPrimitive(): [];
		RMTranslate(object, d): extractSmoothCoefficientsFromRMScene(object);
		RMRotate(object, r): extractSmoothCoefficientsFromRMScene(object);
		RMScale(object, s): extractSmoothCoefficientsFromRMScene(object);
		RMUnion2(object1, object2): concat(extractSmoothCoefficientsFromRMScene(object1), extractSmoothCoefficientsFromRMScene(object2));
		RMUnion(objects): mapConcat(objects, extractSmoothCoefficientsFromRMScene);
		RMIntersection2(object1, object2): concat(extractSmoothCoefficientsFromRMScene(object1), extractSmoothCoefficientsFromRMScene(object2));
		RMIntersection(objects): mapConcat(objects, extractSmoothCoefficientsFromRMScene);
		RMSubtraction2(object1, object2): concat(extractSmoothCoefficientsFromRMScene(object1), extractSmoothCoefficientsFromRMScene(object2));
		RMSubtraction(objects): mapConcat(objects, extractSmoothCoefficientsFromRMScene);
		RMSmoothUnion2(object1, object2, k): arrayPush(concat(extractSmoothCoefficientsFromRMScene(object1), extractSmoothCoefficientsFromRMScene(object2)), k);
		RMSmoothUnion(objects, k): arrayPush(mapConcat(objects, extractSmoothCoefficientsFromRMScene), k);
		RMSmoothIntersection2(object1, object2, k): arrayPush(concat(extractSmoothCoefficientsFromRMScene(object1), extractSmoothCoefficientsFromRMScene(object2)), k);
		RMSmoothIntersection(objects, k): arrayPush(mapConcat(objects, extractSmoothCoefficientsFromRMScene), k);
		RMSmoothSubtraction2(object1, object2, k): arrayPush(concat(extractSmoothCoefficientsFromRMScene(object1), extractSmoothCoefficientsFromRMScene(object2)), k);
		RMSmoothSubtraction(objects, k): arrayPush(mapConcat(objects, extractSmoothCoefficientsFromRMScene), k);
		RMMaterial(object, color, materialProperties): extractSmoothCoefficientsFromRMScene(object);
		RMInteractive(object, trigger): extractSmoothCoefficientsFromRMScene(object);
		RMEmpty(): [];
	}
}

makeRaymarchingMaterialTexture(material : Material, texture : DynamicBehaviour<string>) -> Material {
	isDisplayed = make(true);
	pngFn = make(None());
	MConstruct(
		[
			makeSubscribe(pngFn, \pfn -> {
				maybeApply(
					pfn,
					\fn -> fn(\v -> {
						timer(100,\ -> next(isDisplayed, false));
						next(texture, v);
					})
				)
			})
		],
		MExtractPNG(
			MIf(
				isDisplayed,
				material,
				MEmpty()
			),
			\fn -> next(pngFn, fn)
		)
	)
}

rmiTree2GLSL(rmiScene : Tree<int, RMIExp>) -> string {
	strGlue(
		convertTreeToArray(
			rmiScene,
			\k, v -> formatString("if (id == %1) {\nresult = %2;\n}", [i2s(k), RMIExp2GLSL(v)])
		),
		" else "
	);
}