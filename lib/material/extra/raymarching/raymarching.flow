import material/material_ui;
import material/extra/raymarching/raymarching_rm2rmi;
import material/extra/raymarching/raymarching_rmi2code;

export {
	MRaymarching(id : int, scene : RMScene, light : RMLights, camera : RMCamera) -> Material;
	MDynamicRaymarching(id : int, sceneB : Transform<RMScene>, lightB : Transform<RMLights>, cameraB : Transform<RMCamera>) -> Material;

	makeRaymarchingMaterialTexture(material : Material, texture : DynamicBehaviour<string>) -> Material;
}

MRaymarching(id : int, scene : RMScene, light : RMLights, camera : RMCamera) -> Material {
	MDynamicRaymarching(id, const(scene), const(light), const(camera))
}

MDynamicRaymarching(id : int, sceneB : Transform<RMScene>, lightB : Transform<RMLights>, cameraB : Transform<RMCamera>) -> Material {
	glsl = RMIExp2GLSL(RMScene2RMIExp(fgetValue(sceneB), false));
	glslSimple = RMIExp2GLSL(RMScene2RMIExp(fgetValue(sceneB), true));
	baseMaterial = RMIExp2GLSLMaterial(RMScene2RMIExp(fgetValue(sceneB), false));
	jsScene = RMIExp2JS(RMScene2RMIExpJS(fgetValue(sceneB), RMIXYZ(0., 0., 0.)));
	lightGlsl = RMIExp2GLSL(RMLights2RMIExp(fgetValue(lightB)));

	cameraPositionStr = formatString("%1, %2, %3", [
		d2s(fgetValue(cameraB).position.x),
		d2s(fgetValue(cameraB).position.y),
		d2s(fgetValue(cameraB).position.z)
	]);
	cameraLookAtStr = formatString("%1, %2, %3", [
		d2s(fgetValue(cameraB).lookAt.x),
		d2s(fgetValue(cameraB).lookAt.y),
		d2s(fgetValue(cameraB).lookAt.z)
	]);

	texturesB = make(extractTexturesFromRMScene(fgetValue(sceneB)));

	webglContextLoadedB = make(false);

	MConstruct(
		[
			make2Subscribe2(
				fthrottle(sceneB, 500), fthrottle(lightB, 500),
				\s, l -> {
					rmiScene = RMScene2RMIExp(s, false);
					next(texturesB, extractTexturesFromRMScene(s));
					hostCall("recompileShader", [
						i2s(id),
						blueprint(
							"#include material/extra/raymarching/raymarching.frag",
							[
								"distanceFunction", RMIExp2GLSL(rmiScene),
								"simpleDistance", RMIExp2GLSL(RMScene2RMIExp(s, true)),
								"light", RMIExp2GLSL(RMLights2RMIExp(l)),
								"baseMaterial", RMIExp2GLSLMaterial(rmiScene)
							]
						)
					]);
					hostCall(
						"setDistanceFunction",
						[
							i2s(id),
							formatString("(p) => {return %1;}", [RMIExp2JS(RMScene2RMIExpJS(s, RMIXYZ(0., 0., 0.)))])
						]
					) |> ignore;
				}
			),
			makeSubscribe2(
				fthrottle(cameraB, 500),
				\c -> {
					hostCall("setCameraPosition", [
						i2d(id),
						c.position.x,
						c.position.y,
						c.position.z
					]) |> ignore;
					hostCall("setCameraLookAt", [
						i2d(id),
						c.lookAt.x,
						c.lookAt.y,
						c.lookAt.z
					]) |> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(texturesB, FLift(\textures -> fmerge(map(textures, \texture -> texture.texture)))),
				\textures -> {
					hostCall("resetTextures", [i2s(id)]) |> ignore;
					mapi(
						textures,
						\i, texture -> {
							hostCall("loadNewTexture", [i2s(id), texture])
						}
					)|> ignore;
				}
			),
			makeSubscribeTrigger(
				webglContextLoadedB,
				fsubselect(texturesB, FLift(\textures -> fmerge(map(textures, \texture -> texture.parameters)))),
				\parameters -> {
					textureParameters = mapConcat(
						parameters,
						\parameter -> concatA([
							RMTextureTilingParameter2FloatArray(parameter.scale), [0., 0.], //allignment bits
							RMTextureTilingParameter2FloatArray(parameter.translate), [0., 0.],
							RMTextureTilingParameter2FloatArray(parameter.rotate), [0., 0.],
							RMTextureTilingParameter2FloatArray(parameter.step), [0., 0.],
						])
					);
					hostCall("loadNewTextureParameters", [flow(i2s(id)), flow(textureParameters)])|> ignore;
				}
			),
			\ -> addMessageEventListener(\message, origin -> {
				parsedMessage = parseJson(message);
				if (getJsonIntField(parsedMessage, "webglContextLoaded", -1) == id)
					next(webglContextLoadedB, true);
			}),
		],
		displayRaymarchingCanvas(
			id,
			webglContextLoadedB,
			blueprint("#include material/extra/raymarching/raymarching.js", [
				"cameraPosition", cameraPositionStr,
				"cameraLookAt", cameraLookAtStr,
				"distanceFunction", jsScene,
			]),
			"#include material/extra/raymarching/raymarching.vert",
			blueprint("#include material/extra/raymarching/raymarching.frag", [
				"distanceFunction", glsl,
				"simpleDistance", glslSimple,
				"light", lightGlsl,
				"baseMaterial", baseMaterial
			])
		)
	)
}

sharedScriptInserted : ref Maybe<native> = ref None();
displayRaymarchingCanvas(id : int, webglContextLoadedB : Transform<bool>, scriptContent : string, shaderVertex : string, shaderFragment : string) -> Material {
	whB = make(WidthHeight(0.0, 0.0));
	MInspect([IAvailable(whB)], 
		MHTMLStage(whB, \stage -> {
			canvas = createElement("canvas");
			scriptGLM = createElement("script");
			scriptShaderVertex = createElement("script");
			scriptShaderFragment = createElement("script");
			script = createElement("script");

			setCanvasSize = \wh -> {
				setAttribute(canvas, "width", d2s(wh.width), true);
				setAttribute(canvas, "height", d2s(wh.height), true);
			};

			setAttribute(scriptGLM, "src", "js/glm-js.min.js", true);
			setAttribute(scriptGLM, "onload", "rayMain(" + "\"" + i2s(id) + "\"" + ")", true);
			setAttribute(canvas, "id", "rayCanvas" + i2s(id), true);
			setCanvasSize(fgetValue(whB));
			unsSize = makeSubscribeTrigger(webglContextLoadedB, whB, \wh -> {
				setCanvasSize(wh);
				hostCall("resizeCanvas", [id])|>ignore;
			})();
			setAttribute(scriptShaderVertex, "type", "text/plain", true);
			setAttribute(scriptShaderVertex, "id", "vertex-shader" + i2s(id), true);
			setAttribute(scriptShaderVertex, "innerHTML", shaderVertex, true);
			setAttribute(scriptShaderFragment, "type", "text/plain", true);
			setAttribute(scriptShaderFragment, "id", "fragment-shader"  + i2s(id), true);
			setAttribute(scriptShaderFragment, "innerHTML", shaderFragment, false);
			setAttribute(script, "innerHTML", scriptContent, false);

			setClipStyle(stage, "overflow", "auto");

			// This script contains global storage to dipatch hostCalls between multiple contexts. So it is injected only once.
			sharedScript = onlyOnce(sharedScriptInserted, \ -> {
				shScript = createElement("script");
				setAttribute(shScript, "innerHTML", "#include material/extra/raymarching/raymarching_common.js", true);
				appendChild(stage, shScript);
				shScript;
			});

			appendChild(stage, scriptGLM);
			appendChild(stage, canvas);
			appendChild(stage, scriptShaderVertex);
			appendChild(stage, scriptShaderFragment);
			appendChild(stage, script);
			\ -> {
				unsSize();
				removeElementChild(stage, scriptGLM);
				removeElementChild(stage, canvas);
				removeElementChild(stage, scriptShaderVertex);
				removeElementChild(stage, scriptShaderFragment);
				removeElementChild(stage, script);
				removeElementChild(stage, sharedScript);
			}
		})
	)
}

extractTexturesFromRMScene(obj : RMScene) -> [RMTexture] {
	switch(obj) {
		RMCompositeObject(object, name, color, materialProperties, position): switch(color) {
			RMTexture(texture, parameters): [RMTexture(texture, parameters)];
			RMColor(col): [];
		};
		RMPrimitive(): [];
		RMSTranslate(object, d): extractTexturesFromRMScene(object);
		RMUnion2(object1, object2): concat(extractTexturesFromRMScene(object1), extractTexturesFromRMScene(object2));
		RMUnion(objects): mapConcat(objects, extractTexturesFromRMScene);
		RMSmoothUnion(objects, k): mapConcat(objects, extractTexturesFromRMScene);
		RMMaterial(object, color, materialProperties): switch(color) {
			RMTexture(texture, parameters): [RMTexture(texture, parameters)];
			RMColor(col): [];
		};
		RMEmpty(): [];
	}
}

makeRaymarchingMaterialTexture(material : Material, texture : DynamicBehaviour<string>) -> Material {
	isDisplayed = make(true);
	pngFn = make(None());
	MConstruct(
		[
			makeSubscribe(pngFn, \pfn -> {
				maybeApply(
					pfn,
					\fn -> fn(\v -> {
						timer(100,\ -> next(isDisplayed, false));
						next(texture, v);
					})
				)
			})
		],
		MExtractPNG(
			MIf(
				isDisplayed,
				material,
				MEmpty()
			),
			\fn -> next(pngFn, fn)
		)
	)
}