import material/extra/raymarching/raymarching_types;
import math/math;
import ds/arrayutils;

export {
	RMScene2RMIExp(obj : RMScene, reflect : bool, simpleDistance : bool) -> RMIExp;
	RMLights2RMIExp(obj : RMLights) -> RMIExp;
	RMScene2RMIExpJS(obj : RMScene, acc : RMIXYZ) -> RMIExp;
}

RMObjectCounter(
	objectId : int,
	textureId : int,
);

RMScene2RMIExp(obj : RMScene, reflect : bool, simpleDistance : bool) -> RMIExp {
	RMScene2RMIExp0(obj, RMIXYZ(0., 0., 0.), Triple(RMIXYZ(1., 1., 1.), RMIEmpty(), 0.0), RMObjectCounter(0, 0), reflect, simpleDistance).second
}

RMScene2RMIExp0(obj : RMScene, acc : RMIXYZ, color : Triple<RMIExp, RMIExp, double>, id : RMObjectCounter, reflect : bool, simpleDistance : bool) -> Pair<RMObjectCounter, RMIExp> {
	switch(obj) {
		RMCompositeObject(object, name, material, position): {
			compositeObject = RMTranslate(RMMaterial(object, material), position);
			RMScene2RMIExp0(compositeObject, acc, color, id, reflect, simpleDistance);
		};
		RMPrimitive(): RMPrimitive2RMIExp(obj, acc, color, id, simpleDistance);
		RMTranslate(object, d): switch(object) {
			RMScene(): RMScene2RMIExp0(object, addRMIXYZ(acc, RMCoordinate2RMIXYZ(d)), color, id, reflect, simpleDistance);
			RMLights(): Pair(id, RMIEmpty());
			RMTranslate(__, __): RMScene2RMIExp0(object, addRMIXYZ(acc, RMCoordinate2RMIXYZ(d)), color, id, reflect, simpleDistance);
			RMEmpty(): Pair(id, RMIEmpty());
		};
		RMUnion2(object1, object2): {
			exp1 = RMScene2RMIExp0(object1, acc, color, id, reflect, simpleDistance);
			exp2 = RMScene2RMIExp0(object2, acc, color, exp1.first, reflect, simpleDistance);
			Pair(exp2.first, RMICall(RMIFn(if (simpleDistance) "min" else "minOI"),
				[
					exp1.second,
					exp2.second,
				]
			))
		};
		RMUnion(objects): {
			if (length(objects) > 0 ) {
				exp1 = RMScene2RMIExp0(objects[0], acc, color, id, reflect, simpleDistance);
				fold(tail(objects), exp1, \acc2, obj2 -> {
					exp2 = RMScene2RMIExp0(obj2, acc, color, acc2.first, reflect, simpleDistance);
					Pair(exp2.first, RMICall(RMIFn(if (simpleDistance) "min" else "minOI"),
						[
							acc2.second,
							exp2.second,
						]
					))
				})
			} else {
				Pair(id, RMIEmpty());
			}
		};
		RMSmoothUnion(objects, k): {
			if (length(objects) > 0 ) {
				exp1 = RMScene2RMIExp0(objects[0], acc, color, id, reflect, simpleDistance);
				fold(tail(objects), exp1, \acc2, obj2 -> {
					exp2 = RMScene2RMIExp0(obj2, acc, color, acc2.first, reflect, simpleDistance);
					Pair(exp2.first, RMICall(RMIFn(if (simpleDistance) "opSmoothUnion" else "minOIS"),
						ifArrayPush([
							acc2.second,
							exp2.second,
							RMIDouble(k),
						],
						!simpleDistance,
						RMIP()
						)
					))
				})
			} else {
				Pair(id, RMIEmpty());
			}
		};
		RMMaterial(object, mat): {
			switch(mat) {
				RMTexture(texture, scale, translate, rotate, step): RMScene2RMIExp0(
					object,
					acc,
					Triple(RMITexture(id.textureId, texture, scale, translate, rotate, step), RMIEmpty(), 0.),
					id,
					reflect,
					simpleDistance
				);
				RMColor(col): RMScene2RMIExp0(
					object,
					acc,
					Triple(hexColor2RMI(col), RMIEmpty(), 0.),
					id,
					reflect,
					simpleDistance
				);
				RMReflect(col, mixCoef): if (reflect) {
					RMScene2RMIExp0(
						object,
						acc,
						Triple(
							hexColor2RMI(col),
							RMICall(
								RMIFn("getColorReflect"),
								[
									RMIP(),
									RMICall(RMIFn("reflect"), [RMIVar("rayDirection"), RMICall(RMIFn("getObjectNormal"), [RMIP()])])
								]
							),
							mixCoef
						),
						id,
						reflect,
						simpleDistance
					)
				} else {
					RMScene2RMIExp0(
						object,
						acc,
						Triple(hexColor2RMI(col), RMIEmpty(), 0.0),
						id,
						reflect,
						simpleDistance
					)
				}
			}
		}
		RMEmpty(): Pair(id, RMIEmpty());
	}
}

RMPrimitive2RMIExp(obj : RMPrimitive, acc : RMIXYZ, color : Triple<RMIExp, RMIExp, double>, id : RMObjectCounter, simpleDistance : bool) -> Pair<RMObjectCounter, RMIExp> {
	wrapFn = if (simpleDistance) \e -> Pair(RMObjectCounter(id.objectId + 1, id.textureId), e) else \e -> addColorToRMIExp(e, id, color);
	wrapFn(
		switch(obj) {
			RMSphere(radius): RMICall(RMIOp("-"), [
				RMICall(RMIFn("length"), [
					RMICall(RMIOp("-"), [RMIP(), acc]),
				]),
				RMIDouble(radius)
			]);
			RMPlane(normal): RMICall(RMIFn("dot"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMICall(RMIFn("normalize"), [
					RMCoordinate2RMIXYZ(normal)
				])
			]);
			RMBox(box): RMICall(RMIFn("sdBox"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMCoordinate2RMIXYZ(box)
			]);
			RMRoundBox(box, radius): RMICall(RMIFn("sdRoundBox"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMCoordinate2RMIXYZ(box),
				RMIDouble(radius)
			]);
			RMBoxFrame(box, thickness): RMICall(RMIFn("sdBoxFrame"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMCoordinate2RMIXYZ(box),
				RMIDouble(thickness)
			]);
			RMTorus(revolutionRadius, tubeRadius): RMICall(RMIFn("sdTorus"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMICall(RMIFn("vec2"), [RMIDouble(revolutionRadius), RMIDouble(tubeRadius)])
			]);
			RMCappedTorus(revolutionRadius, tubeRadius, percent): RMICall(RMIFn("sdCappedTorus"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMICall(RMIFn("vec2"), [RMIDouble(sin(PI * percent)), RMIDouble(cos(PI * percent))]),
				RMIDouble(revolutionRadius),
				RMIDouble(tubeRadius)
			]);
			RMCylinder(height, radius): RMICall(RMIFn("sdCappedCylinder"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMIDouble(height),
				RMIDouble(radius)
			]);
			RMRoundedCylinder(height, radius, radiusRounded): RMICall(RMIFn("sdRoundedCylinder"), [
				RMICall(RMIOp("-"), [RMIP(), acc]),
				RMIDouble(radius / 2.),
				RMIDouble(radiusRounded),
				RMIDouble(height)
			]);
		}
	);
}

RMLights2RMIExp(obj : RMLights) -> RMIExp {
	RMLights2RMIExp0(obj, RMIXYZ(0., 0., 0.), RMIXYZ(1., 1., 1.))
}

RMLights2RMIExp0(obj : RMLights, acc : RMIXYZ, color : RMIExp) -> RMIExp {
	switch(obj) {
		RMCompositeLight(size, name, col, position): {
			compositeObject = RMTranslate(RMLightMaterial(RMLight(size), col), position);
			RMLights2RMIExp0(compositeObject, acc, color);
		};
		RMTranslate(object, d): switch(object) {
			RMScene(): RMIEmpty();
			RMLights(): RMLights2RMIExp0(object, addRMIXYZ(acc, RMCoordinate2RMIXYZ(d)), color);
			RMTranslate(__, __): RMLights2RMIExp0(object, addRMIXYZ(acc, RMCoordinate2RMIXYZ(d)), color);
			RMEmpty(): RMIEmpty();
		}
		RMLightMaterial(object, col): {
			RMLights2RMIExp0(
				object,
				acc,
				hexColor2RMI(col.color),
			);
		}
		RMLight(size): RMICall(RMIOp("*"),
			[
				RMICall(RMIFn("getLight"), [
					RMIP(),
					RMIVar("rayDirection"),
					acc,
					color,
					RMIDouble(size)
				]),
				color
			]
		);
		RMPlus(object1, object2): {
			exp1 = RMLights2RMIExp0(object1, acc, color);
			exp2 = RMLights2RMIExp0(object2, acc, color);
			RMICall(RMIOp("+"),
				[
					exp1,
					exp2,
				]
			)
		};
		RMEmpty(): RMIEmpty();
	}
}


RMScene2RMIExpJS(obj : RMScene, acc : RMIXYZ) -> RMIExp {
	switch(obj) {
		RMCompositeObject(object, name, material, position): {
			compositeObject = RMTranslate(RMMaterial(object, material), position);
			RMScene2RMIExpJS(compositeObject, acc);
		};
		RMSphere(radius): RMICall(RMIOp("-"), [
			RMICall(RMIFn("glm.length"), [
				RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc]))
			]),
			RMIDouble(radius)
		]);
		RMPlane(normal): RMICall(RMIFn("glm.dot"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMICall(RMIFn("glm.normalize"), [
				RMCoordinate2RMIXYZ(normal)
			])
		]);
		RMBox(box): RMICall(RMIFn("sdBox"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMCoordinate2RMIXYZ(box)
		]);
		RMRoundBox(box, radius): RMICall(RMIFn("sdRoundBox"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMCoordinate2RMIXYZ(box),
			RMIDouble(radius)
		]);
		RMBoxFrame(box, thickness): RMICall(RMIFn("sdBoxFrame"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMCoordinate2RMIXYZ(box),
			RMIDouble(thickness)
		]);
		RMTorus(revolutionRadius, tubeRadius): RMICall(RMIFn("sdTorus"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMICall(RMIFn("glm.vec2"), [RMIDouble(revolutionRadius), RMIDouble(tubeRadius)])
		]);
		RMCappedTorus(revolutionRadius, tubeRadius, percent): RMICall(RMIFn("sdCappedTorus"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMICall(RMIFn("glm.vec2"), [RMIDouble(sin(PI * percent)), RMIDouble(cos(PI * percent))]),
			RMIDouble(revolutionRadius),
			RMIDouble(tubeRadius)
		]);
		RMCylinder(height, radius): RMICall(RMIFn("sdCappedCylinder"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMIDouble(height),
			RMIDouble(radius)
		]);
		RMRoundedCylinder(height, radius, radiusRounded): RMICall(RMIFn("sdRoundedCylinder"), [
			RMIConcat(RMIP(), RMICall(RMIFn("['-']"), [acc])),
			RMIDouble(radius / 2.),
			RMIDouble(radiusRounded),
			RMIDouble(height)
		]);
		RMTranslate(object, d): switch(object) {
			RMScene(): RMScene2RMIExpJS(object, addRMIXYZ(acc, RMCoordinate2RMIXYZ(d)));
			RMLights(): RMIEmpty();
			RMTranslate(__, __): RMScene2RMIExpJS(object, addRMIXYZ(acc, RMCoordinate2RMIXYZ(d)));
			RMEmpty(): RMIEmpty();
		};
		RMUnion2(object1, object2): RMICall(RMIFn("Math.min"),
			[
				RMScene2RMIExpJS(object1, acc),
				RMScene2RMIExpJS(object2, acc),
			]
		);
		RMUnion(objects): {
			if (length(objects) > 0 ) {
				exp1 = RMScene2RMIExpJS(objects[0], acc);
				fold(tail(objects), exp1, \acc2, obj2 -> {
					exp2 = RMScene2RMIExpJS(obj2, acc);
					RMICall(RMIFn("Math.min"),
						[
							acc2,
							exp2,
						]
					)
				})
			} else {
				RMIEmpty();
			}
		};
		RMSmoothUnion(objects, k): {
			if (length(objects) > 0 ) {
				exp1 = RMScene2RMIExpJS(objects[0], acc);
				fold(tail(objects), exp1, \acc2, obj2 -> {
					exp2 = RMScene2RMIExpJS(obj2, acc);
					RMICall(RMIFn("opSmoothUnion"),
						[
							acc2,
							exp2,
							RMIDouble(k)
						]
					)
				})
			} else {
				RMIEmpty();
			}
		};
		RMMaterial(object, col): RMScene2RMIExpJS(object, acc);
		RMEmpty(): RMIEmpty();
	}
}

RMCoordinate2RMIXYZ(c : RMCoordinate) -> RMIXYZ {
	switch(c) {
		RMXYZ(x, y, z): RMIXYZ(x, y, z);
		RMXY(x, y): RMIXYZ(x, y, 0.);
		RMXZ(x, z): RMIXYZ(x, 0., z);
		RMYZ(y, z): RMIXYZ(0., y, z);
		RMX(x): RMIXYZ(x, 0., 0.);
		RMY(y): RMIXYZ(0., y, 0.);
		RMZ(z): RMIXYZ(0., 0., z);
	}
}

addRMIXYZ(c1 : RMIXYZ, c2 : RMIXYZ) -> RMIXYZ {
	RMIXYZ(c1.x + c2.x, c1.y + c2.y, c1.z + c2.z)
}

addColorToRMIExp(exp : RMIExp, id : RMObjectCounter, color : Triple<RMIExp, RMIExp, double>) -> Pair<RMObjectCounter, RMIProperty> {
	plainColor = switch (color.first) {
		RMIXYZ(x, y, z): Some(color.first);
		default: None();
	}
	isTexture = switch (color.first) {
		RMITexture(__, __, __, __, __, __): true;
		default: false;
	}
	Pair(
		RMObjectCounter(
			id.objectId + 1,
			id.textureId + b2i(isTexture)
		),
		RMIProperty(
			RMICall(
				RMIFn("ObjectInfo"),
				[
					exp,
					RMIInt(id.objectId),
					RMIInt(if (isTexture) id.textureId else -1),
					RMICall(
						RMIFn("Material"),
						[
							eitherMap(plainColor, idfn, RMIXYZ(0., 0., 0.)),
							RMIDouble(color.third)
						]
					)
				]
			),
			id.objectId,
			if (color.second != RMIEmpty()) color.second else color.first
		)
	)
}

hexColor2RMI(color : int) -> RMIXYZ {
	RMIXYZ(i2d(color/0x10000)/255., i2d(color/0x100%0x100)/255., (i2d(color%0x100)/255.))
}