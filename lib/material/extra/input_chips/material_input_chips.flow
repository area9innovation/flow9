import material/material_ui;

export {
	MInputChips(items : Transform<[string]>, style : [MInputChipsStyle]) -> Material;

	MInputChipsStyle ::= MInputChipsMaxWidth, MSelectedInputChips, MInputChipsLeftCaption, MCustomAutoCompleteStyle, MCustomChipStyle, MInputChipsTextButton,
		MInputChipsAlignRight, MInputChipsAddAnyValue, MInputChipsUniq, MInputChipsMultiline, MFocused, MEnabled, MInputChipsCustomTooltip, MAnimationEnabled /*for multiline*/;

		MSelectedInputChips(items : DynamicBehaviour<[string]>);
		MInputChipsLeftCaption(caption : Material);
		MInputChipsTextButton(text : string);
		MInputChipsAlignRight();
		MInputChipsMaxWidth(width : Transform<double>);
		MInputChipsCustomTooltip(tooltipFn : (string) -> Transform<string>);
		MCustomChipStyle(style : [MChipStyle]);
		MCustomAutoCompleteStyle(style : [MAutoCompleteStyle]);
		MInputChipsAddAnyValue(); // By default you can only add values from dictionary 
		MInputChipsMultiline();
		MInputChipsUniq();
}

MInputChips(items : Transform<[string]>, style : [MInputChipsStyle]) -> Material {
	selectedItems = extractStruct(style, MSelectedInputChips(make([]))).items;
	caption = extractStruct(style, MInputChipsLeftCaption(TEmpty())).caption;
	textButton = extractStruct(style, MInputChipsTextButton("")).text;
	maxWidth = tryExtractStruct(style, MInputChipsMaxWidth(const(-1.)));
	chipStyle = extractStruct(style, MCustomChipStyle([])).style;
	customChipTooltip = tryExtractStruct(style, MInputChipsCustomTooltip(\__ -> const("")));
	acStyle = extractStruct(style, MCustomAutoCompleteStyle([])).style;
	multiline = contains(style, MInputChipsMultiline());
	animationEnabled = extractStruct(style, MAnimationEnabled(true));
	chipsToRight = contains(style, MInputChipsAlignRight());
	uniqChips = contains(style, MInputChipsUniq());
	addAnyValue = contains(style, MInputChipsAddAnyValue());
	focused = extractStruct(style, MFocused(make(true))).focused;
	enabled = extractStruct(style, MEnabled(make(true))).enabled;

	text = make("");
	position = make(0);
	leftWidth = make(0.);
	avWidth = make(0.);

	fullWidth = make(0.);
	acPosScale = make(zeroPositionScale);
	icPosScale = make(zeroPositionScale);
	acBaseline = make(0.);
	matchesCount = make(0);
	
	button = {
		if (textButton == "") TEmpty()
		else MTextButton(
			textButton, 
			\-> {
				dynArrayPush(selectedItems, trim(getValue(text)));
				nextDistinct(text, "");
				deferUntilNextFrameRendered(\-> nextDistinct(focused, true))
			}, 
			[MPrimaryColor()],
			[MEnabled(fneq(text, ""))]
		)
	}

	autoComplete =
		MGetManager(\manager -> {
			autoCompleteStyle =
				acStyle
				|> (\st -> removeAll(st, MCompletionFn(\__, __, __ -> TEmpty())))
				|> mergeAndReplaceCustomPopup(
					if (multiline)
						MCustomPopup(
							Some(fselect2(icPosScale, acPosScale, FLift2(\icps, acps -> icps.pos.x / icps.scale.x - acps.pos.x / acps.scale.x))),
							None(),
							Some(fullWidth)
						)
					else
						MCustomPopup(Some(fnegate(leftWidth)), None(), None())
				);
			defFn = extractStruct(acStyle, defaultCompletionFn(autoCompleteStyle)).fn;
			MSelect(items, \itms ->
				MAutoComplete(text, itms, concatA([
					[
						MDictionaryDynamic(fselect2(items, selectedItems, FLift2(\i, s -> subtractA(i,s)))),
						MTextInputOutOfPopup(),
						MCompletionFn(\match, selected, setWord -> defFn(match, selected, \word -> {
							setWord(word);
							if (!contains(getValue(selectedItems), word.sentence)) dynArrayPush(selectedItems, word.sentence);
							deferUntilNextFrameRendered(\ -> {
								next(text, "");
								next(position, 0);
								next(focused, true);
							})
						})),
						MSentenceMatcher(simpleBuildSentenceMatcher, \matcher, input, maxHits, prefix, exhaustive, pos -> {
							selItems = getValue(selectedItems);
							filteredMatcher = SentenceMatcher(matcher with sentences = subtractA(matcher.sentences, selItems));
							simpleSentenceMatcher(filteredMatcher, input, maxHits, prefix, exhaustive, pos);
						}),
						MCurrentMatches(\matches -> nextDistinct(matchesCount, length(matches))),
						MKeepFocusOnSelect()
					], 
					autoCompleteStyle
				]),
				[MFocused(focused), MEnabled(enabled), TTextInputPosition(position), MInputProcessKeyDown(\ke -> {
					if (ke.keycode == KEY_ENTER && addAnyValue && getValue(matchesCount) == 0) {
						txt = trim(getValue(text));
						if (txt != "") dynArrayPush(selectedItems, txt);
						nextDistinct(text, "");
						deferUntilNextFrameRendered(\-> deferUntilNextFrameRendered(\-> nextDistinct(focused, true)));
					};
					true
				})]
			))
		})
		|> (\m ->
			if (multiline) MInspect([IBaseline(acBaseline)], MPositionScale(acPosScale, m))
			else MAvailable(m, TFillWYT(fsubtract(avWidth, leftWidth)))
		)
		|> MSetMinWidth2(const(96.));

	materialize = \elem -> MSelect(enabled, \en -> MChip(elem, concatA([
		[MNewChip()],
		if (en) [
			MCloseButton(),
			MOnClose(\ -> {nextDistinct(selectedItems, removeAll(fgetValue(selectedItems), elem)); true})
		] else [MEnabled(enabled)],
		eitherMap(customChipTooltip, \cct -> [MTooltipText(cct.tooltipFn(elem))], []),
		chipStyle
	])));

	chipsGrid =
		if (multiline) {
			MFlexibleGrid(
				if(chipsToRight) fconcat(const([MAvailable(autoComplete, MFillWY(240.)), button]), fmap(selectedItems, materialize))
				else fconcat(fmap(selectedItems, materialize), const([autoComplete, button])),
				[TFillersSupport(), MBaselineAlign(), animationEnabled]
			)
			|> (\m -> MBaseline(acBaseline, m))
		} else {
			MReorderCols(selectedItems, materialize, [MNoScroll()])
			|> (\m -> MShow(fneq(selectedItems, []), m))
		}

	chips =
		if (multiline) chipsGrid
		else
			MScroll(chipsGrid, TFillXY(), [
				MScrollCropByContent(),
				MScrollFadeContent(white, 40., true, true),
				MScrollbars(
					invisibleScrollBar,
					invisibleScrollBar
				),
				TScrollDisableOutOfBounds(const(true)),
				TScrollAxisEnabled(const(true), const(false))
			]);
	
	MBaselineCols2(caption, chips)
	|> (\m -> MAttachWidth(m, leftWidth))
	|> (\m -> if (multiline) MAttachWidth(m, fullWidth) else MBaselineCols2(m, autoComplete))
	|> (\m -> MAttachAvailableWidth(m, avWidth))
	|> (\m -> eitherMap(maxWidth, \mw -> MAvailable(m, TFillWYT(mw.width)), m))
	|> (\m -> MFrame(0., 0., [MFill(MWhite())], m))
	|> (\m -> MConstruct(
		ifArrayPush(
			[makeSubscribe2(items, \itms -> nextDistinct(selectedItems, intersection(getValue(selectedItems), itms)))],
			uniqChips, 
			makeSubscribe(selectedItems, \i -> deferred(\-> nextDistinct(selectedItems, uniq(i)))),
		),
		m))
	|> (\m -> if (multiline) MPositionScale(icPosScale, m) else m)
}

mergeAndReplaceCustomPopup(second : MCustomPopup) -> ([MAutoCompleteStyle]) -> [MAutoCompleteStyle] {
	\st -> {
		first = extractStruct(st, MCustomPopup(None(), None(), None()));

		merged = MCustomPopup(
			eitherMap(first.offsetX, \v -> Some(faddition(v, either(second.offsetX, const(0.)))), second.offsetX),
			eitherMap(first.offsetY, \v -> Some(faddition(v, either(second.offsetY, const(0.)))), second.offsetY),
			eitherMap(first.width, \v -> maybeMap(second.width, \v2 -> faddition(v, v2)), second.width)
		);
		
		replaceStruct(st, merged);
	}
}