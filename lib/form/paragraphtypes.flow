import form/form;
import ds/list;
import form/paragraphalignments;

export {
	ParagraphElement ::= Form, GlueFragments, TextFragments;

		// An array of words and spaces wrapped in LineParts
		TextFragments(parts : List<WrapElement>);


	peIsForm(ParagraphElement) -> bool;
	isParagraphRtl(style : [ParagraphStyle]) -> bool;

	ParagraphStyle ::= ParagraphAlignment, InterlineSpacing, GraphicsStyle, TopLineBaseline,
		FirstLineIndent, DynamicBlockDelay, ParagraphBorder, ParagraphColoredBorder,
		ParagraphInteractiveStyleTree, ParagraphSingleLine, ParagraphMarked, GeneralIndent,
		ParagraphLinesCount, ParagraphRtl, InterlineHighlighting;

		// Spacing between lines. Can be used to implement leading. If the font size is
		// 14 px, then set InterlineSpacing to 2 px to get 16 px leading.
		InterlineSpacing(d : double);

		// New paragraph sets result's baseline to first line baseline.
		// May be useful when arraging several Paragraph generated Forms inside
		// one more baseline respecting container.
		TopLineBaseline : ();
		FirstLineIndent(indent : double);
		GeneralIndent(indent : double);
		// n sets upper bound of dynamic blocks in paragraph for not making a delay at rendering
		DynamicBlockDelay(n : int);

		ParagraphBorder(top : double, bottom : double);

		ParagraphBorderStyle(width : double, color : int);
		ParagraphColoredBorder(top : ParagraphBorderStyle, bottom : ParagraphBorderStyle);

		// Mapping from idx of paragraphElement to Interactive styles for that paragraphElement.
		// Needed because paragraph elements get expanded to words before rendering of paragraph lines.
		ParagraphInteractiveStyleTree(styleTree : Tree<int, [ParaElementInteractiveStyle]>);

		ParaElementInteractiveStyle ::= DynamicCharStyle, EventListeners, FormModifiers, IgnoreMetrics, ParaElemetScriptType;
				DynamicCharStyle(styleB : Behaviour<[CharacterStyle]>);
				EventListeners(listeners : [EventHandler]);
				FormModifiers(fns : [(Form) -> Form]);
				IgnoreMetrics();

			ParaElemetScriptType ::= ParaElementSubscript, ParaElementSuperscript;
				ParaElementSubscript();
				ParaElementSuperscript();

		// Style to disable word wrapping in paragraph so it will be rendered as single line.
		ParagraphSingleLine : ();
		// Style is present if paragraph is listed, so the first word should be handled epsecially.
		ParagraphMarked : ();
		ParagraphLinesCount : (count : DynamicBehaviour<int>);
		// RTL text direction in paragraph
		ParagraphRtl : (rtl : bool);

		// With this style paragraph highlights also gaps beetween lines.
		InterlineHighlighting();


	TextElement ::= InspectElement, LinePart, NewLine, Space;
	WrapElement ::= Form, GlueFragments, TextElement, InspectableElement, WordWrapInteractive;
		WordWrapInteractive(elem : WrapElement, interactiveId : int);

		// What form to take depending on whether we are first, in the middle, or the last item on a line in a paragraph
		// If this is the first item in a line, it has the first shape.
		// If it is the last item, the last shape. Otherwise the inline shape.
		LinePart(first : Form, inline : Form, last : Form);

		// A space, which disappears at start of a line and at the end of a line.
		// The same as LinePart(Empty(), space, Empty()), just more efficient
		Space(space : Form);

		// Explicit new line marker derived from "\n" in the input text.
		NewLine : ();

		// A space, newline or text element wrapped with an index of where it came from,
		// as well as the coordinates and line number of where it is
		InspectElement(
			inspector : ParaElementInspector,
			element : InspectableElement,
		);
			InspectableElement ::= Space, Form, LinePart;

		AllowLineBreak = TextFragments(Cons(Space(Empty()), EmptyList()));

		GeneralTextFragments : (elements : List<GeneralWrapElement>, style : [CharacterStyle]);
			GeneralWrapElement ::= GeneralText, GeneralSpace, NewLine, GeneralLinePart, GeneralInspectElement, EmptyLineElement, NonTextElement;
				GeneralText(txt : string);
				GeneralSpace(str : string, alphabetBefore : string, alphabetAfter : string);
				GeneralLinePart(first : string, mid : string, end : string);
				GeneralInspectElement(inspector : ParaElementInspector, element : GeneralWrapElement);
				EmptyLineElement();
				NonTextElement();


		ParaElementInspector : (
			index : DynamicBehaviour<int>,
			x : DynamicBehaviour<double>,
			y : DynamicBehaviour<double>,
			size : DynamicBehaviour<WidthHeight>,
			baseline : DynamicBehaviour<double>,
			lineHeight : DynamicBehaviour<double>,
			lineNumber : DynamicBehaviour<int>,
			detached : DynamicBehaviour<bool>
		);

	// n sets upper bound of dynamic blocks in paragraph for not making a delay at rendering
	setParagraphDynamicBlockDelay(n : int) -> void;
	getParagraphDynamicBlockDelay() -> int;
}

paragraphDynamicBlockDelay : ref int = ref 1;

setParagraphDynamicBlockDelay(n : int) -> void {
	paragraphDynamicBlockDelay := n;
}

getParagraphDynamicBlockDelay() -> int { ^paragraphDynamicBlockDelay; }

peIsForm(pe) {
	switch(pe : ParagraphElement) {
		TextFragments(__) : false;
		GlueFragments() : false;
		default : true;
	}
}

isParagraphRtl(style : [ParagraphStyle]) -> bool {
	extractStruct(style, ParagraphRtl(getDefaultRtl())).rtl;
}