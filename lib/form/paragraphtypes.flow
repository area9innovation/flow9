import form/form;
import ds/list;
import form/paragraphalignments;

export {
	ParagraphElement ::= Form, GlueFragments, TextFragments;

		// An array of words and spaces wrapped in LineParts
		TextFragments(parts : List<WrapElement>);


	peIsForm(ParagraphElement) -> bool;

	ParagraphStyle ::= ParagraphAlignment, InterlineSpacing, GraphicsStyle, TopLineBaseline,
		FirstLineIndent, DynamicBlockDelay, ParagraphBorder, ParagraphColoredBorder,
		ParagraphInteractiveStyleTree, ParagraphSingleLine;



		// Spacing between lines. Can be used to implement leading. If the font size is
		// 14 px, then set InterlineSpacing to 2 px to get 16 px leading.
		InterlineSpacing(d : double);

		// New paragraph sets result's baseline to first line baseline.
		// May be useful when arraging several Paragraph generated Forms inside
		// one more baseline respecting container.
		TopLineBaseline : ();
		FirstLineIndent(indent : double);
		// n sets upper bound of dynamic blocks in paragraph for not making a delay at rendering
		DynamicBlockDelay(n : int);

		ParagraphBorder(top : double, bottom : double);
		
		ParagraphBorderStyle(width : double, color : int);
		ParagraphColoredBorder(top : ParagraphBorderStyle, bottom : ParagraphBorderStyle);
		
		// Mapping from idx of paragraphElement to Interactive styles for that paragraphElement.
		// Needed because paragraph elements get expanded to words before rendering of paragraph lines.
		ParagraphInteractiveStyleTree(styleTree : Tree<int, [ParaElementInteractiveStyle]>);

		ParaElementInteractiveStyle ::= DynamicCharStyle, EventListeners, FormModifiers;
				DynamicCharStyle(styleB : Behaviour<[CharacterStyle]>);
				EventListeners(listeners : [EventHandler]);
				FormModifiers(fns : [(Form) -> Form]);

		// Style to disable word wrapping in paragraph so it will be rendered as single line.
		ParagraphSingleLine : ();


	TextElement ::= InspectElement, LinePart, NewLine, Space;
	WrapElement ::= Form, GlueFragments, TextElement, InspectableElement, WordWrapInteractive;
		WordWrapInteractive(elem : WrapElement, interactiveId : int);

		// What form to take depending on whether we are first, in the middle, or the last item on a line in a paragraph
		// If this is the first item in a line, it has the first shape.
		// If it is the last item, the last shape. Otherwise the inline shape.
		LinePart(first : Form, inline : Form, last : Form);

		// A space, which disappears at start of a line and at the end of a line.
		// The same as LinePart(Empty(), space, Empty()), just more efficient
		Space(space : Form);

		// Explicit new line marker derived from "\n" in the input text.
		NewLine : ();

		// A space, newline or text element wrapped with an index of where it came from,
		// as well as the coordinates and line number of where it is
		InspectElement(
			index : int,
			x : DynamicBehaviour<double>,
			y : DynamicBehaviour<double>,
			size : DynamicBehaviour<WidthHeight>,
			lineHeight : DynamicBehaviour<double>,
			lineNumber : DynamicBehaviour<int>,
			element : InspectableElement
		);
			InspectableElement ::= Space, Form, LinePart;

		AllowLineBreak = TextFragments(Cons(Space(Empty()), EmptyList()));
}

peIsForm(pe) {
	switch(pe : ParagraphElement) {
		TextFragments(__) : false;
		GlueFragments() : false;
		default : true;
	}
}
