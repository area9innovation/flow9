// Â© Copyright 2012 Area9 Technologies.
import form/form;
import math/geometry;
import sys/target;
import fform/fformutils;

export {
	DynamicGraphics(path : Transform<[StaticGraphicOp]>, style : Transform<[GraphicsStyle]>) -> Form;

	// The path for a rectangle of the given size. Without strokeCorrection.
	rectangle(x, y, width, height) {
		[GRect(x, y, width, height)]
	}

	// with strokeCorrection
	Rectangle(width : double, height : double, style : [GraphicsStyle]) -> Graphics;
	// without strokeCorrection
	Rectangle2(width : double, height : double, style : [GraphicsStyle]) -> Graphics;

	makeArrowGraphics(len : double, thickness : double) -> [StaticGraphicOp];

	// Sector of circle
	Sector(x : double, y : double, radius : double, angle : double, style : [GraphicsStyle]) -> Graphics;

	// Sector of circle from angle1 to angle 2
	Sector2(x : double, y : double, radius : double, angle1 : double, angle2 : double, style : [GraphicsStyle]) -> Graphics;

	// Sector of circle from angle1 to angle 2
	CustomSector2(x : double, y : double, radius : double, angle1 : double, angle2 : double, showInitialLine : bool, style : [GraphicsStyle]) -> Graphics;

	// Sector of circle from angle1 to angle 2 using Quadratic Bezier
	CustomSector2Quadratic(x : double, y : double, radius : double, angle1 : double, angle2 : double, showInitialLine : bool, style : [GraphicsStyle]) -> Graphics;

	// Circle
	Circle(x: double, y: double, radius : double, style : [GraphicsStyle]) -> Graphics;

	SectorPath(x : double, y: double, radius: double, angle1: double, angle2: double, showInitialLine : bool, 
		showParallelEndLine: bool, useQuadraticBezier: bool) -> [StaticGraphicOp];

	DonutSectorPath(x: double, y: double, innerRadius: double, outerRadius: double, angle1: double, angle2: double, showInitialLine: bool,
		showParallelEndLine: bool, useQuadraticBezier: bool) -> [StaticGraphicOp];

	LongSegment(x: double, y: double, radius : double, angle1 : double, angle2 : double, style : [GraphicsStyle]) -> Graphics;

	// Draw dotted line with given count of parts
	DottedLine2(x1 : double, y1 : double, x2 : double, y2 : double, partsCount : int, style : [GraphicsStyle]) -> Graphics;

	// Draw dotted line with given distance between dots. The distance is in points. Concentration is the amount of black versus space.
	// Concentration 0.0 is the empty line. 1.0 is a fully drawn line.
	// Concentration 2/3 is a line like this: -- -- -- -- -- --. Concentration 1/3 is a line like this: -  -  -  -  -  -  -
	// 0.5 - classic dotted line - - - - - -.
	DottedLine(x1 : double, y1 : double, x2 : double, y2 : double, dotsDistance : double, concentration : double, style : [GraphicsStyle]) -> Graphics;

	// Get coordinates for a rounded rectangle, ready for use in a Graphics block.
	// Without strokeCorrection.
	perfectRoundedRect : (width : double, height : double, radius : double) -> [StaticGraphicOp];  // makes perfect circle sector corners.
	roundedRect : (width : double, height : double, radius : double) -> [StaticGraphicOp];   // makes nicely rounded corners
	customRect : (width : double, height : double, topLeftR : double, topRightR : double, bottomRightR : double, bottomLeftR : double,
		topLeftRounded : bool, topRightRounded : bool, bottomRightRounded : bool, bottomLeftRounded : bool) -> [StaticGraphicOp];

	// configurable rounded rectangle
	customRoundedRect(width : double, height : double, topLeftR : double, topRightR : double, bottomRightR : double, bottomLeftR : double, style : [GraphicsStyle]) -> Form;
	// same as customRoundedRect, but with stroke correction
	customRoundedRect2(width : double, height : double, topLeftR : double, topRightR : double, bottomRightR : double, bottomLeftR : double, style : [GraphicsStyle]) -> Form;

	// rectangle with left-top and right-top rounded corners
	topRoundedRect : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;
	topRoundedRect2 : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;

	// rectangle with left-bottom and right-bottom rounded corners
	bottomRoundedRect : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;
	bottomRoundedRect2 : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;

	// rectangle with left-top and left-bottom rounded corners
	leftRoundedRect : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;
	leftRoundedRect2 : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;

	// rectangle with right-bottom and right-top rounded corners
	rightRoundedRect : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;
	rightRoundedRect2 : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form;

	// A rounded rectangle with a bevel. This can replace using a Bevel filter, which is dead slow on iOS and Android devices
	bevelRoundRect(width : double, height : double, nw : double, ne : double, sw : double, se : double, concave : bool, bevel : double, style : [GraphicsStyle]) -> Form;

	extractGraphicsPath(g : Graphics) -> [StaticGraphicOp] { g.path };

	dottedLineRoundedRect(width : double, height : double, radius : double, distance : double, concentration : double, style : [GraphicsStyle]) -> Form;


	// Given a Graphics style, figure out if there is a stroke, and return 1 if so, because
	// Flash is so fucking helpful to have an off-by-one when you draw a rectangle of 5x5,
	// it ends up being 6x6
	strokeCorrection(s : [GraphicsStyle]) -> double;
}

DynamicGraphics(path : Transform<[StaticGraphicOp]>, style : Transform<[GraphicsStyle]>) -> Form {
	fform2form(FGraphics(path, style));
}

Rectangle(width : double, height : double, style : [GraphicsStyle]) -> Graphics {
	correction = strokeCorrection(style);

	r = if (correction == 0.0 || getRendererType() == "html") {
		[GRect(0.0, 0.0, width, height)];
	} else [
		MoveTo(width, height),
		MoveTo(0.0, 0.0),
		LineTo(max(0.0, width - correction), 0.0),
		LineTo(max(0.0, width - correction), max(0.0, height - correction)),
		LineTo(0.0, max(0.0, height - correction)),
		LineTo(0.0, 0.0)
	];

	Graphics(r, style)
}

Rectangle2(width : double, height : double, style : [GraphicsStyle]) -> Graphics {
	Graphics([GRect(0.0, 0.0, width, height)], style)
}

makeArrowGraphics(len : double, thickness : double) -> [StaticGraphicOp] {
	[
		MoveTo(0.0, len),
		LineTo(0.0, thickness),
		MoveTo(0.0, 3.0 * thickness),
		LineTo(max(3.0, 1.25 * thickness), max(9.0, 3.5 * thickness)),
		LineTo(0.0, thickness),
		LineTo(-max(3.0, 1.25 * thickness), max(9.0, 3.5 * thickness)),
		LineTo(0.0, 3.0 * thickness),
	]
}

// Given a graphics style, figure out if there is a stroke, and return 1 if so, because
// Flash (and QtByterunner too) is so fucking helpful to have an off-by-one when you draw
// a rectangle of 5x5, it ends up being 6x6.
strokeCorrection(s : [GraphicsStyle]) -> double {
	correction = if (js) 0.5 else 1.0;
	fold(s, 0.0, \acc, st -> switch (st : GraphicsStyle) {
		Stroke(c): correction;
		StrokeLineGradient(r, p): correction;

		StrokeOpacity(o): acc;
		StrokeWidth(w): if (w == 1.0) acc else 0.0;

		Fill(c): acc;
		FillOpacity(o): acc;
		GradientFill(r, p): acc;
		RadialGradient(): acc;
	});
}


CustomSector2(x : double, y : double, radius : double, angle1 : double, angle2 : double, showInitialLine : bool, style : [GraphicsStyle]) -> Graphics {
	CustomSegment(x, y, radius, angle1, angle2, showInitialLine, false, style, false);
}

CustomSector2Quadratic(x, y, radius, angle1, angle2, showInitialLine, style) {
	CustomSegment(x, y, radius, angle1, angle2, showInitialLine, false, style, true);
}

SectorPath(x, y, radius, angle1, angle2, showInitialLine, showParallelEndLine, useQuadraticBezier) {
	DonutSectorPath(x, y, 0.0, radius, angle1, angle2, showInitialLine, showParallelEndLine, useQuadraticBezier)
}

DonutSectorPath(x, y, innerRadius, outerRadius, angle1, angle2, showInitialLine, showParallelEndLine, useQuadraticBezier) {
	if (contains(map([x, y, innerRadius, outerRadius, angle1, angle2], isNanOrInf), true)) {
		[]
	} else {
		realAngle1 = deg2rad(max(0.0, min(360.0, angle1)));
		realAngle2 = deg2rad(max(0.0, min(360.0, angle2)));
		angleDiff = realAngle2 - realAngle1;

		// Flash uses 8 segments per circle, to match that, we draw in a maximum of 45 degree segments.
		segs = ceil(angleDiff / deg2rad(45.0));
		angleStep = angleDiff / i2d(segs);
		angleStepHalf = angleStep * 0.5;

		xAngle1 = x + sin(realAngle1) * outerRadius;
		yAngle1 = y - cos(realAngle1) * outerRadius;
		xAngle4 = x + sin(realAngle1) * innerRadius;
		yAngle4 = y - cos(realAngle1) * innerRadius;
		circleAngle = angle1 <= 0.0 && angle2 >= 360.0;
		isDonutSector = innerRadius > 0.0;
		start = if (circleAngle || !showInitialLine) {
			[MoveTo(xAngle1, yAngle1)];
		} else {
			[MoveTo(xAngle4, yAngle4), LineTo(xAngle1, yAngle1)];
		}

		makeArcPath = \radius, startAngle, stepSign -> generate(0, segs, \i -> {
			ctrlMult = radius / cos(angleStepHalf);
			currAngle = min(startAngle + stepSign * angleStep * i2d(i + 1), 2.0 * PI);
			ctrlAngle = currAngle - stepSign * angleStepHalf;
			CubicBezierTo(
				x + sin(currAngle) * radius,
				y - cos(currAngle) * radius,
				x + sin(ctrlAngle) * ctrlMult,
				y - cos(ctrlAngle) * ctrlMult
			);
		});
		outerArcPath = makeArcPath(outerRadius, realAngle1, 1.0);
		innerArcPath = if (isDonutSector) makeArcPath(innerRadius, realAngle2, -1.0) else [];

		xAngle2 = x + sin(realAngle2) * outerRadius;
		yAngle2 = y - cos(realAngle2) * outerRadius;
		xAngle3 = x + sin(realAngle2) * innerRadius;
		yAngle3 = y - cos(realAngle2) * innerRadius;
		// Used to draw normal lines(after CubicBezier they looks strange)
		end = if (showParallelEndLine && !circleAngle) [ClosePath(), MoveTo(x, y), LineTo(xAngle2, yAngle2)] else [];
		makeHole = \-> concat3([LineTo(xAngle2, yAngle2), LineTo(xAngle3, yAngle3)], innerArcPath, [LineTo(xAngle4, yAngle4), ClosePath()]);
	concat3(start, outerArcPath, if (isDonutSector) makeHole() else end);		
	}
}

CustomSegment(x, y, radius, angle1, angle2, showInitialLine, showParallelEndLine, style, useQuadraticBezier) -> Graphics {
	realAngle1 = max(0.0, min(360.0, angle1));
	realAngle2 = max(0.0, min(360.0, angle2));

	if (realAngle1 == realAngle2) {
		// Ignore empty slices
		Graphics([],[]);
	} else {
		graphicsPath = if (realAngle1 > realAngle2) {
			// Wrong input data, swap it
			SectorPath(x, y, radius, angle2, angle1, showInitialLine, showParallelEndLine, useQuadraticBezier);
		} else {
			SectorPath(x, y, radius, angle1, angle2, showInitialLine, showParallelEndLine, useQuadraticBezier);
		}
		Graphics(
			arrayPush(graphicsPath, ClosePath()),
			style
		);
	}
}

LongSegment(x, y, radius, angle1, angle2, style) {
	CustomSegment(x, y, radius, angle1, angle2, true, true, style, false);
}

Sector2(x, y, radius, angle1, angle2, style) {
	CustomSector2(x, y, radius, angle1, angle2, true, style)
}

Sector(x, y, radius, angle, style) {
	Sector2(x, y, radius, 0.0, angle, style)
}

Circle(x, y, radius, style) {
	Graphics([GCircle(x, y, radius)], style)
}

DottedLine2(x1, y1, x2, y2, partsCount, style) {
	if (partsCount < 2) {
		Graphics([MoveTo(x1, y1), LineTo(x2, y2)], style)
	} else {
		pc = partsCount * 2 - 1;
		deltaX = (x2 - x1) / i2d(pc);
		deltaY = (y2 - y1) / i2d(pc);
		Graphics(concat(fold(enumFromTo(1, partsCount - 1), [MoveTo(x1, y1)], \dl, i -> {
			concat(dl, [LineTo(x1 + deltaX * i2d(i * 2 - 1), y1 + deltaY * i2d(i * 2 - 1)),
						MoveTo(x1 + deltaX * i2d(i * 2), y1 + deltaY * i2d(i * 2))])
		}), [LineTo(x2, y2)]), style)
	}
}

DottedLine(x1, y1, x2, y2, dotsDistance, concentration, style) {
	lineLength = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));

	Graphics(
		if (concentration <= 0.0 || dotsDistance >= lineLength) {
			[]
		} else if (concentration >= 1.0 || dotsDistance <= 0.0) {
			[MoveTo(x1, y1), LineTo(x2, y2)]
		} else {
			linesDistance = (1.0 - concentration) * dotsDistance / concentration;
			distance = linesDistance + dotsDistance;
			countOfFull = floor(lineLength / distance);
			lengthFull = i2d(countOfFull) * distance;
			difflenght = lineLength - lengthFull;

			x3 = ref 0.0;
			y3 = ref 0.0;
			x4 = ref 0.0;
			y4 = ref 0.0;
			smallLine = ref 0.0;

			count = if ((dotsDistance <= linesDistance && difflenght > linesDistance) || (dotsDistance > linesDistance && difflenght > dotsDistance)) {
				smallLine := (difflenght - dotsDistance) / 2.0;
				countOfFull;
			} else {
				smallLine := (linesDistance + difflenght) / 2.0;
				max(0, countOfFull - 1);
			}

			deltaSmallX = (x2 - x1) * ^smallLine / lineLength;
			deltaSmallY = (y2 - y1) * ^smallLine / lineLength;
			x3 := x1 + deltaSmallX;
			y3 := y1 + deltaSmallY;
			x4 := x2 - deltaSmallX;
			y4 := y2 - deltaSmallY;

			deltaDotsX = (x2 - x1) * dotsDistance / lineLength;
			deltaDotsY = (y2 - y1) * dotsDistance / lineLength;
			deltaLinesX = (x2 - x1) * linesDistance / lineLength;
			deltaLinesY = (y2 - y1) * linesDistance / lineLength;

			concat3(
				[MoveTo(x1, y1), LineTo(^x3, ^y3)],
				fold(enumFromTo(1, count), [], \g, i -> {
					diffX = ^x3 + i2d(i) * deltaDotsX + i2d(i - 1) * deltaLinesX;
					diffY = ^y3 + i2d(i) * deltaDotsY + i2d(i - 1) * deltaLinesY;
					concat(g, [	MoveTo(diffX, diffY),
								LineTo(diffX + deltaLinesX, diffY + deltaLinesY)])
				}),
				[MoveTo(^x4, ^y4), LineTo(x2, y2)]
			)
		}
	, style)
}

customRoundedRect(width, height, topLeftR, topRightR, bottomRightR, bottomLeftR, style) {
	if (width == 0.0 || height == 0.0) { // special case (without this check we get two small dots)
		Size2(const(WidthHeight(width, height)), Empty()) // Fixed(width, height)
	} else {
		// We need to normalize rounding when rounding size of neighboÐ³r angles is more then width/height by division on the common factor.
		normalizeLocal = \tl, tr, br, bl, w1, h1 -> {
			normalizeRounds = \f, s, len -> {
				if (f + s <= len)
					1.0
				else {
					len / (f + s);
				}
			}
			min(normalizeRounds(tl, tr, w1),
				min(normalizeRounds(tr, br, h1),
					min(normalizeRounds(br, bl, w1),
						normalizeRounds(bl, tl, h1))));
		}

		factor = normalizeLocal(topLeftR, topRightR, bottomRightR, bottomLeftR, width, height);
		w = width; h = height;
		r1 = topLeftR * factor;
		r2 = topRightR * factor;
		r3 = bottomRightR * factor;
		r4 = bottomLeftR * factor;
		Graphics(
			[
				MoveTo(r1, 0.0),
				LineTo(w - r2, 0.0),
				CubicBezierTo(w, r2, w, 0.0),
				LineTo(w, h - r3),
				CubicBezierTo(w - r3, h, w, h),
				LineTo(r4, h),
				CubicBezierTo(0.0, h - r4, 0.0, h),
				LineTo(0.0, r1),
				CubicBezierTo(r1, 0.0, 0.0, 0.0)
			],
			style
		)
	}
}

topRoundedRect(width, height, radius, style) {
	customRoundedRect(width, height, radius, radius, 0.0, 0.0, style)
}

bottomRoundedRect(width, height, radius, style) {
	customRoundedRect(width, height, 0.0, 0.0, radius, radius, style)
}

leftRoundedRect(width, height, radius, style) {
	customRoundedRect(width, height, radius, 0.0, 0.0, radius, style)
}

rightRoundedRect(width, height, radius, style) {
	customRoundedRect(width, height, 0.0, radius, radius, 0.0, style)
}

customRoundedRect2(width, height, topLeftR, topRightR, bottomRightR, bottomLeftR, style) {
	if (width == 0.0 || height == 0.0) { // special case (without this check we get two small dots)
		Size2(const(WidthHeight(width, height)), Empty()) // Fixed(width, height)
	} else {
		c = strokeCorrection(style);
		w = width - c; h = height - c; r1 = topLeftR; r2 = topRightR; r3 = bottomRightR; r4 = bottomLeftR;
		Graphics([
			MoveTo(width, height) /* without this, getStaticFormSize will report wrong size (one pixel less than it must be) */,
			MoveTo(r1, 0.0),
			LineTo(w - r2, 0.0),
			CubicBezierTo(w, r2, w, 0.0),
			LineTo(w, h - r3),
			CubicBezierTo(w - r3, h, w, h),
			LineTo(r4, h),
			CubicBezierTo(0.0, h - r4, 0.0, h),
			LineTo(0.0, r1),
			CubicBezierTo(r1, 0.0, 0.0, 0.0)
		], style)
	}
}

topRoundedRect2(width, height, radius, style) {
	customRoundedRect2(width, height, radius, radius, 0.0, 0.0, style)
}

bottomRoundedRect2(width, height, radius, style) {
	customRoundedRect2(width, height, 0.0, 0.0, radius, radius, style)
}

leftRoundedRect2(width, height, radius, style) {
	customRoundedRect2(width, height, radius, 0.0, 0.0, radius, style)
}

rightRoundedRect2(width, height, radius, style) {
	customRoundedRect2(width, height, 0.0, radius, radius, 0.0, style)
}


roundedRect(rectWidth, rectHeight, radius) {
	// Graceful decrease rounding to make sure we fit
	r = min(rectHeight / 2.0, min(rectWidth / 2.0, radius));

	// perfectRoundedRect(rectWidth, rectHeight, radius) // Technically, this is more correct, but it just looks worse

	[
		GRoundedRect(0.0, 0.0, rectWidth, rectHeight, radius)
	]
}

customRect(rectWidth : double, rectHeight : double, topLeftR : double, topRightR : double, bottomRightR : double, bottomLeftR : double,
	topLeftRounded : bool, topRightRounded : bool, bottomRightRounded : bool, bottomLeftRounded : bool) -> [StaticGraphicOp] {

	concatA([
		[
			MoveTo(topLeftR, 0.0),
			LineTo(rectWidth - topRightR, 0.0)
		],
		if (topRightRounded)
			[CubicBezierTo(rectWidth, topRightR, rectWidth, 0.0)]
		else
			[],
		[
			LineTo(rectWidth, topRightR),
			LineTo(rectWidth, rectHeight - bottomRightR)
		],
		if (bottomRightRounded)
			[CubicBezierTo(rectWidth - bottomRightR, rectHeight, rectWidth, rectHeight)]
		else
			[],
		[
			LineTo(rectWidth - bottomRightR, rectHeight),
			LineTo(bottomLeftR, rectHeight)
		],
		if (bottomLeftRounded)
			[CubicBezierTo(0.0, rectHeight - bottomLeftR, 0.0, rectHeight)]
		else
			[],
		[
			LineTo(0.0, rectHeight - bottomLeftR),
			LineTo(0.0, topLeftR)
		],
		if (topLeftRounded)
			[CubicBezierTo(topLeftR, 0.0, 0.0, 0.0)]
		else
			[],
		[
			LineTo(topLeftR, 0.0),
			ClosePath()
		]
	])
}

perfectRoundedRect(rectWidth, rectHeight, radius) {
	// Graceful decrease rounding to make sure we fit
	r = min(rectHeight / 2.0, min(rectWidth / 2.0, radius));

	sqrt2 = sqrt(2.0);
	n1 = 1.0 / sqrt2;
	n2 = sqrt2 - 1.0;
	[
		MoveTo(r, 0.0),
		LineTo(rectWidth - r, 0.0),
		CubicBezierTo(
			(n1 * r) + rectWidth - r,
			(-n1 * r) + r,
			(n2 * r) + rectWidth - r,
			(-r)  + r
		),
		CubicBezierTo(
			rectWidth,
			r,
			rectWidth,
			-n2 * r + r
		),
		LineTo(rectWidth, rectHeight - r),
		CubicBezierTo(
			(n1 * r) + rectWidth - r,
			(n1 * r) + rectHeight - r,
			rectWidth,
			(n2*r) + rectHeight - r,
		),
		CubicBezierTo(
			rectWidth - r,
			rectHeight,
			(n2*r) + rectWidth - r,
			rectHeight
		),
		LineTo(r, rectHeight),
		CubicBezierTo(
			-n1 * r + r,
			n1 * r + rectHeight - r,
			(-n2 * r) + r,
			rectHeight
		),
		CubicBezierTo(
			0.0,
			rectHeight - r,
			0.0,
			(n2*r) + rectHeight - r,
		),
		LineTo(0.0, r),
		CubicBezierTo(
			(-n1 * r) + r,
			(-n1 * r) + r,
			0.0,
			(-n2*r) + r
		),
		CubicBezierTo(
			r,
			0.0,
			(-n2 * r) + r,
			0.0
		),
        ClosePath(),
        // if (cpp) ClosePath else MoveTo(rectWidth, rectHeight),	// Just to define the size correctly
	]
}

dottedLineRoundedRect(width, height, radius, distance, concentration, style) {
	customDottedLineRoundedRect(width, height, radius, radius, radius, radius, distance, concentration, style);
}

customDottedLineRoundedRect(width, height, topLeftR, topRightR, bottomRightR, bottomLeftR, dotsDistance, concentration, style) {
	w = width; h = height; r1 = topLeftR; r2 = topRightR; r3 = bottomRightR; r4 = bottomLeftR;
	Group([
		DottedLine(r1, 0.0, w - r2, 0.0, dotsDistance, concentration, style),
		DottedLine(w, r2, w, h - r3, dotsDistance, concentration, style),
		DottedLine(w - r3, h, r4, h, dotsDistance, concentration, style),
		DottedLine(0.0, h - r4, 0.0, r1, dotsDistance, concentration, style),
		Graphics([
			MoveTo(w - r2, 0.0),
			CubicBezierTo(w, r2, w, 0.0),
			MoveTo(w, h - r3),
			CubicBezierTo(w - r3, h, w, h),
			MoveTo(r4, h),
			CubicBezierTo(0.0, h - r4, 0.0, h),
			MoveTo(0.0, r1),
			CubicBezierTo(r1, 0.0, 0.0, 0.0)],
			style
		)
	])
}


bevelRoundRect(width : double, height : double, onw : double, one : double, osw : double, ose : double, concave : bool, bevel : double, style : [GraphicsStyle]) -> Form {
	mini = min(width, height) / 2.0;

	nw = min(onw, mini);
	ne = min(one, mini);
	sw = min(osw, mini);
	se = min(ose, mini);

	if (flash) {
		form = customRoundedRect(width, height, nw, ne, sw, se, style);
		if (concave) {
			Filter(
				[ Bevel([Placement(45.0, 1.0), Color(0xffffff, 0.5), ShadowColor(0x000000, 0.5), Spread(2.0), Radius(bevel)]) ],
				form
			);
		} else {
			Filter([
				Bevel([Placement(45.0, 0.3), Color(0x000000, 0.7), ShadowColor(0xffffff, 0.9), Spread(4.0), Radius(bevel)])],
				form
			)
		}
	} else {
		radius = bevel / 2.0;
		dilution = max(0.1, min(1.0, 1.0 / radius));

		gp = \b -> {
			if (b) [
				GradientPoint(0xffffff, 0.5 * dilution, 0.0),
				GradientPoint(0xffffff, 0.0, 1.0)
			] else [
				GradientPoint(0x000000, 0.5 * dilution, 0.0),
				GradientPoint(0x000000, 0.0, 1.0)
			];

			// [GradientPoint(0xffff00, 1.0, 0.0), GradientPoint(0x00ffff, 1.0, 1.0)]
		}

		top = gp(concave);
		bottom = gp(!concave);

		full = [GradientPoint(0xffff00, 1.0, 0.0), GradientPoint(0x00ffff, 1.0, 1.0)];

		// We do not use sinus, cosinus, but a quadratic curve to match the rounded rect
		mcos = \a -> {
			y = if (a >= 180.0) (a - 180.0) / 90.0 else a / 90.0;
			x = if (y <= 1.0) y else 2.0 - y;
			v2 = (1.0 - x * x);
			r = if ((a >= 180.0 && y <= 1.0) || (a <= 180.0 && y > 1.0)) {-v2} else v2;
		//	println("Cos:" + d2s(a) + "->" + d2s(r) + " " + d2s(cos(a / 180.0 * PI) - r) + " " + d2s(x));
			r;
		};
		msin = \a -> {
			x = if (a >= 180.0) (a - 180.0) / 90.0 else a / 90.0;
			v2 = (1.0 - (1.0- x) * (1.0 - x));
			r = if (a >= 180.0) {-v2} else v2;

			// println("Sin:" + d2s(a) + "->" + d2s(r) + " " + d2s(sin(a / 180.0 * PI) - r));
			r;
		}

		tri = \fromD, toD, w, s, angle : Maybe<double> -> {
			ha = (fromD + toD) / 2.0;
			Graphics([
					MoveTo(w + mcos(fromD) * w, w + w * msin(fromD)),

					CubicBezierTo(
						w + mcos(toD) * w, w + w * msin(toD),
						w + mcos(ha) * w, w + w * msin(ha),
					),

					LineTo(w + mcos(toD) * (w - radius), w + (w - radius) * msin(toD)),
					CubicBezierTo(
						w + mcos(fromD) * (w - radius), w + (w - radius) * msin(fromD),
						w + mcos(ha) * (w - radius), w + (w - radius) * msin(ha)
					),
					//LineTo(w, w),
				],
				[GradientFill(either(angle, 180.0 + (fromD + toD) / 2.0), s) ]
			);
		};

		sec = \fromD, toD, w, s, angle : Maybe<double> -> {
			d = (toD - fromD) / 5.0;
			Group([
				tri(fromD, fromD + d, w, s, angle),
				tri(fromD + d, fromD + 2.0 * d, w, s, angle),
				tri(fromD + 2.0 * d, fromD + 3.0 * d, w, s, angle),
				tri(fromD + 3.0 * d, fromD + 4.0 * d, w, s, angle),
				tri(fromD + 4.0 * d, fromD + 5.0 * d, w, s, angle),
			]);
		};

		sec2 = \fromD, toD, w, s, angle : Maybe<double> -> {
			d = (toD - fromD) / 3.0;
			Group([
				tri(fromD, fromD + d, w, s, angle),
				tri(fromD + d, fromD + 2.0 * d, w, s, angle),
				tri(fromD + 2.0 * d, fromD + 3.0 * d, w, s, angle),
			]);
		};

		Group([
			customRoundedRect(width, height, nw, ne, sw, se, style),
			Graphics([
					// The top bar
					MoveTo(nw, 0.0),
					LineTo(width - ne, 0.0),
					LineTo(width - ne, radius),
					LineTo(nw, radius),
					ClosePath(),
				],
				[GradientFill(90.0, top) ]
			),
			Graphics([
					// The left bar
					MoveTo(0.0, nw),
					LineTo(radius, nw),
					LineTo(radius, height - sw),
					LineTo(0.0, height - sw),
					ClosePath(),
				],
				[GradientFill(0.0, top) ]
			),
			Graphics([
					// The right bar
					MoveTo(width, ne),
					LineTo(width - radius, ne),
					LineTo(width - radius, height - se),
					LineTo(width, height - se),
					ClosePath(),
				],
				[GradientFill(180.0, bottom) ]
			),
			Graphics([
					// The bottom bar
					MoveTo(sw, height),
					LineTo(width - se, height),
					LineTo(width - se, height - radius),
					LineTo(sw, height - radius),
					ClosePath(),
				],
				[GradientFill(270.0, bottom) ]
			),

			// The nw corner
			if (nw > 0.0) sec(180.0, 270.0, nw, top, None()) else Empty(),

			// The ne corner
			if (ne > 0.0) Translate(const(width - 2.0 * ne), const(0.0), sec2(270.0, 270.0 + 45.0 /*360.0*/, ne, top, None() /*Some(90.0)*/)) else Empty(),
			if (ne > 0.0) Translate(const(width - 2.0 * ne), const(0.0), sec2(270.0 + 45.0, 360.0, ne, bottom, None() /*Some(180.0)*/)) else Empty(),

			// The sw corner
			if (sw > 0.0) Translate(const(0.0), const(height - 2.0 * sw), sec2(90.0, 90.0 + 45.0 /*360.0*/, sw, bottom, None() /*Some(90.0)*/)) else Empty(),
			if (sw > 0.0) Translate(const(0.0), const(height - 2.0 * sw), sec2(90.0 + 45.0, 180.0, sw, top, None() /*Some(180.0)*/)) else Empty(),

			// The se corner
			if (se > 0.0) Translate(const(width - 2.0 * se), const(height - 2.0 * se), sec(0.0, 90.0, se, bottom, None())) else Empty(),
		]);

	}
}
