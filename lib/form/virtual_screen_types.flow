import math/geometry;
import form/form;
import fusion;

export {
	VirtualScreenInfo : (
		size : Behaviour<WidthHeight>,
		position : Behaviour<PositionScale>,
		renderFn : (Form) -> void,
	);

	makeDefaultVirtualScreenInfo() -> VirtualScreenInfo;

	CenterPopupByVirtualScreenBox(
		info : VirtualScreenInfo,
		popupContent : Form,
		popupSize : Behaviour<WidthHeight>
	) -> Form;

	CropPopupByVirtualScreenBox(
		info : VirtualScreenInfo,
		popupContent : Form
	) -> Form;

	getScreenPopupRenderer(
		virtualScreenInfoM : Maybe<VirtualScreenInfo>,
		defRender : (Form) -> () -> void
	) -> (Form) -> () -> void;
}

makeDefaultVirtualScreenInfo() -> VirtualScreenInfo {
	VirtualScreenInfo(makeWH(), make(zeroPositionScale), nop1);
}

CenterPopupByVirtualScreenBox(
	info : VirtualScreenInfo,
	popupContent : Form,
	popupSize : Behaviour<WidthHeight>
) -> Form {
	windowXB = make(0.0);
	windowYB = make(0.0);
	Constructor(
		Translate(windowXB, windowYB, popupContent),
		make2Subscribe(info.size, popupSize, \size, windowWH -> {
			nextDistinct(windowXB, max(0.0, (size.width - windowWH.width) / 2.0));
			nextDistinct(windowYB, max(0.0, (size.height - windowWH.height) / 2.0));
		})
	);
}

CropPopupByVirtualScreenBox(
	info : VirtualScreenInfo,
	popupContent : Form
) -> Form {
	cropWidthB = make(0.0);
	cropHeightB = make(0.0);
	Constructor(
		Crop(const(0.0), const(0.0), cropWidthB, cropHeightB, popupContent),
		make2Subscribe(info.size, info.position, \size : WidthHeight, ps : PositionScale -> {
			nextDistinct(cropWidthB, size.width);
			nextDistinct(cropHeightB, size.height);
		})
	)
}

getScreenPopupRenderer(
	virtualScreenInfoM : Maybe<VirtualScreenInfo>,
	defRender : (Form) -> () -> void
) -> (Form) -> () -> void {
	eitherMap(
		virtualScreenInfoM,
		\vsi -> \f -> {
			vsi.renderFn(f);
			\-> vsi.renderFn(Empty())
		},
		defRender
	);
}
