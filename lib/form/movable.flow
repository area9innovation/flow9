// Â© Copyright 2012 Area9 Innovation. All rights reserved
import form/form;
import transforms;
import form/gui;

export {
	// Styles for movable forms
	MoveStyle ::= DragDrop, CaptureByClick, Moving, MovingEnabled, MovingModeOffset;
		DragDrop();
		CaptureByClick();
		// If you want to be notified when the piece is moving
		Moving(moving : DynamicBehaviour<int>);
		// to external control
		MovingEnabled(enabled : Behaviour<bool>);
		// Sometimes we need to use Offset instead of Translate for dragging
		MovingModeOffset();

	// Movable region description
	MovableRestrictions ::= NoRestrictions, RectangularRestrictions;
		// Form may be movable all over the screen
		NoRestrictions();
		// Rectangle coords must be decribed relatively to form initial position
		RectangularRestrictions : (left : Behaviour<double>, top : Behaviour<double>, right : Behaviour<double>, bottom : Behaviour<double>);

	// The definition of something which can be moved
	MovableSite : (form : Form, x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, enabled : Behaviour<bool>);

	// move site using style
	makeMovable : (MovableSite, [MoveStyle]) -> Form;
	// move site using style. without intermediate behaviours
	makeMovable2 : (MovableSite, [MoveStyle]) -> Form;
	// move site using style and restrictions description
	makeMovableWithRestrictions : (MovableSite, [MoveStyle], MovableRestrictions) -> Form;
	// move site using style and restrictions description without creates intermediate behaviours
	makeControlledDirectlyMovableWithRestriction : (MovableSite, [MoveStyle], MovableRestrictions, controlled : bool) -> Form;
	checkRestrictionsX(x : double, width : double, restrictions : MovableRestrictions) -> bool;
	checkRestrictionsY(y : double, height : double, restrictions : MovableRestrictions) -> bool;
	// Movable object
	Movable : (Form, [MoveStyle]) -> Form;
	// Movable object with the coords exposed to a caller.
	MovableXY : (DynamicBehaviour<double>, DynamicBehaviour<double>, Form, [MoveStyle]) -> Form;

	// Drag&Drop object with the coords exposed to a caller.
	SimpleMovableXY : (DynamicBehaviour<double>, DynamicBehaviour<double>, Form) -> Form;

	// Drag&Drop object
	SimpleMovable : (Form) -> Form;

	// Drag&Drop object that cannot be dragged out of specified relatively to form initial position rectangle
	SimpleMovableWithRestriction : (left : Behaviour<double>, top : Behaviour<double>, availableWidthHeight : Behaviour<WidthHeight>, Form) -> Form;
	SimpleMovableWithRestrictionAndCallback : (left : Behaviour<double>, top : Behaviour<double>, availableWidthHeight : Behaviour<WidthHeight>, Form, (dx:double, dy:double) -> void) -> Form;
	// Drag&Drop object with the coords exposed to a caller and one cannot be dragged out of specified relatively to form initial position rectangle
	MovableXYWithRestriction : (DynamicBehaviour<double>, DynamicBehaviour<double>, left : Behaviour<double>, top : Behaviour<double>, availableWidthHeight : Behaviour<WidthHeight>, Form) -> Form;
	// The same as MovableXYWithRestriction but with custom style
	StyledMovableXYWithRestriction : (x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, left : Behaviour<double>, top : Behaviour<double>, availableWidthHeight : Behaviour<WidthHeight>, style : [MoveStyle], form : Form) -> Form;
}

makeMovable(site : MovableSite, style : [MoveStyle]) {
	makeMovableWithRestrictions(site, style, NoRestrictions())
}

makeMovable2(site : MovableSite, style : [MoveStyle]) {
	makeControlledDirectlyMovableWithRestriction(site, style, NoRestrictions(), true);
}

makeControlledDirectlyMovableWithRestriction(site : MovableSite, style : [MoveStyle], restrictions : MovableRestrictions, controlled : bool) -> Form {
	makeControlledDirectlyMovableWithRestrictionAndCallback(site, style, restrictions, controlled, nop2);
}

makeControlledDirectlyMovableWithRestrictionAndCallback(site : MovableSite, style : [MoveStyle], restrictions : MovableRestrictions, controlled : bool, callback : (dx:double, dy:double) -> void) -> Form {
	// Drag & drop support
	offset_x = make(0.0);
	offset_y = make(0.0);
	lastX = ref 0.0;
	lastY = ref 0.0;
	isDragging = ref false;
	capturedByClick = ref false;
	allowCaptureByClick = contains(style, CaptureByClick());
	isDragDrop = contains(style, DragDrop());
	moving = extractStruct(style, Moving(make(0))).moving;
	downX = ref 0.0;
	downY = ref 0.0;
	downTime = ref 0.0;
	formWidthHeight = makeWH();

	isClick = \time, mouseInfo -> time - ^downTime < 500.0 && abs(mouseInfo.x - ^downX) < 2.0 && abs(mouseInfo.y - ^downY) < 2.0;

	doRelease = \ -> {
		wasOurs = getValue(moving) != 0 || ^isDragging || ^capturedByClick;
		isDragging := false;
		capturedByClick := false;
		if (!controlled) {
			nextDistinct(offset_x, 0.0);
			nextDistinct(offset_y, 0.0);
		};
		nextDistinct(moving, 0);
		callback(getValue(site.x), getValue(site.y));
		wasOurs;
	}


	mouseMoveHandler = Interactive([
			MouseMove(\gm -> {
				if (getValue(site.enabled) && (^isDragging || ^capturedByClick)) {
					mouseInfo = gm();
					x = mouseInfo.x;
					y = mouseInfo.y;
					newOffsetX = x - ^lastX;
					newOffsetY = y - ^lastY;
					currentWH = getValue(formWidthHeight);
					if (checkRestrictionsX(getValue(site.x) + newOffsetX, currentWH.width, restrictions)) {
						if (!controlled) next(offset_x, newOffsetX) else nextDistinct(site.x, getValue(site.x) + newOffsetX);
					}
					if (checkRestrictionsY(getValue(site.y) + newOffsetY, currentWH.height, restrictions)) {
						if (!controlled) next(offset_y, newOffsetY) else nextDistinct(site.y, getValue(site.y) + newOffsetY);
					}
					lastX := x;
					lastY := y;
					true;
				} else false;
			})
		],
		ClickableFixed(0.0, 0.0)
	);

	Constructors(
		[
			\ -> if (!controlled) subscribe(offset_x, \dx -> next(site.x, getValue(site.x) + dx)) else nop,
			\ -> if (!controlled) subscribe(offset_y, \dy -> next(site.y, getValue(site.y) + dy)) else nop
		],
		Interactive(
			[
				MouseDown(\mouseInfo -> {
					// start dragging if nobody catched that yet
					mi = mouseInfo.inside();
					if (getValue(site.enabled) && mi) {
						lastX := mouseInfo.x;
						lastY := mouseInfo.y;
						downX := ^lastX;
						downY := ^lastY;
						if (allowCaptureByClick) downTime := timestamp();
						if (isDragDrop && !^capturedByClick) {
							isDragging := true;
							nextDistinct(moving, 1);
						}
						true
					} else {
						mi
					}
				}),
				MouseUp(\gm -> {
					if (allowCaptureByClick) {
						t = timestamp();
						if (isClick(t, gm())) {
							if (^capturedByClick) doRelease()
							else {
								capturedByClick := true;
								nextDistinct(moving, 1);
								true;
							}
						} else if (^isDragging) doRelease() else false;
					} else if (^isDragging) doRelease() else false;
				}),
			],
			Inspect(
				[ISize(formWidthHeight)],
				Group([
					site.form,
					mouseMoveHandler
				])
			)
		)
	)
}

makeMovableWithRestrictions(site : MovableSite, style : [MoveStyle], restrictions : MovableRestrictions) {
	makeControlledDirectlyMovableWithRestrictionAndCallback(site, style, restrictions, false, nop2);
}

makeMovableWithRestrictionsAndCallback(site : MovableSite, style : [MoveStyle], restrictions : MovableRestrictions, callback : (dx:double, dy:double) -> void) -> Form{
	makeControlledDirectlyMovableWithRestrictionAndCallback(site, style, restrictions, false, callback);
}

checkRestrictionsX(x : double, width : double, restrictions : MovableRestrictions) -> bool {
	switch(restrictions : MovableRestrictions) {
		NoRestrictions() : true;
		RectangularRestrictions(left, top, right, bottom) :
			x >= getValue(left) && x + width <= getValue(right);
	}
}

checkRestrictionsY(y : double, height : double, restrictions : MovableRestrictions) -> bool {
	switch(restrictions : MovableRestrictions) {
		NoRestrictions() : true;
		RectangularRestrictions(left, top, right, bottom) :
			y >= getValue(top) && y + height <= getValue(bottom);
	}
}

Movable(form : Form, style : [MoveStyle]) {
	MovableXY(make(0.0), make(0.0), form, style)
}

MovableXY(dx : DynamicBehaviour<double>, dy : DynamicBehaviour<double>, form : Form, style : [MoveStyle]) {
	makeMovableSiteWithCallback(dx, dy, form, style, NoRestrictions(), nop2)
}

SimpleMovableXY(dx : DynamicBehaviour<double>, dy : DynamicBehaviour<double>, form : Form) {
	MovableXY(dx, dy, form, [DragDrop()])
}

SimpleMovable(form : Form) {
	Movable(form, [DragDrop()])
}

SimpleMovableWithRestriction(left : Behaviour<double>, top : Behaviour<double>, widthHeight : Behaviour<WidthHeight>, form : Form) {
	SimpleMovableWithRestrictionAndCallback(left, top, widthHeight, form, nop2)
}

SimpleMovableWithRestrictionAndCallback(left : Behaviour<double>, top : Behaviour<double>, widthHeight : Behaviour<WidthHeight>, form : Form, callback : (dx:double, dy:double) -> void) -> Form {
	StyledMovableXYWithRestrictionAndCallback(make(0.0), make(0.0), left, top, widthHeight, [DragDrop()], form, callback)
}

StyledMovableXYWithRestriction(dx : DynamicBehaviour<double>, dy : DynamicBehaviour<double>, left : Behaviour<double>, top : Behaviour<double>, widthHeight : Behaviour<WidthHeight>, style : [MoveStyle], form : Form) {
	StyledMovableXYWithRestrictionAndCallback(dx, dy, left, top, widthHeight, style, form, nop2);
}

StyledMovableXYWithRestrictionAndCallback(dx : DynamicBehaviour<double>, dy : DynamicBehaviour<double>, left : Behaviour<double>, top : Behaviour<double>, widthHeight : Behaviour<WidthHeight>, style : [MoveStyle], form : Form, callback : (dx:double, dy:double) -> void) -> Form {
	right = make(0.0);
	bottom = make(0.0);
	restrictions = RectangularRestrictions(left, top, right, bottom);

	makeMovableSiteWithCallback(dx, dy,
		Constructors(
			[
				\ -> connectSelect2Distinctu(left, widthHeight, right, \l, wh -> l + wh.width),
				\ -> connectSelect2Distinctu(top, widthHeight, bottom, \t, wh -> t + wh.height)
			],
			form
		),
		style, restrictions, callback
	)
}

MovableXYWithRestriction(dx : DynamicBehaviour<double>, dy : DynamicBehaviour<double>, left : Behaviour<double>, top : Behaviour<double>, widthHeight : Behaviour<WidthHeight>, form : Form) {
	StyledMovableXYWithRestriction(dx, dy, left, top, widthHeight, [DragDrop()], form);
}

makeMovableSiteWithCallback(
	dx : DynamicBehaviour<double>,
	dy : DynamicBehaviour<double>,
	form : Form, style : [MoveStyle],
	restrictions : MovableRestrictions,
	callback : (dx:double, dy:double) -> void) -> Form {

	enabled = extractStruct(style, MovingEnabled(const(true))).enabled;
	f = if (contains(style, MovingModeOffset()))
		Select2(dx, dy, \x, y -> Offset(x, y, form))
	else Translate(dx, dy, form);

	MovableSite(f, dx, dy, enabled) |> \s : MovableSite -> makeMovableWithRestrictionsAndCallback(s, style, restrictions, callback)
}
