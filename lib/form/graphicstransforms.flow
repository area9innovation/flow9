import form/form;
import math/geometry;
import math/matrix;

export {
	apply2dPointTransform(p : Point, matrix : [[double]]) -> Point;
	apply2dPathTransform(path : [StaticGraphicOp], matrix : [[double]]) -> [StaticGraphicOp];
	apply2dTransform(g : Graphics, matrix : [[double]]) -> Graphics;

	make2dTransform_nop() -> [[double]];
	make2dTransform_translate(dx : double, dy : double) -> [[double]];
	make2dTransform_scale(sx : double, sy : double) -> [[double]]; // NOTE: negative scales allowed
	make2dTransform_rotate(degrees : double) -> [[double]];
	make2dTransform_rotate2(degrees : double, axisX : double, axisY : double) -> [[double]];

	// To combine matrices use multiplyMatrices() function from matrix.flow

	deconstructGraphicsPath(path : [StaticGraphicOp]) -> [StaticGraphicOp];
}

apply2dPointTransform(p : Point, matrix : [[double]]) -> Point {
	m = p.x * matrix[0][2] + p.y * matrix[1][2] + matrix[2][2];
	Point(
		(p.x * matrix[0][0] + p.y * matrix[1][0] + matrix[2][0]) / m,
		(p.x * matrix[0][1] + p.y * matrix[1][1] + matrix[2][1]) / m
	)
}

apply2dPathTransform(path : [StaticGraphicOp], matrix : [[double]]) -> [StaticGraphicOp] {
	map(path |> deconstructGraphicsPath, \op -> switch (op) {
		MoveTo(x, y): { p = apply2dPointTransform(Point(x,y), matrix); MoveTo(p.x, p.y) }
		LineTo(x, y): { p = apply2dPointTransform(Point(x,y), matrix); LineTo(p.x, p.y) }
		CubicBezierTo(x, y, cx, cy): { p = apply2dPointTransform(Point(x,y), matrix); cp = apply2dPointTransform(Point(cx,cy), matrix); CubicBezierTo(p.x, p.y, cp.x, cp.y) }
		QuadraticBezierTo(x, y, cx, cy): { p = apply2dPointTransform(Point(x,y), matrix); cp = apply2dPointTransform(Point(cx,cy), matrix); QuadraticBezierTo(p.x, p.y, cp.x, cp.y) }
		ClosePath(): op;
		default: op;
	})
}

apply2dTransform(g : Graphics, matrix : [[double]]) -> Graphics {
	Graphics(
		apply2dPathTransform(g.path, matrix),
		g.style
	)
}

make2dTransform_nop() {
	[
		[1.0, 0.0, 0.0],
		[0.0, 1.0, 0.0],
		[0.0, 0.0, 1.0],
	]
}

make2dTransform_translate(dx, dy) {
	[
		[1.0, 0.0, 0.0],
		[0.0, 1.0, 0.0],
		[ dx,  dy, 1.0],
	]
}


make2dTransform_scale(sx, sy) {
	[
		[ sx, 0.0, 0.0],
		[0.0,  sy, 0.0],
		[0.0, 0.0, 1.0],
	]
}

make2dTransform_rotate(degrees) {
	[
		[cosinus(degrees),   -sinus(degrees), 0.0],
		[  sinus(degrees),  cosinus(degrees), 0.0],
		[             0.0,               0.0, 1.0],
	]
}

make2dTransform_rotate2(degrees, axisX, axisY) {
	t1 = make2dTransform_translate(-axisX, -axisY);
	t2 = make2dTransform_rotate(degrees);
	t3 = make2dTransform_translate(axisX, axisY);
	multiplyMatrices(multiplyMatrices(t1, t2), t3)
}

deconstructGraphicsPath(path : [StaticGraphicOp]) -> [StaticGraphicOp] {
	deconstructGEllipse = \acc, x, y, wd, hgt -> {
		segs = 8;
		angleStep = 45.0;
		angleStepR = PI / 4.0;

		currAngleR = ref 0.0;
		angleMidR = ref 0.0;

		graphicsPathInit = [MoveTo(x, y - hgt)];

		lastX = ref 0.0;
		lastY = ref 0.0;

		concat3(
			acc,
			for(graphicsPathInit, \gp -> (length(gp) < segs + length(graphicsPathInit)), \gp -> {
				currAngleR := min(^currAngleR + angleStepR, 2.0 * PI);
				angleMidR := ^currAngleR - angleStepR * 0.5;

				lastX := x + sin(^currAngleR) * wd;
				lastY := y - cos(^currAngleR) * hgt;

				arrayPush(
					gp,
					CubicBezierTo(
						^lastX,
						^lastY,
						x + sin(^angleMidR) * wd / cos(angleStepR * 0.5),
						y - cos(^angleMidR) * hgt / cos(angleStepR * 0.5)
					)
				)
			}),
			[ClosePath()]
		)
	};

	fold(path, [], \acc : [StaticGraphicOp], p ->
		switch (p : StaticGraphicOp) {
			GRect(x, y, wd, hgt): {
				concat(
					acc,
					[
						MoveTo(x, y),
						LineTo(x + wd, y),
						LineTo(x + wd, y + hgt),
						LineTo(x, y + hgt),
						LineTo(x, y),
						ClosePath()
					]
				)
			}
			GRoundedRect(x, y, wd, hgt, r): {
				concat(
					acc,
					[
						MoveTo(r + x, y),
						LineTo(wd - r + x, y),
						CubicBezierTo(wd + x, r + y, wd + x, y),
						LineTo(wd + x, r + y),
						LineTo(wd + x, hgt - r + y),
						CubicBezierTo(wd - r + x, hgt + y, wd + x, hgt + y),
						LineTo(wd - r + x, hgt + y),
						LineTo(r + x, hgt + y),
						CubicBezierTo(x, hgt - r + y, x, hgt + y),
						LineTo(x, hgt - r + y),
						LineTo(x, r + y),
						CubicBezierTo(r + x, y, x, y),
						LineTo(r + x, y),
						ClosePath()
					]
				)
			}
			GEllipse(x, y, wd, hgt): {
				deconstructGEllipse(acc, x, y, wd, hgt);
			}
			GCircle(x, y, r): {
				deconstructGEllipse(acc, x, y, r, r);
			}
			default : arrayPush(acc, p);
		}
	)
}