import behaviour;
import stylestructs;
import media/types;
import string;
import net/http_types;

export {
// Without VideoSize with (both width & height non-zero) it behaves like a Picture taking
// width and height from provided video file,

// with VideoSize it rescales video accodringly. Controls allows you to attach behaviors to the movie
// that will make it possible to pause/resume and loop it.
Video : (filename : string, parameters : [VideoParameter], listeners: [VideoStreamEvent], controls: [VideoControl]);
	VideoParameter ::= VideoSize, LoopPlayback, NoAutoPlay, OnVideoLoadingError, StreamStartOffset, StreamEndOffset, RequestHeaders, SharedUrl;
		VideoSize(width : int, height : int);
		LoopPlayback();
		NoAutoPlay();
		OnVideoLoadingError : (fn : () -> void);
		StreamStartOffset : (offset : double);
		StreamEndOffset : (offset : double);
		// A style that allows you to leave specified (at the application level) tokens in the URL (without moving them to headers)
		SharedUrl();
	VideoStreamEvent ::= StreamStatus, PlayerLength, SynchroCalls, PlayerIsPlaying, PlayerPosition, PlayerPosition2;
		// low-level events; do not use
		StreamStatus(fn : (code : string) -> void);
		// Semantics:
		//   onStart called when loaded (even if failed), and when starting playback from full stop
		//   onStop called when done playing (including if failed), but never when looping
		//   A looping video may call onStart when it loops, or may not; it may be random.
		SynchroCalls(onStart : () -> void, onStop : () -> void);
		PlayerLength(length : DynamicBehaviour<double>); // seconds
		PlayerIsPlaying(isPlaying : DynamicBehaviour<bool>);
		PlayerPosition(position : DynamicBehaviour<double>, prec_msec : int); // 0 msec = no timer
		PlayerPosition2(position : DynamicBehaviour<double>, timer : DynamicBehaviour<double>);
	VideoControl ::= PlayerVolume, PlayerPause, PlayerSeek, VideoFullScreen, VideoPlayerControls, VideoPlayerSubtitles, MediaStream;
		PlayerVolume(volume : Behaviour<double>); // 0.0 - 1.0 range
		PlayerPause(pause : DynamicBehaviour<bool>);
		PlayerSeek(position : Behaviour<double>); // seconds
		// you can't start with fullscreen on and it can not be constant
		// deprecated, use FullWindow Form instead
		VideoFullScreen(stateInitializer: (DynamicBehaviour<bool>) -> void);
		VideoPlayerControls(controls : [PlayerControl]);
		VideoPlayerSubtitles(subtitle : Behaviour<VideoSubtitle>);
		VideoSubtitle(text : string, style : [CharacterStyle]);
	// This is a part of native interface - DO NOT CHANGE RANDOMLY:
	PlayerControl ::= BasicPlayerControl, PauseResume, Scrubber, PlayerControlsAlwaysVisible;
		BasicPlayerControl ::= VolumeControl, FullScreenPlayer, PlaybackRateControl;
		PauseResume();
		VolumeControl();
		FullScreenPlayer();
		Scrubber();
		PlayerControlsAlwaysVisible();
		PlaybackRateControl();

	getExternalPlayerURL(url : string) -> Maybe<string>;

	getYouTubeURL(url : string) -> Maybe<string>;
	getVimeoURL(url : string) -> Maybe<string>;
	getBrightcoveURL(url : string) -> Maybe<string>;
	getVidizmoURL(url : string) -> Maybe<string>;

	PrivacyPolicy(
		service : string,
		company : string,
		privacyPolicyURL : string,
		termsOfServiceURL : string
	);
	youTubePrivacy = PrivacyPolicy(
		"YouTube",
		"Google",
		"https://policies.google.com/privacy",
		"https://developers.google.com/youtube/terms/api-services-terms-of-service"
	);
	vimeoPrivacy = PrivacyPolicy(
		"Vimeo",
		"Vimeo",
		"https://vimeo.com/privacy",
		"https://vimeo.com/terms"
	);

	brightcovePrivacy = PrivacyPolicy(
		"Brightcove",
		"Brightcove Inc",
		"https://www.brightcove.com/en/legal/brightcove-privacy-policies/",
		"https://www.brightcove.com/en/terms-and-conditions/"
	);

	vidizmoPrivacy = PrivacyPolicy(
		"VIDIZMO",
		"VIDIZMO LLC",
		"https://vidizmo.com/privacy-policy",
		"https://vidizmo.com/terms-of-use"
	);
	getPrivacyPolicy(url : string) -> Maybe<PrivacyPolicy>;
}

getExternalPlayerURL(url : string) -> Maybe<string> {
	parsers = [getYouTubeURL, getVimeoURL, getBrightcoveURL, getVidizmoURL];
	fold(parsers, None(), \acc, parser ->
		if (isSome(acc)) acc
		else parser(url)
	);
}

getPrivacyPolicy(url : string) -> Maybe<PrivacyPolicy> {
	parsers = [getYouTubeURL, getVimeoURL, getBrightcoveURL, getVidizmoURL];
	policy = [youTubePrivacy, vimeoPrivacy, brightcovePrivacy, vimeoPrivacy];

	foldi(parsers, None(), \i, acc, parser ->
		if (isSome(acc)) acc
		else maybeBind(parser(url), \__ -> Some(policy[i]))
	);
}


getYouTubeURL(url0 : string) -> Maybe<string> {
	if (strContains(url0, "youtu.be") || strContains(url0, "youtube.com") || strContains(url0, "www.youtube-nocookie.com")) {
		if (strContains(url0, "/embed"))
			Some(url0)
		else {
			deconstructedLink = strSplit(elementAt(strSplit(url0, "?"), 1, ""), "&");

			url = either(find(deconstructedLink, \p -> startsWith(p, "v=")), "");
			parameters = strGlue(filter(deconstructedLink, \p -> p != url), "&");

			if (url != "") {
				Some("https://youtube.com/embed/" + substring(url, 2, strlen(url)) + if (parameters != "") "?" + parameters else "")
			} else {
				None();
			}
		}
	} else {
		None();
	}
}

getVimeoURL(url0 : string) -> Maybe<string> {
	if (strContains(url0, "player.vimeo.com")) {
		Some(url0)
	} else if (strContains(url0, "vimeo.com")) {
		url = firstElement(strSplit(lastElement(strSplit(url0, "/"), ""), "#"), "");

		if (url != "") {
			Some("https://player.vimeo.com/video/" + url);
		} else {
			None();
		}
	} else {
		None();
	}
}

getBrightcoveURL(url : string) -> Maybe<string> {
	if (strContains(url, "bcove.video") || strContains(url, "players.brightcove.net")) {
		Some(url)
	} else {
		None();
	}
}

getVidizmoURL(url : string) -> Maybe<string> {
	if (strContains(url, "vidizmo.com")) {
		Some(url)
	} else {
		None();
	}
}
