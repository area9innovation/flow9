import behaviour;
import stylestructs;
import media/mediastream;

export {
// Without VideoSize with (both width & height non-zero) it behaves like a Picture taking
// width and height from provided video file,

// with VideoSize it rescales video accodringly. Controls allows you to attach behaviors to the movie
// that will make it possible to pause/resume and loop it.
Video : (filename : string, parameters : [VideoParameter], listeners: [VideoStreamEvent], controls: [VideoControl]);
	VideoParameter ::= VideoSize, LoopPlayback, NoAutoPlay, OnVideoLoadingError, StreamStartOffset, StreamEndOffset;
		VideoSize(width : int, height : int);
		LoopPlayback();
		NoAutoPlay();
		OnVideoLoadingError : (fn : () -> void);
		StreamStartOffset : (offset : double);
		StreamEndOffset : (offset : double);
	VideoStreamEvent ::= StreamStatus, PlayerLength, SynchroCalls, PlayerIsPlaying, PlayerPosition, PlayerPosition2;
		// low-level events; do not use
		StreamStatus(fn : (code : string) -> void);
		// Semantics:
		//   onStart called when loaded (even if failed), and when starting playback from full stop
		//   onStop called when done playing (including if failed), but never when looping
		//   A looping video may call onStart when it loops, or may not; it may be random.
		SynchroCalls(onStart : () -> void, onStop : () -> void);
		PlayerLength(length : DynamicBehaviour<double>); // seconds
		PlayerIsPlaying(isPlaying : DynamicBehaviour<bool>);
		PlayerPosition(position : DynamicBehaviour<double>, prec_msec : int); // 0 msec = no timer
		PlayerPosition2(position : DynamicBehaviour<double>, timer : DynamicBehaviour<double>);
	VideoControl ::= PlayerVolume, PlayerPause, PlayerSeek, VideoFullScreen, VideoPlayerControls, VideoPlayerSubtitles, MediaStream;
		PlayerVolume(volume : Behaviour<double>); // 0.0 - 1.0 range
		PlayerPause(pause : DynamicBehaviour<bool>);
		PlayerSeek(position : Behaviour<double>); // seconds
		// you can't start with fullscreen on and it can not be constant
		// deprecated, use FullWindow Form instead
		VideoFullScreen(stateInitializer: (DynamicBehaviour<bool>) -> void);
		VideoPlayerControls(controls : [PlayerControl]);
		VideoPlayerSubtitles(subtitle : Behaviour<VideoSubtitle>);
		VideoSubtitle(text : string, style : [CharacterStyle]);
	// This is a part of native interface - DO NOT CHANGE RANDOMLY:
	PlayerControl ::= BasicPlayerControl, PauseResume, Scrubber, PlayerControlsAlwaysVisible;
		BasicPlayerControl ::= VolumeControl, FullScreenPlayer, PlaybackRateControl;
		PauseResume();
		VolumeControl();
		FullScreenPlayer();
		Scrubber();
		PlayerControlsAlwaysVisible();
		PlaybackRateControl();
		SubtitlesControl();
}
