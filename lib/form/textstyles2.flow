export {
	asBold : (style : [CharacterStyle]) -> [CharacterStyle];
	asItalic : (style : [CharacterStyle]) -> [CharacterStyle];
	asBoldItalic : (style : [CharacterStyle]) -> [CharacterStyle];
	asBoldOnce  : (style : [CharacterStyle]) -> [CharacterStyle];
	asItalicOnce  : (style : [CharacterStyle]) -> [CharacterStyle];
	asBoldItalicOnce  : (style : [CharacterStyle]) -> [CharacterStyle];
	isBold : (style : [CharacterStyle]) -> bool;
	isItalic : (style : [CharacterStyle]) -> bool;
	asSmallMath  : (style : [CharacterStyle]) -> [CharacterStyle];
	asMath : (style : [CharacterStyle]) -> [CharacterStyle];
	asFineSharpness : (style : [CharacterStyle]) -> [CharacterStyle];
	asSmallText : (style : [CharacterStyle]) -> [CharacterStyle];

	asRoboto : (style : [CharacterStyle]) -> [CharacterStyle];


	withFillColor : (color : int) -> (style : [CharacterStyle]) -> [CharacterStyle];
	withFillOpacity : (opacity : double) -> (style : [CharacterStyle]) -> [CharacterStyle];
	withTextSize : (size : double) -> (style : [CharacterStyle]) -> [CharacterStyle];
	withBackgroundFillColor : (color : int) -> (style : [CharacterStyle]) -> [CharacterStyle];
	mutiplyFontSizeBy : (multiplier : double) -> (style : [CharacterStyle]) -> [CharacterStyle];
	changeFontSizeTo : (multiplier : double) -> (style : [CharacterStyle]) -> [CharacterStyle];
	withTextFamily : (family : string) -> (style : [CharacterStyle]) -> [CharacterStyle];
	withFontMultiplier : (fontMultiplier : double) -> (style : [CharacterStyle]) -> [CharacterStyle];

	sizeOfText : (style : [CharacterStyle]) -> double;
	colorOfText : (style : [CharacterStyle]) -> int;
	fontFamilyOfText : (style : [CharacterStyle]) -> string;
	backColorOfText : (style : [CharacterStyle]) -> int;
	backOpacityOfText : (style : [CharacterStyle]) -> double;

	smallSizeCoeff = 0.65;
}

import stylestructs;
import string;
forbid form;

generalBoldStyle = FontFamily("Medium");
generalItalicStyle = FontFamily("Italic");
boldStyle = FontFamily("RobotoMedium");
italicStyle = FontFamily("RobotoItalic");
boldItalicStyle = FontFamily("RobotoMediumItalic");

proximaBoldStyle = FontFamily("ProximaExtraBold");
proximaItalicStyle = FontFamily("ProximaSemiItalic");
proximaBoldItalicStyle = FontFamily("ProximaExtraItalic");

asBold(style : [CharacterStyle]) -> [CharacterStyle] {
	if (startsWith(fontFamilyOfText(style), "Proxima")) concat(style, [proximaBoldStyle]) else concat(style, [boldStyle]);
}

asItalic(style) if (startsWith(fontFamilyOfText(style), "Proxima")) concat(style, [proximaItalicStyle]) else concat(style, [italicStyle]);
asBoldItalic(style) if (startsWith(fontFamilyOfText(style), "Proxima")) concat(style, [proximaBoldItalicStyle]) else concat(style, [boldItalicStyle]);

clearFontFamily(style : [CharacterStyle]) filter(style, \s -> !contains([generalBoldStyle, boldStyle, generalItalicStyle, italicStyle, boldItalicStyle, proximaBoldStyle, proximaItalicStyle, proximaBoldItalicStyle], s));
asBoldOnce(style) asBold(clearFontFamily(style));
asItalicOnce(style) asItalic(clearFontFamily(style));
asBoldItalicOnce(style) asBoldItalic(clearFontFamily(style));
asSmallText(style) style |> mutiplyFontSizeBy(smallSizeCoeff);
asSmallMath(style) style |> asRoboto |> asSmallText;
asMath(style) asRoboto(style);
asFineSharpness(style) {
	fold(style, [Sharpness(0, FontAntiAliasAdvanced(), FontGridFitSubpixel())], \acc, s -> switch(s : CharacterStyle){
		Sharpness(__, __, __) : acc;
		default : arrayPush(acc, s);
	})
}

isBold(style) exists(style, \s -> s == boldStyle || s == generalBoldStyle || s == boldItalicStyle || s == proximaBoldStyle || s == proximaBoldItalicStyle);
isItalic(style) exists(style, \s -> s == italicStyle || s == generalItalicStyle || s == boldItalicStyle|| s == proximaItalicStyle || s == proximaBoldItalicStyle);

asRoboto(style) arrayPush(style, FontFamily("Roboto"));

withFillColor(color) \style : [CharacterStyle] -> arrayPush(style, Fill(color));
withFillOpacity(opacity) \style : [CharacterStyle] -> arrayPush(style, FillOpacity(opacity));
withTextSize(size) \style : [CharacterStyle] -> arrayPush(style, FontSize(size));
withBackgroundFillColor(color) \style : [CharacterStyle] -> arrayPush(style, BackgroundFill(color));
withTextFamily(family) \style : [CharacterStyle] -> arrayPush(style, FontFamily(family));
withFontMultiplier(multiplier) \style : [CharacterStyle] -> arrayPush(style, FontSize(sizeOfText(style) * multiplier));

sizeOfText(style : [CharacterStyle]) {
	either(
		maybeMap(
			lastfindi(style, \s -> switch(s : CharacterStyle) { FontSize(size) : true; default: false; }),
			\i -> switch(style[i] : CharacterStyle) { FontSize(size) : size; default: 11.0; }
		),
		11.0 // see renderform.flow:defineTextStyle
	)
}

colorOfText(style : [CharacterStyle]) {
	either(
		maybeMap(
			lastfindi(style, \s -> switch(s : CharacterStyle) { Fill(color) : true; default: false; }),
			\i -> switch(style[i] : CharacterStyle) { Fill(color) : color; default: 0x000000; }
		),
		0x000000
	)
}

fontFamilyOfText(style : [CharacterStyle]) -> string {
	either(
		maybeMap(
			lastfindi(style, \s -> switch(s : CharacterStyle) { FontFamily(family) : true; default: false; }),
			\i -> switch(style[i] : CharacterStyle) { FontFamily(family) : family; default: "Roboto"; }
		),
		"Roboto"
	)
}

backColorOfText(style : [CharacterStyle]) {
	either(
		maybeMap(
			lastfindi(style, \s -> switch(s : CharacterStyle) { BackgroundFill(color) : true; default: false; }),
			\i -> switch(style[i] : CharacterStyle) { BackgroundFill(color) : color; default: 0x000000; }
		),
		0x000000
	)
}

backOpacityOfText(style : [CharacterStyle]) {
	either(
		maybeMap(
			lastfindi(style, \s -> switch(s : CharacterStyle) { BackgroundFillOpacity(opacity) : true; default: false; }),
			\i -> switch(style[i] : CharacterStyle) { BackgroundFillOpacity(opacity) : opacity; default: 0.0; }
		),
		0.0
	)
}

mutiplyFontSizeBy(multiplier : double) { \style : [CharacterStyle] ->
	map(style, \s -> switch(s : CharacterStyle) {
		FontSize(size) : FontSize(size * multiplier);
		default : s;
	})
}

changeFontSizeTo(size : double) { \style : [CharacterStyle] ->
	map(style, \s -> switch(s : CharacterStyle) {
		FontSize(__) : FontSize(size);
		default : s;
	})
}