import text/translation;

export {

	WriteBracketType ::= WriteLeftBracket, WriteRightBracket, WriteLeftBrace, WriteRightBrace, WriteAbsSign,
				WriteNormSign, WriteNoBracket, WriteLeftSquareBracket, WriteRightSquareBracket, WriteLeftDoubleSquareBracket, WriteRightDoubleSquareBracket,
				WriteLeftFloorBracket, WriteRightFloorBracket, WriteLeftCeilBracket, WriteRightCeilBracket;
		WriteLeftBracket : ();
		WriteRightBracket : ();
		WriteLeftBrace : ();
		WriteRightBrace : ();
		WriteAbsSign : ();
		WriteNormSign : ();
		WriteLeftSquareBracket : ();
		WriteRightSquareBracket : ();
		WriteLeftFloorBracket : ();
		WriteRightFloorBracket : ();
		WriteLeftCeilBracket : ();
		WriteRightCeilBracket : ();
		WriteLeftDoubleSquareBracket : ();
		WriteRightDoubleSquareBracket : ();
		WriteNoBracket : ();

	getBracketType : (c : string) -> WriteBracketType;

	WriteDottedElementMetrics : (
		radius      : double,
		leftWidth   : double, leftHeight   : double,
		rightWidth  : double, rightHeight  : double,
		centerWidth : double, centerHeight : double,
		topWidth    : double, topHeight    : double,
		bottomWidth : double, bottomHeight : double,
		leftSpace   : double, rightSpace   : double,
		topSpace    : double, bottomSpace  : double
	);

	DefiniteControlSignType ::= IntegralSign, SigmaSign, ProductSign, OneCharSign;
		IntegralSign : ();
		SigmaSign : ();
		ProductSign : ();
		OneCharSign : (sign : OneCharSignType);
			OneCharSignType ::= OrdinalInt, DoubleInt, TripleInt, ContourInt, SurfaceInt, VolumeInt, UnionSign, IntersectionSign;
			OrdinalInt : ();
			DoubleInt : ();
			TripleInt : ();
			ContourInt : ();
			SurfaceInt : ();
			VolumeInt : ();
			UnionSign : ();
			IntersectionSign : ();


	WriteTopModificator ::= WriteModificatorHat, WriteModificatorBar, WriteModificatorDoubleBar, WriteModificatorArrow, WriteModificatorLeftRightArrow, WriteModificatorArc, WriteModificatorNone, WriteModificatorTilde;
		WriteModificatorHat : ();
		WriteModificatorBar : ();
		WriteModificatorDoubleBar : ();
		WriteModificatorArrow : ();
		WriteModificatorLeftRightArrow : ();
		WriteModificatorArc : ();
		WriteModificatorNone : ();
		WriteModificatorTilde : ();

	WriteTopModificatorSize ::= WriteModificatorStretch, WriteModificatorFixed;
		WriteModificatorFixed : ();
		WriteModificatorStretch : ();

	WriteTopModificatorCorrections(dx : double, dy : double, dl : double);

	CustomSymbol : (symbol : CustomSymbolType);
	CustomSymbolType ::= CustomSymbolInductor, CustomSymbolCapacitor, CustomSymbolDiode, CustomSymbolResistor, CustomSymbolAcSupply, CustomSymbolDcSupply,
						CustomSymbolDiv, CustomSymbolQuestionableEquals;
		CustomSymbolInductor : ();
		CustomSymbolCapacitor : ();
		CustomSymbolDiode : ();
		CustomSymbolResistor : ();
		CustomSymbolAcSupply : ();
		CustomSymbolDcSupply : ();
		CustomSymbolDiv : ();
		CustomSymbolQuestionableEquals : ();

	writeBracket2text(bracket : WriteBracketType) -> string;
}

getBracketType(c) {
	if (c == "(") {
		WriteLeftBracket()
	} else if (c == ")") {
		WriteRightBracket()
	} else if (c == "{") {
		WriteLeftBrace()
	} else if (c == "}") {
		WriteRightBrace()
	} else if (c == "[") {
		WriteLeftSquareBracket()
	} else if (c == "]") {
		WriteRightSquareBracket()
	} else if (c == "|") {
		WriteAbsSign()
	} else {
		WriteNoBracket()
	}
}

writeBracket2text(bracket : WriteBracketType) -> string {
	switch (bracket : WriteBracketType) {
		WriteLeftBracket(): _("parenthesis");
		WriteRightBracket(): _("close parenthesis");
		WriteLeftBrace(): _("brace");
		WriteRightBrace(): _("close brace");
		WriteAbsSign(): _("absolute sign"); // ?
		WriteNormSign(): _("norm sign"); // ?
		WriteLeftSquareBracket(): _("bracket");
		WriteRightSquareBracket(): _("close bracket");
		default: "";
	}
}
