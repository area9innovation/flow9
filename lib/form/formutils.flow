
import form/form;
import math/geometry; // Point
import form/gui;
import ui/buttons; // SimpleButton
import ui/gridlayout; // GridLayout, LayoutSpec, LayoutCell
import ui/tooltip; // MakeHint, FormFontSize
import form/line; // Line

export {
	///////////////////////////////////////
	// Alignment
	///////////////////////////////////////
	Center(f : Form) -> Form;
	Center2(f : Form) -> Form;

	///////////////////////////////////////
	// Conditional
	///////////////////////////////////////

	// Warning!!! form is evaluated before condition is checked. Consider using Iff()
	If(cond : bool, form : Form) -> Form;
	IfT(cond: bool) -> ((Form) -> Form);

	Iff(cond : bool, f : () -> Form) -> Form;
	Iffe(cond : bool, form : () -> Form, elseF : () -> Form) -> Form;

	///////////////////////////////////////
	// In front/back
	///////////////////////////////////////
	DynamicBackground(styleB : Behaviour<[GraphicsStyle]>, form : Form) -> Form;

	InFront(fn : (double, double) -> Form, form : Form) -> Form;

	BoxBehind(form : Form) -> Form;
	BoxBehindMaybe(f : Form, colorM : Maybe<int>) -> Form;

	///////////////////////////////////////
	// GridLayout replacements/wrappers
	///////////////////////////////////////
	TwoColsGrowBoth(left : Form, right : Form) -> Form;
	TwoColsGrowLeft(left : Form, right : Form, gutter : double) -> Form;
	TwoColsGrowRight(left : Form, right : Form, gutter : double) -> Form;
	TwoColsGrowRightCollapsible(left : Form, right : Form, gutter : double) -> Form;
	TwoColsGrowRightCollapsibleNewSkin(left : Form, right : Form, gutter : double) -> Form;
	ThreeColsGrowMiddle(left : Form, middle : Form, right : Form) -> Form;

	TwoLinesGrowBottom(top : Form, bottom : Form, gutter : double) -> Form;
	TwoLinesGrowTop(top : Form, bottom : Form, gutter : double) -> Form;
	TwoLinesGrowTop2(top : Form, bottom : Form, gutter : double) -> Form;

	ThreeLinesGrowMiddle(top : Form, middle : Form, bottom : Form, gutter : double) -> Form;

	///////////////////////////////////////
	// Pictures from/to disk
	///////////////////////////////////////
	IconButton(path : string, pathOver : string, size : double, callback : () -> void) -> Form;

	ProgressIcon(label : string, fontSize : double) -> Form;

	ProgressIcon2(label : string, fontSize : double) -> Form;

	form2png(form : Form, path : string, callback : (Form) -> void) -> void;


	///////////////////////////////////////
	// Misc
	///////////////////////////////////////
	renderFullSizeForm(form : Form) -> (() -> void);

	// Same as Picture but allows to specify scale in url. Scale part is optional.
	// USAGE: ScaledPicture("warning.png:0.25")
	ScaledPicture(url : string, style : [PictureStyle]) -> Form;

	ArrowForm(from : Point, to : Point, style : [GraphicsStyle]) -> Form;

	FindForm(srcForm : Form, onFind:(f: Form) -> bool) -> Maybe<Form>;
}

///////////////////////////////////////
// Alignment
///////////////////////////////////////
Center(f : Form) -> Form {
	Align(0.5, 0.5, f)
}

Center2(f : Form) -> Form {
	Align2(0.5, 0.5, f)
}

///////////////////////////////////////
// Conditional
///////////////////////////////////////

If(cond : bool, form : Form) -> Form {
	if (cond) form else Empty()
}

IfT(cond: bool) -> ((Form) -> Form) {
	\form -> If(cond, form)
}

Iff(cond : bool, form : () -> Form) -> Form {
	if (cond) form() else Empty()
}

Iffe(cond : bool, form : () -> Form, elseF : () -> Form) -> Form {
	if (cond) form() else elseF()
}

///////////////////////////////////////
// In front/back
///////////////////////////////////////
DynamicBackground(styleB : Behaviour<[GraphicsStyle]>, form : Form) -> Form {
	Behind(
		\w, h -> Select(styleB, \style -> BackgroundWH(w, h, style) ),
		form
	)
}

InFront(fn, form) {
	if (isStaticForm(form)) {
		metrics = getStaticFormSize(form);
		Group([
			form,
			fn(metrics.width, metrics.height),
		]);
	} else {
		wh = makeWH();
		Group([
			Inspect([ISize(wh)], form),
			Select(
				wh, \wh2 -> {
					if (wh2.width == 0.0 || wh2.height == 0.0) { Empty() }
					else fn(wh2.width, wh2.height)
				}
			),
		]);
	}
}

FrontgroundWH(w, h, style) {
	// We set the size of the graphics to 0.0, 0.0 to preserve the baseline of any text in the form
	Size2(zeroSize, Rectangle(w, h, style));
}

// This is fake background used when we need whole rectangle process clicks.
// Probably there is some better way. Because it doesn't work with Fill attribute.
BoxBehind(form : Form) -> Form {
	Behind(
		ClickableFixed,
		form
	)
}

BoxBehind2(form : Form, color : int, opacity : double) -> Form {
	s = 2.0;

	Behind(
		\w0, h0 -> {
			Offset(-s, -s,
				BackgroundWH(w0+s*2.0, h0+s*2.0, [Fill(color), FillOpacity(opacity)])
			)
		},
		form
	)
}

BoxBehindMaybe(f : Form, colorM : Maybe<int>) -> Form {
	eitherMap(
		colorM,
		\color -> {
			BoxBehind2(f, color, 1.0)
		},
		BoxBehind2(f, green, 0.0)
	)
}

///////////////////////////////////////
// GridLayout replacements/wrappers
///////////////////////////////////////
TwoColsGrowBoth(f1 : Form, f2 : Form) -> Form {
	grid = GridLayout(
		LayoutSpec(5.0, [0.5, 0.5]),
		LayoutSpec(0.0, [1.0]),
		[
			LayoutCell(0, 0, 1, 1, NamedForm("f1")),
			LayoutCell(1, 0, 1, 1, NamedForm("f2")),
		]
	);

	namedForms1 = setTree(makeTree(), "f1", f1);
	namedForms2 = setTree(namedForms1, "f2", f2);

	grid2form2(grid, namedForms2)
}

TwoColsGrowLeft(left : Form, right : Form, gutter : double) -> Form {
	lwh = makeWH();
	awh = makeWH();

	ah = select2(awh, lwh, \a, l -> WidthHeight(l.width, a.height)) |> distinctUntilChanged;

	Inspect(
		[IAvailable2(awh)],
		Cols([
			Border(0.0, 0.0, gutter, 0.0,
				Available2(
					select2(awh, lwh, \a, l -> WidthHeight(max(0.0, a.width - l.width - gutter), max(a.height, l.height))) |> distinctUntilChanged,
					left
				)
			),
			Inspect([ISize(lwh)], Available2(ah, right))
		])
	)
}

TwoColsGrowRight(left : Form, right : Form, gutter : double) -> Form {
	lwh = makeWH();
	awh = makeWH();

	ah = select2(awh, lwh, \a, l -> WidthHeight(l.width, a.height)) |> distinctUntilChanged;

	Inspect(
		[IAvailable2(awh)],
		Cols([
			Inspect([ISize(lwh)], Available2(ah, left)),
			Border(gutter, 0.0, 0.0, 0.0,
				Available2(
					select2(awh, lwh, \a, l -> WidthHeight(max(0.0, a.width - l.width - gutter), max(a.height, l.height))) |> distinctUntilChanged,
					right
				)
			)
		])
	)
}

ArrowToTheLeft(s : double, label : string) -> Form {
	b = 2.0;
	x = s - 2.0 * b;
	y = 2.0 * x;

	Border(b, 1.0, b, 1.0,
		Align2(0.5, 0.5,
			MakeHint(
				Graphics(
					[
						MoveTo(x, 0.0),
						LineTo(x, 2.0 * y),
						LineTo(0.0, y),
						ClosePath()
					],
					[Fill(black)]
				),
				label, [FormFontSize(20.0)]
			)
		)
	)
}

ArrowToTheRight(s : double, label : string) -> Form {
	b = 2.0;
	x = s - 2.0 * b;
	y = 2.0 * x;

	Border(b, 1.0, b, 1.0,
		Align2(0.5, 0.5,
			MakeHint(
				Graphics(
					[
						MoveTo(0.0, 0.0),
						LineTo(x, y),
						LineTo(0.0, 2.0 * y),
						ClosePath()
					],
					[Fill(black)]
				),
				label, [FormFontSize(20.0)]
			)
		)
	)
}

collapsableButton(collapsePic : Form, collapseHoverPic : Form, expandPic : Form, expandHoverPic : Form, collapsedB : DynamicBehaviour<bool>) -> Form {
	Select(collapsedB, \collapsed ->
		SimpleButton(
			if (!collapsed) collapsePic else  expandPic,
			if (!collapsed) collapseHoverPic else expandHoverPic,
			"",
			\ -> next(collapsedB, !getValue(collapsedB))
		)
	)
}

TwoColsGrowRightCollapsibleNewSkin(left : Form, right : Form, gutter : double) -> Form {
	lwhB = makeWH();
	awhB = makeWH();

	ahB = select2(awhB, lwhB, \a, l -> WidthHeight(l.width, a.height)) |> distinctUntilChanged;

	collapsedB = make(false);

	collapsePic = Picture("images/Cloce_Normal.png", []);
	collapseHoverPic = Picture("images/Cloce_Hover_push.png", []);
	expandPic = Picture("images/Open_Normal.png", []);
	expandHoverPic = Picture("images/Open_Hover_push.png", []);

	Inspect(
		[IAvailable2(awhB)],
		Cols([
			Select(collapsedB, \collapsed -> {
				if (collapsed) {
					lwh = getValue(lwhB);

					next(lwhB, WidthHeight(0.0, lwh.height));
					Empty()
				} else {
					Cols([
						Inspect([ISize(lwhB)], Available2(ahB, left)),
					])
				}
			}),
			Fixed(gutter, 0.0),
			Available2(
				select2(awhB, lwhB, \a, l -> WidthHeight(max(0.0, a.width - l.width - gutter), max(a.height, l.height))) |> distinctUntilChanged,
				Group([
					right,
					Offset(-gutter/2.0, 0.0,
						Group([
							VFill(2.0, [StrokeWidth(2.0), Stroke(newGray1Color)]),
							Align(0.0, 0.5,
								Offset(-15.5, 0.0,
									Behind(
										\w, h -> Circle(w/2.0, w/2.0, w/2.0, [Fill(white), StrokeWidth(2.0), Stroke(newGray1Color)]),
										Offset(-1.0, 0.0,
											collapsableButton(collapsePic, collapseHoverPic, expandPic, expandHoverPic, collapsedB)
										)
									)
								)
							)
						])
					)
				])
			)
		])
	)
}

TwoColsGrowRightCollapsible(left : Form, right : Form, gutter : double) -> Form {
	lwhB = makeWH();
	awhB = makeWH();

	ahB = select2(awhB, lwhB, \a, l -> WidthHeight(l.width, a.height)) |> distinctUntilChanged;

	collapsedB = make(false);

	larrow = ArrowToTheLeft(gutter, "Click here to collapse left panel");
	rarrow = ArrowToTheRight(gutter, "Click here to expand left panel");

	Inspect(
		[IAvailable2(awhB)],
		Cols([
			Select(collapsedB, \collapsed -> {
				if (collapsed) {
					lwh = getValue(lwhB);

					next(lwhB, WidthHeight(0.0, lwh.height));

					SimpleButton(rarrow, rarrow, "", \-> next(collapsedB, false))
				} else {
					Cols([
						Inspect([ISize(lwhB)], Available2(ahB, left)),
						SimpleButton(larrow, larrow, "", \-> next(collapsedB, true)),
					])
				}
			}),
			Available2(
				select2(awhB, lwhB, \a, l -> WidthHeight(max(0.0, a.width - l.width - gutter), max(a.height, l.height))) |> distinctUntilChanged,
				right
			)
		])
	)
}


// Put three forms next to each other, so that the middle one gets the available space left over
// A workaround for Cols2d not working correctly. See bug 27395
ThreeColsGrowMiddle(left : Form, middle : Form, right : Form) -> Form {
	lwh = makeWH();
	rwh = makeWH();

	twh = select2(lwh, rwh, \l, r -> WidthHeight(l.width + r.width, max(l.height, r.height))) |> distinctUntilChanged;

	awh = makeWH();

	Inspect(
		[IAvailable2(awh)],
		Line([
			Inspect([ISize(lwh)], left),
			Available2(
				select2(awh, twh, \a, t -> WidthHeight(max(0.0, a.width - t.width), t.height)) |> distinctUntilChanged,
				middle
			),
			Inspect([ISize(rwh)], right),
		])
	)
}

TwoLinesGrowTop(top : Form, bottom : Form, gutter : double) -> Form {
	twh = makeWH();
	awh = makeWH();

	aw = select2(twh, awh, \t, a -> WidthHeight(a.width, t.height)) |> distinctUntilChanged;

	Inspect(
		[IAvailable2(awh)],
		Lines([
			Border(0.0, 0.0, 0.0, gutter,
				Available2(
					select2(awh, twh, \a, t -> WidthHeight(max(a.width, t.width), max(0.0, a.height - t.height - gutter))) |> distinctUntilChanged,
					top
				)
			),
			Inspect([ISize(twh)], Available2(aw, bottom)),
		])
	)
}

TwoLinesGrowTop2(top : Form, bottom : Form, gutter : double) -> Form {
	aWHB = makeWH();
	bottomWHB = makeWH();

	Inspect([IAvailable2(aWHB)],
		Lines([
			Available(
				select2(aWHB, bottomWHB, \aWH, bottomWH -> max(aWH.width, bottomWH.width)),
				select2(aWHB, bottomWHB, \aWH, bottomWH -> max(0.0, aWH.height - bottomWH.height)),
				top
			),
			Fixed(0.0, gutter),
			Inspect([ISize(bottomWHB)],
				bottom
			)
		])
	)
}

TwoLinesGrowBottom(top : Form, bottom : Form, gutter : double) -> Form {
	twh = makeWH();
	awh = makeWH();

	tav = select2(twh, awh, \t, a -> WidthHeight(a.width, t.height)) |> distinctUntilChanged;

	Inspect([IAvailable2(awh)],
		Lines([
			Inspect([ISize(twh)], Available2(tav, top)),
			Border(0.0, gutter, 0.0, 0.0,
				Available2(
					select2(awh, twh, \a, t -> WidthHeight(max(a.width, t.width), max(0.0, a.height - t.height - gutter))) |> distinctUntilChanged,
					bottom
				)
			),
		])
	)
}

ThreeLinesGrowMiddle(top : Form, middle : Form, bottom : Form, gutter : double) -> Form {
	twh = makeWH();
	bwh = makeWH();
	awh = makeWH();

	awt = select2(twh, awh, \t, a -> WidthHeight(a.width, t.height)) |> distinctUntilChanged;
	awb = select2(bwh, awh, \b, a -> WidthHeight(a.width, b.height)) |> distinctUntilChanged;

	Inspect(
		[IAvailable2(awh)],
		Lines([
			Inspect([ISize(twh)], Available2(awt, top)),
			Border(0.0, gutter, 0.0, gutter,
				Available2(
					select3(awh, twh, bwh, \a, t, b -> WidthHeight(max3(a.width, t.width, b.width), max(0.0, a.height - t.height - b.height - 2.0 * gutter))) |> distinctUntilChanged,
					middle,
				)
			),
			Inspect([ISize(bwh)], Available2(awb, bottom)),
		])
	)
}

///////////////////////////////////////
// Pictures from/to disk
///////////////////////////////////////
IconButton(path : string, pathOver : string, size : double, callback : () -> void) -> Form {
	SimpleButton(
		makePIcon(path, size),
		makePIcon(pathOver, size),
		"",
		callback
	)
}

makePIcon(path : string, size : double) -> Form {
	scale = 26.0 / size;
	Size2(const(WidthHeight(26.0, 26.0)), Scale(const(scale), const(scale), Picture(path, [])));
}

ProgressIcon(label : string, fontSize : double) -> Form {
	Align2(0.5, 0.5,
		ProgressIcon2(label, fontSize)
	)
}

ProgressIcon2(label : string, fontSize : double) -> Form {
	Lines([
		Align2(0.5, 0.0,
			FixSize(100.0, 100.0, resizeToFit(100.0, 100.0, Picture("images/splash/innovation_loader.gif", [])))
		),
		Fixed(0.0, 10.0),
		Align2(0.5, 0.0,
			Cols([
				Fixed(30.0, 0.0),
				Text(if (label == "") "" else (label + "..."), [FontFamily("Roboto"), FontSize(fontSize), Fill(black)])
			])
		)
	])
}


form2png(form : Form, path : string, callback : (Form) -> void) -> void {
    if(cpp) {
        clearFn = render(form);

        timer(100, \-> {
            takeWindowSnapshot(path);
            mf = takeSnapshot(form);
            clearFn();
            gc();
            callback(mf);
        })
    } else {
        callback(Empty())
    }
}

///////////////////////////////////////
// Misc
///////////////////////////////////////
renderFullSizeForm(form : Form) -> (() -> void) {
	div = 10.0;

	render(
		Center(
			Border(div, div, div, div,
				resizeToUseWidthHeight(
					Border(div, div, div, div,
						form
					)
				)
			)
		)
	)
}

ScaledPicture(url : string, style : [PictureStyle]) {

	params = strSplit(url, ":");
	pic = Picture(params[0], style);

	scale = if (length(params) == 2)
		s2d(params[1])
	else
		1.0;

	if (scale == 1.0)
		pic
	else
		Scale(const(scale), const(scale), pic)
}

ArrowForm(from : Point, to : Point, style : [GraphicsStyle]) -> Form {
	// edge source
	fx = from.x;
	fy = from.y;

	// edge target
	tx = to.x;
	ty = to.y;

	// length of the edge
	h = sqrt(dpow(fy-ty, 2.0) + dpow(tx-fx, 2.0));

	// length of the arrow side
	l = 10.0;

	// how close to the target should arrow be? (0.5 is in the middle)
	percent = 0.5;

	// arrow starting point
	ax = fx + percent*(tx-fx);
	ay = fy + (ax-fx)*(ty-fy)/(tx-fx);


	// angle between the edge and vertical
	ca = (fy-ty) / h; // cos(alpha)
	sa = (tx-fx) / h; // sin(alpha)

	// angle between the arrow side and the edge
	b = 20.0;
	cb = cosinus(b);
	sb = sinus(b);

	// "right" end of the arrow side
	rds = (sa*cb - ca*sb) * l;	// adjacent delta
	rdc = (ca*cb + sa*sb) * l;	// opposite delta

	rx = ax - rds;
	ry = ay + rdc;

	// "left" end of the arrow side
	lds = (sa*cb + ca*sb) * l;	// adjacent delta
	ldc = (ca*cb - sa*sb) * l; 	// opposite delta

	lx = ax - lds;
	ly = ay + ldc;

	Graphics(
		[
			MoveTo(fx, fy),
			LineTo(tx, ty),
			MoveTo(ax, ay),
			LineTo(rx, ry),
			MoveTo(ax, ay),
			LineTo(lx, ly),
			ClosePath()
		],
		style
	)
}


FindForm(srcForm : Form, onFind:(f: Form) -> bool) -> Maybe<Form> {
	findOneForm = \ -> {
		if (onFind(srcForm))
			Some(srcForm)
		else
			None();
	}

	findTwoForm = \ f -> {
		if (onFind(srcForm))
			Some(srcForm)
		else
			FindForm(f, onFind);
	}

	findArryForm = \ forms -> {
		if (onFind(srcForm))
				Some(srcForm)
		else {
			fold(forms, None(), \acc, f -> {
				if (acc == None())
					FindForm(f, onFind)
				else
					acc;
			});
		}
	}

	findMatrixForm = \ forms -> {
		if (onFind(srcForm))
				Some(srcForm)
		else
			fold(forms, None(), \acc1, lines -> {
				if (acc1 == None()) {
					fold(lines, None(), \acc2, f -> {
						if (acc2 == None())
							FindForm(f, onFind)
						else
							acc2;
					});
				} else
					acc1;
			});
	}
	switch (srcForm : Form) {
		Empty(): findOneForm();
		Constructor(form, construct): findTwoForm(form);
		Create2(current, fn): findTwoForm(if (^current != Empty()) ^current else fn());
		Text(text, style): findOneForm();
		Picture(url, style): findOneForm();
		Camera(filename, parameters, listeners, controls): findOneForm();
		Graphics(path, style): findOneForm();
		Translate(x, y, form): findTwoForm(form);
		Border(left, top, right, bottom, form): findTwoForm(form);
		Scale(x, y, form): findTwoForm(form);
		Rotate(degrees, form): findTwoForm(form);
		Alpha(alpha, form): findTwoForm(form);
		Visible(visible, form): findTwoForm(form);
		Available2(awh, form): findTwoForm(form);
		Size2(wh, form): findTwoForm(form);
		SetPending(pen, form): findTwoForm(form);
		Baseline(baseline, form): findTwoForm(form);
		Group(forms): findArryForm(forms);
		Grid(cells): findMatrixForm(cells);
		Mutable2(behaviour, stack): findTwoForm(getValue(behaviour));
		Switch(index, cases): findArryForm(cases);
		Interactive(listeners, form): findTwoForm(form);
		TextInput(state, listeners, stateaccess): findOneForm();
		Video(filename, parameters, listeners, controls): findOneForm();
		Mask2(form, mask, stack): findTwoForm(form);
		Filter2(filters, form, stack): findTwoForm(form);
		Cursor(shape, form): findTwoForm(form);
		Inspect(inspectors, form): findTwoForm(form);
		Crop2(left, top, cwidth, cheight, form, stack): findTwoForm(form);
		Access(properties, form): findTwoForm(form);
		RealHTML2(url, wh, style): findOneForm();
		ControlFocus(focus, form): findTwoForm(form);
		FullWindow(fs, form): findTwoForm(form);
		FullScreen(fs, form): findTwoForm(form);
		NativeForm(__, __, __, fn): findOneForm();
		DynamicGroup2(__, __, __, __) : findOneForm(); // Placeholder
	}
}
