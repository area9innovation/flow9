import runtime;
import behaviour;
import transforms;
import form/form;

export {

	// Aspects as they are known in simulators, visualize and elsewhere
	// An aspect is simply a named enum.
	Aspect : (name : string, value : DynamicBehaviour<int>, values : [string]);

	makeAspect : (string, [string]) -> Aspect;
	getAspectStringValue : (Aspect) -> string;
	setAspect : (aspect : Aspect, value : int) -> void;
	setAspectValue : (aspect : Aspect, value : string) -> void;
	subscribeAspect : (Aspect, (int) -> void) -> () -> void;
	selectAspectValue : (Aspect, (string) -> ?) -> Behaviour<?>;
	matchAspect : (DynamicBehaviour<int>, [Aspect], [[string]]) -> void;
	AspectVisibility : (Form, [Aspect], [[string]]) -> Form;

}

// Implementation

makeAspect(name, values) {
	Aspect(name, make(0), values);
}

getAspectStringValue(aspect) {
	v = getValue(aspect.value);
	(aspect.values)[v];
}

setAspect(aspect, value) {
	if (value <= -1 || value >= length(aspect.values)) 
		println("Illegal aspect value " + toString(value) + " for aspect " + aspect.name)
	else
		nextDistinct(aspect.value, value)
}

setAspectValue(aspect, value) {
	i = elemIndex(aspect.values, value, -1);
	if (i == -1) 
		println("Illegal aspect value " + toString(value) + " for aspect " + aspect.name)
	else
		nextDistinct(aspect.value, i);
}

subscribeAspect(aspect, fn) {
	subscribe(aspect.value, fn)
}

selectAspectValue(aspect, fn) {
	select(aspect.value, \v -> fn((aspect.values)[v]));
}

matchAspect(visibilityBehaviour, aspects, values) { // a situation matcher function. v is for subscribing after currying
	setVisibility(visibilityBehaviour, forall(
		zipWith(aspects, values,
			\a, vs -> exists(
				map(vs, (\v -> getAspectStringValue(a) == v)),
				\x -> x
			)
		),
		\x -> x
	))
}

AspectVisibility(form, aspects, values) {
	formVisibility = make(0);
	fn = \dummy -> { matchAspect(formVisibility, aspects, values); };
	fn(0);
	picture = Switch(formVisibility, [Empty(), form]);

	Constructor(picture, \ -> {
		unsubsribers = map(aspects, \aspect -> subscribeAspect(aspect, fn));
		\ -> applyall(unsubsribers);
	})
}

setVisibility(behaviour : DynamicBehaviour<int>, value : bool){
	if (value) { nextDistinct(behaviour, 1) }
	else { nextDistinct(behaviour, 0) }
}
