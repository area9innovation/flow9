import ui/fontmapping;
export {
	// Denotes that previous element or its last subpart should be placed
	// on the same line as following element or its first subpart..
	GlueFragments : ();
	RelativeAlignment ::= StartAlign, EndAlign;
	AbsoluteAlignment ::= LeftAlign, RightAlign;
	CommonAlignment ::= CenterAlign, AbsoluteAlignment, RelativeAlignment;

	ParaLineAlignment ::= CommonAlignment, Justify;

	ParagraphAlignment ::= ParaLineAlignment, TightWidth; // Most rich alignment union.
			// The default alignment
		LeftAlign : ();
		RightAlign : ();
		CenterAlign : ();
		StartAlign : ();
		EndAlign : ();
		Justify : ();
		// Like LeftAlign, but the total width of the paragraph is only as big as required.
		// Without it, the total width may (but not guaranteed to, at least for wiki) be larger even if not required.
		TightWidth : ();
	commonAlignmentIsLeft(align: CommonAlignment) -> bool;
	commonAlignmentIsStart(align: CommonAlignment) -> bool;
	commonAlignmentIsAbs(align: CommonAlignment) -> bool;
	commonAlignmentIsRel(align: CommonAlignment) -> bool;
	commonAlignment2abs(align: CommonAlignment, isRTL : bool) -> CommonAlignment;
	commonAlignment2rel(align: CommonAlignment) -> CommonAlignment;
	paraLineAlignment2abs(align: ParaLineAlignment) -> ParaLineAlignment;

	alignStyles : [ParaLineAlignment] = [StartAlign(), CenterAlign(), EndAlign(), Justify(), LeftAlign(), RightAlign()];
}

relativeLeftAlign() -> RelativeAlignment {
	if (getDefaultRtl()) EndAlign() else StartAlign();
}

commonAlignmentIsLeft(align: CommonAlignment) -> bool {
	switch (align) {
		LeftAlign(): true;
		StartAlign(): !getDefaultRtl();
		EndAlign(): getDefaultRtl();
		default: false;
	}
}

commonAlignmentIsStart(align: CommonAlignment) -> bool {
	switch (align) {
		StartAlign(): true;
		LeftAlign(): !getDefaultRtl();
		RightAlign(): getDefaultRtl();
		default: false;
	}
}

commonAlignmentIsAbs(align: CommonAlignment) -> bool {
	switch (align) {
		LeftAlign(): true;
		RightAlign(): true;
		default: false;
	}
}

commonAlignmentIsRel(align: CommonAlignment) -> bool {
	switch (align) {
		StartAlign(): true;
		EndAlign(): true;
		default: false;
	}
}

commonAlignment2abs(align: CommonAlignment, isRTL : bool) -> CommonAlignment {
	switch (align) {
		StartAlign(): if (isRTL) RightAlign() else LeftAlign();
		EndAlign(): if (isRTL) LeftAlign() else RightAlign();
		default: align;
	}
}

commonAlignment2rel(align: CommonAlignment) -> CommonAlignment {
	switch (align) {
		LeftAlign(): if (getDefaultRtl()) EndAlign() else StartAlign();
		RightAlign(): if (getDefaultRtl()) StartAlign() else EndAlign();
		default: align;
	}
}

paraLineAlignment2abs(align: ParaLineAlignment) -> ParaLineAlignment {
	switch (align) {
		Justify(): align;
		CommonAlignment(): commonAlignment2abs(align, getDefaultRtl());
	}
}
