import form/paragraphtypes;
import form/line;
import form/baseline;
import text/bidi_text;

import text/blueprint;

export {
	makeAlphabetAwareTextField(txt : string, style : [CharacterStyle]) -> native;
	renderParagraph(p : [ParagraphElement], s : [ParagraphStyle], rtl : bool, widthManager : ParagraphWidthManager) -> Form;
	renderParagraphEx(p : [ParagraphElement], s : [ParagraphStyle], rtl : bool, widthManager : ParagraphWidthManager, renderedLinesInfoM : Maybe<DynamicBehaviour<[WigiRenderedLinesInfo]>>) -> Form;
	getLineIndent(paraIndent : double, isFirstLine : bool) -> double;
	makeZeroSpaceElement(style : [CharacterStyle]) -> Form;
	general2WrapElement(elem : GeneralWrapElement, style : [CharacterStyle], wordDecorator : (Form) -> Form) -> WrapElement;
	makeWrapElementsFromGeneralTextFragments(fragments : GeneralTextFragments) -> List<WrapElement>;
	generalEmptyLineInspectElement(id : int) -> GeneralInspectElement;
	keepFormTogether(form : Form) -> bool;

	StoryWidthManager(
		paragraphManagers : [ParagraphWidthManager],
		getParagraphManagerAt: (int) -> ParagraphWidthManager,
		width : Behaviour<double>,
		infoOnly : bool, /* do not control width of paragraphs, just gather their widths */
		constructor : () -> () -> void,
	);
	ParagraphWidthManager(
		storyWidth : Behaviour<double>,
		width : DynamicBehaviour<double>,
		infoOnly : bool
	);

	makeStoryWidthManager(paragraphs : int, infoOnly : bool) -> StoryWidthManager;
	dummyParagraphWidthManager = ParagraphWidthManager(const(0.0), make(0.0), true);
	dummyStoryWidthManager = StoryWidthManager([], \__ -> dummyParagraphWidthManager, zero, true, \ -> nop);

	calcParaLineAlignmentOffset(slack : double, lineIndent : double, rtl : bool, alignment : ParaLineAlignment) -> double;

	INF_METRICS = 100000.0;

	isUrlParameterEscUnescHTMLTrue() -> bool;
	// Helper to pass accessibility properties from material to forms
	// Used in material2form
	accessibilityParent : ref Maybe<flow> = ref None();

	// Will be populated when rendering wigi document with real height of all lines from top-level paragraphs
	WigiRenderedLinesInfoStyle(baselines : DynamicBehaviour<[DynamicBehaviour<[WigiRenderedLinesInfo]>]>);
		WigiRenderedLinesInfo(height : double, baseline : double);
		dummyWigiRenderedLinesInfo = WigiRenderedLinesInfo(0.0, 0.0);
}

// TODO:
// - When joining texts, wait with calculating the new metrics until all texts have been joined up
// - Unsubscribe when reflowing

/*
To render a paragraph, we first collect individual words which need to stay together on the same line.
That happens in expandGlueFragments. Each of the words is then categorized as a text or ghost element.
Ghost elements are rendered once, and then moved around when reflows happen. Text elements are
reconstructed on each reflow, because we combine them together to have as few sprites for text as
possible, and because rendering words in the same sprite improves the interword spacing.
*/

// Intermediately used typed as a union of ParagraphElement and WrapElement and ParaOneWord
ParaElement ::= ParagraphElement, WrapElement, ParaAtomic;

// After expanding elements to words
ParaAtomic ::= Form, ParaOneWord, TextElement, InteractiveParaAtomic;
	// A range of elements that need to be on the same line
	ParaOneWord(elements : [Form]);
	InteractiveParaAtomic(elem : ParaAtomic, interactivityId : int);

GhostForm ::= Form, Ghosted; // It is important that GhostForm is a super type of Ghosted
	Ghost(xc : DynamicBehaviour<double>, yc : DynamicBehaviour<double>, form : Form);

// For dynamic elements, we use a ghost to allow reuse of the physical forms
Ghosted ::= Empty, Ghost, CoordinateInspectElement, InspectGhost;
	CoordinateInspectElement(inspector : ParaElementInspector, form : Form);
	InspectGhost(
		inspector : ParaElementInspector,
		form : Form
	);

// Each word to be placed in the paragraph, including the metrics and as well as any ghost constructed
ParaWord(
	word : ParaAtomic,
	metrics : Transform<FormMetrics>,
	ghosted : Ghosted,
	form: GhostForm,
	interactivityIdM : Maybe<int>
);

ParaWordWidth(rigidWidth : double, softWidth : double, finalRigidWidthDelta : double, finalSoftWidthDelta : double);
ParaWordGroup(words : [ParaWord], width : ParaWordWidth);

ParaLine(words : [ParaWord], indent : double);
ParaLineAcc(lines : List<Form>, y : double, baseline : double);

OptimizedLineElement(f : GhostForm, metrics : Transform<FormMetrics>, interactivityIdM : Maybe<int>);
ParaLineInfo(optimizedLine : [OptimizedLineElement], lineAsc : double, lineHeight : double, lineWidth : double, lineIndent : double);
ParaLinesInfos(lines : [ParaLineInfo], maxLineWidth : double);
ParaLineResult(form : Form, width : double, height : double, baseline : double);

makeWrapElementsFromGeneralTextFragments(fragments : GeneralTextFragments) -> List<WrapElement> {
	mapList(fragments.elements, \elem -> general2WrapElement(elem, fragments.style, idfn))
}

makeZeroSpaceElement(style : [CharacterStyle]) -> Form {
	spaceMetrics = getStaticFormSize(Text(" ", style));
	fixBaseline(spaceMetrics.baseline, Fixed(0.0, spaceMetrics.height))
}

generalEmptyLineInspectElement(id : int) -> GeneralInspectElement {
	GeneralInspectElement(
		ParaElementInspector(make(id), make(0.), make(0.), makeWH(), make(0.), make(0.), make(0), make(false)),
		EmptyLineElement()
	)
}

general2WrapElement(elem : GeneralWrapElement, style : [CharacterStyle], wordDecorator : (Form) -> Form) -> WrapElement {
	switch (elem) {
		GeneralText(txt) : {
			Text(txt, applyAlphabetStyles(detectAlphabet(txt), style)) |> wordDecorator;
		}
		GeneralDynamicText(txt) : {
			Text(txt, applyAlphabetStyles(detectAlphabet(txt), style)) |> wordDecorator;
		}
		GeneralSpace(txt, alBef, alAft) : {
			Space(Text(txt, apply2AlphabetsScaling(alBef, alAft, style)) |> wordDecorator);
		}
		NewLine() : NewLine();
		GeneralLinePart(f, m, e) : LinePart(Text(f, style) |> wordDecorator, Text(m, style), Text(e, style) |> wordDecorator);
		EmptyLineElement() : makeZeroSpaceElement(style);
		GeneralInspectElement(inspector, element) : InspectElement(
			inspector,
			cast(general2WrapElement(element, style, wordDecorator) : WrapElement -> InspectableElement)
		);
		NonTextElement() : Empty();
	}
}

makeAlphabetAwareTextField(txt : string, style : [CharacterStyle]) -> native {
	overridden = applyAlphabetStyles(detectAlphabet(txt), style);
	textfield = makeTextfield(getMappedFontFamily(overridden));
	rtl = extractStruct(style, SetRTL(getDefaultRtl())).rtl;
	setTextDirection(textfield, if (rtl) "rtl" else "ltr");
	dstyle = getDefinedTextStyle(overridden);
	setTextAndStyle(
		textfield,
		if (isUrlParameterEscUnescHTMLTrue() && cpp) {
			esc = extractStruct(style, EscapeHTML(true)).escape;
			if (esc) xmlEscapeText(txt) else txt;
		} else txt,
		dstyle.face.family,
		dstyle.fontSize,
		dstyle.face.weight,
		dstyle.face.slope,
		dstyle.fillColor,
		dstyle.fillOpacity,
		dstyle.letterSpacing,
		dstyle.backgroundColor,
		dstyle.backgroundOpacity
	);
	textfield
}

renderParagraph(
	p : [ParagraphElement],
	s : [ParagraphStyle],
	rtl : bool,
	widthManager : ParagraphWidthManager
) -> Form {
	renderParagraphEx(p, s, rtl, widthManager, None());
}

extractParaAtomicForm = \word1 : ParaWord -> {
	w : ParaAtomic = word1.word;
	f : Form = switch(w : ParaAtomic) {
		ParaOneWord(__): Empty();
		InspectElement(__, __): Empty();
		LinePart(first, inline, last): inline;
		Space(s): s;
		default: cast(w : ParaAtomic -> Form);
	};
	f
};

getWordForm = \word1 -> {
	g = word1.ghosted;
	switch (g: Ghosted) {
		Empty(): extractParaAtomicForm(word1);
		Ghost(xc, yc, f): f;
		InspectGhost(__, f): f;
		CoordinateInspectElement(__, f): f;
	};
};

defaultFontSizeStyle = FontSize(14.0);
zeroParaWordWidth = ParaWordWidth(0.0, 0.0, 0.0, 0.0);
emptyParaWordGroup = ParaWordGroup([], zeroParaWordWidth);
paraLinePartFinal = isUrlParameterTrue("plpf");
paraLinePartFinalD = b2d(paraLinePartFinal);

makeParaWord2(word2 : ParaWord, form2 : Form) -> ParaWord {
	g = word2.ghosted;
	replaceWordGhosted = \ -> {
		switch (g : Ghosted) {
			Empty(): Empty();
			Ghost(xc, yc, __): Ghost(xc, yc, form2);
			InspectGhost(inspector, __): InspectGhost(inspector, form2);
			CoordinateInspectElement(inspector, __): CoordinateInspectElement(inspector, form2);
		}
	};

	ghosted = replaceWordGhosted();
	ghostedForm = {
		switch (g : Ghosted) {
			Empty(): extractParaAtomicForm(word2);
			default: ghosted;
		};
	};
	ParaWord(word2.word, const(getStaticFormSize(form2)), ghosted, ghostedForm, word2.interactivityIdM)
};


getParaWordWidth(word : ParaWord, isFirst : bool) -> ParaWordWidth {
	fgetw = \w -> fgetValue(makeParaWord2(word, w).metrics).width;
	p = switch(word.word) {
		LinePart(f, p, e):
			if (isFirst) fgetw(f) |> \h -> Pair(h, h)
			else Pair(fgetw(p), fgetw(e));
		default: fgetValue(word.metrics).width |> \h -> Pair(h, h);
	};
	if (word.word == Empty())
		// Non-text
		ParaWordWidth(p.first, 0.0, paraLinePartFinalD*(p.second-p.first), 0.0)  // Non-text
	else
		// Text
		ParaWordWidth(0.0, p.first, 0.0, paraLinePartFinalD*(p.second-p.first))  // Text
};

addParaWordWidth(w1 : ParaWordWidth, w2 : ParaWordWidth) -> ParaWordWidth {
	ParaWordWidth(w1.rigidWidth + w2.rigidWidth, w1.softWidth + w2.softWidth, w2.finalRigidWidthDelta, w2.finalSoftWidthDelta)
}

getParaWordWidthValue(w : ParaWordWidth, textScale : double) -> double {
	w.rigidWidth + w.finalRigidWidthDelta + textScale * (w.softWidth + w.finalSoftWidthDelta)
}

renderParagraphEx(
	p : [ParagraphElement],
	s : [ParagraphStyle],
	rtl : bool,
	widthManager : ParagraphWidthManager,
	renderedLinesInfoM : Maybe<DynamicBehaviour<[WigiRenderedLinesInfo]>>
) -> Form {

	alignment : ParaLineAlignment = extractParaLineAlignment(s);
	genIndent = extractStruct(s, GeneralIndent(0.0)).indent;
	needIndent = genIndent != 0.0;

	interactiveStyles = extractStruct(s, ParagraphInteractiveStyleTree(makeTree())).styleTree;

	interlineSpacing = extractStruct(s, InterlineSpacing(0.0)).d;
	interLineHighlighting = containsStruct(s, InterlineHighlighting());
	fitLongWords = containsStruct(s, ParagraphFitLongWords());

	tightWidth = contains(s, TightWidth());

	fill = filtermap(s, \st -> switch (st) {
		Fill(__): Some(st);
		FillOpacity(__): Some(st);
		default: None();
	});

	topLineBaseline = contains(s, TopLineBaseline());

	indent = extractStruct(s, FirstLineIndent(0.0)).indent;
	linesCountB = extractStruct(s, ParagraphLinesCount(make(0))).count;

	isSingleLine = containsStruct(s, ParagraphSingleLine());
	isParagraphMarked = containsStruct(s, ParagraphMarked());
	paragraphBorder = extractStruct(s, ParagraphBorder(0.0, 0.0));

	// Expand elements into word-units
	glued : List<ParaAtomic> = expandGlueFragments(p, false, makeList(), makeList(), 0);
	// Construct our ParaWords
	gluedArr = list2array(glued);
	words : [ParaWord] = mapi(gluedArr, \i, word -> makeParaWord(
		word,
		i + 1 == length(gluedArr) || containsStruct(s, IgnoreLetterspacingOnReflow())
	));

	keepFormTogetherOrWithMark = \form1, i -> keepFormTogether(form1) || (isParagraphMarked && i <= 1);
	addWordToGroup = \group, word -> ParaWordGroup(arrayPush(group.words, word), addParaWordWidth(group.width, getParaWordWidth(word, group.words==[])));

	getWordGhostedForm = \word1 -> {
		g = word1.ghosted;
		switch (g : Ghosted) {
			Empty(): extractParaAtomicForm(word1);
			Ghost(xc, yc, fm): g;
			InspectGhost(__, fm): g;
			CoordinateInspectElement(__, __): g;
		}
	};


	aw = make(0.0);
	update = make(0);
	linesB : DynamicBehaviour<ParaLinesInfos> = make(ParaLinesInfos([], 0.0));

	renderParaLinesFn = \lines, storyWidth -> {
		renderParaLines(
			storyWidth, lines, tightWidth, alignment, interlineSpacing,
			topLineBaseline, interactiveStyles, rtl, isParagraphMarked,
			interLineHighlighting,
			renderedLinesInfoM
		);
	}
	paragraphAccessibilityParent = ^accessibilityParent;
	renderWrapper = \updaterWrapper ->
		\lines, storyWidth -> {
			prevAccessibilityParent = ^accessibilityParent;
			accessibilityParent := paragraphAccessibilityParent;
			rendered = renderParaLinesFn(
				lines,
				if (storyWidth > 0.0) storyWidth else getValue(aw),
			);
			updaterWrapper(\-> nextDistinct(widthManager.width, lines.maxLineWidth));
			accessibilityParent := prevAccessibilityParent;
			rendered
		};

	renderedParagraph = if (widthManager == dummyParagraphWidthManager) {
		// it renders all words but for dynamics it just reserves space and updates coordinates
		Select(linesB, \lines -> renderWrapper(ignore)(lines, -1.0));
	} else if (widthManager.infoOnly) {
		// in this non-TightWidth case we just inform WidthManager about our width
		// we will not take story width into account in this case, but use availableWidth as usual
		Select(linesB, \lines -> renderWrapper(\fn -> fn())(lines, -1.0));
	} else {
		// we have to notify story about changes in our width.
		// it could alter widthManager.storyWidth if we are new winner so we have to defer
		Select2(linesB, widthManager.storyWidth, renderWrapper(deferUntilNextFrameRendered))
	}

	// If there is less or equal than upper limit of dynamic elements, we do not need to postpone updates
	dynamicWords = filter(words, \w -> !isFConst(w.metrics));
	ndynamic = length(dynamicWords);
	ndymamicUpper = extractStruct(s, DynamicBlockDelay(getParagraphDynamicBlockDelay())).n;

	contentGroup = Group(concat(
		[if (fill != []) Background(fill, renderedParagraph) else renderedParagraph],
		filtermap(words, \word -> {
			applyStyles = \form -> eitherMap(
				lookupTree(interactiveStyles, either(word.interactivityIdM, -1)),
				\wordStyles -> {
					applyListenersAndModifiers(wordStyles, form)
					|>(\f -> applyBlockHighlighting(wordStyles, f))
				},
				form
			);
			switch (word.ghosted : Ghosted) {
				Empty(): None();
				Ghost(x, y, f): Some(Translate(x, y, applyStyles(f)));
				InspectGhost(inspector, f): Some(Translate(inspector.x, inspector.y, applyStyles(f)));
				CoordinateInspectElement(__, __): None();
			}
		})
	));

	Constructor(
		Inspect(
			[AvailableWidth2(aw)],
			if (paragraphBorder.top > 0.0 || paragraphBorder.bottom > 0.0) {
				Border(0.0, paragraphBorder.top, 0.0, paragraphBorder.bottom, contentGroup);
			} else {
				contentGroup;
			}
		),
		\ -> {
			updateFn = \wi-> {
				// TODO use lists instead.
				wordGroups = foldi(words, Pair([], false), \i, acc : Pair<[ParaWordGroup]>, word -> {
					form = getWordGhostedForm(word);
					group = lastElement(acc.first, emptyParaWordGroup);
					makeGroup_wasSpaceP = switch (word.word) {
						NewLine(): Pair(true, false);
						Space(__): Pair(false, true);
						LinePart(__, __, __): Pair(true, false);
						default: {
							f = getWordForm(word);
							// it is no use to make line with zero-width content, so we continue counting if the width is 0
							// For example, single WigiRecursive in line get surrounded by WigiText("",[]), WigiRecursive, WigiText("",[])
							// such construction becomes [Empty, form, Empty] and we should keep them on the same line
							Pair(
								if (keepFormTogetherOrWithMark(f, i) || 0.0 == group.width.rigidWidth + group.width.softWidth) {
									false;
								} else {
									true
								},
								false
							)
						};
					}
					Pair(
						if (makeGroup_wasSpaceP.first || acc.second) arrayPush(acc.first, addWordToGroup(emptyParaWordGroup, setWordForm(word, form)))
						else arrayPush(take(acc.first, length(acc.first)-1), addWordToGroup(group, setWordForm(word, form))),
						makeGroup_wasSpaceP.second
					)
				}).first;

				// Ignore negative widths
				// It's the safest way to simulate single line, because reflowParaWords2 does a lot of useful stuff.
				w = if (isSingleLine) INF_METRICS else max(0.0, wi);
				infos = getParaLineInfos(
					alignment,
					wordGroups,
					w,
					indent,
					isParagraphMarked,
					rtl,
					fitLongWords,
					extractStruct(s, defaultFontSizeStyle).size
				);

				nextDistinct(linesCountB, length(infos));
				// We have to rerender even when lines are identical, at minimum to move things because of potential size changes
				next(linesB, ParaLinesInfos(infos, fold(infos, 0.0, \acc, info -> max(info.lineWidth, acc))));
			};

			uns = concatA([
				[
					subscribe(aw, \v -> updateFn(v)),
				],
				if (ndynamic == 0 || ndynamic == ndymamicUpper) [] else
				[
					subscribe2(update, \u -> {
						// When an update from a dynamic element is requested, we do it in the next frame
						if (u == 1) deferUntilNextFrameRendered(\ -> {
							next(update, 0);
							updateFn(getValue(aw))
						})
					})
				],
				mapi(dynamicWords, \i, w -> makeSubscribe2(w.metrics, \m -> if (i < ndymamicUpper) updateFn(getValue(aw)) else nextDistinct(update, 1))())
			]);
			\ -> applyall(uns)
		}
	)
	|> (\f -> {
		if (needIndent) {
			if (rtl) Border(0.0, 0.0, genIndent, 0.0, f) else Border(genIndent, 0.0, 0.0, 0.0, f)
		} else {
			f
		}
	})
}

getParaLineInfos(
	alignment : ParaLineAlignment,
	wordGroups : [ParaWordGroup],
	availableWidth : double,
	indent : double,
	isParagraphMarked : bool,
	rtl : bool,
	shrinkLongWords : bool,
	fontSize : double
) -> [ParaLineInfo] {
	textScale = if (shrinkLongWords && wordGroups != []) {
		maxWidthGroup : ParaWordGroup = fold(
			tail(wordGroups),
			wordGroups[0],
			\maxGroup : ParaWordGroup, group : ParaWordGroup -> {
				width = getParaWordWidthValue(group.width, 1.0);
				if (width > getParaWordWidthValue(maxGroup.width, 1.0)) group else maxGroup
			}
		);
		if (getParaWordWidthValue(maxWidthGroup.width, 1.0) > availableWidth) {
			(availableWidth - maxWidthGroup.width.rigidWidth - maxWidthGroup.width.finalRigidWidthDelta) / (maxWidthGroup.width.softWidth + maxWidthGroup.width.finalSoftWidthDelta)
		} else 1.0
	} else 1.0;
	reflowResult = reflowParaWords(wordGroups, availableWidth, indent, rtl, fontSize, textScale);
	map(reflowResult, \line -> {
		optimizedLine = getOptimizedLine(line.words, alignment);
		metrics = map(optimizedLine, \ole -> fgetValue(ole.metrics));
		lineAsc = fold(metrics, 0.0, \ac, m -> max(ac, m.baseline));
		ParaLineInfo(
			optimizedLine,
			lineAsc,
			fold(metrics, 0.0, \ac, m -> max(ac, m.height + lineAsc - m.baseline)),
			fold(metrics, line.indent, \ac, m -> ac + m.width),
			line.indent,
		)
	});
}

// Introduce a ParaOneWord that group the words together, so that we do not have to worry about joins
expandGlueFragments(
	elements : [ParaElement],
	glueNext : bool,
	running : List<ParaAtomic>,
	acc : List<ParaAtomic>,
	runLength : int,
) -> List<ParaAtomic> {

	flush = \ -> {
		if (runLength == 0) {
			acc;
		} else if (runLength == 1) {
			Cons(headList(running, Empty()), acc);
		} else {
			wds = foldList(running, makeList(), \acc2, ra : ParaAtomic -> {
				switch (ra : ParaAtomic) {
					ParaOneWord(wds): acc2;
					NewLine(): acc2;
					Space(f): Cons(f, acc2);
					LinePart(pr, i, po): Cons(i, acc2);
					InspectElement(inspector, e): {
						switch (e : InspectableElement) {
							Space(f): Cons(f, acc2);
							Text(t, s): Cons(e, acc2);
							default: Cons(cast(e : InspectableElement -> Form), acc2);
						}
					}
					InteractiveParaAtomic(ia, id) : {
						Cons(cast(ia : ParaAtomic -> Form), acc2);
					}
					default: {
						Cons(cast(ra : ParaAtomic -> Form), acc2);
					}
				}
			});
			Cons(ParaOneWord(list2array(reverseList(wds))), acc)
		};
	};

	n = length(elements);
	if (n == 0) {
		flush();
	} else {
		rest = tail(elements);
		e = elements[0];
		switch (e : ParaElement) {
			GlueFragments(): expandGlueFragments(rest, true, running, acc, runLength);
			TextFragments(parts): {
				p : [WrapElement] = list2array(parts);
				expandGlueFragments(concat(p, rest), glueNext, running, acc, runLength);
			}
			// TODO rewrite via switch subunion syntax when implemented.
			default: {
				en = switch (e : ParaElement) {
					WordWrapInteractive(wElem, id): {
						InteractiveParaAtomic(cast(wElem : WrapElement -> ParaAtomic), id)
					}
					default: cast(e : ParaElement -> ParaAtomic);
				}
				if (glueNext) {
					expandGlueFragments(rest, false, Cons(en, running), acc, runLength + 1);
				} else {
					expandGlueFragments(rest, false, Cons(en, makeList()), flush(), 1);
				}
			}
		}
	}
}

makeInteractiveParaWord(
	w : ParaAtomic,
	interactivityIdM : Maybe<int>,
	ignoreLetterSpacing : bool
) -> ParaWord {
	s2w = \s : Pair<Form, Transform<FormMetrics>> -> {
		if (!isGhostable(s.first)) {
			ParaWord(s.first, s.second, Empty(), Empty(), interactivityIdM);
		} else {
			x = make(0.0);
			y = make(0.0);
			ParaWord(Empty(), s.second, Ghost(x, y, s.first), Empty(), interactivityIdM);
		}
	}
	switch (w : ParaAtomic) {
		NewLine(): ParaWord(w, const(zeroMetrics), Empty(), Empty(), interactivityIdM);
		// We choose the middle part
		LinePart(f, p, e): {
			dynFormSizePair = getDynamicFormSize2(p, true);
			ParaWord(
				LinePart(f, p, e),
				dynFormSizePair.second,
				CoordinateInspectElement(
					ParaElementInspector(
						make(0),
						make(0.),
						make(0.),
						makeWH(),
						make(0.),
						make(0.),
						make(0),
						make(false)
					),
					dynFormSizePair.first,
				),
				Empty(),
				interactivityIdM
			);
		}
		Space(s): {
			dynFormSizePair = getJoinableTextMetrics(s, true, ignoreLetterSpacing);
			ParaWord(Space(dynFormSizePair.first), dynFormSizePair.second, Empty(), Empty(), interactivityIdM);
		}
		ParaOneWord(wd): {
			oc = optimizeCols(wd);
			line : Form = Line(oc);
			getDynamicFormSize(line) |> s2w;
		}
		InspectElement(inspector, e): {
			makeWord = \word, form -> ParaWord(
				word,
				getJoinableTextMetrics(form, false, ignoreLetterSpacing).second,
				CoordinateInspectElement(inspector, form),
				Empty(),
				interactivityIdM
			);
			switch (e : InspectableElement) {
				Text(t, s): {
					makeWord(e, e);
				}
				LinePart(f, m, l): {
					makeWord(LinePart(f, m, l), m);
				}
				Space(t): {
					makeWord(Space(t), t);
				}
				default: {
					s = getJoinableTextMetrics(
						cast(e : InspectableElement -> Form),
						false,
						ignoreLetterSpacing
					);
					ParaWord(Empty(), s.second, InspectGhost(inspector, s.first), Empty(), interactivityIdM);
				}
			}
		}
		InteractiveParaAtomic(word, id) : {
			makeInteractiveParaWord(word, Some(id), ignoreLetterSpacing);
		}
		default: {
			opt = optimizeForm(cast(w : ParaAtomic -> Form));
			getJoinableTextMetrics(opt, false, ignoreLetterSpacing) |> s2w;
		}
	}
}

getJoinableTextMetrics(
	form: Form,
	getExactTopPoint : bool,
	ignoreLetterSpacing : bool
) -> Pair<Form, Transform<FormMetrics>> {

	getDefault = \-> {
		formSize : Pair<Form, Behaviour<FormMetrics>> = getDynamicFormSize2(form, getExactTopPoint);
		Pair(formSize.first, cast(formSize.second : Behaviour<FormMetrics> -> Transform<FormMetrics>))
	};
	if (ignoreLetterSpacing) {
		getDefault()
	} else switch (form) {
		Text(text, st) : {
			letterSpacing = extractStruct(st, LetterSpacing(0.0)).spacing;
			staticMetrics = getStaticFormSizeCached2(form, getExactTopPoint);

			metrics : Pair<Form, Transform<FormMetrics>> = if (isSafariBrowser() && !isUrlParameterFalse("dynamic_text_metrics")) {
				textWidth = make(staticMetrics.width);
				Pair(
					Text(text, arrayPush(st, TextWidthInspector(textWidth))),
					fselect(textWidth, FLift(\tw -> FormMetrics(staticMetrics with
						width = tw + letterSpacing
					)))
				);
			} else {
				metrics : Behaviour<FormMetrics> = const(FormMetrics(staticMetrics with width = staticMetrics.width + letterSpacing));
				Pair(form, cast(metrics : Behaviour<FormMetrics> -> Transform<FormMetrics>));
			}

			metrics
		}
		default : getDefault()
	}
}

makeParaWord(w : ParaAtomic, ignoreLetterSpacing : bool) -> ParaWord {
	switch (w) {
		InteractiveParaAtomic(word, id): makeInteractiveParaWord(
			word,
			Some(id),
			ignoreLetterSpacing
		);
		default : makeInteractiveParaWord(
			w,
			None(),
			ignoreLetterSpacing
		);
	}
}

isGhostable(f : Form) -> bool {
	switch (f) {
		Text(t, s): false;
		default: {
			true;
		}
	}
}

// We indent the first line if paragraph's first-line indent is positive
// or all of the other lines if the indent is negative.
getLineIndent(paraIndent : double, isFirstLine : bool) -> double {
	if (paraIndent > 0.0 && isFirstLine || paraIndent < 0.0 && !isFirstLine) abs(paraIndent)
	else 0.0;
}

// Given a bunch of words, a constant amount of width for paragraph, a first-line indent, this does the line breaking
reflowParaWords(
	wordGroups : [ParaWordGroup],
	availableParaWidth : double,
	paraIndent : double,
	rtl : bool,
	fontSize : double,
	textScale : double,
) -> [ParaLine] {

	firstLineWidth = availableParaWidth - getLineIndent(paraIndent, true);
	reflowResult = reflowParaWords2(
		wordGroups,
		firstLineWidth,
		firstLineWidth,
		[],
		[],
		paraIndent,
		fontSize,
		textScale
	);

	if (rtl)
		zipWith(
			reflowResult,
			reflowTextToBiDi(map(reflowResult, \l -> l.words), isWordEmpty, getWordText, setWordText, idfn, rtl),
			\l, ws -> ParaLine(ws, l.indent),
		)
	else reflowResult;
}

// here availableWidth is an amount of width for current line
reflowParaWords2(
	wordGroups : [ParaWordGroup],
	availableWidth : double,
	remainingWithSpacing : double,
	currentWordGroups : [ParaWordGroup],
	result : [ParaLine],
	paraIndent : double,
	fontSize : double,
	textScale : double
) -> [ParaLine] {
	remaining = remainingWithSpacing - getUserDefinedWordSpacingPercent() * fontSize;

	addLine = \cwordgroups : [ParaWordGroup], indent : double -> {
		cwords = concatA(map(cwordgroups, \g -> g.words));
		cwordslasti = length(cwords)-1;
		if (cwords == []) result else arrayPush(result, ParaLine({
			cw = mapi(cwords, \cwordi, cword -> {
				switch(cword.word) {
					LinePart(f, p, e):
						makeParaWord2(cword, if (cwordi == 0) f else if (cwordi < cwordslasti) p else e);
					default: cword;
				}
			});

			if (textScale == 1.0) cw else {
				scale = \f -> Scale(const(textScale), const(textScale), f);
				map(cw, \w -> {
					switch (w.word) {
						Empty(): w;  // Non-text
						default: {
							// Text
							wform = w.form;
							ParaWord(
								w.word,
								fselect(w.metrics, FLift(\fm -> FormMetrics(fm.width*textScale, fm.height*textScale, fm.baseline*textScale, fm.dHeight*textScale))),
								switch (w.ghosted : Ghosted) {
									Empty(): Empty();
									Ghost(x, y, f): Ghost(x, y, scale(f));
									InspectGhost(inspector, f): InspectGhost(inspector, scale(f));
									CoordinateInspectElement(i, f): CoordinateInspectElement(i, scale(f));
								},
								switch (wform) {
									Ghost(xc, yc, form): Ghost(xc, yc, scale(form));
									CoordinateInspectElement(inspector, form): CoordinateInspectElement(inspector, scale(form));
									InspectGhost(inspector, form): InspectGhost(inspector, scale(form));
									Form(): scale(wform);
								},
								w.interactivityIdM
							)
						}
					}
				})
			}},
			indent
		))
	}

	detachWord = \w : ParaWord, detach : bool -> {
		switch (w.ghosted) {
			CoordinateInspectElement(inspector, __): nextDistinct(inspector.detached, detach);
			default: {
				switch (w.form) {
					CoordinateInspectElement(inspector, __): nextDistinct(inspector.detached, detach);
					default: {}
				}
			}
		}
	}

	lineIndex = length(result);

	lineIndent = getLineIndent(paraIndent, lineIndex==0);
	nextLineWidth = availableWidth + lineIndent - getLineIndent(paraIndent, false);

	if (wordGroups == []) {
		addLine(currentWordGroups, lineIndent);
	} else {
		group = wordGroups[0];
		word = group.words[0];
		wordWidth = getParaWordWidth(word, paraLinePartFinal);
		detachWord(word, false);
		restGroups = tail(wordGroups);
		restFinalDeltaOrg = if (length(group.words) > 1) group.width else zeroParaWordWidth;
		restGroup = ParaWordGroup(
			tail(group.words),
			ParaWordWidth(group.width.rigidWidth - wordWidth.rigidWidth, group.width.softWidth - wordWidth.softWidth, restFinalDeltaOrg.finalRigidWidthDelta, restFinalDeltaOrg.finalSoftWidthDelta)
		);
		rest = if(restGroup.words == []) restGroups else concat([restGroup], restGroups);
		groupWidth = getParaWordWidthValue(group.width, textScale);
		switch (word.word : ParaAtomic) {
			NewLine(): {
				reflowParaWords2(
					rest,
					nextLineWidth,
					nextLineWidth,
					[],
					addLine(currentWordGroups, lineIndent),
					paraIndent,
					fontSize,
					textScale
				);
			}
			Space(s): {

				// LSTSBU-454
				// Spaces at the beginning of a line had been dropped before, but this block has been removed in order to have identical view in wigi editor and preview
				if (groupWidth < remaining) {
					reflowParaWords2(
						restGroups,
						availableWidth,
						remaining - groupWidth,
						arrayPush(currentWordGroups, group),
						result,
						paraIndent,
						fontSize,
						textScale
					);
				} else {
					detachWord(word, true);
					reflowParaWords2(
						rest,
						nextLineWidth,
						nextLineWidth,
						[],
						addLine(currentWordGroups, lineIndent),
						paraIndent,
						fontSize,
						textScale
					);
				}
			}
			default: {

				if (groupWidth <= remaining || currentWordGroups == []) { // Overflow situation where a word is longer than the available width

					reflowParaWords2(
						restGroups,
						availableWidth,
						remaining - groupWidth,
						arrayPush(currentWordGroups, group),
						result,
						paraIndent,
						fontSize,
						textScale
					);
				} else {
					reflowParaWords2(
						wordGroups,
						nextLineWidth,
						nextLineWidth,
						[],
						addLine(currentWordGroups, lineIndent),
						paraIndent,
						fontSize,
						textScale
					);
				}
			}
		}
	}
}

// This function gets the form and decides, should the next form kept together in the same line or should it be placed on the next line
keepFormTogether(form : Form) -> bool {
	switch (form) {
		Empty(): true;
		Text(t, __): t != " " && t != "­";  // Space or soft hyphen.
		Alpha(__, f): keepFormTogether(f);
		Size2(__, f): keepFormTogether(f);
		Access(__, f): keepFormTogether(f);
		Rotate(__, f): keepFormTogether(f);
		Cursor(__, f): keepFormTogether(f);
		Visible(__, f): keepFormTogether(f);
		Inspect(__, f): keepFormTogether(f);
		Baseline(__, f): keepFormTogether(f);
		Scale(__, __, f): keepFormTogether(f);
		Mask2(f, __, __): keepFormTogether(f);
		SetPending(__, f): keepFormTogether(f);
		Available2(__, f): keepFormTogether(f);
		Filter2(__, f, __): keepFormTogether(f);
		Interactive(__, f): keepFormTogether(f);
		Constructor(f, __): keepFormTogether(f);
		Create2(current, fn): keepFormTogether(if (^current != Empty()) ^current else fn());
		Translate(__, __, f): keepFormTogether(f);
		Mutable2(f, __): keepFormTogether(getValue(f));
		Border(__, __, __, __, f): keepFormTogether(f);
		Crop2(__, __, __, __, f, __): keepFormTogether(f);
		Group(fs): any(map(fs, \f -> keepFormTogether(f)));
		Switch(i, fs): keepFormTogether(if (getValue(i) < length(fs)) fs[getValue(i)] else { println("STRANGE CASE"); Empty(); });
		Grid(__): false; // Unlikely to be a part of a word. But maybe should go recursive.
		Picture(__, __): false;
		Graphics(__, __): false;
		Video(__, __, __, __): false;
		TextInput(__, __, __): false;
		Camera(__, __, __, __): false;
		RealHTML2(__, __, __): false;
		ControlFocus(__, f): keepFormTogether(f);
		FullWindow(__, f): keepFormTogether(f);
		FullScreen(__, f): keepFormTogether(f);
		NativeForm(__, __, __, __): false;
		DynamicGroup2(__, __, __, __) : false; // Placeholder
	};
}

// renders lines and returns resulting forms along with their tight width at the rendering time
renderParaLines(
	availableWidth : double,
	lines : ParaLinesInfos,
	tightWidth : bool,
	alignment: ParaLineAlignment,
	interlineSpacing : double,
	topLineBaseline : bool,
	styleTree : Tree<int, [ParaElementInteractiveStyle]>,
	rtl : bool,
	isMarked : bool,
	interLineHighlighting : bool,
	renderedLinesInfoM : Maybe<DynamicBehaviour<[WigiRenderedLinesInfo]>>
) -> Form {
	lasti = length(lines.lines) - 1;
	a : ParaLineAcc = foldi(lines.lines, ParaLineAcc(EmptyList(), 0.0, 0.0), \i : int, acc : ParaLineAcc, lineInfo : ParaLineInfo -> {
		// TODO: IF the line ends with NewLine (which we do not track here), we should consider it a last line and not justify
		lastLine = i == lasti;
		// On the last line, we do not justify.
		// Also if the line is single with TightWidth, any alignment is equal to StartAlign
		lineAlignment =
			if (alignment == Justify() && lastLine) {
				StartAlign()
			} else {
				alignment;
			}
		f = RenderLine(
			acc.y, lineInfo,
			availableWidth, lineAlignment,
			i, styleTree, rtl, isMarked,
			if (interLineHighlighting) {
				if (i == 0) 0. else - interlineSpacing / 2.0
			} else 0.0,
			if (interLineHighlighting){
				if (lastLine || i == 0) interlineSpacing / 2.0 else interlineSpacing
			} else 0.0
		);
		ParaLineAcc(
			Cons(Size2(const(zeroWH), f.form), acc.lines),
			acc.y + f.height + if (lastLine) 0. else interlineSpacing,
			if (i == 0 || !topLineBaseline) f.baseline else acc.baseline
		);
	});

	maybeApply(
		renderedLinesInfoM,
		\renderedLinesInfo -> {
			nextDistinct(renderedLinesInfo, map(lines.lines, \info : ParaLineInfo -> WigiRenderedLinesInfo(info.lineHeight, info.lineAsc)));
		}
	);

	Baseline(const(a.baseline), Size2(const(WidthHeight(if (tightWidth) lines.maxLineWidth else max(availableWidth, lines.maxLineWidth), a.y)),
		Group(list2array(a.lines))
	))
}

getOptimizedLine(words : [ParaWord], alignment : ParaLineAlignment) -> [OptimizedLineElement]{
	if (isBiDiEnabled() || alignment == Justify()) {
		map(words, \w -> OptimizedLineElement(w.form, w.metrics, w.interactivityIdM));
	} else {
		optimizeLine(words);
	};
}

calcParaLineAlignmentOffset(slack : double, lineIndent : double, rtl : bool, alignment : ParaLineAlignment) -> double {
	startOffset = if (rtl) max(slack, 0.) else 0.;
	endOffset = if (rtl) 0. else max(0., slack);
	switch (alignment : ParaLineAlignment) {
		LeftAlign(): if (rtl) endOffset else startOffset;
		RightAlign(): if (rtl) startOffset else endOffset;
		CenterAlign(): max(0.0, slack / 2.0);
		StartAlign(): startOffset;
		EndAlign(): endOffset;
		Justify(): 0.0;
	} + (if (rtl) 0. else lineIndent);
}

// Aligns all elements to the baseline, as well as calculates the height and the baseline
// Send out the result, width, height
RenderLine(
	y : double,
	info : ParaLineInfo,
	width : double,
	alignment : ParaLineAlignment,
	lineNumber : int,
	interactiveStyles : Tree<int, [ParaElementInteractiveStyle]>,
	rtl : bool,
	isMarked : bool,
	highLightOffset : double,
	interlineSpacing : double,
) -> ParaLineResult {
	remaining = width - info.lineWidth;
	alignmentOffset = ref calcParaLineAlignmentOffset(remaining, info.lineIndent, rtl, alignment);

	// Inter-word spacing for justification
	interWord = if (alignment == Justify() && length(info.optimizedLine) > 1) {
		nwords = length(info.optimizedLine);
		min(10.0, remaining / i2d(nwords - 1));
	} else 0.0;

	// The width and the individual forms
	lo : [Form] = filtermapi(info.optimizedLine, \i : int, elem : OptimizedLineElement -> {
		f = elem.f;
		m = fgetValue(elem.metrics);
		intStyleContains = \st : ParaElementInteractiveStyle -> eitherMap(
			elem.interactivityIdM,
			\id -> containsStruct(
				lookupTreeDef(interactiveStyles, id, []),
				st
			),
			false
		);

		isSuperscript = intStyleContains(ParaElementSuperscript());
		isSubscript = intStyleContains(ParaElementSubscript());

		dy = if (isSuperscript) {
			if (i == 0) -1.0 else info.lineAsc - m.baseline - fgetValue(info.optimizedLine[i - 1].metrics).height * 0.4
		} else info.lineAsc - m.baseline / (if (isSubscript) 2.0 else 1.0);
		applyStylesAndOffset = \fm : Form -> eitherMap(
			elem.interactivityIdM,
			\id -> applyIntStylesAndHighlighting(
				fm,
				lookupTreeDef(interactiveStyles, id, []),
				^alignmentOffset,
				y,
				dy,
				m.width,
				info.lineHeight,
				interWord,
				highLightOffset,
				interlineSpacing
			),
			Translate(const(^alignmentOffset), const(y + dy), fm)
		);

		justifyOffset = if (isMarked && i == 0 && lineNumber == 0) 0.0 else interWord;

		r = switch (f : GhostForm) {
			Empty(): None();
			Ghost(xc, yc, fm): {
				nextDistinct(xc, ^alignmentOffset);
				nextDistinct(yc, y + dy);
				Some(applyStylesAndOffset(Empty()));
			}
			InspectGhost(inspector, fm): {
				nextDistinct(inspector.x, ^alignmentOffset);
				nextDistinct(inspector.y, y + dy);
				nextDistinct(inspector.size, WidthHeight(m.width, m.height));
				nextDistinct(inspector.lineHeight, info.lineHeight);
				nextDistinct(inspector.lineNumber, lineNumber);
				Some(applyStylesAndOffset(Empty()));
			}
			CoordinateInspectElement(inspector, fm): {
				fo = applyStylesAndOffset(fm);
				nextDistinct(inspector.x, ^alignmentOffset);
				nextDistinct(inspector.y, y + dy);
				nextDistinct(inspector.size, WidthHeight(m.width, m.height));
				nextDistinct(inspector.lineHeight, info.lineHeight);
				nextDistinct(inspector.lineNumber, lineNumber);
				Some(fo);
			}
			default: Some(applyStylesAndOffset(cast(f : GhostForm -> Form)))
		}

		alignmentOffset := ^alignmentOffset + if (m.width == 0.0 || intStyleContains(IgnoreMetrics())) 0.0 else m.width + justifyOffset;
		r;
	});
	ParaLineResult(
		Group(lo),
		info.lineWidth,
		info.lineHeight,
		y + info.lineAsc
	);
}

applyIntStylesAndHighlighting(
	form : Form,
	styles : [ParaElementInteractiveStyle],
	xOffset : double,
	yOffset : double,
	baselineShift : double,
	width : double,
	height : double,
	interWord : double,
	highLightOffset : double,
	interlineSpacing : double,
) -> Form {
	getStyleForBackgroundFromCharStyle = \s -> eitherMap(
		tryExtractStruct(s, BackgroundFill(white)),
		\backFill -> [
			Fill(backFill.color),
			FillOpacity(extractStruct(s, BackgroundFillOpacity(1.0)).opacity)
		],
		[]
	);

	makeBackRect = \defStyle, dynStyle -> Rectangle(
		width + interWord,
		height + interlineSpacing + 0.1,
		replaceStructMany(
			getStyleForBackgroundFromCharStyle(defStyle),
			getStyleForBackgroundFromCharStyle(dynStyle)
		)
	);

	dynamicHighlightStyleBM = tryExtractStruct(styles, DynamicHighlightStyle(make([]), false));

	textAndBackPair = switch(form) {
		Text(txt, txtStyle) : {

			makeTxt = \dynStyle -> Text(
				txt,
				removeAllStructsMany(
					replaceStructMany(txtStyle, dynStyle),
					[BackgroundFill(0), BackgroundFillOpacity(0.0)]
				)
			);

			// We draw custom highlighting to fix gaps for cases of justifying alignment
			// And to have more straight and pretty highlighting.
			eitherMap(
				dynamicHighlightStyleBM,
				\dynHlStyle -> Pair(
					Select(dynHlStyle.styleB, \chStyle -> makeTxt(chStyle)),
					Select(dynHlStyle.styleB, \chStyle -> makeBackRect(txtStyle, chStyle))
				),
				Pair(makeTxt([]), makeBackRect(txtStyle, []))
			)
		}
		default : Pair(
			form,
			eitherMap(
				dynamicHighlightStyleBM,
				\dynHlStyle -> Select(dynHlStyle.styleB, \chStyle -> makeBackRect([], chStyle)),
				Empty()
			)
		);
	}

	modifiedForm = applyListenersAndModifiers(styles, textAndBackPair.first);

	Group([
		Translate(const(xOffset - interWord / 2.), const(yOffset + highLightOffset), textAndBackPair.second),
		Translate(const(xOffset), const(yOffset + baselineShift), modifiedForm),
	]);
}

applyListenersAndModifiers(styles : [ParaElementInteractiveStyle], form : Form) -> Form {
	if (form == Empty()) form else {
		formModifiersM = tryExtractStruct(styles, FormModifiers([]));
		modifiedForm = eitherMap(
			formModifiersM,
			\modifiers -> fold(modifiers.fns, form, \acc, fn -> fn(acc)),
			form
		);

		eventListenersM = tryExtractStruct(styles, EventListeners([]));
		eitherMap(
			eventListenersM,
			\el -> Interactive(el.listeners, modifiedForm),
			modifiedForm
		);
	}
}

applyBlockHighlighting(styles : [ParaElementInteractiveStyle], form : Form) -> Form {
	eitherMap(tryExtractStruct(styles, DynamicHighlightStyle(make([]), false)),
	\dynamicHlStyle -> {
		if (dynamicHlStyle.extraHighlight) {
			getStyleForRectFromCharStyle = \s -> eitherMap(
				tryExtractStruct(s, BackgroundFill(white)),
				\backFill -> [
					Stroke(backFill.color),
					StrokeOpacity(extractStruct(s, BackgroundFillOpacity(1.0)).opacity),
					StrokeWidth(3.0),
				],
				[]
			);

			makeRect = \dynStyle, wh : WidthHeight -> Rectangle(
				wh.width,
				wh.height,
				getStyleForRectFromCharStyle(dynStyle)
			);

			whB = makeWH();
			Group([
				Inspect([ISize(whB)], form),
				Select2(dynamicHlStyle.styleB, whB, makeRect),
			])
		} else form
	},
	form
	)
}

// Joins texts together to a single text element, along with the new metrics
optimizeLine(words : [ParaWord]) -> [OptimizedLineElement] {
	fold(words, makeList(), \acc : List<OptimizedLineElement>, word : ParaWord -> {
		f = word.form;
		metrics = word.metrics;
		intIdM = word.interactivityIdM;
		switch(acc){
			EmptyList(): Cons(OptimizedLineElement(f, metrics, intIdM), acc);
			Cons(p, tail_): {
				switch (p.f : GhostForm) {
					Text(t1, s1): {
						switch (f : GhostForm) {
							Text(t2, s2): {
								join = joinText(t1, s1, t2, s2);
								if (length(join) == 1 && intIdM == p.interactivityIdM) {
									t : Form = join[0];
									// TODO: Do not do this until at the end of the joining fest
									m = getStaticFormSize(t);

									joinedWordMetrics = FormMetrics(m with
										width = m.width + extractStruct(s2, LetterSpacing(0.0)).spacing
									);

									// Replace the last element with the newly joined
									Cons(
										OptimizedLineElement(t, const(joinedWordMetrics), intIdM),
										tail_
									);
								} else Cons(OptimizedLineElement(f, metrics, intIdM), acc);
							}
							default: {
								Cons(OptimizedLineElement(f, metrics, intIdM), acc);
							}
						}
					}
					default: Cons(OptimizedLineElement(f, metrics, intIdM), acc);
				}
			}
		}
	}) |> list2array
}

isWordEmpty(w: ParaWord) -> bool {
	switch(w.word) {
		Text(t, __): t == "";
		default: false;
	}
}

getWordText(w: ParaWord) -> string {
	switch(w.word) {
		Text(t, __): t;
		Empty(): switch (w.form) {
			InspectGhost(__, form): getFormText(form);
			Ghost(__, __, form): getFormText(form);
			default: "";
		};
		default: "";
	}
}

setWordText(w: ParaWord, t: string) -> ParaWord {
	switch(w.word) {
		Text(__, s): ParaWord(
			Text(t, s), w.metrics, w.ghosted,
			switch(w.form) {
				CoordinateInspectElement(inspector, form): CoordinateInspectElement(
					inspector,
					Text(t, getFormTextStyle(form))
				);
				Text(__, fs): Text(t, fs);
				default: w.form;
			},
			w.interactivityIdM
		);
		default: w;
	};
}

setWordForm(word: ParaWord, form: GhostForm) -> ParaWord {
	ParaWord(word.word, word.metrics, word.ghosted, form, word.interactivityIdM);
};

makeStoryWidthManager(paragraphs : int, infoOnly : bool) -> StoryWidthManager {
	paragraphWidths = generate(0, paragraphs, \__ -> make(0.0));
	storyWidth = make(0.0);

	paragraphManagers = map(paragraphWidths, \pw -> ParagraphWidthManager(storyWidth, pw, infoOnly));
	StoryWidthManager(
		paragraphManagers,
		\i -> elementAt(paragraphManagers, i, dummyParagraphWidthManager),
		storyWidth,
		infoOnly,
		\ -> {
			if (infoOnly) {
				nop
			} else {
				maxWidth = arrayMaxu(paragraphWidths);
				uns = [
					maxWidth.second,
					connectDistinct(maxWidth.first, storyWidth)
				];
				\ -> applyall(uns);
			}
		}
	)
}

// Not with others because referenced from flow9 repo.
isUrlParameterEscUnescHTMLTrue() -> bool {
	isUrlParameterTrue("753");
}
