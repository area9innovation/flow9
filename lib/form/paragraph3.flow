import form/paragraphtypes;
import form/line;
import form/baseline;
import text/bidi_text;

import text/blueprint;

export {
	renderParagraph(p : [ParagraphElement], s : [ParagraphStyle], rtl : bool, widthManager : WigiParagraphWidthManager) -> Form;
	getLineIndent(paraIndent : double, lineIndex : int) -> double;
	makeZeroSpaceElement(style : [CharacterStyle]) -> Form;
	general2WrapElement(elem : GeneralWrapElement, style : [CharacterStyle]) -> WrapElement;
	makeWrapElementsFromGeneralTextFragments(fragments : GeneralTextFragments) -> List<WrapElement>;
	generalEmptyLineInspectElement(id : int) -> GeneralInspectElement;
	keepFormTogether(form : Form) -> bool;

	WigiStoryWidthManager(
		paragraphManagers : [WigiParagraphWidthManager],
		getParagraphManagerAt: (int) -> WigiParagraphWidthManager,
		width : Behaviour<double>,
		infoOnly : bool, /* do not control width of paragraphs, just gather their widths */
		constructor : () -> () -> void,
	);
	WigiParagraphWidthManager(
		storyWidth : Behaviour<double>,
		width : DynamicBehaviour<double>,
		infoOnly : bool
	);

	makeWigiStoryWidthManager(paragraphs : int, infoOnly : bool) -> WigiStoryWidthManager;
	dummyWigiParagraphWidthManager = WigiParagraphWidthManager(const(0.0), make(0.0), true);
	dummyWigiStoryWidthManager = WigiStoryWidthManager([], \__ -> dummyWigiParagraphWidthManager, zero, true, \ -> nop);
}

// TODO:
// - When joining texts, wait with calculating the new metrics until all texts have been joined up
// - Unsubscribe when reflowing

/*
To render a paragraph, we first collect individual words which need to stay together on the same line.
That happens in expandGlueFragments. Each of the words is then categorized as a text or ghost element.
Ghost elements are rendered once, and then moved around when reflows happen. Text elements are
reconstructed on each reflow, because we combine them together to have as few sprites for text as
possible, and because rendering words in the same sprite improves the interword spacing.
*/


// Intermediately used typed as a union of ParagraphElement and WrapElement and ParaOneWord
ParaElement ::= ParagraphElement, WrapElement, ParaAtomic;

// After expanding elements to words
ParaAtomic ::= Form, ParaOneWord, TextElement, InteractiveParaAtomic;
	// A range of elements that need to be on the same line
	ParaOneWord(elements : [Form]);
	InteractiveParaAtomic(elem : ParaAtomic, interactivityId : int);

GhostForm ::= Form, Ghosted; // It is important that GhostForm is a super type of Ghosted
	Ghost(xc : DynamicBehaviour<double>, yc : DynamicBehaviour<double>, form : Form);

// For dynamic elements, we use a ghost to allow reuse of the physical forms
Ghosted ::= Empty, Ghost, CoordinateInspectElement, InspectGhost;
	CoordinateInspectElement(inspector : ParaElementInspector, form : Form);
	InspectGhost(
		inspector : ParaElementInspector,
		form : Form
	);

// Each word to be placed in the paragraph, including the metrics and as well as any ghost constructed
ParaWord(
	word : ParaAtomic,
	metrics : Behaviour<FormMetrics>,
	ghosted : Ghosted,
	form: GhostForm,
	interactivityIdM : Maybe<int>
);

makeWrapElementsFromGeneralTextFragments(fragments : GeneralTextFragments) -> List<WrapElement> {
	mapList(fragments.elements, \elem -> general2WrapElement(elem, fragments.style))
}

makeZeroSpaceElement(style : [CharacterStyle]) -> Form {
	spaceMetrics = getStaticFormSize(Text(" ", style));
	fixBaseline(spaceMetrics.baseline, Fixed(0.0, spaceMetrics.height))
}

generalEmptyLineInspectElement(id : int) -> GeneralInspectElement {
	GeneralInspectElement(
		ParaElementInspector(make(id), make(0.), make(0.), makeWH(), make(0.), make(0.), make(0), make(false)),
		EmptyLineElement()
	)
}

general2WrapElement(elem : GeneralWrapElement, style : [CharacterStyle]) -> WrapElement {
	switch (elem) {
		GeneralText(txt) : Text(txt, overrideCharacterStylePerAlphabet(txt, style));
		GeneralSpace(txt) : Space(Text(txt, style));
		NewLine() : NewLine();
		GeneralLinePart(f, m, e) : LinePart(Text(f, style), Text(m, style), Text(e, style));
		EmptyLineElement() : makeZeroSpaceElement(style);
		GeneralInspectElement(inspector, element) : InspectElement(
			inspector,
			cast(general2WrapElement(element, style) : WrapElement -> InspectableElement)
		);
		NonTextElement() : Empty();
	}
}

renderParagraph(
	p : [ParagraphElement],
	s : [ParagraphStyle],
	rtl : bool,
	widthManager : WigiParagraphWidthManager
) -> Form {

	alignment : ParaLineAlignment = extractParaLineAlignment(s);
	genIndent = extractStruct(s, GeneralIndent(0.0)).indent;
	needIndent = genIndent != 0.0;

	interactiveStyles = extractStruct(s, ParagraphInteractiveStyleTree(makeTree())).styleTree;

	interlineSpacing = extractStruct(s, InterlineSpacing(0.0)).d;

	tightWidth = contains(s, TightWidth());

	fill = filtermap(s, \st -> switch (st) {
		Fill(__): Some(st);
		FillOpacity(__): Some(st);
		default: None();
	});

	topLineBaseline = contains(s, TopLineBaseline());

	indent = extractStruct(s, FirstLineIndent(0.0)).indent;
	linesCountB = extractStruct(s, ParagraphLinesCount(make(0))).count;

	isSingleLine = containsStruct(s, ParagraphSingleLine());
	isParagraphMarked = containsStruct(s, ParagraphMarked());
	paragraphBorder = extractStruct(s, ParagraphBorder(0.0, 0.0));

	// Expand elements into word-units
	glued : List<ParaAtomic> = expandGlueFragments(p, false, makeList(), makeList(), 0);
	// Construct our ParaWords
	words : [ParaWord] = map(list2array(glued), makeParaWord);

	aw = make(0.0);
	update = make(0);
	linesB : DynamicBehaviour<[ParaLine]> = make([]);

	renderParaLinesFn = \lines, storyWidth -> renderParaLines(
		storyWidth, lines, tightWidth, alignment, interlineSpacing,
		topLineBaseline, interactiveStyles, rtl, isParagraphMarked, genIndent
	);

	// it renders all words but for dynamics it just reserves space and updates coordinates
	renderedParagraph = if (widthManager == dummyWigiParagraphWidthManager) {
		Select(linesB, \lines -> renderParaLinesFn(lines, getValue(aw)).first);
	} else if (widthManager.infoOnly) {
		// in this non-TightWidth case we just inform WidthManager about our width
		// we will not take story width into account in this case, but use availableWidth as usual
		Select(linesB, \lines -> {
			rendered = renderParaLinesFn(lines, getValue(aw));
			nextDistinct(widthManager.width, rendered.second);
			rendered.first
		});
	} else {
		Select2(linesB, widthManager.storyWidth, \lines, storyWidth -> {
			rendered = renderParaLinesFn(
				lines,
				if (storyWidth > 0.0) storyWidth else getValue(aw)
			);
			// we have to notify story about changes in our width.
			// it could alter widthManager.storyWidth if we are new winner so we have to defer
			deferUntilNextFrameRendered(\->nextDistinct(widthManager.width, rendered.second));
			rendered.first
		});
	}

	// If there is less or equal then upper limit of dynamic elements, we do not need to postpone updates
	dynamicWords = filter(words, \w -> !isConst(w.metrics));
	ndynamic = length(dynamicWords);
	ndymamicUpper = extractStruct(s, DynamicBlockDelay(getParagraphDynamicBlockDelay())).n;

	contentGroup = Group(concat(
		[if (fill != []) Background(fill, renderedParagraph) else renderedParagraph],
		filtermap(words, \word -> {
			applyStyles = \form -> eitherMap(
				lookupTree(interactiveStyles, either(word.interactivityIdM, -1)),
				\wordStyles -> applyListenersAndModifiers(wordStyles, form),
				form
			);
			switch (word.ghosted : Ghosted) {
				Empty(): None();
				Ghost(x, y, f): Some(Translate(x, y, applyStyles(f)));
				InspectGhost(inspector, f): Some(Translate(inspector.x, inspector.y, applyStyles(f)));
				CoordinateInspectElement(__, __): None();
			}
		})
	));

	Constructor(
		Inspect(
			[AvailableWidth2(aw)],
			if (paragraphBorder.top > 0.0 || paragraphBorder.bottom > 0.0) {
				Border(0.0, paragraphBorder.top, 0.0, paragraphBorder.bottom, contentGroup);
			} else {
				contentGroup;
			}
		),
		\ -> {
			updateFn = \wi-> {
				// Ignore negative widths
				// It's the safest way to simmulate single line, because reflowParaWords2 does a lot of useful staff.
				w = if (isSingleLine) 100000.0 else max(0.0, wi);
				newLines = reflowParaWords(words, w - genIndent, indent, isParagraphMarked);
				nextDistinct(linesCountB, length(newLines));

				// We have to rerender even when lines are identical, at minimum to move things because of potential size changes
				next(linesB, newLines);
			};

			uns = concatA([
				[
					subscribe(aw, \v -> updateFn(v)),
				],
				if (ndynamic == 0 || ndynamic == ndymamicUpper) [] else
				[
					subscribe2(update, \u -> {
						// When an update from a dynamic element is requested, we do it in the next frame
						if (u == 1) deferUntilNextFrameRendered(\ -> {
							next(update, 0);
							updateFn(getValue(aw))
						})
					})
				],
				mapi(dynamicWords, \i, w -> subscribe2(w.metrics, \m -> if (i < ndymamicUpper) updateFn(getValue(aw)) else nextDistinct(update, 1)))
			]);

			\ -> applyall(uns)
		}
	)
}

// Introduce a ParaOneWord that group the words together, so that we do not have to worry about joins
expandGlueFragments(
	elements : [ParaElement],
	glueNext : bool,
	running : List<ParaAtomic>,
	acc : List<ParaAtomic>,
	runLength : int,
) -> List<ParaAtomic> {

	flush = \ -> {
		if (runLength == 0) {
			acc;
		} else if (runLength == 1) {
			Cons(headList(running, Empty()), acc);
		} else {
			wds = foldList(running, makeList(), \acc2, ra : ParaAtomic -> {
				switch (ra : ParaAtomic) {
					ParaOneWord(wds): acc2;
					NewLine(): acc2;
					Space(f): Cons(f, acc2);
					LinePart(pr, i, po): Cons(i, acc2);
					InspectElement(inspector, e): {
						switch (e : InspectableElement) {
							Space(f): Cons(f, acc2);
							Text(t, s): Cons(e, acc2);
							default: Cons(cast(e : InspectableElement -> Form), acc2);
						}
					}
					InteractiveParaAtomic(ia, id) : {
						Cons(cast(ia : ParaAtomic -> Form), acc2);
					}
					default: {
						Cons(cast(ra : ParaAtomic -> Form), acc2);
					}
				}
			});
			Cons(ParaOneWord(list2array(reverseList(wds))), acc)
		};
	};

	n = length(elements);
	if (n == 0) {
		flush();
	} else {
		rest = tail(elements);
		e = elements[0];
		switch (e : ParaElement) {
			GlueFragments(): expandGlueFragments(rest, true, running, acc, runLength);
			TextFragments(parts): {
				p : [WrapElement] = list2array(parts);
				expandGlueFragments(concat(p, rest), glueNext, running, acc, runLength);
			}
			// TODO rewrite via switch subunion syntax when implemented.
			default: {
				en = switch (e : ParaElement) {
					WordWrapInteractive(wElem, id): {
						InteractiveParaAtomic(cast(wElem : WrapElement -> ParaAtomic), id)
					}
					default: cast(e : ParaElement -> ParaAtomic);
				}
				if (glueNext) {
					expandGlueFragments(rest, false, Cons(en, running), acc, runLength + 1);
				} else {
					expandGlueFragments(rest, false, Cons(en, makeList()), flush(), 1);
				}
			}
		}
	}
}

makeInteractiveParaWord(w : ParaAtomic, interactivityIdM : Maybe<int>) -> ParaWord {
	s2w = \s : Pair<Form, Behaviour<FormMetrics>> -> {
		if (!isGhostable(s.first)) {
			ParaWord(s.first, s.second, Empty(), Empty(), interactivityIdM);
		} else {
			x = make(0.0);
			y = make(0.0);
			ParaWord(Empty(), s.second, Ghost(x, y, s.first), Empty(), interactivityIdM);
		}
	}
	switch (w : ParaAtomic) {
		NewLine(): ParaWord(w, const(zeroMetrics), Empty(), Empty(), interactivityIdM);
		// We choose the middle part
		LinePart(f, p, e): getDynamicFormSize(p) |> s2w;
		Space(s): {
			dynFormSizePair = getDynamicFormSize2(s, true);
			ParaWord(Space(dynFormSizePair.first), dynFormSizePair.second, Empty(), Empty(), interactivityIdM);
		}
		ParaOneWord(wd): {
			oc = optimizeCols(wd);
			line : Form = Line(oc);
			getDynamicFormSize(line) |> s2w;
		}
		InspectElement(inspector, e): {
			makeWord = \word, form -> ParaWord(
				word,
				const(getStaticFormSize(form)),
				CoordinateInspectElement(inspector, form),
				Empty(),
				interactivityIdM
			);
			switch (e : InspectableElement) {
				Text(t, s): {
					makeWord(e, e);
				}
				LinePart(f, m, l): {
					makeWord(LinePart(f, m, l), m);
				}
				Space(t): {
					makeWord(Space(t), t);
				}
				default: {
					s = getDynamicFormSize(cast(e : InspectableElement -> Form));
					ParaWord(Empty(), s.second, InspectGhost(inspector, s.first), Empty(), interactivityIdM);
				}
			}
		}
		InteractiveParaAtomic(word, id) : {
			makeInteractiveParaWord(word, Some(id));
		}
		default: {
			opt = optimizeForm(cast(w : ParaAtomic -> Form));
			getDynamicFormSize(opt) |> s2w;
		}
	}
}

makeParaWord(w : ParaAtomic) -> ParaWord {
	switch (w) {
		InteractiveParaAtomic(word, id): makeInteractiveParaWord(word, Some(id));
		default : makeInteractiveParaWord(w, None());
	}
}

isGhostable(f : Form) -> bool {
	switch (f) {
		Text(t, s): false;
		default: {
			true;
		}
	}
}

ParaLine(words : [ParaWord], indent : double);

// We indent the first line if paragraph's first-line indent is positive
// or all of the other lines if the indent is negative.
getLineIndent(paraIndent : double, lineIndex : int) -> double {
	if (paraIndent > 0.0 && lineIndex == 0 || paraIndent < 0.0 && lineIndex != 0 ) abs(paraIndent)
	else 0.0;
}

// Given a bunch of words, a constant amount of width for paragraph, a first-line indent, this does the line breaking
reflowParaWords(words : [ParaWord], availableParaWidth : double, paraIndent : double, isFirstMark : bool) -> [ParaLine] {
	firstLineWidth = availableParaWidth - getLineIndent(paraIndent, 0);
	text = reflowParaWords2(words, firstLineWidth, firstLineWidth, [], [], paraIndent, isFirstMark);
	if (isBiDiEnabled())
		zipWith(
			text,
			reflowTextToBiDi(map(text, \l -> l.words), isWordEmpty, getWordText, setWordText, idfn),
			\l, ws -> ParaLine(ws, l.indent),
		)
	else text;
}

geParaWordWidth(word : ParaWord) -> double {
	getValue(word.metrics).width;
};

// here availableWidth is an amount of width for current line
reflowParaWords2(
	words : [ParaWord],
	availableWidth : double,
	remaining : double,
	currentWords : [ParaWord],
	lines : [ParaLine],
	paraIndent : double,
	isFirstMark : bool
) -> [ParaLine] {
	addLine = \cw, indent -> {
		if (cw != []) arrayPush(lines, ParaLine(cw, indent)) else lines;
	}

	detachWord = \w : ParaWord, detach : bool -> {
		switch (w.ghosted) {
			CoordinateInspectElement(inspector, __): nextDistinct(inspector.detached, detach);
			default: {
				switch (w.form) {
					CoordinateInspectElement(inspector, __): nextDistinct(inspector.detached, detach);
					default: {}
				}
			}
		}
	}

	lineIndex = length(lines);
	lineIndent = getLineIndent(paraIndent, lineIndex);
	nextLineWidth = availableWidth + lineIndent - getLineIndent(paraIndent, lineIndex + 1);

	if (words == []) {
		addLine(currentWords, lineIndent)
	} else {
		word = words[0];
		detachWord(word, false);
		rest = subrange(words, 1, length(words) - 1);
		extractParaAtomicForm = \word1 -> {
			w : ParaAtomic = word1.word;
			f : Form = switch(w : ParaAtomic) {
				ParaOneWord(__): Empty();
				InspectElement(__, __): Empty();
				LinePart(first, inline, last): inline;
				Space(s): s;
				default: cast(w : ParaAtomic -> Form);
			};
			f
		};
		getWordGhostedForm = \word1 -> {
			g = word1.ghosted;
			switch (g : Ghosted) {
				Empty(): extractParaAtomicForm(word1);
				Ghost(xc, yc, fm): g;
				InspectGhost(__, fm): g;
				CoordinateInspectElement(__, __): g;
			}
		};
		makeParaWord2 = \word2, form2 -> {
			g = word2.ghosted;
			replaceWordGhosted = \ -> {
				r : Ghosted = switch (g : Ghosted) {
					Empty(): Empty();
					Ghost(xc, yc, __): Ghost(xc, yc, form2);
					InspectGhost(inspector, __): InspectGhost(inspector, form2);
					CoordinateInspectElement(inspector, __): CoordinateInspectElement(inspector, form2);
				}
				r;
			};

			ghosted = replaceWordGhosted();
			ghostedForm = {
				switch (g : Ghosted) {
					Empty(): extractParaAtomicForm(word2);
					default: replaceWordGhosted();
				};
			};
			ParaWord(word2.word, const(getStaticFormSize(form2)), ghosted, ghostedForm, word2.interactivityIdM);
		};

		switch (word.word : ParaAtomic) {
			NewLine(): {
				reflowParaWords2(rest, nextLineWidth, nextLineWidth, [], addLine(currentWords, lineIndent), paraIndent, false);
			}
			LinePart(f, p, e): {
				width = geParaWordWidth(word);
				nextWordWidth = if (rest != []) geParaWordWidth(rest[0]) else 0.0;

				if (currentWords == []) {
					// If it is the first item on the line
					paraword = makeParaWord2(word, f);
					reflowParaWords2(rest, availableWidth, remaining - width, arrayPush(currentWords, paraword), lines, paraIndent, false);
				} else if (width + nextWordWidth < remaining) {
					// If it is the middle item on the line
					paraword = makeParaWord2(word, p);
					reflowParaWords2(rest, availableWidth, remaining - width, arrayPush(currentWords, paraword), lines, paraIndent, false);
				} else {
					// If it is the last item on the line
					paraword = makeParaWord2(word, e);
					reflowParaWords2(rest, nextLineWidth, nextLineWidth, [], addLine(arrayPush(currentWords, paraword), lineIndent), paraIndent, false);
				}
			}
			Space(s): {
				// LSTSBU-454
				// Spaces at the beginning of a line had been dropped before, but this block has been removed in order to have identical view in wigi editor and preview
				width = geParaWordWidth(word);
				if (width < remaining) {
					reflowParaWords2(rest, availableWidth, remaining - width, arrayPush(currentWords, setWordForm(word, getWordGhostedForm(word))), lines, paraIndent, false);
				} else {
					detachWord(word, true);
					reflowParaWords2(rest, nextLineWidth, nextLineWidth, [], addLine(currentWords, lineIndent), paraIndent, false);
				}
			}
			default: {
				width = ref 0.0;
				getWordForm = \word1 -> {
					g = word1.ghosted;
					switch (g: Ghosted) {
						Empty(): extractParaAtomicForm(word1);
						Ghost(xc, yc, f): f;
						InspectGhost(__, f): f;
						CoordinateInspectElement(__, f): f;
					};
				};

				form = getWordForm(word);

				// Number of words that should be on the same line
				keepFormTogetherOrWithMark = \form1, i -> keepFormTogether(form1) || (isFirstMark && i <= 1);
				wordsCount = if (keepFormTogetherOrWithMark(form, 0)) {
					iteriUntil(words, \i, _word -> {
						switch (_word.word) {
							NewLine(): true;
							Space(__): true;
							LinePart(__, __, __): true;
							default: {
								f = getWordForm(_word);
								// it is no use to make line with zero-width content, so we continue counting if the width is 0
								// For example, single WigiRecursive in line get surrounded by WigiText("",[]), WigiRecursive, WigiText("",[])
								// such construction becomes [Empty, form, Empty] and we should keep them on the same line
								if (keepFormTogetherOrWithMark(f, i) || ^width == 0.0) {
									width := ^width + geParaWordWidth(_word);
									false;
								} else {
									true
								}
							};
						};
					});
				} else {
					width := geParaWordWidth(word);
					1;
				};

				if (^width <= remaining || currentWords == []) { // Overflow situation where a word is longer than the available width
					_words = subrange(words, 0, wordsCount);
					_rest = subrange(words, wordsCount, length(words) - wordsCount);

					newCurrentWords = fold(_words, currentWords, \acc, _word -> {
						arrayPush(acc, setWordForm(
							_word,
							getWordGhostedForm(_word)
						));
					});

					reflowParaWords2(_rest, availableWidth, remaining - ^width, newCurrentWords, lines, paraIndent, false);
				} else {
					reflowParaWords2(words, nextLineWidth, nextLineWidth, [],  addLine(currentWords, lineIndent), paraIndent, false);
				}
			}
		}
	}
}

// This function gets the form and decides, should the next form kept together in the same line or should it be placed on the next line
keepFormTogether(form : Form) -> bool {
	switch (form) {
		Empty(): true;
		Text(t, __): t != " ";
		Alpha(__, f): keepFormTogether(f);
		Size2(__, f): keepFormTogether(f);
		Access(__, f): keepFormTogether(f);
		Rotate(__, f): keepFormTogether(f);
		Cursor(__, f): keepFormTogether(f);
		Visible(__, f): keepFormTogether(f);
		Inspect(__, f): keepFormTogether(f);
		Baseline(__, f): keepFormTogether(f);
		Scale(__, __, f): keepFormTogether(f);
		Mask2(f, __, __): keepFormTogether(f);
		SetPending(__, f): keepFormTogether(f);
		Available2(__, f): keepFormTogether(f);
		Filter2(__, f, __): keepFormTogether(f);
		Interactive(__, f): keepFormTogether(f);
		Constructor(f, __): keepFormTogether(f);
		Create2(current, fn): keepFormTogether(if (^current != Empty()) ^current else fn());
		Translate(__, __, f): keepFormTogether(f);
		Mutable2(f, __): keepFormTogether(getValue(f));
		Border(__, __, __, __, f): keepFormTogether(f);
		Crop2(__, __, __, __, f, __): keepFormTogether(f);
		Group(fs): any(map(fs, \f -> keepFormTogether(f)));
		Switch(i, fs): keepFormTogether(if (getValue(i) < length(fs)) fs[getValue(i)] else { println("STRANGE CASE"); Empty(); });
		Grid(__): false; // Unlikely to be a part of a word. But maybe should go recursive.
		Picture(__, __): false;
		Graphics(__, __): false;
		Video(__, __, __, __): false;
		TextInput(__, __, __): false;
		Camera(__, __, __, __): false;
		RealHTML2(__, __, __): false;
		ControlFocus(__, f): keepFormTogether(f);
		FullWindow(__, f): keepFormTogether(f);
		FullScreen(__, f): keepFormTogether(f);
		NativeForm(__, __, __, __): false;
		DynamicGroup2(__, __, __, __) : false; // Placeholder
	};
}

ParaLineAcc(lines : List<Form>, width : double, y : double, baseline : double);

// renders lines and returns resulting forms along with their tight width at the rendering time
renderParaLines(
	availableWidth : double,
	lines : [ParaLine],
	tightWidth : bool,
	alignment: ParaLineAlignment,
	interlineSpacing : double,
	topLineBaseline : bool,
	styleTree : Tree<int, [ParaElementInteractiveStyle]>,
	rtl : bool,
	isMarked : bool,
	generalIndent : double
) -> Pair<Form, double> {
	lasti = length(lines) - 1;

	a : ParaLineAcc = foldi(lines, ParaLineAcc(EmptyList(), 0.0, 0.0, 0.0), \i : int, acc : ParaLineAcc, line : ParaLine -> {
		// TODO: IF the line ends with NewLine (which we do not track here), we should consider it a last line and not justify
		lastLine = i == lasti;
		// On the last line, we do not justify.
		// Also if the line is single with TightWidth, any alignment is equal to StartAlign
		lineAlignment =
			if (alignment == Justify() && lastLine) {
				StartAlign()
			} else {
				alignment;
			}
		f = RenderLine(
			acc.y, line.words, availableWidth, tightWidth,
			lineAlignment, line.indent + generalIndent,
			i, styleTree, rtl, isMarked
		);
		nwidth = max(acc.width, f.width);
		// For interline spacing, it turns out that the old paragraph had crazy behaviour, so we have to double it
		// to prevent especially label games with explicitly placed things from breaking - REMOVED, NOT NECESSARY
		nheight = acc.y + f.height + if (lastLine) 0.0 else interlineSpacing;
		nbaseline = f.baseline;
		ParaLineAcc(
			Cons(Size2(const(zeroWH), f.form), acc.lines),
			nwidth,
			nheight,
			if (i == 0 || !topLineBaseline) nbaseline else acc.baseline
		);
	});

	Pair(
		Baseline(const(a.baseline), Size2(const(WidthHeight(if (tightWidth) a.width else max(availableWidth, a.width), a.y)),
			Group(list2array(a.lines))
		)),
		a.width
	);
}

ParaLineResult(form : Form, width : double, height : double, baseline : double);
OptimizedLineElement(f : GhostForm, metrics : Behaviour<FormMetrics>, interactivityIdM : Maybe<int>);

getOptimizedLine(words : [ParaWord], alignment : ParaLineAlignment) -> [OptimizedLineElement]{
	if (!isBiDiEnabled() && alignment != Justify()) {
		optimizeLine(words);
	} else {
		map(words, \w -> OptimizedLineElement(w.form, w.metrics, w.interactivityIdM));
	};
}

// Aligns all elements to the baseline, as well as calculates the height and the baseline
// Send out the result, width, height
RenderLine(
	y : double,
	words : [ParaWord],
	width : double,
	tightWidth : bool,
	alignment : ParaLineAlignment,
	lineIndent: double,
	lineNumber : int,
	interactiveStyles : Tree<int, [ParaElementInteractiveStyle]>,
	rtl : bool,
	isMarked
) -> ParaLineResult {
	optimizedLine = getOptimizedLine(words, alignment);
	metrics = map(optimizedLine, \p -> getValue(p.metrics));
	lineWidth = lineIndent + fold(metrics, 0.0, \ac, m -> ac + m.width); // this is real width of the line at the moment.
	lineAsc = fold(metrics, 0.0, \ac, m -> max(ac, m.baseline));
	lineHeight = fold(metrics, 0.0, \ac, m -> max(ac, lineAsc + m.height - m.baseline));

	// Alignment offset
	startOffset = if (rtl) width - lineWidth else 0.;
	endOffset = if (rtl) min(0., width - lineWidth) else max(0., width - lineWidth);
	alignmentOffset = ref switch (alignment : ParaLineAlignment) {
		LeftAlign(): if (rtl) endOffset else startOffset;
		RightAlign(): if (rtl) startOffset else endOffset;
		CenterAlign(): max(0.0, (width - lineWidth) / 2.0);
		StartAlign(): startOffset;
		EndAlign(): endOffset;
		Justify(): 0.0;
	} + (if (rtl) 0. else lineIndent);
	// Inter-word spacing for justification
	interWord = if (alignment == Justify() && length(optimizedLine) > 1) {
		nwords = length(optimizedLine);
		remaining = (width - lineWidth);
		min(10.0, remaining / i2d(nwords - 1));
	} else 0.0;

	// The width and the individual forms
	lo : [Form] = filtermapi(optimizedLine, \i : int, elem : OptimizedLineElement -> {
		f = elem.f;
		m = getValue(elem.metrics);
		dy = max(lineAsc - m.baseline, 0.0);
		applyStylesAndOffset = \fm : Form -> eitherMap(
			elem.interactivityIdM,
			\id -> applyIntStylesAndHighlighting(
				fm,
				lookupTreeDef(interactiveStyles, id, []),
				^alignmentOffset,
				y,
				dy,
				m.width,
				lineHeight,
				interWord
			),
			Translate(const(^alignmentOffset), const(y + dy), fm)
		);

		justifyOffset = if (isMarked && i == 0 && lineNumber == 0) 0.0 else interWord;

		r = switch (f : GhostForm) {
			Empty(): None();
			Ghost(xc, yc, fm): {
				nextDistinct(xc, ^alignmentOffset);
				nextDistinct(yc, y + dy);
				Some(applyStylesAndOffset(Empty()));
			}
			InspectGhost(inspector, fm): {
				nextDistinct(inspector.x, ^alignmentOffset);
				nextDistinct(inspector.y, y + dy);
				nextDistinct(inspector.size, WidthHeight(m.width, m.height));
				nextDistinct(inspector.lineHeight, lineHeight);
				nextDistinct(inspector.lineNumber, lineNumber);
				Some(applyStylesAndOffset(Empty()));
			}
			CoordinateInspectElement(inspector, fm): {
				fo = applyStylesAndOffset(fm);
				nextDistinct(inspector.x, ^alignmentOffset);
				nextDistinct(inspector.y, y + dy);
				nextDistinct(inspector.size, WidthHeight(m.width, m.height));
				nextDistinct(inspector.lineHeight, lineHeight);
				nextDistinct(inspector.lineNumber, lineNumber);
				Some(fo);
			}
			default: Some(applyStylesAndOffset(cast(f : GhostForm -> Form)))
		}
		alignmentOffset := ^alignmentOffset + if (m.width > 0.0) m.width + justifyOffset else 0.0;
		r;
	});
	ParaLineResult(Group(lo), lineWidth, lineHeight, y + lineAsc);
}

applyIntStylesAndHighlighting(
	form : Form,
	styles : [ParaElementInteractiveStyle],
	xOffset : double,
	yOffset : double,
	baselineShift : double,
	width : double,
	height : double,
	interWord : double,
) -> Form {
	getStyleForBackgroundFromCharStyle = \s -> eitherMap(
		tryExtractStruct(s, BackgroundFill(white)),
		\backFill -> [
			Fill(backFill.color),
			FillOpacity(extractStruct(s, BackgroundFillOpacity(1.0)).opacity)
		],
		[]
	);

	makeBackRect = \defStyle, dynStyle -> Rectangle(
		width + interWord,
		height,
		replaceStructMany(
			getStyleForBackgroundFromCharStyle(defStyle),
			getStyleForBackgroundFromCharStyle(dynStyle)
		)
	);

	dynamicCharStyleBM = tryExtractStruct(styles, DynamicCharStyle(make([])));

	textAndBackPair = switch(form) {
		Text(txt, txtStyle) : {

			makeTxt = \dynStyle -> Text(
				txt,
				removeAllStructsMany(
					replaceStructMany(txtStyle, dynStyle),
					[BackgroundFill(0), BackgroundFillOpacity(0.0)]
				)
			);

			// We draw custom highlighting to fix gaps for cases of justifying alignment
			// And to have more straight and pretty highlighting.
			eitherMap(
				dynamicCharStyleBM,
				\dynCharStyle -> Pair(
					Select(dynCharStyle.styleB, \chStyle -> makeTxt(chStyle)),
					Select(dynCharStyle.styleB, \chStyle -> makeBackRect(txtStyle, chStyle))
				),
				Pair(makeTxt([]), makeBackRect(txtStyle, []))
			)
		}
		default : Pair(
			form,
			eitherMap(
				dynamicCharStyleBM,
				\dynCharStyle -> Select(dynCharStyle.styleB, \chStyle -> makeBackRect([], chStyle)),
				Empty()
			)
		);
	}

	modifiedForm = applyListenersAndModifiers(styles, textAndBackPair.first);

	Group([
		Translate(const(xOffset - interWord / 2.), const(yOffset), textAndBackPair.second),
		Translate(const(xOffset), const(yOffset + baselineShift), modifiedForm),
	]);
}

applyListenersAndModifiers(styles : [ParaElementInteractiveStyle], form : Form) -> Form {
	if (form == Empty()) form else {
		eventListenersM = tryExtractStruct(styles, EventListeners([]));
		interactiveForm = eitherMap(
			eventListenersM,
			\el -> Interactive(el.listeners, form),
			form
		);

		formModifiersM = tryExtractStruct(styles, FormModifiers([]));
		eitherMap(
			formModifiersM,
			\modifiers -> fold(modifiers.fns, interactiveForm, \acc, fn -> fn(acc)),
			interactiveForm
		);
	}
}


// Joins texts together to a single text element, along with the new metrics
optimizeLine(words : [ParaWord]) -> [OptimizedLineElement] {
	fold(words, makeList(), \acc : List<OptimizedLineElement>, word : ParaWord -> {
		f = word.form;
		metrics = word.metrics;
		intIdM = word.interactivityIdM;
		switch(acc){
			EmptyList(): Cons(OptimizedLineElement(f, metrics, intIdM), acc);
			Cons(p, tail_): {
				switch (p.f : GhostForm) {
					Text(t1, s1): {
						switch (f : GhostForm) {
							Text(t2, s2): {
								join = joinText(t1, s1, t2, s2);
								if (length(join) == 1 && intIdM == p.interactivityIdM) {
									t : Form = join[0];
									// TODO: Do not do this until at the end of the joining fest
									m = getStaticFormSize(t);
									// Replace the last element with the newly joined
									Cons(OptimizedLineElement(t, const(m), intIdM), tail_)
								} else Cons(OptimizedLineElement(f, metrics, intIdM), acc);
							}
							default: {
								Cons(OptimizedLineElement(f, metrics, intIdM), acc);
							}
						}
					}
					default: Cons(OptimizedLineElement(f, metrics, intIdM), acc);
				}
			}
		}
	}) |> list2array
}

isWordEmpty(w: ParaWord) -> bool {
	switch(w.word) {
		Text(t, __): t == "";
		default: false;
	}
}

getWordText(w: ParaWord) -> string {
	switch(w.word) {
		Text(t, __): t;
		Empty(): switch (w.form) {
			InspectGhost(__, form): getFormText(form);
			Ghost(__, __, form): getFormText(form);
			default: "";
		};
		default: "";
	}
}

setWordText(w: ParaWord, t: string) -> ParaWord {
	switch(w.word) {
		Text(__, s): ParaWord(
			Text(t, s), w.metrics, w.ghosted,
			switch(w.form) {
				CoordinateInspectElement(inspector, form): CoordinateInspectElement(
					inspector,
					Text(t, getFormTextStyle(form))
				);
				Text(__, fs): Text(t, fs);
				default: w.form;
			},
			w.interactivityIdM
		);
		default: w;
	};
}

setWordForm(word: ParaWord, form: GhostForm) -> ParaWord {
	ParaWord(word.word, word.metrics, word.ghosted, form, word.interactivityIdM);
};

makeWigiStoryWidthManager(paragraphs : int, infoOnly : bool) -> WigiStoryWidthManager {
	paragraphWidths = generate(0, paragraphs, \__ -> make(0.0));
	storyWidth = make(0.0);

	paragraphManagers = map(paragraphWidths, \pw -> WigiParagraphWidthManager(storyWidth, pw, infoOnly));
	WigiStoryWidthManager(
		paragraphManagers,
		\i -> elementAt(paragraphManagers, i, dummyWigiParagraphWidthManager),
		storyWidth,
		infoOnly,
		\ -> {
			if (infoOnly) {
				nop
			} else {
				maxWidth = arrayMaxu(paragraphWidths);
				uns = [
					maxWidth.second,
					connectDistinct(maxWidth.first, storyWidth)
				];
				\ -> applyall(uns);
			}
		}
	)
}