// Â© Copyright 2011 Area9 Technologies.

import behaviour;
import form/form;
import form/gui;
import form/renderform;
import transforms;

export {
	// for small (in physical dimensions) screens it should be applied regardless to screen resolution
	isHeightEconomyOn() -> bool;
	isWidthEconomyOn() -> bool;

	// some elements is better to scale to 1.5 instead of 2 on hires phones with physically small screens
	getAdaptiveScale() -> double;
	actualAdaptiveScale: Behaviour<double>;
	AdaptiveScale(Form) -> Form;
	AdaptiveScaleLtd(Form, double) -> Form;
	AdaptiveScaleLtdFun(double) -> (Form) -> Form;

	enforceScreenScale(fn : () -> Form) -> Form;
	applyAdaptiveScaler(form : Form) -> Form;	

	HDAdaptiveScaler(form : Form) -> Form;

	// Assuming that code has been authored for DPI 90, resize according to whatever the device is
	dpiAdjust(form : Form) -> Form;

	// Same as AdaptiveScale, but also scales Available down
	AdaptiveAvailableAndScale(form : Form) -> Form;

	useMobileUI() -> bool;
	setForceMobileUI(force: bool) -> void;
}
	
forceMobileUI = ref false;

setForceMobileUI(force : bool) -> void {
	forceMobileUI := force;
}

useMobileUI() -> bool {
	(isUrlParameterTrue("mobileui") || ^forceMobileUI) && isPhoneScreen();
}

isWidthEconomyOn() {
	// no live situations yet
	false
}

isHeightEconomyOn() {
	diagonal = {
		w = getStageWidth();
		h = getStageHeight();
		sqrt(w*w + h*h)
	};

	// e.g. iPhone 5S
	isHighResolution && 
	isPhoneScreen() &&
	diagonal < 1400.0
}

adaptiveScale = make(1.0); // do not expose to other modules
actualAdaptiveScale : Behaviour<double> = adaptiveScale;

getAdaptiveScale() {
	returns = if (isUrlParameterTrue("new_adaptive_scale")) {
		dpif = min(4.0, i2d(screenDPI) / 160.0);	// There is also getPixelsPerCm which might be a useful alternative

		stageWH = WidthHeight(getStageWidth(), getStageHeight());
		ws = max(1.0, stageWH.width / 1536.0);
		hs = max(1.0, stageWH.height / 1536.0);

		sf = if (dpif == 1.0) {
			// Desktop where we do not have accurate DPI: Just use 1536 as the max useful resolution in each direction
			min(ws, hs)	
		} else dpif;

		max(sf, min(ws, hs))
	} else {
		// Old way
			//We have automatic scaling in trender, that we use for mobile UI			
			if (isHighResolution) {
				if (isHeightEconomyOn() || isWidthEconomyOn() || !mobile)
					1.5
				else
					2.0
			} else 
				1.0;
	}

	maxAdaptiveScale = max(getValue(adaptiveScale), returns);
	nextDistinct(adaptiveScale, maxAdaptiveScale);
	if (useMobileUI()) 1.0 else maxAdaptiveScale
}

AdaptiveScale(form) {
	if (useMobileUI()) form else Scale(actualAdaptiveScale, actualAdaptiveScale, form)
}

AdaptiveScaleLtd(form, upper_limit) {
	SelectGlobal(
		actualAdaptiveScale, 
		\aas -> min(aas, upper_limit), 
		\rs -> {
			realScale = rs |> distinctUntilChanged;
			Scale(realScale, realScale, form)
		}
	)
}

AdaptiveScaleLtdFun(scl) {
	\ f -> AdaptiveScaleLtd(f, scl)
}

enforceScreenScale(mkform) {
	// println("getAdaptiveScale() before enforceScreenScale = " + d2s(getAdaptiveScale()));

	iav = makeWH();
	form = make(
		Inspect([IAvailable(iav)],
			Select(iav, \ b -> {
				// println("#### Available changed!!!");
				// Text("getStageWidth() = " + d2s(getStageWidth()) + "\ngetStageHeight() = " + d2s(getStageHeight()), [])
				Empty()
			})
		)
	);

	uns = ref nop;
	uns := subscribe(distinctUntilChanged(iav), \ v -> {
		if(v.width == 0.0 || v.height == 0.0) {
			println("enforceScreenScale() got zero available, waiting for more");
		} else {
			timer(500, \ -> {
				// we should call getadaptiveScale here very probably to remember maximal achieved scale
				println("getAdaptiveScale() inside enforceScreenScale = " + d2s(getAdaptiveScale()));
				next(form, mkform());
				println("getAdaptiveScale() after enforceScreenScale = " + d2s(getAdaptiveScale()));
			});
			^uns();
		}
	});

	Mutable(form)
}

applyAdaptiveScaler(form : Form) -> Form {
	if (!isHighResolution) {
		form
	} else {
		sf = const(getAdaptiveScale());
		Scale(sf, sf, form)
	}
}

dpiAdjust(f : Form) -> Form {
	sf = i2d(screenDPI) / 90.0;
	if (sf == 1.0) f else Scale(const(sf), const(sf), f)
}

HDAdaptiveScaler(form : Form) -> Form {
	if (!isHighResolution) {
		form
	} else {
		wh = makeWH();
		awh = makeWH();
		sf = make(0.0);
		Constructor(
			Scale(sf, sf, Inspect([ISize(wh), IAvailable2(awh)], form)),
			\ -> connectSelect2Distinctu(wh, awh, sf, \f, a -> if (f.height * 2.0 < a.height && f.width * 2.0 < a.height) 2.0 else 1.0)
		);
	}
}

AdaptiveAvailableAndScale(form) {
	awh = makeWH();
	scaleB = actualAdaptiveScale;
	scaledAWH = makeWH();

	Constructor(
		Inspect([IAvailable(awh)],
			Scale(scaleB, scaleB, 
				Available2(scaledAWH,
					form
				)
			)
		),
		\ -> connectSelect2Distinctu(awh,scaleB, scaledAWH, \wh, s -> WidthHeight(wh.width / s, wh.height / s))
	)
};
