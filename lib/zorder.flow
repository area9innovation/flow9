// Â© Copyright 2011 Area9 Technologies.
import rendersupport;
import form/form;
import ds/tree;
import math/math;
import sys/target;

export {
	handleZorderedDownEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, GetMouseInfo) -> bool) -> () -> void;

	handleZorderedUpEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, GetMouseInfo) -> bool) -> () -> void;

	handleZorderedRightDownEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, GetMouseInfo) -> bool) -> () -> void;

	handleZorderedRightUpEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, GetMouseInfo) -> bool) -> () -> void;

	handleZorderedMiddleDownEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, GetMouseInfo) -> bool) -> () -> void;

	handleZorderedMiddleUpEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, GetMouseInfo) -> bool) -> () -> void;

	handleZorderedMoveEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, GetMouseInfo) -> bool) -> () -> void;

	handleZorderedFineGrainWheelEvent(
		stage : native, zorder : [int], getMouseWheelInfo : GetMouseWheelInfo,
		eventHandlerFn : (handled : bool, GetMouseWheelInfo) -> bool) -> () -> void;

	handleZorderedKeyUpEvent(
		stage : native, zorder : [int], eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool) -> () -> void;

	handleZorderedKeyDownEvent(
		stage : native, zorder : [int], eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool) -> () -> void;

	handleZorderedTouchStartEvent(
		stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
		eventHandlerFn : (handled : bool, GetTouchInfo) -> bool) -> () -> void;

	handleZorderedTouchMoveEvent(
		stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
		eventHandlerFn : (handled : bool, GetTouchInfo) -> bool) -> () -> void;

	handleZorderedTouchEndEvent(
		stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
		eventHandlerFn : (handled : bool, GetTouchInfo) -> bool) -> () -> void;

	isHighResolution = getPixelsPerCm() >= 100.0 || getUrlParameter("retina") == "1" || getStageWidth() > 2000.0 || getStageHeight() > 2000.0;
	GetMouseInfo : (fn : () -> MouseInfo);
	GetMouseWheelInfo : (fn : () -> MouseWheelInfo);
	GetTouchInfo : (fn : () -> TouchInfo);
	fineGrainMouseWheelDx : DynamicBehaviour<double> = make(0.0);
	fineGrainMouseWheelDy : DynamicBehaviour<double> = make(0.0);

	enableMobileHandlerRadius = ref true;
}


// Here, we record all the event handlers outstanding. We use an id to make sure we can find and remove each entry again
ZOrderedHandler : (handlerId : int, getMouseInfo : GetMouseInfo, fn : (handled : bool, GetMouseInfo) -> bool);
ZOrderedWheelHandler : (handlerId : int, getMouseWheelInfo : GetMouseWheelInfo, fn : (handled : bool, GetMouseWheelInfo) -> bool);
ZOrderedTouchHandler : (handlerId : int, getTouchInfo : GetTouchInfo, fn : (handled : bool, GetTouchInfo) -> bool);
zorderHandlerId = ref 0;

// Mouse down handling

downHandlers : ref Tree<[int], [ZOrderedHandler]> = ref makeTree();
mouseDownEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedDownEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	onlyOnce(mouseDownEventHandler, \ -> addEventListener(stage, "mousedown", \ -> handleZorderEvent(downHandlers)));
	registerZorderHandler(zorder, downHandlers, getMouseInfo, eventHandlerFn);
}

// Mouse up handling

upHandlers : ref Tree<[int], [ZOrderedHandler]> = ref makeTree();
mouseUpEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedUpEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	onlyOnce(mouseUpEventHandler, \ -> addEventListener(stage, "mouseup", \ -> handleZorderEvent(upHandlers)));
	registerZorderHandler(zorder, upHandlers, getMouseInfo, eventHandlerFn);
}

// Mouse right down handling

rightDownHandlers : ref Tree<[int], [ZOrderedHandler]> = ref makeTree();
rightMouseDownEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedRightDownEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	onlyOnce(rightMouseDownEventHandler, \ -> addEventListener(stage, "mouserightdown", \ -> handleZorderEvent(rightDownHandlers)));
	registerZorderHandler(zorder, rightDownHandlers, getMouseInfo, eventHandlerFn);
}

// Mouse right up handling

rightUpHandlers : ref Tree<[int], [ZOrderedHandler]> = ref makeTree();
rightMouseUpEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedRightUpEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	onlyOnce(rightMouseUpEventHandler, \ -> addEventListener(stage, "mouserightup", \ -> handleZorderEvent(rightUpHandlers)));
	registerZorderHandler(zorder, rightUpHandlers, getMouseInfo, eventHandlerFn);
}

// Mouse middle down handling

middleDownHandlers : ref Tree<[int], [ZOrderedHandler]> = ref makeTree();
middleMouseDownEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedMiddleDownEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	onlyOnce(middleMouseDownEventHandler, \ -> addEventListener(stage, "mousemiddledown", \ -> handleZorderEvent(middleDownHandlers)));
	registerZorderHandler(zorder, middleDownHandlers, getMouseInfo, eventHandlerFn);
}

// Mouse middle up handling

middleUpHandlers : ref Tree<[int], [ZOrderedHandler]> = ref makeTree();
middleMouseUpEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedMiddleUpEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	onlyOnce(middleMouseUpEventHandler, \ -> addEventListener(stage, "mousemiddleup", \ -> handleZorderEvent(middleUpHandlers)));
	registerZorderHandler(zorder, middleUpHandlers, getMouseInfo, eventHandlerFn);
}

// Mouse move handling

moveHandlers : ref Tree<[int], [ZOrderedHandler]> = ref makeTree();
wheelHandlers : ref Tree<[int], [ZOrderedWheelHandler]> = ref makeTree();
mouseMoveEventHandler : ref Maybe<() -> void> = ref None();
mouseWheelEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedMoveEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	onlyOnce(mouseMoveEventHandler, \ -> addEventListener(stage, "mousemove", \ -> handleZorderEvent(moveHandlers)));
	registerZorderHandler(zorder, moveHandlers, getMouseInfo, eventHandlerFn);
}

handleZorderedFineGrainWheelEvent(
	stage : native, zorder : [int], getMouseWheelInfo : GetMouseWheelInfo,
	eventHandlerFn : (handled : bool, GetMouseWheelInfo) -> bool
) -> () -> void {
	onlyOnce(mouseWheelEventHandler, \ -> {
		if (!(mobile && cpp)) {
			addFinegrainMouseWheelEventListener(stage, \dx, dy -> {
				next(fineGrainMouseWheelDx, dx);
				next(fineGrainMouseWheelDy, dy);

				handled = ref false;
				traverseRInOrder(^wheelHandlers, \k, av -> {
					iter(av, \v -> {
						handled := v.fn(^handled, v.getMouseWheelInfo) || ^handled;
					});
				});

				next(fineGrainMouseWheelDx, 0.0);
				next(fineGrainMouseWheelDy, 0.0);
			})
		} else {
			nop
		}
	});
	registerZorderWheelHandler(zorder, wheelHandlers, getMouseWheelInfo, eventHandlerFn);
}

// This adds an mouse wheel event handler to the z-ordered tree, and returns a disposer that can unregister again
registerZorderWheelHandler(
	zorder : [int], handlers : ref Tree<[int], [ZOrderedWheelHandler]>, getMouseWheelInfo : GetMouseWheelInfo,
	eventHandlerFn : (handled : bool, GetMouseWheelInfo) -> bool
) -> () -> void {
	zh = ZOrderedWheelHandler(^zorderHandlerId, getMouseWheelInfo, eventHandlerFn);
	zorderHandlerId := ^zorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, zorder, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, zorder, zh);
	}
}


// Handle an event
handleZorderEvent(handlers : ref Tree<[int], [ZOrderedHandler]>) {
	// When an event comes, then traverse all handlers in z-order starting at the topmost one
	// and thread the return values from each eventHandler to the next (starting with false).

	// 3 mm?
	maxRadius = if (mobile && !js) round(getPixelsPerCm() * 0.3) else 0;

	handleZorderEventWithRadius(handlers, 0, maxRadius);
}

handleZorderEventWithRadius(handlers : ref Tree<[int], [ZOrderedHandler]>, radius : int, maxRadius : int) {
	if (mobile && !js) setHitboxRadius(i2d(radius));
	handled = ref false;
	traverseRInOrder(^handlers, \k, av -> {
		iter(av, \v -> {
			// was = ^handled;
			handled := v.fn(^handled, v.getMouseInfo) || ^handled;
			// if (^handled && !was) { // Useful to set a break point here if you want to find out who steals your events
			// 	v.fn(false, v.getMouseInfo);
			// 	{}
			// }
		});
	});
	if (!^handled && radius < maxRadius && ^enableMobileHandlerRadius) {
		handleZorderEventWithRadius(handlers, radius + 10, maxRadius);
	} else if (mobile && !js) {
		setHitboxRadius(i2d(maxRadius));
		enableMobileHandlerRadius := true;
	}
}

// This adds an event handler to the z-ordered tree, and returns a disposer that can unregister again
registerZorderHandler(
	zorder : [int], handlers : ref Tree<[int], [ZOrderedHandler]>, getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, GetMouseInfo) -> bool
) -> () -> void {
	zh = ZOrderedHandler(^zorderHandlerId, getMouseInfo, eventHandlerFn);
	zorderHandlerId := ^zorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, zorder, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, zorder, zh);
	}
}

// Keyboard handling
KeyboardZOrderedHandler : (handlerId : int, fn : (handled : bool, keyEvent : KeyEvent) -> bool);
keyboardZorderHandlerId = ref 0;

keyboardUpHandlers : ref Tree<[int], [KeyboardZOrderedHandler]> = ref makeTree();
keyboardUpEventHandler : ref Maybe<() -> void> = ref None();

keyboardDownHandlers : ref Tree<[int], [KeyboardZOrderedHandler]> = ref makeTree();
keyboardDownEventHandler : ref Maybe<() -> void> = ref None();

// Handle an event
handleZorderKeyEvent(
	handlers : ref Tree<[int], [KeyboardZOrderedHandler]>,
	utf : string,
	ctrl : bool,
	shift : bool,
	alt : bool,
	meta : bool,
	keycode : int,
	preventDefault : () -> void
) {

	// When an event comes, then traverse all handlers in z-order starting at the topmost one
	// and thread the return values from each eventHandler to the next (starting with false).
	handled = ref false;
	ke = KeyEvent(utf, ctrl, shift, alt, meta, keycode, preventDefault);
	traverseRInOrder(^handlers, \k, av -> {
		iter(av, \v -> {
			// was = ^handled;
			handled := v.fn(^handled, ke) || ^handled;
			/* if (^handled && !was) { // Useful to set a break point here if you want to find out who steals your key events
				v.fn(false, ke);
				{}
			}*/
		});
	});
}

handleZorderedKeyUpEvent(
	stage : native, zorder : [int],
	eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool
) -> () -> void {
	onlyOnce(
		keyboardUpEventHandler,
		\ -> addKeyEventListener(
			stage,
			"keyup",
			\u, c, s, a, m, k, preventDefault -> {
				// Selective release for ctrl (keycode = 17), shift (16), alt gr (17) and meta (16777250)
				handleZorderKeyEvent(keyboardUpHandlers, u, c && k != 17, s && k != 16, a && k != 17, m && k != 16777250, k, preventDefault);
			}
		)
	);
	registerKeyboardZorderHandler(zorder, keyboardUpHandlers, eventHandlerFn);
};

handleZorderedKeyDownEvent(
	stage : native, zorder : [int],
	eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool
) -> () -> void {
	onlyOnce(
		keyboardDownEventHandler,
		\ -> addKeyEventListener(
			stage,
			"keydown",
			\u, c, s, a, m, k, preventDefault -> handleZorderKeyEvent(keyboardDownHandlers, u, c, s, a, m, k, preventDefault)
		)
	);
	registerKeyboardZorderHandler(zorder, keyboardDownHandlers, eventHandlerFn);
};


// Touch start handling

touchStartHandlers : ref Tree<[int], [ZOrderedTouchHandler]> = ref makeTree();
touchStartEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedTouchStartEvent(
	stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, GetTouchInfo) -> bool
) -> () -> void {
	onlyOnce(touchStartEventHandler, \ -> addEventListener(stage, "touchstart", \ -> handleZorderTouchEvent(touchStartHandlers)));
	registerZorderTouchHandler(zorder, touchStartHandlers, getTouchInfo, eventHandlerFn);
}

// Touch move handling

touchMoveHandlers : ref Tree<[int], [ZOrderedTouchHandler]> = ref makeTree();
touchMoveEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedTouchMoveEvent(
	stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, GetTouchInfo) -> bool
) -> () -> void {
	onlyOnce(touchMoveEventHandler, \ -> addEventListener(stage, "touchmove", \ -> handleZorderTouchEvent(touchMoveHandlers)));
	registerZorderTouchHandler(zorder, touchMoveHandlers, getTouchInfo, eventHandlerFn);
}

// Touch end handling

touchEndHandlers : ref Tree<[int], [ZOrderedTouchHandler]> = ref makeTree();
touchEndEventHandler : ref Maybe<() -> void> = ref None();

handleZorderedTouchEndEvent(
	stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, GetTouchInfo) -> bool
) -> () -> void {
	onlyOnce(touchEndEventHandler, \ -> addEventListener(stage, "touchend", \ -> handleZorderTouchEvent(touchEndHandlers)));
	registerZorderTouchHandler(zorder, touchEndHandlers, getTouchInfo, eventHandlerFn);
}

// Handle a touch event
handleZorderTouchEvent(handlers : ref Tree<[int], [ZOrderedTouchHandler]>) {
	// When an event comes, then traverse all handlers in z-order starting at the topmost one
	// and thread the return values from each eventHandler to the next (starting with false).

	// 3 mm?
	maxRadius = if (mobile) round(getPixelsPerCm() * 0.3) else 0;

	handleZorderTouchEventWithRadius(handlers, 0, maxRadius);
}

handleZorderTouchEventWithRadius(handlers : ref Tree<[int], [ZOrderedTouchHandler]>, radius : int, maxRadius : int) {
	if (mobile) setHitboxRadius(i2d(radius));
	handled = ref false;
	traverseRInOrder(^handlers, \k, av -> {
		iter(av, \v -> {
			// was = ^handled;
			handled := v.fn(^handled, v.getTouchInfo) || ^handled;
			// if (^handled && !was) { // Useful to set a break point here if you want to find out who steals your events
			// 	v.fn(false, v.getMouseInfo);
			// 	{}
			// }
		});
	});
	if (!^handled && radius < maxRadius && ^enableMobileHandlerRadius) {
		handleZorderTouchEventWithRadius(handlers, radius + 10, maxRadius);
	} else if (mobile) {
		setHitboxRadius(i2d(maxRadius));
		enableMobileHandlerRadius := true;
	}
}


// This adds a touch event handler to the z-ordered tree, and returns a disposer that can unregister again
registerZorderTouchHandler(
	zorder : [int], handlers : ref Tree<[int], [ZOrderedTouchHandler]>, getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, GetTouchInfo) -> bool
) -> () -> void {
	zh = ZOrderedTouchHandler(^zorderHandlerId, getTouchInfo, eventHandlerFn);
	zorderHandlerId := ^zorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, zorder, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, zorder, zh);
	}
}


// This adds an event handler to the z-ordered tree, and returns a disposer that can unregister again
registerKeyboardZorderHandler(
	zorder : [int], handlers : ref Tree<[int], [KeyboardZOrderedHandler]>,
	eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool
) -> () -> void {
	zh = KeyboardZOrderedHandler(^keyboardZorderHandlerId, eventHandlerFn);
	keyboardZorderHandlerId := ^keyboardZorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, zorder, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, zorder, zh);
	}
}
