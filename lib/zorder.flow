// Â© Copyright 2011 Area9 Technologies.
import rendersupport;
import form/form;
import ds/tree;
import math/math;
import sys/target;

export {
	handleZorderedDownEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool) -> () -> void;

	handleZorderedUpEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool) -> () -> void;

	handleZorderedRightDownEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool) -> () -> void;

	handleZorderedRightUpEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool) -> () -> void;

	handleZorderedMiddleDownEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool) -> () -> void;

	handleZorderedMiddleUpEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool) -> () -> void;

	handleZorderedMoveEvent(
		stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
		eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool) -> () -> void;

	handleZorderedFineGrainWheelEvent(
		stage : native, zorder : [int], getMouseWheelInfo : GetMouseWheelInfo,
		eventHandlerFn : (handled : bool, info : GetMouseWheelInfo) -> bool) -> () -> void;

	handleZorderedKeyUpEvent(
		stage : native, zorder : [int], eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool) -> () -> void;

	handleZorderedKeyDownEvent(
		stage : native, zorder : [int], eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool) -> () -> void;

	handleZorderedTouchStartEvent(
		stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
		eventHandlerFn : (handled : bool, info : GetTouchInfo) -> bool) -> () -> void;

	handleZorderedTouchMoveEvent(
		stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
		eventHandlerFn : (handled : bool, info : GetTouchInfo) -> bool) -> () -> void;

	handleZorderedTouchEndEvent(
		stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
		eventHandlerFn : (handled : bool, info : GetTouchInfo) -> bool) -> () -> void;

	isHighResolution = getPixelsPerCm() >= 100.0 || getUrlParameter("retina") == "1" || getStageWidth() > 2000.0 || getStageHeight() > 2000.0;
	GetMouseInfo : (fn : () -> MouseInfo);
	GetMouseWheelInfo : (fn : () -> MouseWheelInfo);
	GetTouchInfo : (fn : () -> TouchInfo);
	fineGrainMouseWheelDx : DynamicBehaviour<double> = make(0.0);
	fineGrainMouseWheelDy : DynamicBehaviour<double> = make(0.0);

	enableMobileHandlerRadius = ref true;
}


// Here, we record all the event handlers outstanding. We use an id to make sure we can find and remove each entry again
ZOrderedHandler : (handlerId : int, getMouseInfo : GetMouseInfo, fn : (handled : bool, info : GetMouseInfo) -> bool);
ZOrderedWheelHandler : (handlerId : int, getMouseWheelInfo : GetMouseWheelInfo, fn : (handled : bool, info : GetMouseWheelInfo) -> bool);
ZOrderedTouchHandler : (handlerId : int, getTouchInfo : GetTouchInfo, fn : (handled : bool, info : GetTouchInfo) -> bool);
zorderHandlerId = ref 0;

HandlerKey(stageId : int, zorder : [int]);

// Mouse handling

downHandlers : ref Tree<HandlerKey, [ZOrderedHandler]> = ref makeTree();
mouseDownEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedDownEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, mouseDownEventListeners, \ -> 
		addEventListener(stage, "mousedown", \ -> handleZorderEvent(downHandlers, stageId))
	);
	registerZorderHandler(HandlerKey(stageId, zorder), downHandlers, getMouseInfo, eventHandlerFn);
}

upHandlers : ref Tree<HandlerKey, [ZOrderedHandler]> = ref makeTree();
mouseUpEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedUpEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, mouseUpEventListeners, \ -> 
		addEventListener(stage, "mouseup", \ -> handleZorderEvent(upHandlers, stageId))
	);
	registerZorderHandler(HandlerKey(stageId, zorder), upHandlers, getMouseInfo, eventHandlerFn);
}

rightDownHandlers : ref Tree<HandlerKey, [ZOrderedHandler]> = ref makeTree();
rightMouseDownEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedRightDownEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, rightMouseDownEventListeners, \ -> 
		addEventListener(stage, "mouserightdown", \ -> handleZorderEvent(rightDownHandlers, stageId))
	);
	registerZorderHandler(HandlerKey(stageId, zorder), rightDownHandlers, getMouseInfo, eventHandlerFn);
}

rightUpHandlers : ref Tree<HandlerKey, [ZOrderedHandler]> = ref makeTree();
rightMouseUpEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedRightUpEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, rightMouseUpEventListeners, \ -> 
		addEventListener(stage, "mouserightup", \ -> handleZorderEvent(rightUpHandlers, stageId))
	);
	registerZorderHandler(HandlerKey(stageId, zorder), rightUpHandlers, getMouseInfo, eventHandlerFn);

}

middleDownHandlers : ref Tree<HandlerKey, [ZOrderedHandler]> = ref makeTree();
middleMouseDownEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedMiddleDownEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, middleMouseDownEventListeners, \ -> 
		addEventListener(stage, "mousemiddledown", \ -> handleZorderEvent(middleDownHandlers, stageId))
	);
	registerZorderHandler(HandlerKey(stageId, zorder), middleDownHandlers, getMouseInfo, eventHandlerFn);
}

middleUpHandlers : ref Tree<HandlerKey, [ZOrderedHandler]> = ref makeTree();
middleMouseUpEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedMiddleUpEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, middleMouseUpEventListeners, \ -> 
		addEventListener(stage, "mousemiddleup", \ -> handleZorderEvent(middleUpHandlers, stageId))
	);
	registerZorderHandler(HandlerKey(stageId, zorder), middleUpHandlers, getMouseInfo, eventHandlerFn);
}

moveHandlers : ref Tree<HandlerKey, [ZOrderedHandler]> = ref makeTree();
mouseMoveEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedMoveEvent(
	stage : native, zorder : [int], getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, mouseMoveEventListeners, \ -> 
		addEventListener(stage, "mousemove", \ -> handleZorderEvent(moveHandlers, stageId))
	);
	registerZorderHandler(HandlerKey(stageId, zorder), moveHandlers, getMouseInfo, eventHandlerFn);
}

// Handle an event
handleZorderEvent(handlers : ref Tree<HandlerKey, [ZOrderedHandler]>, stageId : int) {
	// When an event comes, then traverse all handlers in z-order starting at the topmost one
	// and thread the return values from each eventHandler to the next (starting with false).

	// 3 mm?
	maxRadius = if (mobile && !js) round(getPixelsPerCm() * 0.3) else 0;

	handleZorderEventWithRadius(handlers, 0, maxRadius, stageId);
}

handleZorderEventWithRadius(handlers : ref Tree<HandlerKey, [ZOrderedHandler]>, radius : int, maxRadius : int, stageId : int) {
	if (mobile && !js) setHitboxRadius(i2d(radius));
	handled = ref false;
	traverseRInOrder(^handlers, \k, av -> if (k.stageId == stageId) {
		iter(av, \v -> {
			handled := v.fn(^handled, v.getMouseInfo) || ^handled;
		});
	});
	if (!^handled && radius < maxRadius && ^enableMobileHandlerRadius) {
		handleZorderEventWithRadius(handlers, radius + 10, maxRadius, stageId);
	} else if (mobile && !js) {
		setHitboxRadius(i2d(maxRadius));
		enableMobileHandlerRadius := true;
	}
}

// Wheel handling

wheelHandlers : ref Tree<HandlerKey, [ZOrderedWheelHandler]> = ref makeTree();
mouseWheelEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedFineGrainWheelEvent(
	stage : native, zorder : [int], getMouseWheelInfo : GetMouseWheelInfo,
	eventHandlerFn : (handled : bool, info : GetMouseWheelInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage);
	registerEventListener(stageId, mouseWheelEventListeners, \ ->
		if (!(mobile && cpp)) {
			addFinegrainMouseWheelEventListener(stage, \dx, dy -> {
				next(fineGrainMouseWheelDx, dx);
				next(fineGrainMouseWheelDy, dy);

				handleWheelEvents(wheelHandlers, stageId);

				next(fineGrainMouseWheelDx, 0.0);
				next(fineGrainMouseWheelDy, 0.0);
			})
		} else {
			nop
		}
	);
	registerZorderWheelHandler(HandlerKey(stageId, zorder), wheelHandlers, getMouseWheelInfo, eventHandlerFn);
}

handleWheelEvents(handlers : ref Tree<HandlerKey, [ZOrderedWheelHandler]>, stageId : int) {
	handled = ref false;
	traverseRInOrder(^handlers, \k, av -> if (k.stageId == stageId) {
		iter(av, \v -> {
			handled := v.fn(^handled, v.getMouseWheelInfo) || ^handled;
		});
	});
}

// Keyboard handling
KeyboardZOrderedHandler : (handlerId : int, fn : (handled : bool, keyEvent : KeyEvent) -> bool);
keyboardZorderHandlerId = ref 0;

keyboardUpHandlers : ref Tree<HandlerKey, [KeyboardZOrderedHandler]> = ref makeTree();
keyboardUpEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedKeyUpEvent(
	stage : native, zorder : [int],
	eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, keyboardUpEventListeners, \ -> 
		addKeyEventListener(
			stage,
			"keyup", 
			\u, c, s, a, m, k, preventDefault -> {
				// Selective release for ctrl (keycode = 17), shift (16), alt gr (17) and meta (16777250)
				handleZorderKeyEvent(keyboardUpHandlers, stageId, u, c && k != 17, s && k != 16, a && k != 17, m && k != 16777250, k, preventDefault);
			}
		)
	);
	registerKeyboardZorderHandler(HandlerKey(stageId, zorder), keyboardUpHandlers, eventHandlerFn);
}

keyboardDownHandlers : ref Tree<HandlerKey, [KeyboardZOrderedHandler]> = ref makeTree();
keyboardDownEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedKeyDownEvent(
	stage : native, zorder : [int],
	eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, keyboardDownEventListeners, \ -> 
		addKeyEventListener(
			stage,
			"keydown",
			\u, c, s, a, m, k, preventDefault -> handleZorderKeyEvent(keyboardDownHandlers, stageId, u, c, s, a, m, k, preventDefault)
		)
	);
	registerKeyboardZorderHandler(HandlerKey(stageId, zorder), keyboardDownHandlers, eventHandlerFn);
}

handleZorderKeyEvent(
	handlers : ref Tree<HandlerKey, [KeyboardZOrderedHandler]>,
	stageId : int,
	utf : string,
	ctrl : bool,
	shift : bool,
	alt : bool,
	meta : bool,
	keycode : int,
	preventDefault : () -> void
) {
	// When an event comes, then traverse all handlers in z-order starting at the topmost one
	// and thread the return values from each eventHandler to the next (starting with false).
	handled = ref false;
	ke = KeyEvent(utf, ctrl, shift, alt, meta, keycode, preventDefault);
	traverseRInOrder(^handlers, \k, av -> if (k.stageId == stageId) {
		iter(av, \v -> {
			handled := v.fn(^handled, ke) || ^handled;
		});
	});
}

// Touch handling

touchStartHandlers : ref Tree<HandlerKey, [ZOrderedTouchHandler]> = ref makeTree();
touchStartEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedTouchStartEvent(
	stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, info : GetTouchInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, touchStartEventListeners, \ -> 
		addEventListener(stage, "touchstart", \ -> handleZorderTouchEvent(touchStartHandlers, stageId))
	);
	registerZorderTouchHandler(HandlerKey(stageId, zorder), touchStartHandlers, getTouchInfo, eventHandlerFn);
}

touchMoveHandlers : ref Tree<HandlerKey, [ZOrderedTouchHandler]> = ref makeTree();
touchMoveEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedTouchMoveEvent(
	stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, info : GetTouchInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, touchMoveEventListeners, \ -> 
		addEventListener(stage, "touchmove", \ -> handleZorderTouchEvent(touchMoveHandlers, stageId))
	);
	registerZorderTouchHandler(HandlerKey(stageId, zorder), touchMoveHandlers, getTouchInfo, eventHandlerFn);
}

touchEndHandlers : ref Tree<HandlerKey, [ZOrderedTouchHandler]> = ref makeTree();
touchEndEventListeners : ref Tree<int, () -> void> = ref makeTree();

handleZorderedTouchEndEvent(
	stage : native, zorder : [int], getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, info : GetTouchInfo) -> bool
) -> () -> void {
	stageId = getStageId(stage); 
	registerEventListener(stageId, touchEndEventListeners, \ -> 
		addEventListener(stage, "touchend", \ -> handleZorderTouchEvent(touchEndHandlers, stageId))
	);
	registerZorderTouchHandler(HandlerKey(stageId, zorder), touchEndHandlers, getTouchInfo, eventHandlerFn);
}

// Handle a touch event
handleZorderTouchEvent(handlers : ref Tree<HandlerKey, [ZOrderedTouchHandler]>, stageId : int) {
	// When an event comes, then traverse all handlers in z-order starting at the topmost one
	// and thread the return values from each eventHandler to the next (starting with false).

	// 3 mm?
	maxRadius = if (mobile && !js) round(getPixelsPerCm() * 0.3) else 0;

	handleZorderTouchEventWithRadius(handlers, 0, maxRadius, stageId);
}

handleZorderTouchEventWithRadius(handlers : ref Tree<HandlerKey, [ZOrderedTouchHandler]>, radius : int, maxRadius : int, stageId : int) {
	if (mobile) setHitboxRadius(i2d(radius));
	handled = ref false;
	traverseRInOrder(^handlers, \k, av -> if (k.stageId == stageId) {
		iter(av, \v -> {
			handled := v.fn(^handled, v.getTouchInfo) || ^handled;
		});
	});
	if (!^handled && radius < maxRadius && ^enableMobileHandlerRadius) {
		handleZorderTouchEventWithRadius(handlers, radius + 10, maxRadius, stageId);
	} else if (mobile) {
		setHitboxRadius(i2d(maxRadius));
		enableMobileHandlerRadius := true;
	}
}

// These add an event handler to the z-ordered tree, and returns a disposer that can unregister again

registerZorderHandler(
	key : HandlerKey, handlers : ref Tree<HandlerKey, [ZOrderedHandler]>, getMouseInfo : GetMouseInfo,
	eventHandlerFn : (handled : bool, info : GetMouseInfo) -> bool
) -> () -> void {
	zh = ZOrderedHandler(^zorderHandlerId, getMouseInfo, eventHandlerFn);
	zorderHandlerId := ^zorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, key, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, key, zh);
	}
}

registerZorderWheelHandler(
	key : HandlerKey, handlers : ref Tree<HandlerKey, [ZOrderedWheelHandler]>, getMouseWheelInfo : GetMouseWheelInfo,
	eventHandlerFn : (handled : bool, info : GetMouseWheelInfo) -> bool
) -> () -> void {
	zh = ZOrderedWheelHandler(^zorderHandlerId, getMouseWheelInfo, eventHandlerFn);
	zorderHandlerId := ^zorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, key, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, key, zh);
	}
}

registerKeyboardZorderHandler(
	zorder : HandlerKey, handlers : ref Tree<HandlerKey, [KeyboardZOrderedHandler]>,
	eventHandlerFn : (handled : bool, ke : KeyEvent) -> bool
) -> () -> void {
	zh = KeyboardZOrderedHandler(^keyboardZorderHandlerId, eventHandlerFn);
	keyboardZorderHandlerId := ^keyboardZorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, zorder, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, zorder, zh);
	}
}

registerZorderTouchHandler(
	key : HandlerKey, handlers : ref Tree<HandlerKey, [ZOrderedTouchHandler]>, getTouchInfo : GetTouchInfo,
	eventHandlerFn : (handled : bool, info : GetTouchInfo) -> bool
) -> () -> void {
	zh = ZOrderedTouchHandler(^zorderHandlerId, getTouchInfo, eventHandlerFn);
	zorderHandlerId := ^zorderHandlerId + 1;
	handlers := treePushToArrayValue(^handlers, key, zh);
	\ -> {
		handlers := treeRemoveFromArrayValue(^handlers, key, zh);
	}
}

registerEventListener(stageId : int, listenersTree : ref Tree<int, () -> void>, addListener : () -> () -> void) -> void {
	if (!containsKeyTree(^listenersTree, stageId)) {
		uns = addListener();
		listenersTree := setTree(^listenersTree, stageId, uns);
	}
}