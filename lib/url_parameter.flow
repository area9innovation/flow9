import string;
import array;
import binarytree;

export {
	// Get a parameter from the URL
	// For POST request it requires parameters to be url-encoded, as for *.serverbc files
	getUrlParameter(name : string) -> string;

	// Native version of getUrlParameter, but it has worse performance
	native getUrlParameterNative : io (name : string) -> string = Native.getUrlParameter;
	// Get a list of parameters from the URL
	native getAllUrlParametersArray : io () -> [[string]] = Native.getAllUrlParameters;

	// Simple version with a default value if parameter is not specified
	getUrlParameterDef(name: string, def: string) -> string;

	// Advanced version with mapping of the result to something
	eitherGetUrlParameter(name : string, mapFn : (string) -> ?, def : ?) -> ?;

	isUrlParameterTrue(name : string) -> bool;

	// Is not equal to !isUrlParameterTrue(name) as getUrlParameter returns "" for unset parameter.
	// So, for unset parameter isUrlParameterTrue = false and isUrlParameterFalse = false.
	isUrlParameterFalse(name : string) -> bool;

	isParameterTrue(name : string) -> bool;  // "true", "TRUE" or "1"
	isParameterFalse(name : string) -> bool;  // "false", "FALSE" or "0"

	// getUrlParameter with build-in stringEncodeFix
	getUrlParameterEncode(param : string) -> string;

	// Check if parameter given in URL
	isUrlParameterSet(name : string) -> bool;

	// checks if flag exists in url
	isUrlParameterExists(name : string) -> bool;

	// check if flag exists and is not false
	isUrlFlagSet(name : string) -> bool;
	//same as above but check any of
	isAnyUrlFlagSet(names : [string]) -> bool;
	//same as above but check all of
	isAllUrlFlagsSet(names : [string]) -> bool;

}

isUrlParameterSet(name : string) {
	param = getUrlParameter(name);
	param != "";
}

isUrlParameterExists(name : string) -> bool {
	switch (lookupTree(allUrlParameters, name)) {
		Some(__) : true;
		None() : false;
	}
}

isUrlFlagSet(name : string) -> bool {
	!isParameterFalse(name) && isUrlParameterExists(name);
}

isAnyUrlFlagSet(names : [string]) -> bool {
	exists(names, isUrlFlagSet)
}

isAllUrlFlagsSet(names : [string]) -> bool {
	forall(names, isUrlFlagSet);
}


isUrlParameterTrue(name : string) {
	param = getUrlParameter(name);
	isParameterTrue(param)
}

isUrlParameterFalse(name : string) {
	param = getUrlParameter(name);
	isParameterFalse(param)
}

isParameterTrue(param : string) {
	param == "true" || param == "1" || param == "TRUE";
}

isParameterFalse(param : string) {
	param == "false" || param == "0" || param == "FALSE";
}

eitherGetUrlParameter(name : string, mapFn : (string) -> ?, def : ?) -> ? {
	param = getUrlParameter(name);
	if (param != "") mapFn(param) else def
}

getUrlParameterDef(name: string, def: string) -> string {
	param = getUrlParameter(name);
	if (param != "") param else def
}

getUrlParameterEncode(param : string) {
	stringEncodeFix(getUrlParameter(param))
}

getAllUrlParameters() -> Tree<string, string> {
	fold(getAllUrlParametersArray(), makeTree(), \acc, par -> setTree(acc, par[0], par[1]))
}

getUrlParameter(name : string) -> string {
	lookupTreeDef(allUrlParameters, name, "")
}

allUrlParameters : Tree<string, string> = getAllUrlParameters();
