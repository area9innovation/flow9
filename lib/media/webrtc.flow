import string;
import media/mediastream;

export {

	native initWebRTC : io(OnReady: () -> void) -> void = WebRTCSupport.initWebRTC;

	makeMediaSenderFromStream(serverUrl : string, roomId : string, stream : MediaStream,
		onReady : (stop : () -> void) -> void, onError : (string) -> void,
		onNewParticipant : (string, MediaStream) -> void, onParticipantLeave: (string) -> void, styles : [WebRTCStyle]) -> void;

	WebRTCStyle ::=	WebRTCSTUNServer, WebRTCTURNServer;

	WebRTCSTUNServer(url : string);
	WebRTCTURNServer(url: string, username: string, credential: string);
}

makeMediaSenderFromStream(serverUrl : string, roomId : string, stream : MediaStream,
	onReady : (stop : () -> void) -> void, onError : (string) -> void,
	onNewParticipant : (string, MediaStream) -> void, onParticipantLeave: (string) -> void, styles : [WebRTCStyle]) -> void {

	stunServers = extractStructMany(styles, WebRTCSTUNServer(""));
	stunUrls = map(stunServers, \server -> server.url);

	turnServers = map(extractStructMany(styles, WebRTCTURNServer("", "", "")), \server -> [server.url, server.username, server.credential]);

	onMediaSenderReady = \sender -> {
		onReady(\-> stopMediaSender(sender));
	}
	newParticipant = \id, participantStream -> {
		onNewParticipant(id, MediaStream(participantStream));
	}

	makeMediaSenderFromStreamNative(serverUrl, roomId, stunUrls, turnServers, stream.stream,
							onMediaSenderReady, newParticipant, onParticipantLeave, onError);
}

native makeMediaSenderFromStreamNative : io(serverUrl : string, roomId : string, stunUrls : [string], turnServers : [[string]],
	stream : native,
	onMediaSenderReady : (native) -> void, onNewParticipant : (string, native) -> void, onParticipantLeave : (string) -> void,
	onError : (string) -> void) -> void = WebRTCSupport.makeMediaSenderFromStream;

native stopMediaSender : io(mediaSender : native) -> void = WebRTCSupport.stopMediaSender;
