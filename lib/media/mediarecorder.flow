import string;
import media/mediastream;

export {
	makeMediaRecorderFromStream(destination : [MediaRecorderDestination], stream : MediaStream,
		onReady : (MediaRecorderControls) -> void, onError: (string) -> void, styles : [MediaRecorderStyle]) -> void;

	MediaRecorderDestination ::= MediaRecorderWebsocketURI, MediaRecorderFilePath;

	MediaRecorderWebsocketURI(uri : string);
	MediaRecorderFilePath(uri : string);

	MediaRecorderStyle ::= MediaRecorderTimeslice;

	MediaRecorderTimeslice(timeslice : int);

	MediaRecorderControls(start : () -> void, resume : () -> void, pause : () -> void, stop : () -> void);
}

makeMediaRecorderFromStream(destination : [MediaRecorderDestination], stream : MediaStream,
		onReady : (MediaRecorderControls) -> void, onError: (string) -> void, styles : [MediaRecorderStyle]) -> void {
	websocketUri = extractStruct(destination, MediaRecorderWebsocketURI("")).uri;
	filePath = extractStruct(destination, MediaRecorderFilePath("")).uri;

	timeslice = extractStruct(styles, MediaRecorderTimeslice(5000)).timeslice;

	onRecorderReady = \recorder -> {
		onReady(MediaRecorderControls(
			\ -> startRecording(recorder, timeslice),
			\ -> resumeRecording(recorder),
			\ -> pauseRecording(recorder),
			\ -> stopRecording(recorder)
		));
	};

	makeMediaRecorderFromStreamNative(websocketUri, filePath, stream.stream, timeslice, onRecorderReady, onError);
}

native startRecording : io(recorder : native, timeslice : int) -> void = MediaRecorderSupport.startRecording;
native resumeRecording : io(recorder : native) -> void = MediaRecorderSupport.resumeRecording;
native pauseRecording : io(recorder : native) -> void = MediaRecorderSupport.pauseRecording;
native stopRecording : io(recorder : native) -> void = MediaRecorderSupport.stopRecording;

native makeMediaRecorderFromStreamNative : io(websocketUri : string, filePath : string, stream : native, timeslice : int,
	onRecorderReady : (native) -> void,	onRecorderError : (string) -> void) -> void = MediaRecorderSupport.makeMediaRecorderFromStream;
