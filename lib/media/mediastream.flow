import string;
import media/types;

export {
	makeMediaStream(onReady : (stream : MediaStream) -> void, onError : (string) -> void, styles : [MediaStreamStyle]) -> void;
	MediaStreamStyle ::=
		MediaStreamRecordAudio, MediaStreamRecordVideo, MediaStreamVideoDeviceId, MediaStreamAudioDeviceId;

	MediaStreamRecordAudio(record: bool);
	MediaStreamRecordVideo(record: bool);
	MediaStreamAudioDeviceId(deviceId: string);
	MediaStreamVideoDeviceId(deviceId: string);

	MediaStreamInputDevice(deviceId : string, label : string);

	native initDeviceInfo : io(onDeviceInfoReady : () -> void) -> void = MediaStreamSupport.initDeviceInfo;
	requestAudioInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void;
	requestVideoInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void;
}

nativeInputDevice2Flow(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> (([[string]]) -> void) {
	\inputDevices -> {
		map(inputDevices, \device -> {
			MediaStreamInputDevice(device[0], device[1]);
		}) |> onDevicesReady;
	};
}

requestAudioInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void {
	requestAudioInputDevicesNative(nativeInputDevice2Flow(onDevicesReady));
}

requestVideoInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void {
	requestVideoInputDevicesNative(nativeInputDevice2Flow(onDevicesReady));
}

makeMediaStream(onReady : (stream : MediaStream) -> void, onError : (string) -> void, styles : [MediaStreamStyle]) -> void {
	recordAudio = extractStruct(styles, MediaStreamRecordAudio(true)).record;
	recordVideo = extractStruct(styles, MediaStreamRecordVideo(true)).record;

	audioDeviceId = extractStruct(styles, MediaStreamAudioDeviceId("")).deviceId;
	videoDeviceId = extractStruct(styles, MediaStreamVideoDeviceId("")).deviceId;

	onMediaStreamReady = \stream -> {
		onReady(MediaStream(stream, \onData, metadataTypes -> scanMediaStream(stream, onData, metadataTypes), \ -> stopMediaStream(stream)));
	}

	makeMediaStreamNative(recordAudio, recordVideo, audioDeviceId, videoDeviceId, onMediaStreamReady, onError);
}

scanMediaStream(stream : native, onResult : (data : string) -> void, metadataTypes : [MetadataType]) {
    scanMediaStreamNative(stream, metadataType2String(metadataTypes), onResult);
}

metadataType2String(types : [MetadataType]) {
    map(
        types,
        \type -> {
            switch (type : MetadataType) {
                MetadataTypeCode39(): "code39";
                MetadataTypeCode39Mode43(): "code29mode43";
                MetadataTypeEan13(): "ean13";
                MetadataTypeEan8(): "ean8";
                MetadataTypeCode93(): "code93";
                MetadataTypeCode128(): "code128";
                MetadataTypePdf417(): "pdf417";
                MetadataTypeQR(): "qr";
                MetadataTypeAztek(): "aztek";
                MetadataTypeInterleaved2of5(): "interleaved2of5";
                MetadataTypeItf14(): "itf14";
                MetadataTypeDataMatrix(): "datamatrix";
            }
        }
    )
}



native requestAudioInputDevicesNative : io(onDeviceInfoReady : ([[string]]) -> void) -> void = MediaStreamSupport.requestAudioInputDevices;

native requestVideoInputDevicesNative : io(onDeviceInfoReady : ([[string]]) -> void) -> void = MediaStreamSupport.requestVideoInputDevices;

native makeMediaStreamNative : io(recordAudio : bool, recordVideo : bool, audioDeviceId : string, videoDeviceId : string,
	onReady : (native) -> void, onError : (string) -> void) -> void = MediaStreamSupport.makeMediaStream;
native scanMediaStreamNative : io (stream : native, types : [string], onResult : (data : string) -> void) -> void = MediaStreamSupport.scanMediaStream;

native startMediaStream : io(stream : native) -> void = MediaStreamSupport.startMediaStream;
native stopMediaStream : io(stream : native) -> void = MediaStreamSupport.stopMediaStream;
