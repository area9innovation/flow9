import string;

export {
	MediaStream(stream : native);

	makeMediaStream(onReady : (stream : MediaStream, stop : () -> void) -> void, onError : (string) -> void, styles : [MediaStreamStyle]) -> void;
	MediaStreamStyle ::=
		MediaStreamRecordAudio, MediaStreamRecordVideo, MediaStreamVideoDeviceId, MediaStreamAudioDeviceId;

	MediaStreamRecordAudio(record: bool);
	MediaStreamRecordVideo(record: bool);
	MediaStreamAudioDeviceId(deviceId: string);
	MediaStreamVideoDeviceId(deviceId: string);

	MediaStreamInputDevice(deviceId : string, label : string);

	native initDeviceInfo : io(onDeviceInfoReady : () -> void) -> void = MediaStreamSupport.initDeviceInfo;
	requestAudioInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void;
	requestVideoInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void;

}

nativeInputDevice2Flow(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> (([[string]]) -> void) {
	\inputDevices -> {
		map(inputDevices, \device -> {
			MediaStreamInputDevice(device[0], device[1]);
		}) |> onDevicesReady;
	};
}

requestAudioInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void {
	requestAudioInputDevicesNative(nativeInputDevice2Flow(onDevicesReady));
}

requestVideoInputDevices(onDevicesReady : ([MediaStreamInputDevice]) -> void) -> void {
	requestVideoInputDevicesNative(nativeInputDevice2Flow(onDevicesReady));
}

makeMediaStream(onReady : (stream : MediaStream, stop : () -> void) -> void, onError : (string) -> void, styles : [MediaStreamStyle]) -> void {
	recordAudio = extractStruct(styles, MediaStreamRecordAudio(true)).record;
	recordVideo = extractStruct(styles, MediaStreamRecordVideo(true)).record;

	audioDeviceId = extractStruct(styles, MediaStreamAudioDeviceId("")).deviceId;
	videoDeviceId = extractStruct(styles, MediaStreamVideoDeviceId("")).deviceId;

	onMediaStreamReady = \stream -> {
		onReady(MediaStream(stream), \ -> stopMediaStream(stream));
	}

	makeMediaStreamNative(recordAudio, recordVideo, audioDeviceId, videoDeviceId, onMediaStreamReady, onError);
}


native requestAudioInputDevicesNative : io(onDeviceInfoReady : ([[string]]) -> void) -> void = MediaStreamSupport.requestAudioInputDevices;

native requestVideoInputDevicesNative : io(onDeviceInfoReady : ([[string]]) -> void) -> void = MediaStreamSupport.requestVideoInputDevices;

native makeMediaStreamNative : io(recordAudio : bool, recordVideo : bool, audioDeviceId : string, videoDeviceId : string,
	onReady : (native) -> void, onError : (string) -> void) -> void = MediaStreamSupport.makeMediaStream;

native stopMediaStream : io(stream : native) -> void = MediaStreamSupport.stopMediaStream;
