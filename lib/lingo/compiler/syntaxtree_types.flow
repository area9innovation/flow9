import runtime;
import ds/list;
import ds/tree;

export {
	SyntaxTree(rule : int, choice : int, start : int, end : int, children : [[SyntaxTree]]);
	failSyntaxTree = SyntaxTree(-1, -1, 0, 0, []);
	dummySyntaxTree = SyntaxTree(-1, 0, 0, 0, []);

	// start & end are Pair<row,col>;
	SyntaxTreeB(rule : int, choice : int, start : Pair<int, int>, end : Pair<int, int>, children : [[SyntaxTreeB]]);
	failSyntaxTreeB = SyntaxTreeB(-1, -1, Pair(0,0), Pair(0,0), []);
	dummySyntaxTreeB = SyntaxTreeB(-1, -1, Pair(0,0), Pair(0,0), []);

	SyntaxParseAcc(input : string, length : int, mutable i : int, caches : [ref Tree<int, SyntaxTree>], mutable expect : ExpectError);
	SyntaxParseAccB(input : [[int]], mutable row : int, mutable col : int, caches : [ref Tree<Pair<int, int>, SyntaxTreeB>], mutable expect : ExpectErrorB);

	SyntaxStar(acc : SyntaxParseAcc, fn : (SyntaxParseAcc) -> SyntaxTree) -> [SyntaxTree];
	SyntaxPlus(acc : SyntaxParseAcc, fn : (SyntaxParseAcc) -> SyntaxTree) -> [SyntaxTree];
	SyntaxStarB(acc : SyntaxParseAccB, fn : (SyntaxParseAccB) -> SyntaxTreeB) -> [SyntaxTreeB];
	SyntaxPlusB(acc : SyntaxParseAccB, fn : (SyntaxParseAccB) -> SyntaxTreeB) -> [SyntaxTreeB];

	// Error reporting explained in tools/flowc/readme.md
	ExpectError(met : string, mutable expected : [string], pos : int);
	ExpectErrorB(met : string, mutable expected : [string], pos : Pair<int, int>);
	noExpectError = ExpectError("", [], -1);
	noExpectErrorB = ExpectErrorB("", [], Pair(-1,-1));

	updateExpectError(acc : SyntaxParseAcc, met : string, expected : string, pos : int) -> void;
	updateExpectErrorB(acc : SyntaxParseAccB, met : string, expected : string, pos : Pair<int, int>) -> void;
}

SyntaxStar(acc : SyntaxParseAcc, fn : (SyntaxParseAcc) -> SyntaxTree) -> [SyntaxTree] {
	list2array(doSyntaxStar(acc, fn, makeList()));
}

SyntaxStarB(acc : SyntaxParseAccB, fn : (SyntaxParseAccB) -> SyntaxTreeB) -> [SyntaxTreeB] {
	list2array(doSyntaxStarB(acc, fn, makeList()));
}

doSyntaxStar(acc : SyntaxParseAcc, fn : (SyntaxParseAcc) -> SyntaxTree, racc : List<SyntaxTree>) -> List<SyntaxTree> {
	i = acc.i;
	r1 = fn(acc);
	if (r1.choice == -1 || acc.i == i || i >= acc.length) racc
	else doSyntaxStar(acc, fn, Cons(r1, racc));
}

doSyntaxStarB(acc : SyntaxParseAccB, fn : (SyntaxParseAccB) -> SyntaxTreeB, racc : List<SyntaxTreeB>) -> List<SyntaxTreeB> {
	pos = Pair(acc.row, acc.col);
	r1 = fn(acc);
	if (r1.choice == -1 || Pair(acc.row, acc.col) == pos || pos.first >= length(acc.input)) racc
	else doSyntaxStarB(acc, fn, Cons(r1, racc));
}

SyntaxPlus(acc : SyntaxParseAcc, fn : (SyntaxParseAcc) -> SyntaxTree) -> [SyntaxTree] {
	r1 = fn(acc);
	if (r1.choice == -1) []
	else list2array(doSyntaxStar(acc, fn, Cons(r1, makeList())));
}
SyntaxPlusB(acc : SyntaxParseAccB, fn : (SyntaxParseAccB) -> SyntaxTreeB) -> [SyntaxTreeB] {
	r1 = fn(acc);
	if (r1.choice == -1) []
	else list2array(doSyntaxStarB(acc, fn, Cons(r1, makeList())));
}

updateExpectError(acc, met, expected, pos) {
	if (pos > acc.expect.pos) {
		acc.expect ::= ExpectError(met, [expected], pos);
	} else {
		// Changed contains to elemIndex to remove one .invoke in Java implementation
		if (elemIndex(acc.expect.expected, expected, -1) == -1) {
			tmp = acc.expect;
			// concat used instead of arrayPush
			tmp.expected ::= concat(acc.expect.expected, [expected]);
		}
	}
}

updateExpectErrorB(acc, met, expected, pos) {
	if (pos.first > acc.expect.pos.first || pos.second > acc.expect.pos.second) {
		acc.expect ::= ExpectErrorB(met, [expected], pos)
	} else {
		if (!contains(acc.expect.expected, expected)) {
			tmp = acc.expect;
			tmp.expected ::= arrayPush(acc.expect.expected, expected);
		}
	}
}
