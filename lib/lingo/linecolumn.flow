import string;

export {
	// Before you can translate an index to a line and column, you have to prepare one of these
	makeLineResolver(input : string) -> LineResolver;
		LineResolver(input : string, linestarts : [int]);

	// Given an input string, find the line that contains the given index with column as well.
	// Resolves tabs to 4 spaces
	findLine(resolver : LineResolver, index : int) -> LineColumn;

	// Given an input string, find the line that contains the given index with column as well.
	// Does not resolve tabs. Does not have the line string in the output
	findLineRaw(resolver : LineResolver, index : int) -> LineColumn;

	// Given an input string, find the line that contains the given index
	findLineOnly(resolver : LineResolver, index : int) -> int;

	// Information about a line. Notice that the lineno and column is 1-based
	// The lineIndex is the position of the index in this local line
	LineColumn(line : string, lineno : int, column : int, lineIndex : int, lineResolver : LineResolver);

	// Given an input string, line and column, find corresponding index
	findLineIndex(resolver : LineResolver, line : int, col : int) -> int;

	// Return line for pos without generating LineResolver.
	findLineOneTime(input : string, pos : int) -> LineColumn;
}

findLineOneTime(input, pos) {
	// rtrim2 is used to remove ending \n, treating pos as at previous line
	input0 = rtrim2(strLeft(input, pos), "\n");
	lastN0 = strLastIndexOf(input0, "\n");
	lastN = if (lastN0 == -1) 0 else lastN0 + 1;
	line = strCountOf(input0, "\n") + 1;
	LineColumn("", line, strlen(input0) - lastN, 0, LineResolver("", []));
}

makeLineResolver(input : string) -> LineResolver {
	LineResolver(input, findLineStartIndexes(input))
}

findLine(resolver : LineResolver, index : int) -> LineColumn {
	n = length(resolver.linestarts);
	lineno = if (n == 1) 0 else doFindLine(resolver, 0, n - 1, index);
	startLineIndex = resolver.linestarts[lineno];
	endLineIndex = if (lineno == n - 1) {
		strlen(resolver.input)
	} else {
		resolver.linestarts[lineno + 1] - 1;
	};

	line = substring(resolver.input, startLineIndex, endLineIndex - startLineIndex);
	col = if (line == "") 0 else findColumnNumber(line, 0, 0, index - startLineIndex);
	LineColumn(line, lineno + 1, col, index - startLineIndex, resolver)
}

findLineRaw(resolver : LineResolver, index : int) -> LineColumn {
	n = length(resolver.linestarts);
	lineno = if (n == 1) 0 else doFindLine(resolver, 0, n - 1, index);

	startLineIndex = resolver.linestarts[lineno];

	col = index - startLineIndex;
	LineColumn("", lineno + 1, col, index - startLineIndex, resolver)
}

findLineOnly(resolver : LineResolver, index : int) -> int {
	n = length(resolver.linestarts);
	1 + if (n == 1) 0 else doFindLine(resolver, 0, n - 1, index);
}

// Within the span of line numbers low and high, find where the position resides
doFindLine(resolver : LineResolver, low : int, high : int, index : int) -> int {
	if (low > high || (high - low) == 1) {
		low;
	} else {
		mid = (high + low) / 2;
		p = resolver.linestarts[mid];
		if (p <= index) {
			doFindLine(resolver, mid, high, index)
		} else {
			doFindLine(resolver, low, mid, index)
		}
	}
}

findLineIndex(resolver : LineResolver, line : int, col : int) -> int {
	line0 = if (line < 0) 0
			else if (line >= length(resolver.linestarts)) length(resolver.linestarts)-1
			else line;
	resolver.linestarts[line0] + col
}

// Given a string, return an array of indexes of where each line starts
findLineStartIndexes(i : string) -> [int] {
	list2array(doFindlinestarts(i, 0, Cons(0, makeList())));
}

doFindlinestarts(input : string, i : int, acc : List<int>) -> List<int> {
	a = s2a(input);
	foldi(a, acc, \ix, acc1, e -> {
		if (e == 10)
			Cons(ix + 1, acc1)
		else
			acc1;
	});
}

findColumnNumber(line : string, col : int, i : int, index : int) -> int {
	if (i > index) col
	else {
		findColumnNumber(line, if (getCharCodeAt(line, i) == 9) {
			((col + 4) / 4) * 4
		} else {
			col + 1
		}, i + 1, index)
	}
}

/*
main() {
	s = "\n123\n23\t45\n\n\n678\n\n";
	resolver = makeLineResolver(s);
	println(resolver);
	generate(0, strlen(s) + 1, \i -> {
		line = findLine(resolver, i);
		println(i2s(i) + " -> " + strLeft(line.line, line.lineIndex) + "-" + strRight(line.line, line.lineIndex) + " : " + toString(line));
	});
	//println("'" + strRight(s, linestarts[3]) + "'");
	quit(0);
}
*/
