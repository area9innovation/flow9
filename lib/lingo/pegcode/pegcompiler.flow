import runtime;
import fs/filesystem;
import text/binary;
import lingo/lingogrammar;
import lingo/pegcode/grammar2code;
import lingo/pegcode/rename_bindings;
import lingo/pegcode/optimize_grammar;
import lingo/pegcode/pegcode;
import lingo/pegcode/lingocode;
import lingo/pegtypecheck;
import lingo/pegcode/infer_pegactions;
import lingo/compiler/compile_lingo;
import text/serialize;
import lingo/pegaction;

// Add temporary imports here to get testfile to work with semantic ASTs for your grammar:
// import formats/mouse/mouse_ast;
// import lingo/flow/flowast;
// import formats/sql/sql_ast;
// import formats/json/json;
/*
 Compiles .lingo files to pegcode or experimental flow code to parse the grammar.

TODO:
- Consider to move to tools/pegcompiler/
- Consider to implement left-recursion support: http://www.vpri.org/pdf/tr2007002_packrat.pdf
- Implement the cut-optimization to rewind the choice stack: http://www.romanredz.se/papers/FI2015.pdf
- Compare with Grako, Mouse and other PEG parsers and steal good ideas
- Consider to add semantic actions automatically
- Consider to producing the AST types automatically from the grammar
*/

main() {
	grammarfile = getUrlParameter("file");
	targetfile = getUrlParameter("out");
	imports = getUrlParameter("imports");
	flowfile = getUrlParameter("flowfile");
	flowparser = getUrlParameter("flowparser");
	testfile = getUrlParameter("testfile");
	test = getUrlParameter("test");
	grammarName = getUrlParameter("grammarname");

	files = strSplit(grammarfile, ",");
	grammar = fold(files, "", \content, file -> {
		if (fileExists(file)) {
			content + getFileContent(file)
		} else {
			println("Error: " + file + " not found");
			content;
		}
	});

	if (grammarfile == "" || grammar == "") {
		println("Usage:
    flowcpp lingo/pegcode/pegcompiler.flow -- file=path/grammar.lingo <options>
    	file=<file> gives the path to the Lingo file to work with.

    	Compiling to pegcode:
    	out=<file> compiles the grammar to pegcode and saves it as a flow file.
        debug=1 makes the output file contain the debug info.

        flowfile=<file> produces a flow file with a parsing driver for the pegcode parser.
       	parsetype=MyAstType makes the parsing driver use a strongly typed return type.

        grammar=1 prints the optimized grammar for inspection.
        opcodes=1 prints the resulting pegcodes.

        Testing the grammar:
        test=<string> immediately tests the grammar on that string.
        testfile=<filename> tests the grammar on the contents of that file.
        testruns=<integer> runs the grammar that many times on the test content to test performance.
        result=1 prints the AST output of the grammar.
        trace=1 prints a debug trace after each completed match.
        trace=<ids> prints a debug trace at the end of the comma-separated rules.
		noactions=1 ignores any semantic actions in the grammar, making it easier to test.

        Compiling to flow (fastest parser):
        flowparser=<file> produces a flow file that can parse the grammar using a SyntaxTree AST.
        flowparserast=<file> produces a flow file with functions to use the SyntaxTree AST.
        flowparserdebug=1 prints the transformed lingo grammar which is ultimately compiled.

        Typechecking:
        types=1 prints the inferred types of each rule.
        actions=1 prints suggested actions.
");
		quit(1);
	} else if (grammar == "") {
		println("Could not read " + grammarfile);
		quit(1);
	} else {
		r = runPeg(grammar, pegOps4Lingo, makeTree(), defaultPegActions);
		switch (r.result) {
			None(): {
				println("Could not parse grammar file `" + grammarfile + "`");
				quit(1);
			}
			Some(gr): {
				if (r.pos < strlen(grammar)) {
					println("Could not parse all of grammar file `" + grammarfile + "`:");
					printParseError(grammar, r);
					quit(1);
				} else {
					lastfile = lastElement(files, "");
					paths = strSplit(lastfile, "/");
					file = paths[length(paths) - 1];
					name = takeBefore(file, ".lingo", "");
					if (name == "") {
						println("Input file should have .lingo suffix");
						quit(1);
					} else {
						arrayName = 
							if (grammarName != "") {
								grammarName
							} else {
								name
							}

						uname = toUpperCase(strLeft(arrayName, 1)) + strRight(arrayName, 1);

						// Check for duplicate rules that are different
						prods = fold(gr.productions, makeTree(), \acc, p -> {
							ex = lookupTreeDef(acc, p.name, p);
							if (ex != p) {
								println("Duplicate rule. This:");
								printGrammar(Grammar([ex]));
								println("will be replaced by this:");

								subst = inlineProduction(ex, p);

								printGrammar(Grammar([subst]));
								println("");
								setTree(acc, p.name, subst)
							} else {
								setTree(acc, p.name, p)
							}
						});

						// We replace the original with the duplicate
						dupped = Grammar(map(gr.productions, \p -> {
							lookupTreeDef(prods, p.name, p)
						}));

						// Type checking
						types = typePegGrammar(dupped);
						if (!isUrlParameterFalse("types")) {

							printAll = isUrlParameterTrue("types");
							iter(dupped.productions, \p -> {
								type = lookupTreeDef(types, p.name, PegUnknown());
								if (printAll || isPegTypeError(type)) {
									println(p.name + ": " + pegType2string(type));
								}
							});
						}

						actionless = if (isUrlParameterTrue("noactions")) {
							Grammar(map(dupped.productions, \p -> {
								Production(p with choices = map(p.choices, \s -> {
									Seq(map(s.seq, removePegActions))
								}))
							}));
						} else dupped;

						// Compile to a Flow parser?
						if (flowparser != "") {
							output = compileSyntaxGrammarToFlow(actionless, []);
							target = changeFileExt(flowparser, ".flow");
							if (output.first != "") {
								println("Error compiling to " + target + ": " + output.first);
							}
							re = setFileContent(target, output.second);
							if (re) {
								println("Saved " + target);
							} else {
								println("ERROR: Could not save " + target);
							}
						}

						// Inferred actions
						actioned = if (isUrlParameterTrue("actions")) {
							a  = inferPegActions(actionless, types);
							printGrammar(a);
							a;
						} else {
							actionless;
						}

						// Add tracing
						trace = getUrlParameter("trace");
						traced = if (trace != "") {
							addGrammarTracing(actioned, if (trace == "1") [] else strSplit(trace, ","));
						} else actioned;


						// Optimize and process the grammar
						renamed = optimizeGrammar(renameBindings(inlineProductions(processNestedSequences(traced))));

						// Simple left-recursion check
						iter(renamed.productions, \p -> {
							iter(p.choices, \c -> {
								if (c.seq != []) {
									f = c.seq[0];
									if (f == Rule(p.name)) {
										println("Error: Left recursion in '" + p.name + "' will cause infinite loop");
									}
								} else {
									println("Warning: Empty choice in '" + p.name + "' might cause strange problems");
								}
							});
						});

						if (isUrlParameterTrue("grammar")) {
							println("Grammar after optimizations:");
							printGrammar(renamed);
						}

						code = grammar2code(renamed);

						if (isUrlParameterTrue("pegcodes")) {
							// If you want detailed profiling, be sure to search for Enable in pegcode.flow
							println("Pegcodes:");
							printPegcode(code.first, code.second);
						}

						// Is there a parsing test required?
						if (testfile != "" || test != "") {
							runParsingTest(code, testfile, test);
						}

						if (targetfile != "") {
							result = "// Generated by\n//   flowcpp lingo/pegcode/pegcompiler.flow -- file=" + grammarfile + " out=" + targetfile + "\n\n" +
								makePegOpcodes(uname, code.first, if (isUrlParameterTrue("debug")) code.second else makeTree());
							re = setFileContent(targetfile, result);
							if (!re) {
								println("Could not save output " + targetfile);
								quit(1);
							}
						}

						if (flowfile != "") {
							if (targetfile == "") {
								println("Error: Also give provide the out= argument");
							}

							// TODO: Maybe we could just lift it from the type check?
							parsetype = getUrlParameterDef("parsetype", "?");

							template = 
"// Generated by\n//   flowcpp lingo/pegcode/pegcompiler.flow -- file=" + grammarfile + " out=" + targetfile + 
	" flowfile=" + flowfile + (if (parsetype != "?") " parsetype=" + parsetype else "") + "

import lingo/pegcode/driver;
import " + takeBefore(targetfile, ".flow", targetfile) +";
import " + takeBefore(targetfile, "pegop.flow", targetfile) + "ast;

export {
	// Parses a string in " + uname + " format. Returns 'def' on failure.
	// The second int is how far we parsed, and the string is an error message on failure.
	parse" + uname + "(text : string, def : " + parsetype + ") -> Triple<" + parsetype + ", int, string>;
}

parse" + uname + "(text : string, def : " + parsetype + ") -> Triple<" + parsetype + ", int, string> {
	parsic3(pegOps4" + uname + ", text, defaultPegActions, def);
}
";
							re = setFileContent(flowfile, template);
							if (!re) {
								println("Could not save flow template " + flowfile);
								quit(1);
							}
						}
					}
				}
			}
		}
	}
	quit(0);
}

runParsingTest(code : Pair, testfile : string, test : string) {
	content = if (testfile != "") {
		println("Running grammar on " + testfile);
		getFileContent(testfile) 
	} else {
		println("Running grammar on '" + test + "'");
		test;
	}
	if (content == "") {
		println("Warning: " + testfile + " is empty");
	}
	testruns = s2i(getUrlParameterDef("testruns", "1"));

	startTime = timestamp();
	fori(2, testruns, \i -> {
		testresult = runPeg(content, code.first, code.second, defaultPegActions);
	});
	testresult = runPeg(content, code.first, code.second, defaultPegActions);

	error = if (testresult.pos < 0) {
		"SYNTAX ERROR";
	} else if (testresult.pos < strlen(content)) {
		resolver = makeLineResolver(content);
		line = findLine(resolver, testresult.pos);

		i2s(line.lineno) + ":" + i2s(line.column) 
		+ ": SYNTAX ERROR\n" + strLeft(line.line, 80) + "\n"
		+ (if (line.lineIndex < 80) {
			"\n" + strLeft("                                                                                ", line.lineIndex)+ "^";
		} else "");
	} else "";

	if (error != "") {
		println("ERROR PARSING TEST:");
		println((if (testfile != "") testfile + ": " else "") + error);
	} else {
		println("PARSE OF TEST SUCCESSFUL");
	}

	println("Time to parse: " + d2s((timestamp() - startTime) / 1000.0) + if (testruns > 1) " for " + i2s(testruns) + " runs" else "");
	if (isUrlParameterTrue("result")) {
		println("Result:");
		println(testresult);
	}

	if (!emptyIntTree(parseCacheMisses)) {
		// If you need cache testing, be sure to change in 
		// pegcode.flow and grammar2code 
		// where it says "Enable cache analysis here"
		dumpParseCacheStats(foldTree(code.second, [], \k, v, acc -> arrayPush(acc, v)));
	}
}

inlineProduction(orig : Production, replacement : Production) -> Production {
	Production(replacement.name, replacement.caching, replacement.type, fold(replacement.choices, [], \acc : [Seq], c -> {
		if (c == Seq([Rule(orig.name)])) {
			concat(acc, orig.choices)
		} else {
			arrayPush(acc, c)
		}
	}));
}

addGrammarTracing(g : Grammar, rules : [string]) -> Grammar {
	Grammar(map(g.productions, \p -> {
		Production(p.name, p.caching, p.type, mapi(p.choices, \i, c -> {
			if (rules == [] || contains(rules, p.name)) {
				if (c.seq == []) c
				else {
					last = lastElement(c.seq, Epsilon());
					Seq(switch (last) {
						Action2(e): {
							n = length(c.seq);
							concat(
								subrange(c.seq, 0, n - 1), 
								[
									Action2(ActionCallDebug("debug", [
										ActionVar(p.name),
										e,
									])),
									Action2(e)
								]
							);
						}
						default: {
							choiceName = p.name + "result" + i2s(i);
							bind =
								if (isSameStructType(last, Rule("")))
									BindResult(choiceName, Seq(c.seq))
								else
									BindMatched(choiceName, Seq(c.seq));

							[
								bind,
								Action2(ActionCallDebug("debug", [ActionVar(p.name), ActionVar(choiceName)])),
								Action2(ActionVar(choiceName))
							];
						}
					});
				}
			} else c;
		}))
	}));
}

makePegOpcodes(name : string, opcodes : [PegOp], debug : Tree<int, string>) -> string {
	s0 = toString(opcodes);
	s1 = strReplace(s0, "\u0000", "\\u0000");
	s2 = strReplace(s1, "\uffff", "\\uffff");
	s3 = strReplace(s2, "\\r", "\\u000d");
	s4 = strReplace(s3, "PegReturn(), ", "PegReturn(),\n\t");

	"import lingo/pegcode/pegcode;

export {
	pegOps4" + name + " : [PegOp];\n" 
	+ (if (debug != makeTree()) "	pegOps4" + name + "Debug : Tree<int, string>;\n" else "")
+ "}

pegOps4" + name + " : [PegOp] =\n\t" + s4 + ";\n"
+ (if (debug != makeTree()) "pegOps4" + name + "Debug = " + serialize(debug) + ";\n" else "")
}

removePegActions(pa : Parsing) -> Parsing {
	switch (pa) {
		Choices(p): Choices(map(p, removePegActions));
		Seq(seq): Seq(map(seq, removePegActions));
		Star(p): Star(removePegActions(p));
		Plus(p): Plus(removePegActions(p));
		Opt(p): Opt(removePegActions(p));
		Negation(p): Negation(removePegActions(p));
		CutUp(p): CutUp(removePegActions(p));
		CutDown(p): CutDown(removePegActions(p));
		Rule(name): pa;
		iRule(i): pa;
		Term(name): pa;
		CharRange(first, last): pa;
		Epsilon(): pa;
		Action(fn): Epsilon();
		Action2(e): Epsilon();
		ActionIndex(): pa;
		BindResult(name, v): BindResult(name, removePegActions(v));
		BindMatched(name, v): BindMatched(name, removePegActions(v));
		LingoValue(value): pa;
	}
}
