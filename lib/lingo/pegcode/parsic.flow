import lingo/pegcode/lingocode;
import lingo/linecolumn;

export {
	// Best version: A version which can be used for error reporting. In case of error, def is used and you get a nice error message
	// in the string. The second int is how far we managed to parse.
	parsic3(op : [PegOp], text : string, actions : SemanticActions, def : ?) -> Triple<?, int, string>;

	// Returns "PARSING FAILED" when we were not successful
	parsic(op : [PegOp], s : string, actions : SemanticActions) -> flow;

	// A version that does not spam the console, and happily ignores if there are leftover input when toplevel construct is done
	parsic2(op : [PegOp], s : string, actions : SemanticActions) -> flow;
}

parsic(op : [PegOp], text : string, actions : SemanticActions) -> flow {
	result = runPeg(text, op, makeTree(), actions);
	if (result.pos < 0) {
		println("SYNTAX ERROR <0: \"" + strLeft(text, 130)+ "...\"");
	} else if (result.pos < strlen(text)) {
		println("SYNTAX ERROR AT : \"" + substring(text, result.pos, 130) + "...\"");	
	}
	flow(either(result.result, flow("PARSING FAILED")));
}

// The version that does not spam the console, and happily ignores if there are leftover input when toplevel construct is done
parsic2(op : [PegOp], text : string, actions : SemanticActions) -> flow {
	result : ParseResult = runPeg(text, op, makeTree(), actions);
	either(result.result, flow("PARSING FAILED"));
}

parsic3(op : [PegOp], code : string, actions : SemanticActions, def : ?) -> Triple<?, int, string> {
	result = runPeg(code, op, makeTree(), actions);
	typed = cast(result.result : Maybe<flow> -> Maybe<?>);
	error = if (result.pos < 0) {
		"SYNTAX ERROR";
	} else if (result.pos < strlen(code) || isNone(typed)) {
		resolver = makeLineResolver(code);
		line = findLine(resolver, result.pos);

		i2s(line.lineno) + ":" + i2s(line.column) 
		+ ": SYNTAX ERROR\n" + strLeft(line.line, 80) + "\n"
		+ (if (line.lineIndex < 80) {
			strLeft("                                                                                ", line.lineIndex) + "^";
		} else "");
	} else "";
	Triple(either(typed, def), result.pos, error)
}
