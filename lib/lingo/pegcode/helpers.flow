import lingo/peg;

export {
	// Turn all actions in pa into `Epsion()` (no action).
	removePegActions(pa : Parsing) -> Parsing;

	// Prefix all rules of a grammar with a certain prefix:
	// `rule` -> `prefix_rule`
	prefixRulesInGrammar(gr : Grammar, prefix : string) -> Grammar;
}

removePegActions(pa : Parsing) -> Parsing {
	switch (pa) {
		Choices(p): Choices(map(p, removePegActions));
		Seq(seq): Seq(map(seq, removePegActions));
		Star(p): Star(removePegActions(p));
		Plus(p): Plus(removePegActions(p));
		Opt(p): Opt(removePegActions(p));
		Negation(p): Negation(removePegActions(p));
		CutUp(p): CutUp(removePegActions(p));
		CutDown(p): CutDown(removePegActions(p));
		Rule(name): pa;
		iRule(i): pa;
		Term(name): pa;
		CharRange(first, last): pa;
		Epsilon(): pa;
		Action(fn): Epsilon();
		Action2(e): Epsilon();
		ActionIndex(): pa;
		BindResult(name, v): BindResult(name, removePegActions(v));
		BindMatched(name, v): BindMatched(name, removePegActions(v));
		LingoValue(value): pa;
	}
}

prefixRulesInGrammar(gr : Grammar, prefix : string) -> Grammar {
	Grammar(map(gr.productions, \prod ->
		Production(prod with
			name = prefix + "_" + prod.name,
			choices = map(prod.choices, \choice ->
				Seq(map(choice.seq, \p -> prefixRulesInParsing(p, prefix)))
			)
		)
	));
}

prefixRulesInParsing(pa : Parsing, prefix : string) -> Parsing {
	switch (pa) {
		Choices(ps): Choices(map(ps, \p -> prefixRulesInParsing(p, prefix)));
		Seq(seq): Seq(map(seq, \p -> prefixRulesInParsing(p, prefix)));
		Star(p): Star(prefixRulesInParsing(p, prefix));
		Plus(p): Plus(prefixRulesInParsing(p, prefix));
		Opt(p): Opt(prefixRulesInParsing(p, prefix));
		Negation(p): Negation(prefixRulesInParsing(p, prefix));
		CutUp(p): CutUp(prefixRulesInParsing(p, prefix));
		CutDown(p): CutDown(prefixRulesInParsing(p, prefix));
		Rule(name): Rule(prefix + "_" + name);
		iRule(i): pa;
		Term(name): pa;
		CharRange(first, last): pa;
		Epsilon(): pa;
		Action(fn): pa;
		Action2(e): pa;
		ActionIndex(): pa;
		BindResult(name, v): BindResult(name, prefixRulesInParsing(v, prefix));
		BindMatched(name, v): BindMatched(name, prefixRulesInParsing(v, prefix));
		LingoValue(value): pa;
	}
}
