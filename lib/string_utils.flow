import string;
import math/bits;

export {
	humpCase(s : string, initial : bool) -> string;
	snakeCase(s : string) -> string;
	humanizeName(s : string) -> string;
	plural2single(s : string) -> string;

	// Capitalize the first letter only
	capitalize(s : string) -> string;

	/// Folds over the left-to-right character sequence in s
	stringFoldChar : (s : string, a : ?, f : (a2 : ?, c : string) -> ?) -> ?;
	stringFoldiChar: (s : string, a : ?, f : (i : int, a2 : ?, c : string) -> ?) -> ?;

	// Used in InputFilter, init passed to fold,
	// example in color Picker it starts with "#": strLeft(hexDigitFilter(s, "#"), 7);
	hexDigitFilter: (s: string, init: string) -> string;
	decDigitFilter: (s: string, init: string) -> string;

	// converts UTF32 into sequence of 16 bit chars according to https://www.unicode.org/faq/utf_bom.html
	utf32toUtf16(c : int) -> string;
}

humpCase(s : string, initial : bool) -> string {
	pieces = strSplit(s, "_");
	t = strGlue(map(pieces, toCapitalization), "");
	if (initial) t
	else toLowerCase(getCharAt(t, 0)) + strRight(t, 1);
}

snakeCase(s : string) -> string {
	toLowerCase(getCharAt(s, 0)) +
	stringFoldChar(strRight(s, 1), "", \acc, char -> {
		acc + if (isUpperLetter(char)) "_" + toLowerCase(char) else char
	})
}

humanizeName(s : string) -> string {
	pieces0 = strSplit(s, "_");
	pieces1 = concatA(map(pieces0, \p -> splitLow2High(p, 0, "", [])));
	strGlue(map(pieces1, toCapitalization), " ");
}

// Splits a string from lUl to l Ul where l is lowercase, u is uppercase
splitLow2High(s : string, i : int, word : string, acc : [string]) -> [string] {
	n = strlen(s);
	if (i + 2 < n) {
		if (isLowerLetter(getCharAt(s, i))
			&& isUpperLetter(getCharAt(s, i + 1))
			// && isLowerLetter(getCharAt(s, i + 2))		// GradeUS should stay like that
		) {
			// OK, we can split
			acc2 = arrayPush(acc, word + getCharAt(s, i));
			splitLow2High(s, i + 1, "", acc2)
		} else {
			splitLow2High(s, i + 1, word + getCharAt(s, i), acc)
		}
	} else {
		arrayPush(acc, word + strRight(s, i))
	}
}

plural2single(s : string) {
	if (endsWith(s, "ies")) {
		strLeft(s, strlen(s) - 3) + "y";
	} else if (endsWith(s, "sses")) { // processes vs cases
		strLeft(s, strlen(s) - 2);
	} else if (endsWith(s, "s")) {
		strLeft(s, strlen(s) - 1);
	} else {
		// don't change the name if it's not in plural form
		s
	}
}

capitalize(s : string) -> string {
	if (s == "") {
		s
	} else {
		toUpperCase(getCharAt(s, 0)) + strRight(s, 1);
	}
}

stringFoldChar(s, a, f) {
	fold(enumFromTo(0, strlen(s) - 1), a, \a2, i->f(a2, getCharAt(s, i)));
}

stringFoldiChar(s, a, f) {
	fold(enumFromTo(0, strlen(s) - 1), a, \a2, i->f(i, a2, getCharAt(s, i)));
}

hexDigitFilter(s, init) {
	stringFoldChar(s, init, \acc, ch -> {
		if (isHexDigit(ch)) acc + ch else acc;
	});
}

decDigitFilter(s, init) {
	stringFoldChar(s, init, \acc, ch -> {
		if (isDigit(ch)) acc + ch else acc;
	});
}

utf32toUtf16(c : int) -> string {
	if (c >= 0x10000 && c < 0x110000) {
		c1 = c - 0x10000; //Regarding UTF-16 spec.
		hiSurrogate = 0xD800 + bitUshr(c1, 10);
		loSurrogate = 0xDC00 + bitAnd(c1, 0x3FF);
		fromCharCode(hiSurrogate) + fromCharCode(loSurrogate)
	} else if (c < 0xD800 || (c >= 0xE000 && c < 0x10000)) {
		fromCharCode(c)
	} else {
		"";
	}
}