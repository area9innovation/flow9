import string;
import text/deserialize_string;
import math/bits;
import math/stringmath;
import math/matrix;

export {
	humpCase(s : string, initial : bool) -> string;
	snakeCase(s : string) -> string;
	humanizeName(s : string) -> string;
	plural2single(s : string) -> string;

	// Capitalize the first letter only
	capitalize(s : string) -> string;
	decapitalize(s : string) -> string;

	// Checks string starts from letter or underscore and continues with same or numbers.
	isValidIdentifier(s : string) -> bool;

	stringMap : (s : string, f : (string)->?)->[?];

	/// Folds over the left-to-right character sequence in s
	stringFoldChar : (s : string, a : ?, f : (a2 : ?, c : string) -> ?) -> ?;
	stringFoldiChar: (s : string, a : ?, f : (i : int, a2 : ?, c : string) -> ?) -> ?;

	// Used in InputFilter, init passed to fold,
	// example in color Picker it starts with "#": strLeft(hexDigitFilter(s, "#"), 7);
	hexDigitFilter: (s: string, init: string) -> string;
	decDigitFilter: (s: string, init: string) -> string;

	// converts UTF32 into sequence of 16 bit chars according to https://www.unicode.org/faq/utf_bom.html
	utf32toUtf16(c : int) -> string;

	// Do a replacement "\n" to "\\n" and so on
	escapeStr(s : string) -> string;

	// Do a backwards replacement "\\n" to "\n" and so on
	unescapeStr(str : string) -> string;

	// Prefix all lines from a string with tab.
	strIndent(lines : string) -> string;

	// Inverse strIndent function: try to remove a tab at the beginning of each line (if exists)
	strUnindent(s : string) -> string;

	// Prints the memory size in human-readable (like '45.56 Mb') format.
	memory2s(mem : double) -> string;

	// Smart toString: structures the output with indents
	toStringFormatted : (?) -> string;

	// Checks if all characters in the string are ASCII, i.e. their codes don't exceed 127
	isAsciiString(s : string) -> bool;

	// Replaces all non-ascii characters with their hex-codes, thus making a string ASCII.
	encodeAscii(s : string) -> string;

	// Decode non-ascii characters from hex-codes of unicode code points.
	decodeAscii(s : string) -> string;

	/*
	Formats the input matrix (array of columns, which are arrays of rows) into the output like:

	| # | MPE# | ND Expression                | MPE Translation                        | ND Rationale | MPE Rationale                               |
	-------------------------------------------------------------------------------------------------------------------------------------------------
	| 1 | 5    |  ` ( ( ps /\ ch ) -> th ) `  |  ` ( ph -> ( ( ps /\ ch ) -> th ) ) `  | Given        | $e.                                         |
	-------------------------------------------------------------------------------------------------------------------------------------------------
	| 2 | 2    |  ` ( ch -> ps ) `            |  ` ( ph -> ( ch -> ps ) ) `            | Given        | $e.                                         |
	-------------------------------------------------------------------------------------------------------------------------------------------------
	| 3 | 1    |  ` ch `                      |  ` ( ph -> ch ) `                      | Given        | $e.                                         |
	-------------------------------------------------------------------------------------------------------------------------------------------------
	| 4 | 3    |  ` ps `                      |  ` ( ph -> ps ) `                      |  ` -> `E 2,3 |  ~ mpd , the MPE equivalent of ` -> `E, 1,2 |
	-------------------------------------------------------------------------------------------------------------------------------------------------
	| 5 | 4    |  ` ( ps /\ ch ) `            |  ` ( ph -> ( ps /\ ch ) ) `            |  ` /\ `I 4,3 |  ~ jca , the MPE equivalent of ` /\ `I, 3,1 |

	*/
	stringMatrix2s(m : [[string]], colHeaders : Maybe<[string]>, rowHeadres : Maybe<[string]>) -> string;

	/*
	Formats the input matrix (array of columns, which are arrays of rows) into the output like:

	 #   MPE#   ND Expression                  MPE Translation                          ND Rationale   MPE Rationale
	------------------------------------------------------------------------------------------------------------------------------------------------
	 1   5       ` ( ( ps /\ ch ) -> th ) `     ` ( ph -> ( ( ps /\ ch ) -> th ) ) `    Given          $e.
	 2   2       ` ( ch -> ps ) `               ` ( ph -> ( ch -> ps ) ) `              Given          $e.
	 3   1       ` ch `                         ` ( ph -> ch ) `                        Given          $e.
	 4   3       ` ps `                         ` ( ph -> ps ) `                         ` -> `E 2,3    ~ mpd , the MPE equivalent of ` -> `E, 1,2
	 5   4       ` ( ps /\ ch ) `               ` ( ph -> ( ps /\ ch ) ) `               ` /\ `I 4,3    ~ jca , the MPE equivalent of ` /\ `I, 3,1

	*/
	stringTable2s(m : [[string]], colHeaders : Maybe<[string]>) -> string;


	// Replace patterns like: "$F_2(some_arg)" with corresponding function invocation
	strApplyFns(s: string, fns: [(string) -> string]) -> string;

	// Replace patterns like: "$A_1" with corresponding values
	strSubstituteArgs(pattern: string, args: [string]) -> string;

	// Replace patterns like: "$<X>_1", where X is an arg prefix,  with corresponding values.
	// By passing "A" as an argument prefix we get exactly strSubstituteArgs
	strSubstituteArgsGroup(pattern: string, args: [string], arg_prefix: string) -> string;

	// Glue a strings array with some delimiter so that the result has exactly width characters.
	// Extra spaces are added to delimiter to enlarge the deserved string length.
	strGlueToWidth(ss: [string], delim: string, width: int) -> string;

	// Breaks array of strings into rows (arrays of strings) with maximum length of a row as maxWidth.
	// If align is true, the strings are aligned as columns by a maximal string length in a row.
	// Example of output with align = true:
	//
	//   Single-quoted  string         literals       (but
	//   not            triple-quoted  string         literals!)
	//   may            contain        escape         sequences
	//   (denoted       by             a              preceding
	//   backslash),    which          are            used
	//   to             specify        special        characters.
	//   A              full           list           of
	//   available      escape         sequences      is
	//   here.
	//
	// with align = false:
	//   Single-quoted  string  literals  (but  not  triple-quoted string
	//   literals!)  may contain escape sequences (denoted by a preceding
	//   backslash),  which  are  used  to  specify special characters. A
	//   full    list    of   available   escape   sequences   is   here.
	//
	strArrayWrap(s : [string], maxWidth : int, align: bool, delimiter: string) -> string;

	// Removes all empty (i.e. containig only spaces/new lines/tabs) lines from a multy line
	removeEmptyLines(s: string) -> string;
}

humpCase(s : string, initial : bool) -> string {
	pieces = strSplit(s, "_");
	t = strGlue(map(pieces, toCapitalization), "");
	if (initial) t
	else toLowerCase(getCharAt(t, 0)) + strRight(t, 1);
}

snakeCase(s : string) -> string {
	toLowerCase(getCharAt(s, 0)) +
	stringFoldChar(strRight(s, 1), "", \acc, char -> {
		acc + if (isUpperLetter(char)) "_" + toLowerCase(char) else char
	})
}

humanizeName(s : string) -> string {
	pieces0 = strSplit(s, "_");
	pieces1 = concatA(map(pieces0, \p -> splitLow2High(p, 0, "", [])));
	strGlue(map(pieces1, toCapitalization), " ");
}

// Splits a string from lUl to l Ul where l is lowercase, U is uppercase
splitLow2High(s : string, i : int, word : string, acc : [string]) -> [string] {
	n = strlen(s);
	if (i + 2 < n) {
		if (isLowerLetter(getCharAt(s, i))
			&& isUpperLetter(getCharAt(s, i + 1))
			// && isLowerLetter(getCharAt(s, i + 2))		// GradeUS should stay like that
		) {
			// OK, we can split
			acc2 = arrayPush(acc, word + getCharAt(s, i));
			splitLow2High(s, i + 1, "", acc2)
		} else if (word != "" && isUpperLetter(getCharAt(s, i)) && isLowerLetter(getCharAt(s, i + 1))) {
			acc2 = arrayPush(acc, word);
			splitLow2High(s, i, "", acc2);
		} else {
			splitLow2High(s, i + 1, word + getCharAt(s, i), acc)
		}
	} else {
		arrayPush(acc, word + strRight(s, i))
	}
}

plural2single(s : string) {
	if (endsWith(s, "ies")) {
		strLeft(s, strlen(s) - 3) + "y";
	} else if (endsWith(s, "sses")) { // processes vs cases
		strLeft(s, strlen(s) - 2);
	} else if (endsWith(s, "s")) {
		strLeft(s, strlen(s) - 1);
	} else {
		// don't change the name if it's not in plural form
		s
	}
}

capitalize(s : string) -> string {
	if (s == "") {
		s
	} else {
		toUpperCase(getCharAt(s, 0)) + strRight(s, 1);
	}
}

decapitalize(s : string) -> string {
	if (s == "") {
		s
	} else {
		toLowerCase(getCharAt(s, 0)) + strRight(s, 1);
	}
}

isValidIdentifier(name : string) -> bool {
	goodName = all(mapi(s2a(name), \i, cc -> {
		c = fromCharCode(cc);
		if (i == 0) (isLetter(c) || c == "_")
		else (isDigit(c) || isLetter(c) || c == "_");
	}));

	strlen(name) > 0 && goodName;
}

stringMap(s, f) {
	map(enumFromTo(0, strlen(s) - 1), \i->f(getCharAt(s, i)));
}

stringFoldChar(s, a, f) {
	foldRange(0, strlen(s) - 1, a, \a2, i->f(a2, getCharAt(s, i)));
}

stringFoldiChar(s, a, f) {
	foldRange(0, strlen(s) - 1, a, \a2, i->f(i, a2, getCharAt(s, i)));
}

hexDigitFilter(s, init) {
	stringFoldChar(s, init, \acc, ch -> {
		if (isHexDigit(ch)) acc + ch else acc;
	});
}

decDigitFilter(s, init) {
	stringFoldChar(s, init, \acc, ch -> {
		if (isDigit(ch)) acc + ch else acc;
	});
}

utf32toUtf16(c : int) -> string {
	if (c >= 0x10000 && c < 0x110000) {
		c1 = c - 0x10000; //Regarding UTF-16 spec.
		hiSurrogate = 0xD800 + bitUshr(c1, 10);
		loSurrogate = 0xDC00 + bitAnd(c1, 0x3FF);
		fromCharCode(hiSurrogate) + fromCharCode(loSurrogate)
	} else if (c < 0xD800 || (c >= 0xE000 && c < 0x10000)) {
		fromCharCode(c)
	} else {
		"";
	}
}

escapeStr(s : string) -> string {
	s2 = toString(s);
	substring(s2, 1, strlen(s2) - 2);
}

unescapeStr(s : string) -> string {
	deserializeString("\"" + s + "\"").first;
}

strIndent(s : string) -> string {
	strGlue(map(strSplit(s, "\n"), \line -> "\t" + line), "\n");
}

strUnindent(s : string) -> string {
	strGlue(map(strSplit(s, "\n"), \line -> if (startsWith(line, "\t")) strRight(line, 1) else line), "\n");
}


memory2s(mem : double) -> string {
	if (mem < kilobyteUnit()) {
		i2s(round(mem)) + " B";
	} else if (mem < megabyteUnit()) {
		d2st(mem / kilobyteUnit(), 1) + " Kb";
	} else if (mem < gigabyteUnit()) {
		d2st(mem / megabyteUnit(), 1) + " Mb";
	} else {
		d2st(mem / gigabyteUnit(), 1) + " Gb";
	}
}

toStringFormatted(v : ?) -> string {
	toStringFormatted2(flow(v));
}

toStringFormatted2(v : flow) -> string {
	tag = getDataTagForValue(v);
	if (tag == void_data_tag) {
		// Must not ever happen
		"{}";
	} else if (tag == function_data_tag) {
		"function";
	} else if (tag == native_data_tag) {
		"native";
	} else if (tag == int_data_tag) {
		i2s(cast(v : flow -> int));
	} else if (tag == double_data_tag) {
		d2s(cast(v : flow -> double));
	} else if (tag == bool_data_tag) {
		b2s(cast(v : flow -> bool));
	} else if (tag == string_data_tag) {
		toString(v);
	} else if (tag == array_data_tag) {
		arr = map(cast(v : flow -> [flow]), toStringFormatted2);
		arr_sl = "[" + strGlue(arr, ", ") + "]";
		if (!strContains(arr_sl, "\n") && strlen(arr_sl) < 64) arr_sl else {
			"[\n" + strIndent(strGlue(arr, ",\n")) + "\n]";
		}
	} else if (tag == reference_data_tag) {
		"ref " + toStringFormatted2(^cast(v : flow -> ref flow));
	} else if (tag == struct_data_tag) {
		name = extractStructName(v);
		if (name == "") {
			// give up with formatted output
			toString(v);
		} else {
			args = map(extractStructArguments(v), toStringFormatted2);
			struct_sl = name + "(" + strGlue(args, ", ") + ")";
			if (!strContains(struct_sl, "\n") && strlen(struct_sl) < 64) struct_sl else {
				name + "(\n" + strIndent(strGlue(args, ",\n")) + "\n)";
			}
		}
	} else {
		"unknown data with tag " + i2s(tag) + ": " + toString(v);
	}
}

isAsciiString(s : string) -> bool {
	forall(s2a(s), \code -> code < 128);
}

encodeAscii(s : string) -> string {
	// escape all \u substrings
	s1 = strReplace(s, "\\u", "\\\\u");
	// encode all non-ascii symbols and NULL
	concatStrings(map(s2a(s1), \code ->
		if (0 < code && code < 0x80) fromCharCode(code) else
		"\\u" + lpad(formatHex(code), "0", 4)
	));
}

decodeAscii(s : string) -> string {
	u_inds = multipleStrIndexOf(s, "\\u");
	p = fold(u_inds, Pair("", 0), \acc, i -> {
		if (i > 0 && getCharAt(s, i - 1) == "\\") {
			// escaped: \\u as \u
			Pair(acc.first + substring(s, acc.second, i - 1 - acc.second), i);
		} else {
			// encoded: \uXXXX as unicode point XXXX
			code = parseHex(substring(s, i + 2, 4));
			Pair(acc.first + substring(s, acc.second, i - acc.second) + fromCharCode(code), i + 6);
		}
	});
	p.first + substring(s, p.second, strlen(s) - p.second);
}

// Returns a pair: first is a longest line in the string (lines are separated by a '\n')
// and second is a number of lines in the string.
stringDims(s : string) -> Pair<int, int> {
	lines = strSplit(s, "\n");
	Pair(
		fold(tail(lines), strlen(lines[0]), \acc, line -> max(acc, strlen(line))),
		length(lines)
	);
}

// Makes a complete rectangular cell out of string `s` with a given dimensions:
// the length of each line - `dims.first` and number of lines - `dims.second`
fillCell(s : string, dims : Pair<int, int>) -> [string] {
	s_lines = strSplit(s, "\n");
	map(enumFromTo(0, dims.second - 1), \i ->
		if (i < length(s_lines)) {
			line = " " + s_lines[i];
			if (strlen(line) < dims.first) {
				rpad(line, " ", dims.first);
			} else {
				substring(line, 0, dims.first);
			}
		} else {
			strRepeat(" ", dims.first);
		}
	);
}

stringMatrix2s(m : [[string]], colHeaders : Maybe<[string]>, rowHeadres : Maybe<[string]>) -> string {
	if (m == []) "" else {
		m1 = eitherMap(colHeaders, \hs -> mapi(m, \i, col -> concat([if (i < length(hs)) hs[i] else ""], col)), m);
		m2 = eitherMap(rowHeadres, \hs -> concat(if (isNone(colHeaders)) [hs] else [concat([""], hs)], m1), m1);
		matr = completeMatrix(m2, "");
		n_rows = length(matr[0]);
		dims = map(matr, \col -> map(col, \row -> stringDims(row)));
		cols = map(dims, \col -> fold(col, 0, \ac, row -> max(ac, row.first + 2)));
		rows = map(enumFromTo(0, n_rows - 1), \i -> fold(dims, 0, \ac, col -> max(ac, col[i].second)));
		cells = mapi(matr, \i, col -> mapi(col, \j, row -> fillCell(row, Pair(cols[i], rows[j]))));
		leng = fold(cols, 0, \acc, col -> acc + col + 1) + 1;
		strGlue(
			map(enumFromTo(0, n_rows - 1),
				\i -> strGlue(
					map(enumFromTo(0, rows[i] - 1),
						\j -> "|" + strGlue(mapi(cols, \k,__ -> cells[k][i][j]), "|") + "|"
					),
					"\n"
				)
			),
			"\n" + strRepeat("-", leng) + "\n"
		)
	}
}

stringTable2s(m : [[string]], colHeaders : Maybe<[string]>) -> string {
	if (m == []) "" else {
		m1 = eitherMap(colHeaders, \hs -> mapi(m, \i, col -> concat([if (i < length(hs)) hs[i] else ""], col)), m);
		matr = completeMatrix(m1, "");
		n_rows = length(matr[0]);
		dims = map(matr, \col -> map(col, \row -> stringDims(row)));
		cols = map(dims, \col -> fold(col, 0, \ac, row -> max(ac, row.first + 2)));
		rows = map(enumFromTo(0, n_rows - 1), \i -> fold(dims, 0, \ac, col -> max(ac, col[i].second)));
		cells = mapi(matr, \i, col -> mapi(col, \j, row -> fillCell(row, Pair(cols[i], rows[j]))));
		leng = fold(cols, 0, \acc, col -> acc + col + 1);
		foldi(
			map(enumFromTo(0, n_rows - 1),
				\i -> strGlue(
					map(enumFromTo(0, rows[i] - 1),
						\j -> strGlue(mapi(cols, \k,__ -> cells[k][i][j]), " ")
					),
					"\n"
				)
			),
			"",
			\i, acc, s -> {
				if (i != 1 || isNone(colHeaders)) acc + "\n" + s else  {
					acc + "\n" + strRepeat("-", leng) + "\n" + s
				}
			}
		)
	}
}

strApplyFns(s: string, fns : [(string) -> string]) -> string {
	foldi(fns, s, \k, acc, fn -> {
		name = "$F_" + i2s(k) + "(";
		next_open_bracket = \i -> for(i,
			\x -> x < strlen(acc) && getCharAt(acc, x) != "(",
			\x -> x + 1
		);
		next_close_bracket = \i -> for(
			Pair(i, 1),
			\p -> p.first < strlen(acc) && p.second != 0,
			\p -> {
				ch = getCharAt(acc, p.first);
				Pair(p.first + 1,
					if (ch == "(") p.second + 1 else
					if (ch == ")") p.second - 1 else p.second
				);
			}
		).first - 1;
		start_inds = multipleStrIndexOf(acc, name);
		if (length(start_inds) == 0) acc else
		if (length(start_inds) == 1) {
			start = start_inds[0];
			end_ind = next_close_bracket(next_open_bracket(start) + 1);
			applied = fn(substring(acc, start + strlen(name), end_ind - start - strlen(name)));
			substring(acc, 0, start) + applied + substring(acc, end_ind + 1, strlen(acc) - end_ind - 1);
		} else {
			end_inds = map(start_inds, \start -> next_close_bracket(next_open_bracket(start) + 1));
			applied = mapi(start_inds, \i, start -> fn(substring(acc, start + strlen(name), end_inds[i] - start - strlen(name))));
			concatStrings(mapi(start_inds, \i, start ->
				if (i == 0) {
					substring(acc, 0, start) + applied[0] + substring(acc, end_inds[i] + 1, start_inds[i + 1] - end_inds[i] - 1);
				} else if (i + 1 == length(start_inds)) {
					applied[i] + substring(acc, end_inds[i] + 1, strlen(acc) - end_inds[i] - 1);
				} else {
					applied[i] + substring(acc, end_inds[i] + 1, start_inds[i + 1] - end_inds[i] - 1);
				}
			));
		}
	});
}

strSubstituteArgsGroup(pattern: string, args: [string], arg_prefix: string) -> string {
	strReplaces(pattern, concatA(mapi(args, \i, arg -> ["$" + arg_prefix + "_" + i2s(i), arg])));
}

strSubstituteArgs(pattern: string, args: [string]) -> string {
	strSubstituteArgsGroup(pattern, args, "A");
}

strGlueToWidth(ss: [string], delim: string, width: int) -> string {
	ss_len = length(ss);
	if (ss_len == 0) "" else
	if (ss_len == 1) ss[0] else {
		len = fold(ss, 0, \acc, s -> acc + strlen(s));
		glued_len = len + strlen(delim) * (ss_len - 1);
		to_fill = width - glued_len;
		on_single = to_fill / (ss_len - 1);
		rest = to_fill % (ss_len - 1);
		foldi(ss, "", \i, acc, s -> {
			if (i + 1 == length(ss)) {
				acc + s;
			} else {
				acc + s + delim + strRepeat(" ", on_single + if (i < rest) 1 else 0);
			}
		});
	}
}

strArrayWrap(ss : [string], maxWidth : int, align: bool, delimiter: string) -> string {
	if (length(ss) == 0) ""
	else if (align) {
		max_strlen = fold(ss, 0, \acc, s -> max(acc, strlen(s))) + 1;
		ss1 = map(ss, \s -> rpad(s, " ", max_strlen));
		n_cols = maxWidth / max_strlen;
		rows = splitByNumber(ss1, n_cols);
		strGlue(mapi(rows, \i, r ->
			strGlue(r, delimiter) + if (i + 1 < length(rows)) delimiter else ""
		), "\n");
	} else {
		delim_len = strlen(delimiter);
		rows = list2array(foldi(ss, Triple(makeList(), [], 0), \i, acc, s ->
			if (acc.third + strlen(s) + delim_len > maxWidth) {
				if (i + 1 == length(ss)) {
					Triple(Cons([s], Cons(acc.second, acc.first)), [], 0);
				} else {
					Triple(Cons(acc.second, acc.first), [s], strlen(s) + delim_len);
				}
			} else {
				if (i + 1 == length(ss)) {
					Triple(Cons(concat(acc.second, [s]), acc.first), [], 0);
				} else {
					Triple(acc.first, concat(acc.second, [s]), acc.third + strlen(s) + delim_len);
				}
			}
		).first);
		strGlue(mapi(rows, \i, r ->
			strGlueToWidth(r, delimiter, maxWidth) + if (i + 1 < length(rows)) delimiter else ""
		), "\n");
	}
}

removeEmptyLines(s: string) -> string {
	strGlue(filter(strSplit(s, "\n"), \line -> isNotSpace(line)), "\n");
}
