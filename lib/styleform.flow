// Â© Copyright 2011 Area9 Innovation. All rights reserved

import basecolors;
import form;
import formtransforms; // isEmptyFormB;
import ui/tooltip;
import gui;
import paragraph;
import ui/buttons;
import filters;

export {
	// Set of Form -> Form methods that are generic enough to not be placed in picturecomposer,
	// and not generic enough to be placed in gui

	// This allows setup width of EquipmentBox and place it rigth to form
	withLeftAlignedForm : (width : double, form : Form) -> ((Form) -> Form);

	scaleToFit(availableWidth: double, availableHeight: double, form: Form) -> Pair<Form, Behaviour<double>>;
	scaleToFit2(availableWidth: double, availableHeight: double, form: Form, scaleLimit : Behaviour<double>) -> Pair<Form, Behaviour<double>>;
	scaleToFit3(availableWidthHeight : Behaviour<WidthHeight>, form: Form, scaleLimit : Behaviour<double>) -> Pair<Form, Behaviour<double>>;

	frameAround(block:Form, thickness:double, color:int) -> Form;
	frameAround2(block:Form, thickness:double, radius:double, color:int, styles : [GraphicsStyle]) -> Form;

	// Add rounded skin frame to scene form
	withSkinFrame(form : Form) -> Form;

	// Renders a solid inward/outward rectangular frame with right angles for the given form
	// StrokeWidth defines thickness of the frame, color styles specify frame color
	// Multiple positive frames increase form size, negative frames override each other
	// It is possible to cancel out positive frames with negative (use negative first)
	solidFrame(style: [GraphicsStyle], form : Form) -> Form;
	simpleSolidFrame(thickness : double, color : int, form : Form) -> Form;
	// rectangleFrame(width : double, height : double, thickness : double) -> [StaticGraphicOp];

	// Following two methods do not respect zOrder. I.e. tooltip will appear above all forms
	// even if it is burried below.
	// Add string tooltip to the form
	withTooltip(form: Form, msg: string) -> Form;
	withTooltip2(form: Form, msg: string, show : Behaviour<bool>) -> Form;
	withTooltip3(form: Form, msg: string, show : Behaviour<bool>, textFragmentStyle : [CharacterStyle], roundedStyle : [GraphicsStyle], toTheRightSide : bool) -> Form;

	// add form tooltip to the form
	withTooltipForm(form: Form, tooltipForm: Form) -> Form;
	// if respectSize is True it's the same as withTooltipForm
	// tooltipForm might be shown without white bubble if isEmptyFormB(tooltipForm) is True, but tooltip form doesn't update when isEmptyFormB(tooltipForm) becomes False
	// if respectSize is False, tooltipForm will be shown in the white bubble always [case 40460]
	withTooltipForm2(form: Form, tooltipForm: Form, respectSize: bool) -> Form;

	// add tooltip with full msg if its strlen is more than len
	tooltipEllipsis(form: Form, msg: string, len: int) -> Form;

	ellipsisWidth(width : double, text : string, style : [CharacterStyle]) -> Form;

	// Simpler and more efficient (doesn't create a bunch of temp forms) version of ellipsisWidth(), based on Crop
	ellipsisWidth2(width : double, text : string, style : [CharacterStyle], tooltip : bool) -> Form;

	// Same as ellipsisWidth2 but width is behaviour. widthOffset is a value added to widthB.
	ellipsisWidth3(widthB : Behaviour<double>, widthOffset : double, text : string, style : [CharacterStyle], tooltip : bool) -> Form;

	// greyish frame with toolbar, heading, and content
	// body should be 8.0 points narrower than passed width
	greyWidget(width: double, heading: string, toolbar: Form, body: Form) -> Form;

	CustomGreyWidget(width: double, heading: string, captionHint : string, toolbar: Form, body: Form) -> Form;

	makeDialogForm(form: Form) -> Form;

	CustomDialogForm(
		title : string, titleFont : [CharacterStyle],
		titleHeight : double, titleFill : [GraphicsStyle],
		mainFill : [GraphicsStyle],
		radius : double,
		crossWidth : double,
		crossStyle : [GraphicsStyle],
		form : Form,
		onClose : () -> void,
	) -> Form;

	// Work if &guid=1 URL parameter is set
	debugFrame : (form : Form) -> Form;
	debugFrameA : (form : Form) -> Form;
	debugtt(tip : string) -> (Form) -> Form;
	debugA(text : string) -> (Form) -> Form;
	debugColorFrame : (color : int) -> (Form) -> Form;
	debugMsgFrame : (text: string) -> (Form) -> Form;
}

guiDebugOn = getUrlParameter("guid") == "1";

debugColorFrame(color) {
	if (guiDebugOn) {
		\ f -> frameAround(f, 1.0, color)
	} else
		idfn;
}

debugMsgFrame(text) {
	if (guiDebugOn) {
		clr = red;
		tx = Background([Fill(clr), FillOpacity(0.75)], Text(text, [FontSize(12.0), Fill(white)]));
		\ f -> Group([
			frameAround(f, 1.0, clr),
			Align(0.0, 0.0, tx),
			Align(1.0, 0.0, tx),
			Align(0.0, 1.0, tx),
			Align(1.0, 1.0, tx)
		])
	} else
		idfn;
}

debugFrame(f) {
	debugColorFrame(red)(f);
}

debugtt(tip) {
	if (getUrlParameter("guid") == "1")
		\form -> {
			withTooltip(
				debugFrame(form),
				tip
			)

/*			name = Text(tip, [FontSize(10.0), Fill(red)]);
			wh = makeWH();
			Available2(wh,
				Group([
					debugFrame(
						Inspect([ISize(wh)], form)
					),
					Align(0.0, 0.0, name),
					Align(1.0, 1.0, name),
					Align(0.0, 1.0, name),
					Align(1.0, 0.0, name),
				])
			)*/
		}
	else idfn
}

debugFrameA(f) {
	awh = makeWH();
	Group([
		Inspect([IAvailable(awh)], f),
		Select(awh, \wh -> Graphics(rectangle(1.0, 1.0, wh.width-1.0, wh.height-1.0), [Stroke(green), StrokeWidth(2.0)])),
	])
}


debugA(text : string) -> (Form) -> Form {
	wh = makeWH();
	\form -> Constructor(
		Inspect([IAvailable(wh)], form),
		\ -> subscribe(wh, \_wh -> println(text + toString(_wh)))
	)
}

withLeftAlignedForm(width, form) {
	\eqbox -> Cols([
		Border(10.0, 10.0, 5.0, 30.0,
			Available(make(974.0 - width), make(443.0),
				form
			)
		),
		Border(5.0, 10.0, 10.0, 30.0,
			Available(make(width), make(441.0),
				eqbox
			)
		)
	])
}

scaleToFit(availableWidth: double, availableHeight: double, form: Form) {
	scaleToFit2(availableWidth, availableHeight, form, const(1.0))
}

scaleToFit2(availableWidth: double, availableHeight: double, form: Form, scaleLimit : Behaviour<double>) {
	scaleToFit3(const(WidthHeight(availableWidth, availableHeight)), form, scaleLimit);
}

scaleToFit3(availableWidthHeight : Behaviour<WidthHeight>, form: Form, scaleLimit : Behaviour<double>) {
	wh = makeWH();

	scale = make(0.0);

	result = Constructor(
		Scale(scale, scale, Inspect([ISize(wh)], form)),
		\ -> {
			connectSelect3Distinctu(availableWidthHeight, wh, scaleLimit, scale, \awh, cwh, limit -> {
				w = cwh.width;
				h = cwh.height;
				if (w == 0.0 || h == 0.0) {
					1.0; // scaleLimit ?
				} else {
					scaleX = awh.width / w;
					scaleY = awh.height / h;

					min(min(scaleX, scaleY), limit)
				}
			});
		}
	);

	Pair(result, scale);
}

frameAround(block : Form, thickness : double, color : int) -> Form {
	frameAround2(block, thickness, thickness, color, [])
}

frameAround2(block : Form, thickness : double, radius : double, color : int, style : [GraphicsStyle]) -> Form {
	Behind(\w_, h_ -> {
			x = thickness / 2.0;
			y = thickness / 2.0;
			width = w_ - thickness;
			height = h_ - thickness;

			Offset(x, y, Graphics(
				roundedRect(width, height, radius),
				concat([Stroke(color), StrokeWidth(thickness)], style)
			))
		},
		Border(thickness, thickness, thickness, thickness, block)
	)
};

withSkinFrame(f : Form) -> Form {
	w = 842.0;
	h = 460.0;
	r = 10.0;
	r2 = r + 1.0;

	withConvex = \form : Form -> {
		Filter([
			Bevel([Placement(45.0, 0.6), Color(0x444444, 0.7), ShadowColor(0xffffff, 0.9), Spread(4.0), Radius(4.0), Inner(true)])],
			form)
	};

	if (opengl) {
		f
	} else {
		Group([ f,
			Graphics([
				LineTo(w, 0.0), LineTo(w, h), LineTo(0.0, h), LineTo(0.0, 0.0),
				MoveTo(r, 2.0 * r),
				CubicBezierTo(2.0 * r, r, r, r),
				LineTo(w - 2.0 * r, r),
				CubicBezierTo(w - r, 2.0 * r, w - r, r),
				LineTo(w - r, h - 2.0 * r),
				CubicBezierTo(w - 2.0 * r, h - r, w - r, h - r),
				LineTo(2.0 * r, h - r),
				CubicBezierTo(r, h - 2.0 * r, r, h - r),
				LineTo(r, 2.0 * r)],
				[GradientFill(90.0, [GradientPoint(0xffffff, 1.0, 0.0), GradientPoint(0xdfe0df, 1.0, 1.0),])]),
			Graphics([
				MoveTo(r2, 2.0 * r2),
				CubicBezierTo(2.0 * r2, r2, r, r),
				LineTo(w - 2.0 * r2, r2),
				CubicBezierTo(w - r2, 2.0 * r2, w - r, r),
				LineTo(w - r2, h - 2.0 * r2),
				CubicBezierTo(w - 2.0 * r2, h - r2, w - r2, h - r2),
				LineTo(2.0 * r2, h - r2),
				CubicBezierTo(r2, h - 2.0 * r2, r2, h - r2),
				LineTo(r2, 2.0 * r2)],
				[Stroke(0xdddddd), StrokeWidth(2.0)]) |> withConvex
		])
	}
};

rectangleFrame(width : double, height : double, thickness : double) -> [StaticGraphicOp] {
	x = 0.0;
	y = 0.0;
	// perhaps correction should be used? if not - additional 1.0 below is useless
	correction = if (js) 0.5 else 1.0;
	// add 1.0 so the frame is around bottom left corner
	w = max(0.0, width + 1.0 - correction);
	h = max(0.0, height + 1.0 - correction);
	// limit negative thickness to half-size
	t = max(-min(w/2.0, h/2.0), thickness);

	concat(rectangle(x, y, w, h),
	[
		LineTo(x - t, y - t),
		LineTo(x - t, y + h + t),
		LineTo(x + w + t, y + h + t),
		LineTo(x + w + t, y - t),
		LineTo(x - t, y - t),
		LineTo(x, y),
	])
}

// Helper function to replace any Stroke styles with Fill
replaceStrokeWithFill(style: [GraphicsStyle]) -> [GraphicsStyle] {
	fold(style,  makeTree(), \acc, i -> {
		s: GraphicsStyle = switch (i: GraphicsStyle) {
			Stroke(c): Fill(c);
			StrokeOpacity(o): FillOpacity(o);
			StrokeLineGradient(r,p): GradientFill(r,p);
			default: i
		}
		setTree(acc, s.structname, s);
	}) |> getTreeValues;
}

solidFrame(style: [GraphicsStyle], form : Form) -> Form {
	newStyle = replaceStrokeWithFill(style);
	thickness = extractStruct(newStyle, StrokeWidth(1.0)).width;
	if (thickness != 0.0) {
		resize = if (thickness < 0.0) idfn else \f -> Border(thickness, thickness, 0.0, 0.0, f);
		Above(\w, h -> Graphics(rectangleFrame(w, h, thickness), newStyle), form) |> resize;
	} else form
}

simpleSolidFrame(thickness : double, color : int, form : Form) -> Form {
	solidFrame([StrokeWidth(thickness), Fill(color)], form);
}

withTooltipForm(form, tooltipForm) {
	withTooltipForm2(form, tooltipForm, true)
}

withTooltipForm2(form, tooltipForm_, respectSize) {
	if (isConstEmptyForm(tooltipForm_)) {
		form
	} else {

		tooltipFormPair = isEmptyFormB(tooltipForm_);
		tooltipForm = tooltipFormPair.first;
		isEmptyTooltipForm = tooltipFormPair.second;

		disposeTooltip = ref nop;

		disposeFn = \ -> {
			(^disposeTooltip)();
			disposeTooltip := nop;
		}

		Disposer(
			Interactive(
				[
					RollOver(\gm -> {
						mouseInfo = gm();
						offsetX = getMouseX(getStage()) - mouseInfo.x;
						offsetY = getMouseY(getStage()) - mouseInfo.y;

						wh = makeWH();
						tooltipX = make(0.0);
						tooltipY = make(0.0);
						tooltip = Constructors(
							[
								\ -> connectSelectDistinctu(wh, tooltipX, \w -> {
									if (max(0.0, offsetY - w.height) == 0.0)
										offsetX + 20.0
									else
										offsetX - 20.0
								}),
								\ -> connectSelectDistinctu(wh, tooltipY, \h -> max(0.0, offsetY - h.height - 10.0)),
							],
							Translate(tooltipX, tooltipY,
								Inspect([ISize(wh)],
									Select(isEmptyTooltipForm, \isEmpty ->
										if (isEmpty && respectSize)
											tooltipForm  // do not replace with Empty. If tooltipForm is a Select, it'll stop functioning
										else
											Filter([DropShadow([Placement(45.0, 2.0), Color(0x000000, 0.7), Radius(3.0), Spread(1.0)])],
												Rounded(10.0, [Fill(white)],
													Border(10.0, 10.0, 10.0, 10.0,
														Available(const(300.0), zero, tooltipForm)
													)
												)
											)
									)
								)
							)
						);
						disposeTooltip := render(tooltip);
					}),
					RollOut(\gm -> {
						disposeFn();
					}),
				],
				form
			),
			disposeFn
		)
	}
}

withTooltip(form, msg) {
	withTooltip2(form, msg, const(true))
}

withTooltip2(form, msg, show) {
	withTooltip3(form, msg, show, [Fill(black), FontFamily("Roboto")], if (isLiteEditStyle()) [Fill(0xfff7bc)] else [Fill(white)], true)
}

withTooltip3(form, msg, show, textFragmentStyle, roundedStyle, toTheRightSide) {
	if (msg != "" && !cgi) { //getStageWidth returns null if gci - that crashes bytecode runner.
		height = make(0.0);
		width = make(0.0);

		mouse_x = make(0.0);
		mouse_y = make(0.0);

		assumed_translate_x = make(0.0);
		assumed_translate_y = make(0.0);

		real_translate_x = make(0.0);
		real_translate_y = make(0.0);

		makeTooltip = \ -> {
			Visibleb(show, Translate(real_translate_x, real_translate_y,
				Rounded(10.0, roundedStyle,
					Inspect([Height(height), Width(width)],
						Border(10.0, 10.0, 10.0, 10.0,
							Available(const(300.0), zero, Paragraph([TextFragment(msg, textFragmentStyle)], [TightWidth()]))
						)
					)
				)|> \f ->
					if (isLiteEditStyle())
						CustomShadowAround(0x595959, 0.05, 5.0, 5.0, f)
					else
						Filter([DropShadow([Placement(45.0, 2.0), Color(0x000000, 0.7), Radius(3.0), Spread(1.0)])], f)
			))
		}

		result = CustomCursor2(
			// LSTSBU-453. Decreases time to prepare 59 chapter Forms from 16 to 2 seconds in Flash, from 5.5 to 1.5 in JS.
			LazyForm(makeTooltip),
			false,
			Interactive([MouseMove(\gm -> {
				if (gm().inside) {
					nextDistinct(mouse_x, getMouseX(getStage()));
					nextDistinct(mouse_y, getMouseY(getStage()));
				}
				false
			})], form)
		);

		Constructors(
			[
				\ -> connectSelectDistinctu(width, assumed_translate_x, \w -> if (toTheRightSide) -20.0 else  -w + 20.0),
				\ -> connectSelectDistinctu(height, assumed_translate_y, \h -> -h - 10.0),
				\ -> connectSelect3Distinctu(mouse_x, assumed_translate_x, width, real_translate_x, \mx, tx, w -> {
					right_offset = getStageWidth() - mx;
					if (w + tx > right_offset)
						right_offset - w
					else if (mx + tx < 0.0)
						-mx
					else
						tx
				}),
				\ -> connectSelect3Distinctu(mouse_y, assumed_translate_y, height, real_translate_y, \my, ty, h -> {
					if (my + ty < 0.0)
						10.0
					else
						ty
				})
			],
			result
		)
	} else {
		form
	}
}

tooltipEllipsis(form, msg, len) {
	if (strlen(msg) + 3 > len) {
		withTooltip(form, msg);
	} else {
		form;
	}
}


greyWidget(width, heading, toolbar, body){
	CustomGreyWidget(width, heading, "", toolbar, body);
}

CustomGreyWidget(width, heading, captionHint, toolbar, body) {
	Lines([
		MakeHint(
			Behind(
				\w,h -> topRoundedRect(w, h, 3.0, [Stroke(0xb6b6b6), StrokeWidth(0.5), Fill(0xb6b6b6)]),
				Size2(const(WidthHeight(width, 24.0)),
					Align(0.5, 0.5,
						Text(heading, [FontSize(11.0), Fill(0x343434)]),
					)
				)
			),
			captionHint,
			[]
		),
		if (toolbar != Empty())
			frameAround(
				Background([Fill(0xe0e0e0)],
					Border(6.0, 0.0, 6.0, 0.0, toolbar)
				),
				1.0, 0xb6b6b6
			)
		else
			Empty(),
		frameAround(
			Background([Fill(0xffffff)],
				Border(4.0, 4.0, 4.0, 4.0,
					body
				)
			),
			1.0, 0xb6b6b6
		)
	])
}


ellipsisFindWidth(_v0 : int, _v1 : int, test : (int) -> bool) -> int {
	v0 = min(_v0, _v1);
	v1 = max(_v0, _v1);

	if (v1 == v0) {
		v0
	} else {
		t0 = test(v0);
		t1 = test(v1);

		if (t0 && t1) {
			v1
		} else if (!t0 && !t1) {
			v0
		} else {
			m = (v1+v0)/2;
			if (t1 == test(m)) ellipsisFindWidth(v0, m, test) else ellipsisFindWidth(m+1, v1, test)
		}
	}
}

ellipsisWidth(width : double, text : string, style : [CharacterStyle]) -> Form {
	// binary search
	len = ellipsisFindWidth(0, strlen(text),
		\i -> {
			ss = if (i == strlen(text)) text else strLeft(text, i) + "...";

			f = Text(ss, style);
			getStaticFormSize(f).width < width;
		}
	);

	if (len < strlen(text)) {
		withTooltip(Text(strLeft(text, len-1) + "...", style), text)
	} else {
		Text(text, style)
	}
}

// Simpler and more efficient (doesn't create a bunch of temp forms) version of ellipsisWidth(), based on Crop
ellipsisWidth2(width : double, text : string, style : [CharacterStyle], tooltip : bool) -> Form {
	f = Text(text, style);
	textSize = getStaticFormSize(f);

	if (textSize.width <= width) {
		f
	} else {
		addTip = if (tooltip) \form -> withTooltip(form, text) else idfn;
		ellipsis_ = Text(" ...", style);
		ellipsisSize = getStaticFormSize(ellipsis_);
		if (width >= 2.0 * ellipsisSize.width)
			Cols([
				Crop(zero, zero, const(width - ellipsisSize.width), const(textSize.height), f),
				ellipsis_
			])
			|> addTip

		else // do not use ellipsis if remaining text part is much smaller than ellipsis
			Crop(zero, zero, const(width), const(textSize.height), f)
			|> addTip
	}
}

// Same as ellipsisWidth2 but width is behaviour.
// widthOffset is a value added to widthB.
ellipsisWidth3(widthB : Behaviour<double>, widthOffset : double, text : string, style : [CharacterStyle], tooltip : bool) -> Form {
	f = Text(text, style);
	textSize = getStaticFormSize(f);

	ellipsis_ = Text(" ...", style);
	ellipsisSize = getStaticFormSize(ellipsis_);

	addTip = if (tooltip) \form -> withTooltip(form, text) else idfn;

	widthB_loc = make(getValue(widthB));

	mode = make(0);
	cropW = make(0.0);
	cropW2 = make(0.0);

	Constructors(
		[
			\ -> connectDistinct(widthB, widthB_loc),
			\ -> connectSelectDistinctu(widthB_loc, mode, \w -> {
				if (textSize.width <= w + widthOffset) 0 					// no need in ellipsis
				else if (w + widthOffset >= 2.0 * ellipsisSize.width) 1  	// crop and add ellipsis
				else 2 														// do not use ellipsis if remaining text part is much smaller than ellipsis
			}),
			\ -> connectSelectDistinctu(widthB_loc, cropW, \w -> w + widthOffset - ellipsisSize.width),
			\ -> connectSelectDistinctu(widthB_loc, cropW2, \w -> w + widthOffset),
		],
		Switch(mode, [
			f,
			{
				Cols([
					Crop(zero, zero, cropW, const(textSize.height), f),
					ellipsis_
				]) |> addTip
			},
			{
				// do not use ellipsis if remaining text part is much smaller than ellipsis
				Crop(zero, zero, cropW2, const(textSize.height), f)
				|> addTip
			}
		])
	)
}

makeDialogForm(form: Form) -> Form {
	widthHeight = makeWH();
	Access([AccessRole("dialog")],
		Group([
			Select(widthHeight, \wh -> {
					Interactive([
						MouseDown(\e -> true),
						MouseMove(\e -> true),
						MouseUp(\e -> true)
					],
					Rectangle(wh.width, wh.height, [Fill(0xFAFAFA), FillOpacity(0.5)]))
				}
			),
			Inspect([ IAvailable2(widthHeight) ], Align(0.5, 0.5, form))
		])
	);
}


CustomDialogForm(
	title : string, titleFont : [CharacterStyle],
	titleHeight : double, titleFill : [GraphicsStyle],
	mainFill : [GraphicsStyle],
	radius : double,
	crossWidth : double,
	crossStyle : [GraphicsStyle],
	form : Form,
	onClose : () -> void,
) -> Form {
	wh = makeWH();

	cross = Graphics(
		[
			MoveTo(crossWidth, crossWidth), LineTo(0.0, 0.0),
			MoveTo(0.0, crossWidth), LineTo(crossWidth, 0.0),
		],
		crossStyle
	);

	titleLine = Select(wh, \wh0 -> {
		Group([
			topRoundedRect(wh0.width, titleHeight, radius, titleFill),
			Border(wh0.width - titleHeight, 0.0, 0.0, 0.0,
				Available2(const(WidthHeight(titleHeight, titleHeight)),
					Align(0.5, 0.5,
						SimpleButton(
							cross,
							cross,
							"",
							onClose
						)
					)
				)
			),
			Available2(const(WidthHeight(wh0.width, titleHeight)), Align(0.5, 0.5, Text(title, titleFont)))
		])
	});

	Group([
		Select(wh, \wh0 -> Graphics(roundedRect(wh0.width, wh0.height + titleHeight + 10.0, radius), mainFill)),
		WideLines([
			titleLine,
			Fixed (0.0, 10.0),
			Inspect([ISize(wh)], form),
		])
	]) |> ShadowAround |> makeDialogForm

}

