import flowstructs;

export {

	native mbGetMediaDuration : (file : native, cb : (duration : int) -> void) -> void = Mediabunny.getMediaDuration;
	mbConversion : (file : native, format : MBFormat, style : [MBStyle], cb : (outputFile : native) -> void, onError : (error : string) -> void) -> void;

	MBStyle ::= MBSampleRate;
		MBSampleRate(sampleRate : int);	// Def 16 kHz
	// Output format for conversion
	MBFormat ::= MBAudioMP3, MBAudioWAV, MBVideoMP4, MBVideoWEBM;
		// For encoding: MP3 Slower but smaller, WAV faster but bigger.
		MBAudioMP3();
		MBAudioWAV();
		MBVideoMP4();
		MBVideoWEBM();
}

mbFormatToExt(format : MBFormat) -> string {
	switch (format : MBFormat) {
		MBAudioMP3(): "mp3";
		MBAudioWAV(): "wav";
		MBVideoMP4(): "mp4";
		MBVideoWEBM(): "webm";
	}
}

mbConversion(file : native, format : MBFormat, style : [MBStyle], cb : (audioData : native) -> void, onError : (error : string) -> void) -> void {
	sampleRate = extractStruct(style, MBSampleRate(16000)).sampleRate;
	mbConversionNative(file, mbFormatToExt(format), sampleRate, cb, onError)
}

native mbConversionNative : (file : native, format : string, sampleRate : int, cb : (outputFile : native) -> void, onError : (error : string) -> void) -> void = Mediabunny.conversion;

