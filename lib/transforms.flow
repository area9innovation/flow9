// Â© Copyright 2011 Area9 Technologies.

import behaviour;
import math/math; // floor
import devmode;

export {
	// Transforms a stream using a function into a new behaviour.
	// Think select as in SQL and in LINQ.
	selectu : (behaviour : Behaviour<?>, fn : (?) -> ??) -> Pair<Behaviour<??>, () -> void>;
	selectDistinctu : (behaviour : Behaviour<?>, fn : (?) -> ??) -> Pair<Behaviour<??>, () -> void>;

	select2u : (b1 : Behaviour<?>, b2 : Behaviour<??>, fn : (?, ??) -> ???) -> Pair<Behaviour<???>, () -> void>;

	select3u : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, fn : (?, ??, ???) -> ????) -> Pair<Behaviour<????>, () -> void>;

	select4u : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>,
				fn : (?, ??, ???, ????) -> ?????) -> Pair<Behaviour<?????>, () -> void>;

	select5u : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>, b5 : Behaviour<?????>,
				fn : (?, ??, ???, ????, ?????) -> ??????) -> Pair<Behaviour<??????>, () -> void>;

	select6u : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>, b5 : Behaviour<?????>, b6 : Behaviour<??????>,
			fn : (?, ??, ???, ????, ?????, ??????) -> ???????) -> Pair<Behaviour<???????>, () -> void>;

	// Merges an array of behaviours of into one behaviour
	// by building a binary tree where two leaf values are transformed into one using 'fn'
	// or returns 'init' behaviour if array is empty
	selectMergeu(bs : [Behaviour<?>], init : Behaviour<?>, fn : (?, ?) -> ?) -> Pair<Behaviour<?>, () -> void>;

	// Merges an array of behaviours of T into a new behaviour of array<T>
	// I.e. it groups together the children so they arrive synchronized on any change in any child
	mergeu : (behaviours : [ Behaviour<?> ]) -> Pair<Behaviour<[?]>, () -> void>;

	// Monitor a bunch of behaviours, and be notified of changes with index based. Returns an unsubscriber.
	// This is an alternative to merge, when you need high performance and is able to do update a result
	// from the old and new values only.
	arraySubscribe2(bs : [Behaviour<?>], updateFn : (i : int, before : ?, after : ?) -> void) -> () -> void;

	// Connects all events from one behaviour to another
	connect : (from : Behaviour<?>, to : DynamicBehaviour<?>) -> (() -> void);
	// The same as connect but uses subscribe2 instead of subscribe
	connect2 : (from : Behaviour<?>, to : DynamicBehaviour<?>) -> (() -> void);

	// Connects all events from one behaviour to another
	connectDistinct : (from : Behaviour<?>, to : DynamicBehaviour<?>) -> (() -> void);

	// Functions that combine select- and connect- functionality. They don't create new behavior. The result is written directly to the target.
	// Return the unsubscribe function.
	connectSelectu : (behaviour : Behaviour<?>, target : DynamicBehaviour<??>, fn : (?) -> ??) -> () -> void;
	connectSelectDistinctu : (behaviour : Behaviour<?>, target : DynamicBehaviour<??>, fn : (?) -> ??) -> () -> void;
	connectSelect2u : (b1 : Behaviour<?>, b2 : Behaviour<??>, target : DynamicBehaviour<???>, fn : (?, ??) -> ???) -> () -> void;
	connectSelect2Distinctu : (b1 : Behaviour<?>, b2 : Behaviour<??>, target : DynamicBehaviour<???>, fn : (?, ??) -> ???) -> () -> void;
	connectSelect3u : (
		b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>,
		target : DynamicBehaviour<????>, fn : (?, ??, ???) -> ????
	) -> () -> void;
	connectSelect3Distinctu : (
		b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>,
		target : DynamicBehaviour<????>,
		fn : (?, ??, ???) -> ????
	) -> () -> void;
	connectSelect4u : (
		b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>,
		target : DynamicBehaviour<?????>,
		fn : (?, ??, ???, ????) -> ?????
	) -> () -> void;
	connectSelect4Distinctu : (
		b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>,
		target : DynamicBehaviour<?????>,
		fn : (?, ??, ???, ????) -> ?????
	) -> () -> void;


	// Creates a bidirectional link between two behaviours, without risking infinite recursion.
	// If the values disagree when called, we will make b from a.
	bidirectionalLink(a : DynamicBehaviour<?>, b : DynamicBehaviour<??>, a2b : (?) -> ??, b2a : (??) -> ?) -> () -> void;
	// Non-distinct version
	bidirectionalLinkNonDistinct(a : DynamicBehaviour<?>, b : DynamicBehaviour<??>, a2b : (?) -> ??, b2a : (??) -> ?) -> () -> void;
	makeBidirectionalLink(a : DynamicBehaviour<?>, b : DynamicBehaviour<??>, a2b : (?) -> ??, b2a : (??) -> ?, distinct : bool) -> () -> void;

	// Emits the maximum of an array of double behaviours
	arrayMaxu : (bes : [Behaviour<double>]) -> Pair<Behaviour<double>, () -> void>;

	// Emits the sum of an array of double behaviours
	arraySumu : (bes : [Behaviour<double>]) -> Pair<Behaviour<double>, () -> void>;

	arrayISumu : (bes : [Behaviour<int>]) -> Pair<Behaviour<int>, () -> void>;

	// Changes the array instead of making copy
	dynArrayPush : (DynamicBehaviour<[?]>, ?) -> void;

	// Halts repeated "changes" to the same value as last time. Consider using nextDistinct as another way to achieve this.
	distinctUntilChangedu : (Behaviour<?>) -> Disposable<Behaviour<?>>;

	// Once the value has changed more than delta, we send it along
	untilChangedu(b : Behaviour<double>, delta : double) -> Pair<Behaviour<double>, () -> void>;

	// Monitors the given behaviour, and given a function which takes the last and new value, construct a new behaviour
	selectWithLastu(b : Behaviour<?>, fn : (last : ?, new : ?) -> ??) -> Pair<Behaviour<??>, () -> void>;

	// Monitors the given behaviour, and when it changes, we ask a function whether the new value should be sent along
	filterWithLastu(b : Behaviour<?>, fn : (last : ?, new : ?) -> bool) -> Pair<Behaviour<?>, () -> void>;

	// Delay the behaviour stream X ms
	stallu(b : Behaviour<?>, ms : int) -> Pair<Behaviour<?>, () -> void>;
	// same as stallu but timePending flag is added
	stall2u(b : Behaviour<?>, ms : int, timePending: DynamicBehaviour<bool>) -> Pair<Behaviour<?>, () -> void>;

	// Throttle a behaviour to only fire a different value at most every X millisecond. It will
	// fire instantly if it was more than X millisecond since we fired last. It will send the latest
	// changed value delayed exactly the samplingRate, in case we received two values quickly after
	// each other.
	throttleu(b : Behaviour<?>, samplingRate : double) -> Pair<Behaviour<?>, () -> void>;

	// Fires only last consecutive value.
	throttle2u(b : Behaviour<?>, maxDelta : int) -> Pair<Behaviour<?>, () -> void>;

	// When the gate is true, the value is sent along. When the gate is closed, we ignore updates until it's open
	transistoru(gate: Behaviour<bool>, value: Behaviour<?>) -> Disposable<Behaviour<?>>;
	// Same as transistoru, only doesn't update value when gate opens
	ignoreu(gate: Behaviour<bool>, value: Behaviour<?>) -> Disposable<Behaviour<?>>;

	// call fn once when value of behaviour will become true
	// however, fn could be called immediately.
	// Note: fn is called at most once!
	when(b : Behaviour<bool>, fn : () -> void) -> () -> void;

	// Do 'action' once on the first 'trigger' update when it is ready for the action to be done
	doOnceOnUpdate(trigger : DynamicBehaviour<?>, isReady : (?) -> bool, action : (?) -> void) -> () -> void;

	// select for transformed behaviour, with automatic reconnect
	subselectu : (b : Behaviour<?>, fn : (?) -> Behaviour<??>) -> Pair<Behaviour<??>, () -> void>;

	Disposable : (
		value : ?,
		dispose : () -> void
	);
	makeDisposable : (pair : Pair<Behaviour<?>, () -> void>) -> Disposable<Behaviour<?>>;

	Timer : (
		value : Behaviour<double>,
		stop : () -> void,
		start : () -> void
	);


	// repeat callback every x ms until disposed (stop())
	// can be restarted with start()
	// behaviour which emits the timestamp every X ms, until disposed.
	repeatable : (int) -> Timer;
	repeatable2 : (delay : int, startNow : bool) -> Timer;

	controlledTimer : (delay : int, enabled : Behaviour<bool>) -> Disposable<Behaviour<double>>;

	// These are here for legacy reasons: All of these potentially leak, so avoid using these
	select : (behaviour : Behaviour<?>, fn : (?) -> ??) -> Behaviour<??>;
	selectDistinct : (behaviour : Behaviour<?>, fn : (?) -> ??) -> Behaviour<??>;
	select2 : (b1 : Behaviour<?>, b2 : Behaviour<??>, fn : (?, ??) -> ???) -> Behaviour<???>;
	select3 : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, fn : (?, ??, ???) -> ????) -> Behaviour<????>;
	select4 : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>,
				fn : (?, ??, ???, ????) -> ?????) -> Behaviour<?????>;
	select5 : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>, b5 : Behaviour<?????>,
				fn : (?, ??, ???, ????, ?????) -> ??????) -> Behaviour<??????>;
	select6 : (b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>, b5 : Behaviour<?????>, b6 : Behaviour<??????>,
			fn : (?, ??, ???, ????, ?????, ??????) -> ???????) -> Behaviour<???????>;

	merge  : (behaviours : [ Behaviour<?> ]) -> Behaviour<[?]>;
	// Two-dimensional version

	merge2d(behaviours : [[Behaviour<?>]]) -> Behaviour<[[?]]>;

	arrayMax : (bes : [Behaviour<double>]) -> Behaviour<double>;
	arraySum : (bes : [Behaviour<double>]) -> Behaviour<double>;
	arrayISum : (bes : [Behaviour<int>]) -> Behaviour<int>;
	distinctUntilChanged : (Behaviour<?>) -> Behaviour<?>;
	untilChanged(b : Behaviour<double>, delta : double) -> Behaviour<double>;
	selectWithLast(b : Behaviour<?>, fn : (last : ?, new : ?) -> ??) -> Behaviour<??>;
	filterWithLast(b : Behaviour<?>, fn : (last : ?, new : ?) -> bool) -> Behaviour<?>;
	stall(b : Behaviour<?>, ms : int) -> Behaviour<?>;
	throttle(b : Behaviour<?>, samplingRate : double) -> Behaviour<?>;
	throttle2(b : Behaviour<?>, maxDelta : int) -> Behaviour<?>;
	// Buffer the value of the behaviour exactly with one element. Raise previous value of behaviour
	// Starts with init
	buffer1 : (Behaviour<?>, init : ?) -> Behaviour<?>;
	transistor(gate : Behaviour<bool>, value : Behaviour<?>) -> Behaviour<?>;
	subselect  : (b : Behaviour<?>, fn : (?) -> Behaviour<??>) -> Behaviour<??>;
}

select(behaviour, fn) {
	if (isConst(behaviour)) {
		const(fn(getValue(behaviour)));
	} else {
		provider = make(fn(getValue(behaviour)));
		// subscribe immediately calls the function, so we use subscribe2
		subscribe2(behaviour, \v -> { impersonateCallstackFn(fn,0); next(provider, fn(v)); });
		provider;
	}
}

selectDistinct(behaviour, fn) {
	if (isConst(behaviour)) {
		const(fn(getValue(behaviour)));
	} else {
		provider = make(fn(getValue(behaviour)));
		// subscribe immediately calls the function, so we use subscribe2
		subscribe2(behaviour, \v -> { impersonateCallstackFn(fn,0); nextDistinct(provider, fn(v)); });
		provider;
	}
}

selectDistinctu(behaviour, fn) {
	if (isConst(behaviour)) {
		Pair(const(fn(getValue(behaviour))), nop);
	} else {
		provider = make(fn(getValue(behaviour)));
		// subscribe immediately calls the function, so we use subscribe2
		u = subscribe2(behaviour, \v -> { impersonateCallstackFn(fn,0); nextDistinct(provider, fn(v)); });
		Pair(provider, u);
	}
}

selectu(behaviour, fn) {
	if (isConst(behaviour)) {
		Pair(const(fn(getValue(behaviour))), nop);
	} else {
		provider = make(fn(getValue(behaviour)));
		// subscribe immediately calls the function, so we use subscribe2
		u = subscribe2(behaviour, \v -> { impersonateCallstackFn(fn,0); next(provider, fn(v)); });
		Pair(provider, u);
	}
}


select2(b1, b2, fn) {
	if (isConst(b1) && isConst(b2)) {
		const(fn(getValue(b1), getValue(b2)));
	} else {
		provider = make(fn(getValue(b1), getValue(b2)));
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); next(provider, fn(getValue(b1), getValue(b2))); };
		subscribe2(b1, cb);
		subscribe2(b2, cb);
		provider;
	}
}

select2u(b1, b2, fn) {
	if (isConst(b1) && isConst(b2)) {
		Pair(const(fn(getValue(b1), getValue(b2))), nop);
	} else {
		provider = make(fn(getValue(b1), getValue(b2)));
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b  : flow -> { impersonateCallstackFn(fn,0); next(provider, fn(getValue(b1), getValue(b2))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		Pair(provider, \ -> { u1(); u2() });
	}
}

select3(b1, b2, b3, fn) {
	if (isConst(b1) && isConst(b2) && isConst(b3)) {
		const(fn(getValue(b1), getValue(b2), getValue(b3)));
	} else {
		provider = make(fn(getValue(b1), getValue(b2), getValue(b3)));
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); next(provider, fn(getValue(b1), getValue(b2), getValue(b3))); };
		subscribe2(b1, cb);
		subscribe2(b2, cb);
		subscribe2(b3, cb);
		provider;
	}
}

select3u(b1, b2, b3, fn) {
	if (isConst(b1) && isConst(b2) && isConst(b3)) {
		Pair(const(fn(getValue(b1), getValue(b2), getValue(b3))), nop);
	} else {
		provider = make(fn(getValue(b1), getValue(b2), getValue(b3)));
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); next(provider, fn(getValue(b1), getValue(b2), getValue(b3))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		u3 = subscribe2(b3, cb);
		Pair(provider, \ -> { u1(); u2(); u3() });
	}
}


select4(b1, b2, b3, b4, fn) {
	curVal = \ -> fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4));
	provider = make(curVal());
	cb = \b:flow -> { impersonateCallstackFn(fn,0); next(provider, curVal()); };
	subscribe2(b1, cb);
	subscribe2(b2, cb);
	subscribe2(b3, cb);
	subscribe2(b4, cb);
	provider;
}

select4u(b1, b2, b3, b4, fn) {
	curVal = \ -> fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4));
	provider = make(curVal());
	cb = \b:flow -> { impersonateCallstackFn(fn,0); next(provider, curVal()); };
	u1 = subscribe2(b1, cb);
	u2 = subscribe2(b2, cb);
	u3 = subscribe2(b3, cb);
	u4 = subscribe2(b4, cb);
	Pair(provider, \ -> {u1(); u2(); u3(); u4();});
}

select5(b1, b2, b3, b4, b5, fn) {
	curVal = \ -> fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4), getValue(b5));
	provider = make(curVal());
	cb = \b:flow -> { impersonateCallstackFn(fn,0); next(provider, curVal()); };
	subscribe2(b1, cb);
	subscribe2(b2, cb);
	subscribe2(b3, cb);
	subscribe2(b4, cb);
	subscribe2(b5, cb);
	provider;
}

select5u(b1, b2, b3, b4, b5, fn) {
	curVal = \ -> fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4), getValue(b5));
	provider = make(curVal());
	cb = \b:flow -> { impersonateCallstackFn(fn,0); next(provider, curVal()); };
	u1 = subscribe2(b1, cb);
	u2 = subscribe2(b2, cb);
	u3 = subscribe2(b3, cb);
	u4 = subscribe2(b4, cb);
	u5 = subscribe2(b5, cb);
	Pair(provider, \ -> {u1(); u2(); u3(); u4(); u5();});
}

select6(b1, b2, b3, b4, b5, b6, fn) {
	curVal = \ -> fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4), getValue(b5), getValue(b6));
	provider = make(curVal());
	cb = \b:flow -> { impersonateCallstackFn(fn,0); next(provider, curVal()); };
	subscribe2(b1, cb);
	subscribe2(b2, cb);
	subscribe2(b3, cb);
	subscribe2(b4, cb);
	subscribe2(b5, cb);
	subscribe2(b6, cb);
	provider;
}

select6u(b1, b2, b3, b4, b5, b6, fn) {
	curVal = \ -> fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4), getValue(b5), getValue(b6));
	provider = make(curVal());
	cb = \b:flow -> { impersonateCallstackFn(fn,0); next(provider, curVal()); };
	u1 = subscribe2(b1, cb);
	u2 = subscribe2(b2, cb);
	u3 = subscribe2(b3, cb);
	u4 = subscribe2(b4, cb);
	u5 = subscribe2(b5, cb);
	u6 = subscribe2(b6, cb);
	Pair(provider, \ -> {u1(); u2(); u3(); u4(); u5(); u6();});
}

selectMergeu(bs : [Behaviour<?>], init : Behaviour<?>, fn : (?, ?) -> ?) -> Pair<Behaviour<?>, () -> void> {
	len = length(bs);
	if (len == 0) Pair(init, nop)
	else if (len == 1) Pair(bs[0], nop)
	else if (len == 2) select2u(bs[0], bs[1], fn)
	else {
		p1 = selectMergeu(subrange(bs, 0, len / 2), init, fn);
		p2 = selectMergeu(subrange(bs, len / 2, len - (len / 2)), init, fn);
		p3 = select2u(p1.first, p2.first, fn);
		Pair(p3.first, \ -> { p3.second(); p2.second(); p1.second() })
	}
}

merge(behaviours) {
	mergeu(behaviours).first
}
mergeu(behaviours) {
	curVal = map(behaviours, getValue);
	if (forall(behaviours, isConst)) {
		Pair(const(curVal), nop);
	} else {
		provider = make(curVal);
		callback = \v -> nextDistinct(provider, map(behaviours, getValue));
		us = map(behaviours, \b -> { subscribe2(b, callback) });
		Pair(provider, \-> map(us, \u -> u()) |> ignore);
	}
}

merge2d(behaviours : [[Behaviour<?>]]) -> Behaviour<[[?]]> {
	curVal = map(behaviours, \row -> map(row, getValue));
	if (forall(behaviours, \row -> forall(row, isConst))) {
		const(curVal);
	} else {
		provider = make(curVal);
		callback = \v -> nextDistinct(provider, map(behaviours, \row -> map(row, getValue)));
		map(behaviours, \row -> map(row, \b -> { subscribe2(b, callback) |> ignore /*unsubscriber*/; }));
		provider;
	}
}

mergeFoldDynamic(behaviours : [Behaviour<?>], base : ??, fn : (a:??,b:Behaviour<?>) -> ??) -> Behaviour<??> {
	if (length(behaviours) == 0) {
		const(base);
	} else {
		provider = make(fold(behaviours, base, fn));
		callback = \v -> nextDistinct(provider, fold(behaviours, base, fn));
		map(behaviours, \b -> { subscribe2(b, callback); });
		provider;
	}
}

mergeFoldDynamicu(behaviours : [Behaviour<?>], base : ??, fn : (a:??,b:Behaviour<?>) -> ??) -> Pair<Behaviour<??>, () -> void> {
	if (length(behaviours) == 0) {
		Pair(const(base), nop);
	} else {
		provider = make(fold(behaviours, base, fn));
		callback = \v -> nextDistinct(provider, fold(behaviours, base, fn));
		us = map(behaviours, \b -> { subscribe2(b, callback); });
		Pair(provider, \ -> applyall(us));
	}
}

mergeFold(behaviours : [Behaviour<?>], base : ??, fn : (a:??,b:Behaviour<?>) -> ??) -> Behaviour<??> {
	if (forall(behaviours, isConst)) {
		const(fold(behaviours, base, fn))
	} else {
		mergeFoldDynamic(behaviours, base, fn);
	}
}

splitStaticPart(behaviours : [Behaviour<?>], id : ?, op : (a:?,b:Behaviour<?>) -> ?) -> Pair<[Behaviour<?>],?> {
	staticsum = ref id;
	dynamic = filter(behaviours, \b -> {
		c = isConst(b);
		if (c) {
			staticsum := op(^staticsum, b);
		}
		!c;
	});
	Pair(dynamic, ^staticsum)
}

mergeCommutative(behaviours : [Behaviour<?>], id : ?, op : (a:?,b:Behaviour<?>) -> ?) -> Behaviour<?> {
	dynpair = splitStaticPart(behaviours, id, op);
	dynlen = length(dynpair.first);
	if (dynlen == 1 && dynpair.second == id) {
		dynpair.first[0];
	} else {
		mergeFoldDynamic(dynpair.first, dynpair.second, op)
	}
}

mergeCommutativeu(behaviours : [Behaviour<?>], id : ?, op : (a:?,b:Behaviour<?>) -> ?) -> Pair<Behaviour<?>, () -> void> {
	dynpair = splitStaticPart(behaviours, id, op);
	dynlen = length(dynpair.first);
	if (dynlen == 1 && dynpair.second == id) {
		Pair(dynpair.first[0], nop);
	} else {
		mergeFoldDynamicu(dynpair.first, dynpair.second, op)
	}
}

arraySubscribe2(bs : [Behaviour<?>], updateFn : (i : int, before : ?, after : ?) -> void) -> () -> void {
	us = mapi(bs, \i, b -> {
		curVal = ref getValue(b);
		subscribe2(b, \v -> {
			old = ^curVal;
			if (old != v) {
				curVal := v;
				updateFn(i, old, v);
			}
		});
	});
	\ -> applyall(us);
}

mergeIncremental(behaviours : [Behaviour<?>], id : ?, delta :(a:?,old:?,new:?)->?) -> Behaviour<?> {
	op = \a,b -> delta(a,id,getValue(b));
	dynpair = splitStaticPart(behaviours, id, op);
	dynlen = length(dynpair.first);
	if (dynlen == 0) {
		const(dynpair.second);
	} else if (dynlen == 1 && dynpair.second == id) {
		dynpair.first[0];
	} else {
		result = make(fold(dynpair.first, dynpair.second, op));
		arraySubscribe2(dynpair.first, \i,old,new -> {
			nextDistinct(result, delta(getValue(result), old, new))
		});
		result;
	}
}

mergeIncrementalu(behaviours : [Behaviour<?>], id : ?, delta :(a:?,old:?,new:?)->?) -> Pair<Behaviour<?>, () -> void> {
	op = \a,b -> delta(a,id,getValue(b));
	dynpair = splitStaticPart(behaviours, id, op);
	dynlen = length(dynpair.first);
	if (dynlen == 0) {
		Pair(const(dynpair.second), nop);
	} else if (dynlen == 1 && dynpair.second == id) {
		Pair(dynpair.first[0], nop);
	} else {
		result = make(fold(dynpair.first, dynpair.second, op));
		u = arraySubscribe2(dynpair.first, \i,old,new -> {
			nextDistinct(result, delta(getValue(result), old, new))
		});
		Pair(result, u);
	}
}


connect(b1, b2) {
	caller = captureCallstackItem(1);
	subscribe(b1, \v -> { impersonateCallstackItem(caller,0); next(b2, v); });
}

connect2(b1, b2) {
	caller = captureCallstackItem(1);
	subscribe2(b1, \v -> { impersonateCallstackItem(caller,0); next(b2, v); });
}

connectDistinct(b1, b2) {
	caller = captureCallstackItem(1);
	subscribe(b1, \v -> { impersonateCallstackItem(caller,0); nextDistinct(b2, v); });
}

connectSelectu(behaviour : Behaviour<?>, target : DynamicBehaviour<??>, fn : (?) -> ??) -> () -> void {
	next(target, fn(getValue(behaviour)));
	if (isConst(behaviour)) {
		nop;
	} else {
		// subscribe immediately calls the function, so we use subscribe2
		subscribe2(behaviour, \v -> { impersonateCallstackFn(fn,0); next(target, fn(v)); });
	}
}

connectSelectDistinctu(behaviour : Behaviour<?>, target : DynamicBehaviour<??>, fn : (?) -> ??) -> () -> void {
	nextDistinct(target, fn(getValue(behaviour)));
	if (isConst(behaviour)) {
		nop;
	} else {
		// subscribe immediately calls the function, so we use subscribe2
		subscribe2(behaviour, \v -> { impersonateCallstackFn(fn,0); nextDistinct(target, fn(v)); });
	}
}

connectSelect2u(b1 : Behaviour<?>, b2 : Behaviour<??>, target : DynamicBehaviour<???>, fn : (?, ??) -> ???) -> () -> void {
	next(target, fn(getValue(b1), getValue(b2)));
	if (isConst(b1) && isConst(b2)) {
		nop;
	} else {
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); next(target, fn(getValue(b1), getValue(b2))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		\ -> { u1(); u2() };
	}
}

connectSelect2Distinctu(b1 : Behaviour<?>, b2 : Behaviour<??>, target : DynamicBehaviour<???>, fn : (?, ??) -> ???) -> () -> void {
	nextDistinct(target, fn(getValue(b1), getValue(b2)));
	if (isConst(b1) && isConst(b2)) {
		nop;
	} else {
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); nextDistinct(target, fn(getValue(b1), getValue(b2))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		\ -> { u1(); u2() };
	}
}

connectSelect3u(
	b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>,
	target : DynamicBehaviour<????>, fn : (?, ??, ???) -> ????
) -> () -> void {
	next(target, fn(getValue(b1), getValue(b2), getValue(b3)));
	if (isConst(b1) && isConst(b2) && isConst(b3)) {
		nop;
	} else {
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); next(target, fn(getValue(b1), getValue(b2), getValue(b3))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		u3 = subscribe2(b3, cb);
		\ -> { u1(); u2(); u3() };
	}
}

connectSelect3Distinctu(
	b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>,
	target : DynamicBehaviour<????>,
	fn : (?, ??, ???) -> ????
) -> () -> void {
	nextDistinct(target, fn(getValue(b1), getValue(b2), getValue(b3)));
	if (isConst(b1) && isConst(b2) && isConst(b3)) {
		nop;
	} else {
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); nextDistinct(target, fn(getValue(b1), getValue(b2), getValue(b3))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		u3 = subscribe2(b3, cb);
		\ -> { u1(); u2(); u3() };
	}
}

connectSelect4u(
	b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>,
	target : DynamicBehaviour<?????>,
	fn : (?, ??, ???, ????) -> ?????
) -> () -> void {
	next(target, fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4)));
	if (isConst(b1) && isConst(b2) && isConst(b3) && isConst(b4)) {
		nop;
	} else {
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); next(target, fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		u3 = subscribe2(b3, cb);
		u4 = subscribe2(b4, cb);
		\ -> { u1(); u2(); u3(); u4() };
	}
}

connectSelect4Distinctu(
	b1 : Behaviour<?>, b2 : Behaviour<??>, b3 : Behaviour<???>, b4 : Behaviour<????>,
	target : DynamicBehaviour<?????>,
	fn : (?, ??, ???, ????) -> ?????
) -> () -> void {
	nextDistinct(target, fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4)));
	if (isConst(b1) && isConst(b2) && isConst(b3) && isConst(b4)) {
		nop;
	} else {
		// We construct a shared callback function for both values to save closure memory. That is why this is typed flow
		cb = \b : flow -> { impersonateCallstackFn(fn,0); nextDistinct(target, fn(getValue(b1), getValue(b2), getValue(b3), getValue(b4))); };
		u1 = subscribe2(b1, cb);
		u2 = subscribe2(b2, cb);
		u3 = subscribe2(b3, cb);
		u4 = subscribe2(b4, cb);
		\ -> { u1(); u2(); u3(); u4() };
	}
}

makeBidirectionalLink(a : DynamicBehaviour<?>, b : DynamicBehaviour<??>, a2b : (?) -> ??, b2a : (??) -> ?, distinct : bool) -> () -> void {
	nextFn1 = if (distinct) nextDistinct else next;
	nextFn2 = if (distinct) nextDistinct else next;
	nested = ref false;
	u1 = subscribe(a, \v -> {
		if (! ^nested) {
			impersonateCallstackFn(a2b,0);
			nested := true;
			nextFn1(b, a2b(v));
			nested := false;
		}
	});
	u2 = subscribe2(b, \v -> {
		if (! ^nested) {
			impersonateCallstackFn(b2a,0);
			nested := true;
			nextFn2(a, b2a(v));
			nested := false;
		}
	});
	\ -> {
		u1();
		u2();
	}
}
bidirectionalLink(a : DynamicBehaviour<?>, b : DynamicBehaviour<??>, a2b : (?) -> ??, b2a : (??) -> ?) -> () -> void {
	makeBidirectionalLink(a, b, a2b, b2a, true);
}
bidirectionalLinkNonDistinct(a : DynamicBehaviour<?>, b : DynamicBehaviour<??>, a2b : (?) -> ??, b2a : (??) -> ?) -> () -> void {
	makeBidirectionalLink(a, b, a2b, b2a, false);
}

arrayMax(bs) {
	mergeCommutative(bs, -100000000.0, \a,b -> max(a,getValue(b)));
}
arrayMaxu(bs) {
	mergeCommutativeu(bs, -100000000.0, \a,b -> max(a,getValue(b)));
}

arraySum(bs) {
	mergeIncremental(bs, 0.0, \a,old,new->a+new-old);
}

arraySumu(bs) {
	mergeIncrementalu(bs, 0.0, \a,old,new->a+new-old);
}

arrayISum(bs) {
	mergeIncremental(bs, 0, \a,old,new->a+new-old);
}
arrayISumu(bs) {
	mergeIncrementalu(bs, 0, \a,old,new->a+new-old);
}

dynArrayPush(dynamicArray, elem) { next(dynamicArray, arrayPush(getValue(dynamicArray), elem))};

// Avoid using this. It's better to use disposable version below.
distinctUntilChanged(b : Behaviour<?>) -> Behaviour<?> {
	distinctUntilChangedu(b).value
}

distinctUntilChangedu(b : Behaviour<?>) -> Disposable<Behaviour<?>> {
	if (isConst(b)) {
		Disposable(b, nop)
	} else {
		v = ref getValue(b);
		provider = make(^v);
		nest = ref 0;
		uns = subscribe2(b, \value -> {
			if (value != ^v) {
				if (^nest != 0) {
					devtrace("Nested update");
//					printCallstack();
				} else {
					nest := ^nest + 1;
					v := value;
					nextDistinct(provider, value);
					nest := ^nest - 1;
				}
			}
		});
		Disposable(provider, uns)
	}
}

untilChanged(b, delta) {
	filterWithLast(b, \l, n -> {
		abs(n - l) > delta;
	});
}

untilChangedu(b, delta) {
	filterWithLastu(b, \l, n -> {
		abs(n - l) > delta;
	});
}

selectWithLast(b : Behaviour<?>, fn : (last : ?, new : ?) -> ??) -> Behaviour<??> {
	selectWithLastu(b, fn).first;
}

selectWithLastu(b : Behaviour<?>, fn : (last : ?, new : ?) -> ??) -> Pair<Behaviour<??>, () -> void> {
	init = getValue(b);
	if (isConst(b)) {
		// We just call the function with the same thing twice
		Pair(const(fn(init, init)), nop);
	} else {
		last = make(init);
		provider = make(fn(init, init));
		u = subscribe2(b, \value -> {
			old = getValue(last);
			nextDistinct(last, value);
			next(provider, fn(old, value));
		});
		Pair(provider, u);
	}
}

filterWithLast(b, fn) {
	filterWithLastu(b, fn).first;
}

filterWithLastu(b, fn) {
	if (isConst(b)) {
		Pair(b, nop);
	} else {
		provider = make(getValue(b));
		u = subscribe2(b, \value -> {
			old = getValue(provider);
			if (fn(old, value)) {
				next(provider, value);
			}
		});
		Pair(provider, u);
	}
}

// It has a memory leak threat. Use stallu instead.
stall(behaviour, ms) {
	stall2u(behaviour, ms, make(false)).first
}

stallu(b : Behaviour<?>, ms : int) -> Pair<Behaviour<?>, () -> void> {
	stall2u(b, ms, make(false))
}

stall2u(behaviour : Behaviour<?>, ms : int, timerPending : DynamicBehaviour<bool>) -> Pair<Behaviour<?>, () -> void> {
	provider = make(getValue(behaviour));
	nextDistinct(timerPending, false);
	uns = subscribe2(behaviour, \v -> {
		if (!getValue(timerPending)) {
			timer(ms, \ -> {
				next(timerPending, false);
				nextDistinct(provider, getValue(behaviour));
			});
			next(timerPending, true);
		}
	});
	Pair(provider, uns)
}

throttle(behaviur, rate) {
	throttleu(behaviur, rate).first;
}

throttleu(behaviour, rate) {
	ignoreUntil = ref timestamp() + rate;
	valueToSend = ref getValue(behaviour);
	provider = make(^valueToSend);
	timerPending = ref false;
	u = subscribe2(behaviour, \v -> {
		if (v != getValue(provider)) {
			now = timestamp();
			if (now < ^ignoreUntil) {
				valueToSend := v;
				if (! ^timerPending) {
					delay = floor(^ignoreUntil - now);
					// It is too soon to send this, but when the time runs out, be sure to
					// send the latest value then
					timer(delay, \ ->{
						if (getValue(provider) != ^valueToSend) {
							next(provider, (^valueToSend));
						}
						timerPending := false;
						ignoreUntil := timestamp() + rate;
					});
					timerPending := true;
				}
			} else {
				// OK, just fire it now
				next(provider, v);
				ignoreUntil := now + rate;
				valueToSend := v;
			}
		}
	});
	Pair(provider, u);
}

throttle2(behaviour, delta) {
	throttle2u(behaviour, delta).first
}

throttle2u(behaviour, delta) {
	resetTimer = ref nop;
	provider = behaviour |> getValue |> make;
	uns = subscribe2(behaviour, \val -> {
		^resetTimer();
		resetTimer := interruptibleTimer(delta, \ -> {
			resetTimer := nop;
			next(provider, val);
		});
	});
	Pair(provider, uns)
}

buffer1(behaviour, init) {
	provider = make(init);
	previous = ref getValue(behaviour);
	subscribe2(behaviour, \v -> {
		next(provider, ^previous);
		previous := getValue(behaviour);
	});
	provider;
}

repeatable(x) { repeatable2(x, true); }

repeatable2(xRaw, startNow) {
	// in flash timer(x < 10, fn) becomes timer(10, fn).
	// Flash is the first target and some code is based on its assumptions.
	x = max(10, xRaw);
	curStopping = ref ref true;
	b = make(timestamp());

	doStart = \ -> {
		// In order to avoid duplicate timer chains,
		// every one must use a separate stop variable.
		// It might be easier to think that doStart
		// creates a new thread, which obviously needs
		// its own quit flag.
		stopping = ref false;

		// emit next timestamp, then wait and repeat
		f = ref nop;
		f := \ -> {
			if (!^stopping) {
				nextDistinct(b, timestamp());
				timer(x, ^f)
			}
		}

		// start timer
		curStopping := stopping;
		timer(x, ^f);
	}

	if (startNow) {
		doStart();
	}

	Timer(
		b,
		\ -> ^curStopping := true,
		\ -> if (^(^curStopping)) doStart()
	)
}

controlledTimer(delay, enabled) {
	tmr = repeatable2(delay, getValue(enabled));

	rm = subscribe2(enabled, \on -> {
		if (on) {
			tmr.start();
		} else {
			tmr.stop();
		}
	});

	Disposable(tmr.value, \ -> { tmr.stop(); rm(); })
}

transistor(gate : Behaviour<bool>, value : Behaviour<?>) -> Behaviour<?> {
	result = make(getValue(value));
	disconnect = ref nop;
	subscribe(distinctUntilChanged(gate), \b -> {
		if (b) {
			disconnect := connectDistinct(value, result);
		} else {
			^disconnect();
		}
	});
	result;
}

transistoru(gate: Behaviour<bool>, value: Behaviour<?>) -> Disposable<Behaviour<?>> {
	result = make(getValue(value));

	uns1 = subscribe2(value, \v -> {
		if (getValue(gate)) {
			next(result, v);
		}
	});

	uns2 = subscribe2(gate, \b -> {
		if (b) nextDistinct(result, getValue(value));
	});

	Disposable(result, \ -> {uns1(); uns2();})
}

ignoreu(gate: Behaviour<bool>, value: Behaviour<?>) -> Disposable<Behaviour<?>> {
	result = make(getValue(value));

	uns = subscribe2(value, \v -> {
		if (getValue(gate)) {
			next(result, v);
		}
	});

	Disposable(result, uns)
}

when(b : Behaviour<bool>, fn : () -> void) -> () -> void {
	if (getValue(b)) {
		fn();
		nop
	} else {
		uns = ref nop;
		uns := subscribe(b, \v -> if (v) { ^uns(); uns := nop; fn(); });
		\ -> ^uns()
	}
}

doOnceOnUpdate(trigger : DynamicBehaviour<?>, isReady : (?) -> bool, fn : (?) -> void) -> () -> void {
	uns = ref nop;
	uns := subscribe2(trigger,
		\t -> {
			if (isReady(t)) {
				^uns();
				uns := nop;
				fn(t);
			}
		}
	);
	\ -> ^uns()
}

subselect(b, fn) {
	subselectu(b, fn).first
}

subselectu(b, fn) {
	firstb = fn(getValue(b));
	res = make(getValue(firstb));
	disconnect = ref connect(firstb, res);
	u = subscribe2(b, \v -> { ^disconnect(); disconnect := connect(fn(v), res) });
	Pair(res, \-> {
		u();
		^disconnect();
	})
}

makeDisposable(pair : Pair<Behaviour<?>, () -> void>) -> Disposable<Behaviour<?>> {
	Disposable(pair.first, pair.second)
}
