import behaviour;
import illusion/illusion_preprocessor;
import form;
import movable2;
import ui/buttons;
import filters;
import ui/easycombobox;

export {
	ShapeEditorStyle ::= ShapeFixup, ShapePreviewSize, ShapeTaggedPreview, ShapeBareWindow, ShapeNoPreview,
						 ShapeShowWholeEditor, ShapeManualPreview, ShapeIuPreprocessor, ShapeInEditorToVarSwitch,
						 ShapeSelectedNodeStyle, ShapeMakeNiceText, ShapeDivision, ShapeDontClearOnOk, ShapeUpdateOffset,
						 ShapeEditorUI;
		// This is useful to implement backwards compatibility in case structs change definition
		ShapeFixup(fixup : Tree<string, ([IuValue]) -> IuValue>);
		// This is to define a minimum size of the preview area
		ShapePreviewSize(width : Behaviour<double>, height : Behaviour<double>);
		// Useful to extract live IuValues of specific fields to allow live editing in the preview.
		// Relies on the PieceFieldTagger piece setup that can be registered to a field. That function
		// returns a string for each value. You can look up using that same name here to get access
		// to the corresponding IuValue, which can be edited live
		ShapeTaggedPreview(previewFn : (flow, ref Tree<string, IuValue>) -> Form);
		// If you do not want a title and window decoration, this can be used
		ShapeBareWindow(width : double, height : double);
		// Disables a preview.
		ShapeNoPreview();
		// Initially editor will be shown without scrollbars
		ShapeShowWholeEditor();
		ShapeManualPreview();
		ShapeIuPreprocessor(preprocessor : IuPreprocessor);
		ShapeInEditorToVarSwitch(); //IuInt(val) (and others that has Var pair) will be deserialized as IuIntVar("", val)
		ShapeSelectedNodeStyle(style : [GraphicsStyle]);
		ShapeMakeNiceText(makeNiceText : (string) -> string);
		// Initial editor's division
		ShapeDivision(division : double);
		//#39187 Let the surrounding Form to show popup if necessary and the return to editing.
		ShapeDontClearOnOk();
		ShapeUpdateOffset(x : Behaviour<double>, y : Behaviour<double>);
		//Add custom shape editor UI
		ShapeEditorUI(
			makeShapeEditorWindow : (header : string, content : Form) -> Form,
			makeShapeEditorButton : (caption : string, enabled : Behaviour<bool>, shortcut : string, fn : () -> void) -> Form,
			makeShapeEditorCustomButton : (
				width : double, 
				caption : string, 
				enabled : Behaviour<bool>, 
				shortcut : string, 
				hint : string,  
				onClick : () -> void
			) -> Form,
			makeShapeEditorComboBox : (
				width : double,
				maxDropHeight : double,
				items : [Form],
				selectedB : DynamicBehaviour<int>,
				wBorder: double,
				hBorder: double
			) -> Form,
			background : int,
			structColor : Maybe<int>,
			textColor : int,
			fontName : string,
			showPath : bool
		);
		defaultShapeEditorUI = ShapeEditorUI(
			\header, content -> ShadowFilter(makeWindow(content, header)), 
			orangeSkinButton,
			orangeCustomButtonWithWidth,
			ComboBox,
			0xeeeeee,
			None(),
			0xeeeeee,
			"Roboto",
			true
		)
}
