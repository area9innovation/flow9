import form;
import ds/tree;
import maybe;
import gui;

export {
	getRealHTMLDisplayed() -> bool;

	makeRealHTML : (key : string, html : RealHTML2) -> Form;

	showRealHTML(keys : [string]) -> void;
	hideRealHTML(keys : [string]) -> void;

	showAllRealHTML() -> void;
	hideAllRealHTML() -> void;

	switchPreviewRealHTML(showPreview : bool) -> void;
	previewSuffix = "_preview";

	isAllRealHTMLDisplayed = make(true);
	RealHTMLControl(visible : DynamicBehaviour<bool>);
	controlTree : ref Tree<string, RealHTMLControl> = ref makeTree();
}

getRealHTMLDisplayed() -> bool {
	getValue(isAllRealHTMLDisplayed)
}

makeRealHTML(key : string, html : RealHTML2) -> Form {
	visValue = make(getValue(isAllRealHTMLDisplayed));
	visible = make(getValue(isAllRealHTMLDisplayed) && getValue(visValue));

	Constructor(
		Visibleb(visible, html),
		\ -> {
			controlTree := setTree(^controlTree, key, RealHTMLControl(visValue));
			u1 = subscribe2(isAllRealHTMLDisplayed, \v -> nextDistinct(visible, v && getValue(visValue)));
			u2 = subscribe2(visValue, \v -> nextDistinct(visible, v && getValue(isAllRealHTMLDisplayed)));
			\ -> {
				controlTree := removeFromTree(^controlTree, key);
				u1();
				u2();
			}
		}
	)
}

getRealHTMLControls(keys : [string]) -> [RealHTMLControl] {
	fold(keys, [], \acc, k -> eitherMap(lookupTree(^controlTree, k), \cntl -> arrayPush(acc, cntl), acc))
}

showRealHTML(keys : [string]) -> void {
	iter(getRealHTMLControls(keys), \cntl -> next(cntl.visible, true))
}

hideRealHTML(keys : [string]) -> void {
	iter(getRealHTMLControls(keys), \cntl -> next(cntl.visible, false))
}

showAllRealHTML() -> void {
	next(isAllRealHTMLDisplayed, true)
}

hideAllRealHTML() -> void {
	next(isAllRealHTMLDisplayed, false)
}

switchPreviewRealHTML(showPreview : bool) -> void {
	pKeys = ref [];
	keys = ref [];
	traversePreOrder(^controlTree, \k, v -> refArrayPush(if (endsWith(k, previewSuffix)) pKeys else keys, k));
	if (showPreview) {
		hideRealHTML(^keys);
		showRealHTML(^pKeys);
	} else {
		hideRealHTML(^pKeys);
		showRealHTML(^keys);
	}
}
