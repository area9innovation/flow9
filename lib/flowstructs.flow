import ds/array;
import dynamic;

export {
	// Use like
	//   size : FontSize = extractStruct(style, FontSize(14.0));
	// and you will get the default FontSize(14.0) unless there is another FontSize in the array
	// Notice that you should list the type of the result yourself
	extractStruct(a : [?], e : ??) -> ??;

	// the same as above but returns all occurances from source or empty array
	extractStructMany(a : [?], e : ??) -> [??];

	// Use like
	//   newStyle = replaceStruct(style, WigiName("name"));
	// and you will get a new array containing WigiName("name") and without any other WigiName
	replaceStruct(a : [?], e : ??) -> [?];

	// replaces all subtypes, existing in e.
	replaceStructMany(a : [?], e : [?]) -> [?];

	// returns Some(??) if struct is present in the array
	tryExtractStruct(a : [?], e : ??) -> Maybe<??>;

	// returns Some(??) if any of the structs is present in the array
	tryExtractStructMany(a : [?], e : [??]) -> Maybe<??>;

	// removes from array all structs that same as e
	removeAllStructs(a : [?], e : ??) -> [?];

	// the same as above but you can pass array of structs for removing
	removeAllStructsMany(a : [?], e : [??]) -> [?];

	// Does this array contain the given struct?
	containsStruct(a : [?], e : ??) -> bool;

	// True if array a contains at least one element with the same struct as one of e
	containsAnyStruct(a : [?], e : [??]) -> bool;
}

extractStruct(a : [?], e : ??) -> ?? {
	fold(a, e, \acc : ??, el : ? -> if (isSameStructType(acc, el)) {
		// Funky way to cast. This should not work, but it seems we get away with it
		t : ?? = cast(flow(el) : flow -> ??);
		t
	} else acc);
}

extractStructMany(a : [?], e : ??) -> [??] {
	filter(a, \el -> isSameStructType(e, el))
}


replaceStruct(a : [?], e : ??) -> [?] {
	concat(filter(a, \el : ? -> !isSameStructType(el, e)), [e])
}

replaceStructMany(a : [?], e : [?]) -> [?] {
	if (e == []) a else concat(fold(e, a, \r : [?], t : ? -> filter(r, \t1 -> !isSameStructType(t1, t))), e);
}

tryExtractStruct(a : [?], e : ??) -> Maybe<??> {
	cast(find(a, \el : ? -> isSameStructType(e, el)) : Maybe<?> -> Maybe<??>)
}

tryExtractStructMany(a : [?], e : [??]) -> Maybe<??> {
	fold(e, None(), \acc, t ->
		eitherFn(
			acc,
			\acc2 -> Some(acc2),
			\ -> cast(find(a, \el : ? -> isSameStructType(t, el)) : Maybe<?> -> Maybe<??>)
		)
	)
}

removeAllStructs(a : [?], e : ??) -> [?] {
	filter(a, \el -> !isSameStructType(e, el))
}

removeAllStructsMany(a : [?], e : [??]) -> [?] {
    filter(a, \a1 -> !exists(e, \e1 -> isSameStructType(a1, e1)))
}

containsStruct(a : [?], e : ??) -> bool {
	fold(a, false, \acc, el -> acc || isSameStructType(el, e))
}

containsAnyStruct(a : [?], e : [??]) -> bool {
	exists(e, \e1 -> containsStruct(a, e1));
}
