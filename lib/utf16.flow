// Â© Copyright 2011 Area9 Technologies.

import timer;
import ds/tuples;
import math;  // for intMax

export {
	UTF16(
		textUCS2 : string,
		// Stores positions mapping only for characters that follow two-word ones, since position difference changes there.
		posUTF2UCS : Tree<int, int>,
		posUCS2UTF : Tree<int, int>,
	);

	emptyUTF16 = UTF16("", makeTree(), makeTree());
	makeUTF16(text : string) -> UTF16;

	// The length of a string. Considering the string as UCS-16
	utf16Len(s : UTF16) -> int;

	utf16Concat(s : UTF16, t : UTF16) -> UTF16;

	// utf16IndexOf(text, substring) = index of substring in text, -1 if not found. Considering the string as UCS-16.
	// returns 0 if substring is "" on cpp and js
	utf16IndexOf(t : UTF16, s : UTF16) -> int;

	// index of substring in a sub-range of str specified as [start, end)
	utf16RangeIndexOf(str : UTF16, substr : UTF16, start : int, end : int) -> int;

	// Find the last occurrence of a given substring. Returns -1 if not found. Considering the string as UCS-2
	utf16LastIndexOf(str : UTF16, substr : UTF16) -> int;

	// Maybe<> version of strIndexOf.
	utf16IndexOfM(str : UTF16, substr : UTF16) -> Maybe<int>;

	// returns all positions of substr in str (for empty substring we returns empty array)
	utf16MultipleIndexOf(str : UTF16, substr : UTF16) -> [int];
	// version that allows substring superposition (for example
	// utf16multipleSuperpositionIndexOf("lololol", "lol", false) == [0, 4], but
	// utf16multipleSuperpositionIndexOf("lololol", "lol", true) == [0, 2, 4] ).
	utf16multipleSuperpositionIndexOf(str : string, substr : string, allowSuperposition : bool) -> [int];

	// Whether string contains a substring
	utf16Contains(str : UTF16, substr : UTF16) -> bool;

	// Whether the string contains the given substring at a given index
	utf16ContainsAt(str : UTF16, index : int, substr : UTF16) -> bool;

	// count of substr in text, 0 if not found. Considering the string as UCS-2.
	utf16CountOf(text : UTF16, substr : UTF16) -> int;

	// Tells if the string s starts with the string start
	utf16StartsWith(s : UTF16, start : UTF16) -> bool;
	// Tells if the string s ends with the string end
	utf16EndsWith(s : UTF16, end : UTF16) -> bool;

	// Is the first character in this string one of these?
	utf16IsFirst(s : UTF16, charsToFind : UTF16) -> bool;

	// Find one of these chars. -1 if none is found. Considering the string as UCS-2
	utf16FindFirstOf(s : UTF16, charsToFind : UTF16) -> int;

	// Finds first occurrence of any string given. Returns the position and the index of the found string.
	// Ignores empty strings in stringsToFind array
	utf16FindFirstOfStrings(s : UTF16, stringsToFind : [UTF16]) -> Maybe<Pair<int, int>>;

	// Maybe<> version of strLastIndexOf
	utf16LastIndexOfM(str : UTF16, substr : UTF16) -> Maybe<int>;


	// Extract a substring. Considering the string as UTF-16
	// do not use negative values here (because of some logical exceptions
	// for Flash target, see flow/flowunit/lib/test_string.flow, UnitTest "substring")
	utf16Substring(s : UTF16, start : int, length : int) -> UTF16;
	// In JS in Chrome, it force to make a copy of string, not sliced chained list of substrings
	// it is usefull if we parsing long string into some structure that point to small pices of the string.
	// in sliced mode, the size of the chain could be very large (1000+ levels with 32+ bytes costs each)
	// and outweight benefits from pointing to the large string
	utf16Clone(s : UTF16) -> UTF16;

	// Smart version of substring
	// `length` = 0 means to the end of `s`, negative `start` or `length` mean relative distance from the end of `s`
	// Examples:
	//      strsubsmart("filename.ext", -3, 0) == "ext"
	//      strsubsmart("filename.ext", 0, -4) == "filename"
	//      strsubsmart("Error: Access denied!", 7, -1) == "Access denied"
	utf16SubSmart(s : UTF16, start : int, length : int) -> UTF16;

	// Take up to the given point. Considering the string as UTF-16
	utf16Left(s : UTF16, index : int) -> UTF16;

	// Take from the given index until the end of the string. Considering the string as UCS-2
	utf16Right(s : UTF16, index : int) -> UTF16;

	// Substring specified as [start, end)
	utf16SubRange(s : UTF16, start : int, end : int) -> UTF16;

	utf16Insert(destString : UTF16, insertedString : UTF16, insertPos : int) -> UTF16;

	utf16Remove(s : UTF16, start : int, len : int) -> UTF16;

	// Check also unicodecharacters.flow
	utf16ToLowerCase(UTF16) -> UTF16;
	utf16ToUpperCase(UTF16) -> UTF16;

	// Capitalization of the first word, and all other words, except for closed-class words
	// (see http://en.wikipedia.org/wiki/Letter_case#Headings_and_publication_titles)
	utf16ToCapitalization(s : UTF16) -> UTF16;


	// replaces all occurrences of substring
	utf16Replace(s : UTF16, old : UTF16, new : UTF16) -> UTF16;

	// strReplaces("abc", ["a","1","b","2","c","4"]) == "124"
	// expected result: chain replace. strReplaces("q1e", ["q", "1", "1", "2"]) == "22e"
	utf16Replaces(s : UTF16, oldnew : [UTF16]) -> string;

	// Hard to re-make quickly.
	/*
	// replaces substring if character before and character after satisfy given criteria.
	// "" for character before and character after means start and end of string.
	// replaces all occurrences.
	utf16ReplaceCustom(s : UTF16, old : UTF16, new : UTF16, charBeforeFn : Maybe<(UTF16)->bool>, charAfterFn : Maybe<(UTF16)->bool>) -> UTF16;

	// call matchFn for each match, do replaces when function returns Some.
	// "matchStart" is match position in original str.
	// "matchEnd" is match start + strlen(substr).
	utf16ReplaceCustom2(str : UTF16, substr : UTF16, matchFn : (matchStart : int, matchEnd : int) -> Maybe<UTF16>) -> UTF16;
	*/

	// Substitutes strings from array instead of parameters given in main string: formatString("The %1 was %2", [ "man", "tired"])
	utf16Format(s : UTF16, p : [UTF16]) -> UTF16;

	// Get the character at index. Considering the string as UTF-16
	utf16GetCharAt(UTF16, int) -> UTF16;

	// Considering the string as UTF-16, get the unicode character code at index i (starting from 0)
	utf16GetCharCodeAt(s : UTF16, i : int) -> int;

	// Convert a UTF-16 unicode character code to a string
	utf16FromCharCode(int) -> UTF16;

	// Convert a string to an array of character codes in UTF-8 format
	utf16ToUtf8(s : UTF16) -> [int];

	// Convert a string to an array of character codes in UTF-16 format
	utf16ToA(UTF16) -> [int];


	// Is this a single digit string?
	utf16IsDigit(UTF16) -> bool;

	// Returns true if string is not empty and consists of digits only.
	utf16IsDigits(s : UTF16) -> bool;

	// Is this string could be properly converted to the double
	utf16IsDouble(s : UTF16) -> bool;

	// Is this a single hex letter string?
	utf16IsHexLetter(UTF16) -> bool;
	//Is this a single hex digit string?
	utf16IsHexDigit(UTF16) -> bool;

	// Returns true if string is not empty and consists of hex digits only.
	utf16IsHexDigits(UTF16) -> bool;

	// Is this string a base64 presentation of something
	utf16IsBase64String(UTF16) -> bool;

	// Is this a single letter string?
	// Knows latin letters only! Consider using isLetterUnicode from unicodecharacters.flow
	utf16IsUpperLetter(UTF16) -> bool;
	utf16IsLowerLetter(UTF16) -> bool;
	utf16IsLetter(UTF16) -> bool;

	// Checks whether a string has at least one letter.
	// Knows latin letters only! Consider using containsLettersUnicode from unicodecharacters.flow
	utf16ContainsLetters(s : UTF16) -> bool;

	// Is this entire string different from whitespace?
	utf16IsNotSpace(s : UTF16) -> bool;
	utf16IsSpace(s : UTF16) -> bool;

	// Does the string contain any line break symbol?
	utf16IsMultiline(s : UTF16) -> bool {strIndexOf(s, "\n") != -1}


	// Convert an integer to a string
	intToUtf16(int) -> UTF16;

	// Convert a double to a string
	double2ToUtf16(double) -> UTF16;

	// Converts string to bool
	utf16ToBool(UTF16) -> bool;

	// array of anything to string
	array2ToUtf16(src : [?], delimiter : UTF16, fn : (elem : ?) -> UTF16) -> UTF16;

	// string to array of anything
	utf16ToArray2(src : UTF16, delimiter : UTF16, fn : (elem : UTF16) -> ?) -> [?];

	// Format an int as hex (pretending it is unsigned)
	utf16formatHex(d : int) -> UTF16;

	// Parses binary number (a string of 1 and 0) to int
	utf16ParseBin(bin : UTF16) -> int;

	// Parse a hex value in a string to an int
	utf16ParseHex(s : UTF16) -> int;

	// Format an int as a 6-digit hex string usable in HTML and CSS
	utf16FormatColor(d : int) -> UTF16;

	// Numbering stuff
	utf16FromDigit(c : UTF16) -> int;

	// returns s repeated cnt times
	utf16Repeat(s : UTF16, cnt : int) -> UTF16;

	// Pad the string s by appending c at its left until it reach l characters
	utf16LPad(s : UTF16, c : UTF16, l : int) -> UTF16;

	// Pad the string s by appending c at its right until it reach l characters
	utf16RPad(s : UTF16, c : UTF16, l : int) -> UTF16;


	/// Folds over the character codes of the left-to-right character sequence in s.
	utf16Fold(s : UTF16, a : ?, f : (acc : ?, c : int) -> ?) -> ?;
	utf16CharsFold(s : UTF16, a : ? , f : (acc : ?, char : UTF16) -> ?) -> ?;
	utf16Foldr(s : UTF16, a : ?, f : (acc : ?, c : int) -> ?) -> ?;
	utf16CharsFoldr(s : UTF16, a : ? , f : (acc : ?, char : UTF16) -> ?) -> ?;
	utf16Foldi(s : UTF16, a : ?, f : (i : int, acc : ?, c : int) -> ?) -> ?;
	utf16CharsFoldi(s : UTF16, a : ? , f : (i : int, acc : ?, char : UTF16) -> ?) -> ?;
	utf16Foldri(s : UTF16, a : ?, f : (i : int, acc : ?, c : int) -> ?) -> ?;
	utf16CharsFoldri(s : UTF16, a : ? , f : (i : int, acc : ?, char : UTF16) -> ?) -> ?;


	// Removes spaces at the beginning and the end of the string s
	utf16Trim(s : UTF16) -> UTF16;

	// Removes spaces at the left of the string s
	utf16LTrim(s : UTF16) -> UTF16;

	// Removes spaces at the right of the string s
	utf16RTrim(s : UTF16) -> UTF16;

	// Removes characters at the beginning and the end of the string s
	utf16Trim2(s : UTF16, ugly : UTF16) -> UTF16;

	// Removes characters at the left of the string s
	utf16LTrim2(s : UTF16, ugly : UTF16) -> UTF16;

	// Removes characters at the right of the string s
	utf16RTrim2(s : UTF16, ugly : UTF16) -> UTF16;
}

makeUTF16(text : string) -> UTF16 {
	indexing = stringFoldi(
		s, Quadruple(makeTree(), makeTree(), 0, false),  // Tree, position difference, skip next.
		\i, acc, code -> if (acc.fourth) Quadruple(acc with fourth=false)
		else if (0xD800 >= code && code < 0xDC00)
			Quadruple(setTree(acc.first, i+1-acc.second, i+1), setTree(acc.first, i+1, i+1-acc.second), acc.second+1, true)
		else acc
	);

	UTF16(text, indexing.first, indexing.second)
}

posUTF16ToUCS2(s : UTF16, utf : int) -> int {
	switch(treeIntervalSearch(t.posUTF2UCS, utf)) {
		None() : utf;
		Some(utf) : utf + ucs - lookupTreeDef(t.posUCS2UTF, ucs, ucs);
	}
}

posUCS2ToUTF16(s : UTF16, ucs : int) -> int {
	switch(treeIntervalSearch(t.posUCS2UTF, ucs)) {
		None() : ucs;
		Some(utf) : ucs + utf - lookupTreeDef(t.posUTF2UCS, utf, utf);
	}
}

// Function that takes the pair of the trees and makes filtermap that way
// we have UTF16 and UCS2 positions ofsetted regarding the pair of the constants given.
remapUTF16Trees(treesUTF2UCSandBack : Pair<Tree<int, int>, Tree<int, int>>, rangeUCS2 : ValueRange<int>, deltaUCS2 : int, rangeUTF16 : ValueRange<int>, deltaUTF16 : int) {
	newPosUTF2UCS = filtermap(
		tree2pairs(s.first), \p -> unpair(p, \utf, ucs ->
			if (rangeUTF16.minValue <= utf && utf < rangeUTF16.maxValue && rangeUCS2.minValue <= ucs && ucs < rangeUCS2.maxValue)
				Some(Pair(utf+deltaUTF16, ucs+deltaUCS2))
			else
				None()
		)
	);
	Pair(pairs2tree(newPosUTF2UCS), pairs2tree(map(newPosUTF2UCS, \p -> Pair(p.second, p.first))))
}

utf16Len(s : UTF16) -> int {
	switch (popmax(s.posUTF2UCS)) {
		EmptyPopResult(): 0;
		PopResult(utfpos, ucspos, __): utfpos - ucspos;
	} + strlen(s.textUCS2);
}

utf16Concat(s : UTF16, t : UTF16) -> UTF16 {
	utf16Insert(s, t, utf16Len(s))
}


utf16IndexOf(t : UTF16, s : UTF16) -> int {
	posUCS2ToUTF16(t, strIndexOf(t.textUCS, s.textUCS));
}

utf16RangeIndexOf(str : UTF16, substr : UTF16, start : int, end : int) -> int {
	rv = utf16IndexOf(utf16Substring(str, start, end-start), substr);
	if (rv < 0) rv else start+rv;
}

utf16LastIndexOf(s : UTF16, p : UTF16) -> int {
	i = utf16IndexOf(s, p);
	if (i == -1) {
		-1;
	} else {
		l = utf16Len(s);
		pl = utf16Len(p);
		if (pl == 0) {
			0;
		} else {
			// TODO: We could skip until i and call ourselves recursively
			f = countUntil(0, l - pl + 1, \i2 -> {
				utf16Substring(s, l - pl - i2, pl) == p;
			});
			l - pl - f;
		}
	}
}

utf16multipleSuperpositionIndexOfGenerate(str : UTF16, substr : UTF16, allowSuperposition : bool) -> (Maybe<int>) -> Maybe<int> {
	substrLength = utf16Len(substr);
	step = if (allowSuperposition && utf16Len(str) > substrLength) {
		firstCharCode = utf16GetCharCodeAt(substr, 0);
		stepM = utf16Foldi(substr, None(), \i, acc, c -> {
			// i == 0 is trivial case with zero gap, so we ignore it
			if (isNone(acc) && c == firstCharCode && i > 0 && utf16StartsWith(substr, utf16Right(substr, i))) Some(i) else acc
		});
		either(stepM, substrLength);
	} else substrLength;
		for(0, \i -> i < utf16Len(str), \i -> {
			pos = utf16RangeIndexOf(str, substr, i, utf16Len(str));
			if (pos < 0) {
				intMax // break loop
			} else {
				fn(pos);
				pos + step
			}
		});
	if (substr == utf16Empty) \__ -> None() else \posM -> {
		lastPos = either(posM, -step) + step;
		pos = utf16RangeIndexOf(str, substr, lastPos, utf16Len(str));
		if (pos < 0) None() else pos
	}
}

utf16multipleSuperpositionIndexOfIterate(str : UTF16, substr : UTF16, allowSuperposition : bool, fn : (int) -> void) -> void {
	gen = utf16multipleSuperpositionIndexOfGenerate(str, substr, allowSuperposition);
	updateWhile(gen(None()), \pos -> {
		fn(pos);
		gen(Some(pos))
	})
}

utf16IndexOfM(str : UTF16, substr : UTF16) -> Maybe<int> {
	i = utf16IndexOf(s, s1);
	if (i < 0) None() else Some(i)
}

utf16MultipleIndexOf(str : UTF16, substr : UTF16) -> [int] {
	utf16multipleSuperpositionIndexOf(str, substr, false)
}

utf16MultipleIndexOfIterate(str : UTF16, substr : UTF16, fn : (int) -> void) -> [int] {
	utf16multipleSuperpositionIndexOfIterate(str, substr, false, fn)
}

utf16MultipleIndexOfGenerate(str : UTF16, substr : UTF16) -> (Maybe<int>) -> Maybe<int> {
	utf16multipleSuperpositionIndexOfGenerate(str, substr, false)
}

utf16multipleSuperpositionIndexOf(str : string, substr : string, allowSuperposition : bool) -> [int] {
	result = ref [];
	utf16multipleSuperpositionIndexOfIterate(str, substr, allowSuperposition, \pos -> refArrayPush(result, pos));
	^result
}

utf16Contains(str : UTF16, substr : UTF16) -> bool {
	strIndexOf(str, substr) >= 0
}

utf16ContainsAt(str : UTF16, index : int, substr : UTF16) -> bool {
	strRangeIndexOf(str, substr, index, index + strlen(substr)) == index;
}

utf16CountOf(text : UTF16, substr : UTF16) -> int {
	if (utf16Len(substr) == 0) 0
	else utf16CountOfHelper(text, substr, 0, 0)
}

// Don't use this directly
utf16CountOfHelper(text : UTF16, substr : UTF16, index : int, count : int) -> int {
	i = utf16RangeIndexOf(text, substr, index, strlen(text));
	if (i == -1) {
		count
	} else {
		utf16CountOfHelper(text, substr, i + strlen(substr), count + 1)
	}
}

utf16StartsWith(s, start) {
	startsWith(s.textUCS, start.textUCS)
}

utf16EndsWith(s, end) {
	endsWith(s.textUCS, end.textUCS)
}

utf16IsFirst(s : UTF16, charsToFind : UTF16) -> bool {
	l = utf16Len(s);
	if (l == 0) false
	else {
		first = utf16Substring(s, 0, 1);
		utf16IndexOf(charsToFind, first) != -1;
	}
}

utf16FindFirstOf(s : UTF16, charsToFind : UTF16) -> int {
	n = utf16Len(s);
	if (n == 0) -1
	else if (n == 1) {
		// Our string is a single character.
		// Let's look the other way instead: Can we find the character among the ugly, then we know the result is 0
		if (utf16IndexOf(chars, s) != -1) 0 else -1;
	} else {
		positions = generate(0, utf16Len(chars), \c -> utf16IndexOf(s, getCharAt(chars, c)));
		fold(positions, -1, \acc, p -> if (p == -1) acc else if (acc == -1) p else if (p < acc) p else acc);
	}
}

utf16FindFirstOfStrings(s : UTF16, stringsToFind : [UTF16]) -> Maybe<Pair<int, int>> {
	foldi(strings, None(), \i, acc : Maybe<Pair<int, int>>, st -> {
		if (st == "") {
			acc
		} else {
			p = utf16IndexOf(s, st);
			if (p == -1) acc else {
				switch (acc) {
					None(): Some(Pair(p, i));
					Some(pa): if (p < pa.first) Some(Pair(p, i)) else acc;
				}
			}
		}
	});
}

utf16LastIndexOfM(str : UTF16, substr : UTF16) -> Maybe<int> {
	i = utf16LastIndexOf(s, s1);
	if (i < 0) None() else Some(i)
}

utf16Substring(s : UTF16, start : int, length : int) -> UTF16 {
	utf16SubRange(s, start, start+length)
}

utf16Clone(s : UTF16) -> string {
	UTF16(s with textUCS2=cloneString(s.textUCS2))
}

utf16SubSmart(s : UTF16, start : int, length : int) -> UTF16 {
	if (start >= 0 && len > 0) {
		utf16Substring(s, start, len)
	} else {
		slen = utf16Len(s);
		trueStart = if (start >= 0) start else { ss = slen + start; if (ss >= 0) ss else 0; };
		trueLength = if (len > 0) len else slen + len - trueStart;

		utf16Substring(s, trueStart, trueLength)
	}
}

// These two are too complex for quick implementation, TODO: review and optimize.
array2ToUtf16(src : [?], delimiter : UTF16, fn : (elem : ?) -> UTF16) -> UTF16 {
	makeUTF16(a2s2(src, delimiter.textUCS2, \elem -> fn(elem).textUCS2))
}
utf16ToArray2(src : UTF16, delimiter : UTF16, fn : (elem : UTF16) -> ?) -> [?] {
	s2a2(src.textUCS2, delimiter.textUCS2, \elem -> fn(elem.textUCS2))
}

utf16Left(s, index) {
	utf16Substring(s, 0, index);
}

utf16Right(s, index) {
	l = utf16Len(s);
	if (index >= l) {
		"";
	} else {
		utf16Substring(s, index, l - index);
	}
}

utf16SubRange(s : UTF16, start : int, end : int) -> UTF16 {
	rangeUCS2 = ValueRange(posUTF16ToUCS2(s, start), endUCS2 = posUTF16ToUCS2(s, end));
	trees = remapUTF16Trees(s.posUTF2UCS, s.posUCS2UTF, rangeUCS2, -rangeUCS2.minValue, ValueRange(start, end), -start);
	UTF16(strSubRange(s.textUCS2, startUCS2, endUCS2), trees.first, trees.second)
}

// insertPos must be in [0..len(destString)]. Otherwise it is undefined behavior.
utf16Insert(destString : UTF16, insertedString : UTF16, insertPos : int) -> UTF16 {
	if (insertedString.textUCS2 == "")
		destString
	else {
		insertPosUCS2 = posUTF16ToUCS2(destString, insertPos);
		headTrees = Pair(
			filterTree(destString.posUTF2UCS, \utf, ucs -> utf < insertPos && ucs < insertPosUCS2),
			filterTree(destString.posUCS2UTF, \ucs, utf -> utf < insertPos && ucs < insertPosUCS2)
		);
		insertedTrees = remapUTF16Trees(
			Pair(insertedString.posUTF2UCS, insertedString.posUCS2UTF),
			ValueRange(0, intMax), insertPosUCS2, ValueRange(0, intMax), insertPos,
		);
		tailTrees = remapUTF16Trees(
			Pair(destString.posUTF2UCS, destString.posUCS2UTF),
			ValueRange(insertPosUCS2, intMax), strlen(insertedString.textUCS2),
			ValueRange(insertPos, intMax), utf16len(insertedString),
		);
		UTF16(
			strInsert(destString.textUCS2, insertedString.textUCS2, insertPosUCS2),
			mergeTrees(mergeTrees(headTrees.first, tailTrees.first), insertedTrees.first),
			mergeTrees(mergeTrees(headTrees.second, tailTrees.second), insertedTrees.second),
		)
	}
}

// Arguments must conform to the following: 0 <= start <= start+len <= length(s).
// Otherwise it is undefined behavior.
utf16Remove(s : UTF16, start : int, len : int) -> UTF16 {
	if (len == 0)
		s
	else {
		end = start+len;
		startUCS2 = posUTF16ToUCS2(s, start);
		endUCS2 = posUTF16ToUCS2(s, start);
		headTrees = Pair(
			filterTree(s.posUTF2UCS, \utf, ucs -> utf < start && ucs < startUCS2),
			filterTree(s.posUCS2UTF, \ucs, utf -> utf < start && ucs < startUCS2)
		);
		tailTrees = remapUTF16Trees(
			Pair(s.posUTF2UCS, s.posUCS2UTF),
			ValueRange(endUCS2, intMax), startUCS2-endUCS2,
			ValueRange(end, intMax), -len,
		);
		UTF16(
			strRemove(s.textUCS2, startUCS2, endUCS2-startUCS2),
			mergeTrees(headTrees.first, tailTrees.first),
			mergeTrees(headTrees.second, tailTrees.second)
		)
	}
}

utf16ToLowerCase(s : UTF16) -> UTF16 {
	// Assuming case change does not change the character storage size.
	UTF16(s with textUCS2=toLowerCase(s.textUCS2))
}

utf16ToUpperCase(s : UTF16) -> UTF16 {
	// Assuming case change does not change the character storage size.
	UTF16(s with textUCS2=toUpperCase(s.textUCS2))
}

utf16ToCapitalization(s : string) -> string {
	// Assuming case change does not change the character storage size.
	UTF16(s with textUCS2=toCapitalization(s.textUCS2))
}

utf16Replace(s : UTF16, old : UTF16, new : UTF16) -> string {
	utf16Replaces(s, [old, new])
}

utf16Replaces(s : UTF16, oldnew : [UTF16]) -> UTF16 {
	// Probably there is a better way to do it.
	// As an option: find all entries, compose an array of remapped tree pairs and then merge all together.
	makeUTF16(strReplaces(s.textUCS2, map(oldnew, \s -> s.textUCS2)))
}

utf16Format(s : UTF16, p : [UTF16]) -> string {
	utf16Replaces(s, concatA(foldi(reverseA(p), [], \i, st, par -> [makeUTF16("%" + i2s(length(p) - i)), par])))
}

utf16GetCharAt(s : UTF16, pos : int) -> UTF16 {
	posUCS2 = posUTF16ToUCS2(s, pos);
	code = getCharCodeAt(s.textUCS2, posUCS2);
	if (code>=0xD800 && code<0xDC00)
		UTF16(substring(s.textUCS2, posUCS2, 2), makeTree1(1, 2), makeTree1(2, 1))
	else
		UTF16(fromCharCode(code), makeTree(), makeTree())
}

utf16CombineSurrogates(code : [int]) -> int {
	bitOr(code[1], bitShl(bitAnd(code[0], 0x3FF), 10)) + 65536
}

utf16SeparateSurrogates(code : int) -> [int] {
	codeSkip = code - 0x10000;
	[
		bitOr(bitAnd(bitUshr(code, 10), 0x3FF), 0xDC00),
		bitOr(bitAnd(code, 0x3FF), 0xDC00)
	]
}

utf16GetCharCodeAt(s : UTF16, pos : int) -> UTF16 {
	posUCS2 = posUTF16ToUCS2(s, pos);
	code = getCharCodeAt(s.textUCS2, posUCS2);
	if (code>=0xD800 && code<0xDC00)
		utf16CombineSurrogates([code, getCharCodeAt(s.textUCS2, posUCS2+1)])
	else
		code
}

utf16FromCharCode(code : int) -> UTF16 {
	if (code < 0x10000)
		UTF16(if (code>=0xD800 && code<0xE000) "\uFFFF" else fromCharCode(code), makeTree(), makeTree())
	else {
		ucs2 = combineSurrogates(code);
		fromCharCode(ucs2[0]) + fromCharCode(ucs2[1]);
	}
}

utf16ToUtf8(s : UTF16) -> [int] {
	string2utf8(s.textUCS2)  // Works fine in JS target.
}

utf16ToA(s : UTF16) -> [int] {
	head = foldTree(s.posUTF2UCS, Pair(0, []), \utf, ucs, lastPosAndFragments -> {
		Pair(ucs, arrayPush(
			lastPosAndFragments.second,
			arrayPush(
				s2a(strSubRange(s.textUCS2, lastPosAndFragments.first, ucs-2)),
				utf16CombineSurrogates([getCharCodeAt(s.textUCS2, ucs-2), getCharCodeAt(s.textUCS2, ucs-1)])
			)
		))
	});
	concat(head.second, s2a(strRight(s.textUCS2, head.first)))
}

utf16IsDigit(s : UTF16) -> bool {
	isDigit(s.textUCS2)
}

utf16IsDigits(s : UTF16) -> bool {
	isDigits(s.textUCS2)
}

utf16IsDouble(s : UTF16) -> bool {
	isDouble(s.textUCS2)
}

utf16IsHexLetter(s : UTF16) -> bool {
	isHexLetter(s.textUCS2)
}

utf16IsHexDigit(s : UTF16) -> bool {
	isHexDigit(s.textUCS2)
}

utf16IsHexDigits(s : UTF16) -> bool {
	isHexDigits(s.textUCS2)
}

utf16IsBase64String(s : UTF16) -> bool {
	isBase64String(s.textUCS2)
}

// Only latin, otherwise we cannot call string library
utf16IsUpperLetter(s : UTF16) -> bool { isUpperLetter(s.textUCS2) }
utf16IsLowerLetter(s : UTF16) -> bool { isLowerLetter(s.textUCS2) }
utf16IsLetter(s : UTF16) -> bool { isLetter(s.textUCS2) }
utf16ContainsLetters(s : UTF16) -> bool { containsLetters(s.textUCS2) }

// Only basic spaces, potentially not enough just calling string library to support more, need to investigate.
utf16IsNotSpace(s : UTF16) -> bool { isNotSpace(s.textUCS2) };
utf16IsSpace(s : UTF16) -> bool { isSpace(s.textUCS2) };


intToUtf16(n : int) -> UTF16 { UTF16(i2s(n), makeTree(), makeTree()) }
double2ToUtf16(n : double) -> UTF16 { UTF16(d2s(n), makeTree(), makeTree()) }
utf16ToBool(s : UTF16) -> bool { s2b(s.textUCS2) }

utf16formatHex(d : int) -> UTF16 {
	UTF16(formatHex(d), makeTree(), makeTree())
}

utf16ParseBin(bin : UTF16) -> int {
	parseBin(bin.textUCS2)
}

utf16ParseHex(s : UTF16) -> int {
	parseHex(s.textUCS2)
}

utf16FormatColor(d : int) -> UTF16 {
	UTF16(formatColor(d), makeTree(), makeTree())
}

utf16FromDigit(c : UTF16) -> int {
	fromDigit(c.textUCS2)
}

utf16Repeat(s : UTF16, cnt : int) -> UTF16 {
	if (cnt > 0) {
		ucslen = strlen(s.textUCS2);
		utflen = utf16Len(s);
		treesOnce = Pair(s.posUTF2UCS, s.posUCS2UTF);
		trees = updateWhile(
			Triple(treesOnce, cnt, 1),
			\t -> if (t.second <= 1) None()
			else {
				offsettedTrees = remapUTF16Trees(t.first, ValueRange(0, intMax), ucslen*t.third, ValueRange(0, intMax), utflen*t.third);
				twice = Pair(
					mergeTree(t.first.first, offsettedTrees.first),
					mergeTree(t.first.second, offsettedTrees.second),
				);
				if (1 == (t.second % 2)) {
					offsettedTreesOnce = remapUTF16Trees(treesOnce, ValueRange(0, intMax), ucslen*t.third*2, ValueRange(0, intMax), utflen*t.third*2);
					Pair(
						Pair(
							mergeTree(twice.first, offsettedTreesOnce.first),
							mergeTree(twice.second, offsettedTreesOnce.second),
						),
						cnt/2, t.third*2 + 1
					)
				} else Pair(twice, cnt/2, t.third * 2)
			}
		)
		UTF16(
			strRepeat(s.textUCS2, cnt),
			trees.first.first,
			trees.first.second,
		)
	} else emptyUTF16
}

utf16LPad(s : UTF16, c : UTF16, l : int) -> UTF16 {
	cLen = utf16Len(c);
	padLen = l-utf16Len(s);
	if (padLen > 0) {
		utf16Concat(utf16Concat(utf16Repeat(c, padLen/cLen), utf16Left(c, padLen%cLen)), s)
	} else {
		s;
	}
}

utf16RPad(s : UTF16, c : UTF16, l : int) -> UTF16 {
	cLen = utf16Len(c);
	padLen = l-utf16Len(s);
	if (padLen > 0) {
		utf16Concat(s, utf16Concat(utf16Right(c, cLen-padLen%cLen), utf16Repeat(c, padLen/cLen)))
	} else {
		s;
	}
}

utf16Fold(s : UTF16, a : ?, f : (acc : ?, c : int) -> ?) -> ? {
	utf16Foldi(s, a, \__, acc, c -> f(acc, c))
}
utf16CharsFold(s : UTF16, a : ? , f : (acc : ?, char : UTF16) -> ?) -> ? {
	utf16CharsFoldi(s, a, \__, acc, c -> f(acc, c))
}
utf16Foldr(s : UTF16, a : ?, f : (acc : ?, c : int) -> ?) -> ? {
	utf16Foldri(s, a, \__, acc, c -> f(acc, c))
}
utf16CharsFoldr(s : UTF16, a : ? , f : (acc : ?, char : UTF16) -> ?) -> ? {
	utf16CharsFoldri(s, a, \__, acc, c -> f(acc, c))
}
utf16Foldi(s : UTF16, a : ?, f : (i : int, acc : ?, c : int) -> ?) -> ? {
	strFoldi(s.textUCS2, Triple(a, 0, 0), \i, acc, c -> {
		if (0xD800 <= c && c < 0xDC00)
			Triple(acc with third=c)
		else if (0 != acc.third)
			Triple(f(acc.second, acc.first, utf16CombineSurrogates([acc.third, c])), acc.second+1, 0)
		else 
			Triple(f(acc.second, acc.first, c), acc.second+1, 0)
	})
}
utf16CharsFoldi(s : UTF16, a : ? , f : (i : int, acc : ?, char : UTF16) -> ?) -> ? {
	stringCharsFoldi(s.textUCS2, Triple(a, 0, ""), \i, acc, c -> {
		if ("\uD800" <= c && c < "\uDC00")
			Triple(acc with third=c)
		else if ("" != acc.third)
			Triple(f(acc.second, acc.first, UTF16(acc.third+c, makeTree1(1, 2), makeTree1(2, 1))), acc.second+1, "")
		else 
			Triple(f(acc.second, acc.first, UTF16(c, makeTree(), makeTree())), acc.second+1, "")
	})
}
utf16Foldri(s : UTF16, a : ?, f : (i : int, acc : ?, c : int) -> ?) -> ? {
	strFoldri(s.textUCS2, Triple(a, 0, 0), \i, acc, c -> {
		if (0xDC00 <= c && c < 0xE000)
			Triple(acc with third=c)
		else if (0 != acc.third)
			Triple(f(acc.second, acc.first, utf16CombineSurrogates([c, acc.third])), acc.second+1, 0)
		else 
			Triple(f(acc.second, acc.first, c), acc.second+1, 0)
	})
}
utf16CharsFoldri(s : UTF16, a : ? , f : (i : int, acc : ?, char : UTF16) -> ?) -> ? {
	stringCharsFoldri(s.textUCS2, Triple(a, 0, ""), \i, acc, c -> {
		if ("\uDC00" <= c && c < "\uE000")
			Triple(acc with third=c)
		else if ("" != acc.third)
			Triple(f(acc.second, acc.first, UTF16(c+acc.third, makeTree1(1, 2), makeTree1(2, 1))), acc.second+1, "")
		else 
			Triple(f(acc.second, acc.first, UTF16(c, makeTree(), makeTree())), acc.second+1, "")
	})
}

utf16Trim(s : UTF16) -> UTF16 {
	utf16Trim2(s, UTF16(" ", makeTree(), makeTree()))
}

utf16LTrim(s : UTF16) -> UTF16 {
	utf16LTrim2(s, UTF16(" ", makeTree(), makeTree()))
}

utf16RTrim(s : UTF16) -> UTF16 {
	utf16RTrim2(s, UTF16(" ", makeTree(), makeTree()))
}

// Flagged trim
utf16FTrim2(s : UTF16, ugly : UTF16, start : bool, end : bool) -> UTF16 {
	l = utf16Len(s)
	endPos = either(if (end) utf16CharsFoldri(
		s, None(),
		\i, pos, char -> if (isSome(pos)) pos
		else if (utf16Contains(ugly, char)) None()
		else Some(i)
	) else None(), l);
	startPos = either(if (start) utf16CharsFoldi(
		s, None(),
		\i, pos, char -> if (isSome(pos)) pos
		else if (utf16Contains(ugly, char)) None()
		else Some(i+1)
	) else None(), 0)
	utf16SubRange(s, startPos, endPos)
}

utf16Trim2(s : UTF16, ugly : UTF16) -> UTF16 {
	utf16FTrim2(s, ugly, true, true)
}

utf16LTrim2(s : UTF16, ugly : UTF16) -> UTF16 {
	utf16FTrim2(s, ugly, true, false)
}

utf16RTrim2(s : UTF16, ugly : UTF16) -> UTF16 {
	utf16FTrim2(s, ugly, false, true)
}
