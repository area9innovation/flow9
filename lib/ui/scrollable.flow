// Â© Copyright 2011 Area9 Innovation. All rights reserved

import dragdrop;
import ui/slider;
import ui/focus;
import ui/scrollable_style;

// TODO: maybe 'show scrollbars always' flag should be implemented

export {
	// minimumWidth & minimumHeight now include space for scrollbars
	Scrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form) -> Form;
	VerticalScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form) -> Form;
	HorizontalScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form) -> Form;
	Scrollable2(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, showFn : (Form, Form, Form) -> Form, scrollbarGap : bool) -> Form;

	// helper: scrollable with content alignment
	ScrollableA(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, form : Form) -> Form;
	ScrollableB(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, showHor : DynamicBehaviour<int>, showVert : DynamicBehaviour<int>, form : Form) -> Form;
	ScrollableBStyled(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, showHor : DynamicBehaviour<int>, showVert : DynamicBehaviour<int>, form : Form, style : ScrollableStyle) -> Form;
	ScrollableA2(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, form : Form, showFn : (Form, Form, Form) -> Form, scrollbarGap : bool) -> Form;

	// Easy shorthand for just wrapping a form in scrollbars if required
	ScrollAvailable(form : Form) -> Form;
	ScrollAvailableStyled(form : Form, style : ScrollableStyle) -> Form;
	VerticalScrollAvailable(form : Form) -> Form;
	VerticalScrollAvailableStyled(form : Form, style : ScrollableStyle) -> Form;

	styledScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, style : ScrollableStyle, disableArrowsHandler : bool) -> Form;
	VerticalStyledScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, style : ScrollableStyle, disableArrowsHandler : bool) -> Form;

	//You can turn on and turn off scrollbars when that is needed by using ScrollB behaviours
	ScrollableE(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, vScrollB : Behaviour<bool>, hScrollB : Behaviour<bool>, form : Form) -> Form;

	getHScrollHeight(style : ScrollableStyle) -> double;
	getVScrollWidth(style : ScrollableStyle) -> double;

	setUseMobile(v : bool) -> void;

	standartScrollableStyleWithoutGap : ScrollableStyle;
	standartScrollableStyle : ScrollableStyle;
	paamScrollableStyleWithoutGap : ScrollableStyle;

	// same as above but now with trigger to turn off wheel handler. must be removed when z-order for mouse will wheel become available
	doStyledScrollableCustom(
		x : DynamicBehaviour<double>, y : DynamicBehaviour<double>,
		minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>,
		form : Form, style : ScrollableStyle, vscroll: bool, hscroll: bool, disableArrowsHandler : bool,
		showFn : (Form, Form, Form) -> Form,
		horSizeFn : (double, bool) -> double, vertSizeFn : (double, bool) -> double,
		panGestureHandle : bool,
		scrollbarGap : bool
	) -> Form;

	mainWindowScrollEnabled : DynamicBehaviour<bool>;

	commonShowFn(cForm : Form, hBar : Form, vBar : Form) -> Form;
	commonSizeFn(dimension : double, vis : bool) -> double;
}

mainWindowScrollEnabled = make(true);

showHorizontalScroll = make(0);
showVerticalScroll = make(0);

useMobile = ref false;

setUseMobile(v : bool) {
	useMobile := v;
}

standartScrollableStyle = {
	scrollHoverPressedBrush = [Fill(0xadacac)];
	scrollNormalBrush = [Fill(0xbebdbd)];
	scrollBGBrush = [Fill(0xe2e1e1)];
	ScrollableStyle(
		\w, h, style -> { customRoundedRect(w, h, 5.0, 5.0, 5.0, 5.0, style); },
		[\frm, w, h, style -> {
			Empty()
		}],
		scrollNormalBrush,
		scrollHoverPressedBrush,
		scrollHoverPressedBrush,
		scrollBGBrush,
		0.0,	// buttonWidth
		0.0,	// buttonHeight
		10.0,	// vScrollWidth
		10.0,	// hScrollHeight
		5.0,	// edge gap
		8.0 	// border gap
	)
}

standartScrollableStyleWithoutGap = {
	scrollHoverPressedBrush = [Fill(0xadacac)];
	scrollNormalBrush = [Fill(0xbebdbd)];
	scrollBGBrush = [Fill(0xe2e1e1)];
	ScrollableStyle(
		\w, h, style -> { customRoundedRect(w, h, 5.0, 5.0, 5.0, 5.0, style); },
		[\frm, w, h, style -> {
			Empty()
		}],
		scrollNormalBrush,
		scrollHoverPressedBrush,
		scrollHoverPressedBrush,
		scrollBGBrush,
		0.0,	// buttonWidth
		0.0,	// buttonHeight
		10.0,	// vScrollWidth
		10.0,	// hScrollHeight
		0.0,	// edge gap
		0.0 	// border gap
	)
}

paamScrollableStyleWithoutGap = {
	scrollHoverPressedBrush = [Fill(0xd3d1d1)];
	scrollNormalBrush = [Fill(0xe3e2e2)];
	scrollBGBrush = [Fill(white)];
	ScrollableStyle(
		\w, h, style -> { Rectangle(w, h, style); },
		[\frm, w, h, style -> {
			Empty()
		}],
		scrollNormalBrush,
		scrollHoverPressedBrush,
		scrollHoverPressedBrush,
		scrollBGBrush,
		0.0,	// buttonWidth
		0.0,	// buttonHeight
		10.0,	// vScrollWidth
		10.0,	// hScrollHeight
		0.0,	// edge gap
		0.0 	// border gap
	)
}



ScrollAvailable(form) {
	awh = makeWH();

	aw = make(0.);
	ah = make(0.);

	// stalled = \a -> throttle(a, 100.0);	// causes problems with probes (eg. #32549)
	// stalled = \a -> stall(a, 100);		// worked good
	// stalled = idfn;						// working good (quick-tested)

	x = make(0.0);
	y = make(0.0);

	Constructor(
		Size2(awh,
			Inspect(
				[IAvailable2(awh)],
				Scrollable(x, y, aw, ah, form)
			)
		),
		\ ->
			subscribe(awh, \wh -> {
				nextDistinct(aw, wh.width);
				nextDistinct(ah, wh.height);
			})
	)
}

ScrollAvailableStyled(form : Form, style : ScrollableStyle) -> Form {
	awh = makeWH();

	aw = make(0.);
	ah = make(0.);

	// stalled = \a -> throttle(a, 100.0);	// causes problems with probes (eg. #32549)
	// stalled = \a -> stall(a, 100);		// worked good
	// stalled = idfn;					// working good (quick-tested)

	x = make(0.0);
	y = make(0.0);

	Constructor(
		Size2(awh,
			Inspect(
				[IAvailable2(awh)],
				styledScrollable(x, y, aw, ah, form, style, false)
			)
		),
		\ ->
			subscribe(awh, \wh -> {
				nextDistinct(aw, wh.width);
				nextDistinct(ah, wh.height);
			})
	)
}

VerticalScrollAvailableStyled(form : Form, style : ScrollableStyle) {
	awh = makeWH();

	aw = make(0.);
	ah = make(0.);

	//replaced with timer to fix math probes remediations
	// stalled = \fn -> timer(100, fn);

	x = make(0.0);
	y = make(0.0);

	Constructor(
		Size2(awh,
			Inspect(
				[IAvailable2(awh)],
				doStyledScrollable(x, y, aw, ah, form, style, true, false, false)
			)
		),
		\ ->
			subscribe(awh, \wh -> {
				nextDistinct(aw, wh.width);
				nextDistinct(ah, wh.height);
			})
	)
}

VerticalScrollAvailable(form) {
	VerticalScrollAvailableStyled(form, standartScrollableStyleWithoutGap);
}

ScrollableA(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, form : Form) -> Form {
	width = make(0.0);
	height = make(0.0);

	awh = makeWH();

	Constructor(
		Scrollable(x, y, minimumWidth, minimumHeight,
			Available2(awh,
				Align(halign, valign,
					Inspect([Width(width), Height(height)], form)
				)
			)
		), \ -> {
			showHorizontal = make(0);
			showVertical = make(0);
			ush = showScrollBar(width, height, minimumWidth, minimumHeight, false, showHorizontal);
			usv = showScrollBar(height, width, minimumHeight, minimumWidth, false, showVertical);
			szX = select4u(showHorizontal, showVertical, minimumWidth, width, \h, v, _h, _ph -> {
				if (v == 1) { if (h==1) _ph else max(_h - 10.0, 0.0); } else { max(_h, _ph) }
			});
			szY = select4u(showHorizontal, showVertical, minimumHeight, height, \h, v, _h, _ph -> {
				if (h == 1) { if (v==1) _ph else max(_h - 10.0, 0.0); } else { max(_h, _ph) }
			});
			u1 = connectSelect2u(szX.first, szY.first, awh, \w, h -> WidthHeight(w, h));
			us = [u1, ush, usv, szX.second, szY.second];
			\ -> {
				applyall(us);
			}
		}
	)
}

ScrollableA2(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, form : Form, showFn : (Form, Form, Form) -> Form, scrollbarGap : bool) {
	Scrollable2(x, y, minimumWidth, minimumHeight, Align(halign, valign, form), showFn, scrollbarGap)
}

ScrollableB(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, showHor : DynamicBehaviour<int>, showVert : DynamicBehaviour<int>, form : Form) -> Form {
	ScrollableBStyled(x, y, minimumWidth, minimumHeight, halign, valign, showHor, showVert, form, standartScrollableStyleWithoutGap)
}

ScrollableBStyled(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, halign : double, valign : double, showHor : DynamicBehaviour<int>, showVert : DynamicBehaviour<int>, form : Form, style : ScrollableStyle) -> Form {
	Constructor(
		styledScrollable(x, y, minimumWidth, minimumHeight, Align(halign, valign, form), style, false),
		\ -> {
			u1 = connect(showHorizontalScroll, showHor);
			u2 = connect(showVerticalScroll, showVert);
			\ -> {
				u1();
				u2();
			}
		}
	)
}

// Fundamentally, you have to provide a minimum width and height to this element, because otherwise
// the optimal is to make it 0,0 size in many situations.

Scrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form) -> Form {
	styledScrollable(x, y, minimumWidth, minimumHeight, form, standartScrollableStyleWithoutGap, false);
}

Scrollable2(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, showFn : (Form, Form, Form) -> Form, scrollbarGap : bool) {
	doStyledScrollableCustom(x, y, minimumWidth, minimumHeight, form, standartScrollableStyleWithoutGap, true, true, false,
		showFn, commonSizeFn, commonSizeFn, true, scrollbarGap
	);
}

VerticalScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form) -> Form {
	doStyledScrollable(x, y, minimumWidth, minimumHeight, form, standartScrollableStyleWithoutGap, true, false, false);
}

HorizontalScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form) -> Form {
	doStyledScrollable(x, y, minimumWidth, minimumHeight, form, standartScrollableStyleWithoutGap, false, true, false);
}

// horSizeFn and vertSizeFn for calcs crop Size. Input: minimumSize, oppositeScrollBarShown; output: cropSize
// showFn. Input: croppedForm, horScrollBar, vertScrollBar.

doStyledScrollableCustom(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, style : ScrollableStyle, vscroll: bool, hscroll: bool, disableArrowsHandler : bool, showFn : (Form, Form, Form) -> Form, horSizeFn : (double, bool) -> double, vertSizeFn : (double, bool) -> double, panGestureHandle : bool, scrollbarGap : bool) {
	width = make(0.0);
	height = make(0.0);
	edgeGap = style.edgeGap;
	borderGap = style.borderGap;
	widthHeight = makeWH();

	fnOnVWeel = ref \__ -> false;
	fnOnHWeel = ref \__ -> false;

	// Has permanent subscriptions, so all incoming data feeds must disconnect
	showHorizontal = make(0);
	showVertical = make(0);

	// These subscribe to showHorizontal/showVertical; only call once!
	horizontalScrollbar = if (hscroll) Border(edgeGap, 0.0, edgeGap, borderGap, makeHScrollbar(minimumWidth, width, x, fnOnHWeel, style, showHorizontal)) else Empty();
	verticalScrollbar = if (vscroll) Border(0.0, edgeGap, borderGap, edgeGap, makeVScrollbar(minimumHeight, height, y, fnOnVWeel, style, showVertical)) else Empty();

	ctrlPressed = make(0);

	draggingScrollable = ref false;
	dragX = ref 0.0;
	dragY = ref 0.0;

	hwh = make(WidthHeight(0.0, getHScrollHeight(style) + borderGap));
	vwh = make(WidthHeight(getVScrollWidth(style) + borderGap, 0.0));

	cx = make(0.0);
	cy = make(0.0);
	cw = make(0.0);
	ch = make(0.0);

	awh = makeWH();

	accessChildSelectedFn = \pos, wh -> {
		controlTopEdge = pos.y;
		controlBottomEdge = pos.y + wh.height;
		controlLeftEdge = pos.x;
		controlRightEdge = pos.x + wh.width;

		scrollViewPortTopEdge = getValue(cy);
		scrollViewPortBottomEdge = getValue(cy) + getValue(ch);
		scrollViewPortLeftEdge = getValue(cx);
		scrollViewPortRightEdge = getValue(cx) + getValue(cw);

		if (controlBottomEdge > scrollViewPortBottomEdge) nextDistinct(y, getValue(y) + (controlBottomEdge - scrollViewPortBottomEdge))
		else if (controlTopEdge < scrollViewPortTopEdge) nextDistinct(y, getValue(y) - (scrollViewPortTopEdge - controlTopEdge));

		if (controlRightEdge > scrollViewPortRightEdge) nextDistinct(x, getValue(x) + (controlRightEdge - scrollViewPortRightEdge))
		else if (controlLeftEdge < scrollViewPortLeftEdge) nextDistinct(x, getValue(x) - (scrollViewPortLeftEdge - controlLeftEdge));
	}

	accessibleForm = Access([AccessChildSelected(accessChildSelectedFn)], form);
	isAccessible = make(false);

	interactiveForm = Interactive([
		KeyDown2(\handled, ke -> {
			if (!handled && !hasKeyboardFocus()) {
				sh = getValue(showHorizontal) == 1;
				sv = getValue(showVertical) == 1;
				if (ke.keycode == 17 && getValue(ctrlPressed) == 0) { // ctrl
					next(ctrlPressed, 1);
					false;
				} else if (!disableArrowsHandler && sh && ke.utf == "left") {
					nextDistinct(x, getValue(x) - 10.0);
					true;
				} else if (!disableArrowsHandler && sh && ke.utf == "right") {
					nextDistinct(x, getValue(x) + 10.0);
					true;
				} else if (!disableArrowsHandler && sv && ke.utf == "up") {
					nextDistinct(y, getValue(y) - 10.0);
					true;
				} else if (!disableArrowsHandler && sv && ke.utf == "down") {
					nextDistinct(y, getValue(y) + 10.0);
					true;
				} else if (sv && ke.keycode == 33) { // page up
					nextDistinct(y, getValue(y) - 60.0);
					true;
				} else if (sv && ke.keycode == 34) { // page down
					nextDistinct(y, getValue(y) + 60.0);
					true;
				} else {
					false;
				}
			} else {
				handled;
			}
		}),
		KeyUp2(\handled, ke -> {
			if (ke.keycode == 17) { // ctrl
				next(ctrlPressed, 0);
			}
			handled;
		}),
		MouseDown2(\handled, mouseInfo -> {

			if (mobile && ^useMobile /*&& !cpp*/ || !handled) {
				if (mouseInfo.inside()) {
					draggingScrollable := true;
					dragX := mouseInfo.x;
					dragY := mouseInfo.y;
				} else {
					draggingScrollable := false;
				}
			}
			handled
		}),
		MouseUp2(\handled, gm -> {
			draggingScrollable := false;
			handled;
		}),
		// We do not need the implicit hittest here
		IgnoreHitTest(MouseMove2(\handled, gm -> {
			if (!handled && ^draggingScrollable && getValue(dragging) == 0) {
				mouseInfo = gm();
				dx = if (hscroll) (mouseInfo.x - ^dragX) * if (mobile) 2.0 else 1.0 else 0.0;
				dy = if (vscroll) (mouseInfo.y - ^dragY) * if (mobile) 2.0 else 1.0 else 0.0;
				nextDistinct(x, getValue(x) - dx);
				nextDistinct(y, getValue(y) - dy);
				dragX := mouseInfo.x;
				dragY := mouseInfo.y;
			}
			handled;
		})),
		FineGrainMouseWheel2(\h, mi -> {
			info = mi();
			if (!h && info.inside) {
				dyh = if (info.dy != 0.0) ^fnOnVWeel(info.dy) else false;
				dxh = if (info.dx != 0.0) ^fnOnHWeel(info.dx) else false;
				dyh || dxh
			} else {
				h
			}
		})
		],

		showFn(
			Crop(
				cx, cy, cw, ch,
				Inspect([Width(width), Height(height), ISize(widthHeight)],
					Background( [Fill(red),FillOpacity(0.0)], // always be notified on MouseWheel event
						Available2(
							awh,
							// if (^accessibilityEnabled) Select(isAccessible, \isa -> if (isa) accessibleForm else form) else form
							if (^accessibilityEnabled) accessibleForm else form
						)
					)
				)
			),
			Visible(showHorizontal, Size2(hwh, horizontalScrollbar)),
			Visible(showVertical, Size2(vwh, verticalScrollbar))
		)

	);

	Constructor(
		interactiveForm,
		\ -> {
			u9 = if (hscroll) showScrollBar(width, height, minimumWidth, minimumHeight, scrollbarGap, showHorizontal) else nop;
			u10 = if (vscroll) showScrollBar(height, width, minimumHeight, minimumWidth, scrollbarGap, showVertical) else nop;

			u7 = connectSelect2u(x, showHorizontal, cx, \x_, h -> x_ * i2d(h)); // crop only if greater

			u8 = connectSelect2u(y, showVertical, cy, \y_, v -> y_ * i2d(v));

			u12 = if (^accessibilityEnabled) {
				isa0 = select2u(showHorizontal, showVertical, \h, v -> v == 1 || h == 1);
				isa = throttle2u(isa0.first, 1);
				Pair(connect(isa.first, isAccessible), \ -> {isa0.second(); isa.second();})
			} else Pair(nop, nop);

			u1 = subscribe(showHorizontal, \v -> {
				if (getValue(widthHeight).width != 0.0 && getValue(width) != getValue(minimumWidth)) nextDistinct(showHorizontalScroll, v);
			});
			u2 = subscribe(showVertical, \v -> {
				if (getValue(widthHeight).height != 0.0 && getValue(height) != getValue(minimumHeight))	nextDistinct(showVerticalScroll, v);
			});

			u5 = connectSelect2u(showVertical, minimumWidth, cw, \v, w -> max(0.0, horSizeFn(w, v == 1 && vscroll && !mobile)));
			u6 = connectSelect2u(showHorizontal, minimumHeight, ch, \v, h -> max(0.0, vertSizeFn(h, v == 1 && hscroll && !mobile)));

			u3 = connectSelectu(cw, hwh, \xs -> WidthHeight(xs, getHScrollHeight(style) + borderGap));
			u4 = connectSelectu(ch, vwh, \ys -> WidthHeight(getVScrollWidth(style) + borderGap, ys));

			avail = select4u(minimumWidth, minimumHeight, showHorizontal, showVertical, \mw, mh, sh, sv -> {
					WidthHeight(
						if (mobile) mw else max(mw - 10.0 * i2d(sv), 0.0),
						if (mobile) mh else max(mh - 10.0 * i2d(sh), 0.0)
					)
				});

			throttledAWH = throttle2u(avail.first, 50);
			u11 = connect(throttledAWH.first, awh);

			us = [
				u9, u10, u7,
				u8, u1, u2, u5, u6, u3, u4, avail.second, u11,
				u12.second, throttledAWH.second
			];
			\ -> { applyall(us) }
		}
	);
}

doStyledScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, style : ScrollableStyle, vscroll: bool, hscroll: bool, disableArrowsHandler : bool) {
	doStyledScrollableCustom(x, y, minimumWidth, minimumHeight, form, style, vscroll, hscroll, disableArrowsHandler,
		commonShowFn, commonSizeFn, commonSizeFn, true, true
	);
}

ScrollableE(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, vScrollB : Behaviour<bool>, hScrollB : Behaviour<bool>, form : Form){
	Select2(vScrollB, hScrollB, \vsEnabled, hsEnabled -> doStyledScrollable(x, y, minimumWidth, minimumHeight, form, standartScrollableStyleWithoutGap, vsEnabled, hsEnabled, false));
}

styledScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, style : ScrollableStyle, disableArrowsHandler : bool) {
	doStyledScrollable(x, y, minimumWidth, minimumHeight, form, style, true, true, disableArrowsHandler);
}


VerticalStyledScrollable(x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, minimumWidth : Behaviour<double>, minimumHeight : Behaviour<double>, form : Form, style : ScrollableStyle, disableArrowsHandler : bool) {
	doStyledScrollable(x, y, minimumWidth, minimumHeight, form, style, true, false, disableArrowsHandler);
}


// return values: 0 - scrollbar isn't visible, 1 - visible
showScrollBar(dimention : Behaviour<double>, oppositeDimention : Behaviour<double>, availDimention : Behaviour<double>, availOppositeDimention : Behaviour<double>, scrollbarGap : bool, connectTo : DynamicBehaviour<int>) -> () -> void {
	connectSelect4u(dimention, oppositeDimention, availDimention, availOppositeDimention, connectTo, \d, o, ad, ao -> {

		gapVal = if (scrollbarGap) 10.0 else 0.0; // #39852

		oppositeScroll = o - ao >= 2.0;
		if (oppositeScroll) {
			if (d - (ad - gapVal) >= 2.0) 1 else 0
		} else {
			if (d - ad >= 2.0) 1 else 0
		}
	});
}

scrollArrowStyle = [ Fill(0xFFFFFF) ];

scrollButton(frm : Form, width : Behaviour<double>, height : Behaviour<double>, fn : () -> void, scStyle : ScrollableStyle, buttonNumber : int) -> Form {
	hover = make(0);
	press = make(0);

	getScrollButton = if (length(scStyle.scrollButtonFns) > buttonNumber) scStyle.scrollButtonFns[buttonNumber]
	else {
		if (length(scStyle.scrollButtonFns) > 0)  scStyle.scrollButtonFns[0]
		else \fr, w, h, style -> {
			Group([
				Select2(w, h, \cw, ch -> bevelRoundRect(cw, ch, 0.0, 0.0, 0.0, 0.0, true, 3.0, style)),
				Available(w, h, Align(0.5, 0.5, frm))
			])
		}
	};

	look = \style -> {
		getScrollButton(frm, width, height, style);
	};

	repeatInterval = 150;
	repeatClick = ref nop;

	repeatClick := \ -> {
		if (getValue(press) == 1) {
			fn();
			timer(repeatInterval, ^repeatClick);
		}
	}

	Interactive([
		MouseClick(\gm -> {
			nextDistinct(press, 1);
			^repeatClick();
		}),
		MouseUp(\gm -> {
			mouseInfo = gm();
			nextDistinct(press, 0);
			if (mouseInfo.inside) {
				fn();
				true
			} else false
		}),
		RollOver( \gm -> {nextDistinct(hover, 1)}),
		RollOut( \gm -> {nextDistinct(hover, 0)})
		],
		Select2(hover, press, \h1, p -> {
			if (p == 1) look(scStyle.scrollPressedBrush)
			else if (h1 == 0) look(scStyle.scrollBrush)
			else look(scStyle.scrollHoverBrush)
		})
	);
};

scrollHover(width : Behaviour<double>, height : Behaviour<double>, scStyle : ScrollableStyle) -> Form {
	hover = make(0);

	look = \style -> Select2(width, height, \w, h -> scStyle.scrollHoverFn(w, if (h > getStageHeight()) getHScrollHeight(scStyle) else h, style));

	Interactive([
		RollOver( \gm -> {nextDistinct(hover, 1)}),
		RollOut( \gm -> {nextDistinct(hover, 0)})
		],
		Select(hover, \h1 -> {
			if (h1 == 0) look(scStyle.scrollBrush)
			else look(scStyle.scrollHoverBrush)
		})
	);
};

makeVScrollbar(minHeight : Behaviour<double>, height: Behaviour<double>, bigpos : DynamicBehaviour<double>, onWheel : ref (double) -> bool, style : ScrollableStyle, visible : Behaviour<int>) {
	vScrollW = getVScrollWidth(style);
	width = const(vScrollW);
	dragHeight = make(0.0);

	// arrow button height
	buttonHeight = const(style.buttonHeight);

	// the whole scroller construct height
	componentHeight = make(0.0);

	// internal scrolling position
	pos = make(getValue(bigpos));//select3(bigheight, actualH, bigpos, \bh, ah, bp -> { bp * ah / bh });// make(0.0);

	buttonStyle = make(0x81b4a4);
	internalUpdate = ref false;

	scrollHeight = make(0.0);
	actualH = make(0.0);

	visComponentHeight = make(0.);
	visDragHeight = make(0.);

	Constructor(
		Group([
			// Calculate scroller height. It will fill the whole available area.
			Inspect([AvailableHeight(componentHeight)], Empty()),
			Select(visComponentHeight, \h -> style.scrollHoverFn(getValue(width), h, style.scrollBackgroundBrush)),
			// make the content
			Lines([
				scrollButton(
					Graphics([ MoveTo(2.5, 0.0), LineTo(5.0, 3.0), LineTo(0.0, 3.0), ClosePath() ],
						scrollArrowStyle
					),
					width,
					buttonHeight,
					\ -> next(pos, max(getValue(pos) - 5.0, 0.0)),
					style,
					0
				),
				Group([
					Select(scrollHeight, \h -> Fixed(0.0, h)),
					Slider(
						make(0.0), pos,
						make(0.0), actualH,
						scrollHover(
							width,
							visDragHeight,
							style
						),
						[SnapOnClick(false), SliderEnabled(const(!mobile))]
					)
				]),
				scrollButton(
					Graphics([ MoveTo(0.0, 0.0), LineTo(5.0, 0.0), LineTo(2.5, 3.0), ClosePath() ],
						scrollArrowStyle
					),
					width,
					buttonHeight,
					\ -> next(pos, min(getValue(pos) + 5.0, getValue(actualH) )),
					style,
					2
				)
			])
		]),
		\ -> {
			isVisible0 = selectu(visible, \v -> v != 0);
			isVisible = throttle2u(isVisible0.first, 5);
			visComponentHeight0 = transistoru(isVisible.first, componentHeight);
			visDragHeight0 = transistoru(isVisible.first, dragHeight);
			uns5 = connect(visComponentHeight0.value, visComponentHeight);
			uns6 = connect(visDragHeight0.value, visDragHeight);

			u0 = getScrollbarHandleSize(minHeight, height, dragHeight);

			// scroll area height
			uns0 = connectSelect2u(componentHeight, buttonHeight, scrollHeight, \h, bh -> max(h - 2.0 * bh, 0.0));
			uns4 = connectSelect2u(scrollHeight, dragHeight, actualH, \s, d -> max(s - d, 0.0));

			bigheight = select2u(height, componentHeight, \h, ch -> max(h - ch, 0.0));

			uns1 = subscribe(bigpos, \p -> {
				if (!^internalUpdate) {
					v = if (equalDoubles(getValue(bigheight.first), 0.0)) { // prevent division by zero
							0.0
						} else {
							p * getValue(actualH) / getValue(bigheight.first);
						};
					ah = getValue(actualH);
					if (ah != 0.0) {
						// next used instead of nextDistinct, because in case of nextDistinct
						// ISlider is not recieving an update in some cases.
						// Same in subscribe(onWheel...
						next(pos, forceRange(v, 0.0, ah));
					}
				}
			});

			outpos = select3u(bigheight.first, actualH, pos, \bh, ah, p -> {
				if (equalDoubles(ah, 0.0)) {
					p
				} else {
					bh * p / ah
				}
			});

			uns2 = subscribe(outpos.first, \p -> {
				internalUpdate := true;
				nextDistinct(bigpos, p);
				internalUpdate := false;
			});

			onWheel := \delta -> {
				prevV = getValue(pos);
				v = if (equalDoubles(getValue(bigheight.first), 0.0)) { // prevent division by zero
						prevV - 0.0
					} else {
						prevV - getValue(componentHeight) * getValue(actualH) / getValue(bigheight.first) / 10.0 * delta
					};
				ah = getValue(actualH);
				newV = forceRange(v, 0.0, ah);

				if (ah != 0.0) {
					next(pos, newV);
				}

				newV != prevV && ah != 0.0
			};

			us = [
				u0, uns0, uns4,
				bigheight.second, uns1, outpos.second, uns2, uns4, uns5, uns6, visDragHeight0.dispose, visComponentHeight0.dispose, isVisible.second, isVisible0.second,
			];

			\ -> { onWheel := \__ -> false; applyall(us); }
		}
	)
}


makeHScrollbar(minWidth : Behaviour<double>, width: Behaviour<double>, bigpos : DynamicBehaviour<double>, onWheel : ref (double) -> bool, style : ScrollableStyle, visible : Behaviour<int>) -> Form {

	dragWidth = make(0.0);
	hScrollH = getHScrollHeight(style);
	height = const(hScrollH);

	// arrow button width
	buttonWidth = const(style.buttonWidth);

	// the whole scroller construct width
	componentWidth = make(0.0);

	// internal scrolling position
	pos = make(getValue(bigpos));

	scrollWidth = make(0.0);
	actualW = make(0.0);

	internalUpdate = ref false;

	visComponentWidth = make(0.);
	visDragWidth = make(0.);

	Constructor(
		Group([
			// Calculate scroller width. It will fill the whole available area.
			Inspect([AvailableWidth(componentWidth)], Empty()),
			Select(visComponentWidth, \w -> style.scrollHoverFn(w, getValue(height), style.scrollBackgroundBrush)),
			// make the content
			Cols([
				scrollButton(
					Graphics([ MoveTo(0.0, 2.5), LineTo(3.0, 0.0), LineTo(3.0, 5.0), ClosePath() ],
						scrollArrowStyle
					),
					buttonWidth,
					height,
					\ -> next(pos, max(getValue(pos) - 5.0, 0.0)),
					style,
					3
				),
				Group([
					Select(scrollWidth, \w -> Fixed(w, 0.0)),
					Slider(
						pos, make(0.0),
						actualW, make(0.0),
						scrollHover(
							visDragWidth,
							height,
							style
						),
						[SnapOnClick(false), SliderEnabled(const(!mobile))]
					)
				]),

				scrollButton(
					Graphics([ MoveTo(0.0, 0.0), LineTo(3.0, 2.5), LineTo(0.0, 5.0), ClosePath() ],
						scrollArrowStyle
					),
					buttonWidth,
					height,
					\ -> next(pos, min(getValue(pos) + 5.0, getValue(actualW) )),
					style,
					1
				)
			])
		]),
		\ -> {
			isVisible0 = selectu(visible, \v -> v != 0);
			isVisible = throttle2u(isVisible0.first, 5);
			visComponentWidth0 = transistoru(isVisible.first, componentWidth);
			visDragWidth0 = transistoru(isVisible.first, dragWidth);
			uns4 = connect(visComponentWidth0.value, visComponentWidth);
			uns5 = connect(visDragWidth0.value, visDragWidth);

			u0 = getScrollbarHandleSize(minWidth, width, dragWidth);

			// scroll area width
			u1 = connectSelect2u(componentWidth, buttonWidth, scrollWidth, \w, bw -> max(w - 2.0 * bw, 0.0) );
			u2 = connectSelect2u(scrollWidth, dragWidth, actualW, \s, d -> max(s - d, 0.0));

			bigwidth = select2u(width, componentWidth, \w, cw -> max(w - cw, 0.0) );

			outpos = select3u(bigwidth.first, actualW, pos, \bw, aw, p -> {
				if (equalDoubles(aw, 0.0)) {
					0.0
				} else {
					bw * p / aw
				}
			});

			uns1 = subscribe(bigpos, \p -> {
				if (!^internalUpdate) {
					v = p * getValue(actualW) / getValue(bigwidth.first); // [-Revise-] division by zero = NaN happens here!
					if (mobile || (getValue(actualW) > 0.0 && getValue(bigwidth.first) > 0.0))
						next(pos, forceRange(v, 0.0, getValue(actualW)));
				}
			});

			uns2 = subscribe(outpos.first, \p -> {
				internalUpdate := true;
				nextDistinct(bigpos, p);
				internalUpdate := false;
			});

			onWheel := \delta -> {
				aw = getValue(actualW);

				if (mobile || (getValue(componentWidth) > 0.0 && aw > 0.0 && getValue(bigwidth.first) > 0.0)) {
					prevV = getValue(pos);
					v = prevV - getValue(componentWidth) * aw / getValue(bigwidth.first) / 10.0 * delta;  // [-Revise-] division by zero = NaN happens here!
					newV = forceRange(v, 0.0, aw);

					next(pos, newV);
					newV != prevV;
				} else {
					false
				}
			};

			us = [
				u0, u1, u2,
				bigwidth.second, outpos.second, uns1, uns2, uns4, uns5, isVisible0.second, isVisible.second, visComponentWidth0.dispose, visDragWidth0.dispose
			];
			\ -> { onWheel := \__ -> false; applyall(us); }
		}
	);
}

getScrollbarHandleSize(mindim : Behaviour<double>, maxdim : Behaviour<double>, connectTo : DynamicBehaviour<double>) -> () -> void {
	connectSelect2u(mindim, maxdim, connectTo, \mw, w : double -> {
		if (w == 0.0) {
			10.0;
		} else {
			max(if (mw > 30.0) 10.0 else 5.0, ((mw - 20.0) / w) * (mw - 20.0));
		}
	})
};

getHScrollHeight(style : ScrollableStyle) -> double {
	if (mobile) style.hScrollHeight / 3.0 else style.hScrollHeight;
}

getVScrollWidth(style : ScrollableStyle) -> double {
	if (mobile) style.vScrollWidth / 3.0 else style.vScrollWidth;
}

commonShowFn(cForm : Form, hBar : Form, vBar : Form) -> Form {
	if (mobile) {
		wh = makeWH();
		Group([
			Inspect([ISize(wh)], cForm),
			// Place scrollbars over the form on the bottom and the right
			Available2(wh, Group([Align(1.0, 0.0, vBar), Align(0.0, 1.0, hBar)]))
		]);
	} else Grid([[cForm, vBar], [hBar, Empty()]]);
}

commonSizeFn(dimension : double, vis : bool) -> double {
	if (vis) dimension - 10.0 - standartScrollableStyleWithoutGap.borderGap else dimension;
}


