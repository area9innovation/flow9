// Â© Copyright 2011 Area9 Technologies.

import form/formutils;
import form/textstyles;
import form/adaptivescale;
import form/interactiveutils;  // absorbMouseEvents
import ui/scrollable;
import ui/combobox_structs;
import form/paragraph3;  // INF_METRICS

export {

	////////////////////////////////
	// Custom combo box
	// This is very tricky, use EasyComboBox instead from ui/easycombobox.flow
	////////////////////////////////

	ComboBoxCustom(
		minWidth : double,
		maxDropHeight : double,
		items : [Pair<Form, bool>],         // false if item is not selectable
		selectedB : DynamicBehaviour<int>,
		wBorder : double,                   // 10.0 by default
		hBorder : double,                   // 3.0 by default
		defaultForm : Form,	                // shown as a header if selected == -1
		colorScheme : ComboBoxColorScheme,
		expandedB : DynamicBehaviour<bool>,
		enabledB : Behaviour<bool>,
		bevelSize : double,
		staticHeaderFormM : Maybe<Form>,    // shown as a header no matter what item is selected
		maxHeaderWidth : double,            // <= 0.0 - then no limit (default)
		makeComboItemUIFn : Maybe<(
			item : Form,
			isSelectable : bool,
			metrics : ComboMetrics,
			isHoveredB : Behaviour<int>,
			colorScheme : ComboBoxColorScheme
		) -> Form>,
		makeComboItemsListUIFn : Maybe<(
			items : [Form],
			enabledB : Behaviour<bool>,
			metrics : ComboMetrics,
			colorScheme : ComboBoxColorScheme
		) -> Form>,
		makeComboBodyUIFn : Maybe<(
			headerFormB : Behaviour<Form>,
			isStaticHeader: bool,
			enabledB : Behaviour<bool>,
			metrics : ComboMetrics,
			colorScheme : ComboBoxColorScheme
		) -> Form>,
		disableMobileScaler : bool,
	) -> Form;


	// Predefined schemes & colored comboboxes
	orangeSkin = ComboBoxColorScheme([0xf9f9f9], 0xf9f9f9, [0xE27756], 0xC85536, 0xD58267, 0xDD9585, 0x913B25, 0xC85536, 0xD6846D, Some(0xF9F9F9), None(), false);
	graySkin   = ComboBoxColorScheme([16382457], 16382457, [2143799238], 2139391108, 6136288, 2143799238, 2139391108, 11513775, 11513775, Some(2133864496), None(), false);

	// greenland
	orangeSkinWithoutHover = ComboBoxColorScheme([0xf9f9f9], 0xf9f9f9, [0xda5521], 0xe38057, -1,  0xFFFFFF, 0x000000, 0xda5521, 0xe38057, Some(0xFFFFFF), None(), false);
	newSkinComboScheme     = ComboBoxColorScheme([white], white, [white], white, -1,  white, 0x000000, white, white, Some(newBlackColor), None(), false);
	// flowapps
	paamSkinComboScheme    = ComboBoxColorScheme([white], white, [white], 0xbec1c0, -1, 0xbec1c0, 0xbec1c0, 0xbec1c0, 0xbec1c0, Some(white), None(), false);
	liteSkinComboScheme    = ComboBoxColorScheme([white], white, [0xd3d3d3], white, -1, white, white, white, white, Some(0x757470), None(), false);

	newPaamSkinComboScheme = ComboBoxColorScheme([white], white, [white], white, -1, white, white, white, white, Some(0x8D979A), Some(10.0), true);

	new2SkinComboScheme    = ComboBoxColorScheme([0xf8f8f8], 0xf8f8f8, [0xd3d3d3], 0xd3d3d3, 0xd3d3d3, 0xd3d3d3, 0xd3d3d3, 0xd3d3d3, 0xd3d3d3, Some(newGray4Color), None(), false);

	// [-Misplaced-] Is there a better place for this?
	isBlanksComboboxNewSkin() -> bool;
	setBlanksComboboxNewSkin(ns : bool) -> void;

	isNewPaamComboboxSkin() -> bool;
	setNewPaamComboboxSkin(ns : bool) -> void;

	// Adds solid outline, maximum size is 4.0
	addOutline2Form(form : Form, color : int, size : double, isAbove : bool) -> Form;

	makeComboItemsListUI(items: [Form], enabledB: Behaviour<bool>, metrics: ComboMetrics, colorScheme: ComboBoxColorScheme) -> Form;
}

blanksComboboxNewSkin = ref false;

setBlanksComboboxNewSkin(ns: bool) -> void {
	blanksComboboxNewSkin := ns;
}

isBlanksComboboxNewSkin() -> bool {
	^blanksComboboxNewSkin;
}

comboboxNewPaamSkin = ref false;

setNewPaamComboboxSkin(ns: bool) -> void {
	comboboxNewPaamSkin := ns;
}

isNewPaamComboboxSkin() -> bool {
	^comboboxNewPaamSkin;
}

ComboBoxCustom(
	minWidth : double,
	maxDropHeight : double,
	items : [Pair<Form, bool>],
	selectedB : DynamicBehaviour<int>,
	wBorder : double,
	hBorder : double,
	defaultForm : Form,
	colorScheme : ComboBoxColorScheme,
	expandedB : DynamicBehaviour<bool>,
	enabledB : Behaviour<bool>,
	bevelSize : double,
	staticHeaderFormM : Maybe<Form>,
	maxHeaderWidth: double,
	makeComboItemUIFn: Maybe<(
		item : Form,
		isSelectable: bool,
		metrics : ComboMetrics,
		isHoveredB : Behaviour<int>,
		colorScheme: ComboBoxColorScheme
	) -> Form>,
	makeComboItemsListUIFn: Maybe<(
		items: [Form],
		enabledB: Behaviour<bool>,
		metrics: ComboMetrics,
		colorScheme: ComboBoxColorScheme
	) -> Form>,
	makeComboBodyUIFn: Maybe<(
		headerFormB : Behaviour<Form>,
		isStaticHeader: bool,
		enabledB: Behaviour<bool>,
		metrics: ComboMetrics,
		colorScheme: ComboBoxColorScheme
	) -> Form>,
	disableMobileScaler : bool,
) -> Form
{
	metrics =
		ComboMetrics(
			make(0.0), // xPosB
			make(0.0), // yPosB
			make(0.0), // listWidthB
			make(0.0), // listHeightB
			minWidth,
			if (maxHeaderWidth <= 0.0) INF_METRICS else maxHeaderWidth, // maxWidth
			maxDropHeight,
			wBorder,
			hBorder,
			bevelSize,
		);

	// old graySkin -> new graySkin
	cScheme = if (isBlanksComboboxNewSkin() && colorScheme == graySkin) new2SkinComboScheme else colorScheme;
	comboItems =
		mapi(items, \i, item -> {
			makeComboItem(item, i, selectedB, enabledB, metrics, cScheme, either(makeComboItemUIFn, makeComboItemUI))
		});
	comboList = makeComboItemsList(comboItems, enabledB, expandedB, metrics, cScheme, either(makeComboItemsListUIFn, makeComboItemsListUI), disableMobileScaler);
	comboBodyAndReplaceFn = makeComboBody(staticHeaderFormM, enabledB, expandedB, metrics, cScheme, either(makeComboBodyUIFn, makeComboBodyUI));

	////////////////////////////
	// All together
	////////////////////////////
	Constructor(
		comboBodyAndReplaceFn.first,
		\ -> {
			// To get this thing on top of whatever else might be visible, we postpone
			// rendering until this thing is displayed!
			unrenderFn = ref nop;
			// And even then, we wait until the current rendering is done.
			unselectFn = ref nop;

			deferUntilRender(\ -> {
				unrenderFn := render(comboList);
				unselectFn := subscribe(selectedB, \index -> {
					if (index >= 0 && index < length(items)) { //  && ((items[index]).second)) {
						comboBodyAndReplaceFn.second(items[index].first);
					} else if (index == -1) {
						// what to do here...
						comboBodyAndReplaceFn.second(defaultForm);
					}
					nextDistinct(expandedB, false);
				});
			});

			\-> {
				^unselectFn();
				^unrenderFn();
				nextDistinct(expandedB, false);
			}
		}
	)
}

makeComboItem(
	item : Pair<Form, bool>,
	index : int,
	selectedB : DynamicBehaviour<int>,
	enabledB : Behaviour<bool>,
	metrics : ComboMetrics,
	colorScheme : ComboBoxColorScheme,
	makeUIFn : (item : Form, isSelectable: bool, metrics : ComboMetrics, isHoveredB : Behaviour<int>, colorScheme: ComboBoxColorScheme) -> Form,
) -> Form
{
	hoverItem = make(0);

	// Add interactivity
	addInteractiveToItem = \f -> {

		startPoint = ref Point(0.0, 0.0);
		point = ref Point(0.0, 0.0);

		Cursor(
			FingerCursor(),
			Interactive(
				[
					MouseDown2(\handled, gm -> {
						startPoint := ^point;
						handled;
					}),
					MouseUp(\gm -> {
						nextDistinct(hoverItem, 0);
						mouseInfo = gm();
						if (mouseInfo.inside) {
							delta = abs(^point.y - ^startPoint.y);
							if (item.second && delta < 5.0) {
								next(selectedB, index);
							}
							true
						} else {
							false
						}
					}),
					MouseMove2(\handled, gm -> {
						mouseInfo = gm();
						point := Point(mouseInfo.x, mouseInfo.y);
						if (getValue(enabledB)) {
							if (mouseInfo.inside) {
								nextDistinct(hoverItem, 1)
							} else {
								nextDistinct(hoverItem, 0)
							}
						}
						handled
					})
				],
				f
			)
		)
	}

	item.first
	|> (\f -> makeUIFn(f, item.second, metrics, hoverItem, colorScheme))
	|> addInteractiveToItem
}

makeComboItemUI(item : Form, isSelectable: bool, metrics : ComboMetrics, isHoveredB : Behaviour<int>, colorScheme: ComboBoxColorScheme) -> Form {
	leftOffset = if (isBlanksComboboxNewSkin()) 4.0 else 0.0;
	Group([
		MinWidth(metrics.listWidthB,
			Size2(zeroSize,
				if (isSelectable) {
					Switch(isHoveredB, [
						HVFill([Fill(0x0f73c1), FillOpacity(0.0)]),
						HVFill([linearGradient(90.0, colorScheme.dropdownListHoverBackground)])
					])
				} else {
					HVFill([Fill(0xdddddd), FillOpacity(0.0)])
				}
			)
		),
		Border(metrics.wBorder + leftOffset, metrics.hBorder, metrics.wBorder, metrics.hBorder, item)
	])
}

makeComboItemsListUI(items: [Form], enabledB: Behaviour<bool>, metrics: ComboMetrics, colorScheme: ComboBoxColorScheme) -> Form {
	stylizeForm = \f -> {
		if (isBlanksComboboxNewSkin()) {
			addOutline2Form(f, colorScheme.dropdownListRounded, metrics.bevelSize, true)
		}
		else makeRoundForm(
			simpleRoundedRect,
			5.0,
			colorScheme.dropdownListRounded,
			2.0, 90.0,
			[0xF9F9F9, 0xF9F9F9],
			enabledB,
			f
		) |> addShadow2Form; // only for old skin
	}

	Background([Fill(colorScheme.dropdownListBackground)],
		addScrollable2Form(
			Inspect(
				[Width(metrics.listWidthB), Height(metrics.listHeightB)],
				MinWidth(
					const(metrics.minWidth),
					Lines(items)
				)
			),
			metrics.minWidth,
			metrics.maxDropHeight,
			metrics.listWidthB,
			metrics.listHeightB,
			metrics.yPosB
		)
	) |> absorbMouseEvents |> stylizeForm |> (if (!colorScheme.withShadows) idfn else \f -> BehindShadowAround(\w, h -> Rectangle(w, h, [Fill(white)]), f));
}

makeComboItemsList(
	items : [Form],
	enabledB : Behaviour<bool>,
	expandedB : DynamicBehaviour<bool>,
	metrics : ComboMetrics,
	colorScheme : ComboBoxColorScheme,
	makeUIFn: (items: [Form], enabledB: Behaviour<bool>, metrics: ComboMetrics, colorScheme: ComboBoxColorScheme) -> Form,
	disableMobileScaler : bool,
) -> Form {

	scaleFn = if (mobile) {
		\f -> SelectGlobal(actualAdaptiveScale, \aas -> if (disableMobileScaler) 1.5 else aas * 2.0 - 1.0, \mobileScale -> Scale(mobileScale, mobileScale, Available2(const(WidthHeight(metrics.minWidth, 0.0)), f)))
	} else {
		idfn
	}

	makeUIFn(items, enabledB, metrics, colorScheme)
	|> scaleFn
	|> (\f -> // Add position/make expandable
		Switch(
			select(expandedB, b2i), // Using switch instead of Visible to give elements a chance to dispose themselves
			[
				Empty(),
				// let's make sure that that body won't crop by right screen's border
				Translate(select2(metrics.xPosB, metrics.listWidthB, \x, w -> min(x, getStageWidth() - w - 10.0)), metrics.yPosB, f)
			])
	)
	|> (\f -> // Add interactivity
		Interactive(
			[
				MouseUp2(\handled, gm -> {
					if (getValue(enabledB) && getValue(expandedB)) {
						mouseInfo = gm();
						if (!mouseInfo.inside) {
							// If we click outside no matter whether it was handled, un-expand
							// Click somewhere else. Note : items receive event first
							nextDistinct(expandedB, false);
							true
						} else {
							handled
						}
					} else {
						handled
					}
				})
			],
			f
		))
}

makeComboArrow(enabledB : Behaviour<bool>, colorScheme : ComboBoxColorScheme) -> Form {
	// Construct arrow
	eitherMap(colorScheme.arrowColor, \arrowColor -> {
		makeArrow = \fs -> Center(Text("&#x25BC;", [FontFamily("DejaVuSans"), FontSize(fs), Fill(arrowColor)]));

		arrowSize = either(colorScheme.arrowSize, if (isBlanksComboboxNewSkin()) 12.0 else 10.0);
		arrow = Group([Border(10.0, 10.0, 10.0, 10.0, Fixed(0.0, 0.0)), makeArrow(arrowSize)]);

		// Add background
		makeRoundForm(
			rightRoundedRect,
			5.0,
			colorScheme.dropdownButtonBackgroundDown,
			0.0,
			90.0,
			[colorScheme.dropdownButtonBackgroundDown, colorScheme.dropdownButtonBackgroundTop],
			enabledB,
			arrow
		);
	}, Empty());
}

makeComboBodyUI(headerFormB : Behaviour<Form>, isStaticHeader: bool, enabledB: Behaviour<bool>, metrics: ComboMetrics, colorScheme: ComboBoxColorScheme) -> Form {
	setWidth = \f -> {
		if (isStaticHeader) f
		else {
			width = make(0.0);
			Constructor(
				MinWidth(width, Align(0.0, 0.5, f)),
				\ -> connectSelectu(metrics.listWidthB, width, \w -> forceRange(w, metrics.minWidth, metrics.maxWidth))
			)
		}
	};
	arrow = makeComboArrow(enabledB, colorScheme);
	headerForm = Group([
		HVFill([linearGradient(90.0, colorScheme.boxBackground)]),
		Mutable(headerFormB) |> setWidth
	]);

	if (!isBlanksComboboxNewSkin()) {
		header = makeRoundForm(leftRoundedRect, 5.0, 0xC85536, 0.0, 90.0, [0xF9F9F9, 0xF9F9F9], enabledB, headerForm);
		Cols(map(
			filter([header, arrow], neq(Empty())),
			\x -> addBevel2Form(x, colorScheme.comboboxRounded, colorScheme.comboboxShadowRounded, metrics.bevelSize)))
	} else {
		header = addOutline2Form(headerForm, colorScheme.comboboxRounded, metrics.bevelSize, true);
		Cols([header, arrow])
	}
}

makeComboBody(
		staticHeaderFormM : Maybe<Form>,
		enabledB : Behaviour<bool>,
		expandedB : DynamicBehaviour<bool>,
		metrics : ComboMetrics,
		colorScheme : ComboBoxColorScheme,
		makeUIFn: (headerFormB : Behaviour<Form>, isStaticHeader: bool, enabledB: Behaviour<bool>, metrics: ComboMetrics, colorScheme: ComboBoxColorScheme) -> Form
) -> Pair<Form, (Form) -> void>
{
	hoverBodyB = make(0);
	headerFormB = make(either(staticHeaderFormM, Fixed(0.0,0.0)));
	bodyHeight = make(0.0);

	body3 =
		makeUIFn(headerFormB, isSome(staticHeaderFormM), enabledB, metrics, colorScheme)
		|> (\f -> Inspect([Height(bodyHeight)], f))
		|> (\f -> // Add interactivity
		Interactive(
			[
				MouseClick(nop1),
				MouseUp2(\handled, gm -> {
					if (getValue(enabledB) && !handled) {
						mouseInfo = gm();
						if (mouseInfo.inside) {
							next(metrics.xPosB, getMouseX(getStage()) - mouseInfo.x);
							next(metrics.yPosB, getMouseY(getStage()) - mouseInfo.y + getValue(select(bodyHeight, \h -> max(h, 0.0))) + 2.0);
							nextDistinct(expandedB, !getValue(expandedB));
							true
						} else {
							handled
						}
					} else {
						handled
					}
				}),
				RollOver(\gm -> {
					if (getValue(enabledB)) {
						nextDistinct(hoverBodyB, 1)
					}
				}),
				RollOut(\gm -> {
					if (getValue(enabledB)) {
						nextDistinct(hoverBodyB, 0)
					}
				})
			],
			f
		));

	// Add cursor
	enabledInt = make(b2i(getValue(enabledB)));
	body4 = Constructor(
		Switch(enabledInt, [body3, Cursor(FingerCursor(), body3)]),
		\ -> connectSelectu(enabledB, enabledInt, b2i)
	);

	// Add background
	body5 =
		if (colorScheme.comboboxBacklight >= 0) {
			Switch(
				hoverBodyB,
				[ body4, addBackLight2Form(body4, colorScheme.comboboxBacklight) ]
			)
		} else {
			body4
		} |> (if (!colorScheme.withShadows) idfn else addShadow2Body);


	Pair(
		body5,
		\itemForm -> {
			if (isNone(staticHeaderFormM)) {
				itemForm2 = Border(metrics.wBorder, 0.0, metrics.wBorder, 0.0, itemForm);
				next(headerFormB, cropMaxWidth(itemForm2, metrics.maxWidth));
			}
		}
	)
}

////////////////////////////////
// UI units
////////////////////////////////
simpleRoundedRect(width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form {
 	customRoundedRect(width, height, radius, radius, radius, radius, style)
}

makeRoundForm(
		rectFn : (width : double, height : double, radius : double, style : [GraphicsStyle]) -> Form,
		radius : double,
		strokeColor : int,
		strokeWidth : double,
		rotation : double,
		gradientColors : [int],
		enabledB : Behaviour<bool>,
		form : Form
) -> Form {
	strokeStyle = if (strokeWidth != 0.0) [ Stroke(strokeColor), StrokeWidth(strokeWidth) ] else [];
	fillStyle =	[ linearGradient(rotation, gradientColors) ];

	whB = makeWH();

	Behind(
		\w, h -> Size2(zeroSize,
			Group([
				rectFn(w, h, radius, concat(strokeStyle, fillStyle)),
				Invisibleb(enabledB,
					rectFn(w, h, radius, [Fill(0xFFFFFF), FillOpacity(0.2)])
				)
			])
		),
		form
	)
}

addBackLight2Form(form : Form, color : int) -> Form {
	Filter([
		Glow([
			Radius(15.0),
			Color(color, 1.0)
		])
	], form)
}

addBevel2Form(form : Form, color : int, shadowColor : int, size : double) -> Form {
	Filter([
		Bevel([
			Placement(45.0, size),
			Color(color, 1.0),
			ShadowColor(shadowColor, 1.0),
			Radius(2.0),
			Spread(size)
		])
	], form)
}

addShadow2Form(form : Form) -> Form {
	Filter([
		DropShadow([
			Placement(45.0, 10.0),
			Color(0x0, 1.0),
			Radius(15.0),
			Color(0x919191, 1.0),
		]),
	], form)
}

addShadow2Body(f : Form) -> Form {
	Behind(\w,h -> {
			Filter([DropShadow([Color(0x919191, 0.5), Radius(4.0), Placement(0.0, 2.5)])],
				Rectangle(w,h, [Fill(white)])
			)
		},
		f
	)
}

addOutline2Form(form : Form, color : int, width : double, isAbove : bool) -> Form {
	s = forceRange(width, 0.0, 4.0);
	if (s == 0.0) form
	else {
		// blocks textinput when drawn above
		fn = if (isAbove) Above else Behind;
		fn(\w, h -> Mask(
				Rectangle(w, h, [Stroke(color), StrokeWidth(s * 2.0)]),
				Rectangle(w, h, [Fill(white)])
			), form
		);
	}
}

cropMaxWidth(form : Form, maxWidth : double) -> Form {
	if (maxWidth > 10000.0)
		form // Crop seems to be working bad with offsetted form
	else {
		widthB = make(0.0);
		heightB = make(0.0);

		minWidthB = make(0.0);

		Constructor(
			Crop(
				zero,
				zero,
				minWidthB,
				heightB,
				Inspect(
					[Width(widthB), Height(heightB)],
					form
				)
			),
			\ -> connectSelectu(widthB, minWidthB, \width -> min(width, maxWidth))
		)
	}
}

addScrollable2Form(form : Form, minWidth : double, maxHeight : double, widthB : DynamicBehaviour<double>, heightB : DynamicBehaviour<double>, yPosB : DynamicBehaviour<double>) -> Form {
	minimumWidth = make(0.0);
	minimumHeight = make(0.0);
	Constructors(
		[
			\ -> connectSelectu(widthB, minimumWidth, \w -> max(w, minWidth)),
			\ -> connectSelect2u(yPosB, heightB, minimumHeight, \y, h -> {
				newH = if (0.0 >= h) maxHeight else min(h, maxHeight);
				prevH = min(getStageHeight()-y-8.0, min(h, maxHeight));
				//{-REQUEST-} Why do we need here (getStageHeight()-y-8.0)?
				//in video fullscreen-mode it caused combobox items-list tiny height, got about 15px
				if (isUrlParameterTrue("fix41316-1")) newH else prevH;
			})
		],
		VerticalScrollable(make(0.0), make(0.0), minimumWidth, minimumHeight, form)
	)
}
