// Â© Copyright 2011 Area9 Technologies.

import form/gui;
import ui/buttons;
import formats/html/html2form;

export {
	// Has a circle on the left, supposed to be used with simpleRadioStyle
	SimpleRadioGroup(captions: [string], pickedIndex : int, onPick: (int) -> void) -> [Form];


	// Same thing, but with text style
	AdvancedRadioGroup(captions: [string], style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>, pickedIndex : int, onPick: (int) -> void) -> [Form];
	AdvancedRadioGroup2(captions: [string], numericStyle : NumerationStyle, style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>, thinPicker : bool, pickedIndex : int, minItemHeight : double, onPick: (int) -> void) -> [Form];
	AdvancedRadioGroup3(captions: [string], numericStyle : NumerationStyle, styleB: Behaviour<[CharacterStyle]>, wrapLines : bool, pickerColor : Maybe<int>, thinPicker : bool, pickedIndex : int, minItemHeight : double, onPick: (int) -> void) -> [Form];
	AdvancedRadioGroup4(captions: [string], tooltips: [string], numericStyle : NumerationStyle, styleB: Behaviour<[CharacterStyle]>, wrapLines : bool, pickerColor : Maybe<int>, thinPicker : bool, pickedIndex : int, minItemHeight : double, onPick: (int) -> void) -> [Form];

	CustomRadioGroup(forms: [Triple<string, Form, Form>], onPick: (int) -> void) -> [Form];
	CustomRadioGroup2(forms: [Triple<string, Form, Form>], pickedIndex : int, onPick: (int) -> void) -> [Form];
	CustomRadioGroup3(forms: [Triple<string, Form, Form>], pickedIndex : DynamicBehaviour<int>, onPick: (int) -> void) -> [Form];
	SimpleRadioButton(caption : string, captionNumber : string, style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>,
		thinPicker : bool, selected : Behaviour<int>, minHeight : double, onClick : () -> void, enabled : Behaviour<bool>) -> Form;
	SimpleRadioButtonWithTooltip(caption : string, captionNumber : string, tooltip : string, style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>,
		thinPicker : bool, selected : Behaviour<int>, minHeight : double, onClick : () -> void, enabled : Behaviour<bool>) -> Form;

	NumerationStyle ::= NumerationEmpty, NumerationArabic, NumerationLetterCaps;
	NumerationEmpty : ();
	NumerationArabic : (start : int);
	NumerationLetterCaps : ();
}

RadioGroup(radios, pickedIndex, stylePick) {
	radioState = make(pickedIndex);

	mapi(radios, \index, radio -> {
		CachedSwitch(
			select(radioState, \rs -> {
				if (rs == index) 1 else 0
			}),
			[
				Button(radio, \-> next(radioState, index)),
				stylePick(radio)
			]
		)
	});
}

CustomRadioGroup(forms: [Triple<string, Form, Form>], onPick: (int) -> void) -> [Form] {
	CustomRadioGroup2(forms, -1, onPick)
}

CustomRadioGroup2(forms: [Triple<string, Form, Form>], pickedIndex : int, onPick: (int) -> void) -> [Form] {
	CustomRadioGroup3(forms, make(pickedIndex), onPick)
}

CustomRadioGroup3(forms: [Triple<string, Form, Form>], radioState : DynamicBehaviour<int>, onPick: (int) -> void) -> [Form] {
	makeRadioButton = \isSelected : Behaviour<int>, radioStB : DynamicBehaviour<int>, onPickFn : (int) -> void -> \indexForm : Pair -> {
		AnimatedButton(Switch(isSelected, [indexForm.second.second, indexForm.second.third]), make(true), "",
			\ -> {
				next(radioStB, indexForm.first);
				onPickFn(indexForm.first);
			}
		)
	};

	mapi(forms, \index, tForm -> {
		isSelected = select(radioState, \s -> if (s == index) 1 else 0 );
		radioButtonForm = Pair(index, tForm) |> makeRadioButton(isSelected, radioState, onPick) |> addRadioButtonAltText("radio", tForm.first, isSelected);
		Cols([
			radioButtonForm,
			Fixed(5.0, 0.0)
		])
	});
}

SimpleRadioGroup(captions: [string], pickedIndex : int, onPick: (int) -> void) -> [Form] {
	AdvancedRadioGroup(captions, [], false, None(), pickedIndex, onPick)
}

AdvancedRadioGroup(captions: [string], style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>, pickedIndex : int, onPick: (int) -> void) -> [Form] {
	AdvancedRadioGroup2(captions, NumerationEmpty(), style, wrapLines, pickerColor, false, pickedIndex, 0.0, onPick)
}

AdvancedRadioGroup2(captions: [string], numericStyle : NumerationStyle, style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>, thinPicker : bool, pickedIndex : int, minItemHeight : double, onPick: (int) -> void) -> [Form] {
	AdvancedRadioGroup3(captions, numericStyle, const(style), wrapLines, pickerColor, thinPicker, pickedIndex, minItemHeight, onPick)
}

AdvancedRadioGroup3(captions: [string], numericStyle : NumerationStyle, styleB: Behaviour<[CharacterStyle]>, wrapLines : bool, pickerColor : Maybe<int>, thinPicker : bool, pickedIndex : int, minItemHeight : double, onPick: (int) -> void) -> [Form] {
	AdvancedRadioGroup4(captions, captions, numericStyle, styleB, wrapLines, pickerColor, thinPicker, pickedIndex, minItemHeight, onPick)
}

AdvancedRadioGroup4(captions: [string], tooltips: [string], numericStyle : NumerationStyle, styleB: Behaviour<[CharacterStyle]>, wrapLines : bool, pickerColor : Maybe<int>, thinPicker : bool, pickedIndex : int, minItemHeight : double, onPick: (int) -> void) -> [Form] {
	radioState = make(pickedIndex);

	mapi(captions, \index, caption -> {
		Select(styleB,\style -> {
			SimpleRadioButtonWithTooltip(caption,
				switch(numericStyle : NumerationStyle) {
					NumerationEmpty() : "";
					NumerationArabic(start) : i2s(start + index);
					NumerationLetterCaps() : fromCharCode(65 + index);
				},
				elementAt(tooltips, index, caption),
				style, wrapLines, pickerColor, thinPicker,
				select(radioState, \r -> if (r == index) 1 else 0),
				minItemHeight,
				\ -> {
					next(radioState, index);
					onPick(index);
				},
				const(true)
			)
		})
	});
}

SimpleRadioButton(caption : string, captionNumber : string, style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>,
	thinPicker : bool, selected : Behaviour<int>, minHeight : double, onClick : () -> void, enabled : Behaviour<bool>) -> Form {

	SimpleRadioButtonWithTooltip(caption, captionNumber, caption, style, wrapLines, pickerColor, thinPicker, selected, minHeight, onClick, enabled)
}

SimpleRadioButtonWithTooltip(caption : string, captionNumber : string, tooltip : string, style: [CharacterStyle], wrapLines : bool, pickerColor : Maybe<int>,
	thinPicker : bool, selected : Behaviour<int>, minHeight : double, onClick : () -> void, enabled : Behaviour<bool>) -> Form {

	gstyle2 = fold(style, [Fill(0x000000), Stroke(0x000000)], \acc, s -> switch(s) {
		Fill(c): concat(acc, [Fill(c), Stroke(c)]);
		default: acc;
	});

	gstyle = eitherMap(pickerColor,
		\c -> fold(gstyle2, [], \acc, st -> arrayPush(acc, switch (st : GraphicsStyle) {
			Fill(__): Fill(c);
			default : st
		})),
		gstyle2
	);

	wh = makeWH();

	captionNumberWidth = if (captionNumber == "")
		0.0
	else
		1.4 * fold(style, if (wrapLines) 18.0 else 12.0, \acc, st -> switch(st: CharacterStyle) { // 18.0 is default font size for html
			FontSize(fs) : fs;
			default : acc
		});

	captionNumberForm = Size2(const(WidthHeight(captionNumberWidth, 0.0)), {
		if (captionNumber == "") Empty() else Text(captionNumber + ")", style)
	});
	// captionNumberHeight = getFormHeight(captionNumberForm);

	awh = makeWH();

	boxForm = if (minHeight < 1.0) Empty() else Select2(awh, wh, \_awh, _wh -> {
		h = if (_wh.height > minHeight) _wh.height else minHeight;
		Rectangle(_awh.width, h, [FillOpacity(0.0), Fill(white)])
	});

	captionTextForm = if (caption == "") Empty() else Available2(select(awh, \_wh -> WidthHeight(_wh.width - 23.0 - captionNumberWidth, _wh.height)),
		if (wrapLines)
			html2form(caption, makeTree(), [HTMLDefaultFont(style)])
		else
			Text(caption, style)
	);

	captionForm = if (caption != "" || captionNumber != "") Border(
		18.0, 5.0, 8.0, 5.0,
		Cols([
			captionNumberForm,
			captionTextForm
		])
	) else Empty();

	lineHeight = getFormHeight(Text("H", style));

	pickerWidth = if (thinPicker) 1.0 else 2.0;

	radioButtonForm =
		if (caption == "" && captionNumber == "") {
			// We do not need any baseline correction, so this is really simple, although we do
			// make the circles grow with font size

			dHeight = lineHeight * 0.7;

			radius = max(dHeight / 2.0, 6.0);
			Group([
				Circle(radius, radius, radius, concat(gstyle, [FillOpacity(0.0), StrokeWidth(pickerWidth)])),
				Visible(selected, Circle(radius, radius, radius * 0.67, concat(gstyle, [StrokeWidth(0.0)])))
			]);
		} else {
			radius = 6.0;
			Select(wh, \_wh -> {
				center = if (wrapLines) lineHeight / 2.0 - radius / 2.0 + 8.0
					else _wh.height - radius / 2.0 - lineHeight / 2.0 - 2.0;

				Group([
					Circle(radius, center, radius, concat(gstyle, [FillOpacity(0.0), StrokeWidth(pickerWidth)])),
					Visible(selected, Circle(radius, center, 4.0, concat(gstyle, [StrokeWidth(0.0)])))
				]);
			});

		}


	captionRadioButtonForm = Inspect(
		[ISize(wh), IAvailable2(awh)],
		Group([
			captionForm,
			radioButtonForm
		])
	);

	button = Group([boxForm, captionRadioButtonForm]);

	simpleRadioButtonForm = Cursor(
		FingerCursor(),
		Select(enabled, \enabled_ -> if (enabled_) {
			down = ref false;
			x = ref 0.0;
			y = ref 0.0;
			Interactive([
				MouseClick(\info -> {
					x := info.x;
					y := info.y;
					down := true;
				}),
				MouseUp(\e -> {
					info = e();
					if (info.inside && ^down && abs(info.x - ^x) < 10.0 && abs(info.y - ^y) < 10.0) {
						down := false;
						onClick();
						true
					} else false
				})
			], button)
		} else button)
	);

	simpleRadioButtonForm |> addRadioButtonAltText("radio", tooltip, selected)
}

addRadioButtonAltText(accessRoleText : string, text : string, isSelected : Behaviour<int>) -> (Form) -> Form {
	\f : Form -> {
		if (isNotSpace(text))
			Select(isSelected, \isSel -> {
				isSelText = if (isSel == 1) "selected" else "unselected";
				altText = strGlue([text, "radio button", isSelText], ", ");
				Tooltip(Access([AccessRole(accessRoleText), AccessDescription(altText)], f), text, [])
			})
		else
			f;
	}
}
