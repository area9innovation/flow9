// Â© Copyright 2013 Area9 Technologies.

import behaviour;



export {
	/// Does some control currently have keyboard focus?
	hasKeyboardFocus : ()->bool;

	currentKeyboardFocusId : () -> int;

	// 
	// Interface for control implementations
	// 

	/// Gets a fresh keyboard focus id.
	getFocusId : () -> int;

	/// Sets the id of the control with keyboard focus. Does not actually 
	/// change the keyboard focus.
	updateKeyboardFocus : (id : int) -> void;

	/// A keyboard focus dies - if it has focus, then clear it away
	keyboardFocusDies(id : int) -> void;

	/// Releases keyboard focus.
	releaseKeyboardFocus : () -> void;

	getKeyboardFocusBehaviour: () -> Behaviour<int>;	// Read-only behaviour is returned

	getLastKeyboardFocusBehaviour : () -> Behaviour<int>;

}

keyboardFocusBehaviour = make(-1);

lastKeyboardFocusBehaviour = make(-1);

getKeyboardFocusBehaviour() {
	keyboardFocusBehaviour
}

getLastKeyboardFocusBehaviour() {
	lastKeyboardFocusBehaviour
}

hasKeyboardFocus() getValue(keyboardFocusBehaviour) != -1;

currentKeyboardFocusId() {
	getValue(keyboardFocusBehaviour);
}

updateKeyboardFocus(id) {
/*	if (id != -1 && getValue(keyboardFocusBehaviour) != -1 && getValue(keyboardFocusBehaviour) != id) {
		println("Keyboard focus switch without intermediate release: " 
			+ i2s(getValue(keyboardFocusBehaviour)) + " -> " + i2s(id));
	}*/
	nextDistinct(keyboardFocusBehaviour, id);

	if (id != -1) {
		nextDistinct(lastKeyboardFocusBehaviour, id);
	}
}

keyboardFocusDies(id : int) {
	if (getValue(keyboardFocusBehaviour) == id) releaseKeyboardFocus();
}

releaseKeyboardFocus() updateKeyboardFocus(-1);

nextFocusId = ref 1;

getFocusId() {
	id = ^nextFocusId;
	nextFocusId := id + 1;
	id;
}
