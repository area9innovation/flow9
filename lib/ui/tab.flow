// Â© Copyright 2011 Area9 Innovation. All rights reserved

import ui/scrollable;
import ui/tooltip;
import ui/gestures;

export {
	customTabControl(currentTab:DynamicBehaviour<int>, width : double, height : double, radius : double,
					 tabHeight : double, tabCaption : [string], tabCaptionHint : [string], tabContent : [Form], enable : Behaviour<bool>) -> Form;

	customTabControlWH(currentTab:DynamicBehaviour<int>, size : Behaviour<WidthHeight>, radius : double,
					 tabHeight : double, tabCaption : [string], tabCaptionHint : [string], tabContent : [Form], enable : Behaviour<bool>, useNewSkin : bool) -> Form;

	tabControl(currentTab:DynamicBehaviour<int>, width:double, height: double,
			   captions: [string], tabs: [Form], enable: Behaviour<bool>) -> Form;

}

tabControl(currentTab: DynamicBehaviour<int>, width:double, height: double,
		   captions: [string], tabs: [Form], enable: Behaviour<bool>){
	customTabControl(currentTab, width, height, 7.0, 20.0, captions, [], tabs, enable);
}


customTabControl(currentTab:DynamicBehaviour<int>, width : double, height : double, radius : double,
				 tabHeight : double, tabCaption : [string], tabCaptionHint : [string], tabContent : [Form], enable : Behaviour<bool>) {

	customTabControlWH(currentTab, const(WidthHeight(width, height)), radius, tabHeight, tabCaption, tabCaptionHint, tabContent, enable, false)
}

customTabControlWH(currentTab:DynamicBehaviour<int>, size : Behaviour<WidthHeight>, radius : double,
				 tabHeight : double, tabCaptions : [string], tabCaptionHints : [string], tabContents : [Form], enable: Behaviour<bool>, useNewSkin : bool) {
	// tabWidth = width / i2d(length(tabCaption));

	normalTabStyle : [GraphicsStyle] = if (useNewSkin) [] else [linearGradient(90.0, [0xb5b5b5, 0x919191])];
	selectedTabStyle : [GraphicsStyle] = if (isLiteEditStyle()) [Fill(0xee5151)] else if (useNewSkin) [Fill(0xbcbcbc)] else [linearGradient(90.0, [0xeeb299, 0xe04615])];
	disabledTabStyle : [GraphicsStyle] = [linearGradient(90.0, [0xcbcac6, 0xa8a7a3])];
	tabBorderStyle : [GraphicsStyle] = [Stroke(0xc9c8c3)];

	initTab = getValue(currentTab);

	style : [DynamicBehaviour<[GraphicsStyle]>] =
		mapi(tabCaptions, \i, v -> {
			make(if(i == initTab) selectedTabStyle else normalTabStyle);
		});
	content = make(elementAt(tabContents, initTab, Empty()));

	tabs = Select(size, \sz -> {
		width = sz.width;
		height = sz.height;

		totalLength = fold(tabCaptions, 0, \acc, caption -> acc + strlen(caption) + 4);

		tabsWidth = map(tabCaptions, \tabCaption -> i2d(strlen(tabCaption) + 4) * width / i2d(totalLength) );

		tabsOffset = fold(tabsWidth, Pair(0.0, []), \acc, tabWidth -> {
			Pair(
				acc.first + tabWidth,
				arrayPush(acc.second, acc.first)
			)
		}).second;


		backRadius = 5.0;
		gap = 7.0;	
		Group(concat(
			[
				if (useNewSkin)
					Select(currentTab, \cur -> Group(concat3(
						[Offset(0.0, 1.0, Rectangle(width, tabHeight-1.0, [Fill(white)]))], 
						generate(0, length(tabCaptions), \i -> // vertical lines between tabs
							if (cur == i || cur == i + 1 || i == length(tabCaptions) - 1)
								Empty()
							else
								Graphics([MoveTo(dsum(subrange(tabsWidth, 0, i + 1)), 5.0), LineTo(dsum(subrange(tabsWidth, 0, i + 1)), tabHeight - 5.0)], [Stroke(0xbcbcbc)])
						),
						[Offset(0.0, tabHeight - 2.0, Rectangle(width, 2.0, [Fill(0xbcbcbc)]))],
					)))
				else
					Graphics(
						[
							MoveTo(1.0, tabHeight),
							LineTo(1.0, height - radius),
							CubicBezierTo(radius + 1.0, height, 1.0, height),
							LineTo(width - radius - 1.0, height),
							CubicBezierTo(width - 1.0, height - radius, width - 1.0, height),
							LineTo(width - 1.0, tabHeight)
						],
						tabBorderStyle
					)
			],
			mapi(tabCaptions, \i, tabCaption -> {
				tabWidth = tabsWidth[i];
				tabOffset = tabsOffset[i];

				Cursor(FingerCursor(),
					Interactive([
						MouseClick(\info -> {
							if(info.x > tabOffset && info.x < tabOffset + tabWidth) {
								nextDistinct(currentTab, i)
							}
						})],
						MakeHint(
							Border(tabOffset, 0.0, 0.0, 0.0,
								Group([
									Select2(style[i], enable, \s, e -> {
										if (useNewSkin) {
											Graphics(
												[
													MoveTo(0.0, tabHeight),
													CubicBezierTo(backRadius, tabHeight - backRadius, backRadius, tabHeight),
													LineTo(backRadius, backRadius),
													CubicBezierTo(2.0 * backRadius, 0.0, backRadius, 0.0),
													LineTo(tabWidth - 2.0 * backRadius, 0.0),
													CubicBezierTo(tabWidth - backRadius, backRadius, tabWidth - backRadius, 0.0),
													LineTo(tabWidth - backRadius, tabHeight - backRadius),
													CubicBezierTo(tabWidth, tabHeight, tabWidth - backRadius, tabHeight),
													ClosePath()
												],
												s
											)
										} else {
											BevelFilter(2.0, 
												if (length(tabCaptions) == 1) {
													Graphics(
														[
															MoveTo(0.0 + radius, 0.0),
															LineTo(tabWidth - radius, 0.0),
															CubicBezierTo(tabWidth, radius, tabWidth, 0.0),
															LineTo(tabWidth, tabHeight),
															LineTo(0.0, tabHeight),
															LineTo(0.0, radius),
															CubicBezierTo(0.0 + radius, 0.0, 0.0, 0.0),
														],
														if(e) s
														else disabledTabStyle
													)
												} else if (i == 0) {
													Graphics(
														[
															MoveTo(0.0 + radius, 0.0),
															LineTo(tabWidth, 0.0),
															LineTo(tabWidth, tabHeight),
															LineTo(0.0, tabHeight),
															LineTo(0.0, radius),
															CubicBezierTo(0.0 + radius, 0.0, 0.0, 0.0),
														],
														if(e) s
														else disabledTabStyle
													)
												} else if (i == length(tabCaptions) - 1) {
													Graphics(
														[
															MoveTo(0.0, 0.0),
															LineTo(tabWidth - radius, 0.0),
															CubicBezierTo(tabWidth, radius, tabWidth, 0.0),
															LineTo(tabWidth, tabHeight),
															LineTo(0.0, tabHeight),
															LineTo(0.0, 0.0),
														],
														if(e) s
														else disabledTabStyle
													)
												} else {
													Graphics(
														rectangle(0.0, 0.0, tabWidth, tabHeight),
														if(e) s
														else disabledTabStyle
													)
												}	
											)
										}							
									}),
									Available(const(tabWidth), const(tabHeight),
										Align(0.5, 0.5,
											resizeToFit(tabWidth - 6.0, tabHeight * (2.0 / 3.0), 
												if (useNewSkin) 
												Select(currentTab, \cur ->
													Text(tabCaption, [Fill(if (cur == i) white else newBlackColor), FontSize(tabHeight * (2.0 / 3.0))])
												)
												else
													Text(tabCaption, [Fill(0xffffff), FontFamily("Roboto"), FontSize(tabHeight * (2.0 / 3.0))])
											)
										)
									)
								])
							),
							if(length(tabCaptionHints) > 0) tabCaptionHints[i] else "",
							[]
						)
					)
				)

			})
		))
	});

	xswipe = make(0);
	yswipe = make(0);

	subscribeCurrentTabToXSwipe = \ -> subscribe(xswipe, \xs -> {
		cv = getValue(currentTab);
		if (xs < 0 && cv > 0) {
			nextDistinct(currentTab, cv-1);
		} else if (xs > 0 && cv < length(tabCaptions)-1) {
			nextDistinct(currentTab, cv+1);
		}
	});

	minWidth = make(0.0);
	minHeight = make(0.0);
	form =
		SwipeMonitor(
			Group([
				tabs,
				Border(5.0, tabHeight + 1.0, 5.0, 5.0,
					Constructors(
						[
							\ -> connectSelectu(size, minWidth, \sz -> sz.width - 7.0),
							\ -> connectSelectu(size, minHeight, \sz -> sz.height - radius - tabHeight)
						],
						if (useNewSkin)
							Scrollable2(make(0.0), make(0.0), minWidth, minHeight,
								Border(5.0, 5.0, 0.0, 0.0, Mutable(content)),
								\cForm, hBar, vBar -> Grid([[cForm, vBar], [hBar, Empty()]]), true
							)
						else
							Scrollable(make(0.0), make(0.0), minWidth, minHeight,
								Border(0.0, 5.0, 0.0, 0.0, Mutable(content))
							)
					)
				)
			]),
			xswipe, yswipe);

	Constructors(
		[
			subscribeCurrentTabToXSwipe,
			\ -> {
				subscribe2(currentTab, \ct -> {
					if(getValue(enable)) {
						map(style, \s -> {
							next(s, normalTabStyle)
						});
						if (0 <= ct && ct < length(tabContents)) {
							next(style[ct], selectedTabStyle);
							next(content, tabContents[ct]);
						}
					}
				})
			}
		],
		form
	)
}