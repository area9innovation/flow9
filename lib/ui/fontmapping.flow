import sys/target;
import string_utils;
import form/form;
import math/math; // dround
import rendersupport; // makeTextfield, setTextAndStyle, getTextFieldHeight
import runtime; // urlParameter funcs
import fusion;
import text/unicodecharacters;
import net/urlhash;
import fonts_repo;
import text/languages;
import ds/arrayutils;

export {
	getUniversalFont() -> FontFamily;
	getChineseFont() -> FontFamily;
	getJapaneseFont() -> FontFamily;
	getKoreanFont() -> FontFamily;
	getArabicFont() -> FontFamily;

	// This should be used for "select language" form
	getChineseFontMinimal() -> FontFamily;

	setLang(lang : string) -> void;

	// WARNING! On first call also SETS language according to url flags.
	getLang() -> string;
	getLangB() -> Behaviour<string>;

	// Returns if current language is RTL
	getDefaultRtl() -> bool;
	getDefaultRtlB() -> Transform<bool>;
	// Check if "lang" is one of RTL languages
	isRTLLang(lang : string) -> bool;

	isRtlAlphabet(alphabet : string) -> bool;

	// Returns if BiDi support is enabled
	isBiDiEnabled() -> bool;

	// Helpers to make Form in specific language environment
	// At moment of implementation are used to render Chinese transcript for VideoResource in English product
	renderWithLang(lang : string) -> (Form) -> Form;
	createWithLang(lang : string, fn : () -> ?) -> ?;

	isCJKLang() -> bool; // is current lang chinese/japanese/korean?
	isChinese(lang : string) -> bool;  // returns true for "zh", "zz" langs

	// Main function for font names mapping. Used by renderForm.
	// Returns special fonts for Chinese, Japanese, Korean;
	// for any other calls function set with setDefaultFontMappingFn.
	getMappedFont(desiredFamily : string, desiredSize : double) -> Pair<string, double>;

	getReverseMappedFontFamily(family : string) -> string;
	setReverseMappedFontFamilyMap(mapping : [Pair<string, string>]) -> void;

	// Set font face mapping for languages processed in standard manner (that is not CJK langs).
	setDefaultFontMappingFn(familyMapping : [Pair<string, string>]) -> void;
	
	// Set font face mapping for wigify and wigi editor
	setDefaultWigiFontMappingFn(mappingFn : (string) -> string) -> void;
	getMappedWigiFont(face : string) -> string;

	// Set mapping function for languages processed in standard manner (that is not CJK langs).
	// The function accepts font face and size and must return face and size.
	// Note that function may be called by renderForm very often, so it must be fast.
	setDefaultFontMappingFn2(mappingFn : (string, double) -> Pair<string, double>) -> void;

	// Overrides font family for default font
	setDefaultFontFamilyOverride(familyM : Maybe<string>) -> void;

	getNativeLangFromBCP(bcpLang : string) -> string;

	getMappedFontFace(style : [CharacterStyle]) -> string;

	// Hence arabic letters look smaller, we need adjust relative scale and
	// some other styles for readability.
	// TODO maybe introduce a native that will do a full string scan to detect an alphabet.
	detectAlphabet(text : string) -> string;
	getAlphabetScaling(alphabet : string, fontFamily : string) -> double;
	apply2AlphabetsScaling(alphabet1 : string, alphabet2 : string, styles : [CharacterStyle]) -> [CharacterStyle];
	applyAlphabetStyles(alphabet: string, styles: [CharacterStyle]) -> [CharacterStyle];

	setDefaultMathFontFaces(fontFaces : [string]) -> void;
	isMathFontFace(fontFace : string) -> bool;
	isLocalFontFace(fontFace : string) -> bool;

	FontFamilyStyle ::= SBold, SItalic;
		SBold();
		SItalic();

	//  Font family packing/extracting and mapping functions
	//
	//  By default Wigi uses font families for text styles instead of attributes.
	//  "Italic"  for italic text, "Medium" for bold and "MediumItalic" for bold italic.
	//  Since CharacterStyle cannot store family and face separately, this cumbersome machinery is needed.

	// This function sets up the font family
	// Example:
	// setFontFamilyMappings([
	// 	Pair("Italic", "ProximaSemiItalic"),
	// 	Pair("Medium", "ProximaExtraBold"),
	// 	Pair("MediumItalic", "ProximaExtraItalic"),
	// ]);
	setFontFamilyMappings(fontMap : [Pair<string, string>]) -> void;
	addFontFamilyMapping(from : string, to : string) -> void;

	// This function clears the font map.
	clearFontFamilyMapping() -> void;

	// This function translates the font family name according the font family map.
	// Called from getCharacterStyleFromWigiTextStyle(), which covers most of
	// wigi rendering needs including editors.
	getMappedFontFamily(string) -> string;

	//Enable/disable font mapping - for some objects (like inactive art it breaks layout)
	//see http://process.area9.dk/cases/default.asp?44118
	enableFontFamilyMapping() -> void;
	disableFontFamilyMapping() -> void;
	registerMappedFontFamilies(families : [[string]]) -> void;

	getMappedFontFamilyFaces(family : string) -> [string];
	getFontFaceStyle(fontFace : string, style : FontFamilyStyle) -> bool;
	canFontFaceStyleBeSwitched(fontFace : string, style : FontFamilyStyle) -> bool;
	switchFontFaceStyle(fontFace : string, style : FontFamilyStyle, turnOn : Maybe<bool>) -> string;
	replaceFontFamily(srcFace : string, familyChange : (string) -> string) -> string;

	doesLangDefaultFontFamilyExist(lang : string) -> bool;
	setLang2DefaultFontFamilyMap(langsMap : [Pair<string, [Pair<string, string>]>]) -> void;
	mapFontFaceToLanguageDefaultFamily(family : string, dstLang : string) -> string;
}

FontParams(mainstream : string, minimal : string);

debugFontMapping = isUrlParameterTrue("debugfontmapping");

relativeScaleArabicMultiplier = s2d(getUrlParameterDef("aafs", "1.0"));  // TODO generalize introducing a mapping alphabetâ†’coeficient.

isChinese(lang) {
	contains(["zh", "zz", "zh-cht"], toLowerCase(lang))
}

cjkLang = ref false;
bidiSupport: ref Maybe<bool> = ref None();

isCJKLang() -> bool {
	^cjkLang
}

getUniversalFont() -> FontFamily {
	// [-Revise-] Maybe this can be improved
	getChineseFont()
}

getAnyUrlParameter(name : string) -> string {
	getUrlParameterDef(name, getUrlHashParameter(name))
}

getFontScaling(family : string) {
	eitherGetUrlParameter("fontscale", s2d,
		if (startsWith(family, "Tahoma")) {
			if (opengl) 0.95 else 1.0  // QtByteRunner vs flash & win7
		} else if (startsWith(family, "NotoSans")) {
			if (ios() || macosx()) 0.95 else 1.0
		} else if (startsWith(family, "HiraKakuProN-W3")) {
			if (js) 0.95 else 1.0
		} else if (startsWith(family, "MS Gothic")) {
			1.05
		} else if (startsWith(family, "Verdana")) {
			if (js || macosx()) 0.95 else 1.0
		} else if (startsWith(family, "DejaVu Sans")) {
			0.835
		} else if (startsWith(family, "Scheherazade")) {
			1.5
		} else if (startsWith(family, "GeezaPro")) {
			1.2
		} else if (startsWith(family, "Dubai")) {
			1.1
		} else 1.0
	)
}

chineseFontParams : FontParams = {
	if (windows()) {
		if (opengl) {                                           // QtByteRunner
			FontParams("Tahoma", "Tahoma")
		} else if ((cpp || js) && getAnyUrlParameter("lang") != "ch") {
			FontParams("NotoSans", "NotoSansMinimal")
		} else if (windowsxp()) {                               // flash, winxp
			FontParams("Microsoft YaHei", "Microsoft YaHei")
		} else {                                                // flash, win7
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android() || linux()) {
		FontParams("DroidSansFallback", "DroidSansFallback")   // TODO: Check that this is correct. It seems it is the default font already
	} else if (ios() || macosx()) {
		FontParams("Tahoma", "NotoSansMinimal")               // [-Revise-] officialy, Tahoma is not available on iOS
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
};

japaneseFontParams : FontParams = {
	if (windows()) {
		if (opengl) {                                           // QtByteRunner
			FontParams("Tahoma", "Tahoma")
		} else if (cpp || js) {
			FontParams("Meiryo", "NotoSansMinimal")            // Trackman asked Meiryo for Japanese on Windows/javascript
		} else if (windowsxp()) {                               // flash, winxp
			FontParams("Microsoft YaHei", "Microsoft YaHei")
		} else {                                                // flash, win7
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android() || linux()) {
		FontParams("DroidSansFallback", "DroidSansFallback")
	} else if (ios()) {
		if (js)
			FontParams("HiraKakuProN-W3", "Verdana")
		else // cpp
			FontParams("HiraKakuProN-W3", "Verdana")
	} else if (macosx()) {
		FontParams("Meiryo", "Tahoma")                         // Trackman asked Meiryo for Japanese on Mac desktop
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
};

koreanFontParams : FontParams = {
	if (windows()) {
		if (opengl) {                                           // QtByteRunner
			FontParams("Tahoma", "Tahoma")
		} else if (cpp || js) {
			FontParams("MS Gothic", "NotoSansMinimal")        // Trackman wanted MS Gothic for Korean on Windows/javascript
		} else if (windowsxp()) {                               // flash, winxp
			FontParams("Microsoft YaHei", "Microsoft YaHei")
		} else {                                                // flash, win7
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android() || linux()) {
		FontParams("DroidSansFallback", "DroidSansFallback")
	} else if (ios()) {
		if (js)
			FontParams("HiraKakuProN-W3", "Verdana")
		else // cpp
			FontParams("HiraKakuProN-W3", "Verdana")
	} else if (macosx()) {
		FontParams("Verdana", "Tahoma")                       // Trackman asked Verdana for Korean on Mac desktop
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
};

arabicFontParams : () -> FontParams = \ -> {
	f = if (windows()) {
		if (opengl) "Tahoma"
		else if (windowsxp()) "Andalus"
		else "Tahoma"
	} else if (android()) "Tahoma"
	else if (linux()) "DejaVu Sans"
	else if (ios()) "GeezaPro"
	else if (macosx()) "Tahoma"
	else "DroidSansFallback";
	FontParams("Dubai", f)
};

hebrewFontParams : FontParams = {
	if (windows()) {
		if (opengl) {
			FontParams("Tahoma", "Tahoma")
		} else if (windowsxp()) {
			FontParams("Andalus", "Andalus")
		} else {
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android()) {
		FontParams("Tahoma", "Tahoma")
	} else if (linux()) {
		FontParams("DejaVu Sans", "DejaVu Sans")
	} else if (ios()) {
		FontParams("GeezaPro", "GeezaPro")
	} else if (macosx()) {
		FontParams("Tahoma", "Tahoma")
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
};

getChineseFont() -> FontFamily {
	FontFamily(chineseFontParams.mainstream)
}

getJapaneseFont() -> FontFamily {
	FontFamily(japaneseFontParams.mainstream)
}

getKoreanFont() -> FontFamily {
	FontFamily(koreanFontParams.mainstream)
}

getArabicFont() -> FontFamily {
	FontFamily(arabicFontParams().mainstream)
}

getChineseFontMinimal() -> FontFamily {
	FontFamily(chineseFontParams.minimal)
}

//In case of change update getCharacterStyleFromWigiTextStyle
defaultFontFace_ = "Roboto";
defaultFontFamily_ = "Roboto";
defaultFontSize_ = 11.0;
defaultFontFamilyOverride_ = eitherGetUrlValidParameter("defaultFontFamily", isValidIdentifier, idfn, "");
fontFamilyOverride_ : ref Maybe<string> = ref None();
// single-entry cache for getMappedFont. Hit rate is 80%.
getMappedFont_cache_key = ref Pair("", -1.0);
getMappedFont_cache_value = ref Pair("", -1.0);

resetMappedFontCache() {
	getMappedFont_cache_key := Pair("", -1.0);
	getMappedFont_cache_value := Pair("", -1.0);
}

setDefaultFontFamilyOverride(familyM : Maybe<string>) -> void {
	fontFamilyOverride_ := familyM;
	resetMappedFontCache();
}

getDefaultFontFamilyOverride() -> string {
	if (defaultFontFamilyOverride_ != "") defaultFontFamilyOverride_
	else either(^fontFamilyOverride_,  defaultFontFamily_);
}

fontOverrides : ref [Triple<string, string, double>] = ref eitherGetUrlValidParameterM("fontOverrides", \s -> {
	fold(strSplit(s, ","), Some([]), \acc, raw -> {
		eitherMap(acc, \a -> {
			parts1 = strSplit(raw, "*");
			tmp = if (length(parts1) == 2)
				Pair(parts1[0], parts1[1])
			else if (length(parts1) == 1)
				Pair(parts1[0], "1.0")
			else
				Pair("", "");
			parts2 = strSplit(tmp.first, "@");
			if (tmp.first == "")
				None()
			else if (length(parts2) == 2)
				Some(arrayPush(a, Triple(parts2[1], parts2[0], s2d(tmp.second))))
			else if (length(parts2) == 1)
				Some(arrayPush(a, Triple(parts2[0], parts2[0], s2d(tmp.second))))
			else
				None()
		}, None())
	})
}, []);

getMappedFontFn : ref (string, double) -> Pair<string, double> =
	ref \family, size -> Pair(family, size);

getMappedFont(face : string, size : double) {
	fface = if (face != "") face else defaultFontFace_;
	if (fface != ^getMappedFont_cache_key.first || size != ^getMappedFont_cache_key.second) {
		mappedFont =
			if (fface == "MaterialIcons" || (fface == "'Material Icons'")) {
				Pair("MaterialIcons", size)
			} else {
				(^getMappedFontFn)(fface, size);
			}
		getMappedFont_cache_key := Pair(fface, size);
		getMappedFont_cache_value := mappedFont;
	}

	if (debugFontMapping) {
		println("zz mapped font: " + "'"+fface+"' -> " + toString(^getMappedFont_cache_value));
	}

	^getMappedFont_cache_value
}

// This var must be set through setLangCore() function only, because this function sets some other related vars as well.
currentLang = make("");

getLang() {
	if (getValue(currentLang) == "") {
		l = getAnyUrlParameter("forceLang");
		urlLang = if (l == "") getNativeLangFromBCP(getAnyUrlParameter("lang")) else l;
		if (urlLang != "") {
			// next(currentLang, toLowerCase(urlLang));	 // do not assign this var directly, it must be done through setLangCore() only...
			setLangCore(urlLang);                        // [-Revise-] ... however, I'm not sure this function actually must do lang initialization
		}
	}
	getValue(currentLang)
}

getLangB() {
	currentLang;
}

setLang(lang) {
	if (getAnyUrlParameter("forceLang") == "")
		setLangCore(lang);
}

setLangCore(lang0 : string) -> void{
	lang = toLowerCase(lang0);
	if (lang != getValue(currentLang)) {
		if (!cgi) {
			println("setting language to " + toString(lang));
		}
		cjkLang := isChinese(lang) || lang == "ja" || lang == "ko" || lang == "ar" || lang == "he" || lang == "yi";
		updateFontMappingFunction(Some(lang));
		next(currentLang, lang);
		setApplicationLanguage(lang);
	}
	bidiSupport := None();
}

rtlLanguages = ["ar", "he", "yi"];
rtlAlphabets = ["arb", "heb"];

getDefaultRtl() -> bool {
	contains(rtlLanguages, getLang());
}

getDefaultRtlB() -> Transform<bool> {
	fcontains(const(rtlLanguages), currentLang);
}

isRTLLang(lang : string) -> bool {
	contains(rtlLanguages, lang);
}

isRtlAlphabet(alphabet : string) -> bool {
	contains(rtlAlphabets, alphabet);
}

isBiDiEnabled() -> bool {
	onlyOnce(bidiSupport, \-> getDefaultRtl() || getAnyUrlParameter("bidi") != "0");
}

// function defining font mapping for non-CJK languages
defaultFontMappingFn : ref (string, double) -> Pair<string, double> = ref \family, size -> Pair(family, size);
defaultWigiFontMappingFn : ref (string) -> string = ref idfn;
reverseFontFamilyMappingTree : ref Tree<string, string> = ref makeTree();

getReverseMappedFontFamily(family : string) -> string {
	lookupTreeDef(^reverseFontFamilyMappingTree, family, family)
}

setReverseMappedFontFamilyMap(mapping : [Pair<string, string>]) -> void {
	reverseFontFamilyMappingTree := pairs2tree(mapping);
}

setDefaultFontMappingFnHelper(mapping : [Pair<string, string>]) -> (string, double) -> Pair<string, double> {
	directTree = pairs2tree(mapping);
	setReverseMappedFontFamilyMap(map(mapping, \p -> Pair(p.second, p.first)));

	if (mapping == []) {
		\family, size -> Pair(family, size)
	} else {
		\family, size -> Pair(
			either(lookupTree(directTree, family), family),
			size
		)
	}
}

setDefaultFontMappingFn2(mappingFn : (string, double) -> Pair<string, double>) -> void {
	defaultFontMappingFn := mappingFn;
	updateFontMappingFunction(None());
}

setDefaultFontMappingFn(mapping : [Pair<string, string>]) -> void {
	mapper = setDefaultFontMappingFnHelper(mapping);

	setDefaultFontMappingFn2(mapper);
}

setDefaultWigiFontMappingFn(mappingFn : (string) -> string) -> void {
	defaultWigiFontMappingFn := mappingFn;
}

getMappedWigiFont(face : string) -> string {
	fface = if (face != "") face else defaultFontFace_;
	//ToDo : add cache
	(^defaultWigiFontMappingFn)(fface);
}

cjkFontMappingFn(family : string, size : double) -> Pair<string, double> {
	lang = getValue(currentLang);
	makeFontMedium = \font1 -> font1 + "Medium";
	makeFontSloped = \fam -> {
		slopedStr = if (startsWith(fam, "DejaVu Sans") || startsWith(fam, "DejaVuSans")) "Oblique" else "Italic";
		fam + slopedStr
	};
	makeFontBold = \font1 -> font1 + "Bold";
	makePairs = \font1, font2 -> {[
		Pair(font1, font2),
		Pair(makeFontMedium(font1), makeFontBold(font2)),
		Pair(makeFontSloped(font1), makeFontSloped(font2)),
		Pair(makeFontSloped(makeFontMedium(font1)), makeFontSloped(makeFontBold(font2))),
	]};
	nativeFontParams : Maybe<FontParams> =
		if (lang == "ja")
			Some(japaneseFontParams)
		else if (lang == "ko")
			Some(koreanFontParams)
		else if (isChinese(lang))
			Some(chineseFontParams)
		else if (lang == "ar") // enable font mapping for arabic
			Some(arabicFontParams())
		else if (lang == "he")
			Some(hebrewFontParams)
		else
			None();
	fontParams = {
		eitherMap(nativeFontParams,
			\nvp -> {
				font = nvp.mainstream;
				mappingPairs = concat(
					if (lang=="ar" && ios() && isUrlParameterTrue("ArabicExtraFonts")) {
						makePairs("Tahoma", font)
					} else {
						makePairs("Roboto", font)
					},
					[
						Pair("Book", font),
						Pair("Bold", makeFontBold(font)),
						Pair("BoldItalic", makeFontSloped(makeFontBold(font))),
						Pair("Italic", makeFontSloped(font)),
						Pair("MathFontItalic", makeFontSloped("Amiri")),
						Pair("MathFont", "Amiri"),
						Pair("MathSymbolFont", "StixTwoMath"),
						Pair("MathGreekFont", makeFontSloped("Amiri")),
					],
				);

				mapper = setDefaultFontMappingFnHelper(mappingPairs);
				mapper(family, size) |> (\fm -> FontParams(fm.first, fm.first))
			},
			^defaultFontMappingFn(family, size) |> (\fm -> FontParams(fm.first, fm.first))
		)
	};
	Pair(getUrlParameterDef("uifont", fontParams.mainstream), roundFontSize(size * getFontScaling(fontParams.mainstream)))
}

// This allows setting font and size multiplier in url flag.
// Example: setting font family Meiro instead of Roboto: fontOverrides=Meyrio@Roboto
// Example: setting font size multiplier: fontOverrides=Meyrio*1.2
// You can split several settings with comma.
applyFontOverriding = {
	if (^fontOverrides == []) {
		idfn
	} else {
		\fontOverrideMappingFn -> {
			\family : string, size : double -> {
				mapped_FamilySize : Pair<string, double> = fontOverrideMappingFn(family, size);
				eitherMap(
					find(^fontOverrides, \o -> o.first == family),
					\o -> Pair(o.second, mapped_FamilySize.second * o.third),
					Pair(mapped_FamilySize.first, mapped_FamilySize.second)
				)
			}
		}
	}
}


renderWithLang(lang : string) -> (Form) -> Form {
	\f -> {
		savedLang = ref getLang();
		Constructor2(
			f,
			\ -> {
				savedLang := getLang();
				setLang(lang);
				nop
			},
			\ -> {
				setLang(^savedLang)
			}
		)
	}
}

createWithLang(lang : string, fn : () -> ?) -> ? {
	savedLang = getLang();
	setLang(lang);
	r : ? = fn();
	setLang(savedLang);
	r
}


roundFontSize(size : double) -> double {
	dround(size * 10.0) / 10.0
}

fm_calculateTextMetrics(text, family, size) {
	htmlFont = fontName2fontFace(family);
	families = fontFace2familiesString(htmlFont);
	textField = makeTextfield(families);
	setTextDirection(textField, if (getDefaultRtl()) "rtl" else "ltr");
	setTextAndStyle(textField, text, families, size, fontFace2weight(htmlFont), fontFace2slope(htmlFont), 0x000000, 1.0, 0.0, 0x000000, 0.0);
	fieldH = getTextFieldHeight(textField);
	deleteNative(textField);
	fieldH
}

// Calculate relative difference of height for two font families.
// May be useful for font size mapping.
calcFontSizeMultiplier(referenceFontFamily : string, targetFontFamily : string) -> double {
	referenceFontSize = 72.0;
	referenceText = "Tg";

	referenceFontHeight = fm_calculateTextMetrics(referenceText, referenceFontFamily, referenceFontSize);
	targetFontHeight = fm_calculateTextMetrics(referenceText, targetFontFamily, referenceFontSize);

	if (referenceFontHeight < 8.0 || targetFontHeight < 8.0) {
		// suspicious results, probably one of the heights evaluated incorrectly
		1.0
	} else {
		referenceFontHeight / targetFontHeight
	}
}

//transfer lang code from BCP format to internal flow format
getNativeLangFromBCP(bcpLang : string) -> string {
	bcpLanguageList = [
		Pair("es-mx", "la"),
		Pair("es-es", "es"),
		Pair("en-us", "en"),
		Pair("en-uk", "en-gb"),
	];
	lang = toLowerCase(bcpLang);

	if (strContains(bcpLang, "-")) {
		eitherFn(
			find(bcpLanguageList, \l -> l.first == lang),
			secondOfPair,
			\-> if(exists(usedLanguageDialects, \l -> toLowerCase(l) == lang)) lang else "en"
		)
	} else {
		lang
	}
}

updateFontMappingFunction(langM : Maybe<string>) -> void {
	lang = either(langM, getValue(currentLang));
	getMappedFontFn := {
		if (isCJKLang())
			cjkFontMappingFn
		else
			^defaultFontMappingFn
	} |> applyFontOverriding;
	getMappedFont_cache_key := Pair("", -1.0); // flush getMappedFont cache
}


_fontmapping_boot_ = {
	updateFontMappingFunction(None());
	0;
};

getMappedFontFace(style : [CharacterStyle]) -> string {
	face = fold(style, defaultFontFace_, \acc, s -> {
		switch (s) {
			FontFamily(name): name;
			default: acc;
		}
	});
	getMappedFont(face, defaultFontSize_).first
}

detectAlphabet(text : string) -> string {
	lalph = getUnicodeAlphabet(getCharCodeAt(text, strlen(text)-1));
	if (lalph == "") getUnicodeAlphabet(getCharCodeAt(text, 0)) else lalph
}

getAlphabetScaling(alphabet : string, fontFamily : string) -> double {
	if (alphabet == "arb") relativeScaleArabicMultiplier else 1.0
}

get2AlphabetsScaling(alphabet1 : string, alphabet2 : string, styles : [CharacterStyle]) -> double {
	ffam = extractStruct(styles, FontFamily(defaultFontFace_)).name;
	max(getAlphabetScaling(alphabet1, ffam), getAlphabetScaling(alphabet2, ffam))
}

apply2AlphabetsScaling(alphabet1 : string, alphabet2 : string, styles : [CharacterStyle]) -> [CharacterStyle] {
	fsz = extractStruct(styles, FontSize(defaultFontSize_)).size;
	fontSize = fsz * get2AlphabetsScaling(alphabet1, alphabet2, styles);
	replaceStruct(styles, FontSize(fontSize))
}

applyAlphabetStyles(alphabet: string, styles: [CharacterStyle]) -> [CharacterStyle] {
	getStyles = \ffc -> {
		fsz = extractStruct(styles, FontSize(defaultFontSize_)).size;
		ratio = getAlphabetScaling(alphabet, ffc);
		[FontSize(fsz * getAlphabetScaling(alphabet, ffc))/*, SetRTL(contains(rtlAlphabets, alphabet))*/];
	};
	eitherFn(
		tryExtractStruct(styles, emptyFontFamily),
		\ff -> {
			ffc = ff.name;
			fontFace = if (alphabet == "arb") strReplace(ffc, "RobotoMedium", "RobotoBold") else ffc;
			replaceStructMany(styles, arrayPush(getStyles(ffc), FontFamily(fontFace)))
		},
		\-> {
			replaceStructMany(styles, getStyles(defaultFontFace_))
		}
	)
}

defaultMathFontFaces : ref [ string ] = ref [];

setDefaultMathFontFaces(fontFaces : [string]) -> void {
	defaultMathFontFaces := fontFaces;
}

isMathFontFace(fontFace : string) -> bool {
	contains(^defaultMathFontFaces, fontFace);
}

isLocalFontFace(fontFace : string) -> bool {
	getMappedFontFamilyFaces("");  // Initializing
	containsKeyTree(
		either(^fontSwitchingStateMachine, FontSwitchingStateMachines([], makeTree())).family2machine,
		fontFace
	);
}


skinFontMap : ref Tree<string, string> = ref makeTree();
isFontFamilyMappingEnabled = ref true;

enableFontFamilyMapping() {
	isFontFamilyMappingEnabled := true;
}

disableFontFamilyMapping() {
	isFontFamilyMappingEnabled := false;
}

setFontFamilyMappings(fontMap) {
	skinFontMap := pairs2tree(fontMap);
}

addFontFamilyMapping(from : string, to : string) -> void {
	skinFontMap := setTree(^skinFontMap, from, to);
}

clearFontFamilyMapping() {
	skinFontMap := makeTree();
}

getMappedFontFamily(family) {
	if (^isFontFamilyMappingEnabled)
		lookupTreeDef(^skinFontMap, family, family)
	else
		family
}

// 0=Regular, 1=Italic, 2=Bold, 3=BoldItalic
FontSwitchingStateMachine(/*family: string, */faces: [string]);
FontSwitchingStateMachines(
	machines : [FontSwitchingStateMachine],
	family2machine : Tree<string, Pair<ref FontSwitchingStateMachine, int>>
);

fontSwitchingStateMachine : ref Maybe<FontSwitchingStateMachines> = ref None();
Face(family : string, weight : int, slope : bool, name : string, group : string);

registerMappedFontFamilies(families : [[string]]) -> void {
	getMappedFontFamilyFaces("");  // Initializing
	newMachines = map(families, \family -> FontSwitchingStateMachine(family));
	existingMachines = either(^fontSwitchingStateMachine, FontSwitchingStateMachines([], makeTree()));
	fontSwitchingStateMachine := Some(FontSwitchingStateMachines(
		concat(existingMachines.machines, newMachines),
		fold(
			newMachines, existingMachines.family2machine,
			\acc, machine -> setTreeValues(acc, mapi(machine.faces, \i, face -> Pair(face, Pair(ref machine, i))))
		)
	));
}

mapFontSwitchingStateMachine(fontFace : string, fn : (italic : bool, bold : bool, change : (italic : bool, bold : bool) -> string) -> ?, def : ?) -> ? {
	indexedStateMachines = onlyOnce(fontSwitchingStateMachine, \-> {
		// Accessing styles branch of fontconfig.json
		// (may be overridden via compiler, and state machine will fail)
		json = getFontStylesConfig();

		flatFaces = switch (json) {
			JsonObject(faces): map(faces, unpairC(\faceName, faceDescr -> {
				family = getJsonStringField(faceDescr, "family", faceName);

				// HACK to be removed when no style mixins in family and family stays similar for all faces inside.
				// (maybe after Aug. 15 / 2022)
				familyNonsenseEndings = ["Regular", "Bold", "Black", "Italic", "ExtraLight", "Light", "SemiBold"];
				correctedFamily = strGlue(subtractA(strSplit(family, " "), familyNonsenseEndings), " ");

				// TODO add string weight values conversion.
				weight = getJsonIntField(faceDescr, "weight", 400);
				slope = "normal" != getJsonStringField(faceDescr, "style", "normal");
				group = getJsonStringField(faceDescr, "group", correctedFamily);
				Face(correctedFamily, weight, slope, faceName, group);
			}));
			default: {
				devtrace("fontmapping: Error parsing font config.");
				[]
			}
		};

		grouped = arrayGroupBy(flatFaces, \Q, q -> Q.group == q.group);

		// Processing each family collected faces
		validatedStateMachines = mapConcat(grouped, \familyFaces -> {
			// Flowneko compilation fixing hack.
			refnone : () -> ref Maybe<string> = \ -> ref None();
			matrix : [[ref Maybe<string>]] = generate(0, 9, \__ -> [refnone(), refnone()]);
			iter(familyFaces, \q : Face -> {
				i = findiDef([100, 200, 300, 400, 500, 600, 700, 800, 900], \w -> w == q.weight, 255);
				if (i < 9) matrix[i][b2i(q.slope)] := Some(q.name);
			});
			paired = filtermapi(matrix, \i, pair ->
				eitherMap(
					^(pair[0]),
					\p0 -> eitherMap(^(pair[1]), \p1 -> Some(Triple(100 * (i+1), p0, p1)), Some(Triple(100 * (i+1), p0, p0))),
					eitherMap(^(pair[1]), \p1 -> Some(Triple(100 * (i+1), p1, p1)), None())
				)
			);
			if (length(paired) > 0) {
				// We do not search around 400 and 700 for regular and bold respectively
				// because we have RobotoMedium instead of RobotoBold in our content.
				regularI = min(length(paired) - 2, foldi(paired, 0, \i, acc, p -> if (p.first <= 400) i else acc));
				[FontSwitchingStateMachine(
					/*normal[0].family, */
					[paired[max(regularI, 0)].second, paired[max(regularI, 0)].third, paired[regularI + 1].second, paired[regularI + 1].third]
				)]
			} else {
				familyM = fold(matrix, ^(matrix[0][0]), \acc, f -> eitherMap(
					^(f[0]),
					\p0 -> eitherMap(
						acc, \p1 -> Some(if(strlen(p1) > strlen(p0)) p0 else p1), ^(f[0])),
					acc
				));
				devtrace(formatString(
					"fontmapping: Warning: invalid datased ignored for %1.",
					[eitherMap(familyM, \f -> formatString("family Â«%1Â»", [f]), "unknown family")]
				));
				[]
			}
		});

		// Initial state machines
		stateMachines = concat(
			[
				FontSwitchingStateMachine(/*"", */["Book", "Italic", "Medium", "MediumItalic"]),
				FontSwitchingStateMachine(/*"DejaVuSans", */["DejaVuSans", "DejaVuSansOblique", "DejaVuSansBold", "DejaVuSansBoldOblique"]),
				FontSwitchingStateMachine(/*"Minion", */["Minion", "MinionItalics", "Minion", "MinionItalics"]),
			],
			validatedStateMachines
		);

		FontSwitchingStateMachines(
			stateMachines,
			setTreeValues(makeTree(), concatA(mapi(stateMachines,
				\i, machine -> mapi(machine.faces,
					\j, face -> Pair(face, Pair(ref stateMachines[i], j))
				)
			)))
		);
	});

	analyzeState = \pair -> unpair(pair, \refMachine, state -> fn(
		bitAnd(state, 1) != 0,  // for italic
		bitAnd(state, 2) != 0,  // for bold
		\italic, bold -> ^refMachine.faces[b2i(italic) + b2i(bold)*2]
	));

	eitherMap(
		lookupTree(indexedStateMachines.family2machine, fontFace),
		// HACK for cases some product has invalid default face name,
		// i.e. Cairo Regular instead Cairo, or some other font suffixed with Â«BookÂ».
		// To remove this (inner eitherMap to be replaced with def),
		// after hack above removed and Book/Italic/Medium/MediumItalic
		// faces out of use.
		analyzeState, eitherMap(
			lookupTree(indexedStateMachines.family2machine, fontFace + "Regular"),
			analyzeState, eitherMap(
				lookupTree(indexedStateMachines.family2machine, fontFace + "Book"),
				analyzeState, def
			)
		)
	)
}

getMappedFontFamilyFaces(family : string) -> [string] {
	mapFontSwitchingStateMachine(family, \__, __, change -> {
		[change(false, false), change(false, true), change(true, false), change(true, true)]
	}, [])
}

getFontFaceStyle(fontFace : string, style : FontFamilyStyle) -> bool {
	mapFontSwitchingStateMachine(fontFace, \italic, bold, __ -> {
		switch (style : FontFamilyStyle) {
			SBold(): bold;
			SItalic(): italic;
		}
	}, false);
}

canFontFaceStyleBeSwitched(fontFace : string, style : FontFamilyStyle) -> bool {
	fontFace != switchFontFaceStyle(fontFace, style, None());
}

switchFontFaceStyle(fontFace : string, style : FontFamilyStyle, turnOn : Maybe<bool>) -> string {
	mapFontSwitchingStateMachine(fontFace, \italic, bold, change -> {
		switch (style : FontFamilyStyle) {
			SBold(): change(italic, eitherMap(turnOn, idfn, !bold));
			SItalic(): change(eitherMap(turnOn, idfn, !italic), bold);
		};
	}, fontFace)
}

replaceFontFamily(srcFace : string, familyChange : (string) -> string) -> string {
	mapFontSwitchingStateMachine(srcFace, \italic, bold, source -> {
		dstFamily = familyChange(source(false, false));
		mapFontSwitchingStateMachine(dstFamily, \__, __, change -> {
			change(italic, bold)
		}, dstFamily)
	}, srcFace)
}

mapFontFaceToLanguageDefaultFamilyCache : ref Tree<string, ref Tree<string, string>> = ref makeTree();
lang2defaultFontFamily : ref Tree<string, Tree<string, string>> = ref makeTree();

doesLangDefaultFontFamilyExist(lang : string) -> bool {
	containsKeyTree(^lang2defaultFontFamily, lang)
}

setLang2DefaultFontFamilyMap(langsMap : [Pair<string, [Pair<string, string>]>]) -> void {
	lang2defaultFontFamily := fold(langsMap, makeTree(), \acc, lang2map : Pair<string, [Pair<string, string>]> -> {
		setTree(acc, lang2map.first, pairs2tree(lang2map.second))
	});
}

mapFontFaceToLanguageDefaultFamily(srcFace : string, dstLang : string) -> string {
	eitherMap(
		lookupTree(^lang2defaultFontFamily, dstLang),
		\dstFamilyMap -> {
			lookupTreeSet(
				lookupTreeSet(mapFontFaceToLanguageDefaultFamilyCache, dstLang, \__ -> ref makeTree()),
				srcFace,
				\__ -> {
					srcFaces = getMappedFontFamilyFaces(srcFace);
					if (srcFaces == []) {
						srcFace
					} else {
						eitherMap(
							lookupTree(dstFamilyMap, srcFaces[0]),
							\dstFamily -> {
								eitherMap(
									findi(srcFaces, \face -> face == srcFace),
									\kind -> {
										dstFaces = getMappedFontFamilyFaces(dstFamily);
										if (dstFaces == []) {
											srcFace
										} else {
											elementAt(dstFaces, kind, srcFace)
										}
									},
									srcFace
								)
							},
							srcFace
						)
					}
				}
			);
		},
		srcFace
	)
}
