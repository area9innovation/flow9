import sys/target;
import string_utils;
import form/form;
import math/math; // dround
import rendersupport; // makeTextfield, setTextAndStyle, getTextFieldHeight
import runtime; // urlParameter funcs
import ds/treeutils;
import fusion;
import text/unicodecharacters;
import net/urlhash;
import fonts_repo;

export {
	getUniversalFont() -> FontFamily;
	getChineseFont() -> FontFamily;
	getJapaneseFont() -> FontFamily;
	getKoreanFont() -> FontFamily;
	getArabicFont() -> FontFamily;

	// This should be used for "select language" form
	getChineseFontMinimal() -> FontFamily;

	setLang(lang : string) -> void;

	// WARNING! On first call also SETS language according to url flags.
	getLang() -> string;
	getLangB() -> Behaviour<string>;

	// Returns if current language is RTL
	getDefaultRtl() -> bool;
	getDefaultRtlB() -> Transform<bool>;
	// Check if "lang" is one of RTL languages
	isRTLLang(lang : string) -> bool;

	isRtlAlphabet(alphabet : string) -> bool;

	// Returns if BiDi support is enabled
	isBiDiEnabled() -> bool;

	// Helpers to make Form in specific language environment
	// At moment of implementation are used to render Chinese transcript for VideoResource in English product
	renderWithLang(lang : string) -> ((Form) -> Form);
	createWithLang(lang : string, fn : () -> ?) -> ?;

	isCJKLang() -> bool; // is current lang chinese/japanese/korean?
	isChinese(lang : string) -> bool;  // returns true for "zh", "zz" langs

	// Main function for font names mapping. Used by renderForm.
	// Returns special fonts for Chinese, Japanese, Korean;
	// for any other calls function set with setDefaultFontMappingFn.
	getMappedFont(desiredFamily : string, desiredSize : double) -> Pair<string, double>;

	getReverseMappedFontFamily(family : string) -> string;
	setReverseMappedFontFamilyMap(mapping : [Pair<string, string>]) -> void;

	// Set font family mapping for languages processed in standard manner (that is not CJK langs).
	setDefaultFontMappingFn(familyMapping : [Pair<string, string>]) -> void;

	// Set mapping function for languages processed in standard manner (that is not CJK langs).
	// The function accepts font family and size and must return family and size.
	// Note that function may be called by renderForm very often, so it must be fast.
	setDefaultFontMappingFn2(mappingFn : (string, double) -> Pair<string, double>) -> void;

	// override font family for default font (works as defaultFont http-parameter but lower priority)
	setFontFamilyOverride(familyM : Maybe<string>) -> void;

	getNativeLangFromBCP(bcpLang : string) -> string;

	getMappedFontFamily(style : [CharacterStyle]) -> string;

	// Hence arabic letters look smaller, we need adjust relative scale and
	// some other styles for readability.
	// TODO maybe introduce a native that will do a full string scan to detect an alphabet.
	detectAlphabet(text : string) -> string;
	getAlphabetScaling(alphabet : string, fontFamily : string) -> double;
	apply2AlphabetsScaling(alphabet1 : string, alphabet2 : string, styles : [CharacterStyle]) -> [CharacterStyle];
	applyAlphabetStyles(alphabet: string, styles: [CharacterStyle]) -> [CharacterStyle];

	// Reverse array for RTL layout
	arrayRTL(arr : [?]) -> [?];
	arrayRTL2(isRTL : bool) -> ([?]) -> [?];
}

FontParams(mainstream : string, minimal : string);

debugFontMapping = isUrlParameterTrue("debugfontmapping");

relativeScaleArabicMultiplier = 1.4;  // TODO generalize introducing a mapping alphabetâ†’coeficient.

isChinese(lang) {
	lang == "zh" || lang == "zz"
}

cjkLang = ref false;
bidiSupport: ref Maybe<bool> = ref None();

isCJKLang() -> bool {
	^cjkLang
}

getUniversalFont() -> FontFamily {
	// [-Revise-] Maybe this can be improved
	getChineseFont()
}

getAnyUrlParameter(name : string) -> string {
	getUrlParameterDef(name, getUrlHashParameter(name))
}

getFontScaling(family : string) {
	if (startsWith(family, "Tahoma")) {
		if (opengl) 0.95 else 1.0  // QtByteRunner vs flash & win7
	} else if (startsWith(family, "NotoSans")) {
		if (ios() || macosx()) 0.95 else 1.0
	} else if (startsWith(family, "HiraKakuProN-W3")) {
		if (js) 0.95 else 1.0
	} else if (startsWith(family, "MS Gothic")) {
		1.05
	} else if (startsWith(family, "Verdana")) {
		if (js || macosx()) 0.95 else 1.0
	} else if (startsWith(family, "DejaVu Sans")) {
		0.835
	} else if (startsWith(family, "Scheherazade")) {
		1.5
	} else if (startsWith(family, "GeezaPro")) {
		1.2
	} else if (startsWith(family, "Dubai")) {
		1.1
	} else 1.0
}

chineseFontParams : FontParams = {
	if (windows()) {
		if (opengl) {                                           // QtByteRunner
			FontParams("Tahoma", "Tahoma")
		} else if ((cpp || js) && getAnyUrlParameter("lang") != "ch") {
			FontParams("NotoSans", "NotoSansMinimal")
		} else if (windowsxp()) {                               // flash, winxp
			FontParams("Microsoft YaHei", "Microsoft YaHei")
		} else {                                                // flash, win7
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android() || linux()) {
		FontParams("DroidSansFallback", "DroidSansFallback")   // TODO: Check that this is correct. It seems it is the default font already
	} else if (ios() || macosx()) {
		FontParams("Tahoma", "NotoSansMinimal")               // [-Revise-] officialy, Tahoma is not available on iOS
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
}

japaneseFontParams : FontParams = {
	if (windows()) {
		if (opengl) {                                           // QtByteRunner
			FontParams("Tahoma", "Tahoma")
		} else if (cpp || js) {
			FontParams("Meiryo", "NotoSansMinimal")            // Trackman asked Meiryo for Japanese on Windows/javascript
		} else if (windowsxp()) {                               // flash, winxp
			FontParams("Microsoft YaHei", "Microsoft YaHei")
		} else {                                                // flash, win7
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android() || linux()) {
		FontParams("DroidSansFallback", "DroidSansFallback")
	} else if (ios()) {
		if (js)
			FontParams("HiraKakuProN-W3", "Verdana")
		else // cpp
			FontParams("HiraKakuProN-W3", "Verdana")
	} else if (macosx()) {
		FontParams("Meiryo", "Tahoma")                         // Trackman asked Meiryo for Japanese on Mac desktop
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
}

koreanFontParams : FontParams = {
	if (windows()) {
		if (opengl) {                                           // QtByteRunner
			FontParams("Tahoma", "Tahoma")
		} else if (cpp || js) {
			FontParams("MS Gothic", "NotoSansMinimal")        // Trackman wanted MS Gothic for Korean on Windows/javascript
		} else if (windowsxp()) {                               // flash, winxp
			FontParams("Microsoft YaHei", "Microsoft YaHei")
		} else {                                                // flash, win7
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android() || linux()) {
		FontParams("DroidSansFallback", "DroidSansFallback")
	} else if (ios()) {
		if (js)
			FontParams("HiraKakuProN-W3", "Verdana")
		else // cpp
			FontParams("HiraKakuProN-W3", "Verdana")
	} else if (macosx()) {
		FontParams("Verdana", "Tahoma")                       // Trackman asked Verdana for Korean on Mac desktop
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
}

arabicFontParams : () -> FontParams = \ -> {
	if (windows()) {
		if (opengl) {
			FontParams("Tahoma", "Tahoma")
		} else if (windowsxp()) {
			FontParams("Andalus", "Andalus")
		} else {
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android()) {
		FontParams("Tahoma", "Tahoma")
	} else if (linux()) {
		FontParams("DejaVu Sans", "DejaVu Sans")
	} else if (ios()) {
		FontParams("GeezaPro", "GeezaPro")
	} else if (macosx()) {
		FontParams("Tahoma", "Tahoma")
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
}

hebrewFontParams : FontParams = {
	if (windows()) {
		if (opengl) {
			FontParams("Tahoma", "Tahoma")
		} else if (windowsxp()) {
			FontParams("Andalus", "Andalus")
		} else {
			FontParams("Tahoma", "Tahoma")
		}
	} else if (android()) {
		FontParams("Tahoma", "Tahoma")
	} else if (linux()) {
		FontParams("DejaVu Sans", "DejaVu Sans")
	} else if (ios()) {
		FontParams("GeezaPro", "GeezaPro")
	} else if (macosx()) {
		FontParams("Tahoma", "Tahoma")
	} else {
		FontParams("DroidSansFallback", "DroidSansFallback")
	}
}

getChineseFont() -> FontFamily {
	FontFamily(chineseFontParams.mainstream)
}

getJapaneseFont() -> FontFamily {
	FontFamily(japaneseFontParams.mainstream)
}

getKoreanFont() -> FontFamily {
	FontFamily(koreanFontParams.mainstream)
}

getArabicFont() -> FontFamily {
	FontFamily(arabicFontParams().mainstream)
}

getChineseFontMinimal() -> FontFamily {
	FontFamily(chineseFontParams.minimal)
}

//In case of change update getCharacterStyleFromWigiTextStyle
defaultFontFamily_ = "Roboto";
defaultFontSize_ = 11.0;
defaultFontOverride_ = eitherGetUrlValidParameter("defaultFont", isValidIdentifier, idfn, "");
fontFamilyOverride_ : ref Maybe<string> = ref None();

setFontFamilyOverride(familyM : Maybe<string>) -> void {
	fontFamilyOverride_ := familyM;
}

getDefaultFontFaceOverride() -> string {
	if (defaultFontOverride_ != "") defaultFontOverride_
	else either(^fontFamilyOverride_,  defaultFontFamily_);
}

fontOverrides = eitherGetUrlValidParameterM("fontOverrides", \s -> {
	fold(strSplit(s, ","), Some([]), \acc, raw -> {
		eitherMap(acc, \a -> {
			parts1 = strSplit(raw, "*");
			tmp = if (length(parts1) == 2)
				Pair(parts1[0], parts1[1])
			else if (length(parts1) == 1)
				Pair(parts1[0], "1.0")
			else
				Pair("", "");
			parts2 = strSplit(tmp.first, "@");
			if (tmp.first == "")
				None()
			else if (length(parts2) == 2)
				Some(arrayPush(a, Triple(parts2[1], parts2[0], s2d(tmp.second))))
			else if (length(parts2) == 1)
				Some(arrayPush(a, Triple(parts2[0], parts2[0], s2d(tmp.second))))
			else
				None()
		}, None())
	})
}, []);

getMappedFontFn : ref (string, double) -> Pair<string, double> =
	ref \family, size -> Pair(family, size);

// single-entry cache for getMappedFont. Hit rate is 80%.
getMappedFont_cache_key = ref Pair("", -1.0);
getMappedFont_cache_value = ref Pair("", -1.0);

getMappedFont(face : string, size : double) {
	fface = if (face != "" && face != defaultFontFamily_) face else getDefaultFontFaceOverride();
	if (fface != ^getMappedFont_cache_key.first || size != ^getMappedFont_cache_key.second) {
		mappedFont =
			if (fface == "MaterialIcons" || (fface == "'Material Icons'")) {
				Pair("MaterialIcons", size)
			} else {
		 		(^getMappedFontFn)(fface, size);
			}
		getMappedFont_cache_key := Pair(fface, size);
		getMappedFont_cache_value := mappedFont;
	}

	if (debugFontMapping) {
		println("zz mapped font: " + "'"+fface+"' -> " + toString(^getMappedFont_cache_value));
	}

	^getMappedFont_cache_value
}

// This var must be set through setLangCore() function only, because this function sets some other related vars as well.
currentLang = make("");

getLang() {
	if (getValue(currentLang) == "") {
		l = getAnyUrlParameter("forceLang");
		urlLang = if (l == "") getNativeLangFromBCP(getAnyUrlParameter("lang")) else l;
		if (urlLang != "") {
			// next(currentLang, toLowerCase(urlLang));	 // do not assign this var directly, it must be done through setLangCore() only...
			setLangCore(urlLang);                        // [-Revise-] ... however, I'm not sure this function actually must do lang initialization
		}
	}
	getValue(currentLang)
}

getLangB() {
	currentLang;
}

setLang(lang) {
	if (getAnyUrlParameter("forceLang") == "")
		setLangCore(lang);
}

setLangCore(lang0 : string) -> void{
	lang = toLowerCase(lang0);
	if (lang != getValue(currentLang)) {
		if (!cgi) {
			println("setting language to " + toString(lang));
		}
		cjkLang := isChinese(lang) || lang == "ja" || lang == "ko" || lang == "ar" || lang == "he" || lang == "yi";
		updateFontMappingFunction(Some(lang));
		next(currentLang, lang);
		setApplicationLanguage(lang);
	}
	bidiSupport := None();
}

rtlLanguages = ["ar", "he", "yi"];
rtlAlphabets = ["arb", "heb"];

getDefaultRtl() -> bool {
	contains(rtlLanguages, getValue(currentLang));
}

getDefaultRtlB() -> Transform<bool> {
	fcontains(const(rtlLanguages), currentLang);
}

isRTLLang(lang : string) -> bool {
	contains(rtlLanguages, lang);
}

isRtlAlphabet(alphabet : string) -> bool {
	contains(rtlAlphabets, alphabet);
}

isBiDiEnabled() -> bool {
	onlyOnce(bidiSupport, \-> getDefaultRtl() || getAnyUrlParameter("bidi") == "1");
}

// function defining font mapping for non-CJK languages
defaultFontMappingFn : ref (string, double) -> Pair<string, double> = ref \family, size -> Pair(family, size);
reverseFontFamilyMappingTree : ref Tree<string, string> = ref makeTree();

getReverseMappedFontFamily(family : string) -> string {
	lookupTreeDef(^reverseFontFamilyMappingTree, family, family)
}

setReverseMappedFontFamilyMap(mapping : [Pair<string, string>]) -> void {
	reverseFontFamilyMappingTree := pairs2tree(mapping);
}

setDefaultFontMappingFnHelper(mapping : [Pair<string, string>], fallback : bool) -> (string, double) -> Pair<string, double> {
	directTree = pairs2tree(mapping);
	setReverseMappedFontFamilyMap(map(mapping, \p -> Pair(p.second, p.first)));

	if (mapping == []) {
		\family, size -> Pair(family, size)
	} else {
		\family, size -> Pair(
			eitherMap(lookupTree(directTree, family), \ff -> if (fallback && js && getRendererType() == "html") family + "," + ff else ff, family),
			size
		)
	}
}

setDefaultFontMappingFn2(mappingFn : (string, double) -> Pair<string, double>) -> void {
	defaultFontMappingFn := mappingFn;
	updateFontMappingFunction(None());
}

setDefaultFontMappingFn(mapping : [Pair<string, string>]) -> void {
	mapper = setDefaultFontMappingFnHelper(mapping, false);

	setDefaultFontMappingFn2(mapper);
}

cjkFontMappingFn(family : string, size : double) -> Pair<string, double> {
	lang = getValue(currentLang);
	makeFontMedium = \font1 -> font1 + "Medium";
	makeFontSloped = \fam -> {
		slopedStr = if (startsWith(fam, "DejaVu Sans") || startsWith(fam, "DejaVuSans")) "Oblique" else "Italic";
		fam + slopedStr
	};
	makeFontBold = \font1 -> font1 + "Bold";
	makePairs = \font1, font2 -> {[
		Pair(font1, font2),
		Pair(makeFontMedium(font1), makeFontBold(font2)),
		Pair(makeFontSloped(font1), makeFontSloped(font2)),
		Pair(makeFontSloped(makeFontMedium(font1)), makeFontSloped(makeFontBold(font2))),
	]};
	nativeFontParams : Maybe<FontParams> = 
		if (lang == "ja")
			Some(japaneseFontParams)
		else if (lang == "ko")
			Some(koreanFontParams)
		else if (isChinese(lang))
			Some(chineseFontParams)
		else if (lang == "ar") // enable font mapping for arabic
			Some(arabicFontParams())
		else if (lang == "he")
			Some(hebrewFontParams)
		else
			None();
	fontParams = {
		eitherMap(nativeFontParams,
			\nvp -> {
				font = nvp.mainstream;
				mappingPairs = concat(
					if (lang=="ar" && ios() && isUrlParameterTrue("ArabicExtraFonts")) {
						makePairs("Tahoma", font)
					} else {
						makePairs("Roboto", font)
					},
					[
						Pair("Book", font),
						Pair("Bold", makeFontBold(font)),
						Pair("BoldItalic", makeFontSloped(makeFontBold(font))),
						Pair("Italic", makeFontSloped(font))
					],
				);

				mapper = setDefaultFontMappingFnHelper(mappingPairs, true);
				mapper(family, size) |> (\fm -> FontParams(fm.first, fm.first))
			},
			^defaultFontMappingFn(family, size) |> (\fm -> FontParams(fm.first, fm.first))
		)
	};
	Pair(fontParams.mainstream, roundFontSize(size * getFontScaling(fontParams.mainstream)))
}

// This allows setting font and size multiplier in url flag.
// Example: setting font family Meiro instead of Roboto: fontOverrides=Meyrio@Roboto
// Example: setting font size multiplier: fontOverrides=Meyrio*1.2
// You can split several settings with comma.
applyFontOverriding = {
	if (fontOverrides == []) {
		idfn
	} else {
		\fontOverrideMappingFn -> {
			\family : string, size : double -> {
				mapped_FamilySize : Pair<string, double> = fontOverrideMappingFn(family, size);
				eitherMap(
					find(fontOverrides, \o -> o.first == family),
					\o -> Pair(o.second, mapped_FamilySize.second * o.third),
					Pair(mapped_FamilySize.first, mapped_FamilySize.second)
				)
			}
		}
	}
}


renderWithLang(lang : string) -> ((Form) -> Form) {
	\f -> {
		savedLang = ref getLang();
		Constructor2(
			f,
			\ -> {
				savedLang := getLang();
				setLang(lang);
				nop
			},
			\ -> {
				setLang(^savedLang)
			}
		)
	}
}

createWithLang(lang : string, fn : () -> ?) -> ? {
	savedLang = getLang();
	setLang(lang);
	r : ? = fn();
	setLang(savedLang);
	r
}


roundFontSize(size : double) -> double {
	dround(size * 10.0) / 10.0
}

fm_calculateTextMetrics(text, family, size) {
	htmlFont = fontName2fontFace(family);
	families = fontFace2familiesString(htmlFont);
	textField = makeTextfield(families);
	setTextDirection(textField, if (getDefaultRtl()) "rtl" else "ltr");
	setTextAndStyle(textField, text, families, size, fontFace2weight(htmlFont), fontFace2slope(htmlFont), 0x000000, 1.0, 0.0, 0x000000, 0.0);
	fieldH = getTextFieldHeight(textField);
	deleteNative(textField);
	fieldH
}

// Calculate relative difference of height for two font families.
// May be useful for font size mapping.
calcFontSizeMultiplier(referenceFontFamily : string, targetFontFamily : string) -> double {
	referenceFontSize = 72.0;
	referenceText = "Tg";

	referenceFontHeight = fm_calculateTextMetrics(referenceText, referenceFontFamily, referenceFontSize);
	targetFontHeight = fm_calculateTextMetrics(referenceText, targetFontFamily, referenceFontSize);

	if (referenceFontHeight < 8.0 || targetFontHeight < 8.0) {
		// suspicious results, probably one of the heights evaluated incorrectly
		1.0
	} else {
		referenceFontHeight / targetFontHeight
	}
}

//transfer lang code from BCP format to internal flow format
getNativeLangFromBCP(bcpLang : string) -> string {
	bcpLanguageList = [
		Pair("es-mx", "la"),
		Pair("es-es", "es"),
		Pair("en-uk", "en"),
		Pair("en-us", "en"),
		Pair("en-gb", "en-gb"),
		Pair("pt-pt", "pt-pt"),
	];

	if (strContains(bcpLang, "-")) {
		eitherFn(find(bcpLanguageList, \l -> l.first == toLowerCase(bcpLang)), secondOfPair, \-> "en")
	} else {
		toLowerCase(bcpLang)
	}
}

updateFontMappingFunction(langM : Maybe<string>) -> void {
	lang = either(langM, getValue(currentLang));
	getMappedFontFn := {
		if (isCJKLang())
			cjkFontMappingFn
		else
			^defaultFontMappingFn
	} |> applyFontOverriding;
	getMappedFont_cache_key := Pair("", -1.0); // flush getMappedFont cache
}


_fontmapping_boot_ = {
	updateFontMappingFunction(None());
	0;
};

getMappedFontFamily(style : [CharacterStyle]) -> string {
	family = fold(style, defaultFontFamily_, \acc, s -> {
		switch (s) {
			FontFamily(name): name;
			default: acc;
		}
	});
	getMappedFont(family, defaultFontSize_).first
}

detectAlphabet(text : string) -> string {
	getUnicodeAlphabet(getCharCodeAt(text, strlen(text)-1))
}

getAlphabetScaling(alphabet : string, fontFamily : string) -> double {
	if (alphabet == "arb") 1.4 else 1.0
}

get2AlphabetsScaling(alphabet1 : string, alphabet2 : string, styles : [CharacterStyle]) -> double {
	ffam = extractStruct(styles, FontFamily(defaultFontFamily_)).name;
	max(getAlphabetScaling(alphabet1, ffam), getAlphabetScaling(alphabet2, ffam))
}

apply2AlphabetsScaling(alphabet1 : string, alphabet2 : string, styles : [CharacterStyle]) -> [CharacterStyle] {
	fsz = extractStruct(styles, FontSize(defaultFontSize_)).size;
	fontSize = fsz * get2AlphabetsScaling(alphabet1, alphabet2, styles);
	replaceStruct(styles, FontSize(fontSize))
}

applyAlphabetStyles(alphabet: string, styles: [CharacterStyle]) -> [CharacterStyle] {
	ffam = extractStruct(styles, FontFamily(defaultFontFamily_)).name;
	fsz = extractStruct(styles, FontSize(defaultFontSize_)).size;
	ratio = getAlphabetScaling(alphabet, ffam);
	fontSize = fsz * getAlphabetScaling(alphabet, ffam);
	fontFamily = if (alphabet == "arb") strReplace(ffam, "RobotoMedium", "RobotoBold") else ffam;
	replaceStructMany(styles, [FontFamily(fontFamily), FontSize(fontSize)])
}

arrayRTL(arr : [?]) -> [?] {
	arrayRTL2(getDefaultRtl())(arr)
}

arrayRTL2(isRTL : bool) -> ([?]) -> [?] {
	\arr -> if (isRTL) reverseA(arr) else arr
}
