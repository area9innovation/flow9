// Â© Copyright 2011 Area9 Technologies.

import basecolors;
import form/form;
import form/roundshadow; // withRoundedShadowToBackground
import form/paragraph;
import form/formutils;
import form/filters; // ShadowAround
import form/movable;  // SimpleMovable
import form/realhtmlworkaround; // hideAllRealHTML, showAllRealHTML
import ui/focus; // currentKeyboardFocusId, updateKeyboardFocus
import ui/easybutton;  // EasyButton
import ui/texteditors; // SimpleEditor
import ui/stylewrappers; // TextStyle
import form/styleform;

export {
	//
	// Functions that immediately display a dialog box
	//

	// Display a message box with custom buttons, which all close the dialog. Also returns a function to use to close the dialog
	textBox(text : string, buttons: [MessageBoxButton]) -> () -> void;

	textBox2(text : string, customWidth : double, buttons: [MessageBoxButton]) -> () -> void;

	// Displays a message box with text and OK button, which closes the dialog. Used as an FYI for user.
	warningBox(text : string) -> void;
	modalWarningBox(text:string) -> void;
	// returns a closer. Warning will stay until closed in code and have no buttons
	warningBox2(text: string) -> () -> void;

	// Displays a message box with a text in wiki format and OK button, which closes the dialog.
	// To break dependencies. Wikify has to be passed as parameter.
	wikiBox(wikiText : string, makeWiki : (string) -> Form) -> void;

	// Displays an information box with text and OK button. The function is only called when OK wil be clicked. Used as an FYI for user.
	withInformation(text : string, onOK : () -> void) -> void;
	// Displays a confirmation dialog with Yes and No buttons. The function is only called if Yes is clicked.
	withConfirmation(question : string, fn: () -> void) -> void;
	// Displays a confirmation dialog with Yes and No buttons.
	withConfirmation2(question: string, onYes: () -> void, onNo: () -> void) -> void;
	// Displays a dialog with custom Yes and No buttons
	withConfirmation3(question: string, okCaption: string, cancelCaption: string, onOk: () -> void, onCancel: () -> void) -> void;
	// same as above but centeres the paragraph horizontally if centered flag is true
	withConfirmation4(question: string, centered: bool, okCaption: string, cancelCaption: string, onOk: () -> void, onCancel: () -> void) -> void;
	// Displays a modal dialog with custom Yes and No buttons
	modalConfirmation(question: string, okCaption: string, cancelCaption: string, onOk: () -> void, onCancel: () -> void) -> void;

	// Displays the text in a dialog with a Cancel button, and a function that is called when Cancel is clicked
	withCancel(dynamicMessage : Behaviour<string>, fn : ()->void, showBox : DynamicBehaviour<bool>) -> void;

	// Displays a window on a grey background full-screen, returns dispose function
	showModal(window : Form) -> () -> void;
	// The same as showModal but shrinks the form to screen size and aligns it to center.
	showModalFit(window : Form) -> () -> void;
	// The same as showModal but manages RealHTML enabling/disabling, true by default
	showModal2(window : Form, switchRealHTML : bool) -> () -> void;
	// The same as showModal2 but you can specify background gray out style
	showModal3(window : Form, switchRealHTML : bool, grayOutStyle: [GraphicsStyle]) -> () -> void;

	// Displays a dialog with a text input
	askStringInPopup(caption: string, w: double, h: double, initialValue: string, checkValid: (string) -> bool, onOK: (string) -> void) -> void;
	// Extended version of askStringInPopup where can be set function onCancel and function for editor
	askStringInPopup2(caption: string, initialValue: string, checkValid: (string) -> bool, onOK: (string) -> void, onCancel : () -> void, editorFn : (DynamicBehaviour<string>) -> Form) -> void;


	//
	// Functions that build a Form to be used as a dialog
	//

	// Build a popup with a set of clickable buttons below. Any button click will set showBox to 0 (and hide the dialog)
	MessageBox(content : Form, buttons : [MessageBoxButton]) -> Form;
		MessageBoxButton ::= OK, Yes, No, Cancel, MBButton, MBFormButton, MBColorButton;
		OK : (fn : () -> void);
		Yes : (fn : () -> void);
		No : (fn : () -> void);
		Cancel : (fn : () -> void);
		MBButton : (caption: string, hotkey: string, fn: () -> void);
		MBColorButton : (caption : string, hotkey : string, fn : () -> void, color : int);
		// Expects a form that can handle it's own clicks
		MBFormButton : (form: Form);

	// A more configurable version of the above
	MessageBoxWithButtons(borders : MessageBoxBorders, radius : double,
			content : Form, buttons : [MessageBoxButton], showBox : DynamicBehaviour<int>) -> Form;
		MessageBoxBorders : (left : double, top : double, right : double, bottom : double, buttonsBottom : double);

	NiceWindowStyle ::= NiceHeaderStyle, NiceBodyStyle, NiceOnClose, NiceCloseButtonFormFn, NiceDontRememberMaxContentSize;
		NiceHeaderStyle: (style: [NiceHeaderStylePart]);
			NiceHeaderStylePart ::= TextStyle, BackgroundStyle, Padding;

		NiceBodyStyle: (style: [NiceBodyStylePart]);
			NiceBodyStylePart ::= BackgroundStyle, Padding, CornerRadius;

		NiceOnClose: (fn: () -> void);
		NiceCloseButtonFormFn: (fn: (()->void) -> Form);
		NiceDontRememberMaxContentSize: ();

	makeNiceWindow(caption: string, content: Form) -> Form;
	makeNiceWindow2(caption: string, content: Form, style: [NiceWindowStyle]) -> Form;
	setAlternativeNiceWindowStyle(newNiceWindowStyle : [NiceWindowStyle]) -> void;

	// Adds an orange caption line to the form
	makeOrangeWindow(caption: string, content: Form) -> Form;
	makeLiteSkinWindow(caption: string, content: Form) -> Form;
	makeLiteSkinWindow2(caption: string, content: Form) -> Form;
	makeCustomWindow(caption: string, content: Form, style : [GraphicsStyle], textColor : int) -> Form;

	// to avoid cyclic dependency
	withTranslation : ref (string) -> string;

	// for quick change appearance
	setAlternativeMessageBoxStyle(newMessageBoxStyle : MessageBoxStyle) -> void;
	MessageBoxStyle : (buttonFormFn : (string, string, int, double, () -> void) -> Form, backgroundFn : (Form) -> Form, buttonGap: double, defaultOkColor : int);

	// Displays "Initializing language pack" text. Suitable for initTranlations func from translationutils.flow
	translationInitPopup() -> () -> void;

	// after we close dialog we should return focus to element what opened it
	lastFocusedElementAccessFocused = ref make(false);
}



withTranslation = ref \s : string -> s;

highResScale = if (isHighResolution) 2.0 else 1.0;

MessageBox(content, buttons) {
	Scale(const(highResScale), const(highResScale), MessageBoxWithButtons(MessageBoxBorders(10.0, 10.0, 10.0, 10.0, 10.0), 7.0, content, buttons, make(1)))
}

useAltMessageBox = ref false;
defaultMessageBoxStyle = MessageBoxStyle(\caption, hotkey, color, width, fn -> EasyButton(caption, hotkey, color, fn, []), withRoundedShadowToBackground, 10.0, 0x52AE07);
alternativeMessageBoxStyle : ref MessageBoxStyle = ref defaultMessageBoxStyle;

setAlternativeMessageBoxStyle(newMessageBoxStyle) {
	useAltMessageBox := true;
	alternativeMessageBoxStyle := newMessageBoxStyle;
}


MessageBoxWithButtons(borders, radius, content, buttons, showBox) {
	messageBoxStyle = if (^useAltMessageBox) ^alternativeMessageBoxStyle else defaultMessageBoxStyle;
	defColor = messageBoxStyle.defaultOkColor;
	button = messageBoxStyle.buttonFormFn;
	contentWidthB = make(0.0);
	buttonsForm = 	Select(contentWidthB, \contentWidth -> {
		gap = messageBoxStyle.buttonGap;
		widthAdjust = if (borders.right == 0.0 || borders.left == 0.0) 1 else -1; //if we have no borders on left/right, we must shrink a button
		width = (contentWidth - gap * i2d(length(buttons) + widthAdjust) )/i2d(length(buttons));
		Cols(
			interleave(
				map(buttons, \bt ->
						switch (bt : MessageBoxButton) {
							OK(fn) : button(^withTranslation("OK"), "enter", defColor, width, \ -> {next(showBox, 0); fn();});
							Yes(fn) :button(^withTranslation("Yes"), "enter", defColor, width, \ -> {next(showBox, 0); fn();});
							No(fn) : button(^withTranslation("No"), "esc", defColor, width, \ -> {next(showBox, 0); fn();});
							Cancel(fn) : button(^withTranslation("Cancel"), "esc", defColor, width, \ -> {next(showBox, 0); fn();});
							MBButton(cap, hotkey, fn) : button(cap, hotkey, defColor, width, \ -> {next(showBox, 0); fn();});
							MBFormButton(form) : form;
							MBColorButton(cap, hotkey, fn, color): button(cap, hotkey, color, width, \ -> {next(showBox, 0); fn();});
						}
				),
				Fixed(gap, 0.0)
			)
		)
	});

	Select(showBox, \show -> If(show != 0,
		SimpleMovable(
			RoundedTransformBackground(radius, [Fill(0xFFFFFF)], ShadowAround,
				Lines([
					Border(borders.left, borders.top, borders.right, borders.bottom, Inspect([Width(contentWidthB)],content) |> messageBoxStyle.backgroundFn),
					if (!^useAltMessageBox || length(buttons) > 0) Center(Border(0.0, 0.0, 0.0, borders.buttonsBottom, buttonsForm)) else Empty()
				])
			)
		)
	))
}

warningBox(text:string) {
	mbForm = Align(0.5, 0.0,
		Border(20.0, 16.0, 20.0, 16.0,
			Available(const(300.0), const(0.0), Paragraph([TextFragment(text, [FontSize(15.0)])], [])),
		)
	);

	msgBox = MessageBox(mbForm, [OK(nop)]);
	render(Center(msgBox)) |> ignore;
}

warningBox2(text:string) {
	mbForm = Align(0.5, 0.0,
		Border(20.0, 16.0, 20.0, 16.0,
			Available(const(300.0), const(0.0), Paragraph([TextFragment(text, [FontSize(15.0)])], [])),
		)
	);

	msgBox = MessageBox(mbForm, []);
	render(Center(msgBox));
}

modalWarningBox(text:string) {
	mbForm = Align(0.5, 0.0,
		Border(20.0, 16.0, 20.0, 16.0,
			Available(const(300.0), const(0.0), Paragraph([TextFragment(text, [FontSize(15.0)])], [])),
		)
	);

	close = ref nop;
	close := showModal(Center(MessageBox(mbForm, [OK(\ -> (^close)() )])));
	{}
}

wikiBox(wikiText, makeWiki) {
	mbForm = Align(0.5, 0.0,
		Border(20.0, 16.0, 20.0, 16.0,
			Available(const(300.0), const(0.0), makeWiki(wikiText)),
		)
	);

	msgBox = MessageBox(mbForm, [OK(nop)]);
	render(Center(msgBox)) |> ignore;
}

textBox(text:string, buttons: [MessageBoxButton]) {
	textBox2(text, 300.0, buttons)
}

textBox2(text:string, customWidth, buttons: [MessageBoxButton]) {
	form = Center(
		MessageBox(
			Border(10.0, 10.0, 10.0, 10.0,
				Available(const(customWidth), const(0.0),
					Paragraph(
						[TextFragment(text, [FontSize(16.0)])],
						[]
					)
				)
			),
			buttons
		)
	);
	showModal(form);
}

withInformation(text, onOK) {
	closeFn = ref nop;
	closeFn := textBox(text, [OK(\->{^closeFn(); onOK()})])
}

withConfirmation(question:string, fn:()->void){
	withConfirmation2(question, fn, nop)
}

withConfirmation2(question:string, onYes:()->void, onNo: () -> void){
	withConfirmation3(question, ^withTranslation("Yes"), ^withTranslation("No"), onYes, onNo);
}

withConfirmation3(question, okCaption, cancelCaption, fn, onCancel) {
	withConfirmation4(question, false, okCaption, cancelCaption, fn, onCancel);
}

withConfirmation4(question, centered, okCaption, cancelCaption, fn, onCancel) {
	mbForm = Align(0.5, 0.0,
		Border(6.0, 6.0, 6.0, 16.0,
			Available(
				const(300.0), const(0.0),
				Paragraph([TextFragment(question, [FontSize(15.0)])], if (centered) [CenterAlign()] else [])
			)
		)
	);

	buttons = [
		MBButton(okCaption, "Enter", fn),
		MBButton(cancelCaption, "Esc", onCancel)
	];

	msgBox = MessageBox(mbForm, buttons);
	render(Center(msgBox)) |> ignore;
}

modalConfirmation(question, okCaption, cancelCaption, onOk, onCancel) {
	closeWindow = ref nop;

	form = {
		mbForm = Align(0.5, 0.0,
			Border(6.0, 6.0, 6.0, 16.0,
				Available(
					const(300.0), const(0.0),
					Paragraph([TextFragment(question, [FontSize(15.0)])], [])
				)
			)
		);

		buttons = [
			MBButton(okCaption, "Enter",
				\ -> {
					^closeWindow();
					onOk();
				}
			),
			MBButton(cancelCaption, "Esc",
				\ -> {
					^closeWindow();
					onCancel();
				}
			)
		];

		MessageBox(mbForm, buttons) |> Center
	}

	closeWindow := showModal(form);
}


withCancel(dynamicMessage:Behaviour<string>, fn:()->void, showBox:DynamicBehaviour<bool>){
	mbForm = Align(0.5, 0.0,
		Border(6.0, 6.0, 6.0, 16.0,
			Available(
				make(300.0), const(0.0),
				Select(dynamicMessage, \msg -> Paragraph([TextFragment(msg, [FontSize(15.0)])], []))
			)
		)
	);

	buttons: [MessageBoxButton] = [
		Cancel(fn),
	];

	msgBox = MessageBoxWithButtons(MessageBoxBorders(10.0, 10.0, 10.0, 10.0, 10.0), 7.0, mbForm, buttons, cast(select(showBox, \sb -> if (sb) 1 else 0) : Behaviour -> DynamicBehaviour));
	render(Center(msgBox)) |> ignore
}


useAltNiceWindow = ref false;
// Next containers are private. No need to export. Used for performance reasons
NiceWindowStyleContainer : (header: NiceHeaderStyleContainer, window : NiceBodyStyleContainer, close: (()->void)->Form);
	NiceHeaderStyleContainer: (textStyle: [CharacterStyle], backgroundBrush: [GraphicsStyle], padding: double);
	NiceBodyStyleContainer: (backgroundBrush: [GraphicsStyle], padding: double, radius: double);
defaultNiceWindowStyle = NiceWindowStyleContainer(
		NiceHeaderStyleContainer(
			[ Fill(white) ],
			[ Fill(0x043543) ],
			1.0
		),
		NiceBodyStyleContainer(
			[ Fill(white) ],
			4.0,
			4.0
		),
		\closer -> {
			scale = make(0.09);
			Button(Scale(scale, scale, Picture("images/close.png", [])), closer)
		}
	);

alternativeNiceWindowStyle : ref NiceWindowStyleContainer = ref defaultNiceWindowStyle;

appendContainerStyle(current: NiceWindowStyleContainer, new: [NiceWindowStyle]) -> NiceWindowStyleContainer {
	if(length(new) == 0){ // TODO: handle NiceOnClose presented
		current;
	} else {
		headerArr = extractStruct(new, NiceHeaderStyle([]) ).style;
		windowArr = extractStruct(new, NiceBodyStyle([]) ).style;
		newCloseButtonStyleFn = extractStruct(new, NiceCloseButtonFormFn(current.close)).fn;

		newHeaderContainer = if(length(headerArr) > 0) {
			NiceHeaderStyleContainer(
				extractStruct(headerArr, TextStyle(current.header.textStyle)).style,
				extractStruct(headerArr, BackgroundStyle(current.header.backgroundBrush) ).style,
				extractStruct(headerArr, Padding(current.header.padding)).padding
			)
		} else {
			current.header;
		};

		newBodyContainer = if(length(windowArr) > 0) {
			NiceBodyStyleContainer(
				extractStruct(windowArr, BackgroundStyle(current.window.backgroundBrush) ).style,
				extractStruct(windowArr, Padding(current.window.padding) ).padding,
				extractStruct(windowArr, CornerRadius(current.window.radius)).radius
			)
		} else {
			current.window;
		};

		NiceWindowStyleContainer(newHeaderContainer, newBodyContainer, newCloseButtonStyleFn);
	}
}

// [-note-] changes all given style parts from default to newStyle. Keeps(!) other parts of style as default
// [-question-] is it needed to do change from alternative style?
setAlternativeNiceWindowStyle(newStyle : [NiceWindowStyle]) -> void {
	useAltNiceWindow := true;
	alternativeNiceWindowStyle := appendContainerStyle(defaultNiceWindowStyle, newStyle);
}
makeNiceWindow(caption: string, content: Form) -> Form {
	makeNiceWindow2(caption, content, [])
}
// shows NiceWindow in default/alternative style depending on useAltNiceWindow appended with given parts of style
makeNiceWindow2(caption: string, content: Form, style: [NiceWindowStyle]) -> Form {
	makeBorder = \b, f -> Border(b, b, b, b, f);
	centrify = if (contains(style, NiceDontRememberMaxContentSize())) \f -> Center2(f) else \f -> Center(f); //#39463

	currentStyle = if(^useAltNiceWindow) ^alternativeNiceWindowStyle else defaultNiceWindowStyle
		|> \ds -> appendContainerStyle(ds, style);

	radius = currentStyle.window.radius;

	closeFn = fold(style, None(), \acc, s -> switch (s) {
		NiceOnClose(fn): Some(fn);
		default: acc;
	});

	closeButton = eitherMap(closeFn, \closer -> {
			currentStyle.close(closer)
		}, Empty());

	header = Behind(
		\w, h -> {
			if(radius > 0.0)
				topRoundedRect(w, h, radius, currentStyle.header.backgroundBrush)
			else
				Rectangle(w, h, currentStyle.header.backgroundBrush)
		},
		Group([
			makeBorder(
				currentStyle.header.padding,
				Text(caption, currentStyle.header.textStyle) |> centrify
			),
			Align(1.0, 0.5, closeButton)
		])
	);

	windowBackgroundFn = \w, h -> {
		if (radius > 0.0)
			Graphics(roundedRect(w, h, radius), currentStyle.window.backgroundBrush)
		else
			Rectangle(w, h, currentStyle.window.backgroundBrush);
	}

	ui = HeaderFooter(
		header,
		makeBorder(currentStyle.window.padding, content)
			|> centrify,
		Empty()
	);

	BehindShadowAround(windowBackgroundFn, ui);
}

makeOrangeWindow(caption: string, content: Form) -> Form {
	if (isLiteEditStyle())
		makeLiteSkinWindow(caption, content)
	else
		makeCustomWindow(caption, content, [linearGradient(90.0, [0xe6723b, 0xcc5821])], white)
}

makeLiteSkinWindow(caption: string, content: Form) {
	header = Behind(
		\w, h -> topRoundedRect(w, h + 4.0, 2.0, [Fill(0xee5151)]),
		Offset(0.0, 2.0,
			Align(0.5, 0.0,
				Text(caption, [Fill(white), FontFamily("ProximaSemiBold"), FontSize(15.0)])
			)
		)
	);

	ui = HeaderFooter(header, Border(4.0, 4.0, 4.0, 4.0, content), Empty());

	BehindShadowAround(
		\w, h -> {
			Graphics(roundedRect(w, h, 4.0), [Fill(white)])
		},
		ui
	);
}

makeLiteSkinWindow2(caption: string, content: Form) {
	header = Behind(
		\w, h -> topRoundedRect(w, h + 4.0, 2.0, [Fill(0xee5151)]),
		Offset(0.0, 2.0,
			Align(0.5, 0.0,
				Text(caption, [Fill(white), FontFamily("ProximaSemiBold"), FontSize(15.0)])
			)
		)
	);

	ui = HeaderFooter(header, content, Empty());

	BehindShadowAround(
		\w, h -> {
			Graphics(roundedRect(w, h, 4.0), [Fill(white)])
		},
		ui
	);
}

makeCustomWindow(caption: string, content: Form, style : [GraphicsStyle], textColor : int) -> Form {
	header = Behind(
		\w, h -> topRoundedRect(w, h + 2.0, 4.0, style),
		Offset(0.0, 1.0,
			Align(0.5, 0.0,
				Text(caption, [Fill(textColor), FontFamily("Medium"), FontSize(11.0)])
			)
		)
	);

	ui = HeaderFooter(header, Border(4.0, 4.0, 4.0, 4.0, content), Empty());

	BehindShadowAround(
		\w, h -> {
			Graphics(roundedRect(w, h, 4.0), [Fill(0xe0e0e0)])
		},
		ui
	);
}

showModalFit(window : Form) -> () -> void {
	wh = makeWH();
	showModal(Center2(Inspect([ IAvailable(wh) ], shrinkToFitB(wh,window))));
}

showModal(window : Form) -> () -> void {
	showModal2(window, true)
}

showModal2(window : Form, switchRealHTML : bool) -> () -> void {
	showModal3(window, switchRealHTML, [Fill(0xFAFAFA), FillOpacity(0.5)])
}

showModal3(window : Form, switchRealHTML : bool, grayOutStyle: [GraphicsStyle]) -> () -> void {
	widthHeight = makeWH();

	if (switchRealHTML) hideAllRealHTML();

	windowFocused = make(false);

	hidefn = render(
		Group([
			Select(widthHeight, \wh -> {
					Interactive([
						MouseDown(\e -> true),
						MouseMove(\e -> true),
						MouseUp(\e -> true),
						KeyDown2(\handled, e -> true),
						KeyUp2(\handled, e -> true),
						RollOver(nop1),
						RollOut(nop1),
						MouseWheel(nop1),
						FineGrainMouseWheel2(\handled, e -> true)
					],
					Rectangle(wh.width, wh.height, grayOutStyle))
				}
			),
			Inspect([ IAvailable(widthHeight) ],
				ShowWhenReady(Access([AccessRole("dialog"), AccessFocused(windowFocused)], window), 100, \ -> next(windowFocused, true))
			)
		])
	);

	focusId = currentKeyboardFocusId();

	disposed = ref false;
	\ -> {
		if (!^disposed) { // performing dispose twice causes crash
			disposed := true;
			hidefn();
			if (switchRealHTML) showAllRealHTML();
			next(^lastFocusedElementAccessFocused, true);
			updateKeyboardFocus(focusId);	// Return focus to where it was before
		}
	}
}

askStringInPopup(caption: string, w: double, h: double, initialValue: string, checkValid: (string) -> bool, onOK: (string) -> void) {
	simpleEditor = \text -> SimpleEditor(text, w, h, []);
	askStringInPopup2(caption, initialValue, checkValid, onOK, nop, simpleEditor)
}

askStringInPopup2(caption: string, initialValue: string, checkValid: (string) -> bool, onOK: (string) -> void, onCancel : () -> void, editorFn : (DynamicBehaviour<string>) -> Form) {
	closeWindow = ref nop;
	closeMe = \ -> (^closeWindow)();

	form = {
		input = make(initialValue);
		editor = editorFn(input);
		findTextInputForm = \f: Form-> {
			switch(f) {
				TextInput(state, listeners, stateaccess): !extractStruct(state, Multiline(true)).multiline;
				default: false;
			}
		}
		btnOkShortcut = if (isNone(FindForm(editor, findTextInputForm))) "Ctrl+Enter" else "Enter";

		okButton = orangeSkinButtonWithWidth(75.0, ^withTranslation("OK"), select(input, checkValid), btnOkShortcut, \ -> {
			closeMe();
			onOK(getValue(input));
		});

		cancelButton = orangeSkinButtonWithWidth(75.0, ^withTranslation("Cancel"), const(true), "esc", \ -> {
			closeMe();
			onCancel();
		});


    	// Split the caption by newlines - the trailing lines are used as help text
		lines = strSplit(caption, "\n");

		content = Lines([
			Fixed(0.0, 4.0),
			Align(0.5, 0.0,
				frameAround(Border(4.0, 4.0, 4.0, 4.0, editor), 1.0, 0x000000)
			),
			Iff (length(lines) > 1, \ ->
				Text(strGlue(tail(lines), "\n"), [])
			),
			Fixed(0.0, 4.0),
			Align(0.5, 0.0,
				Cols([
					okButton,
					Fixed(8.0, 0.0),
					cancelButton
				])
			),
			Fixed(0.0, 4.0)
		]);

		makeOrangeWindow(firstElement(lines, ""), content) |> Center
	}

	closeWindow := showModal(form);
}

translationInitPopup() {
	form = Background([Fill(white), Stroke(black)], Border(20.0, 20.0, 20.0, 20.0, Text("Initializing Language Pack ...", [FontSize(18.0)])));
	showModalFit(form);
}
