import ui/animate/easing;
import tropic/tropic;

export {
	// creates animation on each change of 'trigger' value
	// first calls beforeEach
	// if 'beforeEach' returns None, animation won't start
	// if 'beforeEach' returns Some('context'), the 'percent' will be repeatedly called
	// with arguments 'context' and current animation percent
	// 'afterLast' is called on end of animation (if there is no new animation running)
	TEasingAnimation(deltaTimer : LazyDeltaTimer, duration : double, bezier : CubicBezierEasing, trigger : Behaviour<?>, beforeEach : (?) -> Maybe<??>, afterLast : (??) -> void, percent : (??, double) -> void, t : Tropic) -> Tropic;

	TEasing(
		start : () -> void,
		stop : () -> void,
		percent : DynamicBehaviour<double>
	);

	makeTEasing(duration : double, bezier : CubicBezierEasing, deltaTimer : LazyDeltaTimer) -> TEasing;
}

TEasingAnimation(deltaTimer : LazyDeltaTimer, duration : double, bezier : CubicBezierEasing, trigger : Behaviour<?>, beforeEach : (?) -> Maybe<??>, afterLast : (??) -> void, percent : (??, double) -> void, t : Tropic) -> Tropic {
	animNumber = make(0);
	animDispose = ref nop;
	TConstruct(
		[
			\ -> \ -> {
				^animDispose();
				animDispose := nop;
			},
			\ -> {
				subscribe2(trigger, \tv -> {
					^animDispose();

					switch(beforeEach(tv)) {
						None(): {
							animDispose := nop;
						}
						Some(context): {
							animnum = getValue(animNumber) + 1;
							next(animNumber, animnum);

							e = makeEasing(duration, bezier, deltaTimer, \ -> {
								if (getValue(animNumber) == animnum) afterLast(context)
							});
							animDispose := subscribe(e.percent, \p -> percent(context, p));
							e.start();
						}
					}
				})
			}
		],
		t
	)
}

makeTEasing(duration : double, bezier : CubicBezierEasing, deltaTimer : LazyDeltaTimer) -> TEasing {
	bezierY = lerpCurve(0., 1., bezier);
	percent = make(0.);
	uns = ref nop;
	passed = ref 0.;

	fn = \p -> if (^uns != nop) {
		passed := p;

		if (p >= duration) {
			dispUns(uns);
			nextDistinct(percent, 1.);
		} else {
			nextDistinct(percent, bezierY(p / duration))
		}
	};

	TEasing(
		\ -> {
			dispUns(uns);
			passed := 0.;
			nextDistinct(percent, 0.);
			deltaTimer.attach();

			uns := {
				us = subscribe(deltaTimer.timer, \dt -> fn(^passed + dt));
				\ -> {
					us();
					deltaTimer.detach();
				}
			}
		},
		\ -> {
			dispUns(uns);
			nextDistinct(percent, 0.);
		},
		percent
	)
}