// Â© Copyright 2013 Area9 Innovation. All rights reserved

export {
	// Nice button: Automatically fits the text, finds good font color, does nice on hover and on press from the base color. Don't worry about it, it will look good
	EasyButton(caption : string, shortcut : string, color : int, fn : () -> void, style : [EasyButtonStyle]) -> Form;

		EasyButtonStyle ::= FormButtonStyle, CharacterStyle, EasyButtonRegionStyle;
		EasyButtonRegionStyle ::= EasyButtonRectRegion, EasyButtonBevelRegion, EasyButtonCapitalizedRectRegion; 
		EasyButtonRectRegion : (width : double, height : double);
		EasyButtonCapitalizedRectRegion : (width : double, height : double);
		EasyButtonBevelRegion : ();
}

import ui/buttons;
import colorspace;

brushFromColor(c : int) -> [GraphicsStyle] {
	colorBrush(c, multiplyColor(c, 0.8));
}

hoverBrushFromColor(c : int) -> [GraphicsStyle]{
	colorHoverBrush(multiplyColor(c, 0.8), c)
}

pressedBrushFromColor(c : int) -> [GraphicsStyle] {
	colorPressedBrush(c, multiplyColor(c, 0.95), multiplyColor(c, 0.75))
}

roundButtonText(t : string, fontColor : int,style : [GraphicsStyle], charStyle : [CharacterStyle]) -> Form {
	r = 6.0;

	border = fold(charStyle, 2.0, \acc, s : CharacterStyle -> switch (s : CharacterStyle) {
		FontSize(d): d / 5.0;
		default: acc;
	});

	Behind(\w, h -> {
			bevelRoundRect(w, h, r, r, r, r, true, 3.0, style)	
		}, 
		Border(20.0, border, 20.0, border * 1.5, 
			Text(t, concat([FontSize(13.0), Fill(fontColor)], charStyle))
		)
	);
}

easyButtonRectStyle(enabled: bool, hover : bool, bkColor : int) -> [GraphicsStyle] {
	grayColor = color2gray(bkColor);
	halfGrayColor = multiplyColor(grayColor, 0.5);
	hliteColor = multiplyColor(bkColor, 1.25);
	rectColor =
		if (enabled && hover) 
			hliteColor
		else if (enabled)
			bkColor
		else
		if (!enabled && hover) 
			halfGrayColor
		else	
			grayColor;
	[Fill(rectColor), StrokeWidth(0.0)];
}

rectButtonText(enabled: bool, hover : bool, t : string, fontColor : int,  bkColor : int, region : EasyButtonRectRegion, charStyle : [CharacterStyle]) -> Form {
	Background(easyButtonRectStyle(enabled, hover, bkColor), 
		Available(const(region.width), const(region.height),
			Group([
				Fixed(region.width, region.height),
				Align(0.5, 0.5, Text(t, concat([Fill(fontColor)], charStyle)))
	])))
}

rectButtonCapitalizedText(enabled: bool, hover : bool, t : string, fontColor : int,  bkColor : int, region : EasyButtonCapitalizedRectRegion, charStyle : [CharacterStyle]) -> Form {
	border = fold(charStyle, 2.0, \acc, s : CharacterStyle -> switch (s : CharacterStyle) {
		FontSize(d): d / 5.0;
		default: acc;
	});
	Background(easyButtonRectStyle(enabled, hover, bkColor), 
		Available(const(region.width), const(region.height),
			Group([
				Fixed(region.width, region.height),
				Border(0.0, border, 0.0, 0.0,  Align(0.5, 0.5, Text(t, concat([Fill(fontColor)], charStyle))))
	])))
}

easyButtonSelectRegion( enabled: bool, hover : bool, t : string, fontColor : int, regionStyle : [EasyButtonRegionStyle], color : int, charStyle : [CharacterStyle]) -> Form {
	if (length(regionStyle) == 0) 
		roundButtonText(t, fontColor, brushFromColor(color), charStyle)
	else {
		switch(regionStyle[0]) {
			EasyButtonCapitalizedRectRegion(w,h): rectButtonCapitalizedText(enabled, hover, t, fontColor, color, EasyButtonCapitalizedRectRegion(w, h), charStyle);
			EasyButtonRectRegion(w, h) : rectButtonText(enabled, hover, t, fontColor, color, EasyButtonRectRegion(w, h), charStyle);
			EasyButtonBevelRegion() : roundButtonText(t, fontColor, brushFromColor(color), charStyle);
		}
	}
}

EasyButton(caption : string, shortcut : string, color : int, fn : () -> void, style : [EasyButtonStyle]) -> Form {
	// Find out whether the text should be white or black
	hsb = rgb2hsb(int2rgb(color));
	font = if (hsb.b > 90) 0x000000 else 0xffffff;

	buttonStyle : [FormButtonStyle] = filterButtonStyle(style);
	fontStyle : [CharacterStyle] = filterCharacterStyle(style);
	regionStyle : [EasyButtonRegionStyle] = filterRegionStyle(style);

	Filter(if (mobile) [] else [DropShadow([Placement(0.0, 0.0)])], 
		CustomFormButton(
			easyButtonSelectRegion(true, false, caption, font, regionStyle, color, fontStyle), 
			fn,
			shortcut,
			concat(
				[
					BtnHoveredForm(easyButtonSelectRegion(true, true, caption, font, regionStyle, color, fontStyle)),
					BtnPressedForm(easyButtonSelectRegion(true, true, caption, font, regionStyle, color, fontStyle)),
					BtnDisabledForm(easyButtonSelectRegion(false, false, caption, font, regionStyle, color, fontStyle))
				], buttonStyle
			)
		)
	)
}

filterButtonStyle(style : [EasyButtonStyle]) -> [FormButtonStyle] {
	fold(style, [], \acc, s -> {
		switch (s : EasyButtonStyle) {
			ButtonHighlighted(highlighted): arrayPush(acc, s);
			ButtonDescription(description): arrayPush(acc, s);
			OnButtonMouseInside(inside): arrayPush(acc, s);
			ButtonTabindex(tabindex): arrayPush(acc, s);
			ButtonHint(hint): arrayPush(acc, s);
			BtnManualHovering(state): arrayPush(acc, s);
			ButtonRepeatClick(interval): arrayPush(acc, s);
			ButtonEnabled(enabled): arrayPush(acc, s);
			BtnHoveredForm(form): arrayPush(acc, s);
			BtnPressedForm(form): arrayPush(acc, s);
			ButtonHintForm(delay, hint): arrayPush(acc, s);
			BtnHighlightedForm(form): arrayPush(acc, s);
			BtnDisabledForm(form): arrayPush(acc, s);
			default : acc;
		}
	});
}

filterCharacterStyle(style : [EasyButtonStyle]) -> [CharacterStyle] {
	fold(style, [], \acc, s -> {
		switch (s : EasyButtonStyle) {
			Sharpness(sharpness, antiAliasType, gridFitType): arrayPush(acc, s);
			Fill(color): arrayPush(acc, s);
			FontSize(size): arrayPush(acc, s);
			BackgroundFill(color): arrayPush(acc, s);
			BackgroundFillOpacity(opacity): arrayPush(acc, s);
			LetterSpacing(n): arrayPush(acc, s);
			FillOpacity(opacity): arrayPush(acc, s);
			FontFamily(name): arrayPush(acc, s);
			default : acc;
		}
	});
}

filterRegionStyle(style : [EasyButtonStyle]) -> [EasyButtonRegionStyle] {
	fold(style, [], \acc, s -> {
		switch (s : EasyButtonStyle) {
			EasyButtonCapitalizedRectRegion(w, h): arrayPush(acc, s);
			EasyButtonRectRegion(w, h): arrayPush(acc, s);
			EasyButtonBevelRegion(): arrayPush(acc, s);
			default : acc;
		}
	});
}
