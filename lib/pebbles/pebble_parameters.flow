import pebbles/pebble_controller;
import sys/leavewarning;

export {
	// Wrap the part of the screen which dependent on the current pebble parameters
	// with MLinkPebbleParameters or MSelectPebble*Parameter.
	// MSelectPebble*Parameter functions can be used only to read the current value of the parameter,
	// and MLinkPebbleParameters can be used for full control of the parameters.

	// ** MLinkPebbleParameters **
	// You can set up a separate handler for each parameter you want to track:
	// - update parameter by changing corresponding behaviour (valueB)
	// - receive updates of the parameter value from outside using onChange callback
	// Simply speaking `MLinkPebbleParameters` is MConstruct wrapper, `PebbleParameterLink` is `subscribe` wrapper

	// NOTE: View should not create multiple MLinkPebbleParameters for the same parameter.
	// In other words, each parameter must have only one MLinkPebbleParameters.

	// NOTE: This mechanism is only to track parameters of the last path part while the pebble path itself stays the same
	// (i.e. pebble mask). Pebble path changes are handled by PebbleController (see pebble_controller.flow).
	// In other words, you can only track parameters changes on the current (last) level.
	MLinkPebbleParameters(controller : PebbleController, handlers : [PebbleParameterLink], m : Material) -> Material;

		PebbleParameterLink ::= PebbleIntLink, PebbleStringLink, PebbleBoolLink,
			PebbleBoolBidirectionalLink, PebbleDoubleBidirectionalLink, PebbleCustomBidirectionalLink;

			// NOTE: Initial valueB will be rewritten by corresponding value from the current pebble
			PebbleStringLink : (
				parameter : string,
				valueB : DynamicBehaviour<string>,
				onChange : (string) -> void,
				action : PebbleAction
			);

			// NOTE: as for now we consider negative values and zero as neutral and remove from pebble on update
			// In other words it works only with positive numbers! Use `PebbleStringLink` if you need more
			PebbleIntLink : (
				parameter : string,
				valueB : DynamicBehaviour<int>,
				onChange : (int) -> void,
				action : PebbleAction
			);

			PebbleBoolLink : (
				parameter : string,
				valueB : DynamicBehaviour<bool>,
				onChange : (bool) -> void,
				action : PebbleAction
			);

			PebbleBoolBidirectionalLink : (
				parameter : string,
				valueB : DynamicBehaviour<bool>,
				onParameterChange : (string) -> bool,
				onValueChange : (bool) -> string,
				action : PebbleAction
			);

			PebbleDoubleBidirectionalLink : (
				parameter : string,
				valueB : DynamicBehaviour<double>,
				onParameterChange : (string) -> double,
				onValueChange : (double) -> string,
				action : PebbleAction
			);

			PebbleCustomBidirectionalLink : (
				parameter : string,
				valueT : Transform<string>,
				onParameterChange : (string) -> void,  // call it when pebble has been changed in UI to adjust valueT to the new value
				onValueChange : () -> void,  // call it when valueT get a new value
				action : PebbleAction
			);

		// How do we want to handle pebble parameter update?
		PebbleAction ::= RecordURLChange, RecordURLRestoreOrChangeParametersControlled, DoNotRecord, RecordURLChangeCheckPebble;
			// change URL that will be stored in browser history
			RecordURLChange : ();
			// will try to restore last pebble from stack with the same parameter and value
			// or make new one with only that parameter and value
			// shared parameters will be passed from tabs to tabs it's useful in case of some parameters
			// have to be chosen for all tabs on current pebble level
			// fn modifies pebble that is going to be set
			// can be used for setting initial pebble parameters e.g.
			RecordURLRestoreOrChangeParametersControlled(shared : [string], fn : (Pebble, restored : bool) -> Pebble);
			// don't handle this event using pebbles
			DoNotRecord : ();
			// allow to modify checkPebble function (usefull for pebble parameter global functionality)
			RecordURLChangeCheckPebble : (fn : () -> bool);

	RecordURLRestoreOrChange() -> RecordURLRestoreOrChangeParametersControlled;
	RecordURLRestoreOrChangeParameters(shared : [string]) -> RecordURLRestoreOrChangeParametersControlled;

	makeDummyPebbleParameterLink() -> PebbleParameterLink;

	// Use this helpers if you do not need a full PebbleParameterLink,
	// if you need just selecting parameter value without modifying it.
	MSelectPebbleStringParameter(
		controller : PebbleController,
		parameterName : string,
		fn : (Transform<string>) -> Material
	) -> Material;
	MSelectPebbleIntParameter(
		controller : PebbleController,
		parameterName : string,
		fn : (Transform<int>) -> Material
	) -> Material;
	MSelectPebbleBoolParameter(
		controller : PebbleController,
		parameterName : string,
		fn : (Transform<bool>) -> Material
	) -> Material;
	// Select multiple parameters as strings
	MSelectPebbleParameters(
		controller : PebbleController,
		parametersNames : [string],
		display : (parameterName2beh : (string) -> Behaviour<string>) -> Material
	) -> Material;

	// Bunch of helpers to simplify PebbleParameterLink creation in case they are used as triggers of some event.
	// Event is triggered when value is non-empty, disposer sets value back to empty.
	/*

	Useful for showing dialogs, for example:

		showDialogB = make(false);

		MLinkPebbleParameters(state.pebbleController,
			[
				makePebbleBoolTrigger(
					"show_dialog",
					showDialogB,
					\isRunningB, disposer -> {
						ShowMDialog(
							state.manager,
							fnot(isRunningB),
							[
						        MDialogActions([
						            MTextButton(_("OK"), disposer, [], []),
						        ])

							],
							MText("Hello world", [])
						)
					},
					RecordURLChange()
				)
			],
			... // body of the view
		)

	*/
	//
	// NOTE: in case you need to show dialog for editing content items, there is a nice helper
	// 	`makePebbleStringEditDialogTrigger` in pebble_utils.flow
	// 	that will also provide an error message if content item is not found
	makePebbleStringTrigger(
		parameter : string,
		valueB : DynamicBehaviour<string>,
		onValue : (value : string, isRunningB : Transform<bool>, disposer : () -> void) -> void,
		action : PebbleAction
	) -> PebbleStringLink;

	makePebbleIntTrigger(
		parameter : string,
		valueB : DynamicBehaviour<int>,
		onValue : (value : int, isRunningB : Transform<bool>, disposer : () -> void) -> void,
		action : PebbleAction
	) -> PebbleIntLink;

	makePebbleBoolTrigger(
		parameter : string,
		valueB : DynamicBehaviour<bool>,
		onTrue : (isRunningB : Transform<bool>, disposer : () -> void) -> void,
		action : PebbleAction
	) -> PebbleBoolLink;

	// Wrap part of the screen that depend on given pebble parameter in order to show confirmation dialog
	// when this parameter is about to be changed.
	// You can add an array of parameters & values in a single place, and confirmation function will be
	// called once if at least one parameter from whole array was changed.

	// Given async function will be called every time the parameter changes it's value from the expected one.
	//
	// NOTE: use MTabConfirmSwitch style instead if you want to add confirmation dialog for one of the pebbled tabs (buildCustomPebbledTabs)
	MConfirmPebbleParameterSwitch(
		controller : PebbleController,
		parameters : [KeyValue], // pairs of parameters & values
		confirm : (callback : (/* approve or cancel */ bool) -> void) -> void,
		warn : Maybe<() -> bool>, // it will add leaveHandler on top, pass None() if you don't need it
		m : Material
	) -> Material;

	MConfirmPebbleParameterSwitch2(
		controller : PebbleController,
		parameters : [KeyValue], // pairs of parameters & values
		confirm : (old : Pebble, new : Pebble, callback : (/* approve or cancel */ bool) -> void) -> void,
		warn : Maybe<() -> bool>, // it will add leaveHandler on top, pass None() if you don't need it
		m : Material
	) -> Material;

	/*

	This mechanism can be used to show save changes dialog when user is about to change screen. Example:

		MConfirmPebbleParameterSwitch(
			pebbleController,
			[KeyValue("screen", "myscreen")],
			\confirm -> {
				closeB = make(false);
				onClose = \x -> {
					next(closeB, true);
					confirm(x);
				}
				ShowMDialog(
					state.manager,
					closeB,
					[
				        MDialogUseFrame(),
				        MDialogActions([
				            MTextButton(_("SAVE"), \ -> {
				                saveMyChanges(\-> onClose(true));
				            }, [], []),
				            MTextButton(_("DON'T SAVE"), \ -> onClose(true), [], []),
				            MTextButton(_("CANCEL"), \ -> onClose(false), [], []),
				        ])

					],
					MText("Do you want to save changes?", [])
				)
			},
			content
		)

	*/

	// TODO: rename to `makePebbleParameterName`
	makePebbleTabUid(s : string) -> string;
	pinPebbleParameterDialog(
		manager : MaterialManager,
		controller : PebbleController,
		pinnable : [Pair<string, (Pebble) -> bool>]
	) -> void;
}

MLinkPebbleParameters(controller : PebbleController, handlers : [PebbleParameterLink], m : Material) -> Material {
	if (debugPebbles()) {
		println("MLinkPebbleParameters with " + i2s(length(handlers)) + " parameters:\n"
			+ superglue(handlers, \handler -> {
				"\t" + switch (handler) {
					PebbleIntLink(parameter, valueB, onChange, action): "int " + parameter + "=" + i2s(getValue(valueB));
					PebbleStringLink(parameter, valueB, onChange, action): "str " + parameter + "=" + getValue(valueB);
					PebbleBoolLink(parameter, valueB, onChange, action): "bool " + parameter + "=" + b2s(getValue(valueB));
					PebbleBoolBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, action): "bidi " + parameter + "=" + b2s(getValue(valueB));
					PebbleDoubleBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, action): "double " + parameter + "=" + d2s(getValue(valueB));
					PebbleCustomBidirectionalLink(parameter, valueT, onParameterChange, onValueChange, action): "custom " + parameter + "=" + fgetValue(valueT);
				}
			}, "\n")
		);
	}
	callstack = if (debugPebblesLevel() > 1) captureStringCallstack() else "";
	lastPathPartName = getLastPathPartName(controller);
	// as old view is disposed after the new one is constructed we must check that we are not interfering in new view' pebble
	checkPebble = \-> lastPathPartName == getLastPathPartName(controller);

	handlerParameters = map(handlers, \handler -> handler.parameter);
	constructedFlags = map(handlers, \__ -> make(true));
	MSelectPebbleParameters(
		controller,
		handlerParameters,
		\parameter2beh -> {
			MGetManager(\manager -> {
				MConstruct(
					concatA(mapi(handlers, \i, handler -> {
						if (handler.action == DoNotRecord() || controller.dummy || handler.parameter == "") {
							[
								// call onChange on every valueB update if user don't care about pebbles
								callOnChangeOnParameterChange(manager, controller, handler, callstack)
							]
						} else {
							nextDistinct(constructedFlags[i], false);
							[
								makeSubscribe(parameter2beh(handler.parameter), \value -> {
									nextDistinct(constructedFlags[i], true);
									if (fgetValue(manager.pebblesEnabled)) {
										changeParameterValue(handler, value, callstack, \ -> {
											checkPebble() || checkCustomCheckPebble(handler.action)();
										});
									}
								}),
								setViewOnParameterChange(controller, handler),
								\ -> {
									updateBehaviour(controller.handledParametersB, \tree -> {
										cnt = lookupTreeDef(tree, handler.parameter, 0);
										setTree(tree, handler.parameter, cnt + 1);
									});
									\ -> {
										updateBehaviour(controller.handledParametersB, \tree -> {
											cnt = lookupTreeDef(tree, handler.parameter, 0);
											if (cnt == 1) {
												removeFromTree(tree, handler.parameter);
											} else {
												setTree(tree, handler.parameter, cnt - 1);
											}
										});
									}
								},
							];
						}
					})),
					// We need to make sure that all subscribers are created before showing the content
					MIfLazy(fands(constructedFlags, true), \constructed -> {
						if (constructed) {
							// Some destructors may still be executed, so counts are not correct immediately.
							// For example, it happens when switching to previous tab.
							deferred(\ -> {
								handledParameters = getValue(controller.handledParametersB);
								iter(handlerParameters, \parameter -> {
									cnt = lookupTreeDef(handledParameters, parameter, 0);
									if (cnt > 1) {
										println("WARNING: Current view is handling pebble parameter `" + parameter + "` multiple times, it's wrong");
									}
								});
							});
							m;
						} else {
							MEmpty();
						}
					})
				)
			})
		}
	)
}

MSelectPebbleParameters(
	controller : PebbleController,
	parametersNames : [string],
	display : (parameterName2beh : (string) -> Behaviour<string>) -> Material
) -> Material {
	parametersTree = keys2tree(parametersNames, \key -> make(""));
	if (sizeTree(parametersTree) < length(parametersNames)) {
		notUnique = getTreeKeys(filterTree(values2arrayTree(parametersNames, idfn), \__, values -> length(values) > 1));
		println("ERROR in MSelectPebbleParameters: Some parameters are not unique: " + toString(notUnique));
	}
	MConstruct(
		convertTreeToArray(parametersTree, \key, valueB -> {
			makeCurrentPebbleLastParameterSubscribe(controller, key, \value -> {
				//println("MSelectPebbleParameters, key=" + key + ", value=" + value);
				nextDistinct(valueB, urlDecode(value));
			});
		}),
		display(\name -> lookupTreeDef(parametersTree, name, const("")))
	);
}

MSelectPebbleStringParameter(
	controller : PebbleController,
	parameterName : string,
	fn : (Transform<string>) -> Material
) -> Material {
	MSelectPebbleAnyParameter(controller, parameterName, idfn, fn);
}

MSelectPebbleIntParameter(
	controller : PebbleController,
	parameterName : string,
	fn : (Transform<int>) -> Material
) -> Material {
	MSelectPebbleAnyParameter(controller, parameterName, s2i, fn);
}

MSelectPebbleBoolParameter(
	controller : PebbleController,
	parameterName : string,
	fn : (Transform<bool>) -> Material
) -> Material {
	MSelectPebbleAnyParameter(controller, parameterName, s2b, fn);
}

MSelectPebbleAnyParameter(
	controller : PebbleController,
	parameterName : string,
	string2value : (string) -> ?,
	fn : (Transform<?>) -> Material
) -> Material {
	valueB = make("");
	MConstruct(
		[makeCurrentPebbleLastParameterSubscribe(controller, parameterName, \value -> {
			nextDistinct(valueB, urlDecode(value));
		})],
		fn(fselectLift(valueB, string2value))
	);
}

RecordURLRestoreOrChange() -> RecordURLRestoreOrChangeParametersControlled {
	RecordURLRestoreOrChangeParameters([])
}

RecordURLRestoreOrChangeParameters(shared : [string]) -> RecordURLRestoreOrChangeParametersControlled {
	RecordURLRestoreOrChangeParametersControlled(shared, \p, __ -> p)
}

makeDummyPebbleParameterLink() -> PebbleParameterLink {
	PebbleStringLink("", make(""), nop1, DoNotRecord())
}

// Process new value from current pebble parameter
changeParameterValue(handler : PebbleParameterLink, value : string, callstack : string, checkPebble : () -> bool) -> void {
	switch (handler) {
		PebbleStringLink(parameter, valueB, onChange, __): {
			urlDecodedValue = urlDecode(value);
			printPebbleCallStackInfo(parameter, urlDecodedValue, callstack);
			nextDistinct(valueB, urlDecodedValue);
			if (checkPebble()) onChange(urlDecodedValue);
		};
		PebbleIntLink(parameter, valueB, onChange, __): {
			printPebbleCallStackInfo(parameter, value, callstack);
			nextDistinct(valueB, s2i(value));
			if (checkPebble()) onChange(s2i(value));
		};
		PebbleBoolLink(parameter, valueB, onChange, __): {
			printPebbleCallStackInfo(parameter, value, callstack);
			nextDistinct(valueB, s2b(value));
			if (checkPebble()) onChange(s2b(value));
		};
		PebbleBoolBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, __): {
			printPebbleCallStackInfo(parameter, value, callstack);

			if (checkPebble()) {
				nextDistinct(valueB, onParameterChange(value));
			}
		};
		PebbleDoubleBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, __): {
			printPebbleCallStackInfo(parameter, value, callstack);

			if (checkPebble()) {
				nextDistinct(valueB, onParameterChange(value));
			}
		};
		PebbleCustomBidirectionalLink(parameter, valueT, onParameterChange, onValueChange, __): {
			printPebbleCallStackInfo(parameter, value, callstack);
			if (checkPebble()) {
				onParameterChange(value);
			}
		}
	}
}

// Process new value from dynamic behavior (UI event)
setViewOnParameterChange(controller : PebbleController, handler : PebbleParameterLink) -> () -> () -> void {
	switch (handler) {
		PebbleStringLink(parameter, valueB, __, record): {
			setViewOnParameterChange2(controller, parameter, valueB, idfn, record)
		}
		PebbleIntLink(parameter, valueB, __, record): {
			setViewOnParameterChange2(controller, parameter, valueB, \value -> if (value <= 0) "" else i2s(value) , record)
		}
		PebbleBoolLink(parameter, valueB, __, record): {
			setViewOnParameterChange2(controller, parameter, valueB, \v -> if (v) b2s(v) else "", record)
		}
		PebbleBoolBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, record): {
			setViewOnParameterChange2(controller, parameter, valueB, onValueChange, record);
		}
		PebbleDoubleBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, record): {
			setViewOnParameterChange2(controller, parameter, valueB, onValueChange, record);
		}
		PebbleCustomBidirectionalLink(parameter, valueT, onParameterChange, onValueChange, record): {
			setViewOnParameterChange2(controller, parameter, valueT, \v -> {onValueChange(); v;}, record);
		}
	}
}

setViewOnParameterChange2(
	controller : PebbleController,
	parameter : string,
	valueB : Transform<?>,
	converValueToString : (?) -> string,
	action : PebbleAction
) -> () -> () -> void {
	extendPebble = \val -> extendCurrentPebbleWithParameter(controller, parameter, converValueToString(val));
	tryToRestorePebble = \val, shared, fn -> restoreLastPebbleWithParameter(controller, parameter, converValueToString(val), shared, fn);

	makeSubscribe(valueB, \value -> {
		updatePinnedParameter(parameter, converValueToString(value));
		pebble = switch (action : PebbleAction) {
			RecordURLChange(): extendPebble(value);
			RecordURLRestoreOrChangeParametersControlled(shared, modify): tryToRestorePebble(value, shared, modify);
			DoNotRecord(): extendPebble(value);
			RecordURLChangeCheckPebble(__): extendPebble(value);
		}
		setViewFromPebble(controller, pebble);
	})
}

// It will try to find last pebble in stack which is same type with current pebble but contains these parameter and value in last pathPart
// otherwise it will replace last pathpart of current pebble with only one passed parameter
restoreLastPebbleWithParameter(
	controller : PebbleController,
	parameter : string,
	value : string,
	shared : [string],
	modify : (Pebble, bool) -> Pebble
) -> Pebble {
	// there is no sense to find pebble with empty parameter in stack
	if (value == "") {
		extendCurrentPebbleWithParameter(controller, parameter, value)
	} else {
		currentPebble = getCurrentPebble(controller);
		currentPPName = getLastPathPart(currentPebble, makeEmptyPathPart()).name;
		pp = PathPart(currentPPName, [KeyValue(parameter, value)]);
		defPebble = replacePebbleLastPathPart(currentPebble, pp);
		foundPebbleM = findLastPebbleInStackM(controller, pp, defPebble);
		modify(
			setLastPathPartParameters(
				either(foundPebbleM, defPebble),
				getLastPathPartParametersDefs(currentPebble, map(shared, \s -> KeyValue(s, "")))
			),
			isSome(foundPebbleM)
		)
	}
}

// Dummy process new value from dynamic behavior (UI event)
callOnChangeOnParameterChange(manager : MaterialManager, controller : PebbleController, handler : PebbleParameterLink, callstack : string) -> () -> () -> void {
	switch (handler) {
		PebbleStringLink(parameter, valueB, onChange, __): {
			makeSubscribe(valueB, \value -> {
				if (getValue(manager.pebblesEnabled)) {
					printPebbleCallStackInfo(parameter, value, callstack);
					onChange(value);
				}
			});
		}
		PebbleIntLink(parameter, valueB, onChange, __): {
			makeSubscribe(valueB, \value -> {
				if (getValue(manager.pebblesEnabled)) {
					printPebbleCallStackInfo(parameter, i2s(value), callstack);
					onChange(value);
				}
			});
		}
		PebbleBoolLink(parameter, valueB, onChange, __): {
			makeSubscribe(valueB, \value -> {
				if (getValue(manager.pebblesEnabled)) {
					printPebbleCallStackInfo(parameter, b2s(value), callstack);
					onChange(value);
				}
			});
		}
		PebbleBoolBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, __): {
			makeSubscribe(valueB, \value -> {
				if (getValue(manager.pebblesEnabled)) {
					printPebbleCallStackInfo(parameter, onValueChange(value), callstack);
				}
			});
		}
		PebbleDoubleBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, record): {
			makeSubscribe(valueB, \value -> {
				if (getValue(manager.pebblesEnabled)) {
					printPebbleCallStackInfo(parameter, onValueChange(value), callstack);
				}
			});
		}
		PebbleCustomBidirectionalLink(parameter, valueT, onParameterChange, onValueChange, record): {
			makeSubscribe(valueT, \value -> {
				if (getValue(manager.pebblesEnabled)) {
					printPebbleCallStackInfo(parameter, value, callstack);
				}
			});
		}
	}
}

printPebbleCallStackInfo(parameter : string, value : string, callstack : string) -> void {
	if (debugPebbles()) {
		println("Pebble parameter `" + parameter + "` changed it's value to `" + value + "`");
		if (callstack != "") println(callstack);
	}
}

makePebbleStringTrigger(
	parameter : string,
	valueB : DynamicBehaviour<string>,
	onValue : (value : string, isRunningB : Transform<bool>, disposer : () -> void) -> void,
	action : PebbleAction
) -> PebbleStringLink {
	PebbleStringLink(
		parameter,
		valueB,
		\value -> if (value != "") {
			disposer = \-> deferred(\ -> next(valueB, ""));
			onValue(value, fnot(feq(valueB, "")), disposer)
		},
		action
	)
}

makePebbleIntTrigger(
	parameter : string,
	valueB : DynamicBehaviour<int>,
	onValue : (value : int, isRunningB : Transform<bool>, disposer : () -> void) -> void,
	action : PebbleAction
) -> PebbleIntLink {
	PebbleIntLink(
		parameter,
		valueB,
		\value -> if (value != 0) {
			disposer = \-> deferred(\ -> next(valueB, 0));
			onValue(value, fnot(feq(valueB, 0)), disposer)
		},
		action
	)
}

makePebbleBoolTrigger(
	parameter : string,
	valueB : DynamicBehaviour<bool>,
	onTrue : (isRunningB : Transform<bool>, disposer : () -> void) -> void,
	action : PebbleAction
) -> PebbleBoolLink {
	PebbleBoolLink(
		parameter,
		valueB,
		\value -> if (value) {
			disposer = \-> deferred(\ -> next(valueB, false));
			onTrue(fnot(feq(valueB, false)), disposer)
		},
		action
	)
}

MConfirmPebbleParameterSwitch(
	controller : PebbleController,
	parameters : [KeyValue],
	confirm : ((bool) -> void) -> void,
	warn : Maybe<() -> bool>,
	m : Material
) -> Material {
	MConfirmPebbleParameterSwitch2(
		controller,
		parameters,
		\__, __, callback -> confirm(callback),
		warn,
		m
	);
}

MConfirmPebbleParameterSwitch2(
	controller : PebbleController,
	parameters : [KeyValue],
	confirm : (Pebble, Pebble, (bool) -> void) -> void,
	warn : Maybe<() -> bool>,
	m : Material
) -> Material {
	confirmation = \oldPebble : Pebble, newPebble : Pebble, callback : (bool) -> void -> {
		if (exists(parameters, \parameter -> {
			oldValue = getLastPathPartParameter(oldPebble, parameter.key, "");
			newValue = getLastPathPartParameter(newPebble, parameter.key, "");
			oldValue == parameter.value && newValue != parameter.value
		})) confirm(oldPebble, newPebble, callback)
		else callback(true)
	};

	MConstruct([
		\-> {
			dynArrayPush(controller.confirmations, confirmation);
			\-> {
				next(controller.confirmations, removeFirst(getValue(controller.confirmations), confirmation));
			}
		},
		eitherMap(
			warn,
			\w -> {
				\-> {
					leaveHandlerId = addUILeaveHandlerTop(\-> if (w()) Some("warning") else None());
					\-> removeUILeaveHandler(leaveHandlerId)
				}
			},
			\-> nop
		)
	], m)
}

makePebbleTabUid(s : string) -> string {
	strReplace(toLowerCase(s), " ", "_")
}

getLastPathPartName(controller : PebbleController) -> string {
	getLastPathPart(lastElement(getValue(controller.pebbleStackB), makeEmptyPebble()), makeEmptyPathPart()).name
}

checkCustomCheckPebble(action : PebbleAction) -> () -> bool {
	switch (action) {
		RecordURLChange(): \-> false;
		RecordURLRestoreOrChangeParametersControlled(__, __): \-> false;
		DoNotRecord(): \-> false;
		RecordURLChangeCheckPebble(fn): fn;
	}
}

pinPebbleParameterDialog(
	manager : MaterialManager,
	controller : PebbleController,
	pinnable : [Pair<string, (Pebble) -> bool>]
) -> void {
	close = make(false);
	parameters = getLastPathPart(getCurrentPebble(controller), makeEmptyPathPart()).parameters;
	feed = filtermap(
		pinnable,
		\pnbl -> eitherMap(
			find(parameters, \p -> p.key == pnbl.first),
			\f -> Some(Triple(f.key, f.value, pnbl.second)),
			None()
		)
	);
	if (feed != []) {
		ShowMDialog(
			manager,
			close,
			[MDialogUseFrame()],
			MInteractive(
				[KeyDown(\ke -> if (ke.utf == "esc") next(close, true))],
				MLinesA(
					map(
						feed,
						\f -> MSelect(
							fselect(
								getPinnedParametersTree(),
								FLift(\pt -> containsKeyTree(pt, f.first))
							),
							\pinned -> MChip(
								f.first + " : " + f.second,
								ifArrayPush(
									[
										MOnClick(\-> {
											if (pinned) unPinParameter(f.first)
											else pinParameter(f.first, f.second, f.third);
										}),
									],
									pinned,
									MIcon("push_pin", [])
								)
							)
						)
					)
				)
			)
		)
	}
}
