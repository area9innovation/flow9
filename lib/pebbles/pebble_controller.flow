import pebbles/pebbles;
import material/material_ui;
import net/appurl;

export {

	/**
		A mechanism to maintain application view using pebbles (see pebbles.flow for more info).

		1. Construct a single global controller in your application using `makePebbleController`. Usually placed in the app state.

		2. Set the application view container to point to the Material built by the pebble controlled using `getPebblesControlledView`

		3. Register every possible view and corresponding pebble using `registerDispatcher`
			Note, you can use MLinkPebbleParameters inside to control parameters of the pebble (only last path part is being updated)

		4. Change global view by passing any registered pebble to `setViewFromPebble`. Corresponding pebble will be pushed to the stack
	*/

	// Error handler will be called if user will try to set view based on unregistered pebble 
	//
	// NOTE: using multiple controllers simultaneously is not supported and will trigger a warning!
	// Call this function once per application somewhere on the top level (main function?)
	makePebbleController : (onError : (Pebble) -> void) -> PebbleController;
	// Same as `makePebbleController` with default error handler
	makePebbleController2 : (manager : MaterialManager) -> PebbleController;
	// Use for backward compatibility, dummy controller won't affect URL or anything else
	makeDummyPebbleController : () -> PebbleController;
	clearPebbleController : (controller : PebbleController) -> void;
	// Global view wrapped with subscribers to automatically:
	// - change view when URL hash is changed (by looking for pebble dispatcher in the tree)
	// - handle BACK/FORWARD browser buttons
	// - update current pebble (global behaviour) based on the pebble stack
	// - handle IScript
	// NOTE: all pebble dependent modififcations of Material (for example wrapping with `MLinkPebbleParameters`) 
	// should be done inside of dispatchers, this way they will appear as a part of `getPebblesControlledView` 
	// and will work with the rest of pebble controlled evironment
	getPebblesControlledView : (controller : PebbleController) -> Material;
	// Register dispatcher for given pebble based on it's mask (prefix)
	// The mask is formatted like this: "pathpartname/pathpartname/pathpartname" (i.e. omitting all parameters)
	registerDispatcher : (controller : PebbleController, mask : string, dispatcher : () -> Material) -> void;
	registerDispatcher2(controller : PebbleController, mask : string, dispatcher : PebbleDispatcher) -> void;
	// Call corresponding dispatcher or onError if no dispatcher found to update the view
	// If mask of the pebble is the same as the current one, just pushes pebble to the stack without calling dispatcher
	// 	then the view update will be handled by MLinkPebbleParameters
	setViewFromPebble : (controller : PebbleController, pebble : Pebble) -> void;
	// It will try to find last similar pebble in pebbleStack and call setViewFronPebble on found pebble
	// (from user point of view it will looks like you get back on previously opened screen with all parameters were set as you left),
	// or setViewFromPebble on pebble if nothing was found
	restoreLastPebble(controller : PebbleController, pebble : Pebble) -> void;
	// Just refresh the view, i.e. call dispatcher once again. No URL or history changes 
	refreshViewForCurrentPebble : (controller : PebbleController) -> void;
	// we will find last visited pebble by this key if it was set, otherwise, it will be stored with default key
	// in case of cpp we are always store last visited pebble and prompt developer to open it at application start
	// in case of js and saveLastPebbleInJsCase is true - last visited pebble will be stored and opened at start without prompt
	// please make sure that key is user-dependent and application-dependent, otherwise,
	// the last pebble can be shared between users or application if they use the same domain
	setLastPebbleKey(key : string, saveLastPebbleInJsCase : bool) -> void;
	// Open current pebble view at application start or topPebble view in case URL hash is empty or wrong
	validateCurrentPebbleAndInitView : (controller : PebbleController, manager : MaterialManager, topPebble : Pebble) -> void;

	// Current pebble corresponds to the last element of the pebbles stack
	getCurrentPebble : (controller : PebbleController) -> Pebble;
	// Find last pebble in pebbleStack where last PathPart name == pathPart.name
	// and last PathPart parameters contain pathPart.parameters
	findLastPebbleInStack(controller : PebbleController, pathPart : PathPart, def : Pebble) -> Pebble;
	maybeFindLastPebbleInStack(controller : PebbleController, test : (Pebble) -> bool) -> Maybe<Pebble>;
	// Append given path part to the current pebble
	extendCurrentPebbleWithPathPart : (controller : PebbleController, pathPart : PathPart) -> Pebble;
	// Append parameter to the last path part of the current pebble
	extendCurrentPebbleWithParameter : (controller : PebbleController, parameter : string, value : string) -> Pebble;
	extendCurrentPebbleWithBoolParameter : (controller : PebbleController, parameter : string, value : bool) -> Pebble;
	extendCurrentPebbleWithIntParameter : (controller : PebbleController, parameter : string, value : int) -> Pebble;
	extendCurrentPebbleWithParameters : (controller : PebbleController, parameters : [KeyValue]) -> Pebble;

	// Find parameter in last path part of current pebble
	getCurrentPebbleLastParameter(controller : PebbleController, parameter : string, def : string) -> string;
	getCurrentPebbleLastIntParameter(controller : PebbleController, parameter : string, def : int) -> int;
	getCurrentPebbleLastBoolParameter(controller : PebbleController, parameter : string, def : bool) -> bool;

	// Find parameter in the given path part
	findCurrentPebbleParameter : (controller : PebbleController, pathPartName : string, parameter : string, def : string) -> string;
	findCurrentPebbleIntParameter : (controller : PebbleController, pathPartName : string, parameter : string, def : int) -> int;
	findCurrentPebbleBoolParameter : (controller : PebbleController, pathPartName : string, parameter : string, def : bool) -> bool;

	collectCurrentPebbleParametersAndValues : (controller : PebbleController, parameters : [string]) -> [KeyValue];

	pebble2mask : (pebble : Pebble) -> string;
	mask2pebble : (mask : string) -> Pebble;

	// NOTE: This is an internal function used to implement much better abstraction of the same idea: MLinkPebbleParameters
	//
	// DON'T use this function directly! 
	makeCurrentPebbleLastParameterSubscribe : (controller : PebbleController, parameter : string, onChange : (string) -> void) -> () -> () -> void;

	// UP button helpers
	isUpButtonEnabled : (controller : PebbleController, topPebble : Pebble) -> Transform<bool>;
	onUpButtonClick : (controller : PebbleController, topPebble : Pebble) -> void;

	// Check for "debug_pebbles=true" URL flag
	debugPebbles() -> bool;

	PebbleDispatcher(dispatcher : () -> Material, handler : Maybe<(Pebble) -> void>);

	// NOTE: This is an internal structure that is exported only because of technical restrictions in the old compiler! 
	//
	// DON'T create controller yourself, use `makePebbleController` instead!
	// DON'T use any of the controller fields directly! 
	//
	// TODO: remove from export section as soon as we migrate to flowc
	PebbleController(
		// Dispatcher registered based on pebble mask
		dispatchers : ref Tree<string, PebbleDispatcher>,
		// Global view
		view : ref Material,
		// Set view based on pebble function wrapped with IScript magic
		setViewFn : IScriptBehaviourDisposable1,
		// Pebbles will be pushed automatically by setViewFromPebble and popped on BACK browser button click
		pebbleStackB : DynamicBehaviour<[Pebble]>,
		// Top of the stack
		currentPebbleB : DynamicBehaviour<Pebble>,
		// Allows to distinguish between pebbled and non pebbled applications without handling two branches
		dummy : bool,
		// Async functions to be called right before updating current pebble. Allows to cancel that update.
		// Takes: current pebble, new pebble, callback to approve or cancel the update
		// Bookkeeping for MConfirmPebbleParameterSwitch 
		confirmations : DynamicBehaviour<[(Pebble, Pebble, (bool) -> void) -> void]>
	);
}

isControllerCreatedRef : ref bool = ref false;
viewBoxB = make(MEmpty());

makePebbleController(onError : (Pebble) -> void) -> PebbleController {
	if (^isControllerCreatedRef) {
		println("Something is wrong. Pebble controller should be created only once per application");
	}
	isControllerCreatedRef := true;

	dispatchers : ref Tree<string, PebbleDispatcher> = ref makeTree();

	pebbleStackB = make([]);
	currentPebbleB = make(urlHash2Pebble2(takeAfter(getUrlHash(), "#", initialPebbleHash()), makeEmptyPebble()));

	setViewFn = fn2IScriptBehaviourDisposable1(
		\pebbleAndUpdateHashUrl : Pair<Pebble, bool> -> {
			switch(getPebbleDispatcher2(^dispatchers, pebbleAndUpdateHashUrl.first)) {
				Some(pebbleAndDispatcher): {
					unpair(pebbleAndDispatcher, \foundPebble, dispatcher -> {
						pushPebble2(pebbleStackB, pebbleAndUpdateHashUrl.second, foundPebble);
						switch (dispatcher.handler) {
							Some(handler): handler(foundPebble);
							None(): {}
						}
						next(viewBoxB, dispatcher.dispatcher());
					})
				}
				None(): onError(pebbleAndUpdateHashUrl.first);
			}
		},
		"set_content",
		ISPebbleEvent()
	);

	view = ref MEmpty();
	
	controller = PebbleController(
		dispatchers, 
		view,
		setViewFn,
		pebbleStackB,
		currentPebbleB,
		false,
		make([])
	);

	view := MConstruct(
		[
			\-> addBrowserUrlHashListener(controller),
			makeSubscribe(controller.pebbleStackB, \pebbleStack -> {
			//	println("pebbleStack is updated: " + superglue(pebbleStack, pebble2UrlHash, " - "));
				next(controller.currentPebbleB, lastPebble(controller, getCurrentPebble(controller)));
			}),
			controller.setViewFn.subscribers
		],
		MComponentGroupMutable(
			viewBoxB,
			[
				controller.setViewFn.monitorBehaviour,
				IScriptBehaviour("pebble_stack", controller.pebbleStackB, ISPebbleEvent()),
				IScriptBehaviour("current_pebble", controller.currentPebbleB, ISPebbleEvent())
			]
		)
	);

	controller
}

makePebbleController2(manager : MaterialManager) -> PebbleController {
	makePebbleController(\pebble -> {
		println("Can't find dispatcher for pebble: " + pebble2UrlHash(pebble));
		ShowMConfirmation(manager, "Pebble error", "OK", "enter", MText("Something went wrong. Contact the developers.", []));
	})
}

makeDummyPebbleController() -> PebbleController {
	PebbleController(
		ref makeTree(), 
		ref MEmpty(),
		IScriptBehaviourDisposable1(
			nop1,
			IScriptBehaviour("", make(None()), ISPebbleEvent()),
			\-> nop
		),
		make([]),
		make(makeEmptyPebble()),
		true,
		make([])
	)
}

clearPebbleController(controller : PebbleController) -> void {
	controller.dispatchers := makeTree();
	next(viewBoxB, MEmpty());
	next(controller.pebbleStackB, []);
	next(controller.confirmations, []);
	next(controller.currentPebbleB, makeEmptyPebble());
	pushPebble2UrlHash(makeEmptyPebble());
}

getPebblesControlledView(controller : PebbleController) -> Material {
	^(controller.view)
}

registerDispatcher(controller : PebbleController, mask : string, dispatcher : () -> Material) -> void {
	controller.dispatchers := setTree(^(controller.dispatchers), mask, PebbleDispatcher(dispatcher, None()));
}

registerDispatcher2(controller : PebbleController, mask : string, dispatcher : PebbleDispatcher) -> void {
	controller.dispatchers := setTree(^(controller.dispatchers), mask, dispatcher);
}

// Recursively find a function for a given pebble. If it's not found try parent
getPebbleDispatcher(controller : PebbleController, pebble : Pebble) -> Maybe<Pair<Pebble, PebbleDispatcher>> {
	getPebbleDispatcher2(^(controller.dispatchers), pebble)
}

getPebbleDispatcher2(dispatchers : Tree<string, PebbleDispatcher>, pebble : Pebble) -> Maybe<Pair<Pebble, PebbleDispatcher>> {
	secondOfPair(updateWhile2(Pair(pebble, None()), \pbl0 -> {
		pbl = firstOfPair(pbl0);

		eitherFn(
			lookupTree(dispatchers, pebble2mask(pbl)), 
			\pebbleDispatcher -> {
				Pair(Pair(pbl, Some(Pair(pbl, pebbleDispatcher))), false)
			},
			\ -> {
				if (length(pbl.path) > 1) {
					Pair(Pair(goUpPebble(pbl), None()), true)
				} else {
					Pair(Pair(makeEmptyPebble(), None()), false)
				}
			}
		)
	}))
}

// returns: "pathpartname/pathpartname/pathpartname..."
pebble2mask(pebble : Pebble) -> string {
	superglue(pebble.path, \pp -> pp.name, "/")
}

mask2pebble(mask : string) -> Pebble {
	Pebble(map(strSplit(mask, "/"), \part ->
		PathPart(part, [])
	));
}

restoreLastPebble(controller : PebbleController, pebble : Pebble) -> void {
	setViewFromPebble(
		controller,
		findLastPebbleInStack(controller, lastElement(pebble.path, makeEmptyPathPart()), pebble)
	)
}

setViewFromPebble(controller : PebbleController, pebble : Pebble) -> void {
	setViewFromPebbleIfConfirmed(controller, getCurrentPebble(controller), pebble)
}

refreshViewForCurrentPebble(controller : PebbleController) -> void {
	pebble = getCurrentPebble(controller);
	confirmPebbleSwitch(controller, pebble, pebble, \-> {
		controller.setViewFn.fn(Pair(pebble, false))
	}, nop)
}

setViewFromPebbleIfConfirmed(controller : PebbleController, current : Pebble, pebble : Pebble) -> void {
	confirmPebbleSwitch(controller, current, pebble, \-> {
		setViewFromPebbleIfRequired(controller, current, pebble)
	}, nop)
}

confirmPebbleSwitch(controller : PebbleController, current : Pebble, pebble : Pebble, onApproved : () -> void, onCancel : () -> void) -> void {
	foldAsync(getValue(controller.confirmations), true, \acc, confirmation, fulfill, __ -> {
		if (acc) {
			confirmation(current, pebble, fulfill)
		} else {
			fulfill(acc)
		}
	}, \isApproved -> {
		if (isApproved) onApproved() else onCancel()
	}, println)
}

setViewFromPebbleIfRequired(controller : PebbleController, current : Pebble, pebble : Pebble) -> void {
	//if (!equalPebbles(current, pebble)) {
		//println("setViewFromPebble: " + pebble2UrlHash(pebble) + " , current: " + pebble2UrlHash(current));
	//} 
	// we don't want to push broken pebbles
	if (!isBrokenPebble(pebble) && pebble != makeEmptyPebble()) {
		if (pebble2mask(pebble) == pebble2mask(current)) {
			// only parameters changed
			pushPebble(controller, pebble);
		} else {
			controller.setViewFn.fn(Pair(pebble, true))
		}
	}
}

// Add subscriber which will create Pebbles from urlHash and call appropriate Fns, if it exists
addBrowserUrlHashListener(controller : PebbleController) -> () -> void {
	if (js) {
		addUrlHashListener(\__ -> {
			currentPebble = getCurrentPebble(controller);
			// build pebble based on current URL hash
			urlHashPebble = urlHash2Pebble(/* default */ currentPebble);
			if (equalPebbles(urlHashPebble, currentPebble)) {
				//println("URL handler 1: " + pebble2UrlHash(urlHashPebble));
				// either URL hash can't be parsed or it wasn't changed.
				// nothing to do
			} else {
				pebbleStack = getValue(controller.pebbleStackB);

				if (length(pebbleStack) > 1) {
					prevPebble = pebbleStack[length(pebbleStack) - 2];
					if (equalPebbles(urlHashPebble, prevPebble)) {
						//println("URL handler 2: " + pebble2UrlHash(urlHashPebble) + 
						//	", prev="  + pebble2UrlHash(prevPebble) + 
						//	", curr=" + pebble2UrlHash(currentPebble));
						// back button was probably clicked
						confirmPebbleSwitch(controller, currentPebble, prevPebble, \-> {
							// onApproved
							popPebble(controller, 1);
							setViewFromPebbleIfRequired(controller, currentPebble, prevPebble);
						}, \-> {
							// onCancel: URL is already changed, we have to set it back
							pushPebble2UrlHash(currentPebble)
						})
					} else {
						//println("URL handler 3: " + pebble2UrlHash(urlHashPebble));
						// URL hash was manually changed in the browser
						confirmPebbleSwitch(controller, currentPebble, urlHashPebble, \-> {
							// onApproved
							setViewFromPebbleIfRequired(controller, currentPebble, urlHashPebble);
						}, \-> {
							// onCancel: URL is already changed, we have to set it back
							pushPebble2UrlHash(currentPebble)
						})
					}
				} else {
					//println("URL handler 4: " + pebble2UrlHash(urlHashPebble));
					confirmPebbleSwitch(controller, currentPebble, urlHashPebble, \-> {
						// onApproved
						setViewFromPebbleIfRequired(controller, currentPebble, urlHashPebble);
					}, \-> {
						// onCancel: URL is already changed, we have to set it back
						pushPebble2UrlHash(currentPebble)
					})
				}
			}
		})
	} else {
		nop
	}
}

lastPebbleKey = ref "";
lastPebbleOnJS = ref false;

setLastPebbleKey(key : string, saveLastPebbleInJsCase : bool) -> void {
	lastPebbleKey := key;
	lastPebbleOnJS := saveLastPebbleInJsCase;
}

lastPebbleOn() -> bool {
	(cpp || ^lastPebbleOnJS) && !mobile;
}

getLastPebbleKey() -> string {
	md5((if (^lastPebbleKey != "") ^lastPebbleKey else getAppUrl()) + "Pebble");
}

getLastPebbleModeKey() -> string {
	md5((if (^lastPebbleKey != "") ^lastPebbleKey else getAppUrl()) + "PebbleMode");
}

LAST_PEBBLE_MODE_ASK = _("Ask");
LAST_PEBBLE_MODE_NEVER = _("Never go");
LAST_PEBBLE_MODE_ALWAYS = _("Always go");

initialPebbleHash() {
	if (lastPebbleOn()) {
		getUrlParameterDef("pebble", getKeyValue(getLastPebbleKey(), ""))
	} else {
		""
	}
}

pebbleMode() {
	if (^lastPebbleOnJS && js) {
		LAST_PEBBLE_MODE_ALWAYS
	} else if (lastPebbleOn()) {
		getKeyValue(getLastPebbleModeKey(), "")
	} else {
		LAST_PEBBLE_MODE_NEVER
	}
}

validateCurrentPebbleAndInitView(controller : PebbleController, manager : MaterialManager, topPebble : Pebble) -> void {
	currentPebble = getCurrentPebble(controller);

	showPebbleView = \pebble -> {
		eitherFn(
			getPebbleDispatcher(controller, pebble),
			\__ -> controller.setViewFn.fn(Pair(pebble, true)),
			\ -> controller.setViewFn.fn(Pair(topPebble, true))
		)
	}

	if (lastPebbleOn() && initialPebbleHash() != "" && getUrlHash() == "") {
		initPebble = urlHash2Pebble2(takeAfter(initialPebbleHash(), "#", ""), currentPebble);
		if (pebbleMode() == LAST_PEBBLE_MODE_ASK || pebbleMode() == "") {
			initialPebbleDialog(
				manager,
				controller,
				\-> showPebbleView(currentPebble),
				\mode, pebble -> showPebbleView(if (mode != LAST_PEBBLE_MODE_NEVER) pebble else currentPebble)
			)
		} else if (pebbleMode() == LAST_PEBBLE_MODE_NEVER) {
			showPebbleView(currentPebble)
		} else if (pebbleMode() == LAST_PEBBLE_MODE_ALWAYS) {
			deferred(\-> showPebbleView(initPebble))
		}
	} else {
		showPebbleView(currentPebble)
	}
}

pushPebble(controller : PebbleController, pebble : Pebble) -> void {
	pushPebble2(controller.pebbleStackB, !controller.dummy, pebble)
}

pushPebble2(pebbleStackB : DynamicBehaviour<[Pebble]>, updateHashUrl : bool, pebble : Pebble) -> void {
	npebble = normalizePebble(pebble);

	if (!equalPebbles(npebble, lastPebble2(pebbleStackB, makeEmptyPebble()))) {

		//println("pushPebble:" + pebble2UrlHash(npebble) + (if (recordHistory) " recordHistory" else ""));
		dynArrayPush(pebbleStackB, npebble);

		if (updateHashUrl) {
			if (js) {
				pushPebble2UrlHash(npebble);
			}
			if (lastPebbleOn() && pebbleMode() != LAST_PEBBLE_MODE_NEVER) {
				setKeyValue(getLastPebbleKey(), pebble2UrlHash(npebble));
				{}
			}
		}
	}
}

popPebble(controller : PebbleController, i : int) -> void {
	//println("popPebble");
	pebbleStack = getValue(controller.pebbleStackB);
	leave = length(pebbleStack) - i;
	nextDistinct(controller.pebbleStackB, subrange(pebbleStack, 0, if (leave < 0) 0 else leave))
}

lastPebble(controller : PebbleController, def : Pebble) -> Pebble {
	lastPebble2(controller.pebbleStackB, def)
}

lastPebble2(pebbleStackB : DynamicBehaviour<[Pebble]>, def : Pebble) -> Pebble {
	lastElement(getValue(pebbleStackB), def)
}

getCurrentPebble(controller : PebbleController) -> Pebble {
	getValue(controller.currentPebbleB);
}

findLastPebbleInStack(controller : PebbleController, pathPart : PathPart, def : Pebble) -> Pebble {
	pebbleStack = getValue(controller.pebbleStackB);
	findDef(
		reverseA(pebbleStack),
		\pbbl -> {
			lastPathPart = getLastPathPart(pbbl, makeEmptyPathPart());
			lastPathPart.name == pathPart.name &&
			pebble2mask(def) == pebble2mask(pbbl) &&
			forall(pathPart.parameters, \p -> contains(lastPathPart.parameters, p))
		},
		def
	)
}

maybeFindLastPebbleInStack(controller : PebbleController, test : (Pebble) -> bool) -> Maybe<Pebble> {
	find(reverseA(getValue(controller.pebbleStackB)), test)
}

extendCurrentPebbleWithPathPart(controller : PebbleController, pathPart : PathPart) -> Pebble {
	pushPathPart2Pebble(getCurrentPebble(controller), pathPart);
}

extendCurrentPebbleWithParameter(controller : PebbleController, parameter : string, value : string) -> Pebble {
	setLastPathPartParameter(getCurrentPebble(controller), parameter, value)
}

extendCurrentPebbleWithBoolParameter(controller : PebbleController, parameter : string, value : bool) -> Pebble {
	extendCurrentPebbleWithParameter(controller, parameter, if (value) "true" else "")
}

extendCurrentPebbleWithIntParameter(controller : PebbleController, parameter : string, value : int) -> Pebble {
	extendCurrentPebbleWithParameter(controller, parameter, i2s(value))
}

extendCurrentPebbleWithParameters(controller : PebbleController, parameters : [KeyValue]) -> Pebble {
	fold(parameters, getCurrentPebble(controller), \acc, parameter -> {
		setLastPathPartParameter(acc, parameter.key, parameter.value)
	})
}

getCurrentPebbleLastParameter(controller : PebbleController, parameter : string, def : string) -> string {
	pathPartName = getLastPathPart(getCurrentPebble(controller), makeEmptyPathPart()).name;
	findCurrentPebbleParameter(controller, pathPartName, parameter, def);
}

getCurrentPebbleLastIntParameter(controller : PebbleController, parameter : string, def : int) -> int {
	v = getCurrentPebbleLastParameter(controller, parameter, i2s(def));
	s2i(v)
}

getCurrentPebbleLastBoolParameter(controller : PebbleController, parameter : string, def : bool) -> bool {
	v = getCurrentPebbleLastParameter(controller, parameter, b2s(def));
	s2b(v)
}

findCurrentPebbleParameter(controller : PebbleController, pathPartName : string, parameter : string, def : string) -> string {
	findPathParameter(pathPartName, getCurrentPebble(controller).path, parameter, def);
}

findCurrentPebbleIntParameter(controller : PebbleController, pathPartName : string, parameter : string, def : int) -> int {
	v = findCurrentPebbleParameter(controller, pathPartName, parameter, i2s(def));
	s2i(v)
}

findCurrentPebbleBoolParameter(controller : PebbleController, pathPartName : string, parameter : string, def : bool) -> bool {
	v = findCurrentPebbleParameter(controller, pathPartName, parameter, b2s(def));
	s2b(v)
}

collectCurrentPebbleParametersAndValues(controller : PebbleController, parameters : [string]) -> [KeyValue] {
	currentPebble = getCurrentPebble(controller);

	fold(currentPebble.path, [], \acc : [KeyValue], pp : PathPart -> {
		fold(pp.parameters, acc, \acc2, parameter : KeyValue -> {
			if (contains(parameters, parameter.key)) {
				arrayPush(acc2, parameter)
			} else {
				acc2
			}
		})
	})
}

makeCurrentPebbleLastParameterSubscribe(controller : PebbleController, key : string, onChange : (string) -> void) -> () -> () -> void {
	makeSubscribe(controller.currentPebbleB, \pebble -> {
		onChange(getLastPathPartParameter(pebble, key, ""))
	})
}

isUpButtonEnabled(controller : PebbleController, topPebble : Pebble) -> Transform<bool> {
	fselect(controller.currentPebbleB, FLift(\cp -> 
		length(cp.path) > 1 || getLastPathPart(cp, makeEmptyPathPart()).name != getLastPathPart(topPebble, makeEmptyPathPart()).name
	))
}

onUpButtonClick(controller : PebbleController, topPebble : Pebble) -> void {
	currentPebble = getCurrentPebble(controller);
			
	nextPebble = if (isTopLevelPebble(currentPebble)) {
		topPebble
	} else {
		goUpPebble(currentPebble)
	};

	setViewFromPebble(controller, nextPebble)
}

initialPebbleDialog(manager : MaterialManager, controller : PebbleController, onCancel : () -> void, onOK : (string, Pebble) -> void) -> void {
	close = make(false);
	modes = [LAST_PEBBLE_MODE_NEVER, LAST_PEBBLE_MODE_ASK, LAST_PEBBLE_MODE_ALWAYS];
	selected = make(findiDef(modes, eq(pebbleMode()), 2));
	pebbleIsOk = make(true);
	pebbleInput = make(initialPebbleHash());
	currentPebble = getCurrentPebble(controller);
	pebbleInputError = fselect(pebbleInput, FLift(\pebbleHash -> {
		if (pebbleHash == "") {
			Some(Pair(_("Pebble is required"), true))
		} else {
			pebbleToGo = urlHash2Pebble2(takeAfter(pebbleHash, "#", pebbleHash), currentPebble);
			eitherMap(
				getPebbleDispatcher(controller, pebbleToGo),
				\__ -> None(),
				Some(Pair(_("We can't find correspondant view"), true))
			)
		}
	}));
	ShowMDialog(
		manager,
		close,
		[
			MDialogUseFrame(),
			MDialogTitle(_("We have found the pebble. Would you like to open it's view?")),
			MDialogActions([
				MTextButton(_("IGNORE PEBBLE"), \ -> {
					onCancel();
					next(close, true);
				}, [], [MShortcut("enter")]),
				MTextButton(_("OPEN WITH PEBBLE"), \ -> {
					pebbleHash = getValue(pebbleInput);
					mode = elementAt(modes, getValue(selected), LAST_PEBBLE_MODE_ASK);
					setKeyValue(getLastPebbleModeKey(), mode);
					onOK(mode, urlHash2Pebble2(takeAfter(pebbleHash, "#", pebbleHash), currentPebble));
					next(close, true);
				}, [], [MShortcut("enter"), MEnabled(pebbleIsOk)]),
			])
		],
		MAvailable(
			MLines([
				MTextInput(pebbleInput,
					[getPrimaryColor(manager.focus), MFloatingLabel(), MLabel(_("Pebble to go"))],
					[MInputError(pebbleInputError, [MRequiredField(), MInputIsOk(pebbleIsOk),])]
				),
				MParagraph(_("Choose what to do when a pebble is found"), []),
				MDropDown(selected, LAST_PEBBLE_MODE_ALWAYS, modes, [])
			]),
			TMinimumGroup2(TFillXY(), TFillWY(800.0))
		)
	);
}

debugPebbles() -> bool {
	isUrlParameterTrue("debug_pebbles")
}
