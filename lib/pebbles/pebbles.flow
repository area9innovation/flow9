import transforms;
import fusion;
import net/urlhash;
import ds/arrayutils;
import text/blueprint;

export {

	/**
	A pebble is a small stone, which you can drop to trace out a path, so you can find your
	way back. This is a metaphor for the role they play in our system. In our setting, pebbles 
	are thus the address of each screen in the program. The home screen has one address, the 
	admin screen has another. A form for filling out details has a third. Each of these addresses 
	is called a pebble. As such, the pebbles serve as a similar role as Uniform Resource Locator 
	on the internet.

	The goal of a pebble is to be able to exactly re-display the same screen with the
	same object(s), but without storing the data of object itself. So if we have a screen of
	a user with their address, we should NOT store the address of the user, but rather the ID
	of the user, and then the program will retrieve the latest address from the database.
	
	NOTE: pebble path is NOT a history, but rather a logical hierarchy of the views. 
	We have browser to handle history and internal stack for cpp and mobile cases.
	It is the same difference as the difference between UP and BACK buttons.
		
	*/

	// This defines a place in our app
	Pebble(
		// The path to the overall screen we are in. (e.g. projects/processes)
		path : [PathPart],
	);

	PathPart(
		// The name of the screen (e.g. "home", "project")
		name : string,

		// Parameters: What overall object is displayed. This is a key/value map with ids of 
		// objects and similar. Use IDs that are as stable as possible. Do NOT include
		// the data of the record itself.
		// (e.g. [KeyValue("projectId", "4")]), [KeyValue("processId", "7")]
		parameters : [KeyValue], 
	);

	// Default values
	makeEmptyPebble() -> Pebble;
	makeEmptyPathPart() -> PathPart;
	// Make simple path part pebble
	makeSimplePebble(pathParthName : string) -> Pebble;
	makeSimplePebble2(pathParthName : string, key : string, value : string) -> Pebble;
	makeSimplePebble3(pathParthName : string, parameters : [KeyValue]) -> Pebble;

	// If pebble path is empty
	isTopLevelPebble(pebble : Pebble) -> bool;
	isBrokenPebble(pebble : Pebble) -> bool;

	// Filter our empty parameters from all path parts
	normalizePebble(pebble : Pebble) -> Pebble;

	equalPebbles(first : Pebble, second : Pebble) -> bool;

	// Find path part by name and return value by it's key
	findPathParameter(name : string, path : [PathPart], key : string, def : string) -> string;

	getPathPartParameter(pathPart : PathPart, key : string, def : string) -> string;
	getLastPathPart(pebble : Pebble, def : PathPart) -> PathPart; 
	getLastPathPartParameter(pebble : Pebble, key : string, def : string) -> string;
	getLastPathPartParametersDefs(pebble : Pebble, keyValues : [KeyValue]) -> [KeyValue];
	getLastPathPartParameters(pebble : Pebble, keys : [string]) -> [KeyValue];
	setLastPathPartParameter(pebble : Pebble, key : string, value: string) -> Pebble;
	setLastPathPartParameters(pebble : Pebble, parameters : [KeyValue]) -> Pebble;
	replacePebbleLastPathPart(pebble : Pebble, pathPart : PathPart) -> Pebble;

	// Push path path to existing pebble or merge with it's last part if name matches
	pushPathPart2Pebble(pebble : Pebble, pp : PathPart) -> Pebble;
	// Same but parameters are empty
	pushSimplePathPart2Pebble(pebble : Pebble, pathPartName : string) -> Pebble;

	// On the current screen, if we have a stack of pebbles, construct the pebble one step up from a logical point of view
	// Drop last path part
	goUpPebble(pebble : Pebble) -> Pebble;

	pushPebble2UrlHash(pebble : Pebble) -> void;
	// Convert pebble to URL hash
	// #pathpart0&parameter0=val0&parameter1=val1/pathpart1&parameter0=val0&parameter1=val1/
	pebble2UrlHash(pebble : Pebble) -> string;
	// Get URL hash and convert to pebble (having default option if hash is empty)
	urlHash2Pebble(def : Pebble) -> Pebble;
	urlHash2Pebble2(hash : string, def : Pebble) -> Pebble;
}

makeEmptyPebble() -> Pebble {
	Pebble([]);
}

makeEmptyPathPart() -> PathPart {
	PathPart("", []);
}

makeSimplePebble(pathParthName : string) -> Pebble {
	Pebble([PathPart(pathParthName, [])])
}

makeSimplePebble2(pathParthName : string, key : string, value : string) -> Pebble {
	Pebble([PathPart(pathParthName, [KeyValue(key, value)])]);
}

makeSimplePebble3(pathParthName : string, parameters : [KeyValue]) -> Pebble {
	Pebble([PathPart(pathParthName, parameters)]);
}

isTopLevelPebble(pebble : Pebble) -> bool {
	length(pebble.path) <= 1
}

isBrokenPebble(pebble : Pebble) -> bool {
	exists(pebble.path, \pp -> pp.name == "")
}

// get rid of path parts with empty name and parameters with empty value
normalizePebble(pebble : Pebble) -> Pebble {
	Pebble(
		map(pebble.path, normalizePathPart)
	)
}

// get rid of parameters with empty value
normalizePathPart(pp : PathPart) -> PathPart {
	PathPart(
		pp.name,
		filter(pp.parameters, \parameter -> parameter.value != "")
	)
}

equalPebbles(first : Pebble, second : Pebble) -> bool {
	length(first.path) == length(second.path) &&
	foldi(first.path, true, \i, acc, pp -> acc && equalPathParts(pp, second.path[i]))
}

equalPathParts(first : PathPart, second : PathPart) -> bool {
	clearFirst = normalizePathPart(first);
	clearSecond = normalizePathPart(second);

	clearFirst.name == clearSecond.name && 
	length(clearFirst.parameters) == length(clearSecond.parameters) &&
	stylesEqual(clearFirst.parameters, clearSecond.parameters)
}

findPathParameters(name : string, path : [PathPart], def : [KeyValue]) -> [KeyValue] {
	findDef(path, \pp -> pp.name == name, PathPart(name, def)).parameters;
}

findPathParameter(name : string, path : [PathPart], key : string, def : string) -> string {
	findDef(findPathParameters(name, path, [KeyValue(key, def)]), \pathValue -> pathValue.key == key, KeyValue(key, def)).value
}

getPathPartParameter(pathPart : PathPart, key : string, def : string) -> string {
	findDef(pathPart.parameters, \parameter -> parameter.key == key, KeyValue(key, def)).value;
}

getLastPathPart(pebble : Pebble, def : PathPart) -> PathPart {
	if (pebble.path == []) {
		def
	} else {
		pebble.path[length(pebble.path) - 1]
	}
}

getLastPathPartParameter(pebble : Pebble, key : string, def : string) -> string {
	lastPathPart = getLastPathPart(pebble, PathPart("", [KeyValue(key, def)]));

	getPathPartParameter(lastPathPart, key, def);
}

getLastPathPartParametersDefs(pebble : Pebble, keyValues : [KeyValue]) -> [KeyValue] {
	lastPathPartParameters = getLastPathPart(pebble, PathPart("", [])).parameters;
	map(keyValues, \kv : KeyValue -> either(find(lastPathPartParameters, \p -> p.key == kv.key), kv))
}

getLastPathPartParameters(pebble : Pebble, keys : [string]) -> [KeyValue] {
	lastPathPart = getLastPathPart(pebble, PathPart("", []));
	filter(lastPathPart.parameters, \parameter -> contains(keys, parameter.key))
}

setLastPathPartParameter(pebble : Pebble, key : string, value: string) -> Pebble {
	if (pebble.path == []) {
		pebble
	} else {
		Pebble(mapi(pebble.path, \i, pp : PathPart -> {
			if (i == length(pebble.path) - 1) {
				PathPart(
					pp.name,
					replaceOrAddValueByKey(pp.parameters, key, value)
				)
			} else {
				pp
			}
		}))
	}
}

setLastPathPartParameters(pebble : Pebble, parameters : [KeyValue]) -> Pebble {
	if (pebble.path == []) {
		pebble
	} else {
		Pebble(
			mapi(pebble.path, \i, pp : PathPart -> {
				if (i == length(pebble.path) - 1) {
					PathPart(
						pp.name,
						concat(
							parameters,
							filter(pp.parameters, \parameter : KeyValue -> !exists(parameters, \p -> p.key == parameter.key))
						)
					)
				} else {
					pp
				}
			})
		)
	}
}

replacePebbleLastPathPart(pebble : Pebble, pathPart : PathPart) -> Pebble {
	pathes = pebble.path; 
	Pebble(replace(pathes, length(pathes) - 1, pathPart));
}

replaceOrAddValueByKey(xs : [KeyValue], key : string, value : string) -> [KeyValue] {
	indexM = findi(xs, \x -> x.key == key);
	switch(indexM) {
		Some(index): replace(xs, index, KeyValue(key, value));
		None(): arrayPush(xs, KeyValue(key, value));
	}
}

mergePathParts(from : PathPart, to : PathPart) -> PathPart {
	PathPart(
		to.name,
		mergeValues(from.parameters, to.parameters)
	)
}

// Add missing keys from "from" to "to"
mergeValues(from : [KeyValue], to : [KeyValue]) -> [KeyValue] {
	concat(to, filter(from, \f : KeyValue -> !exists(to, \t -> t.key == f.key)))
}

pushPathPart2Pebble(pebble : Pebble, pp : PathPart) -> Pebble {
	if (pp.name != "") {
		path2 = if (pebble.path == []) {
			arrayPush(pebble.path, pp)
		} else {
			lastPathPart = pebble.path[length(pebble.path) - 1];

			if (lastPathPart.name == pp.name) {
				replace(pebble.path, length(pebble.path) - 1, mergePathParts(lastPathPart, pp))
			} else {
				arrayPush(pebble.path, pp)
			}
		};

		Pebble(path2)
	} else {
		pebble
	}
}

pushSimplePathPart2Pebble(pebble : Pebble, pathPartName : string) -> Pebble {
	pushPathPart2Pebble(pebble, PathPart(pathPartName, []))
}

goUpPebble(pebble : Pebble) -> Pebble {
	if (isTopLevelPebble(pebble)) {
		pebble
	} else {
		Pebble(subrange(pebble.path, 0, length(pebble.path) - 1))
	}
}

pebble2UrlHash(pebble : Pebble) -> string {
	clearP = normalizePebble(pebble);

	"#" + 
	superglue(clearP.path, \pp -> {
		pp.name + 
		fold(pp.parameters, "", \acc, ppParameter -> acc + "&" + ppParameter.key + "=" + ppParameter.value)
	}, "/")
}

pushPebble2UrlHash(pebble : Pebble) -> void {
	setUrlHash(pebble2UrlHash(pebble));
}

urlHash2Pebble(def : Pebble) -> Pebble {
	urlHash = if (js) takeAfter(getUrlHash(), "#", "") else "";
	urlHash2Pebble2(urlHash, def);
}

urlHash2Pebble2(hash : string, def : Pebble) -> Pebble {
	if (hash != "") {
		pathParts = strSplit(hash, "/");
		path = fold(pathParts, [], \acc, pp -> 
			ifArrayPush(acc,
				pp != "",
				PathPart(
					// name
					takeBefore(pp, "&", takeBefore(pp, ";", pp)), 
					// parameters
					getKeyValues(strSplit(takeBefore(pp, ";", takeAfter(pp, "&", "")), "&"))
				)
			)
		);
		Pebble(path)
	} else {
		def
	} |> normalizePebble
}


getKeyValues(chunks : [string]) -> [KeyValue] {
	fold(chunks, [], \init, kv -> {
		key = takeBefore(kv, "=", "");
		value = takeAfter(kv, "=", "");
		ifArrayPush(init, key != "" && value != "", KeyValue(key, value))
	})
}
