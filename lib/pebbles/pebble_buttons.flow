import pebbles/pebble_parameters;

export {
	/*
		Links button onClick action with given pebble parameter:
			
			user clicks button -> parameter=value added to URL -> onClick action is called

		For example, instead of this:

			MTextButton(
				"EDIT", 
				\-> editItem(item.id), 
				[], 
				[]
			);

		Write this:

			MPebbleTextButton(
				state.pebbleController,
				"edit_item",
				\-> i2s(item.id),
				"EDIT", 
				\itemId, isRunningB, onClose -> {
					editItemAsync(s2i(itemId), isRunningB, onClose)
				}, 
				[], 
				[]
			);

	*/

	MPebbleIconButton(
		controller : PebbleController, 
		parameter : string, 
		getValueFn : () -> string, // get current value of the parameter for URL modification
		name : string, 
		onClick : (value : string, isRunningB : Transform<bool>, onClose : () -> void) -> void,
		style : [MIconButtonStyle],
		state : [MButtonState]
	) -> Material;

	MPebbleTextButton(
		controller : PebbleController, 
		parameter : string, 
		getValueFn : () -> string, // get current value of the parameter for URL modification
		text : string, 
		onClick : (value : string, isRunningB : Transform<bool>, onClose : () -> void) -> void, 
		style : [MTextButtonStyle], 
		state : [MButtonState]
	) -> Material;
}

MPebbleIconButton(
	controller : PebbleController, 
	parameter : string, 
	getValueFn : () -> string,
	name : string, /* Name of the icon from [Material Icons](https://www.google.com/design/icons/) */
	onClick : (value : string, isRunningB : Transform<bool>, onClose : () -> void) -> void,
	style : [MIconButtonStyle],
	state : [MButtonState]
) -> Material {
	valueB = make("");
	onClose = \-> deferred(\ -> next(valueB, ""));

	MLinkPebbleParameters(
		controller, 
		[
			PebbleStringLink(
				parameter,
				valueB,
				\value -> {
					if (value != "") {
						onClick(getValue(valueB), fnot(feq(valueB, "")), onClose)
					}
				},
				RecordURLChange()
			)
		],
		MIconButton(name, \-> nextDistinct(valueB, getValueFn()), style, state)
	)
}

MPebbleTextButton(
	controller : PebbleController, 
	parameter : string, 
	getValueFn : () -> string, // get current value of the parameter for URL modification
	text : string, 
	onClick : (value : string, isRunningB : Transform<bool>, onClose : () -> void) -> void, 
	style : [MTextButtonStyle], 
	state : [MButtonState]
) -> Material {
	valueB = make("");
	onClose = \-> deferred(\ -> next(valueB, ""));

	MLinkPebbleParameters(
		controller, 
		[
			PebbleStringLink(
				parameter,
				valueB,
				\value -> {
					if (value != "") {
						onClick(getValue(valueB), fnot(feq(valueB, "")), onClose)
					}
				},
				RecordURLChange()
			)
		],
		MTextButton(text, \-> nextDistinct(valueB, getValueFn()), style, state)
	)
}