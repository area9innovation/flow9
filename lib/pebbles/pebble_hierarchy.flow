import material/material_snackbar;

import pebbles/pebble_controller;
import pebbles/pebble_utils;

export {
	/*
		PebbledHierarchy is an arrangement of menu items in which items correspond to 
		related data tables organized in a hierarchy. For example:

			`organizations` -> `projects` -> `subjects` -> `modules`
							-> `providers`

		In this example: clicking on a row in organizations table will open projects table 
		filtered by selected organization ID and so on. 

		Item name is used as a part of pebble parameters that allows to maintain URLs, 
		handle tables filtering and build visual representation based on MChips. 

	*/
	PebbledHierarchyItem : (
		name : string, // e.g. `organizations`
		parameter : string, // e.g. `organization`
		id2label : (int) -> string, // e.g. find RhapsodeOrganization name by ID in DB/state
		children : [PebbledHierarchyItem],
	);

	makePebbledHierarchyItem(name : string, id2label : (int) -> string, children : [PebbledHierarchyItem]) -> PebbledHierarchyItem;

	// Build a material corresponding to the current values of pebbled hierarchy parameters.
	// Appends UI element (chips) to visually represent and edit pebbled hierarchy filters.
	MPebbledHierarchyBody(
		controller : PebbleController, 
		items : [PebbledHierarchyItem], 
		content : (Tree</* item parameter name */ string, /* id */ int>) -> Material,
		style : [PebbledHierarchyBodyStyle]
	) -> Material;

	PebbledHierarchyBodyStyle ::= PebbledHierarchyBodyAdditionalChips, PebbledHierarchyBodyErrorView,
		PebbledHierarchyBodyHideChips, PebbledHierarchyBodyChipBorders, PebbledHierarchyBodyChipPinnable;
		PebbledHierarchyBodyAdditionalChips(chips : Transform<[Material]>);
		PebbledHierarchyBodyErrorView(fn : (itemName : string, itemId : string) -> Material);
		// useful when hierarchy view does not depend on chip filtration and uses visual elements like breadcrumbs
		PebbledHierarchyBodyHideChips();
		PebbledHierarchyBodyChipBorders(left : double, top : double, right : double, bottom : double);
		PebbledHierarchyBodyChipPinnable(labels : [PinnedPebbleHierarchyChip]);

	PinnedPebbleHierarchyChip(label : string, utf : string, show : (Pebble) -> bool);
	// Display view corresponding to selected item preserving pebble parameters.
	// For example: open `organizations` table
	setViewForPebbledHierarchyItemParameters(
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		parameters : [KeyValue]
	) -> void;
	setViewForPebbledHierarchyItem(controller : PebbleController, items : [PebbledHierarchyItem], itemName : string) -> void;

	// Filter by the row ID of the data table corresponding to the given item. 
	// For example: open `projects` table filtered by selected `organization` ID.
	setViewForPebbledHierarchyFilterParametersChildren(
		manager : MaterialManager,
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		childrenName : string,
		id : int,
		parameters : [KeyValue]
	) -> void;
	setViewForPebbledHierarchyFilterParameters(
		manager : MaterialManager,
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		id : int,
		parameters : [KeyValue]
	) -> void;
	setViewForPebbledHierarchyFilter(
		manager : MaterialManager,
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		id : int
	) -> void;

	setViewWithNoFilter(controller : PebbleController, items : [PebbledHierarchyItem]) -> void;

	makePebbledHierarchyParameterName(itemName : string) -> string;
}

PebbledHierarchyItemData : (
	item : PebbledHierarchyItem,
	value : string, // e.g. "123"
	label : string,  // e.g. "My project"
);

PebbledHierarchyData ::= PebbledHierarchyItemsData, PebbledHierarchyError;

	PebbledHierarchyItemsData : (datas : [PebbledHierarchyItemData]);
	PebbledHierarchyError : (itemName : string, itemId : string);

makePebbledHierarchyItem(name : string, id2label : (int) -> string, children : [PebbledHierarchyItem]) -> PebbledHierarchyItem {
	PebbledHierarchyItem(
		name,
		makePebbledHierarchyParameterName(name),
		id2label,
		children
	)
}

MPebbledHierarchyBody(controller : PebbleController, items : [PebbledHierarchyItem], content : (Tree<string, int>) -> Material, style : [PebbledHierarchyBodyStyle]) -> Material {
	allItems = getAllPebbledHierarchyItems(items);
	valuesBs = map(allItems, \__ -> make(""));
	hideChips = containsStruct(style, PebbledHierarchyBodyHideChips());

	MLinkPebbleParameters(
		controller,
		mapi(allItems, \i, item -> {
			PebbleStringLink(item.parameter, valuesBs[i], nop1, RecordURLRestoreOrChangeParameters([]))
		}),
		MSelect(fmerge(valuesBs), \values -> {
			hdata = collectPebbledHierarchyData2(allItems, values, false);
			switch(hdata) {
				PebbledHierarchyItemsData(datas): {
					valuesMap = fold(datas, makeTree(), \acc, data -> {
						setTree(acc, data.item.parameter, s2i(data.value))
					});
					chips = if (hideChips) MEmpty() else {
						buildPebbledHierarchyChips(controller, datas, style);
					}
					MLines([
						chips,
						content(valuesMap)
					])
				}
				PebbledHierarchyError(itemName, itemId): {
					buildErrorView = extractStruct(
						style,
						PebbledHierarchyBodyErrorView(\name, id -> MCenter(MText(notFoundItemByPebbleParameterMessage(name, id), [MTitle()])))
					).fn;
					buildErrorView(itemName, itemId);
				}
			}
		})
	)
}

collectPebbledHierarchyData(controller : PebbleController, items : [PebbledHierarchyItem]) -> PebbledHierarchyData {
	allItems = getAllPebbledHierarchyItems(items);
	values = collectPebbledHierarchyItemsValues(controller, allItems);

	collectPebbledHierarchyData2(allItems, values, true);
}

collectPebbledHierarchyItemsValues(controller : PebbleController, items : [PebbledHierarchyItem]) -> [string] {
	pvs : [KeyValue] = collectCurrentPebbleParametersAndValues(controller, map(items, \item -> item.parameter));

	map(items, \item -> {
		findDef(pvs, \pv -> pv.key == item.parameter, KeyValue(item.parameter, "")).value
	})
}
	
collectPebbledHierarchyData2(items : [PebbledHierarchyItem], values : [string], includeEmpty : bool) -> PebbledHierarchyData {
	foldi(items, PebbledHierarchyItemsData([]), \i, acc, item -> {
		switch(acc) {
			PebbledHierarchyItemsData(datas): {
				value = values[i];

				if (value != "") {
					label = item.id2label(s2i(value));
					if (label != "") {
						PebbledHierarchyItemsData(
							arrayPush(datas, PebbledHierarchyItemData(item, value, label))
						)
					} else {
						PebbledHierarchyError(item.parameter, value);
					}
				} else if (includeEmpty) {
					PebbledHierarchyItemsData(
						arrayPush(datas, PebbledHierarchyItemData(item, "", ""))
					)
				} else {
					acc
				}
			}
			PebbledHierarchyError(__, __): acc;
		}
	})
}

buildPebbledHierarchyChips(controller : PebbleController, datas : [PebbledHierarchyItemData], style : [PebbledHierarchyBodyStyle]) -> Material {
	additionalChips = extractStruct(style, PebbledHierarchyBodyAdditionalChips(const([]))).chips;
	borders = extractStruct(style, PebbledHierarchyBodyChipBorders(8.0, 8.0, 8.0, 8.0));
	pinnables = extractStruct(style, PebbledHierarchyBodyChipPinnable([])).labels;
	utfPressedB = make(false);

	setViewInner = \name -> setViewForPebbledHierarchyItemParametersInner(
		controller,
		map(datas, \d -> d.item),
		name,
		[]
	);

	chips = map(
		datas,
		\data -> eitherFn(
			find(pinnables, \p -> p.label == data.item.parameter),
			\p : PinnedPebbleHierarchyChip -> MInteractive(
				[
					KeyDown(\ke -> if (ke.utf == p.utf) nextDistinct(utfPressedB, true)),
					KeyUp(\ke -> if (ke.utf == p.utf) nextDistinct(utfPressedB, false))
				],
				MSelect(
					fselect(
						getPinnedParametersTree(),
						FLift(\pt -> containsKeyTree(pt, p.label))
					),
					\pinned -> makePebbleHierarchyMChip(
						controller,
						data,
						\-> unPinParameter(p.label),
						\-> if (getValue(utfPressedB)) {
							if (pinned) {
								unPinParameter(p.label)
							} else {
								pinParameter(
									p.label,
									getCurrentPebbleLastParameter(controller, p.label, ""),
									p.show
								)
							}
						} else {
							setViewInner(data.item.name)
						},
						if (pinned) [MIcon("push_pin", [])] else []
					)
				)
			),
			\-> makePebbleHierarchyMChip(
				controller,
				data,
				nop,
				\-> setViewInner(data.item.name),
				[]
			)
		)
	);
	chipsB = fconcat(const(chips), additionalChips);
	getBorder = \border -> fif(feq(flength(chipsB), 0), const(0.0), const(border));
	MBorderTA(
		getBorder(borders.left), getBorder(borders.top), getBorder(borders.right), getBorder(borders.bottom),
		MFlexibleGrid(chipsB, [MOrdered(true)])
	)
}

makePebbleHierarchyMChip(
	controller : PebbleController,
	data : PebbledHierarchyItemData,
	unpinOnClose : () -> void,
	onClick : () -> void,
	style : [MChipStyle]
) -> MChip {
	MChip(
		data.label,
		concat(
			[
				MCloseButton(),
				MOnClose(\-> {
					unpinOnClose();
					setViewFromPebble(
						controller,
						extendCurrentPebbleWithParameters(
							controller,
							arrayPush(
								map(getAllChildrenOfPebbledHierarchyItem(data.item), \h -> KeyValue(h.parameter, "")),
								KeyValue(data.item.parameter, "")
							)
						)
					);
					true
				}),
				MOnClick(onClick)
			],
			style,
		)
	)
}

setViewForPebbledHierarchyItemParametersInner(
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	parameters : [KeyValue]
) -> void {	
	hdata = collectPebbledHierarchyData(controller, items);
	pebbleParameters = switch(hdata) {
		PebbledHierarchyItemsData(datas): {
			concat(
				filter(
					uniq(map(datas, \data -> KeyValue(data.item.parameter, data.value))),
					\dataParam -> !exists(parameters, \p -> p.key == dataParam.key)
				),
				parameters
			)
		}
		PebbledHierarchyError(__, __): {
			// otherwise user will get stuck with this error
			[]
		}
	};
	pebble = makeSimplePebble3(itemName, pebbleParameters);

	setViewFromPebble(
		controller,
		setLastPathPartParameters(
			findLastPebbleInStack(controller, lastElement(pebble.path, makeEmptyPathPart()), pebble),
			pebbleParameters
		)
	)
}

setViewForPebbledHierarchyItemParameters(
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	parameters : [KeyValue]
) -> void {
	allItems = getAllPebbledHierarchyItems(items);
	setViewForPebbledHierarchyItemParametersInner(controller, allItems, itemName, parameters);
}

setViewForPebbledHierarchyItem(controller : PebbleController, items : [PebbledHierarchyItem], itemName : string) -> void {
	setViewForPebbledHierarchyItemParameters(controller, items, itemName, [])
}

setViewForPebbledHierarchyFilterParametersChildren(
	manager : MaterialManager,
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	childrenName : string,
	id : int,
	parameters : [KeyValue]
) -> void {
	itemM = findPebbleByName(items, itemName);
	maybeApply(itemM, \item -> {
		if (item.children != []) {
			nextItem = findDef(item.children, \ch -> ch.name == childrenName, item.children[0]);
			setViewFromPebble(
				controller,
				makeSimplePebble3(nextItem.name, arrayPush(parameters, KeyValue(item.parameter, i2s(id))))
			);
			showMSnackbar(manager, formatString(_("Filter by %1 " + item.parameter + " activated"), [item.id2label(id)]), []);
		}
	});
}

setViewForPebbledHierarchyFilterParameters(
	manager : MaterialManager,
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	id : int,
	parameters : [KeyValue]
) -> void {
	setViewForPebbledHierarchyFilterParametersChildren(
		manager,
		controller,
		items,
		itemName,
		"",
		id,
		parameters
	)
}

findPebbleByName(items : [PebbledHierarchyItem], itemName: string) -> Maybe<PebbledHierarchyItem> {
	findmap(items, \item -> {
		if (item.name == itemName) {
			Some(item)
		} else {
			findPebbleByName(item.children, itemName)
		}
	})
}

setViewForPebbledHierarchyFilter(
	manager : MaterialManager,
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	id : int
) -> void {
	setViewForPebbledHierarchyFilterParameters(
		manager,
		controller,
		items,
		itemName,
		id,
		[]
	)
}

setViewWithNoFilter(controller : PebbleController, items : [PebbledHierarchyItem]) -> void {
	allItems = getAllPebbledHierarchyItems(items);
	setViewFromPebble(
		controller,
		extendCurrentPebbleWithParameters(controller, map(allItems, \item -> KeyValue(item.parameter, "")))
	)
}

makePebbledHierarchyParameterName(itemName : string) -> string {
	plural2single(makePebbleTabUid(itemName))
}

getAllChildrenOfPebbledHierarchyItemR(items : [PebbledHierarchyItem], acc : [PebbledHierarchyItem]) -> [PebbledHierarchyItem] {
	if (items == []) {
		acc
	} else {
		children = mapConcat(items, \item -> item.children);
		getAllChildrenOfPebbledHierarchyItemR(children, concat(acc, children));
	}
}

getAllChildrenOfPebbledHierarchyItem(item : PebbledHierarchyItem) -> [PebbledHierarchyItem] {
	getAllChildrenOfPebbledHierarchyItemR([item], [])
}

getAllPebbledHierarchyItems(items : [PebbledHierarchyItem]) -> [PebbledHierarchyItem] {
	concat(items, getAllChildrenOfPebbledHierarchyItemR(items, []));
}