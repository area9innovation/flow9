import material/material_snackbar;

import pebbles/pebble_controller;
import pebbles/pebble_utils;

export {
	/*
		PebbledHierarchy is an arrangement of menu items in which items correspond to 
		related data tables organized in a hierarchy. For example:

			`organizations` -> `projects` -> `subjects` -> `modules`
							-> `providers`

		In this example: clicking on a row in organizations table will open projects table 
		filtered by selected organization ID and so on. 

		Item name is used as a part of pebble parameters that allows to maintain URLs, 
		handle tables filtering and build visual representation based on MChips. 

	*/
	PebbledHierarchyItem : (
		name : string, // e.g. `organizations`
		parameter : string, // e.g. `organization`
		id2label : (int) -> string, // e.g. find RhapsodeOrganization name by ID in DB/state
		children : [PebbledHierarchyItem],
	);

	makePebbledHierarchyItem(name : string, id2label : (int) -> string, children : [PebbledHierarchyItem]) -> PebbledHierarchyItem;

	// Build a material corresponding to the current values of pebbled hierarchy parameters.
	// Appends UI element (chips) to visually represent and edit pebbled hierarchy filters.
	MPebbledHierarchyBody(
		controller : PebbleController, 
		items : [PebbledHierarchyItem], 
		content : (Tree</* item parameter name */ string, /* id */ int>) -> Material,
		style : [PebbledHierarchyBodyStyle]
	) -> Material;

	PebbledHierarchyBodyStyle ::= PebbledHierarchyBodyAdditionalChips, PebbledHierarchyBodyErrorView;
		PebbledHierarchyBodyAdditionalChips(chips : Transform<[Material]>);
		PebbledHierarchyBodyErrorView(fn : (itemName : string, itemId : string) -> Material);

	// Display view corresponding to selected item preserving pebble parameters.
	// For example: open `organizations` table
	setViewForPebbledHierarchyItemParameters(
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		parameters : [KeyValue]
	) -> void;
	setViewForPebbledHierarchyItem(controller : PebbleController, items : [PebbledHierarchyItem], itemName : string) -> void;

	// Filter by the row ID of the data table corresponding to the given item. 
	// For example: open `projects` table filtered by selected `organization` ID.
	setViewForPebbledHierarchyFilterParametersChildren(
		manager : MaterialManager,
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		childrenName : string,
		id : int,
		parameters : [KeyValue]
	) -> void;
	setViewForPebbledHierarchyFilterParameters(
		manager : MaterialManager,
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		id : int,
		parameters : [KeyValue]
	) -> void;
	setViewForPebbledHierarchyFilter(
		manager : MaterialManager,
		controller : PebbleController,
		items : [PebbledHierarchyItem],
		itemName : string,
		id : int
	) -> void;

	setViewWithNoFilter(controller : PebbleController, items : [PebbledHierarchyItem]) -> void;

	makePebbledHierarchyParameterName(itemName : string) -> string;
}

PebbledHierarchyItemData : (
	item : PebbledHierarchyItem,
	value : string, // e.g. "123"
	label : string,  // e.g. "My project"
);

PebbledHierarchyData ::= PebbledHierarchyItemsData, PebbledHierarchyError;

	PebbledHierarchyItemsData : (datas : [PebbledHierarchyItemData]);
	PebbledHierarchyError : (itemName : string, itemId : string);

makePebbledHierarchyItem(name : string, id2label : (int) -> string, children : [PebbledHierarchyItem]) -> PebbledHierarchyItem {
	PebbledHierarchyItem(
		name,
		makePebbledHierarchyParameterName(name),
		id2label,
		children,
	)
}

MPebbledHierarchyBody(controller : PebbleController, items : [PebbledHierarchyItem], content : (Tree<string, int>) -> Material, style : [PebbledHierarchyBodyStyle]) -> Material {
	allItems = getAllPebbledHierarchyItems(items);
	valuesBs = map(allItems, \__ -> make(""));

	MLinkPebbleParameters(
		controller,
		mapi(allItems, \i, item -> {
			PebbleStringLink(item.parameter, valuesBs[i], nop1, RecordURLRestoreOrChangeParameters([]))
		}),
		MSelect(fmerge(valuesBs), \values -> {
			hdata = collectPebbledHierarchyData2(allItems, values, false);
			switch(hdata) {
				PebbledHierarchyItemsData(datas): {
					valuesMap = fold(datas, makeTree(), \acc, data -> {
						setTree(acc, data.item.parameter, s2i(data.value))
					});

					MLines([
						buildPebbledHierarchyChips(controller, datas, style),
						content(valuesMap)
					])
				}
				PebbledHierarchyError(itemName, itemId): {
					buildErrorView = extractStruct(
						style,
						PebbledHierarchyBodyErrorView(\name, id -> MCenter(MText(notFoundItemByPebbleParameterMessage(name, id), [MTitle()])))
					).fn;
					buildErrorView(itemName, itemId);
				}
			}
		})
	)
}

collectPebbledHierarchyData(controller : PebbleController, items : [PebbledHierarchyItem]) -> PebbledHierarchyData {
	allItems = getAllPebbledHierarchyItems(items);
	values = collectPebbledHierarchyItemsValues(controller, allItems);

	collectPebbledHierarchyData2(allItems, values, true);
}

collectPebbledHierarchyItemsValues(controller : PebbleController, items : [PebbledHierarchyItem]) -> [string] {
	pvs : [KeyValue] = collectCurrentPebbleParametersAndValues(controller, map(items, \item -> item.parameter));

	map(items, \item -> {
		findDef(pvs, \pv -> pv.key == item.parameter, KeyValue(item.parameter, "")).value
	})
}
	
collectPebbledHierarchyData2(items : [PebbledHierarchyItem], values : [string], includeEmpty : bool) -> PebbledHierarchyData {
	foldi(items, PebbledHierarchyItemsData([]), \i, acc, item -> {
		switch(acc) {
			PebbledHierarchyItemsData(datas): {
				value = values[i];

				if (value != "") {
					label = item.id2label(s2i(value));
					if (label != "") {
						PebbledHierarchyItemsData(
							arrayPush(datas, PebbledHierarchyItemData(item, value, label))
						)
					} else {
						PebbledHierarchyError(item.parameter, value);
					}
				} else if (includeEmpty) {
					PebbledHierarchyItemsData(
						arrayPush(datas, PebbledHierarchyItemData(item, "", ""))
					)
				} else {
					acc
				}
			}
			PebbledHierarchyError(__, __): acc;
		}
	})
}

buildPebbledHierarchyChips(controller : PebbleController, datas : [PebbledHierarchyItemData], style : [PebbledHierarchyBodyStyle]) -> Material {
	additionalChips = extractStruct(style, PebbledHierarchyBodyAdditionalChips(const([]))).chips;

	chips = map(datas, \data -> {
		MChip(data.label, [
			MCloseButton(), 
			MOnClose(\-> {
				childrenParams = map(getAllChildrenOfPebbledHierarchyItem(data.item), \p -> KeyValue(p.parameter, ""));
				setViewFromPebble(
					controller,
					extendCurrentPebbleWithParameters(controller, arrayPush(childrenParams, KeyValue(data.item.parameter, "")))
				);	
				true
			}), 
			MOnClick(\-> {
				setViewForPebbledHierarchyItemParametersInner(controller, map(datas, \d -> d.item), data.item.name, [])
			})
		])
	});
	chipsB = fconcat(const(chips), additionalChips);
	border = fif(feq(flength(chipsB), 0), const(0.), const(8.));
	MBorderT(border, border, border, border, MFlexibleGrid(chipsB, [MKeepOrder()]))

}

setViewForPebbledHierarchyItemParametersInner(
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	parameters : [KeyValue]
) -> void {	
	hdata = collectPebbledHierarchyData(controller, items);
	pebbleParameters = switch(hdata) {
		PebbledHierarchyItemsData(datas): {
			concat(
				filter(
					uniq(map(datas, \data -> KeyValue(data.item.parameter, data.value))),
					\dataParam -> !exists(parameters, \p -> p.key == dataParam.key)
				),
				parameters
			)
		}
		PebbledHierarchyError(__, __): {
			// otherwise user will get stuck with this error
			[]
		}
	};
	pebble = makeSimplePebble3(itemName, pebbleParameters);

	setViewFromPebble(
		controller,
		setLastPathPartParameters(
			findLastPebbleInStack(controller, lastElement(pebble.path, makeEmptyPathPart()), pebble),
			pebbleParameters
		)
	)
}

setViewForPebbledHierarchyItemParameters(
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	parameters : [KeyValue]
) -> void {
	allItems = getAllPebbledHierarchyItems(items);
	setViewForPebbledHierarchyItemParametersInner(controller, allItems, itemName, parameters);
}

setViewForPebbledHierarchyItem(controller : PebbleController, items : [PebbledHierarchyItem], itemName : string) -> void {
	setViewForPebbledHierarchyItemParameters(controller, items, itemName, [])
}

setViewForPebbledHierarchyFilterParametersChildren(
	manager : MaterialManager,
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	childrenName : string,
	id : int,
	parameters : [KeyValue]
) -> void {
	itemM = findPebbleByName(items, itemName);
	maybeApply(itemM, \item -> {
		if (item.children != []) {
			nextItem = findDef(item.children, \ch -> ch.name == childrenName, item.children[0]);
			setViewFromPebble(
				controller,
				makeSimplePebble3(nextItem.name, arrayPush(parameters, KeyValue(item.parameter, i2s(id))))
			);
			showMSnackbar(manager, formatString(_("Filter by %1 " + item.parameter + " activated"), [item.id2label(id)]), []);
		}
	});
}

setViewForPebbledHierarchyFilterParameters(
	manager : MaterialManager,
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	id : int,
	parameters : [KeyValue]
) -> void {
	setViewForPebbledHierarchyFilterParametersChildren(
		manager,
		controller,
		items,
		itemName,
		"",
		id,
		parameters
	)
}

findPebbleByName(items : [PebbledHierarchyItem], itemName: string) -> Maybe<PebbledHierarchyItem> {
	findmap(items, \item -> {
		if (item.name == itemName) {
			Some(item)
		} else {
			findPebbleByName(item.children, itemName)
		}
	})
}

setViewForPebbledHierarchyFilter(
	manager : MaterialManager,
	controller : PebbleController,
	items : [PebbledHierarchyItem],
	itemName : string,
	id : int
) -> void {
	setViewForPebbledHierarchyFilterParameters(
		manager,
		controller,
		items,
		itemName,
		id,
		[]
	)
}

setViewWithNoFilter(controller : PebbleController, items : [PebbledHierarchyItem]) -> void {
	allItems = getAllPebbledHierarchyItems(items);
	setViewFromPebble(
		controller,
		extendCurrentPebbleWithParameters(controller, map(allItems, \item -> KeyValue(item.parameter, "")))
	)
}

makePebbledHierarchyParameterName(itemName : string) -> string {
	plural2single(makePebbleTabUid(itemName))
}

getAllChildrenOfPebbledHierarchyItemR(items : [PebbledHierarchyItem], acc : [PebbledHierarchyItem]) -> [PebbledHierarchyItem] {
	if (items == []) {
		acc
	} else {
		children = mapConcat(items, \item -> item.children);
		getAllChildrenOfPebbledHierarchyItemR(children, concat(acc, children));
	}
}

getAllChildrenOfPebbledHierarchyItem(item : PebbledHierarchyItem) -> [PebbledHierarchyItem] {
	getAllChildrenOfPebbledHierarchyItemR([item], [])
}

getAllPebbledHierarchyItems(items : [PebbledHierarchyItem]) -> [PebbledHierarchyItem] {
	concat(items, getAllChildrenOfPebbledHierarchyItemR(items, []));
}