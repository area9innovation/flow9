import pebbles/pebble_parameters;
import pebbles/pebble_tabs;
import pebbles/pebble_buttons;

export {
	// Extracts parameter value from the current pebble and look for content item based on UID.
	// Returns error message if content item is not found by given UID.
	/*

	For example:

		buildPebbleParameterBasedView(
			state.pebbleController,
			"project",
			"bone",
			\x -> i2s(x.id),
			state.dbState.bugfourDbState.bonesB,
			\bone -> {
				...
			}
		)

	*/
	buildPebbleParameterBasedView(
		controller : PebbleController,
		pathPathName : string,
		parameter : string,
		getItemUID : (?) -> string,
		itemsB : Transform<[?]>,
		content : (?) -> Material
	) -> Material;
	// Alternatively, use this function to build the material based on the current parameter value
	getCurrentPebbleParameterByPathName(controller : PebbleController, pathName : string, parameterName : string) -> string;

	buildLastPathPartParameterBasedView(
		controller : PebbleController,
		parameter : string,
		getItemUID : (?) -> string,
		itemsB : Transform<[?]>,
		content : (?) -> Material
	) -> Material;

	// Builds a link between given pebble parameter and showing a dialog to edit content item based on UID.
	// Shows error message dialog if content item is not found by given UID.
	/*

	For example:

		editItemB = make("");

		MLinkPebbleParameters(state.pebbleController,
			[
				makePebbleStringEditDialogTrigger(
					state.manager,
					"edit_item",
					editItemB,
					\item -> i2s(item.id),
					itemsB,
					\item, isRunningB, disposer -> showEditItemDialog(item, isRunningb, disposer),
					RecordURLChange()
				)
			],
			... // body of the view
		)

	*/
	makePebbleStringEditDialogTrigger(
		manager : MaterialManager,
		parameter : string,
		valueB : DynamicBehaviour<string>,
		getItemUID : (?) -> string,
		itemsB : Transform<[?]>,
		showDialogFn : (index : int, item : ?, isRunningB : Transform<bool>, disposer : () -> void) -> void,
		recordHistory : PebbleAction
	) -> PebbleStringLink;

	makePebbleStringEditDialogTriggerWithCustomNoAccess(
		manager : MaterialManager,
		parameter : string,
		valueB : DynamicBehaviour<string>,
		getItemUID : (?) -> string,
		itemsB : Transform<[?]>,
		showDialogFn : (index : int, item : ?, isRunningB : Transform<bool>, disposer : () -> void) -> void,
		noAccessView : (uid : string, isRunningB : Transform<bool>, disposer : () -> void) -> void,
		recordHistory : PebbleAction
	) -> PebbleStringLink;

	notFoundItemByPebbleParameterMessage(parameter : string, itemUid : string) -> string;
	showPebbleParameterValueIsWrongDialog(manager : MaterialManager, parameter : string, itemUid : string, isRunningT : Transform<bool>, disposer : () -> void) -> void;

	// returns KeyValue(<parameter name>, <current value as a string>)
	pebbleParameterLink2KeyValue(link : PebbleParameterLink) -> KeyValue;
	// Apply fn every time pebble parameter value is changed
	inject2PebbleParameterLink(link : PebbleParameterLink, fn : () -> void) -> PebbleParameterLink;
}

buildPebbleParameterBasedView(
	controller : PebbleController,
	pathName : string,
	parameter : string,
	getItemUID : (?) -> string,
	itemsB : Transform<[?]>,
	content : (?) -> Material
) -> Material {
	value = getCurrentPebbleParameterByPathName(controller, pathName, parameter);
	switch(find(fgetValue(itemsB), \x -> getItemUID(x) == value)) {
		Some(item): {
			content(item)
		}
		None(): {
			MText(notFoundItemByPebbleParameterMessage(parameter, value), [])
		}
	}
}

getCurrentPebbleParameterByPathName(controller : PebbleController, pathName : string, parameterName : string) -> string {
	findPathParameter(pathName, getCurrentPebble(controller).path, parameterName, "");
}

buildLastPathPartParameterBasedView(
	controller : PebbleController,
	parameter : string,
	getItemUID : (?) -> string,
	itemsB : Transform<[?]>,
	content : (?) -> Material
) -> Material {
	value = getLastPathPartParameter(getCurrentPebble(controller), parameter, "");
	switch(find(fgetValue(itemsB), \x -> getItemUID(x) == value)) {
		Some(item): {
			content(item)
		}
		None(): {
			MText(notFoundItemByPebbleParameterMessage(parameter, value), [])
		}
	}
}

makePebbleStringEditDialogTriggerWithCustomNoAccess(
	manager : MaterialManager,
	parameter : string,
	valueB : DynamicBehaviour<string>,
	getItemUID : (?) -> string,
	itemsB : Transform<[?]>,
	showDialogFn : (index : int, item : ?, isRunningB : Transform<bool>, disposer : () -> void) -> void,
	noAccessView : (uid : string, isRunningB : Transform<bool>, disposer : () -> void) -> void,
	recordHistory : PebbleAction
) -> PebbleStringLink {
	makePebbleStringTrigger(
		parameter,
		valueB,
		\uid, isRunningB, disposer -> {
			items = fgetValue(itemsB);
			switch(findi(items, \item -> getItemUID(item) == uid)) {
				Some(index): {
					showDialogFn(index, items[index], isRunningB, disposer)
				}
				None(): {
					noAccessView(uid, isRunningB, disposer)
				}
			}
		},
		recordHistory
	)
}

makePebbleStringEditDialogTrigger(
	manager : MaterialManager,
	parameter : string,
	valueB : DynamicBehaviour<string>,
	getItemUID : (?) -> string,
	itemsB : Transform<[?]>,
	showDialogFn : (index : int, item : ?, isRunningB : Transform<bool>, disposer : () -> void) -> void,
	recordHistory : PebbleAction
) -> PebbleStringLink {
	makePebbleStringEditDialogTriggerWithCustomNoAccess(
		manager,
		parameter,
		valueB,
		getItemUID,
		itemsB,
		showDialogFn,
		\uid, isRunningB, disposer -> showPebbleParameterValueIsWrongDialog(manager, parameter, uid, isRunningB, disposer),
		recordHistory
	);
}

showPebbleParameterValueIsWrongDialog(manager : MaterialManager, parameter : string, itemUid : string, isRunningT : Transform<bool>, disposer : () -> void) -> void {
	ShowMDialog(
		manager,
		fnot(isRunningT),
		[
			MDialogUseFrame(),
			MDialogActions([
				MTextButton(_("CLOSE"), disposer, [MRed(500)], [MShortcut("enter")])
			])
		],
		MText(notFoundItemByPebbleParameterMessage(parameter, itemUid), []),
	);
}

notFoundItemByPebbleParameterMessage(parameter : string, itemUid : string) -> string {
	if (itemUid == "") {
		formatString(_("You are on the wrong page, the %1 is not defined"), [humpCase(parameter, true)]);
	} else {
		pieces = strSplit(parameter, "_");
		action = pieces[0];
		itemType = concatStrings(map(tail(pieces), toCapitalization));
		formatString(_("You do not have access to %1 %2 %3"), [action, itemType, itemUid]);
	}
}

pebbleParameterLink2KeyValue(link : PebbleParameterLink) -> KeyValue {
	switch (link) {
		PebbleStringLink(parameter, valueB, __, __): KeyValue(parameter, getValue(valueB));
		PebbleIntLink(parameter, valueB, __, __): KeyValue(parameter, if (getValue(valueB) > 0) i2s(getValue(valueB)) else "");
		PebbleBoolLink(parameter, valueB, __, __): KeyValue(parameter, if (getValue(valueB)) "true" else "");
		PebbleBoolBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, action): KeyValue(parameter, onValueChange(getValue(valueB)));
		PebbleDoubleBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, action): KeyValue(parameter, onValueChange(getValue(valueB)));
		PebbleCustomBidirectionalLink(parameter, valueT, onParameterChange, onValueChange, record): KeyValue(parameter, fgetValue(valueT));
	}
}

inject2PebbleParameterLink(link : PebbleParameterLink, fn : () -> void) -> PebbleParameterLink {
	switch (link) {
		PebbleStringLink(parameter, valueB, onChange, action): PebbleStringLink(parameter, valueB, \value -> {onChange(value); fn();}, action);
		PebbleIntLink(parameter, valueB, onChange, action): PebbleIntLink(parameter, valueB, \value -> {onChange(value); fn();}, action);
		PebbleBoolLink(parameter, valueB, onChange, action): PebbleBoolLink(parameter, valueB, \value -> {onChange(value); fn();}, action);
		PebbleBoolBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, action): {
			PebbleBoolBidirectionalLink(parameter, valueB, \value -> {v = onParameterChange(value); fn(); v;}, \value -> {v = onValueChange(value); fn(); v;}, action);
		}
		PebbleDoubleBidirectionalLink(parameter, valueB, onParameterChange, onValueChange, action): {
			PebbleDoubleBidirectionalLink(parameter, valueB, \value -> {v = onParameterChange(value); fn(); v;}, \value -> {v = onValueChange(value); fn(); v;}, action);
		}
		PebbleCustomBidirectionalLink(parameter, valueT, onParameterChange, onValueChange, record): {
			PebbleCustomBidirectionalLink(link with
				onValueChange = \ -> {
					onValueChange();
					fn();
				},
				onParameterChange = \value -> {
					onParameterChange(value);
					fn();
				}
			);
		}
	}
}
