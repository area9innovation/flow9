import frp;
import flowstructs;
import string;

export {
	FrpAsyncStatus ::=  FrpAsyncReady, FrpAsyncInProgress, FrpAsyncError;
	FrpAsyncReady(); FrpAsyncInProgress(); FrpAsyncError(e : [string]);

	FrpAsyncNode<?> ::= FrpAsyncValue<?>, FrpAsyncArray<?>;


	FrpAsyncBufferPolicy ::= FrpAsyncBufferNone, FrpAsyncBufferFirst, FrpAsyncBufferLast;
	FrpAsyncBufferNone();
	FrpAsyncBufferFirst(size : int);
	FrpAsyncBufferLast(size : int);

	makeFrpAsyncValue(value : ?) -> FrpAsyncValue<?>;
	makeFrpAsyncArray(values : [?]) -> FrpAsyncArray<?>;

	rAsyncGet(node : FrpAsyncValue<?>) -> ?;
	rAsyncGetA(node : FrpAsyncArray<?>) -> [?];

	rAsyncDisconnect(node : FrpAsyncNode<?>) -> void;

	rAsyncStatus(node : FrpAsyncNode<?>) -> FrpAsyncStatus;
	rAsyncInProgress(node : FrpAsyncNode<?>) -> bool;
	rAsyncReady(node : FrpAsyncNode<?>) -> bool;
	rAsyncErrors(node : FrpAsyncNode<?>) -> [string];

	rAsyncNext(node : FrpAsyncValue<?>, value : ?) -> void;
	rAsyncSetValue(node : FrpAsyncValue<?>, value : ?) -> void;
	rAsyncSetArray(node : FrpAsyncArray<?>, value : [?]) -> void;
	rAsyncSetInProgress(node : FrpAsyncNode<?>) -> void;
	rAsyncSetError(node : FrpAsyncNode<?>, error : string) -> void;

	/// connect ///

	rAsyncConnect(
		src : FrpAsyncValue<?>,
		dst : FrpAsyncValue<??>,
		init : bool,
		fn : (?) -> ??,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncConnect2(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		dst : FrpAsyncValue<???>,
		init : bool,
		fn : (?, ??) -> ???,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncConnect3(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		dst : FrpAsyncValue<????>,
		init : bool,
		fn : (?, ??, ???) -> ????,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncConnect4(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		src4 : FrpAsyncValue<????>,
		dst : FrpAsyncValue<?????>,
		init : bool,
		fn : (?, ??, ???, ????) -> ?????,
		errorFn : ([string]) -> [string],
	) -> void;

	/// connect async fn ///

	rAsyncFnConnect(
		src : FrpAsyncValue<?>,
		dst : FrpAsyncValue<??>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?/*src*/, ??/*currentValue*/, (??) -> void/*onDone*/, (string) -> void/*onError*/) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncFnConnect2(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		dst : FrpAsyncValue<???>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?, ??, ???, (???) -> void, (string) -> void) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncFnConnect3(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		dst : FrpAsyncValue<????>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?, ??, ???, ????, (????) -> void, (string) -> void) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncFnConnect4(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		src4 : FrpAsyncValue<????>,
		dst : FrpAsyncValue<?????>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?, ??, ???, ????, ?????, (?????) -> void, (string) -> void) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	/// select ///

	rAsyncSelect(
		src : FrpAsyncValue<?>,
		fn : (?) -> ??,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<??>;

	rAsyncSelect2(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		fn : (?, ??) -> ???,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<???>;

	rAsyncSelect3(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		fn : (?, ??, ???) -> ????,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<????>;

	rAsyncSelect4(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		src4 : FrpAsyncValue<????>,
		fn : (?, ??, ???, ????) -> ?????,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<?????>;

	/// arrays ///

	rAsyncSelectRangeMapDyn(
		src : FrpAsyncArray<?>,
		start : FrpCell<int>,
		count : FrpCell<int>,
		fn : (?) -> ??,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncArray<??>;

	/// subscribe ///

	rAsyncSubscribe(
		cell : FrpAsyncValue<?>,
		init : bool,
		fn : (?, FrpAsyncStatus) -> void,
	) -> () -> void;

	rAsyncSubscribe2(
		cell1 : FrpAsyncValue<?>,
		cell2 : FrpAsyncValue<??>,
		init : bool,
		fn : (?, ??, FrpAsyncStatus) -> void,
	) -> () -> void;

	rAsyncSubscribe3(
 		cell1 : FrpAsyncValue<?>,
		cell2 : FrpAsyncValue<??>,
 		cell3 : FrpAsyncValue<???>,
		init : bool,
		fn : (?, ??, ???, FrpAsyncStatus) -> void,
	) -> () -> void;

	rAsyncSubscribe4(
 		cell1 : FrpAsyncValue<?>,
		cell2 : FrpAsyncValue<??>,
 		cell3 : FrpAsyncValue<???>,
		cell4 : FrpAsyncValue<????>,
		init : bool,
		fn : (?, ??, ???, ????, FrpAsyncStatus) -> void,
	) -> () -> void;
}

FrpAsyncValue(
	frpNode : FrpValue<?>,
	asyncStatus : FrpValue<FrpAsyncStatus>,
);

FrpAsyncArray(
	frpNode : FrpArray<?>,
	asyncStatus : FrpValue<FrpAsyncStatus>,
);


/// constructors ///

makeFrpAsyncValue(value : ?) -> FrpAsyncValue<?> {
	FrpAsyncValue(rmake(value), rmake(FrpAsyncReady()));
}

makeFrpAsyncArray(values : [?]) -> FrpAsyncArray<?> {
	FrpAsyncArray(rmakeA(values), rmake(FrpAsyncReady()));
}

/// disconnector ///

rAsyncDisconnect(node : FrpAsyncNode<?>) -> void {
	rdisconnect(node.frpNode);
	rdisconnect(node.asyncStatus);
}

/// check status and value ///

rAsyncStatus(node : FrpAsyncNode<?>) -> FrpAsyncStatus {
	rget(node.asyncStatus);
}

rAsyncInProgress(node : FrpAsyncNode<?>) -> bool {
	rAsyncStatus(node) == FrpAsyncInProgress();
}

rAsyncReady(node : FrpAsyncNode<?>) -> bool {
	rAsyncStatus(node) == FrpAsyncReady();
}

rAsyncErrors(node : FrpAsyncNode<?>) -> [string] {
	switch(rAsyncStatus(node)) {
		FrpAsyncError(e): e;
		default : [];
	}
}

rAsyncGet(node : FrpAsyncValue<?>) -> ? {
	rget(node.frpNode);
}

rAsyncGetA(node : FrpAsyncArray<?>) -> [?] {
	rgetA(node.frpNode);
}

/// setters ///

rAsyncSetValue(node : FrpAsyncValue<?>, value : ?) -> void {
	rnext2(node.frpNode, node.asyncStatus, value, FrpAsyncReady())
}

rAsyncSetArray(node : FrpAsyncArray<?>, value : [?]) -> void {
	rnextVA(node.asyncStatus, node.frpNode, FrpAsyncReady(), value)
}

rAsyncSetInProgress(node : FrpAsyncNode<?>) -> void {
	rnext(node.asyncStatus, FrpAsyncInProgress())
}

rAsyncSetError(node : FrpAsyncNode<?>, error : string) -> void {
	rnext(node.asyncStatus, FrpAsyncError([error]))
}

rAsyncNext(node : FrpAsyncValue<?>, value : ?) -> void {
	rnext(node.asyncStatus, FrpAsyncInProgress());
	rnext2(node.frpNode, node.asyncStatus, value, FrpAsyncReady())
};

/// connect ///

rAsyncConnect(
	src : FrpAsyncValue<?>,
	dst : FrpAsyncValue<??>,
	init : bool,
	fn : (?) -> ??,
	errorFn : ([string]) -> [string],
) -> void {
	rconnect(src.frpNode, dst.frpNode, init, fn);
	rAsyncConnectStatus([src], dst, errorFn, init);
}

rAsyncFnConnect(
	src : FrpAsyncValue<?>,
	dst : FrpAsyncValue<??>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, (??) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncSubscrStatuses(
		[src.asyncStatus],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			srcVal = rget(src.frpNode);// to close it in lambda
			\dv -> asyncFn(srcVal, dv, onDone, onError);
		},
		errorFn
	);
}


rAsyncFnConnect2(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	dst : FrpAsyncValue<???>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, ???, (???) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncSubscrStatuses(
		[src1.asyncStatus, src2.asyncStatus],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			// closures
			v1 = rget(src1.frpNode);
			v2 = rget(src2.frpNode);
			\dv -> asyncFn(v1, v2, dv, onDone, onError);
		},
		errorFn
	);
}

rAsyncFnConnect3(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	dst : FrpAsyncValue<????>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, ???, ????, (????) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncSubscrStatuses(
		[src1.asyncStatus, src2.asyncStatus, src3.asyncStatus],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			// closures
			v1 = rget(src1.frpNode);
			v2 = rget(src2.frpNode);
			v3 = rget(src3.frpNode);
			\dv -> asyncFn(v1, v2, v3, dv, onDone, onError);
		},
		errorFn
	);
}

rAsyncFnConnect4(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	src4 : FrpAsyncValue<????>,
	dst : FrpAsyncValue<?????>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, ???, ????, ?????, (?????) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncSubscrStatuses(
		[src1.asyncStatus, src2.asyncStatus, src3.asyncStatus, src4.asyncStatus],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			// closures
			v1 = rget(src1.frpNode);
			v2 = rget(src2.frpNode);
			v3 = rget(src3.frpNode);
			v4 = rget(src4.frpNode);
			\dv -> asyncFn(v1, v2, v3, v4, dv, onDone, onError);
		},
		errorFn
	);
}

rAsyncConnect2(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	dst : FrpAsyncValue<???>,
	init : bool,
	fn : (?, ??) -> ???,
	errorFn : ([string]) -> [string],
) -> void {
	rconnect2(src1.frpNode, src2.frpNode, dst.frpNode, init, fn);
	rAsyncConnectStatus([src1, src2], dst, errorFn, init);
}

rAsyncConnect3(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	dst : FrpAsyncValue<????>,
	init : bool,
	fn : (?, ??, ???) -> ????,
	errorFn : ([string]) -> [string],
) -> void {
	rconnect3(src1.frpNode, src2.frpNode, src3.frpNode, dst.frpNode, init, fn);
	rAsyncConnectStatus([src1, src2, src3], dst, errorFn, init);
}

rAsyncConnect4(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	src4 : FrpAsyncValue<????>,
	dst : FrpAsyncValue<?????>,
	init : bool,
	fn : (?, ??, ???, ????) -> ?????,
	errorFn : ([string]) -> [string],
) -> void {
	rconnect4(src1.frpNode, src2.frpNode, src3.frpNode, src4.frpNode, dst.frpNode, init, fn);
	rAsyncConnectStatus([src1, src2, src3, src4], dst, errorFn, init);
}

/// select ///

rAsyncSelect(
	src : FrpAsyncValue<?>,
	fn : (?) -> ??,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<??> {
	FrpAsyncValue(
		rselect(src.frpNode, fn),
		rAsyncSelectStatus([src], errorFn)
	);
}

rAsyncSelect2(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	fn : (?, ??) -> ???,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<???> {
	FrpAsyncValue(
		rselect2(src1.frpNode, src2.frpNode, fn),
		rAsyncSelectStatus([src1, src2], errorFn)
	);
}

rAsyncSelect3(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	fn : (?, ??, ???) -> ????,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<????> {
	FrpAsyncValue(
		rselect3(src1.frpNode, src2.frpNode, src3.frpNode, fn),
		rAsyncSelectStatus([src1, src2, src3], errorFn)
	);
}

rAsyncSelect4(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	src4 : FrpAsyncValue<????>,
	fn : (?, ??, ???, ????) -> ?????,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<?????> {
	FrpAsyncValue(
		rselect4(src1.frpNode, src2.frpNode, src3.frpNode, src4.frpNode, fn),
		rAsyncSelectStatus([src1, src2, src3, src4], errorFn)
	);
}

/// subscribe ///

rAsyncSubscribe(
	cell : FrpAsyncValue<?>,
	init : bool,
	fn : (?, FrpAsyncStatus) -> void,
) -> () -> void {
	rsubscribe2(cell.frpNode, cell.asyncStatus, init, fn);
}

rAsyncSubscribe2(
	cell1 : FrpAsyncValue<?>,
	cell2 : FrpAsyncValue<??>,
	init : bool,
	fn : (?, ??, FrpAsyncStatus) -> void,
) -> () -> void {
	rsubscribe4(cell1.frpNode, cell2.frpNode, cell1.asyncStatus, cell2.asyncStatus, init,
		\v1, v2, s1, s2 -> {
			status = rAsyncStatusBind([s1,s2], idfn);
			fn(v1, v2, status);
		}
	);
}

rAsyncSubscribe3(
 	cell1 : FrpAsyncValue<?>,
	cell2 : FrpAsyncValue<??>,
 	cell3 : FrpAsyncValue<???>,
	init : bool,
	fn : (?, ??, ???, FrpAsyncStatus) -> void,
) -> () -> void {
	onUpdate = \-> {
		v1 = rget(cell1.frpNode);
		v2 = rget(cell2.frpNode);
		v3 = rget(cell3.frpNode);
		s1 = rget(cell1.asyncStatus);
		s2 = rget(cell2.asyncStatus);
		s3 = rget(cell3.asyncStatus);
		status = rAsyncStatusBind([s1,s2,s3], idfn);
		fn(v1, v2, v3, status);
	}
	uns1 = rsubscribe4(cell1.frpNode, cell2.frpNode, cell1.asyncStatus, cell2.asyncStatus, init,
		\__, __, __, __ -> onUpdate());
	uns2 = rsubscribe2(cell3.frpNode, cell3.asyncStatus, init,
		\__, __ -> onUpdate());
	\-> applyall([uns1, uns2]);
}


rAsyncSubscribe4(
 	cell1 : FrpAsyncValue<?>,
	cell2 : FrpAsyncValue<??>,
 	cell3 : FrpAsyncValue<???>,
	cell4 : FrpAsyncValue<????>,
	init : bool,
	fn : (?, ??, ???, ????, FrpAsyncStatus) -> void,
) -> () -> void {

	onUpdate = \-> {
		v1 = rget(cell1.frpNode);
		v2 = rget(cell2.frpNode);
		v3 = rget(cell3.frpNode);
		v4 = rget(cell4.frpNode);
		s1 = rget(cell1.asyncStatus);
		s2 = rget(cell2.asyncStatus);
		s3 = rget(cell3.asyncStatus);
		s4 = rget(cell4.asyncStatus);
		status = rAsyncStatusBind([s1,s2,s3,s4], idfn);
		fn(v1, v2, v3, v4, status);
	}
	uns1 = rsubscribe4(cell1.frpNode, cell2.frpNode, cell1.asyncStatus, cell2.asyncStatus, init,
		\__, __, __, __ -> onUpdate());
	uns2 = rsubscribe4(cell3.frpNode, cell4.frpNode, cell3.asyncStatus, cell4.asyncStatus, init,
		\__, __, __, __ -> onUpdate());
	\-> applyall([uns1, uns2]);
}

/// arrays ///

rAsyncSelectRangeMapDyn(
	src : FrpAsyncArray<?>,
	start : FrpCell<int>,
	count : FrpCell<int>,
	fn : (?) -> ??,
	errorFn : ([string]) -> [string]
) -> FrpAsyncArray<??> {
	FrpAsyncArray(
		rselectARangeMapDynamic(src.frpNode, start, count, fn),
		rAsyncSelectStatus([src], errorFn),
	);
}

/// utils ///

// internal subscribtion util
rAsyncSubscrStatuses(
	srcStatuses : [FrpValue<FrpAsyncStatus>],
	dst : FrpAsyncValue<?>,
	bufferPolicy : FrpAsyncBufferPolicy,
	init : bool,
	asyncFn : ((?) -> void/*updateFn*/, (string) -> void/*errorFn*/) -> (?) -> void,
	errorFn : ([string]) -> [string],
) -> void {
	initialized = ref false;
	started = ref false;
	delayedActions : DList<(?) -> void> = makeDList();

	onError = \e : string -> {
		rnext(dst.asyncStatus, FrpAsyncError([e]));
		started := false;
	};

	updateFn = \v : ? -> {
		// println("rAsyncSubscrStatuses update:" + toString(v) + " delayed cnt:" + toString(lengthDList(delayedActions)));
		rnext(dst.frpNode, v);
		// println("rAsyncSubscrStatuses delayedActions:" + toString(lengthDList(delayedActions)));
		delayedFnM = popFirstDList(delayedActions);

		eitherFn(
			delayedFnM,
			\fn -> {// run delayed update
				// println("rAsyncSubscrStatuses: start delayed action");
				fn(rget(dst.frpNode));
				// status == FrpAsyncInProgress, started == true - don't change them
			},
			\-> {
				rnext(dst.asyncStatus, FrpAsyncReady());
				started := false;
			}
		);
	};

	uns =
		rsubscribeMany(srcStatuses, init,
			\arr -> {
				sourcesStatus = rAsyncStatusBind(arr, errorFn);
				// println("rAsyncSubscrStatuses statuses:" + toString(arr));
				// println("rAsyncSubscrStatuses started:" + toString(^started));
				// println("rAsyncSubscrStatuses sourcesStatus:" + toString(sourcesStatus));

				if (!^started) {
					switch(sourcesStatus) {
						FrpAsyncError(errors): {
							rnext(dst.asyncStatus, sourcesStatus);
						};
						FrpAsyncInProgress(): {
							rnext(dst.asyncStatus, sourcesStatus);
						};
						FrpAsyncReady(): {
							status = rget(dst.asyncStatus);
							if (^initialized) {
								if (status == FrpAsyncInProgress()) {
									// to start async process set FrpAsyncInProgress status before
									started := true;
									fn = asyncFn(updateFn, onError);
									fn(rget(dst.frpNode));
								} else  {// wrong case
									// TODO: error handling
									println("rAsyncSubscrStatuses, error: wrong node status " + toString(status));
									rnext(dst.asyncStatus, FrpAsyncReady());
								}
							} else {// initialization
								initialized := true;
								rnext(dst.asyncStatus, FrpAsyncInProgress());
								started := true;
								fn = asyncFn(updateFn, onError);
								fn(rget(dst.frpNode));
							};
						};

					};
				} else if (sourcesStatus == FrpAsyncReady())  {// save in the queue as delayed action
					// println("rAsyncSubscrStatuses: push action into queue");
					// println("rAsyncSubscrStatuses delayedActions count:" + toString(lengthDList(delayedActions)));
					switch(bufferPolicy) {
						FrpAsyncBufferNone(): {};// do nothing
						FrpAsyncBufferFirst(size): {
							fn = asyncFn(updateFn, onError);  // delayed action
							if (lengthDList(delayedActions) < size) {
								pushDList(delayedActions, fn) |> ignore;
							} else {
								println("rAsyncSubscrStatuses, warning: queue is overwhelmed");
							}
						};
						FrpAsyncBufferLast(size): {// TODO
							fn = asyncFn(updateFn, onError); // delayed action
							if (lengthDList(delayedActions) >= size)
								popFirstDList(delayedActions) |> ignore;
							pushDList(delayedActions, fn) |> ignore;
						};
					}
				}
			}
		);

	rAddDisposer(dst.asyncStatus, uns);
}


rAsyncStatusBind(
	srcStatus : [FrpAsyncStatus],
	errorFn : ([string]) -> [string]
) -> FrpAsyncStatus {
	getErr = \asyncStatus ->
		switch(asyncStatus) {
			FrpAsyncError(errA): errorFn(errA);
			default: [];
		};

	errors = fold(srcStatus, [], \acc,v -> concat(acc, getErr(v)));

	if (errors != []) {
		FrpAsyncError(errors);
	} else if (contains(srcStatus, FrpAsyncInProgress())) {
		FrpAsyncInProgress();
	} else {
		FrpAsyncReady();
	}
}

rAsyncSelectStatus(
	srcs : [FrpAsyncNode<?>],
	errorFn : ([string]) -> [string]
) -> FrpValue<FrpAsyncStatus> {
	rselectMany(map(srcs, \src -> src.asyncStatus), \arr -> rAsyncStatusBind(arr, errorFn))
}

rAsyncConnectStatus(
	srcs : [FrpAsyncNode<?>],
	dst : FrpAsyncNode<?>,
	errorFn : ([string]) -> [string],
	init : bool,
) -> void {
	rconnectMany(
		map(srcs, \src -> src.asyncStatus),
		dst.asyncStatus,
		init,
		\arr -> rAsyncStatusBind(arr, errorFn),
	);
}
