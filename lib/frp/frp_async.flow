import frp/frp;
import flowstructs;
import string;

export {
	FrpAsyncValue(
		frpNode : FrpValue<?>,
		asyncStatus : FrpValue<FrpAsyncStatus>,
	);

	FrpAsyncArray(
		frpNode : FrpArray<?>,
		asyncStatus : FrpValue<FrpAsyncStatus>,
	);

	FrpAsyncStatus ::=  FrpAsyncReady, FrpAsyncInProgress, FrpAsyncError;
	FrpAsyncReady(); FrpAsyncInProgress(); FrpAsyncError(e : [string]);

	FrpAsyncNode<?> ::= FrpAsyncValue<?>, FrpAsyncArray<?>;

	FrpAsyncBufferPolicy ::= FrpAsyncBufferNone, FrpAsyncBufferFirst, FrpAsyncBufferLast;
	FrpAsyncBufferNone();
	FrpAsyncBufferFirst(size : int);
	FrpAsyncBufferLast(size : int);

	/// constructors //
	makeFrpAsyncValue(value : ?) -> FrpAsyncValue<?>;
	makeFrpAsyncArray(values : [?]) -> FrpAsyncArray<?>;
	wrapFrpAsyncValue(cell : FrpValue<?>) -> FrpAsyncValue<?>;
	wrapFrpAsyncArray(frpArray : FrpArray<?>) -> FrpAsyncArray<?>;

	/// getters ///
	rAsyncGet(node : FrpAsyncValue<?>) -> ?;
	rAsyncGetA(node : FrpAsyncArray<?>) -> [?];

	/// check status ///
	rAsyncStatus(node : FrpAsyncNode<?>) -> FrpAsyncStatus;
	rAsyncInProgress(node : FrpAsyncNode<?>) -> bool;
	rAsyncReady(node : FrpAsyncNode<?>) -> bool;
	rAsyncErrors(node : FrpAsyncNode<?>) -> [string];

	/// setters ///
	rAsyncNext(node : FrpAsyncValue<?>, value : ?) -> void;
	rAsyncSetValue(node : FrpAsyncValue<?>, value : ?) -> void;
	rAsyncSetArray(node : FrpAsyncArray<?>, value : [?]) -> void;
	rAsyncSetInProgress(node : FrpAsyncNode<?>) -> void;
	rAsyncSetError(node : FrpAsyncNode<?>, error : string) -> void;

	/// connectors ///

	rAsyncConnect(
		src : FrpAsyncValue<?>,
		dst : FrpAsyncValue<??>,
		init : bool,
		fn : (?) -> ??,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncConnect2(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		dst : FrpAsyncValue<???>,
		init : bool,
		fn : (?, ??) -> ???,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncConnect3(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		dst : FrpAsyncValue<????>,
		init : bool,
		fn : (?, ??, ???) -> ????,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncConnect4(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		src4 : FrpAsyncValue<????>,
		dst : FrpAsyncValue<?????>,
		init : bool,
		fn : (?, ??, ???, ????) -> ?????,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncConnectV(
		src : FrpValue<?>,
		dst : FrpAsyncValue<??>,
		init : bool,
		fn : (?) -> ??,
		errorFn : (?) -> string
	) -> void;

	rAsyncConnectV2(
		src1 : FrpValue<?>,
		src2 : FrpValue<??>,
		dst : FrpAsyncValue<???>,
		init : bool,
		fn : (?, ??) -> ???,
		errorFn : (?, ??) -> string,
	) -> void;

	rAsyncConnectV3(
		src1 : FrpValue<?>,
		src2 : FrpValue<??>,
		src3 : FrpValue<???>,
		dst : FrpAsyncValue<????>,
		init : bool,
		fn : (?, ??, ???) -> ????,
		errorFn : (?, ??, ???) -> string,
	) -> void;

	rAsyncConnectV4(
		src1 : FrpValue<?>,
		src2 : FrpValue<??>,
		src3 : FrpValue<???>,
		src4 : FrpValue<????>,
		dst : FrpAsyncValue<?????>,
		init : bool,
		fn : (?, ??, ???, ????) -> ?????,
		errorFn : (?, ??, ???, ????) -> string,
	) -> void;

	/// connect async fn ///

	rAsyncFnConnect(
		src : FrpAsyncValue<?>,
		dst : FrpAsyncValue<??>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?/*src*/, ??/*currentValue*/, (??) -> void/*onDone*/, (string) -> void/*onError*/) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncFnConnect2(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		dst : FrpAsyncValue<???>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?, ??, ???, (???) -> void, (string) -> void) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncFnConnect3(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		dst : FrpAsyncValue<????>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?, ??, ???, ????, (????) -> void, (string) -> void) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	rAsyncFnConnect4(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		src4 : FrpAsyncValue<????>,
		dst : FrpAsyncValue<?????>,
		init : bool,
		bufferPolicy : FrpAsyncBufferPolicy,
		asyncFn : (?, ??, ???, ????, ?????, (?????) -> void, (string) -> void) -> void,
		errorFn : ([string]) -> [string],
	) -> void;

	/// select ///

	rAsyncSelect(
		src : FrpAsyncValue<?>,
		fn : (?) -> ??,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<??>;

	rAsyncSelect2(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		fn : (?, ??) -> ???,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<???>;

	rAsyncSelect3(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		fn : (?, ??, ???) -> ????,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<????>;

	rAsyncSelect4(
		src1 : FrpAsyncValue<?>,
		src2 : FrpAsyncValue<??>,
		src3 : FrpAsyncValue<???>,
		src4 : FrpAsyncValue<????>,
		fn : (?, ??, ???, ????) -> ?????,
		errorFn : ([string]) -> [string]
	) -> FrpAsyncValue<?????>;

	/// rAsyncSelectV family - select FrpAsyncValue from one or more FrpValue-s
	// fn is responsible for creating a value,  errorFn  is responsible for checking sources and  setting an error status

	rAsyncSelectV(
		src : FrpValue<?>,
		fn : (?) -> ??,
		errorFn : (?) -> string,
	) -> FrpAsyncValue<??>;

	rAsyncSelectV2(
		src1 : FrpValue<?>,
		src2 : FrpValue<??>,
		fn : (?,??) -> ???,
		errorFn : (?, ??) -> string
	) -> FrpAsyncValue<???>;


	rAsyncSelectV3(
		src1 : FrpValue<?>,
		src2 : FrpValue<??>,
		src3 : FrpValue<???>,
		fn : (?,??,???) -> ????,
		errorFn : (?, ??, ???) -> string
	) -> FrpAsyncValue<????>;

	rAsyncSelectV4(
		src1 : FrpValue<?>,
		src2 : FrpValue<??>,
		src3 : FrpValue<???>,
		src4 : FrpValue<????>,
		fn : (?,??,???,????) -> ?????,
		errorFn : (?, ??, ???, ????) -> string,
	) -> FrpAsyncValue<?????>;

	/// arrays ///

	// rAsyncSelectRangeMapDyn(
	// 	src : FrpAsyncArray<?>,
	// 	start : FrpCell<int>,
	// 	count : FrpCell<int>,
	// 	fn : (?) -> ??,
	// 	errorFn : ([string]) -> [string]
	// ) -> FrpAsyncArray<??>;

	/// subscribe ///

	rAsyncSubscribe(
		cell : FrpAsyncValue<?>,
		init : bool,
		fn : (?, FrpAsyncStatus) -> void,
	) -> () -> void;

	rAsyncSubscribe2(
		cell1 : FrpAsyncValue<?>,
		cell2 : FrpAsyncValue<??>,
		init : bool,
		fn : (?, ??, FrpAsyncStatus) -> void,
	) -> () -> void;

	rAsyncSubscribe3(
 		cell1 : FrpAsyncValue<?>,
		cell2 : FrpAsyncValue<??>,
 		cell3 : FrpAsyncValue<???>,
		init : bool,
		fn : (?, ??, ???, FrpAsyncStatus) -> void,
	) -> () -> void;

	rAsyncSubscribe4(
 		cell1 : FrpAsyncValue<?>,
		cell2 : FrpAsyncValue<??>,
 		cell3 : FrpAsyncValue<???>,
		cell4 : FrpAsyncValue<????>,
		init : bool,
		fn : (?, ??, ???, ????, FrpAsyncStatus) -> void,
	) -> () -> void;


	// disconnector //
	rAsyncDisconnect(node : FrpAsyncNode<?>) -> void;
}

/// constructors ///

makeFrpAsyncValue(value : ?) -> FrpAsyncValue<?> {
	FrpAsyncValue(rmake(value), rmake(FrpAsyncReady()));
}

makeFrpAsyncArray(values : [?]) -> FrpAsyncArray<?> {
	FrpAsyncArray(rmakeA(values), rmake(FrpAsyncReady()));
}

wrapFrpAsyncValue(cell : FrpValue<?>) -> FrpAsyncValue<?> {
	FrpAsyncValue(cell, rmake(FrpAsyncReady()));
}

wrapFrpAsyncArray(frpArray : FrpArray<?>) -> FrpAsyncArray<?> {
	FrpAsyncArray(frpArray, rmake(FrpAsyncReady()));
}

/// disconnector ///

rAsyncDisconnect(node : FrpAsyncNode<?>) -> void {
	rdisconnect(node.frpNode);
	rdisconnect(node.asyncStatus);
}

/// check status and value ///

rAsyncStatus(node : FrpAsyncNode<?>) -> FrpAsyncStatus {
	rget(node.asyncStatus);
}

rAsyncInProgress(node : FrpAsyncNode<?>) -> bool {
	rAsyncStatus(node) == FrpAsyncInProgress();
}

rAsyncReady(node : FrpAsyncNode<?>) -> bool {
	rAsyncStatus(node) == FrpAsyncReady();
}

rAsyncErrors(node : FrpAsyncNode<?>) -> [string] {
	switch(rAsyncStatus(node)) {
		FrpAsyncError(e): e;
		default : [];
	}
}

rAsyncGet(node : FrpAsyncValue<?>) -> ? {
	rget(node.frpNode);
}

rAsyncGetA(node : FrpAsyncArray<?>) -> [?] {
	rgetA(node.frpNode);
}

/// setters ///

rAsyncSetValue(node : FrpAsyncValue<?>, value : ?) -> void {
	rnext2(node.frpNode, node.asyncStatus, value, FrpAsyncReady())
}

rAsyncSetArray(node : FrpAsyncArray<?>, value : [?]) -> void {
	rnextVA(node.asyncStatus, node.frpNode, FrpAsyncReady(), value)
}

rAsyncSetInProgress(node : FrpAsyncNode<?>) -> void {
	rnext(node.asyncStatus, FrpAsyncInProgress())
}

rAsyncSetError(node : FrpAsyncNode<?>, error : string) -> void {
	rnext(node.asyncStatus, FrpAsyncError([error]))
}

rAsyncNext(node : FrpAsyncValue<?>, value : ?) -> void {
	rnext(node.asyncStatus, FrpAsyncInProgress());
	rnext2(node.frpNode, node.asyncStatus, value, FrpAsyncReady())
};

/// connect ///

rAsyncConnect(
	src : FrpAsyncValue<?>,
	dst : FrpAsyncValue<??>,
	init : bool,
	fn : (?) -> ??,
	errorFn : ([string]) -> [string],
) -> void {
	rAsyncConnectIternal(
		[src],
		dst,
		init,
		\-> rnext(dst.frpNode, fn(rget(src.frpNode))),
		errorFn
	);
}

rAsyncConnect2(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	dst : FrpAsyncValue<???>,
	init : bool,
	fn : (?, ??) -> ???,
	errorFn : ([string]) -> [string],
) -> void {
	rAsyncConnectIternal(
		[src1, src2],
		dst,
		init,
		\-> rnext(dst.frpNode, fn(rget(src1.frpNode), rget(src2.frpNode))),
		errorFn
	);
}

rAsyncConnect3(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	dst : FrpAsyncValue<????>,
	init : bool,
	fn : (?, ??, ???) -> ????,
	errorFn : ([string]) -> [string],
) -> void {
	rAsyncConnectIternal(
		[src1, src2, src3],
		dst,
		init,
		\-> rnext(dst.frpNode, fn(rget(src1.frpNode), rget(src2.frpNode), rget(src3.frpNode))),
		errorFn
	);
}

rAsyncConnect4(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	src4 : FrpAsyncValue<????>,
	dst : FrpAsyncValue<?????>,
	init : bool,
	fn : (?, ??, ???, ????) -> ?????,
	errorFn : ([string]) -> [string],
) -> void {
	rAsyncConnectIternal(
		[src1, src2, src3, src4],
		dst,
		init,
		\-> rnext(dst.frpNode, fn(rget(src1.frpNode), rget(src2.frpNode), rget(src3.frpNode), rget(src4.frpNode))),
		errorFn
	);
}

rAsyncConnectV(
	src : FrpValue<?>,
	dst : FrpAsyncValue<??>,
	init : bool,
	fn : (?) -> ??,
	errorFn : (?) -> string,
) -> void {

	uns = rsubscribe(src, init, \v -> {
		err = errorFn(v);
		if (err == "") rAsyncNext(dst, fn(v)) else rAsyncSetError(dst, err);
	});
	rAddDisposer(dst.frpNode, uns);
}

rAsyncConnectV2(
	src1 : FrpValue<?>,
	src2 : FrpValue<??>,
	dst : FrpAsyncValue<???>,
	init : bool,
	fn : (?, ??) -> ???,
	errorFn : (?, ??) -> string,
) -> void {
	uns = rsubscribe2(src1, src2, init, \v1,v2 -> {
		err = errorFn(v1, v2);
		if (err == "") rAsyncNext(dst, fn(v1, v2)) else rAsyncSetError(dst, err);
	});
	rAddDisposer(dst.frpNode, uns);
}

rAsyncConnectV3(
	src1 : FrpValue<?>,
	src2 : FrpValue<??>,
	src3 : FrpValue<???>,
	dst : FrpAsyncValue<????>,
	init : bool,
	fn : (?, ??, ???) -> ????,
	errorFn : (?, ??, ???) -> string,
) -> void {
	uns = rsubscribe3(src1, src2, src3, init, \v1,v2,v3 -> {
		err = errorFn(v1, v2, v3);
		if (err == "") rAsyncNext(dst, fn(v1, v2, v3)) else rAsyncSetError(dst, err);
	});
	rAddDisposer(dst.frpNode, uns);
}

rAsyncConnectV4(
	src1 : FrpValue<?>,
	src2 : FrpValue<??>,
	src3 : FrpValue<???>,
	src4 : FrpValue<????>,
	dst : FrpAsyncValue<?????>,
	init : bool,
	fn : (?, ??, ???, ????) -> ?????,
	errorFn : (?, ??, ???, ????) -> string,
) -> void {
	uns = rsubscribe4(src1, src2, src3, src4, init, \v1,v2,v3,v4 -> {
		err = errorFn(v1, v2, v3, v4);
		if (err == "") rAsyncNext(dst, fn(v1, v2, v3, v4)) else rAsyncSetError(dst, err);
	});
	rAddDisposer(dst.frpNode, uns);
}

rAsyncFnConnect(
	src : FrpAsyncValue<?>,
	dst : FrpAsyncValue<??>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, (??) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncFnConnectInternal(
		[src],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			srcVal = rget(src.frpNode);// to close it in lambda
			\dv -> asyncFn(srcVal, dv, onDone, onError);
		},
		errorFn
	);
}


rAsyncFnConnect2(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	dst : FrpAsyncValue<???>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, ???, (???) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncFnConnectInternal(
		[src1, src2],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			// closures
			v1 = rget(src1.frpNode);
			v2 = rget(src2.frpNode);
			\dv -> asyncFn(v1, v2, dv, onDone, onError);
		},
		errorFn
	);
}

rAsyncFnConnect3(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	dst : FrpAsyncValue<????>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, ???, ????, (????) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncFnConnectInternal(
		[src1, src2, src3],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			// closures
			v1 = rget(src1.frpNode);
			v2 = rget(src2.frpNode);
			v3 = rget(src3.frpNode);
			\dv -> asyncFn(v1, v2, v3, dv, onDone, onError);
		},
		errorFn
	);
}

rAsyncFnConnect4(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	src4 : FrpAsyncValue<????>,
	dst : FrpAsyncValue<?????>,
	init : bool,
	bufferPolicy : FrpAsyncBufferPolicy,
	asyncFn : (?, ??, ???, ????, ?????, (?????) -> void, (string) -> void) -> void,
	errorFn : ([string]) -> [string],
) -> void {

	rAsyncFnConnectInternal(
		[src1, src2, src3, src4],
		dst,
		bufferPolicy,
		init,
		\onDone : (??) -> void, onError : (string) -> void -> {
			// closures
			v1 = rget(src1.frpNode);
			v2 = rget(src2.frpNode);
			v3 = rget(src3.frpNode);
			v4 = rget(src4.frpNode);
			\dv -> asyncFn(v1, v2, v3, v4, dv, onDone, onError);
		},
		errorFn
	);
}

/// select ///

rAsyncSelect(
	src : FrpAsyncValue<?>,
	fn : (?) -> ??,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<??> {
	dst = makeFrpAsyncValue(fn(rAsyncGet(src)));
	rAsyncConnect(src, dst, true, fn, errorFn);
	dst;
}

rAsyncSelect2(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	fn : (?, ??) -> ???,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<???> {
	dst = makeFrpAsyncValue(fn(rAsyncGet(src1), rAsyncGet(src2)));
	rAsyncConnect2(src1, src2, dst, true, fn, errorFn);
	dst;
}

rAsyncSelect3(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	fn : (?, ??, ???) -> ????,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<????> {
	dst = makeFrpAsyncValue(fn(rAsyncGet(src1), rAsyncGet(src2), rAsyncGet(src3)));
	rAsyncConnect3(src1, src2, src3, dst, true, fn, errorFn);
	dst;
}

rAsyncSelect4(
	src1 : FrpAsyncValue<?>,
	src2 : FrpAsyncValue<??>,
	src3 : FrpAsyncValue<???>,
	src4 : FrpAsyncValue<????>,
	fn : (?, ??, ???, ????) -> ?????,
	errorFn : ([string]) -> [string]
) -> FrpAsyncValue<?????> {
	dst = makeFrpAsyncValue(fn(rAsyncGet(src1), rAsyncGet(src2), rAsyncGet(src3), rAsyncGet(src4)));
	rAsyncConnect4(src1, src2, src3, src4, dst, true, fn, errorFn);
	dst;
}

///  rAsyncSelectV ///

rAsyncSelectV(
	src : FrpValue<?>,
	fn : (?) -> ??,
	errorFn : (?) -> string,
) -> FrpAsyncValue<??> {
	v = rget(src);
	err = errorFn(v);
	dst = makeFrpAsyncValue(fn(v));
	if (err != "") rAsyncSetError(dst, err);
	rAsyncConnectV(src, dst, false, fn, errorFn);
	dst;
}

rAsyncSelectV2(
	src1 : FrpValue<?>,
	src2 : FrpValue<??>,
	fn : (?,??) -> ???,
	errorFn : (?,??) -> string
) -> FrpAsyncValue<???> {
	err = errorFn(rget(src1), rget(src2));
	dst = makeFrpAsyncValue(fn(rget(src1), rget(src2)));
	if (err != "") rAsyncSetError(dst, err);
	rAsyncConnectV2(src1, src2, dst, false, fn, errorFn);
	dst;
}

rAsyncSelectV3(
	src1 : FrpValue<?>,
	src2 : FrpValue<??>,
	src3 : FrpValue<???>,
	fn : (?,??,???) -> ????,
	errorFn : (?,??,???) -> string,
) -> FrpAsyncValue<????> {
	err = errorFn(rget(src1), rget(src2), rget(src3));
	dst = makeFrpAsyncValue(fn(rget(src1), rget(src2), rget(src3)));
	if (err != "") rAsyncSetError(dst, err);
	rAsyncConnectV3(src1, src2, src3, dst, false, fn, errorFn);
	dst;
}

rAsyncSelectV4(
	src1 : FrpValue<?>,
	src2 : FrpValue<??>,
	src3 : FrpValue<???>,
	src4 : FrpValue<????>,
	fn : (?,??,???,????) -> ?????,
	errorFn : (?,??,???,????) -> string,
) -> FrpAsyncValue<?????> {
	err = errorFn(rget(src1), rget(src2), rget(src3), rget(src4));
	dst = makeFrpAsyncValue(fn(rget(src1), rget(src2), rget(src3), rget(src4)));
	if (err != "") rAsyncSetError(dst, err);
	rAsyncConnectV4(src1, src2, src3, src4, dst, false, fn, errorFn);
	dst;
}

/// subscribe ///

rAsyncSubscribe(
	cell : FrpAsyncValue<?>,
	init : bool,
	fn : (?, FrpAsyncStatus) -> void,
) -> () -> void {
	rsubscribe2(cell.frpNode, cell.asyncStatus, init, fn);
}

rAsyncSubscribe2(
	cell1 : FrpAsyncValue<?>,
	cell2 : FrpAsyncValue<??>,
	init : bool,
	fn : (?, ??, FrpAsyncStatus) -> void,
) -> () -> void {
	rsubscribe4(cell1.frpNode, cell2.frpNode, cell1.asyncStatus, cell2.asyncStatus, init,
		\v1, v2, s1, s2 -> {
			status = rAsyncStatusBind([s1,s2], idfn);
			fn(v1, v2, status);
		}
	);
}

rAsyncSubscribe3(
 	cell1 : FrpAsyncValue<?>,
	cell2 : FrpAsyncValue<??>,
 	cell3 : FrpAsyncValue<???>,
	init : bool,
	fn : (?, ??, ???, FrpAsyncStatus) -> void,
) -> () -> void {
	onUpdate = \-> {
		v1 = rget(cell1.frpNode);
		v2 = rget(cell2.frpNode);
		v3 = rget(cell3.frpNode);
		s1 = rget(cell1.asyncStatus);
		s2 = rget(cell2.asyncStatus);
		s3 = rget(cell3.asyncStatus);
		status = rAsyncStatusBind([s1,s2,s3], idfn);
		fn(v1, v2, v3, status);
	}
	uns1 = rsubscribe4(cell1.frpNode, cell2.frpNode, cell1.asyncStatus, cell2.asyncStatus, init,
		\__, __, __, __ -> onUpdate());
	uns2 = rsubscribe2(cell3.frpNode, cell3.asyncStatus, init,
		\__, __ -> onUpdate());
	\-> applyall([uns1, uns2]);
}


rAsyncSubscribe4(
 	cell1 : FrpAsyncValue<?>,
	cell2 : FrpAsyncValue<??>,
 	cell3 : FrpAsyncValue<???>,
	cell4 : FrpAsyncValue<????>,
	init : bool,
	fn : (?, ??, ???, ????, FrpAsyncStatus) -> void,
) -> () -> void {

	onUpdate = \-> {
		v1 = rget(cell1.frpNode);
		v2 = rget(cell2.frpNode);
		v3 = rget(cell3.frpNode);
		v4 = rget(cell4.frpNode);
		s1 = rget(cell1.asyncStatus);
		s2 = rget(cell2.asyncStatus);
		s3 = rget(cell3.asyncStatus);
		s4 = rget(cell4.asyncStatus);
		status = rAsyncStatusBind([s1,s2,s3,s4], idfn);
		fn(v1, v2, v3, v4, status);
	}
	uns1 = rsubscribe4(cell1.frpNode, cell2.frpNode, cell1.asyncStatus, cell2.asyncStatus, init,
		\__, __, __, __ -> onUpdate());
	uns2 = rsubscribe4(cell3.frpNode, cell4.frpNode, cell3.asyncStatus, cell4.asyncStatus, init,
		\__, __, __, __ -> onUpdate());
	\-> applyall([uns1, uns2]);
}

/// arrays ///
// TODO: rework
// rAsyncSelectRangeMapDyn(
// 	src : FrpAsyncArray<?>,
// 	start : FrpCell<int>,
// 	count : FrpCell<int>,
// 	fn : (?) -> ??,
// 	errorFn : ([string]) -> [string]
// ) -> FrpAsyncArray<??> {
// 	FrpAsyncArray(
// 		rselectARangeMapDynamic(src.frpNode, start, count, fn),
// 		rAsyncSelectStatus([src], errorFn),
// 	);
// }

/// utils ///

// internal subscription utils /////////////////////////////////////////////////////////////
rAsyncFnConnectInternal(
	sources : [FrpAsyncValue<flow>],
	dst : FrpAsyncValue<?>,
	bufferPolicy : FrpAsyncBufferPolicy,
	init : bool,
	asyncFn : ((?) -> void/*updateFn*/, (string) -> void/*errorFn*/) -> (?) -> void,
	errorFn : ([string]) -> [string],
) -> void {
	initialized = ref false;
	started = ref false;
	anySrcUpdated = ref false;
	delayedActions : DList<(?) -> void> = makeDList();

	onError = \e : string -> {
		rnext(dst.asyncStatus, FrpAsyncError([e]));
		started := false;
	};

	updateFn = \v : ? -> {
		rnext(dst.frpNode, v);
		delayedFnM = popFirstDList(delayedActions);

		eitherFn(
			delayedFnM,
			\fn -> fn(rget(dst.frpNode)),// run delayed update
			\-> {
				rnext(dst.asyncStatus, FrpAsyncReady());
				started := false;
			}
		);
	};

	subscrStatusFn = \arr -> {
		sourcesStatus = rAsyncStatusBind(arr, errorFn);

		if (!^started) {
			switch(sourcesStatus) {
				FrpAsyncError(errors): {
					anySrcUpdated := false; //?
					rnext(dst.asyncStatus, sourcesStatus);
				};
				FrpAsyncInProgress(): {
					anySrcUpdated := false; // start updating graph
					rnext(dst.asyncStatus, sourcesStatus);
				};
				FrpAsyncReady(): {
					status = rget(dst.asyncStatus);

					if (^initialized) {
						if (status == FrpAsyncInProgress()) {
							// to start async process set FrpAsyncInProgress status before
							if (^anySrcUpdated) {
								started := true;
								asyncFn(updateFn, onError)(rget(dst.frpNode));
							} else {
								rnext(dst.asyncStatus, FrpAsyncReady()); // src are not changed - do nothing
							}
						} else  {// wrong case
							// TODO: error handling
							println("rAsyncFnConnectInternal, error: wrong node status " + toString(status));
							rnext(dst.asyncStatus, FrpAsyncReady());
						}
					} else {// initialization
						initialized := true;
						rnext(dst.asyncStatus, FrpAsyncInProgress());
						started := true;
						asyncFn(updateFn, onError)(rget(dst.frpNode));
					};
				};
			};

		} else if (sourcesStatus == FrpAsyncReady())  {// save update in the queue as delayed action
			switch(bufferPolicy) {
				FrpAsyncBufferNone(): {};// do nothing
				FrpAsyncBufferFirst(size): {
					if (^anySrcUpdated) {// save delayed action
						if (lengthDList(delayedActions) < size) {
							pushDList(delayedActions, asyncFn(updateFn, onError)) |> ignore;
						} else {
							println("rAsyncFnConnectInternal, warning: queue is overwhelmed");
						}
					}
				};
				FrpAsyncBufferLast(size): {
					if (^anySrcUpdated) {// save delayed action
						if (lengthDList(delayedActions) >= size)
							popFirstDList(delayedActions) |> ignore;

						pushDList(delayedActions, asyncFn(updateFn, onError)) |> ignore;
					}
				};
			}
		} // else do nothing
	}

	subscrValueFn = \arr : [flow] -> {
		anySrcUpdated := true; // force update dst value
	}

	uns1 = rsubscribeMany(map(sources, \s-> s.asyncStatus), init, subscrStatusFn);
	rAddDisposer(dst.asyncStatus, uns1);
	uns2 = rsubscribeMany(map(sources, \s-> s.frpNode), init, subscrValueFn);
	rAddDisposer(dst.frpNode, uns2);
}

rAsyncConnectIternal(
	sources : [FrpAsyncValue<flow>],
	dst : FrpAsyncValue<flow>,
	init : bool,
	updateValue : () -> void,
	errorFn : ([string]) -> [string],
) -> void {
	anySrcUpdated = ref true; // true - to update dst on connect when init is true

	subscrStatusFn = \arr -> {
		sourcesStatus = rAsyncStatusBind(arr, errorFn);

		switch(sourcesStatus) {
			FrpAsyncInProgress(): {
				anySrcUpdated := false; // start of an update process
			};
			FrpAsyncReady(): {
				if (^anySrcUpdated) updateValue();
			};
			FrpAsyncError(errors): {
				//anySrcUpdated := false;
			};
		};
		rnext(dst.asyncStatus, sourcesStatus);
	}
	subscrValueFn = \arr : [flow] -> {
		anySrcUpdated := true; // force update dst value
	}

	uns1 = rsubscribeMany(map(sources, \s-> s.asyncStatus), init, subscrStatusFn);
	uns2 = rsubscribeMany(map(sources, \s-> s.frpNode), init, subscrValueFn);
	rAddDisposer(dst.asyncStatus, uns1);
	rAddDisposer(dst.frpNode, uns2);
}


rAsyncStatusBind(
	srcStatus : [FrpAsyncStatus],
	errorFn : ([string]) -> [string]
) -> FrpAsyncStatus {
	getErr = \asyncStatus ->
		switch(asyncStatus) {
			FrpAsyncError(errA): errorFn(errA);
			default: [];
		};

	errors = fold(srcStatus, [], \acc,v -> concat(acc, getErr(v)));

	if (errors != []) {
		FrpAsyncError(errors);
	} else if (contains(srcStatus, FrpAsyncInProgress())) {
		FrpAsyncInProgress();
	} else {
		FrpAsyncReady();
	}
}

rAsyncSelectStatus(
	srcs : [FrpAsyncNode<?>],
	errorFn : ([string]) -> [string]
) -> FrpValue<FrpAsyncStatus> {
	rselectMany(map(srcs, \src -> src.asyncStatus), \arr -> rAsyncStatusBind(arr, errorFn))
}

rAsyncConnectStatus(
	srcs : [FrpAsyncNode<?>],
	dst : FrpAsyncNode<?>,
	errorFn : ([string]) -> [string],
	init : bool,
) -> void {
	rconnectMany(
		map(srcs, \src -> src.asyncStatus),
		dst.asyncStatus,
		init,
		\arr -> rAsyncStatusBind(arr, errorFn),
	);
}
