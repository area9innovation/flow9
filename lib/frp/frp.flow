import runtime;
import ds/dlist;

export {
	FrpCell<?> ::= FrpConst<?>, FrpValue<?>;
	FrpNode<?> ::= FrpCell<?>, FrpArray<?>;

	FrpConst(value : ?);

	FrpValue(
		value : ref ?,
		status : ref bool,
		subscribers : DList<(FrpEventType) -> void>,
		disposers : ref List<() -> void>
	);

	FrpArray(
		values : ref [ref ?],
		status : ref bool,
		subscribers : DList<(FrpEventType) -> void>,
		disposers : ref List<() -> void>
	);

	// construcrors
	rconst(v : ?) -> FrpConst<?>;
	rmake(v : ?) -> FrpValue<?>;
	rmakeA(elements : [?]) -> FrpArray<?>;

	// getters
	rget(cell : FrpCell<?>) -> ?;
	rgetA(v : FrpArray<?>) -> [?];
	rgetElement(v : FrpArray<?>, index : int) -> Maybe<?>;

	// update
	rnext(cell : FrpValue<?>, value : ?) -> void;

	rnext2(
		cell1 : FrpValue<?>,
		cell2 : FrpValue<??>,
		value1 : ?, value2 : ??
	) -> void;

	rnext3(
		cell1 : FrpValue<?>,
		cell2 : FrpValue<??>,
		cell3 : FrpValue<???>,
		value1 : ?,
		value2 : ??,
		value3 : ???
	) -> void;

	rnext4(
		cell1 : FrpValue<?>,
		cell2 : FrpValue<??>,
		cell3 : FrpValue<???>,
		cell4 : FrpValue<????>,
		value1 : ?,
		value2 : ??,
		value3 : ???,
		value4 : ????,
	) -> void;

	rnextMany(updates : [Pair<FrpValue<?>, ?>]) -> void;
	rnextManyFlow(updates : [Pair<FrpValue<flow>, flow>]) -> void;

	rnextA(cell : FrpArray<?>, values : [?]) -> void;
	rnextElement(cell : FrpArray<?>, index : int, value : ?) -> void;

	rnextVA(cell1 : FrpValue<?>, cell2 : FrpArray<??>, value1 : ?, value2 : [??]) -> void;

	// connectors

	rconnect(
		src : FrpCell<?>,
		dst : FrpValue<??>,
		init : bool,
		fn : (?) -> ??,
	) -> void;

	rconnect2(
		src1 : FrpCell<?>,
		src2 : FrpCell<??>,
		dst : FrpValue<??>,
		init : bool,
		fn : (?, ??) -> ???,
	) -> void;

	rconnect3(
		src1 : FrpCell<?>,
		src2 : FrpCell<??>,
		src3 : FrpCell<???>,
		dst : FrpValue<????>,
		init : bool,
		fn : (?, ??, ???) -> ????,
	) -> void;

	rconnect4(
		src1 : FrpCell<?>,
		src2 : FrpCell<??>,
		src3 : FrpCell<???>,
		src4 : FrpCell<????>,
		dst : FrpValue<?????>,
		init : bool,
		fn : (?, ??, ???, ????) -> ?????,
	) -> void;

	rconnectMany(
		sources : [FrpCell<?>],
		dst : FrpValue<??>,
		init : bool,
		fn : ([?]) -> ??,
	) -> void;

	rconnectGate(
		src : FrpCell<?>,
		gate : FrpCell<??>,
		dst : FrpValue<?>,
		init : bool,
		fn : (??) -> bool,
	) -> void;

	rconnectA(
		src : FrpArray<?>,
		dst : FrpValue<??>,
		init : bool,
		fn : ([?]) -> ??,
	) -> void;

	rconnectARange(
		src : FrpArray<?>,
		dst : FrpValue<??>,
		start : int,
		count : int,
		init : bool,
		fn : ([?]) -> ??,
	) -> void;

	rconnectARangeMap(
		src : FrpArray<?>,
		dst : FrpArray<??>,
		start : int,
		count : int,
		init : bool,
		fn : (?) -> ??,
	) -> void;

	rconnectARangeDynamic(
		src : FrpArray<?>,
		start : FrpCell<int>,
		count : FrpCell<int>,
		dst : FrpValue<??>,
		init : bool,
		fn : ([?]) -> ??,
	) -> void;

	rconnectARangeMapDynamic(
		src : FrpArray<?>,
		start : FrpCell<int>,
		count : FrpCell<int>,
		dst : FrpArray<??>,
		init : bool,
		fn : (?) -> ??,
	) -> void;

	rconnectAZip(
		src1 : FrpArray<?>,
		src2 : FrpArray<??>,
		dst : FrpArray<???>,
		init : bool,
		fn : (?, ??) -> ???,
	) -> void;

	rBidiConnect(
		cell1 : FrpValue<?>,
		cell2 : FrpValue<??>,
		init : bool,
		fn1 : (?) -> ??,
		fn2 : (??) -> ?
	) -> void;

	// selectors

	rselect(
		src : FrpCell<?>,
		fn : (?) -> ??
	) -> FrpValue<??>;

	rselect2(
		src1 : FrpCell<?>,
		src2 : FrpCell<??>,
		fn : (?, ??) -> ???
	) -> FrpValue<???>;

	rselect3(
		src1 : FrpCell<?>,
		src2 : FrpCell<??>,
		src3 : FrpCell<???>,
		fn : (?, ??, ???) -> ????
	) -> FrpValue<????>;

	rselect4(
		src1 : FrpCell<?>,
		src2 : FrpCell<??>,
		src3 : FrpCell<???>,
		src4 : FrpCell<????>,
		fn : (?, ??, ???, ????) -> ?????
	) -> FrpValue<????>;

	rselectMany(
		sources : [FrpCell<?>],
		fn : ([?]) -> ??
	) -> FrpValue<??>;

	rselectGate(
		src : FrpCell<?>,
		gate : FrpCell<??>,
		fn : (??) -> bool,
	) -> FrpValue<?>;

	rBidiSelect(
		cell : FrpValue<?>,
		fn1 : (?) -> ??,
		fn2 : (??) -> ?
	) -> FrpValue<??>;

	rselectA(
		src : FrpArray<?>,
		fn : ([?]) -> ??
	) -> FrpValue<??>;

	rselectARange(
		src : FrpArray<?>,
		start : int,
		count : int,
		fn : ([?]) -> ??
	) -> FrpValue<??>;

	rselectARangeMap(
		src : FrpArray<?>,
		start : int,
		count : int,
		fn : (?) -> ??
	) -> FrpArray<??>;

	rselectARangeDynamic(
		src : FrpArray<?>,
		start : FrpCell<int>,
		count : FrpCell<int>,
		fn : ([?]) -> ??
	) -> FrpValue<??>;

	rselectARangeMapDynamic(
		src : FrpArray<?>,
		start : FrpCell<int>,
		count : FrpCell<int>,
		fn : (?) -> ??
	) -> FrpArray<??>;

	rselectAZip(
		src1 : FrpArray<?>,
		src2 : FrpArray<??>,
		fn : (?, ??) -> ???
	) -> FrpArray<???>;

	// splitters

	rsplit2(
		cell : FrpCell<?>,
		fn1 : (?) -> ??,
		fn2 : (?) -> ???
	) -> Pair<FrpValue<??>, FrpValue<???>>;

	rsplit3(
		cell : FrpCell<?>,
		fn1 : (?) -> ??,
		fn2 : (?) -> ???,
		fn3 : (?) -> ????,
	) -> Triple<FrpValue<??>, FrpValue<???>, FrpValue<????>>;

	rsplit4(
		cell : FrpCell<?>,
		fn1 : (?) -> ??,
		fn2 : (?) -> ???,
		fn3 : (?) -> ????,
		fn4 : (?) -> ?????
	) -> Quadruple<FrpValue<??>, FrpValue<???>, FrpValue<????>, FrpValue<?????>>;

	rsplitMany(cell : FrpCell<?>, getters: [(?) -> ??]) -> [FrpValue<??>];
	rsplitManyFlow(cell : FrpCell<?>, getters : [(?) -> flow]) -> [FrpValue<flow>];

	// subscribers
	rsubscribe(
		cell : FrpValue<?>,
		init : bool,
		fn : (?) -> void,
	) -> () -> void;

	rsubscribe2(
		cell1 : FrpValue<?>,
		cell2 : FrpValue<??>,
		init : bool,
		fn : (?, ??) -> void,
	) -> () -> void;

	rsubscribe3(
		cell1 : FrpValue<?>,
		cell2 : FrpValue<??>,
		cell3 : FrpValue<???>,
		init : bool,
		fn : (?, ??, ???) -> void,
	) -> () -> void;

	rsubscribe4(
		cell1 : FrpValue<?>,
		cell2 : FrpValue<??>,
		cell3 : FrpValue<???>,
		cell4 : FrpValue<????>,
		init : bool,
		fn : (?, ??, ???, ????) -> void,
	) -> () -> void;

	rsubscribeMany(
		cells : [FrpValue<?>],
		init : bool,
		fn : ([?]) -> void,
	) -> () -> void;

	rsubscribeA(
		cell : FrpArray<?>,
		init : bool,
		fn : ([?]) -> void,
	) -> () -> void;

	rsubscribeARange(
		cell : FrpArray<?>,
		start : int,
		count : int,
		init : bool,
		fn : ([?]) -> void,
	) -> () -> void;

	// disconnectors
	rdisconnect(cell : FrpNode<flow>) -> void;
	rdisconnectMany(cell : [FrpNode<flow>]) -> void;

	// a protected part, is not part of public api, to use in other frp modules or tests ///////////
	rIsUpdated(cell : FrpNode<flow>) -> bool;
	rAddDisposer(cell : FrpNode<flow>, disposerFn : () -> void) -> void;
	rSetOutdated(cell : FrpNode<flow>) -> void;
	rAddEventListeners(cells : [FrpNode<flow>], eventFn : (FrpEventType) -> void) -> () -> void;
}

FrpEventType ::= FrpEventSetValue, FrpEventOutdated, FrpEventUpdated, FrpEventSetElement;
FrpEventSetValue(); FrpEventOutdated(); FrpEventUpdated(); FrpEventSetElement(index : int);

//// constructors ////

rconst(v : ?) -> FrpConst<?> {
	FrpConst(v);
}

rmake(v : ?) -> FrpValue<?> {
	FrpValue(ref v, ref true, makeDList(), ref makeList());
}

rmakeA(elements : [?]) -> FrpArray<?> {
	FrpArray(ref map(elements, \a -> ref a), ref true, makeDList(), ref makeList());
}

//// disconnector /////

rdisconnect(cell : FrpNode<flow>) -> void {
	doDisconn = \disposers -> {
		callList(^disposers);
		disposers := makeList();
	}
	switch (cell) {
		FrpConst(__): {}
		FrpValue(__, __, __, disposers): doDisconn(disposers);
		FrpArray(__, __, __, disposers): doDisconn(disposers);
	}
}

rdisconnectMany(cells : [FrpNode<flow>]) -> void {
	iter(cells, rdisconnect);
}

//// getters ////

rget(cell : FrpCell<?>) -> ? {
	switch (cell) {
		FrpConst(v): v;
		FrpValue(v, __, __, __): ^v;
	}
}

rgetA(v : FrpArray<?>) -> [?] {
	map(^(v.values), \r -> ^r);
}

rgetElement(v : FrpArray<?>, index : int) -> Maybe<?> {
	r = ^(v.values);
	if (index >=0 && index < length(r)) Some(^(r[index])) else None();
}

//// setters ////

rnext(cell : FrpValue<?>, value : ?) -> void {
	rSetOutdated(cell);
	rSetValue(cell, value);
}

rnextA(cell : FrpArray<?>, values : [?]) -> void {
	rSetOutdated(cell);
	rSetValuesA(cell, values);
}

rnextElement(cell : FrpArray<?>, index : int, value : ?) -> void {
	rSetOutdated(cell);
	rSetElement(cell, index, value);
}


rnext2(cell1 : FrpValue<?>, cell2 : FrpValue<??>, value1 : ?, value2 : ??) -> void {
	rSetOutdated(cell1);
	rSetOutdated(cell2);
	rSetValue(cell1, value1);
	rSetValue(cell2, value2);
}

rnext3(
	cell1 : FrpValue<?>,
	cell2 : FrpValue<??>,
	cell3 : FrpValue<???>,
	value1 : ?,
	value2 : ??,
	value3 : ???
) -> void {
	rSetOutdated(cell1);
	rSetOutdated(cell2);
	rSetOutdated(cell3);
	rSetValue(cell1, value1);
	rSetValue(cell2, value2);
	rSetValue(cell3, value3);
}

rnext4(
	cell1 : FrpValue<?>,
	cell2 : FrpValue<??>,
	cell3 : FrpValue<???>,
	cell4 : FrpValue<????>,
	value1 : ?,
	value2 : ??,
	value3 : ???,
	value4 : ????,
) -> void {
	rSetOutdated(cell1);
	rSetOutdated(cell2);
	rSetOutdated(cell3);
	rSetOutdated(cell4);
	rSetValue(cell1, value1);
	rSetValue(cell2, value2);
	rSetValue(cell3, value3);
	rSetValue(cell4, value4);
}

rnextMany(updates : [Pair<FrpValue<?>, ?>]) -> void {
	iter(updates, unpairC(\cell,__ -> rSetOutdated(cell)));
	iter(updates, unpairC(\cell,value -> rSetValue(cell, value)));
}

rnextManyFlow(updates : [Pair<FrpValue<flow>, flow>]) -> void {
	iter(updates, unpairC(\cell,__ -> rSetOutdated(cell)));
	iter(updates, unpairC(\cell,value -> rSetValue(cell, value)));
}


rnextVA(cell1 : FrpValue<?>, cell2 : FrpArray<??>, value1 : ?, value2 : [??]) -> void {
	rSetOutdated(cell1);
	rSetOutdated(cell2);
	rSetValue(cell1, value1);
	rSetValuesA(cell2, value2);
}


//// subscribers ////

rsubscribe(
	cell : FrpValue<?>,
	init : bool,
	fn : (?) -> void,
) -> () -> void {
	rsubscribeCommon([cell], init, \-> fn(rget(cell)), nop1);
}

rsubscribe2(
	cell1 : FrpValue<?>,
	cell2 : FrpValue<??>,
	init : bool,
	fn : (?, ??) -> void,
) -> () -> void {
	rsubscribeCommon([cell1, cell2], init, \-> fn(rget(cell1), rget(cell2)), nop1);
}

rsubscribe3(
	cell1 : FrpValue<?>,
	cell2 : FrpValue<??>,
	cell3 : FrpValue<???>,
	init : bool,
	fn : (?, ??, ???) -> void,
) -> () -> void {
	rsubscribeCommon([cell1, cell2, cell3], init, \-> fn(rget(cell1), rget(cell2), rget(cell3)), nop1);
}

rsubscribe4(
	cell1 : FrpValue<?>,
	cell2 : FrpValue<??>,
	cell3 : FrpValue<???>,
	cell4 : FrpValue<????>,
	init : bool,
	fn : (?, ??, ???, ????) -> void,
) -> () -> void {
	rsubscribeCommon([cell1, cell2, cell3, cell4], init, \-> fn(rget(cell1), rget(cell2), rget(cell3), rget(cell4)), nop1);
}

rsubscribeMany(
	cells : [FrpValue<?>],
	init : bool,
	fn : ([?]) -> void,
) -> () -> void {
	rsubscribeCommon(cells, init, \-> fn(map(cells, rget)), nop1);
}

rsubscribeA(
	cell : FrpArray<?>,
	init : bool,
	fn : ([?]) -> void,
) -> () -> void {
	onValue = \-> fn(rgetA(cell));
	onElement = \__ -> onValue();
	rsubscribeCommon([cell], init, onValue, onElement);
}

rsubscribeARange(
	cell : FrpArray<?>,
	start : int,
	count : int,
	init : bool,
	fn : ([?]) -> void,
) -> () -> void {
	onValue = \-> fn(rArrayValuesSubrange(cell, start, count));
	onElement = \inx -> if (inx >= start && inx < start + count) onValue();
	rsubscribeCommon([cell], init, onValue, onElement);
}

//// connectors ////

rconnect(
	src : FrpCell<?>,
	dst : FrpValue<??>,
	init : bool,
	fn : (?) -> ??,
) -> void {
	rconnectCommon([src], dst, init,
		\-> rSetValue(dst, fn(rget(src))),
		nop1
	);
}

rconnect2(
	src1 : FrpCell<?>,
	src2 : FrpCell<??>,
	dst : FrpValue<??>,
	init : bool,
	fn : (?, ??) -> ???,
) -> void {
	rconnectCommon([src1, src2], dst, init,
		\-> rSetValue(dst, fn(rget(src1), rget(src2))),
		nop1
	);
}

rconnect3(
	src1 : FrpCell<?>,
	src2 : FrpCell<??>,
	src3 : FrpCell<???>,
	dst : FrpValue<????>,
	init : bool,
	fn : (?, ??, ???) -> ????,
) -> void {
	rconnectCommon([src1, src2, src3], dst, init,
		\-> rSetValue(dst, fn(rget(src1), rget(src2), rget(src3))),
		nop1
	);
}

rconnect4(
	src1 : FrpCell<?>,
	src2 : FrpCell<??>,
	src3 : FrpCell<???>,
	src4 : FrpCell<????>,
	dst : FrpValue<?????>,
	init : bool,
	fn : (?, ??, ???, ????) -> ?????,
) -> void {
	rconnectCommon([src1, src2, src3, src4], dst, init,
		\-> rSetValue(dst, fn(rget(src1), rget(src2), rget(src3), rget(src4))),
		nop1
	);
}

rconnectMany(
	sources : [FrpCell<?>],
	dst : FrpValue<??>,
	init : bool,
	fn : ([?]) -> ??,
) -> void {
	rconnectCommon(sources, dst, init,
		\-> rSetValue(dst, fn(map(sources, rget))),
		nop1
	);
}

rconnectGate(
	src : FrpCell<?>,
	gate : FrpCell<??>,
	dst : FrpValue<?>,
	init : bool,
	fn : (??) -> bool,
) -> void {
	rconnectCommon([src, gate], dst, init,
		\-> if (fn(rget(gate)))  rSetValue(dst, rget(src)) else rSetUpdated(dst),
		nop1
	);
}

rconnectA(
	src : FrpArray<?>,
	dst : FrpValue<??>,
	init : bool,
	fn : ([?]) -> ??,
) -> void {
	valueFn = \-> rSetValue(dst, fn(rgetA(src)));
	elementFn = \__ -> valueFn();
	rconnectCommon([src], dst, init, valueFn, elementFn);
}

rconnectARange(
	src : FrpArray<?>,
	dst : FrpValue<??>,
	start : int,
	count : int,
	init : bool,
	fn : ([?]) -> ??,
) -> void {
	valueFn = \-> rSetValue(dst, fn(rArrayValuesSubrange(src, start, count)));
	elementFn = \inx ->
		if (inx >= start && inx < start + count) valueFn()
		else rSetUpdated(dst);

	rconnectCommon([src], dst, init, valueFn, elementFn);
}

rconnectARangeMap(
	src : FrpArray<?>,
	dst : FrpArray<??>,
	start : int,
	count : int,
	init : bool,
	fn : (?) -> ??,
) -> void {
	valueFn = \-> rRangeMap(src, start, count, dst, fn);
	elementFn = \inx ->
		if (inx >= start && inx < start + count) rMapElement(src, inx, inx - start, dst, fn)
		else rSetUpdated(dst);

	rconnectCommon([src], dst, init, valueFn, elementFn);
}

rconnectARangeDynamic(
	src : FrpArray<?>,
	start : FrpCell<int>,
	count : FrpCell<int>,
	dst : FrpValue<??>,
	init : bool,
	fn : ([?]) -> ??,
) -> void {
	valueFn = \->
		rSetValue(dst, fn(rArrayValuesSubrange(src, rget(start), rget(count))));

	elementFn = \inx -> {
		fv = rget(start);
		cv = rget(count);
		if (inx >= fv && inx < fv + cv)
			rSetValue(dst, fn(rArrayValuesSubrange(src, fv, cv)))
		else rSetUpdated(dst);
	}

	rconnectCommon([src, start, count], dst, init, valueFn, elementFn);
}

rconnectARangeMapDynamic(
	src : FrpArray<?>,
	start : FrpCell<int>,
	count : FrpCell<int>,
	dst : FrpArray<??>,
	init : bool,
	fn : (?) -> ??,
) -> void {
	valueFn = \->
		rRangeMap(src, rget(start), rget(count), dst, fn);

	elementFn = \inx -> {
		fv = rget(start);
		cv = rget(count);
		if (inx >= fv && inx < fv + cv) {
			dstInx = inx - fv;
			rMapElement(src, inx, dstInx, dst, fn);
		}
		else rSetUpdated(dst);
	}

	rconnectCommon([src, start, count], dst, init, valueFn, elementFn);
}

rconnectAZip(
	src1 : FrpArray<?>,
	src2 : FrpArray<??>,
	dst : FrpArray<???>,
	init : bool,
	fn : (?, ??) -> ???,
) -> void {
	valueFn = \-> rZipArrays(src1, src2, dst, fn);
	elementFn = \inx -> rZipElement(src1, src2, inx, dst, fn);

	rconnectCommon([src1, src2], dst, init, valueFn, elementFn);
}


rBidiConnect(
	cell1 : FrpValue<?>,
	cell2 : FrpValue<??>,
	init : bool,
	fn1 : (?) -> ??,
	fn2 : (??) -> ?
) -> void {
	update = ref false;

	fn11 = \event : FrpEventType -> {
		if (!^update) {
			update := true;
			switch(event) {
				FrpEventSetValue(): if (rIsUpdated(cell1)) rSetValue(cell2, fn1(rget(cell1)));
				FrpEventUpdated(): rSetUpdated(cell2);
				FrpEventOutdated(): rSetOutdated(cell2);
				FrpEventSetElement(inx): {}
			}
			update := false;
		}
	};

	fn22 = \event : FrpEventType -> {
		if (!^update) {
			update := true;
			switch(event) {
				FrpEventSetValue(): if (rIsUpdated(cell2)) rSetValue(cell1, fn2(rget(cell2)));
				FrpEventUpdated(): rSetUpdated(cell1);
				FrpEventOutdated(): rSetOutdated(cell1);
				FrpEventSetElement(inx): {}
			}
			update := false;
		}
	};

	if (init) {// set cell2 by cell1 value
		fn11(FrpEventOutdated());
		fn11(FrpEventSetValue());
	}

	uns1 = rAddEventListeners([cell1], fn11);
	rAddDisposer(cell2, uns1);
	uns2  = rAddEventListeners([cell2], fn22);
	rAddDisposer(cell1, uns2);
}


//// selectors ////

rselect(
	src : FrpCell<?>,
	fn : (?) -> ??
) -> FrpValue<??> {
	dst = rmake(fn(rget(src)));
	rconnect(src, dst, false, fn);
	dst;
}

rselect2(
	src1 : FrpCell<?>,
	src2 : FrpCell<??>,
	fn : (?, ??) -> ???
) -> FrpValue<???> {
	dst = rmake(fn(rget(src1), rget(src2)));
	rconnect2(src1, src2, dst, false, fn);
	dst;
}

rselect3(
	src1 : FrpCell<?>,
	src2 : FrpCell<??>,
	src3 : FrpCell<???>,
	fn : (?, ??, ???) -> ????
) -> FrpValue<????> {
	dst = rmake(fn(rget(src1), rget(src2), rget(src3)));
	rconnect3(src1, src2, src3, dst, false, fn);
	dst;
}

rselect4(
	src1 : FrpCell<?>,
	src2 : FrpCell<??>,
	src3 : FrpCell<???>,
	src4 : FrpCell<????>,
	fn : (?, ??, ???, ????) -> ?????
) -> FrpValue<????> {
	dst = rmake(fn(rget(src1), rget(src2), rget(src3), rget(src4)));
	rconnect4(src1, src2, src3, src4, dst, false, fn);
	dst;
}

rselectMany(
	sources : [FrpCell<?>],
	fn : ([?]) -> ??
) -> FrpValue<??> {
	dst = rmake(fn(map(sources, rget)));
	rconnectMany(sources, dst, false, fn);
	dst;
}

rselectGate(
	src : FrpCell<?>,
	gate : FrpCell<??>,
	fn : (??) -> bool,
) -> FrpValue<?> {
	dst = rmake(rget(src));
	rconnectGate(src, gate, dst, false, fn);
	dst;
}

rBidiSelect(
	cell : FrpValue<?>,
	fn1 : (?) -> ??,
	fn2 : (??) -> ?
) -> FrpValue<??> {
	dst = rmake(fn1(rget(cell)));
	rBidiConnect(cell, dst, false, fn1, fn2);
	dst;
}

rselectA(
	src : FrpArray<?>,
	fn : ([?]) -> ??
) -> FrpValue<??> {
	dst = rmake(fn(rgetA(src)));
	rconnectA(src, dst, false, fn);
	dst;
}

rselectARange(
	src : FrpArray<?>,
	start : int,
	count : int,
	fn : ([?]) -> ??
) -> FrpValue<??> {
	dst = rmake(fn(rArrayValuesSubrange(src, start, count)));
	rconnectARange(src, dst, start, count, false, fn);
	dst;
}

rselectARangeMap(
	src : FrpArray<?>,
	start : int,
	count : int,
	fn : (?) -> ??
) -> FrpArray<??> {
	dst = rmakeA(map(rArrayValuesSubrange(src, start, count), fn));
	rconnectARangeMap(src, dst, start, count, false, fn);
	dst;
}

rselectARangeDynamic(
	src : FrpArray<?>,
	start : FrpCell<int>,
	count : FrpCell<int>,
	fn : ([?]) -> ??
) -> FrpValue<??> {
	dst = rmake(fn(rArrayValuesSubrange(src, rget(start), rget(count))));
	rconnectARangeDynamic(src, start, count, dst, false, fn);
	dst;
}

rselectARangeMapDynamic(
	src : FrpArray<?>,
	start : FrpCell<int>,
	count : FrpCell<int>,
	fn : (?) -> ??
) -> FrpArray<??> {
	dst = rmakeA(map(rArrayValuesSubrange(src, rget(start), rget(count)), fn));
	rconnectARangeMapDynamic(src, start, count, dst, false, fn);
	dst;
}

rselectAZip(
	src1 : FrpArray<?>,
	src2 : FrpArray<??>,
	fn : (?, ??) -> ???
) -> FrpArray<???> {
	dst = rmakeA(zipWith(rgetA(src1), rgetA(src2), fn));
	rconnectAZip(src1, src2, dst, false, fn);
	dst;
}

//// splitters ////

rsplit2(
	cell : FrpCell<?>,
	fn1 : (?) -> ??,
	fn2 : (?) -> ???
) -> Pair<FrpValue<??>, FrpValue<???>> {
	Pair(rselect(cell, fn1), rselect(cell, fn2));
}

rsplit3(
	cell : FrpCell<?>,
	fn1 : (?) -> ??,
	fn2 : (?) -> ???,
	fn3 : (?) -> ????,
) -> Triple<FrpValue<??>, FrpValue<???>, FrpValue<????>> {
	Triple(rselect(cell, fn1), rselect(cell, fn2), rselect(cell, fn3));
}

rsplit4(
	cell : FrpCell<?>,
	fn1 : (?) -> ??,
	fn2 : (?) -> ???,
	fn3 : (?) -> ????,
	fn4 : (?) -> ?????
) -> Quadruple<FrpValue<??>, FrpValue<???>, FrpValue<????>, FrpValue<?????>> {
	Quadruple(rselect(cell, fn1), rselect(cell, fn2), rselect(cell, fn3), rselect(cell, fn4));
}

rsplitMany(cell : FrpCell<?>, getters: [(?) -> ??]) -> [FrpValue<??>] {
	map(getters, \fn -> rselect(cell, fn));
}

rsplitManyFlow(cell : FrpCell<?>, getters : [(?) -> flow]) -> [FrpValue<flow>] {
	map(getters, \fn -> rselect(cell, fn));
}

//// utils and helpers ////////////////////////////////////////////////////////////////////

rsubscribeCommon(
	cells : [FrpNode<flow>],
	init : bool,
	onValueUpdate : () -> void,
	onElementUpdate : (int) -> void,
) -> () -> void {
	fn = \event : FrpEventType -> {
		switch(event) {
			FrpEventSetValue(): {
				if (forall(cells, rIsUpdated)) onValueUpdate();
				// run when all sources are updated
			}
			FrpEventSetElement(inx): {
				if (forall(cells, rIsUpdated)) onElementUpdate(inx);
			}
			FrpEventUpdated(): {};
			FrpEventOutdated(): {};
		}
	};

	if (init) fn(FrpEventSetValue()); // run fn on subscribe

	rAddEventListeners(cells, fn);
}

rconnectCommon(
	sources : [FrpNode<flow>],
	dst : FrpNode<flow>,
	init : bool,
	updateValue : () -> void,
	updateElement : (int) -> void,
) -> void {
	anySrcUpdated = ref false;

	eventFn = \event : FrpEventType -> {
		switch(event) {
			FrpEventSetValue(): {
				if (forall(sources, rIsUpdated)) {
					updateValue();
				} else {// waiting for update all sources
					anySrcUpdated := true;
				}
			}
			FrpEventSetElement(index): {
				if (forall(sources, rIsUpdated)) {
					updateElement(index);
				} else {// waiting for update all sources
					anySrcUpdated := true;
				}
			}
			FrpEventUpdated(): {
				if (length(sources) <= 1) {// minor optimization
					rSetStatus(dst, true);
				} else if (forall(sources, rIsUpdated)) {
					if (^anySrcUpdated) updateValue() else rSetStatus(dst, true);
				} // else waiting for update all sources
			}
			FrpEventOutdated(): {// start an update cycle
				anySrcUpdated := false;
				rSetStatus(dst, false);
			}
		}
	};

	// set value on connect
	if (init) {
		eventFn(FrpEventOutdated());
		eventFn(FrpEventSetValue());
	}

	uns = rAddEventListeners(sources, eventFn);
	rAddDisposer(dst, uns);
}

rIsUpdated(cell : FrpNode<flow>) -> bool {
	switch (cell) {
		FrpConst(__): true;
		FrpValue(__, status, __, __): ^status;
		FrpArray(__, status, __, __): ^status;
	}
}

rSetStatus(cell : FrpNode<flow>, status : bool) -> void {
	setFn = \statRef -> {
		if (^statRef != status) {// distinct update, prevent cycles
			statRef := status;
			rNotify(cell, if (status) FrpEventUpdated() else FrpEventOutdated());
		}
	}
	switch(cell) {
		FrpConst(__): {};
		FrpValue(__, st, __, __): setFn(st);
		FrpArray(__, st, __, __): setFn(st);
	}
}

rSetValue(cell : FrpValue<?>, value : ?) -> void {
	update = ^(cell.value) != value;
	if (update) cell.value := value;
	rSetUpdatedAndNotify(cell, update);
}

rSetElement(cell : FrpArray<?>, index : int, value : ?) -> void {
	values = ^(cell.values);
	setFn = \st -> {// distinct update - prevent loops
		if (index >= 0 && index < length(values) && ^(values[index]) != value) {// value updated
			values[index] := value;
			st := true;
			rNotify(cell, FrpEventSetElement(index));
		} else if (!^(st)) { // update status only
			st := true;
			rNotify(cell, FrpEventUpdated());
		} // else  nothing to do
	}
	switch(cell) {
		FrpConst(__): {};
		FrpValue(__,st,__,__): setFn(st);
		FrpArray(__,st,__,__): setFn(st);
	}
}

rSetUpdatedAndNotify(cell : FrpNode, updated : bool) -> void {
	setFn = \st -> {
		if (updated) {// value updated
			st := true;
			rNotify(cell, FrpEventSetValue());
		} else if (!^(st)) { // distinct update, prevent cycles
			st := true;
			rNotify(cell, FrpEventUpdated());
		} // else do nothing
	}
	switch(cell) {
		FrpConst(__): {};
		FrpValue(__,st,__,__): setFn(st);
		FrpArray(__,st,__,__): setFn(st);
	}
}

rSetOutdated(cell : FrpNode<flow>) -> void {
	rSetStatus(cell, false);
}

rSetUpdated(cell : FrpNode<flow>) -> void {
	rSetStatus(cell, true);
}

rSetValuesA(cell : FrpArray<?>, elements : [?]) -> void {
	values = ^(cell.values);

	updated =
		if (length(values) != length(elements)) {// re-create array
			cell.values := map(elements, \e -> ref e);
			true;
		} else if (!eqArrayRefValues(values, elements)) {//update elements
			iteri(values, \i,v ->  v := elements[i]);
			true;
		} else {
			false;
		}
	rSetUpdatedAndNotify(cell, updated);
}

rRangeMap(
	src : FrpArray<?>,
	start : int,
	count : int,
	dst : FrpArray<??>,	fn : (?) -> ??
) -> void {
	dstUpdated = rRangeMapARef(src.values, start, count, dst.values, fn);
	rSetUpdatedAndNotify(dst, dstUpdated);
}

rZipArrays(
	src1 : FrpArray<?>,
	src2 : FrpArray<??>,
	dst : FrpArray<???>,
	fn : (?,??) -> ???
) -> void {
	dstUpdated = rZipARef(src1.values, src2.values, dst.values, fn);
	rSetUpdatedAndNotify(dst, dstUpdated);
}

rZipElement(
	src1 : FrpArray<?>,
	src2 : FrpArray<??>,
	index : int,
	dst : FrpArray<???>,
	fn : (?,??) -> ???
) -> void {
	newValM =
		maybeBind(rgetElement(dst, index),
			\oldVal -> maybeBind(rgetElement(src1, index),
				\v1 -> maybeBind(rgetElement(src2, index),
					\v2 -> Some(fn(v1, v2)))));

	eitherFn(
		newValM,
		\v -> rSetElement(dst, index, v),
		\-> rSetUpdated(dst) // fallback for wrong index
	);
}

rMapElement(
	src : FrpArray<?>,
	srcIndex : int,
	dstIndex : int,
	dst : FrpArray<??>,
	fn : (?) -> ??,
) -> void {
	svals = ^(src.values);

	if (srcIndex >= 0 && srcIndex < length(svals)) {
		newVal = fn(^(svals[srcIndex]));
		rSetElement(dst, dstIndex, newVal);
	}
}

// notification utils and listeners /////////////////////
rNotify(cell : FrpNode<flow>, event : FrpEventType) -> void {
	switch(cell) {
		FrpConst(__): {};
		FrpValue(__, __, subs, __): iterDList(subs, \fn -> fn(event));
		FrpArray(__, __, subs, __): iterDList(subs, \fn -> fn(event));
	}
}

rAddEventListener(src: FrpNode<flow>, eventFn : (FrpEventType) -> void) -> () -> void {
	switch(src) {
		FrpConst(__): nop;
		FrpValue(__, __, subs, __): rAddEventListenerInternal(subs, eventFn);
		FrpArray(__, __, subs, __): rAddEventListenerInternal(subs, eventFn);
	}
}

rAddEventListeners(cells : [FrpNode<flow>], eventFn : (FrpEventType) -> void) -> () -> void {
	map(cells,\r -> rAddEventListener(r, eventFn))
	|> (\arr -> filter(arr, \fn -> fn != nop))
	|> (\arr -> \-> applyall(arr));
}

rAddDisposer(cell : FrpNode<flow>, disposerFn : () -> void) -> void {
	switch(cell) {
		FrpConst(__): {};
		FrpValue(__, __, __, disposers): rAddDisposerInternal(disposers, disposerFn);
		FrpArray(__, __, __, disposers): rAddDisposerInternal(disposers, disposerFn);
	}
}

rAddEventListenerInternal(subs : DList<(FrpEventType) -> void>, eventFn : (FrpEventType) -> void) -> () -> void {
	dl = pushDList(subs, eventFn);
	\-> removeDList(subs, dl);
}

rAddDisposerInternal(disposers : ref List<() -> void>, fn : () -> void) -> void {
	disposers :=  Cons(fn, ^disposers);
}

// low-level utils for FrpArray /////////////////////////////////////////////////////////

eqArrayRefValues(arr1 : [ref ?], arr2 : [?]) -> bool {
	length(arr1) == length(arr2) && {
		last = iteriUntil(arr1, \i,r -> ^r != arr2[i]);
		last == length(arr1);
	}
}

eqArrayRefValues2(arr1 : [ref ?], arr2 : [ref ?]) -> bool {
	length(arr1) == length(arr2) && {
		last = iteriUntil(arr1, \i,r -> ^r != ^(arr2[i]));
		last == length(arr1);
	}
}

rArrayValuesSubrange(cell : FrpArray<?>, start : int, count : int) -> [?] {
	subrange(^(cell.values), start, count)
	|> (\arr -> map(arr, \r -> ^r));
}


rRangeMapARef(
	src : ref [ref ?],
	start : int,
	count : int,
	dst : ref [ref ??],
	fn : (?) -> ??
) -> bool {
	slen = length(^src);
	dlen = length(^dst);
	count2 = if (count < 0) slen else min(count, slen - start);

	updated = ref false;

	if (start >= slen) {
		dst := [];
		updated := true;
	} else if (dlen == count2) {//update elements in the place
		svals = ^src;
		iteri(^dst, \i,r -> {
			newVal = fn(^(svals[start + i]));
			if (newVal != ^r) {
				r := newVal;
				updated := true;// update dependencies if any element updated
			}
		});
	} else {// re-create dst
		src2 = subrange(^src, start, count2);
		dst := map(src2, \r -> ref fn(^r));
		updated := true;
	}

	^updated;
}

rZipARef(
	src1 : ref [ref ?],
	src2 : ref [ref ??],
	dst : ref [ref ???],
	fn : (?,??) -> ???
) -> bool {
	vals1 = ^src1;
	vals2 = ^src2;
	slen1 = length(vals1);
	slen2 = length(vals2);
	dlen = length(^dst);
	count = min(slen1, slen2);

	updated = ref false;

	if (count == dlen) {//update in the place
		iteri(^dst, \i,r -> {
			oldVal = ^r;
			r := fn(^(vals1[i]), ^(vals2[i]));
			if (^r != oldVal) updated := true;// update depenedecies if any element updated
		});
	} else {// re-create dst
		dst := zipWith(vals1, vals2, \r1,r2 -> ref fn(^r1, ^r2));
		updated := true;
	}
	^updated;
}
