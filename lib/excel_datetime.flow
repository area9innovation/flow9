import wigi/expr/wigi_expr;
import wigi/expr/excel/excel_common;
import wigi/expr/wigi_date_parser;


export {
	wigiDate(l : [WigiValue]) -> WigiValue;
	wigiDateValue(l : [WigiValue]) -> WigiValue;
	wigiValueDate(l : [WigiValue]) -> WigiValue;
	wigiDay(l : [WigiValue]) -> WigiValue;
	wigiDays360(l : [WigiValue]) -> WigiValue;
	wigiDays(l : [WigiValue]) -> WigiValue;
	wigiEDate(l : [WigiValue]) -> WigiValue;
	wigiSOMonth(l : [WigiValue]) -> WigiValue;
	wigiSOYear(l : [WigiValue]) -> WigiValue;
	wigiEOMonth(l : [WigiValue]) -> WigiValue;
	wigiHour(l : [WigiValue]) -> WigiValue;
	wigiMinute(l : [WigiValue]) -> WigiValue;
	wigiMonth(l : [WigiValue]) -> WigiValue;
	wigiNetworkDays(l : [WigiValue]) -> WigiValue;
	wigiNetworkDaysIntl(l : [WigiValue]) -> WigiValue;
	wigiNow(l : [WigiValue]) -> WigiValue;
	wigiSecond(l : [WigiValue]) -> WigiValue;
	wigiTime(l : [WigiValue]) -> WigiValue;
	wigiTimeValue(l: [WigiValue]) -> WigiValue;
	wigiValueTime(l: [WigiValue]) -> WigiValue;
	wigiToday() -> WigiValue;
	wigiWeekDay(l : [WigiValue]) -> WigiValue;
	wigiWeekNum(l : [WigiValue]) -> WigiValue;
	wigiWorkDay(l : [WigiValue]) -> WigiValue;
	wigiWorkDayIntl(l : [WigiValue]) -> WigiValue;
	wigiYear(l : [WigiValue]) -> WigiValue;
	wigiYearFrac(l : [WigiValue]) -> WigiValue;
	wigiDateDif(l : [WigiValue]) -> WigiValue;
}

wigiDate(l : [WigiValue]) -> WigiValue {
	wigiTemplateIntFunction(l, 3, \arr : [WigiValue] -> {
		year = wigiValue2Int(arr[0]);
		month = wigiValue2Int(arr[1]);
		day = wigiValue2Int(arr[2]);
		new_year = year + (month - 1) / 12;
		new_month = (month - 1) % 12 + 1;
		date = addMonthsToDate(Date(new_year, 0, 0), new_month);
		dateValue = getDateValue(date) + day;

		if (dateValue < 2) WigiError("#NUM!")
		else WigiInt(dateValue)
	})
}

wigiDateValue(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 1, \arr : [WigiValue] -> {
		switch (arr[0]) {
			WigiString(s): parseDateString(s, \d -> WigiInt(getDateValue(d)), \__ -> WigiError("#VALUE!"));
			WigiDate(y, m, d): WigiInt(getDateValue(Date(y, m, d)));
			default : WigiError("#VALUE!");
		}
	})
}

wigiValueDate(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 1, \arr : [WigiValue] -> {
		WigiString(date2string(dateValue2Date(wigiValue2Int(arr[0]))))
	})
}

wigiDay(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 1, \arr : [WigiValue] -> {
		WigiInt(dateValue2Date(wigiValue2Int(arr[0])).day)
	})
}

wigiDays360(l : [WigiValue]) -> WigiValue {
	if (length(l) == 2 || length(l) == 3) {
		wigiTemplateDateFunction(take(l, 2), 2, \arr : [WigiValue] -> {
			start_date = dateValue2Date(wigiValue2Int(arr[0]));
			end_date = dateValue2Date(wigiValue2Int(arr[1]));
			method = if (length(l) == 3) wigiValue2Bool(l[2]) else false;
			WigiInt(days360(start_date, end_date, method))
		})
	}
	else wrongNumberOfArgumentsError(length(l), 3)
}

// https://support.office.com/en-us/article/DAYS-function-57740535-D549-4395-8728-0F07BFF0B9DF
wigiDays(l : [WigiValue]) -> WigiValue {
	extractDateValue = \value -> {
		switch (value : WigiValue) {
			WigiString(s) : wigiDateValue([value]);
			default : value;
		}
	}

	startDateValue = extractDateValue(l[1]);
	endDateValue = extractDateValue(l[0]);

	if (isSameStructType(startDateValue, WigiError(""))) {
		startDateValue
	} else if (isSameStructType(endDateValue, WigiError(""))) {
		endDateValue
	} else {
		valueInRange = \value -> {
			excelTopBorder = 2958465; // found experimentally in excel online
			value >= 0 && value <= excelTopBorder
		}

		startDateInt = wigiValue2Int(startDateValue);
		endDateInt = wigiValue2Int(endDateValue);

		if (valueInRange(startDateInt) && valueInRange(endDateInt)) {
			WigiInt(getDaysBetweenDates(
				dateValue2Date(startDateInt),
				dateValue2Date(endDateInt)
			))
		} else {
			WigiError("#NUM!")
		}
	}
}

wigiEDate(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 2, \arr : [WigiValue] -> {
		WigiInt(getDateValue(addMonthsToDate(dateValue2Date(wigiValue2Int(arr[0])), wigiValue2Int(arr[1]))))
	})
}

wigiSOMonth(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 1, \arr : [WigiValue] -> {
		new_date = dateValue2Date(wigiValue2Int(arr[0]));
		WigiDate(
			new_date.year,
			new_date.month,
			1
		)
	})
}

wigiSOYear(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 1, \arr : [WigiValue] -> {
		new_date = dateValue2Date(wigiValue2Int(arr[0]));
		WigiDate(
			new_date.year,
			1,
			1
		)
	})
}

wigiEOMonth(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 2, \arr : [WigiValue] -> {
		new_date = addMonthsToDate(dateValue2Date(wigiValue2Int(arr[0])), wigiValue2Int(arr[1]));
		WigiInt(getDateValue(
			Date(
				new_date.year,
				new_date.month,
				getNumberOfDaysPerMonthInTheYear(new_date.year)[new_date.month]
			)
		))
	})
}

wigiHour(l : [WigiValue]) -> WigiValue {
	checkTime(l, 1, \arr : [WigiValue] -> {
		WigiInt(getTimeFromValue(arr[0]).hour)
	})
}

wigiMinute(l : [WigiValue]) -> WigiValue {
	checkTime(l, 1, \arr : [WigiValue] -> {
		WigiInt(getTimeFromValue(arr[0]).min)
	})
}

wigiMonth(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 1, \arr : [WigiValue] -> {
		WigiInt(dateValue2Date(wigiValue2Int(arr[0])).month)
	})
}

// NETWORKDAYS(start_date, end_date, [holidays])
// start_date 	Required. A date that represents the start date.
// end_date 	Required. A date that represents the end date.
// holidays 	Optional. An optional range of one or more dates to exclude from the working calendar.
wigiNetworkDays(l : [WigiValue]) -> WigiValue {
	if (length(l) == 2 || length(l) == 3) {
		wigiTemplateDateFunction(take(l, 2), 2, \arr : [WigiValue] -> {
			wigiTemplateDateFunction(wigiTemplateFlattenArray(tailFrom(l, 2)), -1, \holidays : [WigiValue] -> {
				countWorkDays(
					dateValue2Date(wigiValue2Int(arr[0])),
					dateValue2Date(wigiValue2Int(arr[1])),
					"0000011",
					map(holidays, \dateValue -> dateValue2Date(wigiValue2Int(dateValue)))
				)
			})
		})
	} else wrongNumberOfArgumentsError(length(l), 3)
}

// NETWORKDAYS.INTL(start_date, end_date, [weekend], [holidays])
// start_date 	Required. A date that represents the start date.
// end_date 	Required. A date that represents the end date.
// weekend 		Required. Indicates the days of the week that are weekend days and are not considered working days.
// holidays 	Optional. An optional range of one or more dates to exclude from the working calendar.
wigiNetworkDaysIntl(l : [WigiValue]) -> WigiValue{
	if (length(l) == 3 || length(l) == 4) {
		wigiTemplateDateFunction(take(l, 2), 2, \arr : [WigiValue] -> {
			weekend = makeWeekend(l[2]);
			if (weekend == "#NUM!") WigiError("#NUM!")
			else wigiTemplateDateFunction(wigiTemplateFlattenArray(tailFrom(l, 3)), -1, \holidays : [WigiValue] -> {
				countWorkDays(
					dateValue2Date(wigiValue2Int(arr[0])),
					dateValue2Date(wigiValue2Int(arr[1])),
					weekend,
					map(holidays, \dateValue -> dateValue2Date(wigiValue2Int(dateValue)))
				)
			})
		})
	} else wrongNumberOfArgumentsError(length(l), 4)
}

// if length(l) > 0 then the 1st parameter is `UTC`, 2nd and 3d - hours and minutes of the time offset (not required)
wigiNow(l : [WigiValue]) -> WigiValue {
	if (length(l) == 0) {
		WigiString(time2string(timestamp()));
	} else if (toUpperCase(wigiValue2String(l[0])) == "UTC") {
		if (length(l) == 1) {
			WigiString(time2stringUtc(timestamp()));
		} else if (length(l) == 2) {
			WigiString(time2stringUtc(timestamp() + hour2ms(wigiValue2Int(l[1]))));
		} else if (length(l) == 3) {
			hours = wigiValue2Int(l[1]);
			WigiString(time2stringUtc(timestamp() + hour2ms(hours) +
				if (hours == 0) min2ms(wigiValue2Int(l[2])) else b2sign(hours > 0) * min2ms(iabs(wigiValue2Int(l[2])))));
		} else {
			wrongNumberOfArgumentsError(length(l), 3);
		}
	} else {
		WigiError("Incorrect parameters.");
	}
}

wigiSecond(l : [WigiValue]) -> WigiValue {
	checkTime(l, 1, \arr : [WigiValue] -> {
		WigiInt(getTimeFromValue(arr[0]).sec)
	})
}

wigiTime(l : [WigiValue]) -> WigiValue {
	wigiTemplateIntFunction(l, 3, \arr : [WigiValue] -> {
		seconds = wigiValue2Int(arr[2]) % 60;
		convertToMinutes = wigiValue2Int(arr[2]) / 60;
		minutes = (wigiValue2Int(arr[1]) + convertToMinutes) % 60;
		convertToHours = (wigiValue2Int(arr[1]) + convertToMinutes) / 60;
		hours = (wigiValue2Int(arr[0]) + convertToHours) % 24;

		WigiDouble(i2d(hours * 3600 + minutes * 60 + seconds) / i2d(24*3600))
	})
}

wigiTimeValue(l: [WigiValue]) -> WigiValue {
	wigiTemplateTextFunction(l, 1, \arr :[WigiValue] -> {
		timeText = l[0];
		switch(timeText) {
			WigiString(s) : parseTimeString(s,
				\time -> WigiDouble(i2d(time.hour * SECONDS_PER_HOUR + time.min * SECONDS_PER_MINUTE + time.sec) / SECONDS_PER_DAY),
				\__ ->  WigiError("#VALUE!")
			);
			default : WigiString("Invalid type of the argument")
		}
	})
}

wigiValueTime(l: [WigiValue]) -> WigiValue {
	checkTime(l, 1, \arr : [WigiValue] -> {
		WigiString(getTimeOnlyString(getTimeFromValue(arr[0]), true, false))
	})
}

wigiToday() -> WigiValue {
	today = getCurrentDate();
	WigiDate(today.year, today.month, today.day)
}

// WEEKDAY(serial_number,[return_type])
// Serial_number    Required. A sequential number that represents the date of the day you are trying to find.
// Return_type    Optional. A number that determines the type of return value.
// 1 or omitted - Numbers 1 (Sunday) through 7 (Saturday).
// 2 - Numbers 1 (Monday) through 7 (Sunday).
// 3 - Numbers 0 (Monday) through 6 (Sunday).
// 11 - Numbers 1 (Monday) through 7 (Sunday).
// 12 - Numbers 1 (Tuesday) through 7 (Monday).
// 13 - Numbers 1 (Wednesday) through 7 (Tuesday).
// 14 - Numbers 1 (Thursday) through 7 (Wednesday).
// 15 - Numbers 1 (Friday) through 7 (Thursday).
// 16 - Numbers 1 (Saturday) through 7 (Friday).
// 17 - Numbers 1 (Sunday) through 7 (Saturday).
wigiWeekDay(l : [WigiValue]) -> WigiValue {
	makeFormatDayOfWeek = \defDay, type -> {
		if (type == 2 || type == 11) {defDay + 1}
		else if (type == 3) {defDay}
		else if (type == 12) {(defDay + 6) % 7 + 1}
		else if (type == 13) {(defDay + 5) % 7 + 1}
		else if (type == 14) {(defDay + 4) % 7 + 1}
		else if (type == 15) {(defDay + 3) % 7 + 1}
		else if (type == 16) {(defDay + 2) % 7 + 1}
		else {(defDay + 1) % 7 + 1}
	}

	if (length(l) == 1 || length(l) == 2) {
		wigiTemplateDateFunction(l, -1, \arr : [WigiValue] -> {
			return_type = if (length(l) == 2) wigiValue2Int(arr[1]) else 1;
			WigiInt(
				makeFormatDayOfWeek(
					dayOfWeek(dateValue2Date(wigiValue2Int(arr[0]))),
					return_type
				)
			)
		})
	} else wrongNumberOfArgumentsError(length(l), 2)
}

// WEEKNUM(serial_number,[return_type])
// Serial_number     Required. A date within the week.
// Return_type     Optional. A number that determines on which day the week begins. The default is 1.
// 1 or omitted Sunday
// 2 Monday
// 11 Monday
// 12 Tuesday
// 13 Wednesday
// 14 Thursday
// 15 Friday
// 16 Saturday
// 17 Sunday
// 21 Monday
wigiWeekNum(l : [WigiValue]) -> WigiValue {
	if (length(l) == 1 || length(l) == 2) {
		wigiTemplateDateFunction(l, -1, \arr : [WigiValue] -> {
			date = dateValue2Date(wigiValue2Int(arr[0]));
			type = if (length(l) == 2) wigiValue2Int(arr[1]) else 1;
			if (type == 1 || type == 17) WigiInt(getWeekOfYear(date, 6, true))
			else if (type == 2 || type == 11 || type == 21) WigiInt(getWeekOfYear(date, 0, type != 21))
			else if (type == 12) WigiInt(getWeekOfYear(date, 1, true))
			else if (type == 13) WigiInt(getWeekOfYear(date, 2, true))
			else if (type == 14) WigiInt(getWeekOfYear(date, 3, true))
			else if (type == 15) WigiInt(getWeekOfYear(date, 4, true))
			else if (type == 16) WigiInt(getWeekOfYear(date, 5, true))
			else WigiError("#NUM!")
		})
	} else wrongNumberOfArgumentsError(length(l), 2)
}

// WORKDAY(start_date, days, [holidays])
// Start_date    Required. A date that represents the start date.
// Days    Required. The number of nonweekend and nonholiday days before or after start_date.
// Holidays    Optional. An optional list of one or more dates to exclude from the working calendar.
wigiWorkDay(l : [WigiValue]) -> WigiValue {
	if (length(l) == 2 || length(l) == 3) {
		wigiTemplateDateFunction(take(l, 2), -1, \arr : [WigiValue] -> {
			wigiTemplateDateFunction(wigiTemplateFlattenArray(tailFrom(l, 2)), -1, \holidays : [WigiValue] -> {
				countDateAfterWorkDays(
					dateValue2Date(wigiValue2Int(arr[0])),
					wigiValue2Int(arr[1]),
					"0000011",
					map(holidays, \dateValue -> dateValue2Date(wigiValue2Int(dateValue)))
				)
			})
		})
	} else wrongNumberOfArgumentsError(length(l), 3)
}

// WORKDAY.INTL(start_date, days, [weekend], [holidays])
// Start_date    Required. A date that represents the start date.
// Days    Required. The number of nonweekend and nonholiday days before or after start_date.
// Weekend    Required. Indicates the days of the week that are weekend days and are not considered working days.
// Holidays    Optional. An optional list of one or more dates to exclude from the working calendar.
wigiWorkDayIntl(l : [WigiValue]) -> WigiValue {
	if (length(l) == 3 || length(l) == 4) {
		wigiTemplateDateFunction(take(l, 2), -1, \arr : [WigiValue] -> {
			weekend = makeWeekend(l[2]);
			if (weekend == "#NUM!") WigiError("#NUM!")
			else {
				wigiTemplateDateFunction(wigiTemplateFlattenArray(tailFrom(l, 3)), -1, \holidays : [WigiValue] -> {
					countDateAfterWorkDays(
						dateValue2Date(wigiValue2Int(arr[0])),
						wigiValue2Int(arr[1]),
						weekend,
						map(holidays, \dateValue -> dateValue2Date(wigiValue2Int(dateValue)))
					)
				})
			}
		})
	} else wrongNumberOfArgumentsError(length(l), 4)
}

wigiYear(l : [WigiValue]) -> WigiValue {
	wigiTemplateDateFunction(l, 1, \arr : [WigiValue] -> {
		WigiInt(dateValue2Date(wigiValue2Int(arr[0])).year)
	})
}

/*
Calculates the fraction of the year represented by the number of whole days between two dates.
YEARFRAC(start_date, end_date, [basis])
basis Optional. The type of day count basis to use.
	0 or omitted - US (NASD) 30/360
	1 - Actual/actual
	2 - Actual/360
	3 - Actual/365
	4 - European 30/360
*/
wigiYearFrac(l : [WigiValue]) -> WigiValue {
	if (length(l) == 2 || length(l) == 3) {
		wigiTemplateDateFunction(l, -1, \arr : [WigiValue] -> {
			start = dateValue2Date(wigiValue2Int(arr[0]));
			end = dateValue2Date(wigiValue2Int(arr[1]));
			basis = if (length(l) == 3) wigiValue2Int(arr[2]) else 0;
			if (basis < 0 || basis > 4) WigiError("#NUM!")
			else eitherFn(getYearFrac(end, start, basis), \d -> WigiDouble(d), \ -> WigiError("#NUM!"))
		})
	} else wrongNumberOfArgumentsError(length(l), 3)
}

// https://support.office.com/en-us/article/DATEDIF-function-25dba1a4-2812-480b-84dd-8b32a451b35c
wigiDateDif(l : [WigiValue]) -> WigiValue {
	firstArg = wigiValue2Int(l[0]);
	secondArg = wigiValue2Int(l[1]);
	startDate = dateValue2Date(min(firstArg, secondArg));
	endDate = dateValue2Date(max(firstArg, secondArg));
	unit = toLowerCase(wigiValue2String(l[2]));

	monthDiff = endDate.month - startDate.month - b2i(endDate.day < startDate.day);
	yearDiff = endDate.year - startDate.year - b2i(monthDiff < 0);

	if (unit == "d") {
		WigiInt(getDaysBetweenDates(startDate, endDate))
	} else if (unit == "m") {
		WigiInt(yearDiff * 12 + (monthDiff + 12) % 12)
	} else if (unit == "y") {
		WigiInt(yearDiff)

	} else if (unit == "md") {
		firstDateMonth = endDate.month - b2i(endDate.day < startDate.day);
		firstDate = Date(2000, firstDateMonth, startDate.day);
		secondDate = Date(2000, endDate.month, endDate.day);
		WigiInt(getDaysBetweenDates(firstDate, secondDate))
	} else if (unit == "ym") {
		WigiInt((monthDiff + 12) % 12)
	} else if (unit == "yd") {
		secondDateYear = startDate.year + b2i(monthDiff < 0);
		firstDate = Date(startDate.year, startDate.month, startDate.day);
		secondDate = Date(secondDateYear, endDate.month, endDate.day);
		WigiInt(getDaysBetweenDates(firstDate, secondDate))
	} else {
		WigiError("Undefined unit")
	}
}



isValidTimeElement(v : WigiValue) -> bool {
	switch(v) {
		WigiDouble(s): true;
		WigiString(s): true;
		default : false
	}
}

makeWeekend(wigi : WigiValue) -> string {
	weekend = getWigiText(wigi);
	if (strlen(weekend) == 7 && (strCountOf(weekend, "0") + strCountOf(weekend, "1") == 7)) weekend
	else if (isDigits(weekend)) {
		num = s2i(weekend);
		if 		(num == 1) "0000011" // Saturday & Sunday
		else if (num == 2) "1000001" // Sunday & Monday
		else if (num == 3) "1100000" // Monday & Tuesday
		else if (num == 4) "0110000" // Tuesday & Wednesday
		else if (num == 5) "0011000" // Wednesday & Thursday
		else if (num == 6) "0001100" // Thursday & Friday
		else if (num == 7) "0000110" // Friday & Saturday
		else if (num == 11) "0000001" // Sunday only
		else if (num == 12) "1000000" // Monday only
		else if (num == 13) "0100000" // Tuesday only
		else if (num == 14) "0010000" // Wednesday only
		else if (num == 15) "0001000" // Thursday only
		else if (num == 16) "0000100" // Friday only
		else if (num == 17) "0000010" // Saturday only
		else "#NUM!"
	} else "#NUM!"
}

getTimeFromValue(v : WigiValue) -> Time {
	switch(v) {
		WigiDouble(s): {
			seconds = round(s * SECONDS_PER_DAY);
			minutes = seconds / SECONDS_PER_MINUTE;
			hour = minutes / MINUTES_PER_HOUR;
			minute = minutes % MINUTES_PER_HOUR;
			second = seconds % SECONDS_PER_MINUTE;
			Time(0, 0, 0, hour, minute, second);
		}
		WigiString(s): db2time(s);
		default : nullTime
	}
}

checkTime(l : [WigiValue], args : int, fn : ([WigiValue]) -> WigiValue) -> WigiValue {
	if ((args != -1) && (length(l) != args)) wrongNumberOfArgumentsError(length(l), args)
	else {
		if (forall(l, isValidTimeElement)) fn(l)
		else WigiError("Invalid type of arguments. [5]")
	}
}

// --------------------------------------------------------------------------------------------------------------
// Weekend string values are seven characters long and each character in the string represents a day of the week,
// starting with Monday. 1 represents a non-workday and 0 represents a workday.
// Only the characters 1 and 0 are permitted in the string.
// --------------------------------------------------------------------------------------------------------------
// Holidays - An optional set of one or more dates that are to be excluded from the working day calendar.
// --------------------------------------------------------------------------------------------------------------
countWorkDays(start : Date, end : Date, weekend : string, holidays : [Date]) -> WigiValue {
	isDateAfter = compareDates(start, end) == DateAfter();
	start_date = if (isDateAfter) end else start;
	end_date = if (isDateAfter) start else end;
	startDayOfWeek = dayOfWeek(start_date);
	endDayOfWeek = dayOfWeek(end_date);

	isWeekEnd = \date -> {
		day = dayOfWeek(date);
		strContainsAt(weekend, day, "1")
	}

	countFullWeeksWorkDays = \weeksCount -> {
		weeksCount * strCountOf(weekend, "0")
	}

	countWorkDaysWithoutHolidays = \daysCount -> {
		fold(uniq(holidays), daysCount, \acc, date -> {
			if (date != nullDate && !isWeekEnd(date) && isDateBetween(date, start_date, end_date)) acc - 1
			else acc
		})
	}
	fullWeeks = (getDaysBetweenDates(start_date, end_date) + 1) / 7;
	if ((endDayOfWeek + 1) % 7 == startDayOfWeek) {
		WigiInt(countWorkDaysWithoutHolidays(countFullWeeksWorkDays(fullWeeks)) * if (isDateAfter) -1 else 1)
	} else {
		weekPart = fold(
			generate(0, (endDayOfWeek - startDayOfWeek + 7) % 7 + 1,
				\i -> Date(start_date.year, start_date.month, start_date.day + i)
			),
			0,
			\acc, date -> {
				if (!isWeekEnd(date)) acc + 1
				else acc
			}
		);
		WigiInt(countWorkDaysWithoutHolidays(countFullWeeksWorkDays(fullWeeks) + weekPart) * if (isDateAfter) -1 else 1)
	}
}

countDateAfterWorkDays(start_date : Date, days : int, weekend : string, holidays : [Date]) -> WigiValue {
	if (weekend != "1111111") {
		isWeekEnd = \date -> {
			day = dayOfWeek(date);
			strContainsAt(weekend, day, "1")
		}
		if (days == 0) WigiInt(getDateValue(start_date))
		else {
			increment = if (days > 0) 1 else -1;
			newDate = addDaysToDate(start_date, increment);
			if (isWeekEnd(newDate) || contains(holidays, newDate)) {
				countDateAfterWorkDays(newDate, days, weekend, holidays)
			} else {
				countDateAfterWorkDays(newDate, days - increment, weekend, holidays)
			}
		}
	} else WigiError("#NUM!")
}
