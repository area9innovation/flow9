import form/videoform;
import sys/keycodes;
import sys/target;
import formats/json/json;

export {
	// Works only in js
	// Supported values: html, canvas, webgl
	native setRendererType : io (rendererType : string) -> void = RenderSupport.setRendererType;
	// Works only in js
	// Looks for html element with id = rootId and sets it as root to render from.
	native setRenderRoot : io (rootId : string) -> void = RenderSupport.setRenderRoot;
	// Works only in js
	// Returns id of the element which is currently set as a root to render from. Returns "" if no element is set.
	native getRenderRoot : io () -> string = RenderSupport.getRenderRoot;
	// Enable or disable text rendering outside view
	native setKeepTextClips : io (keep : bool) -> void = RenderSupport.setKeepTextClips;
	native getRendererType : io () -> string = RenderSupport.getRendererType;

	native loadPreconfiguredFonts : io (families : [string], onDone : () -> void) -> void = RenderSupport.loadPreconfiguredFonts;

	native loadFSFont : io (familiy : string, url : string) -> void = RenderSupport.loadFSFont;

	getFontStylesConfig() -> Json;

	native debugLog : io (str : string) -> void = RenderSupport.debugLog;

	// Please avoid using this, use render/makeStyledTextfield instead.
	// PixiJS target wants to know font family on field creation.
	// If used, ALWAYS use getMappedFontFace() from renderform.flow to extract family from CharacterStyle.
	// Note that it doesn't set text field font, that is setTextAndStyle call is still required.
	// TODO hence dfont is no more used, redo the native to get no params.
	native makeTextfield : io (fontFamily : string) -> native = RenderSupport.makeTextField;

	native getTextFieldWidth : io (clip : native) -> double = RenderSupport.getTextFieldWidth;
	native getTextFieldMaxWidth : io (clip : native) -> double = RenderSupport.getTextFieldMaxWidth;
	native getTextFieldHeight : io (clip : native) -> double = RenderSupport.getTextFieldHeight;
	// The baseline is metrics[0]
	native getTextMetrics : io (text : native) -> [double] = RenderSupport.getTextMetrics;
	native getTextFieldCharXPosition : io (clip: native, chridx: int) -> double = RenderSupport.getTextFieldCharXPosition;
	native findTextFieldCharByPosition : io (clip: native, x: double, y: double) -> int = RenderSupport.findTextFieldCharByPosition;
	native getStage : io () -> native = RenderSupport.getStage;
	native getStageId : io (stage : native) -> int = RenderSupport.getStageId;
	native setWindowTitle : io (title : string) -> void = RenderSupport.setWindowTitle;
	native setFavIcon : io (url : string) -> void = RenderSupport.setFavIcon;
	// Take snapshot and save to path
	native takeSnapshot : io (path : string) -> void = RenderSupport.takeSnapshot;
	native takeSnapshotBox : io (path : string, x : int, y : int, w : int, h : int) -> void = RenderSupport.takeSnapshotBox;
	// Take snapshot and return it as base64 string
	native getSnapshot : io () -> string = RenderSupport.getSnapshot;
	native getSnapshotBox : io (x : int, y : int, w : int, h : int) -> string = RenderSupport.getSnapshotBox;
	native getClipSnapshot : io (clip : native, cb : (png : string) -> void) -> void = RenderSupport.getClipSnapshot;
	native compareImages : io (image1 : string, image2 : string, cb : (json : string) -> void) -> void = RenderSupport.compareImages;

	// Camera API
	native getNumberOfCameras : io () -> int = RenderSupport.getNumberOfCameras;
	native getCameraInfo : io (id : int) -> string = RenderSupport.getCameraInfo;

	// Set interface orientation for mobile device. orientation = landscape, portrait, none
	native setInterfaceOrientation0 : io (orientation : string) -> void = RenderSupport.setInterfaceOrientation;

	// Read the color of this screen pixel in our window. Very slow!
	native getScreenPixelColor : io (x : int, y : int) -> int = RenderSupport.getScreenPixelColor;

	native setGlobalZoomEnabled : io (enabled : bool) -> void = RenderSupport.setGlobalZoomEnabled;

	native bitmapDraw : io (bitmap: native, clip : native, w : int, h : int) -> void = RenderSupport.bitmapDraw;
	native makeCamera : io (
		uri : string, camID : int, camWidth : int, camHeight : int, camFps : double, vidWidth : int, vidHeight : int, recordMode : int,
		cbOnOk : (stream : native) -> void, cbOnFailed : (msg : string) -> void
	) -> [native] = RenderSupport.makeCamera;
	native startRecord : io (clip : native, filename : string, mode : string) -> void = RenderSupport.startRecord;
	native stopRecord : io (clip : native) -> void = RenderSupport.stopRecord;
	native enableResize : io () -> void = RenderSupport.enableResize;
	native currentClip : io () -> native = RenderSupport.currentClip;
	native mainRenderClip : io () -> native = RenderSupport.mainRenderClip;
	native makeClip : io () -> native = RenderSupport.makeClip;
	native makeCanvasClip : io () -> native = RenderSupport.makeCanvasClip;
	native makeGraphics : io () -> native = RenderSupport.makeGraphics; // works only in js
	native addChild : io (parent : native, child : native) -> void = RenderSupport.addChild;
	native addChildAt : io (parent : native, child : native, id : int) -> void = RenderSupport.addChildAt;
	native removeChild : io (parent : native, child : native) -> void = RenderSupport.removeChild;
	native removeChildren : io (parent : native) -> void = RenderSupport.removeChildren;
	native setClipCallstack : io (clip : native, callstack : native) -> void = RenderSupport.setClipCallstack;
	// when debugging, stores the key/value pair in an internal map for the clip tree browser to use
	native setClipDebugInfo : io (clip : native, key : string, val : flow) -> void = RenderSupport.setClipDebugInfo;
	native setClipX : io (clip : native, x : double) -> void = RenderSupport.setClipX;
	native setClipY : io (clip : native, y : double) -> void = RenderSupport.setClipY;
	native setClipScaleX : io (clip : native, x : double) -> void = RenderSupport.setClipScaleX;
	native setClipScaleY : io (clip : native, y : double) -> void = RenderSupport.setClipScaleY;
	native setClipRotation : io (clip : native, x : double) -> void = RenderSupport.setClipRotation;
	native setClipAlpha : io (clip : native, y : double) -> void = RenderSupport.setClipAlpha;
	native setClipMask : io (clip : native, mask : native) -> void = RenderSupport.setClipMask;
	native setClipViewBounds : io (clip : native, minX : double, minY : double, maxX : double, maxY : double) -> void = RenderSupport.setClipViewBounds;
	native setClipWidth : io (clip : native, width : double) -> void = RenderSupport.setClipWidth;
	native getClipHeight : io (clip : native) -> double = RenderSupport.getClipHeight;
	native getClipWidth : io (clip : native) -> double = RenderSupport.getClipWidth;
	native setClipHeight : io (clip : native, height : double) -> void = RenderSupport.setClipHeight;
	native setClipResolution : io (clip : native, resolution : double) -> void = RenderSupport.setClipResolution;
	native setClipOrigin : io (clip : native, x : double, y : double) -> void = RenderSupport.setClipOrigin;
	native setTextAndStyle : io (
		textfield : native, text : string, fontfamily : string, fontsize : double,
		fontweight : int, fontslope : string,
		fillcolour : int, fillopacity : double, letterspacing : double,
		backgroundcolour : int, backgroundopacity : double
	) -> void = RenderSupport.setTextAndStyle;
	native setLineHeightPercent : io (textfield : native, lineHeightPercent : double) -> void = RenderSupport.setLineHeightPercent;
	native setTextNeedBaseline : io (textfield : native, needBaseline : bool) -> void = RenderSupport.setTextNeedBaseline;
	native setTextPreventCheckTextNodeWidth : io (textfield : native, prevent : bool) -> void = RenderSupport.setTextPreventCheckTextNodeWidth;
	native setEscapeHTML : io (textfield : native, escapeHTML : bool) -> void = RenderSupport.setEscapeHTML;
	native setTextWordSpacing : io (textfield : native, spacing : double) -> void = RenderSupport.setTextWordSpacing; // JS only
	native setTextDirection : io (
		textfield : native, dir : string
	) -> void = RenderSupport.setTextDirection;
	native setPreventContextMenu : io (textfield : native, preventContextMenu : bool) -> void = RenderSupport.setPreventContextMenu;
	native setAdvancedText : io (textfield : native, sharpness : int, antiAliasType : int, gridFitType : int) -> void = RenderSupport.setAdvancedText;
	native setTextFieldWidth : io (clip : native, width : double) -> void = RenderSupport.setTextFieldWidth;
	native setTextFieldHeight : io (clip : native, width : double) -> void = RenderSupport.setTextFieldHeight;
	native setTextFieldInterlineSpacing : io (clip : native, spacing : double) -> void = RenderSupport.setTextFieldInterlineSpacing;
	native setTextFieldCropWords : io (clip : native, crop : bool) -> void = RenderSupport.setTextFieldCropWords;
	native setTextFieldCursorColor : io (clip : native, color : int, opacity : double) -> void = RenderSupport.setTextFieldCursorColor;
	native setTextFieldCursorWidth : io (clip : native, width : double) -> void = RenderSupport.setTextFieldCursorWidth;
	native setTextEllipsis : io (clip : native, lines : int, cb : (bool) -> void) -> void = RenderSupport.setTextEllipsis;
	native setTextSkipOrderCheck : io (clip : native, skip : bool) -> void = RenderSupport.setTextSkipOrderCheck;
	native setAutoAlign : io (clip : native, autoalign : string) -> void = RenderSupport.setAutoAlign;
	native makePicture : io (
		url : string, cache : bool, metricsFn : (width : double, height : double) -> void,
		errorFn : (string) -> void, onlyDownload : bool, altText : string, headers : [[string]]
	) -> native = RenderSupport.makePicture;
	native setPictureUseCrossOrigin : io (picture : native, useCrossOrigin : bool) -> void = RenderSupport.setPictureUseCrossOrigin;
	native setPictureReferrerPolicy : io (picture : native, referrerpolicy : string) -> void = RenderSupport.setPictureReferrerPolicy;
	native makeVideo : io (
		metricsFn : (width : double, height : double) -> void, playFn : (playing : bool) -> void,
		durationFn : (length : double) -> void, positionFn : (position : double) -> void
	) -> native = RenderSupport.makeVideo;
	native playVideo : io (clip : native, filename : string, startPaused : bool, headers : [[string]]) -> void = RenderSupport.playVideo;
	native playVideoFromMediaStream : io (clip : native, mediaStream : native, startPaused : bool) -> void = RenderSupport.playVideoFromMediaStream;
	native setVideoLooping: io (clip: native, looping: bool) -> void = RenderSupport.setVideoLooping;
	native setVideoSubtitle: io (
		clip: native, text : string, fontfamily : string, fontsize : double,
		fontweight : int, fontslope : string, fillcolour : int,
		fillopacity : double, letterspacing : double, backgroundcolour : int,
		backgroundopacity : double, alignBottom : bool, bottomBorder : double,
		scaleMode : bool, scaleModeMin : double, scaleModeMax : double, escapeHTML : bool
	) -> void = RenderSupport.setVideoSubtitle;
	native setVideoControls: io (clip: native, ctl: [PlayerControl]) -> void = RenderSupport.setVideoControls;
	native setVideoIsAudio: io (clip: native) -> void = RenderSupport.setVideoIsAudio;
	native setVideoVolume: io (clip: native, volume: double) -> void = RenderSupport.setVideoVolume;
	native setVideoTimeRange: io (clip: native, start: double, end: double) -> void = RenderSupport.setVideoTimeRange;
	native getVideoPosition: io (clip: native) -> double = RenderSupport.getVideoPosition;
	native getVideoCurrentFrame: io (clip: native) -> string = RenderSupport.getVideoCurrentFrame;
	native setVideoPlaybackRate: io (clip: native, rate: double) -> void = RenderSupport.setVideoPlaybackRate;
	native seekVideo : io (clip : native, frame : double) -> void = RenderSupport.seekVideo;
	native pauseVideo : io (clip : native) -> void = RenderSupport.pauseVideo;
	native resumeVideo : io (clip : native) -> void = RenderSupport.resumeVideo;
	native closeVideo : io (clip : native) -> void = RenderSupport.closeVideo;
	native addStreamStatusListener : io (clip : native, cb : (code : string) -> void) -> () -> void = RenderSupport.addStreamStatusListener;
	native addVideoSource : io (clip : native, src : string, type : string, headers : [[string]]) -> void = RenderSupport.addVideoSource;
	native setVideoExternalSubtitle : io (clip : native, kind : string, src : string) -> () -> void = RenderSupport.setVideoExternalSubtitle;
	native getGraphics : io (clip : native) -> native = RenderSupport.getGraphics;
	native clearGraphics : io (clip : native) -> void = RenderSupport.clearGraphics;
	native useSvg : io (clip : native) -> void = RenderSupport.useSvg;
	native setLineStyle : io (graphics : native, width : double, color : int, opacity: double) -> void = RenderSupport.setLineStyle;
	native beginFill : io (graphics : native, color : int, opacity: double) -> void = RenderSupport.beginFill;
	native beginGradientFill : io (graphics : native, colors : [int], alphas: [double], offsets: [double], matrix : native, type: string) -> void = RenderSupport.beginGradientFill;
	native setLineGradientStroke : io (graphics : native, colors : [int], alphas: [double], offsets: [double], matrix : native) -> void = RenderSupport.setLineGradientStroke;
	native makeMatrix : io (width : double, height : double, rotation : double, xOffset : double, yOffset : double) -> native = RenderSupport.makeMatrix;
	native moveTo : io (graphics : native, x : double, y : double) -> void = RenderSupport.moveTo;
	native lineTo : io (graphics : native, x : double, y : double) -> void = RenderSupport.lineTo;
	native curveTo : io (graphics : native, x : double, y : double, cx : double, cy : double) -> void = RenderSupport.curveTo;
	native endFill : io (graphics : native) -> void = RenderSupport.endFill;
	native drawRect : io (graphics : native, x : double, y : double, width : double, height : double) -> void = RenderSupport.drawRect;
	native drawRoundedRect : io (graphics : native, x : double, y : double, width : double, height : double, radius : double) -> void = RenderSupport.drawRoundedRect;
	native drawEllipse : io (graphics : native, x : double, y : double, width : double, height : double) -> void = RenderSupport.drawEllipse;
	native drawCircle : io (graphics : native, x : double, y : double, radius : double) -> void = RenderSupport.drawCircle;
	native setTextInput : io (native) -> void = RenderSupport.setTextInput;
	native setTextInputType : io (native, string) -> void = RenderSupport.setTextInputType;
	native setTextInputAutoCompleteType : io (native, string) -> void = RenderSupport.setTextInputAutoCompleteType;
	native setTextInputStep : io (native, double) -> void = RenderSupport.setTextInputStep;
	native addTextInputFilter : io (textfiled : native, f : (string) -> string) -> () -> void = RenderSupport.addTextInputFilter;
	native addTextInputEventFilter : io (textfiled : native, f : (string, string) -> string) -> () -> void = RenderSupport.addTextInputEventFilter;
	native addTextInputKeyEventFilter : io (
		clip : native, event : string, cb : (key : string, ctrl : bool, shift : bool,
		alt : bool, meta : bool, keyCode : int) -> bool
	) -> () -> void = RenderSupport.addTextInputKeyEventFilter;
	native addTextInputOnCopyEvent : io (textfiled : native, fn : (setClipboardFn : (string) -> void) -> void) -> () -> void = RenderSupport.addTextInputOnCopyEvent;
	native setTabIndex : io (native, int) -> void = RenderSupport.setTabIndex;
	native setTabEnabled : io (native, bool) -> void = RenderSupport.setTabEnabled;
	native getContent : io (native) -> string = RenderSupport.getContent;
	native getCursorPosition : io (native) -> int = RenderSupport.getCursorPosition;
	native getSelectionStart : io (native) -> int = RenderSupport.getSelectionStart;
	native getSelectionEnd : io (native) -> int = RenderSupport.getSelectionEnd;
	native setSelection : io (clip : native, start : int, end : int) -> void = RenderSupport.setSelection;
	native getFocus : io (native) -> bool = RenderSupport.getFocus;
	native getScrollV : io (native) -> int = RenderSupport.getScrollV;
	native setScrollV : io (native, int) -> void = RenderSupport.setScrollV;
	native getNumLines : io (native) -> int = RenderSupport.getNumLines;
	native getBottomScrollV : io (native) -> int = RenderSupport.getBottomScrollV;
	native setMultiline : io (native, bool) -> void = RenderSupport.setMultiline;
	native setWordWrap : io (native, bool) -> void = RenderSupport.setWordWrap;
	native setDoNotInvalidateStage : (native, bool) -> void = RenderSupport.setDoNotInvalidateStage;
	native setFocus : io (native, bool) -> void = RenderSupport.setFocus;
	native setReadOnly : io (native, bool) -> void = RenderSupport.setReadOnly;
	native setMaxChars : io (native, int) -> void = RenderSupport.setMaxChars;
	native setAutofillBackgroundColor : io (native, int) -> void = RenderSupport.setAutofillBackgroundColor;
	native setCursor : io (string) -> void = RenderSupport.setCursor;
	native getCursor : io () -> string = RenderSupport.getCursor;
	// makeWebClip(url, domain, updateCachedContent, reloadBlock, flowCallback, onDone, shrink2fit);
	native makeWebClip : io (string, string,  bool, bool, ([string]) -> string, (string) -> void, bool)-> native = RenderSupport.makeWebClip;
	native setWebClipSandBox : io (native, string) -> void = RenderSupport.setWebClipSandBox;
	native setWebClipDisabled : io (native, bool) -> void = RenderSupport.setWebClipDisabled;
	native setWebClipNoScroll : io (native) -> void = RenderSupport.setWebClipNoScroll;
	native setWebClipPassEvents : io (native) -> void = RenderSupport.setWebClipPassEvents;
	native webClipHostCall : io (native, string, [string]) -> string = RenderSupport.webClipHostCall;
	// The code to run and the callback that receives the result. Only works if the clip is attached to a window
	native webClipEvalJS : io (native, string, (string) -> void) -> void = RenderSupport.webClipEvalJS;
	native setWebClipZoomable : io (native, bool) -> void = RenderSupport.setWebClipZoomable;
	native setWebClipDomains : io (native, [string]) -> void = RenderSupport.setWebClipDomains;

	// JS only
	native makeHTMLStage : io (width : double, height : double) -> native = RenderSupport.makeHTMLStage;
	native assignClip : io (stage : native, className : string, clip : native) -> void = RenderSupport.assignClip;
	native createElement : io (tagName : string) -> native = RenderSupport.createElement;
	native createTextNode : io (text : string) -> native = RenderSupport.createTextNode;
	native changeNodeValue : io (textNode : native, text : string) -> void = RenderSupport.changeNodeValue;
	native getElementById : io (selector : string) -> native = RenderSupport.getElementById;
	native getElementChildren : io (element : native) -> [native] = RenderSupport.getElementChildren;
	native getElementNextSibling : io (element : native) -> native = RenderSupport.getElementNextSibling;
	native isElementNull : io (element : native) -> bool = RenderSupport.isElementNull;

	// Set html element attribute
	// If "safe" parameter is true calls sanitize from DOMPurify library before applying the attribute
	// DOMPurify sanitizes HTML and prevents XSS attacks, so in most cases "safe" parameter should be true
	native setAttribute : io (element : native, name : string, value : string, safe : bool) -> void = RenderSupport.setAttribute;
	native removeAttribute : io (element : native, name : string) -> void = RenderSupport.removeAttribute;
	native reloadPage : io (forced : bool) -> void = RenderSupport.reloadPage;

	native appendChild : io (element : native, child : native) -> void = RenderSupport.appendChild;
	native insertBefore : io (element : native, child : native, reference : native) -> void = RenderSupport.insertBefore;
	native removeElementChild : io (element : native, child : native) -> void = RenderSupport.removeElementChild;

	native setClipVisible : io (native, bool) -> void = RenderSupport.setClipVisible;
	native getClipVisible : io (native) -> bool = RenderSupport.getClipVisible;
	native getClipRenderable : io (native) -> bool = RenderSupport.getClipRenderable;
	native setClipCursor : io (native, string) -> void = RenderSupport.setClipCursor;
	native setClipProtected : io (clip : native) -> void = RenderSupport.setClipProtected;
	native addGestureListener : io (
		event : string,
		cb : (int, double, double, double, double) -> bool
	) -> () -> void = RenderSupport.addGestureListener;

	native addFilters : io (native, [native]) -> void = RenderSupport.addFilters;
	native makeBevel : io (
		angle : double, distance : double, radius : double, spread : double, color1 : int, alpha1 : double,
		color2 : int, alpha2 : double, inner : bool
	) -> native = RenderSupport.makeBevel;
	native makeDropShadow : io (
		angle : double, distance : double, radius : double, spread : double, color : int,
		alpha : double, inner : bool
	) -> native = RenderSupport.makeDropShadow;
	native setUseBoxShadow: io (dropShadow : native) -> void = RenderSupport.setUseBoxShadow; 
	native makeBlur: io (radius : double, spread : double) -> native = RenderSupport.makeBlur;
	native makeBackdropBlur: io (spread : double) -> native = RenderSupport.makeBackdropBlur;
	native makeGlow: io (radius : double, spread : double, color : int, alpha : double, inner : bool) -> native = RenderSupport.makeGlow;
	native makeShader: io (vertex : [string], fragment : [string], uniform : [[string]]) -> native = RenderSupport.makeShader;
	native setScrollRect : io (clip : native, left : double, top : double, width : double, height : double) -> void = RenderSupport.setScrollRect;
	native setCropEnabled : io (clip : native, enabled : bool) -> void = RenderSupport.setCropEnabled;
	native setContentRect : io (clip : native, width : double, height : double) -> void = RenderSupport.setContentRect;
	native listenScrollRect : io (clip : native, cb : (dx : double, dy : double) -> void) -> () -> void = RenderSupport.listenScrollRect;
	native setAccessAttributes : io (clip : native, properties : [[string]]) -> void = RenderSupport.setAccessAttributes;
	native setClipStyle : io (clip : native, name : string, value : string) -> void = RenderSupport.setClipStyle;
	native removeAccessAttributes : io (clip : native) -> void = RenderSupport.removeAccessAttributes;
	native setAccessCallback : io (clip : native, callback : () -> void) -> void = RenderSupport.setAccessCallback;
	native setClipTagName : io (clip : native, tagName : string) -> void = RenderSupport.setClipTagName;
	native setClipClassName : io (clip : native, className : string) -> void = RenderSupport.setClipClassName;


	// click, mousedown, mouseup, rightclick, mouserightdown, mouserightup, mousemiddledown, mousemiddleup, mousemove, mouseenter, mouseleave, change, focusin, focusout
	native addEventListener : io (clip : native, event : string, cb : () -> void) -> () -> void = RenderSupport.addEventListener;
	native emitMouseEvent : io (clip : native, event : string, x : double, y : double) -> void = RenderSupport.emitMouseEvent;
	native emitKeyEvent : io (clip : native, event : string, key : string, ctrl : bool, shift : bool, alt : bool, meta : bool, keyCode : int) -> void = RenderSupport.emitKeyEvent;
	native addFileDropListener : io (
		clip : native, maxFilesCount : int, mimeTypeRegExpFilter : string,
		onDone : (files : [native]) -> void
	) -> () -> void = RenderSupport.addFileDropListener;

	native addKeyEventListener : io (
		clip : native, event : string,
		cb : (key : string, ctrl : bool, shift : bool, alt : bool, meta : bool, keyCode : int,
		preventDefault : () -> void) -> void
	) -> () -> void = RenderSupport.addKeyEventListener;

	native getStageWidth : io ()-> double = RenderSupport.getStageWidth;
	native getStageHeight : io ()-> double = RenderSupport.getStageHeight;
	native getStageWidthOf : io (rootId : string)-> double = RenderSupport.getStageWidthOf;
	native getStageHeightOf : io (rootId : string)-> double = RenderSupport.getStageHeightOf;
	native getPixelsPerCm : io () -> double = RenderSupport.getPixelsPerCm;
	native getBrowserZoom : io () -> double = RenderSupport.getBrowserZoom;
	native isDarkMode : io () -> bool = RenderSupport.isDarkMode;

	native setHitboxRadius : io (radius : double) -> void = RenderSupport.setHitboxRadius;
	native addFinegrainMouseWheelEventListener : io (
		clip : native,
		cb : (dx : double, dy : double) -> void
	) -> () -> void = RenderSupport.addFinegrainMouseWheelEventListener;

	native addExtendedEventListener : io (clip : native, event : string, cb : ([flow]) -> void) -> () -> void  = RenderSupport.addExtendedEventListener;

	native setAccessibilityEnabled : io (enabled : bool) -> void = RenderSupport.setAccessibilityEnabled;

	native setEnableFocusFrame : io (show : bool) -> void = RenderSupport.setEnableFocusFrame;

	native setNativeTabEnabled : io (enabled : bool) -> void = RenderSupport.setNativeTabEnabled;

	native addDrawFrameEventListener : io (fn : (double) -> void) -> () -> void = RenderSupport.addDrawFrameEventListener;

	native addVirtualKeyboardHeightListener : io (fn : (double) -> void) -> () -> void = RenderSupport.addVirtualKeyboardHeightListener;
	// Fires when user pastes in case application is focused.
	// The pasted data is immediately available in callback
	// with getGlobalClipboard and getGlobalClipboardFormat from runtime.flow
	native addPasteEventListener : io (callback : (files : [native]) -> void) -> () -> void = RenderSupport.addPasteEventListener;

	// JS ONLY!
	// Receives browser message data into callback
	native addMessageEventListener : io (
		callback : (message : string, origin : string) -> void
	) -> () -> void = RenderSupport.addMessageEventListener;

	native setDropCurrentFocusOnMouse : io (drop : bool) -> void = RenderSupport.setDropCurrentFocusOnMouse;

	native startProfile : io (name : string) -> void = RenderSupport.startProfile;
	native endProfile : io () -> void = RenderSupport.endProfile;

	native setiOSBackgroundColor : io (color : int) -> void = RenderSupport.setBackgroundColor;
	native setiOSStatusBarColor: io (color : int) -> void = RenderSupport.setStatusBarColor;
	native setiOSStatusBarVisible : io (visible : bool) -> void = RenderSupport.setStatusBarVisible;
	native setiOSStatusBarIconsTheme : io (light : bool) -> void = RenderSupport.setStatusBarIconsTheme;
	// Sets lang attribute of the main html tag
	// See https://www.w3schools.com/tags/att_global_lang.asp for examples of language codes
	native setApplicationLanguage : io (languageCode : string) -> void = RenderSupport.setApplicationLanguage;
	native setPinchToScaleEnabled : io (enabled : bool) -> void = RenderSupport.setPinchToScaleEnabled;

	native getSafeArea : io () -> [double] = RenderSupport.getSafeArea;

	// Controls custom browser zoom factor
	// Works only in js
	native setAccessibilityZoom : io (zoom : double) -> void = RenderSupport.setAccessibilityZoom;
	native getAccessibilityZoom : io () -> double = RenderSupport.getAccessibilityZoom;

	// Works only in js and only in browsers that support Element.animate
	// In case target doesn't support keyframe animations fallbackAnimation is called
	native addClipAnimation : io (clip : native, keyframes : [[string]], options : [[string]], onFinish : () -> void, fallbackAnimation : () -> () -> void) -> () -> void = RenderSupport.addClipAnimation;
	native getUserDefinedLetterSpacing : io () -> double = RenderSupport.getUserDefinedLetterSpacing;
	native getUserDefinedLetterSpacingPercent : io () -> double = RenderSupport.getUserDefinedLetterSpacingPercent;
	native getUserDefinedFontSize : io () -> double = RenderSupport.getUserDefinedFontSize;
	native getUserDefinedWordSpacingPercent : io () -> double = RenderSupport.getUserDefinedWordSpacingPercent;
	native monitorUserStyleChanges : io () -> () -> void = RenderSupport.monitorUserStyleChanges;

	// JS: Set print dialog page size in pixels
	// Sets page margins and paddings to 0
	// Returns disposer that reverts these page size changes
	// Better to dispose previous setPrintPageSize before calling the next one, but in theory should work fine too
	native setPrintPageSize : io (wd : double, hgt : double) -> () -> void = RenderSupport.setPrintPageSize;
	// JS: Show browser standard print dialog
	// Waits for all visible images to load or fail
	native showPrintDialog : io () -> void = RenderSupport.showPrintDialog;

	// JS HTML Renderer: Extract rendered static html from the clip
	native getClipHTML : io (clip : native) -> string = RenderSupport.getClipHTML;

	// JS: Count how much clips are children including clip itself
	// Pass getStage to get overall amount of clips created
	native countClips : io (clip : native) -> int = RenderSupport.countClips;

	// JS: Check if the root element of provided svg has viewBox attribute
	native checkIsValidSvg : io (url : string, cb : (bool) -> void) -> void = RenderSupport.checkIsValidSvg;

	// get hadUserInteracted value
	native getHadUserInteracted : io () -> bool = RenderSupport.getHadUserInteracted;
}

native getFontStylesConfigString : io () -> string = RenderSupport.getFontStylesConfigString;

getTextFieldCharXPosition(clip: native, chridx: int) -> double {
	println("getTextFieldCharXPosition is not implemented");
	0.0;
}

findTextFieldCharByPosition(clip: native, x: double, y: double) -> int {
	println("findTextFieldCharByPosition is not implemented");
	0;
}

// fallback bodies
setRendererType(rendererType : string) {
	println("TODO: implement 'setRendererType' native - a native fallback stub is used");
}
setRenderRoot(rootId : string) {
	println("TODO: implement 'setRenderRoot' native - a native fallback stub is used");
}
getRenderRoot() {
	println("TODO: implement 'getRenderRoot' native - a native fallback stub is used");
	""
}
debugLog(str : string) {
	println("TODO: implement 'debugLog' native - a native fallback stub is used");
}
makeTextfield(fontFamily : string) -> native {
	println("TODO: implement 'makeTextfield' native - a native fallback stub is used");
	flow(0);
}
getTextFieldWidth(clip : native) -> double {
	println("TODO: implement 'getTextFieldWidth' native - a native fallback stub is used");
	0.0;
}
getTextFieldHeight(clip : native) -> double {
	println("TODO: implement 'getTextFieldHeight' native - a native fallback stub is used");
	0.0;
}
setKeepTextClips(keep : bool) {
	println("TODO: implement 'setKeepTextClips' native - a native fallback stub is used");
}
getTextMetrics(text : native) -> [double] {
	println("TODO: implement 'setKeepTextClips' native - a native fallback stub is used");
	[]
}
getStage() -> native {
	println("TODO: implement 'setKeepTextClips' native - a native fallback stub is used");
	flow(0);
}
setWindowTitle(title : string) -> void {
	println("TODO: implement 'setKeepTextClips' native - a native fallback stub is used");
}
setFavIcon(url : string) -> void {
	println("TODO: implement 'setKeepTextClips' native - a native fallback stub is used");
}

getRendererType() {
	// Shouldn't we warn a user that a fallback is used?
	"webgl"
}
setClipDebugInfo(clip : native, key : string, val : flow) {
	println("TODO: implement 'setKeepTextClips' native - a native fallback stub is used");
}
getPixelsPerCm() {
	// Shouldn't we warn a user that a fallback is used?
	37.795;
}
getBrowserZoom() {
	// Shouldn't we warn a user that a fallback is used?
	1.0;
}
isDarkMode() {
	// Shouldn't we warn a user that a fallback is used?
	false;
}
addTextInputFilter(textfiled, f) {
	println("TODO: implement 'addTextInputFilter' native - a native fallback stub is used");
	nop
}
addTextInputEventFilter(textfiled, f) {
	println("TODO: implement 'addTextInputEventFilter' native - a native fallback stub is used");
	nop
}
addTextInputOnCopyEvent(textfiled, fn) {
	println("TODO: implement 'addTextInputOnCopyEvent' native - a native fallback stub is used");
	nop
}
loadPreconfiguredFonts(families, onDone) {
	println("TODO: implement 'loadPreconfiguredFonts' native - a native fallback stub is used");
}
loadFSFont(family, url) {
	println("TODO: implement 'loadFSFont' native - a native fallback stub is used");
}
setTabEnabled(c, e) {
	println("TODO: implement 'setTabEnabled' native - a native fallback stub is used");
}

getContent(x: native) -> string {
	println("TODO: implement 'getContent' native - a native fallback stub is used");
	""
}
getCursorPosition(x: native) -> int {
	println("TODO: implement 'getCursorPosition' native - a native fallback stub is used");
	0
}
getSelectionStart(x: native) -> int {
	println("TODO: implement 'getSelectionStart' native - a native fallback stub is used");
	0
}
getSelectionEnd(x: native) -> int {
	println("TODO: implement 'getSelectionEnd' native - a native fallback stub is used");
	0
}
setSelection(clip : native, start : int, end : int) -> void {
	println("TODO: implement 'setSelection' native - a native fallback stub is used");
}
getFocus(x: native) -> bool {
	println("TODO: implement 'getFocus' native - a native fallback stub is used");
	false;
}

getScrollV(x: native) -> int {
	println("TODO: implement 'getScrollV' native - a native fallback stub is used");
	0;
}
setScrollV(x: native, y: int) -> void {
	println("TODO: implement 'gesetScrollVtFocus' native - a native fallback stub is used");
}
getNumLines(x: native) -> int {
	println("TODO: implement 'getNumLines' native - a native fallback stub is used");
	0
}
setMultiline(x: native, y: bool) -> void {
	println("TODO: implement 'setMultiline' native - a native fallback stub is used");
}
setWordWrap(x: native, y: bool) -> void {
	println("TODO: implement 'setWordWrap' native - a native fallback stub is used");
}
setFocus(x: native, y: bool) -> void {
	println("TODO: implement 'setFocus' native - a native fallback stub is used");
}
setReadOnly(x: native, y: bool) -> void {
	println("TODO: implement 'setReadOnly' native - a native fallback stub is used");
}
setMaxChars(x: native, y: int) -> void {
	println("TODO: implement 'setMaxChars' native - a native fallback stub is used");
}
setCursor(x: string) -> void {
	println("TODO: implement 'setCursor' native - a native fallback stub is used");
}
getCursor() -> string {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
	""
}

makeWebClip(a: string, b: string, c: bool, d: bool, e: ([string]) -> string, f: (string) -> void, g: bool) -> native {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
	flow(0)
}
setWebClipSandBox(x: native, y: string) -> void {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
}
setWebClipDisabled(x: native, y: bool) -> void {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
}
webClipHostCall(x: native, y: string, z: [string]) -> string {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
	""
}
webClipEvalJS(x: native, y: string, z: (string) -> void) -> void {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
}
setWebClipZoomable(x: native, y: bool) -> void {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
}
setWebClipDomains(x: native, y: [string]) -> void {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
}
assignClip(stage : native, className : string, clip : native) -> void {
	println("TODO: implement 'getCursor' native - a native fallback stub is used");
}

addExtendedEventListener(c, e, cb) {
	println("TODO: implement 'addExtendedEventListener' native - a native fallback stub is used");
	nop
}
setAccessibilityEnabled(e) {
	println("TODO: implement 'setAccessibilityEnabled' native - a native fallback stub is used");
}
setEnableFocusFrame(e) {
	println("TODO: implement 'setEnableFocusFrame' native - a native fallback stub is used");
}
setNativeTabEnabled(e) {
	println("TODO: implement 'setNativeTabEnabled' native - a native fallback stub is used");
}
getStageWidth() {
	println("TODO: implement 'getStageWidth' native - a native fallback stub is used");
	0.0
}
getStageHeight() {
	println("TODO: implement 'getStageHeight' native - a native fallback stub is used");
	0.0
}
getStageWidthOf(rootId : string) { getStageWidth() }
getStageHeightOf(rootId : string) { getStageHeight() }
getStageId(stage) {
	println("TODO: implement 'getStageId' native - a native fallback stub is used");
	0
}
addMessageEventListener(fn) {
	println("TODO: implement 'addMessageEventListener' native - a native fallback stub is used");
	nop
}
addDrawFrameEventListener(fn) {
	println("TODO: implement 'addDrawFrameEventListener' native - a native fallback stub is used");
	nop
}
setTextInputStep(c, s) {
	println("TODO: implement 'setTextInputStep' native - a native fallback stub is used");
}
addPasteEventListener(cb) {
	addKeyEventListener(
		getStage(),
		"keydown",
		\key, ctrl, shift, alt, meta, keyCode, preventDefault -> {
			if (ctrl && keyCode == KEY_V) cb([]);
		}
	)
}

getFontStylesConfig() -> Json {
	if (js) parseJson(getFontStylesConfigString()) else getJsonObjectField(parseJson("#include resources/fontconfig.json"), "styles");
}

getTextFieldMaxWidth(tf : native) -> double {
	setWordWrap(tf, false);
	wd = getTextFieldWidth(tf);
	setWordWrap(tf, true);
	wd;
}
addTextInputKeyEventFilter(
	clip : native, event : string, cb : (key : string, ctrl : bool, shift : bool,
	alt : bool, meta : bool, keyCode : int
) -> bool) {
	nop;
}
addFileDropListener(
	clip : native, maxFilesCount : int, mimeTypeRegExpFilter : string,
	onDone : (files : [native]) -> void
) -> () -> void {
	nop;
}
setDropCurrentFocusOnMouse(d) {
	println("TODO: implement 'setDropCurrentFocusOnMouse' native - a native fallback stub is used");
}
setTextFieldInterlineSpacing(clip, spacing) {
	println("TODO: implement 'setTextFieldInterlineSpacing' native - a native fallback stub is used");
}
setTextFieldCropWords(clip, crop) {
	println("TODO: implement 'setTextFieldCropWords' native - a native fallback stub is used");
}
setTextFieldCursorColor(clip, color, opacity) {
	println("TODO: implement 'setTextFieldCursorColor' native - a native fallback stub is used");
}
setTextFieldCursorWidth(clip, width) {
	println("TODO: implement 'setTextFieldCursorWidth' native - a native fallback stub is used");
}
setPreventContextMenu(textfield, preventContextMenu) {
	println("TODO: implement 'setPreventContextMenu' native - a native fallback stub is used");
};
setVideoTimeRange(clip, start, end) {
	println("TODO: implement 'setVideoTimeRange' native - a native fallback stub is used");
}

getGraphics(clip : native) -> native {
	println("TODO: implement 'getGraphics' native - a native fallback stub is used");
	flow(0);
}
setLineStyle(graphics : native, width : double, color : int, opacity: double) -> void {
	println("TODO: implement 'setLineStyle' native - a native fallback stub is used");
}
setLineGradientStroke(graphics : native, colors : [int], alphas: [double], offsets: [double], matrix : native) -> void {
	println("TODO: implement 'setLineGradientStroke' native - a native fallback stub is used");
}
makeMatrix(width : double, height : double, rotation : double, xOffset : double, yOffset : double) -> native {
	println("TODO: implement 'makeMatrix' native - a native fallback stub is used");
	flow(0);
}
moveTo(graphics : native, x : double, y : double) -> void {
	println("TODO: implement 'moveTo' native - a native fallback stub is used");
}
lineTo(graphics : native, x : double, y : double) -> void {
	println("TODO: implement 'lineTo' native - a native fallback stub is used");
}

setVideoIsAudio(clip) {
	println("TODO: implement 'setVideoIsAudio' native - a native fallback stub is used");
}
setClipStyle(clip, name, value) {
	println("TODO: implement 'setClipStyle' native - a native fallback stub is used");
}
removeAccessAttributes(clip) {
	println("TODO: implement 'removeAccessAttributes' native - a native fallback stub is used");
}
setAccessCallback(clip, cb) {
	println("TODO: implement 'setAccessCallback' native - a native fallback stub is used");
}
setClipTagName(clip, tagName) {
	println("TODO: implement 'setClipTagName' native - a native fallback stub is used");
}
setClipClassName(clip, className) {
	println("TODO: implement 'setClipClassName' native - a native fallback stub is used");
}
addEventListener(clip, event, cb) {
	println("TODO: implement 'addEventListener' native - a native fallback stub is used");
	nop;
}
emitMouseEvent(clip, event, x, y) {
	println("TODO: implement 'emitMouseEvent' native - a native fallback stub is used");
}
getSnapshot() {
	println("TODO: implement 'getSnapshot' native - a native fallback stub is used");
	""
}
setClipVisible(x: native, y: bool) -> void {
	println("TODO: implement 'setClipVisible' native - a native fallback stub is used");
}
getClipVisible(x: native) -> bool {
	println("TODO: implement 'getClipVisible' native - a native fallback stub is used");
	false;
}
getClipRenderable(clip) {
	getClipVisible(clip);
}
setClipCursor(clip, c) {
	println("TODO: implement 'setClipCursor' native - a native fallback stub is used");
}
setClipProtected(clip) {
	println("TODO: implement 'setClipProtected' native - a native fallback stub is used");
};

drawRect(graphics : native, x : double, y : double, width : double, height : double) -> void {
	println("TODO: implement 'drawRect' native - a native fallback stub is used");
}
drawRoundedRect(graphics : native, x : double, y : double, width : double, height : double, radius : double) -> void {
	println("TODO: implement 'drawRoundedRect' native - a native fallback stub is used");
}
drawEllipse(graphics : native, x : double, y : double, width : double, height : double) -> void {
	println("TODO: implement 'drawEllipse' native - a native fallback stub is used");
}
drawCircle(graphics : native, x : double, y : double, radius : double) -> void {
	println("TODO: implement 'drawCircle' native - a native fallback stub is used");
}

setTextInput(x: native) -> void {
	println("TODO: implement 'setTextInput' native - a native fallback stub is used");
}
setTextInputType(x: native, y: string) -> void {
	println("TODO: implement 'setTextInputType' native - a native fallback stub is used");
}
setTabIndex(x: native, y: int) -> void {
	println("TODO: implement 'setTabIndex' native - a native fallback stub is used");
}

setClipWidth(clip : native, width : double) { setClipScaleX(clip, width / 100.0); }
setClipHeight(clip : native, height : double) { setClipScaleY(clip, height / 100.0); }
setClipOrigin(clip : native, x : double, y : double) {
	println("TODO: implement 'setClipOrigin' native - a native fallback stub is used");
}

setTextAndStyle(
	textfield : native, text : string, fontfamily : string, fontsize : double,
	fontweight : int, fontslope : string,
	fillcolour : int, fillopacity : double, letterspacing : double,
	backgroundcolour : int, backgroundopacity : double
) -> void {
	println("TODO: implement 'setTextAndStyle' native - a native fallback stub is used");
}
makePicture(
	url : string, cache : bool, metricsFn : (width : double, height : double) -> void,
	errorFn : (string) -> void, onlyDownload : bool, altText : string, headers : [[string]]
) -> native {
	println("TODO: implement 'makePicture' native - a native fallback stub is used");
	flow(0);
}
makeVideo(
	metricsFn : (width : double, height : double) -> void, playFn : (playing : bool) -> void,
	durationFn : (length : double) -> void, positionFn : (position : double) -> void
) -> native {
	println("TODO: implement 'makeVideo' native - a native fallback stub is used");
	flow(0);
}
playVideo(clip : native, filename : string, startPaused : bool, headers : [[string]]) -> void {
	println("TODO: implement 'playVideo' native - a native fallback stub is used");
}
playVideoFromMediaStream(clip : native, mediaStream : native, startPaused : bool) -> void {
	println("TODO: implement 'playVideoFromMediaStream' native - a native fallback stub is used");
}
setVideoLooping(clip: native, looping: bool) -> void {
	println("TODO: implement 'setVideoLooping' native - a native fallback stub is used");
}
setVideoSubtitle(
	clip: native, text : string, fontfamily : string, fontsize : double,
	fontweight : int, fontslope : string, fillcolour : int,
	fillopacity : double, letterspacing : double, backgroundcolour : int,
	backgroundopacity : double, alignBottom : bool, bottomBorder : double,
	scaleMode : bool, scaleModeMin : double, scaleModeMax : double, escapeHTML : bool
) -> void {
	println("TODO: implement 'setVideoSubtitle' native - a native fallback stub is used");
}
setVideoControls(clip: native, ctl: [PlayerControl]) -> void {
	println("TODO: implement 'setVideoControls' native - a native fallback stub is used");
}
setVideoVolume(clip: native, volume: double) -> void {
	println("TODO: implement 'setVideoVolume' native - a native fallback stub is used");
}
getVideoPosition(clip: native) -> double {
	println("TODO: implement 'getVideoPosition' native - a native fallback stub is used");
	0.0
}
getVideoCurrentFrame(clip: native) -> string {
	println("TODO: implement 'getVideoCurrentFrame' native - a native fallback stub is used");
	""
}
setVideoPlaybackRate(clip: native, rate: double) -> void {
	println("TODO: implement 'setVideoPlaybackRate' native - a native fallback stub is used");
}
seekVideo(clip : native, frame : double) -> void {
	println("TODO: implement 'seekVideo' native - a native fallback stub is used");
}
pauseVideo(clip : native) -> void {
	println("TODO: implement 'pauseVideo' native - a native fallback stub is used");
}
resumeVideo(clip : native) -> void {
	println("TODO: implement 'resumeVideo' native - a native fallback stub is used");
}
addVideoSource(clip : native, src : string, type : string, headers : [[string]]) -> void {
	println("TODO: implement 'addVideoSource' native - a native fallback stub is used");
}
setVideoExternalSubtitle(clip : native, kind : string, src : string) -> () -> void {
	println("TODO: implement 'setVideoExternalSubtitle' native - a native fallback stub is used");
	nop
}

startProfile(name : string) -> void {
	println("TODO: implement 'startProfile' native - a native fallback stub is used");
}
endProfile() -> void {
	println("TODO: implement 'endProfile' native - a native fallback stub is used");
}

setTextInputAutoCompleteType(clip : native, type : string) -> void {
	println("TODO: implement 'setTextInputAutoCompleteType' native - a native fallback stub is used");
}
setWebClipNoScroll(clip : native) -> void {
	println("TODO: implement 'setWebClipNoScroll' native - a native fallback stub is used");
}
setWebClipPassEvents(clip : native) -> void {
	println("TODO: implement 'setWebClipPassEvents' native - a native fallback stub is used");
}

setiOSBackgroundColor(color : int) {
	println("TODO: implement 'setiOSBackgroundColor' native - a native fallback stub is used");
}
setiOSStatusBarColor(color : int) {
	println("TODO: implement 'setiOSStatusBarColor' native - a native fallback stub is used");
}
setiOSStatusBarVisible(visible : bool) {
	println("TODO: implement 'setiOSStatusBarVisible' native - a native fallback stub is used");
}
setiOSStatusBarIconsTheme(light : bool) {
	println("TODO: implement 'setiOSStatusBarIconsTheme' native - a native fallback stub is used");
}
setTextEllipsis(clip, lines, cb) {
	println("TODO: implement 'setTextEllipsis' native - a native fallback stub is used");
}
setTextSkipOrderCheck(clip, skip) {
	println("TODO: implement 'setTextSkipOrderCheck' native - a native fallback stub is used");
}

makeHTMLStage(width : double, height : double) { makeClip() }
createElement(tagName : string) { makeClip() }
createTextNode(text : string) { makeClip() }
changeNodeValue(textNode : native, text : string) {
	println("TODO: implement 'changeNodeValue' native - a native fallback stub is used");
}
getElementById(selector : string) -> native { makeClip() }
getElementChildren(element : native) -> [native] {
	println("TODO: implement 'getElementChildren' native - a native fallback stub is used");
	[]
}
getElementNextSibling(element : native) -> native { makeClip() }
isElementNull(element : native) -> bool {
	println("TODO: implement 'isElementNull' native - a native fallback stub is used");
	true;
}

setAttribute(element : native, name : string, value : string, safe : bool) {
	println("TODO: implement 'setAttribute' native - a native fallback stub is used");
}
removeAttribute(element : native, name : string) {
	println("TODO: implement 'removeAttribute' native - a native fallback stub is used");
}
reloadPage(forced : bool) {
	println("TODO: implement 'reloadPage' native - a native fallback stub is used");
}

appendChild(element : native, child : native) {
	println("TODO: implement 'appendChild' native - a native fallback stub is used");
}
insertBefore(element : native, child : native, reference : native) {
	println("TODO: implement 'insertBefore' native - a native fallback stub is used");
}
removeElementChild(element : native, child : native) {
	println("TODO: implement 'removeElementChild' native - a native fallback stub is used");
}

mainRenderClip() { currentClip() }
takeSnapshotBox(path : string, x : int, y : int, w : int, h : int) {
	println("TODO: implement 'takeSnapshotBox' native - a native fallback stub is used");
}
getSnapshotBox(x : int, y : int, w : int, h : int) {
	""
}
compareImages(image1 : string, image2 : string, cb : (json : string) -> void) -> void {
	println("TODO: implement 'compareImages' native - a native fallback stub is used");
}
getNumberOfCameras() -> int {
	println("TODO: implement 'getNumberOfCameras' native - a native fallback stub is used");
	0
}
getCameraInfo(id : int) -> string {
	println("TODO: implement 'getCameraInfo' native - a native fallback stub is used");
	""
}
setInterfaceOrientation0(orientation : string) -> void {
	println("TODO: implement 'setInterfaceOrientation0' native - a native fallback stub is used");
}
getScreenPixelColor(x : int, y : int) -> int {
	println("TODO: implement 'getScreenPixelColor' native - a native fallback stub is used");
	0
}
setGlobalZoomEnabled(enabled : bool) -> void {
	println("TODO: implement 'setGlobalZoomEnabled' native - a native fallback stub is used");
}
bitmapDraw(bitmap: native, clip : native, w : int, h : int) -> void {
	println("TODO: implement 'bitmapDraw' native - a native fallback stub is used");
}
makeCamera(
	uri : string, camID : int, camWidth : int, camHeight : int, camFps : double, vidWidth : int, vidHeight : int, recordMode : int,
	cbOnOk : (stream : native) -> void, cbOnFailed : (msg : string) -> void
) -> [native] {
	println("TODO: implement 'makeCamera' native - a native fallback stub is used");
	[]
}
startRecord(clip : native, filename : string, mode : string) -> void {
	println("TODO: implement 'startRecord' native - a native fallback stub is used");
}
stopRecord(clip : native) -> void {
	println("TODO: implement 'stopRecord' native - a native fallback stub is used");
}
makeClip() -> native {
	println("TODO: implement 'makeClip' native - a native fallback stub is used");
	flow(0)
}

getClipSnapshot(clip : native, cb : (string) -> void) { cb(""); }

setDoNotInvalidateStage(element : native, invalidate : bool) -> void {
	println("TODO: implement 'setDoNotInvalidateStage' native - a native fallback stub is used");
}
clearGraphics(gr) {
	println("TODO: implement 'clearGraphics' native - a native fallback stub is used");
}
useSvg(gr) {
	println("TODO: implement 'useSvg' native - a native fallback stub is used");
}
makeCanvasClip() { makeClip() }

getClipWidth(clip) {
	println("TODO: implement 'getClipWidth' native - a native fallback stub is used");
	0.0
}
getClipHeight(clip) {
	println("TODO: implement 'getClipHeight' native - a native fallback stub is used");
	0.0
}

setLineHeightPercent(textfield, lineHeightPercent) {
	println("TODO: implement 'setLineHeightPercent' native - a native fallback stub is used");
}
setTextNeedBaseline(textfield, needBaseline) {
	println("TODO: implement 'setTextNeedBaseline' native - a native fallback stub is used");
}
setTextPreventCheckTextNodeWidth(textfield, prevent) {
	println("TODO: implement 'setTextPreventCheckTextNodeWidth' native - a native fallback stub is used");
}
setEscapeHTML(textfield, escape) {
	println("TODO: implement 'setEscapeHTML' native - a native fallback stub is used");
}
setTextWordSpacing(textfield, spacing) {
	println("TODO: implement 'setTextWordSpacing' native - a native fallback stub is used");
}
setContentRect(clip, width, height) {
	println("TODO: implement 'setContentRect' native - a native fallback stub is used");
}
listenScrollRect(clip, cb) {
	println("TODO: implement 'listenScrollRect' native - a native fallback stub is used");
	nop;
}
setApplicationLanguage(lang) {
	println("TODO: implement 'setApplicationLanguage' native - a native fallback stub is used");
}
setPinchToScaleEnabled(enabled) {
	println("TODO: implement 'setPinchToScaleEnabled' native - a native fallback stub is used");
}
setAutofillBackgroundColor(textfield, color) {
	println("TODO: implement 'setAutofillBackgroundColor' native - a native fallback stub is used");
}

getSafeArea() {
	[0.0, 0.0, 0.0, 0.0];
}

setAccessibilityZoom(zoom) {
	println("TODO: implement 'setAccessibilityZoom' native - a native fallback stub is used");
}
getAccessibilityZoom() { 1.0; }

setPictureUseCrossOrigin(picture : native, useCrossOrigin : bool) -> void {
	println("TODO: implement 'setPictureUseCrossOrigin' native - a native fallback stub is used");
}
setPictureReferrerPolicy(picture : native, referrerpolicy : string) -> void {
	println("TODO: implement 'setPictureReferrerPolicy' native - a native fallback stub is used");
}
setCropEnabled(clip : native, enabled : bool) -> void {
	println("TODO: implement 'setCropEnabled' native - a native fallback stub is used");
}
setUseBoxShadow(dropShadow : native) -> void {
	println("TODO: implement 'setUseBoxShadow' native - a native fallback stub is used");
}

addClipAnimation(clip, keyframes, options, onFinish, fallbackAnimation) { fallbackAnimation(); }
getUserDefinedLetterSpacing() {
	println("TODO: implement 'getUserDefinedLetterSpacing' native - a native fallback stub is used");
	0.0;
}
getUserDefinedLetterSpacingPercent() {
	println("TODO: implement 'getUserDefinedLetterSpacingPercent' native - a native fallback stub is used");
	0.0;
}
getUserDefinedFontSize() { 16.0; }
getUserDefinedWordSpacingPercent() { 0.0; }
monitorUserStyleChanges() { nop; }
setPrintPageSize(wd, hgt) { nop; }
getClipHTML(clip) { ""; }
showPrintDialog() {
	println("TODO: implement 'showPrintDialog' native - a native fallback stub is used");
}
countClips(clip) { 0; }
checkIsValidSvg(url, cb) { cb(true); }

getHadUserInteracted() {
	println("TODO: implement 'getHadUserInteracted' native - a native fallback stub is used");
	true
}

addChild(parent : native, child : native) -> void {
	println("TODO: implement 'addChild' native - a native fallback stub is used");
}

addChildAt(parent : native, child : native, id : int) -> void {
	println("TODO: implement 'addChildAt' native - a native fallback stub is used");
}
removeChild(parent : native, child : native) -> void {
	println("TODO: implement 'removeChild' native - a native fallback stub is used");
}
removeChildren(parent : native) -> void {
	println("TODO: implement 'removeChildren' native - a native fallback stub is used");
}
setClipCallstack(clip : native, callstack : native) -> void {
	println("TODO: implement 'setClipCallstack' native - a native fallback stub is used");
}
setClipX(clip : native, x : double) -> void {
	println("TODO: implement 'setClipX' native - a native fallback stub is used");
}
setClipY(clip : native, y : double) -> void {
	println("TODO: implement 'setClipY' native - a native fallback stub is used");
}
setClipScaleX(clip : native, x : double) -> void {
	println("TODO: implement 'setClipScaleX' native - a native fallback stub is used");
}
setClipScaleY(clip : native, y : double) -> void {
	println("TODO: implement 'setClipScaleY' native - a native fallback stub is used");
}
setClipRotation(clip : native, x : double) -> void {
	println("TODO: implement 'setClipRotation' native - a native fallback stub is used");
}
setClipAlpha(clip : native, y : double) -> void {
	println("TODO: implement 'setClipAlpha' native - a native fallback stub is used");
}
setClipMask(clip : native, mask : native) -> void {
	println("TODO: implement 'setClipMask' native - a native fallback stub is used");
}
setClipViewBounds(clip : native, minX : double, minY : double, maxX : double, maxY : double) -> void {
	println("TODO: implement 'setClipViewBounds' native - a native fallback stub is used");
}
setClipResolution(clip : native, resolution : double) -> void {
	println("TODO: implement 'setClipResolution' native - a native fallback stub is used");
}
setTextDirection(textfield : native, dir : string) -> void {
	println("TODO: implement 'setTextDirection' native - a native fallback stub is used");
}
setAdvancedText(textfield : native, sharpness : int, antiAliasType : int, gridFitType : int) -> void {
	println("TODO: implement 'setAdvancedText' native - a native fallback stub is used");
}
setTextFieldWidth(clip : native, width : double) -> void {
	println("TODO: implement 'setTextFieldWidth' native - a native fallback stub is used");
}
setTextFieldHeight(clip : native, width : double) -> void {
	println("TODO: implement 'setTextFieldHeight' native - a native fallback stub is used");
}
setAutoAlign(clip : native, autoalign : string) -> void {
	println("TODO: implement 'setAutoAlign' native - a native fallback stub is used");
}

addFilters(n: native, ns: [native]) -> void {
	println("TODO: implement 'addFilters' native - a native fallback stub is used");
}

makeBevel(
	angle : double, distance : double, radius : double, spread : double, color1 : int, alpha1 : double,
	color2 : int, alpha2 : double, inner : bool
) -> native {
	println("TODO: implement 'makeBevel' native - a native fallback stub is used");
	flow(0)
}
makeDropShadow(
	angle : double, distance : double, radius : double, spread : double, color : int,
	alpha : double, inner : bool
) -> native {
	println("TODO: implement 'makeDropShadow' native - a native fallback stub is used");
	flow(0)
}
makeBlur(radius : double, spread : double) -> native {
	println("TODO: implement 'makeBlur' native - a native fallback stub is used");
	flow(0)
}
makeBackdropBlur(spread : double) -> native {
	println("TODO: implement 'makeBackdropBlur' native - a native fallback stub is used");
	flow(0)
}
makeGlow(radius : double, spread : double, color : int, alpha : double, inner : bool) -> native {
	println("TODO: implement 'makeGlow' native - a native fallback stub is used");
	flow(0)
}
makeShader(vertex : [string], fragment : [string], uniform : [[string]]) -> native {
	println("TODO: implement 'makeShader' native - a native fallback stub is used");
	flow(0)
}
setScrollRect(clip : native, left : double, top : double, width : double, height : double) -> void {
	println("TODO: implement 'setScrollRect' native - a native fallback stub is used");
}
setAccessAttributes(clip : native, properties : [[string]]) -> void {
	println("TODO: implement 'setAccessAttributes' native - a native fallback stub is used");
}

setHitboxRadius(radius : double) -> void {
	println("TODO: implement 'setHitboxRadius' native - a native fallback stub is used");
}

addFinegrainMouseWheelEventListener(clip : native, cb : (dx : double, dy : double) -> void) -> () -> void {
	println("TODO: implement 'addFinegrainMouseWheelEventListener' native - a native fallback stub is used");
	nop
}

addGestureListener(event : string, cb : (int, double, double, double, double) -> bool) -> () -> void {
	println("TODO: implement 'addGestureListener' native - a native fallback stub is used");
	nop
}

addKeyEventListener(clip : native, event : string, cb) -> () -> void {
	println("TODO: implement 'addKeyEventListener' native - a native fallback stub is used");
	nop
}

addStreamStatusListener(clip : native, cb : (code : string) -> void) -> () -> void {
	println("TODO: implement 'addStreamStatusListener' native - a native fallback stub is used");
	nop
}

beginFill(graphics : native, color : int, opacity: double) -> void {
	println("TODO: implement 'beginFill' native - a native fallback stub is used");
}

beginGradientFill(graphics : native, colors : [int], alphas: [double], offsets: [double], matrix : native, type: string) -> void {
	println("TODO: implement 'beginGradientFill' native - a native fallback stub is used");
}

closeVideo(clip : native) -> void {
	println("TODO: implement 'closeVideo' native - a native fallback stub is used");
}

currentClip() -> native {
	println("TODO: implement 'currentClip' native - a native fallback stub is used");
	flow(0);
}

curveTo(graphics : native, x : double, y : double, cx : double, cy : double) -> void {
	println("TODO: implement 'curveTo' native - a native fallback stub is used");
}

enableResize() -> void {
	println("TODO: implement 'enableResize' native - a native fallback stub is used");
}

endFill(graphics : native) -> void {
	println("TODO: implement 'endFill' native - a native fallback stub is used");
}

getBottomScrollV(n: native) -> int {
	println("TODO: implement 'getBottomScrollV' native - a native fallback stub is used");
	0
}
