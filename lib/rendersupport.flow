import form/videoform;

export {

	// PixiJS target wants to know font family on field creation.
	// Use getFontFamily() from renderForm.flow to extract family from CharacterStyle.
	// Note that it doesn't set text field font, that is setTextAndStyle call is still required.
	native makeTextfield : (fontFamily : string) -> native = RenderSupport.makeTextField;

	native getTextFieldWidth : io (clip : native) -> double = RenderSupport.getTextFieldWidth;
	native getTextFieldHeight : io (clip : native) -> double = RenderSupport.getTextFieldHeight;
	// The baseline is metrics[0]
	native getTextMetrics : io (text : native) -> [double] = RenderSupport.getTextMetrics;
	native getTextFieldCharXPosition : io (clip: native, chridx: int) -> double = RenderSupport.getTextFieldCharXPosition;
	native findTextFieldCharByPosition : io (clip: native, x: double, y: double) -> int = RenderSupport.findTextFieldCharByPosition;
	native getStage : io () -> native = RenderSupport.getStage;
	native setWindowTitle : (title : string) -> void = RenderSupport.setWindowTitle;
	native setFavIcon : (url : string) -> void = RenderSupport.setFavIcon;
	native takeWindowSnapshot : (path : string) -> void = RenderSupport.takeSnapshot;
	native getSnapshot : () -> string = RenderSupport.getSnapshot;

	// Camera API
	native getNumberOfCameras : () -> int = RenderSupport.getNumberOfCameras;
	native getCameraInfo : (id : int) -> string = RenderSupport.getCameraInfo;

	// Set interface orientation for mobile device. orientation = landscape, portrait, none
	native setInterfaceOrientation0 : (orientation : string) -> void = RenderSupport.setInterfaceOrientation;

	// Read the color of this screen pixel in our window. Very slow!
	native getScreenPixelColor : io (x : int, y : int) -> int = RenderSupport.getScreenPixelColor;

	native setGlobalZoomEnabled : (enabled : bool) -> void = RenderSupport.setGlobalZoomEnabled;

	native bitmapDraw : io (bitmap: native, clip : native, w : int, h : int) -> void = RenderSupport.bitmapDraw;
	native makeCamera : io (uri : string, camID : int, camWidth : int, camHeight : int, camFps : double, vidWidth : int, vidHeight : int, recordMode : int,
							cbOnOk : (stream : native) -> void, cbOnFailed : (msg : string) -> void) -> [native] = RenderSupport.makeCamera;
	native startRecord : io (clip : native, filename : string, mode : string) -> void = RenderSupport.startRecord;
	native stopRecord : io (clip : native) -> void = RenderSupport.stopRecord;
	native enableResize : io () -> void = RenderSupport.enableResize;
	native currentClip : io () -> native = RenderSupport.currentClip;
	native makeClip : io () -> native = RenderSupport.makeClip;
	native makeGraphics : io () -> native = RenderSupport.makeGraphics; // works only in js
	native addChild : io (parent : native, child : native) -> void = RenderSupport.addChild;
	native addChildAt : io (parent : native, child : native, id : int) -> void = RenderSupport.addChildAt;
	native removeChild : io (parent : native, child : native) -> void = RenderSupport.removeChild;
	native removeChildren : io (parent : native) -> void = RenderSupport.removeChildren;
	native setClipCallstack : io (clip : native, callstack : native) -> void = RenderSupport.setClipCallstack;
	// when debugging, stores the key/value pair in an internal map for the clip tree browser to use
	native setClipDebugInfo : io (clip : native, key : string, val : flow) -> void = RenderSupport.setClipDebugInfo;
	native setClipX : io (clip : native, x : double) -> void = RenderSupport.setClipX;
	native setClipY : io (clip : native, y : double) -> void = RenderSupport.setClipY;
	native setClipScaleX : io (clip : native, x : double) -> void = RenderSupport.setClipScaleX;
	native setClipScaleY : io (clip : native, y : double) -> void = RenderSupport.setClipScaleY;
	native setClipRotation : io (clip : native, x : double) -> void = RenderSupport.setClipRotation;
	native setClipAlpha : io (clip : native, y : double) -> void = RenderSupport.setClipAlpha;
	native setClipMask : io (clip : native, mask : native) -> void = RenderSupport.setClipMask;
	native setClipViewBounds : io (clip : native, minX : double, minY : double, maxX : double, maxY : double) -> void = RenderSupport.setClipViewBounds;
	native setClipWidth : io (clip : native, width : double) -> void = RenderSupport.setClipWidth;
	native setClipHeight : io (clip : native, height : double) -> void = RenderSupport.setClipHeight;
	native setClipResolution : io (clip : native, resolution : double) -> void = RenderSupport.setClipResolution;
	native setTextAndStyle : io (
		textfield : native, text : string, fontfamily : string, fontsize : double,
		fontweight : int, fontslope : string,
		fillcolour : int, fillopacity : double, letterspacing : double,
		backgroundcolour : int, backgroundopacity : double
	) -> void = RenderSupport.setTextAndStyle;
	native setTextDirection : io (
		textfield : native, dir : string
	) -> void = RenderSupport.setTextDirection;
	native setAdvancedText : io (textfield : native, sharpness : int, antiAliasType : int, gridFitType : int) -> void = RenderSupport.setAdvancedText;
	native setTextFieldWidth : io (clip : native, width : double) -> void = RenderSupport.setTextFieldWidth;
	native setTextFieldHeight : io (clip : native, width : double) -> void = RenderSupport.setTextFieldHeight;
	native setTextFieldInterlineSpacing : io (clip : native, spacing : double) -> void = RenderSupport.setTextFieldInterlineSpacing;
	native setTextFieldCropWords : io (clip : native, crop : bool) -> void = RenderSupport.setTextFieldCropWords;
	native setTextFieldCursorColor : io (clip : native, color : int, opacity : double) -> void = RenderSupport.setTextFieldCursorColor;
	native setTextFieldCursorWidth : io (clip : native, width : double) -> void = RenderSupport.setTextFieldCursorWidth;
	native setTextEllipsis : io (clip : native, lines : int, cb : (bool) -> void) -> void = RenderSupport.setTextEllipsis;
	native setAutoAlign : io (clip : native, autoalign : string) -> void = RenderSupport.setAutoAlign;
	native makePicture : io (url : string, cache : bool, metricsFn : (width : double, height : double) -> void,
							errorFn : (string) -> void, onlyDownload : bool) -> native = RenderSupport.makePicture;
	native makeVideo : io (metricsFn : (width : double, height : double) -> void, playFn : (playing : bool) -> void,
							durationFn : (length : double) -> void, positionFn : (position : double) -> void) -> native = RenderSupport.makeVideo;
	native playVideo : io (clip : native, filename : string, startPaused : bool) -> void = RenderSupport.playVideo;
	native playVideoFromMediaStream : io (clip : native, mediaStream : native, startPaused : bool) -> void = RenderSupport.playVideoFromMediaStream;
	native setVideoLooping: io (clip: native, looping: bool) -> void = RenderSupport.setVideoLooping;
	native setVideoSubtitle: io (clip: native, text : string, fontfamily : string, fontsize : double, fontweight : int, fontslope : string, fillcolour : int,
		fillopacity : double,letterspacing : double, backgroundcolour : int, backgroundopacity : double) -> void = RenderSupport.setVideoSubtitle;
	native setVideoControls: io (clip: native, ctl: [PlayerControl]) -> void = RenderSupport.setVideoControls;
	native setVideoVolume: io (clip: native, volume: double) -> void = RenderSupport.setVideoVolume;
	native setVideoTimeRange: io (clip: native, start: double, end: double) -> void = RenderSupport.setVideoTimeRange;
	native getVideoPosition: io (clip: native) -> double = RenderSupport.getVideoPosition;
	native getVideoCurrentFrame: io (clip: native) -> string = RenderSupport.getVideoCurrentFrame;
	native setVideoPlaybackRate: io (clip: native, rate: double) -> void = RenderSupport.setVideoPlaybackRate;
	native seekVideo : io (clip : native, frame : double) -> void = RenderSupport.seekVideo;
	native pauseVideo : io (clip : native) -> void = RenderSupport.pauseVideo;
	native resumeVideo : io (clip : native) -> void = RenderSupport.resumeVideo;
	native closeVideo : io (clip : native) -> void = RenderSupport.closeVideo;
	native addStreamStatusListener : io (clip : native, cb : (code : string) -> void) -> (() -> void) = RenderSupport.addStreamStatusListener;
	native addVideoSource : io (clip : native, src : string, type : string) -> void = RenderSupport.addVideoSource;
	native getGraphics : io (clip : native) -> native = RenderSupport.getGraphics;
	native clearGraphics : io (clip : native) -> void = RenderSupport.clearGraphics;
	native setLineStyle : io (graphics : native, width : double, color : int, opacity: double) -> void = RenderSupport.setLineStyle;
	native beginFill : io (graphics : native, color : int, opacity: double) -> void = RenderSupport.beginFill;
	native beginGradientFill : io (graphics : native, colors : [int], alphas: [double], offsets: [double], matrix : native, type: string) -> void = RenderSupport.beginGradientFill;
	native setLineGradientStroke : io (graphics : native, colors : [int], alphas: [double], offsets: [double], matrix : native) -> void = RenderSupport.setLineGradientStroke;
	native makeMatrix : io (width : double, height : double, rotation : double, xOffset : double, yOffset : double) -> native = RenderSupport.makeMatrix;
	native moveTo : io (graphics : native, x : double, y : double) -> void = RenderSupport.moveTo;
	native lineTo : io (graphics : native, x : double, y : double) -> void = RenderSupport.lineTo;
	native curveTo : io (graphics : native, x : double, y : double, cx : double, cy : double) -> void = RenderSupport.curveTo;
	native endFill : io (graphics : native) -> void = RenderSupport.endFill;
	native drawRect : io (graphics : native, x : double, y : double, width : double, height : double) -> void = RenderSupport.drawRect;
	native drawRoundedRect : io (graphics : native, x : double, y : double, width : double, height : double, radius : double) -> void = RenderSupport.drawRoundedRect;
	native drawEllipse : io (graphics : native, x : double, y : double, width : double, height : double) -> void = RenderSupport.drawEllipse;
	native drawCircle : io (graphics : native, x : double, y : double, radius : double) -> void = RenderSupport.drawCircle;
	native setTextInput : io (native) -> void = RenderSupport.setTextInput;
	native setTextInputType : io (native, string) -> void = RenderSupport.setTextInputType;
	native setTextInputAutoCompleteType : io (native, string) -> void = RenderSupport.setTextInputAutoCompleteType;
	native setTextInputStep : io (native, double) -> void = RenderSupport.setTextInputStep;
	native addTextInputFilter : io (textfiled : native, f : (string) -> string) -> (() -> void) = RenderSupport.addTextInputFilter;
	native addTextInputKeyEventFilter : io (clip : native, event : string, cb : (key : string, ctrl : bool, shift : bool,
		alt : bool, meta : bool, keyCode : int) -> bool) -> (() -> void) = RenderSupport.addTextInputKeyEventFilter;
	native setTabIndex : io (native, int) -> void = RenderSupport.setTabIndex;
	native setTabEnabled : io (native, bool) -> void = RenderSupport.setTabEnabled;
	native getContent : io (native) -> string = RenderSupport.getContent;
	native getCursorPosition : io (native) -> int = RenderSupport.getCursorPosition;
	native getSelectionStart : io (native) -> int = RenderSupport.getSelectionStart;
	native getSelectionEnd : io (native) -> int = RenderSupport.getSelectionEnd;
	native setSelection : io (native, start : int, end : int) -> void = RenderSupport.setSelection;
	native getFocus : io (native) -> bool = RenderSupport.getFocus;
	native getScrollV : io (native) -> int = RenderSupport.getScrollV;
	native setScrollV : io (native, int) -> void = RenderSupport.setScrollV;
	native getNumLines : io (native) -> int = RenderSupport.getNumLines;
	native getBottomScrollV : io (native) -> int = RenderSupport.getBottomScrollV;
	native setMultiline : io (native, bool) -> void = RenderSupport.setMultiline;
	native setWordWrap : io (native, bool) -> void = RenderSupport.setWordWrap;
	native setFocus : io (native, bool) -> void = RenderSupport.setFocus;
	native setReadOnly : io (native, bool) -> void = RenderSupport.setReadOnly;
	native setMaxChars : io (native, int) -> void = RenderSupport.setMaxChars;
	native setCursor : io (string) -> void = RenderSupport.setCursor;
	native getCursor : io () -> string = RenderSupport.getCursor;
	native makeWebClip : (string, string,  bool, bool, ([string]) -> string, (string) -> void, bool)-> native = RenderSupport.makeWebClip;
	native setWebClipSandBox : (native, string) -> void = RenderSupport.setWebClipSandBox;
	native setWebClipDisabled : (native, bool) -> void = RenderSupport.setWebClipDisabled;
	native webClipHostCall : (native, string, [string]) -> string = RenderSupport.webClipHostCall;
	native webClipEvalJS : (native, string) -> string = RenderSupport.webClipEvalJS;
	native setWebClipZoomable : (native, bool) -> void = RenderSupport.setWebClipZoomable;
	native setWebClipDomains : (native, [string]) -> void = RenderSupport.setWebClipDomains;

	native makeHTMLStage : io (width : double, height : double) -> native = RenderSupport.makeHTMLStage;
	native createElement : io (tagName : string) -> native = RenderSupport.createElement;
	native createTextNode : io (text : string) -> native = RenderSupport.createTextNode;
	native changeNodeValue : io (textNode : native, text : string) -> void = RenderSupport.changeNodeValue;

	native setAttribute : io (element : native, name : string, value : string) -> void = RenderSupport.setAttribute;
	native removeAttribute : io (element : native, name : string) -> void = RenderSupport.setAttribute;

	native appendChild : io (element : native, child : native) -> void = RenderSupport.appendChild;
	native insertBefore : io (element : native, child : native, reference : native) -> void = RenderSupport.insertBefore;
	native removeElementChild : io (element : native, child : native) -> void = RenderSupport.removeElementChild;

	native setClipVisible : (native, bool) -> void = RenderSupport.setClipVisible;
	native setClipRenderable : (native, bool) -> void = RenderSupport.setClipRenderable;
	native addGestureListener : (event : string,
					cb : (int, double, double, double, double) -> bool) -> () -> void = RenderSupport.addGestureListener;

	native addFilters : io (native, [native]) -> void = RenderSupport.addFilters;
	native makeBevel : io (angle : double, distance : double, radius : double, spread : double, color1 : int, alpha1 : double,
					color2 : int, alpha2 : double, inner : bool) -> native = RenderSupport.makeBevel;
	native makeDropShadow : io (angle : double, distance : double, radius : double, spread : double, color : int,
					alpha : double, inner : bool) -> native = RenderSupport.makeDropShadow;
	native makeBlur: io (radius : double, spread : double) -> native = RenderSupport.makeBlur;
	native makeGlow: io (radius : double, spread : double, color : int, alpha : double, inner : bool) -> native = RenderSupport.makeGlow;
	native makeShader: io (vertex : [string], fragment : [string], uniform : [[string]]) -> native = RenderSupport.makeShader;
	native setScrollRect : io (native, left : double, top : double, width : double, height : double) -> void = RenderSupport.setScrollRect;
	native setAccessAttributes : io (clip : native, properties : [[string]]) -> void = RenderSupport.setAccessAttributes;
	native removeAccessAttributes : io (clip : native) -> void = RenderSupport.removeAccessAttributes;
	native setAccessCallback : io (clip : native, callback : () -> void) -> void = RenderSupport.setAccessCallback;


	// click, mousedown, mouseup, rightclick, mouserightdown, mouserightup, mousemiddledown, mousemiddleup, mousemove, mouseenter, mouseleave, change, focusin, focusout
	native addEventListener : io (clip : native, event : string, cb : () -> void) -> (() -> void) = RenderSupport.addEventListener;
	native emitMouseEvent : io (clip : native, event : string, x : double, y : double) -> void = RenderSupport.emitMouseEvent;
	native emitKeyEvent : io (clip : native, event : string, key : string, ctrl : bool, shift : bool, alt : bool, meta : bool, keyCode : int) -> void = RenderSupport.emitKeyEvent;
	native addFileDropListener : io (clip : native, maxFilesCount : int, mimeTypeRegExpFilter : string,
				onDone : (files : [native]) -> void) -> (() -> void) = RenderSupport.addFileDropListener;

	native addKeyEventListener : io (clip : native, event : string,
			cb : (key : string, ctrl : bool, shift : bool, alt : bool, meta : bool, keyCode : int,
			preventDefault : () -> void) -> void) -> (() -> void) = RenderSupport.addKeyEventListener;

	native getStageWidth : io ()-> double = RenderSupport.getStageWidth;
	native getStageHeight : io ()-> double = RenderSupport.getStageHeight;
	native getPixelsPerCm : io () -> double = RenderSupport.getPixelsPerCm;

	native setHitboxRadius : io (radius : double) -> void = RenderSupport.setHitboxRadius;
	native addFinegrainMouseWheelEventListener : io (clip : native,
			cb : (dx : double, dy : double) -> void) -> (() -> void) = RenderSupport.addFinegrainMouseWheelEventListener;

	native addExtendedEventListener : io (clip : native, event : string, cb : ([flow]) -> void) -> (() -> void)  = RenderSupport.addExtendedEventListener;

	native setAccessibilityEnabled : io (enabled : bool) -> void = RenderSupport.setAccessibilityEnabled;

	native setEnableFocusFrame : io (show : bool) -> void = RenderSupport.setEnableFocusFrame;

	native setNativeTabEnabled : io (enabled : bool) -> void = RenderSupport.setNativeTabEnabled;

	native addDrawFrameEventListener : io (fn : (double) -> void) -> (() -> void) = RenderSupport.addDrawFrameEventListener;

	native addVirtualKeyboardHeightListener : io (fn : (double) -> void) -> (() -> void) = RenderSupport.addVirtualKeyboardHeightListener;
	// Fires when user pastes in case application is focused.
	// The pasted data is immediately available in callback
	// with getGlobalClipboard and getGlobalClipboardFormat from runtime.flow
	native addPasteEventListener : io (callback : (files : [native]) -> void) -> (() -> void) = RenderSupport.addPasteEventListener;

	// JS ONLY!
	// Receives browser message data into callback
	native addMessageEventListener : io (callback : (message : string, origin : string) -> void) -> (() -> void) = RenderSupport.addMessageEventListener;

	native setDropCurrentFocusOnDown : io (drop : bool) -> void = RenderSupport.setDropCurrentFocusOnDown;

	native startProfile : io (name : string) -> void = RenderSupport.startProfile;
	native endProfile : io () -> void = RenderSupport.endProfile;

	native setiOSBackgroundColor : io (color : int) -> void = RenderSupport.setBackgroundColor;
	native setiOSStatusBarColor: io (color : int) -> void = RenderSupport.setStatusBarColor;
	native setiOSStatusBarVisible : io (visible : bool) -> void = RenderSupport.setStatusBarVisible;
	native setiOSStatusBarIconsTheme : io (light : bool) -> void = RenderSupport.setStatusBarIconsTheme;
}

// fallback bodies
setClipDebugInfo(clip : native, key : string, val : flow) { /* nop */ }
getPixelsPerCm() { 37.795; }
addTextInputFilter(textfiled, f) { nop }
setTabEnabled(c, e) { }
addExtendedEventListener(c, e, cb) { nop }
setAccessibilityEnabled(e) { }
setEnableFocusFrame(e) { }
setNativeTabEnabled(e) { }
getStageWidth() { 0.0 }
getStageHeight() { 0.0 }
addMessageEventListener(fn) { nop }
addDrawFrameEventListener(fn) { nop }
setTextInputStep(c, s) { }
addPasteEventListener(cb) {
	addKeyEventListener(
		getStage(),
		"keydown",
		\key, ctrl, shift, alt, meta, keyCode, preventDefault -> {
			if (ctrl && keyCode == 86) cb([]);
		}
	)
}
addTextInputKeyEventFilter(clip : native, event : string, cb : (key : string, ctrl : bool, shift : bool,
	alt : bool, meta : bool, keyCode : int) -> bool) { nop }
setDropCurrentFocusOnDown(d) { }
setTextFieldInterlineSpacing(clip, spacing) { }
setTextFieldCropWords(clip, crop) { }
setTextFieldCursorColor(clip, color, opacity) { }
setTextFieldCursorWidth(clip, width) { }
setVideoTimeRange(clip, start, end) { }
addVideoSource(clip, src, type) { }
removeAccessAttributes(clip) { }
emitMouseEvent(clip, event, x, y) { }
getSnapshot() { "" }
setClipRenderable(clip, renderable) { }

drawRect(graphics : native, x : double, y : double, width : double, height : double) -> void { };
drawRoundedRect(graphics : native, x : double, y : double, width : double, height : double, radius : double) -> void { };
drawEllipse(graphics : native, x : double, y : double, width : double, height : double) -> void { };
drawCircle(graphics : native, x : double, y : double, radius : double) -> void { };

setClipWidth(clip : native, width : double) { setClipScaleX(clip, width / 100.0); };
setClipHeight(clip : native, height : double) { setClipScaleY(clip, height / 100.0); };

startProfile(name : string) -> void { };
endProfile() -> void { };

setTextInputAutoCompleteType(clip : native, type : string) -> void { };

setiOSBackgroundColor(color : int) {}
setiOSStatusBarColor(color : int) {}
setiOSStatusBarVisible(visible : bool) {}
setiOSStatusBarIconsTheme(light : bool) {}
setTextEllipsis(clip, lines, cb) {}

makeHTMLStage(width : double, height : double) { makeClip() }
createElement(tagName : string) { makeClip() }
createTextNode(text : string) { makeClip() }
changeNodeValue(textNode : native, text : string) {}

setAttribute(element : native, name : string, value : string) {}
removeAttribute(element : native, name : string) {}

appendChild(element : native, child : native) {}
insertBefore(element : native, child : native, reference : native) {}
removeElementChild(element : native, child : native) {}