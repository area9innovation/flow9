import tools/mango/mango_types;
import ds/tree;
import tools/mango/mango2string;

export {
	findRules(acc : Tree<string, Term>, g : Term) -> Tree<string, Term>;
}

findRules(acc : Tree<string, Term>, g : Term) -> Tree<string, Term> {
	rec = \tt -> findRules(acc, tt);
	switch (g) {
		Rule(id, term, body): {
			mexist = lookupTree(acc, id);
			switch (mexist) {
				None(): {}
				Some(mterm): {
					if (term != mterm) {
						println("Warning: Duplicate rule '" + id + "' that disagree:");
						println(term2string(term));
						println(term2string(mterm));
					}
				}
			}
			nacc = setTree(acc, id, term);
			findRules(nacc, body);
		}

		Sequence(left, right): findRules(findRules(acc, left), right);
		Choice(term1, term2): findRules(findRules(acc, term1), term2);
		Construct(uid, int_0): acc;
		Error(term): rec(term);
		GrammarFn(id, term1, term2, term3): {
			println("TODO: Did not expect grammar fn here: " + id);
			acc;
		}
		GrammarCall(id, term): acc;
		Lower(term): rec(term);
		Negate(term): rec(term);
		Optional(term): rec(term);
		Plus(term): rec(term);
		Precedence(term1, term2): findRules(findRules(acc, term1), term2);
		PushMatch(term): rec(term);
		Range(char1, char2): acc;
		StackOp(id): acc;
		Star(term): rec(term);
		String(stringq): acc;
		Variable(id): acc;
	}	
}
