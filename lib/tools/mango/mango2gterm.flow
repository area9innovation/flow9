import text/gringo/gringo_ast;
import tools/mango/mango_types;
import runtime;
import string;

export {
	term2gterm(t : Term) -> GTerm;
}

term2gterm(t : Term) -> GTerm {
	todo = \ -> {
		println("Figure out how to translate " + toString(t));
		GError(GString(toString(t)));
	}
	switch (t) {
		Choice(term1, term2): GChoice(term2gterm(term1), term2gterm(term2));
		Construct(uid, int_0): GUnquote((GString(strReplace(uid, "_", "") + "_" + int_0)));
		Error(term): GError(term2gterm(term));
		GrammarFn(id, term1, term2, term3): todo();
		GrammarCall(id, term): todo();
		Lower(term): GLower(term2gterm(term));
		Negate(term): GNegate(term2gterm(term));
		Optional(term): GOpt(term2gterm(term));
		Plus(term): GPlus(term2gterm(term));
		Precedence(term1, term2): GPrecedence(term2gterm(term1), term2gterm(term2));
		PushMatch(term): GUnquote(term2gterm(term));
		Range(char1, char2): {
			lower = if (strlen(char1) != 1) parseHex(strRight(char1, 2)) else getCharCodeAt(char1, 0);
			upper = if (strlen(char2) != 1) parseHex(strRight(char2, 2)) else getCharCodeAt(char2, 0);
			GRange(lower, upper);
		}
		Rule(id, term1, term2): GRule(id, term2gterm(term1), term2gterm(term2));
		Sequence(term1, term2): GSeq(term2gterm(term1), term2gterm(term2));
		StackOp(id): {
			if (id == "nil") GUnquote(GString("list"))
			else if (contains(["cons", "true", "false", "s2i", "s2d", "unescape", "parsehex", "list2array"], id)) GUnquote(GString(id))
			else todo();
		}
		Star(term): GStar(term2gterm(term));
		String(ttext): {
			text = if (ttext == "\\n") "\n" 
				else if (ttext == "\\r") "\x0d"
				else if (ttext == "\\t") "\t"
				else ttext;
			GString(text);
		}
		Variable(id): GVar(id);
	}
}
