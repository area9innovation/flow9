// Identical choices can be simplified
`@t | @t`	=> `@t`;

// Common prefixes can be written with optional
`@pre @post | @pre`			=> `@pre (@post)?`;

// Common prefixes can be pushed to the left
`@pre @t1 | @pre @t2`					=> `@pre (@t1 | @t2)`;

// Prefixes "hidden" in choices
`(@pre @t1) | (@pre | @t2)`	=> `(@pre (@t1)?) | @t2`;
`(@pre @post1) | ((@pre @post2) | @c)` 	=> `@pre (@post1 | @post2) | @c`;

`@t | ""`				=> `(@t)?`;
`"" | @t`				=> `(@t)?`;

`"" @t`					=> `@t`;
`@t ""`					=> `@t`;

`(@a | @b) | @c`		=> `@a | (@b | @c)`;
`(@a @b) @c`			=> `@a (@b @c)`;

`((@t)?)?`				=> `(@t)?`;
`((@t)+)?`				=> `(@t)*`;
`((@t)*)?`				=> `(@t)*`;

`((@t)+)+`				=> `(@t)+`;
`((@t)?)+`				=> `(@t)*`;
`((@t)*)+`				=> `(@t)*`;

`((@t)*)*`				=> `(@t)*`;
`((@t)+)*`				=> `(@t)*`;
`((@t)?)*`				=> `(@t)*`;

// e = e tail | rest ; body	->	e = rest tail*; body
Rule(e, Choice(Sequence(Variable(e), tail), rest), body) 
	=> Rule(e, Sequence(rest, Star(tail)), body);

// Range(c, c)				=> String(c);
// TODO:
// "str" "ing" => "string" requires concat of strings
