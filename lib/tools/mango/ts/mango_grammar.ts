import * as MT from './mango_types.ts';

export function mangoGrammar(): MT.Term {
	return MT.Rule("term", MT.Sequence(MT.Variable("term1"), MT.Optional(MT.Sequence(MT.Token("|>"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term"), MT.Construct("Precedence", "2")))))), MT.Rule("term1", MT.Sequence(MT.Variable("term2"), MT.Optional(MT.Sequence(MT.Token("|"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term1"), MT.Construct("MT.Choice", "2")))))), MT.Rule("term2", MT.Sequence(MT.Variable("term3"), MT.Optional(MT.Sequence(MT.Variable("term2"), MT.Construct("MT.Sequence", "2")))), MT.Rule("term3", MT.Choice(MT.Sequence(MT.Token("$"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term4"), MT.Construct("MT.PushMatch", "1")))), MT.Variable("term4")), MT.Rule("term4", MT.Choice(MT.Sequence(MT.Token("@"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("id"), MT.Choice(MT.Sequence(MT.Token("<"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term"), MT.Sequence(MT.Token(">"), MT.Sequence(MT.Variable("ws"), MT.Construct("GrammarMacro", "2")))))), MT.Construct("StackOp", "1"))))), MT.Variable("term5")), MT.Rule("term5", MT.Choice(MT.Sequence(MT.Token("<"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term6"), MT.Construct("Lower", "1")))), MT.Variable("term6")), MT.Rule("term6", MT.Choice(MT.Sequence(MT.Token("#"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term7"), MT.Construct("Error", "1")))), MT.Variable("term7")), MT.Rule("term7", MT.Sequence(MT.Variable("term8"), MT.Optional(MT.Sequence(MT.Token("*"), MT.Sequence(MT.Variable("ws"), MT.Construct("MT.Star", "1"))))), MT.Rule("term8", MT.Sequence(MT.Variable("term9"), MT.Optional(MT.Sequence(MT.Token("+"), MT.Sequence(MT.Variable("ws"), MT.Construct("MT.Plus", "1"))))), MT.Rule("term9", MT.Sequence(MT.Variable("term10"), MT.Optional(MT.Sequence(MT.Token("?"), MT.Sequence(MT.Variable("ws"), MT.Construct("MT.Optional", "1"))))), MT.Rule("term10", MT.Choice(MT.Sequence(MT.Token("!"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term11"), MT.Construct("MT.Negate", "1")))), MT.Variable("term11")), MT.Rule("term11", MT.Choice(MT.Sequence(MT.Token("("), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term"), MT.Sequence(MT.Token(")"), MT.Variable("ws"))))), MT.Choice(MT.Sequence(MT.Variable("uid"), MT.Sequence(MT.Token("/"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("int"), MT.Construct("MT.Construct", "2"))))), MT.Choice(MT.Sequence(MT.Variable("string"), MT.Construct("MT.Token", "1")), MT.Choice(MT.Sequence(MT.Variable("char"), MT.Sequence(MT.Token("-"), MT.Sequence(MT.Variable("char"), MT.Construct("MT.Range", "2")))), MT.Choice(MT.Sequence(MT.Variable("stringq"), MT.Construct("MT.Token", "1")), MT.Sequence(MT.Variable("id"), MT.Choice(MT.Sequence(MT.Token("="), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term"), MT.Sequence(MT.Token(";"), MT.Sequence(MT.Variable("ws"), MT.Sequence(MT.Variable("term"), MT.Construct("MT.Rule", "3"))))))), MT.Construct("MT.Variable", "1")))))))), MT.Rule("id", MT.Sequence(MT.PushMatch(MT.Sequence(MT.Range("a", "z"), MT.Star(MT.Variable("alphanum")))), MT.Variable("ws")), MT.Rule("uid", MT.Sequence(MT.PushMatch(MT.Sequence(MT.Range("A", "Z"), MT.Star(MT.Variable("alphanum")))), MT.Variable("ws")), MT.Rule("alphanum", MT.Choice(MT.Range("a", "z"), MT.Choice(MT.Range("A", "Z"), MT.Choice(MT.Range("0", "9"), MT.Token("_")))), MT.Rule("int", MT.Sequence(MT.PushMatch(MT.Plus(MT.Range("0", "9"))), MT.Variable("ws")), MT.Rule("string", MT.Sequence(MT.Token("\""), MT.Sequence(MT.PushMatch(MT.Star(MT.Sequence(MT.Negate(MT.Token("\"")), MT.Variable("anychar")))), MT.Sequence(MT.Token("\""), MT.Variable("ws")))), MT.Rule("stringq", MT.Sequence(MT.Token("'"), MT.Sequence(MT.PushMatch(MT.Star(MT.Sequence(MT.Negate(MT.Token("'")), MT.Variable("anychar")))), MT.Sequence(MT.Token("'"), MT.Variable("ws")))), MT.Rule("char", MT.Sequence(MT.Token("'"), MT.Sequence(MT.PushMatch(MT.Choice(MT.Sequence(MT.Token("0x"), MT.Plus(MT.Variable("hexdigit"))), MT.Variable("anychar"))), MT.Sequence(MT.Token("'"), MT.Variable("ws")))), MT.Rule("hexdigit", MT.Choice(MT.Range("a", "f"), MT.Choice(MT.Range("A", "F"), MT.Range("0", "9"))), MT.Sequence(MT.Rule("ws", MT.Star(MT.Variable("s")), MT.Rule("s", MT.Plus(MT.Variable("cs")), MT.Rule("cs", MT.Choice(MT.Token(" "), MT.Choice(MT.Token("\\t"), MT.Choice(MT.Token("\\n"), MT.Choice(MT.Sequence(MT.Token("//"), MT.Sequence(MT.Star(MT.Sequence(MT.Negate(MT.Token("\\n")), MT.Variable("anychar"))), MT.Token("\\n"))), MT.Choice(MT.Sequence(MT.Token("/*"), MT.Sequence(MT.Star(MT.Sequence(MT.Negate(MT.Token("*/")), MT.Variable("anychar"))), MT.Token("*/"))), MT.Token("\\r")))))), MT.Rule("anychar", MT.Range("0x0000", "0xffff"), MT.Token(""))))), MT.Rule("grammar", MT.Sequence(MT.Variable("ws"), MT.Variable("term")), MT.Variable("grammar")))))))))))))))))))))));
}
