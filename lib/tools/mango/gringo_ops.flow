import ds/tree;
import text/blueprint;
import net/url_parameter;
import tools/poppy/type/pretty;

export {
	exportGringoOps2(env : PTypeEnv, name : string, constructors : Tree<string, PTypeName>) -> string;
}

exportGringoOps2(env : PTypeEnv, name : string, constructors : Tree<string, PTypeName>) -> string {
	mkArity = \arity -> {
		foldTree(constructors, "pairs2tree([\n", \n, tp : PTypeName, acc -> {
			if (length(tp.typars) == arity) {
				argNames = superglue(enumFromTo(0, arity - 1), \i -> "a" + i2s(i), ",");
				acc + "\tPair(" + toString(n + "_" + i2s(arity)) + ", \\" + argNames + " -> "
				+ "flow(" + n + "(" + supergluei(tp.typars, \i, arg -> "flow(" + ptype2gringoOp(env, "a" + i2s(i), arg) + ")", ", ")+ "))),\n"
			} else acc
		}) + "])"
	};
	blueprint("
	import text/gringo/gringo_typed_action;
	import %name%/%name%_utils;

	export{
		%name%Ops() -> GringoTypedOperators<?>;
	}

	%name%Ops() -> GringoTypedOperators<?> {
		GringoTypedOperators(
			%arity0%,
			%arity1%,
			%arity2%,
			%arity3%,
			%arity4%,
			makeTree()
		);
	}
	", [
		"name", name,
		"arity0", mkArity(0),
		"arity1", mkArity(1),
		"arity2", mkArity(2),
		"arity3", mkArity(3),
		"arity4", mkArity(4),
	])
}

ptype2gringoOp(env : PTypeEnv, this : string, t : PType) -> string {
	get = \s -> {
		first = getCharAt(s, 0);
		if (toLowerCase(first) == first) {
			"get" + getUrlParameter("typeprefix") + capitalize(s) + "(" + this +")";
		} else this;
	}
	todo = \ -> {
		println("TODO: Find out how to do op for " + prettyPType(env, t));
		this
	}
	switch (t) {
		PTypeName(name, typars): get(name);
		PTypeEClass(eclass): todo();
		PTypeWord(inputs, outputs): todo();
		PTypeOverload(overloads): todo();
		PTypeEval(): todo();
		PTypeCompose(left, right): todo();
	}
}