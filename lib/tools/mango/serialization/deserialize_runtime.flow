import tools/mango/serialization/serialize_runtime;

export {
	// State maintained during deserialization
	DeserializeState(
		memory : Memory,
		currentIndex : int
	);

	// Create a new deserialization state
	makeDeserializeState(memory : Memory) -> DeserializeState;

	// Core deserialization for primitive types
	deserializeInt(state : DeserializeState, opcodeIndex : int) -> int;
	deserializeDouble(state : DeserializeState, opcodeIndex : int) -> double;
	deserializeString(state : DeserializeState, opcodeIndex : int) -> string;
	deserializeBool(state : DeserializeState, opcodeIndex : int) -> bool;
	deserializeArray(state : DeserializeState, opcodeIndex : int, elementDeserializer : (DeserializeState, int) -> ?) -> [?];
}

// Initialize a new deserialization state
makeDeserializeState(memory : Memory) -> DeserializeState {
	DeserializeState(memory, 0);
}

// Helper to read the opcode at a given index
getOpcode(state : DeserializeState, index : int) -> Opcode {
	if (index >= 0 && index < length(state.memory.opcodes)) {
		state.memory.opcodes[index];
	} else {
		Opcode(OP_RESERVED, -1, -1, -1); // Error/empty opcode
	}
}

// Deserialize an int value
deserializeInt(state : DeserializeState, opcodeIndex : int) -> int {
	opcode = getOpcode(state, opcodeIndex);
	if (opcode.code == OP_INT && opcode.child1 >= 0 && opcode.child1 < length(state.memory.ints)) {
		state.memory.ints[opcode.child1];
	} else {
		0; // Default value on error
	}
}

// Deserialize a double value
deserializeDouble(state : DeserializeState, opcodeIndex : int) -> double {
	opcode = getOpcode(state, opcodeIndex);
	if (opcode.code == OP_DOUBLE && opcode.child1 >= 0 && opcode.child1 < length(state.memory.doubles)) {
		state.memory.doubles[opcode.child1];
	} else {
		0.0; // Default value on error
	}
}

// Deserialize a string value
deserializeString(state : DeserializeState, opcodeIndex : int) -> string {
	opcode = getOpcode(state, opcodeIndex);
	if (opcode.code == OP_STRING && opcode.child1 >= 0 && opcode.child1 < length(state.memory.strings)) {
		state.memory.strings[opcode.child1];
	} else {
		""; // Empty string on error
	}
}

// Deserialize a boolean value
deserializeBool(state : DeserializeState, opcodeIndex : int) -> bool {
	opcode = getOpcode(state, opcodeIndex);
	opcode.code == OP_TRUE;
}

// Deserialize an array value
deserializeArray(state : DeserializeState, opcodeIndex : int, elementDeserializer : (DeserializeState, int) -> ?) -> [?] {
	opcode = getOpcode(state, opcodeIndex);

	if (opcode.code == OP_ARRAY_EMPTY) {
		// Empty array
		[];
	} else if (opcode.code == OP_ARRAY_CONS) {
		// Array cons - recursively build the array
		// Define the recursive array building function
		buildArrayImpl = \buildFn, currentIndex, acc -> {
			currentOpcode = getOpcode(state, currentIndex);
			if (currentOpcode.code != OP_ARRAY_CONS) {
				// End of array construction
				acc;
			} else {
				// Get the element
				elementIndex = currentOpcode.child1;
				element = elementDeserializer(state, elementIndex);
				
				// Recursively process the rest
				buildFn(buildFn, currentOpcode.child2, arrayPush(acc, element));
			}
		};
		
		// Start the recursive array building
		buildArrayImpl(buildArrayImpl, opcodeIndex, []);
	} else {
		// Invalid array opcode
		[];
	}
}