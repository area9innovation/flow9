import tools/mango/type/generate_opcodes;
import tools/mango/serialization/generate_serializers;
import tools/mango/serialization/generate_deserializers;

import fs/filesystem;
import string;
import text/blueprint;

export {
	// Generate serialization code from already parsed types
	generateSerializationFromTypes(types : [MType], modulePrefix : string, outputDir : string) -> void;
}

// Generate all serialization code from parsed types
generateSerializationFromTypes(types : [MType], modulePrefix : string, outputDir : string) -> void {
	println("[ASTSerializer] Generating serialization from " + i2s(length(types)) + " types");
	println("[ASTSerializer] Module prefix: " + modulePrefix);
	println("[ASTSerializer] Output directory: " + outputDir);

	if (length(types) == 0) {
		println("[ASTSerializer] ERROR: No types found to generate serialization code");
	}

	// Log the types for debugging
	println("[ASTSerializer] Types to process:");
	iter(types, \t -> {
		switch (t) {
			MTypeConstructor(name, args): {
				println("  Constructor: " + name + " with " + i2s(length(args)) + " args");
			}
			MTypeUnion(name, subtypes): {
				println("  Union: " + name + " with " + i2s(length(subtypes)) + " subtypes");
			}
			default: {
				println("  Other type: " + toString(t));
			}
		}
	});

	// Use blueprint for consistent path building
	opcodeFile = blueprint("%outputDir%/%modulePrefix%_opcodes.flow", 
		["outputDir", outputDir, "modulePrefix", modulePrefix]);
	generateOpcodes(opcodeFile, types, modulePrefix, 100);
	println(blueprint("Generated opcode definitions in: %file%", ["file", opcodeFile]));

	// Generate serializers (using native import directly)
	serializerContent = generateSerializers(types, modulePrefix);
	serializerFile = blueprint("%outputDir%/%modulePrefix%_serializer.flow",
		["outputDir", outputDir, "modulePrefix", modulePrefix]);
	setFileContent(serializerFile, serializerContent);
	println(blueprint("Generated serializer code in: %file%", ["file", serializerFile]));

	// Generate deserializers (using native import directly)
	deserializerContent = generateDeserializers(types, modulePrefix);
	deserializerFile = blueprint("%outputDir%/%modulePrefix%_deserializer.flow",
		["outputDir", outputDir, "modulePrefix", modulePrefix]);
	setFileContent(deserializerFile, deserializerContent);
	println(blueprint("Generated deserializer code in: %file%", ["file", deserializerFile]));
}
