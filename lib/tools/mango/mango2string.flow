import tools/mango/mango_types;
import runtime;
import string;

// This is not part of the final program, just used for debugging

export {
	term2string(t : Term) -> string;
	summarizeTerm(t : Term) -> string;
}

term2string(t : Term) -> string {
	switch (t) {
		Choice(term1, term2): "(" + term2string(term1) + " | " + term2string(term2) + ")";
		Construct(uid, int_0): uid + "/" + int_0;
		GrammarFn(id, term1, term2, term3): id + "<" + term2string(term1) + "> = " + term2string(term2) + ";\n" + term2string(term3);
		GrammarCall(id, term): "@" + id + "<" + term2string(term) + ">";
		Error(term): "#" + term2string(term);
		Lower(term): "<" + term2string(term);
		Negate(term): "!" + term2string(term) + "";
		Optional(term): "(" + term2string(term) + ")?";
		Plus(term): "(" + term2string(term) + ")+";
		Precedence(term1, term2): term2string(term1) + "\n|> " + term2string(term2);
		PushMatch(term): "$(" + term2string(term) + ")";
		Range(char1, char2): {
			fix = \c -> {
				if (c == "'") {
					toString(c);
				} else {
					strReplace(toString(c), "\"", "'");
				}
			}
			fix(char1) + "-" + fix(char2);
		}
		Rule(id, term1, term2): {
			"(" + id + " = " 
			+ strGlue(strWordWrap(term2string(term1), 80, [" | "]), "\n  ") 
			+ ";"
			+ "\n" + term2string(term2) + ")";
		}
		Sequence(term1, term2): term2string(term1) + " " + term2string(term2);
		StackOp(id): "@" + if (strContains(id, " ")) "'" + id + "'" else id;
		Star(term): "(" + term2string(term) + ")*";
		String(stringq): {
			if (strContains(stringq, "\"")) {
				"'" + stringq + "'"
			} else toString(stringq);
		}
		Variable(id): id;
	}
}

summarizeTerm(t : Term) -> string {
	switch (t) {
		Choice(term1, term2): summarizeTerm(term1) + " | " + summarizeTerm(term2);
		Construct(uid, int_0): uid + "/" + int_0;
		Error(term): "#" + summarizeTerm(term);
		Lower(term): "<" + summarizeTerm(term);
		Negate(term): "!(" + summarizeTerm(term) + ")";
		Optional(term): "(" + summarizeTerm(term) + ")?";
		Plus(term): "(" + summarizeTerm(term) + ")+";
		Precedence(term1, term2): summarizeTerm(term1) + " |> " + summarizeTerm(term2);
		PushMatch(term): "$(" + summarizeTerm(term) + ")";
		Range(char1, char2): toString(char1) + "-" + toString(char2);
		Rule(id, term1, term2): {
			id + " = " + summarizeTerm(term1) + ";"
		}
		Sequence(term1, term2): summarizeTerm(term1) + " " + summarizeTerm(term2);
		GrammarFn(id, term1, term2, term3): id + "<" + summarizeTerm(term1) + "> = " + summarizeTerm(term2) + ";\n" + summarizeTerm(term3);
		GrammarCall(id, term): "@" + id + "<" + summarizeTerm(term) + ">";
		StackOp(id): "@" + id;
		Star(term): "(" + summarizeTerm(term) + ")*";
		String(stringq): toString(stringq);
		Variable(id): id;
	}
}
