import tools/basil/lib/runtime;
import tools/mango/mango_types;
import tools/mango/mango_rvalue;

export {
	transitiveRewriteTerm(t : Term) -> Term;
	rewriteTerm(t : Term) -> MatchResult<Term>;
}

transitiveRewriteTerm(t : Term) -> Term {
	transitiveRewriting(
		termRecApi(), 
		[matchTerm0, matchTerm1, matchTerm2, matchTerm3, matchTerm4, matchTerm5, matchTerm6, matchTerm7, matchTerm8, matchTerm9, matchTerm10, matchTerm11, matchTerm12, matchTerm13, matchTerm14, matchTerm15, matchTerm16, matchTerm17, matchTerm18, matchTerm19, matchTerm20],
		[rewriteTerm0, rewriteTerm1, rewriteTerm2, rewriteTerm3, rewriteTerm4, rewriteTerm5, rewriteTerm6, rewriteTerm7, rewriteTerm8, rewriteTerm9, rewriteTerm10, rewriteTerm11, rewriteTerm12, rewriteTerm13, rewriteTerm14, rewriteTerm15, rewriteTerm16, rewriteTerm17, rewriteTerm18, rewriteTerm19, rewriteTerm20],
		t
	);
}

rewriteTerm(t : Term) -> MatchResult<Term> {
	rewriteRules(
		[matchTerm0, matchTerm1, matchTerm2, matchTerm3, matchTerm4, matchTerm5, matchTerm6, matchTerm7, matchTerm8, matchTerm9, matchTerm10, matchTerm11, matchTerm12, matchTerm13, matchTerm14, matchTerm15, matchTerm16, matchTerm17, matchTerm18, matchTerm19, matchTerm20],
		[rewriteTerm0, rewriteTerm1, rewriteTerm2, rewriteTerm3, rewriteTerm4, rewriteTerm5, rewriteTerm6, rewriteTerm7, rewriteTerm8, rewriteTerm9, rewriteTerm10, rewriteTerm11, rewriteTerm12, rewriteTerm13, rewriteTerm14, rewriteTerm15, rewriteTerm16, rewriteTerm17, rewriteTerm18, rewriteTerm19, rewriteTerm20],
		t
	)
}

matchTerm0(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_0_0)));
			if (!(^acc).fail) acc := MatchResult(^acc with fail = MatchNode(s_0_1) != (^acc).bindings[0]);
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm0(bindings : [MatchValue<Term>], t : Term) -> Term {
	matchNode(bindings[0])
}


matchTerm1(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Sequence(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* pre */, MatchNode(s_1_0)));
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 1/* post */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := MatchResult(^acc with fail = MatchNode(s_0_1) != (^acc).bindings[0]);
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm1(bindings : [MatchValue<Term>], t : Term) -> Term {
	Sequence(matchNode(bindings[0]), Optional(matchNode(bindings[1])))
}


matchTerm2(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Sequence(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* pre */, MatchNode(s_1_0)));
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 1/* t1 */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := switch (s_0_1) {
				Sequence(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with fail = MatchNode(s_1_0) != (^acc).bindings[0]);
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 2/* t2 */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm2(bindings : [MatchValue<Term>], t : Term) -> Term {
	Sequence(matchNode(bindings[0]), Choice(matchNode(bindings[1]), matchNode(bindings[2])))
}


matchTerm3(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Sequence(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* pre */, MatchNode(s_1_0)));
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 1/* t1 */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := switch (s_0_1) {
				Choice(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with fail = MatchNode(s_1_0) != (^acc).bindings[0]);
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 2/* t2 */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm3(bindings : [MatchValue<Term>], t : Term) -> Term {
	Choice(Sequence(matchNode(bindings[0]), Optional(matchNode(bindings[1]))), matchNode(bindings[2]))
}


matchTerm4(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Sequence(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* pre */, MatchNode(s_1_0)));
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 1/* post1 */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := switch (s_0_1) {
				Choice(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := switch (s_1_0) {
						Sequence(s_2_0, s_2_1): {
							if (!(^acc).fail) acc := MatchResult(^acc with fail = MatchNode(s_2_0) != (^acc).bindings[0]);
							if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 2/* post2 */, MatchNode(s_2_1)));
							^acc;
						}
						default: MatchResult(acc0 with fail=true);
					};
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 3/* c */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm4(bindings : [MatchValue<Term>], t : Term) -> Term {
	Choice(Sequence(matchNode(bindings[0]), Choice(matchNode(bindings[1]), matchNode(bindings[2]))), matchNode(bindings[3]))
}


matchTerm5(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_0_0)));
			if (!(^acc).fail) acc := switch (s_0_1) {
				String(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with fail = s_1_0 != "");
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm5(bindings : [MatchValue<Term>], t : Term) -> Term {
	Optional(matchNode(bindings[0]))
}


matchTerm6(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				String(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with fail = s_1_0 != "");
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_0_1)));
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm6(bindings : [MatchValue<Term>], t : Term) -> Term {
	Optional(matchNode(bindings[0]))
}


matchTerm7(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Sequence(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				String(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with fail = s_1_0 != "");
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_0_1)));
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm7(bindings : [MatchValue<Term>], t : Term) -> Term {
	matchNode(bindings[0])
}


matchTerm8(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Sequence(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_0_0)));
			if (!(^acc).fail) acc := switch (s_0_1) {
				String(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with fail = s_1_0 != "");
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm8(bindings : [MatchValue<Term>], t : Term) -> Term {
	matchNode(bindings[0])
}


matchTerm9(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Choice(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Choice(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* a */, MatchNode(s_1_0)));
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 1/* b */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 2/* c */, MatchNode(s_0_1)));
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm9(bindings : [MatchValue<Term>], t : Term) -> Term {
	Choice(matchNode(bindings[0]), Choice(matchNode(bindings[1]), matchNode(bindings[2])))
}


matchTerm10(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Sequence(s_0_0, s_0_1): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Sequence(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* a */, MatchNode(s_1_0)));
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 1/* b */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 2/* c */, MatchNode(s_0_1)));
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm10(bindings : [MatchValue<Term>], t : Term) -> Term {
	Sequence(matchNode(bindings[0]), Sequence(matchNode(bindings[1]), matchNode(bindings[2])))
}


matchTerm11(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Optional(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Optional(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm11(bindings : [MatchValue<Term>], t : Term) -> Term {
	Optional(matchNode(bindings[0]))
}


matchTerm12(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Optional(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Plus(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm12(bindings : [MatchValue<Term>], t : Term) -> Term {
	Star(matchNode(bindings[0]))
}


matchTerm13(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Optional(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Star(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm13(bindings : [MatchValue<Term>], t : Term) -> Term {
	Star(matchNode(bindings[0]))
}


matchTerm14(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Plus(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Plus(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm14(bindings : [MatchValue<Term>], t : Term) -> Term {
	Plus(matchNode(bindings[0]))
}


matchTerm15(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Plus(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Optional(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm15(bindings : [MatchValue<Term>], t : Term) -> Term {
	Star(matchNode(bindings[0]))
}


matchTerm16(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Plus(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Star(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm16(bindings : [MatchValue<Term>], t : Term) -> Term {
	Star(matchNode(bindings[0]))
}


matchTerm17(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Star(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Star(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm17(bindings : [MatchValue<Term>], t : Term) -> Term {
	Star(matchNode(bindings[0]))
}


matchTerm18(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Star(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Plus(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm18(bindings : [MatchValue<Term>], t : Term) -> Term {
	Star(matchNode(bindings[0]))
}


matchTerm19(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Star(s_0_0): {
			if (!(^acc).fail) acc := switch (s_0_0) {
				Optional(s_1_0): {
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* t */, MatchNode(s_1_0)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm19(bindings : [MatchValue<Term>], t : Term) -> Term {
	Star(matchNode(bindings[0]))
}


matchTerm20(acc0 : MatchResult<Term>) -> MatchResult<Term> {
	acc = ref acc0;
	switch ((^acc).term) {
		Rule(s_0_0, s_0_1, s_0_2): {
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 0/* e */, MatchString(s_0_0)));
			if (!(^acc).fail) acc := switch (s_0_1) {
				Choice(s_1_0, s_1_1): {
					if (!(^acc).fail) acc := switch (s_1_0) {
						Sequence(s_2_0, s_2_1): {
							if (!(^acc).fail) acc := switch (s_2_0) {
								Variable(s_3_0): {
									if (!(^acc).fail) acc := MatchResult(^acc with fail = MatchString(s_3_0) != (^acc).bindings[0]);
									^acc;
								}
								default: MatchResult(acc0 with fail=true);
							};
							if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 1/* tail */, MatchNode(s_2_1)));
							^acc;
						}
						default: MatchResult(acc0 with fail=true);
					};
					if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 2/* rest */, MatchNode(s_1_1)));
					^acc;
				}
				default: MatchResult(acc0 with fail=true);
			};
			if (!(^acc).fail) acc := MatchResult(^acc with bindings = replace((^acc).bindings, 3/* body */, MatchNode(s_0_2)));
			^acc;
		}
		default: MatchResult(acc0 with fail=true);
	}
}

rewriteTerm20(bindings : [MatchValue<Term>], t : Term) -> Term {
	Rule(matchString(bindings[0]), Sequence(matchNode(bindings[2]), Star(matchNode(bindings[1]))), matchNode(bindings[3]))
}


