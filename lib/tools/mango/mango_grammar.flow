import tools/mango/mango_types;

export {
	mangoGrammar() -> Term;
}

mangoGrammar() -> Term {
	Rule("ws", Star(Variable("s")), Rule("uid", Sequence(PushMatch(Sequence(Range("A", "Z"), Star(Variable("alnum")))), Variable("ws")), Rule("term", Sequence(Variable("term1"), Optional(Sequence(String("|>"), Sequence(Variable("ws"), Sequence(Variable("term"), Construct("Precedence", "2")))))), Rule("term1", Sequence(Variable("term2"), Optional(Sequence(String("|"), Sequence(Variable("ws"), Sequence(Variable("term1"), Construct("Choice", "2")))))), Rule("term2", Sequence(Variable("term3"), Optional(Sequence(Variable("term2"), Construct("Sequence", "2")))), Rule("term3", Choice(Sequence(String("$"), Sequence(Variable("ws"), Sequence(Variable("term4"), Construct("PushMatch", "1")))), Variable("term4")), Rule("term4", Choice(Sequence(String("<"), Sequence(Variable("ws"), Sequence(Variable("term5"), Construct("Lower", "1")))), Variable("term5")), Rule("term5", Choice(Sequence(String("#"), Sequence(Variable("ws"), Sequence(Variable("term6"), Construct("Error", "1")))), Variable("term6")), Rule("term6", Sequence(Variable("term7"), Optional(Sequence(String("*"), Sequence(Variable("ws"), Construct("Star", "1"))))), Rule("term7", Sequence(Variable("term8"), Optional(Sequence(String("+"), Sequence(Variable("ws"), Construct("Plus", "1"))))), Rule("term8", Sequence(Variable("term9"), Optional(Sequence(String("?"), Sequence(Variable("ws"), Construct("Optional", "1"))))), Rule("term9", Choice(Sequence(String("!"), Sequence(Variable("ws"), Sequence(Variable("term10"), Construct("Negate", "1")))), Variable("term10")), Rule("term10", Choice(Sequence(String("("), Sequence(Variable("ws"), Sequence(Variable("term"), Sequence(String(")"), Variable("ws"))))), Choice(Sequence(Variable("uid"), Sequence(String("/"), Sequence(Variable("ws"), Sequence(PushMatch(Variable("int")), Sequence(Variable("ws"), Construct("Construct", "2")))))), Choice(Sequence(Variable("string"), Construct("String", "1")), Choice(Sequence(Variable("char"), Sequence(String("-"), Sequence(Variable("char"), Construct("Range", "2")))), Choice(Sequence(Variable("stringq"), Construct("String", "1")), Choice(Sequence(Variable("id"), Choice(Sequence(String("="), Sequence(Variable("ws"), Sequence(Variable("term"), Sequence(String(";"), Sequence(Variable("ws"), Sequence(Variable("term"), Construct("Rule", "3"))))))), Construct("Variable", "1"))), Choice(Sequence(String("@"), Sequence(Variable("ws"), Choice(Sequence(Variable("id"), Choice(Sequence(String("<"), Sequence(Variable("ws"), Sequence(Variable("term"), Sequence(String(">"), Sequence(Variable("ws"), Choice(Sequence(String("="), Sequence(Variable("ws"), Sequence(Variable("term"), Sequence(String(";"), Sequence(Variable("ws"), Sequence(Variable("term"), Construct("GrammarFn", "4"))))))), Construct("GrammarCall", "2"))))))), Sequence(Negate(String("<")), Construct("StackOp", "1")))), Sequence(Variable("stringq"), Construct("StackOp", "1"))))), Sequence(String("%"), Sequence(PushMatch(Plus(Variable("alnum"))), StackOp("switch")))))))))), Rule("stringq", Sequence(String("'"), Sequence(PushMatch(Star(Sequence(Negate(String("'")), Variable("anychar")))), Sequence(String("'"), Variable("ws")))), Rule("string", Sequence(String("\""), Sequence(PushMatch(Star(Sequence(Negate(String("\"")), Variable("anychar")))), Sequence(String("\""), Variable("ws")))), Rule("s", Plus(Variable("cs")), Rule("int", Plus(Range("0", "9")), Rule("id", Sequence(PushMatch(Variable("bid")), Variable("ws")), Rule("hexdigit", Choice(Range("0", "9"), Choice(Range("a", "f"), Range("A", "F"))), Rule("grammar", Sequence(Variable("ws"), Variable("term")), Rule("cs", Choice(String(" "), Choice(String("\\t"), Choice(String("\\n"), Choice(Sequence(String("//"), Sequence(Star(Sequence(Negate(String("\\n")), Variable("anychar"))), String("\\n"))), Choice(Sequence(String("/*"), Sequence(Star(Sequence(Negate(String("*/")), Variable("anychar"))), String("*/"))), String("\\r")))))), Rule("char", Sequence(String("'"), Sequence(PushMatch(Choice(Sequence(String("0x"), Plus(Variable("hexdigit"))), Variable("anychar"))), Sequence(String("'"), Variable("ws")))), Rule("bid", Sequence(Choice(Range("a", "z"), String("_")), Star(Variable("alnum"))), Rule("anychar", Range("0x0000", "0xffff"), Rule("alnum", Choice(Range("a", "z"), Choice(Range("A", "Z"), Choice(String("_"), Range("0", "9")))), Variable("grammar"))))))))))))))))))))))))));
}
