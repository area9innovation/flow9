import tools/mango/type/types;
import ds/tree;
import text/blueprint;
import net/url_parameter;
import tools/mango/type/type2melon;

export {
	exportGringoOps(name : string, constructors : Tree<string, MTypeConstructor>) -> string;
}

exportGringoOps(name : string, constructors : Tree<string, MTypeConstructor>) -> string {
	mkArity = \arity -> {
		foldTree(constructors, "pairs2tree([\n", \n, tp : MTypeConstructor, acc -> {
			if (length(tp.args) == arity) {
				argNames = superglue(enumFromTo(0, arity - 1), \i -> "a" + i2s(i), ",");
				acc + "\tPair(" + toString(n + "_" + i2s(arity)) + ", \\" + argNames + " -> "
				+ "flow(" + n + "(" + supergluei(tp.args, \i, arg -> "flow(" + type2gringoOp("a" + i2s(i), arg) + ")", ", ")+ "))),\n"
			} else acc
		}) + "])"
	};
	blueprint("
	import text/gringo/gringo_typed_action;
	import %name%/%name%_utils;

	export{
		%name%Ops() -> GringoTypedOperators<?>;
	}

	%name%Ops() -> GringoTypedOperators<?> {
		GringoTypedOperators(
			%arity0%,
			%arity1%,
			%arity2%,
			%arity3%,
			%arity4%,
			makeTree()
		);
	}
	", [
		"name", name,
		"arity0", mkArity(0),
		"arity1", mkArity(1),
		"arity2", mkArity(2),
		"arity3", mkArity(3),
		"arity4", mkArity(4),
	])
}

type2gringoOp(this : string, t : MType) -> string {
	get = \s -> "get" + getUrlParameter("typeprefix") + s + "(" + this +")";
	todo = \ -> {
		println("TODO: Find out how to do op for " + prettyMType(t));
		this
	}
	switch (t) {
		MTypeBool(): get("Bool");
		MTypeInt(): get("Int");
		MTypeDouble(): get("Double");
		MTypeString(): get("String");
		MTypeConstructor(name, args): todo();
		MTypeStar(type): get("Array");
		MTypeUnion(name, types): this;
		MTypeName(name): this;
		MTypeField(name, type): type2gringoOp(this, type);
		MTypeNil(): todo();
		MTypeResult(rule): todo();
	}
}