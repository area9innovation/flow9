import tools/mango/mango_types;
import tools/mango/type/type_eval;
import text/blueprint;
import fs/filesystem;

export {
	// Generate opcode constants for structs in the AST starting with baseOpcode (default 100)
	generateOpcodes(file : string, types : [MType], typePrefix : string, baseOpcode : int) -> void;
}

// Special opcodes for built-ins:
// 0: reserved (nothing/error)
// 1: false
// 2: true
// 3: int
// 4: double
// 5: string
// 6: array
// 7: ref

generateOpcodes(file : string, types : [MType], typePrefix : string, baseOpcode : int) -> void {
	structTypes = filtermap(types, \t -> switch(t) {
		MTypeConstructor(structName, __): Some(structName);
		default: None();
	});

	// Sort struct names to ensure stable opcode assignment
	sortedTypes = sort(structTypes);
	
	// Generate the opcode declarations
	code = blueprint("// Generated by Mango - DO NOT EDIT\n\nexport {\n%opcodes%\n}\n",
		["opcodes", superglue(mapi(sortedTypes, \i, name -> {
			opcode = baseOpcode + i;
			
			// Check if the struct name already starts with the type prefix
			// to avoid double prefixes like "OpEgEgAdd"
			structName = if (typePrefix != "" && startsWith(name, typePrefix)) {
				name
			} else {
				typePrefix + name
			};
			
			"\tOp" + structName + " = " + i2s(opcode) + ";";
		}), \s -> s, "\n")])
	;

	opcodesFile = changeFileExt(file, "_opcodes.flow");
	setFileContent(opcodesFile, code);
	println("Saved '" + opcodesFile + "'");
}