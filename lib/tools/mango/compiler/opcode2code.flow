import tools/mango/compiler/mopcode;
import tools/mango/compiler/opcode_effects;
import tools/mango/compiler/pretty;
import string;
import text/blueprint;
import net/url_parameter;
import tools/poppy/compiler/compile;
import ds/tree;

export {
	// Function signature with effects tree parameter
	mopcode2code(c : MOpCode, effects : Tree<string, MOpCodeEffects>) -> string;
}

mopcode2code(c : MOpCode, effects : Tree<string, MOpCodeEffects>) -> string {
	todo = \ -> {
		println("TODO: Produce code for " + toString(c));
		"TODO";
	}
	switch (c) {
		MoFunction(name, code, body): {
			prefix = getUrlParameter("prefix");
			blueprint("
				%id%(acc : MoParseAcc) -> bool {
					// println(\"%id%\");
					%term%
				}

				%body%
				", [
					"id", prefix + "parse_" + name,
					"term", mopcode2code(code, effects),
					"body", mopcode2code(body, effects),
				]
			)
		}
		MoMatchString(s): "mmatchString(acc, " + toString(s) + ")";
		MoMatchRange(lower, upper): "mmatchRange(acc, " + i2s(lower) + ", " + i2s(upper) + ")";
		MoIf(cond, then, else_): {
			blueprint("
				if (%cond%) {
					%then%
				} else {
					%else%
				}", [
					"cond", mopcode2code(cond, effects),
					"then", mopcode2code(then, effects),
					"else", mopcode2code(else_, effects),
			]);
		}
		MoParseStar(term): {
			// Use the effects map for optimization
			generateOptimizedParseStar(term, effects);
		}
		MoCall(id): {
			prefix = getUrlParameter("prefix");
			prefix + "parse_" + id + "(acc)";
		}
		MoCaptureI(): "acc.starti ::= acc.i";
		MoMatched(): "pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))";
		MoBool(b): b2s(b);
		MoEvalPoppy(poppy): {
			if (isPoppyValue(poppy)) {
				val = compilePoppy2Value(poppy);
				"pushPEnv(acc.env, " + val + ")";
			} else {
				env = PCompileEnv(getRunCore(), true, ref "", ref 0);
				code = compilePoppy(env, poppy);
				if (^(env.functions) != "") {
					println("TODO: Implement collection of Poppy functions");
				}
				renameEnv = strReplace(code, "(env", "(acc.env");
				blueprint("{%code%; true}", ["code", renameEnv]);
			}
		}
		MoPushCheckpoint(): "pushMCheckpoint(acc)";
		MoDiscardCheckpoint(): "discardMCheckpoint(acc)";
		MoRestoreCheckpoint(): "restoreMCheckpoint(acc)";
		MoSequence(exps): {
			if (length(exps) == 0) {
				""
			} else if (length(exps) == 1) {
				mopcode2code(exps[0], effects)
			} else {
				blueprint("
					{
						%seq%
					}", [
					"seq", superglue(exps, \exp -> mopcode2code(exp, effects), ";\n")
				]);
			}
		}
		MoConstruct(uid, arity): "moconstruct(acc, " + toString(uid) + ", " + i2s(arity) + ")";
		MoPushPosition(): "pushPEnv(acc.env, acc.i)";
		MoAnd(left, right): {
			"(" + superglue([left, right], \o -> {
				if (needMOpCodeParenthesis(o)) {
					"(" + mopcode2code(o, effects) + ")"
				} else {
					mopcode2code(o, effects)
				}
			}, " && ") + ")"
		}
		MoOr(left, right): {
			superglue([left, right], \o -> {
				if (needMOpCodeParenthesis(o)) {
					"(" + mopcode2code(o, effects) + ")"
				} else {
					mopcode2code(o, effects)
				}
			}, " || ")
		}
	}
}

// Generate optimized code for MoParseStar based on analysis with effects map
generateOptimizedParseStar(term : MOpCode, effects : Tree<string, MOpCodeEffects>) -> string {
	if (!modifiesStackWithEffects(term, effects) && !needsBacktrackingWithEffects(term, effects)) {
		// Fast path: simple repetition with no backtracking needed
		println("No stack, no backtrack for " + prettyMOpCode(term));
		blueprint("
			mparseStarNobacktrackOrStack(acc, \\ -> {
				%term%
			})", [
			"term", mopcode2code(term, effects)
		]);
	} else if (!modifiesStackWithEffects(term, effects)) {
		// Medium path: position-only backtracking
		println("No stack for " + prettyMOpCode(term));
		blueprint("
			mparseStarBacktrackOnly(acc, \\ -> {
				%term%
			})", [
			"term", mopcode2code(term, effects)
		]);
	} else {
		// Standard mparseStar with full checkpointing
		blueprint("
			mparseStar(acc, \\ -> {
				%term%
			})", [
			"term", mopcode2code(term, effects)
		]);
	}
}

needMOpCodeParenthesis(o : MOpCode) -> bool {
	switch (o) {
		MoFunction(name, code, body): true;
		MoMatchString(s): false
		MoMatchRange(lower, upper): false
		MoIf(cond, then, else_): true;
		MoParseStar(term): false
		MoCall(id): false
		MoCaptureI(): true;
		MoMatched(): false
		MoBool(b): false;
		MoEvalPoppy(poppy): {
			switch (poppy) {
				PoppyBool(bool1): false;
				PoppyDouble(double1): true;
				PoppyInt(int1): false;
				PoppyString(string1): false;
				default: true;
			}
		}
		MoPushPosition(): false
		MoPushCheckpoint(): false
		MoDiscardCheckpoint(): false
		MoRestoreCheckpoint(): false
		MoSequence(exps): length(exps) == 1;
		MoConstruct(uid, arity): false;
		MoAnd(left, right): true;
		MoOr(left, right): true;
	}
}
