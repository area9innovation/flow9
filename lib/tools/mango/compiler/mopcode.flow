import tools/poppy/poppy_types;

export {
	// MOpCode represents the virtual machine instructions for the Mango parser
	// Each operation corresponds to a specific parsing operation or control flow
	MOpCode ::= MoFunction, MoMatchString, MoMatchRange, MoIf, MoParseStar, MoCall, MoCaptureI, MoMatched,
		MoBool,
		MoEvalPoppy, MoPushPosition,
		MoSequence,
		MoConstruct, MoAnd, MoOr,
		MoNegate, MoOptional, MoChoice;

	// Defines a named parsing function with its implementation code and any recursive rules
	// - name: The function name (used in rule calls)
	// - code: The actual implementation of the rule
	// - body: Additional rules defined in the same scope
	MoFunction(name : string, code : MOpCode, body : MOpCode);

	// Matches an exact string literal in the input
	// - s: The string to match
	// Translates to: mmatchString(acc, s)
	MoMatchString(s : string);

	// Matches any character in the specified range of character codes
	// - lower: The lower bound character code (inclusive)
	// - upper: The upper bound character code (inclusive)
	// Translates to: mmatchRange(acc, lower, upper)
	MoMatchRange(lower : int, upper : int);

	// Conditional parsing logic - attempts condition, then executes either 'then' or 'else_'
	// - cond: The condition to check
	// - then: Code executed if condition succeeds
	// - else_: Code executed if condition fails
	// Translates to: if (cond) { then } else { else_ }
	MoIf(cond : MOpCode, then : MOpCode, else_ : MOpCode);

	// Constant boolean value - pushes true or false to the control flow
	// - b: The boolean value
	// Translates to literal boolean in conditions
	MoBool(b : bool);

	// Evaluates Poppy stack language code and pushes result onto the parser stack
	// - poppy: The Poppy code to execute
	// Translates to: pushPEnv(acc.env, result) or embedded Poppy operations
	MoEvalPoppy(poppy : Poppy);

	// Pushes the current input position to the stack
	// Translates to: pushPEnv(acc.env, acc.i)
	MoPushPosition();

	// Repeats an operation zero or more times (Kleene star)
	// - term: The operation to repeat
	// Translates to recursive function that tries term until it fails
	MoParseStar(term : MOpCode);

	// Calls another parsing rule by name
	// - id: The name of the rule to call
	// Translates to: parse_[id](acc)
	MoCall(id : string);

	// Captures the current input position for later substring extraction
	// Used with MoMatched to capture matched text
	// Translates to: acc.starti ::= acc.i
	MoCaptureI();

	// Pushes the substring from starti to current position onto stack
	// Translates to: pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
	MoMatched();

	// Executes a sequence of operations in order
	// - exps: Array of operations to execute
	// Translates to a block of statements separated by semicolons
	MoSequence(exps : [MOpCode]);

	// Creates a typed structure with values from the stack
	// - uid: The constructor/type name
	// - arity: Number of arguments to pop from stack
	// Translates to: moconstruct(acc, uid, arity)
	MoConstruct(uid : string, arity : int);

	// Logical AND of two patterns - both must succeed
	// - left: First pattern to match
	// - right: Second pattern to match
	// Translates to: left && right
	MoAnd(left : MOpCode, right : MOpCode);

	// Logical OR of two patterns - either can succeed
	// - left: First pattern to try
	// - right: Alternative pattern if first fails
	// Translates to: left || right
	MoOr(left : MOpCode, right : MOpCode);


	// Negate operation: !pattern
	MoNegate(op : MOpCode);

	// Optional operation: pattern?
	MoOptional(op : MOpCode);

	// Choice operation: pattern1 | pattern2 | ...
	MoChoice(ops : [MOpCode]);
}
