import tools/mango/compiler/mopcode;
import text/blueprint;
import tools/poppy/pretty;

export {
	prettyMOpCode(o : MOpCode) -> string;
}

prettyMOpCode(o : MOpCode) -> string {
	switch (o) {
		MoFunction(name, code, body): blueprint("
				%name% = %code%;
				%body%
			", [
				"name", name,
				"code", prettyMOpCode(code),
				"body", prettyMOpCode(body),
			]);
		MoMatchRange(lower, upper): "0x" + formatHex(lower) + "-" + formatHex(upper);
		MoMatchString(s): "match(" + toString(s) + ")";
		MoParseStar(term): prettyMOpCode(term) + "*";
		MoCall(id): id;
		MoSequence(exps): {
			blueprint("
				{
					%exps%
				}",
				[
					"exps", superglue(exps, prettyMOpCode, "\n")
				]
			)
		}
		MoPushCheckpoint(): "push";
		MoDiscardCheckpoint(): "discard";
		MoRestoreCheckpoint(): "restore";
		MoCaptureI(): "capture-i";
		MoMatched(): "matched";
		MoPushPosition(): "push-position";
		MoIf(cond, then, else_): {
			condi = prettyMOpCode(cond);
			if (strContains(condi, "\n")) {
				blueprint("
					if (
						%cond%
					)
						%then%
					else
						%else%", [
					"cond", condi,
					"then", prettyMOpCode(then),
					"else", prettyMOpCode(else_),
				]);
			} else {
				blueprint("
					(if (%cond%)
						%then%
					else
						%else%)", [
					"cond", condi,
					"then", prettyMOpCode(then),
					"else", prettyMOpCode(else_),
				]);

			}
		}
		MoEvalPoppy(p): "@'" + prettyPoppy(p) + "'";
		MoBool(b): b2s(b);
		MoConstruct(uid, arity): uid + "/" + i2s(arity);
		MoAnd(left, right): prettyMOpCode(left) + " & " + prettyMOpCode(right);
		MoOr(left, right): prettyMOpCode(left) + " | " + prettyMOpCode(right);
	}
}
