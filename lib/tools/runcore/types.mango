@include<list>

typedefs = @array<typedef ";"> TypeDefs/1;

typedef = typename "::=" ws @array<struct ","> UnionDefBody/2
		| uid ":" ws '(' ws @array<structarg ","> ')' ws StructDefBody/2
		| word ":" ws type VarDef/2;

struct = uid ws '(' ws @array<structarg ","> ')' ws StructDef/2;
	structarg = id ':' ws type StructArg/2;

type = 	
	type "->" ws type FnType/2
	|> "(" ws @array<type ","> ")" ws TupleType/1
	| "overload" ws "(" ws @array<type ","> ")" ws OverloadType/1
	// We can name any type
	| word ":" ws type IdType/2
	| typename
	| "[" ws type "]" ws ArrayType/1
	| $("?"+) ws PolyType/1
//	| "Îµ" ws int @s2i EClassType/1
	| switch_grammar
	;

typename = word typars Typename/2;
typars = @nil ("<" ws type @cons ("," ws type @cons)* ">" ws)? @list2array;

word = !"overload"
	$(
		!(';' | '(' | ')' | '[' | ']' | '"' | '0'-'9' | ':' | ',' | "?") '!'-'0xffff' 
		(!(';' | '(' | ')' | '[' | ']' | '"' | ':' | ',' | "?" | '<') '!'-'0xffff')*
	) ws
	;

@include<lexical>

@include<switch_grammar>

ws typedefs