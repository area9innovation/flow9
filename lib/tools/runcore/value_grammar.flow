import tools/mango/mango_types;

export {
	valueGrammar() -> Term;
}

valueGrammar() -> Term {
	Rule("ws", Star(Variable("s")), Rule("value", Choice(Sequence(String("true"), Sequence(Variable("kwsep"), Sequence(StackOp("true"), Construct("CoreBool", "1")))), Choice(Sequence(String("false"), Sequence(Variable("kwsep"), Sequence(StackOp("false"), Construct("CoreBool", "1")))), Choice(Sequence(PushMatch(Variable("double")), Sequence(Variable("ws"), Sequence(StackOp("s2d"), Construct("CoreDouble", "1")))), Choice(Sequence(PushMatch(Variable("int")), Sequence(Variable("ws"), Sequence(StackOp("s2i"), Construct("CoreInt", "1")))), Choice(Sequence(Variable("string"), Sequence(StackOp("unescape"), Construct("CoreString", "1"))), Choice(Sequence(String("["), Sequence(Variable("ws"), Sequence(StackOp("nil"), Sequence(Optional(Sequence(Variable("value"), Sequence(StackOp("cons"), Sequence(Star(Sequence(String(","), Sequence(Variable("ws"), Sequence(Variable("value"), StackOp("cons"))))), Optional(Sequence(String(","), Variable("ws"))))))), Sequence(StackOp("list2array"), Sequence(String("]"), Sequence(Variable("ws"), Construct("CoreArray", "1")))))))), Choice(Sequence(Variable("uid"), Sequence(String("("), Sequence(Variable("ws"), Sequence(StackOp("nil"), Sequence(Optional(Sequence(Variable("value"), Sequence(StackOp("cons"), Sequence(Star(Sequence(String(","), Sequence(Variable("ws"), Sequence(Variable("value"), StackOp("cons"))))), Optional(Sequence(String(","), Variable("ws"))))))), Sequence(StackOp("list2array"), Sequence(String(")"), Sequence(Variable("ws"), Construct("CoreConstructor", "2"))))))))), Variable("switch_grammar")))))))), Rule("uid", Sequence(PushMatch(Sequence(Range("A", "Z"), Star(Variable("alnum")))), Variable("ws")), Rule("switch_grammar", Sequence(String("@"), Sequence(PushMatch(Plus(Variable("alnum"))), StackOp("switch"))), Rule("string", Sequence(PushMatch(Sequence(String("\""), Sequence(Star(Variable("onechar")), String("\"")))), Variable("ws")), Rule("signed_int", Sequence(Optional(String("-")), Variable("int")), Rule("s", Plus(Variable("cs")), Rule("onechar", Choice(Sequence(String("\\"), Choice(Sequence(String("u"), Sequence(Variable("hexdigit"), Sequence(Variable("hexdigit"), Sequence(Variable("hexdigit"), Variable("hexdigit"))))), Choice(Sequence(String("x"), Sequence(Variable("hexdigit"), Variable("hexdigit"))), Choice(String("\\"), Choice(String("\""), Choice(String("n"), Choice(String("t"), String("r")))))))), Sequence(Negate(String("\"")), Sequence(Negate(String("\\")), Variable("anychar")))), Rule("kwsep", Sequence(Negate(Variable("alnum")), Variable("ws")), Rule("int", Plus(Range("0", "9")), Rule("id", Sequence(PushMatch(Variable("bid")), Variable("ws")), Rule("hexdigit", Choice(Range("0", "9"), Choice(Range("a", "f"), Range("A", "F"))), Rule("exponent", Sequence(Choice(String("E"), String("e")), Sequence(Optional(Choice(String("+"), String("-"))), Variable("int"))), Rule("double", Choice(Sequence(Variable("signed_int"), Sequence(String("."), Sequence(Optional(Variable("int")), Optional(Variable("exponent"))))), Choice(Sequence(String("."), Sequence(Variable("int"), Optional(Variable("exponent")))), Sequence(Variable("signed_int"), Variable("exponent")))), Rule("cs", Choice(String(" "), Choice(String("\\t"), Choice(String("\\n"), Choice(Sequence(String("//"), Sequence(Star(Sequence(Negate(String("\\n")), Variable("anychar"))), String("\\n"))), Choice(Sequence(String("/*"), Sequence(Star(Sequence(Negate(String("*/")), Variable("anychar"))), String("*/"))), String("\\r")))))), Rule("bid", Sequence(Choice(Range("a", "z"), String("_")), Star(Variable("alnum"))), Rule("anychar", Range("0x0000", "0xffff"), Rule("alnum", Choice(Range("a", "z"), Choice(Range("A", "Z"), Choice(String("_"), Range("0", "9")))), Sequence(Variable("ws"), Variable("value"))))))))))))))))))));
}
