import tools/runcore/value_types;
import text/blueprint;
import dynamic;

export {
	prettyValue(v : CoreValue) -> string;

	value2b(v : CoreValue) -> bool;
	value2i(v : CoreValue) -> int;
	value2d(v : CoreValue) -> double;
	value2s(v : CoreValue) -> string;
	value2array(v : CoreValue) -> [CoreValue];
	value2constructor(v : CoreValue) -> CoreConstructor;

	flow2value(v : flow) -> CoreValue;
	value2flow(v : CoreValue, onError : (string) -> void) -> flow;
}

prettyValue(v : CoreValue) -> string {
	switch (v) {
		CoreBool(b): b2s(b);
		CoreInt(i): i2s(i);
		CoreDouble(d): d2s(d);
		CoreString(s): toString(s);
		CoreArray(values): "[" + superglue(values, prettyValue, ", ") + "]";
		CoreConstructor(uid, values): uid + "(" + superglue(values, prettyValue, ", ") + ")";
	}
}

value2b(v : CoreValue) -> bool {
	switch (v) {
		CoreBool(b): b;
		default: {
			println("ERROR: Expected bool, not " + prettyValue(v));
			false;
		}
	}
}

value2i(v : CoreValue) -> int {
	switch (v) {
		CoreInt(i): i;
		default: {
			println("ERROR: Expected int, not " + prettyValue(v));
			0;
		}
	}
}

value2d(v : CoreValue) -> double {
	switch (v) {
		CoreDouble(d): d;
		default: {
			println("ERROR: Expected double, not " + prettyValue(v));
			0.0;
		}
	}
}

value2s(v : CoreValue) -> string {
	switch (v) {
		CoreString(s): s;
		default: {
			println("ERROR: Expected string, not " + prettyValue(v));
			"";
		}
	}
}

value2array(v : CoreValue) -> [CoreValue] {
	switch (v) {
		CoreArray(values): values;
		default: {
			println("ERROR: Expected array, not " + prettyValue(v));
			[];
		}
	}
}

value2constructor(v : CoreValue) -> CoreConstructor {
	switch (v) {
		CoreConstructor(uid, values): v;
		default: {
			println("ERROR: Expected constructor, not " + prettyValue(v));
			CoreConstructor("", []);
		}
	}
}

flow2value(v : flow) -> CoreValue {
	if (isArray(v)) {
		a : [flow] = v;
		CoreArray(map(a, flow2value));
	} else if (isSameStructType(v, v)) {
		CoreConstructor(v.structname, map(extractStructArguments(v), flow2value));
	} else {
		tag = getDataTagForValue(v);
		if (tag == int_data_tag) {
			CoreInt(v)
		} else if (tag == double_data_tag) {
			CoreDouble(v);
		} else if (tag == bool_data_tag) {
			CoreBool(v)
		} else if (tag == string_data_tag) {
			CoreString(v);
		} else {
			println("ERROR: Unknown flow type: " + toString(v));
			CoreString(toString(v));
		}
	}
}

value2flow(v : CoreValue, onError : (string) -> void) -> flow {
	switch (v) {
		CoreBool(bool1): flow(bool1);
		CoreDouble(double1): flow(double1);
		CoreInt(int1): flow(int1);
		CoreString(string1): flow(string1);
		CoreArray(values): map(values, \vv -> value2flow(vv, onError))
		CoreConstructor(uid, values): {
			value = makeStructValue(uid, map(values, \vv -> value2flow(vv, onError)), IllegalStruct());
			if (value == IllegalStruct()) {
				onError("Could not create struct value for " + uid);
				v;
			} else {
				value;
			}
		}
	}
}
