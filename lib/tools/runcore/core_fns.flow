import tools/runcore/value_util;
import text/deserialize_string;
import string_utils;

export {
	andValue(l : CoreValue, r : CoreValue) -> CoreBool;
	orValue(l : CoreValue, r : CoreValue) -> CoreBool;
	notValue(l : CoreValue) -> CoreBool;

	// Also does string & array concatenation
	addValue(l : CoreValue, r : CoreValue) -> CoreValue;
	minusValue(l : CoreValue, r : CoreValue) -> CoreValue;
	mulValue(l : CoreValue, r : CoreValue) -> CoreValue;
	divideValue(l : CoreValue, r : CoreValue) -> CoreValue;
	modValue(l : CoreValue, r : CoreValue) -> CoreValue;

	// Spaceship returns -1, 0, 1
	compareValue(l : CoreValue, r : CoreValue) -> CoreInt;
	eqValue(l : CoreValue, r : CoreValue) -> CoreBool;
	neqValue(l : CoreValue, r : CoreValue) -> CoreBool;
	ltValue(l : CoreValue, r : CoreValue) -> CoreBool;
	leValue(l : CoreValue, r : CoreValue) -> CoreBool;
	gtValue(l : CoreValue, r : CoreValue) -> CoreBool;
	geValue(l : CoreValue, r : CoreValue) -> CoreBool;

	bool2int(l : CoreValue) -> CoreInt;
	int2bool(l : CoreValue) -> CoreBool;
	int2string(l : CoreValue) -> CoreString;
	double2string(l : CoreValue) -> CoreString;
	string2int(l : CoreValue) -> CoreInt;
	string2double(l : CoreValue) -> CoreDouble;
	// i2d & d2i


	corePrintln(l : CoreValue) -> CoreValue;

	coreCapitalize(l : CoreValue) -> CoreString;
	coreDecapitalize(l : CoreValue) -> CoreString;
	coreStrGlue(l : CoreValue, r : CoreValue) -> CoreString;

	stringLength(l : CoreValue) -> CoreInt;
	valueSubstring(l : CoreValue, start : CoreValue, length : CoreValue) -> CoreString;
	stringIndex(l : CoreValue, index : CoreValue) -> CoreString;

	coreStringContainsAt(str : CoreValue, index : CoreValue, substr : CoreValue) -> CoreBool;

	coreParsehex(l : CoreValue) -> CoreInt;
	coreUnescape(l : CoreValue) -> CoreString;
	coreEscape(l : CoreValue) -> CoreString;
	coreList2Array(l : CoreValue) -> CoreValue;

	arrayLength(l : CoreValue) -> CoreInt;
	arrayIndex(l : CoreValue, index : CoreValue) -> CoreValue;
	arraySubrange(l : CoreValue, start : CoreValue, end : CoreValue) -> CoreValue;
	arrayReverse(l : CoreValue) -> CoreArray;

	// CoreString to/from array of ints of chars
	string2ints(l : CoreValue) -> CoreArray;
	ints2string(l : CoreValue) -> CoreString;

	coreIsBool(l : CoreValue) -> CoreBool;
	coreIsInt(l : CoreValue) -> CoreBool;
	coreIsDouble(l : CoreValue) -> CoreBool;
	coreIsString(l : CoreValue) -> CoreBool;
	coreIsArray(l : CoreValue) -> CoreBool;
	coreIsConstructor(l : CoreValue) -> CoreBool;
	coreGetConstructor(l : CoreValue) -> CoreString;

	coreGetField(l : CoreValue, index : CoreValue) -> CoreValue;
	coreSetField(l : CoreValue, index : CoreValue, value : CoreValue) -> CoreValue;
}

andValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(value2b(l) && value2b(r))
}

orValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(value2b(l) || value2b(r))
}

notValue(l : CoreValue) -> CoreBool {
	CoreBool(!value2b(l))
}

addValue(l : CoreValue, r : CoreValue) -> CoreValue {
	switch (l) {
		CoreInt(li): CoreInt(li + value2i(r));
		CoreDouble(ld): CoreDouble(ld + value2d(r));
		CoreString(ls): CoreString(ls + value2s(r));
		CoreArray(ld): CoreArray(concat(ld, value2array(r)));
		default: {
			println("Expected int, double or string for +, not " + prettyValue(l));
			l
		}
	}
}

minusValue(l : CoreValue, r : CoreValue) -> CoreValue {
	switch (l) {
		CoreInt(li): CoreInt(li - value2i(r));
		CoreDouble(ld): CoreDouble(ld - value2d(r));
		default: {
			println("Expected int or double for -, not " + prettyValue(l));
			l
		}
	}
}

mulValue(l : CoreValue, r : CoreValue) -> CoreValue {
	switch (l) {
		CoreInt(li): CoreInt(li * value2i(r));
		CoreDouble(ld): CoreDouble(ld * value2d(r));
		default: {
			println("Expected int or double for *, not " + prettyValue(l));
			l
		}
	}
}

divideValue(l : CoreValue, r : CoreValue) -> CoreValue {
	switch (l) {
		CoreInt(li): CoreInt(li / value2i(r));
		CoreDouble(ld): CoreDouble(ld / value2d(r));
		default: {
			println("Expected int or double for /, not " + prettyValue(l));
			l
		}
	}
}

modValue(l : CoreValue, r : CoreValue) -> CoreValue {
	switch (l) {
		CoreInt(li): CoreInt(li % value2i(r));
		default: {
			println("Expected int for %, not " + prettyValue(l));
			l
		}
	}
}

compareValue(l : CoreValue, r : CoreValue) -> CoreInt {
	CoreInt(genericCompare(l, r))
}

eqValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(genericCompare(l, r) == 0)
}

neqValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(genericCompare(l, r) != 0)
}

ltValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(genericCompare(l, r) < 0)
}

leValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(genericCompare(l, r) <= 0)
}

gtValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(genericCompare(l, r) > 0)
}

geValue(l : CoreValue, r : CoreValue) -> CoreBool {
	CoreBool(genericCompare(l, r) >= 0)
}

int2string(l : CoreValue) -> CoreString {
	CoreString(i2s(value2i(l)))
}

int2bool(l : CoreValue) -> CoreBool {
	CoreBool(value2i(l) != 0)
}
bool2int(l : CoreValue) -> CoreInt {
	CoreInt(b2i(value2b(l)))
}


double2string(l : CoreValue) -> CoreString {
	CoreString(d2s(value2d(l)))
}

string2int(l : CoreValue) -> CoreInt {
	CoreInt(s2i(value2s(l)))
}

string2double(l : CoreValue) -> CoreDouble {
	CoreDouble(s2d(value2s(l)))
}

corePrintln(l : CoreValue) -> CoreValue {
	println(prettyValue(l));
	l
}

coreCapitalize(l : CoreValue) -> CoreString {
	CoreString(capitalize(value2s(l)))
}
coreDecapitalize(l : CoreValue) -> CoreString {
	CoreString(decapitalize(value2s(l)))
}
coreStrGlue(l : CoreValue, r : CoreValue) -> CoreString {
	CoreString(strGlue(map(value2array(l), value2s), value2s(r)))
}


stringLength(l : CoreValue) -> CoreInt {
	CoreInt(strlen(value2s(l)))
}

valueSubstring(l : CoreValue, start : CoreValue, length : CoreValue) -> CoreString {
	CoreString(substring(value2s(l), value2i(start), value2i(length)))
}

stringIndex(l : CoreValue, index : CoreValue) -> CoreString {
	CoreString(getCharAt(value2s(l), value2i(index)))
}

coreStringContainsAt(str : CoreValue, index : CoreValue, substr : CoreValue) -> CoreBool {
	CoreBool(strContainsAt(value2s(str), value2i(index), value2s(substr)))
}

coreParsehex(l : CoreValue) -> CoreInt {
	CoreInt(parseHex(value2s(l)))
}

coreUnescape(l : CoreValue) -> CoreString {
	CoreString(deserializeString(value2s(l)).first)
}

coreEscape(l : CoreValue) -> CoreString {
	CoreString(toString(value2s(l)))
}

arrayLength(l : CoreValue) -> CoreInt {
	CoreInt(length(value2array(l)))
}

arrayIndex(l : CoreValue, index : CoreValue) -> CoreValue {
	val = value2array(l);
	i = value2i(index);
	if (i < 0 || i >= length(val)) {
		println("Index out of range: " + i2s(i) + " for array of length " + i2s(length(val)));
		elementAt(val, 0, l);
	} else {
		val[i]
	}
}

arraySubrange(l : CoreValue, start : CoreValue, end : CoreValue) -> CoreValue {
	CoreArray(subrange(value2array(l), value2i(start), value2i(end)))
}

arrayReverse(l : CoreValue) -> CoreArray {
	CoreArray(reverseA(value2array(l)))
}

string2ints(l : CoreValue) -> CoreArray {
	CoreArray(map(s2a(value2s(l)), \v -> CoreInt(v)))
}

ints2string(l : CoreValue) -> CoreString {
	CoreString(superglue(value2array(l), \v -> fromCharCode(value2i(v)), ""))
}

coreIsBool(l : CoreValue) -> CoreBool {
	switch (l) {
		CoreBool(__): CoreBool(true);
		default: CoreBool(false)
	}
}

coreIsInt(l : CoreValue) -> CoreBool {
	switch (l) {
		CoreInt(__): CoreBool(true);
		default: CoreBool(false)
	}

}

coreIsDouble(l : CoreValue) -> CoreBool {
	switch (l) {
		CoreDouble(__): CoreBool(true);
		default: CoreBool(false)
	}

}

coreIsString(l : CoreValue) -> CoreBool {
	switch (l) {
		CoreString(__): CoreBool(true);
		default: CoreBool(false)
	}
}

coreIsArray(l : CoreValue) -> CoreBool {
	switch (l) {
		CoreArray(__): CoreBool(true);
		default: CoreBool(false)
	}
}

coreIsConstructor(l : CoreValue) -> CoreBool {
	switch (l) {
		CoreConstructor(__, __): CoreBool(true);
		default: CoreBool(false)
	}
}

coreGetConstructor(l : CoreValue) -> CoreString {
	switch (l) {
		CoreConstructor(id, __): CoreString(id);
		default: CoreString("");
	}
}


coreGetField(l : CoreValue, idx : CoreValue) -> CoreValue {
	switch (l) {
		CoreConstructor(uid, args): {
			index = value2i(idx);
			if (0 <= index && index < length(args)) {
				args[index];
			} else {
				println("Index out of range: " + i2s(index) + " for constructor " + uid + " with " + i2s(length(args)) + " arguments");
				l
			}
		}
		default: {
			println("Expected constructor, not " + prettyValue(l));
			l
		}
	}
}

coreSetField(l : CoreValue, idx : CoreValue, value : CoreValue) -> CoreValue {
	switch (l) {
		CoreConstructor(uid, args): {
			index = value2i(idx);
			if (0 <= index && index < length(args)) {
				CoreConstructor(uid, replace(args, index, value));
			} else {
				println("Index out of range: " + i2s(index) + " for constructor " + uid + " with " + i2s(length(args)) + " arguments");
				l
			}
		}
		default: {
			println("Expected constructor, not " + prettyValue(l));
			l
		}
	}
}

coreList2Array(l : CoreValue) -> CoreValue {
	switch (l) {
		CoreArray(__): l;
		CoreConstructor(u, a): flow2value(list2array(value2flow(l, println)));
		default: {
			println("Expected list or array in list2array, not " + prettyValue(l));
			l;
		}
	}
}
