// Unions
FcArgType ::= FcStructArg, FcFunArg;
FcBaseType ::= FcTypeVoid, FcTypeBool, FcTypeInt, FcTypeDouble, FcTypeString, FcTypeNative;
FcConst ::= FcVoid, FcDouble, FcInt, FcString, FcBool;
FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;
FcExp ::= FcLambda, FcCall, FcVar, FcLet, FcIf, FcSwitch, FcCast, FcSeq, FcCallPrim, FcConst, FcRequire, FcUnsafe;
FcPreloadedModule ::= FcParsed, FcLoaded;
FcPrim ::= FcOrPrim, FcAndPrim, FcNotPrim, FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim, FcArrayPrim, FcIndexPrim, FcDerefPrim, FcAssignPrim, FcRefPrim, FcStructPrim, FcFieldPrim, FcSetMutablePrim, FcCreateClosurePrim, FcQuote, FcUnquote;
FcType ::= FcBaseType, FcTypeArray, FcTypeFunction, FcTypeRef, FcTypeParameter, FcTypeFlow, FcTypeName, FcTypeStruct, FcTypeUnion, FcTypeVar;
FiConst ::= FiVoid, FiDouble, FiInt, FiString, FiBool;
FiDeclaration ::= FiFunctionDec, FiGlobalVar, FiNativeDec;
FiExp ::= FiLambda, FiCall, FiVar, FiLet, FiIf, FiSwitch, FiCast, FiSeq, FiCallPrim, FiConst, FiRequire, FiUnsafe;
FiExportSignature ::= FiTypeStruct, FiTypeUnion, FiType, FiExportNative;
FiNamed ::= FiDeclaration, FiStructOrUnion;
FiStructOrUnion ::= FiTypeStruct, FiTypeUnion;
FiToplevel ::= FiDeclaration, FiStructOrUnion;
FiType ::= FiTypeArray, FiTypeFunction, FiTypeRef, FiTypeParameter, FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeFlow, FiTypeVoid, FiTypeNative, FiTypeName;
GSubType ::= GNamed, GField;
GType ::= GBasicType, GFlow, GTypePar, GFunction, GArray, GRef, GTypeVar, GSubType;
List<?> ::= EmptyList, Cons<?>;
Maybe<?> ::= None, Some<?>;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
CompilerConfig(flowfile : string, includes : [string], objectFolders : [string], verbose : int, jsParams : JSCliParams, config : Tree<string, string>, threadId : int);
Cons(head : ?, tail : List<?>);
DependencyTracker(dependsUpon : Tree<?, Set<?>>, fileRequires : Tree<?, Set<?>>, nonDependent : Set<?>);
EmptyList();
FcAndPrim();
FcArrayPrim();
FcAssignPrim();
FcBool(b : bool, info : FcInfo);
FcCall(f : FcExp, args : [FcExp], info : FcInfo);
FcCallPrim(op : FcPrim, es : [FcExp], info : FcInfo);
FcCase(struct : string, argNames : [string], body : FcExp, info : FcInfo);
FcCast(e : FcExp, tFrom : FcType, tTo : FcType, info : FcInfo);
FcCheckMutable(field : string, type : FcType, info : FcInfo2);
FcCheckStructs(names : [string], open : bool, t : FcType, info : FcInfo2);
FcCreateClosurePrim(structName : string, functionName : string);
FcDerefPrim();
FcDivPrim();
FcDouble(d : double, info : FcInfo);
FcEqPrim();
FcError(message : string, positions : [FcPosition]);
FcExpectOneOf(types : [FcBaseType], type : FcType, info : FcInfo2);
FcFieldPrim(name : string);
FcFileInfo(flowfile : string, trampstamp : double, fullpath : string, md5sum : string, content : string, gensymid : int, filesize : double);
FcForbid(flowfile : string, start : int, end : int);
FcFunArg(name : string, type : FcType);
FcFunArg2(name : string, type : Maybe<FcType>);
FcFunctionDec(name : string, lambda : Maybe<FcLambda>, declType : FcTypeFunction2, declInfo : FcInfo, defiInfo : FcInfo);
FcGePrim();
FcGlobalNames(struct2module : Tree<string, string>, union2module : Tree<string, string>, function2module : Tree<string, string>, globalVar2module : Tree<string, string>, native2module : Tree<string, string>, structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, struct2unions : Tree<string, [string]>, field2structs : Tree<string, [string]>, toplevel : Tree<string, FcDeclaration>, structTypars : Tree<string, int>, moduleImports : Tree<string, Set<string>>);
FcGlobalVar(name : string, value : Maybe<FcExp>, declInfo : FcInfo, bodyInfo : FcInfo);
FcGtPrim();
FcIf(e1 : FcExp, e2 : FcExp, e3 : FcExp, info : FcInfo);
FcImport(flowfile : string, dynamic : bool, start : int, end : int);
FcIndexPrim();
FcInfo(type : ref Maybe<FcType>, start : int, end : int);
FcInfo2(start : int, end : int);
FcInt(i : int, info : FcInfo);
FcLambda(args : [FcFunArg], body : FcExp, info : FcInfo);
FcLePrim();
FcLet(name : string, type : FcType, e1 : FcExp, e2 : FcExp, info : FcInfo);
FcLoaded(module : FiModule, dependencyChanged : () -> bool);
FcLtPrim();
FcMinusPrim();
FcModPrim();
FcModule(fileinfo : FcFileInfo, imports : [FcImport], forbids : [FcForbid], exports : Set<string>, structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, functions : Tree<string, FcFunctionDec>, globalVars : Tree<string, FcGlobalVar>, natives : Tree<string, FcNativeDec>, initOrder : [string], stringIncludes : [FiFileInfo], errors : [FcError], typevarid : int, isCached : bool, start : int, end : int, allImports : Set<string>);
FcMulPrim();
FcNativeDec(name : string, io : bool, type : FcType, nativeName : string, flowfallback : Maybe<FcFunctionDec>, info : FcInfo);
FcNePrim();
FcNegPrim();
FcNotPrim();
FcOrPrim();
FcParsed(fileinfo : FcFileInfo, syntaxtree : SyntaxTree, imports : [FcImport], forbids : [FcForbid], oldExports : Tree<string, FiExportSignature>);
FcPlusPrim();
FcPosition(file : string, start : int, end : int);
FcQuote();
FcRefPrim();
FcRequire(flowfile : string, e : FcExp, info : FcInfo);
FcSeq(es : [FcExp], info : FcInfo);
FcSetMutablePrim(name : string);
FcString(s : string, info : FcInfo);
FcStructArg(name : string, type : FcType, ismutable : bool);
FcStructPrim(struct_name : string);
FcSwitch(x : FcVar, switchType : FcType, cases : [FcCase], info : FcInfo);
FcTypeArray(t : FcType, info : FcInfo2);
FcTypeBool(info : FcInfo2);
FcTypeDouble(info : FcInfo2);
FcTypeFlow(info : FcInfo2);
FcTypeFunction(args : [FcFunArg], returnType : FcType, info : FcInfo2);
FcTypeFunction2(args : [FcFunArg2], returnType : Maybe<FcType>, info : FcInfo2);
FcTypeInt(info : FcInfo2);
FcTypeName(name : string, typeparameters : [FcType], info : FcInfo2);
FcTypeNative(info : FcInfo2);
FcTypeParameter(n : string, info : FcInfo2);
FcTypeRef(t : FcType, info : FcInfo2);
FcTypeString(info : FcInfo2);
FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : FcInfo2);
FcTypeUnion(name : string, typeparameters : [FcType], typenames : [FcTypeName], info : FcInfo2);
FcTypeVar(id : int, info : FcInfo2);
FcTypeVoid(info : FcInfo2);
FcUnquote();
FcUnsafe(name : string, fallback : FcExp, info : FcInfo);
FcVar(name : string, info : FcInfo);
FcVerifyType(type : FcType, declared : FcType, description : string, info : FcInfo2, e : FcExp);
FcVoid(info : FcInfo);
FiBool(b : bool, start : int);
FiCall(f : FiExp, args : [FiExp], type : FiType, start : int);
FiCallPrim(op : FcPrim, es : [FiExp], type : FiType, start : int);
FiCase(struct : string, argNames : [string], body : FiExp, start : int);
FiCast(e : FiExp, tFrom : FiType, tTo : FiType, type : FiType, start : int);
FiDouble(d : double, start : int);
FiExpTraverseEnv(parents : List<Pair<FiExp, int>>, locals : Tree<string, FiVar>, args : Tree<string, FiVar>, lets : Tree<string, FiLet>, returns : bool);
FiExportNative(io : bool, type : FiType, nativeName : string);
FiFileInfo(flowfile : string, trampstamp : double, fullpath : string, md5sum : string, filesize : double, lastupdate : double);
FiForbid(flowfile : string, start : int);
FiFunArg(name : string, type : FiType);
FiFunctionDec(name : string, lambda : FiLambda, type : FiTypeFunction, declStart : int, defiStart : int);
FiGlobalNames(struct2module : Tree<string, string>, union2module : Tree<string, string>, function2module : Tree<string, string>, globalVar2module : Tree<string, string>, native2module : Tree<string, string>, structs : Tree<string, FiTypeStruct>, unions : Tree<string, FiTypeUnion>, toplevel : Tree<string, FiDeclaration>);
FiGlobalVar(name : string, value : FiExp, type : FiType, declStart : int, defiStart : int);
FiIf(e1 : FiExp, e2 : FiExp, e3 : FiExp, type : FiType, start : int);
FiImport(flowfile : string, dynamic : bool, start : int);
FiInt(i : int, start : int);
FiLambda(args : [FiFunArg], body : FiExp, type : FiTypeFunction, start : int);
FiLet(name : string, type : FiType, e1 : FiExp, e2 : FiExp, type2 : FiType, start : int);
FiModule(fileinfo : FiFileInfo, imports : [FiImport], forbids : [FiForbid], exports : [string], structs : [FiTypeStruct], unions : [FiTypeUnion], functions : [FiFunctionDec], globalVars : [FiGlobalVar], natives : [FiNativeDec], initOrder : [string], stringIncludes : [FiFileInfo], start : int, end : int, allImports : Set<string>, incremental : bool);
FiNativeDec(name : string, io : bool, type : FiType, nativeName : string, fallbackLambda : FiExp, declStart : int, defiStart : int);
FiProgram(config : CompilerConfig, modules : Tree<string, FiModule>, traversal : [string], names : FiGlobalNames);
FiRequire(flowfile : string, e : FiExp, type : FiType, start : int);
FiSeq(es : [FiExp], type : FiType, start : int);
FiString(s : string, start : int);
FiStructArg(name : string, type : FiType, ismutable : bool);
FiSwitch(x : FiVar, switchType : FiType, cases : [FiCase], type : FiType, start : int);
FiTypeArray(t : FiType);
FiTypeBool();
FiTypeDouble();
FiTypeFlow();
FiTypeFunction(args : [FiFunArg], returnType : FiType);
FiTypeInt();
FiTypeName(name : string, typeparameters : [FiType]);
FiTypeNative();
FiTypeParameter(n : string);
FiTypeRef(t : FiType);
FiTypeString();
FiTypeStruct(name : string, typars : [FiType], args : [FiStructArg], start : int);
FiTypeUnion(name : string, typeparameters : [FiType], typenames : [FiTypeName], start : int);
FiTypeVoid();
FiUnsafe(name : string, fallback : FiExp, type : FiType, start : int);
FiVar(name : string, type : FiType, start : int);
FiVoid(start : int);
FlowcAcc(dependency : DependencyTracker<string>, preloaded : Tree<string, FcPreloadedModule>, modules : Tree<string, FiModule>, file2flowfile : Tree<string, string>, traversal : [string], names : FcGlobalNames, config : CompilerConfig, tyvarIdFactory : IdFactory, tyvarIdGroup : IdGroup, tracer : Tracer);
GArray(type : GType);
GBasicType(t : FcBaseType);
GField(name : string, type : GType);
GFlow();
GFunction(args : [GType], rt : GType);
GNamed(name : string, typars : [GType]);
GRef(type : GType);
GTypePar(id : string);
GTypeVar(id : int);
IdFactory(id : ref int, bucketsize : int);
IdGroup(id : ref int, lastid : ref int, factory : IdFactory);
JSCliParams(jsfile : string, esfile : string, typescriptFile : string, debug : bool, code : bool, modules : string, comments : bool, node : bool, webmodule : bool, isES6 : bool, isTypeScript : bool, tsProcess : TypeScriptProcessing, readable : bool, beautify : bool, sourcemap : bool, verbose : int, nwjs : bool, fontconfig : string, dcePreservedNames : Set<string>, dceRemoveMain : bool, jslibraryObject : string, callMain : bool);
None();
Pair(first : ?, second : ??);
Set(tree : Tree<?, bool>);
Some(value : ?);
SyntaxTree(rule : int, choice : int, start : int, end : int, children : [[SyntaxTree]]);
TraceEntry(name : string, category : string, phase : string, tid : int, time : double);
Tracer(startTime : double, lines : List<TraceEntry>);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
TypeScriptProcessing(typeBuffer : string, voidReturn : bool, antiTS : bool);

buildSet(a0:[?]) -> Set<?> {Set(TreeEmpty())};
concat(a0:[?], a1:[?]) -> [?] {[]};
concat3(a0:[?], a1:[?], a2:[?]) -> [?] {[]};
containsKeyTree(a0:Tree<?, ??>, a1:?) -> bool {false};
containsSet(a0:Set<?>, a1:?) -> bool {false};
filter(a0:[?], a1:(?) -> bool) -> [?] {[]};
filtermap(a0:[?], a1:(?) -> Maybe<??>) -> [??] {[]};
fold(a0:[?], a1:??, a2:(??, ?) -> ??) -> ?? {a1};
foldTree(a0:Tree<?, ??>, a1:???, a2:(?, ??, ???) -> ???) -> ??? {a1};
lookupTreeDef(a0:Tree<?, ??>, a1:?, a2:??) -> ?? {a2};
makeTree() -> Tree<?, ??> {TreeEmpty()};
map(a0:[?], a1:(?) -> ??) -> [??] {[]};
mapTree(a0:Tree<?, ??>, a1:(??) -> ???) -> Tree<?, ???> {TreeEmpty()};
mapTree2(a0:Tree<?, ??>, a1:(?, ??) -> ???) -> Tree<?, ???> {TreeEmpty()};
refArrayPush(a0:ref [?], a1:?) -> void {{}};
setTree(a0:Tree<?, ??>, a1:?, a2:??) -> Tree<?, ??> {TreeEmpty()};
fiResolveNatives(program : FiProgram, has_native_implementation: (string) -> bool, stub_missing: (string) -> bool) -> Pair<FiProgram, [FiNativeDec]> {
	// Convert a function into native. Used to make implicit natives.
	func2nat = \func -> FiNativeDec(func.name, false, func.type, func.name, FiVoid(0), 0, 0);
	// Convert a native to a stub, which causes a runtime error.
	nat2func = \nat: FiNativeDec, type : FiTypeFunction -> {
		natFn = switch (nat.type) {
			FiTypeFunction(args, rt): FiTypeFunction(args, type.returnType);
			default: {
				FiTypeFunction([], nat.type);
			}
		}
		FiFunctionDec(nat.name,
			FiLambda(type.args,
				// Crash when called.
				FiCall(
					FiVar("fail0",
						FiTypeFunction([FiFunArg("arg1", FiTypeString())], type.returnType),
						nat.declStart
					),
					[FiString("Native '" + nat.name + "' is not implemented, but called. Execution of program aborted.", nat.declStart)],
					type.returnType,
					nat.declStart
				),
				type, nat.declStart
			),
			natFn, 0, 0
		);
	}	// for each function name decide: if it is a true native or should use a fallback
	native_resolver = foldTree(program.modules, makeTree(), \__, module, acc: Tree<string, FiDeclaration> ->
		fold(module.natives,
			fold(module.functions, acc, 
				\ac, func -> setTree(ac, func.name, 
					if (has_native_implementation(func.name)) func2nat(func) else func
				)
			),
			\ac, nat: FiNativeDec -> if (!has_native_implementation(nat.name)) {
				if (containsKeyTree(program.names.function2module, nat.name)) ac else {
					if (!stub_missing(nat.name)) ac else {
						type = nat.type;
						switch (type) {
							FiTypeFunction(__,__): {
								// make a stub
								fn : FiFunctionDec = nat2func(nat, type);
								setTree(ac, nat.name, fn);
							}
							default: {
								// Native is not a function (?...)
								ac;
							}
						}
					}
				}
			} else {
				setTree(ac, nat.name, FiNativeDec(nat with fallbackLambda = FiVoid(0)))
			}
		)
	);
	missing_nats = ref [];
	resolved = FiProgram(program with
		modules = mapTree(program.modules, \module -> {
			// Filter out fallbacks for non-true natives
			real_funcs = filter(module.functions, \func -> !has_native_implementation(func.name));
			// Those function, which have a native implementation although are not declared as natives
			implicit_natives = filtermap(module.functions, \func -> 
				if (has_native_implementation(func.name) && !containsKeyTree(program.names.native2module, func.name)) {
					Some(func2nat(func));
				} else {
					None();
				}
			);
			func_names = map(real_funcs, \fn -> fn.name);
			func_names_set = buildSet(func_names);
			// Filter out true natives
			nats = concat(
				implicit_natives,
				filtermap(module.natives, \nat -> if (!has_native_implementation(nat.name)) None() else
					Some(FiNativeDec(nat with fallbackLambda = FiVoid(0)))
				)
			);
			// Those natives, which are not implemented, but may be stubbed as functions, which crash immediately when called.
			native_stubs = filtermap(module.natives, \nat ->
				if (!has_native_implementation(nat.name) && !containsKeyTree(program.names.function2module, nat.name)) {
					// This native is missing - has no fallback
					refArrayPush(missing_nats, nat);
					if (stub_missing(nat.name)) {
						type = nat.type;
						switch (type) {
							FiTypeFunction(__,__): {
								// Make a stub.
								Some(nat2func(nat, type));
							}
							default: {
								// We can't stub non-function natives.
								None();
							}
						}
					} else {
						// Leave as is.
						None();
					}
				} else {
					// Native is either implemented or has a fallback
					None();
				}
			);
			nat_names = map(nats, \nat -> nat.name);			
			func_nat_names = buildSet(concat(func_names, nat_names));
			// Filter out variables from initOrder
			vars_names = filter(module.initOrder, \n -> !containsSet(func_nat_names, n));
			FiModule(module with
				functions = concat(real_funcs, native_stubs),
				natives = nats,
				initOrder = concat3(nat_names, func_names, vars_names)
			)
		}),
		names = FiGlobalNames(program.names with
			// update toplevel declarations with proper ones
			toplevel = mapTree2(program.names.toplevel, \name, decl -> lookupTreeDef(native_resolver, name, decl))
		)
	);
	Pair(resolved, ^missing_nats);
}

