native println2 : io (flow) -> void = Native.println;

// This is inferred to be flow -> void, instead of polymorphic!
println(str : ?) -> void {
	println2(cast(str : ? -> flow));
}

native println : io (?) -> void = Native.println;

i2s : (int) -> string;
native i2s : (int) -> string = Native.i2s;

i2s(i) { cast(i : int -> string); }

fn2(end : int, acc : int) -> void {
	println("fn2");
	if (acc < 0 || acc > 10) {
		println(end);
	} else {
		println(acc);
		fn2(end, acc + 1)
	}
}

fn3(end : int, acc : int) -> void {
	if (acc < 0 || acc > 10) {
		println("fn3 END");
	} else {
		println("start fn4 from "+ i2s(end));
		fn4(end, \-> fn3(end - 1, acc + 1))
	}
}

fn4(v : int, callback : () -> void) -> void {
	if (v > 0) {
		fn4(v -1, callback)
	} else {
		println("done fn4");
		callback()
	}
}
