// Unions
Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;
DNode<?> ::= DEnd, DLink<?>;
FBehaviour<?> ::= FDestroyed, FInitialized<?>;
FFn<?, ??> ::= FLift<?, ??>, FCompose<?, ??>, FIdentity, FNegate, FAddConst, FMulConst, FMaxConst<??>, FMinConst<??>, FEqual<?>, FIf<??>;
FFn2<?, ??, ???> ::= FLift2<?, ??, ???>, FIdentity2, FAddition, FSubtract, FMultiply, FDivide, FMax, FMin, FusionAnd, FusionOr, FusionXor, FusionWidthHeight;
Transform<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>, FSelect<?>, FSelect2<?>, FSubSelect<?>, Behaviour<?>, FConstructable<?>;

// Structs
ConstBehaviour(constv : ?);
DEnd();
DLink(v : ?, before : DNode<?>, after : DNode<?>, attached : bool);
DList(first : DNode<?>, last : DNode<?>);
DynamicBehaviour(value : ref ?, subscribers : DList<(?) -> void>);
FAddConst(c : double);
FAddition();
FCompose(f1 : FFn<flow, ??>, f2 : FFn<?, flow>);
FConstructable(b : Transform<?>, constructor : () -> () -> void, mutable beh : FBehaviour<?>);
FDestroyed();
FDivide();
FEqual(v : ?);
FIdentity();
FIdentity2();
FIf(then : ?, else_ : ?);
FInitialized(subs : ref int, disp : () -> void, dyn : DynamicBehaviour<?>);
FLift(fn : (?) -> ??);
FLift2(fn : (?, ??) -> ???);
FMax();
FMaxConst(c : ?);
FMin();
FMinConst(c : ?);
FMulConst(c : double);
FMultiply();
FNegate();
FSelect(b : Transform<flow>, fn : FFn<flow, ?>, mutable beh : FBehaviour<?>);
FSelect2(b1 : Transform<flow>, b2 : Transform<flow>, fn : FFn2<flow, flow, ?>, mutable beh : FBehaviour<?>);
FSubSelect(b : Transform<flow>, fn : FFn<flow, Transform<?>>, mutable beh : FBehaviour<?>);
FSubtract();
FusionAnd(lazy : bool);
FusionOr(lazy : bool);
FusionWidthHeight();
FusionXor();
Pair(first : ?, second : ??);

lower(a : Transform<?>) -> Behaviour<?> {
	cast(a : Transform<?> -> Behaviour<?>);
}

make(a0:?) -> DynamicBehaviour<?> {DynamicBehaviour(ref a0, DList(DEnd(), DEnd()))};

doFuseDynamic(t : Transform<?>) -> void {
	switch (t : Transform<?>) {
		FSelect(b, fn, beh): {
			switch (b : Transform<flow>) {
				DynamicBehaviour(dv, __): {
					dyn = make(^dv);
					disp = \ -> {};

					t.beh ::= FInitialized(ref 1, disp, dyn);
					Pair(dyn, disp)
				}
				default: {
					dyn = lower(b);
					Pair(dyn, \ -> {})
				}
			}
			{}
		}
		default: {}
	}
}
