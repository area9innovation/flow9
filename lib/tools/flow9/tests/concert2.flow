import ds/tree;
export {
	// This is an attempt at making a monster editor
	Concert ::=
		CValue,
		CArray, CHierarchy, CTable, CCanvas, CKeyValue, CObject, 

		CGraphics,
		CEditor, CMonacoEditor,

		CSet, CVar, CLet, CFormula,
		CCall, CCallBuiltin, CLambda,
		CIf, CSequence, CQuote, CUnquote,

		CExternal, CAsCode, CHTML
		; 

	// Atomic values or variable
	CValueOrVar ::= CValue, CVar;

	//
	// Values
	//

	CValue ::= CEmpty, CBool, CInt, CDouble, CText, CHumanText;

	CEmpty();
	CBool(value : bool);
	CInt(value : int);
	CDouble(value : double);
	CText(value : string);
	// For text that should be translated
	CHumanText(value : string, language : string);

	// Date/time?

	//
	// Data structures
	//

	// Array: Lines, cols, paragraph, wrapping lines, wrapping columns, pagination, sorting
	CArray(view : CArrayViewOptions, children : [Concert]); // , pagination : CPagination, sorting : CSorting);
		// If there is no max, set it to 0
		CArrayViewOptions ::= CArrayView, CArrayViewExtended;
			CArrayView(maxCols : int, maxLines : int);
			CArrayViewExtended(maxCols : int, maxLines : int, framed : bool, baseline : bool, allowFillers : bool);

	CHierarchy(value : Concert, view : CHierarchyView, children : [Concert]);
		CHierarchyView ::= CComapHierarchy, CTreeHierarchy;
			CComapHierarchy();
			CTreeHierarchy();
			// Split-tree view, a la Mac Finder/Shift
			// Org. chart is the same, just rotated
			// Circle packing
			// Sunburst
			// Menu
			// Kanban

	// How to get alignment for table-like elements in a hierarchy?

	CTable(cells : [[Concert]]);
			// Data table
			// Spreadsheet (coordinates)

	// A rectangular region, where we scale and rotate the children
	CCanvas(
		// Where to place the children
		x : CValueOrVar, y : CValueOrVar,
		// The size of the canvas for the children
		minWidth : CValueOrVar, minHeight : CValueOrVar,
		maxWidth : CValueOrVar, maxHeight : CValueOrVar,
		// Scaling for the children
		scalex : CValueOrVar, scaley : CValueOrVar,
		// Rotate for the children around their top,left point?
		rotation : CValueOrVar,
		// Outside canvas - crop, scroll, visible
		overflow : COverflowStyle,
		// Any children to include. These are in z-order on top of each other
		children : [Concert]
	);

		// Overflow css-like style for CCanvas
		COverflowStyle ::= COverflowCrop, COverflowVisible, COverflowScroll, COverflowCustom;

			// Crop content out of bounds
			COverflowCrop : ();
			// Show content out of bounds
			COverflowVisible : ();
			// Add scroll for out of bounds  content
			COverflowScroll : ();
			// Style that allows to add custom styles to canvas of type which provided in field "overflow"
			COverflowCustom : (styles : CObject);


	// A named value
	CKeyValue(key : string, value : Concert);

	// Object is key/values: Data table, tabs, steppers
	CObject(values : Tree<string, Concert>);


	//
	// Graphics
	//

	// TODO: Arrow parts
	CGraphics(dimensionalParameters : CObject);

	// Icon
	// Picture
	// Video
	// Views: Thumbnail

	// An editor itself
	CEditor(parameters : [Concert]);
	// parameters
	// name : string,	// name can be empty only if no events interaction is expected. Otherwise events won't reach the editor.
	// isNested : bool, // The editor can be either nested - an element inside some host editor, or separate - completely on its own
	// width : double,	// If size is ommitted it will take up all available space
	// height : double,
	// isRunner : bool, // behaves like a runner and evaluates its content
	// showPropertyPanel : bool,
	// showBreadcrumps : bool,
	// showToolbar : bool,
	// isStatic : bool,
	// autocollapseOnFocus : bool,
	// collapsable : bool,
	// displayMode : bool,
	// varName : string,
	// focusBarName : string, 	// content to display in focus bar
	// scope : [string] // a list of glocal variables to bind between the outer editor and the new editor
	// envDisposerVar: string	// a variable to control environment disposing. Should be initialized with "false", when it becomes "true" the env is disposed

	// Monaco editor
	CMonacoEditor(readonly : bool, value : CValueOrVar);

	// Events from the editor
	// Create document:
	// - Take the prototyped. Access rights for this. Restrict rights for current document. Share with group.
	// - Create from template. We have a fixed list of types to choose from. Defined by programmers.
	// Delete document

	// Share dialog


	// Update a bound value
	CSet(name : string, value : Concert, pos : ConcertPos);
	// Variable reference
	CVar(name : string, pos : ConcertPos);
	// Local variable
	CLet(name : string, value : Concert, body : Concert, pos : ConcertPos);
	// A formula which is continually updated, accessible by a name
	CFormula(name : string, value : Concert);

	CCall(fn : Concert, children : [Concert], pos : ConcertPos);
	CCallBuiltin(name : string, children : [Concert], pos : ConcertPos);
	CLambda(args : [string], body : Concert);

	CIf(cond : Concert, then : Concert, elsec : Concert, pos : ConcertPos);
	CSequence(children : [Concert]);
	CQuote(body : Concert);
	CUnquote(body : Concert, pos : ConcertPos);

	// Go to. CSetFocus(concert)

	// Invariants
	// leads : on/off;
	// analyzing : off/on;
	// invariant (leds == off && analyzing = off) || (leds == on);
	//	analyzing => leds == on

	// Trigger: Some event happens, including LXP or other learning events

	// Scripting, client-side & server-side
	// - Allow anything, given that it is written by programmers. Any user id is fine.
	// - Access key rule for server-side script
	// - Require a user id for execution server-side to be used to run it with the correct rights
	//   Has to be a user-id from the set of people that have access to the originating document.
	// - Role based rights?
	// - Run as the user that initiates the script, even if it is in the future, but check the
	//   rights at that point in time. Maybe allow this at runtime after explicit approval

	// Add/edit users

	// Database table definition, access rights. Maybe allow this at runtime after explicit approval
	// Query (SSql)

	// Send email: to, cc, bcc, subject, reply-to, attachment, body

	// Assignments: This is probably a new type.

	// Wait: Time span or fixed date, display while waiting.

	// In any order: CInAnyOrder(concerts, allowParallel : bool)

	// Repeat: CRepeat(lambda, untilcond : concert)

	// Change language
	// Error handler
	// Embed website/iframe
	// API request
	// Sub-process/case

	// Search

	// For externally defined constructs
	CExternal(name : string, dimensionalParameters : CObject, children : [Concert]);

	CAsCode(syntax : string, parsed : Concert);

	CHTML(innerHTML : string, evaluate : bool, children : [Concert]);

	// No size, each element has its own defaults for it
	zeroConcertPosition = keyValues2cobject([
		CKeyValue("positionX", CDouble(0.0)),
		CKeyValue("positionY", CDouble(0.0)),
	]);

	ConcertPos(source : string, line : int, column : int);
	zeroConcertPos = ConcertPos("", 0, 0);

	makeCObject() -> CObject;
	keyValues2cobject(value : [CKeyValue]) -> CObject;
	cobject2keyValues(c : CObject) -> [CKeyValue];
	cobjectValues2keyValues(values : Tree<string, Concert>) -> [CKeyValue];
}

makeCObject() -> CObject {
	CObject(makeTree())
}

keyValues2cobject(value : [CKeyValue]) -> CObject {
	CObject(pairs2tree(map(value, \kv -> Pair(kv.key, kv.value))))
}

cobject2keyValues(c : CObject) -> [CKeyValue] {
	cobjectValues2keyValues(c.values) 
}

cobjectValues2keyValues(values : Tree<string, Concert>) -> [CKeyValue] {
	convertTreeToArray(values, \k, v -> CKeyValue(k, v))
}

getConcertPairs1() -> [Pair<string, Concert>] {
	[
	]; 
}

getConcertPairs2() -> [Pair<string, Concert>] {
	[
//		Pair("MorphingAnimation", CLambda(["obj"], CLet("start", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("start"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Line", zeroConcertPos), [CDouble(200.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("end", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("end"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CDouble(200.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CDouble(0.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("duration", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("duration"), CDouble(5.0)], zeroConcertPos), CLet("triggerName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("triggerName"), CText("")], zeroConcertPos), CLet("easing", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("easing"), CText("ease")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("triggerName", CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("triggerName0", zeroConcertPos), zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("shapeName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("progressName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressName", zeroConcertPos), CDouble(0.0)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("shapeName", zeroConcertPos), CCall(CVar("wrapInSnippet", zeroConcertPos), [CText("idfnSnippet"), CObject(TreeNode("element", CCall(CVar("morphGraphics", zeroConcertPos), [CVar("start", zeroConcertPos), CVar("end", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("progressName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("progressName", zeroConcertPos)])], zeroConcertPos), CLet("animation", CCallBuiltin("External", [CText("Animator"), CArray(CArrayView(0, 0), [CObject(TreeNode("duration", CVar("duration", zeroConcertPos), TreeNode("contentName", CVar("shapeName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("progressName", CVar("progressName", zeroConcertPos), TreeNode("easing", CVar("easing", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CVar("triggerName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("timer", zeroConcertPos), [CInt(0), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("editView", CVar("start", zeroConcertPos), TreeNode("displayView", CVar("animation", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), zeroConcertPos)])])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
//		Pair("NamedValueAnimation", CLambda(["obj"], CLet("name", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("name"), CText("var")], zeroConcertPos), CLet("from", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("from"), CDouble(0.0)], zeroConcertPos), CLet("to", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("to"), CDouble(100.0)], zeroConcertPos), CLet("duration", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("duration"), CDouble(10.0)], zeroConcertPos), CLet("triggerName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("triggerName"), CText("")], zeroConcertPos), CLet("easing", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("easing"), CText("ease")], zeroConcertPos), CLet("loop", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("loop"), CText("none")], zeroConcertPos), CLet("resetTriggerName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("resetTriggerName"), CText("")], zeroConcertPos), CLet("range", CCallBuiltin("-", [CVar("to", zeroConcertPos), CVar("from", zeroConcertPos)], zeroConcertPos), CLet("triggerName", CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("triggerName0", zeroConcertPos), zeroConcertPos), CLet("resetTriggerName", CIf(CCallBuiltin("==", [CVar("resetTriggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("resetTriggerName0", zeroConcertPos), zeroConcertPos), CLet("restartAnimation", CLambda([], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos)])), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("resetTriggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CLet("progressName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressName", zeroConcertPos), CDouble(0.0)], zeroConcertPos), CLet("progressFn", CCall(CVar("createVar", zeroConcertPos), [CVar("idfn", zeroConcertPos)], zeroConcertPos), CLet("directionFlag", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), CSequence([CCall(CVar("subscribe2", zeroConcertPos), [CVar("resetTriggerName", zeroConcertPos), CLambda(["t"], CIf(CCallBuiltin("&&", [CVar("t", zeroConcertPos), CCallBuiltin("==", [CVar("loop", zeroConcertPos), CText("alternate")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressFn", zeroConcertPos), CVar("idfn", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("directionFlag", zeroConcertPos), CBool(false)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("name", zeroConcertPos), CVar("from", zeroConcertPos)], zeroConcertPos)])]), CEmpty(), zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("subscribe2", zeroConcertPos), [CVar("progressName", zeroConcertPos), CLambda(["progress"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("name", zeroConcertPos), CCallBuiltin("+", [CVar("from", zeroConcertPos), CCallBuiltin("*", [CCall(CCall(CVar("getVar", zeroConcertPos), [CVar("progressFn", zeroConcertPos)], zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("progressName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("range", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("!=", [CVar("loop", zeroConcertPos), CText("none")], zeroConcertPos), CCallBuiltin("==", [CVar("progress", zeroConcertPos), CDouble(1.0)], zeroConcertPos)], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("loop", zeroConcertPos), CText("alternate")], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressFn", zeroConcertPos), CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("directionFlag", zeroConcertPos)], zeroConcertPos), CVar("idfn", zeroConcertPos), CLambda(["val"], CCallBuiltin("-", [CInt(1), CVar("val", zeroConcertPos)], zeroConcertPos)), zeroConcertPos)], zeroConcertPos), CCall(CVar("updateVar", zeroConcertPos), [CVar("directionFlag", zeroConcertPos), CLambda(["f"], CCallBuiltin("not", [CVar("f", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)]), CEmpty(), zeroConcertPos), CCall(CVar("restartAnimation", zeroConcertPos), [], zeroConcertPos)]), CEmpty(), zeroConcertPos)]))], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("timer", zeroConcertPos), [CInt(0), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CSequence([CCall(CVar("makeEasing", zeroConcertPos), [CVar("duration", zeroConcertPos), CVar("easing", zeroConcertPos), CVar("triggerName", zeroConcertPos), CVar("resetTriggerName", zeroConcertPos), CVar("progressName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("Empty", [], zeroConcertPos), TreeNode("chip", CText("Named value animation"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editView", CVar("name", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)])])])]), zeroConcertPos), zeroConcertPos)]), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("OneshotAnimation", CLambda(["c", "duration", "delay", "externalTrigger", "props"], CLet("easing", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("easing"), CText("ease")], zeroConcertPos), CLet("fade", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("fade"), CBool(false)], zeroConcertPos), CLet("translate", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("translate"), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("rotate", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("rotate"), CDouble(0.0)], zeroConcertPos), CLet("scale", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("scale"), CCall(CVar("Factor", zeroConcertPos), [CDouble(1.0), CDouble(1.0)], zeroConcertPos)], zeroConcertPos), CLet("centerMode", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("centerMode"), CBool(true)], zeroConcertPos), CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CLet("triggerName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("displayTrigger", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CLet("animation", CCallBuiltin("External", [CText("Animator"), CArray(CArrayView(0, 0), [CObject(TreeNode("fade", CVar("fade", zeroConcertPos), TreeNode("duration", CCallBuiltin("/", [CVar("duration", zeroConcertPos), CInt(1000)], zeroConcertPos), TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("easing", CVar("easing", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("translateAnimation", CObject(TreeNode("type", CVar("translate", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("rotateAnimation", CObject(TreeNode("centerMode", CVar("centerMode", zeroConcertPos), TreeNode("angle", CVar("rotate", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("scaleAnimation", CObject(TreeNode("centerMode", CVar("centerMode", zeroConcertPos), TreeEmpty(), TreeNode("factor", CVar("scale", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("triggerName", CVar("triggerName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), CSequence([CIf(CCallBuiltin("!=", [CVar("externalTrigger", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("onVarChange", zeroConcertPos), [CVar("externalTrigger", zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CLet("f", CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("timer", zeroConcertPos), [CInt(0), CLambda([], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("displayTrigger", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("triggerName", zeroConcertPos)], zeroConcertPos)])])]))], zeroConcertPos), CVar("animation", zeroConcertPos)]), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("displayTrigger", zeroConcertPos)])], zeroConcertPos), CSequence([CIf(CCallBuiltin(">=", [CVar("delay", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("timer", zeroConcertPos), [CVar("delay", zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CVar("f", zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
	];
} 

getConcertPairs4() -> [Pair<string, Concert>] {
	[
		Pair("PPChildEditing", CLambda(["obj"], CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos)], zeroConcertPos), CLet("deactivateFnName", CCall(CVar("createVar", zeroConcertPos), [CVar("nop", zeroConcertPos)], zeroConcertPos), CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CVar("idfn", zeroConcertPos), CVar("idfn", zeroConcertPos), CBool(true)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("commonVarName")], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("uns", CCall(CVar("subscribe2", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("commonVarName")], zeroConcertPos), CLambda(["v"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("call", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos), CVar("previousDeactivateFn", zeroConcertPos)], zeroConcertPos)])]))], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CVar("uns", zeroConcertPos)], zeroConcertPos), CLet("getConstructName", CLambda(["v"], CIf(CCall(CVar("isSnippet", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CText("Set")], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("concert2string", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("ename", CVar("__editorName", zeroConcertPos), CLet("onEdit", CLambda([], CLet("doc", CCallBuiltin("quote", [CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("ename", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos), CVar("nop", zeroConcertPos)], zeroConcertPos), CSequence([CSet("__childEditingStack", CCall(CVar("Cons", zeroConcertPos), [CObject(TreeNode("name", CCall(CVar("getConstructName", zeroConcertPos), [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("ename", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeNode("callback", CLambda(["nval"], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("ename", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CVar("doc", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("ename", zeroConcertPos), CObject(TreeNode("name", CText("CursorMovement"), TreeNode("destination", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("head")], zeroConcertPos), CText("path")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("commonVarName")], zeroConcertPos), CVar("nval", zeroConcertPos)], zeroConcertPos), CSet("__childEditingStack", CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("tail")], zeroConcertPos), zeroConcertPos)])])])), TreeEmpty(), TreeEmpty(), 1), TreeNode("path", CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("ename", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CVar("__childEditingStack", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("ename", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CCall(CVar("getVisualElement", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)])]), zeroConcertPos)), CCall(CVar("buildLabelFieldViewUI", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), CCallBuiltin("External", [CText("BaseLine"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CArray(CArrayView(0, 0), [CCall(CVar("getConstructName", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CVar("onEdit", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("edit"), TreeEmpty(), TreeNode("width", CDouble(32.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
	];
}

