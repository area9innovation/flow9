// Unions
List<?> ::= EmptyList, Cons<?>;
Maybe<?> ::= None, Some<?>;
PExp ::= PValue, PTopLevel, PType, PArgType, PStringInclude, PVar, PLet, PIf, PCall, PCallOp, PLambda, PRef, PSetMutable, PField, PArray, PSequence, PSwitch, PCase, PCast, PTyped, PWith, PFieldAssign, PMaybe, PList;
PTopLevel ::= PModule, PImport, PForbid, PExport, PGlobal, PNative, PUnion, PStruct, PStructArg, PTypeDef;
PType ::= PTypePar, PTypeName, PTypeFunction, PArgType;
PValue ::= PVoid, PBool, PInt, PDouble, PString;

// Structs
Cons(head : ?, tail : List<?>);
DImport(path : string, pos : int);
EmptyList();
None();
PArgType(id : string, type : PType, pos : int);
PArray(exps : [PExp], pos : int);
PBool(v : bool, pos : int);
PCall(fn : PExp, args : [PExp], pos : int);
PCallOp(op : string, args : [PExp], pos : int);
PCase(id : string, args : [string], body : PExp, pos : int);
PCast(value : PExp, target : PType, pos : int);
PDouble(v : double, pos : int);
PExport(exports : [PTopLevel], pos : int);
PField(value : PExp, field : string, pos : int);
PFieldAssign(id : string, value : PExp, pos : int);
PForbid(path : string, pos : int);
PGlobal(id : string, value : PExp, pos : int);
PIf(cond : PExp, then : PExp, else_ : PExp, pos : int);
PImport(path : string, pos : int);
PInt(v : int, pos : int);
PLambda(args : [PArgType], body : PExp, pos : int);
PLet(var : string, value : PExp, body : PExp, pos : int);
PList(l : List<PExp>, pos : int);
PMaybe(value : PExp, match : PExp, otherwise : PExp, pos : int);
PModule(toplevels : [PTopLevel], pos : int);
PNative(id : string, isIo : bool, type : PType, name : string, pos : int);
PRef(value : PExp, pos : int);
PSequence(exps : [PExp], pos : int);
PSetMutable(lhs : PExp, field : string, value : PExp, pos : int);
PString(v : string, pos : int);
PStringInclude(path : string, pos : int);
PStruct(id : string, structArgs : [PStructArg], pos : int);
PStructArg(id : string, ismutable : bool, type : PType, pos : int);
PSwitch(value : PExp, cases : [PCase], pos : int);
PTypeDef(id : string, type : PType, pos : int);
PTypeFunction(args : [PArgType], returnType : PType, pos : int);
PTypeName(id : string, typars : [PType], pos : int);
PTypePar(id : string, pos : int);
PTyped(value : PExp, type : PType, pos : int);
PUnion(typename : PTypeName, types : [PTypeName], pos : int);
PVar(var : string, pos : int);
PVoid(pos : int);
PWith(struct : string, value : PExp, fields : [PFieldAssign], pos : int);
Some(value : ?);

filtermap(a0:[?], a1:(?) -> Maybe<??>) -> [??] {[]};
getPModule(a0:PExp) -> PModule {PModule([], 0)};
getDImports(p : PExp) -> [DImport] {
	module = getPModule(p);
	filtermap(module.toplevels, \tl -> {
		switch (tl) {
			PImport(path, pos): Some(DImport(path, pos));
			default: None();
		}
	});
}

