import tools/flowc/backends/wise/flow_wise_types;
/*
// Unions
FiType ::= FiTypeArray, FiTypeFunction, FiTypeRef, FiTypeParameter, FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeFlow, FiTypeVoid, FiTypeNative, FiTypeName;
FlowWiAtom ::= FlowWiBreak, FlowWiContinue, FlowWiIf, FlowWiIfelse, FlowWiReturn, FlowWiSet, FlowWiVar, FlowWiWhile, FlowWiSizeOfType, FlowWiDefValueOfType, FlowWiTuple, FlowWiInt, FlowWiBool, FlowWiDouble, FlowWiHex32, FlowWiHex64, FlowWiHexf32, FlowWiHexf64, FlowWiI64;
FlowWiExp ::= FlowWiAtom, FlowWiAdd, FlowWiAnd, FlowWiBoolAnd, FlowWiBoolNot, FlowWiBoolOr, FlowWiBrace, FlowWiCall, FlowWiPolyCall, FlowWiDiv, FlowWiEqual, FlowWiGreater, FlowWiGreaterEqual, FlowWiGreaterEqualu, FlowWiGreateru, FlowWiIsNull, FlowWiLess, FlowWiLessEqual, FlowWiLessEqualu, FlowWiLessu, FlowWiLet, FlowWiMod, FlowWiMul, FlowWiNegate, FlowWiNotEqual, FlowWiOr, FlowWiSub, FlowWiTupledot, FlowWiTypeannotation, FlowWiWasmOp, FlowWiXor, FlowWiArrayIndex;
FlowWiOpttype ::= FlowWiBasictype, FlowWiType;
FlowWiType ::= FlowWiBasictype, FlowWiFntype, FlowWiTupletype, FlowWiArrayType, FlowWiRefType;
FlowWiWarg ::= FlowWiInt, FlowWiVar, FlowWiType;

// Structs
FiFunArg(name : string, type : FiType);
FiTypeArray(t : FiType);
FiTypeBool();
FiTypeDouble();
FiTypeFlow();
FiTypeFunction(args : [FiFunArg], returnType : FiType);
FiTypeInt();
FiTypeName(name : string, typeparameters : [FiType]);
FiTypeNative();
FiTypeParameter(n : string);
FiTypeRef(t : FiType);
FiTypeString();
FiTypeVoid();
FlowWiAdd(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiAnd(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiArrayIndex(exp : FlowWiExp, index : int);
FlowWiArrayType(type : FlowWiType);
FlowWiBasictype(s : string);
FlowWiBool(b : bool);
FlowWiBoolAnd(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiBoolNot(exp : FlowWiExp);
FlowWiBoolOr(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiBrace(expsemi : [FlowWiExp]);
FlowWiBreak();
FlowWiCall(exp : FlowWiExp, exps : [FlowWiExp]);
FlowWiContinue();
FlowWiDefValueOfType(type : FlowWiType);
FlowWiDiv(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiDouble(double_0 : double);
FlowWiEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiFntype(types : [FlowWiType], type : FlowWiType);
FlowWiGreater(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiGreaterEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiGreaterEqualu(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiGreateru(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiHex32(s : string);
FlowWiHex64(s : string);
FlowWiHexf32(s : string);
FlowWiHexf64(s : string);
FlowWiI64(s : string);
FlowWiIf(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiIfelse(exp1 : FlowWiExp, exp2 : FlowWiExp, exp3 : FlowWiExp);
FlowWiInt(int_0 : int);
FlowWiIsNull(exp : FlowWiExp);
FlowWiLess(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiLessEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiLessEqualu(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiLessu(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiLet(id : string, i : int, opttype : FlowWiOpttype, exp : FlowWiExp, brace : FlowWiBrace);
FlowWiMod(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiMul(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiNegate(exp : FlowWiExp);
FlowWiNotEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiOr(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiPolyCall(exp : FlowWiExp, types : [FlowWiType]);
FlowWiRefType(type : FlowWiType);
FlowWiReturn(exps : [FlowWiExp]);
FlowWiSet(id : string, exp : FlowWiExp);
FlowWiSizeOfType(type : FlowWiType);
FlowWiSub(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiTuple(id : string, exps : [FlowWiExp], typeParameters : [FiType]);
FlowWiTupledot(exp : FlowWiExp, int_0 : int);
FlowWiTupletype(types : [FlowWiType], id : string);
FlowWiTypeannotation(exp : FlowWiExp, type : FlowWiType);
FlowWiVar(id : string);
FlowWiWasmOp(s : string, wargs : [FlowWiWarg], exps : [FlowWiExp]);
FlowWiWhile(exp1 : FlowWiExp, exp2 : FlowWiExp);
FlowWiXor(exp1 : FlowWiExp, exp2 : FlowWiExp);
*/
Pair(first : ?, second : ??);
arrayType2compareFnName(a0:FlowWiType) -> Pair<string, [string]> {Pair("", [])};
makeWiArrayType(a0:FlowWiType) -> [FlowWiType] {[]};
map(a0:[?], a1:(?) -> ??) -> [??] {[]};
unpair(a0:Pair<?, ??>, a1:(?, ??) -> ???) -> ??? {a1(a0.first, a0.second)};
makeWiArrayCompareCall(array1 : FlowWiExp, array2 : FlowWiExp, type : FlowWiType) -> FlowWiExp {
	fnDecl = unpair(arrayType2compareFnName(type), \name, tmpls -> {
		fn = FlowWiVar(name);
		if (tmpls == []) fn else FlowWiPolyCall(fn, map(tmpls, \a -> FlowWiBasictype(a)));
	});
	FlowWiCall(
		FlowWiPolyCall(FlowWiVar("compareArrays"), makeWiArrayType(type)),
		[array1, array2, fnDecl]
	);
}

