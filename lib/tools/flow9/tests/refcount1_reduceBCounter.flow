// Unions
BCounter ::= BDupValue, BDropValue, BReuseValue;
BExp ::= BValue, BVar, BLet, BIf, BCall, BLambda, BSequence, BConstruct, BField, BSetMutable, BSwitch, BArray, BCast, BCounter;
BType ::= BTypePar, BTypeName, BTypeFunction;
BValue ::= BVoid, BBool, BInt, BDouble, BString;
Maybe<?> ::= None, Some<?>;

// Structs
BArray(args : [BExp], type : BType);
BBool(v : bool);
BCall(fn : BExp, args : [BExp], type : BType);
BCase(id : string, body : BExp);
BCast(value : BExp, from : BType, to : BType);
BConstruct(struct : string, args : [BExp], type : BType);
BDouble(v : double);
BDropValue(value : BExp);
BDupValue(value : BExp);
BField(value : BExp, field : string, type : BType);
BIf(cond : BExp, then : BExp, else_ : BExp, type : BType);
BInt(v : int);
BLambda(args : [string], body : BExp, type : BType, capturedVars : [string]);
BLet(id : string, value : BExp, body : BExp, type : BType);
BReuseValue(value : BExp);
BSequence(exps : [BExp], type : BType);
BSetMutable(left : BExp, field : string, value : BExp, type : BType);
BString(v : string);
BSwitch(value : BVar, switchType : BType, cases : [BCase], defaultCase : Maybe<BExp>, type : BType);
BTypeFunction(args : [BType], returnType : BType);
BTypeName(id : string, typars : [BType]);
BTypePar(id : string);
BVar(id : string, type : BType);
BVoid();
None();
Pair(first : ?, second : ??);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
Some(value : ?);

addBCounterToExp(a0:BExp, a1:(BExp) -> BCounter) -> BExp {BVar("", BTypePar(""))};
extractBExpFromBCounter(a0:BExp, a1:int, a2:int, a3:bool) -> Quadruple<BExp, int, int, bool> {Quadruple(a0, 0, 0, false)};
fold(a0:[?], a1:??, a2:(??, ?) -> ??) -> ?? {a1};
unquadruple(a0:Quadruple<?, ??, ???, ????>, a1:(?, ??, ???, ????) -> ?????) -> ????? {a1(a0.first, a0.second, a0.third, a0.fourth)};

reduceBCounter(counter : BExp) -> void {
	unquadruple(extractBExpFromBCounter(counter, 0, 0, false), \exp : BExp, dupCnt, dropCnt, reuse -> {
		addDrops = \value : BExp -> {
			fold([0], value, \newExp, __ -> addBCounterToExp(newExp, \e -> if (reuse) BReuseValue(e) else BDropValue(e)));
		}
		{}
	});
}

