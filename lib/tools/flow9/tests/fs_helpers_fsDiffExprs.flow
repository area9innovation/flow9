// Unions
FcArgType ::= FcStructArg, FcFunArg;
FcBaseType ::= FcTypeVoid, FcTypeBool, FcTypeInt, FcTypeDouble, FcTypeString, FcTypeNative;
FcConst ::= FcVoid, FcDouble, FcInt, FcString, FcBool;
FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;
FcExp ::= FcLambda, FcCall, FcVar, FcLet, FcIf, FcSwitch, FcCast, FcSeq, FcCallPrim, FcConst, FcRequire, FcUnsafe;
FcPrim ::= FcOrPrim, FcAndPrim, FcNotPrim, FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim, FcArrayPrim, FcIndexPrim, FcDerefPrim, FcAssignPrim, FcRefPrim, FcStructPrim, FcFieldPrim, FcSetMutablePrim, FcCreateClosurePrim, FcQuote, FcUnquote;
FcType ::= FcBaseType, FcTypeArray, FcTypeFunction, FcTypeRef, FcTypeParameter, FcTypeFlow, FcTypeName, FcTypeStruct, FcTypeUnion, FcTypeVar;
FiConst ::= FiVoid, FiDouble, FiInt, FiString, FiBool;
FiDeclaration ::= FiFunctionDec, FiGlobalVar, FiNativeDec;
FiExp ::= FiLambda, FiCall, FiVar, FiLet, FiIf, FiSwitch, FiCast, FiSeq, FiCallPrim, FiConst, FiRequire, FiUnsafe;
FiNamed ::= FiDeclaration, FiStructOrUnion;
FiScalar ::= FiVoid, FiInt, FiBool, FiDouble;
FiStructOrUnion ::= FiTypeStruct, FiTypeUnion;
FiToplevel ::= FiDeclaration, FiStructOrUnion;
FiType ::= FiTypeArray, FiTypeFunction, FiTypeRef, FiTypeParameter, FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeFlow, FiTypeVoid, FiTypeNative, FiTypeName;
FsAll ::= FsStat, FsExp, FsLambda;
FsDecMode ::= FsDecDirect, FsDecReuse, FsDecFinish;
FsExp ::= FsClosure, FsCall, FsInlineExp, FsCallPrim, FsCast, FsVarUse, FsString, FsConst;
FsFunCallKind ::= FsFunCall, FsRecCallHost, FsRecCallRec;
FsPrim ::= FcOrPrim, FcAndPrim, FcNotPrim, FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim, FsArrayPrim, FcIndexPrim, FcDerefPrim, FsRefPrim, FsStructPrim, FsFieldPrim, FsIntrinsicPrim;
FsStat ::= FsIf, FsSwitch, FsLet, FsFor, FsWrapExp, FsRet, FsTailCall, FsAssign, FsIncRc, FsDecRc, FsIntrinsicStat;
FsVarKind ::= FsVarLocal, FsVarGlobalVar, FsVarGlobalFunc, FsVarUninit, FsVarIntrinsic;
Maybe<?> ::= None, Some<?>;

// Structs
FcAndPrim();
FcArrayPrim();
FcAssignPrim();
FcBool(b : bool, info : FcInfo);
FcCall(f : FcExp, args : [FcExp], info : FcInfo);
FcCallPrim(op : FcPrim, es : [FcExp], info : FcInfo);
FcCase(struct : string, argNames : [string], body : FcExp, info : FcInfo);
FcCast(e : FcExp, tFrom : FcType, tTo : FcType, info : FcInfo);
FcCreateClosurePrim(structName : string, functionName : string);
FcDerefPrim();
FcDivPrim();
FcDouble(d : double, info : FcInfo);
FcEqPrim();
FcFieldPrim(name : string);
FcFunArg(name : string, type : FcType);
FcFunArg2(name : string, type : Maybe<FcType>);
FcFunctionDec(name : string, lambda : Maybe<FcLambda>, declType : FcTypeFunction2, declInfo : FcInfo, defiInfo : FcInfo);
FcGePrim();
FcGlobalVar(name : string, value : Maybe<FcExp>, declInfo : FcInfo, bodyInfo : FcInfo);
FcGtPrim();
FcIf(e1 : FcExp, e2 : FcExp, e3 : FcExp, info : FcInfo);
FcIndexPrim();
FcInfo(type : ref Maybe<FcType>, start : int, end : int);
FcInfo2(start : int, end : int);
FcInt(i : int, info : FcInfo);
FcLambda(args : [FcFunArg], body : FcExp, info : FcInfo);
FcLePrim();
FcLet(name : string, type : FcType, e1 : FcExp, e2 : FcExp, info : FcInfo);
FcLtPrim();
FcMinusPrim();
FcModPrim();
FcMulPrim();
FcNativeDec(name : string, io : bool, type : FcType, nativeName : string, flowfallback : Maybe<FcFunctionDec>, info : FcInfo);
FcNePrim();
FcNegPrim();
FcNotPrim();
FcOrPrim();
FcPlusPrim();
FcQuote();
FcRefPrim();
FcRequire(flowfile : string, e : FcExp, info : FcInfo);
FcSeq(es : [FcExp], info : FcInfo);
FcSetMutablePrim(name : string);
FcString(s : string, info : FcInfo);
FcStructArg(name : string, type : FcType, ismutable : bool);
FcStructPrim(struct_name : string);
FcSwitch(x : FcVar, switchType : FcType, cases : [FcCase], info : FcInfo);
FcTypeArray(t : FcType, info : FcInfo2);
FcTypeBool(info : FcInfo2);
FcTypeDouble(info : FcInfo2);
FcTypeFlow(info : FcInfo2);
FcTypeFunction(args : [FcFunArg], returnType : FcType, info : FcInfo2);
FcTypeFunction2(args : [FcFunArg2], returnType : Maybe<FcType>, info : FcInfo2);
FcTypeInt(info : FcInfo2);
FcTypeName(name : string, typeparameters : [FcType], info : FcInfo2);
FcTypeNative(info : FcInfo2);
FcTypeParameter(n : string, info : FcInfo2);
FcTypeRef(t : FcType, info : FcInfo2);
FcTypeString(info : FcInfo2);
FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : FcInfo2);
FcTypeUnion(name : string, typeparameters : [FcType], typenames : [FcTypeName], info : FcInfo2);
FcTypeVar(id : int, info : FcInfo2);
FcTypeVoid(info : FcInfo2);
FcUnquote();
FcUnsafe(name : string, fallback : FcExp, info : FcInfo);
FcVar(name : string, info : FcInfo);
FcVoid(info : FcInfo);
FiBool(b : bool, start : int);
FiCall(f : FiExp, args : [FiExp], type : FiType, start : int);
FiCallPrim(op : FcPrim, es : [FiExp], type : FiType, start : int);
FiCase(struct : string, argNames : [string], body : FiExp, start : int);
FiCast(e : FiExp, tFrom : FiType, tTo : FiType, type : FiType, start : int);
FiDouble(d : double, start : int);
FiFunArg(name : string, type : FiType);
FiFunctionDec(name : string, lambda : FiLambda, type : FiTypeFunction, declStart : int, defiStart : int);
FiGlobalVar(name : string, value : FiExp, type : FiType, declStart : int, defiStart : int);
FiIf(e1 : FiExp, e2 : FiExp, e3 : FiExp, type : FiType, start : int);
FiInt(i : int, start : int);
FiLambda(args : [FiFunArg], body : FiExp, type : FiTypeFunction, start : int);
FiLet(name : string, type : FiType, e1 : FiExp, e2 : FiExp, type2 : FiType, start : int);
FiNativeDec(name : string, io : bool, type : FiType, nativeName : string, fallbackLambda : FiExp, declStart : int, defiStart : int);
FiRequire(flowfile : string, e : FiExp, type : FiType, start : int);
FiSeq(es : [FiExp], type : FiType, start : int);
FiString(s : string, start : int);
FiStructArg(name : string, type : FiType, ismutable : bool);
FiSwitch(x : FiVar, switchType : FiType, cases : [FiCase], type : FiType, start : int);
FiTypeArray(t : FiType);
FiTypeBool();
FiTypeDouble();
FiTypeFlow();
FiTypeFunction(args : [FiFunArg], returnType : FiType);
FiTypeInt();
FiTypeName(name : string, typeparameters : [FiType]);
FiTypeNative();
FiTypeParameter(n : string);
FiTypeRef(t : FiType);
FiTypeString();
FiTypeStruct(name : string, typars : [FiType], args : [FiStructArg], start : int);
FiTypeUnion(name : string, typeparameters : [FiType], typenames : [FiTypeName], start : int);
FiTypeVoid();
FiUnsafe(name : string, fallback : FiExp, type : FiType, start : int);
FiVar(name : string, type : FiType, start : int);
FiVoid(start : int);
FsArrayPrim(info : FsMetaInfo);
FsAssign(to : FsExp, what : FsExp, direct : bool, id : int, next : Maybe<FsStat>);
FsCall(f : FsVarUse, args : [FsExp], type : FiType, id : int);
FsCallPrim(op : FsPrim, es : [FsExp], type : FiType, id : int);
FsCase(struct : string, args : [FsVar], body : FsStat, id : int);
FsCast(e : FsExp, from : FiType, type : FiType, id : int);
FsClosure(vars : [FsVarUse], lambda : FsLambda, info : FsMetaInfo, id : int);
FsConst(c : FiScalar, id : int);
FsDecDirect();
FsDecFinish();
FsDecRc(v : FsVar, mode : FsDecMode, id : int, next : Maybe<FsStat>);
FsDecReuse(reuse : FsVar);
FsFieldPrim(field : string, ind : int);
FsFor(var : FsVar, e : FsExp, s : FsStat, free : [FsVar], id : int, next : Maybe<FsStat>);
FsFunCall();
FsIf(cond : FsExp, s1 : FsStat, s2 : FsStat, id : int, next : Maybe<FsStat>);
FsIncRc(v : FsVar, delta : int, id : int, next : Maybe<FsStat>);
FsInlineExp(fn : string, args : [FsExp], type : FiType, id : int);
FsIntrinsicPrim(name : string);
FsIntrinsicStat(name : string, id : int, next : Maybe<FsStat>);
FsLambda(closure : [FsVar], args : [FsVar], body : FsStat, type : FiTypeFunction, id : int);
FsLet(var : FsVar, transparent : bool, e : FsExp, s : FsStat, id : int, next : Maybe<FsStat>);
FsMetaInfo(reuse : Maybe<FsVar>, isNotShared : bool);
FsRecCallHost();
FsRecCallRec();
FsRefPrim(info : FsMetaInfo);
FsRet(e : FsExp, id : int, next : Maybe<FsStat>);
FsString(s : string, info : FsMetaInfo, id : int);
FsStructPrim(struct : string, info : FsMetaInfo);
FsSwitch(x : FsVarUse, type : FiTypeName, cases : [FsCase], id : int, next : Maybe<FsStat>);
FsTailCall(args : [FsExp], id : int, next : Maybe<FsStat>);
FsVar(name : string, type : FiType);
FsVarGlobalFunc(kind : FsFunCallKind);
FsVarGlobalVar();
FsVarInfo(kind : FsVarKind, unique : bool, isNotShared : bool);
FsVarIntrinsic();
FsVarLocal(transparent : bool);
FsVarUninit();
FsVarUse(var : FsVar, info : FsVarInfo, id : int);
FsWrapExp(e : FsExp, id : int, next : Maybe<FsStat>);
None();
Pair(first : ?, second : ??);
Some(value : ?);
TraceEntry(name : string, category : string, phase : string, tid : int, time : double);

arrayPush(a0:[?], a1:?) -> [?] {[]};
fiEqualTypes(a0:FiType, a1:FiType) -> bool {false};
foldi(a0:[?], a1:??, a2:(int, ??, ?) -> ??) -> ?? {a1};
length(a0:[?]) -> int {0};

fsDiffExprs(x: FsAll, y: FsAll, acc0: [Pair<FsAll, FsAll>]) -> [Pair<FsAll, FsAll>] {
	diff_nexts = \a: FsStat, b: FsStat -> switch (a.next) {
		Some(n1): {
			switch (b.next) {
				Some(n2): fsDiffExprs(n1, n2, acc0);
				None(): arrayPush(acc0, Pair(x, y));
			}
		}
		None(): {
			switch (b.next) {
				Some(n2): arrayPush(acc0, Pair(x, y));
				None(): acc0;
			}
		}
	}
	acc = switch(x) {
		FsStat(): switch(y) {
			FsStat(): diff_nexts(x, y);
			default: acc0;
		}
		default: acc0;
	}
	switch (x) {
		FsIf(e1, s11, s12,__,__): switch (y) {
			FsIf(e2, s21, s22,__,__): {
				
				fsDiffExprs(e1, e2, fsDiffExprs(s11, s21, fsDiffExprs(s12, s22, acc)));
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsSwitch(v1, __, cs1,__,__): switch (y) {
			FsSwitch(v2, __, cs2,__,__): {
				foldi(cs1, fsDiffExprs(v1, v2, acc), \i, ac, c1 ->
					if (i >= length(cs2)) {
						arrayPush(ac, Pair(FsConst(FiVoid(-1), -1), c1.body));
					} else {
						fsDiffExprs(c1.body, cs2[i].body, ac);
					}
				);
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsLet(v1,__, e1, s1,__,__): switch (y) {
			FsLet(v2,__, e2, s2,__,__): {
				if (v1.name != v2.name) {
					arrayPush(acc, Pair(x, y));
				} else {
					fsDiffExprs(e1, e2, fsDiffExprs(s1, s2, acc));
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsFor(v1, e1, s1,__,__,__): switch (y) {
			FsFor(v2, e2, s2,__,__,__): {
				if (v1.name != v2.name) {
					arrayPush(acc, Pair(x, y));
				} else {
					fsDiffExprs(e1, e2, fsDiffExprs(s1, s2, acc));
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsWrapExp(e1,__,__): switch (y) {
			FsWrapExp(e2,__,__): fsDiffExprs(e1, e2, acc);
			default: arrayPush(acc, Pair(x, y));
		}
		FsRet(e1,__,__): switch (y) {
			FsRet(e2,__,__): fsDiffExprs(e1, e2, acc);
			default: arrayPush(acc, Pair(x, y));
		}
		FsAssign(to1, what1, direct1, __,__): switch (y) {
			FsAssign(to2, what2, direct2,__,__): {
				if (direct1 != direct2) {
					arrayPush(acc, Pair(x, y));
				} else {
					fsDiffExprs(to1, to2, fsDiffExprs(what1, what2, acc));
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsIncRc(v1, d1, __,__): switch (y) {
			FsIncRc(v2, d2,__,__): {
				if (d1 != d2 || v1.name != v2.name) {
					arrayPush(acc, Pair(x, y));
				} else {
					acc;
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsDecRc(v1,__,__,__): switch (y) {
			FsDecRc(v2,__,__,__): if (v1.name != v2.name) arrayPush(acc, Pair(x, y)) else acc;
			default: arrayPush(acc, Pair(x, y));
		}
		FsIntrinsicStat(n1,__,__): switch (y) {
			FsIntrinsicStat(n2,__,__): if (n1 != n2) arrayPush(acc, Pair(x, y)) else acc;
			default: arrayPush(acc, Pair(x, y));
		}
		FsTailCall(__,__,__): switch (y) {
			FsTailCall(__,__,__): acc;
			default: arrayPush(acc, Pair(x, y));
		}
		FsClosure(vs1, l1,__,__): switch (y) {
			FsClosure(vs2, l2,__,__): {
				foldi(vs1, fsDiffExprs(l1, l2, acc), \i, ac, v1 ->
					if (i >= length(vs2)) {
						arrayPush(ac, Pair(FsConst(FiVoid(-1), -1), v1));
					} else {
						fsDiffExprs(v1, vs2[i], acc);
					}
				);
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsLambda(cs1, as1, b1,__,__): switch (y) {
			FsLambda(cs2, as2, b2,__,__): {
				foldi(as1,
					foldi(cs1, 
						fsDiffExprs(b1, b2, acc), 
						\i, ac, c1 -> if (i >= length(cs2)) {
							arrayPush(ac, Pair(FsConst(FiVoid(-1), -1), 
								FsVarUse(c1, FsVarInfo(FsVarLocal(false), false, false), -1) // This is maybe Wrong
							));
						} else {
							if (c1 == cs2[i]) acc else arrayPush(acc, Pair(x, y));
						}
					), \i, ac, a1 : FsVar -> if (i >= length(as2)) {
						arrayPush(ac, Pair(FsConst(FiVoid(-1), -1), 
							FsVarUse(a1, FsVarInfo(FsVarLocal(false), false, false), -1) // This is maybe Wrong
						));
					} else {
						if (a1 == as2[i]) acc else arrayPush(acc, Pair(x, y));
					}
				);
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsCall(f1, as1,__,__): switch (y) {
			FsCall(f2, as2,__,__): {
				foldi(as1, fsDiffExprs(f1, f2, acc), \i, ac, a1 ->
					if (i >= length(as2)) {
						arrayPush(ac, Pair(FsConst(FiVoid(-1), -1), a1));
					} else {
						fsDiffExprs(a1, as2[i], acc);
					}
				);
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsInlineExp(n1, as1,__,__): switch (y) {
			FsInlineExp(n2, as2,__,__): {
				if (n1 != n2) {
					arrayPush(acc, Pair(x, y));
				} else {
					foldi(as1, acc, \i, ac, a1 ->
						if (i >= length(as2)) {
							arrayPush(ac, Pair(FsConst(FiVoid(-1), -1), a1));
						} else {
							fsDiffExprs(a1, as2[i], acc);
						}
					);
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsCallPrim(op1, es1,__,__): switch (y) {
			FsCallPrim(op2, es2,__,__): {
				if (op1 != op2) {
					arrayPush(acc, Pair(x, y));
				} else {
					foldi(es1, acc, \i, ac, e1 ->
						if (i >= length(es2)) {
							arrayPush(ac, Pair(FsConst(FiVoid(-1), -1), e1));
						} else {
							fsDiffExprs(e1, es2[i], acc);
						}
					);
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsCast(e1, from1, to1,__): switch (y) {
			FsCast(e2, from2, to2,__): {
				if (!fiEqualTypes(from1, from2) || !fiEqualTypes(to1, to2)) {
					arrayPush(acc, Pair(x, y));
				} else {
					fsDiffExprs(e1, e2, acc);
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsVarUse(v1, kind1,__): switch (y) {
			FsVarUse(v2, kind2,__): {
				if (v1.name != v2.name || kind1 != kind2) {
					arrayPush(acc, Pair(x, y));
				} else {
					acc;
				}
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsString(s1,__,__): switch (y) {
			FsString(s2, __,__): {
				if (s1 == s2) acc else arrayPush(acc, Pair(x, y));
			}
			default: arrayPush(acc, Pair(x, y));
		}
		FsConst(c1,__): switch (y) {
			FsConst(c2, __): {
				if (c1 == c2) acc else arrayPush(acc, Pair(x, y));
			}
			default: arrayPush(acc, Pair(x, y));
		}
	}
}

