
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

rebalancedTree(k : ?, v : ??, left : Tree<?, ??>, right : Tree<?, ??>) -> Tree<?, ??> {
	leftDepth = treeDepth(left);
	rightDepth = treeDepth(right);

	balance = leftDepth - rightDepth;

	composed = TreeNode(k, v, left, right, max(leftDepth, rightDepth) + 1);

	if (balance == -1 || balance == 0 || balance == 1) {
		composed;
	} else if (balance < 0) {
		// Right-right or right-left?
		switch (right : Tree) {
			TreeEmpty(): composed;
			TreeNode(rk, rv, rl, rr, rdepth): {
				treeLeftRotation(
					if (treeDepth(rl) < treeDepth(rr)) composed else mkTreeNode(k, v, left, treeRightRotation(right))
				);
			}
		}
	} else {
		// Left-left or left-right?
		switch (left : Tree) {
			TreeEmpty(): composed;
			TreeNode(lk, lv, ll, lr, ldepth): {
				treeRightRotation(
					if (treeDepth(ll) < treeDepth(lr)) mkTreeNode(k, v, treeLeftRotation(left), right) else composed
				);
			}
		}
	}
}


treeDepth(tree : Tree<?, ??>) -> int {
	0;
}

native max : (?, ?) -> ? = Native.fast_max;

treeLeftRotation(tree : Tree<?, ??>) -> Tree<?, ??> {
	tree;
}

treeRightRotation(tree : Tree<?, ??>) -> Tree<?, ??> {
	tree;
}

mkTreeNode(k : ?, v : ??, left : Tree<?, ??>, right : Tree<?, ??>) -> TreeNode<?, ??> {
	TreeNode(k, v, left, right, max(treeDepth(left), treeDepth(right)) + 1);
}
