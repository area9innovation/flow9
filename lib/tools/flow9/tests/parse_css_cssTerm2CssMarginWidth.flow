// Unions
CssMarginWidth ::= CssAuto, CssLength, CssPercent, CssInheritParent;
CssTerm ::= CssNegate, CssPercentage, CssInt, CssDouble, CssHexInt, CssString, CssName, CssStruct, CssArray, CssTrue, CssFalse, CssInherit, CssPt, CssPx, CssDeg, CssSolid, CssList, CssLinearGradient, CssUrl, CssEm;
CssUnit ::= CssUnitPx, CssUnitEm, CssUnitEx, CssUnitIn, CssUnitCm, CssUnitPt, CssUnitPc;

// This is the same as CssMarginWidth
CssBoxLength ::= CssLength, CssPercent, CssAuto, CssInheritParent;

// Structs
CssArray(terms : [CssTerm]);
CssAuto();
CssDeg(value : CssTerm);
CssDouble(v : double);
CssEm(value : CssTerm);
CssFalse();
CssHexInt(s : string);
CssInherit();
CssInheritParent();
CssInt(v : int);
CssLength(value : double, unit : CssUnit);
CssLinearGradient(rotation : CssTerm, colors : CssTerm);
CssList(terms : [CssTerm]);
CssName(n : string);
CssNegate(t : CssTerm);
CssPercent(value : double);
CssPercentage(n : CssTerm);
CssPt(value : CssTerm);
CssPx(value : CssTerm);
CssSolid();
CssString(s : string);
CssStruct(n : string, args : [CssTerm]);
CssTrue();
CssUnitCm();
CssUnitEm();
CssUnitEx();
CssUnitIn();
CssUnitPc();
CssUnitPt();
CssUnitPx();
CssUrl(value : string);

cssTerm2CssMarginWidth(c : CssTerm) -> CssMarginWidth {
	if (true) {
		CssLength(0.0, CssUnitPx());
	} else if (true) {
		CssAuto();
	} else {
		CssLength(0.0, CssUnitPx());
	};
}

