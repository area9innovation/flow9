import ds/array;

SimplePromise2(
    f : (fulfill : (?) -> void, reject : (??) -> void) -> void
);

test9(promises : [SimplePromise2<?, ??>]) -> SimplePromise2<[?], ??> {
    ps = length(promises);
    if (ps == 0) {
        SimplePromise2(\fulfill, reject -> fulfill([]))
    } else if (ps == 1) {
        p0 : SimplePromise2<?, ??> = promises[0];
        SimplePromise2(\fulfill, reject -> {
            p0.f(
                \r -> fulfill([r]),
                reject
            )
        })
    } else {
        half = ps / 2;
        left = take(promises, half);
        right = tailFrom(promises, half);
        
        SimplePromise2(\fulfill : ([?]) -> void, reject -> {
            test9(left).f(
                \leftResults -> {
                    test9(right).f(
                        \rightResults -> fulfill(concat(leftResults, rightResults)),
                        reject
                    )
                },
                reject
            )
        })
    }
}