import lingo/compiler/syntaxtree_util;
import tools/flowc/backends/java/parser/java_ast;

fi2javaNativesFromAst(ast : SyntaxTree, code : string) -> [string] {
	unit = get_Compilation_CompilationUnit(ast);
	type_decls = get_Compilation_TypeDeclaration_s(unit);
	concatA(filtermap(type_decls, \class_decl ->
		if (class_decl.rule != st_NormalClassDeclaration) None() else {
			class_header = get_Compilation_NormalClassHeader(class_decl);
			superclass = get_Compilation_Superclass_s(class_header);
			if (length(superclass) == 0) None() else {
				extends = trim2(grabSTText(get_Compilation_ClassType(superclass[0]), code), " \t\n\r");
				if (extends != "NativeHost") None() else {
					body = get_Compilation_ClassBody(class_decl);
					members = get_Compilation_ClassBodyDeclaration_s(body);
					Some(filtermap(members, \member ->
						if (member.rule != st_MethodDeclaration) None() else {
							method_modifiers = map(get_Compilation_MethodModifier_s(member), \modifier ->
								trim2(grabSTText(modifier, code), " \t\n\r")
							);
							if (!contains(method_modifiers, "public") || !contains(method_modifiers, "static")) None() else {
								method_header = get_Compilation_MethodHeader(member);
								method_declarator = get_Compilation_MethodDeclarator(method_header);
								identificator = trim2(grabSTText(get_Compilation_Identifier(method_declarator), code), " \t\n\r");
								Some(identificator);
							}
						}
					));
				}
			}
		}
	));
}
