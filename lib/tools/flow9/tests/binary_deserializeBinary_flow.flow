// Unions
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
Pair(first : ?, second : ??);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
Triple(first : ?, second : ??, third : ???);

doBinary(a0:string, a1:int, a2:int, a3:Tree<string, ([flow]) -> flow>, a4:flow, a5:[[flow]]) -> Pair<flow, int> {Pair(0, 0)};
getFooterOffset(a0:string) -> Pair<int, int> {Pair(0, 0)};
println(a0:?) -> void {{}};
strlen(a0:string) -> int {0};
deserializeBinary_flow(s : string, structFixups : Tree<string, ([flow]) -> flow>, default_ : flow) -> flow {
	footer_offset = getFooterOffset(s);
	default2 : [[flow]] = [];
	flowStructDefs : flow = (doBinary(s, footer_offset.first, strlen(s), structFixups, default2, [])).first;
	structDefs : [[flow]] = cast(flowStructDefs : flow -> [[flow]]);

	r = doBinary(s, footer_offset.second, footer_offset.first, structFixups, default_, structDefs);
	if (r.second < footer_offset.first) {
		println("Did not understand all!");
	}
	r.first;
}

