// Unions
FcBaseType ::= FcTypeVoid, FcTypeBool, FcTypeInt, FcTypeDouble, FcTypeString, FcTypeNative;
FcConst ::= FcVoid, FcDouble, FcInt, FcString, FcBool;
FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;
FcExp ::= FcLambda, FcCall, FcVar, FcLet, FcIf, FcSwitch, FcCast, FcSeq, FcCallPrim, FcConst, FcRequire, FcUnsafe;
FcPreloadedModule ::= FcParsed, FcLoaded;
FcPrim ::= FcOrPrim, FcAndPrim, FcNotPrim, FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim, FcArrayPrim, FcIndexPrim, FcDerefPrim, FcAssignPrim, FcRefPrim, FcStructPrim, FcFieldPrim, FcSetMutablePrim, FcCreateClosurePrim, FcQuote, FcUnquote;
FcType ::= FcBaseType, FcTypeArray, FcTypeFunction, FcTypeRef, FcTypeParameter, FcTypeFlow, FcTypeName, FcTypeStruct, FcTypeUnion, FcTypeVar;
FiConst ::= FiVoid, FiDouble, FiInt, FiString, FiBool;
FiDeclaration ::= FiFunctionDec, FiGlobalVar, FiNativeDec;
FiExp ::= FiLambda, FiCall, FiVar, FiLet, FiIf, FiSwitch, FiCast, FiSeq, FiCallPrim, FiConst, FiRequire, FiUnsafe;
FiExportSignature ::= FiTypeStruct, FiTypeUnion, FiType, FiExportNative;
FiStructOrUnion ::= FiTypeStruct, FiTypeUnion;
FiType ::= FiTypeArray, FiTypeFunction, FiTypeRef, FiTypeParameter, FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeFlow, FiTypeVoid, FiTypeNative, FiTypeName;
List<?> ::= EmptyList, Cons<?>;
Maybe<?> ::= None, Some<?>;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
CompilerConfig(flowfile : string, includes : [string], objectFolders : [string], verbose : int, jsParams : JSCliParams, config : Tree<string, string>, threadId : int);
Cons(head : ?, tail : List<?>);
DependencyTracker(dependsUpon : Tree<?, Set<?>>, fileRequires : Tree<?, Set<?>>, nonDependent : Set<?>);
EmptyList();
FcAndPrim();
FcArrayPrim();
FcAssignPrim();
FcBool(b : bool, info : FcInfo);
FcCall(f : FcExp, args : [FcExp], info : FcInfo);
FcCallPrim(op : FcPrim, es : [FcExp], info : FcInfo);
FcCase(struct : string, argNames : [string], body : FcExp, info : FcInfo);
FcCast(e : FcExp, tFrom : FcType, tTo : FcType, info : FcInfo);
FcCheckStructs(names : [string], open : bool, t : FcType, info : FcInfo2);
FcCreateClosurePrim(structName : string, functionName : string);
FcDerefPrim();
FcDivPrim();
FcDouble(d : double, info : FcInfo);
FcEqPrim();
FcError(message : string, positions : [FcPosition]);
FcFieldPrim(name : string);
FcFileInfo(flowfile : string, trampstamp : double, fullpath : string, md5sum : string, content : string, gensymid : int, filesize : double);
FcForbid(flowfile : string, start : int, end : int);
FcFunArg(name : string, type : FcType);
FcFunArg2(name : string, type : Maybe<FcType>);
FcFunctionDec(name : string, lambda : Maybe<FcLambda>, declType : FcTypeFunction2, declInfo : FcInfo, defiInfo : FcInfo);
FcGePrim();
FcGlobalNames(struct2module : Tree<string, string>, union2module : Tree<string, string>, function2module : Tree<string, string>, globalVar2module : Tree<string, string>, native2module : Tree<string, string>, structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, struct2unions : Tree<string, [string]>, field2structs : Tree<string, [string]>, toplevel : Tree<string, FcDeclaration>, structTypars : Tree<string, int>, moduleImports : Tree<string, Set<string>>);
FcGlobalVar(name : string, value : Maybe<FcExp>, declInfo : FcInfo, bodyInfo : FcInfo);
FcGtPrim();
FcIf(e1 : FcExp, e2 : FcExp, e3 : FcExp, info : FcInfo);
FcImport(flowfile : string, dynamic : bool, start : int, end : int);
FcIndexPrim();
FcInfo(type : ref Maybe<FcType>, start : int, end : int);
FcInfo2(start : int, end : int);
FcInt(i : int, info : FcInfo);
FcLambda(args : [FcFunArg], body : FcExp, info : FcInfo);
FcLePrim();
FcLet(name : string, type : FcType, e1 : FcExp, e2 : FcExp, info : FcInfo);
FcLoaded(module : FiModule, dependencyChanged : () -> bool);
FcLtPrim();
FcMinusPrim();
FcModPrim();
FcModule(fileinfo : FcFileInfo, imports : [FcImport], forbids : [FcForbid], exports : Set<string>, structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, functions : Tree<string, FcFunctionDec>, globalVars : Tree<string, FcGlobalVar>, natives : Tree<string, FcNativeDec>, initOrder : [string], stringIncludes : [FiFileInfo], errors : [FcError], typevarid : int, isCached : bool, start : int, end : int, allImports : Set<string>);
FcMulPrim();
FcNativeDec(name : string, io : bool, type : FcType, nativeName : string, flowfallback : Maybe<FcFunctionDec>, info : FcInfo);
FcNePrim();
FcNegPrim();
FcNotPrim();
FcOrPrim();
FcParsed(fileinfo : FcFileInfo, syntaxtree : SyntaxTree, imports : [FcImport], forbids : [FcForbid], oldExports : Tree<string, FiExportSignature>);
FcPlusPrim();
FcPosition(file : string, start : int, end : int);
FcQuote();
FcRefPrim();
FcRequire(flowfile : string, e : FcExp, info : FcInfo);
FcSeq(es : [FcExp], info : FcInfo);
FcSetMutablePrim(name : string);
FcString(s : string, info : FcInfo);
FcStructArg(name : string, type : FcType, ismutable : bool);
FcStructPrim(struct_name : string);
FcSwitch(x : FcVar, switchType : FcType, cases : [FcCase], info : FcInfo);
FcTypeArray(t : FcType, info : FcInfo2);
FcTypeBool(info : FcInfo2);
FcTypeDouble(info : FcInfo2);
FcTypeFlow(info : FcInfo2);
FcTypeFunction(args : [FcFunArg], returnType : FcType, info : FcInfo2);
FcTypeFunction2(args : [FcFunArg2], returnType : Maybe<FcType>, info : FcInfo2);
FcTypeInt(info : FcInfo2);
FcTypeName(name : string, typeparameters : [FcType], info : FcInfo2);
FcTypeNative(info : FcInfo2);
FcTypeParameter(n : string, info : FcInfo2);
FcTypeRef(t : FcType, info : FcInfo2);
FcTypeString(info : FcInfo2);
FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : FcInfo2);
FcTypeUnion(name : string, typeparameters : [FcType], typenames : [FcTypeName], info : FcInfo2);
FcTypeVar(id : int, info : FcInfo2);
FcTypeVoid(info : FcInfo2);
FcUnquote();
FcUnsafe(name : string, fallback : FcExp, info : FcInfo);
FcVar(name : string, info : FcInfo);
FcVoid(info : FcInfo);
FiBool(b : bool, start : int);
FiCall(f : FiExp, args : [FiExp], type : FiType, start : int);
FiCallPrim(op : FcPrim, es : [FiExp], type : FiType, start : int);
FiCase(struct : string, argNames : [string], body : FiExp, start : int);
FiCast(e : FiExp, tFrom : FiType, tTo : FiType, type : FiType, start : int);
FiDouble(d : double, start : int);
FiExportNative(io : bool, type : FiType, nativeName : string);
FiFileInfo(flowfile : string, trampstamp : double, fullpath : string, md5sum : string, filesize : double, lastupdate : double);
FiForbid(flowfile : string, start : int);
FiFunArg(name : string, type : FiType);
FiFunctionDec(name : string, lambda : FiLambda, type : FiTypeFunction, declStart : int, defiStart : int);
FiGlobalNames(struct2module : Tree<string, string>, union2module : Tree<string, string>, function2module : Tree<string, string>, globalVar2module : Tree<string, string>, native2module : Tree<string, string>, structs : Tree<string, FiTypeStruct>, unions : Tree<string, FiTypeUnion>, toplevel : Tree<string, FiDeclaration>);
FiGlobalVar(name : string, value : FiExp, type : FiType, declStart : int, defiStart : int);
FiIf(e1 : FiExp, e2 : FiExp, e3 : FiExp, type : FiType, start : int);
FiImport(flowfile : string, dynamic : bool, start : int);
FiInt(i : int, start : int);
FiLambda(args : [FiFunArg], body : FiExp, type : FiTypeFunction, start : int);
FiLet(name : string, type : FiType, e1 : FiExp, e2 : FiExp, type2 : FiType, start : int);
FiModule(fileinfo : FiFileInfo, imports : [FiImport], forbids : [FiForbid], exports : [string], structs : [FiTypeStruct], unions : [FiTypeUnion], functions : [FiFunctionDec], globalVars : [FiGlobalVar], natives : [FiNativeDec], initOrder : [string], stringIncludes : [FiFileInfo], start : int, end : int, allImports : Set<string>, incremental : bool);
FiNativeDec(name : string, io : bool, type : FiType, nativeName : string, fallbackLambda : FiExp, declStart : int, defiStart : int);
FiProgram(config : CompilerConfig, modules : Tree<string, FiModule>, traversal : [string], names : FiGlobalNames);
FiRequire(flowfile : string, e : FiExp, type : FiType, start : int);
FiSeq(es : [FiExp], type : FiType, start : int);
FiString(s : string, start : int);
FiStructArg(name : string, type : FiType, ismutable : bool);
FiSwitch(x : FiVar, switchType : FiType, cases : [FiCase], type : FiType, start : int);
FiTypeArray(t : FiType);
FiTypeBool();
FiTypeDouble();
FiTypeFlow();
FiTypeFunction(args : [FiFunArg], returnType : FiType);
FiTypeInt();
FiTypeName(name : string, typeparameters : [FiType]);
FiTypeNative();
FiTypeParameter(n : string);
FiTypeRef(t : FiType);
FiTypeString();
FiTypeStruct(name : string, typars : [FiType], args : [FiStructArg], start : int);
FiTypeUnion(name : string, typeparameters : [FiType], typenames : [FiTypeName], start : int);
FiTypeVoid();
FiUnsafe(name : string, fallback : FiExp, type : FiType, start : int);
FiVar(name : string, type : FiType, start : int);
FiVoid(start : int);
FlowcAcc(dependency : DependencyTracker<string>, preloaded : Tree<string, FcPreloadedModule>, modules : Tree<string, FiModule>, file2flowfile : Tree<string, string>, traversal : [string], names : FcGlobalNames, config : CompilerConfig, tyvarIdFactory : IdFactory, tyvarIdGroup : IdGroup, tracer : Tracer);
IdFactory(id : ref int, bucketsize : int);
IdGroup(id : ref int, lastid : ref int, factory : IdFactory);
JSCliParams(jsfile : string, esfile : string, typescriptFile : string, debug : bool, code : bool, modules : string, comments : bool, node : bool, webmodule : bool, isES6 : bool, isTypeScript : bool, tsProcess : TypeScriptProcessing, readable : bool, beautify : bool, sourcemap : bool, verbose : int, nwjs : bool, fontconfig : string, dcePreservedNames : Set<string>, dceRemoveMain : bool, jslibraryObject : string, callMain : bool);
None();
Set(tree : Tree<?, bool>);
Some(value : ?);
SyntaxTree(rule : int, choice : int, start : int, end : int, children : [[SyntaxTree]]);
TraceEntry(name : string, category : string, phase : string, tid : int, time : double);
Tracer(startTime : double, lines : List<TraceEntry>);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
TypeScriptProcessing(typeBuffer : string, voidReturn : bool, antiTS : bool);

concat(a0:[?], a1:[?]) -> [?] {[]}
fold(a0:[?], a2:(?) -> int )-> int {0}
foldTree(a0:Tree<?, ??>, a2:(??) -> int) -> int {0}
resolveFiTypeName(a1:FiType) -> void {}
fiStruct2unions(prog : FiProgram) -> int {
	foldTree(
		prog.names.unions,
		\union -> {
			fold(
				union.typenames,
				\typename -> {
					resolveFiTypeName(typename);
					0;
				}
			);
			0
		}
	)
}
