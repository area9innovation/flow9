import maybe;

SSql ::= SInt, SNull, SVar, SCallDistinct;
	SInt(v : int); SNull(); SVar(name : string);
	SCallDistinct(arg : SSql);

testTypeChecker() -> Maybe<(SVar) -> SSql> {
	//result : Maybe<(SVar) -> SSql> = collect(
	result = collect(	// It should work without type annotation, but it fails with: problem12.flow:7:1: return: 'SSql' is not a subtype of 'SVar'
		\ -> {
			cond = false;
			if (cond) {
				\var -> SCallDistinct(var);
			} else {
				\__ -> SInt(1);
			}
		}
	);
	result;
}

collect(getter : () -> ?) -> Maybe<?> {
	None();
}
