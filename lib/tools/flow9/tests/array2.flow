export {
	// The length of an array. O(1)
	native length : ([?]) -> int = Native.length;

	// Concatenate two arrays. O(n)
	native concat : ([?], [?]) -> [?] = Native.concat;

	// Apply a function to each element of an array to give a new array. O(n)
	native map : ([?], (?) -> ??) -> [??] = Native.map;

	// Apply a function which takes an index and each element of an array to give a new array. O(n)
	native mapi : ([?], (int, ?) -> ??) -> [??] = Native.mapi;

	// Apply a collecting function.  This is a left fold, i.e., it folds with the start of
	// the array first, i.e., fold([x1, x2, x3], x0, o) = ((x0 o x1) o x2) o x3.  O(n)
	native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;

	// Apply a collecting function which takes an index, initial value and each element. O(n)
	native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;

	// Replace a given element in an array with a new value. Makes a copy. O(n)
	// Appends new element if index points to the end (used in arrayPush)
	native replace : ([?], int, ?) -> [?] = Native.replace;

	// Get a subrange of an array from index. O(n)
	// if index < 0 or length < 1 it returns an empty array
	native subrange : (a : [?], index : int, length : int) -> [?] = Native.subrange;

	// Generator [start..end]. O(n). Please notice:
	// - `end` is included in the resulting array, e.g. enumFromTo(1, 3) returns [1, 2, 3]
	// - if end < start then an empty array is returned, e.g. enumFromTo(1, -1) returns []
	native enumFromTo : (start : int, end : int) -> [int] = Native.enumFromTo;

	// Apply a function to each element of an array. O(n)
	native iter : ([?], (?)->void) -> void = Native.iter;

	// Apply a function which takes an index and each element of an array. O(n)
	native iteri : ([?], (int, ?)->void) -> void = Native.iteri;

	// Apply a function which takes an index and each element of an array until it returns true
	// Returns index of last element function was applied to.
	// Returns the size of array if such element was not found. O(n)
	native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;

	// Creates a new array, whose elements are selected from 'a' with a condition 'test'.
	// O(n)
	native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;

	// Removes the first occurence of v. O(n)
	removeFirst(a : [?], v : ?) -> [?];

	// Removes all occurences of v. O(n)
	removeAll(a : [?], v : ?) -> [?];

	//  O(n)
	removeIndex(a : [?], index : int) -> [?];

	// The elemIndex function returns the index of the first element in the given list
	// which is equal (by ==) to the query element, or illegal if there is no such element.. O(n)
	elemIndex : (a : [?], elem : ?, illegal : int) -> int;

	// Does this array contain the given element?  O(n)
	contains : (a : [?], v : ?) -> bool;
	// Does `a` contain any element from `v`?  O(n*v)
	containsAny : (a : [?], v : [?]) -> bool;

	// Determine if any element of the list satisfies the predicate. O(n)
	exists : (a : [?], fn : (?) -> bool) -> bool;
}

removeFirst(a, v) {
	removeIndex(a, elemIndex(a, v, -1));
}

removeAll(a, v) {
	filter(a, \x -> x != v)
}

native removeIndex : (a : [?], index : int) -> [?] = Native.removeIndex;

removeIndex(a, index) {
	if (existsIndex(a, index)) {
		concat(subrange(a, 0, index), subrange(a, index + 1, length(a) - index - 1))
	} else {
		a
	}
}

// implemented by the C++ runner
native elemIndex : (a : [?], elem : ?, illegal : int) -> int = Native.elemIndex;

elemIndex(a, elem, illegal) {
	foundIndex = iteriUntil(a, \i, ai -> ai == elem);
	if (foundIndex == length(a)) {
		illegal;
	} else {
		foundIndex;
	}
}

// implemented by the C++ runner
native exists : (a : [?], fn : (?) -> bool) -> bool = Native.exists;

exists(a : [?], fn : (?) -> bool) -> bool {
	foundIndex = iteriUntil(a, \i, e -> fn(e));
	foundIndex != length(a);
}

contains(a : [?], v : ?) -> bool {
	elemIndex(a, v, -1) != -1;
}

containsAny(a : [?], v : [?]){
	fold(v, false, \r, t -> if (r) r else contains(a, t));
}

lastElement(a: [?], def: ?) -> ? {
	len = length(a);
	if (len > 0) {
		a[len - 1]
	} else {
		def
	}
}

elementAt(a : [?], idx : int, def : ?) -> ? {
	if (existsIndex(a, idx)) {
		a[idx]
	} else {
		def
	}
}

stylesEqual(s1: [?], s2: [?]) -> bool {
	!exists(s1, \e -> !contains(s2, e)) &&
	!exists(s2, \e -> !contains(s1, e))
}

existsIndex(a : [?], i : int) -> bool {
	i >= 0 && i < length(a)
}
