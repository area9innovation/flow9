import ds/tree;
export {
	// This is an attempt at making a monster editor
	Concert ::=
		CValue,
		CArray, CHierarchy, CTable, CCanvas, CKeyValue, CObject,

		CGraphics,
		CEditor, CMonacoEditor,

		CSet, CVar, CLet, CFormula,
		CCall, CCallBuiltin, CLambda,
		CIf, CSequence, CQuote, CUnquote,

		CExternal, CAsCode, CHTML
		;

	// Atomic values or variable
	CValueOrVar ::= CValue, CVar;

	//
	// Values
	//

	CValue ::= CEmpty, CBool, CInt, CDouble, CText, CHumanText;

	CEmpty();
	CBool(value : bool);
	CInt(value : int);
	CDouble(value : double);
	CText(value : string);
	// For text that should be translated
	CHumanText(value : string, language : string);

	// Date/time?

	//
	// Data structures
	//

	// Array: Lines, cols, paragraph, wrapping lines, wrapping columns, pagination, sorting
	CArray(view : CArrayViewOptions, children : [Concert]); // , pagination : CPagination, sorting : CSorting);
		// If there is no max, set it to 0
		CArrayViewOptions ::= CArrayView, CArrayViewExtended;
			CArrayView(maxCols : int, maxLines : int);
			CArrayViewExtended(maxCols : int, maxLines : int, framed : bool, baseline : bool, allowFillers : bool);

	CHierarchy(value : Concert, view : CHierarchyView, children : [Concert]);
		CHierarchyView ::= CComapHierarchy, CTreeHierarchy;
			CComapHierarchy();
			CTreeHierarchy();
			// Split-tree view, a la Mac Finder/Shift
			// Org. chart is the same, just rotated
			// Circle packing
			// Sunburst
			// Menu
			// Kanban

	// How to get alignment for table-like elements in a hierarchy?

	CTable(cells : [[Concert]]);
			// Data table
			// Spreadsheet (coordinates)

	// A rectangular region, where we scale and rotate the children
	CCanvas(
		// Where to place the children
		x : CValueOrVar, y : CValueOrVar,
		// The size of the canvas for the children
		minWidth : CValueOrVar, minHeight : CValueOrVar,
		maxWidth : CValueOrVar, maxHeight : CValueOrVar,
		// Scaling for the children
		scalex : CValueOrVar, scaley : CValueOrVar,
		// Rotate for the children around their top,left point?
		rotation : CValueOrVar,
		// Outside canvas - crop, scroll, visible
		overflow : COverflowStyle,
		// Any children to include. These are in z-order on top of each other
		children : [Concert]
	);

		// Overflow css-like style for CCanvas
		COverflowStyle ::= COverflowCrop, COverflowVisible, COverflowScroll, COverflowCustom;

			// Crop content out of bounds
			COverflowCrop : ();
			// Show content out of bounds
			COverflowVisible : ();
			// Add scroll for out of bounds  content
			COverflowScroll : ();
			// Style that allows to add custom styles to canvas of type which provided in field "overflow"
			COverflowCustom : (styles : CObject);


	// A named value
	CKeyValue(key : string, value : Concert);

	// Object is key/values: Data table, tabs, steppers
	CObject(values : Tree<string, Concert>);


	//
	// Graphics
	//

	// TODO: Arrow parts
	CGraphics(dimensionalParameters : CObject);

	// Icon
	// Picture
	// Video
	// Views: Thumbnail

	// An editor itself
	CEditor(parameters : [Concert]);
	// parameters
	// name : string,	// name can be empty only if no events interaction is expected. Otherwise events won't reach the editor.
	// isNested : bool, // The editor can be either nested - an element inside some host editor, or separate - completely on its own
	// width : double,	// If size is ommitted it will take up all available space
	// height : double,
	// isRunner : bool, // behaves like a runner and evaluates its content
	// showPropertyPanel : bool,
	// showBreadcrumps : bool,
	// showToolbar : bool,
	// isStatic : bool,
	// autocollapseOnFocus : bool,
	// collapsable : bool,
	// displayMode : bool,
	// varName : string,
	// focusBarName : string, 	// content to display in focus bar
	// scope : [string] // a list of glocal variables to bind between the outer editor and the new editor
	// envDisposerVar: string	// a variable to control environment disposing. Should be initialized with "false", when it becomes "true" the env is disposed

	// Monaco editor
	CMonacoEditor(readonly : bool, value : CValueOrVar);

	// Events from the editor
	// Create document:
	// - Take the prototyped. Access rights for this. Restrict rights for current document. Share with group.
	// - Create from template. We have a fixed list of types to choose from. Defined by programmers.
	// Delete document

	// Share dialog


	// Update a bound value
	CSet(name : string, value : Concert, pos : ConcertPos);
	// Variable reference
	CVar(name : string, pos : ConcertPos);
	// Local variable
	CLet(name : string, value : Concert, body : Concert, pos : ConcertPos);
	// A formula which is continually updated, accessible by a name
	CFormula(name : string, value : Concert);

	CCall(fn : Concert, children : [Concert], pos : ConcertPos);
	CCallBuiltin(name : string, children : [Concert], pos : ConcertPos);
	CLambda(args : [string], body : Concert);

	CIf(cond : Concert, then : Concert, elsec : Concert, pos : ConcertPos);
	CSequence(children : [Concert]);
	CQuote(body : Concert);
	CUnquote(body : Concert, pos : ConcertPos);

	// Go to. CSetFocus(concert)

	// Invariants
	// leads : on/off;
	// analyzing : off/on;
	// invariant (leds == off && analyzing = off) || (leds == on);
	//	analyzing => leds == on

	// Trigger: Some event happens, including LXP or other learning events

	// Scripting, client-side & server-side
	// - Allow anything, given that it is written by programmers. Any user id is fine.
	// - Access key rule for server-side script
	// - Require a user id for execution server-side to be used to run it with the correct rights
	//   Has to be a user-id from the set of people that have access to the originating document.
	// - Role based rights?
	// - Run as the user that initiates the script, even if it is in the future, but check the
	//   rights at that point in time. Maybe allow this at runtime after explicit approval

	// Add/edit users

	// Database table definition, access rights. Maybe allow this at runtime after explicit approval
	// Query (SSql)

	// Send email: to, cc, bcc, subject, reply-to, attachment, body

	// Assignments: This is probably a new type.

	// Wait: Time span or fixed date, display while waiting.

	// In any order: CInAnyOrder(concerts, allowParallel : bool)

	// Repeat: CRepeat(lambda, untilcond : concert)

	// Change language
	// Error handler
	// Embed website/iframe
	// API request
	// Sub-process/case

	// Search

	// For externally defined constructs
	CExternal(name : string, dimensionalParameters : CObject, children : [Concert]);

	CAsCode(syntax : string, parsed : Concert);

	CHTML(innerHTML : string, evaluate : bool, children : [Concert]);

	// No size, each element has its own defaults for it
	zeroConcertPosition = keyValues2cobject([
		CKeyValue("positionX", CDouble(0.0)),
		CKeyValue("positionY", CDouble(0.0)),
	]);

	ConcertPos(source : string, line : int, column : int);
	zeroConcertPos = ConcertPos("", 0, 0);

	makeCObject() -> CObject;
	keyValues2cobject(value : [CKeyValue]) -> CObject;
	cobject2keyValues(c : CObject) -> [CKeyValue];
	cobjectValues2keyValues(values : Tree<string, Concert>) -> [CKeyValue];
}

makeCObject() -> CObject {
	CObject(makeTree())
}

keyValues2cobject(value : [CKeyValue]) -> CObject {
	CObject(pairs2tree(map(value, \kv -> Pair(kv.key, kv.value))))
}

cobject2keyValues(c : CObject) -> [CKeyValue] {
	cobjectValues2keyValues(c.values)
}

cobjectValues2keyValues(values : Tree<string, Concert>) -> [CKeyValue] {
	convertTreeToArray(values, \k, v -> CKeyValue(k, v))
}

getConcertPairs1() -> [Pair<string, Concert>] {
	[
		Pair("Alpha", CLambda(["c", "alpha"], CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("alpha", CVar("alpha", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos))),
		Pair("Arc", CLambda(["x", "y", "rx", "ry", "angle", "largeArc", "sweep"], CObject(TreeNode("rx", CVar("rx", zeroConcertPos), TreeNode("largeArc", CVar("largeArc", zeroConcertPos), TreeNode("angle", CVar("angle", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("name", CText("Arc"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("x", CVar("x", zeroConcertPos), TreeNode("ry", CVar("ry", zeroConcertPos), TreeEmpty(), TreeNode("sweep", CVar("sweep", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4)))),
		Pair("Arrow", CLambda(["obj"], CLet("tailWidth", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("tailWidth"), CDouble(8.0)], zeroConcertPos), CLet("headLength", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("headLength"), CDouble(8.0)], zeroConcertPos), CLet("headWidth", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("headWidth"), CDouble(8.0)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("width", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(128.0)], zeroConcertPos), CLet("height", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(128.0)], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(true)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("fill", CInt(43520), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("angle", CCallBuiltin("ATAN2", [CVar("height", zeroConcertPos), CVar("width", zeroConcertPos)], zeroConcertPos), CLet("length", CCallBuiltin("SQRT", [CCallBuiltin("+", [CCallBuiltin("POWER", [CVar("width", zeroConcertPos), CInt(2)], zeroConcertPos), CCallBuiltin("POWER", [CVar("height", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("arrow", CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CDouble(0.0), CCallBuiltin("/", [CCallBuiltin("-", [CInt(0), CVar("tailWidth", zeroConcertPos)], zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CCallBuiltin("-", [CVar("length", zeroConcertPos), CVar("headLength", zeroConcertPos)], zeroConcertPos), CCallBuiltin("/", [CCallBuiltin("-", [CInt(0), CVar("tailWidth", zeroConcertPos)], zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CCallBuiltin("-", [CVar("length", zeroConcertPos), CVar("headLength", zeroConcertPos)], zeroConcertPos), CCallBuiltin("/", [CCallBuiltin("-", [CInt(0), CVar("headWidth", zeroConcertPos)], zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CVar("length", zeroConcertPos), CDouble(0.0)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CCallBuiltin("-", [CVar("length", zeroConcertPos), CVar("headLength", zeroConcertPos)], zeroConcertPos), CCallBuiltin("/", [CVar("headWidth", zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CCallBuiltin("-", [CVar("length", zeroConcertPos), CVar("headLength", zeroConcertPos)], zeroConcertPos), CCallBuiltin("/", [CVar("tailWidth", zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CDouble(0.0), CCallBuiltin("/", [CVar("tailWidth", zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CCall(CVar("rotateGraphics", zeroConcertPos), [CVar("arrow", zeroConcertPos), CCallBuiltin("DEGREES", [CCallBuiltin("-", [CInt(0), CVar("angle", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("AttachHeight", CLambda(["c", "heightVar"], CCallBuiltin("External", [CText("Inspect"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CVar("c", zeroConcertPos), TreeEmpty(), TreeNode("inspectors", CObject(TreeNode("height", CVar("heightVar", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos))),
		Pair("AvailableSizedWidth", CLambda(["element", "widthName"], CCallBuiltin("External", [CText("Available"), CArray(CArrayView(0, 0), [CObject(TreeNode("width", CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CVar("widthName", zeroConcertPos)])], zeroConcertPos), TreeNode("content", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos))),
		Pair("CenterXIn", CLambda(["width", "c"], CCallBuiltin("External", [CText("Tweak"), CArray(CArrayView(0, 0), [CObject(TreeNode("height", CDouble(0.0), TreeNode("align", CObject(TreeNode("alignmentHorizontal", CDouble(0.5), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("content", CVar("c", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos))),
		Pair("CenterXYIn", CLambda(["width", "height", "c"], CCallBuiltin("External", [CText("Tweak"), CArray(CArrayView(0, 0), [CObject(TreeNode("height", CVar("height", zeroConcertPos), TreeNode("align", CObject(TreeNode("alignmentVertical", CDouble(0.5), TreeNode("alignmentHorizontal", CDouble(0.5), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("content", CVar("c", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos))),
		Pair("CenterYIn", CLambda(["height", "c"], CCallBuiltin("External", [CText("Tweak"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CVar("c", zeroConcertPos), TreeNode("align", CObject(TreeNode("alignmentVertical", CDouble(0.5), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos))),
		Pair("ClosePath", CLambda([], CObject(TreeNode("name", CText("ClosePath"), TreeEmpty(), TreeEmpty(), 1)))),
		Pair("ColsUnframed", CLambda(["c"], CCallBuiltin("Array", [CObject(TreeNode("framed", CBool(false), TreeEmpty(), TreeEmpty(), 1)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("ColsUnframedAllowFillers", CLambda(["c"], CCallBuiltin("Array", [CObject(TreeNode("framed", CBool(false), TreeNode("allowFillers", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("ConcertPropPanelGlobalConstants", CObject(TreeNode("codingTypes", CArray(CArrayView(0, 0), [CText("Set"), CText("Var"), CText("Let"), CText("Formula"), CText("Call"), CText("CallBuiltin"), CText("Lambda"), CText("If"), CText("Sequence")]), TreeNode("canvasTypes", CArray(CArrayView(0, 0), [CText("CanvasCrop"), CText("Canvas"), CText("CanvasScroll")]), TreeEmpty(), TreeEmpty(), 1), TreeNode("propsNames", CObject(TreeNode("Int", CArray(CArrayView(0, 0), [CText("value")]), TreeNode("Double", CArray(CArrayView(0, 0), [CText("value")]), TreeNode("CallBuiltin", CArray(CArrayView(0, 0), [CText("name"), CText("children")]), TreeNode("Bool", CArray(CArrayView(0, 0), [CText("value")]), TreeNode("AsCode", CArray(CArrayView(0, 0), [CText("syntax"), CText("size"), CText("parsed")]), TreeEmpty(), TreeEmpty(), 1), TreeNode("Call", CArray(CArrayView(0, 0), [CText("fn"), CText("args")]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("CanvasCrop", CArray(CArrayView(0, 0), [CText("x"), CText("y"), CText("minWidth"), CText("minHeight"), CText("maxWidth"), CText("maxHeight"), CText("scalex"), CText("scaley"), CText("rotation"), CText("children")]), TreeNode("Canvas", CArray(CArrayView(0, 0), [CText("x"), CText("y"), CText("minWidth"), CText("minHeight"), CText("maxWidth"), CText("maxHeight"), CText("scalex"), CText("scaley"), CText("rotation"), CText("children")]), TreeEmpty(), TreeEmpty(), 1), TreeNode("Comap", CArray(CArrayView(0, 0), [CText("header"), CText("children")]), TreeNode("CanvasScroll", CArray(CArrayView(0, 0), [CText("x"), CText("y"), CText("minWidth"), CText("minHeight"), CText("maxWidth"), CText("maxHeight"), CText("scalex"), CText("scaley"), CText("rotation"), CText("children")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4), TreeNode("Formula", CArray(CArrayView(0, 0), [CText("name"), CText("value")]), TreeNode("Editor", CArray(CArrayView(0, 0), [CText("name"), CText("readonly"), CText("size"), CText("showPropertiesPanel"), CText("showBreadcrumps"), CText("isStatic"), CText("autocollapseOnFocus"), CText("displayMode"), CText("value"), CText("scope")]), TreeNode("DropDown", CArray(CArrayView(0, 0), [CText("items"), CText("index")]), TreeEmpty(), TreeEmpty(), 1), TreeNode("Empty", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("HumanText", CArray(CArrayView(0, 0), [CText("value"), CText("language")]), TreeNode("Graphics", CArray(CArrayView(0, 0), [CText("shape"), CText("style"), CText("size")]), TreeEmpty(), TreeNode("HTML", CArray(CArrayView(0, 0), [CText("syntax"), CText("size"), CText("evaluate"), CText("children")]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("If", CArray(CArrayView(0, 0), [CText("cond"), CText("then"), CText("elsec")]), TreeEmpty(), TreeEmpty(), 1), 3), 4), 5), TreeNode("Quote", CArray(CArrayView(0, 0), []), TreeNode("Let", CArray(CArrayView(0, 0), [CText("name"), CText("value"), CText("body")]), TreeNode("Lambda", CArray(CArrayView(0, 0), [CText("args"), CText("body")]), TreeNode("KeyValue", CArray(CArrayView(0, 0), [CText("key"), CText("value")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("Object", CArray(CArrayView(0, 0), []), TreeNode("MonacoEditor", CArray(CArrayView(0, 0), [CText("readonly"), CText("style")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("Set", CArray(CArrayView(0, 0), [CText("name"), CText("value")]), TreeNode("Sequence", CArray(CArrayView(0, 0), []), TreeNode("Radio", CArray(CArrayView(0, 0), [CText("items"), CText("index")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("Unquote", CArray(CArrayView(0, 0), []), TreeNode("Text", CArray(CArrayView(0, 0), [CText("value")]), TreeNode("Table", CArray(CArrayView(0, 0), [CText("children")]), TreeEmpty(), TreeEmpty(), 1), TreeNode("Tree", CArray(CArrayView(0, 0), [CText("header"), CText("children")]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Var", CArray(CArrayView(0, 0), [CText("name")]), TreeEmpty(), TreeEmpty(), 1), 3), 4), 5), 6)), TreeNode("defaultEditorParameters", CObject(TreeNode("name", CText("concertEditor"), TreeNode("isNested", CBool(true), TreeNode("collapsable", CBool(true), TreeNode("autocollapseOnFocus", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("height", CDouble(600.0), TreeNode("displayMode", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("isRunner", CBool(false), TreeEmpty(), TreeNode("isStatic", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 4), TreeNode("showPropertyPanel", CBool(true), TreeNode("showBreadcrumps", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("varName", CText("varName"), TreeNode("showToolbar", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(600.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 5)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))),
		Pair("Cons", CLambda(["head", "tail"], CObject(TreeNode("head", CVar("head", zeroConcertPos), TreeEmpty(), TreeNode("tail", CVar("tail", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("Construct", CLambda(["constructors", "content"], CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("constructors", CVar("constructors", zeroConcertPos), TreeEmpty(), TreeNode("displayView", CVar("content", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos))),
		Pair("CubicBezier", CLambda(["x", "y", "control1X", "control1Y", "control2X", "control2Y"], CObject(TreeNode("name", CText("CubicBezier"), TreeNode("control1Y", CVar("control1Y", zeroConcertPos), TreeNode("control1X", CVar("control1X", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("control2X", CVar("control2X", zeroConcertPos), TreeEmpty(), TreeNode("control2Y", CVar("control2Y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("x", CVar("x", zeroConcertPos), TreeEmpty(), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 4)))),
		Pair("CubicBezierEasing", CLambda(["x1", "y1", "x2", "y2"], CArray(CArrayView(0, 0), [CVar("x1", zeroConcertPos), CVar("y1", zeroConcertPos), CVar("x2", zeroConcertPos), CVar("y2", zeroConcertPos)]))),
		Pair("CubicBezierSmooth", CLambda(["x", "y", "controlX", "controlY"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("controlY", CVar("controlY", zeroConcertPos), TreeNode("controlX", CVar("controlX", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("name", CText("CubicBezierSmooth"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))),
		Pair("CubicBezierTo", CLambda(["x", "y", "controlX", "controlY"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("controlY", CVar("controlY", zeroConcertPos), TreeNode("controlX", CVar("controlX", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("name", CText("CubicBezierTo"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))),
		Pair("Debug", CLambda(["color", "c"], CCallBuiltin("External", [CText("Debug"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CVar("c", zeroConcertPos), TreeNode("color", CVar("color", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos))),
		Pair("DebugBlue", CLambda(["c"], CCall(CVar("Debug", zeroConcertPos), [CKeyValue("blue", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DebugGreen", CLambda(["c"], CCall(CVar("Debug", zeroConcertPos), [CKeyValue("green", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DebugMetrics", CLambda(["color", "c"], CCallBuiltin("External", [CText("Debug"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CVar("c", zeroConcertPos), TreeNode("color", CVar("color", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("type", CText("metrics"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos))),
		Pair("DebugMetricsBlue", CLambda(["c"], CCall(CVar("DebugMetrics", zeroConcertPos), [CKeyValue("blue", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DebugMetricsGreen", CLambda(["c"], CCall(CVar("DebugMetrics", zeroConcertPos), [CKeyValue("green", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DebugMetricsPurple", CLambda(["c"], CCall(CVar("DebugMetrics", zeroConcertPos), [CKeyValue("purple", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DebugMetricsRed", CLambda(["c"], CCall(CVar("DebugMetrics", zeroConcertPos), [CKeyValue("red", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DebugPurple", CLambda(["c"], CCall(CVar("Debug", zeroConcertPos), [CKeyValue("purple", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DebugRed", CLambda(["c"], CCall(CVar("Debug", zeroConcertPos), [CKeyValue("red", CInt(500)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("DragDropRestricted", CLambda(["obj"], CLet("elements", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("elements"), CArray(CArrayView(0, 0), [CCall(CVar("Ellipse", zeroConcertPos), [CObject(TreeEmpty())], zeroConcertPos)])], zeroConcertPos), CLet("width", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(400.0)], zeroConcertPos), CLet("height", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(400.0)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("startId", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("startId"), CInt(0)], zeroConcertPos), CLet("restrict", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("restrict"), CLambda(["i", "x", "y"], CCall(CVar("Point", zeroConcertPos), [CVar("x", zeroConcertPos), CVar("y", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("requireMouseInside", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("requireMouseInside"), CText("always")], zeroConcertPos), CLet("mouseDownName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("mouseDownName"), CText("")], zeroConcertPos), CLet("mouseDownName", CIf(CCallBuiltin("==", [CVar("mouseDownName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("mouseDownName0", zeroConcertPos), CBool(false)], zeroConcertPos), CVar("mouseDownName0", zeroConcertPos)]), zeroConcertPos), CLet("coordsName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("coordsName"), CText("")], zeroConcertPos), CLet("coordsName", CIf(CCallBuiltin("==", [CVar("coordsName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CVar("elements", zeroConcertPos), CLambda(["__"], CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CVar("coordsName0", zeroConcertPos), zeroConcertPos), CLet("mouseInsideNames", CCall(CVar("map", zeroConcertPos), [CVar("elements", zeroConcertPos), CLambda(["__"], CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos))], zeroConcertPos), CLet("mouseXYName", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("currentDraggingIdName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("requireMouseInside", zeroConcertPos), CText("onStart")], zeroConcertPos), CLet("lockedDraggingName", CCall(CVar("createVar", zeroConcertPos), [CInt(-1)], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CVar("currentDraggingIdName", zeroConcertPos), CLambda([], CLet("current", CCall(CVar("findi", zeroConcertPos), [CVar("mouseInsideNames", zeroConcertPos), CVar("getVar", zeroConcertPos), CInt(-1)], zeroConcertPos), CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("mouseDownName", zeroConcertPos)], zeroConcertPos), CLet("lockedDraggingId", CCall(CVar("getVar", zeroConcertPos), [CVar("lockedDraggingName", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("lockedDraggingId", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("lockedDraggingId", zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("lockedDraggingName", zeroConcertPos), CVar("current", zeroConcertPos)], zeroConcertPos), CVar("current", zeroConcertPos)]), zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("lockedDraggingName", zeroConcertPos), CVar("current", zeroConcertPos)], zeroConcertPos), CVar("current", zeroConcertPos)]), zeroConcertPos), zeroConcertPos)), CCall(CVar("arrayPush", zeroConcertPos), [CVar("mouseInsideNames", zeroConcertPos), CVar("mouseDownName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CVar("currentDraggingIdName", zeroConcertPos), CLambda([], CCall(CVar("findi", zeroConcertPos), [CVar("mouseInsideNames", zeroConcertPos), CVar("getVar", zeroConcertPos), CInt(-1)], zeroConcertPos)), CVar("mouseInsideNames", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("positionXNames", CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos), CLambda(["p"], CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("positionYNames", CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos), CLambda(["p"], CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("mapi", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos), CLambda(["i", "p"], CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("index", [CVar("positionXNames", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CCallBuiltin("index", [CVar("positionYNames", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("coordsName", zeroConcertPos)])], zeroConcertPos), CLet("grabPointName", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("releasePosSetFlagName", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CLet("currentDraggingId", CCall(CVar("getVar", zeroConcertPos), [CVar("currentDraggingIdName", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCall(CVar("getVar", zeroConcertPos), [CVar("mouseDownName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CVar("currentDraggingId", zeroConcertPos), CInt(-1)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("releasePosSetFlagName", zeroConcertPos), CBool(false)], zeroConcertPos), CLet("newp", CCall(CVar("restrict", zeroConcertPos), [CVar("currentDraggingId", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("dot", [CCall(CVar("getVar", zeroConcertPos), [CVar("mouseXYName", zeroConcertPos)], zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CCall(CVar("getVar", zeroConcertPos), [CVar("grabPointName", zeroConcertPos)], zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("dot", [CCall(CVar("getVar", zeroConcertPos), [CVar("mouseXYName", zeroConcertPos)], zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CCall(CVar("getVar", zeroConcertPos), [CVar("grabPointName", zeroConcertPos)], zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("index", [CVar("positionXNames", zeroConcertPos), CVar("currentDraggingId", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("newp", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("index", [CVar("positionYNames", zeroConcertPos), CVar("currentDraggingId", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("newp", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), CCall(CVar("updateVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos), CLambda(["name"], CCallBuiltin("replace", [CVar("name", zeroConcertPos), CVar("currentDraggingId", zeroConcertPos), CVar("newp", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)])]), zeroConcertPos)]), CIf(CCallBuiltin("!=", [CVar("currentDraggingId", zeroConcertPos), CInt(-1)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("grabPointName", zeroConcertPos), CCall(CVar("subtractPoints", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("mouseXYName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos), CVar("currentDraggingId", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("mouseXYName", zeroConcertPos), CVar("mouseDownName", zeroConcertPos)])], zeroConcertPos), CLet("dragDropRestricted", CCallBuiltin("CanvasCrop", [CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CVar("width", zeroConcertPos), CVar("height", zeroConcertPos), CDouble(1.0), CDouble(1.0), CDouble(0.0), CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("Interactive"), CArray(CArrayView(0, 0), [CObject(TreeNode("id", CVar("startId", zeroConcertPos), TreeNode("content", CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("interactivity", CObject(TreeNode("mouseXY", CVar("mouseXYName", zeroConcertPos), TreeNode("mouseDown", CVar("mouseDownName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)]), CCall(CVar("mapi", zeroConcertPos), [CVar("elements", zeroConcertPos), CLambda(["i", "element"], CCallBuiltin("External", [CText("Interactive"), CArray(CArrayView(0, 0), [CObject(TreeNode("id", CCallBuiltin("+", [CCallBuiltin("+", [CVar("startId", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), TreeNode("content", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("positionXNames", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), TreeNode("interactivity", CObject(TreeNode("mouseInside", CCallBuiltin("index", [CVar("mouseInsideNames", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("positionYNames", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CVar("dragDropRestricted", zeroConcertPos), TreeNode("chip", CText("DragDropRestricted"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CIf(CCall(CVar("isText", zeroConcertPos), [CVar("positionX", zeroConcertPos)], zeroConcertPos), CCall(CVar("var", zeroConcertPos), [CVar("positionX", zeroConcertPos)], zeroConcertPos), CVar("positionX", zeroConcertPos), zeroConcertPos), TreeNode("editView", CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fill", CInt(0), TreeEmpty(), TreeNode("fillOpacity", CDouble(0.5), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CIf(CCall(CVar("isText", zeroConcertPos), [CVar("positionY", zeroConcertPos)], zeroConcertPos), CCall(CVar("var", zeroConcertPos), [CVar("positionY", zeroConcertPos)], zeroConcertPos), CVar("positionY", zeroConcertPos), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs2() -> [Pair<string, Concert>] {
	[
		Pair("DraggableArea", CLambda(["obj"], CLet("elementsName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("elementsName"), CText("")], zeroConcertPos), CLet("width", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CInt(400)], zeroConcertPos), CLet("height", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CInt(400)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("startId", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("startId"), CInt(0)], zeroConcertPos), CLet("grabDelay", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("grabDelay"), CInt(5)], zeroConcertPos), CLet("onClick", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("onClick"), CLambda(["mouseCoords"], CObject(TreeEmpty()))], zeroConcertPos), CLet("onElementClick", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("onElementClick"), CLambda(["i"], CObject(TreeEmpty()))], zeroConcertPos), CLet("coordsName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("coordsName"), CText("")], zeroConcertPos), CLet("continuousCoordsName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("continuousCoordsName"), CText("")], zeroConcertPos), CLet("snapToGrid", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("snapToGrid"), CCall(CVar("Point", zeroConcertPos), [CInt(-1), CInt(-1)], zeroConcertPos)], zeroConcertPos), CLet("noGrabAnimation", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("noGrabAnimation"), CBool(false)], zeroConcertPos), CLet("coordsName", CIf(CCallBuiltin("==", [CVar("coordsName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("arrayRepeat", zeroConcertPos), [CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos), CCallBuiltin("length", [CCall(CVar("getVar", zeroConcertPos), [CVar("elementsName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("coordsName0", zeroConcertPos), zeroConcertPos), CLet("continuousCoordsName", CIf(CCallBuiltin("==", [CVar("continuousCoordsName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("continuousCoordsName0", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("continuousCoordsName0", zeroConcertPos)]), zeroConcertPos), CLet("mouseName", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("grabsNamesName", CCall(CVar("select", zeroConcertPos), [CVar("elementsName", zeroConcertPos), CLambda(["elements"], CCall(CVar("arrayRepeat", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("length", [CVar("elements", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("currentDraggedName", CCall(CVar("createVar", zeroConcertPos), [CInt(-1)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CLet("currentDragged", CCall(CVar("getVar", zeroConcertPos), [CVar("currentDraggedName", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("currentDragged", zeroConcertPos), CInt(-1)], zeroConcertPos), CCall(CVar("updateVar", zeroConcertPos), [CVar("continuousCoordsName", zeroConcertPos), CLambda(["cn"], CLet("mouse", CCall(CVar("getVar", zeroConcertPos), [CVar("mouseName", zeroConcertPos)], zeroConcertPos), CLet("grab", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("index", [CCall(CVar("getVar", zeroConcertPos), [CVar("grabsNamesName", zeroConcertPos)], zeroConcertPos), CVar("currentDragged", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("replace", [CVar("cn", zeroConcertPos), CVar("currentDragged", zeroConcertPos), CCall(CVar("subtractPoints", zeroConcertPos), [CVar("mouse", zeroConcertPos), CVar("grab", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos)), CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CVar("currentDraggedName", zeroConcertPos), CVar("mouseName", zeroConcertPos)]), CCall(CVar("getVar", zeroConcertPos), [CVar("grabsNamesName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("isAnyElementHoveredName", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), CLet("snap", CLambda(["axis", "coord"], CLet("s", CCallBuiltin("getKeyObjDef", [CVar("snapToGrid", zeroConcertPos), CVar("axis", zeroConcertPos), CInt(-1)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("s", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("coord", zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("ROUND", [CCallBuiltin("/", [CVar("coord", zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("draggableArea", CCallBuiltin("Canvas", [CDouble(0.0), CDouble(0.0), CVar("width", zeroConcertPos), CVar("height", zeroConcertPos), CVar("width", zeroConcertPos), CVar("height", zeroConcertPos), CDouble(1.0), CDouble(1.0), CDouble(0.0), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("DragDrop"), CArray(CArrayView(0, 0), [CObject(TreeNode("id", CVar("startId", zeroConcertPos), TreeNode("draggingEnabled", CBool(false), TreeEmpty(), TreeNode("droppingEnabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("localMousePositionName", CVar("mouseName", zeroConcertPos), TreeNode("idleContentName", CCall(CVar("useContent", zeroConcertPos), [CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("onDrop", CLambda(["id"], CLet("i", CCallBuiltin("-", [CCallBuiltin("-", [CVar("id", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("startId", zeroConcertPos)], zeroConcertPos), CLet("mouse", CCall(CVar("getVar", zeroConcertPos), [CVar("mouseName", zeroConcertPos)], zeroConcertPos), CLet("grab", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("index", [CCall(CVar("getVar", zeroConcertPos), [CVar("grabsNamesName", zeroConcertPos)], zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("snappedPoint", CCall(CVar("Point", zeroConcertPos), [CCall(CVar("snap", zeroConcertPos), [CText("x"), CCallBuiltin("-", [CCallBuiltin("dot", [CVar("mouse", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("grab", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("snap", zeroConcertPos), [CText("y"), CCallBuiltin("-", [CCallBuiltin("dot", [CVar("mouse", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("grab", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("updateVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos), CLambda(["cn"], CCallBuiltin("replace", [CVar("cn", zeroConcertPos), CVar("i", zeroConcertPos), CVar("snappedPoint", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeNode("onClickAction", CLambda([], CCall(CVar("timer", zeroConcertPos), [CVar("grabDelay", zeroConcertPos), CLambda([], CIf(CCallBuiltin("not", [CCall(CVar("getVar", zeroConcertPos), [CVar("isAnyElementHoveredName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("onClick", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("mouseName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4))])], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("Group", zeroConcertPos), [CCall(CVar("mapi", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("elementsName", zeroConcertPos)], zeroConcertPos), CLambda(["i", "element"], CCallBuiltin("External", [CText("DragDrop"), CArray(CArrayView(0, 0), [CObject(TreeNode("id", CCallBuiltin("+", [CCallBuiltin("+", [CVar("startId", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), TreeNode("grabDelay", CVar("grabDelay", zeroConcertPos), TreeNode("draggingEnabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("grabPositionName", CCallBuiltin("index", [CCall(CVar("getVar", zeroConcertPos), [CVar("grabsNamesName", zeroConcertPos)], zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeNode("hoveringName", CVar("isAnyElementHoveredName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("onClickAction", CLambda([], CCall(CVar("onElementClick", zeroConcertPos), [CVar("i", zeroConcertPos)], zeroConcertPos)), TreeNode("idleContentName", CCall(CVar("useContent", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeNode("noGrabAnimation", CVar("noGrabAnimation", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("positionX", CCallBuiltin("dot", [CCall(CVar("elementAt", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos), CVar("i", zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CText("x")], zeroConcertPos), TreeNode("onDrag", CLambda(["dragged"], CIf(CVar("dragged", zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("currentDraggedName", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("currentDraggedName", zeroConcertPos), CInt(-1)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("continuousCoordsName", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CCallBuiltin("dot", [CCall(CVar("elementAt", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("coordsName", zeroConcertPos)], zeroConcertPos), CVar("i", zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CText("y")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("elementsName", zeroConcertPos), CVar("coordsName", zeroConcertPos)])], zeroConcertPos)])], zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CVar("draggableArea", zeroConcertPos), TreeNode("chip", CText("DraggableArea"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("editView", CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fill", CInt(0), TreeEmpty(), TreeNode("fillOpacity", CDouble(0.5), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Ellipse", CLambda(["obj"], CLet("width0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(128.0)], zeroConcertPos), CLet("height0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(128.0)], zeroConcertPos), CLet("positionX0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(true)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("fill", CInt(16711680), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("makeElement", CLambda(["args"], CLet("width", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("height", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CLet("positionX", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(2)], zeroConcertPos), CLet("positionY", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(3)], zeroConcertPos), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("GEllipse", zeroConcertPos), [CCallBuiltin("/", [CVar("width", zeroConcertPos), CDouble(2.0)], zeroConcertPos), CCallBuiltin("/", [CVar("height", zeroConcertPos), CDouble(2.0)], zeroConcertPos), CCallBuiltin("/", [CVar("width", zeroConcertPos), CDouble(2.0)], zeroConcertPos), CCallBuiltin("/", [CVar("height", zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("args", CArray(CArrayView(0, 0), [CVar("width0", zeroConcertPos), CVar("height0", zeroConcertPos), CVar("positionX0", zeroConcertPos), CVar("positionY0", zeroConcertPos)]), CLet("views", CCall(CVar("makeShapeViews", zeroConcertPos), [CVar("makeElement", zeroConcertPos), CVar("args", zeroConcertPos), CArray(CArrayView(0, 0), [CDouble(128.0), CDouble(128.0), CDouble(0.0), CDouble(0.0)])], zeroConcertPos), CLet("isDynamic", CCall(CVar("exists", zeroConcertPos), [CVar("args", zeroConcertPos), CLambda(["a"], CCallBuiltin("not", [CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("viewsObj", CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeEmpty(), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CVar("isDynamic", zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeNode("chip", CText("Dynamic"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("EmptyList", CLambda([], CObject(TreeEmpty()))),
		Pair("EvenCols", CLambda(["obj"], CLet("items", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("items"), CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("width", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CInt(-1)], zeroConcertPos), CLet("step", CCallBuiltin("/", [CVar("width", zeroConcertPos), CCallBuiltin("length", [CVar("items", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("halfStep", CCallBuiltin("/", [CVar("step", zeroConcertPos), CInt(2)], zeroConcertPos), CCallBuiltin("Canvas", [CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CVar("width", zeroConcertPos), CDouble(1.0), CDouble(1.0), CDouble(0.0), CCall(CVar("mapi", zeroConcertPos), [CVar("items", zeroConcertPos), CLambda(["i", "item"], CCallBuiltin("Canvas", [CCallBuiltin("+", [CVar("halfStep", zeroConcertPos), CCallBuiltin("*", [CVar("i", zeroConcertPos), CVar("step", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(1.0), CDouble(1.0), CDouble(0.0), CArray(CArrayView(0, 0), [CVar("item", zeroConcertPos)])], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("ExpanderMenu", CLambda(["obj"], CLet("header", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("header"), CText("Header")], zeroConcertPos), CLet("items", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("items"), CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("color", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("color"), CInt(0)], zeroConcertPos), CLet("width", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(240.0)], zeroConcertPos), CLet("isVisible", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("isVisible"), CBool(true)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("isOpenedName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("isOpenedName"), CText("")], zeroConcertPos), CLet("hintMarker", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("hintMarker"), CBool(false)], zeroConcertPos), CLet("iconSize", CDouble(24.0), CLet("marginWidth", CDouble(8.0), CIf(CVar("isVisible", zeroConcertPos), CCallBuiltin("External", [CText("Expander"), CArray(CArrayView(0, 0), [CObject(TreeNode("header", CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("size", CDouble(14.0), TreeNode("color", CVar("color", zeroConcertPos), TreeEmpty(), TreeNode("family", CText("RobotoMedium"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CVar("header", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), TreeNode("details", CCallBuiltin("Lines", [CCall(CVar("map", zeroConcertPos), [CVar("items", zeroConcertPos), CLambda(["item"], CLet("isItemVisible", CCallBuiltin("getKeyObjDef", [CVar("item", zeroConcertPos), CText("isVisible"), CBool(true)], zeroConcertPos), CIf(CVar("isItemVisible", zeroConcertPos), CLet("icon", CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("item", zeroConcertPos), CText("icon")], zeroConcertPos), CCallBuiltin("External", [CText("Icon"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("icon")], zeroConcertPos), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("iconSize", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CLet("extraButton", CIf(CCallBuiltin("&&", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CText("isVisible"), CBool(true)], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CText("menu")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CText("menu")], zeroConcertPos), CLet("button", CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CText("action")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CText("icon")], zeroConcertPos), TreeNode("hintMarker", CCallBuiltin("getKeyObjDef", [CVar("item", zeroConcertPos), CText("hintMarker"), CBool(false)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("iconSize", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CText("tooltip")], zeroConcertPos), CCallBuiltin("External", [CText("Tooltip"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("box", CVar("button", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("extraButton")], zeroConcertPos), CText("tooltip")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CVar("button", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CLet("textWithTooltip", CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("item", zeroConcertPos), CText("tooltip")], zeroConcertPos), CCallBuiltin("External", [CText("Tooltip"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("box", CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("text")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("tooltip")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("text")], zeroConcertPos), zeroConcertPos), CLet("result", CCallBuiltin("External", [CText("Paragraph"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CArray(CArrayView(0, 0), [CVar("icon", zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("extraButton", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("textWidth", CCallBuiltin("-", [CCallBuiltin("-", [CCallBuiltin("-", [CCallBuiltin("-", [CCallBuiltin("-", [CVar("width", zeroConcertPos), CVar("marginWidth", zeroConcertPos)], zeroConcertPos), CVar("iconSize", zeroConcertPos)], zeroConcertPos), CVar("marginWidth", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("icon", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("iconSize", zeroConcertPos), CVar("marginWidth", zeroConcertPos)], zeroConcertPos), CDouble(0.0), zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("marginWidth", zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Paragraph"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CArray(CArrayView(0, 0), [CVar("textWithTooltip", zeroConcertPos)]), TreeEmpty(), TreeNode("width", CVar("textWidth", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos), CVar("textWithTooltip", zeroConcertPos), zeroConcertPos), CVar("extraButton", zeroConcertPos)]), TreeEmpty(), TreeNode("width", CCallBuiltin("-", [CVar("width", zeroConcertPos), CCallBuiltin("*", [CVar("marginWidth", zeroConcertPos), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("External", [CText("CustomButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("heightMode", CText("fixed"), TreeNode("alignmentVertical", CDouble(0.5), TreeNode("action", CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("action")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("fixedHeight", CDouble(48.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("normal", CVar("result", zeroConcertPos), TreeNode("highlightOnHover", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("widthMode", CText("stretched"), TreeNode("ripple", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("hintMarker", CVar("hintMarker", zeroConcertPos), TreeEmpty(), TreeNode("isOpenedName", CVar("isOpenedName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CVar("width", zeroConcertPos), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4))])], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Factor", CLambda(["x", "y"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeEmpty(), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("FadeIn", CLambda(["obj"], CLet("element", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("element"), CText("Placeholder")], zeroConcertPos), CLet("duration", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("duration"), CDouble(10.0)], zeroConcertPos), CLet("triggerName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("triggerName"), CText("")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("animation", CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("duration", CVar("duration", zeroConcertPos), TreeNode("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("alpha", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), CObject(TreeNode("alpha", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1))]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCall(CVar("bindToTrigger", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CVar("animation", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), TreeNode("chip", CText("FadeIn"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("editView", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("FadeOut", CLambda(["obj"], CLet("element", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("element"), CText("Placeholder")], zeroConcertPos), CLet("duration", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("duration"), CDouble(10.0)], zeroConcertPos), CLet("triggerName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("triggerName"), CText("")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("animation", CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("duration", CVar("duration", zeroConcertPos), TreeNode("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("alpha", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1)), CObject(TreeNode("alpha", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1))]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCall(CVar("bindToTrigger", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CVar("animation", zeroConcertPos), CVar("element", zeroConcertPos)], zeroConcertPos), TreeNode("chip", CText("FadeOut"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("editView", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("FillX", CLambda([], CCallBuiltin("External", [CText("Fill"), CArray(CArrayView(0, 0), [CObject(TreeNode("fillX", CBool(true), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos))),
		Pair("FillXY", CLambda([], CCallBuiltin("External", [CText("Fill"), CArray(CArrayView(0, 0), [CObject(TreeNode("fillY", CBool(true), TreeNode("fillX", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos))),
		Pair("FillY", CLambda([], CCallBuiltin("External", [CText("Fill"), CArray(CArrayView(0, 0), [CObject(TreeNode("fillY", CBool(true), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos))),
		Pair("FixedHeight", CLambda(["height"], CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CInt(0), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))),
		Pair("FixedSize", CLambda(["width", "height"], CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))),
		Pair("FixedWidth", CLambda(["width"], CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))),
		Pair("GCircle", CLambda(["x", "y", "radius"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("GCircle"), TreeEmpty(), TreeNode("radius", CVar("radius", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))),
		Pair("GEllipse", CLambda(["x", "y", "width", "height"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("GEllipse"), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))),
		Pair("GRect", CLambda(["x", "y", "width", "height"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("GRect"), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))),
		Pair("GRoundedRect", CLambda(["x", "y", "width", "height", "radius"], CObject(TreeNode("width", CVar("width", zeroConcertPos), TreeNode("name", CText("GRoundedRect"), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("radius", CVar("radius", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("x", CVar("x", zeroConcertPos), TreeEmpty(), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)))),
		Pair("GetWigiButton", CLambda(["obj"], CLet("wigiVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("wigiVarName"), CText("VAR")], zeroConcertPos), CLet("concertVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("concertVarName"), CText("var")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("concertVarName", zeroConcertPos), CCall(CVar("getWigi", zeroConcertPos), [CVar("wigiVarName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("raised", CBool(false), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("+", [CText("Get "), CVar("wigiVarName", zeroConcertPos)], zeroConcertPos), CText(" to ")], zeroConcertPos), CVar("concertVarName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Grid", CLambda(["obj"], CLet("rows0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("rows"), CInt(5)], zeroConcertPos), CLet("cols0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("cols"), CInt(5)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("width", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(128.0)], zeroConcertPos), CLet("height", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(128.0)], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(false)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("stroke", CInt(0), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("rows", CCallBuiltin("MAX", [CArray(CArrayView(0, 0), [CInt(0), CVar("rows0", zeroConcertPos)])], zeroConcertPos), CLet("cols", CCallBuiltin("MAX", [CArray(CArrayView(0, 0), [CInt(0), CVar("cols0", zeroConcertPos)])], zeroConcertPos), CLet("spacingx", CCallBuiltin("/", [CVar("width", zeroConcertPos), CVar("cols", zeroConcertPos)], zeroConcertPos), CLet("spacingy", CCallBuiltin("/", [CVar("height", zeroConcertPos), CVar("rows", zeroConcertPos)], zeroConcertPos), CLet("grid", CCall(CVar("composeGraphics", zeroConcertPos), [CCallBuiltin("concat", [CCall(CVar("map", zeroConcertPos), [CCall(CVar("enumFromTo", zeroConcertPos), [CInt(0), CVar("cols", zeroConcertPos)], zeroConcertPos), CLambda(["x"], CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CCallBuiltin("+", [CCallBuiltin("*", [CVar("x", zeroConcertPos), CVar("spacingx", zeroConcertPos)], zeroConcertPos), CVar("positionX", zeroConcertPos)], zeroConcertPos), CVar("positionY", zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CCallBuiltin("+", [CCallBuiltin("*", [CVar("x", zeroConcertPos), CVar("spacingx", zeroConcertPos)], zeroConcertPos), CVar("positionX", zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("height", zeroConcertPos), CVar("positionY", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("width", CDouble(0.0), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos))], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("enumFromTo", zeroConcertPos), [CInt(0), CVar("rows", zeroConcertPos)], zeroConcertPos), CLambda(["y"], CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CVar("positionX", zeroConcertPos), CCallBuiltin("+", [CCallBuiltin("*", [CVar("y", zeroConcertPos), CVar("spacingy", zeroConcertPos)], zeroConcertPos), CVar("positionY", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CCallBuiltin("+", [CVar("width", zeroConcertPos), CVar("positionX", zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CCallBuiltin("*", [CVar("y", zeroConcertPos), CVar("spacingy", zeroConcertPos)], zeroConcertPos), CVar("positionY", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("width", CVar("width", zeroConcertPos), TreeNode("height", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("makeWith", zeroConcertPos), [CVar("grid", zeroConcertPos), CObject(TreeNode("dimensionalParameters", CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Group", CLambda(["cs"], CCallBuiltin("Canvas", [CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(1.0), CDouble(1.0), CDouble(0.0), CVar("cs", zeroConcertPos)], zeroConcertPos))),
		Pair("GroupSolid", CLambda(["cs", "sz"], CLet("x", CCallBuiltin("getKeyObjDef", [CVar("sz", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("y", CCallBuiltin("getKeyObjDef", [CVar("sz", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CCallBuiltin("CanvasCrop", [CVar("x", zeroConcertPos), CVar("y", zeroConcertPos), CCallBuiltin("dot", [CVar("sz", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("sz", zeroConcertPos), CText("height")], zeroConcertPos), CCallBuiltin("dot", [CVar("sz", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("sz", zeroConcertPos), CText("height")], zeroConcertPos), CDouble(1.0), CDouble(1.0), CDouble(0.0), CVar("cs", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs3() -> [Pair<string, Concert>] {
	[
		Pair("GroupWithWH", CLambda(["cs", "wh"], CCallBuiltin("Canvas", [CDouble(0.0), CDouble(0.0), CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("height")], zeroConcertPos), CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("height")], zeroConcertPos), CDouble(1.0), CDouble(1.0), CDouble(0.0), CVar("cs", zeroConcertPos)], zeroConcertPos))),
		Pair("Line", CLambda(["x", "y"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("Line"), TreeEmpty(), TreeEmpty(), 1), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("LineSegment", CLambda(["obj"], CLet("positionX0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("width0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(128.0)], zeroConcertPos), CLet("height0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(128.0)], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(false)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("stroke", CInt(0), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("makeElement", CLambda(["args"], CLet("width", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("height", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CLet("positionX", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(2)], zeroConcertPos), CLet("positionY", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(3)], zeroConcertPos), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Line", zeroConcertPos), [CVar("width", zeroConcertPos), CVar("height", zeroConcertPos)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("args", CArray(CArrayView(0, 0), [CVar("width0", zeroConcertPos), CVar("height0", zeroConcertPos), CVar("positionX0", zeroConcertPos), CVar("positionY0", zeroConcertPos)]), CLet("views", CCall(CVar("makeShapeViews", zeroConcertPos), [CVar("makeElement", zeroConcertPos), CVar("args", zeroConcertPos), CArray(CArrayView(0, 0), [CDouble(128.0), CDouble(128.0), CDouble(0.0), CDouble(0.0)])], zeroConcertPos), CLet("isDynamic", CCall(CVar("exists", zeroConcertPos), [CVar("args", zeroConcertPos), CLambda(["a"], CCallBuiltin("not", [CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("viewsObj", CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeEmpty(), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CVar("isDynamic", zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeNode("chip", CText("Dynamic"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("LineSegmentBySlope", CLambda(["obj"], CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("m", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("m"), CDouble(-1.0)], zeroConcertPos), CLet("b", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("b"), CDouble(0.0)], zeroConcertPos), CLet("alpha", CCallBuiltin("ATAN", [CVar("m", zeroConcertPos)], zeroConcertPos), CLet("xStart", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("xStart"), CDouble(-200.0)], zeroConcertPos), CLet("yStart", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("yStart"), CDouble(200.0)], zeroConcertPos), CLet("xEnd", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("xEnd"), CDouble(200.0)], zeroConcertPos), CLet("yEnd", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("yEnd"), CDouble(-200.0)], zeroConcertPos), CLet("zeroSafeDiv", CLambda(["a", "b"], CIf(CCallBuiltin("==", [CVar("b", zeroConcertPos), CDouble(0.0)], zeroConcertPos), CCallBuiltin("/", [CVar("a", zeroConcertPos), CDouble(0.0001)], zeroConcertPos), CCallBuiltin("/", [CVar("a", zeroConcertPos), CVar("b", zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("fn", CLambda(["x"], CCallBuiltin("+", [CCallBuiltin("*", [CVar("x", zeroConcertPos), CVar("m", zeroConcertPos)], zeroConcertPos), CVar("b", zeroConcertPos)], zeroConcertPos)), CLet("invFn", CLambda(["y"], CCall(CVar("zeroSafeDiv", zeroConcertPos), [CCallBuiltin("-", [CVar("y", zeroConcertPos), CVar("b", zeroConcertPos)], zeroConcertPos), CVar("m", zeroConcertPos)], zeroConcertPos)), CLet("top", CCall(CVar("Point", zeroConcertPos), [CCall(CVar("invFn", zeroConcertPos), [CVar("yStart", zeroConcertPos)], zeroConcertPos), CVar("yStart", zeroConcertPos)], zeroConcertPos), CLet("left", CCall(CVar("Point", zeroConcertPos), [CVar("xStart", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("xStart", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("right", CCall(CVar("Point", zeroConcertPos), [CVar("xEnd", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("xEnd", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("bottom", CCall(CVar("Point", zeroConcertPos), [CCall(CVar("invFn", zeroConcertPos), [CVar("yEnd", zeroConcertPos)], zeroConcertPos), CVar("yEnd", zeroConcertPos)], zeroConcertPos), CLet("zeroPoint", CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos), CLet("ifCoordinateIsInRangeOrDef", CLambda(["point", "coord", "def"], CLet("value", CCallBuiltin("dot", [CVar("point", zeroConcertPos), CVar("coord", zeroConcertPos)], zeroConcertPos), CLet("range", CIf(CCallBuiltin("==", [CVar("coord", zeroConcertPos), CText("x")], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("xStart", zeroConcertPos), CVar("xEnd", zeroConcertPos)]), CArray(CArrayView(0, 0), [CVar("yEnd", zeroConcertPos), CVar("yStart", zeroConcertPos)]), zeroConcertPos), CIf(CCall(CVar("isBetween", zeroConcertPos), [CVar("value", zeroConcertPos), CCallBuiltin("index", [CVar("range", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("range", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CVar("point", zeroConcertPos), CVar("def", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("start", CCall(CVar("ifCoordinateIsInRangeOrDef", zeroConcertPos), [CVar("top", zeroConcertPos), CText("x"), CCall(CVar("ifCoordinateIsInRangeOrDef", zeroConcertPos), [CIf(CCallBuiltin(">", [CVar("alpha", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("right", zeroConcertPos), CVar("left", zeroConcertPos), zeroConcertPos), CText("y"), CVar("zeroPoint", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("end", CCall(CVar("ifCoordinateIsInRangeOrDef", zeroConcertPos), [CVar("bottom", zeroConcertPos), CText("x"), CCall(CVar("ifCoordinateIsInRangeOrDef", zeroConcertPos), [CIf(CCallBuiltin(">", [CVar("alpha", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("left", zeroConcertPos), CVar("right", zeroConcertPos), zeroConcertPos), CText("y"), CVar("zeroPoint", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("||", [CCallBuiltin("!=", [CVar("start", zeroConcertPos), CVar("zeroPoint", zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CVar("end", zeroConcertPos), CVar("zeroPoint", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("LineSegment", zeroConcertPos), [CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CObject(TreeNode("positionY", CCallBuiltin("+", [CCallBuiltin("-", [CInt(0), CCallBuiltin("dot", [CVar("start", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), CVar("positionY", zeroConcertPos)], zeroConcertPos), TreeNode("positionX", CCallBuiltin("+", [CCallBuiltin("dot", [CVar("start", zeroConcertPos), CText("x")], zeroConcertPos), CVar("positionX", zeroConcertPos)], zeroConcertPos), TreeNode("height", CCallBuiltin("-", [CInt(0), CCallBuiltin("-", [CCallBuiltin("dot", [CVar("end", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("start", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("end", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("start", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("LineSegmentByTwoPoints", CLambda(["obj"], CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("x1", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("x1"), CDouble(0.0)], zeroConcertPos), CLet("y1", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("y1"), CDouble(0.0)], zeroConcertPos), CLet("x2", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("x2"), CDouble(128.0)], zeroConcertPos), CLet("y2", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("y2"), CDouble(128.0)], zeroConcertPos), CLet("xStart", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("xStart"), CDouble(-200.0)], zeroConcertPos), CLet("xEnd", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("xEnd"), CDouble(200.0)], zeroConcertPos), CLet("yStart", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("yStart"), CDouble(200.0)], zeroConcertPos), CLet("yEnd", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("yEnd"), CDouble(-200.0)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("x1", zeroConcertPos), CVar("x2", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isBetween", zeroConcertPos), [CVar("x1", zeroConcertPos), CVar("xStart", zeroConcertPos), CVar("xEnd", zeroConcertPos)], zeroConcertPos), CCall(CVar("LineSegment", zeroConcertPos), [CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CObject(TreeNode("positionY", CCallBuiltin("-", [CVar("positionY", zeroConcertPos), CVar("yStart", zeroConcertPos)], zeroConcertPos), TreeNode("positionX", CCallBuiltin("+", [CVar("x1", zeroConcertPos), CVar("positionX", zeroConcertPos)], zeroConcertPos), TreeNode("height", CCallBuiltin("-", [CVar("yStart", zeroConcertPos), CVar("yEnd", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CInt(0), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("y1", zeroConcertPos), CVar("y2", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isBetween", zeroConcertPos), [CCallBuiltin("-", [CInt(0), CVar("y1", zeroConcertPos)], zeroConcertPos), CVar("yEnd", zeroConcertPos), CVar("yStart", zeroConcertPos)], zeroConcertPos), CCall(CVar("LineSegment", zeroConcertPos), [CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CObject(TreeNode("positionY", CCallBuiltin("+", [CVar("y1", zeroConcertPos), CVar("positionY", zeroConcertPos)], zeroConcertPos), TreeNode("positionX", CCallBuiltin("+", [CVar("xStart", zeroConcertPos), CVar("positionX", zeroConcertPos)], zeroConcertPos), TreeNode("height", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CCallBuiltin("-", [CVar("xEnd", zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CLet("m", CCallBuiltin("/", [CCallBuiltin("-", [CVar("y2", zeroConcertPos), CVar("y1", zeroConcertPos)], zeroConcertPos), CCallBuiltin("-", [CVar("x1", zeroConcertPos), CVar("x2", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("b", CCallBuiltin("-", [CCallBuiltin("-", [CInt(0), CVar("y1", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("m", zeroConcertPos), CVar("x1", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("LineSegmentBySlope", zeroConcertPos), [CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("m", CVar("m", zeroConcertPos), TreeNode("b", CVar("b", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("xEnd", CVar("xEnd", zeroConcertPos), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("xStart", CVar("xStart", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("LineTo", CLambda(["x", "y"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("LineTo"), TreeEmpty(), TreeEmpty(), 1), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("LinesUnframed", CLambda(["c"], CCallBuiltin("Array", [CObject(TreeNode("framed", CBool(false), TreeEmpty(), TreeNode("maxCols", CInt(1), TreeEmpty(), TreeEmpty(), 1), 2)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("LinesUnframedAllowFillers", CLambda(["c"], CCallBuiltin("Array", [CObject(TreeNode("framed", CBool(false), TreeNode("allowFillers", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("maxCols", CInt(1), TreeEmpty(), TreeEmpty(), 1), 2)), CVar("c", zeroConcertPos)], zeroConcertPos))),
		Pair("MorphingAnimation", CLambda(["obj"], CLet("start", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("start"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Line", zeroConcertPos), [CDouble(200.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("end", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("end"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CDouble(200.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CDouble(0.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("duration", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("duration"), CDouble(5.0)], zeroConcertPos), CLet("triggerName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("triggerName"), CText("")], zeroConcertPos), CLet("easing", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("easing"), CText("ease")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("triggerName", CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("triggerName0", zeroConcertPos), zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("shapeName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("progressName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressName", zeroConcertPos), CDouble(0.0)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("shapeName", zeroConcertPos), CCall(CVar("wrapInSnippet", zeroConcertPos), [CText("idfnSnippet"), CObject(TreeNode("element", CCall(CVar("morphGraphics", zeroConcertPos), [CVar("start", zeroConcertPos), CVar("end", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("progressName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("progressName", zeroConcertPos)])], zeroConcertPos), CLet("animation", CCallBuiltin("External", [CText("Animator"), CArray(CArrayView(0, 0), [CObject(TreeNode("duration", CVar("duration", zeroConcertPos), TreeNode("contentName", CVar("shapeName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("progressName", CVar("progressName", zeroConcertPos), TreeNode("easing", CVar("easing", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CVar("triggerName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("timer", zeroConcertPos), [CInt(0), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("editView", CVar("start", zeroConcertPos), TreeNode("displayView", CVar("animation", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), zeroConcertPos)])])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("MouseTracking", CLambda(["obj"], CLet("element", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("element"), CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeNode("stroke", CInt(0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("height", CInt(128), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CInt(128), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)], zeroConcertPos), CLet("mousePositionVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("mousePositionVarName"), CText("mousePositionVar")], zeroConcertPos), CLet("clicksVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("clicksVarName"), CText("clicksVar")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("External", [CText("DragDrop"), CArray(CArrayView(0, 0), [CObject(TreeNode("idleContentName", CCall(CVar("useContent", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), TreeNode("draggingEnabled", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeNode("localMousePositionName", CVar("mousePositionVarName", zeroConcertPos), TreeEmpty(), TreeNode("pressedName", CVar("clicksVarName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeNode("chip", CText("MouseTracking"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("editView", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Move", CLambda(["x", "y"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("Move"), TreeEmpty(), TreeEmpty(), 1), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("MoveTo", CLambda(["x", "y"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("MoveTo"), TreeEmpty(), TreeEmpty(), 1), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("NamedValueAnimation", CLambda(["obj"], CLet("name", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("name"), CText("var")], zeroConcertPos), CLet("from", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("from"), CDouble(0.0)], zeroConcertPos), CLet("to", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("to"), CDouble(100.0)], zeroConcertPos), CLet("duration", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("duration"), CDouble(10.0)], zeroConcertPos), CLet("triggerName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("triggerName"), CText("")], zeroConcertPos), CLet("easing", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("easing"), CText("ease")], zeroConcertPos), CLet("loop", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("loop"), CText("none")], zeroConcertPos), CLet("resetTriggerName0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("resetTriggerName"), CText("")], zeroConcertPos), CLet("range", CCallBuiltin("-", [CVar("to", zeroConcertPos), CVar("from", zeroConcertPos)], zeroConcertPos), CLet("triggerName", CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("triggerName0", zeroConcertPos), zeroConcertPos), CLet("resetTriggerName", CIf(CCallBuiltin("==", [CVar("resetTriggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("resetTriggerName0", zeroConcertPos), zeroConcertPos), CLet("restartAnimation", CLambda([], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos)])), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("resetTriggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CLet("progressName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressName", zeroConcertPos), CDouble(0.0)], zeroConcertPos), CLet("progressFn", CCall(CVar("createVar", zeroConcertPos), [CVar("idfn", zeroConcertPos)], zeroConcertPos), CLet("directionFlag", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), CSequence([CCall(CVar("subscribe2", zeroConcertPos), [CVar("resetTriggerName", zeroConcertPos), CLambda(["t"], CIf(CCallBuiltin("&&", [CVar("t", zeroConcertPos), CCallBuiltin("==", [CVar("loop", zeroConcertPos), CText("alternate")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressFn", zeroConcertPos), CVar("idfn", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("directionFlag", zeroConcertPos), CBool(false)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("name", zeroConcertPos), CVar("from", zeroConcertPos)], zeroConcertPos)])]), CEmpty(), zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("subscribe2", zeroConcertPos), [CVar("progressName", zeroConcertPos), CLambda(["progress"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("name", zeroConcertPos), CCallBuiltin("+", [CVar("from", zeroConcertPos), CCallBuiltin("*", [CCall(CCall(CVar("getVar", zeroConcertPos), [CVar("progressFn", zeroConcertPos)], zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("progressName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("range", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("!=", [CVar("loop", zeroConcertPos), CText("none")], zeroConcertPos), CCallBuiltin("==", [CVar("progress", zeroConcertPos), CDouble(1.0)], zeroConcertPos)], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("loop", zeroConcertPos), CText("alternate")], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("progressFn", zeroConcertPos), CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("directionFlag", zeroConcertPos)], zeroConcertPos), CVar("idfn", zeroConcertPos), CLambda(["val"], CCallBuiltin("-", [CInt(1), CVar("val", zeroConcertPos)], zeroConcertPos)), zeroConcertPos)], zeroConcertPos), CCall(CVar("updateVar", zeroConcertPos), [CVar("directionFlag", zeroConcertPos), CLambda(["f"], CCallBuiltin("not", [CVar("f", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)]), CEmpty(), zeroConcertPos), CCall(CVar("restartAnimation", zeroConcertPos), [], zeroConcertPos)]), CEmpty(), zeroConcertPos)]))], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("triggerName0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("timer", zeroConcertPos), [CInt(0), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CSequence([CCall(CVar("makeEasing", zeroConcertPos), [CVar("duration", zeroConcertPos), CVar("easing", zeroConcertPos), CVar("triggerName", zeroConcertPos), CVar("resetTriggerName", zeroConcertPos), CVar("progressName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("Empty", [], zeroConcertPos), TreeNode("chip", CText("Named value animation"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editView", CVar("name", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)])])])]), zeroConcertPos), zeroConcertPos)]), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("OneshotAnimation", CLambda(["c", "duration", "delay", "externalTrigger", "props"], CLet("easing", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("easing"), CText("ease")], zeroConcertPos), CLet("fade", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("fade"), CBool(false)], zeroConcertPos), CLet("translate", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("translate"), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("rotate", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("rotate"), CDouble(0.0)], zeroConcertPos), CLet("scale", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("scale"), CCall(CVar("Factor", zeroConcertPos), [CDouble(1.0), CDouble(1.0)], zeroConcertPos)], zeroConcertPos), CLet("centerMode", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("centerMode"), CBool(true)], zeroConcertPos), CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CLet("triggerName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("displayTrigger", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CLet("animation", CCallBuiltin("External", [CText("Animator"), CArray(CArrayView(0, 0), [CObject(TreeNode("fade", CVar("fade", zeroConcertPos), TreeNode("duration", CCallBuiltin("/", [CVar("duration", zeroConcertPos), CInt(1000)], zeroConcertPos), TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("easing", CVar("easing", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("translateAnimation", CObject(TreeNode("type", CVar("translate", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("rotateAnimation", CObject(TreeNode("centerMode", CVar("centerMode", zeroConcertPos), TreeNode("angle", CVar("rotate", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("scaleAnimation", CObject(TreeNode("centerMode", CVar("centerMode", zeroConcertPos), TreeEmpty(), TreeNode("factor", CVar("scale", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("triggerName", CVar("triggerName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), CSequence([CIf(CCallBuiltin("!=", [CVar("externalTrigger", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("onVarChange", zeroConcertPos), [CVar("externalTrigger", zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CLet("f", CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("timer", zeroConcertPos), [CInt(0), CLambda([], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("displayTrigger", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("triggerName", zeroConcertPos)], zeroConcertPos)])])]))], zeroConcertPos), CVar("animation", zeroConcertPos)]), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("displayTrigger", zeroConcertPos)])], zeroConcertPos), CSequence([CIf(CCallBuiltin(">=", [CVar("delay", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("timer", zeroConcertPos), [CVar("delay", zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("displayTrigger", zeroConcertPos), CBool(true)], zeroConcertPos))], zeroConcertPos), CEmpty(), zeroConcertPos), CVar("f", zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPAutocompleteInputText", CLambda(["obj"], CLet("convertInitValueFn", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("convertInitValueFn"), CVar("idfn", zeroConcertPos)], zeroConcertPos), CLet("wrapOnChangeFnFn", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("wrapOnChangeFnFn"), CVar("idfn", zeroConcertPos)], zeroConcertPos), CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CVar("convertInitValueFn", zeroConcertPos), CVar("wrapOnChangeFnFn", zeroConcertPos), CBool(false)], zeroConcertPos), CCall(CVar("buildLabelFieldViewUI", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), CCallBuiltin("External", [CText("Autocomplete"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeNode("dictionary", CCall(CVar("concatStrings", zeroConcertPos), [CCall(CVar("interleave", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("dictionary")], zeroConcertPos), CText("\n")], zeroConcertPos)], zeroConcertPos), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPCheckbox", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCallBuiltin("External", [CText("CheckBox"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("color", CInt(0), TreeEmpty(), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeNode("width", CCallBuiltin("-", [CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), CDouble(8.0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)])], zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs4() -> [Pair<string, Concert>] {
	[
		Pair("PPChildEditing", CLambda(["obj"], CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos)], zeroConcertPos), CLet("deactivateFnName", CCall(CVar("createVar", zeroConcertPos), [CVar("nop", zeroConcertPos)], zeroConcertPos), CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CVar("idfn", zeroConcertPos), CVar("idfn", zeroConcertPos), CBool(true)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("commonVarName")], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("uns", CCall(CVar("subscribe2", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("commonVarName")], zeroConcertPos), CLambda(["v"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("call", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos), CVar("previousDeactivateFn", zeroConcertPos)], zeroConcertPos)])]))], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CVar("uns", zeroConcertPos)], zeroConcertPos), CLet("getConstructName", CLambda(["v"], CIf(CCall(CVar("isSnippet", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CText("Set")], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("concert2string", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("ename", CVar("__editorName", zeroConcertPos), CLet("onEdit", CLambda([], CLet("doc", CCallBuiltin("quote", [CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("ename", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos), CVar("nop", zeroConcertPos)], zeroConcertPos), CSequence([CSet("__childEditingStack", CCall(CVar("Cons", zeroConcertPos), [CObject(TreeNode("name", CCall(CVar("getConstructName", zeroConcertPos), [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("ename", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeNode("callback", CLambda(["nval"], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("ename", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CVar("doc", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("ename", zeroConcertPos), CObject(TreeNode("name", CText("CursorMovement"), TreeNode("destination", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("head")], zeroConcertPos), CText("path")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("commonVarName")], zeroConcertPos), CVar("nval", zeroConcertPos)], zeroConcertPos), CSet("__childEditingStack", CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("tail")], zeroConcertPos), zeroConcertPos)])])])), TreeEmpty(), TreeEmpty(), 1), TreeNode("path", CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("ename", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CVar("__childEditingStack", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("ename", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CCall(CVar("getVisualElement", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)])]), zeroConcertPos)), CCall(CVar("buildLabelFieldViewUI", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), CCallBuiltin("External", [CText("BaseLine"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CArray(CArrayView(0, 0), [CCall(CVar("getConstructName", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CVar("onEdit", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("edit"), TreeEmpty(), TreeNode("width", CDouble(32.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPCode", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CVar("unparse", zeroConcertPos), CLambda(["onChangeFn"], CLambda(["v"], CCall(CVar("onChangeFn", zeroConcertPos), [CCall(CVar("parse", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))), CBool(false)], zeroConcertPos), CLet("buildMonacoEditor", CLambda(["readonly"], CLet("editorSize", CCallBuiltin("-", [CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), CDouble(32.0)], zeroConcertPos), CCallBuiltin("MonacoEditor", [CVar("readonly", zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CVar("varName", zeroConcertPos)])], zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CVar("editorSize", zeroConcertPos), CVar("editorSize", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("CodeEditorLanguage", [CText("concert")], zeroConcertPos), CCallBuiltin("CodeEditorResizableInDisplayMode", [], zeroConcertPos)])], zeroConcertPos), zeroConcertPos)), CLet("editor", CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("buildMonacoEditor", zeroConcertPos), [CBool(false)], zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("buildMonacoEditor", zeroConcertPos), [CCallBuiltin("not", [CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos)])], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CVar("fname", zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("Expander"), CArray(CArrayView(0, 0), [CObject(TreeNode("header", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("color", CInt(0), TreeNode("alignedToBaseLine", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("details", CVar("editor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPColor", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("varColor", CVar("varName", zeroConcertPos), TreeNode("label", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("PPDimensionalParameters", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CLet("stringFields", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CText("stringFields")], zeroConcertPos), CLet("makeSizeField", CLambda(["fieldName"], CLet("fieldValue", CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos), CVar("fieldName", zeroConcertPos)], zeroConcertPos), CLet("enabledVarName", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("!=", [CVar("fieldValue", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("doSetup", CLambda(["convertInitValueFn", "wrapOnChangeFnFn"], CLet("vname", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("convertInitValueFn", zeroConcertPos), [CVar("fieldValue", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("uns", CCall(CVar("subscribe2", zeroConcertPos), [CVar("vname", zeroConcertPos), CCall(CVar("wrapOnChangeFnFn", zeroConcertPos), [CLambda(["val"], CLet("qval", CCallBuiltin("quote", [CCallBuiltin("quote", [CVar("val", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("updateVarNotEvaluate", zeroConcertPos), [CVar("varName", zeroConcertPos), CLambda(["v"], CCallBuiltin("setKeyObj", [CVar("v", zeroConcertPos), CVar("fieldName", zeroConcertPos), CVar("qval", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("vname", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("enabledVarName", zeroConcertPos)], zeroConcertPos), CCall(CVar("uns", zeroConcertPos), [], zeroConcertPos)])])]))], zeroConcertPos), CVar("vname", zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("argsObj", CObject(TreeNode("propName", CVar("fieldName", zeroConcertPos), TreeNode("defSetupFn", CLambda([], CCall(CVar("doSetup", zeroConcertPos), [CVar("idfn", zeroConcertPos), CVar("idfn", zeroConcertPos)], zeroConcertPos)), TreeNode("deactivateFnName", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos), TreeNode("baseWidthName", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("enabledVarName", CVar("enabledVarName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("step", CDouble(0.1), TreeNode("setupFn", CLambda(["convertInitValueFn", "wrapOnChangeFnFn", "__"], CCall(CVar("doSetup", zeroConcertPos), [CVar("convertInitValueFn", zeroConcertPos), CVar("wrapOnChangeFnFn", zeroConcertPos)], zeroConcertPos)), TreeNode("readStringsAsVars", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("readStringsAsVars"), CBool(false)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("widthName", CCall(CVar("select", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), CLambda(["baseWidth"], CCallBuiltin("-", [CCallBuiltin("/", [CVar("baseWidth", zeroConcertPos), CDouble(2.0)], zeroConcertPos), CDouble(16.0)], zeroConcertPos))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4)), CIf(CCall(CVar("contains", zeroConcertPos), [CVar("stringFields", zeroConcertPos), CVar("fieldName", zeroConcertPos)], zeroConcertPos), CCall(CVar("PPNumberOrTextInput", zeroConcertPos), [CVar("argsObj", zeroConcertPos)], zeroConcertPos), CCall(CVar("PPNumericInputText", zeroConcertPos), [CVar("argsObj", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("BaseLine"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CArray(CArrayView(0, 0), [CCall(CVar("makeSizeField", zeroConcertPos), [CText("positionX")], zeroConcertPos), CCall(CVar("FixedWidth", zeroConcertPos), [CDouble(8.0)], zeroConcertPos), CCall(CVar("makeSizeField", zeroConcertPos), [CText("width")], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), CCallBuiltin("External", [CText("BaseLine"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CArray(CArrayView(0, 0), [CCall(CVar("makeSizeField", zeroConcertPos), [CText("positionY")], zeroConcertPos), CCall(CVar("FixedWidth", zeroConcertPos), [CDouble(8.0)], zeroConcertPos), CCall(CVar("makeSizeField", zeroConcertPos), [CText("height")], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPDropDown", CLambda(["obj"], CLet("options", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("options")], zeroConcertPos), CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CLambda(["initValue"], CCall(CVar("findi", zeroConcertPos), [CVar("options", zeroConcertPos), CLambda(["v"], CCallBuiltin("==", [CVar("v", zeroConcertPos), CVar("initValue", zeroConcertPos)], zeroConcertPos)), CInt(0)], zeroConcertPos)), CLambda(["onChangeFn"], CLambda(["v"], CCall(CVar("onChangeFn", zeroConcertPos), [CCallBuiltin("index", [CVar("options", zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))), CBool(false)], zeroConcertPos), CLet("dropDownFixedWidth", CDouble(128.0), CCall(CVar("buildLabelFieldViewUI", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), CCallBuiltin("External", [CText("DropDown"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CVar("varName", zeroConcertPos), TreeNode("items", CCall(CVar("concatStrings", zeroConcertPos), [CCall(CVar("interleave", zeroConcertPos), [CVar("options", zeroConcertPos), CText("\n ")], zeroConcertPos)], zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPFields", CLambda(["obj"], CLet("localVarNamesName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CLambda(["initValue"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("localVarNamesName", zeroConcertPos), CCall(CVar("mapObj", zeroConcertPos), [CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("value2fields")], zeroConcertPos), [CVar("initValue", zeroConcertPos)], zeroConcertPos), CLambda(["v"], CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CBool(true)])), CLambda(["onChangeFn"], CLambda(["v"], CCall(CVar("onChangeFn", zeroConcertPos), [CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("fields2value")], zeroConcertPos), [CCall(CVar("mapObj", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("localVarNamesName", zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))), CBool(false)], zeroConcertPos), CLet("localVarNames", CCall(CVar("getVar", zeroConcertPos), [CVar("localVarNamesName", zeroConcertPos)], zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("varName", zeroConcertPos), CLambda(["v"], CCallBuiltin("not", [CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("localVarNames", zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("iterObj", zeroConcertPos), [CVar("localVarNames", zeroConcertPos), CLambda(["kv"], CCallBuiltin("deactivate", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("localVarNamesName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos)])])]))], zeroConcertPos), CCall(CVar("Group", zeroConcertPos), [CArray(CArrayView(0, 0), [CCall(CVar("SizedWidth", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Expander"), CArray(CArrayView(0, 0), [CObject(TreeNode("header", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("details", CCallBuiltin("Lines", [CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("localVarNames", zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), TreeNode("label", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("style", CText("numeric"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CCallBuiltin("/", [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidth")], zeroConcertPos), CDouble(2.0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidth")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPIconSelector", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("BaseLine"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("tooltip", CText(""), TreeNode("label", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(16777215), TreeNode("action", CLambda([], CCall(CVar("showIconDialog", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeNode("circleBackground", CObject(TreeNode("size", CDouble(33.0), TreeNode("color", CInt(6422766), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("icon", CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeNode("width", CDouble(32.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("varName", zeroConcertPos)])], zeroConcertPos), zeroConcertPos))),
		Pair("PPInputText", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CLet("widthName", CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CText("widthName")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("widthName")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), zeroConcertPos), CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("tooltip", CText(""), TreeNode("label", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeNode("width", CDouble(-1.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CVar("widthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPItems", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CLambda(["value"], CIf(CCall(CVar("isText", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CCall(CVar("strSplit", zeroConcertPos), [CVar("value", zeroConcertPos), CText("\n")], zeroConcertPos), CVar("value", zeroConcertPos), zeroConcertPos)), CVar("idfn", zeroConcertPos), CBool(false)], zeroConcertPos), CLet("itemsVars", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos), CVar("createVar", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("newItemUpdatesVar", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("itemsVars", zeroConcertPos)], zeroConcertPos), CVar("getVar", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CVar("itemsVars", zeroConcertPos), CVar("newItemUpdatesVar", zeroConcertPos)]), CCall(CVar("getVar", zeroConcertPos), [CVar("itemsVars", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Expander"), CArray(CArrayView(0, 0), [CObject(TreeNode("header", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("details", CLambda([], CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CLet("width", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Lines", [CCallBuiltin("concat", [CCall(CVar("mapi", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("itemsVars", zeroConcertPos)], zeroConcertPos), CLambda(["i", "itemVar"], CCallBuiltin("External", [CText("BaseLine"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("close"), TreeNode("buttonBorder", CDouble(2.0), TreeNode("action", CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("itemsVars", zeroConcertPos), CLambda(["items"], CCall(CVar("removeIndex", zeroConcertPos), [CVar("items", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CDouble(16.0), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CVar("itemVar", zeroConcertPos), TreeNode("label", CCallBuiltin("+", [CText("Item #"), CVar("i", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos))], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("add"), TreeNode("action", CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("itemsVars", zeroConcertPos), CLambda(["items"], CLet("newItemVar", CCall(CVar("createVar", zeroConcertPos), [CText("New item")], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("newItemUpdatesVar", zeroConcertPos), CLambda(["p"], CCallBuiltin("not", [CVar("p", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("newItemVar", zeroConcertPos)])], zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("items", zeroConcertPos), CVar("newItemVar", zeroConcertPos)], zeroConcertPos)]), zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos)])], zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), CVar("itemsVars", zeroConcertPos)])], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPNumberOrTextInput", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("setupFn")], zeroConcertPos), [CLambda(["initValue"], CLet("svalue", CCall(CVar("unparse", zeroConcertPos), [CVar("initValue", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isDouble", zeroConcertPos), [CVar("svalue", zeroConcertPos)], zeroConcertPos), CVar("svalue", zeroConcertPos), CVar("initValue", zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLambda(["onChangeFn"], CLambda(["v"], CCall(CVar("onChangeFn", zeroConcertPos), [CIf(CCall(CVar("isDouble", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), CCallBuiltin("s2d", [CVar("v", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("readStringsAsVars")], zeroConcertPos), CCallBuiltin("quote", [CCallBuiltin("quote", [CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CVar("v", zeroConcertPos)])], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("v", zeroConcertPos), zeroConcertPos), zeroConcertPos)], zeroConcertPos))), CBool(false)], zeroConcertPos), CLet("widthName", CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CText("widthName")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("widthName")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), zeroConcertPos), CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("tooltip", CText(""), TreeNode("label", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeNode("width", CDouble(-1.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CVar("widthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPNumericInputText", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CLet("widthName", CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CText("widthName")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("widthName")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), zeroConcertPos), CLet("min", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("min"), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("max", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("max"), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("resObj", CCallBuiltin("array2object", [CCall(CVar("filter", zeroConcertPos), [CArray(CArrayView(0, 0), [CKeyValue("min", CVar("min", zeroConcertPos)), CKeyValue("max", CVar("max", zeroConcertPos))]), CLambda(["kv"], CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CCall(CVar("mergeObj", zeroConcertPos), [CObject(TreeNode("style", CText("numeric"), TreeNode("label", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("step", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("step")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeNode("tooltip", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(-1.0), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CVar("resObj", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), CVar("widthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("PPSlider", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CLet("sliderFName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("minVarName", CCall(CVar("createVar", zeroConcertPos), [CDouble(0.0)], zeroConcertPos), CLet("maxVarName", CCall(CVar("createVar", zeroConcertPos), [CDouble(10.0)], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("deactivateFnName")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("minVarName", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("maxVarName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("sliderFName", zeroConcertPos)], zeroConcertPos)])])]))], zeroConcertPos), CLet("headerWidthName", CCall(CVar("select", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), CLambda(["bw"], CCallBuiltin("-", [CVar("bw", zeroConcertPos), CDouble(64.0)], zeroConcertPos))], zeroConcertPos), CLet("labelFixedWidth", CDouble(96.0), CCallBuiltin("External", [CText("Expander"), CArray(CArrayView(0, 0), [CObject(TreeNode("header", CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("BaseLine"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("Paragraph"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("size", CDouble(12.0), TreeEmpty(), TreeNode("text", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("propName")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)]), TreeNode("alignmentVertical", CDouble(0.5), TreeEmpty(), TreeEmpty(), 1), TreeNode("cropWords", CBool(true), TreeEmpty(), TreeNode("width", CVar("labelFixedWidth", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CVar("sliderFName", zeroConcertPos), CLambda([], CLet("min0", CCall(CVar("getVar", zeroConcertPos), [CVar("minVarName", zeroConcertPos)], zeroConcertPos), CLet("max0", CCall(CVar("getVar", zeroConcertPos), [CVar("maxVarName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CCallBuiltin("MIN", [CArray(CArrayView(0, 0), [CVar("min0", zeroConcertPos), CVar("max0", zeroConcertPos)])], zeroConcertPos), TreeNode("max", CVar("max0", zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeNode("step", CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("step")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(-1.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("minVarName", zeroConcertPos), CVar("maxVarName", zeroConcertPos)])], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), CVar("headerWidthName", zeroConcertPos)], zeroConcertPos), TreeNode("color", CInt(0), TreeNode("alignedToBaseLine", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("details", CLambda([], CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("style", CText("Numeric"), TreeNode("label", CText("min"), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("minVarName", zeroConcertPos), TreeNode("tooltip", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("/", [CCall(CVar("getVar", zeroConcertPos), [CVar("headerWidthName", zeroConcertPos)], zeroConcertPos), CInt(2)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CCall(CVar("FixedWidth", zeroConcertPos), [CDouble(8.0)], zeroConcertPos), CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("style", CText("Numeric"), TreeNode("label", CText("max"), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("maxVarName", zeroConcertPos), TreeNode("tooltip", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("/", [CCall(CVar("getVar", zeroConcertPos), [CVar("headerWidthName", zeroConcertPos)], zeroConcertPos), CInt(2)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs5() -> [Pair<string, Concert>] {
	[
		Pair("PPStyle", CLambda(["obj"], CLet("varName", CCall(CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("defSetupFn")], zeroConcertPos), [], zeroConcertPos), CLet("initValue", CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos), CLet("fillColorVar", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("fill")], zeroConcertPos)], zeroConcertPos), CLet("fillOpacityVar", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("fillOpacity")], zeroConcertPos)], zeroConcertPos), CLet("strokeColorVar", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("stroke")], zeroConcertPos)], zeroConcertPos), CLet("strokeOpacityVar", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("strokeOpacity")], zeroConcertPos)], zeroConcertPos), CLet("strokeWidthVar", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("strokeWidth")], zeroConcertPos)], zeroConcertPos), CLet("isDashingEnabledVar", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("&&", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("initValue", zeroConcertPos), CText("strokeDashed")], zeroConcertPos), CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("strokeDashed")], zeroConcertPos), CInt(-1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("strokeDashedVar", CCall(CVar("createVar", zeroConcertPos), [CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isDashingEnabledVar", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("strokeDashed")], zeroConcertPos), CDouble(3.0), zeroConcertPos)], zeroConcertPos), CLet("isGradientEnabledVar", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("&&", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("initValue", zeroConcertPos), CText("gradientFill")], zeroConcertPos), CCallBuiltin("!=", [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("gradientFill")], zeroConcertPos), CText("points")], zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("isRadialGradient", CCall(CVar("createVar", zeroConcertPos), [CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isGradientEnabledVar", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("radialGradient")], zeroConcertPos), CBool(false), zeroConcertPos)], zeroConcertPos), CLet("gradientRotationVar", CCall(CVar("createVar", zeroConcertPos), [CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isGradientEnabledVar", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("gradientFill")], zeroConcertPos), CText("rotation")], zeroConcertPos), CDouble(0.0), zeroConcertPos)], zeroConcertPos), CLet("makeDefaultPoint", CLambda(["color", "offset"], CCall(CVar("mapObj", zeroConcertPos), [CObject(TreeNode("color", CVar("color", zeroConcertPos), TreeNode("alpha", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("offset", CVar("offset", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CLambda(["kv"], CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), CLet("gradientPointsVar", CCall(CVar("createVar", zeroConcertPos), [CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isGradientEnabledVar", zeroConcertPos)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("initValue", zeroConcertPos), CText("gradientFill")], zeroConcertPos), CText("points")], zeroConcertPos), CLambda(["p"], CCall(CVar("mapObj", zeroConcertPos), [CVar("p", zeroConcertPos), CLambda(["kv"], CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("makeDefaultPoint", zeroConcertPos), [CKeyValue("blue", CInt(300)), CDouble(0.0)], zeroConcertPos), CCall(CVar("makeDefaultPoint", zeroConcertPos), [CKeyValue("red", CInt(300)), CDouble(1.0)], zeroConcertPos)]), zeroConcertPos)], zeroConcertPos), CLet("newPointUpdatesVar", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("setDistinct", zeroConcertPos), [CVar("varName", zeroConcertPos), CObject(TreeNode("stroke", CCall(CVar("getVar", zeroConcertPos), [CVar("strokeColorVar", zeroConcertPos)], zeroConcertPos), TreeNode("fillOpacity", CCall(CVar("getVar", zeroConcertPos), [CVar("fillOpacityVar", zeroConcertPos)], zeroConcertPos), TreeNode("fill", CCall(CVar("getVar", zeroConcertPos), [CVar("fillColorVar", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isGradientEnabledVar", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("rotation", CCall(CVar("getVar", zeroConcertPos), [CVar("gradientRotationVar", zeroConcertPos)], zeroConcertPos), TreeNode("points", CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("gradientPointsVar", zeroConcertPos)], zeroConcertPos), CLambda(["p"], CObject(TreeNode("color", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("color")], zeroConcertPos)], zeroConcertPos), TreeNode("alpha", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("alpha")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("offset", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("offset")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos), TreeEmpty(), TreeNode("radialGradient", CCall(CVar("getVar", zeroConcertPos), [CVar("isRadialGradient", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CCall(CVar("getVar", zeroConcertPos), [CVar("strokeOpacityVar", zeroConcertPos)], zeroConcertPos), TreeNode("strokeDashed", CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isDashingEnabledVar", zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("strokeDashedVar", zeroConcertPos)], zeroConcertPos), CDouble(-1.0), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CCall(CVar("getVar", zeroConcertPos), [CVar("strokeWidthVar", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 4))], zeroConcertPos)), CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CVar("fillColorVar", zeroConcertPos), CVar("fillOpacityVar", zeroConcertPos), CVar("strokeColorVar", zeroConcertPos), CVar("strokeOpacityVar", zeroConcertPos), CVar("strokeWidthVar", zeroConcertPos), CVar("isDashingEnabledVar", zeroConcertPos), CVar("strokeDashedVar", zeroConcertPos), CVar("isGradientEnabledVar", zeroConcertPos), CVar("gradientRotationVar", zeroConcertPos), CVar("gradientPointsVar", zeroConcertPos), CVar("isRadialGradient", zeroConcertPos), CVar("newPointUpdatesVar", zeroConcertPos)]), CCall(CVar("mapConcat", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("gradientPointsVar", zeroConcertPos)], zeroConcertPos), CLambda(["p"], CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("color")], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("offset")], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("alpha")], zeroConcertPos)]))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CLet("width", CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("varColor", CVar("fillColorVar", zeroConcertPos), TreeNode("label", CText("Fill"), TreeEmpty(), TreeEmpty(), 1), TreeNode("varOpacity", CVar("fillOpacityVar", zeroConcertPos), TreeEmpty(), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("varColor", CVar("strokeColorVar", zeroConcertPos), TreeNode("label", CText("Stroke"), TreeEmpty(), TreeEmpty(), 1), TreeNode("varOpacity", CVar("strokeOpacityVar", zeroConcertPos), TreeEmpty(), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CVar("strokeWidthVar", zeroConcertPos), TreeNode("step", CDouble(0.1), TreeNode("label", CText("Stroke width"), TreeEmpty(), TreeEmpty(), 1), TreeNode("style", CText("Numeric"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("CheckBox"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CText("Dashed stroke"), TreeEmpty(), TreeNode("var", CVar("isDashingEnabledVar", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isDashingEnabledVar", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("step", CDouble(0.1), TreeNode("label", CText("Stroke dash width"), TreeEmpty(), TreeNode("min", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CVar("strokeDashedVar", zeroConcertPos), TreeNode("style", CText("Numeric"), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CEmpty(), zeroConcertPos), CCallBuiltin("External", [CText("CheckBox"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CText("Gradient"), TreeEmpty(), TreeNode("var", CVar("isGradientEnabledVar", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("isGradientEnabledVar", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Lines", [CCall(CVar("concat3", zeroConcertPos), [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("Switch"), CArray(CArrayView(0, 0), [CObject(TreeNode("onLabel", CText("Radial gradient"), TreeNode("offLabel", CText("Linear gradient"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("isRadialGradient", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("step", CDouble(0.1), TreeNode("max", CDouble(180.0), TreeNode("label", CText("Angle"), TreeEmpty(), TreeEmpty(), 1), TreeNode("min", CDouble(-180.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CVar("gradientRotationVar", zeroConcertPos), TreeNode("style", CText("Numeric"), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), CCall(CVar("mapi", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("gradientPointsVar", zeroConcertPos)], zeroConcertPos), CLambda(["i", "p"], CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("close"), TreeNode("buttonBorder", CDouble(2.0), TreeNode("action", CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("gradientPointsVar", zeroConcertPos), CLambda(["ps"], CCall(CVar("removeIndex", zeroConcertPos), [CVar("ps", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CDouble(16.0), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("varColor", CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("color")], zeroConcertPos), TreeNode("label", CText("Point color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("varOpacity", CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("alpha")], zeroConcertPos), TreeEmpty(), TreeNode("width", CCallBuiltin("-", [CVar("width", zeroConcertPos), CDouble(48.0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CText("Offset"), CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("offset")], zeroConcertPos), TreeEmpty(), TreeNode("width", CCallBuiltin("-", [CVar("width", zeroConcertPos), CDouble(48.0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)])], zeroConcertPos)]))], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("add"), TreeNode("action", CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("gradientPointsVar", zeroConcertPos), CLambda(["ps"], CLet("newPoint", CCall(CVar("makeDefaultPoint", zeroConcertPos), [CKeyValue("blue", CInt(300)), CDouble(1.0)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("newPointUpdatesVar", zeroConcertPos), CLambda(["p"], CCallBuiltin("not", [CVar("p", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("newPoint", zeroConcertPos), CText("color")], zeroConcertPos), CCallBuiltin("dot", [CVar("newPoint", zeroConcertPos), CText("offset")], zeroConcertPos), CCallBuiltin("dot", [CVar("newPoint", zeroConcertPos), CText("alpha")], zeroConcertPos)])], zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("ps", zeroConcertPos), CVar("newPoint", zeroConcertPos)], zeroConcertPos)]), zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos)])], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos)])], zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("baseWidthName")], zeroConcertPos), CVar("isDashingEnabledVar", zeroConcertPos), CVar("isGradientEnabledVar", zeroConcertPos), CVar("gradientPointsVar", zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Parabola", CLambda(["obj"], CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("a", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("a"), CInt(1)], zeroConcertPos), CLet("b", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("b"), CInt(1)], zeroConcertPos), CLet("c", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("c"), CInt(1)], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(false)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("stroke", CInt(0), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("xStart", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("xStart"), CInt(-64)], zeroConcertPos), CLet("yStart", CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("*", [CVar("a", zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("b", zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos), CLet("cx", CCallBuiltin("/", [CCallBuiltin("-", [CInt(0), CVar("b", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CInt(2), CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("k", CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("*", [CInt(2), CVar("a", zeroConcertPos)], zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos), CVar("b", zeroConcertPos)], zeroConcertPos), CLet("cy", CCallBuiltin("+", [CCallBuiltin("*", [CVar("k", zeroConcertPos), CCallBuiltin("-", [CVar("cx", zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("yStart", zeroConcertPos)], zeroConcertPos), CLet("xEnd", CCallBuiltin("-", [CCallBuiltin("*", [CInt(2), CVar("cx", zeroConcertPos)], zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos), CLet("yEnd", CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("*", [CVar("a", zeroConcertPos), CVar("xEnd", zeroConcertPos)], zeroConcertPos), CVar("xEnd", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("b", zeroConcertPos), CVar("xEnd", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos), CLet("nPoints", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("points"), CCallBuiltin("ROUND", [CCallBuiltin("/", [CCallBuiltin("ABS", [CCallBuiltin("-", [CVar("xEnd", zeroConcertPos), CVar("xStart", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CInt(20)], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("splitGraphics", zeroConcertPos), [CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CVar("xStart", zeroConcertPos), CCallBuiltin("-", [CInt(0), CVar("yStart", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("QuadraticBezier", zeroConcertPos), [CVar("xEnd", zeroConcertPos), CCallBuiltin("-", [CInt(0), CVar("yEnd", zeroConcertPos)], zeroConcertPos), CVar("cx", zeroConcertPos), CCallBuiltin("-", [CInt(0), CVar("cy", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CVar("nPoints", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Point", CLambda(["x", "y"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeEmpty(), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("Polygon", CLambda(["obj"], CLet("width0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(128.0)], zeroConcertPos), CLet("height0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(128.0)], zeroConcertPos), CLet("positionX0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("points", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("points"), CArray(CArrayView(0, 0), [CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CDouble(128.0), CDouble(64.0)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(128.0)], zeroConcertPos)])], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(true)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("fill", CInt(16755200), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("makeElement", CLambda(["args"], CLet("width", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("height", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CLet("positionX", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(2)], zeroConcertPos), CLet("positionY", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(3)], zeroConcertPos), CLet("shape", CCall(CVar("mapi", zeroConcertPos), [CVar("points", zeroConcertPos), CLambda(["i", "p"], CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("Move", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("||", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CText("width")], zeroConcertPos), CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CText("height")], zeroConcertPos)], zeroConcertPos), CCall(CVar("scaleUpToOwnSize", zeroConcertPos), [CCallBuiltin("Graphics", [CVar("shape", zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Graphics", [CVar("shape", zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("args", CArray(CArrayView(0, 0), [CVar("width0", zeroConcertPos), CVar("height0", zeroConcertPos), CVar("positionX0", zeroConcertPos), CVar("positionY0", zeroConcertPos)]), CLet("views", CCall(CVar("makeShapeViews", zeroConcertPos), [CVar("makeElement", zeroConcertPos), CVar("args", zeroConcertPos), CArray(CArrayView(0, 0), [CDouble(128.0), CDouble(128.0), CDouble(0.0), CDouble(0.0)])], zeroConcertPos), CLet("isDynamic", CCall(CVar("exists", zeroConcertPos), [CVar("args", zeroConcertPos), CLambda(["a"], CCallBuiltin("not", [CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("viewsObj", CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeEmpty(), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CVar("isDynamic", zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeNode("chip", CText("Dynamic"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("QuadraticBezier", CLambda(["x", "y", "controlX", "controlY"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("controlY", CVar("controlY", zeroConcertPos), TreeNode("controlX", CVar("controlX", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("name", CText("QuadraticBezier"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))),
		Pair("QuadraticBezierSmooth", CLambda(["x", "y"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("name", CText("QuadraticBezierSmooth"), TreeEmpty(), TreeEmpty(), 1), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))),
		Pair("QuadraticBezierTo", CLambda(["x", "y", "controlX", "controlY"], CObject(TreeNode("x", CVar("x", zeroConcertPos), TreeNode("controlY", CVar("controlY", zeroConcertPos), TreeNode("controlX", CVar("controlX", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("name", CText("QuadraticBezierTo"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("y", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))),
		Pair("Rectangle", CLambda(["obj"], CLet("width0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(128.0)], zeroConcertPos), CLet("height0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(128.0)], zeroConcertPos), CLet("positionX0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(true)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("fill", CInt(255), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("makeElement", CLambda(["args"], CLet("width", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("height", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CLet("positionX", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(2)], zeroConcertPos), CLet("positionY", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(3)], zeroConcertPos), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("GRect", zeroConcertPos), [CDouble(0.0), CDouble(0.0), CVar("width", zeroConcertPos), CVar("height", zeroConcertPos)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("args", CArray(CArrayView(0, 0), [CVar("width0", zeroConcertPos), CVar("height0", zeroConcertPos), CVar("positionX0", zeroConcertPos), CVar("positionY0", zeroConcertPos)]), CLet("views", CCall(CVar("makeShapeViews", zeroConcertPos), [CVar("makeElement", zeroConcertPos), CVar("args", zeroConcertPos), CArray(CArrayView(0, 0), [CDouble(128.0), CDouble(128.0), CDouble(0.0), CDouble(0.0)])], zeroConcertPos), CLet("isDynamic", CCall(CVar("exists", zeroConcertPos), [CVar("args", zeroConcertPos), CLambda(["a"], CCallBuiltin("not", [CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("viewsObj", CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeEmpty(), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CVar("isDynamic", zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeNode("chip", CText("Dynamic"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Rotate", CLambda(["c", "angle"], CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("rotate", CVar("angle", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos))),
		Pair("RotateGraphics", CLambda(["obj"], CLet("element", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("element"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Line", zeroConcertPos), [CDouble(200.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("angle", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("angle"), CDouble(0.0)], zeroConcertPos), CLet("origin", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("origin"), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("rotated", CCall(CVar("rotateGraphics", zeroConcertPos), [CVar("element", zeroConcertPos), CVar("angle", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Graphics", [CCallBuiltin("dot", [CVar("rotated", zeroConcertPos), CText("shape")], zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("RotateWithOrigin", CLambda(["c", "angle", "origin"], CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("rotate", CVar("angle", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))]), TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("origin", CVar("origin", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos))),
		Pair("RotateWithOriginTranslated", CLambda(["c", "angle", "origin", "wh"], CCall(CVar("Translate", zeroConcertPos), [CCall(CVar("RotateWithOrigin", zeroConcertPos), [CVar("c", zeroConcertPos), CVar("angle", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("origin", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("height")], zeroConcertPos), CCallBuiltin("dot", [CVar("origin", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("RoundedRect", CLambda(["obj"], CLet("radius0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("radius"), CDouble(8.0)], zeroConcertPos), CLet("width0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(128.0)], zeroConcertPos), CLet("height0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("height"), CDouble(128.0)], zeroConcertPos), CLet("positionX0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("style", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("getDefaultStylesObj", zeroConcertPos), [CBool(true)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("style"), CObject(TreeNode("fill", CInt(43520), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CLet("makeElement", CLambda(["args"], CLet("width", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("height", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CLet("positionX", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(2)], zeroConcertPos), CLet("positionY", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(3)], zeroConcertPos), CLet("radiusRaw", CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(4)], zeroConcertPos), CLet("radius", CCallBuiltin("MIN", [CArray(CArrayView(0, 0), [CVar("radiusRaw", zeroConcertPos), CCallBuiltin("/", [CVar("width", zeroConcertPos), CInt(2)], zeroConcertPos), CCallBuiltin("/", [CVar("height", zeroConcertPos), CInt(2)], zeroConcertPos)])], zeroConcertPos), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("GRoundedRect", zeroConcertPos), [CDouble(0.0), CDouble(0.0), CVar("width", zeroConcertPos), CVar("height", zeroConcertPos), CVar("radius", zeroConcertPos)], zeroConcertPos)]), CCall(CVar("stylesObj2array", zeroConcertPos), [CVar("style", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("width", zeroConcertPos), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("args", CArray(CArrayView(0, 0), [CVar("width0", zeroConcertPos), CVar("height0", zeroConcertPos), CVar("positionX0", zeroConcertPos), CVar("positionY0", zeroConcertPos), CVar("radius0", zeroConcertPos)]), CLet("views", CCall(CVar("makeShapeViews", zeroConcertPos), [CVar("makeElement", zeroConcertPos), CVar("args", zeroConcertPos), CArray(CArrayView(0, 0), [CDouble(128.0), CDouble(128.0), CDouble(0.0), CDouble(0.0), CDouble(8.0)])], zeroConcertPos), CLet("isDynamic", CCall(CVar("exists", zeroConcertPos), [CVar("args", zeroConcertPos), CLambda(["a"], CCallBuiltin("not", [CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("viewsObj", CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeEmpty(), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CVar("isDynamic", zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("displayView")], zeroConcertPos), TreeNode("chip", CText("Dynamic"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editView", CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("dot", [CVar("views", zeroConcertPos), CText("editView")], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Scale", CLambda(["c", "scale"], CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("scale", CCall(CVar("Factor", zeroConcertPos), [CCallBuiltin("dot", [CVar("scale", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("scale", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos))),
		Pair("ScaleGraphics", CLambda(["obj"], CLet("element", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("element"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Line", zeroConcertPos), [CDouble(200.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("scale", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("scale"), CCall(CVar("Factor", zeroConcertPos), [CDouble(1.0), CDouble(1.0)], zeroConcertPos)], zeroConcertPos), CLet("origin", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("origin"), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("scaled", CCall(CVar("scaleGraphics", zeroConcertPos), [CVar("element", zeroConcertPos), CVar("scale", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Graphics", [CCallBuiltin("dot", [CVar("scaled", zeroConcertPos), CText("shape")], zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs6() -> [Pair<string, Concert>] {
	[
		Pair("ScaleWithOrigin", CLambda(["c", "scale", "origin"], CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("scale", CCall(CVar("Factor", zeroConcertPos), [CCallBuiltin("dot", [CVar("scale", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("scale", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))]), TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("origin", CVar("origin", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos))),
		Pair("ScaleWithOriginTranslated", CLambda(["c", "scale", "origin", "wh"], CCall(CVar("Translate", zeroConcertPos), [CCall(CVar("ScaleWithOrigin", zeroConcertPos), [CVar("c", zeroConcertPos), CVar("scale", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("origin", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("height")], zeroConcertPos), CCallBuiltin("dot", [CVar("origin", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("SetWigiButton", CLambda(["obj"], CLet("wigiVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("wigiVarName"), CText("VAR")], zeroConcertPos), CLet("value", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("value"), CText("value")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("setWigi", zeroConcertPos), [CVar("wigiVarName", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("raised", CBool(false), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("+", [CText("Set "), CVar("wigiVarName", zeroConcertPos)], zeroConcertPos), CText(" to ")], zeroConcertPos), CCall(CVar("concert2string", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("ShadowedText", CLambda(["obj"], CLet("text", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("text"), CText("Text")], zeroConcertPos), CLet("props", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("props"), CObject(TreeEmpty())], zeroConcertPos), CLet("shadowDirection", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("shadowDirection"), CCall(CVar("Point", zeroConcertPos), [CDouble(2.0), CDouble(2.0)], zeroConcertPos)], zeroConcertPos), CLet("shadowOpacity", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("shadowOpacity"), CDouble(0.1)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("psize", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("size"), CDouble(12.0)], zeroConcertPos), CLet("pfamily", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("family"), CText("Roboto")], zeroConcertPos), CLet("pcolor", CCallBuiltin("getKeyObjDef", [CVar("props", zeroConcertPos), CText("color"), CInt(16777215)], zeroConcertPos), CLet("makeText", CLambda(["color", "opacity", "x", "y"], CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("opacity", CVar("opacity", zeroConcertPos), TreeNode("family", CVar("pfamily", zeroConcertPos), TreeNode("color", CVar("color", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("size", CVar("psize", zeroConcertPos), TreeNode("positionX", CVar("x", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("y", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CVar("text", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos)), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeNode("displayView", CCall(CVar("Group", zeroConcertPos), [CArray(CArrayView(0, 0), [CCall(CVar("makeText", zeroConcertPos), [CInt(0), CVar("shadowOpacity", zeroConcertPos), CCallBuiltin("dot", [CVar("shadowDirection", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("shadowDirection", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), CCall(CVar("makeText", zeroConcertPos), [CVar("pcolor", zeroConcertPos), CDouble(1.0), CDouble(0.0), CDouble(0.0)], zeroConcertPos)])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("ShearGraphics", CLambda(["obj"], CLet("element", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("element"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Line", zeroConcertPos), [CDouble(200.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("shear", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("shear"), CCall(CVar("Factor", zeroConcertPos), [CDouble(1.0), CDouble(1.0)], zeroConcertPos)], zeroConcertPos), CLet("origin", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("origin"), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("sheared", CCall(CVar("shearGraphics", zeroConcertPos), [CVar("element", zeroConcertPos), CVar("shear", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Graphics", [CCallBuiltin("dot", [CVar("sheared", zeroConcertPos), CText("shape")], zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("SizedHeight", CLambda(["heightName"], CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CCall(CVar("var", zeroConcertPos), [CVar("heightName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))),
		Pair("SizedWidth", CLambda(["widthName"], CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fillOpacity", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CVar("widthName", zeroConcertPos)])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))),
		Pair("Stepper", CLambda(["obj"], CLet("steps", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("steps"), CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("header", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("header"), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("barHeight", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("barHeight"), CDouble(3.0)], zeroConcertPos), CLet("circleRadius", CDouble(10.0), CLet("stepperColor", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("stepperColor"), CText("secondary")], zeroConcertPos), CLet("stepperActiveColor", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("stepperActiveColor"), CText("primary")], zeroConcertPos), CLet("stepperTextColor", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("stepperTextColor"), CInt(0)], zeroConcertPos), CLet("stepIdxVar0", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("stepIdxVar"), CText("")], zeroConcertPos), CLet("maxTitleWidth", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("maxTitleWidth"), CDouble(150.0)], zeroConcertPos), CLet("width", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("width"), CDouble(-1.0)], zeroConcertPos), CLet("titleStyles", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("titleStyles"), CObject(TreeNode("next", CObject(TreeNode("family", CText("Roboto"), TreeNode("color", CVar("stepperTextColor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("size", CDouble(12.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("current", CObject(TreeNode("family", CText("RobotoMedium"), TreeNode("color", CVar("stepperActiveColor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("size", CDouble(12.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("previous", CObject(TreeNode("family", CText("RobotoMedium"), TreeNode("color", CVar("stepperTextColor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("size", CDouble(12.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CLet("stepIdxVar", CIf(CCallBuiltin("==", [CVar("stepIdxVar0", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("createVar", zeroConcertPos), [CInt(0)], zeroConcertPos), CVar("stepIdxVar0", zeroConcertPos), zeroConcertPos), CLet("widthVar", CIf(CCallBuiltin("==", [CVar("width", zeroConcertPos), CInt(-1)], zeroConcertPos), CLet("editorWH", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("editorWH", zeroConcertPos), CObject(TreeNode("width", CDouble(3.0), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CSequence([CCall(CVar("bindToEditorWH", zeroConcertPos), [CVar("editorWH", zeroConcertPos)], zeroConcertPos), CCall(CVar("select", zeroConcertPos), [CVar("editorWH", zeroConcertPos), CLambda(["wh"], CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("width")], zeroConcertPos))], zeroConcertPos)])]), zeroConcertPos), CVar("width", zeroConcertPos), zeroConcertPos), CLet("headerHeightVar", CCall(CVar("createVar", zeroConcertPos), [CDouble(0.0)], zeroConcertPos), CLet("buildStepper", CLambda([], CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCallBuiltin("Canvas", [CDouble(0.0), CCall(CVar("var", zeroConcertPos), [CVar("headerHeightVar", zeroConcertPos)], zeroConcertPos), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(0.0), CDouble(1.0), CDouble(1.0), CDouble(0.0), CArray(CArrayView(0, 0), [CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("fill", CVar("stepperColor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("height", CVar("barHeight", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CVar("widthVar", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CCall(CVar("EvenCols", zeroConcertPos), [CObject(TreeNode("items", CCall(CVar("mapi", zeroConcertPos), [CVar("steps", zeroConcertPos), CLambda(["i", "step"], CLet("cur", CCall(CVar("getVar", zeroConcertPos), [CVar("stepIdxVar", zeroConcertPos)], zeroConcertPos), CLet("icon", CCallBuiltin("External", [CText("Icon"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("done"), TreeNode("color", CInt(16777215), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("-", [CInt(0), CVar("circleRadius", zeroConcertPos)], zeroConcertPos), CDouble(1.5)], zeroConcertPos), CCallBuiltin("/", [CVar("barHeight", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), CDouble(2.0)], zeroConcertPos), TreeNode("positionX", CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("-", [CInt(0), CVar("circleRadius", zeroConcertPos)], zeroConcertPos), CDouble(1.5)], zeroConcertPos), CDouble(1.0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("*", [CVar("circleRadius", zeroConcertPos), CInt(2)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CLet("status", CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CVar("cur", zeroConcertPos)], zeroConcertPos), CText("previous"), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CVar("cur", zeroConcertPos)], zeroConcertPos), CText("current"), CText("next"), zeroConcertPos), zeroConcertPos), CLet("fillColors", CObject(TreeNode("next", CInt(16777215), TreeNode("current", CVar("stepperActiveColor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("previous", CVar("stepperColor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("strokeColors", CObject(TreeNode("next", CVar("stepperColor", zeroConcertPos), TreeNode("current", CInt(16777215), TreeEmpty(), TreeEmpty(), 1), TreeNode("previous", CVar("stepperColor", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("stepEnabled", CCallBuiltin("getKeyObjDef", [CVar("step", zeroConcertPos), CText("enabled"), CBool(true)], zeroConcertPos), CCallBuiltin("External", [CText("CustomButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("normal", CCall(CVar("Group", zeroConcertPos), [CArray(CArrayView(0, 0), [CCall(CVar("Ellipse", zeroConcertPos), [CObject(TreeNode("positionY", CCallBuiltin("+", [CCallBuiltin("-", [CInt(0), CVar("circleRadius", zeroConcertPos)], zeroConcertPos), CCallBuiltin("/", [CVar("barHeight", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), TreeNode("positionX", CCallBuiltin("-", [CInt(0), CVar("circleRadius", zeroConcertPos)], zeroConcertPos), TreeNode("height", CCallBuiltin("*", [CVar("circleRadius", zeroConcertPos), CInt(2)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CCallBuiltin("*", [CVar("circleRadius", zeroConcertPos), CInt(2)], zeroConcertPos), TreeNode("style", CObject(TreeNode("stroke", CCallBuiltin("dot", [CVar("strokeColors", zeroConcertPos), CVar("status", zeroConcertPos)], zeroConcertPos), TreeNode("fill", CCallBuiltin("dot", [CVar("fillColors", zeroConcertPos), CVar("status", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(3.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos), CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CVar("cur", zeroConcertPos)], zeroConcertPos), CVar("icon", zeroConcertPos), CEmpty(), zeroConcertPos), CCallBuiltin("External", [CText("Paragraph"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CCallBuiltin("/", [CCallBuiltin("-", [CInt(0), CVar("maxTitleWidth", zeroConcertPos)], zeroConcertPos), CDouble(2.0)], zeroConcertPos), TreeNode("content", CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("size", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("titleStyles", zeroConcertPos), CVar("status", zeroConcertPos)], zeroConcertPos), CText("size")], zeroConcertPos), TreeNode("family", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("titleStyles", zeroConcertPos), CVar("status", zeroConcertPos)], zeroConcertPos), CText("family")], zeroConcertPos), TreeNode("color", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("titleStyles", zeroConcertPos), CVar("status", zeroConcertPos)], zeroConcertPos), CText("color")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("text", CCallBuiltin("dot", [CVar("step", zeroConcertPos), CText("title")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos)]), TreeNode("alignment", CText("center"), TreeEmpty(), TreeEmpty(), 1), TreeNode("height", CDouble(0.0), TreeNode("framed", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("width", CVar("maxTitleWidth", zeroConcertPos), TreeNode("positionY", CCallBuiltin("*", [CVar("barHeight", zeroConcertPos), CInt(8)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 4))])], zeroConcertPos)])], zeroConcertPos), TreeNode("enabled", CIf(CCall(CVar("isText", zeroConcertPos), [CVar("stepEnabled", zeroConcertPos)], zeroConcertPos), CCall(CVar("var", zeroConcertPos), [CVar("stepEnabled", zeroConcertPos)], zeroConcertPos), CVar("stepEnabled", zeroConcertPos), zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("stepIdxVar", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("ripple", CBool(false), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), TreeEmpty(), TreeNode("width", CIf(CCall(CVar("isText", zeroConcertPos), [CVar("widthVar", zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("widthVar", zeroConcertPos)], zeroConcertPos), CVar("widthVar", zeroConcertPos), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)])], zeroConcertPos)), CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CVar("stepIdxVar", zeroConcertPos)]), CIf(CCall(CVar("isText", zeroConcertPos), [CVar("widthVar", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("widthVar", zeroConcertPos)]), CArray(CArrayView(0, 0), []), zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLet("buildBody", CLambda([], CCall(CCallBuiltin("dot", [CCallBuiltin("index", [CVar("steps", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("stepIdxVar", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CText("content")], zeroConcertPos), [], zeroConcertPos)), CCall(CVar("Group", zeroConcertPos), [CArray(CArrayView(0, 0), [CCall(CVar("LinesUnframed", zeroConcertPos), [CArray(CArrayView(0, 0), [CCall(CVar("AttachHeight", zeroConcertPos), [CVar("header", zeroConcertPos), CVar("headerHeightVar", zeroConcertPos)], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("buildBody", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("stepIdxVar", zeroConcertPos)])], zeroConcertPos)])], zeroConcertPos), CCall(CVar("buildStepper", zeroConcertPos), [], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("SubscribeToWigiButton", CLambda(["obj"], CLet("wigiVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("wigiVarName"), CText("VAR")], zeroConcertPos), CLet("concertVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("concertVarName"), CText("var")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("wigi", zeroConcertPos), [CVar("wigiVarName", zeroConcertPos), CVar("concertVarName", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("raised", CBool(false), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("+", [CText("Subscribe "), CVar("concertVarName", zeroConcertPos)], zeroConcertPos), CText(" to ")], zeroConcertPos), CVar("wigiVarName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("TimelineAnimation", CLambda(["layers"], CLet("tempNamesStorageName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("tempNamesStorageName", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("animateTwoFrames", CLambda(["start", "end", "content"], CLet("durationMs", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("end", zeroConcertPos), CText("time")], zeroConcertPos), CCallBuiltin("dot", [CVar("start", zeroConcertPos), CText("time")], zeroConcertPos)], zeroConcertPos), CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("content", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("duration", CCallBuiltin("/", [CVar("durationMs", zeroConcertPos), CInt(1000)], zeroConcertPos), TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("keyframes", CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("start", zeroConcertPos), CText("transform")], zeroConcertPos), CCallBuiltin("dot", [CVar("end", zeroConcertPos), CText("transform")], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("setupTriggerForContent", CLambda(["content"], CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("triggerName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CLet("f", CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("triggerName", zeroConcertPos)], zeroConcertPos), CVar("content", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("triggerName", zeroConcertPos)])], zeroConcertPos), CSequence([CCall(CVar("updateVar", zeroConcertPos), [CVar("tempNamesStorageName", zeroConcertPos), CLambda(["s"], CCallBuiltin("concat", [CVar("s", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("fname", zeroConcertPos), CVar("triggerName", zeroConcertPos)])], zeroConcertPos))], zeroConcertPos), CObject(TreeNode("triggerName", CVar("triggerName", zeroConcertPos), TreeNode("content", CVar("f", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos)), CLet("timeline", CCall(CVar("mapi", zeroConcertPos), [CVar("layers", zeroConcertPos), CLambda(["i", "layer"], CLet("keyframes", CCallBuiltin("getKeyObjDef", [CVar("layer", zeroConcertPos), CText("keyframes"), CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("l", CCallBuiltin("length", [CVar("keyframes", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("l", zeroConcertPos), CInt(0)], zeroConcertPos), CObject(TreeNode("timings", CArray(CArrayView(0, 0), [CObject(TreeNode("time", CInt(0), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeNode("contents", CCallBuiltin("dot", [CVar("layer", zeroConcertPos), CText("content")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CIf(CCallBuiltin("==", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos), CLet("res", CCall(CVar("setupTriggerForContent", zeroConcertPos), [CCall(CVar("Transform", zeroConcertPos), [CCallBuiltin("dot", [CVar("layer", zeroConcertPos), CText("content")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("index", [CVar("keyframes", zeroConcertPos), CInt(0)], zeroConcertPos), CText("transform")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("timings", CArray(CArrayView(0, 0), [CObject(TreeNode("time", CCallBuiltin("dot", [CCallBuiltin("index", [CVar("keyframes", zeroConcertPos), CInt(0)], zeroConcertPos), CText("time")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("triggerName")], zeroConcertPos), CBool(true)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeNode("contents", CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("content")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("l", zeroConcertPos), CInt(2)], zeroConcertPos), CLet("animation", CCall(CVar("animateTwoFrames", zeroConcertPos), [CCallBuiltin("index", [CVar("keyframes", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("keyframes", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("dot", [CVar("layer", zeroConcertPos), CText("content")], zeroConcertPos)], zeroConcertPos), CLet("res", CCall(CVar("setupTriggerForContent", zeroConcertPos), [CVar("animation", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("timings", CArray(CArrayView(0, 0), [CObject(TreeNode("time", CCallBuiltin("dot", [CCallBuiltin("index", [CVar("keyframes", zeroConcertPos), CInt(0)], zeroConcertPos), CText("time")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("triggerName")], zeroConcertPos), CBool(true)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeNode("contents", CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("content")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos), zeroConcertPos), CLet("kfWithoutLast", CCall(CVar("subrange", zeroConcertPos), [CVar("keyframes", zeroConcertPos), CInt(0), CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CLet("res", CCall(CVar("mapi", zeroConcertPos), [CVar("kfWithoutLast", zeroConcertPos), CLambda(["j", "kf"], CLet("animation", CCall(CVar("animateTwoFrames", zeroConcertPos), [CCallBuiltin("index", [CVar("keyframes", zeroConcertPos), CVar("j", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("keyframes", zeroConcertPos), CCallBuiltin("+", [CVar("j", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("layer", zeroConcertPos), CText("content")], zeroConcertPos)], zeroConcertPos), CCall(CVar("setupTriggerForContent", zeroConcertPos), [CVar("animation", zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CObject(TreeNode("timings", CCall(CVar("mapi", zeroConcertPos), [CVar("kfWithoutLast", zeroConcertPos), CLambda(["j", "kf"], CObject(TreeNode("time", CCallBuiltin("dot", [CVar("kf", zeroConcertPos), CText("time")], zeroConcertPos), TreeNode("action", CLambda([], CSequence([CIf(CCallBuiltin("!=", [CVar("j", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("index", [CVar("res", zeroConcertPos), CCallBuiltin("-", [CVar("j", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CText("triggerName")], zeroConcertPos), CBool(false)], zeroConcertPos), CEmpty(), zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("index", [CVar("res", zeroConcertPos), CVar("j", zeroConcertPos)], zeroConcertPos), CText("triggerName")], zeroConcertPos), CBool(true)], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)))], zeroConcertPos), TreeNode("contents", CCall(CVar("Group", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CVar("res", zeroConcertPos), CLambda(["x"], CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("content")], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CLet("contents", CCall(CVar("map", zeroConcertPos), [CVar("timeline", zeroConcertPos), CLambda(["t"], CCallBuiltin("dot", [CVar("t", zeroConcertPos), CText("contents")], zeroConcertPos))], zeroConcertPos), CLet("timings", CCall(CVar("map", zeroConcertPos), [CVar("timeline", zeroConcertPos), CLambda(["t"], CCallBuiltin("dot", [CVar("t", zeroConcertPos), CText("timings")], zeroConcertPos))], zeroConcertPos), CObject(TreeNode("run", CLambda([], CCall(CVar("iter", zeroConcertPos), [CVar("timings", zeroConcertPos), CLambda(["layer"], CCall(CVar("map", zeroConcertPos), [CVar("layer", zeroConcertPos), CLambda(["kf"], CCall(CVar("timer", zeroConcertPos), [CCallBuiltin("dot", [CVar("kf", zeroConcertPos), CText("time")], zeroConcertPos), CCallBuiltin("dot", [CVar("kf", zeroConcertPos), CText("action")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))], zeroConcertPos)), TreeNode("dispose", CLambda([], CSequence([CCall(CVar("iter", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("tempNamesStorageName", zeroConcertPos)], zeroConcertPos), CLambda(["name"], CCallBuiltin("deactivate", [CVar("name", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("deactivate", [CVar("tempNamesStorageName", zeroConcertPos)], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeNode("view", CCall(CVar("Group", zeroConcertPos), [CVar("contents", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos))),
		Pair("TimerElement", CLambda(["obj"], CLet("timerType", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("type"), CText("interruptible")], zeroConcertPos), CLet("duration", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("duration"), CInt(1000)], zeroConcertPos), CLet("callback", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("callback"), CLambda([], CObject(TreeEmpty()))], zeroConcertPos), CLet("interruptLambdaName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("interruptLambdaName"), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos), CLet("triggerName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("triggerName"), CText("")], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CVar("triggerName", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos), CEmpty(), zeroConcertPos), CCallBuiltin("External", [CText("Container"), CArray(CArrayView(0, 0), [CObject(TreeNode("displayView", CCallBuiltin("Empty", [], zeroConcertPos), TreeNode("chip", CText("Timer"), TreeEmpty(), TreeNode("constructors", CArray(CArrayView(0, 0), [CLambda([], CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("triggerName", zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("interruptLambdaName", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("timerType", zeroConcertPos), CText("interval")], zeroConcertPos), CCall(CVar("setInterval", zeroConcertPos), [CVar("duration", zeroConcertPos), CVar("callback", zeroConcertPos)], zeroConcertPos), CCall(CVar("interruptibleTimer", zeroConcertPos), [CVar("duration", zeroConcertPos), CVar("callback", zeroConcertPos)], zeroConcertPos), zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("triggerName", zeroConcertPos)])], zeroConcertPos), CLambda([], CSequence([CCall(CCall(CVar("getVar", zeroConcertPos), [CVar("interruptLambdaName", zeroConcertPos)], zeroConcertPos), [], zeroConcertPos), CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos)]))]), zeroConcertPos))]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("editView", CVar("duration", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("Transform", CLambda(["c", "transform"], CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeNode("keyframes", CArray(CArrayView(0, 0), [CVar("transform", zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos))),
		Pair("Translate", CLambda(["c", "position"], CLet("contentName", CCall(CVar("useContent", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("contentName", CVar("contentName", zeroConcertPos), TreeEmpty(), TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("translate", CVar("position", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))]), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos))),
		Pair("TranslateGraphics", CLambda(["obj"], CLet("element", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("element"), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Line", zeroConcertPos), [CDouble(200.0), CDouble(200.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("translate", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("translate"), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CLet("translated", CCall(CVar("translateGraphics", zeroConcertPos), [CVar("element", zeroConcertPos), CVar("translate", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Graphics", [CCallBuiltin("dot", [CVar("translated", zeroConcertPos), CText("shape")], zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("UnsubscribeFromWigiButton", CLambda(["obj"], CLet("wigiVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("wigiVarName"), CText("VAR")], zeroConcertPos), CLet("concertVarName", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("concertVarName"), CText("var")], zeroConcertPos), CLet("positionX", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionX"), CDouble(0.0)], zeroConcertPos), CLet("positionY", CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CText("positionY"), CDouble(0.0)], zeroConcertPos), CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("unWigi", zeroConcertPos), [CVar("wigiVarName", zeroConcertPos), CVar("concertVarName", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("raised", CBool(false), TreeNode("positionX", CVar("positionX", zeroConcertPos), TreeEmpty(), TreeNode("positionY", CVar("positionY", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("+", [CText("Unsubscribe "), CVar("concertVarName", zeroConcertPos)], zeroConcertPos), CText(" from ")], zeroConcertPos), CVar("wigiVarName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("WidthHeight", CLambda(["width", "height"], CObject(TreeNode("width", CVar("width", zeroConcertPos), TreeNode("height", CVar("height", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)))),
		Pair("_", CLambda(["t"], CVar("t", zeroConcertPos))),
		Pair("__enumFromTo", CLambda(["start", "end", "arr"], CIf(CCallBuiltin("<", [CVar("start", zeroConcertPos), CVar("end", zeroConcertPos)], zeroConcertPos), CCall(CVar("__enumFromTo", zeroConcertPos), [CCallBuiltin("+", [CVar("start", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("end", zeroConcertPos), CCallBuiltin("replace", [CVar("arr", zeroConcertPos), CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("start", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("arr", zeroConcertPos), zeroConcertPos))),
		Pair("__extractSets", CLambda(["acc", "code"], CCall(CVar("switchConcert", zeroConcertPos), [CVar("code", zeroConcertPos), CObject(TreeNode("sequence", CLambda(["children"], CCall(CVar("fold", zeroConcertPos), [CVar("children", zeroConcertPos), CVar("acc", zeroConcertPos), CVar("__extractSets", zeroConcertPos)], zeroConcertPos)), TreeNode("hierarchy", CLambda(["header", "__", "children"], CCall(CVar("fold", zeroConcertPos), [CVar("children", zeroConcertPos), CVar("acc", zeroConcertPos), CVar("__extractSets", zeroConcertPos)], zeroConcertPos)), TreeNode("default", CLambda([], CVar("acc", zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("let", CLambda(["name", "value", "body"], CCall(CVar("__extractSets", zeroConcertPos), [CVar("acc", zeroConcertPos), CVar("body", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("set", CLambda(["name", "value"], CCallBuiltin("setKeyObj", [CVar("acc", zeroConcertPos), CVar("name", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos))),
		Pair("__filter", CLambda(["acc", "i", "xs", "test"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("nacc", CIf(CCall(CVar("test", zeroConcertPos), [CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("replace", [CVar("acc", zeroConcertPos), CCallBuiltin("length", [CVar("acc", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos), CCall(CVar("__filter", zeroConcertPos), [CVar("nacc", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("xs", zeroConcertPos), CVar("test", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs7() -> [Pair<string, Concert>] {
	[
		Pair("__filteri", CLambda(["acc", "i", "xs", "test"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("nacc", CIf(CCall(CVar("test", zeroConcertPos), [CVar("i", zeroConcertPos), CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("replace", [CVar("acc", zeroConcertPos), CCallBuiltin("length", [CVar("acc", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos), CCall(CVar("__filteri", zeroConcertPos), [CVar("nacc", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("xs", zeroConcertPos), CVar("test", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos))),
		Pair("__fold", CLambda(["i", "xs", "init", "fn"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__fold", zeroConcertPos), [CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("xs", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("init", zeroConcertPos), CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos), CVar("init", zeroConcertPos), zeroConcertPos))),
		Pair("__foldi", CLambda(["i", "xs", "init", "fn"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__foldi", zeroConcertPos), [CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("xs", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("i", zeroConcertPos), CVar("init", zeroConcertPos), CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos), CVar("init", zeroConcertPos), zeroConcertPos))),
		Pair("__forall", CLambda(["a", "i", "n", "fn"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("fn", zeroConcertPos), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__forall", zeroConcertPos), [CVar("a", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("n", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos), CBool(false), zeroConcertPos), CBool(true), zeroConcertPos))),
		Pair("__getExtraButtonHintMarkerByName", CLambda(["__"], CObject(TreeEmpty()))),
		Pair("__getHelper", CLambda(["editorName", "fn"], CLet("varName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("uns", CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state"], CCall(CVar("fn", zeroConcertPos), [CVar("state", zeroConcertPos), CVar("varName", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("uns", zeroConcertPos), [], zeroConcertPos), CLet("result", CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("varName", zeroConcertPos)], zeroConcertPos), CVar("result", zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos))),
		Pair("__getHintMarkerByName", CLambda(["__"], CObject(TreeEmpty()))),
		Pair("__importOneRecord", CLambda(["type", "onOk", "onErr"], CLet("errText", CCallBuiltin("+", [CText("Error accessing "), CVar("type", zeroConcertPos)], zeroConcertPos), CCall(CVar("ssql", zeroConcertPos), [CQuote(CCall(CVar("limit", zeroConcertPos), [CInt(1), CCall(CVar("filter", zeroConcertPos), [CVar("concert_objects", zeroConcertPos), CCallBuiltin("==", [CVar("type", zeroConcertPos), CUnquote(CVar("type", zeroConcertPos), zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["queryResult"], CIf(CCallBuiltin("<=", [CCallBuiltin("length", [CCallBuiltin("dot", [CVar("queryResult", zeroConcertPos), CText("cells")], zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("onErr", zeroConcertPos), [CCallBuiltin("+", [CVar("errText", zeroConcertPos), CText(": concert_objects doesn't contain the requested record or you don't have enough rights to access it")], zeroConcertPos)], zeroConcertPos), CCall(CVar("onOk", zeroConcertPos), [CCall(CVar("deserialize", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("index", [CVar("queryResult", zeroConcertPos), CInt(1)], zeroConcertPos), CInt(3)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["err"], CCall(CVar("onErr", zeroConcertPos), [CCallBuiltin("+", [CCallBuiltin("+", [CVar("errText", zeroConcertPos), CText(": ")], zeroConcertPos), CVar("err", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs8() -> [Pair<string, Concert>] {
	[
		Pair("__insertPanelConfig", CObject(TreeNode("Picture", CCallBuiltin("External", [CText("Picture"), CArray(CArrayView(0, 0), [CObject(TreeNode("picURL", CText("lib/wigi/htmltest/tests/image.jpg"), TreeNode("height", CDouble(240.0), TreeEmpty(), TreeNode("keepAspectRatio", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), TreeNode("Icon", CCallBuiltin("External", [CText("Icon"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("home"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("opacity", CDouble(1.0), TreeEmpty(), TreeNode("width", CDouble(24.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeNode("DropDown", CCallBuiltin("External", [CText("DropDown"), CArray(CArrayView(0, 0), [CObject(TreeNode("items", CText("Item 1\nItem 2"), TreeNode("fallbackText", CText("Choose item"), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Variable"), TreeEmpty(), TreeNode("width", CDouble(160.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeNode("CheckBox", CCallBuiltin("External", [CText("CheckBox"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CText("Label"), TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CText("Variable"), TreeNode("shortcut", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(160.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeNode("Builtin", CQuote(CCallBuiltin("length", [CArray(CArrayView(0, 0), [CVar("arg1", zeroConcertPos), CVar("arg2", zeroConcertPos)])], zeroConcertPos)), TreeNode("AsCode", CCallBuiltin("AsCode", [CText(""), CCall(CVar("WidthHeight", zeroConcertPos), [CDouble(600.0), CDouble(600.0)], zeroConcertPos)], zeroConcertPos), TreeNode("Arrow", CQuote(CCall(CVar("Arrow", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(1.0), TreeNode("fill", CInt(9315498), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("headWidth", CDouble(32.0), TreeNode("headLength", CDouble(32.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CDouble(0.0), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("tailWidth", CDouble(16.0), TreeEmpty(), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 2), 4))], zeroConcertPos)), TreeNode("Animator", CCallBuiltin("External", [CText("Animator"), CArray(CArrayView(0, 0), [CObject(TreeNode("progressName", CText("progressVar"), TreeNode("fade", CBool(false), TreeNode("duration", CDouble(0.3), TreeNode("contentName", CText("contentVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("easing", CText("ease"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("positionX", CDouble(0.0), TreeNode("noCrop", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("scaleAnimation", CObject(TreeNode("factor", CObject(TreeNode("x", CDouble(1.0), TreeEmpty(), TreeNode("y", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("centerMode", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeNode("rotateAnimation", CObject(TreeNode("angle", CDouble(0.0), TreeEmpty(), TreeNode("centerMode", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CText("triggerVar"), TreeNode("translateAnimation", CObject(TreeNode("type", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("Autocomplete", CCallBuiltin("External", [CText("Autocomplete"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionY", CDouble(0.0), TreeNode("dictionary", CText("Option1\nOption2"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CText("Variable"), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("Canvas", CCallBuiltin("CanvasScroll", [CDouble(0.0), CDouble(0.0), CDouble(128.0), CDouble(128.0), CDouble(128.0), CDouble(128.0), CDouble(1.0), CDouble(1.0), CDouble(0.0), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeNode("Call", CQuote(CCall(CVar("fnName", zeroConcertPos), [CVar("arg1", zeroConcertPos), CVar("arg2", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Carousel", CCallBuiltin("External", [CText("Carousel"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionY", CDouble(0.0), TreeNode("items", CArray(CArrayView(0, 0), [CText("Item1"), CDouble(2.0)]), TreeNode("color", CInt(11250603), TreeEmpty(), TreeNode("height", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("var", CText("Variable"), TreeEmpty(), TreeNode("width", CDouble(320.0), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 4), TreeNode("DatePicker", CCallBuiltin("External", [CText("DatePicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeEmpty(), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CText("Variable"), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), TreeNode("Comap", CCallBuiltin("Comap", [CText("Comap"), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeNode("ColorPicker", CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeNode("label", CText("Edit Color"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("varColor", CText("VarColorName"), TreeNode("showTextInput", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("varOpacity", CText("VarOpacityName"), TreeEmpty(), TreeNode("width", CDouble(160.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeNode("CodeEditor", CCallBuiltin("MonacoEditor", [CBool(false), CText(""), CCall(CVar("WidthHeight", zeroConcertPos), [CDouble(600.0), CDouble(600.0)], zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("Columns", CArray(CArrayView(0, 0), [CText("Value 1"), CText("Value 2")]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("DataTable", CCallBuiltin("External", [CText("DataTable"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("columns", CArray(CArrayView(0, 0), [CObject(TreeNode("tooltip", CText("Tooltip"), TreeNode("header", CText("Header"), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CInt(192), TreeEmpty(), TreeEmpty(), 1), 2))]), TreeEmpty(), TreeEmpty(), 1), TreeNode("rows", CCallBuiltin("Table", [CArray(CArrayView(0, 0), [CArray(CArrayView(0, 0), [CText("Cell")])])], zeroConcertPos), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("style", CObject(TreeNode("searchByColumn", CInt(-1), TreeNode("fullWidth", CBool(false), TreeNode("customHeaderActions", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeNode("pagination", CObject(TreeNode("currentVarName", CText("var"), TreeEmpty(), TreeNode("rowsPerPage", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("singleSelectionVarName", CText("var"), TreeNode("searchVarName", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("title", CText(""), TreeEmpty(), TreeNode("truncateText", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4)), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeNode("CustomButton", CCallBuiltin("External", [CText("CustomButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("heightMode", CText("content"), TreeNode("enabled", CBool(true), TreeNode("alignmentHorizontal", CDouble(0.0), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeNode("alignmentVertical", CDouble(0.5), TreeEmpty(), TreeNode("disabled", CText("disabledContent"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("fixedWidth", CDouble(128.0), TreeNode("fixedHeight", CDouble(48.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 4), TreeNode("ripple", CBool(true), TreeNode("hovered", CText("hoveredContent"), TreeNode("highlightOnHover", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("normal", CText("normalContent"), TreeEmpty(), TreeNode("pressed", CText("pressedContent"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("tooltip", CText(""), TreeNode("rippleShape", CText("MIcon"), TreeEmpty(), TreeEmpty(), 1), TreeNode("widthMode", CText("content"), TreeEmpty(), TreeEmpty(), 1), 2), 4), 5))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("Double", CDouble(0.0), TreeNode("DockingUI", CCallBuiltin("External", [CText("DockingUI"), CArray(CArrayView(0, 0), [CObject(TreeNode("fullScreen", CBool(false), TreeNode("dockingAreas", CObject(TreeNode("rightArea", CObject(TreeNode("title", CText("RightArea"), TreeNode("groupName", CText("Cols"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeNode("leftArea", CObject(TreeNode("title", CText("LeftArea"), TreeNode("groupName", CText("Cols"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("topArea", CObject(TreeNode("groupName", CText("Toolbar"), TreeEmpty(), TreeNode("title", CText("topArea"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("content", CText("CEmpty()"), TreeEmpty(), TreeEmpty(), 1), TreeNode("dockingPanels", CArray(CArrayView(0, 0), [CObject(TreeNode("title", CText("Insert Panel"), TreeNode("height", CDouble(100.0), TreeNode("dockedArea", CText("LeftArea"), TreeNode("content", CText("CEmpty()"), TreeEmpty(), TreeEmpty(), 1), TreeNode("dockedPosition", CInt(0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("icon", CText("open_in_browser"), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("type", CText("DockingPanel"), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 4))]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("positionX", CDouble(0.0), TreeNode("keyGroupName", CText("DockingEditor"), TreeNode("height", CDouble(640.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("width", CDouble(640.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("DragDropRestricted", CQuote(CCall(CVar("DragDropRestricted", zeroConcertPos), [CObject(TreeNode("restrict", CLambda(["i", "x", "y"], CCall(CVar("Point", zeroConcertPos), [CVar("x", zeroConcertPos), CVar("y", zeroConcertPos)], zeroConcertPos)), TreeNode("elements", CArray(CArrayView(0, 0), [CCall(CVar("Ellipse", zeroConcertPos), [CObject(TreeEmpty())], zeroConcertPos)]), TreeNode("coordsName", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("mouseDownName", CText(""), TreeNode("height", CDouble(400.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("requireMouseInside", CText("onStart"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("width", CDouble(400.0), TreeNode("startId", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 4))], zeroConcertPos)), TreeNode("DragDrop", CCallBuiltin("External", [CText("DragDrop"), CArray(CArrayView(0, 0), [CObject(TreeNode("id", CInt(0), TreeNode("droppingIdName", CText("droppingIdVar"), TreeNode("draggingContentName", CText("draggingContentVar"), TreeNode("disablePassingClicks", CBool(false), TreeNode("contentVisibleOnDrag", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("dragLowestPriority", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("draggingPlaceholderName", CText("draggingPlaceholderVar"), TreeNode("draggingEnabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("droppingEnabled", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("hoveringEnabled", CBool(false), TreeNode("grabPositionName", CText("grabPositionVar"), TreeNode("grabDelay", CInt(300), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("hoveringIdName", CText("hoveringIdVar"), TreeEmpty(), TreeNode("hoveringName", CText("hoveringVar"), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), TreeNode("onDrag", CLambda(["isDragging"], CObject(TreeEmpty())), TreeNode("isDraggingName", CText("isDraggingVar"), TreeNode("idleContentName", CText("idleContentVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("localMousePositionName", CText("localMousePositionVar"), TreeEmpty(), TreeNode("noDragAnimation", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("onHover", CLambda(["id"], CObject(TreeEmpty())), TreeNode("onDrop", CLambda(["id"], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("pressedName", CText("pressedVar"), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), 5))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("DraggableArea", CQuote(CCall(CVar("DraggableArea", zeroConcertPos), [CObject(TreeNode("onClick", CLambda(["mouseCoords"], CObject(TreeEmpty())), TreeNode("elementsName", CText("elements"), TreeNode("coordsName", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("height", CDouble(400.0), TreeNode("grabDelay", CInt(5), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("startId", CInt(0), TreeNode("onElementClick", CLambda(["id"], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(400.0), TreeEmpty(), TreeEmpty(), 1), 2), 4))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), 5), TreeNode("Expander", CCallBuiltin("External", [CText("Expander"), CArray(CArrayView(0, 0), [CObject(TreeNode("details", CText("Details"), TreeNode("color", CInt(0), TreeNode("alignedToBaseLine", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icons", CObject(TreeNode("closeIcon", CText("arrow_drop_down"), TreeEmpty(), TreeNode("openIcon", CText("arrow_end"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("hideSeparator", CBool(false), TreeNode("header", CText("Header"), TreeEmpty(), TreeEmpty(), 1), TreeNode("iconInFront", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(240.0), TreeNode("isOpenedName", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4))])], zeroConcertPos), TreeNode("Ellipse", CQuote(CCall(CVar("Ellipse", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(1.0), TreeNode("fill", CInt(13774109), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(0.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("positionX", CDouble(0.0), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos)), TreeNode("EasingAnimation", CCallBuiltin("External", [CText("EasingAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("duration", CDouble(0.3), TreeNode("beforeEach", CLambda(["trigger"], CVar("trigger", zeroConcertPos)), TreeNode("autoStart", CBool(false), TreeNode("animatingName", CText("animatingVar"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("continueOnEmpty", CBool(false), TreeNode("contentName", CText("contentVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("delay", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("loop", CLambda(["current"], CVar("current", zeroConcertPos)), TreeNode("forceAnimation", CBool(false), TreeNode("easing", CText("ease"), TreeEmpty(), TreeEmpty(), 1), TreeNode("freezeName", CText("freezeVar"), TreeEmpty(), TreeNode("isPlayedName", CText("isPlayedVar"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("stopOffScreen", CBool(false), TreeNode("positionX", CDouble(0.0), TreeNode("percent", CLambda(["current", "progress"], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("triggerName", CText("triggerVar"), TreeEmpty(), TreeEmpty(), 1), 3), 4), 5))])], zeroConcertPos), TreeEmpty(), TreeNode("Editor", CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("varName", CText("varName"), TreeNode("name", CText("editorName"), TreeNode("height", CDouble(600.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CDouble(600.0), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Empty", CCallBuiltin("Empty", [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("Formula", CQuote(CFormula("varF", CVar("var2", zeroConcertPos))), TreeNode("FadeIn", CLambda(["element"], CQuote(CCall(CVar("FadeIn", zeroConcertPos), [CObject(TreeNode("element", CUnquote(CVar("element", zeroConcertPos), zeroConcertPos), TreeNode("duration", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CText(""), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos))), TreeNode("External", CCallBuiltin("External", [CText("External"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("ExpanderMenu", CQuote(CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("header", CText("Header"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("item1"), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("item2"), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(240.0), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("False", CBool(false), TreeNode("FadeOut", CLambda(["element"], CQuote(CCall(CVar("FadeOut", zeroConcertPos), [CObject(TreeNode("element", CUnquote(CVar("element", zeroConcertPos), zeroConcertPos), TreeNode("duration", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CText(""), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos))), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("GetWigiVarAsync", CQuote(CCall(CVar("getWigiAsync", zeroConcertPos), [CText("VAR"), CText("var")], zeroConcertPos)), TreeNode("GetWigiButton", CQuote(CCall(CVar("GetWigiButton", zeroConcertPos), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("concertVarName", CText("var"), TreeEmpty(), TreeEmpty(), 1), TreeNode("wigiVarName", CText("VAR"), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos)), TreeNode("Frame", CCallBuiltin("External", [CText("Frame"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("margin", CDouble(0.0), TreeNode("content", CText("content"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("radius", CDouble(0.0), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("style", CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("GetWigiVar", CQuote(CCall(CVar("getWigi", zeroConcertPos), [CText("VAR")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Grid", CQuote(CCall(CVar("Grid", zeroConcertPos), [CObject(TreeNode("rows", CDouble(10.0), TreeNode("height", CDouble(128.0), TreeNode("cols", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(1.0), TreeNode("fill", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeEmpty(), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 2), 4))], zeroConcertPos)), TreeEmpty(), TreeNode("HTML", CCallBuiltin("HTML", [CText(""), CCall(CVar("WidthHeight", zeroConcertPos), [CDouble(600.0), CDouble(600.0)], zeroConcertPos), CBool(false), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), 5), 6), TreeNode("Let", CCallBuiltin("makeCodingStructures", [CText("Let"), CArray(CArrayView(0, 0), [CText("var"), CCallBuiltin("Empty", [], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)])], zeroConcertPos), TreeNode("Integer", CInt(1), TreeNode("IconToggle", CCallBuiltin("External", [CText("IconToggle"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("visibility"), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(6.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("shortcut", CText(""), TreeNode("iconFalse", CText("visibility_off"), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText(""), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeNode("IconButton", CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("home"), TreeNode("color", CInt(0), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeNode("buttonBorder", CDouble(12.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("enabled", CBool(true), TreeEmpty(), TreeNode("hintMarker", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("shortcutPreventDefault", CBool(false), TreeNode("shortcut", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText(""), TreeEmpty(), TreeNode("width", CDouble(48.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("InputText", CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CText("Label"), TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeNode("alignment", CText("left"), TreeEmpty(), TreeEmpty(), 1), TreeNode("editIcon", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("floating", CBool(true), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("style", CText("Text"), TreeNode("maxChars", CInt(260), TreeNode("lines", CInt(1), TreeEmpty(), TreeEmpty(), 1), TreeNode("step", CDouble(0.1), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("updateOnVarChange", CBool(false), TreeNode("tooltip", CText("Tooltip"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Variable"), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeNode("If", CLet("empty", CCallBuiltin("Empty", [], zeroConcertPos), CQuote(CIf(CUnquote(CVar("empty", zeroConcertPos), zeroConcertPos), CUnquote(CVar("empty", zeroConcertPos), zeroConcertPos), CUnquote(CVar("empty", zeroConcertPos), zeroConcertPos), zeroConcertPos)), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("KeyValue", CKeyValue("key", CText("Value")), TreeNode("Interactive", CCallBuiltin("External", [CText("Interactive"), CArray(CArrayView(0, 0), [CObject(TreeNode("id", CInt(0), TreeNode("content", CText("content"), TreeEmpty(), TreeEmpty(), 1), TreeNode("interactivity", CObject(TreeNode("mouseInside", CText("mouseInsideName"), TreeNode("mouseDown", CText("mouseDownName"), TreeNode("key", CObject(TreeNode("filter", CLambda(["ke"], CBool(true)), TreeNode("action", CLambda(["ke"], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("mouseXY", CText("mouseXYName"), TreeEmpty(), TreeEmpty(), 1), 3)), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("Lambda", CLambda(["a"], CVar("a", zeroConcertPos)), TreeNode("KeyframesAnimation", CCallBuiltin("External", [CText("KeyframesAnimation"), CArray(CArrayView(0, 0), [CObject(TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("scale", CObject(TreeNode("x", CDouble(1.0), TreeEmpty(), TreeNode("y", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("easing", CText("linear"), TreeNode("alpha", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("rotate", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("translate", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("scale", CObject(TreeNode("x", CDouble(1.0), TreeEmpty(), TreeNode("y", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("easing", CText("linear"), TreeNode("alpha", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("rotate", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("translate", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 3))]), TreeNode("duration", CDouble(0.3), TreeNode("delay", CDouble(0.0), TreeNode("contentName", CText("contentVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("direction", CText("normal"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("easing", CText("ease"), TreeEmpty(), TreeNode("iterations", CInt(1), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("origin", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("onFinish", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CDouble(0.0), TreeNode("percentName", CText("percentVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4), TreeNode("Menu", CCallBuiltin("External", [CText("Menu"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("button", CCallBuiltin("External", [CText("Icon"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("more_vert"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("lines", CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("line1"), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("content", CText("line2"), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeEmpty(), TreeNode("tooltip", CText(""), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeNode("Lines", CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CText("Value 1"), CText("Value 2")])], zeroConcertPos), TreeNode("LineSegmentBySlope", CQuote(CCall(CVar("LineSegmentBySlope", zeroConcertPos), [CObject(TreeNode("xEnd", CDouble(64.0), TreeNode("m", CDouble(-1.0), TreeNode("b", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(0.0), TreeNode("fill", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("yEnd", CDouble(-64.0), TreeNode("xStart", CDouble(-64.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("yStart", CDouble(64.0), TreeEmpty(), TreeEmpty(), 1), 2), 4))], zeroConcertPos)), TreeNode("LineSegment", CQuote(CCall(CVar("LineSegment", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(1.0), TreeNode("fill", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("positionX", CDouble(0.0), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("LineSegmentByTwoPoints", CQuote(CCall(CVar("LineSegmentByTwoPoints", zeroConcertPos), [CObject(TreeNode("x2", CDouble(128.0), TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(0.0), TreeNode("fill", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("x1", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("y1", CDouble(0.0), TreeNode("xStart", CDouble(-64.0), TreeNode("xEnd", CDouble(64.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("yEnd", CDouble(-64.0), TreeNode("y2", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("yStart", CDouble(64.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Mask", CCallBuiltin("External", [CText("Mask"), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("Content"), TreeEmpty(), TreeNode("mask", CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("width", CDouble(128.0), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("MakeScreen", CObject(TreeNode("buildFn", CLambda(["elements"], CLet("canvas", CCallBuiltin("CanvasCrop", [CDouble(0.0), CDouble(0.0), CDouble(480.0), CDouble(480.0), CDouble(480.0), CDouble(480.0), CDouble(1.0), CDouble(1.0), CDouble(0.0), CVar("elements", zeroConcertPos)], zeroConcertPos), CQuote(CSet("screen", CUnquote(CVar("canvas", zeroConcertPos), zeroConcertPos), zeroConcertPos)), zeroConcertPos)), TreeEmpty(), TreeNode("element", CLet("canvas", CCallBuiltin("CanvasCrop", [CDouble(0.0), CDouble(0.0), CDouble(480.0), CDouble(480.0), CDouble(480.0), CDouble(480.0), CDouble(1.0), CDouble(1.0), CDouble(0.0), CArray(CArrayView(0, 0), [])], zeroConcertPos), CQuote(CSet("screen", CUnquote(CVar("canvas", zeroConcertPos), zeroConcertPos), zeroConcertPos)), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("Object", CCallBuiltin("array2object", [CArray(CArrayView(0, 0), [CKeyValue("key1", CText("Value1")), CKeyValue("key2", CText("Value2"))])], zeroConcertPos), TreeNode("MouseTracking", CLambda(["element"], CQuote(CCall(CVar("MouseTracking", zeroConcertPos), [CObject(TreeNode("element", CUnquote(CVar("element", zeroConcertPos), zeroConcertPos), TreeNode("clicksVarName", CText("clicksVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("mousePositionVarName", CText("mousePositionVar"), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))), TreeNode("MorphingAnimation", CLambda(["elements"], CLet("graphicsOrDef", CLambda(["e", "def"], CIf(CCall(CVar("isGraphics", zeroConcertPos), [CCall(CVar("eval", zeroConcertPos), [CVar("e", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("e", zeroConcertPos), CVar("def", zeroConcertPos), zeroConcertPos)), CLet("elementStart", CCall(CVar("graphicsOrDef", zeroConcertPos), [CCallBuiltin("index", [CVar("elements", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("Line", zeroConcertPos), [CDouble(128.0), CDouble(128.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeNode("height", CDouble(128.0), TreeEmpty(), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)], zeroConcertPos), CLet("elementEnd", CCall(CVar("graphicsOrDef", zeroConcertPos), [CCallBuiltin("index", [CVar("elements", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("Graphics", [CArray(CArrayView(0, 0), [CCall(CVar("Move", zeroConcertPos), [CDouble(128.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("CubicBezier", zeroConcertPos), [CDouble(0.0), CDouble(128.0), CDouble(24.0), CDouble(360.0), CDouble(360.0), CDouble(24.0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("Stroke", [CInt(0)], zeroConcertPos)]), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CQuote(CCall(CVar("MorphingAnimation", zeroConcertPos), [CObject(TreeNode("end", CUnquote(CVar("elementEnd", zeroConcertPos), zeroConcertPos), TreeNode("duration", CDouble(2.0), TreeEmpty(), TreeNode("easing", CText("ease"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("start", CUnquote(CVar("elementStart", zeroConcertPos), zeroConcertPos), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("triggerName", CText(""), TreeEmpty(), TreeEmpty(), 1), 3), 4))], zeroConcertPos)), zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("NamedValueAnimation", CQuote(CCall(CVar("NamedValueAnimation", zeroConcertPos), [CObject(TreeNode("name", CText("var"), TreeNode("easing", CText("ease"), TreeNode("duration", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("from", CDouble(0.0), TreeEmpty(), TreeNode("loop", CText("none"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("to", CDouble(100.0), TreeNode("resetTriggerName", CText(""), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CText(""), TreeEmpty(), TreeEmpty(), 1), 2), 4))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Parabola", CQuote(CCall(CVar("Parabola", zeroConcertPos), [CObject(TreeNode("c", CDouble(0.0), TreeNode("b", CDouble(1.1), TreeNode("a", CDouble(0.01), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(0.0), TreeNode("fill", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("xStart", CInt(-128), TreeEmpty(), TreeEmpty(), 1), 3), 4))], zeroConcertPos)), TreeEmpty(), TreeNode("Paragraph", CCallBuiltin("External", [CText("Paragraph"), CArray(CArrayView(0, 0), [CObject(TreeNode("interlineSpacing", CDouble(0.0), TreeNode("content", CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("Icon"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("home"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos), CText("Some very long text")]), TreeNode("alignment", CText("left"), TreeEmpty(), TreeEmpty(), 1), TreeNode("cropWords", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("marginTop", CDouble(0.0), TreeNode("marginBottom", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("minWidth", CDouble(128.0), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), 5), 7), TreeNode("Quote", CQuote(CQuote(CQuote(CVar("var", zeroConcertPos)))), TreeNode("PrimePicture", CCallBuiltin("External", [CText("PrimePicture"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeGraphics", CCallBuiltin("External", [CText("PrimeGraphics"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeDataTable", CCallBuiltin("External", [CText("PrimeDataTable"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeAutocompleteInput", CCallBuiltin("External", [CText("PrimeAutocompleteInput"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeArrow", CCallBuiltin("External", [CText("PrimeArrow"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("Polygon", CQuote(CCall(CVar("Polygon", zeroConcertPos), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), [CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CDouble(128.0), CDouble(64.0)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(128.0)], zeroConcertPos)]), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(1.0), TreeNode("fill", CInt(16755200), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("PrimeCarousel", CCallBuiltin("External", [CText("PrimeCarousel"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeCard", CCallBuiltin("External", [CText("PrimeCard"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("PrimeCheckbox", CCallBuiltin("External", [CText("PrimeCheckbox"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("PrimeDropDownList", CCallBuiltin("External", [CText("PrimeDropDownList"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeDate", CCallBuiltin("External", [CText("PrimeDate"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("PrimeExpansionPanels", CCallBuiltin("External", [CText("PrimeExpansionPanels"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeNode("PrimeFloatingButton", CCallBuiltin("External", [CText("PrimeFloatingButton"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), TreeNode("PrimeLetterIcon", CCallBuiltin("External", [CText("PrimeLetterIcon"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeIconButton", CCallBuiltin("External", [CText("PrimeIconButton"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeGraphicsEditor", CCallBuiltin("External", [CText("PrimeGraphicsEditor"), CArray(CArrayView(0, 0), [CObject(TreeNode("height", CDouble(800.0), TreeNode("contentVarName", CText("var"), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(1280.0), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("PrimeIconToggle", CCallBuiltin("External", [CText("PrimeIconToggle"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("PrimeMenu", CCallBuiltin("External", [CText("PrimeMenu"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 5), TreeNode("PrimeTextCard", CCallBuiltin("External", [CText("PrimeTextCard"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeSimpleIcon", CCallBuiltin("External", [CText("PrimeSimpleIcon"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeRoundedRectangle", CCallBuiltin("External", [CText("PrimeRoundedRectangle"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeRadioButtons", CCallBuiltin("External", [CText("PrimeRadioButtons"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("PrimeSideNavigationBar", CCallBuiltin("External", [CText("PrimeSideNavigationBar"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("PrimeTabContent", CCallBuiltin("External", [CText("PrimeTabContent"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeSwitchControl", CCallBuiltin("External", [CText("PrimeSwitchControl"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("PrimeTabs", CCallBuiltin("External", [CText("PrimeTabs"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("PrimeTextParagraph", CCallBuiltin("External", [CText("PrimeTextParagraph"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeTextForm", CCallBuiltin("External", [CText("PrimeTextForm"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("PrimeTime", CCallBuiltin("External", [CText("PrimeTime"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeNode("PrimeTextRichEditor", CCallBuiltin("External", [CText("PrimeTextRichEditor"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("PrimeToolbar", CCallBuiltin("External", [CText("PrimeToolbar"), CArray(CArrayView(0, 0), [CObject(TreeEmpty())])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), 6), TreeNode("StyledText", CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("size", CDouble(12.0), TreeNode("family", CText("Roboto"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("opacity", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), TreeNode("Separator", CCallBuiltin("External", [CText("Separator"), CArray(CArrayView(0, 0), [CObject(TreeNode("horizontal", CBool(true), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("Rectangle", CQuote(CCall(CVar("Rectangle", zeroConcertPos), [CObject(TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(1.0), TreeNode("fill", CInt(1115897), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("positionX", CDouble(0.0), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos)), TreeNode("RadioButtons", CCallBuiltin("External", [CText("RadioButtons"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CText("Variable"), TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("items", CArray(CArrayView(0, 0), [CText("Item1"), CDouble(2.0)]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("vertical", CBool(true), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("RoundedRect", CQuote(CCall(CVar("RoundedRect", zeroConcertPos), [CObject(TreeNode("radius", CDouble(10.0), TreeNode("positionX", CDouble(0.0), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("style", CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CDouble(1.0), TreeNode("fill", CInt(4431943), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeEmpty(), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), TreeNode("RotateGraphics", CLambda(["element"], CLet("scaled", CCall(CVar("scaleUpToOwnSize", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CQuote(CCall(CVar("RotateGraphics", zeroConcertPos), [CObject(TreeNode("element", CUnquote(CVar("scaled", zeroConcertPos), zeroConcertPos), TreeNode("angle", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CDouble(0.0), TreeNode("origin", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("ScaleGraphics", CLambda(["element"], CLet("scaled", CCall(CVar("scaleUpToOwnSize", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CQuote(CCall(CVar("ScaleGraphics", zeroConcertPos), [CObject(TreeNode("origin", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("element", CUnquote(CVar("scaled", zeroConcertPos), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("scale", CObject(TreeNode("x", CDouble(1.0), TreeEmpty(), TreeNode("y", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("SetFocusCode", CObject(TreeNode("buildFn", CLambda(["element"], CLet("screenName", CIf(CCall(CVar("isSet", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CText(""), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("screenName", zeroConcertPos), CText("")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CVar("element", zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Call"), CArray(CArrayView(0, 0), [CVar("setFocus", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("screenName", zeroConcertPos)])])], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeNode("elementFn", CLambda([], CLet("current", CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CLet("screenName", CIf(CCall(CVar("isSet", zeroConcertPos), [CVar("current", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CVar("current", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CText(""), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("screenName", zeroConcertPos), CText("")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Call"), CArray(CArrayView(0, 0), [CVar("setFocus", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("screenName", zeroConcertPos)])])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("Set", CQuote(CSet("var", CText("Expression"), zeroConcertPos)), TreeNode("Sequence", CQuote(CSequence([CVar("first", zeroConcertPos), CVar("second", zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeNode("SetFocusButton", CObject(TreeNode("buildFn", CLambda(["element"], CLet("screenName", CIf(CCall(CVar("isSet", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CText(""), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("screenName", zeroConcertPos), CText("")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CVar("element", zeroConcertPos), CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("setFocus", zeroConcertPos), [CVar("screenName", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("raised", CBool(false), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CCallBuiltin("+", [CText("SetFocus "), CVar("screenName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeNode("elementFn", CLambda([], CLet("current", CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CLet("screenName", CIf(CCall(CVar("isSet", zeroConcertPos), [CVar("current", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CVar("current", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CText(""), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("screenName", zeroConcertPos), CText("")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("setFocus", zeroConcertPos), [CVar("screenName", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("raised", CBool(false), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CCallBuiltin("+", [CText("SetFocus "), CVar("screenName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("ShadowedText", CQuote(CCall(CVar("ShadowedText", zeroConcertPos), [CObject(TreeNode("props", CObject(TreeNode("family", CText("RobotoBold"), TreeNode("color", CInt(11141137), TreeEmpty(), TreeEmpty(), 1), TreeNode("size", CDouble(80.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("shadowOpacity", CDouble(0.1), TreeNode("shadowDirection", CObject(TreeNode("x", CDouble(2.0), TreeEmpty(), TreeNode("y", CDouble(2.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), TreeNode("SetWigiVar", CQuote(CCall(CVar("setWigi", zeroConcertPos), [CText("VAR"), CBool(true)], zeroConcertPos)), TreeNode("SetWigiButton", CQuote(CCall(CVar("SetWigiButton", zeroConcertPos), [CObject(TreeNode("value", CText("Expression"), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("wigiVarName", CText("VAR"), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("Slider", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(100.0), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("step", CDouble(0.0), TreeNode("showValue", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Variable"), TreeEmpty(), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeNode("ShearGraphics", CLambda(["element"], CLet("scaled", CCall(CVar("scaleUpToOwnSize", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CQuote(CCall(CVar("ShearGraphics", zeroConcertPos), [CObject(TreeNode("origin", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("element", CUnquote(CVar("scaled", zeroConcertPos), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("shear", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4), 5), TreeNode("Tree", CCallBuiltin("Tree", [CText("Tree"), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeNode("Table", CCallBuiltin("Table", [CArray(CArrayView(0, 0), [CArray(CArrayView(0, 0), [CText("Cell 1x1"), CText("Cell 2x1")]), CArray(CArrayView(0, 0), [CText("Cell 1x2"), CText("Cell 2x2")])])], zeroConcertPos), TreeNode("SubscribeToWigiVar", CQuote(CCall(CVar("wigi", zeroConcertPos), [CText("VAR"), CText("var")], zeroConcertPos)), TreeNode("SubscribeToWigiButton", CQuote(CCall(CVar("SubscribeToWigiButton", zeroConcertPos), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("concertVarName", CText("var"), TreeEmpty(), TreeEmpty(), 1), TreeNode("wigiVarName", CText("VAR"), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Switch", CCallBuiltin("External", [CText("Switch"), CArray(CArrayView(0, 0), [CObject(TreeNode("onLabel", CText("On"), TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("offLabel", CText("Off"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CText("Variable"), TreeNode("tooltip", CText("Tooltip"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("TextButton", CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("raised", CBool(false), TreeNode("fullWidth", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("CLICK"), TreeEmpty(), TreeNode("tooltip", CText(""), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), TreeNode("Text", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("Tooltip", CCallBuiltin("External", [CText("Tooltip"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("box", CText("Box"), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Tooltip"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("TimerElement", CQuote(CCall(CVar("TimerElement", zeroConcertPos), [CObject(TreeNode("duration", CInt(1000), TreeNode("callback", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CText("triggerVarName"), TreeNode("interruptLambdaName", CText("interruptVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("type", CText("interval"), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("TranslateGraphics", CLambda(["element"], CLet("scaled", CCall(CVar("scaleUpToOwnSize", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CQuote(CCall(CVar("TranslateGraphics", zeroConcertPos), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("element", CUnquote(CVar("scaled", zeroConcertPos), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("translate", CObject(TreeNode("x", CDouble(0.0), TreeEmpty(), TreeNode("y", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos)), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), TreeNode("Video", CCallBuiltin("External", [CText("Video"), CArray(CArrayView(0, 0), [CObject(TreeNode("videoURL", CText("URL"), TreeNode("height", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("Unquote", CCallBuiltin("makeCodingStructures", [CText("Unquote"), CArray(CArrayView(0, 0), [CQuote(CVar("var", zeroConcertPos))])], zeroConcertPos), TreeNode("TriggerButton", CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(true)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("raised", CBool(false), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Trigger"), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeNode("Trigger", CLambda(["element"], CCall(CVar("addTriggerToSnippet", zeroConcertPos), [CVar("element", zeroConcertPos), CVar("triggerName", zeroConcertPos), CVar("resultName", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("True", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("UnsubscribeFromWigiVar", CQuote(CCall(CVar("unWigi", zeroConcertPos), [CText("Var"), CText("var")], zeroConcertPos)), TreeNode("UnsubscribeFromWigiButton", CQuote(CCall(CVar("UnsubscribeFromWigiButton", zeroConcertPos), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("concertVarName", CText("var"), TreeEmpty(), TreeEmpty(), 1), TreeNode("wigiVarName", CText("VAR"), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Variable", CCall(CVar("parse", zeroConcertPos), [CText("var")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("Wigi", CCallBuiltin("External", [CText("Wigi"), CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText(""), TreeNode("bindings", CObject(TreeNode("wigiVar1", CText("concertVar1"), TreeEmpty(), TreeNode("wigiVar2", CText("concertVar2"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeNode("WigiEditor", CCallBuiltin("External", [CText("WigiEditor"), CArray(CArrayView(0, 0), [CObject(TreeNode("fillY", CBool(true), TreeNode("fillX", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("textVarName", CText("textVar"), TreeNode("height", CDouble(400.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(400.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 4), 5), 6), 7), 8))),
	];
}

getConcertPairs9() -> [Pair<string, Concert>] {
	[

		Pair("__iter", CLambda(["i", "a", "fn"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("fn", zeroConcertPos), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__iter", zeroConcertPos), [CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("a", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)]), CEmpty(), zeroConcertPos))),
		Pair("__iteri", CLambda(["i", "a", "fn"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("fn", zeroConcertPos), [CVar("i", zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__iteri", zeroConcertPos), [CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("a", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)]), CEmpty(), zeroConcertPos))),
		Pair("__iteriUntil", CLambda(["a", "fn", "i"], CIf(CCallBuiltin("||", [CCallBuiltin("==", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("i", zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("i", zeroConcertPos), CCall(CVar("__iteriUntil", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("fn", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("__map", CLambda(["acc", "i", "xs", "fn"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__map", zeroConcertPos), [CCallBuiltin("replace", [CVar("acc", zeroConcertPos), CVar("i", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("xs", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos))),
		Pair("__mapi", CLambda(["acc", "i", "xs", "fn"], CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__mapi", zeroConcertPos), [CCallBuiltin("replace", [CVar("acc", zeroConcertPos), CVar("i", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("i", zeroConcertPos), CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("xs", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos))),
		Pair("__mergeRec", CLambda(["a", "b", "comparisonFn", "i", "j", "result"], CLet("alen", CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CLet("blen", CCallBuiltin("length", [CVar("b", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin(">=", [CVar("i", zeroConcertPos), CVar("alen", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin(">=", [CVar("j", zeroConcertPos), CVar("blen", zeroConcertPos)], zeroConcertPos), CCallBuiltin("list2array", [CVar("result", zeroConcertPos)], zeroConcertPos), CCall(CVar("__mergeRec", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("b", zeroConcertPos), CVar("comparisonFn", zeroConcertPos), CVar("i", zeroConcertPos), CCallBuiltin("+", [CVar("j", zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("Cons", zeroConcertPos), [CCallBuiltin("index", [CVar("b", zeroConcertPos), CVar("j", zeroConcertPos)], zeroConcertPos), CVar("result", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("||", [CCallBuiltin(">=", [CVar("j", zeroConcertPos), CVar("blen", zeroConcertPos)], zeroConcertPos), CCallBuiltin("<=", [CCall(CVar("comparisonFn", zeroConcertPos), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("b", zeroConcertPos), CVar("j", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__mergeRec", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("b", zeroConcertPos), CVar("comparisonFn", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("j", zeroConcertPos), CCall(CVar("Cons", zeroConcertPos), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CVar("result", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__mergeRec", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("b", zeroConcertPos), CVar("comparisonFn", zeroConcertPos), CVar("i", zeroConcertPos), CCallBuiltin("+", [CVar("j", zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("Cons", zeroConcertPos), [CCallBuiltin("index", [CVar("b", zeroConcertPos), CVar("j", zeroConcertPos)], zeroConcertPos), CVar("result", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("__subrange", CLambda(["acc", "xs", "i", "l"], CIf(CCallBuiltin(">", [CVar("l", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("__subrange", zeroConcertPos), [CCallBuiltin("replace", [CVar("acc", zeroConcertPos), CCallBuiltin("length", [CVar("acc", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("xs", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("xs", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos))),
		Pair("__toolbarMainConfig", CLambda(["editorName"], CObject(TreeNode("clipboard", CObject(TreeNode("paste", CObject(TreeNode("idx", CInt(2), TreeNode("condition", CQuote(CCallBuiltin("!=", [CCallBuiltin("length", [CCallBuiltin("dot", [CVar("toolbarCurrentState", zeroConcertPos), CText("clipboard")], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos)), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("Paste"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("content_paste"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("type", CText("dynamic"), TreeNode("tooltip", CText("Paste"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("cut", CObject(TreeNode("idx", CInt(0), TreeNode("icon", CText("content_cut"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("Cut"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Cut"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("copy", CObject(TreeNode("idx", CInt(1), TreeNode("icon", CText("content_copy"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("Copy"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Copy"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), TreeNode("idx", CInt(2), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("undo", CObject(TreeNode("idx", CInt(3), TreeNode("condition", CQuote(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("toolbarCurrentState", zeroConcertPos), CText("isEmptyUndoStack")], zeroConcertPos), CBool(false)], zeroConcertPos)), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("Undo"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("undo"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("type", CText("dynamic"), TreeNode("tooltip", CText("Undo"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("redo", CObject(TreeNode("idx", CInt(4), TreeNode("condition", CQuote(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("toolbarCurrentState", zeroConcertPos), CText("isEmptyRedoStack")], zeroConcertPos), CBool(false)], zeroConcertPos)), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("Redo"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("redo"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("type", CText("dynamic"), TreeNode("tooltip", CText("Redo"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("asCode", CObject(TreeNode("asCodeOn", CObject(TreeNode("idx", CInt(0), TreeNode("condition", CQuote(CCallBuiltin("!=", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("AsCode")], zeroConcertPos)), TreeNode("action", CLambda([], CLet("convertToAsCode", CLambda(["element"], CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeEmpty(), TreeNode("value", CCall(CVar("makeAsCode", zeroConcertPos), [CVar("element", zeroConcertPos), CDouble(400.0), CDouble(400.0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), CIf(CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("KeyValue")], zeroConcertPos), CLet("path", CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("editorName", zeroConcertPos)], zeroConcertPos), CLet("parentElement", CCall(CVar("getElementOnPath", zeroConcertPos), [CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("editorName", zeroConcertPos)], zeroConcertPos), CCall(CVar("take", zeroConcertPos), [CVar("path", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("length", [CVar("path", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isObject", zeroConcertPos), [CVar("parentElement", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("CursorMovement"), TreeNode("destination", CText("toParent"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos), CCall(CVar("convertToAsCode", zeroConcertPos), [CVar("parentElement", zeroConcertPos)], zeroConcertPos)]), CCall(CVar("convertToAsCode", zeroConcertPos), [CVar("toolbarCurrentElement", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCall(CVar("convertToAsCode", zeroConcertPos), [CVar("toolbarCurrentElement", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("code"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("type", CText("dynamic"), TreeNode("tooltip", CText("To AsCode"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("asCodeOff", CObject(TreeNode("idx", CInt(1), TreeNode("condition", CQuote(CCallBuiltin("||", [CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("AsCode")], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("&&", [CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("Hierarchy")], zeroConcertPos), CCall(CVar("isAsCode", zeroConcertPos), [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("Call")], zeroConcertPos), CCall(CVar("isAsCode", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CVar("toolbarCurrentElement", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), TreeNode("action", CLambda([], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("SaveContent"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CLet("sendOptimizedSaveEvent", CLambda(["value"], CIf(CCallBuiltin("==", [CCallBuiltin("length", [CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("editorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CVar("value", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeEmpty(), TreeNode("value", CVar("value", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos)), CIf(CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("AsCode")], zeroConcertPos), CCall(CVar("sendOptimizedSaveEvent", zeroConcertPos), [CCall(CVar("getVisualElement", zeroConcertPos), [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("parsed")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("Hierarchy")], zeroConcertPos), CLet("headerValue", CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("value")], zeroConcertPos), CIf(CCall(CVar("isAsCode", zeroConcertPos), [CVar("headerValue", zeroConcertPos)], zeroConcertPos), CCall(CVar("sendOptimizedSaveEvent", zeroConcertPos), [CCall(CVar("makeWith", zeroConcertPos), [CVar("toolbarCurrentElement", zeroConcertPos), CObject(TreeNode("value", CCall(CVar("getVisualElement", zeroConcertPos), [CCallBuiltin("dot", [CVar("headerValue", zeroConcertPos), CText("parsed")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("Call")], zeroConcertPos), CLet("parameters", CCallBuiltin("getCodingStructures", [CVar("toolbarCurrentElement", zeroConcertPos)], zeroConcertPos), CLet("headerValue", CCallBuiltin("index", [CVar("parameters", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("argsValue", CCallBuiltin("index", [CVar("parameters", zeroConcertPos), CInt(1)], zeroConcertPos), CIf(CCall(CVar("isAsCode", zeroConcertPos), [CVar("headerValue", zeroConcertPos)], zeroConcertPos), CCall(CVar("sendOptimizedSaveEvent", zeroConcertPos), [CCallBuiltin("makeCodingStructures", [CText("Call"), CArray(CArrayView(0, 0), [CCall(CVar("getVisualElement", zeroConcertPos), [CCallBuiltin("dot", [CVar("headerValue", zeroConcertPos), CText("parsed")], zeroConcertPos)], zeroConcertPos), CVar("argsValue", zeroConcertPos)])], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("println", [CCallBuiltin("+", [CText("Expected CAsCode for fromAsCode, got "), CVar("toolbarCurrentElementType", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("code_off"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("type", CText("dynamic"), TreeNode("tooltip", CText("From AsCode"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), TreeNode("idx", CInt(1), TreeNode("duplicateCode", CObject(TreeNode("idx", CInt(2), TreeNode("condition", CQuote(CCallBuiltin("||", [CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("AsCode")], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("&&", [CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("Hierarchy")], zeroConcertPos), CCall(CVar("isAsCode", zeroConcertPos), [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin("==", [CVar("toolbarCurrentElementType", zeroConcertPos), CText("Call")], zeroConcertPos), CCall(CVar("isAsCode", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CVar("toolbarCurrentElement", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), TreeNode("action", CLambda([], CCall(CVar("getClipboard", zeroConcertPos), [CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["content"], CLet("valueToInsert", CCallBuiltin("makeCodingStructures", [CText("Sequence"), CArray(CArrayView(0, 0), [CArray(CArrayView(0, 0), [CCallBuiltin("AsCode", [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("syntax")], zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("size")], zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("/", [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("size")], zeroConcertPos), CText("height")], zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("AsCode", [CVar("content", zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("size")], zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("/", [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("toolbarCurrentElement", zeroConcertPos), CText("size")], zeroConcertPos), CText("height")], zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)])])], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("length", [CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("editorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CVar("valueToInsert", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeEmpty(), TreeNode("value", CVar("valueToInsert", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("dynamic_feed"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("type", CText("dynamic"), TreeNode("tooltip", CText("Duplicate asCode (copy/cut the fragment and it will be placed in a new code editor)"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), TreeNode("file", CIf(CCallBuiltin("==", [CCall(CVar("getTarget", zeroConcertPos), [], zeroConcertPos), CText("cpp")], zeroConcertPos), CObject(TreeNode("reload", CObject(TreeNode("idx", CInt(2), TreeNode("icon", CText("restore_page"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("LoadDocument"), TreeEmpty(), TreeNode("reload", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Reload file"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("new", CObject(TreeNode("idx", CInt(0), TreeNode("icon", CText("insert_drive_file"), TreeNode("action", CLambda([], CSequence([CSet("__childEditingStack", CCall(CVar("makeList", zeroConcertPos), [], zeroConcertPos), zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("resetFilename", CBool(true), TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("Tree", [CText("Root"), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("New document"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("idx", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("open", CObject(TreeNode("idx", CInt(1), TreeNode("icon", CText("folder_open"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("LoadDocument"), TreeEmpty(), TreeNode("reload", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Open file"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("save", CObject(TreeNode("idx", CInt(3), TreeNode("condition", CQuote(CCallBuiltin("||", [CCallBuiltin("==", [CCallBuiltin("dot", [CVar("toolbarCurrentState", zeroConcertPos), CText("modified")], zeroConcertPos), CBool(true)], zeroConcertPos), CCallBuiltin("==", [CCall(CVar("getTarget", zeroConcertPos), [], zeroConcertPos), CText("js")], zeroConcertPos)], zeroConcertPos)), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("SaveDocument"), TreeEmpty(), TreeNode("saveAs", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("save"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("type", CText("dynamic"), TreeNode("tooltip", CText("Save file"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeNode("saveAs", CObject(TreeNode("idx", CInt(4), TreeNode("icon", CText("save_as"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("SaveDocument"), TreeEmpty(), TreeNode("saveAs", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Save file as"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CObject(TreeNode("new", CObject(TreeNode("idx", CInt(0), TreeNode("icon", CText("insert_drive_file"), TreeNode("action", CLambda([], CSequence([CSet("__childEditingStack", CCall(CVar("makeList", zeroConcertPos), [], zeroConcertPos), zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("resetFilename", CBool(true), TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("Tree", [CText("Root"), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("New document"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("idx", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("open", CObject(TreeNode("idx", CInt(1), TreeNode("icon", CText("restore_page"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("LoadDocument"), TreeEmpty(), TreeNode("reload", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Load from browser local storage"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeNode("save", CObject(TreeNode("idx", CInt(2), TreeNode("icon", CText("save"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("SaveDocument"), TreeEmpty(), TreeNode("saveAs", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Save in browser local storage"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), 2), 3)), zeroConcertPos), TreeNode("content", CObject(TreeNode("insert", CObject(TreeNode("idx", CInt(0), TreeNode("icon", CText("add_box"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("InsertElement"), TreeNode("asChild", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Insert"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("delete", CObject(TreeNode("idx", CInt(3), TreeNode("icon", CText("delete"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("Delete"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Delete"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeNode("changeType", CObject(TreeNode("idx", CInt(2), TreeNode("icon", CText("view_in_ar"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("ChangeType"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Change type"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), TreeNode("idx", CInt(3), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("insertAsChild", CObject(TreeNode("idx", CInt(1), TreeNode("icon", CText("add_to_photos"), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("InsertElement"), TreeNode("asChild", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Insert as child"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), 3)), TreeEmpty(), TreeEmpty(), 1), TreeNode("help", CObject(TreeNode("idx", CInt(4), TreeEmpty(), TreeNode("shortcuts", CObject(TreeNode("idx", CInt(1), TreeNode("icon", CText("help"), TreeNode("action", CLambda([], CCall(CVar("showDialogClose", zeroConcertPos), [CCallBuiltin("Lines", [CCall(CVar("map", zeroConcertPos), [CCall(CVar("getShortcutsInfo", zeroConcertPos), [], zeroConcertPos), CLambda(["obj"], CCallBuiltin("Tree", [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("header")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("content")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("type", CText("button"), TreeNode("tooltip", CText("Show shortcuts"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), 3)))),
		Pair("addPoints", CLambda(["p1", "p2"], CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("+", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("p2", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("p2", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("addTriggerToSnippet", CLambda(["element", "triggerName", "resultName"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("resultName", zeroConcertPos), CBool(false)], zeroConcertPos), CIf(CCallBuiltin("not", [CCall(CVar("isSnippet", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("element", zeroConcertPos), CLet("args", CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CCall(CVar("getObjectKeys", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CText("triggerName")], zeroConcertPos)], zeroConcertPos), CVar("element", zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("resultName", zeroConcertPos), CBool(true)], zeroConcertPos), CCall(CVar("makeSnippet", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("setKeyObj", [CCallBuiltin("index", [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CInt(0)], zeroConcertPos), CText("triggerName"), CVar("triggerName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos)]))),
		Pair("all", CLambda(["a"], CCall(CVar("forall", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("idfn", zeroConcertPos)], zeroConcertPos))),
		Pair("allP", CLambda(["promises"], CIf(CCallBuiltin("!=", [CVar("promises", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resolve", "reject"], CLet("l", CCallBuiltin("length", [CVar("promises", zeroConcertPos)], zeroConcertPos), CLet("resolved", CCall(CVar("createVar", zeroConcertPos), [CInt(0)], zeroConcertPos), CLet("values", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("arrayRepeat", zeroConcertPos), [CCallBuiltin("Empty", [], zeroConcertPos), CVar("l", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("iteri", zeroConcertPos), [CVar("promises", zeroConcertPos), CLambda(["i", "promise"], CCall(CCallBuiltin("dot", [CCall(CCallBuiltin("dot", [CVar("promise", zeroConcertPos), CText("then")], zeroConcertPos), [CLambda(["result"], CSequence([CCall(CVar("updateVar", zeroConcertPos), [CVar("values", zeroConcertPos), CLambda(["v"], CCallBuiltin("replace", [CVar("v", zeroConcertPos), CVar("i", zeroConcertPos), CVar("result", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("updateVar", zeroConcertPos), [CVar("resolved", zeroConcertPos), CLambda(["r"], CCallBuiltin("+", [CVar("r", zeroConcertPos), CInt(1)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getVar", zeroConcertPos), [CVar("resolved", zeroConcertPos)], zeroConcertPos), CVar("l", zeroConcertPos)], zeroConcertPos), CCall(CVar("resolve", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("values", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos)])]))], zeroConcertPos), CText("catch")], zeroConcertPos), [CVar("reject", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resolve", "reject"], CCall(CVar("resolve", zeroConcertPos), [CArray(CArrayView(0, 0), [])], zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
		Pair("any", CLambda(["a"], CCall(CVar("exists", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("idfn", zeroConcertPos)], zeroConcertPos))),
		Pair("apply", CLambda(["fn", "args"], CCall(CVar("eval", zeroConcertPos), [CCall(CVar("object2concert", zeroConcertPos), [CObject(TreeNode("children", CVar("args", zeroConcertPos), TreeNode("__type", CText("Call"), TreeEmpty(), TreeEmpty(), 1), TreeNode("fn", CVar("fn", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)], zeroConcertPos))),
		Pair("applyRecursively", CLambda(["element", "fn"], CLet("applyChildren", CLambda(["children", "wrapFn"], CCall(CVar("wrapFn", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CVar("children", zeroConcertPos), CLambda(["x"], CCall(CVar("applyRecursively", zeroConcertPos), [CVar("x", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), CLet("typeInfo", CCall(CVar("getTypeInfo", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CLet("bname", CCall(CVar("getBuiltinName", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("typeName")], zeroConcertPos), CText("Set")], zeroConcertPos), CLet("cs", CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Set"), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("applyRecursively", zeroConcertPos), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("typeName")], zeroConcertPos), CText("Let")], zeroConcertPos), CLet("cs", CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Let"), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("applyRecursively", zeroConcertPos), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(2)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("typeName")], zeroConcertPos), CText("If")], zeroConcertPos), CLet("cs", CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("If"), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("applyRecursively", zeroConcertPos), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos), CCall(CVar("applyRecursively", zeroConcertPos), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(2)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("typeName")], zeroConcertPos), CText("Formula")], zeroConcertPos), CLet("cs", CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Formula"), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("applyRecursively", zeroConcertPos), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("typeName")], zeroConcertPos), CText("Sequence")], zeroConcertPos), CLet("cs", CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CCall(CVar("applyChildren", zeroConcertPos), [CVar("cs", zeroConcertPos), CLambda(["x"], CCallBuiltin("makeCodingStructures", [CText("Sequence"), CArray(CArrayView(0, 0), [CVar("x", zeroConcertPos)])], zeroConcertPos))], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("isExternal")], zeroConcertPos), CLet("args", CCallBuiltin("index", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos), CLet("name", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("name")], zeroConcertPos), CCall(CVar("applyChildren", zeroConcertPos), [CCallBuiltin("object2array", [CVar("args", zeroConcertPos)], zeroConcertPos), CLambda(["x"], CCallBuiltin("External", [CVar("name", zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("array2object", [CVar("x", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("typeName")], zeroConcertPos), CText("Array")], zeroConcertPos), CCall(CVar("applyChildren", zeroConcertPos), [CVar("element", zeroConcertPos), CLambda(["x"], CVar("x", zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("Lines")], zeroConcertPos), CLet("args", CCall(CVar("getBuiltinArgs", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCall(CVar("applyChildren", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CLambda(["x"], CCallBuiltin("Lines", [CVar("x", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("Tree")], zeroConcertPos), CLet("args", CCall(CVar("getBuiltinArgs", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCall(CVar("applyChildren", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CLambda(["x"], CCallBuiltin("Tree", [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("x", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("Comap")], zeroConcertPos), CLet("args", CCall(CVar("getBuiltinArgs", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCall(CVar("applyChildren", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(1)], zeroConcertPos), CLambda(["x"], CCallBuiltin("Comap", [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("x", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("Table")], zeroConcertPos), CLet("rows", CCallBuiltin("index", [CCall(CVar("getBuiltinArgs", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CIf(CCallBuiltin("||", [CCallBuiltin("not", [CCall(CVar("isArray", zeroConcertPos), [CVar("rows", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CCall(CVar("countA", zeroConcertPos), [CVar("rows", zeroConcertPos), CVar("isArray", zeroConcertPos)], zeroConcertPos), CCallBuiltin("length", [CVar("rows", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("CallBuiltin"), CArray(CArrayView(0, 0), [CText("Table"), CArray(CArrayView(0, 0), [CCall(CVar("applyRecursively", zeroConcertPos), [CVar("rows", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)])])], zeroConcertPos), CCallBuiltin("Table", [CCall(CVar("map", zeroConcertPos), [CVar("rows", zeroConcertPos), CLambda(["row"], CCall(CVar("applyChildren", zeroConcertPos), [CVar("row", zeroConcertPos), CLambda(["x"], CVar("x", zeroConcertPos))], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("arrayPush", CLambda(["arr", "v"], CCallBuiltin("replace", [CVar("arr", zeroConcertPos), CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos))),

	];
}

getConcertPairs10() -> [Pair<string, Concert>] {
	[
		Pair("arrayRepeat", CLambda(["x", "n"], CIf(CCallBuiltin("<=", [CVar("n", zeroConcertPos), CInt(0)], zeroConcertPos), CArray(CArrayView(0, 0), []), CCall(CVar("map", zeroConcertPos), [CCall(CVar("enumFromTo", zeroConcertPos), [CInt(1), CVar("n", zeroConcertPos)], zeroConcertPos), CLambda(["__"], CVar("x", zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
		Pair("basicTypesConfig", CObject(TreeNode("Comap", CObject(TreeNode("include", CArray(CArrayView(0, 0), [CText("value")]), TreeEmpty(), TreeEmpty(), 1)), TreeNode("CanvasCrop", CObject(TreeNode("exclude", CArray(CArrayView(0, 0), [CText("children")]), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("x"), CText("y"), CText("minWidth"), CText("minHeight"), CText("maxWidth"), CText("maxHeight"), CText("scalex"), CText("scaley"), CText("rotation")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("AsCode", CObject(TreeNode("include", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Array", CObject(TreeNode("include", CArray(CArrayView(0, 0), [CText("maxCols"), CText("children")]), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("CallBuiltin", CObject(TreeNode("controls", CObject(TreeNode("name", CObject(TreeNode("control", CVar("PPAutocompleteInputText", zeroConcertPos), TreeNode("args", CObject(TreeNode("dictionary", CCallBuiltin("getBuiltinFunctions", [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("name"), CText("children")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("Call", CObject(TreeNode("controls", CObject(TreeNode("fn", CObject(TreeNode("conditionFn", CVar("isVar", zeroConcertPos), TreeNode("args", CObject(TreeNode("dictionary", CCallBuiltin("concat", [CCallBuiltin("getBuiltinFunctions", [], zeroConcertPos), CCallBuiltin("getLibFunctions", [], zeroConcertPos)], zeroConcertPos), TreeNode("convertInitValueFn", CLambda(["val"], CIf(CCall(CVar("isVar", zeroConcertPos), [CVar("val", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CVar("val", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CVar("val", zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("wrapOnChangeFnFn", CLambda(["onChangeFn"], CLambda(["val"], CCall(CVar("onChangeFn", zeroConcertPos), [CIf(CCall(CVar("isText", zeroConcertPos), [CVar("val", zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CVar("val", zeroConcertPos)])], zeroConcertPos), CVar("val", zeroConcertPos), zeroConcertPos)], zeroConcertPos))), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("control", CVar("PPAutocompleteInputText", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("fn"), CText("args")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Canvas", CObject(TreeNode("exclude", CArray(CArrayView(0, 0), [CText("children")]), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("x"), CText("y"), CText("minWidth"), CText("minHeight"), CText("maxWidth"), CText("maxHeight"), CText("scalex"), CText("scaley"), CText("rotation")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("CanvasScroll", CObject(TreeNode("exclude", CArray(CArrayView(0, 0), [CText("children")]), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("x"), CText("y"), CText("minWidth"), CText("minHeight"), CText("maxWidth"), CText("maxHeight"), CText("scalex"), CText("scaley"), CText("rotation")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("CanvasCustom", CObject(TreeNode("exclude", CArray(CArrayView(0, 0), [CText("children")]), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("x"), CText("y"), CText("minWidth"), CText("minHeight"), CText("maxWidth"), CText("maxHeight"), CText("scalex"), CText("scaley"), CText("rotation"), CText("style")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 4), TreeNode("HTML", CObject(TreeNode("include", CArray(CArrayView(0, 0), [CText("width"), CText("height"), CText("evaluate")]), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Formula", CObject(TreeNode("controls", CObject(TreeNode("value", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Editor", CObject(TreeNode("extendibility", CText("named"), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Graphics", CObject(TreeNode("controls", CObject(TreeNode("dimensionalParameters", CObject(TreeNode("control", CVar("PPDimensionalParameters", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("shape", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("MonacoEditor", CObject(TreeNode("exclude", CArray(CArrayView(0, 0), [CText("value"), CText("width"), CText("height")]), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Let", CObject(TreeNode("controls", CObject(TreeNode("value", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeNode("body", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("name"), CText("value"), CText("body")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("If", CObject(TreeNode("controls", CObject(TreeNode("elsec", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeNode("cond", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("then", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeNode("order", CArray(CArrayView(0, 0), [CText("cond"), CText("then"), CText("elsec")]), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("Set", CObject(TreeNode("controls", CObject(TreeNode("value", CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Sequence", CObject(TreeNode("include", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Tree", CObject(TreeNode("include", CArray(CArrayView(0, 0), [CText("value")]), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), 5))),
		Pair("bindToCurrentDocument", CLambda(["editorName", "varName"], CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("document")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("bindToCurrentElement", CLambda(["editorName", "varName"], CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("cursorElement")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("bindToCurrentPath", CLambda(["editorName", "varName"], CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("cursor")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("bindToEvent", CLambda(["editorName", "varName"], CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("event")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("bindToFocus", CLambda(["editorName", "varName"], CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("focus")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("bindToTrigger", CLambda(["triggerName", "triggered", "untriggered"], CIf(CCallBuiltin("==", [CVar("triggerName", zeroConcertPos), CText("")], zeroConcertPos), CVar("triggered", zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CIf(CCallBuiltin("not", [CCall(CVar("existsVar", zeroConcertPos), [CVar("triggerName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("triggerName", zeroConcertPos), CBool(false)], zeroConcertPos), CEmpty(), zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("triggerName", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos), CVar("triggered", zeroConcertPos)]), CVar("untriggered", zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("triggerName", zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos))),
		Pair("buildAddFieldButtonViewUI", CLambda(["actionFn", "enabledVarName"], CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(8069026), TreeNode("action", CVar("actionFn", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Add field"), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CVar("enabledVarName", zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos))),
		Pair("buildAddNamedFieldViewUI", CLambda(["actionFn", "enabledVarName", "deactivateFnName", "widthName"], CLet("fieldNameVarName", CCall(CVar("createVar", zeroConcertPos), [CText("")], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("deactivate", [CVar("fieldNameVarName", zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CLet("halfWidth", CCall(CVar("select", zeroConcertPos), [CVar("widthName", zeroConcertPos), CLambda(["w"], CCallBuiltin("/", [CVar("w", zeroConcertPos), CDouble(2.0)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("Array", [CObject(TreeNode("baseline", CBool(true), TreeEmpty(), TreeEmpty(), 1)), CArray(CArrayView(0, 0), [CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CVar("fieldNameVarName", zeroConcertPos), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CVar("enabledVarName", zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CVar("halfWidth", zeroConcertPos)], zeroConcertPos), CCall(CVar("buildAddFieldButtonViewUI", zeroConcertPos), [CLambda([], CCall(CVar("actionFn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("fieldNameVarName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CVar("enabledVarName", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos))),
		Pair("buildAddUnnamedFieldViewUI", CLambda(["actionFn", "enabledVarName"], CCall(CVar("buildAddFieldButtonViewUI", zeroConcertPos), [CVar("actionFn", zeroConcertPos), CVar("enabledVarName", zeroConcertPos)], zeroConcertPos))),
		Pair("buildConcertDBSnippetExpanderMenu", CLambda([], CIf(CCall(CVar("isDefined", zeroConcertPos), [CText("ssql")], zeroConcertPos), CLet("itemsVarName", CCall(CVar("createVar", zeroConcertPos), [CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("isOpenedName", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), CSequence([CCall(CCallBuiltin("dot", [CCall(CCallBuiltin("dot", [CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resolve", "reject"], CCall(CVar("ssql", zeroConcertPos), [CQuote(CCall(CVar("filter", zeroConcertPos), [CVar("concert_objects", zeroConcertPos), CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("snippet")], zeroConcertPos)], zeroConcertPos)), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["table"], CIf(CCallBuiltin("<=", [CCallBuiltin("length", [CCallBuiltin("dot", [CVar("table", zeroConcertPos), CText("cells")], zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("reject", zeroConcertPos), [CText("There are no available records in concert_objects")], zeroConcertPos), CCall(CVar("resolve", zeroConcertPos), [CCall(CVar("tail", zeroConcertPos), [CCallBuiltin("dot", [CVar("table", zeroConcertPos), CText("cells")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CVar("reject", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CText("then")], zeroConcertPos), [CLambda(["rows"], CCall(CVar("allP", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CVar("rows", zeroConcertPos), CLambda(["row"], CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resolve", "reject"], CCall(CVar("getOwnRights", zeroConcertPos), [CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["rights"], CCall(CVar("resolve", zeroConcertPos), [CObject(TreeNode("row", CVar("row", zeroConcertPos), TreeNode("rights", CVar("rights", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos))], zeroConcertPos), CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CText("then")], zeroConcertPos), [CLambda(["objects"], CLet("newItems", CCall(CVar("mapi", zeroConcertPos), [CVar("objects", zeroConcertPos), CLambda(["i", "object"], CLet("getSnippetName", CLambda(["codingStructures"], CCall(CVar("firstElement", zeroConcertPos), [CVar("codingStructures", zeroConcertPos), CCallBuiltin("+", [CText("Snippet "), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLet("row", CCallBuiltin("dot", [CVar("object", zeroConcertPos), CText("row")], zeroConcertPos), CLet("deserializedSnippet", CCall(CVar("deserialize", zeroConcertPos), [CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(3)], zeroConcertPos)], zeroConcertPos), CLet("snippetCodingStructures", CCallBuiltin("getCodingStructures", [CVar("deserializedSnippet", zeroConcertPos)], zeroConcertPos), CLet("rights", CCallBuiltin("dot", [CVar("object", zeroConcertPos), CText("rights")], zeroConcertPos), CObject(TreeNode("id", CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(0)], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElement", zeroConcertPos), [CVar("deserializedSnippet", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CObject(TreeNode("isVisible", CBool(true), TreeEmpty(), TreeNode("menu", CCallBuiltin("External", [CText("Menu"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("button", CCallBuiltin("External", [CText("Icon"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("more_vert"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("showDisabledItems", CBool(true), TreeNode("lines", CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("Save as this snippet"), TreeNode("action", CLambda([], CCall(CVar("getObject", zeroConcertPos), [CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["obj"], CLet("currentDocument", CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CLet("newSnippetCodingStructures", CCallBuiltin("getCodingStructures", [CVar("currentDocument", zeroConcertPos)], zeroConcertPos), CCall(CVar("updateObject", zeroConcertPos), [CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["obj"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("isOpenedName", zeroConcertPos), CBool(true)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("itemsVarName", zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("itemsVarName", zeroConcertPos)], zeroConcertPos), CLambda(["item"], CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("id")], zeroConcertPos), CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("item", zeroConcertPos), CObject(TreeNode("action", CLambda([], CCall(CVar("__insertElement", zeroConcertPos), [CVar("currentDocument", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeNode("text", CCall(CVar("getSnippetName", zeroConcertPos), [CVar("newSnippetCodingStructures", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CVar("item", zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("obj", zeroConcertPos), CText("object"), CVar("currentDocument", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CKeyValue("id", CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(0)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("enabled", CCallBuiltin("dot", [CVar("rights", zeroConcertPos), CText("update")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("content", CText("Share snippet"), TreeNode("action", CLambda([], CCall(CVar("shareObject", zeroConcertPos), [CText(""), CObject(TreeNode("id", CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("content", CText("Remove snippet"), TreeNode("action", CLambda([], CCall(CVar("showDialogCustom", zeroConcertPos), [CCallBuiltin("Empty", [], zeroConcertPos), CObject(TreeNode("dialogTitle", CText("Do you want to remove this snippent?"), TreeEmpty(), TreeNode("saveTitle", CText("REMOVE"), TreeEmpty(), TreeEmpty(), 1), 2)), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["__"], CCall(CVar("deleteObject", zeroConcertPos), [CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["res"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("isOpenedName", zeroConcertPos), CBool(true)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("itemsVarName", zeroConcertPos), CCall(CVar("filter", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("itemsVarName", zeroConcertPos)], zeroConcertPos), CLambda(["item"], CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("id")], zeroConcertPos), CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CKeyValue("id", CCallBuiltin("index", [CVar("row", zeroConcertPos), CInt(0)], zeroConcertPos))], zeroConcertPos))], zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["__"], CObject(TreeEmpty()))], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("enabled", CCallBuiltin("dot", [CVar("rights", zeroConcertPos), CText("delete")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CCall(CVar("getSnippetName", zeroConcertPos), [CVar("snippetCodingStructures", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("itemsVarName", zeroConcertPos), CVar("newItems", zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("isOpenedName", CVar("isOpenedName", zeroConcertPos), TreeNode("header", CText("DB-stored Snippets"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CCall(CVar("getVar", zeroConcertPos), [CVar("itemsVarName", zeroConcertPos)], zeroConcertPos), TreeNode("isVisible", CCall(CVar("isDefined", zeroConcertPos), [CText("ssql")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("itemsVarName", zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos))),
		Pair("buildDropDownMutable", CLambda(["arr"], CLet("fn", CLambda(["varName", "value"], CLet("idxVar", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("idxVar", zeroConcertPos), CCall(CVar("findi", zeroConcertPos), [CVar("arr", zeroConcertPos), CLambda(["v"], CCallBuiltin("==", [CVar("v", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos)), CInt(0)], zeroConcertPos)], zeroConcertPos), CSequence([CSet("extraVars", CCall(CVar("arrayPush", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("idxVar", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CSet("formulas", CCall(CVar("arrayPush", zeroConcertPos), [CVar("formulas", zeroConcertPos), CVar("fname", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("toLowerCase", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("arr", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("idxVar", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("index", [CVar("arr", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("idxVar", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("idxVar", zeroConcertPos)])], zeroConcertPos), CCallBuiltin("External", [CText("DropDown"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CVar("idxVar", zeroConcertPos), TreeNode("items", CCall(CVar("concatStrings", zeroConcertPos), [CCall(CVar("interleave", zeroConcertPos), [CVar("arr", zeroConcertPos), CText("\n ")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos)])]), zeroConcertPos)])]), zeroConcertPos)), CVar("fn", zeroConcertPos), zeroConcertPos))),
		Pair("buildEditingBlockViewUI", CLambda(["editingBlock", "widthName"], CVar("editingBlock", zeroConcertPos))),
		Pair("buildLabelFieldViewUI", CLambda(["label", "field", "widthName"], CCallBuiltin("Array", [CObject(TreeNode("baseline", CBool(true), TreeEmpty(), TreeNode("framed", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2)), CArray(CArrayView(0, 0), [CCall(CVar("Group", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("label", zeroConcertPos), CCall(CVar("FixedWidth", zeroConcertPos), [CDouble(50.0)], zeroConcertPos)])], zeroConcertPos), CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CVar("field", zeroConcertPos), CCall(CVar("select", zeroConcertPos), [CVar("widthName", zeroConcertPos), CLambda(["w"], CCallBuiltin("-", [CVar("w", zeroConcertPos), CDouble(50.0)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)])], zeroConcertPos))),
		Pair("buildNestedElementViewUI", CLambda(["header", "getEditingBlocksFn", "widthName"], CCall(CVar("AvailableSizedWidth", zeroConcertPos), [CCallBuiltin("External", [CText("Expander"), CArray(CArrayView(0, 0), [CObject(TreeNode("header", CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("size", CDouble(14.0), TreeNode("family", CText("RobotoBold"), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CVar("header", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("color", CInt(0), TreeNode("alignedToBaseLine", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("details", CLambda([], CCallBuiltin("Lines", [CCall(CVar("getEditingBlocksFn", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), CVar("widthName", zeroConcertPos)], zeroConcertPos))),
		Pair("buildPropPanelViewUI", CLambda(["header", "blockGroupsObj", "editorWidthName"], CLet("makeFramedGroup", CLambda(["content"], CCallBuiltin("External", [CText("Frame"), CArray(CArrayView(0, 0), [CObject(TreeNode("margin", CDouble(8.0), TreeNode("content", CCall(CVar("Group", zeroConcertPos), [CArray(CArrayView(0, 0), [CCall(CVar("SizedWidth", zeroConcertPos), [CCall(CVar("select", zeroConcertPos), [CVar("editorWidthName", zeroConcertPos), CLambda(["ew"], CCallBuiltin("+", [CVar("ew", zeroConcertPos), CDouble(56.0)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CVar("content", zeroConcertPos)])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("radius", CDouble(4.0), TreeEmpty(), TreeNode("style", CArray(CArrayView(0, 0), [CCallBuiltin("Fill", [CInt(15461355)], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)), CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("text", CVar("header", zeroConcertPos), TreeNode("size", CDouble(20.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("isEmptyObject", [CCallBuiltin("dot", [CVar("blockGroupsObj", zeroConcertPos), CText("named")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("blockGroupsObj", zeroConcertPos), CText("unnamed")], zeroConcertPos), CText("def")], zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCallBuiltin("Lines", [CCall(CVar("interleave", zeroConcertPos), [CCallBuiltin("concat", [CCall(CVar("getObjectValues", zeroConcertPos), [CCall(CVar("mapObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("blockGroupsObj", zeroConcertPos), CText("named")], zeroConcertPos), CLambda(["groupKv"], CLet("groupName", CCallBuiltin("dot", [CVar("groupKv", zeroConcertPos), CText("key")], zeroConcertPos), CLet("groupHeader", CIf(CCallBuiltin("==", [CVar("groupName", zeroConcertPos), CText("")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCallBuiltin("External", [CText("StyledText"), CArray(CArrayView(0, 0), [CObject(TreeNode("size", CDouble(16.0), TreeNode("family", CText("RobotoMedium"), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CVar("groupName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), zeroConcertPos), CCall(CVar("makeFramedGroup", zeroConcertPos), [CCallBuiltin("Lines", [CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CVar("groupHeader", zeroConcertPos)]), CCallBuiltin("dot", [CVar("groupKv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCall(CVar("getObjectValues", zeroConcertPos), [CCall(CVar("mapObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("blockGroupsObj", zeroConcertPos), CText("unnamed")], zeroConcertPos), CLambda(["groupKv"], CCall(CVar("makeFramedGroup", zeroConcertPos), [CCallBuiltin("Lines", [CCallBuiltin("dot", [CVar("groupKv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("FixedHeight", zeroConcertPos), [CDouble(4.0)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos)])], zeroConcertPos), zeroConcertPos))),
		Pair("buildTextOrDoubleMutable", CLambda([], CLet("fn", CLambda(["varName", "value"], CLet("svalue", CCall(CVar("unparse", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CLet("textVarName", CCall(CVar("createVar", zeroConcertPos), [CIf(CCall(CVar("isDouble", zeroConcertPos), [CVar("svalue", zeroConcertPos)], zeroConcertPos), CVar("svalue", zeroConcertPos), CVar("value", zeroConcertPos), zeroConcertPos)], zeroConcertPos), CSequence([CSet("extraVars", CCall(CVar("arrayPush", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("textVarName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CSet("formulas", CCall(CVar("arrayPush", zeroConcertPos), [CVar("formulas", zeroConcertPos), CVar("fname", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CLet("tv", CCall(CVar("getVar", zeroConcertPos), [CVar("textVarName", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isDouble", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("s2d", [CVar("tv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("tv", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("textVarName", zeroConcertPos)])], zeroConcertPos), CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CText(""), TreeNode("editIcon", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("textVarName", zeroConcertPos), TreeNode("style", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)])]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos)), CVar("fn", zeroConcertPos), zeroConcertPos))),
		Pair("calculateAngles", CLambda(["points"], CLet("l", CCallBuiltin("length", [CVar("points", zeroConcertPos)], zeroConcertPos), CCall(CVar("mapi", zeroConcertPos), [CVar("points", zeroConcertPos), CLambda(["i", "p"], CLet("points", CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("points", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("points", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("points", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("points", zeroConcertPos), CInt(0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("points", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("points", zeroConcertPos), CInt(1)], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), CLet("vertex", CCallBuiltin("index", [CVar("points", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("q", CCallBuiltin("index", [CVar("points", zeroConcertPos), CInt(1)], zeroConcertPos), CLet("vectorA", CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("-", [CCallBuiltin("dot", [CVar("vertex", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("dot", [CVar("vertex", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("vectorB", CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("-", [CCallBuiltin("dot", [CVar("vertex", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("q", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("dot", [CVar("vertex", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("q", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("ROUND", [CCallBuiltin("ACOSINUS", [CCallBuiltin("/", [CCall(CVar("dotProduct2D", zeroConcertPos), [CVar("vectorA", zeroConcertPos), CVar("vectorB", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCall(CVar("lengthVector", zeroConcertPos), [CVar("vectorA", zeroConcertPos)], zeroConcertPos), CCall(CVar("lengthVector", zeroConcertPos), [CVar("vectorB", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CInt(6)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
		Pair("calculateSidesLengths", CLambda(["points"], CLet("l", CCallBuiltin("length", [CVar("points", zeroConcertPos)], zeroConcertPos), CLet("r", CLambda(["v"], CCallBuiltin("ROUND", [CVar("v", zeroConcertPos), CInt(6)], zeroConcertPos)), CCall(CVar("mapi", zeroConcertPos), [CVar("points", zeroConcertPos), CLambda(["i", "p"], CIf(CCallBuiltin("!=", [CVar("i", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CCall(CVar("r", zeroConcertPos), [CCall(CVar("distance", zeroConcertPos), [CVar("p", zeroConcertPos), CCallBuiltin("index", [CVar("points", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("r", zeroConcertPos), [CCall(CVar("distance", zeroConcertPos), [CVar("p", zeroConcertPos), CCallBuiltin("index", [CVar("points", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("concat3", CLambda(["a1", "a2", "a3"], CIf(CCallBuiltin("<", [CCallBuiltin("length", [CVar("a1", zeroConcertPos)], zeroConcertPos), CCallBuiltin("length", [CVar("a3", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("concat", [CCallBuiltin("concat", [CVar("a1", zeroConcertPos), CVar("a2", zeroConcertPos)], zeroConcertPos), CVar("a3", zeroConcertPos)], zeroConcertPos), CCallBuiltin("concat", [CVar("a1", zeroConcertPos), CCallBuiltin("concat", [CVar("a2", zeroConcertPos), CVar("a3", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("concatA", CLambda(["xs"], CCall(CVar("fold", zeroConcertPos), [CVar("xs", zeroConcertPos), CArray(CArrayView(0, 0), []), CLambda(["acc", "x"], CCallBuiltin("concat", [CVar("acc", zeroConcertPos), CVar("x", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("concatStrings", CLambda(["strings"], CCallBuiltin("list2string", [CCall(CVar("fold", zeroConcertPos), [CVar("strings", zeroConcertPos), CCall(CVar("makeList", zeroConcertPos), [], zeroConcertPos), CLambda(["acc", "str"], CCall(CVar("Cons", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("acc", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos))),
		Pair("connect", CLambda(["src", "target"], CCall(CVar("subscribe0", zeroConcertPos), [CVar("src", zeroConcertPos), CLambda(["v"], CCall(CVar("set", zeroConcertPos), [CVar("target", zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("connect2", CLambda(["src", "target"], CCall(CVar("subscribe2", zeroConcertPos), [CVar("src", zeroConcertPos), CLambda(["v"], CCall(CVar("set", zeroConcertPos), [CVar("target", zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("connectSelect", CLambda(["src", "target", "fn"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("target", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("src", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("subscribe2", zeroConcertPos), [CVar("src", zeroConcertPos), CLambda(["v"], CCall(CVar("set", zeroConcertPos), [CVar("target", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)]))),
		Pair("contains", CLambda(["arr", "v"], CCallBuiltin("!=", [CCall(CVar("elemIndex", zeroConcertPos), [CVar("arr", zeroConcertPos), CVar("v", zeroConcertPos), CInt(-1)], zeroConcertPos), CInt(-1)], zeroConcertPos))),
		Pair("countA", CLambda(["arr", "fn"], CCall(CVar("fold", zeroConcertPos), [CVar("arr", zeroConcertPos), CInt(0), CLambda(["cnt", "e"], CIf(CCall(CVar("fn", zeroConcertPos), [CVar("e", zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("cnt", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("cnt", zeroConcertPos), zeroConcertPos))], zeroConcertPos))),
		Pair("countUntil", CLambda(["start", "maxcount", "predicate"], CIf(CCallBuiltin(">=", [CVar("start", zeroConcertPos), CVar("maxcount", zeroConcertPos)], zeroConcertPos), CVar("maxcount", zeroConcertPos), CIf(CCall(CVar("predicate", zeroConcertPos), [CVar("start", zeroConcertPos)], zeroConcertPos), CVar("start", zeroConcertPos), CCall(CVar("countUntil", zeroConcertPos), [CCallBuiltin("+", [CVar("start", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("maxcount", zeroConcertPos), CVar("predicate", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}
/*
getConcertPairs11() -> [Pair<string, Concert>] {
	[
		Pair("createArrayNestedView", CLambda(["name", "element", "enabledVarName", "saveFn", "saveAndUpdateFn", "deactivateFnName", "commonVarName", "baseWidthName", "nestingLevel", "style"], CLet("props", CCallBuiltin("setKeyObj", [CCallBuiltin("array2object", [CCall(CVar("mapi", zeroConcertPos), [CVar("element", zeroConcertPos), CLambda(["i", "v"], CCallBuiltin("makeKeyValue", [CCallBuiltin("+", [CText("item#"), CVar("i", zeroConcertPos)], zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CText("__type"), CText("Object")], zeroConcertPos), CLet("elementConfig", CCall(CVar("getArrayNestedConfig", zeroConcertPos), [CVar("props", zeroConcertPos), CVar("enabledVarName", zeroConcertPos)], zeroConcertPos), CLet("element2array", CLambda(["v"], CCall(CVar("getObjectValues", zeroConcertPos), [CCall(CVar("props2element", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLet("getEditingBlocksFn", CLambda([], CCall(CVar("createEditingBlocksView", zeroConcertPos), [CVar("elementConfig", zeroConcertPos), CVar("enabledVarName", zeroConcertPos), CLambda(["v"], CCall(CVar("saveFn", zeroConcertPos), [CCallBuiltin("quote", [CCall(CVar("element2array", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLambda(["v"], CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCallBuiltin("quote", [CCall(CVar("element2array", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CCall(CVar("select", zeroConcertPos), [CVar("baseWidthName", zeroConcertPos), CLambda(["baseWidth"], CCallBuiltin("-", [CVar("baseWidth", zeroConcertPos), CDouble(56.0)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("+", [CVar("nestingLevel", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos)), CCall(CVar("buildNestedElementViewUI", zeroConcertPos), [CVar("name", zeroConcertPos), CVar("getEditingBlocksFn", zeroConcertPos), CVar("baseWidthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("createButton", CLambda(["ic", "fn", "tooltip"], CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(7171437), TreeNode("action", CVar("fn", zeroConcertPos), TreeEmpty(), TreeNode("buttonBorder", CDouble(8.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("icon", CVar("ic", zeroConcertPos), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CVar("tooltip", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos))),
		Pair("createButtonDynamic", CLambda(["ic", "fn", "tooltip", "condition"], CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(7171437), TreeNode("action", CVar("fn", zeroConcertPos), TreeEmpty(), TreeNode("buttonBorder", CDouble(8.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("icon", CVar("ic", zeroConcertPos), TreeNode("enabled", CVar("condition", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CVar("tooltip", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)), CArray(CArrayView(0, 0), [])], zeroConcertPos))),
		Pair("createConcertToolbars", CLambda(["mainEditorName", "style"], CSequence([CSet("toolbarCurrentState", CObject(TreeNode("isEmptyUndoStack", CCallBuiltin("Empty", [], zeroConcertPos), TreeNode("clipboard", CCallBuiltin("Empty", [], zeroConcertPos), TreeEmpty(), TreeNode("isEmptyRedoStack", CCallBuiltin("Empty", [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("modified", CCallBuiltin("Empty", [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)), zeroConcertPos), CSequence([CSet("toolbarCurrentElement", CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CLambda(["state"], CSequence([CSet("toolbarCurrentState", CObject(TreeNode("isEmptyUndoStack", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("isEmptyUndoStack")], zeroConcertPos), TreeNode("clipboard", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("clipboard")], zeroConcertPos), TreeEmpty(), TreeNode("isEmptyRedoStack", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("isEmptyRedoStack")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("modified", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("modified")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)), zeroConcertPos), CSet("toolbarCurrentElement", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("cursorElement")], zeroConcertPos), zeroConcertPos)]))], zeroConcertPos), CSequence([CFormula("toolbarCurrentElementType", CCall(CVar("getType", zeroConcertPos), [CVar("toolbarCurrentElement", zeroConcertPos)], zeroConcertPos)), CLet("ascIdxObjSort", CLambda(["obj"], CCall(CVar("mergeSort", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CLambda(["f", "s"], CLet("idxF", CCallBuiltin("getKeyObjDef", [CCallBuiltin("dot", [CVar("f", zeroConcertPos), CText("value")], zeroConcertPos), CText("idx"), CInt(-1)], zeroConcertPos), CLet("idxS", CCallBuiltin("getKeyObjDef", [CCallBuiltin("dot", [CVar("s", zeroConcertPos), CText("value")], zeroConcertPos), CText("idx"), CInt(-1)], zeroConcertPos), CIf(CCallBuiltin(">", [CVar("idxF", zeroConcertPos), CVar("idxS", zeroConcertPos)], zeroConcertPos), CInt(1), CInt(0), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos)), CSequence([CSet("commonBuilderFn", CLambda(["globalConf", "localConf"], CCall(CVar("mergeObjCustom", zeroConcertPos), [CVar("globalConf", zeroConcertPos), CVar("localConf", zeroConcertPos), CLambda(["__", "globalBlock", "localBlock"], CCall(CVar("mergeObjCustom", zeroConcertPos), [CVar("globalBlock", zeroConcertPos), CVar("localBlock", zeroConcertPos), CLambda(["str", "globalItem", "localItem"], CIf(CCallBuiltin("!=", [CVar("str", zeroConcertPos), CText("idx")], zeroConcertPos), CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("globalItem", zeroConcertPos), CVar("localItem", zeroConcertPos)], zeroConcertPos), CVar("localItem", zeroConcertPos), zeroConcertPos))], zeroConcertPos))], zeroConcertPos)), zeroConcertPos), CLet("specifiedConfig", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("toolbarConfigObj"), CLambda(["x"], CObject(TreeEmpty()))], zeroConcertPos), CLet("configBuilderFn", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("toolbarConfigFn"), CVar("commonBuilderFn", zeroConcertPos)], zeroConcertPos), CLet("buttonStyles", CCall(CVar("configBuilderFn", zeroConcertPos), [CCall(CVar("__toolbarMainConfig", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos)], zeroConcertPos), CCall(CVar("specifiedConfig", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("ascIdxObjSort", zeroConcertPos), [CVar("buttonStyles", zeroConcertPos)], zeroConcertPos), CLambda(["buttonBlockKV"], CCall(CVar("map", zeroConcertPos), [CCall(CVar("filter", zeroConcertPos), [CCall(CVar("ascIdxObjSort", zeroConcertPos), [CCallBuiltin("dot", [CVar("buttonBlockKV", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CLambda(["el"], CCallBuiltin("&&", [CCallBuiltin("not", [CCall(CVar("isInt", zeroConcertPos), [CCallBuiltin("dot", [CVar("el", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("el", zeroConcertPos), CText("value")], zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLambda(["buttonKeyVal"], CLet("style", CCallBuiltin("dot", [CVar("buttonKeyVal", zeroConcertPos), CText("value")], zeroConcertPos), CLet("buttonType", CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("type")], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("buttonType", zeroConcertPos), CText("button")], zeroConcertPos), CCall(CVar("createButton", zeroConcertPos), [CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("icon")], zeroConcertPos), CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("action")], zeroConcertPos), CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("tooltip")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("buttonType", zeroConcertPos), CText("dynamic")], zeroConcertPos), CCall(CVar("createButtonDynamic", zeroConcertPos), [CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("icon")], zeroConcertPos), CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("action")], zeroConcertPos), CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("tooltip")], zeroConcertPos), CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("condition")], zeroConcertPos)], zeroConcertPos), CCall(CVar("createIconMenuButton", zeroConcertPos), [CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("icon")], zeroConcertPos), CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("lines")], zeroConcertPos), CCallBuiltin("dot", [CVar("style", zeroConcertPos), CText("tooltip")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos)])])])]))),
		Pair("createDefaultMutObj", CLambda(["propsObj", "vars", "oldObj"], CLet("pvalue", CCall(CVar("mapObj", zeroConcertPos), [CVar("propsObj", zeroConcertPos), CLambda(["kv"], CCall(CVar("getMutable", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("vars", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CQuote(CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)), CCall(CVar("getType", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCall(CVar("mapObj", zeroConcertPos), [CVar("oldObj", zeroConcertPos), CLambda(["kv"], CCall(CVar("getKeyObj", zeroConcertPos), [CVar("pvalue", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
		Pair("createEditingBlockView", CLambda(["getProp", "enabledVarName", "saveFn", "saveAndUpdateFn", "deactivateFnName", "commonVarName", "requiredControlVarName", "menuItems", "baseWidthName", "nestingLevel", "style", "idxInPanel"], CLet("makeIndividualComponentView", CLambda(["key", "value", "type"], CCall(CVar("getEditingBlock", zeroConcertPos), [CVar("key", zeroConcertPos), CVar("value", zeroConcertPos), CVar("type", zeroConcertPos), CVar("enabledVarName", zeroConcertPos), CLambda(["v"], CCall(CVar("saveFn", zeroConcertPos), [CCallBuiltin("quote", [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLambda(["v"], CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCallBuiltin("quote", [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("requiredControlVarName", zeroConcertPos)], zeroConcertPos), CVar("baseWidthName", zeroConcertPos), CVar("nestingLevel", zeroConcertPos)], zeroConcertPos)), CLet("block", CIf(CCallBuiltin("==", [CVar("menuItems", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("prop", CCall(CVar("getProp", zeroConcertPos), [], zeroConcertPos), CLet("propkey", CCallBuiltin("dot", [CVar("prop", zeroConcertPos), CText("key")], zeroConcertPos), CLet("propvalue", CCallBuiltin("dot", [CVar("prop", zeroConcertPos), CText("value")], zeroConcertPos), CLet("type", CCall(CVar("getType", zeroConcertPos), [CVar("propvalue", zeroConcertPos)], zeroConcertPos), CCall(CVar("makeIndividualComponentView", zeroConcertPos), [CVar("propkey", zeroConcertPos), CVar("propvalue", zeroConcertPos), CVar("type", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CLet("prop", CCall(CVar("getProp", zeroConcertPos), [], zeroConcertPos), CLet("propkey", CCallBuiltin("dot", [CVar("prop", zeroConcertPos), CText("key")], zeroConcertPos), CLet("propvalue", CCallBuiltin("dot", [CVar("prop", zeroConcertPos), CText("value")], zeroConcertPos), CLet("type", CCall(CVar("getType", zeroConcertPos), [CVar("propvalue", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CCall(CVar("getVar", zeroConcertPos), [CVar("requiredControlVarName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("makeIndividualComponentView", zeroConcertPos), [CVar("propkey", zeroConcertPos), CVar("propvalue", zeroConcertPos), CVar("type", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Object")], zeroConcertPos), CCall(CVar("createObjectNestedView", zeroConcertPos), [CVar("propkey", zeroConcertPos), CVar("propvalue", zeroConcertPos), CVar("enabledVarName", zeroConcertPos), CVar("saveFn", zeroConcertPos), CVar("saveAndUpdateFn", zeroConcertPos), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CVar("baseWidthName", zeroConcertPos), CVar("nestingLevel", zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Array")], zeroConcertPos), CCall(CVar("createArrayNestedView", zeroConcertPos), [CVar("propkey", zeroConcertPos), CVar("propvalue", zeroConcertPos), CVar("enabledVarName", zeroConcertPos), CVar("saveFn", zeroConcertPos), CVar("saveAndUpdateFn", zeroConcertPos), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CVar("baseWidthName", zeroConcertPos), CVar("nestingLevel", zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos), CCall(CVar("makeIndividualComponentView", zeroConcertPos), [CVar("propkey", zeroConcertPos), CVar("propvalue", zeroConcertPos), CVar("type", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("requiredControlVarName", zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Array", [CObject(TreeNode("baseline", CBool(true), TreeEmpty(), TreeEmpty(), 1)), CArray(CArrayView(0, 0), [CCall(CVar("FixedHeight", zeroConcertPos), [CIf(CCallBuiltin("&&", [CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__size"), CText("style")]), CCallBuiltin("dot", [CCall(CVar("getProp", zeroConcertPos), [], zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CVar("idxInPanel", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CDouble(64.0), CDouble(0.0), zeroConcertPos)], zeroConcertPos), CVar("block", zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("menuItems", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Menu"), CArray(CArrayView(0, 0), [CObject(TreeNode("enabled", CBool(true), TreeNode("button", CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CObject(TreeEmpty())), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("more_vert"), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("lines", CVar("menuItems", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CVar("menuItems", zeroConcertPos), zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("createEditingBlocksView", CLambda(["config", "enabledVarName", "saveFn", "saveAndUpdateFn", "deactivateFnName", "commonVarName", "baseWidthName", "nestingLevel", "style"], CLet("propsValuesArr", CCall(CVar("mergeSort", zeroConcertPos), [CCallBuiltin("object2array", [CCallBuiltin("dot", [CVar("config", zeroConcertPos), CText("props")], zeroConcertPos)], zeroConcertPos), CLambda(["x", "y"], CLet("order", CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("order"), CArray(CArrayView(0, 0), [])], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("order", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCallBuiltin("-", [CCall(CVar("elemIndex", zeroConcertPos), [CVar("order", zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CInt(-1)], zeroConcertPos), CCall(CVar("elemIndex", zeroConcertPos), [CVar("order", zeroConcertPos), CCallBuiltin("dot", [CVar("y", zeroConcertPos), CText("key")], zeroConcertPos), CInt(-1)], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("config", zeroConcertPos), CText("orderFn")], zeroConcertPos), CCall(CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("orderFn"), CLambda(["__"], CInt(0))], zeroConcertPos), [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CInt(0), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CLet("currentPropsArrName", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CVar("propsValuesArr", zeroConcertPos), CLambda(["kv"], CLet("propInfo", CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CLet("isEnabled", CCallBuiltin("||", [CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("propInfo", zeroConcertPos), CText("propType")], zeroConcertPos), CText("disableable")], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("propInfo", zeroConcertPos), CText("enabledVarName")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("name", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), TreeNode("info", CVar("propInfo", zeroConcertPos), TreeEmpty(), TreeNode("isEnabledVar", CCall(CVar("createVar", zeroConcertPos), [CVar("isEnabled", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("value", CCallBuiltin("dot", [CVar("propInfo", zeroConcertPos), CText("value")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)), zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CLet("getPropsToSave", CLambda([], CLet("obj", CCallBuiltin("array2object", [CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos)], zeroConcertPos), CLambda(["cp"], CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("cp", zeroConcertPos), CText("name")], zeroConcertPos), CCallBuiltin("dot", [CVar("cp", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCall(CVar("mergeObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CCallBuiltin("dot", [CVar("config", zeroConcertPos), CText("typeProps")], zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("makeMenuItems", CLambda(["key", "propConfig", "propDisabledStateVar"], CLet("propType", CCallBuiltin("dot", [CVar("propConfig", zeroConcertPos), CText("propType")], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("propType", zeroConcertPos), CText("removable")], zeroConcertPos), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("Remove field"), TreeNode("action", CLambda([], CSequence([CCall(CVar("updateVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos), CLambda(["cp"], CCall(CVar("filter", zeroConcertPos), [CVar("cp", zeroConcertPos), CLambda(["c"], CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("c", zeroConcertPos), CText("name")], zeroConcertPos), CVar("key", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))], zeroConcertPos), CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCall(CVar("getPropsToSave", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeNode("enabled", CCall(CVar("ppblocksBuildVarOrDef", zeroConcertPos), [CVar("enabledVarName", zeroConcertPos), CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("content", CCallBuiltin("Empty", [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))]), CIf(CCallBuiltin("==", [CVar("propType", zeroConcertPos), CText("fixed")], zeroConcertPos), CArray(CArrayView(0, 0), []), CLet("toggleVarName", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("propConfig", zeroConcertPos), CText("enabledVarName")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("actionFn", CLambda(["enable"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("propDisabledStateVar", zeroConcertPos), CVar("enable", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("iter", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos)], zeroConcertPos), CLambda(["cp"], CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("cp", zeroConcertPos), CText("name")], zeroConcertPos), CVar("key", zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("cp", zeroConcertPos), CText("isEnabledVar")], zeroConcertPos), CVar("enable", zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos), CCall(CVar("saveFn", zeroConcertPos), [CCall(CVar("getPropsToSave", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos)])])), CLet("uns", CCall(CVar("subscribe2", zeroConcertPos), [CVar("toggleVarName", zeroConcertPos), CVar("actionFn", zeroConcertPos)], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("toggleVarName", zeroConcertPos)], zeroConcertPos), CCall(CVar("uns", zeroConcertPos), [], zeroConcertPos)])]))], zeroConcertPos), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("Toggle field"), TreeNode("action", CLambda([], CCall(CVar("updateVar", zeroConcertPos), [CVar("toggleVarName", zeroConcertPos), CLambda(["v"], CCallBuiltin("not", [CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("content", CCallBuiltin("Empty", [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("getPropControl", CLambda(["controlObj", "value"], CIf(CCallBuiltin("!=", [CVar("controlObj", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("conditionFn", CCallBuiltin("getKeyObjDef", [CVar("controlObj", zeroConcertPos), CText("conditionFn"), CLambda(["__"], CBool(true))], zeroConcertPos), CIf(CCall(CVar("conditionFn", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CVar("controlObj", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos)), CLet("editingBlocksObj", CCall(CVar("mapi", zeroConcertPos), [CVar("propsValuesArr", zeroConcertPos), CLambda(["i", "propkv"], CLet("propkey", CCallBuiltin("dot", [CVar("propkv", zeroConcertPos), CText("key")], zeroConcertPos), CLet("propConfig", CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("dot", [CVar("propkv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CLet("propvalue", CCallBuiltin("dot", [CVar("propConfig", zeroConcertPos), CText("value")], zeroConcertPos), CLet("propConfigControl", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("propConfig", zeroConcertPos), CText("control")], zeroConcertPos), CLet("currentControl", CCall(CVar("getPropControl", zeroConcertPos), [CVar("propConfigControl", zeroConcertPos), CVar("propvalue", zeroConcertPos)], zeroConcertPos), CLet("currentControlName", CCall(CVar("createVar", zeroConcertPos), [CVar("currentControl", zeroConcertPos)], zeroConcertPos), CLet("propDisabledStateVar", CCallBuiltin("getKeyObjDef", [CVar("propConfig", zeroConcertPos), CText("enabledVarName"), CText("")], zeroConcertPos), CCall(CVar("buildEditingBlockViewUI", zeroConcertPos), [CCall(CVar("createEditingBlockView", zeroConcertPos), [CLambda([], CCallBuiltin("makeKeyValue", [CVar("propkey", zeroConcertPos), CCallBuiltin("dot", [CCall(CVar("find", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos)], zeroConcertPos), CLambda(["cp"], CCallBuiltin("==", [CCallBuiltin("dot", [CVar("cp", zeroConcertPos), CText("name")], zeroConcertPos), CVar("propkey", zeroConcertPos)], zeroConcertPos)), CVar("propvalue", zeroConcertPos)], zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)), CVar("propDisabledStateVar", zeroConcertPos), CLambda(["value"], CLet("newProps", CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos)], zeroConcertPos), CLambda(["cp"], CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("cp", zeroConcertPos), CText("name")], zeroConcertPos), CVar("propkey", zeroConcertPos)], zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("cp", zeroConcertPos), CText("value"), CVar("value", zeroConcertPos)], zeroConcertPos), CVar("cp", zeroConcertPos), zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos), CVar("newProps", zeroConcertPos)], zeroConcertPos), CCall(CVar("saveFn", zeroConcertPos), [CCall(CVar("getPropsToSave", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos)]), zeroConcertPos)), CLambda(["value"], CLet("newProps", CCall(CVar("map", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos)], zeroConcertPos), CLambda(["cp"], CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("cp", zeroConcertPos), CText("name")], zeroConcertPos), CVar("propkey", zeroConcertPos)], zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("cp", zeroConcertPos), CText("value"), CVar("value", zeroConcertPos)], zeroConcertPos), CVar("cp", zeroConcertPos), zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos), CVar("newProps", zeroConcertPos)], zeroConcertPos), CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCall(CVar("getPropsToSave", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos)]), zeroConcertPos)), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CVar("currentControlName", zeroConcertPos), CIf(CCallBuiltin("getKeyObjDef", [CVar("propConfigControl", zeroConcertPos), CText("showMenu"), CBool(true)], zeroConcertPos), CLet("editAsMenuItems0", CCall(CVar("generateEditAsMenuItems2", zeroConcertPos), [CVar("propvalue", zeroConcertPos), CVar("currentControlName", zeroConcertPos), CVar("currentControl", zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos), CLet("editAsMenuItems", CIf(CCallBuiltin("==", [CCallBuiltin("length", [CVar("editAsMenuItems0", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CArray(CArrayView(0, 0), []), CVar("editAsMenuItems0", zeroConcertPos), zeroConcertPos), CLet("menuItems", CCallBuiltin("concat", [CCall(CVar("makeMenuItems", zeroConcertPos), [CVar("propkey", zeroConcertPos), CVar("propConfig", zeroConcertPos), CVar("propDisabledStateVar", zeroConcertPos)], zeroConcertPos), CVar("editAsMenuItems", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("menuItems", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CVar("menuItems", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CVar("baseWidthName", zeroConcertPos), CVar("nestingLevel", zeroConcertPos), CVar("style", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CVar("baseWidthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("deactivate", [CVar("currentPropsArrName", zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("config", zeroConcertPos), CText("extendibility")], zeroConcertPos), CText("none")], zeroConcertPos), CVar("editingBlocksObj", zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("editingBlocksObj", zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("config", zeroConcertPos), CText("extendibility")], zeroConcertPos), CText("named")], zeroConcertPos), CCall(CVar("buildAddNamedFieldViewUI", zeroConcertPos), [CLambda(["fieldName"], CSequence([CCall(CVar("updateVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos), CLambda(["cp"], CCall(CVar("arrayPush", zeroConcertPos), [CVar("cp", zeroConcertPos), CObject(TreeNode("name", CVar("fieldName", zeroConcertPos), TreeNode("isEnabledVar", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CText("NewProp"), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))], zeroConcertPos), CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCall(CVar("getPropsToSave", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos)])), CVar("enabledVarName", zeroConcertPos), CVar("deactivateFnName", zeroConcertPos), CCall(CVar("select", zeroConcertPos), [CVar("baseWidthName", zeroConcertPos), CLambda(["baseWidth"], CCallBuiltin("+", [CVar("baseWidth", zeroConcertPos), CDouble(40.0)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCall(CVar("buildAddUnnamedFieldViewUI", zeroConcertPos), [CLambda([], CSequence([CCall(CVar("updateVar", zeroConcertPos), [CVar("currentPropsArrName", zeroConcertPos), CLambda(["cp"], CCall(CVar("arrayPush", zeroConcertPos), [CVar("cp", zeroConcertPos), CObject(TreeNode("name", CText("item#new"), TreeNode("isEnabledVar", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CText("NewProp"), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))], zeroConcertPos), CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCall(CVar("getPropsToSave", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos)])), CVar("enabledVarName", zeroConcertPos)], zeroConcertPos), zeroConcertPos)], zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("createExampleExtraButtonDescription", CLambda(["name"], CObject(TreeNode("icon", CText("open_in_new"), TreeNode("action", CLambda([], CCall(CVar("insertBlockFromDB", zeroConcertPos), [CQuote(CCall(CVar("limit", zeroConcertPos), [CInt(1), CCall(CVar("filter", zeroConcertPos), [CVar("concert_objects", zeroConcertPos), CCallBuiltin("==", [CVar("type", zeroConcertPos), CUnquote(CVar("name", zeroConcertPos), zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Insert a documentation example"), TreeNode("isVisible", CVar("__showExamples", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)))),
		Pair("createExternalPanel", CLambda(["panelTitle", "dropArea", "pIcon", "width", "pContent", "btnsA", "editorName", "elementNameVarName"], CCallBuiltin("setKeyObj", [CCall(CVar("createPanel", zeroConcertPos), [CVar("panelTitle", zeroConcertPos), CVar("dropArea", zeroConcertPos), CVar("pIcon", zeroConcertPos), CVar("width", zeroConcertPos), CVar("pContent", zeroConcertPos), CVar("btnsA", zeroConcertPos)], zeroConcertPos), CText("externalPanel"), CObject(TreeNode("elementNameVarName", CVar("elementNameVarName", zeroConcertPos), TreeNode("editorName", CVar("editorName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos))),
		Pair("createIconMenuButton", CLambda(["ic", "lines", "tooltip"], CCallBuiltin("External", [CText("Menu"), CArray(CArrayView(0, 0), [CObject(TreeNode("lines", CVar("lines", zeroConcertPos), TreeNode("button", CCall(CVar("createButton", zeroConcertPos), [CVar("ic", zeroConcertPos), CVar("nop", zeroConcertPos), CText("")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CVar("tooltip", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos))),

	];
}

getConcertPairs12() -> [Pair<string, Concert>] {
	[
		Pair("createInsertPanel", CLambda(["editorName", "insertPanelViewName", "showExamples", "highlights"], CSequence([CSet("__insertPanelView", CCall(CVar("getVar", zeroConcertPos), [CVar("insertPanelViewName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CSet("__insertPanelViewQuoted", CCallBuiltin("quote", [CCall(CVar("getVar", zeroConcertPos), [CVar("insertPanelViewName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CQuote(CSequence([CSet("__usersInput", CText(""), zeroConcertPos), CSequence([CSet("__choosedVal", CText(""), zeroConcertPos), CSequence([CSet("__showExamples", CUnquote(CCallBuiltin("&&", [CVar("showExamples", zeroConcertPos), CCall(CVar("isDefined", zeroConcertPos), [CText("ssql")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CSequence([CSet("__highlights", CUnquote(CVar("highlights", zeroConcertPos), zeroConcertPos), zeroConcertPos), CSequence([CSet("__editorName", CUnquote(CVar("editorName", zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("typeDependentActions", CLambda(["regularFn", "ascodeFn"], CIf(CCall(CVar("isAsCode", zeroConcertPos), [CVar("insertPanelCurrentElement", zeroConcertPos)], zeroConcertPos), CCall(CVar("ascodeFn", zeroConcertPos), [], zeroConcertPos), CCall(CVar("regularFn", zeroConcertPos), [], zeroConcertPos), zeroConcertPos)), CLet("namesActionArr", CCall(CVar("fold", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("dot", [CCallBuiltin("getCodingStructuresObj", [CUnquote(CVar("__insertPanelViewQuoted", zeroConcertPos), zeroConcertPos)], zeroConcertPos), CText("children")], zeroConcertPos), CInt(0)], zeroConcertPos), CArray(CArrayView(0, 0), []), CLambda(["acc", "struct"], CLet("currentStruct", CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("getCodingStructuresObj", [CVar("struct", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("argsObj", CCall(CVar("firstElement", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("currentStruct", zeroConcertPos), CText("children")], zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("currentStruct", zeroConcertPos), CText("function")], zeroConcertPos), CLet("currentNamesActions", CIf(CCallBuiltin("&&", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("argsObj", zeroConcertPos), CText("items")], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("not", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("argsObj", zeroConcertPos), CText("isVisible")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("argsObj", zeroConcertPos), CText("isVisible")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("filter", zeroConcertPos), [CCallBuiltin("dot", [CVar("argsObj", zeroConcertPos), CText("items")], zeroConcertPos), CLambda(["itm"], CCallBuiltin("||", [CCallBuiltin("not", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("itm", zeroConcertPos), CText("isVisible")], zeroConcertPos)], zeroConcertPos), CCall(CVar("getKeyObj", zeroConcertPos), [CVar("itm", zeroConcertPos), CText("isVisible")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLambda(["item"], CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("text")], zeroConcertPos), CCallBuiltin("dot", [CVar("item", zeroConcertPos), CText("action")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CArray(CArrayView(0, 0), []), zeroConcertPos), CCallBuiltin("concatA", [CArray(CArrayView(0, 0), [CVar("acc", zeroConcertPos), CVar("currentNamesActions", zeroConcertPos)])], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("currentStruct", zeroConcertPos), CText("name")], zeroConcertPos), CText("Table")], zeroConcertPos), CLet("currentButtons", CCallBuiltin("concatA", [CVar("argsObj", zeroConcertPos)], zeroConcertPos), CLet("currentButtonsNamesAction", CCall(CVar("map", zeroConcertPos), [CVar("currentButtons", zeroConcertPos), CLambda(["button"], CIf(CCallBuiltin("!=", [CVar("button", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("buttonAgrsObj", CCallBuiltin("index", [CCallBuiltin("dot", [CVar("button", zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("buttonAgrsObj", zeroConcertPos), CText("tooltip")], zeroConcertPos), CCallBuiltin("dot", [CVar("buttonAgrsObj", zeroConcertPos), CText("action")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos), CCallBuiltin("concatA", [CArray(CArrayView(0, 0), [CVar("acc", zeroConcertPos), CVar("currentButtonsNamesAction", zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CLet("namesActionObj", CCallBuiltin("array2object", [CVar("namesActionArr", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("subscribe2", zeroConcertPos), [CText("__choosedVal"), CLambda(["val"], CIf(CCallBuiltin("!=", [CVar("val", zeroConcertPos), CText("")], zeroConcertPos), CCall(CCall(CVar("getKeyObj", zeroConcertPos), [CVar("namesActionObj", zeroConcertPos), CVar("val", zeroConcertPos)], zeroConcertPos), [], zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos), CSequence([CSet("nameArr", CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("namesActionObj", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("__insertElement", CLambda(["element"], CCall(CVar("typeDependentActions", zeroConcertPos), [CQuote(CQuote(CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("InsertElement"), TreeEmpty(), TreeNode("value", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)))), CQuote(CQuote(CLambda([], CCall(CVar("setClipboard", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos))))], zeroConcertPos)), CSequence([CSet("__insertElementByName", CLambda(["name"], CLet("res", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("__insertPanelConfig", zeroConcertPos), CVar("name", zeroConcertPos)], zeroConcertPos), CLet("element", CCall(CVar("eval", zeroConcertPos), [CIf(CCallBuiltin("not", [CCall(CVar("isObject", zeroConcertPos), [CVar("res", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("res", zeroConcertPos), CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("element")], zeroConcertPos), zeroConcertPos)], zeroConcertPos), CCall(CVar("__insertElement", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos)), zeroConcertPos), CLet("insertBlockFromDB", CLambda(["query"], CCall(CVar("ssql", zeroConcertPos), [CVar("query", zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["val"], CIf(CCallBuiltin(">", [CCallBuiltin("length", [CVar("val", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CLet("element", CCall(CVar("deserialize", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("index", [CVar("val", zeroConcertPos), CInt(1)], zeroConcertPos), CInt(3)], zeroConcertPos)], zeroConcertPos), CCall(CVar("typeDependentActions", zeroConcertPos), [CQuote(CQuote(CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("InsertElement"), TreeEmpty(), TreeNode("value", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)))), CQuote(CQuote(CLambda([], CCall(CVar("setClipboard", zeroConcertPos), [CIf(CCall(CVar("isAsCode", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("parsed")], zeroConcertPos), CVar("element", zeroConcertPos), zeroConcertPos)], zeroConcertPos))))], zeroConcertPos), zeroConcertPos), CCallBuiltin("println", [CText("Empty query result")], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["err"], CCallBuiltin("println", [CVar("err", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), CSequence([CSet("__insertElementAsSiblingByName", CLambda(["name"], CLet("res", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("__insertPanelConfig", zeroConcertPos), CVar("name", zeroConcertPos)], zeroConcertPos), CLet("def", CLambda(["element"], CCall(CVar("typeDependentActions", zeroConcertPos), [CQuote(CQuote(CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("InsertElement"), TreeNode("asChild", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CVar("element", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)))), CLambda([], CObject(TreeEmpty()))], zeroConcertPos)), CIf(CCallBuiltin("not", [CCall(CVar("isObject", zeroConcertPos), [CVar("res", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("def", zeroConcertPos), [CVar("res", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("value", CCall(CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("buildFn")], zeroConcertPos), [CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("value", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeEmpty(), TreeNode("value", CVar("value", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos), CLet("elementFn", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("res", zeroConcertPos), CText("elementFn")], zeroConcertPos), CLet("element", CIf(CCallBuiltin("==", [CVar("elementFn", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("element")], zeroConcertPos), CCall(CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("elementFn")], zeroConcertPos), [], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("element", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("def", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), zeroConcertPos), CSequence([CSet("__wrapIntoElementByName", CLambda(["name"], CLet("res", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("__insertPanelConfig", zeroConcertPos), CVar("name", zeroConcertPos)], zeroConcertPos), CLet("buildResultFn", CIf(CCallBuiltin("not", [CCall(CVar("isObject", zeroConcertPos), [CVar("res", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("res", zeroConcertPos), CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("buildFn")], zeroConcertPos), zeroConcertPos), CCall(CVar("typeDependentActions", zeroConcertPos), [CQuote(CQuote(CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeEmpty(), TreeNode("value", CCall(CVar("buildResultFn", zeroConcertPos), [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)))), CQuote(CQuote(CLambda([], CCall(CVar("getClipboard", zeroConcertPos), [CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["current"], CCall(CVar("setClipboard", zeroConcertPos), [CCall(CVar("buildResultFn", zeroConcertPos), [CCall(CVar("parse", zeroConcertPos), [CVar("current", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos))))], zeroConcertPos), zeroConcertPos), zeroConcertPos)), zeroConcertPos), CSequence([CSet("__wrapManyIntoElementByName", CLambda(["n", "name"], CLet("res", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("__insertPanelConfig", zeroConcertPos), CVar("name", zeroConcertPos)], zeroConcertPos), CLet("buildResultFn", CIf(CCallBuiltin("not", [CCall(CVar("isObject", zeroConcertPos), [CVar("res", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("res", zeroConcertPos), CCallBuiltin("dot", [CVar("res", zeroConcertPos), CText("buildFn")], zeroConcertPos), zeroConcertPos), CCall(CVar("typeDependentActions", zeroConcertPos), [CQuote(CQuote(CLambda([], CLet("elements", CCall(CVar("getNActiveElements", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos), CLet("currentElementPath", CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CLet("selectedNonCursorElementsPaths", CCall(CVar("filter", zeroConcertPos), [CCall(CVar("getCurrentSelection", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CLambda(["p"], CCallBuiltin("!=", [CVar("p", zeroConcertPos), CVar("currentElementPath", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeEmpty(), TreeNode("value", CCall(CVar("buildResultFn", zeroConcertPos), [CQuote(CVar("elements", zeroConcertPos))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("selectedNonCursorElementsPaths", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("Delete"), TreeEmpty(), TreeNode("paths", CVar("selectedNonCursorElementsPaths", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CEmpty(), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos)))), CLambda([], CObject(TreeEmpty()))], zeroConcertPos), zeroConcertPos), zeroConcertPos)), zeroConcertPos), CSequence([CSet("__getHintMarkerByName", CLambda(["name"], CCallBuiltin("getKeyObjDef", [CVar("__highlights", zeroConcertPos), CVar("name", zeroConcertPos), CBool(false)], zeroConcertPos)), zeroConcertPos), CSequence([CSet("__getExtraButtonHintMarkerByName", CLambda(["name"], CCallBuiltin("getKeyObjDef", [CCallBuiltin("getKeyObjDef", [CVar("__highlights", zeroConcertPos), CText("extraButtons"), CObject(TreeEmpty())], zeroConcertPos), CVar("name", zeroConcertPos), CBool(false)], zeroConcertPos)), zeroConcertPos), CSequence([CCall(CVar("bindToCurrentElement", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CText("insertPanelCurrentElement")], zeroConcertPos), CFormula("insertPanelValue", CIf(CCall(CVar("isAsCode", zeroConcertPos), [CVar("insertPanelCurrentElement", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("Tooltip"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("box", CCall(CVar("eval", zeroConcertPos), [CUnquote(CVar("__insertPanelView", zeroConcertPos), zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("The syntax will be copied to the clipboard"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCall(CVar("eval", zeroConcertPos), [CUnquote(CVar("__insertPanelView", zeroConcertPos), zeroConcertPos)], zeroConcertPos), zeroConcertPos))])])])])])]), zeroConcertPos)]), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos)])])])])]))])]))),
		Pair("createNewPropPanel", CLambda(["editorName", "currentElementTypeName", "commonVarName"], CSequence([CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CLambda(["state"], CCall(CVar("set", zeroConcertPos), [CVar("currentElementTypeName", zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("length", [CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("elements")], zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("getHeaderName", zeroConcertPos), [CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("cursorElement")], zeroConcertPos)], zeroConcertPos), CText("Empty"), zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CQuote(CSequence([CSet("__editorName", CUnquote(CVar("editorName", zeroConcertPos), zeroConcertPos), zeroConcertPos), CSequence([CSet("__editorWH", CObject(TreeNode("width", CInt(0), TreeNode("height", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos), CSequence([CCall(CVar("bindToEditorWH", zeroConcertPos), [CText("__editorWH")], zeroConcertPos), CLet("editorWidthName", CCall(CVar("select", zeroConcertPos), [CText("__editorWH"), CLambda(["wh"], CCallBuiltin("-", [CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("width")], zeroConcertPos), CDouble(96.0)], zeroConcertPos))], zeroConcertPos), CLet("saveElement", CLambda(["value"], CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeEmpty(), TreeNode("value", CVar("value", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), CSequence([CSet("propPanelEventFlag", CBool(false), zeroConcertPos), CSequence([CSet("currentElementStored", CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CLet("deactivateFnName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CVar("nop", zeroConcertPos)], zeroConcertPos), CLet("deactivateAll", CLambda([], CCall(CVar("call", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos)), CSequence([CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CLambda(["state"], CIf(CCallBuiltin("not", [CVar("propPanelEventFlag", zeroConcertPos)], zeroConcertPos), CLet("elements", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("elements")], zeroConcertPos), CIf(CCallBuiltin(">", [CCallBuiltin("length", [CVar("elements", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CSequence([CCall(CVar("deactivateAll", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CVar("nop", zeroConcertPos)], zeroConcertPos), CSet("propPanelValue", CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos)])]), CLet("currentElement", CCallBuiltin("index", [CVar("elements", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("headerName", CCall(CVar("getHeaderName", zeroConcertPos), [CVar("currentElement", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("not", [CCall(CVar("isExternalPanelDefined", zeroConcertPos), [CVar("headerName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("currentElement", zeroConcertPos), CVar("currentElementStored", zeroConcertPos)], zeroConcertPos), CSequence([CSet("currentElementStored", CVar("currentElement", zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("deactivateAll", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CVar("nop", zeroConcertPos)], zeroConcertPos), CLet("customPropPanel", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("customPropPanels", zeroConcertPos), CVar("headerName", zeroConcertPos)], zeroConcertPos), CSet("propPanelValue", CIf(CCallBuiltin("!=", [CVar("customPropPanel", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("buildPropPanelViewUI", zeroConcertPos), [CVar("headerName", zeroConcertPos), CObject(TreeNode("named", CObject(TreeEmpty()), TreeEmpty(), TreeNode("unnamed", CObject(TreeNode("def", CArray(CArrayView(0, 0), [CCall(CVar("eval", zeroConcertPos), [CVar("customPropPanel", zeroConcertPos)], zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2)), CVar("editorWidthName", zeroConcertPos)], zeroConcertPos), CCall(CVar("createPropPanelView", zeroConcertPos), [CVar("currentElement", zeroConcertPos), CLambda(["value"], CSequence([CSet("propPanelEventFlag", CBool(true), zeroConcertPos), CSequence([CSet("currentElementStored", CVar("value", zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("saveElement", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CSet("propPanelEventFlag", CBool(false), zeroConcertPos)])])])), CLambda(["value"], CCall(CVar("saveElement", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos)), CVar("deactivateFnName", zeroConcertPos), CUnquote(CVar("commonVarName", zeroConcertPos), zeroConcertPos), CVar("editorWidthName", zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)])])]), CEmpty(), zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos), CFormula("propPanelValueF", CVar("propPanelValue", zeroConcertPos))]), zeroConcertPos)]), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos)])])]))]))),
		Pair("createNewPropPanelForValue", CLambda(["valueName", "commonVarName", "style"], CSequence([CSet("__editorWH", CObject(TreeNode("width", CInt(0), TreeNode("height", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos), CSequence([CCall(CVar("bindToEditorWH", zeroConcertPos), [CText("__editorWH")], zeroConcertPos), CLet("editorWidthName", CCall(CVar("select", zeroConcertPos), [CText("__editorWH"), CLambda(["wh"], CCallBuiltin("-", [CCallBuiltin("dot", [CVar("wh", zeroConcertPos), CText("width")], zeroConcertPos), CDouble(96.0)], zeroConcertPos))], zeroConcertPos), CLet("saveElement", CLambda(["value"], CCall(CVar("set", zeroConcertPos), [CVar("valueName", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos)), CSequence([CSet("propPanelEventFlag", CBool(false), zeroConcertPos), CLet("deactivateFnName", CCall(CVar("createVar", zeroConcertPos), [CVar("nop", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("addEnvCallback", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CVar("call", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos))], zeroConcertPos), CCall(CVar("createPropPanelView", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("valueName", zeroConcertPos)], zeroConcertPos), CLambda(["value"], CSequence([CSet("propPanelEventFlag", CBool(true), zeroConcertPos), CSequence([CCall(CVar("saveElement", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CSet("propPanelEventFlag", CBool(false), zeroConcertPos)])])), CLambda(["value"], CCall(CVar("saveElement", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos)), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CVar("editorWidthName", zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos)])]))),
		Pair("createObjectNestedView", CLambda(["name", "element", "enabledVarName", "saveFn", "saveAndUpdateFn", "deactivateFnName", "commonVarName", "baseWidthName", "nestingLevel", "style"], CLet("props", CCall(CVar("element2props", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CLet("elementConfig", CCall(CVar("getObjectNestedConfig", zeroConcertPos), [CVar("props", zeroConcertPos), CVar("enabledVarName", zeroConcertPos)], zeroConcertPos), CLet("getEditingBlocksFn", CLambda([], CCall(CVar("createEditingBlocksView", zeroConcertPos), [CVar("elementConfig", zeroConcertPos), CVar("enabledVarName", zeroConcertPos), CLambda(["v"], CCall(CVar("saveFn", zeroConcertPos), [CCall(CVar("props2element", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLambda(["v"], CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCall(CVar("props2element", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CCall(CVar("select", zeroConcertPos), [CVar("baseWidthName", zeroConcertPos), CLambda(["baseWidth"], CCallBuiltin("-", [CVar("baseWidth", zeroConcertPos), CDouble(56.0)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("+", [CVar("nestingLevel", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos)), CCall(CVar("buildNestedElementViewUI", zeroConcertPos), [CVar("name", zeroConcertPos), CVar("getEditingBlocksFn", zeroConcertPos), CVar("baseWidthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("createPanel", CLambda(["panelTitle", "dropArea", "pIcon", "width", "pContent", "btnsA"], CObject(TreeNode("title", CVar("panelTitle", zeroConcertPos), TreeNode("dockedArea", CVar("dropArea", zeroConcertPos), TreeNode("content", CCall(CVar("serialize", zeroConcertPos), [CVar("pContent", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeNode("customTopbarButtons", CVar("btnsA", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("height", CDouble(300.0), TreeNode("dockedPosition", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CVar("pIcon", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("type", CText("DockingPanel"), TreeEmpty(), TreeNode("width", CVar("width", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 4)))),
		Pair("createPreviewPanel", CLambda(["panelTitle", "dropArea", "pIcon", "width", "editorName", "editorVarName"], CSequence([CSet("autoupdate", CBool(false), zeroConcertPos), CSequence([CSet("previewUpdateTrigger", CBool(false), zeroConcertPos), CSequence([CSet("previewPanelValue", CText("Not evaluated"), zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CText("autoupdateF"), CLambda([], CIf(CVar("autoupdate", zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("SaveContent"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CSet("previewPanelValue", CCall(CVar("getVar", zeroConcertPos), [CVar("editorVarName", zeroConcertPos)], zeroConcertPos), zeroConcertPos)]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("editorVarName", zeroConcertPos)])], zeroConcertPos), CSequence([CSet("fullscreenPreviewValue", CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(4539717), TreeNode("action", CLambda([], CSet("closePreview", CBool(true), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("close"), TreeEmpty(), TreeNode("tooltip", CText("Close"), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(4539717), TreeNode("action", CLambda([], CSet("refreshPreview", CCallBuiltin("not", [CVar("refreshPreview", zeroConcertPos)], zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("refresh"), TreeEmpty(), TreeNode("tooltip", CText("Refresh"), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("name", CCallBuiltin("+", [CVar("editorName", zeroConcertPos), CText("_previewRunner_fullscreen")], zeroConcertPos), TreeNode("isRunner", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("varName", CVar("editorVarName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), CLet("fullscreenShortcut", CIf(CCall(CVar("isMacOS", zeroConcertPos), [], zeroConcertPos), CText("Ctrl+Alt+E"), CText("F11"), zeroConcertPos), CLet("fullscreenTooltip", CCallBuiltin("+", [CCallBuiltin("+", [CText("Fullscreen preview ("), CIf(CCall(CVar("isMacOS", zeroConcertPos), [], zeroConcertPos), CText("⌘⌥E"), CText("F11"), zeroConcertPos)], zeroConcertPos), CText(")")], zeroConcertPos), CLet("previewPanelTopButtons", CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconToggle"), CArray(CArrayView(0, 0), [CObject(TreeNode("iconFalse", CText("sync_disabled"), TreeNode("color", CInt(7171437), TreeNode("buttonBorder", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("sync"), TreeNode("enabled", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("var", CText("autoupdate"), TreeNode("shortcut", CText(""), TreeEmpty(), TreeNode("tooltip", CText("Auto-update"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(20.0), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("play_arrow"), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("SaveContent"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CSequence([CIf(CCallBuiltin("==", [CCall(CVar("getVar", zeroConcertPos), [CVar("editorVarName", zeroConcertPos)], zeroConcertPos), CVar("previewPanelValue", zeroConcertPos)], zeroConcertPos), CSet("previewUpdateTrigger", CCallBuiltin("not", [CVar("previewUpdateTrigger", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos), CSet("previewPanelValue", CCall(CVar("getVar", zeroConcertPos), [CVar("editorVarName", zeroConcertPos)], zeroConcertPos), zeroConcertPos)])])), TreeEmpty(), TreeEmpty(), 1), TreeNode("color", CInt(7171437), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(20.0), TreeNode("tooltip", CText("Run"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("stop"), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("disposeEnv", zeroConcertPos), [CCallBuiltin("+", [CVar("editorName", zeroConcertPos), CText("_previewRunner_panel")], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("color", CInt(7171437), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(20.0), TreeNode("tooltip", CText("Stop"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("fullscreen"), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("SaveContent"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CSequence([CSet("closePreview", CBool(false), zeroConcertPos), CSequence([CSet("refreshPreview", CBool(false), zeroConcertPos), CCall(CVar("showDialog", zeroConcertPos), [CText("fullscreenPreviewValue"), CText("closePreview"), CText("refreshPreview"), CArray(CArrayView(0, 0), [CVar("editorVarName", zeroConcertPos)])], zeroConcertPos)])])])), TreeEmpty(), TreeEmpty(), 1), TreeNode("color", CInt(7171437), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("shortcutPreventDefault", CBool(true), TreeNode("shortcut", CVar("fullscreenShortcut", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(20.0), TreeNode("tooltip", CVar("fullscreenTooltip", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4))])], zeroConcertPos)]), CCall(CVar("createPanel", zeroConcertPos), [CVar("panelTitle", zeroConcertPos), CVar("dropArea", zeroConcertPos), CVar("pIcon", zeroConcertPos), CVar("width", zeroConcertPos), CFormula("previewF", CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("name", CCallBuiltin("+", [CVar("__mainEditorName", zeroConcertPos), CText("_previewRunner_panel")], zeroConcertPos), TreeNode("isRunner", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("varName", CText("previewPanelValue"), TreeNode("notReal", CArray(CArrayView(0, 0), [CVar("previewPanelValue", zeroConcertPos), CVar("previewUpdateTrigger", zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)), CVar("previewPanelTopButtons", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)])])])])]))),
		Pair("createPropPanel", CLambda(["editorName", "curElementFull"], CLet("typeUpdatesChildren", CLambda(["x"], CLet("type", CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CCallBuiltin("||", [CCall(CVar("isExternal", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CCallBuiltin("||", [CCall(CVar("isSnippet", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("&&", [CCall(CVar("isCodingStructure", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CVar("type", zeroConcertPos), CText("CallBuiltin")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("HTML")], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("KeyValue")], zeroConcertPos), CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Object")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CSequence([CSet("extraVars", CArray(CArrayView(0, 0), []), zeroConcertPos), CSequence([CSet("baseVars", CArray(CArrayView(0, 0), []), zeroConcertPos), CSequence([CIf(CCall(CVar("existsVar", zeroConcertPos), [CText("formulas")], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CVar("formulas", zeroConcertPos), CVar("deactivate", zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos), CSequence([CSet("formulas", CArray(CArrayView(0, 0), []), zeroConcertPos), CSequence([CSet("blockUpdatesFlag", CBool(true), zeroConcertPos), CLet("curObj", CCall(CVar("getElementProps", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos), CSequence([CIf(CCall(CVar("existsVar", zeroConcertPos), [CText("compare")], zeroConcertPos), CCallBuiltin("deactivate", [CText("compare")], zeroConcertPos), CEmpty(), zeroConcertPos), CIf(CCallBuiltin("!=", [CCall(CVar("getHeaderName", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos), CText("PrimeGraphics")], zeroConcertPos), CCall(CVar("makePropTree", zeroConcertPos), [CIf(CCall(CVar("isSnippet", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CCallBuiltin("dot", [CVar("curElementFull", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CText("Set")], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CCallBuiltin("dot", [CVar("curElementFull", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("curElementFull", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CIf(CCall(CVar("isHierarchy", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CCall(CVar("concert2object", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos), CText("view")], zeroConcertPos), CCall(CVar("getHeaderName", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CCall(CVar("makePropsArrMutable", zeroConcertPos), [CVar("curElementFull", zeroConcertPos), CVar("curObj", zeroConcertPos), CLambda(["toSave"], CIf(CVar("blockUpdatesFlag", zeroConcertPos), CSequence([CSet("propPanelEventFlag", CBool(true), zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeNode("keepChildren", CCallBuiltin("not", [CCall(CVar("typeUpdatesChildren", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CVar("toSave", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("None"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CSet("propPanelEventFlag", CBool(false), zeroConcertPos)])])]), CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeNode("keepChildren", CCallBuiltin("not", [CCall(CVar("typeUpdatesChildren", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CVar("toSave", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Tree", [CText("PrimeGraphics"), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("EDIT PRIME"), TreeNode("action", CLambda([], CLet("contentVar", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("filterObj", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("dot", [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("editorName", zeroConcertPos)], zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("positionX"), CText("positionY")]), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCall(CVar("showDialogCustom", zeroConcertPos), [CCallBuiltin("External", [CText("PrimeGraphicsEditor"), CArray(CArrayView(0, 0), [CObject(TreeNode("contentVarName", CVar("contentVar", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), CObject(TreeNode("fullScreen", CBool(true), TreeEmpty(), TreeEmpty(), 1)), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["__"], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeNode("keepChildren", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("External", [CText("PrimeGraphics"), CArray(CArrayView(0, 0), [CCall(CVar("getVar", zeroConcertPos), [CVar("contentVar", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CCallBuiltin("deactivate", [CVar("contentVar", zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["__"], CCallBuiltin("deactivate", [CVar("contentVar", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos)])], zeroConcertPos), zeroConcertPos)]), zeroConcertPos)])])])])]), zeroConcertPos))),

	];
}

getConcertPairs13() -> [Pair<string, Concert>] {
	[
		Pair("createPropPanelView", CLambda(["element", "saveFn", "saveAndUpdateFn", "deactivateFnName", "commonVarName", "widthName", "style"], CLet("props", CCall(CVar("element2props", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CLet("header", CIf(CCall(CVar("contains", zeroConcertPos), [CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("props", zeroConcertPos)], zeroConcertPos), CText("__subtype")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__subtype")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__type")], zeroConcertPos), zeroConcertPos), CLet("elementConfig", CCall(CVar("getElementConfig", zeroConcertPos), [CVar("props", zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CCall(CVar("iterObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("elementConfig", zeroConcertPos), CText("props")], zeroConcertPos), CLambda(["kv"], CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CText("enabledVarName")], zeroConcertPos), CCallBuiltin("deactivate", [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CText("enabledVarName")], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos)]))], zeroConcertPos), CLet("combinedConfig", CIf(CCallBuiltin("not", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("elementConfig", zeroConcertPos), CText("combine")], zeroConcertPos)], zeroConcertPos), CVar("elementConfig", zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("elementConfig", zeroConcertPos), CText("props"), CCall(CVar("fold", zeroConcertPos), [CCallBuiltin("dot", [CVar("elementConfig", zeroConcertPos), CText("combine")], zeroConcertPos), CCall(CVar("mapObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("elementConfig", zeroConcertPos), CText("props")], zeroConcertPos), CLambda(["kv"], CCallBuiltin("quote", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLambda(["acc", "combineConfig"], CLet("baseCombinedProps", CObject(TreeNode("propType", CCallBuiltin("getKeyObjDef", [CVar("combineConfig", zeroConcertPos), CText("resultPropType"), CText("fixed")], zeroConcertPos), TreeNode("enabledVarName", CCallBuiltin("getKeyObjDef", [CVar("combineConfig", zeroConcertPos), CText("enabledVarName"), CText("")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("array2object", [CCall(CVar("map", zeroConcertPos), [CCallBuiltin("dot", [CVar("combineConfig", zeroConcertPos), CText("sources")], zeroConcertPos), CLambda(["propName"], CCallBuiltin("makeKeyValue", [CVar("propName", zeroConcertPos), CCallBuiltin("quote", [CCallBuiltin("dot", [CCallBuiltin("getKeyObjDef", [CCallBuiltin("dot", [CVar("elementConfig", zeroConcertPos), CText("props")], zeroConcertPos), CVar("propName", zeroConcertPos), CObject(TreeNode("value", CCallBuiltin("Empty", [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("combinedControl", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("combineConfig", zeroConcertPos), CText("resultControl")], zeroConcertPos), CCallBuiltin("setKeyObj", [CCall(CVar("filterObj", zeroConcertPos), [CVar("acc", zeroConcertPos), CLambda(["kv"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CCallBuiltin("dot", [CVar("combineConfig", zeroConcertPos), CText("sources")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("dot", [CVar("combineConfig", zeroConcertPos), CText("result")], zeroConcertPos), CCallBuiltin("quote", [CIf(CCallBuiltin("!=", [CVar("combinedControl", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("baseCombinedProps", zeroConcertPos), CText("control"), CVar("combinedControl", zeroConcertPos)], zeroConcertPos), CVar("baseCombinedProps", zeroConcertPos), zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("restoreProps", CLambda(["dirtyProps"], CLet("cleanedProps", CIf(CCallBuiltin("not", [CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("elementConfig", zeroConcertPos), CText("combine")], zeroConcertPos)], zeroConcertPos), CVar("dirtyProps", zeroConcertPos), CCall(CVar("fold", zeroConcertPos), [CCallBuiltin("dot", [CVar("elementConfig", zeroConcertPos), CText("combine")], zeroConcertPos), CVar("dirtyProps", zeroConcertPos), CLambda(["oldProps", "combineConfig"], CCall(CVar("fold", zeroConcertPos), [CCallBuiltin("dot", [CVar("combineConfig", zeroConcertPos), CText("sources")], zeroConcertPos), CCall(CVar("filterObj", zeroConcertPos), [CVar("oldProps", zeroConcertPos), CLambda(["kv"], CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("dot", [CVar("combineConfig", zeroConcertPos), CText("result")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLambda(["newProps", "propName"], CLet("propValue0", CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("oldProps", zeroConcertPos), CCallBuiltin("dot", [CVar("combineConfig", zeroConcertPos), CText("result")], zeroConcertPos)], zeroConcertPos), CVar("propName", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("propValue0", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("propValue", CIf(CCall(CVar("isVar", zeroConcertPos), [CVar("propValue0", zeroConcertPos)], zeroConcertPos), CCallBuiltin("quote", [CVar("propValue0", zeroConcertPos)], zeroConcertPos), CVar("propValue0", zeroConcertPos), zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("newProps", zeroConcertPos), CVar("propName", zeroConcertPos), CVar("propValue", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CVar("newProps", zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos))], zeroConcertPos), zeroConcertPos), CCall(CVar("props2element", zeroConcertPos), [CCall(CVar("mergeObj", zeroConcertPos), [CVar("cleanedProps", zeroConcertPos), CCall(CVar("filterObj", zeroConcertPos), [CVar("props", zeroConcertPos), CLambda(["kv"], CLet("proptype", CCallBuiltin("getKeyObjDef", [CCallBuiltin("getKeyObjDef", [CCallBuiltin("dot", [CVar("elementConfig", zeroConcertPos), CText("props")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), CText("propType"), CText("")], zeroConcertPos), CCallBuiltin("!=", [CVar("proptype", zeroConcertPos), CText("removable")], zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("editingBlocksObj", CCall(CVar("createEditingBlocksView", zeroConcertPos), [CVar("combinedConfig", zeroConcertPos), CText(""), CLambda(["v"], CCall(CVar("saveFn", zeroConcertPos), [CCall(CVar("restoreProps", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLambda(["v"], CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCall(CVar("restoreProps", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CVar("deactivateFnName", zeroConcertPos), CVar("commonVarName", zeroConcertPos), CVar("widthName", zeroConcertPos), CInt(0), CVar("style", zeroConcertPos)], zeroConcertPos), CLet("groupsAll", CCallBuiltin("getKeyObjDef", [CVar("elementConfig", zeroConcertPos), CText("groups"), CObject(TreeEmpty())], zeroConcertPos), CLet("blockGroups", CIf(CCallBuiltin("&&", [CBool(false), CCallBuiltin("!=", [CVar("groupsAll", zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("groupsNamedArr", CCallBuiltin("object2array", [CCallBuiltin("getKeyObjDef", [CVar("groupsAll", zeroConcertPos), CText("named"), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CLet("groupsUnnamedArr", CCallBuiltin("object2array", [CCallBuiltin("getKeyObjDef", [CVar("groupsAll", zeroConcertPos), CText("unnamed"), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), CCall(CVar("fold", zeroConcertPos), [CCallBuiltin("object2array", [CCallBuiltin("dot", [CVar("editingBlocksObj", zeroConcertPos), CText("keyvalues")], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("named", CObject(TreeEmpty()), TreeEmpty(), TreeNode("unnamed", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), 2)), CLambda(["acc", "blockKv"], CLet("searchInArr", CLambda(["groupArr"], CCall(CVar("iteriUntil", zeroConcertPos), [CVar("groupArr", zeroConcertPos), CLambda(["i", "kv"], CCall(CVar("contains", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CCallBuiltin("dot", [CVar("blockKv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), CLet("resNamed", CCall(CVar("searchInArr", zeroConcertPos), [CVar("groupsNamedArr", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("resNamed", zeroConcertPos), CCallBuiltin("length", [CVar("groupsNamedArr", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("resUnnamed", CCall(CVar("searchInArr", zeroConcertPos), [CVar("groupsUnnamedArr", zeroConcertPos)], zeroConcertPos), CLet("keyToSet", CIf(CCallBuiltin("==", [CVar("resUnnamed", zeroConcertPos), CCallBuiltin("length", [CVar("groupsUnnamedArr", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CText(""), CCallBuiltin("dot", [CCallBuiltin("index", [CVar("groupsUnnamedArr", zeroConcertPos), CVar("resUnnamed", zeroConcertPos)], zeroConcertPos), CText("key")], zeroConcertPos), zeroConcertPos), CLet("oldValue", CCallBuiltin("getKeyObjDef", [CCallBuiltin("dot", [CVar("acc", zeroConcertPos), CText("unnamed")], zeroConcertPos), CVar("keyToSet", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CObject(TreeNode("named", CCallBuiltin("dot", [CVar("acc", zeroConcertPos), CText("named")], zeroConcertPos), TreeEmpty(), TreeNode("unnamed", CCallBuiltin("setKeyObj", [CCallBuiltin("dot", [CVar("acc", zeroConcertPos), CText("unnamed")], zeroConcertPos), CVar("keyToSet", zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("oldValue", zeroConcertPos), CVar("blockKv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("keyToSet", CCallBuiltin("dot", [CCallBuiltin("index", [CVar("groupsNamedArr", zeroConcertPos), CVar("resNamed", zeroConcertPos)], zeroConcertPos), CText("key")], zeroConcertPos), CLet("oldValue", CCallBuiltin("getKeyObjDef", [CCallBuiltin("dot", [CVar("acc", zeroConcertPos), CText("named")], zeroConcertPos), CVar("keyToSet", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CObject(TreeNode("named", CCallBuiltin("setKeyObj", [CCallBuiltin("dot", [CVar("acc", zeroConcertPos), CText("named")], zeroConcertPos), CVar("keyToSet", zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("oldValue", zeroConcertPos), CVar("blockKv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeNode("unnamed", CCallBuiltin("dot", [CVar("acc", zeroConcertPos), CText("unnamed")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), CObject(TreeNode("named", CObject(TreeEmpty()), TreeEmpty(), TreeNode("unnamed", CObject(TreeNode("def", CVar("editingBlocksObj", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), CCall(CVar("buildPropPanelViewUI", zeroConcertPos), [CVar("header", zeroConcertPos), CVar("blockGroups", zeroConcertPos), CVar("widthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("createToolbar", CLambda(["toolbarTitle", "dropArea", "dPosition", "dMove", "eAlign", "pContentA"], CObject(TreeNode("dontMove", CVar("dMove", zeroConcertPos), TreeNode("dockedArea", CVar("dropArea", zeroConcertPos), TreeNode("content", CVar("pContentA", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("dockedPosition", CVar("dPosition", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("title", CVar("toolbarTitle", zeroConcertPos), TreeNode("endAlign", CVar("eAlign", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("type", CText("DockingToolbar"), TreeEmpty(), TreeEmpty(), 1), 2), 3)))),
		Pair("createVar", CLambda(["value"], CLet("varName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos), CVar("varName", zeroConcertPos)]), zeroConcertPos))),
		Pair("customPropPanels", CObject(TreeNode("PrimeGraphics", CCallBuiltin("External", [CText("TextButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("EDIT PRIME"), TreeNode("action", CLambda([], CLet("contentVar", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("filterObj", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("dot", [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("positionX"), CText("positionY")]), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CLet("reversePriorityBindings", CCallBuiltin("getKeyObjDef", [CCallBuiltin("index", [CCallBuiltin("dot", [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos), CText("reversePriorityBindings"), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCall(CVar("showDialogCustom", zeroConcertPos), [CCallBuiltin("External", [CText("PrimeGraphicsEditor"), CArray(CArrayView(0, 0), [CObject(TreeNode("contentVarName", CVar("contentVar", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), CObject(TreeNode("fullScreen", CBool(true), TreeEmpty(), TreeEmpty(), 1)), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["__"], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("__editorName", zeroConcertPos), CObject(TreeNode("name", CText("StopEdit"), TreeNode("keepChildren", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("External", [CText("PrimeGraphics"), CArray(CArrayView(0, 0), [CCall(CVar("mergeObj", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("contentVar", zeroConcertPos)], zeroConcertPos), CObject(TreeNode("reversePriorityBindings", CVar("reversePriorityBindings", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CCallBuiltin("deactivate", [CVar("contentVar", zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["__"], CCallBuiltin("deactivate", [CVar("contentVar", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))),
		Pair("disposeGraphicsNames", CLambda([], CSequence([CCall(CVar("map", zeroConcertPos), [CVar("__namesStorageName", zeroConcertPos), CLambda(["name"], CCallBuiltin("deactivate", [CVar("name", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("deactivate", [CText("__namesStorageName")], zeroConcertPos)]))),
		Pair("distance", CLambda(["p1", "p2"], CLet("dx", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("p2", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CLet("dy", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("p2", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("SQRT", [CCallBuiltin("+", [CCallBuiltin("*", [CVar("dx", zeroConcertPos), CVar("dx", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("dy", zeroConcertPos), CVar("dy", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("dockingUI", CLambda(["mainEditorName", "mainEditorVarName", "style"], CSequence([CSet("propPanelValue", CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CSequence([CSet("vars", CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CSequence([CSet("extraVars", CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CSequence([CSet("propPanelEventFlag", CBool(false), zeroConcertPos), CSequence([CSet("propPanelPanelUpdateTrigger", CBool(false), zeroConcertPos), CSequence([CSet("__childEditingStack", CCall(CVar("makeList", zeroConcertPos), [], zeroConcertPos), zeroConcertPos), CSequence([CSet("__mainEditorName", CVar("mainEditorName", zeroConcertPos), zeroConcertPos), CSequence([CSet("insertPanelValue", CCall(CVar("createInsertPanel", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CText("insertPanelIconsView"), CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("showExamples"), CBool(false)], zeroConcertPos), CCallBuiltin("getKeyObjDef", [CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("highlights"), CObject(TreeEmpty())], zeroConcertPos), CText("insertPanel"), CObject(TreeEmpty())], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CSet("debugPanelUpdateTriger", CBool(false), zeroConcertPos), CSequence([CCall(CVar("bindToEnvironment", zeroConcertPos), [CText("prevPanelVars"), CCallBuiltin("+", [CVar("mainEditorName", zeroConcertPos), CText("_previewRunner_panel")], zeroConcertPos)], zeroConcertPos), CSequence([CFormula("debugPanelVarF", CIf(CCall(CVar("existsVar", zeroConcertPos), [CText("prevPanelVars")], zeroConcertPos), CSequence([CSet("debugPanelVar", CCallBuiltin("Table", [CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("prevPanelVars", zeroConcertPos)], zeroConcertPos), CLambda(["var"], CArray(CArrayView(0, 0), [CCall(CVar("trim2", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("var", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CText("\"")], zeroConcertPos), CCallBuiltin("strReplace", [CCall(CVar("trim2", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("var", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CText("\"")], zeroConcertPos), CText("\n"), CText("")], zeroConcertPos)]))], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CText("debugPanelUpdateTriger"), CCallBuiltin("not", [CCall(CVar("getVar", zeroConcertPos), [CText("debugPanelUpdateTriger")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), CEmpty(), zeroConcertPos)), CLet("commonVarName", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CSequence([CIf(CCall(CVar("isUrlParameterFalse", zeroConcertPos), [CText("new_prop_panel")], zeroConcertPos), CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CLambda(["state"], CIf(CCallBuiltin("not", [CCall(CVar("getVar", zeroConcertPos), [CText("propPanelEventFlag")], zeroConcertPos)], zeroConcertPos), CLet("elements", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("elements")], zeroConcertPos), CIf(CCallBuiltin(">", [CCallBuiltin("length", [CVar("elements", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CSequence([CSet("propPanelValue", CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CText("propPanelPanelUpdateTrigger"), CCallBuiltin("not", [CCall(CVar("getVar", zeroConcertPos), [CText("propPanelPanelUpdateTrigger")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), CLet("currentElement", CCallBuiltin("index", [CVar("elements", zeroConcertPos), CInt(0)], zeroConcertPos), CSequence([CSet("currentElementType", CCall(CVar("getHeaderName", zeroConcertPos), [CVar("currentElement", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("not", [CCall(CVar("isExternalPanelDefined", zeroConcertPos), [CCall(CVar("getHeaderName", zeroConcertPos), [CVar("currentElement", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CSet("propPanelValue", CCall(CVar("createPropPanel", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CVar("currentElement", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CText("propPanelPanelUpdateTrigger"), CCallBuiltin("not", [CCall(CVar("getVar", zeroConcertPos), [CText("propPanelPanelUpdateTrigger")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), CEmpty(), zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos), CSet("propPanelValue", CCall(CVar("createNewPropPanel", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CText("currentElementType"), CVar("commonVarName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CSequence([CSet("currentFocus", CText(""), zeroConcertPos), CSequence([CCall(CVar("bindToFocus", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CText("currentFocus")], zeroConcertPos), CSequence([CFormula("monitorFocus", CLet("parentsPaths", CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CArray(CArrayView(0, 0), [])]), CCall(CVar("mapi", zeroConcertPos), [CVar("currentFocus", zeroConcertPos), CLambda(["i", "x"], CCall(CVar("take", zeroConcertPos), [CVar("currentFocus", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CSequence([CSet("__focusItems", CIf(CCallBuiltin("<=", [CCallBuiltin("length", [CVar("parentsPaths", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CArray(CArrayView(0, 0), []), CCall(CVar("enumFromTo", zeroConcertPos), [CInt(0), CCallBuiltin("-", [CCallBuiltin("length", [CVar("parentsPaths", zeroConcertPos)], zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("iteri", zeroConcertPos), [CCall(CVar("take", zeroConcertPos), [CVar("parentsPaths", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("length", [CVar("parentsPaths", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CLambda(["i", "x"], CLet("element", CCall(CVar("getElementOnPath", zeroConcertPos), [CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos)], zeroConcertPos), CVar("x", zeroConcertPos)], zeroConcertPos), CSet("__focusItems", CCallBuiltin("replace", [CVar("__focusItems", zeroConcertPos), CVar("i", zeroConcertPos), CVar("element", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CSet("__focusBarVar", CCallBuiltin("concatA", [CArray(CArrayView(0, 0), [CCall(CVar("interleave", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CCall(CVar("mapWithPrevious", zeroConcertPos), [CCallBuiltin("list2array", [CVar("__childEditingStack", zeroConcertPos)], zeroConcertPos), CLambda(["first"], CObject(TreeNode("previous", CText(""), TreeNode("current", CCallBuiltin("dot", [CVar("first", zeroConcertPos), CText("name")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))), CLambda(["previous", "current"], CObject(TreeNode("previous", CCallBuiltin("dot", [CVar("previous", zeroConcertPos), CText("name")], zeroConcertPos), TreeNode("current", CCallBuiltin("dot", [CVar("current", zeroConcertPos), CText("name")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)))], zeroConcertPos), CLambda(["names"], CCallBuiltin("External", [CText("CustomButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("normal", CCallBuiltin("dot", [CVar("names", zeroConcertPos), CText("current")], zeroConcertPos), TreeNode("highlightOnHover", CBool(true), TreeNode("action", CLambda([], CLet("goOneLevelUp", CLambda(["previousName"], CIf(CCallBuiltin("&&", [CCallBuiltin("not", [CCall(CVar("isEmptyList", zeroConcertPos), [CVar("__childEditingStack", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("head")], zeroConcertPos), CText("name")], zeroConcertPos), CVar("previousName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("head")], zeroConcertPos), CText("callback")], zeroConcertPos), [CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("goOneLevelUp", zeroConcertPos), [CVar("previousName", zeroConcertPos)], zeroConcertPos)]), CEmpty(), zeroConcertPos)), CCall(CVar("goOneLevelUp", zeroConcertPos), [CCallBuiltin("dot", [CVar("names", zeroConcertPos), CText("previous")], zeroConcertPos)], zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("ripple", CBool(true), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos))], zeroConcertPos), CText(":")], zeroConcertPos), CIf(CCallBuiltin("||", [CCall(CVar("isEmptyList", zeroConcertPos), [CVar("__childEditingStack", zeroConcertPos)], zeroConcertPos), CCallBuiltin("==", [CVar("__focusItems", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), []), CArray(CArrayView(0, 0), [CText(":")]), zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("CustomButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("normal", CText(" > "), TreeNode("highlightOnHover", CBool(true), TreeNode("action", CLambda([], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("SetFocus"), TreeEmpty(), TreeNode("path", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("CursorMovement"), TreeNode("destination", CText("toRoot"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("ripple", CBool(true), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos)]), CCall(CVar("interleave", zeroConcertPos), [CCall(CVar("mapi", zeroConcertPos), [CVar("__focusItems", zeroConcertPos), CLambda(["i", "item"], CCallBuiltin("External", [CText("CustomButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("normal", CCall(CVar("concert2string", zeroConcertPos), [CVar("item", zeroConcertPos)], zeroConcertPos), TreeNode("highlightOnHover", CBool(true), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("SetFocus"), TreeEmpty(), TreeNode("path", CCallBuiltin("index", [CVar("parentsPaths", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("ripple", CBool(true), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos))], zeroConcertPos), CText(" > ")], zeroConcertPos)])], zeroConcertPos), zeroConcertPos)])]), zeroConcertPos)), CSequence([CCall(CVar("setEditorActive", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CBool(true), CBool(true)], zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("CursorMovement"), TreeNode("destination", CText("toRoot"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos), CCallBuiltin("External", [CText("DockingUI"), CArray(CArrayView(0, 0), [CObject(TreeNode("fullScreen", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("fullScreen"), CBool(true)], zeroConcertPos), TreeNode("dockingAreas", CObject(TreeNode("rightArea", CObject(TreeNode("title", CText("RightDropArea"), TreeEmpty(), TreeEmpty(), 1)), TreeNode("leftArea", CObject(TreeNode("title", CText("LeftDropArea"), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("topArea", CObject(TreeNode("title", CText("topDropArea"), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("content", CCall(CVar("serialize", zeroConcertPos), [CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("showBreadcrumps", CBool(true), TreeNode("isStatic", CBool(false), TreeNode("focusBarName", CText("__focusBarVar"), TreeEmpty(), TreeEmpty(), 1), TreeNode("name", CVar("mainEditorName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("varName", CVar("mainEditorVarName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("dockingPanels", CCallBuiltin("concatA", [CArray(CArrayView(0, 0), [CCall(CVar("mapi", zeroConcertPos), [CCall(CVar("createConcertToolbars", zeroConcertPos), [CVar("mainEditorName", zeroConcertPos), CVar("style", zeroConcertPos)], zeroConcertPos), CLambda(["i", "content"], CLet("name", CCallBuiltin("+", [CText("Toolbar"), CVar("i", zeroConcertPos)], zeroConcertPos), CCall(CVar("createToolbar", zeroConcertPos), [CVar("name", zeroConcertPos), CText("topDropArea"), CInt(0), CBool(false), CBool(false), CVar("content", zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("createPanel", zeroConcertPos), [CText("Insert Panel"), CText("LeftDropArea"), CText("queue_play_next"), CDouble(264.0), CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("displayMode", CBool(true), TreeNode("autocollapseOnFocus", CBool(true), TreeEmpty(), TreeNode("collapsable", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("name", CText("insertPanel"), TreeNode("isStatic", CBool(true), TreeNode("isRunner", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("varName", CText("insertPanelValue"), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("clear_all"), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CText("insertPanel"), CObject(TreeNode("name", CText("Refresh"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("color", CInt(7171437), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(20.0), TreeNode("tooltip", CText("Autocollapse"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)])], zeroConcertPos), CIf(CCall(CVar("isUrlParameterFalse", zeroConcertPos), [CText("new_prop_panel")], zeroConcertPos), CCall(CVar("createExternalPanel", zeroConcertPos), [CText("Properties Panel"), CText("RightDropArea"), CText("tune"), CDouble(312.0), CFormula("propPanelF", CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("isStatic", CBool(true), TreeNode("autocollapseOnFocus", CBool(true), TreeEmpty(), TreeNode("displayMode", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("scope", CCallBuiltin("concatA", [CArray(CArrayView(0, 0), [CCall(CVar("filter", zeroConcertPos), [CCall(CVar("getObjectValues", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CText("vars")], zeroConcertPos)], zeroConcertPos), CLambda(["v"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CText("baseVars")], zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCall(CVar("filter", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CText("extraVars")], zeroConcertPos), CLambda(["v"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CText("baseVars")], zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CArray(CArrayView(0, 0), [])])], zeroConcertPos), TreeNode("name", CText("propPanel"), TreeEmpty(), TreeNode("notReal", CArray(CArrayView(0, 0), [CVar("propPanelPanelUpdateTrigger", zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("varName", CText("propPanelValue"), TreeEmpty(), TreeEmpty(), 1), 3), 4))])], zeroConcertPos)), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("clear_all"), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("sendEvent", zeroConcertPos), [CText("propPanel"), CObject(TreeNode("name", CText("Refresh"), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("color", CInt(7171437), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(20.0), TreeNode("tooltip", CText("Autocollapse"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)]), CVar("mainEditorName", zeroConcertPos), CText("currentElementType")], zeroConcertPos), CCall(CVar("createExternalPanel", zeroConcertPos), [CText("Properties Panel"), CText("RightDropArea"), CText("tune"), CDouble(312.0), CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("isRunner", CBool(true), TreeNode("displayMode", CBool(true), TreeNode("autocollapseOnFocus", CBool(false), TreeEmpty(), TreeEmpty(), 1), TreeNode("envDisposeVar", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("name", CText("propPanel"), TreeNode("isStatic", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("varName", CText("propPanelValue"), TreeNode("scope", CArray(CArrayView(0, 0), [CText("__childEditingStack"), CVar("commonVarName", zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4))])], zeroConcertPos), CArray(CArrayView(0, 0), []), CVar("mainEditorName", zeroConcertPos), CText("currentElementType")], zeroConcertPos), zeroConcertPos), CCall(CVar("createPreviewPanel", zeroConcertPos), [CText("Preview"), CText("RightDropArea"), CText("visibility"), CDouble(360.0), CVar("mainEditorName", zeroConcertPos), CVar("mainEditorVarName", zeroConcertPos)], zeroConcertPos)]), CIf(CCallBuiltin("||", [CCall(CVar("isDevMode", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("==", [CCall(CVar("getTarget", zeroConcertPos), [], zeroConcertPos), CText("cpp")], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("createPanel", zeroConcertPos), [CText("Debug Panel"), CText("RightDropArea"), CText("tune"), CDouble(312.0), CFormula("df", CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("name", CText("debugPanel"), TreeNode("isRunner", CBool(false), TreeNode("displayMode", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("varName", CText("debugPanelVar"), TreeNode("notReal", CArray(CArrayView(0, 0), [CVar("debugPanelUpdateTriger", zeroConcertPos)]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)), CArray(CArrayView(0, 0), [])], zeroConcertPos)]), CArray(CArrayView(0, 0), []), zeroConcertPos)])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("highlights", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("highlights"), CObject(TreeEmpty())], zeroConcertPos), TreeNode("height", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("height"), CInt(-1)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("width"), CInt(-1)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)])])])])])]), zeroConcertPos)])])])])])])])])])])]))),
		Pair("dotProduct2D", CLambda(["v1", "v2"], CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("v1", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("v2", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("v1", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("v2", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("elemIndex", CLambda(["xs", "elem", "illegal"], CLet("foundIndex", CCall(CVar("iteriUntil", zeroConcertPos), [CVar("xs", zeroConcertPos), CLambda(["i", "x"], CCallBuiltin("==", [CVar("x", zeroConcertPos), CVar("elem", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("foundIndex", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("illegal", zeroConcertPos), CVar("foundIndex", zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs14() -> [Pair<string, Concert>] {
	[
		Pair("element2props", CLambda(["elem"], CLet("typeInfo", CCall(CVar("concert2object", zeroConcertPos), [CVar("elem", zeroConcertPos)], zeroConcertPos), CLet("elemType", CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("__type")], zeroConcertPos), CLet("typesWithValueOnly", CArray(CArrayView(0, 0), [CText("Bool"), CText("Int"), CText("Double"), CText("Text")]), CLet("codingStructures", CArray(CArrayView(0, 0), [CText("Var"), CText("Set"), CText("Let"), CText("Formula"), CText("Lambda"), CText("If"), CText("CallBuiltin"), CText("Call"), CText("Sequence"), CText("Quote"), CText("Unquote")]), CLet("codingStructuresProps", CIf(CCallBuiltin("==", [CCall(CVar("contains", zeroConcertPos), [CVar("codingStructures", zeroConcertPos), CVar("elemType", zeroConcertPos)], zeroConcertPos), CBool(true)], zeroConcertPos), CCallBuiltin("getCodingStructures", [CVar("elem", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), []), zeroConcertPos), CLet("obj", CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Array")], zeroConcertPos), CObject(TreeNode("maxCols", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("view")], zeroConcertPos), CText("maxCols")], zeroConcertPos), TreeNode("children", CCall(CVar("map", zeroConcertPos), [CVar("elem", zeroConcertPos), CVar("quote", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("maxLines", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("view")], zeroConcertPos), CText("maxLines")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Var")], zeroConcertPos), CObject(TreeNode("name", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Set")], zeroConcertPos), CObject(TreeNode("name", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeNode("value", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Let")], zeroConcertPos), CObject(TreeNode("name", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeNode("body", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Formula")], zeroConcertPos), CObject(TreeNode("name", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeNode("value", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Lambda")], zeroConcertPos), CObject(TreeNode("args", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeNode("body", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("If")], zeroConcertPos), CObject(TreeNode("elsec", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), TreeNode("cond", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("then", CCallBuiltin("quote", [CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("CallBuiltin")], zeroConcertPos), CObject(TreeNode("name", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeNode("children", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(1)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Sequence")], zeroConcertPos), CObject(TreeNode("children", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Quote")], zeroConcertPos), CObject(TreeNode("body", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Unquote")], zeroConcertPos), CObject(TreeNode("body", CCallBuiltin("index", [CVar("codingStructuresProps", zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Call")], zeroConcertPos), CIf(CCall(CVar("isSnippet", zeroConcertPos), [CVar("elem", zeroConcertPos)], zeroConcertPos), CCall(CVar("mergeObj", zeroConcertPos), [CObject(TreeNode("fn", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("fn")], zeroConcertPos), TreeNode("__subtype", CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CCallBuiltin("index", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("fn", CCallBuiltin("quote", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), TreeNode("args", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("args")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("contains", zeroConcertPos), [CVar("typesWithValueOnly", zeroConcertPos), CVar("elemType", zeroConcertPos)], zeroConcertPos), CBool(true)], zeroConcertPos), CObject(TreeNode("value", CVar("elem", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Hierarchy")], zeroConcertPos), CObject(TreeNode("value", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("value")], zeroConcertPos), TreeNode("children", CCall(CVar("map", zeroConcertPos), [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("children")], zeroConcertPos), CVar("quote", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("view", CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("view")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Table")], zeroConcertPos), CObject(TreeNode("cells", CCall(CVar("map", zeroConcertPos), [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("cells")], zeroConcertPos), CLambda(["row"], CCall(CVar("map", zeroConcertPos), [CVar("row", zeroConcertPos), CVar("quote", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("HumanText")], zeroConcertPos), CObject(TreeNode("value", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("value")], zeroConcertPos), TreeNode("language", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("language")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Canvas")], zeroConcertPos), CObject(TreeNode("minHeight", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("minHeight")], zeroConcertPos), TreeNode("maxHeight", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("maxHeight")], zeroConcertPos), TreeNode("children", CCall(CVar("map", zeroConcertPos), [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("children")], zeroConcertPos), CVar("quote", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("maxWidth", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("maxWidth")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("scalex", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("scalex")], zeroConcertPos), TreeNode("minWidth", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("minWidth")], zeroConcertPos), TreeEmpty(), TreeNode("rotation", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("rotation")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("x", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("x")], zeroConcertPos), TreeNode("scaley", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("scaley")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("y", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("y")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("KeyValue")], zeroConcertPos), CObject(TreeNode("key", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("key")], zeroConcertPos), TreeEmpty(), TreeNode("value", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("value")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Object")], zeroConcertPos), CVar("elem", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Graphics")], zeroConcertPos), CObject(TreeNode("shape", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("shape")], zeroConcertPos), TreeNode("dimensionalParameters", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("size")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("style", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("style")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Editor")], zeroConcertPos), CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("parameters")], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("MonacoEditor")], zeroConcertPos), CObject(TreeNode("readonly", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("readonly")], zeroConcertPos), TreeNode("height", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("size")], zeroConcertPos), CText("height")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("value")], zeroConcertPos), TreeNode("style", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("style")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("size")], zeroConcertPos), CText("width")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("External")], zeroConcertPos), CCallBuiltin("setKeyObj", [CCallBuiltin("index", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos), CText("__subtype"), CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("name")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("AsCode")], zeroConcertPos), CObject(TreeNode("syntax", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("syntax")], zeroConcertPos), TreeNode("height", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("size")], zeroConcertPos), CText("height")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("size")], zeroConcertPos), CText("width")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("HTML")], zeroConcertPos), CObject(TreeNode("innerHTML", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("syntax")], zeroConcertPos), TreeNode("evaluate", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("evaluate")], zeroConcertPos), TreeNode("children", CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("children")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("height", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("size")], zeroConcertPos), CText("height")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("elem", zeroConcertPos), CText("size")], zeroConcertPos), CText("width")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Empty")], zeroConcertPos), CObject(TreeEmpty()), CSequence([CCallBuiltin("println", [CText("Can't extract properties from given element")], zeroConcertPos), CObject(TreeEmpty())]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("typeField", CIf(CCall(CVar("isSnippet", zeroConcertPos), [CVar("elem", zeroConcertPos)], zeroConcertPos), CText("Snippet"), CIf(CCall(CVar("isHierarchy", zeroConcertPos), [CVar("elem", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("typeInfo", zeroConcertPos), CText("view")], zeroConcertPos), CVar("elemType", zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("obj", zeroConcertPos), CText("__type"), CVar("typeField", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("elementAt", CLambda(["a", "idx", "def"], CIf(CCall(CVar("existsIndex", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("idx", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("idx", zeroConcertPos)], zeroConcertPos), CVar("def", zeroConcertPos), zeroConcertPos))),
		Pair("ellipsis", CLambda(["s", "l"], CCallBuiltin("ELLIPSIS", [CVar("s", zeroConcertPos), CVar("l", zeroConcertPos)], zeroConcertPos))),
		Pair("endsWith", CLambda(["s", "end"], CLet("sl", CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CLet("el", CCall(CVar("strlen", zeroConcertPos), [CVar("end", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin(">", [CVar("el", zeroConcertPos), CVar("sl", zeroConcertPos)], zeroConcertPos), CBool(false), CCallBuiltin("==", [CCall(CVar("substring", zeroConcertPos), [CVar("s", zeroConcertPos), CCallBuiltin("-", [CVar("sl", zeroConcertPos), CVar("el", zeroConcertPos)], zeroConcertPos), CVar("el", zeroConcertPos)], zeroConcertPos), CVar("end", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("enumFromTo", CLambda(["start", "end"], CCall(CVar("__enumFromTo", zeroConcertPos), [CVar("start", zeroConcertPos), CVar("end", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("start", zeroConcertPos)])], zeroConcertPos))),
		Pair("exist", CLambda(["arr", "fn"], CCall(CVar("exists", zeroConcertPos), [CVar("arr", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("exists", CLambda(["arr", "fn"], CLet("foundIndex", CCall(CVar("iteriUntil", zeroConcertPos), [CVar("arr", zeroConcertPos), CLambda(["i", "e"], CCall(CVar("fn", zeroConcertPos), [CVar("e", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("!=", [CVar("foundIndex", zeroConcertPos), CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("existsIndex", CLambda(["a", "idx"], CCallBuiltin("&&", [CCallBuiltin(">=", [CVar("idx", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("<", [CVar("idx", zeroConcertPos), CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("existsKeyObj", CLambda(["obj", "key"], CCallBuiltin("!=", [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CVar("key", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos))),
		Pair("extractSets", CLambda(["code"], CCall(CVar("__extractSets", zeroConcertPos), [CObject(TreeEmpty()), CVar("code", zeroConcertPos)], zeroConcertPos))),
		Pair("filter", CLambda(["a", "test"], CCall(CVar("__filter", zeroConcertPos), [CArray(CArrayView(0, 0), []), CInt(0), CVar("a", zeroConcertPos), CVar("test", zeroConcertPos)], zeroConcertPos))),
		Pair("filterObj", CLambda(["obj", "condition"], CCallBuiltin("array2object", [CCall(CVar("filter", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CVar("condition", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("filteri", CLambda(["a", "test"], CCall(CVar("__filteri", zeroConcertPos), [CArray(CArrayView(0, 0), []), CInt(0), CVar("a", zeroConcertPos), CVar("test", zeroConcertPos)], zeroConcertPos))),
		Pair("find", CLambda(["a", "fn", "def"], CLet("foundIndex", CCall(CVar("iteriUntil", zeroConcertPos), [CVar("a", zeroConcertPos), CLambda(["i", "e"], CCall(CVar("fn", zeroConcertPos), [CVar("e", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("foundIndex", zeroConcertPos), CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("def", zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("foundIndex", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("findi", CLambda(["a", "fn", "def"], CLet("foundIndex", CCall(CVar("iteriUntil", zeroConcertPos), [CVar("a", zeroConcertPos), CLambda(["i", "e"], CCall(CVar("fn", zeroConcertPos), [CVar("e", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("foundIndex", zeroConcertPos), CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("def", zeroConcertPos), CVar("foundIndex", zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("firstElement", CLambda(["a", "def"], CIf(CCallBuiltin(">", [CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("def", zeroConcertPos), zeroConcertPos))),
		Pair("fold", CLambda(["xs", "init", "fn"], CCall(CVar("__fold", zeroConcertPos), [CInt(0), CVar("xs", zeroConcertPos), CVar("init", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("foldObj", CLambda(["obj", "acc", "fn"], CCall(CVar("fold", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CVar("acc", zeroConcertPos), CLambda(["acc2", "x"], CCall(CVar("fn", zeroConcertPos), [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos), CVar("acc2", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("foldi", CLambda(["xs", "init", "fn"], CCall(CVar("__foldi", zeroConcertPos), [CInt(0), CVar("xs", zeroConcertPos), CVar("init", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("forall", CLambda(["a", "fn"], CCall(CVar("__forall", zeroConcertPos), [CVar("a", zeroConcertPos), CInt(0), CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("forceRange", CLambda(["x", "min", "max"], CIf(CCallBuiltin("<", [CVar("x", zeroConcertPos), CVar("min", zeroConcertPos)], zeroConcertPos), CVar("min", zeroConcertPos), CIf(CCallBuiltin(">", [CVar("x", zeroConcertPos), CVar("max", zeroConcertPos)], zeroConcertPos), CVar("max", zeroConcertPos), CVar("x", zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("formatString", CLambda(["s", "p"], CCall(CVar("foldi", zeroConcertPos), [CCall(CVar("reverseA", zeroConcertPos), [CVar("p", zeroConcertPos)], zeroConcertPos), CVar("s", zeroConcertPos), CLambda(["i", "st", "par"], CCallBuiltin("strReplace", [CVar("st", zeroConcertPos), CCallBuiltin("+", [CText("%"), CCall(CVar("i2s", zeroConcertPos), [CCallBuiltin("-", [CCallBuiltin("length", [CVar("p", zeroConcertPos)], zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("par", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("generateEditAsMenuItems2", CLambda(["propvalue", "currentControlName", "defControl", "style"], CLet("commonEditingOptions", CObject(TreeNode("code", CObject(TreeNode("content", CText("Edit as Code"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPCode", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeNode("child", CObject(TreeNode("content", CText("Edit as Child"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPChildEditing", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("default", CObject(TreeNode("content", CText("Edit with default control"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CVar("defControl", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("type", CCall(CVar("getType", zeroConcertPos), [CVar("propvalue", zeroConcertPos)], zeroConcertPos), CLet("specialEditingOptions", CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Int")], zeroConcertPos), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("Edit with Slider"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPSlider", zeroConcertPos), TreeNode("args", CObject(TreeNode("step", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("content", CText("Edit as Color"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPColor", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("content", CText("Edit with TextInput"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPNumericInputText", zeroConcertPos), TreeNode("args", CObject(TreeNode("step", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Double")], zeroConcertPos), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("Edit with Slider"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPSlider", zeroConcertPos), TreeNode("args", CObject(TreeNode("step", CDouble(0.1), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("content", CText("Edit with TextInput"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPNumericInputText", zeroConcertPos), TreeNode("args", CObject(TreeNode("step", CDouble(0.1), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Text")], zeroConcertPos), CArray(CArrayView(0, 0), [CObject(TreeNode("content", CText("Edit with TextInput"), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("currentControlName", zeroConcertPos), CObject(TreeNode("control", CVar("PPInputText", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), CArray(CArrayView(0, 0), []), zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("restrictCommonEditingOptions", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("restrictCommonEditingOptions"), CArray(CArrayView(0, 0), [CText("code"), CText("child"), CText("default")])], zeroConcertPos), CCallBuiltin("concat", [CVar("specialEditingOptions", zeroConcertPos), CCall(CVar("getObjectValues", zeroConcertPos), [CCall(CVar("filterObj", zeroConcertPos), [CVar("commonEditingOptions", zeroConcertPos), CLambda(["kv"], CCall(CVar("contains", zeroConcertPos), [CVar("restrictCommonEditingOptions", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getArrayNestedConfig", CLambda(["props", "enabledVarName"], CCallBuiltin("setKeyObj", [CCall(CVar("getNestedElementConfig", zeroConcertPos), [CVar("props", zeroConcertPos), CVar("enabledVarName", zeroConcertPos)], zeroConcertPos), CText("extendibility"), CText("unnamed")], zeroConcertPos))),
		Pair("getCircleGeneralForm", CLambda(["element"], CLet("shape", CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("shape")], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("name")], zeroConcertPos), CText("GEllipse")], zeroConcertPos), CLet("a", CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("width")], zeroConcertPos), CLet("b", CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("height")], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("a", zeroConcertPos), CVar("b", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CObject(TreeNode("x0", CCallBuiltin("+", [CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), CText("positionX")], zeroConcertPos)], zeroConcertPos), TreeNode("r", CVar("a", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("y0", CCallBuiltin("+", [CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), CText("positionY")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getCurrentDocument", CLambda(["editorName"], CCall(CVar("__getHelper", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state", "varName"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("document")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("getCurrentElement", CLambda(["editorName"], CCall(CVar("__getHelper", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state", "varName"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("cursorElement")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("getCurrentPath", CLambda(["editorName"], CCall(CVar("__getHelper", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state", "varName"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("cursor")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("getCurrentSelection", CLambda(["editorName"], CCall(CVar("__getHelper", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state", "varName"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("selection")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("getDefaultStylesObj", CLambda(["closedShape"], CObject(TreeNode("stroke", CInt(0), TreeNode("fillOpacity", CIf(CVar("closedShape", zeroConcertPos), CDouble(1.0), CDouble(0.0), zeroConcertPos), TreeNode("fill", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CDouble(1.0), TreeNode("strokeDashed", CInt(-1), TreeEmpty(), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CDouble(0.0), TreeNode("points", CArray(CArrayView(0, 0), []), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("strokeWidth", CIf(CVar("closedShape", zeroConcertPos), CDouble(0.0), CDouble(1.0), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4)))),
		Pair("getEditingBlock", CLambda(["name", "value", "type", "enabledVarName", "saveFn", "saveAndUpdateFn", "deactivateFnName", "commonVarName", "requiredControl", "baseWidthName", "nestingLevel"], CLet("currentValueName", CCall(CVar("createVar", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CLet("setupFn", CLambda(["convertInitValueFn", "wrapOnChangeFnFn", "updatePanel"], CLet("varName", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("convertInitValueFn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValueName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("uns", CCall(CVar("subscribe2", zeroConcertPos), [CVar("varName", zeroConcertPos), CLambda(["value"], CCall(CCall(CVar("wrapOnChangeFnFn", zeroConcertPos), [CLambda(["val"], CSequence([CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("currentValueName", zeroConcertPos), CVar("val", zeroConcertPos)], zeroConcertPos), CIf(CVar("updatePanel", zeroConcertPos), CCall(CVar("saveAndUpdateFn", zeroConcertPos), [CCallBuiltin("quote", [CVar("val", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("saveFn", zeroConcertPos), [CCallBuiltin("quote", [CVar("val", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos)]))], zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("varName", zeroConcertPos)], zeroConcertPos), CCall(CVar("uns", zeroConcertPos), [], zeroConcertPos)])]))], zeroConcertPos), CVar("varName", zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("defSetupFn", CLambda([], CLet("varName", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValueName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("uns", CCall(CVar("subscribe2", zeroConcertPos), [CVar("varName", zeroConcertPos), CLambda(["value"], CSequence([CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("currentValueName", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos), CCall(CVar("saveFn", zeroConcertPos), [CCallBuiltin("quote", [CVar("value", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CLet("previousDeactivateFn", CCall(CVar("getVar", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("deactivateFnName", zeroConcertPos), CLambda([], CSequence([CCall(CVar("previousDeactivateFn", zeroConcertPos), [], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("varName", zeroConcertPos)], zeroConcertPos), CCall(CVar("uns", zeroConcertPos), [], zeroConcertPos)])]))], zeroConcertPos), CVar("varName", zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CLet("makeEditingBlock", CLambda(["blockFn", "extraArgs"], CCall(CVar("blockFn", zeroConcertPos), [CCall(CVar("mergeObj", zeroConcertPos), [CObject(TreeNode("defSetupFn", CVar("defSetupFn", zeroConcertPos), TreeNode("commonVarName", CVar("commonVarName", zeroConcertPos), TreeNode("baseWidthName", CVar("baseWidthName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("deactivateFnName", CVar("deactivateFnName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("propName", CVar("name", zeroConcertPos), TreeNode("enabledVarName", CVar("enabledVarName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("setupFn", CVar("setupFn", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CVar("extraArgs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CIf(CCallBuiltin("!=", [CVar("requiredControl", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CCallBuiltin("dot", [CVar("requiredControl", zeroConcertPos), CText("control")], zeroConcertPos), CCallBuiltin("dot", [CVar("requiredControl", zeroConcertPos), CText("args")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("easing")], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPDropDown", zeroConcertPos), CObject(TreeNode("options", CArray(CArrayView(0, 0), [CText("ease"), CText("ease-in"), CText("ease-out"), CText("ease-in-out"), CText("linear")]), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Text")], zeroConcertPos), CIf(CCall(CVar("endsWith", zeroConcertPos), [CCall(CVar("toLowerCase", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos), CText("icon")], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPIconSelector", zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPInputText", zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Int")], zeroConcertPos), CIf(CCall(CVar("endsWith", zeroConcertPos), [CCall(CVar("toLowerCase", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos), CText("color")], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPColor", zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPNumericInputText", zeroConcertPos), CObject(TreeNode("step", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Double")], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPNumericInputText", zeroConcertPos), CObject(TreeNode("step", CDouble(0.1), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Bool")], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPCheckbox", zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), CCall(CVar("makeEditingBlock", zeroConcertPos), [CVar("PPCode", zeroConcertPos), CObject(TreeEmpty())], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs15() -> [Pair<string, Concert>] {
	[
		Pair("getElementConfig", CLambda(["props", "style"], CLet("filterIncludeExcludeProps", CLambda(["pps", "cfg"], CCall(CVar("filterObj", zeroConcertPos), [CVar("pps", zeroConcertPos), CLambda(["kv"], CIf(CCallBuiltin("==", [CVar("cfg", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CBool(true), CLet("includeProps", CCallBuiltin("getKeyObjDef", [CVar("cfg", zeroConcertPos), CText("include"), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("excludeProps", CCallBuiltin("getKeyObjDef", [CVar("cfg", zeroConcertPos), CText("exclude"), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("includeCond", CCallBuiltin("||", [CCallBuiltin("==", [CVar("includeProps", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("contains", zeroConcertPos), [CVar("includeProps", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("excludeCond", CCallBuiltin("||", [CCallBuiltin("==", [CVar("excludeProps", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CVar("excludeProps", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("&&", [CVar("includeCond", zeroConcertPos), CVar("excludeCond", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos)), CLet("noTypeProps", CCall(CVar("filterObj", zeroConcertPos), [CVar("props", zeroConcertPos), CLambda(["kv"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__type"), CText("__subtype")]), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("typeProps", CCall(CVar("filterObj", zeroConcertPos), [CVar("props", zeroConcertPos), CLambda(["kv"], CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__type"), CText("__subtype")]), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__type")], zeroConcertPos), CText("Object")], zeroConcertPos), CObject(TreeNode("props", CCall(CVar("mapObj", zeroConcertPos), [CVar("noTypeProps", zeroConcertPos), CLambda(["kv"], CObject(TreeNode("value", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), TreeNode("propType", CText("removable"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)))], zeroConcertPos), TreeNode("extendibility", CText("named"), TreeEmpty(), TreeEmpty(), 1), TreeNode("typeProps", CVar("typeProps", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__type")], zeroConcertPos), CText("External")], zeroConcertPos), CLet("config", CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getExternalTypesConfig", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__subtype")], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("groups", CObject(TreeEmpty()), TreeNode("extendibility", CText("none"), TreeNode("combine", CArray(CArrayView(0, 0), [CObject(TreeNode("resultPropType", CText("fixed"), TreeNode("result", CText("__size"), TreeNode("enabledVarName", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("resultControl", CObject(TreeNode("control", CVar("PPDimensionalParameters", zeroConcertPos), TreeNode("args", CObject(TreeNode("stringFields", CArray(CArrayView(0, 0), [CText("positionX"), CText("positionY")]), TreeNode("readStringsAsVars", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("sources", CArray(CArrayView(0, 0), [CText("width"), CText("height"), CText("positionX"), CText("positionY")]), TreeEmpty(), TreeEmpty(), 1), 3))]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("props", CCall(CVar("mergeObj", zeroConcertPos), [CCall(CVar("mapObj", zeroConcertPos), [CVar("noTypeProps", zeroConcertPos), CLambda(["kv"], CObject(TreeNode("propType", CText("disableable"), TreeNode("enabledVarName", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), TreeNode("control", CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("config", zeroConcertPos), CText("controls")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("value", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))], zeroConcertPos), CCall(CVar("mapObj", zeroConcertPos), [CCall(CVar("getExternalDefaultArgs", zeroConcertPos), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__subtype")], zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CObject(TreeNode("propType", CText("disableable"), TreeNode("enabledVarName", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), TreeNode("control", CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("config", zeroConcertPos), CText("controls")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("value", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)))], zeroConcertPos)], zeroConcertPos), TreeNode("orderFn", CLambda(["key"], CIf(CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__size"), CText("style")]), CVar("key", zeroConcertPos)], zeroConcertPos), CInt(1), CInt(0), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("typeProps", CVar("typeProps", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__type")], zeroConcertPos), CText("Snippet")], zeroConcertPos), CLet("extensibleSnippets", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("extensibleSnippets"), CBool(true)], zeroConcertPos), CLet("alwaysAddSnippetsSize", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("alwaysAddSnippetsSize"), CBool(true)], zeroConcertPos), CLet("customSnippetConfig", CCallBuiltin("getKeyObjDef", [CVar("style", zeroConcertPos), CText("customSnippetConfig"), CObject(TreeEmpty())], zeroConcertPos), CLet("fullSnippetConfig", CCall(CVar("mergeObj", zeroConcertPos), [CCall(CVar("getSnippetTypesConfig", zeroConcertPos), [], zeroConcertPos), CVar("customSnippetConfig", zeroConcertPos)], zeroConcertPos), CLet("config", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("fullSnippetConfig", zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__subtype")], zeroConcertPos)], zeroConcertPos), CLet("propsToKeep", CCall(CVar("filterIncludeExcludeProps", zeroConcertPos), [CVar("noTypeProps", zeroConcertPos), CVar("config", zeroConcertPos)], zeroConcertPos), CLet("dimensionalFields", CArray(CArrayView(0, 0), [CText("width"), CText("height"), CText("positionX"), CText("positionY")]), CLet("stringFileds", CCall(CVar("getObjectKeys", zeroConcertPos), [CCall(CVar("filterObj", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("config", zeroConcertPos), CText("controls")], zeroConcertPos), CLambda(["kv"], CCallBuiltin("&&", [CCall(CVar("contains", zeroConcertPos), [CVar("dimensionalFields", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("==", [CCall(CVar("getKeyObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CText("control")], zeroConcertPos), CQuote(CVar("PPNumberOrTextInput", zeroConcertPos))], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("order", CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("order"), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeNode("extendibility", CIf(CVar("extensibleSnippets", zeroConcertPos), CText("named"), CText("none"), zeroConcertPos), TreeNode("combine", CIf(CVar("alwaysAddSnippetsSize", zeroConcertPos), CArray(CArrayView(0, 0), [CObject(TreeNode("resultPropType", CText("fixed"), TreeNode("result", CText("__size"), TreeNode("enabledVarName", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("resultControl", CObject(TreeNode("control", CVar("PPDimensionalParameters", zeroConcertPos), TreeNode("args", CObject(TreeNode("stringFields", CVar("stringFileds", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("sources", CVar("dimensionalFields", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))]), CArray(CArrayView(0, 0), []), zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("props", CCall(CVar("mapObj", zeroConcertPos), [CCall(CVar("filterObj", zeroConcertPos), [CVar("propsToKeep", zeroConcertPos), CLambda(["kv"], CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CText("fn")], zeroConcertPos))], zeroConcertPos), CLambda(["kv"], CObject(TreeNode("propType", CIf(CVar("extensibleSnippets", zeroConcertPos), CText("removable"), CText("fixed"), zeroConcertPos), TreeNode("control", CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("config", zeroConcertPos), CText("controls")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))], zeroConcertPos), TreeNode("orderFn", CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("orderFn"), CLambda(["key"], CIf(CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__size"), CText("style")]), CVar("key", zeroConcertPos)], zeroConcertPos), CInt(1), CInt(0), zeroConcertPos))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("typeProps", CVar("typeProps", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("config", CCallBuiltin("getKeyObjDef", [CVar("basicTypesConfig", zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__type")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("propsToKeep", CCall(CVar("filterIncludeExcludeProps", zeroConcertPos), [CVar("noTypeProps", zeroConcertPos), CVar("config", zeroConcertPos)], zeroConcertPos), CLet("base", CObject(TreeNode("order", CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("order"), CArray(CArrayView(0, 0), [])], zeroConcertPos), TreeNode("extendibility", CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("extendibility"), CText("none")], zeroConcertPos), TreeEmpty(), TreeNode("groups", CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("groups"), CObject(TreeEmpty())], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("typeProps", CVar("typeProps", zeroConcertPos), TreeNode("props", CCall(CVar("mapObj", zeroConcertPos), [CVar("propsToKeep", zeroConcertPos), CLambda(["kv"], CLet("base", CObject(TreeNode("value", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), TreeNode("propType", CText("fixed"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CLet("control", CCallBuiltin("getKeyObjDef", [CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("controls"), CObject(TreeEmpty())], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("control", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("base", zeroConcertPos), CText("control"), CVar("control", zeroConcertPos)], zeroConcertPos), CVar("base", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), CLet("combine", CCallBuiltin("getKeyObjDef", [CVar("config", zeroConcertPos), CText("combine"), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("combine", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("base", zeroConcertPos), CText("combine"), CVar("combine", zeroConcertPos)], zeroConcertPos), CVar("base", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getElementProps", CLambda(["element"], CLet("const", CVar("ConcertPropPanelGlobalConstants", zeroConcertPos), CLet("type", CCall(CVar("getType", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isExternal", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("AsCode")], zeroConcertPos), CCallBuiltin("array2object", [CArray(CArrayView(0, 0), [])], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("MonacoEditor")], zeroConcertPos), CObject(TreeNode("size", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), TreeNode("readonly", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("readonly")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("value")], zeroConcertPos), TreeNode("style", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("style")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("HTML")], zeroConcertPos), CObject(TreeNode("size", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), TreeNode("evaluate", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("evaluate")], zeroConcertPos), TreeNode("children", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("children")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("syntax", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("syntax")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3)), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Editor")], zeroConcertPos), CCall(CVar("mergeObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("parameters")], zeroConcertPos), CCallBuiltin("dot", [CVar("const", zeroConcertPos), CText("defaultEditorParameters")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Graphics")], zeroConcertPos), CLet("res", CCall(CVar("mergeObj", zeroConcertPos), [CObject(TreeNode("style", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("style")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos)], zeroConcertPos), CCall(CVar("mergeObj", zeroConcertPos), [CObject(TreeNode("shape", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("shape")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), CVar("res", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Object")], zeroConcertPos), CVar("element", zeroConcertPos), CSequence([CSet("props", CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("KeyValue")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("value")], zeroConcertPos)]), CIf(CCall(CVar("isCodingStructure", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CLet("def", CCallBuiltin("getCodingStructures", [CVar("element", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Call")], zeroConcertPos), CLet("fn", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("fn")], zeroConcertPos), CLet("args", CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("args")], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("==", [CCallBuiltin("length", [CVar("args", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("isObject", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("fn", zeroConcertPos), CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CVar("fn", zeroConcertPos), CCallBuiltin("array2object", [CArray(CArrayView(0, 0), [])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), CVar("def", zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("getSubstrInside", CLambda(["s", "start", "end"], CCall(CVar("takeBeforeLast", zeroConcertPos), [CCall(CVar("takeAfter", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("start", zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos), CVar("end", zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos)), CLet("withoutBraces", CCall(CVar("getSubstrInside", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CText("("), CText(")")], zeroConcertPos), CLet("arrayOfPropsStr", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("["), CVar("withoutBraces", zeroConcertPos), CText("]")])], zeroConcertPos), CCall(CVar("parse", zeroConcertPos), [CVar("arrayOfPropsStr", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("array2object", [CCall(CVar("mapi", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("const", zeroConcertPos), CText("propsNames")], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Hierarchy")], zeroConcertPos), CCallBuiltin("dot", [CCall(CVar("concert2object", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CText("view")], zeroConcertPos), CVar("type", zeroConcertPos), zeroConcertPos)], zeroConcertPos), CLambda(["i", "x"], CCallBuiltin("makeKeyValue", [CVar("x", zeroConcertPos), CCallBuiltin("index", [CVar("props", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getEllipseGeneralForm", CLambda(["element"], CLet("shape", CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("shape")], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("name")], zeroConcertPos), CText("GEllipse")], zeroConcertPos), CObject(TreeNode("b", CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("height")], zeroConcertPos), TreeNode("a", CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("width")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("x0", CCallBuiltin("+", [CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), CText("positionX")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeNode("y0", CCallBuiltin("+", [CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), CText("positionY")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getEvent", CLambda(["editorName"], CCall(CVar("__getHelper", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state", "varName"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("event")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("getExternalTypesConfig", CLambda([], CObject(TreeNode("Icon", CObject(TreeNode("controls", CObject(TreeNode("icon", CObject(TreeNode("control", CVar("PPIconSelector", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1)), TreeNode("DropDown", CObject(TreeNode("controls", CObject(TreeNode("items", CObject(TreeNode("control", CVar("PPItems", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("IconButton", CObject(TreeNode("controls", CObject(TreeNode("icon", CObject(TreeNode("control", CVar("PPIconSelector", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("IconToggle", CObject(TreeNode("controls", CObject(TreeNode("icon", CObject(TreeNode("control", CVar("PPIconSelector", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeNode("iconFalse", CObject(TreeNode("control", CVar("PPIconSelector", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), 3)))),
		Pair("getFocus", CLambda(["editorName"], CCall(CVar("__getHelper", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state", "varName"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("focus")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("getHeaderName", CLambda(["x"], CIf(CCall(CVar("isExternal", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("name")], zeroConcertPos), CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("getKeyObj", CLambda(["obj", "key"], CCallBuiltin("getKeyObjDef", [CVar("obj", zeroConcertPos), CVar("key", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos))),
		Pair("getLineGeneralForm", CLambda(["element"], CLet("mCoefs", CCall(CVar("getLineTwoPointsForm", zeroConcertPos), [CVar("element", zeroConcertPos)], zeroConcertPos), CCall(CVar("mapEmpty", zeroConcertPos), [CVar("mCoefs", zeroConcertPos), CVar("lineTwoPoints2lineGeneral", zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("getLineTwoPointsForm", CLambda(["element"], CLet("shape", CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("shape")], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("name")], zeroConcertPos), CText("Line")], zeroConcertPos), CLet("x1", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), CText("positionX")], zeroConcertPos), CLet("y1", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("element", zeroConcertPos), CText("size")], zeroConcertPos), CText("positionY")], zeroConcertPos), CLet("w", CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("x")], zeroConcertPos), CLet("h", CCallBuiltin("dot", [CVar("shape", zeroConcertPos), CText("y")], zeroConcertPos), CObject(TreeNode("x2", CCallBuiltin("+", [CVar("x1", zeroConcertPos), CVar("w", zeroConcertPos)], zeroConcertPos), TreeNode("x1", CVar("x1", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("y1", CVar("y1", zeroConcertPos), TreeEmpty(), TreeNode("y2", CCallBuiltin("+", [CVar("y1", zeroConcertPos), CVar("h", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getMutable", CLambda(["varName", "value", "type"], CLet("mutables", CCall(CVar("propPanelMutables", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos), CLet("key", CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("mutables", zeroConcertPos), CVar("type", zeroConcertPos)], zeroConcertPos), CVar("type", zeroConcertPos), CText("EditableChild"), zeroConcertPos), CCall(CCallBuiltin("dot", [CVar("mutables", zeroConcertPos), CVar("key", zeroConcertPos)], zeroConcertPos), [], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getNActiveElements", CLambda(["editorName", "n"], CLet("elements", CCall(CVar("__getHelper", zeroConcertPos), [CVar("editorName", zeroConcertPos), CLambda(["state", "varName"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("elements")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("n", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("elements", zeroConcertPos), CIf(CCallBuiltin(">=", [CCallBuiltin("length", [CVar("elements", zeroConcertPos)], zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos), CCall(CVar("take", zeroConcertPos), [CVar("elements", zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos), CCall(CVar("arrayRepeat", zeroConcertPos), [CCallBuiltin("quote", [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("editorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getNestedElementConfig", CLambda(["props", "enabledVarName"], CLet("noTypeProps", CCall(CVar("filterObj", zeroConcertPos), [CVar("props", zeroConcertPos), CLambda(["kv"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__type"), CText("__subtype")]), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("typeProps", CCall(CVar("filterObj", zeroConcertPos), [CVar("props", zeroConcertPos), CLambda(["kv"], CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__type"), CText("__subtype")]), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CObject(TreeNode("props", CCall(CVar("mapObj", zeroConcertPos), [CVar("noTypeProps", zeroConcertPos), CLambda(["kv"], CObject(TreeNode("propType", CText("removable"), TreeNode("enabledVarName", CVar("enabledVarName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)))], zeroConcertPos), TreeNode("extendibility", CText("named"), TreeEmpty(), TreeEmpty(), 1), TreeNode("typeProps", CVar("typeProps", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos))),
		Pair("getObjFromVars", CLambda(["baseVarName", "objShape"], CCall(CVar("mapObj", zeroConcertPos), [CVar("objShape", zeroConcertPos), CLambda(["kv"], CCall(CVar("getVar", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_"), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)])], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("getObjectKeys", CLambda(["obj"], CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CLambda(["x"], CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos))], zeroConcertPos))),
		Pair("getObjectNestedConfig", CLambda(["props", "enabledVarName"], CCallBuiltin("setKeyObj", [CCall(CVar("getNestedElementConfig", zeroConcertPos), [CVar("props", zeroConcertPos), CVar("enabledVarName", zeroConcertPos)], zeroConcertPos), CText("extendibility"), CText("named")], zeroConcertPos))),
		Pair("getObjectValues", CLambda(["obj"], CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos))], zeroConcertPos))),
		Pair("getPropPanelDimensionalParameters", CLambda(["old", "oldObj"], CLet("defKeys", CIf(CCall(CVar("isExternal", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CCall(CVar("getObjectKeys", zeroConcertPos), [CCall(CVar("getExternalDefaultArgs", zeroConcertPos), [CCallBuiltin("dot", [CVar("old", zeroConcertPos), CText("name")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CText("positionX"), CText("poositionY"), CText("width"), CText("height")]), zeroConcertPos), CLet("positionKeyValues", CArray(CArrayView(0, 0), [CKeyValue("positionX", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-400.0), TreeNode("max", CDouble(400.0), TreeNode("enabled", CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("positionX")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CText("prop_positionX"), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos)), CKeyValue("positionY", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-400.0), TreeNode("max", CDouble(400.0), TreeNode("enabled", CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("positionY")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CText("prop_positionY"), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos))]), CCallBuiltin("array2object", [CCallBuiltin("concatA", [CArray(CArrayView(0, 0), [CVar("positionKeyValues", zeroConcertPos), CIf(CCall(CVar("contains", zeroConcertPos), [CVar("defKeys", zeroConcertPos), CText("width")], zeroConcertPos), CArray(CArrayView(0, 0), [CKeyValue("width", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(800.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_width"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos))]), CArray(CArrayView(0, 0), []), zeroConcertPos), CIf(CCall(CVar("contains", zeroConcertPos), [CVar("defKeys", zeroConcertPos), CText("height")], zeroConcertPos), CArray(CArrayView(0, 0), [CKeyValue("height", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(800.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_height"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos))]), CArray(CArrayView(0, 0), []), zeroConcertPos)])], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("getSnippetTypesConfig", CLambda([], CLet("commonFields", CObject(TreeNode("positionX", CObject(TreeNode("control", CQuote(CVar("PPNumberOrTextInput", zeroConcertPos)), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeNode("height", CObject(TreeNode("control", CQuote(CVar("PPNumberOrTextInput", zeroConcertPos)), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("style", CObject(TreeNode("control", CQuote(CVar("PPStyle", zeroConcertPos)), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("positionY", CObject(TreeNode("control", CQuote(CVar("PPNumberOrTextInput", zeroConcertPos)), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CObject(TreeNode("control", CQuote(CVar("PPNumberOrTextInput", zeroConcertPos)), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("defStyleControl", CObject(TreeNode("style", CObject(TreeNode("control", CQuote(CVar("PPStyle", zeroConcertPos)), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeNode("showMenu", CBool(false), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), CObject(TreeNode("Polygon", CObject(TreeNode("controls", CVar("commonFields", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("LineSegment", CObject(TreeNode("controls", CVar("commonFields", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Ellipse", CObject(TreeNode("controls", CVar("commonFields", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("LineSegmentByTwoPoints", CObject(TreeNode("controls", CVar("defStyleControl", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("LineSegmentBySlope", CObject(TreeNode("controls", CVar("defStyleControl", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Parabola", CObject(TreeNode("controls", CVar("defStyleControl", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("Rectangle", CObject(TreeNode("controls", CVar("commonFields", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("RoundedRect", CObject(TreeNode("controls", CCall(CVar("mergeObj", zeroConcertPos), [CVar("commonFields", zeroConcertPos), CKeyValue("radius", CObject(TreeNode("control", CVar("PPNumberOrTextInput", zeroConcertPos), TreeNode("args", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), 4)), zeroConcertPos), zeroConcertPos))),
		Pair("getType", CLambda(["x"], CCallBuiltin("dot", [CCall(CVar("concert2object", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("__type")], zeroConcertPos))),
		Pair("getTypeInfo", CLambda(["val"], CLet("concertName", CCallBuiltin("getConcertName", [CVar("val", zeroConcertPos)], zeroConcertPos), CLet("isExternal", CCallBuiltin("==", [CVar("concertName", zeroConcertPos), CText("External")], zeroConcertPos), CLet("isAtomic", CCallBuiltin("==", [CVar("concertName", zeroConcertPos), CText("")], zeroConcertPos), CLet("typeName", CIf(CCallBuiltin("==", [CVar("concertName", zeroConcertPos), CText("")], zeroConcertPos), CCall(CVar("takeAfter", zeroConcertPos), [CCallBuiltin("getStructName", [CVar("val", zeroConcertPos)], zeroConcertPos), CText("C"), CText("Empty")], zeroConcertPos), CVar("concertName", zeroConcertPos), zeroConcertPos), CLet("headerName", CIf(CVar("isExternal", zeroConcertPos), CCallBuiltin("dot", [CVar("val", zeroConcertPos), CText("name")], zeroConcertPos), CVar("typeName", zeroConcertPos), zeroConcertPos), CLet("isCodingType", CCall(CVar("contains", zeroConcertPos), [CCallBuiltin("dot", [CVar("ConcertPropPanelGlobalConstants", zeroConcertPos), CText("codingTypes")], zeroConcertPos), CVar("typeName", zeroConcertPos)], zeroConcertPos), CLet("isGraphicsType", CCallBuiltin("==", [CVar("typeName", zeroConcertPos), CText("Graphics")], zeroConcertPos), CLet("isSnippet", CCallBuiltin("&&", [CCallBuiltin("==", [CVar("typeName", zeroConcertPos), CText("Call")], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin("==", [CCallBuiltin("length", [CCallBuiltin("dot", [CVar("val", zeroConcertPos), CText("args")], zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("dot", [CCall(CVar("getTypeInfo", zeroConcertPos), [CCallBuiltin("index", [CCallBuiltin("dot", [CVar("val", zeroConcertPos), CText("args")], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CText("typeName")], zeroConcertPos), CText("Object")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("updatesChildren", CCallBuiltin("||", [CVar("isExternal", zeroConcertPos), CCallBuiltin("||", [CVar("isSnippet", zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("&&", [CVar("isCodingType", zeroConcertPos), CCallBuiltin("!=", [CVar("typeName", zeroConcertPos), CText("CallBuiltin")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("==", [CVar("typeName", zeroConcertPos), CText("HTML")], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("==", [CVar("typeName", zeroConcertPos), CText("KeyValue")], zeroConcertPos), CCallBuiltin("==", [CVar("typeName", zeroConcertPos), CText("Object")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("isExternal", CVar("isExternal", zeroConcertPos), TreeNode("isAtomic", CVar("isAtomic", zeroConcertPos), TreeNode("headerName", CVar("headerName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("isCodingType", CVar("isCodingType", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("typeName", CVar("typeName", zeroConcertPos), TreeNode("isGraphicsType", CVar("isGraphicsType", zeroConcertPos), TreeEmpty(), TreeNode("isSnippet", CVar("isSnippet", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("updatesChildren", CVar("updatesChildren", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3), 4)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs16() -> [Pair<string, Concert>] {
	[
		Pair("getVisualElement", CLambda(["element"], CLet("__getVisualElement", CLambda(["el"], CLet("bname", CCall(CVar("getBuiltinName", zeroConcertPos), [CVar("el", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("Canvas"), CText("CanvasCrop"), CText("CanvasScroll"), CText("CanvasCustom")]), CVar("bname", zeroConcertPos)], zeroConcertPos), CLet("args", CCall(CVar("getBuiltinArgs", zeroConcertPos), [CVar("el", zeroConcertPos)], zeroConcertPos), CLet("numberArgs", CCall(CVar("subrange", zeroConcertPos), [CVar("args", zeroConcertPos), CInt(0), CInt(9)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCall(CVar("forall", zeroConcertPos), [CVar("numberArgs", zeroConcertPos), CLambda(["a"], CCallBuiltin("not", [CCall(CVar("hasInnerVars", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("not", [CCall(CVar("hasInnerVars", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("eargs", CCall(CVar("map", zeroConcertPos), [CVar("numberArgs", zeroConcertPos), CVar("eval", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("Canvas")], zeroConcertPos), CCallBuiltin("Canvas", [CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(2)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(3)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(4)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(5)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(6)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(7)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(8)], zeroConcertPos), CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("CanvasCrop")], zeroConcertPos), CCallBuiltin("CanvasCrop", [CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(2)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(3)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(4)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(5)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(6)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(7)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(8)], zeroConcertPos), CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("CanvasScroll")], zeroConcertPos), CCallBuiltin("CanvasScroll", [CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(2)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(3)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(4)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(5)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(6)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(7)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(8)], zeroConcertPos), CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("CanvasCustom")], zeroConcertPos), CCallBuiltin("CanvasCustom", [CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(2)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(3)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(4)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(5)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(6)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(7)], zeroConcertPos), CCallBuiltin("index", [CVar("eargs", zeroConcertPos), CInt(8)], zeroConcertPos), CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos), CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(10)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("CallBuiltin"), CArray(CArrayView(0, 0), [CVar("bname", zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("numberArgs", zeroConcertPos), CIf(CCall(CVar("isArray", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos), CVar("getVisualElement", zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(9)], zeroConcertPos), zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CIf(CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("External"), CText("Graphics"), CText("Empty"), CText("AsCode")]), CVar("bname", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("hasInnerVars", zeroConcertPos), [CVar("el", zeroConcertPos)], zeroConcertPos), CVar("el", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("bname", zeroConcertPos), CText("External")], zeroConcertPos), CLet("externalObj", CCall(CVar("concert2object", zeroConcertPos), [CVar("el", zeroConcertPos)], zeroConcertPos), CLet("name", CCallBuiltin("index", [CCallBuiltin("dot", [CVar("externalObj", zeroConcertPos), CText("children")], zeroConcertPos), CInt(0)], zeroConcertPos), CLet("args", CCallBuiltin("index", [CCallBuiltin("dot", [CVar("externalObj", zeroConcertPos), CText("children")], zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("makeExternal", zeroConcertPos), [CVar("name", zeroConcertPos), CCallBuiltin("index", [CVar("args", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCall(CVar("eval", zeroConcertPos), [CVar("el", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CVar("el", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos)), CCall(CVar("applyRecursively", zeroConcertPos), [CVar("element", zeroConcertPos), CVar("__getVisualElement", zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("headList", CLambda(["list", "def"], CCallBuiltin("getKeyObjDef", [CVar("list", zeroConcertPos), CText("head"), CVar("def", zeroConcertPos)], zeroConcertPos))),
		Pair("i2s", CLambda(["i"], CCall(CVar("unparse", zeroConcertPos), [CVar("i", zeroConcertPos)], zeroConcertPos))),
		Pair("idfn", CLambda(["v"], CVar("v", zeroConcertPos))),
		Pair("idfnSnippet", CLambda(["obj"], CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("element")], zeroConcertPos))),
		Pair("import", CLambda(["type", "onOk", "onErr"], CCall(CVar("__importOneRecord", zeroConcertPos), [CVar("type", zeroConcertPos), CLambda(["record"], CSequence([CCall(CVar("eval", zeroConcertPos), [CVar("record", zeroConcertPos)], zeroConcertPos), CCall(CVar("onOk", zeroConcertPos), [], zeroConcertPos)])), CVar("onErr", zeroConcertPos)], zeroConcertPos))),
		Pair("importAs", CLambda(["libname", "varname", "settings"], CLet("onError", CCallBuiltin("getKeyObjDef", [CVar("settings", zeroConcertPos), CText("onError"), CVar("envError", zeroConcertPos)], zeroConcertPos), CLet("defFn", CCallBuiltin("getKeyObjDef", [CVar("settings", zeroConcertPos), CText("defFn"), CVar("nop1", zeroConcertPos)], zeroConcertPos), CLet("onDone", CCallBuiltin("getKeyObjDef", [CVar("settings", zeroConcertPos), CText("onDone"), CVar("nop", zeroConcertPos)], zeroConcertPos), CLet("mapping", CCall(CVar("switchConcert", zeroConcertPos), [CVar("varname", zeroConcertPos), CObject(TreeNode("object", CLambda(["values"], CVar("values", zeroConcertPos)), TreeNode("array", CLambda(["__", "children"], CCallBuiltin("array2object", [CCall(CVar("map", zeroConcertPos), [CVar("children", zeroConcertPos), CLambda(["c"], CCallBuiltin("makeKeyValue", [CVar("c", zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeNode("keyvalue", CLambda(["key", "value"], CCallBuiltin("array2object", [CArray(CArrayView(0, 0), [CCallBuiltin("makeKeyValue", [CVar("key", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CLambda(["name"], CCallBuiltin("array2object", [CArray(CArrayView(0, 0), [CCallBuiltin("makeKeyValue", [CVar("name", zeroConcertPos), CVar("name", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos), CSequence([CCall(CVar("iterObj", zeroConcertPos), [CVar("mapping", zeroConcertPos), CLambda(["kv"], CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CVar("defFn", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCall(CCallBuiltin("dot", [CCall(CVar("importInPromise", zeroConcertPos), [CVar("libname", zeroConcertPos), CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("mapping", zeroConcertPos)], zeroConcertPos), CVar("onError", zeroConcertPos)], zeroConcertPos), CText("then")], zeroConcertPos), [CLambda(["res"], CCall(CVar("iterObj", zeroConcertPos), [CVar("mapping", zeroConcertPos), CLambda(["kv"], CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("res", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CCallBuiltin("dot", [CVar("res", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("onDone", zeroConcertPos), [], zeroConcertPos)]), CCallBuiltin("envError", [CCallBuiltin("+", [CCallBuiltin("+", [CCallBuiltin("+", [CText("Function "), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CText(" is not found in ")], zeroConcertPos), CVar("libname", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos))], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("importInPromise", CLambda(["type", "toImport", "onErr"], CLet("evaluateLetBindings", CLambda(["code"], CCall(CVar("switchConcert", zeroConcertPos), [CVar("code", zeroConcertPos), CObject(TreeNode("let", CLambda(["name", "value", "body"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("name", zeroConcertPos), CCall(CVar("eval", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("evaluateLetBindings", zeroConcertPos), [CVar("body", zeroConcertPos)], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos)), CSequence([CIf(CCallBuiltin("not", [CCall(CVar("existsVar", zeroConcertPos), [CText("__imported")], zeroConcertPos)], zeroConcertPos), CSet("__imported", CObject(TreeEmpty()), zeroConcertPos), CEmpty(), zeroConcertPos), CIf(CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("__imported", zeroConcertPos), CVar("type", zeroConcertPos)], zeroConcertPos), CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resolve", "__"], CCall(CVar("resolve", zeroConcertPos), [CCallBuiltin("dot", [CVar("__imported", zeroConcertPos), CVar("type", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCall(CCallBuiltin("dot", [CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resolve", "reject"], CCall(CVar("__importOneRecord", zeroConcertPos), [CVar("type", zeroConcertPos), CLambda(["code0"], CLet("code", CIf(CCall(CVar("isAsCode", zeroConcertPos), [CVar("code0", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("code0", zeroConcertPos), CText("parsed")], zeroConcertPos), CVar("code0", zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("evaluateLetBindings", zeroConcertPos), [CVar("code", zeroConcertPos)], zeroConcertPos), CLet("result", CIf(CCallBuiltin("==", [CVar("toImport", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCall(CVar("extractSets", zeroConcertPos), [CVar("code", zeroConcertPos)], zeroConcertPos), CCall(CVar("filterObj", zeroConcertPos), [CCall(CVar("extractSets", zeroConcertPos), [CVar("code", zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCall(CVar("contains", zeroConcertPos), [CVar("toImport", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), CSequence([CSet("__imported", CCallBuiltin("setKeyObj", [CVar("__imported", zeroConcertPos), CVar("type", zeroConcertPos), CVar("result", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("resolve", zeroConcertPos), [CVar("result", zeroConcertPos)], zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos)), CVar("reject", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CText("catch")], zeroConcertPos), [CVar("onErr", zeroConcertPos)], zeroConcertPos), zeroConcertPos)]), zeroConcertPos))),
		Pair("insertArray", CLambda(["xs", "index", "v"], CCall(CVar("insertArray2", zeroConcertPos), [CVar("xs", zeroConcertPos), CVar("index", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("v", zeroConcertPos)])], zeroConcertPos))),
		Pair("insertArray2", CLambda(["xs", "index", "vs"], CCall(CVar("concat3", zeroConcertPos), [CCall(CVar("subrange", zeroConcertPos), [CVar("xs", zeroConcertPos), CInt(0), CVar("index", zeroConcertPos)], zeroConcertPos), CVar("vs", zeroConcertPos), CCall(CVar("subrange", zeroConcertPos), [CVar("xs", zeroConcertPos), CVar("index", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos), CVar("index", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),

	];
}

getConcertPairs17() -> [Pair<string, Concert>] {
	[
		Pair("insertPanelIconsView", CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("Autocomplete"), CArray(CArrayView(0, 0), [CObject(TreeNode("dictionary", CCall(CVar("concatStrings", zeroConcertPos), [CCall(CVar("interleave", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CText("nameArr")], zeroConcertPos), CText("\n")], zeroConcertPos)], zeroConcertPos), TreeNode("choosedValName", CText("__choosedVal"), TreeEmpty(), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("noElevate", CBool(true), TreeNode("enabled", CBool(true), TreeNode("dropDownButtons", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("isSearch", CBool(true), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CText("__usersInput"), TreeNode("sameBackground", CBool(true), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CInt(-1), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos), CCallBuiltin("Table", [CArray(CArrayView(0, 0), [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("CheckBox")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("check_box"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("CheckBox")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Checkbox"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("DropDown")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("menu_open"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("DropDown")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("DropDown"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Expander")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("expand_more"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Expander")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Expander"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Icon")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("star_outline"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Icon")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Icon"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("IconButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("star"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("IconButton")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("IconButton"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("IconToggle")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("star_half"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("IconToggle")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("IconToggle"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("InputText")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("create"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("InputText")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("InputText"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Picture")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("insert_photo"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Picture")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Picture"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("RadioButtons")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("radio_button_checked"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("RadioButtons")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("RadioButtons"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Separator")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("horizontal_rule"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Separator")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Separator"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Slider")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("linear_scale"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Slider")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Slider"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("StyledText")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("format_color_text"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("StyledText")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("StyledText"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Switch")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("toggle_on"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Switch")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Switch"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("TextButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("smart_button"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("TextButton")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("TextButton"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos)]), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Tooltip")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("chat_bubble_outline"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Tooltip")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Tooltip"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Video")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("movie_creation"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Video")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Video"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Wigi")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("build"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Wigi")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Wigi"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("WigiEditor")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("feed"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("WigiEditor")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("WigiEditor"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CIf(CCall(CVar("isDefined", zeroConcertPos), [CText("PrimeGraphics")], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeGraphics")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("category"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("PrimeGraphics")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("PrimeGraphics"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), zeroConcertPos)])])], zeroConcertPos), CCallBuiltin("External", [CText("Separator"), CArray(CArrayView(0, 0), [CObject(TreeNode("horizontal", CBool(true), TreeEmpty(), TreeNode("width", CDouble(232.0), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CCallBuiltin("Table", [CArray(CArrayView(0, 0), [CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Ellipse")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("radio_button_unchecked"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Ellipse")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Ellipse"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Rectangle")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("stop"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Rectangle")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Rectangle"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("RoundedRect")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("check_box_outline_blank"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("RoundedRect")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Rounded Rectangle"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Polygon")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("change_history"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Polygon")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Polygon"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Arrow")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("trending_flat"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Arrow")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Arrow"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("LineSegment")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("line_weight"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("LineSegment")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Line"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("positionX", CDouble(0.0), TreeNode("color", CInt(0), TreeNode("buttonBorder", CDouble(0.0), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Grid")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("icon", CText("grid_on"), TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Grid")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("positionY", CDouble(0.0), TreeEmpty(), TreeNode("tooltip", CText("Grid"), TreeEmpty(), TreeEmpty(), 1), 2), 4))])], zeroConcertPos)])])], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Values")], zeroConcertPos), TreeNode("header", CText("Values"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("font_download"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Text")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("looks_one"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Integer")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Integer"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("exposure_zero"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Double")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Double"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("file_download_done"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("True")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("true"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("clear"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("False")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("false"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("list_alt"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_object")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Object")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("Object")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Object"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("icon", CText("short_text"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_keyValue")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("KeyValue")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("KeyValue")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("KeyValue"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("icon", CText("remove"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Empty")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Empty"), TreeEmpty(), TreeEmpty(), 1), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Structure")], zeroConcertPos), TreeNode("header", CText("Structure"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("icon", CText("sort"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Comap")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Comap"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("segment"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Tree")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Tree"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("border_inner"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Table")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Table"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("border_vertical"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Columns")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Columns"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("border_horizontal"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Lines")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Lines"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("icon", CText("crop_free"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_canvas")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Canvas")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("Canvas")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Canvas"), TreeEmpty(), TreeEmpty(), 1), 3))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Coding")], zeroConcertPos), TreeNode("header", CText("Coding"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Variable"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Variable")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Set variable"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Set")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("Sequence")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Sequence")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_sequence")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Sequence"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("If")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("If")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_if")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("If"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("Formula")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Formula")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_formula")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Formula"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("Lambda")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Lambda")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_lambda")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Lambda"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("Call"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Call")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("AsCode"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("AsCode")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Advanced_Coding")], zeroConcertPos), TreeNode("header", CText("Advanced Coding"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Let"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Let")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Builtin"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Builtin")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Quote"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Quote")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Unquote"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Unquote")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Wigi_Coding")], zeroConcertPos), TreeNode("header", CText("Wigi coding"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Get wigi var"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("GetWigiVar")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("GetWigiVarAscync")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("GetWigiVarAscync")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_getWigiAsync")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Get wigi var (async)"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("SetWigiVar")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("SetWigiVar")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_setWigi")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Set wigi var"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("SubscribeToWigiVar")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("SubscribeToWigiVar")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_wigi")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Subscribe to wigi var"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("UnsubscribeFromWigiVar")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("UnsubscribeFromWigiVar")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_unWigi")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Unsubscribe from wigi var"), TreeEmpty(), TreeEmpty(), 1), 3))]), TreeNode("isVisible", CCall(CVar("isDefined", zeroConcertPos), [CText("wigi")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Advanced_UI")], zeroConcertPos), TreeNode("header", CText("Advanced UI"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Autocomplete"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Autocomplete")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Carousel"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Carousel")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Code Editor"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("CodeEditor")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("ColorPicker"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("ColorPicker")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("CustomButton"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("CustomButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("DataTable"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("DataTable")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("DatePicker"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("DatePicker")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("DragDrop")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("DragDrop")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_dragDrop")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("DragDrop"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("EasingAnimation"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("EasingAnimation")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("External"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("External")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Editor"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Editor")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("DockingUI"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("DockingUI")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Frame"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Frame")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("HTML"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("HTML")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Interactive"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Interactive")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Mask"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Mask")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Menu"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Menu")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Paragraph"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Paragraph")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("isVisible", CCall(CVar("isDefined", zeroConcertPos), [CText("PrimeGraphicsEditor")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeGraphicsEditor")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("PrimeGraphicsEditor"), TreeEmpty(), TreeEmpty(), 1), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Animation")], zeroConcertPos), TreeNode("header", CText("Animation"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("Animator")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Animator")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_animator")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Animator"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("KeyframesAnimation")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("KeyframesAnimation")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_keyframesAnimation")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("KeyframesAnimation"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("MorphingAnimation"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_morphingAnimation")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__wrapManyIntoElementByName", zeroConcertPos), [CInt(2), CText("MorphingAnimation")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("MorphingAnimation")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("tooltip", CText("Takes first two selected elements, or one element and its copy"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("FadeIn"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_fadeIn")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("FadeIn")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("FadeIn")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("tooltip", CText("Wraps current element"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("FadeOut"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_fadeOut")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("FadeOut")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("FadeOut")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("tooltip", CText("Wraps current element"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("NamedValueAnimation")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("NamedValueAnimation")], zeroConcertPos)), TreeEmpty(), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_namedValueAnimation")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("NamedValueAnimation"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("Add Trigger Button"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_addTriggerButton")], zeroConcertPos), TreeNode("action", CLambda([], CLet("triggerName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("resultName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("Trigger")], zeroConcertPos), CSequence([CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("resultName", zeroConcertPos)], zeroConcertPos), CCall(CVar("__insertElementByName", zeroConcertPos), [CText("TriggerButton")], zeroConcertPos), CEmpty(), zeroConcertPos), CCallBuiltin("deactivate", [CVar("resultName", zeroConcertPos)], zeroConcertPos)])]), zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("TriggerButton")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("tooltip", CText("If current element is an animation creates a trigger button for it"), TreeEmpty(), TreeEmpty(), 1), 3))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Graphics")], zeroConcertPos), TreeNode("header", CText("Graphics"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Line Segment by Slope"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("LineSegmentBySlope")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Line Segment by Two Points"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("LineSegmentByTwoPoints")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Parabola"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("Parabola")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Screen_setup")], zeroConcertPos), TreeNode("header", CText("Screen setup"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Make screen"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_makeScreen")], zeroConcertPos), TreeNode("action", CLambda([], CIf(CCallBuiltin("==", [CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("__editorName", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CCall(CVar("__insertElementByName", zeroConcertPos), [CText("MakeScreen")], zeroConcertPos), CCall(CVar("__wrapManyIntoElementByName", zeroConcertPos), [CInt(-1), CText("MakeScreen")], zeroConcertPos), zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("MakeScreen")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("tooltip", CText("Wraps all selected elements into canvas and that into a variable assignment"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("Set focus (code)"), TreeNode("extraButton", CCall(CVar("createExampleExtraButtonDescription", zeroConcertPos), [CText("doc_example_setFocus")], zeroConcertPos), TreeNode("action", CLambda([], CCall(CVar("__insertElementAsSiblingByName", zeroConcertPos), [CText("SetFocusCode")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("hintMarker", CCall(CVar("__getExtraButtonHintMarkerByName", zeroConcertPos), [CText("SetFocusCode")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("tooltip", CText("Inserts setFocus code element when pressed on a variable assignment"), TreeEmpty(), TreeEmpty(), 1), 3)), CObject(TreeNode("text", CText("Set focus (button)"), TreeNode("action", CLambda([], CCall(CVar("__insertElementAsSiblingByName", zeroConcertPos), [CText("SetFocusButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Inserts setFocus button when pressed on a variable assignment"), TreeEmpty(), TreeEmpty(), 1), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Prime")], zeroConcertPos), TreeNode("header", CText("Prime"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("PrimeArrow"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeArrow")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Prime Autocomplete Input"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeAutocompleteInput")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeCard"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeCard")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeCarousel"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeCarousel")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeCheckbox"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeCheckbox")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeDataTable"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeDataTable")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeDate"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeDate")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeDropDownList"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeDropDownList")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeExpansionPanels"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeExpansionPanels")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeFloatingButton"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeFloatingButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeIconButton"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeIconButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeIconToggle"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeIconToggle")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeLetterIcon"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeLetterIcon")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeMenu"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeMenu")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimePicture"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimePicture")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeRadioButtons"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeRadioButtons")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeRoundedRectangle"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeRoundedRectangle")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeSideNavigationBar"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeSideNavigationBar")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeSimpleIcon"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeSimpleIcon")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeSwitchControl"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeSwitchControl")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeTabContent"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeTabContent")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeTabs"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeTabs")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeTextCard"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeTextCard")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeTextParagraph"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeTextParagraph")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeTextRichEditor"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeTextRichEditor")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeTextForm"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeTextForm")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeTime"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeTime")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("PrimeToolbar"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("PrimeToolbar")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("UI_Snippets")], zeroConcertPos), TreeNode("header", CText("UI Snippets"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("ExpanderMenu"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("ExpanderMenu")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("ShadowedText"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("ShadowedText")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("MouseTracking"), TreeNode("action", CLambda([], CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("MouseTracking")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Wraps current element"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("text", CText("DraggableArea"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("DraggableArea")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("DragDropRestricted"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("DragDropRestricted")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("TimerElement"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("TimerElement")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Graphics_Snippets")], zeroConcertPos), TreeNode("header", CText("Graphics Snippets"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Scale graphics"), TreeNode("action", CLambda([], CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("ScaleGraphics")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Wraps current element (graphics only)"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("text", CText("Rotate graphics"), TreeNode("action", CLambda([], CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("RotateGraphics")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Wraps current element (graphics only)"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("text", CText("Translate graphics"), TreeNode("action", CLambda([], CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("TranslateGraphics")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Wraps current element (graphics only)"), TreeEmpty(), TreeEmpty(), 1), 2)), CObject(TreeNode("text", CText("Shear graphics"), TreeNode("action", CLambda([], CCall(CVar("__wrapIntoElementByName", zeroConcertPos), [CText("ShearGraphics")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Wraps current element (graphics only)"), TreeEmpty(), TreeEmpty(), 1), 2))]), TreeEmpty(), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Wigi_Snippets")], zeroConcertPos), TreeNode("header", CText("Wigi Snippets"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("SetWigi Button"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("SetWigiButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("GetWigi Button"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("GetWigiButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("SubscribeToWigi Button"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("SubscribeToWigiButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("UnsubscribeFromWigi Button"), TreeNode("action", CLambda([], CCall(CVar("__insertElementByName", zeroConcertPos), [CText("UnsubscribeFromWigiButton")], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeNode("isVisible", CCall(CVar("isDefined", zeroConcertPos), [CText("wigi")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos), CCall(CVar("buildConcertDBSnippetExpanderMenu", zeroConcertPos), [], zeroConcertPos), CCall(CVar("ExpanderMenu", zeroConcertPos), [CObject(TreeNode("hintMarker", CCall(CVar("__getHintMarkerByName", zeroConcertPos), [CText("Examples")], zeroConcertPos), TreeNode("header", CText("Examples"), TreeNode("color", CInt(8069026), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("items", CArray(CArrayView(0, 0), [CObject(TreeNode("text", CText("Memory game"), TreeNode("action", CLambda([], CCall(CVar("insertBlockFromDB", zeroConcertPos), [CQuote(CCall(CVar("filter", zeroConcertPos), [CVar("concert_objects", zeroConcertPos), CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("memory_game")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("15 puzzle"), TreeNode("action", CLambda([], CCall(CVar("insertBlockFromDB", zeroConcertPos), [CQuote(CCall(CVar("filter", zeroConcertPos), [CVar("concert_objects", zeroConcertPos), CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("15_puzzle")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CObject(TreeNode("text", CText("Clickable graph"), TreeNode("action", CLambda([], CCall(CVar("insertBlockFromDB", zeroConcertPos), [CQuote(CCall(CVar("filter", zeroConcertPos), [CVar("concert_objects", zeroConcertPos), CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("clickable_graph")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), TreeNode("isVisible", CCall(CVar("isDefined", zeroConcertPos), [CText("ssql")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))], zeroConcertPos)])], zeroConcertPos)),
	];
}

getConcertPairs18() -> [Pair<string, Concert>] {
	[

		Pair("interleave", CLambda(["a", "separator"], CLet("l", CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("<=", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("a", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("l", zeroConcertPos), CInt(2)], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("separator", zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CInt(1)], zeroConcertPos)]), CLet("h", CCallBuiltin("TRUNC", [CCallBuiltin("/", [CVar("l", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), CCall(CVar("concat3", zeroConcertPos), [CCall(CVar("interleave", zeroConcertPos), [CCall(CVar("subrange", zeroConcertPos), [CVar("a", zeroConcertPos), CInt(0), CVar("h", zeroConcertPos)], zeroConcertPos), CVar("separator", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("separator", zeroConcertPos)]), CCall(CVar("interleave", zeroConcertPos), [CCall(CVar("subrange", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("h", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CVar("h", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("separator", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("interruptibleTimer", CLambda(["duration", "callback"], CLet("execute", CCall(CVar("createVar", zeroConcertPos), [CBool(true)], zeroConcertPos), CSequence([CCall(CVar("timer", zeroConcertPos), [CVar("duration", zeroConcertPos), CLambda([], CSequence([CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("execute", zeroConcertPos)], zeroConcertPos), CCall(CVar("callback", zeroConcertPos), [], zeroConcertPos), CEmpty(), zeroConcertPos), CCallBuiltin("deactivate", [CVar("execute", zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("execute", zeroConcertPos), CBool(false)], zeroConcertPos))]), zeroConcertPos))),
		Pair("intersectionCircles", CLambda(["circle1", "circle2"], CLet("c01", CCall(CVar("getCircleGeneralForm", zeroConcertPos), [CVar("circle1", zeroConcertPos)], zeroConcertPos), CLet("c02", CCall(CVar("getCircleGeneralForm", zeroConcertPos), [CVar("circle2", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("!=", [CVar("c01", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CVar("c02", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("c1", CObject(TreeNode("x0", CInt(0), TreeNode("r", CCallBuiltin("dot", [CVar("c01", zeroConcertPos), CText("r")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("y0", CInt(0), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("dx", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("c02", zeroConcertPos), CText("x0")], zeroConcertPos), CCallBuiltin("dot", [CVar("c01", zeroConcertPos), CText("x0")], zeroConcertPos)], zeroConcertPos), CLet("dy", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("c02", zeroConcertPos), CText("y0")], zeroConcertPos), CCallBuiltin("dot", [CVar("c01", zeroConcertPos), CText("y0")], zeroConcertPos)], zeroConcertPos), CLet("d", CCall(CVar("distance", zeroConcertPos), [CCall(CVar("Point", zeroConcertPos), [CDouble(0.0), CDouble(0.0)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CVar("dx", zeroConcertPos), CVar("dy", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("c2", CObject(TreeNode("x0", CVar("d", zeroConcertPos), TreeNode("r", CCallBuiltin("dot", [CVar("c02", zeroConcertPos), CText("r")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("y0", CInt(0), TreeEmpty(), TreeEmpty(), 1), 2)), CIf(CCallBuiltin("==", [CVar("d", zeroConcertPos), CInt(0)], zeroConcertPos), CArray(CArrayView(0, 0), []), CLet("xres0", CCallBuiltin("/", [CCallBuiltin("+", [CCallBuiltin("-", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("c1", zeroConcertPos), CText("r")], zeroConcertPos), CCallBuiltin("dot", [CVar("c1", zeroConcertPos), CText("r")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("c2", zeroConcertPos), CText("r")], zeroConcertPos), CCallBuiltin("dot", [CVar("c2", zeroConcertPos), CText("r")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("d", zeroConcertPos), CVar("d", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CInt(2), CVar("d", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("yresSq", CCallBuiltin("-", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("c1", zeroConcertPos), CText("r")], zeroConcertPos), CCallBuiltin("dot", [CVar("c1", zeroConcertPos), CText("r")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("xres0", zeroConcertPos), CVar("xres0", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("eps", CCallBuiltin("*", [CDouble(1.0), CCallBuiltin("^", [CDouble(10.0), CInt(-8)], zeroConcertPos)], zeroConcertPos), CLet("ps", CIf(CCallBuiltin("<", [CVar("yresSq", zeroConcertPos), CCallBuiltin("-", [CInt(0), CVar("eps", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), []), CIf(CCallBuiltin("&&", [CCallBuiltin("<", [CVar("yresSq", zeroConcertPos), CVar("eps", zeroConcertPos)], zeroConcertPos), CCallBuiltin(">", [CVar("yresSq", zeroConcertPos), CCallBuiltin("-", [CInt(0), CVar("eps", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("Point", zeroConcertPos), [CVar("xres0", zeroConcertPos), CInt(0)], zeroConcertPos)]), CLet("yres", CCallBuiltin("SQRT", [CVar("yresSq", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("Point", zeroConcertPos), [CVar("xres0", zeroConcertPos), CVar("yres", zeroConcertPos)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CVar("xres0", zeroConcertPos), CCallBuiltin("-", [CInt(0), CVar("yres", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("dx", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("angle", CCallBuiltin("ATAN2", [CVar("dy", zeroConcertPos), CVar("dx", zeroConcertPos)], zeroConcertPos), CLet("s", CCallBuiltin("SIN", [CVar("angle", zeroConcertPos)], zeroConcertPos), CLet("c", CCallBuiltin("COS", [CVar("angle", zeroConcertPos)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CVar("ps", zeroConcertPos), CLambda(["p"], CLet("p1", CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("-", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("+", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("c01", zeroConcertPos), CText("x0")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("c01", zeroConcertPos), CText("y0")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CVar("ps", zeroConcertPos), CLambda(["p"], CLet("px", CIf(CCallBuiltin(">", [CVar("dy", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("-", [CInt(0), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("p1", CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("+", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("c01", zeroConcertPos), CText("x0")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("c01", zeroConcertPos), CText("y0")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CArray(CArrayView(0, 0), []), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("intersectionLineEllipse", CLambda(["line", "ellipse"], CLet("e", CCall(CVar("getEllipseGeneralForm", zeroConcertPos), [CVar("ellipse", zeroConcertPos)], zeroConcertPos), CLet("l0", CCall(CVar("getLineTwoPointsForm", zeroConcertPos), [CVar("line", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("!=", [CVar("e", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CVar("l0", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("lShifted", CObject(TreeNode("x2", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("l0", zeroConcertPos), CText("x2")], zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("x0")], zeroConcertPos)], zeroConcertPos), TreeNode("x1", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("l0", zeroConcertPos), CText("x1")], zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("x0")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("y1", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("l0", zeroConcertPos), CText("y1")], zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("y0")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeNode("y2", CCallBuiltin("-", [CCallBuiltin("dot", [CVar("l0", zeroConcertPos), CText("y2")], zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("y0")], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("l", CCall(CVar("lineTwoPoints2lineGeneral", zeroConcertPos), [CVar("lShifted", zeroConcertPos)], zeroConcertPos), CLet("ebsq", CCallBuiltin("*", [CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("b")], zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("b")], zeroConcertPos)], zeroConcertPos), CLet("easq", CCallBuiltin("*", [CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("a")], zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos), CLet("lbsq", CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("b")], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("b")], zeroConcertPos)], zeroConcertPos), CLet("shiftPointBack", CLambda(["x", "y"], CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("+", [CVar("x", zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("x0")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("y", zeroConcertPos), CCallBuiltin("dot", [CVar("e", zeroConcertPos), CText("y0")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLet("ps", CIf(CCallBuiltin("==", [CVar("lbsq", zeroConcertPos), CInt(0)], zeroConcertPos), CLet("eqA", CVar("easq", zeroConcertPos), CLet("eqB", CInt(0), CLet("eqC", CCallBuiltin("*", [CVar("ebsq", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("/", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("c")], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("c")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("a")], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("easq", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("ys", CCall(CVar("solveQuadraticEquation", zeroConcertPos), [CVar("eqA", zeroConcertPos), CVar("eqB", zeroConcertPos), CVar("eqC", zeroConcertPos)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CVar("ys", zeroConcertPos), CLambda(["y"], CLet("x", CCallBuiltin("/", [CCallBuiltin("-", [CInt(0), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("c")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos), CCall(CVar("shiftPointBack", zeroConcertPos), [CVar("x", zeroConcertPos), CVar("y", zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("eqA", CCallBuiltin("+", [CVar("ebsq", zeroConcertPos), CCallBuiltin("/", [CCallBuiltin("*", [CCallBuiltin("*", [CVar("easq", zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos), CVar("lbsq", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("eqB", CCallBuiltin("/", [CCallBuiltin("*", [CCallBuiltin("*", [CCallBuiltin("*", [CInt(2), CVar("easq", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("c")], zeroConcertPos)], zeroConcertPos), CVar("lbsq", zeroConcertPos)], zeroConcertPos), CLet("eqC", CCallBuiltin("*", [CVar("easq", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("/", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("c")], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("c")], zeroConcertPos)], zeroConcertPos), CVar("lbsq", zeroConcertPos)], zeroConcertPos), CVar("ebsq", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("xs", CCall(CVar("solveQuadraticEquation", zeroConcertPos), [CVar("eqA", zeroConcertPos), CVar("eqB", zeroConcertPos), CVar("eqC", zeroConcertPos)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CVar("xs", zeroConcertPos), CLambda(["x"], CLet("y", CCallBuiltin("/", [CCallBuiltin("*", [CInt(-1), CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("a")], zeroConcertPos), CVar("x", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("c")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("l", zeroConcertPos), CText("b")], zeroConcertPos)], zeroConcertPos), CCall(CVar("shiftPointBack", zeroConcertPos), [CVar("x", zeroConcertPos), CVar("y", zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCall(CVar("filter", zeroConcertPos), [CVar("ps", zeroConcertPos), CLambda(["p"], CCall(CVar("isPointInside", zeroConcertPos), [CVar("p", zeroConcertPos), CVar("l0", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CArray(CArrayView(0, 0), []), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("intersectionLines", CLambda(["line1", "line2"], CLet("ltwoPoints1", CCall(CVar("getLineTwoPointsForm", zeroConcertPos), [CVar("line1", zeroConcertPos)], zeroConcertPos), CLet("ltwoPoints2", CCall(CVar("getLineTwoPointsForm", zeroConcertPos), [CVar("line2", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("!=", [CVar("ltwoPoints1", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("!=", [CVar("ltwoPoints2", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("l1", CCall(CVar("lineTwoPoints2lineGeneral", zeroConcertPos), [CVar("ltwoPoints1", zeroConcertPos)], zeroConcertPos), CLet("l2", CCall(CVar("lineTwoPoints2lineGeneral", zeroConcertPos), [CVar("ltwoPoints2", zeroConcertPos)], zeroConcertPos), CLet("denominator", CCallBuiltin("-", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l1", zeroConcertPos), CText("a")], zeroConcertPos), CCallBuiltin("dot", [CVar("l2", zeroConcertPos), CText("b")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l2", zeroConcertPos), CText("a")], zeroConcertPos), CCallBuiltin("dot", [CVar("l1", zeroConcertPos), CText("b")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("denominator", zeroConcertPos), CInt(0)], zeroConcertPos), CArray(CArrayView(0, 0), []), CLet("xres", CCallBuiltin("/", [CCallBuiltin("-", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l1", zeroConcertPos), CText("b")], zeroConcertPos), CCallBuiltin("dot", [CVar("l2", zeroConcertPos), CText("c")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l2", zeroConcertPos), CText("b")], zeroConcertPos), CCallBuiltin("dot", [CVar("l1", zeroConcertPos), CText("c")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("denominator", zeroConcertPos)], zeroConcertPos), CLet("yres", CCallBuiltin("/", [CCallBuiltin("-", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l1", zeroConcertPos), CText("c")], zeroConcertPos), CCallBuiltin("dot", [CVar("l2", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("l2", zeroConcertPos), CText("c")], zeroConcertPos), CCallBuiltin("dot", [CVar("l1", zeroConcertPos), CText("a")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("denominator", zeroConcertPos)], zeroConcertPos), CLet("pres", CCall(CVar("Point", zeroConcertPos), [CVar("xres", zeroConcertPos), CVar("yres", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCall(CVar("isPointInside", zeroConcertPos), [CVar("pres", zeroConcertPos), CVar("ltwoPoints1", zeroConcertPos)], zeroConcertPos), CCall(CVar("isPointInside", zeroConcertPos), [CVar("pres", zeroConcertPos), CVar("ltwoPoints2", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("pres", zeroConcertPos)]), CArray(CArrayView(0, 0), []), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CArray(CArrayView(0, 0), []), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("isArray", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Array")], zeroConcertPos))),
		Pair("isAsCode", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("AsCode")], zeroConcertPos))),
		Pair("isBetween", CLambda(["x", "a", "b"], CCallBuiltin("&&", [CCallBuiltin(">=", [CVar("x", zeroConcertPos), CVar("a", zeroConcertPos)], zeroConcertPos), CCallBuiltin("<=", [CVar("x", zeroConcertPos), CVar("b", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("isCodingStructure", CLambda(["x"], CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("Var"), CText("Set"), CText("Let"), CText("Formula"), CText("Lambda"), CText("If"), CText("CallBuiltin"), CText("Call"), CText("Sequence"), CText("Quote"), CText("Unquote")]), CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("isDigit", CLambda(["s"], CCallBuiltin("&&", [CCallBuiltin("==", [CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin(">=", [CVar("s", zeroConcertPos), CText("0")], zeroConcertPos), CCallBuiltin("<=", [CVar("s", zeroConcertPos), CText("9")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("isDigits", CLambda(["s"], CCall(CVar("isDigits0", zeroConcertPos), [CVar("s", zeroConcertPos), CInt(0), CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("isDigits0", CLambda(["s", "index", "len"], CIf(CCallBuiltin("<", [CVar("index", zeroConcertPos), CVar("len", zeroConcertPos)], zeroConcertPos), CCallBuiltin("&&", [CCall(CVar("isDigit", zeroConcertPos), [CCallBuiltin("getCharAt", [CVar("s", zeroConcertPos), CVar("index", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("isDigits0", zeroConcertPos), [CVar("s", zeroConcertPos), CCallBuiltin("+", [CVar("index", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("len", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin(">", [CVar("len", zeroConcertPos), CInt(0)], zeroConcertPos), zeroConcertPos))),
		Pair("isDouble", CLambda(["s"], CLet("s1", CCall(CVar("trim", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CLet("s", CIf(CCallBuiltin("==", [CCallBuiltin("getCharAt", [CVar("s1", zeroConcertPos), CInt(0)], zeroConcertPos), CText("-")], zeroConcertPos), CCall(CVar("strRight", zeroConcertPos), [CVar("s1", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("s1", zeroConcertPos), zeroConcertPos), CLet("arr", CCall(CVar("strSplit", zeroConcertPos), [CVar("s", zeroConcertPos), CText(".")], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin(">=", [CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin("<", [CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos), CInt(3)], zeroConcertPos), CCall(CVar("all", zeroConcertPos), [CCall(CVar("mapi", zeroConcertPos), [CVar("arr", zeroConcertPos), CLambda(["i", "el"], CCallBuiltin("||", [CCallBuiltin("==", [CVar("el", zeroConcertPos), CText("")], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("isDigits", zeroConcertPos), [CCallBuiltin("strReplace", [CVar("el", zeroConcertPos), CText(","), CText("")], zeroConcertPos)], zeroConcertPos), CCall(CVar("isDigits", zeroConcertPos), [CVar("el", zeroConcertPos)], zeroConcertPos), zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("isEmptyList", CLambda(["list"], CCallBuiltin("==", [CCallBuiltin("length", [CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("list", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos))),
		Pair("isExternal", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("External")], zeroConcertPos))),
		Pair("isGraphics", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Graphics")], zeroConcertPos))),
		Pair("isHierarchy", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Hierarchy")], zeroConcertPos))),
		Pair("isInt", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Int")], zeroConcertPos))),
		Pair("isLambda", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Lambda")], zeroConcertPos))),
		Pair("isLetter", CLambda(["s"], CCallBuiltin("&&", [CCallBuiltin("==", [CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("&&", [CCallBuiltin(">=", [CVar("s", zeroConcertPos), CText("a")], zeroConcertPos), CCallBuiltin("<=", [CVar("s", zeroConcertPos), CText("z")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin(">=", [CVar("s", zeroConcertPos), CText("A")], zeroConcertPos), CCallBuiltin("<=", [CVar("s", zeroConcertPos), CText("Z")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("isMultiline", CLambda(["s"], CCallBuiltin("!=", [CCallBuiltin("strIndexOf", [CVar("s", zeroConcertPos), CText("\n")], zeroConcertPos), CInt(-1)], zeroConcertPos))),
		Pair("isObject", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Object")], zeroConcertPos))),
		Pair("isPointInside", CLambda(["p", "box"], CLet("x1", CCallBuiltin("dot", [CVar("box", zeroConcertPos), CText("x1")], zeroConcertPos), CLet("x2", CCallBuiltin("dot", [CVar("box", zeroConcertPos), CText("x2")], zeroConcertPos), CLet("y1", CCallBuiltin("dot", [CVar("box", zeroConcertPos), CText("y1")], zeroConcertPos), CLet("y2", CCallBuiltin("dot", [CVar("box", zeroConcertPos), CText("y2")], zeroConcertPos), CLet("rx", CIf(CCallBuiltin("<", [CVar("x1", zeroConcertPos), CVar("x2", zeroConcertPos)], zeroConcertPos), CCall(CVar("isBetween", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CVar("x1", zeroConcertPos), CVar("x2", zeroConcertPos)], zeroConcertPos), CCall(CVar("isBetween", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CVar("x2", zeroConcertPos), CVar("x1", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("ry", CIf(CCallBuiltin("<", [CVar("y1", zeroConcertPos), CVar("y2", zeroConcertPos)], zeroConcertPos), CCall(CVar("isBetween", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos), CVar("y1", zeroConcertPos), CVar("y2", zeroConcertPos)], zeroConcertPos), CCall(CVar("isBetween", zeroConcertPos), [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos), CVar("y2", zeroConcertPos), CVar("y1", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCallBuiltin("&&", [CVar("rx", zeroConcertPos), CVar("ry", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("isSet", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Set")], zeroConcertPos))),
		Pair("isSnippet", CLambda(["x"], CLet("obj", CCall(CVar("concert2object", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CCallBuiltin("&&", [CCallBuiltin("==", [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("__type")], zeroConcertPos), CText("Call")], zeroConcertPos), CCall(CVar("isObject", zeroConcertPos), [CCall(CVar("firstElement", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("children")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("isText", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Text")], zeroConcertPos))),
		Pair("isVar", CLambda(["x"], CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos), CText("Var")], zeroConcertPos))),
		Pair("iter", CLambda(["a", "fn"], CCall(CVar("__iter", zeroConcertPos), [CInt(0), CVar("a", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("iterObj", CLambda(["obj", "fn"], CCall(CVar("iter", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("iteri", CLambda(["a", "fn"], CCall(CVar("__iteri", zeroConcertPos), [CInt(0), CVar("a", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("iteriUntil", CLambda(["a", "fn"], CCall(CVar("__iteriUntil", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("fn", zeroConcertPos), CInt(0)], zeroConcertPos))),
		Pair("lastfind", CLambda(["a", "fn", "def"], CCall(CVar("find", zeroConcertPos), [CCall(CVar("reverse", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos), CVar("fn", zeroConcertPos), CVar("def", zeroConcertPos)], zeroConcertPos))),
		Pair("lastfindi", CLambda(["a", "fn", "def"], CCallBuiltin("-", [CCallBuiltin("-", [CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("findi", zeroConcertPos), [CCall(CVar("reverse", zeroConcertPos), [CVar("a", zeroConcertPos)], zeroConcertPos), CVar("fn", zeroConcertPos), CVar("def", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("lengthVector", CLambda(["v"], CCallBuiltin("SQRT", [CCall(CVar("dotProduct2D", zeroConcertPos), [CVar("v", zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("lineTwoPoints2lineGeneral", CLambda(["line"], CLet("x1", CCallBuiltin("dot", [CVar("line", zeroConcertPos), CText("x1")], zeroConcertPos), CLet("y1", CCallBuiltin("dot", [CVar("line", zeroConcertPos), CText("y1")], zeroConcertPos), CLet("x2", CCallBuiltin("dot", [CVar("line", zeroConcertPos), CText("x2")], zeroConcertPos), CLet("y2", CCallBuiltin("dot", [CVar("line", zeroConcertPos), CText("y2")], zeroConcertPos), CObject(TreeNode("b", CCallBuiltin("-", [CVar("x2", zeroConcertPos), CVar("x1", zeroConcertPos)], zeroConcertPos), TreeNode("a", CCallBuiltin("-", [CVar("y1", zeroConcertPos), CVar("y2", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("c", CCallBuiltin("-", [CCallBuiltin("*", [CVar("x1", zeroConcertPos), CVar("y2", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CVar("x2", zeroConcertPos), CVar("y1", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("listenToEvents", CLambda(["sourceEditorName", "destEditorName", "filter"], CCall(CVar("onEditorUpdate", zeroConcertPos), [CVar("sourceEditorName", zeroConcertPos), CLambda(["state"], CLet("event", CCallBuiltin("dot", [CVar("state", zeroConcertPos), CText("event")], zeroConcertPos), CIf(CCall(CVar("filter", zeroConcertPos), [CVar("event", zeroConcertPos)], zeroConcertPos), CCall(CVar("sendEventSerialized", zeroConcertPos), [CVar("destEditorName", zeroConcertPos), CCallBuiltin("dot", [CVar("event", zeroConcertPos), CText("fullEvent")], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos), zeroConcertPos))], zeroConcertPos))),
		Pair("lpad", CLambda(["s", "c", "l"], CIf(CCallBuiltin("<", [CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CVar("l", zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("c", zeroConcertPos), CCall(CVar("lpad", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("c", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("s", zeroConcertPos), zeroConcertPos))),
		Pair("ltrim2", CLambda(["s", "ugly"], CIf(CCallBuiltin("==", [CVar("ugly", zeroConcertPos), CText("")], zeroConcertPos), CVar("s", zeroConcertPos), CLet("l", CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CLet("e", CCall(CVar("countUntil", zeroConcertPos), [CInt(0), CVar("l", zeroConcertPos), CLambda(["i"], CCallBuiltin("==", [CCallBuiltin("strIndexOf", [CVar("ugly", zeroConcertPos), CCallBuiltin("getCharAt", [CVar("s", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CInt(-1)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("e", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("s", zeroConcertPos), CCall(CVar("strRight", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("e", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("makeArrayMutable", CLambda(["baseVarName", "arr", "config"], CLet("arrayLength", CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos), CLet("arrayLengthName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_length")])], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("arrayLengthName", zeroConcertPos), CVar("arrayLength", zeroConcertPos)], zeroConcertPos), CSequence([CIf(CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("arrayLengthName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSet("extraVars", CCall(CVar("arrayPush", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("arrayLengthName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos), CLet("toRemove", CInt(-1), CLet("toRemoveName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_toRemove")])], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("toRemoveName", zeroConcertPos), CVar("toRemove", zeroConcertPos)], zeroConcertPos), CSequence([CIf(CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("toRemoveName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSet("extraVars", CCall(CVar("arrayPush", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("toRemoveName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos), CLet("obj", CCallBuiltin("array2object", [CCall(CVar("mapi", zeroConcertPos), [CVar("arr", zeroConcertPos), CLambda(["i", "v"], CCallBuiltin("makeKeyValue", [CCallBuiltin("+", [CText("item"), CCall(CVar("unparse", zeroConcertPos), [CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CLet("onChangeAdd", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CCallBuiltin("setKeyObj", [CCall(CVar("getObjFromVars", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CVar("obj", zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CText("item"), CCall(CVar("unparse", zeroConcertPos), [CVar("arrayLength", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("arrayLength", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("arr", zeroConcertPos), CCallBuiltin("-", [CVar("arrayLength", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CText("New item"), zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), CLet("addItemFormulaName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("arrayLengthName", zeroConcertPos), CText("_compare")])], zeroConcertPos), CSequence([CSet("formulas", CCall(CVar("arrayPush", zeroConcertPos), [CVar("formulas", zeroConcertPos), CVar("addItemFormulaName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("addItemFormulaName", zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("getVar", zeroConcertPos), [CVar("arrayLengthName", zeroConcertPos)], zeroConcertPos), CVar("arrayLength", zeroConcertPos)], zeroConcertPos), CSequence([CSet("blockUpdatesFlag", CBool(false), zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("addItemFormulaName", zeroConcertPos)], zeroConcertPos), CCall(CVar("onChangeAdd", zeroConcertPos), [], zeroConcertPos)])]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("arrayLengthName", zeroConcertPos)])], zeroConcertPos), CLet("onChangeRemove", CLambda(["idxToRemove"], CIf(CCallBuiltin("!=", [CVar("arrayLength", zeroConcertPos), CInt(1)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CCall(CVar("filteri", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CCall(CVar("getObjFromVars", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CVar("obj", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos))], zeroConcertPos), CLambda(["i", "x"], CCallBuiltin("!=", [CVar("i", zeroConcertPos), CVar("idxToRemove", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos)), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("toRemoveName", zeroConcertPos), CText("_compare")])], zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("getVar", zeroConcertPos), [CVar("toRemoveName", zeroConcertPos)], zeroConcertPos), CInt(-1)], zeroConcertPos), CSequence([CSet("blockUpdatesFlag", CBool(false), zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("toRemoveName", zeroConcertPos), CText("_compare")])], zeroConcertPos)], zeroConcertPos), CCall(CVar("onChangeRemove", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("toRemoveName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)])]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("toRemoveName", zeroConcertPos)])], zeroConcertPos), CCallBuiltin("Lines", [CCall(CVar("arrayPush", zeroConcertPos), [CCall(CVar("mapi", zeroConcertPos), [CCall(CVar("makeObjectMutable", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CVar("obj", zeroConcertPos), CVar("config", zeroConcertPos), CBool(true)], zeroConcertPos), CLambda(["i", "item"], CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("toRemoveName", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("remove"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), CVar("item", zeroConcertPos)]))], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("arrayLengthName", zeroConcertPos), CCallBuiltin("+", [CCall(CVar("getVar", zeroConcertPos), [CVar("arrayLengthName", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("add"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos))),
		Pair("makeAsCode", CLambda(["value", "width", "height"], CCall(CVar("object2concert", zeroConcertPos), [CObject(TreeNode("size", CCall(CVar("WidthHeight", zeroConcertPos), [CVar("width", zeroConcertPos), CVar("height", zeroConcertPos)], zeroConcertPos), TreeNode("__type", CText("AsCode"), TreeEmpty(), TreeNode("parsed", CVar("value", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("syntax", CCall(CVar("unparse", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))], zeroConcertPos))),

	];
}

getConcertPairs19() -> [Pair<string, Concert>] {
	[
		Pair("makeCallback", CLambda(["fn"], CLet("randomName1", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("randomName1", zeroConcertPos), CVar("randomName1", zeroConcertPos)], zeroConcertPos), CLet("randomName2", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("runFnName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("runFnName", zeroConcertPos), CLambda(["x"], CCall(CVar("fn", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("randomName2", zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("getVar", zeroConcertPos), [CVar("randomName1", zeroConcertPos)], zeroConcertPos), CVar("randomName1", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("call", zeroConcertPos), [CVar("runFnName", zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("getVar", zeroConcertPos), [CVar("randomName1", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("randomName1", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("randomName2", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("runFnName", zeroConcertPos)], zeroConcertPos)])])]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("randomName1", zeroConcertPos)])], zeroConcertPos), CVar("randomName1", zeroConcertPos)])]), zeroConcertPos), zeroConcertPos)]), zeroConcertPos))),
		Pair("makeDynamic", CLambda(["fn", "parameters"], CLet("varsToTrack", CCall(CVar("filter", zeroConcertPos), [CVar("parameters", zeroConcertPos), CVar("isText", zeroConcertPos)], zeroConcertPos), CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("updateVar", zeroConcertPos), [CText("__namesStorageName"), CLambda(["storage"], CCall(CVar("arrayPush", zeroConcertPos), [CVar("storage", zeroConcertPos), CVar("fname", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("fn", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CVar("parameters", zeroConcertPos), CLambda(["v"], CIf(CCall(CVar("isText", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), CVar("v", zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), CVar("varsToTrack", zeroConcertPos)], zeroConcertPos)]), zeroConcertPos), zeroConcertPos))),
		Pair("makeEditableChild", CLambda(["baseVarName"], CLet("toEditName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_toEdit")])], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("toEditName", zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CIf(CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("toEditName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSet("extraVars", CCall(CVar("arrayPush", zeroConcertPos), [CVar("extraVars", zeroConcertPos), CVar("toEditName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos), CLet("getConstructName", CLambda(["v"], CIf(CCall(CVar("isSnippet", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CText("Set")], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("v", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("concert2string", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("onEdit", CLambda([], CLet("doc", CCallBuiltin("quote", [CCall(CVar("getCurrentDocument", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CSet("__childEditingStack", CCall(CVar("Cons", zeroConcertPos), [CObject(TreeNode("name", CCall(CVar("getConstructName", zeroConcertPos), [CCall(CVar("getCurrentElement", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeNode("callback", CLambda(["nval"], CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CVar("doc", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CSequence([CCall(CVar("sendEvent", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("CursorMovement"), TreeNode("destination", CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("head")], zeroConcertPos), CText("path")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos), CSequence([CSet("blockUpdatesFlag", CBool(false), zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CVar("nval", zeroConcertPos)], zeroConcertPos), CSet("__childEditingStack", CCallBuiltin("dot", [CVar("__childEditingStack", zeroConcertPos), CText("tail")], zeroConcertPos), zeroConcertPos)])])])])), TreeEmpty(), TreeEmpty(), 1), TreeNode("path", CCall(CVar("getCurrentPath", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CVar("__childEditingStack", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("sendEvent", zeroConcertPos), [CVar("__mainEditorName", zeroConcertPos), CObject(TreeNode("name", CText("NewDocument"), TreeEmpty(), TreeNode("value", CCall(CVar("getVisualElement", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("baseVarName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos)]), zeroConcertPos)), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("toEditName", zeroConcertPos), CText("_compare")])], zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("getVar", zeroConcertPos), [CVar("toEditName", zeroConcertPos)], zeroConcertPos), CBool(false)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("toEditName", zeroConcertPos), CText("_compare")])], zeroConcertPos)], zeroConcertPos), CCall(CVar("onEdit", zeroConcertPos), [], zeroConcertPos)]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("toEditName", zeroConcertPos)])], zeroConcertPos), CLet("value", CCall(CVar("getVar", zeroConcertPos), [CVar("baseVarName", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("getConstructName", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CText("IconButton"), CArray(CArrayView(0, 0), [CObject(TreeNode("color", CInt(0), TreeNode("action", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("toEditName", zeroConcertPos), CBool(true)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("icon", CText("edit"), TreeEmpty(), TreeNode("width", CDouble(32.0), TreeEmpty(), TreeEmpty(), 1), 2), 3))])], zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos), zeroConcertPos)])]), zeroConcertPos))),
		Pair("makeExternal", CLambda(["name", "args"], CCall(CVar("object2concert", zeroConcertPos), [CObject(TreeNode("name", CVar("name", zeroConcertPos), TreeNode("__type", CText("External"), TreeEmpty(), TreeEmpty(), 1), TreeNode("parameters", CVar("args", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))),
		Pair("makeGradientPoint", CLambda(["baseVarName", "value"], CLet("colorName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_color")])], zeroConcertPos), CLet("alphaName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_alpha")])], zeroConcertPos), CLet("offsetName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_offset")])], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("colorName", zeroConcertPos), CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("color")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("alphaName", zeroConcertPos), CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("alpha")], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("offsetName", zeroConcertPos), CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("offset")], zeroConcertPos)], zeroConcertPos), CSequence([CSet("extraVars", CCallBuiltin("concat", [CVar("extraVars", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("colorName", zeroConcertPos), CVar("alphaName", zeroConcertPos), CVar("offsetName", zeroConcertPos)])], zeroConcertPos), zeroConcertPos), CSequence([CSet("baseVars", CCall(CVar("arrayPush", zeroConcertPos), [CVar("baseVars", zeroConcertPos), CVar("baseVarName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("currentValuesName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos), CObject(TreeNode("color", CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("color")], zeroConcertPos), TreeNode("alpha", CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("alpha")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("offset", CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("offset")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CLet("onChange", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CSequence([CCall(CVar("iterObj", zeroConcertPos), [CObject(TreeNode("color", CVar("colorName", zeroConcertPos), TreeNode("alpha", CVar("alphaName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("offset", CVar("offsetName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2)), CLambda(["kv"], CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CText("_compare")])], zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCallBuiltin("dot", [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos), CCallBuiltin("setKeyObj", [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("onChange", zeroConcertPos), [], zeroConcertPos)]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)])], zeroConcertPos))], zeroConcertPos), CCallBuiltin("Lines", [CArray(CArrayView(0, 0), [CCallBuiltin("Tree", [CText("color"), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("varColor", CVar("colorName", zeroConcertPos), TreeEmpty(), TreeNode("varOpacity", CVar("alphaName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)])], zeroConcertPos), CCallBuiltin("Tree", [CText("offset"), CArray(CArrayView(0, 0), [CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("offsetName", zeroConcertPos), TreeNode("step", CDouble(0.1), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)])], zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos)]), zeroConcertPos)])])])])]), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("makeList", CLambda([], CCall(CVar("EmptyList", zeroConcertPos), [], zeroConcertPos))),
		Pair("makeList1", CLambda(["element"], CCall(CVar("Cons", zeroConcertPos), [CVar("element", zeroConcertPos), CCall(CVar("EmptyList", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos))),
		Pair("makeObjectMutable", CLambda(["baseVarName", "obj", "config", "forArray"], CLet("values", CCall(CVar("mapObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CVar("quote", zeroConcertPos)], zeroConcertPos), CLet("tempVars", CCall(CVar("mapObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CLambda(["kv"], CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("baseVarName", zeroConcertPos), CText("_"), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)])], zeroConcertPos))], zeroConcertPos), CLet("currentValuesName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos), CVar("values", zeroConcertPos)], zeroConcertPos), CSequence([CSet("extraVars", CCallBuiltin("concat", [CVar("extraVars", zeroConcertPos), CCall(CVar("getObjectValues", zeroConcertPos), [CVar("tempVars", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CSet("baseVars", CCall(CVar("arrayPush", zeroConcertPos), [CVar("baseVars", zeroConcertPos), CVar("baseVarName", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CLet("mutObj", CCall(CVar("mapObj", zeroConcertPos), [CVar("tempVars", zeroConcertPos), CLambda(["kv"], CLet("propKey", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CLet("tv", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("tv", zeroConcertPos), CCallBuiltin("dot", [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("values", zeroConcertPos), CVar("propKey", zeroConcertPos)], zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CLet("getPropType", CLambda([], CIf(CCallBuiltin("==", [CVar("config", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("getType", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("values", zeroConcertPos), CVar("propKey", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("config", zeroConcertPos), CVar("propKey", zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("mutable", CIf(CCall(CVar("isText", zeroConcertPos), [CVar("config", zeroConcertPos)], zeroConcertPos), CCall(CVar("getMutable", zeroConcertPos), [CVar("tv", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos), CVar("config", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isObject", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Lines", [CCall(CVar("makeObjectMutable", zeroConcertPos), [CVar("tv", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos), CIf(CVar("forArray", zeroConcertPos), CVar("config", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("config", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCall(CVar("getPropType", zeroConcertPos), [], zeroConcertPos), zeroConcertPos), zeroConcertPos), CBool(false)], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isArray", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("makeArrayMutable", zeroConcertPos), [CVar("tv", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CVar("forArray", zeroConcertPos), CCallBuiltin("!=", [CVar("config", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("config", zeroConcertPos), CCall(CVar("firstElement", zeroConcertPos), [CCall(CVar("getPropType", zeroConcertPos), [], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isLambda", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("config", zeroConcertPos), CVar("propKey", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CCall(CVar("getKeyObj", zeroConcertPos), [CVar("config", zeroConcertPos), CVar("propKey", zeroConcertPos)], zeroConcertPos), [CVar("tv", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("neededType", CIf(CCallBuiltin("&&", [CVar("forArray", zeroConcertPos), CCallBuiltin("!=", [CVar("config", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("config", zeroConcertPos), CCall(CVar("getPropType", zeroConcertPos), [], zeroConcertPos), zeroConcertPos), CLet("propType", CIf(CCall(CVar("contains", zeroConcertPos), [CVar("propPanelMutablesKeys", zeroConcertPos), CVar("neededType", zeroConcertPos)], zeroConcertPos), CVar("neededType", zeroConcertPos), CText("EditableChild"), zeroConcertPos), CCall(CVar("getMutable", zeroConcertPos), [CVar("tv", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos), CVar("propType", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("Tree", [CVar("propKey", zeroConcertPos), CArray(CArrayView(0, 0), [CVar("mutable", zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos)]), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CLet("onChange", CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("baseVarName", zeroConcertPos), CIf(CVar("forArray", zeroConcertPos), CCall(CVar("getObjectValues", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("mapObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CLambda(["kv"], CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos)], zeroConcertPos)), CLet("formulasNames", CCall(CVar("map", zeroConcertPos), [CCall(CVar("getObjectValues", zeroConcertPos), [CVar("tempVars", zeroConcertPos)], zeroConcertPos), CLambda(["tv"], CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("tv", zeroConcertPos), CText("_compare")])], zeroConcertPos))], zeroConcertPos), CSequence([CSet("formulas", CCallBuiltin("concat", [CVar("formulas", zeroConcertPos), CVar("formulasNames", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CCall(CVar("iterObj", zeroConcertPos), [CVar("tempVars", zeroConcertPos), CLambda(["kv"], CLet("tv", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("tv", zeroConcertPos), CText("_compare")])], zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos), CCall(CVar("mapObj", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("currentValuesName", zeroConcertPos)], zeroConcertPos), CLambda(["kv2"], CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv2", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("tv", zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv2", zeroConcertPos), CText("value")], zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCall(CVar("onChange", zeroConcertPos), [], zeroConcertPos)]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("tv", zeroConcertPos)])], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("sortProps", zeroConcertPos), [CCallBuiltin("object2array", [CVar("mutObj", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos))], zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos)])])]), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("makePromise", CLambda(["fn", "errorFn"], CLet("fnname1", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("fnname2", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("errname1", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("errname2", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("fnname1", zeroConcertPos), CVar("fnname1", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("errname1", zeroConcertPos), CVar("errname1", zeroConcertPos)], zeroConcertPos), CLet("runFnName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("runErrName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("runFnName", zeroConcertPos), CLambda(["x"], CCall(CVar("fn", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("runErrName", zeroConcertPos), CLambda(["x"], CCall(CVar("errorFn", zeroConcertPos), [CVar("x", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fnname2", zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("getVar", zeroConcertPos), [CVar("fnname1", zeroConcertPos)], zeroConcertPos), CVar("fnname1", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("call", zeroConcertPos), [CVar("runFnName", zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("getVar", zeroConcertPos), [CVar("fnname1", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fnname1", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fnname2", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("errname1", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("errname2", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("runFnName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("runErrName", zeroConcertPos)], zeroConcertPos)])])])])])]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("fnname1", zeroConcertPos)])], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("errname2", zeroConcertPos), CLambda([], CIf(CCallBuiltin("!=", [CCall(CVar("getVar", zeroConcertPos), [CVar("errname1", zeroConcertPos)], zeroConcertPos), CVar("errname1", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("call", zeroConcertPos), [CVar("runErrName", zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("getVar", zeroConcertPos), [CVar("errname1", zeroConcertPos)], zeroConcertPos)])], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fnname1", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fnname2", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("errname1", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("errname2", zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("runFnName", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("runErrName", zeroConcertPos)], zeroConcertPos)])])])])])]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("errname1", zeroConcertPos)])], zeroConcertPos), CObject(TreeNode("onOk", CVar("fnname1", zeroConcertPos), TreeNode("onError", CVar("errname1", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])])])]), zeroConcertPos), zeroConcertPos)])]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("makePromise2", CLambda(["fn"], CLet("state", CCall(CVar("createVar", zeroConcertPos), [CText("pending")], zeroConcertPos), CLet("value", CCall(CVar("createVar", zeroConcertPos), [CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CLet("handlers", CCall(CVar("createVar", zeroConcertPos), [CArray(CArrayView(0, 0), [])], zeroConcertPos), CLet("onFullfill", CLambda(["handler"], CIf(CCallBuiltin("==", [CCall(CVar("getVar", zeroConcertPos), [CVar("state", zeroConcertPos)], zeroConcertPos), CText("pending")], zeroConcertPos), CCall(CVar("updateVar", zeroConcertPos), [CVar("handlers", zeroConcertPos), CLambda(["h"], CCall(CVar("arrayPush", zeroConcertPos), [CVar("h", zeroConcertPos), CVar("handler", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCall(CVar("handler", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("state", zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos)), CLet("fulfill", CLambda(["newState", "newValue"], CSequence([CCall(CVar("set", zeroConcertPos), [CVar("state", zeroConcertPos), CVar("newState", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("value", zeroConcertPos), CVar("newValue", zeroConcertPos)], zeroConcertPos), CCall(CVar("iter", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("handlers", zeroConcertPos)], zeroConcertPos), CLambda(["handler"], CCall(CVar("handler", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("state", zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)])])), CLet("resolve", CLambda(["result"], CCall(CVar("fulfill", zeroConcertPos), [CText("resolved"), CVar("result", zeroConcertPos)], zeroConcertPos)), CLet("reject", CLambda(["reason"], CCall(CVar("fulfill", zeroConcertPos), [CText("rejected"), CVar("reason", zeroConcertPos)], zeroConcertPos)), CSequence([CCall(CVar("timer", zeroConcertPos), [CInt(0), CLambda([], CCall(CVar("fn", zeroConcertPos), [CVar("resolve", zeroConcertPos), CVar("reject", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CObject(TreeNode("then", CLambda(["onOk"], CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resFn", "rejFn"], CCall(CVar("onFullfill", zeroConcertPos), [CLambda(["istate", "ivalue"], CIf(CCallBuiltin("==", [CVar("istate", zeroConcertPos), CText("rejected")], zeroConcertPos), CCall(CVar("rejFn", zeroConcertPos), [CVar("ivalue", zeroConcertPos)], zeroConcertPos), CLet("result", CCall(CVar("onOk", zeroConcertPos), [CVar("ivalue", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("!=", [CVar("result", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("result", zeroConcertPos), CText("then")], zeroConcertPos)], zeroConcertPos), CCall(CCallBuiltin("dot", [CCall(CCallBuiltin("dot", [CVar("result", zeroConcertPos), CText("then")], zeroConcertPos), [CVar("resFn", zeroConcertPos)], zeroConcertPos), CText("catch")], zeroConcertPos), [CVar("rejFn", zeroConcertPos)], zeroConcertPos), CCall(CVar("resFn", zeroConcertPos), [CVar("result", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos))], zeroConcertPos)), TreeNode("catch", CLambda(["onErr"], CCall(CVar("makePromise2", zeroConcertPos), [CLambda(["resFn", "rejFn"], CCall(CVar("onFullfill", zeroConcertPos), [CLambda(["istate", "ivalue"], CIf(CCallBuiltin("==", [CVar("istate", zeroConcertPos), CText("resolved")], zeroConcertPos), CCall(CVar("resFn", zeroConcertPos), [CVar("ivalue", zeroConcertPos)], zeroConcertPos), CLet("result", CCall(CVar("onErr", zeroConcertPos), [CVar("ivalue", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("&&", [CCallBuiltin("!=", [CVar("result", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("existsKeyObj", zeroConcertPos), [CVar("result", zeroConcertPos), CText("then")], zeroConcertPos)], zeroConcertPos), CCall(CCallBuiltin("dot", [CCall(CCallBuiltin("dot", [CVar("result", zeroConcertPos), CText("then")], zeroConcertPos), [CVar("resFn", zeroConcertPos)], zeroConcertPos), CText("catch")], zeroConcertPos), [CVar("rejFn", zeroConcertPos)], zeroConcertPos), CCall(CVar("resFn", zeroConcertPos), [CVar("result", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos))], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("makePropTree", CLambda(["header", "propsObj"], CCallBuiltin("Tree", [CVar("header", zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("sortProps", zeroConcertPos), [CCallBuiltin("object2array", [CVar("propsObj", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLambda(["x"], CCallBuiltin("Comap", [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos)])], zeroConcertPos))], zeroConcertPos)], zeroConcertPos))),

	];
}

getConcertPairs20() -> [Pair<string, Concert>] {
	[
		Pair("makePropsArrMutable", CLambda(["old", "oldObj", "onChange"], CSequence([CSet("augmentedObj", CIf(CCall(CVar("isExternal", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CLet("defArgs", CCall(CVar("getExternalDefaultArgs", zeroConcertPos), [CCallBuiltin("dot", [CVar("old", zeroConcertPos), CText("name")], zeroConcertPos)], zeroConcertPos), CLet("whObj", CCall(CVar("filterObj", zeroConcertPos), [CVar("defArgs", zeroConcertPos), CLambda(["kv"], CIf(CCall(CVar("exists", zeroConcertPos), [CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("defArgs", zeroConcertPos)], zeroConcertPos), CLambda(["x"], CCallBuiltin("==", [CVar("x", zeroConcertPos), CText("keepAspectRatio")], zeroConcertPos))], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("||", [CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CText("height")], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCall(CVar("mergeObj", zeroConcertPos), [CVar("oldObj", zeroConcertPos), CVar("whObj", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CIf(CCall(CVar("isGraphics", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CLet("dimensionalObj", CObject(TreeNode("positionY", CDouble(0.0), TreeNode("positionX", CDouble(0.0), TreeNode("height", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("width", CDouble(128.0), TreeEmpty(), TreeEmpty(), 1), 3)), CCall(CVar("mergeObj", zeroConcertPos), [CVar("oldObj", zeroConcertPos), CVar("dimensionalObj", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CVar("oldObj", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CSequence([CSet("vars", CCall(CVar("mapObj", zeroConcertPos), [CVar("augmentedObj", zeroConcertPos), CLambda(["kv"], CLet("varname", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("prop_"), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)])], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("varname", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CVar("varname", zeroConcertPos)]), zeroConcertPos))], zeroConcertPos), zeroConcertPos), CSequence([CSet("typeConfig", CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("propPanelCustomTypes", zeroConcertPos), [], zeroConcertPos), CCall(CVar("getHeaderName", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CIf(CCallBuiltin("&&", [CCallBuiltin("||", [CCall(CVar("isCodingStructure", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CCall(CVar("isExternal", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("not", [CCall(CVar("isSnippet", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSet("vars", CCall(CVar("mapObj", zeroConcertPos), [CVar("vars", zeroConcertPos), CLambda(["kv"], CLet("v", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("typeConfig", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("typeConfig", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CText("Concert")], zeroConcertPos), CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("v", zeroConcertPos), CText("_")])], zeroConcertPos), CVar("v", zeroConcertPos), zeroConcertPos), CVar("v", zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos), CLet("extendedHeaderName", CIf(CCall(CVar("isSnippet", zeroConcertPos), [CVar("curElementFull", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CCallBuiltin("dot", [CVar("curElementFull", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CText("Set")], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("getCodingStructures", [CCallBuiltin("dot", [CVar("curElementFull", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("unparse", zeroConcertPos), [CCallBuiltin("dot", [CVar("curElementFull", zeroConcertPos), CText("fn")], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("getHeaderName", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CSequence([CSet("mutObj", CIf(CCall(CVar("contains", zeroConcertPos), [CCall(CVar("getObjectKeys", zeroConcertPos), [CCall(CVar("propPanelCustomTypes", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos), CVar("extendedHeaderName", zeroConcertPos)], zeroConcertPos), CSequence([CSet("current", CCallBuiltin("object2array", [CCallBuiltin("dot", [CCall(CVar("propPanelCustomTypes", zeroConcertPos), [], zeroConcertPos), CVar("extendedHeaderName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCallBuiltin("array2object", [CCall(CVar("map", zeroConcertPos), [CVar("current", zeroConcertPos), CLambda(["x"], CIf(CCall(CVar("isText", zeroConcertPos), [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("contains", zeroConcertPos), [CVar("propPanelMutablesKeys", zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CCall(CVar("getMutable", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("prop_"), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)])], zeroConcertPos), CCallBuiltin("dot", [CVar("augmentedObj", zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("x", zeroConcertPos), zeroConcertPos), CIf(CCall(CVar("isObject", zeroConcertPos), [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("Lines", [CCall(CVar("makeObjectMutable", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("prop_"), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)])], zeroConcertPos), CCallBuiltin("dot", [CVar("augmentedObj", zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos), CBool(false)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isArray", zeroConcertPos), [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CCall(CVar("makeArrayMutable", zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("prop_"), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)])], zeroConcertPos), CCallBuiltin("dot", [CVar("augmentedObj", zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("index", [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isLambda", zeroConcertPos), [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CCall(CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("value")], zeroConcertPos), [CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("prop_"), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)])], zeroConcertPos), CCallBuiltin("dot", [CVar("augmentedObj", zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("x", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos)]), CCall(CVar("createDefaultMutObj", zeroConcertPos), [CVar("augmentedObj", zeroConcertPos), CVar("vars", zeroConcertPos), CVar("augmentedObj", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CSequence([CIf(CCallBuiltin("||", [CCall(CVar("isExternal", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CCall(CVar("isGraphics", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSet("mutObj", CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("mutObj", zeroConcertPos), CCall(CVar("getPropPanelDimensionalParameters", zeroConcertPos), [CVar("old", zeroConcertPos), CVar("oldObj", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CEmpty(), zeroConcertPos), CSequence([CSet("makeValue", CLambda(["po"], CCall(CVar("propsObj2Value", zeroConcertPos), [CVar("po", zeroConcertPos), CVar("old", zeroConcertPos), CVar("augmentedObj", zeroConcertPos)], zeroConcertPos)), zeroConcertPos), CSequence([CSet("currentPropsObj", CVar("augmentedObj", zeroConcertPos), zeroConcertPos), CSequence([CSet("body", CLambda(["x"], CLet("relevantVars", CCall(CVar("mapObj", zeroConcertPos), [CVar("vars", zeroConcertPos), CLambda(["kv"], CLet("t", CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CIf(CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("typeConfig", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("typeConfig", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CText("Concert")], zeroConcertPos), CCallBuiltin("dot", [CCall(CVar("getVar", zeroConcertPos), [CVar("t", zeroConcertPos)], zeroConcertPos), CText("parsed")], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("t", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("t", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("relevantVars", zeroConcertPos), CVar("currentPropsObj", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("onChange", zeroConcertPos), [CCall(CVar("makeValue", zeroConcertPos), [CCall(CVar("mapObj", zeroConcertPos), [CVar("augmentedObj", zeroConcertPos), CLambda(["kv"], CCall(CVar("getVar", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("vars", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSet("currentPropsObj", CVar("relevantVars", zeroConcertPos), zeroConcertPos)]), CEmpty(), zeroConcertPos), zeroConcertPos)), zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CText("compare"), CVar("body", zeroConcertPos), CCall(CVar("getObjectValues", zeroConcertPos), [CVar("vars", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("mutObj", zeroConcertPos)])])])])])]), zeroConcertPos)])])])]))),
		Pair("makeShapeViews", CLambda(["makeElement", "args", "defaults"], CLet("defArgs", CCall(CVar("mapi", zeroConcertPos), [CVar("args", zeroConcertPos), CLambda(["i", "v"], CIf(CCall(CVar("isDouble", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("v", zeroConcertPos), CCallBuiltin("index", [CVar("defaults", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CObject(TreeNode("editView", CCall(CVar("makeElement", zeroConcertPos), [CVar("defArgs", zeroConcertPos)], zeroConcertPos), TreeNode("displayView", CCall(CVar("makeDynamic", zeroConcertPos), [CVar("makeElement", zeroConcertPos), CVar("args", zeroConcertPos)], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), zeroConcertPos))),
		Pair("makeUniqueId", CLambda([], CLet("name", CCallBuiltin("+", [CText("R"), CCallBuiltin("*", [CCallBuiltin("RAND", [], zeroConcertPos), CInt(100000000)], zeroConcertPos)], zeroConcertPos), CLet("nameNoDot", CCall(CVar("takeBeforeLast", zeroConcertPos), [CVar("name", zeroConcertPos), CText("."), CVar("name", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("existsVar", zeroConcertPos), [CVar("nameNoDot", zeroConcertPos)], zeroConcertPos), CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CVar("nameNoDot", zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("makeWith", CLambda(["old", "replacements"], CCall(CVar("object2concert", zeroConcertPos), [CCall(CVar("mergeReplaceObj", zeroConcertPos), [CCall(CVar("concert2object", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CVar("replacements", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("map", CLambda(["xs", "fn"], CCall(CVar("__map", zeroConcertPos), [CArray(CArrayView(0, 0), []), CInt(0), CVar("xs", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("mapConcat", CLambda(["xs", "fn"], CCallBuiltin("concatA", [CCall(CVar("map", zeroConcertPos), [CVar("xs", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("mapEmpty", CLambda(["elementM", "fn"], CIf(CCallBuiltin("==", [CVar("elementM", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("elementM", zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("mapObj", CLambda(["obj", "fn"], CCall(CVar("mapObjKeyValues", zeroConcertPos), [CVar("obj", zeroConcertPos), CLambda(["kv"], CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("kv", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("mapObjKeyValues", CLambda(["obj", "fn"], CCallBuiltin("array2object", [CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("mapWithPrevious", CLambda(["cs", "first", "rest"], CCall(CVar("mapi", zeroConcertPos), [CVar("cs", zeroConcertPos), CLambda(["i", "c"], CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("first", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CCall(CVar("rest", zeroConcertPos), [CCallBuiltin("index", [CVar("cs", zeroConcertPos), CCallBuiltin("-", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos))),
		Pair("mapi", CLambda(["xs", "fn"], CCall(CVar("__mapi", zeroConcertPos), [CArray(CArrayView(0, 0), []), CInt(0), CVar("xs", zeroConcertPos), CVar("fn", zeroConcertPos)], zeroConcertPos))),
		Pair("mergeObj", CLambda(["obj1", "obj2"], CCall(CVar("mergeReplaceObj", zeroConcertPos), [CVar("obj2", zeroConcertPos), CVar("obj1", zeroConcertPos)], zeroConcertPos))),
		Pair("mergeObjCustom", CLambda(["obj1", "obj2", "fn"], CCall(CVar("foldObj", zeroConcertPos), [CVar("obj2", zeroConcertPos), CVar("obj1", zeroConcertPos), CLambda(["key", "val", "acc"], CLet("val2", CCall(CVar("getKeyObj", zeroConcertPos), [CVar("acc", zeroConcertPos), CVar("key", zeroConcertPos)], zeroConcertPos), CLet("res", CIf(CCallBuiltin("!=", [CVar("val2", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CVar("key", zeroConcertPos), CVar("val", zeroConcertPos), CVar("val2", zeroConcertPos)], zeroConcertPos), CVar("val", zeroConcertPos), zeroConcertPos), CCallBuiltin("setKeyObj", [CVar("acc", zeroConcertPos), CVar("key", zeroConcertPos), CVar("res", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos))),
		Pair("mergeReplaceObj", CLambda(["obj1", "obj2"], CCall(CVar("foldObj", zeroConcertPos), [CVar("obj2", zeroConcertPos), CVar("obj1", zeroConcertPos), CLambda(["k", "v", "acc"], CCallBuiltin("setKeyObj", [CVar("acc", zeroConcertPos), CVar("k", zeroConcertPos), CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("mergeSort", CLambda(["a", "comparisonFn"], CLet("l", CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("<=", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("a", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("l", zeroConcertPos), CInt(2)], zeroConcertPos), CIf(CCallBuiltin("<=", [CCall(CVar("comparisonFn", zeroConcertPos), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CVar("a", zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("index", [CVar("a", zeroConcertPos), CInt(0)], zeroConcertPos)]), zeroConcertPos), CLet("m", CCallBuiltin("TRUNC", [CCallBuiltin("/", [CVar("l", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos), CLet("left", CCall(CVar("subrange", zeroConcertPos), [CVar("a", zeroConcertPos), CInt(0), CVar("m", zeroConcertPos)], zeroConcertPos), CLet("right", CCall(CVar("subrange", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("m", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CVar("m", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("__mergeRec", zeroConcertPos), [CCall(CVar("mergeSort", zeroConcertPos), [CVar("left", zeroConcertPos), CVar("comparisonFn", zeroConcertPos)], zeroConcertPos), CCall(CVar("mergeSort", zeroConcertPos), [CVar("right", zeroConcertPos), CVar("comparisonFn", zeroConcertPos)], zeroConcertPos), CVar("comparisonFn", zeroConcertPos), CInt(0), CInt(0), CCall(CVar("EmptyList", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("mergeVars", CLambda(["vars"], CLet("curVal", CCall(CVar("map", zeroConcertPos), [CVar("vars", zeroConcertPos), CVar("getVar", zeroConcertPos)], zeroConcertPos), CLet("provider", CCall(CVar("createVar", zeroConcertPos), [CVar("curVal", zeroConcertPos)], zeroConcertPos), CLet("callback", CLambda(["v"], CCall(CVar("setDistinct", zeroConcertPos), [CVar("provider", zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CVar("vars", zeroConcertPos), CVar("getVar", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CLet("unss", CCall(CVar("map", zeroConcertPos), [CVar("vars", zeroConcertPos), CLambda(["v"], CCall(CVar("subscribe2", zeroConcertPos), [CVar("v", zeroConcertPos), CVar("callback", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CObject(TreeNode("result", CVar("provider", zeroConcertPos), TreeEmpty(), TreeNode("unsubscriber", CLambda([], CCall(CVar("iter", zeroConcertPos), [CVar("unss", zeroConcertPos), CVar("apply0", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("nop", CLambda([], CObject(TreeEmpty()))),
		Pair("nop1", CLambda(["__"], CObject(TreeEmpty()))),
		Pair("nop2", CLambda(["__", "__"], CObject(TreeEmpty()))),
		Pair("nop3", CLambda(["__", "__", "__"], CObject(TreeEmpty()))),
		Pair("onVarChange", CLambda(["name", "fn"], CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("oldValName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("oldValName", zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCallBuiltin("not", [CCallBuiltin("equalVars", [CVar("name", zeroConcertPos), CVar("oldValName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("fn", zeroConcertPos), [], zeroConcertPos), CSequence([CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("oldValName", zeroConcertPos)], zeroConcertPos)])]), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("name", zeroConcertPos)])], zeroConcertPos)]), zeroConcertPos), zeroConcertPos))),
		Pair("ppblocksBuildVarOrDef", CLambda(["varName", "def"], CIf(CCallBuiltin("==", [CVar("varName", zeroConcertPos), CText("")], zeroConcertPos), CVar("def", zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CVar("varName", zeroConcertPos)])], zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs21() -> [Pair<string, Concert>] {
	[
		Pair("propPanelCustomTypes", CLambda([], CLet("propPanelTextButton", CObject(TreeNode("color", CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("varColor", CText("prop_color"), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), TreeNode("action", CText("Lambda"), TreeEmpty(), TreeEmpty(), 1), TreeNode("raised", CCallBuiltin("External", [CText("CheckBox"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CText("prop_raised"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos), TreeNode("enabled", CCallBuiltin("External", [CText("CheckBox"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CText("prop_enabled"), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("var", CText("prop_text"), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("propPanelSwitch", CObject(TreeNode("onLabel", CText("Text"), TreeNode("enabled", CText("Bool"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("offLabel", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CText("Text"), TreeNode("tooltip", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), CLet("propPanelIconButton", CObject(TreeNode("color", CText("Color"), TreeNode("action", CText("Lambda"), TreeEmpty(), TreeNode("buttonBorder", CText("Double"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("icon", CText("Text"), TreeNode("enabled", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), TreeNode("shortcut", CText("Text"), TreeEmpty(), TreeNode("tooltip", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4)), CLet("propPanelCheckBox", CObject(TreeNode("label", CText("Text"), TreeNode("enabled", CText("Bool"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 3)), CLet("propPanelIcon", CObject(TreeNode("icon", CText("Text"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CLet("propPanelInputText", CObject(TreeNode("label", CText("Text"), TreeNode("enabled", CText("Bool"), TreeNode("color", CText("Color"), TreeNode("alignment", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("left"), CText("right"), CText("center"), CText("none")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("editIcon", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("floating", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("style", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("text"), CText("password"), CText("numeric")])], zeroConcertPos), TreeNode("maxChars", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1000.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_maxChars"), TreeNode("step", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), TreeNode("lines", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_lines"), TreeNode("step", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("step", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_step"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("updateOnVarChange", CText("Bool"), TreeNode("tooltip", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4)), CLet("propPanelSlider", CObject(TreeNode("min", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-100.0), TreeNode("max", CVar("prop_max", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_min"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("max", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CVar("prop_min", zeroConcertPos), TreeNode("max", CDouble(100.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_max"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("enabled", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("step", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_step"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("showValue", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("propPanelDropDown", CObject(TreeNode("fallbackText", CText("Text"), TreeNode("enabled", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelRadioButtons", CObject(TreeNode("items", CArray(CArrayView(0, 0), [CText("EditableChild")]), TreeNode("color", CText("Color"), TreeEmpty(), TreeNode("enabled", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("var", CText("Text"), TreeEmpty(), TreeNode("vertical", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("propPanelAnimator", CObject(TreeNode("fade", CText("Bool"), TreeNode("duration", CText("Double"), TreeNode("contentName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("easing", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("ease"), CText("ease-in"), CText("ease-out"), CText("ease-in-out"), CText("linear")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("scaleAnimation", CObject(TreeNode("factor", CObject(TreeNode("x", CText("DoubleFactor"), TreeEmpty(), TreeNode("y", CText("DoubleFactor"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("centerMode", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeNode("rotateAnimation", CObject(TreeNode("angle", CText("DoubleAngle"), TreeEmpty(), TreeNode("centerMode", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CText("Text"), TreeNode("translateAnimation", CObject(TreeNode("type", CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4)), CLet("propPanelKeyframesAnimation", CObject(TreeNode("duration", CText("Double"), TreeNode("delay", CText("Double"), TreeNode("contentName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("direction", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("normal"), CText("reverse"), CText("alternate"), CText("alternateReverse")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("keyframes", CArray(CArrayView(0, 0), [CObject(TreeNode("scale", CObject(TreeNode("x", CText("DoubleFactor"), TreeEmpty(), TreeNode("y", CText("DoubleFactor"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("easing", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("ease"), CText("ease-in"), CText("ease-out"), CText("ease-in-out"), CText("linear")])], zeroConcertPos), TreeNode("alpha", CText("DoubleAlpha"), TreeEmpty(), TreeEmpty(), 1), TreeNode("rotate", CText("DoubleAngle"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("translate", CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 3))]), TreeNode("easing", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("ease"), CText("ease-in"), CText("ease-out"), CText("ease-in-out"), CText("linear")])], zeroConcertPos), TreeEmpty(), TreeNode("iterations", CText("Int"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("origin", CObject(TreeNode("x", CText("DoubleAlpha"), TreeEmpty(), TreeNode("y", CText("DoubleAlpha"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("onFinish", CText("Lambda"), TreeEmpty(), TreeEmpty(), 1), TreeNode("percentName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4)), CLet("propPanelAutocomplete", CObject(TreeNode("dictionary", CText("Text"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelCarousel", CObject(TreeNode("items", CArray(CArrayView(0, 0), [CText("EditableChild")]), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelDatePicker", CObject(TreeNode("var", CText("Text"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), CLet("propPanelExpander", CObject(TreeNode("details", CText("EditableChild"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("header", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelTooltip", CObject(TreeNode("color", CText("Color"), TreeNode("box", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelStyledText", CObject(TreeNode("size", CText("DoubleFontSize"), TreeNode("family", CText("Text"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("opacity", CText("DoubleAlpha"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("text", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 3)), CLet("propPanelGraphics", CObject(TreeNode("style", CObject(TreeNode("stroke", CText("Color"), TreeNode("fillOpacity", CText("DoubleAlpha"), TreeNode("fill", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CText("DoubleAngle"), TreeNode("points", CArray(CArrayView(0, 0), [CText("GradientPoint")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CText("DoubleAlpha"), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CText("DoubleAngle"), TreeNode("points", CArray(CArrayView(0, 0), [CText("GradientPoint")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CText("Double"), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeEmpty(), TreeEmpty(), 1)), CLet("propPanelDragDrop", CObject(TreeNode("id", CText("Int"), TreeNode("droppingIdName", CText("Text"), TreeNode("draggingContentName", CText("Text"), TreeNode("dragLowestPriority", CText("Bool"), TreeNode("disablePassingClicks", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("draggingPlaceholderName", CText("Text"), TreeNode("draggingEnabled", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), TreeNode("droppingEnabled", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("hoveringEnabled", CText("Bool"), TreeNode("grabPositionName", CText("Text"), TreeNode("grabDelay", CText("IntMs"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("hoveringIdName", CText("Text"), TreeEmpty(), TreeNode("hoveringName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4), TreeNode("onDrag", CText("Lambda"), TreeNode("isDraggingName", CText("Text"), TreeNode("idleContentName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("localMousePositionName", CText("Text"), TreeEmpty(), TreeNode("noDragAnimation", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("onHover", CText("Lambda"), TreeNode("onDrop", CText("Lambda"), TreeEmpty(), TreeEmpty(), 1), TreeNode("pressedName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 4), 5)), CLet("propPanelCustomButton", CObject(TreeNode("normal", CText("EditableChild"), TreeNode("enabled", CText("Bool"), TreeNode("alignmentHorizontal", CText("DoubleAlpha"), TreeNode("action", CText("Lambda"), TreeEmpty(), TreeEmpty(), 1), TreeNode("disabled", CText("EditableChild"), TreeNode("alignmentVertical", CText("DoubleAlpha"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("highlightOnHover", CText("Bool"), TreeNode("fixedWidth", CText("DoubleSize"), TreeNode("fixedHeight", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), TreeNode("heightMode", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("content"), CText("fixed"), CText("stretched")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("hovered", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), 3), 4), TreeNode("ripple", CText("Bool"), TreeNode("pressed", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText("Text"), TreeEmpty(), TreeNode("widthMode", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("content"), CText("fixed"), CText("stretched")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 5)), CLet("propPanelParagraph", CObject(TreeNode("interlineSpacing", CText("DoubleSize"), TreeNode("content", CArray(CArrayView(0, 0), [CText("EditableChild")]), TreeNode("alignment", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("left"), CText("center"), CText("right"), CText("start"), CText("end")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("cropWords", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("marginTop", CText("DoubleSize"), TreeNode("marginBottom", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), TreeNode("minWidth", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("propPanelContainer", CObject(TreeNode("displayView", CText("EditableChild"), TreeEmpty(), TreeNode("editView", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelMask", CObject(TreeNode("content", CText("EditableChild"), TreeEmpty(), TreeNode("mask", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelInteractive", CObject(TreeNode("id", CText("Int"), TreeNode("content", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), TreeNode("interactivity", CObject(TreeNode("mouseInside", CText("Text"), TreeNode("mouseDown", CText("Text"), TreeNode("key", CObject(TreeNode("filter", CText("Lambda"), TreeNode("action", CText("Lambda"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("mouseXY", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 3)), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("propPanelCanvasAny", CObject(TreeNode("minHeight", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CVar("prop_maxHeight", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_minHeight"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("maxWidth", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1000.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_maxWidth"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("maxHeight", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1000.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_maxHeight"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("scalex", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_scalex"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("minWidth", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CVar("prop_maxWidth", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_minWidth"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeNode("rotation", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-180.0), TreeNode("max", CDouble(180.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_rotation"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("x", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-500.0), TreeNode("max", CDouble(500.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_x"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeNode("scaley", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_scaley"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("y", CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-500.0), TreeNode("max", CDouble(500.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CText("prop_y"), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4)), CLet("shapesArgs", CObject(TreeNode("style", CObject(TreeNode("stroke", CText("Color"), TreeNode("fillOpacity", CText("DoubleAlpha"), TreeNode("fill", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("gradientFill", CObject(TreeNode("rotation", CText("DoubleAngle"), TreeNode("points", CArray(CArrayView(0, 0), [CText("GradientPoint")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeNode("radialGradient", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("strokeOpacity", CText("DoubleAlpha"), TreeNode("strokeLineGradient", CObject(TreeNode("rotation", CText("DoubleAngle"), TreeNode("points", CArray(CArrayView(0, 0), [CText("GradientPoint")]), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("strokeWidth", CText("Double"), TreeEmpty(), TreeEmpty(), 1), 2), 4)), TreeNode("positionX", CText("DoublePosition"), TreeNode("height", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), 3)), CLet("dynamicShapesArgs", CCallBuiltin("setKeyObj", [CObject(TreeNode("positionX", CCall(CVar("buildTextOrDoubleMutable", zeroConcertPos), [], zeroConcertPos), TreeNode("height", CCall(CVar("buildTextOrDoubleMutable", zeroConcertPos), [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCall(CVar("buildTextOrDoubleMutable", zeroConcertPos), [], zeroConcertPos), TreeNode("positionY", CCall(CVar("buildTextOrDoubleMutable", zeroConcertPos), [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), CText("style"), CCallBuiltin("dot", [CVar("shapesArgs", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos), CLet("fadeInOutArgs", CObject(TreeNode("element", CText("EditableChild"), TreeNode("duration", CText("Double"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CText("DoublePosition"), TreeNode("positionX", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CCall(CVar("buildTextOrDoubleMutable", zeroConcertPos), [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("morphingAnimationArgs", CObject(TreeNode("end", CText("EditableChild"), TreeNode("duration", CText("Double"), TreeEmpty(), TreeNode("easing", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("ease"), CText("ease-in"), CText("ease-out"), CText("ease-in-out"), CText("linear")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("start", CText("EditableChild"), TreeNode("positionX", CText("DoublePosition"), TreeEmpty(), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("triggerName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 3), 4)), CLet("namedValueAnimationArgs", CObject(TreeNode("name", CText("Text"), TreeNode("easing", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("ease"), CText("ease-in"), CText("ease-out"), CText("ease-in-out"), CText("linear")])], zeroConcertPos), TreeNode("duration", CText("Double"), TreeEmpty(), TreeEmpty(), 1), TreeNode("from", CText("DoublePosition"), TreeEmpty(), TreeNode("loop", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("none"), CText("direct"), CText("alternate")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("to", CText("DoublePosition"), TreeNode("resetTriggerName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("triggerName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 4)), CLet("triggerButtonArgs", CObject(TreeNode("element", CText("EditableChild"), TreeEmpty(), TreeNode("face", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("arrowArgs", CCall(CVar("mergeObj", zeroConcertPos), [CVar("shapesArgs", zeroConcertPos), CObject(TreeNode("headWidth", CText("DoubleSize"), TreeNode("headLength", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), TreeNode("tailWidth", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos), CLet("gridArgs", CCall(CVar("mergeObj", zeroConcertPos), [CVar("shapesArgs", zeroConcertPos), CObject(TreeNode("rows", CText("IntPositive"), TreeNode("cols", CText("IntPositive"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2))], zeroConcertPos), CLet("expanderMenuArgs", CObject(TreeNode("positionX", CText("DoublePosition"), TreeNode("header", CText("Text"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("items", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CText("DoubleSize"), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), CLet("mouseTrackingArgs", CObject(TreeNode("element", CText("EditableChild"), TreeNode("clicksVarName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("mousePositionVarName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2)), CLet("draggableAreaArgs", CObject(TreeNode("onClick", CText("Lambda"), TreeNode("elementsName", CText("Text"), TreeNode("coordsName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("height", CText("DoubleSize"), TreeNode("grabDelay", CText("Int"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("startId", CText("Int"), TreeNode("onElementClick", CText("Lambda"), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), 2), 4)), CLet("dragDropRestrictedArgs", CObject(TreeNode("restrict", CText("Lambda"), TreeNode("elements", CArray(CArrayView(0, 0), [CText("EditableChild")]), TreeNode("coordsName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("mouseDownName", CText("Text"), TreeNode("height", CText("DoubleSize"), TreeEmpty(), TreeEmpty(), 1), TreeNode("requireMouseInside", CCall(CVar("buildDropDownMutable", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("always"), CText("onStart")])], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("width", CText("DoubleSize"), TreeNode("startId", CText("Int"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 4)), CLet("shadowedTextArgs", CObject(TreeNode("props", CObject(TreeNode("family", CText("Text"), TreeNode("color", CText("Color"), TreeEmpty(), TreeEmpty(), 1), TreeNode("size", CText("DoubleFontSize"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("positionX", CText("DoublePosition"), TreeEmpty(), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("shadowOpacity", CText("DoubleAlpha"), TreeNode("shadowDirection", CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("text", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("scaleGraphicsArgs", CObject(TreeNode("origin", CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("element", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CText("DoublePosition"), TreeNode("positionX", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), TreeNode("scale", CObject(TreeNode("x", CText("DoubleFactor"), TreeEmpty(), TreeNode("y", CText("DoubleFactor"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("rotateGraphicsArgs", CObject(TreeNode("element", CText("EditableChild"), TreeNode("angle", CText("DoubleAngle"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionX", CText("DoublePosition"), TreeNode("origin", CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("translteGraphicsArgs", CObject(TreeNode("positionX", CText("DoublePosition"), TreeNode("element", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), TreeNode("translate", CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), CLet("shearGraphicsArgs", CObject(TreeNode("origin", CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("element", CText("EditableChild"), TreeEmpty(), TreeEmpty(), 1), TreeNode("positionY", CText("DoublePosition"), TreeNode("positionX", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), TreeNode("shear", CObject(TreeNode("x", CText("DoubleFactor"), TreeEmpty(), TreeNode("y", CText("DoubleFactor"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("setWigiButtonArgs", CObject(TreeNode("value", CText("EditableChild"), TreeNode("positionX", CText("DoublePosition"), TreeEmpty(), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("wigiVarName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), 3)), CLet("wigiConcertArgs", CObject(TreeNode("positionX", CText("DoublePosition"), TreeNode("concertVarName", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("wigiVarName", CText("Text"), TreeNode("positionY", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3)), CObject(TreeNode("IconButton", CVar("propPanelIconButton", zeroConcertPos), TreeNode("DatePicker", CVar("propPanelDatePicker", zeroConcertPos), TreeNode("CallBuiltin", CObject(TreeNode("name", CText("Text"), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Autocomplete", CVar("propPanelAutocomplete", zeroConcertPos), TreeNode("Arrow", CObject(TreeNode("args", CVar("arrowArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Animator", CVar("propPanelAnimator", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("AsCode", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Call", CObject(TreeNode("args", CText("Object"), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("CheckBox", CVar("propPanelCheckBox", zeroConcertPos), TreeNode("CanvasCrop", CVar("propPanelCanvasAny", zeroConcertPos), TreeNode("Canvas", CVar("propPanelCanvasAny", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("Carousel", CVar("propPanelCarousel", zeroConcertPos), TreeNode("CanvasScroll", CVar("propPanelCanvasAny", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("Container", CVar("propPanelContainer", zeroConcertPos), TreeNode("Comap", CObject(TreeNode("header", CText("Text"), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("CustomButton", CVar("propPanelCustomButton", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 4), 5), TreeNode("Expander", CVar("propPanelExpander", zeroConcertPos), TreeNode("DropDown", CVar("propPanelDropDown", zeroConcertPos), TreeNode("DragDropRestricted", CObject(TreeNode("args", CVar("dragDropRestrictedArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("DragDrop", CVar("propPanelDragDrop", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("DraggableArea", CObject(TreeNode("args", CVar("draggableAreaArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Ellipse", CObject(TreeNode("args", CVar("dynamicShapesArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("FadeOut", CObject(TreeNode("args", CVar("fadeInOutArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("FadeIn", CObject(TreeNode("args", CVar("fadeInOutArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("ExpanderMenu", CObject(TreeNode("args", CVar("expanderMenuArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("Grid", CObject(TreeNode("args", CVar("gridArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("GetWigiButton", CObject(TreeNode("args", CVar("wigiConcertArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Formula", CObject(TreeNode("name", CText("Text"), TreeEmpty(), TreeNode("value", CText("Concert"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Graphics", CVar("propPanelGraphics", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Icon", CVar("propPanelIcon", zeroConcertPos), TreeNode("HTML", CObject(TreeNode("evaluate", CText("Bool"), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4), 5), 6), TreeNode("ShadowedText", CObject(TreeNode("args", CVar("shadowedTextArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("RadioButtons", CVar("propPanelRadioButtons", zeroConcertPos), TreeNode("Mask", CVar("propPanelMask", zeroConcertPos), TreeNode("KeyframesAnimation", CVar("propPanelKeyframesAnimation", zeroConcertPos), TreeNode("InputText", CVar("propPanelInputText", zeroConcertPos), TreeNode("If", CObject(TreeNode("elsec", CText("Concert"), TreeNode("cond", CText("Concert"), TreeEmpty(), TreeEmpty(), 1), TreeNode("then", CText("Concert"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Interactive", CVar("propPanelInteractive", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Let", CObject(TreeNode("name", CText("Text"), TreeNode("body", CText("Concert"), TreeEmpty(), TreeEmpty(), 1), TreeNode("value", CText("Concert"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("Lambda", CObject(TreeNode("args", CText("Concert"), TreeEmpty(), TreeNode("body", CText("Concert"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeNode("LineSegment", CObject(TreeNode("args", CVar("dynamicShapesArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("Paragraph", CVar("propPanelParagraph", zeroConcertPos), TreeNode("MouseTracking", CObject(TreeNode("args", CVar("mouseTrackingArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("MorphingAnimation", CObject(TreeNode("args", CVar("morphingAnimationArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("MonacoEditor", CObject(TreeNode("readonly", CText("Bool"), TreeEmpty(), TreeNode("style", CObject(TreeNode("maxLines", CText("IntPositive"), TreeNode("language", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("resizableInDisplayMode", CText("Bool"), TreeNode("maxSuggestedLines", CText("IntPositive"), TreeEmpty(), TreeEmpty(), 1), TreeNode("wordWrap", CText("Bool"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), TreeEmpty(), TreeEmpty(), 1), 2)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("NamedValueAnimation", CObject(TreeNode("args", CVar("namedValueAnimationArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("Polygon", CObject(TreeNode("args", CCall(CVar("mergeObj", zeroConcertPos), [CVar("dynamicShapesArgs", zeroConcertPos), CObject(TreeNode("points", CArray(CArrayView(0, 0), [CObject(TreeNode("x", CText("DoublePosition"), TreeEmpty(), TreeNode("y", CText("DoublePosition"), TreeEmpty(), TreeEmpty(), 1), 2))]), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("Quote", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), 2), 4), 5), TreeNode("RoundedRect", CObject(TreeNode("args", CCall(CVar("mergeObj", zeroConcertPos), [CVar("dynamicShapesArgs", zeroConcertPos), CObject(TreeNode("radius", CCall(CVar("buildTextOrDoubleMutable", zeroConcertPos), [], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeNode("Rectangle", CObject(TreeNode("args", CVar("dynamicShapesArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("RotateGraphics", CObject(TreeNode("args", CVar("rotateGraphicsArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Set", CObject(TreeNode("name", CText("Text"), TreeEmpty(), TreeNode("value", CText("Concert"), TreeEmpty(), TreeEmpty(), 1), 2)), TreeNode("ScaleGraphics", CObject(TreeNode("args", CVar("scaleGraphicsArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("Sequence", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("SetWigiButton", CObject(TreeNode("args", CVar("setWigiButtonArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 3), 4), 6), TreeNode("Switch", CVar("propPanelSwitch", zeroConcertPos), TreeNode("Slider", CVar("propPanelSlider", zeroConcertPos), TreeNode("ShearGraphics", CObject(TreeNode("args", CVar("shearGraphicsArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), TreeNode("StyledText", CVar("propPanelStyledText", zeroConcertPos), TreeEmpty(), TreeNode("SubscribeToWigiButton", CObject(TreeNode("args", CVar("wigiConcertArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("Tooltip", CVar("propPanelTooltip", zeroConcertPos), TreeNode("TextButton", CVar("propPanelTextButton", zeroConcertPos), TreeNode("Table", CObject(TreeEmpty()), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("Unquote", CObject(TreeEmpty()), TreeNode("TranslateGraphics", CObject(TreeNode("args", CVar("translteGraphicsArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeNode("Tree", CObject(TreeNode("header", CText("Text"), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("UnsubscribeFromWigiButton", CObject(TreeNode("args", CVar("wigiConcertArgs", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1)), TreeEmpty(), TreeEmpty(), 1), 3), 4), 5), 7), 8)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),

	];
}

getConcertPairs22() -> [Pair<string, Concert>] {
	[
		Pair("propPanelMutables", CLambda(["varName", "value"], CObject(TreeNode("DoubleFontSize", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(160.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)), TreeNode("Double", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)), TreeNode("Bool", CLambda([], CCallBuiltin("External", [CText("CheckBox"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CText("value"), TreeNode("enabled", CBool(true), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos)), TreeNode("Array", CLambda([], CCall(CVar("makeArrayMutable", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("value", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Color", CLambda([], CCallBuiltin("External", [CText("ColorPicker"), CArray(CArrayView(0, 0), [CObject(TreeNode("varColor", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1))])], zeroConcertPos)), TreeEmpty(), TreeNode("Concert", CLambda([], CSequence([CSet("asCodeName", CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("varName", zeroConcertPos), CText("_")])], zeroConcertPos), zeroConcertPos), CLet("an", CCall(CVar("makeAsCode", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos), CDouble(200.0), CDouble(200.0)], zeroConcertPos), CSequence([CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("asCodeName", zeroConcertPos), CVar("an", zeroConcertPos)], zeroConcertPos), CLet("vn", CVar("asCodeName", zeroConcertPos), CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("varName", CVar("vn", zeroConcertPos), TreeNode("displayMode", CBool(false), TreeEmpty(), TreeNode("height", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), zeroConcertPos)]), zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("DoubleAngle", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-180.0), TreeNode("max", CDouble(180.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)), TreeNode("DoubleAlpha", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("DoubleFactor", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-5.0), TreeNode("max", CDouble(5.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), 2), 4), TreeNode("Int", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-10.0), TreeNode("max", CDouble(10.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeNode("step", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)), TreeNode("DoubleSize", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1000.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)), TreeNode("DoublePosition", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(-200.0), TreeNode("max", CDouble(200.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))])], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("GradientPoint", CLambda([], CCall(CVar("makeGradientPoint", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos)), TreeNode("EditableChild", CLambda([], CCall(CVar("makeEditableChild", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("Object", CLambda([], CCallBuiltin("Lines", [CCall(CVar("makeObjectMutable", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("value", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos), CBool(false)], zeroConcertPos)], zeroConcertPos)), TreeNode("IntPositive", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(20.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeNode("step", CDouble(1.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)), TreeNode("IntMs", CLambda([], CCallBuiltin("External", [CText("Slider"), CArray(CArrayView(0, 0), [CObject(TreeNode("min", CDouble(0.0), TreeNode("max", CDouble(1000.0), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeNode("step", CDouble(0.0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))])], zeroConcertPos)), TreeEmpty(), TreeEmpty(), 1), TreeNode("Lambda", CLambda([], CSequence([CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("varName", zeroConcertPos), CCall(CVar("makeAsCode", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos), CDouble(200.0), CDouble(200.0)], zeroConcertPos)], zeroConcertPos), CLet("vn", CVar("varName", zeroConcertPos), CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CObject(TreeNode("varName", CVar("vn", zeroConcertPos), TreeNode("displayMode", CBool(false), TreeEmpty(), TreeNode("height", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("width", CDouble(240.0), TreeEmpty(), TreeEmpty(), 1), 3))])], zeroConcertPos), zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("Text", CLambda([], CCallBuiltin("External", [CText("InputText"), CArray(CArrayView(0, 0), [CObject(TreeNode("label", CText("value"), TreeNode("enabled", CBool(true), TreeNode("editIcon", CBool(false), TreeNode("color", CInt(0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("floating", CBool(false), TreeEmpty(), TreeEmpty(), 1), 3), TreeNode("maxChars", CInt(260), TreeNode("lines", CInt(1), TreeEmpty(), TreeEmpty(), 1), TreeNode("tooltip", CText(""), TreeNode("style", CText("Text"), TreeEmpty(), TreeEmpty(), 1), TreeNode("var", CVar("varName", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4))])], zeroConcertPos)), TreeNode("Other", CLambda([], CText("mutableOther")), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), 4), 5)))),
		Pair("propPanelMutablesKeys", CArray(CArrayView(0, 0), [CText("Bool"), CText("Int"), CText("IntPositive"), CText("IntMs"), CText("Double"), CText("Text"), CText("Color"), CText("GradientPoint"), CText("Array"), CText("Lambda"), CText("Concert"), CText("Object"), CText("DoubleAngle"), CText("DoubleFactor"), CText("DoublePosition"), CText("DoubleAlpha"), CText("DoubleFontSize"), CText("DoubleSize"), CText("EditableChild")])),
		Pair("prop_max", CText("")),
		Pair("prop_maxHeight", CText("")),
		Pair("prop_maxWidth", CText("")),
		Pair("prop_min", CText("")),
		Pair("props2element", CLambda(["props"], CLet("elemType", CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__type")], zeroConcertPos), CLet("typesWithValueOnly", CArray(CArrayView(0, 0), [CText("Empty"), CText("Bool"), CText("Int"), CText("Double"), CText("Text")]), CLet("codingStructures", CArray(CArrayView(0, 0), [CText("Var"), CText("Set"), CText("Let"), CText("Formula"), CText("Lambda"), CText("If"), CText("CallBuiltin"), CText("Call"), CText("Sequence"), CText("Quote"), CText("Unquote")]), CLet("propsWithoutInternalName", CCall(CVar("filterObj", zeroConcertPos), [CVar("props", zeroConcertPos), CLambda(["prop"], CCallBuiltin("not", [CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("__type"), CText("__subtype"), CText("__name")]), CCallBuiltin("dot", [CVar("prop", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CCall(CVar("contains", zeroConcertPos), [CVar("typesWithValueOnly", zeroConcertPos), CVar("elemType", zeroConcertPos)], zeroConcertPos), CBool(true)], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Array")], zeroConcertPos), CIf(CCallBuiltin("==", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("maxCols")], zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("Lines", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("HumanText")], zeroConcertPos), CCallBuiltin("HumanText", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("lang")], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("contains", zeroConcertPos), [CVar("codingStructures", zeroConcertPos), CVar("elemType", zeroConcertPos)], zeroConcertPos), CLet("args", CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Var")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("name")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Set")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("name")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Let")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("name")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("body")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Formula")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("name")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Lambda")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("args")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("body")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("If")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("cond")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("then")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("elsec")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Call")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("fn")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("args")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("CallBuiltin")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("name")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Sequence")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Quote")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("body")], zeroConcertPos)]), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Unqiote")], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("body")], zeroConcertPos)]), CEmpty(), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), CCallBuiltin("makeCodingStructures", [CVar("elemType", zeroConcertPos), CVar("args", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Snippet")], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Call"), CArray(CArrayView(0, 0), [CCallBuiltin("makeCodingStructures", [CText("Var"), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__subtype")], zeroConcertPos)])], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("removeKeyObj", zeroConcertPos), [CVar("propsWithoutInternalName", zeroConcertPos), CText("fn")], zeroConcertPos)])])], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Comap")], zeroConcertPos), CCallBuiltin("Comap", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Tree")], zeroConcertPos), CCallBuiltin("Tree", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Table")], zeroConcertPos), CCallBuiltin("Table", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("cells")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Canvas")], zeroConcertPos), CCallBuiltin("Canvas", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("minWidth")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("minHeight")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("maxWidth")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("maxHeight")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("scalex")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("scaley")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("rotation")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("CanvasCrop")], zeroConcertPos), CCallBuiltin("CanvasCrop", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("minWidth")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("minHeight")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("maxWidth")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("maxHeight")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("scalex")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("scaley")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("rotation")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("CanvasScroll")], zeroConcertPos), CCallBuiltin("CanvasScroll", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("minWidth")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("minHeight")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("maxWidth")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("maxHeight")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("scalex")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("scaley")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("rotation")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("KeyValue")], zeroConcertPos), CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Object")], zeroConcertPos), CVar("propsWithoutInternalName", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Graphics")], zeroConcertPos), CCallBuiltin("Graphics", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("shape")], zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("dimensionalParameters")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("Editor")], zeroConcertPos), CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CVar("propsWithoutInternalName", zeroConcertPos)])], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("MonacoEditor")], zeroConcertPos), CLet("styleNames", CObject(TreeNode("maxLines", CText("MMaxLines"), TreeNode("language", CText("CodeEditorLanguage"), TreeEmpty(), TreeEmpty(), 1), TreeNode("resizableInDisplayMode", CText("CodeEditorResizableInDisplayMode"), TreeNode("maxSuggestedLines", CText("CodeEditorMaxVisibleSuggestions"), TreeEmpty(), TreeEmpty(), 1), TreeNode("wordWrap", CText("CodeEditorWordWrap"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("styleArr", CCall(CVar("getObjectValues", zeroConcertPos), [CCall(CVar("mapObj", zeroConcertPos), [CCall(CVar("filterObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("style")], zeroConcertPos), CLambda(["kv2"], CCallBuiltin("||", [CCallBuiltin("&&", [CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("kv2", zeroConcertPos), CText("key")], zeroConcertPos), CText("wordWrap")], zeroConcertPos), CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("kv2", zeroConcertPos), CText("key")], zeroConcertPos), CText("resizableInDisplayMode")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv2", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLambda(["kv"], CLet("name", CCallBuiltin("dot", [CVar("styleNames", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("CallBuiltin"), CArray(CArrayView(0, 0), [CVar("name", zeroConcertPos), CIf(CCallBuiltin("||", [CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("CodeEditorWordWrap")], zeroConcertPos), CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("CodeEditorResizableInDisplayMode")], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), []), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)]), zeroConcertPos)])], zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCallBuiltin("MonacoEditor", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("readonly")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("value")], zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("height")], zeroConcertPos)], zeroConcertPos), CVar("styleArr", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("External")], zeroConcertPos), CLet("dimensionalFields", CArray(CArrayView(0, 0), [CText("width"), CText("height"), CText("positionX"), CText("positionY")]), CLet("args", CCall(CVar("mapObj", zeroConcertPos), [CVar("propsWithoutInternalName", zeroConcertPos), CLambda(["kv"], CIf(CCall(CVar("contains", zeroConcertPos), [CVar("dimensionalFields", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CCall(CVar("eval", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCallBuiltin("External", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("__subtype")], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("args", zeroConcertPos)])], zeroConcertPos), zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("AsCode")], zeroConcertPos), CCallBuiltin("AsCode", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("syntax")], zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("height")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("elemType", zeroConcertPos), CText("HTML")], zeroConcertPos), CCallBuiltin("HTML", [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("innerHTML")], zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("height")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("evaluate")], zeroConcertPos), CCallBuiltin("dot", [CVar("props", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CSequence([CCallBuiltin("println", [CText("Can't create element from given properties")], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("propsObj2Value", CLambda(["propsObj", "old", "oldObj"], CLet("type", CCall(CVar("getType", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isExternal", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CCallBuiltin("External", [CCallBuiltin("dot", [CVar("old", zeroConcertPos), CText("name")], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("mapObj", zeroConcertPos), [CVar("propsObj", zeroConcertPos), CLambda(["kv"], CIf(CCallBuiltin("&&", [CCallBuiltin("<", [CVar("i", zeroConcertPos), CCallBuiltin("length", [CCall(CVar("getObjectKeys", zeroConcertPos), [CVar("typeConfig", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("==", [CCall(CVar("getKeyObj", zeroConcertPos), [CVar("typeConfig", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CText("Lambda")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CText("parsed")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), zeroConcertPos))], zeroConcertPos)])], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("HTML")], zeroConcertPos), CCallBuiltin("HTML", [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("syntax")], zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("size")], zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("size")], zeroConcertPos), CText("height")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("evaluate")], zeroConcertPos), CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("MonacoEditor")], zeroConcertPos), CLet("stylesNames", CObject(TreeNode("maxLines", CText("MMaxLines"), TreeNode("language", CText("CodeEditorLanguage"), TreeEmpty(), TreeEmpty(), 1), TreeNode("resizableInDisplayMode", CText("CodeEditorResizableInDisplayMode"), TreeNode("maxSuggestedLines", CText("CodeEditorMaxVisibleSuggestions"), TreeEmpty(), TreeEmpty(), 1), TreeNode("wordWrap", CText("CodeEditorWordWrap"), TreeEmpty(), TreeEmpty(), 1), 2), 3)), CLet("codeStyleObj2codeStyleArray", CLambda(["obj"], CCall(CVar("fold", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), []), CLambda(["acc", "kv"], CIf(CCallBuiltin("||", [CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CText("wordWrap")], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CText("resizableInDisplayMode")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("acc", zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("CallBuiltin"), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("stylesNames", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [])])], zeroConcertPos)], zeroConcertPos), CVar("acc", zeroConcertPos), zeroConcertPos), CCall(CVar("arrayPush", zeroConcertPos), [CVar("acc", zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("CallBuiltin"), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("stylesNames", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)])])], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos)), CCallBuiltin("MonacoEditor", [CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("readonly")], zeroConcertPos), CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("value")], zeroConcertPos), CCall(CVar("WidthHeight", zeroConcertPos), [CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("size")], zeroConcertPos), CText("width")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("size")], zeroConcertPos), CText("height")], zeroConcertPos)], zeroConcertPos), CCall(CVar("codeStyleObj2codeStyleArray", zeroConcertPos), [CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), CIf(CCall(CVar("isGraphics", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CCallBuiltin("Graphics", [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("shape")], zeroConcertPos), CCall(CVar("stylesObj2array", zeroConcertPos), [CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("style")], zeroConcertPos)], zeroConcertPos), CObject(TreeNode("positionX", CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("positionX")], zeroConcertPos), TreeNode("height", CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("height")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeNode("width", CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("width")], zeroConcertPos), TreeNode("positionY", CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("positionY")], zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Editor")], zeroConcertPos), CCallBuiltin("Editor", [CArray(CArrayView(0, 0), [CVar("propsObj", zeroConcertPos)])], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Object")], zeroConcertPos), CVar("propsObj", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("KeyValue")], zeroConcertPos), CCallBuiltin("makeKeyValue", [CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("key")], zeroConcertPos), CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("isCodingStructure", zeroConcertPos), [CVar("old", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Call")], zeroConcertPos), CLet("unwrapped", CCall(CVar("mapObj", zeroConcertPos), [CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("args")], zeroConcertPos), CLambda(["kv"], CIf(CCallBuiltin("==", [CCall(CVar("getType", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos), CText("AsCode")], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CText("parsed")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CCallBuiltin("makeCodingStructures", [CText("Call"), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("oldObj", zeroConcertPos), CText("fn")], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("unwrapped", zeroConcertPos)])])], zeroConcertPos), zeroConcertPos), CCall(CVar("props2element", zeroConcertPos), [CCallBuiltin("setKeyObj", [CCall(CVar("mapObj", zeroConcertPos), [CVar("propsObj", zeroConcertPos), CLambda(["kv"], CIf(CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("Concert"), CText("Lambda")]), CCall(CVar("getKeyObj", zeroConcertPos), [CVar("typeConfig", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), CText("parsed")], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CText("__type"), CVar("type", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Tree")], zeroConcertPos), CCallBuiltin("Tree", [CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("header")], zeroConcertPos), CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("type", zeroConcertPos), CText("Comap")], zeroConcertPos), CCallBuiltin("Comap", [CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("header")], zeroConcertPos), CCallBuiltin("dot", [CVar("propsObj", zeroConcertPos), CText("children")], zeroConcertPos)], zeroConcertPos), CLet("getSubstrInside", CLambda(["s", "start", "end"], CCall(CVar("takeBeforeLast", zeroConcertPos), [CCall(CVar("takeAfter", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("start", zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos), CVar("end", zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos)), CLet("withoutBraces", CCall(CVar("getSubstrInside", zeroConcertPos), [CCall(CVar("unparse", zeroConcertPos), [CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("propsObj", zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CText("["), CText("]")], zeroConcertPos), CLet("valueStr", CIf(CCall(CVar("contains", zeroConcertPos), [CArray(CArrayView(0, 0), [CText("Bool"), CText("Text"), CText("Int"), CText("Double")]), CVar("type", zeroConcertPos)], zeroConcertPos), CVar("withoutBraces", zeroConcertPos), CCall(CVar("concatStrings", zeroConcertPos), [CArray(CArrayView(0, 0), [CVar("type", zeroConcertPos), CText("("), CVar("withoutBraces", zeroConcertPos), CText(")")])], zeroConcertPos), zeroConcertPos), CCall(CVar("eval", zeroConcertPos), [CCall(CVar("parse", zeroConcertPos), [CVar("valueStr", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("removeIndex", CLambda(["xs", "idx"], CIf(CCall(CVar("existsIndex", zeroConcertPos), [CVar("xs", zeroConcertPos), CVar("idx", zeroConcertPos)], zeroConcertPos), CCallBuiltin("concat", [CCall(CVar("subrange", zeroConcertPos), [CVar("xs", zeroConcertPos), CInt(0), CVar("idx", zeroConcertPos)], zeroConcertPos), CCall(CVar("subrange", zeroConcertPos), [CVar("xs", zeroConcertPos), CCallBuiltin("+", [CVar("idx", zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("-", [CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos), CVar("idx", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("xs", zeroConcertPos), zeroConcertPos))),
		Pair("removeKeyObj", CLambda(["obj", "key"], CCall(CVar("filterObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CLambda(["kv"], CCallBuiltin("!=", [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos), CVar("key", zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("reverse", CLambda(["arr"], CLet("l", CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos), CCall(CVar("mapi", zeroConcertPos), [CVar("arr", zeroConcertPos), CLambda(["idx", "x"], CCallBuiltin("index", [CVar("arr", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("idx", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
		Pair("rotatePoint", CLambda(["p", "angle", "origin"], CLet("s", CCallBuiltin("SINUS", [CVar("angle", zeroConcertPos)], zeroConcertPos), CLet("c", CCallBuiltin("COSINUS", [CVar("angle", zeroConcertPos)], zeroConcertPos), CLet("p1", CCall(CVar("subtractPoints", zeroConcertPos), [CVar("p", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), CLet("p2", CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("-", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("x")], zeroConcertPos), CVar("s", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p", zeroConcertPos), CText("y")], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("addPoints", zeroConcertPos), [CVar("p2", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("rpad", CLambda(["s", "c", "l"], CIf(CCallBuiltin("<", [CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CVar("l", zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("c", zeroConcertPos), CCall(CVar("rpad", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("c", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("s", zeroConcertPos), zeroConcertPos))),
		Pair("rtrim2", CLambda(["s", "ugly"], CLet("l", CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CLet("e", CCall(CVar("countUntil", zeroConcertPos), [CInt(0), CVar("l", zeroConcertPos), CLambda(["i"], CLet("c", CCallBuiltin("getCharAt", [CVar("s", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("strIndexOf", [CVar("ugly", zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos), CInt(-1)], zeroConcertPos), zeroConcertPos))], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("e", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("s", zeroConcertPos), CCall(CVar("strLeft", zeroConcertPos), [CVar("s", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CVar("e", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("s2b", CLambda(["s"], CCallBuiltin("||", [CCallBuiltin("==", [CCall(CVar("toLowerCase", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CText("true")], zeroConcertPos), CCallBuiltin("==", [CVar("s", zeroConcertPos), CText("1")], zeroConcertPos)], zeroConcertPos))),
		Pair("scalePoint", CLambda(["p0", "factor", "origin"], CLet("p1", CCall(CVar("subtractPoints", zeroConcertPos), [CVar("p0", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), CLet("p2", CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("factor", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("factor", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("addPoints", zeroConcertPos), [CVar("p2", zeroConcertPos), CVar("origin", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("select", CLambda(["name", "fn"], CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("name", zeroConcertPos)])], zeroConcertPos), CVar("fname", zeroConcertPos)]), zeroConcertPos))),

	];
}

getConcertPairs23() -> [Pair<string, Concert>] {
	[
		Pair("selectObj", CLambda(["namesObj", "fn"], CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("fn", zeroConcertPos), [CCall(CVar("mapObj", zeroConcertPos), [CVar("namesObj", zeroConcertPos), CLambda(["kv"], CCall(CVar("getVar", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), CCall(CVar("getObjectValues", zeroConcertPos), [CVar("namesObj", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("fname", zeroConcertPos)]), zeroConcertPos))),
		Pair("setDelayed", CLambda(["name", "value"], CLet("patchedValue", CIf(CCall(CVar("isArray", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CIf(CCall(CVar("forall", zeroConcertPos), [CVar("value", zeroConcertPos), CLambda(["v"], CCall(CVar("isObject", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLet("lower", CLambda(["obj"], CCallBuiltin("array2object", [CCall(CVar("map", zeroConcertPos), [CCallBuiltin("object2array", [CVar("obj", zeroConcertPos)], zeroConcertPos), CLambda(["kv"], CCallBuiltin("makeKeyValue", [CCall(CVar("toLowerCase", zeroConcertPos), [CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos)), CCall(CVar("map", zeroConcertPos), [CVar("value", zeroConcertPos), CVar("lower", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CVar("value", zeroConcertPos), zeroConcertPos), CVar("value", zeroConcertPos), zeroConcertPos), CCall(CVar("timer", zeroConcertPos), [CInt(100), CLambda([], CCall(CVar("set", zeroConcertPos), [CVar("name", zeroConcertPos), CVar("patchedValue", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
		Pair("setInterval", CLambda(["duration", "callback"], CLet("disp", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("recursiveTimer", CLambda([], CSequence([CCall(CVar("callback", zeroConcertPos), [], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("disp", zeroConcertPos), CCall(CVar("interruptibleTimer", zeroConcertPos), [CVar("duration", zeroConcertPos), CVar("recursiveTimer", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)])), CSequence([CCall(CVar("recursiveTimer", zeroConcertPos), [], zeroConcertPos), CLambda([], CCall(CCall(CVar("getVar", zeroConcertPos), [CVar("disp", zeroConcertPos)], zeroConcertPos), [], zeroConcertPos))]), zeroConcertPos), zeroConcertPos))),
		Pair("setupGraphics", CLambda([], CSet("__namesStorageName", CArray(CArrayView(0, 0), []), zeroConcertPos))),
		Pair("solveQuadraticEquation", CLambda(["a", "b", "c"], CLet("d", CCallBuiltin("-", [CCallBuiltin("*", [CVar("b", zeroConcertPos), CVar("b", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CCallBuiltin("*", [CInt(4), CVar("a", zeroConcertPos)], zeroConcertPos), CVar("c", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("<", [CVar("d", zeroConcertPos), CInt(0)], zeroConcertPos), CArray(CArrayView(0, 0), []), CIf(CCallBuiltin("==", [CVar("d", zeroConcertPos), CInt(0)], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("/", [CCallBuiltin("-", [CInt(0), CVar("b", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CInt(2), CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]), CLet("sqd", CCallBuiltin("SQRT", [CVar("d", zeroConcertPos)], zeroConcertPos), CLet("x1", CCallBuiltin("/", [CCallBuiltin("-", [CCallBuiltin("-", [CInt(0), CVar("b", zeroConcertPos)], zeroConcertPos), CVar("sqd", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CInt(2), CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("x2", CCallBuiltin("/", [CCallBuiltin("+", [CCallBuiltin("-", [CInt(0), CVar("b", zeroConcertPos)], zeroConcertPos), CVar("sqd", zeroConcertPos)], zeroConcertPos), CCallBuiltin("*", [CInt(2), CVar("a", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("x1", zeroConcertPos), CVar("x2", zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("sortProps", CLambda(["propsArr"], CLet("dimensionalParameters", CArray(CArrayView(0, 0), [CText("width"), CText("height"), CText("positionX"), CText("positionY")]), CCall(CVar("mergeSort", zeroConcertPos), [CVar("propsArr", zeroConcertPos), CLambda(["x", "y"], CLet("xIdx", CCall(CVar("elemIndex", zeroConcertPos), [CVar("dimensionalParameters", zeroConcertPos), CCallBuiltin("dot", [CVar("x", zeroConcertPos), CText("key")], zeroConcertPos), CInt(-1)], zeroConcertPos), CLet("yIdx", CCall(CVar("elemIndex", zeroConcertPos), [CVar("dimensionalParameters", zeroConcertPos), CCallBuiltin("dot", [CVar("y", zeroConcertPos), CText("key")], zeroConcertPos), CInt(-1)], zeroConcertPos), CCallBuiltin("-", [CVar("xIdx", zeroConcertPos), CVar("yIdx", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
		Pair("splitByNumber", CLambda(["a", "n"], CLet("l", CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("||", [CCallBuiltin("<=", [CVar("l", zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos), CCallBuiltin("<=", [CVar("n", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CVar("a", zeroConcertPos)]), CCallBuiltin("concat", [CArray(CArrayView(0, 0), [CCall(CVar("subrange", zeroConcertPos), [CVar("a", zeroConcertPos), CInt(0), CVar("n", zeroConcertPos)], zeroConcertPos)]), CCall(CVar("splitByNumber", zeroConcertPos), [CCall(CVar("subrange", zeroConcertPos), [CVar("a", zeroConcertPos), CVar("n", zeroConcertPos), CCallBuiltin("-", [CVar("l", zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("n", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("startsWith", CLambda(["s", "start"], CLet("sl", CCall(CVar("strlen", zeroConcertPos), [CVar("start", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin(">", [CVar("sl", zeroConcertPos), CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CBool(false), CCallBuiltin("==", [CCall(CVar("substring", zeroConcertPos), [CVar("s", zeroConcertPos), CInt(0), CVar("sl", zeroConcertPos)], zeroConcertPos), CVar("start", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("strContains", CLambda(["str", "substr"], CCallBuiltin(">=", [CCallBuiltin("strIndexOf", [CVar("str", zeroConcertPos), CVar("substr", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos))),
		Pair("strContainsAt", CLambda(["str", "index", "substr"], CCallBuiltin("==", [CCall(CVar("strRangeIndexOf", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("substr", zeroConcertPos), CVar("index", zeroConcertPos), CCallBuiltin("+", [CVar("index", zeroConcertPos), CCall(CVar("strlen", zeroConcertPos), [CVar("substr", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("index", zeroConcertPos)], zeroConcertPos))),
		Pair("strCountOf", CLambda(["text", "substr"], CIf(CCallBuiltin("==", [CCall(CVar("strlen", zeroConcertPos), [CVar("substr", zeroConcertPos)], zeroConcertPos), CInt(0)], zeroConcertPos), CInt(0), CCall(CVar("strCountOfHelper", zeroConcertPos), [CVar("text", zeroConcertPos), CVar("substr", zeroConcertPos), CInt(0), CInt(0)], zeroConcertPos), zeroConcertPos))),
		Pair("strCountOfHelper", CLambda(["text", "substr", "index", "count"], CLet("i", CCall(CVar("strRangeIndexOf", zeroConcertPos), [CVar("text", zeroConcertPos), CVar("substr", zeroConcertPos), CVar("index", zeroConcertPos), CCall(CVar("strlen", zeroConcertPos), [CVar("text", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("count", zeroConcertPos), CCall(CVar("strCountOfHelper", zeroConcertPos), [CVar("text", zeroConcertPos), CVar("substr", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CCall(CVar("strlen", zeroConcertPos), [CVar("substr", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCallBuiltin("+", [CVar("count", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("strGlue", CLambda(["arr", "sep"], CIf(CCallBuiltin("==", [CVar("arr", zeroConcertPos), CArray(CArrayView(0, 0), [])], zeroConcertPos), CText(""), CIf(CCallBuiltin("==", [CCallBuiltin("length", [CVar("arr", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CCallBuiltin("index", [CVar("arr", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("list2string", [CCall(CVar("foldi", zeroConcertPos), [CVar("arr", zeroConcertPos), CCall(CVar("makeList", zeroConcertPos), [], zeroConcertPos), CLambda(["idx", "acc", "e"], CIf(CCallBuiltin("==", [CVar("idx", zeroConcertPos), CInt(0)], zeroConcertPos), CCall(CVar("Cons", zeroConcertPos), [CVar("e", zeroConcertPos), CVar("acc", zeroConcertPos)], zeroConcertPos), CCall(CVar("Cons", zeroConcertPos), [CVar("e", zeroConcertPos), CCall(CVar("Cons", zeroConcertPos), [CVar("sep", zeroConcertPos), CVar("acc", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("strIsFirst", CLambda(["s", "charsToFind"], CLet("l", CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("l", zeroConcertPos), CInt(0)], zeroConcertPos), CBool(false), CLet("first", CCall(CVar("substring", zeroConcertPos), [CVar("s", zeroConcertPos), CInt(0), CInt(1)], zeroConcertPos), CCallBuiltin("!=", [CCallBuiltin("strIndexOf", [CVar("charsToFind", zeroConcertPos), CVar("first", zeroConcertPos)], zeroConcertPos), CInt(-1)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("strLastIndexOf", CLambda(["text", "substr"], CLet("i", CCallBuiltin("strIndexOf", [CVar("text", zeroConcertPos), CVar("substr", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(-1)], zeroConcertPos), CInt(-1), CLet("textL", CCall(CVar("strlen", zeroConcertPos), [CVar("text", zeroConcertPos)], zeroConcertPos), CLet("substringL", CCall(CVar("strlen", zeroConcertPos), [CVar("substr", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("substringL", zeroConcertPos), CInt(0)], zeroConcertPos), CInt(0), CLet("f", CCall(CVar("countUntil", zeroConcertPos), [CInt(0), CCallBuiltin("+", [CCallBuiltin("-", [CVar("textL", zeroConcertPos), CVar("substringL", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos), CLambda(["i2"], CCallBuiltin("==", [CCall(CVar("substring", zeroConcertPos), [CVar("text", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("-", [CVar("textL", zeroConcertPos), CVar("substringL", zeroConcertPos)], zeroConcertPos), CVar("i2", zeroConcertPos)], zeroConcertPos), CVar("substringL", zeroConcertPos)], zeroConcertPos), CVar("substr", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("-", [CVar("textL", zeroConcertPos), CVar("substringL", zeroConcertPos)], zeroConcertPos), CVar("f", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("strLeft", CLambda(["s", "index"], CCallBuiltin("LEFT", [CVar("s", zeroConcertPos), CVar("index", zeroConcertPos)], zeroConcertPos))),
		Pair("strRangeIndexOf", CLambda(["str", "substr", "start", "end"], CLet("rv", CCallBuiltin("strIndexOf", [CCall(CVar("substring", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("start", zeroConcertPos), CCallBuiltin("-", [CVar("end", zeroConcertPos), CVar("start", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("substr", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("<", [CVar("rv", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("rv", zeroConcertPos), CCallBuiltin("+", [CVar("start", zeroConcertPos), CVar("rv", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("strRemove", CLambda(["s", "start", "len"], CIf(CCallBuiltin("==", [CVar("len", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("s", zeroConcertPos), CCallBuiltin("+", [CCall(CVar("strLeft", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("start", zeroConcertPos)], zeroConcertPos), CCall(CVar("strRight", zeroConcertPos), [CVar("s", zeroConcertPos), CCallBuiltin("+", [CVar("start", zeroConcertPos), CVar("len", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("strRepeat", CLambda(["s", "cnt"], CIf(CCallBuiltin(">", [CVar("cnt", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("+", [CVar("s", zeroConcertPos), CCall(CVar("strRepeat", zeroConcertPos), [CVar("s", zeroConcertPos), CCallBuiltin("-", [CVar("cnt", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CText(""), zeroConcertPos))),
		Pair("strReplaces", CLambda(["s", "oldnew"], CLet("n", CCallBuiltin("length", [CVar("oldnew", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("<", [CVar("n", zeroConcertPos), CInt(2)], zeroConcertPos), CVar("s", zeroConcertPos), CCall(CVar("strReplaces", zeroConcertPos), [CCallBuiltin("strReplace", [CVar("s", zeroConcertPos), CCallBuiltin("index", [CVar("oldnew", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin("index", [CVar("oldnew", zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos), CCall(CVar("subrange", zeroConcertPos), [CVar("oldnew", zeroConcertPos), CInt(2), CCallBuiltin("-", [CVar("n", zeroConcertPos), CInt(2)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("strRight", CLambda(["s", "index"], CCallBuiltin("RIGHT", [CVar("s", zeroConcertPos), CCallBuiltin("-", [CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CVar("index", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("strSplit", CLambda(["a", "sep"], CCallBuiltin("STRSPLIT", [CVar("a", zeroConcertPos), CVar("sep", zeroConcertPos)], zeroConcertPos))),
		Pair("strSplit2WithoutLeave", CLambda(["a", "sep"], CCallBuiltin("STRSPLIT", [CVar("a", zeroConcertPos), CVar("sep", zeroConcertPos)], zeroConcertPos))),
		Pair("strSubRange", CLambda(["s", "start", "end"], CCall(CVar("substring", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("start", zeroConcertPos), CCallBuiltin("-", [CVar("end", zeroConcertPos), CVar("start", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("strlen", CLambda(["s"], CCallBuiltin("LEN", [CVar("s", zeroConcertPos)], zeroConcertPos))),
		Pair("strsubsmart", CLambda(["s", "start", "length"], CIf(CCallBuiltin("&&", [CCallBuiltin(">=", [CVar("start", zeroConcertPos), CInt(0)], zeroConcertPos), CCallBuiltin(">", [CVar("len", zeroConcertPos), CInt(0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("substring", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("start", zeroConcertPos), CVar("len", zeroConcertPos)], zeroConcertPos), CLet("slen", CCall(CVar("strlen", zeroConcertPos), [CVar("s", zeroConcertPos)], zeroConcertPos), CLet("realStart", CIf(CCallBuiltin(">=", [CVar("start", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("start", zeroConcertPos), CLet("ss", CCallBuiltin("+", [CVar("slen", zeroConcertPos), CVar("start", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin(">=", [CVar("ss", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("ss", zeroConcertPos), CInt(0), zeroConcertPos), zeroConcertPos), zeroConcertPos), CLet("realLength", CIf(CCallBuiltin(">", [CVar("len", zeroConcertPos), CInt(0)], zeroConcertPos), CVar("len", zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("+", [CVar("slen", zeroConcertPos), CVar("len", zeroConcertPos)], zeroConcertPos), CVar("realStart", zeroConcertPos)], zeroConcertPos), zeroConcertPos), CCall(CVar("substring", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("realStart", zeroConcertPos), CVar("realLength", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("stylesObj2array", CLambda(["obj"], CLet("styleNames", CObject(TreeNode("stroke", CText("Stroke"), TreeNode("fillOpacity", CText("FillOpacity"), TreeNode("fill", CText("Fill"), TreeEmpty(), TreeEmpty(), 1), TreeNode("radialGradient", CText("RadialGradient"), TreeNode("gradientFill", CText("GradientFill"), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), 3), TreeNode("strokeOpacity", CText("StrokeOpacity"), TreeNode("strokeDashed", CText("StrokeDashed"), TreeEmpty(), TreeNode("strokeLineGradient", CText("StrokeLineGradient"), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("strokeWidth", CText("StrokeWidth"), TreeEmpty(), TreeEmpty(), 1), 3), 4)), CLet("makeGradientPoint", CLambda(["obj"], CCallBuiltin("makeCodingStructures", [CText("CallBuiltin"), CArray(CArrayView(0, 0), [CText("GradientPoint"), CArray(CArrayView(0, 0), [CCall(CVar("getConcertColor", zeroConcertPos), [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("color")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("alpha")], zeroConcertPos), CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("offset")], zeroConcertPos)])])], zeroConcertPos)), CLet("makeStyleBuiltin", CLambda(["name", "value"], CCallBuiltin("makeCodingStructures", [CText("CallBuiltin"), CArray(CArrayView(0, 0), [CVar("name", zeroConcertPos), CIf(CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("RadialGradient")], zeroConcertPos), CArray(CArrayView(0, 0), []), CIf(CCallBuiltin("||", [CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("GradientFill")], zeroConcertPos), CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("StrokeLineGradient")], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("rotation")], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCallBuiltin("dot", [CVar("value", zeroConcertPos), CText("points")], zeroConcertPos), CVar("makeGradientPoint", zeroConcertPos)], zeroConcertPos)]), CIf(CCallBuiltin("||", [CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("Fill")], zeroConcertPos), CCallBuiltin("==", [CVar("name", zeroConcertPos), CText("Stroke")], zeroConcertPos)], zeroConcertPos), CArray(CArrayView(0, 0), [CCall(CVar("getConcertColor", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos)]), CArray(CArrayView(0, 0), [CVar("value", zeroConcertPos)]), zeroConcertPos), zeroConcertPos), zeroConcertPos)])], zeroConcertPos)), CLet("objAdjustedFill", CIf(CCallBuiltin("&&", [CCallBuiltin("==", [CCall(CVar("getTarget", zeroConcertPos), [], zeroConcertPos), CText("cpp")], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("dot", [CVar("obj", zeroConcertPos), CText("fillOpacity")], zeroConcertPos), CDouble(0.0)], zeroConcertPos)], zeroConcertPos), CCall(CVar("removeKeyObj", zeroConcertPos), [CVar("obj", zeroConcertPos), CText("fill")], zeroConcertPos), CVar("obj", zeroConcertPos), zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCall(CVar("filter", zeroConcertPos), [CCallBuiltin("object2array", [CVar("objAdjustedFill", zeroConcertPos)], zeroConcertPos), CLambda(["kv2"], CCallBuiltin("not", [CCallBuiltin("&&", [CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv2", zeroConcertPos), CText("key")], zeroConcertPos), CText("radialGradient")], zeroConcertPos), CCallBuiltin("==", [CCallBuiltin("dot", [CVar("kv2", zeroConcertPos), CText("value")], zeroConcertPos), CBool(false)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CLambda(["kv"], CCall(CVar("makeStyleBuiltin", zeroConcertPos), [CCallBuiltin("dot", [CVar("styleNames", zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("key")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("dot", [CVar("kv", zeroConcertPos), CText("value")], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("subrange", CLambda(["xs", "index", "length"], CCall(CVar("__subrange", zeroConcertPos), [CArray(CArrayView(0, 0), []), CVar("xs", zeroConcertPos), CVar("index", zeroConcertPos), CVar("length", zeroConcertPos)], zeroConcertPos))),
		Pair("subscribe0", CLambda(["varName", "fn"], CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("varName", zeroConcertPos)])], zeroConcertPos), CLambda([], CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos))]), zeroConcertPos))),
		Pair("subscribe2", CLambda(["varName", "fn"], CLet("fname", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLet("gateName", CCall(CVar("createVar", zeroConcertPos), [CBool(false)], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("fname", zeroConcertPos), CLambda([], CIf(CCall(CVar("getVar", zeroConcertPos), [CVar("gateName", zeroConcertPos)], zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("gateName", zeroConcertPos), CBool(true)], zeroConcertPos), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("varName", zeroConcertPos)])], zeroConcertPos), CLambda([], CSequence([CCallBuiltin("deactivate", [CVar("fname", zeroConcertPos)], zeroConcertPos), CCallBuiltin("deactivate", [CVar("gateName", zeroConcertPos)], zeroConcertPos)]))]), zeroConcertPos), zeroConcertPos))),
		Pair("subscribeSetStatement", CLambda(["valueName", "varName", "fn"], CCall(CVar("subscribe2", zeroConcertPos), [CVar("valueName", zeroConcertPos), CLambda(["c"], CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getKeyObj", zeroConcertPos), [CCall(CVar("extractSets", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos))),
		Pair("subselect", CLambda(["name", "fn"], CLet("firstb", CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("res", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("firstb", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("disconnectFn", CCall(CVar("createVar", zeroConcertPos), [CCall(CVar("connect", zeroConcertPos), [CVar("firstb", zeroConcertPos), CVar("res", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CLet("uns", CCall(CVar("subscribe2", zeroConcertPos), [CVar("name", zeroConcertPos), CLambda(["v"], CSequence([CCall(CCall(CVar("getVar", zeroConcertPos), [CVar("disconnectFn", zeroConcertPos)], zeroConcertPos), [], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("disconnectFn", zeroConcertPos), CCall(CVar("connect", zeroConcertPos), [CCall(CVar("fn", zeroConcertPos), [CVar("v", zeroConcertPos)], zeroConcertPos), CVar("res", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos), CObject(TreeNode("result", CVar("res", zeroConcertPos), TreeEmpty(), TreeNode("unsubscriber", CLambda([], CSequence([CCallBuiltin("deactivate", [CVar("uns", zeroConcertPos)], zeroConcertPos), CCall(CCall(CVar("getVar", zeroConcertPos), [CVar("disconnectFn", zeroConcertPos)], zeroConcertPos), [], zeroConcertPos)])), TreeEmpty(), TreeEmpty(), 1), 2)), zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("substring", CLambda(["s", "start", "length"], CCallBuiltin("MID", [CVar("s", zeroConcertPos), CCallBuiltin("+", [CVar("start", zeroConcertPos), CInt(1)], zeroConcertPos), CVar("length", zeroConcertPos)], zeroConcertPos))),
		Pair("subtractPoints", CLambda(["p1", "p2"], CCall(CVar("Point", zeroConcertPos), [CCallBuiltin("-", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("x")], zeroConcertPos), CCallBuiltin("dot", [CVar("p2", zeroConcertPos), CText("x")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("-", [CCallBuiltin("dot", [CVar("p1", zeroConcertPos), CText("y")], zeroConcertPos), CCallBuiltin("dot", [CVar("p2", zeroConcertPos), CText("y")], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("switchConcert", CLambda(["c", "branches"], CLet("info", CCall(CVar("concert2object", zeroConcertPos), [CVar("c", zeroConcertPos)], zeroConcertPos), CLet("branch", CCallBuiltin("getKeyObjDef", [CVar("branches", zeroConcertPos), CCall(CVar("toLowerCase", zeroConcertPos), [CCallBuiltin("dot", [CVar("info", zeroConcertPos), CText("__type")], zeroConcertPos)], zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("!=", [CVar("branch", zeroConcertPos), CCallBuiltin("Empty", [], zeroConcertPos)], zeroConcertPos), CCall(CVar("apply", zeroConcertPos), [CVar("branch", zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CCallBuiltin("dot", [CVar("info", zeroConcertPos), CText("__fields")], zeroConcertPos), CLambda(["f"], CCallBuiltin("quote", [CCallBuiltin("dot", [CVar("info", zeroConcertPos), CVar("f", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos)], zeroConcertPos), CCall(CCallBuiltin("getKeyObjDef", [CVar("branches", zeroConcertPos), CText("default"), CVar("nop", zeroConcertPos)], zeroConcertPos), [], zeroConcertPos), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("syncVars", CLambda(["varnames"], CLet("currentChangesIdx", CCall(CVar("createVar", zeroConcertPos), [CInt(-1)], zeroConcertPos), CLet("setVars", CLambda(["value"], CCall(CVar("iter", zeroConcertPos), [CVar("varnames", zeroConcertPos), CLambda(["vname"], CCall(CVar("set", zeroConcertPos), [CVar("vname", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos))], zeroConcertPos)), CLet("unss", CCall(CVar("mapi", zeroConcertPos), [CVar("varnames", zeroConcertPos), CLambda(["i", "vname"], CCall(CVar("subscribe2", zeroConcertPos), [CVar("vname", zeroConcertPos), CLambda(["value"], CIf(CCallBuiltin("==", [CCall(CVar("getVar", zeroConcertPos), [CVar("currentChangesIdx", zeroConcertPos)], zeroConcertPos), CInt(-1)], zeroConcertPos), CSequence([CCall(CVar("set", zeroConcertPos), [CVar("currentChangesIdx", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CSequence([CCall(CVar("setVars", zeroConcertPos), [CVar("value", zeroConcertPos)], zeroConcertPos), CCall(CVar("set", zeroConcertPos), [CVar("currentChangesIdx", zeroConcertPos), CInt(-1)], zeroConcertPos)])]), CEmpty(), zeroConcertPos))], zeroConcertPos))], zeroConcertPos), CLambda([], CCall(CVar("iter", zeroConcertPos), [CVar("unss", zeroConcertPos), CLambda(["uns"], CCall(CVar("uns", zeroConcertPos), [], zeroConcertPos))], zeroConcertPos)), zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("tail", CLambda(["xs"], CCall(CVar("subrange", zeroConcertPos), [CVar("xs", zeroConcertPos), CInt(1), CCallBuiltin("-", [CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos))),
		Pair("tailList", CLambda(["list"], CCallBuiltin("getKeyObjDef", [CVar("list", zeroConcertPos), CText("tail"), CCall(CVar("EmptyList", zeroConcertPos), [], zeroConcertPos)], zeroConcertPos))),
		Pair("take", CLambda(["xs", "count"], CIf(CCallBuiltin("<=", [CVar("count", zeroConcertPos), CInt(0)], zeroConcertPos), CArray(CArrayView(0, 0), []), CIf(CCallBuiltin(">=", [CVar("count", zeroConcertPos), CCallBuiltin("length", [CVar("xs", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CVar("xs", zeroConcertPos), CCall(CVar("subrange", zeroConcertPos), [CVar("xs", zeroConcertPos), CInt(0), CVar("count", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("takeAfter", CLambda(["str", "sep", "def"], CLet("i", CCallBuiltin("strIndexOf", [CVar("str", zeroConcertPos), CVar("sep", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("def", zeroConcertPos), CCall(CVar("strRight", zeroConcertPos), [CVar("str", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CCall(CVar("strlen", zeroConcertPos), [CVar("sep", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("takeAfterLast", CLambda(["str", "sep", "def"], CLet("i", CCall(CVar("strLastIndexOf", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("sep", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("def", zeroConcertPos), CCall(CVar("strRight", zeroConcertPos), [CVar("str", zeroConcertPos), CCallBuiltin("+", [CVar("i", zeroConcertPos), CCall(CVar("strlen", zeroConcertPos), [CVar("sep", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("takeBefore", CLambda(["str", "sep", "def"], CLet("i", CCallBuiltin("strIndexOf", [CVar("str", zeroConcertPos), CVar("sep", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("def", zeroConcertPos), CCall(CVar("strLeft", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("takeBeforeLast", CLambda(["str", "sep", "def"], CLet("i", CCall(CVar("strLastIndexOf", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("sep", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("i", zeroConcertPos), CInt(-1)], zeroConcertPos), CVar("def", zeroConcertPos), CCall(CVar("strLeft", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("takeBetween", CLambda(["str", "start", "stop", "def"], CLet("after", CCall(CVar("takeAfter", zeroConcertPos), [CVar("str", zeroConcertPos), CVar("start", zeroConcertPos), CVar("def", zeroConcertPos)], zeroConcertPos), CIf(CCallBuiltin("==", [CVar("after", zeroConcertPos), CVar("def", zeroConcertPos)], zeroConcertPos), CVar("def", zeroConcertPos), CCall(CVar("takeBefore", zeroConcertPos), [CVar("after", zeroConcertPos), CVar("stop", zeroConcertPos), CVar("def", zeroConcertPos)], zeroConcertPos), zeroConcertPos), zeroConcertPos))),
		Pair("toLowerCase", CLambda(["s"], CCallBuiltin("LOWER", [CVar("s", zeroConcertPos)], zeroConcertPos))),
		Pair("toUpperCase", CLambda(["s"], CCallBuiltin("UPPER", [CVar("s", zeroConcertPos)], zeroConcertPos))),
		Pair("trim", CLambda(["s"], CCallBuiltin("TRIM", [CVar("s", zeroConcertPos)], zeroConcertPos))),
		Pair("trim2", CLambda(["s", "ugly"], CCall(CVar("rtrim2", zeroConcertPos), [CCall(CVar("ltrim2", zeroConcertPos), [CVar("s", zeroConcertPos), CVar("ugly", zeroConcertPos)], zeroConcertPos), CVar("ugly", zeroConcertPos)], zeroConcertPos))),
		Pair("updateVar", CLambda(["varName", "fn"], CCall(CVar("set", zeroConcertPos), [CVar("varName", zeroConcertPos), CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos))),
		Pair("updateVarNotEvaluate", CLambda(["varName", "fn"], CLet("value", CCall(CVar("fn", zeroConcertPos), [CCall(CVar("getVar", zeroConcertPos), [CVar("varName", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("setNotEvaluate", zeroConcertPos), [CVar("varName", zeroConcertPos), CVar("value", zeroConcertPos)], zeroConcertPos), zeroConcertPos))),
		Pair("useContent", CLambda(["c"], CLet("contentName", CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CSequence([CCall(CVar("subscribe", zeroConcertPos), [CVar("contentName", zeroConcertPos), CLambda([], CVar("c", zeroConcertPos)), CArray(CArrayView(0, 0), [])], zeroConcertPos), CSequence([CCall(CVar("updateVar", zeroConcertPos), [CText("__namesStorageName"), CLambda(["storage"], CCall(CVar("arrayPush", zeroConcertPos), [CVar("storage", zeroConcertPos), CVar("contentName", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CVar("contentName", zeroConcertPos)])]), zeroConcertPos))),
		Pair("var", CLambda(["name"], CCall(CVar("object2concert", zeroConcertPos), [CObject(TreeNode("__type", CText("Var"), TreeEmpty(), TreeNode("name", CVar("name", zeroConcertPos), TreeEmpty(), TreeEmpty(), 1), 2))], zeroConcertPos))),
		Pair("wigiSetup", CLambda(["names"], CSequence([CCall(CVar("setDelayed", zeroConcertPos), [CText("showCorrect"), CBool(false)], zeroConcertPos), CCall(CVar("map", zeroConcertPos), [CVar("names", zeroConcertPos), CLambda(["name"], CSequence([CCall(CVar("subscribe", zeroConcertPos), [CCall(CVar("makeUniqueId", zeroConcertPos), [], zeroConcertPos), CLambda([], CIf(CCallBuiltin("not", [CCall(CVar("getVar", zeroConcertPos), [CText("showCorrect")], zeroConcertPos)], zeroConcertPos), CCall(CVar("setWigi", zeroConcertPos), [CCall(CVar("toUpperCase", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos), CCall(CVar("getVar", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos)), CArray(CArrayView(0, 0), [CVar("name", zeroConcertPos)])], zeroConcertPos), CCall(CVar("getWigiAsync", zeroConcertPos), [CCallBuiltin("+", [CCallBuiltin("+", [CText("ext"), CCall(CVar("toUpperCase", zeroConcertPos), [CCall(CVar("substring", zeroConcertPos), [CVar("name", zeroConcertPos), CInt(0), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("substring", zeroConcertPos), [CVar("name", zeroConcertPos), CInt(1), CCallBuiltin("-", [CCall(CVar("strlen", zeroConcertPos), [CVar("name", zeroConcertPos)], zeroConcertPos), CInt(1)], zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("makeCallback", zeroConcertPos), [CLambda(["wigiValue"], CIf(CCallBuiltin("not", [CCall(CVar("startsWith", zeroConcertPos), [CVar("wigiValue", zeroConcertPos), CText("WigiError")], zeroConcertPos)], zeroConcertPos), CCall(CVar("setDelayed", zeroConcertPos), [CVar("name", zeroConcertPos), CVar("wigiValue", zeroConcertPos)], zeroConcertPos), CEmpty(), zeroConcertPos))], zeroConcertPos)], zeroConcertPos)]))], zeroConcertPos)]))),
		Pair("zipWith", CLambda(["a", "b", "fn"], CIf(CCallBuiltin(">=", [CCallBuiltin("length", [CVar("a", zeroConcertPos)], zeroConcertPos), CCallBuiltin("length", [CVar("b", zeroConcertPos)], zeroConcertPos)], zeroConcertPos), CCall(CVar("mapi", zeroConcertPos), [CVar("b", zeroConcertPos), CLambda(["i", "bi"], CCall(CVar("fn", zeroConcertPos), [CCallBuiltin("index", [CVar("a", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos), CVar("bi", zeroConcertPos)], zeroConcertPos))], zeroConcertPos), CCall(CVar("mapi", zeroConcertPos), [CVar("a", zeroConcertPos), CLambda(["i", "ai"], CCall(CVar("fn", zeroConcertPos), [CVar("ai", zeroConcertPos), CCallBuiltin("index", [CVar("b", zeroConcertPos), CVar("i", zeroConcertPos)], zeroConcertPos)], zeroConcertPos))], zeroConcertPos), zeroConcertPos))),
	];
}

concertGlobals : ref Maybe<Tree<string, Concert>> = ref None();
getConcertGlobals() -> Tree<string, Concert> {
	onlyOnce(concertGlobals, \ ->
		pairs2tree(concatA([
			getConcertPairs1(), getConcertPairs2(), getConcertPairs3(), getConcertPairs4(), getConcertPairs5(), getConcertPairs6(), getConcertPairs7(), getConcertPairs8(), getConcertPairs9(), getConcertPairs10(), getConcertPairs11(), getConcertPairs12(), getConcertPairs13(), getConcertPairs14(), getConcertPairs15(), getConcertPairs16(), getConcertPairs17(), getConcertPairs18(), getConcertPairs19(), getConcertPairs20(), getConcertPairs21(), getConcertPairs22(), getConcertPairs23()
		]))
	);
}
*/