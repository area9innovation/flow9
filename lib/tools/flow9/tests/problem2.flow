import ds/array;
SimplePromise2(
    f : (fulfill : (?) -> void, reject : (??) -> void) -> void
);

collectPromises2(promises : [SimplePromise2<?, ??>]) -> SimplePromise2<[?], ??> {
    ps = length(promises);
    if (ps == 0) {
        SimplePromise2(\fulfill, reject -> fulfill([]))
    } else if (ps == 1) {
        SimplePromise2(\fulfill /*: ([?]) -> void*/, reject -> { // Without this type annotation, we go into infinite loop
            promises[0].f(
                \r -> fulfill([r]),
                reject
            )
        })
    } else {
        half = ps / 2;
        left = take(promises, half);
        
        SimplePromise2(\fulfill, reject -> {
            collectPromises2(left).f(
                \leftResults -> {
                    right = tailFrom(promises, half);
                    collectPromises2(right).f(
                        \rightResults -> fulfill(concat(leftResults, rightResults)),
                        reject
                    )
                },
                reject
            )
        })
    }
}