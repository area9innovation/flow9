// Unions
BcDebugKind ::= DebugPosExpr, DebugPosCall, DebugPosStruct, DebugPosFunction, DebugPosFunctionLocals, DebugPosFunctionEnd;
Bytecode ::= CVoid, CBool, CInt, CDouble, CString, CArray, CStruct, CSetLocal, CGetLocal, CGetGlobal, CReturn, CGoto, CCodePointer, CCall, CCallN, CIfFalse, CNot, CPlus, CMinus, CLessThan, CNativeFn, CEqual, CNegate, CMultiply, CDivide, CModulo, CPop, CLessEqual, CArrayGet, CReserveLocals, CRefTo, CDebugInfo, CDeref, CSetRef, CInt2Double, CInt2String, CDouble2Int, CDouble2String, CField, CFieldName, CStructDef, CGetFreeVar, CClosureReturn, CClosurePointer, CSwitch, CUncaughtSwitch, CTailCall, CPlusString, CPlusInt, CMinusInt, CNegateInt, CMultiplyInt, CDivideInt, CModuloInt, CSimpleSwitch, CWString, CLast, CBreakpoint, COptionalNativeFn, CSetMutable, CSetMutableName;
BytecodeOrChunks ::= Bytecode, BytecodeAsString;
BytecodeTypeCode ::= TCFlow, TCVoid, TCBool, TCInt, TCDouble, TCString, TCArray, TCStruct, TCRefTo, TCTypedArray, TCTypedStruct, TCTypedRefTo, TCSetMutable;
DNode<?> ::= DEnd, DLink<?>;
FcArgType ::= FcStructArg, FcFunArg;
FcBackendConfig ::= FiJsConfig, FiNimConfig, FcRustConfig, FiJavaConfig, FcBytecodeConfig, FiHTMLConfig, FcProtobufConfig, FcSpeedyConfig, FcLISPConfig, FcCppConfig, FcCpp2Config, FiDConfig, FcMLConfig, FiDocConfig, FiWasmConfig, FcIncaConfig, FcFlowConfig, FiTsdConfig, FiWiseConfig, FiCpp3Config;
FcBaseType ::= FcTypeVoid, FcTypeBool, FcTypeInt, FcTypeDouble, FcTypeString, FcTypeNative;
FcCommonConfig ::= FcBackendConfig, CompilerConfig;
FcConst ::= FcVoid, FcDouble, FcInt, FcString, FcBool;
FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;
FcExp ::= FcLambda, FcCall, FcVar, FcLet, FcIf, FcSwitch, FcCast, FcSeq, FcCallPrim, FcConst, FcRequire, FcUnsafe;
FcPreloadedModule ::= FcParsed, FcLoaded;
FcPrim ::= FcOrPrim, FcAndPrim, FcNotPrim, FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim, FcArrayPrim, FcIndexPrim, FcDerefPrim, FcAssignPrim, FcRefPrim, FcStructPrim, FcFieldPrim, FcSetMutablePrim, FcCreateClosurePrim, FcQuote, FcUnquote;
FcType ::= FcBaseType, FcTypeArray, FcTypeFunction, FcTypeRef, FcTypeParameter, FcTypeFlow, FcTypeName, FcTypeStruct, FcTypeUnion, FcTypeVar;
FcTypeCheck ::= FcExpectOneOf, FcCheckStructs, FcCheckMutable, FcNotVoid, FcNotFunction;
FcTypeExpect ::= FcLessOrEqual, FcExpectField, FcVerifyType, FcSetMutableField;
FiBcNameResolution ::= FiBcStruct, FiBcGlobal, FiBcLocal, FiBcClosure;
FiConst ::= FiVoid, FiDouble, FiInt, FiString, FiBool;
FiDeclaration ::= FiFunctionDec, FiGlobalVar, FiNativeDec;
FiExp ::= FiLambda, FiCall, FiVar, FiLet, FiIf, FiSwitch, FiCast, FiSeq, FiCallPrim, FiConst, FiRequire, FiUnsafe;
FiExportSignature ::= FiTypeStruct, FiTypeUnion, FiType, FiExportNative;
FiNamed ::= FiDeclaration, FiStructOrUnion;
FiStructOrUnion ::= FiTypeStruct, FiTypeUnion;
FiToplevel ::= FiDeclaration, FiStructOrUnion;
FiType ::= FiTypeArray, FiTypeFunction, FiTypeRef, FiTypeParameter, FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeFlow, FiTypeVoid, FiTypeNative, FiTypeName;
List<?> ::= EmptyList, Cons<?>;
Maybe<?> ::= None, Some<?>;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
BCDFunction(pc : int, name : string);
BCDLocal(pc : int, type : int, id : int, name : string);
BCDPosition(pc : int, pos : int, comment : BcDebugKind);
BCDebugInfo(functions : ref List<BCDFunction>, locals : ref List<BCDLocal>, positions : ref List<string>, currentPositions : ref List<BCDPosition>, endByte : ref int);
BCIFunction(name : string);
BCILocals(nargs : int, locals : [string], upvals : [string]);
BlueReplacement(start : int, end : int, value : string);
BytecodeAsString(bytes : string);
CArray(size : int);
CArrayGet();
CBool(value : bool);
CBreakpoint();
CCall();
CCallN(nargs : int);
CClosurePointer(size : int, offset : int);
CClosureReturn();
CCodePointer(offset : int);
CDebugInfo(name : string);
CDeref();
CDivide();
CDivideInt();
CDouble(value : double);
CDouble2Int();
CDouble2String();
CEqual();
CField(index : int);
CFieldName(name : string);
CGetFreeVar(index : int);
CGetGlobal(index : int);
CGetLocal(index : int);
CGoto(offset : int);
CIfFalse(offset : int);
CInt(value : int);
CInt2Double();
CInt2String();
CLast();
CLessEqual();
CLessThan();
CMinus();
CMinusInt();
CModulo();
CModuloInt();
CMultiply();
CMultiplyInt();
CNativeFn(name : string, args : int);
CNegate();
CNegateInt();
CNot();
COptionalNativeFn(name : string, args : int);
CPlus();
CPlusInt();
CPlusString();
CPop();
CRefTo();
CReserveLocals(locals : int, args : int);
CReturn();
CSetLocal(index : int);
CSetMutable(index : int);
CSetMutableName(name : string);
CSetRef();
CSimpleSwitch(defoffset : int, cases : [Pair<int, int>]);
CString(value : string);
CStruct(index : int);
CStructDef(index : int, name : string, args : [Pair<string, BytecodeTypeCode>]);
CSwitch(defoffset : int, cases : [Pair<int, int>]);
CTailCall(nargs : int);
CUncaughtSwitch();
CVoid();
CWString(value : string);
CompilerConfig(flowfile : string, includes : [string], objectFolders : [string], verbose : int, jsParams : JSCliParams, config : Tree<string, string>, threadId : int);
ConcurHashMap(map : native, dummy : [Pair<?, ??>]);
Cons(head : ?, tail : List<?>);
DEnd();
DLink(v : ?, before : DNode<?>, after : DNode<?>, attached : bool);
DList(first : DNode<?>, last : DNode<?>);
DebugPosCall();
DebugPosExpr();
DebugPosFunction(name : string, isNative : bool);
DebugPosFunctionEnd(isNative : bool);
DebugPosFunctionLocals(isNative : bool);
DebugPosStruct();
DependencyTracker(dependsUpon : Tree<?, Set<?>>, fileRequires : Tree<?, Set<?>>, nonDependent : Set<?>);
EasyGraph(nodes : Tree<int, GNode<?>>, edges : Tree<int, [GEdge<??>]>, numberOfEdges : int);
EmptyList();
FcAndPrim();
FcArrayPrim();
FcAssignPrim();
FcBool(b : bool, info : FcInfo);
FcBytecodeConfig(flowfile : string, outputfile : string, upload : bool, includes : [string], debug : bool, verbose : int, threadId : int, debugInfo : BCDebugInfo, nargs : bool, debugVerbose : bool);
FcCacheModule(loaded : FcLoaded, outdated : bool);
FcCacheNamed(named : FiNamed, module : string, exported : bool);
FcCachedSource(text : string, modified : double, resolver : Maybe<LineResolver>);
FcCall(f : FcExp, args : [FcExp], info : FcInfo);
FcCallPrim(op : FcPrim, es : [FcExp], info : FcInfo);
FcCase(struct : string, argNames : [string], body : FcExp, info : FcInfo);
FcCast(e : FcExp, tFrom : FcType, tTo : FcType, info : FcInfo);
FcCheckMutable(field : string, type : FcType, info : FcInfo2);
FcCheckStructs(names : [string], open : bool, t : FcType, info : FcInfo2);
FcCpp2Config(flowfile : string, outputFile : string, outputDir : string, generateDir : string, buildExe : bool, includes : [string], debug : bool, verbose : int, threadId : int, extStructDefs : bool, entry : string, useGui : bool);
FcCppConfig(flowfile : string, outputfile : string, includes : [string], debug : bool, verbose : int, threadId : int, fileinfo : FiFileInfo, structIndexes : Tree<string, int>);
FcCreateClosurePrim(structName : string, functionName : string);
FcDerefPrim();
FcDivPrim();
FcDouble(d : double, info : FcInfo);
FcEqPrim();
FcError(message : string, positions : [FcPosition]);
FcExpectField(field : string, fieldType : FcType, t : FcType, info : FcInfo2, e : FcExp);
FcExpectOneOf(types : [FcBaseType], type : FcType, info : FcInfo2);
FcFieldPrim(name : string);
FcFileInfo(flowfile : string, trampstamp : double, fullpath : string, md5sum : string, content : string, gensymid : int, filesize : double);
FcFlowConfig(flowfile : string, outputdir : string, includes : [string], verbose : int, threadId : int);
FcForbid(flowfile : string, start : int, end : int);
FcFunArg(name : string, type : FcType);
FcFunArg2(name : string, type : Maybe<FcType>);
FcFunctionDec(name : string, lambda : Maybe<FcLambda>, declType : FcTypeFunction2, declInfo : FcInfo, defiInfo : FcInfo);
FcGePrim();
FcGlobalNames(struct2module : Tree<string, string>, union2module : Tree<string, string>, function2module : Tree<string, string>, globalVar2module : Tree<string, string>, native2module : Tree<string, string>, structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, struct2unions : Tree<string, [string]>, field2structs : Tree<string, [string]>, toplevel : Tree<string, FcDeclaration>, structTypars : Tree<string, int>, moduleImports : Tree<string, Set<string>>);
FcGlobalVar(name : string, value : Maybe<FcExp>, declInfo : FcInfo, bodyInfo : FcInfo);
FcGtPrim();
FcIf(e1 : FcExp, e2 : FcExp, e3 : FcExp, info : FcInfo);
FcImport(flowfile : string, dynamic : bool, start : int, end : int);
FcIncaConfig(flowfile : string, outputdir : string, includes : [string], verbose : int, threadId : int);
FcIndexPrim();
FcInfo(type : ref Maybe<FcType>, start : int, end : int);
FcInfo2(start : int, end : int);
FcInt(i : int, info : FcInfo);
FcLISPConfig(flowfile : string, outputfile : string, includes : [string], debug : bool, verbose : int, threadId : int, fileinfo : FiFileInfo, initVars : string, structNames : Tree<string, int>, structFields : Tree<string, string>);
FcLambda(args : [FcFunArg], body : FcExp, info : FcInfo);
FcLePrim();
FcLessOrEqual(output : FcType, input : FcType, description : string, info : FcInfo2, e : FcExp);
FcLet(name : string, type : FcType, e1 : FcExp, e2 : FcExp, info : FcInfo);
FcLoaded(module : FiModule, dependencyChanged : () -> bool);
FcLtPrim();
FcMLConfig(flowfile : string, outputfile : string, includes : [string], debug : bool, verbose : int, threadId : int, structNames : Tree<string, int>, fileinfo : FiFileInfo, combinedUnions : Tree<string, FiTypeUnion>);
FcMinusPrim();
FcModPrim();
FcModule(fileinfo : FcFileInfo, imports : [FcImport], forbids : [FcForbid], exports : Set<string>, structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, functions : Tree<string, FcFunctionDec>, globalVars : Tree<string, FcGlobalVar>, natives : Tree<string, FcNativeDec>, initOrder : [string], stringIncludes : [FiFileInfo], errors : [FcError], typevarid : int, isCached : bool, start : int, end : int, allImports : Set<string>);
FcMulPrim();
FcNativeDec(name : string, io : bool, type : FcType, nativeName : string, flowfallback : Maybe<FcFunctionDec>, info : FcInfo);
FcNePrim();
FcNegPrim();
FcNotFunction(t : FcType, info : FcInfo2);
FcNotPrim();
FcNotVoid(t : FcType, info : FcInfo2);
FcOrPrim();
FcParsed(fileinfo : FcFileInfo, syntaxtree : SyntaxTree, imports : [FcImport], forbids : [FcForbid], oldExports : Tree<string, FiExportSignature>);
FcPlusPrim();
FcPosition(file : string, start : int, end : int);
FcProtobufConfig(flowfile : string, outputfile : string, types : [string], verbose : int, threadId : int);
FcQuote();
FcRefPrim();
FcRequire(flowfile : string, e : FcExp, info : FcInfo);
FcRustConfig(flowfile : string, outputfile : string, includes : [string], debug : bool, verbose : int, threadId : int);
FcSeq(es : [FcExp], info : FcInfo);
FcSetMutableField(struct : FcType, field : string, ftype : FcType, info : FcInfo2);
FcSetMutablePrim(name : string);
FcSpeedyConfig(flowfile : string, outputfile : string, types : [string], verbose : int, threadId : int);
FcString(s : string, info : FcInfo);
FcStructArg(name : string, type : FcType, ismutable : bool);
FcStructPrim(struct_name : string);
FcSwitch(x : FcVar, switchType : FcType, cases : [FcCase], info : FcInfo);
FcTypeArray(t : FcType, info : FcInfo2);
FcTypeBool(info : FcInfo2);
FcTypeDouble(info : FcInfo2);
FcTypeEnv(global : FcTypeEnvGlobal, program : FcTypeEnvProgram, local : FcTypeEnvLocal);
FcTypeEnvGlobal(moduleCache : ConcurHashMap<string, Maybe<FcCacheModule>>, nameCache : ConcurHashMap<string, Maybe<FcCacheNamed>>, sourceCache : ConcurHashMap<string, FcCachedSource>);
FcTypeEnvLocal(expects : ref List<FcTypeExpect>, checks : ref List<FcTypeCheck>, tyvars : ref Tree<int, FcType>, typars : ref Tree<string, FcTypeVar>, varinfo : Tree<string, FcInfo>, debugExpects : ref Set<FcTypeExpect>, debugTyping : ref int, debugIndentation : ref string);
FcTypeEnvProgram(acc : FlowcAcc, types : Tree<string, FcType>, printError : (FcError) -> void, errors : ref int, union2typenamesCache : ConcurHashMap<string, [FcTypeName]>, subtypeGraph : GSubtypeGraph);
FcTypeFlow(info : FcInfo2);
FcTypeFunction(args : [FcFunArg], returnType : FcType, info : FcInfo2);
FcTypeFunction2(args : [FcFunArg2], returnType : Maybe<FcType>, info : FcInfo2);
FcTypeInt(info : FcInfo2);
FcTypeName(name : string, typeparameters : [FcType], info : FcInfo2);
FcTypeNative(info : FcInfo2);
FcTypeParameter(n : string, info : FcInfo2);
FcTypeRef(t : FcType, info : FcInfo2);
FcTypeString(info : FcInfo2);
FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : FcInfo2);
FcTypeUnion(name : string, typeparameters : [FcType], typenames : [FcTypeName], info : FcInfo2);
FcTypeVar(id : int, info : FcInfo2);
FcTypeVoid(info : FcInfo2);
FcUnquote();
FcUnsafe(name : string, fallback : FcExp, info : FcInfo);
FcVar(name : string, info : FcInfo);
FcVerifyType(type : FcType, declared : FcType, description : string, info : FcInfo2, e : FcExp);
FcVoid(info : FcInfo);
FiBcClosure(slot : int);
FiBcFunctionContext(toplevel : FiBcGlobalContext, name : string, shadowed : Set<string>, nargs : int, nlocals : int, all_locals : Tree<string, [int]>, free_vars : [string], upvals : Tree<string, int>);
FiBcGlobal(slot : int);
FiBcGlobalContext(file : string, program : FiProgram, structs : Tree<string, FiBcStruct>, globals : Tree<string, int>, cur_toplevel : string, next_closure_id : int, resolvers : Tree<string, LineResolver>);
FiBcLocal(slot : int);
FiBcScopeContext(func : FiBcFunctionContext, locals : Tree<string, int>);
FiBcStruct(id : int, struct : FiTypeStruct);
FiBcStructs(id : int, bytecode : [BytecodeAsString], structs : Tree<string, FiBcStruct>);
FiBool(b : bool, start : int);
FiCall(f : FiExp, args : [FiExp], type : FiType, start : int);
FiCallPrim(op : FcPrim, es : [FiExp], type : FiType, start : int);
FiCase(struct : string, argNames : [string], body : FiExp, start : int);
FiCast(e : FiExp, tFrom : FiType, tTo : FiType, type : FiType, start : int);
FiCpp3Config(outputfile : string, outputdir : string, backendDirs : [string], qtOpts : [string], debug : bool, config : CompilerConfig, verbose : int, threadId : int);
FiDConfig(flowfile : string, outputfile : string, includes : [string], debug : bool, verbose : int, threadId : int, fileinfo : FiFileInfo, initVars : string);
FiDocConfig(flowfile : string, outputfolder : string, verbose : int, threadId : int);
FiDouble(d : double, start : int);
FiExportNative(io : bool, type : FiType, nativeName : string);
FiFileInfo(flowfile : string, trampstamp : double, fullpath : string, md5sum : string, filesize : double, lastupdate : double);
FiForbid(flowfile : string, start : int);
FiFunArg(name : string, type : FiType);
FiFunctionDec(name : string, lambda : FiLambda, type : FiTypeFunction, declStart : int, defiStart : int);
FiGlobalNames(struct2module : Tree<string, string>, union2module : Tree<string, string>, function2module : Tree<string, string>, globalVar2module : Tree<string, string>, native2module : Tree<string, string>, structs : Tree<string, FiTypeStruct>, unions : Tree<string, FiTypeUnion>, toplevel : Tree<string, FiDeclaration>);
FiGlobalVar(name : string, value : FiExp, type : FiType, declStart : int, defiStart : int);
FiHTMLConfig(flowfile : string, outputfile : string, includes : [string], jsfile : string, verbose : int, threadId : int, debug : bool, title : string, splash : string, minify : bool, scripts : [string], additionalScripts : [string], predefinedParams : [Pair<string, string>], workingDir : string, manifestFileName : string, noTranslate : bool);
FiIf(e1 : FiExp, e2 : FiExp, e3 : FiExp, type : FiType, start : int);
FiImport(flowfile : string, dynamic : bool, start : int);
FiInt(i : int, start : int);
FiJavaConfig(flowfile : string, outputdir : string, generatedir : string, packageName : string, mainClassName : string, jarfile : string, javaLibrary : Set<string>, includes : [string], debug : bool, verbose : int, threadId : int, dependencies : [string], externNatives : [string], builder : string, builderXmX : string, hostSubstitutions : Tree<string, string>, options : Tree<string, string>);
FiJsConfig(flowfile : string, outputfile : string, includes : [string], jsmode : int, webmodule : bool, jslibrary : Set<string>, jslibraryObject : string, modules : string, comments : bool, code : bool, beautify : bool, sourcemap : bool, compress : bool, haxeRuntime : bool, fontconfig : string, debug : bool, verbose : int, threadId : int, readable : bool, tsProcess : TypeScriptProcessing, callMain : bool, keepDebugNewlines : bool, externLib : string, externNatives : Set<string>, dependencies : [FiJsDependency]);
FiJsDependency(provider : string, host : string, package : string);
FiLambda(args : [FiFunArg], body : FiExp, type : FiTypeFunction, start : int);
FiLet(name : string, type : FiType, e1 : FiExp, e2 : FiExp, type2 : FiType, start : int);
FiModule(fileinfo : FiFileInfo, imports : [FiImport], forbids : [FiForbid], exports : [string], structs : [FiTypeStruct], unions : [FiTypeUnion], functions : [FiFunctionDec], globalVars : [FiGlobalVar], natives : [FiNativeDec], initOrder : [string], stringIncludes : [FiFileInfo], start : int, end : int, allImports : Set<string>, incremental : bool);
FiNativeDec(name : string, io : bool, type : FiType, nativeName : string, fallbackLambda : FiExp, declStart : int, defiStart : int);
FiNimConfig(flowfile : string, outputfile : string, includes : [string], backendDirs : [string], debug : bool, verbose : int, threadId : int, options : Tree<string, string>);
FiProgram(config : CompilerConfig, modules : Tree<string, FiModule>, traversal : [string], names : FiGlobalNames);
FiRequire(flowfile : string, e : FiExp, type : FiType, start : int);
FiSeq(es : [FiExp], type : FiType, start : int);
FiString(s : string, start : int);
FiStructArg(name : string, type : FiType, ismutable : bool);
FiSwitch(x : FiVar, switchType : FiType, cases : [FiCase], type : FiType, start : int);
FiTsdConfig(flowfile : string, jslibrary : Set<string>, jslibraryObject : string, outputfolder : string, verbose : int, threadId : int);
FiTypeArray(t : FiType);
FiTypeBool();
FiTypeDouble();
FiTypeFlow();
FiTypeFunction(args : [FiFunArg], returnType : FiType);
FiTypeInt();
FiTypeName(name : string, typeparameters : [FiType]);
FiTypeNative();
FiTypeParameter(n : string);
FiTypeRef(t : FiType);
FiTypeString();
FiTypeStruct(name : string, typars : [FiType], args : [FiStructArg], start : int);
FiTypeUnion(name : string, typeparameters : [FiType], typenames : [FiTypeName], start : int);
FiTypeVoid();
FiUnsafe(name : string, fallback : FiExp, type : FiType, start : int);
FiVar(name : string, type : FiType, start : int);
FiVoid(start : int);
FiWasmConfig(flowfile : string, outputfile : string, includes : [string], verbose : int, threadId : int, hostfile : string, nodejs : bool, listingFile : string, wasmast : string, memory : int, doinline : bool);
FiWiseConfig(flowfile : string, outputfolder : string, includes : [string], verbose : int, threadId : int);
FlowcAcc(dependency : DependencyTracker<string>, preloaded : Tree<string, FcPreloadedModule>, modules : Tree<string, FiModule>, file2flowfile : Tree<string, string>, traversal : [string], names : FcGlobalNames, config : CompilerConfig, tyvarIdFactory : IdFactory, tyvarIdGroup : IdGroup, tracer : Tracer);
GEdge(from : int, to : int, data : ?, weight : int);
GNode(id : int, data : ?);
GSubtypeGraph(supertypes : SimpleGraph<string, bool>, fieldSupertypes : SimpleGraph<string, bool>, subtypes : SimpleGraph<string, bool>);
IdFactory(id : ref int, bucketsize : int);
IdGroup(id : ref int, lastid : ref int, factory : IdFactory);
JSCliParams(jsfile : string, esfile : string, typescriptFile : string, debug : bool, code : bool, modules : string, comments : bool, node : bool, webmodule : bool, isES6 : bool, isTypeScript : bool, tsProcess : TypeScriptProcessing, readable : bool, beautify : bool, sourcemap : bool, verbose : int, nwjs : bool, fontconfig : string, dcePreservedNames : Set<string>, dceRemoveMain : bool, jslibraryObject : string, callMain : bool);
LineResolver(input : string, linestarts : [int]);
None();
Pair(first : ?, second : ??);
ParsingAcc(data : ?, start : int, finish : int, processed : int);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
Set(tree : Tree<?, bool>);
SimpleGraph(nodes : Tree<?, int>, nnodes : int, graph : EasyGraph<?, ??>);
Some(value : ?);
SyntaxTree(rule : int, choice : int, start : int, end : int, children : [[SyntaxTree]]);
SyntaxTreeB(rule : int, choice : int, start : Pair<int, int>, end : Pair<int, int>, children : [[SyntaxTreeB]]);
TCArray();
TCBool();
TCDouble();
TCFlow();
TCInt();
TCRefTo();
TCSetMutable(arg : BytecodeTypeCode);
TCString();
TCStruct();
TCTypedArray(arg : BytecodeTypeCode);
TCTypedRefTo(arg : BytecodeTypeCode);
TCTypedStruct(arg : string);
TCVoid();
TraceEntry(name : string, category : string, phase : string, tid : int, time : double);
Tracer(startTime : double, lines : List<TraceEntry>);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
Triple(first : ?, second : ??, third : ???);
TypeScriptProcessing(typeBuffer : string, voidReturn : bool, antiTS : bool);

arrayPush(a0:[?], a1:?) -> [?]{[]};
concat(a0:[?], a1:[?]) -> [?]{[]};
fail(a0:string) -> void{{}};
native fail0 : (a0:string) -> ? = Native.fail0;
fiBcDebugAddFunction(a0:FcBytecodeConfig, a1:int, a2:string) -> void{{}};
fiBcDebugAddPosition(a0:FcBytecodeConfig, a1:int, a2:int, a3:bool, a4:BcDebugKind) -> void{{}};
fiBcMakeFunctionContext(a0:FcBytecodeConfig, a1:FiBcGlobalContext, a2:Set<string>, a3:[FiFunArg], a4:int) -> FiBcScopeContext{FiBcScopeContext(FiBcFunctionContext(FiBcGlobalContext("", FiProgram(CompilerConfig("", [], [], 0, JSCliParams("", "", "", false, false, "", false, false, false, false, false, TypeScriptProcessing("", false, false), false, false, false, 0, false, "", Set(TreeEmpty()), false, "", false), TreeEmpty(), 0), TreeEmpty(), [], FiGlobalNames(TreeEmpty(), TreeEmpty(), TreeEmpty(), TreeEmpty(), TreeEmpty(), TreeEmpty(), TreeEmpty(), TreeEmpty())), TreeEmpty(), TreeEmpty(), "", 0, TreeEmpty()), "", Set(TreeEmpty()), 0, 0, TreeEmpty(), [], TreeEmpty()), TreeEmpty())};
fiBcPushLocal(a0:FiBcScopeContext, a1:string) -> Pair<FiBcScopeContext, int>{Pair(a0, 0)};
fiBcResolveName(a0:FiBcScopeContext, a1:string) -> FiBcNameResolution{FiBcGlobal(0)};
fiBcWrapFunctionBody(a0:FcBytecodeConfig, a1:FiBcFunctionContext, a2:BytecodeAsString, a3:int, a4:string, a5:int) -> BytecodeAsString{BytecodeAsString("")};
fiBytecodeLength(a0:BytecodeAsString) -> int{0};
fiCalcFunctionPreludeLength(a0:FiBcFunctionContext) -> Pair<int, int>{Pair(0, 0)};
fiFieldNumber(a0:FiTypeStruct, a1:string) -> int{0};
fiMakeBytecode(a0:[BytecodeOrChunks]) -> BytecodeAsString{BytecodeAsString("")};
fiMakeLineBytecode(a0:string, a1:FcBytecodeConfig, a2:FiBcScopeContext, a3:int, a4:[BytecodeOrChunks], a5:int) -> BytecodeAsString{BytecodeAsString("")};
fiPushToChunks(a0:[BytecodeOrChunks], a1:Bytecode) -> [BytecodeOrChunks]{[]};
fiSizeofCBool = 0 ; //int{0};
fiSizeofCClosurePointer = 0 ; //int{0};
fiSizeofCCodePointer = 0 ; //int{0};
fiSizeofCGoto = 0 ; //int{0};
fiSizeofCIfFalse = 0 ; //int{0};
fiSizeofCNot = 0 ; //int{0};
fiSizeofCPop = 0 ; //int{0};
fiUnion2structs(a0:FiProgram, a1:FiTypeUnion) -> [FiTypeStruct]{[]};
fiUnionFieldNumber(a0:[FiTypeStruct], a1:int, a2:int, a3:string) -> int{0};
filter(a0:[?], a1:(?) -> bool) -> [?]{[]};
fold(a0:[?], a1:??, a2:(??, ?) -> ??) -> ??{a1};
foldTree(a0:Tree<?, ??>, a1:???, a2:(?, ??, ???) -> ???) -> ???{a1};
insertSet(a0:Set<?>, a1:?) -> Set<?>{Set(TreeEmpty())};
length(a0:[?]) -> int{0};
lookupTree(a0:Tree<?, ??>, a1:?) -> Maybe<??>{None()};
map(a0:[?], a1:(?) -> ??) -> [??]{[]};
mapi(a0:[?], a1:(int, ?) -> ??) -> [??]{[]};
resolveFiTypeName(a0:FiGlobalNames, a1:FiType, a2:int) -> FiStructOrUnion{FiTypeStruct("", [], [], 0)};
reverseA(a0:[?]) -> [?]{[]};
sort(a0:[?]) -> [?]{[]};
strlen(a0:string) -> int{0};
tail(a0:[?]) -> [?]{[]};
toString(a0:?) -> string{""};
fiBcEncode(cfg : FcBytecodeConfig, ctx : FiBcScopeContext, expr : FiExp, tailcall : bool, pc : int) -> BytecodeAsString {
	savedPc = pc;
	if (cfg.debug) {
		fiBcDebugAddPosition(cfg, pc, expr.start, false, DebugPosExpr() /*"Add Position in Encode " + substring(toString(expr), 0, 40)*/);
	}
	switch (expr : FiExp) {
		FiString(s, start): {
			fiMakeLineBytecode("FiString", cfg, ctx, start, [
				if (strlen(s) < 40)
					CWString(s)
				else
					CString(s)
			], pc);
		}

		FiBool(b, i): {
			fiMakeLineBytecode("FiBool", cfg, ctx, i, [CBool(b)], pc);
		}
		FiDouble(d, i):{
			fiMakeLineBytecode("FiDouble", cfg, ctx, i, [CDouble(d)], pc);
		}
		FiVoid(i): {
			fiMakeLineBytecode("FiVoid", cfg, ctx, i, [CVoid()], pc);
		}
		FiInt(i, inf): {
			fiMakeLineBytecode("FiInt", cfg, ctx, inf, [CInt(i)], pc);
		}
		FiVar(x, __, i): {
			// TODO: check correctness of conversion
			tmp =
				switch (fiBcResolveName(ctx, x) : FiBcNameResolution) {
					FiBcStruct(id, struct): {
						if (length(struct.args) > 0)
							fail0("complex struct reference without args")
						else
							CStruct(id);
					}
					FiBcGlobal(slot):  CGetGlobal(slot);
					FiBcLocal(slot):   CGetLocal(slot);
					FiBcClosure(slot): CGetFreeVar(slot);
				}
			fiMakeLineBytecode("FiVar", cfg, ctx, i, [tmp], pc);
		}

		FiLambda(xs, e0, type, i): {
			shadowed = foldTree(ctx.locals, ctx.func.shadowed, \n,id,s -> insertSet(s, n));
			subctx = fiBcMakeFunctionContext(cfg, ctx.func.toplevel, shadowed, xs, pc);

			p = if (cfg.debug) {
					cfg0 = FcBytecodeConfig(cfg with debug = false);

					ctx0 = fiBcMakeFunctionContext(cfg0, ctx.func.toplevel, shadowed, xs, pc);

					code0 = fiBcEncode(cfg0, ctx0, e0, true, pc);
					fiCalcFunctionPreludeLength(ctx0.func);
				} else {
					Pair(0, 0);
				}


			fiBcDebugAddFunction(cfg, pc + p.first, subctx.func.name);

			code = fiBcEncode(cfg, subctx, e0, false, pc + p.first + p.second);

			pc2 : ref int = ref pc;
			fvars = map(subctx.func.free_vars, \n -> {
				vx = FiVar(n, FiTypeFlow(), i);
				r = fiBcEncode(cfg, ctx, vx, false, ^pc2);
				pc2 := ^pc2 + fiBytecodeLength(r);
				r;
			});


			fb = fiBcWrapFunctionBody(cfg, subctx.func, code, i, ctx.func.name, ^pc2 + fiSizeofCGoto);

			ap = arrayPush(fvars, fb);
			r = fiMakeLineBytecode("FiLambdaX", cfg, ctx, i, ap, pc);
			fiBcDebugAddFunction(cfg,
				^pc2 + fiBytecodeLength(fiMakeBytecode([fb])) - (if (length(subctx.func.free_vars) > 0) fiSizeofCClosurePointer else fiSizeofCCodePointer),
				ctx.func.name/* + " pc2 = 0x" + formatHex(^pc2) + " pc = 0x" + formatHex(pc)*/);

			r;
		}
		FiCall(f, es, type, i): {
			pc1 : ref int = ref pc;
			args = map(es, \arg -> {
				r = fiBcEncode(cfg, ctx, arg, false, ^pc1);
				pc1 := ^pc1 + fiBytecodeLength(r);
				r;
			});
			bcstruct : Maybe<FiBcStruct> = switch (f : FiExp) {
				FiVar(x, vtype, i2): {
					resv = fiBcResolveName(ctx, x);
					switch (resv : FiBcNameResolution) {
						FiBcStruct(__, __): Some(resv);
						default: None();
					}
				}
				default: None()
			};
			call = switch (bcstruct : Maybe<FiBcStruct>) {
				Some(sinfo): {
					if (length(sinfo.struct.args) != length(es))
						fail("wrong argument count for " + sinfo.struct.name);
					[fiMakeBytecode([CStruct(sinfo.id)])]
				}
				None(): {
					fiBcDebugAddPosition(cfg, pc, i, false, DebugPosCall());
					[
						fiBcEncode(cfg, ctx, f, false, ^pc1),
						fiMakeLineBytecode("FiCall7", cfg, ctx, i, [
							if (tailcall && length(ctx.func.free_vars) == 0)
								CTailCall(length(args))
							else
								if (cfg.nargs) CCallN(length(args)) else CCall()
						], pc)
					]
				}
			}

			fiMakeLineBytecode("FiCall", cfg, ctx, i, concat(args, call), pc);
		}
		FiLet(x, t, e1, e2, t2, i): {
			e1code = fiBcEncode(cfg, ctx, e1, false, pc);
			local = fiBcPushLocal(ctx, x);
			e2code = fiBcEncode(cfg, local.first, e2, tailcall, pc + fiBytecodeLength(e1code) + fiBytecodeLength(fiMakeBytecode([CSetLocal(0)])));

			fiMakeLineBytecode("FiLet", cfg, ctx, i, [
				e1code,
				CSetLocal(local.second),
				e2code
			], pc);
		}
		FiIf(e1, e2, e3, type, i): {
			condcode = fiBcEncode(cfg, ctx, e1, false, pc);
			pccond = pc + fiBytecodeLength(condcode) + fiBytecodeLength(fiMakeBytecode([CIfFalse(0)]));

			trueNode : BytecodeAsString = fiBcEncode(cfg, ctx,e2, tailcall, pccond);

			pcTrueNode = pccond + fiBytecodeLength(trueNode)+ fiSizeofCGoto; // ifFalseNode appends CGoto

			elsecode : BytecodeAsString = fiBcEncode(cfg, ctx,e3, tailcall, pcTrueNode);

			fiMakeLineBytecode("FiIf", cfg, ctx, i, [
				condcode,
				CIfFalse( fiBytecodeLength(trueNode) + fiSizeofCGoto ),
				trueNode,
				CGoto( fiBytecodeLength(elsecode) ),
				elsecode
			], pc);
		}
		FiSwitch(e0, switchType, cs, type, i): {

			arg = fiBcEncode(cfg, ctx, e0, false, pc);

			// sort cases by id
			structs = ctx.func.toplevel.structs;
			allCases : [Pair<int, FiCase>] = sort(map(cs, \ccase -> {
				if (ccase.struct == "default")
					Pair(-100, ccase)
				else
					switch (lookupTree(structs, ccase.struct) : Maybe<FiBcStruct>) {
						Some(sinfo):
							Pair(sinfo.id, ccase);
						default:
							fail0("unknown struct in switch: " + ccase.struct);
					}
			}));
			casesStub = map(filter(allCases, \e -> e.first >= 0), \__ -> Pair(0, 0));
			switchHeaderStub : [BytecodeOrChunks] = concat([CSimpleSwitch(0, casesStub)], if (length(allCases) > 0 && allCases[0].first == -100) [] else [CUncaughtSwitch()]);

			// We do not want result, just increase pc in fiMakeLineBytecode.
			fiMakeLineBytecode("FiSwitch skip\n" + toString(switchHeaderStub), cfg, ctx, i, switchHeaderStub, pc);

			// generate code
			pc1 : ref int = ref (pc + fiBytecodeLength(arg) + fiBytecodeLength(fiMakeBytecode(switchHeaderStub)));

			casecode : [Pair<int, BytecodeAsString>] = mapi(allCases, \ix, ccase -> {
				r = Pair(ccase.first, fiBcEncode(cfg, ctx, ccase.second.body, tailcall, ^pc1));
				pc1 := ^pc1 + fiBytecodeLength(r.second);
				if (cfg.debug) {
					if (ix != length(allCases) - 1) {
						pc1 := ^pc1 + fiSizeofCGoto;
					}
				}
				r;
			});
			casecode2 : [Pair<int,BytecodeAsString>] = fold(
				reverseA(casecode), Pair([], 0),
				\prev, ccase -> {

					newcode = if (prev.second == 0) {
							ccase.second
						} else {
							fiMakeLineBytecode("FiSwitch case2", cfg, ctx, i, [ ccase.second, CGoto(prev.second) ]/*, []*/, pc);
						}

					Pair(
						concat([Pair(ccase.first, newcode)], prev.first),
						prev.second + fiBytecodeLength(newcode)
					);
				}
			).first;
			// find or create the default case
			casecode3 = if (length(casecode2) > 0 && casecode2[0].first == -100) {
					Pair(casecode2[0].second, tail(casecode2))
				} else {
					Pair(fiMakeBytecode([ CUncaughtSwitch() ]/*, []*/), casecode2);
				}
			// generate switch
			caselist = fold(
				casecode3.second,
				Pair([], fiBytecodeLength(casecode3.first)),
				\prev, ccase -> {
					Pair(
						arrayPush(prev.first, Pair(ccase.first, prev.second)),
						prev.second + fiBytecodeLength(ccase.second)
					)
				}
			);
			fiMakeLineBytecode("FiSwitch end", cfg,
				ctx, i,
				concat(
					[
						arg,
						CSimpleSwitch(caselist.second, caselist.first),
						casecode3.first
					],
					map(casecode3.second, \x -> x.second)
				), pc
			);
		}
		FiCast(e0, tFrom, tTo, type, i): {
			arg = fiBcEncode(cfg, ctx, e0, false, pc);
			rarg = [arg];
			code = switch(tFrom : FiType) {
				FiTypeInt(): {
					switch(tTo : FiType) {
						FiTypeString(): [arg, CInt2String()];
						FiTypeInt(): rarg;
						FiTypeDouble(): [arg, CInt2Double()];
						default: rarg;
					}
				}
				FiTypeDouble(): {
					switch(tTo : FiType) {
						FiTypeString(): [arg, CDouble2String()];
						FiTypeInt(): [arg, CDouble2Int()];
						FiTypeDouble(): rarg;
						default: rarg;
					}
				}
				default: rarg;
			}
			fiMakeLineBytecode("FiCast", cfg, ctx, i, code, pc);
		}
		FiSeq(es, type, i): {
			l = length(es)-1;
			pc1 : ref int = ref pc;
			code = if (l >= 0)
				mapi(es, \idx, e -> {
					r = if (idx < l)
						fiMakeBytecode([fiBcEncode(cfg, ctx, e, false, ^pc1), CPop()]/*, []*/)
					else
						fiBcEncode(cfg, ctx, e, tailcall, ^pc1);
					pc1 := ^pc1 + fiBytecodeLength(r);
					r;
				})
			else
				[fiMakeBytecode([ CVoid() ])];
			fiMakeLineBytecode("FiSeq", cfg, ctx, i, code, pc);
		}
		FiCallPrim(op, es, type, i): {
			pc1 : ref int = ref pc;

			args : [BytecodeAsString] = switch(op : FcPrim) {
				FcAndPrim(): [];
				FcOrPrim(): [];
				default: {
					map(es, \arg -> {
						r = fiBcEncode(cfg, ctx, arg, false, ^pc1);
						pc1 := ^pc1 + fiBytecodeLength(r);
						r;
					});
				}
			}

			intPrim = \itype : FiType, bcint : Bytecode, bc : Bytecode -> {
				switch(itype) {
					FiTypeInt(): bcint;
					default: bc;
				}
			}
			code = switch (op : FcPrim) {
				FcOrPrim(): {
					arg0 = fiBcEncode(cfg, ctx, es[0], false, pc + fiSizeofCBool);
					arg1 = fiBcEncode(cfg, ctx, es[1], false,
						pc +
						fiSizeofCBool +
						fiBytecodeLength(arg0) +
						fiSizeofCNot +
						fiSizeofCIfFalse +
						fiSizeofCPop);
					orcode : [BytecodeOrChunks] = [
						CBool(true),
						arg0,
						CNot(),
						CIfFalse( fiBytecodeLength(arg1) + fiSizeofCPop ),
						CPop(),
						arg1
					];
					orcode
				}
				FcAndPrim(): {
					arg0 = fiBcEncode(cfg, ctx, es[0], false, pc + fiSizeofCBool);
					arg1 = fiBcEncode(cfg, ctx, es[1], false,
						pc +
						fiSizeofCBool +
						fiBytecodeLength(arg0) +
						fiSizeofCIfFalse +
						fiSizeofCPop);
					andcode : [BytecodeOrChunks] = [
						CBool(false),
						arg0,
						CIfFalse( fiBytecodeLength(arg1) + fiSizeofCPop ),
						CPop(),
						arg1
					];
					andcode
				}
				FcNotPrim(): [ args[0], CNot() ];
				FcEqPrim():  [ args[0], args[1], CEqual() ];
				FcNePrim():  [ args[0], args[1], CEqual(), CNot() ];
				FcLePrim():  [ args[0], args[1], CLessEqual() ];
				FcGePrim():  [ args[0], args[1], CLessThan(), CNot() ];
				FcLtPrim():  [ args[0], args[1], CLessThan() ];
				FcGtPrim():  [ args[0], args[1], CLessEqual(), CNot() ];
				FcPlusPrim(): {
					opcode = switch(type) {
						FiTypeInt(): CPlusInt();
						FiTypeString(): CPlusString();
						default: CPlus();
					};

					[ args[0], args[1], opcode ];
				}
				FcMinusPrim(): {
					opcode = intPrim(type, CMinusInt(), CMinus());
					[ args[0], args[1], opcode ];
				}
				FcMulPrim(): {
					opcode = intPrim(type, CMultiplyInt(), CMultiply());
					[ args[0], args[1], opcode ];
				}
				FcDivPrim(): {
					opcode = intPrim(type, CDivideInt(), CDivide());
					[ args[0], args[1], opcode ];
				}
				FcModPrim(): {
					opcode = intPrim(type, CModuloInt(), CModulo());
					[ args[0], args[1], opcode ];
				}
				FcNegPrim(): {
					opcode = intPrim(type, CNegateInt(), CNegate());
					[ args[0], opcode ];
				}
				FcArrayPrim():  fiPushToChunks(args, CArray(length(args)));
				FcIndexPrim():  [ args[0], args[1], CArrayGet() ];
				FcDerefPrim():  [ args[0], CDeref() ];
				FcAssignPrim(): [ args[0], args[1], CSetRef() ];
				FcRefPrim():    [ args[0], CRefTo() ];
				FcStructPrim(structname):

					switch (lookupTree(ctx.func.toplevel.structs, structname) : Maybe<FiBcStruct>) {
						Some(struct):
							if (length(struct.struct.args) != length(args))
								fail0("struct arg count mismatch for " + structname)
							else
								fiPushToChunks(args, CStruct(struct.id));
						None():
							fail0("unknown struct " + structname);
					}
				FcFieldPrim(name): {
					fieldNamed = CFieldName(name);
					ftmp = switch(es[0]) {
							FiVar(__, vtype, info) : {
								fieldtype = resolveFiTypeName(ctx.func.toplevel.program.names, vtype, cfg.threadId);
								switch (fieldtype) {
									FiTypeStruct(__, __, _args, __) : {
										idx = fiFieldNumber(fieldtype, name);
										if (idx == -1)
											fieldNamed
										else {
											CField(idx);
										}
									}
									FiTypeUnion(tn, __, tns, __): {
										structs = fiUnion2structs(ctx.func.toplevel.program, fieldtype);
										// OK, maybe we can be smarter
										fieldindex = fiUnionFieldNumber(structs, 0, -2, name);
										if (fieldindex != -1) {
											// All have the same index.
											CField(fieldindex);
										} else {
											fieldNamed;
										}

									}
								}
							}
							default : fieldNamed;
						};
					[args[0], ftmp];
				}
				FcSetMutablePrim(name):
					// TODO: Exploit types to use fixed index
					[ args[0], args[1], CSetMutableName(name) ];
				FcCreateClosurePrim(sName, fName): []; // Should not happen - bytecode does not use lambda lifting
                FcQuote(): fail0("todo");
                FcUnquote(): fail0("todo");
			};
			fiMakeLineBytecode("FiCallPrim end", cfg, ctx, i, code, pc);
		}
		FiRequire(flowfile, e2, type, info): fail0("todo");
		FiUnsafe(name, fallback, type, info): fail0("todo");
	}
}

// What field index is this field in this struct? -1 if it does not exist
