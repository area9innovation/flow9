// Unions
Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;
DNode<?> ::= DEnd, DLink<?>;
List<?> ::= EmptyList, Cons<?>;
Maybe<?> ::= None, Some<?>;
SecurityMode ::= OWASP, VerboseOutput;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
TreePopResult<?, ??> ::= PopResult<?, ??>, EmptyPopResult;

// Structs
Cons(head : ?, tail : List<?>);
ConstBehaviour(constv : ?);
DEnd();
DLink(v : ?, before : DNode<?>, after : DNode<?>, attached : bool);
DList(first : DNode<?>, last : DNode<?>);
DebuggedSubscriber(behValue : flow, fn : (flow) -> void, category : flow, instance : flow, callstack : native);
Disposable(value : ?, dispose : () -> void);
DynamicBehaviour(value : ref ?, subscribers : DList<(?) -> void>);
EmptyList();
EmptyPopResult();
IllegalStruct();
KeyValue(key : string, value : string);
None();
OWASP(level : int);
Pair(first : ?, second : ??);
PopResult(k : ?, v : ??, rest : Tree<?, ??>);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
Some(value : ?);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
Triple(first : ?, second : ??, third : ???);
Tuple2(v1 : ?, v2 : ??);
Tuple3(v1 : ?, v2 : ??, v3 : ???);
Tuple4(v1 : ?, v2 : ??, v3 : ???, v4 : ????);
Tuple5(v1 : ?, v2 : ??, v3 : ???, v4 : ????, v5 : ?????);
Tuple6(v1 : ?, v2 : ??, v3 : ???, v4 : ????, v5 : ?????, v6 : ??????);
Tuple7(v1 : ?, v2 : ??, v3 : ???, v4 : ????, v5 : ?????, v6 : ??????, v7 : ???????);
Tuple8(v1 : ?, v2 : ??, v3 : ???, v4 : ????, v5 : ?????, v6 : ??????, v7 : ???????, v8 : ????????);
Tuple9(v1 : ?, v2 : ??, v3 : ???, v4 : ????, v5 : ?????, v6 : ??????, v7 : ???????, v8 : ????????, v9 : ?????????);
VerboseOutput(fn : () -> bool);
WidthHeight(width : double, height : double);

isSameStructType(a0:?, a1:??) -> bool {false};
toString(a0:?) -> string {""};
behaviourValueToString(v : flow) -> string {
	if (isSameStructType((v), (v))) (v).structname else toString(v)
}

