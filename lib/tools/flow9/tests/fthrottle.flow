import maybe;

Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

// The runtime representation of a behaviour
DynamicBehaviour(value : ref ?);
ConstBehaviour : (constv : ?);

make(value : ?) -> DynamicBehaviour<?> {
	DynamicBehaviour(ref value);
}

// Do not construct FSelect and friends directly - use the functions above instead.
Transform<?> ::= Behaviour<?>, FConstructable<?>;

FConstructable(b : Transform<?>);

FLift(fn : (?) -> ??);

fthrottle(v : Transform<?>, value : ?) -> void {
	switch (v) {
		ConstBehaviour(__): {};
		default: {
			newV = make(value);
			pendingV = ref None();

			fsubselect(v, FLift(\v0 -> {
				maybeApply(
					^pendingV,
					\pv -> {
						pendingV := Some(v0);
					}
				);
				newV
			}));
		}
	}
}

fsubselect(b : Transform<??>, fn : FLift<??, Transform<?>>) -> void {
}
