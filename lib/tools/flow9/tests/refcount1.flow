import tools/flow9/bexp/bexp;
import ds/tuples;
import runtime;

// The original source had Maybe<BCounter> here, which is indeed wrong, since addDrops returns BExp.
reduceBCounter(counter : BExp, isDownDrop : bool) -> Pair<BExp, Maybe<BExp>> {
	if (true) {
		unquadruple(extractBExpFromBCounter(counter, 0, 0, false), \exp, dupCnt, dropCnt, reuse -> {
			cnt = min(dupCnt, dropCnt);
			reducedDupCnt = dupCnt - cnt;
			reducedDropCnt = dropCnt - cnt;

			newValue = fold(enumFromTo(1, reducedDupCnt), exp, \newExp, __ -> addBCounterToExp(newExp, \e -> BDupValue(e)));
			addDrops = \num, value -> {
				fold(enumFromTo(1, num), value, \newExp, __ -> addBCounterToExp(newExp, \e -> if (reuse) BReuseValue(e) else BDropValue(e)));
			}
			// we can only move drop() for variables
			if (isDownDrop && extractBVarId(exp) != "") {
				Pair(newValue, if (reducedDropCnt > 0) Some(addDrops(reducedDropCnt - 1, BDropValue(newValue))) else None())
			} else {
				Pair(addDrops(reducedDropCnt, newValue), None());
			}
		});
	} else Pair(counter, None());
}

extractBExpFromBCounter(exp : BExp, dupCnt : int, dropCnt : int, reuse : bool) -> Quadruple<BExp, int, int, bool> {
	Quadruple(exp, dupCnt, dropCnt, reuse);
}

addBCounterToExp(exp : BExp, addCounter : (BExp) -> BCounter) -> BExp {
	exp;
}

extractBVarId(exp : BExp) -> string {
	"";
}