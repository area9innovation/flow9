// Unions
DiGraphStyle<?> ::= DotGraphLabel, DotCluster, DotSubgraph<?>;
GEdgeStyle ::= DotLabel, DotColor, DotWidth, DotBidirectional;
GNodeStyle ::= DotLabel, DotColor, DotFillColor, DotShape, DotStyle;
Maybe<?> ::= None, Some<?>;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
DiGraph(root : GNode<?>, badnode : GNode<?>, badedge : GEdge<??>, nodes : Tree<int, GNode<?>>, outedges : Tree<int, [GEdge<??>]>, nodesNumber : int, edgesNumber : int, nextNodeId : int, inDegree : Tree<int, int>);
DotBidirectional();
DotCluster(nodeIds : Set<int>);
DotColor(color : string);
DotFillColor(color : string);
DotGraphLabel(label : string);
DotLabel(label : string);
DotShape(shape : string);
DotStyle(style : string);
DotSubgraph(edges : [GEdge<?>]);
DotWidth(width : string);
GEdge(from : int, to : int, data : ?, weight : int);
GNode(id : int, data : ?);
None();
Set(tree : Tree<?, bool>);
Some(value : ?);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);

extract(a0:[?], a1:??, a2:(?) -> Maybe<??>) -> ?? {a1};
getGEdges(a0:DiGraph<?, ??>) -> [GEdge<??>] {[]};
diGraph2dot(graph : DiGraph<?, ??>, graphstyles : [DiGraphStyle<??>]) -> void {
	// filter out edges that belongs to the subgraph if specified, otherwise use all edges
	edges =
		extract(graphstyles, getGEdges(graph), \style : DiGraphStyle<??> -> {
			switch(style) {
				DotSubgraph(edges) : {
					edges |> Some;
				}
				default: None();
			};
		});

}
