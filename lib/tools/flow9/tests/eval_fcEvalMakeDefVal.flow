// Unions
FcArgType ::= FcStructArg, FcFunArg;
FcBaseType ::= FcTypeVoid, FcTypeBool, FcTypeInt, FcTypeDouble, FcTypeString, FcTypeNative;
FcConst ::= FcVoid, FcDouble, FcInt, FcString, FcBool;
FcExp ::= FcLambda, FcCall, FcVar, FcLet, FcIf, FcSwitch, FcCast, FcSeq, FcCallPrim, FcConst, FcRequire, FcUnsafe;
FcPrim ::= FcOrPrim, FcAndPrim, FcNotPrim, FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim, FcArrayPrim, FcIndexPrim, FcDerefPrim, FcAssignPrim, FcRefPrim, FcStructPrim, FcFieldPrim, FcSetMutablePrim, FcCreateClosurePrim, FcQuote, FcUnquote;
FcType ::= FcBaseType, FcTypeArray, FcTypeFunction, FcTypeRef, FcTypeParameter, FcTypeFlow, FcTypeName, FcTypeStruct, FcTypeUnion, FcTypeVar;
FiConst ::= FiVoid, FiDouble, FiInt, FiString, FiBool;
FiExp ::= FiLambda, FiCall, FiVar, FiLet, FiIf, FiSwitch, FiCast, FiSeq, FiCallPrim, FiConst, FiRequire, FiUnsafe;
FiType ::= FiTypeArray, FiTypeFunction, FiTypeRef, FiTypeParameter, FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeFlow, FiTypeVoid, FiTypeNative, FiTypeName;
GSubType ::= GNamed, GField;
GType ::= GBasicType, GFlow, GTypePar, GFunction, GArray, GRef, GTypeVar, GSubType;
Maybe<?> ::= None, Some<?>;

// Structs
FcAndPrim();
FcArrayPrim();
FcAssignPrim();
FcBool(b : bool, info : FcInfo);
FcCall(f : FcExp, args : [FcExp], info : FcInfo);
FcCallPrim(op : FcPrim, es : [FcExp], info : FcInfo);
FcCase(struct : string, argNames : [string], body : FcExp, info : FcInfo);
FcCast(e : FcExp, tFrom : FcType, tTo : FcType, info : FcInfo);
FcCheckMutable(field : string, type : FcType, info : FcInfo2);
FcCreateClosurePrim(structName : string, functionName : string);
FcDerefPrim();
FcDivPrim();
FcDouble(d : double, info : FcInfo);
FcEqPrim();
FcEvalGlobal(value : flow, type : FiType);
FcExpectOneOf(types : [FcBaseType], type : FcType, info : FcInfo2);
FcFieldPrim(name : string);
FcFunArg(name : string, type : FcType);
FcFunArg2(name : string, type : Maybe<FcType>);
FcFunctionDec(name : string, lambda : Maybe<FcLambda>, declType : FcTypeFunction2, declInfo : FcInfo, defiInfo : FcInfo);
FcGePrim();
FcGtPrim();
FcIf(e1 : FcExp, e2 : FcExp, e3 : FcExp, info : FcInfo);
FcIndexPrim();
FcInfo(type : ref Maybe<FcType>, start : int, end : int);
FcInfo2(start : int, end : int);
FcInt(i : int, info : FcInfo);
FcLambda(args : [FcFunArg], body : FcExp, info : FcInfo);
FcLePrim();
FcLet(name : string, type : FcType, e1 : FcExp, e2 : FcExp, info : FcInfo);
FcLtPrim();
FcMinusPrim();
FcModPrim();
FcMulPrim();
FcNativeDec(name : string, io : bool, type : FcType, nativeName : string, flowfallback : Maybe<FcFunctionDec>, info : FcInfo);
FcNePrim();
FcNegPrim();
FcNotPrim();
FcOrPrim();
FcPlusPrim();
FcQuote();
FcRefPrim();
FcRequire(flowfile : string, e : FcExp, info : FcInfo);
FcSeq(es : [FcExp], info : FcInfo);
FcSetMutablePrim(name : string);
FcString(s : string, info : FcInfo);
FcStructArg(name : string, type : FcType, ismutable : bool);
FcStructPrim(struct_name : string);
FcSwitch(x : FcVar, switchType : FcType, cases : [FcCase], info : FcInfo);
FcTypeArray(t : FcType, info : FcInfo2);
FcTypeBool(info : FcInfo2);
FcTypeDouble(info : FcInfo2);
FcTypeFlow(info : FcInfo2);
FcTypeFunction(args : [FcFunArg], returnType : FcType, info : FcInfo2);
FcTypeFunction2(args : [FcFunArg2], returnType : Maybe<FcType>, info : FcInfo2);
FcTypeInt(info : FcInfo2);
FcTypeName(name : string, typeparameters : [FcType], info : FcInfo2);
FcTypeNative(info : FcInfo2);
FcTypeParameter(n : string, info : FcInfo2);
FcTypeRef(t : FcType, info : FcInfo2);
FcTypeString(info : FcInfo2);
FcTypeStruct(name : string, typars : [FcType], args : [FcStructArg], info : FcInfo2);
FcTypeUnion(name : string, typeparameters : [FcType], typenames : [FcTypeName], info : FcInfo2);
FcTypeVar(id : int, info : FcInfo2);
FcTypeVoid(info : FcInfo2);
FcUnquote();
FcUnsafe(name : string, fallback : FcExp, info : FcInfo);
FcVar(name : string, info : FcInfo);
FcVerifyType(type : FcType, declared : FcType, description : string, info : FcInfo2, e : FcExp);
FcVoid(info : FcInfo);
FiBool(b : bool, start : int);
FiCall(f : FiExp, args : [FiExp], type : FiType, start : int);
FiCallPrim(op : FcPrim, es : [FiExp], type : FiType, start : int);
FiCase(struct : string, argNames : [string], body : FiExp, start : int);
FiCast(e : FiExp, tFrom : FiType, tTo : FiType, type : FiType, start : int);
FiDouble(d : double, start : int);
FiExportNative(io : bool, type : FiType, nativeName : string);
FiFunArg(name : string, type : FiType);
FiFunctionDec(name : string, lambda : FiLambda, type : FiTypeFunction, declStart : int, defiStart : int);
FiGlobalVar(name : string, value : FiExp, type : FiType, declStart : int, defiStart : int);
FiIf(e1 : FiExp, e2 : FiExp, e3 : FiExp, type : FiType, start : int);
FiInt(i : int, start : int);
FiLambda(args : [FiFunArg], body : FiExp, type : FiTypeFunction, start : int);
FiLet(name : string, type : FiType, e1 : FiExp, e2 : FiExp, type2 : FiType, start : int);
FiNativeDec(name : string, io : bool, type : FiType, nativeName : string, fallbackLambda : FiExp, declStart : int, defiStart : int);
FiRequire(flowfile : string, e : FiExp, type : FiType, start : int);
FiSeq(es : [FiExp], type : FiType, start : int);
FiString(s : string, start : int);
FiStructArg(name : string, type : FiType, ismutable : bool);
FiSwitch(x : FiVar, switchType : FiType, cases : [FiCase], type : FiType, start : int);
FiTypeArray(t : FiType);
FiTypeBool();
FiTypeDouble();
FiTypeFlow();
FiTypeFunction(args : [FiFunArg], returnType : FiType);
FiTypeInt();
FiTypeName(name : string, typeparameters : [FiType]);
FiTypeNative();
FiTypeParameter(n : string);
FiTypeRef(t : FiType);
FiTypeString();
FiTypeStruct(name : string, typars : [FiType], args : [FiStructArg], start : int);
FiTypeVoid();
FiUnsafe(name : string, fallback : FiExp, type : FiType, start : int);
FiVar(name : string, type : FiType, start : int);
FiVoid(start : int);
GArray(type : GType);
GBasicType(t : FcBaseType);
GField(name : string, type : GType);
GFlow();
GFunction(args : [GType], rt : GType);
GNamed(name : string, typars : [GType]);
GRef(type : GType);
GTypePar(id : string);
GTypeVar(id : int);
HashMap(map : native, dummy : [Pair<?, ??>]);
IllegalStruct();
None();
Pair(first : ?, second : ??);
Some(value : ?);

flow(i : ?) -> flow {
	cast(i : ? -> flow);
}

native voidValue : () -> flow = Native.voidValue;
fcEvalMakeDefVal(type: FiType) -> flow {
	switch(type) {
		FiTypeVoid():   voidValue();
		FiTypeBool():   flow(false);
		FiTypeInt():    flow(0);
		FiTypeDouble(): flow(0.0);
		FiTypeString(): flow("");
		FiTypeFlow():   flow(0);
		FiTypeNative(): flow(0);
		FiTypeParameter(n): flow(0);
		FiTypeRef(rt):   flow(ref fcEvalMakeDefVal(rt));
		FiTypeArray(at): flow([]);
		FiTypeName(name, tp): {
			flow(0);
		}
		FiTypeFunction(args, rt): {
			flow(0);
		}
	}
}
