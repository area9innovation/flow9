// A double-linked list
DList(mutable first : DNode<?>, mutable last : DNode<?>);
	DNode<?> ::= DEnd, DLink<?>;
DEnd : ();

// Just to make assign a bit harder to resolve
Pair(first : ?, second: ??);

DLink(v : ?, mutable before : DNode<?>, mutable after : DNode<?>, mutable attached : bool);

concatDList : (DList<?>, DList<?>) -> void;

concatDList(l1, l2) {
	la = l1.last;
	switch (la) {
		DEnd(): {
			l1.first ::= l2.first;
			l1.last ::= l2.last;
		}
		DLink(v, before, after, l): {
			lf = l2.first;
			switch (lf) {
				DEnd(): {
					// do nothing, l1 is already a result
				}
				DLink(v2, before2, after2, __) : {
					lf.before ::= la;
					la.after ::= l2.first;
					l1.last ::= l2.last;
				}
			}
		}
	}
}
