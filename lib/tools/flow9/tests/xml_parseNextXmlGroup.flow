// Unions
DNode<?> ::= DEnd, DLink<?>;
XmlEvent ::= XmlTagEvent, XmlTextEvent, XmlEndEvent, XmlCommentEvent;
XmlNode2 ::= XmlElement2, XmlText, XmlComment;
XmlTagEvent ::= XmlEmptyElement, XmlElementStart, XmlElementEnd, XmlProcessingEvent;

// Structs
DEnd();
DLink(v : ?, before : DNode<?>, after : DNode<?>, attached : bool);
DList(first : DNode<?>, last : DNode<?>);
Pair(first : ?, second : ??);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
Triple(first : ?, second : ??, third : ???);
XmlAttribute(key : string, value : string);
XmlComment(text : string);
XmlCommentEvent(comment : string);
XmlElement2(tag : string, attributes : [XmlAttribute], children : [XmlNode2]);
XmlElementEnd(tag : string);
XmlElementStart(tag : string, attributes : [XmlAttribute]);
XmlEmptyElement(tag : string, attributes : [XmlAttribute]);
XmlEndEvent();
XmlProcessingEvent(tag : string, attributes : [XmlAttribute]);
XmlText(text : string);
XmlTextEvent(text : string);

buildXml(a0:[XmlEvent], a1:int, a2:bool) -> Pair<XmlNode2, int> {Pair(XmlText(""), 0)};
length(a0:[?]) -> int {0};

refArrayPush(a0:ref [?], a1:?) -> void {{}};
parseNextXmlGroup(i : int, tokens : [XmlEvent], result : ref [XmlNode2], keepComments : bool) -> void {
	if (length(tokens) > i) {
		tempXml = buildXml(tokens, i, keepComments);
		refArrayPush(result, tempXml.first);
		parseNextXmlGroup(tempXml.second, tokens, result, keepComments);
		{};
	}
}

