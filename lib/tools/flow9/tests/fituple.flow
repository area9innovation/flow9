import tools/flowc/incremental/fitype;
import ds/set;
import tools/flowc/incremental/fimodule;

	WiseAstStructs(
		data : StructTuple,
		table : Tree<string, int>,
	);

	StructTuple(
		link : Tree</*struct_name*/string, StructTupleArgs>,
	);
	StructTupleArgs(
		typeParameters : [FiType],
		args : Tree<string/*arg_name*/, StructTupleArg>
	);
	StructTupleArg(
		index : int,
		type : FiType,
	);


fiStructs2wiTuples(env : WiseAstStructs, structs : [FiTypeStruct], unions : [FiTypeUnion]) -> void {
	state = foldr(structs, env, \tuples, struct -> {
		WiseAstStructs(
			StructTuple(
				setTree(
					tuples.data.link,
					struct.name,
					StructTupleArgs(
						struct.typars,
						foldi(struct.args, makeTree(), \i, acc2, arg ->
							acc2
						)
					),
				),
			),
			setTree(tuples.table, struct.name, 0),
		)
	});
	unionIds = values2treeEx(unions, \v -> v.name, \t -> map(t.typenames, \v -> v.name));
	unionStructs = 
		values2treeEx(
			unions,
			\v -> v.name,
			\v -> filtermap([v.name], \s -> lookupTree(state.table, s))
		);
}

