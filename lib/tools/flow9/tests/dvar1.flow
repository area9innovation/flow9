import tools/flow9/backends/bprogram;
import tools/flow9/bexp/type;

BExpUsedVars(
	exp : BExp,
	usedVars : Tree<string, BExpUsedVar>, // key is _id_ (all used variables in the code below the current one)
	createdVars : Set<string>, // local variables
	downDrops : [BCounter], // variables we want to delete later (in the parent expression)
);

BExpUsedVar(
	type : BType,
	externalDrop : bool, // used in a function
);

extractConstructedVars(exp : BExp, generators : Set<string>) -> Triple<[Pair<BVar, bool>], (BExp, Tree<string, BExpUsedVar>, (BExp, Tree<string, BExpUsedVar>) -> BExpUsedVars) -> BExp, BExp> {
	// false ? fn(if (fn())) ?
	untriple(makeConstructedVars(exp, [], [], generators, false, false), \vars, lets, newExp -> {
		Triple(
			vars,
			\tail, expUsedVars, updateCondBody -> foldr(lets, Pair(tail, expUsedVars), \acc, blet -> unpair(acc, \accVal, usedVars -> {
				newValue = updateCondBody(blet.value, usedVars);
				Pair(BLet(blet with value = newValue.exp, body = accVal, type = getBType(accVal)), newValue.usedVars)
			})).first,
			either(newExp, exp)
		)
	})
}

makeConstructedVars(exp : BExp, vars : [Pair<BVar, bool>], exps : [BLet], generators : Set<string>, externalDrop : bool, innerCall : bool) -> Triple<[Pair<BVar, bool>], [BLet], Maybe<BExp>> {
	Triple([], [], None());
}
