// Unions
DeserializeOptions ::= DeserializeOptionFixupsEx, DeserializeOptionFixups, DeserializeOptionThrowErrors, DeserializeOptionRootArray, DeserializeOptionFailProc;
Maybe<?> ::= None, Some<?>;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
DeserializeOptionFailProc(onFailProc : Maybe<(string, int, string) -> void>);
DeserializeOptionFixups(fixups : Tree<string, ([flow]) -> flow>);
DeserializeOptionFixupsEx(fixups : Tree<string, ([DeserializeOptions], [flow]) -> flow>);
DeserializeOptionRootArray(onIllegalStub : Maybe<(string) -> flow>, onRootItem : Maybe<(flow, string) -> flow>);
DeserializeOptionThrowErrors(opt : bool);
IllegalStruct();
None();
Pair(first : ?, second : ??);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
Some(value : ?);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
Triple(first : ?, second : ??, third : ???);

deserializeNext(s : string, start : int, options: [DeserializeOptions]) -> Triple<flow, int, string> {Triple("", 0, "")};
i2s(a0:int) -> string {""};
deserializeEx(value : string, def : ?, options : [DeserializeOptions]) -> Pair<?, string> {
	if (value == "") {
		Pair(def, "");
	} else {
		r = deserializeNext(value, 0, options);
		if (r.third != "") {
			Pair(def, r.third + " at character " + i2s(r.second));
		} else {
			Pair(r.first, "");
		}
	}
}

