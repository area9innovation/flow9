// Unions
CNode ::= CName, COverload;
CompileStage ::= StageParse, StageTypeInference, StageTypeResolve, StageLower;
DExp ::= DValue, DStringInclude, DVar, DLet, DIf, DCall, DConstruct, DLambda, DRef, DField, DSetMutable, DArray, DSequence, DSwitch, DCast, DDowncast, DTyped;
DType ::= DTypePar, DTypeName, DTypeFunction;
DValue ::= DVoid, DBool, DInt, DDouble, DString;
List<?> ::= EmptyList, Cons<?>;
Maybe<?> ::= None, Some<?>;
TType ::= TTypeName, TTypeEClass, TTypeFunction, TTypeOverload;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
CEpsilon();
CFunction(args : [int], return : int, reason : ErrorReason);
CMap(cmap : UnionFindMap<CNode>, unifications : ref List<TUnification>, constraints : ref List<TConstraint>);
CName(name : string, typars : [int], reason : ErrorReason);
COverload(unique : int, options : int, reason : ErrorReason);
Cons(head : ?, tail : List<?>);
DArgType(id : string, type : DType, pos : int);
DArray(exps : [DExp], pos : int, eclass : int);
DBool(v : bool, pos : int);
DCall(fn : DExp, args : [DExp], pos : int, eclass : int);
DCase(id : string, body : DExp, pos : int);
DCast(value : DExp, target : DType, pos : int);
DConstruct(structid : string, args : [DExp], pos : int, eclass : int);
DDouble(v : double, pos : int);
DDowncast(id : string, newid : string, subtype : DType, subeclass : int, supereclass : int, scope : DExp, pos : int, eclass : int);
DField(value : DExp, field : string, pos : int, eclass : int);
DGlobal(id : string, typars : [string], recursive : bool, value : DExp, eclass : int, pos : int);
DIf(cond : DExp, then : DExp, else_ : DExp, pos : int, eclass : int);
DInt(v : int, pos : int);
DLambda(args : [DArgType], body : DExp, pos : int, eclass : int);
DLet(id : string, value : DExp, body : DExp, pos : int, eclass : int);
DRef(value : DExp, pos : int, eclass : int);
DSequence(exps : [DExp], pos : int, eclass : int);
DSetMutable(lhs : DExp, field : string, value : DExp, pos : int, eclass : int);
DString(v : string, pos : int);
DStringInclude(path : string, pos : int);
DStruct(id : string, implicitTypars : bool, typars : [string], structArgs : [DStructArg], pos : int);
DStructArg(id : string, ismutable : bool, type : DType, pos : int);
DSwitch(value : DVar, type : DType, cases : [DCase], defaultCase : Maybe<DExp>, pos : int, eclass : int);
DTypeFunction(args : [DType], returnType : DType, pos : int);
DTypeName(id : string, typars : [DType], pos : int);
DTypePar(id : string, pos : int);
DTyped(value : DExp, supertype : DType, pos : int, eclass : int);
DUnion(id : string, typars : [DTypePar], types : [DTypeName], pos : int);
DVar(id : string, pos : int, eclass : int);
DVoid(pos : int);
EmptyList();
ErrorReason(reasons : Tree<int, [string]>);
None();
Pair(first : ?, second : ??);
Set(tree : Tree<?, bool>);
Some(value : ?);
StageLower();
StageParse();
StageTypeInference();
StageTypeResolve();
TConstraint(subtype : int, supertype : int, reason : ErrorReason);
TMap(cmap : CMap, resolveStructName : ref (string) -> Maybe<DStruct>, resolveUnionName : ref (string) -> Maybe<DUnion>, resolveSupertypes : ref (string) -> [string], resolveSubtypes : ref (string) -> [string], onError : (ErrorReason) -> void, nextEClass : ref int, namedClasses : ref Tree<string, Set<int>>, functionClasses : ref Tree<int, Set<int>>, mkUnique : () -> int, tracing : Tracing, topid : ref string);
TTypeEClass(eclass : int);
TTypeFunction(args : [TType], returnType : TType);
TTypeName(id : string, typars : [TType]);
TTypeOverload(unique : TType, overloads : [TType]);
TUnification(left : int, right : int, reason : ErrorReason);
Tracing(debugIds : Set<string>, debugStages : Set<CompileStage>, debugLevel : int, overload : bool);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
UnionFindMap(parents : ref [ref int], values : ref [ref ?], defaultValue : ?, mergeFn : (?, ?) -> ?, merging : ref bool, pendingMerges : ref List<Pair<int, int>>);

makeSupertypeOverload(node : CNode) -> Maybe<CNode> {
	switch (node) {
		CName(name, typars, reason): {
			if (true) {
				if (true) {
					Some(node);
				} else {
					Some(node)
				}
			} else {
				if (true) {
					None();
				} else {
					Some(COverload(0, 0, node.reason))
				}
			}
		}
		COverload(unique, options, reason): {
			None();
		}
	}
}
