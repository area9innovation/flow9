// Unions
ActionExp ::= ActionCall, ActionVar, ActionIndex, ActionCallDebug, ActionConstantString, ActionConstantInt;
Json ::= JsonObject, JsonArray, JsonNull, JsonBool, JsonString, JsonDouble;
Maybe<?> ::= None, Some<?>;
PegOp ::= PegString, PegRange, PegJump, PegChoice, PegCall, PegCacheCall, PegReturn, PegCommit, PegStartString, PegBindString, PegBindValue, PegBindIndex, PegAction, PegAction2, PegActionIndex, PegFail, PegEnd, PegStartCaptureList, PegCaptureList, PegDrop, PegStringChoice, PegRangeChoice, PegClearCache;
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;

// Structs
ActionCall(id : string, args : [ActionExp]);
ActionCallDebug(id : string, args : [ActionExp]);
ActionConstantInt(i : int);
ActionConstantString(s : string);
ActionIndex();
ActionVar(id : string);
CharRange(first : string, last : string);
JsonArray(value : [Json]);
JsonBool(v : bool);
JsonDouble(value : double);
JsonNull();
JsonObject(members : [Pair<string, Json>]);
JsonString(s : string);
None();
Pair(first : ?, second : ??);
PegAction(fn : (PegEnv) -> flow);
PegAction2(e : ActionExp);
PegActionIndex();
PegBindIndex(n : string);
PegBindString(n : string);
PegBindValue(n : string);
PegCacheCall(l : int, cacheEntry : int);
PegCall(l : int);
PegCaptureList();
PegChoice(l : int);
PegClearCache();
PegCommit(l : int);
PegDrop();
PegEnd();
PegEnv(bindings : Tree<string, RuleResult>, functions : Tree<string, ([flow]) -> flow>);
PegFail();
PegJump(l : int);
PegRange(l : string, u : string);
PegRangeChoice(l : string, u : string, commit : int);
PegReturn();
PegStartCaptureList();
PegStartString();
PegString(x : string);
PegStringChoice(x : string, commit : int);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
RuleResult(input : flow, pos : int, len : int, result : Maybe<flow>);
SemanticActions(t : Tree<string, ([flow]) -> flow>);
Some(value : ?);
TreeEmpty();
TreeNode(key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
Triple(first : ?, second : ??, third : ???);

defaultPegActions = {SemanticActions(TreeEmpty())};
parsic3(a0:[PegOp], a1:string, a2:SemanticActions, a3:?) -> Triple<?, int, string> {Triple(a3, 0, "")};
pegOps4Json : [PegOp] = [];
parseJsonSafer(json : string) -> Maybe<Json> {
	parsed = parsic3(pegOps4Json, json, defaultPegActions, JsonNull());
	if (parsed.third == "") Some(parsed.first) else None();
}
