// Unions
Bytecode ::= CVoid, CBool, CInt, CDouble, CString, CArray, CStruct, CSetLocal, CGetLocal, CGetGlobal, CReturn, CGoto, CCodePointer, CCall, CCallN, CIfFalse, CNot, CPlus, CMinus, CLessThan, CNativeFn, CEqual, CNegate, CMultiply, CDivide, CModulo, CPop, CLessEqual, CArrayGet, CReserveLocals, CRefTo, CDebugInfo, CDeref, CSetRef, CInt2Double, CInt2String, CDouble2Int, CDouble2String, CField, CFieldName, CGetFreeVar, CClosureReturn, CClosurePointer, CSwitch, CUncaughtSwitch, CTailCall, CPlusString, CPlusInt, CMinusInt, CNegateInt, CMultiplyInt, CDivideInt, CModuloInt, CSimpleSwitch, CWString, CLast, CBreakpoint, COptionalNativeFn, CSetMutable, CSetMutableName;
BytecodeOrChunks ::= Bytecode, BytecodeAsString;
// Structs
BytecodeAsString(bytes : string);
CArray(size : int);
CArrayGet();
CBool(value : bool);
CBreakpoint();
CCall();
CCallN(nargs : int);
CClosurePointer(size : int, offset : int);
CClosureReturn();
CCodePointer(offset : int);
CDebugInfo(name : string);
CDeref();
CDivide();
CDivideInt();
CDouble(value : double);
CDouble2Int();
CDouble2String();
CEqual();
CField(index : int);
CFieldName(name : string);
CGetFreeVar(index : int);
CGetGlobal(index : int);
CGetLocal(index : int);
CGoto(offset : int);
CIfFalse(offset : int);
CInt(value : int);
CInt2Double();
CInt2String();
CLast();
CLessEqual();
CLessThan();
CMinus();
CMinusInt();
CModulo();
CModuloInt();
CMultiply();
CMultiplyInt();
CNativeFn(name : string, args : int);
CNegate();
CNegateInt();
CNot();
COptionalNativeFn(name : string, args : int);
CPlus();
CPlusInt();
CPlusString();
CPop();
CRefTo();
CReserveLocals(locals : int, args : int);
CReturn();
CSetLocal(index : int);
CSetMutable(index : int);
CSetMutableName(name : string);
CSetRef();
CSimpleSwitch(defoffset : int, cases : [Pair<int, int>]);
CString(value : string);
CStruct(index : int);
CSwitch(defoffset : int, cases : [Pair<int, int>]);
CTailCall(nargs : int);
CUncaughtSwitch();
CVoid();
CWString(value : string);
Pair(first : ?, second : ??);
Quadruple(first : ?, second : ??, third : ???, fourth : ????);
TCArray();
TCBool();
TCDouble();
TCFlow();
TCInt();
TCRefTo();
TCString();
TCStruct();
TCTypedStruct(arg : string);
TCVoid();
Triple(first : ?, second : ??, third : ???);


concat(a0:[?], a1:[?]) -> [?]{[]};
native fail0 : (a0:string) -> ? = Native.fail0;
fiMakeBytecode(a0:[BytecodeOrChunks]) -> BytecodeAsString{BytecodeAsString("")};
map(a0:[?], a1:(?) -> ??) -> [??]{[]};

fiBcEncode() -> BytecodeAsString {
	casecode2 : [Pair<int,BytecodeAsString>] = Pair([], 0).first;
	// find or create the default case
	casecode3 = Pair(fiMakeBytecode([ CUncaughtSwitch() ]), casecode2);
	// generate switch
	fiMakeBytecode(
		concat([casecode3.first],
			map(casecode3.second, \x -> x.second)
		)
	);
}
