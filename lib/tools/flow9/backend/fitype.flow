import tools/flowc/incremental/fitype;
import tools/flow9/type/types;

export {
	htypeschema2fitype(schema : HTypeSchema) -> FiType;
}

htypeschema2fitype(schema : HTypeSchema) -> FiType {
	switch (schema) {
		HTypeForAll(vars, type): {
			// When converting a forall schema, we just convert the inner type
			// The polymorphism is handled at the FiFunctionDec or FiGlobalVar level
			htype2fitype(type);
		}
		HTypeAlternatives(options): {
			// For alternatives, we take the first option
			// This is a simplification - in practice you might need a more sophisticated approach
			println("Can not convert alternatives to FiType");
			if (length(options) > 0) {
				htypeschema2fitype(options[0]);
			} else {
				FiTypeFlow();  // Default fallback
			}
		}
		HTypeCons(name, args): htype2fitype(schema);
		HTypeFn(from, to): htype2fitype(schema);
		HTypeVar(tyvar): htype2fitype(schema);
	}
}

htype2fitype(type : HType) -> FiType {
	switch (type) {
		HTypeCons(name, args): {
			// Handle primitive types
			if (name == "int") FiTypeInt()
			else if (name == "bool") FiTypeBool()
			else if (name == "double") FiTypeDouble()
			else if (name == "string") FiTypeString()
			else if (name == "void") FiTypeVoid()
			else if (name == "flow") FiTypeFlow()
			else if (name == "native") FiTypeNative()
			else if (name == "array") {
				if (length(args) > 0) {
					FiTypeArray(htype2fitype(args[0]))
				} else {
					FiTypeArray(FiTypeFlow())
				}
			}
			else if (name == "ref") {
				if (length(args) > 0) {
					FiTypeRef(htype2fitype(args[0]))
				} else {
					FiTypeRef(FiTypeVoid())
				}
			}
			else {
				// Custom struct or union type
				FiTypeName(name, map(args, htype2fitype))
			}
		}
		HTypeFn(from, to): {
			// Convert function type
			// For each argument, create a FiFunArg with a generated name
			args = mapi(from, \i, t -> FiFunArg("a" + i2s(i), htype2fitype(t)));
			FiTypeFunction(args, htype2fitype(to))
		}
		HTypeVar(tyvar): {
			// Type variable - convert to type parameter
			FiTypeParameter(tyvar)
		}
	}
}