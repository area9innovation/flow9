import string;
import tools/flowc/incremental/fiprogram;

export {
	debugPrintGlobalNames(names : FiGlobalNames) -> void;
}

debugPrintGlobalNames(names : FiGlobalNames) -> void {
	println("=== FiGlobalNames Debug Information ===\n");

	// Print struct to module mappings
	println("=== Structs to Module Mappings ===");
	structKeys = getTreeKeys(names.struct2module);
	println("Count: " + i2s(length(structKeys)));
	traverseInOrder(names.struct2module, \structName, moduleName -> {
		println("Struct: " + structName + " -> Module: " + moduleName);
	});
	println("");

	// Print union to module mappings
	println("=== Unions to Module Mappings ===");
	unionKeys = getTreeKeys(names.union2module);
	println("Count: " + i2s(length(unionKeys)));
	traverseInOrder(names.union2module, \unionName, moduleName -> {
		println("Union: " + unionName + " -> Module: " + moduleName);
	});
	println("");

	// Print function to module mappings
	println("=== Functions to Module Mappings ===");
	functionKeys = getTreeKeys(names.function2module);
	println("Count: " + i2s(length(functionKeys)));
	traverseInOrder(names.function2module, \functionName, moduleName -> {
		println("Function: " + functionName + " -> Module: " + moduleName);
	});
	println("");

	// Print global var to module mappings
	println("=== Global Vars to Module Mappings ===");
	varKeys = getTreeKeys(names.globalVar2module);
	println("Count: " + i2s(length(varKeys)));
	traverseInOrder(names.globalVar2module, \varName, moduleName -> {
		println("Global Var: " + varName + " -> Module: " + moduleName);
	});
	println("");

	// Print native to module mappings
	println("=== Natives to Module Mappings ===");
	nativeKeys = getTreeKeys(names.native2module);
	println("Count: " + i2s(length(nativeKeys)));
	traverseInOrder(names.native2module, \nativeName, moduleName -> {
		println("Native: " + nativeName + " -> Module: " + moduleName);
	});
	println("");

	// Print struct definitions
	println("=== Struct Definitions ===");
	println("Count: " + i2s(sizeTree(names.structs)));
	traverseInOrder(names.structs, \structName, structDef -> {
		println("Struct: " + structName);
	});
	println("");

	// Print union definitions
	println("=== Union Definitions ===");
	println("Count: " + i2s(sizeTree(names.unions)));
	traverseInOrder(names.unions, \unionName, unionDef -> {
		println("Union: " + unionName);
	});
	println("");

	// Print toplevel declarations with their types
	println("=== Toplevel Declarations ===");
	println("Count: " + i2s(sizeTree(names.toplevel)));
	traverseInOrder(names.toplevel, \name, decl -> {
		declType = switch (decl) {
			FiFunctionDec(__, __, __, __, __): "Function";
			FiGlobalVar(__, __, __, __, __): "Global Variable";
			FiNativeDec(__, __, __, __, __, __, __): "Native";
		};

		println("Name: " + name + ", Type: " + declType);

		// For functions, also check if they have a lambda
		switch (decl) {
			FiFunctionDec(fname, lambda, type, start, end): {
				switch (lambda) {
					FiLambda(__, __, __, __): {}
					default: println("  ERROR: Function is NOT lambda");
				}
			}
			FiGlobalVar(vname, value, __, __, __): {
				// Check if the value is a lambda
				switch (value) {
					FiLambda(__, __, __, __): println("  ERROR: Global is lambda, not function!");
					default: {}
				}
			}
			default: {}
		}
	});

	println("\n=== End of FiGlobalNames Debug Information ===");
}