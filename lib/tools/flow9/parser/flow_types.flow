// Automatically generated from Mango grammar
export {
	PArgtype ::= PIdType, PTypeOnly;

	PCase ::= PDefaultCase, PStructCase;

	PExp ::= PArray, PAssignOp, PBinOp, PCall, PFor, PIfElse, PLet, PMaybe, PReturn, PSequence, PSwitch, PUnOp, PValue, PVar, PWhile, PWith;

	PFunctionorstruct ::= PFnDef, PStructDef, PTypeDef;

	PToplevel ::= PFunctionorstruct, PGlobal, PNative, PUnion;

	PType ::= PArrayType, PAutoType, PBoolType, PDoubleType, PFlowType, PFnType, PIntType, PNativeType, PPolyType, PRefType, PStringType, PTypename, PVoidType;

	PValue ::= PBool, PDouble, PInt, PLambda, PString, PStringInclude, PVoid;

	Pbinop_1 ::= PAdd, PAnd, PAssign, PDiv, PEqual, PGreater, PGreaterEqual, PIndex, PLess, PLessEqual, PMod, PMul, PMutableAssign, PNotEqual, POr, PPipe, PSub;

	Punop ::= PCast, PDeref, PDot, PIsSubType, PNegative, PNot, PRef;

	PAdd();
	PAnd();
	PArray(pos : int, exps : [PExp]);
	PArrayType(pos : int, type : PType);
	PAssign();
	PAssignOp(exp1 : PExp, pos : int, string1 : string, exp2 : PExp);
	PAutoType(pos : int);
	PBinOp(exp1 : PExp, pos : int, exp2 : PExp, pbinop_1 : Pbinop_1);
	PBool(pos : int, bool1 : bool);
	PBoolType(pos : int);
	PCall(exp1 : PExp, pos : int, exps : [PExp]);
	PCast(pos : int, type : PType);
	PDefaultCase(pos : int, exp1 : PExp);
	PDeref(pos : int);
	PDiv();
	PDot(pos : int, id : string);
	PDouble(pos : int, double1 : double);
	PDoubleType(pos : int);
	PEqual();
	PExport(pos : int, toplevels : [PToplevel]);
	PFieldAssign(pos : int, id : string, exp1 : PExp);
	PFlowType(pos : int);
	PFnDef(pos : int, id : string, lambdatype : PFnType, pexp : PExp);
	PFnType(pos : int, argtypes : [PArgtype], ptype : PType);
	PFor(pos : int, id : string, opttype : PType, exp1 : PExp, exp2 : PExp, exp3 : PExp, exp4 : PExp);
	PForbid(pos : int, path : string);
	PGlobal(pos : int, id : string, opttype : PType, pexp : PExp);
	PGreater();
	PGreaterEqual();
	PIdType(pos : int, id : string, opttype : PType);
	PIfElse(pos : int, exp1 : PExp, exp2 : PExp, pexp : PExp);
	PImport(pos : int, path : string);
	PIndex();
	PInt(pos : int, int1 : int);
	PIntType(pos : int);
	PIsSubType(pos : int, type : PType);
	PLambda(pos : int, lambdaargs : [PIdType], ptype : PType, exp1 : PExp);
	PLess();
	PLessEqual();
	PLet(lid : string, opttype : PType, pos : int, exp1 : PExp, expsemi : [PExp]);
	PMaybe(exp1 : PExp, pos : int, exp2 : PExp, exp3 : PExp);
	PMod();
	PModule(imports : [PImport], forbids : [PForbid], exports : [PExport], toplevels : [PToplevel]);
	PMul();
	PMutableAssign(id : string);
	PNative(pos : int, id : string, bool1 : bool, type : PType, string1 : string);
	PNativeType(pos : int);
	PNegative(pos : int);
	PNot(pos : int);
	PNotEqual();
	POr();
	PPipe();
	PPolyType(pos : int, string1 : string);
	PRef(pos : int);
	PRefType(pos : int, type : PType);
	PReturn(pos : int, exps : [PExp]);
	PSequence(pos : int, expsemi : [PExp]);
	PString(pos : int, string1 : string);
	PStringInclude(pos : int, path : string);
	PStringType(pos : int);
	PStructArg(pos : int, bool1 : bool, id : string, type : PType);
	PStructCase(pos : int, uid : string, ids : [string], exp1 : PExp);
	PStructDef(pos : int, uid : string, structargs : [PStructArg]);
	PSub();
	PSwitch(pos : int, exp1 : PExp, cases : [PCase]);
	PTypeDef(pos : int, id : string, ptype : PType);
	PTypeOnly(type : PType);
	PTypename(pos : int, uid : string, typars : [PType]);
	PUnOp(exp1 : PExp, punop : Punop);
	PUnion(pos : int, typename : PTypename, typenames : [PTypename]);
	PVar(pos : int, lid : string);
	PVoid(pos : int);
	PVoidType(pos : int);
	PWhile(pos : int, exp1 : PExp, exp2 : PExp);
	PWith(exp1 : PExp, pos : int, fieldassigns : [PFieldAssign]);
}
