// Produced by  flowcpp mango/mango.flow -- file=flow.mango compile=1 main=flow_compiled
import tools/mango/mcode_lib;
import string;

export {
	P_parse_flow_compiled(acc : MoParseAcc) -> bool;
}

P_parse_ws(acc : MoParseAcc) -> bool {
	mparseStarBacktrackOnly(acc, \ -> {
		P_parse_cs(acc)
	})
}

P_parse_value(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if ((mmatchString(acc, "true") && P_parse_kwsep(acc))) {
			{
				pushPEnv(acc.env, true);
				moconstruct(acc, "PBool", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if ((mmatchString(acc, "false") && P_parse_kwsep(acc))) {
					{
						pushPEnv(acc.env, false);
						moconstruct(acc, "PBool", 2);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if (mmatchString(acc, "0x")) {
							{
								acc.starti ::= acc.i;
								pushMCheckpointNoStack(acc);
								if (((if (if (P_parse_hexdigit(acc)) {
									{
										mparseStarBacktrackOnly(acc, \ -> {
											P_parse_hexdigit(acc)
										});
										discardMCheckpointNoStack(acc)
									}
								} else {
									restoreMCheckpointNoStack(acc)
								}) {
									pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
								} else {
									false
								}) && P_parse_ws(acc))) {
									{
										{pfn1(acc.env, parseHex); true};
										moconstruct(acc, "PInt", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								acc.starti ::= acc.i;
								if (if (((if (P_parse_double(acc)) {
									pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
								} else {
									false
								}) && P_parse_ws(acc))) {
									{
										{pfn1(acc.env, s2d); true};
										moconstruct(acc, "PDouble", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										acc.starti ::= acc.i;
										if (if (((if (P_parse_int(acc)) {
											pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
										} else {
											false
										}) && P_parse_ws(acc))) {
											{
												{pfn1(acc.env, s2i); true};
												moconstruct(acc, "PInt", 2);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "\"#inc") && ((mmatchString(acc, "lude") && ((P_parse_s(acc) && ((P_parse_path(acc) && ((mmatchString(acc, "\"") && P_parse_ws(acc))))))))))) {
													{
														moconstruct(acc, "PStringInclude", 2);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if (P_parse_string(acc)) {
															{
																{pfn1(acc.env, \l -> deserializeString(l).first); true};
																moconstruct(acc, "PString", 2);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																if (if (mmatchString(acc, "<<")) {
																	{
																		acc.starti ::= acc.i;
																		mparseStarBacktrackOnly(acc, \ -> {
																			{
																				pos_47 = acc.i;
																				pos_48 = acc.i;
																				if (((if (mmatchString(acc, ">>")) {
																					{acc.i ::= pos_48; false}
																				} else {
																					{
																						{acc.i ::= pos_48; false};
																						true
																					}
																				}) && P_parse_anychar(acc))) {
																					true
																				} else {
																					{acc.i ::= pos_47; false}
																				}
																			}
																		});
																		pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti));
																		if ((mmatchString(acc, ">>") && P_parse_ws(acc))) {
																			{
																				moconstruct(acc, "PString", 2);
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	{
																		pushMCheckpoint(acc);
																		if (if ((mmatchString(acc, "\\") && P_parse_ws(acc))) {
																			{
																				{pushPEnv(acc.env, makeList()); true};
																				pushMCheckpoint(acc);
																				pushMCheckpoint(acc);
																				if (if (P_parse_lambdaarg(acc)) {
																					{
																						{pcons(acc.env); true};
																						mparseStar(acc, \ -> {
																							{
																								pushMCheckpoint(acc);
																								if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_lambdaarg(acc))))) {
																									{
																										{pcons(acc.env); true};
																										discardMCheckpoint(acc)
																									}
																								} else {
																									restoreMCheckpoint(acc)
																								}
																							}
																						});
																						pos_45 = acc.i;
																						pos_46 = acc.i;
																						if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
																							true
																						} else {
																							{acc.i ::= pos_46; false}
																						}) {
																							true
																						} else {
																							{acc.i ::= pos_45; false}
																						};
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}) {
																					discardMCheckpoint(acc)
																				} else {
																					restoreMCheckpoint(acc)
																				};
																				{pfn1(acc.env, list2array); true};
																				if ((mmatchString(acc, "->") && P_parse_ws(acc))) {
																					{
																						pushMCheckpoint(acc);
																						pushMCheckpoint(acc);
																						if (if (if ((P_parse_type(acc) && ((mmatchString(acc, "->") && P_parse_ws(acc))))) {
																							discardMCheckpoint(acc)
																						} else {
																							restoreMCheckpoint(acc)
																						}) {
																							discardMCheckpoint(acc)
																						} else {
																							{
																								pushMCheckpoint(acc);
																								pushPEnv(acc.env, acc.i);
																								moconstruct(acc, "PAutoType", 1);
																								discardMCheckpoint(acc);
																								discardMCheckpoint(acc)
																							}
																						}) {
																							if (P_parse_exp(acc)) {
																								{
																									moconstruct(acc, "PLambda", 4);
																									discardMCheckpoint(acc)
																								}
																							} else {
																								restoreMCheckpoint(acc)
																							}
																						} else {
																							restoreMCheckpoint(acc)
																						}
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			{
																				pushMCheckpoint(acc);
																				if (if ((mmatchString(acc, "{}") && P_parse_ws(acc))) {
																					{
																						moconstruct(acc, "PVoid", 1);
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}) {
																					discardMCheckpoint(acc)
																				} else {
																					restoreMCheckpoint(acc)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_union(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((P_parse_typename(acc) && ((mmatchString(acc, "::=") && ((P_parse_ws(acc) && ((P_parse_typenames(acc) && P_parse_semi(acc))))))))) {
			{
				moconstruct(acc, "PUnion", 3);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_uid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (mmatchRange(acc, 65, 90)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					P_parse_alnum(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && P_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_typenames(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		{pushPEnv(acc.env, makeList()); true};
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if (P_parse_typename(acc)) {
			{
				{pcons(acc.env); true};
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_typename(acc))))) {
							{
								{pcons(acc.env); true};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				{pfn1(acc.env, list2array); true};
				pos_43 = acc.i;
				pos_44 = acc.i;
				if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
					true
				} else {
					{acc.i ::= pos_44; false}
				}) {
					true
				} else {
					{acc.i ::= pos_43; false}
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				{pfn1(acc.env, list2array); true};
				discardMCheckpoint(acc)
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_typename(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((P_parse_uid(acc) && P_parse_typars(acc))) {
			{
				moconstruct(acc, "PTypename", 3);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_type(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if ((if (if (if ((mmatchString(acc, "bool") && P_parse_kwsep(acc))) {
			{
				moconstruct(acc, "PBoolType", 1);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if ((mmatchString(acc, "int") && P_parse_kwsep(acc))) {
					{
						moconstruct(acc, "PIntType", 1);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "double") && P_parse_kwsep(acc))) {
							{
								moconstruct(acc, "PDoubleType", 1);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "string") && P_parse_kwsep(acc))) {
									{
										moconstruct(acc, "PStringType", 1);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, "void") && P_parse_kwsep(acc))) {
											{
												moconstruct(acc, "PVoidType", 1);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "auto") && P_parse_kwsep(acc))) {
													{
														moconstruct(acc, "PAutoType", 1);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if ((mmatchString(acc, "native") && P_parse_kwsep(acc))) {
															{
																moconstruct(acc, "PNativeType", 1);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																if (if ((mmatchString(acc, "flow") && P_parse_kwsep(acc))) {
																	{
																		moconstruct(acc, "PFlowType", 1);
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	{
																		pushMCheckpoint(acc);
																		if (if ((mmatchString(acc, "ref") && ((P_parse_kwsep(acc) && P_parse_type(acc))))) {
																			{
																				moconstruct(acc, "PRefType", 2);
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			{
																				pushMCheckpoint(acc);
																				if (if ((mmatchString(acc, "(") && P_parse_ws(acc))) {
																					{
																						{pushPEnv(acc.env, makeList()); true};
																						pushMCheckpoint(acc);
																						pushMCheckpoint(acc);
																						if (if (P_parse_argtype(acc)) {
																							{
																								{pcons(acc.env); true};
																								mparseStar(acc, \ -> {
																									{
																										pushMCheckpoint(acc);
																										if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_argtype(acc))))) {
																											{
																												{pcons(acc.env); true};
																												discardMCheckpoint(acc)
																											}
																										} else {
																											restoreMCheckpoint(acc)
																										}
																									}
																								});
																								pos_41 = acc.i;
																								pos_42 = acc.i;
																								if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
																									true
																								} else {
																									{acc.i ::= pos_42; false}
																								}) {
																									true
																								} else {
																									{acc.i ::= pos_41; false}
																								};
																								discardMCheckpoint(acc)
																							}
																						} else {
																							restoreMCheckpoint(acc)
																						}) {
																							discardMCheckpoint(acc)
																						} else {
																							restoreMCheckpoint(acc)
																						};
																						{pfn1(acc.env, list2array); true};
																						if ((mmatchString(acc, ")") && ((P_parse_ws(acc) && ((mmatchString(acc, "->") && ((P_parse_ws(acc) && P_parse_type(acc))))))))) {
																							{
																								moconstruct(acc, "PFnType", 3);
																								discardMCheckpoint(acc)
																							}
																						} else {
																							restoreMCheckpoint(acc)
																						}
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}) {
																					discardMCheckpoint(acc)
																				} else {
																					restoreMCheckpoint(acc)
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}) || P_parse_typename(acc)) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if (if ((mmatchString(acc, "[") && ((P_parse_ws(acc) && ((P_parse_type(acc) && ((mmatchString(acc, "]") && P_parse_ws(acc))))))))) {
					{
						moconstruct(acc, "PArrayType", 2);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						acc.starti ::= acc.i;
						if (if (((if (if (mmatchString(acc, "?")) {
							{
								mparseStarNobacktrackOrStack(acc, \ -> {
									mmatchString(acc, "?")
								});
								true
							}
						} else {
							false
						}) {
							pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
						} else {
							false
						}) && P_parse_ws(acc))) {
							{
								moconstruct(acc, "PPolyType", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}
	}
}

P_parse_typars(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		{pushPEnv(acc.env, makeList()); true};
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((mmatchString(acc, "<") && ((P_parse_ws(acc) && P_parse_type(acc))))) {
			{
				{pcons(acc.env); true};
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_type(acc))))) {
							{
								{pcons(acc.env); true};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				if ((mmatchString(acc, ">") && P_parse_ws(acc))) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		};
		{pfn1(acc.env, list2array); true};
		discardMCheckpoint(acc)
	}
}

P_parse_toplevels(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		{pushPEnv(acc.env, makeList()); true};
		mparseStar(acc, \ -> {
			{
				pushMCheckpoint(acc);
				if (P_parse_toplevel(acc)) {
					{
						{pcons(acc.env); true};
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		});
		{pfn1(acc.env, list2array); true};
		if (P_parse_optsemi(acc)) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_toplevel(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_native(acc) || (P_parse_union(acc) || (P_parse_global(acc) || P_parse_functionOrStruct(acc)))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_switch(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((mmatchString(acc, "switch") && ((P_parse_kwsep(acc) && ((mmatchString(acc, "(") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, ")") && ((P_parse_ws(acc) && ((mmatchString(acc, "{") && P_parse_ws(acc))))))))))))))))) {
			{
				{pushPEnv(acc.env, makeList()); true};
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if (P_parse_case(acc)) {
					{
						{pcons(acc.env); true};
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					{
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								if (P_parse_case(acc)) {
									{
										{pcons(acc.env); true};
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					{
						{pfn1(acc.env, list2array); true};
						if ((mmatchString(acc, "}") && P_parse_ws(acc))) {
							{
								moconstruct(acc, "PSwitch", 3);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_structargs(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		{pushPEnv(acc.env, makeList()); true};
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if (P_parse_structarg(acc)) {
			{
				{pcons(acc.env); true};
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_structarg(acc))))) {
							{
								{pcons(acc.env); true};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				{pfn1(acc.env, list2array); true};
				pos_39 = acc.i;
				pos_40 = acc.i;
				if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
					true
				} else {
					{acc.i ::= pos_40; false}
				}) {
					true
				} else {
					{acc.i ::= pos_39; false}
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				{pfn1(acc.env, list2array); true};
				discardMCheckpoint(acc)
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_structarg(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (((if (if ((mmatchString(acc, "mutable") && P_parse_kwsep(acc))) {
			{
				pushPEnv(acc.env, true);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushPEnv(acc.env, false);
				discardMCheckpoint(acc)
			}
		}) && ((P_parse_id(acc) && ((mmatchString(acc, ":") && ((P_parse_ws(acc) && P_parse_type(acc))))))))) {
			{
				moconstruct(acc, "PStructArg", 4);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_string(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (mmatchString(acc, "\"")) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					P_parse_onechar_(acc)
				});
				if (mmatchString(acc, "\"")) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && P_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_semi(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if ((mmatchString(acc, ";") && P_parse_ws(acc))) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

P_parse_s(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (P_parse_cs(acc)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					P_parse_cs(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

P_parse_path(acc : MoParseAcc) -> bool {
	{
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (if (P_parse_bid(acc)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					{
						pos_38 = acc.i;
						if ((mmatchString(acc, "/") && P_parse_bid(acc))) {
							true
						} else {
							{acc.i ::= pos_38; false}
						}
					}
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}
	}
}

P_parse_opttype(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((mmatchString(acc, ":") && ((P_parse_ws(acc) && P_parse_type(acc))))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				moconstruct(acc, "PAutoType", 1);
				discardMCheckpoint(acc);
				discardMCheckpoint(acc)
			}
		}
	}
}

P_parse_optsemi(acc : MoParseAcc) -> bool {
	{
		pos_36 = acc.i;
		pos_37 = acc.i;
		if (if ((mmatchString(acc, ";") && P_parse_ws(acc))) {
			true
		} else {
			{acc.i ::= pos_37; false}
		}) {
			true
		} else {
			{acc.i ::= pos_36; false}
		};
		true
	}
}

P_parse_onechar_(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		pushMCheckpointNoStack(acc);
		if (if (P_parse_backslash(acc)) {
			{
				pushMCheckpointNoStack(acc);
				pos_35 = acc.i;
				if (if (if ((mmatchString(acc, "u") && ((P_parse_hexdigit(acc) && ((P_parse_hexdigit(acc) && ((P_parse_hexdigit(acc) && P_parse_hexdigit(acc))))))))) {
					true
				} else {
					{acc.i ::= pos_35; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					{
						pos_34 = acc.i;
						if (if ((mmatchString(acc, "X") && ((P_parse_hexdigit(acc) && ((P_parse_hexdigit(acc) && ((P_parse_hexdigit(acc) && P_parse_hexdigit(acc))))))))) {
							true
						} else {
							{acc.i ::= pos_34; false}
						}) {
							discardMCheckpointNoStack(acc)
						} else {
							{
								pos_33 = acc.i;
								if ((if ((mmatchString(acc, "x") && ((P_parse_hexdigit(acc) && P_parse_hexdigit(acc))))) {
									true
								} else {
									{acc.i ::= pos_33; false}
								}) || P_parse_escapedchar_(acc)) {
									discardMCheckpointNoStack(acc)
								} else {
									restoreMCheckpointNoStack(acc)
								}
							}
						}
					}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pos_30 = acc.i;
				pos_32 = acc.i;
				if (if (if (mmatchString(acc, "\"")) {
					{acc.i ::= pos_32; false}
				} else {
					{
						{acc.i ::= pos_32; false};
						true
					}
				}) {
					{
						pos_31 = acc.i;
						if (((if (P_parse_backslash(acc)) {
							{acc.i ::= pos_31; false}
						} else {
							{
								{acc.i ::= pos_31; false};
								true
							}
						}) && P_parse_anychar(acc))) {
							true
						} else {
							{acc.i ::= pos_30; false}
						}
					}
				} else {
					{acc.i ::= pos_30; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		}
	}
}

P_parse_nativename(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (P_parse_bid(acc)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					{
						pos_29 = acc.i;
						if ((mmatchString(acc, ".") && P_parse_bid(acc))) {
							true
						} else {
							{acc.i ::= pos_29; false}
						}
					}
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

P_parse_native(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((mmatchString(acc, "native") && ((P_parse_s(acc) && ((P_parse_id(acc) && ((mmatchString(acc, ":") && P_parse_ws(acc))))))))) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (((if (if ((mmatchString(acc, "io") && P_parse_ws(acc))) {
					{
						pushPEnv(acc.env, true);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushPEnv(acc.env, false);
						discardMCheckpoint(acc)
					}
				}) && ((P_parse_type(acc) && ((mmatchString(acc, "=") && P_parse_ws(acc))))))) {
					{
						acc.starti ::= acc.i;
						if (((if (P_parse_nativename(acc)) {
							pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
						} else {
							false
						}) && ((P_parse_ws(acc) && P_parse_semi(acc))))) {
							{
								moconstruct(acc, "PNative", 5);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_lid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpointNoStack(acc);
		pushMCheckpointNoStack(acc);
		pos_28 = acc.i;
		if (((if (if (if ((mmatchString(acc, "if") && P_parse_s(acc))) {
			true
		} else {
			{acc.i ::= pos_28; false}
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pos_27 = acc.i;
				if (if ((mmatchString(acc, "switch") && P_parse_s(acc))) {
					true
				} else {
					{acc.i ::= pos_27; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		}) {
			restoreMCheckpointNoStack(acc)
		} else {
			{
				restoreMCheckpointNoStack(acc);
				true
			}
		}) && P_parse_id(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_lastLineComment(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchString(acc, "//")) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					{
						pos_25 = acc.i;
						pos_26 = acc.i;
						if (((if (mmatchString(acc, "\n")) {
							{acc.i ::= pos_26; false}
						} else {
							{
								{acc.i ::= pos_26; false};
								true
							}
						}) && P_parse_anychar(acc))) {
							true
						} else {
							{acc.i ::= pos_25; false}
						}
					}
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

P_parse_lambdatype(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((mmatchString(acc, "(") && P_parse_ws(acc))) {
			{
				{pushPEnv(acc.env, makeList()); true};
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (P_parse_argtype(acc)) {
					{
						{pcons(acc.env); true};
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_argtype(acc))))) {
									{
										{pcons(acc.env); true};
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						pos_23 = acc.i;
						pos_24 = acc.i;
						if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
							true
						} else {
							{acc.i ::= pos_24; false}
						}) {
							true
						} else {
							{acc.i ::= pos_23; false}
						};
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				{pfn1(acc.env, list2array); true};
				if ((mmatchString(acc, ")") && P_parse_ws(acc))) {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (if ((mmatchString(acc, "->") && ((P_parse_ws(acc) && P_parse_type(acc))))) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								pushPEnv(acc.env, acc.i);
								moconstruct(acc, "PAutoType", 1);
								discardMCheckpoint(acc);
								discardMCheckpoint(acc)
							}
						}) {
							{
								moconstruct(acc, "PFnType", 3);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_lambdaarg(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((P_parse_id(acc) && P_parse_opttype(acc))) {
			{
				moconstruct(acc, "PIdType", 3);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_kwsep(acc : MoParseAcc) -> bool {
	{
		pos_21 = acc.i;
		pos_22 = acc.i;
		if (((if (P_parse_alnum(acc)) {
			{acc.i ::= pos_22; false}
		} else {
			{
				{acc.i ::= pos_22; false};
				true
			}
		}) && P_parse_ws(acc))) {
			true
		} else {
			{acc.i ::= pos_21; false}
		}
	}
}

P_parse_int(acc : MoParseAcc) -> bool {
	if (mmatchRange(acc, 48, 57)) {
		{
			mparseStarNobacktrackOrStack(acc, \ -> {
				mmatchRange(acc, 48, 57)
			});
			true
		}
	} else {
		false
	}
}

P_parse_import(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((mmatchString(acc, "import") && ((P_parse_s(acc) && ((P_parse_path(acc) && ((P_parse_ws(acc) && P_parse_semi(acc))))))))) {
			{
				moconstruct(acc, "PImport", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_id(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		if (((if (P_parse_bid(acc)) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && P_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_hexdigit(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 48, 57) || (mmatchRange(acc, 97, 102) || mmatchRange(acc, 65, 70))
}

P_parse_global(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((P_parse_id(acc) && ((P_parse_opttype(acc) && ((mmatchString(acc, "=") && P_parse_ws(acc))))))) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if ((P_parse_brace(acc) && P_parse_optsemi(acc))) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((P_parse_exp(acc) && P_parse_semi(acc))) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				}) {
					{
						moconstruct(acc, "PGlobal", 4);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_functionOrStruct(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if (P_parse_uid(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if ((mmatchString(acc, "(") && ((P_parse_ws(acc) && ((P_parse_structargs(acc) && ((mmatchString(acc, ")") && ((P_parse_ws(acc) && P_parse_semi(acc))))))))))) {
					{
						moconstruct(acc, "PStructDef", 3);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, ":") && ((P_parse_ws(acc) && ((mmatchString(acc, "(") && ((P_parse_ws(acc) && ((P_parse_structargs(acc) && ((mmatchString(acc, ")") && ((P_parse_ws(acc) && P_parse_semi(acc))))))))))))))) {
							{
								moconstruct(acc, "PStructDef", 3);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if (P_parse_id(acc)) {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (if (P_parse_lambdatype(acc)) {
							{
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (if (if (if (if ((P_parse_brace(acc) && P_parse_optsemi(acc))) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((P_parse_exp(acc) && P_parse_semi(acc))) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}
									}
								}) {
									{
										moconstruct(acc, "PFnDef", 4);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if (P_parse_semi(acc)) {
											{
												moconstruct(acc, "PTypeDef", 3);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}
									}
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, ":") && ((P_parse_ws(acc) && ((P_parse_type(acc) && P_parse_semi(acc))))))) {
									{
										moconstruct(acc, "PTypeDef", 3);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_forbid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((mmatchString(acc, "forbid") && ((P_parse_s(acc) && ((P_parse_path(acc) && ((P_parse_ws(acc) && P_parse_semi(acc))))))))) {
			{
				moconstruct(acc, "PForbid", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_flow(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		mmatchString(acc, "\\uFEFF");
		if (P_parse_ws(acc)) {
			{
				{pushPEnv(acc.env, makeList()); true};
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if (P_parse_import(acc)) {
							{
								{pcons(acc.env); true};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				{pfn1(acc.env, list2array); true};
				{pushPEnv(acc.env, makeList()); true};
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if (P_parse_forbid(acc)) {
							{
								{pcons(acc.env); true};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				{pfn1(acc.env, list2array); true};
				{pushPEnv(acc.env, makeList()); true};
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (P_parse_export(acc)) {
					{
						{pcons(acc.env); true};
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				{pfn1(acc.env, list2array); true};
				if (P_parse_toplevels(acc)) {
					{
						moconstruct(acc, "PModule", 4);
						pos_19 = acc.i;
						if (P_parse_lastLineComment(acc)) {
							true
						} else {
							{acc.i ::= pos_19; false}
						};
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_fieldassign(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((P_parse_id(acc) && ((mmatchString(acc, "=") && ((P_parse_ws(acc) && P_parse_exp(acc))))))) {
			{
				moconstruct(acc, "PFieldAssign", 3);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_expsemi(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		{pushPEnv(acc.env, makeList()); true};
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if (P_parse_exp(acc)) {
			{
				{pcons(acc.env); true};
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if ((P_parse_optsemi(acc) && P_parse_exp(acc))) {
							{
								{pcons(acc.env); true};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				{pfn1(acc.env, list2array); true};
				if (P_parse_optsemi(acc)) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				{pfn1(acc.env, list2array); true};
				discardMCheckpoint(acc)
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_export(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((mmatchString(acc, "export") && ((P_parse_ws(acc) && ((mmatchString(acc, "{") && ((P_parse_ws(acc) && ((P_parse_toplevels(acc) && ((mmatchString(acc, "}") && P_parse_ws(acc))))))))))))) {
			{
				moconstruct(acc, "PExport", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp9(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp10(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushPEnv(acc.env, acc.i);
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (if ((mmatchString(acc, "*") && ((P_parse_ws(acc) && P_parse_exp10(acc))))) {
							{
								moconstruct(acc, "PMul", 0);
								moconstruct(acc, "PBinOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "/") && ((P_parse_ws(acc) && P_parse_exp10(acc))))) {
									{
										moconstruct(acc, "PDiv", 0);
										moconstruct(acc, "PBinOp", 4);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, "%") && ((P_parse_ws(acc) && P_parse_exp10(acc))))) {
											{
												moconstruct(acc, "PMod", 0);
												moconstruct(acc, "PBinOp", 4);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}
									}
								}
							}
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp8(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp9(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushPEnv(acc.env, acc.i);
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (if ((mmatchString(acc, "+") && ((P_parse_ws(acc) && P_parse_exp9(acc))))) {
							{
								moconstruct(acc, "PAdd", 0);
								moconstruct(acc, "PBinOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "-") && ((P_parse_ws(acc) && P_parse_exp9(acc))))) {
									{
										moconstruct(acc, "PSub", 0);
										moconstruct(acc, "PBinOp", 4);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp7(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp8(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if (if ((mmatchString(acc, "<=") && ((P_parse_ws(acc) && P_parse_exp8(acc))))) {
					{
						moconstruct(acc, "PLessEqual", 0);
						moconstruct(acc, "PBinOp", 4);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "<") && ((P_parse_ws(acc) && P_parse_exp8(acc))))) {
							{
								moconstruct(acc, "PLess", 0);
								moconstruct(acc, "PBinOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, ">=") && ((P_parse_ws(acc) && P_parse_exp8(acc))))) {
									{
										moconstruct(acc, "PGreaterEqual", 0);
										moconstruct(acc, "PBinOp", 4);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, ">") && ((P_parse_ws(acc) && P_parse_exp8(acc))))) {
											{
												moconstruct(acc, "PGreater", 0);
												moconstruct(acc, "PBinOp", 4);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}
									}
								}
							}
						}
					}
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp6(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp7(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if (if ((mmatchString(acc, "==") && ((P_parse_ws(acc) && P_parse_exp7(acc))))) {
					{
						moconstruct(acc, "PEqual", 0);
						moconstruct(acc, "PBinOp", 4);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "!=") && ((P_parse_ws(acc) && P_parse_exp7(acc))))) {
							{
								moconstruct(acc, "PNotEqual", 0);
								moconstruct(acc, "PBinOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp5(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp6(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushPEnv(acc.env, acc.i);
						if ((mmatchString(acc, "&&") && ((P_parse_ws(acc) && P_parse_exp6(acc))))) {
							{
								moconstruct(acc, "PAnd", 0);
								moconstruct(acc, "PBinOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp4(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp5(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushPEnv(acc.env, acc.i);
						if ((mmatchString(acc, "||") && ((P_parse_ws(acc) && P_parse_exp5(acc))))) {
							{
								moconstruct(acc, "POr", 0);
								moconstruct(acc, "PBinOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp3(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp4(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushPEnv(acc.env, acc.i);
						acc.starti ::= acc.i;
						if (((if (mmatchString(acc, "+=") || (mmatchString(acc, "-=") || (mmatchString(acc, "*=") || (mmatchString(acc, "/=") || mmatchString(acc, "%="))))) {
							pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
						} else {
							false
						}) && ((P_parse_ws(acc) && P_parse_exp4(acc))))) {
							{
								moconstruct(acc, "PAssignOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp2(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp3(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushPEnv(acc.env, acc.i);
						if ((mmatchString(acc, "|>") && ((P_parse_ws(acc) && P_parse_exp3(acc))))) {
							{
								moconstruct(acc, "PPipe", 0);
								moconstruct(acc, "PBinOp", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp15(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((mmatchString(acc, "ref") && P_parse_kwsep(acc))) {
			{
				pushPEnv(acc.env, acc.i);
				moconstruct(acc, "PRef", 1);
				if (P_parse_exp(acc)) {
					{
						{pswap(acc.env); true};
						moconstruct(acc, "PUnOp", 2);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				if (if ((mmatchString(acc, "if") && ((P_parse_kwsep(acc) && ((mmatchString(acc, "(") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, ")") && ((P_parse_ws(acc) && P_parse_exp(acc))))))))))))))) {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (if ((mmatchString(acc, "else") && ((P_parse_ws(acc) && P_parse_exp(acc))))) {
							{
								moconstruct(acc, "PIfElse", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								pushPEnv(acc.env, acc.i);
								moconstruct(acc, "PVoid", 1);
								moconstruct(acc, "PIfElse", 4);
								discardMCheckpoint(acc);
								discardMCheckpoint(acc)
							}
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "(") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, ")") && P_parse_ws(acc))))))))) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "cast") && ((P_parse_kwsep(acc) && ((mmatchString(acc, "(") && ((P_parse_ws(acc) && P_parse_exp(acc))))))))) {
									{
										pushPEnv(acc.env, acc.i);
										if ((mmatchString(acc, "->") && ((P_parse_ws(acc) && P_parse_type(acc))))) {
											{
												moconstruct(acc, "PCast", 2);
												if ((mmatchString(acc, ")") && P_parse_ws(acc))) {
													{
														moconstruct(acc, "PUnOp", 2);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, "while") && P_parse_kwsep(acc))) {
											{
												pushPEnv(acc.env, acc.i);
												if ((mmatchString(acc, "(") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, ")") && ((P_parse_ws(acc) && P_parse_exp(acc))))))))))) {
													{
														moconstruct(acc, "PWhile", 3);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "for") && P_parse_kwsep(acc))) {
													{
														pushPEnv(acc.env, acc.i);
														if ((mmatchString(acc, "(") && ((P_parse_ws(acc) && ((P_parse_id(acc) && ((P_parse_opttype(acc) && ((mmatchString(acc, "=") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, ";") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, ";") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, ")") && ((P_parse_ws(acc) && P_parse_exp(acc))))))))))))))))))))))))))))))) {
															{
																moconstruct(acc, "PFor", 7);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if ((mmatchString(acc, "return") && P_parse_kwsep(acc))) {
															{
																pushPEnv(acc.env, acc.i);
																{pushPEnv(acc.env, makeList()); true};
																pushMCheckpoint(acc);
																pushMCheckpoint(acc);
																if (if (P_parse_exp(acc)) {
																	{
																		{pcons(acc.env); true};
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	restoreMCheckpoint(acc)
																};
																{pfn1(acc.env, list2array); true};
																moconstruct(acc, "PReturn", 2);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															if (P_parse_switch(acc)) {
																discardMCheckpoint(acc)
															} else {
																{
																	pushMCheckpoint(acc);
																	pushPEnv(acc.env, acc.i);
																	if ((if ((mmatchString(acc, "[") && P_parse_ws(acc))) {
																		{
																			{pushPEnv(acc.env, makeList()); true};
																			pushMCheckpoint(acc);
																			pushMCheckpoint(acc);
																			if (if (P_parse_exp(acc)) {
																				{
																					{pcons(acc.env); true};
																					mparseStar(acc, \ -> {
																						{
																							pushMCheckpoint(acc);
																							if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_exp(acc))))) {
																								{
																									{pcons(acc.env); true};
																									discardMCheckpoint(acc)
																								}
																							} else {
																								restoreMCheckpoint(acc)
																							}
																						}
																					});
																					pos_17 = acc.i;
																					pos_18 = acc.i;
																					if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
																						true
																					} else {
																						{acc.i ::= pos_18; false}
																					}) {
																						true
																					} else {
																						{acc.i ::= pos_17; false}
																					};
																					discardMCheckpoint(acc)
																				}
																			} else {
																				restoreMCheckpoint(acc)
																			}) {
																				discardMCheckpoint(acc)
																			} else {
																				restoreMCheckpoint(acc)
																			};
																			{pfn1(acc.env, list2array); true};
																			if ((mmatchString(acc, "]") && P_parse_ws(acc))) {
																				{
																					moconstruct(acc, "PArray", 2);
																					discardMCheckpoint(acc)
																				}
																			} else {
																				restoreMCheckpoint(acc)
																			}
																		}
																	} else {
																		restoreMCheckpoint(acc)
																	}) || P_parse_value(acc)) {
																		discardMCheckpoint(acc)
																	} else {
																		{
																			pushMCheckpoint(acc);
																			pushPEnv(acc.env, acc.i);
																			if ((if (P_parse_lid(acc)) {
																				{
																					moconstruct(acc, "PVar", 2);
																					discardMCheckpoint(acc)
																				}
																			} else {
																				restoreMCheckpoint(acc)
																			}) || P_parse_brace(acc)) {
																				discardMCheckpoint(acc)
																			} else {
																				{
																					pushMCheckpoint(acc);
																					if (if ((mmatchString(acc, "@") && ((P_parse_ws(acc) && P_parse_id(acc))))) {
																						discardMCheckpoint(acc)
																					} else {
																						restoreMCheckpoint(acc)
																					}) {
																						discardMCheckpoint(acc)
																					} else {
																						restoreMCheckpoint(acc)
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

P_parse_exp14(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (mmatchString(acc, "^")) {
			{
				pushPEnv(acc.env, acc.i);
				moconstruct(acc, "PDeref", 1);
				if ((P_parse_ws(acc) && P_parse_exp15(acc))) {
					{
						{pswap(acc.env); true};
						moconstruct(acc, "PUnOp", 2);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			if (P_parse_exp15(acc)) {
				discardMCheckpoint(acc)
			} else {
				restoreMCheckpoint(acc)
			}
		}
	}
}

P_parse_exp13(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if (if (mmatchString(acc, "!")) {
			{
				moconstruct(acc, "PNot", 1);
				if ((P_parse_ws(acc) && P_parse_exp13(acc))) {
					{
						{pswap(acc.env); true};
						moconstruct(acc, "PUnOp", 2);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if (mmatchString(acc, "-")) {
					{
						moconstruct(acc, "PNegative", 1);
						if ((P_parse_ws(acc) && P_parse_exp13(acc))) {
							{
								{pswap(acc.env); true};
								moconstruct(acc, "PUnOp", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if (P_parse_exp14(acc)) {
					{
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								pushPEnv(acc.env, acc.i);
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (if (if ((mmatchString(acc, "(") && P_parse_ws(acc))) {
									{
										{pushPEnv(acc.env, makeList()); true};
										pushMCheckpoint(acc);
										pushMCheckpoint(acc);
										if (if (P_parse_exp(acc)) {
											{
												{pcons(acc.env); true};
												mparseStar(acc, \ -> {
													{
														pushMCheckpoint(acc);
														if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_exp(acc))))) {
															{
																{pcons(acc.env); true};
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}
													}
												});
												pos_15 = acc.i;
												pos_16 = acc.i;
												if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
													true
												} else {
													{acc.i ::= pos_16; false}
												}) {
													true
												} else {
													{acc.i ::= pos_15; false}
												};
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										};
										{pfn1(acc.env, list2array); true};
										if ((mmatchString(acc, ")") && P_parse_ws(acc))) {
											{
												moconstruct(acc, "PCall", 3);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, ".") && ((P_parse_ws(acc) && P_parse_id(acc))))) {
											{
												pushMCheckpoint(acc);
												pushMCheckpoint(acc);
												moconstruct(acc, "PMutableAssign", 1);
												if (if (if ((mmatchString(acc, "::=") && ((P_parse_ws(acc) && P_parse_exp(acc))))) {
													{
														{pswap(acc.env); true};
														moconstruct(acc, "PBinOp", 4);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														moconstruct(acc, "PDot", 2);
														moconstruct(acc, "PUnOp", 2);
														discardMCheckpoint(acc);
														discardMCheckpoint(acc)
													}
												}) {
													discardMCheckpoint(acc)
												} else {
													restoreMCheckpoint(acc)
												}
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "[") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((mmatchString(acc, "]") && P_parse_ws(acc))))))))) {
													{
														moconstruct(acc, "PIndex", 0);
														moconstruct(acc, "PBinOp", 4);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													restoreMCheckpoint(acc)
												}
											}
										}
									}
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}
	}
}

P_parse_exp12(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp13(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				if (if ((mmatchString(acc, "with") && P_parse_s(acc))) {
					{
						{pushPEnv(acc.env, makeList()); true};
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (P_parse_fieldassign(acc)) {
							{
								{pcons(acc.env); true};
								mparseStar(acc, \ -> {
									{
										pushMCheckpoint(acc);
										if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_fieldassign(acc))))) {
											{
												{pcons(acc.env); true};
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								});
								pos_13 = acc.i;
								pos_14 = acc.i;
								if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
									true
								} else {
									{acc.i ::= pos_14; false}
								}) {
									true
								} else {
									{acc.i ::= pos_13; false}
								};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						};
						{pfn1(acc.env, list2array); true};
						moconstruct(acc, "PWith", 3);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp11(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp12(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				if (if ((mmatchString(acc, "??") && ((P_parse_ws(acc) && ((P_parse_exp12(acc) && ((mmatchString(acc, ":") && ((P_parse_ws(acc) && P_parse_exp12(acc))))))))))) {
					{
						moconstruct(acc, "PMaybe", 4);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp10(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp11(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				if (if ((mmatchString(acc, ":") && ((P_parse_ws(acc) && P_parse_type(acc))))) {
					{
						moconstruct(acc, "PIsSubType", 2);
						moconstruct(acc, "PUnOp", 2);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp1(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (P_parse_exp2(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				if (if ((mmatchString(acc, ":=") && ((P_parse_ws(acc) && P_parse_exp2(acc))))) {
					{
						moconstruct(acc, "PAssign", 0);
						moconstruct(acc, "PBinOp", 4);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_exp(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((P_parse_lid(acc) && P_parse_opttype(acc))) {
			{
				pushPEnv(acc.env, acc.i);
				if ((mmatchString(acc, "=") && ((P_parse_ws(acc) && ((P_parse_exp(acc) && ((P_parse_optsemi(acc) && P_parse_expsemi(acc))))))))) {
					{
						moconstruct(acc, "PLet", 5);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			if (P_parse_exp1(acc)) {
				discardMCheckpoint(acc)
			} else {
				restoreMCheckpoint(acc)
			}
		}
	}
}

P_parse_escapedchar_(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (P_parse_backslash(acc) || (mmatchString(acc, "\"") || (mmatchString(acc, "n") || (mmatchString(acc, "t") || mmatchString(acc, "r"))))) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

P_parse_double(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		pos_11 = acc.i;
		if (if ((P_parse_int(acc) && mmatchString(acc, "."))) {
			{
				pos_12 = acc.i;
				if (P_parse_int(acc)) {
					true
				} else {
					{acc.i ::= pos_12; false}
				};
				true
			}
		} else {
			{acc.i ::= pos_11; false}
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pos_10 = acc.i;
				if (if ((mmatchString(acc, ".") && P_parse_int(acc))) {
					true
				} else {
					{acc.i ::= pos_10; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		}
	}
}

P_parse_cs(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchString(acc, " ") || (mmatchString(acc, "\t") || mmatchString(acc, "\n"))) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pushMCheckpointNoStack(acc);
				if (if (mmatchString(acc, "//")) {
					{
						mparseStarBacktrackOnly(acc, \ -> {
							{
								pos_8 = acc.i;
								pos_9 = acc.i;
								if (((if (mmatchString(acc, "\n")) {
									{acc.i ::= pos_9; false}
								} else {
									{
										{acc.i ::= pos_9; false};
										true
									}
								}) && P_parse_anychar(acc))) {
									true
								} else {
									{acc.i ::= pos_8; false}
								}
							}
						});
						if (mmatchString(acc, "\n")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				} else {
					restoreMCheckpointNoStack(acc)
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					{
						pushMCheckpointNoStack(acc);
						if ((if (mmatchString(acc, "/*")) {
							{
								mparseStarBacktrackOnly(acc, \ -> {
									{
										pos_6 = acc.i;
										pos_7 = acc.i;
										if (((if (mmatchString(acc, "*/")) {
											{acc.i ::= pos_7; false}
										} else {
											{
												{acc.i ::= pos_7; false};
												true
											}
										}) && P_parse_anychar(acc))) {
											true
										} else {
											{acc.i ::= pos_6; false}
										}
									}
								});
								if (mmatchString(acc, "*/")) {
									discardMCheckpointNoStack(acc)
								} else {
									restoreMCheckpointNoStack(acc)
								}
							}
						} else {
							restoreMCheckpointNoStack(acc)
						}) || mmatchString(acc, "\u000d")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				}
			}
		}
	}
}

P_parse_case(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if ((mmatchString(acc, "default") && ((P_parse_kwsep(acc) && ((mmatchString(acc, ":") && ((P_parse_ws(acc) && P_parse_exp(acc))))))))) {
			{
				pos_4 = acc.i;
				pos_5 = acc.i;
				if (if ((mmatchString(acc, ";") && P_parse_ws(acc))) {
					true
				} else {
					{acc.i ::= pos_5; false}
				}) {
					true
				} else {
					{acc.i ::= pos_4; false}
				};
				moconstruct(acc, "PDefaultCase", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if ((P_parse_uid(acc) && ((mmatchString(acc, "(") && P_parse_ws(acc))))) {
					{
						{pushPEnv(acc.env, makeList()); true};
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (P_parse_id(acc)) {
							{
								{pcons(acc.env); true};
								mparseStar(acc, \ -> {
									{
										pushMCheckpoint(acc);
										if ((mmatchString(acc, ",") && ((P_parse_ws(acc) && P_parse_id(acc))))) {
											{
												{pcons(acc.env); true};
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								});
								pos_2 = acc.i;
								pos_3 = acc.i;
								if (if ((mmatchString(acc, ",") && P_parse_ws(acc))) {
									true
								} else {
									{acc.i ::= pos_3; false}
								}) {
									true
								} else {
									{acc.i ::= pos_2; false}
								};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						};
						{pfn1(acc.env, list2array); true};
						if ((mmatchString(acc, ")") && ((P_parse_ws(acc) && ((mmatchString(acc, ":") && ((P_parse_ws(acc) && P_parse_exp(acc))))))))) {
							{
								pos_0 = acc.i;
								pos_1 = acc.i;
								if (if ((mmatchString(acc, ";") && P_parse_ws(acc))) {
									true
								} else {
									{acc.i ::= pos_1; false}
								}) {
									true
								} else {
									{acc.i ::= pos_0; false}
								};
								moconstruct(acc, "PStructCase", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_brace(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushPEnv(acc.env, acc.i);
		if ((mmatchString(acc, "{") && ((P_parse_ws(acc) && ((P_parse_expsemi(acc) && ((mmatchString(acc, "}") && P_parse_ws(acc))))))))) {
			{
				moconstruct(acc, "PSequence", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

P_parse_bid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchRange(acc, 97, 122) || (mmatchRange(acc, 65, 90) || mmatchString(acc, "_"))) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					P_parse_alnum(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

P_parse_backslash(acc : MoParseAcc) -> bool {
	mmatchString(acc, "\\")
}

P_parse_argtype(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (P_parse_type(acc)) {
			{
				moconstruct(acc, "PTypeOnly", 1);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				pushPEnv(acc.env, acc.i);
				if (if ((P_parse_id(acc) && P_parse_opttype(acc))) {
					{
						moconstruct(acc, "PIdType", 3);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}
	}
}

P_parse_anychar(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 0, 65535)
}

P_parse_alnum(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 97, 122) || (mmatchRange(acc, 65, 90) || (mmatchString(acc, "_") || mmatchRange(acc, 48, 57)))
}

P_parse_flow_compiled(acc : MoParseAcc) -> bool {
	P_parse_flow(acc)
}


































































