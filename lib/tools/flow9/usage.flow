import tools/common/compilerconfig;
import tools/flowc/flowc_println;

export {
	printFlow9Usage(config : CompilerConfig) -> void;
}

printFlow9Usage(config) {
	help = isConfigParameterTrue(config.config, "help");
	prih = \i, st -> {
		if (i) fcPrintln(st, config.threadId);
	};
	pri = \st -> fcPrintln(st, config.threadId);
	pri("Usage:");
	pri("  flow9 <file> [I=library,paths] [other=params]");
	pri("");
	pri("Options:");
	pri("      js=<file.js>              Generate JavaScript output");
	prih(help,"        jscode=1                Do not remove generated files");
	prih(help,"        jsmodules=<dir>         Generate ES6 modules");
	prih(help,"                                  Folder <dir> will be created and modules will be placed there");
	prih(help,"        jscomments=1            Copy comments from Flow modules to JS modules");
	prih(help,"        nodejs=1                Generate Node.js-ready code.");
	prih(help,"        nwjs=1                  Generate NWJS.io-ready code.");
	prih(help,"        jsbeautify=1            Run js-beautify utility for generated JS file");
	prih(help,"                                  (install with 'npm -g install js-beautify')");
	prih(help,"        jslibrary=name,name,... Same as: js-call-main=0 dce-preserved-names=name,name,... dce-remove-main=1");
	prih(help,"          html-stub=name        Generate html stub file, which makes debug call to 'name()'");
	prih(help,"          jslibraryobject=name  Make an object with all exported names");
	prih(help,"        js-extern-lib=<file>    Attach the external JS file, containing natives.");
	prih(help,"        js-extern-natives=<names> List of native in the external JS file");
	prih(help,"        js-call-main=1          Generate call to 'main' function in JS file");
	prih(help,"        js-report-sizes=1       Dump sizes of resulting output for each flow file in JS (bytes)");
	prih(help,"        js-no-otc=1             Optimize tail call recursion with iteration (default) or trampoline");
	prih(help,"        js-source-map=1         Generate js source map");
	prih(help,"                                  (install with 'npm i source-map' in flow9 folder)");
	prih(help,"        use-haxe-runtime=1      Use Javascript runtime, generated with Haxe");
	prih(help,"        fontconfig=<file>       Font configuration file. Default is 'resources/fontconfig.json'");
	prih(help,"        specialize=1            Specialize polymorphism in the JS output");
	pri("      es6=<file.js>             Generate JavaScript ES6 output");
	pri("      bytecode=<file.bytecode>  Generate bytecode output");
	prih(help,"         upload=1               Upload bytecode file to the server");
	prih(help,"      ml=<filename>             Generate OCaml output");
	pri("      java=<dirname>            Generate Java output in the specified directory");
	pri("      jar=<filename>            Generate Java jar file. If <filename> == 1, the input file name will be used");
	prih(help,"      java-package=<name>       Specify the java package for the project. By default it is converted from flow module path");
	prih(help,"      java-main=<name>          Specify the java main class for the project. By default it is a name of a programm");
	prih(help,"      java-library=id1,id2,...  Build a java library with id1, id2, ... interface");
	prih(help,"      java-builder=<builder>    Use a specified build system. Now available: gradle or none. Default is none (use internal low-level builder).");
	prih(help,"      java-incremental=1        Do not re-generate modules, which were not changed.");
	prih(help,"      java-dependencies=<dep1,dep2,...>  External java libraries, used by java natives.");
	prih(help,"      java-natives=<lib1,lib2,...>       External java native hosts sources.");
	prih(help,"      java-builder-xmx=<mem>    -Xmx property for JVM which runs a java builder.");
	prih(help,"      java-version=<version>    During building a jar file check that a particular version of java is used. Example: 11 or 11.0 or 14.0.2");
	prih(help,"      java-timephases=1         Show timings of building java target: translation time and build time");
	pri("      cpp=<file>                Generate C++ output");
	prih(help,"      cpp-gui=1                 Use GUI variant of QtByteRunner runtime (by default is off).");
	prih(help,"      cpp-debug=1               Build a debug executable - with no optimizations and debug info.");
	prih(help,"      cpp-gprof=1               Build with `-pg` compiler/linker options.");
	prih(help,"      cpp-optimize=<level>      Use a <level> optimization (0, 1, 2, 3) when compiling with a c++ compiler.");
 	prih(help,"      cpp-build=0               Generate a c++ output files but do not build them instantly.");
	prih(help,"      cpp-build-jobs=<n>        Use <n> parallel jobs when building an executable with c++ compiler.");
	prih(help,"      cpp-compiler=<compiler>   Use a particular compiler instead of a default one.");
	prih(help,"      cpp-max-source=<size>     Cut c++ source, exceeding a size threshold into parts. Used in case of memory deficiency during compilation. Default value is 100 000 bytes");
	prih(help,"      cpp-qt-opts=<opts;..>     A list of Qt options, separated by ';'. By default is empty.");
	prih(help,"      cpp-natives=<dirs,..>     A CSV list of directories, where a compiler will look for native function definitions.");
	prih(help,"      cpp-stub-missing-natives=1  Make stubs for non-implemented natives. When called, these stubs cause crash.");
	prih(help,"      cpp2=<file>               Generate C++ output, uses QtByteRunner runtime.");
	prih(help,"      cpp3=<file>               Another C++ backend. With file=1 (i.e. cpp3=1) the name of a flow file is used.");
	prih(help,"      nim=<file>|nim=1          Generate nim output. nim=1 generates an executable with the name of a flowfile");
	prih(help,"      nim-debug=1               Generate nim with debug info. By default the release version is build.");
	prih(help,"      nim-release=0             Disable optimization. Optimization is automatically disabled with 'nim-debug=1' and is off by default.");
	prih(help,"      nim-profile=1             Build with profiling information.");
	prih(help,"      nim-utf8=1                Use utf8 strings internally. By default the utf16 strings are used.");
	prih(help,"      nim-opts=....             Pass any user CSV options to nim compiler. I.e. 'nim-opts=--mm:orc,--index:on'");
	prih(help,"      nim-mono=1                Make a monolithic one file nim source");
	prih(help,"      nim-cleanup=1             Delete intermediate files. By default is 1");
	prih(help,"      nim-build=0               Just generate nim sources and do not compile them");
	pri("");
	prih(help,"      check-syntax=1            Do not type check or compile, only parse");
	prih(help,"      incremental=1             Do incremental compilation, default is '1'");
	prih(help,"      update-incremental=1      Ignore existing incremental files, but save new ones");
	prih(help,"      debug-incremental=1       Print module interface details when loading incremental files");
	pri("      debug=1                   Generate debug info or debug version of generated files");
	pri("      verbose=<N>               Verbosity level (N=1..3)");
	prih(help,"      timephases=1              Profile the time spent in each phase");
	prih(help,"      threads=<n>               Number of threads to use");
	pri("");
	prih(!help,"Full options list:");
	prih(!help,"  flow9 help=1");
}