import ds/tree;
import ds/intmap;
import tools/flow9/type/egraph/egraph;
import tools/flow9/type/module_types;

export {
	HTypeEnv(
		// Names, types and schemas of all the bindings
		interface : HModuleInterface,
		// The egraph for type resolution
		egraph : EGraph,
		// Store the types by info here
		info2types : IntMap<int>,
		// Given an info, and a message, report an error
		onError : (int, string) -> void,
	);

	// What bindings do each type var get?
	HTypeSubst(subst : Tree<string, HType>);

	// When we infer a new type, what does the parent expect if anything?
	HTypeExpect ::= HTypeNone, HTypeExpectUnify;
		HTypeNone();
		// The context will help make better error messages
		HTypeExpectUnify(context : string, mode : HUnification, right : int);

	HTypeExpectSubtype(context : string, eclass : int) {
		HTypeExpectUnify(context, HSubtype(), eclass)
	}

	HUnification ::= HSubtype, HLubtype, HExactType;
		HSubtype();
		HLubtype();
		HExactType();
}
