import tools/flow9/type/types;

export {
	// Set up an env for the builtin operators
	makeBuiltinTypeEnv() -> Tree<string, HTypeSchema>;
}

makeBuiltinTypeEnv() -> Tree<string, HTypeSchema> {
    // Helper for numeric binary operators (int/double -> int/double -> int/double)
    numericBinOp = \types : [string] -> {
		// Forall α, (α={types}, α) -> α
		HTypeAlternatives(map(types, \t -> {
			alt = HTypeCons(t, []);
			HTypeFn([alt, alt], alt)
		}));
	}

    // Helper for comparison operators (α -> α -> bool)
    comparisonOp = \op -> 
        HTypeForAll(["α"], 
            HTypeFn([HTypeVar("α"), HTypeVar("α")], HTypeCons("bool", []))
        );

    // Helper for logical operators (bool -> bool -> bool)
    logicalOp = \op -> 
        HTypeFn([HTypeCons("bool", []), HTypeCons("bool", [])], HTypeCons("bool", []));

    pairs2tree([
        // Arithmetic
        Pair("+", numericBinOp(["int", "double", "string"])),
        Pair("-", numericBinOp(["int", "double"])),
        Pair("*", numericBinOp(["int", "double"])),
        Pair("/", numericBinOp(["int", "double"])),
        Pair("%", numericBinOp(["int", "double"])),

        Pair("--", // Unary minus
			HTypeAlternatives([
				HTypeFn([HTypeCons("int", [])], HTypeCons("int", [])),
				HTypeFn([HTypeCons("double", [])], HTypeCons("double", []))
			])
        ),

        // Comparisons
        Pair("==", comparisonOp("==")),
        Pair("!=", comparisonOp("!=")),
        Pair("<", comparisonOp("<")),
        Pair("<=", comparisonOp("<=")),
        Pair(">", comparisonOp(">")),
        Pair(">=", comparisonOp(">=")),

        // Logical
        Pair("&&", logicalOp("&&")),
        Pair("||", logicalOp("||")),
        Pair("!", 
            HTypeFn([HTypeCons("bool", [])], HTypeCons("bool", []))
        ),

        // References
        Pair("ref^",
            HTypeForAll(["α"], 
                HTypeFn([HTypeVar("α")], HTypeCons("ref", [HTypeVar("α")]))
            )
        ),
        Pair("^",
            HTypeForAll(["α"], 
                HTypeFn([HTypeCons("ref", [HTypeVar("α")])], HTypeVar("α"))
            )
        ),
        // Array indexing
        Pair("[]",
            HTypeForAll(["α"], 
                HTypeFn([HTypeCons("array", [HTypeVar("α")]), HTypeCons("int", [])], HTypeVar("α"))
            )
        ),

		// Builtin casts
		Pair("__cast__i2s", HTypeFn([HTypeCons("int", [])], HTypeCons("string", []))),
		Pair("__cast__i2d", HTypeFn([HTypeCons("int", [])], HTypeCons("double", []))),
		Pair("__cast__d2s", HTypeFn([HTypeCons("double", [])], HTypeCons("string", []))),
		Pair("__cast__trunc", HTypeFn([HTypeCons("double", [])], HTypeCons("int", []))),
	]);
}