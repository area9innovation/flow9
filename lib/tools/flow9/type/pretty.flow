import tools/flow9/type/types;
import text/blueprint;
import ds/treeutils;

export {
	prettyHType(t : HType) -> string;

	prettyHTypeSchema(s : HTypeSchema) -> string;
	prettyHModuleInterface(interface : HModuleInterface) -> string;

	prettyHStruct(s : HStruct, full : bool) -> string;
	prettyHUnion(u : HUnion, full : bool) -> string;

	isKnownBasicType(name : string) -> bool;
}

prettyHType(t : HType) -> string {
	switch (t) {
		HTypeCons(name, args): {
			if (name == "array") {
				"[" + prettyHType(args[0]) + "]"
			} else if (name == "ref") {
				"ref " + prettyHType(args[0])
			} else {
				name + (if (args == []) "" else "<" + superglue(args, prettyHType, ", ") + ">")
			}
		}
		HTypeFn(from, to): {
			"(" + superglue(from, prettyHType, ", ") + ") -> " + prettyHType(to)
		}
		HTypeVar(tyvar): tyvar;
	}
}

prettyHTypeSchema(s : HTypeSchema) -> string {
	switch (s) {
		HTypeForAll(vars, type): {
			"forall " + superglue(vars, \v -> v, ", ") + ". " + prettyHType(type);
		}
		HTypeAlternatives(types): {
			"alternatives {" + superglue(types, prettyHTypeSchema, ",  ") + "}";
		}
		HType(): {
			prettyHType(s);
		}
	}
}

prettyHModuleInterface(interface : HModuleInterface) -> string {
	"{" + prettyTree(interface.env, \k, v -> k + " : " + prettyHTypeSchema(v), ",\n") + "}"
}

prettyHStruct(s : HStruct, full : bool) -> string {
	s.name + "(" + ellipsis(superglue(s.fields, \f -> f.field + " : " + prettyHType(f.type), ", "), if (full) intMax else 40) + ")";
}

prettyHUnion(u : HUnion, full : bool) -> string {
	u.name + (if (u.typars != []) "<" + superglue(u.typars, \t -> t, ", ") + ">" else "") + " ::= " + ellipsis(superglue(u.types, prettyHType, ", "), if (full) intMax else 140)
}

isKnownBasicType(name : string) -> bool {
	contains(["void", "bool", "int", "double", "string", "flow", "ref", "array", "auto", "native"], name);
}
