import tools/flow9/desugar/dependencies;
import ds/simplegraph;

export {
	// Find a topological order for type inference
	getTopLevelInferenceOrder(d : DModule) -> [string];
}

buildTopLevelDependencyGraph(d : DModule) -> SimpleGraph<string, bool> {
	// Create an empty graph
	graph = makeSimpleGraph();

	// Add all toplevel names as nodes first
	graph1 = foldTree(d.toplevels, graph, \name, _, acc -> {
		addSimpleNode(acc, name)
	});

	// Add edges based on dependencies
	graph2 = foldTree(d.toplevels, graph1, \name, top : DGlobal, acc -> {
		// Get free variables in this toplevel
		free = getFreeDVarsFromDExp(makeSet(), makeSet(), top.value);

		// Only add edges to other toplevels
		deps = filterSet(free, \dep -> containsKeyTree(d.toplevels, dep));

		// Add edges from this name to its dependencies
		foldSet(deps, acc, \acc2, dep -> {
			addSimpleEdge(acc2, dep, name, true, 1)
		});
	});

	graph2;
}

getTopLevelInferenceOrder(d : DModule) -> [string] {
	// Build dependency graph
	depGraph = buildTopLevelDependencyGraph(d);

	// Remove cycles
	acyclicGraph = simpleLoopFree(depGraph, "");

	// Get topological order
	order = topoSortSimpleGraph(acyclicGraph);
	uniq(concat(order, d.order))
}