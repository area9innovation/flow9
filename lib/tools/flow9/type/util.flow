import tools/flow9/type/types;
import net/url_parameter;

export {
	// tyvar should be a root for this to work well
	getTyvar(type : HType) -> string;
	isFunctionType(type : HTypeSchema) -> bool;

	shouldTrace(env : HTypeEnv, level : int) -> bool;
	printTrace(env : HTypeEnv, text : string, level : int) -> void;

	// Does this type schema have an "auto" type somewhere in it?
	hasAutoType(schema : HTypeSchema) -> bool;
}

getTyvar(type : HType) -> string {
	switch (type) {
		HTypeVar(name): name;
		default: "";
	}
}

shouldTrace(env : HTypeEnv, level : int) -> bool {
	env.egraph.tracing > level
}

printTrace(env : HTypeEnv, text : string, level : int) -> void {
	if (shouldTrace(env, level)) {
		println(^(env.egraph.indent) + text);
	}
}

isFunctionType(type : HTypeSchema) -> bool {
	switch (type) {
		HTypeForAll(vars, typ): isFunctionType(typ);
		HTypeAlternatives(options): true;
		HTypeFn(args, returnType): true;
		HTypeVar(__): false;
		HTypeCons(__, __): false;
	}
}


hasAutoType(schema : HTypeSchema) -> bool {
	switch (schema) {
		HTypeForAll(vars, type): hasAutoTypeInHType(type);
		HTypeAlternatives(options): false;
		HType():hasAutoTypeInHType(schema);
	}
}

hasAutoTypeInHType(type : HType) -> bool {
	switch (type) {
		HTypeVar(id): false;
		HTypeCons(name, args): {
			if (name == "auto") true
			else exists(args, hasAutoTypeInHType)
		}
		HTypeFn(args, returnType): {
			exists(args, hasAutoTypeInHType) || hasAutoTypeInHType(returnType)
		}
	}
}
