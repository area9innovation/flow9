import tools/flow9/type/types;
import tools/flow9/type/egraph/utils;

export {
	areTypesStructurallyEqual(g : EGraph, type1 : int, type2 : int) -> bool;
}

// Check if two types are structurally equal, ignoring type variable identities
areTypesStructurallyEqual(g : EGraph, type1 : int, type2 : int) -> bool {
	// Get the actual nodes for both types
	node1 = getNodeDef(g, type1);
	node2 = getNodeDef(g, type2);

	// `flow` is equal to anything
	isFlowTypeNode(node1) ||
	isFlowTypeNode(node2) ||
	switch (node1) {
		Variable(__): {
			// A type variable can match another type variable, but not a concrete type
			switch (node2) {
				Variable(__): true;
				default: false;
			}
		}
		Constructor(name1, args1): {
			switch (node2) {
				Constructor(name2, args2): {
					// Must have same name and same number of arguments
					if (name1 != name2 || length(args1) != length(args2)) {
						false;
					} else {
						// All arguments must be structurally equal
						foldi(args1, true, \i, acc, arg1 ->
							acc && areTypesStructurallyEqual(g, arg1, args2[i])
						);
					}
				}
				default: false;
			}
		}
		Function(args1, ret1): {
			switch (node2) {
				Function(args2, ret2): {
					// Must have same number of arguments
					if (length(args1) != length(args2)) {
						false;
					} else {
						// Arguments must be structurally equal
						argsEqual = foldi(args1, true, \i, acc, arg1 ->
							acc && areTypesStructurallyEqual(g, arg1, args2[i])
						);
						// Return type must be structurally equal
						argsEqual && areTypesStructurallyEqual(g, ret1, ret2);
					}
				}
				default: false;
			}
		}
	}
}
