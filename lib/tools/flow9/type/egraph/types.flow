import ds/set;
import tools/flow9/type/module_types;

export {
	TypeNode ::= Constructor, Function, Variable;
		Constructor(name : string, params : [int]);
		Function(args : [int], ret : int);
		Variable(id : int);

	EClass(
		node : TypeNode,         // What is this node?
		mutable root : int,      // Representative ID
		alternatives : Set<int>, // If not empty, we know this eclass has to be exactly one of these alternative types
		subtypes : Set<int>,     // Subtypes of this eclass
		supertypes : Set<int>,   // Supertypes of this eclass
		subtypeContexts : Set<TypeRelationContext>,   // Contexts for subtype relationships
		supertypeContexts : Set<TypeRelationContext>, // Contexts for supertype relationships
		infos : Set<EContext>    // For error reporting, we keep source infos
	);

	TypeRelationContext(
		id : int,           // The ID of the related type
		contexts : Set<EContext>, // Source position info & Error context description
	);

	EGraph(
		// Names, types and schemas of all the bindings
		interface : HModuleInterface,
		// For top-level type pars ?, ??, ???, we have a map to their eclasses
		typars : ETypeParMap,
		// What is the type of locals?
		locals : Tree<string, int>,
		// The eclasses of the egraph
		classes : ref Tree<int, EClass>,
		// Lookup from node to eclass
		nodeIndex : ref Tree<TypeNode, int>,
		// Representation of each eclass is found here (union-find)
		roots : ref Tree<int, int>,
		// What is the next eclass id?
		nextId : ref int,
		// Modification counter
		modificationCount : ref int,
		// Report an error against these info positions
		onError : (Set<EContext>, string) -> void,
		// Info positions we have reported errors,
		errors : ref Set<EContext>,
		// Should we do debug tracing?
		tracing : int,
		// How much debug indentation?
		indent : ref string,
		// Should we do fine-grained error tracking?
		fineGrained : bool
	);

	EContext(
		info : int,
		context : string,
	);

	// Map from typar ?, ??, ??? to what eclass they are
	ETypeParMap(typars : Tree<string, int>);
}