import ds/tree;

export {
	HType ::= HTypeCons, HTypeFn, HTypeVar;
		HTypeCons(name : string, args : [HType]);
		HTypeFn(from : [HType], to : HType);
		// This is a type variable - some type we do not know yet.
		HTypeVar(tyvar : string);

	HTypeSchema ::= HTypeForAll, HTypeAlternatives, HType;
		// These type variables should be instantiated and bound into the type
		HTypeForAll(vars : [string], type : HType);

		/* HTypeAlternatives represents a type that needs to be resolved from multiple alternatives.
		It consists of:
		- A list of possible type schemas this could resolve to

		For example, these operators are represented as:

		// .first: forall ?,??. (Pair<?,??>) -> ?  |  forall ?,??,???. (Triple<?,??,???>) -> ?
		first = HTypeAlternatives(
			[
				HTypeForAll(["?", "??"], HTypeFn([HTypeCons("Pair", [HTypeVar("?"), HTypeVar("??")])], HTypeVar("?"))),
				HTypeForAll(["?", "??", "???"], HTypeFn([HTypeCons("Triple", [HTypeVar("?"), HTypeVar("??"), HTypeVar("???")])], HTypeVar("?")))
			],
		);

		When we instantiate these, we record the instantiated options in the type environment to be resolved.
		*/
	    HTypeAlternatives(options : [HTypeSchema]);

	// The type inference of a module after type inference is done
	HModuleInterface(
		// Bindings of globals, functions and natives
		env : Tree<string, HTypeSchema>,
		// Struct definitions
		structs : Tree<string, HStruct>, 
		// These are transitively expanded into structs inside
		unions : Tree<string, HUnion>,
		// These keep union directly as they are, so we can do typar expansion correctly in union vs union unification
		rawUnions : Tree<string, HUnion>,
		// From struct or union to their direct supertypes.
		supertypes : Tree<string, [HUnion]>,
	);


	HStruct(name : string, typars : [string], fields : [HStructArg]);
		HStructArg(field : string, ismutable : bool, type : HType);
	HUnion(name : string, typars : [string], types : [HTypeCons]);
}