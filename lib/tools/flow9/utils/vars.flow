import tools/flow9/desugar/dexp;
import tools/flow9/utils/rec;

export {
	// Find all var references in this expression (except locals)
	extractDVars(acc : Set<string>, d : DExp) -> Set<string>;
	// If this is a DVar, return the name; otherwise, return ""
	getDVar(d : DExp) -> string;
}

extractDVars(acc : Set<string>, d : DExp) -> Set<string> {
	rec = \ee -> fold(ee, acc, extractDVars);
	switch (d) {
		DVar(var, info): insertSet(acc, var);
		DLet(var, value, body, info): {
			acc1 = extractDVars(acc, value);
			hasVar = containsSet(acc1, var);
			acc2 = extractDVars(acc1, body);
			if (hasVar) acc2
			else removeSet(acc2, var);
		}
		default: {
			fold(getDExpChildren(d), acc, extractDVars)
		}
	}
}

getDVar(d : DExp) -> string {
	switch (d) {
		DVar(var, info): var;
		DBuiltin(op, args, __): {
			switch (op) {
				DIsSubType(t): {
					getDVar(args[0]);
				}
				default: "";
			}
		}
		default: "";
	}
}
