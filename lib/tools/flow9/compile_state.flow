import tools/flowc/dependencies;
import tools/common/config;
import tools/flow9/desugar/dexp;
import ds/concurrent_set;
import ds/concurrent_state;
import sys/concurrent;

export {
	makeCompileState(config : CompilerConfig, onError : (string) -> void) -> CompileState;

	summarizeCompileStatus(state : CompileState) -> string;

	getCompileStatus(state : CompileState, fullpath : string) -> CompileStatus;
	setCompileStatus(state : CompileState, fullpath : string, status : CompileStatus) -> void;

	// When we compile a set of programs, we keep track of what we are doing with each file here
	CompileState(
		config : CompilerConfig,
		// This is a hash map from full path to the compile status
		compileStatus : native,   // compileStatus : ref Tree<string, CompileStatus>,
		// This is a queue of files we should parse in the next iteration
		parseQueue : ConcurrentSet<string>,
		// This is a queue of files we should type check in the next iteration
		typeQueue : ConcurrentSet<string>,
		// Tracking dependencies of files for type checking
		dependencies : ConcurrentState<DependencyTracker<string>>,
		// Maps from a module to all modules that directly import it
		reverseDependencies : native,
		// Used to report errors
		onError : (string) -> void,
		reusedIncrementalCount : ref int,
		retypecheckedCount : ref int,
	);

	CompileStatus ::= CompileNotSeen, CompileInProgress, CompileParsed, CompileTyped, CompileNeedsRecheck, CompileFailure;
		CompileNotSeen();
		// We are currently compiling this file
		CompileInProgress();
		// We already compiled this file, and the result is here
		CompileParsed(module : DModule);
		// We have parsed this and dependencies, and typed everything
		CompileTyped(module : DModule);
		// The module is typed but needs rechecking due to dependency changes
		CompileNeedsRecheck(module : DModule, changedIds : Set<string>);
		// We had an error compiling this file
		CompileFailure(error : string);
}

makeCompileState(config : CompilerConfig, onError : (string) -> void) -> CompileState {
	CompileState(config,
		initConcurrentHashMap(), //		ref makeTree(), 
		makeConcurrentSet(),
		makeConcurrentSet(),
		makeConcurrentState(makeDependencyTracker()),
		initConcurrentHashMap(),
		onError,
		ref 0,
		ref 0,
	)
}

summarizeCompileStatus(state : CompileState) -> string {
	values = valuesConcurrentHashMap(state.compileStatus);
	// getTreeValues();
	counts = fold(values, [0, 0, 0, 0, 0, 0, 0], \acc, s -> {
		switch (s) {
			CompileNotSeen(): replace(acc, 0, acc[0] + 1);
			CompileInProgress(): replace(acc, 1, acc[1] + 1);
			CompileParsed(_): replace(acc, 2, acc[2] + 1);
			CompileFailure(_): replace(acc, 3, acc[3] + 1);
			CompileTyped(_): replace(acc, 4, acc[4] + 1);
			CompileNeedsRecheck(_, __): replace(acc, 5, acc[5] + 1);}
	});

	"Parsed: " + i2s(counts[2]) 
	+ ", typed: " + i2s(counts[4] - ^(state.reusedIncrementalCount)) 
	+ ", needs recheck: " + i2s(counts[5])
	+ ", errors: " + i2s(counts[3]) 
	+ ", used incremental: " + i2s(^(state.reusedIncrementalCount))
	+ ", retypechecked: " + i2s(^(state.retypecheckedCount))
	+ (if (counts[0] != 0) ", not seen: " + i2s(counts[0]) else "")
	+ (if (counts[1] != 0) ", in progress: " + i2s(counts[0]) else "")
}

getCompileStatus(state : CompileState, fullpath : string) -> CompileStatus {
	getConcurrentHashMap(state.compileStatus, fullpath, CompileNotSeen())
	// lookupTreeDef(^(state.compileStatus), fullpath, CompileNotSeen())
}

setCompileStatus(state : CompileState, fullpath : string, status : CompileStatus) {
	setConcurrentHashMap(state.compileStatus, fullpath, status);
//	state.compileStatus := setTree(^(state.compileStatus), fullpath, status);
}

