import ds/set;
import tools/flow9/type/types;

export {
	DModule(
		// This is stable across computers
		flowpath : string,
		// This is different from computer to computer
		fullpath : string,
		// Last modified timestamp when compiled
		timestamp : double,
		// MD5 hash of the file content when compiled
		contentHash : string,
		imports : [DImport],
		forbids : [DForbid],
		// The names of what we export across all categories
		exported : [string],
		// The next 4 also include the toplevels from the export section
		structs : Tree<string, DStruct>,
		unions : Tree<string, DUnion>,
		natives : Tree<string, DNative>,
		toplevels : Tree<string, DGlobal>,
		// Any string includes from the entire module, so we can do file dependency tracking. Uses flow paths
		stringincludes : [string],
		// The order of globals in the source code
		order : [string],
		// Lookup from the info id to the position in the file
		positions : [int],
		// Types for each info position
		types : [HTypeSchema],
		// Type environment when type checked. 
		// This is the full environment, including dependencies. When saved as incremental, only our own environment is saved.
		typeEnv : HModuleInterface,
		// Indicates if typeEnv contains all dependencies (true) or just types from this file (false)
		typeEnvIsFull : bool,
	);

	DImport(path : string, info : int);
	DForbid(path : string, info : int);

	DStruct(
		uid : string,
		typars : [string],
		args : [DStructArg],
		info : int
	);
	DStructArg(field : string, ismutable : bool, type : DType, info : int);

	DUnion(uid : string, typars : [string], types : [DTypename], info : int);
	DNative(name : string, isIo : bool, type : DType, nativeName : string, hasFallback : bool, info : int);
	// Typars is defined if this name is polymorphic.
	DGlobal(name : string, typars : [string], recursive : bool, type : DType, value : DExp, info : int);
	DTypeDef(name : string, type : DType, info : int);

	DStringInclude(path : string, info : int);

	DType ::= DArrayType, DAutoType, DBoolType, DDoubleType, DFlowType, DFnType, DIntType, DNativeType, DPolyType, DRefType, DStringType, DTypename, DVoidType;
		DAutoType(info : int);
		DVoidType(info : int);
		DBoolType(info : int);
		DIntType(info : int);
		DDoubleType(info : int);
		DStringType(info : int);
		DFlowType(info : int);
		DNativeType(info : int);
		DArrayType(type : DType, info : int);
		// This is ?, ??, ...
		DPolyType(id : string, info : int);
		DFnType(args : [DType], returnType : DType, info : int);
		DRefType(type : DType, info : int);
		DTypename(uid : string, typars : [DType], info : int);

	DValue ::= DVoid, DInt, DDouble, DBool, DString, DLambda;
		DVoid(info : int);
		DBool(value : bool, info : int);
		DInt(value : int, info : int);
		DDouble(value : double, info : int);
		DString(value : string, info : int);
		DLambda(args : [DArgType], body : DExp, info : int);
			DArgType(name : string, type : DType, info : int);

	DExp ::= DValue, DVar, DArray, DCall, DLet, DIfElse, DMaybe, DSwitch, DBuiltin, DWith;
		DVar(name : string, info : int);
		DArray(values : [DExp], info : int);
		DCall(fn : DExp, args : [DExp], info : int);
		DLet(name : string, value : DExp, body : DExp, info : int);
		DIfElse(condition : DExp, then : DExp, else_ : DExp, info : int);
		DMaybe(condition : DExp, then : DExp, else_ : DExp, info : int);
		DSwitch(value : DExp, cases : [DCase], defaultCase : Maybe<DExp>, info : int);
			DCase(uid : string, ids : [string], body : DExp, info : int);
		DBuiltin(op : DOp, args : [DExp], info : int);
		DWith(uid : string, exp : DExp, fieldassigns : [DFieldAssign], info : int);
			DFieldAssign(field : string, exp : DExp, info : int);

	DOp ::= DCast, DIsSubType, DDeref, DDot, DCalculation, DRef, 
			DAssign, DComparison, DIndex, DMutableAssign, DPipe, DSequence;

	DComparison ::= DEqual, DGreater, DGreaterEqual, DLess, DLessEqual, DNotEqual;
	DCalculation ::= DNegative, DNot, DAdd, DAnd, DDiv, DMod, DMul, DOr, DSub;

		DCast(toType : DType);
		DIsSubType(type : DType);
		DDeref();
		DDot(field : string);
		DNegative();
		DNot();
		DRef();
		DAdd();
		DAnd();
		DAssign();
		DDiv();
		DEqual();
		DGreater();
		DGreaterEqual();
		DIndex();
		DLess();
		DLessEqual();
		DMod();
		DMul();
		DMutableAssign(field : string);
		DNotEqual();
		DOr();
		DPipe();
		DSequence();
		DSub();
}
