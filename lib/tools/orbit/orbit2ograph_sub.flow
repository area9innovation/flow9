import tools/orbit/orbit_types;
import tools/orbit/ograph;
import tools/orbit/types;
import tools/orbit/orbit_decompose;
import ds/tree;
import string;

export {
    // Add an OrMath_expr to an OGraph, substituting variables with existing eclasses
    // and processing type annotations by adding domains to the "belongs to" field
    // Takes a mapping from variable names to eclass IDs for substitution
    // Returns the eclass ID of the added expression
    orbit2OGraphWithSubstitution(graph : OGraph, expr : OrMath_expr, varToEclass : Tree<string, int>) -> int;
}

// Add an OrMath_expr to an OGraph with variable substitution and type annotation handling
orbit2OGraphWithSubstitution(graph : OGraph, expr : OrMath_expr, varToEclass : Tree<string, int>) -> int {
    // Handle specific expression types with strong typing
    switch (expr) {
        // Type annotation handling
        OrTypeAnnotation(baseExpr, domain): {
            // First, process the domain
            domainId = orbit2OGraphWithSubstitution(graph, domain, varToEclass);
            
            // Then, process the base expression
            baseId = orbit2OGraphWithSubstitution(graph, baseExpr, varToEclass);
            
            // Add the domain to the "belongs to" field of the base node
            println("Adding domain " + i2s(domainId) + " to node " + i2s(baseId));
            addBelongsToONode(graph, baseId, domainId);
            
            // Return the base node ID as the canonical form
            baseId;
        }
        
        // Identifier substitution
        OrIdentifier(id): {
            // Check if we have a mapping for this identifier
            switch (lookupTree(varToEclass, id)) {
                Some(eclassId): {
                    // Use the provided eclass ID directly
                    // println("Substituting identifier '" + id + "' with eclass ID " + i2s(eclassId));
                    eclassId;
                }
                None(): {
                    // No substitution - add as a normal identifier
                    addValueNode(graph, "Identifier", id);
                }
            }
        }
        
        // Leaf primitives
        OrInt(i): insertONode(graph, ONode("Int", [], [], OrbitInt(i)));
        OrDouble(d): insertONode(graph, ONode("Double", [], [], OrbitDouble(d)));
        OrString(s): addValueNode(graph, "String", s);
        OrUId(s): addValueNode(graph, "UId", s);
        OrBool(b): insertONode(graph, ONode("Bool", [], [], OrbitBool(b)));
        // Default case for all other expressions
        default: {
            // Handle all other expression types using decomposition
			// Decompose the expression into operator, children, and primitive value
			decomposed = decomposeOrbit(expr);
			op = decomposed.first;
			children = decomposed.second.first;

			if (decomposed.second.second != OrbitNone()) {
				println("TODO: Handle value " + toString(decomposed.second.second));
			}
			
			// For non-leaf nodes, recursively process all children
			childIds = map(children, \child -> {
				orbit2OGraphWithSubstitution(graph, child, varToEclass);
			});
			
			// Create a node with the processed children
			insertONode(graph, ONode(op, childIds, [], OrbitNone()));
        }
    }
}

// Helper function to add a string value node
addValueNode(graph : OGraph, op : string, value : string) -> int {
    insertONode(graph, ONode(op, [], [], OrbitString(value)));
}