Inserting expressions into the graph...
Expression 1: (a + b) -> ID: 3
Expression 2: (x * y) -> ID: 6
Expression 3: if p then 
	q 
else 
	r -> ID: 10
Expression 4: ((a + b) * (c - d)) -> ID: 17
Testing findOGraphId function...
Looking for: (a + b)
Original ID: 3, Found ID: 3
Match: 1
Looking for: (x * y)
Original ID: 6, Found ID: 6
Match: 1
Looking for: if p then 
	q 
else 
	r
Original ID: 10, Found ID: 10
Match: 1
Looking for: ((a + b) * (c - d))
Original ID: 17, Found ID: 17
Match: 1
Looking for expression not in graph: foo(bar, baz)
Found ID: -1 (should be 0 or negative if not found)
Extracting expressions using found IDs...
Extracted from ID 3: (a + b)
Matches original: 1
Extracted from ID 6: (x * y)
Matches original: 1
Extracted from ID 10: if p then 
	q 
else 
	r
Matches original: 1
Extracted from ID 17: ((a + b) * (c - d))
Matches original: 1
Testing with modified expressions...
Added: foo(1, 2) -> ID: 21
Found ID: 21
Added modified: foo(1, 3) -> ID: 25
Found original: ID 21
Found modified: ID 25
Extracted original: foo(1, 2)
Extracted modified: foo(1, 3)
Testing with complex domain expressions
Added Type("number") with ID: 28
Added Group(a + b) with ID: 33
Looking for complex expressions:
Type("number") -> Original ID: 28, Found ID: 28
Match: 1
Group(a + b) -> Original ID: 33, Found ID: 33
Match: 1
Extracted Type("number"): Type("number")
Matches original: 1
Extracted Group(a + b): Group((a + b))
Matches original: 1
Result: "findOGraphId test completed"
