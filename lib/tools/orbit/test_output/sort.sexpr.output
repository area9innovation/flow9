Stable Merge Sort Implementation
==============================
Test 1: Small array
------------------
Original: [3, 1, 4, 2]
Sorted:   [1, 2, 3, 4]
Test 2: Array with duplicates (demonstrating stability)
------------------------------------------------
Original: [3, 1, 3, 2]
Sorted:   [1, 2, 3, 3]
In the sorted result, the first 3 should be from position 0
and the second 3 should be from position 2 (stable sort property).
Test 3: Edge cases
------------------
Empty array: []
Sorted:      []
Single element: [42]
Sorted:         [42]
Test 4: Already sorted
---------------------
Original: [1, 2, 3]
Sorted:   [1, 2, 3]
Test 5: Custom comparison function (descending order)
--------------------------------------------------
Original: [3, 1, 4, 2]
Sorted descending: [4, 3, 2, 1]
Test 6: Sort Person objects by age
-------------------------------
Original people:
[Person("Alice", 30), Person("Bob", 25), Person("Charlie", 35), Person("Diana", 28)]
Sorted by age:
[Person("Bob", 25), Person("Diana", 28), Person("Alice", 30), Person("Charlie", 35)]
Test 7: Sort Person objects by name
--------------------------------
Sorted by name:
[Person("Alice", 30), Person("Bob", 25), Person("Charlie", 35), Person("Diana", 28)]
Test 8: Sort Point objects by distance from origin
------------------------------------------------
Original points:
[Point(3, 4), Point(1, 2), Point(5, 12), Point(2, 2)]
Sorted by distance from origin:
[Point(1, 2), Point(2, 2), Point(3, 4), Point(5, 12)]
Test 9: Sort strings by length
-----------------------------
Original strings:
["apple", "banana", "cherry", "date", "elderberry"]
Sorted by length:
["date", "apple", "banana", "cherry", "elderberry"]
Result: 0
