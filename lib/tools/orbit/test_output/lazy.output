Flow compiler (3rd generation)

Processing 'orbit' on http server

Test 1: Should NOT see side effect until eval
Evaluating the expression
ERROR: Expected int, not Function("sideEffect", [])
Result: 0

Test 2: Conditional evaluation, should only see one side effect
TODO: Interpret OrRule: true ⇒ println("Evaluating false expression");
eval(falseExpr)
Evaluating true expression
ERROR: Expected int, not "Evaluating true expression"
Result: 0

Test 3: Lazy arithmetic, evaluations in order
Adding numbers
Expected int, double or string for +, not Sequence(Function("println", ["Computing first value"]), 10)
ERROR: Expected int, not "constructor_Sequence"
Result: 0
Result: "Result: 0"
\n==== EXPECTED OUTPUT DIFF ====
7,8c7,8
< ERROR: Expected int, not Function("sideEffect", [])
< Result: 0
---
> Side effect executed
> Result: 42
11,12d10
< TODO: Interpret OrRule: true ⇒ println("Evaluating false expression");
< eval(falseExpr)
14,15c12
< ERROR: Expected int, not "Evaluating true expression"
< Result: 0
---
> Result: 1
17a15,16
> Computing first value
> Computing second value
19,23c18,19
< Expected int, double or string for +, not Sequence(Function("println", ["Computing first value"]), 10)
< ERROR: Expected int, not "constructor_Sequence"
< Result: 0
< Result: "Result: 0"
< \n==== EXPECTED OUTPUT DIFF ====
---
> Result: 30
> Result: "Result: 30"
