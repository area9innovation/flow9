Inserting expressions into the graph...
Expression 1: (a + b) -> ID: 4
Expression 2: (x * y) -> ID: 8
Expression 3: if p then 
	q 
else 
	r -> ID: 13
Expression 4: ((a + b) * (c - d)) -> ID: 23
Testing findOGraphId function...
Looking for: (a + b)
Original ID: 4, Found ID: 4
Match: 1
Looking for: (x * y)
Original ID: 8, Found ID: 8
Match: 1
Looking for: if p then 
	q 
else 
	r
Original ID: 13, Found ID: 13
Match: 1
Looking for: ((a + b) * (c - d))
Original ID: 23, Found ID: 23
Match: 1
Looking for expression not in graph: foo(bar, baz)
Found ID: -1 (should be 0 or negative if not found)
Extracting expressions using found IDs...
Extracted from ID 4: (a + b)
Matches original: 1
Extracted from ID 8: (x * y)
Matches original: 1
Extracted from ID 13: if p then 
	q 
else 
	r
Matches original: 1
Extracted from ID 23: ((a + b) * (c - d))
Matches original: 1
Testing with modified expressions...
Added: foo(1, 2) -> ID: 28
Found ID: 28
Added modified: foo(1, 3) -> ID: 33
Found original: ID 28
Found modified: ID 33
Extracted original: foo(1, 2)
Extracted modified: foo(1, 3)
Testing with complex domain expressions
Added Type("number") with ID: 37
Added Group(a + b) with ID: 44
Looking for complex expressions:
Type("number") -> Original ID: 37, Found ID: 37
Match: 1
Group(a + b) -> Original ID: 44, Found ID: 44
Match: 1
Extracted Type("number"): Type("number")
Matches original: 1
Extracted Group(a + b): Group((a + b))
Matches original: 1
Result: "findOGraphId test completed"
