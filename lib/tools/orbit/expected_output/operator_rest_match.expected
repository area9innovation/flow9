===== Testing Operator Pattern Matching =====
Testing expression: (x * y)
✓ MATCHED: Found multiply operation
  terms type: Call
  terms value: x(y)
Testing expression: ((x * y) * z)
✓ MATCHED: Found multiply operation
  terms type: Call
  terms value: x(y, z)
Testing expression: (((x * y) * z) * w)
✓ MATCHED: Found multiply operation
  terms type: Call
  terms value: x(y, z, w)
Testing expression: (x + y)
✗ NOT MATCHED: Not a multiply operation
Testing expression: (a + b)
✓ MATCHED: Found addition operation
  terms type: Call
  terms value: a(b)
Testing expression: ((a + b) + c)
✓ MATCHED: Found addition operation
  terms type: Call
  terms value: a(b, c)
Testing expression: (a * b)
✗ NOT MATCHED: Not an addition operation
===== Testing Array Pattern Matching =====
Testing array: [1, 2, 3, 4, 5]
✓ MATCHED [first, second, ..., rest] pattern
  first type: Int
  first value: 1
  second type: Int
  second value: 2
  rest type: List
  rest value: [3, 4, 5]
Testing array: [1, 2]
✓ MATCHED [first, second, ..., rest] pattern
  first type: Int
  first value: 1
  second type: Int
  second value: 2
  rest type: EmptyList
  rest value: []
Testing array: [1]
✓ MATCHED [single, ..., rest] pattern
  single type: Int
  single value: 1
  rest type: EmptyList
  rest value: []
Testing array: []
✓ MATCHED [..., all] pattern
  all type: EmptyList
  all value: []
Result: true
