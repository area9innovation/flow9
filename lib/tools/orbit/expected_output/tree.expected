=== Binary Tree Test ===
Empty tree: Empty()
Tree after insertions: Node(5, "five", Node(3, "three", Node(2, "two", Empty(), Empty()), Node(4, "four", Empty(), Empty())), Node(7, "seven", Empty(), Empty()))
Lookup key 3: Some("three")
Lookup key 6: None()
All entries: [Pair(2, "two"), Pair(3, "three"), Pair(4, "four"), Pair(5, "five"), Pair(7, "seven")]
After removing key 3: Node(5, "five", Node(4, "four", Node(2, "two", Empty(), Empty()), Empty()), Node(7, "seven", Empty(), Empty()))
Lookup key 3 after removal: None()
=== Testing with rewrite rules ===
Original expression: Node(10, "ten", Node(5, "five", Empty(), Empty()), Node(15, "fifteen", Empty(), Empty()))
After applying rules: Node(10, "ten", Node(5, "five", Empty(), Empty()), Node(15, "fifteen", Empty(), Empty()))
After removing 5 using rules: Node(10, "ten", Empty(), Node(15, "fifteen", Empty(), Empty()))
Lookup 5 after removal with rules: None()
=== Testing removal of node with two children ===
Tree with node 5 having two children: Node(5, "five", Node(3, "three", Node(2, "two", Empty(), Empty()), Node(4, "four", Empty(), Empty())), Node(7, "seven", Node(6, "six", Empty(), Empty()), Empty()))
After removing node 5 (has two children): Node(6, "six", Node(3, "three", Node(2, "two", Empty(), Empty()), Node(4, "four", Empty(), Empty())), Node(7, "seven", Empty(), Empty()))
All entries after removal: [Pair(2, "two"), Pair(3, "three"), Pair(4, "four"), Pair(6, "six"), Pair(7, "seven")]
Keys in order: [2, 3, 4, 6, 7]
Ensuring children are preserved correctly - Lookup key 3: Some("three")
Looking up key 6: Some("six")
Result: "Binary tree tests completed."
