import tools/orbit/orbit_types;
import tools/orbit/orbit_env;
import tools/orbit/orbit_simple_ograph;
import tools/orbit/ograph;
import tools/orbit/orbit2ograph;
import tools/orbit/orbit_decompose;
import tools/orbit/prettyprint;
import tools/orbit/orbit_compare;
import string;

export {
    // Process an expression with potential domain annotations
    // This function handles domain annotations by extracting the domain and expression,
    // then adding the domain to the expression's eclass
    processDomainAnnotations(graphName : string, expr : OrMath_expr) -> int;
}

// Process an expression with potential domain annotations
processDomainAnnotations(graphName : string, expr : OrMath_expr) -> int {
    println("Processing expression: " + prettyOrbit(expr));
    
    // Get the graph from the registry
    switch (lookupTree(^ographRegistry, graphName)) {
        Some(ograph): {
            // Check if this is a type annotation
            switch (expr) {
                // Handle domain annotation
                OrTypeAnnotation(baseExpr, domain): {
                    println("  Found domain annotation. Base: " + prettyOrbit(baseExpr) + ", Domain: " + prettyOrbit(domain));
                    
                    // First, look for the base expression
                    baseIdFound = findOGraphId(graphName, baseExpr);
                    finalBaseId = if (baseIdFound == -1) {
                        // If not found, add it
                        println("  Base expression not found, adding it");
                        processDomainAnnotations(graphName, baseExpr);
                    } else {
                        println("  Base expression found with ID: " + i2s(baseIdFound));
                        baseIdFound;
                    }
                    
                    // Then add the domain if it doesn't exist
                    domainIdFound = findOGraphId(graphName, domain);
                    finalDomainId = if (domainIdFound == -1) {
                        // If domain not found, add it
                        println("  Domain not found, adding it");
                        orbit2OGraph(ograph, domain);
                    } else {
                        println("  Domain found with ID: " + i2s(domainIdFound));
                        domainIdFound;
                    }
                    
                    // Associate the domain with the base expression
                    println("  Adding domain " + i2s(finalDomainId) + " to node " + i2s(finalBaseId));
                    addDomainToNode(graphName, finalBaseId, finalDomainId);
                    
                    // Return the base expression ID
                    finalBaseId;
                }
                
                // For any other expression, check if it already exists
                default: {
                    // Look for the expression in the graph first
                    existingId = findOGraphId(graphName, expr);
                    if (existingId != -1) {
                        println("  Found existing expression with ID: " + i2s(existingId));
                        existingId;
                    } else {
                        println("  Expression not found, using orbit2OGraph");
                        nodeId = orbit2OGraph(ograph, expr);
                        println("  Added with node ID: " + i2s(nodeId));
                        nodeId;
                    }
                }
            }
        }
        None(): {
            println("ERROR: OGraph '" + graphName + "' not found in processDomainAnnotations");
            -1;
        }
    }
}