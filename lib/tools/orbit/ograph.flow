import tools/orbit/types;
import ds/tree;
import maybe;
import string;
import math/math; // For d2s conversion
import ds/set;
import ds/array;

export {
    // Create a new, empty OGraph
    makeOGraph() -> OGraph;

    // Find the canonical id (root) of the equivalence class for a node
    findORoot(graph : OGraph, id : int) -> int;

    // Insert a new node into the graph and return its id
    insertONode(graph : OGraph, node : ONode) -> int;

    // Lookup a node in the graph
    lookupOClass(graph : OGraph, id : int) -> Maybe<OClass>;

    // Add a node to an equivalence class
	changeONodeInClass(graph : OGraph, classId : int, node : ONode) -> void;

    // Merge two equivalence classes
    mergeOClasses(graph : OGraph, id1 : int, id2 : int) -> void;

    // Create a new domain
    makeODomain(domain : string) -> ODomain;

    // Find a node in the graph that matches the given domain, op, and children
    findONode(graph : OGraph, domain : ODomain, op : string, children : [int]) -> Maybe<int>;
    
    // Traverse the graph and apply a function to each node
    traverseOGraph(graph : OGraph, fn : (int, ONode) -> void) -> void;
    
    // Insert a node if it doesn't exist, or find its id if it does
    insertOrFindONode(graph : OGraph, node : ONode) -> int;
    
    // Functions for primitive values
    
    // Associate an int value with an eclass
    setOClassInt(graph : OGraph, eclass : int, value : int) -> void;
    
    // Retrieve the eclass ID associated with an int value, if it exists
    getOClassInt(graph : OGraph, eclass : int) -> Maybe<int>;
    
    // Associate a double value with an eclass
    setOClassDouble(graph : OGraph, eclass : int, value : double) -> void;
    
    // Retrieve the eclass ID associated with a double value, if it exists
    getOClassDouble(graph : OGraph, eclass : int) -> Maybe<double>;
    
    // Associate a string value with an eclass
    setOClassString(graph : OGraph, eclass : int, value : string) -> void;
    
    // Retrieve the eclass ID associated with a string value, if it exists
    getOClassString(graph : OGraph, eclass : int) -> Maybe<string>;

    // Domain membership functions
    
    // Add a domain to a node's belongsTo list
    addDomainToONode(graph : OGraph, nodeId : int, domainId : int) -> void;
    
    // Remove a domain from a node's belongsTo list
    removeDomainFromONode(graph : OGraph, nodeId : int, domainId : int) -> void;
    
    // Check if a node belongs to a specific domain
    onodeHasDomain(graph : OGraph, nodeId : int, domainId : int) -> bool;
    
    // Get all domains a node belongs to
    getONodeDomains(graph : OGraph, nodeId : int) -> [int];

    // Find a node in the graph that both has the given primary domain,
    // and matches the given op and children
    findONodeWithDomain(graph : OGraph, domain : ODomain, op : string, children : [int], domainId : int) -> Maybe<int>;
}

// Create a new, empty OGraph
makeOGraph() -> OGraph {
    OGraph(
        ref makeTree(), // oclasses
        ref makeTree(), // classes
        ref 1,          // next_id - Start IDs from 1
        ref makeTree(), // int_values
        ref makeTree(), // double_values
        ref makeTree()  // string_values
    )
}

// Find the root of an equivalence class
findORoot(graph : OGraph, id : int) -> int {
    switch (lookupTree(^(graph.classes), id)) {
        None(): id;  // This is the root
        Some(parentId): {
			if (parentId != id) {
				// Find the root recursively
				findORoot(graph, parentId);
			} else id;
        }
    }
}

// Lookup a node in the graph
lookupOClass(graph : OGraph, id : int) -> Maybe<OClass> {
    root = findORoot(graph, id);
    lookupTree(^(graph.oclasses), root)
}

// Find a node in the graph that matches the given domain, op, and children
findONode(graph : OGraph, domain : ODomain, op : string, children : [int]) -> Maybe<int> {
    // Find canonical representatives for all children
    canonicalChildren = map(children, \child -> findORoot(graph, child));
    
    // Look through all nodes in the graph to find a match
    foldTree(^(graph.oclasses), None(), \classId, oclass, acc -> {
        if (acc != None()) {
            acc
        } else if (oclass.node.op == op && 
                 oclass.node.domain.domain == domain.domain && 
                 length(oclass.node.children) == length(canonicalChildren)) {
            // Check if all children match
            allMatch = foldi(oclass.node.children, true, \i, match, child -> {
                match && (i < length(canonicalChildren)) && (findORoot(graph, child) == canonicalChildren[i])
            });
            
            if (allMatch) Some(classId) else None();
        } else {
            None()
        }
    })
}

// Find a node that both has the given primary domain and belongs to a specific domain
findONodeWithDomain(graph : OGraph, domain : ODomain, op : string, children : [int], domainId : int) -> Maybe<int> {
    // Find canonical representatives for all children
    canonicalChildren = map(children, \child -> findORoot(graph, child));
    
    // Look through all nodes in the graph to find a match
    foldTree(^(graph.oclasses), None(), \classId, oclass, acc -> {
        if (acc != None()) {
            acc
        } else if (oclass.node.op == op && 
                 oclass.node.domain.domain == domain.domain && 
                 length(oclass.node.children) == length(canonicalChildren) &&
                 contains(oclass.node.belongsTo, domainId)) {
            // Check if all children match
            allMatch = foldi(oclass.node.children, true, \i, match, child -> {
                match && (i < length(canonicalChildren)) && (findORoot(graph, child) == canonicalChildren[i])
            });
            
            if (allMatch) Some(classId) else None();
        } else {
            None()
        }
    })
}

changeONodeInClass(graph : OGraph, classId : int, node : ONode) -> void {
    root = findORoot(graph, classId);
    switch (lookupTree(^(graph.oclasses), root)) {
        None(): { /* Cannot add to non-existent class */ };
        Some(oclass): {
            // Create a new OClass with the same root but the new node
            updatedClass = OClass(root, node);
            graph.oclasses := setTree(^(graph.oclasses), root, updatedClass);
        }
    }
}

// Insert a new node into the graph
insertONode(graph : OGraph, node : ONode) -> int {
	// Get the next available ID
	newId = ^(graph.next_id);

    // Ensure belongsTo includes at least the primary domain ID if it's a new node with empty belongsTo
    updatedNode = if (length(node.belongsTo) == 0) {
        ONode(node.domain, node.op, node.children, [newId])
    } else {
        node
    };

	newClass = OClass(newId, updatedNode);
	
	// Add the node to the graph
	graph.oclasses := setTree(^(graph.oclasses), newId, newClass);
	graph.classes := setTree(^(graph.classes), newId, newId); // Points to itself initially
	
	// Increment the ID counter for next use
	graph.next_id := newId + 1;
	
	newId;
}

insertOrFindONode(graph : OGraph, node : ONode) -> int {
    // First check if the node already exists
    existingNode = findONode(graph, node.domain, node.op, node.children);
    switch (existingNode) {
        None(): insertONode(graph, node); // Insert the new node
        Some(id): findORoot(graph, id); // Return the canonical id
    }
}

// Merge two equivalence classes
mergeOClasses(graph : OGraph, id1 : int, id2 : int) -> void {
    root1 = findORoot(graph, id1);
    root2 = findORoot(graph, id2);
    
    if (root1 != root2) {
        // We always use the first as the new root to ensure specificity is preserved
        newRoot = root1;
        oldRoot = root2;
        
        // Update the union-find data structure
        graph.classes := setTree(^(graph.classes), oldRoot, newRoot);
        
        // Also need to update the OClass mapping
        switch (lookupTree(^(graph.oclasses), oldRoot)) {
            None(): {};
            Some(oldClass): {
                // The old class points to the new root
                updatedOldClass = OClass(newRoot, oldClass.node);
                graph.oclasses := setTree(^(graph.oclasses), oldRoot, updatedOldClass);
            }
        }
    }
}

// Create a new domain
makeODomain(domain : string) -> ODomain {
    ODomain(domain)
}

// Traverse the graph and apply a function to each node
traverseOGraph(graph : OGraph, fn : (int, ONode) -> void) -> void {
    traverseInOrder(^(graph.oclasses), \__, oclass -> {
		root = findORoot(graph, oclass.root);
		if (root == oclass.root) {
	        fn(oclass.root, oclass.node);
		}
    });
}

// Associate an int value with an eclass
setOClassInt(graph : OGraph, eclass : int, value : int) -> void {
	// Associate int value with the eclass
	graph.int_values := setTree(^(graph.int_values), eclass, value);
}

// Find the eclass associated with an int value
getOClassInt(graph : OGraph, eclass : int) -> Maybe<int> {
    lookupTree(^(graph.int_values), eclass);
}

// Associate a double value with an eclass
setOClassDouble(graph : OGraph, eclass : int, value : double) -> void {
	// Associate double value with the eclass
	graph.double_values := setTree(^(graph.double_values), eclass, value);
}

// Find the eclass associated with a double value
getOClassDouble(graph : OGraph, eclass : int) -> Maybe<double> {
    lookupTree(^(graph.double_values), eclass);
}

// Associate a string value with an eclass
setOClassString(graph : OGraph, eclass : int, value : string) -> void {
	// Associate string value with the eclass
	graph.string_values := setTree(^(graph.string_values), eclass, value);
}

// Find the eclass associated with a string value
getOClassString(graph : OGraph, eclass : int) -> Maybe<string> {
    lookupTree(^(graph.string_values), eclass);
}

// Add a domain to a node's belongsTo list
addDomainToONode(graph : OGraph, nodeId : int, domainId : int) -> void {
    root = findORoot(graph, nodeId);
    switch (lookupTree(^(graph.oclasses), root)) {
        None(): {}; // Node doesn't exist
        Some(oclass): {
            // Only add if not already present
            if (!contains(oclass.node.belongsTo, domainId)) {
                updatedBelongsTo = concat(oclass.node.belongsTo, [domainId]);
                updatedNode = ONode(
                    oclass.node.domain,
                    oclass.node.op,
                    oclass.node.children,
                    updatedBelongsTo
                );
                changeONodeInClass(graph, root, updatedNode);
            }
        }
    }
}

// Remove a domain from a node's belongsTo list
removeDomainFromONode(graph : OGraph, nodeId : int, domainId : int) -> void {
    root = findORoot(graph, nodeId);
    switch (lookupTree(^(graph.oclasses), root)) {
        None(): {}; // Node doesn't exist
        Some(oclass): {
            // Filter out the domain to remove
            updatedBelongsTo = filter(oclass.node.belongsTo, \id -> id != domainId);
            updatedNode = ONode(
                oclass.node.domain,
                oclass.node.op,
                oclass.node.children,
                updatedBelongsTo
            );
            changeONodeInClass(graph, root, updatedNode);
        }
    }
}

// Check if a node belongs to a specific domain
onodeHasDomain(graph : OGraph, nodeId : int, domainId : int) -> bool {
    root = findORoot(graph, nodeId);
    switch (lookupTree(^(graph.oclasses), root)) {
        None(): false; // Node doesn't exist
        Some(oclass): contains(oclass.node.belongsTo, domainId);
    }
}

// Get all domains a node belongs to
getONodeDomains(graph : OGraph, nodeId : int) -> [int] {
    root = findORoot(graph, nodeId);
    switch (lookupTree(^(graph.oclasses), root)) {
        None(): []; // Node doesn't exist
        Some(oclass): oclass.node.belongsTo;
    }
}