// Produced by  flowcpp mango/mango.flow -- file=orbit.mango compile=1 main=orbit_compiled linter=1
import tools/mango/mcode_lib;
import string;
import net/url_parameter;
import tools/orbit/orbit_compiled_parser;
import tools/orbit/orbit_types;
import tools/orbit/orbit_interpreter;
import tools/orbit/prettyprint;
import tools/orbit/orbit_ast;
import tools/orbit/ograph;
import tools/orbit/orbit_simple_ograph;
import tools/orbit/orbit_sexpr_bridge;
import tools/orbit/orbit2sexpr;
import tools/orbit/sexpr/pretty_sexpr;
import tools/orbit/resolve_imports;

// Recursively finds and prints differences between two strings
findDifferences(original : string, converted : string, position : int, totalLen : int) -> void {
	if (position < totalLen) {
		origChar = if (position < strlen(original)) substring(original, position, 1) else "";
		convChar = if (position < strlen(converted)) substring(converted, position, 1) else "";
		
		if (origChar != convChar) {
			println("Position " + i2s(position) + ": '" + origChar + "' vs '" + convChar + "'");
		}
	}
}

main() {
	files = filtermap(getAllUrlParametersArray(), \a -> if (a[1] == "") Some(a[0]) else None());
	if (files == []) {
		println("Usage: orbit <file>");
		println("Optional parameters:");
		println("  trace=1 - Enable detailed tracing of interpretation steps");
		println("  pretty=1 - Only pretty print the parsed result without evaluation");
		println("  sexpr=1 - Use SExpr interpreter and pretty printer instead of Orbit native ones");
		println("  roundtrip=1 - Test roundtrip conversion (Orbit → SExpr → Orbit) and compare results");
	}
	
	// Check if tracing is enabled via URL parameter
	tracingEnabled = getUrlParameter("trace") == "1";
	if (tracingEnabled) {
		println("Tracing enabled: Will show all interpretation steps");
	}
	
	// Check if we should only pretty print without evaluation
	prettyPrintOnly = getUrlParameter("pretty") == "1";
	if (prettyPrintOnly) {
		println("Pretty print only: Will only show parsed AST without evaluation");
	}
	
	// Check if we should use SExpr interpreter and pretty printer
	useSexpr = getUrlParameter("sexpr") == "1";
	if (useSexpr) {
		println("SExpr mode: Using SExpr interpreter and pretty printer");
	}
	
	// Check if we should test roundtrip conversion
	testRoundtrip = getUrlParameter("roundtrip") == "1";
	if (testRoundtrip) {
		println("Roundtrip test mode: Will compare results of Orbit u2192 SExpr u2192 Orbit conversion");
	}
	
	errors = sum(map(files, \f -> {
		if (fileExists(f)) {
			program = getFileContent(f);
			res : Pair<OrMath_expr, string> = parseCompiledMango(f, program, orbit_parse_orbit_compiled, flow(0));
			if (res.second != "") {
				println(f + ": " + res.second);
				1
			} else {
				// Test roundtrip conversion if enabled
				if (testRoundtrip) {
					println("====== ROUNDTRIP TEST ======");
					println("Original file: " + f);
					
					// Step 1: Get pretty-printed original AST
					println("\nSTEP 1: Pretty-printing original Orbit AST");
					original = prettyOrbit(res.first);
					// Step 2: First resolve imports, then convert to SExpr
					println("\nSTEP 2: Resolving imports and converting to SExpr");
					resolvedImports = resolveOrbitImports(makeSet(), res.first);
					sexpr = orbit2sexpr(resolvedImports.second);
					if (prettyPrintOnly) {
						prettyExpr = prettySexpr(sexpr);
						println("SExpr:");
						println(prettyExpr);
					}
					
					// Step 3: Convert back to Orbit
					println("\nSTEP 3: Converting back to Orbit");
					orbitAgain = sexpr2orbit(sexpr);
					
					// Step 4: Pretty-print the converted Orbit and compare
					println("\nSTEP 4: Pretty-printing converted Orbit AST");
					converted = prettyOrbit(orbitAgain);
					
					// Step 5: Compare the results
					println("\nSTEP 5: Comparing results");
					if (original == converted) {
						println("SUCCESS: The roundtrip conversion preserved the structure exactly!");
					} else {
						println("WARNING: The roundtrip conversion resulted in differences");
						
						// Find and display differences for debugging purposes
						println("\nDifferences found (original vs converted):");

						println(toString(original));
						println(toString(converted));

						totalLen = max(strlen(original), strlen(converted));
						
						// Recursively find and print differences
						findDifferences(original, converted, 0, totalLen);
					}
					
					println("====== END ROUNDTRIP TEST ======\n");
					0;
				} else if (prettyPrintOnly) {
					println("Parsed AST:");
					if (useSexpr) {
						// First, resolve all imports without evaluation
						resolvedImports = resolveOrbitImports(makeSet(), res.first);
						// Convert to SExpr and pretty print using bridge
						prettyResult = prettySExprFromOrbit(resolvedImports.second);
						println(prettyResult);
					} else {
						// Use native Orbit pretty printer
						println(prettyOrbit(res.first));
					}
					0;
				} else {
					if (useSexpr) {
						// First, resolve all imports without evaluation
						resolvedImports = resolveOrbitImports(makeSet(), res.first);
						// Convert to SExpr, evaluate with SExpr interpreter using bridge
						result = evaluateWithSExpr(resolvedImports.second);
						
						// Print the result
						println("Result: " + result);
						0;
					} else {
						// Use native Orbit interpreter
						
						// Initialize the orbit runtime functions
						initOrbitInterpreter();
						
						// Create environment with tracing enabled/disabled according to URL parameter
						env = setTracing(emptyOrbEnv(), tracingEnabled);
						
						val = interpretOrbit(env, res.first);
						println("Result: " + prettyOrbit(val.result));
						0;
					}
				}
			}
		} else {
			println("File not found: " + f + " with cwd " + getCurrentDirectory());
			1;
		}
	}));
	quit(errors);
}
