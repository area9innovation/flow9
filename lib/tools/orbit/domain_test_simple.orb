// Simple test case for domain annotations

// Define quote
fn quote(e : ast) = e;

// Create a test graph
let g = makeOGraph("domain_test_simple");

// Add a simple expression and domains
println("Adding basic nodes:");
let expr_id = addOGraph(g, quote(a + b));
let algebra_id = addOGraph(g, quote(Algebra));
println("a + b with ID: " + i2s(expr_id));
println("Algebra domain with ID: " + i2s(algebra_id));

// Add domain to the expression
println("\nTest 1: Direct domain adding");
let add_result = addDomainToNode(g, expr_id, algebra_id);
println("Add domain result: " + i2s(b2i(add_result)));

// Direct internal check for domains
println("\nTest 2: Direct internal check using orbit2ograph");
let resolved_expr = extractOGraph(g, expr_id);
println("Resolved expression: " + prettyOrbit(resolved_expr));

// Try to find the expression with domain annotation
println("\nTest 3: Check domain using findOGraphId");
let found_id = findOGraphId(g, quote((a + b) : Algebra));
println("Found ID for (a + b) : Algebra: " + i2s(found_id));

// Compare with just finding a + b
let found_base = findOGraphId(g, quote(a + b));
println("Found ID for just a + b: " + i2s(found_base));

// Try with processDomainAnnotations
println("\nTest 4: Using processDomainAnnotations");
let expr_with_domain = quote((a + b) : Algebra);
println("Expression with domain: " + prettyOrbit(expr_with_domain));
let processed_id = processDomainAnnotations(g, expr_with_domain);
println("Processed ID: " + i2s(processed_id));

"Simple domain test completed"