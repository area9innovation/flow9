@include<lexical>
@include<list>

// AsciiMath-inspired grammar for Orbit mathematical notation

// Main math expression grammar with precedence levels
math_expr =
	math_expr ";" ws math_expr "" Sequence/2
	// Rewriting patterns
	|> math_expr ( ("=>" | "⇒") ws <math_expr ("if" kwsep math_expr | @true Bool/1) @true Rule/4
		| ("->" | "→") ws <math_expr ("if" kwsep math_expr | @true Bool/1) @false Rule/4
		| ("<=>" | "⇔") ws <math_expr ("if" kwsep math_expr | @true Bool/1) @true Equivalence/4
		| ("<->" | "↔") ws <math_expr ("if" kwsep math_expr | @true Bool/1) @false Equivalence/4
		| ("|-" | "⊢") ws <math_expr ("if" kwsep math_expr | @true Bool/1) Entailment/3
	)

//	|> math_expr ("," ws math_expr Comma/2)*

	// Let, fn, if
	|> "let" kwsep id_type "=" ws <math_expr Let/2
		| "fn" kwsep ws id "(" ws @array<id_type ","> ")" ws @opt<type_annotation> "=" ws math_expr FnDef/4
		| "if" kwsep math_expr "then" kwsep math_expr "else" kwsep <math_expr IfElse/3
		| ('\' | "λ") ws env_bindings @nil id_type @cons @list2array ("." | "->") ws <math_expr Lambda/3  // Lambda (single param) with optional env bindings
		| ('\' | "λ") ws env_bindings ("(" ws)? @array<id_type ","> (")" ws)? ("." | "->") ws <math_expr Lambda/3  // Lambda (multi param) with optional env bindings

	|> // Subset relation and group theory relations
	math_expr (
		("c=" | "⊂") ws math_expr Subset/2
		| "⊲" ws math_expr NormalSubgroup/2  // Normal subgroup relation
		| "≅" ws math_expr Isomorphism/2  // Isomorphism
		| "⋯" ws math_expr DomainPath/2      // Leaf-to-domain path
		| "⋰" ws math_expr DomainUp/2        // Move up in domain hierarchy
		| "⋱" ws math_expr DomainDown/2      // Move down in domain hierarchy
	)*

	|> // Element of relation
	math_expr (("in" | "∈") ws math_expr ElementOf/2)*

	|> // Logical OR
	math_expr (("||" | "∨") ws math_expr LogicalOr/2)*

	|> // Logical AND
	math_expr (("&&" | "∧") ws math_expr LogicalAnd/2)*

	|> // Equality, comparison, and asymptotic relations
	math_expr (
		("==" | "=") ws math_expr Equals/2
		| "!=" ws math_expr NotEquals/2
		| ("<=" | "≤") ws math_expr LessEquals/2
		| "<" ws math_expr LessThan/2
		| (">=" | "≥") ws math_expr GreaterEquals/2
		| ">" ws math_expr GreaterThan/2
		| "≲" ws math_expr ApproxLessEquals/2
		| ("∼" | "≈") ws math_expr ApproxEquals/2
	)*

	|> // Set operations (Union, Intersection, Difference)
	math_expr (
		("union" kwsep | "∪") ws math_expr Union/2
		| ("intersect" kwsep | "∩") ws math_expr Intersection/2
		| ('\' | '∖') ws math_expr SetDifference/2      // NEW: Set Difference
	)*

	|> // Addition and subtraction
	math_expr (
		"+" ws math_expr Add/2
		| "-" ws math_expr Subtract/2
	)*

	|> // Multiplication, division, group/tensor products, composition, action
	math_expr (
		("*" | "·") ws math_expr Multiply/2
		| "/" ws math_expr Divide/2
		| "%" ws math_expr Modulo/2
		| "×" ws math_expr DirectProduct/2   // Direct product of groups
		| "⋊" ws math_expr RightSemiDirectProduct/2  // Right semi-direct product
		| "⋉" ws math_expr LeftSemiDirectProduct/2   // Left semi-direct product
		| "∘" ws math_expr Compose/2          // Function composition
		| "⊗" ws math_expr TensorProduct/2     // Tensor product
		| "•" ws math_expr GroupAction/2        // Group Action
	)*

	|>
	   ("quote" kwsep | "'" ws) <math_expr Quote/1
	   | ("quasiquote" kwsep | "`" !('"') ws) <math_expr Quasiquote/1
	   | ("unquote-splicing" kwsep | "$*" ws ) <math_expr UnquoteSplicing/1
	   | ("unquote" kwsep | "$" ws) <math_expr Unquote/1

	|> // Exponentiation (Right associative)
	math_expr (
		"^" ws <math_expr Exponent/2
		| superscript Superscript/2
	)*

	|> // Unary operators
	(
		"-" ws <math_expr Negate/1
		| ("!" | "¬") ws <math_expr LogicalNot/1
		| "∫" ws <math_expr Integral/1          // Integral (TODO: Improve)
		| "∑" ws <math_expr Summation/1         // Summation (TODO: Improve)
		| "∇" ws <math_expr Gradient/1          // Gradient (nabla)
		| "d/d" id <math_expr Derivative/2       // Derivative
		| "∂/∂" id /*subscript*/ <math_expr PartialDerivative/2 // Partial derivative
		| "|" ws math_expr "|" ws GroupOrder/1   // Order of a group G (|G|)
		| "‖" ws math_expr "‖" ws Norm/1         
	)

	|> // Function calls, index access
		math_expr (
			"(" ws @array<math_expr ","> ")" ws Function/2
			| "[" ws math_expr "]" ws Index/2
			| "." ws id Field/2
			| "φ" ws "(" ws math_expr ")" ws Homomorphism/2  // Homomorphism
			| "is" kwsep paren Match/2
			| ":" ws <math_expr TypeAnnotation/2
			| "!:" ws <math_expr NotTypeAnnotation/2
		)*

	|> // Annotations and Subscripts/Superscripts
		math_expr (
			subscript Subscript/2
			| "[" ws math_expr ":=" ws math_expr "]" ws TypeSubstitution/3
		)*
	|> ( // Primary expressions
		$double ws @s2d Double/1
		| $signed_int ws @s2i Int/1
		| string @unescape String/1
		| "true" kwsep @true Bool/1
		| "false" kwsep @false Bool/1
		| "if" kwsep math_expr "then" kwsep math_expr "else" kwsep math_expr "" IfElse/3
		| "{" ws @array<math_expr ","> "|" ws math_expr "}" ws SetComprehension/2  // Set comprehension
		| "{" ws @array<math_expr ","> "}" ws SetLiteral/1  // Set literal
		| "⟨" ws @array<math_expr ","> "⟩" ws Ideal/1       // Ideal Notation
		| "[" ws @array<math_expr ","> "]" ws Array/1
		| "∀" ws @array<math_expr ","> Forall/1  // Universal quantifier
		| "∃" ws @array<math_expr ","> Exists/1  // Existential quantifier
		| "import" kwsep path Import/1           // Import expression
		| paren
		| variable_atom Identifier/1             // Variable starts with lowercase
		| constructor_atom UId/1                 // Constructor starts with uppercase
		| $'?'+ ws TypeVar/1
		| interpolated_string InterpolatedString/1 // Interpolated string
		| "`" !('"') ws $operator "`" ws OperatorSymbol/1
		| ('…' | "...") ws Ellipsis/0
		| "∅" ws EmptySet/0                      
	);

// Variable atoms (start with lowercase)
variable_atom = $(lowercase atom_rest*) ws;

// Constructor atoms (start with uppercase)
constructor_atom = $(uppercase atom_rest*) ws;

// Uppercase letters, including Greek uppercase letters and math domains
uppercase = 'A'-'Z' | greek_letter_upper;

// Lowercase letters, including Greek lowercase letters
lowercase = 'a'-'z' | "_" | greek_letter_lower | '▢' | '❓';

// The rest of the atom can include many characters
atom_rest = 'a'-'z' | 'A'-'Z' | '0'-'9' | "_" | "'" | greek_letter_lower | greek_letter_upper;

// Greek uppercase letters
greek_letter_upper =
	'Α' | 'Β' | 'Γ' | 'Δ' | 'Ε' | 'Ζ' | 'Η' | 'Θ' | 'Ι' | 'Κ' | 'Λ' | 'Μ' |
	'Ν' | 'Ξ' | 'Ο' | 'Π' | 'Ρ' | 'Σ' | 'Τ' | 'Υ' | 'Φ' | 'Χ' | 'Ψ' | 'Ω' |
	// Math domains as uppercase symbols
	'ℤ' | 'ℚ' | 'ℝ' | 'ℂ' | 'ℕ';

// Greek lowercase letters
greek_letter_lower =
	'α' | 'β' | 'γ' | 'δ' | 'ε' | 'ζ' | 'η' | 'θ' | 'ι' | 'κ' | 'λ' | 'μ' |
	'ν' | 'ξ' | 'ο' | 'π' | 'ρ' | 'σ' | 'τ' | 'υ' | 'φ' | 'χ' | 'ψ' | 'ω' | 'ς' |
	'∇'; // nabla is lowercase

paren = "(" ws math_expr optsemi ")" ws;

// Path format for imports (e.g., path/to/file)
path = $((bid ("/" bid)*)) ws;

operator = 
	"+" | "-" | "*" | "·" | "/" | "%" | "×" | "⋊" | "⋉" | "∘" | "^" | "⊗" | "•" | 
	"&&" | "∧" | "||" | "∨" | "!" | "¬" |
	"==" | "=" | "!=" | "<" | ">" | "<=" | "≤" | ">=" | "≥" | "≲" | "∼" | 
	"⊂" | "c=" | "∈" | "in" | "∪" | "∩" | 
	"⊲" | "≅" | "⋯" | "⋰" | "⋱" | 
	"→" | "->" | ":" | "!:" | "⇒" | "=>" | "⇔" | "<=>" | "⊢" | "|-" |
	";" | "." | "[]" | "∫" | "∑" | "∂" | "|" | "‖" | "φ" | '\' | "λ" | "⟨" | "⟩"
	;

// Environment bindings for closures
env_bindings = "{" ws @array<env_binding ","> "}" ws | @nil @list2array;

// Individual environment binding
env_binding = id "=" ws math_expr EnvBinding/2;

// Function parameter definition
id_type = id @opt<type_annotation> IdType/2;

// Type annotation
type_annotation = ":" ws math_expr Type/1;

// Subscripts for variables (e.g., T₁, x₀)
subscript = $("₋"? ("₀" | "₁" | "₂" | "₃" | "₄" | "₅" | "₆" | "₇" | "₈" | "₉")+);
// "," | "₊" | "₋" | "₌" | "₍" | "₎" | "ₐ" | "ₑ" | "ₒ" | "ₓ" | "ₔ" | "ₕ" | "ₖ" | "ₗ" | "ₘ" | "ₙ" | "ₚ" | "ₛ" | "ₜ"

// Superscripts for variables (e.g., x², f⁻¹)
superscript = $("⁻"? ("¹" | "²" | "³" | "⁴" | "⁵" | "⁶" | "⁷" | "⁸" | "⁹" | "⁰")+ | "ᵀ"); // Allow just ᵀ
 // "⁺" | "⁻" | "⁼" | "⁽" | "⁾" |  "ⁿ"

interpolated_string = "`" '"' @array0<istring_part> '"' ws;

istring_part = ("$" "(" ws math_expr ")" | "$" variable_atom Identifier/1) StringInterpolation/1
	| istring_literal StringLiteral/1;

// String literal part (everything except $ and ending quote)
istring_literal = $(istring_char+);
istring_char = !("$" | '"' | '\') anychar | '\' anychar;

optsemi = (";" ws)?;

@include<highlight>

// Syntax highlighting annotations
@highlight<math_expr "keyword.control">
@highlight<variable_atom "variable.parameter">
@highlight<constructor_atom "entity.name.function">
@highlight<string "string.quoted.double">
@highlight<signed_int "constant.numeric">
@highlight<double "constant.numeric">
@highlight<operator "constant.other.symbol">
@highlight<ws "comment.block">

// Bracket matching
@bracket<"(" ")">
@bracket<"[" "]">
@bracket<"{" "}">
@bracket<"⟨" "⟩"> 
@bracket<"|" "|">
@bracket<"‖" "‖">

// Comments
@linecomment<"//">
@blockcomment<"/*" "*/">

// Custom commands
@vscommand<"Compile Orbit" "orbit ${relativeFile}" "F7">

ws math_expr optsemi
