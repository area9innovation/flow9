@include<lexical>  // Basic lexical rules (ws, id, string, etc.)
@include<list>

@make_pattern<expr pattern_variable domain> = (
	// Pattern is extended with domain-annotated expression
	pattern =
		pattern ":" ws domain DomainPattern/2
		| pattern_variable PatternVariable/1
		| expr Pattern/1
		;
	// Recursively extend expressions with pattern
	expr = pattern | expr;
	pattern
);

// Instantiate a rewriting system with a given set of languages
@make_rewrite_system<lhs rhs cond_expr rule_sep> = (

	rewrite_system = @array<rewrite rule_sep> RewriteSystem/1;

	// Main grammar function that takes parameters to customize syntax for different contexts
	rewrite =
		rule_definition
		| equivalence
		| entailment
		| domain_hierarchy
		| lhs
		;

	// Rule definition: lhs => rhs with optional condition
	rule_definition = lhs ("=>" | "⇒") ws rhs @opt<conditional> Rule/3;

	// Equivalence statement: expr1 ⇔ expr2
	equivalence = lhs ("<=>" | "⇔") ws lhs @opt<conditional>  Equivalence/3;

	// Entailment: lhs ⊢ lhs
	entailment = lhs ("|-" | "⊢" ws) lhs @opt<conditional>  Entailment/3;

	// Domain hierarchy: Domain1 ⊂ Domain2
	domain_hierarchy = domain_expr ("c=" | "⊂" ws) domain_expr DomainHierarchy/2;

	// Optional conditional clause for rules
	conditional = "if" ws cond_expr Conditional/1;
	rewrite_system	
);
""