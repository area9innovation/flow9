@include<lexical>
@include<list>

// AsciiMath-inspired grammar for Orbit mathematical notation

// Main math expression grammar with precedence levels
math_expr = 
	math_expr ";" ws math_expr "" Sequence/2
	// Rewriting patterns
	|> math_expr ( ("=>" | "⇒") ws <math_expr ("if" ws math_expr | @true Bool/1) @true Rule/4
		| ("->" | "→") ws <math_expr ("if" ws math_expr | @true Bool/1) @false Rule/4
		| ("<=>" | "⇔") ws <math_expr ("if" ws math_expr | @true Bool/1) @true Equivalence/4
		| ("<->" | "↔") ws <math_expr ("if" ws math_expr | @true Bool/1) @false Equivalence/4
		| ("|-" | "⊢") ws <math_expr ("if" ws math_expr | @true Bool/1) Entailment/3
	)

//	|> math_expr ("," ws math_expr Comma/2)*

	// Let, fn, if
	|> "let" kwsep id_type "=" ws <math_expr Let/2
		| "fn" kwsep ws id "(" ws @array<id_type ","> ")" ws @opt<type_annotation> "=" ws math_expr FnDef/4
		| "if" kwsep math_expr "then" kwsep math_expr "else" kwsep <math_expr IfElse/3
		| ('\' | "λ") ws env_bindings @nil id_type @cons @list2array "." ws <math_expr Lambda/3  // Lambda (single param) with optional env bindings
		| ('\' | "λ") ws env_bindings "(" ws @array<id_type ","> ")" ws "." ws <math_expr Lambda/3  // Lambda (multi param) with optional env bindings

	|> // Subset relation and group theory relations
	math_expr (
		("c=" | "⊂") ws math_expr Subset/2
		| "⊲" ws math_expr NormalSubgroup/2  // Normal subgroup relation
		| "≅" ws math_expr Isomorphism/2  // Isomorphism
	)*

	|> // Element of relation
	math_expr (("in" | "∈") ws math_expr ElementOf/2)*
	
	|> // Logical OR
	math_expr (("||" | "∨") ws math_expr LogicalOr/2)*

	|> // Logical AND
	math_expr (("&&" | "∧") ws math_expr LogicalAnd/2)*
	
	|> // Equality and comparison
	math_expr (
		("==" | "=") ws math_expr Equals/2
		| "!=" ws math_expr NotEquals/2
		| ("<=" | "≤") ws math_expr LessEquals/2
		| "<" ws math_expr LessThan/2
		| (">=" | "≥") ws math_expr GreaterEquals/2
		| ">" ws math_expr GreaterThan/2
	)* 
	
	|> // Set operations
	math_expr (
		("union" kwsep | "∪") ws math_expr Union/2
		| ("intersect" kwsep | "∩") ws math_expr Intersection/2
	)*
	
	|> math_expr (("->" | "→") ws math_expr FunctionType/2)*
	
	|> // Addition and subtraction
	math_expr (
		"+" ws math_expr Add/2 
		| "-" ws math_expr Subtract/2
	)*
	
	|> // Multiplication and division
	math_expr (
		("*" | "·") ws math_expr Multiply/2 
		| "/" ws math_expr Divide/2
		| "%" ws math_expr Modulo/2
		| "×" ws math_expr DirectProduct/2   // Direct product of groups
		| "⋊" ws math_expr RightSemiDirectProduct/2  // Right semi-direct product
		| "⋉" ws math_expr LeftSemiDirectProduct/2   // Left semi-direct product
		| "∘" ws math_expr Compose/2  // Function composition
		| "⊗" ws math_expr TensorProduct/2  // Tensor product
	)*
	
	|> // Exponentiation
	math_expr (
		"^" ws <math_expr Exponent/2
		| superscript Superscript/2
	)*
	
	|> // Unary operators
	(
		"-" ws <math_expr Negate/1
		| ("!" | "¬") ws <math_expr LogicalNot/1
		| "∫" ws <math_expr Integral/1  // Integral
		| "∑" ws <math_expr Summation/1  // Summation
		| "∇" ws <math_expr Gradient/1  // Gradient (nabla)
		| "d/d" id <math_expr Derivative/2  // Derivative
		| "∂/∂" id /*subscript*/ <math_expr PartialDerivative/2 // Partial derivative
		| "|" ws math_expr "|" ws GroupOrder/1  // Order of a group G (|G|)
	)

	|> // Function calls, index access
		math_expr (
			"(" ws @array<math_expr ","> ")" ws Function/2
			| "[" ws math_expr "]" ws Index/2
			| "." ws id Field/2
			| "φ" ws "(" ws math_expr ")" ws Homomorphism/2  // Homomorphism
		)*

	|>
		math_expr (
			subscript Subscript/2
			| ":" ws math_expr TypeAnnotation/2
			| "!:" ws math_expr NotTypeAnnotation/2
			| "[" ws math_expr ":=" ws math_expr "]" ws TypeSubstitution/3
			| "is" kwsep paren Match/2
		)*
	|> (
		$double ws @s2d Double/1 
		| $signed_int ws @s2i Int/1
		| string @unescape String/1
		| "true" kwsep @true Bool/1
		| "false" kwsep @false Bool/1
		| "{" ws @array<math_expr ","> "|" ws math_expr "}" ws SetComprehension/2  // Set comprehension
		| "{" ws @array<math_expr ","> "}" ws SetLiteral/1  // Set literal
		| "[" ws @array<math_expr ","> "]" ws Array/1
		| ("forall" kwsep | "∀") ws @array<math_expr ","> ("," | ":") ws math_expr Forall/2  // Universal quantifier
		| ("exists" kwsep | "∃") ws @array<math_expr ","> ("," | ":") ws math_expr Exists/2  // Existential quantifier
		| "import" kwsep path Import/1  // Import expression
		| paren
		| greek_letter GreekLetter/1
		| id Identifier/1
		| uid Variable/1
		| $'?'+ ws TypeVar/1
		| "`" ws $operator "`" ws OperatorSymbol/1
		| ('…' | "...") ws Ellipsis/1
	);

paren = "(" ws math_expr optsemi ")" ws;

// Path format for imports (e.g., path/to/file)
path = $((bid ("/" bid)*)) ws;

operator =
	"+" | "-" | "*" | "·" | "/" | "%" | "×" | "⋊" | "⋉" | "∘" | "^" | "⊗" |
	"&&" | "∧" | "||" | "∨" | "!" | "¬" |
	"==" | "=" | "!=" | "<" | ">" | "<=" | "≤" | ">=" | "≥" |
	"⊂" | "c=" | "∈" | "in" | "∪" | "∩" | "⊲" | "≅" |
	"→" | "->" | ":" | "!:" | "⇒" | "=>" | "⇔" | "<=>" | "⊢" | "|-" |
	";" | "." | "[]" | "∫" | "∑" | "∂" | "|" | "φ"
	;

// Environment bindings for closures
env_bindings = "{" ws @array<env_binding ","> "}" ws | @nil @list2array;

// Individual environment binding
env_binding = id "=" ws math_expr EnvBinding/2;

// Function parameter definition
id_type = id @opt<type_annotation> IdType/2;

// Type annotation
type_annotation = ":" ws math_expr Type/1;

// Subscripts for variables (e.g., T₁, x₀)
subscript = $("₋"? ("₀" | "₁" | "₂" | "₃" | "₄" | "₅" | "₆" | "₇" | "₈" | "₉")+);
// "," | "₊" | "₋" | "₌" | "₍" | "₎" | "ₐ" | "ₑ" | "ₒ" | "ₓ" | "ₔ" | "ₕ" | "ₖ" | "ₗ" | "ₘ" | "ₙ" | "ₚ" | "ₛ" | "ₜ"

// Superscripts for variables (e.g., x², f⁻¹)
superscript = $("⁻"? ("¹" | "²" | "³" | "⁴" | "⁵" | "⁶" | "⁷" | "⁸" | "⁹" | "⁰")+);
 // "⁺" | "⁻" | "⁼" | "⁽" | "⁾" |  "ⁿ"

// Greek letters (with both Unicode and ASCII names) and math domains
greek_letter = 
	("alpha" kwsep | "α") ws @'"alpha"'
	| ("beta" kwsep | "β") ws @'"beta"'
	| ("gamma" kwsep | "γ") ws @'"gamma"'
	| ("delta" kwsep | "δ") ws @'"delta"'
	| ("epsilon" kwsep | "ε") ws @'"epsilon"'
	| ("zeta" kwsep | "ζ") ws @'"zeta"'
	| ("eta" kwsep | "η") ws @'"eta"'
	| ("theta" kwsep | "θ") ws @'"theta"'
	| ("iota" kwsep | "ι") ws @'"iota"'
	| ("kappa" kwsep | "κ") ws @'"kappa"'
	| ("lambda" kwsep | "λ") ws @'"lambda"'
	| ("mu" kwsep | "μ") ws @'"mu"'
	| ("nu" kwsep | "ν") ws @'"nu"'
	| ("xi" kwsep | "ξ") ws @'"xi"'
	| ("omicron" kwsep | "ο") ws @'"omicron"'
	| ("pi" kwsep  | "π") ws @'"pi"'
	| ("rho" kwsep | "ρ") ws @'"rho"'
	| ("sigma" kwsep | "σ") ws @'"sigma"'
	| ("tau" kwsep | "τ") ws @'"tau"'
	| ("upsilon" kwsep | "υ") ws @'"upsilon"'
	| ("phi" kwsep | "φ") ws @'"phi"'
	| ("chi" kwsep | "χ") ws @'"chi"'
	| ("psi" kwsep | "ψ") ws @'"psi"'
	| ("omega" kwsep | "ω") ws @'"omega"'
	// Math domains
	| ("Q8" kwsep | "Q₈") ws @'"Q8"' // Quaternion group
	| ("Z" kwsep | "ℤ") ws @'"Z"' // Integers
	| ("Q" kwsep | "ℚ") ws @'"Q"' // Rationals
	| ("R" kwsep | "ℝ") ws @'"R"' // Reals
	| ("C" kwsep | "ℂ") ws @'"C"' // Complex numbers
	| ("N" kwsep | "ℕ") ws @'"N"' // Natural numbers
	| ("Zn" | "ℤₙ") ws @'"Zn"' // Integers modulo n
	| $(("Z/" | "ℤ/") (('0'-'9')+ ("Z" | "ℤ"))) ws // Integers modulo n (ℤ/nℤ format)
	| ("nabla" kwsep | "∇") ws @'"nabla"' // Gradient operator
	;

optsemi = (";" ws)?;

ws math_expr optsemi