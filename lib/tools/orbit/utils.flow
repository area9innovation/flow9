import tools/orbit/orbit2core;
import tools/orbit/orbit_types;
import ds/set;
import ds/tree;
import maybe;

export {
    // Helper to collect parameter names from IdType array
    findParamNamesFromIdTypes(idTypes : [OrIdType]) -> Set<string>;
    
    // Creates a mapping of variable names to their values for closure capture
    createCaptureEnv(env : Tree<string, OrMath_expr>, freeVars : Set<string>) -> Tree<string, OrMath_expr>;
}

// Helper to collect all variables from array of IdType
findParamNamesFromIdTypes(idTypes : [OrIdType]) -> Set<string> {
    fold(idTypes, makeSet(), \acc, idType -> insertSet(acc, idType.id));
}

// Create a capture environment with only the free variables needed
createCaptureEnv(env : Tree<string, OrMath_expr>, freeVars : Set<string>) -> Tree<string, OrMath_expr> {
    fold(set2array(freeVars), makeTree(), \acc, varName -> {
        switch (lookupTree(env, varName)) {
            Some(value): setTree(acc, varName, value);
            None(): acc; // Skip if not found
        }
    });
}