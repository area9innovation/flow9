import tools/orbit/orbit_types;
import ds/set;
import ds/tree;
import maybe;
import string;
import math/math; // For i2d and other numeric conversions

export {
    // Helper to collect parameter names from IdType array
    findParamNamesFromIdTypes(idTypes : [OrIdType]) -> Set<string>;
    
    // Creates a mapping of variable names to their values for closure capture
    createCaptureEnv(env : Tree<string, OrMath_expr>, freeVars : Set<string>) -> Tree<string, OrMath_expr>;

    // Helper functions to extract typed values from OrMath_expr
    // Each returns the value if the expression is of the expected type
    // Otherwise, prints an error message and returns a default value
    
    // Extract an int value from an OrMath_expr
    getOInt(expr : OrMath_expr, errorContext : string) -> int;
    
    // Extract a bool value from an OrMath_expr
    getOBool(expr : OrMath_expr, errorContext : string) -> bool;
    
    // Extract a string value from an OrMath_expr
    getOString(expr : OrMath_expr, errorContext : string) -> string;
    
    // Extract a double value from an OrMath_expr
    getODouble(expr : OrMath_expr, errorContext : string) -> double;
}

// Helper to collect all variables from array of IdType
findParamNamesFromIdTypes(idTypes : [OrIdType]) -> Set<string> {
    fold(idTypes, makeSet(), \acc, idType -> insertSet(acc, idType.id));
}

// Create a capture environment with only the free variables needed
createCaptureEnv(env : Tree<string, OrMath_expr>, freeVars : Set<string>) -> Tree<string, OrMath_expr> {
    fold(set2array(freeVars), makeTree(), \acc, varName -> {
        switch (lookupTree(env, varName)) {
            Some(value): setTree(acc, varName, value);
            None(): acc; // Skip if not found
        }
    });
}

// Extract an int value from an OrMath_expr
getOInt(expr : OrMath_expr, errorContext : string) -> int {
    switch (expr) {
        OrInt(i): i;
        default: {
            println("ERROR in " + errorContext + ": Expected an integer but got " + expr.structname);
            0; // Default value for int
        }
    }
}

// Extract a bool value from an OrMath_expr
getOBool(expr : OrMath_expr, errorContext : string) -> bool {
    switch (expr) {
        OrBool(b): b;
        OrInt(i): i != 0; // Treat non-zero integers as true
        default: {
            println("WARNING in " + errorContext + ": Expected a boolean but got " + expr.structname + ", using default");
            false; // Default value for bool
        }
    }
}

// Extract a string value from an OrMath_expr
getOString(expr : OrMath_expr, errorContext : string) -> string {
    switch (expr) {
        OrString(s): s;
        default: {
            println("WARNING in " + errorContext + ": Expected a string but got " + expr.structname + ", using default");
            "default"; // Default value for string
        }
    }
}

// Extract a double value from an OrMath_expr
getODouble(expr : OrMath_expr, errorContext : string) -> double {
    switch (expr) {
        OrDouble(d): d;
        OrInt(i): i2d(i); // Convert integers to doubles
        default: {
            println("WARNING in " + errorContext + ": Expected a double but got " + expr.structname + ", using default");
            0.0; // Default value for double
        }
    }
}