import tools/orbit/orbit_env;

export {
	// Apply variable bindings to an expression
	// TODO: This should be working on the ograph directly instead.
	applyBindings(expr : OrMath_expr, bindings : Tree<string, OrMath_expr>) -> OrMath_expr;
}

// Apply variable bindings to an expression
applyBindings(expr : OrMath_expr, bindings : Tree<string, OrMath_expr>) -> OrMath_expr {
	switch (expr) {
		// Variable substitution - core of pattern matching
		OrVariable(id): {
			switch (lookupTree(bindings, id)) {
				Some(val): val;
				None(): expr;
			}
		}
		OrIdentifier(id): {
			switch (lookupTree(bindings, id)) {
				Some(val): val;
				None(): expr;
			}
		}

		// Function application and constructors
		OrFunction(fnExpr, args): {
			OrFunction(
				applyBindings(fnExpr, bindings),
				map(args, \arg -> applyBindings(arg, bindings))
			);
		}

		// Arithmetic operations
		OrAdd(a, b): OrAdd(applyBindings(a, bindings), applyBindings(b, bindings));
		OrSubtract(a, b): OrSubtract(applyBindings(a, bindings), applyBindings(b, bindings));
		OrMultiply(a, b): OrMultiply(applyBindings(a, bindings), applyBindings(b, bindings));
		OrDivide(a, b): OrDivide(applyBindings(a, bindings), applyBindings(b, bindings));
		OrNegate(a): OrNegate(applyBindings(a, bindings));
		OrExponent(a, b): OrExponent(applyBindings(a, bindings), applyBindings(b, bindings));

		// Comparison operations
		OrEquals(a, b): OrEquals(applyBindings(a, bindings), applyBindings(b, bindings));
		OrNotEquals(a, b): OrNotEquals(applyBindings(a, bindings), applyBindings(b, bindings));
		OrGreaterThan(a, b): OrGreaterThan(applyBindings(a, bindings), applyBindings(b, bindings));
		OrGreaterEquals(a, b): OrGreaterEquals(applyBindings(a, bindings), applyBindings(b, bindings));
		OrLessThan(a, b): OrLessThan(applyBindings(a, bindings), applyBindings(b, bindings));
		OrLessEquals(a, b): OrLessEquals(applyBindings(a, bindings), applyBindings(b, bindings));

		// Logical operations
		OrLogicalAnd(a, b): OrLogicalAnd(applyBindings(a, bindings), applyBindings(b, bindings));
		OrLogicalOr(a, b): OrLogicalOr(applyBindings(a, bindings), applyBindings(b, bindings));
		OrLogicalNot(a): OrLogicalNot(applyBindings(a, bindings));

		// Control flow
		OrIfElse(cond, thenExpr, elseExpr): OrIfElse(
			applyBindings(cond, bindings),
			applyBindings(thenExpr, bindings),
			applyBindings(elseExpr, bindings)
		);

		// Structure and sequence
		OrLambda(lambdaBindings, params, body): {
			// Transform the lambda bindings
			newBindings = map(lambdaBindings, \binding -> {
				OrEnvBinding(binding.id, applyBindings(binding.math_expr, bindings));
			});
			// Keep parameter names but transform body
			OrLambda(newBindings, params, applyBindings(body, bindings));
		}
		OrSequence(a, b): OrSequence(applyBindings(a, bindings), applyBindings(b, bindings));
		OrLet(idType, val): OrLet(idType, applyBindings(val, bindings));

		// Set operations
		OrArray(items): OrArray(map(items, \item -> applyBindings(item, bindings)));
		OrSetLiteral(items): OrSetLiteral(map(items, \item -> applyBindings(item, bindings)));
		OrUnion(a, b): OrUnion(applyBindings(a, bindings), applyBindings(b, bindings));
		OrIntersection(a, b): OrIntersection(applyBindings(a, bindings), applyBindings(b, bindings));
		OrElementOf(a, b): OrElementOf(applyBindings(a, bindings), applyBindings(b, bindings));
		OrSubset(a, b): OrSubset(applyBindings(a, bindings), applyBindings(b, bindings));
		OrSetComprehension(items, predicate): OrSetComprehension(
			map(items, \item -> applyBindings(item, bindings)),
			applyBindings(predicate, bindings)
		);

		// Type operations
		OrTypeAnnotation(expr1, type1): OrTypeAnnotation(
			applyBindings(expr1, bindings),
			applyBindings(type1, bindings)
		);
		OrTypeSubstitution(expr1, id1, replacement1): OrTypeSubstitution(
			applyBindings(expr1, bindings),
			applyBindings(id1, bindings),
			applyBindings(replacement1, bindings)
		);

		// Rewrite rules
		OrRule(a, b, cond, full): OrRule(
			applyBindings(a, bindings), 
			applyBindings(b, bindings),
			applyBindings(cond, bindings),
			full
		);
		OrEquivalence(a, b, cond, full): OrEquivalence(
			applyBindings(a, bindings), 
			applyBindings(b, bindings),
			applyBindings(cond, bindings),
			full
		);
		OrEntailment(a, b, cond): OrEntailment(
			applyBindings(a, bindings), 
			applyBindings(b, bindings),
			applyBindings(cond, bindings)
		);

		// Quantifiers
		OrForall(vars, body): OrForall(
			map(vars, \v -> applyBindings(v, bindings)),
			applyBindings(body, bindings)
		);
		OrExists(vars, body): OrExists(
			map(vars, \v -> applyBindings(v, bindings)),
			applyBindings(body, bindings)
		);

		// Other operations that need variable substitution
		OrMatch(matchExpr, patterns): OrMatch(applyBindings(matchExpr, bindings), applyBindings(patterns, bindings));

		// Default: primitives and unimplemented expressions don't need substitution
		OrBool(bool1): expr;
		OrInt(int1): expr;
		OrDouble(double1): expr;
		OrString(string1): expr;
		OrImport(path): expr;
		default: {
			println("applyBindings: TODO: Handle: " + toString(expr));
			expr; 
		}
	}
}

