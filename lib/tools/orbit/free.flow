import tools/orbit/orbit_types;
import ds/set;
import ds/tree;

export {
    // Returns the set of free variables in an expression
    findFreeVars(expr : OrMath_expr, boundVars : Set<string>) -> Set<string>;
    
    // Convenience function that starts with an empty set of bound variables
    findFreeVarsInExpr(expr : OrMath_expr) -> Set<string>;
    
    // Create environment bindings for free variables using current environment
    createEnvBindings(freeVars : Set<string>, env : Tree<string, OrMath_expr>) -> [OrEnvBinding];
}

// Main function to find free variables
findFreeVars(expr : OrMath_expr, boundVars : Set<string>) -> Set<string> {
    switch (expr) {
        OrAdd(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrArray(exprs): mergeFreeVarSets(exprs, boundVars);
        OrBool(__): makeSet();
        OrCompose(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrDirectProduct(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrLeftSemiDirectProduct(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrRightSemiDirectProduct(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrDivide(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrDouble(__): makeSet();
        OrElementOf(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
		OrEllipsis(): makeSet();
        OrEntailment(e1, e2, e3): mergeSets(findFreeVars(e1, boundVars), mergeSets(findFreeVars(e2, boundVars), findFreeVars(e3, boundVars)));
        OrEquals(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrEquivalence(e1, e2, e3, full): mergeSets(findFreeVars(e1, boundVars), mergeSets(findFreeVars(e2, boundVars), findFreeVars(e3, boundVars)));
        OrExists(params, body): {
            // Extract parameter names to add to bound variables
            newBoundVars = fold(params, boundVars, \acc, param -> {
                switch (param) {
                    OrIdentifier(id): insertSet(acc, id);
                    default: acc;
                }
            });
            findFreeVars(body, newBoundVars);
        }
        OrExponent(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrField(e, __): findFreeVars(e, boundVars);
        OrFnDef(id, params, __, body): {
            // Add function name and parameters to bound variables
            newBoundVars = fold(params, insertSet(boundVars, id), \acc, param -> {
                insertSet(acc, param.id);
            });
            findFreeVars(body, newBoundVars);
        }
        OrForall(params, body): {
            // Extract parameter names to add to bound variables
            newBoundVars = fold(params, boundVars, \acc, param -> {
                switch (param) {
                    OrIdentifier(id): insertSet(acc, id);
                    default: acc;
                }
            });
            findFreeVars(body, newBoundVars);
        }
        OrFunction(fn, args): {
            // Free variables in the function and arguments
            mergeSets(findFreeVars(fn, boundVars), mergeFreeVarSets(args, boundVars));
        }
        OrFunctionType(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrGreaterEquals(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrGreaterThan(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrGreekLetter(__): makeSet();
        OrIdentifier(id): {
            if (containsSet(boundVars, id)) makeSet() else makeSet1(id);
        }
		OrOperatorSymbol(__): makeSet();
        OrIfElse(cond, thenExpr, elseExpr): {
            mergeSets(findFreeVars(cond, boundVars), 
                mergeSets(findFreeVars(thenExpr, boundVars), findFreeVars(elseExpr, boundVars)));
        }
        OrImport(__): makeSet();
        OrIndex(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrInt(__): makeSet();
        OrIntersection(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrLambda(__, params, body): {
            // Add parameters to bound variables
            newBoundVars = fold(params, boundVars, \acc, param -> {
                insertSet(acc, param.id);
            });
            findFreeVars(body, newBoundVars);
        }
        OrLessEquals(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrLessThan(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrLet(idType, value): {
            // Only the value can have free variables
            findFreeVars(value, boundVars);
        }
        OrLogicalAnd(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrLogicalNot(e): findFreeVars(e, boundVars);
        OrLogicalOr(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrMatch(value, pattern): mergeSets(findFreeVars(value, boundVars), findFreeVars(pattern, boundVars));
        OrModulo(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrMultiply(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrNegate(e): findFreeVars(e, boundVars);
        OrNotEquals(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrNotTypeAnnotation(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrRule(e1, e2, e3, full): mergeSets(findFreeVars(e1, boundVars), mergeSets(findFreeVars(e2, boundVars), findFreeVars(e3, boundVars)));
        OrSequence(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrSetComprehension(params, body): {
            // Extract parameter names to add to bound variables
            newBoundVars = fold(params, boundVars, \acc, param -> {
                switch (param) {
                    OrIdentifier(id): insertSet(acc, id);
                    default: acc;
                }
            });
            findFreeVars(body, newBoundVars);
        }
        OrSetLiteral(exprs): mergeFreeVarSets(exprs, boundVars);
        OrString(__): makeSet();
        OrSubscript(e, __): findFreeVars(e, boundVars);
        OrSubset(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrSubtract(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrSuperscript(e, __): findFreeVars(e, boundVars);
        OrTypeAnnotation(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrTypeSubstitution(e1, e2, e3): mergeSets(findFreeVars(e1, boundVars), mergeSets(findFreeVars(e2, boundVars), findFreeVars(e3, boundVars)));
        OrTypeVar(__): makeSet();
        OrUnion(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrUId(uid): {
            if (containsSet(boundVars, uid)) makeSet() else makeSet1(uid);
        }
        // Added operators
        OrDerivative(id, e): findFreeVars(e, boundVars);
        OrGradient(e): findFreeVars(e, boundVars);
        OrGroupOrder(e): findFreeVars(e, boundVars);
        OrHomomorphism(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrIntegral(e): findFreeVars(e, boundVars);
        OrIsomorphism(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrNormalSubgroup(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
        OrPartialDerivative(id, e): findFreeVars(e, boundVars);
        OrSummation(e): findFreeVars(e, boundVars);
        OrTensorProduct(e1, e2): mergeSets(findFreeVars(e1, boundVars), findFreeVars(e2, boundVars));
    }
}

// Helper to merge sets of free variables from multiple expressions
mergeFreeVarSets(exprs : [OrMath_expr], boundVars : Set<string>) -> Set<string> {
    fold(exprs, makeSet(), \acc, expr -> mergeSets(acc, findFreeVars(expr, boundVars)));
}

// Convenience function that starts with an empty set of bound variables
findFreeVarsInExpr(expr : OrMath_expr) -> Set<string> {
    findFreeVars(expr, makeSet());
}

// Create environment bindings for free variables using current environment
createEnvBindings(freeVars : Set<string>, env : Tree<string, OrMath_expr>) -> [OrEnvBinding] {
    // Convert the set of free variables to an array
    freeVarsArray = set2array(freeVars);
    
    // Create a binding for each free variable that exists in the environment
    filtermap(freeVarsArray, \id -> {
        lookupResult = lookupTree(env, id);
        switch (lookupResult) {
            Some(value): Some(OrEnvBinding(id, value));
            None(): None();
        }
    });
}