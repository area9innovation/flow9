(ws = (s)*;
(uid = $('A'-'Z' (alnum)*) ws;
(type_annotation = ":" ws math_expr Type/1;
(superscript = $(("⁻")? (("¹" | ("²" | ("³" | ("⁴" | ("⁵" | ("⁶" | ("⁷" | ("⁸" | ("⁹" | 
  "⁰"))))))))))+);
(subscript = $(("₋")? (("₀" | ("₁" | ("₂" | ("₃" | ("₄" | ("₅" | ("₆" | ("₇" | ("₈" | 
  "₉"))))))))))+);
(string = $('"' (onechar)* '"') ws;
(signed_int = ("-")? int;
(s = (cs)+;
(paren = "(" ws math_expr optsemi ")" ws;
(optsemi = (";" ws)?;
(onechar = ("\\" ("u" hexdigit hexdigit hexdigit hexdigit | ("x" hexdigit hexdigit | ("\\"
   | ('"' | ("n" | ("t" | "r")))))) | !'"' !"\\" anychar);
(math_expr = math_expr1 (";" ws math_expr Sequence/2)?;
(math_expr1 = math_expr2 ((("=>" | "⇒") ws math_expr2 ("if" ws math_expr2 | 
  @true Bool/1) Rule/3 | (("<=>" | "⇔") ws math_expr2 ("if" ws math_expr2 | 
  @true Bool/1) Equivalence/3 | ("|-" | "⊢" ws) math_expr2 ("if" ws math_expr2 | 
  @true Bool/1) Entailment/3)))?;
(math_expr2 = math_expr3 ("," ws math_expr3 Comma/2)*;
(math_expr3 = 
  ("[" ws @nil (math_expr4 @cons ("," ws math_expr4 @cons)* ("," ws)?)? @list2array "]" ws Array/1
   | math_expr4);
(math_expr4 = ("let" kwsep id_type "=" ws math_expr5 Let/2 | 
  ("fn" kwsep ws id "(" ws @nil (id_type @cons ("," ws id_type @cons)* ("," ws)?)? @list2array ")" ws @nil (type_annotation @cons)? @list2array "=" ws math_expr5 FnDef/4
   | ("if" kwsep math_expr "then" kwsep math_expr "else" kwsep math_expr5 IfElse/3
   | math_expr5)));
(math_expr5 = math_expr6 ((("c=" | "⊂") ws math_expr6 Subset/2 | ("in" | 
  "∈") ws math_expr6 ElementOf/2))*;
(math_expr6 = math_expr7 ((("&&" | "∧") ws math_expr7 LogicalAnd/2 | ("||" | 
  "∨") ws math_expr7 LogicalOr/2))*;
(math_expr7 = math_expr8 ((("==" | "=") ws math_expr8 Equals/2 | 
  ("!=" ws math_expr8 NotEquals/2 | (("<=" | "≤") ws math_expr8 LessEquals/2 | 
  ("<" ws math_expr8 LessThan/2 | ((">=" | "≥") ws math_expr8 GreaterEquals/2 | 
  ">" ws math_expr8 GreaterThan/2))))))*;
(math_expr8 = math_expr9 ((("union" kwsep | "∪") ws math_expr9 Union/2 | ("intersect" kwsep | 
  "∩") ws math_expr9 Intersection/2))*;
(math_expr9 = math_expr10 (("->" | "→") ws math_expr10 FunctionType/2)*;
(math_expr10 = math_expr11 (("+" ws math_expr11 Add/2 | "-" ws math_expr11 Subtract/2))*;
(math_expr11 = math_expr12 ((("*" | "·") ws math_expr12 Multiply/2 | 
  ("/" ws math_expr12 Divide/2 | ("%" ws math_expr12 Modulo/2 | 
  ("×" ws math_expr12 DirectProduct/2 | "∘" ws math_expr12 Compose/2)))))*;
(math_expr12 = math_expr13 (("^" ws math_expr12 Exponent/2 | superscript Superscript/2))*;
(math_expr13 = ("-" ws math_expr13 Negate/1 | (("!" | "¬") ws math_expr13 LogicalNot/1 | 
  math_expr14));
(math_expr14 = 
  math_expr15 (("(" ws @nil (math_expr @cons ("," ws math_expr @cons)* ("," ws)?)? @list2array ")" ws Function/2
   | ("." ws id Field/2 | (subscript Subscript/2 | 
  (":" ws math_expr15 TypeAnnotation/2 | 
  ("[" ws math_expr (":=" ws math_expr "]" ws TypeSubstitution/3 | "]" ws Index/2)
   | "is" kwsep paren Match/2))))))*;
(math_expr15 = ($(double) ws @s2d Double/1 | ($(signed_int) ws @s2i Int/1 | 
  (string @unescape String/1 | ("true" kwsep @true Bool/1 | 
  ("false" kwsep @false Bool/1 | 
  ("{" ws (math_expr "|" ws math_expr "}" ws SetComprehension/2 | 
  @nil (math_expr @cons ("," ws math_expr @cons)* ("," ws)?)? @list2array "}" ws SetLiteral/1)
   | (("\\" | 
  "λ") ws env_bindings (@nil id_type @cons @list2array "." ws math_expr Lambda/3
   | 
  "(" ws @nil (id_type @cons ("," ws id_type @cons)* ("," ws)?)? @list2array ")" ws "." ws math_expr Lambda/3)
   | (("forall" kwsep | 
  "∀") ws @nil (math_expr @cons ("," ws math_expr @cons)* ("," ws)?)? @list2array (","
   | ":") ws math_expr Forall/2 | (("exists" kwsep | 
  "∃") ws @nil (math_expr @cons ("," ws math_expr @cons)* ("," ws)?)? @list2array (","
   | ":") ws math_expr Exists/2 | (paren | (greek_letter GreekLetter/1 | 
  (id Identifier/1 | (uid Variable/1 | $(("?")+) ws TypeVar/1)))))))))))));
(kwsep = !alnum ws;
(int = ('0'-'9')+;
(id_type = id @nil (type_annotation @cons)? @list2array IdType/2;
(id = $(bid) ws;
(hexdigit = ('0'-'9' | ('a'-'f' | 'A'-'F'));
(greek_letter = (("alpha" kwsep | "α") ws @"alpha" | (("beta" kwsep | "β") ws @"beta" | 
  (("gamma" kwsep | "γ") ws @"gamma" | (("delta" kwsep | "δ") ws @"delta" | 
  (("epsilon" kwsep | "ε") ws @"epsilon" | (("zeta" kwsep | "ζ") ws @"zeta" | 
  (("eta" kwsep | "η") ws @"eta" | (("theta" kwsep | "θ") ws @"theta" | 
  (("iota" kwsep | "ι") ws @"iota" | (("kappa" kwsep | "κ") ws @"kappa" | 
  (("lambda" kwsep | "λ") ws @"lambda" | (("mu" kwsep | "μ") ws @"mu" | 
  (("nu" kwsep | "ν") ws @"nu" | (("xi" kwsep | "ξ") ws @"xi" | (("omicron" kwsep
   | "ο") ws @"omicron" | (("pi" kwsep | "π") ws @"pi" | (("rho" kwsep | 
  "ρ") ws @"rho" | (("sigma" kwsep | "σ") ws @"sigma" | (("tau" kwsep | 
  "τ") ws @"tau" | (("upsilon" kwsep | "υ") ws @"upsilon" | (("phi" kwsep | 
  "φ") ws @"phi" | (("chi" kwsep | "χ") ws @"chi" | (("psi" kwsep | "ψ") ws @"psi"
   | ("omega" kwsep | "ω") ws @"omega")))))))))))))))))))))));
(exponent = ("E" | "e") (("+" | "-"))? int;
(env_bindings = 
  ("{" ws @nil (env_binding @cons ("," ws env_binding @cons)* ("," ws)?)? @list2array "}" ws
   | @nil @list2array);
(env_binding = id "=" ws math_expr EnvBinding/2;
(double = (signed_int ("." (int)? (exponent)? | exponent) | "." int (exponent)?);
(cs = (" " | ("\\t" | ("\\n" | ("0x000d" | ("//" (!"\\n" anychar)* "\\n" | 
  ("/*" (!"*/" anychar)* "*/" | "\\r"))))));
(bid = ('a'-'z' | "_") (alnum)*;
(anychar = '0x0000'-'0xffff';
(alnum = ('a'-'z' | ('A'-'Z' | ("_" | '0'-'9')));
ws math_expr optsemi)))))))))))))))))))))))))))))))))))))))))