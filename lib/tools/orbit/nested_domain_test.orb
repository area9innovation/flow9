// Test of nested domain annotations (domains on domains)

// Define quote
fn quote(e : ast) = e;

// Create a test graph
let g = makeOGraph("nested_domain_test");

// Create the values and domains
let a_id = addOGraph(g, quote(a));
println("Added 'a' with ID: " + i2s(a_id));

// Create the domain hierarchy
let integer_id = addOGraph(g, quote(Integer));
let real_id = addOGraph(g, quote(Real));
let complex_id = addOGraph(g, quote(Complex));

println("Added domains: Integer=" + i2s(integer_id) + ", Real=" + i2s(real_id) + ", Complex=" + i2s(complex_id));

// Build domain hierarchy
println("\nBuilding domain hierarchy:");
let integer_in_real = addDomainToNode(g, integer_id, real_id);
println("Added Integer : Real = " + i2s(b2i(integer_in_real)));

let real_in_complex = addDomainToNode(g, real_id, complex_id);
println("Added Real : Complex = " + i2s(b2i(real_in_complex)));

// Associate 'a' with Integer domain
let a_in_integer = addDomainToNode(g, a_id, integer_id);
println("Added a : Integer = " + i2s(b2i(a_in_integer)));

// Test domain hierarchy with findOGraphId
println("\nTesting domain hierarchy with findOGraphId:");

// Direct domain membership
let find_a_integer = findOGraphId(g, quote(a : Integer));
println("findOGraphId(a : Integer) = " + i2s(find_a_integer) + " (should be " + i2s(a_id) + ")");

// One level transitive membership
let find_a_real = findOGraphId(g, quote(a : Real));
println("findOGraphId(a : Real) = " + i2s(find_a_real) + " (should be " + i2s(a_id) + ")");

// Two level transitive membership
let find_a_complex = findOGraphId(g, quote(a : Complex));
println("findOGraphId(a : Complex) = " + i2s(find_a_complex) + " (should be " + i2s(a_id) + ")");

// Domain on domain (direct)
let find_integer_real = findOGraphId(g, quote(Integer : Real));
println("findOGraphId(Integer : Real) = " + i2s(find_integer_real) + " (should be " + i2s(integer_id) + ")");

// Domain on domain (transitive)
let find_integer_complex = findOGraphId(g, quote(Integer : Complex));
println("findOGraphId(Integer : Complex) = " + i2s(find_integer_complex) + " (should be " + i2s(integer_id) + ")");

// Multiple domain levels in a single expression
let a_int_real = findOGraphId(g, quote((a : Integer) : Real));
println("findOGraphId((a : Integer) : Real) = " + i2s(a_int_real) + " (should be " + i2s(a_id) + ")");

let a_int_real_complex = findOGraphId(g, quote(((a : Integer) : Real) : Complex));
println("findOGraphId(((a : Integer) : Real) : Complex) = " + i2s(a_int_real_complex) + " (should be " + i2s(a_id) + ")");

"Nested domain test completed";