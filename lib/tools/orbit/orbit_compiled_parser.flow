// Produced by  flowcpp mango/mango.flow -- file=orbit.mango compile=1 main=orbit_compiled
import tools/mango/mcode_lib;
import string;

export {
	orbit_parse_orbit_compiled(acc : MoParseAcc) -> bool;
}

orbit_parse_ws(acc : MoParseAcc) -> bool {
	mparseStarBacktrackOnly(acc, \ -> {
		orbit_parse_s(acc)
	})
}

orbit_parse_uid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (mmatchRange(acc, 65, 90)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					orbit_parse_alnum(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && orbit_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_type_annotation(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if ((mmatchString(acc, ":") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
			{
				moconstruct(acc, "OrType", 1);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_superscript(acc : MoParseAcc) -> bool {
	{
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		mmatchString(acc, "⁻");
		if (if (if (mmatchString(acc, "¹") || (mmatchString(acc, "²") || (mmatchString(acc, "³") || (mmatchString(acc, "⁴") || (mmatchString(acc, "⁵") || (mmatchString(acc, "⁶") || (mmatchString(acc, "⁷") || (mmatchString(acc, "⁸") || (mmatchString(acc, "⁹") || mmatchString(acc, "⁰")))))))))) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					mmatchString(acc, "¹") || (mmatchString(acc, "²") || (mmatchString(acc, "³") || (mmatchString(acc, "⁴") || (mmatchString(acc, "⁵") || (mmatchString(acc, "⁶") || (mmatchString(acc, "⁷") || (mmatchString(acc, "⁸") || (mmatchString(acc, "⁹") || mmatchString(acc, "⁰")))))))))
				});
				true
			}
		} else {
			false
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}
	}
}

orbit_parse_subscript(acc : MoParseAcc) -> bool {
	{
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		mmatchString(acc, "₋");
		if (if (if (mmatchString(acc, "₀") || (mmatchString(acc, "₁") || (mmatchString(acc, "₂") || (mmatchString(acc, "₃") || (mmatchString(acc, "₄") || (mmatchString(acc, "₅") || (mmatchString(acc, "₆") || (mmatchString(acc, "₇") || (mmatchString(acc, "₈") || mmatchString(acc, "₉")))))))))) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					mmatchString(acc, "₀") || (mmatchString(acc, "₁") || (mmatchString(acc, "₂") || (mmatchString(acc, "₃") || (mmatchString(acc, "₄") || (mmatchString(acc, "₅") || (mmatchString(acc, "₆") || (mmatchString(acc, "₇") || (mmatchString(acc, "₈") || mmatchString(acc, "₉")))))))))
				});
				true
			}
		} else {
			false
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}
	}
}

orbit_parse_string(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (mmatchString(acc, "\"")) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					orbit_parse_onechar(acc)
				});
				if (mmatchString(acc, "\"")) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && orbit_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_signed_int(acc : MoParseAcc) -> bool {
	{
		pos_63 = acc.i;
		mmatchString(acc, "-");
		if (orbit_parse_int(acc)) {
			true
		} else {
			{acc.i ::= pos_63; false}
		}
	}
}

orbit_parse_s(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (orbit_parse_cs(acc)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					orbit_parse_cs(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

orbit_parse_path(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (orbit_parse_bid(acc)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					{
						pos_62 = acc.i;
						if ((mmatchString(acc, "/") && orbit_parse_bid(acc))) {
							true
						} else {
							{acc.i ::= pos_62; false}
						}
					}
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && orbit_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_paren(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if ((mmatchString(acc, "(") && ((orbit_parse_ws(acc) && ((orbit_parse_math_expr(acc) && ((orbit_parse_optsemi(acc) && ((mmatchString(acc, ")") && orbit_parse_ws(acc))))))))))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_optsemi(acc : MoParseAcc) -> bool {
	{
		pos_60 = acc.i;
		pos_61 = acc.i;
		if (if ((mmatchString(acc, ";") && orbit_parse_ws(acc))) {
			true
		} else {
			{acc.i ::= pos_61; false}
		}) {
			true
		} else {
			{acc.i ::= pos_60; false}
		};
		true
	}
}

orbit_parse_operator(acc : MoParseAcc) -> bool {
	mmatchString(acc, "+") || (mmatchString(acc, "-") || (mmatchString(acc, "*") || (mmatchString(acc, "·") || (mmatchString(acc, "/") || (mmatchString(acc, "%") || (mmatchString(acc, "×") || (mmatchString(acc, "⋊") || (mmatchString(acc, "⋉") || (mmatchString(acc, "∘") || (mmatchString(acc, "^") || (mmatchString(acc, "&&") || (mmatchString(acc, "∧") || (mmatchString(acc, "||") || (mmatchString(acc, "∨") || (mmatchString(acc, "!") || (mmatchString(acc, "¬") || (mmatchString(acc, "==") || (mmatchString(acc, "=") || (mmatchString(acc, "!=") || (mmatchString(acc, "<") || (mmatchString(acc, ">") || (mmatchString(acc, "<=") || (mmatchString(acc, "≤") || (mmatchString(acc, ">=") || (mmatchString(acc, "≥") || (mmatchString(acc, "⊂") || (mmatchString(acc, "c=") || (mmatchString(acc, "∈") || (mmatchString(acc, "in") || (mmatchString(acc, "∪") || (mmatchString(acc, "∩") || (mmatchString(acc, "→") || (mmatchString(acc, "->") || (mmatchString(acc, ":") || (mmatchString(acc, "!:") || (mmatchString(acc, "⇒") || (mmatchString(acc, "=>") || (mmatchString(acc, "⇔") || (mmatchString(acc, "<=>") || (mmatchString(acc, "⊢") || (mmatchString(acc, "|-") || (mmatchString(acc, ";") || (mmatchString(acc, ".") || mmatchString(acc, "[]"))))))))))))))))))))))))))))))))))))))))))))
}

orbit_parse_onechar(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		pushMCheckpointNoStack(acc);
		if (if (mmatchString(acc, "\\")) {
			{
				pushMCheckpointNoStack(acc);
				pos_59 = acc.i;
				if (if (if ((mmatchString(acc, "u") && ((orbit_parse_hexdigit(acc) && ((orbit_parse_hexdigit(acc) && ((orbit_parse_hexdigit(acc) && orbit_parse_hexdigit(acc))))))))) {
					true
				} else {
					{acc.i ::= pos_59; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					{
						pos_58 = acc.i;
						if ((if ((mmatchString(acc, "x") && ((orbit_parse_hexdigit(acc) && orbit_parse_hexdigit(acc))))) {
							true
						} else {
							{acc.i ::= pos_58; false}
						}) || (mmatchString(acc, "\\") || (mmatchString(acc, "\"") || (mmatchString(acc, "n") || (mmatchString(acc, "t") || mmatchString(acc, "r")))))) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pos_55 = acc.i;
				pos_57 = acc.i;
				if (if (if (mmatchString(acc, "\"")) {
					{acc.i ::= pos_57; false}
				} else {
					{
						{acc.i ::= pos_57; false};
						true
					}
				}) {
					{
						pos_56 = acc.i;
						if (((if (mmatchString(acc, "\\")) {
							{acc.i ::= pos_56; false}
						} else {
							{
								{acc.i ::= pos_56; false};
								true
							}
						}) && orbit_parse_anychar(acc))) {
							true
						} else {
							{acc.i ::= pos_55; false}
						}
					}
				} else {
					{acc.i ::= pos_55; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		}
	}
}

orbit_parse_math_expr9(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr10(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if (((mmatchString(acc, "->") || mmatchString(acc, "→")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr10(acc))))) {
							{
								moconstruct(acc, "OrFunctionType", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr8(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr9(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						pushMCheckpointNoStack(acc);
						pos_54 = acc.i;
						if (if (((if ((if ((mmatchString(acc, "union") && orbit_parse_kwsep(acc))) {
							true
						} else {
							{acc.i ::= pos_54; false}
						}) || mmatchString(acc, "∪")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}) && ((orbit_parse_ws(acc) && orbit_parse_math_expr9(acc))))) {
							{
								moconstruct(acc, "OrUnion", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								pushMCheckpointNoStack(acc);
								pos_53 = acc.i;
								if (if (((if ((if ((mmatchString(acc, "intersect") && orbit_parse_kwsep(acc))) {
									true
								} else {
									{acc.i ::= pos_53; false}
								}) || mmatchString(acc, "∩")) {
									discardMCheckpointNoStack(acc)
								} else {
									restoreMCheckpointNoStack(acc)
								}) && ((orbit_parse_ws(acc) && orbit_parse_math_expr9(acc))))) {
									{
										moconstruct(acc, "OrIntersection", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr7(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr8(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (((mmatchString(acc, "==") || mmatchString(acc, "=")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr8(acc))))) {
							{
								moconstruct(acc, "OrEquals", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "!=") && ((orbit_parse_ws(acc) && orbit_parse_math_expr8(acc))))) {
									{
										moconstruct(acc, "OrNotEquals", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if (((mmatchString(acc, "<=") || mmatchString(acc, "≤")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr8(acc))))) {
											{
												moconstruct(acc, "OrLessEquals", 2);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "<") && ((orbit_parse_ws(acc) && orbit_parse_math_expr8(acc))))) {
													{
														moconstruct(acc, "OrLessThan", 2);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if (((mmatchString(acc, ">=") || mmatchString(acc, "≥")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr8(acc))))) {
															{
																moconstruct(acc, "OrGreaterEquals", 2);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																if (if ((mmatchString(acc, ">") && ((orbit_parse_ws(acc) && orbit_parse_math_expr8(acc))))) {
																	{
																		moconstruct(acc, "OrGreaterThan", 2);
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	restoreMCheckpoint(acc)
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr6(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr7(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if (((mmatchString(acc, "&&") || mmatchString(acc, "∧")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr7(acc))))) {
							{
								moconstruct(acc, "OrLogicalAnd", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr5(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr6(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if (((mmatchString(acc, "||") || mmatchString(acc, "∨")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr6(acc))))) {
							{
								moconstruct(acc, "OrLogicalOr", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr4(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr5(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if (((mmatchString(acc, "in") || mmatchString(acc, "∈")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr5(acc))))) {
							{
								moconstruct(acc, "OrElementOf", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr3(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr4(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if (((mmatchString(acc, "c=") || mmatchString(acc, "⊂")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr4(acc))))) {
							{
								moconstruct(acc, "OrSubset", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr2(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((mmatchString(acc, "let") && ((orbit_parse_kwsep(acc) && ((orbit_parse_id_type(acc) && ((mmatchString(acc, "=") && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))))))))) {
			{
				moconstruct(acc, "OrLet", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if ((mmatchString(acc, "fn") && ((orbit_parse_kwsep(acc) && ((orbit_parse_ws(acc) && ((orbit_parse_id(acc) && ((mmatchString(acc, "(") && orbit_parse_ws(acc))))))))))) {
					{
						{pushPEnv(acc.env, makeList()); true};
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (orbit_parse_id_type(acc)) {
							{
								{pcons(acc.env); true};
								mparseStar(acc, \ -> {
									{
										pushMCheckpoint(acc);
										if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_id_type(acc))))) {
											{
												{pcons(acc.env); true};
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								});
								pos_51 = acc.i;
								pos_52 = acc.i;
								if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
									true
								} else {
									{acc.i ::= pos_52; false}
								}) {
									true
								} else {
									{acc.i ::= pos_51; false}
								};
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						};
						{pfn1(acc.env, list2array); true};
						if ((mmatchString(acc, ")") && orbit_parse_ws(acc))) {
							{
								{pushPEnv(acc.env, makeList()); true};
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (if (orbit_parse_type_annotation(acc)) {
									{
										{pcons(acc.env); true};
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								};
								{pfn1(acc.env, list2array); true};
								if ((mmatchString(acc, "=") && ((orbit_parse_ws(acc) && orbit_parse_math_expr3(acc))))) {
									{
										moconstruct(acc, "OrFnDef", 4);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "if") && ((orbit_parse_kwsep(acc) && ((orbit_parse_math_expr(acc) && ((mmatchString(acc, "then") && ((orbit_parse_kwsep(acc) && ((orbit_parse_math_expr(acc) && ((mmatchString(acc, "else") && ((orbit_parse_kwsep(acc) && orbit_parse_math_expr2(acc))))))))))))))))) {
							{
								moconstruct(acc, "OrIfElse", 3);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if ((if (((mmatchString(acc, "\\") || mmatchString(acc, "λ")) && ((orbit_parse_ws(acc) && orbit_parse_env_bindings(acc))))) {
									{
										pushMCheckpoint(acc);
										pushMCheckpoint(acc);
										{pushPEnv(acc.env, makeList()); true};
										if (if (if (orbit_parse_id_type(acc)) {
											{
												{pcons(acc.env); true};
												{pfn1(acc.env, list2array); true};
												if ((mmatchString(acc, ".") && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))) {
													{
														moconstruct(acc, "OrLambda", 3);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "(") && orbit_parse_ws(acc))) {
													{
														{pushPEnv(acc.env, makeList()); true};
														pushMCheckpoint(acc);
														pushMCheckpoint(acc);
														if (if (orbit_parse_id_type(acc)) {
															{
																{pcons(acc.env); true};
																mparseStar(acc, \ -> {
																	{
																		pushMCheckpoint(acc);
																		if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_id_type(acc))))) {
																			{
																				{pcons(acc.env); true};
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																});
																pos_49 = acc.i;
																pos_50 = acc.i;
																if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
																	true
																} else {
																	{acc.i ::= pos_50; false}
																}) {
																	true
																} else {
																	{acc.i ::= pos_49; false}
																};
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															restoreMCheckpoint(acc)
														};
														{pfn1(acc.env, list2array); true};
														if ((mmatchString(acc, ")") && ((orbit_parse_ws(acc) && ((mmatchString(acc, ".") && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))))))) {
															{
																moconstruct(acc, "OrLambda", 3);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													restoreMCheckpoint(acc)
												}
											}
										}) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}) || orbit_parse_math_expr3(acc)) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}
					}
				}
			}
		}
	}
}

orbit_parse_math_expr15(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		if (if (((if (orbit_parse_double(acc)) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && orbit_parse_ws(acc))) {
			{
				{pfn1(acc.env, s2d); true};
				moconstruct(acc, "OrDouble", 1);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				acc.starti ::= acc.i;
				if (if (((if (orbit_parse_signed_int(acc)) {
					pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
				} else {
					false
				}) && orbit_parse_ws(acc))) {
					{
						{pfn1(acc.env, s2i); true};
						moconstruct(acc, "OrInt", 1);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if (orbit_parse_string(acc)) {
							{
								{pfn1(acc.env, \l -> deserializeString(l).first); true};
								moconstruct(acc, "OrString", 1);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "true") && orbit_parse_kwsep(acc))) {
									{
										pushPEnv(acc.env, true);
										moconstruct(acc, "OrBool", 1);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, "false") && orbit_parse_kwsep(acc))) {
											{
												pushPEnv(acc.env, false);
												moconstruct(acc, "OrBool", 1);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "{") && orbit_parse_ws(acc))) {
													{
														{pushPEnv(acc.env, makeList()); true};
														pushMCheckpoint(acc);
														pushMCheckpoint(acc);
														if (if (orbit_parse_math_expr(acc)) {
															{
																{pcons(acc.env); true};
																mparseStar(acc, \ -> {
																	{
																		pushMCheckpoint(acc);
																		if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
																			{
																				{pcons(acc.env); true};
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																});
																pos_47 = acc.i;
																pos_48 = acc.i;
																if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
																	true
																} else {
																	{acc.i ::= pos_48; false}
																}) {
																	true
																} else {
																	{acc.i ::= pos_47; false}
																};
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															restoreMCheckpoint(acc)
														};
														{pfn1(acc.env, list2array); true};
														pushMCheckpoint(acc);
														pushMCheckpoint(acc);
														if (if (if ((mmatchString(acc, "|") && ((orbit_parse_ws(acc) && ((orbit_parse_math_expr(acc) && ((mmatchString(acc, "}") && orbit_parse_ws(acc))))))))) {
															{
																moconstruct(acc, "OrSetComprehension", 2);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																if (if ((mmatchString(acc, "}") && orbit_parse_ws(acc))) {
																	{
																		moconstruct(acc, "OrSetLiteral", 1);
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	restoreMCheckpoint(acc)
																}
															}
														}) {
															discardMCheckpoint(acc)
														} else {
															restoreMCheckpoint(acc)
														}
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if ((mmatchString(acc, "[") && orbit_parse_ws(acc))) {
															{
																{pushPEnv(acc.env, makeList()); true};
																pushMCheckpoint(acc);
																pushMCheckpoint(acc);
																if (if (orbit_parse_math_expr(acc)) {
																	{
																		{pcons(acc.env); true};
																		mparseStar(acc, \ -> {
																			{
																				pushMCheckpoint(acc);
																				if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
																					{
																						{pcons(acc.env); true};
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}
																			}
																		});
																		pos_45 = acc.i;
																		pos_46 = acc.i;
																		if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
																			true
																		} else {
																			{acc.i ::= pos_46; false}
																		}) {
																			true
																		} else {
																			{acc.i ::= pos_45; false}
																		};
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	restoreMCheckpoint(acc)
																};
																{pfn1(acc.env, list2array); true};
																if ((mmatchString(acc, "]") && orbit_parse_ws(acc))) {
																	{
																		moconstruct(acc, "OrArray", 1);
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																pushMCheckpointNoStack(acc);
																pos_44 = acc.i;
																if (if (((if ((if ((mmatchString(acc, "forall") && orbit_parse_kwsep(acc))) {
																	true
																} else {
																	{acc.i ::= pos_44; false}
																}) || mmatchString(acc, "∀")) {
																	discardMCheckpointNoStack(acc)
																} else {
																	restoreMCheckpointNoStack(acc)
																}) && orbit_parse_ws(acc))) {
																	{
																		{pushPEnv(acc.env, makeList()); true};
																		pushMCheckpoint(acc);
																		pushMCheckpoint(acc);
																		if (if (orbit_parse_math_expr(acc)) {
																			{
																				{pcons(acc.env); true};
																				mparseStar(acc, \ -> {
																					{
																						pushMCheckpoint(acc);
																						if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
																							{
																								{pcons(acc.env); true};
																								discardMCheckpoint(acc)
																							}
																						} else {
																							restoreMCheckpoint(acc)
																						}
																					}
																				});
																				pos_42 = acc.i;
																				pos_43 = acc.i;
																				if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
																					true
																				} else {
																					{acc.i ::= pos_43; false}
																				}) {
																					true
																				} else {
																					{acc.i ::= pos_42; false}
																				};
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			restoreMCheckpoint(acc)
																		};
																		{pfn1(acc.env, list2array); true};
																		if (((mmatchString(acc, ",") || mmatchString(acc, ":")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
																			{
																				moconstruct(acc, "OrForall", 2);
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	{
																		pushMCheckpoint(acc);
																		pushMCheckpointNoStack(acc);
																		pos_41 = acc.i;
																		if (if (((if ((if ((mmatchString(acc, "exists") && orbit_parse_kwsep(acc))) {
																			true
																		} else {
																			{acc.i ::= pos_41; false}
																		}) || mmatchString(acc, "∃")) {
																			discardMCheckpointNoStack(acc)
																		} else {
																			restoreMCheckpointNoStack(acc)
																		}) && orbit_parse_ws(acc))) {
																			{
																				{pushPEnv(acc.env, makeList()); true};
																				pushMCheckpoint(acc);
																				pushMCheckpoint(acc);
																				if (if (orbit_parse_math_expr(acc)) {
																					{
																						{pcons(acc.env); true};
																						mparseStar(acc, \ -> {
																							{
																								pushMCheckpoint(acc);
																								if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
																									{
																										{pcons(acc.env); true};
																										discardMCheckpoint(acc)
																									}
																								} else {
																									restoreMCheckpoint(acc)
																								}
																							}
																						});
																						pos_39 = acc.i;
																						pos_40 = acc.i;
																						if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
																							true
																						} else {
																							{acc.i ::= pos_40; false}
																						}) {
																							true
																						} else {
																							{acc.i ::= pos_39; false}
																						};
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}) {
																					discardMCheckpoint(acc)
																				} else {
																					restoreMCheckpoint(acc)
																				};
																				{pfn1(acc.env, list2array); true};
																				if (((mmatchString(acc, ",") || mmatchString(acc, ":")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
																					{
																						moconstruct(acc, "OrExists", 2);
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			{
																				pushMCheckpoint(acc);
																				if ((if ((mmatchString(acc, "import") && ((orbit_parse_kwsep(acc) && orbit_parse_path(acc))))) {
																					{
																						moconstruct(acc, "OrImport", 1);
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}) || orbit_parse_paren(acc)) {
																					discardMCheckpoint(acc)
																				} else {
																					{
																						pushMCheckpoint(acc);
																						if (if (orbit_parse_greek_letter(acc)) {
																							{
																								moconstruct(acc, "OrGreekLetter", 1);
																								discardMCheckpoint(acc)
																							}
																						} else {
																							restoreMCheckpoint(acc)
																						}) {
																							discardMCheckpoint(acc)
																						} else {
																							{
																								pushMCheckpoint(acc);
																								if (if (orbit_parse_id(acc)) {
																									{
																										moconstruct(acc, "OrIdentifier", 1);
																										discardMCheckpoint(acc)
																									}
																								} else {
																									restoreMCheckpoint(acc)
																								}) {
																									discardMCheckpoint(acc)
																								} else {
																									{
																										pushMCheckpoint(acc);
																										if (if (orbit_parse_uid(acc)) {
																											{
																												moconstruct(acc, "OrVariable", 1);
																												discardMCheckpoint(acc)
																											}
																										} else {
																											restoreMCheckpoint(acc)
																										}) {
																											discardMCheckpoint(acc)
																										} else {
																											{
																												pushMCheckpoint(acc);
																												acc.starti ::= acc.i;
																												if (if (((if (if (mmatchString(acc, "?")) {
																													{
																														mparseStarNobacktrackOrStack(acc, \ -> {
																															mmatchString(acc, "?")
																														});
																														true
																													}
																												} else {
																													false
																												}) {
																													pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
																												} else {
																													false
																												}) && orbit_parse_ws(acc))) {
																													{
																														moconstruct(acc, "OrTypeVar", 1);
																														discardMCheckpoint(acc)
																													}
																												} else {
																													restoreMCheckpoint(acc)
																												}) {
																													discardMCheckpoint(acc)
																												} else {
																													{
																														pushMCheckpoint(acc);
																														if (if ((mmatchString(acc, "`") && orbit_parse_ws(acc))) {
																															{
																																acc.starti ::= acc.i;
																																if (((if (orbit_parse_operator(acc)) {
																																	pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
																																} else {
																																	false
																																}) && ((mmatchString(acc, "`") && orbit_parse_ws(acc))))) {
																																	{
																																		moconstruct(acc, "OrOperatorSymbol", 1);
																																		discardMCheckpoint(acc)
																																	}
																																} else {
																																	restoreMCheckpoint(acc)
																																}
																															}
																														} else {
																															restoreMCheckpoint(acc)
																														}) {
																															discardMCheckpoint(acc)
																														} else {
																															{
																																pushMCheckpoint(acc);
																																if (if (((mmatchString(acc, "…") || mmatchString(acc, "...")) && orbit_parse_ws(acc))) {
																																	{
																																		moconstruct(acc, "OrEllipsis", 1);
																																		discardMCheckpoint(acc)
																																	}
																																} else {
																																	restoreMCheckpoint(acc)
																																}) {
																																	discardMCheckpoint(acc)
																																} else {
																																	restoreMCheckpoint(acc)
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

orbit_parse_math_expr14(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr15(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "(") && orbit_parse_ws(acc))) {
							{
								{pushPEnv(acc.env, makeList()); true};
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (if (orbit_parse_math_expr(acc)) {
									{
										{pcons(acc.env); true};
										mparseStar(acc, \ -> {
											{
												pushMCheckpoint(acc);
												if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
													{
														{pcons(acc.env); true};
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										});
										pos_37 = acc.i;
										pos_38 = acc.i;
										if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
											true
										} else {
											{acc.i ::= pos_38; false}
										}) {
											true
										} else {
											{acc.i ::= pos_37; false}
										};
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								};
								{pfn1(acc.env, list2array); true};
								if ((mmatchString(acc, ")") && orbit_parse_ws(acc))) {
									{
										moconstruct(acc, "OrFunction", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, ".") && ((orbit_parse_ws(acc) && orbit_parse_id(acc))))) {
									{
										moconstruct(acc, "OrField", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if (orbit_parse_subscript(acc)) {
											{
												moconstruct(acc, "OrSubscript", 2);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, ":") && ((orbit_parse_ws(acc) && orbit_parse_math_expr15(acc))))) {
													{
														moconstruct(acc, "OrTypeAnnotation", 2);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if ((mmatchString(acc, "!:") && ((orbit_parse_ws(acc) && orbit_parse_math_expr15(acc))))) {
															{
																moconstruct(acc, "OrNotTypeAnnotation", 2);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																if (if ((mmatchString(acc, "[") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
																	{
																		pushMCheckpoint(acc);
																		pushMCheckpoint(acc);
																		if (if (if ((mmatchString(acc, ":=") && ((orbit_parse_ws(acc) && ((orbit_parse_math_expr(acc) && ((mmatchString(acc, "]") && orbit_parse_ws(acc))))))))) {
																			{
																				moconstruct(acc, "OrTypeSubstitution", 3);
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			{
																				pushMCheckpoint(acc);
																				if (if ((mmatchString(acc, "]") && orbit_parse_ws(acc))) {
																					{
																						moconstruct(acc, "OrIndex", 2);
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}) {
																					discardMCheckpoint(acc)
																				} else {
																					restoreMCheckpoint(acc)
																				}
																			}
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	{
																		pushMCheckpoint(acc);
																		if (if ((mmatchString(acc, "is") && ((orbit_parse_kwsep(acc) && orbit_parse_paren(acc))))) {
																			{
																				moconstruct(acc, "OrMatch", 2);
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr13(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((mmatchString(acc, "-") && ((orbit_parse_ws(acc) && orbit_parse_math_expr13(acc))))) {
			{
				moconstruct(acc, "OrNegate", 1);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if ((if (((mmatchString(acc, "!") || mmatchString(acc, "¬")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr13(acc))))) {
					{
						moconstruct(acc, "OrLogicalNot", 1);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) || orbit_parse_math_expr14(acc)) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}
	}
}

orbit_parse_math_expr12(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr13(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "^") && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
							{
								moconstruct(acc, "OrExponent", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if (orbit_parse_superscript(acc)) {
									{
										moconstruct(acc, "OrSuperscript", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr11(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr12(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (((mmatchString(acc, "*") || mmatchString(acc, "·")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
							{
								moconstruct(acc, "OrMultiply", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "/") && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
									{
										moconstruct(acc, "OrDivide", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, "%") && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
											{
												moconstruct(acc, "OrModulo", 2);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "×") && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
													{
														moconstruct(acc, "OrDirectProduct", 2);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if ((mmatchString(acc, "⋊") && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
															{
																moconstruct(acc, "OrRightSemiDirectProduct", 2);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																if (if ((mmatchString(acc, "⋉") && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
																	{
																		moconstruct(acc, "OrLeftSemiDirectProduct", 2);
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	{
																		pushMCheckpoint(acc);
																		if (if ((mmatchString(acc, "∘") && ((orbit_parse_ws(acc) && orbit_parse_math_expr12(acc))))) {
																			{
																				moconstruct(acc, "OrCompose", 2);
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr10(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr11(acc)) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if ((mmatchString(acc, "+") && ((orbit_parse_ws(acc) && orbit_parse_math_expr11(acc))))) {
							{
								moconstruct(acc, "OrAdd", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((mmatchString(acc, "-") && ((orbit_parse_ws(acc) && orbit_parse_math_expr11(acc))))) {
									{
										moconstruct(acc, "OrSubtract", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr1(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr2(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if (((mmatchString(acc, "=>") || mmatchString(acc, "⇒")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))) {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (if ((mmatchString(acc, "if") && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								pushPEnv(acc.env, true);
								moconstruct(acc, "OrBool", 1);
								discardMCheckpoint(acc);
								discardMCheckpoint(acc)
							}
						}) {
							{
								moconstruct(acc, "OrRule", 3);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if (((mmatchString(acc, "<=>") || mmatchString(acc, "⇔")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))) {
							{
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (if (if ((mmatchString(acc, "if") && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										pushPEnv(acc.env, true);
										moconstruct(acc, "OrBool", 1);
										discardMCheckpoint(acc);
										discardMCheckpoint(acc)
									}
								}) {
									{
										moconstruct(acc, "OrEquivalence", 3);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if (((mmatchString(acc, "|-") || mmatchString(acc, "⊢")) && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))) {
									{
										pushMCheckpoint(acc);
										pushMCheckpoint(acc);
										if (if (if ((mmatchString(acc, "if") && ((orbit_parse_ws(acc) && orbit_parse_math_expr2(acc))))) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												pushPEnv(acc.env, true);
												moconstruct(acc, "OrBool", 1);
												discardMCheckpoint(acc);
												discardMCheckpoint(acc)
											}
										}) {
											{
												moconstruct(acc, "OrEntailment", 3);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}
					}
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_math_expr(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_math_expr1(acc)) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if ((mmatchString(acc, ";") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))) {
					{
						moconstruct(acc, "OrSequence", 2);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_kwsep(acc : MoParseAcc) -> bool {
	{
		pos_35 = acc.i;
		pos_36 = acc.i;
		if (((if (orbit_parse_alnum(acc)) {
			{acc.i ::= pos_36; false}
		} else {
			{
				{acc.i ::= pos_36; false};
				true
			}
		}) && orbit_parse_ws(acc))) {
			true
		} else {
			{acc.i ::= pos_35; false}
		}
	}
}

orbit_parse_int(acc : MoParseAcc) -> bool {
	if (mmatchRange(acc, 48, 57)) {
		{
			mparseStarNobacktrackOrStack(acc, \ -> {
				mmatchRange(acc, 48, 57)
			});
			true
		}
	} else {
		false
	}
}

orbit_parse_id_type(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if (orbit_parse_id(acc)) {
			{
				{pushPEnv(acc.env, makeList()); true};
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (orbit_parse_type_annotation(acc)) {
					{
						{pcons(acc.env); true};
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				{pfn1(acc.env, list2array); true};
				moconstruct(acc, "OrIdType", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_id(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		if (((if (orbit_parse_bid(acc)) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && orbit_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_hexdigit(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 48, 57) || (mmatchRange(acc, 97, 102) || mmatchRange(acc, 65, 70))
}

orbit_parse_greek_letter(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		pushMCheckpointNoStack(acc);
		pos_34 = acc.i;
		if (if (((if ((if ((mmatchString(acc, "alpha") && orbit_parse_kwsep(acc))) {
			true
		} else {
			{acc.i ::= pos_34; false}
		}) || mmatchString(acc, "α")) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}) && orbit_parse_ws(acc))) {
			{
				pushPEnv(acc.env, "alpha");
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				pushMCheckpointNoStack(acc);
				pos_33 = acc.i;
				if (if (((if ((if ((mmatchString(acc, "beta") && orbit_parse_kwsep(acc))) {
					true
				} else {
					{acc.i ::= pos_33; false}
				}) || mmatchString(acc, "β")) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}) && orbit_parse_ws(acc))) {
					{
						pushPEnv(acc.env, "beta");
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						pushMCheckpointNoStack(acc);
						pos_32 = acc.i;
						if (if (((if ((if ((mmatchString(acc, "gamma") && orbit_parse_kwsep(acc))) {
							true
						} else {
							{acc.i ::= pos_32; false}
						}) || mmatchString(acc, "γ")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}) && orbit_parse_ws(acc))) {
							{
								pushPEnv(acc.env, "gamma");
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								pushMCheckpointNoStack(acc);
								pos_31 = acc.i;
								if (if (((if ((if ((mmatchString(acc, "delta") && orbit_parse_kwsep(acc))) {
									true
								} else {
									{acc.i ::= pos_31; false}
								}) || mmatchString(acc, "δ")) {
									discardMCheckpointNoStack(acc)
								} else {
									restoreMCheckpointNoStack(acc)
								}) && orbit_parse_ws(acc))) {
									{
										pushPEnv(acc.env, "delta");
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										pushMCheckpointNoStack(acc);
										pos_30 = acc.i;
										if (if (((if ((if ((mmatchString(acc, "epsilon") && orbit_parse_kwsep(acc))) {
											true
										} else {
											{acc.i ::= pos_30; false}
										}) || mmatchString(acc, "ε")) {
											discardMCheckpointNoStack(acc)
										} else {
											restoreMCheckpointNoStack(acc)
										}) && orbit_parse_ws(acc))) {
											{
												pushPEnv(acc.env, "epsilon");
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												pushMCheckpointNoStack(acc);
												pos_29 = acc.i;
												if (if (((if ((if ((mmatchString(acc, "zeta") && orbit_parse_kwsep(acc))) {
													true
												} else {
													{acc.i ::= pos_29; false}
												}) || mmatchString(acc, "ζ")) {
													discardMCheckpointNoStack(acc)
												} else {
													restoreMCheckpointNoStack(acc)
												}) && orbit_parse_ws(acc))) {
													{
														pushPEnv(acc.env, "zeta");
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														pushMCheckpointNoStack(acc);
														pos_28 = acc.i;
														if (if (((if ((if ((mmatchString(acc, "eta") && orbit_parse_kwsep(acc))) {
															true
														} else {
															{acc.i ::= pos_28; false}
														}) || mmatchString(acc, "η")) {
															discardMCheckpointNoStack(acc)
														} else {
															restoreMCheckpointNoStack(acc)
														}) && orbit_parse_ws(acc))) {
															{
																pushPEnv(acc.env, "eta");
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																pushMCheckpointNoStack(acc);
																pos_27 = acc.i;
																if (if (((if ((if ((mmatchString(acc, "theta") && orbit_parse_kwsep(acc))) {
																	true
																} else {
																	{acc.i ::= pos_27; false}
																}) || mmatchString(acc, "θ")) {
																	discardMCheckpointNoStack(acc)
																} else {
																	restoreMCheckpointNoStack(acc)
																}) && orbit_parse_ws(acc))) {
																	{
																		pushPEnv(acc.env, "theta");
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	{
																		pushMCheckpoint(acc);
																		pushMCheckpointNoStack(acc);
																		pos_26 = acc.i;
																		if (if (((if ((if ((mmatchString(acc, "iota") && orbit_parse_kwsep(acc))) {
																			true
																		} else {
																			{acc.i ::= pos_26; false}
																		}) || mmatchString(acc, "ι")) {
																			discardMCheckpointNoStack(acc)
																		} else {
																			restoreMCheckpointNoStack(acc)
																		}) && orbit_parse_ws(acc))) {
																			{
																				pushPEnv(acc.env, "iota");
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			{
																				pushMCheckpoint(acc);
																				pushMCheckpointNoStack(acc);
																				pos_25 = acc.i;
																				if (if (((if ((if ((mmatchString(acc, "kappa") && orbit_parse_kwsep(acc))) {
																					true
																				} else {
																					{acc.i ::= pos_25; false}
																				}) || mmatchString(acc, "κ")) {
																					discardMCheckpointNoStack(acc)
																				} else {
																					restoreMCheckpointNoStack(acc)
																				}) && orbit_parse_ws(acc))) {
																					{
																						pushPEnv(acc.env, "kappa");
																						discardMCheckpoint(acc)
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}) {
																					discardMCheckpoint(acc)
																				} else {
																					{
																						pushMCheckpoint(acc);
																						pushMCheckpointNoStack(acc);
																						pos_24 = acc.i;
																						if (if (((if ((if ((mmatchString(acc, "lambda") && orbit_parse_kwsep(acc))) {
																							true
																						} else {
																							{acc.i ::= pos_24; false}
																						}) || mmatchString(acc, "λ")) {
																							discardMCheckpointNoStack(acc)
																						} else {
																							restoreMCheckpointNoStack(acc)
																						}) && orbit_parse_ws(acc))) {
																							{
																								pushPEnv(acc.env, "lambda");
																								discardMCheckpoint(acc)
																							}
																						} else {
																							restoreMCheckpoint(acc)
																						}) {
																							discardMCheckpoint(acc)
																						} else {
																							{
																								pushMCheckpoint(acc);
																								pushMCheckpointNoStack(acc);
																								pos_23 = acc.i;
																								if (if (((if ((if ((mmatchString(acc, "mu") && orbit_parse_kwsep(acc))) {
																									true
																								} else {
																									{acc.i ::= pos_23; false}
																								}) || mmatchString(acc, "μ")) {
																									discardMCheckpointNoStack(acc)
																								} else {
																									restoreMCheckpointNoStack(acc)
																								}) && orbit_parse_ws(acc))) {
																									{
																										pushPEnv(acc.env, "mu");
																										discardMCheckpoint(acc)
																									}
																								} else {
																									restoreMCheckpoint(acc)
																								}) {
																									discardMCheckpoint(acc)
																								} else {
																									{
																										pushMCheckpoint(acc);
																										pushMCheckpointNoStack(acc);
																										pos_22 = acc.i;
																										if (if (((if ((if ((mmatchString(acc, "nu") && orbit_parse_kwsep(acc))) {
																											true
																										} else {
																											{acc.i ::= pos_22; false}
																										}) || mmatchString(acc, "ν")) {
																											discardMCheckpointNoStack(acc)
																										} else {
																											restoreMCheckpointNoStack(acc)
																										}) && orbit_parse_ws(acc))) {
																											{
																												pushPEnv(acc.env, "nu");
																												discardMCheckpoint(acc)
																											}
																										} else {
																											restoreMCheckpoint(acc)
																										}) {
																											discardMCheckpoint(acc)
																										} else {
																											{
																												pushMCheckpoint(acc);
																												pushMCheckpointNoStack(acc);
																												pos_21 = acc.i;
																												if (if (((if ((if ((mmatchString(acc, "xi") && orbit_parse_kwsep(acc))) {
																													true
																												} else {
																													{acc.i ::= pos_21; false}
																												}) || mmatchString(acc, "ξ")) {
																													discardMCheckpointNoStack(acc)
																												} else {
																													restoreMCheckpointNoStack(acc)
																												}) && orbit_parse_ws(acc))) {
																													{
																														pushPEnv(acc.env, "xi");
																														discardMCheckpoint(acc)
																													}
																												} else {
																													restoreMCheckpoint(acc)
																												}) {
																													discardMCheckpoint(acc)
																												} else {
																													{
																														pushMCheckpoint(acc);
																														pushMCheckpointNoStack(acc);
																														pos_20 = acc.i;
																														if (if (((if ((if ((mmatchString(acc, "omicron") && orbit_parse_kwsep(acc))) {
																															true
																														} else {
																															{acc.i ::= pos_20; false}
																														}) || mmatchString(acc, "ο")) {
																															discardMCheckpointNoStack(acc)
																														} else {
																															restoreMCheckpointNoStack(acc)
																														}) && orbit_parse_ws(acc))) {
																															{
																																pushPEnv(acc.env, "omicron");
																																discardMCheckpoint(acc)
																															}
																														} else {
																															restoreMCheckpoint(acc)
																														}) {
																															discardMCheckpoint(acc)
																														} else {
																															{
																																pushMCheckpoint(acc);
																																pushMCheckpointNoStack(acc);
																																pos_19 = acc.i;
																																if (if (((if ((if ((mmatchString(acc, "pi") && orbit_parse_kwsep(acc))) {
																																	true
																																} else {
																																	{acc.i ::= pos_19; false}
																																}) || mmatchString(acc, "π")) {
																																	discardMCheckpointNoStack(acc)
																																} else {
																																	restoreMCheckpointNoStack(acc)
																																}) && orbit_parse_ws(acc))) {
																																	{
																																		pushPEnv(acc.env, "pi");
																																		discardMCheckpoint(acc)
																																	}
																																} else {
																																	restoreMCheckpoint(acc)
																																}) {
																																	discardMCheckpoint(acc)
																																} else {
																																	{
																																		pushMCheckpoint(acc);
																																		pushMCheckpointNoStack(acc);
																																		pos_18 = acc.i;
																																		if (if (((if ((if ((mmatchString(acc, "rho") && orbit_parse_kwsep(acc))) {
																																			true
																																		} else {
																																			{acc.i ::= pos_18; false}
																																		}) || mmatchString(acc, "ρ")) {
																																			discardMCheckpointNoStack(acc)
																																		} else {
																																			restoreMCheckpointNoStack(acc)
																																		}) && orbit_parse_ws(acc))) {
																																			{
																																				pushPEnv(acc.env, "rho");
																																				discardMCheckpoint(acc)
																																			}
																																		} else {
																																			restoreMCheckpoint(acc)
																																		}) {
																																			discardMCheckpoint(acc)
																																		} else {
																																			{
																																				pushMCheckpoint(acc);
																																				pushMCheckpointNoStack(acc);
																																				pos_17 = acc.i;
																																				if (if (((if ((if ((mmatchString(acc, "sigma") && orbit_parse_kwsep(acc))) {
																																					true
																																				} else {
																																					{acc.i ::= pos_17; false}
																																				}) || mmatchString(acc, "σ")) {
																																					discardMCheckpointNoStack(acc)
																																				} else {
																																					restoreMCheckpointNoStack(acc)
																																				}) && orbit_parse_ws(acc))) {
																																					{
																																						pushPEnv(acc.env, "sigma");
																																						discardMCheckpoint(acc)
																																					}
																																				} else {
																																					restoreMCheckpoint(acc)
																																				}) {
																																					discardMCheckpoint(acc)
																																				} else {
																																					{
																																						pushMCheckpoint(acc);
																																						pushMCheckpointNoStack(acc);
																																						pos_16 = acc.i;
																																						if (if (((if ((if ((mmatchString(acc, "tau") && orbit_parse_kwsep(acc))) {
																																							true
																																						} else {
																																							{acc.i ::= pos_16; false}
																																						}) || mmatchString(acc, "τ")) {
																																							discardMCheckpointNoStack(acc)
																																						} else {
																																							restoreMCheckpointNoStack(acc)
																																						}) && orbit_parse_ws(acc))) {
																																							{
																																								pushPEnv(acc.env, "tau");
																																								discardMCheckpoint(acc)
																																							}
																																						} else {
																																							restoreMCheckpoint(acc)
																																						}) {
																																							discardMCheckpoint(acc)
																																						} else {
																																							{
																																								pushMCheckpoint(acc);
																																								pushMCheckpointNoStack(acc);
																																								pos_15 = acc.i;
																																								if (if (((if ((if ((mmatchString(acc, "upsilon") && orbit_parse_kwsep(acc))) {
																																									true
																																								} else {
																																									{acc.i ::= pos_15; false}
																																								}) || mmatchString(acc, "υ")) {
																																									discardMCheckpointNoStack(acc)
																																								} else {
																																									restoreMCheckpointNoStack(acc)
																																								}) && orbit_parse_ws(acc))) {
																																									{
																																										pushPEnv(acc.env, "upsilon");
																																										discardMCheckpoint(acc)
																																									}
																																								} else {
																																									restoreMCheckpoint(acc)
																																								}) {
																																									discardMCheckpoint(acc)
																																								} else {
																																									{
																																										pushMCheckpoint(acc);
																																										pushMCheckpointNoStack(acc);
																																										pos_14 = acc.i;
																																										if (if (((if ((if ((mmatchString(acc, "phi") && orbit_parse_kwsep(acc))) {
																																											true
																																										} else {
																																											{acc.i ::= pos_14; false}
																																										}) || mmatchString(acc, "φ")) {
																																											discardMCheckpointNoStack(acc)
																																										} else {
																																											restoreMCheckpointNoStack(acc)
																																										}) && orbit_parse_ws(acc))) {
																																											{
																																												pushPEnv(acc.env, "phi");
																																												discardMCheckpoint(acc)
																																											}
																																										} else {
																																											restoreMCheckpoint(acc)
																																										}) {
																																											discardMCheckpoint(acc)
																																										} else {
																																											{
																																												pushMCheckpoint(acc);
																																												pushMCheckpointNoStack(acc);
																																												pos_13 = acc.i;
																																												if (if (((if ((if ((mmatchString(acc, "chi") && orbit_parse_kwsep(acc))) {
																																													true
																																												} else {
																																													{acc.i ::= pos_13; false}
																																												}) || mmatchString(acc, "χ")) {
																																													discardMCheckpointNoStack(acc)
																																												} else {
																																													restoreMCheckpointNoStack(acc)
																																												}) && orbit_parse_ws(acc))) {
																																													{
																																														pushPEnv(acc.env, "chi");
																																														discardMCheckpoint(acc)
																																													}
																																												} else {
																																													restoreMCheckpoint(acc)
																																												}) {
																																													discardMCheckpoint(acc)
																																												} else {
																																													{
																																														pushMCheckpoint(acc);
																																														pushMCheckpointNoStack(acc);
																																														pos_12 = acc.i;
																																														if (if (((if ((if ((mmatchString(acc, "psi") && orbit_parse_kwsep(acc))) {
																																															true
																																														} else {
																																															{acc.i ::= pos_12; false}
																																														}) || mmatchString(acc, "ψ")) {
																																															discardMCheckpointNoStack(acc)
																																														} else {
																																															restoreMCheckpointNoStack(acc)
																																														}) && orbit_parse_ws(acc))) {
																																															{
																																																pushPEnv(acc.env, "psi");
																																																discardMCheckpoint(acc)
																																															}
																																														} else {
																																															restoreMCheckpoint(acc)
																																														}) {
																																															discardMCheckpoint(acc)
																																														} else {
																																															{
																																																pushMCheckpoint(acc);
																																																pushMCheckpointNoStack(acc);
																																																pos_11 = acc.i;
																																																if (if (((if ((if ((mmatchString(acc, "omega") && orbit_parse_kwsep(acc))) {
																																																	true
																																																} else {
																																																	{acc.i ::= pos_11; false}
																																																}) || mmatchString(acc, "ω")) {
																																																	discardMCheckpointNoStack(acc)
																																																} else {
																																																	restoreMCheckpointNoStack(acc)
																																																}) && orbit_parse_ws(acc))) {
																																																	{
																																																		pushPEnv(acc.env, "omega");
																																																		discardMCheckpoint(acc)
																																																	}
																																																} else {
																																																	restoreMCheckpoint(acc)
																																																}) {
																																																	discardMCheckpoint(acc)
																																																} else {
																																																	restoreMCheckpoint(acc)
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

orbit_parse_exponent(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchString(acc, "E") || mmatchString(acc, "e")) {
			{
				mmatchString(acc, "+") || mmatchString(acc, "-");
				if (orbit_parse_int(acc)) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

orbit_parse_env_bindings(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((mmatchString(acc, "{") && orbit_parse_ws(acc))) {
			{
				{pushPEnv(acc.env, makeList()); true};
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (orbit_parse_env_binding(acc)) {
					{
						{pcons(acc.env); true};
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								if ((mmatchString(acc, ",") && ((orbit_parse_ws(acc) && orbit_parse_env_binding(acc))))) {
									{
										{pcons(acc.env); true};
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						pos_9 = acc.i;
						pos_10 = acc.i;
						if (if ((mmatchString(acc, ",") && orbit_parse_ws(acc))) {
							true
						} else {
							{acc.i ::= pos_10; false}
						}) {
							true
						} else {
							{acc.i ::= pos_9; false}
						};
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				};
				{pfn1(acc.env, list2array); true};
				if ((mmatchString(acc, "}") && orbit_parse_ws(acc))) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				{pushPEnv(acc.env, makeList()); true};
				{pfn1(acc.env, list2array); true};
				discardMCheckpoint(acc);
				discardMCheckpoint(acc)
			}
		}
	}
}

orbit_parse_env_binding(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if ((orbit_parse_id(acc) && ((mmatchString(acc, "=") && ((orbit_parse_ws(acc) && orbit_parse_math_expr(acc))))))) {
			{
				moconstruct(acc, "OrEnvBinding", 2);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

orbit_parse_double(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		pushMCheckpointNoStack(acc);
		if (if (orbit_parse_signed_int(acc)) {
			{
				pushMCheckpointNoStack(acc);
				pos_6 = acc.i;
				if (if ((if (mmatchString(acc, ".")) {
					{
						pos_8 = acc.i;
						if (orbit_parse_int(acc)) {
							true
						} else {
							{acc.i ::= pos_8; false}
						};
						pos_7 = acc.i;
						if (orbit_parse_exponent(acc)) {
							true
						} else {
							{acc.i ::= pos_7; false}
						};
						true
					}
				} else {
					{acc.i ::= pos_6; false}
				}) || orbit_parse_exponent(acc)) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pos_4 = acc.i;
				if (if ((mmatchString(acc, ".") && orbit_parse_int(acc))) {
					{
						pos_5 = acc.i;
						if (orbit_parse_exponent(acc)) {
							true
						} else {
							{acc.i ::= pos_5; false}
						};
						true
					}
				} else {
					{acc.i ::= pos_4; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		}
	}
}

orbit_parse_cs(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchString(acc, " ") || (mmatchString(acc, "\t") || (mmatchString(acc, "\n") || mmatchString(acc, "0x000d")))) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pushMCheckpointNoStack(acc);
				if (if (mmatchString(acc, "//")) {
					{
						mparseStarBacktrackOnly(acc, \ -> {
							{
								pos_2 = acc.i;
								pos_3 = acc.i;
								if (((if (mmatchString(acc, "\n")) {
									{acc.i ::= pos_3; false}
								} else {
									{
										{acc.i ::= pos_3; false};
										true
									}
								}) && orbit_parse_anychar(acc))) {
									true
								} else {
									{acc.i ::= pos_2; false}
								}
							}
						});
						if (mmatchString(acc, "\n")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				} else {
					restoreMCheckpointNoStack(acc)
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					{
						pushMCheckpointNoStack(acc);
						if ((if (mmatchString(acc, "/*")) {
							{
								mparseStarBacktrackOnly(acc, \ -> {
									{
										pos_0 = acc.i;
										pos_1 = acc.i;
										if (((if (mmatchString(acc, "*/")) {
											{acc.i ::= pos_1; false}
										} else {
											{
												{acc.i ::= pos_1; false};
												true
											}
										}) && orbit_parse_anychar(acc))) {
											true
										} else {
											{acc.i ::= pos_0; false}
										}
									}
								});
								if (mmatchString(acc, "*/")) {
									discardMCheckpointNoStack(acc)
								} else {
									restoreMCheckpointNoStack(acc)
								}
							}
						} else {
							restoreMCheckpointNoStack(acc)
						}) || mmatchString(acc, "\u000d")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				}
			}
		}
	}
}

orbit_parse_bid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchRange(acc, 97, 122) || mmatchString(acc, "_")) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					orbit_parse_alnum(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

orbit_parse_anychar(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 0, 65535)
}

orbit_parse_alnum(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 97, 122) || (mmatchRange(acc, 65, 90) || (mmatchString(acc, "_") || mmatchRange(acc, 48, 57)))
}

orbit_parse_orbit_compiled(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if ((orbit_parse_ws(acc) && ((orbit_parse_math_expr(acc) && orbit_parse_optsemi(acc))))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}













































