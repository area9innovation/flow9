import tools/orbit/orbit_types;
import string;
import text/blueprint;

export {
	orbit2latex(m : OrMath_expr) -> string;
}

orbit2latex(m : OrMath_expr) -> string {
	switch (m) {
		// Basic literals
		OrDouble(value): d2s(value);
		OrInt(value): i2s(value);
		OrString(value): "\\text{\"" + escapeLatex(value) + "\"}";
		OrBool(value): if (value) "\\text{true}" else "\\text{false}";
		
		// Identifiers and variables
		OrIdentifier(name): formatIdentifier(name);
		OrUId(name): "\\text{" + name + "}";
		OrTypeVar(name): formatIdentifier(name);
		
		// Arithmetic operations
		OrAdd(a, b): orbit2latex(a) + " + " + orbit2latex(b);
		OrSubtract(a, b): orbit2latex(a) + " - " + orbit2latex(b);
		OrMultiply(a, b): orbit2latex(a) + " \\cdot " + orbit2latex(b);
		OrDivide(a, b): "\\frac{" + orbit2latex(a) + "}{" + orbit2latex(b) + "}";
		OrModulo(a, b): orbit2latex(a) + " \\bmod " + orbit2latex(b);
		OrNegate(e): "-" + orbit2latex(e);
		
		// Exponentiation
		OrExponent(base, exponent): orbit2latex(base) + "^{" + orbit2latex(exponent) + "}";
		OrSuperscript(base, superScript): orbit2latex(base) + "^{" + escapeLatex(superScript) + "}";
		OrSubscript(base, sub): orbit2latex(base) + "_{" + escapeLatex(sub) + "}";
		
		// Comparison and equality
		OrEquals(a, b): orbit2latex(a) + " = " + orbit2latex(b);
		OrNotEquals(a, b): orbit2latex(a) + " \\neq " + orbit2latex(b);
		OrLessEquals(a, b): orbit2latex(a) + " \\leq " + orbit2latex(b);
		OrLessThan(a, b): orbit2latex(a) + " < " + orbit2latex(b);
		OrGreaterEquals(a, b): orbit2latex(a) + " \\geq " + orbit2latex(b);
		OrGreaterThan(a, b): orbit2latex(a) + " > " + orbit2latex(b);
		OrApproxEquals(a, b): orbit2latex(a) + " \\approx " + orbit2latex(b);
		OrApproxLessEquals(a, b): orbit2latex(a) + " \\lesssim " + orbit2latex(b);
		
		// Logic operations
		OrLogicalAnd(a, b): orbit2latex(a) + " \\land " + orbit2latex(b);
		OrLogicalOr(a, b): orbit2latex(a) + " \\lor " + orbit2latex(b);
		OrLogicalNot(e): "\\neg " + orbit2latex(e);
		
		// Set operations
		OrUnion(a, b): orbit2latex(a) + " \\cup " + orbit2latex(b);
		OrIntersection(a, b): orbit2latex(a) + " \\cap " + orbit2latex(b);
		OrSetDifference(a, b): orbit2latex(a) + " \\setminus " + orbit2latex(b);
		OrElementOf(a, b): orbit2latex(a) + " \\in " + orbit2latex(b);
		OrSubset(a, b): orbit2latex(a) + " \\subset " + orbit2latex(b);
		OrEmptySet(): "\\emptyset";
		
		// Set literals and comprehensions
		OrSetLiteral(elements): "\\{" + formatCommaSeparated(elements) + "\\}";
		OrSetComprehension(elements, condition): 
			"\\{" + formatCommaSeparated(elements) + " \\mid " + orbit2latex(condition) + "\\}";
		
		// Arrays and vectors
		OrArray(elements): "\\begin{bmatrix}" + formatCommaSeparated(elements) + "\\end{bmatrix}";
		
		// Function application and indexing
		OrFunction(func, args): orbit2latex(func) + "\\left(" + formatCommaSeparated(args) + "\\right)";
		OrIndex(a, i): orbit2latex(a) + "_{" + orbit2latex(i) + "}";
		OrField(obj, field): orbit2latex(obj) + "." + formatIdentifier(field);
		
		// Calculus operations
		OrIntegral(e): "\\int " + orbit2latex(e);
		OrSummation(e): "\\sum " + orbit2latex(e);
		OrDerivative(id, e): "\\frac{d}{d" + formatIdentifier(id) + "}" + orbit2latex(e);
		OrPartialDerivative(id, e): "\\frac{\\partial}{\\partial " + formatIdentifier(id) + "}" + orbit2latex(e);
		OrGradient(e): "\\nabla " + orbit2latex(e);
		
		// Norms and absolute values
		OrNorm(e): "\\|" + orbit2latex(e) + "\\|";
		OrGroupOrder(g): "|" + orbit2latex(g) + "|";
		
		// Group theory operations
		OrDirectProduct(a, b): orbit2latex(a) + " \\times " + orbit2latex(b);
		OrLeftSemiDirectProduct(a, b): orbit2latex(a) + " \\ltimes " + orbit2latex(b);
		OrRightSemiDirectProduct(a, b): orbit2latex(a) + " \\rtimes " + orbit2latex(b);
		OrTensorProduct(a, b): orbit2latex(a) + " \\otimes " + orbit2latex(b);
		OrCompose(a, b): orbit2latex(a) + " \\circ " + orbit2latex(b);
		OrGroupAction(g, s): orbit2latex(g) + " \\cdot " + orbit2latex(s);
		OrNormalSubgroup(a, b): orbit2latex(a) + " \\triangleleft " + orbit2latex(b);
		OrIsomorphism(a, b): orbit2latex(a) + " \\cong " + orbit2latex(b);
		OrHomomorphism(e1, e2): "\\phi(" + orbit2latex(e1) + ", " + orbit2latex(e2) + ")";
		OrIdeal(gens): "\\langle " + formatCommaSeparated(gens) + " \\rangle";
		
		// Quantifiers
		OrForall(vars): "\\forall " + formatCommaSeparated(vars);
		OrExists(vars): "\\exists " + formatCommaSeparated(vars);
		
		// Lambda expressions
		OrLambda(bindings, params, body): {
			bindingStr = if (bindings != []) {
				"_{\\{" + strGlue(map(bindings, \b -> formatIdentifier(b.id) + ":" + orbit2latex(b.math_expr)), ", ") + "\\}}";
			} else "";
			paramStr = if (length(params) == 1) {
				formatOrIdType(params[0]);
			} else {
				"(" + strGlue(map(params, formatOrIdType), ", ") + ")";
			};
			"\\lambda" + bindingStr + " " + paramStr + "." + orbit2latex(body);
		}
		
		// Control flow
		OrIfElse(cond, then, else_): 
			"\\text{if } " + orbit2latex(cond) + " \\text{ then } " + orbit2latex(then) + " \\text{ else } " + orbit2latex(else_);
		
		// Type annotations
		OrTypeAnnotation(expr, type): orbit2latex(expr) + " : " + orbit2latex(type);
		OrNotTypeAnnotation(expr, type): orbit2latex(expr) + " \\not: " + orbit2latex(type);
		OrTypeSubstitution(expr, typeVar, subst): 
			orbit2latex(expr) + "[" + orbit2latex(typeVar) + " := " + orbit2latex(subst) + "]";
		
		// Rewriting rules
		OrRule(lhs, rhs, cond, full): {
			arrow = if (full) " \\Rightarrow " else " \\rightarrow ";
			condStr = if (cond != OrBool(true)) " \\text{ if } " + orbit2latex(cond) else "";
			"(" + orbit2latex(lhs) + arrow + orbit2latex(rhs) + condStr + ")";
		}
		OrEquivalence(lhs, rhs, cond, full): {
			equiv = if (full) " \\Leftrightarrow " else " \\leftrightarrow ";
			condStr = if (cond != OrBool(true)) " \\text{ if } " + orbit2latex(cond) else "";
			"(" + orbit2latex(lhs) + equiv + orbit2latex(rhs) + condStr + ")";
		}
		OrEntailment(lhs, rhs, cond): {
			condStr = if (cond != OrBool(true)) " \\text{ if } " + orbit2latex(cond) else "";
			"(" + orbit2latex(lhs) + " \\vdash " + orbit2latex(rhs) + condStr + ")";
		}
		
		// Function and variable definitions
		OrFnDef(name, params, returnType, body): {
			typeAnnotation = if (length(returnType) > 0) {
				" : " + orbit2latex(returnType[0].math_expr);
			} else "";
			"\\text{fn } " + formatIdentifier(name) + "(" + strGlue(map(params, formatOrIdType), ", ") + ")" + typeAnnotation + " = " + orbit2latex(body);
		}
		OrLet(id, value): "\\text{let } " + formatOrIdType(id) + " = " + orbit2latex(value);
		OrSequence(e1, e2): orbit2latex(e1) + "; \\quad " + orbit2latex(e2);
		
		// Pattern matching
		OrMatch(expr1, expr2): orbit2latex(expr1) + " \\text{ is } (" + orbit2latex(expr2) + ")";
		
		// Quotation
		OrQuote(e): "\\text{quote } " + orbit2latex(e);
		OrQuasiquote(e): "\\text{quasiquote } " + orbit2latex(e);
		OrUnquote(e): "\\text{unquote } " + orbit2latex(e);
		OrUnquoteSplicing(e): "\\text{unquote-splicing } " + orbit2latex(e);
		
		// Domain navigation
		OrDomainDown(e1, e2): orbit2latex(e1) + " \\searrow " + orbit2latex(e2);
		OrDomainPath(e1, e2): orbit2latex(e1) + " \\cdots " + orbit2latex(e2);
		OrDomainUp(e1, e2): orbit2latex(e1) + " \\nearrow " + orbit2latex(e2);
		
		// Special symbols
		OrEllipsis(): "\\ldots";
		OrOperatorSymbol(name): "\\text{`" + escapeLatex(name) + "`}";
		
		// Import
		OrImport(path): "\\text{import } \\text{" + escapeLatex(path) + "}";
        OrInterpolatedString(interpolated_string): fold(interpolated_string, "", \acc, part -> {
			switch (part) {
				OrStringLiteral(s): acc + escapeLatex(s);
				OrStringInterpolation(e): acc + orbit2latex(e);
			}
		});
	}
}

// Helper function to format identifiers with proper Greek letter support
formatIdentifier(name : string) -> string {
	// Convert common Greek letter names to LaTeX symbols
	greekLetters = [
		Pair("alpha", "\\alpha"), Pair("beta", "\\beta"), Pair("gamma", "\\gamma"), 
		Pair("delta", "\\delta"), Pair("epsilon", "\\epsilon"), Pair("zeta", "\\zeta"),
		Pair("eta", "\\eta"), Pair("theta", "\\theta"), Pair("iota", "\\iota"), 
		Pair("kappa", "\\kappa"), Pair("lambda", "\\lambda"), Pair("mu", "\\mu"),
		Pair("nu", "\\nu"), Pair("xi", "\\xi"), Pair("omicron", "\\omicron"), 
		Pair("pi", "\\pi"), Pair("rho", "\\rho"), Pair("sigma", "\\sigma"),
		Pair("tau", "\\tau"), Pair("upsilon", "\\upsilon"), Pair("phi", "\\phi"), 
		Pair("chi", "\\chi"), Pair("psi", "\\psi"), Pair("omega", "\\omega"),
		// Uppercase Greek letters
		Pair("Alpha", "\\Alpha"), Pair("Beta", "\\Beta"), Pair("Gamma", "\\Gamma"),
		Pair("Delta", "\\Delta"), Pair("Epsilon", "\\Epsilon"), Pair("Zeta", "\\Zeta"),
		Pair("Eta", "\\Eta"), Pair("Theta", "\\Theta"), Pair("Iota", "\\Iota"),
		Pair("Kappa", "\\Kappa"), Pair("Lambda", "\\Lambda"), Pair("Mu", "\\Mu"),
		Pair("Nu", "\\Nu"), Pair("Xi", "\\Xi"), Pair("Omicron", "\\Omicron"),
		Pair("Pi", "\\Pi"), Pair("Rho", "\\Rho"), Pair("Sigma", "\\Sigma"),
		Pair("Tau", "\\Tau"), Pair("Upsilon", "\\Upsilon"), Pair("Phi", "\\Phi"),
		Pair("Chi", "\\Chi"), Pair("Psi", "\\Psi"), Pair("Omega", "\\Omega")
	];
	
	// Check if the name is a Greek letter
	maybeGreek = find(greekLetters, \pair -> pair.first == name);
	switch (maybeGreek) {
		Some(pair): pair.second;
		None(): {
			// Handle special mathematical constants and functions
			if (name == "infinity" || name == "infty") "\\infty"
			else if (name == "pi") "\\pi"
			else if (name == "e") "e"
			else if (strlen(name) == 1) name  // Single character variables
			else "\\text{" + escapeLatex(name) + "}";  // Multi-character identifiers
		}
	}
}

// Helper function to format comma-separated lists
formatCommaSeparated(elements : [OrMath_expr]) -> string {
	strGlue(map(elements, orbit2latex), ", ");
}

// Helper function to format OrIdType
formatOrIdType(id : OrIdType) -> string {
	typeAnnotation = if (length(id.type_annotations) > 0) {
		" : " + orbit2latex(id.type_annotations[0].math_expr);
	} else "";
	formatIdentifier(id.id) + typeAnnotation;
}

// Helper function to escape special LaTeX characters
escapeLatex(s : string) -> string {
	// Escape common LaTeX special characters
	strReplace(strReplace(strReplace(strReplace(strReplace(strReplace(strReplace(s,
		"\\", "\\\\"),
		"{", "\\{"),
		"}", "\\}"),
		"$", "\\$"),
		"&", "\\&"),
		"%", "\\%"),
		"#", "\\#");
}