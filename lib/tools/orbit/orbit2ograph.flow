import tools/orbit/orbit_types;
import tools/orbit/ograph;
import tools/orbit/prettyprint;
import tools/orbit/orbit_decompose;
import string;

export {
	// Convert a full expression to OGraph nodes recursively
	orbit2OGraph(graph : OGraph, expr : OrMath_expr) -> int;

	// Convert ONode back to Orbit expression
	ograph2Orbit(graph : OGraph, classId : int) -> OrMath_expr;
}

// Convert a full expression to OGraph nodes recursively
orbit2OGraph(graph : OGraph, expr : OrMath_expr) -> int {
	belongs = []; // Will be assigned in the graph
	
	// Use the new decompose function
	decomposed = decomposeOrbit(expr);
	op = decomposed.first;
	children = decomposed.second.first;
	value = decomposed.second.second;
	
	// Create node with operator and empty children first
	node = ONode(op, [], belongs);
	nodeId = insertONode(graph, node);
	
	// Set value if available
	switch (value) {
		OrbitInt(i): setOClassInt(graph, nodeId, i);
		OrbitDouble(d): setOClassDouble(graph, nodeId, d);
		OrbitString(s): setOClassString(graph, nodeId, s);
		OrbitBool(b): setOClassInt(graph, nodeId, if (b) 1 else 0);
		OrbitNone(): {};
	}
	
	// If this is a leaf node (no children), return the node ID
	if (length(children) == 0) {
		nodeId; // Last expression is returned value
	} else {
		// Otherwise, recursively process children and update the node
		childIds = map(children, \child -> orbit2OGraph(graph, child));
		
		// Update the node with children (recreate it with same ID but with children)
		node2 = ONode(op, childIds, getNodeBelongsTo(graph, nodeId));
		nodeId2 = insertONode(graph, node2);
		
		nodeId2; // Last expression is returned value
	}
}

// Convert ONode back to Orbit expression
ograph2Orbit(graph : OGraph, classId : int) -> OrMath_expr {
	root = findORoot(graph, classId);
	
	switch (lookupOClass(graph, root)) {
		None(): {
			// Node not found, return a default value
			OrInt(0);
		}
		Some(oclass): {
			op = oclass.node.op;
			
			// Get children expressions recursively
			children = map(oclass.node.children, \childId -> ograph2Orbit(graph, childId));
			
			// Get value based on operator type
			value = if (op == "Int") {
				switch (getOClassInt(graph, root)) {
					Some(i): OrbitInt(i);
					None(): OrbitInt(0);
				}
			} else if (op == "Double") {
				switch (getOClassDouble(graph, root)) {
					Some(d): OrbitDouble(d);
					None(): OrbitDouble(0.0);
				}
			} else if (op == "String" || op == "Identifier" || op == "Variable") {
				switch (getOClassString(graph, root)) {
					Some(s): OrbitString(s);
					None(): OrbitString("");
				}
			} else if (op == "Bool") {
				switch (getOClassInt(graph, root)) {
					Some(i): OrbitBool(i != 0);
					None(): OrbitBool(false);
				}
			} else {
				// For unknown operators, try to get a string representation
				switch (getOClassString(graph, root)) {
					Some(str): OrbitString(str);
					None(): OrbitNone();
				}
			};
			
			// Use the new construct function to build the expression
			constructOrbit(op, children, value);
		}
	}
}

// Helper function to get belongsTo array from a class ID
getNodeBelongsTo(graph : OGraph, classId : int) -> [int] {
	switch (lookupOClass(graph, classId)) {
		Some(cl): cl.node.belongsTo;
		None(): [];
	}
}