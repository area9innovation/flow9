import tools/orbit/orbit_types;
import tools/orbit/ograph;
import tools/orbit/prettyprint;
import tools/orbit/orbit_decompose;
import string;

export {
	// Convert ONode back to Orbit expression
	ograph2Orbit(graph : OGraph, classId : int) -> OrMath_expr;
}

// Convert ONode back to Orbit expression
ograph2Orbit(graph : OGraph, classId : int) -> OrMath_expr {
	root = findORoot(graph, classId);
	switch (lookupOClass(graph, root)) {
		None(): {
			// Node not found, return a default value
			OrInt(0);
		}
		Some(oclass): {
			op = oclass.node.op;
			// Get value based on operator type
			value = oclass.node.value;
			//println("Converting node " + i2s(root) + " with operator " + op + " to Orbit expression " + toString(value));
			
			// Get children expressions recursively
			children = map(oclass.node.children, \childId -> ograph2Orbit(graph, childId));
			
			// Use the new construct function to build the expression
			res = constructOrbit(op, children, value);
			//println("Constructed Orbit " + i2s(root) + " with operator " + op + " to " + prettyOrbit(res));
			// Handle type annotations
			res;
		}
	}
}

// Helper function to get belongsTo array from a class ID
getNodeBelongsTo(graph : OGraph, classId : int) -> [int] {
	switch (lookupOClass(graph, classId)) {
		Some(cl): cl.node.belongsTo;
		None(): [];
	}
}