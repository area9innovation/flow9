import tools/orbit/orbit_types;
import tools/orbit/ograph;
import tools/orbit/prettyprint;
import string;
import math/math;

export {
	// Registry for storing ographs and their nodes
	ographRegistry : ref Tree<string, OGraph> = ref makeTree();

	// Create a new ograph and return its name
	createOGraph(name : string) -> string;

	// Add a domain to a node (using node ID as domain)
	addDomainToNode(graphName : string, nodeId : int, domainId : int) -> bool;

	// Merge two nodes
	mergeOGraphNodes(graphName : string, nodeId1 : int, nodeId2 : int) -> bool;
}

// Create a new ograph
createOGraph(name : string) -> string {
	// Create a new ograph
	ograph = makeOGraph();
	
	// Store it in the registry
	ographRegistry := setTree(^ographRegistry, name, ograph);
	
	// Return the name
	name;
}

// Add a domain node to another node
addDomainToNode(graphName : string, nodeId : int, domainId : int) -> bool {
	// Get the ograph from the registry
	switch (lookupTree(^ographRegistry, graphName)) {
		Some(ograph): {
			// Add domain to node
			addDomainToONode(ograph, nodeId, domainId);
			true;
		}
		None(): false;
	}
}

// Merge two nodes
mergeOGraphNodes(graphName : string, nodeId1 : int, nodeId2 : int) -> bool {
	// Get the ograph from the registry
	switch (lookupTree(^ographRegistry, graphName)) {
		Some(ograph): {
			mergeOClasses(ograph, nodeId1, nodeId2);
			true;
		}
		None(): false;
	}
}
