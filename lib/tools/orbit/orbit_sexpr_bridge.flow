import tools/orbit/orbit_types;
import tools/orbit/sexpr/sexpr_types;
import tools/orbit/sexpr/pretty_sexpr;
import tools/orbit/sexpr/eval_sexpr;
import tools/orbit/orbit2sexpr;

import tools/orbit/orbit_compiled_parser; // For parsing Orbit code
import tools/mango/mcode_lib; // For Mango parser

export {
	// Converts an Orbit expression to SExpr, evaluates it, and returns the result as a string
	evaluateWithSExpr(expr : OrMath_expr) -> string;

	// Converts an Orbit expression to SExpr and pretty prints it
	prettySExprFromOrbit(expr : OrMath_expr) -> string;
}

// Convert and evaluate using SExpr interpreter
evaluateWithSExpr(expr : OrMath_expr) -> string {
	// Convert to SExpr
	sexpr = orbit2sexpr(expr);
	
	// Initialize SExpr environment and evaluate
	sexprEnv = addOrbitFns(getRuntimeEnv());
	evalResult = evalSexpr(sexprEnv, sexpr);
	
	// Return result as string
	prettySexpr(evalResult.value);
}

// Convert and pretty print using SExpr pretty printer
prettySExprFromOrbit(expr : OrMath_expr) -> string {
	// Convert to SExpr and pretty print
	sexpr = orbit2sexpr(expr);
	prettySexpr(sexpr);
}

addOrbitFns(env : SExpEnv) -> SExpEnv {
	SExpEnv(
		env with runtime = mergeTree(env.runtime, orbitRuntimeFunctions()),
	)
}

orbitRuntimeFunctions() -> Tree<string, RuntimeFn> {
	pairs2tree([
		Pair("prettyOrbit", RuntimeFn(1, \args -> {
			// Convert the first argument to Orbit expression
			orbitExpr = sexpr2orbit(args.args[0]);
			
			// Pretty print the Orbit expression
			SSString(prettyOrbit(orbitExpr))
		})),
	])
}


