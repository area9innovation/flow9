import tools/orbit/orbit_types;
import tools/orbit/orbit_env;
import tools/orbit/prettyprint;
import tools/orbit/orbit_pattern;
import tools/orbit/orbit_simple_ograph;
import tools/orbit/ograph2dot;
import tools/orbit/orbit2ograph;
import tools/orbit/ograph_pattern; // For OGraph pattern matching
import tools/orbit/utils; // For access to the original utility functions
import tools/orbit/substitute; // For variable substitution
import tools/orbit/orbit_compare; // For comparing Orbit expressions with OGraph nodes and finding nodes
import ds/tree;
import string;

// This file provides special internal orbit functions that have the ability to NOT evaluate arguments
// These functions work directly with the AST and are used by the interpreter

export {
    // Define a struct to hold a runtime function
    OrbitRuntimeFn(
        fn: ([OrMath_expr], OrbEnv, (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv
    );

    // Initialize the runtime tree with all special functions
    initOrbitRuntime() -> Tree<string, OrbitRuntimeFn>;
    
    // Type checking for AST nodes (renamed to avoid collision)
    runtimeIsAstType(typeAnnotations : [OrType]) -> bool;
    runtimeIsConstructor(expr : OrMath_expr) -> bool;
    
    // Evaluate an expression using bindings from pattern matching
    evalWithBindings(
        expr : OrMath_expr,        // Expression to evaluate
        bindings : Tree<string, OrMath_expr>,  // Variable bindings from pattern matching
        env : OrbEnv               // Environment context
    ) -> OrMath_expr;  // Returns the evaluated expression
    
    // Substitute variables in an expression using bindings from pattern matching
    substituteWithBindings(
        expr : OrMath_expr,        // Expression to substitute variables in
        bindings : Tree<string, OrMath_expr>,  // Variable bindings from pattern matching
        env : OrbEnv               // Environment context
    ) -> OrMath_expr;  // Returns the expression with variables substituted
    
    // Process an AST and evaluate only the parts wrapped in eval calls
    unquote(
        expr : OrMath_expr,        // AST to process
        bindings : Tree<string, OrMath_expr>,  // Variable bindings from pattern matching
        env : OrbEnv               // Environment context
    ) -> OrMath_expr;  // Returns the processed AST with eval parts evaluated
}

// Check if a type annotation indicates AST type
runtimeIsAstType(typeAnnotations : [OrType]) -> bool {
    exists(typeAnnotations, \t -> {
        switch (t.math_expr) {
            OrIdentifier(id): id == "ast";
            default: false;
        }
    });
}

// Check if expression is a constructor call
runtimeIsConstructor(expr : OrMath_expr) -> bool {
    switch (expr) {
        OrFunction(fn, __): {
            switch (fn) {
                OrIdentifier(id): {
                    // Check if first character is uppercase (convention for constructors)
                    s = getCharAt(id, 0);
                    s >= "A" && s <= "Z";
                }
                default: false;
            }
        }
        default: false;
    }
}

// Initialize the runtime tree with all special functions
initOrbitRuntime() -> Tree<string, OrbitRuntimeFn> {
    functions = [
        Pair("eval", OrbitRuntimeFn(evalFunction)),
        Pair("prettyOrbit", OrbitRuntimeFn(prettyOrbitFunction)),
        Pair("makeOGraph", OrbitRuntimeFn(makeOGraphFunction)),
        Pair("addOGraph", OrbitRuntimeFn(addFullExpressionToOGraphFunction)),
        Pair("addDomainToNode", OrbitRuntimeFn(addDomainToNodeFunction)),
        Pair("mergeOGraphNodes", OrbitRuntimeFn(mergeOGraphNodesFunction)),
        Pair("ograph2dot", OrbitRuntimeFn(ograph2dotFunction)),
        Pair("extractOGraph", OrbitRuntimeFn(extractOGraphFunction)),
        Pair("matchOGraphPattern", OrbitRuntimeFn(matchOGraphPatternFunction)),
        Pair("evalWithBindings", OrbitRuntimeFn(evalWithBindingsFunction)),
        Pair("substituteWithBindings", OrbitRuntimeFn(substituteWithBindingsFunction)),
        Pair("unquote", OrbitRuntimeFn(unquoteFunction)),
        Pair("findOGraphId", OrbitRuntimeFn(findOGraphIdFunction)),
    ];
    
    // Convert the list of pairs to a tree
    fold(functions, makeTree(), \acc, p -> setTree(acc, p.first, p.second));
}

// Implementation of eval function
evalFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 1) {
        println("ERROR: eval expects exactly 1 argument");
        env;
    } else {
        // Direct evaluation of the expression without conversion
        interpret(env, args[0]);
    }
}

// Implementation of prettyOrbit function
prettyOrbitFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 1) {
        println("ERROR: prettyOrbit expects exactly 1 argument");
        env;
    } else {
        // Evaluate the argument first
        envArg = interpret(env, args[0]);
        // Then pretty print it
        pretty = prettyOrbit(envArg.result);
        OrbEnv(envArg with result = OrString(pretty));
    }
}

// Implementation of makeOGraph function
makeOGraphFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 1) {
        println("ERROR: makeOGraph expects exactly 1 argument");
        env;
    } else {
        // Evaluate the name argument
        envName = interpret(env, args[0]);
        name = getOString(envName.result, "makeOGraph");
        
        // Create the graph
        createOGraph(name);
        
        // Return the name
        OrbEnv(envName with result = OrString(name));
    }
}

// Implementation of addDomainToNode function (node ID version)
addDomainToNodeFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 3) {
        println("ERROR: addDomainToNode expects exactly 3 arguments");
        env;
    } else {
        // Evaluate the graph name
        envName = interpret(env, args[0]);
        name = getOString(envName.result, "addDomainToNode.name");
        
        // Evaluate the node ID
        envNodeId = interpret(envName, args[1]);
        nodeId = getOInt(envNodeId.result, "addDomainToNode.nodeId");
        
        // Evaluate the domain node ID
        envDomainId = interpret(envNodeId, args[2]);
        domainId = getOInt(envDomainId.result, "addDomainToNode.domainId");
        
        // Add the domain
        success = addDomainToNode(name, nodeId, domainId);
        OrbEnv(envDomainId with result = OrBool(success));
    }
}



// Implementation of mergeOGraphNodes function
mergeOGraphNodesFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 3) {
        println("ERROR: mergeOGraphNodes expects exactly 3 arguments");
        env;
    } else {
        // Evaluate the graph name
        envName = interpret(env, args[0]);
        name = getOString(envName.result, "mergeOGraphNodes.name");
        
        // Evaluate the first node ID
        envId1 = interpret(envName, args[1]);
        id1 = getOInt(envId1.result, "mergeOGraphNodes.id1");
        
        // Evaluate the second node ID
        envId2 = interpret(envId1, args[2]);
        id2 = getOInt(envId2.result, "mergeOGraphNodes.id2");
        
        // Merge the nodes
        success = mergeOGraphNodes(name, id1, id2);
        OrbEnv(envId2 with result = OrBool(success));
    }
}

// Implementation of addOGraph function
addFullExpressionToOGraphFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) < 2) {
        println("ERROR: addOGraph expects at least 2 arguments: graph name and expression");
        env;
    } else {
        // Evaluate the graph name
        envName = interpret(env, args[0]);
        name = getOString(envName.result, "addOGraph.name");
        
        // Evaluate the expression to get its actual value
        envExpr = interpret(envName, args[1]);
        astExpr = envExpr.result;
        
        // Debug the AST expression if tracing
        if (env.tracing) println("Adding full expression to ograph: " + prettyOrbit(astExpr));
        
        // Get the graph from the registry
        switch (lookupTree(^ographRegistry, name)) {
            Some(ograph): {
                // Add the full expression recursively
                nodeId = orbit2OGraph(ograph, astExpr);
                if (env.tracing) println("Added full expression, root node ID: " + i2s(nodeId));
                OrbEnv(envExpr with result = OrInt(nodeId));
            }
            None(): {
                println("ERROR: OGraph '" + name + "' not found");
                OrbEnv(envExpr with result = OrInt(-1));
            }
        }
    }
}

// Implementation of extractOGraph function
extractOGraphFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 2) {
        println("ERROR: extractOGraph expects exactly 2 arguments: graph name and node ID");
        env;
    } else {
        // Evaluate the graph name
        envName = interpret(env, args[0]);
        name = getOString(envName.result, "extractOGraph.name");
        
        // Evaluate the node ID
        envNodeId = interpret(envName, args[1]);
        nodeId = getOInt(envNodeId.result, "extractOGraph.nodeId");
        
        // Get the graph from the registry
        switch (lookupTree(^ographRegistry, name)) {
            Some(ograph): {
                // Extract the expression from the graph
                expr = ograph2Orbit(ograph, nodeId);
                if (env.tracing) println("Extracted expression from OGraph " + name + ", node " + i2s(nodeId));
                OrbEnv(envNodeId with result = expr);
            }
            None(): {
                println("ERROR: OGraph '" + name + "' not found");
                OrbEnv(envNodeId with result = OrInt(-1));
            }
        }
    }
}

// Implementation of matchOGraphPattern function
matchOGraphPatternFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 3) {
        println("ERROR: matchOGraphPattern expects exactly 3 arguments: graph name, pattern, and callback");
        env;
    } else {
        // Evaluate the graph name
        envName = interpret(env, args[0]);
        name = getOString(envName.result, "matchOGraphPattern.name");
        
        // Get the pattern	
        pattern = interpret(env, args[1]).result;
		
        if (env.tracing) println("DEBUG: Pattern for matching: " + prettyOrbit(pattern));
        
        // Get the callback function
        callbackEnv = interpret(envName, args[2]);
        callback = callbackEnv.result;
        // Debug output if tracing
        if (env.tracing) {
            println("Pattern matching in graph '" + name + "'");
            println("Pattern: " + prettyOrbit(pattern));
        }
        
        // Store the results of pattern matching
        results = ref [];
        
        // Ensure the callback is a function
        switch (callback) {
            OrLambda(bnds, params, body): {
                if (length(params) != 1 && length(params) != 2) {
                    println("ERROR: matchOGraphPattern callback must take one or two arguments (bindings, [eclassId])");
                    OrbEnv(callbackEnv with result = OrInt(0));
                } else {
                    // Create callback adapter that will be called for each match
                    // Note: This function MUST return void (not OrbEnv) to match the expected callback type
                    matchCallback = \bindings, eclassId -> {
                        // Convert bindings to Orbit-friendly format - array of pairs
                        bindingsExpr = bindings2OrbitExpr(bindings);
                        
                        if (env.tracing) {
                            println("DEBUG: Found match with " + i2s(sizeTree(bindings)) + " bindings at eclass ID: " + i2s(eclassId));
                            // Print out each binding for debugging
                            keys = getTreeKeys(bindings);
                            iter(keys, \key -> {
                                value = lookupTreeDef(bindings, key, OrInt(0));
                                println("  " + key + " = " + prettyOrbit(value));
                            });
                        }
                        // Interpret the callback with the new environment
                        callResult = interpret(callbackEnv, OrFunction(callback, [bindingsExpr, OrInt(eclassId)]));
						if (env.tracing) println("DEBUG: Callback result: " + prettyOrbit(callResult.result));
                        
                        // Save the result
                        results := arrayPush(^results, callResult.result);
                    };
                    // Call the pattern matcher with the callback
                    if (env.tracing) println("DEBUG: Calling matchOGraphPattern with graph " + name);
                    matchCount = matchOGraphPattern(name, pattern, matchCallback, env.tracing);
                    if (env.tracing) println("DEBUG: matchOGraphPattern returned " + i2s(matchCount) + " matches");
                    
                    // Return the number of matches as the result
                    OrbEnv(callbackEnv with result = OrInt(matchCount));
                }
            }
            default: {
                println("ERROR: matchOGraphPattern third argument must be a function");
                OrbEnv(callbackEnv with result = OrInt(0));
            }
        }
    }
}

// Implementation of findOGraphId function using the centralized implementation
findOGraphIdFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
	if (length(args) != 2) {
		println("ERROR: findOGraphId expects exactly 2 arguments: graph name and expression");
		env;
	} else {
		// Evaluate the graph name
		envName = interpret(env, args[0]);
		name = getOString(envName.result, "findOGraphId.name");

		// Evaluate the expression
		envExpr = interpret(envName, args[1]);
		astExpr = envExpr.result;

		// Print debug info if tracing is enabled
		if (env.tracing) {
			println("Searching for: " + prettyOrbit(astExpr) + " in OGraph '" + name + "'");
		}
		
		// Use the standalone findOGraphId function from ograph_find.flow
		foundId = findOGraphId(name, astExpr);
		
		if (env.tracing && foundId != -1) {
			println("Found matching node with ID: " + i2s(foundId));
		}
		
		// Return the found ID or -1 if not found
		OrbEnv(envExpr with result = OrInt(foundId));
	}
}

// Convert variable bindings to an Orbit expression (array of pairs)
bindings2OrbitExpr(bindings : Tree<string, OrMath_expr>) -> OrMath_expr {
    pairs = map(getTreeKeys(bindings), \key -> {
        value = lookupTreeDef(bindings, key, OrInt(0));
        OrFunction(OrIdentifier("Pair"), [OrString(key), value])
    });
    
    OrArray(pairs);
}

// Implementation of evalWithBindings function
evalWithBindingsFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 2) {
        println("ERROR: evalWithBindings expects exactly 2 arguments: expression and bindings");
        env;
    } else {
        // Get the expression to evaluate
        expr = interpret(env, args[0]).result;
        
        // Evaluate the bindings argument to get a map of variable bindings
        envBindings = interpret(env, args[1]);
        
        // Extract the bindings from the result
        bindings = switch (envBindings.result) {
            OrArray(pairs): {
                // Convert array of Pair(key, value) to a Tree
                fold(pairs, makeTree(), \acc, p -> {
                    switch (p) {
                        OrFunction(fn, pargs): {
                            if (length(pargs) == 2) {
                                switch (pargs[0]) {
                                    OrString(key): setTree(acc, key, pargs[1]);
                                    default: acc;
                                }
                            } else acc;
                        }
                        default: acc;
                    }
                });
            }
            default: {
                println("ERROR: evalWithBindings second argument must be an array of Pair(key, value)");
                makeTree();
            }
        };
        
        // Debug output if tracing
        if (env.tracing) {
            println("Evaluating expression with bindings:");
            println("Expression: " + prettyOrbit(expr));
            println("Bindings: " + i2s(sizeTree(bindings)) + " variables");
            iter(getTreeKeys(bindings), \key -> {
                println("  " + key + " = " + prettyOrbit(lookupTreeDef(bindings, key, OrInt(0))));
            });
        }
        
        // Create a new environment with the original env plus the bindings
        newEnv = fold(getTreeKeys(bindings), envBindings, \accEnv, key -> {
            bindVar(accEnv, key, lookupTreeDef(bindings, key, OrInt(0)));
        });
        
        // Now evaluate the expression in the new environment
        resultEnv = interpret(newEnv, expr);
        
        // Return the result
        resultEnv;
    }
}

// Public API for evalWithBindings - used by other modules
evalWithBindings(expr : OrMath_expr, bindings : Tree<string, OrMath_expr>, env : OrbEnv) -> OrMath_expr {
    // Create a new environment with the original env plus the bindings
    newEnv = fold(getTreeKeys(bindings), env, \accEnv, key -> {
        bindVar(accEnv, key, lookupTreeDef(bindings, key, OrInt(0)));
    });
    
    // The interpreter will need to evaluate this expression with the new environment
    // For the public API, we just return the expression - the caller must handle evaluation
    expr;
}

// Implementation of ograph2dot function
ograph2dotFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 1) {
        println("ERROR: ograph2dot expects exactly 1 argument");
        env;
    } else {
        // Evaluate the graph name
        envName = interpret(env, args[0]);
        name = getOString(envName.result, "ograph2dot.name");
        
        // Get the graph from the registry
        switch (lookupTree(^ographRegistry, name)) {
            Some(ograph): {
                // Convert the graph to DOT format
                dotCode = ograph2dot(ograph);
                if (env.tracing) println("OGraph '" + name + "' converted to DOT format");
                OrbEnv(envName with result = OrString(dotCode));
            }
            None(): {
                println("ERROR: OGraph '" + name + "' not found");
                OrbEnv(envName with result = OrString(""));
            }
        }
    }
}

// Implementation of substituteWithBindings function
substituteWithBindingsFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 2) {
        println("ERROR: substituteWithBindings expects exactly 2 arguments: expression and bindings");
        env;
    } else {
        // Get the expression to substitute variables in
        expr = interpret(env, args[0]).result;
        
        // Evaluate the bindings argument to get a map of variable bindings
        envBindings = interpret(env, args[1]);
        
        // Extract the bindings from the result
        bindings = switch (envBindings.result) {
            OrArray(pairs): {
                // Convert array of Pair(key, value) to a Tree
                fold(pairs, makeTree(), \acc, p -> {
                    switch (p) {
                        OrFunction(fn, pargs): {
                            if (length(pargs) == 2) {
                                switch (pargs[0]) {
                                    OrString(key): setTree(acc, key, pargs[1]);
                                    default: acc;
                                }
                            } else acc;
                        }
                        default: acc;
                    }
                });
            }
            default: {
                println("ERROR: substituteWithBindings second argument must be an array of Pair(key, value)");
                makeTree();
            }
        };
        
        // Debug output if tracing
        if (env.tracing) {
            println("Substituting variables in expression with bindings:");
            println("Expression: " + prettyOrbit(expr));
            println("Bindings: " + i2s(sizeTree(bindings)) + " variables");
            iter(getTreeKeys(bindings), \key -> {
                println("  " + key + " = " + prettyOrbit(lookupTreeDef(bindings, key, OrInt(0))));
            });
        }
        
        // Apply substitutions using the bindings
        result = applyBindings(expr, bindings);
        
        // Return the result
        OrbEnv(envBindings with result = result);
    }
}

// Public API for substituteWithBindings - used by other modules
substituteWithBindings(expr : OrMath_expr, bindings : Tree<string, OrMath_expr>, env : OrbEnv) -> OrMath_expr {
    // Apply the substitutions directly
    applyBindings(expr, bindings);
}

// Implementation of unquote function
unquoteFunction(args : [OrMath_expr], env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrbEnv {
    if (length(args) != 2) {
        println("ERROR: unquote expects exactly 2 arguments: expression and bindings");
        env;
    } else {
        // Get the expression to process
        expr = interpret(env, args[0]).result;
        
        // Evaluate the bindings argument to get a map of variable bindings
        envBindings = interpret(env, args[1]);
        
        // Extract the bindings from the result
        bindings = switch (envBindings.result) {
            OrArray(pairs): {
                // Convert array of Pair(key, value) to a Tree
                fold(pairs, makeTree(), \acc, p -> {
                    switch (p) {
                        OrFunction(fn, pargs): {
                            if (length(pargs) == 2) {
                                switch (pargs[0]) {
                                    OrString(key): setTree(acc, key, pargs[1]);
                                    default: acc;
                                }
                            } else acc;
                        }
                        default: acc;
                    }
                });
            }
            default: {
                println("ERROR: unquote second argument must be an array of Pair(key, value)");
                makeTree();
            }
        };
        
        // Debug output if tracing
        if (env.tracing) {
            println("Unquoting expression with bindings:");
            println("Expression: " + prettyOrbit(expr));
            println("Bindings: " + i2s(sizeTree(bindings)) + " variables");
            iter(getTreeKeys(bindings), \key -> {
                println("  " + key + " = " + prettyOrbit(lookupTreeDef(bindings, key, OrInt(0))));
            });
        }
        
        // Process the expression, evaluating only eval calls
        result = unquoteRecursive(expr, bindings, envBindings, interpret);
        
        // Return the result
        OrbEnv(envBindings with result = result);
    }
}

// Helper function for unquote to recursively process the AST
unquoteRecursive(expr : OrMath_expr, bindings : Tree<string, OrMath_expr>, env : OrbEnv, interpret : (OrbEnv, OrMath_expr) -> OrbEnv) -> OrMath_expr {
    switch (expr) {
        // Check if we have an eval function call
        OrFunction(fnExpr, args): {
            // Check if this is an eval call
            switch (fnExpr) {
                OrIdentifier(id): {
                    if (id == "eval" && length(args) == 1) {
                        // This is an eval call, evaluate its argument with bindings
                        // Create a new environment with bindings
                        newEnv = fold(getTreeKeys(bindings), env, \accEnv, key -> {
                            bindVar(accEnv, key, lookupTreeDef(bindings, key, OrInt(0)));
                        });
                        
                        // Evaluate the argument using the interpreter
                        resultEnv = interpret(newEnv, args[0]);
                        
                        // Return the result of evaluation
                        resultEnv.result;
                    } else {
                        // Not an eval call, process recursively
                        OrFunction(
                            unquoteRecursive(fnExpr, bindings, env, interpret),
                            map(args, \arg -> unquoteRecursive(arg, bindings, env, interpret))
                        );
                    }
                }
                default: {
                    // Not an identifier, process recursively
                    OrFunction(
                        unquoteRecursive(fnExpr, bindings, env, interpret),
                        map(args, \arg -> unquoteRecursive(arg, bindings, env, interpret))
                    );
                }
            }
        }
        
        // Recursively process other expression types
        OrAdd(a, b): OrAdd(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrSubtract(a, b): OrSubtract(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrMultiply(a, b): OrMultiply(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrDivide(a, b): OrDivide(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrNegate(a): OrNegate(unquoteRecursive(a, bindings, env, interpret));
        OrExponent(a, b): OrExponent(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        
        // Comparison operations
        OrEquals(a, b): OrEquals(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrNotEquals(a, b): OrNotEquals(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrGreaterThan(a, b): OrGreaterThan(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrGreaterEquals(a, b): OrGreaterEquals(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrLessThan(a, b): OrLessThan(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrLessEquals(a, b): OrLessEquals(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        
        // Logical operations
        OrLogicalAnd(a, b): OrLogicalAnd(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrLogicalOr(a, b): OrLogicalOr(unquoteRecursive(a, bindings, env, interpret), unquoteRecursive(b, bindings, env, interpret));
        OrLogicalNot(a): OrLogicalNot(unquoteRecursive(a, bindings, env, interpret));
        
        // Control flow
        OrIfElse(cond, thenExpr, elseExpr): OrIfElse(
            unquoteRecursive(cond, bindings, env, interpret),
            unquoteRecursive(thenExpr, bindings, env, interpret),
            unquoteRecursive(elseExpr, bindings, env, interpret)
        );
        
        // Structured data
        OrArray(items): OrArray(map(items, \item -> unquoteRecursive(item, bindings, env, interpret)));
        
        // Variable references
        OrVariable(id): {
            switch (lookupTree(bindings, id)) {
                Some(val): val;
                None(): expr;
            }
        }
        
        // For other expression types, return as is
        default: expr;
    }
}

// Public API for unquote - used by other modules
unquote(expr : OrMath_expr, bindings : Tree<string, OrMath_expr>, env : OrbEnv) -> OrMath_expr {
    // This is just a wrapper that would typically need the interpreter function
    // For direct API calls we can't provide this, so this method should typically be used
    // from the runtime function instead
    expr;
}