import tools/orbit/orbit_types;
import tools/orbit/types;
import tools/orbit/prettyprint;
import string;

export {
	// Decompose an OrMath_expr into its operator name and children
	// Returns the operator name, children expressions, and optional primitive value
	decomposeOrbit(expr : OrMath_expr) -> Pair<string, Pair<[OrMath_expr], OrbitValue>>;

	// Construct an OrMath_expr from an operator name, children, and optional primitive value
	constructOrbit(op : string, children : [OrMath_expr], value : OrbitValue) -> OrMath_expr;
}

// Decompose an OrMath_expr into its operator name, children, and primitive value
decomposeOrbit(expr : OrMath_expr) -> Pair<string, Pair<[OrMath_expr], OrbitValue>> {
	switch (expr) {
		// Primitive values
		OrInt(i): Pair("Int", Pair([], OrbitInt(i)));
		OrDouble(d): Pair("Double", Pair([], OrbitDouble(d)));
		OrString(s): Pair("String", Pair([], OrbitString(s)));
		OrBool(b): Pair("Bool", Pair([], OrbitBool(b)));
		OrIdentifier(id): Pair("Identifier", Pair([], OrbitString(id)));
		OrUId(id): Pair("UId", Pair([], OrbitString(id)));
		OrGreekLetter(letter): Pair("GreekLetter", Pair([], OrbitString(letter)));
		
		// Binary operations
		OrAdd(a, b): Pair("+", Pair([a, b], OrbitNone()));
		OrSubtract(a, b): Pair("-", Pair([a, b], OrbitNone()));
		OrMultiply(a, b): Pair("*", Pair([a, b], OrbitNone()));
		OrDivide(a, b): Pair("/", Pair([a, b], OrbitNone()));
		OrExponent(a, b): Pair("^", Pair([a, b], OrbitNone())); // Add exponentiation handling
		OrEquals(a, b): Pair("=", Pair([a, b], OrbitNone()));
		OrNotEquals(a, b): Pair("!=", Pair([a, b], OrbitNone()));
		OrGreaterThan(a, b): Pair(">", Pair([a, b], OrbitNone()));
		OrGreaterEquals(a, b): Pair(">=", Pair([a, b], OrbitNone()));
		OrLessThan(a, b): Pair("<", Pair([a, b], OrbitNone()));
		OrLessEquals(a, b): Pair("<=", Pair([a, b], OrbitNone()));
		OrLogicalAnd(a, b): Pair("&&", Pair([a, b], OrbitNone()));
		OrLogicalOr(a, b): Pair("||", Pair([a, b], OrbitNone()));
		OrIndex(a, b): Pair("Index", Pair([a, b], OrbitNone()));
		OrModulo(a, b): Pair("%", Pair([a, b], OrbitNone()));
		
		// Domain operators
		OrTypeAnnotation(math_expr1, math_expr2): Pair("TypeAnnotation", Pair([math_expr1, math_expr2], OrbitNone()));
		OrNotTypeAnnotation(math_expr1, math_expr2): Pair("NotTypeAnnotation", Pair([math_expr1, math_expr2], OrbitNone()));
		
		// Field access
		OrField(math_expr, id): Pair("Field", Pair([math_expr], OrbitString(id)));
		
		// Unary operations
		OrNegate(a): Pair("negate", Pair([a], OrbitNone()));
		OrLogicalNot(a): Pair("!", Pair([a], OrbitNone()));
		
		// Superscript and subscript
		OrSuperscript(math_expr, superscript): Pair("Superscript", Pair([math_expr], OrbitString(superscript)));
		OrSubscript(math_expr, subscript): Pair("Subscript", Pair([math_expr], OrbitString(subscript)));
		
		// Collection types
		OrArray(exprs): Pair("Array", Pair(exprs, OrbitNone()));
		OrSetLiteral(exprs): Pair("SetLiteral", Pair(exprs, OrbitNone()));
		
		// Function call
		OrFunction(fn, args): Pair("call", Pair(concat([fn], args), OrbitNone()));
		
		// Control structures
		OrIfElse(cond, thenExpr, elseExpr): Pair("if", Pair([cond, thenExpr, elseExpr], OrbitNone()));
		OrSequence(a, b): Pair("seq", Pair([a, b], OrbitNone()));
		
		// Handle the pattern match construct (is)
		OrMatch(expr1, cases): Pair("match", Pair([expr1, cases], OrbitNone()));

		// Handle the Let construct
		OrLet(idType, evalExpr): Pair("let", Pair([evalExpr], OrbitString(idType.id)));

		// For anything else, just use a generic representation
		default: {
			println("TODO: Handle expression type in decompose: " + prettyOrbit(expr));
			Pair("unknown", Pair([], OrbitString(prettyOrbit(expr))));
		}
	}
}

// Construct an OrMath_expr from an operator name, children, and primitive value
constructOrbit(op : string, children : [OrMath_expr], value : OrbitValue) -> OrMath_expr {
	if (op == "Int") {
		switch (value) {
			OrbitInt(i): OrInt(i);
			default: OrInt(0);
		}
	} else if (op == "Double") {
		switch (value) {
			OrbitDouble(d): OrDouble(d);
			default: OrDouble(0.0);
		}
	} else if (op == "String") {
		switch (value) {
			OrbitString(s): OrString(s);
			default: OrString("");
		}
	} else if (op == "Bool") {
		switch (value) {
			OrbitBool(b): OrBool(b);
			OrbitInt(i): OrBool(i != 0);
			default: OrBool(false);
		}
	} else if (op == "Identifier") {
		switch (value) {
			OrbitString(id): OrIdentifier(id);
			default: OrIdentifier("unknown");
		}
	} else if (op == "UId") {
		switch (value) {
			OrbitString(id): OrUId(id);
			default: OrUId("unknown");
		}
	} else if (op == "GreekLetter") {
		switch (value) {
			OrbitString(letter): OrGreekLetter(letter);
			default: OrGreekLetter("alpha"); // Default to alpha if not specified
		}
	}
	// Binary operations
	else if (op == "+") {
		if (length(children) == 2) {
			OrAdd(children[0], children[1]);
		} else {
			println("Error: + wants 2 children");
			OrInt(0); // Default if children missing
		}
	} else if (op == "-") {
		if (length(children) == 2) {
			OrSubtract(children[0], children[1]);
		} else {
			println("Error: - wants 2 children");
			OrInt(0);
		}
	} else if (op == "*") {
		if (length(children) == 2) {
			OrMultiply(children[0], children[1]);
		} else {
			println("Error: * wants 2 children");
			OrInt(1);
		}
	} else if (op == "/") {
		if (length(children) == 2) {
			OrDivide(children[0], children[1]);
		} else {
			println("Error: / wants 2 children");
			OrInt(0);
		}
	} else if (op == "^") {
		if (length(children) == 2) {
			OrExponent(children[0], children[1]);
		} else {
			println("Error: ^ wants 2 children");
			OrInt(1);
		}
	} else if (op == "%") {
		if (length(children) == 2) {
			OrModulo(children[0], children[1]);
		} else {
			println("Error: % wants 2 children");
			OrInt(0);
		}
	} else if (op == "Index") {
		if (length(children) == 2) {
			OrIndex(children[0], children[1]);
		} else {
			println("Error: Index wants 2 children");
			OrInt(0);
		}
	} else if (op == "=") {
		if (length(children) == 2) {
			OrEquals(children[0], children[1]);
		} else {
			println("Error: = wants 2 children");
			OrBool(false);
		}
	} else if (op == "!=") {
		if (length(children) == 2) {
			OrNotEquals(children[0], children[1]);
		} else {
			println("Error: != wants 2 children");
			OrBool(false);
		}
	} else if (op == ">") {
		if (length(children) == 2) {
			OrGreaterThan(children[0], children[1]);
		} else {
			println("Error: > wants 2 children");
			OrBool(false);
		}
	} else if (op == ">=") {
		if (length(children) == 2) {
			OrGreaterEquals(children[0], children[1]);
		} else {
			println("Error: >= wants 2 children");
			OrBool(false);
		}
	} else if (op == "<") {
		if (length(children) == 2) {
			OrLessThan(children[0], children[1]);
		} else {
			println("Error: < wants 2 children");
			OrBool(false);
		}
	} else if (op == "<=") {
		if (length(children) == 2) {
			OrLessEquals(children[0], children[1]);
		} else {
			println("Error: <= wants 2 children");
			OrBool(false);
		}
	} else if (op == "&&") {
		if (length(children) == 2) {
			OrLogicalAnd(children[0], children[1]);
		} else {
			println("Error: && wants 2 children");
			OrBool(false);
		}
	} else if (op == "||") {
		if (length(children) == 2) {
			OrLogicalOr(children[0], children[1]);
		} else {
			println("Error: || wants 2 children");
			OrBool(false);
		}
	} 
	// Field access
	else if (op == "Field") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(id): OrField(children[0], id);
				default: OrField(children[0], "unknown");
			}
		} else {
			OrInt(0);
		}
	}
	// Superscript and subscript
	else if (op == "Superscript") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(superscript): OrSuperscript(children[0], superscript);
				default: OrSuperscript(children[0], "");
			}
		} else {
			OrInt(0);
		}
	} else if (op == "Subscript") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(subscript): OrSubscript(children[0], subscript);
				default: OrSubscript(children[0], "");
			}
		} else {
			OrInt(0);
		}
	}
	// Collection types
	else if (op == "Array") {
		OrArray(children);
	} else if (op == "SetLiteral") {
		OrSetLiteral(children);
	}
	// Unary operations
	else if (op == "negate") {
		if (length(children) >= 1) {
			OrNegate(children[0]);
		} else {
			OrInt(0);
		}
	} else if (op == "!") {
		if (length(children) >= 1) {
			OrLogicalNot(children[0]);
		} else {
			OrBool(false);
		}
	} 
	// Function call
	else if (op == "call") {
		if (length(children) >= 1) {
			OrFunction(children[0], tail(children));
		} else {
			OrInt(0);
		}
	} 
	// Control structures
	else if (op == "if") {
		if (length(children) >= 3) {
			OrIfElse(children[0], children[1], children[2]);
		} else {
			OrInt(0);
		}
	} else if (op == "seq") {
		if (length(children) >= 2) {
			OrSequence(children[0], children[1]);
		} else {
			OrInt(0);
		}
	}
	// Domain operators
	else if (op == "TypeAnnotation") {
		if (length(children) >= 2) {
			OrTypeAnnotation(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} else if (op == "NotTypeAnnotation") {
		if (length(children) >= 2) {
			OrNotTypeAnnotation(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} 
	// Handle pattern matching (is) construct
	else if (op == "match") {
		if (length(children) >= 2) {
			// Construct the OrMatch with the expression and pattern cases
			OrMatch(children[0], children[1]);
		} else {
			println("Error: match operation requires at least 2 children");
			OrInt(0);
		}
	}
	// Handle let binding
	else if (op == "let") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(id): {
					// Create an OrIdType with the identifier and empty type annotations
					idType = OrIdType(id, []);
					// Construct the OrLet expression
					OrLet(idType, children[0]);
				}
				default: {
					println("Error: let requires an identifier as value");
					OrInt(0);
				}
			}
		} else {
			println("Error: let operation requires at least 1 child");
			OrInt(0);
		}
	}
	// For unknown operators, return a default value or string representation
	else {
		println("TODO: Handle operator in construct: " + op);
		switch (value) {
			OrbitString(str): OrString(str);
			default: OrInt(0);
		}
	}
}