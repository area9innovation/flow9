import tools/orbit/orbit_types;
import tools/orbit/types;
import tools/orbit/prettyprint;
import string;

export {
	// Decompose an OrMath_expr into its operator name and children
	// Returns the operator name, children expressions, and optional primitive value
	decomposeOrbit(expr : OrMath_expr) -> Pair<string, Pair<[OrMath_expr], OrbitValue>>;

	// Construct an OrMath_expr from an operator name, children, and optional primitive value
	constructOrbit(op : string, children : [OrMath_expr], value : OrbitValue) -> OrMath_expr;
}

// Decompose an OrMath_expr into its operator name, children, and primitive value
decomposeOrbit(expr : OrMath_expr) -> Pair<string, Pair<[OrMath_expr], OrbitValue>> {
	switch (expr) {
		// Primitive values
		OrInt(i): Pair("Int", Pair([], OrbitInt(i)));
		OrDouble(d): Pair("Double", Pair([], OrbitDouble(d)));
		OrString(s): Pair("String", Pair([], OrbitString(s)));
		OrBool(b): Pair("Bool", Pair([], OrbitBool(b)));
		OrIdentifier(id): Pair("Identifier", Pair([], OrbitString(id)));
		OrUId(id): Pair("UId", Pair([], OrbitString(id)));
		
		// Binary operations
		OrAdd(a, b): Pair("+", Pair([a, b], OrbitNone()));
		OrSubtract(a, b): Pair("-", Pair([a, b], OrbitNone()));
		OrMultiply(a, b): Pair("*", Pair([a, b], OrbitNone()));
		OrDivide(a, b): Pair("/", Pair([a, b], OrbitNone()));
		OrExponent(a, b): Pair("^", Pair([a, b], OrbitNone())); // Add exponentiation handling
		OrEquals(a, b): Pair("=", Pair([a, b], OrbitNone()));
		OrNotEquals(a, b): Pair("!=", Pair([a, b], OrbitNone()));
		OrGreaterThan(a, b): Pair(">", Pair([a, b], OrbitNone()));
		OrGreaterEquals(a, b): Pair(">=", Pair([a, b], OrbitNone()));
		OrLessThan(a, b): Pair("<", Pair([a, b], OrbitNone()));
		OrLessEquals(a, b): Pair("<=", Pair([a, b], OrbitNone()));
		OrLogicalAnd(a, b): Pair("&&", Pair([a, b], OrbitNone()));
		OrLogicalOr(a, b): Pair("||", Pair([a, b], OrbitNone()));
		OrIndex(a, b): Pair("Index", Pair([a, b], OrbitNone()));
		OrModulo(a, b): Pair("%", Pair([a, b], OrbitNone()));
		
		// Domain operators
		OrTypeAnnotation(math_expr1, math_expr2): Pair("TypeAnnotation", Pair([math_expr1, math_expr2], OrbitNone()));
		OrNotTypeAnnotation(math_expr1, math_expr2): Pair("NotTypeAnnotation", Pair([math_expr1, math_expr2], OrbitNone()));
		
		// Field access
		OrField(math_expr, id): Pair("Field", Pair([math_expr], OrbitString(id)));
		
		// Unary operations
		OrNegate(a): Pair("Negate", Pair([a], OrbitNone()));
		OrLogicalNot(a): Pair("!", Pair([a], OrbitNone()));
		
		// Superscript and subscript
		OrSuperscript(math_expr, superscript): Pair("Superscript", Pair([math_expr], OrbitString(superscript)));
		OrSubscript(math_expr, subscript): Pair("Subscript", Pair([math_expr], OrbitString(subscript)));
		
		// Collection types
		OrArray(exprs): Pair("Array", Pair(exprs, OrbitNone()));
		OrSetLiteral(exprs): Pair("SetLiteral", Pair(exprs, OrbitNone()));
		
		// Function call
		OrFunction(fn, args): Pair("Call", Pair(concat([fn], args), OrbitNone()));
		
		// Control structures
		OrIfElse(cond, thenExpr, elseExpr): Pair("If", Pair([cond, thenExpr, elseExpr], OrbitNone()));
		OrSequence(a, b): Pair("Seq", Pair([a, b], OrbitNone()));
		
		// Handle the pattern match construct (is)
		OrMatch(expr1, cases): Pair("Match", Pair([expr1, cases], OrbitNone()));

		// Handle the Let construct
		OrLet(idType, evalExpr): Pair("Let", Pair([evalExpr], OrbitString(idType.id)));

		// Handle the Rule construct
		OrRule(math_expr1, math_expr2, ormath_expr, bool1): Pair("Rule", Pair([math_expr1, math_expr2, ormath_expr], OrbitBool(bool1)));

		OrDirectProduct(math_expr1, math_expr2): Pair("DirectProduct", Pair([math_expr1, math_expr2], OrbitNone()));
		OrCompose(math_expr1, math_expr2): Pair("Compose", Pair([math_expr1, math_expr2], OrbitNone()));
		OrForall(math_exprs): Pair("Forall",  Pair(math_exprs, OrbitNone()));
		OrExists(math_exprs): Pair("Exists",  Pair(math_exprs, OrbitNone()));
		OrOperatorSymbol(string1): Pair("OperatorSymbol", Pair([], OrbitString(string1)));
		OrSubset(math_expr1, math_expr2): Pair("Subset", Pair([math_expr1, math_expr2], OrbitNone()));
		OrSummation(math_expr): Pair("Summation", Pair([math_expr], OrbitNone()));
		OrIntersection(math_expr1, math_expr2): Pair("Intersection", Pair([math_expr1, math_expr2], OrbitNone()));
		OrTypeSubstitution(math_expr1, math_expr2, math_expr3): Pair("TypeSubstitution", Pair([math_expr1, math_expr2, math_expr3], OrbitNone()));
		OrUnion(math_expr1, math_expr2): Pair("Union", Pair([math_expr1, math_expr2], OrbitNone()));

		OrIntegral(math_expr): Pair("Integral", Pair([math_expr], OrbitNone()));
		OrDerivative(id, math_expr): Pair("Derivative", Pair([math_expr], OrbitString(id)));
		OrElementOf(math_expr1, math_expr2): Pair("ElementOf", Pair([math_expr1, math_expr2], OrbitNone()));
		OrEllipsis(): Pair("Ellipsis", Pair([], OrbitNone()));
		OrEntailment(math_expr1, math_expr2, ormath_expr): Pair("Entailment", Pair([math_expr1, math_expr2, ormath_expr], OrbitNone()));
		OrEquivalence(math_expr1, math_expr2, ormath_expr, bool1): Pair("Equivalence", Pair([math_expr1, math_expr2, ormath_expr], OrbitBool(bool1)));
		OrFnDef(id, id_types, type_annotations, math_expr): {
			// Convert id_types to OrMath_expr using our helper function
			id_type_exprs = map(id_types, idTypeToMathExpr);
			
			// Convert type_annotations to OrMath_expr
			type_annotation_exprs = map(type_annotations, \t -> t.math_expr);
			
			// Create arrays to hold collections
			args_array = OrArray(id_type_exprs);
			types_array = OrArray(type_annotation_exprs);
			
			// Return components: function name, args array, type annotations array, and body
			Pair("FnDef", Pair([args_array, types_array, math_expr], OrbitString(id)));
		};
		OrGradient(math_expr): Pair("Gradient", Pair([math_expr], OrbitNone()));
		OrGroupOrder(math_expr): Pair("GroupOrder", Pair([math_expr], OrbitNone()));
		OrHomomorphism(math_expr1, math_expr2): Pair("Homomorphism", Pair([math_expr1, math_expr2], OrbitNone()));
		OrImport(path): Pair("Import", Pair([], OrbitString(path)));
		OrIsomorphism(math_expr1, math_expr2): Pair("Isomorphism", Pair([math_expr1, math_expr2], OrbitNone()));
		OrLeftSemiDirectProduct(math_expr1, math_expr2): Pair("LeftSemiDirectProduct", Pair([math_expr1, math_expr2], OrbitNone()));
		OrNormalSubgroup(math_expr1, math_expr2): Pair("NormalSubgroup", Pair([math_expr1, math_expr2], OrbitNone()));
		OrPartialDerivative(id, math_expr): Pair("PartialDerivative", Pair([math_expr], OrbitString(id)));
		OrRightSemiDirectProduct(math_expr1, math_expr2): Pair("RightSemiDirectProduct", Pair([math_expr1, math_expr2], OrbitNone()));
		OrSetComprehension(math_exprs, math_expr): Pair("SetComprehension", Pair([math_expr], OrbitString("math_exprs")));
		OrTensorProduct(math_expr1, math_expr2): Pair("TensorProduct", Pair([math_expr1, math_expr2], OrbitNone()));
		OrTypeVar(string1): Pair("TypeVar", Pair([], OrbitString(string1)));
		
		// Added for new types
		OrApproxEquals(math_expr1, math_expr2): Pair("ApproxEquals", Pair([math_expr1, math_expr2], OrbitNone()));
		OrApproxLessEquals(math_expr1, math_expr2): Pair("ApproxLessEquals", Pair([math_expr1, math_expr2], OrbitNone()));
		OrEmptySet(): Pair("EmptySet", Pair([], OrbitNone()));
		OrGroupAction(math_expr1, math_expr2): Pair("GroupAction", Pair([math_expr1, math_expr2], OrbitNone()));
		OrIdeal(math_exprs): Pair("Ideal", Pair(math_exprs, OrbitNone()));
		OrNorm(math_expr): Pair("Norm", Pair([math_expr], OrbitNone()));
		OrSetDifference(math_expr1, math_expr2): Pair("SetDifference", Pair([math_expr1, math_expr2], OrbitNone()));
		
		// Quote-related nodes
		OrQuote(math_expr): Pair("Quote", Pair([math_expr], OrbitNone()));
		OrQuasiquote(math_expr): Pair("Quasiquote", Pair([math_expr], OrbitNone()));
		OrUnquote(math_expr): Pair("Unquote", Pair([math_expr], OrbitNone()));
		OrUnquoteSplicing(math_expr): Pair("UnquoteSplicing", Pair([math_expr], OrbitNone()));
		// Domain navigation operators
		OrDomainDown(math_expr1, math_expr2): Pair("DomainDown", Pair([math_expr1, math_expr2], OrbitNone()));
		OrDomainPath(math_expr1, math_expr2): Pair("DomainPath", Pair([math_expr1, math_expr2], OrbitNone()));
		OrDomainUp(math_expr1, math_expr2): Pair("DomainUp", Pair([math_expr1, math_expr2], OrbitNone()));
		
		OrLambda(env_bindings, id_types, math_expr): {
			// Convert environment bindings to OrMath_expr nodes
			env_exprs = map(env_bindings, \binding -> 
				OrFunction(OrIdentifier("EnvBinding"), [OrString(binding.id), binding.math_expr])
			);
			
			// Convert id_types to OrMath_expr using our helper function
			id_type_exprs = map(id_types, idTypeToMathExpr);
			
			// Create Arrays to hold each collection
			env_array = OrArray(env_exprs);
			args_array = OrArray(id_type_exprs);
			
			// Return the three components as children: environment array, args array, and the body
			Pair("Lambda", Pair([env_array, args_array, math_expr], OrbitNone()));
		};
	}
}

// Helper function to convert an OrIdType to an OrMath_expr
idTypeToMathExpr(idType : OrIdType) -> OrMath_expr {
	// Create a structure that represents the id and type annotations
	// For now, we'll use an identifier with a special prefix to mark it as an IdType
	OrFunction(
		OrIdentifier("IdType"),
		[
			OrString(idType.id),
			// Convert type annotations to an array
			OrArray(map(idType.type_annotations, \t -> t.math_expr))
		]
	);
}

// Helper function to convert an OrMath_expr to an OrIdType
mathExprToIdType(expr : OrMath_expr) -> Maybe<OrIdType> {
	switch (expr) {
		OrFunction(fn, args): {
			switch (fn) {
				OrIdentifier(fnName): {
					if (fnName == "IdType" && length(args) >= 2) {
						// Extract the id
						id = switch (args[0]) {
							OrString(s): s;
							default: "unknown";
						};
						
						// Extract type annotations
						typeAnnotations = switch (args[1]) {
							OrArray(annotations): map(annotations, \a -> OrType(a));
							default: [];
						};
						
						Some(OrIdType(id, typeAnnotations));
					} else {
						None();
					}
				}
				default: None();
			}
		}
		default: None();
	}
}

// Construct an OrMath_expr from an operator name, children, and primitive value
constructOrbit(op : string, children : [OrMath_expr], value : OrbitValue) -> OrMath_expr {
	if (op == "Int") {
		switch (value) {
			OrbitInt(i): OrInt(i);
			default: OrInt(0);
		}
	} else if (op == "Double") {
		switch (value) {
			OrbitDouble(d): OrDouble(d);
			default: OrDouble(0.0);
		}
	} else if (op == "String") {
		switch (value) {
			OrbitString(s): OrString(s);
			default: OrString("");
		}
	} else if (op == "Bool") {
		switch (value) {
			OrbitBool(b): OrBool(b);
			OrbitInt(i): OrBool(i != 0);
			default: OrBool(false);
		}
	} else if (op == "Identifier") {
		switch (value) {
			OrbitString(id): OrIdentifier(id);
			default: {
				OrIdentifier("unknown id");
			}
		}
	} else if (op == "UId") {
		switch (value) {
			OrbitString(id): OrUId(id);
			default: OrUId("unknown uid");
		}
	}
	// Binary operations
	else if (op == "+") {
		if (length(children) == 2) {
			OrAdd(children[0], children[1]);
		} else {
			println("Error: + wants 2 children");
			OrInt(0); // Default if children missing
		}
	} else if (op == "-") {
		if (length(children) == 2) {
			OrSubtract(children[0], children[1]);
		} else {
			println("Error: - wants 2 children");
			OrInt(0);
		}
	} else if (op == "*") {
		if (length(children) == 2) {
			OrMultiply(children[0], children[1]);
		} else {
			println("Error: * wants 2 children");
			OrInt(1);
		}
	} else if (op == "/") {
		if (length(children) == 2) {
			OrDivide(children[0], children[1]);
		} else {
			println("Error: / wants 2 children");
			OrInt(0);
		}
	} else if (op == "^") {
		if (length(children) == 2) {
			OrExponent(children[0], children[1]);
		} else {
			println("Error: ^ wants 2 children");
			OrInt(1);
		}
	} else if (op == "%") {
		if (length(children) == 2) {
			OrModulo(children[0], children[1]);
		} else {
			println("Error: % wants 2 children");
			OrInt(0);
		}
	} else if (op == "Index") {
		if (length(children) == 2) {
			OrIndex(children[0], children[1]);
		} else {
			println("Error: Index wants 2 children");
			OrInt(0);
		}
	} else if (op == "=") {
		if (length(children) == 2) {
			OrEquals(children[0], children[1]);
		} else {
			println("Error: = wants 2 children");
			OrBool(false);
		}
	} else if (op == "!=") {
		if (length(children) == 2) {
			OrNotEquals(children[0], children[1]);
		} else {
			println("Error: != wants 2 children");
			OrBool(false);
		}
	} else if (op == ">") {
		if (length(children) == 2) {
			OrGreaterThan(children[0], children[1]);
		} else {
			println("Error: > wants 2 children");
			OrBool(false);
		}
	} else if (op == ">=") {
		if (length(children) == 2) {
			OrGreaterEquals(children[0], children[1]);
		} else {
			println("Error: >= wants 2 children");
			OrBool(false);
		}
	} else if (op == "<") {
		if (length(children) == 2) {
			OrLessThan(children[0], children[1]);
		} else {
			println("Error: < wants 2 children");
			OrBool(false);
		}
	} else if (op == "<=") {
		if (length(children) == 2) {
			OrLessEquals(children[0], children[1]);
		} else {
			println("Error: <= wants 2 children");
			OrBool(false);
		}
	} else if (op == "&&") {
		if (length(children) == 2) {
			OrLogicalAnd(children[0], children[1]);
		} else {
			println("Error: && wants 2 children");
			OrBool(false);
		}
	} else if (op == "||") {
		if (length(children) == 2) {
			OrLogicalOr(children[0], children[1]);
		} else {
			println("Error: || wants 2 children");
			OrBool(false);
		}
	} 
	// Field access
	else if (op == "Field") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(id): OrField(children[0], id);
				default: OrField(children[0], "unknown");
			}
		} else {
			OrInt(0);
		}
	}
	// Superscript and subscript
	else if (op == "Superscript") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(superscript): OrSuperscript(children[0], superscript);
				default: OrSuperscript(children[0], "");
			}
		} else {
			OrInt(0);
		}
	} else if (op == "Subscript") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(subscript): OrSubscript(children[0], subscript);
				default: OrSubscript(children[0], "");
			}
		} else {
			OrInt(0);
		}
	}
	// Collection types
	else if (op == "Array") {
		OrArray(children);
	} else if (op == "SetLiteral") {
		OrSetLiteral(children);
	}
	// Unary operations
	else if (op == "Negate") {
		if (length(children) >= 1) {
			OrNegate(children[0]);
		} else {
			OrInt(0);
		}
	} else if (op == "!") {
		if (length(children) >= 1) {
			OrLogicalNot(children[0]);
		} else {
			OrBool(false);
		}
	} 
	// Function call
	else if (op == "Call") {
		if (length(children) >= 1) {
			OrFunction(children[0], tail(children));
		} else {
			OrInt(0);
		}
	} 
	// Control structures
	else if (op == "If") {
		if (length(children) >= 3) {
			OrIfElse(children[0], children[1], children[2]);
		} else {
			OrInt(0);
		}
	} else if (op == "Seq") {
		if (length(children) >= 2) {
			OrSequence(children[0], children[1]);
		} else {
			OrInt(0);
		}
	}
	// Domain operators
	else if (op == "TypeAnnotation") {
		if (length(children) >= 2) {
			OrTypeAnnotation(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} else if (op == "NotTypeAnnotation") {
		if (length(children) >= 2) {
			OrNotTypeAnnotation(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} 
	// Handle pattern matching (is) construct
	else if (op == "Match") {
		if (length(children) >= 2) {
			// Construct the OrMatch with the expression and pattern cases
			OrMatch(children[0], children[1]);
		} else {
			println("Error: match operation requires at least 2 children");
			OrInt(0);
		}
	}
	// Handle let binding
	else if (op == "Let") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(id): {
					// Create an OrIdType with the identifier and empty type annotations
					idType = OrIdType(id, []);
					// Construct the OrLet expression
					OrLet(idType, children[0]);
				}
				default: {
					println("Error: let requires an identifier as value");
					OrInt(0);
				}
			}
		} else {
			println("Error: let operation requires at least 1 child");
			OrInt(0);
		}
	}
	// Handle Rule construct
	else if (op == "Rule") {
		if (length(children) >= 3) {
			switch (value) {
				OrbitBool(b): OrRule(children[0], children[1], children[2], b);
				default: {
					println("Error: Rule requires a boolean value");
					OrRule(children[0], children[1], children[2], false);
				}
			}
		} else {
			println("Error: Rule operation requires at least 3 children");
			OrInt(0);
		}
	}
	else if (op == "DirectProduct") {
		if (length(children) >= 2) {
			OrDirectProduct(children[0], children[1]);
		} else {
			println("Error: DirectProduct operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "Compose") {
		if (length(children) >= 2) {
			OrCompose(children[0], children[1]);
		} else {
			println("Error: Compose operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "Forall") {
		if (length(children) >= 1) {
			// Using an empty array for demonstration purposes
			OrForall(children);
		} else {
			println("Error: Forall operation requires at least 1 child");
			OrInt(0);
		}
	}
	else if (op == "Exists") {
		if (length(children) >= 1) {
			// Using an empty array for demonstration purposes
			OrExists(children);
		} else {
			println("Error: Exists operation requires at least 1 child");
			OrInt(0);
		}
	}
	else if (op == "OperatorSymbol") {
		switch (value) {
			OrbitString(s): OrOperatorSymbol(s);
			default: {
				println("Error: OperatorSymbol requires a string value");
				OrOperatorSymbol("");
			}
		}
	}
	else if (op == "Subset") {
		if (length(children) >= 2) {
			OrSubset(children[0], children[1]);
		} else {
			println("Error: Subset operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "Summation") {
		if (length(children) >= 1) {
			OrSummation(children[0]);
		} else {
			println("Error: Summation operation requires at least 1 child");
			OrInt(0);
		}
	}
	else if (op == "Intersection") {
		if (length(children) >= 2) {
			OrIntersection(children[0], children[1]);
		} else {
			println("Error: Intersection operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "TypeSubstitution") {
		if (length(children) >= 3) {
			OrTypeSubstitution(children[0], children[1], children[2]);
		} else {
			println("Error: TypeSubstitution operation requires 3 children");
			OrInt(0);
		}
	}
	else if (op == "Union") {
		if (length(children) >= 2) {
			OrUnion(children[0], children[1]);
		} else {
			println("Error: Union operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "Integral") {
		if (length(children) >= 1) {
			OrIntegral(children[0]);
		} else {
			println("Error: Integral operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "Derivative") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(id): OrDerivative(id, children[0]);
				default: {
					println("Error: Derivative requires an identifier");
					OrDerivative("", children[0]);
				}
			}
		} else {
			println("Error: Derivative operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "ElementOf") {
		if (length(children) >= 2) {
			OrElementOf(children[0], children[1]);
		} else {
			println("Error: ElementOf operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "Ellipsis") {
		OrEllipsis();
	}
	else if (op == "Entailment") {
		if (length(children) >= 3) {
			OrEntailment(children[0], children[1], children[2]);
		} else {
			println("Error: Entailment operation requires 3 children");
			OrInt(0);
		}
	}
	else if (op == "Equivalence") {
		if (length(children) >= 3) {
			switch (value) {
				OrbitBool(b): OrEquivalence(children[0], children[1], children[2], b);
				default: {
					println("Error: Equivalence requires a boolean value");
					OrEquivalence(children[0], children[1], children[2], false);
				}
			}
		} else {
			println("Error: Equivalence operation requires 3 children");
			OrInt(0);
		}
	}
	else if (op == "Gradient") {
		if (length(children) >= 1) {
			OrGradient(children[0]);
		} else {
			println("Error: Gradient operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "GroupOrder") {
		if (length(children) >= 1) {
			OrGroupOrder(children[0]);
		} else {
			println("Error: GroupOrder operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "Homomorphism") {
		if (length(children) >= 2) {
			OrHomomorphism(children[0], children[1]);
		} else {
			println("Error: Homomorphism operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "Import") {
		switch (value) {
			OrbitString(path): OrImport(path);
			default: {
				println("Error: Import requires a path string");
				OrImport("");
			}
		}
	}
	else if (op == "Isomorphism") {
		if (length(children) >= 2) {
			OrIsomorphism(children[0], children[1]);
		} else {
			println("Error: Isomorphism operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "LeftSemiDirectProduct") {
		if (length(children) >= 2) {
			OrLeftSemiDirectProduct(children[0], children[1]);
		} else {
			println("Error: LeftSemiDirectProduct operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "NormalSubgroup") {
		if (length(children) >= 2) {
			OrNormalSubgroup(children[0], children[1]);
		} else {
			println("Error: NormalSubgroup operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "PartialDerivative") {
		if (length(children) >= 1) {
			switch (value) {
				OrbitString(id): OrPartialDerivative(id, children[0]);
				default: {
					println("Error: PartialDerivative requires an identifier");
					OrPartialDerivative("", children[0]);
				}
			}
		} else {
			println("Error: PartialDerivative operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "RightSemiDirectProduct") {
		if (length(children) >= 2) {
			OrRightSemiDirectProduct(children[0], children[1]);
		} else {
			println("Error: RightSemiDirectProduct operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "SetComprehension") {
		if (length(children) >= 1) {
			// Using an empty array for placeholder
			OrSetComprehension([], children[0]);
		} else {
			println("Error: SetComprehension operation requires at least 1 child");
			OrInt(0);
		}
	}
	else if (op == "TensorProduct") {
		if (length(children) >= 2) {
			OrTensorProduct(children[0], children[1]);
		} else {
			println("Error: TensorProduct operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "TypeVar") {
		switch (value) {
			OrbitString(s): OrTypeVar(s);
			default: {
				println("Error: TypeVar requires a string value");
				OrTypeVar("");
			}
		}
	}
	else if (op == "Lambda") {
		if (length(children) >= 3) {
			// Extract environment bindings from first array
			env_bindings = switch (children[0]) {
				OrArray(items): filtermap(items, \item -> {
					switch (item) {
						OrFunction(fn, args): {
							switch (fn) {
								OrIdentifier(fnName): {
									if (fnName == "EnvBinding" && length(args) >= 2) {
										id = switch (args[0]) {
											OrString(s): s;
											default: "unknown";
										};
										expr = args[1];
										Some(OrEnvBinding(id, expr));
									} else {
										None();
									}
								}
								default: None();
							}
						}
						default: None();
					}
				});
				default: [];
			};
			
			// Extract id_types from second array
			id_types = switch (children[1]) {
				OrArray(items): filtermap(items, mathExprToIdType);
				default: [OrIdType("arg", [])];
			};
			
			// The third child is the lambda body
			body = children[2];
			
			// Construct the Lambda
			OrLambda(env_bindings, id_types, body);
		} else {
			println("Error: Lambda operation requires 3 children: environment, arguments, and body");
			OrLambda([], [OrIdType("arg", [])], if (length(children) > 0) children[0] else OrInt(0));
		}
	}
	else if (op == "FnDef") {
		if (length(children) >= 3) {
			// Extract function name
			fn_name = switch (value) {
				OrbitString(name): name;
				default: "unknown_function";
			};
			
			// Extract id_types from first array
			id_types = switch (children[0]) {
				OrArray(items): filtermap(items, mathExprToIdType);
				default: [OrIdType("arg", [])];
			};
			
			// Extract type annotations from second array
			type_annotations = switch (children[1]) {
				OrArray(items): map(items, \item -> OrType(item));
				default: [];
			};
			
			// The third child is the function body
			body = children[2];
			
			// Construct the FnDef
			OrFnDef(fn_name, id_types, type_annotations, body);
		} else {
			println("Error: FnDef operation requires 3 children: args array, type annotations array, and body");
			OrFnDef("unknown", [OrIdType("arg", [])], [], if (length(children) > 0) children[0] else OrInt(0));
		}
	}
	// Added constructors for new types
	else if (op == "ApproxEquals") {
		if (length(children) >= 2) {
			OrApproxEquals(children[0], children[1]);
		} else {
			println("Error: ApproxEquals operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "ApproxLessEquals") {
		if (length(children) >= 2) {
			OrApproxLessEquals(children[0], children[1]);
		} else {
			println("Error: ApproxLessEquals operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "EmptySet") {
		OrEmptySet();
	}
	else if (op == "GroupAction") {
		if (length(children) >= 2) {
			OrGroupAction(children[0], children[1]);
		} else {
			println("Error: GroupAction operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "Ideal") {
		OrIdeal(children);
	}
	else if (op == "Norm") {
		if (length(children) >= 1) {
			OrNorm(children[0]);
		} else {
			println("Error: Norm operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "SetDifference") {
		if (length(children) >= 2) {
			OrSetDifference(children[0], children[1]);
		} else {
			println("Error: SetDifference operation requires 2 children");
			OrInt(0);
		}
	}
	// Quote-related operators
	else if (op == "Quote") {
		if (length(children) >= 1) {
			OrQuote(children[0]);
		} else {
			println("Error: Quote operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "Quasiquote") {
		if (length(children) >= 1) {
			OrQuasiquote(children[0]);
		} else {
			println("Error: Quasiquote operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "Unquote") {
		if (length(children) >= 1) {
			OrUnquote(children[0]);
		} else {
			println("Error: Unquote operation requires 1 child");
			OrInt(0);
		}
	}
	else if (op == "UnquoteSplicing") {
		if (length(children) >= 1) {
			OrUnquoteSplicing(children[0]);
		} else {
			println("Error: UnquoteSplicing operation requires 1 child");
			OrInt(0);
		}
	}
	// Domain navigation operators
	else if (op == "DomainDown") {
		if (length(children) >= 2) {
			OrDomainDown(children[0], children[1]);
		} else {
			println("Error: DomainDown operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "DomainPath") {
		if (length(children) >= 2) {
			OrDomainPath(children[0], children[1]);
		} else {
			println("Error: DomainPath operation requires 2 children");
			OrInt(0);
		}
	}
	else if (op == "DomainUp") {
		if (length(children) >= 2) {
			OrDomainUp(children[0], children[1]);
		} else {
			println("Error: DomainUp operation requires 2 children");
			OrInt(0);
		}
	}
	// For unknown operators, return a default value or string representation
	else {
		println("TODO: Handle operator in construct: " + op);
		switch (value) {
			OrbitString(str): OrString(str);
			default: OrInt(0);
		}
	}
}