import tools/orbit/orbit_types;
import tools/orbit/prettyprint;
import string;

export {
	// Decompose an OrMath_expr into its operator name and children
	// Returns the operator name, children expressions, and optional primitive value
	decomposeOrbit(expr : OrMath_expr) -> Pair<string, Pair<[OrMath_expr], OrbitValue>>;

	// Construct an OrMath_expr from an operator name, children, and optional primitive value
	constructOrbit(op : string, children : [OrMath_expr], value : OrbitValue) -> OrMath_expr;

	// Type for primitive values in Orbit expressions
	OrbitValue ::= OrbitNone, OrbitInt, OrbitDouble, OrbitString, OrbitBool;
		OrbitNone();
		OrbitInt(value : int);
		OrbitDouble(value : double);
		OrbitString(value : string);
		OrbitBool(value : bool);
}

// Decompose an OrMath_expr into its operator name, children, and primitive value
decomposeOrbit(expr : OrMath_expr) -> Pair<string, Pair<[OrMath_expr], OrbitValue>> {
	switch (expr) {
		// Primitive values
		OrInt(i): Pair("Int", Pair([], OrbitInt(i)));
		OrDouble(d): Pair("Double", Pair([], OrbitDouble(d)));
		OrString(s): Pair("String", Pair([], OrbitString(s)));
		OrBool(b): Pair("Bool", Pair([], OrbitBool(b)));
		OrIdentifier(id): Pair("Identifier", Pair([], OrbitString(id)));
		OrVariable(id): Pair("Variable", Pair([], OrbitString(id)));
		
		// Binary operations
		OrAdd(a, b): Pair("+", Pair([a, b], OrbitNone()));
		OrSubtract(a, b): Pair("-", Pair([a, b], OrbitNone()));
		OrMultiply(a, b): Pair("*", Pair([a, b], OrbitNone()));
		OrDivide(a, b): Pair("/", Pair([a, b], OrbitNone()));
		OrEquals(a, b): Pair("=", Pair([a, b], OrbitNone()));
		OrNotEquals(a, b): Pair("!=", Pair([a, b], OrbitNone()));
		OrGreaterThan(a, b): Pair(">", Pair([a, b], OrbitNone()));
		OrGreaterEquals(a, b): Pair(">=", Pair([a, b], OrbitNone()));
		OrLessThan(a, b): Pair("<", Pair([a, b], OrbitNone()));
		OrLessEquals(a, b): Pair("<=", Pair([a, b], OrbitNone()));
		OrLogicalAnd(a, b): Pair("&&", Pair([a, b], OrbitNone()));
		OrLogicalOr(a, b): Pair("||", Pair([a, b], OrbitNone()));
		
		// Domain operators
		OrTypeAnnotation(math_expr1, math_expr2): Pair("TypeAnnotation", Pair([math_expr1, math_expr2], OrbitNone()));
		OrNotTypeAnnotation(math_expr1, math_expr2): Pair("NotTypeAnnotation", Pair([math_expr1, math_expr2], OrbitNone()));
		
		// Unary operations
		OrNegate(a): Pair("negate", Pair([a], OrbitNone()));
		OrLogicalNot(a): Pair("!", Pair([a], OrbitNone()));
		
		// Function call
		OrFunction(fn, args): Pair("call", Pair(concat([fn], args), OrbitNone()));
		
		// Control structures
		OrIfElse(cond, thenExpr, elseExpr): Pair("if", Pair([cond, thenExpr, elseExpr], OrbitNone()));
		OrSequence(a, b): Pair("seq", Pair([a, b], OrbitNone()));
		
		// For anything else, just use a generic representation
		default: {
			println("TODO: Handle expression type in decompose: " + prettyOrbit(expr));
			Pair("unknown", Pair([], OrbitString(prettyOrbit(expr))));
		}
	}
}

// Construct an OrMath_expr from an operator name, children, and primitive value
constructOrbit(op : string, children : [OrMath_expr], value : OrbitValue) -> OrMath_expr {
	if (op == "Int") {
		switch (value) {
			OrbitInt(i): OrInt(i);
			default: OrInt(0);
		}
	} else if (op == "Double") {
		switch (value) {
			OrbitDouble(d): OrDouble(d);
			default: OrDouble(0.0);
		}
	} else if (op == "String") {
		switch (value) {
			OrbitString(s): OrString(s);
			default: OrString("");
		}
	} else if (op == "Bool") {
		switch (value) {
			OrbitBool(b): OrBool(b);
			OrbitInt(i): OrBool(i != 0);
			default: OrBool(false);
		}
	} else if (op == "Identifier") {
		switch (value) {
			OrbitString(id): OrIdentifier(id);
			default: OrIdentifier("unknown");
		}
	} else if (op == "Variable") {
		switch (value) {
			OrbitString(id): OrVariable(id);
			default: OrVariable("unknown");
		}
	} 
	// Binary operations
	else if (op == "+") {
		if (length(children) >= 2) {
			OrAdd(children[0], children[1]);
		} else {
			OrInt(0); // Default if children missing
		}
	} else if (op == "-") {
		if (length(children) >= 2) {
			OrSubtract(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} else if (op == "*") {
		if (length(children) >= 2) {
			OrMultiply(children[0], children[1]);
		} else {
			OrInt(1);
		}
	} else if (op == "/") {
		if (length(children) >= 2) {
			OrDivide(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} else if (op == "=") {
		if (length(children) >= 2) {
			OrEquals(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} else if (op == "!=") {
		if (length(children) >= 2) {
			OrNotEquals(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} else if (op == ">") {
		if (length(children) >= 2) {
			OrGreaterThan(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} else if (op == ">=") {
		if (length(children) >= 2) {
			OrGreaterEquals(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} else if (op == "<") {
		if (length(children) >= 2) {
			OrLessThan(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} else if (op == "<=") {
		if (length(children) >= 2) {
			OrLessEquals(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} else if (op == "&&") {
		if (length(children) >= 2) {
			OrLogicalAnd(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} else if (op == "||") {
		if (length(children) >= 2) {
			OrLogicalOr(children[0], children[1]);
		} else {
			OrBool(false);
		}
	} 
	// Unary operations
	else if (op == "negate") {
		if (length(children) >= 1) {
			OrNegate(children[0]);
		} else {
			OrInt(0);
		}
	} else if (op == "!") {
		if (length(children) >= 1) {
			OrLogicalNot(children[0]);
		} else {
			OrBool(false);
		}
	} 
	// Function call
	else if (op == "call") {
		if (length(children) >= 1) {
			OrFunction(children[0], tail(children));
		} else {
			OrInt(0);
		}
	} 
	// Control structures
	else if (op == "if") {
		if (length(children) >= 3) {
			OrIfElse(children[0], children[1], children[2]);
		} else {
			OrInt(0);
		}
	} else if (op == "seq") {
		if (length(children) >= 2) {
			OrSequence(children[0], children[1]);
		} else {
			OrInt(0);
		}
	}
	// Domain operators
	else if (op == "TypeAnnotation") {
		if (length(children) >= 2) {
			OrTypeAnnotation(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} else if (op == "NotTypeAnnotation") {
		if (length(children) >= 2) {
			OrNotTypeAnnotation(children[0], children[1]);
		} else {
			OrInt(0);
		}
	} 
	// For unknown operators, return a default value or string representation
	else {
		switch (value) {
			OrbitString(str): OrString(str);
			default: OrInt(0);
		}
	}
}