import text/blueprint;
import string;
import tools/orbit/orbit_types;

export {
	prettyOrbit(m : OrMath_expr) -> string;
}

prettyOrbit(m : OrMath_expr) -> string {
	switch (m) {
		OrArray(elements): "[" + superglue(elements, prettyOrbit, ", ") + "]";
		OrLet(id, value): blueprint(
				"let %id% = %value%", [
			"id", prettyOrIdType(id),
			"value", prettyOrbit(value),
		]);
		OrOperatorSymbol(name): "`" + name + "`";
		OrEllipsis(): "...";
		OrFnDef(name, params, returnType, body): {
			typeAnnotation = if (length(returnType) > 0) {
				" : " + prettyOrbit(returnType[0].math_expr);
			} else "";
			blueprint("fn %name%(%params%)%type% = %body%", [
				"name", name,
				"params", superglue(params, prettyOrIdType, ", "),
				"type", typeAnnotation,
				"body", prettyOrbit(body)
			]);
		}
		OrSequence(e1, e2): prettyOrbit(e1) + ";\n" + prettyOrbit(e2);
		//OrComma(e1, e2): prettyOrbit(e1) + ", " + prettyOrbit(e2);
		OrIfElse(cond, then, else_): blueprint(
			"
			if %cond% then 
				%t% 
			else 
				%e%", [
			"cond", prettyOrbit(cond),
			"t", prettyOrbit(then),
			"e", prettyOrbit(else_)
		]);
		OrMatch(expr1, expr2): blueprint("%expr1% is (\n\t%expr2%\n)", [
			"expr1", prettyOrbit(expr1),
			"expr2", prettyOrbit(expr2)
		]);
		
		OrRule(lhs, rhs, cond, full): {
			condStr = if (cond != OrBool(true)) {
				" " + prettyOrbit(cond);
			} else "";
			"(" + prettyOrbit(lhs) + (if (full) " \u21d2 "  else " → ") + prettyOrbit(rhs) + condStr + ")";
		}
		OrEquivalence(lhs, rhs, cond, full): {
			condStr = if (cond != OrBool(true)) {
				" " + prettyOrbit(cond);
			} else "";
			"(" + prettyOrbit(lhs) + (if (full) " \u21d4 " else " ↔ ") + prettyOrbit(rhs) + condStr + ")";
		}
		OrEntailment(lhs, rhs, cond): {
			condStr = if (cond != OrBool(true)) {
				" " + prettyOrbit(cond);
			} else "";
			"(" + prettyOrbit(lhs) + " \u22a2 " + prettyOrbit(rhs) + condStr + ")";
		}
		
		// Set relationships
		OrSubset(a, b): "(" + prettyOrbit(a) + " \u2282 " + prettyOrbit(b) + ")";
		OrNormalSubgroup(a, b): "(" + prettyOrbit(a) + " \u22b2 " + prettyOrbit(b) + ")";
		OrIsomorphism(a, b): "(" + prettyOrbit(a) + " \u2245 " + prettyOrbit(b) + ")";
		OrElementOf(a, b): "(" + prettyOrbit(a) + " \u2208 " + prettyOrbit(b) + ")";
		
		// Boolean operators
		OrLogicalAnd(a, b): "(" + prettyOrbit(a) + " \u2227 " + prettyOrbit(b) + ")";
		OrLogicalOr(a, b): "(" + prettyOrbit(a) + " \u2228 " + prettyOrbit(b) + ")";
		
		// Equality and comparison
		OrEquals(a, b): "(" + prettyOrbit(a) + " = " + prettyOrbit(b) + ")";
		OrNotEquals(a, b): "(" + prettyOrbit(a) + " != " + prettyOrbit(b) + ")";
		OrLessEquals(a, b): "(" + prettyOrbit(a) + " \u2264 " + prettyOrbit(b) + ")";
		OrLessThan(a, b): "(" + prettyOrbit(a) + " < " + prettyOrbit(b) + ")";
		OrGreaterEquals(a, b): "(" + prettyOrbit(a) + " \u2265 " + prettyOrbit(b) + ")";
		OrGreaterThan(a, b): "(" + prettyOrbit(a) + " > " + prettyOrbit(b) + ")";
		
		// Set operations
		OrUnion(a, b): "(" + prettyOrbit(a) + " \u222a " + prettyOrbit(b) + ")";
		OrIntersection(a, b): "(" + prettyOrbit(a) + " \u2229 " + prettyOrbit(b) + ")";
		
		// Arithmetic
		OrAdd(a, b): "(" + prettyOrbit(a) + " + " + prettyOrbit(b) + ")";
		OrSubtract(a, b): "(" + prettyOrbit(a) + " - " + prettyOrbit(b) + ")";
		OrMultiply(a, b): "(" + prettyOrbit(a) + " * " + prettyOrbit(b) + ")";
		OrDivide(a, b): "(" + prettyOrbit(a) + " / " + prettyOrbit(b) + ")";
		OrModulo(a, b):  "(" + prettyOrbit(a) + " % " + prettyOrbit(b) + ")";
		OrDirectProduct(a, b): "(" + prettyOrbit(a) + " \u00d7 " + prettyOrbit(b) + ")";
		OrLeftSemiDirectProduct(a, b): "(" + prettyOrbit(a) + " \u22c6 " + prettyOrbit(b) + ")";
		OrRightSemiDirectProduct(a, b): "(" + prettyOrbit(a) + " \u22c7 " + prettyOrbit(b) + ")";
		OrCompose(a, b): "(" + prettyOrbit(a) + " \u2218 " + prettyOrbit(b) + ")";
		OrTensorProduct(a, b): "(" + prettyOrbit(a) + " \u2297 " + prettyOrbit(b) + ")";
		OrIndex(a, i): prettyOrbit(a) + "[" + prettyOrbit(i) + "]";
		
		// Exponents
		OrExponent(base, exponent): "(" + prettyOrbit(base) + "^" + prettyOrbit(exponent) + ")";
		OrSuperscript(base, superScript): prettyOrbit(base) + superScript;
		
		// Unary operators
		OrNegate(e): "-" + prettyOrbit(e);
		OrLogicalNot(e): "\u00ac" + prettyOrbit(e);
		OrIntegral(e): "\u222b" + prettyOrbit(e);
		OrSummation(e): "\u2211" + prettyOrbit(e);
		OrGradient(e): "\u2207" + prettyOrbit(e);
		OrDerivative(id, e): "d/d" + id + " " + prettyOrbit(e);
		OrPartialDerivative(id, e): "\u2202/\u2202" + id + " " + prettyOrbit(e);
		
		// Function application and access
		OrFunction(func, args): prettyOrbit(func) + "(" + superglue(args, prettyOrbit, ", ") + ")";
		OrField(obj, field): prettyOrbit(obj) + "." + field;
		OrSubscript(base, sub): prettyOrbit(base) + sub;
		OrGroupOrder(g): "|" + prettyOrbit(g) + "|";
		OrHomomorphism(e1, e2): "\u03c6(" + prettyOrbit(e1) + ", " + prettyOrbit(e2) + ")";
		
		// Literals
		OrDouble(value): d2s(value);
		OrInt(value): i2s(value);
		OrInterpolatedString(parts): {
			// Reconstruct interpolated string syntax: `"literal $var $(expr)"`
			partStrings = map(parts, \part -> {
				switch (part) {
					OrStringInterpolation(expr): {
						// Check if it's a simple variable (no parentheses needed)
						switch (expr) {
							OrIdentifier(name): "$" + name;
							default: "$(" + prettyOrbit(expr) + ")";
						}
					}
					OrStringLiteral(text): text;
				}
			});
			"`\"" + strGlue(partStrings, "") + "\"`";
		}
		OrString(value): toString(value);
		OrBool(value): if (value) "true" else "false";
		
		// Set constructs
		OrSetComprehension(elements, condition): {
			"{ " + superglue(elements, prettyOrbit, ", ") + " | " + prettyOrbit(condition) + " }";
		}
		OrSetLiteral(elements): "{ " + superglue(elements, prettyOrbit, ", ") + " }";
		
		// Lambda expressions
		OrLambda(bindings, params, body): "\u03bb" + (if (bindings != []) {
			"{" + superglue(bindings, \b -> b.id + ":" + prettyOrbit(b.math_expr), ", ") + "}";
		} else "") + (
			if (length(params) == 1) prettyOrIdType(params[0]) 
			else "(" + superglue(params, prettyOrIdType, ", ") + ")"
		) + "." + prettyOrbit(body);
		
		// Quantifiers
		OrForall(vars): "\u2200 " + superglue(vars, prettyOrbit, ", ");
		OrExists(vars): "\u2203 " + superglue(vars, prettyOrbit, ", ");
		
		// Type operations
		OrTypeAnnotation(expr, type): "(" + prettyOrbit(expr) + " : " + prettyOrbit(type) + ")";
		OrNotTypeAnnotation(expr, type): "(" + prettyOrbit(expr) + " !: " + prettyOrbit(type) + ")";
		OrTypeSubstitution(expr, typeVar, subst): {
			"(" + prettyOrbit(expr) + "[" + prettyOrbit(typeVar) + " := " + prettyOrbit(subst) + "])";
		}
		OrImport(path): "import " + path;

		// Identifiers and variables
		OrIdentifier(name): name;
		OrUId(name): name;
		OrTypeVar(name): name;
		
		// Added for new types
		OrApproxEquals(a, b): "(" + prettyOrbit(a) + " ≈ " + prettyOrbit(b) + ")";
		OrApproxLessEquals(a, b): "(" + prettyOrbit(a) + " ≲ " + prettyOrbit(b) + ")";
		OrEmptySet(): "∅";
		OrGroupAction(g, s): "(" + prettyOrbit(g) + " ⋉ " + prettyOrbit(s) + ")";
		OrIdeal(gens): "⟨" + superglue(gens, prettyOrbit, ", ") + "⟩";
		OrNorm(e): "‖" + prettyOrbit(e) + "‖";
		OrSetDifference(a, b): "(" + prettyOrbit(a) + " \\setminus " + prettyOrbit(b) + ")";
		
		// New quote-related nodes
		OrQuote(e): "'" + prettyOrbit(e);
		OrQuasiquote(e): "quasiquote " + prettyOrbit(e);
		OrUnquote(e): "unquote " + prettyOrbit(e);
		OrUnquoteSplicing(e): "unquote-splicing " + prettyOrbit(e);
		// Domain navigation operators
		OrDomainDown(e1, e2): prettyOrbit(e1) + " ⋱ " + prettyOrbit(e2);
		OrDomainPath(e1, e2): prettyOrbit(e1) + " ⋯ " + prettyOrbit(e2);
		OrDomainUp(e1, e2): prettyOrbit(e1) + " ⋰ " + prettyOrbit(e2);
	}
}

prettyOrIdType(id : OrIdType) -> string {
	typeAnnotation = if (length(id.type_annotations) > 0) {
		" : " + prettyOrbit(id.type_annotations[0].math_expr);
	} else "";
	id.id + typeAnnotation;
}