import text/blueprint;
import string;
import tools/orbit/orbit_types;

export {
	prettyOrbit(m : OrMath_expr) -> string;
}

prettyOrbit(m : OrMath_expr) -> string {
	switch (m) {
		OrLet(id, value): blueprint(
				"let %id% = %value%", [
			"id", prettyOrIdType(id),
			"value", prettyOrbit(value),
		]);
		OrFnDef(name, params, returnType, body): {
			typeAnnotation = if (length(returnType) > 0) {
				" : " + prettyOrbit(returnType[0].math_expr);
			} else "";
			blueprint("fn %name%(%params%)%type% = %body%", [
				"name", name,
				"params", superglue(params, prettyOrIdType, ", "),
				"type", typeAnnotation,
				"body", prettyOrbit(body)
			]);
		}
		OrSequence(e1, e2): prettyOrbit(e1) + ";\n" + prettyOrbit(e2);
		OrIfElse(cond, then, else_): blueprint(
			"
			if %cond% then 
				%t% 
			else 
				%e%", [
			"cond", prettyOrbit(cond),
			"t", prettyOrbit(then),
			"e", prettyOrbit(else_)
		]);
		OrMatch(expr1, expr2): blueprint("match %expr1% {\n\t%expr2%\n}", [
			"expr1", prettyOrbit(expr1),
			"expr2", prettyOrbit(expr2)
		]);
		
		OrRule(lhs, rhs, conds): {
			condStr = if (length(conds) > 0) {
				" " + prettyOrConditional(conds[0]);
			} else "";
			prettyOrbit(lhs) + " \u21d2 " + prettyOrbit(rhs) + condStr;
		}
		OrEquivalence(lhs, rhs, conds): {
			condStr = if (length(conds) > 0) {
				" " + prettyOrConditional(conds[0]);
			} else "";
			prettyOrbit(lhs) + " \u21d4 " + prettyOrbit(rhs) + condStr;
		}
		OrEntailment(lhs, rhs, conds): {
			condStr = if (length(conds) > 0) {
				" " + prettyOrConditional(conds[0]);
			} else "";
			prettyOrbit(lhs) + " \u22a2 " + prettyOrbit(rhs) + condStr;
		}
		
		// Set relationships
		OrSubset(a, b): prettyOrbit(a) + " \u2282 " + prettyOrbit(b);
		OrElementOf(a, b): prettyOrbit(a) + " \u2208 " + prettyOrbit(b);
		
		// Boolean operators
		OrLogicalAnd(a, b): prettyOrbit(a) + " \u2227 " + prettyOrbit(b);
		OrLogicalOr(a, b): prettyOrbit(a) + " \u2228 " + prettyOrbit(b);
		
		// Equality and comparison
		OrEquals(a, b): prettyOrbit(a) + " = " + prettyOrbit(b);
		OrNotEquals(a, b): prettyOrbit(a) + " != " + prettyOrbit(b);
		OrLessEquals(a, b): prettyOrbit(a) + " \u2264 " + prettyOrbit(b);
		OrLessThan(a, b): prettyOrbit(a) + " < " + prettyOrbit(b);
		OrGreaterEquals(a, b): prettyOrbit(a) + " \u2265 " + prettyOrbit(b);
		OrGreaterThan(a, b): prettyOrbit(a) + " > " + prettyOrbit(b);
		
		// Set operations
		OrUnion(a, b): prettyOrbit(a) + " \u222a " + prettyOrbit(b);
		OrIntersection(a, b): prettyOrbit(a) + " \u2229 " + prettyOrbit(b);
		
		// Function types
		OrFunctionType(a, b): prettyOrbit(a) + " \u2192 " + prettyOrbit(b);
		
		// Arithmetic
		OrAdd(a, b): prettyOrbit(a) + " + " + prettyOrbit(b);
		OrSubtract(a, b): prettyOrbit(a) + " - " + prettyOrbit(b);
		OrMultiply(a, b): prettyOrbit(a) + " * " + prettyOrbit(b);
		OrDivide(a, b): prettyOrbit(a) + " / " + prettyOrbit(b);
		OrDirectProduct(a, b): prettyOrbit(a) + " \u00d7 " + prettyOrbit(b);
		OrCompose(a, b): prettyOrbit(a) + " \u2218 " + prettyOrbit(b);
		
		// Exponents
		OrExponent(base, exponent): prettyOrbit(base) + "^" + prettyOrbit(exponent);
		OrSuperscript(base, superScript): prettyOrbit(base) + superScript;
		
		// Unary operators
		OrNegate(e): "-" + prettyOrbit(e);
		OrLogicalNot(e): "\u00ac" + prettyOrbit(e);
		
		// Function application and access
		OrFunction(func, args): prettyOrbit(func) + "(" + superglue(args, prettyOrbit, ", ") + ")";
		OrField(obj, field): prettyOrbit(obj) + "." + field;
		OrSubscript(base, sub): prettyOrbit(base) + sub;
		
		// Literals
		OrDouble(value): d2s(value);
		OrInt(value): i2s(value);
		OrString(value): toString(value);
		OrBool(value): if (value) "true" else "false";
		
		// Set constructs
		OrSetComprehension(elements, condition): {
			"{ " + superglue(elements, prettyOrbit, ", ") + " | " + prettyOrbit(condition) + " }";
		}
		OrSetLiteral(elements): "{ " + superglue(elements, prettyOrbit, ", ") + " }";
		
		// Lambda expressions
		OrLambda(bindings, params, body): "\u03bb" + (if (bindings != []) {
			"{" + superglue(bindings, \b -> b.id + ":" + prettyOrbit(b.math_expr), ", ") + "}";
		} else "") + "(" + superglue(params, prettyOrIdType, ", ") + ")." + prettyOrbit(body);
		
		// Quantifiers
		OrForall(vars, expr): "\u2200 " + superglue(vars, prettyOrbit, ", ") + " : " + prettyOrbit(expr);
		OrExists(vars, expr): "\u2203 " + superglue(vars, prettyOrbit, ", ") + " : " + prettyOrbit(expr);
		
		// Type operations
		OrTypeAnnotation(expr, type): prettyOrbit(expr) + " : " + prettyOrbit(type);
		OrTypeSubstitution(expr, typeVar, subst): {
			prettyOrbit(expr) + "[" + prettyOrbit(typeVar) + " := " + prettyOrbit(subst) + "]";
		}
		
		// Identifiers and variables
		OrGreekLetter(name): name;
		OrIdentifier(name): name;
		OrVariable(name): name;
		OrTypeVar(name): name;
	}
}

prettyOrIdType(id : OrIdType) -> string {
	typeAnnotation = if (length(id.type_annotations) > 0) {
		" : " + prettyOrbit(id.type_annotations[0].math_expr);
	} else "";
	id.id + typeAnnotation;
}

prettyOrConditional(cond : OrConditional) -> string {
	"if " + prettyOrbit(cond.math_expr);
}