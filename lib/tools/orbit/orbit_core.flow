import tools/orbit/orbit_env;
import tools/orbit/orbit_types;
import tools/orbit/prettyprint;
import string_utils;
import tools/orbit/utils;
import string;
import math/math;

export {
    // Convert Orbit expressions to other types
    getOrbitInt(v : OrMath_expr, context : string) -> int;
    getOrbitDouble(v : OrMath_expr, context : string) -> double;
    getOrbitBool(v : OrMath_expr, context : string) -> bool;
    getOrbitString(v : OrMath_expr, context : string) -> string;
    getOrbitArray(v : OrMath_expr, context : string) -> [OrMath_expr];
    
    // Core operations
    orbitAndValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitOrValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitNotValue(l : OrMath_expr) -> OrMath_expr;
    
    // Arithmetic operations
    orbitAddValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitMinusValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitMulValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitDivideValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitModValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    
    // Comparison operations
    orbitCompareValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitEqValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitNeqValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitLtValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitLeValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitGtValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitGeValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    
    // Type conversions
    orbitBool2Int(l : OrMath_expr) -> OrMath_expr;
    orbitInt2Bool(l : OrMath_expr) -> OrMath_expr;
    orbitInt2String(l : OrMath_expr) -> OrMath_expr;
    orbitDouble2String(l : OrMath_expr) -> OrMath_expr;
    orbitString2Int(l : OrMath_expr) -> OrMath_expr;
    orbitString2Double(l : OrMath_expr) -> OrMath_expr;
    
    // I/O functions
    orbitPrintln(l : OrMath_expr) -> OrMath_expr;
    
    // String operations
    orbitCapitalize(l : OrMath_expr) -> OrMath_expr;
    orbitDecapitalize(l : OrMath_expr) -> OrMath_expr;
    orbitStrGlue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr;
    orbitStringLength(l : OrMath_expr) -> OrMath_expr;
    orbitValueSubstring(l : OrMath_expr, start : OrMath_expr, length : OrMath_expr) -> OrMath_expr;
    orbitStringIndex(l : OrMath_expr, index : OrMath_expr) -> OrMath_expr;
    orbitStringContainsAt(str : OrMath_expr, index : OrMath_expr, substr : OrMath_expr) -> OrMath_expr;
    
    // String util operations
    orbitParsehex(l : OrMath_expr) -> OrMath_expr;
    orbitUnescape(l : OrMath_expr) -> OrMath_expr;
    orbitEscape(l : OrMath_expr) -> OrMath_expr;
    
    // Array operations
    orbitArrayLength(l : OrMath_expr) -> OrMath_expr;
    orbitArrayIndex(l : OrMath_expr, index : OrMath_expr) -> OrMath_expr;
    orbitArraySubrange(l : OrMath_expr, start : OrMath_expr, end : OrMath_expr) -> OrMath_expr;
    orbitArrayReverse(l : OrMath_expr) -> OrMath_expr;
    
    // String to/from char array
    orbitString2Ints(l : OrMath_expr) -> OrMath_expr;
    orbitInts2String(l : OrMath_expr) -> OrMath_expr;
    
    // Type checking
    orbitIsBool(l : OrMath_expr) -> OrMath_expr;
    orbitIsInt(l : OrMath_expr) -> OrMath_expr;
    orbitIsDouble(l : OrMath_expr) -> OrMath_expr;
    orbitIsString(l : OrMath_expr) -> OrMath_expr;
    orbitIsArray(l : OrMath_expr) -> OrMath_expr;
    orbitIsConstructor(l : OrMath_expr) -> OrMath_expr;
    orbitGetConstructor(l : OrMath_expr) -> OrMath_expr;
    
    // Constructor operations
    orbitGetField(l : OrMath_expr, index : OrMath_expr) -> OrMath_expr;
    orbitSetField(l : OrMath_expr, index : OrMath_expr, value : OrMath_expr) -> OrMath_expr;
    
    // List operations
    orbitList2Array(l : OrMath_expr) -> OrMath_expr;
}

// Helper functions to convert Orbit expressions to native types
getOrbitInt(v : OrMath_expr, context : string) -> int {
    switch (v) {
        OrInt(i): i;
        OrBool(b): b2i(b);
        OrDouble(d): round(d);
        default: {
            println("ERROR: Expected int in " + context + ", got " + v.structname);
            0;
        }
    }
}

getOrbitDouble(v : OrMath_expr, context : string) -> double {
    switch (v) {
        OrDouble(d): d;
        OrInt(i): i2d(i);
        OrBool(b): i2d(b2i(b));
        default: {
            println("ERROR: Expected double in " + context + ", got " + v.structname);
            0.0;
        }
    }
}

getOrbitBool(v : OrMath_expr, context : string) -> bool {
    switch (v) {
        OrBool(b): b;
        OrInt(i): i != 0;
        OrDouble(d): d != 0.0;
        OrString(s): s != "";
        default: {
            println("ERROR: Expected bool in " + context + ", got " + v.structname);
            false;
        }
    }
}

getOrbitString(v : OrMath_expr, context : string) -> string {
    switch (v) {
        OrString(s): s;
        OrInt(i): i2s(i);
        OrDouble(d): d2s(d);
        OrBool(b): b2s(b);
        default: {
            println("ERROR: Expected string in " + context + ", got " + v.structname);
            "";
        }
    }
}

getOrbitArray(v : OrMath_expr, context : string) -> [OrMath_expr] {
    switch (v) {
        OrArray(elems): elems;
        default: {
            println("ERROR: Expected array in " + context + ", got " + v.structname);
            [];
        }
    }
}

// Logical operations
orbitAndValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(getOrbitBool(l, "and.left") && getOrbitBool(r, "and.right"));
}

orbitOrValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(getOrbitBool(l, "or.left") || getOrbitBool(r, "or.right"));
}

orbitNotValue(l : OrMath_expr) -> OrMath_expr {
    OrBool(!getOrbitBool(l, "not"));
}

// Arithmetic operations
orbitAddValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrInt(li): {
            switch (r) {
                OrInt(ri): OrInt(li + ri);
                OrDouble(rd): OrDouble(i2d(li) + rd);
                OrString(rs): OrString(i2s(li) + rs);
                OrArray(ra): OrArray(concat([l], ra));
                default: {
                    println("Expected int, double, string or array for +, not " + r.structname);
                    l;
                }
            }
        }
        OrDouble(ld): {
            switch (r) {
                OrInt(ri): OrDouble(ld + i2d(ri));
                OrDouble(rd): OrDouble(ld + rd);
                OrString(rs): OrString(d2s(ld) + rs);
                OrArray(ra): OrArray(concat([l], ra));
                default: {
                    println("Expected int, double, string or array for +, not " + r.structname);
                    l;
                }
            }
        }
        OrString(ls): {
            switch (r) {
                OrBool(rb): OrString(ls + b2s(rb));
                OrInt(ri): OrString(ls + i2s(ri));
                OrDouble(rd): OrString(ls + d2s(rd));
                OrString(rs): OrString(ls + rs);
                OrArray(ra): OrArray(concat([l], ra));
                default: {
                    println("Expected int, double, string or array for +, not " + r.structname);
                    l;
                }
            }
        }
        OrArray(la): OrArray(concat(la, getOrbitArray(r, "add.right")));
        default: {
            println("Expected int, double, string or array for +, not " + l.structname);
            l;
        }
    }
}

orbitMinusValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrInt(li): OrInt(li - getOrbitInt(r, "minus.right"));
        OrDouble(ld): OrDouble(ld - getOrbitDouble(r, "minus.right"));
        default: {
            println("Expected int or double for -, not " + l.structname);
            l;
        }
    }
}

orbitMulValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrInt(li): OrInt(li * getOrbitInt(r, "mul.right"));
        OrDouble(ld): OrDouble(ld * getOrbitDouble(r, "mul.right"));
        default: {
            println("Expected int or double for *, not " + l.structname);
            l;
        }
    }
}

orbitDivideValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrInt(li): {
            divisor = getOrbitInt(r, "divide.right");
            if (divisor == 0) {
                println("ERROR: Division by zero");
                OrInt(0);
            } else {
                OrInt(li / divisor);
            }
        }
        OrDouble(ld): {
            divisor = getOrbitDouble(r, "divide.right");
            if (divisor == 0.0) {
                println("ERROR: Division by zero");
                OrDouble(0.0);
            } else {
                OrDouble(ld / divisor);
            }
        }
        default: {
            println("Expected int or double for /, not " + l.structname);
            l;
        }
    }
}

orbitModValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrInt(li): {
            modValue = getOrbitInt(r, "mod.right");
            if (modValue == 0) {
                println("ERROR: Modulo by zero");
                OrInt(0);
            } else {
                OrInt(li % modValue);
            }
        }
        default: {
            println("Expected int for %, not " + l.structname);
            l;
        }
    }
}

// Generic comparison for Orbit expressions
orbitGenericCompare(l : OrMath_expr, r : OrMath_expr) -> int {
    switch (l) {
        OrInt(li): {
            switch (r) {
                OrInt(ri): genericCompare(li, ri);
                OrDouble(rd): genericCompare(i2d(li), rd);
                default: -1; // Int before other types
            }
        }
        OrDouble(ld): {
            switch (r) {
                OrInt(ri): genericCompare(ld, i2d(ri));
                OrDouble(rd): genericCompare(ld, rd);
                default: -1; // Double before other types (except Int)
            }
        }
        OrBool(lb): {
            switch (r) {
                OrBool(rb): genericCompare(lb, rb);
                OrInt(__): 1; // Bool after Int
                OrDouble(__): 1; // Bool after Double
                default: -1; // Bool before other types
            }
        }
        OrString(ls): {
            switch (r) {
                OrString(rs): genericCompare(ls, rs);
                OrInt(__): 1; // String after Int
                OrDouble(__): 1; // String after Double
                OrBool(__): 1; // String after Bool
                default: -1; // String before other types
            }
        }
        OrArray(la): {
            switch (r) {
                OrArray(ra): {
                    lenA = length(la);
                    lenB = length(ra);
                    minLen = min(lenA, lenB);
                    res = fold(generate(0, minLen, \i -> i), 0, \acc, i -> {
                        if (acc != 0) acc
                        else orbitGenericCompare(la[i], ra[i]);
                    });
                    if (res != 0) res
                    else if (lenA < lenB) -1
                    else if (lenA > lenB) 1
                    else 0;
                }
                OrString(__): 1; // Array after String
                OrInt(__): 1; // Array after Int
                OrDouble(__): 1; // Array after Double
                OrBool(__): 1; // Array after Bool
                default: -1; // Array before other types
            }
        }
        default: genericCompare(l, r)
    }
}

// Comparison operations
orbitCompareValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrInt(orbitGenericCompare(l, r));
}

orbitEqValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(orbitGenericCompare(l, r) == 0);
}

orbitNeqValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(orbitGenericCompare(l, r) != 0);
}

orbitLtValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(orbitGenericCompare(l, r) < 0);
}

orbitLeValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(orbitGenericCompare(l, r) <= 0);
}

orbitGtValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(orbitGenericCompare(l, r) > 0);
}

orbitGeValue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    OrBool(orbitGenericCompare(l, r) >= 0);
}

// Type conversions
orbitInt2String(l : OrMath_expr) -> OrMath_expr {
    OrString(i2s(getOrbitInt(l, "i2s")));
}

orbitInt2Bool(l : OrMath_expr) -> OrMath_expr {
    OrBool(getOrbitInt(l, "i2b") != 0);
}

orbitBool2Int(l : OrMath_expr) -> OrMath_expr {
    OrInt(b2i(getOrbitBool(l, "b2i")));
}

orbitDouble2String(l : OrMath_expr) -> OrMath_expr {
    OrString(d2s(getOrbitDouble(l, "d2s")));
}

orbitString2Int(l : OrMath_expr) -> OrMath_expr {
    OrInt(s2i(getOrbitString(l, "s2i")));
}

orbitString2Double(l : OrMath_expr) -> OrMath_expr {
    OrDouble(s2d(getOrbitString(l, "s2d")));
}

// I/O functions
orbitPrintln(l : OrMath_expr) -> OrMath_expr {
	switch (l) {
		OrString(s): println(s);
		default: println(prettyOrbit(l));
	};

    l; // Return the input value
}

// String operations
orbitCapitalize(l : OrMath_expr) -> OrMath_expr {
    OrString(capitalize(getOrbitString(l, "capitalize")));
}

orbitDecapitalize(l : OrMath_expr) -> OrMath_expr {
    OrString(decapitalize(getOrbitString(l, "decapitalize")));
}

orbitStrGlue(l : OrMath_expr, r : OrMath_expr) -> OrMath_expr {
    array = getOrbitArray(l, "strGlue.array");
    separator = getOrbitString(r, "strGlue.separator");
    strArr = map(array, \item -> getOrbitString(item, "strGlue.item"));
    OrString(strGlue(strArr, separator));
}

orbitStringLength(l : OrMath_expr) -> OrMath_expr {
    OrInt(strlen(getOrbitString(l, "strlen")));
}

orbitValueSubstring(l : OrMath_expr, start : OrMath_expr, length : OrMath_expr) -> OrMath_expr {
    str = getOrbitString(l, "substring.string");
    startIdx = getOrbitInt(start, "substring.start");
    len = getOrbitInt(length, "substring.length");
    OrString(substring(str, startIdx, len));
}

orbitStringIndex(l : OrMath_expr, index : OrMath_expr) -> OrMath_expr {
    str = getOrbitString(l, "strIndex.string");
    idx = getOrbitInt(index, "strIndex.index");
    if (idx < 0 || idx >= strlen(str)) {
        println("ERROR: String index out of range: " + i2s(idx));
        OrString("");
    } else {
        OrString(getCharAt(str, idx));
    }
}

orbitStringContainsAt(str : OrMath_expr, index : OrMath_expr, substr : OrMath_expr) -> OrMath_expr {
    s = getOrbitString(str, "strContainsAt.string");
    idx = getOrbitInt(index, "strContainsAt.index");
    sub = getOrbitString(substr, "strContainsAt.substring");
    OrBool(strContainsAt(s, idx, sub));
}

// String util operations
orbitParsehex(l : OrMath_expr) -> OrMath_expr {
    OrInt(parseHex(getOrbitString(l, "parsehex")));
}

orbitUnescape(l : OrMath_expr) -> OrMath_expr {
    // This is a placeholder - the actual implementation would call deserializeString
    // For now, we'll just return the input string
    OrString(getOrbitString(l, "unescape"));
}

orbitEscape(l : OrMath_expr) -> OrMath_expr {
    // This is a placeholder - the actual implementation would call toString
    // For now, we'll just return the input string
    OrString(getOrbitString(l, "escape"));
}

// Array operations
orbitArrayLength(l : OrMath_expr) -> OrMath_expr {
    OrInt(length(getOrbitArray(l, "arrayLength")));
}

orbitArrayIndex(l : OrMath_expr, index : OrMath_expr) -> OrMath_expr {
    array = getOrbitArray(l, "arrayIndex.array");
    idx = getOrbitInt(index, "arrayIndex.index");
    if (idx < 0 || idx >= length(array)) {
        println("ERROR: Array index out of bounds: " + i2s(idx) + 
              " (array length: " + i2s(length(array)) + ")");
        array[0];
    } else {
        array[idx];
    }
}

orbitArraySubrange(l : OrMath_expr, start : OrMath_expr, end : OrMath_expr) -> OrMath_expr {
    array = getOrbitArray(l, "arraySubrange.array");
    startIdx = getOrbitInt(start, "arraySubrange.start");
    len = getOrbitInt(end, "arraySubrange.length");
    OrArray(subrange(array, startIdx, len));
}

orbitArrayReverse(l : OrMath_expr) -> OrMath_expr {
    array = getOrbitArray(l, "arrayReverse.array");
    OrArray(reverseA(array));
}

// String to/from char array
orbitString2Ints(l : OrMath_expr) -> OrMath_expr {
    str = getOrbitString(l, "string2ints");
    OrArray(map(s2a(str), \v -> OrInt(v)));
}

orbitInts2String(l : OrMath_expr) -> OrMath_expr {
    array = getOrbitArray(l, "ints2string");
    charCodes = map(array, \item -> getOrbitInt(item, "ints2string.item"));
    OrString(strGlue(map(charCodes, \code -> fromCharCode(code)), ""));
}

// Type checking
orbitIsBool(l : OrMath_expr) -> OrMath_expr {
    isBool = switch (l) {
        OrBool(__): true;
        default: false;
    };
    OrBool(isBool);
}

orbitIsInt(l : OrMath_expr) -> OrMath_expr {
    isInt = switch (l) {
        OrInt(__): true;
        default: false;
    };
    OrBool(isInt);
}

orbitIsDouble(l : OrMath_expr) -> OrMath_expr {
    isDouble = switch (l) {
        OrDouble(__): true;
        default: false;
    };
    OrBool(isDouble);
}

orbitIsString(l : OrMath_expr) -> OrMath_expr {
    isString = switch (l) {
        OrString(__): true;
        default: false;
    };
    OrBool(isString);
}

orbitIsArray(l : OrMath_expr) -> OrMath_expr {
    isArray = switch (l) {
        OrArray(__): true;
        default: false;
    };
    OrBool(isArray);
}

orbitIsConstructor(l : OrMath_expr) -> OrMath_expr {
    isConstructor = switch (l) {
        OrFunction(fnExpr, __): {
            switch (fnExpr) {
                OrIdentifier(id): {
                    s = getCharAt(id, 0);
                    s >= "A" && s <= "Z";
                }
                default: false;
            }
        }
        default: false;
    };
    OrBool(isConstructor);
}

orbitGetConstructor(l : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrFunction(fnExpr, __): {
            switch (fnExpr) {
                OrIdentifier(id): OrString(id);
                default: OrString("");
            }
        }
		OrOperatorSymbol(op): OrString(op);
		OrIdentifier(id): OrString(id);
		OrUId(id): OrString(id);
        default: OrString("");
    }
}

// Constructor operations
orbitGetField(l : OrMath_expr, index : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrFunction(fnExpr, args): {
            idx = getOrbitInt(index, "getField.index");
            if (0 <= idx && idx < length(args)) {
                args[idx];
            } else {
                println("ERROR: Field index out of range: " + i2s(idx));
                l;
            }
        }
        default: {
            println("ERROR: Expected constructor, not " + l.structname);
            l;
        }
    }
}

orbitSetField(l : OrMath_expr, index : OrMath_expr, value : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrFunction(fnExpr, args): {
            idx = getOrbitInt(index, "setField.index");
            if (0 <= idx && idx < length(args)) {
                OrFunction(fnExpr, replace(args, idx, value));
            } else {
                println("ERROR: Field index out of range: " + i2s(idx));
                l;
            }
        }
        default: {
            println("ERROR: Expected constructor, not " + l.structname);
            l;
        }
    }
}

// List operations
orbitList2Array(l : OrMath_expr) -> OrMath_expr {
    switch (l) {
        OrArray(__): l; // Already an array
        OrFunction(fnExpr, args): {
            switch (fnExpr) {
                OrIdentifier(id): {
                    // Check if it's a list (Cons or EmptyList)
                    if (id == "Cons") {
                        if (length(args) != 2) {
                            println("ERROR: Cons should have 2 arguments");
                            l;
                        } else {
                            head = args[0];
                            tail = orbitList2Array(args[1]);
                            
                            // Extract the array from the tail result
                            tailArray = switch (tail) {
                                OrArray(elements): elements;
                                default: [];
                            };
                            
                            // Prepend head to the tail array
                            OrArray(concat([head], tailArray));
                        }
                    } else if (id == "EmptyList") {
                        OrArray([]);
                    } else {
                        println("ERROR: Expected list (Cons or EmptyList), got " + id);
                        l;
                    }
                }
                default: {
                    println("ERROR: Expected list constructor, got " + fnExpr.structname);
                    l;
                }
            }
        }
        default: {
            println("ERROR: Expected list or array, got " + l.structname);
            l;
        }
    }
}