import tools/orbit/orbit2core;
import tools/orbit/orbit_env;
import tools/runcore/core_lib;
import tools/runcore/value_util;
import ds/tree;
import math/math;
import string;
import fs/filesystem;
import maybe;

export {
	// Main interpreter function
	interpretOrbit(env : OrbEnv, expr : OrMath_expr) -> OrbEnv;
}

// Helper function to perform CoreLib operations and convert types
performCoreOperation(env : OrbEnv, a : OrMath_expr, b : OrMath_expr, operation : (CoreValue, CoreValue) -> CoreValue) -> OrbEnv {
	// Convert orbit expressions to CoreValues
	aCore = orbit2CoreValue(a);
	bCore = orbit2CoreValue(b);
	
	// Perform the operation using CoreLib
	resultCore = operation(aCore, bCore);
	
	// Convert back to OrMath_expr
	OrbEnv(env with result = coreValue2Orbit(resultCore));
}

// Main interpreter function
interpretOrbit(env : OrbEnv, expr : OrMath_expr) -> OrbEnv {
	ret = \v -> OrbEnv(env with result = v);
	// Handle each expression type
	switch (expr) {
		OrInt(i): ret(expr);
		OrDouble(d): ret(expr);
		OrString(s): ret(expr);
		
		OrIdentifier(id): {
			switch (lookupVar(env, id)) {
				Some(value): ret(value);
				None(): {
					println("Variable not found: " + id);
					ret(OrInt(0));
				}
			}
		}
		
		OrAdd(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreOperation(env, envA.result, envB.result, addValue);
		}
		
		OrSubtract(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreOperation(env, envA.result, envB.result, minusValue);
		}
		
		OrMultiply(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreOperation(env, envA.result, envB.result, mulValue);
		}
		
		OrDivide(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreOperation(env, envA.result, envB.result, divideValue);
		}
		
		OrLet(idType, val): {
			varName = idType.id;
			envVal = interpretOrbit(env, val);
			varValue = envVal.result;
			
			// Create new environment with the binding
			bindVar(envVal, varName, varValue);
		}
		
		OrIfElse(cond, thenExpr, elseExpr): {
			envCond = interpretOrbit(env, cond);
			// Convert to CoreValue to evaluate condition
			condCore = orbit2CoreValue(envCond.result);
			condValue = switch (condCore) {
				CoreBool(b): b;
				CoreInt(i): i != 0;
				CoreDouble(d): d != 0.0;
				CoreString(s): s != "";
				default: false;
			};
			
			if (condValue) {
				interpretOrbit(envCond, thenExpr);
			} else {
				interpretOrbit(envCond, elseExpr);
			}
		}
		
		default: {
			println("Unsupported expression type: " + toString(expr));
			env
		}
	}
}