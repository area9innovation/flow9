import tools/orbit/orbit2core;
import tools/orbit/orbit_env;
import tools/orbit/utils;
import tools/orbit/orbit_pattern;
import tools/runcore/core_lib;
import tools/runcore/value_util;
import ds/tree;
import ds/set;
import math/math;
import string;
import fs/filesystem;
import maybe;
import tools/orbit/orbit_ast;
import tools/orbit/orbit_runtime;
import tools/orbit/prettyprint;  // Re-added for prettyOrbit function
import tools/mango/mcode_lib;
import tools/orbit/orbit_compiled_parser;
import tools/orbit/free;

export {
	// Main interpreter function
	interpretOrbit(env : OrbEnv, expr : OrMath_expr) -> OrbEnv;
	
	// Initialize orbit runtime functions
	initOrbitInterpreter() -> void;
}



// Global variable to hold the runtime functions tree
orbRuntimeFunctions : ref Tree<string, OrbitRuntimeFn> = ref makeTree();

// Initialize the runtime functions
initOrbitRuntimeFunctions() -> void {
	orbRuntimeFunctions := initOrbitRuntime();
}

// Check if a function is available in the orbit runtime
isOrbitRuntimeFunction(id : string) -> bool {
	containsKeyTree(^orbRuntimeFunctions, id);
}

// Call a function from the orbit runtime
callOrbitRuntimeFunction(id : string, args : [OrMath_expr], env : OrbEnv) -> OrbEnv {
	switch (lookupTree(^orbRuntimeFunctions, id)) {
		Some(runtimeFn): runtimeFn.fn(args, env, interpretOrbit);
		None(): {
			println("ERROR: Runtime function not found: " + id);
			env;
		}
	}
}

// Initialize the interpreter by setting up the runtime functions
initOrbitInterpreter() -> void {
	initOrbitRuntimeFunctions();
}

// Helper function to perform CoreLib operations and convert types
performCoreBinOperation(env : OrbEnv, a : OrMath_expr, b : OrMath_expr, operation : (CoreValue, CoreValue) -> CoreValue) -> OrbEnv {
	// Convert orbit expressions to CoreValues
	aCore = orbit2CoreValue(a);
	bCore = orbit2CoreValue(b);
	
	// Perform the operation using CoreLib
	resultCore = operation(aCore, bCore);
	
	// Convert back to OrMath_expr
	OrbEnv(env with result = coreValue2Orbit(resultCore));
}


// Helper function to perform CoreLib operations and convert types
performCoreUnOperation(env : OrbEnv, a : OrMath_expr, operation : (CoreValue) -> CoreValue) -> OrbEnv {
	// Convert orbit expressions to CoreValues
	aCore = orbit2CoreValue(a);
	
	// Perform the operation using CoreLib
	resultCore = operation(aCore);
	
	// Convert back to OrMath_expr
	OrbEnv(env with result = coreValue2Orbit(resultCore));
}

// Attempt to call a function from RunCore
callRunCoreFunction(env : OrbEnv, id : string, args : [OrMath_expr]) -> Maybe<OrbEnv> {
    if (isCoreDefined(env.runCore, id)) {
        // Convert orbit args to CoreValues
        coreArgs = map(args, orbit2CoreValue);
        
        // Call the RunCore function
        switch (evalCoreFn(env.runCore, id, coreArgs)) {
            Some(result): {
                // Convert result back to orbit expression
                Some(OrbEnv(env with result = coreValue2Orbit(result)));
            }
            None(): None();
        }
    } else {
        None();
    }
}

// Evaluate a function call with the given arguments
callFunction(env : OrbEnv, fn : OrMath_expr, args : [OrMath_expr]) -> OrbEnv {
	// First determine if we need to lazily evaluate any arguments
	paramTypes = switch (fn) {
		OrLambda(__, params, __): params;
		default: [];
	};
	// Check if this is a special function that doesn't evaluate arguments
	isSpecialFn = switch(fn) {
		OrVariable(id): isOrbitRuntimeFunction(id);
		OrIdentifier(id): isOrbitRuntimeFunction(id);
		default: false;
	};
	
	// Process arguments - either evaluate them or keep as AST
	evaluatedArgs = foldi(args, [], \i, acc, arg -> {
		// Use the environment from the previous argument evaluation
		envArg = if (i == 0) env else OrbEnv(env with vars = acc[i-1].vars);
		
		// Check whether we should evaluate this argument
		paramType = if (i < length(paramTypes)) Some(paramTypes[i]) else None();
		shouldEval = !isSpecialFn && shouldEvaluateArg(paramType, arg);
		
		resEnv = if (shouldEval) {
			// If it's an eval() call, we need to extract and evaluate the inner argument
			switch (arg) {
				OrFunction(funcExpr, innerArgs): {
					switch(funcExpr) {
						OrVariable(id): {
							if (id == "eval" && length(innerArgs) > 0) {
								// Evaluate the first argument of eval()
								interpretOrbit(envArg, innerArgs[0]);
							} else {
								// Normal evaluation
								interpretOrbit(envArg, arg);
							}
						}
						OrIdentifier(id): {
							if (id == "eval" && length(innerArgs) > 0) {
								// Evaluate the first argument of eval()
								interpretOrbit(envArg, innerArgs[0]);
							} else {
								// Normal evaluation
								interpretOrbit(envArg, arg);
							}
						}
						default: interpretOrbit(envArg, arg);
					}
				}
				default: interpretOrbit(envArg, arg);
			}
		} else {
			// Lazy evaluation - don't evaluate this argument
			OrbEnv(envArg with result = arg);
		};
		
		arrayPush(acc, resEnv);
	});
	// Extract argument values
	argValues = map(evaluatedArgs, \argEnv -> argEnv.result);
	
	// Get the environment after evaluating all arguments
	finalArgEnv = if (length(evaluatedArgs) > 0) lastElement(evaluatedArgs, env) else env;
	
	// Handle the function based on its type
	switch (fn) {
		OrVariable(id): {
			// First check if this function is defined in RunCore
			switch (callRunCoreFunction(finalArgEnv, id, argValues)) {
				Some(resultEnv): resultEnv;
				None(): {
					// Check if identifier is in environment
					switch (lookupVar(finalArgEnv, id)) {
						Some(value): {
							// Call with the value from environment
							callFunction(finalArgEnv, value, args);
						}
						None(): {
							// Not in RunCore or environment
							println("Cannot call non-function value: " + prettyOrbit(fn));
							finalArgEnv;
						}
					}
				}
			}
		}
		
		OrLambda(env_bindings, params, body): {
			// Create new environment including the environment bindings
			callEnv = OrbEnv(finalArgEnv with vars = finalArgEnv.vars);
			
			// Add environment bindings to callEnv
			boundEnv = fold(env_bindings, callEnv, \accEnv, binding -> {
				bindVar(accEnv, binding.id, binding.math_expr);
			});
			
			// Bind arguments to parameters
			finalBoundEnv = foldi(args, boundEnv, \i, accEnv, __ -> {
				if (i < length(params) && i < length(argValues)) {
					// Get parameter name and argument value
					paramName = params[i].id;
					argValue = argValues[i];
					
					// Bind parameter to argument value
					bindVar(accEnv, paramName, argValue);
				} else {
					// If we have more or fewer arguments than parameters, just continue
					accEnv;
				}
			});
			
			// Evaluate the function body in the new environment
			interpretOrbit(finalBoundEnv, body);
		}
		
		default: {
			// Not a callable expression
			println("Cannot call non-function value: " + prettyOrbit(fn));
			finalArgEnv;
		}
	}
}

// Determines if an argument should be evaluated based on type and shape
shouldEvaluateArg(paramType : Maybe<OrIdType>, arg : OrMath_expr) -> bool {
	// Check if this is an "eval()" function call
	isEvalCall = switch(arg) {
		OrFunction(funcExpr, innerArgs): {
			// Check if the function is named "eval" and has exactly one argument
			switch(funcExpr) {
				OrVariable(id): id == "eval" && length(innerArgs) == 1;
				OrIdentifier(id): id == "eval" && length(innerArgs) == 1;
				default: false;
			}
		}
		default: false;
	};
	
	// If it's an AST type but wrapped in eval(), we should evaluate
	if (isEvalCall) {
		true;
	} else {
		// Otherwise, check if it should be lazily evaluated based on type
		switch(paramType) {
			Some(param): !runtimeIsAstType(param.type_annotations);
			None(): true;  // If we don't know the type, evaluate by default
		}
	}
}

// Main interpreter function
interpretOrbit(env : OrbEnv, expr : OrMath_expr) -> OrbEnv {
	todo = \ -> {
		println("TODO: Interpret " + expr.structname + ": " + prettyOrbit(expr));
		env
	};
	if (env.tracing) println("Interpreting: " + expr.structname + ": " + ellipsis(strReplace(prettyOrbit(expr), "\n", " "), 80));
	ret = \v -> OrbEnv(env with result = v);
	// Handle each expression type
	switch (expr) {
		OrInt(i): ret(expr);
		OrDouble(d): ret(expr);
		OrString(s): ret(expr);
		OrBool(b): ret(expr);
		OrArray(elements): {
			// Interpret each element in the array
			processedElements = map(elements, \e -> (interpretOrbit(env, e)).result);
			ret(OrArray(processedElements));
		};
		OrIndex(a, b): {
			// Evaluate array expression
			envA = interpretOrbit(env, a);
			
			// Evaluate index expression
			envB = interpretOrbit(envA, b);
			
			// Get the array and index values
			arrayExpr = envA.result;
			indexExpr = envB.result;
			
			// Check if we have an array
			switch (arrayExpr) {
				OrArray(elements): {
					// Get the index as an integer using the utility function
					index = getOInt(indexExpr, "array index");
					
					// Check if index is in bounds
					if (index >= 0 && index < length(elements)) {
						// Return the element at the given index
						ret(elements[index]);
					} else {
						println("ERROR: Array index out of bounds: " + i2s(index) + 
							" (array length: " + i2s(length(elements)) + ")");
						ret(OrInt(0));
					}
				}
				default: {
					println("ERROR: Cannot index non-array value: " + prettyOrbit(arrayExpr));
					ret(OrInt(0));
				}
			}
		}
		
		OrIdentifier(id): {
			switch (lookupVar(env, id)) {
				Some(value): ret(value);
				None(): {
					// Check if it's a RunCore function name
					if (isCoreDefined(env.runCore, id)) {
						// Return a variable with the same name - will be resolved when called
						ret(OrVariable(id));
					} else {
						println("Variable not found: " + id);
						ret(OrInt(0));
					}
				}
			}
		}
		OrVariable(uid): {
			switch (lookupVar(env, uid)) {
				Some(value): ret(value);
				None(): {
					println("Variable not found: " + uid);
					ret(OrInt(0));
				}
			}
		} 
		
		OrAdd(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, addValue);
		}
		
		OrSubtract(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, minusValue);
		}
		
		OrMultiply(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, mulValue);
		}
		
		OrDivide(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, divideValue);
		}
		OrModulo(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, modValue);
		}
		OrNegate(a): {
			envA = interpretOrbit(env, a);
			performCoreBinOperation(env, OrInt(-1), envA.result, mulValue);
		}
		OrEquals(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, eqValue);
		}
		OrGreaterEquals(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, geValue);
		}
		OrGreaterThan(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, gtValue);
		}
		OrLessEquals(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, leValue);
		}
		OrLessThan(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, ltValue);
		}
		OrNotEquals(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			performCoreBinOperation(env, envA.result, envB.result, neqValue);
		}
		OrLogicalAnd(a, b): {
			envA = interpretOrbit(env, a);
			if (getOBool(envA.result, "logical and") == false) {
				// Short-circuit evaluation
				envA;
			} else {
				envB = interpretOrbit(envA, b);
				performCoreBinOperation(env, envA.result, envB.result, andValue);
			}
		} 
		OrLogicalNot(a): {
			envA = interpretOrbit(env, a);
			performCoreUnOperation(env, envA.result, notValue);
		}
		OrLogicalOr(a, b): {
			envA = interpretOrbit(env, a);
			if (getOBool(envA.result, "logical oe") == true) {
				// Short-circuit evaluation
				envA;
			} else {
				envB = interpretOrbit(envA, b);
				performCoreBinOperation(env, envA.result, envB.result, orValue);
			}
		}

		OrLet(idType, val): {
			varName = idType.id;
			envVal = interpretOrbit(env, val);
			// Create new environment with the binding
			bindVar(env, varName, envVal.result);
		}
		OrFnDef(id, id_types, type_annotations, math_expr): {
			// Create a new function definition
			// Safe to skip bindings for top-level.
			fnDef = OrLambda([], id_types, math_expr);
			// Bind the function to the environment
			bindVar(env, id, fnDef);
		}
		
		OrIfElse(cond, thenExpr, elseExpr): {
			envCond = interpretOrbit(env, cond);
			// Convert to CoreValue to evaluate condition
			condCore = orbit2CoreValue(envCond.result);
			condValue = switch (condCore) {
				CoreBool(b): b;
				CoreInt(i): i != 0;
				CoreDouble(d): d != 0.0;
				CoreString(s): s != "";
				default: false;
			};
			
			if (condValue) {
				interpretOrbit(envCond, thenExpr);
			} else {
				interpretOrbit(envCond, elseExpr);
			}
		}
		OrSequence(a, b): {
			switch (a) {
				OrEquals(__, __): {
					println("WARNING: Sequence with equals operator. Did you mean 'let' instead?");
				}
				default: {}
			}
			env1 = interpretOrbit(env, a);
			// The result of the first expression is discarded
			interpretOrbit(env1, b);
		}
/*		OrComma(a, b): {
			env1 = interpretOrbit(env, a);
			// The result of the first expression is discarded
			interpretOrbit(env1, b);
		}
*/		
		OrFunction(fnExpr, argExprs): {
			// Check if this is a constructor call
			if (isConstructor(expr)) {
				// For constructors, we just evaluate the arguments and keep the constructor as is
				evaluatedArgs = map(argExprs, \arg -> {
					interpretOrbit(env, arg).result;
				});
				ret(OrFunction(fnExpr, evaluatedArgs));
			} else {
				// Direct function name in RunCore?
				switch (fnExpr) {
					OrIdentifier(id): {
						// Check if this is a function in our runtime
						if (isOrbitRuntimeFunction(id)) {
							// Call the runtime function directly with raw arguments
							callOrbitRuntimeFunction(id, argExprs, env);
						} else {
							// Check if function is defined in RunCore first
							if (isCoreDefined(env.runCore, id)) {
								// Only evaluate arguments for RunCore functions
								evaluatedArgs = map(argExprs, \arg -> {
									interpretOrbit(env, arg).result;
								});
								
								// Try to call from RunCore
									switch (callRunCoreFunction(env, id, evaluatedArgs)) {
									Some(resultEnv): resultEnv;
									None(): {
										// Should not happen - we already checked isCoreDefined
										println("WARNING: Core function " + id + " is defined but call failed");
										envFn = interpretOrbit(env, fnExpr);
										callFunction(envFn, envFn.result, argExprs);
									}
								}
							} else {
								// Not in RunCore, don't evaluate arguments, just pass them to callFunction
								envFn = interpretOrbit(env, fnExpr);
								callFunction(envFn, envFn.result, argExprs);
							}
						}
					}
					default: {
						// Evaluate the function expression
						envFn = interpretOrbit(env, fnExpr);
						// Call the function with arguments
						callFunction(envFn, envFn.result, argExprs);
					}
				}
			}
		}
		
		OrLambda(bindings, params, body): {
			// Find all free variables in the body (excluding the parameter names)
			boundVars = fold(params, makeSet(), \acc, param -> {
				insertSet(acc, param.id);
			});
			
			// Get the set of free variables
			freeVars = findFreeVars(body, boundVars);
			
			// Create new environment bindings for free variables
			newBindings = createEnvBindings(freeVars, env.vars);
			
			// Return a new lambda with the environment bindings
			ret(OrLambda(newBindings, params, body));
		}
		OrOperatorSymbol(id): todo();
		OrCompose(math_expr1, math_expr2): todo();
		OrDirectProduct(math_expr1, math_expr2): todo();
		OrLeftSemiDirectProduct(math_expr1, math_expr2): todo();
		OrRightSemiDirectProduct(math_expr1, math_expr2): todo();
		OrElementOf(math_expr1, math_expr2): todo();
		OrEntailment(math_expr1, math_expr2, conditionals): todo();
		OrEquivalence(math_expr1, math_expr2, conditionals, full): todo();
		OrExists(math_exprs, math_expr): todo();
		OrExponent(a, b): {
			envA = interpretOrbit(env, a);
			envB = interpretOrbit(envA, b);
			
			// Check if both values are integers 
			aIsInt = switch (envA.result) {
				OrInt(__): true;
				default: false;
			};
			
			bIsInt = switch (envB.result) {
				OrInt(__): true;
				default: false;
			};
			
			if (aIsInt && bIsInt) {
				// Use integer power function
				performCoreBinOperation(env, envA.result, envB.result, \aVal, bVal -> {
					switch (aVal) {
						CoreInt(aInt): {
							switch (bVal) {
								CoreInt(bInt): CoreInt(pow(aInt, bInt));
								default: CoreInt(0);
							}
						}
						default: CoreInt(0);
					}
				});
			} else {
				// Use double power function
				performCoreBinOperation(env, envA.result, envB.result, \aVal, bVal -> {
					// Convert to double values
					aDouble = switch (aVal) {
						CoreInt(i): i2d(i);
						CoreDouble(d): d;
						default: 0.0;
					};
					
					bDouble = switch (bVal) {
						CoreInt(i): i2d(i);
						CoreDouble(d): d;
						default: 0.0;
					};
					
					CoreDouble(dpow(aDouble, bDouble));
				});
			}
		}
		OrField(math_expr, id): todo();
		OrForall(math_exprs, math_expr): todo();
		OrGreekLetter(greek_letter): todo();
		OrIntersection(math_expr1, math_expr2): todo();
		OrMatch(matchExpr, patterns): {
			// First evaluate the expression to match
			envMatch = interpretOrbit(env, matchExpr);
			exprValue = envMatch.result;
			
			// Execute pattern matching, passing the interpreter function itself
			resultEnv = executeMatch(envMatch, exprValue, patterns, interpretOrbit);
			
			// Special case for debugging
			if (env.tracing) {
				println("Pattern matching result: " + prettyOrbit(resultEnv.result));
			}
			
			// Evaluate the result expression in the updated environment
			resultEnv;
		}
		OrRule(lhs, rhs, conditionals, full): {
			ret(expr)
		}
		OrSetComprehension(math_exprs, math_expr): todo();
		OrSetLiteral(math_exprs): todo();
		OrEllipsis(): todo();
		OrSubscript(math_expr, subscript): todo();
		OrSubset(math_expr1, math_expr2): todo();
		OrSuperscript(math_expr, superscript): todo();
		OrFunctionType(math_expr1, math_expr2): todo();
		OrTypeAnnotation(math_expr1, math_expr2): todo();
		OrNotTypeAnnotation(math_expr1, math_expr2): todo();
		OrTypeSubstitution(math_expr1, math_expr2, math_expr3): todo();
		OrTypeVar(string1): todo();
		OrUnion(math_expr1, math_expr2): todo();
		OrImport(path): {
			// Check if the file has already been imported in the current scope
			if (containsSet(env.importedFiles, path)) {
				if (env.tracing) {
					println("Already imported in current scope: " + path);
				}
				// Return the current environment unchanged, since the file is already imported
				env;
			} else {
				// Mark this file as imported in the current scope
				envWithImport = OrbEnv(env with importedFiles = insertSet(env.importedFiles, path));
				
				// Try to get the imported file from cache first
				switch (lookupTree(^(env.importCache), path)) {
					Some(content): {
						// File already parsed, just evaluate it in the current env
						if (env.tracing) {
							println("Using cached import for: " + path);
						}
						
						// Interpret the content in the current environment
						interpretOrbit(envWithImport, content);
					}
					None(): {
						// File not in cache, we need to parse it
						if (env.tracing) {
							println("Importing file: " + path);
						}
						
						// Build the full file path (add .orb extension if not present)
						filePath = if (!strContains(path, ".orb")) {
							path + ".orb";
						} else path;
						
						// Check if file exists
						if (fileExists(filePath)) {
							// Read file content
							program = getFileContent(filePath);
							
							// Parse the file using the mango parser
							res = parseCompiledMango(filePath, program, orbit_parse_orbit_compiled, flow(0));
							
							if (res.second != "") {
								// Parse error
								println(filePath + ": " + res.second);
								ret(OrString("Error parsing imported file: " + filePath + " - " + res.second));
							} else {
								// Cache the parsed expression (AST, not the evaluated result)
								env.importCache := setTree(^(env.importCache), path, res.first);
								
								// Interpret the imported content in the current environment
								interpretOrbit(envWithImport, res.first);
							}
						} else {
							// File not found
							println("Error: File not found: " + filePath + " with cwd " + getCurrentDirectory());
							ret(OrString("Error: File not found: " + filePath));
						}
					}
				}
			}
		}
	}
}