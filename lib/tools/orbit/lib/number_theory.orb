// File: /home/alstrup/area9/flow9/lib/tools/orbit/lib/number_theory.orb
//
// Number Theory library for Orbit
// Includes primality testing, GCD, LCM, modular inverse, modular exponentiation.

import lib/rewrite; // For rule preparation if needed
import lib/reflect; // For type checks

// Checks primality using trial division with optimizations
// is_prime(n: Int) -> Bool
fn is_prime(n) = (
	if n <= 1 then false
	else if n <= 3 then true
	else if n % 2 == 0 || n % 3 == 0 then false
	else (
		let max_check = floor(sqrt(n)); // Integer part of square root
		// Recursive helper to check divisibility by 6k Â± 1
		fn check(i) = (
			if i > max_check then true
			else if n % i == 0 || n % (i + 2) == 0 then false // Check i and i+2
			else check(i + 6)
		);
		check(5) // Start checking from 5
	)
);

// Greatest Common Divisor (GCD) using Euclidean algorithm
// gcd(a: Int, b: Int) -> Int
fn gcd(a, b) = (
	if b == 0 then iabs(a) // Use iabs for integer absolute value
	else gcd(b, a % b)
);

// Least Common Multiple (LCM)
// lcm(a: Int, b: Int) -> Int
fn lcm(a, b) = (
	let g = gcd(a, b);
	// Handle division by zero if a and b are both 0
	if g == 0 then 0
	else iabs(a * b) / g // Use iabs for integer absolute value
);

// Extended Euclidean Algorithm
// Finds integers x, y such that ax + by = gcd(a, b)
// Returns Triple(gcd(a, b), x, y)
// extended_gcd(a: Int, b: Int) -> Triple(Int, Int, Int)
fn extended_gcd(a, b) = (
	if b == 0 then Triple(iabs(a), 1, 0) // Base case
	else (
		// Recursive step - store the result
		let rec_result = extended_gcd(b, a % b);
		// Extract fields using getField (0-indexed)
		let d = getField(rec_result, 0);
		let x_rec = getField(rec_result, 1);
		let y_rec = getField(rec_result, 2);
		// Calculate new coefficients
		let x = y_rec;
		let y = x_rec - (a / b) * y_rec; // a / b is integer division
		Triple(d, x, y)
	)
);

// Modular Multiplicative Inverse
// Finds x such that (a * x) % m == 1
// mod_inverse(a: Int, modulus: Int) -> Option(Int)
fn mod_inverse(a, m) = (
	// Call extended_gcd and store the result
	let gcd_result = extended_gcd(a, m);
	// Extract fields
	let g = getField(gcd_result, 0);
	let x = getField(gcd_result, 1);
	// Check if inverse exists
	if g != 1 then None() // Inverse exists only if gcd(a, m) is 1
	else Some((x % m + m) % m) // Ensure result is positive and within [0, m-1]
);

// Modular Exponentiation (base^exp % modulus) using exponentiation by squaring
// modPow(base: Int, exp: Int, modulus: Int) -> Int
fn modPow(base, exp, modulus) = (
	if modulus == 1 then 0 // Any power mod 1 is 0
	// Assuming non-negative exponent. Add checks for exp < 0 if needed.
	else if exp == 0 then 1 // base^0 = 1
	else (
		let b = base % modulus; // Reduce base initially

		// Recursive helper
		fn loop(current_base, current_exp, accumulator) = (
			if current_exp == 0 then accumulator
			// If exponent is odd, multiply accumulator with current_base
			else if odd(current_exp) then (
				loop(
					(current_base * current_base) % modulus, // Square the base
					current_exp / 2,                         // Halve the exponent
					(accumulator * current_base) % modulus   // Update accumulator
				)
			)
			// If exponent is even, just square base and halve exponent
			else (
				loop(
					(current_base * current_base) % modulus, // Square the base
					current_exp / 2,                         // Halve the exponent
					accumulator                              // Accumulator unchanged
				)
			)
		);
		// Start recursion
		loop(b, exp, 1)
	)
);


// Prime Factorization
// Returns a list of prime factors of n
// prime_factorization(n: Int) -> [Int]
fn prime_factorization(n) = (
	if n <= 1 then [] // Factors of 1 or less is empty list
	else (
		// Recursive helper function
		fn find_factor(current_n, divisor, factors_acc) = (
			if current_n == 1 then factors_acc // Base case: n reduced to 1
			// Optimization: check up to sqrt(current_n)
			else if divisor * divisor > current_n then factors_acc + [current_n] // Remaining n must be prime
			else if current_n % divisor == 0 then (
				// Divisor found, add to list and continue with n / divisor
				find_factor(current_n / divisor, divisor, factors_acc + [divisor])
			)
			// Divisor not found, try next potential divisor (2, then 3, 5, 7...)
			else find_factor(current_n, if divisor == 2 then 3 else divisor + 2, factors_acc)
		);
		// Start factorization check from divisor 2
		find_factor(n, 2, [])
	)
);

// --- Number Theory Rules (Can be used with applyRules) ---

let number_theory_rules = [
    // Fermat's Little Theorem (for modPow function or similar)
    prepareRule("fermats_little_theorem",
        quote(modPow(a, p, p)), // a^p mod p
        quote(a % p), // simplifies to a mod p
        is_prime(p)) // Condition: p must be prime
    // Add more rules as needed, e.g., Euler's theorem, properties of GCD/LCM
];


// Note: Assumes Triple, Some, None constructors are available globally or implicitly defined.
// Note: Assumes standard math functions like sqrt, floor, iabs, odd, getField are available.

"Number Theory Library Loaded"
