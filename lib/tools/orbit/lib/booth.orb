import lib/array;

// Linear time Booth's algorithm to find canonical form in cyclic groups
fn booth_canonical(arr) = (
	if length(arr) <= 1 then arr
	else (
		let n = length(arr);

		// Create an auxiliary array which is the original array concatenated with itself
		let double_arr = arr + arr;

		// Initialize failure function array with -1
		// (We use -1 instead of conventional 0 to simplify logic)
		let f = \i. if i < 0 || i >= n then -1 else f(i);

		// Compute the min rotation index in linear time
		fn compute_min_index() = (
			// Initialize starting values
			fn find_min(i, j, k) = (
				// We're done when we've checked all rotations
				if i + k >= 2 * n then j
				else if k >= n then find_min(i + 1, j, 0)
				else (
					// Compute the current indices we're comparing
					let i_idx = (i + k) % (2 * n);
					let j_idx = (j + k) % (2 * n);

					if double_arr[i_idx] < double_arr[j_idx] then
						// i rotation is smaller, j becomes i
						find_min(i, i, k + 1)
					else if double_arr[i_idx] > double_arr[j_idx] then
						// j rotation is smaller, i moves forward
						find_min(i + k + 1, j, 0)
					else
						// Equal so far, continue comparison
						find_min(i, j, k + 1)
				)
			);

			// Start with first two positions
			find_min(0, 0, 0)
		);

		let min_start = compute_min_index();

		// Build the canonical form starting from min_start
		fn build_result(idx, result) = (
			if idx >= n then result
			else build_result(idx + 1, result + [arr[(min_start + idx) % n]])
		);

		build_result(0, [])
	)
);

