// Domain-aware rewriting library for OGraph manipulation
// This library provides functions for pattern matching, rewriting, and
// domain annotation handling with the correct sequence of operations.
fn quote(e : ast) = e;

//
// CORE REWRITING FUNCTIONS
//

// Apply a single rewrite pattern and replacement to a graph,
// correctly handling domain annotations and conditions
fn applyRewriteRule(graph, pattern, replacement, condition, ruleName) = (
//    println("\nApplying rule: " + ruleName);
//    println("Pattern: " + prettyOrbit(pattern));
//    println("Replacement: " + prettyOrbit(replacement));
//    println("Condition: " + prettyOrbit(condition));
    
    // Apply the pattern match
    let matches = matchOGraphPattern(graph, pattern, \(bindings : ast, eclassId) . (
        //println("Match found at ID: " + i2s(eclassId));
        //println("Bindings: " + prettyOrbit(bindings));
        // THE CORRECT SEQUENCE FOR DOMAIN-AWARE REWRITING:
        
        // Step 1: Check if the condition is satisfied
        let shouldApplyRule = if (condition) then (
            // Optimize for the common case of condition=true
            true
        ) else (
            // Substitute bindings into the condition in the graph
            let condId = addOGraphWithSub(graph, condition, bindings);
            
            // Extract for evaluation
            let condExpr = extractOGraph(graph, condId);
            // println("Condition instantiated to: " + prettyOrbit(condExpr));

            // Evaluate the condition
            let condResult = eval(condExpr);
            // println("Condition evaluated to: " + prettyOrbit(condResult));
            
            condResult
        );
        
        if (shouldApplyRule) then (
            // Step 2: Apply the replacement (only if condition is true)
            // Modern approach using direct eclass ID substitution
            // This is more efficient and works directly with eclass IDs
            let newId = addOGraphWithSub(graph, replacement, bindings);
            println("1. After adding with direct substitution, ID: " + i2s(newId) + ": " + prettyOrbit(extractOGraph(graph, newId)));
            
            // Step 3: Merge nodes (result first to make it canonical)
            mergeOGraphNodes(graph, newId, eclassId);
        ) else (
            // println("Condition not satisfied, rule not applied");
			0
        );

		// TODO: Should we not unquote as well?
    ));
    
//    println("Applied " + i2s(matches) + " matches");
    matches
);

// Apply a list of rewrite rules to an expression
// Rules are quadruples: [name, pattern, replacement, condition]
fn applyRules(expr, rules) = (
    // Create a new graph 
    let graph = makeOGraph("transform");
    
    // Add the expression
    let exprId = addOGraph(graph, expr);
    
    // Helper function to apply rules recursively 
    fn applyRulesRecursive(rules, index, totalMatches) = (
        if index < length(rules) then (
            let rule = rules[index];
            let ruleName = rule[0];
            let pattern = rule[1];
            let replacement = rule[2];
            let condition = if (length(rule) >= 4) then rule[3] else true;
            
            // Apply the rule with condition
            let matches = applyRewriteRule(graph, pattern, replacement, condition, ruleName);
            
            // Apply the next rule
            applyRulesRecursive(rules, index + 1, totalMatches + matches)
        ) else (
            // Return total matches when done
            totalMatches
        )
    );
    
    // Apply all rules
    let totalMatches = applyRulesRecursive(rules, 0, 0);
    // Return the final transformed expression
    extractOGraph(graph, exprId);
);

//
// HELPER FUNCTIONS
//

// Prepares a rule with proper domain handling
// Returns a quadruple of [name, pattern, replacement, condition]
fn prepareRule(name, patternExpr : ast, replacementExpr : ast, conditionExpr : ast) = (
	[name, patternExpr, replacementExpr, conditionExpr]
);

// Convenience function for rules without conditions
fn prepareSimpleRule(name, patternExpr, replacementExpr) = (
    prepareRule(name, patternExpr, replacementExpr, true)
);

// Apply a single rule to an expression
fn applyRule(expr, name, pattern, replacement, condition) = (
    applyRules(expr, [[name, pattern, replacement, condition]])
);

// Apply rules until saturation (fixed point)
fn applyRulesUntilFixedPoint(expr, rules, maxIterations) = (
    // Create a graph with the initial expression
    let graph = makeOGraph("fixed_point");
    let exprId = addOGraph(graph, expr);
    
    // Function to apply all rules once and count matches
    fn applyAllRules(id, rules) = (
        fn applyHelper(index, totalMatches) = (
            if index < length(rules) then (
                let rule = rules[index];
                let ruleName = rule[0];
                let pattern = rule[1];
                let replacement = rule[2];
                let condition = if (length(rule) >= 4) then rule[3] else true;
                
                let matches = applyRewriteRule(graph, pattern, replacement, condition, ruleName);
                applyHelper(index + 1, totalMatches + matches)
            ) else totalMatches
        );
        
        applyHelper(0, 0)
    );
    
    // Iterate until fixed point or max iterations
    fn iterate(iteration, prevMatches) = (
        if iteration >= maxIterations then (
            println("Reached max iterations (" + i2s(maxIterations) + ")");
            extractOGraph(graph, exprId)
        ) else (
            let matches = applyAllRules(exprId, rules);
            println("Iteration " + i2s(iteration) + ": applied " + i2s(matches) + " rewrites");
            
            if matches > 0 then (
                // Continue iterating
                iterate(iteration + 1, matches)
            ) else (
                // Fixed point reached
                println("Fixed point reached after " + i2s(iteration) + " iterations");
                extractOGraph(graph, exprId)
            )
        )
    );
    
    iterate(1, -1)
);

// Helper functions to check if expression is a number or variable
fn is_number(expr : ast) = (astname(expr) == "Int" || astname(expr) == "Double");
fn is_var(expr : ast) = (astname(expr) == "Variable" || astname(expr) == "Identifier");
// Since this is structural, you have to call with quote
fn is_glex(expr) = astname(expr) == "Int" || astname(expr) == "Double" 
	|| astname(expr) == "Variable" || astname(expr) == "Identifier"
	|| (
	expr is (
		a * b => is_glex(a) && is_glex(b);
		a ^ b => (
			is_glex(a) && (astname(b) == "Int" || astname(b) == "Double";)
		);
		a => false
	)
);
"Rewrite Library Successfully Loaded"