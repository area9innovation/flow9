import lib/graph;
import lib/sort;
import lib/domain_utils;
import lib/tree;

// Build a lookup tree for domain positions in the topological order
// Returns a tree mapping from domain name to its position in topological order
fn buildDomainOrderTree(domainGraph) = (
    // Get topological ordering of domains
    let topologicalOrder = topologicalSort(domainGraph);
    
    // Build a lookup tree mapping domain name -> position
    // Lower positions are more specific domains (come earlier in sort)
    let orderTree = foldi(topologicalOrder, makeTree(), \idx, tree, domain -> (
		let dom = extractDomainName(domain);
		if containsTree(tree, dom) then (
			tree
		) else (
		//	println("Domain: " + dom + ", Position: " + i2s(idx));
			insertTree(tree, dom, idx)
		)
    ));
    
    // Return both the tree and the original ordering
    Pair(orderTree, topologicalOrder)
);

// Get the specificity value of a domain
// Returns its position in topological order (lower = more specific)
fn getDomainSpecificity(orderTree, domain) = (
    lookup(orderTree, domain) is (
        Some(pos) => pos;
        None() => 999999  // Default high value for unknown domains
    )
);

// Find the most specific domain in a list (lowest position in topological order)
fn findMostSpecificDomain(orderTree, domains) = (
    if (length(domains) == 0) then 999999
    else (
        let initial = domains[0];
        let initialPos = getDomainSpecificity(orderTree, initial);
        
        let bestDomain = fold(domains, Pair(initial, initialPos), \best, domain -> (
            let pos = getDomainSpecificity(orderTree, domain);
			best is (Pair(_, bestPos) => (
				// Compare positions to find the most specific domain
				if (pos < bestPos) then Pair(domain, pos) else best
			));
        ));
        bestDomain is (
			Pair(dom, bestPos) => dom;
			None() => 999999
		);
    )
);

// Orders write rules based on domain specificity
// Uses precomputed domain order tree for efficiency
fn orderRulesByDomainSpecificity(rules, domainOrderInfo) = (
    // Extract the order tree and topological ordering
    let orderTree = domainOrderInfo.first;
    
    // Define a comparison function for sorting
    // Returns true if rule1 should come before rule2
    let compareRules = \rule1, rule2 -> (
        // Extract domains from each rule string
        let domains1 = getDomains([], rule1);
        let domains2 = getDomains([], rule2);
        
        // Find the most specific domain for each rule
        let mostSpecific1 = findMostSpecificDomain(orderTree, domains1);
        let mostSpecific2 = findMostSpecificDomain(orderTree, domains2);

		mostSpecific1 > mostSpecific2
    );
    
    // Sort the rules using our comparison function
    mergeSort(rules, compareRules)
);

// Function to apply rules in topological order (example implementation)
fn applyRulesInDomainOrder(expr, rules, domainOrderInfo) = (
    // Order the rules based on domain specificity
    let orderedRules = orderRulesByDomainSpecificity(rules, domainOrderInfo);
    
    // Apply the rules in order
    // In a real implementation, this would use the actual rule application mechanism
    fold(orderedRules, expr, \result, rule -> (
        // Here you would implement the actual rule application logic
        result  // Return result for this example
    ))
);

"Rule Ordering Module Successfully Loaded"