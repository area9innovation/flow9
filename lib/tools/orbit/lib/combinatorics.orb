// Basic combinatorial functions
fn factorial(n) = (
	if n <= 1 then 1
	else n * factorial(n - 1)
);

fn binomial_coefficient(n, k) = (
	if k < 0 || k > n then 0
	else if k == 0 || k == n then 1
	else (
		// Use multiplicative formula to avoid large intermediate values
		fn binom_helper(i, result) = (
			if i > k then result
			else binom_helper(i + 1, result * (n - k + i) / i)
		);
		binom_helper(1, 1)
	)
);

fn permutations(n, r) = (
	if r < 0 || r > n then 0
	else if r == 0 then 1
	else (
		// Calculate n! / (n-r)!
		fold(range(n-r+1, n+1), 1, \product, i.product * i)
	)
);

// Generate permutations of an array
fn generate_permutations(arr) = (
	if length(arr) <= 1 then [arr]
	else (
		let result = [];
		fn perms_helper(i, perms) = (
			if i >= length(arr) then perms
			else (
				let element = arr[i];
				let rest = remove_at_index(arr, i);
				let sub_perms = generate_permutations(rest);

				let new_perms = fold(sub_perms, perms, \acc, p.acc + [[element] + p]);
				perms_helper(i + 1, new_perms)
			)
		);
		perms_helper(0, [])
	)
);

// Generate combinations of an array
fn generate_combinations(arr, r) = (
	if r > length(arr) then []
	else if r == 0 then [[]]
	else if r == length(arr) then [arr]
	else (
		if length(arr) == 0 then []
		else (
			let first = arr[0];
			let rest = subrange(arr, 1, length(arr) - 1);

			// Combinations that include the first element
			let with_first = map(generate_combinations(rest, r - 1),
													\comb.[first] + comb);

			// Combinations that exclude the first element
			let without_first = generate_combinations(rest, r);

			with_first + without_first
		)
	)
);
