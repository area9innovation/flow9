let sexpr_domains = '[
	// S-Expression AST Hierarchy

	// Base S-expression type
	Sexpr ⊂ ExpressionAST,

	// Individual S-expression types
	SSBool(bool1) ⊂ Sexpr,
	SSConstructor(constructor_atom) ⊂ Sexpr,
	SSDouble(double1) ⊂ Sexpr,
	SSInt(int1) ⊂ Sexpr,
	SSList(sexprs) ⊂ Sexpr,
	SSOperator(operators) ⊂ Sexpr,
	SSSpecialForm(special_name, sexprs) ⊂ Sexpr,
	SSString(string1) ⊂ Sexpr,
	SSVariable(variable_atom) ⊂ Sexpr,
	SSVector(sexprs) ⊂ Sexpr,

	// Special forms
	SAnd() ⊂ Special_name,
	SBegin() ⊂ Special_name,
	SClosure() ⊂ Special_name,
	SDefine() ⊂ Special_name,
	SEval() ⊂ Special_name,
	SIf() ⊂ Special_name,
	SImport() ⊂ Special_name,
	SLambda() ⊂ Special_name,
	SLet() ⊂ Special_name,
	SLetRec() ⊂ Special_name,
	SList() ⊂ Special_name,
	SMatch() ⊂ Special_name,
	SOr() ⊂ Special_name,
	SQuasiQuote() ⊂ Special_name,
	SQuote() ⊂ Special_name,
	SSet() ⊂ Special_name,
	SUnQuote() ⊂ Special_name,
	SUnQuoteSplicing() ⊂ Special_name,
	Special_name ⊂ ProgrammingConstruct,

	// Specific mappings to existing expression types
	SSOperator("+") ⊂ ArithmeticExpr,
	SSOperator("-") ⊂ ArithmeticExpr,
	SSOperator("*") ⊂ ArithmeticExpr,
	SSOperator("/") ⊂ ArithmeticExpr,
	SSOperator("%") ⊂ ArithmeticExpr,
	SSOperator("^") ⊂ ArithmeticExpr,

	SSOperator("=") ⊂ ComparisonExpr,
	SSOperator("!=") ⊂ ComparisonExpr,
	SSOperator("<") ⊂ ComparisonExpr,
	SSOperator("<=") ⊂ ComparisonExpr,
	SSOperator(">") ⊂ ComparisonExpr,
	SSOperator(">=") ⊂ ComparisonExpr,

	// Logical operators
	SSOperator("and") ⊂ LogicalExpr,
	SSOperator("or") ⊂ LogicalExpr,
	SSOperator("not") ⊂ LogicalExpr,
	LogicalExpr ⊂ MathExpr,

	// Value expressions
	SSInt(value) ⊂ ValueExpr,
	SSDouble(value) ⊂ ValueExpr,
	SSBool(value) ⊂ ValueExpr,
	SSString(value) ⊂ ValueExpr,

	// Function call expressions
	SSList(expr) ⊂ FunctionCallExpr, // When first element is a function

	// Special form expressions
	SSSpecialForm(SIf(), args) ⊂ ConditionalExpr,
	SSSpecialForm(SLambda(), args) ⊂ LambdaExpr,
	SSSpecialForm(SDefine(), args) ⊂ DefineExpr,
	SSSpecialForm(SLet(), args) ⊂ LetExpr,
	SSSpecialForm(SLetRec(), args) ⊂ LetRecExpr,
	SSSpecialForm(SMatch(), args) ⊂ MatchExpr,
	SSSpecialForm(SQuote(), args) ⊂ QuoteExpr,
	SSSpecialForm(SQuasiQuote(), args) ⊂ QuasiQuoteExpr,
	SSSpecialForm(SUnQuote(), args) ⊂ UnQuoteExpr,
	SSSpecialForm(SUnQuoteSplicing(), args) ⊂ UnQuoteSplicingExpr,

	// Control flow expressions
	ConditionalExpr ⊂ ControlFlowExpr,
	MatchExpr ⊂ ControlFlowExpr,
	ControlFlowExpr ⊂ ExpressionAST,

	// Function expressions
	LambdaExpr ⊂ FunctionExpr,
	LetExpr ⊂ FunctionExpr,
	LetRecExpr ⊂ FunctionExpr,
	FunctionExpr ⊂ ExpressionAST,

	// Meta expressions
	QuoteExpr ⊂ MetaExpr,
	QuasiQuoteExpr ⊂ MetaExpr,
	UnQuoteExpr ⊂ MetaExpr,
	UnQuoteSplicingExpr ⊂ MetaExpr,
	DefineExpr ⊂ MetaExpr,
	MetaExpr ⊂ ExpressionAST,

	// Symmetry group associations
	SSOperator("+") ⊂ Sₙ, // Commutative addition
	SSOperator("*") ⊂ Sₙ, // Commutative multiplication
	SSOperator("and") ⊂ Sₙ, // Commutative logical AND
	SSOperator("or") ⊂ Sₙ, // Commutative logical OR
	SSOperator("=") ⊂ S₂, // Binary equality is S₂-symmetric
	SSOperator("!=") ⊂ S₂, // Binary inequality is S₂-symmetric

	// Domain associations for specific operations
	SSOperator("+") : Integer ⊂ AbelianGroup,
	SSOperator("*") : Integer ⊂ CommutativeRing,
	SSOperator("+") : Real ⊂ AbelianGroup,
	SSOperator("*") : Real ⊂ Field,
	SSOperator("+") : Complex ⊂ AbelianGroup,
	SSOperator("*") : Complex ⊂ Field,
	SSOperator("+") : BitVector ⊂ AbelianGroup,
	SSOperator("*") : BitVector ⊂ Ring,

	// Function call / application expressions
	FunctionCallExpr ⊂ ExpressionAST
];