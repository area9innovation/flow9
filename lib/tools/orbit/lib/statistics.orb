// Basic statistical functions
fn mean(values) = (
	if length(values) == 0 then 0.0
	else fold(values, 0.0, \sum, v.sum + v) / length(values)
);

fn variance(values) = (
	if length(values) <= 1 then 0.0
	else (
		let mu = mean(values);
		let sum_squared_diff = fold(values, 0.0, \sum, v.sum + pow(v - mu, 2));
		sum_squared_diff / length(values)
	)
);

fn standard_deviation(values) = (
	sqrt(variance(values))
);

fn median(values) = (
	let sorted = sort(values);
	let n = length(sorted);
	if n % 2 == 1 then sorted[n / 2]
	else (sorted[n / 2 - 1] + sorted[n / 2]) / 2.0
);

// Probability distributions
fn normal_pdf(x, mu, sigma) = (
	let coef = 1.0 / (sigma * sqrt(2.0 * 3.14159265359));
	let exponent = -0.5 * pow((x - mu) / sigma, 2);
	coef * exp(exponent)
);

fn normal_cdf(x, mu, sigma) = (
	// Approximation of normal CDF
	let t = 1.0 / (1.0 + 0.2316419 * abs(x - mu) / sigma);
	let d = 0.3989423 * exp(-pow((x - mu) / sigma, 2) / 2.0);
	let p = d * t * (0.3193815 + t * (-0.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));

	if x < mu then p else 1.0 - p
);

// Correlation coefficient
fn correlation(x_values, y_values) = (
	if length(x_values) != length(y_values) || length(x_values) == 0 then 0.0
	else (
		let n = length(x_values);
		let x_mean = mean(x_values);
		let y_mean = mean(y_values);

		let numerator = fold(range(0, n), 0.0, \sum, i.sum + (x_values[i] - x_mean) * (y_values[i] - y_mean));
		let x_variance = fold(x_values, 0.0, \sum, x.sum + pow(x - x_mean, 2));
		let y_variance = fold(y_values, 0.0, \sum, y.sum + pow(y - y_mean, 2));

		numerator / sqrt(x_variance * y_variance)
	)
);
