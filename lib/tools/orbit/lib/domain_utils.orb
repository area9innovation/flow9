import lib/graph;

// Build a domain graph from a set of rewriting rules
fn buildDomainGraph(domains) = (
    // Initialize an empty graph
    let graph = makeGraph();
    
    // Create a map from domain name to its signature (first occurrence on LHS)
    // This will help us identify and connect related domains
    let domainSignatures = makeTree();
    
    // First pass: collect domain signatures from first encounter
    let signatureMap = fold(domains, domainSignatures, \signatures, item -> (
        item is (
            (from ⊂ to) => (
                // Extract domain name from the LHS
                let domainName = extractDomainName(from);
                // If we haven't seen this domain name before, store its signature
                lookup(signatures, domainName) is (
                    Some(_) => signatures;  // Already have a signature for this domain
                    None() => insertTree(signatures, domainName, from)  // Store the first occurrence
                )
            );
            _ => signatures  // Skip non-domain definitions
        )
    ));
    
    // Debug output of our domain signatures
    println("Domain signatures collected: " + i2s(sizeTree(signatureMap)));
//    println(getKeys(signatureMap));
//	  println(getValues(signatureMap));
    // Second pass: build the graph with proper connections
    let domainGraph = fold(domains, graph, \g, item -> (
        item is (
            (from ⊂ to) => (
                // Get the domain names
                let fromDomainName = extractDomainName(from);
                let toDomainName = extractDomainName(to);
                
                // Get string representations for graph nodes
                let fromCanon = lookupDef(signatureMap, fromDomainName, from);
                let toCanon = lookupDef(signatureMap, toDomainName, to);
                
                // If this is a pattern like UInt(bw) ⊂ Int(bw + 1), we need
                // to connect it to the proper domain signature
				if (false && toDomainName == "Top") then g
				else if (to != toCanon) then (
					let withEdge = addEdge(g, fromCanon, to, "");
					addEdge(withEdge, to, toCanon, "");
				) else addEdge(g, fromCanon, toCanon, "");
            );
            _ => (
				println("Skipping non-domain definition: " + prettyOrbit(item));  // Debug output
				g  // Skip non-domain definitions
			)
        )
    ));
    
    domainGraph
);

// Extract domain name from an expression (handles both simple names and parametrized domains)
fn extractDomainName(expr) = (
    expr is (
        // Simple domain name (e.g., Integer, Character)
        name => name if isString(name);
        
        // Parametrized domain (e.g., UInt(bw), Int(bw))
        name(params) => name if isString(name);
        
        // Handle other forms - return the entire expression as string
        _ => getConstructor(expr)
    )
);

// Compare two domains in the hierarchy
// Returns: 
//   -1 if a is more specific than b (a ⊂ ... ⊂ b)
//    0 if a and b are the same
//    1 if b is more specific than a (b ⊂ ... ⊂ a)
//    None() if a and b are not directly related
fn compareDomains(graph, a, b) = (
    if (a == b) then 0  // Same domain
    else if (isReachable(graph, a, b)) then -1  // a is more specific than b
    else if (isReachable(graph, b, a)) then 1   // b is more specific than a
    else None()  // Not directly related
);

// Find the lowest domain from a list of domains
// The lowest domain is the most specific one in the hierarchy
fn findLowestDomain(graph, domains) = (
    if (length(domains) == 0) then None()
    else if (length(domains) == 1) then Some(domains[0])
    else (
        // Start with the first domain as our current lowest
        let initialLowest = domains[0];
        
        // Compare with each other domain to find the lowest
        fold(subrange(domains, 1, length(domains) - 1), initialLowest, \currentLowest, domain -> (
            compareDomains(graph, domain, currentLowest) is (
                -1 => domain;  // This domain is more specific than current lowest
                0 => currentLowest;  // Same domain, keep current
                1 => currentLowest;  // Current lowest is more specific
                None() => (
                    // Domains are not directly related, we keep the current lowest
                    // A more sophisticated approach might look at the full hierarchy
                    currentLowest
                )
            )
        ))
    )
);

// Get the most specific domain a node belongs to
// This is the main function to be used in the OGraph system
fn getNodeMostSpecificDomain(domainGraph, og, nodeId) = (
    // Get all domains the node belongs to
    let domains = getONodeBelongsTo(og, nodeId);
    
    // Find and return the lowest domain from the list
    findLowestDomain(domainGraph, domains)
);

// Extract domains from a given expression
fn getDomains(acc, e) = (
	let dec = decomposeSexpr(e);
	let nacc = if (dec[0] == ":") then (
		acc + [dec[1][1]]
	) else acc;
	fold(dec[1], nacc, getDomains);
);

"Domain Hierarchy Utility Library Successfully Loaded"