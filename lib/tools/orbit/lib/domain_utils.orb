import lib/graph;

// Compare two domains in the hierarchy
// Returns: 
//   -1 if a is more specific than b (a ⊂ ... ⊂ b)
//    0 if a and b are the same
//    1 if b is more specific than a (b ⊂ ... ⊂ a)
//    None() if a and b are not directly related
fn compareDomains(graph, a, b) = (
    if (a == b) then 0  // Same domain
    else if (isReachable(graph, a, b)) then -1  // a is more specific than b
    else if (isReachable(graph, b, a)) then 1   // b is more specific than a
    else None()  // Not directly related
);

// Find the lowest domain from a list of domains
// The lowest domain is the most specific one in the hierarchy
fn findLowestDomain(graph, domains) = (
    if (length(domains) == 0) then None()
    else if (length(domains) == 1) then Some(domains[0])
    else (
        // Start with the first domain as our current lowest
        let initialLowest = domains[0];
        
        // Compare with each other domain to find the lowest
        fold(subrange(domains, 1, length(domains) - 1), initialLowest, \currentLowest, domain -> (
            compareDomains(graph, domain, currentLowest) is (
                -1 => domain;  // This domain is more specific than current lowest
                0 => currentLowest;  // Same domain, keep current
                1 => currentLowest;  // Current lowest is more specific
                None() => (
                    // Domains are not directly related, we keep the current lowest
                    // A more sophisticated approach might look at the full hierarchy
                    currentLowest
                )
            )
        ))
    )
);

// Get the most specific domain a node belongs to
// This is the main function to be used in the OGraph system
fn getNodeMostSpecificDomain(domainGraph, og, nodeId) = (
    // Get all domains the node belongs to
    let domains = getONodeBelongsTo(og, nodeId);
    
    // Find and return the lowest domain from the list
    findLowestDomain(domainGraph, domains)
);

"Domain Hierarchy Utility Library Successfully Loaded"