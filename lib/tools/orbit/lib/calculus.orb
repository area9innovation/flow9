// File: /home/alstrup/area9/flow9/lib/tools/orbit/lib/calculus.orb
//
// Library for symbolic Calculus operations in Orbit.
// Includes rules for Differentiation, Integration, and Limits.

import lib/rewrite;
import lib/reflect;
import lib/complex; // For 'i' if needed, and Complex constants

// Define mathematical constants if not universally available
let pi = 3.141592653589793;
let e = 2.718281828459045;

// Helper for conditions
fn is_numeric(x) = (isInt(x) || isDouble(x) || isConstructor(x) && getConstructor(x) == "Complex");
fn is_constant(expr, var) = (!containsVar(expr, var)); // Assumes containsVar helper exists

// --- Differentiation Rules ---
// Using 'diff(expr, var)' operator

let differentiation_rules = [
    // Basic Rules
    prepareRule("diff_constant", quote(diff(c, x)), quote(0), is_constant(c, x)),
    prepareRule("diff_variable_self", quote(diff(x, x)), quote(1), true),
    prepareRule("diff_variable_other", quote(diff(y, x)), quote(0), eval(x != y) && is_var(y)), // If y is a variable different from x
    prepareRule("diff_sum", quote(diff(f + g, x)), quote(diff(f, x) + diff(g, x)), true),
    prepareRule("diff_sub", quote(diff(f - g, x)), quote(diff(f, x) - diff(g, x)), true),
    prepareRule("diff_scalar_mul", quote(diff(c * f, x)), quote(c * diff(f, x)), is_constant(c, x)),
    prepareRule("diff_product", quote(diff(f * g, x)), quote(f * diff(g, x) + g * diff(f, x)), true),
    prepareRule("diff_quotient", quote(diff(f / g, x)), quote((g * diff(f, x) - f * diff(g, x)) / pow(g, 2.0)), true), // Use pow for g^2
    prepareRule("diff_chain", quote(diff(f(g), x)), quote(diff(f, g) * diff(g, x)), true), // Conceptual: diff(f,g) needs care

    // Power Rule
    prepareRule("diff_power", quote(diff(f^n, x)), quote(n * pow(f, n - 1.0) * diff(f, x)), is_numeric(n)), // Use pow

    // Exponential Functions
    prepareRule("diff_exp_x", quote(diff(exp(x), x)), quote(exp(x)), true),
    prepareRule("diff_exp_f", quote(diff(exp(f), x)), quote(exp(f) * diff(f, x)), true), // Chain rule applied
    prepareRule("diff_a_pow_x", quote(diff(pow(a, x), x)), quote(pow(a, x) * log(a)), is_constant(a, x)), // Use pow
    prepareRule("diff_a_pow_f", quote(diff(pow(a, f), x)), quote(pow(a, f) * log(a) * diff(f, x)), is_constant(a, x)), // Use pow

    // Logarithmic Functions
    prepareRule("diff_log_x", quote(diff(log(x), x)), quote(1.0 / x), true), // Natural log
    prepareRule("diff_log_f", quote(diff(log(f), x)), quote((1.0 / f) * diff(f, x)), true), // Chain rule applied
    prepareRule("diff_log_base_a_x", quote(diff(log_base(a, x), x)), quote(1.0 / (x * log(a))), is_constant(a, x)),
    prepareRule("diff_log_base_a_f", quote(diff(log_base(a, f), x)), quote((1.0 / (f * log(a))) * diff(f, x)), is_constant(a, x)),

    // Trigonometric Functions
    prepareRule("diff_sin_x", quote(diff(sin(x), x)), quote(cos(x)), true),
    prepareRule("diff_sin_f", quote(diff(sin(f), x)), quote(cos(f) * diff(f, x)), true),
    prepareRule("diff_cos_x", quote(diff(cos(x), x)), quote(0.0 - sin(x)), true), // Use subtraction
    prepareRule("diff_cos_f", quote(diff(cos(f), x)), quote((0.0 - sin(f)) * diff(f, x)), true),
    prepareRule("diff_tan_x", quote(diff(tan(x), x)), quote(pow(sec(x), 2.0)), true), // Use pow
    prepareRule("diff_tan_f", quote(diff(tan(f), x)), quote(pow(sec(f), 2.0) * diff(f, x)), true),
    prepareRule("diff_sec_x", quote(diff(sec(x), x)), quote(sec(x) * tan(x)), true),
    prepareRule("diff_sec_f", quote(diff(sec(f), x)), quote(sec(f) * tan(f) * diff(f, x)), true),

    // Inverse Trigonometric Functions
    prepareRule("diff_asin_x", quote(diff(asin(x), x)), quote(1.0 / sqrt(1.0 - pow(x, 2.0))), true),
    prepareRule("diff_acos_x", quote(diff(acos(x), x)), quote(-1.0 / sqrt(1.0 - pow(x, 2.0))), true),
    prepareRule("diff_atan_x", quote(diff(atan(x), x)), quote(1.0 / (1.0 + pow(x, 2.0))), true)
];

// --- Integration Rules (Indefinite) ---
// Using 'integrate(expr, var)' operator. Handling the constant 'C' is tricky in rewriting.
// These rules represent antiderivatives; a full symbolic integrator is much more complex.

let integration_rules = [
    // Basic Rules
    prepareRule("integrate_constant", quote(integrate(c, x)), quote(c * x), is_constant(c, x)),
    prepareRule("integrate_sum", quote(integrate(f + g, x)), quote(integrate(f, x) + integrate(g, x)), true),
    prepareRule("integrate_sub", quote(integrate(f - g, x)), quote(integrate(f, x) - integrate(g, x)), true),
    prepareRule("integrate_scalar_mul", quote(integrate(c * f, x)), quote(c * integrate(f, x)), is_constant(c, x)),

    // Power Rule (n != -1)
    prepareRule("integrate_power", quote(integrate(pow(x, n), x)), quote(pow(x, n + 1.0) / (n + 1.0)), is_numeric(n) && eval(n != -1.0)),

    // Special case n = -1 (1/x)
    prepareRule("integrate_one_over_x", quote(integrate(pow(x, -1.0), x)), quote(log(abs(x))), true),
    prepareRule("integrate_one_over_x_alt", quote(integrate(1.0 / x, x)), quote(log(abs(x))), true),

    // Exponential Functions
    prepareRule("integrate_exp_x", quote(integrate(exp(x), x)), quote(exp(x)), true),
    prepareRule("integrate_a_pow_x", quote(integrate(pow(a, x), x)), quote(pow(a, x) / log(a)), is_constant(a, x) && eval(a > 0.0 && a != 1.0)),

    // Trigonometric Functions
    prepareRule("integrate_sin_x", quote(integrate(sin(x), x)), quote(0.0 - cos(x)), true),
    prepareRule("integrate_cos_x", quote(integrate(cos(x), x)), quote(sin(x)), true),
    prepareRule("integrate_sec_squared_x", quote(integrate(pow(sec(x), 2.0), x)), quote(tan(x)), true),
    prepareRule("integrate_sec_tan_x", quote(integrate(sec(x) * tan(x), x)), quote(sec(x)), true),

    // Inverse Trig Forms
    prepareRule("integrate_inv_sqrt_one_minus_x_sq", quote(integrate(1.0 / sqrt(1.0 - pow(x, 2.0)), x)), quote(asin(x)), true),
    prepareRule("integrate_inv_one_plus_x_sq", quote(integrate(1.0 / (1.0 + pow(x, 2.0)), x)), quote(atan(x)), true)

    // NOTE: Symbolic integration often requires pattern matching for u-substitution,
    // integration by parts, partial fractions etc., which are complex to express solely
    // as simple rewrite rules without a more sophisticated strategy engine.
];

// --- Limit Rules ---
// Using 'limit(expr, var, tends_to)' operator. 'tends_to' can be a value or 'infinity'.

let limit_rules = [
    // Basic Limits
    prepareRule("limit_constant", quote(limit(c, x, a)), quote(c), is_constant(c, x)),
    prepareRule("limit_variable", quote(limit(x, x, a)), quote(a), true),
    prepareRule("limit_scalar_mul", quote(limit(c * f, x, a)), quote(c * limit(f, x, a)), is_constant(c, x)),
    prepareRule("limit_sum", quote(limit(f + g, x, a)), quote(limit(f, x, a) + limit(g, x, a)), true),
    prepareRule("limit_product", quote(limit(f * g, x, a)), quote(limit(f, x, a) * limit(g, x, a)), true),
    prepareRule("limit_quotient", quote(limit(f / g, x, a)), quote(limit(f, x, a) / limit(g, x, a)), eval(limit(g, x, a) != 0.0)),
    prepareRule("limit_power", quote(limit(pow(f, g), x, a)), quote(pow(limit(f, x, a), limit(g, x, a))), true), // Requires continuity checks in reality
    prepareRule("limit_composition", quote(limit(f(g), x, a)), quote(f(limit(g, x, a))), true), // Requires continuity of f

    // Limits involving Infinity
    prepareRule("limit_one_over_x_inf", quote(limit(1.0 / x, x, infinity)), quote(0.0), true),
    prepareRule("limit_one_over_x_neg_inf", quote(limit(1.0 / x, x, neg_infinity)), quote(0.0), true), // Assuming neg_infinity symbol
    prepareRule("limit_one_over_x_pow_inf", quote(limit(1.0 / pow(x, n), x, infinity)), quote(0.0), is_numeric(n) && eval(n > 0.0)),
    prepareRule("limit_x_pow_n_inf", quote(limit(pow(x, n), x, infinity)), quote(infinity), is_numeric(n) && eval(n > 0.0)),
    prepareRule("limit_x_pow_n_neg_inf", quote(limit(pow(x, n), x, neg_infinity)), quote(infinity), isInt(n) && eval(n > 0 && n % 2 == 0)), // Even power
    prepareRule("limit_x_pow_n_neg_inf_odd", quote(limit(pow(x, n), x, neg_infinity)), quote(neg_infinity), isInt(n) && eval(n > 0 && n % 2 != 0)), // Odd power

    // Limits of specific functions
    prepareRule("limit_exp_inf", quote(limit(exp(x), x, infinity)), quote(infinity), true),
    prepareRule("limit_exp_neg_inf", quote(limit(exp(x), x, neg_infinity)), quote(0.0), true),
    prepareRule("limit_log_inf", quote(limit(log(x), x, infinity)), quote(infinity), true),
    prepareRule("limit_log_zero_plus", quote(limit(log(x), x, zero_plus)), quote(neg_infinity), true), // Limit from right

    // L'HÃ´pital's Rule (Conceptual - requires checking 0/0 or inf/inf form)
    // prepareRule("lhopital",
    //     quote(limit(f / g, x, a)),
    //     quote(limit(diff(f, x) / diff(g, x), x, a)),
    //     eval(limit(f, x, a) == 0.0 && limit(g, x, a) == 0.0) // Indeterminate form 0/0
    // )

    // Squeeze Theorem (Conceptual)
    // if (limit(f, x, a) == L && limit(h, x, a) == L && f <= g && g <= h)
    // then limit(g, x, a) == L
];


// Helper function (conceptual) - needed for is_constant rule
fn containsVar(expr : ast, var : ast) -> bool = (
    expr is (
        v => eval(v == var) && is_var(v); // Direct match
        a + b => containsVar(a, var) || containsVar(b, var);
        a - b => containsVar(a, var) || containsVar(b, var);
        a * b => containsVar(a, var) || containsVar(b, var);
        a / b => containsVar(a, var) || containsVar(b, var);
        a ^ b => containsVar(a, var) || containsVar(b, var); // Check both base and exponent
        f(arg) => containsVar(f, var) || containsVar(arg, var); // Simple function call
        // Add cases for other expression types as needed
        _ => false // Default: does not contain variable
    )
);


"Calculus Rules Library Loaded"
