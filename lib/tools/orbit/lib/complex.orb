// File: /home/alstrup/area9/flow9/lib/tools/orbit/lib/complex.orb
//
// A library for complex number arithmetic in Orbit.
// Complex numbers are represented using the constructor: Complex(real_part, imaginary_part)

// Define imaginary unit for convenience (though it's often used directly in rules)
let i = Complex(0.0, 1.0);

// Constructor: Creates a complex number from its real and imaginary parts.
// Example: complex(3.0, 4.0) represents 3 + 4i
fn complex(re, im) = Complex(re, im);

// Addition: Adds two complex numbers.
// (a + bi) + (c + di) = (a + c) + (b + d)i
fn addC(a, b) = (
    a is (Complex(re_a, im_a) =>
        b is (Complex(re_b, im_b) =>
            Complex(re_a + re_b, im_a + im_b)
            // Handle addition with real numbers
        );
        r => if isDouble(r) || isInt(r) then Complex(re_a + r, im_a) else error("Type error in addC")
    );
    r => if isDouble(r) || isInt(r) then ( // Case: a is real
        b is (Complex(re_b, im_b) => Complex(r + re_b, im_b));
        r2 => if isDouble(r2) || isInt(r2) then r + r2 else error("Type error in addC") // Real + Real
    ) else error("Type error in addC")
);

// Subtraction: Subtracts the second complex number from the first.
// (a + bi) - (c + di) = (a - c) + (b - d)i
fn subC(a, b) = (
    a is (Complex(re_a, im_a) =>
        b is (Complex(re_b, im_b) =>
            Complex(re_a - re_b, im_a - im_b)
            // Handle subtraction with real numbers
        );
        r => if isDouble(r) || isInt(r) then Complex(re_a - r, im_a) else error("Type error in subC")
    );
     r => if isDouble(r) || isInt(r) then ( // Case: a is real
        b is (Complex(re_b, im_b) => Complex(r - re_b, -im_b));
        r2 => if isDouble(r2) || isInt(r2) then r - r2 else error("Type error in subC") // Real - Real
    ) else error("Type error in subC")
);

// Multiplication: Multiplies two complex numbers.
// (a + bi) * (c + di) = (ac - bd) + (ad + bc)i
fn mulC(a, b) = (
    a is (Complex(re_a, im_a) =>
        b is (Complex(re_b, im_b) =>
            Complex(re_a * re_b - im_a * im_b, re_a * im_b + im_a * re_b)
            // Handle multiplication by real numbers
        );
        r => if isDouble(r) || isInt(r) then Complex(re_a * r, im_a * r) else error("Type error in mulC")
    );
     r => if isDouble(r) || isInt(r) then ( // Case: a is real
        b is (Complex(re_b, im_b) => Complex(r * re_b, r * im_b));
        r2 => if isDouble(r2) || isInt(r2) then r * r2 else error("Type error in mulC") // Real * Real
    ) else error("Type error in mulC")
);

// Magnitude: Calculates the magnitude (or modulus) of a complex number.
// |a + bi| = sqrt(a^2 + b^2)
fn magnitudeC(c) = (
    c is (Complex(re, im) => sqrt(re * re + im * im));
    r => if isDouble(r) || isInt(r) then abs(r) else error("Type error in magnitudeC") // Magnitude of real
);

// Division: Divides the first complex number by the second.
// (a + bi) / (c + di) = [(a + bi) * (c - di)] / |c + di|^2
// Division by zero (0 + 0i) will result in Inf or NaN components based on standard float division.
fn divC(a, b) = (
    a is (Complex(re_a, im_a) =>
        b is (Complex(re_b, im_b) => (
            let denom_sq = re_b * re_b + im_b * im_b;
            // Check for division by zero
            if denom_sq == 0.0 then (
                println("Error: Complex division by zero (0 + 0i)");
                // Return Complex(NaN, NaN) or similar representation of error
                // Orbit's standard division 0.0/0.0 yields NaN
                Complex(0.0 / 0.0, 0.0 / 0.0)
            ) else (
                let num_re = re_a * re_b + im_a * im_b;
                let num_im = im_a * re_b - re_a * im_b;
                Complex(num_re / denom_sq, num_im / denom_sq)
            )
            // Handle division by real numbers
        );
        r => if isDouble(r) || isInt(r) then (
             if r == 0.0 then (
                 println("Error: Complex division by real zero");
                 Complex(0.0 / 0.0, 0.0 / 0.0)
             ) else Complex(re_a / r, im_a / r)
        ) else error("Type error in divC")
    );
     r => if isDouble(r) || isInt(r) then ( // Case: a is real
        b is (Complex(re_b, im_b) => divC(Complex(r, 0.0), Complex(re_b, im_b))); // Reuse Complex/Complex division
        r2 => if isDouble(r2) || isInt(r2) then ( // Real / Real
             if r2 == 0.0 then (
                 println("Error: Real division by zero");
                 0.0 / 0.0
             ) else r / r2
        ) else error("Type error in divC")
    ) else error("Type error in divC")
);

// Argument: Calculates the argument (or phase) of a complex number in radians.
// arg(a + bi) = atan2(b, a)
fn argumentC(c) = (
    c is (Complex(re, im) => atan2(im, re));
    r => if isDouble(r) || isInt(r) then (if r >= 0.0 then 0.0 else 3.141592653589793) else error("Type error in argumentC") // Arg of real
);

// Conjugate: Calculates the complex conjugate.
// conj(a + bi) = a - bi
fn conjugateC(c) = (
    c is (Complex(re, im) => Complex(re, -im));
    r => if isDouble(r) || isInt(r) then r else error("Type error in conjugateC") // Conjugate of real is itself
);

// Polar Constructor: Creates a complex number from polar coordinates (magnitude, argument).
// magnitude * (cos(argument) + i * sin(argument))
fn polarC(magnitude, argument) = (
    Complex(magnitude * cos(argument), magnitude * sin(argument))
);

// Exponential function: Calculates e raised to the power of a complex number.
// exp(a + bi) = exp(a) * (cos(b) + i * sin(b))
fn expC(c) = (
    c is (Complex(re, im) => (
        let mag = exp(re);
        Complex(mag * cos(im), mag * sin(im))
    ));
    r => if isDouble(r) || isInt(r) then Complex(exp(r), 0.0) else error("Type error in expC") // Exp of real
);

// Natural Logarithm: Calculates the principal value of the natural logarithm of a complex number.
// log(z) = log|z| + i*arg(z)
// log(0 + 0i) is undefined. This implementation returns Complex(-Inf, 0.0) and prints an error for log(0).
// Note: Orbit's standard `log` handles `log(0.0)` by returning -Infinity.
fn logC(c) = (
    c is (Complex(re, im) =>
        if re == 0.0 && im == 0.0 then (
            println("Error: logC(0 + 0i) is undefined.");
            Complex(log(0.0), 0.0) // Matches behavior of log(0.0) -> -Inf
        ) else (
            Complex(log(magnitudeC(c)), argumentC(c))
        )
    );
    r => if isDouble(r) || isInt(r) then (
        if r > 0.0 then Complex(log(r), 0.0)
        else if r == 0.0 then (
            println("Error: logC(0.0) is undefined.");
            Complex(log(0.0), 0.0)
        ) else ( // r < 0.0
            Complex(log(abs(r)), 3.141592653589793) // log(-x) = log|x| + i*pi
        )
    ) else error("Type error in logC")
);

// Complex Power: Calculates the principal value of base raised to the power of exponent (both complex).
// base ^ exponent = expC(mulC(exponent, logC(base)))
fn powC(base, exponent) = (
    // Handle simple case: integer exponent
    if isInt(exponent) then (
        fn intPow(b, e) = (
            if e == 0 then Complex(1.0, 0.0)
            else if e == 1 then b
            else if e < 0 then divC(Complex(1.0, 0.0), intPow(b, -e))
            else ( // e > 1
                let half = intPow(b, e / 2);
                let res = mulC(half, half);
                if odd(e) then mulC(b, res) else res
            )
        );
        intPow(base, exponent)
    )
    // General case using exp and log
    else expC(mulC(exponent, logC(base)))
);

// --- Simplification Rules (Comments for applyRules) ---
// Complex(a, 0.0) -> a
// Complex(0.0, 0.0) -> 0.0
// i * i -> Complex(-1.0, 0.0)
// conjugateC(conjugateC(a)) -> a
// conjugateC(Complex(a, b)) -> Complex(a, -b)
// magnitudeC(z)^2 -> mulC(z, conjugateC(z)) // Useful conceptual rewrite

// String Representation: Converts a complex number to a human-readable string.
// Formats as "a + bi", "a - bi", "a", "bi".
fn complexToString(c) = (
    c is (Complex(re, im) =>
        if im == 0.0 then (
            d2s(re) // Real number
        ) else if re == 0.0 then (
            if im == 1.0 then "i"          // Just i
            else if im == -1.0 then "-i" // Just -i
            else d2s(im) + "i"             // Purely imaginary
        ) else if im > 0.0 then (
            if im == 1.0 then d2s(re) + " + i" // a + i
            else d2s(re) + " + " + d2s(im) + "i" // a + bi
        ) else ( // im < 0.0
            if im == -1.0 then d2s(re) + " - i" // a - i
            else d2s(re) + " - " + d2s(abs(im)) + "i" // a - bi
        )
    );
    r => if isDouble(r) || isInt(r) then d2s(r) else "InvalidComplex" // Handle real numbers too
);

"Complex Library Loaded"
