// Stable Merge Sort implementation in Orbit
import lib/array;

// Default boolean comparison function that uses the underlying comparison
fn compare(l, r) = l <= r;

// Merge function that merges two sorted arrays using boolean comparison
// The stability is maintained by using the comparison function
// This ensures that elements from the left array are selected first when equal
fn merge(aa, bb, cmp) = (
	if length(aa) == 0 then bb
    else if length(bb) == 0 then aa
    else (
        if cmp(aa[0], bb[0]) then
			[aa[0]] + merge(tail(aa), bb, cmp)
        else
            [bb[0]] + merge(aa, tail(bb), cmp)
    )
);

// Merge sort implementation with custom boolean comparison function
fn mergeSort(arr, cmp) = (
    if length(arr) <= 1 then arr
    else (
        let mid = length(arr) / 2;
        let left = mergeSort(subrange(arr, 0, mid), cmp);
        let right = mergeSort(subrange(arr, mid, length(arr) - mid), cmp);
        merge(left, right, cmp)
    )
);

// Standard sort using default boolean comparison
fn sort(arr) = mergeSort(arr, compare);


// --- Unique Sort using 3-way comparison ---

// Default 3-way comparison function (spaceship operator)
fn genericCompare(l, r) = (if l < r then -1 else if l == r then 0 else 1);

// Merge function for unique sort using 3-way comparison (-1, 0, 1)
// If elements compare equal (0), only one is kept.
fn mergeUnique(aa, bb, cmp) = (
    if length(aa) == 0 then bb
    else if length(bb) == 0 then aa
    else (
        let comparison = cmp(aa[0], bb[0]);
        if comparison < 0 then // aa[0] is smaller
            [aa[0]] + mergeUnique(tail(aa), bb, cmp)
        else if comparison > 0 then // bb[0] is smaller
            [bb[0]] + mergeUnique(aa, tail(bb), cmp)
        else // aa[0] == bb[0] (equal)
            [aa[0]] + mergeUnique(tail(aa), tail(bb), cmp) // Keep one from aa, discard from bb
    )
);

// Internal recursive merge sort for unique elements using 3-way comparison
fn sortUniqueRecursive(arr, cmp) = (
    if length(arr) <= 1 then arr
    else (
        let mid = length(arr) / 2;
        // Recursively sort and unique-ify sub-arrays
        let left = sortUniqueRecursive(subrange(arr, 0, mid), cmp);
        let right = sortUniqueRecursive(subrange(arr, mid, length(arr) - mid), cmp);
        // Merge the unique sorted sub-arrays
        mergeUnique(left, right, cmp)
    )
);

// Public unique sort function using default 3-way comparison
// Sorts the array and removes duplicate elements based on <=> result being 0.
fn sortUnique(arr) = sortUniqueRecursive(arr, genericCompare);

// Public unique sort function with custom 3-way comparison function
// The cmp function must return -1, 0, or 1.
fn sortUniqueWith(arr, cmp) = sortUniqueRecursive(arr, cmp);

