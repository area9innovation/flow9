// Stable Merge Sort implementation in Orbit

// Default comparison function that uses the underlying comparison
fn compare(l, r) = l <= r;

// Merge function that merges two sorted arrays
// The stability is maintained by using the comparison function
// This ensures that elements from the left array are selected first when equal
fn merge(a, b, cmp) = (
    if length(a) = 0 then b
    else if length(b) = 0 then a
    else (
        if cmp(a[0], b[0]) then
            [a[0]] + merge(subrange(a, 1, length(a) - 1), b, cmp)
        else
            [b[0]] + merge(a, subrange(b, 1, length(b) - 1), cmp)
    )
);

// Merge sort implementation with custom comparison function
fn mergeSort(arr, cmp) = (
    if length(arr) <= 1 then arr
    else (
        let mid = length(arr) / 2;
        let left = mergeSort(subrange(arr, 0, mid), cmp);
        let right = mergeSort(subrange(arr, mid, length(arr) - mid), cmp);
        merge(left, right, cmp)
    )
);

fn sort(arr) = mergeSort(arr, compare);