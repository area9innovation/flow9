// Stable Merge Sort implementation in Orbit

// Default comparison function that uses the underlying comparison
fn compare(l, r) = l <= r;

// Merge function that merges two sorted arrays
// The stability is maintained by using the comparison function
// This ensures that elements from the left array are selected first when equal
fn merge(aa, bb, cmp) = (
    if length(aa) = 0 then bb
    else if length(bb) = 0 then a
    else (
        if cmp(aa[0], bb[0]) then
            [aa[0]] + merge(subrange(aa, 1, length(aa) - 1), bb, cmp)
        else
            [bb[0]] + merge(aa, subrange(bb, 1, length(bb) - 1), cmp)
    )
);

// Merge sort implementation with custom comparison function
fn mergeSort(arr, cmp) = (
    if length(arr) <= 1 then arr
    else (
        let mid = length(arr) / 2;
        let left = mergeSort(subrange(arr, 0, mid), cmp);
        let right = mergeSort(subrange(arr, mid, length(arr) - mid), cmp);
        merge(left, right, cmp)
    )
);

// Standard sort using default comparison
fn sort(arr) = mergeSort(arr, compare);
