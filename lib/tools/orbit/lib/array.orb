// Array utility functions library for Orbit

// map: Apply a function to each element in an array
fn map(arr, f) = (
    if length(arr) = 0 then []
    else [f(arr[0])] + map(subrange(arr, 1, length(arr) - 1), f)
);

// filter: Keep only elements that match a predicate
fn filter(arr, pred) = (
    if length(arr) = 0 then []
    else if pred(arr[0]) then 
        [arr[0]] + filter(subrange(arr, 1, length(arr) - 1), pred)
    else 
        filter(subrange(arr, 1, length(arr) - 1), pred)
);

// fold: Accumulate a result based on each array element and an accumulator
fn fold(arr, init, f) = (
    if length(arr) = 0 then init
    else fold(subrange(arr, 1, length(arr) - 1), f(init, arr[0]), f)
);

// mapi: Map with index
fn mapi(arr, f) = (
    fn mapiHelper(arr, f, idx) = (
        if length(arr) = 0 then []
        else [f(arr[0], idx)] + mapiHelper(subrange(arr, 1, length(arr) - 1), f, idx + 1)
    );
    mapiHelper(arr, f, 0)
);

// filteri: Filter with index
fn filteri(arr, pred) = (
    fn filteriHelper(arr, pred, idx) = (
        if length(arr) = 0 then []
        else if pred(arr[0], idx) then 
            [arr[0]] + filteriHelper(subrange(arr, 1, length(arr) - 1), pred, idx + 1)
        else 
            filteriHelper(subrange(arr, 1, length(arr) - 1), pred, idx + 1)
    );
    filteriHelper(arr, pred, 0)
);

// foldi: Fold with index
fn foldi(arr, init, f) = (
    fn foldiHelper(arr, acc, f, idx) = (
        if length(arr) = 0 then acc
        else foldiHelper(subrange(arr, 1, length(arr) - 1), f(acc, arr[0], idx), f, idx + 1)
    );
    foldiHelper(arr, init, f, 0)
);

// tail: Return all elements except the first one
fn tail(arr) = (
    if length(arr) <= 1 then []
    else subrange(arr, 1, length(arr) - 1)
);

// tailFrom: Return all elements from a given index to the end
fn tailFrom(arr, idx) = (
    if idx >= length(arr) then []
    else subrange(arr, idx, length(arr) - idx)
);

// take: Return the first n elements of an array
fn take(arr, n) = (
    if n <= 0 || length(arr) = 0 then []
    else [arr[0]] + take(subrange(arr, 1, length(arr) - 1), n - 1)
);

// iter: Call a function for each element (for side effects)
fn iter(arr, f) = (
    if length(arr) = 0 then 0 // Return 0 instead of ()
    else (
        f(arr[0]);
        iter(subrange(arr, 1, length(arr) - 1), f)
    )
);

// iteri: Iterate with index
fn iteri(arr, f) = (
    fn iteriHelper(arr, f, idx) = (
        if length(arr) = 0 then 0 // Return 0 instead of ()
        else (
            f(arr[0], idx);
            iteriHelper(subrange(arr, 1, length(arr) - 1), f, idx + 1)
        )
    );
    iteriHelper(arr, f, 0)
);

// filtermap: Combine filter and map operations
fn filtermap(arr, f) = (
    if length(arr) = 0 then []
    else (
        let result = f(arr[0]);
        result is (
            Some(val) => [val] + filtermap(subrange(arr, 1, length(arr) - 1), f);
            None() => filtermap(subrange(arr, 1, length(arr) - 1), f);
            _ => filtermap(subrange(arr, 1, length(arr) - 1), f) // For safety
        )
    )
);

// filtermapi: Filtermap with index
fn filtermapi(arr, f) = (
    fn filtermapHelper(arr, f, idx) = (
        if length(arr) = 0 then []
        else (
            let result = f(arr[0], idx);
            result is (
                Some(val) => [val] + filtermapHelper(subrange(arr, 1, length(arr) - 1), f, idx + 1);
                None() => filtermapHelper(subrange(arr, 1, length(arr) - 1), f, idx + 1);
                _ => filtermapHelper(subrange(arr, 1, length(arr) - 1), f, idx + 1) // For safety
            )
        )
    );
    filtermapHelper(arr, f, 0)
);

// removeIndex: Remove an element at a specific index
fn removeIndex(arr, idx) = (
    if idx < 0 || idx >= length(arr) then arr
    else take(arr, idx) + tailFrom(arr, idx + 1)
);

// removeRange: Remove a range of elements
fn removeRange(arr, start, count) = (
    if start < 0 || start >= length(arr) || count <= 0 then arr
    else take(arr, start) + tailFrom(arr, start + count)
);

// removeFirst: Remove the first occurrence of a specific element
fn removeFirst(arr, element) = (
    fn removeFirstHelper(before, after) = (
        if length(after) = 0 then before
        else if after[0] = element then before + subrange(after, 1, length(after) - 1)
        else removeFirstHelper(before + [after[0]], subrange(after, 1, length(after) - 1))
    );
    removeFirstHelper([], arr)
);

// removeAll: Remove all occurrences of a specific element
fn removeAll(arr, element) = (
    filter(arr, \x.x != element != 0)
);

// contains: Check if an element exists in the array
fn contains(arr, element) = (
    if length(arr) = 0 then false
    else if arr[0] = element then true
    else contains(subrange(arr, 1, length(arr) - 1), element)
);

// exists: Check if any element satisfies a predicate
fn exists(arr, pred) = (
    if length(arr) = 0 then false
    else if pred(arr[0]) then true
    else exists(subrange(arr, 1, length(arr) - 1), pred)
);

// forall: Check if all elements satisfy a predicate
fn forall(arr, pred) = (
    if length(arr) = 0 then true
    else if !pred(arr[0]) then false
    else forall(subrange(arr, 1, length(arr) - 1), pred)
);

// uniq: Remove duplicates from an array
fn uniq(arr) = (
    if length(arr) <= 1 then arr
    else (
        fn uniq_helper(remaining, result) = (
            if length(remaining) = 0 then result
            else (
                let current = remaining[0];
                let rest = tail(remaining);
                
                if contains(result, current) then
                    // Skip duplicate
                    uniq_helper(rest, result)
                else
                    // Keep this element
                    uniq_helper(rest, result + [current])
            )
        );
        uniq_helper(arr, [])
    )
);