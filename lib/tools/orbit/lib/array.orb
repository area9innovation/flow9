// Array utility functions library for Orbit

// map: Apply a function to each element in an array
fn map(arr, f) = (
    fn mapHelper(arr, f, idx, result) = (
        if idx >= length(arr) then result
        else mapHelper(arr, f, idx + 1, result + [f(arr[idx])])
    );
    mapHelper(arr, f, 0, [])
);

// filter: Keep only elements that match a predicate
fn filter(arr, pred) = (
    fn filterHelper(arr, pred, idx, result) = (
        if idx >= length(arr) then result
        else if pred(arr[idx]) then 
            filterHelper(arr, pred, idx + 1, result + [arr[idx]])
        else 
            filterHelper(arr, pred, idx + 1, result)
    );
    filterHelper(arr, pred, 0, [])
);

// fold: Accumulate a result based on each array element and an accumulator
fn fold(arr, init, f) = (
    fn foldHelper(arr, acc, f, idx) = (
        if idx >= length(arr) then acc
        else foldHelper(arr, f(acc, arr[idx]), f, idx + 1)
    );
    foldHelper(arr, init, f, 0)
);

// mapi: Map with index
fn mapi(arr, f) = (
    fn mapiHelper(arr, f, idx, result) = (
        if idx >= length(arr) then result
        else mapiHelper(arr, f, idx + 1, result + [f(idx, arr[idx])])
    );
    mapiHelper(arr, f, 0, [])
);

// filteri: Filter with index
fn filteri(arr, pred) = (
    fn filteriHelper(arr, pred, idx, result) = (
        if idx >= length(arr) then result
        else if pred(idx, arr[idx]) then 
            filteriHelper(arr, pred, idx + 1, result + [arr[idx]])
        else 
            filteriHelper(arr, pred, idx + 1, result)
    );
    filteriHelper(arr, pred, 0, [])
);

// foldi: Fold with index
fn foldi(arr, init, f) = (
    fn foldiHelper(arr, acc, f, idx) = (
        if idx >= length(arr) then acc
        else foldiHelper(arr, f(idx, acc, arr[idx]), f, idx + 1)
    );
    foldiHelper(arr, init, f, 0)
);

// find: Find the first element that matches a predicate
fn find(arr, pred) = (
    fn findHelper(arr, pred, idx) = (
        if idx >= length(arr) then None()
        else if pred(arr[idx]) then Some(arr[idx])
        else findHelper(arr, pred, idx + 1)
    );
    findHelper(arr, pred, 0)
);

// findi: Find with index
fn findi(arr, pred) = (
    fn findiHelper(arr, pred, idx) = (
        if idx >= length(arr) then -1
        else if pred(arr[idx]) then idx
        else findiHelper(arr, pred, idx + 1)
    );
    findiHelper(arr, pred, 0)
);

// findDef: Find with default value
fn findDef(arr, pred, default) = (
    find(arr, pred) is (
        Some(value) => value;
        None() => default
    )
);

// tail: Return all elements except the first one
fn tail(arr) = (
    if length(arr) <= 1 then []
    else subrange(arr, 1, length(arr) - 1)
);

// tailFrom: Return all elements from a given index to the end
fn tailFrom(arr, idx) = (
    if idx >= length(arr) then []
    else subrange(arr, idx, length(arr) - idx)
);

// take: Return the first n elements of an array
fn take(arr, n) = (
    if n <= 0 then []
    else (
        fn takeHelper(arr, idx, n, result) = (
            if idx >= length(arr) || idx >= n then result
            else takeHelper(arr, idx + 1, n, result + [arr[idx]])
        );
        takeHelper(arr, 0, n, [])
    )
);

// iter: Call a function for each element (for side effects)
fn iter(arr, f) = (
    fn iterHelper(arr, f, idx) = (
        if idx >= length(arr) then 0 // Return 0 instead of ()
        else (
            f(arr[idx]);
            iterHelper(arr, f, idx + 1)
        )
    );
    iterHelper(arr, f, 0)
);

// iteri: Iterate with index
fn iteri(arr, f) = (
    fn iteriHelper(arr, f, idx) = (
        if idx >= length(arr) then 0 // Return 0 instead of ()
        else (
            f(idx, arr[idx]);
            iteriHelper(arr, f, idx + 1)
        )
    );
    iteriHelper(arr, f, 0)
);

// filtermap: Combine filter and map operations
fn filtermap(arr, f) = (
    fn filtermapHelper(arr, f, idx, result) = (
        if idx >= length(arr) then result
        else (
            let value = f(arr[idx]);
            value is (
                Some(val) => filtermapHelper(arr, f, idx + 1, result + [val]);
                None() => filtermapHelper(arr, f, idx + 1, result);
                _ => filtermapHelper(arr, f, idx + 1, result) // For safety
            )
        )
    );
    filtermapHelper(arr, f, 0, [])
);

// filtermapi: Filtermap with index
fn filtermapi(arr, f) = (
    fn filtermapHelper(arr, f, idx, result) = (
        if idx >= length(arr) then result
        else (
            let value = f(idx, arr[idx]);
            value is (
                Some(val) => filtermapHelper(arr, f, idx + 1, result + [val]);
                None() => filtermapHelper(arr, f, idx + 1, result);
                _ => filtermapHelper(arr, f, idx + 1, result) // For safety
            )
        )
    );
    filtermapHelper(arr, f, 0, [])
);

// removeIndex: Remove an element at a specific index
fn removeIndex(arr, idx) = (
    if idx < 0 || idx >= length(arr) then arr
    else (
        fn removeIndexHelper(arr, idx, currentIdx, result) = (
            if currentIdx >= length(arr) then result
            else if currentIdx = idx then removeIndexHelper(arr, idx, currentIdx + 1, result)
            else removeIndexHelper(arr, idx, currentIdx + 1, result + [arr[currentIdx]])
        );
        removeIndexHelper(arr, idx, 0, [])
    )
);

// removeRange: Remove a range of elements
fn removeRange(arr, start, count) = (
    if start < 0 || start >= length(arr) || count <= 0 then arr
    else (
        fn removeRangeHelper(arr, start, end, idx, result) = (
            if idx >= length(arr) then result
            else if idx >= start && idx < end then removeRangeHelper(arr, start, end, idx + 1, result)
            else removeRangeHelper(arr, start, end, idx + 1, result + [arr[idx]])
        );
        removeRangeHelper(arr, start, start + count, 0, [])
    )
);

// removeFirst: Remove the first occurrence of a specific element
fn removeFirst(arr, element) = (
    fn removeFirstHelper(arr, element, idx, removed, result) = (
        if idx >= length(arr) then result
        else if !removed && arr[idx] = element then 
            removeFirstHelper(arr, element, idx + 1, true, result)
        else 
            removeFirstHelper(arr, element, idx + 1, removed, result + [arr[idx]])
    );
    removeFirstHelper(arr, element, 0, false, [])
);

// removeAll: Remove all occurrences of a specific element
fn removeAll(arr, element) = (
    filter(arr, \x.x != element)
);

// contains: Check if an element exists in the array
fn contains(arr, element) = (
    fn containsHelper(arr, element, idx) = (
        if idx >= length(arr) then false
        else if arr[idx] = element then true
        else containsHelper(arr, element, idx + 1)
    );
    containsHelper(arr, element, 0)
);

// exists: Check if any element satisfies a predicate
fn exists(arr, pred) = (
    fn existsHelper(arr, pred, idx) = (
        if idx >= length(arr) then false
        else if pred(arr[idx]) then true
        else existsHelper(arr, pred, idx + 1)
    );
    existsHelper(arr, pred, 0)
);

// forall: Check if all elements satisfy a predicate
fn forall(arr, pred) = (
    fn forallHelper(arr, pred, idx) = (
        if idx >= length(arr) then true
        else if !pred(arr[idx]) then false
        else forallHelper(arr, pred, idx + 1)
    );
    forallHelper(arr, pred, 0)
);

// uniq: Remove duplicates from an array
fn uniq(arr) = (
    if length(arr) <= 1 then arr
    else (
        fn uniq_helper(arr, idx, result) = (
            if idx >= length(arr) then result
            else (
                if contains(result, arr[idx]) then
                    // Skip duplicate
                    uniq_helper(arr, idx + 1, result)
                else
                    // Keep this element
                    uniq_helper(arr, idx + 1, result + [arr[idx]])
            )
        );
        uniq_helper(arr, 0, [])
    )
);

// Push an element to an array
fn arrayPush(arr, elem) = (
	arr + [elem]
);