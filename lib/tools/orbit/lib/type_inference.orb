// lib/type_inference.orb - Type inference rules
import lib/reflect;

let type_inference_rules = '[
  // Default literals inference
  n -> n : Int(32) if isInt(n),
  d -> d : FP(64) if isDouble(d),
  s -> s : String if isString(s),
  b -> b : Bool if isBool(b),

  // Basic arithmetic operations
  a : Int(n) + b : Int(n) -> (a + b) : Int(n),
  a : FP(n) + b : FP(n) -> (a + b) : FP(n),
  // String concatenation
  a : String + b : String -> (a + b) : String,

  // Subtraction
  a : Int(n) - b : Int(n) -> (a - b) : Int(n),
  a : FP(n) - b : FP(n) -> (a - b) : FP(n),

  // Multiplication
  a : Int(n) * b : Int(n) -> (a * b) : Int(n),
  a : FP(n) * b : FP(n) -> (a * b) : FP(n),

  // Division
  a : Int(n) / b : Int(n) -> (a / b) : FP(n),  // Integer division produces floating point
  a : FP(n) / b : FP(n) -> (a / b) : FP(n),

  // Modulo
  a : Int(n) % b : Int(n) -> (a % b) : Int(n),

  // Exponentiation
  a : Int(n) ^ b : Int(n) -> (a ^ b) : Int(n),
  a : FP(n) ^ b : FP(n) -> (a ^ b) : FP(n),
  a : FP(n) ^ b : Int(n) -> (a ^ b) : FP(n),  // Allow integer exponents with float base

  // Comparison operations
  a : Int(n) == b : Int(n) -> (a == b) : Bool,
  a : FP(n) == b : FP(n) -> (a == b) : Bool,
  a : String == b : String -> (a == b) : Bool,

  a : Int(n) != b : Int(n) -> (a != b) : Bool,
  a : FP(n) != b : FP(n) -> (a != b) : Bool,
  a : String != b : String -> (a != b) : Bool,

  a : Int(n) < b : Int(n) -> (a < b) : Bool,
  a : FP(n) < b : FP(n) -> (a < b) : Bool,
  a : String < b : String -> (a < b) : Bool,

  a : Int(n) <= b : Int(n) -> (a <= b) : Bool,
  a : FP(n) <= b : FP(n) -> (a <= b) : Bool,
  a : String <= b : String -> (a <= b) : Bool,

  a : Int(n) > b : Int(n) -> (a > b) : Bool,
  a : FP(n) > b : FP(n) -> (a > b) : Bool,
  a : String > b : String -> (a > b) : Bool,

  a : Int(n) >= b : Int(n) -> (a >= b) : Bool,
  a : FP(n) >= b : FP(n) -> (a >= b) : Bool,
  a : String >= b : String -> (a >= b) : Bool,

  // Logical operations
  a : Bool && b : Bool -> (a && b) : Bool,
  a : Bool || b : Bool -> (a || b) : Bool,
  !a : Bool -> !a : Bool,
  
  // Conditional expressions
  if cond then trueExpr : t ⋯ Type else falseExpr : t ⋯ Type -> (if cond : Bool then trueExpr else falseExpr) : t,

  // Array/sequence operations
//  [... elems : t ⋯ Type] -> [elems] : Array(t),
  
  // Common mathematical functions
  abs(x : Int(n)) -> abs(x) : Int(n),
  abs(x : FP(n)) -> abs(x) : FP(n),
  
  // Trigonometric and other mathematical functions
  sin(x : FP(n)) -> sin(x) : FP(n),
  cos(x : FP(n)) -> cos(x) : FP(n),
  tan(x : FP(n)) -> tan(x) : FP(n),
  sqrt(x : FP(n)) -> sqrt(x) : FP(n),
  log(x : FP(n)) -> log(x) : FP(n),
  exp(x : FP(n)) -> exp(x) : FP(n),
  
  // Type conversion functions - explicit conversions are allowed
  i2d(x : Int(n)) -> i2d(x) : FP(64),
  d2i(x : FP(n)) -> d2i(x) : Int(32),
  
  // String conversion
  i2s(x : Int(n)) -> i2s(x) : String,
  d2s(x : FP(n)) -> d2s(x) : String,
  b2s(x : Bool) -> b2s(x) : String,
  
  // Parse functions
  s2i(x : String) -> s2i(x) : Int(32),
  s2d(x : String) -> s2d(x) : FP(64),
  
  // Length functions for containers
  length(s : String) -> length(s) : Int(32),
  length(a : Array(t)) -> length(a) : Int(32),
  
  // Rounding functions
  floor(x : FP(n)) -> floor(x) : Int(32),
  ceil(x : FP(n)) -> ceil(x) : Int(32),
  round(x : FP(n)) -> round(x) : Int(32),

  n -> n,
];

"Type inference rules loaded"