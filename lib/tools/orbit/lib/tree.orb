import lib/array;
import lib/rewrite;

// Tree data structure for the Orbit system
// A binary tree used as a map with key-value pairs

// Tree node constructors:
// Empty(): represents an empty tree
// Node(key, value, left, right): a tree node with key, value, left subtree, right subtree

// Basic tree creation
fn makeTree() = (
    Empty()
);

// Tree node creation
fn makeNode(key, value, left, right) = (
    Node(key, value, left, right)
);

// Insert a key-value pair into the tree
fn insertTree(tree, key, value) = (
    tree is (
        Empty() => Node(key, value, Empty(), Empty());
        Node(k, v, left, right) => (
            if (key < k) then (
                Node(k, v, insertTree(left, key, value), right)
            ) else if (key > k) then (
                Node(k, v, left, insertTree(right, key, value))
            ) else (
                // Key already exists, update the value
                Node(k, value, left, right)
            )
        )
    )
);

// Lookup a value by key
fn lookup(tree, key) = (
    tree is (
        Empty() => None();
        Node(k, v, left, right) => (
            if (key < k) then (
                lookup(left, key)
            ) else if (key > k) then (
                lookup(right, key)
            ) else (
                Some(v)
            )
        )
    )
);

// Helper to find the minimum node in a tree
fn findMinTree(tree) = (
    tree is (
        Empty() => None();
        Node(k, v, Empty(), _) => Some(Pair(k, v));
        Node(k, v, left, _) => findMinTree(left)
    )
);

// Remove a key from the tree
fn remove(tree, key) = (
    tree is (
        Empty() => Empty();
        Node(k, v, left, right) => (
            if (key < k) then (
                Node(k, v, remove(left, key), right)
            ) else if (key > k) then (
                Node(k, v, left, remove(right, key))
            ) else (
                // Case 1: Leaf node
                if (left == Empty() && right == Empty()) then (
                    Empty()
                )
                // Case 2: Only right child
                else if (left == Empty()) then (
                    right
                )
                // Case 3: Only left child
                else if (right == Empty()) then (
                    left
                )
                // Case 4: Two children
                else (
                    // Find minimum node in right subtree
                    let minPair = findMinTree(right);
                    minPair is (
                        Some(Pair(minKey, minValue)) => (
                            // Replace current node with minimum node from right subtree
                            let newRight = remove(right, minKey);
                            Node(minKey, minValue, left, newRight)
                        );
                        None() => (
                            // This case should not occur with valid BST structure
                            // but handled for robustness
                            println("Error: findMinTree returned None on non-empty tree");
                            tree
						)
                    )
                )
            )
        )
    )
);

// Helper function to collect all entries in the tree
fn collectEntries(tree, entries) = (
    tree is (
        Empty() => entries;
        Node(k, v, left, right) => (
            // In-order traversal to maintain key ordering
            let leftEntries = collectEntries(left, entries);
            let currentEntries = arrayPush(leftEntries, Pair(k, v));
            collectEntries(right, currentEntries)
        )
    )
);

// Get all key-value pairs in the tree as an array of pairs
fn getEntries(tree) = (
    collectEntries(tree, [])
);

// Gets all keys from the tree
fn getKeys(tree) = (
    map(getEntries(tree), \pair -> pair is (Pair(first, _) => first))
);

// Gets all values from the tree
fn getValues(tree) = (
    map(getEntries(tree), \pair -> pair is (Pair(_, second) => second))
);

// Rewrite rules for tree operations
// Notice these do not reduce lookup and min from the emptry tree as an example
fn tree_rules() = (
    rules("TreeRules", [
        // Insert into empty tree
        Insert(Empty(), key, value) => Node(key, value, Empty(), Empty()),
        
        // Insert into non-empty tree - less than current key
        Insert(Node(k, v, left, right), key, value) => Node(k, v, Insert(left, key, value), right) if key < k,
        
        // Insert into non-empty tree - greater than current key
        Insert(Node(k, v, left, right), key, value) => Node(k, v, left, Insert(right, key, value)) if key > k,
        
        // Insert into non-empty tree - equal to current key (update)
        Insert(Node(k, v, left, right), key, value) => Node(k, value, left, right) if key == k,
        
        // Lookup in non-empty tree - less than current key
        Lookup(Node(k, v, left, right), key) => Lookup(left, key) if key < k,
        
        // Lookup in non-empty tree - greater than current key
        Lookup(Node(k, v, left, right), key) => Lookup(right, key) if key > k,
        
        // Lookup in non-empty tree - equal to current key
        Lookup(Node(k, v, left, right), key) => v if key == k,
        
        // Remove from empty tree
        Remove(Empty(), key) => Empty(),
        
        // Remove from non-empty tree - key less than current key
        Remove(Node(k, v, left, right), key) => Node(k, v, Remove(left, key), right) if key < k,
        
        // Remove from non-empty tree - key greater than current key
        Remove(Node(k, v, left, right), key) => Node(k, v, left, Remove(right, key)) if key > k,
        
        // Remove from non-empty tree - key matches and it's a leaf node
        Remove(Node(k, v, Empty(), Empty()), key) => Empty() if key == k,
        
        // Remove from non-empty tree - key matches and it has only left child
        Remove(Node(k, v, left, Empty()), key) => left if key == k,
        
        // Remove from non-empty tree - key matches and it has only right child
        Remove(Node(k, v, Empty(), right), key) => right if key == k,

		// TODO: Remove with two children: Just grab the left and split that
        
        // Find minimum value in a tree
        // FindMin(Empty()) => None(),
        FindMin(Node(k, v, Empty(), _)) => Pair(k, v),
        FindMin(Node(k, v, left, _)) => FindMin(left)
    ])
);
