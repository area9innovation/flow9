// AST utility functions for Orbit

// Create a properly nested AST node by folding over an array of arguments
// This function handles arrays of any length, whereas makeAst expects exactly 2 arguments
fn makeFoldedAst(op, args) = (
    let len = length(args);
    
    if len = 0 then (
        // Handle empty array case - return an appropriate default value
        // This depends on the operator, but we'll return a neutral element
        if op = "&&" then true
        else if op = "||" then false
        else args  // Return empty array as fallback
    ) else if len = 1 then (
        // For single element, just return it without creating an operation
        args[0]
    ) else if len = 2 then (
        // For exactly two elements, we can use makeAst directly
        makeAst(op, args)
    ) else (
        // For 3+ elements, fold to create a proper binary tree
        // Start with the first element and fold over the rest
        let initialAst = args[0];
        let remainingArgs = subrange(args, 1, len - 1);
        
        // Fold over the remaining arguments, combining each with the accumulator
        fold(remainingArgs, initialAst, \acc, element -> (
            makeAst(op, [acc, element])
        ))
    )
);