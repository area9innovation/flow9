// Demonstrating rewrite patterns using lazy evaluation

// A simple rewriting function that applies algebraic transformations
fn rewrite(expr : ast) = 
  expr is (
    // Rewrite rule: x + 0 => x
    a + 0 => 
      println("Applied rule: x + 0 => x"),
      eval(a);
    // Rewrite rule: x * 1 => x
    a * 1 => 
      println("Applied rule: x * 1 => x"),
      eval(a);
    // Rewrite rule: x * 0 => 0
    a * 0 => 
      println("Applied rule: x * 0 => 0"),
      0;
    // Rewrite rule: (a + b) * c => a*c + b*c (distributive property)
    (a + b) * c => 
      println("Applied rule: (a + b) * c => a*c + b*c"),
      rewrite(eval(a) * eval(c) + eval(b) * eval(c));
    // No rewrite rule applies, recurse on subexpressions if they exist
    a + b => 
      rewrite(eval(a)) + rewrite(eval(b));
    a * b => 
      rewrite(eval(a)) * rewrite(eval(b));
    // Default: return as is
    x => eval(x)
  );

// Test cases
println("Rewriting x + 0:");
let result1 = rewrite(42 + 0);
println("Result: " + i2s(result1));

println("\nRewriting x * 1:");
let result2 = rewrite(42 * 1);
println("Result: " + i2s(result2));

println("\nRewriting x * 0:");
let result3 = rewrite(42 * 0);
println("Result: " + i2s(result3));

println("\nRewriting (a + b) * c:");
let result4 = rewrite((3 + 4) * 2);
println("Result: " + i2s(result4));

println("\nRewriting complex expression:");
let result5 = rewrite((5 + 0) * (2 + 0) * 1);
println("Result: " + i2s(result5))