// Test more complex conditions in pattern matching

// Test function for classifying coordinates
fn classifyPoint(point) =
  point is (
    [x, y] => "positive quadrant (both x and y > 0)"  if  x > 0 && y > 0;
    [x, y] => "x-axis (y = 0)"  if  y == 0;
    [x, y] => "y-axis (x = 0)"  if  x == 0;
    [x, y] => "first quadrant (x > 0, y < 0)"  if  x > 0 && y < 0;
    [x, y] => "second quadrant (x < 0, y > 0)"  if  x < 0 && y > 0;
    [x, y] => "third quadrant (x < 0, y < 0)"  if  x < 0 && y < 0;
    _ => "unknown point format"
  );

// Test with different points
println("[5, 3]: " + classifyPoint([5, 3]));
println("[0, 7]: " + classifyPoint([0, 7]));
println("[4, 0]: " + classifyPoint([4, 0]));
println("[-3, 5]: " + classifyPoint([-3, 5]));
println("[-2, -4]: " + classifyPoint([-2, -4]));
println("[6, -2]: " + classifyPoint([6, -2]));

// Test with nested conditions
fn analyzeNumber(n) =
  n is (
    x => "two-digit even number"  if  x >= 10 && x < 100 && x % 2 == 0;
    x => "two-digit odd number"  if  x >= 10 && x < 100 && x % 2 == 1;
    x => "single-digit number"  if  x >= 0 && x < 10;
    x => "negative number"  if  x < 0;
    x => "large number"  if  x >= 100
  );

// Test with various numbers
println("\nAnalyzing different numbers:");
println("5: " + analyzeNumber(5));
println("24: " + analyzeNumber(24));
println("33: " + analyzeNumber(33));
println("-12: " + analyzeNumber(-12));
println("256: " + analyzeNumber(256));