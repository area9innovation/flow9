// Test for operator and array pattern matching with rest variables

fn quote(e: ast) = e; // For orbit2sexpr to recognize quoted expressions

// Function to print information about a variable
fn print_value_info(name, value) = (
  println("  " + name + " type: " + astname(value));
  println("  " + name + " value: " + prettyOrbit(value))
);

// Test for operator pattern matching with rest variables
fn test_operator_patterns() = (
  println("===== Testing Operator Pattern Matching =====");
  
  // Test pattern matching with multiplication
  test_multiply(quote(x * y));
  test_multiply(quote(x * y * z));
  test_multiply(quote(x * y * z * w));
  test_multiply(quote(x + y)); // Should not match
  
  // Test pattern matching with addition
  test_addition(quote(a + b));
  test_addition(quote(a + b + c));
  test_addition(quote(a * b)); // Should not match
);

// Test matching multiplication expressions
fn test_multiply(expr) = (
  println("\nTesting expression: " + prettyOrbit(expr));
  
  expr is (
    `*`(terms) => (
      println("✓ MATCHED: Found multiply operation");
      print_value_info("terms", terms);
      true
    );
    _ => (
      println("✗ NOT MATCHED: Not a multiply operation");
      false
    )
  )
);

// Test matching addition expressions
fn test_addition(expr) = (
  println("\nTesting expression: " + prettyOrbit(expr));
  
  expr is (
    `+`(terms) => (
      println("✓ MATCHED: Found addition operation");
      print_value_info("terms", terms);
      true
    );
    _ => (
      println("✗ NOT MATCHED: Not an addition operation");
      false
    )
  )
);

// Test for array pattern matching with rest variables
fn test_array_patterns() = (
  println("\n===== Testing Array Pattern Matching =====");
  
  // Test pattern matching with arrays
  match_array([1, 2, 3, 4, 5]);
  match_array([1, 2]);
  match_array([1]);
  match_array([]);
);

// Test matching arrays with rest variables
fn match_array(arr) = (
  println("\nTesting array: " + prettyOrbit(arr));
  
  arr is (
    [first, second, ..., rest] => (
      println("✓ MATCHED [first, second, ..., rest] pattern");
      print_value_info("first", first);
      print_value_info("second", second);
      print_value_info("rest", rest);
      true
    );
    [single, ..., rest] => (
      println("✓ MATCHED [single, ..., rest] pattern");
      print_value_info("single", single);
      print_value_info("rest", rest);
      true
    );
    [..., all] => (
      println("✓ MATCHED [..., all] pattern");
      print_value_info("all", all);
      true
    );
    _ => (
      println("✗ NO MATCH with array patterns");
      false
    )
  )
);

// Run the tests
test_operator_patterns();
test_array_patterns();