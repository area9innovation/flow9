import lib/tree;

// Test function to demonstrate tree operations
fn main() = (
    println("=== Binary Tree Test ===");
    
    // Create an empty tree
    let tree = makeTree();
    println("Empty tree: " + prettyOrbit(tree));
    
    // Insert some key-value pairs
    let tree1 = insertTree(tree, 5, "five");
    let tree2 = insertTree(tree1, 3, "three");
    let tree3 = insertTree(tree2, 7, "seven");
    let tree4 = insertTree(tree3, 2, "two");
    let tree5 = insertTree(tree4, 4, "four");
    
    println("\nTree after insertions: " + prettyOrbit(tree5));
    
    // Look up some values
    println("\nLookup key 3: " + prettyOrbit(lookup(tree5, 3)));
    println("Lookup key 6: " + prettyOrbit(lookup(tree5, 6)));
    
    // Get all entries
    println("\nAll entries: " + prettyOrbit(getEntries(tree5)));
    
    // Remove a node
    let tree6 = remove(tree5, 3);
    println("\nAfter removing key 3: " + prettyOrbit(tree6));
    println("Lookup key 3 after removal: " + prettyOrbit(lookup(tree6, 3)));
    
    // Test with rewrite rules
    println("\n=== Testing with rewrite rules ===");
    
    // Create a tree using rewrite rules
    let expr = makeTree();
    let expr1 = insertTree(expr, 10, "ten");
    let expr2 = insertTree(expr1, 5, "five");
    let expr3 = insertTree(expr2, 15, "fifteen");
    
    println("Original expression: " + prettyOrbit(expr3));
    
    // Apply rewrite rules
    let rules = tree_rules();
    let result = applyRules(expr3, rules);
    println("After applying rules: " + prettyOrbit(result));
    
    // Test remove with rewrite rules
    let removeExpr = remove(expr3, 5);
    let removeResult = applyRules(removeExpr, rules);
    println("\nAfter removing 5 using rules: " + prettyOrbit(removeResult));
    println("Lookup 5 after removal with rules: " + prettyOrbit(lookup(removeResult, 5)));
    
    // Test removing node with two children
    println("\n=== Testing removal of node with two children ===");
    let twoChildTree = insertTree(tree5, 6, "six");
    println("Tree with node 5 having two children: " + prettyOrbit(twoChildTree));
    let afterRemove = remove(twoChildTree, 5);
    println("After removing node 5 (has two children): " + prettyOrbit(afterRemove));
    println("All entries after removal: " + prettyOrbit(getEntries(afterRemove)));
    println("Keys in order: " + prettyOrbit(getKeys(afterRemove)));
    println("Ensuring children are preserved correctly - Lookup key 3: " + prettyOrbit(lookup(afterRemove, 3)));
    println("Looking up key 6: " + prettyOrbit(lookup(afterRemove, 6)));
    
    "Binary tree tests completed."
);

// Run the test
main();
