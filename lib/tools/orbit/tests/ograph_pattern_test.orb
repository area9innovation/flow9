// Test file for OGraph pattern matching

// Create a new OGraph
let g = makeOGraph("pattern_test");

// Add some expressions to the graph
println("Adding expressions to the graph...");

// Simple expressions
let expr1 = addOGraph(g, 10 + 20);
let expr2 = addOGraph(g, 5 * 6);
let expr3 = addOGraph(g, (7 + 8) * 9);

// More complex expressions with variables
let a = 5;
let b = 10;
let c = 15;

let expr4 = addOGraph(g, a + b);
let expr5 = addOGraph(g, a * c);
let expr6 = addOGraph(g, (a + b) * c);

println("\nExpression IDs:");
println("10 + 20 = ID " + expr1);
println("5 * 6 = ID " + expr2);
println("(7 + 8) * 9 = ID " + expr3);
println("a + b = ID " + expr4);
println("a * c = ID " + expr5);
println("(a + b) * c = ID " + expr6);

// Define a function to print matches
fn printBindings(bindings) = (
    println("Found match with bindings:");
    
    // Print the bindings
    bindings is (
        // Empty array
        [] => println("No bindings");
        
        // Extract value pairs
        _ => (
            // We need to handle bindings manually via pattern matching since we don't know the structure
            println(prettyOrbit(bindings))
        )
    )
);

// Test 1: Match a simple pattern with a variable
println("\nTest 1: Matching pattern x + y");
let matchCount1 = matchOGraphPattern(g, x + y, printBindings);
println("Found " + matchCount1 + " matches for pattern 'x + y'\n");

// Test 2: Match a specific literal pattern
println("\nTest 2: Matching pattern 5 * z");
let matchCount2 = matchOGraphPattern(g, 5 * z, printBindings);
println("Found " + matchCount2 + " matches for pattern '5 * z'\n");

// Test 3: Match a complex pattern with multiple operations
println("\nTest 3: Matching pattern (x + y) * z");
let matchCount3 = matchOGraphPattern(g, (x + y) * z, printBindings);
println("Found " + matchCount3 + " matches for pattern '(x + y) * z'\n");

// Test 4: Match a pattern where the same variable appears multiple times
println("\nTest 4: Matching pattern x + x (same variable twice)");
let matchCount4 = matchOGraphPattern(g, x + x, printBindings);
println("Found " + matchCount4 + " matches for pattern 'x + x'\n");

// Add a new expression with the same variable used twice
let expr7 = addOGraph(g, a + a);
println("Added expression a + a = ID " + expr7);

// Test 5: Match the same variable pattern again
println("\nTest 5: Matching pattern x + x again");
let matchCount5 = matchOGraphPattern(g, x + x, printBindings);
println("Found " + matchCount5 + " matches for pattern 'x + x'\n");

println("\nPattern matching test completed");