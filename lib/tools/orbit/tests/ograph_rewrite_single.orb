// Simplified test for algebraic expression rewriting using orbitRewrite
fn quote(e : ast) = e;

// Test with the distributive property rewrite
// Original expression: d * (e + f)
let expr = quote(d * (e + f));

// Pattern for distributive property: x * (y + z)
let pattern = quote(x * (y + z));

// Replacement: (x * y) + (x * z)
let replacement = quote((x * y) + (x * z));

println("Original expression: " + prettyOrbit(expr));
println("Pattern: " + prettyOrbit(pattern));
println("Replacement: " + prettyOrbit(replacement));

// Create a new OGraph to work with
let graphName = "rewrite_graph";
let graph = makeOGraph(graphName);

// Add the original expression to the graph directly
let exprId = addOGraph(graph, expr);

println("Extracted expression ID: " + i2s(exprId) + ": " + prettyOrbit(extractOGraph(graph, exprId)));

// Apply the rule to the graph with tracing enabled
let matchCount = matchOGraphPattern(graphName, pattern, \(bindings : ast, eclassId) . (
	println("Found match at eclass ID: " + i2s(eclassId));

	// Process the replacement using direct substitution
	let result = substituteWithBindings(replacement, bindings);
	println("Replacement result: " + prettyOrbit(result));
	
	// Add the result to the graph
	let resultId = addOGraph(graph, result);
	
	// Merge the result with the matched node's eclass
	let _ = mergeOGraphNodes(graph, resultId, eclassId);
));

println("Applied " + i2s(matchCount) + " rewrites");

// Extract the rewritten expression
let result = extractOGraph(graph, exprId);

println("Rewritten expression: " + prettyOrbit(result));

result
