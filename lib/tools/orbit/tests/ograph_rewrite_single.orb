// Simplified test for algebraic expression rewriting using orbitRewrite
import lib/array;

fn orbitRewriteRule(graph, pattern, replacement) = (
    // Match the pattern in the graph and apply transformations
    matchOGraphPattern(graph, pattern, \(bindings, eclassId) . (
        println("Found match at eclass ID: " + i2s(eclassId));

        // Process the replacement, evaluating only parts wrapped in eval()
        let result = unquote(replacement, bindings);
        println("Replacement result: " + prettyOrbit(result));
        
        // Add the result to the graph
        let resultId = addOGraph(graph, result);
        
        // Merge the result with the matched node's eclass
        let _ = mergeOGraphNodes(graph, eclassId, resultId);
    ))
);

// Simplified rewrite function that applies a single rule to an expression
fn singleRewrite(pattern, replacement, expr) = (
    // Create a new OGraph to work with
    let graph = makeOGraph("rewrite_graph");
    
    // Add the original expression to the graph
    let exprId = addOGraph(graph, expr);
    
    // Apply the rule to the graph
    let matchCount = orbitRewriteRule(graph, pattern, replacement);
    println("Applied " + i2s(matchCount) + " rewrites");
    
    // Extract the rewritten expression
    let rewritten = extractOGraph(graph, exprId);
    
    // Return the rewritten expression
    rewritten
);

fn quote(e : ast) = e;

// Test with the distributive property rewrite
fn main() = (
    // Original expression: d * (e + f)
    let expr = quote(d * (e + f));
    
    // Pattern for distributive property: x * (y + z)
    let pattern = quote(x * (y + z));
    
    // Replacement: (x * y) + (x * z)
    let replacement = quote((x * y) + (x * z));
    
    println("Original expression: " + prettyOrbit(expr));
    println("Pattern: " + prettyOrbit(pattern));
    println("Replacement: " + prettyOrbit(replacement));
    
    // Apply the rewriting
    let result = singleRewrite(pattern, replacement, expr);
    
    println("Rewritten expression: " + prettyOrbit(result));
    
    result
);