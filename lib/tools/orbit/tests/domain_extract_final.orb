import lib/domain_utils;

// Simple test with a manually constructed domain graph
fn testWithManualGraph() = (
    // Create a simple graph representing our domain hierarchy
    // Int(32) ⊂ PrimitiveType ⊂ Type ⊂ Top
    let graph = makeGraph();
    
    let int32 = 'Int(32);
    let primitiveType = 'PrimitiveType;
    let typeType = 'Type;
    let top = 'Top;
    
    // Add edges to represent the domain hierarchy
    let g2 = addEdge(graph, int32, primitiveType, "");
    let g3 = addEdge(g2, primitiveType, typeType, "");
    let g4 = addEdge(g3, typeType, top, "");
    
    // Test domains for a node
    let domains = [int32, primitiveType, typeType, top];
    println("Node belongs to domains: " + prettyOrbit(domains));
    
    // Find the lowest domain
    let lowestDomain = findLowestDomain(g4, domains);
    println("Lowest domain: " + prettyOrbit(lowestDomain));
    
    lowestDomain
);

// Main function to run the test
fn main() = (
    println("Testing domain extraction with a manual graph...");
    
    let result = testWithManualGraph();
    
    println("\nFinal result: the lowest domain for value 1 is " + prettyOrbit(result));
    
    0
);

// Run the main function
main();