import lib/glex_order;
import lib/reflect;

/**
 * Test for the glex_rewrite function, which reorders polynomial
 * expressions according to Graded Lexicographic (GLEX) ordering.
 * 
 * GLEX ordering principles:
 * 1. Higher degree terms come first
 * 2. For terms with same degree, lexicographic variable ordering is used
 */
fn main() = (
    // Test with various polynomial expressions
    let test_polys = [
        quote(x*y + z^3 + 1 + x^3 + y*z + x^2*y),  // Standard polynomial
        quote(3*x^2 + 2*x + 5),                     // Univariate polynomial
        quote(a*b*c + c*d + a*b + 1),               // Multi-variable polynomial
        quote(z^2 + y^2 + x^2),                     // Reverse lexicographic
        quote((x+y)^2 + (x+y) + 1)                  // More complex expression
    ];
    
    println("DEMONSTRATION OF GLEX REWRITING\n");
    println("Terms are reordered according to Graded Lexicographic (GLEX) ordering:");
    println("1. Higher degree terms come first");
    println("2. For terms with same degree, lexicographic variable ordering is used\n");
    
    // Test each polynomial
    iter(test_polys, \poly -> (
        println("Original:  " + prettyOrbit(poly));
        
        // Rewrite using glex_rewrite
        let rewritten = glex_rewrite(poly);
        println("Rewritten: " + prettyOrbit(rewritten));
        println("");
    ));
    
    // Detailed analysis of first example
    println("\nDETAILED ANALYSIS OF FIRST EXAMPLE\n");
    
    let poly = test_polys[0];
    println("Original: " + prettyOrbit(poly)); // x*y + z^3 + 1 + x^3 + y*z + x^2*y
    
    // Extract terms
    let terms = extract_terms(poly);
    println("\nExtracted terms:");
    iter(terms, \term -> println("  " + prettyOrbit(term)));
    
    // Sort terms
    let sorted = sort_terms_by_glex(terms);
    println("\nSorted by GLEX ordering:");
    iter(sorted, \term -> println("  " + prettyOrbit(term) + "  " + 
        explain_term_degree(term)));
    
    // Explain what happened
    println("\nWe can see that GLEX ordering has:");
    println("1. Placed degree 3 terms first (x^3, x^2*y, z^3)");
    println("2. Placed degree 2 terms next (x*y, y*z)");
    println("3. Placed constants last (1)");
    println("4. Used lexicographic order within each degree group");
    
    println("\nRewritten result: " + prettyOrbit(glex_rewrite(poly)));
);

// Helper to explain term degree for the example
fn explain_term_degree(term) = (
    term is (
        x^3 => "(degree 3)";
        x^2 * y => "(degree 3)";
        z^3 => "(degree 3)";
        x * y => "(degree 2)";
        y * z => "(degree 2)";
        1 => "(degree 0)";
        _ => ""
    )
);

// Run the test
main();