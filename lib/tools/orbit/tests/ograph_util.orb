// Utility functions for O-Graph transformations
fn quote(e : ast) = e;

// Function to apply a single pattern and replacement to a graph
fn applyPatternToGraph(graph, pattern, replacement, ruleName) = (
    println("\nApplying rule: " + ruleName);
    println("Pattern: " + prettyOrbit(pattern));
    println("Replacement: " + prettyOrbit(replacement));
    
    // Apply the pattern match
    let matches = matchOGraphPattern(graph, pattern, \(bindings : ast, eclassId) . (
        println("Match found at ID: " + i2s(eclassId));
        
        // Print bindings for debugging
        println("Bindings: (showing only the first few for brevity)");
        
        // Substitute variables in the replacement
        let result = substituteWithBindings(replacement, bindings);
        println("After substitution: " + prettyOrbit(result));
        
        // Add the result to the graph
        let resultId = addOGraph(graph, result);
        
        // CRITICAL: Order matters - result first to make it canonical
        let merged = mergeOGraphNodes(graph, resultId, eclassId);
        let status = if merged then "success" else "failed";
        println("Merge result: " + status);
    ));
    
    println("Applied " + i2s(matches) + " matches");
    matches
);

// Function to apply a list of rules to an expression
// Each rule is a triple: [name, pattern, replacement]
fn applyRules(expr, rules) = (
    // Create a new graph 
    let graph = makeOGraph("transform");
    let exprId = addOGraph(graph, expr);
    
    println("Original expression: " + prettyOrbit(expr));
    
    // Helper function to apply rules recursively 
    fn applyRulesRecursive(rules, index, totalMatches) = (
        if index < length(rules) then (
            let rule = rules[index];
            let ruleName = rule[0];
            let pattern = rule[1];
            let replacement = rule[2];
            
            // Apply the rule
            let matches = applyPatternToGraph(graph, pattern, replacement, ruleName);
            
            // Print the current state
            let currentExpr = extractOGraph(graph, exprId);
            println("Expression after this rule: " + prettyOrbit(currentExpr));
            
            // Apply the next rule
            applyRulesRecursive(rules, index + 1, totalMatches + matches)
        ) else (
            // Return total matches when done
            totalMatches
        )
    );
    
    // Apply all rules
    let totalMatches = applyRulesRecursive(rules, 0, 0);
    println("\nTotal matches applied: " + i2s(totalMatches));
    
    // Return the final transformed expression
    let finalResult = extractOGraph(graph, exprId);
    println("Final result: " + prettyOrbit(finalResult));
    finalResult
);

// Create the common algebraic rewrite rules
fn algebraicRules() = [
    ["Addition Identity", quote(x + 0), quote(x)],
    ["Multiplication Identity", quote(x * 1), quote(x)],
    ["Multiplication by Zero", quote(x * 0), quote(0)],
    ["Zero Addition", quote(0 + x), quote(x)],
    ["Distributive Property", quote(x * (y + z)), quote((x * y) + (x * z))]
];

// Example usage
let complexExpr = quote((a + 0) * (b * 1) + (c * 0) + d * (e + f));
let finalResult = applyRules(complexExpr, algebraicRules());

println("\nStarting with: " + prettyOrbit(complexExpr));
println("After all rewrites: " + prettyOrbit(finalResult));

// Test another example: nested distributive property
println("\n--- Nested Distributive Example ---");
let nestedExpr = quote(a * (b + (c * (d + e))));
let nestedResult = applyRules(nestedExpr, algebraicRules());
println("Starting with: " + prettyOrbit(nestedExpr));
println("After all rewrites: " + prettyOrbit(nestedResult));