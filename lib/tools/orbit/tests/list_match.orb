// Minimal test for matching n-ary products using 'is'
// with a pattern that can capture all terms of an n-ary operator.

fn quote(e: ast) = e; // For orbit2sexpr to recognize (quote ...)

fn check_prod_s_expr_style(expr_ast) = (
  expr_ast is (
    // Pattern to match an n-ary '*' operation.
    // '*' is the operator, 'terms' should be bound to an S-expression list
    // of all operands: [term1, term2, ..., termN]
    `*`(terms) => ( // This is Orbit syntax for matching a function/operator call
      println("Matched S-Expr style product: '*'(terms)");
	  println(terms);
      // 'terms' itself will be an S-Expr list. We need to pretty print it.
      // The S-Expr representation of 'terms' needs to be handled carefully.
      // If 'terms' is bound to SSList([sexpr_for_x, sexpr_for_y, sexpr_for_z]),
      // we'd ideally want to print these.
      // For now, let's assume 'terms' can be pretty printed if it's a list of OrMath_expr.
      // This step will require 'terms' to be correctly bound as an S-Expr list by matchPattern,
      // and then we'd need a way to iterate/print it.
      // prettyOrbit(terms) might not work if terms is a raw SExpr list.
      // Let's try to print its astname for now, and then its S-Expr form.
      println("Type of 'terms' (astname): " + astname(terms));
      println("S-Expr of 'terms': " + prettySexpr(terms)); 
      // TODO: Add a helper to print each element of the S-Expr list 'terms'
      true; // Indicate match
    );
    _ => (
      println("Did not match S-Expr style product '*'(terms)");
      println("Expression was: " + prettyOrbit(expr_ast));
      false;
    )
  )
);

println("Test 1: Binary product (x*y)");
check_prod_s_expr_style(quote(x*y)); 
// Expected: Match, terms = SExprList(x, y)

println("\nTest 2: N-ary product (x*y*z)");
check_prod_s_expr_style(quote(x*y*z)); 
// Expected: Match, terms = SExprList(x, y, z)

println("\nTest 3: N-ary product (w*x*y*z)");
check_prod_s_expr_style(quote(w*x*y*z)); 
// Expected: Match, terms = SExprList(w, x, y, z)

println("\nTest 4: Non-product (x+y)");
check_prod_s_expr_style(quote(x+y)); 
// Expected: No match
