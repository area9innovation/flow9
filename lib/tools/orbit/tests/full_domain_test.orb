// Test of domain pattern matching with TypeAnnotation and NotTypeAnnotation

// Define quote
fn quote(e : ast) = e;

// Create a test graph
let g = makeOGraph("domain_test");

// Create a simple sum expression and a domain
let a_id = addOGraph(g, quote(a));
let b_id = addOGraph(g, quote(b));
let expr_id = addOGraph(g, quote(a + b));
let alg_id = addOGraph(g, quote(Algebra));

// Print info
println("Created test graph with nodes:");
println("a with ID: " + i2s(a_id));
println("b with ID: " + i2s(b_id));
println("a + b with ID: " + i2s(expr_id));
println("Algebra with ID: " + i2s(alg_id));

// Add domain annotation to the expression
println("\nAdding Algebra domain to a + b");
let success = addDomainToNode(g, expr_id, alg_id);
println("Domain added: " + i2s(b2i(success)));

// Test pattern matching with domain
println("\nMatching (x + y) : Algebra pattern:");
// Important: The domain annotation applies to the ENTIRE expression
let matches = matchOGraphPattern("domain_test", quote((x + y) : Algebra), \(bindings : ast, eclassId) . (
    println("MATCH FOUND at ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Total matches: " + i2s(matches));

// Try negative domain matching for comparison
println("\nMatching (x + y) !: OtherDomain pattern:");
let matches2 = matchOGraphPattern("domain_test", quote((x + y) !: OtherDomain), \(bindings : ast, eclassId) . (
    println("NEGATIVE MATCH FOUND at ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Total negative matches: " + i2s(matches2));

// Try basic pattern matching to verify the graph nodes are valid
println("\nMatching simple x + y pattern:");
let matches3 = matchOGraphPattern("domain_test", quote(x + y), \(bindings : ast, eclassId) . (
    println("BASIC MATCH FOUND at ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Total basic matches: " + i2s(matches3));

"Domain pattern test completed"