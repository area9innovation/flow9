import lib/tree;
import lib/rewrite;

// Lambda calculus implementation using Tree as environment

// Lambda calculus evaluation rules
fn lambda_rules() = (
    tree_rules() +
    rules("LambdaCalculus", [
        // Variable lookup using the Tree environment
        Eval(Identifier(name), env) => Lookup(env, name),
        
        // Variable not found stays as is
        Lookup(Empty(), name) => Identifier(name),
        
        // Lambda expression evaluation - keep as is
        Eval(Lambda(var, body), env) => Lambda(var, body),
        
        // Application of lambda (beta reduction) - insert name in environment and evaluate
        Eval(Apply(Lambda(var, body), arg), env) => Eval(body, Insert(env, var, Eval(arg, env))),
        
        // Application evaluation
        Eval(Apply(func, arg), env) => Apply(Eval(func, env), Eval(arg, env)),
        
        // Value evaluation - keep as is
        Eval(Int(val), env) => Int(val),
        Eval(Bool(val), env) => Bool(val),
        Eval(String(val), env) => String(val)
    ])
);

// Create standard environment with lambda calculus primitives
fn standardEnv() = (
    let env = Empty();
    
    // Identity function: λx.x
    let env = Insert(env, "id", Lambda("x", Identifier("x")));
    
    // Church booleans
    // true: λx.λy.x
    let env = Insert(env, "true", Lambda("x", Lambda("y", Identifier("x"))));
    // false: λx.λy.y
    let env = Insert(env, "false", Lambda("x", Lambda("y", Identifier("y"))));
    
    // Church numerals
    // zero: λf.λx.x
    let env = Insert(env, "zero", Lambda("f", Lambda("x", Identifier("x"))));
    // one: λf.λx.f x
    let env = Insert(env, "one", Lambda("f", Lambda("x", Apply(Identifier("f"), Identifier("x")))));
    // two: λf.λx.f (f x)
    let env = Insert(env, "two", Lambda("f", Lambda("x", Apply(Identifier("f"), Apply(Identifier("f"), Identifier("x"))))));
    // three: λf.λx.f (f (f x))
    let env = Insert(env, "three", Lambda("f", Lambda("x", 
        Apply(Identifier("f"), Apply(Identifier("f"), Apply(Identifier("f"), Identifier("x"))))
    )));
    
    // Church numeral operations
    // succ: λn.λf.λx.f (n f x)
    let env = Insert(env, "succ", Lambda("n", Lambda("f", Lambda("x",
        Apply(Identifier("f"), Apply(Apply(Identifier("n"), Identifier("f")), Identifier("x")))
    ))));
    
    // add: λm.λn.λf.λx.m f (n f x)
    let env = Insert(env, "add", Lambda("m", Lambda("n", Lambda("f", Lambda("x",
        Apply(Apply(Identifier("m"), Identifier("f")), Apply(Apply(Identifier("n"), Identifier("f")), Identifier("x")))
    )))));
    
    env
);

// Pretty printer for lambda calculus expressions
fn prettyLambda(expr) = (
    expr is (
        Identifier(name) => name;
        Lambda(var, body) => "(λ" + var + "." + prettyLambda(body) + ")";
        Apply(func, arg) => "(" + prettyLambda(func) + " " + prettyLambda(arg) + ")";
        Value(val) => i2s(val);
        Empty() => "∅";
        Node(k, v, l, r) => "Node(";
        _ => prettyOrbit(expr);
    )
);

// Evaluate a lambda calculus expression
fn evaluate(expr) = (
    let env = standardEnv();
    let rules = lambda_rules();
    applyRulesUntilFixedPoint(Eval(expr, env), rules, 50)
);

println("Basic identity function: id x");
let result1 = evaluate(Apply(Identifier("id"), Identifier("x")));
println(prettyLambda(result1));
println("");

println("Church Boolean true: (true a b) -> a");
let result2 = evaluate(Apply(Apply(Identifier("true"), Int(1)), Int(2)));
println(prettyLambda(result2));
println("");

println("Church Boolean false: (false a b) -> b");
let result3 = evaluate(Apply(Apply(Identifier("false"), Int(1)), Int(2)));
println(prettyLambda(result3));
println("");

println("Church Numeral: successor of zero");
let result4 = evaluate(Apply(Identifier("succ"), Identifier("zero")));
println(prettyLambda(result4));
println("");

println("Church Numeral: 1 + 2");
let result5 = evaluate(Apply(Apply(Identifier("add"), Identifier("one")), Identifier("two")));
println(prettyLambda(result5));
println("");
