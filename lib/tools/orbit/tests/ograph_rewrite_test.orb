// Test for algebraic expression rewriting using different rules
fn quote(e : ast) = e;

// Common function to apply a rewrite rule
fn applyRewrite(expr, pattern, replacement) = (
    println("Original: " + prettyOrbit(expr));
    println("Pattern: " + prettyOrbit(pattern));
    println("Replacement: " + prettyOrbit(replacement));
    
    let graph = makeOGraph("rewrite");
    let exprId = addOGraph(graph, expr);
    
    let matches = matchOGraphPattern("rewrite", pattern, \(bindings : ast, eclassId) . (
        println("Match found at ID: " + i2s(eclassId));
        let result = substituteWithBindings(replacement, bindings);
        println("After substitution: " + prettyOrbit(result));
        
        let resultId = addOGraph(graph, result);
        let merged = mergeOGraphNodes(graph, resultId, eclassId);
        let status = if merged then "success" else "failed";
        println("Merge result: " + status);
    ));
    
    println("Matches: " + i2s(matches));
    let result = extractOGraph(graph, exprId);
    println("Result: " + prettyOrbit(result));
    result
);

// Test 1: Addition identity
println("\n=== Test 1: Addition identity a + 0 => a");
let test1 = applyRewrite(
    quote(a + 0),
    quote(x + 0),
    quote(x)
);

// Test 2: Multiplication identity
println("\n=== Test 2: Multiplication identity b * 1 => b");
let test2 = applyRewrite(
    quote(b * 1),
    quote(x * 1),
    quote(x)
);

// Test 3: Multiplication by zero
println("\n=== Test 3: Multiplication by zero c * 0 => 0");
let test3 = applyRewrite(
    quote(c * 0),
    quote(x * 0),
    quote(0)
);

// Test 4: Distributive property
println("\n=== Test 4: Distributive property d * (e + f) => (d * e) + (d * f)");
let test4 = applyRewrite(
    quote(d * (e + f)),
    quote(x * (y + z)),
    quote((x * y) + (x * z))
);