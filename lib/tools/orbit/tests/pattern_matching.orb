// Pattern matching with lazy evaluation

// Definition for the quote function, so orbit2sexpr can handle it.
fn quote(e : ast) = e;

// A function that takes an AST expression and pattern matches on it
// Removed :ast from expr
fn analyzeExpr(expr) = 
  expr is (
    // Add operation
    a + b => (
      println("Found addition operation");
      println("Left operand: " + i2s(eval(a))); 
      println("Right operand: " + i2s(eval(b))); 
      eval(a) + eval(b));
    // Multiply operation
    a * b => (
      println("Found multiplication operation");
      println("Left operand: " + i2s(eval(a))); 
      println("Right operand: " + i2s(eval(b))); 
      eval(a) * eval(b));
    // Integer
    n => (
      println("Found integer: " + i2s(eval(n))); 
      eval(n))
  );

// Test with different expressions
println("Analyzing 5 + 3:");
let result1 = analyzeExpr(quote(5 + 3)); // Added quote
println("Result: " + i2s(result1));

println("\nAnalyzing 2 * 7:");
let result2 = analyzeExpr(quote(2 * 7)); // Added quote
println("Result: " + i2s(result2));

println("\nAnalyzing plain number 42:");
let result3 = analyzeExpr(quote(42));    // Added quote
println("Result: " + i2s(result3));

// Complex expression with nested operations
println("\nAnalyzing complex expression (2 + 3) * 4:");
let result4 = analyzeExpr(quote((2 + 3) * 4)); // Added quote
println("Result: " + i2s(result4))
