// Pattern matching with lazy evaluation

// A function that takes an AST expression and pattern matches on it
fn analyzeExpr(expr : ast) = 
  expr is (
    // Add operation
    a + b => 
      println("Found addition operation"),
      println("Left operand: " + i2s(eval(a))),
      println("Right operand: " + i2s(eval(b))),
      eval(a) + eval(b);
    // Multiply operation
    a * b => 
      println("Found multiplication operation"),
      println("Left operand: " + i2s(eval(a))),
      println("Right operand: " + i2s(eval(b))),
      eval(a) * eval(b);
    // Integer
    n => 
      println("Found integer: " + i2s(eval(n))),
      eval(n)
  );

// Test with different expressions
println("Analyzing 5 + 3:");
let result1 = analyzeExpr(5 + 3);
println("Result: " + i2s(result1));

println("\nAnalyzing 2 * 7:");
let result2 = analyzeExpr(2 * 7);
println("Result: " + i2s(result2));

println("\nAnalyzing plain number 42:");
let result3 = analyzeExpr(42);
println("Result: " + i2s(result3));

// Complex expression with nested operations
println("\nAnalyzing complex expression (2 + 3) * 4:");
let result4 = analyzeExpr((2 + 3) * 4);
println("Result: " + i2s(result4))