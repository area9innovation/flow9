// Test demonstrating the usage of the rewrite library

// Import the rewrite library
import lib/rewrite;

fn quote(e : ast) = e;

// Define algebraic rewrite rules
fn algebraicRules() = [
    prepareRule(
        "Addition Identity", 
        quote(x + 0), 
        quote(x)
    ),
    prepareRule(
        "Multiplication Identity", 
        quote(x * 1), 
        quote(x)
    ),
    prepareRule(
        "Multiplication by Zero", 
        quote(x * 0), 
        quote(0)
    ),
    prepareRule(
        "Distributive Property", 
        quote(x * (y + z)), 
        quote((x * y) + (x * z))
    )
];

// Domain-aware algebraic rules
fn domainAlgebraRules() = [
    prepareRule(
        "Addition Identity in Integer Domain", 
        quote(x + 0), 
        quote(x : Integer)
    ),
    prepareRule(
        "Multiplication Identity in Real Domain", 
        quote(x * 1), 
        quote(x : Real)
    ),
    prepareRule(
        "Zero Product in Complex Domain", 
        quote(x * 0), 
        quote(0 : Complex)
    ),
    prepareRule(
        "Distributive Property in Algebra Domain", 
        quote(x * (y + z)), 
        quote((x * y + x * z) : Algebra)
    )
];

// Simple test of domain-aware rewriting
fn testDomainRewriting() = (
    println("=== DOMAIN-AWARE REWRITING TEST ===\n");
    
    // TEST CASE 1: Simple domain-aware rewriting
    println("TEST CASE 1: Integer Addition Identity");
    let expr1 = quote((a + 0) : Integer);
    let result1 = applyRules(expr1, domainAlgebraRules());
    println("Original: " + prettyOrbit(expr1));
    println("Result: " + prettyOrbit(result1));
    println();
    
    // TEST CASE 2: Multiplicative identity with domain
    println("TEST CASE 2: Real Multiplication Identity");
    let expr2 = quote((x * 1) : Real);
    let result2 = applyRules(expr2, domainAlgebraRules());
    println("Original: " + prettyOrbit(expr2));
    println("Result: " + prettyOrbit(result2));
    println();
    
    // TEST CASE 3: Complex expression with nested domains
    println("TEST CASE 3: Mixed Expressions with Multiple Domains");
    let expr3 = quote(((a * 1) : Real) + ((b * (c + 0)) : Algebra));
    let result3 = applyRules(expr3, domainAlgebraRules());
    println("Original: " + prettyOrbit(expr3));
    println("Result: " + prettyOrbit(result3));
    println();
    
    // TEST CASE 4: Apply rules to fixed point
    println("TEST CASE 4: Fixed Point Rewriting");
    let expr4 = quote((x * 1) * ((y + 0) * (z * 1)));
    let result4 = applyRulesUntilFixedPoint(expr4, algebraicRules(), 5);
    println("Original: " + prettyOrbit(expr4));
    println("Result: " + prettyOrbit(result4));
    println();
    
    // TEST CASE 5: Custom rule application
    println("TEST CASE 5: Custom Rule");
    let customRule = prepareRule(
        "Swap Arguments",
        quote(f(x, y)),
        quote(f(y, x) : Swapped)
    );
    let expr5 = quote(f(a, b));
    let result5 = applyRule(expr5, customRule[0], customRule[1], customRule[2]);
    println("Original: " + prettyOrbit(expr5));
    println("Result: " + prettyOrbit(result5));
    
    "Domain rewrite library test completed"
);

// Run the test
testDomainRewriting()