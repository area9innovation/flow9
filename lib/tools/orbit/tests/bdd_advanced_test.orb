import lib/bdd;

println("=== BDD Advanced Features: Quantification and Model Counting ===\n");

// Setup a test formula: (a && b) || (a && c)
// This represents: a && (b || c)
let test_formula = quote((a && b) || (a && c));
println("Test formula: " + prettyOrbit(test_formula));

// Convert to BDD
let test_bdd = to_bdd(test_formula);
println("\nAs BDD:");
println(prettyOrbit(test_bdd));

// Test variable restriction
println("\n--- Variable Restriction ---");

// Restrict a = true
let a_true = bdd_restrict(test_bdd, quote(a), true);
println("Formula with a=true:");
println(prettyOrbit(a_true));
println("Simplified: " + prettyOrbit(from_bdd(a_true)));
// Expected: b || c

// Restrict b = false
let b_false = bdd_restrict(test_bdd, quote(b), false);
println("\nFormula with b=false:");
println(prettyOrbit(b_false));
println("Simplified: " + prettyOrbit(from_bdd(b_false)));
// Expected: a && c

// Test quantification operations
println("\n--- Quantification Operations ---");

// Existential quantification
println("\n* Existential Quantification *");

// Exists b
let exists_b = bdd_exists(quote(b), test_bdd);
println("∃b.[(a && b) || (a && c)]:");
println(prettyOrbit(exists_b));
println("Simplified: " + prettyOrbit(from_bdd(exists_b)));
// Expected: a (because if a=true, we can always make the formula true by setting b=true)

// Exists a
let exists_a = bdd_exists(quote(a), test_bdd);
println("\n∃a.[(a && b) || (a && c)]:");
println(prettyOrbit(exists_a));
println("Simplified: " + prettyOrbit(from_bdd(exists_a)));
// Expected: b || c (because we need at least one of b or c to be true)

// Universal quantification
println("\n* Universal Quantification *");

// Forall c
let forall_c = bdd_forall(quote(c), test_bdd);
println("∀c.[(a && b) || (a && c)]:");
println(prettyOrbit(forall_c));
println("Simplified: " + prettyOrbit(from_bdd(forall_c)));
// Expected: a && b (because setting c=false requires a&&b to be true)

// Forall a
let forall_a = bdd_forall(quote(a), test_bdd);
println("\n∀a.[(a && b) || (a && c)]:");
println(prettyOrbit(forall_a));
println("Simplified: " + prettyOrbit(from_bdd(forall_a)));
// Expected: false (because setting a=false makes the whole formula false)

// Test model counting
println("\n--- Model Counting ---");

// Original formula (a && b) || (a && c) has 3 variables
let var_count = 3;  // a, b, c
let model_count = bdd_count_models(test_bdd, var_count);
println("Number of satisfying assignments for (a && b) || (a && c): " + i2s(model_count));
// Expected: 3 out of 8 possible assignments (a=1,b=1,c=0 / a=1,b=1,c=1 / a=1,b=0,c=1)

// Test a simple formula: a || b
let simple_formula = quote(a || b);
let simple_bdd = to_bdd(simple_formula);
let simple_count = bdd_count_models(simple_bdd, 2);
println("\nNumber of satisfying assignments for a || b: " + i2s(simple_count));
// Expected: 3 out of 4 possible assignments (a=1,b=0 / a=0,b=1 / a=1,b=1)

// Test another formula: !a && !b
let neg_formula = quote(!a && !b);
let neg_bdd = to_bdd(neg_formula);
let neg_count = bdd_count_models(neg_bdd, 2);
println("\nNumber of satisfying assignments for !a && !b: " + i2s(neg_count));
// Expected: 1 out of 4 possible assignments (a=0,b=0)

// Test finding a satisfying assignment
println("\n--- Finding Satisfying Assignment ---");

let sat_assignment = bdd_find_satisfying_assignment(test_bdd);
println("A satisfying assignment for (a && b) || (a && c): " + prettyOrbit(sat_assignment));
// Expected: Something like {a=true, b=true, c=...} or {a=true, b=..., c=true}

println("\n=== Tests Completed Successfully ===");