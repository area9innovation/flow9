import lib/sort;

// Test case demonstrating evaluateOGraphQuasiquote for rewriting
// Goal: Transform +(2,1,b,a) into +(1,2,a,b) by matching and applying sort
// Uses anti-quotation to evaluate sort but not variables themselves

// Define quote function for AST manipulation
fn quote(e : ast) = e;

// Create a simple ograph for testing
let graph = makeOGraph("eval_test");

println("Testing OGraph quasiquote evaluation for expression rewriting");

// Test the sort function to show it working
let sortTest = sort('[b, a, 4, 2]);
println("\nSort test - sorting [b,a,4,2]: " + prettyOrbit(sortTest));

// Demonstrate quasiquote with sort evaluation using array directly
let sortExpr = '(`($(sort('[b, a, 2, 1]))));
let sortNodeId = addOGraph(graph, sortExpr);

println("\nDirect sort quasiquote: " + prettyOrbit(extractOGraph(graph, sortNodeId)));

let sortEvaluatedId = evaluateOGraphQuasiquote(graph, sortNodeId, false);
let sortEvaluatedExpr = extractOGraph(graph, sortEvaluatedId);

println("Direct sort result: " + prettyOrbit(sortEvaluatedExpr));
