import lib/complex;
import lib/array;
import lib/rewrite;

fn dft_n_k(x,n,k) = (
	unquote(
		quote(
			sum(j, 0, eval(n - 1), x[j] * twiddle(eval(n), j * k))
		), [Pair("n", n), Pair("k", k)]
	)
);

fn dft_n(n) = (
	unquote(
		quote(
			sum(k, 0, eval(n - 1), 
				eval(dft_n_k(x, n, k))
			)
		), [Pair("n", n), Pair("k", quote(k)), Pair("x", quote(x))]	
	)
);

// Helper function to create a twiddle factor w_n^k
fn twiddle(n, k) = (  
    // w_n^k = exp(-i*2*pi*k/n) 
    let theta = -2.0 * 3.14159265358979 * k / n;
    Complex(cos(theta), sin(theta))
);


// Rule 1: Splitting the sum into even and odd indices for even n
fn split_sum_rule() = (
	rules("Split sum", [
		sum(j, 0, n - 1, fun(j)) =>
		sum(j, 0, n/2 - 1, fun(2 * j)) + sum(j, 0, n/2 - 1, fun(2 * j + 1))
		if is_number(n) && n % 2 == 0
	])
);

// Rule 2: Twiddle Factor Symmetry - w_n^(2*j*k) = w_{n/2}^(j*k)
fn twiddle_factor_rule_1() = (
	rules("Twiddle factor symmetry",[
		twiddle(n, 2 * j * k) =>
		twiddle(n/2, j * k)
		if is_number(n) && n % 2 == 0
	])
);

// Rule 3: Twiddle Factor Symmetry - w_n^((2*j+1)*k) = w_n^k * w_n^(2*j*k)
fn twiddle_factor_rule_2() = (
	rules("Twiddle factor symmetry",[
		twiddle(n, (2 * j + 1) * k) =>
		mulC(twiddle(n, k), twiddle(n, 2 * j * k))
		if is_number(n) && n % 2 == 0
	])
);

// Rule 4: Half-period symmetry - w_n^(k+n/2) = -w_n^k
fn half_period_rule() = (
	rules("Half-period symmetry",[
		twiddle(n, k + n/2) =>
		mulC(Complex(-1.0, 0.0), twiddle(n, k))
		if is_number(n) && n % 2 == 0
	])
);

// Rule 5: Periodicity - w_n^(k+n) = w_n^k
fn periodicity_rule() = (
	rules("Periodicity",[
		twiddle(n, k + n) => twiddle(n, k)
	])
);

// Test function to demonstrate DFT optimization rewrites
fn main() = (
    println("=== DFT Optimization Test ===\n");
    
    // Test 1: Basic sum splitting for even n
    let sum_expr = dft_n(8);
    println("Original Sum Expression: " + prettyOrbit(sum_expr));
    
    let split_rules = split_sum_rule();
    let split_result = applyRules(sum_expr, split_rules);
    println("\nAfter Split Sum Rule: " + prettyOrbit(split_result));
    
    // Test 2: Twiddle factor symmetry rules
    let twiddle_expr = quote(twiddle(8, 2 * j * k));
    println("\nTwiddle Factor Expression: " + prettyOrbit(twiddle_expr));
    
    let twiddle_rules = twiddle_factor_rule_1();
    let twiddle_result = applyRules(twiddle_expr, twiddle_rules);
    println("After Twiddle Factor Rule: " + prettyOrbit(twiddle_result));
    
    // Test 3: Half-period symmetry
    let half_period_expr = quote(twiddle(8, k + 4));
    println("\nHalf-Period Expression: " + prettyOrbit(half_period_expr));
    
    let half_period_rules = [half_period_rule()];
    let half_period_result = applyRules(half_period_expr, half_period_rules);
    println("After Half-Period Rule: " + prettyOrbit(half_period_result));
    
    // Test 4: Apply all optimization rules to a DFT expression
    let dft_expr = quote(dft(x, 8, k));
    println("\nOriginal DFT Expression: " + prettyOrbit(dft_expr));
    
    let all_rules = create_dft_rules();
    let optimized_expr = applyRulesUntilFixedPoint(dft_expr, all_rules, 10);
    println("\nFully Optimized Expression: " + prettyOrbit(optimized_expr));
    
    "DFT optimization tests completed."
);

// Run the test
main();