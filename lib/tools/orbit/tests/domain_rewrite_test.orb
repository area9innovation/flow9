// Test case for domain-aware rewriting using ograph_util
fn quote(e : ast) = e;

// Enhanced function to apply a single pattern and replacement to a graph
// Now with domain annotation support
fn applyPatternToGraph(graph, pattern, replacement, ruleName) = (
    println("\nApplying rule: " + ruleName);
    println("Pattern: " + prettyOrbit(pattern));
    println("Replacement: " + prettyOrbit(replacement));
    
    // Apply the pattern match
    let matches = matchOGraphPattern(graph, pattern, \(bindings : ast, eclassId) . (
        println("Match found at ID: " + i2s(eclassId));
        
        // Print bindings for debugging
        println("Bindings: " + prettyOrbit(bindings));
        
        // Step 1: Substitute variables in the replacement
        let substitutedResult = substituteWithBindings(replacement, bindings);
        println("After substitution: " + prettyOrbit(substitutedResult));
        
        // Step 2: Unquote if needed (not actually used in this example)
        // If we had eval() expressions in our template, we would use:
        // let unquotedResult = unquote(substitutedResult, bindings);
        
        // Step 3: Process domain annotations
        let resultId = processDomainAnnotations(graph, substitutedResult);
        println("After processing domain annotations, ID: " + i2s(resultId));
        
        // CRITICAL: Order matters - result first to make it canonical
        let merged = mergeOGraphNodes(graph, resultId, eclassId);
        let status = if merged then "success" else "failed";
        println("Merge result: " + status);
    ));
    
    println("Applied " + i2s(matches) + " matches");
    matches
);

// Function to apply a list of rules to an expression
// Each rule is a triple: [name, pattern, replacement]
fn applyRules(expr, rules) = (
    // Create a new graph 
    let graph = makeOGraph("transform");
    let exprId = addOGraph(graph, expr);
    
    println("Original expression: " + prettyOrbit(expr));
    
    // Helper function to apply rules recursively 
    fn applyRulesRecursive(rules, index, totalMatches) = (
        if index < length(rules) then (
            let rule = rules[index];
            let ruleName = rule[0];
            let pattern = rule[1];
            let replacement = rule[2];
            
            // Apply the rule
            let matches = applyPatternToGraph(graph, pattern, replacement, ruleName);
            
            // Print the current state
            let currentExpr = extractOGraph(graph, exprId);
            println("Expression after this rule: " + prettyOrbit(currentExpr));
            
            // Apply the next rule
            applyRulesRecursive(rules, index + 1, totalMatches + matches)
        ) else (
            // Return total matches when done
            totalMatches
        )
    );
    
    // Apply all rules
    let totalMatches = applyRulesRecursive(rules, 0, 0);
    println("\nTotal matches applied: " + i2s(totalMatches));
    
    // Return the final transformed expression
    let finalResult = extractOGraph(graph, exprId);
    println("Final result: " + prettyOrbit(finalResult));
    finalResult
);

// Create domain-specific algebraic rewrite rules
fn domainAwareRules() = [
    ["Addition Identity in Integer Domain", 
     quote((x + 0) : Integer), 
     quote(x : Integer)],
     
    ["Multiplication Identity in Real Domain", 
     quote((x * 1) : Real), 
     quote(x : Real)],
     
    ["Multiplication by Zero in Complex Domain", 
     quote((x * 0) : Complex), 
     quote(0 : Complex)],
     
    ["Distributive Property in Algebra Domain", 
     quote((x * (y + z)) : Algebra), 
     quote(((x * y) + (x * z)) : Algebra)],
     
    ["Cross-Domain Transformation", 
     quote((x + y) : Integer), 
     quote((x + y) : Number)],
     
    ["Multi-Domain Transformation", 
     quote((x + y) : Integer : Commutative), 
     quote((y + x) : Integer : Commutative : Canonical)]
];

// Test with domain annotations
println("\n--- Domain Annotation Test ---");

// First, test a simple expression with domain
let expr1 = quote((a + 0) : Integer);
let result1 = applyRules(expr1, domainAwareRules());
println("Starting with: " + prettyOrbit(expr1));
println("After all rewrites: " + prettyOrbit(result1));
// Should replace (a + 0) : Integer with a : Integer

// Test a more complex expression with nested domains
let expr2 = quote(((a * 1) : Real) + ((b * (c + d)) : Algebra));
let result2 = applyRules(expr2, domainAwareRules());
println("\nStarting with: " + prettyOrbit(expr2));
println("After all rewrites: " + prettyOrbit(result2));
// Should simplify the Real part to (a : Real) and transform the Algebra part

// Test cross-domain transformation
let expr3 = quote((x + y) : Integer : Commutative);
let result3 = applyRules(expr3, domainAwareRules());
println("\nStarting with: " + prettyOrbit(expr3));
println("After all rewrites: " + prettyOrbit(result3));
// Should transform to (y + x) : Integer : Commutative : Canonical

// Test conditional domain transformation
// Create a function to generate rules with dynamic domain annotations
fn createConditionalDomainRules() = [
    ["Conditional Domain Transfer", 
     quote((x + y) : SourceDomain), 
     quote((x + y) : TargetDomain)],
     
    ["Nested Domain Processing", 
     quote(((x + y) : DomainA) : DomainB), 
     quote((x + y) : DomainA : DomainB : Combined)]
];

// Test conditional domain rules
let expr4 = quote(((a + b) : SourceDomain) * ((c + d) : DomainA) : DomainB);
let result4 = applyRules(expr4, createConditionalDomainRules());
println("\nStarting with: " + prettyOrbit(expr4));
println("After all rewrites: " + prettyOrbit(result4));

// Verify that processDomainAnnotations is working correctly by checking if domains exist
println("\n--- Domain Verification ---");
let g = makeOGraph("verification");

// Add expression with a domain
let id1 = processDomainAnnotations(g, quote((a + b) : Integer));
println("Added (a + b) : Integer with ID: " + i2s(id1));

// Verify the domain exists
let has_integer = findOGraphId(g, quote((a + b) : Integer));
println("findOGraphId((a + b) : Integer) returns: " + i2s(has_integer));

// Add expression with multiple domains through the substitution process
let pattern = quote((x + y) : Domain1);
let replacement = quote((x + y) : Domain1 : Domain2);
let bindings = quote([Pair("x", quote(a)), Pair("y", quote(b))]);

// Step 1: Substitute variables in the replacement
let substituted = substituteWithBindings(replacement, bindings);
println("After substitution: " + prettyOrbit(substituted));

// Step 2: Process domain annotations
let resultId = processDomainAnnotations(g, substituted);
println("After processing domain annotations, ID: " + i2s(resultId));

// Verify multiple domains exist
let has_domain1 = findOGraphId(g, quote((a + b) : Domain1));
let has_domain2 = findOGraphId(g, quote((a + b) : Domain2));
println("findOGraphId((a + b) : Domain1) returns: " + i2s(has_domain1));
println("findOGraphId((a + b) : Domain2) returns: " + i2s(has_domain2));

"Domain rewrite test completed"