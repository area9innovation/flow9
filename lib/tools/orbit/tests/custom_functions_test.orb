// Test custom functions with RunCore support

// Define a factorial function using RunCore operators
fn factorial(n) = n is (
  n => 1 if n <= 1;
  n => n * factorial(n - 1)
);

// Define a custom function that uses string operations
fn formatMessage(name, age) = "Hello, " + name + "! You are " + i2s(age) + " years old.";

// Define a function that manipulates arrays
fn sumHelper(arr, index, acc) = 
    index is (
      i => acc if i >= length(arr);
      i => sumHelper(arr, index + 1, acc + index(arr, index))
    );

fn sumArray(arr) = sumHelper(arr, 0, 0);

// Test the factorial function
let fact5 = factorial(5);
let fact10 = factorial(10);

// Test the string formatting function
let msg = formatMessage("Alice", 30);

// Test the array sum function
let numbers = [5, 10, 15, 20, 25];
let total = sumArray(numbers);

// Higher-order functions (simulated since we don't have map/filter built-in)
fn helper(arr, func, index, result) =
    index is ( 
      i => result if i >= length(arr);
      i => let newResult = result + [func(index(arr, index))];
          helper(arr, func, index + 1, newResult)
	);

fn applyToEach(arr, func) = helper(arr, func, 0, []);

// Double each number
fn double(x) = x * 2;
let doubled = applyToEach(numbers, double);

// Print the results
println("Factorial of 5: " + i2s(fact5));
println("Factorial of 10: " + i2s(fact10));
println("Formatted message: " + msg);
println("Sum of array: " + i2s(total));
println("Original array: " + i2s(numbers));
println("Doubled array: " + i2s(doubled))