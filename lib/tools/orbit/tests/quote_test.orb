// Test for the quote special form
fn quote(a : ast) = a;

// Using quote to capture expressions without evaluation
let expr1 = quote(a + b);
let expr2 = quote(if (x > 0) then true else false);
let expr3 = quote(f(1, 2, 3));

// Print the AST structure of quoted expressions
println("Quote test results:");
println("expr1 AST: " + prettyOrbit(expr1));
println("expr2 AST: " + prettyOrbit(expr2));
println("expr3 AST: " + prettyOrbit(expr3));

// Demonstrate using quote with astname
println("\nAST name for expr1: " + astname(expr1));
println("AST name for expr2: " + astname(expr2));
println("AST name for expr3: " + astname(expr3));

// Now run the original test
import lib/reflect;

// Test to understand the AST structure of logical expressions
println("\n==== AST STRUCTURE TEST ====");

// Test logical expressions and print their AST structure
let expr4 = quote(a && b);
println("Expression: a && b");
println("AST structure: " + astname(expr4));
println("Full AST: " + prettyOrbit(expr4));

let expr5 = quote(a || b);
println("\nExpression: a || b");
println("AST structure: " + astname(expr5));
println("Full AST: " + prettyOrbit(expr5));

let expr6 = quote(!a);
println("\nExpression: !a");
println("AST structure: " + astname(expr6));
println("Full AST: " + prettyOrbit(expr6));