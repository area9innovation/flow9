import lib/logic;
import lib/bdd;  // For comparison with BDD-based conversion

// Test the enhanced logic canonicalization
fn main() = (
    println("==== Testing Enhanced Logic Canonicalization ====");
    
    // Test cases for DNF conversion
    let dnf_test_cases = [
        // Original example
        ["(a ∨ b) ∧ (¬a ∨ c)", quote((a || b) && (!a || c))],
        
        // Basic simplifications
        ["a ∧ (a ∨ b)", quote(a && (a || b))],
        ["(a ∧ b) ∨ (a ∧ c)", quote((a && b) || (a && c))],
        ["a ∨ (a ∧ b)", quote(a || (a && b))],
        
        // Nested expressions
        ["(a ∨ (b ∨ c)) ∧ d", quote((a || (b || c)) && d)],
        ["a ∧ (b ∧ (c ∧ d))", quote(a && (b && (c && d)))],
        
        // Contradictions and tautologies
        ["(a ∧ ¬a) ∨ b", quote((a && !a) || b)],
        ["a ∧ (b ∨ ¬b)", quote(a && (b || !b))],
        
        // Complex cases
        ["(a ∨ b) ∧ (a ∨ c) ∧ (¬a ∨ d)", quote((a || b) && (a || c) && (!a || d))],
        ["(a ∨ b) ∧ (a ∨ ¬b) ∧ (a ∨ c)", quote((a || b) && (a || !b) && (a || c))],
        ["(a ∧ b) ∨ (¬a ∧ b) ∨ (a ∧ ¬b)", quote((a && b) || (!a && b) || (a && !b))]
    ];
    
    // Test cases for CNF conversion
    let cnf_test_cases = [
        // Special CNF pattern
        ["(a ∧ b) ∨ (¬a ∧ c)", quote((a && b) || (!a && c))],
        
        // Basic CNF simplifications
        ["a ∨ (a ∧ b)", quote(a || (a && b))],
        ["(a ∨ b) ∧ (a ∨ c)", quote((a || b) && (a || c))],
        
        // Complex CNF cases
        ["(a ∧ b) ∨ c", quote((a && b) || c)],
        ["a ∨ (b ∧ c)", quote(a || (b && c))],
        ["(a ∨ b) ∧ (a ∨ ¬b) ∧ (a ∨ c)", quote((a || b) && (a || !b) && (a || c))],
        ["(a ∧ b) ∨ (¬a ∧ c) ∨ (a ∧ d)", quote((a && b) || (!a && c) || (a && d))]
    ];
    
    // Test DNF conversion
    println("\n----- DNF Conversion Tests -----");
    fold(dnf_test_cases, 1, \(i, test) -> (
        let name = test[0];
        let expr = test[1];
        println("\nTest " + i2s(i) + ": " + name);
        println("Original: " + prettyOrbit(expr));
		let dnf = to_dnf(expr);
        println("DNF: " + prettyOrbit(dnf));
        
        // Compare with BDD-based conversion for validation
        let bdd_result = from_bdd(to_bdd(expr));
        println("BDD DNF: " + prettyOrbit(bdd_result));
        
        // Check if they're equivalent
        let equivalent = are_equivalent(dnf, expr);
        println("Equivalent to original: " + (if equivalent then "Yes" else "No"));
        
        i + 1
    ));
    
    // Test CNF conversion
    println("\n----- CNF Conversion Tests -----");
    fold(cnf_test_cases, 1, \(i, test) -> (
        let name = test[0];
        let expr = test[1];
        println("\nTest " + i2s(i) + ": " + name);
        println("Original: " + prettyOrbit(expr));
        println("CNF: " + prettyOrbit(to_cnf(expr)));
        
        // Compare with simplified BDD (not true CNF but good for equivalence)
        let bdd_result = from_bdd(to_bdd(expr));
        println("BDD simplified: " + prettyOrbit(bdd_result));
        
        // Check if they're equivalent
        let equivalent = are_equivalent(to_cnf(expr), expr);
        println("Equivalent to original: " + (if equivalent then "Yes" else "No"));
        
        i + 1
    ));
    
    "Done"
);

// Run the tests
main();