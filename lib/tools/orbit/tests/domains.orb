import lib/graph;
import lib/domains;

// Build a graph of all domain relations from lib/domains
// Extract from/to expressions using pattern matching
// Save as DOT file using standard file I/O

// Extract domain relations and build a graph
fn buildDomainGraph() = (
    // Initialize an empty graph
    let graph = makeGraph();
    
	// Process each item in the array
	fold(domains, graph, \g, item -> (
		// Match on the subdomain relation
		item is (
			(from âŠ‚ to) => (
				// Convert AST to string representation for node labels
				let fromStr = prettyOrbit(from);
				let toStr = prettyOrbit(to);
				
				// Add nodes and edge to the graph
				let g1 = addNode(g, fromStr);
				let g2 = addNode(g1, toStr);
				addEdge(g2, fromStr, toStr, "")
			);
			_ => g // Skip non-matching items
		)
	))
);

// Main function - build graph and save to file
fn main() = (
    println("Building domain relation graph...");
    
    // Build the domain graph
    let domainGraph = buildDomainGraph();
    
    // Convert to DOT format (directed graph, with node labels)
    let dotContent = graphToDot(domainGraph, true, true);
    

    // Save to file
    setFileContent("domains.dot", dotContent);
    
    println("Domain graph saved to domains.dot");


	let components = weaklyConnectedComponents(domainGraph);
	println("Weakly connected components:");
	fold(components, "", \acc, component -> (
		println(" - " + prettyOrbit(findComponentSinks(extractSubgraph(domainGraph, component))));
		""
	));
);

// Run the main function
main();