import lib/graph;
import lib/domains;
import lib/domain_utils;

// TODO: For specific instances on the left hand side instead of the general form, we should have a better from edge

// Helper function to remove transitive edges
fn removeTransitiveEdges(graph) = (
    let allEdges = getAllEdges(graph);
    
    // For each edge a->c, if there exists paths a->b and b->c, remove a->c
    fold(allEdges, graph, \g, edge -> (
        edge is (
            Edge(from, to, _) => (
                // Get all nodes reachable from 'from' in one step
                let directNeighbors = getNeighbors(g, from);
                
                // For each neighbor, check if 'to' is reachable
                let hasIndirectPath = fold(directNeighbors, false, \found, neighbor -> (
                    if (found || neighbor == to) then (
                        found  // Already found a path or this is the direct edge
                    ) else (
                        // Check if 'to' is reachable from this neighbor
                        isReachable(g, neighbor, to)
                    )
                ));
                
                // Remove edge only if there's an indirect path and this isn't the only path
                if (hasIndirectPath && length(directNeighbors) > 1) then (
                    removeEdge(g, from, to)
                ) else (
                    g  // Keep the edge
                )
            )
        )
    ))
);

// Function to get the estimated size of a tree (number of entries)
fn size(tree) = (
    let entries = getEntries(tree);
    length(entries)
);

// Main function - build graph and save to file
fn main() = (
    println("Building smart domain relation graph...");
    
    // Build the smart domain graph
    let domainGraph = buildDomainGraph(domains);
    
    // Convert to DOT format (directed graph, with node labels)
    let dotContent = graphToDot(domainGraph, true, true);
    
    // Save to file
    setFileContent("smart_domains.dot", dotContent);
    
    println("Smart domain graph saved to smart_domains.dot");
    
    // Find connected components to identify domain hierarchies
    let components = weaklyConnectedComponents(domainGraph);
    println("Found " + i2s(length(components)) + " domain hierarchies");

	if false && length(components) > 1 then (
		// For each component, find the most general domain (sink node)
		println("Domain hierarchies and their most general domains:");
		iteri(components, \index, component -> (
			// Create a subgraph for this component
			let subgraph = extractSubgraph(domainGraph, component);
			
			// Find sink nodes (nodes with no outgoing edges) - these are the most general domains
			let sinks = findComponentSinks(subgraph, component);
			
			println("Hierarchy #" + i2s(index + 1) + " (" + i2s(length(component)) + " domains):");
			println("  Root domains: " + prettyOrbit(sinks));
			
			// Find source nodes (domains with no incoming edges) - these are the most specific domains
			let sources = findComponentSources(subgraph, component);
			println("  Leaf domains: " + prettyOrbit(sources));
			println("");
		));
	) else 0
);

// Run the main function
main();