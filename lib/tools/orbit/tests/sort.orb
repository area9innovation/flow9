import lib/sort;

// Define some structures for testing
fn createPerson(name, age) = Person(name, age);
fn createPoint(x, y) = Point(x, y);

// Helper function to calculate distance from origin
fn distanceFromOrigin(point) = (
    point is (
        Point(x, y) => sqrt(x * x + y * y);
        _ => 0.0
    )
);

// Main function to run tests
fn main() = (
    println("Stable Merge Sort Implementation");
    println("==============================\n");
   
    // Test 1: Small array
    println("Test 1: Small array");
    println("------------------");
    let arr1 = [3, 1, 4, 2];
    println("Original: " + prettyOrbit(arr1));
    println("Sorted:   " + prettyOrbit(sort(arr1)));
    println("");
    
    // Test 2: Array with duplicates to demonstrate stability
    println("Test 2: Array with duplicates (demonstrating stability)");
    println("------------------------------------------------");
    let arr2 = [3, 1, 3, 2];
    println("Original: " + prettyOrbit(arr2));
    println("Sorted:   " + prettyOrbit(sort(arr2)));
    println("In the sorted result, the first 3 should be from position 0");
    println("and the second 3 should be from position 2 (stable sort property).");
    println("");
    
    // Test 3: Edge cases
    println("Test 3: Edge cases");
    println("------------------");
    println("Empty array: " + prettyOrbit([]));
    println("Sorted:      " + prettyOrbit(sort([])));
    println("Single element: " + prettyOrbit([42]));
    println("Sorted:         " + prettyOrbit(sort([42])));
    println("");
    
    // Test 4: Already sorted array
    println("Test 4: Already sorted");
    println("---------------------");
    let arr4 = [1, 2, 3];
    println("Original: " + prettyOrbit(arr4));
    println("Sorted:   " + prettyOrbit(sort(arr4)));
    println("");
    
    // Test 5: Custom comparison function (descending order)
    println("Test 5: Custom comparison function (descending order)");
    println("--------------------------------------------------");
    let arr5 = [3, 1, 4, 2];
    println("Original: " + prettyOrbit(arr5));
    let descendingCmp = \(l, r).r <= l;
    println("Sorted descending: " + prettyOrbit(mergeSort(arr5, descendingCmp)));
    println("");
    
    // Test 6: Sort Person objects by age
    println("Test 6: Sort Person objects by age");
    println("-------------------------------");
    let people = [
        createPerson("Alice", 30),
        createPerson("Bob", 25),
        createPerson("Charlie", 35),
        createPerson("Diana", 28)
    ];
    println("Original people:");
    println(prettyOrbit(people));
    
    // Sort people by age
    let sortByAge = \(l, r).(
        l is (
            Person(_, age1) => r is (
                Person(_, age2) => age1 <= age2
            )
        )
    );
    println("\nSorted by age:");
    println(prettyOrbit(mergeSort(people, sortByAge)));
    
    // Sort people by name
    println("\nTest 7: Sort Person objects by name");
    println("--------------------------------");
    let sortByName = \(l, r).(
        l is (
            Person(name1, _) => r is (
                Person(name2, _) => name1 <= name2
            )
        )
    );
    println("Sorted by name:");
    println(prettyOrbit(mergeSort(people, sortByName)));
    
    // Test 8: Sort Point objects by distance from origin
    println("\nTest 8: Sort Point objects by distance from origin");
    println("------------------------------------------------");
    let points = [
        createPoint(3, 4),   // distance = 5
        createPoint(1, 2),   // distance = 2.236
        createPoint(5, 12),  // distance = 13
        createPoint(2, 2)    // distance = 2.828
    ];
    println("Original points:");
    println(prettyOrbit(points));
    
    let sortByDistance = \(l, r).(distanceFromOrigin(l) <= distanceFromOrigin(r));
    println("\nSorted by distance from origin:");
    println(prettyOrbit(mergeSort(points, sortByDistance)));
    
    // Test 9: Sort strings by length
    println("\nTest 9: Sort strings by length");
    println("-----------------------------");
    let strings = ["apple", "banana", "cherry", "date", "elderberry"];
    println("Original strings:");
    println(prettyOrbit(strings));
    
    let sortByLength = \(l, r).(strlen(l) <= strlen(r));
    println("\nSorted by length:");
    println(prettyOrbit(mergeSort(strings, sortByLength)))
);

// Execute the main function
main();