// Stable Merge Sort implementation in Orbit

// Merge function that merges two sorted arrays
// The stability is maintained by using <= instead of <
// This ensures that elements from the left array are selected first when equal
fn merge(a, b) = (
    if length(a) = 0 then b
    else if length(b) = 0 then a
    else (
        if a[0] <= b[0] then
            [a[0]] + merge(subrange(a, 1, length(a) - 1), b)
        else
            [b[0]] + merge(a, subrange(b, 1, length(b) - 1))
    )
);

// Merge sort implementation
fn mergeSort(arr) = (
    if length(arr) <= 1 then arr
    else (
        let mid = length(arr) / 2;
        let left = mergeSort(subrange(arr, 0, mid));
        let right = mergeSort(subrange(arr, mid, length(arr) - mid));
        merge(left, right)
    )
);

// Main function to run tests
fn main() = (
    println("Stable Merge Sort Implementation");
    println("==============================\n");
   
    // Test 1: Small array
    println("Test 1: Small array");
    println("------------------");
    let arr1 = [3, 1, 4, 2];
    println("Original: " + prettyOrbit(arr1));
    println("Sorted:   " + prettyOrbit(mergeSort(arr1)));
    println("");
    
    // Test 2: Array with duplicates to demonstrate stability
    println("Test 2: Array with duplicates (demonstrating stability)");
    println("------------------------------------------------");
    let arr2 = [3, 1, 3, 2];
    println("Original: " + prettyOrbit(arr2));
    println("Sorted:   " + prettyOrbit(mergeSort(arr2)));
    println("In the sorted result, the first 3 should be from position 0");
    println("and the second 3 should be from position 2 (stable sort property).");
    println("");
    
    // Test 3: Edge cases
    println("Test 3: Edge cases");
    println("------------------");
    println("Empty array: " + prettyOrbit([]));
    println("Sorted:      " + prettyOrbit(mergeSort([])));
    println("Single element: " + prettyOrbit([42]));
    println("Sorted:         " + prettyOrbit(mergeSort([42])));
    println("");
    
    // Test 4: Already sorted array
    println("Test 4: Already sorted");
    println("---------------------");
    let arr4 = [1, 2, 3];
    println("Original: " + prettyOrbit(arr4));
    println("Sorted:   " + prettyOrbit(mergeSort(arr4)))
);

// Execute the main function
main();