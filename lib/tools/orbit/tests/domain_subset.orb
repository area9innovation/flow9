import lib/rewrite;
import lib/reflect;

let program1 = '(if x > 5 then x * 2 else if x > 0 then x / 2 else x);

let program2 = '(42);
let program3 = '(if true then 1 else 2);

let program = program2;

let type_inference_rules = '[	
	n !: (Int(bw)) => n : (Int(32)) if isInt(n),
	Int(n) ⊂ Integer,
 	Int(n) ⊂ UInt(n - 1) && n >= 0, // TODO: We do not do unquoting in the domains yet
];

let withTypes = applyRulesUntilFixedPoint(program, type_inference_rules, 5);
withTypes is (Triple(ex, og, g) -> (
	// TODO: Extract the domains for ex
	println(ex);
	setFileContent("types.dot", ograph2dot(og));
	println("Done");
));
