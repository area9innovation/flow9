// Test the prettyOrbit function

// Using the ast annotation, we quote the argument
fn quote(a : ast) = a;

println("Testing prettyOrbit function");

// Create some expressions
let expr1 = quote(10 - 20);
let expr2 = quote(x + 2);

// Print them using prettyOrbit
println("\nExpression 1: " + prettyOrbit(expr1));
println("Expression 2: " + prettyOrbit(expr2));

// Create a graph
let graph = makeOGraph("pretty_test");

// Add nodes to the graph
let nodeId1 = addNodeToOGraph(graph, "math", expr1);
let nodeId2 = addNodeToOGraph(graph, "math", expr2);

println("\nAdded nodes with IDs: " + i2s(nodeId1) + ", " + i2s(nodeId2));

// Print the graph
println("\nGraph contents:");
printOGraph(graph);

// Extract a node and print it
let extracted = extractOGraphNode(graph, nodeId1);
println("\nExtracted node: " + prettyOrbit(extracted));

println("\nDone!")