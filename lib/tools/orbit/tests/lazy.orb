// Lazy evaluation test

// Define a function that takes an ast parameter (won't be evaluated until explicitly done)
fn delayedEval(expr : ast) = 
  println("Evaluating the expression"),
  eval(expr);

// Define a function that would cause side effects when evaluated
fn sideEffect() = 
  println("Side effect executed!"),
  42;

// Test 1: Call with lazily evaluated expression
println("Test 1: Should NOT see side effect until eval");
let result1 = delayedEval(sideEffect());
println("Result: " + i2s(result1));

// Test 2: Demonstrate conditional evaluation
fn conditionalEval(condition : bool, trueExpr : ast, falseExpr : ast) =
  condition is (
    c => 
      println("Evaluating true expression"),
      eval(trueExpr)
    if c;
    c => 
      println("Evaluating false expression"),
      eval(falseExpr)
  );

println("\nTest 2: Conditional evaluation, should only see one side effect");
let result2 = conditionalEval(true, sideEffect(), sideEffect());
println("Result: " + i2s(result2));

// Test 3: Delayed arithmetic
fn lazyAdd(a : ast, b : ast) = 
  println("Adding numbers"),
  eval(a) + eval(b);

println("\nTest 3: Lazy arithmetic, evaluations in order");
let result3 = lazyAdd(
  println("Computing first value"),
  10,
  println("Computing second value"),
  32
);
println("Result: " + i2s(result3))