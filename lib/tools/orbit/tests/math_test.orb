// Test suite demonstrating simplification and canonicalization of various mathematical expressions
// using the Orbit OGraph system. Assumes relevant rewrite rules from math libraries are loaded.

import lib/array;
import lib/rewrite;
import lib/complex; // For 'i' and Complex constructor if needed directly
// Other imports might be needed depending on how rules are structured/loaded

// --- Helper Function to Simplify and Print ---
fn simplify_and_print(label, expr) = (
    println("--- " + label + " ---");
    println("Original:     " + prettyOrbit(expr));
    // Apply simplification rules (assuming they are loaded into all_math_rules)
    // Increase iterations for complex cases
    let simplified = applyRulesUntilFixedPoint(expr, all_math_rules, 50);
    println("Simplified:   " + prettyOrbit(simplified));
    println("");
);

// --- List of Test Expressions ---

let test_expressions = [
    // --- Basic Algebra ---
    Pair("Basic Arithmetic 1", quote(5 + 3 * 2 - 1)),
    Pair("Basic Arithmetic 2", quote(0 + x + 1 * y - 0)),
    Pair("Associativity Add", quote(a + (b + c))), // Should canonicalize to (a+b)+c or (+ a b c)
    Pair("Associativity Mul", quote((a * b) * c)), // Should canonicalize to a*(b*c) or (* a b c)
    Pair("Commutativity Add", quote(b + a)),       // Should canonicalize to a+b (if a<b)
    Pair("Commutativity Mul", quote(y * x)),       // Should canonicalize to x*y (if x<y)
    Pair("Distributivity 1", quote(a * (b + c))),
    Pair("Distributivity 2", quote((x + y) * z)),
    Pair("Subtraction Def", quote(a - b)),
    Pair("Double Negative", quote(-(-a))),
    Pair("Negative Multiplication", quote((-a) * (-b))),
    Pair("Zero Product", quote(x * 0)),

    // --- Polynomials (Requires GLEX rules from polynomials.orb) ---
    Pair("Polynomial Collect 1", quote(3*x*y + 2*y*x + 5)), // Expect 5*x*y + 5
    Pair("Polynomial Collect 2", quote(x^2 + 3*x + 2*x^2 - x)), // Expect 3*x^2 + 2*x
    Pair("Polynomial GLEX Order 1", quote(z + y^2 + x^3)), // Expect x^3 + y^2 + z
    Pair("Polynomial GLEX Order 2", quote(c*a + b*a + a^2)), // Expect a^2 + a*b + a*c (factor sort)
    Pair("Polynomial Distribute", quote(x * (y + z^2))),

    // --- Calculus (Symbolic Differentiation - requires diff rules) ---
    Pair("Simple Derivative", quote(diff(x^2 + 3*x + 5, x))), // Expect 2*x + 3
    Pair("Product Rule Derivative", quote(diff(x * sin(x), x))), // Expect 1*sin(x) + x*cos(x)
    Pair("Chain Rule Derivative", quote(diff(cos(x^3), x))), // Expect -sin(x^3) * 3*x^2
    Pair("Constant Derivative", quote(diff(10, x))), // Expect 0

    // --- Calculus (Symbolic Integration - requires integration rules, might be complex) ---
    Pair("Simple Integral", quote(integrate(2*x + 3, x))), // Expect x^2 + 3*x + C (Constant C handling needed)
    Pair("Power Rule Integral", quote(integrate(x^3, x))), // Expect x^4 / 4 + C

    // --- Complex Numbers (Requires rules from complex.orb and math.orb) ---
    Pair("Complex Addition", quote(Complex(1.0, 2.0) + Complex(3.0, -1.0))), // Expect Complex(4.0, 1.0)
    Pair("Complex Multiplication", quote(Complex(2.0, 1.0) * Complex(1.0, 3.0))), // Expect Complex(-1.0, 7.0)
    Pair("Imaginary Unit Squared", quote(i * i)), // Expect Complex(-1.0, 0.0) or -1.0
    Pair("Complex Conjugate", quote(conjugateC(Complex(4.0, 5.0)))), // Expect Complex(4.0, -5.0)
    Pair("Euler's Formula", quote(expC(i * pi))), // Expect Complex(-1.0, 0.0) or -1.0
    Pair("Complex Real Check", quote(Complex(5.0, 0.0))), // Expect 5.0
    Pair("Magnitude Squared", quote(magnitudeC(Complex(3.0, 4.0))^2)), // Expect 25.0 (via z*conj(z) rule?)

    // --- Linear Algebra (Matrices/Vectors - requires linalg.orb rules) ---
    Pair("Matrix Transpose", quote(transposeM(transposeM(A)))), // Expect A
    Pair("Matrix Distributivity", quote(A * (B + C))), // Expect A*B + A*C
    Pair("Transpose Product", quote(transposeM(A * B))), // Expect B^T * A^T (needs explicit transpose func)
    Pair("Matrix Identity Mul", quote(matrix_multiply(A, identityMatrix(n)))), // Needs identityMatrix function

    // --- Number Theory (Requires number_theory.orb rules) ---
    Pair("Modular Exponentiation", quote(modPow(3, 5, 7))), // 3^5 mod 7 = 243 mod 7 = 5
    Pair("Fermat's Little Theorem", quote(modPow(2, 11, 11))), // Expect 2 % 11 = 2 (if rule loaded)
    Pair("GCD Euclidean", quote(gcd(48, 18))), // Expect 6

    // --- Trigonometry (Requires rules from math.orb) ---
    Pair("Pythagorean Identity", quote(cos(theta)^2 + sin(theta)^2)), // Expect 1.0
    Pair("Double Angle Sin", quote(sin(2.0 * alpha))), // Expect 2.0*sin(alpha)*cos(alpha)
    Pair("Angle Sum Cos", quote(cos(x + y))), // Expect cos(x)*cos(y) - sin(x)*sin(y)
    Pair("Cos Neg Arg", quote(cos(-z))), // Expect cos(z)
    Pair("Exp/Trig Connection", quote(expC(i * x) + expC(-i * x))), // Expect 2.0 * cos(x) (via complex arithmetic)

    // --- Limits (Requires limit rules from math.orb) ---
    Pair("Limit Simple", quote(limit(1.0 / k, k, infinity))), // Expect 0.0
    Pair("Limit Sum", quote(limit(5 + 1.0/k, k, infinity))), // Expect 5.0

    // --- Mixed Expressions ---
    Pair("Mixed Trig/Poly", quote(diff(sin(x^2), x))), // Expect cos(x^2)*2*x
    Pair("Mixed Complex/Exp", quote(logC(expC(Complex(1.0, pi/4.0))))) // Expect Complex(1.0, pi/4.0)
];

// --- Run the Tests ---
println("Comprehensive Math Simplification Tests");
println("=====================================\\n");

iter(test_expressions, \pair -> (
    pair is (Pair(label, expr) => simplify_and_print(label, expr))
));

println("\\n--- Tests Complete ---");
