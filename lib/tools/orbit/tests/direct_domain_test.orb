// Direct test of domain-related functions in OGraph

// Define quote
fn quote(e : ast) = e;

// Create a graph
let g = makeOGraph("direct_domain_test");

// Create some expressions
let a_id = addOGraph(g, quote(a));
let b_id = addOGraph(g, quote(b));
let sum_id = addOGraph(g, quote(a + b));
let alg_id = addOGraph(g, quote(Algebra));

// Add domain annotation
println("Adding domain Algebra to a + b");
let add_result = addDomainToNode(g, sum_id, alg_id);
println("Domain added successfully: " + i2s(b2i(add_result)));

// Test domain membership directly
println("\nTesting domain membership directly:");
let belongs = onodeBelongsTo(g, sum_id, alg_id);
println("a + b belongs to Algebra: " + i2s(b2i(belongs)));

// Test structural equality
println("\nTesting structural equality:");
let sum2_id = addOGraph(g, quote(a + b));
let structEqual = nodesStructurallyEqual(g, sum_id, sum2_id);
println("a + b structurally equals second a + b: " + i2s(b2i(structEqual)));

// Test our ability to find nodes in the graph
println("\nTesting direct node search:");
let nodeIds = [a_id, b_id];
let plusNode = onodeBelongsTo(g, sum_id, alg_id);
println("Found node: " + i2s(b2i(plusNode)));

println("\nDomain functions test completed");
"Direct domain test completed"