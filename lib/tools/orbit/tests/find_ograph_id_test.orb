// Test of findOGraphId function in the OGraph runtime

// Define quote for AST manipulation
fn quote(e : ast) = e;

// Create a test graph
let g = makeOGraph("find_id_test");

// Insert various expressions into the graph and store their IDs
println("Inserting expressions into the graph...");
let expr1 = quote(a + b);
let expr2 = quote(x * y);
let expr3 = quote(if p then q else r);
let expr4 = quote((a + b) * (c - d));

let id1 = addOGraph(g, expr1);
let id2 = addOGraph(g, expr2);
let id3 = addOGraph(g, expr3);
let id4 = addOGraph(g, expr4);

println("Expression 1: " + prettyOrbit(expr1) + " -> ID: " + i2s(id1));
println("Expression 2: " + prettyOrbit(expr2) + " -> ID: " + i2s(id2));
println("Expression 3: " + prettyOrbit(expr3) + " -> ID: " + i2s(id3));
println("Expression 4: " + prettyOrbit(expr4) + " -> ID: " + i2s(id4));

// Test findOGraphId function
println("\nTesting findOGraphId function...");

// Find each expression by value
let found_id1 = findOGraphId(g, expr1);
let found_id2 = findOGraphId(g, expr2);
let found_id3 = findOGraphId(g, expr3);
let found_id4 = findOGraphId(g, expr4);

// Check if the found IDs match the original IDs
println("Looking for: " + prettyOrbit(expr1));
println("Original ID: " + i2s(id1) + ", Found ID: " + i2s(found_id1));
println("Match: " + i2s(b2i(id1 == found_id1)));

println("Looking for: " + prettyOrbit(expr2));
println("Original ID: " + i2s(id2) + ", Found ID: " + i2s(found_id2));
println("Match: " + i2s(b2i(id2 == found_id2)));

println("Looking for: " + prettyOrbit(expr3));
println("Original ID: " + i2s(id3) + ", Found ID: " + i2s(found_id3));
println("Match: " + i2s(b2i(id3 == found_id3)));

println("Looking for: " + prettyOrbit(expr4));
println("Original ID: " + i2s(id4) + ", Found ID: " + i2s(found_id4));
println("Match: " + i2s(b2i(id4 == found_id4)));

// Test expression that wasn't added to the graph
let expr5 = quote(foo(bar, baz));
let found_id5 = findOGraphId(g, expr5);
println("\nLooking for expression not in graph: " + prettyOrbit(expr5));
println("Found ID: " + i2s(found_id5) + " (should be 0 or negative if not found)");

// Extract expressions using the found IDs
println("\nExtracting expressions using found IDs...");

if (found_id1 > 0) then (
    let extracted1 = extractOGraph(g, found_id1);
    println("Extracted from ID " + i2s(found_id1) + ": " + prettyOrbit(extracted1));
    println("Matches original: " + i2s(b2i(prettyOrbit(extracted1) == prettyOrbit(expr1))))
) else 0;

if (found_id2 > 0) then (
    let extracted2 = extractOGraph(g, found_id2);
    println("Extracted from ID " + i2s(found_id2) + ": " + prettyOrbit(extracted2));
    println("Matches original: " + i2s(b2i(prettyOrbit(extracted2) == prettyOrbit(expr2))))
) else 0;

if (found_id3 > 0) then (
    let extracted3 = extractOGraph(g, found_id3);
    println("Extracted from ID " + i2s(found_id3) + ": " + prettyOrbit(extracted3));
    println("Matches original: " + i2s(b2i(prettyOrbit(extracted3) == prettyOrbit(expr3))))
) else 0 ;

if (found_id4 > 0) then (
    let extracted4 = extractOGraph(g, found_id4);
    println("Extracted from ID " + i2s(found_id4) + ": " + prettyOrbit(extracted4));
    println("Matches original: " + i2s(b2i(prettyOrbit(extracted4) == prettyOrbit(expr4))))
) else 0 ;

// Try adding an expression, finding it, modifying it, then finding it again
println("\nTesting with modified expressions...");

// Add a simple expression
let expr6 = quote(foo(1, 2));
let id6 = addOGraph(g, expr6);
println("Added: " + prettyOrbit(expr6) + " -> ID: " + i2s(id6));

// Find it
let found_id6 = findOGraphId(g, expr6);
println("Found ID: " + i2s(found_id6));

// Add a modified version of the same expression
let expr6_mod = quote(foo(1, 3));  // Changed second parameter
let id6_mod = addOGraph(g, expr6_mod);
println("Added modified: " + prettyOrbit(expr6_mod) + " -> ID: " + i2s(id6_mod));

// Try to find both expressions
let found_id6_again = findOGraphId(g, expr6);
let found_id6_mod = findOGraphId(g, expr6_mod);
println("Found original: ID " + i2s(found_id6_again));
println("Found modified: ID " + i2s(found_id6_mod));

// Extract and verify
if (found_id6_again > 0) then (
    let extracted6 = extractOGraph(g, found_id6_again);
    println("Extracted original: " + prettyOrbit(extracted6))
) else 0;

if (found_id6_mod > 0) then (
    let extracted6_mod = extractOGraph(g, found_id6_mod);
    println("Extracted modified: " + prettyOrbit(extracted6_mod))
) else 0;

// Test with complex expressions
println("\nTesting with complex domain expressions");

// Add complex function call expressions
let type_expr = quote(Type("number"));
let group_expr = quote(Group(a + b));

let type_id = addOGraph(g, type_expr);
let group_id = addOGraph(g, group_expr);

println("Added Type(\"number\") with ID: " + i2s(type_id));
println("Added Group(a + b) with ID: " + i2s(group_id));

// Find these complex expressions
let found_type_id = findOGraphId(g, type_expr);
let found_group_id = findOGraphId(g, group_expr);

println("\nLooking for complex expressions:");
println("Type(\"number\") -> Original ID: " + i2s(type_id) + ", Found ID: " + i2s(found_type_id));
println("Match: " + i2s(b2i(type_id == found_type_id)));

println("Group(a + b) -> Original ID: " + i2s(group_id) + ", Found ID: " + i2s(found_group_id));
println("Match: " + i2s(b2i(group_id == found_group_id)));

// Extract and verify the complex expressions
if (found_type_id > 0) then (
    let extracted_type = extractOGraph(g, found_type_id);
    println("\nExtracted Type(\"number\"): " + prettyOrbit(extracted_type));
    println("Matches original: " + i2s(b2i(prettyOrbit(extracted_type) == prettyOrbit(type_expr))))
) else 0;

if (found_group_id > 0) then (
    let extracted_group = extractOGraph(g, found_group_id);
    println("Extracted Group(a + b): " + prettyOrbit(extracted_group));
    println("Matches original: " + i2s(b2i(prettyOrbit(extracted_group) == prettyOrbit(group_expr))))
) else 0;

"findOGraphId test completed"