// Demo of OGraph functionality

// Create a new ograph
let graph = makeOGraph("demo");
println("Created ograph: " + graph);

// Create some expressions to add to the graph

// Add simple expression: 2 + 3
let expr1 = 2 + 3;
let node1 = addNodeToOGraph(graph, "math", expr1);
println("Added node: " + i2s(node1));

// Add another expression: x * y
let expr2 = x * y;
let node2 = addNodeToOGraph(graph, "math", expr2);
println("Added node: " + i2s(node2));

// Add a domain annotation
let addDomain1 = addDomainToNode(graph, node1, "Algebra");
println("Added domain: " + b2s(addDomain1));

// Add another domain annotation
let addDomain2 = addDomainToNode(graph, node2, "Algebra");
println("Added domain: " + b2s(addDomain2));

// Add another domain annotation to the same node
let addDomain3 = addDomainToNode(graph, node2, "Sâ‚‚");  // Symmetric group of order 2
println("Added domain: " + b2s(addDomain3));

// Print the graph
println("\nGraph before merging:");
printOGraph(graph);

// Create and add a new expression to merge with an existing one
let expr3 = 2 + 3;  // Same as expr1
let node3 = addNodeToOGraph(graph, "math", expr3);
println("Added redundant node: " + i2s(node3));

// Merge the nodes
let merged = mergeOGraphNodes(graph, node1, node3);
println("Merged nodes: " + b2s(merged));

// Print the graph after merging
println("\nGraph after merging:");
printOGraph(graph);

// Extract a node back to an Orbit expression
let extracted = extractOGraphNode(graph, node1);
println("\nExtracted node " + i2s(node1) + " as expression: " + i2s(eval(extracted)));

// Create a more complex expression for pattern matching demo
let pattern = a + b : ast;
let node4 = addNodeToOGraph(graph, "pattern", pattern);
println("\nAdded pattern node: " + i2s(node4));

// Print the final graph
println("\nFinal graph:");
printOGraph(graph)