// Test for the astname operation

fn quote(e : ast) = e;

// Test different AST node types
let a = 42;
let b = 3.14;
let c = "Hello";
let d = true;
let e = [1, 2, 3];
let f = a + b;
let g = -a;
let h = add(a, b);  // Function call

// Print the AST name for each expression
println("AST name for integer: " + astname(a));
println("AST name for double: " + astname(b));
println("AST name for string: " + astname(c));
println("AST name for boolean: " + astname(d));
println("AST name for array: " + astname(e));
println("AST name for binary operation: " + astname(f));
println("AST name for unary operation: " + astname(g));
println("AST name for function call: " + astname(h));
println("AST name for function call: " + astname(quote(a+b)));

// Now we can implement type predicates in Orbit
fn is_var(x) = (astname(x) == "Variable" || astname(x) == "Identifier");
fn is_number(x) = (astname(x) == "Int" || astname(x) == "Double");
fn is_string(x) = (astname(x) == "String");
fn is_bool(x) = (astname(x) == "Bool");

// Test the predicates
println("is_var(a): " + is_var(a));
println("is_var(b): " + is_var(b));
println("is_number(a): " + is_number(a));
println("is_number(c): " + is_number(c));
println("is_string(c): " + is_string(c));
println("is_string(d): " + is_string(d));
println("is_bool(d): " + is_bool(d));
println("is_bool(a): " + is_bool(a));

// We can also use pattern matching with type checks
fn describe(x) = (
    if (is_number(x)) then "Number: " + prettyOrbit(x)
    else if (is_string(x)) then "String: " + prettyOrbit(x)
    else if (is_bool(x)) then "Boolean: " + prettyOrbit(x)
    else if (is_var(x)) then "Variable: " + prettyOrbit(x)
    else "Other: " + prettyOrbit(x)
);

println(describe(a));
println(describe(c));
println(describe(d));

// Demonstrate with complex pattern matching
fn process(expr) = (
    expr is (
        x => x * 2 if is_number(x) ; // Double numbers
        x => x + "!" if is_string(x) ; // Add exclamation to strings
        x => !x if is_bool(x) ; // Negate booleans
        _ => expr; // Keep other expressions as-is
    )
);

println(process(42));
println(process("Hello"));
println(process(true));