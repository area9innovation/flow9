import lib/rule_ordering;
import lib/domains;

// Test function with sample rules
fn testRuleOrdering() = (
    // Build the domain graph
    let domainGraph = buildDomainGraph(domains);
    
    // Build the domain order tree
    let domainOrderInfo = buildDomainOrderTree(domainGraph);
    
    // Define test rules as quoted strings for parsing
    let testRules = '[
        // Rule for Real (most general)
        a : Real + b : Real -> (a + b) : Real,
        
        // Rule for Integer (medium general)
        a : Integer + b : Integer -> (a + b) : Integer,
        
        // Rule for UInt(32) (specific)
        a : UInt(32) + b : UInt(32) -> (a + b) : UInt(32),
        
        // Rule for Int(5) (specific)
        a : Int(5) + b : Int(5) -> (a + b) : Int(5),
        
        // Rule for Complex (general)
        a : Complex + b : Complex -> (a + b) : Complex
    ];
    
    println("Original rules order:");
    iteri(testRules, \i, rule -> (
        println(i2s(i+1) + ". " + rule)
    ));
    
    // Order the rules
    let orderedRules = orderRulesByDomainSpecificity(testRules, domainOrderInfo);
    
    // Print the result
    println("\nOrdered rules by domain specificity (most specific first):");
    iteri(orderedRules, \i, rule -> (
        println(i2s(i+1) + ". " + rule)
    ));
    
    // Return the ordered rules
    orderedRules
);

// Function to test rule application
fn testRuleApplication() = (
    // Build the domain graph
    let domainGraph = buildDomainGraph(domains);
    
    // Build the domain order tree
    let domainOrderInfo = buildDomainOrderTree(domainGraph);
    
    // Define more practical test rules
    let testRules = '[
        // Generic rule for any number
        n : Real -> n * 2.0 : Real,
        
        // More specific rule for integers
        n : Integer -> n + 10 : Integer,
        
        // Most specific rule for UInt(32)
        n : UInt(32) -> n - 5 : UInt(32)
    ];
    
    // Order the rules
    let orderedRules = orderRulesByDomainSpecificity(testRules, domainOrderInfo);
    
    println("\nTest with more practical rules:");
    println("Rules in order of specificity:");
    iteri(orderedRules, \i, rule -> (
        println(i2s(i+1) + ". " + rule)
    ));
    
    // In a real application, UInt(32) rule would be applied first,
    // then Integer, then Real
    println("\nExpected application sequence for a UInt(32) value:");
    println("1. Apply UInt(32) rule: n - 5");
    println("2. Apply Integer rule: n + 10");
    println("3. Apply Real rule: n * 2.0");
);

// Main function to run the tests
fn main() = (
    println("Testing rule ordering by domain specificity...");
    testRuleOrdering();
    testRuleApplication();
    println("\nTest completed. We've successfully ordered rules from most specific to most general.");
    0
);

main();