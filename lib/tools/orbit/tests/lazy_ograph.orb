// Demo combining lazy evaluation and ograph manipulation

// Define a rewriter function that takes an AST and applies simplification rules
fn simplifyAST(expr : ast) = 
  println("Applying simplification rules to AST"),
  expr is (
    a + 0 => 
      println("Rule applied: a + 0 => a"),
      a;
    0 + a => 
      println("Rule applied: 0 + a => a"),
      a;
    a * 1 => 
      println("Rule applied: a * 1 => a"),
      a;
    1 * a => 
      println("Rule applied: 1 * a => a"),
      a;
    a * 0 => 
      println("Rule applied: a * 0 => 0"),
      0;
    0 * a => 
      println("Rule applied: 0 * a => 0"),
      0;
    // For anything else, return as is
    x => 
      println("No simplification rule applied"),
      x
  );

// Function to demonstrate inserting a rewritten AST into an ograph
fn insertIntoOGraph(graph : string, expr : ast) = 
  println("\nInserting expression into ograph"),
    
  // First simplify the expression
  println("Original expression: " + i2s(eval(expr))),
  let simplified = simplifyAST(expr),
  println("Simplified expression: " + i2s(eval(simplified))),
    
  // Add the simplified expression to the ograph with domain "math"
  let nodeId = addNodeToOGraph(graph, "math", simplified),
  println("Added to ograph with nodeId: " + i2s(nodeId)),
    
  // Add a domain annotation
  let addedDomain = addDomainToNode(graph, nodeId, "Simplified"),
  println("Added domain 'Simplified': " + b2s(addedDomain)),
    
  // Return the node ID
  nodeId;

// Main demonstration
println("Creating ograph...");
let graph = makeOGraph("simplification_demo");

// Test with various expressions
println("\nTest 1: x + 0");
let expr1 = x + 0;
let node1 = insertIntoOGraph(graph, expr1);

println("\nTest 2: 0 * y");
let expr2 = 0 * y;
let node2 = insertIntoOGraph(graph, expr2);

// Expression that shouldn't be simplified
println("\nTest 3: x + y");
let expr3 = x + y;
let node3 = insertIntoOGraph(graph, expr3);

// Add an additional domain to this node
let addedDomain = addDomainToNode(graph, node3, "Canonical");
println("Added domain 'Canonical': " + b2s(addedDomain));

// Print the graph
println("\nPrinting ograph:");
printOGraph(graph);

// Extract a node back to an expression and evaluate it
println("\nExtracting node from ograph:");
let extracted = extractOGraphNode(graph, node3);
println("Extracted expression: " + prettyOrbit(extracted));

// Create a pattern rule that works with the ograph
println("\nDemonstrating pattern rule with ograph");
fn rewriteRule(graph : string, sourceNodeId : int, pattern : ast, replacement : ast) = 
  // Extract source expression
  let sourceExpr = extractOGraphNode(graph, sourceNodeId),
  println("Source expression: " + prettyOrbit(sourceExpr)),
    
  // Check if it matches the pattern (simplified check for demo)
  let matches = true,  // In a real implementation, this would be a proper pattern match
    
  if (matches) then 
    // Create a new node with the replacement pattern
    let newNodeId = addNodeToOGraph(graph, "math", replacement),
    println("Created replacement node: " + i2s(newNodeId)),
      
    // Merge the nodes to establish equivalence
    let merged = mergeOGraphNodes(graph, sourceNodeId, newNodeId),
    println("Merged nodes: " + b2s(merged)),
      
    // Return the node ID
    newNodeId
  else 
    // No match
    println("Pattern did not match"),
    -1;

// Apply a rewrite rule
let pattern = a + b;
let replacement = b + a;  // Commutativity of addition
let ruleNodeId = rewriteRule(graph, node3, pattern, replacement);

// Print the final graph
println("\nFinal ograph after rule application:");
printOGraph(graph)