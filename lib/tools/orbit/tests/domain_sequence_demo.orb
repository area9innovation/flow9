// Demonstration of the domain annotation handling sequence using the rewrite library

// Import the rewrite library
import lib/rewrite;

fn quote(e : ast) = e;

// Main test function
fn main() = (
    println("=== DOMAIN REWRITING SEQUENCE DEMONSTRATION ===\n");
    
    // Create a graph for testing
    let graph = makeOGraph("sequence_demo");
    
    // Step 1: Define a pattern and replacement with domain annotations
    println("STEP 1: Define pattern and replacement");
    let pattern = quote(x + 0);
    let replacement = quote(x : Integer);
    println("Pattern: " + prettyOrbit(pattern));
    println("Replacement: " + prettyOrbit(replacement));
    
    // Step 2: Add an expression to the graph
    println("\nSTEP 2: Add expression to graph");
    let expr = quote((a + 0) : Integer);
    let exprId = processDomainAnnotations(graph, expr);
    println("Expression: " + prettyOrbit(expr));
    println("After processing domains: " + prettyOrbit(extractOGraph(graph, exprId)));
    
    // Step 3: Define binding for manual demonstration
    println("\nSTEP 3: Manual demonstration of rewrite sequence");
    let bindings = [
        Pair("x", quote(a))
    ];
    println("Bindings: " + prettyOrbit(bindings));
    
    // The correct sequence for domain-aware rewriting:
    
    // 1. First substitute variables in the replacement
    let substituted = substituteWithBindings(replacement, bindings);
    println("1. After substitution: " + prettyOrbit(substituted));
    
    // 2. Process domain annotations
    let domainProcessed = processDomainAnnotations(graph, substituted);
    println("2. After processing domain annotations: " + i2s(domainProcessed));
    let processedExpr = extractOGraph(graph, domainProcessed);
    println("   Extracted result: " + prettyOrbit(processedExpr));
    
    // 3. Merge with original node (result first to make it canonical)
    let merged = mergeOGraphNodes(graph, domainProcessed, exprId);
    println("3. Merged result: " + (if merged then "SUCCESS" else "FAILED"));
    
    // Check the final result
    let finalResult = extractOGraph(graph, exprId);
    println("\nFinal expression in graph: " + prettyOrbit(finalResult));
    
    // Step 4: Using the rewrite library
    println("\nSTEP 4: Using the rewrite library");
    
    // Create a new graph
    let graph2 = makeOGraph("library_demo");
    
    // Add the same expression
    let expr2 = quote((a + 0) : Integer);
    
    // Create a rule
    let rule = prepareRule(
        "Integer Addition Identity",
        quote(x + 0),
        quote(x : Integer)
    );
    
    // Apply the rule
    let result = applyRule(expr2, rule[0], rule[1], rule[2]);
    
    println("Original: " + prettyOrbit(expr2));
    println("Result: " + prettyOrbit(result));
    
    // Summary
    println("\n=== SUMMARY ===\n");
    println("The correct sequence for domain-aware rewriting is:");
    println("1. First use substituteWithBindings on the replacement template");
    println("2. Then process the result with processDomainAnnotations");
    println("3. Finally, merge the nodes with the result ID first");
    println("\nThis ensures domains are correctly preserved during rewriting.");
    
    "Domain sequence demonstration completed"
);

// Run the test
main()