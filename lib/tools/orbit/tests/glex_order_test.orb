import lib/glex_order;
import lib/reflect;

/**
 * Test for the glex_rewrite function.
 * Demonstrates how the function rewrites expressions using GLEX ordering.
 */
fn test_glex_rewrite() = (
    println("\nTEST GLEX_REWRITE FUNCTION");
    println("========================\n");
    
    println("This function takes any polynomial expression and rewrites it");
    println("with its terms sorted in Graded Lexicographic (GLEX) ordering:");
    println("  1. Higher total degree terms come first");
    println("  2. For terms with the same degree, lexicographic ordering is used");
    println("  3. Complex expressions like (x+y) are preserved as variables");
    println("");
    
    // Test with various polynomial expressions
    let test_polys = [
        quote(x*y + z^3 + 1 + x^3 + y*z + x^2*y),  // Standard polynomial
        quote(3*x^2 + 2*x + 5),                    // Univariate polynomial
        quote(a*b*c + c*d + a*b + 1),              // Multi-variable polynomial
        quote(z^2 + y^2 + x^2),                    // Reverse lexicographic
        quote((x+y)^2 + (x+y) + 1),                // Compound variable expression
        quote(sin(x)^2 + sin(x) + 1),              // Function call as variable
        quote((x+y)^3 + (x+y)^2 + 2*(x+y)),        // Multiple compound variables
        quote(x+y+z + (x+y)^2)                    // Mix of simple and compound variables
    ];
    
    // Test each polynomial
    iter(test_polys, \poly -> (
        println("Original expression: " + prettyOrbit(poly));
        
        // Apply glex_rewrite to reorder the polynomial
        let rewritten = glex_rewrite(poly);
        println("GLEX ordered:       " + prettyOrbit(rewritten));
        println("");
    ));
);

// Run the tests
test_glex_rewrite();