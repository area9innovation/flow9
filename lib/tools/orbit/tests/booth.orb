// Booth's algorithm for finding the lexicographically minimal rotation
// Used for finding the canonical form in cyclic groups

// Helper function to update an array at a specific index
fn update_array(arr, index, value) = (
    fn build_updated(i, result) = (
        if i >= length(arr) then result
        else (
            let new_value = if i == index then value else arr[i];
            build_updated(i + 1, result + [new_value])
        )
    );
    
    build_updated(0, [])
);

// Booth's lexicographically minimal string rotation algorithm
fn least_rotation(s) = (
    let n = length(s);
    let initial_f = map(range(0, 2 * n), \__.(-1));

    // Process all positions through recursion
    fn process_j(j, k, f) = (
        if j >= 2 * n then k
        else (
            let initial_i = f[j - k - 1];

            // Process inner while loop recursively
            fn process_i(i, curr_k) = (
                if i == -1 || s[j % n] == s[(curr_k + i + 1) % n] then
                    Pair(i, curr_k)
                else (
                    let new_k = if s[j % n] < s[(curr_k + i + 1) % n] then
                        j - i - 1
                    else
                        curr_k;
                    process_i(f[i], new_k)
                )
            );

            let result = process_i(initial_i, k);
            let i = result.first;
            let new_k = result.second;

            // Update f and continue loop
            let new_f = if i == -1 && s[j % n] != s[(new_k + i + 1) % n] then (
                let final_k = if s[j % n] < s[(new_k + i + 1) % n] then j else new_k;
                // Create new array with updated value at j-final_k
                update_array(f, j - final_k, -1)
            ) else (
                // Create new array with updated value at j-new_k
                update_array(f, j - new_k, i + 1)
            );

            process_j(j + 1, new_k, new_f)
        )
    );

    // Start the recursive process to get the starting position
    let k = process_j(1, 0, initial_f);
    
    // Construct the minimal rotation
    fn build_rotation(i, result) = (
        if i >= n then result
        else (
            let idx = (k + i) % n;
            build_rotation(i + 1, result + [s[idx]])
        )
    );
    
    build_rotation(0, [])
);

// Test cases for least_rotation
fn test_least_rotation() = (
    println("Testing Booth's Algorithm for Minimal Rotation");
    println("============================================\n");
    
    // Test 1: Simple rotation
    let arr1 = [3, 1, 4, 2];
    println("Original array: " + prettyOrbit(arr1));
    println("Minimal rotation: " + prettyOrbit(least_rotation(arr1)));
    println("");
    
    // Test 2: Already minimal
    let arr2 = [1, 2, 3, 4];
    println("Original array: " + prettyOrbit(arr2));
    println("Minimal rotation: " + prettyOrbit(least_rotation(arr2)));
    println("");
    
    // Test 3: Multiple minimal options (should pick the first)
    let arr3 = [1, 2, 1, 2];
    println("Original array: " + prettyOrbit(arr3));
    println("Minimal rotation: " + prettyOrbit(least_rotation(arr3)));
    println("");
    
    // Test 4: Empty array (edge case)
    let arr4 = [];
    println("Original array: " + prettyOrbit(arr4));
    println("Minimal rotation: " + prettyOrbit(least_rotation(arr4)));
    println("");
    
    // Test 5: Single element (edge case)
    let arr5 = [42];
    println("Original array: " + prettyOrbit(arr5));
    println("Minimal rotation: " + prettyOrbit(least_rotation(arr5)));
    println("");
    
    // Test 6: Test with a string (converted to character codes)
    let str1 = string2ints("abcda");
    println("Original string array: " + prettyOrbit(str1));
    println("Minimal rotation: " + prettyOrbit(least_rotation(str1)));
    println("As string: " + ints2string(least_rotation(str1)))
);

// Run the tests
fn main() = (
    test_least_rotation()
);

// Execute the main function
main();