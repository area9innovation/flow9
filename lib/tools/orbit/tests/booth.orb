import lib/booth;

// Test runner function
fn run_test(test_name, input_arr) = (
	let result = booth_canonical(input_arr);
	println(test_name + ": " + prettyOrbit(input_arr) + " -> " + prettyOrbit(result));
	result
);

// Test if the result is actually minimal (by brute force)
fn validate_result(arr, result) = (
	if length(arr) <= 1 then true
	else (
		let n = length(arr);

		// Generate all rotations
		fn generate_rotation(start_idx) = (
			fn build(idx, rot) = (
				if idx >= n then rot
				else build(idx + 1, rot + [arr[(start_idx + idx) % n]])
			);
			build(0, [])
		);

		// Compare two arrays lexicographically
		fn lex_compare(arr1, arr2) = (
			fn compare_at(idx) = (
				if idx >= length(arr1) then 0  // Equal
				else if arr1[idx] < arr2[idx] then -1  // arr1 is smaller
				else if arr1[idx] > arr2[idx] then 1   // arr2 is smaller
				else compare_at(idx + 1)  // Check next position
			);
			compare_at(0)
		);

		// Check if our result is actually minimal
		fn check_minimal(i) = (
			if i >= n then true
			else (
				let rotation = generate_rotation(i);
				let comparison = lex_compare(result, rotation);

				// Result should be <= any rotation
				if comparison > 0 then (
					println("VALIDATION FAILED: Found smaller rotation");
					println("  Result: " + prettyOrbit(result));
					println("  Better: " + prettyOrbit(rotation));
					false
				) else check_minimal(i + 1)
			)
		);

		check_minimal(0)
	)
);

// Run all tests and validate results
fn run_all_tests() = (
	// Edge cases
	let test1 = run_test("Empty array", []);
	let test2 = run_test("Single element", [5]);
	let test3 = run_test("All identical", [7, 7, 7, 7, 7]);

	// Simple cases
	let test4 = run_test("Original example", [3, 1, 1, 2, 1, 2]);
	let test5 = run_test("Distinct elements", [5, 1, 4, 2, 3]);
	let test6 = run_test("Already minimal", [1, 2, 3, 4, 5]);

	// Complex cases
	let test7 = run_test("Repeating pattern", [1, 2, 3, 1, 2, 3, 1, 2, 3]);
	let test8 = run_test("Minimal at end", [5, 6, 7, 1, 2, 3, 4]);
	let test9 = run_test("Similar rotations", [1, 1, 1, 1, 2, 1, 1, 1, 1, 1]);
	let test10 = run_test("Long sequence with small difference", [9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9]);

	// Very complex cases
	let test11 = run_test("Multiple minimal candidates", [2, 1, 3, 2, 1, 3, 4, 2, 1, 3]);
	let test12 = run_test("Palindrome", [1, 2, 3, 4, 3, 2, 1]);
	let test13 = run_test("Almost identical strings", [1, 2, 3, 4, 5, 1, 2, 3, 4, 6]);
	let test14 = run_test("Late distinguisher", [5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5]);
	let test15 = run_test("Structures", [Foo(), Bar(), Foo(), Pi()]);

	// Validate all results
	println("\nValidating results...");
	let valid1 = validate_result([], test1);
	let valid2 = validate_result([5], test2);
	let valid3 = validate_result([7, 7, 7, 7, 7], test3);
	let valid4 = validate_result([3, 1, 1, 2, 1, 2], test4);
	let valid5 = validate_result([5, 1, 4, 2, 3], test5);
	let valid6 = validate_result([1, 2, 3, 4, 5], test6);
	let valid7 = validate_result([1, 2, 3, 1, 2, 3, 1, 2, 3], test7);
	let valid8 = validate_result([5, 6, 7, 1, 2, 3, 4], test8);
	let valid9 = validate_result([1, 1, 1, 1, 2, 1, 1, 1, 1, 1], test9);
	let valid10 = validate_result([9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9], test10);
	let valid11 = validate_result([2, 1, 3, 2, 1, 3, 4, 2, 1, 3], test11);
	let valid12 = validate_result([1, 2, 3, 4, 3, 2, 1], test12);
	let valid13 = validate_result([1, 2, 3, 4, 5, 1, 2, 3, 4, 6], test13);
	let valid14 = validate_result([5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5], test14);
	let valid15 = validate_result([Bar(), Foo(), Pi(), Foo()], test15);

	// Summarize results
	println("\nAll tests " +
		(valid1 && valid2 && valid3 && valid4 && valid5 && valid6 && valid7 && valid8 && valid9 &&
		 valid10 && valid11 && valid12 && valid13 && valid14 && valid15));
);

// Run all tests
run_all_tests();
