// Test for pattern matching with domain operators (:) and (!:)

// Create a graph
let g = makeOGraph("domain_test");

// Define quote to handle expressions
fn quote(e : ast) = e;

// Create some expressions
let a_id = addOGraph(g, quote(a));
let b_id = addOGraph(g, quote(b));
let sum_id = addOGraph(g, quote(a + b));
let alg_id = addOGraph(g, quote(Algebra));
let proc_id = addOGraph(g, quote(Processed));

// Create complex domain expressions (using simpler names for testing)
let group_id = addOGraph(g, quote(Group));
let symmetry_id = addOGraph(g, quote(S2));
let field_id = addOGraph(g, quote(Field));

// Add domain annotations to some expressions
addDomainToNode(g, sum_id, alg_id);
addDomainToNode(g, sum_id, group_id);  // a + b belongs to Group too
addDomainToNode(g, sum_id, symmetry_id);  // a + b belongs to S2 too

println("Added expressions to the graph:");
println("a ID: " + i2s(a_id));
println("b ID: " + i2s(b_id));
println("a + b ID: " + i2s(sum_id));
println("Algebra domain ID: " + i2s(alg_id));
println("Processed domain ID: " + i2s(proc_id));
println("Group domain ID: " + i2s(group_id));
println("S2 domain ID: " + i2s(symmetry_id));
println("Field domain ID: " + i2s(field_id));

// Test matching with the : operator (positive case)
println("\nTest 1: Matching with : operator (should match)");
let pattern1 = quote(x + y : Algebra);
let matchCount1 = matchOGraphPattern("domain_test", pattern1, \(bindings : ast, eclassId) . (
    println("Match found at eclass ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Found " + i2s(matchCount1) + " matches");

// Test matching with the : operator (negative case)
println("\nTest 2: Matching with : operator (should not match)");
let pattern2 = quote(x + y : Processed);
let matchCount2 = matchOGraphPattern("domain_test", pattern2, \(bindings : ast, eclassId) . (
    println("Match found at eclass ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Found " + i2s(matchCount2) + " matches");

// Test matching with the !: operator (positive case)
println("\nTest 3: Matching with !: operator (should match)");
let pattern3 = quote(x + y !: Processed);
let matchCount3 = matchOGraphPattern("domain_test", pattern3, \(bindings : ast, eclassId) . (
    println("Match found at eclass ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Found " + i2s(matchCount3) + " matches");

// Test matching with the !: operator (negative case)
println("\nTest 4: Matching with !: operator (should not match)");
let pattern4 = quote(x + y !: Algebra);
let matchCount4 = matchOGraphPattern("domain_test", pattern4, \(bindings : ast, eclassId) . (
    println("Match found at eclass ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Found " + i2s(matchCount4) + " matches");

// Test matching with a complex domain (positive case)
println("\nTest 5: Matching with Group domain (should match)");
let pattern5 = quote(x + y : Group);
let matchCount5 = matchOGraphPattern("domain_test", pattern5, \(bindings : ast, eclassId) . (
    println("Match found at eclass ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Found " + i2s(matchCount5) + " matches");

// Test matching with the S2 domain (positive case)
println("\nTest 6: Matching with S2 domain (should match)");
let pattern6 = quote(x + y : S2);
let matchCount6 = matchOGraphPattern("domain_test", pattern6, \(bindings : ast, eclassId) . (
    println("Match found at eclass ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Found " + i2s(matchCount6) + " matches");

// Test matching with the Field domain (negative case - not assigned to a + b)
println("\nTest 7: Matching with unassigned Field domain (should not match)");
let pattern7 = quote(x + y : Field);
let matchCount7 = matchOGraphPattern("domain_test", pattern7, \(bindings : ast, eclassId) . (
    println("Match found at eclass ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Found " + i2s(matchCount7) + " matches");

// Test 8 removed: Nested domain annotations not yet supported
println("Found " + i2s(matchCount8) + " matches");

"Domain pattern matching test completed"