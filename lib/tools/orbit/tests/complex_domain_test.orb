// Test of domain pattern matching with complex domain expressions

// Define quote
fn quote(e : ast) = e;

// Create a test graph
let g = makeOGraph("complex_domain_test");

// Create domain expressions and a value to annotate
let a_id = addOGraph(g, quote(a));
let b_id = addOGraph(g, quote(b));
let expr_id = addOGraph(g, quote(a + b));

// Add a simple domain
let algebra_id = addOGraph(g, quote(Algebra));

// Add a complex domain (function call)
let typefn_id = addOGraph(g, quote(Type("number")));

// Add a nested domain (a + b could be an expression or a domain)
let nested_id = addOGraph(g, quote(Group(a + b)));

// Print info about initial graph state
println("Created test graph with nodes:");
println("a with ID: " + i2s(a_id));
println("b with ID: " + i2s(b_id));
println("a + b with ID: " + i2s(expr_id));
println("Algebra with ID: " + i2s(algebra_id));
println("Type(\"number\") with ID: " + i2s(typefn_id));
println("Group(a + b) with ID: " + i2s(nested_id));

// Add domains to the expression
println("\nAdding domains to a + b");
let add_algebra = addDomainToNode(g, expr_id, algebra_id);
println("Added Algebra domain: " + i2s(b2i(add_algebra)));

let add_typefn = addDomainToNode(g, expr_id, typefn_id);
println("Added Type(\"number\") domain: " + i2s(b2i(add_typefn)));

let add_nested = addDomainToNode(g, expr_id, nested_id);
println("Added Group(a + b) domain: " + i2s(b2i(add_nested)));

// Test pattern matching with domains
println("\nTesting simple domain matching");
let matches_algebra = matchOGraphPattern(g, quote((x + y) : Algebra), \(bindings : ast, eclassId) . (
    println("MATCH FOUND with Algebra at ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Total matches with Algebra: " + i2s(matches_algebra));

// Fix the syntax for function-based domain patterns
println("\nTesting complex function domain matching");
let matches_typefn = matchOGraphPattern(g, quote((x + y) : Type("number")), \(bindings : ast, eclassId) . (
    println("MATCH FOUND with Type(\"number\") at ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Total matches with Type(\"number\"): " + i2s(matches_typefn));

println("\nTesting nested domain matching");
let matches_nested = matchOGraphPattern(g, quote((x + y) : Group(a + b)), \(bindings : ast, eclassId) . (
    println("MATCH FOUND with Group(a + b) at ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Total matches with Group(a + b): " + i2s(matches_nested));

// Test negative domain matching
println("\nTesting negative domain matching");
let non_domain = addOGraph(g, quote(NonExistentDomain));
let matches_negative = matchOGraphPattern(g, quote((x + y) !: NonExistentDomain), \(bindings : ast, eclassId) . (
    println("NEGATIVE MATCH FOUND at ID: " + i2s(eclassId));
    println("Bindings: " + prettyOrbit(bindings));
));
println("Total negative matches: " + i2s(matches_negative));

"Complex domain pattern test completed"