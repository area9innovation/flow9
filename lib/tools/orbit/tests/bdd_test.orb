import lib/bdd;

println("=== Binary Decision Diagram (BDD) Tests ===");

// Test basic BDD construction
println("\n--- Basic BDD Construction ---");

// Simple variable
let var_expr = quote(x);
let var_bdd = to_bdd(var_expr);
println("x as BDD:");
println(prettyOrbit(var_bdd));

// Simple negation
let not_expr = quote(!x);
let not_bdd = to_bdd(not_expr);
println("\n!x as BDD:");
println(prettyOrbit(not_bdd));

// Test Boolean operations
println("\n--- Boolean Operations ---");

let and_expr = quote(x && y);
let and_bdd = to_bdd(and_expr);
println("x && y as BDD:");
println(prettyOrbit(and_bdd));

let or_expr = quote(x || y);
let or_bdd = to_bdd(or_expr);
println("\nx || y as BDD:");
println(prettyOrbit(or_bdd));

// Test conditional expressions (Shannon expansion)
println("\n--- Conditional Expressions (Shannon Expansion) ---");

// This is the classic multiplexer expression: if s then a else b
let mux_expr = quote((s && a) || (!s && b));
println("Multiplexer (s?a:b): " + prettyOrbit(mux_expr));

let mux_bdd = to_bdd(mux_expr);
println("\nAs BDD (should be Ite(s, a, b)):");
println(prettyOrbit(mux_bdd));

// Test conversion back to logic expressions
println("\n--- BDD to Logic Conversion ---");

println("Multiplexer BDD back to logic:");
println(prettyOrbit(from_bdd(mux_bdd)));

// Test logical equivalence with BDDs
println("\n--- Logical Equivalence Testing ---");

// De Morgan's laws
let demorgan1 = quote(!(x && y));
let demorgan2 = quote(!x || !y);
println("De Morgan's Law: !(x && y) == !x || !y");
println("Equivalent: " + i2s(are_equivalent(demorgan1, demorgan2)));

// Distributivity
let dist1 = quote(a && (b || c));
let dist2 = quote((a && b) || (a && c));
println("\nDistributivity: a && (b || c) == (a && b) || (a && c)");
println("Equivalent: " + i2s(are_equivalent(dist1, dist2)));

// XOR implementations
let xor1 = quote((a && !b) || (!a && b));
let xor2 = quote((a || b) && (!a || !b));
println("\nXOR Equivalence: (a && !b) || (!a && b) == (a || b) && (!a || !b)");
println("Equivalent: " + i2s(are_equivalent(xor1, xor2)));

// Test comparison with CNF and DNF
println("\n--- Comparison with Other Normal Forms ---");

let test_expr = quote((a && b) || (!a && c));
println("Test expression: " + prettyOrbit(test_expr));

// BDD form
let bdd_form = to_bdd(test_expr);
println("\nAs BDD:");
println(prettyOrbit(bdd_form));

// CNF form
let cnf_form = to_cnf(test_expr);
println("\nAs CNF:");
println(prettyOrbit(cnf_form));

// DNF form
let dnf_form = to_dnf(test_expr);
println("\nAs DNF:");
println(prettyOrbit(dnf_form));

// Check equivalence between all forms
println("\nEquivalence between forms:");
println("BDD ≡ CNF: " + i2s(are_equivalent(bdd_form, cnf_form)));
println("BDD ≡ DNF: " + i2s(are_equivalent(bdd_form, dnf_form)));
println("CNF ≡ DNF: " + i2s(are_equivalent(cnf_form, dnf_form)));