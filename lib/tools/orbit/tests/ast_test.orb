import lib/reflect;

// Test to understand the AST structure of logical expressions

fn main() = (
    println("==== AST STRUCTURE TEST ====");
    
    // Test logical expressions and print their AST structure
    let expr1 = quote(a && b);
    println("Expression: a && b");
    println("AST structure: " + astname(expr1));
    println("Full AST: " + prettyOrbit(expr1));
    
    let expr2 = quote(a || b);
    println("\nExpression: a || b");
    println("AST structure: " + astname(expr2));
    println("Full AST: " + prettyOrbit(expr2));
    
    let expr3 = quote(!a);
    println("\nExpression: !a");
    println("AST structure: " + astname(expr3));
    println("Full AST: " + prettyOrbit(expr3));
    
    let expr4 = quote(!(a && b));
    println("\nExpression: !(a && b)");
    println("AST structure: " + astname(expr4));
    println("Full AST: " + prettyOrbit(expr4));
    
    // Test more complex expressions
    let expr5 = quote(a || (b && c));
    println("\nExpression: a || (b && c)");
    println("AST structure: " + astname(expr5));
    println("Full AST: " + prettyOrbit(expr5));
    
    "Done"
);

// Run the main function
main();