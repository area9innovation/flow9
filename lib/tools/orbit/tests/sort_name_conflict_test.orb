// Test to verify that function parameters don't leak between function calls

// Import the sort library
import lib/sort;

// Test array
let arr = [5, 3, 1, 4, 2];

// Sort with a custom comparison function that uses the same parameter names as merge
// This should sort in descending order
let sortedDesc = mergeSort(arr, \(aa, bb) . aa >= bb);

println("Original array: " + prettyOrbit(arr));
println("Sorted ascending: " + prettyOrbit(sort(arr)));
println("Sorted descending: " + prettyOrbit(sortedDesc));

// Now test a more complex case with nested function calls using the same parameter names
let nestedTest = \aa . (
    let innerFunc = \bb . (
        let result = aa + bb;
        result
	);
    
    innerFunc(10)
);

println("Result of nested function call: " + i2s(nestedTest(5)));

// Test with repeated calls to functions using the same parameter names
let first = mergeSort([3, 1, 2], \(aa, bb) . aa <= bb);
let second = mergeSort([6, 4, 5], \(aa, bb) . aa <= bb);
let combined = merge(first, second, \(aa, bb) . aa <= bb);

println("Result of multiple sorts and merge: " + prettyOrbit(combined));