import lib/graph;

// Test file for the graph implementation

// Create a simple test graph with cities and distances
fn testGraph() = (
    // Create an empty graph
    let graph = makeGraph();
    
    // Add city nodes
    let g1 = addNode(graph, "Copenhagen");
    let g2 = addNode(g1, "Berlin");
    let g3 = addNode(g2, "Paris");
    let g4 = addNode(g3, "London");
    let g5 = addNode(g4, "Rome");
    
    // Add edges with distances (data is distance in km)
    let g6 = addEdge(g5, "Copenhagen", "Berlin", 354);
    let g7 = addEdge(g6, "Berlin", "Paris", 878);
    let g8 = addEdge(g7, "Paris", "London", 344);
    let g9 = addEdge(g8, "Paris", "Rome", 1106);
    let g10 = addEdge(g9, "London", "Berlin", 930);
    
    // Print the graph
    println("Initial graph:");
    println(graphToString(g10));
    
    // Test node operations
    println("\nTesting node operations:");
    println("Number of nodes: " + i2s(nodeCount(g10)));
    println("Has Copenhagen: " + if (hasNode(g10, "Copenhagen")) then "yes" else "no");
    println("Has Madrid: " + if (hasNode(g10, "Madrid")) then "yes" else "no");
    
    // Test edge operations
    println("\nTesting edge operations:");
    println("Number of edges: " + i2s(edgeCount(g10)));
    println("Edge Copenhagen->Berlin: " + if (hasEdge(g10, "Copenhagen", "Berlin")) then "yes" else "no");
    println("Edge Rome->Paris: " + if (hasEdge(g10, "Rome", "Paris")) then "yes" else "no");
    
    // Get neighbors
    println("\nNeighbors of Paris:");
    let parisNeighbors = getNeighbors(g10, "Paris");
    fold(parisNeighbors, "", \acc, neighbor -> (
        println(" - " + neighbor);
        ""
    ));
    
    // Remove an edge and check result
    println("\nRemoving edge Paris->London");
    let g11 = removeEdge(g10, "Paris", "London");
    println("Edge Paris->London after removal: " + 
           if (hasEdge(g11, "Paris", "London")) then "still exists" else "removed");
    println("Number of edges after removal: " + i2s(edgeCount(g11)));
    
    // Add the edge back with different data
    println("\nAdding edge Paris->London with new distance");
    let g12 = addEdge(g11, "Paris", "London", 400); // Different distance
    println("Updated graph:");
    println(graphToString(g12));
    
    // Return the final graph
    g12
);

// Run the tests
testGraph();