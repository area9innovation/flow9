import lib/graph;

// Test file for the graph implementation

// Create a simple test graph with cities and distances
fn testGraph() = (
    // Create an empty graph
    let graph = makeGraph();
    
    // Add city nodes
    let g1 = addNode(graph, "Copenhagen");
    let g2 = addNode(g1, "Berlin");
    let g3 = addNode(g2, "Paris");
    let g4 = addNode(g3, "London");
    let g5 = addNode(g4, "Rome");
    
    // Add edges with distances (data is distance in km)
    let g6 = addEdge(g5, "Copenhagen", "Berlin", 354);
    let g7 = addEdge(g6, "Berlin", "Paris", 878);
    let g8 = addEdge(g7, "Paris", "London", 344);
    let g9 = addEdge(g8, "Paris", "Rome", 1106);
    let g10 = addEdge(g9, "London", "Berlin", 930);
    
    // Print the graph
    println("Initial graph:");
    println(graphToString(g10));
    
    // Test node operations
    println("\nTesting node operations:");
    println("Number of nodes: " + i2s(nodeCount(g10)));
    println("Has Copenhagen: " + if (hasNode(g10, "Copenhagen")) then "yes" else "no");
    println("Has Madrid: " + if (hasNode(g10, "Madrid")) then "yes" else "no");
    
    // Test edge operations
    println("\nTesting edge operations:");
    println("Number of edges: " + i2s(edgeCount(g10)));
    println("Edge Copenhagen->Berlin: " + if (hasEdge(g10, "Copenhagen", "Berlin")) then "yes" else "no");
    println("Edge Rome->Paris: " + if (hasEdge(g10, "Rome", "Paris")) then "yes" else "no");
    
    // Get neighbors
    println("\nNeighbors of Paris:");
    let parisNeighbors = getNeighbors(g10, "Paris");
    fold(parisNeighbors, "", \acc, neighbor -> (
        println(" - " + neighbor);
        ""
    ));
    
    // TESTING NEW FEATURES
    
    // 1. Export to Graphviz
    println("\n=== Graphviz DOT Export ===\n");
    let dot = graphToDot(g10, true, true);
    println(dot);
    
    // 2. DFS and reachability
    println("\n=== Depth-First Search ===\n");
    println("Nodes reachable from Copenhagen:");
    let reachable = findReachableNodes(g10, "Copenhagen");
    fold(reachable, "", \acc, node -> (
        println(" - " + node);
        ""
    ));
    
    println("\nIs Rome reachable from Copenhagen? " + 
            if (isReachable(g10, "Copenhagen", "Rome")) then "Yes" else "No");
    
    // 3. Shortest Path
    println("\n=== Shortest Path ===\n");

    // X. BFS and reachability (New section for BFS tests)
    println("\n=== Breadth-First Search ===\n");
    println("Nodes reachable from Copenhagen (BFS):");
    let reachableBfs = findReachableNodesBfs(g10, "Copenhagen");
    fold(reachableBfs, "", \acc, node -> (
        println(" - " + node);
        ""
    ));
    
    println("\nIs Rome reachable from Copenhagen (BFS)? " + 
            if (isReachableBfs(g10, "Copenhagen", "Rome")) then "Yes" else "No");

    println("\nIs Copenhagen reachable from Rome (BFS)? " +
            if (isReachableBfs(g10, "Rome", "Copenhagen")) then "Yes" else "No"); // Should be No if graph is directed as used in shortestPath

    // Test with a non-existent start node
    println("\nNodes reachable from Atlantis (BFS):");
    let reachableAtlantisBfs = findReachableNodesBfs(g10, "Atlantis");
     fold(reachableAtlantisBfs, "", \acc, node -> (
        println(" - " + node); // Should print nothing
        ""
    ));
    println("Is Berlin reachable from Atlantis (BFS)? " +
            if (isReachableBfs(g10, "Atlantis", "Berlin")) then "Yes" else "No");
    
    // 7. Connected Components
    println("\n=== Connected Components ===\n");
    
    // Create a disconnected graph for testing
    let disconnected = makeGraph();
    let d1 = addNode(disconnected, "A");
    let d2 = addNode(d1, "B");
    let d3 = addNode(d2, "C");
    let d4 = addNode(d3, "D");
    let d5 = addNode(d4, "E");
    let d6 = addNode(d5, "F");
    let d7 = addEdge(d6, "A", "B", 1);
    let d8 = addEdge(d7, "B", "C", 1);
    let d9 = addEdge(d8, "D", "E", 1);
    let d10 = addEdge(d9, "E", "F", 1);  // Creates two components: A-B-C and D-E-F
    
    println("Disconnected graph visualization:");
    println(graphToDot(d10, true, true));
    
    println("\nWeakly connected components in disconnected graph:");
    let components = connectedComponents(d10);
    fold(components, "", \acc, component -> (
        let componentStr = fold(component, "", \a, node -> (
            if (a == "") then node else a + ", " + node
        ));
        println("Component: [" + componentStr + "]");
        ""
    ));
    
    println("\nStrongly connected components in city graph:");
    let strongComponents = stronglyConnectedComponents(g10);
    fold(strongComponents, "", \acc, component -> (
        let componentStr = fold(component, "", \a, node -> (
            if (a == "") then node else a + ", " + node
        ));
        println("Component: [" + componentStr + "]");
        ""
    ));

    let path1 = shortestPath(g10, "Copenhagen", "Rome");
    path1 is (
        Path(found, pathNodes, distance) => (
            if (found) then (
                println("Path from Copenhagen to Rome (distance: " + i2s(distance) + "km):");
                let pathStr = fold(pathNodes, "", \acc, node -> (
                    if (acc == "") then node else acc + " → " + node
                ));
                println(pathStr);
            ) else (
                println("No path found from Copenhagen to Rome!");
            )
        )
    );
    
    // Create a cyclic graph for testing
    let cyclic = makeGraph();
    let c1 = addNode(cyclic, "A");
    let c2 = addNode(c1, "B");
    let c3 = addNode(c2, "C");
    let c4 = addNode(c3, "D");
    let c5 = addEdge(c4, "A", "B", 1);
    let c6 = addEdge(c5, "B", "C", 1);
    let c7 = addEdge(c6, "C", "D", 1);
    let c8 = addEdge(c7, "D", "A", 1);  // Creates a cycle A→B→C→D→A
    
    // Create an acyclic graph for testing
    let acyclic = makeGraph();
    let a1 = addNode(acyclic, "X");
    let a2 = addNode(a1, "Y");
    let a3 = addNode(a2, "Z");
    let a4 = addNode(a3, "W");
    let a5 = addEdge(a4, "X", "Y", 1);
    let a6 = addEdge(a5, "Y", "Z", 1);
    let a7 = addEdge(a6, "X", "W", 1);
    let a8 = addEdge(a7, "W", "Z", 1);  // No cycles
    
    // 4. Cycle Detection
    println("\n=== Cycle Detection ===\n");
    println("City graph has cycles: " + if (hasCycle(g10)) then "Yes" else "No");
    println("Cyclic graph has cycles: " + if (hasCycle(c8)) then "Yes" else "No");
    println("Acyclic graph has cycles: " + if (hasCycle(a8)) then "Yes" else "No");
    
    // 5. Topological Sort
    println("\n=== Topological Sort ===\n");
    println("Topological sort of city graph:");
    let topoCity = topologicalSort(g10);
    if (length(topoCity) > 0) then (
        let topoStr = fold(topoCity, "", \acc, node -> (
            if (acc == "") then node else acc + " → " + node
        ));
        println(topoStr);
    ) else (
        println("Cannot perform topological sort - graph has cycles!");
    );
    
    println("\nTopological sort of acyclic graph:");
    let topoAcyclic = topologicalSort(a8);
    if (length(topoAcyclic) > 0) then (
        let topoStr = fold(topoAcyclic, "", \acc, node -> (
            if (acc == "") then node else acc + " → " + node
        ));
        println(topoStr);
    ) else (
        println("Cannot perform topological sort - graph has cycles!");
    );
    
    println("\nTopological sort of cyclic graph:");
    let topoCyclic = topologicalSort(c8);
    if (length(topoCyclic) > 0) then (
        let topoStr = fold(topoCyclic, "", \acc, node -> (
            if (acc == "") then node else acc + " → " + node
        ));
        println(topoStr);
    ) else (
        println("Cannot perform topological sort - graph has cycles!");
    );
    
    // 6. Cycle Breaking
    println("\n=== Cycle Breaking ===\n");
    
    // Break cycles in the city graph
    println("Breaking cycles in city graph:");
    let acyclicCity = breakCycles(g10);
    println("City graph has cycles after breaking: " + if (hasCycle(acyclicCity)) then "Yes" else "No");
    println("Number of edges before: " + i2s(edgeCount(g10)) + ", after: " + i2s(edgeCount(acyclicCity)));
    
    // Test topological sort on the acyclic version
    println("\nTopological sort after breaking cycles:");
    let topoAfterBreaking = topologicalSort(acyclicCity);
    if (length(topoAfterBreaking) > 0) then (
        let topoStr = fold(topoAfterBreaking, "", \acc, node -> (
            if (acc == "") then node else acc + " → " + node
        ));
        println(topoStr);
    ) else (
        println("Still cannot perform topological sort - graph still has cycles!");
    );
    
    // Break cycles in the cyclical test graph
    println("\nBreaking cycles in test cyclic graph:");
    let acyclicTest = breakCycles(c8);
    println("Cyclic test graph has cycles after breaking: " + if (hasCycle(acyclicTest)) then "Yes" else "No");
    println("Graph before breaking cycles:");
    println(graphToDot(c8, true, true));
    println("\nGraph after breaking cycles:");
    println(graphToDot(acyclicTest, true, true));
    
    // Return the final graph
    g10
);

// Run the tests
testGraph();