// fun4.orb - OGraph pattern matching in Orbit using the new primitives
import lib/match;

// Test it with a simple example
let g = makeOGraph("test");

// Add a complex expression
let expr = '((3.141 : Real) *x + 3*y);
let exprId = addOGraph(g, expr);

println("Expression added to graph:");
println(extractOGraph(g, exprId));

fn matchFn(nodeId, bindings) = (
	println("We have a complete match for nodeId " + i2s(nodeId) + " =  " + extractOGraph(graphName, nodeId));
	iter(bindings, \pair -> (
		println("Binding: " + prettySexpr(pair[1]) + " -> " + extractOGraph(graphName, pair[2]));
	));
);

// Test matching
println("\nTest basic variable matching:");
let pattern1 = '(a : t1 â‹¯ Real);
println("Pattern: " + prettySexpr(pattern1));
let count = matchPattern(g, exprId, pattern1, matchFn);

/*

println("\nTest operator pattern matching:");
let pattern2 = '(a + b);
println("Pattern: " + prettyOrbit(pattern2));
let result2 = matchPatternRec(g, exprId, pattern2, []);
println("Match result: " + prettyOrbit(result2));

// Add a domain to part of the expression
let term1 = addOGraph(g, quote(2*x));
let numDomain = addOGraph(g, quote(Number));
addDomainToNode(g, term1, numDomain);

// Test domain matching
println("\nTest domain matching:");
let pattern3 = quote(c : Number);
println("Pattern with domain: " + prettyOrbit(pattern3));
let result3 = matchPatternRec(g, term1, pattern3, []);
println("Domain match result: " + prettyOrbit(result3));

// Test negative domain matching
println("\nTest negative domain matching:");
let pattern4 = quote(c !: String);
println("Pattern with negative domain: " + prettyOrbit(pattern4));
let result4 = matchPatternRec(g, term1, pattern4, []);
println("Negative domain match result: " + prettyOrbit(result4));
*/