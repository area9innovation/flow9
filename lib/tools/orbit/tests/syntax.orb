

// Orbit Syntax Test File
// This file tests all syntax in Orbit and is intentionally not semantically meaningful

// 1. IMPORTS
import lib/sort;
import lib/array;

fn quote(a : ast) = a;

let f = quote(

	// 2. COMMENTS
	// Single line comment
	/* Multi-line comment
	spanning multiple lines
	to test block comments */

	// 3. BASIC VALUES AND LITERALS
	let intValue = 42;
	let negativeInt = -123;
	let doubleValue = 3.14159;
	let negativeDouble = -0.123;
	let boolTrue = true;
	let boolFalse = false;
	let stringValue = "Hello, Orbit!";
	let escapeString = "Line 1\nLine 2\tTabbed\"Quoted\"";
	let emptyArray = [];
	let numArray = [1, 2, 3, 4, 5];
	let nestedArray = [[1, 2], [3, 4], [5, 6]];
	let setLiteral = {1, 2, 3, 4};
	let setComprehension = {x | x < 10};
	let ellipsis = ...;

	// 4. ARITHMETIC OPERATORS
	let addition = a + b;
	let subtraction = a - b;
	let multiplication = a * b;
	let division = a / b;
	let modulo = a % b;
	let exponent = a ^ b;
	let negation = -a;
	let multipleOps = (a + b) * (c - d) / e ^ f % g;

	// 5. COMPARISON OPERATORS
	let equals = a == b;
	let notEquals = a != b;
	let lessThan = a < b;
	let lessEquals = a <= b;
	let greaterThan = a > b;
	let greaterEquals = a >= b;

	// 6. LOGICAL OPERATORS
	let logicalAnd = p && q;
	let logicalOr = p || q;
	let logicalNot = !p;
	let complexLogic = (p && q) || (!r && s);

	// 7. VARIABLE BINDINGS
	let singleBinding = 10;
	let multipleBindings = (let x = 5; let y = 10; x + y);
	let nestedBindings = (let outer = (let inner = 42; inner * 2); outer / 2);

	// 8. FUNCTIONS
	// Basic function definition
	fn add(a, b) = a + b;


	// Multi-statement function definition
	fn calculateArea(width, height) = (
		let area = width * height;
		println("Area: " + i2s(area));
		area
	);

	// Function with type annotation
	fn identity(x : int) = x;

	// Function with pattern matching
	fn factorial(n) = (
		if n <= 1 then 1
		else n * factorial(n - 1)
	);

	// 9. LAMBDA EXPRESSIONS
	let incrementLambda = \x.x + 1;
	let multiParamLambda = \(a, b).a * b;
	let lambdaWithEnv = \{captured = 10} x.x + captured;

	// 10. CONDITIONALS
	let simpleIf = if condition then value1 else value2;
	let nestedIf = if a > b then (
		if a > c then a else c
	) else (
		if b > c then b else c
	);
	let multiStatementIf = if condition then (
		let x = 10;
		let y = 20;
		x + y
	) else (
		let z = 30;
		z
	);

	// 11. PATTERN MATCHING
	let simpleMatch = expr is (
		0 => "Zero";
		1 => "One";
		2 => "Two";
		_ => "Other"
	);

	let constructorMatch = shape is (
		Circle(r) => 3.14159 * r * r;
		Rectangle(w, h) => w * h;
		Triangle(b, h) => 0.5 * b * h;
		_ => 0
	);

	let guardedMatch = value is (
		n => "Positive" if n > 0;
		n => "Negative" if n < 0;
		_ => "Zero"
	);

	let nestedMatch = data is (
		Pair(a, b) => a is (
			0 => "First is zero";
			_ => "First is " + i2s(a)
		);
		_ => "Not a pair"
	);

	// 12. CONSTRUCTORS AND FIELD ACCESS
	let point = Point(10, 20);
	let person = Person("John", 30, true);
	let nested = Pair(Point(1, 2), Point(3, 4));
	let fieldAccess = point.x;
	let methodCall = point.distance(origin);

	// 13. SEQUENCES
	let sequence = (expr1; expr2; expr3);
	let nestedSequence = (expr1; (expr2; expr3); expr4);


	// 14. MATH NOTATION
	let setUnion = A ∪ B;
	let setIntersection = A ∩ B;
	let elementOf = x ∈ S;
	let subset = A ⊂ B;

	let forallQuantifier = ∀ x: P(x);
	let existsQuantifier = ∃ x: P(x);

	let logicalAnd2 = p ∧ q;
	let logicalOr2 = p ∨ q;
	let logicalNot2 = ¬p;
	let implies = p ⇒ q;
	let biconditional = p ⇔ q;
	let entailment = A ⊢ B;

	// 15. GREEK LETTERS AND SPECIAL SYMBOLS
	let alpha = α;
	let beta = β;
	let gamma = Γ;
	let pi = π;
	let theta = θ;
	let lambda = λ;
	let omega = Ω;
	let integers = ℤ;
	let rationals = ℚ;
	let reals = ℝ;
	let naturals = ℕ;
	let complexNumbers = ℂ;


	// 16. SUBSCRIPTS AND SUPERSCRIPTS
	let subscripted = x₁;
	let superscripted = x²;
	let subscriptedNegative = x₋₁;
	let complexExponent = e^(i·π);

	// 17. SPECIAL MATH OPERATORS
	let gradient = ∇f;
	let integral = ∫f;
	let summation = ∑f;
	let derivative = d/dx(f);
	let partialDerivative = ∂/∂x(f);
	let tensorProduct = A ⊗ B;
	let directProduct = G × H;
	let composition = f ∘ g;
	let groupOrder = |G|;

	// 18. FUNCTION TYPES AND TYPE OPERATIONS
	let functionType = A → B;
	let typeAnnotation = expr : Type;
	let notTypeAnnotation = expr !: Type;
	let typeSubstitution = expr[T := U];


	// 19. GROUP THEORY
	let normalSubgroup = H ⊲ G;
	let isomorphism = G ≅ H;
	let rightSemiDirectProduct = N ⋊ H;
	let leftSemiDirectProduct = H ⋉ N;

	// 20. REWRITING RULES
	let simpleRule = a + b ⇒ b + a;
	let conditionalRule = expr ⇒ simplified if condition;
	let bidirectionalRule = a * b ⇔ b * a;

	// 21. AST OPERATIONS
	let quotedExpr = quote(a + b * c);
	let makeAstExample = makeAst("+", [a, b]);

	// 22. ENVIRONMENT BINDINGS
	let envBindingLambda = \{x = 10, y = 20} z.x + y + z;


	// 23. MIXED SYNTAX
	let complexExpr = \x.(if x ∈ ℕ then 
		∑{i | i ∈ {1, 2, ..., x}} 
		else 
		∫(λy.y^2)(x));

	// 24. FINAL EXPRESSION
	(let result = 42; println(i2s(result)); result)
);

let g = makeOGraph("graph");
let n = addOGraphWithSub(g, f, []);
setFileContent("test.dot", ograph2dot(g));

let f2 = extractOGraph(g, n);
// println(f2);

println("Second graph");

let g2 = makeOGraph("graph2");
let n2 = addOGraphWithSub(g2, f2, []);
setFileContent("test2.dot", ograph2dot(g2));
