// File: ograph_tests/rewrites.orb
// Source: https://www.philipzucker.com/rewrite_rules/

// --- Integer Properties ---
// Variables n, m, k are assumed to be Integer

// Addition
n + m         ↔ m + n             : Integer : S₂ // Commutativity
n + (m + k)   ↔ (n + m) + k       : Integer // Associativity
n + 0         ↔ n                 : Integer // Identity
n + (-n)      ↔ 0                 : Integer // Inverse

// Multiplication
n * m         ↔ m * n             : Integer : S₂ // Commutativity
n * (m * k)   ↔ (n * m) * k       : Integer // Associativity
n * 1         ↔ n                 : Integer // Identity
n * 0         ↔ 0                 : Integer // Annihilation

// Subtraction
n - n         ↔ 0                 : Integer
n - m         ↔ n + (-m)          : Integer

// Distribution
n * (m + k)   ↔ (n * m) + (n * k) : Integer // Left Distributivity
(m + k) * n   ↔ (m * n) + (k * n) : Integer // Right Distributivity

// Order Relations (<=, <)
n ≤ n                               : Integer // Reflexivity
(n ≤ m) ∧ (m ≤ k) ⇒ (n ≤ k)         : Integer // Transitivity (Le)
(n < m) ∧ (m < k) ⇒ (n < k)         : Integer // Transitivity (Lt)
// Totality: n < m ∨ n = m ∨ m < n (This is an axiom, not easily a rule)

// Monotonicity
(n ≤ m) ⇒ (n + k ≤ m + k)           : Integer // Additive Monotonicity
(n ≤ m) ∧ (k ≥ 0) ⇒ (n * k ≤ m * k) : Integer // Multiplicative Monotonicity (k>=0)


// --- Differentiation ---
// Variables: x, c : Real; f, g : Real → Real
// Operators: ∂ (derivative), const (constant function), X (identity function λx.x)

∂(const(c)) → const(0)              : Function
∂(X)         → const(1)              : Function
∂(f + g)     → ∂(f) + ∂(g)           : Function // Linearity
∂(f * g)     → (∂(f) * g) + (f * ∂(g)) : Function // Product Rule
// Note: The article mentions different semantic approaches (Yoneda, manifolds).
// These rules represent the standard calculus approach.


// --- Set Theory ---
// Variables A, B, C : Set<T>
// Operators: ∪ (union), ∩ (intersection), ∖ (difference), ∅ (empty set), U (universal set)

// Union
A ∪ B       ↔ B ∪ A           : Set : S₂ // Commutativity
(A ∪ B) ∪ C ↔ A ∪ (B ∪ C)     : Set // Associativity
A ∪ ∅       ↔ A               : Set // Identity
A ∪ U       ↔ U               : Set // Annihilation (with Universal Set)
A ∪ A       ↔ A               : Set // Idempotence

// Intersection
A ∩ B       ↔ B ∩ A           : Set : S₂ // Commutativity
(A ∩ B) ∩ C ↔ A ∩ (B ∩ C)     : Set // Associativity
A ∩ U       ↔ A               : Set // Identity (with Universal Set)
A ∩ ∅       ↔ ∅               : Set // Annihilation
A ∩ A       ↔ A               : Set // Idempotence

// Difference
A ∖ ∅       ↔ A               : Set
A ∖ U       ↔ ∅               : Set
A ∖ A       ↔ ∅               : Set

// Distributivity
A ∩ (B ∪ C) ↔ (A ∩ B) ∪ (A ∩ C) : Set
A ∪ (B ∩ C) ↔ (A ∪ B) ∩ (A ∪ C) : Set

// Absorption
A ∩ (A ∪ B) ↔ A               : Set
A ∪ (A ∩ B) ↔ A               : Set


// --- BitVectors ---
// Variables x, y, z : BitVec<N>
// Constants: 0bv, 1bv, neg1bv (all bits set)
// Operators: +, -, *, &, |, ^, ~, <<, >> (logical right), >>> (arithmetic right)

// Addition
x + y       ↔ y + x           : BitVec<N> : S₂
(x + y) + z ↔ x + (y + z)     : BitVec<N>
x + 0bv     ↔ x               : BitVec<N>
x + (-x)    ↔ 0bv             : BitVec<N>

// Subtraction
x - x       ↔ 0bv             : BitVec<N>
x - y       ↔ x + (-y)        : BitVec<N>
x - 0bv     ↔ x               : BitVec<N>
0bv - x     ↔ -x              : BitVec<N>
x - (-y)    ↔ x + y           : BitVec<N>

// Multiplication
x * y       ↔ y * x           : BitVec<N> : S₂
(x * y) * z ↔ x * (y * z)     : BitVec<N>
x * 1bv     ↔ x               : BitVec<N>
x * 0bv     ↔ 0bv             : BitVec<N>

// Bitwise AND (&)
x & y       ↔ y & x           : BitVec<N> : S₂
(x & y) & z ↔ x & (y & z)     : BitVec<N>
x & neg1bv  ↔ x               : BitVec<N> // Identity (all ones)
x & 0bv     ↔ 0bv             : BitVec<N> // Annihilation
x & x       ↔ x               : BitVec<N> // Idempotence

// Bitwise OR (|)
x | y       ↔ y | x           : BitVec<N> : S₂
(x | y) | z ↔ x | (y | z)     : BitVec<N>
x | 0bv     ↔ x               : BitVec<N> // Identity
x | neg1bv  ↔ neg1bv          : BitVec<N> // Annihilation (all ones)
x | x       ↔ x               : BitVec<N> // Idempotence
x | ~x      ↔ neg1bv          : BitVec<N>

// Bitwise XOR (^)
x ^ y       ↔ y ^ x           : BitVec<N> : S₂
(x ^ y) ^ z ↔ x ^ (y ^ z)     : BitVec<N>
x ^ 0bv     ↔ x               : BitVec<N> // Identity
x ^ x       ↔ 0bv             : BitVec<N> // Self-inverse

// Bitwise NOT (~)
~(~x)       ↔ x               : BitVec<N> // Involution (often implicit in other rules)
// ~x          ↔ -x - 1bv      : BitVec<N> // Relation to negation

// Shifts (<<, >>, >>>)
x << 0bv    ↔ x               : BitVec<N>
x >> 0bv    ↔ x               : BitVec<N>
x >>> 0bv   ↔ x               : BitVec<N>
0bv << y    ↔ 0bv             : BitVec<N>
0bv >> y    ↔ 0bv             : BitVec<N>
0bv >>> y   ↔ 0bv             : BitVec<N>
// x << y      ↔ x * (1bv << y)  : BitVec<N> // Left shift as multiplication (careful with overflow)

// Distribution and Absorption
x & (y | z) ↔ (x & y) | (x & z) : BitVec<N>
x | (y & z) ↔ (x | y) & (x | z) : BitVec<N>
x & (x | y) ↔ x               : BitVec<N> // Absorption
x | (x & y) ↔ x               : BitVec<N> // Absorption

// Other Bitwise Interactions
(x & y) | (x & ~y) ↔ x        : BitVec<N>
// (x & y) ^ (x & ~y) ↔ y (?) // Article states this, seems potentially incorrect or needs clarification

// Shift Interactions (distribution)
// (x & y) << z ↔ (x << z) & (y << z) : BitVec<N> // Be careful with semantics/overflow
// (x & y) >> z ↔ (x >> z) & (y >> z) : BitVec<N>


// --- DNF (Disjunctive Normal Form) for Booleans ---
// Variables p, q, r : Boolean
// Operators: ¬ (not), ∧ (and), ∨ (or)

¬(¬p)       ↔ p                 : Boolean // Double Negation
¬(p ∨ q)   ↔ (¬p) ∧ (¬q)       : Boolean // De Morgan's Law
¬(p ∧ q)   ↔ (¬p) ∨ (¬q)       : Boolean // De Morgan's Law
p ∧ (q ∨ r) → (p ∧ q) ∨ (p ∧ r) : Boolean // Distribution (for DNF)
(p ∨ q) ∧ r → (p ∧ r) ∨ (q ∧ r) : Boolean // Distribution (for DNF)

// Also need commutativity/associativity/idempotence for ∧ and ∨, plus absorption rules.
// These are similar to Set rules but for Boolean domain.
p ∨ q       ↔ q ∨ p             : Boolean : S₂
(p ∨ q) ∨ r ↔ p ∨ (q ∨ r)       : Boolean
p ∨ ⊥       ↔ p                 : Boolean // ⊥ is False
p ∨ ⊤       ↔ ⊤                 : Boolean // ⊤ is True
p ∨ p       ↔ p                 : Boolean

p ∧ q       ↔ q ∧ p             : Boolean : S₂
(p ∧ q) ∧ r ↔ p ∧ (q ∧ r)       : Boolean
p ∧ ⊤       ↔ p                 : Boolean
p ∧ ⊥       ↔ ⊥                 : Boolean
p ∧ p       ↔ p                 : Boolean

p ∧ (p ∨ q) ↔ p                 : Boolean
p ∨ (p ∧ q) ↔ p                 : Boolean


// --- SKI Combinators ---
// Variables x, y, z : Term
// Operators: I, K, S (combinators), app (application, written as juxtaposition)

I x         → x                 : Term
K x y       → x                 : Term
S x y z     → (x z) (y z)       : Term


// --- Array/Memory Operations (Egglog Example) ---
// Variables: mem, mem1 : Array; i, i1, i2, e, e1, e2 : Math (Index/Value)
// Operators: select, store, neq (not equal)

select(store(mem, i, e), i)       → e
store(store(mem, i, e1), i, e2) → store(mem, i, e2)

// Conditional rules (need guards in Orbit)
select(store(mem, i1, e), i2) → select(mem, i2) if neq(i1, i2)
store(store(mem, i2, e2), i1, e1) → store(store(mem, i1, e1), i2, e2) if neq(i1, i2)

// neq property
neq(x, y) → neq(y, x)


// --- Summation ---
// Variables: f, g : Sequence<Real>; c : Real; a, b : Integer
// Operator: Σ(sequence, lower_bound, upper_bound)

Σ(f, a, a)         → f[a]                                : Real
Σ(f + g, a, b)     → Σ(f, a, b) + Σ(g, a, b)             : Real // Linearity
Σ(f - g, a, b)     → Σ(f, a, b) - Σ(g, a, b)             : Real // Linearity
Σ(λi.c * f[i], a, b) → c * Σ(f, a, b)                    : Real // Constant Factor
Σ(λi.c, a, b)      → c * (b - a + 1)                   : Real // Constant Sum
// Σ(f, a, b)         ↔ Σ(f, 0, b) - Σ(f, 0, a-1)         : Real // Range splitting (careful with directionality)


// --- Kleene Algebra ---
// Variables: a, b, c : Kleene Element
// Operators: +, *, Kleene Star (*)
// Additive properties (Idempotent Semiring)
a + b       ↔ b + a             // Commutativity
(a + b) + c ↔ a + (b + c)       // Associativity
a + 0       ↔ a                 // Identity
a + a       ↔ a                 // Idempotence

// Multiplicative properties (Monoid)
(a * b) * c ↔ a * (b * c)       // Associativity
a * 1       ↔ a                 // Left Identity
1 * a       ↔ a                 // Right Identity
a * 0       ↔ 0                 // Left Annihilation
0 * a       ↔ 0                 // Right Annihilation

// Distribution
a * (b + c) ↔ (a * b) + (a * c) // Left Distributivity
(a + b) * c ↔ (a * c) + (b * c) // Right Distributivity

// Kleene Star (*) Properties
1 + a * a*  ↔ a*
1 + a* * a  ↔ a*
b + a * c ≤ c ⇒ a* * b ≤ c      // Star Induction (L) (conditional)
b + c * a ≤ c ⇒ b * a* ≤ c      // Star Induction (R) (conditional)
// Note: The ≤ relation implies a partial order a ≤ b ⇔ a + b = b


// --- Associativity (Generic Binary Operator binop) ---
// Variables x, y, z : T
// Operator: * (representing binop)
x * (y * z) ↔ (x * y) * z       // General Associativity


// --- Hlint Examples (Functional Programming Idioms) ---
// Assuming compare returns LT (-1), EQ (0), GT (1)
compare(x, y) == LT ↔ x < y
compare(x, y) != LT ↔ x ≥ y
compare(x, y) == GT ↔ x > y
compare(x, y) != GT ↔ x ≤ y
compare(x, y) == EQ ↔ x == y
compare(x, y) != EQ ↔ x ≠ y

// List operations (assuming suitable definitions)
head(sort(x))       → minimum(x)
last(sort(x))       → maximum(x)
head(sortBy(f, x))  → minimumBy(f, x) // if f is a comparison
last(sortBy(f, x))  → maximumBy(f, x) // if f is a comparison
reverse(sort(x))    → sortBy(comparing(Down), x) // Down reverses order

// Conditional simplification
if a ≥ b then a else b → max(a, b)

// List element checks
findIndices(λe. e == a, xs) → elemIndices(a, xs)
elem(x, [y])        → x == y
notElem(x, [y])     → x ≠ y
length([1..n])      → max(0, n)
length(x) ≥ 0       → true
0 ≤ length(x)       → true

// Functor/Applicative idioms
pure(x) <* y        → x <$ y           // (<$) is replace left with value
const(x) <$> y      → x <$ y
x <&> const(y)      → x $> y           // ($>) is replace right with value

// --- Halide Example Snippets (Vector/Broadcast Ops) ---
// Variables: x, y, z, w : Scalar; c0, c1 : Integer (width)
// Operators: ramp(base, stride, width), broadcast(val, width)

x - x → 0 // Scalar

// Assuming ramp/broadcast ops are defined with appropriate types/domains
// Vector Subtraction
ramp(x, y, c0) - ramp(z, w, c0)       → ramp(x - z, y - w, c0)
ramp(x, y, c0) - broadcast(z, c0)     → ramp(x - z, y, c0)
broadcast(x, c0) - ramp(z, w, c0)     → ramp(x - z, -w, c0)
broadcast(x, c0) - broadcast(y, c0)   → broadcast(x - y, c0)
// broadcast(x, c0) - broadcast(y, c1)   → broadcast(x - broadcast(y, fold(c1/c0)), c0) if c1 % c0 == 0 // Conditional


// --- CVC5 Arithmetic Rules ---
// Operators: /_total (real division, 0 if denom is 0), div_total (int division), mod_total
// Variables: t, s (Real or Int depending on context)

// Division total definitions (conditional)
t / s → /_total(t, s) if is_real(t) ∧ is_real(s) ∧ s ≠ 0.0
t / s → /_total(t, s) if is_int(t) ∧ is_int(s) ∧ s ≠ 0

// Division by zero
/_total(t, 0.0) → 0.0  // Real
/_total(t, 0)   → 0    // Integer (Note: article says 0/1 -> 0.0, seems inconsistent with int rule)

// Integer Division Total
div(t, s) → div_total(t, s) if is_int(t) ∧ is_int(s) ∧ s ≠ 0
div_total(t, 1)  → t
div_total(t, 0)  → 0 // Defined as 0 when divisor is 0
div_total(t, s)  → -(div_total(t, -s)) if s < 0

// Integer Modulo Total
mod(t, s) → mod_total(t, s) if is_int(t) ∧ is_int(s) ∧ s ≠ 0
mod_total(t, 1)  → 0
mod_total(t, 0)  → t // Defined as t when divisor is 0
mod_total(t, s)  → mod_total(t, -s) if s < 0 // Modulo positive divisor

// Relation Eliminations
t > s  → ¬(t ≤ s)             : Real // Eliminate > for reals
t < s  → ¬(t ≥ s)             : Real // Eliminate < for reals
t ≤ s  ↔ s ≥ t                : Real // Symmetry of ≤/≥

// Integer Relation Eliminations
t > s  → t ≥ (s + 1)          : Integer // Eliminate > for integers
t < s  → s ≥ (t + 1)          : Integer // Eliminate < for integers

