// https://alistairsavage.ca/mat1362/notes/MAT1362-Mathematical_reasoning_and_proofs.pdf

// === Chapter 1: Integers ===

// Domain Definition
// Implicitly, we assume a base domain 'Integer'

// --- 1.1 Axioms ---

// Axiom 1.1 (Commutativity, Associativity, Distributivity)
a + b : Integer ↔ b + a : Integer : S₂  // Commutativity of Addition
(a + b) + c : Integer ↔ a + (b + c) : Integer : A // Associativity of Addition
a * (b + c) : Integer → (a * b) + (a * c) : Integer // Distributivity (Left)
// Prop 1.6 covers right distributivity: (a + b) * c → a*c + b*c
a * b : Integer ↔ b * a : Integer : S₂ // Commutativity of Multiplication
(a * b) * c : Integer ↔ a * (b * c) : Integer : A // Associativity of Multiplication

// Axiom 1.2 (Additive Identity)
a + 0 : Integer → a : Integer
0 + a : Integer → a : Integer // Follows from Prop 1.7 & Commutativity

// Axiom 1.3 (Multiplicative Identity)
a * 1 : Integer → a : Integer
1 * a : Integer → a : Integer // Follows from Prop 1.7 & Commutativity
// Constraint: 1 ≠ 0 (Property, not a rewrite rule)
statement(1 ≠ 0) // Explicit statement of property

// Axiom 1.4 (Additive Inverse)
a + (-a) : Integer → 0 : Integer
(-a) + a : Integer → 0 : Integer // Follows from Prop 1.8 & Commutativity

// Axiom 1.5 (Cancellation)
// Property: a:Integer ∧ a≠0 ∧ a*b = a*c ⇒ b = c
(a*b = a*c) : Integer → (b = c) : Integer if (a:Integer ∧ a ≠ 0)
// Or handled implicitly by the system's congruence.

// --- 1.2 First consequences ---

// Prop 1.6 (Right Distributivity)
(a + b) * c : Integer → (a * c) + (b * c) : Integer

// Prop 1.10 (Uniqueness of Additive Inverse)
// Property: a: Integer ∧ a + b = 0 ⇒ b = -a
statement(∀ a:Integer . (∀ b:Integer . ( (a + b = 0) ⇒ (b = -a) )))
// Ensures '-a' is well-defined.

// Prop 1.11 (Various Associativity/Distributivity combinations)
// These are derivable from Axiom 1.1, potentially useful shortcuts.
(a+b)*(c+d) → (a*c + b*c) + (a*d + b*d) // (i)
a*(b+(c+d)) → (a*b + a*c) + a*d // (v) - combines distributivity & associativity

// Prop 1.12, 1.13 (Uniqueness of Additive Identity)
// Prop 1.12: (∀ b:Integer . b+a = b) ⇒ a = 0
statement( (∀ b:Integer . b+a = b) ⇒ (a = 0) )
// Prop 1.13: (∃ b:Integer . b+a = b) ⇒ a = 0
statement( (∃ b:Integer . b+a = b) ⇒ (a = 0) )

// Prop 1.14 (Multiplication by Zero)
a * 0 : Integer → 0 : Integer
0 * a : Integer → 0 : Integer

// Prop 1.15 (Closure of Even numbers)
// Requires 'Even' domain or predicate 'is_even'.
is_even(a) ∧ is_even(b) ⇒ is_even(a+b)
is_even(a) ∧ is_even(b) ⇒ is_even(a*b)
is_even(n) ↔ ∃ k:Integer . (n = 2*k)

// Prop 1.19 (Negative Multiplication 1)
(-a) * b : Integer ↔ -(a*b) : Integer
a * (-b) : Integer ↔ -(a*b) : Integer // Prop 1.24(iii)

// Prop 1.20 (Double Negation)
-(-a) : Integer → a : Integer
-0 : Integer → 0 : Integer

// Prop 1.21 (Negative Multiplication 2)
(-a) * (-b) : Integer ↔ a * b : Integer
(-1) * (-1) : Integer → 1 : Integer // Specific instance

// Prop 1.22 (Existence/Uniqueness of Subtraction Result)
// Property related to solving a+c=b, ensures 'b-a' is well-defined.
statement(∀ a:Integer . (∀ b:Integer . (∃! c:Integer . (a+c = b))))

// Prop 1.23 (Idempotents)
// Property: a:Integer ∧ a*a = a ⇒ a = 0 ∨ a = 1
statement(∀ a:Integer . ( (a*a = a) ⇒ (a = 0 ∨ a = 1) ))

// Prop 1.24 (Properties of Negation)
-(a + b) : Integer ↔ (-a) + (-b) : Integer
-a : Integer ↔ (-1) * a : Integer
// Part (iii) covered by Prop 1.19/Symmetry

// Prop 1.26 (Zero Product Property)
// Property: a:Integer ∧ b:Integer ∧ a*b = 0 ⇒ a = 0 ∨ b = 0
statement(∀ a:Integer . (∀ b:Integer . ( (a*b = 0) ⇒ (a = 0 ∨ b = 0) )))

// --- 1.3 Subtraction ---

// Def 1.27 (Subtraction)
a - b : Integer ↔ a + (-b) : Integer

// Prop 1.28 (Properties of Subtraction)
// These can be derived using Def 1.27 and properties of +,-,*.
(a-b)+(c-d) ↔ (a+c)-(b+d) // (i)
(a-b)-(c-d) ↔ (a+d)-(b+c) // (ii)
(a-b)*(c-d) ↔ (a*c+b*d)-(a*d+b*c) // (iii)
(a-b)*c → a*c - b*c // (v)


// === Chapter 2: Natural Numbers and Induction ===

// Domain Definitions
Natural ⊂ Integer
Z≥0 = {n : Integer | n ≥ 0} // Non-negative Integers

// --- 2.1 Natural numbers ---

// Axiom 2.1 (Properties of N)
// (i) Closure under Addition
a:Natural, b:Natural ⇒ a+b : Natural
// (ii) Closure under Multiplication
a:Natural, b:Natural ⇒ a*b : Natural
// (iii) 0 not in N
statement(¬ (0 : Natural))
// (iv) Trichotomy Property
statement(∀ a:Integer . (a:Natural ∨ (a = 0) ∨ (-a):Natural))
// Property: Exactly one holds (Prop 2.3)
statement(∀ a:Integer . ¬(a:Natural ∧ (a=0)))
statement(∀ a:Integer . ¬(a:Natural ∧ (-a):Natural))
statement(∀ a:Integer . ¬((a=0) ∧ (-a):Natural))

// Prop 2.4 (1 is Natural)
statement(1 : Natural)

// --- 2.2 Ordering the integers ---

// Definition 2.5 (Order Predicates)
a < b ↔ (b - a) : Natural
b > a ↔ (b - a) : Natural
a ≤ b ↔ (a < b) ∨ (a = b)
b ≥ a ↔ (b > a) ∨ (b = a)

// Prop 2.6 (Transitivity of <)
(a < b) ∧ (b < c) ⇒ (a < c)

// Prop 2.8 (Antisymmetry of ≤)
(a ≤ b) ∧ (b ≤ a) ⇒ (a = b)

// Prop 2.9 (Properties of inequalities)
a < b ⇒ a+c < b+c // (i)
(a < b) ∧ (c < d) ⇒ a+c < b+d // (ii)
(a > 0) ∧ (a < b) ∧ (c > 0) ∧ (c ≤ d) ⇒ a*c < b*d // (iii)
(a < b) ∧ (c < 0) ⇒ b*c < a*c // (iv)

// Prop 2.10 (Trichotomy Law for Order)
statement(∀ a:Integer . (∀ b:Integer . exactly_one(a < b, a = b, a > b)))
// where exactly_one(P,Q,R) ↔ (P ∨ Q ∨ R) ∧ ¬(P∧Q) ∧ ¬(P∧R) ∧ ¬(Q∧R)

// Prop 2.11 (Square of Non-Zero is Positive)
a:Integer ∧ a ≠ 0 ⇒ a*a : Natural

// Prop 2.13 (Divisibility implies positive divisor)
a:Natural ∧ b:Integer ∧ divides(a, b*a) ⇒ b : Natural // Requires divides predicate

// Prop 2.15 (Equivalence of N definition)
n:Natural ↔ n:Integer ∧ n > 0

// --- 2.3 Induction ---
// Axiom 2.17 (Induction Axiom) & Thm 2.19, 2.26 (Induction Principle)
// These are proof principles/meta-rules. Can represent their structure:
// Induction Principle (Thm 2.19 Structure):
// Let P(k) be a statement predicate.
// MetaRule: If (P(1) ∧ (∀ n:Natural . (P(n) ⇒ P(n+1)))) then (∀ k:Natural . P(k))

// Results derived using induction become rules/statements:
// Prop 2.21 (Naturals ≥ 1)
a:Natural ⇒ a ≥ 1

// Prop 2.22 (No integer between 0 and 1)
statement(¬ (∃ a:Integer . (a > 0 ∧ a < 1)))

// Prop 2.24 (Divisor ≤ Dividend for Naturals)
a:Natural ∧ b:Natural ∧ divides(b, a) ⇒ b ≤ a

// --- 2.4 Well-ordering ---
// Thm 2.33 (Well-ordering principle)
// Property of Natural:
statement(∀ A:Set . ( (subset(A, Natural) ∧ A ≠ ∅) ⇒ (∃ m:A . (∀ a:A . a ≥ m)) ))
// Requires Set domain, subset, ∅, ∃, ∀.

// Def 2.36 (gcd)
// Defines a function gcd(a, b). Rules would be about its properties (see Ch 6).


// === Chapter 3: Logic ===
// Rules for manipulating logical formulas (using UTF-8 symbols):
¬(¬ P) → P
¬(P ∨ Q) ↔ (¬ P) ∧ (¬ Q)
¬(P ∧ Q) ↔ (¬ P) ∨ (¬ Q)
(P ⇒ Q) ↔ (¬ P) ∨ Q
¬(P ⇒ Q) ↔ P ∧ (¬ Q) // Negation of implication
(P ⇔ Q) ↔ (P ⇒ Q) ∧ (Q ⇒ P) // Definition of iff
(P ⇔ Q) ↔ (P ∧ Q) ∨ ( (¬ P) ∧ (¬ Q) ) // Alternative iff definition

// Quantifier Negation Rules:
¬(∀ x:D . P(x)) ↔ ∃ x:D . ¬(P(x))
¬(∃ x:D . P(x)) ↔ ∀ x:D . ¬(P(x))

// Rules for "exists!" (unique existence)
(∃! x:D . P(x)) ↔ (∃ x:D . P(x)) ∧ (∀ y:D . (∀ z:D . ( (P(y) ∧ P(z)) ⇒ (y=z) )))


// === Chapter 4: Finite Series and Strong Induction ===

// --- 4.1 Preliminaries ---
// Sequence definitions are meta-level. Factorial function:
fact(0) → 1
fact(n) → n * fact(n - 1) if n ∈ Natural // Recursive definition (n>0 covered by n:Natural)

// Summation/Product notation needs functions: sum(var, lower, upper, expr), product(...)
// Properties from 4.2 could become rules for these functions.

// --- 4.2 Finite series ---
// Prop 4.4 (Sum of first n integers/squares)
sum(j, 1, n, j) → n*(n+1)/2 if n:Natural // Requires division / Rational domain potentially
sum(j, 1, n, j*j) → n*(n+1)*(2*n+1)/6 if n:Natural

// Prop 4.5 (Geometric Series)
sum(j, 0, n, pow(x, j)) → (1 - pow(x, n+1)) / (1 - x) if (n:Z≥0 ∧ x ≠ 1)

// Prop 4.6 (Sum properties)
sum(j, m, M, c * term(j)) ↔ c * sum(j, m, M, term(j))
sum(j, 1, n, c) → n * c if n:Natural

// Prop 4.7 (Sum properties)
sum(j, a, c, term(j)) ↔ sum(j, a, b, term(j)) + sum(j, b+1, c, term(j)) if a ≤ b < c
sum(j, a, b, t1(j) + t2(j)) ↔ sum(j, a, b, t1(j)) + sum(j, a, b, t2(j))

// Prop 4.8 (Index Shift)
sum(j, m, M, term(j)) ↔ sum(k, m+r, M+r, term(k-r)) // Using k=j+r

// --- 4.3 The Binomial Theorem ---
// Binomial coefficient function choose(k, m)
choose(k, m) → fact(k) / (fact(m) * fact(k-m)) if m:Z≥0 ∧ k:Z≥0 ∧ m ≤ k
// Prop 4.11 (Pascal's Identity)
choose(n+1, m) → choose(n, m-1) + choose(n, m) if n:Z≥0 ∧ m:Natural ∧ m ≤ n
// Thm 4.12 (Binomial Theorem)
pow(a+b, k) ↔ sum(m, 0, k, choose(k, m) * pow(a, m) * pow(b, k-m)) if k:Z≥0
// Cor 4.13
sum(m, 0, k, choose(k, m)) → pow(2, k) if k:Z≥0

// --- 4.4 Strong Induction ---
// Strong Induction Principle (Thm 4.14 Structure):
// Let P(k) be a statement predicate.
// MetaRule: If (P(1) ∧ (∀ n:Natural . ( (∀ j:Integer . (1 ≤ j ≤ n ⇒ P(j)) ) ⇒ P(n+1)) ) ) then (∀ k:Natural . P(k))


// === Chapter 5: Naive Set Theory ===

// Domain: Set
// Operations: union(A,B), intersect(A,B), difference(A,B), complement(A,X), cartesian_product(A,B)
// Relations: subset(A,B), element(x,A)
// Constants: ∅ (emptyset)

// --- 5.1 Subsets and equality ---
// Definitions and Properties
x ∈ A ⇒ subset(A, A) // Reflexivity (Derived from definition)
subset(A, B) ∧ subset(B, C) ⇒ subset(A, C) // Transitivity (Prop 5.1.ii)
A = B ↔ subset(A, B) ∧ subset(B, A) // Equality definition
subset(A, B) ↔ (∀ x . (x ∈ A ⇒ x ∈ B)) // Subset definition
subset(∅, A) // Prop 5.5

// --- 5.2 Intersections and unions ---
// Definitions via elementhood:
x ∈ union(A, B) ↔ x ∈ A ∨ x ∈ B
x ∈ intersect(A, B) ↔ x ∈ A ∧ x ∈ B
x ∈ difference(A, B) ↔ x ∈ A ∧ ¬(x ∈ B)
x ∈ complement(A, X) ↔ x ∈ X ∧ ¬(x ∈ A) // Assuming A ⊆ X
x ∈ symmetric_difference(A, B) ↔ (x ∈ difference(A, B)) ∨ (x ∈ difference(B, A))

// Properties:
union(A, B) : Set ↔ union(B, A) : Set : S₂
intersect(A, B) : Set ↔ intersect(B, A) : Set : S₂
union(union(A, B), C) : Set ↔ union(A, union(B, C)) : Set : A
intersect(intersect(A, B), C) : Set ↔ intersect(A, intersect(B, C)) : Set : A

// Thm 5.9 (De Morgan's Laws for Sets)
complement(intersect(A, B), X) ↔ union(complement(A, X), complement(B, X))
complement(union(A, B), X) ↔ intersect(complement(A, X), complement(B, X))

// Props 5.11, 5.12 (Distributivity)
intersect(C, union(A, B)) ↔ union(intersect(C, A), intersect(C, B))
union(C, intersect(A, B)) ↔ intersect(union(C, A), union(C, B))

// --- 5.3 Cartesian products ---
// Function: cartesian_product(A, B)
// Definition: (a,b) ∈ cartesian_product(A, B) ↔ a ∈ A ∧ b ∈ B
// Prop 5.19 (Distributivity over Union/Intersection)
cartesian_product(A, union(B, C)) ↔ union(cartesian_product(A, B), cartesian_product(A, C))
cartesian_product(A, intersect(B, C)) ↔ intersect(cartesian_product(A, B), cartesian_product(A, C))

// --- 5.4 Functions ---
// Domain: Function(A, B) where A=Domain, B=Codomain
// apply(f, x) function application
// composition: compose(g, f)
apply(compose(g, f), a) ↔ apply(g, apply(f, a))
// identity function: id(A)
compose(f, id(A)) → f
compose(id(B), f) → f
// Graph definition: graph(f) = {(a, apply(f,a)) | a ∈ domain(f)}

// --- 5.5 Russell's Paradox ---
// Meta-level issue about set definitions, not translatable to rules.


// === Chapter 6: Equivalence Relations and Modular Arithmetic ===

// Relations: eq_rel(R, A) means R is an equivalence relation on A
// eq_rel(R, A) ↔ reflexive(R, A) ∧ symmetric(R, A) ∧ transitive(R, A)
// reflexive(R, A) ↔ ∀ a∈A . R(a, a)
// symmetric(R, A) ↔ ∀ a,b∈A . (R(a, b) ⇒ R(b, a))
// transitive(R, A) ↔ ∀ a,b,c∈A . (R(a, b) ∧ R(b, c) ⇒ R(a, c))
// Equivalence Class: class(a, R) = { b ∈ A | R(b, a) }

// --- 6.3 The integers modulo n ---
// Domain: IntegerMod(n)
// Relation: congruent(a, b, n) ↔ divides(n, a-b)
// statement(eq_rel(congruent(.,.,n), Integer)) // Prop 6.18(i)

// Representation: mod(a, n) for the canonical representative [0..n-1]
// Definition: mod(a,n) = class(a, congruent(.,.,n))
// Definition: mod(a, n) = mod(b, n) ↔ congruent(a, b, n)

// Canonical Representation Rule
mod(a, n) : IntegerMod(n) → mod(remainder(a, n), n) : IntegerMod(n) : Canonical // remainder(a,n) is the unique r in [0, n-1] s.t. a=qn+r

// Operations (using canonical reps implicitly or explicitly)
mod(a, n) + mod(b, n) : IntegerMod(n) → mod(a+b, n) : IntegerMod(n) // Using '+' for modular add
mod(a, n) * mod(b, n) : IntegerMod(n) → mod(a*b, n) : IntegerMod(n) // Using '*' for modular mul

// Prop 6.25 Properties (translated for mod(a,n) representation)
mod(a, n) + mod(b, n) ↔ mod(b, n) + mod(a, n) : S₂
(mod(a, n) + mod(b, n)) + mod(c, n) ↔ mod(a, n) + (mod(b, n) + mod(c, n)) : A
mod(a, n) * (mod(b, n) + mod(c, n)) → (mod(a, n)*mod(b, n)) + (mod(a, n)*mod(c, n))
mod(a, n) * mod(b, n) ↔ mod(b, n) * mod(a, n) : S₂
(mod(a, n) * mod(b, n)) * mod(c, n) ↔ mod(a, n) * (mod(b, n) * mod(c, n)) : A
mod(a, n) + mod(0, n) → mod(a, n)
mod(a, n) * mod(1, n) → mod(a, n)
mod(a, n) + mod(-a, n) → mod(0, n)

// --- 6.4 Prime numbers ---
// Domain: Prime ⊂ Natural
// Def 6.26: p:Prime ↔ p:Natural ∧ p ≥ 2 ∧ (∀ d:Integer . (divides(d, p) ⇒ d=1 ∨ d=-1 ∨ d=p ∨ d=-p))
// Def 6.26: n:Composite ↔ n:Natural ∧ n ≥ 2 ∧ ¬(n:Prime)

// Prop 6.27 (Existence of Prime Factorization): Meta-property
// Prop 6.28 (Infinitely many primes): Meta-property
// Thm 6.33 (Uniqueness of Prime Factorization): Meta-property

// gcd function properties
gcd(a, b) ↔ gcd(b, a) : S₂
gcd(a, 0) → abs(a)
gcd(a, b) ↔ gcd(b, remainder(a, b)) if b ≠ 0 // Euclidean Algorithm step
gcd(k*m, k*n) ↔ abs(k) * gcd(m, n)
// Prop 6.29 (Properties of gcd)
statement(∀ m,n:Integer . divides(gcd(m,n), m) ∧ divides(gcd(m,n), n)) // (i)
statement(∀ m,n:Integer . ((m≠0 ∨ n≠0) ⇒ gcd(m,n) > 0)) // (ii) Requires Integer > 0
statement(∀ m,n,d:Integer . ((divides(d, m) ∧ divides(d, n)) ⇒ divides(d, gcd(m,n)))) // (iii)

// Prop 6.31 (Euclid's Lemma)
p:Prime ∧ divides(p, m*n) ⇒ divides(p, m) ∨ divides(p, n)

// Thm 6.35 (Fermat's Little Theorem)
// pow(m, p) ≡ m mod p
pow_mod(m, p, p) → mod(m, p) if p : Prime // Rule for pow_mod function

// Cor 6.36
pow_mod(m, p-1, p) → mod(1, p) if p : Prime ∧ ¬ divides(p, m)


// === Chapter 7: Real Numbers ===

// Domain: Real
PositiveReal ⊂ Real
Rational ⊂ Real // Assuming Rational domain defined elsewhere
Integer ⊂ Rational // From Chapter 2
Natural ⊂ Integer // From Chapter 2
R≥0 = {x : Real | x ≥ 0}

// --- 7.1 Axioms ---
// Similar to Integer axioms, but with Real domain.
a + b : Real ↔ b + a : Real : S₂
(a + b) + c : Real ↔ a + (b + c) : Real : A
a * (b + c) : Real → (a * b) + (a * c) : Real
a * b : Real ↔ b * a : Real : S₂
(a * b) * c : Real ↔ a * (b * c) : Real : A
a + 0 : Real → a : Real
a * 1 : Real → a : Real
a + (-a) : Real → 0 : Real
// Axiom 7.5 (Multiplicative Inverse)
a * inv(a) : Real → 1 : Real if a ≠ 0
a * (1 / a) : Real → 1 : Real if a ≠ 0 // Alternative notation
inv(inv(a)) : Real → a : Real if a ≠ 0 // From Cor 7.8
inv(1) : Real → 1 : Real
inv(x * y) : Real ↔ inv(x) * inv(y) : Real if x ≠ 0 ∧ y ≠ 0 // Prop 7.10

// --- Subtraction/Division ---
a - b : Real ↔ a + (-b) : Real
a / b : Real ↔ a * inv(b) : Real if b ≠ 0

// Rules from Exercises (Examples)
(a / c) + (b / c) → (a + b) / c if c ≠ 0 // 7.1.1
(a / b) + (c / d) → (a*d + b*c) / (b*d) if b ≠ 0 ∧ d ≠ 0 // 7.1.2
inv(-x) → -inv(x) if x ≠ 0 // 7.1.3
-(a / b) ↔ (-a) / b ↔ a / (-b) if b ≠ 0 // 7.1.4

// --- 7.2 Positive real numbers and ordering ---
// Domain PositiveReal ⊂ Real
a:PositiveReal, b:PositiveReal ⇒ a+b : PositiveReal
a:PositiveReal, b:PositiveReal ⇒ a*b : PositiveReal
statement(¬ (0 : PositiveReal))
// Trichotomy property:
statement(∀ a:Real . (a:PositiveReal ∨ a=0 ∨ -a:PositiveReal))
statement(∀ a:Real . exactly_one(a:PositiveReal, a=0, -a:PositiveReal)) // Prop 7.14(i)
statement(1 : PositiveReal) // Prop 7.14(ii)

// Order definitions:
x < y ↔ (y - x) : PositiveReal
x > y ↔ (x - y) : PositiveReal
x ≤ y ↔ (x < y) ∨ (x = y)
x ≥ y ↔ (x > y) ∨ (x = y)

// Prop 7.17 (Inverse of Positive is Positive)
x:PositiveReal ⇒ inv(x) : PositiveReal // (i)
x:PositiveReal ∧ y:PositiveReal ∧ x < y ⇒ inv(y) < inv(x) // (ii)

// --- 7.3 Real vs Integers ---
// Properties about density (Thm 7.21) or lack of smallest positive (Thm 7.20) are meta-properties.
// Thm 7.21: ∀ x,y:Real . (x < y ⇒ ∃ z:Real . (x < z ∧ z < y))
// Thm 7.20: ¬ (∃ x:PositiveReal . (∀ y:PositiveReal . x ≤ y))

// --- 7.4 Upper and lower bounds ---
// Concepts of sup, inf, max, min relate to sets of reals.
// Need predicates: is_upper_bound(b, A), is_lower_bound(b, A), is_supremum(b, A), is_infimum(b, A)
// Axiom 7.35 (Completeness):
// statement(∀ A:Set . ( (subset(A, Real) ∧ A ≠ ∅ ∧ (∃ b:Real . is_upper_bound(b, A))) ⇒ (∃ s:Real . is_supremum(s, A)) ))


// === Chapter 8: Injections, Surjections, Bijections ===

// These are properties/domains of functions.
// Domain: Function(A, B)
// Sub-domains: Injective(A,B), Surjective(A,B), Bijective(A,B)
Injective(A,B) ⊂ Function(A,B)
Surjective(A,B) ⊂ Function(A,B)
Bijective(A,B) ⊂ Injective(A,B)
Bijective(A,B) ⊂ Surjective(A,B)
// Definitions:
// f:Injective(A,B) ↔ (f:Function(A,B) ∧ (∀ x,y∈A . (x≠y ⇒ apply(f,x)≠apply(f,y)) ))
// f:Surjective(A,B) ↔ (f:Function(A,B) ∧ (∀ b∈B . ∃ a∈A . apply(f,a)=b ))
// f:Bijective(A,B) ↔ f:Injective(A,B) ∧ f:Surjective(A,B)

// Prop 8.12 (Composition preserves properties)
f:Injective(A,B) ∧ g:Injective(B,C) ⇒ compose(g, f) : Injective(A,C)
f:Surjective(A,B) ∧ g:Surjective(B,C) ⇒ compose(g, f) : Surjective(A,C)
f:Bijective(A,B) ∧ g:Bijective(B,C) ⇒ compose(g, f) : Bijective(A,C)

// Prop 8.16/8.17 (Inverses)
// Need inverse function representation: inverse(f)
f:Bijective(A,B) ⇒ compose(inverse(f), f) = id(A)
f:Bijective(A,B) ⇒ compose(f, inverse(f)) = id(B)
// Existence of left/right inverses implies injectivity/surjectivity requires richer logic.
// f:Function(A,B) ⇒ (f:Injective(A,B) ↔ ∃ g:Function(B,A) . compose(g,f)=id(A)) // Prop 8.16(i)
// f:Function(A,B) ⇒ (f:Surjective(A,B) ↔ ∃ g:Function(B,A) . compose(f,g)=id(B)) // Prop 8.16(ii)
// f:Function(A,B) ⇒ (f:Bijective(A,B) ↔ ∃ g:Function(B,A) . compose(g,f)=id(A) ∧ compose(f,g)=id(B)) // Prop 8.16(iii)

// --- 8.2 Embedding Z in R ---
// Defines a function e: Z -> R. Properties show it preserves structure.
// statement(∀ m,k:Z . e(m+k) = apply(e,m) + apply(e,k)) // homomorphism property
// statement(∀ m,k:Z . e(m*k) = apply(e,m) * apply(e,k)) // homomorphism property
// statement(∀ m,k:Z . (m < k ⇔ apply(e,m) < apply(e,k))) // order preserving
// statement(e : Injective(Z, R)) // injectivity
// These justify treating Z as a subset of R via this embedding 'e'.


// === Chapter 9: Limits ===

// Function: limit(sequence_expr, var → ∞)
// where sequence_expr uses var, e.g., limit(1/k, k → ∞)
// Need sequence domain/representation: Sequence(Real)
// Need convergence predicate: converges_to(seq, L)
// converges_to( (xk), L ) ↔ (∀ ε > 0 . (∃ N ∈ Natural . (∀ n:Natural . (n ≥ N ⇒ abs(apply(xk, n) - L) < ε))))

// --- Specific Limit Rules ---
// Prop 9.12
limit( (1/k), k → ∞ ) → 0
// Prop 9.26
limit( (1/pow(k, l)), k → ∞ ) → 0 if l : Natural
// Prop 9.19
limit( (pow(x, k)), k → ∞ ) → 0 if abs(x) < 1

// --- Arithmetic of Limits (Prop 9.25) ---
// Assuming ak = limit((a_k_expr), k→∞), bk = limit((b_k_expr), k→∞)
limit( (c), k → ∞ ) → c // (i) - constant sequence
limit( (c * a_k_expr), k → ∞ ) ↔ c * limit( (a_k_expr), k → ∞ ) // (ii)
limit( (a_k_expr + b_k_expr), k → ∞ ) ↔ limit( (a_k_expr), k → ∞ ) + limit( (b_k_expr), k → ∞ ) // (iii)
limit( (a_k_expr * b_k_expr), k → ∞ ) ↔ limit( (a_k_expr), k → ∞ ) * limit( (b_k_expr), k → ∞ ) // (iv)
limit( (1 / a_k_expr), k → ∞ ) ↔ 1 / limit( (a_k_expr), k → ∞ ) if limit( (a_k_expr), k → ∞ ) ≠ 0 // (v)

// Prop 9.17 (Ignoring initial terms)
limit( (expr(k+r)), k → ∞ ) ↔ limit( (expr(k)), k → ∞ )

// Properties like Monotonic Convergence (Thm 9.21) or Boundedness (Prop 9.24) are meta-properties about sequences and convergence.
// Thm 9.21: is_monotonic(seq) ∧ is_bounded(seq) ⇒ converges(seq)
// Prop 9.24: converges(seq) ⇒ is_bounded(seq)
