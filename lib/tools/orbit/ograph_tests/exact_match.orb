// More precise test with exact structure matching
import lib/rewrite;

fn quote(e : ast) = e;

println("EXACT STRUCTURE MATCHING FOR QUADRATICS\n");

// Step 1: Create expression and examine structure
let expr = quote(x^2 + 2*x + 1 = 0);
let g = makeOGraph("debug");
let id = addOGraph(g, expr);
let exactExpr = extractOGraph(g, id);
println("Expression: " + prettyOrbit(expr));
println("Extracted structure: " + prettyOrbit(exactExpr));
/*
// Step 2: Try a rule with literal exact structure copying
let exactRule = prepareRule(
	"Exact Structure Match",
	quote(x^2 + 2*x + 1 = 0), // Exact structure from above
	quote(FoundExact(x)),
	true
);
println("\nExact Rule Pattern to look for: " + prettyOrbit(exactRule[1]));
let exactResult = applyRule(exactExpr, exactRule[0], exactRule[1], exactRule[2]);
println("Exact Match Result: " + prettyOrbit(exactResult));
*/
// Step 3: Try a rule with the generic pattern to see why it fails
let genRule = prepareRule(
	"Generic Pattern",
	quote(x^2 + b*x + c = 0),
	quote(FoundGeneric(b, c, x)),
	quote(b != 0),
);
println("\nGeneric Rule Pattern: " + prettyOrbit(genRule[1]));
let genResult = applyRule(exactExpr, genRule);
println("Generic Match Result: " + prettyOrbit(genResult));

// Step 4: Visualize the debug graph to see what's actually in the expression
//println("\nGraph visualization to debug structure:\n" + ograph2dot(g))
