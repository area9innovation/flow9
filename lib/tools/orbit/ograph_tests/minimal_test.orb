// Minimal test case showing pattern matching issues with exponentiation
import lib/rewrite;

// Main function with minimal test cases
fn main() = (
    println("MINIMAL TEST CASE FOR PATTERN MATCHING ISSUES\n");
    
    // Test 1: Simple expression that SHOULD work
    let simple_expr = '(a + b);
    let simple_rule = prepareSimpleRule("Simple Addition", '(a + b), '(Added(a, b)));
	println("Simple rule: " + prettyOrbit(simple_rule[1]));
    let simple_result = applyRule(simple_expr, simple_rule);
    
    println("Test 1: Simple pattern matching");
    println("Expression: " + prettyOrbit(simple_expr));
    println("Pattern: " + prettyOrbit(simple_rule[1]));
    println("Result: " + prettyOrbit(simple_result));
    println("");
    
    // Test 2: Pattern with exponentiation that FAILS
    let power_expr = '(x^2);
    let power_rule = prepareSimpleRule("Power", '(x^2), '(Squared(x)));
    let power_result = applyRule(power_expr, power_rule);
    
    println("Test 2: Pattern with exponentiation (x^2)");
    println("Expression: " + prettyOrbit(power_expr));
    println("Pattern: " + prettyOrbit(power_rule[1]));
    println("Result: " + prettyOrbit(power_result));
    println("");
    
    // Test 3: Alternative with explicit multiplication (should work)
    let mult_expr = '(x * x);
    let mult_rule = prepareSimpleRule("Multiplication", '(x * x), '(Squared(x)));
    let mult_result = applyRule(mult_expr, mult_rule);
    
    println("Test 3: Pattern with multiplication (x * x)");
    println("Expression: " + prettyOrbit(mult_expr));
    println("Pattern: " + prettyOrbit(mult_rule[1]));
    println("Result: " + prettyOrbit(mult_result));
    println("");
    
    // Test 4: Check if the exact structure of the exponentiation pattern matches
    let graph = makeOGraph("debug");
    let id = addOGraph(graph, '(x^2));
    let exactStructure = prettyOrbit(extractOGraph(graph, id));
    
    let power_rule2 = prepareSimpleRule("Exact Power Structure", 
                                 '(exactStructure), // try to match the exact structure
                                 '(ExactSquared(x)));
    let power_result2 = applyRule(power_expr, power_rule2);
    
    println("Test 4: Pattern with exact structure of x^2");
    println("Expression: " + prettyOrbit(power_expr));
    println("Extracted structure: " + exactStructure);
    println("Pattern using exact structure: " + prettyOrbit(power_rule2[1]));
    println("Result: " + prettyOrbit(power_result2));
    println("");
    
    // Test 5: Simple quadratic equation
    let quad_expr = '(x^2 + 2*x + 1 = 0);
    let quad_rule = prepareSimpleRule("Perfect Square", '(x^2 + 2*x + 1 = 0), '(Solution(-1)));
    let quad_result = applyRule(quad_expr, quad_rule);
    
    println("Test 5: Simple quadratic equation");
    println("Expression: " + prettyOrbit(quad_expr));
    println("Pattern: " + prettyOrbit(quad_rule[1]));
    println("Result: " + prettyOrbit(quad_result));
    println("");
    
    // Visualize the structure in DOT format for detailed inspection
    println("Graph structure of x^2:\n" + ograph2dot(graph));
);

// Run the main function
main()