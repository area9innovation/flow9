// Test for gather and scatter natives in Orbit
import lib/rewrite;

// Function to demonstrate the gather and scatter operations
fn testGatherScatter() = (
    // Test expressions with different associative orders
    let expr1 = quote((a + b) + (c + d));      // Right-heavy addition
    let expr2 = quote(a + (b + (c + d)));      // Left-heavy addition
    let expr3 = quote((a * b) * (c * d));      // Right-heavy multiplication
    let expr4 = quote(a * (b * (c * d)));      // Left-heavy multiplication
    let expr5 = quote((a + b) * (c + d));      // Mixed operations
    let expr6 = quote(a + b * c + d * e);      // Mixed precedence
    
    // Print original expressions
    println("Original Expressions:");
    println("Expr 1: " + prettyOrbit(expr1));
    println("Expr 2: " + prettyOrbit(expr2));
    println("Expr 3: " + prettyOrbit(expr3));
    println("Expr 4: " + prettyOrbit(expr4));
    println("Expr 5: " + prettyOrbit(expr5));
    println("Expr 6: " + prettyOrbit(expr6));
    println("");
    
    // Gather operations
    println("Gathering Operations:");
    // Specify the operator we're gathering
    let gathered1 = gather(expr1, `+`);
    let gathered2 = gather(expr2, `+`);
    let gathered3 = gather(expr3, `*`);
    let gathered4 = gather(expr4, `*`);
    
    // For mixed operations, gather each operator separately
    let gathered5_plus = gather(expr5, `+`);
    let gathered5_times = gather(gathered5_plus, `*`);
    
    // For mixed precedence, gather each operator
    let gathered6_times = gather(expr6, `*`);
    let gathered6_plus = gather(gathered6_times, `+`);
    
    println("Gathered Expr 1 (+): " + prettyOrbit(gathered1));
    println("Gathered Expr 2 (+): " + prettyOrbit(gathered2));
    println("Gathered Expr 3 (*): " + prettyOrbit(gathered3));
    println("Gathered Expr 4 (*): " + prettyOrbit(gathered4));
    println("Gathered Expr 5 (+ then *): " + prettyOrbit(gathered5_times));
    println("Gathered Expr 6 (* then +): " + prettyOrbit(gathered6_plus));
    println("");
    
    // Verify that different associative orders produce the same gathered form
    println("Verifying Gathering Results:");
    println("Expressions 1 and 2 produce same gathered form: " + 
            (prettyOrbit(gathered1) == prettyOrbit(gathered2)));
    println("Expressions 3 and 4 produce same gathered form: " + 
            (prettyOrbit(gathered3) == prettyOrbit(gathered4)));
    println("");
    
    // Scatter operations back to canonical form
    println("Scattering Operations:");
    // Scatter the gathered forms directly without specifying the operator
    let scattered1 = scatter(gathered1);
    let scattered2 = scatter(gathered2);
    let scattered3 = scatter(gathered3);
    let scattered4 = scatter(gathered4);
    let scattered5 = scatter(gathered5_times);
    let scattered6 = scatter(gathered6_plus);
    
    println("Scattered Expr 1: " + prettyOrbit(scattered1));
    println("Scattered Expr 2: " + prettyOrbit(scattered2));
    println("Scattered Expr 3: " + prettyOrbit(scattered3));
    println("Scattered Expr 4: " + prettyOrbit(scattered4));
    println("Scattered Expr 5: " + prettyOrbit(scattered5));
    println("Scattered Expr 6: " + prettyOrbit(scattered6));
    println("");
    
    // Verify scattered forms are canonical
    println("Verifying Canonical Forms:");
    println("Expr 1 and 2 have identical scattered forms: " + 
            (prettyOrbit(scattered1) == prettyOrbit(scattered2)));
    println("Expr 3 and 4 have identical scattered forms: " + 
            (prettyOrbit(scattered3) == prettyOrbit(scattered4)));
);

// Test gather and scatter with explicit creation of the gathered form
fn testExplicitGatheredForm() = (
    println("\nTesting with Explicitly Created Gathered Forms");
    println("===========================================\n");
    
    // Create gathered forms directly
    let addForm = quote(`+`([a, b, c, d]));
    let mulForm = quote(`*`([a, b, c, d]));
    let mixedForm = quote(`+`([a, `*`([b, c]), `*`([d, e]), f]));
    
    println("Explicitly created gathered forms:");
    println("Addition: " + prettyOrbit(addForm));
    println("Multiplication: " + prettyOrbit(mulForm));
    println("Mixed: " + prettyOrbit(mixedForm));
    println("");
    
    // Scatter these forms
    let scatteredAdd = scatter(addForm);
    let scatteredMul = scatter(mulForm);
    let scatteredMixed = scatter(mixedForm);
    
    println("Scattered forms:");
    println("Addition: " + prettyOrbit(scatteredAdd));
    println("Multiplication: " + prettyOrbit(scatteredMul));
    println("Mixed: " + prettyOrbit(scatteredMixed));
    println("");
);

// Test the complete workflow with different associative orders
fn testAssociativeOrders() = (
    println("\nTesting Different Associative Orders");
    println("================================\n");
    
    // Test expressions with different associative orders
    let leftHeavyAdd = quote(a + (b + (c + d)));
    let rightHeavyAdd = quote(((a + b) + c) + d);
    let balancedAdd = quote((a + b) + (c + d));
    
    let leftHeavyMul = quote(a * (b * (c * d)));
    let rightHeavyMul = quote(((a * b) * c) * d);
    let balancedMul = quote((a * b) * (c * d));
    
    println("Original expressions:");
    println("Left-heavy addition: " + prettyOrbit(leftHeavyAdd));
    println("Right-heavy addition: " + prettyOrbit(rightHeavyAdd));
    println("Balanced addition: " + prettyOrbit(balancedAdd));
    println("\nLeft-heavy multiplication: " + prettyOrbit(leftHeavyMul));
    println("Right-heavy multiplication: " + prettyOrbit(rightHeavyMul));
    println("Balanced multiplication: " + prettyOrbit(balancedMul));
    println("");
    
    // Gather all expressions
    let gatheredLeftAdd = gather(leftHeavyAdd, `+`);
    let gatheredRightAdd = gather(rightHeavyAdd, `+`);
    let gatheredBalancedAdd = gather(balancedAdd, `+`);
    
    let gatheredLeftMul = gather(leftHeavyMul, `*`);
    let gatheredRightMul = gather(rightHeavyMul, `*`);
    let gatheredBalancedMul = gather(balancedMul, `*`);
    
    println("Gathered forms:");
    println("Left-heavy addition: " + prettyOrbit(gatheredLeftAdd));
    println("Right-heavy addition: " + prettyOrbit(gatheredRightAdd));
    println("Balanced addition: " + prettyOrbit(gatheredBalancedAdd));
    println("\nLeft-heavy multiplication: " + prettyOrbit(gatheredLeftMul));
    println("Right-heavy multiplication: " + prettyOrbit(gatheredRightMul));
    println("Balanced multiplication: " + prettyOrbit(gatheredBalancedMul));
    println("");
    
    // Verify all gathered forms are identical
    println("Verification:");
    println("All addition gathered forms identical: " + (
        prettyOrbit(gatheredLeftAdd) == prettyOrbit(gatheredRightAdd) && 
        prettyOrbit(gatheredRightAdd) == prettyOrbit(gatheredBalancedAdd)
    ));
    println("All multiplication gathered forms identical: " + (
        prettyOrbit(gatheredLeftMul) == prettyOrbit(gatheredRightMul) && 
        prettyOrbit(gatheredRightMul) == prettyOrbit(gatheredBalancedMul)
    ));
    println("");
    
    // Scatter back to canonical form
    let scatteredLeftAdd = scatter(gatheredLeftAdd);
    let scatteredRightAdd = scatter(gatheredRightAdd);
    let scatteredBalancedAdd = scatter(gatheredBalancedAdd);
    
    let scatteredLeftMul = scatter(gatheredLeftMul);
    let scatteredRightMul = scatter(gatheredRightMul);
    let scatteredBalancedMul = scatter(gatheredBalancedMul);
    
    println("Scattered forms:");
    println("Left-heavy addition: " + prettyOrbit(scatteredLeftAdd));
    println("Right-heavy addition: " + prettyOrbit(scatteredRightAdd));
    println("Balanced addition: " + prettyOrbit(scatteredBalancedAdd));
    println("\nLeft-heavy multiplication: " + prettyOrbit(scatteredLeftMul));
    println("Right-heavy multiplication: " + prettyOrbit(scatteredRightMul));
    println("Balanced multiplication: " + prettyOrbit(scatteredBalancedMul));
    println("");
    
    // Verify all scattered forms are identical (canonical)
    println("Verification of canonical forms:");
    println("All addition canonical forms identical: " + (
        prettyOrbit(scatteredLeftAdd) == prettyOrbit(scatteredRightAdd) && 
        prettyOrbit(scatteredRightAdd) == prettyOrbit(scatteredBalancedAdd)
    ));
    println("All multiplication canonical forms identical: " + (
        prettyOrbit(scatteredLeftMul) == prettyOrbit(scatteredRightMul) && 
        prettyOrbit(scatteredRightMul) == prettyOrbit(scatteredBalancedMul)
    ));
);

// Test complex expressions with mixed operators
fn testComplexExpressions() = (
    println("\nTesting Complex Expressions with Mixed Operators");
    println("===========================================\n");
    
    // Create complex expressions with mixed operators
    let complex1 = quote(a + b + c * d * e + f * g);
    let complex2 = quote((a + b) + ((c * d) * e + f * g));
    let complex3 = quote(a + ((b + c) * (d + e) * f + g));
    
    println("Original complex expressions:");
    println("Complex 1: " + prettyOrbit(complex1));
    println("Complex 2: " + prettyOrbit(complex2));
    println("Complex 3: " + prettyOrbit(complex3));
    println("");
    
    // For complex expressions with mixed operators,
    // we'll gather multiplication operators first, then addition
    let gathered1_mul = gather(complex1, `*`);
    let gathered1_add = gather(gathered1_mul, `+`);
    
    let gathered2_mul = gather(complex2, `*`);
    let gathered2_add = gather(gathered2_mul, `+`);
    
    let gathered3_mul = gather(complex3, `*`);
    let gathered3_add = gather(gathered3_mul, `+`);
    
    println("Gathered complex expressions (after gathering * then +):");
    println("Complex 1: " + prettyOrbit(gathered1_add));
    println("Complex 2: " + prettyOrbit(gathered2_add));
    println("Complex 3: " + prettyOrbit(gathered3_add));
    println("");
    
    // Scatter back to canonical form
    let scattered1 = scatter(gathered1_add);
    let scattered2 = scatter(gathered2_add);
    let scattered3 = scatter(gathered3_add);
    
    println("Scattered complex expressions (canonical form):");
    println("Complex 1: " + prettyOrbit(scattered1));
    println("Complex 2: " + prettyOrbit(scattered2));
    println("Complex 3: " + prettyOrbit(scattered3));
    println("");
    
    // Verify canonical forms
    println("Verification of canonical forms:");
    println("All complex expressions have same canonical form: " + (
        prettyOrbit(scattered1) == prettyOrbit(scattered2) && 
        prettyOrbit(scattered2) == prettyOrbit(scattered3)
    ));
);

// Main program
println("Gather and Scatter Native Functions Test");
println("======================================\n");

// Run all tests
testGatherScatter();
testExplicitGatheredForm();
testAssociativeOrders();
testComplexExpressions();