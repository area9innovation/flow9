// Quadratic equation solver using Orbit ograph system with rewrite library
import lib/rewrite;

// Create rewrite rules for solving quadratic equations
fn makeQuadraticRules() = [
    // Rewrite subtraction to addition for uniformity
    prepareRule(
        "Subtraction to addition",
        (u - v), (u + (-1) * v), true
    ),
    prepareRule(
        "Equation to standard form",
        (a = b), (a - b = 0), (b != 0),
    ),
    
    // Associate and commute sums for GLex ordering
    prepareRule(
        "Associativity of addition",
        (a + (b + c)), ((a + b) + c), true
    ),
    prepareRule(
        "Double negation",
        ((-1) * (-1)), (1), true
    ),
    prepareRule(
        "Collect like terms with variable",
        (a * x + b * x), ((a + b) * x), (is_number(a) && is_number(b))
    ),
    
    // Reordering rules to force canonical GLex order
    prepareRule(
        "Order linear and quadratic terms",
        (a * x + b * x^2), (b * x^2 + a * x), (is_number(a) && is_number(b) && is_var(x))
    ),
    prepareRule(
        "Order linear and quadratic terms",
        (a * x + x^2), (1 * x^2 + a * x), (is_var(x))
    ),
    prepareRule(
        "Order constant and linear terms",
        (a + b * x), (b * x + a), (is_number(a) && is_number(b) && is_var(x))
    ),
    prepareRule(
        "Order full quadratic expression",
        (c + b * x + a * x^2),
        (a * x^2 + b * x + c),
        (is_number(a) && is_number(b) && is_number(c) && is_var(x))
    ),
    
    // Combine like constants
    prepareRule(
        "Add numeric constants",
        (a + b), eval(a + b), (is_number(a) && is_number(b))
    ),
    prepareRule(
        "Multiply numeric constants",
        (a * b), eval(a * b), (is_number(a) && is_number(b))
    ),
    
    // Solve based on discriminant
    prepareRule(
        "Solve quadratic with positive discriminant",
        (a * x^2 + b * x + c = 0),
        (Solutions(x, [(-b + sqrt(b^2 - 4 * a * c)) / (2 * a), (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)])),
        (is_number(a) && is_number(b) && is_number(c) && eval(b^2 - 4 * a * c) > 0 && is_var(x))
    ),
    prepareRule(
        "Solve quadratic with zero discriminant",
        (a * x^2 + b * x + c = 0),
        (Solutions(x, [-b / (2 * a)])),
        (is_number(a) && is_number(b) && is_number(c) && eval(b^2 - 4 * a * c) == 0 && is_var(x))
    ),
    prepareRule(
        "Solve quadratic with negative discriminant",
        (a * x^2 + b * x + c = 0),
        (Solutions(x, [])),
        (is_number(a) && is_number(b) && is_number(c) && eval(b^2 - 4 * a * c) < 0 && is_var(x))
    )
];

// Function to solve a quadratic equation using the rewrite rules
fn solveQuadratic(expr) = (
    let rules = makeQuadraticRules();
    let maxIterations = 4;
    applyRulesUntilFixedPoint(expr, rules, maxIterations)
);

// Test function to run tests manually one by one
fn runTests() = (
    // Define test cases
    let test1 = quote(1 + 2*x + x^2 = 0);
    let test2 = quote(x + x^2 + 4 = 0);
    let test3 = quote(4 + x^2 - 6*x = 0);
    let test4 = quote(-6*x + x^2 + 4 = 0);
    let test5 = quote(x^2 + x = 2*x^2 - 3*x + 4);
    
    // Run test cases individually
    println("Test 1: " + prettyOrbit(test1));
    let result1 = solveQuadratic(test1);
    println("Result: " + prettyOrbit(result1));
    println("");
    
    println("Test 2: " + prettyOrbit(test2));
    let result2 = solveQuadratic(test2);
    println("Result: " + prettyOrbit(result2));
    println("");
    
    println("Test 3: " + prettyOrbit(test3));
    let result3 = solveQuadratic(test3);
    println("Result: " + prettyOrbit(result3));
    println("");
    
    println("Test 4: " + prettyOrbit(test4));
    let result4 = solveQuadratic(test4);
    println("Result: " + prettyOrbit(result4));
    println("");
    
    println("Test 5: " + prettyOrbit(test5));
    let result5 = solveQuadratic(test5);
    println("Result: " + prettyOrbit(result5));
    println("")
);

// Main function that runs the tests
println("Testing quadratic equation solver with ograph rewrite system:");
println("--------------------------------------------------");
runTests()
