@include<lexical>
@include<list>

// Grammar for Scheme-like S-expression syntax with quoting features

sexpr = 
    "(" ws @array0<sexpr> ")" ws SList/1
    | string @unescape SString/1
    | $double ws @s2d SDouble/1 
	| $signed_int ws @s2i SInt/1
    | "true" ws @true SBool/1 
	| "false" ws @false SBool/1
    | "'" ws sexpr SQuote/1
    | "`" ws sexpr SQuasiQuote/1 // Quasiquote (backtick) - template with potential substitutions
    | "$" ws sexpr SUnquote/1 // Unquote (evaluate within quasiquote)
    | "#" ws sexpr SUnquoteSplicing/1 // Splice-unquote (evaluate and splice list within quasiquote)
	| constructor_atom SConstructor/1 
	| variable_atom SVariable/1 
	| $(operator+) ws SOperator/1
    ;

// Constructor atoms start with uppercase
constructor_atom = $(uppercase atom_rest*) ws;

uppercase = 'A'-'Z' | greek_letter_upper | blackboard_symbols;

	greek_letter_upper =
		'Α' | 'Β' | 'Γ' | 'Δ' | 'Ε' | 'Ζ' | 'Η' | 'Θ' | 'Ι' | 'Κ' | 'Λ' | 'Μ' | 'Ν' | 'Ξ' | 'Ο' | 'Π' | 
		'Ρ' | 'Σ' | 'Τ' | 'Υ' | 'Φ' | 'Χ' | 'Ψ' | 'Ω';     // uppercase

	// Blackboard bold math symbols
	blackboard_symbols = 'ℕ' | 'ℤ' | 'ℚ' | 'ℝ' | 'ℂ' | 'ℍ' | 'ℙ';

// Variable atoms start with lowercase or underscore
variable_atom = $(lowercase atom_rest*) ws;

	lowercase = 'a'-'z' | "_" | greek_letter | subscript | superscript;

	// Greek letters (lowercase and uppercase)
	greek_letter = 
		'α' | 'β' | 'γ' | 'δ' | 'ε' | 'ζ' | 'η' | 'θ' | 'ι' | 'κ' | 'λ' | 'μ' | 'ν' | 'ξ' | 'ο' | 'π' | 
		'ρ' | 'σ' | 'ς' | 'τ' | 'υ' | 'φ' | 'χ' | 'ψ' | 'ω'; // lowercase

	// Unicode subscripts
	subscript = 
		'₀' | '₁' | '₂' | '₃' | '₄' | '₅' | '₆' | '₇' | '₈' | '₉' | // Digits
		'₊' | '₋' | '₌' | '₍' | '₎' | // Operators
		'ₐ' | 'ₑ' | 'ₕ' | 'ᵢ' | 'ⱼ' | 'ₖ' | 'ₗ' | 'ₘ' | 'ₙ' | 'ₒ' | 'ₚ' | 'ᵣ' | 'ₛ' | 'ₜ' | 'ᵤ' | 'ᵥ' | 'ₓ'; // Letters

	// Unicode superscripts
	superscript = 
		'⁰' | '¹' | '²' | '³' | '⁴' | '⁵' | '⁶' | '⁷' | '⁸' | '⁹' | // Digits
		'⁺' | '⁻' | '⁼' | '⁽' | '⁾' | // Operators
		'ᵃ' | 'ᵇ' | 'ᶜ' | 'ᵈ' | 'ᵉ' | 'ᶠ' | 'ᵍ' | 'ʰ' | 'ⁱ' | 'ʲ' | 'ᵏ' | 'ˡ' | 'ᵐ' | 'ⁿ' | 'ᵒ' | 'ᵖ' | 'ʳ' | 'ˢ' | 'ᵗ' | 'ᵘ' | 'ᵛ' | 'ʷ' | 'ˣ' | 'ʸ' | 'ᶻ'; // Letters

// Operators as atoms (Greek letters φ and λ moved to greek_letter rule)
operator = '+' | '-' | '*' | '/' | '=' | '<' | '>' | '!' | '?' | ':' | '%' | '&' | '^' | '~' | '|' | '\' |
          '·' | '×'  | '∘' | '⊗' | '∧' | '∨' | '¬' | '≤' | '≥' | '⊂' | '∈' | '∪' | '∩' | '⊲' | '≅' |
          '⊢' | '∫' | '∑' | '∂' | ',' | ';' |
          // Additional math symbols
          '±' | '∓' | '÷' | // Basic operations
          '≠' | '≡' | '≢' | '≈' | '≉' | // Equality relations
          '⊆' | '⊇' | '⊄' | '⊈' | '⊊' | '⊋' | '∉' | // Set relations
          '∀' | '∃' | '∄' | '⊥' | '⊤' | '⊣' | // Logic
          '∇' | '∆' | '∏' | '√' | '∛' | '∝' | '∞' | // Calculus and analysis
          '∅' | '⊖' | '⊎' | '⊍' | // Set operations
          '→' | '←' | '↑' | '↓' | '↔' | '⇒' | '⇔' | '⇐' | '⇑' | '⇓' | '⇌' | // Arrows
          '⊕' | '⊙' | '⋅' | // Additional operators
          '°' | '′' | '″' | '‴' | // Units and derivatives
          '∠' | '⟂' | '∥' | // Geometry
          '⋯' | '⋮' | '⋰' | '⋱' | // Ellipses
          '⌈' | '⌉' | '⌊' | '⌋' | // Ceiling and floor
          '⟨' | '⟩' | '⟦' | '⟧' | // Brackets
          '⋂' | '⋃' | // Big union and intersection
          '≺' | '≻' | '≼' | '≽' | // Order relations
          '∼' | '≃' | '≍' | '≒' | // Equivalence relations
          '≜' | '≝' | '≞' | '≟' | // Definition relations
          '⊏' | '⊐' | '⊑' | '⊒' | // Square subset relations
          '⌢' | '⌣' | // Concave and convex
          '⟹' | '⟸' | '⟺' | // Long arrows
          '⋉' | '⋊' | '⋋' | '⋌' | // Semi-direct products
          '⊛' | '⊘' | '⊚' | '⊝' | // Circle operators
          '⊞' | '⊟' | '⊠' | '⊡'; // Square operators

// Any atom remnants (can include symbols and digits)
atom_rest = '0'-'9' | operator | lowercase | uppercase | "'" | "`" | "#" | "$" | '.';

// Main entry point
ws sexpr