import tools/orbit/sexpr/sexpr_types;
import ds/set;
import ds/tree;

export {
    // Returns the set of free variables in an S-expression
    findFreeSexprVars(sExpr : Sexpr, boundVars : Set<string>) -> Set<string>;
    
    // Convenience function that starts with an empty set of bound variables
    findFreeSexprVarsInExpr(expr : Sexpr) -> Set<string>;
    
    // Create environment bindings for free variables using current environment
    createSexprBindings(freeVars : Set<string>, env : Tree<string, Sexpr>) -> [Pair<string, Sexpr>];
}

// Main function to find free variables in S-expressions
findFreeSexprVars(sExpr : Sexpr, boundVars : Set<string>) -> Set<string> {
    switch (sExpr) {
        SSBool(__): makeSet();
        SSDouble(__): makeSet();
        SSInt(__): makeSet();
        SSString(__): makeSet();
        SSConstructor(__): makeSet();
        SSOperator(__): makeSet();
        SSVariable(name): {
            // Variables that are not bound are free
            if (containsSet(boundVars, name) || name == "_") makeSet() else makeSet1(name);
        };
        
        SSList(exprs): {
			// Not a special form, process all expressions
			fold(exprs, makeSet(), \acc, e -> {
				mergeSets(acc, findFreeSexprVars(e, boundVars));
			});
        };
		SSSpecialForm(name, exprs): {
			switch (name) {
				SAnd(): {
					// And form: (and expr1 expr2...)
					// All expressions can have free variables
					fold(exprs, makeSet(), \acc, e -> {
						mergeSets(acc, findFreeSexprVars(e, boundVars));
					});
				}
				SBegin(): {
					// Begin form: (begin expr1 expr2...)
					// All expressions can have free variables
					fold(exprs, makeSet(), \acc, e -> {
						mergeSets(acc, findFreeSexprVars(e, boundVars));
					});
				}
				SClosure(): {
					// Closure form: (closure bindings lambda-expr)
					// The bindings are already evaluated, so only the lambda expression can have free variables
					if (length(exprs) >= 2) {
						findFreeSexprVars(exprs[1], boundVars);
					} else {
						makeSet();
					}
				}
				SDefine(): {
					// Define form: (define name value) or (define (func param...) body...)
					if (length(exprs) >= 2) {
						switch (exprs[0]) {
							SSVariable(__): {
								// Simple variable definition: (define name value)
								// Only the value can have free variables
								findFreeSexprVars(exprs[1], boundVars);
							}
							SSList(funcParts): {
								// Function definition: (define (func param...) body...)
								if (length(funcParts) > 0) {
									// Extract function name
									switch (funcParts[0]) {
										SSVariable(__): {
											// Extract parameter names
											paramNames = filtermap(tail(funcParts), \param -> {
												switch (param) {
													SSVariable(pname): Some(pname);
													default: None();
												}
											});
											
											// Add parameter names to bound variables
											newBoundVars = fold(paramNames, boundVars, \acc, pname -> {
												insertSet(acc, pname);
											});
											
											// Find free variables in the body
											if (length(exprs) > 1) {
												fold(tail(exprs), makeSet(), \acc, e -> {
													mergeSets(acc, findFreeSexprVars(e, newBoundVars));
												});
											} else {
												makeSet();
											}
										}
										default: makeSet();
									}
								} else {
									makeSet();
								}
							}
							default: makeSet();
						}
					} else {
						makeSet();
					}
				}
				SEval(): {
					// Eval form: (eval expr)
					// The expression being evaluated can have free variables
					if (length(exprs) >= 1) {
						findFreeSexprVars(exprs[0], boundVars);
					} else {
						makeSet();
					}
				}
				SIf(): {
					// If form: (if condition then-expr else-expr)
					if (length(exprs) >= 2) {
						mergeSets(
							findFreeSexprVars(exprs[0], boundVars),
							mergeSets(
								findFreeSexprVars(exprs[1], boundVars),
								if (length(exprs) > 2) findFreeSexprVars(exprs[2], boundVars) else makeSet()
							)
						);
					} else {
						makeSet();
					}
				}
				SImport(): {
					// Import form: (import "file")
					// Import statements don't have free variables
					makeSet();
				}
				SLambda(): {
					if (length(exprs) >= 2) {
						// Lambda form: (lambda (param1 param2...) body)
						paramList = switch (exprs[0]) {
							SSList(params): params;
							default: [];
						};
						
						// Extract parameter names
						paramNames = filtermap(paramList, \param -> {
							switch (param) {
								SSVariable(pname): Some(pname);
								default: None();
							}
						});
						
						// Add parameter names to bound variables
						newBoundVars = fold(paramNames, boundVars, \acc, pname -> {
							insertSet(acc, pname);
						});
						
						// Find free variables in all body expressions (considering parameters as bound)
						fold(tail(exprs), makeSet(), \acc, e -> {
							mergeSets(acc, findFreeSexprVars(e, newBoundVars));
						});
					} else {
						makeSet();
					}
				}
				SLet(): {
					// Let form: (let ((var1 val1) (var2 val2)...) body...)
					if (length(exprs) >= 2) {
						bindingsList = switch (exprs[0]) {
							SSList(bindings): bindings;
							default: [];
						};
						
						// Process each binding value for free variables
						bindingFreeVars = fold(bindingsList, makeSet(), \acc, binding -> {
							bindingVars = switch (binding) {
								SSList(bindingParts): {
									if (length(bindingParts) >= 2) {
										findFreeSexprVars(bindingParts[1], boundVars);
									} else {
										makeSet();
									}
								};
								default: makeSet();
							};
							mergeSets(acc, bindingVars);
						});
						
						// Extract binding names to add to bound variables for the body
						bindingNames = filtermap(bindingsList, \binding -> {
							switch (binding) {
								SSList(parts): {
									if (length(parts) >= 1) {
										switch (parts[0]) {
											SSVariable(bname): Some(bname);
											default: None();
										}
									} else {
										None();
									}
								};
								default: None();
							}
						});
						
						// Add binding names to bound variables
						newBoundVars = fold(bindingNames, boundVars, \acc, bname -> {
							insertSet(acc, bname);
						});
						
						// Find free variables in the body (considering binding names as bound)
						if (length(exprs) > 1) {
							bodyFreeVars = fold(tail(exprs), makeSet(), \acc, e -> {
								mergeSets(acc, findFreeSexprVars(e, newBoundVars));
							});
							mergeSets(bindingFreeVars, bodyFreeVars);
						} else {
							bindingFreeVars;
						}
					} else {
						makeSet();
					}
				}
				SLetRec(): {
					// LetRec form: (letrec ((var1 val1) (var2 val2)...) body...)
					// Similar to let, but binding names are available within all bindings values as well
					if (length(exprs) >= 2) {
						bindingsList = switch (exprs[0]) {
							SSList(bindings): bindings;
							default: [];
						};
						
						// Extract binding names
						bindingNames = filtermap(bindingsList, \binding -> {
							switch (binding) {
								SSList(parts): {
									if (length(parts) >= 1) {
										switch (parts[0]) {
											SSVariable(bname): Some(bname);
											default: None();
										}
									} else {
										None();
									}
								};
								default: None();
							}
						});
						
						// Add binding names to bound variables for both bindings and body
						newBoundVars = fold(bindingNames, boundVars, \acc, bname -> {
							insertSet(acc, bname);
						});
						
						// Process each binding value for free variables with the new bound vars
						bindingFreeVars = fold(bindingsList, makeSet(), \acc, binding -> {
							bindingVars = switch (binding) {
								SSList(bindingParts): {
									if (length(bindingParts) >= 2) {
										findFreeSexprVars(bindingParts[1], newBoundVars);
									} else {
										makeSet();
									}
								};
								default: makeSet();
							};
							mergeSets(acc, bindingVars);
						});
						
						// Find free variables in the body (with bindings in scope)
						if (length(exprs) > 1) {
							bodyFreeVars = fold(tail(exprs), makeSet(), \acc, e -> {
								mergeSets(acc, findFreeSexprVars(e, newBoundVars));
							});
							mergeSets(bindingFreeVars, bodyFreeVars);
						} else {
							bindingFreeVars;
						}
					} else {
						makeSet();
					}
				}
				SList(): {
					// Process all list expressions
					fold(exprs, makeSet(), \acc, e -> {
						mergeSets(acc, findFreeSexprVars(e, boundVars));
					});
				}
				SMatch(): {
					// Match form: (match expr pattern1 result1 pattern2 result2...)
					if (length(exprs) >= 1) {
						// First expression is what we're matching against
						exprFreeVars = findFreeSexprVars(exprs[0], boundVars);
						
						// Process pattern-result pairs (all elements after the first)
						patternResultVars = if (length(exprs) > 1) {
							patternResultExprs = tail(exprs);
							
							// Just process all remaining expressions directly
							// This is simpler and still correct since we're just looking for free variables
							fold(patternResultExprs, makeSet(), \acc, expr -> {
								mergeSets(acc, findFreeSexprVars(expr, boundVars));
							});
						} else {
							makeSet();
						};
						
						mergeSets(exprFreeVars, patternResultVars);
					} else {
						makeSet();
					}
				}
				SOr(): {
					// Or form: (or expr1 expr2...)
					// All expressions can have free variables
					fold(exprs, makeSet(), \acc, e -> {
						mergeSets(acc, findFreeSexprVars(e, boundVars));
					});
				}
				SQuasiQuote(): {
					// Quasiquote form: (quasiquote expr)
					// In quasiquote, only unquoted expressions can have free variables
					if (length(exprs) >= 1) {
						findQuasiQuoteFreeVars(exprs[0], boundVars);
					} else {
						makeSet();
					}
				}
				SQuote(): {
					// Quote form: (quote expr) or 'expr
					// Quoted expressions have no free variables
					makeSet();
				}
				SSet(): {
					// Set form: (set! var value)
					// The value can have free variables, var is not free
					if (length(exprs) >= 2) {
						findFreeSexprVars(exprs[1], boundVars);
					} else {
						makeSet();
					}
				}
				SUnQuote(): {
					// Unquote form: (unquote expr)
					// This should not be encountered outside of quasiquote processing
					if (length(exprs) >= 1) {
						findFreeSexprVars(exprs[0], boundVars);
					} else {
						makeSet();
					}
				}
				SUnQuoteSplicing(): {
					// Unquote-splicing form: (unquote-splicing expr)
					// This should not be encountered outside of quasiquote processing
					if (length(exprs) >= 1) {
						findFreeSexprVars(exprs[0], boundVars);
					} else {
						makeSet();
					}
				}
			}
		}
    }
}

// Helper to find free variables in quasiquote expressions
findQuasiQuoteFreeVars(sExpr : Sexpr, boundVars : Set<string>) -> Set<string> {
    switch (sExpr) {
        SSList(items): {
            // Process all expressions in the list
            fold(items, makeSet(), \acc, item -> {
                mergeSets(acc, findQuasiQuoteFreeVars(item, boundVars));
            });
        };
		SSSpecialForm(name, exprs): {
			switch (name) {
				SQuasiQuote(): {
					// Quasiquote form: (quasiquote expr)
					// The inner expression can have free variables
					// In quasiquote, only unquoted expressions can have free variables
					findQuasiQuoteFreeVars(exprs[0], boundVars);
				}
				SUnQuote(): {
					// Unquote form: (unquote expr)
					// The inner expression can have free variables
					findFreeSexprVars(exprs[0], boundVars);
				}
				SUnQuoteSplicing(): {
					// Unquote-splicing form: (unquote-splicing expr)
					// The inner expression can have free variables
					findFreeSexprVars(exprs[0], boundVars);
				}
				default: {
					fold(exprs, makeSet(), \acc, item -> {
						mergeSets(acc, findQuasiQuoteFreeVars(item, boundVars));
					});
				}
			}
		}
        default: makeSet(); // Other expressions in quasiquote have no free variables
    }
}

// Convenience function that starts with an empty set of bound variables
findFreeSexprVarsInExpr(sExpr : Sexpr) -> Set<string> {
    findFreeSexprVars(sExpr, makeSet());
}

// Create environment bindings for free variables using current environment
createSexprBindings(freeVars : Set<string>, env : Tree<string, Sexpr>) -> [Pair<string, Sexpr>] {
    // Convert the set of free variables to an array
    freeVarsArray = set2array(freeVars);
    
    // Create a binding for each free variable that exists in the environment
    filtermap(freeVarsArray, \id -> {
        lookupResult = lookupTree(env, id);
        switch (lookupResult) {
            Some(value): Some(Pair(id, value));
            None(): None();
        }
    });
}