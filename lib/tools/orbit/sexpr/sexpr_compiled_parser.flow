// Produced by  flowcpp mango/mango.flow -- file=sexpr.mango compile=1 main=sexpr_compiled
import tools/mango/mcode_lib;
import string;

export {
	sexpr_parse_sexpr_compiled(acc : MoParseAcc) -> bool;
}

sexpr_parse_ws(acc : MoParseAcc) -> bool {
	mparseStarBacktrackOnly(acc, \ -> {
		sexpr_parse_s(acc)
	})
}

sexpr_parse_variable_atom(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (if (sexpr_parse_special_name(acc)) {
			{
				{pdrop(acc.env); true};
				if (sexpr_parse_kwsep(acc)) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			restoreMCheckpoint(acc)
		} else {
			{
				restoreMCheckpoint(acc);
				true
			}
		}) {
			{
				acc.starti ::= acc.i;
				pushMCheckpointNoStack(acc);
				if (((if (if (sexpr_parse_lowercase(acc)) {
					{
						mparseStarBacktrackOnly(acc, \ -> {
							sexpr_parse_atom_rest(acc)
						});
						discardMCheckpointNoStack(acc)
					}
				} else {
					restoreMCheckpointNoStack(acc)
				}) {
					pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
				} else {
					false
				}) && sexpr_parse_ws(acc))) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

sexpr_parse_uppercase(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchRange(acc, 65, 90) || (sexpr_parse_greek_letter_upper(acc) || sexpr_parse_blackboard_symbols(acc))) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

sexpr_parse_uid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (mmatchRange(acc, 65, 90)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					sexpr_parse_alnum(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && sexpr_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

sexpr_parse_superscript(acc : MoParseAcc) -> bool {
	mmatchString(acc, "⁰") || (mmatchString(acc, "¹") || (mmatchString(acc, "²") || (mmatchString(acc, "³") || (mmatchString(acc, "⁴") || (mmatchString(acc, "⁵") || (mmatchString(acc, "⁶") || (mmatchString(acc, "⁷") || (mmatchString(acc, "⁸") || (mmatchString(acc, "⁹") || (mmatchString(acc, "⁺") || (mmatchString(acc, "⁻") || (mmatchString(acc, "⁼") || (mmatchString(acc, "⁽") || (mmatchString(acc, "⁾") || (mmatchString(acc, "ᵃ") || (mmatchString(acc, "ᵇ") || (mmatchString(acc, "ᶜ") || (mmatchString(acc, "ᵈ") || (mmatchString(acc, "ᵉ") || (mmatchString(acc, "ᶠ") || (mmatchString(acc, "ᵍ") || (mmatchString(acc, "ʰ") || (mmatchString(acc, "ⁱ") || (mmatchString(acc, "ʲ") || (mmatchString(acc, "ᵏ") || (mmatchString(acc, "ˡ") || (mmatchString(acc, "ᵐ") || (mmatchString(acc, "ⁿ") || (mmatchString(acc, "ᵒ") || (mmatchString(acc, "ᵖ") || (mmatchString(acc, "ʳ") || (mmatchString(acc, "ˢ") || (mmatchString(acc, "ᵗ") || (mmatchString(acc, "ᵘ") || (mmatchString(acc, "ᵛ") || (mmatchString(acc, "ʷ") || (mmatchString(acc, "ˣ") || (mmatchString(acc, "ʸ") || mmatchString(acc, "ᶻ")))))))))))))))))))))))))))))))))))))))
}

sexpr_parse_subscript(acc : MoParseAcc) -> bool {
	mmatchString(acc, "₀") || (mmatchString(acc, "₁") || (mmatchString(acc, "₂") || (mmatchString(acc, "₃") || (mmatchString(acc, "₄") || (mmatchString(acc, "₅") || (mmatchString(acc, "₆") || (mmatchString(acc, "₇") || (mmatchString(acc, "₈") || (mmatchString(acc, "₉") || (mmatchString(acc, "₊") || (mmatchString(acc, "₋") || (mmatchString(acc, "₌") || (mmatchString(acc, "₍") || (mmatchString(acc, "₎") || (mmatchString(acc, "ₐ") || (mmatchString(acc, "ₑ") || (mmatchString(acc, "ₕ") || (mmatchString(acc, "ᵢ") || (mmatchString(acc, "ⱼ") || (mmatchString(acc, "ₖ") || (mmatchString(acc, "ₗ") || (mmatchString(acc, "ₘ") || (mmatchString(acc, "ₙ") || (mmatchString(acc, "ₒ") || (mmatchString(acc, "ₚ") || (mmatchString(acc, "ᵣ") || (mmatchString(acc, "ₛ") || (mmatchString(acc, "ₜ") || (mmatchString(acc, "ᵤ") || (mmatchString(acc, "ᵥ") || mmatchString(acc, "ₓ")))))))))))))))))))))))))))))))
}

sexpr_parse_string(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (mmatchString(acc, "\"")) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					sexpr_parse_onechar(acc)
				});
				if (mmatchString(acc, "\"")) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && sexpr_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

sexpr_parse_special_name(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (((if ((if (mmatchString(acc, "define")) {
			{
				moconstruct(acc, "SDefine", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "letrec")) {
			{
				moconstruct(acc, "SLetRec", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "let")) {
			{
				moconstruct(acc, "SLet", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "lambda")) {
			{
				moconstruct(acc, "SLambda", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "closure")) {
			{
				moconstruct(acc, "SClosure", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "list")) {
			{
				moconstruct(acc, "SList", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "if")) {
			{
				moconstruct(acc, "SIf", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "eval")) {
			{
				moconstruct(acc, "SEval", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "match")) {
			{
				moconstruct(acc, "SMatch", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "and")) {
			{
				moconstruct(acc, "SAnd", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "or")) {
			{
				moconstruct(acc, "SOr", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "import")) {
			{
				moconstruct(acc, "SImport", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "set!")) {
			{
				moconstruct(acc, "SSet", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "begin")) {
			{
				moconstruct(acc, "SBegin", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "quote")) {
			{
				moconstruct(acc, "SQuote", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "quasiquote")) {
			{
				moconstruct(acc, "SQuasiQuote", 0);
				true
			}
		} else {
			false
		}) || ((if (mmatchString(acc, "unquote-splicing")) {
			{
				moconstruct(acc, "SUnQuoteSplicing", 0);
				true
			}
		} else {
			false
		}) || (if (mmatchString(acc, "unquote")) {
			{
				moconstruct(acc, "SUnQuote", 0);
				true
			}
		} else {
			false
		})))))))))))))))))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}) && sexpr_parse_kwsep(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

sexpr_parse_signed_int(acc : MoParseAcc) -> bool {
	{
		pos_16 = acc.i;
		mmatchString(acc, "-");
		if (sexpr_parse_int(acc)) {
			true
		} else {
			{acc.i ::= pos_16; false}
		}
	}
}

sexpr_parse_sexpr(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((mmatchString(acc, "(") && sexpr_parse_ws(acc))) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if (sexpr_parse_special_name(acc)) {
					{
						{pushPEnv(acc.env, makeList()); true};
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								if (sexpr_parse_sexpr(acc)) {
									{
										{pcons(acc.env); true};
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						{pfn1(acc.env, list2array); true};
						if ((mmatchString(acc, ")") && sexpr_parse_ws(acc))) {
							{
								moconstruct(acc, "SSSpecialForm", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						{pushPEnv(acc.env, makeList()); true};
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								if (sexpr_parse_sexpr(acc)) {
									{
										{pcons(acc.env); true};
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						{pfn1(acc.env, list2array); true};
						if (if ((mmatchString(acc, ")") && sexpr_parse_ws(acc))) {
							{
								moconstruct(acc, "SSList", 1);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if (sexpr_parse_string(acc)) {
					{
						{pfn1(acc.env, \l -> deserializeString(l).first); true};
						moconstruct(acc, "SSString", 1);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						acc.starti ::= acc.i;
						if (if (((if (sexpr_parse_double(acc)) {
							pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
						} else {
							false
						}) && sexpr_parse_ws(acc))) {
							{
								{pfn1(acc.env, s2d); true};
								moconstruct(acc, "SSDouble", 1);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								acc.starti ::= acc.i;
								if (if (((if (sexpr_parse_signed_int(acc)) {
									pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
								} else {
									false
								}) && sexpr_parse_ws(acc))) {
									{
										{pfn1(acc.env, s2i); true};
										moconstruct(acc, "SSInt", 1);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									{
										pushMCheckpoint(acc);
										if (if ((mmatchString(acc, "true") && sexpr_parse_ws(acc))) {
											{
												pushPEnv(acc.env, true);
												moconstruct(acc, "SSBool", 1);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}) {
											discardMCheckpoint(acc)
										} else {
											{
												pushMCheckpoint(acc);
												if (if ((mmatchString(acc, "false") && sexpr_parse_ws(acc))) {
													{
														pushPEnv(acc.env, false);
														moconstruct(acc, "SSBool", 1);
														discardMCheckpoint(acc)
													}
												} else {
													restoreMCheckpoint(acc)
												}) {
													discardMCheckpoint(acc)
												} else {
													{
														pushMCheckpoint(acc);
														if (if (sexpr_parse_constructor_atom(acc)) {
															{
																moconstruct(acc, "SSConstructor", 1);
																discardMCheckpoint(acc)
															}
														} else {
															restoreMCheckpoint(acc)
														}) {
															discardMCheckpoint(acc)
														} else {
															{
																pushMCheckpoint(acc);
																if (if (sexpr_parse_variable_atom(acc)) {
																	{
																		moconstruct(acc, "SSVariable", 1);
																		discardMCheckpoint(acc)
																	}
																} else {
																	restoreMCheckpoint(acc)
																}) {
																	discardMCheckpoint(acc)
																} else {
																	{
																		pushMCheckpoint(acc);
																		acc.starti ::= acc.i;
																		pushMCheckpointNoStack(acc);
																		if (if (((if (if (sexpr_parse_operator(acc)) {
																			{
																				mparseStarBacktrackOnly(acc, \ -> {
																					sexpr_parse_operator(acc)
																				});
																				discardMCheckpointNoStack(acc)
																			}
																		} else {
																			restoreMCheckpointNoStack(acc)
																		}) {
																			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
																		} else {
																			false
																		}) && sexpr_parse_ws(acc))) {
																			{
																				moconstruct(acc, "SSOperator", 1);
																				discardMCheckpoint(acc)
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}) {
																			discardMCheckpoint(acc)
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

sexpr_parse_s(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (sexpr_parse_cs(acc)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					sexpr_parse_cs(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

sexpr_parse_operator(acc : MoParseAcc) -> bool {
	mmatchString(acc, "+") || (mmatchString(acc, "-") || (mmatchString(acc, "*") || (mmatchString(acc, "/") || (mmatchString(acc, "=") || (mmatchString(acc, "<") || (mmatchString(acc, ">") || (mmatchString(acc, "!") || (mmatchString(acc, "?") || (mmatchString(acc, ":") || (mmatchString(acc, "%") || (mmatchString(acc, "&") || (mmatchString(acc, "^") || (mmatchString(acc, "~") || (mmatchString(acc, "|") || (mmatchString(acc, "\\") || (mmatchString(acc, "·") || (mmatchString(acc, "×") || (mmatchString(acc, "∘") || (mmatchString(acc, "⊗") || (mmatchString(acc, "∧") || (mmatchString(acc, "∨") || (mmatchString(acc, "¬") || (mmatchString(acc, "≤") || (mmatchString(acc, "≥") || (mmatchString(acc, "⊂") || (mmatchString(acc, "∈") || (mmatchString(acc, "∪") || (mmatchString(acc, "∩") || (mmatchString(acc, "⊲") || (mmatchString(acc, "≅") || (mmatchString(acc, "⊢") || (mmatchString(acc, "∫") || (mmatchString(acc, "∑") || (mmatchString(acc, "∂") || (mmatchString(acc, ",") || (mmatchString(acc, ";") || (mmatchString(acc, "±") || (mmatchString(acc, "∓") || (mmatchString(acc, "÷") || (mmatchString(acc, "≠") || (mmatchString(acc, "≡") || (mmatchString(acc, "≢") || (mmatchString(acc, "≈") || (mmatchString(acc, "≉") || (mmatchString(acc, "⊆") || (mmatchString(acc, "⊇") || (mmatchString(acc, "⊄") || (mmatchString(acc, "⊈") || (mmatchString(acc, "⊊") || (mmatchString(acc, "⊋") || (mmatchString(acc, "∉") || (mmatchString(acc, "∀") || (mmatchString(acc, "∃") || (mmatchString(acc, "∄") || (mmatchString(acc, "⊥") || (mmatchString(acc, "⊤") || (mmatchString(acc, "⊣") || (mmatchString(acc, "∇") || (mmatchString(acc, "∆") || (mmatchString(acc, "∏") || (mmatchString(acc, "√") || (mmatchString(acc, "∛") || (mmatchString(acc, "∝") || (mmatchString(acc, "∞") || (mmatchString(acc, "∅") || (mmatchString(acc, "⊖") || (mmatchString(acc, "⊎") || (mmatchString(acc, "⊍") || (mmatchString(acc, "→") || (mmatchString(acc, "←") || (mmatchString(acc, "↑") || (mmatchString(acc, "↓") || (mmatchString(acc, "↔") || (mmatchString(acc, "⇒") || (mmatchString(acc, "⇔") || (mmatchString(acc, "⇐") || (mmatchString(acc, "⇑") || (mmatchString(acc, "⇓") || (mmatchString(acc, "⇌") || (mmatchString(acc, "⊕") || (mmatchString(acc, "⊙") || (mmatchString(acc, "⋅") || (mmatchString(acc, "°") || (mmatchString(acc, "′") || (mmatchString(acc, "″") || (mmatchString(acc, "‴") || (mmatchString(acc, "∠") || (mmatchString(acc, "⟂") || (mmatchString(acc, "∥") || (mmatchString(acc, "⋯") || (mmatchString(acc, "⋮") || (mmatchString(acc, "⋰") || (mmatchString(acc, "⋱") || (mmatchString(acc, "⌈") || (mmatchString(acc, "⌉") || (mmatchString(acc, "⌊") || (mmatchString(acc, "⌋") || (mmatchString(acc, "⟨") || (mmatchString(acc, "⟩") || (mmatchString(acc, "⟦") || (mmatchString(acc, "⟧") || (mmatchString(acc, "⋂") || (mmatchString(acc, "⋃") || (mmatchString(acc, "≺") || (mmatchString(acc, "≻") || (mmatchString(acc, "≼") || (mmatchString(acc, "≽") || (mmatchString(acc, "∼") || (mmatchString(acc, "≃") || (mmatchString(acc, "≍") || (mmatchString(acc, "≒") || (mmatchString(acc, "≜") || (mmatchString(acc, "≝") || (mmatchString(acc, "≞") || (mmatchString(acc, "≟") || (mmatchString(acc, "⊏") || (mmatchString(acc, "⊐") || (mmatchString(acc, "⊑") || (mmatchString(acc, "⊒") || (mmatchString(acc, "⌢") || (mmatchString(acc, "⌣") || (mmatchString(acc, "⟹") || (mmatchString(acc, "⟸") || (mmatchString(acc, "⟺") || (mmatchString(acc, "⋉") || (mmatchString(acc, "⋊") || (mmatchString(acc, "⋋") || (mmatchString(acc, "⋌") || (mmatchString(acc, "⊛") || (mmatchString(acc, "⊘") || (mmatchString(acc, "⊚") || (mmatchString(acc, "⊝") || (mmatchString(acc, "⊞") || (mmatchString(acc, "⊟") || (mmatchString(acc, "⊠") || mmatchString(acc, "⊡"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
}

sexpr_parse_onechar(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		pushMCheckpointNoStack(acc);
		if (if (mmatchString(acc, "\\")) {
			{
				pushMCheckpointNoStack(acc);
				pos_15 = acc.i;
				if (if (if ((mmatchString(acc, "u") && ((sexpr_parse_hexdigit(acc) && ((sexpr_parse_hexdigit(acc) && ((sexpr_parse_hexdigit(acc) && sexpr_parse_hexdigit(acc))))))))) {
					true
				} else {
					{acc.i ::= pos_15; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					{
						pos_14 = acc.i;
						if ((if ((mmatchString(acc, "x") && ((sexpr_parse_hexdigit(acc) && sexpr_parse_hexdigit(acc))))) {
							true
						} else {
							{acc.i ::= pos_14; false}
						}) || (mmatchString(acc, "\\") || (mmatchString(acc, "\"") || (mmatchString(acc, "n") || (mmatchString(acc, "t") || mmatchString(acc, "r")))))) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pos_11 = acc.i;
				pos_13 = acc.i;
				if (if (if (mmatchString(acc, "\"")) {
					{acc.i ::= pos_13; false}
				} else {
					{
						{acc.i ::= pos_13; false};
						true
					}
				}) {
					{
						pos_12 = acc.i;
						if (((if (mmatchString(acc, "\\")) {
							{acc.i ::= pos_12; false}
						} else {
							{
								{acc.i ::= pos_12; false};
								true
							}
						}) && sexpr_parse_anychar(acc))) {
							true
						} else {
							{acc.i ::= pos_11; false}
						}
					}
				} else {
					{acc.i ::= pos_11; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		}
	}
}

sexpr_parse_lowercase(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchRange(acc, 97, 122) || (mmatchString(acc, "_") || (sexpr_parse_greek_letter(acc) || (sexpr_parse_subscript(acc) || sexpr_parse_superscript(acc))))) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

sexpr_parse_kwsep(acc : MoParseAcc) -> bool {
	{
		pos_9 = acc.i;
		pos_10 = acc.i;
		if (((if (sexpr_parse_alnum(acc)) {
			{acc.i ::= pos_10; false}
		} else {
			{
				{acc.i ::= pos_10; false};
				true
			}
		}) && sexpr_parse_ws(acc))) {
			true
		} else {
			{acc.i ::= pos_9; false}
		}
	}
}

sexpr_parse_int(acc : MoParseAcc) -> bool {
	if (mmatchRange(acc, 48, 57)) {
		{
			mparseStarNobacktrackOrStack(acc, \ -> {
				mmatchRange(acc, 48, 57)
			});
			true
		}
	} else {
		false
	}
}

sexpr_parse_id(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		if (((if (sexpr_parse_bid(acc)) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && sexpr_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

sexpr_parse_hexdigit(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 48, 57) || (mmatchRange(acc, 97, 102) || mmatchRange(acc, 65, 70))
}

sexpr_parse_greek_letter_upper(acc : MoParseAcc) -> bool {
	mmatchString(acc, "Α") || (mmatchString(acc, "Β") || (mmatchString(acc, "Γ") || (mmatchString(acc, "Δ") || (mmatchString(acc, "Ε") || (mmatchString(acc, "Ζ") || (mmatchString(acc, "Η") || (mmatchString(acc, "Θ") || (mmatchString(acc, "Ι") || (mmatchString(acc, "Κ") || (mmatchString(acc, "Λ") || (mmatchString(acc, "Μ") || (mmatchString(acc, "Ν") || (mmatchString(acc, "Ξ") || (mmatchString(acc, "Ο") || (mmatchString(acc, "Π") || (mmatchString(acc, "Ρ") || (mmatchString(acc, "Σ") || (mmatchString(acc, "Τ") || (mmatchString(acc, "Υ") || (mmatchString(acc, "Φ") || (mmatchString(acc, "Χ") || (mmatchString(acc, "Ψ") || mmatchString(acc, "Ω")))))))))))))))))))))))
}

sexpr_parse_greek_letter(acc : MoParseAcc) -> bool {
	mmatchString(acc, "α") || (mmatchString(acc, "β") || (mmatchString(acc, "γ") || (mmatchString(acc, "δ") || (mmatchString(acc, "ε") || (mmatchString(acc, "ζ") || (mmatchString(acc, "η") || (mmatchString(acc, "θ") || (mmatchString(acc, "ι") || (mmatchString(acc, "κ") || (mmatchString(acc, "λ") || (mmatchString(acc, "μ") || (mmatchString(acc, "ν") || (mmatchString(acc, "ξ") || (mmatchString(acc, "ο") || (mmatchString(acc, "π") || (mmatchString(acc, "ρ") || (mmatchString(acc, "σ") || (mmatchString(acc, "ς") || (mmatchString(acc, "τ") || (mmatchString(acc, "υ") || (mmatchString(acc, "φ") || (mmatchString(acc, "χ") || (mmatchString(acc, "ψ") || mmatchString(acc, "ω"))))))))))))))))))))))))
}

sexpr_parse_exponent(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchString(acc, "E") || mmatchString(acc, "e")) {
			{
				mmatchString(acc, "+") || mmatchString(acc, "-");
				if (sexpr_parse_int(acc)) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

sexpr_parse_double(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		pushMCheckpointNoStack(acc);
		if (if (sexpr_parse_signed_int(acc)) {
			{
				pushMCheckpointNoStack(acc);
				pos_6 = acc.i;
				if (if ((if (mmatchString(acc, ".")) {
					{
						pos_8 = acc.i;
						if (sexpr_parse_int(acc)) {
							true
						} else {
							{acc.i ::= pos_8; false}
						};
						pos_7 = acc.i;
						if (sexpr_parse_exponent(acc)) {
							true
						} else {
							{acc.i ::= pos_7; false}
						};
						true
					}
				} else {
					{acc.i ::= pos_6; false}
				}) || sexpr_parse_exponent(acc)) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pos_4 = acc.i;
				if (if ((mmatchString(acc, ".") && sexpr_parse_int(acc))) {
					{
						pos_5 = acc.i;
						if (sexpr_parse_exponent(acc)) {
							true
						} else {
							{acc.i ::= pos_5; false}
						};
						true
					}
				} else {
					{acc.i ::= pos_4; false}
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					restoreMCheckpointNoStack(acc)
				}
			}
		}
	}
}

sexpr_parse_cs(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchString(acc, " ") || (mmatchString(acc, "\t") || (mmatchString(acc, "\n") || mmatchString(acc, "0x000d")))) {
			discardMCheckpointNoStack(acc)
		} else {
			{
				pushMCheckpointNoStack(acc);
				if (if (mmatchString(acc, "//")) {
					{
						mparseStarBacktrackOnly(acc, \ -> {
							{
								pos_2 = acc.i;
								pos_3 = acc.i;
								if (((if (mmatchString(acc, "\n")) {
									{acc.i ::= pos_3; false}
								} else {
									{
										{acc.i ::= pos_3; false};
										true
									}
								}) && sexpr_parse_anychar(acc))) {
									true
								} else {
									{acc.i ::= pos_2; false}
								}
							}
						});
						if (mmatchString(acc, "\n")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				} else {
					restoreMCheckpointNoStack(acc)
				}) {
					discardMCheckpointNoStack(acc)
				} else {
					{
						pushMCheckpointNoStack(acc);
						if ((if (mmatchString(acc, "/*")) {
							{
								mparseStarBacktrackOnly(acc, \ -> {
									{
										pos_0 = acc.i;
										pos_1 = acc.i;
										if (((if (mmatchString(acc, "*/")) {
											{acc.i ::= pos_1; false}
										} else {
											{
												{acc.i ::= pos_1; false};
												true
											}
										}) && sexpr_parse_anychar(acc))) {
											true
										} else {
											{acc.i ::= pos_0; false}
										}
									}
								});
								if (mmatchString(acc, "*/")) {
									discardMCheckpointNoStack(acc)
								} else {
									restoreMCheckpointNoStack(acc)
								}
							}
						} else {
							restoreMCheckpointNoStack(acc)
						}) || mmatchString(acc, "\u000d")) {
							discardMCheckpointNoStack(acc)
						} else {
							restoreMCheckpointNoStack(acc)
						}
					}
				}
			}
		}
	}
}

sexpr_parse_constructor_atom(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		pushMCheckpointNoStack(acc);
		if (((if (if (sexpr_parse_uppercase(acc)) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					sexpr_parse_atom_rest(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && sexpr_parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

sexpr_parse_blackboard_symbols(acc : MoParseAcc) -> bool {
	mmatchString(acc, "ℕ") || (mmatchString(acc, "ℤ") || (mmatchString(acc, "ℚ") || (mmatchString(acc, "ℝ") || (mmatchString(acc, "ℂ") || (mmatchString(acc, "ℍ") || mmatchString(acc, "ℙ"))))))
}

sexpr_parse_bid(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchRange(acc, 97, 122) || mmatchString(acc, "_")) {
			{
				mparseStarBacktrackOnly(acc, \ -> {
					sexpr_parse_alnum(acc)
				});
				discardMCheckpointNoStack(acc)
			}
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

sexpr_parse_atom_rest(acc : MoParseAcc) -> bool {
	{
		pushMCheckpointNoStack(acc);
		if (mmatchRange(acc, 48, 57) || (sexpr_parse_operator(acc) || (sexpr_parse_lowercase(acc) || (sexpr_parse_uppercase(acc) || (mmatchString(acc, "'") || (mmatchString(acc, "`") || (mmatchString(acc, "#") || (mmatchString(acc, "$") || mmatchString(acc, "."))))))))) {
			discardMCheckpointNoStack(acc)
		} else {
			restoreMCheckpointNoStack(acc)
		}
	}
}

sexpr_parse_anychar(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 0, 65535)
}

sexpr_parse_alnum(acc : MoParseAcc) -> bool {
	mmatchRange(acc, 97, 122) || (mmatchRange(acc, 65, 90) || (mmatchString(acc, "_") || mmatchRange(acc, 48, 57)))
}

sexpr_parse_sexpr_compiled(acc : MoParseAcc) -> bool {
	{
		pushMCheckpoint(acc);
		if ((sexpr_parse_ws(acc) && sexpr_parse_sexpr(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}































