import tools/orbit/sexpr/sexpr_types;
import tools/orbit/sexpr/pretty_sexpr;
import math/math;

export {
    // Utility functions to extract values from S-expressions
    getSBool(expr : Sexpr, context : string) -> bool;
    getSInt(expr : Sexpr, context : string) -> int;
    getSDouble(expr : Sexpr, context : string) -> double;
    getSString(expr : Sexpr, context : string) -> string;
    
    // Create result values
    makeSBool(b : bool) -> Sexpr;
    makeSInt(i : int) -> Sexpr;
    makeSDouble(d : double) -> Sexpr;
    makeSString(s : string) -> Sexpr;
    makeSList(items : [Sexpr]) -> Sexpr;
}

// Extract a boolean value from a Sexpr
getSBool(expr : Sexpr, context : string) -> bool {
    switch (expr) {
        SSBool(b): b;
        SSInt(i): i != 0;
        SSDouble(d): d != 0.0;
        default: {
            println("ERROR in " + context + ": expected a boolean, got " + prettySexpr(expr));
            false;
        }
    }
}

// Extract an integer value from a Sexpr
getSInt(expr : Sexpr, context : string) -> int {
    switch (expr) {
        SSInt(i): i;
        SSDouble(d): floor(d);
        SSBool(b): if (b) 1 else 0;
        SSString(s): {
            // Try to parse the string as an integer
            i = s2i(s);
            if (s == i2s(i)) i else {
                println("ERROR in " + context + ": could not parse string as integer: " + s);
                0;
            }
        }
        default: {
            println("ERROR in " + context + ": expected an integer, got " + prettySexpr(expr));
            0;
        }
    }
}

// Extract a double value from a Sexpr
getSDouble(expr : Sexpr, context : string) -> double {
    switch (expr) {
        SSDouble(d): d;
        SSInt(i): i2d(i);
        SSBool(b): if (b) 1.0 else 0.0;
        SSString(s): {
            // Try to parse the string as a double
            d = s2d(s);
            if (s == d2s(d) || s2i(s) == floor(d)) d else {
                println("ERROR in " + context + ": could not parse string as double: " + s);
                0.0;
            }
        }
        default: {
            println("ERROR in " + context + ": expected a double, got " + prettySexpr(expr));
            0.0;
        }
    }
}

// Extract a string value from a Sexpr
getSString(expr : Sexpr, context : string) -> string {
    switch (expr) {
        SSString(s): s;
        SSVariable(v): v;
        SSConstructor(c): c;
        SSInt(i): i2s(i);
        SSDouble(d): d2s(d);
        SSBool(b): if (b) "true" else "false";
        default: {
            println("ERROR in " + context + ": expected a string, got " + prettySexpr(expr));
            "";
        }
    }
}

// Create S-expression values
makeSBool(b : bool) -> Sexpr {
    SSBool(b);
}

makeSInt(i : int) -> Sexpr {
    SSInt(i);
}

makeSDouble(d : double) -> Sexpr {
    SSDouble(d);
}

makeSString(s : string) -> Sexpr {
    SSString(s);
}

makeSList(items : [Sexpr]) -> Sexpr {
    SSList(items);
}