import tools/orbit/ograph;
import tools/orbit/orbit_types;
import tools/orbit/sexpr/sexpr_types;
import tools/orbit/orbit_simple_ograph;
import tools/orbit/sexpr/sexpr_ograph_utils;

export {
    // Convert an OGraph node to an S-expression
    // Takes the OGraph and the node ID to convert
    // Returns the corresponding S-expression
    ograph2Sexpr(graph : OGraph, nodeId : int) -> Sexpr;
    
    // Extract an S-expression from an OGraph by name and node ID
    // Returns the corresponding S-expression or a failure representation
    extractOGraphSexpr(graphName : string, nodeId : int, tracing : bool) -> Sexpr;
}

// Convert an OGraph node to an Sexpr
ograph2Sexpr(graph : OGraph, nodeId : int) -> Sexpr {
    // Find the root node in case this is part of an equivalence class
    rootId = findORoot(graph, nodeId);
    
    // Look up the node in the graph
    switch (lookupOClass(graph, rootId)) {
        Some(oclass): {
            node = oclass.node;
            
            // Process all children recursively first
            childExprs = map(node.children, \childId -> {
                ograph2Sexpr(graph, childId);
            });
            
            // Use our new utility function to construct the Sexpr
            // from the node's components
            constructSexpr(node.op, childExprs, node.value);
        }
        None(): {
            // Node not found - return a placeholder
            SSString("<Node ID " + i2s(nodeId) + " not found>");
        }
    }
}

// Extract an S-expression from an OGraph by name and node ID
extractOGraphSexpr(graphName : string, nodeId : int, tracing : bool) -> Sexpr {
    // Get the graph from the registry
    switch (lookupTree(^ographRegistry, graphName)) {
        Some(ograph): {
            // Find the root to ensure we get the canonical representation
            root = findORoot(ograph, nodeId);
            
            // Extract the expression from the graph
            if (tracing) println("Extracting S-expression from OGraph " + graphName + ", node " + i2s(nodeId) + ", root " + i2s(root));
            ograph2Sexpr(ograph, root);
        }
        None(): {
            println("ERROR: OGraph '" + graphName + "' not found");
            SSString("<ERROR: Graph not found>");
        }
    }
}