import tools/orbit/sexpr/sexpr_types;
import tools/orbit/sexpr/GLSL/glsl_serializer;
import tools/orbit/sexpr/sexpr_stdlib;
import tools/orbit/sexpr/pretty_sexpr;
import string;
import runtime;

main() {
	// Create a sample S-expression to serialize
	// This is a simple factorial function: (define factorial (lambda (n) (if (= n 0) 1 (* n (factorial (- n 1))))))
	expr = SSList([
		SSVariable("define"),
		SSVariable("factorial"),
		SSSpecialForm(SLambda(), [
			SSList([SSVariable("n")]),
			SSList([
				SSSpecialForm(SIf(), [
					SSList([SSOperator("="), SSVariable("n"), SSInt(0)]),
					SSInt(1),
					SSList([
						SSOperator("*"),
						SSVariable("n"),
						SSList([
							SSVariable("factorial"),
							SSList([SSOperator("-"), SSVariable("n"), SSInt(1)])
						])
					])
				])
			])
		])
	]);
	
	println("Original S-expression:");
	println(prettySexpr(expr));
	println("");
	
	// Generate the constant pool
	constPoolResult = generateConstantPool(expr);
	constantPool = constPoolResult.first;
	constantMap = constPoolResult.second;
	
	println("Constant Pool (" + i2s(length(constantPool)) + " strings):");
	iteri(constantPool, \i, str -> {
		println(i2s(i) + ": '" + str + "'");
	});
	println("");
	
	// Generate the binary representation
	result = sexprToGLSL(expr);
	binaryAST = result.first;
	constantPoolArray = result.second;
	
	println("Binary AST (" + i2s(length(binaryAST)) + " values):");
	printBinaryAST(binaryAST);
	println("");
	
	println("Constant Pool Array (" + i2s(length(constantPoolArray)) + " values):");
	printBinaryAST(constantPoolArray);
	println("");
	
	// Test serializing individual nodes
	testSerializeSingleNode(SSInt(42), constantMap);
	testSerializeSingleNode(SSBool(true), constantMap);
	testSerializeSingleNode(SSDouble(3.14159), constantMap);
	testSerializeSingleNode(SSString("hello"), constantMap);
	testSerializeSingleNode(SSVariable("factorial"), constantMap);
}

// Helper to print the binary AST in a more readable format
printBinaryAST(arr : [double]) -> void {
	if (length(arr) <= 30) {
		// Print the whole array for small arrays
		println("[" + strGlue(map(arr, d2s), ", ") + "]");
	} else {
		// Print the first and last 10 elements for large arrays
		println("[" + 
			strGlue(map(take(arr, 10), d2s), ", ") + 
			", ... (" + i2s(length(arr) - 20) + " more elements) ..., " + 
			strGlue(map(tailFrom(arr, length(arr) - 10), d2s), ", ") + 
		"]");
	}
}

// Test function to demonstrate serializing a single node
testSerializeSingleNode(node : Sexpr, constMap : Tree<string, int>) -> void {
	binaryNode = serializeSingleNode(node, constMap);
	println("Node: " + prettySexpr(node) + " => " + 
		"[" + strGlue(map(binaryNode, d2s), ", ") + "]");
}