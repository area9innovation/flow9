import tools/orbit/sexpr/sexpr_types;

export {
	// Type tags for binary AST node types - these must match the GLSL implementation
	// Primary type tags
	TAG_SSINT : int = 1;
	TAG_SSDOUBLE : int = 2;
	TAG_SSBOOL : int = 3;
	TAG_SSSTRING : int = 4;
	TAG_SSVARIABLE : int = 5;
	TAG_SSCONSTRUCTOR : int = 6;
	TAG_SSOPERATOR : int = 7;
	TAG_SSLIST : int = 8;
	TAG_SSVECTOR : int = 9;
	TAG_SSSPECIALFORM : int = 10;
	
	// Runtime tags - created during execution
	TAG_CLOSURE : int = 20;
	TAG_ERROR : int = 21;

	// Special form enum IDs - must match GLSL implementation
	SFORM_AND : int = 1;
	SFORM_BEGIN : int = 2;
	SFORM_CLOSURE : int = 3;
	SFORM_DEFINE : int = 4;
	SFORM_EVAL : int = 5;
	SFORM_IF : int = 6;
	SFORM_IMPORT : int = 7;
	SFORM_LAMBDA : int = 8;
	SFORM_LET : int = 9;
	SFORM_LETREC : int = 10;
	SFORM_LIST : int = 11;
	SFORM_MATCH : int = 12;
	SFORM_OR : int = 13;
	SFORM_QUASIQUOTE : int = 14;
	SFORM_QUOTE : int = 15;
	SFORM_SET : int = 16;
	SFORM_UNQUOTE : int = 17;
	SFORM_UNQUOTESPLICING : int = 18;

	// Maps a Special_name to its enum ID
	specialNameToEnumId(name : Special_name) -> int;
}

// Maps a Special_name to its enum ID for serialization
specialNameToEnumId(name : Special_name) -> int {
	switch (name) {
		SAnd(): SFORM_AND;
		SBegin(): SFORM_BEGIN;
		SClosure(): SFORM_CLOSURE;
		SDefine(): SFORM_DEFINE;
		SEval(): SFORM_EVAL;
		SIf(): SFORM_IF;
		SImport(): SFORM_IMPORT;
		SLambda(): SFORM_LAMBDA;
		SLet(): SFORM_LET;
		SLetRec(): SFORM_LETREC;
		SList(): SFORM_LIST;
		SMatch(): SFORM_MATCH;
		SOr(): SFORM_OR;
		SQuasiQuote(): SFORM_QUASIQUOTE;
		SQuote(): SFORM_QUOTE;
		SSet(): SFORM_SET;
		SUnQuote(): SFORM_UNQUOTE;
		SUnQuoteSplicing(): SFORM_UNQUOTESPLICING;
	}
}