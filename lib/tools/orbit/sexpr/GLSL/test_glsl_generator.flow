import tools/orbit/sexpr/sexpr_types;
import tools/orbit/sexpr/GLSL/glsl_serializer;
import tools/orbit/sexpr/GLSL/glsl_generator;
import tools/orbit/sexpr/pretty_sexpr;
import tools/orbit/sexpr/sexpr_stdlib;
import string;
import runtime;

main() {
	// Create a sample S-expression to serialize
	// This is a simple factorial function: (define factorial (lambda (n) (if (= n 0) 1 (* n (factorial (- n 1))))))
	expr = SSList([
		SSVariable("define"),
		SSVariable("factorial"),
		SSSpecialForm(SLambda(), [
			SSList([SSVariable("n")]),
			SSList([
				SSSpecialForm(SIf(), [
					SSList([SSOperator("="), SSVariable("n"), SSInt(0)]),
					SSInt(1),
					SSList([
						SSOperator("*"),
						SSVariable("n"),
						SSList([
							SSVariable("factorial"),
							SSList([SSOperator("-"), SSVariable("n"), SSInt(1)])
						])
					])
				])
			])
		])
	]);
	
	println("Original S-expression:");
	println(prettySexpr(expr));
	println("");
	
	// Output path for the generated GLSL file
	outputPath = "/tmp/factorial_program.glsl";
	
	// Generate the GLSL file
	success = generateProgramGLSL(expr, outputPath);
	
	if (success) {
		println("Successfully generated GLSL file at: " + outputPath);
		println("The file contains the serialized factorial program as GLSL uniform data.");
		println("This file can now be included in your GLSL interpreter.");
	} else {
		println("Failed to generate GLSL file.");
	}

	// Just to see the output
	println("\nPreview of generated GLSL code:");
	result = sexprToGLSL(expr);
	sample = formatGLSLArray("u_constant_pool_sample", take(result.second, min(length(result.second), 10)), false);
	println(sample);
}