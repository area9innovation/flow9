import tools/orbit/ograph;          // For OGraph operations
import tools/orbit/sexpr/sexpr_types; // For Sexpr types
import tools/orbit/sexpr/ograph2sexpr; // For ograph2Sexpr

export {
    // One-level pattern matcher for SEXpr implementation
    // Returns a Pair containing success (bool) and updated bindings array
    matchSExprNodeOneLevel(
        graph : OGraph,                      // The graph to search in
        nodeId : int,                        // The node to match against
        pattern : Sexpr,                     // The pattern to match
        bindings : [Pair<string, int>],      // Existing variable bindings (variable name â†’ node ID)
        tracing : bool                       // Enable tracing for debugging
    ) -> Pair<bool, [Pair<string, int>]>;    // success, updated bindings
}

// One-level pattern matcher for SEXpr implementation
// Returns a Pair containing success (bool) and updated bindings array
matchSExprNodeOneLevel(graph : OGraph, nodeId : int, pattern : Sexpr, bindings : [Pair<string, int>], tracing : bool) -> Pair<bool, [Pair<string, int>]> {
    root = findORoot(graph, nodeId);
	switch (pattern) {
		SSVariable(varName): {
			if (varName != "") {
				// Check if this variable is already bound
				existingBinding = find(bindings, \binding -> binding.first == varName);
				
				switch (existingBinding) {
					Some(binding): {
						// Variable is already bound, must be consistent
						if (findORoot(graph, binding.second) == root) {
							// Matched consistently
							if (tracing) println("DEBUG: Consistent binding for " + varName);
							Pair(true, bindings);
						} else {
							// Inconsistent binding
							if (tracing) println("DEBUG: Inconsistent binding for " + varName);
							Pair(false, []);
						}
					}
					None(): {
						// New binding
						if (tracing) println("DEBUG: New binding: " + varName + " = " + i2s(root));
						newBindings = concat(bindings, [Pair(varName, root)]);
						Pair(true, newBindings);
					}
				}
			} else {
				// Empty variable name is not valid
				Pair(false, []);
			}
		}
		default: {
			// Get the ONode for this node
			switch (lookupOClass(graph, root)) {
				Some(oclass): {
					node = oclass.node;
					// Use our enhanced decomposition function to get all components
					components = decomposeSexpr(pattern);
					patternOp = components.first;
					patternChildren = components.second;
					patternValue = components.third;
					// Normal pattern matching
					nodeOp = node.op;
					nodeChildren = node.children;
					if (patternOp == nodeOp && patternValue == node.value) {
						if (tracing) println("DEBUG: Matching pattern with op: " + patternOp + ", at node: " + i2s(root));
						Pair(true, []);
					} else {
						Pair(false, []);
					}
				}
				None(): {
					if (tracing) println("DEBUG: Node not found in graph");
					Pair(false, []);
				}
			}
		}
	}
}
