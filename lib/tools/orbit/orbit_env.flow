import tools/orbit/orbit_types;
import tools/runcore/core_lib;
import tools/runcore/value_types;
import tools/runcore/value_util; // For utility functions
import ds/tree;

export {
	// Environment for Orbit with bindings and result value
	OrbEnv(
		bindings : Tree<string, CoreValue>,
		result : CoreValue
	);

	// Create an empty environment
	emptyOrbEnv() -> OrbEnv;

	// Helper to retrieve variable from environment
	lookupVar(env : OrbEnv, name : string) -> Maybe<CoreValue>;

	// Helper to add a binding to environment
	bindVar(env : OrbEnv, name : string, value : CoreValue) -> OrbEnv;

	// Helper for pretty printing CoreValue
	prettyPrintCoreValue(val : CoreValue) -> string;
}

emptyOrbEnv() -> OrbEnv {
	OrbEnv(makeTree(), CoreInt(0))
}

lookupVar(env : OrbEnv, name : string) -> Maybe<CoreValue> {
	lookupTree(env.bindings, name)
}

bindVar(env : OrbEnv, name : string, value : CoreValue) -> OrbEnv {
	OrbEnv(setTree(env.bindings, name, value), env.result)
}

// Helper for pretty printing CoreValue
prettyPrintCoreValue(val : CoreValue) -> string {
	switch (val) {
		CoreInt(i): i2s(i);
		CoreDouble(d): d2s(d);
		CoreString(s): s;
		CoreBool(b): if (b) "true" else "false";
		CoreArray(arr): "[" + strGlue(map(arr, prettyPrintCoreValue), ", ") + "]";
		CoreConstructor(name, args): {
			name + "(" + strGlue(map(args, prettyPrintCoreValue), ", ") + ")";
		}
	}
}