import tools/orbit/orbit_types;
// Removed RunCore related imports
import ds/tree;
import ds/set;

export {
	// Environment for Orbit with bindings and result value
	OrbEnv(
		vars : Tree<string, OrMath_expr>,  // Variable bindings
		result : OrMath_expr,              // Result of the last evaluation
		tracing : bool,                    // Controls whether to output trace messages during interpretation
		importCache : ref Tree<string, OrMath_expr>,  // Cache of imported files to avoid reparsing
		importedFiles : Set<string>        // Set of files already imported in the current scope
	);

	// A closure wrapping a lambda with captured environment
	OrbClosure(
		capturedEnv : Tree<string, OrMath_expr>,  // Captured variables from definition scope
		params : [OrIdType],                      // Function parameters
		body : OrMath_expr                        // Function body
	);

	// Create an empty environment
	emptyOrbEnv() -> OrbEnv;

	// Helper to retrieve variable from environment
	lookupVar(env : OrbEnv, name : string) -> Maybe<OrMath_expr>;

	// Helper to add a binding to environment
	bindVar(env : OrbEnv, name : string, value : OrMath_expr) -> OrbEnv;

	// Creates a closure from a lambda with captured environment
	makeClosure(capturedEnv : Tree<string, OrMath_expr>, params : [OrIdType], body : OrMath_expr) -> OrbClosure;

	// Check if an expression is a closure
	isClosure(expr : OrMath_expr) -> bool;

	// Gets the closure from an expression, if it is a closure
	getClosure(expr : OrMath_expr) -> Maybe<OrbClosure>;

	// Enable or disable tracing in the environment
	setTracing(env : OrbEnv, enabled : bool) -> OrbEnv;
}

emptyOrbEnv() -> OrbEnv {
	// Initialize with empty environment
	OrbEnv(makeTree(), OrInt(0), false, ref makeTree(), makeSet())
}

lookupVar(env : OrbEnv, name : string) -> Maybe<OrMath_expr> {
	lookupTree(env.vars, name)
}

bindVar(env : OrbEnv, name : string, value : OrMath_expr) -> OrbEnv {
	OrbEnv(setTree(env.vars, name, value), env.result, env.tracing, env.importCache, env.importedFiles)
}

makeClosure(capturedEnv : Tree<string, OrMath_expr>, params : [OrIdType], body : OrMath_expr) -> OrbClosure {
	OrbClosure(capturedEnv, params, body);
}

// Check if an expression is a lambda (which now represents a closure)
isClosure(expr : OrMath_expr) -> bool {
	switch (expr) {
		OrLambda(__, __, __): true;
		default: false;
	}
}

// Extract environment, params and body from a lambda
getClosure(expr : OrMath_expr) -> Maybe<OrbClosure> {
	switch (expr) {
		OrLambda(env_bindings, params, body): {
			// Convert env_bindings to a tree for compatibility with the OrbClosure structure
			capturedEnv = fold(env_bindings, makeTree(), \acc, binding -> {
				setTree(acc, binding.id, binding.math_expr);
			});
			Some(OrbClosure(capturedEnv, params, body));
		}
		default: None();
	}
}

// Enable or disable tracing in the environment
setTracing(env : OrbEnv, enabled : bool) -> OrbEnv {
	OrbEnv(env with tracing = enabled);
}