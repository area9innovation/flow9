import ds/tree;

export {
	// The OGraph structure for storing and manipulating orbit graphs
	OGraph(
		oclasses : ref Tree<int, OClass>, // Map from class id to equivalence class
		classes : ref Tree<int, int>,     // Union-find data structure: maps from an id to its parent id
		next_id : ref int,               // Next available id
		int_values : ref Tree<int, int>,  // Integer values associated with eclasses
		double_values : ref Tree<int, double>,  // Double values associated with eclasses
		string_values : ref Tree<int, string>   // String values associated with eclasses
	);
	
	// An equivalence class
	OClass(
		root : int,    // The canonical id of this class
		node : ONode   // The node in this class
	);
	
	// A node in the graph
	ONode(
		domain : ODomain,   // The domain this node lives in (e.g., "flow", "math")
		op : string,        // Operator or constructor name (e.g., "Person", "+")
		children : [int],   // Child nodes (references to other class ids)
		belongsTo : [int]   // What domains do this node belong to?
	);
	
	// Domain identifier
	ODomain(
		domain : string    // Domain name (e.g., "flow", "math")
	);
}