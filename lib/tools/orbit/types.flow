import ds/tree;

export {
	// The OGraph structure for storing and manipulating orbit graphs
	OGraph(
		oclasses : ref Tree<int, OClass>, // Map from class id to equivalence class
		classes : ref Tree<int, int>,     // Union-find data structure: maps from an id to its parent id
		next_id : ref int,               // Next available id
	);
	
	// An equivalence class
	OClass(
		root : int,    // The canonical id of this class
		node : ONode   // The node in this class
	);
	
	// A node in the graph
	ONode(
		op : string,        // Operator or constructor name (e.g., "Person", "+")
		children : [int],   // Child nodes (references to other class ids)
		belongsTo : [int],   // What domains do this node belong to?
		value : OrbitValue
	);

	// Type for primitive values in Orbit expressions
	OrbitValue ::= OrbitNone, OrbitInt, OrbitDouble, OrbitString, OrbitBool;
		OrbitNone();
		OrbitInt(value : int);
		OrbitDouble(value : double);
		OrbitString(value : string);
		OrbitBool(value : bool);
}