import runtime;

export {
	// Create a snapshot of the current window state
	native createWindowSnapshot : () -> ? = Native.createWindowSnapshot;

	// Compare two window snapshots and return differences
	native compareWindowSnapshots : (?, ?) -> ? = Native.compareWindowSnapshots;

	// Print a formatted memory leak report
	native printMemoryLeakReport : (?) -> void = Native.printMemoryLeakReport;

	// Simple helper: take two snapshots around an operation and report
	simpleMemoryLeakTest : (string, () -> void) -> void;
}

// Simple memory leak test: take before/after snapshots and report differences
simpleMemoryLeakTest(testName : string, operation : () -> void) -> void {
	println("=== " + testName + " ===");
	println("Taking initial snapshot...");

	before = createWindowSnapshot();

	println("Performing operation...");
	operation();

	println("Taking final snapshot and comparing...");
	after = createWindowSnapshot();
	diff = compareWindowSnapshots(before, after);

	println("Results for " + testName + ":");
	printMemoryLeakReport(diff);
	println("");
}