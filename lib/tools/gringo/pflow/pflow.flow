import tools/gringo/pflow/parse;
import tools/gringo/pflow/interpreter;
import tools/gringo/pflow/typechecker;
import tools/gringo/pflow/prettyprint;
import tools/gringo/pflow/grain;
import math/stringmath;
import fs/filesystem;
import net/url_parameter;

runFile(file : string) -> void {
	println("processing file: '" + file + "'");
	code = getFileContent(file);
	e : PExp = parsePFlow(code);
	// println(prettyPExp(e));

	if (true) {
		// Run the program 
		start = timestamp();
		value = interpretPExp(makeTree(), e);
		println(value);
		println(d2st((timestamp() - start) / 1000.0, 2) + "s");
	}

	if (false) {
		tenv = makeTypeEnv();
		t0 : TExp = convertPExp2TExp(tenv, e);
		t1 : TType = typecheckTExp(tenv, t0);

		if (false) {
			println("Equivalence class");
			generate(0, ^(tenv.unique), \tv -> {
				root = findUnionMapRoot(tenv.unionFindMap, tv);
				println("Root of " + i2s(tv) + " is " + i2s(root) + " with " + prettyTType(tenv, TTypeVar(tv)));
			});
			{}
		}
		rt : TExp = resolveTExp(tenv, t0);
		// println(prettyTExp(tenv, rt));

		grain = compile2grain(rt);
		setFileContent("program.gr", grain);
		{}
	}
}

main() {
	files = getUrlParameter("file");
	if (files == "") {
		println("please specify the flow program with file=<path> option");
	} else {
		iter(filter(strSplit(files, ","), isNotSpace), \file ->
		if (!fileExists(file)) {
			println("file '" + file + "' doesn't exist");
		} else {
			runFile(file);
		});
	}
	quit(0);
}
