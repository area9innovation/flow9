// Generated by Gringo
import tools/gringo/griego/griego_types;
import runtime;
import tools/dsl/dsl_util;

export {
	griegoAst2DslAst(w : GriegoAst) -> DslAst;
	dslAst2GriegoAst(d : DslAst) -> GriegoAst;
	dslAst2GrTerm(d : DslAst) -> GrTerm;
}

griegoAst2DslAst(wal : GriegoAst) -> DslAst {
	switch (wal) {
		GriegoAstBool(value): DslBool(value);
		GriegoAstInt(value): DslInt(value);
		GriegoAstDouble(value): DslDouble(value);
		GriegoAstString(value): DslString(value);
		GriegoAstList(value): DslList(mapList(value, griegoAst2DslAst));
		GrChoice(a0, a1, a2): DslNode("choice", [griegoAst2DslAst(a0), griegoAst2DslAst(a1)], 0);
		GrError(a0, a1): DslNode("error", [griegoAst2DslAst(a0)], 0);
		GrLower(a0, a1): DslNode("lower", [griegoAst2DslAst(a0)], 0);
		GrNegate(a0, a1): DslNode("negate", [griegoAst2DslAst(a0)], 0);
		GrOpt(a0, a1): DslNode("opt", [griegoAst2DslAst(a0)], 0);
		GrPlus(a0, a1): DslNode("plus", [griegoAst2DslAst(a0)], 0);
		GrPrecedence(a0, a1, a2): DslNode("precedence", [griegoAst2DslAst(a0), griegoAst2DslAst(a1)], 0);
		GrRange(a0, a1, a2): DslNode("range", [DslString(a0), DslString(a1)], 0);
		GrRule(a0, a1, a2, a3): DslNode("rule", [DslString(a0), griegoAst2DslAst(a1), griegoAst2DslAst(a2)], 0);
		GrSeq(a0, a1, a2): DslNode("seq", [griegoAst2DslAst(a0), griegoAst2DslAst(a1)], 0);
		GrStar(a0, a1): DslNode("star", [griegoAst2DslAst(a0)], 0);
		GrString(a0, a1): DslNode("string", [DslString(a0)], 0);
		GrUnquote(a0, a1): DslNode("unquote", [griegoAst2DslAst(a0)], 0);
		GrVar(a0, a1): DslNode("var", [DslString(a0)], 0);

	}
}

dslAst2GriegoAst(d : DslAst) -> GriegoAst {
	switch (d) {
		DslBool(value): GriegoAstBool(value);
		DslInt(value): GriegoAstInt(value);
		DslDouble(value): GriegoAstDouble(value);
		DslString(value): GriegoAstString(value);
		DslList(value): GriegoAstList(mapList(value, dslAst2GriegoAst));
		DslNode(name, args, pos): {
			if (name == "choice") {
				GrChoice(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
			} else if (name == "error") {
				GrError(dslAst2GrTerm(args[0]), 0)
			} else if (name == "lower") {
				GrLower(dslAst2GrTerm(args[0]), 0)
			} else if (name == "negate") {
				GrNegate(dslAst2GrTerm(args[0]), 0)
			} else if (name == "opt") {
				GrOpt(dslAst2GrTerm(args[0]), 0)
			} else if (name == "plus") {
				GrPlus(dslAst2GrTerm(args[0]), 0)
			} else if (name == "precedence") {
				GrPrecedence(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
			} else if (name == "range") {
				GrRange(getDslString(args[0]), getDslString(args[1]), 0)
			} else if (name == "rule") {
				GrRule(getDslString(args[0]), dslAst2GrTerm(args[1]), dslAst2GrTerm(args[2]), 0)
			} else if (name == "seq") {
				GrSeq(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
			} else if (name == "star") {
				GrStar(dslAst2GrTerm(args[0]), 0)
			} else if (name == "string") {
				GrString(getDslString(args[0]), 0)
			} else if (name == "unquote") {
				GrUnquote(dslAst2GrTerm(args[0]), 0)
			} else if (name == "var") {
				GrVar(getDslString(args[0]), 0)
			} else { println("ERROR: Could not convert " + name + " in GriegoAst"); GriegoAstBool(false) }

		}
	}
}

dslAst2GrTerm(d : DslAst) -> GrTerm {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "choice") {
		GrChoice(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
	} else if (name == "error") {
		GrError(dslAst2GrTerm(args[0]), 0)
	} else if (name == "lower") {
		GrLower(dslAst2GrTerm(args[0]), 0)
	} else if (name == "negate") {
		GrNegate(dslAst2GrTerm(args[0]), 0)
	} else if (name == "opt") {
		GrOpt(dslAst2GrTerm(args[0]), 0)
	} else if (name == "plus") {
		GrPlus(dslAst2GrTerm(args[0]), 0)
	} else if (name == "precedence") {
		GrPrecedence(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
	} else if (name == "range") {
		GrRange(getDslString(args[0]), getDslString(args[1]), 0)
	} else if (name == "rule") {
		GrRule(getDslString(args[0]), dslAst2GrTerm(args[1]), dslAst2GrTerm(args[2]), 0)
	} else if (name == "seq") {
		GrSeq(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
	} else if (name == "star") {
		GrStar(dslAst2GrTerm(args[0]), 0)
	} else if (name == "string") {
		GrString(getDslString(args[0]), 0)
	} else if (name == "unquote") {
		GrUnquote(dslAst2GrTerm(args[0]), 0)
	} else if (name == "var") {
		GrVar(getDslString(args[0]), 0)
	} else { println("ERROR: Could not convert " + name + " in GrTerm"); GrError(GrString("", 0), 0) }

}
dslAst2GrChoice(d : DslAst) -> GrChoice {
	node = getDslNode(d);
	args = node.args;
	GrChoice(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
}
dslAst2GrError(d : DslAst) -> GrError {
	node = getDslNode(d);
	args = node.args;
	GrError(dslAst2GrTerm(args[0]), 0)
}
dslAst2GrLower(d : DslAst) -> GrLower {
	node = getDslNode(d);
	args = node.args;
	GrLower(dslAst2GrTerm(args[0]), 0)
}
dslAst2GrNegate(d : DslAst) -> GrNegate {
	node = getDslNode(d);
	args = node.args;
	GrNegate(dslAst2GrTerm(args[0]), 0)
}
dslAst2GrOpt(d : DslAst) -> GrOpt {
	node = getDslNode(d);
	args = node.args;
	GrOpt(dslAst2GrTerm(args[0]), 0)
}
dslAst2GrPlus(d : DslAst) -> GrPlus {
	node = getDslNode(d);
	args = node.args;
	GrPlus(dslAst2GrTerm(args[0]), 0)
}
dslAst2GrPrecedence(d : DslAst) -> GrPrecedence {
	node = getDslNode(d);
	args = node.args;
	GrPrecedence(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
}
dslAst2GrRange(d : DslAst) -> GrRange {
	node = getDslNode(d);
	args = node.args;
	GrRange(getDslString(args[0]), getDslString(args[1]), 0)
}
dslAst2GrRule(d : DslAst) -> GrRule {
	node = getDslNode(d);
	args = node.args;
	GrRule(getDslString(args[0]), dslAst2GrTerm(args[1]), dslAst2GrTerm(args[2]), 0)
}
dslAst2GrSeq(d : DslAst) -> GrSeq {
	node = getDslNode(d);
	args = node.args;
	GrSeq(dslAst2GrTerm(args[0]), dslAst2GrTerm(args[1]), 0)
}
dslAst2GrStar(d : DslAst) -> GrStar {
	node = getDslNode(d);
	args = node.args;
	GrStar(dslAst2GrTerm(args[0]), 0)
}
dslAst2GrString(d : DslAst) -> GrString {
	node = getDslNode(d);
	args = node.args;
	GrString(getDslString(args[0]), 0)
}
dslAst2GrUnquote(d : DslAst) -> GrUnquote {
	node = getDslNode(d);
	args = node.args;
	GrUnquote(dslAst2GrTerm(args[0]), 0)
}
dslAst2GrVar(d : DslAst) -> GrVar {
	node = getDslNode(d);
	args = node.args;
	GrVar(getDslString(args[0]), 0)
}

