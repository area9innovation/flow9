import text/gringo/gringo_action;
import text/gringo/gringo_ast;
import ds/list;
import formats/json/json;
import math/math;

export {
	/*
	Actions:
	nil, cons: Used to construct arrays
	null: JsonNull
	object: Make an object from a key/value pair
	*/
	jsonAction = GringoAction(
		\acc : List<Json>, v -> {
			if (v == "nil") {
				pushJsonStack(acc, JsonArray([]));
			} else if (v == "null") {
				pushJsonStack(acc, JsonNull());
			} else if (v == "cons") {
				elm = popJsonStack(acc);
				list = popJsonStack(elm.second);
				narray = pushJsonValue(list.first, elm.first);
				pushJsonStack(list.second, narray);
			} else if (v == "s2d" || v == "s2i") {
				elm = popJsonStack(acc);
				n = s2d(getJsonStringValue(elm.first, ""));
				pushJsonStack(elm.second, JsonDouble(n));
			} else if (v == "object") {
				val = popJsonStack(acc);
				key = popJsonStack(val.second);
				pushJsonStack(key.second, JsonObject([Pair(getJsonStringValue(key.first, ""), val.first)]));
			} else if (v == "dump") {
				println("Stack");
				iterList(acc, \j -> println(json2stringFormatted(j)));
				acc;
			} else {
				// OK, we assume it is a constructor
				pieces = strSplit(v, "_");
				if (length(pieces) == 2) {
					name = pieces[0];
					arity = s2i(pieces[1]);
					if (arity == 0) {
						pushJsonStack(acc, JsonObject([Pair(name, JsonArray([]))]));
					} else if (arity == 1) {
						elm = popJsonStack(acc);
						pushJsonStack(elm.second, JsonObject([Pair(name, JsonArray([elm.first]))]));
					} else if (arity == 2) {
						elm1 = popJsonStack(acc);
						elm2 = popJsonStack(elm1.second);
						pushJsonStack(elm2.second, JsonObject([Pair(name, JsonArray([elm2.first, elm1.first]))]));
					} else if (arity == 3) {
						elm1 = popJsonStack(acc);
						elm2 = popJsonStack(elm1.second);
						elm3 = popJsonStack(elm2.second);
						pushJsonStack(elm3.second, JsonObject([Pair(name, JsonArray([elm3.first, elm2.first, elm1.first]))]));
					} else if (arity == 4) {
						elm1 = popJsonStack(acc);
						elm2 = popJsonStack(elm1.second);
						elm3 = popJsonStack(elm2.second);
						elm4 = popJsonStack(elm3.second);
						pushJsonStack(elm4.second, JsonObject([Pair(name, JsonArray([elm4.first, elm3.first, elm2.first, elm1.first]))]));
					} else if (arity == 5) {
						elm1 = popJsonStack(acc);
						elm2 = popJsonStack(elm1.second);
						elm3 = popJsonStack(elm2.second);
						elm4 = popJsonStack(elm3.second);
						elm5 = popJsonStack(elm4.second);
						pushJsonStack(elm5.second, JsonObject([Pair(name, JsonArray([elm5.first, elm4.first, elm3.first, elm2.first, elm1.first]))]));
					} else {
						println("TODO: Implement constructor " + name + "/" + i2s(arity));
						acc;
					}
				} else {
					println("Unknown operation " + v);
					acc;
				}
			}
		},
		\acc : List<Json>, m -> {
			Cons(JsonString(m), acc)
		}
	);

	getJsonGringo(acc : List<Json>) -> Json;
}

pushJsonStack(a : List<Json>, e : Json) -> List<Json> {
	Cons(e, a)
}

getJsonGringo(acc : List<Json>) -> Json {
	popJsonStack(acc).first;
}

popJsonStack(a : List<Json>) -> Pair<Json, List<Json>> {
	switch (a) {
		EmptyList(): {
			println("Stack underflow");
			Pair(JsonNull(), a);
		}
		Cons(head, tailL): {
			Pair(head, tailL)
		}
	}
}
