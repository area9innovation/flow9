// Generated by 
// gringo file=tools/gringo/tutorial/exp.gringo out=1
import text/gringo/gringo_ast;

export {
	expGrammar() -> GTerm;
}

expGrammar() -> GTerm {
	GRule("exp", GSeq(GVar("exp1"), GOpt(GSeq(GSeq(GSeq(GString("||"), GVar("ws")), GVar("exp")), GUnquote(GString("||"))))), GRule("exp1", GSeq(GVar("exp2"), GOpt(GSeq(GSeq(GSeq(GString("&&"), GVar("ws")), GVar("exp1")), GUnquote(GString("&&"))))), GRule("exp2", GSeq(GVar("exp3"), GChoice(GSeq(GSeq(GSeq(GString("=="), GVar("ws")), GVar("exp2")), GUnquote(GString("=="))), GOpt(GSeq(GSeq(GSeq(GString("!="), GVar("ws")), GVar("exp2")), GUnquote(GString("!=")))))), GRule("exp3", GSeq(GVar("exp4"), GOpt(GChoice(GSeq(GSeq(GSeq(GString("<="), GVar("ws")), GVar("exp3")), GUnquote(GString("<="))), GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("exp3")), GUnquote(GString("<"))), GChoice(GSeq(GSeq(GSeq(GString(">="), GVar("ws")), GVar("exp3")), GUnquote(GString(">="))), GSeq(GSeq(GSeq(GString(">"), GVar("ws")), GVar("exp3")), GUnquote(GString(">")))))))), GRule("exp4", GSeq(GVar("exp5"), GStar(GChoice(GSeq(GSeq(GSeq(GString("+"), GVar("ws")), GVar("exp5")), GUnquote(GString("+"))), GSeq(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp")), GVar("ws")), GUnquote(GString("-")))))), GRule("exp5", GSeq(GVar("exp6"), GStar(GChoice(GSeq(GSeq(GSeq(GString("*"), GVar("ws")), GVar("exp5")), GUnquote(GString("*"))), GChoice(GSeq(GSeq(GSeq(GString("/"), GVar("ws")), GVar("exp5")), GUnquote(GString("/"))), GSeq(GSeq(GSeq(GString("%"), GVar("ws")), GVar("exp5")), GUnquote(GString("%"))))))), GRule("exp6", GSeq(GVar("exp7"), GOpt(GPlus(GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exp")), GString("]")), GVar("ws")), GUnquote(GString("index")))))), GRule("exp7", GSeq(GVar("exp8"), GOpt(GPlus(GSeq(GSeq(GSeq(GString("."), GVar("ws")), GVar("exp7")), GUnquote(GString("dot")))))), GRule("exp8", GSeq(GVar("exp9"), GOpt(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("?"), GVar("ws")), GVar("exp")), GString(":")), GVar("ws")), GVar("exp8")), GUnquote(GString("ifelse"))))), GRule("exp9", GChoice(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp9")), GUnquote(GString("negate"))), GVar("exp10")), GRule("exp10", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("if"), GVar("ws")), GString("(")), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GVar("exp")), GChoice(GSeq(GSeq(GSeq(GString("else"), GVar("ws")), GVar("exp")), GUnquote(GString("ifelse"))), GUnquote(GString("if")))), GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GChoice(GSeq(GString("true"), GUnquote(GString("true"))), GChoice(GSeq(GString("false"), GUnquote(GString("false"))), GChoice(GSeq(GSeq(GVar("string"), GVar("ws")), GUnquote(GString("unescape"))), GChoice(GSeq(GSeq(GVar("int"), GVar("ws")), GUnquote(GString("s2i"))), GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exps")), GString("]")), GVar("ws")))))))), GRule("string", GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GVar("ws")), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GVar("escapedchar_")), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("backslash", GString("\\"), GRule("anychar", GRange(0, 65535), GRule("int", GUnquote(GPlus(GRange(48, 57))), GRule("exps", GSeq(GUnquote(GString("list")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))))), GRule("ws", GStar(GVar("s")), GRule("s", GChoice(GString(" "), GChoice(GString("\t"), GString("\n"))), GVar("exp")))))))))))))))))))))
}
