import tools/dsl/dsl_pretty;
import tools/dsl/dsl_util;
import tools/dsl/dsl_parse;

export {
	rewriteCosts(costs : string) -> DslCosts;

	// This reports any nodes with missing costs, for debugging
	missingDslCosts(actions : Set<string>, costs : DslCosts) -> void;
}

rewriteCosts(costs : string) -> DslCosts {
	costlang = defineGrammar("cost", <<
		costs = ws $"nil" (cost $"cons")*;
		cost = id "=>" ws int ";" ws $"cost_2";
		costs
	>>, ["ws", "int", "id"]);

	thecosts : List<DslAst> = getDslList(parseProgram("Costs", costlang, costs));
	costMap = foldList(thecosts, makeTree(), \acc, ast -> {
		node = getDslNode(ast);
		if (length(node.args) == 2) {
			name = getDslString(node.args[0]);
			cost = getDslInt(node.args[1]);
			setTree(acc, name, cost)
		} else acc;
	});

	DslCosts(costMap);
}

missingDslCosts(actions : Set<string>, costs : DslCosts) -> void {
	missing = differenceSets(actions,
		buildSet(getTreeKeys(costs.costs))
	);
	if (!isEmptySet(missing)) {
		println("Actions with missing costs: " + strGlue(set2array(missing), ", "))
	}
}
