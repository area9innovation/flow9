import tools/dsl/registry/dsl_populate;
import tools/dsl/registry/dsl_parser;
import tools/dsl/registry/dsl_lowering;
import text/serialize;
import qexp;

serializeDslLanguages() -> void {
	wrap = \tree -> serialize(tree2pairs(tree));
	setFileContent("preprocessor/dsl_serialized_languages.flow", 
		blueprint("
			import tools/dsl/dsl_language;
			import tools/dsl/preprocessor/dsl_lowering_args;

			export {
				dslGrammarPairs() -> [Pair<string, DslGrammar>];
				dslGrammarExtensionPairs() -> [Pair<string, Tree<string, GTerm>>];
				dslLoweringList() -> List<DslLoweringArgs>;
				dslLanguageRuntimePairs() -> [Pair<DslLanguage, Tree<string, DslAst>>];
			}

			dslGrammarsM : ref Maybe<[Pair<string, DslGrammar>]> = ref None();
			dslGrammarExtensionsM : ref Maybe<[Pair<string, Tree<string, GTerm>>]> = ref None();
			dslLoweringM : ref Maybe<List<DslLoweringArgs>> = ref None();
			dslRuntimeM : ref Maybe<[Pair<DslLanguage, Tree<string, DslAst>>]> = ref None();

			dslGrammarPairs() -> [Pair<string, DslGrammar>] {
				onlyOnce(dslGrammarsM, \\ -> {
					%grammars%
				})
			}

			dslGrammarExtensionPairs() -> [Pair<string, Tree<string, GTerm>>] {
				onlyOnce(dslGrammarExtensionsM, \\ -> {
					%extensions%
				})
			}

			dslLoweringList() -> List<DslLoweringArgs> {
				onlyOnce(dslLoweringM, \\ -> {
					%lowering%
				})
			}

			dslLanguageRuntimePairs() -> [Pair<DslLanguage, Tree<string, DslAst>>] {
				onlyOnce(dslRuntimeM, \\ -> {
					%runtime%
				})
			}
",
			[
				"grammars", serialize(tree2pairs(getDslGrammars())),
				"extensions", serialize(tree2pairs(getDslGrammarExtensions())),
				"lowering", serialize(^dslLowering),
				"runtime", serialize(tree2pairs(getAllDslLanguageRuntime())),
			]
		)
	);
	{}
}

main() {
	populateDsls();
	serializeDslLanguages();
	quit(0)
}
