// The program to compile
program = parse("lambda", <<
	a = 1 + 3;
	a
>>);

// Our compiler defined using pattern matching and blueprints
compile(<<
		ifelse(a, b, c) => "if (" $a(5) ") " $b(5) " else " $c(5);
		or(a, b) => $a(10) "||" $b(9);
		and(a, b) => $a(20) "&&" $b(19);

		equal(a, b) => $a(30) "==" $b(30);
		not_equal(a, b) => $a(30) "!=" $b(30);

		less(a, b) => $a(35) "<" $b(35);
		less_equal(a, b) => $a(35) "<=" $b(35);
		greater(a, b) => $a(35) ">" $b(35);
		greater_equal(a, b) => $a(35) ">=" $b(35);

		add(a, b) => $a(40) "+" $b(39);
		sub(a, b) => $a(40) "-" $b(39);
		mul(a, b)  => $a(50) "*" $b(49);
		div(a, b)  => $a(50) "/" $b(49);
		mod(a, b)  => $a(50) "%" $b(49);
		let(id, v, b) => $id(1) "=" $v(1) ";" $b(1);
		lambda(args, body) => "\\" $glue(args, ",") "->" $body(4);
		var(id) => $id(100);
		call(fn, args) => $fn(80) "(" $glue(args, ",") ")";
		brace(a) => "{" $glue(a, ";") "}";
		false() => "false";
		true() => "true";
		not(a) => "!" $a(90); // Check precedence
		negate(a) => "-" $a(90); // Check precedence
		string(a) => $a(100);
		double(a) => $a(100);
		int(a) => $a(100);
>>, program)
