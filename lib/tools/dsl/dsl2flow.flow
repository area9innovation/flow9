import tools/dsl/dsl_ast;
import dynamic;
import ds/array;

export {
	dsl2flow(d : DslAst) -> flow;
	flow2dsl(f : flow) -> DslAst;
}

dsl2flow(d : DslAst) -> flow {
	switch (d) {
		DslBool(value): flow(value);
		DslInt(value): flow(value);
		DslDouble(value): flow(value);
		DslString(value): flow(value);
		DslList(value): list2array(mapList(value, dsl2flow));
		DslNode(name, args, pos): {
			makeStructValue(name, map(args, dsl2flow), IllegalStruct());
		}
	}
}

flow2dsl(f : flow) -> DslAst {
	if (isArray(f)) {
		ar : [flow] = f;
		DslList(fold(ar, makeList(), \acc, e -> {
			Cons(flow2dsl(e), acc)
		}))
	} else if (isSameStructType(f, f)) {
		// A struct
		sname = f.structname;
		sargs = extractStructArguments(f);
		DslNode(sname, map(sargs, flow2dsl), 0)
	} else {
		DslString(toString(f));
	}
}
