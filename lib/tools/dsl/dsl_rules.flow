import tools/dsl/dsl_util;
import tools/dsl/dsl_parse;

export {
	// Parse rules where the right hand side is in a given language,
	// and the left hand side in another, with the rules separated by a given char:
	//  (<from> => <to> <sep>)*  => list<rule(from, to)>
	parseRules(from : DslGrammar, to : DslGrammar, rules : string, sep : string) -> DslRules;
}

parseRules(from : DslGrammar, to : DslGrammar, rules : string, sep : string) -> DslRules {
	fromMain = mainRule(from.term);
	toMain = mainRule(to.term);

	grammar = if (from == to) {
		replaceLastGringo(from.term, GVar("rules"))
	} else {
		replaceLastGringo(mergeGringos(from.term, to.term), GVar("rules"))
	};

	/*
	ruleGrammar0 = defineGrammar("rules", << 
		rules = ws $"nil" (rule $"cons")*;
		rule = from "=>" ws to ";" ws $"rule_2";
		rules
	>>, false);
	*/

	ruleGrammar = GRule("rules", gseq([GVar("ws"), GUnquote(GString("nil")), GStar(GSeq(GVar("rule"), GUnquote(GString("cons"))))]), 
		GRule("rule", gseq([GVar(fromMain), GString("=>"), GVar("ws"), GVar(toMain), GString(sep), GVar("ws"), GUnquote(GString("rule_2"))]), 
			grammar
		));

	// println(gterm2string(ruleGrammar));

	ruleDsl = DslGrammar(ruleGrammar);
	astRules = parseProgram("Rules", ruleDsl, rules);
	DslRules(astRules);
}