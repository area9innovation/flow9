import tools/dsl/dsl_parse;
import tools/dsl/languages/lambda;

export {
	addCommonDslRuntime(commons : [string], runtime : Tree<string, DslAst>) -> Tree<string, DslAst>;
}

addCommonDslRuntime(commons : [string], runtime : Tree<string, DslAst>) -> Tree<string, DslAst> {
	commonDefs = pairs2tree([
			Pair("listAt", <<
				\xs, i -> {
					if (i <= 0) head(xs)
					else listAt(tail(xs), i - 1)
				}
			>>),
			Pair("length", <<
				\xs -> if (xs == nil()) 0 else 1 + length(tail(xs))
			>>),
			Pair("fold", <<
				\c, acc, fn -> {
					if (c == nil()) acc else fold(tail(c), fn(acc, head(c)), fn)
				}
			>>),
			Pair("iter", <<
				\li, fn -> {
					if (li == nil()) {} else {
						fn(head(li));
						iter(tail(li), fn)
					}
				}
			>>),
			Pair("map", <<
				\c, fn -> {
					if (c == nil()) c else cons(fn(head(c)), map(tail(c), fn))
				}
			>>),
			Pair("range", <<
				\from, to -> {
					doRange = \acc, from, to -> {
						if (from <= to) {
							cons(from, doRange(acc, from + 1, to))
						} else acc
					};
					doRange(nil(), from, to)
				}
			>>),
			Pair("reverse", <<
				\li -> {
					doReverse = \acc, l -> {
						if (l == nil()) acc
						else doReverse(cons(head(l), acc), tail(l))
					};
					doReverse(nil(), li)
				}
			>>),
		]);

	lambda = defineLambda(); 

	list = if (commons == []) getTreeKeys(commonDefs) else commons;
	fold(list, runtime, \acc, common -> {
		mdef = lookupTree(commonDefs, common);
		mdef ?? {
			parsed = parseProgram(common, lambda, mdef);
			setTree(acc, common, parsed)
		} : {
			println("Could not find common function called '" + common + "'");
			acc;
		}
	})
}
