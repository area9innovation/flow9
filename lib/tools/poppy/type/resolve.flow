import tools/poppy/type/env;
import tools/poppy/type/pretty;

export {

	resolvePTypes(env : PTypeEnv, seen : ref Set<int>, types : [PType]) -> [PType];

	// If this type is uniquely resolved, return the resolved type. None if not clear
	resolvePType(env : PTypeEnv, seen : ref Set<int>, type : PType) -> Maybe<PType>;
}

resolvePTypes(env : PTypeEnv, seen : ref Set<int>, types : [PType]) -> [PType] {
	rtypes = filtermap(types, \t -> resolvePType(env, seen, t));
	if (length(rtypes) == length(types)) {
		sortUnique(rtypes);
	} else {
		[];
	}
}

resolvePType(env : PTypeEnv, seen : ref Set<int>, t : PType) -> Maybe<PType> {
	todo = \ -> {
		println("TODO: Resolve " + toString(t));
		None();
	}
	switch (t) {
		PTypeName(name, typars): {
			rtypars = filtermap(typars, \tt -> resolvePType(env, seen, tt));
			if (length(rtypars) == length(typars)) {
				Some(PTypeName(name, rtypars));
			} else {
				None();
			}
		}
		PTypeEClass(eclass): {
			root = findUnionMapRoot(env.unionFindMap, eclass);
			if (containsSet(^seen, root)) {
				None();
			} else {
				seen := insertSet(^seen, root);
				types = getUnionMapValue(env.unionFindMap, root);
				rtypes = filtermap(types, \tt -> resolvePType(env, seen, tt));
				if (length(rtypes) == length(types)) {
					// We keep it as an eclass to preserve names
					Some(PTypeEClass(root));
				} else {
					None();
				}
			}
		}
		PTypeWord(inputs, outputs): {
			rinputs = filtermap(inputs, \tt -> resolvePType(env, seen, tt));
			routputs = filtermap(outputs, \tt -> resolvePType(env, seen, tt));
			if (length(rinputs) == length(inputs) && length(routputs) == length(outputs)) {
				Some(PTypeWord(rinputs, routputs));
			} else {
				None();
			}
		}
		PTypeOverload(overloads): todo();
		PTypeEval(): Some(t);
		PTypeCompose(left, right): todo();
	}
}
