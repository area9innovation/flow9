import tools/poppy/type/parse;
import tools/poppy/type/elaborate;

compose(env : PTypeEnv, f : string, g : string) -> void {
	left = parsePType(f);
	right = parsePType(g);
	c = composeIfFeasible(env, left, right);
	res = switch (c) {
		None(): "IMPOSSIBLE";
		Some(fn): prettyPType(env, fn);
	}
	println(prettyPType(env, left) + " ◦ " + prettyPType(env, right) + " = " + res);
}

elaborate(env : PTypeEnv, f: string) -> void {
	t = parsePType(f);
	e = elaboratePType(env, makeSet(), ref makeSet(), t);
	println(prettyPType(env, e));
}

main() {
	env = makePTypeEnv();

	if (false) {
		eclass1 = parsePType("ε1");
		eval = parsePType("eval");
		foo = parsePType("Foo");
		fact = parsePType("(int -> int)");

		println(prettyPType(env, eclass1));
		println(prettyPType(env, eval));
		println(prettyPType(env, foo));
		println(prettyPType(env, fact));
	}

	if (false) {
		// compose(env, "(int -> int (ε4 -> int))", "eval");
		//	compose(env, "ε1", "(bool (int -> int) -> (int -> int))");
	}

	if (true) {
		// elaborate(env, "ε1 = ( -> int bool (ε2 -> int)) = ( -> int ε3 (int -> int))")
		// elaborate(env, "(bool -> bool int int) ◦ (bool ε1 ε1 -> ε1) ◦ eval");
//		elaborate(env, "(bool -> bool int int) ◦ (bool ε1 ε1 -> ε1)");
		// elaborate(env, "( -> bool ( -> Foo) ( -> Bar)) ◦ (bool ε2 ε2 -> ε2) ◦ eval");
	 	elaborate(env, "( -> bool ε1 ◦ ε1 ◦ (ε2 ε3 -> Sequence<ε2, ε3>) ( -> Word)) ◦ (bool ε4 ε4 -> ε4) ◦ eval");
		// elaborate(env, "Sequence<ε2, ε3>");
		// elaborate(env, " ε1 ◦ (ε2 -> Sequence<ε2>)");
	//					( -> bool ε1 ◦ ε1 ◦ (ε2 ε3 -> Sequence<ε2, ε3 >)) ◦ (bool ( -> Word) -> ( -> Word))
//		elaborate(env, "(bool -> bool) ◦ ( -> int)");
		// (bool -> bool int int) ◦ (bool ε1 ε1 -> ε1)
	}

	quit(0);
}
