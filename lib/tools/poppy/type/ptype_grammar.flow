import tools/mango/mango_types;

export {
	ptypeGrammar() -> Term;
}

ptypeGrammar() -> Term {
	Rule("ws", Star(Variable("s")), Rule("word", Sequence(PushMatch(Sequence(Negate(Choice(String(";"), Choice(String("("), Choice(String(")"), Choice(String("["), Choice(String("]"), Choice(String("\""), Choice(Range("0", "9"), Choice(String("->"), Choice(String("//"), Choice(String("/*"), Choice(String("<"), Choice(String(">"), String(",")))))))))))))), Sequence(Range("!", "0xffff"), Star(Sequence(Negate(Choice(String(";"), Choice(String("("), Choice(String(")"), Choice(String("["), Choice(String("]"), Choice(String("\""), Choice(String("<"), Choice(String(">"), String(",")))))))))), Range("!", "0xffff")))))), Variable("ws")), Rule("uid", Sequence(PushMatch(Sequence(Range("A", "Z"), Star(Variable("alnum")))), Variable("ws")), Rule("string", Sequence(PushMatch(Sequence(String("\""), Sequence(Star(Variable("onechar")), String("\"")))), Variable("ws")), Rule("signed_int", Sequence(Optional(String("-")), Variable("int")), Rule("s", Plus(Variable("cs")), Rule("ptype", Sequence(Variable("ptype1"), Star(Sequence(String("◦"), Sequence(Variable("ws"), Sequence(Variable("ptype1"), Construct("PTypeCompose", "2")))))), Rule("ptype1", Choice(Sequence(String("ε"), Sequence(PushMatch(Variable("int")), Sequence(Variable("ws"), Sequence(StackOp("s2i"), Construct("PTypeEClass", "1"))))), Choice(Sequence(String("overload"), Sequence(Variable("ws"), Sequence(String("("), Sequence(Variable("ws"), Sequence(StackOp("nil"), Sequence(Optional(Sequence(Variable("ptype"), Sequence(StackOp("cons"), Sequence(Star(Sequence(String(","), Sequence(Variable("ws"), Sequence(Variable("ptype"), StackOp("cons"))))), Optional(Sequence(String(","), Variable("ws"))))))), Sequence(StackOp("list2array"), Sequence(String(")"), Sequence(Variable("ws"), Construct("PTypeOverload", "1")))))))))), Choice(Sequence(String("eval"), Sequence(Variable("ws"), Construct("PTypeEval", "0"))), Choice(Sequence(Variable("word"), Sequence(Choice(Sequence(String("<"), Sequence(Variable("ws"), Sequence(StackOp("nil"), Sequence(Optional(Sequence(Variable("ptype"), Sequence(StackOp("cons"), Sequence(Star(Sequence(String(","), Sequence(Variable("ws"), Sequence(Variable("ptype"), StackOp("cons"))))), Optional(Sequence(String(","), Variable("ws"))))))), Sequence(StackOp("list2array"), Sequence(String(">"), Variable("ws"))))))), Sequence(StackOp("nil"), StackOp("list2array"))), Construct("PTypeName", "2"))), Sequence(String("("), Sequence(Variable("ws"), Sequence(StackOp("nil"), Sequence(Star(Sequence(Variable("ptype"), StackOp("cons"))), Sequence(StackOp("list2array"), Sequence(String("->"), Sequence(Variable("ws"), Sequence(StackOp("nil"), Sequence(Star(Sequence(Variable("ptype"), StackOp("cons"))), Sequence(StackOp("list2array"), Sequence(String(")"), Sequence(Variable("ws"), Construct("PTypeWord", "2"))))))))))))))))), Rule("onechar", Choice(Sequence(String("\\"), Choice(Sequence(String("u"), Sequence(Variable("hexdigit"), Sequence(Variable("hexdigit"), Sequence(Variable("hexdigit"), Variable("hexdigit"))))), Choice(Sequence(String("x"), Sequence(Variable("hexdigit"), Variable("hexdigit"))), Choice(String("\\"), Choice(String("\""), Choice(String("n"), Choice(String("t"), String("r")))))))), Sequence(Negate(String("\"")), Sequence(Negate(String("\\")), Variable("anychar")))), Rule("kwsep", Sequence(Negate(Variable("alnum")), Variable("ws")), Rule("int", Plus(Range("0", "9")), Rule("id", Sequence(PushMatch(Variable("bid")), Variable("ws")), Rule("hexdigit", Choice(Range("0", "9"), Choice(Range("a", "f"), Range("A", "F"))), Rule("exponent", Sequence(Choice(String("E"), String("e")), Sequence(Optional(Choice(String("+"), String("-"))), Variable("int"))), Rule("double", Choice(Sequence(Variable("signed_int"), Sequence(String("."), Sequence(Optional(Variable("int")), Optional(Variable("exponent"))))), Choice(Sequence(String("."), Sequence(Variable("int"), Optional(Variable("exponent")))), Sequence(Variable("signed_int"), Variable("exponent")))), Rule("cs", Choice(String(" "), Choice(String("\\t"), Choice(String("\\n"), Choice(Sequence(String("//"), Sequence(Star(Sequence(Negate(String("\\n")), Variable("anychar"))), String("\\n"))), Choice(Sequence(String("/*"), Sequence(Star(Sequence(Negate(String("*/")), Variable("anychar"))), String("*/"))), String("\\r")))))), Rule("bid", Sequence(Choice(Range("a", "z"), String("_")), Star(Variable("alnum"))), Rule("anychar", Range("0x0000", "0xffff"), Rule("alnum", Choice(Range("a", "z"), Choice(Range("A", "Z"), Choice(String("_"), Range("0", "9")))), Sequence(Variable("ws"), Variable("ptype")))))))))))))))))))));
}
