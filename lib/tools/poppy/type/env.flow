import tools/poppy/type/core;
import ds/union_find_map;
import tools/runcore/runcoretypes;

export {
	makePTypeEnv() -> PTypeEnv;

	PTypeEnv(
		// Used to track the types of eclasses
		unionFindMap : UnionFindMap<[PType]>,
		// Suggested names for eclasses
		eclassNames : ref Tree<int, string>,
		// What is the type of each word (function)?
		words : ref Tree<string, PType>,
		// The unions we have uncovered so far
		unions : ref Tree<string, [PType]>,
		// The structs names we have uncovered so far
		structs : ref Set<string>,
		// For generating unique names
		unique : ref int,
		// For debugging - how much have we indented so far
		indent : ref string,
		// How verbose should we be in debugging?
		verbose : int,
	);
}

makePTypeEnv() -> PTypeEnv {
	coreTypes = getRunCoreTypes();
	pcore = mapTree(coreTypes, coreType2PType);
	env = PTypeEnv(
		makeUnionFindMap([], \l : [PType], r : [PType] -> {
			sortUnique(concat(l, r))
		}),
		ref makeTree(),
		ref pcore,
		ref makeTree(),
		ref makeSet(),
		ref 0,
		ref "",
		s2i(getUrlParameterDef("verbose", "0")),
	);
	env;
}
