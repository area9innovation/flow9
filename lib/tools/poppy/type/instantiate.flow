import tools/poppy/type/types;
import ds/tree;
import string;

export {
	// If there is "?" in the names, we turn them into eclasses
	instantiatePolymorphism(unique : ref int, typars : ref Tree<string, PType>, type : PType) -> PType;
}

instantiatePolymorphism(unique : ref int, typars : ref Tree<string, PType>, type : PType) -> PType {
	rec = \tt -> instantiatePolymorphism(unique, typars, tt);
	switch (type) {
		PTypeName(name, tps): {
			if (name != "" && trim2(name, "?") == "") {
				// Turn ? ?? and friends to an eclass
				mexisting = lookupTree(^typars, name);
				mexisting ?? {
					mexisting
				} : {
					// New
					eclass = ^(unique);
					unique := eclass + 1;
					t = PTypeEClass(eclass);
					typars := setTree(^typars, name, t);
					t;
				}
			} else {
				PTypeName(name, map(tps, rec));
			}
		}
		PTypeEClass(eclass): type;
		PTypeWord(inputs, outputs): PTypeWord(map(inputs, rec), map(outputs, rec));
		PTypeOverload(overloads): PTypeOverload(map(overloads, rec));
		PTypeEval(): type;
		PTypeCompose(left, right): PTypeCompose(rec(left), rec(right));
	}
}

