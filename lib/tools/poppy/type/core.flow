import tools/poppy/type/types;
import tools/runcore/types_types;
import runtime;

export {
	perror(msg : string) -> PType;
	coreType2PType(coreType: CoreType) -> PType;
}

perror(msg : string) -> PType {
	println("ERROR: " + msg);
	PTypeName("ERROR", [])
}

coreType2PType(coreType: CoreType) -> PType {
	todo = \ -> perror("TODO: Implement " + toString(coreType));
	switch (coreType) {
		CoreArrayType(type): PTypeName("array", [coreType2PType(type)]);
		CoreFnType(type1, type2): {
			ptypes1 = unpackTupleType(type1);
			ptypes2 = unpackTupleType(type2);
			PTypeWord(map(ptypes1, coreType2PType), map(ptypes2, coreType2PType));
		}
		CoreIdType(word, type): todo();
		CoreOverloadType(types): PTypeOverload(map(types, coreType2PType));
		CorePolyType(string1): PTypeName(string1, []);
		CoreTupleType(types): todo();
		CoreTypename(word, typars): PTypeName(word, map(typars, coreType2PType));
	}
}

unpackTupleType(core : CoreType) -> [CoreType] {
	switch (core) {
		CoreArrayType(type): [core];
		CoreFnType(type1, type2): [core];
		CoreOverloadType(types): [core];
		CoreIdType(word, type): [type];
		CorePolyType(string1): [core];
		CoreTupleType(types): types;
		CoreTypename(word, typars): [core];
	}
}
