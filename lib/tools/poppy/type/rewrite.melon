// Composition of words
(i1 -> []) ◦ (i2 -> [o2]) => (concat(i2, i1) -> [o2]).
(i1 -> o1) ◦ ([] -> o2) => (i1 -> concat(o1, o2)).
(i1 -> [b1 | o1]) ◦ ([b2 | i2] → o2) => unify(b1, b2), (i1 -> o1) ◦ (i2 -> o2).

// unify
A<[]> = A<[]> => . // Nothing
A<[a1, args1]> = B<[b1, args2]>  =>  a1 = b1, A<[args1]> = B<[args2]>.

ε1 = a<args> => unify(ε1, a<args>).

// Eval with stack polymorphism: 
// ( -> a) ◦ eval = a
// ( -> a b) ◦ eval = a b
// (a (a -> b)) ◦ eval = b
// (a b (a b -> c)) ◦ eval = c
