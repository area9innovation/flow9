export {
	PType ::= PTypeName, PTypeEClass, PTypeWord, PTypeOverload, PTypeEval, PTypeCompose;
		// This is really ( -> name<typars>) implicitly
		PTypeName(name : string, typars : [PType]);
		// For type variables to be determined - also used for polymorphism
		PTypeEClass(eclass : int);
		// This is the type of a word that takes (inputs -> outputs)
		PTypeWord(inputs : [PType], outputs : [PType]);
		// This is an overload of words
		PTypeOverload(overloads : [PType]);

		// The type of `eval` is this construct, which has stack polymorphism: 
		// ( -> a) ◦ eval = a
		// ( -> a b) ◦ eval = a b
		// (a (a -> b)) ◦ eval = b
		// (a b (a b -> c)) ◦ eval = c
		// ...
		PTypeEval();

		// Composing two types: This is function composition
		PTypeCompose(left : PType, right : PType);
}
