poppy = poppy (poppy Sequence/2)*
	|> switch_grammar
	| command kwsep 
	| "define" kwsep word poppy ";" ws Define/2
	| "->" ws word Set/1
	| uid "/" ws $int ws @s2i ConstructArity/2
	| "[" ws poppy "]" ws MakeList/1
	| value
	| word Word/1;

command = 
	"nil" Nil/0 | "cons" Cons/0
	| "swap" Swap/0 | "drop" Drop/0 | "dup" Dup/0
	| "eval" Eval/0 | "print" Print/0 | "dump" Dump/0
	| "ifte" Ifte/0 | "while" While/0 | "nop" Nop/0
	;

value = 
	"true" kwsep @true Bool/1 
	| "false" kwsep @false Bool/1
	| $double ws @s2d Double/1 
	| $int ws @s2i Int/1 
	| string @unescape String/1
	;

word = 
	$(
		!(';' | '(' | ')' | '[' | ']' | '"' | '0'-'9' | "->" | "//" | "/*") '!'-'0xffff' 
		(!(';' | '(' | ')' | '[' | ']' | '"') '!'-'0xffff')*
	) ws
	;

@include <lexical>
@include <switch_grammar>

ws poppy

@include<highlight>
@highlight<id "variable.parameter">
@highlight<uid "entity.name.function">
@highlight<int "constant.numeric">
@highlight<string "string.quoted.double">
@highlight<stringq "string.quoted.single">
@highlight<char "constant.character">
@highlight<ws "comment.block">
@bracket<"(" ")">
@linecomment<"//">
@blockcomment<"/*" "*/">

// List ops: TODO: uncons map fold index
// Stack ops: TODO: dig2 dig3
