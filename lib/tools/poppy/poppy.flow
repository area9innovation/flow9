import tools/mango/mango_interpreter;
import tools/poppy/poppy_grammar;
import tools/poppy/compiler/compile;
import tools/poppy/poppy_interpreter;
import tools/poppy/type/infer_type;
import net/url_parameter;
import fs/filesystem;
import sys/system;

main() {
	filename = getUrlParameterDef("file", "poppy/tests/loop.poppy");
	code = getUrlParameter("code");
	file = if (code != "") code 
		else getFileContent(filename);
	if (file == "") {
		println("poppy file=filename.poppy");
		quit(-1);
	} else {
		program : Poppy = mangoParse(poppyGrammar(), file, PoppyNil(), 0);
		// println("Program:");
		// println(prettyPoppy(program));
		// println(program);
		if (false) {
			result = evalPoppy(makePoppyEnv(), program);
			evalPoppy(result, PoppyDump());
			println("\nDone");
		}
		if (false) {
			tenv = makePTypeEnv();
			findPoppyDefines(tenv, program);
			type = poppyType(tenv, program);
			etype = elaboratePType(tenv, makeSet(), ref makeSet(), type);
			println("Type: " + prettyPType(tenv, etype));
			println("      " + prettyPType(tenv, type));
			debugPTypeEnv(tenv);
			printPTypeEnv(tenv);
			// sprintln("Type: " + prettyPType(tenv, type));
		}
		if (isUrlParameterTrue("compile")) {
			flowfile = changeFileExt(filename, ".flow");
			flowcode = compilePoppy2file(getRunCore(), program);
			setFileContent(flowfile, flowcode);
			startProcess("flowcpp", [flowfile], ".", "", \ec, so, se -> {
				println("Exit code: " + i2s(ec));
				if (so != "") println(so);
				if (se != "") println(se);
				quit(0);
			});
		} else {
			quit(0);
		}
	}
}
