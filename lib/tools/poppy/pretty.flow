import tools/poppy/poppy_types;
import math/math;
import text/blueprint;

export {
	prettyPoppy(p : Poppy) -> string;
}

prettyPoppy(p : Poppy) -> string {
	switch (p) {
		PoppyBool(bool1): b2s(bool1);
		PoppyDouble(double1): d2s(double1);
		PoppyInt(int1): i2s(int1);
		PoppyString(string1): toString(string1);
		PoppySequence(a, b): prettyPoppy(a) + " " + prettyPoppy(b);
		PoppyConstructor(id, args): id + "(" + superglue(args, prettyPoppy, ", ") + ")";
		PoppyNil(): "nil";
		PoppyCons(): "cons";
		PoppyDrop(): "drop";
		PoppyDump(): "dump";
		PoppyDup(): "dup";
		PoppyEval(): "eval";
		PoppyNop(): "nop";
		PoppyPrint(): "print";
		PoppySet(word): "->" + word;
		PoppySwap(): "swap";
		PoppyIfte(): "ifte";
		PoppyConstructArity(uid, int1): uid + "/" + i2s(int1);
		PoppyDefine(id, poppy): "define " + id + " " + prettyPoppy(poppy) + ";\n";
		PoppyWord(id): id;
		PoppyMakeList(poppy): "[" + prettyPoppy(poppy) + "]"
		PoppyWhile(): "while";
	}
}
