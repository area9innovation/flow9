import tools/mango/mango_types;

export {
	poppyGrammar() -> Term;
}

poppyGrammar() -> Term {
	Rule("ws", Star(Variable("s")), Rule("word", Sequence(PushMatch(Sequence(Negate(Choice(String(";"), Choice(String("("), Choice(String(")"), Choice(String("["), Choice(String("]"), Choice(String("\""), Choice(Range("0", "9"), Choice(String("->"), Choice(String("//"), String("/*"))))))))))), Sequence(Range("!", "0xffff"), Star(Sequence(Negate(Choice(String(";"), Choice(String("("), Choice(String(")"), Choice(String("["), Choice(String("]"), String("\""))))))), Range("!", "0xffff")))))), Variable("ws")), Rule("value", Choice(Sequence(String("true"), Sequence(Variable("kwsep"), Sequence(StackOp("true"), Construct("PoppyBool", "1")))), Choice(Sequence(String("false"), Sequence(Variable("kwsep"), Sequence(StackOp("false"), Construct("PoppyBool", "1")))), Choice(Sequence(PushMatch(Variable("double")), Sequence(Variable("ws"), Sequence(StackOp("s2d"), Construct("PoppyDouble", "1")))), Choice(Sequence(PushMatch(Variable("int")), Sequence(Variable("ws"), Sequence(StackOp("s2i"), Construct("PoppyInt", "1")))), Sequence(Variable("string"), Sequence(StackOp("unescape"), Construct("PoppyString", "1"))))))), Rule("uid", Sequence(PushMatch(Sequence(Range("A", "Z"), Star(Variable("alnum")))), Variable("ws")), Rule("switch_grammar", Sequence(String("@"), Sequence(PushMatch(Plus(Variable("alnum"))), StackOp("switch"))), Rule("string", Sequence(PushMatch(Sequence(String("\""), Sequence(Star(Variable("onechar")), String("\"")))), Variable("ws")), Rule("signed_int", Sequence(Optional(String("-")), Variable("int")), Rule("s", Plus(Variable("cs")), Rule("poppy", Sequence(Variable("poppy1"), Star(Sequence(Variable("poppy1"), Construct("PoppySequence", "2")))), Rule("poppy1", Choice(Variable("switch_grammar"), Choice(Sequence(Variable("command"), Variable("kwsep")), Choice(Sequence(String("define"), Sequence(Variable("kwsep"), Sequence(Variable("word"), Sequence(Variable("poppy"), Sequence(String(";"), Sequence(Variable("ws"), Construct("PoppyDefine", "2"))))))), Choice(Sequence(String("->"), Sequence(Variable("ws"), Sequence(Variable("word"), Construct("PoppySet", "1")))), Choice(Sequence(Variable("uid"), Sequence(String("/"), Sequence(Variable("ws"), Sequence(PushMatch(Variable("int")), Sequence(Variable("ws"), Sequence(StackOp("s2i"), Construct("PoppyConstructArity", "2"))))))), Choice(Sequence(String("["), Sequence(Variable("ws"), Sequence(Variable("poppy"), Sequence(String("]"), Sequence(Variable("ws"), Construct("PoppyMakeList", "1")))))), Choice(Variable("value"), Sequence(Variable("word"), Construct("PoppyWord", "1"))))))))), Rule("onechar", Choice(Sequence(String("\\"), Choice(Sequence(String("u"), Sequence(Variable("hexdigit"), Sequence(Variable("hexdigit"), Sequence(Variable("hexdigit"), Variable("hexdigit"))))), Choice(Sequence(String("x"), Sequence(Variable("hexdigit"), Variable("hexdigit"))), Choice(String("\\"), Choice(String("\""), Choice(String("n"), Choice(String("t"), String("r")))))))), Sequence(Negate(String("\"")), Sequence(Negate(String("\\")), Variable("anychar")))), Rule("kwsep", Sequence(Negate(Variable("alnum")), Variable("ws")), Rule("int", Plus(Range("0", "9")), Rule("id", Sequence(PushMatch(Variable("bid")), Variable("ws")), Rule("hexdigit", Choice(Range("0", "9"), Choice(Range("a", "f"), Range("A", "F"))), Rule("exponent", Sequence(Choice(String("E"), String("e")), Sequence(Optional(Choice(String("+"), String("-"))), Variable("int"))), Rule("double", Choice(Sequence(Variable("signed_int"), Sequence(String("."), Sequence(Optional(Variable("int")), Optional(Variable("exponent"))))), Choice(Sequence(String("."), Sequence(Variable("int"), Optional(Variable("exponent")))), Sequence(Variable("signed_int"), Variable("exponent")))), Rule("cs", Choice(String(" "), Choice(String("\\t"), Choice(String("\\n"), Choice(Sequence(String("//"), Sequence(Star(Sequence(Negate(String("\\n")), Variable("anychar"))), String("\\n"))), Choice(Sequence(String("/*"), Sequence(Star(Sequence(Negate(String("*/")), Variable("anychar"))), String("*/"))), String("\\r")))))), Rule("command", Choice(Sequence(String("nil"), Construct("PoppyNil", "0")), Choice(Sequence(String("cons"), Construct("PoppyCons", "0")), Choice(Sequence(String("swap"), Construct("PoppySwap", "0")), Choice(Sequence(String("drop"), Construct("PoppyDrop", "0")), Choice(Sequence(String("dup"), Construct("PoppyDup", "0")), Choice(Sequence(String("eval"), Construct("PoppyEval", "0")), Choice(Sequence(String("print"), Construct("PoppyPrint", "0")), Choice(Sequence(String("dump"), Construct("PoppyDump", "0")), Choice(Sequence(String("ifte"), Construct("PoppyIfte", "0")), Choice(Sequence(String("while"), Construct("PoppyWhile", "0")), Sequence(String("nop"), Construct("PoppyNop", "0")))))))))))), Rule("bid", Sequence(Choice(Range("a", "z"), String("_")), Star(Variable("alnum"))), Rule("anychar", Range("0x0000", "0xffff"), Rule("alnum", Choice(Range("a", "z"), Choice(Range("A", "Z"), Choice(String("_"), Range("0", "9")))), Sequence(Variable("ws"), Variable("poppy"))))))))))))))))))))))));
}
