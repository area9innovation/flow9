export {
	// Helper that uses "x < y" and "x == y" to make a suitable comparison function for mergeSort
	genericCompare(x : ?, y : ?) -> int;
	genericCompareDesc(x : ?, y : ?) -> int;

	// Helper that uses comparison on the product of the elements for mergeSort
	genericCompareKey(keyFn : (?) -> ??) -> (?, ?) -> int;
	genericCompareKeyDesc(keyFn : (?) -> ??) -> (?, ?) -> int;
}

native genericCompare : (x : ?, y : ?) -> int = Native.genericCompare;
genericCompare(x, y) if (x < y) -1 else if (x == y) 0 else 1;
genericCompareDesc(x, y) genericCompare(y, x);
genericCompareKey(keyFn) { \x, y -> genericCompare(keyFn(x), keyFn(y)) }
genericCompareKeyDesc(keyFn) { \x, y -> genericCompareDesc(keyFn(x), keyFn(y)) }

