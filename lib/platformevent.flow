export {
	PlatformEvent ::= ApplicationIdle, ApplicationSuspended, ApplicationResumed, NetworkOnline, NetworkOffline, FontsReady, LowMemory, DeviceBackButton;

		ApplicationIdle : (); // no activity for more than 1 min
		ApplicationSuspended : ();
		ApplicationResumed : ();
		NetworkOnline : ();
		NetworkOffline : ();
		FontsReady : ();
		LowMemory : ();
		DeviceBackButton : ();

	// Here listener should return true when it wants to cancel default action and pretends to handle situation itself
	// Only DeviceBackButton() on Android makes sence now
	addPlatformEventCancellingListener(event : PlatformEvent, cb : () -> bool) -> ( () -> void );
	addPlatformEventListener(event : PlatformEvent, cb : () -> void) -> ( () -> void );

	NetworkState ::= NetworkOnline, NetworkOffline;

	getNetworkState : () -> NetworkState;
	globalNetworkState : Behaviour<NetworkState>;

	// This works on mobiles when some file type (PDF for example) is associated with the flow app
	// The app could upload the file to the server for instance
	native addCustomFileTypeHandler : io (cb : (string) -> void) -> ( () -> void ) = Native.addCustomFileTypeHandler;
}

import transforms;


// Listen to platform events.
// event values : "suspend" (App suspened), "resume" (App resumed), "online" (network online), "offline" (netwoek offline)
// Returns disposer
native addPlatformEventListenerNative : (event : string, cb : () -> bool) -> ( () -> void ) = Native.addPlatformEventListener;

addPlatformEventCancellingListener(event : PlatformEvent, cb : () -> bool) {
	e = switch(event) {
		ApplicationSuspended(): "suspend";
		ApplicationIdle(): "idle";
		ApplicationResumed(): "resume";
		NetworkOnline(): "online";
		NetworkOffline(): "offline";
		FontsReady(): "fontsready";
		LowMemory(): "lowmemory";
		DeviceBackButton() : "devicebackbutton";
	};

	addPlatformEventListenerNative(e, cb)
}

addPlatformEventListener(event : PlatformEvent, cb : () -> void)
	addPlatformEventCancellingListener(event, \ -> { cb(); false });

_globalNetworkState : DynamicBehaviour<NetworkState> = make(NetworkOnline());
globalNetworkState = select(_globalNetworkState, idfn);

NetworkOnlineListenerDisposer = addPlatformEventListener(NetworkOnline(), \ -> { next(_globalNetworkState, NetworkOnline()); });
NetworkOfflineListenerDisposer = addPlatformEventListener(NetworkOffline(), \ -> { next(_globalNetworkState, NetworkOffline()); });

getNetworkState() {
	getValue(globalNetworkState);
}

// Default implementation for other targets
addCustomFileTypeHandler(cb : (path : string) -> void) -> ( () -> void ) {
	nop
}
