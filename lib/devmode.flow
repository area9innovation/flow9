import runtime;
import net/url_parameter;
import formats/json/json;

export {
	setDevModeCheckFn(checkFn : () -> bool) -> void;
	isDevMode() -> bool;

	// Print something to the console if "devtrace" parameter is true.
	// WARNING: can be used when you already have the value in memory. 
	// But if you need to build it, use lazy version below!
	devtrace : (?) -> void;
	dtrace(str : ?, prefixes : [string]) -> void;
	pdtrace(prefixes : [string], annotation : string) -> (?) -> ?;

	// The same as above but build the value only if "devtrace" parameter is true
	devtraceLazy(fn : () -> ?) -> void;
	dtraceLazy(fn : () -> ?, prefixes : [string]) -> void;
}

devModeCheckFn : ref () -> bool = ref \ -> isUrlParameterTrue("dev");

setDevModeCheckFn(checkFn : () -> bool) -> void {
	devModeCheckFn := checkFn
}

isDevMode() -> bool {
	^devModeCheckFn()
}

devtrace(str : ?) -> void {
	if (isUrlParameterTrue("devtrace")) println(str)
}

dtrace(str : ?, prefixes : [string]) -> void {
	if (prefixes != [] && contains(prefixes, getUrlParameter("devtrace"))) {
		println("[" + strGlue(prefixes, "][") + "] " + toString(str))
	} else {
		devtrace(str)
	}
}

pdtrace(prefixes : [string], annotation : string) -> (?) -> ? {
	devtraceParameter = getUrlParameter("devtrace");
	if (prefixes != [] && contains(prefixes, devtraceParameter)) {
		pprint("[" + strGlue(prefixes, "][") + "] " + annotation)
	} else if (devtraceParameter != "") {
		pprint(annotation)
	} else {
		idfn
	}
}

devtraceLazy(fn : () -> ?) -> void {
	if (isUrlParameterTrue("devtrace")) println(fn())
}

dtraceLazy(fn : () -> ?, prefixes : [string]) -> void {
	if (prefixes != [] && contains(prefixes, getUrlParameter("devtrace"))) {
		println("[" + strGlue(prefixes, "][") + "] " + toString(fn()))
	} else {
		devtraceLazy(fn)
	}
}
