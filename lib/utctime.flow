import runtime;
import string;
import math;


export {
	native utc2local : (double) -> double = Native.utc2local;
	native local2utc : (double) -> double = Native.local2utc;

	// Converts string local time representation to time in milliseconds since epoch 1970 in UTC
	// Will fail on incorrect format. Correct one example: "2012-10-01 18:05:40"
	// String is treated as UTC (meaning that string2timeUtc("1970-01-01 00:00:00") returns +-1 second)
	string2timeUtc : (string) -> double;
	// Returns a string representation for the local time (time is given in milliseconds since epoch 1970 in UTC)
	time2stringUtc : (double) -> string;
	
	localTzOffset() -> double;
}

localTzOffset() {
	t = timestamp();
	utc2local(t) - t
}

string2timeUtc(s) {
	utc2local(string2time(s));
}

time2stringUtc(t) {
	time2string(local2utc(t));
}


tzOffset = {
	// Find the epoch in the local timezone, effectively finding the timezone.
	// So in +1TZ, "base" will be -1h expressed in milliseconds. To get timezone from this number, you need to negate it.
	// Notice that 1970-01-01 is always "WINTER" time since it's January.
	base = string2time("1970-01-01 00:00:00"); 
	msInHour = 3600.0 * 1000.0;
	
	// We need to account for DST here.
	// Let's look at midnight of current day
	// in relation to base TZ offset
	stampParts = strSplit(time2string(timestamp()), " ");

	// Find the current start of day in the local timezone, and subtract our timezone base to get the UTC time
	now = string2time(stampParts[0] + " " +  "00:00:00") - base;

	// If it's not zero, then we're in DST and need to adjust by one hour
	rez = if (drem(now / msInHour, 24.0) != 0.0) {
		-base + msInHour
	} else {
		-base
	}
	rez;
}

utc2local(stamp) {
	stamp + tzOffset
}

local2utc(utc) {
	utc - tzOffset
}