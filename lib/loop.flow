import runtime;
import ds/tuples;
import ds/array;

export {
	loop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> void) -> void;
	while(condition : () -> bool, action : () -> void) -> void;
	doWhile(action : () -> void, condition : () -> bool) -> void;
	collectorLoop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> ??) -> [??];

	foldWhile(xs : [?], init : ??, fn : (??, ?) -> Maybe<??>) -> ??;
	foldWhile2(xs : [?], init : ??, fn : (??, ?) -> Pair<??, bool>) -> ??;
	foldiWhile(xs : [?], init : ??, fn : (int, ??, ?) -> Maybe<??>) -> ??;
	updateWhile(init : ??, fn : (??) -> Maybe<??>) -> ??;
	updateWhile2(init : ??, fn : (??) -> Pair<??, bool>) -> ??;

	//the same as map but breaks when got false as .first field in result of a callback. returns previous successfull result
	mapUntil : ([?], (?) -> Pair<bool, ??>) -> [??];
	mapiUntil : ([?], (int, ?) -> Pair<bool, ??>) -> [??];

	// breaks when callback returns false in .first field and returns previous .second
	foldUntil(a : [?], init : ??, fn : (??, ?) -> Pair<bool, ??>) -> ??;
	foldiUntil(a : [?], init : ??, fn : (int, ??, ?) -> Pair<bool, ??>) -> ??;

	// breaks when callback returns true in .first field and returns it`s .second
	foldUntil2(a : [?], init : ??, fn : (??, ?) -> Pair<bool, ??>) -> ??;
	foldiUntil2(a : [?], init : ??, fn : (int, ??, ?) -> Pair<bool, ??>) -> ??;

	// repeats fn infinitily until it returns true;
	repeatUntil(fn : () -> bool) -> void;
}

loop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> void) -> void {
	if (condition(from)) {
		action(from);
		loop(step(from), step, condition, action);
	};
}

while(condition : () -> bool, action : () -> void) -> void {
	if (condition()) {
		action();
		while(condition, action);
	};
}

doWhile(action : () -> void, condition : () -> bool) -> void {
	action();
	if (condition()) {
		doWhile(action, condition);
	};
}

collectorLoop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> ??) -> [??] {
	result = ref [];

	loop(from, step, condition, \i-> {
		result := arrayPush(^result, action(i));
	});

	^result;
}

foldWhile(xs : [?], init : ??, fn : (??, ?) -> Maybe<??>) -> ?? {
	if (length(xs) > 0) {
		res = fn(init, xs[0]);

		if (isSome(res)) {
			foldWhile(tail(xs), either(res, init), fn)
		} else {
			init
		}
	} else {
		init
	}
}

foldWhile2(xs : [?], init : ??, fn : (??, ?) -> Pair<??, bool>) -> ?? {
	if (length(xs) > 0) {
		res = fn(init, xs[0]);

		if (secondOfPair(res)) {
			foldWhile2(tail(xs), firstOfPair(res), fn)
		} else {
			init
		}
	} else {
		init
	}
}

foldiWhile(xs : [?], init : ??, fn : (int, ??, ?) -> Maybe<??>) -> ?? {
	foldiWhile2(xs, init, 0, fn)
}

foldiWhile2(xs : [?], init : ??, i : int, fn : (int, ??, ?) -> Maybe<??>) -> ?? {
	if (length(xs) > 0) {
		res = fn(i, init, xs[0]);

		if (isSome(res)) {
			foldiWhile2(tail(xs), either(res, init), i + 1, fn)
		} else {
			init
		}
	} else {
		init
	}
}

updateWhile(init : ??, fn : (??) -> Maybe<??>) -> ?? {
	res = fn(init);

	if (isSome(res)) {
		updateWhile(either(res, init), fn)
	} else {
		init
	}
}

updateWhile2(init : ??, fn : (??) -> Pair<??, bool>) -> ?? {
	res = fn(init);

	if (secondOfPair(res)) {
		updateWhile2(firstOfPair(res), fn)
	} else {
		firstOfPair(res)
	}
}


_foldUntil(a : [?], ix : int, res : ??, fn : (int, ??, ?) -> Pair<bool, ??>) -> ?? {
	if (ix >= length(a)) res
	else {
		r = fn(ix, res, a[ix]);
		if (!r.first) res else _foldUntil(a, ix + 1, r.second, fn);
	}
}

foldUntil(a : [?], init : ??, fn : (??, ?) -> Pair<bool, ??>) -> ?? {
	if (length(a) == 0) init else _foldUntil(a, 0, init, \__, r : ??, v : ? -> fn(r, v));
}

foldiUntil(a : [?], init : ??, fn : (int, ??, ?) -> Pair<bool, ??>) -> ?? {
	if (length(a) == 0) init else _foldUntil(a, 0, init, fn);
}

_foldUntil2(a : [?], ix : int, res : ??, fn : (int, ??, ?) -> Pair<bool, ??>) -> ?? {
	if (ix >= length(a)) res
	else {
		r = fn(ix, res, a[ix]);
		if (r.first) r.second else _foldUntil2(a, ix + 1, r.second, fn);
	}
}

foldUntil2(a : [?], init : ??, fn : (??, ?) -> Pair<bool, ??>) -> ?? {
	if (length(a) == 0) init else _foldUntil2(a, 0, init, \__, r : ??, v : ? -> fn(r, v));
}

foldiUntil2(a : [?], init : ??, fn : (int, ??, ?) -> Pair<bool, ??>) -> ?? {
	if (length(a) == 0) init else _foldUntil2(a, 0, init, fn);
}


_mapUntil(a : [?], ix : int, res : [??], fn : (int, ?) -> Pair<bool, ??>) -> [??] {
	if (ix >= length(a)) res
	else {
		r = fn(ix, a[ix]);
		if (!r.first) res else _mapUntil(a, ix + 1, arrayPush(res, r.second), fn);
	}
}

mapUntil(a : [?], fn : (?) -> Pair<bool, ??>) -> [??] {
	if (length(a) == 0) [] else _mapUntil(a, 0, [], \__, v : ? -> fn(v));
}

mapiUntil(a : [?], fn : (int, ?) -> Pair<bool, ??>) -> [??] {
	if (length(a) == 0) [] else _mapUntil(a, 0, [], fn);
}

// repeats fn infinitily until it returns true;
repeatUntil(fn : () -> bool) -> void {
	if (!fn()) repeatUntil(fn);
}

