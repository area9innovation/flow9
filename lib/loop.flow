import runtime;
import ds/tuples;
import ds/array;

export {
	loop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> void) -> void;
	while(condition : () -> bool, action : () -> void) -> void;
	collectorLoop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> ??) -> [??];

	updateWhile(init : ??, fn : (??) -> Maybe<??>) -> ??;
	updateWhile2(init : ??, fn : (??) -> Pair<??, bool>) -> ??;

	// repeats fn infinitily until it returns true;
	repeatUntil(fn : () -> bool) -> void;
}

loop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> void) -> void {
	if (condition(from)) {
		action(from);
		loop(step(from), step, condition, action);
	};
}

collectorLoop(from : ?, step : (?) -> ?, condition : (?) -> bool, action : (?) -> ??) -> [??] {
	result = ref [];

	loop(from, step, condition, \i-> {
		result := arrayPush(^result, action(i));
	});

	^result;
}

while(condition : () -> bool, action : () -> void) -> void {
	if (condition()) {
		action();
		while(condition, action);
	};
}

updateWhile(init : ??, fn : (??) -> Maybe<??>) -> ?? {
	res = fn(init);

	if (isSome(res)) {
		updateWhile(either(res, init), fn)
	} else {
		init
	}
}

updateWhile2(init : ??, fn : (??) -> Pair<??, bool>) -> ?? {
	res = fn(init);

	if (secondOfPair(res)) {
		updateWhile2(firstOfPair(res), fn)
	} else {
		firstOfPair(res)
	}
}

// repeats fn infinitily until it returns true;
repeatUntil(fn : () -> bool) -> void {
	if (!fn()) repeatUntil(fn);
}