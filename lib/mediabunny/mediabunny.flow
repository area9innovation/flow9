import flowstructs;
// TODO: Remove after release.
import net/url_parameter;

export {

	native mbGetMediaDuration : (file : native, cb : (duration : int) -> void) -> void = Mediabunny.getMediaDuration;
	mbConversion : (file : native, format : MBFormat, params : [MBStyle], cb : (outputFile : native) -> void, onError : (error : string) -> void) -> void;

	MBStyle ::= MBSampleRate, MBCrop;
		// Audio. Def 16 kHz
		MBSampleRate(sampleRate : int);
		// Video. It is actually enabled if width and height != 0
		MBCrop(left: int, top: int, width: int, height: int);
	// Output format for conversion
	MBFormat ::= MBAudioMP3, MBAudioWAV, MBVideoMP4, MBVideoWEBM;
		// For encoding: MP3 Slower but smaller, WAV faster but bigger.
		MBAudioMP3();
		MBAudioWAV();
		MBVideoMP4();
		MBVideoWEBM();

	isUrlParameterMediabunny() -> bool;
}

mbFormatToExt(format : MBFormat) -> string {
	switch (format : MBFormat) {
		MBAudioMP3(): "mp3";
		MBAudioWAV(): "wav";
		MBVideoMP4(): "mp4";
		MBVideoWEBM(): "webm";
	}
}

mbConversion(file : native, format : MBFormat, params : [MBStyle], cb : (audioData : native) -> void, onError : (error : string) -> void) -> void {
	sampleRate = extractStruct(params, MBSampleRate(16000));
	crop = extractStruct(params, MBCrop(0, 0, 0, 0));

	mbConversionNative(
		file,
		mbFormatToExt(format),
		[
			sampleRate,
			crop
		],
		cb,
		onError
	)
}

native mbConversionNative : (
	file : native,
	format : string,
	params : [MBStyle],
	cb : (outputFile : native) -> void,
	onError : (error : string) -> void
) -> void = Mediabunny.conversion;

mbConversionNative(
	file : native,
	format : string,
	params : [MBStyle],
	cb : (outputFile : native) -> void,
	onError : (error : string) -> void
) -> void {
	onError("not supported");
}

isUrlParameterMediabunny() -> bool {
	isUrlParameterTrue("mediabunny") || (isUrlParameterTrue("new") && !isUrlParameterFalse("mediabunny"))
}