import formats/css/css_pegop;
import formats/css/css;
import formats/css/cssterm;
import formats/css/stylesheet;
import lingo/pegaction;
import lingo/pegcode/parsic;

export {
	// Parses a CSS snippet to a stylesheet
	parseCss(css : string) -> Stylesheet;
	parseCssTrace(css : string, addWarning : (string) -> void) -> Stylesheet;

	mergeCssStyle(orig : CssStyle, new : CssStyle) -> CssStyle;
	cssMarginWidth2double(margin : CssMarginWidth) -> double;
}

parseCss(css : string) -> Stylesheet {
	parseCssTrace(css, devtrace);
}

parseCssTrace(css : string, addWarning : (string) -> void) -> Stylesheet {
	result = parsic(pegOps4Css, css, defaultPegActions);
	if (result == "PARSING FAILED") {
			addWarning(toString(result));
			Stylesheet(makeTree());
	} else {
			css2stylesheet(result, addWarning);
	}
}

defTreeValue = StyleWithSelectors(defCssStyle, makeTree());

extractNameFromSingleSelectors(selectors : [CssSingleSelector]) -> string {
	strGlue(map(selectors, \selector -> {
			switch(selector) {
				CssRuleNameWithPseudos(name, pseudos): name + extractNameFromPseudos(pseudos);
				CssRuleName(name): name;
			}
		}), " "
	)
}

extractNameFromPseudos(pseudos : [CssPseudo]) -> string {
	strGlue(map(pseudos, \pseudo -> {
			switch(pseudo) {
				CssModifier(modifier): ":" + modifier;
				// TODO: not supported
				CssFunction(name, optarg): ":" + name + "()";
			}
		}), " "
	)
}

css2stylesheet(css : CssStylesheet, addWarning : (string) -> void) -> Stylesheet {
	Stylesheet(fold(css.rules, makeTree(), \acc, r : CssRuleset -> {
		switch(r: CssRuleset) {
			CssRulesetSimple(ruleSelectors, ruleDeclarations): {
				style = cssDeclarations2style(ruleDeclarations, addWarning);
				fold(ruleSelectors, acc, \ac2, selector : CssSelector -> {
					switch (selector) {	
						CssCombinators(head, combinations) : {
							addWarning("Not supported CssCombinators: " + toString(combinations));
							ac2;
						}
						CssSelectorSequence(selectors) : {
							fullName = extractNameFromSingleSelectors(selectors);				
							origStyle = lookupTreeDef(ac2, fullName, defTreeValue);
							mergedStyle = mergeCssStyle(origStyle.style, style);
							setTree(ac2, fullName, StyleWithSelectors(mergedStyle, origStyle.selectors));
						}
						CssAttributeSelector(head, attributes) : {
							ac2;
						}
					}
				})
			};
			CssRulesetMedia(rulesets): {
				acc
			}
		}
	}));
}

cssSelectorName(s : string) -> string {
	s;
}

cssDeclarations2style(ds : [CssDeclaration], addWarning : (string) -> void) -> CssStyle {
	fold(ds, defCssStyle, \acc, d -> {
		addCssDeclaration2style(acc, d, addWarning)
	})
}

addCssDeclaration2style(
	style : CssStyle,
	d : CssDeclaration,
	addWarning : (string) -> void
) -> CssStyle {
	prop = d.property;
	if (prop == "font-family") {
		switch (d.expr) {
			CssList(terms): {
				fams = filter(map(terms, \t -> cssTerm2string(t, "")), \t -> t != "");
				CssStyle(style with family=concat(style.family, fams));
			}
			default: {
				fam = cssTerm2string(d.expr, "");
				if (fam != "") {
					CssStyle(style with family=arrayPush(style.family, fam));
				} else style;
			}
		}
	} else if (prop == "font-size") {
		size = cssTerm2double(d.expr, 0.0);
		if (size != 0.0) {
			CssStyle(style with fontSize=size);
		} else style;
	} else if (prop == "font-background") {
		col = cssTerm2color(d.expr, -1);
		if (col != -1) {
			CssStyle(style with fontBackgroundFill=col);
		} else {
			style;
		}
	} else if (prop == "font-weight") {

		v = switch (d.expr : CssTerm) {
			CssName(n): {
				if (n == "bold") 700
				else if (n == "bolder") 900
				else if (n == "normal") 400
				else if (n == "lighter") 300
				else 0;
			}
			default: cssTerm2int(d.expr, 0);
		}

		bold = if (300 <= v && v < 600) {
			false;
		} else if (600 <= v) {
			true;
		} else {
			addWarning("Unknown font-weight: " + toString(d.expr));
			style.bold;
		};
		CssStyle(style with bold=bold);
	} else if (prop == "font-style") {
		st = toLowerCase(cssTerm2string(d.expr, ""));
		italic = if (st == "italic") {
			true;
		} else if (st == "normal") {
			false;
		} else {
			addWarning("Unknown font-style: " + toString(d.expr));
			style.italic;
		};
		CssStyle(style with italic=italic);
	} else if (prop == "text-decoration") {
		st = toLowerCase(cssTerm2string(d.expr, ""));
		if (st == "none") {
			style;
		} else {
			addWarning("Unknown text-decoration: " + toString(d.expr));
			style;
		}
	} else if (prop == "color") {
		col = cssTerm2color(d.expr, -1);
		st = toLowerCase(cssTerm2string(d.expr, ""));
		if (st == "transparent") {
			CssStyle(style with opacity=0.0);
		} else if (col != -1) {
			CssStyle(style with color=col);
		} else {
			style;
		}
	} else if (prop == "stroke") { // stroke is SVG CSS
		col = cssTerm2color(d.expr, -1);
		if (col != -1) {
			CssStyle(style with stroke=col);
		} else {
			style;
		}
	} else if (prop == "stroke-width") {
		v = cssTerm2double(d.expr, -1.0);
		if (v > 0.0) {
			CssStyle(style with strokeWidth=v);
		} else {
			style;
		}
	} else if (prop == "fill") { // fill is SVG CSS
		col = cssTerm2color(d.expr, -1);
		if (col != -1) {
			CssStyle(style with fill=col);
		} else {
			style;
		}
	} else if (prop == "opacity") {
		v = cssTerm2double(d.expr, -1.0);
		if (v >= 0.0 && v <= 1.0) {
			CssStyle(style with opacity=v);
		} else {
			style;
		}
	} else if (prop == "background") {
		switch (d.expr : CssTerm) {
			CssList(terms) : {
				parseCssBackground(terms, style);
			}
			CssArray(terms) : {
				parseCssBackground(terms, style);
			}
			default: {
				parseCssBackground([d.expr], style);
			}
		}
	} else if (prop == "background-color") {
		v = cssTerm2color(d.expr, -1);
		if (v != -1) {
			CssStyle(style with backgroundFill=v);
		} else {
			addWarning("Unknown background-color: " + toString(d.expr));
			style;
		}
	} else if (prop == "background-image") {
		switch (d.expr : CssTerm) {
			/*CssList(terms) : {
				parseCssBackground(terms, style);
			}
			CssArray(terms) : {
				parseCssBackground(terms, style);
			}*/
			CssUrl(__) : {
				parseCssBackground([d.expr], style);
			}
			default: {
				addWarning("Unknown background-image: " + toString(d.expr));
				style;
			}
		}
	} else if (prop == "line-height") {
		lineHeight = cssTerm2double(d.expr, defCssStyle.lineHeight);
		CssStyle(style with lineHeight=lineHeight);
	} else if (prop == "width") {
		width = switch (d.expr : CssTerm) {
			CssPercentage(v): CssPercent(cssTerm2double(v, 0.0));
			default: {
				v = cssTerm2double(d.expr, 0.0);
				if (v != 0.0) {
					CssLength(v, CssUnitPx());
				} else {
					addWarning("Unknown width: " + toString(d.expr));
					style.width;
				}
			}
		};
		CssStyle(style with width=width);
	} else if (prop == "height") {
		v = cssTerm2double(d.expr, 0.0);
		if (v != 0.0) {
			CssStyle(style with height=v);
		} else {
			addWarning("Unknown height: " + toString(d.expr));
			style;
		}
	} else if (prop == "letter-spacing") {
		v = cssTerm2double(d.expr, defCssStyle.letterSpacing);
		if (v != defCssStyle.letterSpacing) {
			CssStyle(style with letterSpacing=v);
		} else {
			addWarning("Unknown letter-spacing: " + toString(d.expr));
			style;
		}
	} else if (prop == "word-spacing") {
		v = cssTerm2double(d.expr, defCssStyle.wordSpacing);
		if (v != defCssStyle.wordSpacing) {
			CssStyle(style with wordSpacing=v);
		} else {
			addWarning("Unknow work-spacing: " + d2s(v));
			style;
		}
	} else if (prop == "border") {
		CssStyle(style with border=cssTerm2Border(d.expr, style.border, addWarning))
	} else if (prop == "border-color") {
		CssStyle(style with border=cssTerm2BorderColor(d.expr, style.border))
	} else if (prop == "border-radius") {
		br = cssTerm2BorderRadius(d.expr, emptyBorderRadius, addWarning);
		if (br != emptyBorderRadius) {
			CssStyle(style with borderRadius=br);
		} else {
			addWarning("Unknown border-radius: " + toString(d.expr));
			style;
		}
	} else if (prop == "border-top-left-radius" || prop == "border-top-right-radius"
			|| prop == "border-bottom-right-radius" || prop == "border-bottom-left-radius") {
		v = cssTerm2double(d.expr, -1.0);
		if (v != -1.0) {
			br = if (prop == "border-top-left-radius") {
					BorderRadius(v, max(0.0, style.borderRadius.topRight),
						max(0.0, style.borderRadius.bottomRight), max(0.0, style.borderRadius.bottomLeft));
				} else if (prop == "border-top-right-radius") {
					BorderRadius(max(0.0, style.borderRadius.topLeft), v,
						max(0.0, style.borderRadius.bottomRight), max(0.0, style.borderRadius.bottomLeft));
				} else if (prop == "border-bottom-right-radius") {
					BorderRadius(max(0.0, style.borderRadius.topLeft), max(0.0, style.borderRadius.topRight),
						v, max(0.0, style.borderRadius.bottomLeft));
				} else { // if (prop == "border-bottom-left-radius")
					BorderRadius(max(0.0, style.borderRadius.topLeft), max(0.0, style.borderRadius.topRight),
						max(0.0, style.borderRadius.bottomRight), v);
				}
			CssStyle(style with borderRadius=br);
		} else {
			style;
		}
	} else if (contains(["fill-rule", "text-anchor", "text-transform", "stroke-linejoin"], prop)) {
		// Extra SVG attributes
		extra = setTree(style.svgExtra, prop, d.expr);
		CssStyle(style with svgExtra=extra);
	} else if (prop == "display") {
		v = cssTerm2string(d.expr, "");
		if (v == "none") {
			CssStyle(style with display=CssDisplayNone());
		} else {
			addWarning("Unknown display: " + toString(d.expr));
			style;
		}
	} else if (prop == "white-space") {
		value = cssTerm2string(d.expr, "");
		whiteSpace = if (value == "pre") {
			CssWhiteSpacePre();
		} else if (value == "nowrap") {
			CssWhiteSpaceNowrap();
		} else if (value == "pre-wrap") {
			CssWhiteSpacePreWrap();
		} else if (value == "pre-line") {
			CssWhiteSpacePreLine();
		} else {
			CssWhiteSpaceNormal();
		};
		CssStyle(style with whiteSpace=whiteSpace);
	} else if (prop == "margin-left") {
		margin = CssMargin(
			style.box.margin.top,
			style.box.margin.right,
			style.box.margin.bottom,
			cssTerm2CssMarginWidth(d.expr)
		);
		cssUpdateMargin(style, margin);
	} else if (prop == "margin-right") {
		margin = CssMargin(
			style.box.margin.top,
			cssTerm2CssMarginWidth(d.expr),
			style.box.margin.bottom,
			style.box.margin.left
		);
		cssUpdateMargin(style, margin);
	} else if (prop == "margin-top") {
		margin = CssMargin(
			cssTerm2CssMarginWidth(d.expr),
			style.box.margin.right,
			style.box.margin.bottom,
			style.box.margin.left
		);
		cssUpdateMargin(style, margin);
	} else if (prop == "margin-bottom") {
		margin = CssMargin(
			style.box.margin.top,
			style.box.margin.right,
			cssTerm2CssMarginWidth(d.expr),
			style.box.margin.left
		);
		cssUpdateMargin(style, margin);
	} else if (prop == "margin") {
		switch(d.expr: CssTerm) {
			CssList(array): {
				if (length(array) == 2) {
					topBottom = cssTerm2CssMarginWidth(array[0]);
					leftRight = cssTerm2CssMarginWidth(array[1]);
					margin = CssMargin(
						topBottom,
						leftRight,
						topBottom,
						leftRight
					);
					cssUpdateMargin(style, margin);
				} else if (length(array) == 4) {
					margin = CssMargin(
						cssTerm2CssMarginWidth(array[0]),
						cssTerm2CssMarginWidth(array[1]),
						cssTerm2CssMarginWidth(array[2]),
						cssTerm2CssMarginWidth(array[3])
					);
					cssUpdateMargin(style, margin);
				} else {
					style
				}
			};
			default: {
				value = cssTerm2CssMarginWidth(d.expr);
				margin = CssMargin(value, value, value, value);
				cssUpdateMargin(style, margin);
			}
		}
	} else if (prop == "top") {
		position = CssStylePosition(
			Some(cssTerm2double(d.expr, -1.0)),
			style.position.bottom,
			style.position.left,
			style.position.right
		);
		CssStyle(style with position=position);
	} else if (prop == "bottom") {
		position = CssStylePosition(
			style.position.top,
			Some(cssTerm2double(d.expr, -1.0)),
			style.position.left,
			style.position.right
		);
		CssStyle(style with position=position);
	} else if (prop == "left") {
		position = CssStylePosition(
			style.position.top,
			style.position.bottom,
			Some(cssTerm2double(d.expr, -1.0)),
			style.position.right
		);
		CssStyle(style with position=position);
	} else if (prop == "right") {
		position = CssStylePosition(
			style.position.top,
			style.position.bottom,
			style.position.left,
			Some(cssTerm2double(d.expr, -1.0))
		);
		CssStyle(style with position=position);
	} else if (
		prop == "-webkit-transform"
		|| prop == "transform"
	) {
		CssStyle(style with transform = cssTerm2Transform(d.expr));
	} else if (
		prop == "-webkit-transform-origin"
		|| prop == "transform-origin"
	) {
		CssStyle(style with transformOrigin = cssTerm2TransformOrigin(d.expr));
	} else {
		addWarning("Unknown CSS property: " + prop + " " + toString(d.expr));
		style;
	}
}

cssTerm2BorderColor(c : CssTerm, def : [GraphicsStyle]) -> [GraphicsStyle] {
	extractedColor = cssTerm2BorderColorHepler(c, 0);
	extractedStyles =
		if (extractedColor == 0) []
		else [Stroke(extractedColor)];
	concat(def, extractedStyles)
}

cssTerm2BorderColorHepler(t1 : CssTerm, colorAcc : int) -> int {
	switch (t1 : CssTerm) {
		CssString(__): cssTerm2color(t1, colorAcc);
		CssName(__): cssTerm2color(t1, colorAcc);
		CssDouble(__): cssTerm2color(t1, colorAcc);
		CssInt(__): cssTerm2color(t1, colorAcc);
		CssHexInt(__): cssTerm2color(t1, colorAcc);
		CssNegate(__): cssTerm2color(t1, colorAcc);

		CssPercentage(v): cssTerm2color(t1, colorAcc);

		default: colorAcc;
	}
}

cssTerm2Border(
	c : CssTerm,
	def : [GraphicsStyle],
	addWarning : (string) -> void
) -> [GraphicsStyle] {
	getGraphicsStyleFromCssTerms = \terms -> {
		getWidthFromCss = \-> {
			width = fold(terms, 0.0, \acc, t -> {
				switch (t : CssTerm) {
					CssPt(value): {
						cssTerm2double(value, acc);
					}
					CssPx(value): {
						cssTerm2double(value, acc);
					}
					CssEm(value): {
						cssTerm2double(t, acc);
					}
					default: {
						acc;
					}
				}
			});
			if (width != 0.0) {
				[StrokeWidth(width)]
			} else {
				[];
			}
		};
		fold(terms, def, \acc, t -> {
			switch (t : CssTerm) {
				CssSolid(): {
					color = fold(terms, 0, \colorAcc, t1 -> {
						cssTerm2BorderColorHepler(t1, colorAcc)
					});
					concat([Stroke(color)], getWidthFromCss());
				}
				CssLinearGradient(rotation, colors): {
					gs = CssLinearGradient2GraphicsStyle(CssLinearGradient(rotation, colors), true, []);
					concat(gs, getWidthFromCss());
				}
				default: acc;
			}
		});
	};

	switch (c : CssTerm) {
		CssSolid(): {
			[Stroke(svgName2color("black", 0))];
		}
		CssList(terms): {
			getGraphicsStyleFromCssTerms(terms);
		}
		CssArray(terms): {
			getGraphicsStyleFromCssTerms(terms);
		}
		CssInherit(): {
			defCssStyle.border;
		}

		default: {
			addWarning("Expected CssSolid or CssLinearGradient or CssList in CSS term: " + toString(c));
			def
		}
	}
}

cssTerm2BorderRadius(
	c : CssTerm,
	def : BorderRadius,
	addWarning : (string) -> void
) -> BorderRadius {
	switch (c : CssTerm) {
		CssInherit(): {
			defCssStyle.borderRadius;
		}
		CssList(terms): {
			r = fold(terms, [], \acc, t ->{
				v = cssTerm2double(t, -1.0);
				if (v != -1.0) {
					arrayPush(acc, v);
				} else {
					acc;
				}
			});
			len = length(r);
			if (len == 1) {
				BorderRadius(r[0], r[0], r[0], r[0]);
			} else if (len == 2) {
				BorderRadius(r[0], r[1], r[0], r[1]);
			} else if (len == 3) {
				BorderRadius(r[0], r[1], r[2], r[1]);
			} else if (len == 4) {
				BorderRadius(r[0], r[1], r[2], r[3]);
			} else {
				addWarning("Invalid value for border-radius: " + toString(c));
				def;
			}
		}
		default: {
			v = cssTerm2double(c, -1.0);
			if (v != -1.0) {
				BorderRadius(v, v, v, v);
			} else {
				addWarning("Invalid value for border-radius: " + toString(c));
				def;
			}
		}
	}
}

CssLinearGradient2GraphicsStyle(c : CssLinearGradient, isStroke : bool, def : [GraphicsStyle]) -> [GraphicsStyle] {
	// Add 270.0deg, because browsers and renderform have different opinions about angle 0deg.
	rotation = 270.0 + switch (c.rotation : CssTerm) {
		CssDeg(value): {
			cssTerm2double(value, 0.0);
		}
		// TODO: add support of "to right", "to left", "to top", "to bottom"
		// and their combinations
		/*CssString(value) : {
		}*/
		default: {
			0.0;
		}
	}
	switch (c.colors : CssTerm) {
		CssList(terms): {
			rawColors = fold(terms, [], \acc, t -> {
				col = cssTerm2color(t, -1);
				if (col != -1) {
					arrayPush(acc, col);
				} else {
					acc;
				}
			});
			if (length(rawColors) > 1) {
				eachColorPercent = 1.0 / i2d(length(rawColors) - 1);
				points = foldi(rawColors, [], \idx, acc, color -> {
					arrayPush(acc, GradientPoint(color, 1.0, eachColorPercent * i2d(idx)));
				});
				if (isStroke) {
					[StrokeLineGradient(rotation, points)];
				} else {
					[GradientFill(rotation, points)];
				}
			} else {
				def;
			}
		}
		default: {
			def;
		}
	}
}

cssUpdateMargin(style : CssStyle, margin : CssMargin) -> CssStyle {
	box = CssBox(
		margin,
		style.box.border,
		style.box.padding
	);
	CssStyle(style with box=box);
}

cssTerm2CssMarginWidth(c : CssTerm) -> CssMarginWidth {
	number = cssTerm2double(c, 0.0);
	text = cssTerm2string(c, "");

	if (number > 0.0) {
		CssLength(number, CssUnitPx());
	} else if (text == "auto") {
		CssAuto();
	} else {
		zeroCssLength();
	};
}

cssTerm2Transform(c : CssTerm) -> CssStyleTransform {
	defRotate = defCssStyle.transform.rotate;
	defScaleX = defCssStyle.transform.scaleX;
	defScaleY = defCssStyle.transform.scaleY;
	switch(c : CssTerm) {
		CssList(terms): {
			fold(terms, defCssStyle.transform, \acc, term -> {
				mergeCssStyleTransform(acc, cssTerm2Transform(term));
			});
		};
		CssStruct(name, arguments): {
			if (name == "rotate" && length(arguments) > 0) {
					CssStyleTransform(
						cssTerm2double(arguments[0], defRotate),
						defScaleX,
						defScaleY
					);
			} else if (name == "scale" && length(arguments) > 0) {
				switch(arguments[0] : CssTerm) {
					CssList(terms): {
						if (length(terms) > 1) {
							CssStyleTransform(
								defRotate,
								cssTerm2double(terms[0], defScaleX),
								cssTerm2double(terms[1], defScaleY)
							);
						} else {
							defCssStyle.transform;
						}
					};
					default: {
						scale = cssTerm2double(arguments[0], defScaleX);
						CssStyleTransform(defRotate, scale, scale);
					}
				}
			} else if (name == "matrix") {
				switch(arguments[0] : CssTerm) {
					CssList(terms): {
						if (length(terms) > 1) {
							transformMatrix = TransformMatrix(
								cssTerm2double(terms[0], 1.),
								cssTerm2double(terms[1], 0.),
								cssTerm2double(terms[2], 0.),
								cssTerm2double(terms[3], 1.),
								cssTerm2double(terms[4], 0.),
								cssTerm2double(terms[5], 0.),
							);

							scale = getTransformScale(transformMatrix);

							CssStyleTransform(
								getTransformRotation(transformMatrix) / PI * 180.,
								scale.x,
								scale.y
							);
						} else {
							defCssStyle.transform;
						}
					};
					default: {
						defCssStyle.transform;
					}
				}
			} else {
				defCssStyle.transform;
			}
		};
		default: defCssStyle.transform;
	}
}

cssTerm2TransformOrigin(c : CssTerm) -> CssStyleTransformOrigin {
	defXOffset = defCssStyle.transformOrigin.xOffset;
	defYOffset = defCssStyle.transformOrigin.yOffset;

	offsets = pairs2tree([
		Pair("left", 0.),
		Pair("center", 0.5),
		Pair("right", 1.0),
		Pair("top", 0.),
		Pair("bottom", 1.),
	]);

	switch(c : CssTerm) {
		CssList(terms): {
			getPercentage = \t, def-> switch (t) {
				CssPercentage(n): cssTerm2double(n, def) / 100.;
				CssName(n): lookupTreeDef(offsets, n, def);
				default: def;
			};

			CssStyleTransformOrigin(
				getPercentage(terms[0], defXOffset),
				getPercentage(terms[1], defYOffset),
			)
		};
		default: defCssStyle.transformOrigin;
	}
}

parseCssBackground(cssTerms : [CssTerm], cssStyle : CssStyle) -> CssStyle {
	fold(cssTerms, cssStyle, \style, term -> {
		switch (term : CssTerm) {
			CssLinearGradient(rotation, colors): {
				gs = CssLinearGradient2GraphicsStyle(CssLinearGradient(rotation, colors), false, []);
				CssStyle(style with background=gs);
			}
			CssUrl(value) : {
				if(value != "") {
					CssStyle(style with backgroundImage=concat([term], style.backgroundImage));
				} else {
					style;
				}
			}
			default: {
				col = cssTerm2color(term, -1);
				if (col != -1) {
					CssStyle(style with backgroundFill=col);
				} else {
					style;
				}
			}
		}
	});
}

mergeCssStyle(orig : CssStyle, new : CssStyle) -> CssStyle {
	CssStyle(
		concat(new.family, orig.family),
		if (new.fontSize == defCssStyle.fontSize) orig.fontSize else new.fontSize,
		if (new.letterSpacing == defCssStyle.letterSpacing) orig.letterSpacing else new.letterSpacing,
		if (new.wordSpacing == defCssStyle.wordSpacing) orig.wordSpacing else new.wordSpacing,
		new.bold,
		new.italic,
		if (new.color == defCssStyle.color) orig.color else new.color,
		if (new.fontBackgroundFill == defCssStyle.fontBackgroundFill) orig.fontBackgroundFill else new.fontBackgroundFill,
		if (new.backgroundFill == defCssStyle.backgroundFill) orig.backgroundFill else new.backgroundFill,
		if (new.lineHeight == defCssStyle.lineHeight) orig.lineHeight else new.lineHeight,
		if (new.width == defCssStyle.width) orig.width else new.width,
		if (new.height == defCssStyle.height) orig.height else new.height,
		if (new.opacity == defCssStyle.opacity) orig.opacity else new.opacity,
		mergeCssStyleTransform(orig.transform, new.transform),
		if (new.transformOrigin == defCssStyle.transformOrigin) orig.transformOrigin else new.transformOrigin,
		new.position,
		if (length(new.border) == 0) orig.border else new.border,
		if (new.borderRadius == defCssStyle.borderRadius) orig.borderRadius else new.borderRadius,
		if (length(new.background) == 0) orig.background else new.background,
		if (length(new.backgroundImage) == 0) orig.backgroundImage else new.backgroundImage,
		if (new.stroke == defCssStyle.stroke) orig.stroke else new.stroke,
		if (new.strokeWidth == defCssStyle.strokeWidth) orig.strokeWidth else new.strokeWidth,
		if (new.fill == defCssStyle.fill) orig.fill else new.fill,
		if (new.form == defCssStyle.form) orig.form else new.form,
		mergeCssBox(orig.box, new.box),
		if (new.whiteSpace == CssWhiteSpaceNormal()) orig.whiteSpace else new.whiteSpace,
		if (new.svgExtra == defCssStyle.svgExtra) orig.svgExtra else new.svgExtra,
		if (new.display == defCssStyle.display) orig.display else new.display
	)
}

mergeCssBox(orig : CssBox, new : CssBox) -> CssBox {

	mergeMargin = \v1, v2 -> {
		if (v2 == CssAuto()) {
			v2
		} else {
			CssLength(
				cssMarginWidth2double(v1) + cssMarginWidth2double(v2),
				CssUnitPx()
			)
		}
	};
	mergeBorder = \v1, v2 -> {
		if (v1 == zeroCssLength()) v2 else v1;
	};
	mergePadding = \v1, v2 -> {
		if (v1 == zeroCssLength()) v2 else v1;
	};

	CssBox(
		CssMargin(
			mergeMargin(orig.margin.top, new.margin.top),
			mergeMargin(orig.margin.right, new.margin.right),
			mergeMargin(orig.margin.bottom, new.margin.bottom),
			mergeMargin(orig.margin.left, new.margin.left)
		),
		// We do not support it for now
		emptyCssBox.border,
		CssPadding(
			mergePadding(orig.padding.top, new.padding.top),
			mergePadding(orig.padding.right, new.padding.right),
			mergePadding(orig.padding.bottom, new.padding.bottom),
			mergePadding(orig.padding.left, new.padding.left)
		)
	);
}

cssMarginWidth2double(margin : CssMarginWidth) -> double {
	switch(margin: CssMarginWidth) {
		CssLength(value, unit): value;
		default: 0.0;
	}	
}

mergeCssStyleTransform(orig : CssStyleTransform, new : CssStyleTransform) -> CssStyleTransform {
	CssStyleTransform(
		if (new.rotate == defCssStyle.transform.rotate) orig.rotate else new.rotate,
		orig.scaleX * new.scaleX,
		orig.scaleY * new.scaleY
	);
}

/*
main() {
    // Here we parse a string against the grammar using the precompiled peg opcodes
    css1 = "<!--table
.font519545
	{color:black;
	font-size:11.0pt;
	font-weight:400;
	font-style:italic;
	text-decoration:none;
	font-family:Calibri, sans-serif;
	mso-font-charset:0;}
.font619545
	{color:black;
	font-size:11.0pt;
	font-weight:700;
	font-style:italic;
	text-decoration:none;
	font-family:Calibri, sans-serif;
	mso-font-charset:0;}
-->
";
	css2 = "#include sandbox/tropic/normal.css";
	println(parseCss(css1));
}
*/
 