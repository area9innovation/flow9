import math/math;
import formats/css/css;
import svg_colorname;
import devmode;

export {
	cssTerm2int(c : CssTerm, def : int) -> int;
	cssTerm2double(c : CssTerm, def : double) -> double;
	cssTerm2string(c : CssTerm, def : string) -> string;
	cssTerm2color(c : CssTerm, def : int) -> int;
}

cssEmToPxInt = 16;
cssEmToPxDouble = i2d(cssEmToPxInt);

cssTerm2int(c : CssTerm, def : int) -> int {
	switch (c : CssTerm) {
		CssDouble(d): round(d);
		CssInt(v): v;
		CssHexInt(h): parseHex(h);
		CssNegate(v): -cssTerm2int(v, def);

		CssPt(v) : cssTerm2int(v, def);
		CssPx(v) : cssTerm2int(v, def);
		CssDeg(v) : cssTerm2int(v, def);
		CssEm(v) : cssTerm2int(v, def) * cssEmToPxInt;
		CssPercentage(v): round(i2d(def) * cssTerm2double(v, i2d(def)));
		CssList(rgb): {
			rgbValues = map(rgb, \_colorTerm -> cssTerm2int(_colorTerm, def));
			foldi(rgb, 0, \i, res, item -> {
				_colorItem = cssTerm2int(item, def);
				if (_colorItem > 0 && i < 3) {
					pow(256, 2-i)*_colorItem + res;
				} else res
			});
		}

		CssInherit() : -1;

		default: {
			devtrace("Expected int in CSS term: " + toString(c));
			def
		}
	}
}

cssTerm2double(c : CssTerm, def : double) -> double {
	switch (c : CssTerm) {
		CssDouble(d): d;
		CssInt(v): i2d(v);
		CssHexInt(h): i2d(parseHex(h));
		CssNegate(v): -cssTerm2double(v, def);

		CssPt(v) : cssTerm2double(v, def);
		CssPx(v) : cssTerm2double(v, def);
		CssDeg(v) : cssTerm2double(v, def);
		CssEm(v) : cssTerm2double(v, def) * cssEmToPxDouble;
		CssPercentage(v): def * cssTerm2double(v, def);

		CssInherit() : 0.0;

		default: {
			devtrace("Expected double in CSS term: " + toString(c));
			def
		}
	}
}

cssTerm2string(c : CssTerm, def : string) -> string {
	switch (c : CssTerm) {
		CssString(d): d;
		CssName(n): n;

		CssInherit() : "";

		default: {
			devtrace("Expected string in CSS term: " + toString(c));
			def
		}
	}
}

cssTerm2color(c : CssTerm, def : int) -> int {
	switch (c : CssTerm) {
		CssString(d): {
			svgName2color(d, def);
		}
		CssName(n): {
			svgName2color(n, def);
		}
		CssHexInt(h): {
			he = if (strlen(h) == 3) {
				getCharAt(h, 0) + getCharAt(h, 0)
				+ getCharAt(h, 1) + getCharAt(h, 1)
				+ getCharAt(h, 2) + getCharAt(h, 2);
			} else {
				h;
			};
			parseHex(he);
		}
		CssStruct(name, args): {
			if (name == "rgb" && length(args) == 1) cssTerm2int(args[0], def)
			else cssTerm2int(c, def)

		}
		default: cssTerm2int(c, def);
	}	
}
