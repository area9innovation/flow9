// http://www.w3.org/TR/CSS21/grammar.html
// https://www.w3schools.com/cssref/css_selectors.asp

stylesheet = ws ruleset*:r { CssStylesheet(:r) };

ruleset = selector:h (',' ws selector)*:t declarations:d { CssRuleset(consArray(:h, :t), :d) };

/*selector =
	rulename:n1 rulename:n2 (((':' | '>') ws)? rulfunc)+:n3 { CssIgnore() }
	| rulename:n1 rulename:n2 { CssExtender(:n1, :n2) }
	| rulename:n1 ':' ws rulename:n2 rulename:n3 { CssModifier2(:n1, :n2, :n3) }
	| rulename:n1 ':' ws rulename:n2  { CssModifier(:n1, :n2) }
	
	// This is the wrong AST, but at least let us parse it
	| rulename:n1 '>' ws rulename:n2 { CssExtender(:n1, :n2) }

	| rulename:n { CssSimple(:n) }
	;

*/

// Here is the standard for selectors in CSS3:

// https://www.w3.org/TR/selectors-3/

selector = simple_selector:h (combinator:c selector:s { CssCombination(:c, :s) }):t { CssCombinators(:h, :t) }
	| simple_selector;

	combinator = '>' ws { CssGreaterCombinator() } | '+' ws { CssPlusCombinator() };

simple_selector = single_selector+:s { CssSelectorSequence(:s) };

single_selector = rulename:n pseudo+:ps { CssRuleNameWithPseudos(:n, :ps) }
	| rulename:n { CssRuleName(:n) }; 

pseudo = ':' ws rulename:n '(' ws rulename?:a ')' ws { CssFunction(:n, :a) }
	| ':' ws rulename:n { CssModifier(:n) };


declarations = '{' ws declaration:d (';' ws declaration)*:ds (';' ws)? '}' ws { consArray(:d, :ds) };
declaration = name:n ':' ws term:t { CssDeclaration(:n, :t) };

term = aterm:n (',' ws aterm)+:ns { CssList( consArray(:n, :ns) ) }
	| aterm:n (ws aterm)+:ns { CssList( consArray(:n, :ns) ) }
	| aterm;

aterm = minus_operator unary_term:n { CssNegate(:n) }
	| string:s { CssString(:s) }
	| urlString
	| unary_term 
	| array
	| "true" ws { CssTrue() }
	| "false" ws { CssFalse() }
	| "inherit" ws { CssInherit() }
	| "solid" ws { CssSolid() }
	| "linear-gradient" ws "(" ws degOrString:d ws "," ws term:t ")" ws { CssLinearGradient(:d, :t) }
	| name:n "(" ws terms:t ")" ws { CssStruct(:n, :t) }
	| name:n "(" ws ")" ws { CssStruct(:n, array()) }
	| name:n { CssName(:n) }
	| hexcolor
	;

unary_term = percentage | length | pixels | degOrString | ems | number:n ws { :n };
	// | exs | angle | time | freq
	
terms = term:t ("," ws term)*:ts { consArray(:t, :ts) };

minus_operator = '-' ws;

array = "[" ws terms:t "]" ws { CssArray(:t) }
	| "[" ws "]" ws { CssArray( array() ) };

rulename = "*" letterOrDigitOrDot+$n ws {$n} | letterOrDigitOrDot+$n ws {$n};
rulfunc = (letterOrDigit | '(' | ')')+$n ws {$n};

name = nameNoWs$n ws {$n};

nameNoWs = letterOrDigitOrDot+;

degOrString = deg:d { :d } | string:s { :s };

urlString = "url(" ws string:s ")" { CssUrl(:s) } 
	| "url(" ws (urlChar)*$s ws ")" ws { CssUrl($s) }
	| "url(" ws string2:z ")" { CssUrl(:z) };

urlChar = letterOrDigitOrDot | '/' | '?' | '=' | '&' | '+' | '#';
string = '"'$q (nonquotechar2)*$s '"' ws { strUnescape($s, $q) };
string2 = "'"$q (nonquotechar1)*$s "'" ws { strUnescape($s, $q) };



number = 
	"0x" hexdigit+$h { CssHexInt($h) } 
	| (int "." int?)$s { CssDouble(s2d($s)) } 
	| ("." int)$s { CssDouble(s2d($s)) } 
	| int$i { CssInt(s2i($i)) }
	;

deg = number:n ws 'deg' ws { CssDeg(:n) };
percentage = number:n ws '%' ws { CssPercentage(:n) };
length = number:n ws 'pt' ws { CssPt(:n) };
pixels = number:n ws 'px' ws { CssPx(:n) };
ems = number:n ws 'em' ws { CssEm(:n) };

hexcolor = '#' name:n ws { CssHexInt(:n) };
int! = digit+;

letter = 'a'-'z' | 'A'-'Z' | '_' | '-'| '#';
letterOrDigitOrDot = digit | letter | '.';
letterOrDigit = digit | letter;
nonquotechar1 = !"'" onechar;
nonquotechar2 = !'"' onechar;
digit = '0'-'9';
hexdigit = digit | 'a'-'f' | 'A' - 'F';
hexword = hexdigit hexdigit hexdigit hexdigit;
onechar = '\\u' hexword | "\\" char | char;
char = '\u0000' - '\uffff';
quotedchar = "'"$q onechar$c "'" ws { strUnescape($c, $q) };
ws = whitespace*;
whitespace = ' ' | '\u000d' | '\n' | '\t' | comment | linecomment | xmlComment | '-->' | charset;
comment = '/*' nonstarchar* '*/';
charset = '@charset "' letterOrDigit+ '";';
nonstarchar = !'*/' char;
linecomment = '//' nonlinebreakchar* '\n';
nonlinebreakchar = !'\n' char;

xmlComment = '<!--' letterOrDigitOrDot*;
