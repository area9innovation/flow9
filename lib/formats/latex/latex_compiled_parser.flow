// Produced by  flowcpp mango/mango.flow -- file=../flow9/lib/formats/latex/latex.mango compile=1 main=latex_compiled
import tools/mango/mcode_lib;
import string;

export {
	parse_latex_compiled(acc : MoParseAcc) -> bool;
}

parse_ws(acc : MoParseAcc) -> bool {
	// println("parse_ws");
	mparseStar(acc, \ -> {
		matchString(acc, " ") || (matchString(acc, "\t") || (matchString(acc, "\u000d") || matchString(acc, "\n")))
	})
}

parse_nonalpha_command(acc : MoParseAcc) -> bool {
	// println("parse_nonalpha_command");
	{
		pushMCheckpoint(acc);
		if (parse_nonalpha(acc)) {
			{
				mparseStar(acc, \ -> {
					parse_nonalpha(acc)
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

parse_nonalpha(acc : MoParseAcc) -> bool {
	// println("parse_nonalpha");
	matchString(acc, ".") || (matchString(acc, ",") || (matchString(acc, ";") || (matchString(acc, ":") || (matchString(acc, "!") || (matchString(acc, "?") || (matchString(acc, "+") || (matchString(acc, "-") || (matchString(acc, "*") || (matchString(acc, "/") || (matchString(acc, "&") || (matchString(acc, "^") || (matchString(acc, "%") || (matchString(acc, "$") || (matchString(acc, "#") || (matchString(acc, "@") || (matchString(acc, "~") || (matchString(acc, "|") || (matchString(acc, "=") || (matchString(acc, "[") || (matchString(acc, "]") || (matchString(acc, "{") || (matchString(acc, "}") || (matchString(acc, "(") || (matchString(acc, ")") || matchString(acc, "\\")))))))))))))))))))))))))
}

parse_newline(acc : MoParseAcc) -> bool {
	// println("parse_newline");
	matchString(acc, "\n") || matchString(acc, "\\r\\n")
}

parse_math(acc : MoParseAcc) -> bool {
	// println("parse_math");
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (parse_commands(acc) || parse_arg(acc)) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				acc.starti ::= acc.i;
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if (if (if (if (matchString(acc, "\\")) {
					restoreMCheckpoint(acc)
				} else {
					{
						restoreMCheckpoint(acc);
						true
					}
				}) {
					{
						pushMCheckpoint(acc);
						if (if (matchString(acc, "_")) {
							restoreMCheckpoint(acc)
						} else {
							{
								restoreMCheckpoint(acc);
								true
							}
						}) {
							{
								pushMCheckpoint(acc);
								if (if (matchString(acc, "^")) {
									restoreMCheckpoint(acc)
								} else {
									{
										restoreMCheckpoint(acc);
										true
									}
								}) {
									{
										pushMCheckpoint(acc);
										if (if (matchString(acc, "$")) {
											restoreMCheckpoint(acc)
										} else {
											{
												restoreMCheckpoint(acc);
												true
											}
										}) {
											{
												pushMCheckpoint(acc);
												if (if (matchString(acc, "%")) {
													restoreMCheckpoint(acc)
												} else {
													{
														restoreMCheckpoint(acc);
														true
													}
												}) {
													{
														pushMCheckpoint(acc);
														if (if (matchString(acc, "{")) {
															restoreMCheckpoint(acc)
														} else {
															{
																restoreMCheckpoint(acc);
																true
															}
														}) {
															{
																pushMCheckpoint(acc);
																if (if (matchString(acc, "[")) {
																	restoreMCheckpoint(acc)
																} else {
																	{
																		restoreMCheckpoint(acc);
																		true
																	}
																}) {
																	{
																		pushMCheckpoint(acc);
																		if (((if (matchString(acc, "}")) {
																			restoreMCheckpoint(acc)
																		} else {
																			{
																				restoreMCheckpoint(acc);
																				true
																			}
																		}) && parse_anychar(acc))) {
																			discardMCheckpoint(acc)
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																} else {
																	restoreMCheckpoint(acc)
																}
															}
														} else {
															restoreMCheckpoint(acc)
														}
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					{
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (if (matchString(acc, "\\")) {
									restoreMCheckpoint(acc)
								} else {
									{
										restoreMCheckpoint(acc);
										true
									}
								}) {
									{
										pushMCheckpoint(acc);
										if (if (matchString(acc, "_")) {
											restoreMCheckpoint(acc)
										} else {
											{
												restoreMCheckpoint(acc);
												true
											}
										}) {
											{
												pushMCheckpoint(acc);
												if (if (matchString(acc, "^")) {
													restoreMCheckpoint(acc)
												} else {
													{
														restoreMCheckpoint(acc);
														true
													}
												}) {
													{
														pushMCheckpoint(acc);
														if (if (matchString(acc, "$")) {
															restoreMCheckpoint(acc)
														} else {
															{
																restoreMCheckpoint(acc);
																true
															}
														}) {
															{
																pushMCheckpoint(acc);
																if (if (matchString(acc, "%")) {
																	restoreMCheckpoint(acc)
																} else {
																	{
																		restoreMCheckpoint(acc);
																		true
																	}
																}) {
																	{
																		pushMCheckpoint(acc);
																		if (if (matchString(acc, "{")) {
																			restoreMCheckpoint(acc)
																		} else {
																			{
																				restoreMCheckpoint(acc);
																				true
																			}
																		}) {
																			{
																				pushMCheckpoint(acc);
																				if (if (matchString(acc, "[")) {
																					restoreMCheckpoint(acc)
																				} else {
																					{
																						restoreMCheckpoint(acc);
																						true
																					}
																				}) {
																					{
																						pushMCheckpoint(acc);
																						if (((if (matchString(acc, "}")) {
																							restoreMCheckpoint(acc)
																						} else {
																							{
																								restoreMCheckpoint(acc);
																								true
																							}
																						}) && parse_anychar(acc))) {
																							discardMCheckpoint(acc)
																						} else {
																							restoreMCheckpoint(acc)
																						}
																					}
																				} else {
																					restoreMCheckpoint(acc)
																				}
																			}
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																} else {
																	restoreMCheckpoint(acc)
																}
															}
														} else {
															restoreMCheckpoint(acc)
														}
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
				} else {
					false
				}) {
					{
						moconstruct(acc, "Tex_Text", 1);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if ((matchString(acc, "_") && parse_math(acc))) {
							{
								moconstruct(acc, "Tex_Subscript", 2);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								if (if ((matchString(acc, "^") && parse_math(acc))) {
									{
										moconstruct(acc, "Tex_Superscript", 2);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}
					}
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

parse_latexes(acc : MoParseAcc) -> bool {
	// println("parse_latexes");
	{
		pushMCheckpoint(acc);
		if ({env = acc.env;pushPEnv(env, makeList()); true}) {
			{
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						if ((parse_latex_segment(acc) && ({env = acc.env;pcons(env); true}))) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				if ({env = acc.env;pfn1(env, list2array); true}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

parse_latex_segment(acc : MoParseAcc) -> bool {
	// println("parse_latex_segment");
	{
		pushMCheckpoint(acc);
		if (parse_commands(acc)) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if ((matchString(acc, "$$") && ((parse_ws(acc) && ({env = acc.env;pushPEnv(env, makeList()); true}))))) {
					{
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								if ((parse_math(acc) && ({env = acc.env;pcons(env); true}))) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						if ((({env = acc.env;pfn1(env, list2array); true}) && ((matchString(acc, "$$") && parse_ws(acc))))) {
							{
								moconstruct(acc, "Tex_DisplayMath", 1);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						if (if ((matchString(acc, "$") && ((parse_ws(acc) && ({env = acc.env;pushPEnv(env, makeList()); true}))))) {
							{
								mparseStar(acc, \ -> {
									{
										pushMCheckpoint(acc);
										if ((parse_math(acc) && ({env = acc.env;pcons(env); true}))) {
											discardMCheckpoint(acc)
										} else {
											restoreMCheckpoint(acc)
										}
									}
								});
								if ((({env = acc.env;pfn1(env, list2array); true}) && ((matchString(acc, "$") && parse_ws(acc))))) {
									{
										moconstruct(acc, "Tex_InlineMath", 1);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							{
								pushMCheckpoint(acc);
								acc.starti ::= acc.i;
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (if (if (if (if (if (matchString(acc, "\\")) {
									restoreMCheckpoint(acc)
								} else {
									{
										restoreMCheckpoint(acc);
										true
									}
								}) {
									{
										pushMCheckpoint(acc);
										if (if (matchString(acc, "$")) {
											restoreMCheckpoint(acc)
										} else {
											{
												restoreMCheckpoint(acc);
												true
											}
										}) {
											{
												pushMCheckpoint(acc);
												if (if (matchString(acc, "%")) {
													restoreMCheckpoint(acc)
												} else {
													{
														restoreMCheckpoint(acc);
														true
													}
												}) {
													{
														pushMCheckpoint(acc);
														if (((if (matchString(acc, "}")) {
															restoreMCheckpoint(acc)
														} else {
															{
																restoreMCheckpoint(acc);
																true
															}
														}) && parse_anychar(acc))) {
															discardMCheckpoint(acc)
														} else {
															restoreMCheckpoint(acc)
														}
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									{
										mparseStar(acc, \ -> {
											{
												pushMCheckpoint(acc);
												pushMCheckpoint(acc);
												if (if (matchString(acc, "\\")) {
													restoreMCheckpoint(acc)
												} else {
													{
														restoreMCheckpoint(acc);
														true
													}
												}) {
													{
														pushMCheckpoint(acc);
														if (if (matchString(acc, "$")) {
															restoreMCheckpoint(acc)
														} else {
															{
																restoreMCheckpoint(acc);
																true
															}
														}) {
															{
																pushMCheckpoint(acc);
																if (if (matchString(acc, "%")) {
																	restoreMCheckpoint(acc)
																} else {
																	{
																		restoreMCheckpoint(acc);
																		true
																	}
																}) {
																	{
																		pushMCheckpoint(acc);
																		if (((if (matchString(acc, "}")) {
																			restoreMCheckpoint(acc)
																		} else {
																			{
																				restoreMCheckpoint(acc);
																				true
																			}
																		}) && parse_anychar(acc))) {
																			discardMCheckpoint(acc)
																		} else {
																			restoreMCheckpoint(acc)
																		}
																	}
																} else {
																	restoreMCheckpoint(acc)
																}
															}
														} else {
															restoreMCheckpoint(acc)
														}
													}
												} else {
													restoreMCheckpoint(acc)
												}
											}
										});
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
								} else {
									false
								}) {
									{
										moconstruct(acc, "Tex_Text", 1);
										discardMCheckpoint(acc)
									}
								} else {
									restoreMCheckpoint(acc)
								}) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						}
					}
				}
			}
		}
	}
}

parse_latex(acc : MoParseAcc) -> bool {
	// println("parse_latex");
	{
		pushMCheckpoint(acc);
		if (parse_latexes(acc)) {
			{
				moconstruct(acc, "Tex_Document", 1);
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

parse_id(acc : MoParseAcc) -> bool {
	// println("parse_id");
	{
		pushMCheckpoint(acc);
		acc.starti ::= acc.i;
		if (((if (parse_bid(acc)) {
			pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && parse_ws(acc))) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

parse_commands(acc : MoParseAcc) -> bool {
	// println("parse_commands");
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if (matchString(acc, "\\")) {
			{
				pushMCheckpoint(acc);
				pushMCheckpoint(acc);
				if (if (if ((matchString(acc, "begin{") && ((parse_ws(acc) && ((parse_id(acc) && ((matchString(acc, "}") && ((parse_ws(acc) && ({env = acc.env;pushPEnv(env, makeList()); true}))))))))))) {
					{
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								if ((parse_arg(acc) && ({env = acc.env;pcons(env); true}))) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						if ((({env = acc.env;pfn1(env, list2array); true}) && ((parse_latexes(acc) && ((matchString(acc, "\\") && ((matchString(acc, "end{") && ((parse_ws(acc) && ((parse_id(acc) && ((matchString(acc, "}") && parse_ws(acc))))))))))))))) {
							{
								moconstruct(acc, "Tex_Environment", 4);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (if (if (matchString(acc, "end")) {
							restoreMCheckpoint(acc)
						} else {
							{
								restoreMCheckpoint(acc);
								true
							}
						}) {
							{
								acc.starti ::= acc.i;
								if (((if (parse_command(acc)) {
									pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti))
								} else {
									false
								}) && ((parse_ws(acc) && ({env = acc.env;pushPEnv(env, makeList()); true}))))) {
									{
										mparseStar(acc, \ -> {
											{
												pushMCheckpoint(acc);
												if ((parse_arg(acc) && ({env = acc.env;pcons(env); true}))) {
													discardMCheckpoint(acc)
												} else {
													restoreMCheckpoint(acc)
												}
											}
										});
										if ({env = acc.env;pfn1(env, list2array); true}) {
											{
												moconstruct(acc, "Tex_Command", 2);
												discardMCheckpoint(acc)
											}
										} else {
											restoreMCheckpoint(acc)
										}
									}
								} else {
									restoreMCheckpoint(acc)
								}
							}
						} else {
							restoreMCheckpoint(acc)
						}) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if (matchString(acc, "%")) {
					{
						acc.starti ::= acc.i;
						mparseStar(acc, \ -> {
							{
								pushMCheckpoint(acc);
								pushMCheckpoint(acc);
								if (((if (parse_newline(acc)) {
									restoreMCheckpoint(acc)
								} else {
									{
										restoreMCheckpoint(acc);
										true
									}
								}) && parse_anychar(acc))) {
									discardMCheckpoint(acc)
								} else {
									restoreMCheckpoint(acc)
								}
							}
						});
						pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti));
						if ((parse_newline(acc) && parse_ws(acc))) {
							{
								moconstruct(acc, "Tex_Comment", 1);
								discardMCheckpoint(acc)
							}
						} else {
							restoreMCheckpoint(acc)
						}
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}
	}
}

parse_command(acc : MoParseAcc) -> bool {
	// println("parse_command");
	{
		pushMCheckpoint(acc);
		if ((if (matchRange(acc, 97, 122) || matchRange(acc, 65, 90)) {
			{
				mparseStar(acc, \ -> {
					matchRange(acc, 97, 122) || matchRange(acc, 65, 90)
				});
				true
			}
		} else {
			false
		}) || parse_nonalpha_command(acc)) {
			discardMCheckpoint(acc)
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

parse_bid(acc : MoParseAcc) -> bool {
	// println("parse_bid");
	{
		pushMCheckpoint(acc);
		if (matchRange(acc, 97, 122) || (matchRange(acc, 65, 90) || matchString(acc, "_"))) {
			{
				mparseStar(acc, \ -> {
					parse_alnum(acc)
				});
				discardMCheckpoint(acc)
			}
		} else {
			restoreMCheckpoint(acc)
		}
	}
}

parse_arg(acc : MoParseAcc) -> bool {
	// println("parse_arg");
	{
		pushMCheckpoint(acc);
		pushMCheckpoint(acc);
		if (if ((matchString(acc, "[") && parse_ws(acc))) {
			{
				acc.starti ::= acc.i;
				mparseStar(acc, \ -> {
					{
						pushMCheckpoint(acc);
						pushMCheckpoint(acc);
						if (((if (matchString(acc, "]")) {
							restoreMCheckpoint(acc)
						} else {
							{
								restoreMCheckpoint(acc);
								true
							}
						}) && parse_anychar(acc))) {
							discardMCheckpoint(acc)
						} else {
							restoreMCheckpoint(acc)
						}
					}
				});
				pushPEnv(acc.env, substring(acc.input, acc.starti, acc.i - acc.starti));
				if ((matchString(acc, "]") && parse_ws(acc))) {
					{
						moconstruct(acc, "Tex_OptionalArg", 1);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}
			}
		} else {
			restoreMCheckpoint(acc)
		}) {
			discardMCheckpoint(acc)
		} else {
			{
				pushMCheckpoint(acc);
				if (if ((matchString(acc, "{") && ((parse_ws(acc) && ((parse_latexes(acc) && ((matchString(acc, "}") && parse_ws(acc))))))))) {
					{
						moconstruct(acc, "Tex_Arg", 1);
						discardMCheckpoint(acc)
					}
				} else {
					restoreMCheckpoint(acc)
				}) {
					discardMCheckpoint(acc)
				} else {
					restoreMCheckpoint(acc)
				}
			}
		}
	}
}

parse_anychar(acc : MoParseAcc) -> bool {
	// println("parse_anychar");
	matchRange(acc, 0, 65535)
}

parse_alnum(acc : MoParseAcc) -> bool {
	// println("parse_alnum");
	matchRange(acc, 97, 122) || (matchRange(acc, 65, 90) || (matchString(acc, "_") || matchRange(acc, 48, 57)))
}

parse_latex_compiled(acc : MoParseAcc) -> bool {
	// println("parse_latex_compiled");
	parse_latex(acc)
}

















