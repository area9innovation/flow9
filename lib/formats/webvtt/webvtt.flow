import lingo/pegcode/parsic;
import lingo/pegaction;
import formats/webvtt/webvtt_types;
import formats/webvtt/webvtt_pegop;

// Web Video Text Tracks format, see https://www.w3.org/TR/webvtt1/ for specs

export {
	parseWebVTT(content : string) -> WebVTT;
	isWebVTT(content : string) -> bool;
}

parseWebVTT(content : string) -> WebVTT {
	vttPegActions = pegActions([
		Pair("concatLines", \xs : [flow] -> {
			x0 = cast(xs[0] : flow -> [string]);
			fold(x0, "", \acc, s -> acc + s)
		}),
	]);
	untriple(
		parsic3(pegOps4Webvtt, content, vttPegActions, VTT("", [])),
		\vtt, __, err -> {
			if (err != "") {
				println(err);
				WebVTT("", [], [], []);
			} else untriple(
				fold(vtt.blocks, Triple([/*regions*/], [/*styles*/], [/*cues*/]), \acc, r -> switch (r : VTTBlock) {
					CueRegion(__) : Triple(acc with first = concat(acc.first, [r]));
					CueStyle(__) : Triple(acc with second = concat(acc.second, [r]));
					CueBlock(__, __, __, __, __) : Triple(acc with third = concat(acc.third, [r]));
					default : acc;
				}),
				\regions, styles, cues -> WebVTT(vtt.caption, regions, styles, cues)
			)
		}
	)
}

isWebVTT(content : string) -> bool {
	startsWith(content, "WEBVTT")
}

