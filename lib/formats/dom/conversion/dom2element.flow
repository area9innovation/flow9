import formats/dom/conversion/svg2element;
import formats/dom/conversion/event_handler2elementevent;
import string;

export {
	dom2element(dom : EDom) -> Element;
}

dom2element(dom : EDom) -> Element {
	todo = \tag, html, children, style, attributes, events -> {
		println("Not fully implemented yet: " + tag);
		EGeneric(tag, html, map(children, dom2element), style, [], attributes, events);
	}
	switch (dom) {
		EHtml(head, body, style, attributes, events): {
			EGeneric(
				"html",
				"",
				[
					dom2element(head),
					dom2element(body),
				],
				style,
				[],
				attributes,
				map(events, domEvent2ElementEvent)
			);
		}
		EHead(children, style, attributes, events): {
			EGeneric(
				"head", "", map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		ETitle(html, attributes, events): {
			EGeneric(
				"title", html, [], emptyCssValues(), [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		ELink(href, crossOrigin, rel, rev, as, media, hreflang, type, referrerPolicy, attributes, events): {
			todo("link", "", [], emptyCssValues(), emptyGlobalAttributes(), map(events, domEvent2ElementEvent));
		}
		EScript(html, src, type, async, defer, crossorigin, integrity, attributes, events): {
			todo("script", html, [], emptyCssValues(), emptyGlobalAttributes(), map(events, domEvent2ElementEvent));
		}
		EBody(children, style, attributes, events): {
			EGeneric(
				"body", "", map(children, dom2element), style, [], attributes, map(events, bodyEvent2ElementEvent)
			);
		}
		EP(html, children, style, attributes, events): {
			EGeneric(
				"p", html, map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		EDiv(children, style, attributes, events): {
			EGeneric(
				"div", "", map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		ESpan(html, children, style, attributes, events): {
			EGeneric(
				"span", html, map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		ESvg(zoomAndPan, transform, x, y, width, height, children, style, attributes, events): {
			svg2element(dom);
		}
		EA(href, target, download, ping, rel, rev, hreflang, type, referrerPolicy, children, style, attributes, events): {
			todo("a", "", [], style, attributes, map(events, domEvent2ElementEvent));
		}
		EImg(src, alt, srcset, sizes, crossOrigin, decoding, usemap, width, height, referrerPolicy, longdesc, style, attributes, events): {
			todo("img", "", [], style, attributes, map(events, domEvent2ElementEvent));
		}
		EIFrame(src, srcdoc, name, sandbox, allowFullscreen, allowPaymentRequest, allowUseMedia, width, height, referrerPolicy, style, attributes, events): {
			EGeneric(
				"iframe",
				"",
				[],
				style,
				concatA([
					if (strlen(src) > 0) [ElementAttribute("src", src)] else [],
					if (strlen(srcdoc) > 0) [ElementAttribute("srcdoc", srcdoc)] else [],
					if (strlen(name) > 0) [ElementAttribute("name", name)] else [],
					if (strlen(sandbox) > 0) [ElementAttribute("sandbox", sandbox)] else [],
					[
						ElementAttribute("allowFullscreen", toString(allowFullscreen)),
						ElementAttribute("allowPaymentRequest", toString(allowPaymentRequest)),
						ElementAttribute("allowUseMedia", toString(allowUseMedia))
					],
					if (strlen(width) > 0) [ElementAttribute("width", width)] else [],
					if (strlen(height) > 0) [ElementAttribute("height", height)] else [],
					if (strlen(referrerPolicy) > 0) [ElementAttribute("referrerPolicy", referrerPolicy)] else [],
				]),
				attributes,
				map(events, domEvent2ElementEvent)
			);
		}
		EVideo(src, crossorigin, poster, preload, autoplay, loop, muted, controls, disableRemotePlayback, width, height, style, attributes, events): {
			todo("video", "", [], style, attributes, map(events, domEvent2ElementEvent));
		}
		ETable(children, style, attributes, events): {
			todo("table", "", children, style, attributes, map(events, domEvent2ElementEvent));
		}
		ETBody(children, style, attributes, events): {
			todo("tbody", "", children, style, attributes, map(events, domEvent2ElementEvent));
		}
		ETHead(children, style, attributes, events): {
			todo("thead", "", children, style, attributes, map(events, domEvent2ElementEvent));
		}
		ETr(children, style, attributes, events): {
			todo("tr", "", children, style, attributes, map(events, domEvent2ElementEvent));
		}
		ETd(children, style, attributes, events): {
			todo("td", "", children, style, attributes, map(events, domEvent2ElementEvent));
		}
		ETh(children, style, attributes, events): {
			todo("th", "", children, style, attributes, map(events, domEvent2ElementEvent));
		}
		EInput(style, attributes, events): {
			todo("input", "", [], style, attributes, map(events, domEvent2ElementEvent));
		}
		EButton(disabled, children, style, attributes, events): {
			EGeneric("button", "", map(children, dom2element), style, 
				if (disabled) [ElementAttribute("disabled", "true")] else [], 
				attributes, map(events, domEvent2ElementEvent)
			);
		}
		ETextArea(html, style, attributes, events): {
			todo("textarea", html, [], style, attributes, map(events, domEvent2ElementEvent));
		}
		ECanvas(style, attributes, events): {
			todo("canvas", "", [], style, attributes, map(events, domEvent2ElementEvent));
		}
		EI(html, children, style, attributes, events): {
			EGeneric(
				"i", html, map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		H1Element(children, style, attributes, events): {
			EGeneric(
				"h1", "", map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		H2Element(children, style, attributes, events): {
			EGeneric(
				"h2", "", map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		H3Element(children, style, attributes, events): {
			EGeneric(
				"h3", "", map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		H4Element(children, style, attributes, events): {
			EGeneric(
				"h4", "", map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		EDialog(children, style, attributes, events): {
			EGeneric(
				"dialog", "", map(children, dom2element), style, [], attributes, map(events, domEvent2ElementEvent)
			);
		}
		ERawText(t): {
			EGeneric(
				"", t, [], emptyCssValues(), [], emptyGlobalAttributes(), []
			)
		}
		ERaw(es): {
			EGeneric(
				"", "", map(es, dom2element), emptyCssValues(), [], emptyGlobalAttributes(), []
			)
		}
	}
}
