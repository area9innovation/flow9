import formats/dom/css;
import string;

export {
	cssStyle2string(css : CssValues) -> string;

	CssLength2string(c : CssLength) -> string;
	CssPercentage2string(c : CssPercent) -> string;
	CssColor2string(c : CssColor) -> string;
}

cssStyle2string(css : CssValues) -> string {
	strGlue(concatA(
		[
			CssBox2string(css.box),
			CssDisplay2string(css.display),
			CssContainingBlock2string(css.containingBlock),
			CssVisualEffects2string(css.visualEffects),
			CssColors2string(css.colors),
			CssFonts2string(css.fonts),
			CssText2string(css.text)
		]
	), ";");
}

CssBox2string(b : CssBox) -> [string] {
	concatA([
		CssMargin2string(b.margin),
		CssBorder2string(b.border),
		CssPadding2string(b.padding)
	])
}

CssMargin2string(m : CssMargin) -> [string] {
	expand = \t : string, w : CssMarginWidth -> {
		switch (w : CssMarginWidth) {
			CssLength(value, unit): if (value != 0.0) [t + ":" + CssLength2string(w)] else [];
			CssPercent(value): [t + ":" + CssPercentage2string(w)];
			CssAuto(): [t + ":auto"];
			CssInheritParent(): [t +":inherit"];
		}
	}
	concatA([
		expand("margin-top", m.top),
		expand("margin-right", m.right),
		expand("margin-bottom", m.bottom),
		expand("margin-left", m.left),

	])
}

expandCssBorder(t : string, p : CssBorderProperty) -> [string] {
	if (p.style == "") []
	else {
		[
			t + "-width:" + CssLength2string(p.width),
			switch (p.color) {
				CssColor(__, __, __): t + "-color:" + CssColor2string(p.color);
				CssTransparent(): t + "-color:transparent";
				CssInheritParent(): t + "-color:inherit";
			},
			t + "-style:" + p.style
		]
	}
}

CssBorder2string(b : CssBorder) -> [string] {
	concatA([
		expandCssBorder("border-top", b.top),
		expandCssBorder("border-right", b.right),
		expandCssBorder("border-bottom", b.bottom),
		expandCssBorder("border-left", b.left),
	])
}

CssPadding2string(p : CssPadding) -> [string] {
	expand = \t : string, w : CssPaddingWidth -> {
		switch (w : CssPaddingWidth) {
			CssLength(value, unit): if (value != 0.0) [t + ":" + CssLength2string(w)] else [];
			CssPercent(value): [t + ":" + CssPercentage2string(w)];
			CssInheritParent(): [t +":inherit"];
		}
	}
	concatA([
		expand("padding-top", p.top),
		expand("padding-right", p.right),
		expand("padding-bottom", p.bottom),
		expand("padding-left", p.left),
	])
}

CssDisplay2string(d : CssDisplay) -> [string] {
	concatA([
		if (d.display == "") [] else ["display:" + d.display],
		{
			p = d.position;
			switch (p) {
				CssPositionStatic(float): CssFloat2string(float);
				CssPositionRelative(offset, float): {
					concat3(
						["position:relative"],
						CssBoxOffsets2string(offset),
						CssFloat2string(float)
					)
				}
				CssPositionAbsolute(offset): {
					concat(
						["position:absolute"],
						CssBoxOffsets2string(offset),
					)
				}
				CssPositionFixed(offset): {
					concat(
						["position:fixed"],
						CssBoxOffsets2string(offset),
					)
				}
				CssInheritParent(): ["position:inherit"];
			}
		},
		switch (d.clear) {
			CssClearLeft(): ["clear:left"];
			CssClearRight(): ["clear:right"];
			CssClearNone(): ["clear:none"];
			CssClearBoth(): ["clear:both"];
			CssInheritParent(): ["clear:inherit"];
			CssInitial(): [];
		},
		switch (d.zIndex) {
			CssInteger(value): if (value == -1) [] else ["z-index:" + i2s(value)];
			CssAuto(): ["z-index:auto"];
			CssInheritParent(): ["z-index:inherit"];
		},
		if (d.direction == "") [] else ["direction:" + d.direction]
	])
}

CssContainingBlock2string(c : CssContainingBlock) -> [string] {
	len = \t : string, w : CssContainingLength -> {
		switch (w) {
			CssLength(value, unit): if (value == 0.0) [] else [t + ":" + CssLength2string(w)];
			CssPercent(value): [t + ":" + CssPercentage2string(w)];
			CssAuto(): [t + ":auto"];
			CssInheritParent(): [t + ":inherit"];
		}
	}
	concatA([
		len("width", c.width),
		len("height", c.height),
		len("min-width", c.minWidth),
		len("max-width", c.maxWidth),
		len("min-height", c.minHeight),
		len("max-height", c.maxHeight),
		{
			ll = c.lineHeight;
			switch (ll) {
				CssNormal(): ["line-height:normal"];
				CssNumber(value): if (value == 0.0) [] else [ "line-height:" + d2s(value) ];
				CssLength(value, unit): if (value == 0.0) [] else [ "line-height:" + CssLength2string(ll) ];
				CssPercent(value): [ "line-height:" + CssPercentage2string(ll) ];
				CssInheritParent(): [ "line-height:inherit" ];
			}
		},
		{
			align = c.verticalAlign;
			switch (align) {
				CssVerticalAlignBaseline(): [];
				CssVerticalAlignSub(): ["vertical-align:sub"];
				CssVerticalAlignSuper(): ["vertical-align:super"];
				CssVerticalAlignTop(): ["vertical-align:top"];
				CssVerticalAlignTextTop(): ["vertical-align:texttop"];
				CssVerticalAlignMiddle(): ["vertical-align:middle"];
				CssVerticalAlignBottom(): ["vertical-align:bottom"];
				CssVerticalAlignTextBottom(): ["vertical-align:textbottom"];
				CssPercent(value): ["vertical-align:" + CssPercentage2string(align)];
				CssLength(value, unit): ["vertical-align:" + CssLength2string(align)];
				CssInheritParent(): ["vertical-align:inherit"];
				CssInitial(): [];
			}
		}
	])
}

CssVisualEffects2string(e : CssVisualEffects) -> [string] {
	concatA([
		switch (e.overflow) {
			CssOverflowVisible(): ["overflow:visible"];
			CssOverflowHidden(): ["overflow:hidden"];
			CssOverflowScroll(): ["overflow:scroll"];
			CssAuto(): ["overflow:auto"];
			CssInheritParent(): ["overflow:inherit"];
			CssInitial(): [];
		},
		switch (e.clip) {
			CssClipRect(top, right, bottom, left): ["clip:rect("
				+ CssLength2string(top) + ","
				+ CssLength2string(right) + ","
				+ CssLength2string(bottom) + ","
				+ CssLength2string(left) + ")"
			];
			CssAuto(): ["clip:auto"];
			CssInheritParent(): ["clip:inherit"];
			CssInitial(): [];
		},
		switch (e.visibility) {
			CssVisible(): ["visibility:visible"];
			CssHidden(): ["visibility:hidden"];
			CssCollapse(): ["visibility:collapse"];
			CssInheritParent(): ["visibility:inherit"];
			CssInitial(): [];
		}
	])
}

CssColors2string(c : CssColors) -> [string] {
	col = c.color;
	switch (col) {
		CssInitial(): [];
		CssColor(): ["color:" + CssColor2string(col)];
	}
}

CssFonts2string(f : CssFonts) -> [string] {
	s = f.fontSize;
	concatA([
		if (f.fontFamily != "") ["font-family:" + f.fontFamily] else [],
		switch (s) {
			CssFontXXSmall(): ["font-size:xx-small"];
			CssFontXSmall(): ["font-size:x-small"];
			CssFontSmall(): ["font-size:small"];
			CssFontMedium(): ["font-size:medium"];
			CssFontLarge(): ["font-size:large"];
			CssFontXLarge(): ["font-size:x-large"];
			CssFontXXLarge(): ["font-size:xx-large"];
			CssFontLarger(): ["font-size:larger"];
			CssFontSmaller(): ["font-size:smaller"];
			CssLength(le, u): ["font-size:" + CssLength2string(s)];
			CssPercent(value): ["font-size:" + CssPercentage2string(s)];
			CssInheritParent(): ["font-size:inherit"];
			CssInitial(): [];
		}
	])
}

CssText2string(t : CssText) -> [string] {
	l = t.letterSpacing;
	w = t.whiteSpace;
	concatA([
		switch (l) {
			CssNormal(): ["letter-spacing:normal"];
			CssLength(le, u): ["letter-spacing:" + CssLength2string(l)];
			CssInheritParent(): ["letter-spacing:inherit"];
			CssInitial(): [];
		},
		switch (w) {
			CssWhiteSpaceNormal(): ["white-space:normal"];
			CssWhiteSpacePre(): ["white-space:pre"];
			CssWhiteSpaceNowrap(): ["white-space:nowrap"];
			CssWhiteSpacePreWrap(): ["white-space:pre-wrap"];
			CssWhiteSpacePreLine(): ["white-space:pre-line"];
			CssInheritParent(): ["white-space:inherit"];
			CssInitial(): [];
		}
	]);
}

CssLength2string(c : CssLength) -> string {
	d2s(c.value) + switch (c.unit) {
		CssUnitEm(): "em";
		CssUnitEx(): "ex";
		CssUnitIn(): "in";
		CssUnitCm(): "cm";
		CssUnitPt(): "pt";
		CssUnitPc(): "pc";
		CssUnitPx(): "px";
	}
}

CssPercentage2string(c : CssPercent) -> string {
	d2s(c.value) + "%";
}

CssColor2string(c : CssColor) -> string {
	switch (c) {
		CssColorRgb(redc, greenc, bluec): "rgb(" + i2s(redc) + "," + i2s(greenc) + "," + i2s(bluec) + ")";
		CssColorRgba(redc, greenc, bluec, opacity): "rgba(" + i2s(redc) + "," + i2s(greenc) + "," + i2s(bluec) + "," + d2s(opacity) + ")";
	}
}

CssFloat2string(f : CssFloat) -> [string] {
	switch (f) {
		CssFloatNone(): [];
		CssFloatLeft(): ["float:left"];
		CssFloatRight(): ["float:right"];
		CssInheritParent(): ["float:inherit"];
	}
}

CssBoxOffsets2string(c : CssBoxOffsets) -> [string] {
	len = \t, l : CssBoxLength -> {
		switch (l) {
			CssLength(value, unit): if (value == 0.0) [] else [t + ":" + CssLength2string(l)];
			CssPercent(value): [t + ":" + CssPercentage2string(l)];
			CssAuto(): [t + ":auto"];
			CssInheritParent(): [t + ":inherit"];
		}
	}
	concatA([
		len("top", c.top),
		len("right", c.right),
		len("bottom", c.bottom),
		len("left", c.left),
	])
}