export {
	// https://www.w3.org/TR/CSS2/

	// TODO: Transforms: https://www.w3.org/TR/css-transforms-1/
	// TODO: Animation: https://www.w3.org/TR/css-animations-1/
	// TODO: Review other CSS standards, which refines and extends CSS2.

	CssValues(
		// Margins, border, padding
		box : CssBox,
		// Visual formatting: where to display
		display : CssDisplay,
		// Available area
		containingBlock : CssContainingBlock,
		// Visual effects: overflow, clip, visibility
		visualEffects : CssVisualEffects,

		// TODO: 
		// Those with * are done. The remaining properties are not done yet

		// Generated content, numbering and lists https://www.w3.org/TR/CSS2/generate.html#generated-text
		//   content, quotes, counter-reset, counter-increment, list-style-type, list-style-image, list-style-position, list-style

		// Paged media: https://www.w3.org/TR/CSS2/page.html#the-page
		//   page-break-before, page-break-after, page-break-inside, orphans, widows

		// Colors and backgrounds: https://www.w3.org/TR/CSS2/colors.html#q14.0
		//   color*, background-color, background-image, background-repeat, background-attachment, background-position
		colors : CssColors,

		// Fonts: https://www.w3.org/TR/CSS2/fonts.html#q15.0
		//   font-family*, font-style, font-variant, font-weight, font-size*
		fonts : CssFonts,

		// Text: https://www.w3.org/TR/CSS2/text.html#q16.0
		//   text-indent, text-align, text-decoration, letter-spacing*, word-spacing, text-transform, white-space*
		text : CssText,

		// Tables: https://www.w3.org/TR/CSS2/tables.html#q17.0
		// caption-side, table-layout, border-collapse, border-spacing, empty-cells

		// User interface: https://www.w3.org/TR/CSS2/ui.html#q18.0
		// cursor, outline-width, outline-style, outline-color
	);

	//
	// Box model: https://www.w3.org/TR/CSS2/box.html#box-model
	//
	CssBox(
		margin : CssMargin,
		border : CssBorder,
		padding : CssPadding,
	);

		CssMargin(
			top : CssMarginWidth,
			right : CssMarginWidth,
			bottom : CssMarginWidth,
			left : CssMarginWidth
		);
			CssMarginWidth ::= CssAuto, CssLength, CssPercent, CssInheritParent;

		CssBorder(
			top : CssBorderProperty,
			right : CssBorderProperty,
			bottom : CssBorderProperty,
			left : CssBorderProperty
		);
			CssBorderProperty(
				width : CssLength,  // We ignore thin, medium, thick we ignore
				color : CssBorderColor,
				style : string, // "", "none", "hidden", "dotted", "dashed", "solid", "double", ...
			);
				CssBorderColor ::= CssInheritParent, CssColor, CssTransparent;

		CssPadding(
			top : CssPaddingWidth,
			right : CssPaddingWidth,
			bottom : CssPaddingWidth,
			left : CssPaddingWidth
		);

			CssPaddingWidth ::= CssInheritParent, CssLength, CssPercent;

	//
	// Visual formatting model: https://www.w3.org/TR/CSS2/visuren.html#q9.0
	//

	CssDisplay(
		// What display kind? TODO: Should we make union? inline, block, list-item, ...
		display : string,
		// Where to place this thing (or have it floating)
		position : CssPosition,
		// How to clear floating elements
		clear : CssClear,
		// Z order
		zIndex : CssZIndex,
		// Specifies the text direction for the content in an element. "ltr", "rtl", "auto"
		direction : string,
	);

		CssPosition ::= CssInheritParent, CssPositionStatic, CssPositionRelative, CssPositionAbsolute, CssPositionFixed;

		// Automatic placement, or float
		CssPositionStatic(float : CssFloat);

		// Move according to the normal position. Also can float
		CssPositionRelative(offset : CssBoxOffsets, float : CssFloat);

		// Place at the given place in the document (will scroll)
		CssPositionAbsolute(offset : CssBoxOffsets);

		// Place at the given place on the screen (and will not scroll)
		CssPositionFixed(offset : CssBoxOffsets);

			CssBoxOffsets(
				top : CssBoxLength,
				right : CssBoxLength,
				bottom : CssBoxLength,
				left : CssBoxLength,
			);

				CssBoxLength ::= CssLength, CssPercent, CssAuto, CssInheritParent;

		// For floating elements. Where to place them
		CssFloat ::= CssFloatNone, CssFloatLeft, CssFloatRight, CssInheritParent;

			CssFloatNone();
			CssFloatLeft();
			CssFloatRight();

		// Control the flow next to floats
		CssClear ::= CssInitial, CssClearLeft, CssClearRight, CssClearNone, CssClearBoth, CssInheritParent;

			CssClearLeft();
			CssClearRight();
			CssClearNone();
			CssClearBoth();

		CssZIndex ::= CssAuto, CssInteger, CssInheritParent;

	//
	// Containing block: https://www.w3.org/TR/CSS2/visudet.html#q10.0
	//

	CssContainingBlock(
		width : CssContainingLength,
		height : CssContainingLength,
		minWidth : CssContainingLength,
		maxWidth : CssContainingLength,
		minHeight : CssContainingLength,
		maxHeight : CssContainingLength,
		lineHeight : CssLineHeight,
		verticalAlign : CssVerticalAlign,
	);
		CssContainingLength ::= CssAuto, CssLength, CssPercent, CssInheritParent;

		CssLineHeight ::= CssNormal, CssNumber, CssLength, CssPercent, CssInheritParent;

		CssVerticalAlign ::= CssVerticalAlignBaseline, CssVerticalAlignSub, CssVerticalAlignSuper, CssVerticalAlignTop, CssVerticalAlignTextTop,
			CssVerticalAlignMiddle, CssVerticalAlignBottom, CssVerticalAlignTextBottom,
			CssPercent, CssLength, CssInheritParent, CssInitial;

			CssVerticalAlignBaseline();
			CssVerticalAlignSub();
			CssVerticalAlignSuper();
			CssVerticalAlignTop();
			CssVerticalAlignTextTop();
			CssVerticalAlignMiddle();
			CssVerticalAlignBottom();
			CssVerticalAlignTextBottom();

	//
	// Visual effects https://www.w3.org/TR/CSS2/visufx.html#q11.0
	//

	CssVisualEffects(
		overflow : CssOverflow,
		clip : CssClip,
		visibility : CssVisibility
	);
		CssOverflow ::= CssOverflowVisible, CssOverflowHidden, CssOverflowScroll, CssAuto, CssInheritParent, CssInitial;
			CssOverflowVisible();
			CssOverflowHidden();
			CssOverflowScroll();
		CssClip ::= CssClipRect, CssAuto, CssInheritParent, CssInitial;
			CssClipRect(top : CssLength, right : CssLength, bottom : CssLength, left : CssLength);
		CssVisibility ::= CssVisible, CssHidden, CssCollapse, CssInheritParent, CssInitial;
			CssVisible();
			CssHidden();
			CssCollapse();



	//
	// Colors and backgrounds: https://www.w3.org/TR/CSS2/colors.html#q14.0
	//
	CssColors(
		color : CssFontColor
		//   background-color, background-image, background-repeat, background-attachment, background-position
	);
		CssFontColor ::= CssColor, CssInitial;

	// Fonts: https://www.w3.org/TR/CSS2/fonts.html#q15.0
	CssFonts(
		fontFamily : string,
		//   font-style, font-variant, font-weight
		fontSize : CssFontSize
	);

		CssFontSize ::=
			// Absolute sizes
			CssFontXXSmall, CssFontXSmall, CssFontSmall, CssFontMedium, CssFontLarge, CssFontXLarge, CssFontXXLarge,
			// Relative sizes
			CssFontLarger, CssFontSmaller,
			CssLength, CssPercent, CssInheritParent,
			CssInitial;

				CssFontXXSmall();
				CssFontXSmall();
				CssFontSmall();
				CssFontMedium();
				CssFontLarge();
				CssFontXLarge();
				CssFontXXLarge();
				CssFontLarger();
				CssFontSmaller();

	// Text: https://www.w3.org/TR/CSS2/text.html#q16.0
	CssText(
		// text-indent, text-align, text-decoration,
		letterSpacing : CssLetterSpacing,
		// word-spacing, text-transform
		whiteSpace : CssWhiteSpace,
	);
		CssLetterSpacing ::= CssNormal, CssLength, CssInheritParent, CssInitial;
		CssWhiteSpace ::= CssWhiteSpaceNormal, CssWhiteSpacePre, CssWhiteSpaceNowrap, CssWhiteSpacePreWrap, CssWhiteSpacePreLine,
				CssInheritParent, CssInitial;
			CssWhiteSpaceNormal();
			CssWhiteSpacePre();
			CssWhiteSpaceNowrap();
			CssWhiteSpacePreWrap();
			CssWhiteSpacePreLine();

	//
	// General CSS structures
	//

	// Initial value. Has no effect when changing. Does not exist in CSS specs, but is helpful for us to
	// avoid producing huge style specs when we just use the initial value.
	CssInitial();

	CssNormal();

	// When we inherit it from the parent
	CssInheritParent();

	// For automatic widths and such
	CssAuto();

	CssInteger(value : int);
	CssNumber(value : double);

	// 120% is 120.
	CssPercent(value : double);

	// A length with a given unit
	CssLength(value : double, unit : CssUnit);
		CssUnit ::= CssUnitPx, CssUnitEm, CssUnitEx, CssUnitIn, CssUnitCm, CssUnitPt, CssUnitPc;
			CssUnitEm();
			CssUnitEx();
			CssUnitIn();
			CssUnitCm();
			CssUnitPt();
			CssUnitPc();
			CssUnitPx();

	CssColor ::= CssColorRgb, CssColorRgba;
		CssColorRgb(redc : int, greenc : int, bluec : int);
		// Opacity is 0 to 1.
		CssColorRgba(redc : int, greenc : int, bluec : int, opacity : double);
		CssTransparent();

	emptyCssValues() {
		CssValues(
			CssBox(
				CssMargin(CssInheritParent(), CssInheritParent(), CssInheritParent(), CssInheritParent()),
				{
					bp = CssBorderProperty(zeroCssLength(), CssInheritParent(), "");
					CssBorder(bp, bp, bp, bp)
				},
				CssPadding(CssInheritParent(), CssInheritParent(), CssInheritParent(), CssInheritParent()),
			),
			CssDisplay(
				"",
				CssPositionStatic(CssFloatNone()),
				CssInheritParent(),
				CssInheritParent(),
				"auto"
			),
			CssContainingBlock(
				zeroCssLength(), zeroCssLength(), zeroCssLength(), zeroCssLength(),
				zeroCssLength(), zeroCssLength(), zeroCssLength(), CssInitial()
			),
			CssVisualEffects(
				CssInitial(),
				CssInitial(),
				CssInitial()
			),
			CssColors(
				CssInitial(),
			),
			CssFonts("", CssInitial()),
			CssText(CssInitial(), CssInitial())
		);
	}

	zeroCssLength() {
		CssLength(0.0, CssUnitPx());
	}
}
