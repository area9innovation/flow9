import formats/html/html;
import ds/treeutils;

// This provides a facility for converting font names to HTML font styles
export {
	// The name of a font in HTML
	HtmlFont(name : string, weight : Maybe<int>, style : Maybe<string>, families : [string]);

	// Converts font's families to string
	htmlFont2familiesString(font: HtmlFont) -> string;
	htmlFont2weight(font: HtmlFont) -> int;
	htmlFont2slope(font: HtmlFont) -> string;

	// Converts font to a proper html CSS "style" string.
	// https://fonts.googleapis.com/css?family=Roboto:regular,bold,italic,thin,light,bolditalic,black,medium&lang=en
	htmlFont2style(font : HtmlFont) -> string;

	// Converts font name as used in Form to a HTML font style attribute string, but no end quote
	font2html(font : string) -> string;

	// Converts font name to HTML and store all attributes in HtmlFont for simplified usage
	// name must be mapped font name (result of getMappedFont)
	font2htmlFont(name : string) -> HtmlFont;

	htmlFontsRepoClear() -> void;

	// This clears the repo and pushes some default fonts there. It is recommended to call it explicitly.
	htmlFontsRepoReset() -> void;

	// Adds a font and returns its name in HTML
	htmlFontsRepoRegisterFont(font: HtmlFont) -> string;
	htmlFontsRepoRegisterFonts(fonts: [HtmlFont]) -> [string];

	FONT_WEIGHT_BOOK = 400;
	FONT_WEIGHT_MEDIUM = 500;
	FONT_WEIGHT_BOLD =   700;

	FONT_SLOPE_NORMAL =  "normal";
	FONT_SLOPE_ITALIC =  "italic";
	FONT_SLOPE_OBLIQUE = "oblique";
}

getInitialRepo() -> Tree<string, HtmlFont> {
	values2tree(
		[
			HtmlFont("Roboto",        Some(FONT_WEIGHT_BOOK),   Some(FONT_SLOPE_NORMAL), ["Roboto"]),
			HtmlFont("RobotoMedium",  Some(FONT_WEIGHT_MEDIUM), Some(FONT_SLOPE_NORMAL), ["Roboto"]),
			HtmlFont("RobotoBold",    Some(FONT_WEIGHT_BOLD),   Some(FONT_SLOPE_NORMAL), ["Roboto"]),
			HtmlFont("RobotoItalic",  Some(FONT_WEIGHT_BOOK),   Some(FONT_SLOPE_ITALIC), ["Roboto"]),
			HtmlFont("Book",          Some(FONT_WEIGHT_BOOK),   None(),                  ["Roboto"]),
			HtmlFont("Italic",        Some(FONT_WEIGHT_BOOK),   Some(FONT_SLOPE_ITALIC), ["Roboto"]),
			HtmlFont("Medium",        Some(FONT_WEIGHT_BOLD),   None(),                  ["Roboto", "sans-serif"]),
			HtmlFont("MaterialIcons", Some(FONT_WEIGHT_BOOK),   None(),                  ["Material Icons"]),
			HtmlFont("RobotoMediumItalic",  Some(FONT_WEIGHT_MEDIUM), Some(FONT_SLOPE_ITALIC), ["Roboto"]),
		],
		\font -> font.name,
	);
}

theRepo : ref Tree<string, HtmlFont> = ref getInitialRepo();

htmlFont2familiesString(font: HtmlFont) -> string {
	strGlue(map(font.families, \fam-> if (strContains(fam, " ")) formatString("'%1'", [fam]) else fam), ",");
}

htmlFont2weight(font: HtmlFont) -> int {
	either(font.weight, FONT_WEIGHT_BOOK);
}

htmlFont2slope(font: HtmlFont) -> string {
	either(font.style, "");
}

htmlFontsRepoClear() -> void {
	theRepo := makeTree();
}

htmlFontsRepoReset() -> void {
	theRepo := getInitialRepo();
}

htmlFontsRepoRegisterFont(font: HtmlFont) -> string {
	theRepo := setTree(^theRepo, font.name, font);
	font.name;
}

htmlFontsRepoRegisterFonts(fonts: [HtmlFont]) -> [string] {
	theRepo := fold(fonts, ^theRepo, (\acc, f -> setTree(acc, f.name, f)));
	map(fonts, \f -> f.name);
}

setHtmlFontFamilies(font:HtmlFont, families: [string]) -> HtmlFont {
	HtmlFont(font.name, font.weight, font.style, families);
}

font2htmlFont(name: string) -> HtmlFont {
	nameAndFallbacks = map(strSplit(name, ","), trim);
	r = lookupTreeDef(^theRepo, nameAndFallbacks[0], HtmlFont(nameAndFallbacks[0], None(), None(), [nameAndFallbacks[0]]));
	setHtmlFontFamilies(r, concat(r.families, tail(nameAndFallbacks)));
}

htmlFont2style(font : HtmlFont) -> string {
	formatString(
		"font-family:%1%2%3",
		[
			htmlFont2familiesString(font)+ ";",
			eitherMap(font.style, \style -> "font-style:" + style + ";", ""),
			eitherMap(font.weight, \weight -> "font-weight:" + i2s(weight) + ";", "")
		]
	);
}

font2html(name : string) -> string {
	"style=\"" + htmlFont2style(font2htmlFont(name));
}
