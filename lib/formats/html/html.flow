// © Copyright 2011 Area9 Technologies.

import string_utils;
import formats/base64;
import lingo/compiler/syntaxtree_util;
import formats/html/parser/ast;
import formats/html/parser/parser;

export {
	HtmlNode ::= HtmlTag, HtmlText, HtmlEntity, HtmlComment;
		HtmlTag(
			tag: string,
			attribs: [HtmlAttrib],
			children: [HtmlNode]
		);
		HtmlAttrib(key: string, val: string);
		HtmlText(text: string);
		HtmlComment(text: string);
		HtmlEntity(
			prefix : string, // Prefixes: &# - decimal, &#x - hex, & - string
			body : string    // codes:    8828,         22A4       forall
		);

	// Following HTML parsing pitfalls are handled:
	// - optionality of closing tags: </li>, </tr>, </td> (may be skipped for certain next opening tags)
	// - stray </br> and </p> tags with no corresponding opening tags
	// - sudden interruption of the flow of tokens by closing </html> tag
	// Returns a pair: the sequence of toplevel HTML nodes and an error message (is empty when no error are found).
 	parseHtml(text: string) -> Pair<[HtmlNode], string>;

	// Converts the HTML nodes back to a string (inverse function to `parseHtml`);
	html2s(html : [HtmlNode]) -> string;

	// & < > " ' are converted to &amp;, ...
	escapeHtml(s : string) -> string;
	// As above, but newlines are changed to <br>
	escapeHtml2(s : string) -> string;
	// This version uses the whole `string2HtmlEntity` table of symbols
	escapeHtml3(s : string) -> string;

	// A fixed set of escapes: ' " < > &
	unescapeHtml(s : string) -> string;

	// Also escape numeric and named escapes: &#xHHHH; and &#DDD;
	unescapeHtml2(s : string) -> string;

	// Unescape the underlying HTML entity
	unescapeHtmlEntity(entity : HtmlEntity) -> string;

	// Only escape numeric escapes: &#xHHHH; and &#DDD;
	unescapeNumericHtml(s : string) -> string;

	// Encodes a URL string. I.e. changes '<' to '%3C'
	urlEncode(s : string) -> string;
	// Decodes a URL encoded string. I.e. changes %XX to real chars
	urlDecode(s : string) -> string;
	// As urlEncode and urlDecode, but '+' is also affected
	// '+' encodes to '%2B';
	urlEncode2(s : string) -> string;
	// '+' decodes to ' '; '%2B' decodes to '+'
	native urlDecode2 : (s : string) -> string = Native.urlDecode;
	// More symbols to encoding
	urlEncode3(s : string) -> string;

	// Return an base64url encoded string
	// See: https://tools.ietf.org/html/rfc4648#page-7
	// The base64url is like base64, but is good for url's as it does not contain +, - or =
	urlBase64Encode(data : string) -> string;
	urlBase64Decode(data : string) -> string;

	// presents string characters as corresponding htmlentity codes
	encode2htmlentities (s : string) -> string;
	// The tree contains characters/symbols with their corresponding htmlentity codes.
	// Originally, it was used for email obfuscation(spam protection filters) so it is not complete.
	// You can complement this "list" if it is needed using these links:
	// https://www.w3schools.com/html/html_charset.asp
	// https://www.freeformatter.com/html-entities.html
	htmlentityCodeTree : Tree<string, string>; 
}

escapeHtml(s) {
	// & < > " ' as &amp; &lt; &gt; &quot; &#39;
	r = \from,to -> \t -> strReplace(t, from, to);
	s
	|> r("&", "&amp;")
	|> r("<", "&lt;")
	|> r(">", "&gt;")
	|> r("\"", "&quot;")
	|> r("'", "&#39;")
}

escapeHtml2(s) {
	// & < > " ' as &amp; &lt; &gt; &quot; &#39;
	r = \from,to -> \t -> strReplace(t, from, to);
	s
	|> r("&", "&amp;")
	|> r("<", "&lt;")
	|> r(">", "&gt;")
	|> r("\"", "&quot;")
	|> r("'", "&#39;")
    |> r("&amp;nbsp;", "&nbsp;")
    |> r("\n", "<br>")
}

// This version uses the whole `string2HtmlEntity` table of symbols
escapeHtml3(s : string) -> string {
	ensureHtmlEntitiesInitialized();
	concatStrings(map(s2a(s), \code -> {
		symbol = fromCharCode(code);
		if (code < 128) symbol else
		lookupTreeDef(^string2HtmlEntity, symbol, "&#" + formatHex(code) + ";");
	}));
}

unescapeHtml(s) {
	// & < > " ' as &amp; &lt; &gt; &quot; &#39;
	r = \to, from -> \t -> strReplace(t, from, to);
	s
	|> r("'", "&#39;")
	|> r("\"", "&quot;")
	|> r(">", "&gt;")
	|> r("<", "&lt;")
	|> r("&", "&amp;")
}

htmlEntity2string : ref Tree<string, string> = ref makeTree();
string2HtmlEntity : ref Tree<string, string> = ref makeTree();

ensureHtmlEntitiesInitialized() -> void {
	if (isEmptyTree(^htmlEntity2string)) {
		htmlEntity2string := fold([
			//See this reference:
			// http://www.w3.org/TR/html4/sgml/entities.html
			// http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references
			// name, symbol
			["iexcl", "¡"],
			["cent", "¢"],
			["pound", "£"],
			["curren", "¤"],
			["yen", "¥"],
			["brvbar", "¦"],
			["sect", "§"],
			["uml", "¨"],
			["copy", "©"],
			["ordf", "ª"],

			["laquo", "«"],
			["not", "¬"],
			["shy", "\u00AD"],
			["reg", "®"],
			["macr", "¯"],
			["deg", "°"],
			["plusmn", "±"],
			["sup2", "²"],
			["sup3", "³"],
			["acute", "´"],
			["micro", "µ"],
			["para", "¶"],
			["middot", "·"],
			["cedil", "¸"],
			["sup1", "¹"],
			["ordm", "º"],
			["raquo", "»"],
			["frac14", "¼"],
			["frac12", "½"],
			["frac34", "¾"],
			["iquest", "¿"],

			["Agrave", "À"],
			["Aacute", "Á"],
			["Acirc", "Â"],
			["Atilde", "Ã"],
			["Auml", "Ä"],
			["Aring", "Å"],
			["AElig", "Æ"],
			["Ccedil", "Ç"],
			["Egrave", "È"],
			["Eacute", "É"],
			["Ecirc", "Ê"],
			["Euml", "Ë"],
			["Igrave", "Ì"],
			["Iacute", "Í"],
			["Icirc", "Î"],
			["Iuml", "Ï"],
			["ETH", "Ð"],
			["Ntilde", "Ñ"],
			["Ograve", "Ò"],
			["Oacute", "Ó"],
			["Ocirc", "Ô"],
			["Otilde", "Õ"],
			["Ouml", "Ö"],
			["times", "×"],
			["Oslash", "Ø"],
			["Ugrave", "Ù"],
			["Uacute", "Ú"],
			["Ucirc", "Û"],
			["Uuml", "Ü"],
			["Yacute", "Ý"],
			["THORN", "Þ"],
			["szlig", "ß"],
			["agrave", "à"],
			["aacute", "á"],
			["acirc", "â"],
			["apos", "'"],
			["atilde", "ã"],
			["auml", "ä"],
			["aring", "å"],
			["aelig", "æ"],
			["ccedil", "ç"],
			["egrave", "è"],
			["eacute", "é"],
			["ecirc", "ê"],
			["euml", "ë"],
			["igrave", "ì"],
			["iacute", "í"],
			["icirc", "î"],
			["iuml", "ï"],
			["eth", "ð"],
			["ntilde", "ñ"],
			["ograve", "ò"],
			["oacute", "ó"],
			["ocirc", "ô"],
			["otilde", "õ"],
			["ouml", "ö"],
			["divide", "÷"],
			["oslash", "ø"],
			["ugrave", "ù"],
			["uacute", "ú"],
			["ucirc", "û"],
			["uuml", "ü"],
			["yacute", "ý"],
			["thorn", "þ"],
			["yuml", "ÿ"],
			["OElig", "Œ"],
			["oelig", "œ"],
			["Scaron", "Š"],
			["scaron", "š"],
			["Yuml", "Ÿ"],
			["fnof", "ƒ"],

			["circ", "ˆ"],
			["tilde", "˜"],

			["Alpha", "Α"],
			["Beta", "Β"],
			["Gamma", "Γ"],
			["Delta", "Δ"],
			["Epsilon", "Ε"],
			["Zeta", "Ζ"],
			["Eta", "Η"],
			["Theta", "Θ"],
			["Iota", "Ι"],
			["Kappa", "Κ"],
			["Lambda", "Λ"],
			["Mu", "Μ"],
			["Nu", "Ν"],
			["Xi", "Ξ"],
			["Omicron", "Ο"],
			["Pi", "Π"],
			["Rho", "Ρ"],
			["Sigma", "Σ"],
			["Tau", "Τ"],
			["Upsilon", "Υ"],
			["Phi", "Φ"],
			["Chi", "Χ"],
			["Psi", "Ψ"],
			["Omega", "Ω"],
			["alpha", "α"],
			["beta", "β"],
			["gamma", "γ"],
			["delta", "δ"],
			["epsilon", "ε"],
			["zeta", "ζ"],
			["eta", "η"],
			["theta", "θ"],
			["iota", "ι"],
			["kappa", "κ"],
			["lambda", "λ"],
			["mu", "μ"],
			["nu", "ν"],
			["xi", "ξ"],
			["omicron", "ο"],
			["pi", "π"],
			["rho", "ρ"],
			["sigmaf", "ς"],
			["sigma", "σ"],
			["tau", "τ"],
			["upsilon", "υ"],
			["phi", "φ"],
			["chi", "χ"],
			["psi", "ψ"],
			["omega", "ω"],
			["thetasym", "ϑ"],
			["upsih", "ϒ"],
			["piv", "ϖ"],

			["ensp", "\u2002"],
			["emsp", "\u2003"],
			["thinsp", "\u2009"],
			["zwnj", "\u200c"],
			["zwj", "\u200d"],
			["lrm", "\u200e"],
			["rlm", "\u200f"],

			["ndash", "–"],
			["mdash", "—"],
			["lsquo", "‘"],
			["rsquo", "’"],
			["sbquo", "‚"],
			["ldquo", "“"],
			["rdquo", "”"],
			["bdquo", "„"],
			["dagger", "†"],
			["Dagger", "‡"],
			["bull", "•"],
			["hellip", "…"],
			["permil", "‰"],
			["prime", "′"],
			["Prime", "″"],
			["lsaquo", "‹"],
			["rsaquo", "›"],
			["oline", "‾"],
			["frasl", "⁄"],
			["euro", "€"],
			["image", "ℑ"],
			["weierp", "℘"],
			["real", "ℜ"],
			["trade", "™"],
			["alefsym", "ℵ"],
			["larr", "←"],
			["uarr", "↑"],
			["rarr", "→"],
			["darr", "↓"],
			["harr", "↔"],
			["crarr", "↵"],
			["lArr", "⇐"],
			["uArr", "⇑"],
			["rArr", "⇒"],
			["dArr", "⇓"],
			["hArr", "⇔"],
			["forall", "∀"],
			["part", "∂"],
			["exist", "∃"],
			["empty", "∅"],
			["nabla", "∇"],
			["isin", "∈"],
			["notin", "∉"],
			["ni", "∋"],
			["prod", "∏"],
			["sum", "∑"],
			["minus", "−"],
			["lowast", "∗"],
			["radic", "√"],
			["prop", "∝"],
			["infin", "∞"],
			["ang", "∠"],
			["and", "∧"],
			["or", "∨"],
			["cap", "∩"],
			["cup", "∪"],
			["int", "∫"],
			["there4", "∴"],
			["sim", "∼"],
			["cong", "≅"],
			["asymp", "≈"],
			["ne", "≠"],
			["equiv", "≡"],
			["le", "≤"],
			["ge", "≥"],
			["sub", "⊂"],
			["sup", "⊃"],
			["nsub", "⊄"],
			["sube", "⊆"],
			["supe", "⊇"],
			["oplus", "⊕"],
			["otimes", "⊗"],
			["perp", "⊥"],
			["sdot", "⋅"],
			["vellip", "⋮"],
			["lceil", "⌈"],
			["rceil", "⌉"],
			["lfloor", "⌊"],
			["rfloor", "⌋"],
			["lang", "〈"],
			["rang", "〉"],
			["loz", "◊"],
			["spades", "♠"],
			["clubs", "♣"],
			["hearts", "♥"],
			["diams", "♦"],
		], makeTree(), \acc, e -> {
			setTree(acc, "&" + e[0], e[1])
		});
		string2HtmlEntity := foldTree(^htmlEntity2string, makeTree(), 
			\html, symb, acc -> setTree(acc, symb, html)
		);
	}
}

unescapeHtml2(s) {
	ensureHtmlEntitiesInitialized();
	doUnescapeHtml("", s, false);
}

unescapeNumericHtml(s) {
	doUnescapeHtml("", s, true);
}

doUnescapeHtml(acc : string, s : string, numericOnly : bool) -> string {
	i = strIndexOf(s, "&");
	if (i == -1) acc + s else {
		left = acc + strLeft(s, i);
		right = strRight(s, i);
		semi = strIndexOf(right, ";");
		if (semi == -1) {
			left + right
		} else {
			esca = strLeft(right, semi);
			after = strRight(right, semi + 1);
			if (startsWith(esca, "&#x")) {
				// Hex
				c = fromCharCode(parseHex(strRight(esca, 3)));
				doUnescapeHtml(left + c, after, numericOnly)
			} else if (startsWith(esca, "&#")) {
				// Decimal
				c = fromCharCode(s2i(strRight(esca, 2)));
				doUnescapeHtml(left + c, after, numericOnly)
			} else if (!numericOnly){
				c = if (esca == "&nbsp") "\u00a0"
				else if (esca == "&amp") "&"
				else if (esca == "&lt") "<"
				else if (esca == "&gt") ">"
				else if (esca == "&quot") "\""
				else {
					e = lookupTreeDef(^htmlEntity2string, esca, "");
					if (e == "")
						esca + ";"
					else e;
				}
				doUnescapeHtml(left + c, after, numericOnly)
			} else {
				doUnescapeHtml(left + esca + ";", after, numericOnly)
			}
		}
	}
}

urlEncode(s) {
	lowerToDecode = [
		// 0x25 might be important to be first when this implementation replaced.
		0x25, 0x0A, 0x20, 0x22, 0x23, 0x24, 0x26,
		0x27, 0x2F, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
		0x3F, 0x40, 0x5B, 0x5C, 0x5D, 0x5E, 0x60,
	];
	strGlue(map(string2utf8(s), \c ->
		if (contains(lowerToDecode, c) || c > 0x7A) "%"+lpad(formatHex(c), "0", 2)
		else fromCharCode(c)
	), "");
}

urlDecode(s) {
	urlDecode0("", s)
}

urlDecode0(acc, s) {
	percent = strIndexOf(s, "%");
	if (percent == -1) {
		acc + s;
	} else {
		left = strLeft(s, percent);
		right = strRight(s, percent);
		percentPair = extractPercentHex(right);
		hexcode = percentPair.first;
		c = if (hexcode < 0xC0) {
			percentPair
		} else {
			// OK, it must be UTF-8 encoded
			if (0xC0 <= hexcode && hexcode <= 0xDF) {
				// 2 bytes
				secondByte = extractPercentHex(percentPair.second);
				if (secondByte.first == -1) {
					// OK, it is some crap, because we expect a second percent here
					percentPair
				} else {
					Pair((hexcode - 192) * 64 + (secondByte.first - 128), secondByte.second)
				}
			} else if (hexcode <= 0xEF) { // 3 bytes
				secondByte = extractPercentHex(percentPair.second);
				thirdByte = extractPercentHex(secondByte.second);
				if (secondByte.first == -1 || thirdByte.first == -1) {
					// OK, it is some crap, because we expect a second and third percent here
					percentPair
				} else {
					Pair((hexcode - 224) * 4096
						+ (secondByte.first - 128) * 64
						+ (thirdByte.first - 128),
						thirdByte.second
					)
				}
			} else if (hexcode <= 0xF7) { // 4 bytes
				secondByte = extractPercentHex(percentPair.second);
				thirdByte = extractPercentHex(secondByte.second);
				fourthByte = extractPercentHex(thirdByte.second);
				if (secondByte.first == -1 || thirdByte.first == -1 || fourthByte.first == -1) {
					// Crap. We need 4 bytes
					percentPair
				} else {
					Pair((hexcode - 240) * 262144
						+ (secondByte.first - 128) * 4096
						+ (thirdByte.first - 128) * 64
						+ (fourthByte.first - 128),
						fourthByte.second
					)
				}
			} else {
				// TODO: We did not implement support for 6 bytes
				percentPair
			}
		};

		urlDecode0(acc + left + fromCharCode(c.first), c.second);
	}
}

// If a string starts with %, extract the hex-digit after it
extractPercentHex(s : string) -> Pair<int, string> {
	if (getCharAt(s, 0) == "%") {
		Pair(parseHex(substring(s, 1, 2)), strRight(s, 3));
	} else {
		Pair(-1, s);
	}
}

urlEncode2(s) {
	strReplace(urlEncode(s), "+", "%2B");
}

urlEncode3(s) {
	strReplaces(urlEncode2(s), [
		"€", "%E2%82%AC",
		"", "%81",  // <control>
		"‚", "%E2%80%9A",
		"ƒ", "%C6%92",
		"„", "%E2%80%9E",
		"…", "%E2%80%A6",
		"†", "%E2%80%A0",
		"‡", "%E2%80%A1",
		"ˆ", "%CB%86",
		"‰", "%E2%80%B0",
		"Š", "%C5%A0",
		"‹", "%E2%80%B9",
		"Œ", "%C5%92C",
		"", "%C5%8D",  // REVERSE LINE FEED
		"Ž", "%C5%BD",
		"", "%8F",  // SINGLE SHIFT THREE
		"", "%C2%90",  // DEVICE CONTROL STRING
		"‘", "%E2%80%98",
		"’", "%E2%80%99",
		"“", "%E2%80%9C",
		"”", "%E2%80%9D",
		"•", "%E2%80%A2",
		"–", "%E2%80%93",
		"—", "%E2%80%94",
		"˜", "%CB%9C",
		"™", "%E2%84",
		"š", "%C5%A1",
		"›", "%E2%80",
		"œ", "%C5%93",
		"", "%9D",  // OPERATING SYSTEM COMMAND
		"ž", "%C5%BE",
		"Ÿ", "%9F",
		" ", "%C2%A0",  // NO-BREAK SPACE
		"¡", "%C2%A1",
		"¢", "%C2%A2",
		"£", "%C2%A3",
		"¤", "%C2%A4",
		"¥", "%C2%A5",
		"¦", "%C2%A6",
		"§", "%C2%A7",
		"¨", "%C2%A8",
		"©", "%C2%A9",
		"ª", "%C2%AA",
		"«", "%C2%AB",
		"¬", "%C2%AC",
		"­", "%C2%AD",
		"®", "%C2%AE",
		"¯", "%C2%AF",
		"°", "%C2%B0",
		"±", "%C2%B1",
		"²", "%C2%B2",
		"³", "%C2%B3",
		"´", "%C2%B4",
		"µ", "%C2%B5",
		"¶", "%C2%B6",
		"·", "%C2%B7",
		"¸", "%C2%B8",
		"¹", "%C2%B9",
		"º", "%C2%BA",
		"»", "%C2%BB",
		"¼", "%C2%BC",
		"½", "%C2%BD",
		"¾", "%C2%BE",
		"¿", "%C2%BF",
		"À", "%C3%80",
		"Á", "%C3%81",
		"Â", "%C3%82",
		"Ã", "%C3%83",
		"Ä", "%C3%84",
		"Å", "%C3%85",
		"Æ", "%C3%86",
		"Ç", "%C3%87",
		"È", "%C3%88",
		"É", "%C3%89",
		"Ê", "%C3%8A",
		"Ë", "%C3%8B",
		"Ì", "%C3%8C",
		"Í", "%C3%8D",
		"Î", "%C3%8E",
		"Ï", "%C3%8F",
		"Ð", "%C3%90",
		"Ñ", "%C3%91",
		"Ò", "%C3%92",
		"Ó", "%C3%93",
		"Ô", "%C3%94",
		"Õ", "%C3%95",
		"Ö", "%C3%96",
		"×", "%C3%97",
		"Ø", "%C3%98",
		"Ù", "%C3%99",
		"Ú", "%C3%9A",
		"Û", "%C3%9B",
		"Ü", "%C3%9C",
		"Ý", "%C3%9D",
		"Þ", "%C3%9E",
		"ß", "%C3%9F",
		"à", "%C3%A0",
		"á", "%C3%A1",
		"â", "%C3%A2",
		"ã", "%C3%A3",
		"ä", "%C3%A4",
		"å", "%C3%A5",
		"æ", "%C3%A6",
		"ç", "%C3%A7",
		"è", "%C3%A8",
		"é", "%C3%A9",
		"ê", "%C3%AA",
		"ë", "%C3%AB",
		"ì", "%C3%AC",
		"í", "%C3%AD",
		"î", "%C3%AE",
		"ï", "%C3%AF",
		"ð", "%C3%B0",
		"ñ", "%C3%B1",
		"ò", "%C3%B2",
		"ó", "%C3%B3",
		"ô", "%C3%B4",
		"õ", "%C3%B5",
		"ö", "%C3%B6",
		"÷", "%C3%B7",
		"ø", "%C3%B8",
		"ù", "%C3%B9",
		"ú", "%C3%BA",
		"û", "%C3%BB",
		"ü", "%C3%BC",
		"ý", "%C3%BD",
		"þ", "%C3%BE",
		"ÿ", "%C3%BF"
	])
}

urlDecode2(s) {
	urlDecode(strReplace(strReplace(s, "+", " "), "%2B", "+"));
}

urlBase64Encode(data : string) {
	b64 = encodeBase64(data);
	b64Modified = strReplaces(b64, ["+", "-", "/", "_"]);
	rtrim2(strReplace(b64Modified, "=", ""), "\u000d\n");
}

urlBase64Decode(data : string) {
	b64 = strReplaces(data, ["-", "+", "_", "/"]);
	remainder = strlen(data) % 4;	
	d = if (remainder != 0) { b64 + strRepeat("=", 4 - remainder); } else b64;	
	decodeBase64(d);
}

encode2htmlentities(s : string) {
	stringFoldChar(s, "", \acc, c -> acc + lookupTreeDef(htmlentityCodeTree, c, c));
}

htmlentityCodeTree = pairs2tree([
		Pair("-", "&#45;"),
		Pair(".", "&#46;"),
		Pair("0", "&#48;"),
		Pair("1", "&#49;"),
		Pair("2", "&#50;"),
		Pair("3", "&#51;"),
		Pair("4", "&#52;"),
		Pair("5", "&#53;"),
		Pair("6", "&#54;"),
		Pair("7", "&#55;"),
		Pair("8", "&#56;"),
		Pair("9", "&#57;"),
		Pair("@", "&#64;"),
		Pair("A", "&#65;"),
		Pair("B", "&#66;"),
		Pair("C", "&#67;"),
		Pair("D", "&#68;"),
		Pair("E", "&#69;"),
		Pair("F", "&#70;"),
		Pair("G", "&#71;"),
		Pair("H", "&#72;"),
		Pair("I", "&#73;"),
		Pair("J", "&#74;"),
		Pair("K", "&#75;"),
		Pair("L", "&#76;"),
		Pair("M", "&#77;"),
		Pair("N", "&#78;"),
		Pair("O", "&#79;"),
		Pair("P", "&#80;"),
		Pair("Q", "&#81;"),
		Pair("R", "&#82;"),
		Pair("S", "&#83;"),
		Pair("T", "&#84;"),
		Pair("U", "&#85;"),
		Pair("V", "&#86;"),
		Pair("W", "&#87;"),
		Pair("X", "&#88;"),
		Pair("Y", "&#89;"),
		Pair("Z", "&#90;"),
		Pair("_", "&#95;"),
		Pair("`", "&#96;"),
		Pair("a", "&#97;"),
		Pair("b", "&#98;"),
		Pair("c", "&#99;"),
		Pair("d", "&#100;"),
		Pair("e", "&#101;"),
		Pair("f", "&#102;"),
		Pair("g", "&#103;"),
		Pair("h", "&#104;"),
		Pair("i", "&#105;"),
		Pair("j", "&#106;"),
		Pair("k", "&#107;"),
		Pair("l", "&#108;"),
		Pair("m", "&#109;"),
		Pair("n", "&#110;"),
		Pair("o", "&#111;"),
		Pair("p", "&#112;"),
		Pair("q", "&#113;"),
		Pair("r", "&#114;"),
		Pair("s", "&#115;"),
		Pair("t", "&#116;"),
		Pair("u", "&#117;"),
		Pair("v", "&#118;"),
		Pair("w", "&#119;"),
		Pair("x", "&#120;"),
		Pair("y", "&#121;"),
		Pair("z", "&#122;")
	]);

parseHtml(text: string) -> Pair<[HtmlNode], string> {
	err = ref "";
	on_err = \s -> err := ^err + (if (^err == "") "" else "\n") + "html parsing error: " + s;
	plain = parseHtmlPlain(text, on_err);
	elements = structHtml(plain, on_err);
	Pair(elements, ^err);
}

HtmlTagKind ::= HtmlTagOpen, HtmlTagClose, HtmlTagClopen;
	HtmlTagOpen(); HtmlTagClose(); HtmlTagClopen();

structHtml(elems : [Pair<HtmlNode, HtmlTagKind>], err : (string) -> void) -> [HtmlNode] {
	stack = structHtmlElem(elems, 0, err, ParseHtmlStack(HtmlTag("html", [], []), makeList(), None()));
	if  (stack.parent != None()) {
		err("non-empty stack at the end of html parsing");
	}
	list2array(stack.elems);
}

ParseHtmlStack(
	tag : HtmlTag,
	elems : List<HtmlNode>,
	parent : Maybe<ParseHtmlStack>
);

closeHtmlTag(depth : int, stack : ParseHtmlStack, err : (string) -> void) -> ParseHtmlStack {
	if (depth == 0) stack else {
		switch (stack.parent) {
			Some(parent): {
				new_stack = ParseHtmlStack(parent with
					elems = Cons(
						HtmlTag(stack.tag with 
							children = list2array(stack.elems)
						),
						parent.elems
					),
				);
				closeHtmlTag(depth - 1, new_stack, err);
			}
			None(): {
				err("no parent of: " + HtmlNode2s(stack.tag));
				stack;
			}
		}
	}
}

closeAllHtmlTags(stack : ParseHtmlStack) -> ParseHtmlStack {
	switch (stack.parent) {
		Some(parent): {
			new_stack = ParseHtmlStack(parent with
				elems = Cons(
					HtmlTag(stack.tag with 
						children = list2array(stack.elems)
					),
					parent.elems
				),
			);
			closeAllHtmlTags(new_stack);
		}
		None(): {
			stack;
		}
	}
}

structHtmlElem(elems : [Pair<HtmlNode, HtmlTagKind>], i : int, err : (string) -> void, stack : ParseHtmlStack) -> ParseHtmlStack {
	if (i == length(elems)) {
		closeAllHtmlTags(stack); 
	} else {
		elem = elems[i].first;
		stack1 = switch (elem) {
			HtmlTag(tag, attribs, __): {
				switch (elems[i].second) {
					HtmlTagClopen(): {
						ParseHtmlStack(stack with elems = Cons(elem, stack.elems));
					}
					HtmlTagOpen(): {
						if (tag == "br" || tag == "p") {
							ParseHtmlStack(stack with elems = Cons(HtmlTag(tag, [], []), stack.elems));
						} else {
							depth = if (tag == "li") {
								if (stack.tag.tag == "li") 1 else 0;
							} else if (tag == "tr") {
								if (stack.tag.tag == "tr") 1 else
								if (stack.tag.tag == "td") 2 else 0;
							} else if (tag == "td") {
								if (stack.tag.tag == "td") 1 else 0;
							} else {
								0;
							}
							ParseHtmlStack(elem, makeList(), Some(closeHtmlTag(depth, stack, err)));
						}
					}
					HtmlTagClose(): {
						if (tag == "br" || tag == "p") {
							stack;
						} else {
							if (stack.tag.tag != tag) {
								depth = if (tag == "tr") {
									if (stack.tag.tag == "table") 0 else 
									if (stack.tag.tag == "td") 2 else 0;
								} else if (tag == "ul" || tag == "ol") {
									if (stack.tag.tag == "li") 2 else 0;
								} else if (tag == "table") {
									if (stack.tag.tag == "tr") 2 else
									if (stack.tag.tag == "td") 3 else 0;
								} else {
									0;
								}
								closeHtmlTag(depth, stack, err);
							} else {
								closeHtmlTag(1, stack, err);
							}
						}
					}
				}
			}
			default: {
				ParseHtmlStack(stack with elems = Cons(elem, stack.elems));
			}
		}
		structHtmlElem(elems, i + 1, err, stack1);
	}
}

html2s(html : [HtmlNode]) -> string {
	concatStrings(map(html, HtmlNode2s));
}

HtmlNode2s(elem : HtmlNode) -> string {
	switch (elem) {
		HtmlTag(tag, attribs, body): {
			attribs_s = concatStrings(
				mapi(attribs, \i, attr -> 
					attr.key + "='" + attr.val + "'" + if (i + 1 != length(attribs)) " " else ""
				)
			);
			if (length(body) > 0) {
				open_tag = "<" + tag + (if (length(attribs) == 0) "" else " ") + attribs_s + ">";
				close_tag = "</" + tag + ">";
				open_tag + html2s(body) + close_tag;
			} else {
				"<" + tag + (if (length(attribs) == 0) "" else " ") + attribs_s + "/>"
			}
		}
		HtmlText(text):       text;
		HtmlComment(text):    "<!--" + text + "-->";
		HtmlEntity(prefix, body): prefix + body + ";";
	}
}

isHexDigits(s) {
	isHexDigits0(s, 0, strlen(s))
}

isHexDigits0(s : string, index : int, len : int) -> bool {
	if (index < len) isHexDigit(getCharAt(s, index)) && isHexDigits0(s, index+1, len) else len > 0;
}

parseHtmlPlain(src : string, err : (string) -> void) -> [Pair<HtmlNode, HtmlTagKind>] {
	pr1 = parse_html_source(src);
	st = pr1.first;
	if (st.end != strlen(src)) {
		msg = "met: '" + pr1.second.met + "', while expected: '" + strGlue(pr1.second.expected, ", ") + "'";
		err("Syntax error: " + msg + ", html source:\n" + 
				strIndent(src)
		);
		[]
	} else {
		htmlMakeElements(st, src, err);
	}
}

htmlMakeElements(st : SyntaxTree, src : string, err : (string) -> void) -> [Pair<HtmlNode, HtmlTagKind>] {
	synt_trees = get_html_source_html_element_s(st);
	map(synt_trees,
		\elem -> {
			if (elem.rule == st_html_text) {
				Pair(HtmlText(grabSTText(elem, src)), HtmlTagOpen());
			} else if (elem.rule == st_html_comment) {
				comment = grabSTText(get_html_source_html_comment_text(elem), src);
				Pair(HtmlComment(comment), HtmlTagOpen());
			} else if (elem.rule == st_html_entity) {
				prefix = grabSTText(get_html_source_html_entity_prefix(elem), src);
				body = grabSTText(get_html_source_html_entity_body(elem), src);
				Pair(HtmlEntity(prefix, body), HtmlTagOpen());
			} else if (elem.rule == st_html_tag) {
				open = grabSTText(get_html_source_html_tag_open(elem), src);
				close = grabSTText(get_html_source_html_tag_close(elem), src);
				tag = toLowerCase(grabSTText(get_html_source_html_id(elem), src));
				attribs = htmlMakeAttribs(get_html_source_html_attrib_s(elem), src);
				if (open == "<" && close == "/>") {
					Pair(HtmlTag(tag, attribs, []), HtmlTagClopen());
				} else if (open == "<" && close == ">") {
					Pair(HtmlTag(tag, attribs, []), HtmlTagOpen());
				} else if (open == "</" && close == ">") {
					Pair(HtmlTag(tag, attribs, []), HtmlTagClose());
				} else {
					err("Illegal tag: " + grabSTText(elem, src));
					Pair(HtmlComment(""), HtmlTagOpen());
				}
			} else {
				// Shouldn't happen
				Pair(HtmlComment(""), HtmlTagOpen());
			}
		}
	);
}

htmlMakeAttribs(sts : [SyntaxTree], src : string) -> [HtmlAttrib] {
	map(sts,
		\elem -> {
			make_attrib = \v -> {
				key = toLowerCase(grabSTText(get_html_source_html_id(elem), src));
				val = toLowerCase(v);
				HtmlAttrib(key, val);
			}
			if (elem.rule == st_html_attrib1) {
				make_attrib(grabSTText(get_html_source_html_attrib1_val(elem), src));
			} else if (elem.rule == st_html_attrib2) {
				make_attrib(grabSTText(get_html_source_html_attrib2_val(elem), src));
			} else if (elem.rule == st_html_attrib3) {
				make_attrib(grabSTText(get_html_source_html_attrib1_val(elem), src));
			} else if (elem.rule == st_html_attrib4) {
				make_attrib("1");
			} else {
				// Shouldn't happen
				HtmlAttrib("", "");
			}
		}
	);
}

unescapeHtmlEntity(entity : HtmlEntity) -> string {
	if (entity.prefix == "&#") {
		fromCharCode(s2i(entity.body)); // like &#8828,
	} else if (entity.prefix == "&#x") {
		fromCharCode(parseHex(entity.body)); // like &#x22A4;
	} else {
		unescapeHtml2("&" + entity.body + ";"); // like &forall;
	}
}
