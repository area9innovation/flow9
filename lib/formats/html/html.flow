// © Copyright 2011 Area9 Technologies.

import string;
import math/math;
import ds/tree;
import string_utils;

export {
	// & < > " ' are converted to &amp;, ...
	escapeHtml(s : string) -> string;
	// As above, but newlines are changed to <br>
	escapeHtml2(s : string) -> string;

	// A fixed set of escapes: ' " < > &
	unescapeHtml(s : string) -> string;

	// Also escape numeric and named escapes: &#xHHHH; and &#DDD;
	unescapeHtml2(s : string) -> string;

	// Only escape numeric escapes: &#xHHHH; and &#DDD;
	unescapeNumericHtml(s : string) -> string;

	// Encodes a URL string. I.e. changes '<' to '%3C'
	urlEncode(s : string) -> string;
	// Decodes a URL encoded string. I.e. changes %XX to real chars
	urlDecode(s : string) -> string;
	// As urlEncode and urlDecode, but '+' is also affected
	// '+' encodes to '%2B';
	urlEncode2(s : string) -> string;
	// '+' decodes to ' '; '%2B' decodes to '+'
	urlDecode2(s : string) -> string;

	// presents string characters as corresponding htmlentity codes
	encode2htmlentities (s : string) -> string;
	// The tree contains characters/symbols with their corresponding htmlentity codes.
	// Originally, it was used for email obfuscation(spam protection filters) so it is not complete.
	// You can complement this "list" if it is needed using these links:
	// https://www.w3schools.com/html/html_charset.asp
	// https://www.freeformatter.com/html-entities.html
	htmlentityCodeTree = pairs2tree([
		Pair("-", "&#45;"),
		Pair(".", "&#46;"),
		Pair("0", "&#48;"),
		Pair("1", "&#49;"),
		Pair("2", "&#50;"),
		Pair("3", "&#51;"),
		Pair("4", "&#52;"),
		Pair("5", "&#53;"),
		Pair("6", "&#54;"),
		Pair("7", "&#55;"),
		Pair("8", "&#56;"),
		Pair("9", "&#57;"),
		Pair("@", "&#64;"),
		Pair("A", "&#65;"),
		Pair("B", "&#66;"),
		Pair("C", "&#67;"),
		Pair("D", "&#68;"),
		Pair("E", "&#69;"),
		Pair("F", "&#70;"),
		Pair("G", "&#71;"),
		Pair("H", "&#72;"),
		Pair("I", "&#73;"),
		Pair("J", "&#74;"),
		Pair("K", "&#75;"),
		Pair("L", "&#76;"),
		Pair("M", "&#77;"),
		Pair("N", "&#78;"),
		Pair("O", "&#79;"),
		Pair("P", "&#80;"),
		Pair("Q", "&#81;"),
		Pair("R", "&#82;"),
		Pair("S", "&#83;"),
		Pair("T", "&#84;"),
		Pair("U", "&#85;"),
		Pair("V", "&#86;"),
		Pair("W", "&#87;"),
		Pair("X", "&#88;"),
		Pair("Y", "&#89;"),
		Pair("Z", "&#90;"),
		Pair("_", "&#95;"),
		Pair("`", "&#96;"),
		Pair("a", "&#97;"),
		Pair("b", "&#98;"),
		Pair("c", "&#99;"),
		Pair("d", "&#100;"),
		Pair("e", "&#101;"),
		Pair("f", "&#102;"),
		Pair("g", "&#103;"),
		Pair("h", "&#104;"),
		Pair("i", "&#105;"),
		Pair("j", "&#106;"),
		Pair("k", "&#107;"),
		Pair("l", "&#108;"),
		Pair("m", "&#109;"),
		Pair("n", "&#110;"),
		Pair("o", "&#111;"),
		Pair("p", "&#112;"),
		Pair("q", "&#113;"),
		Pair("r", "&#114;"),
		Pair("s", "&#115;"),
		Pair("t", "&#116;"),
		Pair("u", "&#117;"),
		Pair("v", "&#118;"),
		Pair("w", "&#119;"),
		Pair("x", "&#120;"),
		Pair("y", "&#121;"),
		Pair("z", "&#122;")
	]);
}

escapeHtml(s) {
	// & < > " ' as &amp; &lt; &gt; &quot; &#39;
	r = \from,to -> \t -> strReplace(t, from, to);
	s
	|> r("&", "&amp;")
	|> r("<", "&lt;")
	|> r(">", "&gt;")
	|> r("\"", "&quot;")
	|> r("'", "&#39;")
}

escapeHtml2(s) {
	// & < > " ' as &amp; &lt; &gt; &quot; &#39;
	r = \from,to -> \t -> strReplace(t, from, to);
	s
	|> r("&", "&amp;")
	|> r("<", "&lt;")
	|> r(">", "&gt;")
	|> r("\"", "&quot;")
	|> r("'", "&#39;")
    |> r("&amp;nbsp;", "&nbsp;")
    |> r("\n", "<br>")
}

unescapeHtml(s) {
	// & < > " ' as &amp; &lt; &gt; &quot; &#39;
	r = \to, from -> \t -> strReplace(t, from, to);
	s
	|> r("'", "&#39;")
	|> r("\"", "&quot;")
	|> r(">", "&gt;")
	|> r("<", "&lt;")
	|> r("&", "&amp;")
}

allHtmlEntities : ref Tree<string, string> = ref makeTree();

unescapeHtml2(s) {
	if (^allHtmlEntities == makeTree()) {
		allHtmlEntities := fold([
				//See this reference:
				// http://www.w3.org/TR/html4/sgml/entities.html
				// http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references
				// name, symbol
				["iexcl", "¡"],
				["cent", "¢"],
				["pound", "£"],
				["curren", "¤"],
				["yen", "¥"],
				["brvbar", "¦"],
				["sect", "§"],
				["uml", "¨"],
				["copy", "©"],
				["ordf", "ª"],

				["laquo", "«"],
				["not", "¬"],
				["shy", "\u00AD"],
				["reg", "®"],
				["macr", "¯"],
				["deg", "°"],
				["plusmn", "±"],
				["sup2", "²"],
				["sup3", "³"],
				["acute", "´"],
				["micro", "µ"],
				["para", "¶"],
				["middot", "·"],
				["cedil", "¸"],
				["sup1", "¹"],
				["ordm", "º"],
				["raquo", "»"],
				["frac14", "¼"],
				["frac12", "½"],
				["frac34", "¾"],
				["iquest", "¿"],

				["Agrave", "À"],
				["Aacute", "Á"],
				["Acirc", "Â"],
				["Atilde", "Ã"],
				["Auml", "Ä"],
				["Aring", "Å"],
				["AElig", "Æ"],
				["Ccedil", "Ç"],
				["Egrave", "È"],
				["Eacute", "É"],
				["Ecirc", "Ê"],
				["Euml", "Ë"],
				["Igrave", "Ì"],
				["Iacute", "Í"],
				["Icirc", "Î"],
				["Iuml", "Ï"],
				["ETH", "Ð"],
				["Ntilde", "Ñ"],
				["Ograve", "Ò"],
				["Oacute", "Ó"],
				["Ocirc", "Ô"],
				["Otilde", "Õ"],
				["Ouml", "Ö"],
				["times", "×"],
				["Oslash", "Ø"],
				["Ugrave", "Ù"],
				["Uacute", "Ú"],
				["Ucirc", "Û"],
				["Uuml", "Ü"],
				["Yacute", "Ý"],
				["THORN", "Þ"],
				["szlig", "ß"],
				["agrave", "à"],
				["aacute", "á"],
				["acirc", "â"],
				["apos", "'"],
				["atilde", "ã"],
				["auml", "ä"],
				["aring", "å"],
				["aelig", "æ"],
				["ccedil", "ç"],
				["egrave", "è"],
				["eacute", "é"],
				["ecirc", "ê"],
				["euml", "ë"],
				["igrave", "ì"],
				["iacute", "í"],
				["icirc", "î"],
				["iuml", "ï"],
				["eth", "ð"],
				["ntilde", "ñ"],
				["ograve", "ò"],
				["oacute", "ó"],
				["ocirc", "ô"],
				["otilde", "õ"],
				["ouml", "ö"],
				["divide", "÷"],
				["oslash", "ø"],
				["ugrave", "ù"],
				["uacute", "ú"],
				["ucirc", "û"],
				["uuml", "ü"],
				["yacute", "ý"],
				["thorn", "þ"],
				["yuml", "ÿ"],
				["OElig", "Œ"],
				["oelig", "œ"],
				["Scaron", "Š"],
				["scaron", "š"],
				["Yuml", "Ÿ"],
				["fnof", "ƒ"],

				["circ", "ˆ"],
				["tilde", "˜"],

				["Alpha", "Α"],
				["Beta", "Β"],
				["Gamma", "Γ"],
				["Delta", "Δ"],
				["Epsilon", "Ε"],
				["Zeta", "Ζ"],
				["Eta", "Η"],
				["Theta", "Θ"],
				["Iota", "Ι"],
				["Kappa", "Κ"],
				["Lambda", "Λ"],
				["Mu", "Μ"],
				["Nu", "Ν"],
				["Xi", "Ξ"],
				["Omicron", "Ο"],
				["Pi", "Π"],
				["Rho", "Ρ"],
				["Sigma", "Σ"],
				["Tau", "Τ"],
				["Upsilon", "Υ"],
				["Phi", "Φ"],
				["Chi", "Χ"],
				["Psi", "Ψ"],
				["Omega", "Ω"],
				["alpha", "α"],
				["beta", "β"],
				["gamma", "γ"],
				["delta", "δ"],
				["epsilon", "ε"],
				["zeta", "ζ"],
				["eta", "η"],
				["theta", "θ"],
				["iota", "ι"],
				["kappa", "κ"],
				["lambda", "λ"],
				["mu", "μ"],
				["nu", "ν"],
				["xi", "ξ"],
				["omicron", "ο"],
				["pi", "π"],
				["rho", "ρ"],
				["sigmaf", "ς"],
				["sigma", "σ"],
				["tau", "τ"],
				["upsilon", "υ"],
				["phi", "φ"],
				["chi", "χ"],
				["psi", "ψ"],
				["omega", "ω"],
				["thetasym", "ϑ"],
				["upsih", "ϒ"],
				["piv", "ϖ"],

				["ensp", "\u2002"],
				["emsp", "\u2003"],
				["thinsp", "\u2009"],
				["zwnj", "\u200c"],
				["zwj", "\u200d"],
				["lrm", "\u200e"],
				["rlm", "\u200f"],

				["ndash", "–"],
				["mdash", "—"],
				["lsquo", "‘"],
				["rsquo", "’"],
				["sbquo", "‚"],
				["ldquo", "“"],
				["rdquo", "”"],
				["bdquo", "„"],
				["dagger", "†"],
				["Dagger", "‡"],
				["bull", "•"],
				["hellip", "…"],
				["permil", "‰"],
				["prime", "′"],
				["Prime", "″"],
				["lsaquo", "‹"],
				["rsaquo", "›"],
				["oline", "‾"],
				["frasl", "⁄"],
				["euro", "€"],
				["image", "ℑ"],
				["weierp", "℘"],
				["real", "ℜ"],
				["trade", "™"],
				["alefsym", "ℵ"],
				["larr", "←"],
				["uarr", "↑"],
				["rarr", "→"],
				["darr", "↓"],
				["harr", "↔"],
				["crarr", "↵"],
				["lArr", "⇐"],
				["uArr", "⇑"],
				["rArr", "⇒"],
				["dArr", "⇓"],
				["hArr", "⇔"],
				["forall", "∀"],
				["part", "∂"],
				["exist", "∃"],
				["empty", "∅"],
				["nabla", "∇"],
				["isin", "∈"],
				["notin", "∉"],
				["ni", "∋"],
				["prod", "∏"],
				["sum", "∑"],
				["minus", "−"],
				["lowast", "∗"],
				["radic", "√"],
				["prop", "∝"],
				["infin", "∞"],
				["ang", "∠"],
				["and", "∧"],
				["or", "∨"],
				["cap", "∩"],
				["cup", "∪"],
				["int", "∫"],
				["there4", "∴"],
				["sim", "∼"],
				["cong", "≅"],
				["asymp", "≈"],
				["ne", "≠"],
				["equiv", "≡"],
				["le", "≤"],
				["ge", "≥"],
				["sub", "⊂"],
				["sup", "⊃"],
				["nsub", "⊄"],
				["sube", "⊆"],
				["supe", "⊇"],
				["oplus", "⊕"],
				["otimes", "⊗"],
				["perp", "⊥"],
				["sdot", "⋅"],
				["vellip", "⋮"],
				["lceil", "⌈"],
				["rceil", "⌉"],
				["lfloor", "⌊"],
				["rfloor", "⌋"],
				["lang", "〈"],
				["rang", "〉"],
				["loz", "◊"],
				["spades", "♠"],
				["clubs", "♣"],
				["hearts", "♥"],
				["diams", "♦"],
			], makeTree(), \acc, e -> {
				setTree(acc, "&" + e[0], e[1])
			});
	}

	doUnescapeHtml("", s, false);
}

unescapeNumericHtml(s) {
	doUnescapeHtml("", s, true);
}

doUnescapeHtml(acc : string, s : string, numericOnly : bool) -> string {
	i = strIndexOf(s, "&");
	if (i == -1) acc + s else {
		left = acc + strLeft(s, i);
		right = strRight(s, i);
		semi = strIndexOf(right, ";");
		if (semi == -1) {
			left + right
		} else {
			esca = strLeft(right, semi);
			after = strRight(right, semi + 1);
			if (startsWith(esca, "&#x")) {
				// Hex
				c = fromCharCode(parseHex(strRight(esca, 3)));
				doUnescapeHtml(left + c, after, numericOnly)
			} else if (startsWith(esca, "&#")) {
				// Decimal
				c = fromCharCode(s2i(strRight(esca, 2)));
				doUnescapeHtml(left + c, after, numericOnly)
			} else if (!numericOnly){
				c = if (esca == "&nbsp") "\u00a0"
				else if (esca == "&amp") "&"
				else if (esca == "&lt") "<"
				else if (esca == "&gt") ">"
				else if (esca == "&quot") "\""
				else {
					e = lookupTreeDef(^allHtmlEntities, esca, "");
					if (e == "")
						esca + ";"
					else e;
				}
				doUnescapeHtml(left + c, after, numericOnly)
			} else {
				doUnescapeHtml(left + esca + ";", after, numericOnly)
			}
		}
	}
}

urlEncode(s) {
	// refers to http://www.december.com/html/spec/esccodes.html
	strReplaces(s, [
		"%", "%25", // important to be first
		" ", "%20",
		"\"", "%22", //needed for link be clickable
		"<", "%3C",
		">", "%3E",
		"#", "%23",
		"{", "%7B",
		"}", "%7D",
		"|", "%7C",
		"\\", "%5C",
		"^", "%5E",
		"~","%7E",
		"[","%5B",
		"]","%5D",
		"`","%60",
		";","%3B",
		"/","%2F",
		"?","%3F",
		":","%3A",
		"@","%40",
		"=","%3D",
		"&","%26",
		"$","%24",
		"'","%27",
		"‐", "%E2%80%90",	// U+2010 HYPHEN
		"‑", "%E2%80%91",	// U+2011 NON-BREAKING HYPHEN
		"‒", "%E2%80%92",	// U+2012 FIGURE DASH
		"–", "%E2%80%93",	// U+2013 EN DASH
		"—", "%E2%80%94",	// U+2014 EM DASH
		"―", "%E2%80%95",	// U+2015 HORIZONTAL BAR
		"™", "%E2%84%A2",
		"\n", "%0A",
	])
}

urlDecode(s) {
	urlDecode0("", s)
}

urlDecode0(acc, s) {
	percent = strIndexOf(s, "%");
	if (percent == -1) {
		acc + s;
	} else {
		left = strLeft(s, percent);
		right = strRight(s, percent);
		percentPair = extractPercentHex(right);
		hexcode = percentPair.first;
		c = if (hexcode < 0xC0) {
			percentPair
		} else {
			// OK, it must be UTF-8 encoded
			if (0xC0 <= hexcode && hexcode <= 0xDF) {
				// 2 bytes
				secondByte = extractPercentHex(percentPair.second);
				if (secondByte.first == -1) {
					// OK, it is some crap, because we expect a second percent here
					percentPair
				} else {
					Pair((hexcode - 192) * 64 + (secondByte.first - 128), secondByte.second)
				}
			} else if (hexcode <= 0xEF) { // 3 bytes
				secondByte = extractPercentHex(percentPair.second);
				thirdByte = extractPercentHex(secondByte.second);
				if (secondByte.first == -1 || thirdByte.first == -1) {
					// OK, it is some crap, because we expect a second and third percent here
					percentPair
				} else {
					Pair((hexcode - 224) * 4096
						+ (secondByte.first - 128) * 64
						+ (thirdByte.first - 128),
						thirdByte.second
					)
				}
			} else if (hexcode <= 0xF7) { // 4 bytes
				secondByte = extractPercentHex(percentPair.second);
				thirdByte = extractPercentHex(secondByte.second);
				fourthByte = extractPercentHex(thirdByte.second);
				if (secondByte.first == -1 || thirdByte.first == -1 || fourthByte.first == -1) {
					// Crap. We need 4 bytes
					percentPair
				} else {
					Pair((hexcode - 240) * 262144
						+ (secondByte.first - 128) * 4096
						+ (thirdByte.first - 128) * 64
						+ (fourthByte.first - 128),
						fourthByte.second
					)
				}
			} else {
				// TODO: We did not implement support for 6 bytes
				percentPair
			}
		};

		urlDecode0(acc + left + fromCharCode(c.first), c.second);
	}
}

// If a string starts with %, extract the hex-digit after it
extractPercentHex(s : string) -> Pair<int, string> {
	if (getCharAt(s, 0) == "%") {
		Pair(parseHex(substring(s, 1, 2)), strRight(s, 3));
	} else {
		Pair(-1, s);
	}
}

urlEncode2(s) {
	strReplace(urlEncode(s), "+", "%2B");
}

urlDecode2(s) {
	urlDecode(strReplace(strReplace(s, "+", " "), "%2B", "+"));
}

encode2htmlentities(s : string) {
	stringFoldChar(s, "", \acc, c -> acc + lookupTreeDef(htmlentityCodeTree, c, c));
}
