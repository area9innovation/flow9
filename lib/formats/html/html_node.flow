// Â© Copyright 2011 Area9 Technologies.

import formats/html/html;
import lingo/compiler/syntaxtree_util;
import formats/html/parser/ast;
import formats/html/parser/parser;

export {
	HtmlNode ::= HtmlTag, HtmlText, HtmlEntity, HtmlComment;
		HtmlTag(
			tag: string,
			attribs: [HtmlAttrib],
			children: [HtmlNode]
		);
		HtmlAttrib(key: string, val: string);
		HtmlText(text: string);
		HtmlComment(text: string);
		HtmlEntity(
			prefix : string, // Prefixes: &# - decimal, &#x - hex, & - string
			body : string    // codes:    8828,         22A4       forall
		);

	// Converts the HTML nodes back to a string (inverse function to `parseHtml`);
	html2s(html : [HtmlNode]) -> string;
	htmlNode2s(elem : HtmlNode) -> string;

	// Unescape the underlying HTML entity
	unescapeHtmlEntity(entity : HtmlEntity) -> string;
}


html2s(html : [HtmlNode]) -> string {
	concatStrings(map(html, htmlNode2s));
}

htmlNode2s(elem : HtmlNode) -> string {
	switch (elem) {
		HtmlTag(tag, attribs, body): {
			attribs_s = concatStrings(
				mapi(attribs, \i, attr -> 
					attr.key + "='" + attr.val + "'" + if (i + 1 != length(attribs)) " " else ""
				)
			);
			if (length(body) > 0) {
				open_tag = "<" + tag + (if (length(attribs) == 0) "" else " ") + attribs_s + ">";
				close_tag = "</" + tag + ">";
				open_tag + html2s(body) + close_tag;
			} else {
				"<" + tag + (if (length(attribs) == 0) "" else " ") + attribs_s + "/>"
			}
		}
		HtmlText(text):       text;
		HtmlComment(text):    "<!--" + text + "-->";
		HtmlEntity(prefix, body): prefix + body + ";";
	}
}

unescapeHtmlEntity(entity : HtmlEntity) -> string {
	if (entity.prefix == "&#") {
		fromCharCode(s2i(entity.body)); // like &#8828,
	} else if (entity.prefix == "&#x") {
		fromCharCode(parseHex(entity.body)); // like &#x22A4;
	} else {
		unescapeHtml2("&" + entity.body + ";"); // like &forall;
	}
}
