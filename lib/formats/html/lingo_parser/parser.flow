import string;
import lingo/compiler/syntaxtree_types;
import formats/html/lingo_parser/ast_mnemonics;

export {
	parse_html_source(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_html_source(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [], noExpectError);
	r = do_parse_html_html_source(acc);
	Pair(r, acc.expect);
}
do_parse_html_html_source(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_html_html_element);
	SyntaxTree(st_html_source, 0, i, acc.i, [c0]);
}

do_parse_html_html_element(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_html_html_entity(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_html_html_tag(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_html_html_comment(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_html_html_text(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_html_element, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_html_html_text(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_html_html_text__auto35);
	if (length(c0) >= 1) {
		SyntaxTree(st_html_text, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one html_text$auto35"
		updateExpectError(acc, "", "html_text$auto35", i);
		failSyntaxTree;
	}
}

do_parse_html_html_comment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "<!--", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_html_html_comment_text(acc);
		if (c1.choice != -1) {
			if (strRangeIndexOf(acc.input, "-->", acc.i, acc.i + 3) == acc.i) {
				acc.i ::= acc.i + 3;
				SyntaxTree(st_html_comment, 0, i, acc.i, [[c1]]);
			} else {
				// "Expected '-->'"
				updateExpectError(acc, "", "-->", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected '<!--'"
		updateExpectError(acc, "", "<!--", i);
		failSyntaxTree;
	}
}

do_parse_html_html_comment_text(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_html_html_comment_text__auto36);
	SyntaxTree(st_html_comment_text, 0, i, acc.i, [c0]);
}

do_parse_html_html_entity(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_entity_prefix(acc);
	if (c0.choice != -1) {
		c1 = do_parse_html_html_entity_body(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_html_html_entity__auto37(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_html_entity, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_html_html_entity_prefix(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_html_html_entity_prefix__choice29(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_html_html_entity_body(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_html_html_entity_body__choice30);
	if (length(c0) >= 1) {
		SyntaxTree(st_html_entity_body, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one html_entity_body$choice30"
		updateExpectError(acc, "", "html_entity_body$choice30", i);
		failSyntaxTree;
	}
}

do_parse_html_html_tag(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_tag_open(acc);
	if (c0.choice != -1) {
		c1 = do_parse_html_html_id(acc);
		if (c1.choice != -1) {
			c2 = do_parse_html_html_ws(acc);
			if (c2.choice != -1) {
				c3 = SyntaxStar(acc, do_parse_html_html_attrib);
				c4 = do_parse_html_html_tag_close(acc);
				if (c4.choice != -1) {
					SyntaxTree(st_html_tag, 0, i, acc.i, [[c0], [c1], [c2], c3, [c4]]);
				} else c4
			} else c2
		} else c1
	} else c0
}

do_parse_html_html_tag_open(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_html_html_tag_open__choice31(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_html_html_tag_close(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_html_html_tag_close__choice32(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_html_html_attrib(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_html_html_attrib1(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_html_html_attrib2(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_html_html_attrib3(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_html_html_attrib4(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_html_attrib, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_html_html_attrib1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_html_html_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_html_html_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_html_html_attrib1_val(acc);
						if (c5.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
								acc.i ::= acc.i + 1;
								c7 = do_parse_html_html_ws(acc);
								if (c7.choice != -1) {
									SyntaxTree(st_html_attrib1, 0, i, acc.i, [[c0], [c1], [c3], [c5], [c7]]);
								} else c7
							} else {
								// "Expected '''"
								updateExpectError(acc, "", "'", i);
								failSyntaxTree;
							}
						} else c5
					} else {
						// "Expected '''"
						updateExpectError(acc, "", "'", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '='"
				updateExpectError(acc, "", "=", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_html_html_attrib1_val(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_html_html_attrib1_val__auto38);
	SyntaxTree(st_html_attrib1_val, 0, i, acc.i, [c0]);
}

do_parse_html_html_attrib2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_html_html_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_html_html_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_html_html_attrib2_val(acc);
						if (c5.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
								acc.i ::= acc.i + 1;
								c7 = do_parse_html_html_ws(acc);
								if (c7.choice != -1) {
									SyntaxTree(st_html_attrib2, 0, i, acc.i, [[c0], [c1], [c3], [c5], [c7]]);
								} else c7
							} else {
								// "Expected '\"'"
								updateExpectError(acc, "", "\"", i);
								failSyntaxTree;
							}
						} else c5
					} else {
						// "Expected '\"'"
						updateExpectError(acc, "", "\"", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '='"
				updateExpectError(acc, "", "=", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_html_html_attrib2_val(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_html_html_attrib2_val__auto39);
	SyntaxTree(st_html_attrib2_val, 0, i, acc.i, [c0]);
}

do_parse_html_html_attrib3(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_html_html_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_html_html_ws(acc);
				if (c3.choice != -1) {
					c4 = do_parse_html_html_attrib3_val(acc);
					if (c4.choice != -1) {
						c5 = do_parse_html_html_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_html_attrib3, 0, i, acc.i, [[c0], [c1], [c3], [c4], [c5]]);
						} else c5
					} else c4
				} else c3
			} else {
				// "Expected '='"
				updateExpectError(acc, "", "=", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_html_html_attrib3_val(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_html_html_attrib3_val__choice33);
	if (length(c0) >= 1) {
		SyntaxTree(st_html_attrib3_val, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one html_attrib3_val$choice33"
		updateExpectError(acc, "", "html_attrib3_val$choice33", i);
		failSyntaxTree;
	}
}

do_parse_html_html_attrib4(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_html_html_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_html_attrib4, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_html_html_dec_digit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_html_dec_digit, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_html_html_hex_digit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_html_html_dec_digit(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 70}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_html_hex_digit, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 102}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_html_hex_digit, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_html_hex_digit, -1, i, i, [])
			}

		}

	}

}

do_parse_html_html_letter(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 122}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_html_letter, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 90}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_html_letter, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_html_letter, -1, i, i, [])
		}

	}

}

do_parse_html_html_id(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_id__auto40(acc);
	if (c0.choice != -1) {
		SyntaxTree(st_html_id, 0, i, acc.i, [[c0]]);
	} else c0
}

do_parse_html_html_s(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_html_html_ws_);
	if (length(c0) >= 1) {
		SyntaxTree(st_html_s, 0, i, acc.i, []);
	} else {
		// "Expected at least one html_ws_"
		updateExpectError(acc, "", "html_ws_", i);
		failSyntaxTree;
	}
}

do_parse_html_html_ws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_html_html_ws_);
	SyntaxTree(st_html_ws, 0, i, acc.i, []);
}

do_parse_html_html_ws_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_html_ws_, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_html_ws_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_html_ws_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 13 /*  */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_html_ws_, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_html_ws_, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_html_html_any(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_html_any, 0, i, acc.i, []);
	} else {
		// "Expected ' '-'￿'"
		updateExpectError(acc, "", "' '-'￿'", i);
		failSyntaxTree;
	}
}

do_parse_html_html_text__choice27(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_html_html_letter(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_html_html_letter(acc);
				if (c1.choice != -1) {
					SyntaxTree(st_html_text__choice27, 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (strRangeIndexOf(acc.input, "!--", acc.i, acc.i + 3) == acc.i) {
					acc.i ::= acc.i + 3;
					SyntaxTree(st_html_text__choice27, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_html_text__choice27, -1, i, i, [])
			}

		}

	}

}

do_parse_html_html_text__choice28(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 60 /* < */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_html_html_text__choice27(acc);
			if (c1.choice != -1) {
				SyntaxTree(st_html_text__choice28, 0, i, acc.i, [[c1]]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 38 /* & */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_html_html_s(acc);
				if (c1.choice == -1) {
					SyntaxTree(st_html_text__choice28, 1, i, acc.i, []);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_html_text__choice28, -1, i, i, [])
		}

	}

}

do_parse_html_html_entity_prefix__choice29(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "&#x", acc.i, acc.i + 3) == acc.i) {
			acc.i ::= acc.i + 3;
			SyntaxTree(st_html_entity_prefix__choice29, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 38 && getCharCodeAt(acc.input, acc.i + 1) == 35 /* &# */) {
				acc.i ::= acc.i + 2;
				SyntaxTree(st_html_entity_prefix__choice29, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 38 /* & */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_html_entity_prefix__choice29, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_html_entity_prefix__choice29, -1, i, i, [])
			}

		}

	}

}

do_parse_html_html_entity_body__choice30(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_html_html_hex_digit(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_html_html_letter(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_html_entity_body__choice30, -1, i, i, [])
		}

	}

}

do_parse_html_html_tag_open__choice31(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 60 && getCharCodeAt(acc.input, acc.i + 1) == 47 /* </ */) {
			acc.i ::= acc.i + 2;
			SyntaxTree(st_html_tag_open__choice31, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 60 /* < */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_html_tag_open__choice31, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_html_tag_open__choice31, -1, i, i, [])
		}

	}

}

do_parse_html_html_tag_close__choice32(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* /> */) {
			acc.i ::= acc.i + 2;
			SyntaxTree(st_html_tag_close__choice32, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_html_tag_close__choice32, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_html_tag_close__choice32, -1, i, i, [])
		}

	}

}

do_parse_html_html_attrib3_val__choice33(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_html_html_letter(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_html_html_dec_digit(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_html_attrib3_val__choice33, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_html_attrib3_val__choice33, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_html_attrib3_val__choice33, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_html_html_id__choice34(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_html_html_letter(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_html_html_dec_digit(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_html_id__choice34, -1, i, i, [])
		}

	}

}

do_parse_html_html_text__auto35(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_text__choice28(acc);
	if (c0.choice == -1) {
		c1 = do_parse_html_html_any(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_html_text__auto35, 0, i, acc.i, [[c1]]);
		} else c1
	} else SyntaxTree(st_DidNotExpecthtml_html_text__choice28, -1, 0, acc.i, []);
}

do_parse_html_html_comment_text__auto36(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "-->", acc.i, acc.i + 3) == acc.i) {
		SyntaxTree(-45, -1, i, i, [])
	} else {
		c1 = do_parse_html_html_any(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_html_comment_text__auto36, 0, i, acc.i, [[c1]]);
		} else c1
	}
}

do_parse_html_html_entity__auto37(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_ws(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_html_entity__auto37, 0, i, acc.i, [[c0]]);
		} else {
			// "Expected ';'"
			updateExpectError(acc, "", ";", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_html_html_attrib1_val__auto38(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
		SyntaxTree(-39, -1, i, i, [])
	} else {
		c1 = do_parse_html_html_any(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_html_attrib1_val__auto38, 0, i, acc.i, [[c1]]);
		} else c1
	}
}

do_parse_html_html_attrib2_val__auto39(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
		SyntaxTree(-34, -1, i, i, [])
	} else {
		c1 = do_parse_html_html_any(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_html_attrib2_val__auto39, 0, i, acc.i, [[c1]]);
		} else c1
	}
}

do_parse_html_html_id__auto40(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_html_html_letter(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_html_html_id__choice34);
		SyntaxTree(st_html_id__auto40, 0, i, acc.i, [[c0], c1]);
	} else c0
}

