import lingo/compiler/syntaxtree_types;
import formats/html/parser/ast_mnemonics;

export {
	get_html_source_html_element_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_text(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_comment(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_comment_text(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity_prefix(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity_body(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag_open(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag_close(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_attrib1(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib1_val(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib2(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib2_val(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib3(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib3_val(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib4(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_dec_digit(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_hex_digit(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_letter(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_id(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_ws(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_ws__s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_any(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_text__choice27(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_text__choice28(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity_prefix__choice29(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity_body__choice30(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity_body__choice30_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_tag_open__choice31(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_tag_close__choice32(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib3_val__choice33(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib3_val__choice33_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_id__choice34(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_id__choice34_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_text__auto35(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_text__auto35_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_comment_text__auto36(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_comment_text__auto36_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_entity__auto37(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_entity__auto37_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_attrib1_val__auto38(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib1_val__auto38_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_attrib2_val__auto39(st : SyntaxTree) -> SyntaxTree;
	get_html_source_html_attrib2_val__auto39_s(st : SyntaxTree) -> [SyntaxTree];
	get_html_source_html_id__auto40(st : SyntaxTree) -> SyntaxTree;

}

get_html_source_html_text(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_comment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_comment_text(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_comment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_entity(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_entity_prefix(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_entity) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_entity_body(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_entity) {
		st.children[1][0];
	} else failSyntaxTree
}
get_html_source_html_tag(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_html_element) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_tag_open(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_tag) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_tag_close(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_tag) {
		st.children[4][0];
	} else failSyntaxTree
}
get_html_source_html_attrib1(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib1_val(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[3][0];
	} else failSyntaxTree
}
get_html_source_html_attrib2(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib2_val(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[3][0];
	} else failSyntaxTree
}
get_html_source_html_attrib3(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib3_val(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[3][0];
	} else failSyntaxTree
}
get_html_source_html_attrib4(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_html_attrib) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_dec_digit(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_hex_digit) {
		st.children[0][0];
	} else if (get_html_source_html_attrib3_val__choice33(st) != failSyntaxTree) {
		get_html_source_html_attrib3_val__choice33(st);
	} else if (get_html_source_html_id__choice34(st) != failSyntaxTree) {
		get_html_source_html_id__choice34(st);
	} else failSyntaxTree
}
get_html_source_html_hex_digit(st : SyntaxTree) -> SyntaxTree {
	if (get_html_source_html_entity_body__choice30(st) != failSyntaxTree) {
		get_html_source_html_entity_body__choice30(st);
	} else failSyntaxTree
}
get_html_source_html_letter(st : SyntaxTree) -> SyntaxTree {
	if (get_html_source_html_text__choice27(st) != failSyntaxTree) {
		get_html_source_html_text__choice27(st);
	} else if (get_html_source_html_text__choice27(st).choice == 1) {
		get_html_source_html_text__choice27(st).children[0][0];
	} else if (get_html_source_html_entity_body__choice30(st) != failSyntaxTree) {
		get_html_source_html_entity_body__choice30(st);
	} else if (get_html_source_html_attrib3_val__choice33(st) != failSyntaxTree) {
		get_html_source_html_attrib3_val__choice33(st);
	} else if (get_html_source_html_id__choice34(st) != failSyntaxTree) {
		get_html_source_html_id__choice34(st);
	} else if (get_html_source_html_id__auto40(st).choice == 0) {
		get_html_source_html_id__auto40(st).children[0][0];
	} else failSyntaxTree
}
get_html_source_html_id(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_tag) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib4) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_ws(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_source) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_html_tag) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib1) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib2) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib3) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_html_attrib4) {
		st.children[1][0];
	} else if (get_html_source_html_entity__auto37(st).choice == 0) {
		get_html_source_html_entity__auto37(st).children[0][0];
	} else failSyntaxTree
}
get_html_source_html_any(st : SyntaxTree) -> SyntaxTree {
	if (get_html_source_html_text__auto35(st).choice == 0) {
		get_html_source_html_text__auto35(st).children[0][0];
	} else if (get_html_source_html_comment_text__auto36(st).choice == 0) {
		get_html_source_html_comment_text__auto36(st).children[0][0];
	} else if (get_html_source_html_attrib1_val__auto38(st).choice == 0) {
		get_html_source_html_attrib1_val__auto38(st).children[0][0];
	} else if (get_html_source_html_attrib2_val__auto39(st).choice == 0) {
		get_html_source_html_attrib2_val__auto39(st).children[0][0];
	} else failSyntaxTree
}
get_html_source_html_text__choice27(st : SyntaxTree) -> SyntaxTree {
	if (get_html_source_html_text__choice28(st).choice == 0) {
		get_html_source_html_text__choice28(st).children[0][0];
	} else failSyntaxTree
}
get_html_source_html_text__choice28(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_entity_prefix__choice29(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_entity_prefix) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_entity_body__choice30(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_tag_open__choice31(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_tag_open) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_tag_close__choice32(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_tag_close) {
		st.children[0][0];
	} else failSyntaxTree
}
get_html_source_html_attrib3_val__choice33(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_id__choice34(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_text__auto35(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_comment_text__auto36(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_entity__auto37(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_attrib1_val__auto38(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_attrib2_val__auto39(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_html_source_html_id__auto40(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_html_id) {
		st.children[0][0];
	} else failSyntaxTree
}

get_html_source_html_element_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_source) {
		st.children[1];
	} else []
}
get_html_source_html_attrib_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_tag) {
		st.children[3];
	} else []
}
get_html_source_html_ws__s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_s) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_html_ws) {
		st.children[0];
	} else []
}
get_html_source_html_entity_body__choice30_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_entity_body) {
		st.children[0];
	} else []
}
get_html_source_html_attrib3_val__choice33_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_attrib3_val) {
		st.children[0];
	} else []
}
get_html_source_html_id__choice34_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_html_source_html_id__auto40(st).choice == 0) {
		get_html_source_html_id__auto40(st).children[1];
	} else []
}
get_html_source_html_text__auto35_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_text) {
		st.children[0];
	} else []
}
get_html_source_html_comment_text__auto36_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_comment_text) {
		st.children[0];
	} else []
}
get_html_source_html_entity__auto37_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_entity) {
		st.children[2];
	} else []
}
get_html_source_html_attrib1_val__auto38_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_attrib1_val) {
		st.children[0];
	} else []
}
get_html_source_html_attrib2_val__auto39_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_html_attrib2_val) {
		st.children[0];
	} else []
}

