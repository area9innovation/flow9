// Produced by  flowcpp gringo/gringo.flow -- file=formats/html/parser/html.gringo compile=1
import text/gringo/dcode_lib;
import string;

export {
	html_parse_source(acc : DParseAcc<?>) -> bool;
}


html_parse_source(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		addVerbatim(acc, "nil");
		parseStar(acc, \ -> {
			{
				pushDCheckpoint(acc);
				if (html_parse_node(acc)) {
					{
						addVerbatim(acc, "cons");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		});
		addVerbatim(acc, "source_1");
		discardDCheckpoint(acc)
	}
}

html_parse_node(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (html_parse_entity(acc) || (html_parse_script(acc) || (html_parse_tag(acc) || (html_parse_comment(acc) || html_parse_text(acc))))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_script(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if ((matchString(acc, "<") && ((html_parse_ws(acc) && ((matchString(acc, "script") && html_parse_ws(acc))))))) {
			{
				addVerbatim(acc, "nil");
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if (html_parse_attrib(acc)) {
							{
								addVerbatim(acc, "cons");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				if (matchString(acc, ">")) {
					{
						acc.starti ::= acc.i;
						parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (((if (if ((matchString(acc, "</") && ((html_parse_ws(acc) && ((matchString(acc, "script") && ((html_parse_ws(acc) && matchString(acc, ">"))))))))) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}) {
									restoreDCheckpoint(acc)
								} else {
									{
										restoreDCheckpoint(acc);
										true
									}
								}) && html_parse_any(acc))) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						});
						addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "<") && ((html_parse_ws(acc) && matchString(acc, "script>"))))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						};
						addVerbatim(acc, "script_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_text(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		acc.starti ::= acc.i;
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (if (((if (if (if (matchString(acc, "<")) {
			{
				pushDCheckpoint(acc);
				if (if (html_parse_id_letter(acc)) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if ((if ((matchString(acc, "/") && html_parse_id_letter(acc))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}) || matchString(acc, "!--")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (matchString(acc, "&")) {
					{
						pushDCheckpoint(acc);
						if (if (html_parse_s(acc)) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}) {
			restoreDCheckpoint(acc)
		} else {
			{
				restoreDCheckpoint(acc);
				true
			}
		}) && html_parse_any(acc))) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (((if (if (if (matchString(acc, "<")) {
							{
								pushDCheckpoint(acc);
								if (if (html_parse_id_letter(acc)) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if ((if ((matchString(acc, "/") && html_parse_id_letter(acc))) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}) || matchString(acc, "!--")) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									}
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if (matchString(acc, "&")) {
									{
										pushDCheckpoint(acc);
										if (if (html_parse_s(acc)) {
											restoreDCheckpoint(acc)
										} else {
											{
												restoreDCheckpoint(acc);
												true
											}
										}) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						}) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) && html_parse_any(acc))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) {
			{
				addVerbatim(acc, "text_1");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_comment(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, "<!--")) {
			{
				acc.starti ::= acc.i;
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (((if (matchString(acc, "-->")) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) && html_parse_any(acc))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
				if (matchString(acc, "-->")) {
					{
						addVerbatim(acc, "comment_1");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_entity(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		acc.starti ::= acc.i;
		if (if (matchString(acc, "&#x") || (matchString(acc, "&#") || matchString(acc, "&"))) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) {
			{
				acc.starti ::= acc.i;
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (if (html_parse_hex_digit(acc) || html_parse_letter(acc)) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}) {
					{
						parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if (html_parse_hex_digit(acc) || html_parse_letter(acc)) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						});
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
				} else {
					false
				}) {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (if ((html_parse_ws(acc) && matchString(acc, ";"))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						};
						addVerbatim(acc, "entity_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_tag(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		acc.starti ::= acc.i;
		if (((if (matchString(acc, "</") || matchString(acc, "<")) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && ((html_parse_ws(acc) && ((html_parse_id(acc) && html_parse_ws(acc))))))) {
			{
				addVerbatim(acc, "nil");
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if (html_parse_attrib(acc)) {
							{
								addVerbatim(acc, "cons");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				acc.starti ::= acc.i;
				if (if (matchString(acc, "/>") || matchString(acc, ">")) {
					addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
				} else {
					false
				}) {
					{
						addVerbatim(acc, "tag_4");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_attrib(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if ((html_parse_key(acc) && ((html_parse_ws(acc) && ((html_parse_val(acc) && html_parse_ws(acc))))))) {
			{
				addVerbatim(acc, "attrib_2");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_key(acc : DParseAcc<?>) -> bool {
	{
		acc.starti ::= acc.i;
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (((if (if (html_parse_s(acc) || (matchString(acc, "=") || (matchString(acc, ">") || matchString(acc, "/")))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}) {
			restoreDCheckpoint(acc)
		} else {
			{
				restoreDCheckpoint(acc);
				true
			}
		}) && html_parse_any(acc))) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (((if (if (html_parse_s(acc) || (matchString(acc, "=") || (matchString(acc, ">") || matchString(acc, "/")))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) && html_parse_any(acc))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}
	}
}

html_parse_id(acc : DParseAcc<?>) -> bool {
	{
		acc.starti ::= acc.i;
		pushDCheckpoint(acc);
		if (if (html_parse_id_letter(acc)) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (((if (if (html_parse_s(acc) || (matchString(acc, ">") || matchString(acc, "/"))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}) {
							restoreDCheckpoint(acc)
						} else {
							{
								restoreDCheckpoint(acc);
								true
							}
						}) && html_parse_any(acc))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}
	}
}

html_parse_val(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if ((matchString(acc, "=") && html_parse_ws(acc))) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (if (matchString(acc, "'")) {
					{
						acc.starti ::= acc.i;
						parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (((if (matchString(acc, "'")) {
									restoreDCheckpoint(acc)
								} else {
									{
										restoreDCheckpoint(acc);
										true
									}
								}) && html_parse_any(acc))) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						});
						addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
						if (matchString(acc, "'")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "\"")) {
							{
								acc.starti ::= acc.i;
								parseStar(acc, \ -> {
									{
										pushDCheckpoint(acc);
										pushDCheckpoint(acc);
										if (((if (matchString(acc, "\"")) {
											restoreDCheckpoint(acc)
										} else {
											{
												restoreDCheckpoint(acc);
												true
											}
										}) && html_parse_any(acc))) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									}
								});
								addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti));
								if (matchString(acc, "\"")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								acc.starti ::= acc.i;
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (if (if (((if (if (html_parse_s(acc) || (matchString(acc, ">") || (matchString(acc, "/") || matchString(acc, "=")))) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}) {
									restoreDCheckpoint(acc)
								} else {
									{
										restoreDCheckpoint(acc);
										true
									}
								}) && html_parse_any(acc))) {
									{
										parseStar(acc, \ -> {
											{
												pushDCheckpoint(acc);
												pushDCheckpoint(acc);
												pushDCheckpoint(acc);
												if (((if (if (html_parse_s(acc) || (matchString(acc, ">") || (matchString(acc, "/") || matchString(acc, "=")))) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}) {
													restoreDCheckpoint(acc)
												} else {
													{
														restoreDCheckpoint(acc);
														true
													}
												}) && html_parse_any(acc))) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											}
										});
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
								} else {
									false
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						}
					}
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				addMatched(acc, "1");
				discardDCheckpoint(acc)
			}
		}
	}
}

html_parse_hex_digit(acc : DParseAcc<?>) -> bool {
	matchRange(acc, 48, 57) || (matchRange(acc, 65, 70) || matchRange(acc, 97, 102))
}

html_parse_letter(acc : DParseAcc<?>) -> bool {
	matchRange(acc, 97, 122) || matchRange(acc, 65, 90)
}

html_parse_id_letter(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (html_parse_letter(acc) || matchString(acc, "!")) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_s(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (html_parse_ws_(acc)) {
			{
				parseStar(acc, \ -> {
					html_parse_ws_(acc)
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

html_parse_ws(acc : DParseAcc<?>) -> bool {
	parseStar(acc, \ -> {
		html_parse_ws_(acc)
	})
}

html_parse_ws_(acc : DParseAcc<?>) -> bool {
	matchString(acc, " ") || (matchString(acc, "\t") || (matchString(acc, "\n") || matchString(acc, "\u000d")))
}

html_parse_any(acc : DParseAcc<?>) -> bool {
	matchRange(acc, 0, 65535)
}



















