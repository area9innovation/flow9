// Generated by Gringo
import formats/html/parser/html_types;
import runtime;
import tools/dsl/dsl_util;

export {
	plainHtmlAst2DslAst(w : PlainHtmlAst) -> DslAst;
	dslAst2PlainHtmlAst(d : DslAst) -> PlainHtmlAst;
	dslAst2PlainHtmlNode(d : DslAst) -> PlainHtmlNode;
	dslAst2PlainHtmlAttrib(d : DslAst) -> PlainHtmlAttrib;
	dslAst2PlainHtmlComment(d : DslAst) -> PlainHtmlComment;
	dslAst2PlainHtmlEntity(d : DslAst) -> PlainHtmlEntity;
	dslAst2PlainHtmlScript(d : DslAst) -> PlainHtmlScript;
	dslAst2PlainHtmlSource(d : DslAst) -> PlainHtmlSource;
	dslAst2PlainHtmlTag(d : DslAst) -> PlainHtmlTag;
	dslAst2PlainHtmlText(d : DslAst) -> PlainHtmlText;
}

plainHtmlAst2DslAst(wal : PlainHtmlAst) -> DslAst {
	switch (wal) {
		PlainHtmlAstBool(value): DslBool(value);
		PlainHtmlAstInt(value): DslInt(value);
		PlainHtmlAstDouble(value): DslDouble(value);
		PlainHtmlAstString(value): DslString(value);
		PlainHtmlAstList(value): DslList(mapList(value, plainHtmlAst2DslAst));
		PlainHtmlAttrib(a0, a1): DslNode("attrib", [DslString(a0), DslString(a1)], 0);
		PlainHtmlComment(a0): DslNode("comment", [DslString(a0)], 0);
		PlainHtmlEntity(a0, a1): DslNode("entity", [DslString(a0), DslString(a1)], 0);
		PlainHtmlScript(a0, a1): DslNode("script", [DslList(fold(a0, makeList(), \acc, e -> Cons(plainHtmlAst2DslAst(e), acc))), DslString(a1)], 0);
		PlainHtmlSource(a0): DslNode("source", [DslList(fold(a0, makeList(), \acc, e -> Cons(plainHtmlAst2DslAst(e), acc)))], 0);
		PlainHtmlTag(a0, a1, a2, a3): DslNode("tag", [DslString(a0), DslString(a1), DslList(fold(a2, makeList(), \acc, e -> Cons(plainHtmlAst2DslAst(e), acc))), DslString(a3)], 0);
		PlainHtmlText(a0): DslNode("text", [DslString(a0)], 0);

	}
}

dslAst2PlainHtmlAst(d : DslAst) -> PlainHtmlAst {
	switch (d) {
		DslBool(value): PlainHtmlAstBool(value);
		DslInt(value): PlainHtmlAstInt(value);
		DslDouble(value): PlainHtmlAstDouble(value);
		DslString(value): PlainHtmlAstString(value);
		DslList(value): PlainHtmlAstList(mapList(value, dslAst2PlainHtmlAst));
		DslNode(name, args, pos): {
			if (name == "attrib") {
				PlainHtmlAttrib(getDslString(args[0]), getDslString(args[1]))
			} else if (name == "comment") {
				PlainHtmlComment(getDslString(args[0]))
			} else if (name == "entity") {
				PlainHtmlEntity(getDslString(args[0]), getDslString(args[1]))
			} else if (name == "script") {
				PlainHtmlScript((\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlAttrib))(args[0]), getDslString(args[1]))
			} else if (name == "source") {
				PlainHtmlSource((\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlNode))(args[0]))
			} else if (name == "tag") {
				PlainHtmlTag(getDslString(args[0]), getDslString(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlAttrib))(args[2]), getDslString(args[3]))
			} else if (name == "text") {
				PlainHtmlText(getDslString(args[0]))
			} else { println("ERROR: Could not convert " + name + " in PlainHtmlAst"); PlainHtmlAstBool(false) }

		}
	}
}

dslAst2PlainHtmlNode(d : DslAst) -> PlainHtmlNode {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "comment") {
		PlainHtmlComment(getDslString(args[0]))
	} else if (name == "entity") {
		PlainHtmlEntity(getDslString(args[0]), getDslString(args[1]))
	} else if (name == "script") {
		PlainHtmlScript((\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlAttrib))(args[0]), getDslString(args[1]))
	} else if (name == "tag") {
		PlainHtmlTag(getDslString(args[0]), getDslString(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlAttrib))(args[2]), getDslString(args[3]))
	} else if (name == "text") {
		PlainHtmlText(getDslString(args[0]))
	} else { println("ERROR: Could not convert " + name + " in PlainHtmlNode"); PlainHtmlComment("") }

}
dslAst2PlainHtmlAttrib(d : DslAst) -> PlainHtmlAttrib {
	node = getDslNode(d);
	args = node.args;
	PlainHtmlAttrib(getDslString(args[0]), getDslString(args[1]))
}
dslAst2PlainHtmlComment(d : DslAst) -> PlainHtmlComment {
	node = getDslNode(d);
	args = node.args;
	PlainHtmlComment(getDslString(args[0]))
}
dslAst2PlainHtmlEntity(d : DslAst) -> PlainHtmlEntity {
	node = getDslNode(d);
	args = node.args;
	PlainHtmlEntity(getDslString(args[0]), getDslString(args[1]))
}
dslAst2PlainHtmlScript(d : DslAst) -> PlainHtmlScript {
	node = getDslNode(d);
	args = node.args;
	PlainHtmlScript((\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlAttrib))(args[0]), getDslString(args[1]))
}
dslAst2PlainHtmlSource(d : DslAst) -> PlainHtmlSource {
	node = getDslNode(d);
	args = node.args;
	PlainHtmlSource((\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlNode))(args[0]))
}
dslAst2PlainHtmlTag(d : DslAst) -> PlainHtmlTag {
	node = getDslNode(d);
	args = node.args;
	PlainHtmlTag(getDslString(args[0]), getDslString(args[1]), (\t -> map(list2array(getDslList(t)), dslAst2PlainHtmlAttrib))(args[2]), getDslString(args[3]))
}
dslAst2PlainHtmlText(d : DslAst) -> PlainHtmlText {
	node = getDslNode(d);
	args = node.args;
	PlainHtmlText(getDslString(args[0]))
}

