import formats/json/json;
import formats/uri2/uri2;
import lingo/linecolumn;
import string_utils;

/*
 This module describes basic structures and encoding/decoding functions for the language Server Protocol (LSP)
 The detailed description and specification of LSP may be found at https://microsoft.github.io/language-server-protocol/
*/

export {

LspRequestMessage : (jsonrpc: string, id : Json, method : string, params : Json);
LspNotificationMessage : (jsonrpc: string, method : string, params : Json);
LspResponseMessage : (jsonrpc: string, id: Json, result : Json, error : Maybe<LspResponseError>);
LspResponseError : (code : int, message: string, data : Json);

LspPosition : (line : int, character : int);
LspRange : (start : LspPosition, end : LspPosition);
LspLocation : (uri : URI, range : LspRange);
LspCommand : (title : string, command : string, arguments : [Json]);
LspTextEdit : (range: LspRange, newText: string);
LspTextDocumentIdentifier : (uri : URI);
LspTextDocumentItem : (uri : URI, languageId : string, version : string, text : string);
LspTextDocumentPositionParams : (textDocument : LspTextDocumentIdentifier, position : LspPosition);
LspSymbol : (name : string, detail : string, kind : int, deprecated : bool, range : LspRange, selectionRange : LspRange, children : [LspSymbol]);
LspSymbolInformation : (name : string, kind : int, deprecated : bool, location : LspLocation, containerName : string);
LspWorkspaceSymbolParams : (query : string);

LspHover : (contents : [LspMarkedString], range : Maybe<LspRange>);
LspMarkedString : (language : string, value : string);
LspRename : (textDocument : LspTextDocumentIdentifier, position : LspPosition, newName : string);
LspExecuteCommandParams : (command : string, arguments: [Json]);
LspCompletionContext : (
	triggerKind : int,  // Values: Invoked=1, triggerCharacter=2, TriggerIncompleteCompletions=3
	triggerCharacter : string
);
LspCompletionParams : (textDocument : LspTextDocumentIdentifier, position : LspPosition, context : LspCompletionContext);
LspCompletionList : (isIncomplete : bool, items : [LspCompletionItem]);
LspCompletionItem : (
	label: string,
	kind: int,
	tags: [int], // Values: Deprecated=1
	detail: string,
	documentation: string,
	deprecated: bool,
	preselect: bool,
	sortText: string,
	filterText: string,
	insertText: string,
	insertTextFormat: int, // Value: PlainText=1, Snippet=2
	textEdit: Maybe<LspTextEdit>,
	additionalTextEdits: [LspTextEdit],
	commitCharacters: [string],
	command: Maybe<LspCommand>,
	data: Json
);
LspWorkspaceSymbolParams(query : string);

LspVersionedTextDocumentIdentifier : (uri : URI, version : string);
LspDidChangeTextDocumentParams : (textDocument : LspVersionedTextDocumentIdentifier, contentChanges : [LspTextDocumentContentChangeEvent]);
LspTextDocumentContentChangeEvent : (range : LspRange, rangeLength : int, text : string);
LspDidSaveTextDocumentParams : (textDocument : LspTextDocumentIdentifier, text : string);

LspRegistration : (id : string, method : string, registerOptions : Json);
LspRegistrationParams : (registrations : [LspRegistration]);
LspDocumentFilter : (
	language : string, // A language id, like `typescript`.
	scheme : string, // A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
	/**
	 * A glob pattern, like `*.{ts,js}`.
	 *
	 * Glob patterns can have the following syntax:
	 * - `*` to match one or more characters in a path segment
	 * - `?` to match on one character in a path segment
	 * - `**` to match any number of path segments, including none
	 * - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
	 * - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
	 * - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
	 */
	pattern : string
);
LspTextDocumentChangeRegistrationOptions : (
	documentSelector: [LspDocumentFilter], // A document selector to identify the scope of the registration.
	syncKind : int // None = 0, Full = 1, Incremental = 2
);
LspDiagnostic(
	range : LspRange, // The range at which the message applies.
	severity : int,   // None = 0 (non-standard, ommited),  Error = 1, Warning = 2, Information = 3, Hint = 4
	code : string,    // The diagnostic's code, which might appear in the user interface.
	source : string,  // A human-readable string describing the source of this diagnostic, e.g. 'typescript' or 'super lint'.
	message : string, // The diagnostic's message.
	tags : [int],     // DiagnosticTag: Unnecessary = 1, Deprecated = 2
	relatedInformation : [LspDiagnosticRelatedInformation]
);
LspDiagnosticRelatedInformation(location: LspLocation, message: string);
LspPublishDiagnosticsParams(uri : URI, version : string, diagnostics : [LspDiagnostic]);

lspRequestMessage2Json(request : LspRequestMessage) -> Json;
lspNotificationMessage2Json(request : LspNotificationMessage) -> Json;
lspResponseMessage2Json(response : LspResponseMessage) -> Json;
lspResponseError2Json(error : LspResponseError) -> Json;

lspPosition2Json(pos : LspPosition) -> Json;
lspRange2Json(range : LspRange) -> Json;
lspLocation2Json(loc : LspLocation) -> Json;
lspCommand2Json(com : LspCommand) -> Json;
lspTextDocumentIdentifier2Json(id : LspTextDocumentIdentifier) -> Json;
lspTextDocumentItem2Json(it : LspTextDocumentItem) -> Json;
lspTextDocumentPositionParams2Json(params : LspTextDocumentPositionParams) -> Json;
lspSymbol2Json(symbol : LspSymbol) -> Json;
lspSymbolInformation2Json(symbol_info : LspSymbolInformation) -> Json;
lspMarkedString2Json(str : LspMarkedString) -> Json;
lspHover2Json(hover : LspHover) -> Json;
lspTextEdit2Json(edit : LspTextEdit) -> Json;
lspCompletionList2Json(list : LspCompletionList) -> Json;
lspRegistration2Json(registration : LspRegistration) -> Json;
lspRegistrationParams2Json(params : LspRegistrationParams) -> Json;
lspDocumentFilter2Json(documentFilter : LspDocumentFilter) -> Json;
lspTextDocumentContentChangeEvent2Json(event : LspTextDocumentContentChangeEvent) -> Json;
lspTextDocumentChangeRegistrationOptions2Json(options : LspTextDocumentChangeRegistrationOptions) -> Json;
lspDiagnostic2Json(diag : LspDiagnostic) -> Json;
lspDiagnosticRelatedInformation2Json(diag : LspDiagnosticRelatedInformation) -> Json;
lspPublishDiagnosticsParams2Json(params : LspPublishDiagnosticsParams) -> Json;

json2LspRequestMessage(json : Json) -> Maybe<LspRequestMessage>;
json2LspResponseMessage(json : Json) -> Maybe<LspResponseMessage>;
json2LspResponseError(json : Json) -> Maybe<LspResponseError>;

json2LspPosition(json : Json) -> Maybe<LspPosition>;
json2LspRange(json : Json) -> Maybe<LspRange>;
json2LspLocation(json : Json) -> Maybe<LspLocation>;
json2LspCommand(json : Json) -> Maybe<LspCommand>;
json2LspTextDocumentIdentifier(json : Json) -> Maybe<LspTextDocumentIdentifier>;
json2LspTextDocumentItem(json : Json) -> Maybe<LspTextDocumentItem>;
json2LspTextDocumentPositionParams(json : Json) -> Maybe<LspTextDocumentPositionParams>;
json2LspRename(json : Json) -> Maybe<LspRename>;
json2LspExecuteCommandParams(json : Json) -> Maybe<LspExecuteCommandParams>;
json2LspCompletionParams(json : Json) -> Maybe<LspCompletionParams>;
json2LspVersionedTextDocumentIdentifier(json : Json) -> Maybe<LspVersionedTextDocumentIdentifier>;
json2LspDidChangeTextDocumentParams(json : Json) -> Maybe<LspDidChangeTextDocumentParams>;
json2LspTextDocumentContentChangeEvent(json : Json) -> Maybe<LspTextDocumentContentChangeEvent>;
json2LspDidSaveTextDocumentParams(json : Json) -> Maybe<LspDidSaveTextDocumentParams>;
json2LspWorkspaceSymbolParams(json : Json) -> Maybe<LspWorkspaceSymbolParams>;

// 0 stands for no kind
lspSymbolKindName2id = pairs2tree([
	Pair("File", 1),       Pair("Module", 2),      Pair("Namespace", 3), Pair("Package", 4),     Pair("Class", 5),
	Pair("Method", 6),     Pair("Property", 7),    Pair("Field", 8),     Pair("Constructor", 9), Pair("Enum", 10),
	Pair("Interface", 11), Pair("Function", 12),   Pair("Variable", 13), Pair("Constant", 14),   Pair("String", 15),
	Pair("Number", 16),    Pair("Boolean", 17),    Pair("Array", 18),    Pair("Object", 19),     Pair("Key", 20),
	Pair("Null", 21),      Pair("EnumMember", 22), Pair("Struct", 23),   Pair("Event", 24),      Pair("Operator", 25),
	Pair("TypeParameter", 26),
]);

// 0 stands for no kind
lspCompletionItemKind2id = pairs2tree([
	Pair("Text", 1),       Pair("Method", 2),      Pair("Function", 3),   Pair("Constructor", 4), Pair("Field", 5),
	Pair("Variable", 6),   Pair("Class", 7),       Pair("Interface", 8),  Pair("Module", 9),      Pair("Property", 10),
	Pair("Unit", 11),      Pair("Value", 12),      Pair("Enum", 13),      Pair("Keyword", 14),    Pair("Snippet", 15),
	Pair("Color", 16),     Pair("File", 17),       Pair("Reference", 18), Pair("Folder", 19),     Pair("EnumMember", 20),
	Pair("Constant", 21),  Pair("Struct", 22),     Pair("Event", 23),     Pair("Operator", 24),   Pair("TypeParameter", 25)
]);

lspSymbolKindId2Name = ["", 
	"File",      "Module",     "Namespace", "Package",     "Class",
	"Method",    "Property",   "Field",     "Constructor", "Enum", 
	"Interface", "Function",   "Variable",  "Constant",    "String",
	"Number",    "Boolean",    "Array",     "Object",      "Key", 
	"Null",      "EnumMember", "Struct",    "Event",       "Operator", 
	"TypeParameter"
];

LspSymbolKind ::= 
	LspSymbolFile,      LspSymbolModule,     LspSymbolNamespace, LspSymbolPackage,     LspSymbolClass,
	LspSymbolMethod,    LspSymbolProperty,   LspSymbolField,     LspSymbolConstructor, LspSymbolEnum, 
	LspSymbolInterface, LspSymbolFunction,   LspSymbolVariable,  LspSymbolConstant,    LspSymbolString,
	LspSymbolNumber,    LspSymbolBoolean,    LspSymbolArray,     LspSymbolObject,      LspSymbolKey,
	LspSymbolNull,      LspSymbolEnumMember, LspSymbolStruct,    LspSymbolEvent,       LspSymbolOperator, 
	LspSymbolTypeParameter;

	LspSymbolFile();    LspSymbolModule();     LspSymbolNamespace(); LspSymbolPackage();     LspSymbolClass();
	LspSymbolMethod();    LspSymbolProperty();   LspSymbolField();     LspSymbolConstructor(); LspSymbolEnum(); 
	LspSymbolInterface(); LspSymbolFunction();   LspSymbolVariable();  LspSymbolConstant();    LspSymbolString();
	LspSymbolNumber();    LspSymbolBoolean();    LspSymbolArray();     LspSymbolObject();      LspSymbolKey();
	LspSymbolNull();      LspSymbolEnumMember(); LspSymbolStruct();    LspSymbolEvent();       LspSymbolOperator(); 
	LspSymbolTypeParameter();

LspCompletionItemKind ::=
	LspCompletionItemText, LspCompletionItemMethod, LspCompletionItemFunction, LspCompletionItemConstructor, LspCompletionItemField,
	LspCompletionItemVariable, LspCompletionItemClass, LspCompletionItemInterface, LspCompletionItemModule, LspCompletionItemProperty,
	LspCompletionItemUnit, LspCompletionItemValue, LspCompletionItemEnum, LspCompletionItemKeyword, LspCompletionItemSnippet,
	LspCompletionItemColor, LspCompletionItemFile, LspCompletionItemReference, LspCompletionItemFolder, LspCompletionItemEnumMember,
	LspCompletionItemConstant, LspCompletionItemStruct, LspCompletionItemEvent, LspCompletionItemOperator, LspCompletionItemTypeParameter;
	
	LspCompletionItemText(); LspCompletionItemMethod(); LspCompletionItemFunction(); LspCompletionItemConstructor(); LspCompletionItemField();
	LspCompletionItemVariable(); LspCompletionItemClass(); LspCompletionItemInterface(); LspCompletionItemModule(); LspCompletionItemProperty();
	LspCompletionItemUnit(); LspCompletionItemValue(); LspCompletionItemEnum(); LspCompletionItemKeyword(); LspCompletionItemSnippet();
	LspCompletionItemColor(); LspCompletionItemFile(); LspCompletionItemReference(); LspCompletionItemFolder(); LspCompletionItemEnumMember();
	LspCompletionItemConstant(); LspCompletionItemStruct(); LspCompletionItemEvent(); LspCompletionItemOperator(); LspCompletionItemTypeParameter();

lspApplyContentChangeEvent(changeEvent : LspTextDocumentContentChangeEvent, src : string) -> string;
}

lspRequestMessage2Json(request : LspRequestMessage) -> Json {
	JsonObject([
		Pair("jsonrpc", JsonString(request.jsonrpc)),
		Pair("id", request.id),
		Pair("method", JsonString(request.method)),
		Pair("params", request.params),
	]);
}

lspNotificationMessage2Json(request : LspNotificationMessage) -> Json {
	JsonObject([
		Pair("jsonrpc", JsonString(request.jsonrpc)),
		Pair("method", JsonString(request.method)),
		Pair("params", request.params),
	]);
}

lspResponseMessage2Json(response : LspResponseMessage) -> Json {
	JsonObject(filtermap([
		Some(Pair("jsonrpc", JsonString(response.jsonrpc))),
		Some(Pair("id", response.id)),
		Some(Pair("result", response.result)),
		maybeMap(response.error, \error -> Pair("error", lspResponseError2Json(error))),
	], idfn));
}

lspResponseError2Json(error : LspResponseError) -> Json {
	JsonObject(filtermap([
		Some(Pair("code", JsonString(i2s(error.code)))),
		Some(Pair("message", JsonString(error.message))),
		if (error.data == JsonNull()) None() else Some(Pair("data", error.data)),
	], idfn));
}

lspPosition2Json(pos : LspPosition) -> Json {
	JsonObject([Pair("line", JsonDouble(i2d(pos.line))), Pair("character", JsonDouble(i2d(pos.character)))]);
}

lspRange2Json(range : LspRange) -> Json {
	JsonObject([Pair("start", lspPosition2Json(range.start)), Pair("end", lspPosition2Json(range.end))]);
}

lspLocation2Json(loc : LspLocation) -> Json {
	JsonObject([Pair("uri", JsonString(uri2string(loc.uri))), Pair("range", lspRange2Json(loc.range))]);
}

lspCommand2Json(com : LspCommand) -> Json {
	JsonObject([
		Pair("title", JsonString(com.title)), 
		Pair("command", JsonString(com.command)), 
		Pair("arguments", JsonArray(com.arguments))
	]);
}

lspTextDocumentIdentifier2Json(id : LspTextDocumentIdentifier) -> Json {
	JsonObject([Pair("uri", JsonString(uri2string(id.uri)))]);
}

lspTextDocumentItem2Json(it : LspTextDocumentItem) -> Json {
	JsonObject([
		Pair("uri", JsonString(uri2string(it.uri))),
		Pair("languageId", JsonString(it.languageId)),
		Pair("version", JsonString(it.version)),
		Pair("text", JsonString(it.text))
	]);
}

lspTextDocumentPositionParams2Json(params : LspTextDocumentPositionParams) -> Json {
	JsonObject([
		Pair("textDocument", lspTextDocumentIdentifier2Json(params.textDocument)),
		Pair("position", lspPosition2Json(params.position))
	]);
}

lspSymbol2Json(symbol : LspSymbol) -> Json {
	JsonObject([
		Pair("name", JsonString(symbol.name)),
		Pair("detail", JsonString(symbol.detail)),
		Pair("kind", JsonDouble(i2d(symbol.kind))),
		Pair("deprecated", JsonBool(symbol.deprecated)),
		Pair("range", lspRange2Json(symbol.range)),
		Pair("selectionRange", lspRange2Json(symbol.selectionRange)),
		Pair("children", JsonArray(map(symbol.children, lspSymbol2Json)))
	]);
}

lspSymbolInformation2Json(info : LspSymbolInformation) -> Json {
	JsonObject([
		Pair("name", JsonString(info.name)),
		Pair("kind", JsonDouble(i2d(info.kind))),
		Pair("deprecated", JsonBool(info.deprecated)),
		Pair("location", lspLocation2Json(info.location)),
		Pair("containerName", JsonString(info.containerName))
	]);
}

lspMarkedString2Json(str : LspMarkedString) -> Json {
	if (str.language == "") {
		JsonString(str.value);
	} else {
		JsonObject([Pair("language", JsonString(str.language)), Pair("value", JsonString(str.value))]);
	}
}

lspHover2Json(hover : LspHover) -> Json {
	properties0 = if (length(hover.contents) == 1) {
		[Pair("contents", lspMarkedString2Json(hover.contents[0]))];
	} else {
		[Pair("contents", JsonArray(map(hover.contents, lspMarkedString2Json)))];
	}
	properties1 = eitherMap(hover.range, \range -> concat(properties0, [Pair("range", lspRange2Json(range))]), properties0);
	JsonObject(properties1);
}

lspTextEdit2Json(edit : LspTextEdit) -> Json {
	JsonObject([
		Pair("range", lspRange2Json(edit.range)),
		Pair("newText", JsonString(edit.newText)),
	]);
}

lspCompletionItem2Json(item : LspCompletionItem) -> Json {
	JsonObject(filtermap([
		Some(Pair("label", JsonString(item.label))),
		if (item.kind == 0) None() else Some(Pair("kind", JsonString(i2s(item.kind)))),
		Some(Pair("tags", JsonArray(map(item.tags, \tag -> JsonString(i2s(tag)))))),
		Some(Pair("detail", JsonString(item.detail))),
		Some(Pair("documentation", JsonString(item.documentation))),
		Some(Pair("deprecated", JsonBool(item.deprecated))),
		Some(Pair("preselect", JsonBool(item.preselect))),
		Some(Pair("sortText", JsonString(item.sortText))),
		Some(Pair("filterText", JsonString(item.filterText))),
		Some(Pair("insertText", JsonString(item.insertText))),
		Some(Pair("insertTextFormat", JsonString(i2s(item.insertTextFormat)))),
		maybeMap(item.textEdit, \edit -> Pair("textEdit", lspTextEdit2Json(edit))),
		Some(Pair("additionalTextEdits", JsonArray(map(item.additionalTextEdits, lspTextEdit2Json)))),
		Some(Pair("commitCharacters", JsonArray(map(item.commitCharacters, \ch -> JsonString(ch))))),
		maybeMap(item.command, \command -> Pair("command", lspCommand2Json(command))),
		if (item.data == JsonNull()) None() else Some(Pair("data", item.data))
	], idfn));
}

lspCompletionList2Json(list : LspCompletionList) -> Json {
	JsonObject([
		Pair("isIncomplete", JsonBool(list.isIncomplete)),
		Pair("items", JsonArray(map(list.items, lspCompletionItem2Json)))
	]);
}

lspRegistration2Json(registration : LspRegistration) -> Json {
	JsonObject(filtermap([
		Some(Pair("id", JsonString(registration.id))),
		Some(Pair("method", JsonString(registration.method))),
		if (registration.registerOptions == JsonNull()) None() else Some(Pair("registerOptions", registration.registerOptions))
	], idfn));
}

lspRegistrationParams2Json(params : LspRegistrationParams) -> Json {
	JsonObject([
		Pair("registrations", JsonArray(map(params.registrations, lspRegistration2Json)))
	]);
}

lspDocumentFilter2Json(documentFilter : LspDocumentFilter) -> Json {
	JsonObject(filtermap([
		if (documentFilter.language == "") None() else Some(Pair("language", JsonString(documentFilter.language))),
		if (documentFilter.scheme == "") None() else Some(Pair("scheme", JsonString(documentFilter.scheme))),
		if (documentFilter.pattern == "") None() else Some(Pair("pattern", JsonString(documentFilter.pattern)))
	], idfn));
}

lspTextDocumentContentChangeEvent2Json(event : LspTextDocumentContentChangeEvent) -> Json {
	JsonObject([
		Pair("range", lspRange2Json(event.range)),
		Pair("rangeLength", JsonDouble(i2d(event.rangeLength))),
		Pair("text", JsonString(event.text)),
	]);
}

lspTextDocumentChangeRegistrationOptions2Json(options : LspTextDocumentChangeRegistrationOptions) -> Json {
	JsonObject([
		Pair("documentSelector", JsonArray(map(options.documentSelector, lspDocumentFilter2Json))),
		Pair("syncKind", JsonString(i2s(options.syncKind)))
	]);
}

lspDiagnostic2Json(diag : LspDiagnostic) -> Json {
	JsonObject(filtermap([
		Some(Pair("range", lspRange2Json(diag.range))),
		if (diag.severity == 0) None() else Some(Pair("severity", JsonString(i2s(diag.severity)))),
		if (diag.code == "") None() else Some(Pair("severity", JsonString(diag.code))),
		if (diag.source == "") None() else Some(Pair("source", JsonString(diag.source))),
		Some(Pair("message", JsonString(diag.message))),
		if (diag.tags == []) None() else Some(Pair("tags", JsonArray(map(diag.tags, \tag -> JsonString(i2s(tag)))))),
		if (diag.relatedInformation == []) None() else Some(Pair("relatedInformation", 
			JsonArray(map(diag.relatedInformation, lspDiagnosticRelatedInformation2Json))
		)),
	], idfn));
}

lspDiagnosticRelatedInformation2Json(diag : LspDiagnosticRelatedInformation) -> Json {
	JsonObject([
		Pair("location", lspLocation2Json(diag.location)),
		Pair("message", JsonString(diag.message))
	]);
}

lspPublishDiagnosticsParams2Json(params : LspPublishDiagnosticsParams) -> Json {
	JsonObject(filtermap([
		Some(Pair("uri", JsonString(uri2string(params.uri)))),
		if (params.version == "") None() else Some(Pair("version", JsonString(params.version))),
		Some(Pair("diagnostics", JsonArray(map(params.diagnostics, lspDiagnostic2Json))))
	], idfn));
}

json2LspRequestMessage(json : Json) -> Maybe<LspRequestMessage> {
	jsonrpc = getJsonStringField(json, "jsonrpc", "");
	id = getJsonFieldValue(json, "id", JsonNull());
	method = getJsonStringField(json, "method", "");
	params = getJsonFieldValue(json, "params", JsonNull());
	if (jsonrpc == "" || method == "") None() else 
	Some(LspRequestMessage(jsonrpc, id, method, params));
}

json2LspResponseMessage(json : Json) -> Maybe<LspResponseMessage> {
	jsonrpc = getJsonStringField(json, "jsonrpc", "");
	id = getJsonFieldValue(json, "id", JsonNull());
	result = getJsonFieldValue(json, "result", JsonNull());
	error = getJsonFieldValue(json, "error", JsonNull());
	if (jsonrpc == "") None() else 
	Some(LspResponseMessage(jsonrpc, id, result, json2LspResponseError(error)));
}

json2LspResponseError(json : Json) -> Maybe<LspResponseError> {
	code = getJsonStringField(json, "code", "");
	message = getJsonStringField(json, "message", "");
	data = getJsonFieldValue(json, "data", JsonNull());
	if (code == "") None() else 
	Some(LspResponseError(s2i(code), message, getJsonFieldValue(json, "data", JsonNull())));
}

json2LspPosition(json : Json) -> Maybe<LspPosition> {
	line = getJsonIntField(json, "line", -1);
	char = getJsonIntField(json, "character", -1);
	if (line != -1 && char != -1) Some(LspPosition(line, char)) else None();
}

json2LspRange(json : Json) -> Maybe<LspRange> {
	maybeBind(json2LspPosition(getJsonObjectField(json, "start")), \start ->
		maybeMap(json2LspPosition(getJsonObjectField(json, "end")), \end ->
			LspRange(start, end)
		)
	);
}

json2LspLocation(json : Json) -> Maybe<LspLocation> {
	maybeBind(json2LspRange(getJsonObjectField(json, "range")), \range -> {
		uri = getJsonStringField(json, "uri", "");
		if (uri == "") None() else Some(LspLocation(parseURI(uri), range));
	});
}

json2LspCommand(json : Json) -> Maybe<LspCommand> {
	title = getJsonStringField(json, "title", "");
	command = getJsonStringField(json, "command", "");
	args = getJsonArrayField(json, "arguments");
	if (title == "" || command == "") None() else {
		Some(LspCommand(title, command, args));
	}
}

json2LspTextDocumentIdentifier(json : Json) -> Maybe<LspTextDocumentIdentifier> {
	uri = getJsonStringField(json, "uri", "");
	if (uri == "") None() else Some(LspTextDocumentIdentifier(parseURI(uri)));
}

json2LspTextDocumentItem(json : Json) -> Maybe<LspTextDocumentItem> {
	uri = getJsonStringField(json, "uri", "");
	languageId = getJsonStringField(json, "languageId", "");
	version = getJsonStringField(json, "version", "");
	text = getJsonStringField(json, "text", "");
	if (uri == "" || languageId == "" || version == "" || text == "") None() else {
		Some(LspTextDocumentItem(parseURI(uri), languageId, version, text));
	}
}

json2LspTextDocumentPositionParams(json : Json) -> Maybe<LspTextDocumentPositionParams> {
	maybeBind(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \doc ->
		maybeMap(json2LspPosition(getJsonObjectField(json, "position")), \position ->
			LspTextDocumentPositionParams(doc, position)
		)
	)
}

json2LspRename(json : Json) -> Maybe<LspRename> {
	maybeBind(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \doc ->
		maybeBind(json2LspPosition(getJsonObjectField(json, "position")), \position -> {
			newName = getJsonStringField(json, "newName", "");
			if (newName == "") None() else Some(LspRename(doc, position, newName));
		})
	)
}

json2LspExecuteCommandParams(json : Json) -> Maybe<LspExecuteCommandParams> {
	command = getJsonStringField(json, "command", "");
	args = getJsonArrayField(json, "arguments");
	if (command == "") None() else {
		Some(LspExecuteCommandParams(command, args));
	}
}

json2LspCompletionParams(json : Json) -> Maybe<LspCompletionParams> {
	maybeMap(json2LspTextDocumentPositionParams(json), \pos -> {
			context = getJsonObjectField(json, "context");
			LspCompletionParams(
				pos.textDocument, 
				pos.position, 
				LspCompletionContext(
					getJsonIntField(context, "triggerKind", 0), 
					getJsonStringField(context, "triggerCharacter", "")
				)
			);
		}
	);
}

json2LspVersionedTextDocumentIdentifier(json : Json) -> Maybe<LspVersionedTextDocumentIdentifier> {
	uri = getJsonStringField(json, "uri", "");
	version = getJsonStringField(json, "version", "");
	if (uri == "" || version == "") None() else Some(LspVersionedTextDocumentIdentifier(parseURI(uri), version));
}

json2LspDidChangeTextDocumentParams(json : Json) -> Maybe<LspDidChangeTextDocumentParams> {
	maybeMap(json2LspVersionedTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \textDocument ->
		LspDidChangeTextDocumentParams(textDocument, 
			filtermap(getJsonArrayField(json, "contentChanges"), json2LspTextDocumentContentChangeEvent)
		)
	);
}

json2LspTextDocumentContentChangeEvent(json : Json) -> Maybe<LspTextDocumentContentChangeEvent> {
	switch (json) {
		JsonString(text): {
			Some(LspTextDocumentContentChangeEvent(LspRange(LspPosition(-1, -1), LspPosition(-1, -1)), strlen(text), text));
		}
		default: {
			if (!jsonObjectHasField(json, "text")) None() else {
				text = getJsonStringField(json, "text", "");
				range = json2LspRange(getJsonObjectField(json, "range"));
				rangeLength = getJsonStringField(json, "rangeLength", "");
				Some(LspTextDocumentContentChangeEvent(
					switch (range) {
						Some(r): r;
						None(): LspRange(LspPosition(-1, -1), LspPosition(-1, -1));
					},
					if (rangeLength == "") -1 else s2i(rangeLength),
					text
				));
			}
		}
	}
}

json2LspDidSaveTextDocumentParams(json : Json) -> Maybe<LspDidSaveTextDocumentParams> {
	maybeMap(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \textDocument ->
		LspDidSaveTextDocumentParams(textDocument, getJsonStringField(json, "text", ""))
	);
}

json2LspWorkspaceSymbolParams(json : Json) -> Maybe<LspWorkspaceSymbolParams> {
	query = getJsonStringField(json, "query", "");
	if (query == "") None() else Some(LspWorkspaceSymbolParams(query));
}

lspApplyContentChangeEvent(changeEvent : LspTextDocumentContentChangeEvent, src : string) -> string {
	patch = unescapeStr(changeEvent.text);
	if (changeEvent.range.start.line != -1) {
		resolver = makeLineResolver(src);
		start = findLineIndex(resolver, changeEvent.range.start.line, changeEvent.range.start.character);
		end = findLineIndex(resolver, changeEvent.range.end.line, changeEvent.range.end.character);

		before = substring(src, 0, start);
		after = substring(src, end, strlen(src) - end);
		before + patch + after;
	} else {
		// changed file is passed as a whole.
		patch;
	}
}
