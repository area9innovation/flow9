import lingo/compiler/syntaxtree_types;
import formats/uri2/uri2_ast_mnemonics;

export {
	get_URI_URI_full(st : SyntaxTree) -> SyntaxTree;
	get_URI_URI_reference(st : SyntaxTree) -> SyntaxTree;
	get_URI_scheme(st : SyntaxTree) -> SyntaxTree;
	get_URI_authority(st : SyntaxTree) -> SyntaxTree;
	get_URI_userinfo_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_host(st : SyntaxTree) -> SyntaxTree;
	get_URI_ipv4_address(st : SyntaxTree) -> SyntaxTree;
	get_URI_dec_octet(st : SyntaxTree) -> SyntaxTree;
	get_URI_reg_name(st : SyntaxTree) -> SyntaxTree;
	get_URI_port_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_path_abempty(st : SyntaxTree) -> SyntaxTree;
	get_URI_path_absolute(st : SyntaxTree) -> SyntaxTree;
	get_URI_segment(st : SyntaxTree) -> SyntaxTree;
	get_URI_segment_nz(st : SyntaxTree) -> SyntaxTree;
	get_URI_query_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_fragment_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_pchar(st : SyntaxTree) -> SyntaxTree;
	get_URI_pchar_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_pct_encoded(st : SyntaxTree) -> SyntaxTree;
	get_URI_unreserved(st : SyntaxTree) -> SyntaxTree;
	get_URI_sub_delims(st : SyntaxTree) -> SyntaxTree;
	get_URI_ALPHA(st : SyntaxTree) -> SyntaxTree;
	get_URI_DIGIT(st : SyntaxTree) -> SyntaxTree;
	get_URI_DIGIT_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_HEXDIG(st : SyntaxTree) -> SyntaxTree;
	get_URI_scheme__choice24(st : SyntaxTree) -> SyntaxTree;
	get_URI_scheme__choice24_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_userinfo__choice25(st : SyntaxTree) -> SyntaxTree;
	get_URI_userinfo__choice25_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_reg_name__choice26(st : SyntaxTree) -> SyntaxTree;
	get_URI_reg_name__choice26_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_query__choice27(st : SyntaxTree) -> SyntaxTree;
	get_URI_query__choice27_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_fragment__choice28(st : SyntaxTree) -> SyntaxTree;
	get_URI_fragment__choice28_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_path_abempty__auto29(st : SyntaxTree) -> SyntaxTree;
	get_URI_path_abempty__auto29_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_path_absolute__auto30(st : SyntaxTree) -> SyntaxTree;
	get_URI_path_absolute__auto30_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_path_absolute__auto31(st : SyntaxTree) -> SyntaxTree;
	get_URI_path_absolute__auto31_s(st : SyntaxTree) -> [SyntaxTree];
	get_URI_path_absolute__auto32(st : SyntaxTree) -> SyntaxTree;

}

get_URI_URI_full(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_URI) {
		st.children[0][0];
	} else failSyntaxTree
}
get_URI_URI_reference(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_URI) {
		st.children[0][0];
	} else failSyntaxTree
}
get_URI_scheme(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_URI_full) {
		st.children[0][0];
	} else failSyntaxTree
}
get_URI_authority(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_URI_full) {
		st.children[1][0];
	} else failSyntaxTree
}
get_URI_host(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_authority) {
		st.children[1][0];
	} else failSyntaxTree
}
get_URI_ipv4_address(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_host) {
		st.children[0][0];
	} else failSyntaxTree
}
get_URI_dec_octet(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ipv4_address) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ipv4_address) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ipv4_address) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ipv4_address) {
		st.children[3][0];
	} else failSyntaxTree
}
get_URI_reg_name(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_host) {
		st.children[0][0];
	} else failSyntaxTree
}
get_URI_path_abempty(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_URI_full) {
		st.children[2][0];
	} else failSyntaxTree
}
get_URI_path_absolute(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_URI_reference) {
		st.children[0][0];
	} else failSyntaxTree
}
get_URI_segment(st : SyntaxTree) -> SyntaxTree {
	if (get_URI_path_abempty__auto29(st).choice == 0) {
		get_URI_path_abempty__auto29(st).children[0][0];
	} else if (get_URI_path_absolute__auto30(st).choice == 0) {
		get_URI_path_absolute__auto30(st).children[0][0];
	} else failSyntaxTree
}
get_URI_segment_nz(st : SyntaxTree) -> SyntaxTree {
	if (get_URI_path_absolute__auto31(st).choice == 0) {
		get_URI_path_absolute__auto31(st).children[0][0];
	} else failSyntaxTree
}
get_URI_pchar(st : SyntaxTree) -> SyntaxTree {
	if (get_URI_query__choice27(st) != failSyntaxTree) {
		get_URI_query__choice27(st);
	} else if (get_URI_fragment__choice28(st) != failSyntaxTree) {
		get_URI_fragment__choice28(st);
	} else failSyntaxTree
}
get_URI_pct_encoded(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_pchar) {
		st.children[0][0];
	} else if (get_URI_userinfo__choice25(st) != failSyntaxTree) {
		get_URI_userinfo__choice25(st);
	} else if (get_URI_reg_name__choice26(st) != failSyntaxTree) {
		get_URI_reg_name__choice26(st);
	} else failSyntaxTree
}
get_URI_unreserved(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_pchar) {
		st.children[0][0];
	} else if (get_URI_userinfo__choice25(st) != failSyntaxTree) {
		get_URI_userinfo__choice25(st);
	} else if (get_URI_reg_name__choice26(st) != failSyntaxTree) {
		get_URI_reg_name__choice26(st);
	} else failSyntaxTree
}
get_URI_sub_delims(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_pchar) {
		st.children[0][0];
	} else if (get_URI_userinfo__choice25(st) != failSyntaxTree) {
		get_URI_userinfo__choice25(st);
	} else if (get_URI_reg_name__choice26(st) != failSyntaxTree) {
		get_URI_reg_name__choice26(st);
	} else failSyntaxTree
}
get_URI_ALPHA(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_scheme) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_unreserved) {
		st.children[0][0];
	} else if (get_URI_scheme__choice24(st) != failSyntaxTree) {
		get_URI_scheme__choice24(st);
	} else failSyntaxTree
}
get_URI_DIGIT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_dec_octet) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_dec_octet) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_dec_octet) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_unreserved) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_HEXDIG) {
		st.children[0][0];
	} else if (get_URI_scheme__choice24(st) != failSyntaxTree) {
		get_URI_scheme__choice24(st);
	} else failSyntaxTree
}
get_URI_HEXDIG(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_pct_encoded) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_pct_encoded) {
		st.children[1][0];
	} else failSyntaxTree
}
get_URI_scheme__choice24(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_userinfo__choice25(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_reg_name__choice26(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_query__choice27(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_fragment__choice28(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_path_abempty__auto29(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_path_absolute__auto30(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_path_absolute__auto31(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_URI_path_absolute__auto32(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_path_absolute) {
		st.children[0][0];
	} else failSyntaxTree
}

get_URI_userinfo_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_authority) {
		st.children[0];
	} else []
}
get_URI_port_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_authority) {
		st.children[2];
	} else []
}
get_URI_query_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_URI_full) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_URI_reference) {
		st.children[1];
	} else []
}
get_URI_fragment_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_URI_full) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_URI_reference) {
		st.children[2];
	} else []
}
get_URI_pchar_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_segment) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_segment_nz) {
		st.children[0];
	} else if (get_URI_query__choice27(st).choice == 0) {
		get_URI_query__choice27(st).children[0];
	} else if (get_URI_fragment__choice28(st).choice == 0) {
		get_URI_fragment__choice28(st).children[0];
	} else []
}
get_URI_DIGIT_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_dec_octet) {
		st.children[0];
	} else if (st.choice == 1 && st.rule == st_dec_octet) {
		st.children[0];
	} else if (st.choice == 3 && st.rule == st_dec_octet) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_port) {
		st.children[0];
	} else if (st.choice == 1 && st.rule == st_unreserved) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_HEXDIG) {
		st.children[0];
	} else if (get_URI_scheme__choice24(st).choice == 1) {
		get_URI_scheme__choice24(st).children[0];
	} else []
}
get_URI_scheme__choice24_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_scheme) {
		st.children[1];
	} else []
}
get_URI_userinfo__choice25_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_userinfo) {
		st.children[0];
	} else []
}
get_URI_reg_name__choice26_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_reg_name) {
		st.children[0];
	} else []
}
get_URI_query__choice27_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_query) {
		st.children[0];
	} else []
}
get_URI_fragment__choice28_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_fragment) {
		st.children[0];
	} else []
}
get_URI_path_abempty__auto29_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_path_abempty) {
		st.children[0];
	} else []
}
get_URI_path_absolute__auto30_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_URI_path_absolute__auto31(st).choice == 0) {
		get_URI_path_absolute__auto31(st).children[1];
	} else []
}
get_URI_path_absolute__auto31_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_URI_path_absolute__auto32(st).choice == 0) {
		get_URI_path_absolute__auto32(st).children[0];
	} else []
}

