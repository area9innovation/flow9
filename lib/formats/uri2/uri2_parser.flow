import string;
import lingo/compiler/syntaxtree_types;
import formats/uri2/uri2_ast_mnemonics;

export {
	parse_URI(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_URI(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [], noExpectError);
	r = do_parse_URI_URI(acc);
	Pair(r, acc.expect);
}
do_parse_URI_URI(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_URI_full(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_URI_URI_reference(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_URI, -1, i, i, [])
		}

	}

}

do_parse_URI_URI_full(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_URI_scheme(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
			acc.i ::= acc.i + 1;
			c2 = do_parse_URI_authority(acc);
			if (c2.choice != -1) {
				c3 = do_parse_URI_path_abempty(acc);
				if (c3.choice != -1) {
					i4 = acc.i;
					t4 = do_parse_URI_query(acc);
					c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
					i5 = acc.i;
					t5 = do_parse_URI_fragment(acc);
					c5 = if (t5.choice == -1) {acc.i ::= i5; [] } else [t5];
					SyntaxTree(st_URI_full, 0, i, acc.i, [[c0], [c2], [c3], c4, c5]);
				} else c3
			} else c2
		} else {
			// "Expected ':'"
			updateExpectError(acc, "", ":", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_URI_URI_reference(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_URI_path_absolute(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_URI_query(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		i2 = acc.i;
		t2 = do_parse_URI_fragment(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_URI_reference, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_URI_scheme(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_URI_ALPHA(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_URI_scheme__choice24);
		SyntaxTree(st_scheme, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_URI_authority(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 47 /* // */) {
		acc.i ::= acc.i + 2;
		i1 = acc.i;
		t1 = do_parse_URI_userinfo(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_URI_host(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_URI_port(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			SyntaxTree(st_authority, 0, i, acc.i, [c1, [c2], c3]);
		} else c2
	} else {
		// "Expected '//'"
		updateExpectError(acc, "", "//", i);
		failSyntaxTree;
	}
}

do_parse_URI_userinfo(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_URI_userinfo__choice25);
	if (getCharCodeAt(acc.input, acc.i) == 64 /* @ */) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_userinfo, 0, i, acc.i, [c0]);
	} else {
		// "Expected '@'"
		updateExpectError(acc, "", "@", i);
		failSyntaxTree;
	}
}

do_parse_URI_host(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_ipv4_address(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_URI_reg_name(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_host, -1, i, i, [])
		}

	}

}

do_parse_URI_ipv4_address(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_URI_dec_octet(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
			acc.i ::= acc.i + 1;
			c2 = do_parse_URI_dec_octet(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_URI_dec_octet(acc);
					if (c4.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
							acc.i ::= acc.i + 1;
							c6 = do_parse_URI_dec_octet(acc);
							if (c6.choice != -1) {
								SyntaxTree(st_ipv4_address, 0, i, acc.i, [[c0], [c2], [c4], [c6]]);
							} else c6
						} else {
							// "Expected '.'"
							updateExpectError(acc, "", ".", i);
							failSyntaxTree;
						}
					} else c4
				} else {
					// "Expected '.'"
					updateExpectError(acc, "", ".", i);
					failSyntaxTree;
				}
			} else c2
		} else {
			// "Expected '.'"
			updateExpectError(acc, "", ".", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_URI_dec_octet(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 49 /* 1 */) {
			acc.i ::= acc.i + 1;
			if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 52}) {
				acc.i ::= acc.i + 1;
				c2 = do_parse_URI_DIGIT(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_dec_octet, 0, i, acc.i, [[c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 49 <= c && c <= 57}) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_URI_DIGIT(acc);
				if (c1.choice != -1) {
					SyntaxTree(st_dec_octet, 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 50 && getCharCodeAt(acc.input, acc.i + 1) == 53 /* 25 */) {
					acc.i ::= acc.i + 2;
					if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 53}) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_dec_octet, 2, i, acc.i, []);
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_URI_DIGIT(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_dec_octet, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_URI_reg_name(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_URI_reg_name__choice26);
	SyntaxTree(st_reg_name, 0, i, acc.i, [c0]);
}

do_parse_URI_port(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxStar(acc, do_parse_URI_DIGIT);
		SyntaxTree(st_port, 0, i, acc.i, [c1]);
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_URI_path_abempty(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_URI_path_abempty__auto29);
	SyntaxTree(st_path_abempty, 0, i, acc.i, [c0]);
}

do_parse_URI_path_absolute(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_URI_path_absolute__auto32(acc);
	if (c0.choice != -1) {
		SyntaxTree(st_path_absolute, 0, i, acc.i, [[c0]]);
	} else c0
}

do_parse_URI_segment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_URI_pchar);
	SyntaxTree(st_segment, 0, i, acc.i, [c0]);
}

do_parse_URI_segment_nz(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_URI_pchar);
	if (length(c0) >= 1) {
		SyntaxTree(st_segment_nz, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one pchar"
		updateExpectError(acc, "", "pchar", i);
		failSyntaxTree;
	}
}

do_parse_URI_query(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 63 /* ? */) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxStar(acc, do_parse_URI_query__choice27);
		SyntaxTree(st_query, 0, i, acc.i, [c1]);
	} else {
		// "Expected '?'"
		updateExpectError(acc, "", "?", i);
		failSyntaxTree;
	}
}

do_parse_URI_fragment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 35 /* # */) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxStar(acc, do_parse_URI_fragment__choice28);
		SyntaxTree(st_fragment, 0, i, acc.i, [c1]);
	} else {
		// "Expected '#'"
		updateExpectError(acc, "", "#", i);
		failSyntaxTree;
	}
}

do_parse_URI_pchar(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_unreserved(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_URI_pct_encoded(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_URI_sub_delims(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_pchar, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 64 /* @ */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_pchar, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_pchar, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_URI_pct_encoded(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 37 /* % */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_URI_HEXDIG(acc);
		if (c1.choice != -1) {
			c2 = do_parse_URI_HEXDIG(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_pct_encoded, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '%'"
		updateExpectError(acc, "", "%", i);
		failSyntaxTree;
	}
}

do_parse_URI_unreserved(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_ALPHA(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_URI_DIGIT(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_unreserved, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_unreserved, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_unreserved, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
								acc.i ::= acc.i + 1;
								SyntaxTree(st_unreserved, 5, i, acc.i, []);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_unreserved, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_URI_sub_delims(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 33 /* ! */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_sub_delims, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_sub_delims, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 38 /* & */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_sub_delims, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_sub_delims, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_sub_delims, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
								acc.i ::= acc.i + 1;
								SyntaxTree(st_sub_delims, 5, i, acc.i, []);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								if (getCharCodeAt(acc.input, acc.i) == 42 /* * */) {
									acc.i ::= acc.i + 1;
									SyntaxTree(st_sub_delims, 6, i, acc.i, []);
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
										acc.i ::= acc.i + 1;
										SyntaxTree(st_sub_delims, 7, i, acc.i, []);
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
											acc.i ::= acc.i + 1;
											SyntaxTree(st_sub_delims, 8, i, acc.i, []);
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
												acc.i ::= acc.i + 1;
												SyntaxTree(st_sub_delims, 9, i, acc.i, []);
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											acc.i ::= i;
											r10 = {
												if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
													acc.i ::= acc.i + 1;
													SyntaxTree(st_sub_delims, 10, i, acc.i, []);
												} else failSyntaxTree;
											}
											if (r10 != failSyntaxTree) r10
											else {
												SyntaxTree(st_Expected_sub_delims, -1, i, i, [])
											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_URI_ALPHA(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 122}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_ALPHA, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 90}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_ALPHA, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ALPHA, -1, i, i, [])
		}

	}

}

do_parse_URI_DIGIT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_DIGIT, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_URI_HEXDIG(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_DIGIT(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 102}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_HEXDIG, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 70}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_HEXDIG, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_HEXDIG, -1, i, i, [])
			}

		}

	}

}

do_parse_URI_scheme__choice24(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_ALPHA(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_URI_DIGIT(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_scheme__choice24, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_scheme__choice24, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_scheme__choice24, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_scheme__choice24, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_URI_userinfo__choice25(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_unreserved(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_URI_pct_encoded(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_URI_sub_delims(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_userinfo__choice25, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_userinfo__choice25, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_URI_reg_name__choice26(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_unreserved(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_URI_pct_encoded(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_URI_sub_delims(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_reg_name__choice26, -1, i, i, [])
			}

		}

	}

}

do_parse_URI_query__choice27(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_pchar(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_query__choice27, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 63 /* ? */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_query__choice27, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_query__choice27, -1, i, i, [])
			}

		}

	}

}

do_parse_URI_fragment__choice28(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_URI_pchar(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_fragment__choice28, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 63 /* ? */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_fragment__choice28, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_fragment__choice28, -1, i, i, [])
			}

		}

	}

}

do_parse_URI_path_abempty__auto29(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_URI_segment(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_path_abempty__auto29, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '/'"
		updateExpectError(acc, "", "/", i);
		failSyntaxTree;
	}
}

do_parse_URI_path_absolute__auto30(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_URI_segment(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_path_absolute__auto30, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '/'"
		updateExpectError(acc, "", "/", i);
		failSyntaxTree;
	}
}

do_parse_URI_path_absolute__auto31(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_URI_segment_nz(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_URI_path_absolute__auto30);
		SyntaxTree(st_path_absolute__auto31, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_URI_path_absolute__auto32(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
		acc.i ::= acc.i + 1;
		i1 = acc.i;
		t1 = do_parse_URI_path_absolute__auto31(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		SyntaxTree(st_path_absolute__auto32, 0, i, acc.i, [c1]);
	} else {
		// "Expected '/'"
		updateExpectError(acc, "", "/", i);
		failSyntaxTree;
	}
}

