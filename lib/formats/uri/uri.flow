import target;
import urlhash;
import url;

import lingo/pegcode/driver;
import ds/treeutils;

import formats/uri/uri_pegop;

export {

	URI(scheme : string, authority : URIAuthority, path : string, query : string, fragment : string);
	URIAuthority(userinfo : string, host : string, port : string);

	// Parse a URI as defined by https://tools.ietf.org/html/rfc3986
	// We also allow relative URI references (https://tools.ietf.org/html/rfc3986#page-25)
	// in order to parse strings like "/www/index.html".
	parseURI(s : string) -> URI;

	// Parses a query string into key/val pairs
	parseQueryString(query : string) -> Tree<string,string>;

	// Converting URI struct into url string
	uri2string(uri : URI) -> string;

	// Extracting only host name from the URI struct
	uri2hostString(uri : URI) -> string;

	// Replacing all backslashes into "/" and adding the "/" at the end of url
	correctUrl(url : string) -> string;

	// Converting relative path into absolute
	resolveUrlToAbsolute(url : string, appName : string) -> string;

	// Extract parameter by the given name after the '?' symbol (including # parameters)
	getParameterFromUrl(parameter : string) -> string;

	// check if the input string is url with http or https protocol
	isUrl(maybeUrl : string) -> bool;
}

parseURI(s : string) -> URI {
	pegActionsExtended = pegActions([
		Pair("emptystr", \xs : [flow] -> flow("")),
		Pair("emptyauth", \xs : [flow] -> flow(URIAuthority("", "", ""))),
		Pair("unarraystr", \xs : [flow] -> if (length(xs[0]) > 0) xs[0][0] else flow(""))
	]);
	parsic(pegOps4Uri, s, pegActionsExtended);
	//parsic(compilePegGrammar("#include uri.lingo"), s, pegActionsExtended);
}

parseQueryString(query : string) -> Tree<string,string> {
	// TODO: Decode the query strings
	pairs2tree(map(strSplit(query, "&"), \s -> {
		kv = strSplit(s, "=");
		Pair(if (length(kv) > 0) kv[0] else "", if (length(kv) > 1) kv[1] else "");
	}));
}

uri2string(uri : URI) -> string {
	(if (uri.scheme != "") uri.scheme + "://" else "") +
	(if (uri.authority.host != "") uri.authority.host else "") +
	(if (uri.authority.userinfo != "") ":" + uri.authority.userinfo else "") +
	(if (uri.authority.port != "") ":" + uri.authority.port else "") +
	(if (uri.path != "") uri.path else "") +
	(if (uri.query != "") "?" + uri.query else "") +
	(if (uri.fragment != "") "#" + uri.fragment else "");
}

uri2hostString(uri : URI) -> string {
	(if (uri.scheme != "") uri.scheme + "://" else "") +
	(if (uri.authority.host != "") uri.authority.host else "") +
	(if (uri.authority.userinfo != "") ":" + uri.authority.userinfo else "") +
	(if (uri.authority.port != "") ":" + uri.authority.port else "") + "/";
}

correctUrl(url : string) -> string {
	url2 = strReplace(url, "\\", "/");
	url3 = if (endsWith(url2, "/")) url2 else url2 + "/";

	if (!strContains(url3, "://")) strReplace(url3, ":/", "://") else url3
}

resolveUrlToAbsolute(url : string, appName : string) -> string {
	// loaderUrl is our friend only in JS
	loader = loaderUrl();
	if (startsWith(url, "http://") || startsWith(url, "https://") || startsWith(url, "ftp://")) {
		url
	} else if (cpp) {
		pUrl = getUrlParameter("url");
		baseUrl =
			if (pUrl != "") {
				correctUrl(pUrl)
			} else {
				port = getUrlParameter("port");
				if (port != "") {
					"http://localhost:" + port + "/"
				} else {
					"http://localhost:80/"
				}
			};
		baseUrl + appName + "/" + url;
 	} else if (js || !strContains(loader, "swf")) {
		uri2hostString(parseURI(loader)) + appName + "/" + url
	} else {
		url
	}
}

getParameterFromUrl(parameter : string) -> string {
	parameterHash = getUrlHashParameter(parameter);
	parameterUrl = getUrlParameter(parameter);
	if (parameterHash == "") parameterUrl else parameterHash;
}

isUrl(maybeUrl : string) -> bool {
	startsWith(maybeUrl, "http://") || startsWith(maybeUrl, "https://");
}
