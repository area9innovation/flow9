import form/gui;

export {
	svgPath2Form(path : string, style : [GraphicsStyle], bgcolor : int) -> Form;
	svgSimplePath2GraphicsOps(path : string) -> [StaticGraphicOp];
}

EllipseArc(c : V2, rx : double, ry : double, ang0 : double, ang1 : double);

//https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/
endpointToCenterArcParams(p1 : V2, p2 : V2, r : V2, xAngle : double, flagA : bool, flagS : bool) -> EllipseArc {
	_rX = abs(r.x);
	_rY = abs(r.y);

	dx2 = (p1.x - p2.x) / 2.0;
	dy2 = (p1.y - p2.y) / 2.0;
	x1p = cos(xAngle) * dx2 + sin(xAngle) * dy2;
	y1p = -sin(xAngle) * dx2 + cos(xAngle) * dy2;

	_rxs = _rX * _rX;
	_rys = _rY * _rY;
	x1ps = x1p * x1p;
	y1ps = y1p * y1p;
	// check if the radius is too small `pq < 0`, when `dq > rxs * rys` (see below)
	// cr is the ratio (dq : rxs * rys)
	cr = x1ps / _rxs + y1ps / _rys;

	//scale up rX,rY equally so cr == 1
	s = sqrt(cr);

	rX = if (cr > 1.0) s * _rX else _rX;
	rY = if (cr > 1.0) s * _rY else _rY;
	rxs = rX * rX;
	rys = rY * rY;

	dq = (rxs * y1ps + rys * x1ps);
	pq = (rxs * rys - dq) / dq;
	_q = sqrt( max(0.0, pq) );
	q = if (flagA == flagS) -_q else _q;

	cxp = q * rX * y1p / rY;
	cyp = - q * rY * x1p / rX;

	cx = cos(xAngle) * cxp - sin(xAngle) * cyp + (p1.x + p2.x) / 2.0;
	cy = sin(xAngle) * cxp + cos(xAngle) * cyp + (p1.y + p2.y) / 2.0;

	svgAngle = \ux, uy, vx, vy -> {
		u = V2(ux, uy);
		v = V2(vx, vy);
		dot = v2ScalarMul(u,v);
		len = v2Len(u) * v2Len(v);
		clamp = \x, a, b -> if (x < a) a else if (x > b) b else x;
		ang = acos( clamp(dot / len, -1.0, 1.0) );
		if ( (u.x * v.y - u.y * v.x) < 0.0) -ang else ang;
	}

	theta = svgAngle( 1.0, 0.0, (x1p - cxp) / rX, (y1p - cyp) / rY );
	__delta = svgAngle( (x1p - cxp) / rX, (y1p - cyp) / rY, (-x1p - cxp) / rX, (-y1p - cyp) / rY );
	_delta = i2d( mod(round(__delta / PI * 180.0), 180) ) / 180.0 * PI;
	delta = if (!flagS) _delta - 2.0 * PI else _delta;

	EllipseArc(V2(cx, cy), rX, rY, theta, delta);
}

ellipseArcToBezierCurves(arc : EllipseArc, endP : V2) {
	ang_delta = arc.ang1 - arc.ang0;
	seg = (PI / 8.0) * sign(ang_delta);
	num_curves = trunc(abs(ang_delta / seg));
	arr = map( enumFromTo(0, num_curves), \e ->{
		x = arc.c.x + arc.rx * cos(arc.ang0 + seg * i2d(e));
		y = arc.c.y + arc.ry * sin(arc.ang1 + seg * i2d(e));
		// TO DO : better control points
		cpx = arc.c.x + arc.rx * 1.01 * cos(arc.ang0 + seg * (i2d(e) - 0.5) );
		cpy = arc.c.y + arc.ry * 1.01 * sin(arc.ang1 + seg * (i2d(e) - 0.5) );
		QuadraticBezierTo(x, y, cpx, cpy);
	});
	arrayPush(arr, LineTo(endP.x, endP.y));
}


// Fixed MidPoint approximation of cubic curve:
quadraticBezierApproximation(p0, p1, p2, p3) {
	innerPoint = \P0, P1, ratio -> v2Add(P0, v2Mul(v2Sub(P1, P0), ratio));

	//  The useful base points:
	pA = innerPoint(p0, p1, 3.0/4.0);
	pB = innerPoint(p3, p2, 3.0/4.0);
	d =  v2Mul(v2Sub(p3, p0), 1.0 / 16.0);

	// Control points:
	pc_1 = innerPoint(p0, p1, 3.0/8.0);
	pc_2 =  v2Sub(innerPoint(pA, pB, 3.0/8.0), d);
	pc_3 = v2Add(innerPoint(pB, pA, 3.0/8.0), d);
	pc_4 = innerPoint(p3, p2, 3.0/8.0);

	// Anchors:
	pa_1 = innerPoint(pc_1, pc_2, 0.5);
	pa_2 = innerPoint(pA, pB, 0.5);
	pa_3 = innerPoint(pc_3, pc_4, 0.5);

	[ QuadraticBezierTo(pa_1.x, pa_1.y, pc_1.x, pc_1.y),
		QuadraticBezierTo(pa_2.x, pa_2.y, pc_2.x, pc_2.y),
		QuadraticBezierTo(pa_3.x, pa_3.y, pc_3.x, pc_3.y),
		QuadraticBezierTo(p3.x, p3.y, pc_4.x, pc_4.y) ]
}

getGraphicsRegion(path : [StaticGraphicOp]) -> Quadruple<double, double, double, double> {
	fold(path, Quadruple(doubleMax, doubleMax, doubleMin, doubleMin), \q : Quadruple<double, double, double, double>, op : StaticGraphicOp -> {
			addVector = \p : V2 -> Quadruple(min(q.first, p.x), min(q.second, p.y), max(q.third, p.x), max(q.fourth, p.y));
			addRect = \p : GRect -> Quadruple(min(q.first, p.x), min(q.second, p.y), max(q.third, p.x + p.width), max(q.fourth, p.y + p.height));
			addEllipse = \p : GEllipse -> Quadruple(min(q.first, p.x - p.width), min(q.second, p.y - p.height),
				max(q.third, p.x + p.width), max(q.fourth, p.y + p.height));

			switch (op : StaticGraphicOp) {
				MoveTo(x, y) : V2(x, y) |> addVector;
				LineTo(x, y) : V2(x, y) |> addVector;
				CubicBezierTo(x, y, cx, cy): V2(x, y) |> addVector;
				QuadraticBezierTo(x, y, cx, cy): V2(x, y) |> addVector;
				ClosePath(): V2(q.first, q.second) |> addVector;
				GRect(x, y, width, height): op |> addRect;
				GRoundedRect(x, y, width, height, radius): GRect(x, y, width, height) |> addRect;
				GEllipse(x, y, width, height): op |> addEllipse;
				GCircle(x, y, radius): GEllipse(x, y, radius, radius) |> addEllipse;
			}
		}
	);
}

regionContains(r : Quadruple<double, double, double, double>, r1 : Quadruple<double, double, double, double>) {
	r.first < r1.first && r.second < r1.second && r.third > r1.third && r.fourth > r1.fourth
}

// Topological sort with layers:
getLayers2(group : [Pair<[StaticGraphicOp], Quadruple<double, double, double, double>>]) ->  [[Pair<[StaticGraphicOp], Quadruple<double, double, double, double>>]] {
	if (group == []) {
		[]
	} else {
		layer : [Pair<[StaticGraphicOp], Quadruple<double, double, double, double>>] = filter(group, \graphics -> forall(group, \g -> !regionContains(g.second, graphics.second) ) );
		arrayPush( getLayers2(subtractA(group, layer)), layer);
	}
}

getLayers(group : [[StaticGraphicOp]]) -> [[[StaticGraphicOp]]] {
	group_with_regions : [Pair<[StaticGraphicOp], Quadruple<double, double, double, double>>] = map(group, \g -> Pair(g, getGraphicsRegion(g)));
	layers_with_regions = getLayers2(group_with_regions);
	map(layers_with_regions, \layer -> map(layer, \p -> p.first))
}

subPathString2GrOps(subpath : string, state : Pair<ref V2, ref V2>) -> [StaticGraphicOp] {
	pen = state.first; last_cp = state.second;

	move = \a, offs -> { pen := V2(a[offs], a[offs + 1]); MoveTo(^pen.x, ^pen.y) };
	moveRel = \a, offs -> { pen := v2Add(^pen, V2(a[offs], a[offs + 1])); MoveTo(^pen.x, ^pen.y) };
	line = \a, offs -> { pen := V2(a[offs], a[offs + 1]); LineTo(^pen.x, ^pen.y) };
	lineRel = \a, offs -> { pen := v2Add(^pen, V2(a[offs], a[offs + 1])); LineTo(^pen.x, ^pen.y) };

	h = \a, offs -> { pen := V2(a[offs], ^pen.y); LineTo(^pen.x, ^pen.y) };
	hRel = \a, offs -> { pen := V2(^pen.x + a[offs], ^pen.y); LineTo(^pen.x, ^pen.y) };
	v = \a, offs -> { pen := V2(^pen.x, a[offs]); LineTo(^pen.x, ^pen.y) };
	vRel = \a, offs -> { pen := V2(^pen.x, ^pen.y + a[offs]); LineTo(^pen.x, ^pen.y) };

	readCurvePts = \a : [double], offs : int, len : int, rel : bool -> {
		pts = map(enumFromTo(0, len / 2 - 1), if (rel) \i -> V2(a[offs + i * 2] + ^pen.x, a[offs + i * 2 + 1] + ^pen.y) else \i -> V2(a[offs + i * 2], a[offs + i * 2 + 1]) );
		last_cp := pts[len / 2 - 2];
		pen := pts[len / 2 - 1];
		pts
	};

	cubicBezier = \a, offs, rel -> {
		p0 = ^pen;
		pts  = readCurvePts(a, offs, 6, rel);
		quadraticBezierApproximation(p0, pts[0], pts[1], pts[2])
	};

	smoothBezier = \a, offs, rel -> {
		p0 = ^pen;
		p1 = if (^last_cp.x > 0.0) Some(v2Add(p0, v2Sub(p0, ^last_cp))) else None();
		pts = readCurvePts(a, offs, 4, rel);
		quadraticBezierApproximation(p0, either(p1, pts[0]), pts[0], pts[1])
	}

	quadBezier = \a, offs, rel -> {
		readCurvePts(a, offs, 4, rel);
		QuadraticBezierTo(^pen.x, ^pen.y, ^last_cp.x, ^last_cp.y)
	}

	smoothQuadBezier = \args, offs, rel -> {
		last_cp := v2Add(^pen, v2Sub(^pen, ^last_cp));
		pen := if (rel) v2Add(^pen, V2(args[offs], args[offs + 1])) else V2(args[offs], args[offs + 1]);
		QuadraticBezierTo(^pen.x, ^pen.y, ^last_cp.x, ^last_cp.y)
	}

	arc = \args, offs, rel -> {
		r = V2(args[offs], args[offs + 1]);
		xrot = args[offs + 2];
		flagA = args[offs + 3] == 1.0;
		flagS = args[offs + 4] == 1.0;
		eP = if (rel) v2Add(^pen, V2(args[offs + 5], args[offs + 6])) else V2(args[offs + 5], args[offs + 6]);
		res = ellipseArcToBezierCurves( endpointToCenterArcParams(^pen, eP, r, xrot, flagA, flagS), eP );
		pen := eP;
		res
	}

	cmd_args = strSplit2(subpath, ["m", "M", "z", "Z", "L", "l", "H", "h", "V", "v", "C", "c", "S", "s", "Q", "q", "T", "t", "A", "a"]);
	last_cmd = ref "";
	grops = map(cmd_args, \cmd_arg -> {
	 		if (cmd_arg == "Z" || cmd_arg == "z") {
	 			[ClosePath()]
	 		} else if (isLetter(cmd_arg)) {
				last_cmd := cmd_arg; []
			} else {
				arr = strSplit2(cmd_arg, [",", " ", "-", "\n", "\t"]);
				arr1 = filter(mapi(arr, \i, a -> if (i > 0 && arr[i - 1] == "-") "-" + a else a), \s -> s != "-" && s != "," && s != " " && s != "\n" && s != "\t");

				points_strs = concatA(map(arr1, \a -> {
					idxs = multipleStrIndexOf(a, ".");
					if (length(idxs) < 2) {
						[a]
					} else {
						mapi(idxs, \i, idx -> if (i == 0) strLeft(a, idxs[1]) else if (i == length(idxs) - 1) strRight(a, idx) else strSubRange(a, idx, idxs[i+1]) )
					}
				} ) );
				points = map(points_strs, s2d);

				getGrOps = \num, fn : ([double], int, bool) -> flow, rel -> { map(enumFromTo(0, length(points) / num - 1), \i -> fn(points, i * num, rel))  };
				getGrOps2 = \num, fn : ([double], int) -> flow -> { map(enumFromTo(0, length(points) / num - 1), \i -> fn(points, i * num))  };

				c = ^last_cmd;
		 		if (c == "m") getGrOps2(2, moveRel)
		 		else if (c == "M") getGrOps2(2, move)
		 		else if (c == "l") getGrOps2(2, lineRel)
		 		else if (c == "L") getGrOps2(2, line)
		 		else if (c == "h") getGrOps2(1, hRel)
		 		else if (c == "H") getGrOps2(1, h)
		 		else if (c == "v") getGrOps2(1, vRel)
		 		else if (c == "V") getGrOps2(1, v)
		 		else if (c == "c") concatA(getGrOps(6, cubicBezier, true))
		 		else if (c == "C") concatA(getGrOps(6, cubicBezier, false))
		 		else if (c == "s") concatA(getGrOps(4, smoothBezier, true))
		 		else if (c == "S") concatA(getGrOps(4, smoothBezier, false))
		 		else if (c == "q") getGrOps(4, quadBezier, true)
		 		else if (c == "Q") getGrOps(4, quadBezier, false)
		 		else if (c == "t") getGrOps(2, smoothQuadBezier, true)
		 		else if (c == "T") getGrOps(2, smoothQuadBezier, false)
		 		else if (c == "a") concatA(getGrOps(7, arc, true))
		 		else if (c == "A") concatA(getGrOps(7, arc, false))
	 			else [];
	 	}
 	});

	state.first := ^pen;
	state.second := ^last_cp;
	concatA(grops);
}

getSvgSubPaths(path : string) -> [string] {
	parts = strSplit2(path, ["m", "M", "z", "Z"]);
	filter(mapi(parts, \i, p -> if (i > 0 && toUpperCase(parts[i-1]) == "M") parts[i-1] + p else if (i < length(parts) - 1 && toUpperCase(parts[i + 1]) == "Z") p + parts[i+1] else p ),
		\s -> s != "m" && s != "M" && s != "z" && s != "Z");
}

// Without lingo:
svgPath2Form(path : string, style : [GraphicsStyle], bgcolor : int) {
	subpath_strings = getSvgSubPaths(path);

	state = Pair(ref V2(0.0, 0.0),  ref V2(0.0, 0.0));
	subpaths = map(subpath_strings, \s -> subPathString2GrOps(s, state));
	layers = reverseA(getLayers(subpaths));

	Group( mapi(layers, \i, l -> Group(map(l, \gops -> Graphics(gops, if (even(i)) style else [Fill(bgcolor)] ) ) ) ) )
}

// For svg2tropic. Only one shape per path is supposed.
svgSimplePath2GraphicsOps(path : string) -> [StaticGraphicOp] {
	subpath_strings = getSvgSubPaths(path);
	if (subpath_strings != []) {
		subPathString2GrOps(subpath_strings[0], Pair(ref V2(0.0, 0.0),  ref V2(0.0, 0.0)));
	} else {
		[]
	}
}
