import net/url_parameter; // isUrlParameterTrue
import lingo/flow/fail;

export {
	// checks for URL parameter &test=true
	isTest() -> bool;

	// Convert ids to compact string representation
	integers2compactString(ids : [int], removeDuplicates : bool) -> string;
	// And back
	compactString2integers(s : string) -> Fail<[int]>;
}

isTestRef : ref Maybe<bool> = ref None();
isTest() -> bool {
	onlyOnce(isTestRef, \ -> {
		isUrlParameterTrue("test")
	})
}

integers2compactString(ids : [int], removeDuplicates : bool) -> string {
	len = length(ids);
	if (len == 0) {
		"";
	} else if (len == 1) {
		i2s(ids[0]);
	} else {
		sorted = sort(ids);
		lastIndex = len - 2;
		list = foldi(tail(sorted), Triple(EmptyList(), sorted[0], 1), \i, acc, value -> {
			isLast = i == lastIndex;
			oldDelta = acc.second;
			delta = value - sorted[i];
			if (delta == 0 && !isLast && removeDuplicates) {
				acc;
			} else if (delta != oldDelta || isLast) {
				mult = acc.third + b2i(isLast && delta == oldDelta);
				newString = if (delta == 0 && removeDuplicates) {
					deltaString = if (mult > 1 && oldDelta > 0) {
						"*" + i2s(mult);
					} else {
						"";
					}
					if (isEmptyList(acc.first)) {
						i2s(oldDelta) + deltaString;
					} else {
						"." + i2s(oldDelta) + deltaString;
					}
				} else {
					deltaString = (if (mult > 1) "*" + i2s(mult) else "") + (if (isLast && delta != oldDelta) "." + i2s(delta) else "");
					(if (isEmptyList(acc.first)) "" else ".") + i2s(oldDelta) + deltaString;
				}
				Triple(Cons(newString, acc.first), delta, 1);
			} else {
				Triple(acc.first, oldDelta, acc.third + 1);
			}
		}).first;
		list2string(list);
	}
}

compactString2integers(s : string) -> Fail<[int]> {
	if (s == "") {
		Some([]);
	} else {
		res = fold(
			strSplit(s, "."),
			Triple(EmptyList(), 0, ""),
			\acc, s2 -> {
				untriple(acc, \list, value, error -> {
					if (error != "") {
						acc;
					} else {
						parts = strSplit(s2, "*");
						l = length(parts);
						if (l > 2) {
							Triple(list, value, "Too many '*'");
						} else {
							delta = s2i(parts[0]);
							mult = if (l == 2) {
								s2i(parts[1]);
							} else {
								1;
							}
							newValues = generate(1, mult + 1, \j -> value + j * delta);
							Triple(Cons(newValues, list), value + mult * delta, "");
						}
					}
				});
			}
		);
		untriple(res, \list, __, err -> {
			if (err == "") {
				Some(concatA(list2array(list)));
			} else {
				Failed(err);
			}
		});
	}
}
