import net/url_parameter;
import ds/tree;
import behaviour;
import runtime;

export {
	// The idea is to support several translation levels like simple strings, wiki/wigi.
	// And use only minimized stuff for each level.
	initGetTranslation(fn : (string)->string) -> void;
	// Used for UI text translation and UI text extraction.
	// Use this with literals and format-strings only. For variables and expressions use getTranslation please.
	_(s : string) -> string;
	// Translates a string with replacements; marks it for translation when requested.
	// NOTE: While it works for both UI and content texts, use getContentTranslation for content,
	// because content SHOULD NOT be translated if content dictionary not available/not loaded.
	getTranslation(s : string) -> string;
	// The same as above but without replacements.
	getTranslationOnly(s : string) -> string;
	// Translation function for product content texts. Doesn't translate if content translation dictionary not loaded.
	getContentTranslation(s : string) -> string;
	// Helper for dynamic strings. Identical to getContentTranslation(getValue(b))
	getContentTranslation2(b : DynamicBehaviour<string>) -> string;
	// set to true when ui dictionary is loaded and initialized
	isUITranslationsLoaded = make(false);
	// set to true when product content dictionary is loaded and initialized
	isContentTranslationsLoaded = make(false);
	// prints msg if "debugTranslation" flag is true
	translationsDebugTrace(msg: string) -> void;

	translations : ref Tree<string, string> = ref makeTree();
	translatedCoachTexts : ref Tree<string, string> = ref makeTree();
	// The same as initGetTranslation(), but after translation replacement will be made.
	initGetReplacement(fn : (string)->string) -> void;
}

_(s : string) -> string {
	getTranslation(s);
}

doTranslation : ref (string)->string = ref idfn;
doReplacement : ref (string)->string = ref idfn;

initGetTranslation(fn) {
	doTranslation := fn
}

initGetReplacement(fn) {
	doReplacement := fn
}

getTranslation(s : string) -> string {
	translatedString = ^doTranslation(s);
	if (s == translatedString)
		^doReplacement(s)
	else
		translatedString
}

getTranslationOnly(s : string) -> string {
	^doTranslation(s)
}

// Helper for dynamic strings
getContentTranslation2(b : DynamicBehaviour<string>) -> string {
	getContentTranslation(getValue(b));
}

debugTranslation = isUrlParameterTrue("debugTranslation");
translationsDebugTrace(msg: string) {
	if (debugTranslation) {
		println(msg);
	}
}

getContentTranslation(s : string) -> string {
	if (getValue(isContentTranslationsLoaded))
		getTranslation(s)
	else s
}

