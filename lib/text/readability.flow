import string;
import text/translation;
import math/math;
import text/unicodecharacters;

export {
	// Calculates readability according to https://en.wikipedia.org/wiki/Automated_readability_index
	getTextReadabilityIndex(text : string) -> double;
	getTextsReadabilityIndex(texts : [string]) -> double;
	getTextsReadabilityIndexIter(texts : [string], fn : (i : int, readability : double) -> void) -> double;
	getTextReadabilityGrade(index : double) -> string;
}

getTextItemsCount(text) -> Triple<int, int, int> {
	sentsCount = ref 0;
	wordsCount = ref 0;
	charsCount = ref 0;

	len = strlen(text);

	isld = \s -> isLetterUnicode(s) || isDigit(s);
	isdel = \s -> s == "." || s == "?" || s == "!";

	iter(enumFromTo(0, len - 1), \i -> {		
		c = getCharAt(text, i);
		if (i < len - 1) {
			nc = getCharAt(text, i + 1);
			ild = isld(c);
			if (ild) { charsCount := ^charsCount + 1; if(!isld(nc)) wordsCount := ^wordsCount + 1; }
			else if (isdel(c) && !isdel(nc)) { sentsCount := ^sentsCount + 1; }
		} else {
			if (isld(c)) { wordsCount := ^wordsCount + 1; charsCount := ^charsCount + 1; sentsCount := ^sentsCount + 1; }
			else if (isdel(c)) { sentsCount := ^sentsCount + 1; }
		}
	});

	Triple(^sentsCount, ^wordsCount, ^charsCount);
}

textReadabilityGradeStrings = [
		_("Kindergarten"), _("First/Second Grade"), _("Third Grade"), _("Fourth Grade"),
		_("Fifth Grade"), _("Sixth Grade"), _("Seventh Grade"), _("Eighth Grade"),  _("Ninth Grade"),
		_("Tenth Grade"),  _("Eleventh Grade"), _("Twelfth grade"), _("College student"), _("Professor")
	];

calculateReadability(items : Triple<int, int, int>) -> double {
	ss = items.first; ww = items.second; cc = items.third;
	if (ww != 0 && ss != 0) 4.71 * i2d(cc) / i2d(ww) + 0.5 * i2d(ww) / i2d(ss) - 21.43 else 0.0
}

getTextReadabilityIndex(text : string) -> double {
	calculateReadability(getTextItemsCount(text))
}

getTextsReadabilityIndex(texts : [string]) -> double {
	totalItems = fold(texts, Triple(0, 0, 0), \acc, text -> { items = getTextItemsCount(text); Triple(acc.first + items.first, acc.second + items.second, acc.third + items.third) })
	r  = calculateReadability(totalItems);
	r
}

getTextsReadabilityIndexIter(texts : [string], fn : (i : int, readability : double) -> void) -> double {
	totalItems = foldi(texts, Triple(0, 0, 0), \i, acc, text -> { items = getTextItemsCount(text); fn(i, calculateReadability(items)); Triple(acc.first + items.first, acc.second + items.second, acc.third + items.third) })
	r  = calculateReadability(totalItems);
	r	
}

getTextReadabilityGrade(index : double) -> string {
	textReadabilityGradeStrings[ forceRange( floor(index), 0, length(textReadabilityGradeStrings) - 1 ) ]
}
