import string;
import text/translation;
import math/math;
import text/unicodecharacters;

export {
	// Calculates readability according to https://en.wikipedia.org/wiki/Automated_readability_index
	// you can also fast check any text by rhapsode\test\ari.py
	getTextsReadabilityIndex(texts : [string]) -> double;
	getTextsReadabilityIndexIter(texts : [string], fn : (i : int, readability : double) -> void) -> double;
	getTextReadabilityGrade(index : double) -> string;

	TextReadabilityInfo : (
		grade : double,
		gradeLevel : string,
		charactersCount : int,
		words : [string],
		sentences : [string]
	);

	getTextReadabilityInfo(texts : [string]) -> TextReadabilityInfo;
}

textReadabilityGradeStrings = [
	_("Kindergarten"), _("First/Second Grade"), _("Third Grade"), _("Fourth Grade"),
	_("Fifth Grade"), _("Sixth Grade"), _("Seventh Grade"), _("Eighth Grade"),  _("Ninth Grade"),
	_("Tenth Grade"),  _("Eleventh Grade"), _("Twelfth grade"), _("College student"), _("Professor")
];

getTextsReadabilityIndex(texts : [string]) -> double {
	getTextReadabilityInfo(texts).grade
}

getTextsReadabilityIndexIter(texts : [string], fn : (i : int, readability : double) -> void) -> double {
	iteri(texts, \i, text -> { 
		fn(i, getTextReadabilityInfo([text]).grade);
	});
	getTextReadabilityInfo(texts).grade
}

getTextReadabilityGrade(index : double) -> string {
	textReadabilityGradeStrings[ forceRange( floor(index), 0, length(textReadabilityGradeStrings) - 1 ) ]
}

getTextReadabilityInfo(texts : [string]) -> TextReadabilityInfo {
	updTexts = map(texts, \t -> {
		trimT = trim(t); // don't need spaces
		lastLetter = strsubsmart(trimT, -1, 0); 
		// we divide sentences by ".", "!" and "?"
		// so if sentence didn't end it with them - add "."!
		if (lastLetter != "." && lastLetter != "!" && lastLetter != "?") {
			trimT + "."
		} else {
			trimT
		}
	});
	bigText = strGlue(updTexts, " ");

	sentences = filter(strSplit2WithoutLeave(bigText, [".", "!", "?"]), \sentence -> strlen(sentence) > 3);
	sentencesCount = length(sentences);
	words = strSplit2WithoutLeave(bigText, [" "]);
	wordsCount = length(words);
	characters = stringCharsFold(bigText, 0, \acc, char -> if (isDigit(char) || isLetter(char)) acc + 1 else acc);

	grade = roundWithPrecision(4.71 * (i2d(characters) / i2d(wordsCount)) + 0.5 * (i2d(wordsCount) / i2d(sentencesCount)) - 21.43, 2);
	gradeLevel = getTextReadabilityGrade(grade);

	TextReadabilityInfo(
		grade,
		gradeLevel,
		characters,
		words,
		sentences
	)
}
