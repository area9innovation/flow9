import ds/arrayutils;
import text/unicodecharacters;
import ui/fontmapping;

export {
	// TODO refactor due these are used to partial functionality, do not bring
	// semantically complete functionality, but used in some places, which
	// themselves may duplicate each other.
	// Seems text breaking algo needs to be implemented to replace
	// existing in paragraph.flow and tparagraph.flow.

	// Choose leftmost valid string position from two given.
	nextValidStrPos(left: int, right: int) -> int;

	// Determine where to split the text, based on unicode categories.
	getCharCatSplitPos(t: string, i: int, endPos: int) -> int;
	// END TODO

	DirectionAndMajority(d: int, m: int);

	getTextDirectionAndMajority(t: string) -> DirectionAndMajority;

	reflowTextToBiDi(text: [[?]], isEmpty: (?) -> bool, getText: (?) -> string, setText: (?, string) -> ?) -> [[?]];
}

// Appears when automatic line break takes place, disappears on no more need.
LineTerminal(dm: DirectionAndMajority);

nextValidStrPos(left: int, right: int) -> int {
	if (left >= 0 && (right < 0 || left < right)) left else right;
}

getCharCatSplitPos(t: string, i: int, endPos: int) -> int {
	// TODO make these refs part of accumulator in stringFoldi.
	htmlEntity: ref int = ref -1;
	htmlTag: ref int = ref -1;
	stringFoldi(strSubRange(t, i, nextValidStrPos(endPos, strlen(t))), -1, \cur_pspi, pspacc, cur_pspcode -> {
		ppr_pspcode = getCharCodeAt("  "+t, cur_pspi+i);
		pre_pspcode = getCharCodeAt(" "+t, cur_pspi+i);
		if (^htmlEntity != -1) {
			if (pre_pspcode==59) {
				htmlEntity := -1;
				nextValidStrPos(pspacc, cur_pspi+i)
			} else if ((pre_pspcode != 35 && pre_pspcode != 38 && pre_pspcode < 48) || (pre_pspcode > 57 && pre_pspcode < 65) || (pre_pspcode > 90 && pre_pspcode < 97) || pre_pspcode > 122)
				nextValidStrPos(pspacc, cur_pspi+i+1)
			else
				pspacc
		} else if (pre_pspcode == 38) {
			htmlEntity := cur_pspi+i;
			pspacc;
		} else if (^htmlTag != -1) {
			if (pre_pspcode == 62) {
				nextValidStrPos(pspacc, cur_pspi+i)
			} else pspacc;
		} else if (pre_pspcode == 60) {
			htmlTag := cur_pspi+i;
			pspacc;
		} else {
			nxt_pspcode = getCharCodeAt(t+" ", cur_pspi+i+1);
			ppr_cat = getUnicodeCategory(ppr_pspcode);
			pre_cat = getUnicodeCategory(pre_pspcode);
			cur_cat = getUnicodeCategory(cur_pspcode);
			nxt_cat = getUnicodeCategory(nxt_pspcode);
			pre_alp = getUnicodeAlphabet(pre_pspcode);
			cur_alp = getUnicodeAlphabet(cur_pspcode);
			if (
				(isPunct(cur_cat) && !(contains([0x27, 0x2C, 0x2E], cur_pspcode) || pre_cat == uc_decimalDigitNumber || nxt_cat == uc_decimalDigitNumber)) ||
				(isPunct(pre_cat) && (cur_cat != uc_decimalDigitNumber || ppr_cat != uc_decimalDigitNumber)) ||
				(isPunct(cur_cat) && (pre_cat != uc_decimalDigitNumber || nxt_cat != uc_decimalDigitNumber)) ||

				(pre_alp != cur_alp) || (pre_cat == uc_spaceSeparator) || (cur_cat == uc_spaceSeparator) ||
				false
			)
				nextValidStrPos(pspacc, cur_pspi+i)
			else
				pspacc;
		}
	});
}

BiDiWrapper(word: ?);
BiDiWord<?> ::= LineTerminal, BiDiWrapper<?>;
BiDiLine(words: [BiDiWord<?>], startDM: DirectionAndMajority, endDM: DirectionAndMajority);


_isLetter = \ipcat -> {
	ipcat == uc_uppercaseLetter || ipcat == uc_lowercaseLetter || ipcat == uc_titlecaseLetter || ipcat == uc_modifierLetter || ipcat == uc_otherLetter || ipcat == uc_nonSpacingMark;
}

isPunct = \ipcat -> {
	ipcat == uc_openPunctuation || ipcat == uc_closePunctuation || ipcat == uc_initialQuotePunctuation || ipcat == uc_finalQuotePunctuation || ipcat == uc_otherPunctuation;
}

mirrorWordGlyphsForRtl(s: string, rtl: bool) -> string {
	// We have our strings HTML-encoded, so additional replacements needed.
	COUPLED_MULTI_CHARS = if (js)
		["&lt;", "&gt;", "&#60;", "&#62;", "&#x3C;", "&#3E;", "&#x3c;", "&#3e;"]
	else
		[];

	if (rtl) {
		concatStrings(
			map(
				strSplit2(s, COUPLED_MULTI_CHARS),
				\frag -> eitherMap(
					findi(COUPLED_MULTI_CHARS, \el-> el==frag),
					\i -> COUPLED_MULTI_CHARS[if (0==i%2) i+1 else i-1], /* No XOR in flow for a pity */
					frag
				)
			)
		)
	} else s;
}

getCharDirectionAndMajority(code: int) -> DirectionAndMajority {
	cat = getUnicodeCategory(code);
	DirectionAndMajority(getUnicodeDirection(code), if (_isLetter(cat) || contains([0x200E, 0x202D], code)) 2 else b2i(cat == uc_decimalDigitNumber));
}

// Makes one DM pair from two, this function is fold helper.
fold2DMs(first: DirectionAndMajority, second: DirectionAndMajority) -> DirectionAndMajority {
	if (first.m > second.m) first else
	if (second.m > first.m) second else
	DirectionAndMajority(if (first.d == uc_dir_rtl || first.d == uc_dir_ltr) first.d else second.d, max(first.m, second.m));
}

// Returns word direction and majority flag (meaning this direction to be inherited
// by adjacent words with no majority).
getTextDirectionAndMajority(t: string) -> DirectionAndMajority {
	stringFold(
		unescapeHtml(t), DirectionAndMajority(uc_dir_flow, 0), \acc: DirectionAndMajority, code: int ->
			fold2DMs(acc, getCharDirectionAndMajority(code))
	);
}

getWordDirectionAndMajority(w: BiDiWord<?>, getText: (?) -> string) -> DirectionAndMajority {
	switch (w) {
		BiDiWrapper(nativeW): getTextDirectionAndMajority(getText(nativeW));
		LineTerminal(dm): dm;
	}
}

getWordsDirectionAndMajority(ws: [BiDiWord<?>], getText: (?) -> string) -> DirectionAndMajority {
	fold(map(ws, \w -> getWordDirectionAndMajority(w, getText)), DirectionAndMajority(uc_dir_flow, 0), fold2DMs);
}

debugWord(w: BiDiWord<?>, getText: (?) -> string) -> string {
	switch(w) {
		BiDiWrapper(ww): toString(getText(ww));
		LineTerminal(__): "<>";
	};
}

groupByCounterDirReverse(ws: [BiDiWord<?>], getText: (?) -> string) -> [[BiDiWord<?>]] {
	rtl = getDefaultRtl();
	defaultDir = if (rtl) uc_dir_rtl else uc_dir_ltr;
	counterDir = if (rtl) uc_dir_ltr else uc_dir_rtl;
	if (length(ws) < 2) [ws] else fold(
		tail(ws), Pair([[ws[0]]], getWordDirectionAndMajority(ws[0], getText)), \acc: Pair<[[BiDiWord<?>]], DirectionAndMajority>, w: BiDiWord<?> -> {
			wdm = getWordDirectionAndMajority(w, getText);
			Pair(
				if (acc.second.d == counterDir && acc.second.m > 1 && wdm.d != defaultDir)
					insertArray(tail(acc.first), 0, insertArray(acc.first[0], 0, w))
				else
					insertArray(acc.first, 0, [w]),
				if (wdm.m > 1) wdm else acc.second
			)
		}
	).first;
}

reflowLineToBiDi(ws: [BiDiWord<?>], isEmpty: (?) -> bool, getText: (?) -> string, setText: (?, string) -> ?) -> [BiDiWord<?>] {
	rtl = getDefaultRtl();
	// Grouping words with counter-direction into subarrays, and reversing order.
	ltrGrouping = groupByCounterDirReverse(ws, getText);

	// Repeating same for each group and reverse them back â€” to cut group trailing punctuation, and counter-directed groups now in reverse order.
	ltrCleanGrouping = concatA(map(ltrGrouping, \lgws -> reverseA(groupByCounterDirReverse(lgws, getText))));

	// Filtering out empty fragments and joining all groups back together.
	r = filter(
		concatA(
			map(ltrCleanGrouping, \grp -> {
				grprtl = (length(unwrapLine(grp)) == 1) == rtl;
				map(grp, \w -> switch(w) {
					BiDiWrapper(nativeW): BiDiWrapper(setText(nativeW, mirrorWordGlyphsForRtl(getText(nativeW), grprtl)));
					LineTerminal(__): w;
				});
			})
		),
		\re -> switch(re) {
			BiDiWrapper(w): !isEmpty(w);
			LineTerminal(__): false;
		}
	);

	// Globally, text remains in reverse order after first operation, which only good for RTL.
	if (getDefaultRtl()) r else reverseA(r);
}

makeBiDiLine(words: [BiDiWord<?>], getText: (?) -> string) -> BiDiLine<?> {
	sdm = getWordsDirectionAndMajority(words, getText);
	edm = getWordsDirectionAndMajority(reverseA(words), getText);
	BiDiLine(words, sdm, edm);
}

unwrapLine(l: [BiDiWord<?>]) -> [?] {
	fold(l, [], \acc, w -> switch (w) {
		BiDiWrapper(nativeW): arrayPush(acc, nativeW);
		LineTerminal(__): acc;
	});
}

reflowTextToBiDi(text: [[?]], isEmpty: (?) -> bool, getText: (?) -> string, setText: (?, string) -> ?) -> [[?]] {
	lines = map(text, \l -> makeBiDiLine(map(l, \w -> BiDiWrapper(w)), getText));
	mapi(
		lines, \i,
		line -> unwrapLine(
			reflowLineToBiDi(
				concat3(
					[LineTerminal(fold(
						reverseA(take(lines, i)), DirectionAndMajority(uc_dir_flow, 0), \acc: DirectionAndMajority, lineAbove -> fold2DMs(acc, lineAbove.endDM)
					))],
					line.words,
					[LineTerminal(fold(
						tailFrom(lines, i+1), DirectionAndMajority(uc_dir_flow, 0), \acc: DirectionAndMajority, lineBelow -> fold2DMs(acc, lineBelow.startDM)
					))]
				),
				isEmpty, getText, setText,
			),
		)
	);
}
