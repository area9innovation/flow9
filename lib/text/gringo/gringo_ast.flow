import ds/array;

export {
	GTerm ::= GRule, GPrecedence, GChoice, GSeq, GStar, GPlus, GOpt, GNegate, GError, GLower, GUnquote, GString, GRange, GVar, GEpsilon;

	GRule(id : string, term : GTerm, body : GTerm);

	// For precendence handling, this is choice, but with precedence
	GPrecedence(left : GTerm, right : GTerm);

	// Ordered choice
	GChoice(left : GTerm, right : GTerm);
	GSeq(left : GTerm, right : GTerm);
	GStar(term : GTerm);
	GPlus(term : GTerm);
	GOpt(term : GTerm);
	GNegate(term : GTerm);
	GLower(term : GTerm);	// Lowers the rule one step down
	GError(term : GTerm);	// If the child fails, report an error, but otherwise continue
	GUnquote(term : GTerm);	// Produces the matched output, except for GString, which is literally written out
	GString(text : string);
	GRange(lower : int, upper : int);
	GVar(id : string);
	GEpsilon();

	gprecedences(rt : [GTerm]) -> GTerm;
	gchoices(rt : [GTerm]) -> GTerm;
	gseq(rt : [GTerm]) -> GTerm;
}

gprecedences(rt : [GTerm]) -> GTerm {
	if (rt == []) GEpsilon()
	else {
		t = reverseA(rt);
		fold(tail(t), t[0], \acc, tt -> {
			GPrecedence(tt, acc)
		})
	}
}

gchoices(rt : [GTerm]) -> GTerm {
	if (length(rt) == 2 && rt[1] == GEpsilon()) GOpt(rt[0])
	else if (rt == []) GEpsilon()
	else {
		t = reverseA(rt);
		fold(tail(t), t[0], \acc, tt -> {
			GChoice(tt, acc)
		})
	}
}

gseq(rt : [GTerm]) -> GTerm {
	if (rt == []) GEpsilon()
	else {
		t = reverseA(rt);
		fold(tail(t), t[0], \acc, tt -> {
			GSeq(tt, acc)
		})
	}
}
