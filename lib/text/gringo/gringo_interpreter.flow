import text/gringo/gringo_typed_action;

import tools/gringo/gringo_grammar;
import tools/gringo/gringo_ast_actions;
import tools/gringo/gringo_prepare;

export {
	// Given a grammar, prepare it to be used for the interpretative parse
	prepareGringoParser(grammar : string, onError : (string) -> void) -> GTerm;

	// Parse a text. This corresponds to gringoTypedParse from `gringo_typed_action`
	gringoInterpretedParse(
		// The text to parse
		text : string, 
		// The actions - make this with gringoTypedAction
		action : GringoAction<List<?>>, 
		// The grammar as a GTerm
		grammar : GTerm,
		// A default value in case parsing fail
		defaultVal : ?,
		// For parse errors
		onError : (string) -> void,
	) -> ?;

	// Checks if all semantic actinos in the grammar have operators
	checkGringoTypedOps(ops : GringoTypedOperators<?>, grammar : GTerm) -> void;
}

prepareGringoParser(grammar : string, onError : (string) -> void) -> GTerm {
	ggrammar = gringoGrammar();
	genv = GringoEnv(grammar, makeTree(), gringoAstAction, makeList(), makeTree(), 0, false, 0);
	env = gringoParse(genv, gringoGrammar());
	term = gringoEndGame(grammar, !env.fail, env.i, env.output, env.errors, GEpsilon(), onError);
	prepareGringoGrammar(optimizeGTerm(term));
}

gringoInterpretedParse(
		// The text to parse
		text : string, 
		// The actions - make this with gringoTypedAction
		action : GringoAction<List<?>>, 
		// The grammar as a GTerm
		grammar : GTerm,
		// A default value in case parsing fail
		defaultVal : ?,
		// For parse errors
		onError : (string) -> void,
	) -> ? {
	genv : GringoEnv<List<?>> = GringoEnv(text, makeTree(), action, makeList(), makeTree(), 0, false, 0);
	env = gringoParse(genv, grammar);

	gringoEndGame(text, !env.fail, env.i, env.output, env.errors, defaultVal, onError);
}

checkGringoTypedOps(ops : GringoTypedOperators<?>, grammar : GTerm) -> void {
	rec = \gg -> checkGringoTypedOps(ops, gg);
	switch (grammar) {
		GRule(id, term, body): { rec(term); rec(body); }
		GPrecedence(left, right): { rec(left); rec(right); }
		GChoice(left, right): { rec(left); rec(right); }
		GSeq(left, right): { rec(left); rec(right); }
		GStar(term): { rec(term); }
		GPlus(term): { rec(term); }
		GOpt(term): { rec(term); }
		GNegate(term): { rec(term); }
		GError(term): { rec(term); }
		GLower(term): { rec(term); }
		GUnquote(term): {
			switch (term) {
				GString(op): {
					if (!containsKeyTree(ops.nullops, op)
						&& !containsKeyTree(ops.unops, op)
						&& !containsKeyTree(ops.binops, op)
						&& !containsKeyTree(ops.ternops, op)
						&& !containsKeyTree(ops.quadops, op)
						&& !contains(["true", "false", "s2i", "s2d", "list", "cons", "print", "dump"], op)
					) {
						println(op + " is unknown semantic action");
					}
				}
				default: {}
			}
		}
		GString(text): {}
		GRange(lower, upper): {}
		GVar(id): {}
		GEpsilon(): {}
	}
}
