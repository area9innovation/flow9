import text/gringo/gringo_action;
import text/gringo/dcode_lib;
import tools/gringo/gringo_parse;
import lingo/linecolumn;
import ds/tree;
import string_utils;

/*
This provides a facility to do typed semantic actions for expression-like types.
In the grammar, you can use these actions:

	s2i		Convert a string to a typed int
	s2d		Convert a string to a typed double
	true	Make the constant "true"
	false	Make the constant "false"
	list	Construct an empty list or array
	cons	Append an element to a list or array

In addition, send in trees of unary, binary and ternary operators which will
receive their children as arguments, and construct the appropriate value.

TODO:
- Add "swap" and other common stack operations

Typical needs:
- "hex" parsing: Use a unary that calls parseHex
- string escaping: Use a unary that calls deserializeString(t).first with quotes preserved
*/
export {
	// This is a helper to construct a typed action helper for gringoTypedParse
	gringoTypedAction(
		// Make a string
		makeString : (string) -> ?, 
		// Extract a string from a value (typically a string)
		getString : (?) -> string,
		// Construct a bool
		mkBool : (bool) -> ?, 
		// Convert string to an int
		toInt : (string) -> ?, 
		// Convert string to a double
		toDouble : (string) -> ?, 
		// Make an empty list/array
		mklist : () -> ?, 
		// Append the second element to the first list/array
		push : (?, ?) -> ?,
		// Operators
		operators : GringoTypedOperators<?>,
	) -> GringoAction<List<?>>;

	GringoTypedOperators(
		// A tree of nullary operators
		nullops : Tree<string, () -> ?>,
		// A tree of unary operators
		unops : Tree<string, (?) -> ?>,
		// Binary operators
		binops : Tree<string, (?, ?) -> ?>,
		// Ternary operators
		ternops : Tree<string, (?, ?, ?) -> ?>,
		// Quadranary operators
		quadops : Tree<string, (?, ?, ?, ?) -> ?>,
		// General fallback construct, which gets the entire stack and returns the new stack
		stackops : Tree<string, (List<?>) -> List<?>>,
	);

	// This does a parse of this text with typed result values of type ?. 
	// If the parse fails, the default value is returned.
	// Use this one if you have a pre-compiled grammar for the `parser`.
	gringoTypedParse(
		// The text to parse
		text : string, 
		// The actions - make this with gringoTypedAction
		action : GringoAction<List<?>>, 
		// The generated parser function from Gringo
		parser : (DParseAcc<List<?>>) -> bool, 
		// A default value in case parsing fail
		defaultVal : ?,
		// For parse errors
		onError : (string) -> void,
	) -> ?;

	// A helper to report errors in a nice way. Used for the interpreter
	gringoEndGame(text : string, success : bool, i : int, maxi : int, output : List<?>, 
		errors : Tree<int, string>, defaultVal : ?, onError : (string) -> void) -> ?;
}

gringoTypedAction(
		makeString : (string) -> ?, 
		getString : (?) -> string,
		mkBool : (bool) -> ?, 
		toInt : (string) -> ?, 
		toDouble : (string) -> ?, 
		mklist : () -> ?, 
		push : (?, ?) -> ?,
		ops : GringoTypedOperators<?>,
	) -> GringoAction<List<?>> {
	unops = ops.unops;
	binops = ops.binops;
	ternops = ops.ternops;
	GringoAction(
		\stack : List<?>, command : string -> {
			pop = \s, fn : (h : ?, t : List<?>) -> List<?> -> {
				switch (s) {
					EmptyList(): {
						println("Expected something on stack");
						s;
					}
					Cons(h, t): fn(h, t);
				}
			}
			if (command == "true") {
				Cons(mkBool(true), stack)
			} else if (command == "false") {
				Cons(mkBool(false), stack)
			} else if (command == "s2i") {
				pop(stack, \h, t-> Cons(toInt(getString(h)), t));
			} else if (command == "s2d") {
				pop(stack, \h, t-> Cons(toDouble(getString(h)), t));
			} else if (command == "list") {
				Cons(mklist(), stack)
			} else if (command == "print") {
				pop(stack, \h, t -> {
					println("Print: " + toString(h));
					stack;
				});
			} else if (command == "dump") {
				println("Stack");
				iterList(stack, println);
				stack;
			} else if (command == "cons") {
				pop(stack, \h1, t1 -> {
					pop(t1, \h2, t2 -> {
						nv = push(h1, h2);
						Cons(nv, t2)
					})
				});
			// TODO: We can add swap, rot and other stack manipulation
			} else {
				mnullop = lookupTree(ops.nullops, command);
				switch (mnullop) {
					Some(nullop): Cons(nullop(), stack);
					None(): {
						munop = lookupTree(unops, command);
						munop ?? {
							pop(stack, \h, t -> {
								val = munop(h);
								Cons(val, t)
							});
						} : {
							mbinop = lookupTree(binops, command);
							switch (mbinop) {
								None(): {
									mternop = lookupTree(ternops, command);
									switch (mternop) {
										None(): {
											mquadop = lookupTree(ops.quadops, command);
											switch (mquadop) {
												None(): {
													mstackop = lookupTree(ops.stackops, command);
													switch (mstackop) {
														None(): {
															println("Unknown Command " + command);
															stack;
														}
														Some(stackop): stackop(stack);
													}
												}
												Some(quadop): {
													pop(stack, \h3, t1 -> {
														pop(t1, \h2, t2 -> {
															pop(t2, \h1, t3 -> {
																pop(t3, \h0, t4 -> {
																	val = quadop(h0, h1, h2, h3);
																	Cons(val, t4);
																})
															})
														})
													})
												}
											}
										}
										Some(ternop): {
											pop(stack, \h2, t1 -> {
												pop(t1, \h1, t2 -> {
													pop(t2, \h0, t3 -> {
														val = ternop(h0, h1, h2);
														Cons(val, t3);
													})
												})
											})
										}
									}
								}
								Some(binop): {
									pop(stack, \h2, t1 -> {
										pop(t1, \h1, t2 -> {
											val = binop(h1, h2);
											Cons(val, t2);
										})
									})
								}
							}
						}
					}
				}
			}
		},
		\stack : List<?>, token : string -> {
			Cons(makeString(token), stack)
		}
	);
}

gringoTypedParse(
		text : string, action : GringoAction<List<?>>, parser : (DParseAcc<List<?>>) -> bool, defaultVal : ?,
		onError : (string) -> void,
	) -> ? {
	pacc : DParseAcc<List<?>> = DParseAcc(text, 
		action,
		0,
		makeList(),
		makeTree(),
		makeList(),
		0,
		0
	);
	success = parser(pacc);
	gringoEndGame(text, success, pacc.i, pacc.maxi, pacc.output, pacc.errors, defaultVal, onError);
}

gringoEndGame(text : string, success : bool, i : int, maxi : int, output : List<?>, 
	errors : Tree<int, string>, defaultVal : ?, onError : (string) -> void) -> ? {

	// First, check if we did not parse all, since this can lead to "down the line" errors,
	// which are not right, so we want this first
	if (i < strlen(text) || !success) {
		resolver = makeLineResolver(text);
		linecol = findLine(resolver, maxi);
		onError(formatErrorLine(linecol, "Parsing ended here"));
	} else {
		// We report other errors here
		traverseInOrder(errors, \pos, error -> {
			resolver = makeLineResolver(text);
			linecol = findLine(resolver, pos);
			onError(formatErrorLine(linecol, error));
		});
	}

	switch (output) {
		EmptyList(): {
			onError("Failing back to default value");
			defaultVal;
		}
		Cons(h, t): {
			if (!isEmptyList(t)) {
				onError("More than one result on stack");
				iterList(t, println);
			}
			h;
		}
	}
}

formatErrorLine(linecol : LineColumn, error : string) -> string {
	indentation = strLeft(linecol.line, linecol.lineIndex - 1);
	spaced = stringFoldChar(indentation, "", \acc, s -> {
		acc + if (s == "\t") s else " ";
	});
	i2s(linecol.lineno) + ":" + i2s(linecol.column) + ": " + error
	+ "\n" + linecol.line
	+ "\n" + spaced + "^";
}
