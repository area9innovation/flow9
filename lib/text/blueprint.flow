import ds/arrayutils;

/*
	Blueprint
	---------

	Blueprint allows to substitute parts of the string marked with %...% with values described
	in a dictionary that is passed a second parameter in a format [key0, value0, key1, value1, ...].
	It also unindent lines based on the indentation of the first line.

	In general using blueprint makes code a bit longer, however it's much easier to read and maintain.

	Example
	-------

		blueprint("
				%item%Count = 4;

				if (%var% > 5) {
					foo(%item%Count + %value%)
				}
			", [
				"item", myItem,
				"var", "myVar",
				"value", myValue
			]
		)

	is equivalent to:

		myItem + "Count = 4;\n\n" +
		"if (" + myVar + " > 5) {\n" +
		"\tfoo(" + myItem + "Count + " + myVar + ")\n"
		"}\n"

	I.e. every key marked with % is replaced by it's value (`item` is replaced by `myItem`) and
	indentation of the line matches the very first one.

	Multiline values
	----------------

	Note, all substituted multiline values will be indented to match indentation of it's first line. I.e.

		blueprint("
				this
					is %value%
				we have here
			", [
				"value", "a\nvery\n\tbig\nsurprise"
			]
		)

	will generate:

		this
			is a
			very
				big
			surprise
		we have here

	Conditional statements
	----------------------

	You can also use special syntax for conditional statements:

		% if flag1 %
			% if !flag2 %
				...
			% endif %
		% else %
			...
		% endif %

	Unfortunately you have to convert flag to string when passing as part of key-value array:

		[	"flag1", b2s(myFlag1),
			"flag2", b2s(myFlag2),
			...
		]

	Reserved parameter names
	------------------------

	Names nl0, nl1, nl2, nl3 are reserved for new line helpers

	New line helpers
	----------------

	Sometimes it is hard to control new lines. These helpers make it for us: nl0, nl1, nl2, nl3.

	This statement

		%var1%
		%nl1%
		%var2%

	this one

		%var1%

		%nl1%
		%var2%

	and this

		%var1%%nl1%%var2%

	produce the same result because these helpers eat adjacent new lines characters "\n"
	and insert number of new line characters corresponding to the number in the name

	Further development
	-------------------

	In future it could be replaced by new multiline string Flow type similar to one in PHP and Haxe.

		"""
		multiline text
		"""

	Grammar draft for it:

		string0 = nl '"""' (nl line)* nl '"""';
		string1 = nl '\t"""' (nl "\t" line)* nl '\t"""';
		...

		line = ("$" atom | !'\n' onechar)*;
*/

export {
	blueprint(s : string, parameters : [string]) -> string;
	// This function ignores unknown parameters, so it can be used for inner blueprinting (it does not produce errors: Blueprint error: condition `...` can't be resolved)
	blueprintPartial(s : string, parameters : [string]) -> string;

	buildTabs(n : int) -> string;
	indentLines(s : string, indent : int) -> string;
	indentLinesA(lines : [string], indent : int) -> string;

	// count number of tabs (ignoring spaces) in the beginning of the line
	countLineIndentation(line : string) -> int;

	// Maps each element, ignores the result if the result is the empty string, and then glues everything together
	// map |> filter |> strGlue
	superglue(xs : [?], fn : (?) -> string, delimiter : string) -> string;
	supergluei(xs : [?], fn : (int, ?) -> string, delimiter : string) -> string;
}

BLUEPRINT_RESERVED_NAMES = ["nl0", "nl1", "nl2", "nl3"];

blueprint(s : string, parameters : [string]) -> string {
	blueprintEx(s, parameters, true, true);
}

blueprintPartial(s : string, parameters : [string]) -> string {
	blueprintEx(s, parameters, false, false);
}

blueprintEx(s : string, parameters : [string], requireVariables : bool, processNewLines : bool) -> string {
	substitute = \str, key2value -> {
		// Step 1. Unindent lines
		unindented = unindentLines(str);
		// Step 2. Substitute conditional statements
		unconditional0 = substituteConditions(unindented, key2value, requireVariables);
		unconditional = strGlue(unconditional0, "\n");
		// Step 3. Substitute keys
		substituteKeys(unconditional, key2value);
	}

	// Process parameters
	key2value = foldi(parameters, makeTree(), \i, acc, param -> {
		if (odd(i)) {
			key = parameters[i - 1];
			if (contains(BLUEPRINT_RESERVED_NAMES, param)) {
				println("Blueprint error: parameter name '" + key + "' is reserved");
			}
			value = if (strContains(param, "%")) {
				substitute(param, acc);
			} else {
				param;
			}
			setTree(acc, key, value);
		} else {
			acc;
		}
	});

	withKeys = substitute(s, key2value);
	if (processNewLines) {
		substituteNewLines(withKeys);
	} else {
		withKeys;
	}
}

BluePrint ::= BluePrintCondition, BluePrintElse, BluePrintLines;
	BluePrintCondition(condition : string, originalLine : string, i : int);
	BluePrintElse(originalLine : string, i : int);
	BluePrintLines(lines : List<string>);

substituteConditions(linesA : [string], key2value : Tree<string, string>, require : bool) -> [string] {
	unpair(
		foldi2(linesA, makeList(), makeList(), \i, accResultStack, accCurrentLines, line -> {
			condition = trim(takeBetween(line, "% if ", " %", ""));
			if (condition != "") {
				Pair(Cons(BluePrintCondition(condition, line, i), Cons(BluePrintLines(accCurrentLines), accResultStack)), makeList());
			} else if (strContains(line, "% else %")) {
				Pair(Cons(BluePrintElse(line, i), Cons(BluePrintLines(accCurrentLines), accResultStack)), makeList());
			} else if (strContains(line, "% endif %")) {
				unquadruple(
					foldpList(
						Cons(BluePrintLines(accCurrentLines), accResultStack),
						Quadruple(false, false, makeList(), Triple(makeList(), "", makeList())),
						\stack, acc, stackItem -> {
							unquadruple(acc, \foundCondition, foundElse, result, elseBranches -> {
								if (foundCondition) {
									acc;
								} else {
									switch (stackItem) {
										BluePrintCondition(conditionStr, ifLine, ifIdx): {
											negateCondition = startsWith(conditionStr, "!");
											conditionStr2 = ltrim2(conditionStr, "!");
											valueM = lookupTree(key2value, conditionStr2);
											boolValue2M = maybeMap(valueM, \value -> {
												// convert string value to boolean
												boolValue = s2b(value);
												if (negateCondition) !boolValue else boolValue;
											});
											untriple(elseBranches, \trueLines, elseLine, falseLines -> {
												lines = eitherFn(boolValue2M,
													\boolValue -> {
														body = if (boolValue) {
															trueLines;
														} else {
															falseLines;
														}
														firstLine = foldList(body, ifLine, \accLine, l -> if (l != "") l else accLine);
														indentDiff = countLineIndentation(ifLine) - countLineIndentation(firstLine);
														if (indentDiff == 0) {
															body;
														} else if (indentDiff < 0) {
															mapList(body, \l -> unindentLine(l, -indentDiff));
														} else {
															mapList(body, \l -> indentLine(l, indentDiff));
														}
													},
													\ -> {
														if (require) {
															println("Blueprint error: condition `" + conditionStr + "` can't be resolved, line: " + i2s(ifIdx + 1));
														}
														trueLines2 = if (elseLine == "") {
															trueLines;
														} else {
															Cons(elseLine, trueLines);
														}
														concatList(
															concatList(
																Cons(line, falseLines),
																trueLines2
															),
															makeList1(ifLine)
														);
													}
												);
												Quadruple(true, true, Cons(BluePrintLines(lines), tailList(stack)), elseBranches);
											});
										}
										BluePrintElse(originalElseLine, lineIdx): {
											untriple(elseBranches, \trueLines, elseLine, falseLines -> {
												if (elseLine == "") {
													Quadruple(false, true, result, Triple(makeList(), originalElseLine, trueLines));
												} else {
													println("Blueprint error: double ELSE statement, lines: " + i2s(lineIdx + 1) + ", " + i2s(i + 1));
													brokenLines = concatList(
														concatList(
															Cons(line, falseLines),
															Cons(elseLine, trueLines)
														),
														makeList1(originalElseLine)
													);
													Quadruple(true, true, Cons(BluePrintLines(brokenLines), tailList(stack)), elseBranches);
												}
											});
										}
										BluePrintLines(lines): {
											elseBranches2 = untriple(elseBranches, \trueLines, elseLine, falseLines -> {
												Triple(concatList(trueLines, lines), elseLine, falseLines);
											});
											Quadruple(false, foundElse, result, elseBranches2);
										}
									}
								}
							});
						}
					),
					\ifClosed, __, result, __ -> {
						if (!ifClosed) {
							println("Blueprint error: ENDIF statement without IF, line: " + i2s(i + 1));
						}
						Pair(result, makeList());
					}
				);
			} else {
				Pair(accResultStack, Cons(line, accCurrentLines));
			}
		}),
		\resultStack, restLines -> {
			list2array(fold(
				list2array(Cons(BluePrintLines(restLines), resultStack)),
				makeList(),
				\acc, stackItem -> {
					switch (stackItem) {
						BluePrintCondition(__, line, i): {
							println("Blueprint error: IF statement is not closed, line: " + i2s(i + 1));
							Cons(line, acc);
						}
						BluePrintElse(line, i): {
							println("Blueprint error: ELSE statement is not closed, line: " + i2s(i + 1));
							Cons(line, acc);
						}
						BluePrintLines(lines): {
							concatList(lines, acc);
						}
					}
				}
			));
		}
	);
}

BlueReplacement : (start : int, end : int, value : string);

substituteKeys(s : string, key2value : Tree<string, string>) -> string {
	replacements =
		foldTree(key2value, [], \key, value, acc -> {
			indecies = multipleStrIndexOf(s, "%" + key + "%");
			valueLines = strSplit(value, "\n");

			fold(indecies, acc, \acc2, index -> {
				// Indent multi-line values to match indentation of it's first line
				value2 =
					if (length(valueLines) > 1) {
						lastLineIndent = lineIndetationByIndex(s, index);
						tabs = buildTabs(lastLineIndent);
						strGlue(mapi(valueLines, \i, valueLine -> {
							if (i == 0) {
								valueLine
							} else {
								tabs + valueLine;
							}
						}), "\n")
					} else {
						value
					};

				arrayPush(acc2, BlueReplacement(index, index + strlen(key) + 2, value2))
			})
		});

	reversed =
		mergeSort(replacements, \l, r -> {
			genericCompareDesc(l.start, r.start)
		});

	resultDraft = fold(reversed, s, \acc, r : BlueReplacement -> {
		before = strLeft(acc, r.start);
		after = strRight(acc, r.end);
		before + r.value + after
	});

	strGlue(map(strSplit(resultDraft, "\n"), \line -> if (isEmptyLine(line)) "" else line), "\n");
}

substituteNewLines(s : string) -> string {
	fold([0, 1, 2, 3], s, \acc, n -> substituteNewLinesN(acc, n));
}

substituteNewLinesN(s : string, n : int) -> string {
	nls = strRepeat("\n", n);
	parts0 = strSplit(s, "%nl" + i2s(n) + "%");
	len = length(parts0);
	parts = mapi(parts0, \i, part -> {
		p1 = if (i == 0) {
			part;
		} else {
			ltrim2(part, "\n");
		};
		if (i == len - 1) {
			p1;
		} else {
			rtrim2(p1, "\n\t ");
		}
	});
	strGlue(parts, nls);
}

lineIndetationByIndex(s : string, index : int) -> int {
	prefix = strLeft(s, index);
	lastNewlineIndex = strLastIndexOf(prefix, "\n");
	line = if (lastNewlineIndex == -1)
		prefix
	else substring(prefix, lastNewlineIndex + 1, index - lastNewlineIndex - 1);
	countLineIndentation(line);
}

buildTabs(n : int) -> string {
	strRepeat("\t", n);
}

/*
From:
	alkdsjflkjdsa
		fjsajf
			dajhkjfhdsa
		dsalkhj
To:
alkdsjflkjdsa
	fjsajf
		dajhkjfhdsa
	dsalkhj
*/
unindentLines(s : string) -> [string] {
	if (s == "") {
		[];
	} else {
		lines = strSplit(s, "\n");

		if (lines == []) {
			[];
		} else {
			lines2 =
				if (trim2(lines[0], "\t ") == "") {
					tail(lines)
				} else {
					lines
				};

			unindentLines2(lines2);
		}
	}
}

unindentLines2(lines : [string]) -> [string] {
	if (lines == []) {
		[]
	} else {
		firstNotEmptyLine = findDef(lines, \line -> line != "", "");
		lineindentation = countLineIndentation(firstNotEmptyLine);

		map(lines, \line -> unindentLine(line, lineindentation));
	}
}

// count number of tabs (ignoring spaces) in the beggining of the line
countLineIndentation(line : string) -> int {
	line2 = ltrim2(line, " \t");
	tabsAndSpaces = strLeft(line, strlen(line) - strlen(line2));
	strlen(strReplace(tabsAndSpaces, " ", ""));
}

// unindent line at num tabs if possible
unindentLine(line : string, num : int) -> string {
	if (isEmptyLine(line)) {
		""
	} else if (num <= 0) {
		line
	} else {
		c = getCharAt(line, 0);

		if (c == " ") {
			unindentLine(strRight(line, 1), num)
		} else if (c == "\t") {
			unindentLine(strRight(line, 1), num - 1)
		} else {
			line
		}
	}
}

indentLinesA(lines : [string], indent : int) -> string {
	lines2 = indentLines2(lines, indent);
	strGlue(lines2, "\n");
}

indentLines(s : string, indent : int) -> string {
	indentLinesA(strSplit(s, "\n"), indent);
}

indentLines2(lines : [string], indent : int) -> [string] {
	map(lines, \line -> indentLine(line, indent));
}

indentLine(line : string, indent : int) -> string {
	if (isEmptyLine(line))
		""
	else if (indent < 0 && startsWith(line, "\t"))
		indentLine(substring(line, 1, strlen(line) - 1), indent + 1)
	else
		buildTabs(indent) + line;
}

superglue(xs : [?], fn : (?) -> string, delimiter : string) -> string {
	supergluei(xs, \__, x -> fn(x), delimiter)
}

supergluei(xs : [?], fn : (int, ?) -> string, delimiter : string) -> string {
	list = foldi(xs, makeList(), \i, acc, x -> {
		s = fn(i, x);
		if (s == "") {
			acc;
		} else {
			if (isEmptyList(acc)) {
				Cons(s, acc)
			} else {
				Cons(s, Cons(delimiter, acc));
			}
		}
	});
	list2string(list);
}

isEmptyLine(line : string) -> bool {
	ltrim2(line, " \t") == "";
}
