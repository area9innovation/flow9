import formats/xml;
import date;

export {
	xliffNode2string(node : XmlNode, level : int, maybeParent : Maybe<XmlNode>) -> string;

	makeXliffContent(nodes : [XmlNode], productName : string) -> string;
}

// These namespaces are required: they specify that some custom elements (that are out of xliff specs)
// used in our xliff by intention.
xliff_header_attrs = "version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd\"";

makeXliffContent(nodes : [XmlNode], productName : string) {

	bodyIndent = 2;
	body = concatStrings(map(nodes, \n -> { /*println(n);*/ xliffNode2string(n, bodyIndent + 1, None()); }));

	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
	"<xliff " + xliff_header_attrs + ">\n"
	" <file source-language=\"EN-US\">\n"
	"  <header>\n"
	"   <phase-group>\n"
	"    <phase phase-name=\"extraction\" process-name=\"extraction\" product=\"" + xmlEscape(productName) + "\" time=\"" + (timestamp() |> stamp2time |> time2db) + "\"></phase>\n"
	"   </phase-group>\n"
	"  </header>\n"
	"  <body>" + (if (startsWith(body, "\n")) "" else "\n")

	   + body +

 	(if (body == "" || endsWith(body, "\n")) "" else "\n") +
	"  </body>\n"
	" </file>\n"
	"</xliff>\n"
}

xliffIndentCache = generate(0, 16, \l -> concatStrings(generate(0, l, \i -> " ")));
makeXliffIndent(level) {
	if (level < 16) xliffIndentCache[level]
	else makeXliffIndent(level / 2) + makeXliffIndent(level - level / 2)
}

xliffDequote(s) {
	l = strlen(s);
	if (l >= 2 && getCharAt(s, 0) == "\"" && getCharAt(s, l-1) == "\"")
		substring(s, 1, l - 2)
	else
		s
}

// Modified version of xml2string() function
xliffNode2string(node : XmlNode, level : int, maybeParent : Maybe<XmlNode>) {
	space = makeXliffIndent(level);
	restore = \t -> t |> restoreApos |> restoreQuote;
	switch(node) {
		XmlElement(tag, attributes, children): {
			nl = if (tag != "g" && tag != "mrk" && tag != "bpt" && tag != "ept" && tag != "ph") "\n" + space else "";
			atts = fold(uniq(attributes), "", \acc, a ->
				acc + " " + (a.key + "=\"" + xmlEscape(xliffDequote(a.value)) + "\"")  // a.value may be quoted already, in this case make sure to not quote it second time
			);

			(nl + "<" + tag + atts + ">")
				+ concatStrings(map(children, \c -> xliffNode2string(c, level + 1, Some(node)))) +
			("</" + tag + ">")
		}
		XmlText(text): { // plain text with "g" and "x" tags
			eitherFn(maybeParent,
				\p -> {
					switch(p) {
						XmlElement(tag, a, ch):
							if (exists(a, \atr -> atr == XmlAttribute("source-type", "wigi")))
								text
							else if (tag != "wiki-source")
								hideConcatenator(restore(text)) |> if(!^keepXlfInnerTagsUnescaped) xmlEscapeText else idfn
							else
								restore(text);
						default:
							restore(text)
					}
				},
				\ -> {
					restore(text)
				}
			)
		}
	}
}

hideConcatenator(text : string) -> string {
	strReplace(text, "##", "<mrk mtype=\"protected\" wiki=\"##\">$</mrk>");
}

// escaped xml is problem for ranslators when it is part of language syntax
restoreApos(text : string) -> string {
	strReplace(text, "&amp;apos;", "'")
	|> \t -> strReplace(t, "&apos;", "'")
}

restoreQuote(text : string) -> string {
	strReplace(text, "&amp;quot;", "\"")
	|> \t -> strReplace(t, "&quot;", "\"")
}
