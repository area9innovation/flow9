import string;

export {
	deserializeString(s : string) -> Pair<string, string>;
	deserializeString2(s : string, start : int) -> Pair<string, int>;

	// These are useful for JSON parsing
	deserializeRestOfString2(s : string, start : int) -> Pair<string, int>;
	deserializeRestOfString(s : string) -> Pair<string, string>;
}


deserializeString2(s : string, start : int) -> Pair<string, int> {
	if (substring(s, start, 2) == "\"\"") {
		// Common case of empty string
		Pair("", start+2);
	} else if (getCharCodeAt(s, start) == 34) {  // "\""
		deserializeRestOfStringTail(s, start+1);
	} else {
		deserializeRestOfStringTail(s, start);
	}
}

deserializeString(s : string) -> Pair<string, string> {
	rv = deserializeString2(s, 0);
	Pair(rv.first, strRight(s, rv.second))
}

deserializeRestOfString2(s : string, start : int) -> Pair<string, int> {
	deserializeRestOfStringTail(s, start);
}

deserializeRestOfString(s : string) -> Pair<string, string> {
	rv = deserializeRestOfStringTail(s, 0);
	Pair(rv.first, strRight(s, rv.second))
}

deserializeRestOfStringTail(s : string, start : int) -> Pair<string, int> {
	rv = deserializeRestOfStringTail2(s, makeList(), start);
	Pair(cloneString(list2string(rv.first)), rv.second)
}

deserializeRestOfStringTail2(s : string, acc : List<string>, start : int) -> Pair<List<string>, int> {
	strLength = strlen(s);
	quote = strRangeIndexOf(s, "\"", start, strLength);
	// Search for escape only in the candidate string,
	// because no escape is more common:
	escape = strRangeIndexOf(s, "\\", start, quote);
	if (escape != -1 && escape < quote) {
		// Handle escape
		first = substring(s, start, escape - start);
		escapedCharCode = getCharCodeAt(s, escape + 1);
		if (escapedCharCode == 34) {			// "\""
			deserializeRestOfStringTail2(s, Cons("\"", Cons(first, acc)), escape + 2);
		} else if (escapedCharCode == 92) {		// "\"
			deserializeRestOfStringTail2(s, Cons("\\", Cons(first, acc)), escape + 2);
		} else if (escapedCharCode == 110) {	// "n"
			deserializeRestOfStringTail2(s, Cons("\n", Cons(first, acc)), escape + 2);
		} else if (escapedCharCode == 117) {	// "u"
			// Unicode hex escape
			hex = substring(s, escape + 2, 4);
			code = parseHex(hex);
			deserializeRestOfStringTail2(s, Cons(fromCharCode(code), Cons(first, acc)), escape + 6);
		} else if (escapedCharCode == 120) {	// "x"
			// Ascii hex escape
			hex = substring(s, escape + 2, 2);
			code = parseHex(hex);
			deserializeRestOfStringTail2(s, Cons(fromCharCode(code), Cons(first, acc)), escape + 4);
		} else {
			descaped =
				if (escapedCharCode == 116) "\t"			// "t"
				else if (escapedCharCode == 114) "\u000d"	// "r"
				else fromCharCode(escapedCharCode);

			deserializeRestOfStringTail2(s, Cons(descaped, Cons(first, acc)), escape + 2);
		}
	} else if (quote == -1) {
		Pair(Cons(if (start >= strLength) "" else substring(s, start, strLength - start), acc), strLength); // inlined strRight
	} else {
		Pair(Cons(substring(s, start, quote - start), acc), quote + 1);
	}
}
