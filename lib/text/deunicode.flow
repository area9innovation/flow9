import maybe;
import string_utils;
import ds/tree;
import text/unicodecharacters;

export {
	deunicode(s : string) -> string;
}

deunicodeSubstitutions : ref Maybe<Tree<string, string>> = ref None();

deunicode(s : string) -> string {
	substitutions = onlyOnce(deunicodeSubstitutions, \ -> {
		common = [
			// Scandinavian
			"æ", "ae", "ø", "oe", "å", "aa", 
			
			// French
			"é", "e", "è", "e", "ê", "e", "ë", "e",
			"á", "a", "à", "a", "â", "a", "ä", "a",
			
			// Spanish & Portuguese
			"í", "i", "ì", "i", "î", "i", "ï", "i",
			"ó", "o", "ò", "o", "ô", "o", "ö", "o",
			"ú", "u", "ù", "u", "û", "u", "ü", "u",
			"ñ", "n", "ç", "c",
			
			// Slavic
			"š", "s", "č", "c", "ž", "z", "đ", "dj",
			
			// Turkish
			"ğ", "g", "ş", "s", "ı", "i",
			"ý", "y", "ÿ", "y", 
			"ð", "d", "þ", "th", 
			"ƒ", "f",
			"ł", "l", "ń", "n", "ŕ", "r",
			"ť", "t", "ů", "u", 
			"ã", "a", "õ", "o", "ẽ", "e", "ũ", "u", 
			"ą", "a", "ę", "e", "ź", "z", "ż", "z",
			"ő", "o", "ű", "u",
			"ė", "e", "į", "i", "ų", "u",
			"ć", "c", "ț", "t", "ș", "s",
			"ľ", "l", "ĺ", "l", "ђ", "dj", "ћ", "c",

			// Greek (lowercase)
			"α", "a", "β", "b", "γ", "g", "δ", "d", "ε", "e",
			"ζ", "z", "η", "h", "θ", "th", "ι", "i", "κ", "k", 
			"λ", "l", "μ", "m", "ν", "n", "ξ", "x", "ο", "o", 
			"π", "p", "ρ", "r", "σ", "s", "τ", "t", "υ", "u", 
			"φ", "f", "χ", "ch", "ψ", "ps", "ω", "o",
			
			// Cyrillic (lowercase)
			"а", "a", "б", "b", "в", "v", "г", "g", "д", "d", 
			"е", "e", "ё", "e", "ж", "zh", "з", "z", "и", "i", 
			"й", "y", "к", "k", "л", "l", "м", "m", "н", "n", 
			"о", "o", "п", "p", "р", "r", "с", "s", "т", "t", 
			"у", "u", "ф", "f", "х", "kh", "ц", "ts", "ч", "ch", 
			"ш", "sh", "щ", "sch", "ъ", "", "ы", "y", "ь", "", 
			"э", "e", "ю", "yu", "я", "ya",

			// Vietnamese
			"ă", "a", "ơ", "o", "ư", "u",
		];

		lower = [
			"ß", "ss", "œ", "oe", "ĳ", "ij",
			// Arabic
			"ا", "a", "ب", "b", "ت", "t", "ث", "th", "ج", "j",
			"ح", "h", "خ", "kh", "د", "d", "ذ", "dh", "ر", "r", 
			"ز", "z", "س", "s", "ش", "sh", "ص", "s", "ض", "d", 
			"ط", "t", "ظ", "z", "ع", "'", "غ", "gh", "ف", "f", 
			"ق", "q", "ك", "k", "ل", "l", "م", "m", "ن", "n", 
			"ه", "h", "و", "w", "ي", "y",

			// Hindi (Devanagari)
			"अ", "a", "आ", "aa", "इ", "i", "ई", "ii", "उ", "u", 
			"ऊ", "uu", "ऋ", "r", "ए", "e", "ऐ", "ai", "ओ", "o", 
			"औ", "au", "क", "k", "ख", "kh", "ग", "g", "घ", "gh", 
			"च", "ch", "छ", "chh", "ज", "j", "झ", "jh", "ट", "t", 
			"ठ", "th", "ड", "d", "ढ", "dh", "ण", "n", "त", "t", 
			"थ", "th", "द", "d", "ध", "dh", "न", "n", "प", "p", 
			"फ", "ph", "ब", "b", "भ", "bh", "म", "m", "य", "y", 
			"र", "r", "ल", "l", "व", "v", "श", "sh", "ष", "sh", 
			"स", "s", "ह", "h",

			// Tamil
			"அ", "a", "ஆ", "aa", "இ", "i", "ஈ", "ii", "உ", "u", 
			"ஊ", "uu", "எ", "e", "ஏ", "ee", "ஐ", "ai", "ஒ", "o", 
			"ஓ", "oo", "ஔ", "au", "க", "k", "ங", "ng", "ச", "ch", 
			"ஜ", "j", "ஞ", "ny", "ட", "t", "ண", "n", "த", "th", 
			"ந", "n", "ப", "p", "ம", "m", "ய", "y", "ர", "r", 
			"ல", "l", "வ", "v", "ழ", "zh", "ள", "l", "ற", "r", 
			"ன", "n",

			// Chinese (Pinyin)
			"啊", "a", "波", "b", "茶", "ch", "的", "d", "鹅", "e", 
			"发", "f", "哥", "g", "好", "h", "衣", "i", "杰", "j", 
			"开", "k", "了", "l", "妈", "m", "娜", "n", "哦", "o", 
			"派", "p", "去", "q", "日", "r", "思", "s", "他", "t", 
			"无", "w", "西", "x", "一", "y", "子", "z",

			// Hebrew
			"א", "a", "ב", "b", "ג", "g", "ד", "d", "ה", "h", 
			"ו", "v", "ז", "z", "ח", "ch", "ט", "t", "י", "y", 
			"כ", "k", "ל", "l", "מ", "m", "נ", "n", "ס", "s", 
			"ע", "''", "פ", "p", "צ", "tz", "ק", "k", "ר", "r", 
			"ש", "sh", "ת", "t"
		];
		upper = [
			"Œ", "OE", "Ĳ", "IJ",
			"İ", "I",
		];

		technical = [
			// Mathematical Operators
			"±", "+-", "×", "x", "÷", "/", "√", "sqrt", "∑", "sum", "∏", "prod", "−", "-",
			"∫", "int", "∂", "d", "∞", "infinity", "≈", "~", "≠", "!=", "≡", "===",
			"≤", "<=", "≥", ">=", "≪", "<<", "≫", ">>", "∇", "nabla", "∝", "propto",

			// Logic & Set Theory
			"∧", "and", "∨", "or", "¬", "not", "∀", "forall", "∃", "exists", "∅", "empty",
			"∈", "in", "∉", "notin", "⊂", "subset", "⊃", "superset", "⊆", "subseteq", "⊇", "superseteq",
			"∪", "union", "∩", "intersection", "⊕", "xor", "⊗", "tensor",

			// Comparison Symbols
			"∼", "~", "≅", "congruent", 

			// Geometry
			"∠", "angle", "⊥", "perp", "∥", "parallel", "△", "triangle", "∘", "circle",

			// Arrows and Implications
			"→", "->", "⇒", "=>", "↔", "<->", "⇔", "<=>", "↑", "up", "↓", "down", 
			"↦", "|->", "⊢", "entails", "⊣", "deduces",

			// Miscellaneous Technical Symbols
			"°", "deg", "‰", "permille", "µ", "micro", "ℓ", "l", "ℵ", "aleph"
		];

		replacements = concatA([common, map(common, toUppercaseUnicode), lower, upper, technical]);
		foldi(replacements, makeTree(), \i, acc, from -> {
			if (i % 2 == 0) {
				if (containsKeyTree(acc, from)) {
					println("Duplicate " + from);
				}
				setTree(acc, from, replacements[i + 1])
			} else acc;
		})
	});

	list2string(stringFoldChar(s, makeList(), \acc, c -> {
		Cons(
			lookupTreeDef(substitutions, c, c),
			acc
		)
	}))
}

/*
main() {
	println(deunicode("This is nice: æøå ÆØÅ ß"));
	quit(0);
}
*/
