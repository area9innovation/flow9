import string;

export {
	// Expand string to UTF8
	expandUtf8(s : string) -> string;

	// utf8 -> utf16 (flow string)
	decodeUtf8(s : string) -> string;
}

expandUtf8(s : string) -> string {
	bytes = string2utf8(s);
	chars = map(bytes, fromCharCode);
	concatStrings(chars);
}

decodeUtf8(s : string) -> string {
	decodeUtf80(s, 0, "");
}

decodeUtf80(s : string, at : int, acc : string) -> string {
	r = if (at < 0 || at >= strlen(s)) {
		Pair(-1, 0);
	} else {
		hexcode = getCharCodeAt(s, at);
		if (hexcode < 0xC0) {
			Pair(hexcode, 1);
		} else {
			// OK, it must be UTF-8 encoded
			if (0xC0 <= hexcode && hexcode <= 0xDF) {
				// 2 bytes
				secondByte = getCharCodeAt(s, at + 1);
				if (secondByte == -1) {
					// OK, it is some crap, because we expect a second percent here
					Pair(-1, 0);
				} else {
					Pair((hexcode - 192) * 64 + (secondByte - 128), 2)
				}
			} else if (hexcode <= 0xEF) { // 3 bytes
				secondByte = getCharCodeAt(s, at + 1);
				thirdByte = getCharCodeAt(s, at + 2);
				if (secondByte == -1 || thirdByte == -1) {
					// OK, it is some crap, because we expect a second and third percent here
					Pair(-1, 0);
				} else {
					Pair((hexcode - 224) * 4096 + (secondByte - 128) * 64 + (thirdByte - 128), 3)
				}
			} else if (hexcode <= 0xF7) { // 4 bytes
				secondByte = getCharCodeAt(s, at + 1);
				thirdByte = getCharCodeAt(s, at + 2);
				fourthByte = getCharCodeAt(s, at + 3);
				if (secondByte == -1 || thirdByte == -1 || fourthByte == -1) {
					// Crap. We need 4 bytes
					Pair(-1, 0);
				} else {
					Pair((hexcode - 240) * 262144 + (secondByte - 128) * 4096 + (thirdByte - 128) * 64 + (fourthByte - 128), 4)
				}
			} else {
				// TODO: We did not implement support for 6 bytes
				Pair(-1, 0);
			}
		}
	}
	if (r.first < 0) {
		acc;
	} else {
		decodeUtf80(s, at + r.second, acc + fromCharCode(r.first));
	}
}