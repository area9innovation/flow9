import text/translation;

export {

	// any other struct in this union should have at least index, tag and text like in ContentUnit due to backward compability
	GeneralContentUnit ::= ContentUnit, ContentUnitCustom;

	ContentUnit : (
		index : int,
		tag : string,
		text : string
	);

	ContentUnitCustom(
		index : int,
		tag : string,
		text : string,
		attr : [ContentUnitAttributes]
	);

	ContentUnitAttributes ::= ContentUnitExtradata;
		ContentUnitExtradata(val : string);

	// The idea is to use different stuff for different translation levels. One for simple strings only and another one for wiki.
	// So we can minimize translation stuff for applications and include only things that we really need.
	setTexts2XliffContent(fn : ([ContentUnit], string) -> string) -> void;
	setTexts2XliffContentDeferred(fn : ([ContentUnit], string, (string) -> void) -> void) -> void;
	setTexts2XliffContentWithLang(fn : ([GeneralContentUnit], string, string) -> string) -> void;
	// fn args: filePath, translationTree, maybeVOTree, maybeExtractionTime, maybeAttributesTree, onSuccess, onFail
	setLoadTranslations(fn : (string, ref Tree<string, string>, Maybe<ref Tree<string, string>>, Maybe<ref string>, Maybe<ref Tree<string, [KeyValue]>>, () -> void, () -> void) -> void) -> void;
	// fn srgs: content, translationTree, maybeVOTree, maybeAttributesTree, onDone
	setExtractTranslations(fn : (string, ref Tree<string, string>, Maybe<ref Tree<string, string>>, Maybe<ref Tree<string, [KeyValue]>>, () -> void) -> void) -> void;
	// fn: tree, src
	setFindTranslated(fn : (Tree<string, string>, string) -> Maybe<string>) -> void;

	// Makes xliff file from array of pairs <text_attribute, text>
	texts2XliffContent(texts : [ContentUnit], productName : string) -> string;
	texts2XliffContentWithLang(texts : [GeneralContentUnit], productName : string, language : string) -> string;
	// Similar to previous but uses deferred() to avoid timeout error in Flash
	texts2XliffContentDeferred(texts : [ContentUnit], productName : string, onResult : (string) -> void) -> void;
	// Reads a file with translated texts for a current language
	loadTranslations(
		filePath : string,
		translationTree : ref Tree<string, string>,
		maybeVOTree : Maybe<ref Tree<string, string>>,
		maybeExtractionTime : Maybe<ref string>,
		maybeAttributesTree : Maybe<ref Tree<string, [KeyValue]>>,
		onSuccess : () -> void, onFail : () -> void
	) -> void;
	// extracts translation pairs from given xliff or json content
	extractTranslations(
		content : string,
		translationTree : ref Tree<string, string>,
		maybeVOTree : Maybe<ref Tree<string, string>>,
		maybeAttributesTree : Maybe<ref Tree<string, [KeyValue]>>,
		onDone : () -> void
	) -> void;
	// find translation in the given translation tree
	findTranslated(tree : Tree<string, string>, src : string) -> Maybe<string>;
}

doFindTranslated : ref (Tree<string, string>, string) -> Maybe<string> = ref \__, __ -> None();

setFindTranslated(fn) {
	doFindTranslated := fn;
}

findTranslated(tree, src){
	^doFindTranslated(tree, src);
}


doExtractTranslations : ref (string, ref Tree<string, string>, Maybe<ref Tree<string, string>>, Maybe<ref Tree<string, [KeyValue]>>, () -> void) -> void =
	ref \__, __, __, __, __ -> fail("extractTranslations function is not set, initialize translation api first");

setExtractTranslations(fn) {
	doExtractTranslations := fn;
}

extractTranslations(content, translationTree, maybeVOTree, maybeAttributesTree, onDone) {
	^doExtractTranslations(content, translationTree, maybeVOTree, maybeAttributesTree, onDone);
}


doLoadTranslations : ref (string, ref Tree<string, string>, Maybe<ref Tree<string, string>>, Maybe<ref string>, Maybe<ref Tree<string, [KeyValue]>>, () -> void, () -> void) -> void =
	ref \__, __, __, __, __, __, __ -> fail("loadTranslations function is not set, initialize translation api first");

setLoadTranslations(fn) {
	doLoadTranslations := fn;
}

loadTranslations(filePath, translationTree, maybeVOTree, maybeExtractionTime, maybeAttributesTree, onSuccess, onFail) {
	^doLoadTranslations(filePath, translationTree, maybeVOTree, maybeExtractionTime, maybeAttributesTree, onSuccess, onFail)
}


doTexts2XliffContent : ref ([ContentUnit], string) -> string =
	ref \__, __ -> fail0("texts2XliffContent function is not set, initialize translation api first");

setTexts2XliffContent(fn) {
	doTexts2XliffContent := fn;
}

texts2XliffContent(texts, productName) {
	^doTexts2XliffContent(texts, productName)
}

doTexts2XliffContentWithLang : ref ([GeneralContentUnit], string, string) -> string =
	ref \__, __, __ -> fail0("texts2XliffContentWithLang function is not set, initialize translation api first");

setTexts2XliffContentWithLang(fn) {
	doTexts2XliffContentWithLang := fn;
}

texts2XliffContentWithLang(texts, productName, language) {
	^doTexts2XliffContentWithLang(texts, productName, language)
}

doTexts2XliffContentDeferred : ref ([ContentUnit], string, (string) -> void) -> void =
	ref \__, __, __ -> fail("texts2XliffContentDeferred  function is not set, initialize translation api first");

setTexts2XliffContentDeferred(fn) {
	doTexts2XliffContentDeferred := fn;
}

texts2XliffContentDeferred(texts, productName, onResult) {
	^doTexts2XliffContentDeferred(texts, productName, onResult)
}