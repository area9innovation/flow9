import text/translationutils;
import date;
import net/http;

export {
	// Initialize translation api functions with simple strings support only
	setTranslationSimpleStringsApi() -> void;
}

setTranslationSimpleStringsApi() {
	faked = getUrlParameter("faketranslation");
	if (faked != "") {
		initGetTranslation(
			// OK, we replace everything with dots except for the first char
			if (faked == ".") {
				\s -> {
					if (s == "") s
					else {
						first = getCharAt(s, 0);
						rest = strRepeat(". ", strlen(s) * 2);
						first + rest;
					}
				}
			} else if (faked == "reverse") {
				reverse
			} else if (faked == "upper") {
				toUpperCase
			} else if (faked == "lower") {
				toLowerCase
			} else if (faked == "double" || faked == "doubled") {
				\s -> s + " " + toUpperCase(s)
			} else {
				\s -> s + faked
			}
		);
	} else {
		initGetTranslation(doSimpleStringTranslation);
	}
	setTexts2XliffContent(simpleTexts2XliffContent);
	setTexts2XliffContentWithLang(simpleTexts2XliffContentWithLang);
	setTexts2XliffContentDeferred(simpleText2XliffContentDeffered);
	setLoadTranslations(loadSimpleStringsTranslations);
	setExtractTranslations(extractSimpleStringsTranslations);
	setFindTranslated(findSimpleStringTranslation);
}

findSimpleStringTranslation(tree : Tree<string, string>, src : string) -> Maybe<string> {
	lookupTree(tree, src)
}

doSimpleStringTranslation(s : string) -> string {
	lookupTreeDef(^translations, s, s)
}

loadSimpleStringsTranslations(
	filePath : string,
	translationTree : ref Tree<string, string>,
	maybeVOTree : Maybe<ref Tree<string, string>>,
	maybeExtractionTime : Maybe<ref string>,
	maybeAttributesTree : Maybe<ref Tree<string, [KeyValue]>>,
	onSuccess : () -> void, onFail : () -> void
) -> void {

	begin_time = timestamp();
	translationsDebugTrace("Loading " + filePath);

	used_file = filePath + "?nocache=" + d2st(timestamp(), 8);

	onError = \e -> {
		if (isUrlParameterTrue("dev")) println("Error: Cannot get dictionary " + filePath + ": " + e);
		onFail();
	}

	onLoaded = \data -> {
		if (data == "") {
			// we treat empty dictionary files as not existing
			onError("file is empty");
		} else {
			translationsDebugTrace("Loaded " + used_file + "; size=" + i2s(strlen(data)) + "; loading time=" + toString((timestamp() - begin_time) / 1000.0) + " sec");

			extractTranslations(data, translationTree, maybeVOTree, maybeAttributesTree, \ -> {
				translationsDebugTrace("Translations extracted from " + used_file + "; total initialization time: " + toString((timestamp() - begin_time) / 1000.0) + " sec");
				onSuccess();
			})
		}
	}

	httpRequest3(used_file, onLoaded, onError);
}

extractSimpleStringsTranslations(content : string, translationTree : ref Tree<string, string>, maybeVOTree : Maybe<ref Tree<string, string>>, maybeAttributesTree : Maybe<ref Tree<string, [KeyValue]>>, onDone : ()->void) -> void {
	extractTranslationsFromJson(content, translationTree, onDone);
}

// We don't want importing xml.flow, so we copy some functions here.
xmlEscapeText_(s : string) -> string {
	s0 = strReplace(s, "&", "&amp;");
	s1 = strReplace(s0, "<", "&lt;");
	s2 = strReplace(s1, ">", "&gt;");
	s2
}

simpleTexts2XliffContent(texts : [ContentUnit], productName : string) -> string {
	simpleTexts2XliffContentWithLang(texts, productName, "EN-US")
}

simpleTexts2XliffContentWithLang(texts : [GeneralContentUnit], productName : string, language : string) -> string {
	devtrace("texts2XliffContent total texts: " + toString(length(texts)));
	prefiltered = filterSources(texts);
	devtrace("texts2XliffContent filtered texts: " + toString(length(prefiltered)));

	header_attrs = "version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd\"";

	id : ref int = ref round(random() * 1000.0);
	getId = \ -> { id := ^id + 1; i2s(^id); }

	addAttr = \unit -> switch (unit : GeneralContentUnit) {
		ContentUnit(__, __, __): "";
		ContentUnitCustom(__, __, __, attrs): {
			strGlue(map(attrs, \a -> {
				switch (a : ContentUnitAttributes) {
					ContentUnitExtradata(val): formatString("extradata=\"%1\"", [val]);
				}
			}), " ");
		};
	}

	body =
		concatStrings(map(prefiltered, \t -> {
			text = xmlEscapeText_(t.text);
			"   <trans-unit id=\"" + getId() + "\" " + addAttr(t) + ">\n"
			"    <source>" +  text + "</source>\n"
			"    <target>" +  text + "</target></trans-unit>\n"
		}));

	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
	"<xliff " + header_attrs + ">\n"
	" <file source-language=\"" + language + "\" product-name=\"" + productName + "\" original=\"" + productName + "\" datatype=\"plaintext\">\n"
	"  <header>\n"
	"   <phase-group>\n"
	"    <phase phase-name=\"extraction\" process-name=\"extraction\"></phase>\n"
	"   </phase-group>\n"
	"  </header>\n"
	"  <body>" + (if (startsWith(body, "\n")) "" else "\n")
	   + body +
 	(if (body == "" || endsWith(body, "\n")) "" else "\n") +
	"  </body>\n"
	" </file>\n"
	"</xliff>\n"
}

simpleText2XliffContentDeffered(texts : [ContentUnit], productName : string, onResult : (string)->void) -> void {
	onResult(simpleTexts2XliffContent(texts, productName))
}
