// This is the AST for the @ feature of flow
export {
	QExp ::= QConst, QLambda, QCall, QVar, QLet, QIf, QSwitch, 
				QSeq, QCallPrim;
		QLambda(args: [string], body: QExp);
		QCall(f: QExp, args: [QExp]);
		QVar(name: string);
		QLet(name: string, e1: QExp, e2: QExp);
		QIf(e1: QExp, e2: QExp, e3: QExp);
		QSwitch(x: QVar, cases: [QCase]);
			// struct is "default" for default case
			QCase(struct: string, argNames : [string], body: QExp);
		// We do not support casts, since we do not quote types
		//	QCast(e: QExp, tFrom : QType, tTo : QType, type : QType);
		QSeq(es: [QExp]);

		QCallPrim(op: QPrim, es: [QExp]);

		QPrim ::= QOrPrim, QAndPrim, QNotPrim,
			QEqPrim, QNePrim, QLePrim, QGePrim, QLtPrim, QGtPrim, 
			QPlusPrim, QMinusPrim, QMulPrim, QDivPrim, QModPrim, QNegPrim,
			QArrayPrim, QIndexPrim,
			QDerefPrim, QAssignPrim, QRefPrim, 
			QStructPrim, QFieldPrim, QSetMutablePrim;

			QOrPrim(); QAndPrim(); QNotPrim();
			QEqPrim(); QNePrim(); QLePrim(); QGePrim(); QLtPrim(); QGtPrim(); 
			QPlusPrim(); QMinusPrim(); QMulPrim(); QDivPrim(); QModPrim(); QNegPrim();
			QArrayPrim(); QIndexPrim();
			QDerefPrim(); QAssignPrim(); QRefPrim(); 
			QStructPrim(struct_name: string); 
			QFieldPrim(name: string); 
			QSetMutablePrim(name: string);

		QConst ::= QVoid, QDouble, QInt, QString, QBool;
			QVoid();
			QDouble(d : double);
			QInt(i : int);
			QString(s : string);
			QBool(b: bool);
}
