import dynamic;
import ds/tree;
import sys/target;

export {
	// This will reconstruct an object to try to save memory
	// Only works for JS.
	compactObject(o : flow) -> flow;
}

compactObject(o : flow) -> flow {
	doCompactObject(ref makeTree(), o);
}

doCompactObject(cache : ref Tree<flow, flow>, o : flow) -> flow {
	mt = lookupTree(^cache, o);
	mt ?? {
		// We found it in the cache, reuse it
		mt;
	} : {
		// Not in the cache, so record it
		if (isArray(o)) {
			cache := setTree(^cache, o, o);
			doCompactArray(cache, o);
		} else if (isSameStructType(o, o)) {
			cache := setTree(^cache, o, o);
			// It is a struct
			doCompactStruct(cache, o);
		} else {
			// We do not recurse
			o;
		}
	}
}

doCompactArray(cache : ref Tree<flow, flow>, a : [flow]) -> [flow] {
	map(a, \e -> {
		doCompactObject(cache, e)
	})
}

doCompactStruct(cache : ref Tree<flow, flow>, o : flow) -> flow {
	if (js) {
		// Here, find the objects of the object and recurse on them
		args : [flow] = extractStructArguments(o);
		cargs = doCompactArray(cache, args);
		makeStructValue(o.structname, cargs, o);
	} else o;
}
