// Â© Copyright 2011 Area9 Technologies.

import securitymode;
import net/url;

export {
	//
	// Iteration
	//

	// make subsequent f(f(...)) calls while predicate is true
	for : (?, (?)->bool, (?)->?) -> ?;

	// A simple loop from start to end, including end.
	fori : (start : int, end : int, fn : (i : int) -> void) -> void;

	// A simple loop from start to end, not including end, and collect all products to a nice little array
	generate : (start : int, end : int, fn : (i : int) -> ?) -> [?];

	// Counts up(down) from start to max(min), until the predicate is true
	countUntil : (start : int, max : int, predicate : (int) -> bool) -> int;
	countUntilDown : (start : int, min : int, predicate : (int) -> bool) -> int;

	//
	// Misc functions
	//

	// 32 bit operations
	native bitNot : (int) -> int = Native.bitNot;
	native bitAnd : (int, int) -> int = Native.bitAnd;
	native bitOr : (int, int) -> int = Native.bitOr;
	native bitXor : (int, int) -> int = Native.bitXor;

	// Get a random number x so that 0 <= x < 1
	native random : io () -> double = Native.random;

	// Seed the random generator
	// native srand : (int) -> void = Native.srand;

	// Force a garbage collection. Normally not required
	native gc : io () -> void = Native.gc;

	// Immediately delete a native object if supported, or do nothing
	native deleteNative : io (native) -> void = Native.deleteNative;

	// Apply function without arguments
	apply0 : (() -> ?) -> ?;

	// combinator for ==
	eq : (?) -> (?) -> bool;

	// combinator for !=
	neq : (?) -> (?) -> bool;

	// true, if any elements of array are true
	any : ([bool]) -> bool;

	// true, if all elements of array are true
	all : ([bool]) -> bool;

	// combinator for \x -> x
	idfn : (?) -> ?;

	nop : () -> void;
	nop1: (?) -> void;
	nop2: (?, ??) -> void;
	nop3: (?, ??, ???) -> void;
	nop4: (?, ??, ???, ????) -> void;
	nop5: (?, ??, ???, ????, ?????) -> void;
	nop6: (?, ??, ???, ????, ?????, ??????) -> void;

	// executes given function (void) -> ?
	executefn : (() -> ?) -> ?;
	// wait for condition become true, then exec
	executeAfter : (condition : () -> bool, fn : () -> void) -> void;

	// create single elemented array
	v2a : (?) -> [?];

	// quit the application
	native quit : io (code : int) -> void = Native.quit;

	// Fires when an application is about to quit (QT only)
	native onQuit : io (callback : () -> void) -> (() -> void) = Native.onQuit;

	// Sets current directory for file/dir operations (QT only)
	native setCurrentDirectory : io (path : string) -> void = Native.setCurrentDirectory;
	// Returns current application directory (QT only)
	native getCurrentDirectory : io () -> string = Native.getCurrentDirectory;

	// Get the file contents on supported platforms in UTF-8 format. If there is UTF-16 BOM marker, respect that
	native getFileContent : io (path : string) -> string = Native.getFileContent;

	// Returns true if successful. Uses UTF-8
	native setFileContent : io (path : string, content : string) -> bool = Native.setFileContent;

	// Try to save the file content as utf-16 with a BOM marker, if supported, or return false
	native setFileContentUTF16 : io (path : string, content : string) -> bool = Native.setFileContentUTF16;

	// splits array into array of subarrays of given length (last subarray can be shorter)
	splitBy(a : [?], len : int) -> [[?]];

	// True if c is the code of a printable unicode character.
	isPrintableCharCode(c : int) -> bool { 0x1F < c && c < 0x7F || 0x9F < c }

	max : (?, ?) -> ?;
	min : (?, ?) -> ?;

	//
	// Time & profiling
	//

	// Get the current time, in milliseconds since epoch 1970 in UTC. I.e. no matter what time zone the local
	// machine is set to, this returns the same number (which is milliseconds since epoch 1970 in the UTC timezone).
	native timestamp : io () -> double = Native.timestamp;

	// Converts string local time representation to time in milliseconds since epoch 1970 in UTC
	// Notice the hidden timezone conversion inside
	// Will fail on incorrect format. Correct one example: "2012-10-01 18:05:40"
	native string2time : io (string) -> double = Native.string2time;

	// Returns a string representation for the local time (time is given in milliseconds since epoch 1970 in UTC)
	native time2string : (double) -> string = Native.time2string;

	// Get a callback in x ms
	native timer : io (int, () -> void) -> void = Native.timer;

	// Deffer function call
	deferred(fn : () -> void) -> void;

	// Wait until rendering finished
	deferUntilRender : (fn : () -> void) -> void;

	native deferUntilNextFrameRendered : (cb : () -> void) -> void = RenderSupport.deferUntilRender;

	// splits array into chunks of chunkSize and does a deferred call between
	// processing them to avoid flash timeout
	iterDeferred(arr: [?], chunkSize: int, doItem: (?) -> void, onDone: () -> void, progress: (int, int) -> void) -> void;
	iterDeferred2(arr: [?], iterator: (?, onDoneChunk: () -> void) -> void, onDone: () -> void, progress: (int, int) -> void) -> void;

	// apply all using deferred() after each call. Elements of array should be functions with two parameters - current input and function which is called at the end
	threadApplyDeferred(input : ?, array : [(?, (?) -> void) -> void]) -> void;

	// How long does it take to run this function? Not very accurate. See profiling below for more accurate measurements
	timeit(fn : () -> void) -> double;

	timestampToDay(time : double) -> double;
	dayToTimestamp(day : double) -> double;


	//
	// Type helpers
	//

	// explicit cast to void
	ignore : (?) -> void;


	//
	// Debugging help
	//

	// Print something to the console
	native println2 : io (flow) -> void = Native.println;
	println(str : ?) -> void {
		if (isLoggingEnabled()) {
			println2(cast(str : ? -> flow));
		}
	}

	// Pipe print. Prints a value given with an annotation and returns it.
	pprint(m : string) -> ((?) -> ?);

	// Pipe print. Returns a function similar to pprint of a one that does not print nothing.
	// For the first one common message can be specified.
	cprint(c : bool, m : string) -> (string) -> ((?) -> ?);

	// Clear the haXe tracing window
	native clearTrace : io () -> void = Native.clearTrace;

	// print the call stack for use in unittests
	native printCallstack : io () -> void = Native.printCallstack;

	// capture the stack context for later use as an opaque value (only CPP)
	native captureCallstack : io () -> native = Native.captureCallstack;

	// same as callstack2string(captureCallstack()) but works in JS as well
	native captureStringCallstack : io () -> string = Native.captureStringCallstack;

	// capture only one call stack entry; does not allocate any heap memory
	native captureCallstackItem : io (index : int) -> native = Native.captureCallstackItem;

	// when supported, augments the caller stack frame debug info with the specified data.
	// item may be:
	//  * any callable function: sets impersonation to that function
	//  * result of captureCallstack: sets impersonation to stack[flags]; flags in 0..255
	//  * result of captureCallstackItem: sets impersonation to the single captured frame
	//  * None: uses a frame from the current stack trace, with flags in 1..255 as index
	//  * None,0: special case; clears impersonation instead of setting it to something
	// when setting impersonation from a stack frame, if that frame has impersonation
	// set, that impersonation value is copied over instead of the actual frame data
	native impersonateCallstackItem : io (callstack : native, flags : int) -> void = Native.impersonateCallstackItem;
	native impersonateCallstackFn : io (fn : flow, flags : int) -> void = Native.impersonateCallstackFn;
	native impersonateCallstackNone : io (flags : int) -> void = Native.impersonateCallstackNone;

	// format a captured call stack into a string similar to the output of printCallstack
	// if not supported or enabled returns an empty string
	callstack2string : (native) -> string;

	// Force program termination with error message
	native fail : io (msg : string) -> void = Native.failWithError;
	native fail0 : io (msg : string) -> ? = Native.failWithError;

	b2s(b : bool) toString(b);

	// Checks a criteria, and complains if it is not true
	assert(b : bool, t : string) -> void;

	assertEquals : (?, ?) -> void;

	// Call a function in the JS world with the given arguments. You can define your own
	// JS functions in www/custom.js for a given project.
	native hostCall : io (name: string, args: [flow]) -> flow = Native.hostCall;
	// This registers the function in the window[name] key of your browser in JS.
	native hostAddCallback : io (name: string, () -> flow) -> void = Native.hostAddCallback;

	native setClipboard : io (text: string) -> void = Native.setClipboard;

	//getGlobalClipboard doesn't work in Chrome, Firefox and Safari
	//getGlobalClipboardToCB doesn't work in Safari only
	native getGlobalClipboard : io () -> string = Native.getClipboard;
	native getGlobalClipboardToCB : io (callback : (string) -> void) -> void = Native.getClipboardToCB;

	// Returns an absolute path to the application executable.
	native getApplicationPath : io () -> string = Native.getApplicationPath;

	// Supported only in cpp
	native getBytecodeFilename : () -> string = Native.getBytecodeFilename;

	// Returns clipboard content related to mimetype.
	// Returns empty string when the format is not supported or no requested format value stored in clipboard.
	// For binary data formats, we only use the lower 8-bits.
	// Use mimetype to define what format to request. These formats are supported:
	// "image", "text", "urls", "html" and then any mime-type: "image/*", "text/plain", "text/uri-list", "text/html"
	// Image data returns in PNG format.
	native getGlobalClipboardFormat : io (mimetype: string) -> string = Native.getClipboardFormat;

	//JS only. If dev tools are available stops execution at this line.
	native debugStopExecution : io () -> void = Native.debugStopExecution;

	debugStopExecution() {};


	//
	// Persistence
	//

	// check if localstorage available
	checkLocalStorageAvailability() -> bool;

	// Disable all local storage functions
	disableLocalStorage() -> void;

	// Return false if local storage disabled
	getLocalStorageStatus : () -> bool;

	// Save a key/value pair. Persistent on the client.  On platforms with file systems,
	// setKeyValue() simply saves a file with the name of the key.
	setKeyValue(key : string, value : string) -> bool;

	// Get a stored key/value pair. Persistent on the client
	getKeyValue(key : string, defaultValue : string) -> string;

	// Remove a stored key/value pair. Persistent on the client
	removeKeyValue(key : string) -> void;

	// Remove all stored key/value pairs.
	removeAllKeyValues() -> void;

	// Get list of stored keys.
	getKeysList() -> [string];

	// Save/Get/Remove a key/value pair that exists only for the duration of
	// the session, i.e., it gets deleted after the browser or tab closes.
	// These are affected by dislableLocalStorage the same way as set/getKeyValue.
	// Only has an effect on the js target.
	setSessionKeyValue(key : string, value : string) -> bool;
	getSessionKeyValue(key : string, value : string) -> string;
	removeSessionKeyValue(key : string) -> void;
}

// Only works in the C++ runner when debugging or profiling
native callstack2string : io (native) -> string = Native.callstack2string;
callstack2string(globalVariableThatCallStack2StringDoesNotCareAbout) { ""; }

captureStringCallstack() -> string {
	callstack2string(captureCallstack())
}

// native fallback body
deleteNative(arg) { }

deferred(fn : () -> void) -> void {
	timer(0, fn);
}

deferUntilRender(fn : () -> void) -> void {
	timer(10, fn);
}

deferUntilNextFrameRendered(fn : () -> void) {
	timer(10, fn);
}

threadApplyDeferred(input, array) {
	len = length(array);
	if (len > 0) {
		// println("Calls remaining: " + toString(len));
		curFn = array[0];
		array2 = subrange(array, 1, len - 1);
		curFn(input, \output -> deferred(\-> { threadApplyDeferred(output, array2) }));
	}
}

timeit(fn) {
	start = timestamp();
	fn();
	timestamp() - start;
}

timestampToDay(time : double) {
	time / (1000.0 * 86400.0);
}

dayToTimestamp(day : double) {
	day * 86400.0 * 1000.0;
}

assert(b, t) if (!b) {
	println("Assert failed. " + t);
	printCallstack();
	fail("Assert failed. " + t);
}

assertEquals(a, b) {
	if (a!=b) {
		println("Assert failed. Expected these two to be equal: ");
		println(toString(a));
		println(toString(b));
		printCallstack();
		fail("Assert failed. Expected these two to be equal: " + toString(a) + " and " + toString(b));
	}
}

ignore(dummy) {}

for(init, predicate, f) {
	if (predicate(init)) for(f(init), predicate, f) else init
}

fori(start, end, fn) {
	if (start <= end) {
		fn(start);
		fori(start + 1, end, fn);
	}
}

// Does NOT include end
generate(start, end, fn) {
	if (start >= end) []
	else map(enumFromTo(start, end-1), fn);
}

countUntil(start, maxcount, predicate) {
	if (start >= maxcount) maxcount
	else if (predicate(start)) start
	else countUntil(start + 1, maxcount, predicate);
}

countUntilDown(start, mincount, predicate) {
	if (start == mincount) start
	else if (predicate(start)) start
	else countUntilDown(start - 1, mincount, predicate);
}

apply0(f) {
	f();
}

idfn(x) x;

nop() {}
nop1(arg1) {}
nop2(arg1, arg2) {}
nop3(arg1, arg2, arg3) {}
nop4(a1, a2, a3, a4) {}
nop5(a1, a2, a3, a4, a5) {}
nop6(a1, a2, a3, a4, a5, a6) {}


executefn(fn) fn();

executeAfter(condition : () -> bool, fn : () -> void) -> void {
	if (condition()) fn()
	else timer(10, \ -> executeAfter(condition, fn))
}

v2a(v) [v];

// Fortran-like named relations
eq(v1) \v2 -> v1 == v2;
neq(v1) \v2 -> v1 != v2;

all(a) { forall(a, idfn) } //alt: fold(a, true, \res, v -> res && v)

any(a) { exists(a, idfn) }

localStorageEnabled = ref true;
disableLocalStorage() {
	println("disable local storage");
	localStorageEnabled := false
}

getLocalStorageStatus() {
	^localStorageEnabled;
}

checkLocalStorageAvailability() {
	tmpKey = "check_ls_avail";
	tmpValue = "true";

	if (setKeyValueN(tmpKey, tmpValue)) {
		ret = getKeyValueN(tmpKey, "") == tmpValue;
		removeKeyValueN(tmpKey);
		ret;
	} else {
		false;
	}
}

native setKeyValueN : io (key : string, value : string) -> bool = Native.setKeyValue;
setKeyValue(key : string, value : string) -> bool {
	^localStorageEnabled && setKeyValueN(key, value)
}

native getKeyValueN : io (key : string, defaultValue : string) -> string  = Native.getKeyValue;
getKeyValue(key : string, defaultValue : string) -> string {
	if (^localStorageEnabled) getKeyValueN(key, defaultValue)
	else defaultValue
}

native removeKeyValueN : io (key : string) -> void = Native.removeKeyValue;
removeKeyValue(key : string) -> void {
	if (^localStorageEnabled) removeKeyValueN(key)
}

native removeAllKeyValuesN : io () -> void = Native.removeAllKeyValues;
removeAllKeyValues() -> void {
	if (^localStorageEnabled) removeAllKeyValuesN()
}

native getKeysListN : io () -> [string] = Native.getKeysList;
getKeysList() -> [string] {
	if (^localStorageEnabled) getKeysListN()
	else []
}

native setSessionKeyValueN : io (key : string, value : string) -> bool = Native.setSessionKeyValue;
setSessionKeyValueN(key, value) { false; }
setSessionKeyValue(key : string, value : string) -> bool {
	^localStorageEnabled && setSessionKeyValueN(key, value)
}

native getSessionKeyValueN : io (key : string, defaultValue : string) -> string  = Native.getSessionKeyValue;
getSessionKeyValueN(key, defvalue) { defvalue; }
getSessionKeyValue(key : string, defaultValue : string) -> string {
	if (^localStorageEnabled) getSessionKeyValueN(key, defaultValue)
	else defaultValue
}

native removeSessionKeyValueN : io (key : string) -> void = Native.removeSessionKeyValue;
removeSessionKeyValueN(key) {}
removeSessionKeyValue(key : string) -> void {
	if (^localStorageEnabled) removeSessionKeyValueN(key)
}

impersonateCallstackFn(fn, flags) {
	// stub it for new flowc c++ backend
}

splitBy(a : [?], len : int) -> [[?]] {
	elementsCount = length(a);
	subArraysCount = elementsCount / len + (if (elementsCount % len == 0) 0 else 1);
	generate(0, subArraysCount, \i -> subrange(a, i * len, len))
}

pprint(annotation : string) {
	\val : ? -> {
		println(annotation + toString(val));
		val
	}
}

cprint(doPrint, prefix) {
	if (doPrint) {
		\txt -> pprint(prefix + txt)
	} else {
		\__ -> idfn
	}
}

iterDeferredRec : (arr : [?], from : int, chunkSize : int, doItem : (?)->void, onDone : ()->void, progress : (int, int)->void)->void;
iterDeferredRec(arr, from, chunkSize, doItem, onDone, progress) {
	if (chunkSize <= 0) {
		onDone();
	} else {
		len = length(arr);

		iteri(subrange(arr, from, chunkSize),
			\i, item -> {
				doItem(item);
				progress(from + i + 1, len);
			}
		);

		if (len < from + chunkSize) {
			onDone();
		} else {
			deferred(\ -> iterDeferredRec(arr, from + chunkSize, chunkSize, doItem, onDone, progress))
		}
	}
}

iterDeferred(arr: [?], chunkSize: int, doItem: (?) -> void, onDone: () -> void, progress: (int, int) -> void) -> void {
	iterDeferredRec(arr, 0, chunkSize, doItem, onDone, progress);
}

iterDeferred2Rec(arr: [?], index : int, len : int, iterator: (?, onDoneItem: () -> void) -> void, onDone: () -> void, onProgress: (int, int) -> void) -> void {
	if (index < len) {
		iterator(arr[index],
			\ -> {
				onProgress(index + 1, len);
				deferred(\ -> iterDeferred2Rec(arr, index + 1, len, iterator, onDone, onProgress));
			}
		);
	} else {
		onDone()
	}
}

iterDeferred2(arr, iterator, onDone, onProgress) {
	len = length(arr);
	if (len > 0) {
		iterDeferred2Rec(arr, 0, len, iterator, onDone, onProgress)
	} else {
		onDone()
	}
}

native max : (?, ?) -> ? = Native.fast_max;
max(a,b) { if (a > b) a else b; }
min(a,b) { if (a <= b) a else b; }


onQuit(cb : () -> void) -> (() -> void) {
	nop
}

getBytecodeFilename() -> string {
	"";
}
