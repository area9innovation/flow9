import ui/fontmapping; // getMappedFont
import net/picutil;
import form/graphicstransforms;
import fform/fform;
import fonts_repo;
import dynamic;

export {
	ClipCapabilities(move : bool, filters : bool, interactive : bool, scale : bool, alpha : bool);

	DefinedTextStyle(
		face : FontFace,
		fontSize : double,
		fillColor : int,
		fillOpacity : double,
		letterSpacing : double,
		backgroundColor : int,
		backgroundOpacity : double,
		advancedSharpness : int,
		antiAlias : int,
		gridFit : int
	);

	RenderResult(
		clips : [native],
		widthHeight : Behaviour<WidthHeight>,
		baseline : Behaviour<double>,
		pending : Behaviour<int>,
		disposers :[() -> void],
		capabilities : ClipCapabilities
	);

	// Behaviour-based styles (i.e. FDynamicColor) aren't applied.
	makeStyledTextfield(text : string, style : [FTextStyle]) -> native;

	calculateDefaultTextBackgroundColorOpacity(style : [CharacterStyle]) -> double;
	getDefinedTextStyle(style : [CharacterStyle]) -> DefinedTextStyle;
	defineTextStyle : (textfield : native, text : string, style : [CharacterStyle]) -> void;

	getCachedPictureSize(url : string) -> Maybe<WidthHeight>;
	// key is url processed with applyMediaPathMapping
	CachedPicturesSizes : ref Tree<string, WidthHeight> = ref makeTree();

	renderGraphics(clip : native, path : [StaticGraphicOp], style : [GraphicsStyle]) -> WidthHeight;

	addKeyboardShortcut(shortcut : string, description : string) -> () -> void;
	getKeyboardShortcuts() -> string;

	getYouTubeURL(url : string) -> Maybe<string>;
	getVimeoURL(url : string) -> Maybe<string>;
}

makeStyledTextfield(text : string, style : [FTextStyle]) -> native {
	cs = style2characterStyle(style);
	r = makeTextfield(getMappedFontFamily(cs));
	rtl = extractStruct(style, SetRTL(getDefaultRtl())).rtl;
	maybeApply(tryExtractStruct(style, TagName("")), \tn -> setClipTagName(r, tn.tagName));
	setEscapeHTML(r, extractStruct(style, EscapeHTML(false)).escape);
	setTextDirection(r, if (rtl) "rtl" else "ltr");
	defineTextStyle(r, text, cs);
	r
}

getCachedPictureSize(url : string) -> Maybe<WidthHeight> {
	lookupTree(^CachedPicturesSizes, applyMediaPathMapping(url))
}

calculateDefaultTextBackgroundColorOpacity(style : [CharacterStyle]) -> double {
	b2d(containsStruct(style, BackgroundFill(0)));
}

getDefinedTextStyle(style : [CharacterStyle]) -> DefinedTextStyle {
	// Set up the style
	fontfamily = ref "";  // Mapping will override it to the default.
	fontweight = ref 400;
	fontslope = ref FONT_SLOPE_NORMAL;
	fontsize = ref 11.0;
	fillcolour = ref 0x000000;
	fillopacity = ref 1.0;
	backgroundcolour = ref 0xffffff;
	backgroundopacity = ref calculateDefaultTextBackgroundColorOpacity(style);
	letterspacing = ref 0.0;
	advancedSharpness = ref -400;
	advancedAntiAliasType = ref FontAntiAliasAdvanced();
	advancedGridFitType = ref FontGridFitNone();
	specifiedSharpness = ref false;
	iter(style, \s -> {
		switch (s : CharacterStyle) {
			FontFamily(name) : fontfamily := name;
			FontSize(size) : fontsize := size;
			Fill(col): fillcolour := col;
			FillOpacity(op): fillopacity := op;
			LetterSpacing(op) : letterspacing := op;
			Sharpness(sharpness, antiAliasType, gridFitType) : {
				advancedSharpness := sharpness;
				advancedAntiAliasType := antiAliasType;
				advancedGridFitType := gridFitType;
				specifiedSharpness := true;
			}
			BackgroundFill(col): backgroundcolour := col;
			BackgroundFillOpacity(opacity): backgroundopacity := opacity;
			default : {}
		}
	});

	mappedFont = getMappedFont(^fontfamily, ^fontsize);
	fontFace = fontName2fontFace(mappedFont.first);
	if (js || !ios()) {
		fontweight := fontFace2weight(fontFace);
		fontslope := fontFace2slope(fontFace);
	}
	fontsize := mappedFont.second;

	// 21273
	if (!^specifiedSharpness && flash && (^fontsize > 20.0)) {
		advancedSharpness :=
			if (^fontsize < 40.0) {
				delta : double = 1.0-dpow(1.0-((^fontsize-20.0) / 20.0), 2.0);
				round(-400.0 + 300.0 * delta);
			}
			else
				-100;
	}

	antialiasint = switch(^advancedAntiAliasType : FontAntiAliasType) {
		FontAntiAliasNormal() : 0;
		FontAntiAliasAdvanced() : 1;
	};
	gridfitint = switch(^advancedGridFitType : FontGridFitType) {
		FontGridFitNone() : 0;
		FontGridFitPixel() : 1;
		FontGridFitSubpixel() : 2;
	};

	DefinedTextStyle(
		FontFace(fontFace with weight=^fontweight, slope=^fontslope),
		^fontsize,
		^fillcolour,
		^fillopacity,
		^letterspacing,
		^backgroundcolour,
		^backgroundopacity,
		^advancedSharpness,
		antialiasint,
		gridfitint
	);
}

defineTextStyle(textfield, text, style) {
	definedTextStyle = getDefinedTextStyle(style);

	setTextAndStyle(
		textfield,
		text,
		definedTextStyle.face.family,
		definedTextStyle.fontSize,
		definedTextStyle.face.weight,
		definedTextStyle.face.slope,
		definedTextStyle.fillColor,
		definedTextStyle.fillOpacity,
		definedTextStyle.letterSpacing,
		definedTextStyle.backgroundColor,
		definedTextStyle.backgroundOpacity
	);

	setAdvancedText(textfield, definedTextStyle.advancedSharpness, definedTextStyle.antiAlias, definedTextStyle.gridFit);
}

renderGraphics(clip : native, path : [StaticGraphicOp], style : [GraphicsStyle]) -> WidthHeight {
	g = getGraphics(clip);
	clearGraphics(g);

	// Set up the style
	fillcolour = ref 0xdeaddead; // A hack
	fillopacity = ref 1.0;
	gradientFill : ref Maybe<GradientFill> = ref None();
	gradientType = ref "linear";
	strokecolour = ref 0xdeaddead;
	strokeopacity = ref 1.0;
	strokewidth = ref 1.0;
	strokeLineGradient : ref Maybe<StrokeLineGradient> = ref None();
	iter(style, \s -> {
		switch (s : GraphicsStyle) {
			Fill(col): fillcolour := col;
			FillOpacity(op): fillopacity := op;
			GradientFill(c, rotation): gradientFill := Some(s);
			RadialGradient(): gradientType := "radial";
			Stroke(colour): strokecolour := colour;
			StrokeOpacity(opacity): strokeopacity := opacity;
			StrokeWidth(width): strokewidth := width;
			StrokeLineGradient(c, rotation): strokeLineGradient := Some(s);
		}
	});
	if (0xdeaddead != (^fillcolour)) {
		beginFill(g, ^fillcolour, ^fillopacity);
	}
	if (0xdeaddead != (^strokecolour) || isSome(^strokeLineGradient)) {
		colour = if (0xdeaddead == (^strokecolour)) 0xffffff else ^strokecolour;
		setLineStyle(g, ^strokewidth, colour, ^strokeopacity);
	}
	// Determine dimensions
	minX = ref 99999.0;
	maxX = ref -99999.0;
	minY = ref 99999.0;
	maxY = ref -99999.0;

	updateRange = \x, y -> {
		minX := min(x, ^minX);
		maxX := max(x, ^maxX);
		minY := min(y, ^minY);
		maxY := max(y, ^maxY);
	}

	iter(path, \op ->
		switch (op : StaticGraphicOp) {
			MoveTo(x, y) : updateRange(x,y);
			LineTo(x, y) : updateRange(x,y);
			CubicBezierTo(x, y, cx, cy): updateRange(x,y);
			QuadraticBezierTo(x, y, cx, cy): updateRange(x,y);
			ClosePath(): {}
			GRect(x, y, w, h): {
				updateRange(x, y);
				updateRange(x + w, y + h);
			}
			GRoundedRect(x, y, w, h, __): {
				updateRange(x, y);
				updateRange(x + w, y + h);
			}
			GEllipse(x, y, w, h): {
				updateRange(x - w, y - h);
				updateRange(x + w, y + h);
			}
			GCircle(x, y, r): {
				updateRange(x - r, y - r);
				updateRange(x + r, y + r);
			}
		});

	w = abs(^maxX - ^minX);
	h = abs(^maxY - ^minY);

	switch (^gradientFill : Maybe<GradientFill>) {
		Some(gf): {
			colors = map(gf.points, \c -> c.color);
			alphas = map(gf.points, \c -> c.alpha);
			offsets = map(gf.points, \c -> c.offset);
			matrix = makeMatrix(w, h, gf.rotation, ^minX, ^minY);
			beginGradientFill(g, colors, alphas, offsets, matrix, ^gradientType);
		}
		None(): {}
	}

	switch (^strokeLineGradient : Maybe<StrokeLineGradient>) {
		Some(sg): {
			colors = map(sg.points, \c -> c.color);
			alphas = map(sg.points, \c -> c.alpha);
			offsets = map(sg.points, \c -> c.offset);
			matrix = makeMatrix(w, h, sg.rotation, ^minX, ^minY);
			setLineGradientStroke(g, colors, alphas, offsets, matrix);
		}
		None() : {}
	}

	// Render the path
	needClose = ref false;
	moveTo(g, 0.0, 0.0); // Make sure we start from (0.0, 0.0). JS works incorrectly without this
	iter(if (js && length(path) == 1) path else deconstructGraphicsPath(path), \op ->
		switch (op : StaticGraphicOp) {
			MoveTo(x, y) : {
				moveTo(g, x, y);
			}
			LineTo(x, y) : {
				needClose := true;
				lineTo(g, x, y);
			}
			CubicBezierTo(x, y, cx, cy): {
				needClose := true;
				curveTo(g, cx, cy, x, y);
			}
			QuadraticBezierTo(x, y, cx, cy): {
				needClose := true;
				curveTo(g, cx, cy, x, y);
			}
			ClosePath(): {
				needClose := false;
				endFill(g);
			}
			GRect(x, y, width, height): {
				needClose := false;
				drawRect(g, x, y, width, height);
			}
			GRoundedRect(x, y, width, height, radius): {
				needClose := false;
				drawRoundedRect(g, x, y, width, height, radius);
			}
			GEllipse(x, y, width, height): {
				needClose := false;
				drawEllipse(g, x, y, width, height);
			}
			GCircle(x, y, radius): {
				needClose := false;
				drawCircle(g, x, y, radius);
			}
		}
	);
	if (^needClose) {
		endFill(g);
	}

	WidthHeight(^maxX, ^maxY);
}

KeyboardShortcut(keys : string, description : string);
keyboardShortcuts : ref [KeyboardShortcut] = ref [];

addKeyboardShortcut(shortcut : string, description : string) -> () -> void {
	sc = KeyboardShortcut(shortcut, description);
	keyboardShortcuts := arrayPush(^keyboardShortcuts, sc);
	\ -> keyboardShortcuts := removeFirst(^keyboardShortcuts, sc);
}

getKeyboardShortcuts() {
	default_shortcuts = if (js) "Ctrl+Up : Zoom in\nCtrl+Dn : Zoom out\n" else "";
	fold(^keyboardShortcuts, default_shortcuts, \in, sc -> in + sc.keys + " : " + sc.description + "\n");
}

getYouTubeURL(url0 : string) -> Maybe<string> {
	if (strContains(url0, "youtu.be") || strContains(url0, "youtube.com")) {
		if (strContains(url0, "/embed"))
			Some(url0)
		else {
			deconstructedLink = strSplit(elementAt(strSplit(url0, "?"), 1, ""), "&");

			url = either(find(deconstructedLink, \p -> startsWith(p, "v=")), "");
			parameters = strGlue(filter(deconstructedLink, \p -> p != url), "&");

			if (url != "") {
				Some("https://youtube.com/embed/" + substring(url, 2, strlen(url)) + if (parameters != "") "?" + parameters else "") 
			} else {
				None();
			}
		}
	} else {
		None();
	}
}

getVimeoURL(url0 : string) -> Maybe<string> {
	if (strContains(url0, "vimeo.com")) {
		url = firstElement(strSplit(lastElement(strSplit(url0, "/"), ""), "#"), "");

		if (url != "") {
			Some("https://player.vimeo.com/video/" + url);
		} else {
			None();
		}
	} else {
		None();
	}
}