import rendersupport;

export {
	native loadPdfLibrary : (cb : () -> void) -> void = PDF.loadPdfJsLibrary;

	getPdfDocument(url : string, headers : [KeyValue], onOK : (native) -> void, onError : (string) -> void) -> void;
	native getPdfDocumentNumPages : (document : native) -> int = PDF.getPdfDocumentNumPages;
	native getPdfDocumentPage : (document : native, num : int, onOK : (native) -> void, onError : (string) -> void) -> void = PDF.getPdfDocumentPage;
	native getPdfPageDimensions : (page : native) -> [double] = PDF.getPdfPageDimensions;

	native makePdfClip : () -> native = PDF.makePdfClip;
	native setPdfClipRenderPage : (clip : native, page : native, scale : double) -> void = PDF.setPdfClipRenderPage;
}

native getPdfDocumentNew : (url : string, headers : [[string]], onOK : (native) -> void, onError : (string) -> void) -> void = PDF.getPdfDocument;

loadPdfLibrary(cb : () -> void) {}
getPdfDocumentNew(url, headers, onOK, onError) {}
getPdfDocument(url : string, headers : [KeyValue], onOK : (native) -> void, onError : (string) -> void) {
	getPdfDocumentNew(url, map(headers, \h -> [h.key, h.value]), onOK, onError);
}
getPdfDocumentNumPages(document : native) { 0 }
getPdfDocumentPage(document : native, num : int, onOK : (native) -> void, onError : (string) -> void) {}
getPdfPageDimensions(page : native) { [0.0, 0.0] }
makePdfClip() { makeClip() }
setPdfClipRenderPage(clip, page, scale) {}
