import math/math;
import loop;

export {
	// a are the 32-bit highest bits, b the 32 lowest
	UInt64 : (a : int, b : int);

	// Does sign-extension
	toUInt64(i : int) -> UInt64;

	// Preserves all information
	hex2uint64(hex : string) -> UInt64;
	uint642hex(uint64 : UInt64) -> string;

	// Convert a string (integer or positive double) to an UInt64
	string2uint64(str : string) -> UInt64;

	// Convert UInt64 to a decimal string
	uint642string(uint64 : UInt64) -> string;

	// Correct addition of two 64-bit ints
	add64(a : UInt64, b : UInt64) -> UInt64;

	// Correct multiplication of two 64-bit ints
	mult64(a : UInt64, b : UInt64) -> UInt64;

	// Convert a 64-bit int to a double
	uint642double(u : UInt64) -> double;

	// Convert a double to a 64-bit int
	double2uint64(d : double) -> UInt64;

	// Convert a 64-bit to a int, only correct for 31 bits
	uint642int(u : UInt64) -> int;

	// Decimal string to hex string
	strDec2hex(dec : string) -> string;
	// Hex string to decimal string
	strHex2dec(hex : string) -> string;
}

intLength = 8;

toUInt64(i : int) -> UInt64 {
	UInt64(if (i >= 0) 0 else -1, i);
}

hex2uint64(hex : string) -> UInt64 {
	len = strlen(hex);
	i = len - intLength;

	ab = if (len <= intLength) Pair("", hex)
		else Pair(strLeft(hex, i), substring(hex, i, intLength));

	UInt64(parseHex(ab.first), parseHex(ab.second));
}

uint642hex(uint64 : UInt64) -> string {
	if (uint64.a == 0) formatHex(uint64.b)
	else formatHex(uint64.a) + lpad(formatHex(uint64.b), "0", intLength);
}

string2uint64(str : string) -> UInt64 {
	to64 = \s -> hex2uint64(strDec2hex(s));

	parts = strSplit(str, ".");
	if (length(parts) < 2) {
		to64(str);
	} else if (strLeft(parts[1], 1) >= "5") {
		add64(to64(parts[0]), UInt64(0, 1));
	} else {
		to64(parts[0]);
	}
}

uint642string(uint64 : UInt64) -> string {
	if (uint64.a == 0 && uint64.b >= 0) i2s(uint64.b)
	else strHex2dec(uint642hex(uint64));
}

add64(a : UInt64, b : UInt64) -> UInt64 {
	bNew = a.b + b.b;
	c = if (a.b < 0) {
		if (b.b < 0 || bNew >= 0) {
			1;
		} else {
			0;
		}
	} else {
		if (b.b < 0 && bNew >= 0) {
			1;
		} else {
			0;
		}
	}
	UInt64(a.a + b.a + c, bNew);
}

splitInt(i : int) -> Pair<int, int> {
	if (i >= 0) {
		Pair(i / 65536, i % 65536);
	} else {
		l0 = i % 65536;
		l = if (l0 < 0) {
			65536 + l0;
		} else {
			0;
		}
		h = 65536 - b2i(l0 < 0) + i / 65536;
		Pair(h, l);
	}
}

multIntInt(a : int, b : int) -> UInt64 {
	ap = splitInt(a);
	bp = splitInt(b);

	h = ap.first * bp.first;
	l = ap.second * bp.second;
	m1 = ap.first * bp.second;
	m2 = ap.second * bp.first;

	m1p = splitInt(m1);
	m2p = splitInt(m2);

	add64(
		UInt64(h, l),
		add64(
			UInt64(m1p.first, m1p.second * 65536),
			UInt64(m2p.first, m2p.second * 65536)
		)
	);
}

mult64(a : UInt64, b : UInt64) -> UInt64 {
	l = multIntInt(a.b, b.b);

	m1 = multIntInt(a.a, b.b);
	m2 = multIntInt(a.b, b.a);

	UInt64(l.a + m1.b + m2.b, l.b);
}

uint642double(u : UInt64) -> double {
	int2double = \i -> i2d(i) + if (i < 0) 4294967296.0 else 0.0;
	4294967296.0 * int2double(u.a) + int2double(u.b);
}

// Convert a double to a 64-bit int
double2uint64(d : double) -> UInt64 {
	upper = floor(abs(d) / 4294967296.0);
	lower = floor(abs(d) % 4294967296.0);
	UInt64(upper, lower)

}

uint642int(u : UInt64) -> int {
	bitAnd(u.b, 0x07fffffff);
}

strDec2hex(dec : string) -> string {
	hex0 = updateWhile2(Pair("", dec), unpairC(\accHex, accDec -> {
		unpair(strDecDivInt(accDec, 65536), \div, rem -> {
			Pair(
				Pair(lpad(formatHex(rem), "0", 4) + accHex, div),
				div != "0"
			);
		});
	})).first;
	ltrim2(hex0, "0");
}

strHex2dec(hex : string) -> string {
	dec0 = updateWhile2(Pair("", hex), unpairC(\accDec, accHex -> {
		unpair(strHexDivInt(accHex, 10000000), \div, rem -> {
			Pair(
				Pair(lpad(i2s(rem), "0", 7) + accDec, div),
				div != "0"
			);
		});
	})).first;
	ltrim2(dec0, "0");
}

// returns the result of division and remainder
// den should be positive less than 0x08000000
strDecDivInt(num0 : string, den : int) -> Pair<string, int> {
	num = ltrim2(num0, "0");
	denL = strlen(i2s(den));
	numL = strlen(num);
	if (numL <= denL) {
		i = s2i(num);
		div = i / den;
		rem = i % den;
		Pair(i2s(div), rem);
	} else {
		stringFold(
			substring(num, denL, numL - denL),
			Pair("", s2i(substring(num, 0, denL))),
			\acc, ch -> {
				i = acc.second * 10 + (ch - 48);
				div = i / den;
				rem = i % den;

				Pair(acc.first + i2s(div), rem);
			}
		);
	}
}

// returns the result of division in hex format and integer remainder
// den should be positive less than 0x04000000
strHexDivInt(num0 : string, den : int) -> Pair<string, int> {
	num = ltrim2(num0, "0");
	numL = strlen(num);
	if (numL <= 6) {
		i = parseHex(num);
		div = i / den;
		rem = i % den;
		Pair(formatHex(div), rem);
	} else {
		stringCharsFold(
			substring(num, 6, numL - 6),
			Pair("", parseHex(substring(num, 0, 6))),
			\acc, char -> {
				i = acc.second * 16 + parseHex(char);
				div = i / den;
				rem = i % den;

				Pair(acc.first + formatHex(div), rem);
			}
		);
	}
}
