import math/math;
import loop;

export {
	// a are the 32-bit highest bits, b the 32 lowest
	UInt64 : (a : int, b : int);

	// Does sign-extension
	toUInt64(i : int) -> UInt64;

	// Preserves all information
	hex2uint64(hex : string) -> UInt64;
	uint642hex(uint64 : UInt64) -> string;

	// Convert a string to an UInt64
	string2uint64(str : string) -> UInt64;

	// Convert 31 low bits of UInt64 to a string
	uint642string(uint64 : UInt64) -> string;

	// Correct addition of two 64-bit ints
	add64(a : UInt64, b : UInt64) -> UInt64;

	// Convert a 64-bit int to a double
	uint642double(u : UInt64) -> double;

	// Convert a double to a 64-bit int
	double2uint64(d : double) -> UInt64;

	// Convert a 64-bit to a int, only correct for 31 bits
	uint642int(u : UInt64) -> int;
}

intLength = 8;

toUInt64(i : int) -> UInt64 {
	UInt64(if (i >= 0) 0 else -1, i);
}

hex2uint64(hex : string) -> UInt64 {
	len = strlen(hex);
	i = len - intLength;

	ab = if (len <= intLength) Pair("", hex)
		else Pair(strLeft(hex, i), substring(hex, i, intLength));

	UInt64(parseHex(ab.first), parseHex(ab.second));
}

uint642hex(uint64 : UInt64) -> string {
	if (uint64.a == 0) formatHex(uint64.b)
	else formatHex(uint64.a) + lpad(formatHex(uint64.b), "0", intLength);
}

string2uint64(str : string) -> UInt64 {
	hex2uint64(strDec2hex(str));
}

uint642string(uint64 : UInt64) -> string {
	if (uint64.a == 0) i2s(uint64.b)
	else "0x" + uint642hex(uint64);
}

add64(a : UInt64, b : UInt64) -> UInt64 {
	int2double = \i -> i2d(i) + if (i < 0) 4294967296.0 else 0.0;
	c = floor((int2double(a.b) + int2double(b.b)) / 4294967296.0);

	UInt64(a.a + b.a + c, a.b + b.b);
}

uint642double(u : UInt64) -> double {
	int2double = \i -> i2d(i) + if (i < 0) 4294967296.0 else 0.0;
	4294967296.0 * int2double(u.a) + int2double(u.b);
}

// Convert a double to a 64-bit int
double2uint64(d : double) -> UInt64 {
	upper = floor(abs(d) / 4294967296.0);
	lower = floor(abs(d) % 4294967296.0);
	UInt64(upper, lower)

}

uint642int(u : UInt64) -> int {
	bitAnd(u.b, 0x07fffffff);
}

strDec2hex(dec : string) -> string {
	hex0 = updateWhile2(Pair("", dec), unpairC(\accHex, accDec -> {
		unpair(strDecDivInt(accDec, 65536), \div, rem -> {
			Pair(
				Pair(lpad(formatHex(rem), "0", 4) + accHex, div),
				div != ""
			);
		});
	})).first;
	ltrim2(hex0, "0");
}

// returns the result of division and remainder
strDecDivInt(num0 : string, den : int) -> Pair<string, int> {
	num = ltrim2(num0, "0");
	denL = strlen(i2s(den));
	numL = strlen(num);
	if (numL <= denL) {
		i = s2i(num);
		div = i / den;
		rem = i % den;
		if (div > 0) {
			Pair(i2s(div), rem);
		} else {
			Pair("", rem);
		}
	} else {
		res : Pair<string, int> = stringFold(
			substring(num, denL, numL - denL),
			Pair("", s2i(substring(num, 0, denL))),
			\acc, ch -> {
				i = acc.second * 10 + (ch - 48);
				div = i / den;
				rem = i % den;

				Pair(acc.first + i2s(div), rem);
			}
		);
		res;
	}
}
