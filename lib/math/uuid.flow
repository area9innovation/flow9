import math/math;

export {
	// Generates an RFC 4122 version 4 uuid
	makeUuid() -> string;
	isUuid(uuid : string) -> bool;
}

makeUuid() -> string {
	tsi = trunc(timestamp());
	strGlue(map(s2a("xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"), \code -> {
		r = mod(tsi + trunc(16.0 * random()), 16);
		if (fromCharCode(code) == "x") formatHex(r)
		else if (fromCharCode(code) == "y") formatHex(bitOr(bitAnd(r, 0x3), 0x8))
		else fromCharCode(code)
	}), "");
}

isUuid(uuid : string) -> bool {
	chunks = strSplit2WithoutLeave(uuid, ["-"]);
	chunkCheck = \chunk_ -> {
		all(map(s2a(chunk_), \c -> isHexDigit(fromCharCode(c))))
	}
	length(chunks) == 5
	&& all(mapi(chunks, \i, chunk -> {
		if (i == 0) strlen(chunk) == 8 && chunkCheck(chunk)
		else if (i == 1 || i == 3) strlen(chunk) == 4 && chunkCheck(chunk)
		else if (i == 2) strlen(chunk) == 4 && startsWith(chunk, "4") && chunkCheck(chunk)
		else if (i == 4) strlen(chunk) == 12 && chunkCheck(chunk)
		else true
	}))
}
