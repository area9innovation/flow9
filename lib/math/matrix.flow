import runtime;
import math/math;

export {
	multiplyArrayBy(a : [double], multiplier : double) -> [double];
	isMatrixSquare(a : [[?]]) -> bool;
	multiplyMatrices(a : [[double]], b : [[double]]) -> [[double]];
	findDeterminant(a : [[double]]) -> double;
	multiplyVectorByMatrix(v : [double], a : [[double]]) -> [double];
	inverseMatrix(a : [[double]]) -> [[double]];
	transposeMatrix(a : [[?]]) -> [[?]];

	// Add the necessary ammount of `def_val` to rows so that it becomes a rectangular matrix 
	completeMatrix(m : [[?]], def_val : ?) -> [[?]];

	setMatrix(d : [[?]], row : int, col : int, val : ?) -> [[?]];

	subtractMatrix(a : [[double]], b : [[double]]) -> [[double]];
	subtractVector(a : [double], b : [double]) -> [double];

	// Component-wise absolute
	cabsVector(a : [double]) -> [double];
	cabsMatrix(a : [[double]]) -> [[double]];

	// The maximum coefficient
	maxCoeffVector(a : [double]) -> double;
	maxCoeffMatrix(a : [[double]]) -> double;
}

isMatrixSquare(a : [[?]]) -> bool {
	len = length(a);
	assert(len > 0, "must contain at least 1 row");
	lengthOfFirst = length(a[0]);
	assert(lengthOfFirst > 0, "must contain at least 1 element in row");

	if (len == 1)
		lengthOfFirst == 1
	else
		forall(tail(a), \r -> length(r) == lengthOfFirst);
}

getMatrixColumn(a : [[?]], colIndex : int) -> [?] {
	assert(colIndex < length(a[0]) && colIndex >= 0, "incorrect index");
	fold(a, [], \init, row -> {
		arrayPush(init, row[colIndex]);
	});
}

getMatrixRow(a : [[double]], index : int) -> [double] {
	a[index];
}

multiplyArrayBy(a : [double], multiplier : double) -> [double] {
	map(a, \v -> v * multiplier);
}

multiplyMatrixBy(a : [[double]], multiplier : double) -> [[double]] {
	map(a, \row -> {
		map(row, \cell -> cell * multiplier)
	});
}

//product of vectors a (1xn) and b (nx1)
dotProductForVector(a : [double], b : [double]) -> double {
	fold(
		zipWith(a, b, \first, second -> first * second),
		0.0,
		\init, v -> init + v
	);
}

multiplyMatrices(a : [[double]], b : [[double]]) -> [[double]] {
	colsQty = getColumnsQty(a);
	rowsQty = getRowsQty(b);
	assert(colsQty == rowsQty, "1st matrix column qty. and 2nd matrix row qty. must be equal");

	generate(0, getRowsQty(a), \i -> {
		generate(0, getColumnsQty(b), \j -> {
			dotProductForVector(
				getMatrixRow(a, i),
				getMatrixColumn(b, j)
			);
		});
	});
}

getColumnsQty(a : [[double]]) -> int {
	fold(a, length(a[0]), \init, row -> {
		min(init, length(row));
	});
}

getRowsQty(a : [[double]]) -> int {
	length(a);
}

multiplyVectorByMatrix(v : [double], a : [[double]]) -> [double] {
	assert(length(v) == length(a), "vector length and rows qty must be equal");
	len = length(a[0]);

	generate(0, len, \colIndex -> {
		multiplyAndAdd(getMatrixColumn(a, colIndex), v);
	});
}

multiplyAndAdd(a : [double], b : [double]) -> double {
	assert(length(a) == length(b), "arrays must be same length");
	dsum(zipWith(a, b, \v1, v2 -> v1 * v2));
}

transposeMatrix(a : [[?]]) -> [[?]] {
	if (length(a) == 0) {
		a
	} else {
		columnsQty = length(a[0]);

		generate(0, columnsQty, \i -> {
			getMatrixColumn(a, i);
		})
	}
}

completeMatrix(m : [[?]], def_val : ?) -> [[?]] {
	max_rows = fold(m, 0, \acc, col -> max(acc, length(col)));
	fold(m, [], \acc, col ->
		concat(acc, [concat(col, arrayRepeat(def_val, max_rows - length(col)))])
	);
}

inverseMatrix(a : [[double]]) -> [[double]] {
	assert(isMatrixSquare(a), "inversion available only for squared matrix");
	multiplyMatrixBy(transposeMatrix(getCofactorMatrix(a)), 1.0 / findDeterminant(a));
}

getCofactorMatrix(a : [[double]]) -> [[double]] {
	changeSigns(getMatrixOfMinors(a));
}

changeSigns(a : [[double]]) -> [[double]] {
	len = length(a);
	rowLen = length(a[0]);

	generate(0, len, \i -> { //DRY
		generate(0, rowLen, \j -> {
			if (odd(i + j))
				-a[i][j]
			else
				a[i][j]
		});
	});
}

findDeterminant(a : [[double]]) -> double {
	assert(isMatrixSquare(a), "determinant available only for squared matrix");
	len = length(a);

	if (len == 1)
		a[0][0]
	else if (len == 2)
		a[0][0] * a[1][1] - a[1][0] * a[0][1]
	else if (len == 3)
		get3By3Determinant(a)
	else {
		eleminationResult = gaussianElemination(a);
		diagonalMultiplication(eleminationResult.first) / eleminationResult.second;
	};
}

getMatrixOfMinors(a : [[double]]) -> [[double]] {
	len = length(a);
	rowLen = length(a[0]);

	generate(0, len, \i -> {
		generate(0, rowLen, \j -> {
			findDeterminant(eliminateRowAndCol(a, i, j));
		});
	});
}

get3By3Determinant(a : [[double]]) -> double {
	assert(length(a) == 3, "this function only for 3x3 matrix");
	iter(a, \row -> {
		assert(length(row) == 3, "this function only for 3x3 matrix");
	});

	// indicesForSummation = [
	// 	[Pair(0, 0), Pair(1, 1), Pair(2, 2)],
	// 	[Pair(0, 1), Pair(1, 2), Pair(2, 0)],
	// 	[Pair(0, 2), Pair(1, 0), Pair(2, 1)],
	// ];

	// indicesForSubtraction = [
	// 	[Pair(0, 2), Pair(1, 1), Pair(2, 0)],
	// 	[Pair(0, 1), Pair(1, 0), Pair(2, 2)],
	// 	[Pair(0, 0), Pair(1, 2), Pair(2, 1)],
	// ];

	// elementsForSummation = map(indicesForSummation, \vector -> {
	// 	map(vector, \index -> a[index.first][index.second]);
	// });

	// elementsForSubtraction = map(indicesForSubtraction, \vector -> {
	// 	map(vector, \index -> a[index.first][index.second]);
	// });

	// fold(elementsForSummation, 0.0, \init, vector -> {
	// 	init + productOfElements(vector);
	// })
	// +
	// fold(elementsForSubtraction, 0.0, \init, vector -> {
	// 	init - productOfElements(vector);
	// });

	  a[2][0] * (a[0][1] * a[1][2] - a[0][2] * a[1][1])
	- a[2][1] * (a[0][0] * a[1][2] - a[0][2] * a[1][0])
	+ a[2][2] * (a[0][0] * a[1][1] - a[0][1] * a[1][0])
}

eliminateRowAndCol(a : [[double]], rowIndex : int, columnIndex : int) -> [[double]] {
	len = length(a);
	rowLen = length(a[0]);
	assert(rowIndex < len && columnIndex < rowLen, "incorrect index");

	map(removeIndex(a, rowIndex), \row -> {
		removeIndex(row, columnIndex);
	});
}

diagonalMultiplication(a : [[double]]) -> double {
	len = length(a);
	diagonal = generate(0, len, \i -> a[i][i]);

	fold(diagonal, 1.0, \init, v -> init * v);
}

gaussianElemination(a : [[double]]) -> Pair<[[double]], double> {
	gaussianEleminationIter(a, 0, [], 1.0);
}

gaussianEleminationIter(a : [[double]], columnIndex : int, result : [[double]], multipliers : double) -> Pair<[[double]], double> {
	if (length(a) > 1) {
		firstRow = a[0];

		restMatrix = map(tail(a), \r -> {
			subArrays(
				multiplyArrayBy(firstRow, r[columnIndex]),
				multiplyArrayBy(r, firstRow[columnIndex])
			);
		});

		gaussianEleminationIter(
			restMatrix,
			columnIndex + 1,
			arrayPush(result, a[0]),
			multNTimes(multipliers, firstRow[columnIndex], length(restMatrix))
		);
	} else {
		Pair(arrayPush(result, a[0]), multipliers);
	};
}

subArrays(a1 : [double], a2 : [double]) -> [double] { //DRY
	assert(length(a1) == length(a2), "array must be same length");
	zipWith(a1, a2, \v1, v2 -> v1 - v2);
}

multNTimes(a : double, m : double, p : int) -> double {
	if (p == 0)
		a
	else
		multNTimes(a * m, m, p - 1);
}

setMatrix(d : [[?]], row : int, col : int, val : ?) -> [[?]] {
	r = if (row < length(d)) d[row] else [];
	replace(d, row, replace(r, col, val));
}

subtractMatrix(a : [[double]], b : [[double]]) -> [[double]] {
	mapi(a, \i, ar -> {
		br = b[i];
		mapi(ar, \j, av -> {
			bv = br[j];
			av - bv;
		})
	});
}

subtractVector(a : [double], b : [double]) -> [double] {
	mapi(a, \i, av -> {
		av - b[i];
	});
}

cabsVector(a : [double]) -> [double] {
	map(a, abs);
}

cabsMatrix(a : [[double]]) -> [[double]] {
	map(a, cabsVector);
}

maxCoeffVector(a : [double]) -> double {
	fold(a, doubleMin, min)
}

maxCoeffMatrix(a : [[double]]) -> double {
	fold(a, doubleMin, \acc, ar -> {
		fold(ar, acc, min)
	})
}