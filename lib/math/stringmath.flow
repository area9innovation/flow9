// Â© Copyright 2012 Area9 Technologies.

import math/math;
import string;


// string functions which should call math functions;
export {
	// Converts the double given to string with specified number of digits after dot
	decimals(d : double, numOfDigits : int, withTrailingZeroes : bool) -> string;

	roundDecimals(d : double, numOfDigits : int) -> double;

	// converts double and truncates meaningless zeroes in fractional part. d2st(0.120000001, 3) -> 0.12
	d2st : (d : double, fractlen : int) -> string;

	// Like s2i, but will return None if the string is not an integer
	s2iM(s: string) -> Maybe<int>;
}

roundDecimals(d, numOfDigits) {
	s2d(decimals(d, numOfDigits, false))             
}

// safer than Double with low values (0.0 .. 1.0) which we use commonly
decimals(d : double, numOfDigits : int, withTrailingZeroes : bool) -> string {
	sign_ = if (d < 0.0) "-" else "";
	ad = abs(d);
	num = min(9, numOfDigits); // no more than 9 digits after dot. It should be done in cycle to achieve those values
	intPart = ref (if (num <= 0) dround(ad) else dfloor(ad));
	k = pow(10, num) |> i2d;
	second =
		if (num <= 0) "" 
		else (ad - (^intPart))
			|> \v -> v * k 
			|> round 
			|> i2s
			|> \s -> {
					if (strlen(s) > num) {
						intPart := ^intPart + 1.0;
						ltrim2(s, "1")
					} else s
				}
			|> \ss -> lpad(ss, "0", num)
			|> \sss -> if (!withTrailingZeroes) rtrim2(sss, "0") else sss;

	first = (if (^intPart == 0.0 && second == "") "" else sign_) + d2s(^intPart);
	if (second != "") first + "." + second else first;
}

d2st(d, fractlen) {
	decimals(d, fractlen, false)
}

s2iM(s: string ) {
	n = strlen(s);
	if (n == 0) {
		None();
	} else {
		s2iHelper(s, 0, n, 0);
	}
}

s2iHelper(s : string, i : int, n : int, acc : int) -> Maybe<int> {
	if (i < n) {
		c = getCharCodeAt(s, i);
		if (0x30<=c && c<=0x39) {
			s2iHelper(s, i + 1, n, 10 * acc + c - 0x30);
		} else {
			None();
		} 	
	} else {
		Some(acc);
	}
}
