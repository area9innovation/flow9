// Â© Copyright 2012 Area9 Technologies.
import math/math;

export {
	// A point
	Point(x : double, y : double);

	// A rectangle
	Rect(x1 : double, y1 : double, x2 : double, y2 : double);

	// A 2D Vector
	V2(x : double, y : double);

	// A circle
	V2Circle(center : V2, radius : double);

	// A constant scaling factor
	Factor(x : double, y : double);
	dummyFactor = Factor(1., 1.);

	// An offset and a scaling factor - slightly misusing Point as a factor
	PositionScale(pos : Point, scale : Point);

	zeroPoint = Point(0., 0.);
	zeroScale = Point(1., 1.);
	zeroPositionScale = PositionScale(zeroPoint, zeroScale);
	zeroRect = Rect(0.0, 0.0, 0.0, 0.0);

	deg2rad(d : double) -> double;
	rad2deg(r : double) -> double;

	dotProduct(x1 : double, y1 : double, x2 : double, y2 : double) -> double;

	v2Len(v : V2) -> double;
	v2SqLen(v : V2) -> double;
	v2SetLen(v : V2, l : double) -> V2;
	v2Mul(v : V2, m : double) -> V2;
	v2Add(v1 : V2, v2 : V2) -> V2;
	v2Sub(v1 : V2, v2 : V2) -> V2;
	v2Orthogonal(v : V2) -> V2;
	v2Ort(v : V2) -> V2;
	v2AngleBetween(v1 : V2, v2 : V2) -> double;
	v2ScalarMul(v1 : V2, v2 : V2) -> double;
	v2Bisector(v1 : V2, v2 : V2) -> V2;
	v2Reverse(v : V2) -> V2;

	PositionScale2Point(ps : PositionScale) -> Point;
	concatPositionScale(ps1 : PositionScale, ps2 : PositionScale) -> PositionScale;

	// Do these rectangles overlap?
	rectsOverlap(r1 : Rect, r2 : Rect) -> bool;

	// Does the big rectangle entirely contain the small one?
	rectContains(big : Rect, small : Rect) -> bool;

	rectsUnion(r1 : Rect, r2 : Rect) -> Rect;
	rectsIntersection(a : Rect, b : Rect) -> Rect;

	v2IsInCircle(v : V2, c : V2Circle) -> bool;
	v2DiameterCircle(a : V2, b : V2) -> V2Circle;
	v2CircumCircle(a : V2, b : V2, c : V2) -> V2Circle;
	v2MiniDisc(pts : [?], getCoords : (?) -> V2) -> V2Circle;
	v2MiniDisc0(ptFrom : int, ptTo : int, pts : [?], getCoords : (?) -> V2) -> V2Circle;
}

PositionScale2Point(ps : PositionScale) -> Point {
	Point(ps.pos.x / ps.scale.x, ps.pos.y / ps.scale.y)
}

deg2rad(d : double) -> double {
	d * PI / 180.0
}

rad2deg(r : double) -> double {
	180.0 * r / PI;
}

dotProduct(x1 : double, y1 : double, x2 : double, y2 : double) -> double {
	x1 * x2 + y1 * y2;
}

v2Len(v : V2) -> double {
	sqrt(v2SqLen(v));
}

v2SqLen(v : V2) -> double {
	v.x * v.x + v.y * v.y;
}

v2SetLen(v : V2, l : double) -> V2 {
	len = v2Len(v);
	if (equalDoubles(len, 0.0)) v else v2Mul(v, l / len);
}

v2Mul(v : V2, m : double) -> V2 {
	V2(v.x * m, v.y * m);
}

v2Add(v1 : V2, v2 : V2) -> V2 {
	V2(v1.x + v2.x, v1.y + v2.y);
}

v2Sub(v1 : V2, v2 : V2) -> V2 {
	V2(v1.x - v2.x, v1.y - v2.y);
}

v2Orthogonal(v : V2) -> V2 {
	V2(v.y, -v.x)
}

v2Ort(v : V2) -> V2 {
	len = v2Len(v);
	if (equalDoubles(len, 0.0)) V2(0.0, 0.0) else V2(v.x / len, v.y / len);
}

v2AngleBetween(v1 : V2, v2 : V2) -> double { //radians
	if (v2Len(v1) > 0.0 && v2Len(v2) > 0.0) {
		vec = v2ScalarMul(v1, v2) / (v2Len(v1)*v2Len(v2));
		if (vec > 1.0) { // might happen because of limited precision
			0.0
		} else {
			acos(vec)
		}
	} else {
		0.0
	}
}

v2ScalarMul(v1 : V2, v2 : V2) -> double {
	v1.x*v2.x + v1.y*v2.y
}

v2Bisector(v1 : V2, v2 : V2) -> V2 {
	v2Add(
		v2Ort(v1),
		v2Ort(v2)
	)
}

v2Reverse(v : V2) -> V2 {
	V2(-v.x, -v.y);
}

concatPositionScale(ps1 : PositionScale, ps2 : PositionScale) -> PositionScale {
	PositionScale(Point(ps1.pos.x + ps2.pos.x, ps1.pos.y + ps2.pos.y), Point(ps1.scale.x * ps2.scale.x, ps1.scale.y * ps2.pos.y))
}


rectsOverlap(r1 : Rect, r2 : Rect) -> bool {
	// If we assume the rects are "regular", we can do this better, but ok
	max(r1.x1, r1.x2) >= min(r2.x1, r2.x2) &&
	min(r1.x1, r1.x2) <= max(r2.x1, r2.x2) &&
	max(r1.y1, r1.y2) >= min(r2.y1, r2.y2) &&
	min(r1.y1, r1.y2) <= max(r2.y1, r2.y2)
}

rectContains(big : Rect, small : Rect) -> bool {
	min(big.x1, big.x2) <= min(small.x1, small.x2) &&
	max(big.x1, big.x2) >= max(small.x1, small.x2) &&

	min(big.y1, big.y2) <= min(small.y1, small.y2) &&
	max(big.y1, big.y2) >= max(small.y1, small.y2)
}

rectsUnion(r1 : Rect, r2 : Rect) -> Rect {
	Rect(
		min(
			min(r1.x1, r1.x2),
			min(r2.x1, r2.x2)
		),
		min(
			min(r1.y1, r1.y2),
			min(r2.y1, r2.y2)
		),
		max(
			max(r1.x1, r1.x2),
			max(r2.x1, r2.x2)
		),
		max(
			max(r1.y1, r1.y2),
			max(r2.y1, r2.y2)
		)
	);
}

rectsIntersection(a : Rect, b : Rect) -> Rect {
	ax1 = min(a.x1, a.x2);
	ax2 = max(a.x1, a.x2);

	bx1 = min(b.x1, b.x2);
	bx2 = max(b.x1, b.x2);

	x1 = max(ax1, bx1);
	x2 = min(ax2, bx2);

	ay1 = min(a.y1, a.y2);
	ay2 = max(a.y1, a.y2);

	by1 = min(b.y1, b.y2);
	by2 = max(b.y1, b.y2);

	y1 = max(ay1, by1);
	y2 = min(ay2, by2);

	if (x2 >= x1 && y2 >= y1) {
		Rect(x1, y1, x2, y2);
	} else {
		zeroRect;
	}
}

v2IsInCircle(v : V2, c : V2Circle) -> bool {
	v2Len(V2(v.x - c.center.x, v.y - c.center.y)) <= c.radius
}

v2DiameterCircle(a : V2, b : V2) -> V2Circle {
	V2Circle(V2((a.x + b.x) / 2.0, (a.y + b.y) / 2.0), v2Len(V2((a.x - b.x) / 2.0, (a.y - b.y) / 2.0)))
}

v2CircumCircle(a : V2, b : V2, c : V2) -> V2Circle {
	bc = v2Sub(b, c);
	ab = v2Sub(a, b);
	ca = v2Sub(c, a);
	la = v2Len(bc);
	lb = v2Len(ca);
	lc = v2Len(ab);
	if (la == 0.0) v2DiameterCircle(a, b) else
	if (lb == 0.0) v2DiameterCircle(b, c) else
	if (lc == 0.0) v2DiameterCircle(c, a) else {
		fn = \ma, mb, mc -> ma * bc.y + mb * ca.y + mc * ab.y;
		d = 2.0 * fn(a.x, b.x, c.x);
		sqa = v2SqLen(a);
		sqb = v2SqLen(b);
		sqc = v2SqLen(c);
		p = la + lb + lc;
		V2Circle(
			V2(fn(sqa, sqb, sqc) / d, -(sqa * bc.x + sqb * ca.x + sqc * ab.x) / d),
			la * lb * lc / sqrt(p * (p - 2.0*la) * (p - 2.0*lb) * (p - 2.0*lc))
		)
	}
}

v2MiniDisc(pts : [?], getCoords : (?) -> V2) -> V2Circle {
	v2MiniDisc0(0, length(pts)-1, pts, getCoords)
}

v2MiniDisc0(ptFrom : int, ptTo : int, pts : [?], getCoords : (?) -> V2) -> V2Circle {
	// TODO shuffle
	if (ptTo-ptFrom > 0) {  // Two or more
		foldRange(ptFrom+2, ptTo, v2DiameterCircle(getCoords(pts[ptFrom]), getCoords(pts[ptFrom+1])), \disc, i -> {
			pt = getCoords(pts[i]);
			if (v2IsInCircle(pt, disc)) disc else v2MiniDiscPt(ptFrom, i-1, pts, getCoords, pt)
		})
	} else if (ptTo == ptFrom) V2Circle(getCoords(pts[ptTo]), 0.0)
	else V2Circle(V2(s2d("NaN"), s2d("NaN")), s2d("NaN"))
}

v2MiniDiscPt(ptFrom : int, ptTo : int, pts : [?], getCoords : (?) -> V2, q : V2) -> V2Circle {
	// TODO shuffle
	foldRange(ptFrom+1, ptTo, v2DiameterCircle(getCoords(pts[ptFrom]), q), \disc, i -> {
		pt = getCoords(pts[i]);
		if (v2IsInCircle(pt, disc)) disc else v2MiniDisc2Pt(ptFrom, i-1, pts, getCoords, pt, q)
	})
}

v2MiniDisc2Pt(ptFrom : int, ptTo : int, pts : [?], getCoords : (?) -> V2, q1 : V2, q2 : V2) -> V2Circle {
	foldRange(ptFrom, ptTo, v2DiameterCircle(q1, q2), \disc, i -> {
		pt = getCoords(pts[i]);
		if (v2IsInCircle(pt, disc)) disc else v2CircumCircle(pt, q1, q2)
	})
}

