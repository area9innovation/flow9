import math/geometry;
import math/matrix;

export {
//	| a | b | tx|
//	| c | d | ty|
//	| 0 | 0 | 1 |
	TransformMatrix(
		a : double,
		b : double,
		c : double,
		d : double,
		tx : double,
		ty : double
	);

	zeroTransformMatrix = TransformMatrix(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);

	Bounds(
		minX : double,
		minY : double,
		maxX : double,
		maxY : double
	);

	zeroBounds = Bounds(doubleMin, doubleMin, doubleMax, doubleMax);

	isCorrectBounds(bounds : Bounds) -> bool;

	getGlobalTransform(clip : native) -> TransformMatrix;

	applyTransformMatrix(m : TransformMatrix, p : Point) -> Point;
	getTransformPosition(m : TransformMatrix) -> Point;
	getTransformScale(m : TransformMatrix) -> Point;
	getTransformPositionScale(m : TransformMatrix) -> PositionScale;

	// To get relative TM we need to multiply our own TM to inversed parent TM
	getRelativeTransformMatrix(me : TransformMatrix, parent : TransformMatrix) -> TransformMatrix;

	getDummyTransformMatrix() zeroTransformMatrix;
}

isCorrectBounds(bounds : Bounds) -> bool {
	bounds.minX > doubleMin && bounds.minY > doubleMin && bounds.maxX < doubleMax && bounds.maxY < doubleMax
}

// Returns array [a, b, c, d, tx, ty]
native getGlobalTransformNative : (clip : native) -> [double] = RenderSupport.getGlobalTransform;
getGlobalTransformNative(clip : native) -> [double] {
	// A stub
	[1.0, 0.0, 0.0, 1.0, 0.0, 0.0];
}

getGlobalTransform(clip : native) -> TransformMatrix {
	a = getGlobalTransformNative(clip);
	TransformMatrix(a[0], a[1], a[2], a[3], a[4], a[5]);
}

applyTransformMatrix(m : TransformMatrix, p : Point) -> Point {
	Point(p.x * m.a + p.y * m.b + m.tx, p.x * m.c + p.y * m.d + m.ty);
}

getTransformPosition(m : TransformMatrix) -> Point {
	Point(m.tx, m.ty)
}

getTransformScale(m : TransformMatrix) -> Point {
	Point(m.a, m.d)
}

getTransformPositionScale(m : TransformMatrix) -> PositionScale {
	PositionScale(Point(m.tx, m.ty), Point(m.a, m.d))
}

getRelativeTransformMatrix(me : TransformMatrix, parent : TransformMatrix) -> TransformMatrix {
	me1 = tm2doubles(me);
	parent1 = tm2doubles(parent);
	result = multiplyMatrices(me1, inverseMatrix(parent1));
	doubles2tm(result)
}

// Matrix transformation to be used in lib/matrix.flow
tm2doubles(m : TransformMatrix) -> [[double]] {
	appendix = [0.0, 0.0, 1.0];
	[
		[m.a, m.b, m.tx],
		[m.c, m.d, m.ty],
		appendix
	]
}

doubles2tm(m : [[double]]) -> TransformMatrix {
	TransformMatrix(
		m[0][0],
		m[0][1],
		m[1][0],
		m[1][1],
		m[0][2],
		m[1][2]
	)
}
