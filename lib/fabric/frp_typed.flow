import fabric/fabric_types;
import fabric/wrappers;
import fabric/env;

export {
	BLetb(name : string, value : bool, scope : Fabric) -> Fabric;
	BLeti(name : string, value : int, scope : Fabric) -> Fabric;
	BLetd(name : string, value : double, scope : Fabric) -> Fabric;
	BLets(name : string, value : string, scope : Fabric) -> Fabric;

	BLetMany(nameValues : [flow], scope : Fabric) -> Fabric;

	BSelectb(name : string, fn : (FabricEnv, value : bool) -> Fabric) -> Fabric;
	BSelecti(name : string, fn : (FabricEnv, value : int) -> Fabric) -> Fabric;
	BSelectii(name1 : string, name2 : string, fn : (FabricEnv, value1 : int, value2 : int) -> Fabric) -> Fabric;
	BSelectd(name : string, fn : (FabricEnv, value : double) -> Fabric) -> Fabric;
	BSelectdd(name1 : string, name2 : string, fn : (FabricEnv, value1 : double, value2 : double) -> Fabric) -> Fabric;
	BSelects(name : string, fn : (FabricEnv, value : string) -> Fabric) -> Fabric;
	BSelectss(name1 : string, name2 : string, fn : (FabricEnv, value1 : string, value2 : string) -> Fabric) -> Fabric;

	BFormula(target : string, from : [string], fn : (FabricEnv, values : [flow]) -> flow) -> Fabric;
}

BLetb(name : string, value : bool, scope : Fabric) -> Fabric {
	BLet(name, value, scope)
}
BLeti(name : string, value : int, scope : Fabric) -> Fabric {
	BLet(name, value, scope)
}
BLetd(name : string, value : double, scope : Fabric) -> Fabric {
	BLet(name, value, scope)
}
BLets(name : string, value : string, scope : Fabric) -> Fabric {
	BLet(name, value, scope)
}

BLetMany(nameValues : [flow], scope : Fabric) -> Fabric {
	if (length(nameValues) <= 1) {
		scope
	} else {
		BLet(nameValues[0], nameValues[1], BLetMany(tailFrom(nameValues, 2), scope))
	}
}


BSelectb(name : string, fn : (FabricEnv, value : bool) -> Fabric) -> Fabric {
	BSelect([name], \env, args -> fn(env, args[0]));
}
BSelecti(name : string, fn : (FabricEnv, value : int) -> Fabric) -> Fabric {
	BSelect([name], \env, args -> fn(env, args[0]));
}
BSelectii(name1 : string, name2 : string, fn : (FabricEnv, value1 : int, value2 : int) -> Fabric) -> Fabric {
	BSelect([name1, name2], \env, args -> fn(env, args[0], args[1]));
}

BSelectd(name : string, fn : (FabricEnv, value : double) -> Fabric) -> Fabric {
	BSelect([name], \env, args -> fn(env, args[0]));
}
BSelectdd(name1 : string, name2 : string, fn : (FabricEnv, value1 : double, value2 : double) -> Fabric) -> Fabric {
	BSelect([name1, name2], \env, args -> fn(env, args[0], args[1]));
}

BSelects(name : string, fn : (FabricEnv, value : string) -> Fabric) -> Fabric {
	BSelect([name], \env, args -> fn(env, args[0]));
}
BSelectss(name1 : string, name2 : string, fn : (FabricEnv, value1 : string, value2 : string) -> Fabric) -> Fabric {
	BSelect([name1, name2], \env, args -> fn(env, args[0], args[1]));
}

BFormula(target : string, from : [string], fn : (FabricEnv, values : [flow]) -> flow) -> Fabric {
	BSelect(from, \env, args -> {
		val = fn(env, args);
		setFab(env, target, val);
		BEmpty();
	})
}
