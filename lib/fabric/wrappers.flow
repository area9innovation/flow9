import fabric/env;

export {
	BEmpty() -> Fabric;

	BSelect1(name1 : string, fn : (FabricEnv, value1 : flow) -> Fabric) -> Fabric;
	BSelect2(name1 : string, name2 : string, fn : (FabricEnv, value1 : flow, value2 : flow) -> Fabric) -> Fabric;
	BSelect3(name1 : string, name2 : string, name3 : string, fn : (FabricEnv, value1 : flow, value2 : flow, value3 : flow) -> Fabric) -> Fabric;

	BLines(items : [Fabric]) -> Fabric;
	BLinesX(items : [Fabric], style : BContainerStyle) -> Fabric;
	BCols(items : [Fabric]) -> Fabric;
	BColsX(items : [Fabric], style : BContainerStyle) -> Fabric;
	BBCols(items : [Fabric]) -> Fabric;
	BBColsX(items : [Fabric], style : BContainerStyle) -> Fabric;
	BGroup(items : [Fabric]) -> Fabric;
	BGroupX(items : [Fabric], style : BContainerStyle) -> Fabric;

	BText(text : string, style : [MTextStyle]) -> Fabric;
	BTextInput(name : string, style : [MTextInputStyle], state : [MTextInputState]) -> Fabric;
	BIntInput(name : string, style : [MTextInputStyle], state : [MTextInputState]) -> Fabric;
	BDoubleInput(name : string, style : [MTextInputStyle], state : [MTextInputState]) -> Fabric;

	BSlider(name : string, style : [MSliderStyle]) -> Fabric;
	BIntSlider(name : string, style : [MSliderStyle]) -> Fabric;
	BDropDown(name : string, nonSpecified : string, items : [string], style : [MDropDownStyle]) -> Fabric;

	BTextButton(text : string, onClick : (FabricEnv) -> void, style : [MTextButtonStyle], state : [MButtonState]) -> Fabric;
	BIconButton(icon : string, onClick : (FabricEnv) -> void, style : [MIconButtonStyle], state : [MButtonState]) -> Fabric;
}

BEmpty() -> Fabric {
	BMaterial(MEmpty());
}

BSelect1(name : string, fn : (FabricEnv, value1 : flow) -> Fabric) -> Fabric {
	BSelect([name], \env, args -> fn(env, args[0]));
}
BSelect2(name1 : string, name2 : string, fn : (FabricEnv, value1 : flow, value2 : flow) -> Fabric) -> Fabric {
	BSelect([name1, name2], \env, args -> fn(env, args[0], args[1]));
}
BSelect3(name1 : string, name2 : string, name3 : string, fn : (FabricEnv, value1 : flow, value2 : flow, value3 : flow) -> Fabric) -> Fabric {
	BSelect([name1, name2, name3], \env, args -> fn(env, args[0], args[1], args[2]));
}


BLines(items : [Fabric]) -> Fabric {
	BLinesX(items, defBContainer())
}
BLinesX(items : [Fabric], style : BContainerStyle) -> Fabric {
	BContainerX(items, BContainerStyle(style with downwards = true, group = false))
}

BCols(items : [Fabric]) -> Fabric {
	BColsX(items, defBContainer())
}
BColsX(items : [Fabric], style : BContainerStyle) -> Fabric {
	BContainerX(items, BContainerStyle(style with downwards = false, group = false))
}

BBCols(items : [Fabric]) -> Fabric {
	BBColsX(items, defBContainer())
}
BBColsX(items : [Fabric], style : BContainerStyle) -> Fabric {
	BContainerX(items, BContainerStyle(style with downwards = false, group = false, baseline = true))
}

BGroup(items : [Fabric]) -> Fabric {
	BGroupX(items, defBContainer())
}
BGroupX(items : [Fabric], style : BContainerStyle) -> Fabric {
	BContainerX(items, BContainerStyle(style with downwards = false, group = true))
}

BText(text : string, style : [MTextStyle]) -> Fabric {
	BMaterial(MText(text, style))
}

BTextInput(name : string, style : [MTextInputStyle], state : [MTextInputState]) -> Fabric {
	if (name == "") {
		BMaterial(MTextInput(make(""), style, state))
	} else {
		BGetEnv(\env -> {
			value = getOrMakeFabricValue(env, name, "");
			tvalue = make(getValue(value));
			focus = make(false);
			// Set it up so we only update on blur
			mat = MConstruct([
				makeSubscribe(focus, \f -> if (!f) {
					nextDistinct(value, getValue(tvalue));
				}),
				makeSubscribe(value, \t -> {
					nextDistinct(tvalue, t)
				}),
			], MTextInput(tvalue, style, [TTextInputFocus(focus)]));
			BMaterial(mat)
		})
	}
}
BIntInput(name : string, style : [MTextInputStyle], state : [MTextInputState]) -> Fabric {
	BGetEnv(\env -> {
		value = getOrMakeFabricValue(env, name, 0);
		tvalue = make(i2s(getValue(value)));

		focus = make(false);
		// Set it up so we only update on blur
		mat = MConstruct([
			makeSubscribe(focus, \f -> if (!f) {
				nextDistinct(value, s2i(getValue(tvalue)));
			}),
			makeSubscribe(value, \t -> {
				nextDistinct(tvalue, i2s(t))
			}),
		], MTextInput(tvalue, style, [TTextInputFocus(focus)]));
		BMaterial(mat)
	});
}
BDoubleInput(name : string, style : [MTextInputStyle], state : [MTextInputState]) -> Fabric {
	BGetEnv(\env -> {
		value = getOrMakeFabricValue(env, name, 0.0);
		tvalue = make(d2s(getValue(value)));
		focus = make(false);
		// Set it up so we only update on blur
		mat = MConstruct([
			makeSubscribe(focus, \f -> if (!f) {
				nextDistinct(value, s2d(getValue(tvalue)));
			}),
			makeSubscribe(value, \t -> {
				nextDistinct(tvalue, d2s(t))
			}),
		], MTextInput(tvalue, style, [TTextInputFocus(focus)]));
		BMaterial(mat)
	});
}

BSlider(name : string, style : [MSliderStyle]) -> Fabric {
	BGetEnv(\env -> {
		value = getOrMakeFabricValue(env, name, 0.0);
		BMaterial(MSlider(value, style))
	})
}

BIntSlider(name : string, style : [MSliderStyle]) -> Fabric {
	BGetEnv(\env -> {
		value = getOrMakeFabricValue(env, name, 0);
		dvalue = make(i2d(getValue(value)));
		BMaterial(
			MConstruct([\ -> bidirectionalLink(value, dvalue, i2d, round)],
				MSlider(dvalue, style)
			)
		)
	});
}

BDropDown(name : string, nonSpecified : string, items : [string], style : [MDropDownStyle]) -> Fabric {
	BGetEnv(\env -> {
		value = getOrMakeFabricValue(env, name, -1);
		BMaterial(MDropDown(value, nonSpecified, items, style))
	})
}

BTextButton(text : string, onClick : (FabricEnv) -> void, style : [MTextButtonStyle], state : [MButtonState]) -> Fabric {
	BGetEnv(\env -> {
		BMaterial(MTextButton(text, \ -> {
			onClick(env)
		}, style, state))
	})
}

BIconButton(icon : string, onClick : (FabricEnv) -> void, style : [MIconButtonStyle], state : [MButtonState]) -> Fabric {
	BGetEnv(\env -> {
		BMaterial(MIconButton(icon, \ -> {
			onClick(env)
		}, style, state))
	})
}