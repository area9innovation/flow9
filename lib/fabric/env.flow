import fabric/fabric_types;

export {
	makeFabricEnv() -> FabricEnv;
	innerFabricEnv(env : FabricEnv) -> FabricEnv;

	getFabM(env : FabricEnv, name : string) -> Maybe<flow>;
	getFab(env : FabricEnv, name : string, def : flow) -> flow;
	getFabDynM(env : FabricEnv, name : string) -> Maybe<DynamicBehaviour<flow>>;
	getFabDyn(env : FabricEnv, name : string, def : flow) -> DynamicBehaviour<flow>;

	setFab(env : FabricEnv, name : string, value : flow) -> void;

	defineFab(env : FabricEnv, name : string, value : DynamicBehaviour<flow>) -> void;
	getOrMakeFabricValue(env : FabricEnv, name : string, value : flow) -> DynamicBehaviour<flow>;
	captureFabricValue(env : FabricEnv, name : string, value : flow) -> DynamicBehaviour<flow>;

	// Helpers
	getFabricBoolValue(env : FabricEnv, name : string) -> bool;
	getFabricIntValue(env : FabricEnv, name : string) -> int;
	getFabricStringValue(env : FabricEnv, name : string) -> string;
}

makeFabricEnv() -> FabricEnv {
	FabricEnv(None(), ref makeTree());
}

innerFabricEnv(env : FabricEnv) -> FabricEnv {
	FabricEnv(Some(env), ref makeTree())
}

getFabDynM(env : FabricEnv, name : string) -> Maybe<DynamicBehaviour<flow>> {
	mvalue = lookupTree(^(env.values), name);
	mvalue ?? {
		Some(mvalue);
	} : {
		switch (env.parent) {
			None(): None();
			Some(p): getFabDynM(p, name);
		}
	}
}

getFabDyn(env : FabricEnv, name : string, def : flow) -> DynamicBehaviour<flow> {
	mvalue = lookupTree(^(env.values), name);
	mvalue ?? {
		mvalue;
	} : {
		switch (env.parent) {
			None(): {
				println("Error: Unknown " + name);
				make(def);
			}
			Some(p): getFabDyn(p, name, def);
		}
	}
}


getFabM(env : FabricEnv, name : string) -> Maybe<flow> {
	mvalue = getFabDynM(env, name);
	mvalue ?? {
		Some(getValue(mvalue));
	} : mvalue
}

getFab(env : FabricEnv, name : string, def : flow) -> flow {
	mvalue = getFabM(env, name);
	mvalue ?? {
		mvalue
	} : {
		println("Error: Unknown " + name);
		def;
	}
}

getFabricBoolValue(env : FabricEnv, name : string) -> bool {
	value = getFab(env, name, false);
	if (value == true || value == false) value
	else {
		println("Error: " + name + " is not a bool: " + toString(value));
		false
	}
}

getFabricIntValue(env : FabricEnv, name : string) -> int {
	getFab(env, name, 0);
}

getFabricStringValue(env : FabricEnv, name : string) -> string {
	getFab(env, name, "");
}

getOrMakeFabricValue(env : FabricEnv, name : string, def : flow) -> DynamicBehaviour<flow> {
	mvalue = getFabDynM(env, name);
	mvalue ?? {
		mvalue;
	} : {
		dyn = make(def);
		env.values := setTree(^(env.values), name, dyn);
		dyn;
	}
}

captureFabricValue(env : FabricEnv, name : string, value : flow) -> DynamicBehaviour<flow> {
	mvalue = getFabDynM(env, name);
	mvalue ?? {
		println("Updating " + name + " to " + toString(value) + ", was " + toString(getValue(mvalue)));
		nextDistinct(mvalue, value);
		mvalue
	} : {
		dyn = make(value);
		env.values := setTree(^(env.values), name, dyn);
		dyn;
	}
}

defineFab(env : FabricEnv, name : string, value : DynamicBehaviour<flow>) -> void {
	println("Setting " + name + " to " + toString(value));
	env.values := setTree(^(env.values), name, value);
}

setFab(env : FabricEnv, name : string, value : flow) -> void {
	mvalue = getFabDynM(env, name);
	switch (mvalue) {
		None(): {
			println("Error: Unknown value to next: " + name);
		}
		Some(v): {
			println("Next " + name + " to " + toString(value) + ", was " + toString(getValue(v)));
			nextDistinct(v, value);
		}
	}
}
