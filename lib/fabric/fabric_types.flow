import material/material;
import material/material_dialog;

export {
	Fabric ::= BLet, BCapture, BSelect, BContainerX, BTableX, BScroll, BMaterial, BGetEnv, BBidirectional, BDialog, BTimer, 
		BClickable, BCheckBox, BInteractive, BComposite;

	// Define a FRP value in this scope
	BLet(name : string, value : flow, scope : Fabric);
	// Update the given FRP value if it exists. If not, introduce it in this scope
	BCapture(name : string, value : flow, scope : Fabric);
	// Monitor the given FRP values, and produce a dynamic UI from those
	BSelect(names : [string], fn : (FabricEnv, values : [flow]) -> Fabric);
	// Set up a relation betweem these two FRP values
	BBidirectional(a : string, b : string, a2b : (flow) -> flow, b2a : (flow) -> flow);

	// Generalized container. See wrappers.flow for BLines and friends
	BContainerX(items : [Fabric], style : BContainerStyle);
		BContainerStyle(downwards : bool, group : bool, baseline : bool, padding : BEdges, margin : BEdges);
			BEdges(left : double, top : double, right : double, bottom : double);

		defBContainer() -> BContainerStyle;
	BTableX(rows : [[Fabric]], style : BTableStyle);
		BTableStyle();

	// In Fabric, we always go full available, since in HTML, there are no fillers
	BScroll(content : Fabric, style : [MScrollStyle]);

	// Ability to put any Material directly into Fabric
	BMaterial(material : Material);

	// Grab the environment at this point
	BGetEnv(fn : (FabricEnv) -> Fabric);

	// Update the given name every deltaS seconds as a timer
	BTimer(name : string, deltaS : double);

	// Open this dialog when the name is true
	BDialog(name : string, contents : Fabric, style : [MDialogStyle]);

	BClickable(contents : Fabric, onClick : () -> void);
	BCheckBox(name : string, caption : Fabric, style : [MCheckableStyle]);
	BInteractive(interactivity: [TInteractivity], contents : Fabric);

	// Povide a way to break a value into smaller parts, and the recombine as they are updated
	BComposite(name : string, 
		splitFn : (FabricEnv, value : flow) -> [flow], 
		renderFn : (FabricEnv, [flow]) -> Fabric, 
		mergeFn : (FabricEnv, [flow]) -> flow
	);

	// The environment is a hierarchy of FRP values
	FabricEnv(parent : Maybe<FabricEnv>, values : ref Tree<string, DynamicBehaviour<flow>>);
}

defBContainer() -> BContainerStyle {
	z = BEdges(0.0, 0.0, 0.0, 0.0);
	BContainerStyle(true, false, false, z, z)
}
