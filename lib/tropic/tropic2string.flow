import tropic/tropic;

export {
	tropic2string(t : Tropic) -> string;
}

tropic2string(t : Tropic) -> string {
	doTropic2string(t, "");
}

doTropic2string(t : Tropic, indent : string) -> string {
	ni = indent + "  ";
	fn = \ -> toString(t);
	rec = \tr -> "\n" + indent + doTropic2string(tr, ni);
	switch (t : Tropic) {
		TEmpty(): fn();
		TText(tx, __): fn();
		TGraphics(__, __): fn();
		TPicture(__, __): fn();
		TBorder(l, to, r, b, tr): {
			"TBorder(" + d2s(l) + "," + d2s(to) + "," + d2s(r) + "," + d2s(b) + "," + rec(tr) + ")";
		}
		TTranslate(p, tr): {
			"TTranslate(" + transform2string(p) + ", " + rec(tr) + ")";
		}
		TScale(f, tr): {
			"TScale(" + transform2string(f) + ", " + rec(tr) + ")";
		}
		TRotate(r, tr): {
			"TRotate(" + transform2string(r) + ", " + rec(tr) + ")";
		}
		TAlpha(a, tr): {
			"TAlpha(" + rec(tr) + ")";
		}
		TVisible(v, tr): {
			"TVisible(" + rec(tr) + ")";
		}
		TMask(t1, t2): {
			"TMask(" + rec(t1) + "," + rec(t2) + ")";
		}
		TFilter(f, tr): {
			"TFilter(" + rec(tr) + ")";
		}
		TCursor(c, tr): {
			"TCursor(" + rec(tr) + ")";
		}
		TCrop(tl, wh, tr): {
			"TCrop(" + rec(tr) + ")";
		}
		TCropSize(wh, tr): {
			"TCropSize(" + rec(wh) + "," + rec(tr) + ")";
		}
		TInteractive(ia, tr): {
			"TInteractive(" + rec(tr) + ")";
		}
		TAccess(p, tr): {
			"TAccess(" + rec(tr) + ")";
		}

		TForm(__): "TForm";
		TFormIn(f, tr): {
			"TFormIn(" + rec(tr) + ")";
		}

		TTag(tag, tr): {
			"TTag(" + i2s(tag) +", " + rec(tr) + ")";
		}
		TTag2(tag, tr): {
			"TTag2(" + rec(tr) + ")";
		}
		TCase(sz, cs): {
			"TCase([" + fold(sz, "", \acc, s -> acc + rec(s)) + "], [" + fold(cs, "", \acc, s -> acc + rec(s)) + "])";
		}
		TConstruct(cs, tr): {
			"TConstruct(" + rec(tr) + ")";
		}
		TDispose(ds, tr): {
			"TDispose(" + rec(tr) + ")";
		}
		TMutable(m): "TMutable(" + rec(fgetValue(m)) + ")";
		TIf(b, th, el): {
			"TIf(" + transform2string(b) + "," + rec(th) + "," + rec(el) + ")";
		}
		TGroup2(t1, t2): {
			"TGroup2(" + rec(t1) + "," + rec(t2) + ")";
		}
		TSubtractGroup2(t1, t2): {
			"TSubtractGroup2(" + rec(t1) + "," + rec(t2) + ")";
		}
		TMinimumGroup2(t1, t2): {
			"TMinimumGroup2(" + rec(t1) + "," + rec(t2) + ")";
		}
		TCols2(t1, t2): {
			"TCols2(" + rec(t1) + "," + rec(t2) + ")";
		}
		TBaselineCols2(t1, t2): {
			"TBaselineCols2(" + rec(t1) + "," + rec(t2) + ")";
		}
		TLines2(t1, t2): {
			"TLines2(" + rec(t1) + "," + rec(t2) + ")";
		}
		TRounded(nw, ne, lw, le, style, size): {
			"TRounded(" + rec(size) + ")";
		}
		TAvailable(box, parent): {
			"TAvailable(" + rec(box) + "," + rec(parent) + ")";
		}
/*
			ob = optimizeTropic(box);
			op = optimizeTropic(parent);
			if (ob == box && op == parent) t
			else TAvailable(ob, op);

		}
		TZoom(box, target, keep): {
			ob = optimizeTropic(box);
			ot = optimizeTropic(target);
			if (ob == box && ot == target) t
			else TZoom(ob, ot, keep);
		}
		TZoomFill(b): {
			ob = optimizeTropic(b);
			if (ob == b) t
			else TZoomFill(ob);
		}
		TRounded(nw, ne, lw, le, style, size): {
			os = optimizeTropic(size);
			if (os == size) t
			else TRounded(nw, ne, lw, le, style, os);
		}*/
		TLet(name, value, scope): {
			"TLet(" + name + "=" + rec(value) + " in " + rec(scope) + ")";
		}
		TNamespace(tr): {
			"TNamespace(" + rec(tr) + ")";
		}
		TDebug(c, tr): {
			"TDebug(" + formatHex(c) + ", " + rec(tr) + ")";
		}
		TSize(box, size): {
			"TSize(" + rec(box) + "," + rec(size) + ")";
		}
		TTweak(style, content, size): {
			"TTweak(" + rec(content) + "," + rec(size) + ")";
		}
		TSizeOf(size): {
			"TSizeOf(" + rec(size) + ")";
		}
		// TZoomFill(body): {
		// 	"TZoomFill(" + rec(body) + ")";
		// }
		TShift(box, size): {
			"TShift(" + rec(box) + "," + rec(size) + ")";
		}
		TDisplay(__): fn();
		TGhost(__): fn();
		TGhostMin(__): fn();
		TFillX(): fn();
		TFillY(): fn();
		TAttach(ghost, __): "TAttach(" + rec(ghost) + ", <fn>)";
		TPositionScale(pos, tr): {
			"TPositionScale(" + transform2string(pos) + ", " + rec(tr) + ")";
		}
		TransformTAcc(__): {
			"TransformTAcc()";
		}
		TBaselineOffset(offs, tr): {
			"TBaselineOffset(" + rec(tr) + ")";
		}
		/*
		TCssBlock(st, tr): {
			ot = optimizeTropic(tr);
			if (ot == tr) t
			else TCssBlock(st, ot)
		}
*/
		default: t.structname + " tropic2string TODO";
	}
}
