
import tropic/tropic_paragraph_preparation;
import tropic/tropictransforms;
import form/paragraph3;
import text/bidi_text;

export {
	TRenderParagraph(
		words : ref [TParaWord],
		s : [ParagraphStyle],
		alignWidthM : Maybe<DynamicBehaviour<double>>
	) -> TDynamicParagraph;

	TDynamicParagraph(
		tropic : Tropic,
		addWords : (idx : int, newWords : [TParaWord]) -> void,
		removeWords : (start : int, count : int, reflow : bool) -> void
	);

	commonWordConstructor(
		w : GeneralWrapElement,
		tr : Tropic,
		id : int,
		style : [CharacterStyle],
		inspectorM : Maybe<ParaElementInspector>
	) -> TParaWord;
	inspectWordView(tr : Tropic, inspector : ParaElementInspector) -> Tropic;
	getTParaWordText(w: TParaWord) -> string;
}

TRenderParagraph(
	words : ref [TParaWord],
	s : [ParagraphStyle],
	alignWidthBM : Maybe<DynamicBehaviour<double>>
) -> TDynamicParagraph {

	alignment : ParaLineAlignment = extractParaLineAlignment(s);
	genIndent = extractStruct(s, GeneralIndent(0.0)).indent;
	needIndent = genIndent != 0.0;

	interlineSpacing = extractStruct(s, InterlineSpacing(0.0)).d;

	tightWidth = contains(s, TightWidth());

	fill = filtermap(s, \st -> switch (st) {
		Fill(__): Some(st);
		FillOpacity(__): Some(st);
		default: None();
	});

	topLineBaseline = contains(s, TopLineBaseline());

	indent = extractStruct(s, FirstLineIndent(0.0)).indent;

	isSingleLine = containsStruct(s, ParagraphSingleLine());
	linesCountB = extractStruct(s, ParagraphLinesCount(make(0))).count;

	awB = make(0.0);
	update = make(0);
	paragraphBorder = extractStruct(s, ParagraphBorder(0.0, 0.0));

	// If there is less or equal then upper limit of dynamic elements, we do not need to postpone updates
	ndynamic = fold(^words, 0, \acc, w -> switch (w.word) {
		NonTextElement() : acc + 1;
		default : acc;
	});
	ndymamicUpper = extractStruct(s, DynamicBlockDelay(getParagraphDynamicBlockDelay())).n;

	stackChanges = make([]);
	initialWords = ref map(^words, \w -> translateWord(w, genIndent));
	paragraphWHB = makeWH();
	paragraphBaselineB = make(0.0);

	contentGroup = TBaseline(paragraphBaselineB, TSize(
		TSized(paragraphWHB),
		TDynamicGroup2(stackChanges, initialWords, TGroupCombiner())
	));
	rtl = isParagraphRtl(s);

	updateFn = \wi, alignWidthM -> {
		// Ignore negative widths
		// It's the safest way to simmulate single line, because reflowParaWords2 does a lot of useful staff.
		w = if (isSingleLine) INF_METRICS else max(0.0, wi);
		paragraphSizeBaselineAndChanges = reflowTParaWords(
			^words, w, indent, tightWidth, alignment, interlineSpacing,
			topLineBaseline, rtl, containsStruct(s, ParagraphMarked()),
			genIndent, linesCountB, alignWidthM
		);
		paragraphSizeAndBaseline = paragraphSizeBaselineAndChanges.metrics;
		// We have to rerender even when lines are identical, at minimum to move things because of potential size changes
		nextDistinct(paragraphWHB, paragraphSizeAndBaseline.first);
		nextDistinct(paragraphBaselineB, paragraphSizeAndBaseline.second);

		// need to update words to show hyphenation point
		changes = paragraphSizeBaselineAndChanges.words;
		iteri(changes.words, \i, word -> {
			index = changes.indexes[i];
			words := concat3(
				subrange(^words, 0, index),
				[word],
				subrange(^words, index + 1, length(^words) - index - 1)
			);
			dynArrayPush(
				stackChanges,
				TGroupReplace(translateWord(word, genIndent), index)
			);
		});
	};

	executeReflow = \ -> updateFn(getValue(awB), maybeMap(alignWidthBM, getValue));

	dynMetricsSubscription = \w -> {
		apply0(make2Subscribe2(
			w.inspector.size,
			w.inspector.baseline,
			\size, ba -> {
				if (ndynamic <= ndymamicUpper) {
					// There is less or equal than upper limit of dynamic elements here, so just update immediately
					executeReflow()
				} else {
					// There are more, so to prevent unnecessary work, delay the update
					nextDistinct(update, 1);
				}
			}
		))
	}

	subscribe2dynWord = \w -> {
		switch (w.word : GeneralWrapElement) {
			NonTextElement() : dynMetricsSubscription(w);
			GeneralDynamicText(__): dynMetricsSubscription(w);
			default: nop;
		}
	}

	dynamicWordsUns = ref [];

	addWords = \index, newWords -> {
		idx = max(min(index, length(^words)), 0);
		iteri(newWords, \i, newWord -> {
			words := insertArray(^words, idx + i, newWord);
			dynamicWordsUns := insertArray(^dynamicWordsUns, idx + i, subscribe2dynWord(newWord));
			dynArrayPush(
				stackChanges,
				TGroupAdd(translateWord(newWord, genIndent), idx + i)
			);
		});
		executeReflow();
	}

	removeWords = \start, count, reflow -> {
		idx = min(start, length(^words) - 1);
		fori(1, count, \__ -> {
			words := removeIndex(^words, idx);
			apply0(elementAt(^dynamicWordsUns, idx, nop));
			dynamicWordsUns := removeIndex(^dynamicWordsUns, idx);
			dynArrayPush(stackChanges, TGroupDelete(idx));
		});
		if (reflow) executeReflow();
	}

	tropic = TConstruct(
		[
			eitherFn(
				alignWidthBM,
				\alignWidthB -> make2Subscribe(awB, alignWidthB, \aw, alw -> updateFn(aw, Some(alw))),
				\ -> makeSubscribe(awB, \aw -> updateFn(aw, None()))
			),
			\-> subscribe(update, \u -> {
				if (u == 1) {
					deferUntilNextFrameRendered(\ -> {
						next(update, 0);
						// Force an update
						executeReflow()
					})
				}
			}),
			\ -> {
				dynamicWordsUns := map(^words, subscribe2dynWord);
				\ -> {
					applyall(^dynamicWordsUns);
					dynamicWordsUns := [];
				}
			}
		],
		TAttachAvailableWidth(
			if (paragraphBorder.top > 0.0 || paragraphBorder.bottom > 0.0) {
				TBorder(0.0, paragraphBorder.top, 0.0, paragraphBorder.bottom, contentGroup);
			} else {
				contentGroup;
			},
			awB
		)
	) |> if (needIndent) {
		if (rtl) TBorderRight(genIndent) else TBorderLeft(genIndent)
	} else {
		idfn
	};
	TDynamicParagraph(tropic, addWords, removeWords);
}

// Introduce a ParaOneWord that group the words together, so that we do not have to worry about joins

commonWordConstructor(
	w : GeneralWrapElement,
	tr : Tropic,
	id : int,
	style : [CharacterStyle],
	inspectorM : Maybe<ParaElementInspector>
) -> TParaWord {
	inspector = either(inspectorM, dummyInspector());
	wordView = inspectWordView(tr, inspector);
	TParaWord(
		w,
		inspector,
		wordView,
		make(id),
		style,
		make(false),
		None()
	);
}

inspectWordView(tr : Tropic, inspector : ParaElementInspector) -> Tropic {
	if (isConstantSizeTropic(tr)) {
		fMetrics = getTropicMetrics(tr);
		nextDistinct(inspector.size, WidthHeight(fMetrics.width, fMetrics.height));
		nextDistinct(inspector.baseline, fMetrics.baseline);
		tr;
	} else {
		TInspect([ISize(inspector.size), IBaseline(inspector.baseline)], tr);
	}
}


spaceStr : string = " ";
zeroSpaceStr : string = "\u200b";

TParaLine(words : [TParaWord], indent : double);
// To remember changed in reflowTParaWords words and thier indexes
WordsAndIndexes(words : [TParaWord], indexes : [int]);
// Return type for reflowTParaWordsRec
LinesAndWords(lines : [TParaLine], words : WordsAndIndexes);
// Return type for reflowTParaWords
metricsAndWords(metrics : Pair<WidthHeight, double>, words : WordsAndIndexes);

// Given a bunch of words, a constant amount of width for paragraph, a first-line indent, this does the line breaking
reflowTParaWords(
	words : [TParaWord],
	availableParaWidth : double,
	firstLineIndent : double,
	tightWidth : bool,
	alignment: ParaLineAlignment,
	interlineSpacing : double,
	topLineBaseline : bool,
	rtl : bool,
	isMarked : bool,
	generalIndent : double,
	linesCountB : DynamicBehaviour<int>,
	alignWidthM : Maybe<double>
) -> metricsAndWords {
	firstLineWidth = availableParaWidth - getLineIndent(firstLineIndent, 0);
	textAndChanges = reflowTParaWordsRec(
		words,
		0,
		firstLineWidth,
		firstLineWidth,
		[],
		[],
		firstLineIndent,
		isMarked,
		WordsAndIndexes([], [])
	);
	text = textAndChanges.lines;
	paraLines = if (rtl)
		zipWith(
			text,
			reflowTextToBiDi(map(text, \l -> l.words), isTParaWordEmpty, getTParaWordText, setTParaWordText, idfn, rtl),
			\l, ws -> TParaLine(ws, l.indent),
		)
	else text;

	nextDistinct(linesCountB, length(text));

	widthAndBaseline = TAlignParaLines(
		availableParaWidth,
		paraLines,
		tightWidth,
		alignment,
		interlineSpacing,
		topLineBaseline,
		rtl,
		isMarked,
		generalIndent,
		alignWidthM
	);

	metricsAndWords(widthAndBaseline, textAndChanges.words);
}

// here availableWidth is an amount of width for current line
reflowTParaWordsRec(
	words : [TParaWord],
	currentWordIndex : int,
	availableWidth : double,
	remaining : double,
	currentWords : [TParaWord],
	lines : [TParaLine],
	paraIndent : double,
	isMarked : bool,
	wordsChanges : WordsAndIndexes
) -> LinesAndWords {
	addLine = \cw, indent -> {
		if (cw != []) arrayPush(lines, TParaLine(cw, indent)) else lines;
	}

	detachWord = \w : TParaWord, detach : bool -> {
		nextDistinct(w.inspector.detached, detach);
	}

	lineIndex = length(lines);
	lineIndent = getLineIndent(paraIndent, lineIndex);
	nextLineWidth = availableWidth + lineIndent - getLineIndent(paraIndent, lineIndex + 1);

	if (words == []) {
		LinesAndWords(addLine(currentWords, lineIndent), wordsChanges)
	} else {
		word = words[0];
		detachWord(word, false);
		rest = tailFrom(words, 1);
		nextWordIndex = currentWordIndex + 1;

		getWordWidth = \word1 -> getValue(word1.inspector.size).width;

		switch (word.word : GeneralWrapElement) {
			NewLine(): {
				reflowTParaWordsRec(
					rest,
					nextWordIndex,
					nextLineWidth,
					nextLineWidth,
					[],
					addLine(currentWords, lineIndent),
					paraIndent,
					false,
					wordsChanges
				);
			}
			GeneralLinePart(first, mid, end): {

				makeLinePartWord = \txt : string -> {
					newView = inspectWordView(TText(txt, applyAlphabetStyles(detectAlphabet(txt), word.style)), word.inspector);
					TParaWord(word with ghostView = newView);
				};
				width = getWordWidth(word);
				nextWordWidth = if (rest != []) getWordWidth(rest[0]) else 0.0;

				addChange = \paraword -> {
					// Add change only if the word really changed
					if (paraword.ghostView != word.ghostView) {
						WordsAndIndexes(
							arrayPush(wordsChanges.words, paraword),
							arrayPush(wordsChanges.indexes, currentWordIndex)
						)
					} else wordsChanges
				};

				if (currentWords == []) {
					// If it is the first item on the line
					paraword = makeLinePartWord(first);
					reflowTParaWordsRec(
						rest,
						nextWordIndex,
						availableWidth,
						remaining - width,
						arrayPush(currentWords, paraword),
						lines,
						paraIndent,
						false,
						addChange(paraword)
					);
				} else if (width + nextWordWidth < remaining) {
					// If it is the middle item on the line
					paraword = makeLinePartWord(mid);
					reflowTParaWordsRec(
						rest,
						nextWordIndex,
						availableWidth,
						remaining - width,
						arrayPush(currentWords, paraword),
						lines,
						paraIndent,
						false,
						addChange(paraword)
					);
				} else {
					// If it is the last item on the line
					paraword = makeLinePartWord(end);
					reflowTParaWordsRec(
						rest,
						nextWordIndex,
						nextLineWidth,
						nextLineWidth,
						[],
						addLine(arrayPush(currentWords, paraword), lineIndent),
						paraIndent,
						false,
						addChange(paraword)
					);
				}
			}
			GeneralSpace(__, __, __): {
				// LSTSBU-454
				// Spaces at the beginning of a line had been dropped before, but this block has been removed in order to have identical view in wigi editor and preview
				width = getWordWidth(word);
				if (width < remaining) {
					reflowTParaWordsRec(
						rest,
						nextWordIndex,
						availableWidth,
						remaining - width,
						arrayPush(currentWords, word),
						lines,
						paraIndent,
						false,
						wordsChanges
					);
				} else {
					detachWord(word, true);
					reflowTParaWordsRec(
						rest,
						nextWordIndex,
						nextLineWidth,
						nextLineWidth,
						[],
						addLine(currentWords, lineIndent),
						paraIndent,
						false,
						wordsChanges
					);
				}
			}
			default: {
				width = ref 0.0;
				getWordView = \w -> w.ghostView;

				form = getWordView(word);

				// Number of words that should be on the same line
				wordsCount = if (keepWordsTogether(form)) {
					iteriUntil(words, \i, _word -> {
						switch (_word.word) {
							NewLine(): true;
							GeneralSpace(__, __, __): true;
							GeneralLinePart(__, __, __): true;
							default: {
								f = getWordView(_word);
								// it is no use to make line with zero-width content, so we continue counting if the width is 0
								// For example, single WigiRecursive in line get surrounded by WigiText("",[]), WigiRecursive, WigiText("",[])
								// such construction becomes [Empty, form, Empty] and we should keep them on the same line
								if ((isMarked && i <= 1) || keepWordsTogether(f) || ^width == 0.0) {
									width := ^width + getWordWidth(_word);
									false;
								} else {
									true
								}
							};
						};
					});
				} else {
					width := getWordWidth(word);
					1;
				};

				if (^width <= remaining || currentWords == []) {
					_words = take(words, wordsCount);
					_rest = tailFrom(words, wordsCount);

					newCurrentWords = concat(currentWords, _words);
					reflowTParaWordsRec(
						_rest,
						currentWordIndex + wordsCount,
						availableWidth,
						remaining - ^width,
						newCurrentWords,
						lines,
						paraIndent,
						false,
						wordsChanges
					);
				} else {
					reflowTParaWordsRec(
						words,
						currentWordIndex,
						nextLineWidth,
						nextLineWidth,
						[],
						addLine(currentWords, lineIndent),
						paraIndent,
						false,
						wordsChanges
					);
				}
			}
		}
	}
}

// This function gets the form and decides, should the next form kept together in the same line or should it be placed on the next line
keepWordsTogether(tr : Tropic) -> bool {
	switch (tr) {
		TEmpty(): true;
		TText(t, s): t !=  spaceStr;
		TCols2(left, right): keepWordsTogether(left) && keepWordsTogether(right);
		TBaselineCols2(left, right): keepWordsTogether(left) && keepWordsTogether(right);
		TBaselineLines2(top, bottom): keepWordsTogether(top) && keepWordsTogether(bottom);
		TLines2(up, down): keepWordsTogether(up) && keepWordsTogether(down);
		TGroup2(down, up): keepWordsTogether(up) && keepWordsTogether(down);
		TMinimumGroup2(down, up): keepWordsTogether(up) && keepWordsTogether(down);
		TScale(fac, t): keepWordsTogether(t);
		TConstruct(__, t): keepWordsTogether(t);
		TCrop(__, size, t): keepWordsTogether(t);
		TTag(__, t): keepWordsTogether(t);
		TFormIn(f, b): keepFormTogether(f);
		TForm(f): keepFormTogether(f);
		TFormAvailable(f, __) : keepFormTogether(f); // mos likely this is recursive, so we need to keep forms together
		TTranslate(__, t): keepWordsTogether(t);
		TRotate(__, t): keepWordsTogether(t);
		TInteractive(__, t): keepWordsTogether(t);
		TAccess(__, t): keepWordsTogether(t);
		TAlpha(__, t): keepWordsTogether(t);
		TCursor(__, t): keepWordsTogether(t);
		TCropSize(size, t): keepWordsTogether(size);
		TSize(size, t): keepWordsTogether(t);
		TDispose(__, t): keepWordsTogether(t);
		TRounded(__, __, __, __, __, t): keepWordsTogether(t);
		TBorder(left, top, right, bottom, t): keepWordsTogether(t);
		TSubtractGroup2(t1, t2): keepWordsTogether(t1) && keepWordsTogether(t2);
		TTweak(style, content, s): false;
		TAttach(ghost, fn): false;
		TFilter(__, t): keepWordsTogether(t);
		TDebug(__, t): keepWordsTogether(t);
		TransformTAcc(__) : false;
		TInspect(__, f) : keepWordsTogether(f);
		default : true;
	}
}

TParaLineAcc(width : double, y : double, baseline : double);

TAlignParaLines(
	availableWidth : double,
	lines : [TParaLine],
	tightWidth : bool,
	alignment: ParaLineAlignment,
	interlineSpacing : double,
	topLineBaseline : bool,
	rtl : bool,
	isMarked : bool,
	generalIndent : double,
	alignWidthM : Maybe<double>
) -> Pair<WidthHeight, double> {
	lasti = length(lines) - 1;

	a : TParaLineAcc = foldi(lines, TParaLineAcc(0.0, 0.0, 0.0), \i : int, acc : TParaLineAcc, line : TParaLine -> {
		// TODO: IF the line ends with NewLine (which we do not track here), we should consider it a last line and not justify
		lastLine = i == lasti;
		// On the last line, we do not justify.
		// Also if the line is single with TightWidth, any alignment is equal to StartAlign
		lineAlignment =
			if (alignment == Justify() && lastLine) {
				StartAlign()
			} else {
				alignment;
			}
		f = TRenderLine(
			acc.y, line.words, availableWidth,
			lineAlignment, line.indent, generalIndent,
			i, rtl, isMarked, alignWidthM
		);
		nwidth = max(acc.width, f.width);
		// For interline spacing, it turns out that the old paragraph had crazy behaviour, so we have to double it
		// to prevent especially label games with explicitly placed things from breaking - REMOVED, NOT NECESSARY
		nheight = acc.y + f.height + if (lastLine) 0.0 else interlineSpacing;
		nbaseline = f.baseline;
		TParaLineAcc(
			nwidth,
			nheight,
			if (i == 0 || !topLineBaseline) nbaseline else acc.baseline
		);
	});
	Pair(WidthHeight(if (tightWidth) a.width else max(availableWidth, a.width), a.y), a.baseline);
}

TParaLineResult(width : double, height : double, baseline : double);

// Aligns all elements to the baseline, as well as calculates the height and the baseline
// Send out the result, width, height
TRenderLine(
	y : double,
	words : [TParaWord],
	width : double,
	alignment : ParaLineAlignment,
	lineIndent: double,
	generalIndent : double,
	lineNumber : int,
	rtl : bool,
	isMarked : bool,
	alignWidthM : Maybe<double>
) -> TParaLineResult {
	// styles = map(optimizedLine, \p -> lookupTreeDef(interactiveStyles, getValue(p.id), []));
	inspectors = map(words, \p -> p.inspector);
	lineWidth = lineIndent + fold(inspectors, 0.0, \ac, m -> ac + getValue(m.size).width); // TODO: This is not required in TightWidth and LeftAlign alignment cases. Just use p.first in resultWidth instead
	lineAsc = foldi(inspectors, 0.0, \i, ac, m -> {
		max(ac, getValue(m.baseline));
	});

	lineHeight = foldi(inspectors, 0.0, \i, ac, m ->
		max(ac, getValue(m.size).height + lineAsc - getValue(m.baseline))
	);

	// Alignment offset
	alignWidth = either(alignWidthM, width);
	startOffset = if (rtl) max(0.0, alignWidth - lineWidth) else 0.;
	endOffset = if (rtl) 0.0 else max(0., alignWidth - lineWidth);
	alignmentOffset = ref switch (alignment : ParaLineAlignment) {
		LeftAlign(): if (rtl) endOffset else startOffset;
		RightAlign(): if (rtl) startOffset else endOffset;
		CenterAlign(): max(0.0, (alignWidth - lineWidth) / 2.0);
		StartAlign(): startOffset;
		EndAlign(): endOffset;
		Justify(): 0.0;
	} + (if (rtl) 0. else lineIndent);

	// Inter-word spacing for justification
	interWord = if (alignment == Justify() && length(inspectors) > 1) {
		nwords = length(inspectors);
		remaining = alignWidth - lineWidth;
		min(10.0, remaining / i2d(nwords - 1));
	} else 0.0;

	// The width and the individual forms
	iteri(inspectors, \i : int, inspector -> {
		elemWidth = getValue(inspector.size).width;
		elemHeight = getValue(inspector.size).height;
		dy = eitherMap(
			words[i].scriptM,
			\script -> switch(script) {
				ParaElementSuperscript() : -1.0;
				ParaElementSubscript() : lineAsc - getValue(inspector.baseline) / 2.0;
			},
			lineAsc - getValue(inspector.baseline)
		);
		yOffset = y + dy;
		nextDistinct(inspector.y, yOffset);
		nextDistinct(inspector.x, ^alignmentOffset + generalIndent);
		nextDistinct(inspector.lineHeight, lineHeight);
		nextDistinct(inspector.lineNumber, lineNumber);
		justifyOffset = if (isMarked && i == 0 && lineNumber == 0) 0.0 else interWord;
		alignmentOffset := ^alignmentOffset + if (elemWidth > 0.0) elemWidth + justifyOffset else 0.0;
	});
	TParaLineResult(lineWidth, lineHeight, y + lineAsc);
}

extractStyleForRectangle(style : [TCharacterStyle]) -> [GraphicsStyle] {
	color = extractStruct(style, BackgroundFill(0)).color;
	opacity = extractStruct(style, BackgroundFillOpacity(0.0)).opacity;
	[Fill(color), FillOpacity(opacity)]
}

translateWord(word : TParaWord, genIndent : double) -> Tropic {
	TTranslate(
		fpoint(fsubtract(word.inspector.x, const(genIndent)), word.inspector.y),
		word.ghostView
	);
}

isTParaWordEmpty(w: TParaWord) -> bool {
	switch(w.word) {
		GeneralText(t): t == "";
		GeneralDynamicText(t) : t == "";
		default: false;
	}
}

getTParaWordText(w: TParaWord) -> string {
	switch(w.word) {
		GeneralText(t): t;
		GeneralDynamicText(t) : t;
		default: "";
	}
}

setTParaWordText(w: TParaWord, t: string) -> TParaWord {
	switch(w.word) {
		GeneralText(__): {
			view = inspectWordView(TText(t, applyAlphabetStyles(detectAlphabet(t), w.style)), w.inspector);
			TParaWord(w with ghostView = view);
		}
		GeneralDynamicText(__): {
			view = inspectWordView(TText(t, applyAlphabetStyles(detectAlphabet(t), w.style)), w.inspector);
			TParaWord(w with ghostView = view);
		}
		default: w;
	};
}
