import tropic/tropic_gui;

export {
	// Makes tropic metrics constant (or only width or height)
	// Useful in situations when you know that tropic doesn't change in size but has dynamic forms inside
	makeTropicConstant(width : Maybe<double>, height : Maybe<double>) -> (Tropic) -> Tropic;
	makeTropicConstantWidth(width : Maybe<double>) -> (Tropic) -> Tropic;
	makeTropicConstantHeight(height : Maybe<double>) -> (Tropic) -> Tropic;
	// Same as functions above, only takes defWidth or defHeight if corresponding metrics of t : Tropic are zero.
	makeTropicConstantDef(defWidth : double, defHeight : double) -> (Tropic) -> Tropic;
	makeTropicConstantWidthDef(defWidth : double) -> (Tropic) -> Tropic;
	makeTropicConstantHeightDef(defHeight : double) -> (Tropic) -> Tropic;
	// Makes width or height constant if they are > 0;
	makeTropicConstant2(width : double, height : double) -> (Tropic) -> Tropic;

	tropicConstantEnabled = ref true;
}

makeTropicConstant(width : Maybe<double>, height : Maybe<double>) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t -> TransformTAcc(\t2a, pi, ss, mo -> {
			bf = t2a(t, pi, ss, mo);

			wd =
				eitherFn(
					width,
					\wd ->
						if (wd >= 0.)
							const(wd)
						else
							bf.metrics.width,
					\ ->
						bf.metrics.width |> fgetValue |> const
				);
			xConst = either(width, 0.) >= 0.;

			hgt =
				eitherFn(
					height,
					\hgt ->
						if (hgt >= 0.)
							const(hgt)
						else
							bf.metrics.height,
					\ ->
						bf.metrics.height |> fgetValue |> const
				);
			yConst = either(height, 0.) >= 0.;

			TAcc(
				bf.form,
				TFormMetrics(
					wd,
					hgt,
					bf.metrics.baseline |> fgetValue |> const
				),
				if (xConst) wd else bf.minWidth,
				if (yConst) hgt else bf.minHeight,
				if (xConst) wd else bf.maxWidth,
				if (yConst) hgt else bf.maxHeight,
				if (xConst) zero else bf.xFillers,
				if (yConst) zero else bf.yFillers,
				bf.addFillers,
				xConst,
				yConst,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantDef(defWidth : double, defHeight : double) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t -> TransformTAcc2(\t2a -> {
			bf = t |> t2a;
			wd = bf.metrics.width |> fgetValue |> (\wd -> if (wd > 0.) wd else defWidth) |> const;
			hgt = bf.metrics.height |> fgetValue |> (\hgt -> if (hgt > 0.) hgt else defHeight) |> const;

			TAcc(
				bf.form,
				TFormMetrics(
					wd,
					hgt,
					bf.metrics.baseline |> fgetValue |> const
				),
				wd,
				hgt,
				wd,
				hgt,
				zero,
				zero,
				const(true),
				true,
				true,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantWidth(width : Maybe<double>) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t -> TransformTAcc(\t2a, pi, ss, mo -> {
			bf = t2a(t, pi, ss, mo);
			wd =
				eitherFn(
					width,
					\wd ->
						if (wd >= 0.)
							const(wd)
						else
							bf.metrics.width,
					\ ->
						bf.metrics.width |> fgetValue |> const
				);
			xConst = either(width, 0.) >= 0.;

			TAcc(
				bf.form,
				TFormMetrics(
					wd,
					bf.metrics.height,
					bf.metrics.baseline
				),
				if (xConst) wd else bf.minWidth,
				bf.minHeight,
				if (xConst) wd else bf.maxWidth,
				bf.maxHeight,
				if (xConst) zero else bf.xFillers,
				bf.yFillers,
				bf.addFillers,
				xConst,
				bf.yConstant,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantWidthDef(defWidth : double) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t -> TransformTAcc2(\t2a -> {
			bf = t |> t2a;
			wd = bf.metrics.width |> fgetValue |> (\wd -> if (wd > 0.) wd else defWidth) |> const;

			TAcc(
				bf.form,
				TFormMetrics(
					wd,
					bf.metrics.height,
					bf.metrics.baseline
				),
				wd,
				bf.minHeight,
				wd,
				bf.maxHeight,
				zero,
				bf.yFillers,
				bf.addFillers,
				true,
				bf.yConstant,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantHeight(height : Maybe<double>) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t -> TransformTAcc(\t2a, pi, ss, mo -> {
			bf = t2a(t, pi, ss, mo);
			hgt =
				eitherFn(
					height,
					\hgt ->
						if (hgt >= 0.)
							const(hgt)
						else
							bf.metrics.height,
					\ ->
						bf.metrics.height |> fgetValue |> const
				);
			yConst = either(height, 0.) >= 0.;

			TAcc(
				bf.form,
				TFormMetrics(
					bf.metrics.width,
					hgt,
					bf.metrics.baseline |> fgetValue |> const
				),
				bf.minWidth,
				if (yConst) hgt else bf.minHeight,
				bf.maxWidth,
				if (yConst) hgt else bf.maxHeight,
				bf.xFillers,
				if (yConst) zero else bf.yFillers,
				bf.addFillers,
				bf.xConstant,
				yConst,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstantHeightDef(defHeight : double) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t -> TransformTAcc2(\t2a -> {
			bf = t |> t2a;
			hgt = bf.metrics.height |> fgetValue |> (\hgt -> if (hgt > 0.) hgt else defHeight) |> const;

			TAcc(
				bf.form,
				TFormMetrics(
					bf.metrics.width,
					hgt,
					bf.metrics.baseline |> fgetValue |> const
				),
				bf.minWidth,
				hgt,
				bf.maxWidth,
				hgt,
				bf.xFillers,
				zero,
				bf.addFillers,
				bf.xConstant,
				true,
				bf.disposers
			)
		})
	else
		idfn
}

makeTropicConstant2(width : double, height : double) -> (Tropic) -> Tropic {
	if (^tropicConstantEnabled)
		\t ->
			if (width > 0. && height > 0.)
				makeTropicConstant(Some(width), Some(height))(t)
			else if (width > 0.)
				makeTropicConstantWidth(Some(width))(t)
			else if (height > 0.)
				makeTropicConstantHeight(Some(height))(t)
			else
				t
	else
		idfn
}