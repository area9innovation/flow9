import form/paragraphtypes;
import tropic/tropic_metrics;

export {
	TParagraphElement ::= StyledTextFragments, /* ParagraphElement is here only until we switch to tropic */ ParagraphElement;

		StyledTextFragments(fragments : TTextFragments, style : [TTexFragmentStyle]);
		
		TTextFragments ::= GeneralTextFragments, TInspectElement, Tropic;
		
		TTexFragmentStyle ::= TropicTextElementModifiers, TropicUnderline,
			TropicBaselineShift, TDynamicCharacterStyle;	

			TropicTextElementModifiers(fns : [(Tropic) -> Tropic]);
			TropicUnderline(isDouble : bool, color : int);
			TropicBaselineShift(shift : double);
			TDynamicCharacterStyle : (st : Transform<[CharacterStyle]>);

		TWrapElement ::= TWord, NewLine;
		
		TInspectElement(
			inspector : ParaElementInspector,
			element : Tropic,
		);
	
	TParaWord(
		word : GeneralWrapElement,
		inspector : ParaElementInspector,
		ghostView : Tropic,
		id : DynamicBehaviour<int>,
		style : [CharacterStyle]
	);

	TGhosted ::= GhostElem, TInspectGhost;
		GhostElem(point : DynamicBehaviour<Point>, form : Tropic);

		TInspectGhost(
			inspector : ParaElementInspector,
			form : Tropic
		);

	dummyInspector = \ -> ParaElementInspector(make(-1), make(0.0), make(0.0), makeWH(), make(0.0), make(0.0), make(-1), make(false));
	getWordInspector(paraWord : TParaWord) -> ParaElementInspector;
	dummyTParaWord = TParaWord(
		NonTextElement(),
		dummyInspector(),
		TEmpty(),
		make(-1),
		[]
	);
	getTropicTextAndStyle(tr : Tropic) -> Pair<string, [TCharacterStyle]>;
	getTropicTextStyle(tr : Tropic) -> [TCharacterStyle];
	getTropicText(tr : Tropic) -> string;
	getGeneralWrapElementFromWord(w : TParaWord) -> Pair<GeneralWrapElement, [CharacterStyle]>;

}

getWordInspector(paraWord : TParaWord) -> ParaElementInspector {
	paraWord.inspector
}

getGeneralWrapElementFromWord(w : TParaWord) -> Pair<GeneralWrapElement, [CharacterStyle]> {
	Pair(w.word, w.style);
}

getTropicText(tr : Tropic) -> string {
	getTropicTextAndStyle(tr).first
}

getTropicTextStyle(tr : Tropic) -> [TCharacterStyle] {
	getTropicTextAndStyle(tr).second;
}

getTropicTextAndStyle(tr : Tropic) -> Pair<string, [TCharacterStyle]> {
	switch(tr) {
		TText(txt, st) : Pair(txt, st);
		TBorder(__, __, __, __, t) : getTropicTextAndStyle(t);
		TPositionScale(__, t) : getTropicTextAndStyle(t);
		TTranslate(__, t) : getTropicTextAndStyle(t);
		TScale(__, t) : getTropicTextAndStyle(t);
		TRotate(__, t) : getTropicTextAndStyle(t);
		TAlpha(__, t) : getTropicTextAndStyle(t);
		TMask(__, t) : getTropicTextAndStyle(t);
		TFilter(__, t) : getTropicTextAndStyle(t);
		TCursor(__, t) : getTropicTextAndStyle(t);
		TAccess(__, t) : getTropicTextAndStyle(t);
		TCrop(__, __, t) : getTropicTextAndStyle(t);
		TVisible(__, t) : getTropicTextAndStyle(t);
		TInteractive(__, t) : getTropicTextAndStyle(t);
		TBaselineOffset(__, t) : getTropicTextAndStyle(t);
		TFullWindow(__, t) : getTropicTextAndStyle(t);
		TConstruct(__, t) : getTropicTextAndStyle(t);
		TDispose(__, t) : getTropicTextAndStyle(t);
		TAvailable(t, __) : getTropicTextAndStyle(t);
		TInspect(__, t) : getTropicTextAndStyle(t);
		TFormAvailable(f, __) : Pair(getFormText(f), getFormTextStyle(f));
		TForm(f) : Pair(getFormText(f), getFormTextStyle(f));
		TFormIn(f, __) : Pair(getFormText(f), getFormTextStyle(f));
		default : Pair("", []);
	}
}