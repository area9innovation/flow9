import form/paragraphtypes;
import tropic/tropic_metrics;

export {
	TParagraphElement ::= StyledTextFragments, /* ParagraphElement is here only until we switch to tropic */ ParagraphElement;

		StyledTextFragments(fragments : TTextFragments, style : [TTexFragmentStyle]);
		
		TTextFragments ::= GeneralTextFragments, TInspectElement, Tropic;
		
		TTexFragmentStyle ::= TropicTextElementModifiers, TropicUnderline,
			TropicBaselineShift, TDynamicCharacterStyle;	

			TropicTextElementModifiers(fns : [(Tropic) -> Tropic]);
			TropicUnderline(isDouble : bool, color : int);
			TropicBaselineShift(shift : double);
			TDynamicCharacterStyle : (st : Transform<[CharacterStyle]>);

		TWrapElement ::= TWord, NewLine;
		
		TInspectElement(
			inspector : ParaElementInspector,
			element : Tropic,
		);
	
	TParaWord(
		word : TWrapElement,
		metrics : TFormMetrics,
		ghostView : TGhosted,
		id : DynamicBehaviour<int>,
	);

	TGhosted ::= GhostElem, TInspectGhost;
		GhostElem(point : DynamicBehaviour<Point>, form : Tropic);

		TInspectGhost(
			inspector : ParaElementInspector,
			form : Tropic
		);

	dummyInspector = ParaElementInspector(make(-1), make(0.0), make(0.0), makeWH(), make(0.0), make(-1), make(false));
	getWordInspector(paraWord : TParaWord) -> Maybe<ParaElementInspector>;
	dummyTParaWord = TParaWord(
		TEmpty(),
		TFormMetrics(const(0.), const(0.), const(0.)),
		TInspectGhost(
			dummyInspector,
			TEmpty()
		),
		make(-1)
	);
	getTropicTextAndStyle(tr : Tropic) -> Pair<string, [TCharacterStyle]>;
	getTropicTextStyle(tr : Tropic) -> [TCharacterStyle];
	getTropicText(tr : Tropic) -> string;
	getGeneralWrapElemeFromTWord(w : TWrapElement) -> Pair<GeneralWrapElement, [CharacterStyle]>;

}

getWordInspector(paraWord : TParaWord) -> Maybe<ParaElementInspector> {
	switch (paraWord.ghostView) {
		TInspectGhost(i, __): Some(i);
		default : None();
	}
}

getGeneralWrapElemeFromTWord(w : TWrapElement) -> Pair<GeneralWrapElement, [CharacterStyle]> {
	switch (w) {
		// Strange neco compiler errors handling
		TText(txt, st) : {
			p : Pair<GeneralWrapElement, [CharacterStyle]> = Pair(
				GeneralText(txt),
				tcharacterStyle2charStyle(st)
			);
			p
		}
		TSpace(st) : {
			p : Pair<GeneralWrapElement, [CharacterStyle]> = Pair(
				GeneralSpace(" "),
				tcharacterStyle2charStyle(st)
			);
			p
		}
		TLinePart(f, m, e) : {
			p : Pair<GeneralWrapElement, [CharacterStyle]> = Pair(
				GeneralLinePart(getTropicText(f), getTropicText(m), getTropicText(e)),
				tcharacterStyle2charStyle(getTropicTextStyle(m))
			);
			p;
		}
		NewLine() : {
			p : Pair<GeneralWrapElement, [CharacterStyle]> = Pair(NewLine(), []);
			p;
		};
		default : Pair(GeneralText(""), []);
	}
}

getTropicText(tr : Tropic) -> string {
	getTropicTextAndStyle(tr).first
}

getTropicTextStyle(tr : Tropic) -> [TCharacterStyle] {
	getTropicTextAndStyle(tr).second;
}

getTropicTextAndStyle(tr : Tropic) -> Pair<string, [TCharacterStyle]> {
	switch(tr) {
		TText(txt, st) : Pair(txt, st);
		TBorder(__, __, __, __, t) : getTropicTextAndStyle(t);
		TPositionScale(__, t) : getTropicTextAndStyle(t);
		TTranslate(__, t) : getTropicTextAndStyle(t);
		TScale(__, t) : getTropicTextAndStyle(t);
		TRotate(__, t) : getTropicTextAndStyle(t);
		TAlpha(__, t) : getTropicTextAndStyle(t);
		TMask(__, t) : getTropicTextAndStyle(t);
		TFilter(__, t) : getTropicTextAndStyle(t);
		TCursor(__, t) : getTropicTextAndStyle(t);
		TAccess(__, t) : getTropicTextAndStyle(t);
		TCrop(__, __, t) : getTropicTextAndStyle(t);
		TVisible(__, t) : getTropicTextAndStyle(t);
		TInteractive(__, t) : getTropicTextAndStyle(t);
		TBaselineOffset(__, t) : getTropicTextAndStyle(t);
		TFullWindow(__, t) : getTropicTextAndStyle(t);
		TConstruct(__, t) : getTropicTextAndStyle(t);
		TDispose(__, t) : getTropicTextAndStyle(t);
		TAvailable(t, __) : getTropicTextAndStyle(t);
		TInspect(__, t) : getTropicTextAndStyle(t);
		TFormAvailable(f, __) : Pair(getFormText(f), getFormTextStyle(f));
		TForm(f) : Pair(getFormText(f), getFormTextStyle(f));
		TFormIn(f, __) : Pair(getFormText(f), getFormTextStyle(f));
		default : Pair("", []);
	}
}