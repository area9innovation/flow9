import tropic/selecttarray;
import tropic/tropic_gui;
import ui/animate/teasing;
import form/gui;

export {
	TFlexibleGrid(items : Transform<[Tropic]>, style : [TFlexibleGridStyle]) -> Tropic;
		TFlexibleGridStyle ::= TWrapNewRow, TWrapNewColumn, TVertical, TMaxRows, TCropView,
			CenterAlign, EndAlign, TAnimation, TOrder, TLockWidth, TEnabled;

			TWrapNewRow(); // New row should be below all the elements in the previous one
			TWrapNewColumn(); // New column should be to the right of all the elements in the previous one
			TVertical(); // Pack elements vertically and bound them with available height
			TMaxRows(rows : int); // Max elements in a first column (Max elements in a first row if TVertical is passed)
			TCropView(crop : bool); // Crop grid size by items sizes (true by default)
			TAnimation(deltaTimer : LazyDeltaTimer); // Enables animation
			TOrder(order : Transform<[int]>); // Set items order
			TLockWidth(lock : bool); // If true size only grows in height not in width (false for TVertical and true for horizontal grid)
}

TFlexibleGridItem(t : Tropic, tr : DynamicBehaviour<Point>, wh : DynamicBehaviour<Maybe<WidthHeight>>);

TFlexibleGrid(items : Transform<[Tropic]>, style : [TFlexibleGridStyle]) -> Tropic {
	wrapNewRow = contains(style, TWrapNewRow());
	wrapNewColumn = contains(style, TWrapNewColumn());
	order = tryExtractStruct(style, TOrder(const([])));
	verticalGrid = contains(style, TVertical());
	cropView = extractStruct(style, TCropView(true)).crop;
	gridEnabled = extractStruct(style, TEnabled(const(true))).enabled;
	animation = tryExtractStruct(style, TAnimation(LazyDeltaTimer(make(0.0), nop, nop)));
	maxRows = maybeMap(tryExtractStruct(style, TMaxRows(0)), \mr -> mr.rows);
	lockWidth = extractStruct(style, TLockWidth(!verticalGrid)).lock;

	contentBaseline = make(0.);
	stageSizeB = makeWH();
	itemsB = fmapi(items, \__, it -> TFlexibleGridItem(it, make(zeroPoint), make(None())));
	contentSize =
		fselect2(
			fsubmap(itemsB, \it -> it.wh),
			fsubmap(itemsB, \it -> it.tr),
			FLift2(\wh, tr ->
				foldi(wh, Pair(zeroWH, zeroWH), \i, acc : Pair, v ->
					if (i < length(tr))
						Pair(
							WidthHeight(
								max(acc.first.width, either(v, WidthHeight(0., 0.)).width + tr[i].x),
								max(acc.first.height, either(v, WidthHeight(0., 0.)).height + tr[i].y)
							),
							WidthHeight(
								max(acc.second.width, either(v, WidthHeight(0., 0.)).width),
								max(acc.second.height, either(v, WidthHeight(0., 0.)).height)
							)
						)
					else
						acc
				)
			)
		);
	parameters =
		BFParameters(
			wrapNewRow,
			wrapNewColumn,
			isSome(order),
			verticalGrid,
			eitherMap(maxRows, \og -> Some(og), None()),
			lockWidth
		);

	SelectTGroup(itemsB, \idx, __, item -> {
		TransformTAcc2(\t2a -> {
				b1 =
					eitherMap(
						animation,
						\a -> {
							pos = make(getValue(item.tr));

							TEasingAnimation(
								a.deltaTimer,
								0.2,
								CubicBezierEasing(0.4, 0.0, 0.2, 1.0),
								item.tr,
								\tr -> Some(Pair(getValue(pos), tr)),
								\__ -> {},
								\tr, p -> nextDistinct(pos, Point(lerp(tr.first.x, tr.second.x, p), lerp(tr.first.y, tr.second.y, p))),
								TTranslate(pos, item.t)
							)
							|> TOnConstruct(\ -> nextDistinct(pos, getValue(item.tr)))
						},
						TTranslate(item.tr, item.t)
					)
					|> t2a;

				TAcc(
					b1.form,
					TFormMetrics(
						zero,
						zero,
						zero
					),
					zero,
					zero,
					zero,
					zero,
					zero,
					zero,
					const(false),
					false,
					false,
					concat(
						b1.disposers,
						[
							make2Subscribe(b1.metrics.width, b1.metrics.height, \_wd, _hgt ->
								nextDistinct(item.wh, Some(WidthHeight(_wd, _hgt)))
							)(),
							makeSubscribeUns(feq(idx, 0), \b -> {
								if (b)
									[fconnect(b1.metrics.baseline, contentBaseline)]
								else
									[]
							})()
						]
					)
				)
			}
		)
	})
	|> (\f ->
		TransformTAcc2(\t2a -> {
				b1 = f |> t2a;

				wd = fwidth(fFirstOfPair(contentSize));
				hgt = fheight(fFirstOfPair(contentSize));

				minWd = fwidth(fSecondOfPair(contentSize));
				minHgt = fheight(fSecondOfPair(contentSize));

				TAcc(
					b1.form,
					TFormMetrics(
						wd,
						hgt,
						contentBaseline
					),
					if (verticalGrid) wd else minWd,
					if (verticalGrid) minHgt else hgt,
					if (verticalGrid) wd else minWd,
					if (verticalGrid) minHgt else hgt,
					zero,
					zero,
					b1.addFillers,
					false,
					false,
					b1.disposers
				)
			}
		)
	)
	|> (\f -> {
			if (contains(style, CenterAlign())) {
				if (verticalGrid)
					TTweak([TAlign(const(b2d(getDefaultRtl())), const(0.5))], f, TFillXY())
				else
					TTweak([TAlign(const(0.5), zero)], f, TFillX())
			} else if (contains(style, EndAlign())) {
				if (verticalGrid)
					TTweak([TAlign(const(b2d(getDefaultRtl())), const(1.))], f, TFillXY())
				else if (getDefaultRtl())
					f
				else
					TTweak([TAlign(const(1.), zero)], f, TFillX())
			} else {
				if (getDefaultRtl())
					TTweak([TAlign(const(1.), zero)], f, TFillX())
				else
					f
			}
	})
	|> (\f ->
		TConstruct(
			[
				make2Subscribe(
					fselect2(
						fsubmap(eitherMap(order, \or -> forder(itemsB, or.order), itemsB), \it -> it.wh),
						ftransistor(gridEnabled, stageSizeB),
						FLift2(\itemsSizes, stageSize -> {
							if (!contains(itemsSizes, None())) {
								blocks = map(itemsSizes, \sz -> either(sz, WidthHeight(0., 0.)) |> (\wh -> BFBlock(wh.width, wh.height)));

								bfFit(stageSize, blocks, parameters);
							} else {
								[];
							}
						})
					)
					|> (\tr -> eitherMap(order, \or -> fdeorder(tr, or.order), tr)),
					itemsB,
					\tr, gridItems -> {
						iteri(tr, \i, p ->
							if (length(gridItems) > i) {
								nextDistinct(gridItems[i].tr, either(p, Point(0., 0.)));
							}
						);
					}
				)
			],
			f
		)
	)
	|> (\f ->
		if (cropView) {
			TCopySize2(
				f,
				\sz, c ->
					TFixSize(
						TAttachAvailable(f, stageSizeB),
						if (parameters.lockWidth)
							TGroup2(TFillX(), sz)
						else
							TGroup2(sz, TFillY())
					)
			)
		} else {
			TCopySize2(
				f,
				\sz, c -> TGroup2(if (parameters.lockWidth) THeight(sz) else TWidth(sz), TAttachBox2(TFillXY(), stageSizeB, c))
			)
		}
	)
}

BFBlock(w : double, h : double);
BFState(l : [Point], s : WidthHeight, p : Tree<int, Pair<BFBlock, Point>>);
BFParameters(
	wrapNewRow : bool,
	wrapNewColumn : bool,
	ordered : bool,
	vertical : bool,
	maxRows : Maybe<int>,
	lockWidth : bool
);

bfFit(size : WidthHeight, blocks : [BFBlock], par : BFParameters) -> [Maybe<Point>] {
	sz = WidthHeight(max(size.width, either(maxA(map(blocks, \b -> b.w)), 0.0)), max(size.height, either(maxA(map(blocks, \b -> b.h)), 0.0)));

	if (par.ordered) {
		state = bfFitBlocks([Point(0.0, 0.0)], sz, blocks, par);

		generate(0, length(blocks), \i -> maybeMap(lookupTree(state.p, i), \p -> p.second));
	} else {
		blocksI =
			mergeSort(mapi(blocks, \i, b -> Pair(i, b)), \a : Pair<int, BFBlock>, b : Pair<int, BFBlock> ->
				if (par.vertical) {
					if (a.second.h == b.second.h)
						b2i(a.second.w < b.second.w)
					else
						b2i(a.second.h < b.second.h)
				} else {
					if (a.second.w == b.second.w)
						b2i(a.second.h < b.second.h)
					else
						b2i(a.second.w < b.second.w)
				}
			);

		orderI = map(blocksI, \b -> b.first);

		state = bfFitBlocks([Point(0.0, 0.0)], sz, map(blocksI, secondOfPair), par);

		getTreeValues(
			foldi(
				generate(0, length(blocks), \i -> maybeMap(lookupTree(state.p, i), \p -> p.second)),
				makeTree(),
				\i, acc, tr -> setTree(acc, orderI[i], tr)
			)
		);
	}
}

bfFitBlocks(line : [Point], size : WidthHeight, blocks : [BFBlock], par : BFParameters) -> BFState {
	foldi(blocks, BFState(line, size, makeTree()), \i, acc, block -> {
		state = bfFindNode(i, acc, block, par);

		if (state.s.width > acc.s.width || state.s.height > acc.s.height) {
			bfFitBlocks(line, state.s, subrange(blocks, 0, i + 1), par)
		} else {
			state;
		}
	});
}

bfFindNode(i : int, state : BFState, block : BFBlock, par : BFParameters) -> BFState {
	p =
		fold(enumFromTo(0, length(state.l) - 1), Point(doubleMax, doubleMax), \acc : Point, l -> {
			if (par.vertical) {
				if (state.l[l].y <= state.s.height - block.h && (if (par.lockWidth) state.l[l].x <= state.s.width - block.w else true)) {
					p = getBFLinePoint(state.l, l, block, par);

					if (p.x < acc.x && checkBFMaxRows(state, block, p, par)) {
						p;
					} else {
						acc;
					}
				} else {
					acc;
				}
			} else {
				if (state.l[l].x <= state.s.width - block.w && (if (!par.lockWidth) state.l[l].y <= state.s.height - block.h else true)) {
					p = getBFLinePoint(state.l, l, block, par);

					if (p.y < acc.y && checkBFMaxRows(state, block, p, par)) {
						p;
					} else {
						acc;
					}
				} else {
					acc;
				}
			}
		});

	if (p == Point(doubleMax, doubleMax)) {
		if (par.vertical) {
			maxY = foldTree(state.p, 0.0, \k, v, acc -> if (v.second.y + v.first.h > acc) v.second.y + v.first.h else acc);

			BFState(state.l, WidthHeight(state.s.width, maxY + block.h + 1.0), state.p);
		} else {
			maxX = foldTree(state.p, 0.0, \k, v, acc -> if (v.second.x + v.first.w > acc) v.second.x + v.first.w else acc);

			BFState(state.l, WidthHeight(maxX + block.w + 1.0, state.s.height), state.p);
		}
	} else {
		BFState(updateBFLine(state, block, p, par), state.s, setTree(state.p, i, Pair(block, p)));
	}
}

updateBFLine(state : BFState, block : BFBlock, point : Point, par : BFParameters) -> [Point] {
	(if (par.vertical) {
		i = ref 0;
		lastX = ref 0.0;

		filter(state.l, \l ->
			if (l.y <= point.y + block.h) {
				lastX := l.x;

				if (l.y < point.y) {
					i := ^i + 1;

					true;
				} else {
					false;
				}
			} else {
				true;
			}
		)
		|> (\ln -> {
			insertArray(
				insertArray(
					ln,
					^i,
					Point(^lastX, point.y + block.h)
				),
				^i,
				Point(point.x + block.w, point.y)
			)
		});
	} else {
		i = ref 0;
		lastY = ref 0.0;

		filter(state.l, \l ->
			if (l.x <= point.x + block.w) {
				lastY := l.y;

				if (l.x < point.x) {
					i := ^i + 1;

					true;
				} else {
					false;
				}
			} else {
				true;
			}
		)
		|> (\ln -> {
			insertArray(
				insertArray(
					ln,
					^i,
					Point(point.x + block.w, ^lastY)
				),
				^i,
				Point(point.x, point.y + block.h)
			)
		})
	})
	|> (\ln ->
		if (par.wrapNewColumn) {
			p = arrayPush(getTreeValues(state.p), Pair(block, point));

			map(ln, \l ->
				Point(
					fold(
						p,
						l.x,
						\acc, pt ->
							if (pt.second.x < l.x && pt.second.x + pt.first.w > l.x)
								max(acc, pt.second.x + pt.first.w)
							else
								acc
					),
					l.y
				)
			);
		} else {
			ln
		}
	)
	|> (\ln ->
		if (par.wrapNewRow) {
			p = arrayPush(getTreeValues(state.p), Pair(block, point));

			map(ln, \l ->
				Point(
					l.x,
					fold(
						p,
						l.y,
						\acc, pt ->
							if (pt.second.y < l.y && pt.second.y + pt.first.h > l.y)
								max(acc, pt.second.y + pt.first.h)
							else
								acc
					)
				)
			);
		} else {
			ln
		}
	)
}

getBFLinePoint(line : [Point], i : int, block : BFBlock, par : BFParameters) -> Point {
	if (par.vertical) {
		minY = line[i].y;
		maxY = minY + block.h;

		fold(subrange(line, i, length(line)), 0.0, \acc, l -> {
			if (l.y >= minY && l.y < maxY && l.x > acc) {
				l.x;
			} else {
				acc;
			}
		})
		|> (\f -> Point(f, minY))
	} else {
		minX = line[i].x;
		maxX = minX + block.w;

		fold(subrange(line, i, length(line)), 0.0, \acc, l -> {
			if (l.x >= minX && l.x < maxX && l.y > acc) {
				l.y;
			} else {
				acc;
			}
		})
		|> (\f -> Point(minX, f))
	}
}

checkBFMaxRows(state : BFState, block : BFBlock, point : Point, par : BFParameters) -> bool {
	eitherMap(
		par.maxRows,
		\mr -> {
			filteredTree = filterTree(state.p, \k, v -> if (par.vertical) v.second.y == 0.0 else v.second.x == 0.0);

			if (sizeTree(filteredTree) < mr) {
				true
			} else {
				maxSize =
					foldTree(filteredTree, 0.0, \k, v, acc ->
						if (par.vertical) {
							if (v.second.x > acc)
								v.second.x
							else
								acc;
						} else {
							if (v.second.y > acc)
								v.second.y
							else
								acc;
						}
					);

				if (par.vertical)
					point.x <= maxSize
				else
					point.y <= maxSize;
			}
		},
		true
	)
}