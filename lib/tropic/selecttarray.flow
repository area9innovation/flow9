// Â© Copyright 2014 Area9 Technologies.

import tropic/tropic;
import ds/array_diff;
import algorithms;

export {
	// Monitors an array of Tropics and presents them relatively efficiently on the screen - only changed elements in the array are
	// updated on the screen

	SelectTLines(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTCols(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTColsA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTGroup(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
}

SelectTLines(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TLinesCombiner());
}

SelectTCols(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TColsCombiner());
}

SelectTColsA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TColsACombiner());
}

SelectTGroup(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TGroupCombiner());
}

SelectTropicArray(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic, combiner : TCombiner) -> Tropic {
	stackChanges = make([]);
	old = ref [];
	indexes : ref [DynamicBehaviour<int>] = ref [];
	ids : ref [int] = ref [];

	getNextId = \ -> fold(sort(^ids), -1, \acc, id -> if (id == acc + 1) id else acc) + 1;

	TConstruct(
		[
			makeSubscribe(values, \l -> {
				// println("-----");
				// println(map(^indexes, getValue));
				// println(^ids);

				iter(arrayDiffReversed(^old, l, false), \op ->
					switch (op : ArrayOperation) {
						ArrayNop(x, y): {
							// println("nop " + i2s(x) + " " + i2s(y));

							index = ^indexes[x];
							id = ^ids[x];

							indexes := insertArray(removeIndex(^indexes, x), y, index);
							ids := insertArray(removeIndex(^ids, x), y, id);

							iter(enumFromTo(y, x), \i -> nextDistinct(^indexes[i], i));

							// println(map(^indexes, getValue));

							next(stackChanges, arrayPush(getValue(stackChanges), TGroupMove(x, y)));
						}
						ArrayInsert(x, y, v): {
							// println("insert " + i2s(x) + " " + i2s(y));

							index = make(y);
							id = getNextId();

							mapi(subrange(^indexes, y, length(^indexes)), \i, t -> next(t, i + y + 1));

							indexes := insertArray(^indexes, y, index);
							ids := insertArray(^ids, y, id);

							// println(map(^indexes, getValue));

							// fselect to block any changes to index
							next(stackChanges, arrayPush(getValue(stackChanges), TGroupAdd(makeTropicFn(fselect(index, idfn |> FLift), id, v), y)));
						}
						ArrayReplace(x, y, v): {
							// println("replace " + i2s(x) + " " + i2s(y));

							index = ^indexes[y];
							id = ^ids[y];

							// println(map(^indexes, getValue));

							// fselect to block any changes to index
							next(stackChanges, arrayPush(getValue(stackChanges), TGroupReplace(makeTropicFn(fselect(index, idfn |> FLift), id, v), y)));
						}
						ArrayRemove(x, y): {
							// println("remove " + i2s(x) + " " + i2s(y));

							indexes := removeIndex(^indexes, y);
							ids := removeIndex(^ids, y);

							mapi(subrange(^indexes, y, length(^indexes) - y), \i, t -> next(t, i + y));

							// println(map(^indexes, getValue));

							next(stackChanges, arrayPush(getValue(stackChanges), TGroupDelete(y)));
						}
					}
				);

				// println(map(^indexes, getValue));
				// println(^ids);
				// println(length(l));
				// println("-----");

				old := l;
			})
		],
		TDynamicGroup2(
			stackChanges,
			ref [],
			combiner
		)
	)
}