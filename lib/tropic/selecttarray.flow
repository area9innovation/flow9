// Â© Copyright 2014 Area9 Technologies.

import tropic/tropic;
import ds/array_diff;
import ds/dynamic_array;
import algorithms;

export {
	// Monitors an array of Tropics and presents them relatively efficiently on the screen - only changed elements in the array are
	// updated on the screen

	SelectTLines(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTLinesA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTCols(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTColsA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTGroup(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;

	SelectTDynamicLines(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTDynamicLinesA(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTDynamicCols(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTDynamicColsA(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;
	SelectTDynamicGroup(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic;

	TDynamicArrayLines(da : DynamicArray<Tropic>) -> Tropic;
	TDynamicArrayLinesA(da : DynamicArray<Tropic>) -> Tropic;
	TDynamicArrayCols(da : DynamicArray<Tropic>) -> Tropic;
	TDynamicArrayColsA(da : DynamicArray<Tropic>) -> Tropic;
	TDynamicArrayGroup(da : DynamicArray<Tropic>) -> Tropic;
}

SelectTLines(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TLinesCombiner());
}

SelectTLinesA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TLinesACombiner());
}

SelectTCols(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TColsCombiner());
}

SelectTColsA(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TColsACombiner());
}

SelectTGroup(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTropicArray(values, makeTropicFn, TGroupCombiner());
}

SelectTropicArray(values : Transform<[?]>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic, combiner : TCombiner) -> Tropic {
	stackChanges = make([]);
	old = ref [];
	indexes : ref [DynamicBehaviour<int>] = ref [];
	ids : ref [int] = ref [];

	getNextId = \ -> fold(sort(^ids), -1, \acc, id -> if (id == acc + 1) id else acc) + 1;

	TConstruct(
		[
			makeSubscribe(values, \l -> {
				// println("-----");
				// println(map(^indexes, getValue));
				// println(^ids);

				iter(arrayDiffReversed(^old, l, false), \op ->
					switch (op : ArrayOperation) {
						ArrayNop(x, y): {
							// println("nop " + i2s(x) + " " + i2s(y));

							index = ^indexes[x];
							id = ^ids[x];

							indexes := insertArray(removeIndex(^indexes, x), y, index);
							ids := insertArray(removeIndex(^ids, x), y, id);

							iter(enumFromTo(y, x), \i -> nextDistinct(^indexes[i], i));

							// println(map(^indexes, getValue));

							next(stackChanges, arrayPush(getValue(stackChanges), TGroupMove(x, y)));
						}
						ArrayInsert(x, y, v): {
							// println("insert " + i2s(x) + " " + i2s(y));

							index = make(y);
							id = getNextId();

							mapi(subrange(^indexes, y, length(^indexes)), \i, t -> next(t, i + y + 1));

							indexes := insertArray(^indexes, y, index);
							ids := insertArray(^ids, y, id);

							// println(map(^indexes, getValue));

							// fselect to block any changes to index
							next(stackChanges, arrayPush(getValue(stackChanges), TGroupAdd(makeTropicFn(fselect(index, idfn |> FLift), id, v), y)));
						}
						ArrayReplace(x, y, v): {
							// println("replace " + i2s(x) + " " + i2s(y));

							index = ^indexes[y];
							id = ^ids[y];

							// println(map(^indexes, getValue));

							// fselect to block any changes to index
							next(stackChanges, arrayPush(getValue(stackChanges), TGroupReplace(makeTropicFn(fselect(index, idfn |> FLift), id, v), y)));
						}
						ArrayRemove(x, y): {
							// println("remove " + i2s(x) + " " + i2s(y));

							indexes := removeIndex(^indexes, y);
							ids := removeIndex(^ids, y);

							mapi(subrange(^indexes, y, length(^indexes) - y), \i, t -> next(t, i + y));

							// println(map(^indexes, getValue));

							next(stackChanges, arrayPush(getValue(stackChanges), TGroupDelete(y)));
						}
					}
				);

				// println(map(^indexes, getValue));
				// println(^ids);
				// println(length(l));
				// println("-----");

				old := l;
			})
		],
		TDynamicGroup2(
			stackChanges,
			ref [],
			combiner
		)
	)
}

SelectTDynamicLines(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTDynamicArray(values, makeTropicFn, TLinesCombiner());
}

SelectTDynamicLinesA(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTDynamicArray(values, makeTropicFn, TLinesACombiner());
}

SelectTDynamicCols(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTDynamicArray(values, makeTropicFn, TColsCombiner());
}

SelectTDynamicColsA(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTDynamicArray(values, makeTropicFn, TColsACombiner());
}

SelectTDynamicGroup(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic) -> Tropic {
	SelectTDynamicArray(values, makeTropicFn, TGroupCombiner());
}

SelectTDynamicArray(values : DynamicArray<?>, makeTropicFn : (index :  Transform<int>, id : int, ?) -> Tropic, combiner : TCombiner) -> Tropic {
	ids : ref [int] = ref [];
	getNextId = \ -> fold(sort(^ids), -1, \acc, id -> if (id == acc + 1) id else acc) + 1;

	TDynamicArrayCombiner(
		mapiDynamicArray(values, \i, v -> {
			id = getNextId();
			ids := insertArray(^ids, fgetValue(i), id);
			makeTropicFn(i, id, v);
		}),
		combiner
	)
}

TDynamicArrayCombiner(a : DynamicArray<Tropic>, combiner : TCombiner) -> Tropic {
	id = random();
	TransformTAcc(\t2a, parent, sheet, metricsOnly -> {
		stackChanges = make([]);
		b : DynamicArray<TAcc> = mapiDynamicArrayWithPrevious(a, \p : Transform<Maybe<TAcc>>, i, v : Tropic -> {
			isGroupCombiner = combiner == TGroupCombiner();
			isLinesCombiner = combiner == TLinesCombiner() || combiner == TLinesACombiner();
			isColsCombiner = combiner == TColsCombiner() || combiner == TColsACombiner();
			top = fsubselect(p, FLift(\pp -> eitherMap(pp, \ppp -> ppp.metrics.height, zero)));
			left = fsubselect(p, FLift(\pp -> eitherMap(pp, \ppp -> ppp.metrics.width, zero)));

			b = t2a(
				v,
				if (isGroupCombiner)
					parent
				else
					TParentInfo(
						if (isColsCombiner) fsubtract(parent.maxX, left) else parent.maxX,
						if (isLinesCombiner) fsubtract(parent.maxY, top) else parent.maxY,
						parent.environment,
						parent.transformMatrix
					),
				sheet,
				metricsOnly
			);

			TAcc(
				if (isLinesCombiner)
					FTranslate(zero, top, b.form)
				else if (isColsCombiner)
					FTranslate(left, zero, b.form)
				else
					b.form,
				TFormMetrics(
					if (isGroupCombiner || isLinesCombiner)
						fmax(b.metrics.width, left)
					else
						faddition(b.metrics.width, left),
					if (isGroupCombiner || isColsCombiner)
						fmax(b.metrics.height, top)
					else
						faddition(b.metrics.height, top),
					if (isGroupCombiner || isColsCombiner)
						fmax(b.metrics.baseline, fsubselect(p, FLift(\pp -> eitherMap(pp, \ppp -> ppp.metrics.baseline, zero))))
					else
						faddition(b.metrics.baseline, top)
				),
				if (isGroupCombiner || isLinesCombiner)
					fmax(b.minWidth, left)
				else
					faddition(b.minWidth, left),
				if (isGroupCombiner || isColsCombiner)
					fmax(b.minHeight, top)
				else
					faddition(b.minHeight, top),
				if (isGroupCombiner || isLinesCombiner)
					fmax(b.maxWidth, left)
				else
					faddition(b.maxWidth, left),
				if (isGroupCombiner || isColsCombiner)
					fmax(b.maxHeight, top)
				else
					faddition(b.maxHeight, top),
				zero,
				zero,
				const(false),
				false,
				false,
				b.disposers
			)
		});
		bb : Transform<Maybe<TAcc>> = elementAtDynamicArray(b, fsubtracti(lengthDynamicArray(b), const(1)));

		d = listenDynamicArray(
			b,
			\op -> {
				switch (op : HeckelOperationSimple<TAcc>) {
					HeckelInsert(i, v): {
						next(stackChanges, arrayPush(getValue(stackChanges), FGroupAdd(v.form, i)));
					}
					// HeckelMove(f, t): {
					// 	moveDynamicArray(a, f, t);
					// }
					HeckelDelete(i, __): {
						next(stackChanges, arrayPush(getValue(stackChanges), FGroupDelete(i)));
					}
				}
			}
		);

		TAcc(
			FDynamicGroup(stackChanges),
			TFormMetrics(
				fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.metrics.width, zero))),
				fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.metrics.height, zero))),
				fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.metrics.baseline, zero)))
			),
			fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.minWidth, zero))),
			fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.minHeight, zero))),
			fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.maxWidth, zero))),
			fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.maxHeight, zero))),
			fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.xFillers, zero))),
			fsubselect(bb, FLift(\bbb : Maybe<TAcc> -> eitherMap(bbb, \bbbb -> bbbb.yFillers, zero))),
			const(false),
			false,
			false,
			[d]
		)
	})
}

TDynamicArrayLines(da : DynamicArray<Tropic>) -> Tropic {
	SelectTDynamicLines(
		da,
		\__, __, c -> c
	)
}

TDynamicArrayLinesA(da : DynamicArray<Tropic>) -> Tropic {
	SelectTDynamicLinesA(
		da,
		\__, __, c -> c
	)
}

TDynamicArrayCols(da : DynamicArray<Tropic>) -> Tropic {
	SelectTDynamicCols(
		da,
		\__, __, c -> c
	)
}

TDynamicArrayColsA(da : DynamicArray<Tropic>) -> Tropic {
	SelectTDynamicColsA(
		da,
		\__, __, c -> c
	)
}

TDynamicArrayGroup(da : DynamicArray<Tropic>) -> Tropic {
	SelectTDynamicGroup(
		da,
		\__, __, c -> c
	)
}