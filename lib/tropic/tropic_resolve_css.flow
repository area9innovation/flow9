import formats/css/stylesheet;

import tropic/tropic;
import tropic/css_style2style;


export {
	// Instantiates any stylesheet into concrete styles.
	resolveTropicCss(tropic : Tropic, sheet : Stylesheet) -> Tropic;
}

resolveTropicCss(t : Tropic, sheet : Stylesheet) -> Tropic {
	if (sheet == emptyStylesheet) t
	else switch (t : Tropic) {
		TEmpty(): t;
		TransformTAcc(__): t;
		TFullWindow(fs, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TFullWindow(fs, tr);
		}
		TText(text, style): {
			resolvedStyle : [TCharacterStyle] = fold(style, [], \acc : [TCharacterStyle], st -> {
				switch (st : TCharacterStyle) {
					TStyle(styleName): convertTStyle(sheet, st, \p -> concat(acc, getCharacterStyleFromCss(p)), acc);
					TStyleWithSelector(styleName, selectorName) : convertTStyleWithSelector(sheet, st, \p -> concat(acc, getCharacterStyleFromCss(p)), acc);
					default: arrayPush(acc, st);
				}
			});
			if (resolvedStyle == style) t
			else TText(text, resolvedStyle);
		};
		TParagraph(text, style): {
			resolvedStyle : [TParagraphStyle] = fold(style, [], \acc : [TParagraphStyle], st -> {
				switch (st : TParagraphStyle) {
					TStyle(styleName): convertTStyle(sheet, st, \p -> concat(acc, getCharacterStyleFromCss(p)), acc);
					TStyleWithSelector(styleName, selectorName) : convertTStyleWithSelector(sheet, st, \p -> concat(acc, getCharacterStyleFromCss(p)), acc);
					default: arrayPush(acc, st);
				}
			});
			if (resolvedStyle == style) t
			else TParagraph(text, resolvedStyle);
		};
		TGraphics(path, style): {
			resolvedStyle : [TGraphicsStyle] = fold(style, [], \acc, st -> {
				switch (st : TGraphicsStyle) {
					RadialGradient(): arrayPush(acc, st);
					Stroke(colour): arrayPush(acc, st);
					StrokeOpacity(opacity): arrayPush(acc, st);
					StrokeLineGradient(rotation, points): arrayPush(acc, st);
					Fill(color): arrayPush(acc, st);
					FillOpacity(opacity): arrayPush(acc, st);
					GradientFill(rotation, points): arrayPush(acc, st);
					StrokeWidth(width): arrayPush(acc, st);
					TStyle(styleName): convertTStyle(sheet, st, \p -> concat(acc, getGraphicStyleFromCss(p)), acc);
					TStyleWithSelector(styleName, selectorName): convertTStyleWithSelector(sheet, st, \p -> concat(acc, getGraphicStyleFromCss(p)), acc);
				}
			});
			if (resolvedStyle == style) t
			else TGraphics(path, resolvedStyle);
		}
		TPicture(url, style): {
			resolvedStyle : [TPictureStyle] = fold(style, [], \acc, st -> {
				switch (st : TPictureStyle) {
					DontCache(): arrayPush(acc, st);
					OnlyDownloadToCache(): arrayPush(acc, st);
					OnLoadingError(__): arrayPush(acc, st);
					OnLoaded(__): arrayPush(acc, st);
					WidthHeight(__, __): arrayPush(acc, st);
					TIgnoreCachedPictureSize(): arrayPush(acc, st);
					default: acc; //add default after error in swf compiler, don't forget to add new types in switch
				}
			});
			resolvedUrl = fold(style, url, \acc, st -> {
				switch (st : TPictureStyle) {
					TStyle(__): convertTStyle(sheet, st, \p -> {
							possiblePictureUrl = extractStruct(p.backgroundImage, CssUrl("")).value;
							if (possiblePictureUrl != "") possiblePictureUrl else acc;
						}, acc);
					TStyleWithSelector(__, __): convertTStyleWithSelector(sheet, st, \p -> {
							possiblePictureUrl = extractStruct(p.backgroundImage, CssUrl("")).value;
							if (possiblePictureUrl != "") possiblePictureUrl else acc;
						}, acc);
					default: acc; //add default after error in swf compiler, don't forget to add new types in switch
				}
			});
			if (resolvedStyle == style && resolvedUrl == url) t
			else TPicture(resolvedUrl, resolvedStyle);
		}
		TBorder(l, to, r, b, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TBorder(l, to, r, b, ot);
		}
		TTranslate(p, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TTranslate(p, ot);
		}
		TScale(f, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TScale(f, ot);
		}
		TRotate(r, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TRotate(r, ot);
		}
		TAlpha(a, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TAlpha(a, ot);
		}
		TVisible(v, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TVisible(v, ot);
		}
		TMask(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == t1 && o2 == t2) t
			else TMask(o1, o2);
		}
		TFilter(f, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TFilter(f, ot);
		}
		TCursor(c, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TCursor(c, ot);
		}
		TCrop(tl, wh, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TCrop(tl, wh, ot);
		}
		TInteractive(ia, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TInteractive(ia, ot);
		}
		TBaselineOffset(b, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TBaselineOffset(b, ot);
		}
		TAccess(p, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TAccess(p, ot);
		}
		TRealHTML(__, __, __): t;
		TVideo(__, __, __): t;
		TForm(__): t;
		TFForm(__, __): t;
		TSFForm(__, __): t;
		TFormIn(f, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TFormIn(f, ot);
		}
		TFormAvailable(f, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TFormAvailable(f, ot);
		}
		TCase(sz, cs): {
			os = map(sz, \tr -> resolveTropicCss(tr, sheet));
			oc = map(cs, \tr -> resolveTropicCss(tr, sheet));
			if (os == sz && oc == cs) t
			else TCase(os, oc);
		}
		TConstruct(cs, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TConstruct(cs, ot);
		}
		TCreate2(__, __): t; // The child is resolved by tropic2form
		TDispose(ds, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TDispose(ds, ot);
		}
		TMutable(__): t; // The child is resolved by tropic2form
		TIf(b, th, el): {
			switch (b : Transform<bool>) {
				ConstBehaviour(v): {
					if (v) {
						resolveTropicCss(th, sheet)
					} else  {
						resolveTropicCss(el, sheet)
					}
				}
				default: {
					ot = resolveTropicCss(th, sheet);
					oe = resolveTropicCss(el, sheet);

					if (ot == oe) ot // then and else-branch are identical!
					else if (ot == th && oe == el) t
					else TIf(b, ot, oe);
				}
			}
		}
		TGroup2(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == TEmpty()) o2
			else if (o2 == TEmpty()) o1
			else if (o1 == t1 && o2 == t2) t
			else TGroup2(o1, o2);
		}
		TCols2(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == TEmpty()) o2
			else if (o2 == TEmpty()) o1
			else if (o1 == t1 && o2 == t2) t
			else TCols2(o1, o2);
		}
		TBaselineCols2(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == TEmpty()) o2
			else if (o2 == TEmpty()) o1
			else if (o1 == t1 && o2 == t2) t
			else TBaselineCols2(o1, o2);
		}
		TLines2(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == TEmpty()) o2
			else if (o2 == TEmpty()) o1
			else if (o1 == t1 && o2 == t2) t
			else TLines2(o1, o2);
		}
		TBaselineLines2(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == TEmpty()) o2
			else if (o2 == TEmpty()) o1
			else if (o1 == t1 && o2 == t2) t
			else TBaselineLines2(o1, o2);
		}
		TAvailable(box, parent): {
			ob = resolveTropicCss(box, sheet);
			op = resolveTropicCss(parent, sheet);
			if (ob == box && op == parent) t
			else TAvailable(ob, op);

		}
		TTweak(style, content, size): {
			ob = resolveTropicCss(content, sheet);
			ot = resolveTropicCss(size, sheet);
			if (ob == content && ot == size) t
			else TTweak(style, ob, ot);
		}
		TZoomFill(b): {
			ob = resolveTropicCss(b, sheet);
			if (ob == b) t
			else TZoomFill(ob);
		}
		TFillX(): t;
		TFillY(): t;
		TAttach(b, fn): {
			ob = resolveTropicCss(b, sheet);
			if (ob == b) t
			else TAttach(ob, fn);
		}
		TRounded(nw, ne, lw, le, style, size): {
			resolvedStyle : [TGraphicsStyle] = fold(style, [], \acc, st -> {
				switch (st : TGraphicsStyle) {
					RadialGradient(): arrayPush(acc, st);
					Stroke(colour): arrayPush(acc, st);
					StrokeOpacity(opacity): arrayPush(acc, st);
					StrokeLineGradient(rotation, points): arrayPush(acc, st);
					Fill(color): arrayPush(acc, st);
					FillOpacity(opacity): arrayPush(acc, st);
					GradientFill(rotation, points): arrayPush(acc, st);
					StrokeWidth(width): arrayPush(acc, st);
					TStyle(styleName): convertTStyle(sheet, st, \p -> concat(acc, getGraphicStyleFromCss(p)), acc);
					TStyleWithSelector(styleName, selectorName): convertTStyleWithSelector(sheet, st, \p -> concat(acc, getGraphicStyleFromCss(p)), acc);
				}
			});

			cssBorderRadius = fold(style, emptyBorderRadius, \acc, st -> {
				switch (st : TGraphicsStyle) {
					TStyle(styleName): convertTStyle(sheet, st, \p -> if (p.borderRadius != emptyBorderRadius) p.borderRadius else acc, acc);
					TStyleWithSelector(styleName, selectorName) : convertTStyleWithSelector(sheet, st, \p -> if (p.borderRadius != emptyBorderRadius) p.borderRadius else acc, acc);

					default: acc;
				}
			});

			os = getSizeFromCss(sheet, style, resolveTropicCss(size, sheet));

			if (resolvedStyle == style && os == size && cssBorderRadius == emptyBorderRadius) {
				t;
			} else {
				if (cssBorderRadius == emptyBorderRadius) {
					TRounded(nw, ne, lw, le,
						if (resolvedStyle == style) style else resolvedStyle,
						if (os == size) size else os);
				} else {
					TRounded(cssBorderRadius.topLeft, cssBorderRadius.topRight,
						cssBorderRadius.bottomRight, cssBorderRadius.bottomLeft,
						if (resolvedStyle == style) style else resolvedStyle,
						if (os == size) size else os);
				}
			}
		}
		TScrollable(content, maxbox, style, state): {
			oc = resolveTropicCss(content, sheet);
			om = resolveTropicCss(maxbox, sheet);
			if (oc == content && om == maxbox) t
			else TScrollable(oc, om, style, state)
		}
		TCropSize(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == t1 && o2 == t2) t
			else TCropSize(o1, o2);
		}
		TShift(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == t1 && o2 == t2) t
			else TShift(o1, o2);
		}
		TSize(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == t1 && o2 == t2) t
			else TSize(o1, o2);
		}
		TSizeOf(t1): {
			o1 = resolveTropicCss(t1, sheet);
			if (o1 == t1) t
			else TSizeOf(o1);
		}
		TMinimumGroup2(t1, t2): {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == t1 && o2 == t2) t
			else if (o1 == TEmpty() && o2 == TEmpty()) TEmpty()
			else TMinimumGroup2(o1, o2);
		}
		TSubtractGroup2(t1, t2):  {
			o1 = resolveTropicCss(t1, sheet);
			o2 = resolveTropicCss(t2, sheet);
			if (o1 == t1 && o2 == t2) t
			else if (o2 == TEmpty()) o1
			else TSubtractGroup2(o1, o2);
		}
		TDebug(c, tr): t;
		TLet(name, value, scope): {
			ov = resolveTropicCss(value, sheet);
			os = resolveTropicCss(scope, sheet);
			if (ov == value && os == scope) t
			else TLet(name, ov, os)
		}
		TLetAvailable(name, scope): {
			os = resolveTropicCss(scope, sheet);

			if (os == scope) t
			else TLetAvailable(name, os)
		}
		TNamespace(tr): TNamespace(resolveTropicCss(tr, sheet));
		TDisplay(__): t;
		TGhost(__): t;
		TGhostMin(__): t;
		TTag(tag, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t
			else TTag(tag, ot)
		}
		TTag2(setfn, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t
			else TTag2(setfn, ot)
		}
		TCssBlock(style, tr) : {
			addTAlpha = \cssStyle : CssStyle, tr1 : Tropic ->
				if (cssStyle.opacity != defCssStyle.opacity && cssStyle.opacity != 1.0) TAlpha(const(cssStyle.opacity), tr1)
				else tr1;
			styledTropic = fold(style, TEmpty(), \acc, st -> {
				switch (st : TCssStyle) {
					TStyle(styleName): {
						convertTStyle2(sheet, st, \gs, p -> addTAlpha(p, TGroup(getTropicsFromStyle(gs, p))), acc);
					}
					TStyleWithSelector(styleName, selectorName): {
						convertTStyleWithSelector2(sheet, st, \gs, p -> addTAlpha(p, TGroup(getTropicsFromStyle(gs, p))), acc);
					}
				}
			});
			if (styledTropic == TEmpty()) {
				resolveTropicCss(tr, sheet);
			} else {
				resolveTropicCss(styledTropic, sheet);
			}
		}
		TNative(fn): t;
		TPositionScale(p, tr): {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TPositionScale(p, ot);
		}
		TDynamicGroup2(__, __, __) : t;
		TInspect(inspectors, tr) : {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TInspect(inspectors, ot);
		}
		TOverride(overriders, tr) : {
			ot = resolveTropicCss(tr, sheet);
			if (ot == tr) t else TOverride(overriders, ot);
		}
	}
}
