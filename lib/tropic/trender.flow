import sys/target;
import formats/css/stylesheet;
import tropic/tropic2form;
import fform/renderfform;
import fform/fformmetrics;

export {
	// Renders tropic, taking DPI and zooming for accessibility using hot-keys into account
	// Returns a disposer. This is the recommended way to render a Tropic.
	trender(t : Tropic, style : [TRenderStyle]) -> () -> void;

	// Same as above, except that also returns a function which can tell where TTag items are
	trender2(t : Tropic, style : [TRenderStyle]) -> Pair<() -> void, (int) -> PositionScale>;

	// In difference to trender renders content over all
	// iframes and textinputs of previous render calls
	trenderStage(t : Tropic, style : [TRenderStyle]) -> () -> void;

	// Same as above, except that also returns a function which can tell where TTag items are
	trender2Stage(t : Tropic, style : [TRenderStyle], toStage : bool) -> Pair<() -> void, (int) -> PositionScale>;

	// Render the given tropic, setting up the drag/tooltips handling. Drag/tooltips support does not work unless you use this!
	trenderManager(manager : TManager, t : Tropic) -> () -> void;

	renderTropicToClip(parent : native, tr : Tropic, style : [TRenderToClipStyle]) -> () -> () -> void;
		// [TagName("div"), FAccessStyle("position", const("relative"))] by default
		TRenderToClipStyle ::= TRenderZorder, TRenderUpdateClipSizeEvents, FAccessProperty;
			TRenderPosition(position : string) -> FAccessStyle { FAccessStyle("position", const(position)); }; // "relative" by default
			TRenderZorder(zorder : Transform<[int]>); // [0] by default
			TRenderUpdateClipSizeEvents(events : [string]); // ["transformchanged"] by default
}


trender(t : Tropic, style : [TRenderStyle]) -> () -> void {
	trender2(t, style).first;
}

trender2(t : Tropic, style : [TRenderStyle]) -> Pair<() -> void, (int) -> PositionScale> {
	trender2Stage(t, style, false);
}

trenderStage(t : Tropic, style : [TRenderStyle]) -> () -> void {
	trender2Stage(t, style, true).first;
}

trender2Stage(t : Tropic, style : [TRenderStyle], toStage : bool) -> Pair<() -> void, (int) -> PositionScale> {
	// Scale to density-independend pixels (dp).
	// See https://material.io/guidelines/layout/units-measurements.html
	//
	// In js, dp = px, since px refers to css pixels and it's the browser's job to make them
	// correspond to the same physical dimensions.
	// See https://www.w3.org/TR/css3-values/#reference-pixel

	dpif = if (js) 1.0 else extractStruct(style, TDpif(screenDensity)).dpif ;	// There is also getPixelsPerCm which might be a useful alternative

	awh = extractStruct(style, TInspectStageWH(make(WidthHeight(getStageWidth(), getStageHeight()))));
	root = extractStruct(style, RenderRoot("")).rootId;

	stageWH = extractStruct(style, TStageWH(getStageWidth(), getStageHeight()));
	sf = if (!js && dpif == 1.0) {
		ws = max(1.0, stageWH.width / 1536.0);
		hs = max(1.0, stageWH.height / 1536.0);

		// Desktop where we do not have accurate DPI: Just use 1536 as the max useful resolution in each direction
		min(ws, hs)
	} else dpif;

	scale = select2u(accessibilityZoom, awh.wh, \as, wh -> {
		if (js) {
			Factor(as, as)
		} else {
			ws = max(1.0, wh.width / 1536.0);
			hs = max(1.0, wh.height / 1536.0);
			s = as * max(sf, min(ws, hs));
			Factor(s, s);
		}
	});

	dpiFactor = extractStruct(style, TInspectDpiFactor(make(Factor(1.0, 1.0)))).factor;

	u1 = connect(scale.first, dpiFactor);

	sheet = extractStruct(style, emptyStylesheet);

	form =
		FDisposer(
			tropic2fform(TScale(scale.first, t), sheet, awh.wh),
			\ -> {
				scale.second();
				u1()
			}
		)
		|> monitorZooming;

	grab : TGrabSnapshot = extractStruct(style, TGrabSnapshot(\fn -> nop));
	disp1 = grab.grabFn(\ -> {
		TSFForm(fform2sfform(form, false), TFormMetrics(const(fgetValue(awh.wh).width), const(fgetValue(awh.wh).height), const(fgetValue(awh.wh).height)))
	});

	Pair(
		{
			disp2 = if (toStage) frenderStage(form, awh.wh) else frenderTo(form, awh.wh, root);

			\ -> {
				disp1();
				disp2();
			}
		},
		\id ->
			eitherMap(
				findTaggedFFormPositionScale(form, id),
				\ps -> PositionScale(Point(ps.pos.x / fgetValue(dpiFactor).x, ps.pos.y / fgetValue(dpiFactor).y), ps.scale), // Convert to trender coordinates!
				zeroPositionScale
			)
	);
}

accessibilityZoomFactors = [0.25, 0.33, 0.5, 0.66, 0.75, 0.8, 0.9, 1.0, 1.1, 1.25, 1.5, 1.75, 2.0, 2.5, 3.0, 4.0, 5.0];

monitorZooming(f : FForm) -> FForm {
	if (!js) {
		ctrlDown = ref false;
		zoomTooltipVisible = make(false);

		FConstruct(
			[
				\ -> addEventListener(getStage(), "resize", \ -> if (getBrowserZoom() != 1.0) next(accessibilityZoom, 1.0)),
				make2SubscribeUns(accessibilityZoom, zoomTooltipVisible, \az, vis -> {
					if (vis)
						[
							interruptibleTimer(2000, \ -> nextDistinct(zoomTooltipVisible, false)),
							frender(
								tropic2fform(
									TBorder4(
										8.0,
										TFrame(8.0, 4.0, [Fill(0x424242)],
											TText(_("Zoom") + ": " + i2s(floor(az * 100.0)) + " %", [Fill(white)])
										)
									)
									|> TCenterX,
									emptyStylesheet,
									const(WidthHeight(getStageWidth(), getStageHeight()))
								),
								make(WidthHeight(getStageWidth(), getStageHeight()))
							)
						]
					else
						[]
				})
			],
			FInteractive(
				[
					KeyDown2(\handled, ki -> {
						ctrlDown := ki.ctrl || ki.keycode == KEY_BRACKET_LEFT;

						if (!handled && ki.ctrl && getBrowserZoom() == 1.0) {
							if (ki.keycode  == 187 || ki.utf == "=") {
								ki.preventDefault();
								v = getValue(accessibilityZoom);
								next(accessibilityZoom, fold(accessibilityZoomFactors, 5.0, \acc, sc -> if (sc < acc && sc > v) sc else acc));
								nextDistinct(zoomTooltipVisible, true);
								setKeyValue("accessibility_zoom", d2s(getValue(accessibilityZoom)));
								true
							} else if (ki.keycode  == 95 || ki.utf == "-") {
								ki.preventDefault();
								v = getValue(accessibilityZoom);
								next(accessibilityZoom, fold(accessibilityZoomFactors, 0.25, \acc, sc -> if (sc > acc && sc < v) sc else acc));
								nextDistinct(zoomTooltipVisible, true);
								setKeyValue("accessibility_zoom", d2s(getValue(accessibilityZoom)));
								true
							} else {
								false
							}
						} else
							handled
					}),
					KeyUp2(\handled, ki -> {
						ctrlDown := ki.ctrl && ki.keycode != KEY_BRACKET_LEFT;
						handled;
					}),
					// FineGrainMouseWheel2(\handled, mi ->
					// 	if (!handled && ^ctrlDown && getBrowserZoom() == 1.0) {
					// 		m = mi();

					// 		if (m.dy > 0.1) {
					// 			m.preventDefault();
					// 			v = getValue(accessibilityZoom);
					// 			next(accessibilityZoom, fold(accessibilityZoomFactors, 5.0, \acc, sc -> if (sc < acc && sc > v) sc else acc));
					// 			setKeyValue("accessibility_zoom", d2s(getValue(accessibilityZoom)));
					// 			true
					// 		} else if (m.dy < -0.1) {
					// 			m.preventDefault();
					// 			v = getValue(accessibilityZoom);
					// 			next(accessibilityZoom, fold(accessibilityZoomFactors, 0.25, \acc, sc -> if (sc > acc && sc < v) sc else acc));
					// 			setKeyValue("accessibility_zoom", d2s(getValue(accessibilityZoom)));
					// 			true
					// 		} else {
					// 			false
					// 		}
					// 	} else
					// 		handled
					// )
				],
				f
			)
		)
	} else {
		f
	}
}

trenderManager(manager : TManager, t : Tropic) -> () -> void {
	r = trender2(t, manager.renderStyle);
	if (^(manager.findPositionScaleFn) == dummyTFinder) {
		manager.findPositionScaleFn := r.second;
	} else {
		println("Warning: New call of trenderManager would overwrite findPositionScaleFn");
	}
	r.first;
}

renderTropicToClip(parent : native, tr : Tropic, style : [TRenderToClipStyle]) -> () -> () -> void {
	zorder = extractStruct(style, TRenderZorder(const([0]))).zorder;
	updateClipSizeEvents = extractStruct(style, TRenderUpdateClipSizeEvents(["transformchanged"])).events;
	accessProperties = replaceStructMany([TagName("div"), FAccessStyle("position", const("relative"))], extractFAccessProperties(style));
	ot = optimizeTropic(resolveTropicCss(tr, emptyStylesheet));
	clipPos = make(Point(0.0, 0.0));
	clipWH = make(WidthHeight(0.0, 0.0));
	transformMatrix = fselectLift(clipPos, \p -> positionScale2TransformMatrix(PositionScale(p, Point(1.0, 1.0))));
	parentInfo = TParentInfo(makeTParentInfo(clipWH) with transformMatrix = transformMatrix);
	tacc = tropic2Acc(ot, parentInfo, emptyStylesheet, false);
	fform = FAccess(accessProperties, optimizeFForm(tacc.form));
	\ -> {
		r = renderFForm(fform, zorder);
		d = concat(
			if (length(r.clips) > 0) {
				clip = r.clips[0];
				hasFillers = fselect2(tacc.xFillers, tacc.yFillers, FLift2(\xf, yf -> xf > 0.0 || yf > 0.0));
				updateClipSize = \ -> {
					rect = getClipBoundingClientRect(clip);
					if (length(rect) > 3) {
						nextDistinct(clipPos, Point(rect[0], rect[1]));
						nextDistinct(clipWH, if (fgetValue(hasFillers)) WidthHeight(rect[2], rect[3]) else WidthHeight(0.0, 0.0));
					}
				}

				concat(
					[
						makeSubscribeUns(tacc.xFillers, \xf -> {
							if (xf > 0.0) {
								setClipStyle(clip, "width", d2s(xf * 100.0) + "%");

								[
									make2Subscribe(tacc.minWidth, tacc.maxWidth, \minW, maxW -> {
										setClipStyle(clip, "minWidth", d2s(minW) + "px");
										setClipStyle(clip, "maxWidth", d2s(maxW) + "px");
									})()
								]
							} else {
								setClipStyle(clip, "minWidth", "");
								setClipStyle(clip, "maxWidth", "");

								[
									makeSubscribe(tacc.metrics.width, \w -> {
										setClipStyle(clip, "width", d2s(w) + "px");
									})()
								]
							}
						})(),
						makeSubscribeUns(tacc.yFillers, \yf -> {
							if (yf > 0.0) {
								setClipStyle(clip, "height", d2s(yf * 100.0) + "%");

								[
									make2Subscribe(tacc.minHeight, tacc.maxHeight, \minH, maxH -> {
										setClipStyle(clip, "minHeight", d2s(minH) + "px");
										setClipStyle(clip, "maxHeight", d2s(maxH) + "px");
									})()
								]
							} else {
								setClipStyle(clip, "minHeight", "");
								setClipStyle(clip, "maxHeight", "");

								[
									makeSubscribe(tacc.metrics.height, \h -> {
										setClipStyle(clip, "height", d2s(h) + "px");
									})()
								]
							}
						})(),
						makeSubscribe(flastElement(zorder, const(0)), \i -> {
							addChildAt(parent, clip, i);
						})(),
						makeSubscribeUns(hasFillers, \hf -> {
							if (hf) {
								updateClipSize();

								[
									// TODO: use ResizeObserver to monitor size changes
									addEventListener(clip, "resize", updateClipSize)
								]
							} else {
								[]
							}
						})(),
						\ -> {
							removeChild(parent, clip);
						}
					],
					// TODO: use proper event to monitor position changes
					map(
						updateClipSizeEvents,
						\updateClipSizeEvent -> addEventListener(clip, updateClipSizeEvent, updateClipSize)
					)
				);
			} else [],
			r.disposers
		);
		\ -> applyall(d);
	}
}