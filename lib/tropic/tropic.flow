// Â© Copyright 2014 Area9 Technologies.

import fform/sfform;
import math/geometry;
import ui/scrollable_style;
import formats/css/stylesheet;

export {

// Tropic types
Tropic ::=
	TPositionScale,
	// Elements we basically reuse from Form
	TEmpty, TText, TParagraph, TGraphics, TDynamicGraphics, TPicture,

	TRealHTML, TVideo,

	// Mirror versions of the Forms, except recursive to Tropic
	TBorder, TTranslate, TScale, TRotate, TOrigin, TAlpha, TVisible,
	TMask,
	TFilter, TCursor,
	TCrop2, TAccess,
	TInteractive,
	TBaselineOffset,
	TFullWindow,
	TFullScreen,

	// Form fallback
	TForm, TFormIn, TFormAvailable, TFForm, TSFForm,

	// Replacement of Mutable and Switch
	TMutable,
	TIf, TCase,
	TConstruct, TCreate2,
	TDispose,

	// New layout primitives
	TGroup2, TCols2, TBaselineCols2, TLines2, TBaselineLines2, TAvailable,
	TTweak, TZoomFill, TFillX, TFillY, TRounded,

	TAttach,

	// Overrides the size
	TSize,

	// Retrieves size of tropic
	TSizeOf,

	// Crop second tropic to fist tropic size
	// Difference from TCrop, that this one don't take concrete size
	TCropSize,

	// Move the 0,0 point of a Tropic based on another Tropic
	TShift,

	TMinimumGroup2, TSubtractGroup2,

	// For debugging metrics
	TDebug,

	// Named values
	TLet, TLetAvailable, TNamespace, TDisplay, TGhost, TGhostMin,

	// Tag this element, so we can get the position later
	TTag, TTag2, TInspect, TOverride,

	// Element animation
	TAnimation,

	// Creates some tropic from css stylesheet
	TCssBlock,

	// Construct a Tropic using a function
	TNative,

	// Construct a Tropic using a function
	// Lets you to manipulate tropic metrics from TAcc
	// Passes tropic2Acc, TParentInfo, stylesheet and metricOnly flag inside
	// Intended for usage only in special cases
	// Check TransformTAcc2 in tropic_gui.flow for simplified version
	TransformTAcc,
	TDynamicGroup2
	;

// Practically exact copies of Form
TEmpty();
TText(text : string, style : [TCharacterStyle]);
	TCharacterStyle ::= FTextStyle, TCssStyle;
TParagraph(text : Transform<string>, style : [TParagraphStyle]);
	TParagraphStyle ::= FParagraphStyle, TCssStyle, ParagraphMargin, FullWidth, TCharacterStyle; // Important that TCharacterStyle is a sub-type even if it is redundant
		// Margin around a paragraph
		ParagraphMargin(top : double, bottom : double);
		// Paragraph takes all available width
		FullWidth();
TGraphics(path : [StaticGraphicOp], style : [TGraphicsStyle]);
	TGraphicsStyle ::= GraphicsStyle, TCssStyle;
TDynamicGraphics(path : Transform<[StaticGraphicOp]>, style : Transform<[TGraphicsStyle]>);
TPicture(url : string, style : [TPictureStyle]);

	TPictureStyle ::=
		PictureStyle,
		TCssStyle,
		// Specifies the resulting size - will actively resize the real picture to this size
		WidthHeight,
		TPictureSize,
		TPictureKeepAspectRatio,
		TIgnoreCachedPictureSize;
	TIgnoreCachedPictureSize();
	TPictureSize(size : Transform<WidthHeight>); // Scales to available area for WidthHeight(-1., -1.)
	TPictureKeepAspectRatio(); // Keep aspect ratio while scaling to TPictureSize

TRealHTML(url : string, wh : Transform<WidthHeight>, style : [RealHTMLStyle]);

TVideo(filename : string, wh : DynamicBehaviour<WidthHeight>, style : [FVideoStyle]);

// Recursive Forms, modelled after Form with small adjustments
TBorder(left : double, top : double, right : double, bottom : double, form : Tropic);
TTranslate : (point : Transform<Point>, form : Tropic);
TScale : (factor : Transform<Factor>, form : Tropic);
TRotate : (degree : Transform<double>, form : Tropic);
// Define tranformation origin as Factor of the form size.
// TScale and TRotate will use this origin as center point of all the transformations applied.
// For example if you want to rotate form around its center use TOrigin(const(Factor(0.5, 0.5), ...).
// By default origin is Factor(0.0, 0.0) which is the top left corner of the form.
TOrigin : (origin : Transform<Factor>, form : Tropic);
TAlpha : (alpha : Transform<double>, form : Tropic);
TMask : (main : Tropic, mask : Tropic);
TFilter(filters : [Filters], form : Tropic);
TCursor(kind : CursorShape2, form : Tropic);
TAccess : (properties : [FAccessProperty], form : Tropic);
TCrop(topleft : Transform<Point>, widthHeight : Transform<WidthHeight>, form : Tropic) -> Tropic {TCrop2(topleft, widthHeight, const(true), form)};
TCrop2 : (topleft : Transform<Point>, widthHeight : Transform<WidthHeight>, enabled : Transform<bool>, form : Tropic);

// The tropic is NOT destroyed/reconstructed when 'visible' becomes false/true for performance, only hidden.
// See TShow in tropic_gui.flow if you want it to be destroyed and reconstructed.
TVisible : (visible : Transform<bool>, tropic : Tropic);

TInteractive : (interactivity: [TInteractivity], form : Tropic);
	TInteractivity ::= TMouseXY, TMouseInside, TMouseDown, TMouseDownGhost, TMouseRightDown, TMouseRightDownGhost, TMouseMiddleDown, TMouseMiddleDownGhost, TRollOver, TKeyBroadcast, TKey, TMouseWheel, TPanGesture, TPinchGesture, TFileDrop, EventHandler;
		// Where is the mouse in local x,y coordinates?
		TMouseXY : (point : DynamicBehaviour<Point>);

		// Is the mouse inside the child?
		// If handle is false, then allow lower-z-order element to handle mouse inside events.
		// In other words it is transparent for events. If someone above us handled it, we do
		// not change the behaviour even when inside.
		// If handle is true, then we handle it when inside, otherwise not.
		// ATTENTION: TMouseInside does not work for TRANSPARENT forms in JS-mode
		TMouseInside : (inside : DynamicBehaviour<bool>, handle : bool);

		// Is the mouse pressed down? We respect z-order, and handle this if inside
		TMouseDown : (down : DynamicBehaviour<bool>);

		// Same as TMouseDown, except that it allows lower-z-order element to handle mouse
		// (in other words it is transparent for events)
		TMouseDownGhost : (down : DynamicBehaviour<bool>);

		// Is the mouse right button pressed down? We respect z-order, and handle this if inside
		TMouseRightDown : (down : DynamicBehaviour<bool>);

		// Same as TMouseMiddleDown, except that it allows lower-z-order element to handle mouse
		// (in other words it is transparent for events)
		TMouseRightDownGhost : (down : DynamicBehaviour<bool>);

		// Is the mouse wheel button pressed down? We respect z-order, and handle this if inside
		TMouseMiddleDown : (down : DynamicBehaviour<bool>);

		// Same as TMouseMiddleDown, except that it allows lower-z-order element to handle mouse
		// (in other words it is transparent for events)
		TMouseMiddleDownGhost : (down : DynamicBehaviour<bool>);

		// Is the mouse rolled over this form (or any of the children).
		// This respects z-order, so only the top-most clip will get this event.
		// Does not work on touch devices. Use TMouseInside above for that.
		TRollOver : (over : DynamicBehaviour<bool>);

		// Is the mouse wheel moved?
		TMouseWheel(delta : DynamicBehaviour<double>);


		// Triggered when a key is pressed. There is filter to decide what events are interesting.
		// This respects z-order. The top-most interactive that wants the event gets it.
		// The pressed-behaviour turns into the key, and then back to "noKey" when the key is released (or auto-repeat kicks in).
		TKey(pressed : DynamicBehaviour<KeyEvent>, filterFn : (KeyEvent) -> bool);
			noKey = KeyEvent("", false, false, false, false, -1, nop);
		// Construct a listener for a key event.
		makeTKey(filterFn : (KeyEvent) -> bool) -> TKey { TKey(make(noKey), filterFn) }

		// Is the keyboard button pressed? There is no z-order handling here. All interactive receive this event.
		// The pressed-behaviour turns into the key, and then back to "noKey" when the key is released (or auto-repeat kicks in).
		TKeyBroadcast : (pressed : DynamicBehaviour<KeyEvent>);

		// Construct a broadcast key-listener. Useful for shift, ctrl, and similar states at a top level
		makeTKeyBroadcast() -> TKeyBroadcast { TKeyBroadcast(make(noKey)) }

		// The incremental displacement vector (dx,dy) is given in global coordinates
		TPanGesture : (fn : (state : GestureState, dx : double, dy : double) -> bool);

		TPinchGesture : (fn : (state : GestureState, scale : double, dx : double, dy : double) -> bool);

		// Makes nested Form to allow any file to be dropped. Provides name and file content as data URL.
		// maxFiles is a limit of files should be loaded at one drop. If you do not want to limit set to -1.
		// Note: onData 3'rd argument should be called every time when you are ready to receive next chunk.
		// mimeTypeRegExpFilter is a regular expression string which applies to each file MIME type. If you don't want to filter just set to empty string.
		// Here is MIME Types list https://www.sitepoint.com/web-foundations/mime-types-complete-list/
		TFileDrop : (maxFiles : int, mimeTypeRegExpFilter : string, onDone : (files : [native]) -> void);


	// TODO: Introduce more events here

	// MouseWheel, FineGrainMouseWheel - join these to one

	// PinchGesture - We have some wrappers for these gestures to make them more robust. See ui/gestures.flow
	// SwipeGesture,

// Add the offset to the baseline
TBaselineOffset(offset : Transform<double>, tropic : Tropic);


// Provides a way to get a Tropic as full window
// You cannot start with fullscreen on
TFullWindow(fullwindow : DynamicBehaviour<bool>, tropic : Tropic);

// Provides a way to get a Tropic as full screen
// You cannot start with fullscreen on
TFullScreen(fullscreen : DynamicBehaviour<bool>, tropic : Tropic);

TMutable(tropic : Transform<Tropic>);
TIf(condition : Transform<bool>, then : Tropic, elset : Tropic);

// Picks the best case based on how much space is available.
// The sizes define the ideal size range for the correspond case.
// The length of the sizes has to match the cases.
// The sizes should reflect the minimum and maximum box that is useful the corresponding case.
// Example: If we have a small version of a UI that does not require more than 100x100 pixels,
// and then a bigger one, we can do this to automatically choose the best one based on the
// available space:
// TCase( [ TFixed(100.0, 100.), TGroup2(TFixed(100.0, 100.0), TFillXY())], [ small, big ] )

TCase(sizes : [Tropic], cases : [Tropic]);

TConstruct(constructors : [() -> () -> void], tropic : Tropic);

TCreate2(current : ref Tropic, fn : () -> Tropic);
TCreate(fn : () -> Tropic) -> TCreate2 {
	TCreate2(ref TEmpty(), fn);
}

// Be careful using TDispose, it calls own disposers BEFORE disposers of tropic content.
// For comparison, TConstruct calls inner disposers from content, then its own ones.
// In other words, TDispose implements "reverse" logic of calling disposers.
TDispose(disposers : [() -> void], tropic : Tropic);

// An escape hatch to include a Form in Tropic, which gets 0 available. The size is defined by Form.
TForm(form : Form);
// An escape hatch to include a Form in Tropic. Will get available as defined by the box. Size is defined by the box.
TFormIn(form : Form, box : Tropic);

// An escape hatch to include a Form in Tropic. Will get available as defined by the box. Size is defined by the form.
TFormAvailable(form : Form, box : Tropic);

TFForm(fform : FForm, metrics : TFormMetrics);

TSFForm(fform : SFForm, metrics : TFormMetrics);

// Place boxes on top of each other at the top, left corner
TGroup2(box1 : Tropic, box2 : Tropic);

// Place boxes next to each other such that they are top aligned
TCols2(box1 : Tropic, box2 : Tropic);

// Place boxes next to each other, aligning their baselines
TBaselineCols2(box1 : Tropic, baseline : Tropic);

// Place boxes on top of each others such that they are left aligned
TLines2(box1 : Tropic, box2 : Tropic);

// Place boxes on top of each others such that they are left aligned and keeps baseline of the first box
TBaselineLines2(box1 : Tropic, box2 : Tropic);

// Define how much space fillers have to work with in this box. If the box is physically larger than maxsize, the box will win.
TAvailable(content : Tropic, maxsize : Tropic);

// Powerful manipulation with resizing, cropping, alignment.
// Pass TEmpty to size if you want to align content to its metrics (useful for content snapping without any other form).
TTweak(style : [TTweakStyle], content : Tropic, size : Tropic);
	TTweakStyle ::= TFillZoom, TFitZoom, TAlign, TSnapSize, TFillScale, TTweakNoLeftTopLimit;

	// Zoom to fill the resulting area. If crop is true, the excess area is removed
	TFillZoom(crop : bool);
	// Override zoom factor (will be used if it is greater than automatically calculated)
	TFillScale(scale : Transform<double>);

	// Zoom to fit, filling with empty space if keepAspect is given
	// If crop is true crops size to scaled content and doesn't translate it
	TFitZoom(keepAspect : bool, crop : bool);
	// How to align the content in the size, when there is excess space
	TAlign(xalign : Transform<double>, yalign : Transform<double>);
	// Do not pin content to left top box corner if content is bigger that box
	TTweakNoLeftTopLimit();
	// Ceils the size to the nearest multiple of the snap size
	// ceil - should snapped size be bigger or smaller than given
	TSnapSize(xsnap : double, ysnap : double, ceil : bool);


// Do not use directly - this part is handled by trender.
TZoomFill(box : Tropic);

// Grow maximally in the width
TFillX();

// Grow maximally in the height
TFillY();

// Given a ghost, that defines resizing behaviour, construct a tropic with access to the metrics of the ghost.
// The size is given by the maximum of the ghost and the result.
TAttach(ghost : Tropic, fn : (TFormMetrics) -> Tropic);

	TFormMetrics(
		width : Transform<double>,
		height : Transform<double>,
		baseline : Transform<double>
	);

	zeroTMetrics = TFormMetrics(zero, zero, zero);

// A rounded rectangle that is as big as the size metrics
TRounded(nw : double, ne : double, lw : double, le : double, style : [TGraphicsStyle], size : Tropic);

// Like Crop, except it only crops the size, and not any position
TCropSize(size : Tropic, form : Tropic);

// Moves a tropic the distance, so that the size of the distance is placed at 0,0 in the form.
// The size comes from the form. Size is taken from form as is.
TShift(form : Tropic, distance : Tropic);

// Overrides the size
TSize(size : Tropic, form : Tropic);

// Retrieves size of trpoic
TSizeOf(content : Tropic);

// The smallest of two tropics
TMinimumGroup2(t1 : Tropic, t2 : Tropic);

// Size is t1 - t2
TSubtractGroup2(t1 : Tropic, t2 : Tropic);

// Debug a tropic - size is the given color, minimum size is blue rectangle, maximum size is green rectangle
// how much space do we get from the parent - red
TDebug(color : int, b : Tropic);

// Define a named value in the given scope. This can be used with TDisplay and TGhost.
// Notice TGhost only works if the named thing is displayed.
TLet(name : string, value : Tropic, scope : Tropic);

// Works the same as TLet, only takes available as its value.
TLetAvailable(name : string, scope : Tropic);

// Use clean namespace. Inner TLet names won't override any outer TLet and vice versa.
// Inner TDisplay, TGhost, TGhostMin won't see any outer TLet and vice versa.
TNamespace(tropic : Tropic);

// Displays the named value as defined by TLet.
TDisplay(name : string);

// Constructs an empty box with the same metrics as the named value. Notice this only works if the named value is TDisplayed
TGhost(name : string);

// Constructs an empty box with the same minimum metrics as the named value. Notice this only works if the named value is TDisplayed
TGhostMin(name : string);

// Tag this Tropic so that we can find the position with trenderManager later
TTag(tag : int, t : Tropic);

TTag2(setfn : (fn : () -> TransformMatrix) -> void, t : Tropic);

TPositionScale(positionScale : DynamicBehaviour<PositionScale>, t : Tropic);

// Inspects metrics of t. See TAttach* helpers into tropic_gui also.
TInspect(inspectors : [TInspector], t : Tropic);
	TInspector ::= Width, Height, IBaseline, AvailableWidth, AvailableHeight, ISize, IAvailable, IMinWidth, IMinHeight, IMaxWidth, IMaxHeight,
		IMinSize, IMaxSize, IMetricsOnly;

		IWidth(width : DynamicBehaviour<double>) -> Width { Width(width); };
		IHeight(height : DynamicBehaviour<double>) -> Height { Height(height); };
		IBaseline(baseline : DynamicBehaviour<double>);

		IAvailableWidth(width : DynamicBehaviour<double>) -> AvailableWidth { AvailableWidth(width); };
		IAvailableHeight(height : DynamicBehaviour<double>) -> AvailableHeight { AvailableHeight(height); };

		IMinWidth(width : DynamicBehaviour<double>);
		IMinHeight(height : DynamicBehaviour<double>);

		IMaxWidth(width : DynamicBehaviour<double>);
		IMaxHeight(height : DynamicBehaviour<double>);

		IMinSize(widthHeight : DynamicBehaviour<WidthHeight>);
		IMaxSize(widthHeight : DynamicBehaviour<WidthHeight>);

		// Don't show content, only calculate metrics
		IMetricsOnly();

// Overrides metrics of t.
TOverride(overriders : [TOverrider], t : Tropic);
	TOverrider ::= OWidth, OHeight, OAvailableWidth, OAvailableHeight, OSize, OAvailable, OBaseline, OMinWidth, OMinHeight, OMaxWidth, OMaxHeight,
		OMinSize, OMaxSize, IMetricsOnly;

		OWidth(width : Transform<double>);
		OHeight(height : Transform<double>);
		OBaseline(baseline : Transform<double>);

		OAvailableWidth(width : Transform<double>);
		OAvailableHeight(height : Transform<double>);

		OSize(widthHeight : Transform<WidthHeight>);
		OAvailable(widthHeight : Transform<WidthHeight>);

		OMinWidth(width : Transform<double>);
		OMinHeight(height : Transform<double>);

		OMaxWidth(width : Transform<double>);
		OMaxHeight(height : Transform<double>);

		OMinSize(widthHeight : Transform<WidthHeight>);
		OMaxSize(widthHeight : Transform<WidthHeight>);

		// Don't show content, only calculate metrics
		OMetricsOnly() -> TOverrider { IMetricsOnly(); };

// Keyframe-based animation (asynchronous in js).
// Keyframes are evenly distributed across timeline with first and last on the ends.
// Modifying keyframes Transform cancels previous animation and immediately starts new one.
// For example if you want to animate content fading-in use
// TAnimation(..., const([FAnimationKeyframe([FAlphaValue(0.0)]), FAnimationKeyframe([FAlphaValue(1.0)])]), [])
TAnimation(content : Tropic, keyframes : Transform<[FAnimationKeyframe]>, style : [FAnimationStyle]);

// Trying to create Tropic from css stylesheet. Second argument will be rendered, if unable to create Tropic from css stylesheet.
TCssBlock(style : [TCssStyle], tropic : Tropic);
	TCssStyle ::= TStyle, TStyleWithSelector;
		TStyle(name : string);
		TStyleWithSelector(name : string, selector : string);

TNative(
	fn : (
		// How much is allocated to this element, including any x-fill expanders here?
		maxX : Transform<double>,
		// How much is allocated to this element, including any y-fill expanders here?
		maxY : Transform<double>
	) -> TAcc
);

TransformTAcc(
	fn : (
		tropic2acc : (t : Tropic, parentInfo : TParentInfo, sheet : Stylesheet, metricsOnly : bool) -> TAcc,
		parentInfo : TParentInfo,
		sheet : Stylesheet,
		metricsOnly : bool
	) -> TAcc
);

TDynamicGroup2 : (stackChanges : DynamicBehaviour<[TGroupChange]>, currentStack : ref [Tropic], combiner : TCombiner);
	TGroupChange ::= TGroupAdd, TGroupDelete, TGroupMove, TGroupReplace;

		TGroupAdd : (tropic : Tropic, z : int);
		TGroupDelete : (z : int);
		TGroupMove : (from : int, to : int);
		TGroupReplace : (tropic : Tropic, z : int);

	TCombiner ::= TGroupCombiner, TLinesCombiner, TColsCombiner, TColsACombiner, TLinesACombiner;
		TGroupCombiner();
		TLinesCombiner();
		TLinesACombiner();
		TColsCombiner();
		TColsACombiner();

TDynamicGroup(stackChanges : DynamicBehaviour<[TGroupChange]>) -> TDynamicGroup2 {
	TDynamicGroup2(stackChanges, ref [], TGroupCombiner());
}

	// Bookkeeping info about each Form to make it possible to do the layout
	TAcc(
		// The form to display.
		form : FForm,
		// How big it is, including fillers
		metrics : TFormMetrics,
		// How big it is, excluding fillers
		minWidth : Transform<double>,
		minHeight : Transform<double>,
		// How big it is at max?
		maxWidth : Transform<double>,
		maxHeight : Transform<double>,
		// How many x fillers do we have?
		xFillers : Transform<double>,
		// How many y fillrs do we have?
		yFillers : Transform<double>,
		// Should we add fillers to min?
		addFillers : Transform<bool>,
		// Does this tropic have constant size?
		xConstant : bool,
		yConstant : bool,
		// Clean up
		disposers : [() -> void]
	);

	zeroTAcc = TAcc(FEmpty(), TFormMetrics(zero, zero, zero), zero, zero, zero, zero, zero, zero, const(true), true, true, []);

	TParentInfo(
		// How much is allocated to this element, including any x-fill expanders here?
		maxX : Transform<double>,
		// How much is allocated to this element, including any y-fill expanders here?
		maxY : Transform<double>,

		// The named boxes defined by Let
		environment : Tree<string, TVar>,
		// Position and scale of the element
		transformMatrix : Transform<TransformMatrix>
	);

	zeroTParentInfo = TParentInfo(zero, zero, makeTree(), const(zeroTransformMatrix));

	TVar(
		tropic : Tropic,
		width : DynamicBehaviour<double>,
		height : DynamicBehaviour<double>,
		baseline : DynamicBehaviour<double>,
		dHeight : DynamicBehaviour<double>,
		minWidth : DynamicBehaviour<double>,
		minHeight : DynamicBehaviour<double>,
		maxWidth : DynamicBehaviour<double>,
		maxHeight : DynamicBehaviour<double>,
		xConstant : ref bool,
		yConstant : ref bool,
	);

	extractCommonAlignmentFromTParagraphStyles(styles: [TParagraphStyle]) -> CommonAlignment;

	TEnabled(enabled : Transform<bool>);
	TSetRTL(rtl : bool);
}

extractCommonAlignmentFromTParagraphStyles(styles: [TParagraphStyle]) -> CommonAlignment {
	fold(styles, StartAlign(), \acc, style ->
		switch (style) {
			EndAlign(): style;
			LeftAlign(): style;
			RightAlign(): style;
			CenterAlign(): style;
			default: acc;
		}
	)
}