import form/paragraph;
import tropic/tropic_paragraph_types;

export {
	makeTZeroSpaceElement(style : [CharacterStyle]) -> Tropic;
	addUnderlineToTropic(tropic : Tropic, color : int, doubleLine : bool) -> Tropic;
	addBaselineShiftToTropic(form : Tropic, fontSize : double, shift : double, ) -> Tropic;
	addDashedLineToTropic(tropic : Tropic, color : int) -> Tropic;
}

addUnderlineToTropic(tropic : Tropic, color : int, doubleLine : bool) -> Tropic {
	wordW = make(0.);
	baselineB = make(0.);

	view = TInspect([IWidth(wordW), IBaseline(baselineB)], tropic);
	underline = TRectangle([Fill(color)], TSizedWidth(wordW, 1.));

	TLines([
		view |> TBorderBottom(if (doubleLine) -2. else -1.),
		if (doubleLine) underline |> TBorderBottom(1.) else TEmpty(),
		underline
	])
	|> (\t -> TOverride([OBaseline(baselineB)], t));
}

addDashedLineToTropic(tropic : Tropic, color : int) -> Tropic {
	wordWHB = makeWH();
	baselineB = make(0.);
	TGroup2(
		TInspect([ISize(wordWHB), IBaseline(baselineB)], tropic),
		TSelect(wordWHB, \wh -> TForm(
			DottedLine(0.0, wh.height, wh.width, wh.height, 3.0, 0.7, [Stroke(color)])
		))
	)
	|> (\t -> TOverride([OBaseline(baselineB)], t))
}

makeTSpace(space : string, style : [CharacterStyle]) -> TWord {
	if (space == "\u200b") TZeroWidthSpace(style) else TSpace(style)
}

makeTZeroSpaceElement(style : [CharacterStyle]) -> Tropic {
	spaceMetrics = getStaticFormSize(Text(" ", style));
	if (isUrlParameterFalse("baseline_offset_metrics")) {
		TBaselineOffset(const(spaceMetrics.baseline), TFixed(0., spaceMetrics.height));
	} else {
		TBaselineOffset(const(spaceMetrics.baseline - spaceMetrics.height), TFixed(0., spaceMetrics.height));
	};
}

addBaselineShiftToTropic(form : Tropic, fontSize : double, shift : double) -> Tropic {
	if (shift != 0.0) {
		shiftCoef = if (shift < 0.0) -0.4 else shift;
		metrics = getTropicMetrics(form);
		size = if (fontSize != 0.0) fontSize else metrics.height;
		TBaseline(const(-size * shiftCoef + metrics.baseline), form);
	} else form;
}
