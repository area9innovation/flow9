import form/paragraph;
import tropic/tropic_paragraph_types;

export {
	makeTZeroSpaceElement(style : [CharacterStyle]) -> Tropic;
	addUnderlineToTropic(tropic : Tropic, color : int, doubleLine : bool) -> Tropic;
	addBaselineShiftToTropic(form : Tropic, fontSize : double, shift : double, ) -> Tropic;
	addDashedLineToTropic(tropic : Tropic, color : int) -> Tropic;


}

TLineByWidth(color : int, width : Tropic) -> Tropic {
	TRectangle([Fill(color)], TGroup2(TWidth(width), TFixed(0., 1.)))
}

addUnderlineToTropic(tropic : Tropic, color : int, doubleLine : bool) -> Tropic {
	TCopySize2(tropic, \size, view -> if (doubleLine)  TLines([
		TBorder(0., 0., 0., -2., view),
		TBorder(0., 0., 0., 1., TLineByWidth(color, size)),
		TLineByWidth(color, size)
	]) else TLines2(
		TBorder(0., 0., 0., -1., view),
		TLineByWidth(color, size)
	));
}

addDashedLineToTropic(tropic : Tropic, color : int) -> Tropic {
	wordWHB = makeWH();
	TAttachBox2(tropic, wordWHB, TGroup2(tropic, TSelect(wordWHB, \wh -> TForm(
		DottedLine(0.0, wh.height, wh.width, wh.height, 3.0, 0.7, [Stroke(color)])
	))))
}

makeTSpace(space : string, style : [CharacterStyle]) -> TWord {
	if (space == "\u200b") TZeroWidthSpace(style) else TSpace(style)
}

makeTZeroSpaceElement(style : [CharacterStyle]) -> Tropic {
	spaceMetrics = getStaticFormSize(Text(" ", style));
	TBaselineOffset(const(spaceMetrics.baseline), TFixed(0., spaceMetrics.height));
}

addBaselineShiftToTropic(form : Tropic, fontSize : double, shift : double) -> Tropic {
	if (shift != 0.0) {
		shiftCoef = if (shift < 0.0) -0.4 else shift;
		metrics = getTropicMetrics(form);
		size = if (fontSize != 0.0) fontSize else metrics.height;
		TBaseline(const(-size * shiftCoef + metrics.baseline), form);
	} else form;
}
