import runtime;

export {
	addSpeechRecognitionStreamListeners(recognition : native, onStatus : (status : string) -> void, onResult : (result : string) -> void, onError : (error : string) -> void) -> void;

	native makeSpeechRecognition : io (continuous : bool, interimResults : bool, maxAlternatives : int, lang : string) -> native = SoundSupport.makeSpeechRecognition;
	native startSpeechRecognition : io (recognition : native) -> () -> void = SoundSupport.startSpeechRecognition;
}

addSpeechRecognitionStreamListeners(recognition : native, onStatus : (status : string) -> void, onResult : (result : string) -> void, onError : (error : string) -> void) -> void {
	addSpeechRecognitionEventListener(recognition, "onresult", onResult);
	addSpeechRecognitionEventListener(recognition, "onerror", onError);
	addSpeechRecognitionEventListener(recognition, "onnomatch", onStatus);
	addSpeechRecognitionEventListener(recognition, "onstart", onStatus);
	addSpeechRecognitionEventListener(recognition, "onend", onStatus);
	addSpeechRecognitionEventListener(recognition, "onspeechstart", onStatus);
	addSpeechRecognitionEventListener(recognition, "onspeechend", onStatus);
	addSpeechRecognitionEventListener(recognition, "onsoundstart", onStatus);
	addSpeechRecognitionEventListener(recognition, "onsoundend", onStatus);
	addSpeechRecognitionEventListener(recognition, "onaudiostart", onStatus);
	addSpeechRecognitionEventListener(recognition, "onaudioend", onStatus);
}

native addSpeechRecognitionEventListener : io (recognition : native, event : string, cb : (string) -> void) -> void = SoundSupport.addSpeechRecognitionEventListener;

addSpeechRecognitionEventListener(recognition : native, event : string, cb : (string) -> void) -> void {}
startSpeechRecognition(recognition : native) -> () -> void { nop; }
makeSpeechRecognition(contiuous : bool, interimResults : bool, maxAlternatives : int, lang : string) -> native { captureCallstack(); }