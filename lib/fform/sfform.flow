import fform/fformmetrics;

export {
	// Static version of FForm, useful for serialization

	SFForm ::= SFText, SFParagraph, FGraphics, SFTranslate, SFScale, SFRotate, SFAlpha, SFVisible, SFRenderable, SFGroup, SFGroup2, SFDecorator2,
		FEmpty, SFBorder, SFMask, SFFilter, SFCrop, SFPicture, SFFullWindow, FMForm, SFAccess, SFRealHTML, SFSetPending, SFVideo, SFTextInput;

	SFText(text : string, style : [CharacterStyle]);
	SFParagraph(text : string, style : [SFParagraphStyle]);
		SFParagraphStyle ::= CharacterStyle, SFParagraphWidth, SFParagraphEllipsis, CommonAlignment, CropWords, InterlineSpacing, Resolution;

			SFParagraphWidth(width : double);
			SFParagraphEllipsis(lines : int);

	SFTranslate(x : double, y : double, form : SFForm);

	SFScale(x : double, y : double, form : SFForm);

	SFRotate(degree : double, form : SFForm);

	SFAlpha(alpha : double, form : SFForm);

	SFVisible(visible : bool, form : SFForm);

	SFRenderable(renderable : bool, form : SFForm);

	SFGroup(layers : [SFForm], zorder : bool);
	SFGroup2(layer1 : SFForm, layer2 : SFForm, zorder : bool);
	SFDecorator2(form : SFForm, decorators : [SFForm], above : bool);

	SFBorder(left : double, top : double, right : double, bottom : double, form : SFForm);

	SFMask(main : SFForm, mask : SFForm);

	SFFilter(filters : [Filters], form : SFForm);

	SFCrop(left : double, top : double, width : double, height : double, form : SFForm);

	SFPicture(url : string, size : WidthHeight, style : [SFPictureStyle]);
		SFPictureStyle ::= DontCache, OnlyDownloadToCache;

	SFFullWindow(fullscreen : bool, form : SFForm);

	SFAccess(properties : [SFAccessProperty], form : SFForm);
		SFAccessProperty ::= AccessRole, AccessDescription, AccessKbdShortcutString, AccessSelectable,
			SFAccessState, SFAccessVisible, AccessTabindex, SFAccessEnabled, SFAccessAttribute, SFAccessTabOrder, SFAccessZorder;

			SFAccessState(state : string);
			SFAccessVisible(visible : bool);
			SFAccessEnabled(enabled : bool);
			SFAccessAttribute(name : string, value : string);
			SFAccessTabOrder(tabOrder : [int]);
			SFAccessZorder(zOrder : int);

	SFRealHTML(url : string, wh : WidthHeight, style : [SFRealHTMLStyle]);
		SFRealHTMLStyle ::= UpdateCachedContent, OverridePageDomain, SZoomEnabled, ReloadBlock, SMouseDisabled, SandBoxJS, RealHtmlShrink2Fit,
			WhitelistDomains, SViewBounds;

			SZoomEnabled(enabled : bool);
			SMouseDisabled(disabled : bool);
			SViewBounds(bounds : Bounds);

	SFSetPending(pending : int, form : SFForm);

	// If widthheihgt is 0,0 size is automatic, otherwise defined
	SFVideo(filename : string, wh : WidthHeight, style : [SFVideoStyle]);
		SFVideoStyle ::= SFVideoKeepAspectRatio, SFVideoPlay, SFVideoPosition, SFVideoLength, SFVideoVolume, SFVideoFullscreen, SFVideoLoop,
			FVideoControls, SFVideoSubtitles, SFVideoTimeRange, SFVideoPlaybackRate, SFVideoRealSize;

			SFVideoKeepAspectRatio(keep : bool);
			SFVideoPlay(play : bool);
			SFVideoPosition(position : double);
			SFVideoFullscreen(fullscreen : bool);
			SFVideoLoop(loop : bool);
			SFVideoVolume(volume : double);
			SFVideoLength(length : double);
			SFVideoSubtitles(subtitles : VideoSubtitle);
			SFVideoTimeRange(start : double, end : double);
			SFVideoPlaybackRate(rate : double);
			SFVideoRealSize(size : WidthHeight);

	SFTextInput(content : string, wh : WidthHeight, style : [SFTextInputStyle]);
		SFTextInputStyle ::= CharacterStyle, SWordWrap, SMultiline, SInputType, SReadOnly, SMaxChars, SAutoAlign,
			SNumericStep, SFocus, SPosition, SSelection, SScrollInfo, SCursorColor, SCursorOpacity, SCursorWidth, SFAccessProperty;

			SWordWrap(wrap : bool);
			SMultiline(multiline : bool);
			SInputType(type : InputType);
			SReadOnly(readOnly : bool);
			SMaxChars(maxChars : int);
			SAutoAlign(align : AutoAlignType);
			SNumericStep(step : double);
			SFocus(focus : bool);
			SPosition(position : int);
			SSelection(selection : int);
			SScrollInfo(info : ScrollInfo);
			SCursorColor(color : int);
			SCursorOpacity(opacity : double);
			SCursorWidth(width : double);

	fform2sfform(fform : FForm, callConstructors : bool) -> SFForm;
	sfform2fform(sfform : SFForm) -> FForm;

	diffSFForms(f1 : SFForm, f2 : SFForm) -> [DistinctSFForms];
		DistinctSFForms(a : SFForm, b : SFForm, c : [DistinctSFForms]);
}

fform2sfform(fform : FForm, callConstructors : bool) -> SFForm {
	switch (fform : FForm) {
		FText(text, style) : SFText(fgetValue(text), style);
		FParagraph(text, style) : {
			if (callConstructors) {
				renderFParagraph(text, style).disposers
				|> (\disp ->
					SFParagraph(fgetValue(text), FParagraphStyle2SFParagraphStyle(style))
					|> (\_fform -> {
						applyall(disp);
						_fform
					})
				)
			} else {
				SFParagraph(fgetValue(text), FParagraphStyle2SFParagraphStyle(style));
			}
		}
		FGraphics(__, __) : fform;
		FTranslate(x, y, form) : SFTranslate(fgetValue(x), fgetValue(y), fform2sfform(form, callConstructors));
		FScale(x, y, form) : SFScale(fgetValue(x), fgetValue(y), fform2sfform(form, callConstructors));
		FRotate(degree, form) : SFRotate(fgetValue(degree), fform2sfform(form, callConstructors));
		FAlpha(alpha, form) : SFAlpha(fgetValue(alpha), fform2sfform(form, callConstructors));
		FVisible(visible, form) : SFVisible(fgetValue(visible), fform2sfform(form, callConstructors));
		FRenderable(renderable, form) : /*SFRenderable(fgetValue(renderable), */fform2sfform(form, callConstructors)/*)*/;
		FGroup(layers, z) : SFGroup(map(layers, \l -> fform2sfform(l, callConstructors)), z);
		FGroup2(layer1, layer2, z) : SFGroup2(fform2sfform(layer1, callConstructors), fform2sfform(layer2, callConstructors), z);
		FDecorator2(layer1, decorators, above, __) :
			SFDecorator2(
				fform2sfform(layer1, callConstructors),
				filtermap(decorators, \d -> if (fgetValue(d.first)) Some(fform2sfform(d.second(), callConstructors)) else None()),
				above
			);
		FEmpty() : fform;
		FBorder(left, top, right, bottom, form) : SFBorder(left, top, right, bottom, fform2sfform(form, callConstructors));
		FMask2(form, mask, __) : SFMask(fform2sfform(form, callConstructors), fform2sfform(mask, callConstructors));
		FInteractive(__, form) : fform2sfform(form, callConstructors);
		FFilter2(filt, form, __) : SFFilter(filt, fform2sfform(form, callConstructors));
		FCursor(__, form) : fform2sfform(form, callConstructors);
		FInspect(__, form) : fform2sfform(form, callConstructors);
		FMutable2(form, __) : fform2sfform(fgetValue(form), callConstructors);
		FCrop2(l, t, w, h, form, __) : SFCrop(fgetValue(l), fgetValue(t), fgetValue(w), fgetValue(h), fform2sfform(form, callConstructors));
		FControlFocus(__, form) : fform2sfform(form, callConstructors);
		FPicture(url, size, s) : SFPicture(url, getValue(size), PictureStyle2SFPictureStyle(s));
		FConstructor(form, fn) : {
			if (callConstructors) {
				fn()
				|> (\disp ->
					fform2sfform(form, callConstructors)
					|> (\_fform -> {
						disp();
						_fform
					})
				)
			} else {
				fform2sfform(form, callConstructors);
			}
		}
		FCreate2(current, fn) : fform2sfform(if (^current != FEmpty()) ^current else fn(), callConstructors);
		FFullWindow(fullscreen, __, form) : SFFullWindow(fgetValue(fullscreen), fform2sfform(form, callConstructors));
		FBaseline(__, form) : fform2sfform(form, callConstructors);
		FSize2(__, form) : fform2sfform(form, callConstructors);
		FAvailable2(__, form) : fform2sfform(form, callConstructors);
		FAccess(prop, form) : SFAccess(FAccessProperty2SFAccessProperty(prop), fform2sfform(form, callConstructors));
		FSetPending(setpending, form) : SFSetPending(fgetValue(setpending), fform2sfform(form, callConstructors));
		FRealHTML(url, wh, s) : SFRealHTML(url, fgetValue(wh), RealHTMLStyle2SFRealHTMLStyle(s));
		FMForm(form) : {
			if (isConvertableForm(form))
				fform2sfform(form2fform(form), callConstructors)
			else
				FMForm(takeSnapshot(form));
		}
		FDynamicGroup2(__, currentStack, __) : SFGroup(map(getValue(currentStack), \l -> fform2sfform(l, callConstructors)), true);
		FVideo(fn, wh, s) : SFVideo(fn, getValue(wh), FVideoStyle2SFVideoStyle(s));
		FNativeForm(__, __, ff, __): fform2sfform(ff(), callConstructors);
		FTextInput(c, wh, s) : SFTextInput(getValue(c), getValue(wh), FTextInputStyle2SFTextInputStyle(s));
	}
}

FParagraphStyle2SFParagraphStyle(style : [FParagraphStyle]) -> [SFParagraphStyle] {
	filtermap(style, \s -> {
		switch (s : FParagraphStyle) {
			// This cast helps the neko compiler
			ParagraphMetrics(__) : None();
			ParagraphWidth(wd) : cast(Some(SFParagraphWidth(fgetValue(wd))) : Some -> Maybe<SFParagraphStyle>);
			ParagraphEllipsis(lines, __) : Some(SFParagraphEllipsis(lines));
			CharacterStyle() :     Some(s);
			CommonAlignment() :    Some(s);
			CropWords(__) :        Some(s);
			InterlineSpacing(__) : Some(s);
			Resolution(__) :       Some(s);
		}
	})
}

PictureStyle2SFPictureStyle(style : [PictureStyle]) -> [SFPictureStyle] {
	filtermap(style, \s ->
		switch (s : PictureStyle) {
			DontCache() : Some(s);
			OnlyDownloadToCache() : Some(s);
			default : None();
		}
	)
}

FAccessProperty2SFAccessProperty(style : [FAccessProperty]) -> [SFAccessProperty] {
	filtermap(style, \s ->
		switch (s : FAccessProperty) {
			FAccessTabindex(tabindex) : cast(Some(AccessTabindex(fgetValue(tabindex))) : Some<AccessTabindex> -> Maybe<SFAccessProperty>);// annoying typechecker
			FAccessEnabled(enabled) : Some(SFAccessEnabled(fgetValue(enabled)));
			FAccessAttribute(name, value) : Some(SFAccessAttribute(name, fgetValue(value)));
			FAccessTabOrder(tabOrder) : None();//Some(SFAccessTabOrder(fgetValue(tabOrder)));
			FAccessZorder(zOrder) : Some(SFAccessZorder(fgetValue(zOrder)));
			FAccessVisible(v) : Some(SFAccessVisible(fgetValue(v)));
			AccessChildSelected(__): None();
			AccessRole(role) : Some(s);
			AccessFocused(__) : None();
			AccessCallback(__) : None();
			AccessDescription(__) : Some(s);
			AccessKbdShortcutString(shortcut) : Some(s);
			AccessSelectable() : Some(s);
			AccessState(state) : Some(SFAccessState(getValue(state)));
		}
	)
}

RealHTMLStyle2SFRealHTMLStyle(style : [RealHTMLStyle]) -> [SFRealHTMLStyle] {
	filtermap(style, \s ->
		switch (s : RealHTMLStyle) {
			ZoomEnabled(enabled) : cast(Some(SZoomEnabled(getValue(enabled))) : Some<SZoomEnabled> -> Maybe<SFRealHTMLStyle>); // annoying typechecker
			MouseDisabled(disabled) : Some(SMouseDisabled(getValue(disabled)));
			FlowCallback(__) : None();
			PageEvalJS(__) : None();
			OnError(__) : None();
			RealHtmlShrink2Fit() : Some(s);
			UpdateCachedContent(__) : Some(s);
			SandBoxJS(__) : Some(s);
			OverridePageDomain(__) : Some(s);
			PageHostcallSetter(__) : None();
			OnPageLoaded(__) : None();
			ReloadBlock(__) : Some(s);
			WhitelistDomains(__) : Some(s);
			ViewBounds(bounds) : Some(SViewBounds(fgetValue(bounds)));
		}
	)
}

FVideoStyle2SFVideoStyle(style : [FVideoStyle]) -> [SFVideoStyle] {
	filtermap(style, \s ->
		switch (s : FVideoStyle) {
			FVideoKeepAspectRatio(keep) : cast(Some(SFVideoKeepAspectRatio(fgetValue(keep))) : Some<SFVideoKeepAspectRatio> -> Maybe<SFVideoStyle>); // annoying typechecker
			FVideoLoop(lp) : Some(SFVideoLoop(fgetValue(lp)));
			FVideoSubtitles(subtitles) : Some(SFVideoSubtitles(fgetValue(subtitles)));
			FVideoTimeRange(start, end) : Some(SFVideoTimeRange(fgetValue(start), fgetValue(end)));
			FVideoControls(controls) : Some(s);

			FVideoPlay(play) : Some(SFVideoPlay(getValue(play)));
			FVideoPosition(position) : Some(SFVideoPosition(getValue(position)));
			FVideoFullscreen(fullscreen) : Some(SFVideoFullscreen(getValue(fullscreen)));
			FVideoVolume(volume) : Some(SFVideoVolume(getValue(volume)));
			FVideoLength(ln) : Some(SFVideoLength(getValue(ln)));
			FVideoPlaybackRate(rate) : Some(SFVideoPlaybackRate(getValue(rate)));
			FVideoRealSize(size) : Some(SFVideoRealSize(getValue(size)));
			default: None();
		}
	)
}

FTextInputStyle2SFTextInputStyle(style : [FTextInputStyle]) -> [SFTextInputStyle] {
	concat(
		filtermap(style, \s ->
			switch (s : FTextInputStyle) {
				FWordWrap(wrap) : cast(Some(SWordWrap(fgetValue(wrap))) : Some<SWordWrap> -> Maybe<SFTextInputStyle>); // annoying typechecker
				FMultiline(multiline) : Some(SMultiline(fgetValue(multiline)));
				FInputType(type) : Some(SInputType(fgetValue(type)));
				FReadOnly(readOnly) : Some(SReadOnly(fgetValue(readOnly)));
				FInputFilter(__): None();
				FInputKeyFilter(__): None();
				FMaxChars(maxChars) : Some(SMaxChars(fgetValue(maxChars)));
				FAutoAlign(align) : Some(SAutoAlign(fgetValue(align)));
				FNumericStep(step) : Some(SNumericStep(fgetValue(step)));
				FCursorColor(color) : Some(SCursorColor(fgetValue(color)));
				FCursorOpacity(opacity) : Some(SCursorOpacity(fgetValue(opacity)));
				FCursorWidth(width) : Some(SCursorWidth(fgetValue(width)));

				FFocus(focus) : Some(SFocus(getValue(focus)));
				FPosition(position) : Some(SPosition(getValue(position)));
				FSelection(selection) : Some(SSelection(getValue(selection)));
				FScrollInfo(info) : Some(SScrollInfo(getValue(info)));
				FAccessProperty() : None();

				CharacterStyle() : Some(s);
				FAutoCompleteType(__) : None();
				ViewBounds(__) : None();
			}
		),
		FAccessProperty2SFAccessProperty(style |> extractFAccessProperties)
	)
}

sfform2fform(sfform : SFForm) -> FForm {
	switch (sfform : SFForm) {
		FGraphics(__, __) : sfform;
		FEmpty() : sfform;
		SFText(text, s) : FText(const(text), s);
		SFParagraph(text, s) : FParagraph(const(text), SFParagraphStyle2FParagraphStyle(s));
		SFTranslate(x, y, form) : FTranslate(const(x), const(y), sfform2fform(form));
		SFScale(x, y, form) : FScale(const(x), const(y), sfform2fform(form));
		SFRotate(degree, form) : FRotate(const(degree), sfform2fform(form));
		SFAlpha(alpha, form) : FAlpha(const(alpha), sfform2fform(form));
		SFVisible(visible, form) : FVisible(const(visible), sfform2fform(form));
		SFRenderable(renderable, form) : FRenderable(const(renderable), sfform2fform(form));
		SFGroup(layers, z) : FGroup(map(layers, sfform2fform), z);
		SFGroup2(layer1, layer2, z) : FGroup2(sfform2fform(layer1), sfform2fform(layer2), z);
		SFDecorator2(layer1, decorators, above) : FDecorator(sfform2fform(layer1), map(decorators, \d -> Pair(const(true), \ -> sfform2fform(d))), above);
		SFBorder(left, top, right, bottom, form) : FBorder(left, top, right, bottom, sfform2fform(form));
		SFMask(form, mask) : FMask(sfform2fform(form), sfform2fform(mask));

		SFPicture(url, size, s) : FPicture(url, make(size), s);
		SFAccess(properties, form) : FAccess(SFAccessProperty2FAccessProperty(properties), sfform2fform(form));
		SFVideo(fn, wh, s) : FVideo(fn, make(wh), SFVideoStyle2FVideoStyle(s));
		SFTextInput(c, wh, s) : FTextInput(make(c), make(wh), SFTextInputStyle2FTextInputStyle(s));

		SFFullWindow(fs, form) : FFullWindow(make(fs), make(zeroWH), sfform2fform(form));
		SFCrop(left, top, width, height, form) : FCrop(const(left), const(top), const(width), const(height), sfform2fform(form));
		SFFilter(fltrs, form) : FFilter(fltrs, sfform2fform(form));
		FMForm(__) : sfform;
		SFSetPending(pending, form) : FSetPending(const(pending), sfform2fform(form));
		SFRealHTML(url, wh, s) : FRealHTML(url, const(wh), SFRealHTMLStyle2RealHTMLStyle(s));
	}
}

SFParagraphStyle2FParagraphStyle(style : [SFParagraphStyle]) -> [FParagraphStyle] {
	map(style, \s ->
		switch (s : SFParagraphStyle) {
			SFParagraphWidth(wd) : ParagraphWidth(const(wd));
			SFParagraphEllipsis(lines) : ParagraphEllipsis(lines, nop1);
			CropWords(__) : s;
			RightAlign() : s;
			CenterAlign() : s;
			EndAlign() : s;
			Sharpness(__, __, __) : s;
			Fill(color) : s;
			FontSize(__) : s;
			Underlined(__) : s;
			EscapeHTML(__) : s;
			BackgroundFill(__) : s;
			StartAlign() : s;
			InterlineSpacing(__) : s;
			LetterSpacing(__) : s;
			LeftAlign() : s;
			FillOpacity(__) : s;
			FontFamily(__) : s;
			BackgroundFillOpacity(__) : s;
			Resolution(__) : s;
		}
	)
}

SFAccessProperty2FAccessProperty(style : [SFAccessProperty]) -> [FAccessProperty] {
	map(style, \s ->
		switch (s : SFAccessProperty) {
			AccessTabindex(tabindex) : FAccessTabindex(const(tabindex));
			SFAccessEnabled(enabled) : FAccessEnabled(const(enabled));
			SFAccessAttribute(name, value) : FAccessAttribute(name, const(value));
			SFAccessTabOrder(tabOrder) : FAccessTabOrder(const(tabOrder));
			SFAccessZorder(zOrder) : FAccessZorder(const(zOrder));
			SFAccessVisible(v) : FAccessVisible(const(v));
			SFAccessState(state) : AccessState(const(state));
			AccessRole(role) : s;
			AccessDescription(description) : s;
			AccessKbdShortcutString(shortcut) : s;
			AccessSelectable() : s;
		}
	)
}

SFRealHTMLStyle2RealHTMLStyle(style : [SFRealHTMLStyle]) -> [RealHTMLStyle] {
	map(style, \s ->
		switch (s : SFRealHTMLStyle) {
			SZoomEnabled(enabled) : ZoomEnabled(const(enabled));
			SMouseDisabled(disabled) : MouseDisabled(const(disabled));
			RealHtmlShrink2Fit() : s;
			UpdateCachedContent(__) : s;
			SandBoxJS(__) : s;
			OverridePageDomain(__) : s;
			ReloadBlock(__) : s;
			WhitelistDomains(__) : s;
			SViewBounds(bounds) : ViewBounds(const(bounds));
		}
	)
}

SFVideoStyle2FVideoStyle(style : [SFVideoStyle]) -> [FVideoStyle] {
	map(style, \s ->
		switch (s : SFVideoStyle) {
			SFVideoKeepAspectRatio(keep) : FVideoKeepAspectRatio(const(keep));
			SFVideoLoop(lp) : FVideoLoop(const(lp));
			SFVideoSubtitles(subtitles) : FVideoSubtitles(const(subtitles));
			SFVideoTimeRange(start, end) : FVideoTimeRange(const(start), const(end));
			FVideoControls(controls) : s;

			SFVideoPlay(play) : FVideoPlay(make(play));
			SFVideoPosition(position) : FVideoPosition(make(position));
			SFVideoFullscreen(fullscreen) : FVideoFullscreen(make(fullscreen));
			SFVideoVolume(volume) : FVideoVolume(make(volume));
			SFVideoLength(ln) : FVideoLength(make(ln));
			SFVideoPlaybackRate(rate) : FVideoPlaybackRate(make(rate));
			SFVideoRealSize(size) : FVideoRealSize(make(size));
		}
	)
}

SFTextInputStyle2FTextInputStyle(style : [SFTextInputStyle]) -> [FTextInputStyle] {
	concat(
		filtermap(style, \s ->
			switch (s : SFTextInputStyle) {
				SWordWrap(wrap) : cast(Some(FWordWrap(const(wrap))) : Some<FWordWrap> -> Maybe<FTextInputStyle>);
				SMultiline(multiline) : Some(FMultiline(const(multiline)));
				SInputType(type) : Some(FInputType(const(type)));
				SReadOnly(readOnly) : Some(FReadOnly(const(readOnly)));
				SMaxChars(maxChars) : Some(FMaxChars(const(maxChars)));
				SAutoAlign(align) : Some(FAutoAlign(const(align)));
				SNumericStep(step) : Some(FNumericStep(const(step)));
				SCursorColor(color) : Some(FCursorColor(const(color)));
				SCursorOpacity(opacity) : Some(FCursorOpacity(const(opacity)));
				SCursorWidth(width) : Some(FCursorWidth(const(width)));

				SFocus(focus) : Some(FFocus(make(focus)));
				SPosition(position) : Some(FPosition(make(position)));
				SSelection(selection) :Some(FSelection(make(selection)));
				SScrollInfo(info) : Some(FScrollInfo(make(info)));

				Sharpness(__, __, __) : Some(s);
				Fill(color) : Some(s);
				FontSize(__) : Some(s);
				Underlined(__) : Some(s);
				EscapeHTML(__) : Some(s);
				BackgroundFill(__) : Some(s);
				LetterSpacing(__) : Some(s);
				FillOpacity(__) : Some(s);
				FontFamily(__) : Some(s);
				BackgroundFillOpacity(__) : Some(s);
				default : None();
			}
		),
		SFAccessProperty2FAccessProperty(style |> extractSFAccessProperties)
	)
}

extractSFAccessProperties(style : [flow]) -> [SFAccessProperty] {
	fold(style, [], \acc : [SFAccessProperty], el : flow -> {
		switch (el) {
			SFAccessProperty(): arrayPush(acc, el);
			default: acc;
		}
	})
}

_eqdbls(a : double, b : double) -> bool {
	round(a) + 2 > round(b) && round(a) - 2 < round(b); // equalDoubles(a, b);
}

diffSFForms(f1 : SFForm, f2 : SFForm) -> [DistinctSFForms] {
	switch (f1 : SFForm) {
		FGraphics(path, style) : {
			switch (f2 : SFForm) {
				FGraphics(path2, style2): {
					if (length(path) == length(path2) && !contains(mapi(path, \i, p -> diffIGraphicOp(p, path2[i])), false) && sort(style) == sort(style2))
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		FEmpty() : {
			switch (f2 : SFForm) {
				FEmpty(): {
					[];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		};
		SFText(text, style) : {
			switch (f2 : SFForm) {
				SFText(text2, style2): {
					if (text == text2 && sort(style) == sort(style2))
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFParagraph(text, style) : {
			switch (f2 : SFForm) {
				SFParagraph(text2, style2): {
					if (text == text2 && _eqdbls(extractStruct(style, SFParagraphWidth(0.0)).width, extractStruct(style2, SFParagraphWidth(0.0)).width) &&
						sort(removeAllStructs(style, SFParagraphWidth(0.0))) == sort(removeAllStructs(style2, SFParagraphWidth(0.0))))
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFTranslate(x, y, form) : {
			switch (f2 : SFForm) {
				SFTranslate(x2, y2, form2): {
					if (_eqdbls(x, x2) && _eqdbls(y, y2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFScale(x, y, form) : {
			switch (f2 : SFForm) {
				SFScale(x2, y2, form2): {
					if (_eqdbls(x, x2) && _eqdbls(y, y2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFRotate(degree, form) : {
			switch (f2 : SFForm) {
				SFRotate(degree2, form2): {
					if (_eqdbls(degree, degree2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFAlpha(alpha, form) : {
			switch (f2 : SFForm) {
				SFAlpha(alpha2, form2): {
					if (_eqdbls(alpha, alpha2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFVisible(visible, form) : {
			switch (f2 : SFForm) {
				SFVisible(visible2, form2): {
					if (visible == visible2)
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFRenderable(renderable, form) : {
			switch (f2 : SFForm) {
				SFRenderable(renderable2, form2): {
					if (renderable == renderable2)
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFBorder(left, top, right, bottom, form) : {
			switch (f2 : SFForm) {
				SFBorder(left2, top2, right2, bottom2, form2): {
					if (_eqdbls(left, left2) && _eqdbls(top, top2) && _eqdbls(right, right2) && _eqdbls(bottom, bottom2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFAccess(properties, form) : {
			switch (f2 : SFForm) {
				SFAccess(properties2, form2): {
					if (sort(properties) == sort(properties2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFFullWindow(fs, form) : {
			switch (f2 : SFForm) {
				SFFullWindow(fs2, form2): {
					if (fs == fs2)
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFCrop(left, top, width, height, form) : {
			switch (f2 : SFForm) {
				SFCrop(left2, top2, width2, height2, form2): {
					if (_eqdbls(left, left2) && _eqdbls(top, top2) && _eqdbls(width, width2) && _eqdbls(height, height2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFFilter(fltrs, form) : {
			switch (f2 : SFForm) {
				SFFilter(fltrs2, form2): {
					if (sort(fltrs) == sort(fltrs2))
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFSetPending(pending, form) : {
			switch (f2 : SFForm) {
				SFSetPending(pending2, form2): {
					if (pending == pending2)
						diffSFForms(form, form2)
					else
						[DistinctSFForms(f1, f2, diffSFForms(form, form2))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}

		SFGroup(layers, zorder) : {
			switch (f2 : SFForm) {
				SFGroup(layers2, zorder2): {
					if (zorder == zorder2)
						concatA(mapi(layers, \i, l -> diffSFForms(l, layers2[i])))
					else
						[DistinctSFForms(f1, f2, concatA(mapi(layers, \i, l -> diffSFForms(l, layers2[i]))))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFGroup2(layer1, layer2, zorder) : {
			switch (f2 : SFForm) {
				SFGroup2(layer12, layer22, zorder2): {
					if (zorder == zorder2)
						concat(diffSFForms(layer1, layer12), diffSFForms(layer2, layer22))
					else
						[DistinctSFForms(f1, f2, concat(diffSFForms(layer1, layer12), diffSFForms(layer2, layer22)))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFDecorator2(layer, decorators, above): {
			switch (f2 : SFForm) {
				SFDecorator2(layer2, decorators2, above2): {
					if (above == above2)
						concat(diffSFForms(layer, layer2), concatA(mapi(decorators, \i, d -> diffSFForms(d, decorators2[i]))))
					else
						[DistinctSFForms(f1, f2, concat(diffSFForms(layer, layer2),
							concatA(mapi(decorators, \i, d -> diffSFForms(d, decorators2[i])))))];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFMask(form, mask) : {
			switch (f2 : SFForm) {
				SFMask(form2, mask2): {
					concat(diffSFForms(form, form2), diffSFForms(mask, mask2));
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFPicture(url, size, style) : {
			switch (f2 : SFForm) {
				SFPicture(url2, size2, style2): {
					if (url == url2 && _eqdbls(size.width, size2.width) && _eqdbls(size.height, size2.height) && sort(style) == sort(style2))
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFVideo(url, size, style) : {
			switch (f2 : SFForm) {
				SFVideo(url2, size2, style2): {
					if (url == url2 && _eqdbls(size.width, size2.width) && _eqdbls(size.height, size2.height) && sort(style) == sort(style2))
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFTextInput(content, size, style) : {
			switch (f2 : SFForm) {
				SFTextInput(content2, size2, style2): {
					if (content == content2 && _eqdbls(size.width, size2.width) && _eqdbls(size.height, size2.height) && sort(style) == sort(style2))
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		SFRealHTML(url, size, style) : {
			switch (f2 : SFForm) {
				SFRealHTML(url2, size2, style2): {
					if (url == url2 && _eqdbls(size.width, size2.width) && _eqdbls(size.height, size2.height) && sort(style) == sort(style2))
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
		FMForm(form) : {
			switch (f2 : SFForm) {
				FMForm(form2): {
					if (form == form2)
						[]
					else
						[DistinctSFForms(f1, f2, [])];
				}
				default: {
					[DistinctSFForms(f1, f2, [])];
				}
			}
		}
	}
}

diffIGraphicOp(a : StaticGraphicOp, b : StaticGraphicOp) -> bool {
	switch (a : StaticGraphicOp) {
		MoveTo(x, y) : {
			switch (b : StaticGraphicOp) {
				MoveTo(x2, y2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2);
				}
				default : {
					false;
				}
			}
		}
		LineTo(x, y) : {
			switch (b : StaticGraphicOp) {
				LineTo(x2, y2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2);
				}
				default : {
					false;
				}
			}
		}
		CubicBezierTo(x, y, controlX, controlY) : {
			switch (b : StaticGraphicOp) {
				CubicBezierTo(x2, y2, controlX2, controlY2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2) && _eqdbls(controlX, controlX2) && _eqdbls(controlY, controlY2);
				}
				default : {
					false;
				}
			}
		}
		QuadraticBezierTo(x, y, controlX, controlY) : {
			switch (b : StaticGraphicOp) {
				QuadraticBezierTo(x2, y2, controlX2, controlY2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2) && _eqdbls(controlX, controlX2) && _eqdbls(controlY, controlY2);
				}
				default : {
					false;
				}
			}
		}
		ClosePath() : {
			switch (b : StaticGraphicOp) {
				ClosePath() : {
					true;
				}
				default : {
					false;
				}
			}
		}
		GRect(x, y, width, height) : {
			switch (b : StaticGraphicOp) {
				GRect(x2, y2, width2, height2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2) && _eqdbls(width, width2) && _eqdbls(height, height2);
				}
				default : {
					false;
				}
			}
		}
		GRoundedRect(x, y, width, height, radius) : {
			switch (b : StaticGraphicOp) {
				GRoundedRect(x2, y2, width2, height2, radius2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2) && _eqdbls(width, width2) && _eqdbls(height, height2) && _eqdbls(radius, radius2);
				}
				default : {
					false;
				}
			}
		}
		GEllipse(x, y, width, height) : {
			switch (b : StaticGraphicOp) {
				GEllipse(x2, y2, width2, height2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2) && _eqdbls(width, width2) && _eqdbls(height, height2);
				}
				default : {
					false;
				}
			}
		}
		GCircle(x, y, radius) : {
			switch (b : StaticGraphicOp) {
				GCircle(x2, y2, radius2) : {
					_eqdbls(x, x2) && _eqdbls(y, y2) && _eqdbls(radius, radius2);
				}
				default : {
					false;
				}
			}
		}
	}
}