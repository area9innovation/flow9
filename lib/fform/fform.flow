import fusion;
import form/paragraphtypes;
import media/mediastream;
import ui/animate/easing;

export {
	FForm ::= FText, FParagraph, FGraphics, FTranslate, FScale, FRotate, FOrigin, FAlpha, FVisible, FRenderable, FGroup, FGroup2,
		FEmpty, FBorder, FMask2, FInteractive, FFilter2, FCursor, FInspect, FMutable2, FDecorator2,
		FCrop2, FControlFocus, FPicture, FConstructor, FCreate2, FFullWindow, FFullScreen, FMForm,
		FBaseline, FSize2, FAvailable2, FAccess, FRealHTML, FSetPending, FVideo, FTextInput, FDynamicGroup2, FNativeForm, FCanvas, FAnimation;

	FText(text : Transform<string>, style : [FTextStyle]);
		FTextStyle ::= CharacterStyle, FDynamicColor, TagName, LangAttribute;
			FDynamicColor(color : Transform<int>);

	FParagraph(text : Transform<string>, style : [FParagraphStyle]);
		FParagraphStyle ::= FTextStyle, ParagraphWidth, CommonAlignment, CropWords, InterlineSpacing, ParagraphMetrics, ParagraphEllipsis,
			Resolution;
			// Max width of the paragraph
			ParagraphWidth(width : Transform<double>);
			// Crop words that are longer than paragraph width, true by default
			CropWords(crop : bool);
			// Get paragraph metrics
			ParagraphMetrics(fn : (FFormMetrics) -> void);
				FFormMetrics(
					width : double,
					height : double,
					baseline : double,
					maxWidth : double
				);
			// Paragraph ellipsis bound by width from ParagraphWidth and lines count
			// Ignored without ParagraphWidth style and for non-js targets
			// fn - truncation callback, true if ellipsis is added
			ParagraphEllipsis(lines : int, fn : (truncated : bool) -> void);
			// Change text resolution multiplier
			// Can become blurry with resolution > 1.0 but better positioned
			// Helpful in cases when you need properly centered text
			// Works and makes sense only in js
			Resolution(resolution : double);

	FGraphics(path : Transform<[StaticGraphicOp]>, style : Transform<[GraphicsStyle]>);

	FTranslate(x : Transform<double>, y : Transform<double>, form : FForm);

	FScale(x : Transform<double>, y : Transform<double>, form : FForm);

	FRotate(degree : Transform<double>, form : FForm);

	// Define tranformation origin as Factor of the form size.
	// FScale and FRotate will use this origin as center point of all the transformations applied.
	// For example if you want to rotate form around its center use FOrigin(const(Factor(0.5, 0.5), ...).
	// By default origin is Factor(0.0, 0.0) which is the top left corner of the form.
	FOrigin(origin : Transform<Factor>, form : FForm);

	FAlpha(alpha : Transform<double>, form : FForm);

	FVisible(visible : Transform<bool>, form : FForm);

	// Tells if clip is inside visible view bounds
	FRenderable(renderable : DynamicBehaviour<bool>, form : FForm);

	FGroup(layers : [FForm], zorder : bool);
	FGroup2(layer1 : FForm, layer2 : FForm, zorder : bool);

	FEmpty();

	FBorder(left : double, top : double, right : double, bottom : double, form : FForm);

	FMask2(main : FForm, mask : FForm, stack : native);
	FMask(mainf : FForm, mask : FForm) -> FMask2 {
		FMask2(mainf, mask, captureCallstack());
	}

	FInteractive(listeners: [EventHandler], form : FForm);

	FFilter2(filters : [Filters], form : FForm, stack : native);
	FFilter(filters : [Filters], form : FForm) -> FFilter2 {
		FFilter2(filters, form, captureCallstack());
	}

	FCursor(shape : CursorShape2, form : FForm);

	// ITransformMatrix only work
	// Other inspectors here only for backward compatability with Forms
	FInspect(inspectors : [FInspector], form : FForm);
		FInspector ::= Inspector;

	FMutable2(form : Transform<FForm>, stack : native);
	FMutable(form : Transform<FForm>) -> FMutable2 {
		FMutable2(form, captureCallstack());
	}

	FDecorator2(form : FForm, decorators : [Pair<Transform<bool>, () -> FForm>], above : bool, stack : native);
	FDecorator(form : FForm, decorators, above : bool) -> FDecorator2 {
		FDecorator2(form, decorators, above, captureCallstack());
	}

	FCrop2(left : Transform<double>, top : Transform<double>, width : Transform<double>, height : Transform<double>, form : FForm, stack : native);
	FCrop(left : Transform<double>, top : Transform<double>, width : Transform<double>, height : Transform<double>, form : FForm) -> FCrop2 {
		FCrop2(left, top, width, height, form, captureCallstack());
	}

	FControlFocus(focus : DynamicBehaviour<bool>, form : FForm);

	FPicture(url : string, size : DynamicBehaviour<WidthHeight>, style : [PictureStyle]);

	FConstructor(form : FForm, fn : () -> () -> void);
	FCreate2(current : ref FForm, fn : () -> FForm);
	FCreate(fn : () -> FForm) -> FCreate2 {
		FCreate2(ref FEmpty(), fn)
	}

	FDisposer(form : FForm, fn : () -> void) -> FConstructor {
		FConstructor(form, \ -> fn)
	}

	FFullWindow(fullscreen : DynamicBehaviour<bool>, available : DynamicBehaviour<WidthHeight>, form : FForm);
	FFullScreen(fullscreen : DynamicBehaviour<bool>, available : DynamicBehaviour<WidthHeight>, form : FForm);

	FMForm(form : Form);

	FAvailable2(widthHeight : Behaviour<WidthHeight>, form : FForm);
	FSize2(widthHeight : Behaviour<WidthHeight>, form : FForm);
	FBaseline(baseline : Behaviour<double>, form : FForm);

	FAccess(properties : [FAccessProperty], form : FForm);
		FAccessProperty ::= AccessRole, AccessDescription, AccessKbdShortcutString, AccessSelectable, AccessCallback, AccessChildSelected,
			AccessFocused, AccessState, FAccessTabindex, FAccessEnabled, FAccessAttribute, FAccessStyle, FAccessTabOrder, FAccessZorder, FAccessVisible,
			TagName, LangAttribute;

			FAccessTabindex(tabindex : Transform<int>);
			FAccessEnabled(enabled : Transform<bool>);
			FAccessAttribute(name : string, value : Transform<string>);
			FAccessStyle(name : string, value : Transform<string>);
			FAccessTabOrder(tabOrder : Transform<[int]>);
			FAccessZorder(zOrder : Transform<int>);
			FAccessVisible(visible : Transform<bool>);

	FRealHTML(url : string, wh : Transform<WidthHeight>, style : [RealHTMLStyle]);

	FSetPending(pending : Transform<int>, form : FForm);

	FDynamicGroup2(stackChanges : DynamicBehaviour<[FGroupChange]>, currentStack : DynamicBehaviour<[FForm]>, stack : native);
		FGroupChange ::= FGroupAdd, FGroupDelete, FGroupMove, FGroupReplace;

		FGroupAdd : (form : FForm, z : int);
		FGroupDelete : (z : int);
		FGroupMove : (from : int, to : int);
		FGroupReplace : (form : FForm, z : int);

	FDynamicGroup(stackChanges : DynamicBehaviour<[FGroupChange]>) -> FDynamicGroup2 {
		FDynamicGroup2(stackChanges, make([]), captureCallstack());
	}

	// fform field is used for snapshots, finding tagged forms and prints
	// metrics here is only for backward compatability with NativeForm, same reason for available, zorder, tabOrder fn parameters
	FNativeForm(init : flow, metrics : Behaviour<FormMetrics>, fform : () -> FForm,
		fn : (available : Behaviour<WidthHeight>, zorder : [int], tabOrder : [int]) -> NativeRenderResult);

	// If widthheihgt is 0,0 size is automatic, otherwise defined
	FVideo(url : string, wh : DynamicBehaviour<WidthHeight>, style : [FVideoStyle]);
		FVideoStyle ::= FVideoKeepAspectRatio, FVideoCoverBox, FVideoPlay, FVideoPosition, FVideoLength, FVideoVolume, FVideoFullscreen, FVideoLoop, FVideoControls,
			FVideoSubtitles, FVideoSubtitlesAlignBottom, FVideoSubtitlesBottomBorder, FVideoSubtitlesScaleMode, FVideoTimeRange, FVideoPlaybackRate, FVideoRealSize,
			FInspectVideoArea, FVideoGetCurrentFrame, SynchroCalls, StreamStatus, OnVideoLoadingError, ViewBounds, MediaStream, FVideoAdditionalSources;

			// If true fits in wh with correct aspect ratio
			FVideoKeepAspectRatio(keep : Transform<bool>);
			// If true, fills the box, keeping aspect ratio. In case of video and box aspect ratios are not equal, video will be cropped.
			FVideoCoverBox(cover : Transform<bool>, style : [FVideoCoverBoxStyle]);
				FVideoCoverBoxStyle ::= FAlign;
					FAlign(x : Transform<double>, y : Transform<double>);
			// FVideoPlay and FVideoPosition can be changed outside and also are updated from player
			// play is changed to false at the end of a video if loop is false
			FVideoPlay(play : DynamicBehaviour<bool>);
			FVideoPosition(position : DynamicBehaviour<double>);
			FVideoFullscreen(fullscreen : DynamicBehaviour<bool>);
			// loop is false by default
			FVideoLoop(loop : Transform<bool>);
			// volume is 1.0 by default
			FVideoVolume(volume : DynamicBehaviour<double>);
			FVideoLength(length : DynamicBehaviour<double>);
			FVideoControls(controls : [PlayerControl]);
			FVideoSubtitles(subtitles : Transform<VideoSubtitle>);
			FVideoSubtitlesAlignBottom();
			FVideoSubtitlesBottomBorder(border : double);
			// Subtitles are scaling with video. -1. is for no limit
			FVideoSubtitlesScaleMode(min : double, max : double);
			// start, end are in seconds
			FVideoTimeRange(start : Transform<double>, end : Transform<double>);
			FVideoPlaybackRate(rate : DynamicBehaviour<double>);
			FVideoRealSize(size : DynamicBehaviour<WidthHeight>);
			// Inspects metrics of video clip itself
			FInspectVideoArea(metrics : DynamicBehaviour<FVideoAreaMetrics>);
				FVideoAreaMetrics(topLeft : Point, wh : WidthHeight, scale : Factor);
			// get current frame as base64 string
			FVideoGetCurrentFrame(fn : ref () -> string);
			// Additional video stream urls
			// Allows to specify different video formats
			FVideoAdditionalSources(sources : [FVideoSource]);
				// type - MIME string representing stream type ("video/webm", "video/mp4" etc.)
				FVideoSource(url : string, type : string);

	FTextInput(content : DynamicBehaviour<string>, wh : DynamicBehaviour<WidthHeight>, style : [FTextInputStyle]);
		FTextInputStyle ::= CharacterStyle, FWordWrap, FMultiline, FInputType, FAutoCompleteType, FReadOnly, FInputFilter, FInputKeyFilter, FMaxChars,
			FAutoAlign, FFocus, FPosition, FSelection, FScrollInfo, FCursorColor, FCursorOpacity, FCursorWidth, FNumericStep, ViewBounds, FAccessProperty,
			FCharacterStyle, InterlineSpacing, SetRTL;

			FWordWrap(wrap : Transform<bool>);
			FMultiline(multiline : Transform<bool>);
			FInputType(type : Transform<InputType>);
			FAutoCompleteType(type : Transform<ACType>);
			FReadOnly(readOnly : Transform<bool>);
			FInputFilter(fn : (string) -> string);
			FInputKeyFilter(fn : (name : string, event : KeyEvent) -> bool);
			FMaxChars(maxChars : Transform<int>);
			FAutoAlign(align : Transform<AutoAlignType>);
			FNumericStep(step : Transform<double>);

			FFocus(focus : DynamicBehaviour<bool>);
			FPosition(position : DynamicBehaviour<int>);
			FSelection(selection : DynamicBehaviour<int>);
			FScrollInfo(info : DynamicBehaviour<ScrollInfo>);

			FCursorColor(color : Transform<int>);
			FCursorOpacity(opacity : Transform<double>);
			FCursorWidth(width : Transform<double>);

			FCharacterStyle(style : Transform<[CharacterStyle]>);

	// Draws content with 'canvas' renderer
	// Works only in js with 'html' renderer, for other targets identical to regular clip
	// WARNING: Doesn't support native widgets making it applicable only to groups of graphical objects
	FCanvas(content : FForm);

	// Keyframe-based animation (asynchronous in js).
	// Keyframes are evenly distributed across timeline with first and last on the ends.
	// Modifying keyframes Transform cancels previous animation and immediately starts new one.
	// For example if you want to animate content fading-in use
	// FAnimation(..., const([FAnimationKeyframe([FAlphaValue(0.0)]), FAnimationKeyframe([FAlphaValue(1.0)])]), [])
	FAnimation(content : FForm, keyframes : Transform<[FAnimationKeyframe]>, style : [FAnimationStyle]);
		FAnimationStyle ::= FAccessProperty, FAnimationDuration, FAnimationDelay, FAnimationEasing, FAnimationPercent, FAnimationOnFinish, FAnimationIterations, FAnimationDirection;
			FAnimationDuration(duration : Transform<double>);
			FAnimationDelay(delay : Transform<double>);
			FAnimationEasing(easing : Transform<CubicBezierEasing>);
			FAnimationPercent(percent : DynamicBehaviour<double>);
			FAnimationOnFinish(onFinish : () -> void);
			FAnimationIterations(iterations : Transform<int>);
				FAnimationDirection ::= FAnimationNormal, FAnimationReverse, FAnimationAlternate, FAnimationAlternateReverse;
					FAnimationNormal();
					FAnimationReverse();
					FAnimationAlternate();
					FAnimationAlternateReverse();

		FAnimationKeyframe(values : [FAnimationValue]);
			FAnimationValue ::= FScaleValue, FAlphaValue, FTranslateValue, FRotateValue, FEasingValue;
				FScaleValue(factor : Factor);
				FAlphaValue(alpha : double);
				FTranslateValue(point : Point);
				FRotateValue(degrees : double);
				FEasingValue(easing : CubicBezierEasing);

	style2characterStyle(s : [flow]) -> [CharacterStyle];
}

style2characterStyle(s : [flow]) -> [CharacterStyle] {
	filtermap(s, \st : flow -> {
		switch (st) {
			CharacterStyle(): Some(st);
			default: None();
		}
	})
}
