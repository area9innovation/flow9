import fform/optimizefform;
import fform/fformutils;
import form/renderform;
import formats/svg/svg;

export {
	frender : (form : FForm, awh : DynamicBehaviour<WidthHeight>) -> (() -> void);
	frenderStage : (form : FForm, awh : DynamicBehaviour<WidthHeight>) -> (() -> void);
	renderFForm(rform : FForm, zorder : Transform<[int]>) -> FRenderResult;
	attachFChildren(clip : native, children : [native], disposers : [() -> void], cap : [FClipCapability]) -> FRenderResult;

	// Override to set custom stage wh
	stageWidthHeight = make(None());
	fAccessibilityEnabled = ref false;
	fSvg2GraphicsEnabled = ref !js;
}

currentFFormCount = ref 0;

frenderTo(parent : native, form : FForm, awh : DynamicBehaviour<WidthHeight>) -> (() -> void) {
	renCt = ^globalRenderCount;
	globalRenderCount := ^globalRenderCount + 1;

	d1 = monitorFResize(awh);
	d2 = optimizeAndRenderFForm(parent, form, const([renCt]));

	\ -> {d1(); applyall(d2.disposers); if (renCt == ^globalRenderCount - 1) globalRenderCount := renCt}
}

frenderStage(form : FForm, awh : DynamicBehaviour<WidthHeight>) -> (() -> void) {
	if (^globalRenderCount == 0)
		println("Warning: Don't use overlay stage render as first layer render.");

	frenderTo(currentClip(), form, awh);
}

frender(form : FForm, awh : DynamicBehaviour<WidthHeight>) -> (() -> void) {
	frenderTo(mainRenderClip(), form, awh);
}

monitorFResize(awh : DynamicBehaviour<WidthHeight>) -> () -> void {
	enableResize();
	sendStageSize = \ -> {
		nextDistinct(awh, WidthHeight(getStageWidth(), getStageHeight()));
	}

	// We have to explicitly hold on to this function to keep it alive
	r = ref Some(sendStageSize);

	disposer =
		makeSubscribeUns(stageWidthHeight, \swh : Maybe<WidthHeight> ->
			eitherFn(
				swh,
				\wh : WidthHeight -> {
					nextDistinct(awh, wh);

					[]
				},
				\ -> {
					sendStageSize();

					[addEventListener(currentClip(), "resize", sendStageSize)]
				}
			)
		)();

	\ -> { r := Some(nop); disposer(); }
}

optimizeAndRenderFForm(parent : native, form : FForm, zorder : Transform<[int]>) -> FRenderResult {
	renderFForm(optimizeFForm(form), zorder)
	|> (\r  -> attachFChildren(parent, r.clips, r.disposers, r.capabilities))
}

optimizeAndRenderFFormAt(parent : native, form : FForm, zorder : Transform<[int]>, id : int) -> FRenderResult {
	renderFForm(optimizeFForm(form), zorder)
	|> (\r  -> attachFChildrenAt(parent, r.clips, r.disposers, r.capabilities, id))
}

attachFChildren(clip : native, children : [native], disposers : [() -> void], cap : [FClipCapability]) -> FRenderResult {
	alive = generate(0, length(children), \__ -> ref false);
	iteri(children, \i, c -> addChildClip(clip, c, alive[i]));

	FRenderResult(
		[clip],
		concat([\ -> iteri(children, \i, c -> removeChildClip(clip, c, alive[i]))], disposers),
		cap
	)
}

attachFChildrenAt(clip : native, children : [native], disposers : [() -> void], cap : [FClipCapability], id : int) -> FRenderResult {
	alive = generate(0, length(children), \__ -> ref false);
	iteri(children, \i, c -> addChildClipAt(clip, c, id + i, alive[i]));

	FRenderResult(
		[clip],
		concat([\ -> iteri(children, \i, c -> removeChildClip(clip, c, alive[i]))], disposers),
		cap
	)
}

attachFChildAndCapability(form : FForm, d : FRenderResult, cap : [FClipCapability], fn : (native) -> () -> void) -> FRenderResult {
	if (length(d.clips) > 0) {
		if (length(d.clips) == 1 && !exists(cap, \c -> contains(d.capabilities, c)) && !contains(cap, FClipRotate())) {
			FRenderResult(d.clips, concat(map(d.clips, fn), d.disposers), uniq(concat(d.capabilities, cap)));
		} else {
			c = makeClip();
			setClipDebugInfo(c, "form", form);

			attachFChildren(c, d.clips, concat(d.disposers, [fn(c), \ -> deleteNative(c)]), cap)
		}
	} else {
		FRenderResult(d.clips, d.disposers, [])
	}
}

fullScreenTarget : ref Maybe<native> = ref None();

setFullScreenTarget(clip : native) -> void {
	fullScreenTarget := Some(clip);
}

isFullScreenTarget(clip : native) -> bool {
	eitherFn(^fullScreenTarget, \ft -> ft == clip, \ -> { setFullScreenTarget(clip); true; });
};

removeFullScreenTarget(clip : native) -> void {
	if (isSome(^fullScreenTarget)) {
		if (isFullScreenTarget(clip)) {
			setFullScreenTarget(clip);
		}
	}
}

renderFForm(rform : FForm, zorder : Transform<[int]>) -> FRenderResult {
	emptyFRenderResult;
}

increaseFFilesCount() -> () -> void {
	alreadyDecreased = ref false;

	next(loadingContentFilesCount, getValue(loadingContentFilesCount) + 1);
	\ -> if (!^alreadyDecreased) {
		alreadyDecreased := true;
		next(loadingContentFilesCount, getValue(loadingContentFilesCount) - 1);
	}
}
