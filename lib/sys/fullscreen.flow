// Â© Copyright 2011 Area9 Technologies.

export {
	native setFullScreenRectangle : io (x: double, y: double, width: double, height: double) -> void = RenderSupport.setFullScreenRectangle;
	native setFullWindowTarget : io (clip : native) -> void = RenderSupport.setFullWindowTarget;
	native resetFullWindowTarget : io () -> void = RenderSupport.resetFullWindowTarget;

	native toggleFullWindow : io (fw : bool) -> void = RenderSupport.toggleFullWindow;
	native toggleFullScreen : io (fs : bool) -> void = RenderSupport.toggleFullScreen;
	// accepts state subscription as a parameter, returns detach subscription as result
	native onFullScreen : io (onChange : (isFullscreen : bool) -> void) -> () -> void = RenderSupport.onFullScreen;
	native isFullScreen : io () -> bool = RenderSupport.isFullScreen;

	native onFullWindow : io (onChange : (isFullscreen : bool) -> void) -> () -> void = RenderSupport.onFullWindow;
	native isFullWindow : io () -> bool = RenderSupport.isFullWindow;
	// setFullScreenTarget is not here cause it takes clip as a parameter. And clips are passed all around internally in renderform.flow

	native setClipFullScreen : io (clip : native, fs : bool) -> void = RenderSupport.setElementFullScreen;
	native setClipFullWindow : io (clip : native, fw : bool) -> void = RenderSupport.setElementFullScreen;
}

setFullScreenRectangle(x: double, y: double, width: double, height: double) -> void {
	// println("setFullScreenRectangle is not implemented on this target");
}

// Stub implementation for non-browser targets.
onFullScreen(cb) {
	\ -> {}
}

isFullScreen() {
	true // Non browser targets are always in fullscreen
}

onFullWindow(cb) {
	\ -> {}
}

isFullWindow() {
	false
}

setClipFullScreen(clip, fs) {}
setClipFullWindow(clip, fw) {}
