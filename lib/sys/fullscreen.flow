// Â© Copyright 2011 Area9 Technologies.
import runtime;

export {
	native setFullScreenRectangle : io (x: double, y: double, width: double, height: double) -> void = RenderSupport.setFullScreenRectangle;
	native setFullWindowTarget : io (clip : native) -> void = RenderSupport.setFullWindowTarget;
	native setFullScreenTarget : io (clip : native) -> void = RenderSupport.setFullScreenTarget;
	native resetFullWindowTarget : io () -> void = RenderSupport.resetFullWindowTarget;
	native resetFullScreenTarget : io () -> void = RenderSupport.resetFullScreenTarget;

	native toggleFullWindow : io (fw : bool) -> void = RenderSupport.toggleFullWindow;
	native toggleFullScreen : io (fs : bool) -> void = RenderSupport.toggleFullScreen;
	native requestFullScreen : io (element : native) -> void = RenderSupport.requestFullScreenClip;
	native exitFullScreen : io (element : native) -> void = RenderSupport.exitFullScreenClip;
	// accepts state subscription as a parameter, returns detach subscription as result
	native onFullScreen : io (onChange : (isFullscreen : bool) -> void) -> () -> void = RenderSupport.onFullScreen;
	native isFullScreen : io () -> bool = RenderSupport.isFullScreen;

	native onFullWindow : io (onChange : (isFullscreen : bool) -> void) -> () -> void = RenderSupport.onFullWindow;
	native isFullWindow : io () -> bool = RenderSupport.isFullWindow;
}

setFullScreenRectangle(x: double, y: double, width: double, height: double) -> void {
	// println("setFullScreenRectangle is not implemented on this target");
}
setFullWindowTarget(clip : native) -> void {
	println("TODO: implement 'setFullWindowTarget'");
}
setFullScreenTarget(clip) {}
resetFullScreenTarget() {}
resetFullWindowTarget() -> void { }
toggleFullWindow(fw : bool) -> void {
	println("TODO: implement 'toggleFullWindow'");
}
toggleFullScreen(fs : bool) -> void {
	println("TODO: implement 'toggleFullScreen'");
}

requestFullScreen(element) {}
exitFullScreen(element) {}

// Stub implementation for non-browser targets.
onFullScreen(cb) {
	\ -> {}
}

isFullScreen() {
	true // Non browser targets are always in fullscreen
}

onFullWindow(cb) {
	\ -> {}
}

isFullWindow() {
	false
}
