import runtime;
import date;
import math/math;

export {
    geolocationGetCurrentPosition(
        onOK : (geolocationPosition : GeolocationPosition) -> void,
        onError : (geolocationError : GeolocationError) -> void,
        geolocationOptions : [GeolocationOptions]
    ) -> void;

    geolocationWatchPosition(
        onOK : (geolocationPosition : GeolocationPosition) -> void,
        onError : (geolocationError : GeolocationError) -> void,
        geolocationOptions : [GeolocationOptions]
    ) -> () -> void;

    GeolocationPosition : (
        latitude : double, // Latitude in decimal degrees
        longitude : double, // Longitude in decimal degrees
        altitude : double, // Height of the position in meters above the ellipsoid
        accuracy : double, // Accuracy level of the latitude and longitude coordinates in meters
        altitudeAccuracy : double, // Accuracy level of the altitude coordinate in meters. Not supported by Android devices!
        heading : double, // Direction of travel, specified in degrees counting clockwise relative to the true north
        speed : double, // Current ground speed of the device, specified in meters per second
        time : Time // Creation time for geographic coordinates
    );

    GeolocationError : (code : GeolocationErrorCode, message : string);
        GeolocationErrorCode ::= GeolocationErrorPermissionDenied, GeolocationErrorPositionUnavailable, GeolocationErrorTimeout;
            // Returned when users do not allow the app to retrieve position information
            GeolocationErrorPermissionDenied();
            // Returned when the device is unable to retrieve a position
            GeolocationErrorPositionUnavailable();
            // Returned when the device is unable to retrieve a position within the time specified by the timeout included in GeolocationOptions.
            GeolocationErrorTimeout();

    GeolocationOptions ::= GeolocationOptionEnableHighAccuracy, GeolocationOptionTimeout, GeolocationOptionMaximumAge, GeolocationOptionMaximumInterval, GeolocationOptionTurnOnGeolocationMessage;
        // Provides a hint that the application needs the best possible results.
        // By default, the device attempts to retrieve a Position using network-based methods.
        // Setting this property force to use more accurate methods, such as satellite positioning.
        GeolocationOptionEnableHighAccuracy();
        // Maximum time(in ms) from geolocationGetCurrentPosition or geolocationWatchPosition until onOK call.
        // If onOK is not invoked within this time, onError will be called with GeolocationErrorTimeout error code.
        // default is 1800000(30 minutes = 30 * 60 * 1000)
        GeolocationOptionTimeout : (timeout : double);
        // Accept a cached position whose age is no greater than the specified time in milliseconds.
        // default is 0, equals to no cache
        // Ignored for geolocationWatchPosition
        GeolocationOptionMaximumAge : (maximumAge : double);
        // Maximum interval until next update.
        // Still, onOK will be called on every position update, 
        // wokrs on android. Ignored for geolocationGetCurrentPosition
        GeolocationOptionMaximumInterval : (maximumInterval : double);
        GeolocationOptionTurnOnGeolocationMessage : (message : string, okButtonText : string, cancelButtonText : string);

    GeolocationDistanceImMeters(p1 : GeolocationPosition, p2 : GeolocationPosition) -> double;
    GeolocationDistanceImMeters2(latitude1 : double, longitude1 : double, latitude2 : double, longitude2 : double) -> double;
}

native geolocationGetCurrentPositionNative : (
    onOK : (latitude : double, longitude : double, altitude : double, accuracy : double, altitudeAccuracy : double, heading : double, speed : double, time : double) -> void,
    onError : (errorCode : int, message : string) -> void,
    enableHighAccuracy : bool, timeout : double, maximumAge : double,
    turnOnGeolocationMessage : string, okButtonText : string, cancelButtonText : string
) -> void = GeolocationSupport.geolocationGetCurrentPosition;

native geolocationWatchPositionNative : (
    onOK : (latitude : double, longitude : double, altitude : double, accuracy : double, altitudeAccuracy : double, heading : double, speed : double, time : double) -> void,
    onError : (errorCode : int, message : string) -> void,
    enableHighAccuracy : bool, timeout : double, maximumInterval : double,
    turnOnGeolocationMessage : string, okButtonText : string, cancelButtonText : string
) -> () -> void = GeolocationSupport.geolocationWatchPosition;

geolocationGetCurrentPosition(
    onOK : (geolocationPosition : GeolocationPosition) -> void,
    onError : (geolocationError : GeolocationError) -> void,
    geolocationOptions : [GeolocationOptions]
) -> void {
    onOKNative = onOKNativeCreate(onOK);
    onErrorNative = onErrorNativeCreate(onError);
    enableHighAccuracy = contains(geolocationOptions, GeolocationOptionEnableHighAccuracy());
    timeout = extractStruct(geolocationOptions, GeolocationOptionTimeout(min2ms(30))).timeout;
    maximumAge = extractStruct(geolocationOptions, GeolocationOptionMaximumAge(0.0)).maximumAge;
    turnOnGeolocationMessage = extractStruct(geolocationOptions, GeolocationOptionTurnOnGeolocationMessage("Turn on geolocation, please.", "OK", "Cancel"));

    geolocationGetCurrentPositionNative(
        onOKNative, onErrorNative,
        enableHighAccuracy, timeout, maximumAge,
        turnOnGeolocationMessage.message, turnOnGeolocationMessage.okButtonText, turnOnGeolocationMessage.cancelButtonText
    );
}

geolocationWatchPosition(
    onOK : (geolocationPosition : GeolocationPosition) -> void,
    onError : (geolocationError : GeolocationError) -> void,
    geolocationOptions : [GeolocationOptions]
) -> () -> void {
    onOKNative = onOKNativeCreate(onOK);
    onErrorNative = onErrorNativeCreate(onError);
    enableHighAccuracy = contains(geolocationOptions, GeolocationOptionEnableHighAccuracy());
    timeout = extractStruct(geolocationOptions, GeolocationOptionTimeout(min2ms(30))).timeout;
    maximumInterval = extractStruct(geolocationOptions, GeolocationOptionMaximumInterval(30.)).maximumInterval;
    turnOnGeolocationMessage = extractStruct(geolocationOptions, GeolocationOptionTurnOnGeolocationMessage("Turn on geolocation, please.", "OK", "Cancel"));

    geolocationWatchPositionNative(
        onOKNative, onErrorNative,
        enableHighAccuracy, timeout, maximumInterval,
        turnOnGeolocationMessage.message, turnOnGeolocationMessage.okButtonText, turnOnGeolocationMessage.cancelButtonText
    );
}

GeolocationDistanceImMeters(p1 : GeolocationPosition, p2 : GeolocationPosition) -> double {
    GeolocationDistanceImMeters2(p1.latitude, p1.longitude, p2.latitude, p2.longitude);
}

GeolocationDistanceImMeters2(latitude1 : double, longitude1 : double, latitude2 : double, longitude2 : double) -> double {
    radius = 6371000.0; // earth radius in metres
    toRadians = \v : double -> (v * PI) / 180.0;

    lat1 = latitude1 |> toRadians;
    lat2 = latitude2 |> toRadians;
    dlat = (latitude2 - latitude1) |> toRadians;
    dlon = (longitude2 - longitude1) |> toRadians;
    a = sin(dlat / 2.0) * sin(dlat / 2.0) + cos(lat1) * cos(lat2) * sin(dlon / 2.0) * sin(dlon / 2.0);
    c = 2.0 * atan2(sqrt(a), sqrt(1.0 - a));
    radius * c;
}

onOKNativeCreate(onOK : (geolocationPosition : GeolocationPosition) -> void) -> (double, double, double, double, double, double, double, double) -> void {
    \latitude, longitude, altitude, accuracy, altitudeAccuracy, heading, speed, time -> {
        onOK(GeolocationPosition(latitude, longitude, altitude, accuracy, altitudeAccuracy, heading, speed, stamp2time(time)));
    }
}

geolocationErrorInt2Union(code : int) -> GeolocationErrorCode {
    if (code == 1) {
        GeolocationErrorPermissionDenied();
    } else if (code == 2) {
        GeolocationErrorPositionUnavailable();
    } else if (code == 3) {
        GeolocationErrorTimeout();
    } else {
        fail0("incorrect code of geolocation error");
    }
}

onErrorNativeCreate(onError : (geolocationError : GeolocationError) -> void) -> (int, string) -> void {
    \errorCode, message -> {
        onError(GeolocationError(geolocationErrorInt2Union(errorCode), message));
    }
}