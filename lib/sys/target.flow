// Â© Copyright 2011 Area9 Technologies.

import ds/array;
import math/math;
import runtime;
import devmode;

export {
	native getTotalMemoryUsed : io () -> double = Native.getTotalMemoryUsed;

	// What rendering target is this?
	// Format: comma-separated list of tokens.
	// "flash", "js", "neko", "qt", "opengl", "dpi=..." defined so far.
	native getTargetName : io () -> string = Native.getTargetName;
	native isWindowsPlatform : io () -> bool = Platform.getIsWindows;
	isWindowsPlatform() { false; }

	allTargets : [string] = strSplit(getTargetName(), ",");

	hasTargetName(s : string) -> bool { contains(allTargets, s) }

	// Are we targeting javascript, qt, flash, etc.?
	js : bool;
	nodejs : bool;
	nwjs : bool;
	jslibrary : bool;
	qt : bool;
	opengl : bool;
	flash : bool;
	xaml : bool;
	neko : bool;
	cpp : bool;
	java : bool;
	csharp : bool;

	cgi : bool;

	// Is this a mobile device (iOS or Android)?
	// Also set when using "--touch" parameter with desktop QtByteRunner
	mobile : bool;

	// Do we have a GUI?
	nogui : bool;

	// There is getPixelsPerCm() in zorder.flow
	// [-Revise-] Should we pass the value as string in the targets tokens too?
	screenDPI : int;
	screenDensity : double;

	// Does not work with c++ runner yet!
	windows : () -> bool;
	macosx : () -> bool;	// NOTE this may return true also for iOS
	linux : () -> bool;
	ios : () -> bool;
	android : () -> bool;

	windowsxp : () -> bool;

	isMobileBrowser() -> bool;

	// name getOs makes collision in Web target with many JS, HTML, PHP files
	getOsFlow : () -> string;
	getFlashVersion : () -> string;

	// Works only for JS with https://github.com/faisalman/ua-parser-js library
	getBrowser : () -> string;
	getResolution : () -> string;
	getUserAgent() -> string;

	isCapacitor() -> bool;

	// Only implemented for JS
	// possible values:
	// console, mobile, tablet, smarttv, wearable, embedded
	getDeviceType() -> string;

	// No Mask support in target
	targetNoMask : () -> bool;

	// No Filter support in target
	targetNoFilters : () -> bool;

	// Does this target have filesystem, processes?
	targetHasSystem : () -> bool;

	// Native support for video looping
	targetVideoLooping : () -> bool;

	// Subtitles and controls built into native video form
	targetVideoControls : () -> bool;

	targetNoFullscreen : () -> bool;

	// Makes sure that flash storage is available. If it doesn't then it blocks
	// all getKeyValue and setKeyValue calls. It allows to show storage settings
	// popup only once per session. As a side effect: getKeyValue and setKeyValue
	// won't be available during first run.
	checkFlashStorage : (fn : () -> void) -> void;

	isSafariBrowser() -> bool;
	isIE() -> bool;
	isEdge() -> bool;
	isChrome() -> bool;
	isFirefox() -> bool;
	isSamsungBrowser() -> bool;

	// Only implemented for JS
	isMobilePhone() -> bool;
	isTablet() -> bool;


	// JS: Performance helpers

	// How much time in ms passed from domLoading to dom domComplete events
	// Useful to estimate approximate device performace when divided by overall amount of clips created (countClips native from rendersupport.flow)
	native domCompleteTiming : io () -> double = Native.domCompleteTiming;

	// Run empty 'for' loop to estimate CPU speed in Ghz (compared with average time 1.7Ghz CPU took to execute this loop)
	native estimateCPUSpeed : io () -> double = Native.estimateCPUSpeed;

	// Detect dedicated video card available for web page rendering
	native detectDedicatedGPU : io () -> bool = Native.detectDedicatedGPU;

	// Get device memory size in Gb, returns -1 if size cannot be detected
	// Uses window.navigator.deviceMemory
	// Upper bound is 8Gb so devices with more memory will still return 8Gb
	native getDeviceMemory : io () -> double = Native.getDeviceMemory;

	// Get device architecture type, returns empty string if platform cannot be detected
	// Uses window.navigator.platform
	//
	// Examples:
	// 64 bit MacOS + 64 bit Safari or 32 bit Chrome: MacIntel
	// 32 bit windows + Safari: Win32
	// 64 bit windows + Chrome: Win32
	// 64 bit Windows + 64 bit IE: Win64
	// 64 bit Windows + 32 bit IE: Win32
	// 64 bit Windows + 32 Firefox (or Chrome): Win32
	// 32 bit linux mint (i686) + firefox: Linux i686
	// 64 bit Ubuntu (x86_64) + 32 bit Chrome: Linux i686
	// 64 bit Ubuntu + 64 bit Epiphany: Linux x86_64
	native getDevicePlatform  : io () -> string = Native.getDevicePlatform;

	is64BitPlatform() -> bool;
	is32BitPlatform() -> bool;
}

// Gets the OS of the client. Returns a string of the format "<major>,<minor>"
// where <major> is one of
//   "Windows", "MacOSX", "Linux", "iOS", "Android", "other"
// and <minor> determines the OS version (not specified yet).

js = hasTargetName("js");
nodejs = hasTargetName("nodejs");
nwjs = hasTargetName("nwjs");
jslibrary = hasTargetName("jslibrary");
qt = hasTargetName("qt");
opengl = hasTargetName("opengl");
flash = hasTargetName("flash");
xaml = hasTargetName("xaml");
neko = hasTargetName("neko");
cpp = hasTargetName("c++");
java = hasTargetName("java");
csharp = hasTargetName("csharp");
cgi = hasTargetName("cgi");
nativevideo : bool = hasTargetName("nativevideo");
nogui = neko || cgi || (cpp && !hasTargetName("gui")) || getUrlParameter("nogui") != "";

// in fact it's rather has "isTouchScreen" logic
mobile = hasTargetName("mobile") || isUrlParameterTrue("overridemobile");

screenDPI =
	switch (find(allTargets, \v -> startsWith(v, "dpi=")) : Maybe) {
		None() : 90;
		Some(v) : s2i(strRight(v, 4));
	};

screenDensity =
	switch (find(allTargets, \v -> startsWith(v, "density=")) : Maybe) {
		None() : 1.0;
		Some(v) : {
			parsedValue = s2d(strRight(v, 8));
			if (equalDoubles(parsedValue, 0.0)) 1.0 else parsedValue;
		}
	};


isWindows : ref bool = ref false;
isMacOSX : ref bool = ref false;
isLinux : ref bool = ref false;
isIos : ref bool = ref false;
isAndroid : ref bool = ref false;
majorOsPart : ref string = ref "";
minorOsPart : ref string = ref "";
flashVersion : ref string = ref "";
browser : ref string = ref "";
resolution : ref string = ref "";
userAgent : ref string = ref "";
deviceType : ref string = ref "";

getFlashVersion() -> string {
	initOsParts();
	^flashVersion;
}

getBrowser() -> string {
	initOsParts();
	^browser;
}

getResolution() -> string {
	initOsParts();
	^resolution;
}

getDeviceType() -> string {
	initOsParts();
	^deviceType;
}

getOsFlow() -> string {
	initOsParts();
	^majorOsPart + " " + ^minorOsPart;
}

getUserAgent() -> string {
	initOsParts();
	^userAgent
}

isCapacitor() {
	strContains(getUserAgent(), "CapacitorJS")
}

initOsParts() -> void {
	if (^majorOsPart == "") {
		os = if (hostCallExists("getOs")) {
			hostCall("getOs", []);
		} else {
			// Host calls is not implemented in C++ targets
			// Try to get OS from target tokens
			if (hasTargetName("iOS")) "iOS"
			else if (hasTargetName("android")) "Android"
			else if (hasTargetName("windows")) "Windows"
			else if (hasTargetName("linux")) "Linux"
			else if (hasTargetName("macosx")) "MacOSX"
			else "";
		};

		osParts = strSplit(os, ",");
		majorOsPart := if (length(osParts) > 0 && osParts[0] != "") osParts[0] else "other";
		minorOsPart := if (length(osParts) > 1 && osParts[1] != "") osParts[1] else "other";
		isWindows := ^majorOsPart == "Windows" || (!isUrlParameterFalse("windows_fix") && isWindowsPlatform());

		userAgentCheck = hostCall("getUserAgent", []);
		userAgent := if (toString(userAgentCheck) != "{}") userAgentCheck else "other";

		isMacOSX := ^majorOsPart == "MacOSX"
			|| strContains(toLowerCase(^userAgent), "mac os x");  // [-Revise-] temporary fix for Firefox on Mac. Must be removed once we have correct majorOsPart
		isLinux := ^majorOsPart == "Linux"
			|| strContains(toLowerCase(^userAgent), "linux");  // ^majorOsPart == "Linux" is true only in QtByteRunner
		isIos := ^majorOsPart == "iOS";
		isAndroid := ^majorOsPart == "Android";

		flashCheck = hostCall("getVersion", []);
		flashVersion := if (toString(flashCheck) != "{}") flashCheck else "other";

		browserCheck = hostCall("getBrowser", []);
		browser := if (toString(browserCheck) != "{}") browserCheck else "other";

		resolutionCheck = hostCall("getResolution", []);
		resolution := if (toString(resolutionCheck) != "{}") resolutionCheck else "other";

		deviceTypeCheck = hostCall("getDeviceType", []);
		deviceType := if (toString(deviceTypeCheck) != "{}") deviceTypeCheck else "other";

	}
}

windows() {
	initOsParts();
	^isWindows;
}

windowsxp() {
	// For browser targets only:
	ua = toLowerCase(getUserAgent());
	(strContains(ua, "windows nt 5.1") || strContains(ua, "windows xp"));
}

macosx() {
	initOsParts();
	^isMacOSX;
}

linux() {
	initOsParts();
	^isLinux;
}

ios() {
	initOsParts();
	^isIos;
}

android() {
	initOsParts();
	^isAndroid;
}

targetNoMask() {
	xaml || js;
}

targetNoFilters() {
	xaml || isUrlParameterTrue("no_shadows_test");
}

targetHasSystem() {
	cpp || nodejs || nwjs || java;
}

targetVideoLooping() {
	opengl || xaml || js;
}

targetVideoControls() {
	nativevideo}

targetNoFullscreen() {
	mobile
}

checkFlashStorage(fn) {
	if (flash) {
		ntimes = \m, str -> concatStrings(generate(0, m, \i -> str));
		v1 = ntimes(10, "a");   // 10
		v3 = ntimes(100, v1);   // 1K
		v6 = ntimes(1000, v3);  // 1M
		v7 = ntimes(11, v6);    // 11M
		checkKeyName = "megaCheckKeyName";

		// looks like storage popup is broken in flash plugin for MacOS, it is impossible to close it
		if (!macosx() && setKeyValue(checkKeyName, v7)) {
			setKeyValue(checkKeyName, "");
			{}
		} else {
			disableLocalStorage()
		}
	};

	fn()
}

bootTargetInit = {
	if (isDevMode()) {
		println("target: " + getTargetName());
		println("target: ");
		println("target: windows=" + toString(windows()));
		println("target: windowsxp=" + toString(windowsxp()));
		println("target: macosx=" + toString(macosx()));
		println("target: linux=" + toString(linux()));
		println("target: ios=" + toString(ios()));
		println("target: android=" + toString(android()));
		println("target: ");
		println("target: mobile=" + toString(mobile));
		println("target: screenDPI=" + toString(screenDPI));
		println("target: getOsFlow=" + toString(getOsFlow()));
		println("target: getFlashVersion=" + toString(getFlashVersion()));
		println("target: getBrowser=" + toString(getBrowser()));
		println("target: getResolution=" + toString(getResolution()));
		println("target: getUserAgent=" + toString(getUserAgent()));
	};
	0;
}

isMobileBrowser() -> bool {
	js && mobile;
}

safariBrowser : bool = js && strContains(toLowerCase(getBrowser()), "safari");
isSafariBrowser() -> bool {
	// https://github.com/faisalman/ua-parser-js#methods
	// Safari
	// Mobile Safari
	safariBrowser
}

isIE() -> bool {
	// https://github.com/faisalman/ua-parser-js#methods
	// IE, IEMobile
	js && startsWith(getBrowser(), "IE")
}

isEdge() -> bool {
	js && startsWith(getBrowser(), "Edge")
}

isChrome() -> bool {
	// https://github.com/faisalman/ua-parser-js#methods
	// Chrome Headless, Chrome WebView, Chrome
	js && startsWith(getBrowser(), "Chrome")
}

isSamsungBrowser() -> bool {
	// https://github.com/faisalman/ua-parser-js#methods
	// Samsung Browser
	js && startsWith(getBrowser(), "Samsung Browser")
}

isFirefox() -> bool {
	js && strContains(toLowerCase(getBrowser()), "firefox")
}

isMobilePhone() -> bool {
	mobile && getDeviceType() == "mobile"
}

isTablet() -> bool {
	mobile && getDeviceType() != "mobile"
}

domCompleteTiming() { -1.0; }
estimateCPUSpeed() { -1.0; }
detectDedicatedGPU() { false; }
getDeviceMemory() { -1.0; }
getDevicePlatform() { ""; }

is64BitPlatform() -> bool {
	strContains(getDevicePlatform(), "64") || strContains(getUserAgent(), "x64")
}

is32BitPlatform() -> bool {
	!is64BitPlatform() && (strContains(getDevicePlatform(), "32") || strContains(getDevicePlatform(), "86"))
}