import runtime;

export {
	// Has the semantics of a try-catch construction. Currently is implemented in java backend.
	// Catch function may rethrow the exception upper in stack
	native tryCatch : (try: () -> ?, catch: (??) -> ?) -> ? = FlowExceptions.tryCatch;

	// Throw the exception with a given payload (typically a message)
	native throw : (e: ?) -> ?? = FlowExceptions.throwException;
}

// Fallback: doesn't really catch the exception
tryCatch(try: () -> ?, catch: (??) -> ?) -> ? {
	try();
}

// Fallback: Causes a global failure
throw(e: ?) -> ?? {
	fail0(toString(e));
}
