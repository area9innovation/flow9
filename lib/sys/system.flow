import runtime;

export {
	// Read a file as binary, one byte per character
	native getFileContentBinary : io (filename : string) -> string = Native.getFileContentBinary;

	// Next two functions saves data in 'content' to file 'filename'.
	// setFileContentBytes saves only lower 8 bit of every character in 'content',
	// setFileContentBinary treats every character as two bytes unicode char and saves it into two bytes,
	// higher half and lower half separately.
	native setFileContentBinary : io (filename : string, content : string) -> bool  = Native.setFileContentBinary;
	native setFileContentBytes : io (filename : string, content : string) -> bool  = Native.setFileContentBytes;

	// Executes a process synchronously. Returns exit code. Implemented only in java.
	native execSystemProcess : io (command : string, args : [string], currentWorkingDirectory : string, onStdOutLine : (out : string) -> void, onStdErr : (error : string) -> void) -> int = Native.execSystemProcess;

	// Launch a system process
	native startProcess : io (command : string, args : [string], currentWorkingDirectory : string, stdin : string, onExit : (errorcode : int, stdout : string, stderr : string) -> void) -> void = Native.startProcess;

	// Launch real time controlled process
	native runSystemProcess : (command : string, args : [string], currentWorkingDirectory : string, onStdOutLine : (out : string) -> void, onStdErr : (error : string) -> void, onExit : (errocode : int) -> void) -> native = Native.runSystemProcess;
	native writeProcessStdin : io (process : native, input : string) -> void = Native.writeProcessStdin;
	native killSystemProcess : io (process : native) -> void = Native.killProcess;

	// start a process detached from the application process
	native startDetachedProcess : (command : string, args : [string], currentWorkingDirectory : string) -> bool = Native.startDetachedProcess;

	// Read n bytes from stdin input
	native readBytes : io (n : int) -> string = Native.readBytes;

	// Read from stdin until a pattern is met.
	native readUntil : io (pattern : string) -> string = Native.readUntil;

	// Print something to the console without new line in the end
	native print : io (s : string) -> void = Native.print;

	// For java backend. Returns the total/free/used memory occupied by programm.
	native totalMemory : io () -> double = Native.totalMemory;
	native freeMemory : io () -> double = Native.freeMemory;
	native maxMemory : io () -> double = Native.maxMemory;
	usedMemory() -> double;
}

usedMemory() -> double {
	totalMemory() - freeMemory();
}

totalMemory() -> double {
	0.0;
}

freeMemory() -> double {
	0.0;
}

maxMemory() -> double {
	0.0;
}