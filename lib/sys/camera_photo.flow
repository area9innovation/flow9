import runtime;

export {
    // Android and iOS supported only.

    // cameraId - look at rendersupport.flow for more info about getNumberOfCameras and getCameraInfo methods
    // on mobile devices, cameraId = 0 usually is back camera and cameraId = 1 - front camera

    // additionalInfo - Because on android, operating system can kill flowrunner application if there is not enough memory
    // all application state will be reset(everything, application data, callbacks). You can pass any info here that will help you to restore this state
    // for the same reason we do not have callback argument in cameraTakePhoto method, because it will become invalid after application restart by operating system

    // desiredWidth, desiredHeight. If photo image is bigger than desiredWidth/Height, it will be scaled down to it.
    // Important note: image aspects will be the same as orignial photo, but there is no guarantee that resulting image will have desired size
    // do not set desiredWidth/Height more than 4096
    // compressQuality - value from 0 to 100. recommended value is 80.
    // videoFileName - name of file without extension, don't forget to delete this file, when you don't need it anymore, use deleteFile method and filepath from
    // addCameraPhotoEventListener callback
    // fitMode - describes how we will respect desired width and height, check CameraTakePhotoFitMode enum for a better understanding
    native cameraTakePhotoNative : (cameraId : int, additionalInfo : string, desiredWidth : int, desiredHeight : int, compressQuality : int, videoFileName : string, fitMode : int) -> void = RenderSupport.cameraTakePhoto;
    native cameraTakeVideoNative : (cameraId : int, additionalInfo : string, duration : int, size : int, quality : int, videoFileName : string) -> void = RenderSupport.cameraTakeVideo;

    // Set callback for cameraTakePhoto result. Why we do not pass it as an argument to cameraTakePhoto method? See description of additionalInfo argument above
    // code - if equals to zero => we successfully took a photo. Any other result - fail
    // message: in case of success - path in filesystem to file. file itself have name "area9TmpPhoto.jpg", but full path may be different on different devices
    // additionalInfo - string with any data that has been passed to cameraTakePhoto method
    // width/height - size of photo, because it can be different from desired
    native addCameraPhotoEventListener : (cb : (code : int, message : string, additionalInfo : string, width : int, height : int) -> void) -> () -> void = Native.addCameraPhotoEventListener;
    native addCameraVideoEventListener : (cb : (code : int, message : string, additionalInfo : string, width : int, height : int, duration : int, size : int) -> void) -> () -> void = Native.addCameraVideoEventListener;

    cameraTakePhoto(cameraId : int, additionalInfo : string, desiredWidth : int, desiredHeight : int, compressQuality : int, style : [CameraTakePhotoStyle]) -> void;

    // duration - max video duration in sec
    // size - max video size in bytes
    // quality - currently value 0 means low quality, suitable for MMS messages, and value 1 means high quality. In the future other quality levels may be added.
    cameraTakeVideo(cameraId : int, additionalInfo : string, duration : int, size : int, quality : int, style : [CameraTakeVideoStyle]) -> void;

    CameraTakePhotoStyle ::= CameraTakePhotoFileName, CameraTakePhotoFit;
        CameraTakePhotoFileName(value : string); // we are not filtering this filename for invalid symbols
        CameraTakePhotoFit(mode : CameraTakePhotoFitMode); // describes how we will respect desired width and height

    CameraTakePhotoFitMode ::= CameraTakePhotoFitContain, CameraTakePhotoFitFill, CameraTakePhotoFitCover;
        CameraTakePhotoFitContain(); // Scale the resulting image to the largest size such that both its width and its height can fit inside the desizred size area (keeps aspect)
        CameraTakePhotoFitFill(); // Resulting image will be stretched over desired size area (ignoring aspect)
        CameraTakePhotoFitCover(); // Scale the resulting image to be as large as possible so that the desired size area is completely covered by the resulting image. Some parts of the resulting image may not be in view within the desired size area. (keeps aspect)

    CameraTakeVideoStyle ::= CameraTakeVideoFileName;
        CameraTakeVideoFileName(value : string);    

}

cameraTakePhoto(cameraId : int, additionalInfo : string, desiredWidth : int, desiredHeight : int, compressQuality : int, style : [CameraTakePhotoStyle]) -> void {
    photoFileName = extractStruct(style, CameraTakePhotoFileName("area9TmpPhoto")).value;
    fitMode = extractStruct(style, CameraTakePhotoFit(CameraTakePhotoFitContain())).mode;
    fitModeInt = switch (fitMode) {
        CameraTakePhotoFitContain(): 0;
        CameraTakePhotoFitFill(): 1;
        CameraTakePhotoFitCover(): 2;
    };
    cameraTakePhotoNative(cameraId, additionalInfo, desiredWidth, desiredHeight, compressQuality, photoFileName, fitModeInt);
}

cameraTakeVideo(cameraId : int, additionalInfo : string, duration : int, size : int, quality : int, style : [CameraTakeVideoStyle]) -> void {
    videoFileName = extractStruct(style, CameraTakeVideoFileName("area9TmpVideo")).value;
    cameraTakeVideoNative(cameraId, additionalInfo, duration, size, quality, videoFileName);
}

// fallback bodies
addCameraVideoEventListener(cb : (code : int, message : string, additionalInfo : string, width : int, height : int, duration : int, size : int) -> void) -> () -> void {nop};
cameraTakeVideoNative(cameraId : int, additionalInfo : string, duration : int, size : int, quality : int, videoFileName : string) -> void {};