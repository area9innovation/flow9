import sys/target;

export {
	//
	// Concurrency for C++ runner natives
	//

	// Load and JIT a bytecode file
	native loadBytecode : io (file : string) -> native  = Native.loadBytecode;

	// Launch loaded bytecode in a parallel thread with the specified url and parameters.
	// The loaded code object can be reused for more runBytecode calls.
	// Specified callbacks are invoked on completion and via child's notifyParentRunner.
	native runBytecode : io (code : native, url : string, onDone : (code : int, output : string) -> void,
			onMessage : (id : string, msg : string) -> void) -> native = Native.runBytecode;

	// Send an asynchronous message to the child thread started with runBytecode.
	// Both id and message are simply passed on to the callback.
	native notifyChildRunner : io (thread : native, id : string, message : string) -> void = Native.notifyChildRunner;

	// Send an asynchronous message to the parent thread; invokes the onMessage callback of runBytecode.
	native notifyParentRunner : io (id : string, message : string) -> void = Native.notifyParentRunner;

	// Register a callback for messages sent via parent's notifyChildRunner.
	native registerParentRunnerCallback : io (onMessage : (id : string, msg : string) -> void) -> void = Native.registerParentRunnerCallback;

	//
	// Concurrency for Java
	//

	// Runs a number of functions potentially in parallel. The fine flag
	// indicates if the functions are finegrained.
	// The result may be in a different order than tasks.
	native concurrent : (fine : bool, tasks : [() -> ?]) -> [?] = Native.concurrent;

	// Returns the value of a given ref while atomically adding to it. It is guaranteed
	// that the operation is atomic even with different concurrent tasks sharing the reference
	native atomicRefIntAddition : io (v : ref int, delta : int) -> int = Native.atomicRefIntAddition;

	// Runs asynchronous task in a new thread passing it's ID as an argument as well as a callback
	// to return a result in the end. Will call onDone when task is finished and send result to the main thread.
	native concurrentAsyncCallback : (
		task : (threadId : string, callback : (?) -> void) -> void,
		onDone : (?) -> void,
		onFail : (string) -> void
	) -> void = Native.concurrentAsyncCallback;

	native getThreadId : () -> string = Native.getThreadId;

	// Wrapper around ConcurrentHashMap - Java implementation of a thread safe map
	native initConcurrentHashMap : () -> native = Native.initConcurrentHashMap;
	native setConcurrentHashMap : (m : native, key : ?, value : ??) -> void = Native.setConcurrentHashMap;
	native getConcurrentHashMap : (m : native, key : ?, defval : ??) -> ?? = Native.getConcurrentHashMap;
	// merge m1 and m2 into m1
	native setAllConcurrentHashMap : (m1 : native, m2 : native) -> void = Native.setAllConcurrentHashMap;
	native containsConcurrentHashMap : (m : native, key : ?) -> bool = Native.containsConcurrentHashMap;
	native valuesConcurrentHashMap : (m : native) -> [??] = Native.valuesConcurrentHashMap;
	native removeConcurrentHashMap : (m : native, key : ?) -> void = Native.removeConcurrentHashMap;
	native keysConcurrentHashMap : (m : native) -> [?] = Native.keysConcurrentHashMap;
	native sizeConcurrentHashMap : (m : native) -> int = Native.sizeConcurrentHashMap;
	native clearConcurrentHashMap : (m : native) -> void = Native.clearConcurrentHashMap;

	// Creates a function call, wrapped in a synchronized block with a given lock object (mutex).
	// The lock on the object, passed in a first argument, usually is a shared object, which may be modified
	// by the second functional argument from different threads. It is set by a JVM during the call invocation and
	// is released when the call is completed. If synchronized function is called from the other
	// thread with the object with an active lock, the other thread will wait until the lock is released.
	//
	// Example of usage: implementaion of atomicRefIntAddition:
	//
	// makeAtomicRefIntAddition(v : ref int) -> (int) -> int {
	//    synchronizedUnaryFn(v, \delta -> { v := ^v + delta; ^v });
	// }
	native synchronizedConstFn : (lock : flow, fn : () -> ?) -> () -> ? = Native.synchronizedConstFn;
	native synchronizedUnaryFn : (lock : flow, fn : (?) -> ??) -> (?) -> ?? = Native.synchronizedUnaryFn;
	native synchronizedBinaryFn : (lock : flow, fn : (?, ??) -> ???) -> (?, ??) -> ??? = Native.synchronizedBinaryFn;
	native synchronizedTernaryFn : (lock : flow, fn : (?, ??, ???) -> ????) -> (?, ??, ???) -> ???? = Native.synchronizedTernaryFn;

	// Change number of available threads in the thread pool. Make sure to call it before thread pool is used.
	// Note: The call of requireExplicitQuitCall function spends 1 thread from the thread pool.
	native setThreadPoolSize : io (threads : int) -> void = Native.setThreadPoolSize;

	// Returns number of CPUs on the machine
	native availableProcessors : io () -> int = Native.availableProcessors;

	// Also see bellow: concurrentAsyncOne

	//
	// Concurrency for JS
	//

	// Async version of concurrent. Native version returns immediately,
	// callback called after all tasks finished.
	concurrentAsync : (fine : bool, tasks : [() -> ?], callback : ([?]) -> void) -> void;
	// Also works in Java
	concurrentAsyncOne : (fine : bool, task : () -> ?, callback : (?) -> void) -> void;


	// An implementation of the concurrent interface that is guaranteed to be
	// sequential (of some ordering of tasks).
	notConcurrent : (fine : bool, tasks : [() -> ?]) -> [?];

	sequential : (fine : bool, tasks : [() -> ?]) -> [?];

	// Call it to prevent the java program from exiting before the quit() function is called.
	// Without calling this function java target closes the program when the main function exits.
	// Attention: if quit() is never called, the program will hang forever!
	// If thread poll is used, then this function spends 1 thread of the thread pool.
	requireExplicitQuitCall() -> void;
}

// C++ runner native stubs

loadBytecode(file : string) -> native {
	r : [int] = [];
	flow(r);
}

availableProcessors() -> int {
	1
}

synchronizedConstFn(lock : flow, fn : () -> ?) -> () -> ? { fn; }
synchronizedUnaryFn(lock : flow, fn : (?) -> ??) -> (?) -> ?? { fn; }
synchronizedBinaryFn(lock : flow, fn : (?, ??) -> ???) -> (?, ??) -> ??? { fn; }

runBytecode(code : native, url : string, onDone : (code : int, output : string) -> void, onMessage : (id : string, msg : string) -> void) -> native {
	deferred(\ -> onDone(-1, "NOT IMPLEMENTED"));
	r : [int] = [];
	flow(r);
}
notifyChildRunner(thread, id, message) {}
notifyParentRunner(id, message) {}
registerParentRunnerCallback(onMessage) {}

// For Haskell and Java backends
concurrent (fine : bool, tasks : [()->?])->[?] {
	sequential(fine, tasks)
}

atomicRefIntAddition(v : ref int, delta : int) -> int {
	result = ^v;
	v := result + delta;
	result
}

notConcurrent(fine, tasks)
	map(shuffleArray(tasks), \task -> task());

sequential(fine, tasks) {
	map(tasks, \task -> task());
}

native concurrentAsync : (fine : bool, tasks : [() -> ?], callback : ([?]) -> void) -> void = Native.concurrentAsync;
native concurrentAsyncOne : (fine : bool, task : () -> ?, callback : (?) -> void) -> void = Native.concurrentAsyncOne;


// Stub for async version of concurrent.
// Actually waits for all tasks to complete.
concurrentAsync(fine : bool, tasks : [() -> ?], callback : ([?]) -> void) {
	callback(notConcurrent(fine, tasks));
}

concurrentAsyncOne(fine : bool, task : () -> ?, callback : (?) -> void) {
	callback(task());
}

getThreadId() -> string {
	""
}

// Fallbacks for concurrent hash map

initConcurrentHashMap() -> native {
	r : ref Tree<flow, flow> = ref makeTree();
	flow(r)
}

setConcurrentHashMap(m : native, key : ?, value : ??) -> void {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	t := setTree(^t, key, value);
}

getConcurrentHashMap(m : native, key : ?, defval : ??) -> ?? {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	cast(lookupTreeDef(^t, key, defval) : flow -> ??);
}

setAllConcurrentHashMap(m1 : native, m2 : native) -> void {
	t1 = cast(flow(m1) : flow -> ref Tree<flow, flow>);
	t2 = cast(flow(m2) : flow -> ref Tree<flow, flow>);
	t1 := mergeTree(^t1, ^t2);
}

containsConcurrentHashMap(m : native, key : ?) -> bool {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	containsKeyTree(^t, key);
}

valuesConcurrentHashMap(m : native) -> [??] {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	map(getTreeValues(^t), \x -> cast(x: flow -> ??));
}

removeConcurrentHashMap(m : native, key : ?) -> void {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	t := removeFromTree(^t, key);
}

keysConcurrentHashMap(m : native) -> [?] {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	map(getTreeKeys(^t), \x -> cast(x: flow -> ?));
}

sizeConcurrentHashMap(m : native) -> int {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	sizeTree(^t);
}

clearConcurrentHashMap(m : native) -> void {
	t = cast(flow(m) : flow -> ref Tree<flow, flow>);
	t := makeTree();
}

requireExplicitQuitCall() -> void {
	if (java) {
		devtrace("The program will not exit until the quit function is called");
		concurrentAsyncCallback(\i : string, callback : (?) -> void -> {}, \d : ? -> {}, \s : string -> {});
	}
}
