import sys/system;
import sys/target;

export {
	// Returns an array of process ids, which description contains a pattern. 
	// In case something goes wrong, returns None. 
	// Currently is implemented only in linux platform.
	findProcessIds(pattern : string) -> Maybe<[string]>;

	// Kills a process with a given id.
	// Currently is implemented only in linux platform.
	killProcessId(proc_id : string) -> void;
}

findProcessIds(pattern : string) -> Maybe<[string]> {
	if (linux()) {
		ids = ref [];
		code = execSystemProcess("ps", ["-ax"], ".", 
			\out -> {
				if (strContains(out, pattern)) {
					out1 = ltrim2(out, " ");
					non_digit = strIndexOf(out1, " ");
					id = strLeft(out1, non_digit);
					ids := concat(^ids, [id]);
				}
			}, 
			\err -> println("error: " + err)
		);
		if (code == 0) {
			Some(^ids);
		} else {
			println("code: " + i2s(code));
			None();
		}
	} else {
		// TODO: implement on other platforms
		println("'findProcessIds' is not implemented on " + getTargetName());
		None();
	}
}

killProcessId(proc_id : string) -> void {
	if (linux()) {
		code = execSystemProcess("kill", [proc_id], ".", 
			\out -> println(out), 
			\err -> println("error: " + err)
		);
		if (code == 0) {
			println("Flowc http server process " + proc_id + " is killed\n");
		} else {
			println("code: " + i2s(code));
		}
	} else {
		// TODO: implement on other platforms
		println("'killProcessId' is not implemented on " + getTargetName());
	}
}
