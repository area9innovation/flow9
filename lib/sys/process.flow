import sys/system;
import sys/target;

export {
	// Returns an array of process ids, which description contains a pattern. 
	// In case something goes wrong, returns None. 
	// Currently is implemented only in linux platform.
	findProcessIds(pattern : string) -> Maybe<[string]>;

	// Kills a process with a given id.
	// Currently is implemented only in linux platform.
	// Returns empty string if succeeds, and error message otherwise.
	killProcessId(proc_id : string) -> string;

	// Returns an outline of a given process, or empty string if there's no such process.
	// Currently is implemented only in linux platform.
	outlineProcessId(proc_id : string) -> string;

	SystemProcessOutput(
		stdout : string,
		stderr : string,
		stdall : string,
		exitCode : int
	);
	// Synchroniously execute and output the result in struct SystemProcessOutput.
	execSystemProcessOutput(command : string, args : [string], currentWorkingDirectory : string) -> SystemProcessOutput;
}

findProcessIds(pattern : string) -> Maybe<[string]> {
	if (linux()) {
		ids = ref [];
		code = execSystemProcess("ps", ["-ax"], ".", 
			\out -> {
				if (strContains(out, pattern)) {
					out1 = ltrim2(out, " ");
					non_digit = strIndexOf(out1, " ");
					id = strLeft(out1, non_digit);
					ids := concat(^ids, [id]);
				}
			}, 
			\err -> println("error: " + err)
		);
		if (code == 0) {
			Some(^ids);
		} else {
			println("code: " + i2s(code));
			None();
		}
	} else {
		// TODO: implement on other platforms
		println("'findProcessIds' is not implemented on " + getTargetName());
		None();
	}
}

killProcessId(proc_id : string) -> string {
	if (linux()) {
		err = ref "";
		add_err = \msg -> {
			if (^err == "") {
				err := msg;
			} else {
				err := ^err + "\n" + msg;
			}
		}
		code = execSystemProcess("kill", [proc_id], ".", 
			\out -> println(out), 
			\er -> add_err("error: " + er)
		);
		if (code != 0) {
			add_err("kill " + proc_id + " failed with exit code: " + i2s(code));
		}
		^err;
	} else {
		// TODO: implement on other platforms
		"'killProcessId' is not implemented on " + getTargetName();
	}
}

outlineProcessId(proc_id : string) -> string {
	if (linux()) {
		outline = ref "";
		code = execSystemProcess("ps", ["-ax"], ".",
			\out0 -> {
				out = trim(out0);
				if (startsWith(out, proc_id)) {
					outline := trim(substring(out, strlen(proc_id), strlen(out)));
				}
			},
			\err -> println("error: " + err)
		);
		^outline;
	} else {
		// TODO: implement on other platforms
		println("'outlintProcessId' is not implemented on " + getTargetName());
		"";
	}
}

execSystemProcessOutput(command : string, args : [string], currentWorkingDirectory : string) -> SystemProcessOutput {
	out = ref makeList();
	err = ref makeList();
	all = ref makeList();
	exit_code = execSystemProcess(command, args, currentWorkingDirectory, 
		\o -> { out := Cons(o, ^out); all := Cons(o, ^all); }, 
		\e -> { err := Cons(e, ^err); all := Cons(e, ^all); }, 
	);
	SystemProcessOutput(
		strGlue(list2array(^out), "\n"),
		strGlue(list2array(^err), "\n"),
		strGlue(list2array(^all), "\n"),
		exit_code
	);
}
