import sys/target;
import formats/json/json;

export {
    ScrollRestoration ::= SRAuto, SRManual;
        SRAuto();
        SRManual();

    // returns the current history state
    getHistoryState() -> Json;
    // returns the number of history states for current session
    getHistoryLength() -> int;
    // push another one history state on top of the stack
    // data - any Json, which you can get later on this very state
    // url - replace current URL without refreshing the page
    historyPushState(data : Json, title : string, url : Maybe<string>) -> void;
    // replace current history state
    // data - any Json, which you can get later on this very state
    // url - replace current URL without refreshing the page
    historyReplaceState(data : Json, title : string, url : Maybe<string>) -> void;
    // the same as the browsers' back button
    historyBack() -> void;
    // the same as the browsers' forward button
    historyForward() -> void;
    // the same as the browsers' back/forward button,
    // but can move you on few steps back or forward historyGo(-2)/historyGo(3)
    // historyGo(0) will refresh the page 
    historyGo(delta : int) -> void;
    // set history ScrollRestoration
    historySetScrollRestoration(restoration : ScrollRestoration) -> void;

    // returns full browser URL including urlHash
    getBrowserURL() -> string;
}

historySupportedTarget : bool = js && !nodejs && !nwjs;

getHistoryState() -> Json {
    if (historySupportedTarget) parseJson(historyStateNative()) else JsonNull()
}

getHistoryLength() -> int {
    if (historySupportedTarget) historyLength() else 0
}

historyPushState(data : Json, title : string, url : Maybe<string>) -> void {
    if (historySupportedTarget)
        historyPushStateNative(json2string(data), title, eitherMap(url, \u -> [u], []))
}

historyReplaceState(data : Json, title : string, url : Maybe<string>) -> void {
    if (historySupportedTarget)
        historyReplaceStateNative(json2string(data), title, eitherMap(url, \u -> [u], []))
}

historyBack() -> void {
    if (historySupportedTarget) browserHistoryBack()
}

historyForward() -> void {
    if (historySupportedTarget) browserHistoryForward()
}

historyGo(delta : int) -> void {
    if (historySupportedTarget) browserHistoryGo(delta)
}

historySetScrollRestoration(restoration : ScrollRestoration) -> void {
    if (historySupportedTarget)
        browserHistorySetScrollRestoration(
            switch (restoration) {
                SRAuto(): "auto";
                SRManual(): "manual";
            }
        )
}

getBrowserURL() -> string {
    if (historySupportedTarget) getBrowserURLNative() else ""
}

native historyStateNative : () -> string = HistoryApi.historyState;
native historyPushStateNative : (data : string, title : string, url : [string]) -> void = HistoryApi.pushState;
native historyReplaceStateNative : (data : string, title : string, url : [string]) -> void = HistoryApi.replaceState;
native historyLength : () -> int = HistoryApi.historyLength;
native browserHistoryBack : () -> void = HistoryApi.back;
native browserHistoryForward : () -> void = HistoryApi.forward;
native browserHistoryGo : (delta : int) -> void = HistoryApi.go;
native browserHistorySetScrollRestoration : (restoration : string) -> void = HistoryApi.setScrollRestoration;
native getBrowserURLNative : () -> string = HistoryApi.getBrowserURL;