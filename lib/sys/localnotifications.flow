import date;
import runtime;

export {
    // Example of usage: flow/sandbox/localnotifications/localnotifications_test.flow

    // On android, to be able to schedule local notification, ApplicationManifest.xml should contain
    /*
        <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
        ...
        <meta-data android:name="reliable_local_notifications" android:value="true"/>
        ...
        <receiver android:name=".FlowNotificationsBroadcastReceiver" />
        <receiver android:name=".FlowRebootReceiver">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
            </intent-filter>
        </receiver>
        <service android:name=".FlowRunnerService" android:exported="false"/>
        <service android:name=".FlowRunnerOnRebootService" android:exported="false"/>
    */

    // Always return true for android with version < 4.4
    native hasPermissionLocalNotification : () -> bool = NotificationsSupport.hasPermissionLocalNotification;
    // On android callback will be called with result of hasPermissionLocalNotification method
    native requestPermissionLocalNotification : (callback : (bool) -> void) -> void = NotificationsSupport.requestPermissionLocalNotification;
    native addOnClickListenerLocalNotification : (callback : (notificationId : int, notificationCallbackArgs : string) -> void) -> ( () -> void ) = NotificationsSupport.addOnClickListenerLocalNotification;
    native cancelLocalNotification : (notificationId : int) -> void = NotificationsSupport.cancelLocalNotification;

    // time in UTC timezone
    scheduleLocalNotification(time : Time, notificationId : int, callbackArgs : string, details : [NotificationDetails]) -> void;
    NotificationDetails ::= NotificationTitle, NotificationContent, NotificationWithSound, PinNotification, NotificationIcon;
        NotificationTitle : (value : string);
        NotificationContent ::= NotificationText;
            NotificationText : (value : string);
        NotificationWithSound();
        PinNotification();
        NotificationIcon : (url : string);


    // iOS only functionality. Badge - is a small notification at the right top corner of an application icon,
    // which contains count of unread current notifications.
    // Here is a setter and getter below.
    native getBadgeCount : io () -> int = NotificationsSupport.getBadgerCount;
    native setBadgeCount : io (value : int) -> void = NotificationsSupport.setBadgerCount;
}

// callbackArgs introduced, because application may be already turned off on mobile device
// but notification still exist, that is why we can't pass callback function directly
native scheduleLocalNotificationNative : (
    time : double,
    notificationId : int,
    notificationCallbackArgs : string,
    notificationTitle : string,
    notificationText : string,
    withSound : bool,
    pinNotification : bool,
    notificationIconUrl : string
) -> void = NotificationsSupport.scheduleLocalNotification;

scheduleLocalNotification(time : Time, notificationId : int, notificationCallbackArgs : string, details : [NotificationDetails]) -> void {
    timeNative = time2stamp(time);
    notificationTitle = extractStruct(details, NotificationTitle("")).value; // empty string means that runner should set application name instead of title
    notificationText = extractStruct(details, NotificationText("Notification text")).value;
    notificationIconUrl = extractStruct(details, NotificationIcon("")).url;
    // TODO: if NotificationContent will be extended, extract this switches to separate function and think about
    // some native method like `setTextAndStyle` from renderform
    /*notificationContent = fold(details, NotificationText(""), \acc, item ->{
        switch (item) {
            NotificationClick(__): acc;
            NotificationTitle(__): acc;

            NotificationText(__): item;
        }
    });
    notificationText = switch (notificationContent) {
        NotificationText(value): value;
    };*/
    pinNotification = contains(details, PinNotification());
    withSound = contains(details, NotificationWithSound());
    scheduleLocalNotificationNative(timeNative, notificationId, notificationCallbackArgs, notificationTitle, notificationText, withSound, pinNotification, notificationIconUrl);
}