import form/form;
import string;
import sys/target;
import sys/keycodes;

export {
	isShiftAlone(key : KeyEvent) -> bool;
	isShiftIn(key : KeyEvent) -> bool;

	// Since ctrl and meta key events are swapped on the native side for MacOS :
	// isCtrlAlone and isCtrlIn mean logical ctrl event
	isCtrlAlone(key : KeyEvent) -> bool;
	isCtrlIn(key : KeyEvent) -> bool;

	// isCtrlKeyAlone, isCtrlKeyIn mean real ctrl key event
	isCtrlKeyAlone(key : KeyEvent) -> bool;
	isCtrlKeyIn(key : KeyEvent) -> bool;

	isAltAlone(key : KeyEvent) -> bool;
	// Returns a string representation of KeyEvent
	shortcut2s(shortcut : Maybe<KeyEvent>) -> string;
	// Returns a string representation of keyboard combination which produces this KeyEvent
	shortcut2description(shortcut : Maybe<KeyEvent>) -> string;

	//Implemented for android native apps only
	native showSoftKeyboard : io (() -> void) = Native.showSoftKeyboard;
	native hideSoftKeyboard : io (() -> void) = Native.hideSoftKeyboard;
}

isShiftAlone(key : KeyEvent) -> bool {
	(toLowerCase(key.utf) == "shift" || (key.utf == "" && key.shift));
}

isShiftIn(key : KeyEvent) -> bool {
	(toLowerCase(key.utf) == "shift" || key.shift || key.keycode == KEY_SHIFT);
}

isCtrlAlone(key : KeyEvent) -> bool {
	(toLowerCase(key.utf) == "ctrl" || (key.utf == "" && key.ctrl)) || key.keycode == KEY_CTRL;
}

isCtrlIn(key : KeyEvent) -> bool {
	toLowerCase(key.utf) == "ctrl" || key.ctrl || key.keycode == KEY_CTRL;
}

isCmdAlone(key : KeyEvent) -> bool {
	toLowerCase(key.utf) == "meta" || (key.utf == "" && key.meta) || (key.utf == "[" && key.meta) || (key.keycode == 224 && key.meta) || (key.utf == "]" && key.meta) || key.keycode == KEY_META
}

isCmdIn(key : KeyEvent) -> bool {
	toLowerCase(key.utf) == "meta" || key.meta || key.keycode == KEY_META
}

isCtrlKeyAlone(key : KeyEvent) -> bool {
	if (macosx()) {
		isCmdAlone(key)
	} else {
		isCtrlAlone(key)
	}
}

isCtrlKeyIn(key : KeyEvent) -> bool {
	if (macosx() && !flash) {
		isCmdIn(key)
	} else {
		isCtrlIn(key)
	}
}

isAltAlone(key : KeyEvent) -> bool {
	(toLowerCase(key.utf) == "alt" || (key.utf == "" && key.alt));
}

// Returns a string representation of KeyEvent
// Should be used for make gui objects
// Opposed to 'parseShortcut(shortcut : string) -> KeyEvent' from gui.flow
shortcut2s(shortcut : Maybe<KeyEvent>) -> string {
	switch (shortcut) {
		Some (v) : {
			  ( if (v.ctrl)  "Ctrl+"  else "" ) 
			+ ( if (v.shift) "Shift+" else "" )
			+ ( if (v.alt)   "Alt+"   else "" )
			+ ( if (v.meta) {
					if (windows()) "Win+"
					else if (macosx()) "Cmd+"
					else ""
				} else ""
			  )
			+ v.utf;
		}
		default : "";
	}
}

// Returns a string representation of keyboard combination which produces this KeyEvent
// Returned value depends on client platform (Windows, MacOS)
// Should be used like a hint about shortcuts for users
shortcut2description(shortcut : Maybe<KeyEvent>) -> string {
	switch (shortcut) {
		Some (v) : {
			str = ( if (v.ctrl)  "Ctrl+"  else "" ) 
			+ ( if (v.shift) "Shift+" else "" )
			+ ( if (v.alt)   "Alt+"   else "" ) 
			+ ( if (v.meta) {
					if (windows()) "Win+"
					else if (macosx()) "Cmd+"
					else ""
				} else ""
			  )
			+ if (strlen(v.utf) == 1) toUpperCase(v.utf) else v.utf;
			if (macosx() || ios()) strReplaces(str, ["Ctrl", "Cmd", "Page up", "Fn+Up", "Page down", "Fn+Down", "Delete", "Fn+Delete", "Home", "Fn+Left", "End", "Fn+Right"]) else str;
		}
		default : "";
	}
}

showSoftKeyboard() {}
hideSoftKeyboard() {}