// © Copyright 2011 Area9 Technologies.

import math/math;
import maybe;
import string;
import utctime;
import text/translation;
import text/translationutils;

export {
	// month and day starting from 1
	Date(year : int, month : int, day : int);
	Time(year : int, month : int, day : int, hour : int, min : int, sec : int);

	nullDate = Date(0,0,0);
	nullTime = Time(0,0,0,0,0,0);
	// We need some invalid timestamp to represent nullTime distinct from epoch, since string2time(time2string(nullTime))
	// is not defined on C++
	nullTimestamp = -123.0;

	isNullDate(date : Date) -> bool { date == nullDate};
	isNullTime(time : Time) -> bool { time == nullTime};

	isValidDate(date : Date) -> bool;
	isValidTime(time : Time) -> bool;

	DateComparisonResult ::= DateBefore, DateAfter, DateEqual;
		DateBefore : ();
		DateAfter : ();
		DateEqual : ();

	// Compare dates
	compareDates : (first : Date, second : Date) -> DateComparisonResult;
	isDateBetween : (date : Date, date1 : Date, date2 : Date) -> bool;

	// Returns true  if the year given is leap year
	isLeapYear : (year : int) -> bool;

	// Format the date YYYY-MM-DD
	date2string(date : Date) -> string;
	// Will convert nullDate, nullTime to what you need
	date2stringDef(d : Date, def : string) -> string;
	time2stringDef(d : Time, def : string) -> string;
	// Transformations: "%D" to date.day, "%M" to date.month, "%YYYY" to date.year, "%YY" to last two number of date.year
	date2formatString(date : Date, template : string) -> string;
	date2formatStringDef(date: Date, template: string, def : string) -> string;
	// Reverse transform for date2formatString
	formatString2date(date: string, template: string) -> Maybe<Date>;
	formatString2dateDef(date: string, template: string, def : Date) -> Date;
	// Mask for short format of date
	shortDateFormat(lang : string) -> string;
	getDateString(date : Date, dayOfWeekLong : bool, monthLong : bool, yearEnabled : bool) -> string;
	getTimeString(time : Time, dayOfWeekLong : bool, monthLong : bool, yearEnabled : bool, is12hr : bool) -> string;
	// Format HH:MM:SS PM
	getTimeOnlyString(time : Time, secEnabled: bool, is12hr : bool) -> string;
	// Convert time only string to 12-hour (HH:MM:SS a.m./p.m) or 24-hour (HH:MM:SS) format
	// is12hr = true and time = 11:01:01 will be converted to 11:01:01 a.m.
	// is12hr = false and time = 12:01:01 a.m. will be converted to 00:01:01
	timeStringConvert(time : string, secEnabled : bool, is12hr : bool) -> string;
	// To validate only time string convert it to full "1000-01-01" + time string and then use validateTime()
	timeString2ValidDb(time : string) -> string;
	dateString2ValidDb(time : string) -> string;
	zeroSeconds(time : Time) -> Time;

	// Converts date to unix time and back
	date2stamp(date : Date) -> double;
	time2stamp(time : Time) -> double;
	stamp2date(stamp : double) -> Date;
	stamp2time(stamp : double) -> Time; // converts UTC timestamp to UTC time

	date2stamp2(d: Date) -> double;
	stamp2date2(stamp : double) -> Date;
	time2stamp2(t: Time) -> double; // converts local time to UTC timestamp
	stamp2time2(stamp : double) -> Time; // converts UTC timestamp to local time
	stamp2time3(stamp : double) -> Time; // crops year, month and date!

	date2time(d: Date) -> Time;
	date2timeEOD(d: Date) -> Time;
	time2date(t: Time) -> Date;
	time2timeEOD(t: Time) -> Time;

	// Calculates number of days between two Dates. Returns negative value if end precedes start
	getDaysBetweenDates : (start : Date, end : Date) -> int;

	// add some days to date
	addDaysToDate : (date : Date, days : int) -> Date;
	addMonthsToDate(date : Date, months : int) -> Date;
	addYearsToDate(date : Date, years : int) -> Date;

	addDaysToTime(time : Time, days : int) -> Time;

	// returns current date in local time
	native getCurrentDate : io () -> Date = Native.getCurrentDate;
	getCurrentTime() -> Time;
	getNumberOfDaysPerMonthInTheYear (year : int) -> [int];

	// mysql passes date strings to php in yyyy-mm-dd HH:MM format. This two functions transform
	// those strings to and from Date struct
	db2date : (s : string) -> Date;
	db2dateDef(s : string, def : Date) -> Date;
	date2db : (dt : Date) -> string;
	// It converts nullDate to None() then buildKeyValueForPhp won't pass it to php and it will be
	// considered as NULL in sql. It is necessary because mysql won't accept 0000-00-00 in strict_mode (which is recommended)
	date2dbValid(dt : Date) -> Maybe<string>;

	db2time : (s : string) -> Time;
	db2timeDef(s : string, def : Time) -> Time;
	time2db : (t : Time) -> string;
	// It converts nullTime to None() then buildKeyValueForPhp won't pass it to php and it will be
	// considered as NULL in sql. It is necessary because mysql won't accept 0000-00-00 00:00:00 in strict_mode (which is recommended)
	time2dbValid(t : Time) -> Maybe<string>;

	// Converts timestamp (in milliseconds) to string representation of the corresponding date
	// in format YYYY-MM-DD
	stamp2string(stamp : double) -> string;

	// Monday is zero
	dayOfWeek(date : Date) -> int;

	// Starts from zero
	weekOfYear(t : Time) -> int;

	// if flag then full date name
	dayOfWeekString(date : Date, longFormat : bool) -> string;
	monthString(date : Date, longFormat : bool) -> string;

	// Formats time interval as working days and hours
	formatTimeInterval(seconds : double) -> string;

	// for timestamp uses
	msInDay = 24.0 * 60.0 * 60.0 * 1000.0;

	min2ms(m : int) -> double;
	hour2ms(h : int) -> double;
	day2ms(d : int) -> double;

	setUTCdiff(offset : double) -> void;
	setUTCdiffFromServer(localtime : double, dbValue : string) -> void;
	localTime2utc(t: double) -> double;
	utc2localTime(t: double) -> double;

	//convert back and forth from utc to local time for db strings
	applyLocal2db(dbValue : string) -> string;
	applyUTC2db(dbValue : string) -> string;

	db2dateWithUTCCorrection(dbValue : string) -> Date;
	date2dbWithUTCCorrection(date : Date) -> string;

	validateTime(s : string) -> Maybe<Time>;

	utcDateTime2db(value : string) -> string;
	dbDateTime2utc(value : string) -> string;

	separator12hrFormat = " ";

	seconds2timelineString(secs : double) -> string;
}

utcDiff = ref 0.0;

setUTCdiffFromServer(localtime : double, dbValue : string) {
	utcDiff := i2d(round((localtime - string2time(dbValue)) / hour2ms(1))) * hour2ms(1);
}

applyLocal2db(dbValue0 : string) -> string {
	dbValue = dbValue0 |> db2time |> time2db; //quick fail protection
	if (dbValue == "0000-00-00 00:00:00") {
		dbValue
	} else {
		dbValue
		|> string2time
		|> utc2localTime
		|> time2string
	}
}

applyUTC2db(dbValue0 : string) -> string {
	dbValue = dbValue0 |> db2time |> time2db;
	if (dbValue == "0000-00-00 00:00:00") {
		dbValue
	} else {
		dbValue
		|> string2time
		|> localTime2utc
		|> time2string
	}
}

db2dateWithUTCCorrection(dbValue0 : string) -> Date {
	dbValue = dbValue0 |> db2time |> time2db;
	if (dbValue == "0000-00-00 00:00:00") {
		nullDate
	} else {
		dbValue
		|> db2time
		|> time2stamp2
		|> utc2localTime
		|> stamp2date2
	}
};

date2dbWithUTCCorrection(date : Date) -> string {
	date
	|> date2stamp2
	|> localTime2utc
	|> stamp2time2
	|> time2db
};

setUTCdiff(offset: double) -> void {
	utcDiff := offset;
}

localTime2utc(t: double) -> double {
	t - ^utcDiff
}

utc2localTime(t: double) -> double {
	t + ^utcDiff
}

min2ms(m : int) -> double {
	i2d(m) * 60000.0
}

hour2ms(h : int) -> double {
	min2ms(h) * 60.0
}

day2ms(d : int) -> double {
	hour2ms(d) * 24.0
}

native dayOfWeek1 : io (year: int, month: int, day: int) -> int = Native.dayOfWeek;

// Monday is zero
dayOfWeek(date) {
	dayOfWeek1(date.year, date.month, date.day);
}

weekOfYear(t : Time) -> int {
	startOfYear = Date(t.year, 1, 1);
	days = getDaysBetweenDates(startOfYear, time2date(t));
	startDayOfWeek = dayOfWeek(startOfYear);
	week = (days + startDayOfWeek) / 7;
	week
}

dayOfWeekString (date, longFormat) {
	dayOfWeekArray = [_("Monday"), _("Tuesday"), _("Wednesday"), _("Thursday"), _("Friday"), _("Saturday"), _("Sunday")];
	weekDay = dayOfWeek(date);

	dayOfWeekValue = dayOfWeekArray[weekDay];
	if (longFormat) {
		dayOfWeekValue
	} else {
		strLeft(dayOfWeekValue, 3)
	}
}

monthString(date, longFormat) {
	monthArray = [_("January"), _("February"), _("March"), _("April"), _("May"), _("June"), _("July"), _("August"), _("September"), _("October"), _("November"), _("December")];
	month = elementAt(monthArray, max(date.month-1, 0), "");
	if (longFormat) month else strLeft(month, 3);
}

compareDates(first, second) {
	if (first < second) {
		DateBefore()
	} else if (second < first) {
		DateAfter()
	} else {
		DateEqual()
	}
}

isDateBetween (date : Date, date1 : Date, date2 : Date) -> bool {
	if (date1 == date2) {
		date == date1
	} else {
		compareDates(date, date1) != compareDates(date, date2)
	}
}

date2string(d : Date) -> string {
	dd = \i -> lpad(i2s(i), "0", 2);
	yy = \i -> lpad(i2s(i), "0", 4);
	yy(d.year) + "-" + dd(d.month) + "-" + dd(d.day);
}

date2stringDef(d : Date, def : string) -> string {
	if (isNullDate(d)) def else date2string(d)
}

time2stringDef(t : Time, def : string) -> string {
	if (isNullTime(t)) def else time2string(time2stamp(t))
}

date2formatString(date: Date, template: string) -> string {
	if (date == nullDate) "n/a"
	else
		strReplaces(template, [
			"%DDDD", dayOfWeekString(date, true),
			"%DDD", dayOfWeekString(date, false),
			"%DD", (if (date.day < 10) "0" else "") + i2s(date.day),
			"%D", i2s(date.day),
			"%MMMMM", strLeft(monthString(date, true), 1),
			"%MMMM", monthString(date, true),
			"%MMM", monthString(date, false),
			"%MM", (if (date.month < 10) "0" else "") + i2s(date.month),
			"%M", i2s(date.month),
			"%YYYY", i2s(date.year),
			"%YY",
					i2s(date.year % 100)
		])
}

date2formatStringDef(date: Date, template: string, def : string) -> string {
	d = date2formatString(date, template);
	if (d == "n/a") def else d
}

formatString2date(date: string, template: string) -> Maybe<Date> {
	if (date == "") Some(nullDate)
	else {
		dateParts = strSplit(date, "-");
		if (length(dateParts) == 3 && isDigits(dateParts[0]) && isDigits(dateParts[1]) && isDigits(dateParts[2])) {
			templateParts = strSplit(strRight(template, 1), "%");
			if (length(templateParts) == 3) {
				day = eitherFn(findi(templateParts, \e -> e == "DD" || e == "D"), \i -> dateParts[i], \-> "");
				month = eitherFn(findi(templateParts, \e -> e == "MMMM" || e == "MMM" || e == "MM" || e == "M"), \i -> dateParts[i], \-> "");
				year = eitherFn(findi(templateParts, \e -> e == "YYYY" || e == "YY"), \i -> dateParts[i], \-> "");
				dt = Date(
					s2i(year),
					s2i(month),
					s2i(day)
				);
				if (dt == nullDate || isValidDate(dt))
					Some(dt)
				else None();
			} else None();
		} else None();
	}
}

formatString2dateDef(date: string, template: string, def : Date) -> Date {
	d = formatString2date(date, template);
	either(d, def);
}

shortDateFormat(lang : string) -> string {
	if (lang == "en" || lang == "")
		"%M/%D"
	else
		"%D/%M"
}

getDateString(date : Date, dayOfWeekEnabled : bool, monthLong : bool, yearEnabled : bool) -> string {
	concatStrings([
		if (dayOfWeekEnabled) dayOfWeekString(date, true) + ", " else "",
		monthString(date, monthLong),
		" ",
		i2sTh(date.day),
		if (yearEnabled) ", " + i2s(date.year) else ""
	])
}

getTimeOnlyString(time : Time, secEnabled: bool, is12hr : bool) -> string {
	minutes = (if (time.min < 10) "0" else "") + i2s(time.min);
	seconds = (if (time.sec < 10) "0" else "") + i2s(time.sec);
	secondsStr = if (secEnabled)  ":" + seconds else "";
	if (is12hr) {
		hours = if (time.hour == 0) "12" else if (time.hour < 13) i2s(time.hour) else i2s(time.hour - 12);
		hours + ":" + minutes + secondsStr + separator12hrFormat + if (time.hour < 12) "a.m." else "p.m."
	} else {
		i2s(time.hour) + ":" + minutes + secondsStr
	}
}

timeStringConvert(time : string, secEnabled : bool, is12hr : bool) -> string {
	timeParts = strSplit(time, ":");
	len = length(timeParts);

	if (len >= 2) {
		lastPartWithSuffix = timeParts[len - 1];
		pos12hrs = either(strFindFirstOfStrings(lastPartWithSuffix, ["a.m.", "p.m."]),  Pair(strlen(lastPartWithSuffix) + 1, -1));
		lastPart = strLeft(lastPartWithSuffix, pos12hrs.first - 1);

		if (foldi(timeParts, true, \i, acc, v -> acc && (i == len - 1 || isDigits(v))) && isDigits(lastPart)) {
			hourstInt = s2i(timeParts[0]);
			minSecs = if (len == 3)
				Pair(":" + timeParts[1], if (secEnabled) ":" + lastPart else "")
			else
				Pair(":" + lastPart, if (secEnabled) ":00" else "");

			if (is12hr) {
				hours = if (pos12hrs.second == -1)
					if (hourstInt == 0) "12" else if (hourstInt < 13) timeParts[0] else i2s(hourstInt - 12)
				else
					timeParts[0];
				hours + minSecs.first + minSecs.second + separator12hrFormat + if (hourstInt < 12) "a.m." else "p.m.";
			} else {
				hours = if (pos12hrs.second == 0 && hourstInt == 12)
					i2s(hourstInt - 12)
				else if (pos12hrs.second == 0 && hourstInt > 12)
					i2s(hourstInt - 24)
				else if (pos12hrs.second == 1)
					i2s(hourstInt + 12)
				else
					timeParts[0];
				hours + minSecs.first + minSecs.second;
			}
		} else "";
	} else "";
}

timeString2ValidDb(time : string) -> string {
	"1000-01-01 " + timeStringConvert(time, true, false);
}

dateString2ValidDb(date : string) -> string {
	date + " 00:00:00"
}

zeroSeconds(time : Time) -> Time {
	Time(time.year, time.month, time.day, time.hour, time.min, 0);
}

getTimeString(time : Time, dayOfWeekEnabled : bool, monthLong : bool, yearEnabled : bool, is12hr : bool) -> string {
	getDateString(Date(time.year, time.month, time.day), dayOfWeekEnabled, monthLong, yearEnabled) + ", " + getTimeOnlyString(time, false, is12hr)
}

// Using UTC below because we want stamps to be the same regardless of TZ,
// because dayOfWeek relies on 1970-1-1 being Thurdsay. And it might
// not be so in other TZ.
// Also storing UTC in database seems like a sane thing to do.
date2stamp(d : Date) -> double {
	// string2time on some platforms expects yyyy-mm-dd HH:MM:SS
	string2timeUtc(dateString2ValidDb(date2string(d)));
}

//without utc2local
date2stamp2(d: Date) -> double
{
	string2time(dateString2ValidDb(date2string(d)));
}

time2stamp2(t: Time) -> double
{
	if (t == nullTime) nullTimestamp else string2time(time2db(t));
}

time2stamp(t : Time) -> double {
	if (t == nullTime) nullTimestamp else string2timeUtc(time2db(t)); //utc2local
}

stamp2date(stamp : double) -> Date {
	db2date(time2stringUtc(stamp));
}

stamp2date2(stamp : double) -> Date {
	if (stamp == nullTimestamp) nullDate else db2date(time2string(stamp));
}

stamp2time(stamp : double) -> Time {
	if (stamp == nullTimestamp) nullTime else db2time(time2stringUtc(stamp)); //local2utc
}

stamp2time2(stamp : double) -> Time {
	if (stamp == nullTimestamp) nullTime else db2time(time2string(stamp))
}

stamp2time3(stamp : double) -> Time {
	hh = floorEq(stamp / 3600000.0);
	mm = floorEq(stamp / 60000.0) - 60 * hh;
	ss = floorEq(stamp / 1000.0) - 60 * mm - 3600 * hh;
	Time(0, 0, 0, hh, mm, ss)
}


getNumberOfDaysPerMonthInTheYear (year) {
	[
		0,  // Zeruary
		31, // January
		28 + b2i(isLeapYear(year)), // February
		31, // March
		30, // April
		31, // May
		30, // June
		31, // July
		31, // August
		30, // September
		31, // October
		30, // November
		31  // December
	]
}

date2time(d: Date) {
	Time(d.year, d.month, d.day, 0, 0, 0)
}

date2timeEOD(d: Date) {
	Time(d.year, d.month, d.day, 23, 59, 59)
}

time2date(t: Time) {
	Date(t.year, t.month, t.day)
}

time2timeEOD(t: Time) {
	Time(t.year, t.month, t.day, 23, 59, 59)
}

getDaysBetweenDates(first, second) {
	calculateInsideOneYear = \start, end -> {
		assert(start.year == end.year, "This function must get dates with the same year.");
		daysPerMonth = getNumberOfDaysPerMonthInTheYear(start.year);
		if (start.month == end.month) {
			end.day - start.day
		} else {
			daysPerMonth[start.month] - start.day +
			end.day +
			fold(
				subrange(daysPerMonth, start.month + 1, end.month - start.month - 1),
				0,
				\acc, val -> acc + val
			)
		}
	}

	// TODO: rewrite with acc := acc + nextVal
	// if it is necessary to use the function with long ranges
	calculateWholeYears = \startYear, endYear -> {
		if (endYear - startYear < 2) {
			0
		} else {
			fold(
				generate(startYear + 1, endYear, \i -> 365 + b2i(isLeapYear(i))),
				0,
				\acc, val -> acc + val
			)
		}
	}
	calculateDuration = \start, end -> {
		if (end.year - start.year == 0) {
			calculateInsideOneYear(start, end)
		} else {
			calculateInsideOneYear(start, Date(start.year, 12, 31)) +
			calculateInsideOneYear(Date(end.year, 1, 1), end) + 1 +
			calculateWholeYears(start.year, end.year)
		}
	}
	datesRelation = compareDates(first, second);
	switch (datesRelation : DateComparisonResult) {
		DateBefore() : 	calculateDuration(first, second);
		DateEqual() : 0;
		DateAfter() : -calculateDuration(second, first);
	}
}

addDaysToDate(date, days) {
	stamp = string2timeUtc(date2string(date) + " 12:00:00");
	(stamp + day2ms(days)) |> stamp2date
}

fixDay(year : int, month : int, day : int) -> Date {
	Date(year, month,
		min(day, getNumberOfDaysPerMonthInTheYear(year)[month])
	)
}

addMonthsToDate(date : Date, months : int) -> Date {
	yearShift = (date.month + months) / 12;
	month = (date.month + months) % 12;
	if (month <= 0) fixDay(date.year + yearShift - 1, month + 12, date.day)
	else fixDay(date.year + yearShift, month, date.day)
}

addYearsToDate(date : Date, years : int) -> Date {
	fixDay(date.year + years, date.month, date.day)
}

addDaysToTime(time, days) {
	(time2stamp(time) + day2ms(days)) |> stamp2time
}

getCurrentTime() {
	stamp2time(timestamp())
}

isLeapYear(year) {
	year % 4 == 0 && year % 100 != 0 || year % 400 == 0
}

db2date(s) {
	parts = strSplit(s, " ");
	if (length(parts) > 0){
		dateParts = strSplit(parts[0], "-");
		if (length(dateParts) == 3 && isDigits(dateParts[0]) && isDigits(dateParts[1]) && isDigits(dateParts[2])) {
			Date(
				s2i(dateParts[0]),
				s2i(dateParts[1]),
				s2i(dateParts[2])
			)
		} else nullDate;
	} else nullDate;

}

db2dateDef(s : string, def : Date) -> Date {
	d = db2date(s);
	if (d == nullDate) def else d
}

date2db(dt) {
	lpad(i2s(dt.year), "0", 4) + "-" + lpad(i2s(dt.month), "0", 2) + "-" + lpad(i2s(dt.day), "0", 2)
}

date2dbValid(dt : Date) -> Maybe<string> {
	if (isNullDate(dt)) None() else Some(date2db(dt))
}

db2time(s) {
	parts = strSplit(s, " ");
	if (length(parts) >= 1) {
		dateParts = strSplit(parts[0], "-");
		timeParts = if (length(parts) == 1) ["0", "0", "0"] else strSplit(parts[1], ":");
		if (length(dateParts) == 3 && isDigits(dateParts[0]) && isDigits(dateParts[1]) && isDigits(dateParts[2])
			&& length(timeParts) == 3 && isDigits(timeParts[0]) && isDigits(timeParts[1]) 
				// The last part can contain fractional seconds
				&& isDouble(timeParts[2])
			) {
			tm = Time(
				s2i(dateParts[0]),
				s2i(dateParts[1]),
				s2i(dateParts[2]),
				s2i(timeParts[0]),
				s2i(timeParts[1]),
				s2i(timeParts[2])
			);
			if (isValidTime(tm))
				tm
			else nullTime;
		} else nullTime;
	} else nullTime;
}

db2timeDef(s : string, def : Time) -> Time {
	t = db2time(s);
	if (t == nullTime) def else t
}

daysIn(m : int, leap : bool) -> int{
	if (m <= 7)
		if (m == 2)
			if (leap) 29 else 28
		else if (mod(m, 2) == 0) 30
		else 31
	else if (mod(m, 2) == 0) 31
	else 30
}

isValidTime(time : Time) -> bool {
	time.year >= 1000 && time.year <= 9999 &&
	time.month >= 1 && time.month <= 12 &&
	time.day >= 1 && time.day <= daysIn(time.month, isLeapYear(time.year)) &&
	time.hour >= 0 && time.hour <= 23 &&
	time.min >= 0 && time.min <= 59 &&
	time.sec >= 0 && time.sec <= 59
}

isValidDate(date : Date) -> bool {
	isValidTime(date2time(date));
}

validateTime(s) {
	if (s == "") {
		Some(nullTime)
	} else {
		parts = strSplit(s, " ");
		if (length(parts) == 2) {
			dateParts = strSplit(parts[0], "-");
			timeParts = strSplit(parts[1], ":");
			if (length(dateParts) == 3 && length(timeParts) == 3 &&
				forall(dateParts, isDigits) && forall(timeParts, isDigits)
			) {
				tm = Time(
					s2i(dateParts[0]),
					s2i(dateParts[1]),
					s2i(dateParts[2]),
					s2i(timeParts[0]),
					s2i(timeParts[1]),
					s2i(timeParts[2])
				);
				if (isValidTime(tm))
					Some(tm)
				else None();
			}
			else None();
		} else None();
	}
}

time2db(dt) {
	lpad(i2s(dt.year), "0", 4) + "-" + lpad(i2s(dt.month), "0", 2) + "-" + lpad(i2s(dt.day), "0", 2)
	+ " " + lpad(i2s(dt.hour), "0", 2) + ":" + lpad(i2s(dt.min), "0", 2) + ":" + lpad(i2s(dt.sec), "0", 2)
}

time2dbValid(t : Time) -> Maybe<string> {
	if (isNullTime(t)) None() else Some(time2db(t))
}

stamp2string(stamp : double) -> string {
	date2string(stamp2date(stamp));
}

formatUnit(number : int, unit : string) -> string {
	unitS = " " + unit;
	if (number == 1) unitS else unitS + "s";
}

// Formats time interval as working days and hours
formatTimeInterval(seconds : double) -> string {
	dhours = seconds / 3600.0;

	// One working day consists of 8 hours
	days = trunc(dhours / 8.0);
	hours = trunc(drem(dhours, 8.0));
	i2s(days) + formatUnit(days, "day") + " " + i2s(hours) + formatUnit(hours, "hour");
}

utcDateTime2db(value : string) -> string {
	value |> trim |>
	(\v -> strReplace(v, "T", " ")) |>
	(\v -> strReplace(v, "Z", ""))
}

dbDateTime2utc(value : string) -> string {
	value |> trim |>
	(\v -> strReplace(v, " ", "T")) |>
	(\v -> v + "Z")
}

seconds2timelineString(secs : double) -> string {
	hours = d2s(dfloor(secs / 3600.0));
	mins = d2s(dfloor(secs % 3600.0 / 60.0));
	seconds = d2s(dfloor(secs % 60.0));

	if (hours == "0") {
		mins + ":" + lpad(seconds, "0", 2);
	} else {
		hours + ":" + lpad(mins, "0", 2) + ":" + lpad(seconds, "0", 2);
	}
}
