import string;
import ds/tree;

export {
	FONT_WEIGHT_BOOK =   400;
	FONT_WEIGHT_MEDIUM = 500;
	FONT_WEIGHT_BOLD =   700;

	FONT_SLOPE_NORMAL =  "normal";
	FONT_SLOPE_ITALIC =  "italic";
	FONT_SLOPE_OBLIQUE = "oblique";

	// TODO analyze and maybe use name always instead of family.
	FontFace(name : string, family : string, weight : int, slope : string, families : [string]);

	fontFace2weight(font: FontFace) -> int;
	fontFace2slope(font: FontFace) -> string;

	// Converts font's families to string.
	fontFace2familiesString(font: FontFace) -> string;

	// Converts font name to HTML and store all attributes in FontFace for simplified usage
	// name must be mapped font name (result of getMappedFont)
	fontName2fontFace(name : string) -> FontFace;
	fontsRepoClear() -> void;

	// This clears the repo and pushes some default fonts there. It is recommended to call it explicitly.
	fontsRepoReset() -> void;

	// Adds a font and returns its name in HTML
	fontsRepoRegisterFont(font: FontFace) -> string;
	fontsRepoRegisterFonts(fonts: [FontFace]) -> [string];
}

getInitialRepo() -> Tree<string, FontFace> {
	values2tree(
		[
			FontFace("Roboto",             "Roboto",             FONT_WEIGHT_BOOK,   FONT_SLOPE_NORMAL, ["Roboto"]),
			FontFace("RobotoMedium",       "RobotoMedium",       FONT_WEIGHT_MEDIUM, FONT_SLOPE_NORMAL, ["Roboto"]),
			FontFace("RobotoBold",         "RobotoBold",         FONT_WEIGHT_BOLD,   FONT_SLOPE_NORMAL, ["Roboto"]),
			FontFace("RobotoItalic",       "RobotoItalic",       FONT_WEIGHT_BOOK,   FONT_SLOPE_ITALIC, ["Roboto"]),
			FontFace("Book",               "Book",               FONT_WEIGHT_BOOK,   FONT_SLOPE_NORMAL, ["Roboto"]),
			FontFace("Italic",             "Italic",             FONT_WEIGHT_BOOK,   FONT_SLOPE_ITALIC, ["Roboto"]),
			FontFace("Medium",             "Medium",             FONT_WEIGHT_BOLD,   FONT_SLOPE_NORMAL, ["Roboto", "sans-serif"]),
			FontFace("MaterialIcons",      "MaterialIcons",      FONT_WEIGHT_BOOK,   FONT_SLOPE_NORMAL, ["Material Icons"]),
			FontFace("RobotoMediumItalic", "RobotoMediumItalic", FONT_WEIGHT_MEDIUM, FONT_SLOPE_ITALIC, ["Roboto"]),
		],
		\font -> font.name,
	);
}

theRepo : ref Tree<string, FontFace> = ref getInitialRepo();

fontFace2weight(font: FontFace) -> int {
	font.weight
}

fontFace2slope(font: FontFace) -> string {
	font.slope;
}

fontFace2familiesString(font: FontFace) -> string {
	strGlue(map(font.families, \fam-> formatString("'%1'", [fam])), ",");
}

fontsRepoClear() -> void {
	theRepo := makeTree();
}

fontsRepoReset() -> void {
	theRepo := getInitialRepo();
}

fontsRepoRegisterFont(font: FontFace) -> string {
	theRepo := setTree(^theRepo, font.name, font);
	font.name;
}

fontsRepoRegisterFonts(fonts: [FontFace]) -> [string] {
	theRepo := fold(fonts, ^theRepo, (\acc, f -> setTree(acc, f.name, f)));
	map(fonts, \f -> f.name);
}

fontName2fontFace(name: string) -> FontFace {
	// TODO analyze if fallbacks are really used and remove otherwise.
	nameAndFallbacks = map(strSplit(name, ","), trim);
	r = lookupTreeDef(^theRepo, nameAndFallbacks[0], FontFace(nameAndFallbacks[0], nameAndFallbacks[0], FONT_WEIGHT_BOOK, FONT_SLOPE_NORMAL, [nameAndFallbacks[0]]));
	FontFace(r with families=concat(r.families, tail(nameAndFallbacks)));
}
