#!/usr/bin/python

import os
import sys
import shutil

usage = '''
Build a target with flowc. Options:
	file=<name>       file to build (obligatory)
	type=<name>       Target type. One of the following: java, c++. default=java 
	compiler=<name>   choose a compiler, optional, default=flowc1
	opt_<name>=<val>  pass option <name> with value <val> to flowc
'''

def toStdout(text):
	sys.stdout.write(text)
	sys.stdout.flush()

def find_flowdir():
	paths = os.environ['PATH'].split(os.pathsep)
	for path in paths:
		path = path.rstrip(os.sep)
		if os.path.isfile(os.path.join(path, 'flowc')):
			return os.path.split(path)[0]
	return None

def parseArgs():
	args = {}
	for arg in sys.argv:
		name_val = arg.split('=')
		if len(name_val) > 2:
			toStdout(usage)
			sys.stdout.flush()
			sys.exit(1)
		elif len(name_val) == 2:
			args[name_val[0]] = val = name_val[1]
	return args

def findConfigDir(dir_name):
	try:
		open(os.path.join(dir_name, "flow.config"))
		return dir_name
	except IOError:
		prefix_dir = os.path.dirname(dir_name)
		if prefix_dir != dir_name:
			return findConfigDir(prefix_dir)
		else:
			return None

'''
Java building part.
'''

def buildRuntime(args):
	toStdout('* Compiling runtime\n-----------------\n')
	currdir = os.getcwd()
	flowdir = args['flowdir']
	javadir = os.path.join(flowdir, 'platforms', 'java')
	os.chdir(javadir)
	javasrc = os.path.join('com', 'area9innovation', 'flow', '*.java')
	code = os.system('javac -g ' + javasrc)
	if code != 0:
		toStdout('Runtime compilation failed: ' + str(code) + '\n')
		sys.exit(1)
	os.chdir(currdir)

def generateJavaCode(args):
	flowfile = args['file']
	flowdir  = args['flowdir']
	compiler = os.path.join(flowdir, 'bin', args.get('compiler', 'flowc1'))
	toStdout('* Generating the Java modules for ' + flowfile + '\n-------------------------------------\n')
	compiler_args = [compiler, 'java=javagen']
	for name in args:
		if 'opt_' in name:
			opt_name = name[4:]
			compiler_args.append(opt_name + '=' + args[name])
	compiler_args.append(flowfile) 
	code = os.system(' '.join(compiler_args))
	if code != 0:
		toStdout('Java code generation failed: ' + str(code) + '\n')
		sys.exit(1)

def compileGeneratedCode(args):
	flowdir  = args['flowdir']
	flowfile = args['file']
	javadir = os.path.join(flowdir, 'platforms', 'java')
	toStdout('* Compiling the generated code\n----------------------------\n')
	src_dir = os.path.join('javagen', 'com', 'area9innovation', 'flow')
	javasrc = os.path.join(src_dir, '*.java')
	if os.path.isfile(os.path.join(src_dir, 'sources')):
		javasrc = "@" + os.path.join(src_dir, 'sources')
	code = os.system('javac -Xlint:unchecked -encoding UTF-8 -classpath "' + javadir  + ':javagen" ' + javasrc)
	if code != 0:
		toStdout('Generated java code compilation failed: ' + str(code))
		sys.exit(1)

def buildJarFile(args):
	flowfile = args['file']
	flowdir  = args['flowdir']
	javadir = os.path.join(flowdir, 'platforms', 'java')
	jarfile = flowfile[0:len(flowfile) - len('flow')] + 'jar'
	toStdout('* Building the ' + jarfile + '\n----------------------------\n')
	jarfile = flowfile[0:len(flowfile) - len('flow')] + 'jar'
	os.chdir('javagen')
	javaclass = os.path.join('com','area9innovation', 'flow', '*.class')
	javalib = os.path.join('com', 'area9innovation', 'flow')
	code = os.system('jar cfe ' + jarfile + ' com.area9innovation.flow.Main ' + javaclass + ' -C ' + javadir + ' ' + javalib)
	os.chdir('..')
	if code != 0:
		toStdout('Building jar file failed: ' + str(code) + '\n')
		sys.exit(1)

def buildJava(args):
	toStdout("Building java target with 'flowc1'\n==================================\n")
	flowdir  = args['flowdir']
	if not os.path.isfile(os.path.join(flowdir, 'platforms', 'java', 'com', 'area9innovation', 'flow', 'FlowRuntime.class')):
		buildRuntime(args)
	generateJavaCode(args)
	compileGeneratedCode(args)
	buildJarFile(args)
	toStdout('==================================\nDone.\n')

'''
c++ building part.
'''

def generateCppCode(args):
	flowfile = args['file']
	flowdir  = args['flowdir']
	cppfile  = flowfile[:len(flowfile) - len('.flow')] + '.cpp'
	compiler = os.path.join(flowdir, 'bin', args.get('compiler', 'flowc1'))
	toStdout('* Generating c++ code for ' + flowfile + '\n-------------------------------------\n')
	compiler_args = [compiler, 'cpp2=' + cppfile]
	for name in args:
		if 'opt_' in name:
			opt_name = name[4:]
			compiler_args.append(opt_name + '=' + args[name])
	compiler_args.append(flowfile) 
	code = os.system(' '.join(compiler_args))
	if code != 0:
		toStdout('c++ code generation failed: ' + str(code) + '\n')
		sys.exit(1)

def compileCppCode(args):
	flowdir  = args['flowdir']
	flowfile = args['file']
	cppfile  = flowfile[:len(flowfile) - len('.flow')] + '.cpp'
	exefile  = flowfile[:len(flowfile) - len('.flow')] + '.exe'
	toStdout('* Compiling the generated code\n----------------------------\n')
	byterunnercore = os.path.join(flowdir, 'platforms', 'common', 'cpp', 'core')
	code = os.system("g++ -std=c++1z -I" + flowdir + " -I" + byterunnercore + " -o " + exefile + " -O3 -fno-exceptions " + cppfile + " -lstdc++fs")
	if code != 0:
		toStdout('Generated c++ code compilation failed: ' + str(code) + '\n')
		sys.exit(1)

def buildCpp(args):
	toStdout("Building c++ target with 'flowc1'\n==================================\n")
	flowdir  = args['flowdir']
	generateCppCode(args)
	compileCppCode(args)
	toStdout('==================================\nDone.\n')

def main():
	args = parseArgs()
	flowdir = find_flowdir()
	if flowdir == None:
		toStdout('Flow directory not found: flowc must be found by PATH environment variable\n')
		sys.exit(1)
	args['flowdir'] = flowdir
	if not 'file' in args:
		toStdout(usage)
		sys.exit(1)
	args['file'] = os.path.abspath(args['file'])
	confdir = findConfigDir(os.path.dirname(args['file']))
	if confdir != None:
		os.chdir(confdir)
	buildType = args.get('type', 'java')
	if buildType == 'java':
		buildJava(args)
	elif buildType == 'c++':
		buildCpp(args)
	else:
		toStdout('Unsupported target type: ' + buildType + '\n')

if __name__ == '__main__':
	main()

