// import material/material;
import demos/demosutils;

export {
	demoMakeMatchThree(mgr : MaterialManager, onClose : () -> void) -> Material;
}

rndGem() -> int { round(random() * 8.0) + 1 };

Match3State(board : [[DynamicBehaviour<int>]], score : DynamicBehaviour<int>, cols : int, rows : int);

makeM3State(rows, cols) -> Match3State {
	Match3State(
		map(enumFromTo(0, rows - 1), \i -> map(enumFromTo(0, cols - 1), \j -> { make(rndGem()) })),
		make(0), // negative value will means that game ended
		cols, rows // field size
	);
}

// gather items with the same type along the specified column (or row if vertical == false)
getMatch(m3State, vertical, col, row, acc, i, ie) -> [iPoint] {
	type = getValue(m3State.board[row][col]);
	if (i > ie || type <= 0 || 
		(!vertical && type != getValue(m3State.board[row][i])) || 
		(vertical && type != getValue(m3State.board[i][col]))) acc
	else getMatch(m3State, vertical, col, row, arrayPush(acc, if (vertical) iPoint(i, col) else iPoint(row, i)), i + 1, ie)
}

matchLookForMatches(m3State) -> [[iPoint]] {
 	skip = ref 0; // we'll use this to avoid duplicates - since getMatch return a sequence of same type item
	ret = fold(enumFromTo(0, m3State.rows - 1), [], \acc1, row -> fold(enumFromTo(0, m3State.cols - 3), acc1, \acc, col -> { 
		skip := ^skip - 1;
		m = getMatch(m3State, false, col, row, [], col, m3State.cols - 1);
		if (^skip > 0) acc
		else if (length(m) > 2) { skip := length(m); arrayPush(acc, m); }
		else acc;
	}));

 	skip := 0;
	fold(enumFromTo(0, m3State.cols - 1), ret, \acc1, col -> fold(enumFromTo(0, m3State.rows - 3), acc1, \acc, row -> { 
		skip := ^skip - 1;
		m = getMatch(m3State, true, col, row, [], row, m3State.rows - 1);
		if (^skip > 0) acc
		else if (length(m) > 2) { skip := length(m); arrayPush(acc, m); }
		else acc;
	}));
}

matchLookForPossibles(m3State) -> [iPoint] {
	matchPattern = \col, row, mustHave, needOne -> {
		matchType = \c, r, type -> if ((c < 0) || (c >= m3State.cols) || (r < 0) || (r >= m3State.rows)) false else (getValue(m3State.board[r][c]) == type);

		if (exists(mustHave, \h -> { if (!matchType(col + h[0], row + h[1], getValue(m3State.board[row][col]))) true else false;	})) false
		else exists(needOne, \h -> { if (matchType(col + h[0], row + h[1], getValue(m3State.board[row][col]))) true else false; });
	};

	either(findmap(enumFromTo(0, m3State.rows * m3State.cols - 1), \i -> {
		row = i / m3State.cols;
		col = i % m3State.cols;
		if (matchPattern(col, row, [[1,0]], [[-2,0],[-1,-1],[-1,1]])) Some([iPoint(row, col-1)])
		else if (matchPattern(col, row, [[1,0]], [[2,-1],[2,1],[3,0]])) Some([iPoint(row, col+2)])
		else if (matchPattern(col, row, [[2,0]], [[1,-1],[1,1]])) Some([iPoint(row, col+1)])
		else if (matchPattern(col, row, [[0,1]], [[-1,2],[1,2],[0,3]])) Some([iPoint(row+2, col)])
		else if (matchPattern(col, row, [[0,1]], [[0,-2],[-1,-1],[1,-1]])) Some([iPoint(row-1, col)])
		else if (matchPattern(col, row, [[0,2]], [[-1,1],[1,1]])) Some([iPoint(row+1, col)])
		else None();  
	}), []);
}

matchSetup(m3State) -> void {
	next(m3State.score, 0);
	iter(m3State.board, \mm -> iter(mm, \m -> { next(m, rndGem()) }));

	if (length(matchLookForMatches(m3State)) > 0 || length(matchLookForPossibles(m3State)) == 0) matchSetup(m3State);
}

matchSwap(m3State, row1, col1, row2, col2) -> void {
	swap = \->{
		v = getValue(m3State.board[row1][col1]);
		nextDistinct(m3State.board[row1][col1], getValue(m3State.board[row2][col2]));
		nextDistinct(m3State.board[row2][col2], v);
	};

	swap();
	if (length(matchLookForMatches(m3State)) == 0) swap()
	else findAndRemoveMatchesDelay(m3State);
}

findAndRemoveMatchesDelay(m3State) -> void { findAndRemoveMatches(m3State); };

findAndRemoveMatches(m3State) -> void {    
	matches = matchLookForMatches(m3State);
	iter(matches, \mm -> {
		nextDistinct(m3State.score, getValue(m3State.score) + (length(mm) - 1) * 50);
		iter(mm, \m -> { // cleanup items
			nextDistinct(m3State.board[m.x][m.y], 0);
		});
	});

	timer(500, \->{
		iter(matches, \mm -> {
			iter(mm, \m -> { // shift items above
				if (m.x > 0) iter(enumFromTo(1, m.x), \r -> if (getValue(m3State.board[m.x - r][m.y]) > 0) {      
					nextDistinct(m3State.board[m.x - r+1][m.y], getValue(m3State.board[m.x - r][m.y]));      
					nextDistinct(m3State.board[m.x - r][m.y], 0);      
				});
			});
		});

		iter(m3State.board, \mm -> iter(mm, \m -> { // add missing items
			if (getValue(m) <= 0) nextDistinct(m, rndGem());
		}));

		if (length(matches) == 0) {
			if (length(matchLookForPossibles(m3State)) == 0) {
				next(m3State.score, iabs(getValue(m3State.score)) * -1); // end game
			}
		} else {
			findAndRemoveMatchesDelay(m3State);
		}
	});
}

matchShowSettings(mgr : MaterialManager, onStart : (int, int) -> void, onCancel : () -> void) -> void {
	close = make(false);
	row = make(0);
	col = make(2);
	items = enumFromTo(5, 8);
	ShowMDialog(mgr, close,
		[
			MDialogTitle("Match-3 settings"),
			MDialogUseFrame(),
			MDialogNoAnimation(),
			MDialogActions([
				MTextButton("START", \ -> { next(close, true); onStart(items[getValue(row)], items[getValue(col)]); }, [MRed(500)], [MShortcut("enter")]),
				MTextButton("CANCEL", \ -> { next(close, true); onCancel(); }, [MRed(500)], [MShortcut("esc")]),
			]),
		],
		MLines2(
			MText("Field size", []),
			MCols2(
				MLines2(MText("rows", []), MDropDown(row, "", map(items, i2s), [])),
				MLines2(MText("cols", []), MDropDown(col, "", map(items, i2s), [])),
			)
		)
	);
}

demoMakeMatchThree(mgr : MaterialManager, onClose : () -> void) -> Material {
	mainView = make(MEmpty());

	matchShowSettings(mgr, \rows, cols -> {
		m3State = makeM3State(rows, cols);

		matchSetup(m3State);

		firstPiece : DynamicBehaviour<Maybe<iPoint>> = make(None());
		secondPiece : DynamicBehaviour<Maybe<iPoint>> = make(None());

		onHelp = \ -> {
			p = matchLookForPossibles(m3State);
			if (length(p) > 0) { next(firstPiece, Some(p[0])); }
		};

		colors = [MGrey(500), MBlue(500), MGreen(500), MYellow(500), MOrange(500), MRed(500), MBrown(500), MCyan(500), MTeal(500), MPink(500)];

		cellView = \row, col, cellB -> {
			onDown = make(false);
			onInside = make(false);
			selected = fselect(firstPiece, FLift(\fP -> eitherMap(fP, \f->f.x == row && f.y == col, false)));

			MSelect(cellB, \c -> {
				name = if (c > 0) "filter_" + i2s(c) else "";
				clr = colors[c];

				view = \dr -> { 
					v = MSelect(selected, \s -> {
						MFrame(1., 1., [MStroke(MGrey(500))], 
							MCenterIn(
								MIcon(name, concatA([[clr, MIconSize(60.0)], if (s) [MCircleBackground(MLightGreen(200), 70.0)] else []])), 
								TFixed(70., 70.)
							)
						)
					});

					if (dr) v
					else MInteractive([TMouseDownGhost(onDown), TMouseInside(onInside, false)], v);
				};

				MConstruct([
					makeSubscribe(onDown, \d -> {
						if (d) {
							nextDistinct(firstPiece, Some(iPoint(row, col))); 
						} else {
							maybeApply(getValue(firstPiece), \f -> {
								maybeApply(getValue(secondPiece), \sec -> {
									if ((iabs(f.x - sec.x) == 1 && f.y == sec.y) || (iabs(f.y - sec.y) == 1 && f.x == sec.x)) {
										next(firstPiece, None()); 
										next(secondPiece, None()); 
										matchSwap(m3State, sec.x, sec.y, f.x, f.y);
									}
								});
							});
						}	
					}), 
					makeSubscribe(onInside, \d -> if (d) next(secondPiece, Some(iPoint(row, col))))
				], MDraggable(row * col, view(false), [MDragShape(view(true))]))
			});
		};

		win = MSelect(m3State.score, \s -> {
			if (s < 0)
				MZoom(MText("Game over", [MDisplay1Medium(), MGreen(500)]), TFixed(72.0 * i2d(m3State.cols), 72.0 * i2d(m3State.rows)), true)
			else MEmpty();
		});

		next(mainView, 
		MCenter(
			MLines([
				MCols([MText("Match 3", []), TFixed(100.0, 1.0), MText("SCORE: ", []), MSelect(m3State.score, \s -> MText(i2s(iabs(s)), [MGreen(500)]))]), 
				MGroup2(
					MGrid(mapi(m3State.board, \row, r -> mapi(r, \col, c -> cellView(row, col, c)))), 
					win
				),
				MCols([MTextButton("RESET", \->matchSetup(m3State), [], []), MTextButton("CLOSE", onClose, [], []), MTextButton("HELP", onHelp, [], [MShortcut("h")])])
			])
		));
	}, onClose);

	MMutable(mainView);
}
