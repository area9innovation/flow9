import material/material;
import material/material_ui;
import material/material_dialog;
import string;
import array;

export {
	demoMakeCalculator(mgr : MaterialManager, onClose : () -> void) -> Material;
}

demoMakeCalculator(mgr : MaterialManager, onClose : () -> void) -> Material {

	prev = make("");
	op = make(" ");
	cur = make("0");
	opWasLast = make(false);

	head = MColsYCenter([MText("Calculator", [MHeadline()]), MFillX(), MIconButton("close", onClose, [FillOpacity(0.5), MWhite(), MCircleBackground(MRed(500), 30.0)], [])]);
	display = MFrame(10.0, 4.0, [Fill(0xb3cfbe), FillOpacity(1.0)], MLines([
		MColsYCenter([MFillX(), MSelect(prev, \s -> MText(s, [MCaption()])), MFixedX(10.0), MSelect(op, \s -> MText(s, [MCaption()]))]),
		MColsYCenter([MFillX(), MSelect(cur, \s -> MText(s, [MDisplay2()]))]),
	]));

	ic = \s, h -> MFrame(10.0, 0.0, [], MFrame(10.0, 5.0, if (h == 1) [Fill(0x555555), FillOpacity(0.7)] else [Fill(0x888888), FillOpacity(0.1)], MCenterIn(MText(s, [MTitle(), if (h == 1) MWhite() else MBlack()]), MFixed(40.0, 40.0))));
	mb = \s, fn -> MRawButton(ic(s, 0), ic(s, 1), ic(s, 1), ic(s, 0), s, [], [MOnClick(\-> fn(s))]);

	set = \p, o, c -> {
		next(prev, p);
		next(op, o);
		next(cur, c);
	}

	rst = \__ -> {
		set("", " ", "0");
		next(opWasLast, false);
	}

	addDot = \__ -> {
		next(opWasLast, false);
		v = getValue(cur);
		if (v == "0") next(cur, "0.")
		else if (strIndexOf(v, ".") < 0) next(cur, v + ".");
	}

	addDigit = \s -> {
		owl = getValue(opWasLast);
		v = getValue(cur);
		if (v == "0" || owl) next(cur, s)
		else if (strlen(v) < 18) next(cur, v + s);
		next(opWasLast, false);
	}

	calc = \ -> {
		o = getValue(op);
		c = getValue(cur);
		p = getValue(prev);
		if (p == "" || o == " ") {
			set(c, o, c);
		}
		else {
			if (p != "ERROR" && c != "ERROR" ) {
				cv = s2d(c);
				pv = s2d(p);
				if (o == "+") next(cur, d2s(cv + pv))
				else if (o == "-") next(cur, d2s(pv - cv))
				else if (o == "×") next(cur, d2s(cv * pv))
				else if (o == "÷") next(cur, if (cv == 0.0) "ERROR" else d2s(pv / cv));
			}
		}
		next(opWasLast, true);
	}

	calc0 = \s -> {
		calc();
		next(op," ");
		next(prev, getValue(cur));
	}

	setOp1 = \s -> {
		t = getValue(cur);
		if (t != "ERROR") {
			v = s2d(t);
			if (s == "±") {
				next(cur, d2s(-v));
			}
			else if (s == "√") {
				if (v < 0.0) next(cur, "ERROR")
				else {
					next(cur, d2s(sqrt(v)));
					calc0(" ");
				}
			}
			else if (s == "%") {
				p = getValue(prev);
				if (p == "ERROR") next(cur, "ERROR")
				else {
					v2 = s2d(p);
					next(cur, d2s(v * v2 * 0.01));
					calc0(" ");
				}
			}
		}
	}

	setOp2 = \s -> {
		opv = getValue(op);
		if (getValue(opWasLast)) next(op, s)
		else {
			if (opv != " ") calc();
			c = getValue(cur);
			set(c, s, c);
			next(opWasLast, true);
		}
	}

	makeOpButton = \s -> mb(s, if (s == "÷" || s == "×" || s == "-" || s == "+") setOp2 else setOp1);

	makeButton = \s -> if (isDigit(s)) mb(s, addDigit)
		else if (s == ".") mb(s, addDot)
		else if (s == "C") mb(s, rst)
		else if (s == "=") mb(s, calc0)
		else makeOpButton(s);

	buttonRow = \row -> map(row, makeButton ) |> MCols;

	buttons = map([
		["C", "±", "%", "√"],
		["7", "8", "9", "÷"],
		["4", "5", "6", "×"],
		["1", "2", "3", "-"],
		["0", ".", "=", "+"],
	], buttonRow) |> MLines;

	body = MFrame(20.0, 0.0, [], MAvailable(MFrame(10.0, 4.0, [Fill(0x000000), FillOpacity(0.1)], MLines([head, MScale(const(Factor(1.6, 2.4)), display), MZoom(buttons, MFillXH(700.0), true)])), MFixed(800.0, 500.0)));
	MZoom(body, TFillXY(), true);
}
