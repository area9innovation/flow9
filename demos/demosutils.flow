import material/material;
import material/material_dialog;

export {
	iPoint(x : int, y : int);

	demoPromptString(mgr : MaterialManager, str : DynamicBehaviour<string>, title : string, defLabel : string) -> void;
	demoShowError(appB : DynamicBehaviour<Material>, error : string) -> void;
	demoShowWarning(mgr : MaterialManager, warning : string) -> void;
}

demoPromptString(mgr : MaterialManager, str : DynamicBehaviour<string>, title : string, defLabel : string) {	
	focus = make(false);
	sel = make(-1);

	close = make(false);
	ShowMDialog(mgr, close,
		[
			MDialogTitle(title),
			MDialogUseFrame(),
			MDialogNoAnimation(),
			MDialogDraggable(TFixed(0., 0.), TFillXY()),
			MDialogActions([
				MTextButton("OK", \ -> next(close, true), [MRed(500)], [MShortcut("enter")]),
			]),
		],
		MTextInput(str, [MWidth(200.0), MLabel(defLabel), MaxChars(32)], [TTextInputFocus(focus), TTextInputPosition(make(0)), TTextInputSelection(sel)])
	);

	nextDistinct(focus, true);
	nextDistinct(sel, strlen(getValue(str)));
}


demoErrorBlock(error : string) -> Material {
	MCenter(MText(error, [MTitle()]))
}

demoErrorBlock2(error : string, description : string) -> Material {
	if (description == "") demoErrorBlock(error)
	else MCenter(MLines2(
		MText(error, [MTitle()]),
		MText(description, [MBody()]),
	));
}

// Standard error message that will be covering entire window
demoShowError(appB : DynamicBehaviour<Material>, error : string) -> void {
	next(appB, TEmpty());
	println("Error: " + error);
	next(appB, demoErrorBlock2("Something went wrong. Contact the developers.", error));
}

demoShowWarning(mgr : MaterialManager, warning : string) -> void {
	close = make(false);

	ShowMDialog(mgr, close,
		[
			MDialogUseFrame(),
			MDialogActions([MTextButton("OK", \->{next(close, true);}, [], [])])
		],
		MCols([
			MCenterIn(MText(warning, []), TFixed(250.0, 100.0)),
		])
	);
}
