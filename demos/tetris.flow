import material/material;
import material/material2tropic;

Board(
	rows : [[int]]
);

Game(
	board : Board,
	piece : int,
	rotation : int,
	x : int,
	y : int,
	speed : int,
	score : int,
	nextPiece : int,
	linesRemoved : int,
);


pieces = [
	map(["022\n220", "020\n022\n002"], parsePiece),
	map(["330\n033", "030\n330\n300"], parsePiece),
	map(["4444", "04\n04\n04\n04"], parsePiece),
	map(["55\n55"], parsePiece),
	map(["666\n006", "06\n06\n66", "600\n666", "66\n60\n60"], parsePiece),
	map(["007\n777", "70\n70\n77", "777\n700", "77\n07\n07"], parsePiece),
	map(["888\n080", "80\n88\n80", "080\n888", "08\n88\n08"], parsePiece),
];


drawGame(g : Game) -> Material {
	MCols([
		MGroup([
			MFrame(0.0, 0.0, [Fill(0x00)],
				drawBoard(g.board),
			),
			MOffset(i2d(g.x) * 24.0, i2d(g.y) * 24.0, drawBoard(pieces[g.piece][g.rotation]))
		]),
		TFixed(24.0, 0.0),
		MLines([
			MText(i2s(g.score), []),
			drawBoard(pieces[g.nextPiece][0])
		])
	])
}

drawBoard(b : Board) -> Material {
	MLines(map(b.rows, \row -> {
		MCols(map(row, \cell -> {
			if (cell == 0) {
				TFixed(24.0, 24.0)
			} else {
				colors = [0x000000, 0x787878, 0xffc000, 0xf6921e, 0xfff100, 0x00adee, 0xec1b24, 0x8bc53f, 0xff00ff];
				TRectangle([Fill(colors[cell]), Stroke(white)], TFixed(24.0, 24.0))
			}
		}))
	}));
}

	board = Board([
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
	]);

emptyLine = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];

fullLine =  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

parsePiece(t : string) -> Board {
	rows = strSplit(t, "\n");
	Board(map(rows, \row : string -> {
		map(s2a(row), \code -> code - 48)
	}));
}

game = make(Game(
		board,
		floor(random() * 7.0),
		0,
		5, 0,
		200,
		0,
		floor(random() * 7.0),
		0
	));

dropPiece() -> void {
	g = getValue(game);
	ng = Game(g with y = g.y + 1); 
	next(game, ng);

	collision = ref false;
	newBoard = addPieceToBoard(g.board, pieces[g.piece][g.rotation], ng.x, ng.y, collision);

	ig = if (^collision) {
		collision := false;
		prevBoard = addPieceToBoard(g.board, pieces[g.piece][g.rotation], g.x, g.y, collision);
		if (^collision) {
			println("GAME OVER");
			Game(ng with speed = intMax);
		} else {
			fixed = Game(ng with 
				board = prevBoard,
				x = 5,
				y = 0,
				piece = ng.nextPiece,
				nextPiece = floor(random() * 7.0),
				rotation = 0,
			);

			removeFullLines(fixed);
		}
	} else {
		ng;
	};
	next(game, ig);

	timer(getValue(game).speed, dropPiece);
}

addPieceToBoard(b : Board, piece : Board, x : int, y : int, collision : ref bool) -> Board {
	width = length(piece.rows[0]);
	height = length(piece.rows);
	Board(
		mapi(b.rows, \yc, row -> {
			mapi(row, \xc, cell -> {
				px = xc - x;
				py = yc - y;
				if (0 <= px && px < width) {
					if (0 <= py && py < height) {
						color = piece.rows[py][px];
						if (color == 0) {
							cell
						} else {
							if (cell != 0) {
								collision := true;
							};
							color;
						}
					} else cell
				} else cell
			})
		})
	);
}


main() {
	timer(getValue(game).speed, dropPiece);

	g = getValue(game);
	collision = ref false;
	newBoard = addPieceToBoard(g.board, pieces[g.piece][g.rotation], 0, g.y, collision);

	key = makeTKey(\key -> {
		contains(["left", "right", "down", "up", " "], key.utf);
	});

	mrender(makeMaterialManager([]), true, 
		MInteractive([
				key
			],
			MConstruct([
					makeSubscribe(key.pressed, \k -> {
						if (k.utf == "left") {
							movePiece(-1, 0);
						} else if (k.utf == "right") {
							movePiece(1, 0);
						} else if (k.utf == "down") {
							movePiece(0, 1);
						} else if (k.utf == "up") {
							rotatePiece();
						} else if (k.utf == " ") {
							dropPieceDown();
						} else {

						}
					})
				],
				MSelect(game, drawGame)
			)
		)
	)
}

movePiece(dx : int, dy : int) -> void {
	g = getValue(game);
	ng = Game(g with x = g.x + dx, y = g.y + dy); 
	collision = ref false;
	newBoard = addPieceToBoard(g.board, pieces[g.piece][g.rotation], ng.x, ng.y, collision);
	if (!^collision) {
		next(game, ng)
	}
}

dropPieceDown() -> void {
	g = getValue(game);
	ng = Game(g with x = g.x + 0, y = g.y + 1); 
	collision = ref false;
	newBoard = addPieceToBoard(g.board, pieces[g.piece][g.rotation], ng.x, ng.y, collision);
	if (!^collision) {
		next(game, ng);
		dropPieceDown();
	} 
}

rotatePiece() {
	g = getValue(game);
	ng = Game(g with rotation = (g.rotation + 1) % length(pieces[g.piece]) ); 
	collision = ref false;
	addPieceToBoard(g.board, pieces[g.piece][ng.rotation], ng.x, ng.y, collision);
	if (!^collision) {
		next(game, ng)
	}
}

removeFullLines(g : Game) -> Game {
	fullLines = filter(g.board.rows, \row -> {
		!forall(row, \cell -> cell != 0)
	});
	lastLine = arrayPush(fullLines, fullLine);
	removed = 21 - length(lastLine);

	score = elementAt([0, 40, 100, 300, 1200], removed, 0);

	newLines = concat(
		generate(0, removed, \__ -> emptyLine),
		lastLine
	);

	linesRemoved = g.linesRemoved + removed;

	speed = max(20, 200 - 10 * (linesRemoved / 10));

	Game(g with board = Board(newLines), score = g.score + score, linesRemoved = linesRemoved, speed = speed);
}
