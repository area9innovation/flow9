import material/material;
import material/material_dialog;
import runtime;

export {
	demoMakeTicTacToe( onClose : () -> void ) -> Material;
}

tttWinCode(board : [?], player : ?) -> int {
	if ((board[0] == player && board[1] == player && board[2] == player) ||
	(board[3] == player && board[4] == player && board[5] == player) ||
	(board[6] == player && board[7] == player && board[8] == player) ||
	(board[0] == player && board[3] == player && board[6] == player) ||
	(board[1] == player && board[4] == player && board[7] == player) ||
	(board[2] == player && board[5] == player && board[8] == player) ||

	(board[0] == player && board[4] == player && board[8] == player) ||
	(board[2] == player && board[4] == player && board[6] == player))
		1
	else -1;
}

tttPlayer = -1;
tttAI = -2;

// row3(b, [6, 7, 8]) == Cross if there are 3 Crosses in the indexes 6,7,8 in board b;
// same with Ring; if neither wins, return Blank
row3(board : [Cell], is : [int]) -> Cell {
	fold(tail(is), board[is[0]], \c, i -> if (board[i] == c) c else Blank())
}

// winner(b): Cross=user wins, Ring=machine wins, Blank=no winner yet
winner(board : [Cell]) -> Cell {
	findDef(map([
		// horisontal possibilities for 3 in a row
		[0, 1, 2], [3, 4, 5], [6, 7, 8],
		// vertical possibilities for 3 in a row
		[0, 3, 6], [1, 4, 7], [2, 5, 8],
		// diagonals \ and /
		[0, 4, 8], [2, 4, 6]], 
		\is -> row3(board, is)), \c -> c != Blank(), Blank());
}

TicTacToeResult(index : int, score : int, step : int);

tttMinMax(board : [int], player : int, step : int) -> TicTacToeResult {
	//was: availIndices = filter(board, \i -> {i != tttPlayer && i != tttAI});
	availIndices = foldi(board, [], \i, is, x -> if (x != tttPlayer && x != tttAI) arrayPush(is, i) else is);
	w : Cell = winner(map(board, \I -> if (I == tttPlayer) Cross() else if (I == tttAI) Ring() else Blank()));
	println(w);
	if (tttWinCode(board, tttPlayer) > 0) {
		TicTacToeResult(-1, -1, step);
	} else if (tttWinCode(board, tttAI) > 0) {
		TicTacToeResult(-1, 1, step);
	} else if (length(availIndices) == 0) {
		TicTacToeResult(-1, 0, step);
	} else {
		// check all available cells
		moves = map(availIndices, \i -> {
			// make turn for current "player"
			newBoard = replace(board, i, player);
			
			// create an "move" object for each and store the index of that spot and its score 
			r = tttMinMax(newBoard, if (player == tttPlayer) tttAI else tttPlayer, step + 1);
			move = TicTacToeResult(
				i, 
				// get score for opponent's (for current player) turn
				r.score, 
				r.step
			);
            move;
		});
		
		// select best move
		fold(moves, TicTacToeResult(-1, if (player == tttPlayer) 10 else -10, 0), \best : TicTacToeResult, move : TicTacToeResult -> {
			if ((player == tttAI && move.score > best.score) || (player == tttPlayer && move.score < best.score)) {
				move
			} else best
		});
	}
}

// Each cell in the 3x3 tictactoe grid can be either blank, or have an X or an O
Cell ::= Blank, Cross, Ring;
	Blank(); Cross(); Ring();

// There are 2 players: Man, 'Cross', against Machine, 'Ring'.
// Nicer with a bool 'myturn' - would give briefer, more readable code, 
// but this is a chance to show subtyping can handle the difference.
Player ::= Cross, Ring;

icon(s)  MCenterIn(MIcon(s, [MIconSize(80.0)]), TFixed(100., 100.));

demoMakeTicTacToe(onClose : () -> void) -> Material {
	board = [
		[make(0), make(1), make(2)],
		[make(3), make(4), make(5)],
		[make(6), make(7), make(8)]
	];

	lastBest = make(None());
    subscribe(lastBest, println);

	clear = \-> {
		iteri(board, \i, cc -> iteri(cc, \j, c -> nextDistinct(c, i*3 + j)));		
		next(lastBest, None());
	};

	setCell = \c, v -> nextDistinct(board[c / 3][c % 3], v);

	cell = \ccc -> {
		MSelect(ccc, \c -> {
			name = if (c == tttPlayer) "close"
			else if (c == tttAI) "radio_button_unchecked"
			else "";

			MFrame(1., 1., [MStroke(MGrey(500))], 
				if (name == "") {
					MClickable(TFixed(100., 100.), \ -> {
						if (isNone(getValue(lastBest))) {
							setCell(c, tttPlayer);
							best = tttMinMax(map(concatA(board), getValue), tttAI, 0);
							if (best.index >= 0) {
								// make a delay between player and AI turn 
								timer(600, \-> {
									setCell(best.index, tttAI);
									if (best.step <= 1) nextDistinct(lastBest, Some(best));
								});
							} else nextDistinct(lastBest, Some(best));
						}
					})
				} else {
					MCenterIn(MIcon(name, [MIconSize(80.0)]), TFixed(100., 100.))
				}
			)
		})
	};

	win = MSelect(lastBest, \best -> {
		eitherFn(best, \b -> {
			MZoom(MText(if (b.score > 0) "ALL YOUR BASE ARE BELONG TO US" else if (b.score == 0) "Draw" else "Ok, you win", [MDisplay1Medium(), MGreen(500)]), TFixed(306.0, 306.0), true);
		}, \->MEmpty());
	});

	// we represent the 3x3 cells as 3 rows of 3 cells of Cell behaviours
	model = generate(0, 3, \row -> generate(0, 3, \col -> make(Blank())));

    // whose turn is it, alternate between Ring and Cross
    turn = make(Cross());

	snapshot /*: () -> [[Cell]] */ = \ -> map(model, \r -> map(r, \c -> c));

    view = map(model, \row -> map(row, 
            \cb : DynamicBehaviour<Cell> -> 
                MSelect(cb, \c : Cell -> 
                    MFrame(1., 1., [MStroke(MGrey(500))], 
                        switch (c : Cell) {
                            Ring():  icon("radio_button_unchecked");
                            Cross(): icon("close");
                            Blank(): MSelect(turn, \p ->
                                        // The user can only click blank fields when it is his turn
                                        switch (p : Player) {
                                            Cross():  MClickable(TFixed(100., 100.), \ -> {
                                                            // What happens when a user clicks an empty cell: 
                                                            // the cell model behaviour, cb, gets updated to Cross()
                                                            nextDistinct(cb, Cross());
                                                            nextDistinct(turn, Ring());
                                                        })
                                            Ring(): TFixed(100., 100.);
                                        });
                        }
                     )
            )
    ));

    // Machine
    subscribe(turn, \p -> switch (p : Player) {
        Cross(): {}; // not my turn
        Ring():  timer(600, \ -> nextDistinct(turn, Cross())); // your turn now
    });

    turnview = MSelect(turn, \p -> switch (p : Player) {
        Cross(): MText("Your turn", []);
        Ring(): MText("My turn", []);
    })

	MCenter(
		MLines([
			MText("Tic tac toe", []), 
			MGroup2(
				MGrid(map(board, \row -> map(row, cell))), 
                //MGrid(view),
				win
			),
            turnview,
			MCols([MTextButton("RESET", clear, [], []), MTextButton("CLOSE", onClose, [], [])])
		])
	);
}

main() {
    onClose = \ -> {};
    mm = makeMaterialManager([]);
    mrender(mm, true, demoMakeTicTacToe(onClose));
}

