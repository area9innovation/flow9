import material/material;

export {
	demoMakeTicTacToe( onClose : () -> void ) -> Material;
}

tttWinCode(board, player) {
	if ((board[0] == player && board[1] == player && board[2] == player) ||
	(board[3] == player && board[4] == player && board[5] == player) ||
	(board[6] == player && board[7] == player && board[8] == player) ||
	(board[0] == player && board[3] == player && board[6] == player) ||
	(board[1] == player && board[4] == player && board[7] == player) ||
	(board[2] == player && board[5] == player && board[8] == player) ||
	(board[0] == player && board[4] == player && board[8] == player) ||
	(board[2] == player && board[4] == player && board[6] == player))
		1
	else -1;
}

tttPlayer = -1;
tttAI = -2;

TicTacToeResult(index : int, score : int, step : int);

tttMinMax(board : [int], player : int, step : int) -> TicTacToeResult {
	availIndices = filter(board, \i -> {i != tttPlayer && i != tttAI});

	if (tttWinCode(board, tttPlayer) > 0) {
		TicTacToeResult(-1, -1, step);
	} else if (tttWinCode(board, tttAI) > 0) {
		TicTacToeResult(-1, 1, step);
	} else if (length(availIndices) == 0) {
		TicTacToeResult(-1, 0, step);
	} else {
		// check all available cells
		moves = fold(availIndices, [], \moves, i -> {
			// make turn for current "player"
			newBoard = replace(board, i, player);
			
			// create an "move" object for each and store the index of that spot and its score 
			r = tttMinMax(newBoard, if (player == tttPlayer) tttAI else tttPlayer, step + 1);
			move = TicTacToeResult(
				i, 
				// get score for opponent's (for current player) turn
				r.score, 
				r.step
			);

			// store in moves array
			arrayPush(moves, move);
		});
		
		// select best move
		fold(moves, TicTacToeResult(-1, if (player == tttPlayer) 10 else -10, 0), \best : TicTacToeResult, move : TicTacToeResult -> {
			if ((player == tttAI && move.score > best.score) || (player == tttPlayer && move.score < best.score)) {
				move
			} else best
		});
	}
}

demoMakeTicTacToe(onClose : () -> void) -> Material {
	board = [
		[make(0), make(1), make(2)],
		[make(3), make(4), make(5)],
		[make(6), make(7), make(8)]
	];

	lastBest = make(None());

	clear = \-> {
		iteri(board, \i, cc -> iteri(cc, \j, c -> nextDistinct(c, i*3 + j)));		
		next(lastBest, None());
	};

	setCell = \c, v -> nextDistinct(board[c / 3][c % 3], v);

	cell = \ccc -> {
		MSelect(ccc, \c -> {
			name = if (c == tttPlayer) "close"
			else if (c == tttAI) "radio_button_unchecked"
			else "";

			MFrame(1., 1., [MStroke(MGrey(500))], 
				if (name == "") {
					MClickable(TFixed(100., 100.), \ -> {
						if (isNone(getValue(lastBest))) {
							setCell(c, tttPlayer);
							best = tttMinMax(map(concatA(board), getValue), tttAI, 0);
							if (best.index >= 0) {
								// make a delay between player and AI turn 
								timer(300, \-> {
									setCell(best.index, tttAI);
									if (best.step <= 1) nextDistinct(lastBest, Some(best));
								});
							} else nextDistinct(lastBest, Some(best));
						}
					})
				} else {
					MCenterIn(MIcon(name, [MIconSize(80.0)]), TFixed(100., 100.))
				}
			)
		})
	};

	win = MSelect(lastBest, \best -> {
		eitherFn(best, \b -> {
			MZoom(MText(if (b.score > 0) "Loose" else if (b.score == 0) "Draw" else "Win", [MDisplay1Medium(), MGreen(500)]), TFixed(306.0, 306.0), true);
		}, \->MEmpty());
	});

	MCenter(
		MLines([
			MText("Tic tac toe", []), 
			MGroup2(
				MGrid(map(board, \r->map(r, cell))), 
				win
			),
			MCols([MTextButton("RESET", clear, [], []), MTextButton("CLOSE", onClose, [], [])])
		])
	);
}
