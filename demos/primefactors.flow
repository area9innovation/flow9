import math/math;
import ds/arrayutils;

factorise(acc : [int], n : int) -> [int] {
	primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,
		101,	103,	107,	109,
		113,	127,	131,	137,	139,	149,	151,	157,	163,	167,
		173,	179,	181,	191,	193,	197,	199,	211,	223,	227,
		229,	233,	239,	241,	251,	257,	263,	269,	271,	277,
		281,	283,	293,	307,	311,	313,	317,	331,	337,	347,
		349,	353,	359,	367,	373,	379,	383,	389,	397,	401,
		409,	419,	421,	431,	433,	439,	443,	449,	457,	461,
		463,	467,	479,	487,	491,	499,	503,	509,	521,	523,
		541,	547,	557,	563,	569,	571,	577,	587,	593,	599,
		601,	607,	613,	617,	619,	631,	641,	643,	647,	653,
		659,	661,	673,	677,	683,	691,	701,	709,	719,	727,
		733,	739,	743,	751,	757,	761,	769,	773,	787,	797,
		809,	811,	821,	823,	827,	829,	839,	853,	857,	859,
		863,	877,	881,	883,	887,	907,	911,	919,	929,	937,
		941,	947,	953,	967,	971,	977,	983,	991,	997,	
	];
	if (n <= 1) acc
	else if (n <= 3 || contains(primes, n)) arrayPush(acc, n)
	else {
		p = fold2(primes, n, acc, \n2, acc2, prime -> {
			if (n2 % prime == 0) {
				Pair(n2 / prime, arrayPush(acc2, prime))
			} else Pair(n2, acc2)
		});
		factorise(p.second, p.first)
	}
}

countFactors(f : [int]) -> Tree<int, int> {
	fold(f, makeTree(), \acc, factor -> {
		incTreeValue(acc, factor)
	})
}

nodeName(factor : int, count : int) -> string {
	if (false) {
		"n" + i2s(factor) + "_" + i2s(count)
	} else {
		number = pow(factor, count);
		"n"	+ i2s(number)
	}
}

main() {
	maxNumber = 60;

	factorCounts : Tree<int, int> = fold(enumFromTo(1, maxNumber), makeTree(), \acc, n -> {
		factors = removeFirst(factorise([], n), n);
		factor = countFactors(factors);
		foldTree(factor, acc, \f, c, acc2 -> {
			count = lookupTreeDef(acc2, f, c);
			setTree(acc2, f, max(c, count))
		})
	});

	graph = "digraph L {
		concentrate=true;
	layout=fdp;
	bgcolor=\"#eeeeee\";
	splines=polyline;
	"

	+ foldTree(factorCounts, "", \n, maxCount, acc -> {
		acc 
		+ concatStrings(generate(1, maxCount, \count -> {
			number = pow(n, count);
			(if (count > 1 && number < maxNumber && number * number < maxNumber) {
				"" 
				// nodeName(n, count) + " -> " + nodeName(n, count - 1) + ";\n";
			} else "")
		}))
	})
	+ concatStrings(
		generate(1, maxNumber, \n -> {
			factors = removeFirst(factorise([], n), n);

			counted = countFactors(factors);
			label = foldTree(counted, "", \factor, count, acc -> {
				acc + (if (acc == "") "" else " · ")
				+ i2s(factor)
				+ ["", "", "²", "³", "⁴", "⁵", "⁶", "⁷"][count]
			});
			shape = if (factors == []) { "shape=ellipse" } else "shape=box";
			node = nodeName(n, 1) + " [" + shape + " fontname=\"verdana\" label=< <FONT POINT-SIZE=\"20\"><B>" + i2s(n) + "</B></FONT><BR/>" + label + ">];\n";

			if (false) {
				foldTree(counted, node, \factor, count, acc -> {
					number = pow(factor, count);
					if (number != n) {
						acc + nodeName(factor, count) + " -> " + nodeName(n, 1) + ";\n"
					} else if (count > 1) {
						acc + nodeName(factor, count - 1) + " -> " + nodeName(n, 1) + ";\n"
					} else {
						acc;
					}
				});
			} else {
				fs = if (false) {
					// Thisd does two factors, one small, one big
					fff = sort(factors);
					half = (length(fff) + 1) / 2;
					firstHalf = subrange(fff, 0, half);
					secondHalf = subrange(fff, half, length(fff));

					[multiply(firstHalf), multiply(secondHalf)];
				} else if (true) {
					// This tries to do two equally big factors
					fff = sort(factors);
					evenf = filtermapi(factors, \i, f -> if (i % 2 == 0) Some(f) else None());
					oddf = filtermapi(factors, \i, f -> if (i % 2 == 0) None() else Some(f));
					[multiply(evenf), multiply(oddf)];
				} else {
					// This one splits into the fewest edges in some sense
					// Find the primes factors
					bases = getTreeKeys(counted);

					// Power them up
					pp = fold(bases, [], \acc, b -> {
						expo = lookupTreeDef(counted, b, 1);
						raised = pow(b, expo);
						if (raised == n) {
							// OK, keep it as is
							pfs = splitHalf(generate(0, expo, \__ -> b));
							concat(acc, pfs);
						} else {
							arrayPush(acc, raised);
						}
					});
					half = (length(pp) + 1) / 2;
					firstHalf = subrange(pp, 0, half);
					secondHalf = subrange(pp, half, length(pp));
					[multiply(firstHalf), multiply(secondHalf)];
				};
				fold(fs, node, \acc, f -> {
					acc 
					+ (if (f != 1) {
						nodeName(f, 1) + " -> " + nodeName(n, 1) + ";\n"
					} else "")
				});
			}
		})
	)
	+ "}\n";
	setFileContent("graph.dot", graph);
	quit(0);
}

multiply(factors : [int]) -> int {
	fold(factors, 1, \acc, f -> acc * f);
}

splitHalf(pp : [int]) -> [int] {
	half = (length(pp) + 1) / 2;
	firstHalf = subrange(pp, 0, half);
	secondHalf = subrange(pp, half, length(pp));
					
	[multiply(firstHalf), multiply(secondHalf)];
}
