import formats/json/json;
import ds/tree;
import string;
import runtime;
import math/math;

// We'll create a standalone demo

export {
	// Demo functions
	demonstrateUnifiedServer() -> void;
	testMcpProtocol() -> void;
	testA2aProtocol() -> void;
	testJsonSerialization() -> void;
}

demonstrateUnifiedServer() -> void {
	println("ðŸŒŸ Unified MCP + A2A Server Protocol Demonstration");
	println("================================================");
	println("");
	
	testJsonSerialization();
	println("");
	testA2aProtocol();
	println("");
	testMcpProtocol();
	println("");
	
	println("âœ… All protocol demonstrations completed successfully!");
}

testJsonSerialization() -> void {
	println("ðŸ“‹ JSON Serialization Testing");
	println("-----------------------------");
	
	// Test A2A Agent Card serialization
	agentCard = JsonObject([
		Pair("name", JsonString("Flow9 A2A Agent")),
		Pair("description", JsonString("A sample A2A agent providing calculator, time, and greeting services")),
		Pair("url", JsonString("https://localhost:8080")),
		Pair("version", JsonString("1.0.0")),
		Pair("capabilities", JsonObject([
			Pair("streaming", JsonBool(true)),
			Pair("pushNotifications", JsonBool(false)),
			Pair("stateTransitionHistory", JsonBool(false))
		])),
		Pair("defaultInputModes", JsonArray([JsonString("text/plain"), JsonString("application/json")])),
		Pair("defaultOutputModes", JsonArray([JsonString("text/plain"), JsonString("application/json")])),
		Pair("skills", JsonArray([
			JsonObject([
				Pair("id", JsonString("calculator")),
				Pair("name", JsonString("Calculator")),
				Pair("description", JsonString("Perform basic arithmetic operations")),
				Pair("tags", JsonArray([JsonString("math"), JsonString("calculator")]))
			]),
			JsonObject([
				Pair("id", JsonString("time")),
				Pair("name", JsonString("Time Service")),
				Pair("description", JsonString("Get current time information")),
				Pair("tags", JsonArray([JsonString("time"), JsonString("utility")]))
			])
		]))
	]);
	
	println("ðŸ¤– A2A Agent Card JSON:");
	println(json2string(agentCard));
	println("");
	
	// Test MCP capabilities serialization
	mcpCapabilities = JsonObject([
		Pair("tools", JsonObject([
			Pair("listChanged", JsonBool(false))
		])),
		Pair("resources", JsonObject([
			Pair("subscribe", JsonBool(false)),
			Pair("listChanged", JsonBool(false))
		])),
		Pair("prompts", JsonObject([
			Pair("listChanged", JsonBool(false))
		])),
		Pair("logging", JsonObject([]))
	]);
	
	println("ðŸ”§ MCP Capabilities JSON:");
	println(json2string(mcpCapabilities));
	println("");
}

testA2aProtocol() -> void {
	println("ðŸ¤– A2A Protocol Testing");
	println("-----------------------");
	
	// Test Agent Card Discovery
	println("1. Agent Card Discovery:");
	println("   GET /.well-known/agent.json");
	println("   Agent: Flow9 A2A Agent");
	println("   Skills: 3 (calculator, time, greeting)");
	println("   Capabilities: streaming=true, pushNotifications=false");
	println("");
	
	// Test Task Creation Request
	println("2. Task Creation Request:");
	taskCreateRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("tasks/create")),
		Pair("params", JsonObject([
			Pair("skillId", JsonString("calculator")),
			Pair("message", JsonObject([
				Pair("role", JsonString("user")),
				Pair("parts", JsonArray([
					JsonObject([
						Pair("kind", JsonString("text")),
						Pair("text", JsonString("10 + 5"))
					])
				])),
				Pair("messageId", JsonString("msg1")),
				Pair("kind", JsonString("message"))
			]))
		])),
		Pair("id", JsonDouble(1.0))
	]);
	
	println("   Request JSON:");
	println("   " + json2string(taskCreateRequest));
	println("");
	
	// Simulate Task Creation Response
	taskId = "task_" + d2s(timestamp()) + "_001";
	taskResponse = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("result", JsonObject([
			Pair("id", JsonString(taskId)),
			Pair("contextId", JsonString("ctx_001")),
			Pair("status", JsonObject([
				Pair("state", JsonString("completed")),
				Pair("timestamp", JsonString(d2s(timestamp()) + "Z"))
			])),
			Pair("artifacts", JsonArray([
				JsonObject([
					Pair("id", JsonString("calc_result")),
					Pair("name", JsonString("Calculation Result")),
					Pair("parts", JsonArray([
						JsonObject([
							Pair("kind", JsonString("text")),
							Pair("text", JsonString("15"))
						])
					]))
				])
			])),
			Pair("history", JsonArray([]))
		])),
		Pair("id", JsonDouble(1.0))
	]);
	
	println("   Response JSON:");
	println("   " + json2string(taskResponse));
	println("   Task ID: " + taskId);
	println("   State: completed");
	println("   Result: 15");
	println("");
	
	// Test Task Query
	println("3. Task Query Request:");
	taskQueryRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("tasks/query")),
		Pair("params", JsonObject([
			Pair("taskId", JsonString(taskId))
		])),
		Pair("id", JsonDouble(2.0))
	]);
	
	println("   Request: tasks/query for " + taskId);
	println("   Response: Task state=completed, 1 artifact");
	println("");
	
	// Test Message Send
	println("4. Message Send Request:");
	messageSendRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("message/send")),
		Pair("params", JsonObject([
			Pair("taskId", JsonString(taskId)),
			Pair("message", JsonObject([
				Pair("role", JsonString("user")),
				Pair("parts", JsonArray([
					JsonObject([
						Pair("kind", JsonString("text")),
						Pair("text", JsonString("7 * 8"))
					])
				])),
				Pair("messageId", JsonString("msg2")),
				Pair("kind", JsonString("message"))
			]))
		])),
		Pair("id", JsonDouble(3.0))
	]);
	
	println("   New calculation: 7 * 8");
	println("   Response: Task updated, result=56");
	println("");
}

testMcpProtocol() -> void {
	println("ðŸ”§ MCP Protocol Testing");
	println("-----------------------");
	
	// Test MCP Initialize
	println("1. MCP Initialize Request:");
	initRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("initialize")),
		Pair("params", JsonObject([
			Pair("protocolVersion", JsonString("2024-11-05")),
			Pair("capabilities", JsonObject([])),
			Pair("clientInfo", JsonObject([
				Pair("name", JsonString("demo-client")),
				Pair("version", JsonString("1.0"))
			]))
		])),
		Pair("id", JsonDouble(1.0))
	]);
	
	initResponse = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("result", JsonObject([
			Pair("protocolVersion", JsonString("2024-11-05")),
			Pair("capabilities", JsonObject([
				Pair("tools", JsonObject([Pair("listChanged", JsonBool(false))])),
				Pair("resources", JsonObject([Pair("subscribe", JsonBool(false)), Pair("listChanged", JsonBool(false))])),
				Pair("prompts", JsonObject([Pair("listChanged", JsonBool(false))])),
				Pair("logging", JsonObject([]))
			])),
			Pair("serverInfo", JsonObject([
				Pair("name", JsonString("Flow9 MCP Server")),
				Pair("version", JsonString("1.0.0"))
			]))
		])),
		Pair("id", JsonDouble(1.0))
	]);
	
	println("   Server: Flow9 MCP Server v1.0.0");
	println("   Protocol: 2024-11-05");
	println("   Capabilities: tools, resources, prompts, logging");
	println("");
	
	// Test Tools List
	println("2. Tools List Request:");
	toolsRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("tools/list")),
		Pair("params", JsonObject([])),
		Pair("id", JsonDouble(2.0))
	]);
	
	toolsResponse = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("result", JsonObject([
			Pair("tools", JsonArray([
				JsonObject([
					Pair("name", JsonString("calculator")),
					Pair("description", JsonString("Perform basic arithmetic operations")),
					Pair("inputSchema", JsonObject([
						Pair("type", JsonString("object")),
						Pair("properties", JsonObject([
							Pair("operation", JsonObject([
								Pair("type", JsonString("string")),
								Pair("enum", JsonArray([JsonString("add"), JsonString("subtract"), JsonString("multiply"), JsonString("divide")]))
							])),
							Pair("a", JsonObject([Pair("type", JsonString("number"))])),
							Pair("b", JsonObject([Pair("type", JsonString("number"))]))
						])),
						Pair("required", JsonArray([JsonString("operation"), JsonString("a"), JsonString("b")]))
					]))
				])
			]))
		])),
		Pair("id", JsonDouble(2.0))
	]);
	
	println("   Available tools: 1");
	println("     â€¢ calculator: Perform basic arithmetic operations");
	println("       Schema: {operation: add|subtract|multiply|divide, a: number, b: number}");
	println("");
	
	// Test Tool Call
	println("3. Tool Call Request:");
	toolCallRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("tools/call")),
		Pair("params", JsonObject([
			Pair("name", JsonString("calculator")),
			Pair("arguments", JsonObject([
				Pair("operation", JsonString("multiply")),
				Pair("a", JsonDouble(12.0)),
				Pair("b", JsonDouble(8.0))
			]))
		])),
		Pair("id", JsonDouble(3.0))
	]);
	
	toolCallResponse = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("result", JsonObject([
			Pair("content", JsonArray([
				JsonObject([
					Pair("type", JsonString("text")),
					Pair("text", JsonString("Result: 96.0"))
				])
			])),
			Pair("isError", JsonBool(false))
		])),
		Pair("id", JsonDouble(3.0))
	]);
	
	println("   Calculator: 12 * 8 = 96.0");
	println("   Status: Success");
	println("");
	
	// Test Resources List
	println("4. Resources List Request:");
	resourcesRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("resources/list")),
		Pair("params", JsonObject([])),
		Pair("id", JsonDouble(4.0))
	]);
	
	println("   Available resources: 1");
	println("     â€¢ Current Time (time://current): Get the current server time");
	println("");
	
	// Test Resource Read
	println("5. Resource Read Request:");
	resourceReadRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("resources/read")),
		Pair("params", JsonObject([
			Pair("uri", JsonString("time://current"))
		])),
		Pair("id", JsonDouble(5.0))
	]);
	
	currentTime = "Current time: " + d2s(timestamp());
	println("   " + currentTime);
	println("");
	
	// Test Prompts List
	println("6. Prompts List Request:");
	promptsRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("prompts/list")),
		Pair("params", JsonObject([])),
		Pair("id", JsonDouble(6.0))
	]);
	
	println("   Available prompts: 1");
	println("     â€¢ greeting: Generate a personalized greeting");
	println("       Arguments: name (required)");
	println("");
	
	// Test Prompt Get
	println("7. Prompt Get Request:");
	promptGetRequest = JsonObject([
		Pair("jsonrpc", JsonString("2.0")),
		Pair("method", JsonString("prompts/get")),
		Pair("params", JsonObject([
			Pair("name", JsonString("greeting")),
			Pair("arguments", JsonObject([
				Pair("name", JsonString("Alice"))
			]))
		])),
		Pair("id", JsonDouble(7.0))
	]);
	
	println("   Greeting for Alice:");
	println("   Description: A friendly greeting prompt");
	println("   Messages:");
	println("     [system]: You are a friendly assistant. Greet the user warmly.");
	println("     [user]: Hello Alice! How are you today?");
}

main() {
	demonstrateUnifiedServer();
}