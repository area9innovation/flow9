import server/http;
import formats/json/json;
import ds/tree;
import string;
import ds/tuples;
import runtime;
import formats/base64;
import math/math;

export {
	// MCP Server
	createMcpServer(port : int, config : McpServerConfig) -> () -> void;
	
	// MCP Server Configuration
	McpServerConfig(
		name : string,
		version : string,
		tools : [McpTool],
		resources : [McpResource],
		prompts : [McpPrompt],
		capabilities : McpServerCapabilities,
		authentication : McpAuthConfig
	);
	
	// Authentication Configuration
	McpAuthConfig(
		enabled : bool,
		methods : [McpAuthMethod],
		requireAuth : bool  // If true, all requests require authentication
	);
	
	// Authentication Methods
	McpAuthMethod ::= McpBasicAuth, McpBearerAuth, McpApiKeyAuth, McpCustomAuth;
		McpBasicAuth(credentials : Tree<string, string>); // username -> password
		McpBearerAuth(tokens : [string]); // valid bearer tokens
		McpApiKeyAuth(keys : [string], headerName : string); // valid API keys and header name
		McpCustomAuth(validator : (HttpRequest) -> McpAuthResult); // custom validation function
	
	// Authentication Result
	McpAuthResult ::= McpAuthSuccess, McpAuthFailure;
		McpAuthSuccess(userId : string);
		McpAuthFailure(reason : string);
	
	// Authentication utilities
	createBasicAuth(credentials : Tree<string, string>) -> McpAuthMethod;
	createBearerAuth(tokens : [string]) -> McpAuthMethod;
	createApiKeyAuth(keys : [string], headerName : string) -> McpAuthMethod;
	createCustomAuth(validator : (HttpRequest) -> McpAuthResult) -> McpAuthMethod;
	
	// Helper to create auth config
	createAuthConfig(enabled : bool, methods : [McpAuthMethod], requireAuth : bool) -> McpAuthConfig;
	noAuth() -> McpAuthConfig;
	
	// MCP Core Structures
	McpServerCapabilities(
		logging : Maybe<McpLoggingCapability>,
		tools : Maybe<McpToolsCapability>,
		resources : Maybe<McpResourcesCapability>,
		prompts : Maybe<McpPromptsCapability>
	);
	
	McpLoggingCapability();
	McpToolsCapability(listChanged : bool);
	McpResourcesCapability(subscribe : bool, listChanged : bool);
	McpPromptsCapability(listChanged : bool);
	
	// Tools
	McpTool(
		name : string,
		description : string,
		inputSchema : Json,
		handler : (Json) -> McpToolResult
	);
	
	McpToolResult(
		content : [McpContent],
		isError : bool
	);
	
	// Resources
	McpResource(
		uri : string,
		name : string,
		description : string,
		mimeType : string,
		handler : () -> McpResourceResult
	);
	
	McpResourceResult(
		contents : [McpResourceContent]
	);
	
	McpResourceContent(
		uri : string,
		mimeType : string,
		text : Maybe<string>,
		blob : Maybe<string>
	);
	
	// Prompts
	McpPrompt(
		name : string,
		description : string,
		arguments : [McpPromptArgument],
		handler : (Json) -> McpPromptResult
	);
	
	McpPromptArgument(
		name : string,
		description : string,
		required : bool
	);
	
	McpPromptResult(
		description : string,
		messages : [McpPromptMessage]
	);
	
	McpPromptMessage(
		role : McpMessageRole,
		content : McpContent
	);
	
	McpMessageRole ::= McpRoleUser, McpRoleAssistant, McpRoleSystem;
		McpRoleUser();
		McpRoleAssistant();
		McpRoleSystem();
	
	// Content types
	McpContent ::= McpTextContent, McpImageContent, McpResourceContent;
		McpTextContent(text : string);
		McpImageContent(data : string, mimeType : string);
	
	// Logging
	McpLogLevel ::= McpLogDebug, McpLogInfo, McpLogNotice, McpLogWarning, McpLogError, McpLogCritical, McpLogAlert, McpLogEmergency;
		McpLogDebug();
		McpLogInfo();
		McpLogNotice();
		McpLogWarning();
		McpLogError();
		McpLogCritical();
		McpLogAlert();
		McpLogEmergency();
	
	// Helper functions
	createMcpTool(name : string, description : string, inputSchema : Json, handler : (Json) -> McpToolResult) -> McpTool;
	createMcpResource(uri : string, name : string, description : string, mimeType : string, handler : () -> McpResourceResult) -> McpResource;
	createMcpPrompt(name : string, description : string, arguments : [McpPromptArgument], handler : (Json) -> McpPromptResult) -> McpPrompt;
	
	// Default server configuration
	createDefaultMcpConfig() -> McpServerConfig;
}

createMcpServer(port : int, config : McpServerConfig) -> () -> void {
	// Create MCP method handlers
	handlers = createMcpHandlers(config);
	
	onOpen = \ -> {
		println("MCP Server '" + config.name + "' v" + config.version + " started on port " + i2s(port));
	};
	
	onOpenError = \error -> {
		println("Failed to start MCP server: " + error);
	};
	
	onMessage = \request : HttpRequest, sendResponse : (HttpResponse) -> void -> {
		response = processMcpRequest(request, handlers, config);
		sendResponse(response);
	};
	
	createHttpServer(port, onOpen, onOpenError, onMessage);
}

createMcpHandlers(config : McpServerConfig) -> Tree<string, (Json) -> Json> {
	baseHandlers = fold([
		// Core MCP methods
		Pair("initialize", \params -> handleInitialize(config, params)),
		Pair("notifications/initialized", \params -> handleInitialized(params)),
		Pair("ping", \params -> handlePing(params)),
		
		// Tools
		Pair("tools/list", \params -> handleToolsList(config.tools)),
		Pair("tools/call", \params -> handleToolsCall(config.tools, params)),
		
		// Resources
		Pair("resources/list", \params -> handleResourcesList(config.resources)),
		Pair("resources/read", \params -> handleResourcesRead(config.resources, params)),
		
		// Prompts
		Pair("prompts/list", \params -> handlePromptsList(config.prompts)),
		Pair("prompts/get", \params -> handlePromptsGet(config.prompts, params)),
		
		// Logging
		Pair("logging/setLevel", \params -> handleLoggingSetLevel(params))
	], makeTree(), \acc, pair -> setTree(acc, pair.first, pair.second));
	
	baseHandlers;
}

processMcpRequest(request : HttpRequest, handlers : Tree<string, (Json) -> Json>, config : McpServerConfig) -> HttpResponse {
	// Check request method
	methodType = switch (request.method) {
		Some(method): switch (method) {
			Post(): "POST";
			Options(): "OPTIONS";
			default: "OTHER";
		};
		None(): "NONE";
	};

	defHeaders = [
		KeyValue("Access-Control-Allow-Origin","*"),
		KeyValue("Access-Control-Allow-Methods","POST, OPTIONS"),
		KeyValue("Access-Control-Allow-Headers","Content-Type, Authorization"),
		KeyValue("Access-Control-Max-Age","86400") // Cache preflight for 24 hours
	];

	if (methodType == "OPTIONS") {
		// Handle CORS preflight request
		HttpResponse(200, "", defHeaders);
	} else if (methodType == "POST") {
		// Check authentication if enabled
		authResult = authenticateRequest(request, config.authentication);
		
		switch (authResult) {
			McpAuthFailure(reason): {
				HttpResponse(401, 
					json2string(JsonObject([
						Pair("error", JsonString("Authentication failed: " + reason))
					])), 
					concat(defHeaders, [
						KeyValue("Content-Type", "application/json"),
						KeyValue("WWW-Authenticate", "Basic realm=\"MCP Server\"")
					])
				);
			}
			McpAuthSuccess(userId): {
				// Authentication successful, proceed with request processing
				// Parse JSON from request body
				jsonResult = parseJson(request.body);
				
				// Check if it's a valid JSON-RPC request
				maybeRequest = parseMcpRequest(jsonResult);
				
				switch (maybeRequest) {
					None(): {
						errorResponse = createMcpErrorResponse(-32600, "Invalid JSON-RPC request", None());
						HttpResponse(400, json2string(errorResponse), concat(defHeaders, [KeyValue("Content-Type", "application/json")]));
					}
					Some(mcpRequest): {
						// Handle the method call with user context
						responseJson = handleMcpMethodCallWithAuth(mcpRequest, handlers, userId);
						
						// Check if this is a notification (no response expected)
						isNotification = switch (mcpRequest.id) {
							None(): true;
							Some(idValue): switch (idValue) {
								JsonNull(): true;
								default: false;
							};
						};
						
						if (isNotification) {
							// For notifications, return empty response
							HttpResponse(200, "", concat(defHeaders, []));
						} else {
							HttpResponse(200, json2string(responseJson), concat(defHeaders, [KeyValue("Content-Type", "application/json")]));
						}
					}
				}
			}
		}
	} else {
		// Unsupported HTTP method
		errorResponse = createMcpErrorResponse(-32600, "Only POST and OPTIONS methods are allowed", None());
		HttpResponse(405, json2string(errorResponse), concat(defHeaders, [KeyValue("Content-Type", "application/json")]));
	}
}

parseMcpRequest(json : Json) -> Maybe<McpJsonRpcRequest> {
	switch (json) {
		JsonObject(members): {
			jsonrpcVersion = getJsonStringField(json, "jsonrpc", "");
			method = getJsonStringField(json, "method", "");
			
			if (jsonrpcVersion != "2.0" || method == "") {
				None();
			} else {
				params = getJsonFieldValueM(json, "params");
				id = getJsonFieldValueM(json, "id");
				
				Some(McpJsonRpcRequest(jsonrpcVersion, method, params, id));
			}
		}
		default: None();
	}
}

McpJsonRpcRequest(
	jsonrpc : string,
	method : string,
	params : Maybe<Json>,
	id : Maybe<Json>
);

handleMcpMethodCall(request : McpJsonRpcRequest, handlers : Tree<string, (Json) -> Json>) -> Json {
	handleMcpMethodCallWithAuth(request, handlers, "anonymous");
}

handleMcpMethodCallWithAuth(request : McpJsonRpcRequest, handlers : Tree<string, (Json) -> Json>, userId : string) -> Json {
	methodName = request.method;
	
	switch (lookupTree(handlers, methodName)) {
		None(): {
			createMcpErrorResponse(-32601, "Method not found: " + methodName, request.id);
		}
		Some(handler): {
			params = either(request.params, JsonNull());
			// Add user context to params for handlers that need it
			paramsWithAuth = switch (params) {
				JsonObject(fields): JsonObject(arrayPush(fields, Pair("_userId", JsonString(userId))));
				default: JsonObject([
					Pair("originalParams", params),
					Pair("_userId", JsonString(userId))
				]);
			};
			result = handler(paramsWithAuth);
			createMcpSuccessResponse(result, request.id);
		}
	}
}

// Authentication Functions

authenticateRequest(request : HttpRequest, authConfig : McpAuthConfig) -> McpAuthResult {
	if (!authConfig.enabled) {
		McpAuthSuccess("anonymous");
	} else if (authConfig.requireAuth) {
		// Try each authentication method
		fold(authConfig.methods, McpAuthFailure("No valid authentication found"), \acc, method -> {
			switch (acc) {
				McpAuthSuccess(__): acc; // Already authenticated
				McpAuthFailure(__): {
					tryAuthMethod(request, method);
				}
			}
		});
	} else {
		// Optional auth - try to authenticate but don't fail if no auth provided
		result = fold(authConfig.methods, McpAuthFailure("No authentication provided"), \acc, method -> {
			switch (acc) {
				McpAuthSuccess(__): acc; // Already authenticated
				McpAuthFailure(__): {
					tryAuthMethod(request, method);
				}
			}
		});
		
		switch (result) {
			McpAuthSuccess(__): result;
			McpAuthFailure(__): McpAuthSuccess("anonymous"); // Allow anonymous access
		}
	}
}

tryAuthMethod(request : HttpRequest, method : McpAuthMethod) -> McpAuthResult {
	switch (method) {
		McpBasicAuth(credentials): validateBasicAuth(request, credentials);
		McpBearerAuth(tokens): validateBearerAuth(request, tokens);
		McpApiKeyAuth(keys, headerName): validateApiKeyAuth(request, keys, headerName);
		McpCustomAuth(validator): validator(request);
	}
}

validateBasicAuth(request : HttpRequest, credentials : Tree<string, string>) -> McpAuthResult {
	authHeader = getHeaderValue(request.headers, "Authorization");
	
	switch (authHeader) {
		None(): McpAuthFailure("No Authorization header");
		Some(headerValue): {
			if (strIndexOf(headerValue, "Basic ") == 0) {
				encodedCreds = strRight(headerValue, 6); // Remove "Basic "
				decodedCreds = decodeBase64(encodedCreds);
				
				colonIndex = strIndexOf(decodedCreds, ":");
				if (colonIndex > 0) {
					username = strLeft(decodedCreds, colonIndex);
					password = strRight(decodedCreds, colonIndex + 1);
					
					switch (lookupTree(credentials, username)) {
						None(): McpAuthFailure("Invalid username");
						Some(expectedPassword): {
							if (password == expectedPassword) {
								McpAuthSuccess(username);
							} else {
								McpAuthFailure("Invalid password");
							}
						}
					}
				} else {
					McpAuthFailure("Invalid Basic Auth format");
				}
			} else {
				McpAuthFailure("Not Basic Auth");
			}
		}
	}
}

validateBearerAuth(request : HttpRequest, tokens : [string]) -> McpAuthResult {
	authHeader = getHeaderValue(request.headers, "Authorization");
	
	switch (authHeader) {
		None(): McpAuthFailure("No Authorization header");
		Some(headerValue): {
			if (strIndexOf(headerValue, "Bearer ") == 0) {
				token = strRight(headerValue, 7); // Remove "Bearer "
				
				if (contains(tokens, token)) {
					McpAuthSuccess("bearer_user_" + token);
				} else {
					McpAuthFailure("Invalid bearer token");
				}
			} else {
				McpAuthFailure("Not Bearer Auth");
			}
		}
	}
}

validateApiKeyAuth(request : HttpRequest, keys : [string], headerName : string) -> McpAuthResult {
	keyHeader = getHeaderValue(request.headers, headerName);
	
	switch (keyHeader) {
		None(): McpAuthFailure("No " + headerName + " header");
		Some(apiKey): {
			if (contains(keys, apiKey)) {
				McpAuthSuccess("api_user_" + apiKey);
			} else {
				McpAuthFailure("Invalid API key");
			}
		}
	}
}

getHeaderValue(headers : [KeyValue], name : string) -> Maybe<string> {
	nameLower = toLowerCase(name);
	maybeHeader = find(headers, \header -> toLowerCase(header.key) == nameLower);
	maybeMap(maybeHeader, \header -> header.value);
}



// Authentication helper constructors
createBasicAuth(credentials : Tree<string, string>) -> McpAuthMethod {
	McpBasicAuth(credentials);
}

createBearerAuth(tokens : [string]) -> McpAuthMethod {
	McpBearerAuth(tokens);
}

createApiKeyAuth(keys : [string], headerName : string) -> McpAuthMethod {
	McpApiKeyAuth(keys, headerName);
}

createCustomAuth(validator : (HttpRequest) -> McpAuthResult) -> McpAuthMethod {
	McpCustomAuth(validator);
}

createAuthConfig(enabled : bool, methods : [McpAuthMethod], requireAuth : bool) -> McpAuthConfig {
	McpAuthConfig(enabled, methods, requireAuth);
}

noAuth() -> McpAuthConfig {
	McpAuthConfig(false, [], false);
}

// MCP Method Handlers

handleInitialize(config : McpServerConfig, params : Json) -> Json {
	protocolVersion = getJsonStringField(params, "protocolVersion", "2024-11-05");
	capabilities = getJsonObjectField(params, "capabilities");
	clientInfo = getJsonObjectField(params, "clientInfo");
	
	// Build server info response
	serverInfo = JsonObject([
		Pair("name", JsonString(config.name)),
		Pair("version", JsonString(config.version))
	]);
	
	// Build capabilities response
	capabilitiesJson = mcpCapabilitiesToJson(config.capabilities);
	
	JsonObject([
		Pair("protocolVersion", JsonString("2024-11-05")),
		Pair("capabilities", capabilitiesJson),
		Pair("serverInfo", serverInfo)
	]);
}

handleInitialized(params : Json) -> Json {
	// Notification that initialization is complete
	JsonNull();
}

handlePing(params : Json) -> Json {
	JsonObject([]);
}

handleToolsList(tools : [McpTool]) -> Json {
	toolsJson = map(tools, mcpToolToJson);
	JsonObject([
		Pair("tools", JsonArray(toolsJson))
	]);
}

handleToolsCall(tools : [McpTool], params : Json) -> Json {
	toolName = getJsonStringField(params, "name", "");
	arguments = getJsonFieldValue(params, "arguments", JsonNull());
	
	maybeTool = find(tools, \tool -> tool.name == toolName);
	switch (maybeTool) {
		None(): {
			JsonObject([
				Pair("content", JsonArray([
					JsonObject([
						Pair("type", JsonString("text")),
						Pair("text", JsonString("Tool not found: " + toolName))
					])
				])),
				Pair("isError", JsonBool(true))
			]);
		}
		Some(tool): {
			result = tool.handler(arguments);
			mcpToolResultToJson(result);
		}
	}
}

handleResourcesList(resources : [McpResource]) -> Json {
	resourcesJson = map(resources, mcpResourceToJson);
	JsonObject([
		Pair("resources", JsonArray(resourcesJson))
	]);
}

handleResourcesRead(resources : [McpResource], params : Json) -> Json {
	uri = getJsonStringField(params, "uri", "");
	
	maybeResource = find(resources, \resource -> resource.uri == uri);
	switch (maybeResource) {
		None(): {
			JsonObject([
				Pair("contents", JsonArray([]))
			]);
		}
		Some(resource): {
			result = resource.handler();
			mcpResourceResultToJson(result);
		}
	}
}

handlePromptsList(prompts : [McpPrompt]) -> Json {
	promptsJson = map(prompts, mcpPromptToJson);
	JsonObject([
		Pair("prompts", JsonArray(promptsJson))
	]);
}

handlePromptsGet(prompts : [McpPrompt], params : Json) -> Json {
	promptName = getJsonStringField(params, "name", "");
	arguments = getJsonFieldValue(params, "arguments", JsonObject([]));
	
	maybePrompt = find(prompts, \prompt -> prompt.name == promptName);
	switch (maybePrompt) {
		None(): {
			JsonObject([
				Pair("description", JsonString("Prompt not found")),
				Pair("messages", JsonArray([]))
			]);
		}
		Some(prompt): {
			result = prompt.handler(arguments);
			mcpPromptResultToJson(result);
		}
	}
}

handleLoggingSetLevel(params : Json) -> Json {
	level = getJsonStringField(params, "level", "info");
	println("Logging level set to: " + level);
	JsonObject([]);
}

// JSON Conversion Functions

mcpCapabilitiesToJson(capabilities : McpServerCapabilities) -> Json {
	fields = [];
	
	withLogging = switch (capabilities.logging) {
		None(): fields;
		Some(__): arrayPush(fields, Pair("logging", JsonObject([])));
	};
	
	withTools = switch (capabilities.tools) {
		None(): withLogging;
		Some(toolsCap): arrayPush(withLogging, Pair("tools", JsonObject([
			Pair("listChanged", JsonBool(toolsCap.listChanged))
		])));
	};
	
	withResources = switch (capabilities.resources) {
		None(): withTools;
		Some(resourcesCap): arrayPush(withTools, Pair("resources", JsonObject([
			Pair("subscribe", JsonBool(resourcesCap.subscribe)),
			Pair("listChanged", JsonBool(resourcesCap.listChanged))
		])));
	};
	
	withPrompts = switch (capabilities.prompts) {
		None(): withResources;
		Some(promptsCap): arrayPush(withResources, Pair("prompts", JsonObject([
			Pair("listChanged", JsonBool(promptsCap.listChanged))
		])));
	};
	
	JsonObject(withPrompts);
}

mcpToolToJson(tool : McpTool) -> Json {
	JsonObject([
		Pair("name", JsonString(tool.name)),
		Pair("description", JsonString(tool.description)),
		Pair("inputSchema", tool.inputSchema)
	]);
}

mcpToolResultToJson(result : McpToolResult) -> Json {
	contentJson = map(result.content, mcpContentToJson);
	JsonObject([
		Pair("content", JsonArray(contentJson)),
		Pair("isError", JsonBool(result.isError))
	]);
}

mcpResourceToJson(resource : McpResource) -> Json {
	JsonObject([
		Pair("uri", JsonString(resource.uri)),
		Pair("name", JsonString(resource.name)),
		Pair("description", JsonString(resource.description)),
		Pair("mimeType", JsonString(resource.mimeType))
	]);
}

mcpResourceResultToJson(result : McpResourceResult) -> Json {
	contentsJson = map(result.contents, mcpResourceContentToJson);
	JsonObject([
		Pair("contents", JsonArray(contentsJson))
	]);
}

mcpResourceContentToJson(content : McpResourceContent) -> Json {
	baseFields = [
		Pair("uri", JsonString(content.uri)),
		Pair("mimeType", JsonString(content.mimeType))
	];
	
	withText = switch (content.text) {
		None(): baseFields;
		Some(text): arrayPush(baseFields, Pair("text", JsonString(text)));
	};
	
	withBlob = switch (content.blob) {
		None(): withText;
		Some(blob): arrayPush(withText, Pair("blob", JsonString(blob)));
	};
	
	JsonObject(withBlob);
}

mcpPromptToJson(prompt : McpPrompt) -> Json {
	argumentsJson = map(prompt.arguments, \arg -> JsonObject([
		Pair("name", JsonString(arg.name)),
		Pair("description", JsonString(arg.description)),
		Pair("required", JsonBool(arg.required))
	]));
	
	JsonObject([
		Pair("name", JsonString(prompt.name)),
		Pair("description", JsonString(prompt.description)),
		Pair("arguments", JsonArray(argumentsJson))
	]);
}

mcpPromptResultToJson(result : McpPromptResult) -> Json {
	messagesJson = map(result.messages, \message -> JsonObject([
		Pair("role", JsonString(mcpRoleToString(message.role))),
		Pair("content", mcpContentToJson(message.content))
	]));
	
	JsonObject([
		Pair("description", JsonString(result.description)),
		Pair("messages", JsonArray(messagesJson))
	]);
}

mcpContentToJson(content : McpContent) -> Json {
	switch (content) {
		McpTextContent(text): JsonObject([
			Pair("type", JsonString("text")),
			Pair("text", JsonString(text))
		]);
		McpImageContent(data, mimeType): JsonObject([
			Pair("type", JsonString("image")),
			Pair("data", JsonString(data)),
			Pair("mimeType", JsonString(mimeType))
		]);
		McpResourceContent(uri, mimeType, text, blob): {
			baseFields = [
				Pair("type", JsonString("resource")),
				Pair("resource", JsonObject([
					Pair("uri", JsonString(uri)),
					Pair("mimeType", JsonString(mimeType))
				]))
			];
			
			withText = switch (text) {
				None(): baseFields;
				Some(textValue): arrayPush(baseFields, Pair("text", JsonString(textValue)));
			};
			
			JsonObject(withText);
		}
	}
}

mcpRoleToString(role : McpMessageRole) -> string {
	switch (role) {
		McpRoleUser(): "user";
		McpRoleAssistant(): "assistant";
		McpRoleSystem(): "system";
	}
}

// Helper response functions
createMcpSuccessResponse(result : Json, id : Maybe<Json>) -> Json {
	baseFields = [
		Pair("jsonrpc", JsonString("2.0")),
		Pair("result", result)
	];
	
	withId = switch (id) {
		None(): arrayPush(baseFields, Pair("id", JsonNull()));
		Some(idValue): arrayPush(baseFields, Pair("id", idValue));
	};
	
	JsonObject(withId);
}

createMcpErrorResponse(code : int, message : string, id : Maybe<Json>) -> Json {
	error = JsonObject([
		Pair("code", JsonDouble(i2d(code))),
		Pair("message", JsonString(message))
	]);
	
	baseFields = [
		Pair("jsonrpc", JsonString("2.0")),
		Pair("error", error)
	];
	
	withId = switch (id) {
		None(): arrayPush(baseFields, Pair("id", JsonNull()));
		Some(idValue): arrayPush(baseFields, Pair("id", idValue));
	};
	
	JsonObject(withId);
}

// Helper constructors
createMcpTool(name : string, description : string, inputSchema : Json, handler : (Json) -> McpToolResult) -> McpTool {
	McpTool(name, description, inputSchema, handler);
}

createMcpResource(uri : string, name : string, description : string, mimeType : string, handler : () -> McpResourceResult) -> McpResource {
	McpResource(uri, name, description, mimeType, handler);
}

createMcpPrompt(name : string, description : string, arguments : [McpPromptArgument], handler : (Json) -> McpPromptResult) -> McpPrompt {
	McpPrompt(name, description, arguments, handler);
}

createDefaultMcpConfig() -> McpServerConfig {
	// Sample calculator tool
	calculatorTool = createMcpTool(
		"calculator",
		"Perform basic arithmetic operations",
		JsonObject([
			Pair("type", JsonString("object")),
			Pair("properties", JsonObject([
				Pair("operation", JsonObject([
					Pair("type", JsonString("string")),
					Pair("enum", JsonArray([JsonString("add"), JsonString("subtract"), JsonString("multiply"), JsonString("divide")]))
				])),
				Pair("a", JsonObject([Pair("type", JsonString("number"))])),
				Pair("b", JsonObject([Pair("type", JsonString("number"))]))
			])),
			Pair("required", JsonArray([JsonString("operation"), JsonString("a"), JsonString("b")]))
		]),
		\params -> {
			operation = getJsonStringField(params, "operation", "");
			a = getJsonDoubleField(params, "a", 0.0);
			b = getJsonDoubleField(params, "b", 0.0);
			
			result = if (operation == "add") a + b
				else if (operation == "subtract") a - b
				else if (operation == "multiply") a * b
				else if (operation == "divide") {
					if (b != 0.0) a / b else 0.0;
				} else 0.0;
			
			McpToolResult([McpTextContent("Result: " + d2s(result))], false);
		}
	);
	
	// Sample resource
	timeResource = createMcpResource(
		"time://current",
		"Current Time",
		"Get the current server time",
		"text/plain",
		\ -> McpResourceResult([
			McpResourceContent("time://current", "text/plain", Some("Current time: " + d2s(timestamp())), None())
		])
	);
	
	// Sample prompt
	greetingPrompt = createMcpPrompt(
		"greeting",
		"Generate a personalized greeting",
		[McpPromptArgument("name", "The name of the person to greet", true)],
		\params -> {
			name = getJsonStringField(params, "name", "there");
			McpPromptResult(
				"A friendly greeting prompt",
				[McpPromptMessage(
					McpRoleSystem(),
					McpTextContent("You are a friendly assistant. Greet the user warmly.")
				), McpPromptMessage(
					McpRoleUser(),
					McpTextContent("Hello " + name + "! How are you today?")
				)]
			);
		}
	);
	
	capabilities = McpServerCapabilities(
		Some(McpLoggingCapability()),
		Some(McpToolsCapability(false)),
		Some(McpResourcesCapability(false, false)),
		Some(McpPromptsCapability(false))
	);
	
	// Authentication configuration
	authConfig = createAuthConfig(
		true, // Enable authentication
		[
			createBasicAuth(setTree(setTree(makeTree(), "admin", "password123"), "user", "secret456")),
			createBearerAuth(["mcp-token-abc123", "mcp-token-def456"]),
			createApiKeyAuth(["api-key-xyz789", "api-key-uvw012"], "X-API-Key")
		],
		true // Require auth (use false for optional authentication)
	);
	
	McpServerConfig(
		"Flow9 MCP Server",
		"1.0.0",
		[calculatorTool],
		[timeResource],
		[greetingPrompt],
		capabilities,
		authConfig
	);
}

// Main function
main() {
	config = createDefaultMcpConfig();
	serverPort = 3000;
	closeServer = createMcpServer(serverPort, config);
	
	println("🚀 MCP Server with Authentication is running on port " + i2s(serverPort));
	println("");
	println("📋 Available Features:");
	println("  • Tools: calculator");
	println("  • Resources: time://current");
	println("  • Prompts: greeting");
	println("");
	println("🔐 Authentication Methods:");
	println("  • Basic Auth: admin/password123 or user/secret456");
	println("  • Bearer Token: mcp-token-abc123 or mcp-token-def456");
	println("  • API Key: api-key-xyz789 or api-key-uvw012 (X-API-Key header)");
	println("  • No Auth: Anonymous access allowed");
	println("");
	println("🧪 Test Commands:");
	println("");
	println("1. No Authentication:");
	println("curl -X POST http://localhost:" + i2s(serverPort) + " \\");
	println("  -H \"Content-Type: application/json\" \\");
	println("  -d '{\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2024-11-05\",\"capabilities\":{},\"clientInfo\":{\"name\":\"test\",\"version\":\"1.0\"}},\"id\":1}'");
	println("");
	println("2. Basic Authentication:");
	println("curl -X POST http://localhost:" + i2s(serverPort) + " \\");
	println("  -H \"Content-Type: application/json\" \\");
	println("  -H \"Authorization: Basic YWRtaW46cGFzc3dvcmQxMjM=\" \\");
	println("  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"params\":{},\"id\":2}'");
	println("");
	println("3. Bearer Token:");
	println("curl -X POST http://localhost:" + i2s(serverPort) + " \\");
	println("  -H \"Content-Type: application/json\" \\");
	println("  -H \"Authorization: Bearer mcp-token-abc123\" \\");
	println("  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/call\",\"params\":{\"name\":\"calculator\",\"arguments\":{\"operation\":\"add\",\"a\":10,\"b\":5}},\"id\":3}'");
	println("");
	println("4. API Key:");
	println("curl -X POST http://localhost:" + i2s(serverPort) + " \\");
	println("  -H \"Content-Type: application/json\" \\");
	println("  -H \"X-API-Key: api-key-xyz789\" \\");
	println("  -d '{\"jsonrpc\":\"2.0\",\"method\":\"resources/read\",\"params\":{\"uri\":\"time://current\"},\"id\":4}'");
	println("");
	println("5. Invalid Authentication (should fail):");
	println("curl -X POST http://localhost:" + i2s(serverPort) + " \\");
	println("  -H \"Content-Type: application/json\" \\");
	println("  -H \"Authorization: Bearer invalid-token\" \\");
	println("  -d '{\"jsonrpc\":\"2.0\",\"method\":\"ping\",\"params\":{},\"id\":5}'");
	
	// Keep the server running
	// quit(0);
}
