import ds/array;
import string;

export {
    // Struct definition
    Foo(a : int);
    
    // Union definition
    Shape ::= Circle, Rectangle, Triangle;
        Circle(radius : double);
        Rectangle(width : double, height : double);
        Triangle(base : double, height : double);
    
    // Union with generic parameter
    Result<?> ::= Success<?>, Error;
        Success(value : ?);
        Error(message : string);

    // Functions for Foo
    addFoo(a : Foo) -> void;
    getFoo() -> Foo;
    
    // Functions for Shape union
    calculateArea(shape : Shape) -> double;
    getShapeType(shape : Shape) -> string;
    createDefaultShapes() -> [Shape];
    
    // Functions for Result union
    createSuccessResult(value : int) -> Result<int>;
    createErrorResult(message : string) -> Result<int>;
    handleResult(result : Result<int>) -> string;
}

foos : ref [Foo] = ref [];

addFoo(f : Foo) -> void {
    foos := arrayPush(^foos, f);
}  

getFoo() -> Foo {
    if (^foos == []) {
        Foo(0);
    } else {
        (^foos)[0];
    }
}

// Shape union functions
calculateArea(shape : Shape) -> double {
    switch (shape) {
        Circle(radius): 3.14159 * radius * radius;
        Rectangle(width, height): width * height;
        Triangle(base, height): 0.5 * base * height;
    }
}

getShapeType(shape : Shape) -> string {
    switch (shape) {
        Circle(__): "circle";
        Rectangle(__, __): "rectangle";
        Triangle(__, __): "triangle";
    }
}

createDefaultShapes() -> [Shape] {
    [
        Circle(5.0),
        Rectangle(10.0, 8.0),
        Triangle(6.0, 4.0)
    ];
}

// Result union functions  
createSuccessResult(value : int) -> Result<int> {
    Success(value);
}

createErrorResult(message : string) -> Result<int> {
    Error(message);
}

handleResult(result : Result<int>) -> string {
    switch (result) {
        Success(value): "Success: " + i2s(value);
        Error(message): "Error: " + message;
    }
}
