import material/extra/raymarching/raymarching;

main() {
	setRendererType("html");

	posTrigger2B = make(RMMouseDownleft());
	position2B = make(RMZ(3.));

	spheres1 = RMTranslate(
		RMUnion2(
			RMMaterial(RMTranslate(RMInteractive(RMSphere(make(1.)), posTrigger2B), make(RMY(1.))), RMColor(make(0xFFFF00)), []),
			RMTranslate(
				RMUnion2(
					RMMaterial(RMTranslate(RMSphere(make(0.5)), make(RMX(2.))), RMColor(make(0xFF00FF)), []),
					RMMaterial(RMTranslate(RMSphere(make(0.5)), make(RMX(-2.))), RMColor(make(0x00FFFF)), [])
				),
				make(RMYZ(2., 2.))
			)
		),
		position2B
	);

	spheres2 = RMUnion2(
		RMMaterial(RMSphere(make(0.5)), RMColor(make(0x00FF00)), []),
		RMUnion2(
			RMMaterial(RMTranslate(RMSphere(make(0.5)), make(RMX(2.))), RMColor(make(0x0000FF)), []),
			RMMaterial(RMTranslate(RMSphere(make(0.5)), make(RMX(-2.))), RMColor(make(0xFF0000)), [])
		),
	);

	//scene = make(RMTranslate(RMUnion2(spheres1, spheres2), RMZ(3.)));
	scene = RMUnion2(
		RMTranslate(RMUnion2(spheres1, spheres2), make(RMZ(3.))),
		RMMaterial(RMPlane(make(RMXYZ(0., 1., 0.))), RMColor(make(0xBBBBBB)), [])
	);
	texture1B = make("");
	texture2B = make("");
	textureParametersB = make(getValue(makeDefaultRMTexture().parameters));
	twistTriggerB = make(RMMouseDownleft());
	twistedTextureParameter = RMTextureParameters(
		RMTextureTilingParameter(1., 2., 1., 1., 2., 1.),
		RMTextureTilingParameter(1., 2.5, 2.6, 2.1, 2., 1.),
		RMTextureTilingParameter(1., 2., 1., 1.5, 2., 1.),
		RMTextureTilingParameter(1., 2., 3., 0.5, 2., 1.),
		RMTextureTilingParameter(0.5, 0.5, 0.5, 0.5, 0.5, 0.5),
	);
	trigger1B = make(RMMouseDownleft());
	cylinderColor1B = make(0xAF4DCE);
	trigger2B = make(RMMouseDownleft());
	cylinderColor2B = make(0xAFCD1E);
	posTriggerB = make(RMMouseDownleft());
	positionB = make(RMXYZ(0., 1., 6.));
	radiusB = make(1.);
	triggerCapperTorusB = make(RMMouseDownleft());
	percentB = make(0.5);
	smoothB = make(2.5);

	scene2 = RMUnion([
		RMIntersection2(RMInteractive(RMSmoothUnion([
			constructRMCompositeObject(RMSphere(make(0.7)), "Sphere 2", RMColor(make(0x00FFFF)), make(RMXYZ(-2., 2., 8.)), ),
			constructRMCompositeObject(RMSphere(make(0.7)), "Sphere 3", RMColor(make(0x00FF00)), make(RMXYZ(0., 0., 3.)), ),
			constructRMCompositeObject(RMSphere(make(0.7)), "Sphere 4", RMColor(make(0x0000FF)), make(RMXYZ(2., 0., 3.)), ),
			constructRMCompositeObject(RMSphere(make(0.5)), "Sphere 5", RMColor(make(0xFF0000)),  make(RMXYZ(-2., 0., 3.)), ),
			RMCompositeObject(RMSphere(radiusB), "Central sphere", RMColor(make(0xFFFF00)), [RMReflect(make(0.4))], positionB, const(RMX(0.)), const(RMXYZ(1., 1., 1.)), make(RMMouseDownleft()), const(true)),
			constructRMCompositeObject(RMTorus(make(1.), make(0.3)), "Torus", RMColor(make(0xDA8E1F)), make(RMXYZ(-4., 2., 8.))),
		], smoothB), posTriggerB),
		RMSubtraction2(
			RMCompositeObject(RMRoundBox(make(RMXYZ(1., 0.5, 1.)), make(0.5)), "Round Box", RMTexture(texture2B, textureParametersB), [], make(RMXYZ(-0.5, 1., 8.)), const(RMX(0.)), const(RMXYZ(2., 2., 2.)), twistTriggerB, const(true)),
			RMCompositeObject(RMBox(make(RMXYZ(1., 0.5, 2.))), "Box", RMTexture(makeDefaultRMTexture() with texture = texture1B), [], make(RMXYZ(0., 1., 8.)), const(RMX(0.)), const(RMXYZ(1., 1., 1.)), make(RMMouseDownleft()), const(true)),
		)),
		RMRotate(RMSubtraction([
			RMCompositeObject(RMRoundBox(make(RMXYZ(1., 0.5, 1.)), make(0.5)), "Round Box", RMTexture(texture2B, textureParametersB), [], make(RMXYZ(-0.5, 4., 0.)), const(RMX(0.)), const(RMXYZ(1., 1., 1.)), twistTriggerB, const(true)),
			RMCompositeObject(RMBox(make(RMXYZ(1., 0.5, 2.))), "Box", RMTexture(makeDefaultRMTexture() with texture = texture1B), [], make(RMXYZ(0., 3.5, 0.)), const(RMX(0.)), const(RMXYZ(1., 1., 1.)), make(RMMouseDownleft()), const(true)),
			RMCompositeObject(RMBoxFrame(make(RMXYZ(1., 0.5, 1.)), make(0.2)), "Box Frame", RMTexture(makeDefaultRMTexture() with texture = make("images/splash/splash_innovation_trans.png")), [], make(RMXYZ(0.5, 4., 0.)), const(RMX(0.)), const(RMXYZ(1., 1., 1.)), triggerCapperTorusB, const(true)),
		]), const(RMXY(PI/2., PI/4.))),
		RMSmoothUnion2(
			RMCompositeObject(RMSphere(make(0.5)), "Sphere 1", RMColor(make(0xFF00FF)), [], make(RMXYZ(2., 2., 8.)), const(RMX(0.)), const(RMXYZ(2., 2., 1.)), make(RMMouseDownleft()), const(true)),
			RMCompositeObject(RMCappedTorus(make(0.5), make(0.3), percentB), "Capped Torus", RMTexture(make("images/splash/splash_innovation_trans.png"), make(twistedTextureParameter)), [RMReflect(make(0.5))], make(RMXYZ(2., 2., 8.)), const(RMY(PI/4.)), const(RMXYZ(1., 1., 1.)), make(RMMouseDownleft()), const(true)),
			make(0.1)
		),
		RMCompositeObject(RMCylinder(make(2.), make(0.5)), "Cylinder", RMColor(cylinderColor1B), [], make(RMXYZ(-5., 3., 12.)), const(RMX(0.)), const(RMXYZ(1., 1., 1.)), trigger1B, const(true)),
		RMCompositeObject(RMRoundedCylinder(make(2.), make(0.5), make(0.5)), "Cylinder", RMColor(cylinderColor2B), [], make(RMXYZ(-5., 3., 0.)), const(RMX(0.)), const(RMXYZ(1., 1., 1.)), trigger2B, const(true)),
		RMSmoothIntersection2(
			constructRMCompositeObject(RMSphere(make(1.0)), "Sphere", RMColor(make(0x00FFFF)), make(RMXYZ(-2., 2., 16.))),
			constructRMCompositeObject(RMSphere(make(1.0)), "Sphere", RMColor(make(0xFFFF00)), make(RMXYZ(-2.5, 2., 16.))),
			make(0.5)
		),
		RMRepetitionLimited(RMSmoothSubtraction2(
			constructRMCompositeObject(RMSphere(make(1.0)), "Sphere", RMColor(make(0x00FFFF)), make(RMXYZ(-2., 2., 13.))),
			constructRMCompositeObject(RMSphere(make(1.0)), "Sphere", RMColor(make(0xFFFF00)), make(RMXYZ(-2.5, 2., 13.))),
			make(0.5)
		), const(RMXYZ(3., 3., 3.)), const(RMXYZ(0., 1., 0.))),
		RMCompositeObject(RMBox(make(RMXYZ(1., 0.5, 2.))), "Box", RMTexture(
			const("images/splash/splash_innovation_trans.png"),
			const(RMTextureParameters(getValue(makeDefaultRMTexture().parameters) with offset = RMTextureTilingParameter(0.5, 0.5, 0.5, 0.5, 0.5, 0.5), step = RMTextureTilingParameter(0.5, 0.5, 0.5, 0.5, 0.5, 0.5)))
		), [], make(RMXYZ(0., 3.5, 0.)), const(RMX(0.)), const(RMXYZ(1., 1., 1.)), make(RMMouseDownleft()), const(false)),
		RMText(const("Point Ten 000 "), const(RMXYZ(10., 10., 10.))),
		RMText(const("Point Ten 001"), const(RMXYZ(10., 10., -10.))),
		RMText(const("Point Ten 010"), const(RMXYZ(10., -10., 10.))),
		RMText(const("Point Ten 011"), const(RMXYZ(10., -10., -10.))),
		RMText(const("Point Ten 100"), const(RMXYZ(-10., 10., 10.))),
		RMText(const("Point Ten 101"), const(RMXYZ(-10., 10., -10.))),
		RMText(const("Point Ten 110"), const(RMXYZ(-10., -10., 10.))),
		RMText(const("Point Ten 111"), const(RMXYZ(-10., -10., -10.))),
	]);

	scene3 = RMRepetitionLimited(RMRepetitionLimited(
		RMSmoothUnion([
			RMCompositeObject(RMSphere(const(0.5)), "Central sphere", RMColor(const(0xFF0000)), [], const(RMZ(2.)), const(RMX(0.)), const(RMXYZ(6., 1., 1.)), const(RMNoTrigger()), const(true)),
			RMCompositeObject(RMSphere(const(0.5)), "Central sphere", RMColor(const(0x00FF00)), [], const(RMZ(2.)), const(RMX(0.)), const(RMXYZ(1., 6., 1.)), const(RMNoTrigger()), const(true)),
			RMCompositeObject(RMSphere(const(0.5)), "Central sphere", RMColor(const(0x0000FF)), [], const(RMZ(2.)), const(RMX(0.)), const(RMXYZ(1., 1., 6.)), const(RMNoTrigger()), const(true)),
		], const(0.4)),
		const(RMXYZ(10., 10., 10.)), const(RMXYZ(1., 1., 1.))
	), const(RMXYZ(2., 2., 2.)), const(RMXYZ(1., 1., 1.)));


	scene4 = RMRepetitionLimited(RMRepetitionLimited(
		constructRMCompositeObject(RMSphere(const(1.0)), "Sphere", RMColor(const(0x00FF00)), const(RMXYZ(0., 0., 0.))),
		const(RMXYZ(8., 8., 8.)), const(RMXYZ(1., 1., 1.))
	), const(RMXYZ(2., 2., 2.)), const(RMXYZ(1., 1., 1.)));

	light = RMPlus(
		RMPlus(
			RMLightTranslate(RMLightMaterial(RMLight(0.03), RMLightColor(0x00AAAA)), RMXYZ(-2., 8., 3.)),
			RMLightTranslate(RMLightMaterial(RMLight(0.05), RMLightColor(0xAA00AA)), RMXYZ(0., 8., 6.))
		),
		RMLightTranslate(RMLightMaterial(RMLight(0.07), RMLightColor(0xAAAA00)), RMXYZ(2., 8., 3.))
	);
	light2 = RMCompositeLight(0.05, "Main light", RMLightColor(0xFFFFFF), RMXYZ(100., 100., 100.));
	
	camera = RMCamera(RMXYZ(6., 8., 6.), RMXYZ(0., 0., 6.));

	mrender(
		makeMaterialManager([]), true,
		
		MConstruct(
			[
				\ -> subscribe2(trigger1B, \t -> if (t == RMMouseDownleft()) next(cylinderColor1B, round(i2d(getValue(cylinderColor1B)) * 1.1))),
				\ -> subscribe2(trigger2B, \t -> switch(t) {
					RMMouseHoverIn(): next(cylinderColor2B, getValue(cylinderColor2B) + 0x111111);
					RMMouseHoverOut(): next(cylinderColor2B, getValue(cylinderColor2B) - 0x111111);
					default : {}
				}),
				\ -> subscribe2(twistTriggerB, \t -> if (t == RMMouseHover()) next(textureParametersB, twistedTextureParameter)),
				\ -> subscribe2(posTriggerB, \t -> if (t == RMMouseDownleft()) {
					next(positionB, addRMCoordinate(getValue(positionB), RMY(0.1)));
					next(radiusB, getValue(radiusB) + 0.005);
					next(smoothB, getValue(smoothB) + 0.025);
				}),
				\ -> subscribe2(posTrigger2B, \t -> if (t == RMMouseDownleft()) next(position2B, addRMCoordinate(getValue(position2B), RMY(0.1)))),
				\ -> subscribe2(triggerCapperTorusB, \t -> switch(t) {
					RMMouseHoverIn(): next(percentB, getValue(percentB) + 0.3);
					RMMouseHoverOut(): next(percentB, getValue(percentB) - 0.3);
					default : {}
				}),
			],
			MGroup([
				MLines2A(makeRaymarchingMaterialTexture(MTextButton("SOME BUTTON", nop, [MButtonRaised(), MGreen(900)], []), texture1B),
				makeRaymarchingMaterialTexture(MTextButton("ANOTHER BUTTON", nop, [MButtonRaised(), MRed(900)], []), texture2B)),	
				MLines2A(MTextButton("SOME BUTTON", nop, [MButtonRaised(), MGreen(900)], []),
				MTextButton("ANOTHER BUTTON", nop, [MButtonRaised(), MRed(900)], [])),	
				MRaymarching(
					scene2,
					light2,
					RMSettings(
						make(camera),
						make(true),
						make(false),
						make(Pair(-PI/10., PI/2.)),
						make(Pair(-PI/10., PI/2.)),
						make(1.0),
						make(false),
						make(0x7f7fb3),
						make(0.7),
						const(None()),
					)
				)
			])
		)
	)
}