import material/extra/raymarching/raymarching;

main() {
	setRendererType("html");

	spheres1 = RMSTranslate(
		RMUnion2(
			RMMaterial(RMSTranslate(RMSphere(1.), RMY(1.)), RMColor(make(0xFFFF00)), []),
			RMSTranslate(
				RMUnion2(
					RMMaterial(RMSTranslate(RMSphere(0.5), RMX(2.)), RMColor(make(0xFF00FF)), []),
					RMMaterial(RMSTranslate(RMSphere(0.5), RMX(-2.)), RMColor(make(0x00FFFF)), [])
				),
				RMYZ(2., 2.)
			)
		),
		RMZ(3.)
	);

	spheres2 = RMUnion2(
		RMMaterial(RMSphere(0.5), RMColor(make(0x00FF00)), []),
		RMUnion2(
			RMMaterial(RMSTranslate(RMSphere(0.5), RMX(2.)), RMColor(make(0x0000FF)), []),
			RMMaterial(RMSTranslate(RMSphere(0.5), RMX(-2.)), RMColor(make(0xFF0000)), [])
		),
	);

	//scene = make(RMSTranslate(RMUnion2(spheres1, spheres2), RMZ(3.)));
	scene = RMUnion2(
		RMSTranslate(RMUnion2(spheres1, spheres2), RMZ(3.)),
		RMMaterial(RMPlane(RMXYZ(0., 1., 0.)), RMColor(make(0xBBBBBB)), [])
	);
	texture1B = make("");
	texture2B = make("");
	textureParametersB = make(getValue(makeDefaultRMTexture().parameters));
	twistedTextureParameter = RMTextureParameters(
		RMTextureTilingParameter(1., 2., 1., 1., 2., 1.),
		RMTextureTilingParameter(1., 2.5, 2.6, 2.1, 2., 1.),
		RMTextureTilingParameter(1., 2., 1., 1.5, 2., 1.),
		RMTextureTilingParameter(1., 2., 3., 0.5, 2., 1.)
	);
	timer(6000, \ -> next(textureParametersB, twistedTextureParameter));
	scene2 = RMUnion([
		RMSmoothUnion([
			RMCompositeObject(RMSphere(0.7), "Sphere 2", RMColor(make(0x00FFFF)), [], RMXYZ(-2., 2., 8.)),
			RMCompositeObject(RMSphere(0.7), "Sphere 3", RMColor(make(0x00FF00)), [], RMXYZ(0., 0., 3.)),
			RMCompositeObject(RMSphere(0.7), "Sphere 4", RMColor(make(0x0000FF)), [], RMXYZ(2., 0., 3.)),
			RMCompositeObject(RMSphere(0.5), "Sphere 5", RMColor(make(0xFF0000)), [], RMXYZ(-2., 0., 3.)),
			//RMCompositeObject(RMPlane(RMXYZ(0., 1., 0.)), "Ground Plane", RMColor(make(0xFFFFFF)), [RMReflect(make(0.8))], RMXYZ(0., 0., 0.)),
			RMCompositeObject(RMSphere(1.), "Central sphere", RMColor(make(0xFFFF00)), [RMReflect(make(0.4))], RMXYZ(0., 1., 6.)),
			RMCompositeObject(RMTorus(1., 0.3), "Torus", RMColor(make(0xDA8E1F)), [], RMXYZ(-4., 2., 8.)),
		], 2.5),
		RMCompositeObject(RMBox(RMXYZ(0.3, 0.5, 1.)), "Box", RMTexture(makeDefaultRMTexture() with texture = texture1B), [], RMXYZ(0., 4., 4.)),
		RMCompositeObject(RMRoundBox(RMXYZ(0.3, 0.5, 1.), 0.25), "Round Box", RMTexture(texture2B, textureParametersB), [], RMXYZ(-2., 4., 4.)),
		RMCompositeObject(RMPlane(RMXYZ(0., 1., 0.)), "Ground Plane", RMColor(make(0xFFFFFF)), [RMReflect(make(0.8))], RMXYZ(0., 0., 0.)),
		RMCompositeObject(RMBoxFrame(RMXYZ(0.3, 0.5, 1.), 0.1), "Box Frame", RMTexture(makeDefaultRMTexture() with texture = make("images/splash/splash_innovation_trans.png")), [], RMXYZ(2., 4., 4.)),
		RMSmoothUnion([
			RMCompositeObject(RMSphere(0.5), "Sphere 1", RMColor(make(0xFF00FF)), [], RMXYZ(2., 2., 8.)),
			RMCompositeObject(RMCappedTorus(0.5, 0.3, 0.5), "Capped Torus", RMTexture(make("images/splash/splash_innovation_trans.png"), make(twistedTextureParameter)), [RMReflect(make(0.5))], RMXYZ(2., 2., 8.)),
		], 0.1),
		RMCompositeObject(RMCylinder(2., 0.5), "Cylinder", RMColor(RMInteractive(RMMouseDown(), make(0xAF4DCE), \c -> round(i2d(c) * 1.1))), [], RMXYZ(-5., 5., 5.)),
		RMCompositeObject(RMRoundedCylinder(2., 0.5, 0.5), "Cylinder", RMColor(RMInteractive(RMMouseHover(), make(0xAFCD1E), \c -> round(i2d(c) * 1.1))), [], RMXYZ(-5., 5., 3.)),
	]);

	/*light = RMPlus(
		RMPlus(
			RMTranslate(RMLightMaterial(RMLight(0.03), RMColor(make(0x00AAAA))), RMXYZ(-2., 8., 3.)),
			RMTranslate(RMLightMaterial(RMLight(0.05), RMColor(make(0xAA00AA))), RMXYZ(0., 8., 6.))
		),
		RMTranslate(RMLightMaterial(RMLight(0.07), RMColor(make(0xAAAA00))), RMXYZ(2., 8., 3.))
	);*/
	//light = RMTranslate(RMLightMaterial(RMLight(0.05), RMColor(make(0xFFFFFF))), RMXYZ(100., 100., 100.));
	light = RMCompositeLight(0.05, "Main light", RMColor(make(0xFFFFFF)), RMXYZ(100., 100., 100.));
	
	camera = RMCamera(RMXYZ(6., 8., 6.), RMXYZ(0., 0., 6.));

	mrender(
		makeMaterialManager([]), true,
		MLines([
			makeRaymarchingMaterialTexture(MTextButton("SOME BUTTON", nop, [MButtonRaised(), MGreen(900)], []), texture1B),
			makeRaymarchingMaterialTexture(MTextButton("ANOTHER BUTTON", nop, [MButtonRaised(), MRed(900)], []), texture2B),	
			MRaymarching(0, scene2, light, camera)
		])
	)
}