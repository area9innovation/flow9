import algorithms;

PrimeClass(
	typename : string,
	style : [PrimeClassStyle],
);

PrimeClassStyle ::= PrimeClassGroup;
	PrimeClassGroup(type : PrimeClassGroupType);
		PrimeClassGroupType(name : string);

main() {
	types = getTree();

	dummyPrimeClassGroup = PrimeClassGroup(PrimeClassGroupType(""));

	groupTypes : [PrimeClassGroupType] = foldTree(types, [], \name, class : PrimeClass, acc -> {
		groupname = extractStruct(class.style, dummyPrimeClassGroup).type;
		if (groupname.name != "") arrayPush(acc, groupname) else arrayPush(acc, PrimeClassGroupType(""));
	});

	println("groupTypes: " + toString(length(groupTypes)));

	arrayString = map(groupTypes, \v -> v.name);
	println("uniqArrayString: " + toString(length(uniq(arrayString))));
	println("uniqArray: " + toString(length(uniq(groupTypes))));

	{}
}

getTree() -> Tree<string, PrimeClass> {
	types : Tree<string, PrimeClass> = pairs2tree([
		Pair("1", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name"))])),
		Pair("2", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name"))])),
		Pair("3", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name2"))])),
		Pair("4", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name3"))])),
		Pair("5", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name3"))])),
		Pair("6", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name3"))])),
		Pair("7", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name3"))])),
		Pair("8", PrimeClass("", [PrimeClassGroup(PrimeClassGroupType("name3"))])),
	]);

	types
}