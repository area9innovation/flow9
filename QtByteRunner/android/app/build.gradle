apply plugin: 'com.android.application'

def doSkipNdk = project.hasProperty('SKIP_NDK') && SKIP_NDK.equals('true')
def isNdkArguments = project.hasProperty('NDK_ARGUMENTS') && !NDK_ARGUMENTS.isEmpty()
def ignoreAssets = project.hasProperty('IGNORE_ASSETS') && !IGNORE_ASSETS.isEmpty()
def linkGooglePlay = project.hasProperty('LINK_GOOGLE_PLAY_LIB') && LINK_GOOGLE_PLAY_LIB.equals('true')
def linkLocalytics = project.hasProperty('LINK_LOCALYTICS') && LINK_LOCALYTICS.equals('true')
def doIncludeSigning =  project.hasProperty('key.store') && project.hasProperty('key.store.password') &&
                        project.hasProperty('key.alias') && project.hasProperty('key.alias.password')

android {
    compileSdkVersion 26

    defaultConfig {
        applicationId PACKAGE_ID
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION

        if (linkGooglePlay) {
            multiDexEnabled true
        }

        if (!doSkipNdk) {
            ndk {
                abiFilters 'armeabi-v7a'
            }

            if (isNdkArguments) {
                externalNativeBuild {
                    ndkBuild {
                        arguments NDK_ARGUMENTS
                    }
                }
            }
        } else {
            sourceSets.main.jni.srcDirs = []
        }
    }

    if (!linkGooglePlay) {
        sourceSets.main.java.exclude '**/dk/area9/flowrunner/FlowGooglePlayServices.java'
        sourceSets.main.java.exclude '**/dk/area9/flowrunner/FlowGooglePlayServicesLocationListener.java'
        sourceSets.main.java.exclude '**/dk/area9/flowrunner/FlowFirebaseMessagingService.java'
        sourceSets.main.java.exclude '**/dk/area9/flowrunner/FlowFirebaseInstanceIDService.java'
    } else {
        sourceSets.main.java.exclude '**/dk/area9/flowrunner/FlowGooglePlayServicesStub.java'
    }

    if (doIncludeSigning) {
        signingConfigs {
            sign {
                def props = project.getProperties()

                storeFile file("../" + props['key.store'])
                storePassword props['key.store.password']
                keyAlias props['key.alias']
                keyPassword props['key.alias.password']
            }
        }
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (ignoreAssets) {
                aaptOptions {
                    ignoreAssetsPattern IGNORE_ASSETS
                }
            }

            if (doIncludeSigning) {
                signingConfig signingConfigs.sign
            }
        }

        debug {
            if (doIncludeSigning) {
                signingConfig signingConfigs.sign
            }
        }
    }

    if (!doSkipNdk) {
        externalNativeBuild {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }
    }
}

dependencies {
    implementation 'org.java-websocket:Java-WebSocket:1.3.0'
    implementation files('libs/aws-android-sdk-2.1.4-core.jar')
    implementation files('libs/aws-android-sdk-2.1.4-s3.jar')
    implementation 'com.android.support:support-v4:26.1.0'

    if (linkLocalytics) {
        implementation files('libs/localytics.jar')
        implementation 'com.android.support:support-compat:26.0.2'
    }

    if (linkGooglePlay) {
        implementation 'com.google.firebase:firebase-messaging:10.2.1'
        implementation 'com.google.android.gms:play-services-location:10.2.1'
        implementation 'com.google.android.gms:play-services-gcm:10.2.1'
        implementation 'com.google.firebase:firebase-core:10.2.1'
        implementation 'com.android.support:multidex:1.0.3'
        implementation 'com.android.support:multidex-instrumentation:1.0.3'
    }
}

if (linkGooglePlay) {
    apply plugin: 'com.google.gms.google-services'
}
