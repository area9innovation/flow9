import tools/dsl/dsl_parse;

export {
	// This adds tuples to a language
	// Syntax:
	// () is the null-tuple, represented as nil()
	// ( 1, ) is the one-tuple, represented as cons(1, nil())
	// ( 1, 2 ) is pair, represented as cons(2, cons(1, nil()))
	// a.first => first(a) peels until the last element of a list
	// a.second => second(a) peels until the second last element of a list
	defineTuples(language : DslLanguage) -> DslLanguage;
}

defineTuples(language : DslLanguage) -> DslLanguage {
	tuples = extendGrammar(language.grammar, << 
		atom = atom | '(' ws ')' ws $"nil" $"tuple_1" |
			'(' ws $"nil" exp "," ws $"cons" ')' $"tuple_1"
			| '(' ws exps  ')' $"tuple_1";
	>>);

	// TODO: Add standard library implementations of first, second, third, ...

	println(prettyDsl(parseProgram("test-tuples", tuples, <<
		a = ();
		b = (1,);
		c = (2,3);
		d = (4,5,6);
		b.first + c.second + d.third
	>>)));

	DslLanguage(language with name = "tuples", grammar = tuples)
}
