import tools/dsl/dsl_parse;
import tools/dsl/dsl_rewrite;
import tools/dsl/dsl_lowering;
import tools/dsl/dsl_runtime_common;
import tools/dsl/languages/ast_syntax;

export {
	// Adds +=, -=, *= and so on.
	defineAssignOperators(language : DslLanguage) -> DslLanguage;
}

defineAssignOperators(language : DslLanguage) -> DslLanguage {
	// idbind "=" ws exp ";" ws expsemi $"brace_1" $"let_3"
	
	grammar = extendGrammar(language.grammar, <<
		atom = assign_op | atom;
		assign_op = idbind "+=" ws exp "#" ws expsemi $"brace_1" $"letadd_3";
	>>);

	desugaring = defineDslRewriting(defineDslAst().grammar, language.grammar, "@", <<
			letadd($e1, $e2, $e3) => $e1 = $e1 + $e2 ; $e3 @
		>>, <<
			letadd => 10000 ;
		>>,
		<< 0 >>
	);
	lowering = defineDslLowering(defineDslAst().grammar, language, ";;", <<
			letadd($e1, $e2, $e3) => let(e1, add(e1, e2), e3) ;;
		>> 
	);

	DslLanguage("assignopers",
		grammar,
		Some(desugaring),
		None(), //Some(lowering), // None(), // lowering
		None(), // optimization
		makeTree(), //addCommonDslRuntime(["let", "add"], makeTree()), // runtime
		[], // compilers
		Some(language)
	);
}
