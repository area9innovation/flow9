import tools/dsl/dsl_parse;
import tools/dsl/dsl_rewrite;
import tools/dsl/dsl_lowering;
import tools/dsl/dsl_runtime_common;
import tools/dsl/languages/ast_syntax;

export {
	// Adds +=, -=, *=, /= and %= assignment operators.
	defineAssignOperators(language : DslLanguage) -> DslLanguage;
}

defineAssignOperators(language : DslLanguage) -> DslLanguage {
	grammar = extendGrammar(language.grammar, <<
		atom = assign_add | assign_sub | assign_mul | assign_div | assign_mod | atom;
		assign_add = idbind "+=" ws exp ";" ws expsemi $"brace_1" $"letadd_3";
		assign_sub = idbind "-=" ws exp ";" ws expsemi $"brace_1" $"letsub_3";
		assign_mul = idbind "*=" ws exp ";" ws expsemi $"brace_1" $"letmul_3";
		assign_div = idbind "/=" ws exp ";" ws expsemi $"brace_1" $"letdiv_3";
		assign_mod = idbind "%=" ws exp ";" ws expsemi $"brace_1" $"letmod_3";
	>>);

	desugaring = defineDslRewriting(defineDslAst().grammar, defineDslAst().grammar, ";", <<
			letadd($e1, $e2, $e3) => let($e1, add(var($e1), $e2), $e3);
			letsub($e1, $e2, $e3) => let($e1, sub(var($e1), $e2), $e3);
			letmul($e1, $e2, $e3) => let($e1, mul(var($e1), $e2), $e3);
			letdiv($e1, $e2, $e3) => let($e1, div(var($e1), $e2), $e3);
			letmod($e1, $e2, $e3) => let($e1, mod(var($e1), $e2), $e3);
		>>, <<
			letadd => 10000 ;
			letsub => 10000 ;
			letmul => 10000 ;
			letdiv => 10000 ;
			letmod => 10000 ;
		>>,
		<< 0 >>
	);
	DslLanguage("assignopers",
		grammar,
		Some(desugaring),
		None(), // lowering
		None(), // optimization
		makeTree(), // runtime
		[], // compilers
		Some(language)
	);
}
