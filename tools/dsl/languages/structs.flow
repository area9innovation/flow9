import tools/dsl/dsl_parse;
import tools/dsl/dsl_lowering;
import tools/dsl/dsl_runtime_common;
import tools/dsl/languages/ast_syntax;

export {
	// This adds structs to a language
	// Syntax:
	// 		struct Foo(a, b);
	// defines a struct. This is short for a constructor.
	// function, which builds a record:
	// 		Foo(1, 2) => { a=1, b = 2 }
	defineStructs(language : DslLanguage) -> DslLanguage;
}

defineStructs(language : DslLanguage) -> DslLanguage {
	structs = extendGrammar(language.grammar, << 
		atom = 'struct' !letterOrDigit ws id "(" ws struct_args ")" ws $"struct_2" | atom;

		struct_args = $"nil" struct_arg $"cons" ("," ws struct_arg $"cons")* ("," ws)? | $"nil";
		struct_arg = id; // "=" ws exp $"default_struct_value";
	>>);

	// struct(id, args) => struct = \*args -> {args[0]}
	lowering = defineDslLowering(defineDslAst().grammar, language, ";;", <<
			struct($id, $fields) => {
				lam = lambda(fields,
					record(
						fold(fields, nil(), \acc, f -> {
							cons(record_field(f, var(f)), acc)
						})
					)
				);
				global_let(id, lam, nil()) };;
		>>);

	DslLanguage("structs", structs, None(), Some(lowering), None(),
		makeTree(),
		[], Some(language)
	);
}
