import tools/dsl/dsl_parse;

export {
	defineDynJoin() -> DslGrammar;	
}

defineDynJoin() -> DslGrammar {
	grammar = defineGrammar("dynjoin", <<
		exp = 
			"@" ws exp $"quote_1"
			|> "join" ws exp $"join_1"
			|> idbind "=" ws exp ";" ws expsemi $"brace_1" $"let_3"
			|> exp "||" ws exp $"or_2"
			|> exp "&&" ws exp $"and_2"
			|> exp "==" ws exp $"equal_2" | exp "!=" ws exp $"not_equal_2"
			|> exp ("<=" ws exp $"less_equal_2" | "<" ws exp $"less_2" | ">=" ws exp $"greater_equal_2" | ">" ws exp $"greater_2")

			|> exp < ("+" ws exp $"add_2" | "-" ws exp $"sub_2")*
			|> exp ("*" ws exp $"mul_2" | "/" ws exp $"div_2" | "%"  ws exp $"mod_2")*

			|> (
				'!' ws exp $"not_1"
				| "-" ws exp $"negate_1"
				| lambda
				| exp (
					postfix
				)*
			)

			|> "{" ws expsemi "}" ws $"brace_1"
			|> "(" ws exp ")" ws
			|> atom;

		lambda = '\' ws lambdaargs "->" ws exp "" $"lambda_2"; // The "" makes right-recursion disappear
			lambdaargs = $"nil" idbind $"cons" ("," ws idbind $"cons")*
				| $"nil";

		// Give this a name, so it can be extended
		postfix = ( "(" ws exps ")" ws $"call_2");
			// | "." ws id $"dot_2"   // This can be done with syntactic sugar pair.first => first(pair), a.b(args) => b(a, args)
			// | "[" ws exp "]" ws $"index_2"

		atom = "if" !letterOrDigit ws exp exp "else" ws exp $"ifelse_3"
				| "true" !letterOrDigit $"true" ws
				| "false" !letterOrDigit $"false" ws
				| id $"var_1"
				| '[' ws exps ']' ws $"reverse"	// list
				| string $"string_1"
				| double $"double_1"
				| int $"int_1"
				| "$" ws id $"bind_1"	// For pattern matching
				| "$" ws exp $"bind_1"	// For unquoting
				;

		exps = $"nil" exp $"cons" ("," ws exp $"cons")* ("," ws)? 
			| $"nil";

		expsemi = $"nil" exp $"cons" (";" ws exp $"cons")* (";" ws)? 
			| $"nil";

		idbind = "~" ws id $"dyn_1" | id | "$" ws id $"bind_1";

		// Extension points for other languages that provide typing
		colontype = "" $"nil";
		type = "" $"nil";
	
		ws exp
	>>, ["ws", "id", "int", "double", "string"]); // true adds definitions for whitespace

	grammar;
}
