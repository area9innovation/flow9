import tools/dsl/languages/lambda;
import tools/dsl/languages/gringo;
import tools/dsl/languages/ast_syntax;
import tools/dsl/languages/structs;
import tools/dsl/languages/datafun;
import tools/dsl/languages/dot;
import tools/dsl/languages/tuples;
import tools/dsl/languages/records;
import tools/dsl/languages/arrays;
import tools/dsl/languages/default_args;
import tools/dsl/languages/named_args;
import tools/dsl/languages/while;
import tools/dsl/languages/ternary_oper;

import tools/dsl/dsl2flow;
import tools/dsl/dsl_api;

import tools/dsl/gringo_actions;

main() {
	lambda = defineLambda();
	dot = defineDot(lambda);
	tuples = defineTuples(dot);
	records = defineRecords(tuples);
	structs = defineStructs(records);
	arrays = defineArrays(structs);
	datafun = defineDataFun(arrays);
	ternary = defineTernaryOperator(datafun);
	res = runDsl("ternary-test", ternary, <<	
		x = 3; 
		a = (x == 3) ? "A" : "B";
		println("1: " + a + " (must be A)");
		println("2: " + ((x == 3) ? "A" : "B") + " (must be A)");
		println("3: " + (x > 3) ? "A" : "B" + " (must be B)");
		println("4: " + ((x == 3) ? ((x == 2) ? "AA" : "AB") : "B") + " (must be AB)");
		println("5: " + ((x == 2) ? "A" : ((x == 3) ? "BA" : "BB")) + " (must be BA)");
		println("5: " + ((x == 2) ? "A" : (x == 3) ? "BA" : "BB") + " (must be BA)");
		x;
	>>);
	println("TERNARY-TEST:");
	println(prettyDsl(res));
	println("Done");
	quit(0);
}
