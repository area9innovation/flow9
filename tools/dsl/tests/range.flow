import tools/dsl/languages/lambda;
import tools/dsl/languages/gringo;
import tools/dsl/languages/ast_syntax;
import tools/dsl/languages/structs;
import tools/dsl/languages/datafun;
import tools/dsl/languages/dot;
import tools/dsl/languages/tuples;
import tools/dsl/languages/records;
import tools/dsl/languages/arrays;
import tools/dsl/languages/default_args;
import tools/dsl/languages/named_call;
import tools/dsl/languages/while;
import tools/dsl/languages/range;

import tools/dsl/dsl2flow;
import tools/dsl/dsl_api;

import tools/dsl/gringo_actions;

main() {
	lambda = defineLambda();
	dot = defineDot(lambda);
	tuples = defineTuples(dot);
	records = defineRecords(tuples);
	structs = defineStructs(records);
	arrays = defineArrays(structs);
	datafun = defineDataFun(arrays);
	range = defineRange(datafun);
	res = runDsl("range-test", range, <<
		arr1 = [ 2 * a | a in cons(15, cons(27, nil())) ];
		println(arr1);
		fact = \n -> {
			if (n == 0) 1 else n * fact(n - 1);
		};
		arr2 = [1  + fact(3) .. 5 * (2 + 2)];
		println(arr2);
		println([1..5]);
		println([5..1]);
		arr2;
	>>);
	println("RANGE-TEST:");
	println(prettyDsl(res));
	println("Done");
	quit(0);
}
