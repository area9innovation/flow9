import tools/dsl/registry/dsl_run;
import tools/dsl/registry/dsl_lowering;
import tools/dsl/registry/dsl_populate;

main() {
	populateDsls();

	if (false) {
		// We start with a program in text
		input = DslAstEnv(parseDslLanguage("lambda+array"), DslString(" [1] "), makeTree(), makeDslEGraph(), 0, "");
		printDslAstEnv(input);

		// Then parse it
		output = performDslTransformations("parse", "lambda+array", input);
		printDslAstEnv(output);

		// The desugar it
		output2 = performDslTransformations("desugar", "lambda", output);
		printDslAstEnv(output2);
	}
/*
	println(prettyDsl(evalDslProgram(makeDslEnv(), "lambda+tuples", << 
		a = (1, 2, 3);
		first(a)
	>>)));

	println(prettyDsl(evalDslProgram(makeDslEnv(), "lambda+exponentiation", <<
		(2 ^ 2) ^ 3
	>>)));

	println(prettyDsl(evalDslProgram(makeDslEnv(), "lambda+range", <<
		(1 + 0) .. (2 + 3)
	>>)));
*/
	println(prettyDsl(evalDslProgram(makeDslEnv(), "lambda+array+range", << 
		[1..5]
	>>)));

	quit(0);
}

printDslAstEnv(e : DslAstEnv) -> void {
	println(dslLanguage2string(e.language) + ": " + e.error);
	println(prettyDsl(e.ast));
	println("");
}
