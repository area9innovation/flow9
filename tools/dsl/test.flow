import tools/dsl/languages/lambda;
import tools/dsl/languages/gringo;
import tools/dsl/languages/ast_syntax;
import tools/dsl/languages/datafun;
import tools/dsl/languages/dot;
import tools/dsl/languages/tuples;

import tools/dsl/dsl2flow;
import tools/dsl/dsl_api;

import tools/dsl/gringo_actions;

main() {
	if (false) {
		gringo = defineGringo();
		testGringo = parseDsl("test-gringo", gringo, << 
			truth = listof(keyword('true'), "," ws);
			truth
		>>);
		gr = dsl2flow(testGringo);
		println(gterm2string(gr));
		println(compileDsl(gringo.compilers[0], testGringo));
	}

	lambda = defineLambda();

	if (false) {
		defineDataFun(lambda);
		{}
	}

	if (true) {
		// OK, define . and tuple syntax
		dot = defineDot(lambda);
		defineTuples(dot);
		{}
	}

	//
	// This is the program to test
	//

	testValue = parseDsl("test-program", lambda, << 
		{
			fact = \n -> if (n <= 1) n else n * fact(n - 1);
			fact(3)
		}
	>>);

	optimized = optimizeDsl(lambda, testValue);
	if (false) {
		println(prettyDsl(testValue));
		println("is optimized to\n");
		println(prettyDsl(optimized));
		// 123 + 23 + 34 + 34
	}

	program = compileDsl(lambda.compilers[0], optimized);
	println("The program   " /*+ prettyDsl(testValue) */ + "   compiles to " + program);

	println("It evaluates to " + prettyDsl(evaluateDsl(makeDslEnv(), testValue)));

	if (true) {
		programs = [<< 1 + 2 * 3 >>, << (1 + 2) * 3 >>, << 1 - 2 - 3 >>, << (1 - 2) - 3 >>, << 1 - (2 - 3) >>];
		iter(programs, \p -> {
			program2 = parseProgram("test-programs", lambda.grammar, p);
			println("Testing precedence and associativity: " + p + " => " + compileDsl(lambda.compilers[0], program2) + "  =  " + prettyDsl(evaluateDsl(makeDslEnv(), program2)));
		});
	}

	println("Done");
	quit(0);
}
