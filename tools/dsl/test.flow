import tools/dsl/languages/lambda;
import tools/dsl/languages/gringo;
import tools/dsl/languages/ast_syntax;
import tools/dsl/languages/datafun;
import tools/dsl/languages/dot;
import tools/dsl/languages/tuples;
import tools/dsl/languages/records;
import tools/dsl/languages/arrays;

import tools/dsl/dsl2flow;
import tools/dsl/dsl_api;

import tools/dsl/gringo_actions;

main() {
	if (false) {
		gringo = defineGringo();
		testGringo = parseDsl("test-gringo", gringo, << 
			truth = listof(keyword('true'), "," ws);
			truth
		>>);
		gr = dsl2flow(testGringo);
		println(gterm2string(gr));
		println(compileDsl(gringo.compilers[0], testGringo));
	}

	lambda = defineLambda();

	if (false) {
		datafun = defineDataFun(lambda);
		res = runDsl("data-test", datafun, <<
			[ 2 * a | a in cons(15, cons(27, nil())) ]
		>>);
		println(prettyDsl(res));
		{}
	}

	if (false) {
		// OK, define . and tuple syntax
		dot = defineDot(lambda);
		tuples = defineTuples(dot);
		if (false) {
			res = runDsl("tuple-test", tuples, <<
				a = ();
				b = (1,);
				p = (2,3);
				t = (4,5,6);
				b.first + p.second + t.third
			>>);
			println(prettyDsl(res));
		}
		// Next, add records
		records = defineRecords(tuples);
		if (true) {
			res = runDsl("record-test", records, <<
				r = { pair : 1, second : 2.3 };
				field(r, "second")
			>>);
			println(prettyDsl(res));
		}
		{}
	}

	if (true) {
		arrays = defineArrays(lambda);
		if (true) {
			res = runDsl("array-test", arrays, <<
				r = [1, 2, 4];
				r[1]
			>>);
			println(prettyDsl(res));
		}
	}

	if (false) {
		testValue = parseDsl("test-program", lambda, << 
			{
				fact = \n -> if (n <= 1) n else n * fact(n - 1);
				fact(3)
			}
		>>);

		optimized = optimizeDsl(lambda, testValue);
		if (false) {
			println(prettyDsl(testValue));
			println("is optimized to\n");
			println(prettyDsl(optimized));
			// 123 + 23 + 34 + 34
		}

		program = compileDsl(lambda.compilers[0], optimized);
		println("The program   " /*+ prettyDsl(testValue) */ + "   compiles to " + program);

		println("It evaluates to " + prettyDsl(evaluateDsl(makeDslEnv(), testValue)));
	}

	if (false) {
		programs = [<< 1 + 2 * 3 >>, << (1 + 2) * 3 >>, << 1 - 2 - 3 >>, << (1 - 2) - 3 >>, << 1 - (2 - 3) >>];
		iter(programs, \p -> {
			program2 = parseProgram("test-programs", lambda.grammar, p);
			println("Testing precedence and associativity: " + p + " => " + compileDsl(lambda.compilers[0], program2) + "  =  " + prettyDsl(evaluateDsl(makeDslEnv(), program2)));
		});
	}

	println("Done");
	quit(0);
}
