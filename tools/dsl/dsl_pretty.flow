import tools/dsl/dsl_ast;
import text/blueprint;

export {
	prettyDsl(a : DslAst) -> string;
}

prettyDsl(a : DslAst) -> string {
	switch (a) {
		DslBool(value): b2s(value);
		DslInt(value): i2s(value);
		DslDouble(value): d2s(value);
		DslString(value): toString(value);
		DslList(value): "[" + superglue(list2array(value), prettyDsl, ",\n") + "]";
		DslNode(name, args, pos): {
			children = map(args, prettyDsl);
			if (depthDsl(a) < 3) {
				name + "(" + strGlue(children, ", ") + ")"
			} else {
				blueprint("
					%name%(
						%args%
					)", [
					"name", name,
					"args", strGlue(children, ",\n")
				])
			}
		}
	}
}

depthDsl(a : DslAst) -> int {
	switch (a) {
		DslBool(value): 1;
		DslInt(value): 1;
		DslDouble(value): 1;
		DslString(value): 1;
		DslList(value): {
			1 + foldList(value, 0, \acc, val -> {
				max(acc, depthDsl(val))
			});
		}
		DslNode(name, args, pos): {
			1 + fold(args, 0, \acc, arg -> {
				max(acc, depthDsl(arg))
			})
		}
	}
}
