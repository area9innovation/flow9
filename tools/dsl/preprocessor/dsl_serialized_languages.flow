import tools/dsl/dsl_language;
import tools/dsl/preprocessor/dsl_lowering_args;

export {
	dslGrammarPairs() -> [Pair<string, DslGrammar>];
	dslGrammarExtensionPairs() -> [Pair<string, Tree<string, GTerm>>];
	dslLoweringList() -> List<DslLoweringArgs>;
	dslLanguageRuntimePairs() -> [Pair<DslLanguage, Tree<string, DslAst>>];
}

dslGrammarsM : ref Maybe<[Pair<string, DslGrammar>]> = ref None();
dslGrammarExtensionsM : ref Maybe<[Pair<string, Tree<string, GTerm>>]> = ref None();
dslLoweringM : ref Maybe<List<DslLoweringArgs>> = ref None();
dslRuntimeM : ref Maybe<[Pair<DslLanguage, Tree<string, DslAst>>]> = ref None();

dslGrammarPairs() -> [Pair<string, DslGrammar>] {
	onlyOnce(dslGrammarsM, \ -> {
		[Pair("ast", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("s", GPlus(GVar("cs")), GRule("anychar", GRange(0, 65535), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("int", GSeq(GSeq(GUnquote(GVar("digits")), GVar("ws")), GUnquote(GString("s2i"))), GRule("double", GChoice(GSeq(GSeq(GUnquote(GSeq(GSeq(GSeq(GVar("digits"), GString(".")), GNegate(GString("."))), GOpt(GVar("digits")))), GVar("ws")), GUnquote(GString("s2d"))), GSeq(GSeq(GUnquote(GSeq(GString("."), GVar("digits"))), GVar("ws")), GUnquote(GString("s2d")))), GRule("digits", GPlus(GRange(48, 57)), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("backslash", GString("\\"), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("dslast", GChoice(GSeq(GSeq(GSeq(GString("true"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GUnquote(GString("true"))), GChoice(GSeq(GSeq(GSeq(GString("false"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GUnquote(GString("false"))), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("id"), GString("(")), GVar("ws")), GVar("args")), GString(")")), GVar("ws")), GUnquote(GString("make_node"))), GChoice(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("args")), GString("]")), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1"))), GChoice(GVar("double"), GChoice(GVar("int"), GVar("string")))))))), GRule("args", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GVar("dslast"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("dslast")), GUnquote(GString("cons"))))))), GSeq(GVar("ws"), GVar("dslast")))))))))))))))))))), Pair("blueprint", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("s", GPlus(GVar("cs")), GRule("anychar", GRange(0, 65535), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("int", GSeq(GSeq(GUnquote(GPlus(GRange(48, 57))), GVar("ws")), GUnquote(GString("s2i"))), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("backslash", GString("\\"), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("output", GSeq(GSeq(GSeq(GVar("ws"), GUnquote(GString("nil"))), GStar(GSeq(GVar("blueprint"), GUnquote(GString("cons"))))), GUnquote(GString("blueprint_1"))), GRule("blueprint", GChoice(GVar("glue"), GChoice(GVar("bind"), GSeq(GVar("string"), GUnquote(GString("string_1"))))), GRule("glue", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("$glue"), GVar("ws")), GString("(")), GVar("id")), GString(",")), GVar("ws")), GVar("string")), GString(")")), GVar("ws")), GUnquote(GString("glue_2"))), GRule("bind", GSeq(GSeq(GString("$"), GVar("id")), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("int")), GString(")")), GVar("ws")), GUnquote(GString("bind_2"))), GSeq(GSeq(GUnquote(GString("0")), GUnquote(GString("s2i"))), GUnquote(GString("bind_2"))))), GVar("output"))))))))))))))))))), Pair("gringo", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("s", GPlus(GVar("cs")), GRule("anychar", GRange(0, 65535), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("term", GSeq(GVar("term1"), GOpt(GSeq(GSeq(GSeq(GString("|>"), GVar("ws")), GVar("term")), GUnquote(GString("GPrecedence_2"))))), GRule("term1", GSeq(GVar("term2"), GOpt(GSeq(GSeq(GSeq(GString("|"), GVar("ws")), GVar("term1")), GUnquote(GString("GChoice_2"))))), GRule("term2", GSeq(GVar("term3"), GOpt(GSeq(GVar("term2"), GUnquote(GString("GSeq_2"))))), GRule("term3", GChoice(GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("term3")), GUnquote(GString("GUnquote_1"))), GVar("term4")), GRule("term4", GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("term4")), GUnquote(GString("GLower_1"))), GVar("term5")), GRule("term5", GChoice(GSeq(GSeq(GSeq(GString("#"), GVar("ws")), GVar("term5")), GUnquote(GString("GError_1"))), GVar("term6")), GRule("term6", GSeq(GVar("term7"), GOpt(GSeq(GSeq(GString("*"), GVar("ws")), GUnquote(GString("GStar_1"))))), GRule("term7", GSeq(GVar("term8"), GOpt(GSeq(GSeq(GString("+"), GVar("ws")), GUnquote(GString("GPlus_1"))))), GRule("term8", GSeq(GVar("term9"), GOpt(GSeq(GSeq(GString("?"), GVar("ws")), GUnquote(GString("GOpt_1"))))), GRule("term9", GChoice(GSeq(GSeq(GSeq(GString("!"), GVar("ws")), GVar("term9")), GUnquote(GString("GNegate_1"))), GVar("term10")), GRule("term10", GChoice(GSeq(GSeq(GString("@"), GVar("id")), GUnquote(GString("bind_1"))), GVar("term11")), GRule("term11", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("list("), GVar("ws")), GVar("term")), GString(")")), GVar("ws")), GUnquote(GString("GList_1"))), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("listof("), GVar("ws")), GVar("term")), GString(",")), GVar("ws")), GVar("term")), GString(")")), GVar("ws")), GUnquote(GString("GListOf_2"))), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("keyword("), GVar("ws")), GVar("term")), GString(")")), GVar("ws")), GUnquote(GString("GKeyword_1"))), GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("term")), GString(")")), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GSeq(GString("\""), GVar("string")), GString("\"")), GVar("ws")), GUnquote(GString("GString_1"))), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("'"), GVar("char")), GString("'")), GVar("ws")), GString("-")), GVar("ws")), GString("'")), GVar("char")), GString("'")), GVar("ws")), GUnquote(GString("GRange_2"))), GChoice(GSeq(GSeq(GSeq(GSeq(GString("'"), GVar("stringq")), GString("'")), GVar("ws")), GUnquote(GString("GString_1"))), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("id"), GString("=")), GVar("ws")), GVar("term")), GString(";")), GVar("ws")), GVar("term")), GUnquote(GString("GRule_3"))), GSeq(GVar("id"), GUnquote(GString("GVar_1"))))))))))), GRule("string", GUnquote(GStar(GSeq(GNegate(GString("\"")), GVar("anychar")))), GRule("stringq", GUnquote(GStar(GSeq(GNegate(GString("'")), GVar("anychar")))), GRule("char", GChoice(GUnquote(GSeq(GString("0x"), GPlus(GVar("hexdigit")))), GUnquote(GVar("anychar"))), GRule("hexdigit", GChoice(GRange(97, 102), GChoice(GRange(65, 70), GRange(48, 57))), GRule("grammar", GSeq(GVar("ws"), GVar("term")), GVar("grammar")))))))))))))))))))))))))), Pair("lambda", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("s", GPlus(GVar("cs")), GRule("anychar", GRange(0, 65535), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("int", GSeq(GSeq(GUnquote(GVar("digits")), GVar("ws")), GUnquote(GString("s2i"))), GRule("double", GChoice(GSeq(GSeq(GUnquote(GSeq(GSeq(GSeq(GVar("digits"), GString(".")), GNegate(GString("."))), GOpt(GVar("digits")))), GVar("ws")), GUnquote(GString("s2d"))), GSeq(GSeq(GUnquote(GSeq(GString("."), GVar("digits"))), GVar("ws")), GUnquote(GString("s2d")))), GRule("digits", GPlus(GRange(48, 57)), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("backslash", GString("\\"), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("exp", GChoice(GSeq(GSeq(GString("@"), GVar("exp")), GUnquote(GString("quote_1"))), GVar("exp1")), GRule("exp1", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("let_3"))), GVar("exp2")), GRule("exp2", GSeq(GVar("exp3"), GOpt(GSeq(GSeq(GSeq(GString("||"), GVar("ws")), GVar("exp2")), GUnquote(GString("or_2"))))), GRule("exp3", GSeq(GVar("exp4"), GOpt(GSeq(GSeq(GSeq(GString("&&"), GVar("ws")), GVar("exp3")), GUnquote(GString("and_2"))))), GRule("exp4", GSeq(GVar("exp5"), GChoice(GSeq(GSeq(GSeq(GString("=="), GVar("ws")), GVar("exp4")), GUnquote(GString("equal_2"))), GOpt(GSeq(GSeq(GSeq(GString("!="), GVar("ws")), GVar("exp4")), GUnquote(GString("not_equal_2")))))), GRule("exp5", GSeq(GVar("exp6"), GOpt(GChoice(GSeq(GSeq(GSeq(GString("<="), GVar("ws")), GVar("exp5")), GUnquote(GString("less_equal_2"))), GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("exp5")), GUnquote(GString("less_2"))), GChoice(GSeq(GSeq(GSeq(GString(">="), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_equal_2"))), GSeq(GSeq(GSeq(GString(">"), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_2")))))))), GRule("exp6", GSeq(GVar("exp7"), GStar(GChoice(GSeq(GSeq(GSeq(GString("+"), GVar("ws")), GVar("exp7")), GUnquote(GString("add_2"))), GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp7")), GUnquote(GString("sub_2")))))), GRule("exp7", GSeq(GVar("exp8"), GStar(GChoice(GSeq(GSeq(GSeq(GString("*"), GVar("ws")), GVar("exp7")), GUnquote(GString("mul_2"))), GChoice(GSeq(GSeq(GSeq(GString("/"), GVar("ws")), GVar("exp7")), GUnquote(GString("div_2"))), GSeq(GSeq(GSeq(GString("%"), GVar("ws")), GVar("exp7")), GUnquote(GString("mod_2"))))))), GRule("exp8", GChoice(GSeq(GSeq(GSeq(GString("!"), GVar("ws")), GVar("exp8")), GUnquote(GString("not_1"))), GChoice(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp8")), GUnquote(GString("negate_1"))), GChoice(GVar("lambda"), GChoice(GSeq(GVar("exp9"), GStar(GVar("postfix"))), GVar("exp9"))))), GRule("exp9", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GUnquote(GString("brace_1"))), GVar("exp10")), GRule("exp10", GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GVar("atom")), GRule("lambda", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("backslash"), GVar("ws")), GVar("lambdaargs")), GString("->")), GVar("ws")), GVar("exp")), GString("")), GUnquote(GString("lambda_2"))), GRule("lambdaargs", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GVar("idbind"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("idbind")), GUnquote(GString("cons"))))))), GRule("postfix", GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exps")), GString(")")), GVar("ws")), GUnquote(GString("call_2"))), GRule("atom", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("if"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("exp")), GVar("exp")), GString("else")), GVar("ws")), GVar("exp")), GUnquote(GString("ifelse_3"))), GChoice(GSeq(GSeq(GSeq(GString("true"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("true"))), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GString("false"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("false"))), GVar("ws")), GChoice(GSeq(GVar("id"), GUnquote(GString("var_1"))), GChoice(GSeq(GVar("string"), GUnquote(GString("string_1"))), GChoice(GSeq(GVar("double"), GUnquote(GString("double_1"))), GChoice(GSeq(GVar("int"), GUnquote(GString("int_1"))), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))))))))), GRule("exps", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))))), GRule("expsemi", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(";"), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(";"), GVar("ws")))))), GRule("idbind", GChoice(GVar("id"), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))), GSeq(GVar("ws"), GVar("exp")))))))))))))))))))))))))))))))))))), Pair("lambda+array", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("s", GPlus(GVar("cs")), GRule("postfix", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exps")), GString(")")), GVar("ws")), GUnquote(GString("call_2"))), GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exp")), GString("]")), GVar("ws")), GUnquote(GString("array_index_2")))), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("lambdaargs", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GVar("idbind"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("idbind")), GUnquote(GString("cons"))))))), GRule("lambda", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("backslash"), GVar("ws")), GVar("lambdaargs")), GString("->")), GVar("ws")), GVar("exp")), GString("")), GUnquote(GString("lambda_2"))), GRule("int", GSeq(GSeq(GUnquote(GVar("digits")), GVar("ws")), GUnquote(GString("s2i"))), GRule("idbind", GChoice(GVar("id"), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("expsemi", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(";"), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(";"), GVar("ws")))))), GRule("exps", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))))), GRule("exp9", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GUnquote(GString("brace_1"))), GVar("exp10")), GRule("exp8", GChoice(GSeq(GSeq(GSeq(GString("!"), GVar("ws")), GVar("exp8")), GUnquote(GString("not_1"))), GChoice(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp8")), GUnquote(GString("negate_1"))), GChoice(GVar("lambda"), GChoice(GSeq(GVar("exp9"), GStar(GVar("postfix"))), GVar("exp9"))))), GRule("exp7", GSeq(GVar("exp8"), GStar(GChoice(GSeq(GSeq(GSeq(GString("*"), GVar("ws")), GVar("exp7")), GUnquote(GString("mul_2"))), GChoice(GSeq(GSeq(GSeq(GString("/"), GVar("ws")), GVar("exp7")), GUnquote(GString("div_2"))), GSeq(GSeq(GSeq(GString("%"), GVar("ws")), GVar("exp7")), GUnquote(GString("mod_2"))))))), GRule("exp6", GSeq(GVar("exp7"), GStar(GChoice(GSeq(GSeq(GSeq(GString("+"), GVar("ws")), GVar("exp7")), GUnquote(GString("add_2"))), GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp7")), GUnquote(GString("sub_2")))))), GRule("exp5", GSeq(GVar("exp6"), GOpt(GChoice(GSeq(GSeq(GSeq(GString("<="), GVar("ws")), GVar("exp5")), GUnquote(GString("less_equal_2"))), GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("exp5")), GUnquote(GString("less_2"))), GChoice(GSeq(GSeq(GSeq(GString(">="), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_equal_2"))), GSeq(GSeq(GSeq(GString(">"), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_2")))))))), GRule("exp4", GSeq(GVar("exp5"), GChoice(GSeq(GSeq(GSeq(GString("=="), GVar("ws")), GVar("exp4")), GUnquote(GString("equal_2"))), GOpt(GSeq(GSeq(GSeq(GString("!="), GVar("ws")), GVar("exp4")), GUnquote(GString("not_equal_2")))))), GRule("exp3", GSeq(GVar("exp4"), GOpt(GSeq(GSeq(GSeq(GString("&&"), GVar("ws")), GVar("exp3")), GUnquote(GString("and_2"))))), GRule("exp2", GSeq(GVar("exp3"), GOpt(GSeq(GSeq(GSeq(GString("||"), GVar("ws")), GVar("exp2")), GUnquote(GString("or_2"))))), GRule("exp10", GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GVar("atom")), GRule("exp1", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("let_3"))), GVar("exp2")), GRule("exp", GChoice(GSeq(GSeq(GString("@"), GVar("exp")), GUnquote(GString("quote_1"))), GVar("exp1")), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("double", GChoice(GSeq(GSeq(GUnquote(GSeq(GSeq(GSeq(GVar("digits"), GString(".")), GNegate(GString("."))), GOpt(GVar("digits")))), GVar("ws")), GUnquote(GString("s2d"))), GSeq(GSeq(GUnquote(GSeq(GString("."), GVar("digits"))), GVar("ws")), GUnquote(GString("s2d")))), GRule("digits", GPlus(GRange(48, 57)), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("backslash", GString("\\"), GRule("atom", GChoice(GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("if"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("exp")), GVar("exp")), GString("else")), GVar("ws")), GVar("exp")), GUnquote(GString("ifelse_3"))), GChoice(GSeq(GSeq(GSeq(GString("true"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("true"))), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GString("false"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("false"))), GVar("ws")), GChoice(GSeq(GVar("id"), GUnquote(GString("var_1"))), GChoice(GSeq(GVar("string"), GUnquote(GString("string_1"))), GChoice(GSeq(GVar("double"), GUnquote(GString("double_1"))), GChoice(GSeq(GVar("int"), GUnquote(GString("int_1"))), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))))))))), GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exps")), GString("]")), GVar("ws")), GUnquote(GString("array_1")))), GRule("anychar", GRange(0, 65535), GSeq(GVar("ws"), GVar("exp")))))))))))))))))))))))))))))))))))), Pair("lambda+datafun", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("s", GPlus(GVar("cs")), GRule("postfix", GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exps")), GString(")")), GVar("ws")), GUnquote(GString("call_2"))), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("lambdaargs", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GVar("idbind"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("idbind")), GUnquote(GString("cons"))))))), GRule("lambda", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("backslash"), GVar("ws")), GVar("lambdaargs")), GString("->")), GVar("ws")), GVar("exp")), GString("")), GUnquote(GString("lambda_2"))), GRule("int", GSeq(GSeq(GUnquote(GVar("digits")), GVar("ws")), GUnquote(GString("s2i"))), GRule("idbind", GChoice(GVar("id"), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("expsemi", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(";"), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(";"), GVar("ws")))))), GRule("exps", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))))), GRule("exp9", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GUnquote(GString("brace_1"))), GVar("exp10")), GRule("exp8", GChoice(GSeq(GSeq(GSeq(GString("!"), GVar("ws")), GVar("exp8")), GUnquote(GString("not_1"))), GChoice(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp8")), GUnquote(GString("negate_1"))), GChoice(GVar("lambda"), GChoice(GSeq(GVar("exp9"), GStar(GVar("postfix"))), GVar("exp9"))))), GRule("exp7", GSeq(GVar("exp8"), GStar(GChoice(GSeq(GSeq(GSeq(GString("*"), GVar("ws")), GVar("exp7")), GUnquote(GString("mul_2"))), GChoice(GSeq(GSeq(GSeq(GString("/"), GVar("ws")), GVar("exp7")), GUnquote(GString("div_2"))), GSeq(GSeq(GSeq(GString("%"), GVar("ws")), GVar("exp7")), GUnquote(GString("mod_2"))))))), GRule("exp6", GSeq(GVar("exp7"), GStar(GChoice(GSeq(GSeq(GSeq(GString("+"), GVar("ws")), GVar("exp7")), GUnquote(GString("add_2"))), GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp7")), GUnquote(GString("sub_2")))))), GRule("exp5", GSeq(GVar("exp6"), GOpt(GChoice(GSeq(GSeq(GSeq(GString("<="), GVar("ws")), GVar("exp5")), GUnquote(GString("less_equal_2"))), GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("exp5")), GUnquote(GString("less_2"))), GChoice(GSeq(GSeq(GSeq(GString(">="), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_equal_2"))), GSeq(GSeq(GSeq(GString(">"), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_2")))))))), GRule("exp4", GSeq(GVar("exp5"), GChoice(GSeq(GSeq(GSeq(GString("=="), GVar("ws")), GVar("exp4")), GUnquote(GString("equal_2"))), GOpt(GSeq(GSeq(GSeq(GString("!="), GVar("ws")), GVar("exp4")), GUnquote(GString("not_equal_2")))))), GRule("exp3", GSeq(GVar("exp4"), GOpt(GSeq(GSeq(GSeq(GString("&&"), GVar("ws")), GVar("exp3")), GUnquote(GString("and_2"))))), GRule("exp2", GSeq(GVar("exp3"), GOpt(GSeq(GSeq(GSeq(GString("||"), GVar("ws")), GVar("exp2")), GUnquote(GString("or_2"))))), GRule("exp10", GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GVar("atom")), GRule("exp1", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("let_3"))), GVar("exp2")), GRule("exp", GChoice(GSeq(GSeq(GString("@"), GVar("exp")), GUnquote(GString("quote_1"))), GVar("exp1")), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("double", GChoice(GSeq(GSeq(GUnquote(GSeq(GSeq(GSeq(GVar("digits"), GString(".")), GNegate(GString("."))), GOpt(GVar("digits")))), GVar("ws")), GUnquote(GString("s2d"))), GSeq(GSeq(GUnquote(GSeq(GString("."), GVar("digits"))), GVar("ws")), GUnquote(GString("s2d")))), GRule("digits", GPlus(GRange(48, 57)), GRule("datafun_exps", GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("datafun_exp")), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("datafun_exp")), GUnquote(GString("cons"))))), GRule("datafun_exp", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GVar("ws")), GString("in")), GVar("ws")), GVar("exp")), GUnquote(GString("datafun_in_2"))), GSeq(GVar("exp"), GUnquote(GString("datafun_filter_1")))), GRule("datafun", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exp")), GString("|")), GVar("ws")), GVar("datafun_exps")), GString("]")), GVar("ws")), GUnquote(GString("datafun_2"))), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("backslash", GString("\\"), GRule("atom", GChoice(GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("if"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("exp")), GVar("exp")), GString("else")), GVar("ws")), GVar("exp")), GUnquote(GString("ifelse_3"))), GChoice(GSeq(GSeq(GSeq(GString("true"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("true"))), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GString("false"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("false"))), GVar("ws")), GChoice(GSeq(GVar("id"), GUnquote(GString("var_1"))), GChoice(GSeq(GVar("string"), GUnquote(GString("string_1"))), GChoice(GSeq(GVar("double"), GUnquote(GString("double_1"))), GChoice(GSeq(GVar("int"), GUnquote(GString("int_1"))), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))))))))), GVar("datafun")), GRule("anychar", GRange(0, 65535), GSeq(GVar("ws"), GVar("exp"))))))))))))))))))))))))))))))))))))))), Pair("lambda+quotestring", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("s", GPlus(GVar("cs")), GRule("postfix", GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exps")), GString(")")), GVar("ws")), GUnquote(GString("call_2"))), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("lambdaargs", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GVar("idbind"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("idbind")), GUnquote(GString("cons"))))))), GRule("lambda", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("backslash"), GVar("ws")), GVar("lambdaargs")), GString("->")), GVar("ws")), GVar("exp")), GString("")), GUnquote(GString("lambda_2"))), GRule("int", GSeq(GSeq(GUnquote(GVar("digits")), GVar("ws")), GUnquote(GString("s2i"))), GRule("idbind", GChoice(GVar("id"), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("expsemi", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(";"), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(";"), GVar("ws")))))), GRule("exps", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))))), GRule("exp9", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GUnquote(GString("brace_1"))), GVar("exp10")), GRule("exp8", GChoice(GSeq(GSeq(GSeq(GString("!"), GVar("ws")), GVar("exp8")), GUnquote(GString("not_1"))), GChoice(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp8")), GUnquote(GString("negate_1"))), GChoice(GVar("lambda"), GChoice(GSeq(GVar("exp9"), GStar(GVar("postfix"))), GVar("exp9"))))), GRule("exp7", GSeq(GVar("exp8"), GStar(GChoice(GSeq(GSeq(GSeq(GString("*"), GVar("ws")), GVar("exp7")), GUnquote(GString("mul_2"))), GChoice(GSeq(GSeq(GSeq(GString("/"), GVar("ws")), GVar("exp7")), GUnquote(GString("div_2"))), GSeq(GSeq(GSeq(GString("%"), GVar("ws")), GVar("exp7")), GUnquote(GString("mod_2"))))))), GRule("exp6", GSeq(GVar("exp7"), GStar(GChoice(GSeq(GSeq(GSeq(GString("+"), GVar("ws")), GVar("exp7")), GUnquote(GString("add_2"))), GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp7")), GUnquote(GString("sub_2")))))), GRule("exp5", GSeq(GVar("exp6"), GOpt(GChoice(GSeq(GSeq(GSeq(GString("<="), GVar("ws")), GVar("exp5")), GUnquote(GString("less_equal_2"))), GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("exp5")), GUnquote(GString("less_2"))), GChoice(GSeq(GSeq(GSeq(GString(">="), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_equal_2"))), GSeq(GSeq(GSeq(GString(">"), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_2")))))))), GRule("exp4", GSeq(GVar("exp5"), GChoice(GSeq(GSeq(GSeq(GString("=="), GVar("ws")), GVar("exp4")), GUnquote(GString("equal_2"))), GOpt(GSeq(GSeq(GSeq(GString("!="), GVar("ws")), GVar("exp4")), GUnquote(GString("not_equal_2")))))), GRule("exp3", GSeq(GVar("exp4"), GOpt(GSeq(GSeq(GSeq(GString("&&"), GVar("ws")), GVar("exp3")), GUnquote(GString("and_2"))))), GRule("exp2", GSeq(GVar("exp3"), GOpt(GSeq(GSeq(GSeq(GString("||"), GVar("ws")), GVar("exp2")), GUnquote(GString("or_2"))))), GRule("exp10", GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GVar("atom")), GRule("exp1", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("let_3"))), GVar("exp2")), GRule("exp", GChoice(GSeq(GSeq(GString("@"), GVar("exp")), GUnquote(GString("quote_1"))), GVar("exp1")), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("double", GChoice(GSeq(GSeq(GUnquote(GSeq(GSeq(GSeq(GVar("digits"), GString(".")), GNegate(GString("."))), GOpt(GVar("digits")))), GVar("ws")), GUnquote(GString("s2d"))), GSeq(GSeq(GUnquote(GSeq(GString("."), GVar("digits"))), GVar("ws")), GUnquote(GString("s2d")))), GRule("digits", GPlus(GRange(48, 57)), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("backslash", GString("\\"), GRule("atom", GChoice(GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("if"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("exp")), GVar("exp")), GString("else")), GVar("ws")), GVar("exp")), GUnquote(GString("ifelse_3"))), GChoice(GSeq(GSeq(GSeq(GString("true"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("true"))), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GString("false"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("false"))), GVar("ws")), GChoice(GSeq(GVar("id"), GUnquote(GString("var_1"))), GChoice(GSeq(GVar("string"), GUnquote(GString("string_1"))), GChoice(GSeq(GVar("double"), GUnquote(GString("double_1"))), GChoice(GSeq(GVar("int"), GUnquote(GString("int_1"))), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))))))))), GSeq(GSeq(GSeq(GString("<<"), GUnquote(GStar(GSeq(GNegate(GString(">>")), GVar("anychar"))))), GString(">>")), GVar("ws"))), GRule("anychar", GRange(0, 65535), GSeq(GVar("ws"), GVar("exp")))))))))))))))))))))))))))))))))))), Pair("lambda+quotestring+array", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("s", GPlus(GVar("cs")), GRule("postfix", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exps")), GString(")")), GVar("ws")), GUnquote(GString("call_2"))), GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exp")), GString("]")), GVar("ws")), GUnquote(GString("array_index_2")))), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("lambdaargs", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GVar("idbind"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("idbind")), GUnquote(GString("cons"))))))), GRule("lambda", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("backslash"), GVar("ws")), GVar("lambdaargs")), GString("->")), GVar("ws")), GVar("exp")), GString("")), GUnquote(GString("lambda_2"))), GRule("int", GSeq(GSeq(GUnquote(GVar("digits")), GVar("ws")), GUnquote(GString("s2i"))), GRule("idbind", GChoice(GVar("id"), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("expsemi", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(";"), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(";"), GVar("ws")))))), GRule("exps", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))))), GRule("exp9", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GUnquote(GString("brace_1"))), GVar("exp10")), GRule("exp8", GChoice(GSeq(GSeq(GSeq(GString("!"), GVar("ws")), GVar("exp8")), GUnquote(GString("not_1"))), GChoice(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp8")), GUnquote(GString("negate_1"))), GChoice(GVar("lambda"), GChoice(GSeq(GVar("exp9"), GStar(GVar("postfix"))), GVar("exp9"))))), GRule("exp7", GSeq(GVar("exp8"), GStar(GChoice(GSeq(GSeq(GSeq(GString("*"), GVar("ws")), GVar("exp7")), GUnquote(GString("mul_2"))), GChoice(GSeq(GSeq(GSeq(GString("/"), GVar("ws")), GVar("exp7")), GUnquote(GString("div_2"))), GSeq(GSeq(GSeq(GString("%"), GVar("ws")), GVar("exp7")), GUnquote(GString("mod_2"))))))), GRule("exp6", GSeq(GVar("exp7"), GStar(GChoice(GSeq(GSeq(GSeq(GString("+"), GVar("ws")), GVar("exp7")), GUnquote(GString("add_2"))), GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp7")), GUnquote(GString("sub_2")))))), GRule("exp5", GSeq(GVar("exp6"), GOpt(GChoice(GSeq(GSeq(GSeq(GString("<="), GVar("ws")), GVar("exp5")), GUnquote(GString("less_equal_2"))), GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("exp5")), GUnquote(GString("less_2"))), GChoice(GSeq(GSeq(GSeq(GString(">="), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_equal_2"))), GSeq(GSeq(GSeq(GString(">"), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_2")))))))), GRule("exp4", GSeq(GVar("exp5"), GChoice(GSeq(GSeq(GSeq(GString("=="), GVar("ws")), GVar("exp4")), GUnquote(GString("equal_2"))), GOpt(GSeq(GSeq(GSeq(GString("!="), GVar("ws")), GVar("exp4")), GUnquote(GString("not_equal_2")))))), GRule("exp3", GSeq(GVar("exp4"), GOpt(GSeq(GSeq(GSeq(GString("&&"), GVar("ws")), GVar("exp3")), GUnquote(GString("and_2"))))), GRule("exp2", GSeq(GVar("exp3"), GOpt(GSeq(GSeq(GSeq(GString("||"), GVar("ws")), GVar("exp2")), GUnquote(GString("or_2"))))), GRule("exp10", GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GVar("atom")), GRule("exp1", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("let_3"))), GVar("exp2")), GRule("exp", GChoice(GSeq(GSeq(GString("@"), GVar("exp")), GUnquote(GString("quote_1"))), GVar("exp1")), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("double", GChoice(GSeq(GSeq(GUnquote(GSeq(GSeq(GSeq(GVar("digits"), GString(".")), GNegate(GString("."))), GOpt(GVar("digits")))), GVar("ws")), GUnquote(GString("s2d"))), GSeq(GSeq(GUnquote(GSeq(GString("."), GVar("digits"))), GVar("ws")), GUnquote(GString("s2d")))), GRule("digits", GPlus(GRange(48, 57)), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("backslash", GString("\\"), GRule("atom", GChoice(GChoice(GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("if"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("exp")), GVar("exp")), GString("else")), GVar("ws")), GVar("exp")), GUnquote(GString("ifelse_3"))), GChoice(GSeq(GSeq(GSeq(GString("true"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("true"))), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GString("false"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("false"))), GVar("ws")), GChoice(GSeq(GVar("id"), GUnquote(GString("var_1"))), GChoice(GSeq(GVar("string"), GUnquote(GString("string_1"))), GChoice(GSeq(GVar("double"), GUnquote(GString("double_1"))), GChoice(GSeq(GVar("int"), GUnquote(GString("int_1"))), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))))))))), GSeq(GSeq(GSeq(GString("<<"), GUnquote(GStar(GSeq(GNegate(GString(">>")), GVar("anychar"))))), GString(">>")), GVar("ws"))), GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exps")), GString("]")), GVar("ws")), GUnquote(GString("array_1")))), GRule("anychar", GRange(0, 65535), GSeq(GVar("ws"), GVar("exp")))))))))))))))))))))))))))))))))))), Pair("lambda+range", DslGrammar(GRule("ws", GStar(GVar("s")), GRule("string", GSeq(GSeq(GUnquote(GSeq(GSeq(GString("\""), GStar(GVar("onechar_"))), GString("\""))), GUnquote(GString("unescape"))), GVar("ws")), GRule("s", GPlus(GVar("cs")), GRule("postfix", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exps")), GString(")")), GVar("ws")), GUnquote(GString("call_2"))), GSeq(GSeq(GSeq(GString(".."), GVar("ws")), GVar("exp")), GUnquote(GString("range_2")))), GRule("onechar_", GChoice(GSeq(GVar("backslash"), GChoice(GSeq(GSeq(GSeq(GSeq(GString("u"), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GVar("hexdigit")), GChoice(GSeq(GSeq(GString("x"), GVar("hexdigit")), GVar("hexdigit")), GVar("escapedchar_")))), GSeq(GSeq(GNegate(GString("\"")), GNegate(GVar("backslash"))), GVar("anychar"))), GRule("letterOrDigit", GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GString("_"), GRange(48, 57)))), GRule("lambdaargs", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GVar("idbind"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("idbind")), GUnquote(GString("cons"))))))), GRule("lambda", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("backslash"), GVar("ws")), GVar("lambdaargs")), GString("->")), GVar("ws")), GVar("exp")), GString("")), GUnquote(GString("lambda_2"))), GRule("int", GSeq(GSeq(GUnquote(GVar("digits")), GVar("ws")), GUnquote(GString("s2i"))), GRule("idbind", GChoice(GVar("id"), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))), GRule("id", GSeq(GUnquote(GSeq(GChoice(GRange(97, 122), GChoice(GRange(65, 90), GString("_"))), GStar(GVar("letterOrDigit")))), GVar("ws")), GRule("hexdigit", GChoice(GRange(48, 57), GChoice(GRange(97, 102), GRange(65, 70))), GRule("expsemi", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(";"), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(";"), GVar("ws")))))), GRule("exps", GSeq(GUnquote(GString("nil")), GOpt(GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))))), GRule("exp9", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GUnquote(GString("brace_1"))), GVar("exp10")), GRule("exp8", GChoice(GSeq(GSeq(GSeq(GString("!"), GVar("ws")), GVar("exp8")), GUnquote(GString("not_1"))), GChoice(GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp8")), GUnquote(GString("negate_1"))), GChoice(GVar("lambda"), GChoice(GSeq(GVar("exp9"), GStar(GVar("postfix"))), GVar("exp9"))))), GRule("exp7", GSeq(GVar("exp8"), GStar(GChoice(GSeq(GSeq(GSeq(GString("*"), GVar("ws")), GVar("exp7")), GUnquote(GString("mul_2"))), GChoice(GSeq(GSeq(GSeq(GString("/"), GVar("ws")), GVar("exp7")), GUnquote(GString("div_2"))), GSeq(GSeq(GSeq(GString("%"), GVar("ws")), GVar("exp7")), GUnquote(GString("mod_2"))))))), GRule("exp6", GSeq(GVar("exp7"), GStar(GChoice(GSeq(GSeq(GSeq(GString("+"), GVar("ws")), GVar("exp7")), GUnquote(GString("add_2"))), GSeq(GSeq(GSeq(GString("-"), GVar("ws")), GVar("exp7")), GUnquote(GString("sub_2")))))), GRule("exp5", GSeq(GVar("exp6"), GOpt(GChoice(GSeq(GSeq(GSeq(GString("<="), GVar("ws")), GVar("exp5")), GUnquote(GString("less_equal_2"))), GChoice(GSeq(GSeq(GSeq(GString("<"), GVar("ws")), GVar("exp5")), GUnquote(GString("less_2"))), GChoice(GSeq(GSeq(GSeq(GString(">="), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_equal_2"))), GSeq(GSeq(GSeq(GString(">"), GVar("ws")), GVar("exp5")), GUnquote(GString("greater_2")))))))), GRule("exp4", GSeq(GVar("exp5"), GChoice(GSeq(GSeq(GSeq(GString("=="), GVar("ws")), GVar("exp4")), GUnquote(GString("equal_2"))), GOpt(GSeq(GSeq(GSeq(GString("!="), GVar("ws")), GVar("exp4")), GUnquote(GString("not_equal_2")))))), GRule("exp3", GSeq(GVar("exp4"), GOpt(GSeq(GSeq(GSeq(GString("&&"), GVar("ws")), GVar("exp3")), GUnquote(GString("and_2"))))), GRule("exp2", GSeq(GVar("exp3"), GOpt(GSeq(GSeq(GSeq(GString("||"), GVar("ws")), GVar("exp2")), GUnquote(GString("or_2"))))), GRule("exp10", GChoice(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GVar("atom")), GRule("exp1", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("let_3"))), GVar("exp2")), GRule("exp", GChoice(GSeq(GSeq(GString("@"), GVar("exp")), GUnquote(GString("quote_1"))), GVar("exp1")), GRule("escapedchar_", GChoice(GVar("backslash"), GChoice(GString("\""), GChoice(GString("n"), GChoice(GString("t"), GString("r"))))), GRule("double", GChoice(GSeq(GSeq(GUnquote(GSeq(GSeq(GSeq(GVar("digits"), GString(".")), GNegate(GString("."))), GOpt(GVar("digits")))), GVar("ws")), GUnquote(GString("s2d"))), GSeq(GSeq(GUnquote(GSeq(GString("."), GVar("digits"))), GVar("ws")), GUnquote(GString("s2d")))), GRule("digits", GPlus(GRange(48, 57)), GRule("cs", GChoice(GString(" "), GChoice(GString("\t"), GChoice(GString("\n"), GChoice(GSeq(GSeq(GString("//"), GStar(GSeq(GNegate(GString("\n")), GVar("anychar")))), GString("\n")), GChoice(GSeq(GSeq(GString("/*"), GStar(GSeq(GNegate(GString("*/")), GVar("anychar")))), GString("*/")), GString("\u000d")))))), GRule("backslash", GString("\\"), GRule("atom", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("if"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("exp")), GVar("exp")), GString("else")), GVar("ws")), GVar("exp")), GUnquote(GString("ifelse_3"))), GChoice(GSeq(GSeq(GSeq(GString("true"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("true"))), GVar("ws")), GChoice(GSeq(GSeq(GSeq(GString("false"), GNegate(GVar("letterOrDigit"))), GUnquote(GString("false"))), GVar("ws")), GChoice(GSeq(GVar("id"), GUnquote(GString("var_1"))), GChoice(GSeq(GVar("string"), GUnquote(GString("string_1"))), GChoice(GSeq(GVar("double"), GUnquote(GString("double_1"))), GChoice(GSeq(GVar("int"), GUnquote(GString("int_1"))), GSeq(GSeq(GSeq(GString("$"), GVar("ws")), GVar("id")), GUnquote(GString("bind_1")))))))))), GRule("anychar", GRange(0, 65535), GSeq(GVar("ws"), GVar("exp"))))))))))))))))))))))))))))))))))))]
	})
}

dslGrammarExtensionPairs() -> [Pair<string, Tree<string, GTerm>>] {
	onlyOnce(dslGrammarExtensionsM, \ -> {
		[Pair("array", TreeNode("postfix", GChoice(GVar("postfix"), GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exp")), GString("]")), GVar("ws")), GUnquote(GString("array_index_2")))), TreeNode("atom", GChoice(GVar("atom"), GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exps")), GString("]")), GVar("ws")), GUnquote(GString("array_1")))), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), Pair("assign_operators", TreeNode("assign_mod", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("%=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("letmod_3"))), TreeNode("assign_div", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("/=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("letdiv_3"))), TreeNode("assign_add", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("+=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("letadd_3"))), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("assign_sub", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("-=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("letsub_3"))), TreeNode("assign_mul", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GString("*=")), GVar("ws")), GVar("exp")), GString(";")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("letmul_3"))), TreeEmpty(), TreeEmpty(), 1), TreeNode("atom", GChoice(GVar("assign_add"), GChoice(GVar("assign_sub"), GChoice(GVar("assign_mul"), GChoice(GVar("assign_div"), GChoice(GVar("assign_mod"), GVar("atom")))))), TreeEmpty(), TreeEmpty(), 1), 2), 3)), Pair("datafun", TreeNode("datafun_exp", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("idbind"), GVar("ws")), GString("in")), GVar("ws")), GVar("exp")), GUnquote(GString("datafun_in_2"))), GSeq(GVar("exp"), GUnquote(GString("datafun_filter_1")))), TreeNode("datafun", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("["), GVar("ws")), GVar("exp")), GString("|")), GVar("ws")), GVar("datafun_exps")), GString("]")), GVar("ws")), GUnquote(GString("datafun_2"))), TreeNode("atom", GChoice(GVar("atom"), GVar("datafun")), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("datafun_exps", GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("datafun_exp")), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("datafun_exp")), GUnquote(GString("cons"))))), TreeEmpty(), TreeEmpty(), 1), 3)), Pair("default_args", TreeNode("fundef_arg", GChoice(GSeq(GSeq(GSeq(GSeq(GVar("id"), GString("=")), GVar("ws")), GVar("exp")), GUnquote(GString("funargdef_2"))), GSeq(GVar("id"), GUnquote(GString("funarg_1")))), TreeNode("atom", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("id"), GString("(")), GVar("ws")), GVar("fundef_args")), GString(")")), GVar("ws")), GString("{")), GVar("ws")), GVar("exp")), GString("}")), GVar("ws")), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("function_4"))), GVar("atom")), TreeEmpty(), TreeEmpty(), 1), TreeNode("fundef_args", GChoice(GSeq(GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("fundef_arg")), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("fundef_arg")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))), GUnquote(GString("nil"))), TreeEmpty(), TreeEmpty(), 1), 2)), Pair("dot", TreeNode("mexps", GSeq(GSeq(GSeq(GVar("exp"), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("exp")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))), TreeEmpty(), TreeNode("postfix", GChoice(GVar("postfix"), GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("."), GVar("ws")), GUnquote(GString("nil"))), GUnquote(GString("swap"))), GUnquote(GString("cons"))), GVar("id")), GUnquote(GString("var_1"))), GUnquote(GString("swap"))), GOpt(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("mexps")), GString(")")), GVar("ws")))), GUnquote(GString("call_2")))), TreeEmpty(), TreeEmpty(), 1), 2)), Pair("exponentiation", TreeNode("postfix", GChoice(GVar("postfix"), GSeq(GSeq(GSeq(GString("^"), GVar("ws")), GVar("exp")), GUnquote(GString("exponent_2")))), TreeEmpty(), TreeEmpty(), 1)), Pair("for", TreeNode("atom", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("for"), GVar("ws")), GVar("idbind")), GString("in")), GVar("ws")), GVar("exp")), GVar("exp")), GUnquote(GString("for_3"))), GVar("atom")), TreeEmpty(), TreeEmpty(), 1)), Pair("named_args", TreeNode("funargs", GChoice(GSeq(GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("funarg")), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("funarg")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))), GUnquote(GString("nil"))), TreeNode("funarg", GSeq(GSeq(GSeq(GSeq(GVar("id"), GString(":")), GVar("ws")), GVar("exp")), GUnquote(GString("record_field_2"))), TreeNode("atom", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GVar("id"), GString("(")), GVar("ws")), GVar("fundef_args")), GString(")")), GVar("ws")), GString("{")), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GOpt(GSeq(GString(";"), GVar("ws")))), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("function_4"))), GVar("atom")), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("fundef_args", GChoice(GSeq(GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("fundef_arg")), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("fundef_arg")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))), GUnquote(GString("nil"))), TreeNode("fundef_arg", GChoice(GSeq(GSeq(GSeq(GSeq(GVar("id"), GString("=")), GVar("ws")), GVar("exp")), GUnquote(GString("funargdef_2"))), GSeq(GVar("id"), GUnquote(GString("funarg_1")))), TreeEmpty(), TreeEmpty(), 1), TreeNode("postfix", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("funargs")), GString(")")), GVar("ws")), GUnquote(GString("named_call_2"))), GVar("postfix")), TreeEmpty(), TreeEmpty(), 1), 2), 3)), Pair("openscad", TreeNode("include", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("include"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("filename")), GString(";")), GVar("ws")), GUnquote(GString("include_1"))), TreeNode("filename", GSeq(GSeq(GSeq(GString("<"), GUnquote(GPlus(GSeq(GNegate(GString(">")), GVar("anychar"))))), GString(">")), GVar("ws")), TreeEmpty(), TreeEmpty(), 1), TreeNode("statement", GChoice(GVar("include"), GChoice(GVar("use"), GChoice(GVar("assignment"), GChoice(GVar("named_function_definition"), GChoice(GVar("named_module_definition"), GVar("module_instantiation")))))), TreeNode("package", GSeq(GSeq(GSeq(GVar("ws"), GUnquote(GString("nil"))), GPlus(GSeq(GVar("statement"), GUnquote(GString("cons"))))), GUnquote(GString("package_1"))), TreeEmpty(), TreeEmpty(), 1), TreeNode("use", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("use"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("filename")), GString(";")), GVar("ws")), GUnquote(GString("use_1"))), TreeEmpty(), TreeEmpty(), 1), 2), 3)), Pair("quotestring", TreeNode("atom", GChoice(GVar("atom"), GSeq(GSeq(GSeq(GString("<<"), GUnquote(GStar(GSeq(GNegate(GString(">>")), GVar("anychar"))))), GString(">>")), GVar("ws"))), TreeEmpty(), TreeEmpty(), 1)), Pair("range", TreeNode("postfix", GChoice(GVar("postfix"), GSeq(GSeq(GSeq(GString(".."), GVar("ws")), GVar("exp")), GUnquote(GString("range_2")))), TreeEmpty(), TreeEmpty(), 1)), Pair("records", TreeNode("recordFields", GChoice(GSeq(GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("recordField")), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("recordField")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))), GUnquote(GString("nil"))), TreeNode("recordField", GSeq(GSeq(GSeq(GSeq(GVar("id"), GString(":")), GVar("ws")), GVar("exp")), GUnquote(GString("record_field_2"))), TreeNode("atom", GChoice(GVar("atom"), GSeq(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("ws")), GVar("recordFields")), GString("}")), GVar("ws")), GUnquote(GString("record_1")))), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("recordTypeFields", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("recordTypeField")), GUnquote(GString("cons"))), GString(",")), GVar("ws")), GVar("recordTypeField")), GUnquote(GString("cons"))), GOpt(GSeq(GString(","), GVar("ws")))), GUnquote(GString("nil"))), TreeNode("recordTypeField", GSeq(GSeq(GSeq(GSeq(GVar("id"), GString(":")), GVar("ws")), GVar("type")), GUnquote(GString("record_field_type_2"))), TreeEmpty(), TreeEmpty(), 1), TreeNode("type", GChoice(GSeq(GSeq(GSeq(GSeq(GString("{"), GVar("recordTypeFields")), GString("}")), GVar("ws")), GUnquote(GString("record_type_2"))), GVar("type")), TreeEmpty(), TreeEmpty(), 1), 2), 3)), Pair("structs", TreeNode("struct_arg", GVar("id"), TreeNode("atom", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("struct"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GVar("id")), GString("(")), GVar("ws")), GVar("struct_args")), GString(")")), GVar("ws")), GOpt(GSeq(GString(";"), GVar("ws")))), GVar("expsemi")), GUnquote(GString("brace_1"))), GUnquote(GString("struct_3"))), GVar("atom")), TreeEmpty(), TreeEmpty(), 1), TreeNode("struct_args", GChoice(GSeq(GSeq(GSeq(GSeq(GUnquote(GString("nil")), GVar("struct_arg")), GUnquote(GString("cons"))), GStar(GSeq(GSeq(GSeq(GString(","), GVar("ws")), GVar("struct_arg")), GUnquote(GString("cons"))))), GOpt(GSeq(GString(","), GVar("ws")))), GUnquote(GString("nil"))), TreeEmpty(), TreeEmpty(), 1), 2)), Pair("ternary_if", TreeNode("ternary", GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("?"), GVar("ws")), GVar("exp")), GString(":")), GVar("ws")), GVar("exp")), GUnquote(GString("ternary_3"))), TreeNode("postfix", GChoice(GVar("postfix"), GVar("ternary")), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), Pair("tuples", TreeNode("atom", GChoice(GVar("atom"), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GString(")")), GVar("ws")), GUnquote(GString("nil"))), GUnquote(GString("tuple_1"))), GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GUnquote(GString("nil"))), GVar("exp")), GString(",")), GVar("ws")), GUnquote(GString("cons"))), GString(")")), GUnquote(GString("tuple_1"))), GSeq(GSeq(GSeq(GSeq(GString("("), GVar("ws")), GVar("exps")), GString(")")), GUnquote(GString("tuple_1")))))), TreeEmpty(), TreeEmpty(), 1)), Pair("while", TreeNode("atom", GChoice(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GSeq(GString("while"), GNegate(GVar("letterOrDigit"))), GVar("ws")), GString("(")), GVar("ws")), GVar("exp")), GString(")")), GVar("ws")), GString("{")), GVar("ws")), GVar("expsemi")), GString("}")), GVar("ws")), GUnquote(GString("brace_1"))), GUnquote(GString("while_2"))), GVar("atom")), TreeEmpty(), TreeEmpty(), 1))]
	})
}

dslLoweringList() -> List<DslLoweringArgs> {
	onlyOnce(dslLoweringM, \ -> {
		Cons(DslLoweringArgs("desugar", "for", "ast", "lambda", ";", "\n\t\tfor($id, $e1, $e2) => @iter($e1, \\$id -> $e2);\n\t"), Cons(DslLoweringArgs("desugar", "records", "ast", "lambda+array", ";;", "\n\t\t\trecord($fields) => \n\t\t\t\tfold(fields, record(fields), \\acc, f -> {\n\t\t\t\t\tname = nodeChild(f, 0);\n\t\t\t\t\t// TODO: We should lift this directly into the environment so\n\t\t\t\t\t// the helpers become accessible in code like \"a = { foo : 1}; foo(a)\"\n\t\t\t\t\tlet(name, lambda([\"r\"], call(var(\"field\"), [r, name])), acc)\n\t\t\t\t}) ;;\n\t\t"), Cons(DslLoweringArgs("desugar", "datafun", "lambda+datafun", "lambda", ";", " \n\t\t\t// 1-d loop\n\t\t\t[ $e | $a in $c ] \t\t\t\t\t=> @map($c, \\$a -> $e);\n\t\t\t[ $e | $a in $c, $f ] \t\t\t\t=> @fold($c, nil(), \\acc, $a -> if ($f) cons($e, acc) else acc);\n\n\t\t\t// 2-d loops\n\t\t\t[ $e | $a in $c, $b in $d ] \t\t=> @fold($c, nil(), \\acc, $a -> fold($d, acc, \\acc2, $b -> cons($e, acc2)));\n\t\t\t[ $e | $a in $c, $b in $d, $f ] \t=> @fold($c, nil(), \\acc, $a -> \n\t\t\t\t\t\t\t\t\t\t\t\t\tfold($d, acc, \\acc2, $b -> if ($f) cons($e, acc2) else acc2)\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t[ $e | $a in $c, $f, $b in $d ] \t=> @fold($c, nil(), \\acc, $a -> \n\t\t\t\t\t\t\t\t\t\t\t\t\tif ($f) fold($d, acc, \\acc2, $b -> cons($e, acc2)) else acc\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t[ $e | $a in $c, $f, $b in $d, $g ] => @fold($c, nil(), \\acc, $a -> \n\t\t\t\t\t\t\t\t\t\t\t\t\tif ($f) fold($d, acc, \\acc2, $b -> if ($g) cons($e, acc2) else acc2) else acc\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t"), Cons(DslLoweringArgs("desugar", "exponentiation", "ast", "lambda", ";", "\n\t\t\texponent($x, $y) => @power($x, $y);\n\t\t"), Cons(DslLoweringArgs("desugar", "tuples", "ast", "lambda", ";", "\n\t\t// We strip the tuple\n\t\ttuple($l) => reverse(l);\n\t"), Cons(DslLoweringArgs("desugar", "structs", "ast", "lambda", ";;", "\n\t\tstruct($id, $fields, $scope) => {\n\t\t\tlet(id, lambda(fields,\n\t\t\t\trecord(\n\t\t\t\t\tfold(fields, nil(), \\acc, f -> {\n\t\t\t\t\t\tcons(record_field(f, var(f)), acc)\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t), scope) };;\n\t"), Cons(DslLoweringArgs("desugar", "named_args", "ast", "lambda+array", ";;", "\n\t\tfunction($id, $args, $body, $scope) => {\n\t\t\ttmp = \"tmp2\"; // TODO: Make temporary\n\t\t\thasDefVal = \\node -> { nodeName(node) == \"funargdef\" };\n\n\t\t\tcallargs = fold(args, nil(), \\acc, arg -> {\n\t\t\t\targName = nodeChild(arg, 0);\n\t\t\t\tdefVal = nodeChild(arg, 1);\n\t\t\t\tcons(if (hasDefVal(arg)) {\n\t\t\t\t\t// a = if (hasField(tmp, \"a\")) a(tmp) else defVal;\n\t\t\t\t\thas = call(var(\"hasField\"), [var(tmp), argName]);\n\t\t\t\t\tifelse(\n\t\t\t\t\t\thas,\n\t\t\t\t\t\tcall(var(argName), [var(tmp)]), \n\t\t\t\t\t\tdefVal\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// a = a(tmp);\n\t\t\t\t\tcall(var(argName), [var(tmp)]);\n\t\t\t\t}, acc)\n\t\t\t});\n\t\t\trevargs = reverse(callargs);\n\t\t\tnewbody = call(var(id), revargs);\n\t\t\tlet(id, lambda(map(args, \\a -> nodeChild(a, 0)), body),\n\t\t\t\tlet(id, lambda(cons(tmp, nil()), newbody), scope));\n\t\t\t;\n\t\t} ;;\n\n\t\tnamed_call($fn, $args) => {\n\t\t\tcall(fn, [record(args)])\n\t\t} ;;\n\t"), Cons(DslLoweringArgs("desugar", "while", "ast", "lambda", ";;", "\n\t\twhile($cond, $b) => {\n\t\t\t// TODO: We need a general mechanism for this\n\t\t\ttmpId = \"tmp\";\n\t\t\twhileCall = call(var(tmpId), nil());\n\t\t\tlet(tmpId, lambda(nil(), ifelse(cond, brace(\n\t\t\t\tcons(\n\t\t\t\t\tb,\n\t\t\t\t\tcons(whileCall, nil())\n\t\t\t\t)\n\t\t\t), nil())), whileCall)\n\t\t} ;;\n\t"), Cons(DslLoweringArgs("desugar", "array", "ast", "lambda", ";", "\n\t\t// [ exps ] => exps - given the list representation is reversed\n\t\tarray($e) => reverse(e);\n\t\t// a[i] => listAt(a, i);\n\t\tarray_index($a, $i) => @listAt($a, $i);\n\t"), Cons(DslLoweringArgs("compile", "concert", "ast", "ast", ";;", "\n\t\tvar($id) => CVar($id, ConcertPos(\"\", 0, 0));;\t\t\n\n\t\tadd($a, $b) => CCallBuiltin(\"+\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tmul($a, $b) => CCallBuiltin(\"*\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tsub($a, $b) => CCallBuiltin(\"-\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tdiv($a, $b) => CCallBuiltin(\"/\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tmod($a, $b) => CCallBuiltin(\"MOD\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tnegate($a)\t=> CCallBuiltin(\"-\", [$a], ConcertPos(\"\", 0, 0));;\n\n\t\tand($a, $b)\t=> CCallBuiltin(\"&&\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tor($a, $b)\t=> CCallBuiltin(\"||\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tnot($a)\t\t=> CCallBuiltin(\"not\", [$a], ConcertPos(\"\", 0, 0));;\n\n\t\tless($a, $b)\t\t\t=> CCallBuiltin(\"<\", [$a,$b], ConcertPos(\"\", 0, 0));;\t\t\n\t\tgreater($a, $b) \t\t=> CCallBuiltin(\">\", [$a,$b], ConcertPos(\"\", 0, 0));;\t\t\n\t\tless_equal($a, $b) \t\t=> CCallBuiltin(\"<=\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tgreater_equal($a, $b) \t=> CCallBuiltin(\">=\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tequal($a, $b) \t\t\t=> CCallBuiltin(\"==\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\tnot_equal($a, $b) \t\t=> CCallBuiltin(\"!=\", [$a,$b], ConcertPos(\"\", 0, 0));;\n\t\t\n\t\ttrue => CBool(true);;\n\t\tfalse => CBool(false);;\n\n\t\tint($i)\t\t=> CInt($i);;\n\t\tdouble($d)\t=> CDouble($d);;\n\t\tstring($s)\t=> CString($s);;\n\n\t\tlet($name, $value, $body) => CLet($name, $value, $body, ConcertPos(\"\", 0, 0));;\n\t\tbrace($s) => CSequence($s);;\n\n\t\tlambda($args, $body) => CLambda($args, $body);;\n\n\t\tbind($e) => CUnquote($e);;\n\t\tquote($e) => CQuote($e);;\n\n\t\tcall(CVar(\"nil\", ConcertPos(\"\", 0, 0)), $children) => CArray(CArrayView(0, 0), []);;\n\t\tcall(CVar(\"cons\", ConcertPos(\"\", 0, 0)), [$value, $array]) => CCall(\n\t\t\tCVar(\"arrayPush\", ConcertPos(\"\", 0, 0)), \n\t\t\t[\n\t\t\t\t$array,\n\t\t\t\t$value\n\t\t\t],\n\t\t\tConcertPos(\"\", 0, 0)\n\t\t);;\n\t\tcall($fn, $children) => CCall($fn, $children, ConcertPos(\"\", 0, 0));;\t\n\n\t\tifelse($cond, $then, $else) => CIf($cond, $then, $else, ConcertPos(\"\", 0, 0));;\n\t"), Cons(DslLoweringArgs("desugar", "range", "lambda+range", "lambda", ";", "\n\t\t$e1 .. $e2 => @range($e1, $e2);\n\t"), Cons(DslLoweringArgs("desugar", "ternary_if", "ast", "lambda", ";", "\n\t\tternary($cond, $pos, $neg) => @if ($cond) $pos else $neg;\n\t"), Cons(DslLoweringArgs("desugar", "assign_operators", "ast", "ast", ";", "\n\t\tletadd($e1, $e2, $e3) => let($e1, add(var($e1), $e2), $e3);\n\t\tletsub($e1, $e2, $e3) => let($e1, sub(var($e1), $e2), $e3);\n\t\tletmul($e1, $e2, $e3) => let($e1, mul(var($e1), $e2), $e3);\n\t\tletdiv($e1, $e2, $e3) => let($e1, div(var($e1), $e2), $e3);\n\t\tletmod($e1, $e2, $e3) => let($e1, mod(var($e1), $e2), $e3);\n\t"), Cons(DslLoweringArgs("desugar", "default_args", "ast", "lambda", ";;", "\n\t\tfunction($id, $args, $body, $scope) => {\n\t\t\tnargs = length(args);\n\t\t\targIds = map(args, \\a -> nodeChild(a, 0));\n\n\t\t\thasDefVal = \\node -> { nodeName(node) == \"funargdef\" };\n\n\t\t\thasAllFollowingDefs = \\i -> {\n\t\t\t\tif (i < nargs) hasDefVal(listAt(args, i)) && hasAllFollowingDefs(i + 1)\n\t\t\t\telse true\n\t\t\t};\n\n\t\t\t// Takes I elements from the head of the list and add to acc\n\t\t\ttakeUnto = \\acc, list, i -> {\n\t\t\t\tif (i > 0) takeUnto(cons(head(list), acc), tail(list), i - 1) else acc\n\t\t\t};\n\n\t\t\t// Takes I elements from the head of the list\n\t\t\ttake = \\list, i -> {\n\t\t\t\ttakeUnto(nil(), list, i)\n\t\t\t};\n\n\t\t\t// Removes I element from the head\n\t\t\tpeel = \\list, i -> {\n\t\t\t\tif (i <= 0) list\n\t\t\t\telse peel(tail(list), i - 1)\n\t\t\t};\n\t\t\t// Keep argno arguments in the lambda\n\t\t\t// For the rest, add defaults\n\t\t\tbuildLambda = \\acc, argno -> {\n\t\t\t\tdefArgCount = nargs - argno;\n\t\t\t\t// println(\"Building a shortcut from \" + argno + \" with \" + defArgCount + \" defaults\");\n\t\t\t\tfargs = peel(argIds, defArgCount);\n\t\t\t\tpassArgs = map(fargs, \\a -> var(a));\n\t\t\t\tdefVals = map(args, \\a-> nodeChild(a, 1));\n\t\t\t\tcallargs = takeUnto(passArgs, defVals, defArgCount);\n\t\t\t\tdefcall = call(var(id), callargs);\n\t\t\t\tlet(id, lambda(fargs, defcall), acc)\n\t\t\t};\n\n\t\t\tdefArg = range(0, nargs - 1);\n\t\t\thelpers = fold(defArg, scope, \\acc, argno -> {\n\t\t\t\tif (hasAllFollowingDefs(argno)) {\n\t\t\t\t\tbuildLambda(acc, argno)\n\t\t\t\t} else acc;\n\t\t\t});\n\t\t\tmain = let(id, lambda(argIds, body), helpers);\n\t\t\tmain\n\t\t} ;;\n\t"), EmptyList()))))))))))))))
	})
}

dslLanguageRuntimePairs() -> [Pair<DslLanguage, Tree<string, DslAst>>] {
	onlyOnce(dslRuntimeM, \ -> {
		[Pair(DslLanguage("array"), TreeNode("listAt", DslNode("lambda", [DslList(Cons(DslString("i"), Cons(DslString("xs"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("less_equal", [DslNode("var", [DslString("i")], 0), DslNode("int", [DslInt(0)], 0)], 0), DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("xs")], 0), EmptyList()))], 0), DslNode("call", [DslNode("var", [DslString("listAt")], 0), DslList(Cons(DslNode("sub", [DslNode("var", [DslString("i")], 0), DslNode("int", [DslInt(1)], 0)], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("xs")], 0), EmptyList()))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeNode("reverse", DslNode("lambda", [DslList(Cons(DslString("li"), EmptyList())), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("doReverse"), DslNode("lambda", [DslList(Cons(DslString("l"), Cons(DslString("acc"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("l")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("acc")], 0), DslNode("call", [DslNode("var", [DslString("doReverse")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("l")], 0), EmptyList()))], 0), Cons(DslNode("call", [DslNode("var", [DslString("cons")], 0), DslList(Cons(DslNode("var", [DslString("acc")], 0), Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("l")], 0), EmptyList()))], 0), EmptyList())))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("doReverse")], 0), DslList(Cons(DslNode("var", [DslString("li")], 0), Cons(DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0), EmptyList())))], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), 2)), Pair(DslLanguage("datafun"), TreeNode("map", DslNode("lambda", [DslList(Cons(DslString("fn"), Cons(DslString("c"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("c")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("c")], 0), DslNode("call", [DslNode("var", [DslString("cons")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("map")], 0), DslList(Cons(DslNode("var", [DslString("fn")], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), EmptyList())))], 0), Cons(DslNode("call", [DslNode("var", [DslString("fn")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), EmptyList()))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), TreeNode("fold", DslNode("lambda", [DslList(Cons(DslString("fn"), Cons(DslString("acc"), Cons(DslString("c"), EmptyList())))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("c")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("acc")], 0), DslNode("call", [DslNode("var", [DslString("fold")], 0), DslList(Cons(DslNode("var", [DslString("fn")], 0), Cons(DslNode("call", [DslNode("var", [DslString("fn")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), Cons(DslNode("var", [DslString("acc")], 0), EmptyList())))], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), EmptyList()))))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2)), Pair(DslLanguage("exponentiation"), TreeNode("listAt", DslNode("lambda", [DslList(Cons(DslString("i"), Cons(DslString("xs"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("less_equal", [DslNode("var", [DslString("i")], 0), DslNode("int", [DslInt(0)], 0)], 0), DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("xs")], 0), EmptyList()))], 0), DslNode("call", [DslNode("var", [DslString("listAt")], 0), DslList(Cons(DslNode("sub", [DslNode("var", [DslString("i")], 0), DslNode("int", [DslInt(1)], 0)], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("xs")], 0), EmptyList()))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), TreeNode("iter", DslNode("lambda", [DslList(Cons(DslString("fn"), Cons(DslString("li"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("li")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("brace", [DslList(EmptyList())], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("iter")], 0), DslList(Cons(DslNode("var", [DslString("fn")], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("li")], 0), EmptyList()))], 0), EmptyList())))], 0), Cons(DslNode("call", [DslNode("var", [DslString("fn")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("li")], 0), EmptyList()))], 0), EmptyList()))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), TreeNode("fold", DslNode("lambda", [DslList(Cons(DslString("fn"), Cons(DslString("acc"), Cons(DslString("c"), EmptyList())))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("c")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("acc")], 0), DslNode("call", [DslNode("var", [DslString("fold")], 0), DslList(Cons(DslNode("var", [DslString("fn")], 0), Cons(DslNode("call", [DslNode("var", [DslString("fn")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), Cons(DslNode("var", [DslString("acc")], 0), EmptyList())))], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), EmptyList()))))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), TreeNode("length", DslNode("lambda", [DslList(Cons(DslString("xs"), EmptyList())), DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("xs")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("int", [DslInt(0)], 0), DslNode("add", [DslNode("int", [DslInt(1)], 0), DslNode("call", [DslNode("var", [DslString("length")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("xs")], 0), EmptyList()))], 0), EmptyList()))], 0)], 0)], 0)], 0), TreeEmpty(), TreeEmpty(), 1), 2), TreeNode("power", DslNode("lambda", [DslList(Cons(DslString("y"), Cons(DslString("x"), EmptyList()))), DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("y")], 0), DslNode("int", [DslInt(0)], 0)], 0), DslNode("int", [DslInt(1)], 0), DslNode("mul", [DslNode("var", [DslString("x")], 0), DslNode("call", [DslNode("var", [DslString("power")], 0), DslList(Cons(DslNode("sub", [DslNode("var", [DslString("y")], 0), DslNode("int", [DslInt(1)], 0)], 0), Cons(DslNode("var", [DslString("x")], 0), EmptyList())))], 0)], 0)], 0)], 0), TreeNode("map", DslNode("lambda", [DslList(Cons(DslString("fn"), Cons(DslString("c"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("c")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("c")], 0), DslNode("call", [DslNode("var", [DslString("cons")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("map")], 0), DslList(Cons(DslNode("var", [DslString("fn")], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), EmptyList())))], 0), Cons(DslNode("call", [DslNode("var", [DslString("fn")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), EmptyList()))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), TreeNode("range", DslNode("lambda", [DslList(Cons(DslString("to"), Cons(DslString("from"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("doRange"), DslNode("lambda", [DslList(Cons(DslString("to"), Cons(DslString("from"), Cons(DslString("acc"), EmptyList())))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("less_equal", [DslNode("var", [DslString("from")], 0), DslNode("var", [DslString("to")], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("cons")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("doRange")], 0), DslList(Cons(DslNode("var", [DslString("to")], 0), Cons(DslNode("add", [DslNode("var", [DslString("from")], 0), DslNode("int", [DslInt(1)], 0)], 0), Cons(DslNode("var", [DslString("acc")], 0), EmptyList()))))], 0), Cons(DslNode("var", [DslString("from")], 0), EmptyList())))], 0), EmptyList()))], 0), DslNode("var", [DslString("acc")], 0)], 0), EmptyList()))], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("doRange")], 0), DslList(Cons(DslNode("var", [DslString("to")], 0), Cons(DslNode("var", [DslString("from")], 0), Cons(DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0), EmptyList()))))], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeNode("reverse", DslNode("lambda", [DslList(Cons(DslString("li"), EmptyList())), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("doReverse"), DslNode("lambda", [DslList(Cons(DslString("l"), Cons(DslString("acc"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("l")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("acc")], 0), DslNode("call", [DslNode("var", [DslString("doReverse")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("l")], 0), EmptyList()))], 0), Cons(DslNode("call", [DslNode("var", [DslString("cons")], 0), DslList(Cons(DslNode("var", [DslString("acc")], 0), Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("l")], 0), EmptyList()))], 0), EmptyList())))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("doReverse")], 0), DslList(Cons(DslNode("var", [DslString("li")], 0), Cons(DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0), EmptyList())))], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), 2), 3), 4)), Pair(DslLanguage("for"), TreeNode("iter", DslNode("lambda", [DslList(Cons(DslString("fn"), Cons(DslString("li"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("li")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("brace", [DslList(EmptyList())], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("iter")], 0), DslList(Cons(DslNode("var", [DslString("fn")], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("li")], 0), EmptyList()))], 0), EmptyList())))], 0), Cons(DslNode("call", [DslNode("var", [DslString("fn")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("li")], 0), EmptyList()))], 0), EmptyList()))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1)), Pair(DslLanguage("range"), TreeNode("range", DslNode("lambda", [DslList(Cons(DslString("to"), Cons(DslString("from"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("doRange"), DslNode("lambda", [DslList(Cons(DslString("to"), Cons(DslString("from"), Cons(DslString("acc"), EmptyList())))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("less_equal", [DslNode("var", [DslString("from")], 0), DslNode("var", [DslString("to")], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("cons")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("doRange")], 0), DslList(Cons(DslNode("var", [DslString("to")], 0), Cons(DslNode("add", [DslNode("var", [DslString("from")], 0), DslNode("int", [DslInt(1)], 0)], 0), Cons(DslNode("var", [DslString("acc")], 0), EmptyList()))))], 0), Cons(DslNode("var", [DslString("from")], 0), EmptyList())))], 0), EmptyList()))], 0), DslNode("var", [DslString("acc")], 0)], 0), EmptyList()))], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("doRange")], 0), DslList(Cons(DslNode("var", [DslString("to")], 0), Cons(DslNode("var", [DslString("from")], 0), Cons(DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0), EmptyList()))))], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1)), Pair(DslLanguage("records"), TreeNode("fold", DslNode("lambda", [DslList(Cons(DslString("fn"), Cons(DslString("acc"), Cons(DslString("c"), EmptyList())))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("c")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("acc")], 0), DslNode("call", [DslNode("var", [DslString("fold")], 0), DslList(Cons(DslNode("var", [DslString("fn")], 0), Cons(DslNode("call", [DslNode("var", [DslString("fn")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), Cons(DslNode("var", [DslString("acc")], 0), EmptyList())))], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("c")], 0), EmptyList()))], 0), EmptyList()))))], 0)], 0), EmptyList()))], 0)], 0), TreeNode("field", DslNode("lambda", [DslList(Cons(DslString("fieldname"), Cons(DslString("record"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("fields"), DslNode("call", [DslNode("var", [DslString("nodeChild")], 0), DslList(Cons(DslNode("int", [DslInt(0)], 0), Cons(DslNode("var", [DslString("record")], 0), EmptyList())))], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("fold")], 0), DslList(Cons(DslNode("lambda", [DslList(Cons(DslString("f"), Cons(DslString("acc"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("name"), DslNode("call", [DslNode("var", [DslString("nodeChild")], 0), DslList(Cons(DslNode("int", [DslInt(0)], 0), Cons(DslNode("var", [DslString("f")], 0), EmptyList())))], 0), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("name")], 0), DslNode("var", [DslString("fieldname")], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("nodeChild")], 0), DslList(Cons(DslNode("int", [DslInt(1)], 0), Cons(DslNode("var", [DslString("f")], 0), EmptyList())))], 0), EmptyList()))], 0), DslNode("var", [DslString("acc")], 0)], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), Cons(DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0), Cons(DslNode("var", [DslString("fields")], 0), EmptyList()))))], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), TreeNode("hasField", DslNode("lambda", [DslList(Cons(DslString("fieldname"), Cons(DslString("record"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("fields"), DslNode("call", [DslNode("var", [DslString("nodeChild")], 0), DslList(Cons(DslNode("int", [DslInt(0)], 0), Cons(DslNode("var", [DslString("record")], 0), EmptyList())))], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("fold")], 0), DslList(Cons(DslNode("lambda", [DslList(Cons(DslString("f"), Cons(DslString("acc"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("or", [DslNode("var", [DslString("acc")], 0), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("name"), DslNode("call", [DslNode("var", [DslString("nodeChild")], 0), DslList(Cons(DslNode("int", [DslInt(0)], 0), Cons(DslNode("var", [DslString("f")], 0), EmptyList())))], 0), DslNode("brace", [DslList(Cons(DslNode("equal", [DslNode("var", [DslString("name")], 0), DslNode("var", [DslString("fieldname")], 0)], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), Cons(DslBool(false), Cons(DslNode("var", [DslString("fields")], 0), EmptyList()))))], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), 2)), Pair(DslLanguage("tuples"), TreeNode("nth", DslNode("lambda", [DslList(Cons(DslString("n"), Cons(DslString("l"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("listAt")], 0), DslList(Cons(DslNode("var", [DslString("n")], 0), Cons(DslNode("var", [DslString("l")], 0), EmptyList())))], 0), EmptyList()))], 0)], 0), TreeNode("first", DslNode("lambda", [DslList(Cons(DslString("l"), EmptyList())), DslNode("call", [DslNode("var", [DslString("nth")], 0), DslList(Cons(DslNode("int", [DslInt(0)], 0), Cons(DslNode("var", [DslString("l")], 0), EmptyList())))], 0)], 0), TreeNode("fifth", DslNode("lambda", [DslList(Cons(DslString("l"), EmptyList())), DslNode("call", [DslNode("var", [DslString("nth")], 0), DslList(Cons(DslNode("int", [DslInt(4)], 0), Cons(DslNode("var", [DslString("l")], 0), EmptyList())))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), TreeNode("fourth", DslNode("lambda", [DslList(Cons(DslString("l"), EmptyList())), DslNode("call", [DslNode("var", [DslString("nth")], 0), DslList(Cons(DslNode("int", [DslInt(3)], 0), Cons(DslNode("var", [DslString("l")], 0), EmptyList())))], 0)], 0), TreeEmpty(), TreeNode("listAt", DslNode("lambda", [DslList(Cons(DslString("i"), Cons(DslString("xs"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("less_equal", [DslNode("var", [DslString("i")], 0), DslNode("int", [DslInt(0)], 0)], 0), DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("xs")], 0), EmptyList()))], 0), DslNode("call", [DslNode("var", [DslString("listAt")], 0), DslList(Cons(DslNode("sub", [DslNode("var", [DslString("i")], 0), DslNode("int", [DslInt(1)], 0)], 0), Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("xs")], 0), EmptyList()))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), 2), 3), TreeNode("sixth", DslNode("lambda", [DslList(Cons(DslString("l"), EmptyList())), DslNode("call", [DslNode("var", [DslString("nth")], 0), DslList(Cons(DslNode("int", [DslInt(5)], 0), Cons(DslNode("var", [DslString("l")], 0), EmptyList())))], 0)], 0), TreeNode("second", DslNode("lambda", [DslList(Cons(DslString("l"), EmptyList())), DslNode("call", [DslNode("var", [DslString("nth")], 0), DslList(Cons(DslNode("int", [DslInt(1)], 0), Cons(DslNode("var", [DslString("l")], 0), EmptyList())))], 0)], 0), TreeNode("reverse", DslNode("lambda", [DslList(Cons(DslString("li"), EmptyList())), DslNode("brace", [DslList(Cons(DslNode("let", [DslString("doReverse"), DslNode("lambda", [DslList(Cons(DslString("l"), Cons(DslString("acc"), EmptyList()))), DslNode("brace", [DslList(Cons(DslNode("ifelse", [DslNode("equal", [DslNode("var", [DslString("l")], 0), DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0)], 0), DslNode("var", [DslString("acc")], 0), DslNode("call", [DslNode("var", [DslString("doReverse")], 0), DslList(Cons(DslNode("call", [DslNode("var", [DslString("tail")], 0), DslList(Cons(DslNode("var", [DslString("l")], 0), EmptyList()))], 0), Cons(DslNode("call", [DslNode("var", [DslString("cons")], 0), DslList(Cons(DslNode("var", [DslString("acc")], 0), Cons(DslNode("call", [DslNode("var", [DslString("head")], 0), DslList(Cons(DslNode("var", [DslString("l")], 0), EmptyList()))], 0), EmptyList())))], 0), EmptyList())))], 0)], 0), EmptyList()))], 0)], 0), DslNode("brace", [DslList(Cons(DslNode("call", [DslNode("var", [DslString("doReverse")], 0), DslList(Cons(DslNode("var", [DslString("li")], 0), Cons(DslNode("call", [DslNode("var", [DslString("nil")], 0), DslList(EmptyList())], 0), EmptyList())))], 0), EmptyList()))], 0)], 0), EmptyList()))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), TreeEmpty(), 2), TreeNode("third", DslNode("lambda", [DslList(Cons(DslString("l"), EmptyList())), DslNode("call", [DslNode("var", [DslString("nth")], 0), DslList(Cons(DslNode("int", [DslInt(2)], 0), Cons(DslNode("var", [DslString("l")], 0), EmptyList())))], 0)], 0), TreeEmpty(), TreeEmpty(), 1), 3), 4))]
	})
}
