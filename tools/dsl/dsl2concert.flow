import tools/consonance/concert/eval/evaluate;
import tools/consonance/concert/serialize;
import tools/dsl/dsl2flow;
import tools/dsl/registry/dsl_lowering;
import tools/dsl/registry/dsl_populate;

export {
    lambda2Concert(code : DslAstEnv) -> DslAst;
}

lambda2Concert(code : DslAstEnv) -> DslAst {
	performDslTransformations("compile", "lambda", code).ast;
}

main() {
	populateDsls();

	code = parseDslProgram("lambda+concert", <<
		a = true;
		b = !(a && (a || !a));
		if a && b c = a || b; println(c)
		else println(cons(a, cons(b, nil())))
	>>);

    res = lambda2Concert(code);
    println(prettyDsl(res));
	asFlow = dsl2flow(res);
	println(asFlow);

	concert = deserializeConcert(serialize(asFlow));
	evaluateConcert(makeEmptyConcertEnv(), concert).value;
    quit(0)
}
