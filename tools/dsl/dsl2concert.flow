import tools/dsl/languages/lambda;
import tools/dsl/languages/arrays;
import tools/dsl/languages/ast_syntax;
import tools/consonance/concert/concert;
import tools/dsl/dsl2flow;

import tools/dsl/dsl_api;

export {
    lambda2Concert(code : string) -> DslAst;
}

lambda2Concert(code : string) -> DslAst {
    lambda = defineLambda();

    rewrites = defineDslLowering(defineDslAst().grammar, lambda.grammar, ";;", <<
		var($id) => CVar(id, ConcertPos("", 0, 0));;
		add($a, $b) => CCallBuiltin("add", cons(b, cons(a, nil())), ConcertPos("", 0, 0));;
		// int($i) => CInt(i);;	// TODO: We need to wrap the basic types
	>>);

    concert = DslLanguage("concert", lambda.grammar, None(), Some(rewrites), None(),
        makeTree(), [], None()
    );
    parseDsl("concert-sample", concert, code)
}

main() {
    res = lambda2Concert(<<
        a + b
    >>);
    println(prettyDsl(res));
	asFlow = dsl2flow(res);
	println(asFlow);
    quit(0)
}