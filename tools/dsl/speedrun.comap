<mindmap escape="false">
  <metadata>
    <id/>
    <name><![CDATA[speedrun]]></name>
    <owner>
      <id/>
      <name/>
      <email/>
    </owner>
    <access><![CDATA[Private]]></access>
    <source><![CDATA[Desktop]]></source>
    <collaborators/>
    <watchers/>
    <isTemplate><![CDATA[false]]></isTemplate>
    <params/>
  </metadata>
  <presentation/>
  <node id="CLOziinFIwPhOTOLL-3">
    <text><![CDATA[Speedrun]]></text>
    <node id="CLOziinFIwPhOTOLL-12">
      <text><![CDATA[DSL lang]]></text>
      <node id="CLOziinFIwPhOTOLL-24" taskCompletion="100">
        <text><![CDATA[Grammar]]></text>
        <node id="CLOziinFIwPhOTOLL-27"><text><![CDATA[Gringo]]></text></node>
      </node>
      <node id="CLOziinFIwPhOTOLL-30" taskCompletion="50">
        <text><![CDATA[Rules]]></text>
        <node id="CLOziinFIwPhOTOLL-9" taskCompletion="50">
          <text><![CDATA[Egraph system]]></text>
          <node id="CLOziinFIwPhOTOLL-250">
            <text><![CDATA[Caviar]]></text>
            <node id="CLOziinFIwPhOTOLL-238"><text><![CDATA[https://arxiv.org/abs/2111.12116]]></text></node>
            <node id="CLOziinFIwPhOTOLL-241">
              <text><![CDATA[This improves with these things]]></text>
              <node id="CLOziinFIwPhOTOLL-244"><text><![CDATA[Stop when specific patterns are met]]></text></node>
              <node id="CLOziinFIwPhOTOLL-247"><text><![CDATA[Runs rules for N seconds, then extracts best, and restarts from that graph]]></text></node>
            </node>
          </node>
        </node>
        <node id="CLOziinFIwPhOTOLL-255">
          <text><![CDATA[Pattern matching]]></text>
          <node id="CLOziinFIwPhOTOLL-312">
            <text><![CDATA[Whiley rewriting has generalized patterns]]></text>
            <node id="CLOziinFIwPhOTOLL-315">
              <text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/2814251.2814266]]></text>
              <node id="CLQoLtDNKL4X0dDfb-321"><text><![CDATA[pattern a la Prolog/datalog]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-324" priority="1"><text><![CDATA[&quot;if&quot; guards on patterns]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-370">
                <text><![CDATA[Sets]]></text>
                <node id="CLQoLtDNKL4X0dDfb-327"><text><![CDATA[{ true, false }  == { false, true } for matching on sets]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-333">
                  <text><![CDATA[reduce And{Bool b, BExpr... xs}]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-337"><text><![CDATA[false, if b == false]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-340"><text><![CDATA[True if |xs| == 0]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-343"><text><![CDATA[And(xs)]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-330"><text><![CDATA[{ exp... } means that the set contains zero or more exps.]]></text></node>
                </node>
                <node id="CLQoLtDNKL4X0dDfb-350">
                  <text><![CDATA[reduce And{Not(BExpr x), BExpr y, BExpr... ys}]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-353"><text><![CDATA[false if x == y]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-356"><text><![CDATA[Here, we need at least two arguments to the &quot;and&quot;, but the ordering does not matter]]></text></node>
                </node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-373">
                <text><![CDATA[Lists]]></text>
                <node id="CLQoLtDNKL4X0dDfb-361"><text><![CDATA[[ 1, 2] is for arrays/ordered lists]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-364"><text><![CDATA[[ Expr... xs ] matches the elements of the list]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-367"><text><![CDATA[[ Expr a, Expr... xs ] matches the first to A, then the rest of the list to XS]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-376">
                <text><![CDATA[Comprehensions]]></text>
                <node id="CLQoLtDNKL4X0dDfb-379"><text><![CDATA[{ Not x | x in xs }]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-382">
                <text><![CDATA[Substitution syntax]]></text>
                <node id="CLQoLtDNKL4X0dDfb-385">
                  <text><![CDATA[x[v\n]]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-388"><text><![CDATA[x with all occurences of v replaced by n]]></text></node>
                </node>
              </node>
            </node>
          </node>
          <node id="CLOziinFIwPhOTOLL-261">
            <text><![CDATA[Algorithm and DSL for pattern matching with optimizations]]></text>
            <node id="CLOziinFIwPhOTOLL-258"><text><![CDATA[https://arxiv.org/pdf/1807.01872v1.pdf]]></text></node>
            <node id="CL5GTfEcGwk97C8kp-488"><text><![CDATA[Nothing of major consequence there]]></text></node>
          </node>
          <node id="CL5GTfEcGwk97C8kp-505">
            <text><![CDATA[CSS selectors is related]]></text>
            <node id="CL5GTfEcGwk97C8kp-508"><text><![CDATA[Has operators to find &quot;descendent&quot; and &quot;parent&quot;]]></text></node>
            <node id="CL5GTfEcGwk97C8kp-513"><text><![CDATA[first, last of children]]></text></node>
            <node id="CL5GTfEcGwk97C8kp-518"><text><![CDATA[prev, next sibling]]></text></node>
          </node>
          <node id="CL5GTfEcGwk97C8kp-521">
            <text><![CDATA[CSS right hand side]]></text>
            <node id="CL5GTfEcGwk97C8kp-524"><text><![CDATA[Has &quot;inherit&quot; where a style is taken from the parent]]></text></node>
            <node id="CL5GTfEcGwk97C8kp-529"><text><![CDATA[Many rules can be applied on top of each other]]></text></node>
          </node>
        </node>
        <node id="CLl9Gs2CsrBSwV1rN-734">
          <text><![CDATA[Read this thesis about egraphs in Julia]]></text>
          <node id="CLl9Gs2CsrBSwV1rN-737"><text><![CDATA[https://arxiv.org/pdf/2112.14714.pdf]]></text></node>
          <node id="CLufI5Q4rhN4tG69a-735"><text><![CDATA[They define a library for Julia for egraph rewriting]]></text></node>
          <node id="CLufI5Q4rhN4tG69a-738">
            <text><![CDATA[Supports 4 kinds of rules]]></text>
            <node id="CLW2zKfrYYa26ohnl-768"><text><![CDATA[-&gt; RewriteRule for substitution]]></text></node>
            <node id="CLW2zKfrYYa26ohnl-769"><text><![CDATA[=&gt; DynamicRule for evaluation]]></text></node>
            <node id="CLW2zKfrYYa26ohnl-770"><text><![CDATA[EqualityRule for egraph bidirectional matching]]></text></node>
            <node id="CLW2zKfrYYa26ohnl-771"><text><![CDATA[!= InEqualityRule for contradictions in egraph, which terminates rewriting]]></text></node>
          </node>
          <node id="CLufI5Q4rhN4tG69a-741">
            <text><![CDATA[Has a list of fusion transforms]]></text>
            <node id="CLW2zKfrYYa26ohnl-747"><text><![CDATA[map(f,fill(x,N)) == fill(apply(f,x), N)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">fill(x,N)[y] --&gt; x</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">length(fill(x,N)) --&gt; N</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">reverse(reverse(x)) --&gt; x</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">sum(fill(x,N)) --&gt; x * N</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">map(f,reverse(x)) == reverse(map(f, x))</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">filter(f,reverse(x)) == reverse(filter(f,x))</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">reverse(fill(x,N)) == fill(x,N)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">filter(f, fill(x,N)) == (apply(f, x) ? fill(x,N) : fill(x,0))</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">filter(f, filter(g, x)) == filter(fand(f,g), x)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">cat(fill(x,N),fill(x,M)) == fill(x,N + M)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">cat(map(f,x), map(f,y)) == map(f, cat(x,y))</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">map(f, cat(x,y)) == cat(map(f,x), map(f,y))</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">map(f,map(g,x)) == map(f  g, x)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">reverse( cat(x,y) ) == cat(reverse(y), reverse(x))</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">map(f,x)[y] == apply(f,x[y])</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">apply(f  g, x) == apply(f, apply(g, x))</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">reduce(g, map(f, x)) == mapreduce(f, g, x)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">foldl(g, map(f, x)) == mapfoldl(f, g, x)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">foldr(g, map(f, x)) == mapfoldr(f, g, x)]]></text></node>
          </node>
        </node>
        <node id="CLW2zKfrYYa26ohnl-738">
          <text><![CDATA[Egraph matching as relational something]]></text>
          <node id="CLW2zKfrYYa26ohnl-741"><text><![CDATA[https://arxiv.org/abs/2108.02290]]></text></node>
          <node id="CLW2zKfrYYa26ohnl-744"><text><![CDATA[TODO: Read this]]></text></node>
          <node id="CLW2zKfrYYa26ohnl-772"><text><![CDATA[They convert an egraph to a database]]></text></node>
          <node id="CLW2zKfrYYa26ohnl-775"><text><![CDATA[Then the patterns are compiled into relational algebra with generic join]]></text></node>
          <node id="CLW2zKfrYYa26ohnl-778"><text><![CDATA[which can then run quickly]]></text></node>
          <node id="CLcbMj6gcvcl9VwZX-752">
            <text><![CDATA[Generic join]]></text>
            <node id="CLcbMj6gcvcl9VwZX-755"><text><![CDATA[Takes the order of variables as input, and evaluates quickly]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-758"><text><![CDATA[Implementation of this requires a trie]]></text></node>
          </node>
          <node id="CLW2zKfrYYa26ohnl-781"><text><![CDATA[And they support &quot;multi-patterns&quot; where two parallel matches are done in separate parts of the graph]]></text></node>
          <node id="CLcbMj6gcvcl9VwZX-761"><text><![CDATA[The structure of the database is that each node is a tuple]]></text></node>
          <node id="CLcbMj6gcvcl9VwZX-764"><text><![CDATA[Each node type is a different table, but the ids are global across all tables]]></text></node>
          <node id="CLcbMj6gcvcl9VwZX-769">
            <text><![CDATA[Queries are unrolled to queries]]></text>
            <node id="CLcbMj6gcvcl9VwZX-772"><text><![CDATA[The pattern f($x, g($x))]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-775"><text><![CDATA[becomes Q(root, $a) &lt;- Rf(root, $a, x), Rg(x, $a)]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-778"><text><![CDATA[so we compute the intersection of Rf and Rg based on $a &amp; x, which has to be the same]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-784"><text><![CDATA[I.e. do the join on the parameters that have to match]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-789"><text><![CDATA[So the key is that the fundamental join operation takes two relations, a set of columns (that exist in both and match) and extracts another set of columns]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-794"><text><![CDATA[That is done until all relations are done]]></text></node>
          </node>
        </node>
        <node id="CLcbMj6gcvcl9VwZX-797">
          <text><![CDATA[Egg]]></text>
          <node id="CLcbMj6gcvcl9VwZX-800">
            <text><![CDATA[Has a math example]]></text>
            <node id="CLcbMj6gcvcl9VwZX-838"><text><![CDATA[https://github.com/egraphs-good/egg/blob/main/tests/math.rs]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-803"><text><![CDATA[a + b = b+ a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-806"><text><![CDATA[a * b = b * a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-813"><text><![CDATA[a + (b+c) = (a+b)+c]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-817"><text><![CDATA[a-b = a+-1*b]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-820"><text><![CDATA[a/b = a * b ^-1 if b != 0]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-823"><text><![CDATA[a+ 0 = a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-826"><text><![CDATA[a*0=0]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-829"><text><![CDATA[a*1=a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-832"><text><![CDATA[a-a=0]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-835"><text><![CDATA[a/a=1 if a =! 0]]></text></node>
          </node>
          <node id="CLcbMj6gcvcl9VwZX-841">
            <text><![CDATA[Propositional logic example]]></text>
            <node id="CLcbMj6gcvcl9VwZX-844"><text><![CDATA[a -&gt; b == !a | b]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-847"><text><![CDATA[!!a == a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-850"><text><![CDATA[a | (b | c ) == (a|b) | c]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-853"><text><![CDATA[a &amp; (b|c) == (a &amp;b) | (a &amp; c)]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-856"><text><![CDATA[a | (b &amp; c) == (a | b) &amp; (a | c)]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-861"><text><![CDATA[a | b == b | a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-864"><text><![CDATA[a &amp; b == b &amp; a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-867"><text><![CDATA[a | !a = true]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-870"><text><![CDATA[a &amp; true = a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-875"><text><![CDATA[a -&gt; b == !b -&gt; !a]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-882"><text><![CDATA[(a -&gt; b) &amp; (!a -&gt; c) == b | c]]></text></node>
          </node>
          <node id="CLcbMj6gcvcl9VwZX-885"><text><![CDATA[Lambda]]></text></node>
        </node>
        <node id="CLcbMj6gcvcl9VwZX-888">
          <text><![CDATA[Required for efficient egraph implementation]]></text>
          <node id="CLcbMj6gcvcl9VwZX-891">
            <text><![CDATA[sparse int map]]></text>
            <node id="CLcbMj6gcvcl9VwZX-894"><text><![CDATA[requires vector]]></text></node>
            <node id="CLcbMj6gcvcl9VwZX-897"><text><![CDATA[requires malloc]]></text></node>
          </node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-21">
        <text><![CDATA[Resource Cost system]]></text>
        <node id="CLOziinFIwPhOTOLL-349">
          <text><![CDATA[Using rewrite rules to calc running and memory usage]]></text>
          <node id="CLOziinFIwPhOTOLL-352"><text><![CDATA[https://drops.dagstuhl.de/opus/volltexte/2017/7743/pdf/LIPIcs-FSCD-2017-2.pdf]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-357">
          <text><![CDATA[The same for refs and arrays in ML]]></text>
          <node id="CLOziinFIwPhOTOLL-360"><text><![CDATA[https://drops.dagstuhl.de/opus/volltexte/2017/7728/pdf/LIPIcs-FSCD-2017-26.pdf]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-303">
        <text><![CDATA[Type checking]]></text>
        <node id="CLOziinFIwPhOTOLL-306">
          <text><![CDATA[Type inference with term rewriting]]></text>
          <node id="CLOziinFIwPhOTOLL-309"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3408994]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-33">
        <text><![CDATA[Compilation]]></text>
        <node id="CLQoLtDNKL4X0dDfb-395" taskCompletion="100"><text><![CDATA[Blueprint for expression-based string languages]]></text></node>
      </node>
      <node id="CLOziinFIwPhOTOLL-264">
        <text><![CDATA[Other systems]]></text>
        <node id="CLOziinFIwPhOTOLL-282">
          <text><![CDATA[Neverlang]]></text>
          <node id="CLOziinFIwPhOTOLL-300"><text><![CDATA[Language constructs are defined in isolation in small packages for syntax, typing and code gen, and then composed together. Self-hosted]]></text></node>
          <node id="CLOziinFIwPhOTOLL-288"><text><![CDATA[https://cazzola.di.unimi.it/neverlang2.html]]></text></node>
          <node id="CLOziinFIwPhOTOLL-285"><text><![CDATA[https://www.researchgate.net/profile/Walter-Cazzola/publication/272524233_Neverlang_A_framework_for_feature-oriented_language_development/links/5799c58c08aec89db7c0904e/Neverlang-A-framework-for-feature-oriented-language-development.pdf]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-270">
          <text><![CDATA[Monticore]]></text>
          <node id="CLOziinFIwPhOTOLL-267"><text><![CDATA[https://monticore.github.io/monticore/]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-273">
          <text><![CDATA[Melange]]></text>
          <node id="CLOziinFIwPhOTOLL-276"><text><![CDATA[http://melange.inria.fr/]]></text></node>
          <node id="CLOziinFIwPhOTOLL-279"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/2814251.2814252]]></text></node>
        </node>
        <node id="CL4CIIoGu38qHr2uM-750">
          <text><![CDATA[Scheme in WASM]]></text>
          <node id="CL4CIIoGu38qHr2uM-753"><text><![CDATA[https://github.com/PollRobots/scheme]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-223">
        <text><![CDATA[Use cases]]></text>
        <node id="CLOziinFIwPhOTOLL-15">
          <text><![CDATA[Imperative efficient language]]></text>
          <node id="CLOziinFIwPhOTOLL-417"><text><![CDATA[All integer types]]></text></node>
          <node id="CLOziinFIwPhOTOLL-414"><text><![CDATA[Direct arrays]]></text></node>
          <node id="CLOziinFIwPhOTOLL-420"><text><![CDATA[Explicit or implicit memory handling]]></text></node>
          <node id="CLOziinFIwPhOTOLL-423"><text><![CDATA[Compile to C]]></text></node>
        </node>
        <node id="CLcbMj6gcvcl9VwZX-900">
          <text><![CDATA[Roadmap to stand-alone option for this]]></text>
          <node id="CLcbMj6gcvcl9VwZX-909">
            <text><![CDATA[Simple language above Wasm]]></text>
            <node id="CLcbMj6gcvcl9VwZX-1784">
              <text><![CDATA[Criteria]]></text>
              <node id="CLcbMj6gcvcl9VwZX-1787"><text><![CDATA[We want something which is small and fast, and can at least run online]]></text></node>
            </node>
            <node id="CLcbMj6gcvcl9VwZX-1792">
              <text><![CDATA[Not online]]></text>
              <node id="CLcbMj6gcvcl9VwZX-914">
                <text><![CDATA[https://github.com/bwasti/wasmblr]]></text>
                <node id="CLcbMj6gcvcl9VwZX-917"><text><![CDATA[A c++ library which emits wasm bytecodes]]></text></node>
                <node id="CLcbMj6gcvcl9VwZX-920"><text><![CDATA[so a &quot;macro&quot; language on top of Wasm]]></text></node>
              </node>
              <node id="CLcbMj6gcvcl9VwZX-939"><text><![CDATA[C, C++, Rust]]></text></node>
              <node id="CLcbMj6gcvcl9VwZX-1800">
                <text><![CDATA[Lobster]]></text>
                <node id="CLcbMj6gcvcl9VwZX-1803"><text><![CDATA[Pretty nice functional language with ref counting and graphics]]></text></node>
                <node id="CLcbMj6gcvcl9VwZX-1808"><text><![CDATA[https://aardappel.github.io/lobster/implementation.html]]></text></node>
                <node id="CLcbMj6gcvcl9VwZX-1811"><text><![CDATA[Goes to wasm through c++]]></text></node>
              </node>
              <node id="CLcbMj6gcvcl9VwZX-1814">
                <text><![CDATA[Forth]]></text>
                <node id="CLcbMj6gcvcl9VwZX-1817"><text><![CDATA[Build on Binaryen]]></text></node>
              </node>
            </node>
            <node id="CLcbMj6gcvcl9VwZX-1795">
              <text><![CDATA[Self-built]]></text>
              <node id="CLcbMj6gcvcl9VwZX-942">
                <text><![CDATA[Here is a GC in a single header file]]></text>
                <node id="CLcbMj6gcvcl9VwZX-945"><text><![CDATA[https://github.com/bullno1/ugc/blob/master/ugc.h]]></text></node>
                <node id="CLcbMj6gcvcl9VwZX-948">
                  <text><![CDATA[Features used]]></text>
                  <node id="CLcbMj6gcvcl9VwZX-951"><text><![CDATA[enum]]></text></node>
                  <node id="CLcbMj6gcvcl9VwZX-954"><text><![CDATA[typedef]]></text></node>
                  <node id="CLcbMj6gcvcl9VwZX-957"><text><![CDATA[structs]]></text></node>
                  <node id="CLcbMj6gcvcl9VwZX-960"><text><![CDATA[pointers]]></text></node>
                  <node id="CLcbMj6gcvcl9VwZX-963"><text><![CDATA[while]]></text></node>
                </node>
                <node id="CLcbMj6gcvcl9VwZX-966"><text><![CDATA[I.e. pretty simple to port to some simple imperative language]]></text></node>
              </node>
            </node>
            <node id="CLcbMj6gcvcl9VwZX-923">
              <text><![CDATA[AssemblyScript]]></text>
              <node id="CLcbMj6gcvcl9VwZX-926">
                <text><![CDATA[Has a low-level interface]]></text>
                <node id="CLcbMj6gcvcl9VwZX-929"><text><![CDATA[https://www.assemblyscript.org/stdlib/builtins.html#static-type-checks]]></text></node>
              </node>
              <node id="CLcbMj6gcvcl9VwZX-932">
                <text><![CDATA[And a low level runtime with simple GC]]></text>
                <node id="CLcbMj6gcvcl9VwZX-935"><text><![CDATA[https://github.com/AssemblyScript/assemblyscript/tree/main/std/assembly/rt]]></text></node>
              </node>
            </node>
            <node id="CLcbMj6gcvcl9VwZX-1820">
              <text><![CDATA[Never]]></text>
              <node id="CLcbMj6gcvcl9VwZX-1823"><text><![CDATA[Written in C, but the compiler is compiled to Wasm]]></text></node>
            </node>
          </node>
          <node id="CLcbMj6gcvcl9VwZX-906"><text><![CDATA[Wasm]]></text></node>
        </node>
      </node>
    </node>
    <node id="CLOziinFIwPhOTOLL-161">
      <text><![CDATA[Semantics]]></text>
      <node id="CLOziinFIwPhOTOLL-69">
        <text><![CDATA[Proof-language]]></text>
        <node id="CLOziinFIwPhOTOLL-72">
          <text><![CDATA[Closure calculus]]></text>
          <node id="CLOziinFIwPhOTOLL-320"><text><![CDATA[https://blog.chewxy.com/wp-content/uploads/personal/dissertation31482.pdf]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-334">
          <text><![CDATA[Lambda pi]]></text>
          <node id="CLOziinFIwPhOTOLL-337"><text><![CDATA[https://drops.dagstuhl.de/opus/volltexte/2021/14258/pdf/LIPIcs-FSCD-2021-20.pdf]]></text></node>
          <node id="CLOziinFIwPhOTOLL-340"><text><![CDATA[https://lambdapi.readthedocs.io/en/latest/]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-343">
          <text><![CDATA[Decuteam]]></text>
          <node id="CLOziinFIwPhOTOLL-346"><text><![CDATA[https://deducteam.github.io/]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-39">
        <text><![CDATA[Incremental programs]]></text>
        <node id="CLOziinFIwPhOTOLL-117">
          <text><![CDATA[Incremental linear algebra]]></text>
          <node id="CLOziinFIwPhOTOLL-120"><text><![CDATA[https://dl.acm.org/doi/10.1145/2588555.2610519]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-123">
          <text><![CDATA[Code gen of linear algebra]]></text>
          <node id="CLOziinFIwPhOTOLL-126"><text><![CDATA[https://scholar.google.com/scholar?start=10&amp;hl=en&amp;as_sdt=2005&amp;sciodt=0,5&amp;cites=3549226117999146744&amp;scipsc=#d=gs_qabs&amp;u=%23p%3DZPSr9aR854IJ]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-191" priority="1">
          <text><![CDATA[Simple incremental lambda calculus]]></text>
          <node id="CLOziinFIwPhOTOLL-194"><text><![CDATA[http://maude.ucm.es/wpte20/papers/WPTE_2020_morihata.pdf]]></text></node>
          <node id="CLOziinFIwPhOTOLL-212"><text><![CDATA[Similar to how Conal Elliot did automatic differentiation]]></text></node>
          <node id="CLOziinFIwPhOTOLL-197">
            <text><![CDATA[Supercedes]]></text>
            <node id="CLOziinFIwPhOTOLL-200"><text><![CDATA[https://inc-lc.github.io/]]></text></node>
          </node>
        </node>
        <node id="CLOziinFIwPhOTOLL-207">
          <text><![CDATA[Incremental datalog]]></text>
          <node id="CLOziinFIwPhOTOLL-203"><text><![CDATA[https://library.oapen.org/bitstream/handle/20.500.12657/23330/1006825.pdf?sequence=1#page=533]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-217">
          <text><![CDATA[Incremental data structures, but not available]]></text>
          <node id="CLOziinFIwPhOTOLL-220"><text><![CDATA[https://www.sciencedirect.com/science/article/abs/pii/S0167642317300692]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-164">
        <text><![CDATA[Algebraic operators]]></text>
        <node id="CLOziinFIwPhOTOLL-167"><text><![CDATA[https://dl.acm.org/doi/abs/10.1145/3209108.3209166]]></text></node>
        <node id="CLOziinFIwPhOTOLL-170"><text><![CDATA[Scoped algebras, some monad stuff]]></text></node>
        <node id="CLOziinFIwPhOTOLL-175"><text><![CDATA[Algebraic operators: They do not change outcome when distributed over sequence. Scoping is done by having left and right brackets, which have to match.]]></text></node>
      </node>
      <node id="CLOziinFIwPhOTOLL-178">
        <text><![CDATA[Introduction to categories]]></text>
        <node id="CLOziinFIwPhOTOLL-181"><text><![CDATA[https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/]]></text></node>
        <node id="CLOziinFIwPhOTOLL-186"><text><![CDATA[TODO: Figure out what this adjunction thing is]]></text></node>
        <node id="CLkv7UOgsceBgpp3I-318"><text><![CDATA[https://www.math.mcgill.ca/triples/Barr-Wells-ctcs.pdf]]></text></node>
      </node>
    </node>
    <node id="CLOziinFIwPhOTOLL-460">
      <text><![CDATA[UI]]></text>
      <node id="CLOziinFIwPhOTOLL-226">
        <text><![CDATA[Penrose]]></text>
        <node id="CLOziinFIwPhOTOLL-229"><text><![CDATA[https://penrose.ink/siggraph20.html]]></text></node>
        <node id="CLOziinFIwPhOTOLL-232">
          <text><![CDATA[Nice DSL for diagrams for math]]></text>
          <node id="CLQoLtDNKL4X0dDfb-551">
            <text><![CDATA[Domain]]></text>
            <node id="CLQoLtDNKL4X0dDfb-585">
              <text><![CDATA[Statements]]></text>
              <node id="CLQoLtDNKL4X0dDfb-591">
                <text><![CDATA[&quot;type&quot; T]]></text>
                <node id="CLQoLtDNKL4X0dDfb-554">
                  <text><![CDATA[T]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-576"><text><![CDATA[Id]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-579">
                    <text><![CDATA[&quot;Top&quot;]]></text>
                    <node id="CLQoLtDNKL4X0dDfb-596"><text><![CDATA[Supertype of all types]]></text></node>
                  </node>
                  <node id="CLQoLtDNKL4X0dDfb-582"><text><![CDATA[&quot;Prop&quot;]]></text></node>
                </node>
                <node id="CLQoLtDNKL4X0dDfb-588"><text><![CDATA[type constructor]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-631">
                  <text><![CDATA[Example]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-635"><text><![CDATA[type Scalar, VectorSpace, Vector]]></text></node>
                </node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-602">
                <text><![CDATA[T &quot;&lt;:&quot; T]]></text>
                <node id="CLQoLtDNKL4X0dDfb-599"><text><![CDATA[subtype]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-619">
                <text><![CDATA[&quot;constructor&quot; id &quot;:&quot; &quot;(&quot; (SubField &quot;:&quot; T) * ) &quot;-&gt;&quot; T]]></text>
                <node id="CLQoLtDNKL4X0dDfb-616"><text><![CDATA[constructor]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-803">
                  <text><![CDATA[Example]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-806"><text><![CDATA[constructor MakeInterval: Real min * Real max -&gt; Interval]]></text></node>
                </node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-624">
                <text><![CDATA[&quot;function&quot; id &quot;:&quot; T &quot;-&gt;&quot; T]]></text>
                <node id="CLQoLtDNKL4X0dDfb-641">
                  <text><![CDATA[Example]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-644"><text><![CDATA[function add : Vector * Vector -&gt; Vector]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-651"><text><![CDATA[function norm : Vector -&gt; Scalar]]></text></node>
                </node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-654">
                <text><![CDATA[&quot;predicate&quot; Id &quot;:&quot; T ]]></text>
                <node id="CLQoLtDNKL4X0dDfb-657">
                  <text><![CDATA[Example]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-660"><text><![CDATA[predicate In: Vector * VectorSpace]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-663"><text><![CDATA[predicate Unit: Vector]]></text></node>
                </node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-672">
                <text><![CDATA[&quot;notation&quot; string &quot;~&quot; substance-string]]></text>
                <node id="CLQoLtDNKL4X0dDfb-681">
                  <text><![CDATA[Example]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-684"><text><![CDATA[notation &quot;v1 + v2&quot;  &quot;add(v1,v2)&quot;]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-687"><text><![CDATA[notation &quot;|y1|&quot;  &quot;norm(y1)&quot;]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-690"><text><![CDATA[notation &quot;Vector v in V&quot;  &quot;Vector a; In(a,U)&quot;]]></text></node>
                </node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-695"><text><![CDATA[&quot;value&quot; var &quot;:&quot; T]]></text></node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-698"><text><![CDATA[This is used to parameterize the Substance langauge]]></text></node>
          </node>
          <node id="CLQoLtDNKL4X0dDfb-701">
            <text><![CDATA[Substance]]></text>
            <node id="CLQoLtDNKL4X0dDfb-706">
              <text><![CDATA[Statements]]></text>
              <node id="CLQoLtDNKL4X0dDfb-712"><text><![CDATA[T id]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-715"><text><![CDATA[x &quot;:=&quot; E]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-718"><text><![CDATA[x &quot;:=&quot; D]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-733">
                <text><![CDATA[Q]]></text>
                <node id="CLQoLtDNKL4X0dDfb-736"><text><![CDATA[Predicates]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-739"><text><![CDATA[p( E* )]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-742"><text><![CDATA[p( Q* )]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-745">
                <text><![CDATA[L]]></text>
                <node id="CLQoLtDNKL4X0dDfb-748"><text><![CDATA[&quot;NoLabel&quot; x]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-751"><text><![CDATA[&quot;AutoLabel&quot; x]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-754"><text><![CDATA[&quot;AutoLabel&quot; &quot;All&quot;]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-757"><text><![CDATA[&quot;Label&quot; x string]]></text></node>
              </node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-721">
              <text><![CDATA[E]]></text>
              <node id="CLQoLtDNKL4X0dDfb-724"><text><![CDATA[x]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-727"><text><![CDATA[f( E* )]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-730"><text><![CDATA[c( E* )]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-763"><text><![CDATA[Expressions]]></text></node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-760">
              <text><![CDATA[D]]></text>
              <node id="CLQoLtDNKL4X0dDfb-766">
                <text><![CDATA[x &quot;.&quot; s]]></text>
                <node id="CLQoLtDNKL4X0dDfb-769"><text><![CDATA[deconstructor]]></text></node>
              </node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-777"><text><![CDATA[Declares objects, properties of objects, or relationships between objects from the Domain]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-780">
              <text><![CDATA[Example]]></text>
              <node id="CLQoLtDNKL4X0dDfb-783">
                <text><![CDATA[Unsugared]]></text>
                <node id="CLQoLtDNKL4X0dDfb-786"><text><![CDATA[VectorSpace X</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">Vector x1, x2</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">In(x1, X)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">In(x2, X)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">Unit(x1)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">Orthogonal(x1, x2)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">label x1 $x_1$</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">label x2 $x_2$]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-791">
                <text><![CDATA[Sugared]]></text>
                <node id="CLQoLtDNKL4X0dDfb-794"><text><![CDATA[VectorSpace X</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">Vector x1, x2 in X</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">Unit(x1)</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">x1 _|_ x2</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">label x1 $x_1$</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">label x2 $x_2$]]></text></node>
              </node>
            </node>
          </node>
          <node id="CLQoLtDNKL4X0dDfb-772">
            <text><![CDATA[Style]]></text>
            <node id="CLQoLtDNKL4X0dDfb-809"><text><![CDATA[Defines how expressions from Substance are translated into graphical objects and relationships]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-812">
              <text><![CDATA[Structured similar to CSS]]></text>
              <node id="CLQoLtDNKL4X0dDfb-815"><text><![CDATA[Rules]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-818"><text><![CDATA[Cascading]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-821"><text><![CDATA[Selector]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-824"><text><![CDATA[Declarations]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-827"><text><![CDATA[Constraint]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-830"><text><![CDATA[Objective]]></text></node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-836">
              <text><![CDATA[Syntax]]></text>
              <node id="CLQoLtDNKL4X0dDfb-860">
                <text><![CDATA[program]]></text>
                <node id="CLQoLtDNKL4X0dDfb-865"><text><![CDATA[header*]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-868"><text><![CDATA[block*]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-833">
                <text><![CDATA[header]]></text>
                <node id="CLQoLtDNKL4X0dDfb-842"><text><![CDATA[style vars]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-845"><text><![CDATA[selectors]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-871">
                <text><![CDATA[selectors]]></text>
                <node id="CLQoLtDNKL4X0dDfb-936"><text><![CDATA[forall Type U { }]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-939"><text><![CDATA[forall Vector u, VectorSpace U where In(u, U) { ... u is bound }]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-839">
                <text><![CDATA[block]]></text>
                <node id="CLQoLtDNKL4X0dDfb-848"><text><![CDATA[path &quot;=&quot; exp]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-853"><text><![CDATA[&quot;delete&quot; path]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-886">
                <text><![CDATA[exp]]></text>
                <node id="CLQoLtDNKL4X0dDfb-889"><text><![CDATA[constants bool int, float, string]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-924"><text><![CDATA[? for values to be determined by optimization]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-892"><text><![CDATA[path]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-895">
                  <text><![CDATA[id &quot;(&quot; exp * &quot;)&quot;]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-898"><text><![CDATA[Function call]]></text></node>
                </node>
                <node id="CLQoLtDNKL4X0dDfb-901">
                  <text><![CDATA[inline exp]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-910"><text><![CDATA[&quot;-&quot; exp]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-913"><text><![CDATA[exp &quot;+&quot; exp]]></text></node>
                  <node id="CLQoLtDNKL4X0dDfb-916"><text><![CDATA[exp &quot;*&quot; exp]]></text></node>
                </node>
                <node id="CLQoLtDNKL4X0dDfb-904"><text><![CDATA[exp *]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-907"><text><![CDATA[constructor (id &quot;=&quot; exp)*]]></text></node>
              </node>
              <node id="CLQoLtDNKL4X0dDfb-857">
                <text><![CDATA[path]]></text>
                <node id="CLQoLtDNKL4X0dDfb-919"><text><![CDATA[(id &quot;.&quot;)+ id]]></text></node>
              </node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-943">
              <text><![CDATA[&quot;encourage&quot; exp]]></text>
              <node id="CLQoLtDNKL4X0dDfb-955"><text><![CDATA[Something that should be satisfied as much as possible]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-958"><text><![CDATA[Translated into energey functions]]></text></node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-949">
              <text><![CDATA[&quot;ensure&quot; exp]]></text>
              <node id="CLQoLtDNKL4X0dDfb-952"><text><![CDATA[Hard constraint that has to be satisfied]]></text></node>
            </node>
          </node>
        </node>
        <node id="CLQoLtDNKL4X0dDfb-927">
          <text><![CDATA[Summary]]></text>
          <node id="CLQoLtDNKL4X0dDfb-930"><text><![CDATA[Basically datalog for facts and structures]]></text></node>
          <node id="CLQoLtDNKL4X0dDfb-933"><text><![CDATA[Then there is a pattern matching that translates to graphical objects with properties]]></text></node>
          <node id="CL5GTfEcGwk97C8kp-494">
            <text><![CDATA[The pattern matching is &quot;selectors&quot; as in CSS]]></text>
            <node id="CL5GTfEcGwk97C8kp-499"><text><![CDATA[Figure out relation between pattern matching and selectors.]]></text></node>
            <node id="CL5GTfEcGwk97C8kp-502"><text><![CDATA[I think they are basically the same, but has to figure it out]]></text></node>
          </node>
        </node>
        <node id="CLOziinFIwPhOTOLL-235"><text><![CDATA[Relies on a constraint solving system]]></text></node>
        <node id="CL5GTfEcGwk97C8kp-532">
          <text><![CDATA[Our version]]></text>
          <node id="CL5GTfEcGwk97C8kp-535">
            <text><![CDATA[Set(a) =&gt; {</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">   text = Text(a);</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">   textWidth = Width(texT);</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">   c = Circle(label = text);</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">   guess c.radius, c.position;</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">   enforce !overlap(text, *);</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">   encourage textWidth + 8 &lt; c.radius &lt; 5 * textWidth;</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">   c;</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">}]]></text>
            <node id="CL5GTfEcGwk97C8kp-554"><text><![CDATA[Size and placement is optional]]></text></node>
          </node>
          <node id="CL5GTfEcGwk97C8kp-538">
            <text><![CDATA[Intersect(a, b) =&gt; {</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">  guess a.position, b.position, a.radius, b.radius;</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">  min_area = min(Area(a), Area(b));</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">  overlap_percent = overlap(a, b) / min_area;</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">  enforce 0.1 &lt;= overlap_percent &lt;= 0.6;</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">  encourage overlap_percent = 0.2;</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">  todo: encourage that the label do not overlap anything</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">}]]></text>
            <node id="CL5GTfEcGwk97C8kp-543"><text><![CDATA[When two sets intersect, aim to make the overlap between them 20% of the areas, but at least 5%]]></text></node>
            <node id="CL5GTfEcGwk97C8kp-559"><text><![CDATA[This implicitly should result in the x and y coordinates to change]]></text></node>
          </node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-426">
        <text><![CDATA[Constraints]]></text>
        <node id="CLOziinFIwPhOTOLL-429" smiley="sad">
          <text><![CDATA[Integer constraints]]></text>
          <node id="CLOziinFIwPhOTOLL-448"><text><![CDATA[This is so much work, probably not at all worth it]]></text></node>
          <node id="CLOziinFIwPhOTOLL-434">
            <text><![CDATA[Survey and using ML]]></text>
            <node id="CLOziinFIwPhOTOLL-437"><text><![CDATA[https://arxiv.org/abs/2111.06257]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-440">
            <text><![CDATA[Book on integer programming]]></text>
            <node id="CLOziinFIwPhOTOLL-443"><text><![CDATA[https://www.amazon.de/-/en/Laurence-Wolsey/dp/1119606535/ref=sr_1_2?crid=1XBK9NJJBJ5VJ&amp;keywords=integer+programming&amp;qid=1641203925&amp;sprefix=integer+programming%2Caps%2C74&amp;sr=8-2]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-451"><text><![CDATA[Find libraries instead]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-454" smiley="neutral">
          <text><![CDATA[Cassowary constraint]]></text>
          <node id="CLOziinFIwPhOTOLL-567"><text><![CDATA[Complicated, still slow with many constraints]]></text></node>
          <node id="CLOziinFIwPhOTOLL-457"><text><![CDATA[https://en.wikipedia.org/wiki/Cassowary_(software)]]></text></node>
          <node id="CLOziinFIwPhOTOLL-523"><text><![CDATA[https://dl.acm.org/doi/10.1145/504704.504705]]></text></node>
          <node id="CLOziinFIwPhOTOLL-526"><text><![CDATA[Based on minimizing a weighted cost of errors in a tuple]]></text></node>
          <node id="CLOziinFIwPhOTOLL-531">
            <text><![CDATA[Based on the simplex algorithm]]></text>
            <node id="CLOziinFIwPhOTOLL-534"><text><![CDATA[But made incremental and allow negative values]]></text></node>
            <node id="CLOziinFIwPhOTOLL-543"><text><![CDATA[Augmented simplex]]></text></node>
            <node id="CLOziinFIwPhOTOLL-546"><text><![CDATA[Basically, solve those that are positive, and after that, use those solutions to define the negative ones]]></text></node>
            <node id="CLOziinFIwPhOTOLL-554"><text><![CDATA[Requires substitions for inequalities - newid]]></text></node>
            <node id="CLOziinFIwPhOTOLL-549"><text><![CDATA[Requires Gauss Jordan elimination]]></text></node>
            <node id="CLOziinFIwPhOTOLL-564"><text><![CDATA[Uses a lot of math to isolate variables]]></text></node>
          </node>
        </node>
        <node id="CLOziinFIwPhOTOLL-982">
          <text><![CDATA[Libraries]]></text>
          <node id="CLOziinFIwPhOTOLL-985"><text><![CDATA[Gurobi]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-463">
        <text><![CDATA[Layout DSL]]></text>
        <node id="CLOziinFIwPhOTOLL-466">
          <text><![CDATA[Layx]]></text>
          <node id="CLOziinFIwPhOTOLL-469"><text><![CDATA[http://www.layx.org/]]></text></node>
          <node id="CLOziinFIwPhOTOLL-472"><text><![CDATA[Boxes are defined in layers]]></text></node>
          <node id="CLOziinFIwPhOTOLL-475">
            <text><![CDATA[There are rules relating the different places of the rectangles]]></text>
            <node id="CLOziinFIwPhOTOLL-478"><text><![CDATA[right = left + width</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">bottom = top + height</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">centerX = (left + right) / 2 = left + width / 2</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">centerY = (top + bottom) / 2 = top + height / 2]]></text></node>
            <node id="CLOziinFIwPhOTOLL-481"><text><![CDATA[Hierarchy of layers. Multiple objects can be in the same layer]]></text></node>
            <node id="CLOziinFIwPhOTOLL-484">
              <text><![CDATA[Coordinates can be related to each other]]></text>
              <node id="CLOziinFIwPhOTOLL-501"><text><![CDATA[By name]]></text></node>
              <node id="CLOziinFIwPhOTOLL-504">
                <text><![CDATA[Operators]]></text>
                <node id="CLOziinFIwPhOTOLL-487"><text><![CDATA[children[n] - nth child]]></text></node>
                <node id="CLOziinFIwPhOTOLL-490"><text><![CDATA[super(n) - ancestor]]></text></node>
                <node id="CLOziinFIwPhOTOLL-495"><text><![CDATA[prev(n) - sibling]]></text></node>
                <node id="CLOziinFIwPhOTOLL-498"><text><![CDATA[next(n) - sibling]]></text></node>
              </node>
            </node>
            <node id="CLOziinFIwPhOTOLL-514"><text><![CDATA[Constraints are linear]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-517"><text><![CDATA[Has definitions of functions]]></text></node>
          <node id="CLOziinFIwPhOTOLL-520"><text><![CDATA[The cassowary constraint solver is 5000 of lines, or even more]]></text></node>
          <node id="CLOziinFIwPhOTOLL-583"><text><![CDATA[The constraint language is kind of nice and mathematical, but still low level from a design point of view]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-926" priority="1">
          <text><![CDATA[More explicit]]></text>
          <node id="CLOziinFIwPhOTOLL-929"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/882262.882353]]></text></node>
          <node id="CLOziinFIwPhOTOLL-932"><text><![CDATA[Has parameterized templates, each with a score and preconditions]]></text></node>
          <node id="CLOziinFIwPhOTOLL-937">
            <text><![CDATA[Three phases]]></text>
            <node id="CLOziinFIwPhOTOLL-940"><text><![CDATA[Evaluates all template preconditions to find the applicable ones]]></text></node>
            <node id="CLOziinFIwPhOTOLL-945"><text><![CDATA[Layout the overall elements and then flow the content into those]]></text></node>
          </node>
        </node>
        <node id="CLOziinFIwPhOTOLL-1059" priority="1">
          <text><![CDATA[Genetic algorithm for layout]]></text>
          <node id="CLOziinFIwPhOTOLL-1062"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3461730]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1074">
            <text><![CDATA[Cost function]]></text>
            <node id="CLOziinFIwPhOTOLL-1065"><text><![CDATA[Metric is based on global grid lines]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1068"><text><![CDATA[Fitt&apos;s law is used to assess placement of subsequent elements]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1071"><text><![CDATA[Metric for size clutter and color clutter]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1080"><text><![CDATA[Element size for saliency - important stuff should draw attention]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1083"><text><![CDATA[Element color for saliency]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1086">
            <text><![CDATA[Representation]]></text>
            <node id="CLOziinFIwPhOTOLL-1089"><text><![CDATA[Placement and color for each element]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1093"><text><![CDATA[We could do a better set of metrics based on an overall hybrid approach]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-1161" priority="1">
          <text><![CDATA[Web layout with integer programming]]></text>
          <node id="CLOziinFIwPhOTOLL-1164"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3461735]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1169">
            <text><![CDATA[Goes for a perfect grid layout]]></text>
            <node id="CLOziinFIwPhOTOLL-1175"><text><![CDATA[Based on a simpliied CSS grid]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1178"><text><![CDATA[Bool: Element is on the same row as previous element]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1181"><text><![CDATA[Bool: Element has the same width as previous element]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1184"><text><![CDATA[Bool: Element is not on same row, or not the same width]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1172"><text><![CDATA[Has a scoring function which looks at the ideal placement compared to the initial design]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1187"><text><![CDATA[Uses Fitts law and selection time as optimization criteria for usability]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1190"><text><![CDATA[Has different criteria for asthetics and usability, with astethics winning more often]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1200"><text><![CDATA[Uses constraint solver to find the variables to use]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-949">
          <text><![CDATA[Overall review of approaches]]></text>
          <node id="CLOziinFIwPhOTOLL-952"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/1600193.1600217]]></text></node>
          <node id="CLOziinFIwPhOTOLL-955"><text><![CDATA[TODO: Read]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-1007">
          <text><![CDATA[Taxonomy of how designers really do layout]]></text>
          <node id="CLOziinFIwPhOTOLL-1010"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3025453.3025718]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1019">
            <text><![CDATA[Graphical substrates]]></text>
            <node id="CLOziinFIwPhOTOLL-1016"><text><![CDATA[Systems]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1013"><text><![CDATA[Principles]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1024"><text><![CDATA[Architectures]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1027"><text><![CDATA[Structures]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1030"><text><![CDATA[Rules]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1033"><text><![CDATA[Constraints]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1038">
            <text><![CDATA[Relationships]]></text>
            <node id="CLOziinFIwPhOTOLL-1041"><text><![CDATA[Concept]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1044"><text><![CDATA[Content]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1047"><text><![CDATA[Context]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1050"><text><![CDATA[Spatial]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1053"><text><![CDATA[Temporal]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1056"><text><![CDATA[Unfortunately, not much was proposed in terms of concrete things]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-958">
          <text><![CDATA[Automatic layout]]></text>
          <node id="CLOziinFIwPhOTOLL-976"><text><![CDATA[Provides a way to make a layout from just a bunch of semantic elements]]></text></node>
          <node id="CLOziinFIwPhOTOLL-988"><text><![CDATA[https://userinterfaces.aalto.fi/grids/]]></text></node>
          <node id="CLOziinFIwPhOTOLL-961"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3313831.3376553]]></text></node>
          <node id="CLOziinFIwPhOTOLL-995">
            <text><![CDATA[Metrics]]></text>
            <node id="CLOziinFIwPhOTOLL-964"><text><![CDATA[Alignment]]></text></node>
            <node id="CLOziinFIwPhOTOLL-967"><text><![CDATA[Rectangular outline]]></text></node>
            <node id="CLOziinFIwPhOTOLL-970"><text><![CDATA[Placement]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-973"><text><![CDATA[Uses MILP constraint for these metrics and use them to optimize placement and sizes]]></text></node>
          <node id="CLOziinFIwPhOTOLL-979"><text><![CDATA[Hints can be given to approximately where they should go]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-998">
          <text><![CDATA[Constraints with or]]></text>
          <node id="CLOziinFIwPhOTOLL-1001"><text><![CDATA[https://dl.acm.org/doi/abs/10.1145/3313831.3376610]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1004"><text><![CDATA[Seems constraint solver struggle with OR, so heuristics are required]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-1096">
          <text><![CDATA[Decor]]></text>
          <node id="CLOziinFIwPhOTOLL-1099"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/2786805.2786808]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1102"><text><![CDATA[Tool with language for specifying layouts with alternatives and good &quot;fixups&quot; for how to improve things]]></text></node>
        </node>
      </node>
      <node id="CL5GTfEcGwk97C8kp-1107">
        <text><![CDATA[OpenSCAD]]></text>
        <node id="CL5GTfEcGwk97C8kp-1110"><text><![CDATA[Basically a functional language, without lambdas]]></text></node>
        <node id="CL5GTfEcGwk97C8kp-1135">
          <text><![CDATA[Syntax]]></text>
          <node id="CL5GTfEcGwk97C8kp-1113">
            <text><![CDATA[Has bag/set comprehensions]]></text>
            <node id="CL5GTfEcGwk97C8kp-1130"><text><![CDATA[has &quot;concatA&quot; of the final result with the &quot;for each exp&quot; syntax]]></text></node>
          </node>
          <node id="CL5GTfEcGwk97C8kp-1119">
            <text><![CDATA[ranges]]></text>
            <node id="CL5GTfEcGwk97C8kp-1122"><text><![CDATA[[ start : end ]]]></text></node>
            <node id="CL5GTfEcGwk97C8kp-1125"><text><![CDATA[[ start : incremental : end ]]]></text></node>
          </node>
          <node id="CL5GTfEcGwk97C8kp-1116">
            <text><![CDATA[Has named parameters in call syntax]]></text>
            <node id="CL5GTfEcGwk97C8kp-1140"><text><![CDATA[Circle(radius : number)]]></text></node>
          </node>
          <node id="CL5GTfEcGwk97C8kp-1143"><text><![CDATA[Has default parameters in functions]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-1205">
        <text><![CDATA[Summary]]></text>
        <node id="CLOziinFIwPhOTOLL-1208">
          <text><![CDATA[CSS grid as the foundation]]></text>
          <node id="CLQoLtDNKL4X0dDfb-399"><text><![CDATA[Figure out an expression based way to &quot;build up&quot; a CSS grid from small pieces]]></text></node>
          <node id="CLQoLtDNKL4X0dDfb-402">
            <text><![CDATA[Css grid has]]></text>
            <node id="CLQoLtDNKL4X0dDfb-405"><text><![CDATA[x columns]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-408"><text><![CDATA[y rows]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-416"><text><![CDATA[a cell has colspan/rowspan]]></text></node>
          </node>
        </node>
        <node id="CLQoLtDNKL4X0dDfb-419">
          <text><![CDATA[Proposal]]></text>
          <node id="CLQoLtDNKL4X0dDfb-422"><text><![CDATA[Material]]></text></node>
          <node id="CLQoLtDNKL4X0dDfb-425">
            <text><![CDATA[Operators]]></text>
            <node id="CLQoLtDNKL4X0dDfb-428"><text><![CDATA[cols X, Y]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-474"><text><![CDATA[baseline X, Y]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-431"><text><![CDATA[lines X, Y]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-434"><text><![CDATA[colspan X]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-437"><text><![CDATA[rowspan Y]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-491"><text><![CDATA[zorder X Y]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-505">
              <text><![CDATA[cssgrid]]></text>
              <node id="CLQoLtDNKL4X0dDfb-508"><text><![CDATA[elements]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-511"><text><![CDATA[border]]></text></node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-546"><text><![CDATA[definitions/lambdas]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-446">
              <text><![CDATA[ordering/headers]]></text>
              <node id="CLQoLtDNKL4X0dDfb-488"><text><![CDATA[Repeat Move North Until X]]></text></node>
              <node id="CLQoLtDNKL4X0dDfb-469">
                <text><![CDATA[Direction based]]></text>
                <node id="CLQoLtDNKL4X0dDfb-440">
                  <text><![CDATA[north]]></text>
                  <node id="CLQoLtDNKL4X0dDfb-466"><text><![CDATA[Moves upwards]]></text></node>
                </node>
                <node id="CLQoLtDNKL4X0dDfb-449"><text><![CDATA[south]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-454"><text><![CDATA[west]]></text></node>
                <node id="CLQoLtDNKL4X0dDfb-463"><text><![CDATA[east]]></text></node>
              </node>
            </node>
          </node>
          <node id="CLQoLtDNKL4X0dDfb-962"><text><![CDATA[Bind names and structured values]]></text></node>
          <node id="CLQoLtDNKL4X0dDfb-965"><text><![CDATA[&quot;layer&quot; x.shape &quot;below&quot; x.text]]></text></node>
          <node id="CLQoLtDNKL4X0dDfb-968"><text><![CDATA[x.shape = Circle { properties }]]></text></node>
          <node id="CLQoLtDNKL4X0dDfb-516">
            <text><![CDATA[Building a nested table]]></text>
            <node id="CLQoLtDNKL4X0dDfb-519"><text><![CDATA[[Top colspan=2 ]</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">[Col1     | Col2    ]</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">[ Data1 | Data2 ]</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">[ Data3  | Line1 </FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">                Line2</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">                Line3]]]></text></node>
            <node id="CLQoLtDNKL4X0dDfb-525">
              <text><![CDATA[Json]]></text>
              <node id="CLQoLtDNKL4X0dDfb-528"><text><![CDATA[[ top:[ col1:Data1, col2:Data2 ],  top:[col1:Data3, col2:[Line1, Line2, Line3 ] ] ]]]></text></node>
            </node>
            <node id="CLQoLtDNKL4X0dDfb-538">
              <text><![CDATA[Operator based]]></text>
              <node id="CLQoLtDNKL4X0dDfb-541"><text><![CDATA[(data1@heading(col1) , data2@heading(col2))@heading(top) <FONT KERNING="1">\n</FONT></FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">data3@heading(col1) , (Line1 \n Line2 <FONT KERNING="1">\n</FONT> Line3)]]></text></node>
            </node>
          </node>
        </node>
        <node id="CLOziinFIwPhOTOLL-578"><text><![CDATA[Add some simple optimizer on top, maybe just explicit search datalog style, combined with genetic algorithm?]]></text></node>
        <node id="CLOziinFIwPhOTOLL-1211"><text><![CDATA[Cost function a combination of a bunch of stuff, including Fitts, aesthetics, readability, etc.]]></text></node>
        <node id="CLOziinFIwPhOTOLL-1214">
          <text><![CDATA[Design]]></text>
          <node id="CLOziinFIwPhOTOLL-1217">
            <text><![CDATA[Operators]]></text>
            <node id="CLOziinFIwPhOTOLL-1242">
              <text><![CDATA[CSS grid with alignment]]></text>
              <node id="CLOziinFIwPhOTOLL-1250"><text><![CDATA[X times Y cells]]></text></node>
              <node id="CLOziinFIwPhOTOLL-1292">
                <text><![CDATA[cells]]></text>
                <node id="CLOziinFIwPhOTOLL-1253"><text><![CDATA[spanning cols/rows, with content placed aligned like this]]></text></node>
                <node id="CLOziinFIwPhOTOLL-1297"><text><![CDATA[xalignment : double]]></text></node>
                <node id="CLOziinFIwPhOTOLL-1303">
                  <text><![CDATA[baselineOffset : double]]></text>
                  <node id="CLOziinFIwPhOTOLL-1306"><text><![CDATA[Maybe not offset, maybe something else]]></text></node>
                </node>
                <node id="CLOziinFIwPhOTOLL-1300"><text><![CDATA[yalignment : double]]></text></node>
                <node id="CLOziinFIwPhOTOLL-1311"><text><![CDATA[content : operator]]></text></node>
              </node>
            </node>
            <node id="CLOziinFIwPhOTOLL-1228">
              <text><![CDATA[Layer]]></text>
              <node id="CLOziinFIwPhOTOLL-1278"><text><![CDATA[list of operators]]></text></node>
            </node>
            <node id="CLOziinFIwPhOTOLL-1234">
              <text><![CDATA[Paragraph]]></text>
              <node id="CLOziinFIwPhOTOLL-1281"><text><![CDATA[list of operators]]></text></node>
            </node>
            <node id="CLOziinFIwPhOTOLL-1259">
              <text><![CDATA[Alternatives]]></text>
              <node id="CLOziinFIwPhOTOLL-1284"><text><![CDATA[list of operators]]></text></node>
            </node>
            <node id="CLOziinFIwPhOTOLL-1324"><text><![CDATA[If-then-else]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1268">
              <text><![CDATA[Material]]></text>
              <node id="CLOziinFIwPhOTOLL-1287"><text><![CDATA[as is]]></text></node>
            </node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1256">
            <text><![CDATA[Oracle variables - refering to fields of these operators]]></text>
            <node id="CLOziinFIwPhOTOLL-1314"><text><![CDATA[The point being that the elements can have variables as the field level]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1319"><text><![CDATA[Basically, it has to be a small set of integers]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1271"><text><![CDATA[Formulas between variables]]></text></node>
          <node id="CL5GTfEcGwk97C8kp-574"><text><![CDATA[Basically, consider layout a compilation problem with oracles that enforce conditions and encourage specific properties]]></text></node>
        </node>
      </node>
    </node>
    <node id="CLOziinFIwPhOTOLL-36">
      <text><![CDATA[Database]]></text>
      <node id="CLOziinFIwPhOTOLL-57">
        <text><![CDATA[Pipeline]]></text>
        <node id="CLOziinFIwPhOTOLL-54"><text><![CDATA[Relational algebra]]></text></node>
        <node id="CLOziinFIwPhOTOLL-51"><text><![CDATA[Bag comprehensions]]></text></node>
        <node id="CLOziinFIwPhOTOLL-60">
          <text><![CDATA[Tight code]]></text>
          <node id="CLOziinFIwPhOTOLL-75">
            <text><![CDATA[Operators]]></text>
            <node id="CLOziinFIwPhOTOLL-78"><text><![CDATA[https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://db.in.tum.de/~kohn/papers/lolepops-sigmod21.pdf&amp;ved=2ahUKEwj4qsiLwIj1AhXxSfEDHVGcAzYQFnoECAQQAQ&amp;usg=AOvVaw15WgdNsnqW1Uta5TBuMUv9]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-92">
            <text><![CDATA[Algebra for statistic analysis]]></text>
            <node id="CLOziinFIwPhOTOLL-95"><text><![CDATA[https://dl.acm.org/doi/10.1145/3468791.3472264]]></text></node>
          </node>
          <node id="CLOziinFIwPhOTOLL-98">
            <text><![CDATA[NF2 algebra for rel. algebra]]></text>
            <node id="CLOziinFIwPhOTOLL-101"><text><![CDATA[https://dl.acm.org/doi/10.1145/2882903.2915241]]></text></node>
          </node>
        </node>
        <node id="CLY6TFKHelpDZb4ka-706">
          <text><![CDATA[Algebraic properties]]></text>
          <node id="CLY6TFKHelpDZb4ka-711">
            <text><![CDATA[Monoidic operators can be distributed]]></text>
            <node id="CLY6TFKHelpDZb4ka-714"><text><![CDATA[count]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-717"><text><![CDATA[sum]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-720"><text><![CDATA[minima, maxima]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-723"><text><![CDATA[gcd]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-726"><text><![CDATA[head]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-729">
              <text><![CDATA[pair]]></text>
              <node id="CLY6TFKHelpDZb4ka-732"><text><![CDATA[mean is thus count, sum pair]]></text></node>
            </node>
            <node id="CLY6TFKHelpDZb4ka-735">
              <text><![CDATA[sorted list]]></text>
              <node id="CLY6TFKHelpDZb4ka-738"><text><![CDATA[with this median is easier]]></text></node>
            </node>
          </node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-83">
        <text><![CDATA[Data structures]]></text>
        <node id="CLOziinFIwPhOTOLL-42"><text><![CDATA[B tree]]></text></node>
        <node id="CLOziinFIwPhOTOLL-45"><text><![CDATA[Bloom filters]]></text></node>
        <node id="CLOziinFIwPhOTOLL-48"><text><![CDATA[Hash tables]]></text></node>
      </node>
      <node id="CLOziinFIwPhOTOLL-129">
        <text><![CDATA[Cardinality estimation]]></text>
        <node id="CLOziinFIwPhOTOLL-135">
          <text><![CDATA[Background]]></text>
          <node id="CLOziinFIwPhOTOLL-132"><text><![CDATA[https://www.youtube.com/watch?v=S5C4yJJTQBs&amp;list=PL3xUNnH4TdbsfndCMn02BqAAgGB0z7cwq&amp;index=145]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-144">
          <text><![CDATA[AKMV is recommended in this survey]]></text>
          <node id="CLOziinFIwPhOTOLL-141"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3186728.3164145]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-147">
          <text><![CDATA[AKMV is defined here]]></text>
          <node id="CLOziinFIwPhOTOLL-150"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/1562764.1562787]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-153" priority="1">
          <text><![CDATA[Refined further here]]></text>
          <node id="CLOziinFIwPhOTOLL-158"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3448016.3458456]]></text></node>
          <node id="CLOziinFIwPhOTOLL-411"><text><![CDATA[TODO: Survey and figure out how to implement]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-104">
        <text><![CDATA[Research]]></text>
        <node id="CLOziinFIwPhOTOLL-114">
          <text><![CDATA[Coq formalization of SQL and rel. algebra with bag and null]]></text>
          <node id="CLOziinFIwPhOTOLL-107"><text><![CDATA[https://dl.acm.org/doi/10.1145/3293880.3294107]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-86">
        <text><![CDATA[Existing systems]]></text>
        <node id="CLOziinFIwPhOTOLL-89"><text><![CDATA[https://umbra-db.com/</FONT></P><P ALIGN="LEFT"><FONT SIZE="16" COLOR="#000000">https://github.com/omnisci/omniscidb]]></text></node>
        <node id="CLY6TFKHelpDZb4ka-743">
          <text><![CDATA[https://github.com/looker-open-source/malloy]]></text>
          <node id="CLY6TFKHelpDZb4ka-746">
            <text><![CDATA[operators]]></text>
            <node id="CLY6TFKHelpDZb4ka-749"><text><![CDATA[group by]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-752"><text><![CDATA[aggregate]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-755">
              <text><![CDATA[project]]></text>
              <node id="CLY6TFKHelpDZb4ka-758"><text><![CDATA[~ select]]></text></node>
            </node>
            <node id="CLY6TFKHelpDZb4ka-771">
              <text><![CDATA[top N]]></text>
              <node id="CLY6TFKHelpDZb4ka-774"><text><![CDATA[order by desc, with limit, and the following aggregate defines what metric to use]]></text></node>
            </node>
            <node id="CLY6TFKHelpDZb4ka-779">
              <text><![CDATA[where]]></text>
              <node id="CLY6TFKHelpDZb4ka-782"><text><![CDATA[filtering]]></text></node>
            </node>
            <node id="CLY6TFKHelpDZb4ka-785"><text><![CDATA[join_one]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-763"><text><![CDATA[All outputs have names]]></text></node>
          <node id="CLY6TFKHelpDZb4ka-766"><text><![CDATA[&quot;views&quot; can be defined in things called &quot;explore object&quot;s]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-63">
        <text><![CDATA[CRDTs]]></text>
        <node id="CLOziinFIwPhOTOLL-66"><text><![CDATA[Have a semantic core in the language for algebras]]></text></node>
        <node id="CLOziinFIwPhOTOLL-392">
          <text><![CDATA[Library]]></text>
          <node id="CLOziinFIwPhOTOLL-395"><text><![CDATA[https://github.com/automerge/automerge]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-369">
          <text><![CDATA[Time]]></text>
          <node id="CLOziinFIwPhOTOLL-372"><text><![CDATA[https://drops.dagstuhl.de/opus/volltexte/2020/12983/pdf/LIPIcs-TIME-2020-15.pdf]]></text></node>
          <node id="CLOziinFIwPhOTOLL-375"><text><![CDATA[DSL for modelling time on various computers]]></text></node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-18">
        <text><![CDATA[Reltables UI]]></text>
        <node id="CLOziinFIwPhOTOLL-1327" priority="1">
          <text><![CDATA[Ultorg]]></text>
          <node id="CLOziinFIwPhOTOLL-1330"><text><![CDATA[https://www.youtube.com/watch?v=tGzJ8F9rC1s]]></text></node>
          <node id="CL6FQ9TGsqfZ28ZuL-667"><text><![CDATA[http://people.csail.mit.edu/ebakke/research/sieuferd_sigmod2016.pdf]]></text></node>
        </node>
        <node id="CLOziinFIwPhOTOLL-1105" priority="1">
          <text><![CDATA[SuperSQL]]></text>
          <node id="CLOziinFIwPhOTOLL-1108"><text><![CDATA[https://dl.acm.org/doi/pdf/10.1145/3011141.3011162]]></text></node>
          <node id="CLOziinFIwPhOTOLL-1111">
            <text><![CDATA[Has succinct syntax for visual operators]]></text>
            <node id="CL6FQ9TGsqfZ28ZuL-314"><text><![CDATA[, ! % [], []! []%]]></text></node>
          </node>
          <node id="CL6FQ9TGsqfZ28ZuL-384">
            <text><![CDATA[Syntax]]></text>
            <node id="CL6FQ9TGsqfZ28ZuL-350">
              <text><![CDATA[exp]]></text>
              <node id="CL6FQ9TGsqfZ28ZuL-353">
                <text><![CDATA[string]]></text>
                <node id="CL6FQ9TGsqfZ28ZuL-428"><text><![CDATA[Constant string]]></text></node>
              </node>
              <node id="CL6FQ9TGsqfZ28ZuL-381">
                <text><![CDATA[connector]]></text>
                <node id="CL6FQ9TGsqfZ28ZuL-356">
                  <text><![CDATA[&quot;,&quot;]]></text>
                  <node id="CL6FQ9TGsqfZ28ZuL-359"><text><![CDATA[cols2]]></text></node>
                </node>
                <node id="CL6FQ9TGsqfZ28ZuL-362">
                  <text><![CDATA[&quot;!&quot;]]></text>
                  <node id="CL6FQ9TGsqfZ28ZuL-365"><text><![CDATA[lines2]]></text></node>
                </node>
                <node id="CL6FQ9TGsqfZ28ZuL-368">
                  <text><![CDATA[&quot;%&quot;]]></text>
                  <node id="CL6FQ9TGsqfZ28ZuL-371">
                    <text><![CDATA[groups]]></text>
                    <node id="CL6FQ9TGsqfZ28ZuL-464"><text><![CDATA[Z order]]></text></node>
                  </node>
                </node>
              </node>
              <node id="CL6FQ9TGsqfZ28ZuL-467">
                <text><![CDATA[repeaters]]></text>
                <node id="CL6FQ9TGsqfZ28ZuL-378">
                  <text><![CDATA[&quot;[&quot; exp &quot;]&quot; connector]]></text>
                  <node id="CL6FQ9TGsqfZ28ZuL-431">
                    <text><![CDATA[Repeat and present in the connector way]]></text>
                    <node id="CL6FQ9TGsqfZ28ZuL-471"><text><![CDATA[[ ], is multicols]]></text></node>
                    <node id="CL6FQ9TGsqfZ28ZuL-472"><text><![CDATA[[ ]! is multilines]]></text></node>
                    <node id="CL6FQ9TGsqfZ28ZuL-473"><text><![CDATA[[ ]% is multigroup]]></text></node>
                  </node>
                </node>
                <node id="CL6FQ9TGsqfZ28ZuL-458">
                  <text><![CDATA[&quot;[&quot; exp &quot;]&quot; connector integer &quot;%&quot;]]></text>
                  <node id="CL6FQ9TGsqfZ28ZuL-461"><text><![CDATA[Pagination: Do integer at a time, but otherwise, do pagination]]></text></node>
                </node>
                <node id="CL6FQ9TGsqfZ28ZuL-401">
                  <text><![CDATA[&quot;[&quot; exp &quot;]&quot; <FONT KERNING="1">connector integer connector</FONT>]]></text>
                  <node id="CL6FQ9TGsqfZ28ZuL-434"><text><![CDATA[2d table of the exp values]]></text></node>
                  <node id="CL6FQ9TGsqfZ28ZuL-478"><text><![CDATA[This repeats the elements with the combiner &lt;connector1&gt; for the integer number of times, after which the &lt;connector2&gt; is used, and continuously]]></text></node>
                  <node id="CL6FQ9TGsqfZ28ZuL-479"><text><![CDATA[[name] , 3 ! means we will list names 3 at a time per line, and then make a new line for the following, thus making a table of 3 columns for names, and the number of lines required]]></text></node>
                </node>
                <node id="CL6FQ9TGsqfZ28ZuL-391">
                  <text><![CDATA[&quot;{&quot; exp &quot;}&quot; connector]]></text>
                  <node id="CL6FQ9TGsqfZ28ZuL-437"><text><![CDATA[Reverse ordering]]></text></node>
                </node>
              </node>
              <node id="CL6FQ9TGsqfZ28ZuL-404">
                <text><![CDATA[exp &quot;@&quot; &quot;{&quot; attributes &quot;}&quot;]]></text>
                <node id="CL6FQ9TGsqfZ28ZuL-425"><text><![CDATA[Annotating attributes]]></text></node>
              </node>
              <node id="CL6FQ9TGsqfZ28ZuL-440">
                <text><![CDATA[id &quot;(&quot; args &quot;)&quot;]]></text>
                <node id="CL6FQ9TGsqfZ28ZuL-443"><text><![CDATA[Call to builtin]]></text></node>
              </node>
            </node>
            <node id="CL6FQ9TGsqfZ28ZuL-419">
              <text><![CDATA[attributes]]></text>
              <node id="CL6FQ9TGsqfZ28ZuL-422"><text><![CDATA[list-of-attribute &quot;,&quot;]]></text></node>
              <node id="CL6FQ9TGsqfZ28ZuL-407">
                <text><![CDATA[attribute]]></text>
                <node id="CL6FQ9TGsqfZ28ZuL-410"><text><![CDATA[id &quot;=&quot; string]]></text></node>
              </node>
            </node>
            <node id="CL6FQ9TGsqfZ28ZuL-448">
              <text><![CDATA[args]]></text>
              <node id="CL6FQ9TGsqfZ28ZuL-451"><text><![CDATA[list-of-exp &quot;,&quot;]]></text></node>
            </node>
          </node>
          <node id="CL6FQ9TGsqfZ28ZuL-482">
            <text><![CDATA[Semantic model]]></text>
            <node id="CL6FQ9TGsqfZ28ZuL-485"><text><![CDATA[It seems it is just a big cartesian product, and then the grouping it handled on the client side from the nested repeaters]]></text></node>
          </node>
          <node id="CL6FQ9TGsqfZ28ZuL-474">
            <text><![CDATA[Examples]]></text>
            <node id="CLOziinFIwPhOTOLL-1138"><text><![CDATA[[ e.team, e.name ]! is a table]]></text></node>
            <node id="CLOziinFIwPhOTOLL-1141"><text><![CDATA[[ e.team, [e.name!] ]! is a grouping table]]></text></node>
          </node>
          <node id="CL6FQ9TGsqfZ28ZuL-275">
            <text><![CDATA[The general form is]]></text>
            <node id="CL6FQ9TGsqfZ28ZuL-278"><text><![CDATA[GENERATE HTML &lt;exp&gt; FROM &lt;tables&gt; WHERE &lt;condition&gt; ORDER BY ...]]></text></node>
            <node id="CL6FQ9TGsqfZ28ZuL-281">
              <text><![CDATA[GENERATE HTML [e.team, e.name]! FROM employee e]]></text>
              <node id="CL6FQ9TGsqfZ28ZuL-284"><text><![CDATA[Generates a normal table with two columns with team and name for each]]></text></node>
            </node>
            <node id="CL6FQ9TGsqfZ28ZuL-287">
              <text><![CDATA[GENERATE HTML [e.team, [e.name]! ]! FROM employee e]]></text>
              <node id="CL6FQ9TGsqfZ28ZuL-290"><text><![CDATA[Does a &quot;group by&quot; on the teams, and generates a table with two columns, but where the second column contains a list of names per team]]></text></node>
            </node>
          </node>
          <node id="CLOziinFIwPhOTOLL-1154"><text><![CDATA[Critique: Users said it was not flexible enough for fine-tuning and exceptional cases]]></text></node>
          <node id="CL6FQ9TGsqfZ28ZuL-488">
            <text><![CDATA[Critique for Ultorg]]></text>
            <node id="CL6FQ9TGsqfZ28ZuL-491"><text><![CDATA[Seems we can not have multiple groupings going on in seperate columns]]></text></node>
          </node>
        </node>
        <node id="CL6FQ9TGsqfZ28ZuL-754">
          <text><![CDATA[The challenge is that we have to have a correspondance between the nested columns in the header and the rows]]></text>
          <node id="CL6FQ9TGsqfZ28ZuL-770"><text><![CDATA[The goal is to construct a global table for the entire nested structure, using colspans]]></text></node>
          <node id="CL6FQ9TGsqfZ28ZuL-773"><text><![CDATA[We do not have colspan in Material, so probably best to go directly to HTML]]></text></node>
        </node>
      </node>
    </node>
    <node id="CLOziinFIwPhOTOLL-323">
      <text><![CDATA[Research]]></text>
      <node id="CLOziinFIwPhOTOLL-326">
        <text><![CDATA[FSCD conference]]></text>
        <node id="CLOziinFIwPhOTOLL-331"><text><![CDATA[<FONT SIZE="16" COLOR="#000000" LETTERSPACING="0" KERNING="1">https://drops.dagstuhl.de/opus/portals/lipics/index.php?semnr=16198</FONT>]]></text></node>
      </node>
      <node id="CLOziinFIwPhOTOLL-363">
        <text><![CDATA[List of various conferences]]></text>
        <node id="CLOziinFIwPhOTOLL-366"><text><![CDATA[https://drops.dagstuhl.de/opus/institut_lipics.php]]></text></node>
      </node>
    </node>
    <node id="CLOziinFIwPhOTOLL-378">
      <text><![CDATA[Speedrun plan]]></text>
      <node id="CLOziinFIwPhOTOLL-381" taskCompletion="100"><text><![CDATA[Define a simple expression language]]></text></node>
      <node id="CL1aRVymTFfP3UWui-1355">
        <text><![CDATA[Grow the language]]></text>
        <node id="CL1aRVymTFfP3UWui-1358" taskCompletion="75">
          <text><![CDATA[records]]></text>
          <node id="CLL6y6OylCNYzRnuH-641"><text><![CDATA[Just a tuple at runtime]]></text></node>
          <node id="CLL6y6OylCNYzRnuH-1289"><text><![CDATA[And constructors, as well as functions]]></text></node>
        </node>
        <node id="CL1aRVymTFfP3UWui-1361" taskCompletion="75">
          <text><![CDATA[arrays]]></text>
          <node id="CL1aRVymTFfP3UWui-1375"><text><![CDATA[Figure out how we can represent these at runtime in a smarter way]]></text></node>
          <node id="CL1aRVymTFfP3UWui-1383"><text><![CDATA[Introduce &quot;native&quot; in dslast?]]></text></node>
        </node>
        <node id="CL1aRVymTFfP3UWui-1364">
          <text><![CDATA[structs]]></text>
          <node id="CLL6y6OylCNYzRnuH-1283"><text><![CDATA[Basically a kind of records?]]></text></node>
        </node>
        <node id="CLpsir8ikNRslEmVh-491" taskCompletion="75">
          <text><![CDATA[Implement bag comprehensions over lists]]></text>
          <node id="CL5GTfEcGwk97C8kp-588"><text><![CDATA[Generalize rules]]></text></node>
        </node>
        <node id="CL1aRVymTFfP3UWui-1370"><text><![CDATA[figure out how language elements can result in different backend representations]]></text></node>
      </node>
      <node id="CL5GTfEcGwk97C8kp-592"><text><![CDATA[Typechecking?]]></text></node>
      <node id="CLOziinFIwPhOTOLL-384" priority="1">
        <text><![CDATA[Implement the incremental lambda]]></text>
        <node id="CLOziinFIwPhOTOLL-387"><text><![CDATA[http://maude.ucm.es/wpte20/papers/WPTE_2020_morihata.pdf]]></text></node>
      </node>
      <node id="CLOziinFIwPhOTOLL-401"><text><![CDATA[Design Layout DSL]]></text></node>
      <node id="CLouDuGGUYdS46yM6-527">
        <text><![CDATA[OpenSCAD]]></text>
        <node id="CLouDuGGUYdS46yM6-530">
          <text><![CDATA[Base it on highlevel constructive geometry]]></text>
          <node id="CLouDuGGUYdS46yM6-741">
            <text><![CDATA[2d Primitives]]></text>
            <node id="CLouDuGGUYdS46yM6-744"><text><![CDATA[https://www.iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm]]></text></node>
          </node>
          <node id="CLouDuGGUYdS46yM6-537">
            <text><![CDATA[3d Primitives]]></text>
            <node id="CLouDuGGUYdS46yM6-534"><text><![CDATA[https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm]]></text></node>
            <node id="CLouDuGGUYdS46yM6-540">
              <text><![CDATA[Spheres]]></text>
              <node id="CLouDuGGUYdS46yM6-615"><text><![CDATA[Sphere]]></text></node>
              <node id="CLouDuGGUYdS46yM6-610"><text><![CDATA[Cut sphere]]></text></node>
              <node id="CLouDuGGUYdS46yM6-607"><text><![CDATA[Solid angle]]></text></node>
              <node id="CLouDuGGUYdS46yM6-618"><text><![CDATA[Cut hollow sphere]]></text></node>
              <node id="CLouDuGGUYdS46yM6-621"><text><![CDATA[Death Star]]></text></node>
              <node id="CLouDuGGUYdS46yM6-627"><text><![CDATA[Ellipsoid]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-604">
              <text><![CDATA[Boxes]]></text>
              <node id="CLouDuGGUYdS46yM6-543"><text><![CDATA[Box]]></text></node>
              <node id="CLouDuGGUYdS46yM6-546"><text><![CDATA[Rounded box]]></text></node>
              <node id="CLouDuGGUYdS46yM6-549"><text><![CDATA[Box frame]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-552"><text><![CDATA[Torus]]></text></node>
            <node id="CLouDuGGUYdS46yM6-555"><text><![CDATA[Capped torus]]></text></node>
            <node id="CLouDuGGUYdS46yM6-582"><text><![CDATA[Capsule - &quot;rounded line&quot;]]></text></node>
            <node id="CLouDuGGUYdS46yM6-558">
              <text><![CDATA[Link]]></text>
              <node id="CLouDuGGUYdS46yM6-561"><text><![CDATA[as chain elements]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-599">
              <text><![CDATA[Cylinders]]></text>
              <node id="CLouDuGGUYdS46yM6-564"><text><![CDATA[Infinite cylinder]]></text></node>
              <node id="CLouDuGGUYdS46yM6-602"><text><![CDATA[Capped cylinder]]></text></node>
              <node id="CLouDuGGUYdS46yM6-603"><text><![CDATA[Rounded cylinder]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-591">
              <text><![CDATA[Cones]]></text>
              <node id="CLouDuGGUYdS46yM6-570"><text><![CDATA[Cone]]></text></node>
              <node id="CLouDuGGUYdS46yM6-573"><text><![CDATA[Infinite cone]]></text></node>
              <node id="CLouDuGGUYdS46yM6-596"><text><![CDATA[Capped cone]]></text></node>
              <node id="CLouDuGGUYdS46yM6-624"><text><![CDATA[Round cone]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-630">
              <text><![CDATA[Polyhedra]]></text>
              <node id="CLouDuGGUYdS46yM6-567"><text><![CDATA[Infinite plane]]></text></node>
              <node id="CLouDuGGUYdS46yM6-642"><text><![CDATA[Triangle]]></text></node>
              <node id="CLouDuGGUYdS46yM6-645"><text><![CDATA[Quad]]></text></node>
              <node id="CLouDuGGUYdS46yM6-576"><text><![CDATA[Hexagonal prism]]></text></node>
              <node id="CLouDuGGUYdS46yM6-579"><text><![CDATA[Triangular prism]]></text></node>
              <node id="CLouDuGGUYdS46yM6-633"><text><![CDATA[Rhombus]]></text></node>
              <node id="CLouDuGGUYdS46yM6-636"><text><![CDATA[Octahedron]]></text></node>
              <node id="CLouDuGGUYdS46yM6-639"><text><![CDATA[Pyramid]]></text></node>
            </node>
          </node>
          <node id="CLouDuGGUYdS46yM6-648">
            <text><![CDATA[Operations]]></text>
            <node id="CLouDuGGUYdS46yM6-750"><text><![CDATA[https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm]]></text></node>
            <node id="CLouDuGGUYdS46yM6-700">
              <text><![CDATA[Euclidian]]></text>
              <node id="CLouDuGGUYdS46yM6-705"><text><![CDATA[Rotation]]></text></node>
              <node id="CLouDuGGUYdS46yM6-708"><text><![CDATA[Translation]]></text></node>
              <node id="CLouDuGGUYdS46yM6-711"><text><![CDATA[Scaling]]></text></node>
              <node id="CLouDuGGUYdS46yM6-714"><text><![CDATA[Symmetry]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-685">
              <text><![CDATA[CSG]]></text>
              <node id="CLouDuGGUYdS46yM6-688"><text><![CDATA[Union]]></text></node>
              <node id="CLouDuGGUYdS46yM6-691"><text><![CDATA[Subtraction]]></text></node>
              <node id="CLouDuGGUYdS46yM6-694"><text><![CDATA[Intersection]]></text></node>
              <node id="CLouDuGGUYdS46yM6-697">
                <text><![CDATA[Smooth version of all of these also exist]]></text>
                <node id="CLouDuGGUYdS46yM6-738"><text><![CDATA[https://www.iquilezles.org/www/articles/smin/smin.htm]]></text></node>
              </node>
            </node>
            <node id="CLouDuGGUYdS46yM6-651">
              <text><![CDATA[Elongation]]></text>
              <node id="CLouDuGGUYdS46yM6-654">
                <text><![CDATA[Cuts an object in half, moves them apart, and connects them]]></text>
                <node id="CLouDuGGUYdS46yM6-657"><text><![CDATA[Capsule is an elongated sphere]]></text></node>
              </node>
            </node>
            <node id="CLouDuGGUYdS46yM6-660">
              <text><![CDATA[Rounding]]></text>
              <node id="CLouDuGGUYdS46yM6-663"><text><![CDATA[Just reduce the distance - does not preserve volume]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-666">
              <text><![CDATA[Onion]]></text>
              <node id="CLouDuGGUYdS46yM6-670"><text><![CDATA[Hollows out objects to make them &quot;shells&quot; of a given thickness]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-673"><text><![CDATA[Revolution of 2d shapes]]></text></node>
            <node id="CLouDuGGUYdS46yM6-679"><text><![CDATA[Extrusion of 2d shapes]]></text></node>
            <node id="CLouDuGGUYdS46yM6-717">
              <text><![CDATA[Repetitions]]></text>
              <node id="CLouDuGGUYdS46yM6-720"><text><![CDATA[Infinite]]></text></node>
              <node id="CLouDuGGUYdS46yM6-723"><text><![CDATA[Finite repetition]]></text></node>
            </node>
            <node id="CLouDuGGUYdS46yM6-729">
              <text><![CDATA[Deformations]]></text>
              <node id="CLouDuGGUYdS46yM6-726"><text><![CDATA[Displacements]]></text></node>
              <node id="CLouDuGGUYdS46yM6-732"><text><![CDATA[Twist]]></text></node>
              <node id="CLouDuGGUYdS46yM6-735"><text><![CDATA[Bend]]></text></node>
            </node>
          </node>
        </node>
        <node id="CL1aRVymTFfP3UWui-598">
          <text><![CDATA[Math required]]></text>
          <node id="CL1aRVymTFfP3UWui-620">
            <text><![CDATA[Types]]></text>
            <node id="CL1aRVymTFfP3UWui-602"><text><![CDATA[vec2]]></text></node>
            <node id="CL1aRVymTFfP3UWui-605"><text><![CDATA[vec3]]></text></node>
            <node id="CL1aRVymTFfP3UWui-623">
              <text><![CDATA[mat2]]></text>
              <node id="CL1aRVymTFfP3UWui-629"><text><![CDATA[mat2x2]]></text></node>
            </node>
            <node id="CL1aRVymTFfP3UWui-632">
              <text><![CDATA[mat3]]></text>
              <node id="CL1aRVymTFfP3UWui-635"><text><![CDATA[mat3x3]]></text></node>
            </node>
            <node id="CL1aRVymTFfP3UWui-693">
              <text><![CDATA[bvec]]></text>
              <node id="CL1aRVymTFfP3UWui-696"><text><![CDATA[Binary vector]]></text></node>
              <node id="CL1aRVymTFfP3UWui-699"><text><![CDATA[Used for polygons]]></text></node>
            </node>
          </node>
          <node id="CL1aRVymTFfP3UWui-608"><text><![CDATA[length]]></text></node>
          <node id="CL1aRVymTFfP3UWui-611"><text><![CDATA[abs]]></text></node>
          <node id="CL1aRVymTFfP3UWui-650"><text><![CDATA[sign]]></text></node>
          <node id="CL1aRVymTFfP3UWui-614"><text><![CDATA[max]]></text></node>
          <node id="CL1aRVymTFfP3UWui-617"><text><![CDATA[min]]></text></node>
          <node id="CL1aRVymTFfP3UWui-656"><text><![CDATA[sqrt]]></text></node>
          <node id="CL1aRVymTFfP3UWui-638"><text><![CDATA[clamp]]></text></node>
          <node id="CL1aRVymTFfP3UWui-687"><text><![CDATA[sin]]></text></node>
          <node id="CL1aRVymTFfP3UWui-690"><text><![CDATA[cos]]></text></node>
          <node id="CL1aRVymTFfP3UWui-712"><text><![CDATA[pow]]></text></node>
          <node id="CL1aRVymTFfP3UWui-641"><text><![CDATA[dot]]></text></node>
          <node id="CL1aRVymTFfP3UWui-653"><text><![CDATA[dot2]]></text></node>
          <node id="CL1aRVymTFfP3UWui-644">
            <text><![CDATA[ndot]]></text>
            <node id="CL1aRVymTFfP3UWui-647"><text><![CDATA[not sure what this is]]></text></node>
          </node>
        </node>
        <node id="CL1aRVymTFfP3UWui-659">
          <text><![CDATA[WebGL]]></text>
          <node id="CL1aRVymTFfP3UWui-707" priority="1" taskCompletion="100"><text><![CDATA[Structs/records]]></text></node>
          <node id="CL1aRVymTFfP3UWui-662"><text><![CDATA[Add grammar to parse the subset used in the code]]></text></node>
          <node id="CL1aRVymTFfP3UWui-665"><text><![CDATA[Function declaration]]></text></node>
          <node id="CL1aRVymTFfP3UWui-668"><text><![CDATA[Type id = value, id = value, ... ;]]></text></node>
          <node id="CL1aRVymTFfP3UWui-671"><text><![CDATA[? for if]]></text></node>
          <node id="CL1aRVymTFfP3UWui-674"><text><![CDATA[return]]></text></node>
          <node id="CL1aRVymTFfP3UWui-677"><text><![CDATA[+= -= *=]]></text></node>
          <node id="CL1aRVymTFfP3UWui-684"><text><![CDATA[p.x = ...]]></text></node>
          <node id="CL1aRVymTFfP3UWui-702"><text><![CDATA[fixed-size arrays used for polygon]]></text></node>
        </node>
        <node id="CLouDuGGUYdS46yM6-754"><text><![CDATA[Compile these objects to shadertoy]]></text></node>
        <node id="CLouDuGGUYdS46yM6-757">
          <text><![CDATA[Example object]]></text>
          <node id="CLouDuGGUYdS46yM6-760"><text><![CDATA[https://github.com/knielsen/pov3d_cad/blob/master/spindle_mount2_v5.scad]]></text></node>
          <node id="CLouDuGGUYdS46yM6-763">
            <text><![CDATA[This in principle has three fixed objects:]]></text>
            <node id="CLouDuGGUYdS46yM6-766"><text><![CDATA[The transparent plate]]></text></node>
            <node id="CLouDuGGUYdS46yM6-769"><text><![CDATA[The electronics]]></text></node>
            <node id="CLouDuGGUYdS46yM6-772"><text><![CDATA[The battery]]></text></node>
            <node id="CLouDuGGUYdS46yM6-775"><text><![CDATA[The rest could in principle be &quot;inferred&quot; by the system]]></text></node>
            <node id="CLouDuGGUYdS46yM6-778"><text><![CDATA[The metric is to ensure that the inertial moment is within given bounds, and that the system has a given strength]]></text></node>
          </node>
        </node>
      </node>
      <node id="CLOziinFIwPhOTOLL-404"><text><![CDATA[Reltable]]></text></node>
      <node id="CLpsir8ikNRslEmVh-977">
        <text><![CDATA[Questions]]></text>
        <node id="CLpsir8ikNRslEmVh-980">
          <text><![CDATA[How to run the code?]]></text>
          <node id="CLpsir8ikNRslEmVh-983">
            <text><![CDATA[JS with eval?]]></text>
            <node id="CLpsir8ikNRslEmVh-989"><text><![CDATA[How to grab values out back into the flow world?]]></text></node>
            <node id="CLC6GzNrKLKcqdcfL-982"><text><![CDATA[Should we do a flow to DslAst?]]></text></node>
          </node>
          <node id="CLpsir8ikNRslEmVh-992"><text><![CDATA[Make a real compiler out of this stuff, so code is first compiled]]></text></node>
        </node>
      </node>
      <node id="CLY6TFKHelpDZb4ka-640">
        <text><![CDATA[Todo]]></text>
        <node id="CLY6TFKHelpDZb4ka-788">
          <text><![CDATA[Generalize]]></text>
          <node id="CLY6TFKHelpDZb4ka-791">
            <text><![CDATA[parse : string -&gt; AST]]></text>
            <node id="CLY6TFKHelpDZb4ka-802"><text><![CDATA[Wrap Gringo runtime as native, so we can extend?]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-807"><text><![CDATA[Then it can be AST -&gt; AST, where the starting point is just a string]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-797"><text><![CDATA[desugar, lower, optimize : AST -&gt; AST, but with symbol table]]></text></node>
          <node id="CLY6TFKHelpDZb4ka-815">
            <text><![CDATA[We have the &quot;lift&quot; thing which is used after some operations]]></text>
            <node id="CL9BASVqwDBb7unZT-779"><text><![CDATA[That is a &quot;native&quot; functino which goes from AST to AST. Maybe it can be rewritten in Lambda?]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-794">
            <text><![CDATA[compile : AST -&gt; string]]></text>
            <node id="CLY6TFKHelpDZb4ka-810"><text><![CDATA[This can also be AST -&gt; AST, since a string is in the language]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-643"><text><![CDATA[Generalize compiler to be based on lowering]]></text></node>
          <node id="CLY6TFKHelpDZb4ka-646"><text><![CDATA[Generalize parsing to be a native?]]></text></node>
          <node id="CLY6TFKHelpDZb4ka-649"><text><![CDATA[Add symbol table for lowering, so named function default values can be registered and retrieved at compile time]]></text></node>
          <node id="CL9BASVqwDBb7unZT-724">
            <text><![CDATA[Is the main loop of everything written in Lambda?]]></text>
            <node id="CL9BASVqwDBb7unZT-732"><text><![CDATA[Are languages defined in Lambda itself?]]></text></node>
            <node id="CL9BASVqwDBb7unZT-738">
              <text><![CDATA[Can languages be defined in lambda itself?]]></text>
              <node id="CL9BASVqwDBb7unZT-735"><text><![CDATA[Yes, that seems reasonable]]></text></node>
              <node id="CL9BASVqwDBb7unZT-741"><text><![CDATA[At that point, we can use DSL in Concert]]></text></node>
            </node>
            <node id="CL9BASVqwDBb7unZT-745"><text><![CDATA[Figure out how to refactor DslLanguage to be some other structure, which is maybe simpler]]></text></node>
            <node id="CL9BASVqwDBb7unZT-748">
              <text><![CDATA[Special parts are:]]></text>
              <node id="CL9BASVqwDBb7unZT-754"><text><![CDATA[GTerm]]></text></node>
              <node id="CL9BASVqwDBb7unZT-751"><text><![CDATA[Tree&lt;string, int&gt; for costs]]></text></node>
            </node>
            <node id="CL9BASVqwDBb7unZT-757">
              <text><![CDATA[Plan]]></text>
              <node id="CL9BASVqwDBb7unZT-760"><text><![CDATA[Introduce natives]]></text></node>
              <node id="CL9BASVqwDBb7unZT-763"><text><![CDATA[Provide functions for interfacing with Gringo]]></text></node>
              <node id="CL9BASVqwDBb7unZT-768">
                <text><![CDATA[Provide functinos for interfacting with a tree]]></text>
                <node id="CL9BASVqwDBb7unZT-774"><text><![CDATA[Tree&lt;string, DslAst&gt; should be good enough]]></text></node>
              </node>
            </node>
          </node>
          <node id="CL9BASVqwDBb7unZT-782">
            <text><![CDATA[Language constituents]]></text>
            <node id="CL9BASVqwDBb7unZT-785"><text><![CDATA[parser]]></text></node>
            <node id="CL9BASVqwDBb7unZT-788"><text><![CDATA[desugaring/lowering should be combined]]></text></node>
            <node id="CL9BASVqwDBb7unZT-791"><text><![CDATA[optimization should be combined]]></text></node>
            <node id="CL9BASVqwDBb7unZT-794"><text><![CDATA[runtime]]></text></node>
            <node id="CL9BASVqwDBb7unZT-797"><text><![CDATA[compilers]]></text></node>
          </node>
          <node id="CL9BASVqwDBb7unZT-802">
            <text><![CDATA[Language registry]]></text>
            <node id="CL9BASVqwDBb7unZT-807"><text><![CDATA[Languages]]></text></node>
            <node id="CL9BASVqwDBb7unZT-810"><text><![CDATA[Language modifications]]></text></node>
          </node>
        </node>
        <node id="CLY6TFKHelpDZb4ka-654">
          <text><![CDATA[Typing]]></text>
          <node id="CLY6TFKHelpDZb4ka-657"><text><![CDATA[Consider whether this is &quot;compile-time&quot; annotations and we basically run the code]]></text></node>
          <node id="CLY6TFKHelpDZb4ka-660">
            <text><![CDATA[See how Idris 2 does it with multiplicity annotations]]></text>
            <node id="CLY6TFKHelpDZb4ka-666"><text><![CDATA[0 means this &quot;type&quot; has to be evaluated at compile time]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-669"><text><![CDATA[1 is linear typing]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-673"><text><![CDATA[* is infinite typing]]></text></node>
          </node>
          <node id="CL9BASVqwDBb7unZT-705"><text><![CDATA[Make sure we can run code at compile time for various things, but ensure that it &quot;completes&quot; at compile time]]></text></node>
          <node id="CL9BASVqwDBb7unZT-710"><text><![CDATA[So typing is compile time evaluation, with some annotation that the calculation has to complete]]></text></node>
          <node id="CL9BASVqwDBb7unZT-714"><text><![CDATA[Import is defining a record of names, or a &quot;with&quot;-style kind of thing]]></text></node>
          <node id="CL9BASVqwDBb7unZT-717"><text><![CDATA[Figure out a language construct for import]]></text></node>
        </node>
        <node id="CLY6TFKHelpDZb4ka-825">
          <text><![CDATA[Languages]]></text>
          <node id="CLY6TFKHelpDZb4ka-676">
            <text><![CDATA[GLSL]]></text>
            <node id="CLY6TFKHelpDZb4ka-679"><text><![CDATA[Requires types to really work]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-683">
            <text><![CDATA[Imperative]]></text>
            <node id="CLY6TFKHelpDZb4ka-686"><text><![CDATA[while/break requires symbol ids, and free var extraction]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-689"><text><![CDATA[Typing]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-692">
            <text><![CDATA[Markdown]]></text>
            <node id="CLY6TFKHelpDZb4ka-695"><text><![CDATA[Port the existing Markdown grammar]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-822">
            <text><![CDATA[Concert]]></text>
            <node id="CLY6TFKHelpDZb4ka-828">
              <text><![CDATA[formulas]]></text>
              <node id="CLY6TFKHelpDZb4ka-856"><text><![CDATA[formula id := exp]]></text></node>
              <node id="CLY6TFKHelpDZb4ka-859"><text><![CDATA[formula id = exp]]></text></node>
            </node>
            <node id="CLY6TFKHelpDZb4ka-862"><text><![CDATA[:= for set of named variables]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-831"><text><![CDATA[named values]]></text></node>
            <node id="CLY6TFKHelpDZb4ka-834">
              <text><![CDATA[quote @exp]]></text>
              <node id="CLY6TFKHelpDZb4ka-840">
                <text><![CDATA[eval(quoute) =&gt; evaluate unquotes]]></text>
                <node id="CLY6TFKHelpDZb4ka-843"><text><![CDATA[quote unpeels quote]]></text></node>
                <node id="CLY6TFKHelpDZb4ka-846">
                  <text><![CDATA[unquote]]></text>
                  <node id="CLY6TFKHelpDZb4ka-849"><text><![CDATA[eval of the body]]></text></node>
                </node>
              </node>
            </node>
            <node id="CLY6TFKHelpDZb4ka-837"><text><![CDATA[unquote $exp]]></text></node>
            <node id="CL9BASVqwDBb7unZT-729"><text><![CDATA[How to integrate?]]></text></node>
          </node>
          <node id="CLY6TFKHelpDZb4ka-698">
            <text><![CDATA[Content]]></text>
            <node id="CLY6TFKHelpDZb4ka-701"><text><![CDATA[Figure out some notation for RIF with markdown]]></text></node>
          </node>
        </node>
      </node>
    </node>
  </node>
</mindmap>