import tools/dsl/registry/dsl_transformation;
import tools/dsl/dsl_tracing;

export {
	// Facility to register transformations for the language facility
	registerDslTransformation(d : DslTransformation) -> void;
	getDslTransformations(phase : string) -> [DslTransformation];

	registerDslLanguageRuntime(lang : DslLanguage, runtime : Tree<string, DslAst>) -> void;
	getDslLanguageRuntime(lang : DslLanguage) -> Tree<string, DslAst>;
}

// Lookup from phase to transformations
dslTransformationsPhases : ref Tree<string, [DslTransformation]> = ref makeTree();

registerDslTransformation(d : DslTransformation) -> void {
	if (isDslTracing(d.specification, d.phase)) {
		println("Registering '" + d.phase + "' for " + dslLanguage2string(d.specification));
	}
	dslTransformationsPhases := treePushToArrayValue(^dslTransformationsPhases, d.phase, d);
}

getDslTransformations(phase : string) -> [DslTransformation] {
	getTreeArrayValue(^dslTransformationsPhases, phase)
}

registerDslLanguageRuntime(lang : DslLanguage, runtime : Tree<string, DslAst>) -> void {
	dslLanguageRuntime := setTree(^dslLanguageRuntime, lang, runtime);
}

dslLanguageRuntime : ref Tree<DslLanguage, Tree<string, DslAst>> = ref makeTree();

getDslLanguageRuntime(lang : DslLanguage) -> Tree<string, DslAst> {
	lookupTreeDef(^dslLanguageRuntime, lang, makeTree())
}
