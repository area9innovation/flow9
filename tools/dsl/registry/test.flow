import tools/dsl/registry/dsl_run;
import tools/dsl/registry/dsl_lowering;

main() {
	registerDslParser("value", << 
		exp = double | int | "true" ws | "false" ws;
		ws exp
	>>, ["ws", "int", "double"]);

	registerDslParserExtension("list", <<
		exp = exp | '[' ws exps ']' ws  $"array_1";

		exps = $"nil" exp $"cons" ("," ws exp $"cons")* ("," ws)? 
			| $"nil";
	>>);

	registerDslLowering("desugar", "|-list", "value-list", "value", ";", <<
		[ 1 ] => 1;
	>>);

	if (false) {
		// We start with a program in text
		input = DslAstEnv("value-list-syntax", DslString(" [1] "), makeTree(), "");
		printDslAstEnv(input);

		// Then parse it
		output = performDslTransformations("parse", "value-list", input);
		printDslAstEnv(output);

		// The desugar it
		output2 = performDslTransformations("desugar", "value", output);
		printDslAstEnv(output2);
	}

	println(prettyDsl(evalDslProgram("value-list", " [ 2, 1 ] ")));

	quit(0);
}

printDslAstEnv(e : DslAstEnv) -> void {
	println(e.language + ": " + e.error);
	println(prettyDsl(e.ast));
	println("");
}
