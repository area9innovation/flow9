import sys/system;
import math/stringmath;
import tools/common/config;
import tools/common/logging;
import tools/flowc_lsp/lsp_protocol;

runLspServer(conf : Tree<string, string>) -> void {
	out_cb = \st, msg -> {
		lspServerLog("Response[" + d2st((timestamp() - st) / 1000.0, 2) + " s.]: " + escapeStr(msg), conf);
		//lspServerLog("Response[" + d2st((timestamp() - st) / 1000.0, 2) + " s.]:\n--------------\n" + msg + "\n----------\n\n", conf);
		print(msg);
	}
	loop_cb = \-> runLspServer(conf);
	exit_cb = \-> {
		lspServerLog("Console server stopped.", conf);
		quit(0);
	}
	switch (lspReadRequest()) {
		Some(req): {
			lspServerLog("Request: " + escapeStr(req.request), conf);
			start_time = timestamp();
			json = lspDecodeJsonRequest(req.json);
			if (json == JsonNull()) {
				lspServerLog("WARNING: Illegal request:\n" + req.request, conf);
				loop_cb();
			} else {
				lspProcessRequest(conf, json, 
					\msg -> out_cb(start_time, msg), 
					loop_cb, 
					exit_cb
				);
			}
		}
		None(): {
			lspServerLog("Failed to read a request.", conf);
			loop_cb();
		}
	}
}

main() {
	conf = getAllUrlConfig();
	conf_str = strGlue(lspConf2ConsoleArgs(conf), " ");
	lspServerLog("LSP server started in: " + resolveRelativePath(".") + " directory, conf: '" + conf_str + "'", conf);
	runLspServer(conf);
}
