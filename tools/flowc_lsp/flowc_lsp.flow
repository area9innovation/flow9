import math/stringmath;
import tools/flowc_lsp/lsp_protocol;

runLspServer(lsp_conf : Tree<string, string>) -> void {
	out_cb = \st, msg -> {
		lspServerLog("Response[" + d2st((timestamp() - st) / 1000.0, 2) + " s.]: " + escapeStr(msg), lsp_conf);
		print(msg);
	}
	loop_cb = \-> runLspServer(lsp_conf);
	exit_cb = \-> {
		lspServerLog("Console server stopped.", lsp_conf);
		quit(0);
	}
	switch (lspReadRequest()) {
		Some(req): {
			lspServerLog("Request: " + escapeStr(req.request), lsp_conf);
			start_time = timestamp();
			json = lspDecodeJsonRequest(req.json);
			if (json == JsonNull()) {
				lspServerLog("WARNING: Illegal request:\n" + req.request, lsp_conf);
				loop_cb();
			} else {
				lspProcessRequest(lsp_conf, json, 
					\msg -> out_cb(start_time, msg), 
					loop_cb, 
					exit_cb
				);
			}
		}
		None(): {
			lspServerLog("Failed to read a request.", lsp_conf);
			loop_cb();
		}
	}
}

main() {
	lsp_conf = getAllUrlConfig();
	lsp_conf_str = strGlue(lspConf2ConsoleArgs(lsp_conf), " ");
	lspServerLog("LSP server started in: " + resolveRelativePath(".") + " directory, lsp_conf: '" + lsp_conf_str + "'", lsp_conf);
	runLspServer(lsp_conf);
}
