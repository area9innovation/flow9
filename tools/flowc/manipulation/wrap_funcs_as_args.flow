import tools/flowc/incremental/fitype;
import tools/flowc/backends/common;
import tools/flowc/incremental/fi_helpers;

export {
	// This function will wrap functions arguments (arguments which are in turn global functions) with lambdas
	// i.e. map(arr, fn) where fn is global function will be changed to:
	// map(arr, \elm -> fn(elm))
	fiWasmWrapFuncArgs(prg : FiProgram) -> FiProgram;
}

doWrapFuncArgs(names : FiGlobalNames, ex : FiExp, isArg : bool) {
	processA = \exp0 -> doWrapFuncArgs(names, exp0, true);
	process = \exp0 -> doWrapFuncArgs(names, exp0, false);

	switch (ex) {
		FiBool(b, start): ex;
		FiInt(i, start): ex;
		FiString(s, start): ex;
		FiDouble(d, start): ex;
		FiVoid(start): ex;
		FiVar(name, type, start): {
			if (isArg && fiTypeIsFunction(type) && containsKeyTree(names.toplevel, name)) {
				ftype = cast (type : FiType -> FiTypeFunction);
				fargs = mapi(ftype.args, \i, a -> {
					FiFunArg("__" + name + "__arg__" + i2s(i) + "__" + a.name, a.type);
				}); 
				args = map(fargs, \aaa -> {
					FiVar(aaa.name, aaa.type, 0);
				});

				FiLambda(
					fargs,
					FiCall(ex, args, ftype.returnType, start),
					FiTypeFunction(fargs, ftype.returnType),
					start
				);
			} else {
				ex;
			}
		}
		FiCall(f, args, type, start):
			FiCall(process(f), map(args, \a -> processA(a)), type, start);
		FiSwitch(__, __, __, __, __): 
			FiSwitch(ex with cases = 
				map(ex.cases, \c -> FiCase(c with body = process(c.body))));
		FiLambda(args, body, type, start):
			FiLambda(args, process(body), type, start); 
		FiLet(name, type, e1, e2, type2, start): 
			FiLet(ex with e1 = process(e1), e2 = process(e2));
		FiIf(e1, e2, e3, type, start): 
			FiIf(process(e1), process(e2), process(e3), type, start);
		FiCallPrim(__, es, __, __):
			FiCallPrim(ex with es = map(es, process));
		FiRequire(flowfile, e, type, start):
			FiRequire(flowfile, process(e), type, start);
		FiUnsafe(name, fallback, type, start):
			FiUnsafe(name, process(fallback), type, start);
		FiSeq(es, type, start):
			FiSeq(map(es, process), type, start);
		FiCast(__, __, __, __, __): 
			FiCast(ex with e = process(ex.e));
	}
}

fiWasmWrapFuncArgs(prg : FiProgram) {
	fold(prg.traversal, prg, \program, moduleName -> {
		switch (lookupTree(program.modules, moduleName)) {
			None(): program;
			Some(m): {
				doWrap = \expr -> doWrapFuncArgs(prg.names, expr, false);
				functions0 = map(m.functions, \f : FiFunctionDec -> {
					FiFunctionDec(f with lambda = FiLambda(f.lambda with body = doWrap(f.lambda.body)))
				});

				globalVars = map(m.globalVars, \v -> FiGlobalVar(v with value = doWrap(v.value)));
					
				natives = map(m.natives, \n -> {
					switch (n.fallbackLambda) {
						FiLambda(args, body, type, start): {
							wrapped = doWrap(body);
							if (wrapped != body) {
								FiNativeDec(n with fallbackLambda = FiLambda(args, wrapped, type, start))
							} else n;
						}
						default: n;
					}
				});

				module = FiModule(m with
					functions = functions0,
					globalVars = globalVars,
					natives = natives,
				);

				FiProgram(program with modules = setTree(program.modules, moduleName, module));
			}
		};
	});
}

