import tools/flowc/incremental/fitype;
import tools/flowc/backends/common;
import tools/flowc/incremental/fi_helpers;
import tools/flowc/manipulation/lambda_lifting;
import tools/flowc/manipulation/explicit_casts;

export {
	// this is a general cast-processing pass that does the following:
    // 1. expand implicit casts to and from flow (see explicit_casts)
    // 2. expand type-erasing casts ? -> flow -> ?? to something more manageable whenever possible
	expandCasts(prg : FiProgram) -> FiProgram;
}

recurseTypeErasure(ex : FiExp) -> FiExp {
	switch (ex) {
		FiBool(b, start): ex;
		FiInt(i, start): ex;
		FiString(s, start): ex;
		FiDouble(d, start): ex;
		FiVoid(start): ex;
		FiVar(name, type, start): ex;
		FiCall(f, args, type, start): 
            FiCall(recurseTypeErasure(f), map(args, recurseTypeErasure), type, start);
		FiSwitch(x, switchType, cases, type, start): 
            FiSwitch(x, switchType, map(cases, 
                \c -> FiCase(c.struct, c.argNames, recurseTypeErasure(c.body), c.start)),
                type, start);
		FiLambda(args, body, type, start): 
            FiLambda(args, recurseTypeErasure(body), type, start);
		FiLet(name, type, e1, e2, type2, start): 
            FiLet(name, type, recurseTypeErasure(e1), recurseTypeErasure(e2), type2, start);
		FiIf(e1, e2, e3, type, start): 
            FiIf(recurseTypeErasure(e1), recurseTypeErasure(e2), recurseTypeErasure(e3), type, start);
		FiCallPrim(op, es, type, start): 
            FiCallPrim(op, map(es, recurseTypeErasure), type, start);
		FiRequire(flowfile, e, type, start): 
            FiRequire(flowfile, recurseTypeErasure(e), type, start);
		FiUnsafe(name, fallback, type, start): 
            FiUnsafe(name, recurseTypeErasure(fallback), type, start);
		FiSeq(es, type, start): 
            FiSeq(map(es, recurseTypeErasure), type, start);
		FiCast(e, tFrom, tTo, type, start):
            optimizeFiCast(ex);
	}
}

// this detects things like cast(flow(x): flow -> ??) and calls a routine to optimize those 
optimizeFiCast(ex : FiCast) -> FiExp {
    // println(ex);
    if (ex.tFrom != FiTypeFlow())
        ex
    else switch (ex.e) {
        FiCall(f, args, __, __): switch (f) {
            FiVar(name, __, __): {
                if (startsWith(name, "flow__"))
                    optimizeErasingCast(ex.tTo, args[0], ex)
                else
                    ex;
            }
            default:
                ex;
        }
        default: ex;
    }
}

compareFunctionArgs(args1 : [FiFunArg], args2 : [FiFunArg]) -> bool {
    length(args1) == length(args2) && foldi(args1, true, \i, acc, a -> 
        acc && (a.type == args2[i].type));
}

next_var_name_index = ref 0;

nextName() { 
    name = "__auto__var__name_" + i2s(^next_var_name_index);
    next_var_name_index := ^next_var_name_index + 1;
    name;
}

normalizeFunArgs(args1 : [FiFunArg], args2 : [FiFunArg]) -> [FiFunArg] {
    mapi(args1, \i, a -> {
        name = if (a.name != "") a.name else if (args2[i].name != "") args2[i].name else nextName();
        FiFunArg(name, a.type); 
    });
}

isValidCast(tFrom : FiType, tTo : FiType) {
    tFrom == FiTypeFlow() || tTo == FiTypeFlow() || tFrom == tTo 
        || (tFrom == FiTypeInt() && tTo == FiTypeDouble()) ||
           (tFrom == FiTypeDouble() && tTo == FiTypeInt());
}

optimizeErasingCast(toType : FiType, source: FiExp, original : FiExp) -> FiExp {
    fromType = fiExpType(source);
    switch (fromType) {
        FiTypeFunction(args, returnType): {
            switch (toType) {
                FiTypeFunction(toArgs, toReturnType): {
                    if (compareFunctionArgs(args, toArgs) && isValidCast(returnType, toReturnType)) {
                        if (returnType == toReturnType)
                            source // directly return argument if types actually match
                        else {
                            namedArgs = normalizeFunArgs(args, toArgs);
                            FiLambda(namedArgs, FiCast(
                                FiCall(source, map(namedArgs, \a -> FiVar(a.name, a.type, source.start)),
                                    returnType, source.start),
                                returnType, toReturnType, toReturnType, source.start), 
                            FiTypeFunction(namedArgs, toReturnType), source.start)
                        }
                    } else 
                        original;
                }
                default: original;
            }            
        }
        default: original;
    }
}

expandCasts(prg : FiProgram) {
	fold(prg.traversal, prg, \program, moduleName -> {
		switch (lookupTree(program.modules, moduleName)) {
			None(): program;
			Some(m): {

				functions0 = map(m.functions, \f : FiFunctionDec -> {
                    // we make sure function actually returns what is asked to
                    castedBody = injectFlowCast(f.type.returnType, f.lambda.body);

					FiFunctionDec(f with lambda = 
                        FiLambda(f.lambda with body = recurseTypeErasure(castedBody),
                            type = f.type))
				});

				globalVars = map(m.globalVars, \v -> FiGlobalVar(v with value = 
                    recurseTypeErasure(injectFlowCast(v.type, v.value))));
					
				natives = map(m.natives, \n -> {
					switch (n.fallbackLambda) {
						FiLambda(args, body, type, start): {
							wrapped = recurseTypeErasure(expandFlowCastsExp(body));
							if (wrapped != body) {
								FiNativeDec(n with fallbackLambda = FiLambda(args, wrapped, type, start))
							} else n;
						}
						default: n;
					}
				});

				module = FiModule(m with
					functions = functions0,
					globalVars = globalVars,
					natives = natives,
				);

				FiProgram(program with modules = setTree(program.modules, moduleName, module));
			}
		};
	});
}

