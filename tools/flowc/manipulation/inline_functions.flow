import tools/flowc/incremental/fitype;
import tools/flowc/incremental/fi_helpers;
import tools/flowc/backends/common;
// import tools/flowc/incremental/fi_helpers;

export {
	// This function will make functions inline (those for whom isInline will return true)
	fiInlineFunctions(prg : FiProgram, isInline : (fname : string) -> bool) -> FiProgram;
}

lastInlineVar = ref 0;
getInlineVar(name : string) {
	ret = name + "__inl__" + i2s(^lastInlineVar);
	lastInlineVar := ^lastInlineVar + 1;
	ret;
}

// varmap: <source name, target name>
// this function will rename all vars in partincular function's body in order to avoid 
// variables conficts (i.e. if variable with same name already exists in host function)
doInlineVars(ex : FiExp, varmap : ref Tree<string, string>) {
	process = \exp0 -> doInlineVars(exp0, varmap);

	switch (ex) {
		FiBool(b, start): ex;
		FiInt(i, start): ex;
		FiString(s, start): ex;
		FiDouble(d, start): ex;
		FiVoid(start): ex;
		FiVar(name, type, start): FiVar(lookupTreeDef(^varmap, name, name), type, start);
		FiCall(f, args, type, start): FiCall(process(f), map(args, process), type, start);
		FiSwitch(__, __, __, __, __): 
			FiSwitch(ex with cases = 
				map(ex.cases, \c -> FiCase(c with body = process(c.body))));
		FiLambda(args, body, type, start):
			FiLambda(args, process(body), type, start); 
		FiLet(name, type, e1, e2, type2, start): {
			// rename local vars as well
			vname = getInlineVar(name + "__lcl");
			varmap := setTree(^varmap, name, vname);

			FiLet(ex with name = vname, e1 = process(e1), e2 = process(e2));
		}
		FiIf(e1, e2, e3, type, start): 
			FiIf(process(e1), process(e2), process(e3), type, start);
		FiCallPrim(__, es, __, __):
			FiCallPrim(ex with es = map(es, process));
		FiRequire(flowfile, e, type, start):
			FiRequire(flowfile, process(e), type, start);
		FiUnsafe(name, fallback, type, start):
			FiUnsafe(name, process(fallback), type, start);
		FiSeq(es, type, start):
			FiSeq(map(es, process), type, start);
		FiCast(__, __, __, __, __): 
			FiCast(ex with e = process(ex.e));
	}
}

InlineFunction(
	body : FiExp,
	type : FiTypeFunction
);

// inlines: <name, module, decl>
doInlineFunctions(ex : FiExp, inlines : [Triple<string, string, FiDeclaration>]) {
	// return pair<exp, type> 
	def = InlineFunction(FiVoid(0), FiTypeFunction([], FiTypeVoid()));
	get_inline = \f -> {		
		switch (f) {
			FiVar(fname, type, start): {	
				ret = eitherMap(find(inlines, \i -> i.first == fname), \i -> switch (i.third) {
					FiFunctionDec(__, lambda, ftype, __, __): {
						InlineFunction(lambda.body, ftype);
					}
					FiGlobalVar(__, __, __, __, __): {
						def;
					}
					FiNativeDec(__, __, __, __, fallbackLambda, __, __): {
						switch (fallbackLambda) {
	  						FiLambda(__, __, __, __): { 
	  							ftype = cast(fallbackLambda.type : FiType -> FiTypeFunction);
	  							InlineFunction(fallbackLambda.body, ftype);
	  						}
	  						default: def; 
						}
					}
				}, def);
				// if (ret != def) println("is_inline: " + fname);
				ret;
			}
			default: def;
		};
	};

	process = \exp0 -> doInlineFunctions(exp0, inlines);

	switch (ex) {
		FiBool(b, start): ex;
		FiInt(i, start): ex;
		FiString(s, start): ex;
		FiDouble(d, start): ex;
		FiVoid(start): ex;
		FiVar(name, type, start): ex;
		FiCall(f, args, type, start): {
			inl = get_inline(f);
			if (inl != def) {
				// replace call with function body
				varmap : ref Tree<string, string> = ref makeTree();

				args2var1 = foldi(inl.type.args, [], \i, acc, a -> {
					vname = getInlineVar(a.name);
					varmap := setTree(^varmap, a.name, vname);

					arg = process(args[i]);
					arrayPush(acc, Pair(vname, arg));
				});

				args2var = foldi(args2var1, process(doInlineVars(inl.body, varmap)), \i, acc, m -> {
					FiLet(m.first, fiExpType(m.second), m.second, acc, fiExpType(acc), start);
				});

				args2var;
			} else FiCall(process(f), map(args, process), type, start);
		}
		FiSwitch(__, __, __, __, __): 
			FiSwitch(ex with cases = 
				map(ex.cases, \c -> FiCase(c with body = process(c.body))));
		FiLambda(args, body, type, start):
			FiLambda(args, process(body), type, start); 
		FiLet(name, type, e1, e2, type2, start): 
			FiLet(ex with e1 = process(e1), e2 = process(e2));
		FiIf(e1, e2, e3, type, start): 
			FiIf(process(e1), process(e2), process(e3), type, start);
		FiCallPrim(__, es, __, __):
			FiCallPrim(ex with es = map(es, process));
		FiRequire(flowfile, e, type, start):
			FiRequire(flowfile, process(e), type, start);
		FiUnsafe(name, fallback, type, start):
			FiUnsafe(name, process(fallback), type, start);
		FiSeq(es, type, start):
			FiSeq(map(es, process), type, start);
		FiCast(__, __, __, __, __): 
			FiCast(ex with e = process(ex.e));
	}
}

fiInlineFunctions(prg : FiProgram, isInline : (fname : string) -> bool) -> FiProgram {
	decls: [Pair<string, [FiDeclaration]>] = filtermap(fiCollectDeclarationsCommon(prg), \f -> {
		a = filter(f.second, \ff -> isInline(ff.name));
		if (length(a) > 0) Some(Pair(f.first, a))
		else None();
	});

	inlines : [Triple<string, string, FiDeclaration>] = fold(decls, [], \acc, p -> {
		fold(p.second, acc, \acc2, d -> {
			if (exists(acc2, \a -> a.first == d.name)) acc2
			else arrayPush(acc2, Triple(d.name, p.first, d));
		});
	});

	fold(prg.traversal, prg, \program, moduleName -> {
		switch (lookupTree(program.modules, moduleName)) {
			None(): program;
			Some(m): {
				doInline = \expr, nm -> doInlineFunctions(expr, inlines);

				functions0 = map(m.functions, \f : FiFunctionDec -> {
					FiFunctionDec(f with lambda = FiLambda(f.lambda with body = doInline(f.lambda.body, f.name)))
				});

				globalVars = map(m.globalVars, \v -> FiGlobalVar(v with value = doInline(v.value, v.name)));
					
				natives = map(m.natives, \n -> {
					switch (n.fallbackLambda) {
						FiLambda(args, body, type, start): {
							wrapped = doInline(body, n.name);
							if (wrapped != body) {
								FiNativeDec(n with fallbackLambda = FiLambda(args, wrapped, type, start))
							} else n;
						}
						default: n;
					}
				});

				module = FiModule(m with
					functions = functions0,
					globalVars = globalVars,
					natives = natives,
				);

				// TODO: maybe we have to remove functions from places where it was originally 
				// since they're embedded now (i.e. from FiGlobalNames, FiModule etc)?

				FiProgram(program with modules = setTree(program.modules, moduleName, module));
			}
		};
	});
}