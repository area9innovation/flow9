import tools/flowc/incremental/fiexp;
import tools/flowc/incremental/fi_helpers;
import ds/array;

export {
    // expands casts in a declaration - generates an expanded declaration
	expandFlowCasts(decl : FiDeclaration) -> FiDeclaration;
    // expands casts in an expression
    expandFlowCastsExp(exp : FiExp) -> FiExp;
    // does the expansion itself - injects a cast if needed
    // toType is type to cast to
    injectFlowCast(toType : FiType, expr : FiExp) -> FiExp;
}

getTypeBase(name : string) {
	sep = strIndexOf(name, "___");
	if (sep >= 0) strLeft(name, sep) else name;
}

areTypeVariations(t1 : FiType, t2 : FiType) -> bool {
	switch (t1) {
		FiTypeName(n1, __): switch (t2) {
			FiTypeName(n2, __): {
				name1 = getTypeBase(n1);
				name2 = getTypeBase(n2);
				name1 == name2 && t1 != t2;
			}
			default: false;
		}
		default: false;
	}
}

injectFlowCast(toType : FiType, expr : FiExp) -> FiExp {
	fromType = fiExpType(expr);
	expanded = expandFlowCastsExp(expr);
    // two cases below are treated the same way - just listed separately for clarity
	if (toType == FiTypeFlow() && fromType != FiTypeFlow()) {
		FiCast(expanded, fromType, FiTypeFlow(), FiTypeFlow(), expr.start);
	} else if (toType != FiTypeFlow() && fromType == FiTypeFlow()) {
		FiCast(expanded, FiTypeFlow(), toType, toType, expr.start);
	} else if (toType == FiTypeRef(FiTypeFlow()) || fromType == FiTypeRef(FiTypeFlow())) {        
		// this case implemented for situations as follows:
		// g : ref flow = ref 123;
		// g : ref int = ref flow(123);
        // note that the right expression shall be constant - i.e. ref smth
        // then it is converted to g : ref flow = ref flow(smth)
		t1 = cast(toType : FiType -> FiTypeRef).t;
		t2 = cast(fromType : FiType -> FiTypeRef).t;

		if (t1 == t2) {
			expanded;
		} else {		
	        switch (expr) {
	            FiCallPrim(op, args, typ, __): {
	                switch (op) {
	                    FcRefPrim(): {
	                        arg = args[0];
	                   		v1 = injectFlowCast(t1, arg);
	                		v2 = FiCallPrim(FcRefPrim(), [v1], toType, expr.start);
	                        v2;
	                    }
	                    default: {
	                        println("Cannot convert non-const ref to ref flow: " + toString(op) + "\n    " + toString(toType) + "\n    " + toString(fromType));
	                        expanded;
	                    }                    
	                }
	            }
	            default: {
	                println("Cannot convert non-const ref to ref flow: " + toString(expr));
	                expanded;
	            }
	        }
	    }
	} else if (areTypeVariations(toType, fromType)) {
		// FFn<string, bool> -> FFn(flow, bool)
		//println(toType);
		//println(fromType);
		//println(expr);
		expanded;
	} else
		expanded;
}

expandFlowCasts(decl : FiDeclaration) -> FiDeclaration {
	switch (decl) {
		FiFunctionDec(name, lambda, ftype, declStart, defiStart): {
			newlambda = FiLambda(lambda with type = ftype, body = 
                injectFlowCast(ftype.returnType, lambda.body));
			FiFunctionDec(name, newlambda, ftype, declStart, defiStart);
		}
		FiGlobalVar(name, value, type, declStart, defiStart): {
			FiGlobalVar(name, injectFlowCast(type, value), type, declStart, defiStart);
		}
		FiNativeDec(name, io, type, nativeName, fallbackLambda, declStart, defiStart): {
			decl;
		}
	}
}

expandFlowCastsExp(expr : FiExp) {
	switch (expr) {
		FiLambda(args, body, type, start): {
			functionType = cast(type : FiType -> FiTypeFunction);
			FiLambda(args, injectFlowCast(functionType.returnType, body), type, start);
		}
		FiCall(f, args, type, start): {
			functionType = cast(fiExpType(f) : FiType -> FiTypeFunction);
			FiCall(expandFlowCastsExp(f), 
				zipWith(functionType.args, args, \fa, a -> injectFlowCast(fa.type, a)), 
				type, start);
		}
		FiVar(__, __, __): expr;
		FiLet(x, t, e1, e2, t2, start): 
			FiLet(x, t, injectFlowCast(t, e1), injectFlowCast(t2, e2), t2, start);
		FiIf(e1, e2, e3, type, start): 
			FiIf(expandFlowCastsExp(e1), injectFlowCast(type, e2), injectFlowCast(type, e3), type, start);
		FiSwitch(e0, typ, cs, type, start): 
			FiSwitch(e0, typ, 
				map(cs, \c -> FiCase(c.struct, c.argNames, injectFlowCast(type, c.body), c.start)),
				type, start);
		FiCast(e0, tFrom, tTo, type, start): FiCast(injectFlowCast(tFrom, e0), tFrom, tTo, type, start);
		FiSeq(es, type, start): 
			// injecting cast to last statement if needed
			// for others, just proceed recursively
			FiSeq(mapi(es, 
				\i, e -> if (i != length(es) - 1) expandFlowCastsExp(e) else injectFlowCast(type, e)
			), type, start);
		FiCallPrim(op, es, type, start): {
			type0 = if (length(es) > 0) fiExpType(es[0]) else FiTypeVoid();
			// TODO: might be incorrect for some prims
			if (length(es) > 0) {
				t = if (isSameStructType(type0, FiTypeRef(FiTypeVoid()))) (cast(type0 : FiType -> FiTypeRef)).t else type0;
				FiCallPrim(op, mapi(es, \i, e -> if (i == 0) expandFlowCastsExp(e) else injectFlowCast(t, e)), type, start);
			} else FiCallPrim(op, map(es, expandFlowCastsExp), type, start);
		}
		FiString(__, __): expr;
		FiBool(__, __): expr;
		FiDouble(__, __): expr;
		FiVoid(__): expr;
		FiInt(__, __): expr;
		FiRequire(flowfile2, e2, type, start): FiRequire(flowfile2, injectFlowCast(type, e2), type, start);
		FiUnsafe(name, fallback, type, start): FiUnsafe(name, injectFlowCast(type, fallback), type, start);
	};
}