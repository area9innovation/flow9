import tools/flowc/incremental/fiexp;
import tools/flowc/incremental/fi_helpers;
import ds/set;

export {
	fifreevars(e : FiExp) -> Set<string>;
	fcfreevars(e : FcExp) -> Set<string>;
	// Find what constructors are called, and what types we switch on
	fifreetypes(e : FiExp) -> Set<string>;
}

fifreevars(e : FiExp) -> Set<string> {
	fifreevarsBoundFree(e, makeSet(), makeSet());
}

fifreevarsBoundFree(expr : FiExp, bound : Set<string>, free : Set<string>) -> Set<string> {
	fold_freevars = \es, b, f -> fold(es, f, \acc, e -> fifreevarsBoundFree(e, b, acc));
	switch (expr) {
		FiLambda(args, e, __, __):    fifreevarsBoundFree(e, fold(args, bound, \acc, arg -> insertSet(acc, arg.name)), free);
		FiCall(f, es, __, __):        fold_freevars(es, bound, fifreevarsBoundFree(f, bound, free));
		FiVar(x, __, __):             if (containsSet(bound, x)) free else insertSet(free, x);
		FiLet(x, __, e1, e2, __, __): fifreevarsBoundFree(e2, insertSet(bound, x), fifreevarsBoundFree(e1, bound, free));
		FiIf(e1, e2, e3, __, __):     fold_freevars([e1, e2, e3], bound, free);
		FiSwitch(e, __, cs, __, __):  fold(cs, fifreevarsBoundFree(e, bound, free), \acc, c -> fifreevarsBoundFree(c.body, bound, acc));
		FiCast(e, __, __, __, __):    fifreevarsBoundFree(e, bound, free);
		FiSeq(es, __, __):            fold_freevars(es, bound, free);
		FiCallPrim(__, es, __, __):   fold_freevars(es, bound, free);
		FiString(__, __):             free; // here I would want to match simply on union FcConst
		FiBool(__, __):               free;
		FiDouble(__, __):             free;
		FiVoid(__):                   free;
		FiInt(__, __):                free;
        FiRequire(__, e, __, __):     fifreevarsBoundFree(e, bound, free);
        FiUnsafe(__, fb, __, __):     fifreevarsBoundFree(fb, bound, free);
	}
}

fifreetypes(e : FiExp) -> Set<string> {
	fifreetypesFree(e, makeSet());
}

fifreetypesFree(expr : FiExp, ofree : Set<string>) -> Set<string> {
	fold_freetypes = \es, f -> fold(es, f, \acc, e -> fifreetypesFree(e, acc));
	free = extractTypeNames(ofree, fiExpType(expr));
	switch (expr) {
		FiLambda(args, e, __, __): {
			nfree = fold(args, free, \acc, arg -> {
				extractTypeNames(acc, arg.type)
			});
			fifreetypesFree(e, nfree);
		}
		FiCall(f, es, __, __):        fold_freetypes(es, fifreetypesFree(f, free));
		FiVar(x, __, __):             free;
		FiLet(x, __, e1, e2, __, __): fifreetypesFree(e2, fifreetypesFree(e1, free));
		FiIf(e1, e2, e3, __, __):     fold_freetypes([e1, e2, e3], free);
		FiSwitch(e, t, cs, __, __):  {
			nfree = extractTypeNames(free, t);
			fold(cs, fifreetypesFree(e, nfree), \acc, c -> {
				if (c.struct == "default") fifreetypesFree(c.body, acc)
				else fifreetypesFree(c.body, insertSet(acc, c.struct))
			});
		}
		FiCast(e, f, t, __, __):    {
			// TODO: We could extract types from the casts?
			fifreetypesFree(e, free);
		}
		FiSeq(es, __, __):            fold_freetypes(es, free);
		FiCallPrim(prim, es, __, __):   {
			nfree = switch (prim) {
				FcStructPrim(s): insertSet(free, s);
				default: free;
			};
			fold_freetypes(es, nfree);
		}
		FiString(__, __):             free;
		FiBool(__, __):               free;
		FiDouble(__, __):             free;
		FiVoid(__):                   free;
		FiInt(__, __):                free;
        FiRequire(__, e, __, __):     fifreetypesFree(e, free);
        FiUnsafe(__, fb, __, __):     fifreetypesFree(fb, free);
	}
}



fcfreevars(e : FcExp) -> Set<string> {
	fcfreevarsBoundFree(e, makeSet(), makeSet());
}

fcfreevarsBoundFree(expr : FcExp, bound : Set<string>, free : Set<string>) -> Set<string> {
	fold_freevars = \es, b, f -> fold(es, f, \acc, e -> fcfreevarsBoundFree(e, b, acc));
	switch (expr) {
		FcLambda(args, e, __):    fcfreevarsBoundFree(e, fold(args, bound, \acc, arg -> insertSet(acc, arg.name)), free);
		FcCall(f, es, __):        fold_freevars(es, bound, fcfreevarsBoundFree(f, bound, free));
		FcVar(x, __):             if (containsSet(bound, x)) free else insertSet(free, x);
		FcLet(x, __, e1, e2, __): fcfreevarsBoundFree(e2, insertSet(bound, x), fcfreevarsBoundFree(e1, bound, free));
		FcIf(e1, e2, e3, __):     fold_freevars([e1, e2, e3], bound, free);
		FcSwitch(e, __, cs, __):  fold(cs, fcfreevarsBoundFree(e, bound, free), \acc, c -> fcfreevarsBoundFree(c.body, bound, acc));
		FcCast(e, __, __, __):    fcfreevarsBoundFree(e, bound, free);
		FcSeq(es, __):            fold_freevars(es, bound, free);
		FcCallPrim(__, es, __):   fold_freevars(es, bound, free);
		FcString(__, __):         free; // here I would want to match simply on union FcConst
		FcBool(__, __):           free;
		FcDouble(__, __):         free;
		FcVoid(__):               free;
		FcInt(__, __):            free;
        FcRequire(__, e, __):     fcfreevarsBoundFree(e, bound, free);
        FcUnsafe(__, fb, __):     fcfreevarsBoundFree(fb, bound, free);
	}
}