import tools/flowc/incremental/fiexp;
import ds/hashset;
import math/hash;

export {
	fifreevars(e : FiExp) -> HashSet<string>;
	fcfreevars(e : FcExp) -> HashSet<string>;
}

fifreevars(e : FiExp) -> HashSet<string> {
	fifreevarsBoundFree(e, makeHashSet(fastHashString), makeHashSet(fastHashString));
}

fifreevarsBoundFree(expr : FiExp, bound : HashSet<string>, free : HashSet<string>) -> HashSet<string> {
	fold_freevars = \es, b, f -> fold(es, f, \acc, e -> fifreevarsBoundFree(e, b, acc));
	switch (expr) {
		FiLambda(args, e, __, __):    fifreevarsBoundFree(e, fold(args, bound, \acc, arg -> insertHashSet(acc, arg.name)), free);
		FiCall(f, es, __, __):        fold_freevars(es, bound, fifreevarsBoundFree(f, bound, free));
		FiVar(x, __, __):             if (containsHashSet(bound, x)) free else insertHashSet(free, x);
		FiLet(x, __, e1, e2, __, __): fifreevarsBoundFree(e2, insertHashSet(bound, x), fifreevarsBoundFree(e1, bound, free));
		FiIf(e1, e2, e3, __, __):     fold_freevars([e1, e2, e3], bound, free);
		FiSwitch(e, __, cs, __, __):  fold(cs, fifreevarsBoundFree(e, bound, free), \acc, c -> fifreevarsBoundFree(c.body, bound, acc));
		FiCast(e, __, __, __, __):    fifreevarsBoundFree(e, bound, free);
		FiSeq(es, __, __):            fold_freevars(es, bound, free);
		FiCallPrim(__, es, __, __):   fold_freevars(es, bound, free);
		FiString(__, __):             free; // here I would want to match simply on union FcConst
		FiBool(__, __):               free;
		FiDouble(__, __):             free;
		FiVoid(__):                   free;
		FiInt(__, __):                free;
        FiRequire(__, e, __, __):     fifreevarsBoundFree(e, bound, free);
        FiUnsafe(__, fb, __, __):     fifreevarsBoundFree(fb, bound, free);
	}
}

fcfreevars(e : FcExp) -> HashSet<string> {
	fcfreevarsBoundFree(e, makeHashSet(fastHashString), makeHashSet(fastHashString));
}

fcfreevarsBoundFree(expr : FcExp, bound : HashSet<string>, free : HashSet<string>) -> HashSet<string> {
	fold_freevars = \es, b, f -> fold(es, f, \acc, e -> fcfreevarsBoundFree(e, b, acc));
	switch (expr) {
		FcLambda(args, e, __):    fcfreevarsBoundFree(e, fold(args, bound, \acc, arg -> insertHashSet(acc, arg.name)), free);
		FcCall(f, es, __):        fold_freevars(es, bound, fcfreevarsBoundFree(f, bound, free));
		FcVar(x, __):             if (containsHashSet(bound, x)) free else insertHashSet(free, x);
		FcLet(x, __, e1, e2, __): fcfreevarsBoundFree(e2, insertHashSet(bound, x), fcfreevarsBoundFree(e1, bound, free));
		FcIf(e1, e2, e3, __):     fold_freevars([e1, e2, e3], bound, free);
		FcSwitch(e, __, cs, __):  fold(cs, fcfreevarsBoundFree(e, bound, free), \acc, c -> fcfreevarsBoundFree(c.body, bound, acc));
		FcCast(e, __, __, __):    fcfreevarsBoundFree(e, bound, free);
		FcSeq(es, __):            fold_freevars(es, bound, free);
		FcCallPrim(__, es, __):   fold_freevars(es, bound, free);
		FcString(__, __):         free; // here I would want to match simply on union FcConst
		FcBool(__, __):           free;
		FcDouble(__, __):         free;
		FcVoid(__):               free;
		FcInt(__, __):            free;
        FcRequire(__, e, __):     fcfreevarsBoundFree(e, bound, free);
        FcUnsafe(__, fb, __):     fcfreevarsBoundFree(fb, bound, free);
	}
}
