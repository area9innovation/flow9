import tools/flowc/incremental/fiprogram;
import tools/flowc/incremental/fi_helpers;

export {
	// Collect a set of names of functions with and without side-effects
	collectFiEffects(program : FiProgram) -> FiEffects;

	FiEffects(names : FiGlobalNames, hasEffects : Set<string>, effectFree : Set<string>, config : CompilerConfig);

	// Checks if this name has any side-effects
	hasFiSideEffects(effects : FiEffects, e : FiExp) -> bool;
}

collectFiEffects(program : FiProgram) -> FiEffects {
	fold(program.traversal, FiEffects(program.names, makeSet(), makeSet(), program.config), \acc, name ->
		collectFiModuleEffects(acc, lookupTreeDef(program.modules, name, dummyFiModule))
	)
}

collectFiModuleEffects(acc : FiEffects, module : FiModule) -> FiEffects {
	e1 = fold(module.natives, acc, \acc2 : FiEffects, nat : FiNativeDec -> {
		if (nat.io) {
			FiEffects(acc2 with hasEffects = insertSet(acc2.hasEffects, nat.name))
		} else {
			FiEffects(acc2 with effectFree = insertSet(acc2.effectFree, nat.name))
		}
	});
	e2 = fold(module.globalVars, e1, \acc2 : FiEffects, init : FiGlobalVar -> {
		if (hasFiSideEffects(acc2, init.value)) {
			FiEffects(acc2 with hasEffects = insertSet(acc2.hasEffects, init.name))
		} else {
			FiEffects(acc2 with effectFree = insertSet(acc2.effectFree, init.name))
		}
	});
	fold(module.functions, e2, \acc2 : FiEffects, fn : FiFunctionDec -> {
		if (hasFiSideEffects(acc2, fn.lambda)) {
			FiEffects(acc2 with hasEffects = insertSet(acc2.hasEffects, fn.name))
		} else {
			FiEffects(acc2 with effectFree = insertSet(acc2.effectFree, fn.name))
		}
	});
}

hasFiSideEffects(effects : FiEffects, expr : FiExp) -> bool {
	switch (expr) {
		FiVoid(__): false;
		FiBool(b, __): false;
		FiInt(i, __): false;
		FiDouble(d, __): false;
		FiString(s, __): false;
		FiVar(x, __, __): false;
		FiIf(e1, e2, e3, __, __): haveFiSideEffects(effects, [e1, e2, e3]);
		FiSeq(es, __, __): haveFiSideEffects(effects, es);
		FiCall(fn, args, __, __): {
			fneffect = switch (fn) {
				FiVar(id, __, __): {
					!containsSet(effects.effectFree, id); // If it is a call to something we know does not have an effect, we are good
				}
				FiLambda(__, b, __, __): hasFiSideEffects(effects, b);
				default: true; // Something we do not know what is, so we have to assume this has an effect
			}
			t = haveFiSideEffects(effects, args);
			fneffect || t;
		}
		FiCallPrim(op, args, __, __): {
			t = switch (op) {
				FcOrPrim(): false;
				FcAndPrim(): false;
				FcNotPrim(): false;
				FcEqPrim(): false;
				FcNePrim(): false;
				FcLePrim(): false;
				FcGePrim(): false;
				FcLtPrim(): false;
				FcGtPrim(): false;
				FcPlusPrim(): false;
				FcMinusPrim(): false;
				FcMulPrim(): false;
				FcDivPrim(): false;
				FcModPrim(): false;
				FcNegPrim(): false;
				FcArrayPrim(): false;
				FcIndexPrim(): false;
				FcDerefPrim(): true;
				FcAssignPrim(): true;
				FcRefPrim(): true;
				FcStructPrim(structname): false;
				FcFieldPrim(name): {
					// If this is a mutable field of a struct, we have a problem
					// so find the name of the type
					isFiTypenameFieldMutable(effects.names, fiExpType(args[0]), name, effects.config);
				}
				FcSetMutablePrim(name): true;
				FcCreateClosurePrim(sName, fName) : false;
				FcQuote(): false;
				FcUnquote(): false;
			}
			t || haveFiSideEffects(effects, args);
		}
		FiCast(ex, __, __, __, __): hasFiSideEffects(effects, ex);
		FiLet(x, __, e1, e2, __, __): {
			ef1 = hasFiSideEffects(effects, e1);
			if (ef1) {
				true;
			} else {
				// Let us do name tracking here so more vars are known to be effect free
				ne = FiEffects(effects with effectFree = insertSet(effects.effectFree, x));
				hasFiSideEffects(ne, e2);
			}
		}
		//FiForeign(p, es, __): haveFiSideEffects(effects, es);
		FiLambda(xs, b, __, __): hasFiSideEffects(effects, b);
		FiSwitch(x, __, cases, __, __): haveFiSideEffects(effects, map(cases, \c -> c.body));
		FiRequire(__, e, __, __): hasFiSideEffects(effects, e);
		FiUnsafe(__, __, __, __): true;
	}
}

haveFiSideEffects(effects : FiEffects, es : [FiExp]) -> bool {
	fold(es, false, \acc, e -> {t = hasFiSideEffects(effects, e); acc || t})
}

isFiTypenameFieldMutable(names : FiGlobalNames, type : FiType, field : string, conf : CompilerConfig) -> bool {
	rt = resolveFiTypeName(names, type, conf.threadId);
	switch (rt) {
		FiTypeStruct(n, __, as, __): {
			found = find(as, \f : FiStructArg -> f.name == field);
			switch (found) {
				None(): true; // We could not find this field, so we have to assume it is a mutable field!
				Some(fielddef): fielddef.ismutable; // We found the field, so we can check if it is mutable or not.
			}
		}
		FiTypeUnion(__, __, tnames, __): {
			exists(tnames, \n ->
				isFiTypenameFieldMutable(names, n, field, conf)
			)
		}
	}
}
