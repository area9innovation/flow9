import tools/flowc/backends/common;
import tools/flowc/incremental/fiprogram;
import tools/flowc/manipulation/effects;
import tools/flowc/manipulation/freevars;
import tools/flowc/manipulation/common;
import tools/flowc/flowc_helpers;

export {
	deadFiCode(prog : FiProgram, effects : FiEffects, preserveNames : Set<string>, eliminateNames : Set<string>, removeMain : bool, removeGlobals : bool, verbose : int) -> FiProgram;
}

deadFiCode(prog0 : FiProgram, effects : FiEffects, preserveNames : Set<string>, eliminateNames : Set<string>, removeMain : bool, removeGlobals : bool, verbose : int) -> FiProgram {
	conf = prog0.config;
	backends = if (isParameterFalse(getConfigParameter(conf.config, "dce-target-dependent"))) [] else {
		fcBackendConfigs2array(getFcBackendConfigs(conf));
	}
	prog = fiMapProgramExp(prog0, \x, decl,__,__ ->
		fiMapExp(x, \e, __ ->
			switch (e) {
				FiIf(cond, e1, e2, __,__): {
					eitherMap(compileTimeIfCondition(cond, backends), \val -> if (val) e1 else e2, e);
				}
				default: e;
			},
		true), fcParallelOn(prog0.config)
	);
	used = deadFiCodeAlive(prog, effects, preserveNames, eliminateNames, removeMain, removeGlobals);
	dead = ref makeList();
	reportdead = \n -> dead := Cons(n, ^dead);
	modules = foldTree(
		prog.modules,
		makeTree(),
		\modname : string, mo : FiModule, acc -> {
			nfns = filtermap(mo.functions, \fn ->
				if (containsSet(used, fn.name)) {
					Some(fn);
				} else {
					reportdead(fn.name);
					None();
				}
			);
			nglobals = filtermap(mo.globalVars, \gv ->
				if (containsSet(used, gv.name)) {
					Some(gv);
				} else {
					reportdead(gv.name);
					None();
				}
			);
			nnatives = filtermap(mo.natives, \nat ->
				if (containsSet(used, nat.name)) {
					Some(nat);
				} else {
					reportdead(nat.name);
					None();
				}
			);
			ninitorder = filter(mo.initOrder, \n : string -> containsSet(used, n));
			nexports = filter(mo.exports, \n ->
				containsSet(used, n) ||
				// Structs and unions are preserved, so these exports should be kept
				containsKeyTree(prog.names.structs, n) ||
				containsKeyTree(prog.names.unions, n)
			);
			nmo = FiModule(
				mo.fileinfo,
				mo.imports, mo.forbids,
				nexports,
				mo.structs, mo.unions,
				nfns, nglobals, nnatives,
				ninitorder,
				mo.stringIncludes,
				mo.start,
				mo.end,
				mo.allImports,
				mo.incremental,
			);
			setTree(acc, modname, nmo)
		}
	);
	// Show list of dead items only on verbose=2
	if (verbose > 1 || isConfigParameterTrue(conf.config, "dump-dead-code")) {
		if (true) {
			id2file = \id -> {
				module0 = lookupTreeDef(prog.names.function2module, id, "");
				module1 = lookupTreeDef(prog.names.globalVar2module, id, module0);
				module2 = lookupTreeDef(prog.names.native2module, id, module1);
				module2
			}
			dead2file = foldList(^dead, makeTree(), \acc, id -> {
				treePushToArrayValue(acc, id2file(id), id)
			});
			fcPrintln("Dead code:\n", conf.threadId);
			traverseInOrder(dead2file, \file, ids -> {
				fcPrintln(file + ": " + strGlue(ids, ", "), conf.threadId)
			});
		} else {
			tab2s = \lines -> strGlue(map(splitByNumber(lines, 10), \line -> strGlue(line, ", ")), ",\n");
			fcPrintln("Dead code:\n" + tab2s(list2array(^dead)), conf.threadId);
		}
	}
	FiProgram(
		prog.config,
		modules,
		prog.traversal,
		// Arrange a new, toplevels, with deadcode removed
		FiGlobalNames(prog.names with
			toplevel = foldTree(modules, makeTree(), \name, module, acc ->
				fold(module.natives,
					fold(module.globalVars,
						fold(module.functions, acc, \ac, f -> setTree(ac, f.name, f)),
						\ac, v -> setTree(ac, v.name, v)
					),
					\ac, n -> setTree(ac, n.name, n)
				)
			)
		)
	);
}

DeadCodeAcc(
	effects : FiEffects,
	program : FiProgram,
	queue : Set<string>,
	used : Set<string>,
	hostCalls : Set<string>
);

deadFiCodeAlive(prog : FiProgram, effects : FiEffects, preserveNames : Set<string>, eliminateNames : Set<string>, removeMain : bool, removeGlobals : bool) -> Set<string> {
	queue = foldTree(
		prog.modules,
		differenceSets(
			mergeSets(if (removeMain) makeSet() else insertSet(makeSet(), "main"), preserveNames),
			eliminateNames
		),
		\modname, mo, acc -> {
			fold(
				mo.globalVars,
				acc,
				\a, gv -> if (!removeGlobals && hasFiSideEffects(effects, gv.value)) insertSet(a, gv.name) else a
			)
		}
	);
	visitDead(
		DeadCodeAcc(effects, prog, queue, makeSet(), makeSet()),
		preserveNames, eliminateNames
	).used
}

visitDead(acc : DeadCodeAcc, preserveNames : Set<string>, eliminateNames : Set<string>) -> DeadCodeAcc {
	switch (popMinSet(acc.queue)) {
		None(): acc;
		Some(pop): {
			name = pop.value;
			visitDead(
				deadFiName(DeadCodeAcc(acc.effects, acc.program, pop.rest, acc.used, acc.hostCalls),name, preserveNames, eliminateNames),
				preserveNames, eliminateNames
			)
		}
	}
}


deadFiName(acc : DeadCodeAcc, name : string, preserveNames : Set<string>, eliminateNames : Set<string>) -> DeadCodeAcc {
	mdec = lookupTree(acc.program.names.toplevel, name);
	switch (mdec) {
		None(): {
			if (name != "main" && !containsSet(preserveNames, name) && !containsSet(acc.hostCalls, name)) {
				fcPrintln("WARNING: Something is wrong with DCE: Could not find '" + name + "'", acc.effects.config.threadId);
			}
			acc
		}
		Some(dec): {
			nused = insertSet(acc.used, name);
			depends_on = \x -> Pair(fifreevars(x), fiHostCalls(x));
			referenced = switch (dec : FiDeclaration) {
				FiFunctionDec(f, lambda, __, __, __): depends_on(lambda);
				FiGlobalVar(x, value, __, __, __): depends_on(value);
				FiNativeDec(n, isio, type, nativeName, fallback, __, __): depends_on(fallback);
			}
			new_names = differenceSets(
				differenceSets(mergeSets(referenced.first, referenced.second), nused),
				eliminateNames
			);
			DeadCodeAcc(acc with
				queue = mergeSets(acc.queue, new_names),
				used = mergeSets(nused, new_names),
				hostCalls = mergeSets(acc.hostCalls, referenced.second)
			);
		}
	}
}

isJSBackendConfig(cfg : FcBackendConfig) -> bool {
	switch (cfg) {
		FiJsConfig(__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__): true;
		default: false;
	}
}

isCppOrBytecodeBackendConfig(cfg : FcBackendConfig) -> bool {
	switch (cfg) {
		FcBytecodeConfig(__,__,__,__,__,__,__,__,__,__): true;
		FcCppConfig(__,__,__,__,__,__,__,__): true;
		FcCpp2Config(__,__,__,__,__,__,__,__,__,__,__,__): true;
		default: false;
	}
}

isJavaBackendConfig(cfg : FcBackendConfig) -> bool {
	switch (cfg) {
		FiJavaConfig(__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__): true;
		default: false;
	}
}

/*
In case a compilation target is definite (like a single one), we can be sure about
the boolean value of such global variables from 'sys/target' like 'js', 'cpp', 'java'
and eliminate the appropriate branches from 'if (java) { .. }' statements.

This function returns Some(b) in such cases, and None() in the others.
*/
compileTimeIfCondition(ex : FiExp, backends : [FcBackendConfig]) -> Maybe<bool> {
	switch (ex) {
		FiVar(name, __,__): {
			if (length(backends) == 0) None() else {
				if (name == "js" || name == "nodejs" || name == "nwjs" || name == "jslibrary") {
					if (forall(backends, isJSBackendConfig)) Some(true) else
					if (!exists(backends, isJSBackendConfig)) Some(false) else None();
				} else if (name == "qt") {
					// TODO: should it be the same as cpp ?
					None();
				} else if (name == "cpp") {
					// Both cpp and bytecode use the same execution engine, written in cpp.
					if (forall(backends, isCppOrBytecodeBackendConfig)) Some(true) else
					if (!exists(backends, isCppOrBytecodeBackendConfig)) Some(false) else None();
				} else if (name == "java") {
					if (forall(backends, isJavaBackendConfig)) Some(true) else
					if (!exists(backends, isJavaBackendConfig)) Some(false) else None();
				} else None();
			}
		}
		FiBool(v,__): Some(v);
		default: None();
	}
}
