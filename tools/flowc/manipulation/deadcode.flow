import tools/flowc/backends/common;
import tools/flowc/incremental/fiprogram;
import tools/flowc/manipulation/effects;
import tools/flowc/manipulation/freevars;

export {
	deadFiCode(prog : FiProgram, effects : FiEffects, preserveNames : Set<string>, eliminateNames : Set<string>, removeMain : bool, removeGlobals : bool, verbose : int) -> FiProgram;
}

deadFiCode(prog : FiProgram, effects : FiEffects, preserveNames : Set<string>, eliminateNames : Set<string>, removeMain : bool, removeGlobals : bool, verbose : int) -> FiProgram {
	used = deadFiCodeAlive(prog, effects, preserveNames, eliminateNames, removeMain, removeGlobals);
	dead = ref makeList();
	conf = prog.config;
	backends = fcBackendConfigs2array(getFcBackendConfigs(conf));
	no_target_dep = isParameterFalse(getConfigParameter(conf.config, "dce-target-dependent"));
	reportdead = \n -> dead := Cons(n, ^dead);
	modules = foldTree(
		prog.modules, 
		makeTree(), 
		\modname : string, mo : FiModule, acc -> {
			nfns = filtermap(mo.functions, \fn ->
				if (containsSet(used, fn.name)) {
					Some(if (no_target_dep) fn else
						FiFunctionDec(fn with
							lambda = cast(removeUnreacheableFromFiExp(fn.lambda, backends, conf) : FiExp -> FiLambda)
						)
					);
				} else {
					reportdead(fn.name);
					None();
				}
			);
			nglobals = filtermap(mo.globalVars, \gv ->
				if (containsSet(used, gv.name)) {
					Some(if (no_target_dep) gv else FiGlobalVar(gv with
						value = removeUnreacheableFromFiExp(gv.value, backends, conf)
					));
				} else {
					reportdead(gv.name);
					None();
				}
			);
			nnatives = filtermap(mo.natives, \nat ->
				if (containsSet(used, nat.name)) {
					Some(if (no_target_dep) nat else FiNativeDec(nat with
						fallbackLambda = removeUnreacheableFromFiExp(nat.fallbackLambda, backends, conf)
					));
				} else {
					reportdead(nat.name);
					None();
				}
			);
			ninitorder = filter(mo.initOrder, \n : string -> containsSet(used, n));
			nexports = set2array(intersectSets(buildSet(mo.exports), used));
			nmo = FiModule(
				mo.fileinfo, 
				mo.imports, mo.forbids,
				nexports,
				mo.structs, mo.unions, 
				nfns, nglobals, nnatives,
				ninitorder,
				mo.stringIncludes,
				mo.start,
				mo.end,
				mo.allImports,
				mo.incremental,
			);
			setTree(acc, modname, nmo)
		}
	);
	// Show list of dead items only on verbose=2
	if (verbose > 1) {
		fcPrintln("Dead: " + strGlue(list2array(^dead), ", "), prog.config.threadId);
	}
	FiProgram(
		prog.config,
		modules,
		prog.traversal,
		prog.names,	// TODO: We should probably filter this dude as well
	);
}

DeadCodeAcc(effects : FiEffects, modules : Tree<string, FiModule>, queue : Set<string>, used : Set<string>);

deadFiCodeAlive(prog : FiProgram, effects : FiEffects, preserveNames : Set<string>, eliminateNames : Set<string>, removeMain : bool, removeGlobals : bool) -> Set<string> {
	queue = foldTree(
		prog.modules,
		differenceSets(
			mergeSets(if (removeMain) makeSet() else insertSet(makeSet(), "main"), preserveNames),
			eliminateNames
		),
		\modname, mo, acc -> {
			fold(
				mo.globalVars, 
				acc, 
				\a, gv -> if (!removeGlobals && hasFiSideEffects(effects, gv.value)) insertSet(a, gv.name) else a
			)
		}
	);
	visitDead(DeadCodeAcc(effects, prog.modules, queue, makeSet()), eliminateNames).used
}

visitDead(acc : DeadCodeAcc, eliminateNames : Set<string>) -> DeadCodeAcc {
	switch (popMinSet(acc.queue)) {
		None(): acc;
		Some(pop): {
			name = pop.value;
			visitDead(
				deadFiName(DeadCodeAcc(acc.effects, acc.modules, pop.rest, acc.used),name, eliminateNames),
				eliminateNames
			)
		}
	}
}

deadFiName(acc : DeadCodeAcc, name : string, eliminateNames : Set<string>) -> DeadCodeAcc {
	mdec = lookupTree(acc.effects.names.toplevel, name);
	switch (mdec) {
		None(): {
			if (name != "main") {
				fcPrintln("WARNING: Something is wrong with DCE: Could not find '" + name + "'", acc.effects.config.threadId);
			}
			acc
		}
		Some(dec): {
			nused = insertSet(acc.used, name);
			referenced = switch (dec : FiDeclaration) {
				FiFunctionDec(f, lambda, __, __, __):          fifreevars(lambda);
				FiGlobalVar(x, value, __, __, __): fifreevars(value);
				FiNativeDec(n, isio, type, nativeName, flowfallback, __, __):
					switch (flowfallback) {
						FiLambda(__, __, __, __): fifreevars(flowfallback);
						default: makeSet();
					}
			}
			newnames = differenceSets(differenceSets(referenced, nused), eliminateNames);
			nqueue = mergeSets(acc.queue, newnames);
			nused2 = mergeSets(nused, newnames);
			DeadCodeAcc(acc.effects, acc.modules, nqueue, nused2)
		}
	}
}

isJSBackendConfig(cfg : FcBackendConfig) -> bool {
	switch (cfg) {
		FiJsConfig(__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__): true;
		default: false;
	}
}

isCppOrBytecodeBackendConfig(cfg : FcBackendConfig) -> bool {
	switch (cfg) {
		FcBytecodeConfig(__,__,__,__,__,__,__,__,__,__): true;
		FcCppConfig(__,__,__,__,__,__,__,__): true;
		FcCpp2Config(__,__,__,__,__,__,__,__,__,__,__,__): true;
		default: false;
	}
}

isJavaBackendConfig(cfg : FcBackendConfig) -> bool {
	switch (cfg) {
		FiJavaConfig(__,__,__,__,__,__,__,__,__,__,__,__,__,__,__): true;
		default: false;
	}
}

/*
In case a compilation target is definite (like a single one), we can be sure about
the boolean value of such global variables from 'sys/target' like 'js', 'cpp', 'java'
and eliminate the appropriate branches from 'if (java) { .. }' statements.

This function returns Some(b) in such cases, and None() in the others.
*/
compileTimeIfCondition(ex : FiExp, backends : [FcBackendConfig]) -> Maybe<bool> {
	if (length(backends) == 0) None() else {
		switch (ex) {
			FiVar(name, __,__): {
				if (name == "js" || name == "nodejs" || name == "nwjs" || name == "jslibrary") {
					if (forall(backends, isJSBackendConfig)) Some(true) else
					if (!exists(backends, isJSBackendConfig)) Some(false) else None();
				} else if (name == "qt") {
					// TODO: should it be the same as cpp ?
					None();
				} else if (name == "cpp") {
					// Both cpp and bytecode use the same execution engine, written in cpp.
					if (forall(backends, isCppOrBytecodeBackendConfig)) Some(true) else
					if (!exists(backends, isCppOrBytecodeBackendConfig)) Some(false) else None();
				} else if (name == "java") {
					if (forall(backends, isJavaBackendConfig)) Some(true) else
					if (!exists(backends, isJavaBackendConfig)) Some(false) else None();
				} else None();
			}
			default: None();
		}
	}
}

removeUnreacheableFromFiExp(expr : FiExp, backends : [FcBackendConfig], conf : CompilerConfig) -> FiExp {
	switch (expr) {
		FiLambda(args, body, type, s):
			FiLambda(args, removeUnreacheableFromFiExp(body, backends, conf), type, s);
		FiCall(f, es, type, s):
			FiCall(
				removeUnreacheableFromFiExp(f, backends, conf),
				map(es, \e -> removeUnreacheableFromFiExp(e, backends, conf)),
				type, s
			);
		FiVar(x, type, s):
			expr;
		FiLet(x, type, e1, e2, type2, s):
			FiLet(x, type,
				removeUnreacheableFromFiExp(e1, backends, conf),
				removeUnreacheableFromFiExp(e2, backends, conf),
				type2, s
			);
		FiIf(e1, e2, e3, type, s):
			switch (compileTimeIfCondition(e1, backends)) {
				Some(val): {
					fcVerbose(conf, 1, "Removing resolved compile-time if condition");
					if (val) {
						removeUnreacheableFromFiExp(e2, backends, conf);
					} else {
						removeUnreacheableFromFiExp(e3, backends, conf);
					}
				}
				None():
					FiIf(
						removeUnreacheableFromFiExp(e1, backends, conf),
						removeUnreacheableFromFiExp(e2, backends, conf),
						removeUnreacheableFromFiExp(e3, backends, conf),
						type, s
					);
			}
		FiSwitch(x, s_type, cs, type, s):
			FiSwitch(
				x, s_type,
				map(cs, \c -> FiCase(c with body = removeUnreacheableFromFiExp(c.body, backends, conf))),
				type, s
			);
		FiCast(e, from, to, type, s):
			FiCast(removeUnreacheableFromFiExp(e, backends, conf), from, to, type, s);
		FiSeq(es, type, s):
			FiSeq(map(es, \e -> removeUnreacheableFromFiExp(e, backends, conf)), type, s);
		FiCallPrim(op, es, type, s):
			FiCallPrim(op, map(es, \e -> removeUnreacheableFromFiExp(e, backends, conf)), type, s);
		FiRequire(file, e, type, s):
			FiRequire(file, removeUnreacheableFromFiExp(e, backends, conf), type, s);
		FiUnsafe(name, fb, type, s):
			FiUnsafe(name, removeUnreacheableFromFiExp(fb, backends, conf), type, s);
		FiString(__, __):  expr;
		FiBool(__, __):    expr;
		FiDouble(__, __):  expr;
		FiVoid(__):        expr;
		FiInt(__, __):     expr;
	}
}
