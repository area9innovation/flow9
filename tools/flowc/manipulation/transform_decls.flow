import tools/flowc/incremental/fi_helpers;
import tools/flowc/manipulation/common;
import math/stringmath;

export {
	// If a native is implemented - remove a fallback, otherwise remove a native.
	// In case a native is not implemented and 
	fiToplevelResolveNatives(toplevel: FiToplevel, native_is_implemented: (string) -> bool) -> [FiToplevel];

	// In case a global variable of functional type is defined, replace it with appropriate function
	fiToplevelGlobalVar2Function(toplevel: FiToplevel) -> [FiToplevel];
}

fiToplevelResolveNatives(toplevel: FiToplevel, native_is_implemented: (string) -> bool) -> [FiToplevel] {
	switch (toplevel) {
		FiFunctionDec(name,__,__,__,__):  if (native_is_implemented(name)) [] else [toplevel];
		FiNativeDec(name,__,__,__,__,__,__): if (!native_is_implemented(name)) [] else [toplevel];
		default: [toplevel];
	}
}

fiToplevelGlobalVar2Function(toplevel: FiToplevel) -> [FiToplevel] {
	switch (toplevel) {
		FiGlobalVar(name, value, type, declStart, defStart): {
			switch (value) {
				FiLambda(args, body, tp, start): {
					[FiFunctionDec(name, value, tp, declStart, defStart)];
				}
				default: [toplevel];
			}
		}
		default: [toplevel];
	}
}
