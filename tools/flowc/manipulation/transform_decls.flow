import tools/flowc/incremental/fi_helpers;
import tools/flowc/manipulation/common;
import math/stringmath;

export {
	// If a native is implemented - remove a fallback, otherwise remove a native.
	// In case a native is not implemented and 
	fiToplevelResolveNatives(
		toplevel: FiToplevel, 
		is_backend_native: (string) -> bool, 
		is_program_native: (string) -> bool
	) -> [FiToplevel];

	// In case a global variable of functional type is defined, replace it with appropriate function
	fiToplevelGlobalVar2Function(toplevel: FiToplevel) -> [FiToplevel];
}

fiToplevelResolveNatives(decl: FiToplevel, is_backend_native: (string) -> bool, is_program_native: (string) -> bool) -> [FiToplevel] {
	fn2nat = \fn -> {
		// Add implicit natives (functions from runtime with the same name as of a function)
		FiNativeDec(fn.name, false, fn.type, fn.name, FiVoid(0), fn.declStart, fn.defiStart);
	}
	switch (decl) {
		FiFunctionDec(name,__,__,__,__): {
			if (!is_backend_native(name)) {
				[decl];
			 } else if (!is_program_native(name)) {
				// Case of implicit native - a native which is actually not declared as native
				[fn2nat(decl)];
			}  else [];
		}
		FiNativeDec(name,__,__,__,__,__,__): {
			if (!is_backend_native(name)) [] else {
				[FiNativeDec(decl with fallbackLambda = FiVoid(0))];
			}
		}
		default: [decl];
	}
}

fiToplevelGlobalVar2Function(toplevel: FiToplevel) -> [FiToplevel] {
	switch (toplevel) {
		FiGlobalVar(name, value, type, declStart, defStart): {
			switch (value) {
				FiLambda(args, body, tp, start): {
					[FiFunctionDec(name, value, tp, declStart, defStart)];
				}
				default: [toplevel];
			}
		}
		default: [toplevel];
	}
}
