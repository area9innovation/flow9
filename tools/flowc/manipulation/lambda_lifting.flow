import tools/flowc/incremental/fitype;
import tools/flowc/backends/common;
import tools/flowc/incremental/fi_helpers;

export {
    /* Performs Lambda Lifting - promotes lambdas to global functions and creates explicit closures.
     * Closures are represented by structs with auto-generated names
     * first member of each struct is function pointer with type identical to type of original lambda
     * Each FiLambda is replaced with 
     * FiCallPrim(FcCreateClosure(struct_name, function_name), array of FiVar's referencing free variables)
    */ 
    lift_lambdas(program : FiProgram) -> FiProgram;
    lift_lambdas_module(program : FiProgram, moduleName : string) -> FiProgram;
}

lift_lambdas(program : FiProgram) {
    fold(program.traversal, program, lift_lambdas_module);
}

FiLiftedLambda(
    functionDec : FiFunctionDec,
    closureType : FiTypeStruct
);

LLContext(
    program : FiProgram,
    module : FiModule,
    moduleName : string,
    lambdas : ref Tree<string, FiLiftedLambda>
);

// Represents a lexical scope - variables being provided by immediate outside block
// nested lexical scopes are supported - if a variable is not local or global or found 
// in the current lexical block, look into parent
// the access for nested variable is iterative anyway (_closure._closure.a)
LexicalScope(
    parent : Maybe<LexicalScope>,
    closure : FiTypeStruct,
    vars : Set<string>, // vars captured in this scope
    all_vars : Set<string> // all vars captured in this and parent scopes
);

lift_lambdas_module(program : FiProgram, moduleName : string) -> FiProgram {
    switch (lookupTree(program.modules, moduleName)) {
        None(): program;
        Some(m): {
            context = LLContext(program, m, moduleName, ref makeTree());
			do_lift = \e -> lift_lambdas_exp(context, None(), e);

            // lifting lambdas in functions
            functions = map(m.functions, \f : FiFunctionDec -> {
                FiFunctionDec(f with lambda = FiLambda(f.lambda with body = do_lift(f.lambda.body)))
			});

            // lifting lambdas in global vars
            globalVars = map(m.globalVars, \v -> FiGlobalVar(v with value = do_lift(v.value)));
				
			// lifting natives with fallbacks
			natives = map(m.natives, \n -> {
				switch (n.fallbackLambda) {
					FiLambda(args, body, type, start): {
						lifted = do_lift(body);
						if (lifted != body) {
							FiNativeDec(n with fallbackLambda = FiLambda(args, lifted, type, start))
						} else n;
					}
					default: n;
				}
			});

			lambdasA = getTreeValues(^(context.lambdas));
            closures = map(lambdasA, \l -> l.closureType);
            liftedDecls = map(lambdasA, \l -> l.functionDec);

            module = FiModule(m with
				structs = concat(m.structs, closures),
				functions = concat(functions, liftedDecls),
				globalVars = globalVars,
				natives = natives,
				initOrder = concat(m.initOrder, map(liftedDecls, \l -> l.name)));


            toplevel0 = fold(module.natives, program.names.toplevel, \tls, f -> setTree(tls, f.name, f));
            toplevel1 = fold(module.globalVars, toplevel0, \acc : Tree<string, FiDeclaration>, v -> setTree(acc, v.name, v));
            toplevel2 = fold(module.functions, toplevel1, \tls, n -> setTree(tls, n.name, n));

            FiProgram(
                program.config,
                setTree(program.modules, moduleName, module),
                program.traversal,
                FiGlobalNames(program.names with
					struct2module = fold(closures, program.names.struct2module, \s2m, s -> setTree(s2m, s.name, moduleName)),
					structs = fold(closures, program.names.structs, \structs, s -> setTree(structs, s.name, s)),
					toplevel = toplevel2
                )
            );
        }
    }
}

closureFunctionIndexName = "__lambda_index__"; // closure.__lambda_index__ will give function address
closureArgumentName = "__closure__"; // argument name that contains closure

// this generates variable reference the correct scope - i.e. closure.a, closure.closure.a, etc
// the arguments are scope to start with, FiExp that is reference to corresponding closure
// name of the variable to search, its type (used to generate final FieldPrim), and start position to create FiExp's correctly
resolve_variable(scope : LexicalScope, closureRef : FiExp, name : string, type : FiType, start : int) -> FiExp {
    if (containsSet(scope.vars, name))
        FiCallPrim(FcFieldPrim(name), [closureRef], type, start)
    else switch (scope.parent) {
        None(): {
            fcPrintln("Error - cannot find scope for a variable " + name); 
            closureRef; 
        }
        Some(parentScope):
            resolve_variable(parentScope, 
                FiCallPrim(FcFieldPrim(closureArgumentName), 
                    [closureRef], 
                    FiTypeName(parentScope.closure.name, parentScope.closure.typars), start),
                name, type, start);
    }
} 

lift_lambdas_exp(context : LLContext, sc : Maybe<LexicalScope>, ex : FiExp) -> FiExp {
    process = \exp0 -> lift_lambdas_exp(context, sc, exp0);

    switch (ex) {
		FiBool(b, start): ex;
		FiInt(i, start): ex;
		FiString(s, start): ex;
		FiDouble(d, start): ex;
		FiVoid(start): ex;
		FiVar(name, type, start): switch (sc) {
            None(): ex;
            Some(scope): 
                if (containsSet(scope.all_vars, name)) // resolve closure reference
                    resolve_variable(scope, FiVar(closureArgumentName, 
                        FiTypeName(scope.closure.name, scope.closure.typars), start), name, type, start)
                else ex;
        }
		FiCall(f, args, type, start):
			FiCall(process(f), map(args, process), type, start);
		FiSwitch(__, __, __, __, __): 
            FiSwitch(ex with cases = 
                map(ex.cases, \c -> FiCase(c with body = process(c.body))));
		FiLambda(args, body, type, start): 
            lift_lambda(context, sc, ex);
		FiLet(name, type, e1, e2, type2, start): 
			FiLet(ex with e1 = process(e1), e2 = process(e2));
		FiIf(e1, e2, e3, type, start): 
            FiIf(process(e1), process(e2), process(e3), type, start);
		FiCallPrim(__, es, __, __):
			FiCallPrim(ex with es = map(es, process));
		FiRequire(flowfile, e, type, start):
			FiRequire(flowfile, process(e), type, start);
		FiUnsafe(name, fallback, type, start):
			FiUnsafe(name, process(fallback), type, start);
		FiSeq(es, type, start):
			FiSeq(map(es, process), type, start);
		FiCast(__, __, __, __, __): 
			FiCast(ex with e = process(ex.e));
	}
}

lambda_index = ref 0;

generate_lambda_name(context : LLContext, lambda : FiLambda) {
    lambdaName = strReplace(context.moduleName, "/", "_") + "__lambda__" + 
        i2s(lambda.start) + "__" + i2s(^lambda_index);
    lambda_index := ^lambda_index + 1;
    lambdaName;
}

lift_lambda(context : LLContext, sc : Maybe<LexicalScope>, lambda : FiLambda) -> FiExp {
	lambdaName = generate_lambda_name(context, lambda);
    originalLambdaType = lambda.type;

    // vars from outer scope are already bound - we do not need to store those in a closure
    parentScopeVars = switch (sc) {
        None(): makeSet();
        Some(scope): scope.all_vars;
    }

    // collecting free variables
	lambdaAllVars1 = tree2pairs(find_free_vars_with_types(
        lambda.body, buildSet(map(lambda.args, \x -> x.name)), makeTree()
    ));
	lambdaAllVars = filter(lambdaAllVars1, \p -> !containsKeyTree(context.program.names.toplevel, p.first));

    // leaving only own variables, not references to parent scope
    lambdaOwnVars : [Pair<string, FiType>] = filter(lambdaAllVars, \p -> !containsSet(parentScopeVars, p.first));

    // add a field to closure that is a reference to parent scope if needed
    // this means - if lambda does reference outer variables, we need a reference to parent closure
    parentScopeField : [Pair<string, FiType>] = switch (sc) {
        None(): [];
        Some(scope): if (lambdaAllVars == lambdaOwnVars) []
            else [Pair(closureArgumentName, FiTypeName(scope.closure.name, scope.closure.typars))];
    }

    // gathering closure type parameters - needed to capture generic variables
    // consider both arguments and captured variables 
    potentiallyGenericVars = concat(lambdaOwnVars, 
        map(originalLambdaType.args, \a -> Pair(a.name, a.type)));
    closureTyparNames = sort(set2array(fold(potentiallyGenericVars, makeSet(), 
        \acc, v -> fiCollectTypars(context.program, v.second, acc))));
    closureTypars = map(closureTyparNames, \n -> FiTypeParameter(n));

	// closure represented by struct
    // add a field for referencing the function itself
	closureType = FiTypeStruct(lambdaName + "__closure__", closureTypars, 
		map(concat3(
                [Pair(closureFunctionIndexName, FiTypeInt())], 
                parentScopeField,
                lambdaOwnVars
            ), 
            \p -> FiStructArg(p.first, p.second, false)), lambda.start);
	closureTypeName = FiTypeName(closureType.name, closureTypars);

    scopeVars = buildSet(map(lambdaOwnVars, \v -> v.first));
    
    // creating a new scope
    nestedScope = LexicalScope(
        sc,
        closureType,
        scopeVars,
        mergeSets(scopeVars, parentScopeVars)
    );

    closureFunArg = FiFunArg(closureArgumentName, closureTypeName);

    // generating new function type - adding closure
    lambdaType = FiTypeFunction(arrayPush(originalLambdaType.args, closureFunArg), 
        originalLambdaType.returnType);

	// generating lifted function declaration
    lambdaDecl = FiFunctionDec(lambdaName, 
        FiLambda(arrayPush(lambda.args, closureFunArg), lift_lambdas_exp(context, Some(nestedScope), lambda.body), 
            lambdaType, lambda.start),
        lambdaType, lambda.start, lambda.start + 1);

    // updating context
	if (!containsKeyTree(^(context.lambdas), lambdaName)) {
		context.lambdas := setTree(^(context.lambdas), lambdaName, FiLiftedLambda(lambdaDecl, closureType));
	}

	// generating closure initializer. Reference parent closure by name if needed
    FiCallPrim(FcCreateClosurePrim(closureType.name, lambdaName), 
        map(concat(parentScopeField, lambdaOwnVars), \v -> FiVar(v.first, v.second, lambda.start)),
        lambdaType, lambda.start);
}

find_free_vars_with_types(expr : FiExp, bound : Set<string>, free : Tree<string, FiType>) -> Tree<string, FiType> {
	fold_freevars = \es, b, f -> fold(es, f, \acc, e -> find_free_vars_with_types(e, b, acc));
	switch (expr) {
        // for lambda, dig into body but mark parameters as bound
		FiLambda(args, e, __, __):    find_free_vars_with_types(e, 
            fold(args, bound, \b, a -> insertSet(b, a.name)), free);
		FiCall(f, es, __, __):        fold_freevars(es, bound, find_free_vars_with_types(f, bound, free));
		FiVar(x, xtype, __):          if (containsSet(bound, x)) free else setTree(free, x, xtype);
		FiLet(x, __, e1, e2, __, __): find_free_vars_with_types(e2, insertSet(bound, x), find_free_vars_with_types(e1, bound, free));
		FiIf(e1, e2, e3, __, __):     fold_freevars([e1, e2, e3], bound, free);
		FiSwitch(e, __, cs, __, __):  fold(cs, find_free_vars_with_types(e, bound, free), \acc, c -> find_free_vars_with_types(c.body, bound, acc));
		FiCast(e, __, __, __, __):    find_free_vars_with_types(e, bound, free);
		FiSeq(es, __, __):            fold_freevars(es, bound, free);
		FiCallPrim(__, es, __, __):   fold_freevars(es, bound, free);
		FiString(__, __):             free;
		FiBool(__, __):               free;
		FiDouble(__, __):             free;
		FiVoid(__):                   free;
		FiInt(__, __):                free;
        FiRequire(__, e, __, __):     find_free_vars_with_types(e, bound, free);
        FiUnsafe(__, fb, __, __):     find_free_vars_with_types(fb, bound, free);
	}
}
