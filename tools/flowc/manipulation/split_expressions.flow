import tools/flowc/incremental/fitype;
import tools/flowc/incremental/fi_helpers;
import tools/flowc/backends/common;

import array;
import string;

export {
    splitExpressions(ex : FiExp, typeFilter : (FiType) -> bool) -> FiExp;
}

tempVarIndex = ref 0;

getTempVarName(ex : FiExp) {
	tempVarIndex := ^tempVarIndex + 1;
    "__temp__" + i2s(^tempVarIndex);
}

/**
  The 'work horse' of the entire process
   ex - temporary expression to wrap
   typeFilter - pass-through to process expression further
   scopeType - becomes type of FiLet generated
   makeRefExp - function to re-create original expression with the reference of the new temp variable
*/   
wrapAsTempVariable(ex : FiExp, typeFilter : (FiType) -> bool, scopeType : FiType, makeRefExp : (FiExp) -> FiExp) -> FiExp {
    varName = getTempVarName(ex);
    type = fiExpType(ex);
    // replace with
    // __temp__ = ex;
    // __temp__;
    splitExpressionsRec(ex, typeFilter, scopeType, \v -> 
		FiLet(varName, type, v, 
        	makeRefExp(FiVar(varName, type, ex.start)), scopeType, ex.start));
}

expandExpression(ex : FiExp, typeFilter : (FiType) -> bool, scopeType : FiType, makeWrapper : (FiExp) -> FiExp) -> FiExp {
	switch (ex) {
        FiVar(__, __, __): makeWrapper(ex);
		default:  { 
			if (typeFilter(fiExpType(ex)))
				wrapAsTempVariable(ex, typeFilter, scopeType, makeWrapper)
			else 
				splitExpressionsRec(ex, typeFilter, scopeType, makeWrapper)
		}
	}
}

expandExpListRec(exps : [FiExp], typeFilter : (FiType) -> bool, scopeType : FiType, vars : List<FiExp>, makeWrapper : ([FiExp]) -> FiExp) -> FiExp {
	if (length(exps) > 0)
		expandExpression(exps[0], typeFilter, scopeType,
			\v -> expandExpListRec(tailFrom(exps, 1), typeFilter, scopeType, Cons(v, vars), makeWrapper)
		)
	else
		// note that list2array reverses the list - which is exactly what we need here
		makeWrapper(list2array(vars));
}

expandExpList(exps : [FiExp], typeFilter : (FiType) -> bool, scopeType : FiType, makeWrapper : ([FiExp]) -> FiExp) -> FiExp {
	expandExpListRec(exps, typeFilter, scopeType, makeList(), makeWrapper);
}

splitExpressions(ex : FiExp, typeFilter : (FiType) -> bool) {
	splitExpressionsRec(ex, typeFilter, fiExpType(ex), idfn);
}

/*
 * Extracts temporary varialbes from expression
 * ex - expression to transform
 * typeFilter - which variables to extract
 * scopeType - type of top-level expression, used to generate correct FiLet's
 * makeWrapper - function to re-create a top-level expression out of transformed subexpressions:
	identity for top-level expression
	\v -> FiLet(name, type, v, ...) for FiLet 
The overall approach is to recursively generate temporaries and finally reconstruct the original expressoion
replacing the original sub-expressions with references to temporaries
*/
splitExpressionsRec(ex : FiExp, typeFilter : (FiType) -> bool, scopeType : FiType, makeWrapper : (FiExp) -> FiExp) -> FiExp {
    switch (ex : FiExp) {
		FiLambda(args, b, type, start): expandExpression(b, typeFilter, scopeType, 
			\v -> makeWrapper(FiLambda(args, v, type, start)));
		FiCall(f, args, type, start): 
			expandExpList(concat(args, [f]), typeFilter, scopeType, \vars ->
				makeWrapper(FiCall(vars[length(args)], take(vars, length(args)), type, start)));
		FiVar(name, type, start): makeWrapper(ex);
		FiLet(name, type, e1, e2, type2, start):
			expandExpression(e1, typeFilter, scopeType, 
                \v -> makeWrapper(FiLet(name, type, v, splitExpressions(e2, typeFilter), type2, start)));
		FiIf(e1, e2, e3, type, start): 
			expandExpression(e1, typeFilter, scopeType, \v ->  
            	makeWrapper(FiIf(v, splitExpressions(e2, typeFilter), 
                    splitExpressions(e3, typeFilter), type, start)));
		FiSwitch(x, switchType, cases, type, start): 
			 makeWrapper(FiSwitch(x, switchType, 
                map(cases, \c -> FiCase(c.struct, c.argNames, splitExpressions(c.body, typeFilter), c.start)),
                type, start));
		FiCast(e, tFrom, tTo, type, start): 
			expandExpression(e, typeFilter, scopeType, \v -> makeWrapper(FiCast(v, tFrom, tTo, type, start)));
		FiSeq(es, type, start): 
            makeWrapper(FiSeq(map(es, \stmt -> splitExpressions(stmt, typeFilter)), type, start));
		FiCallPrim(op, es, type, start): 
			expandExpList(es, typeFilter, scopeType, \vars -> makeWrapper(FiCallPrim(op, vars, type, start)));
		FiVoid(start): makeWrapper(ex);
		FiDouble(d, start): makeWrapper(ex);
		FiInt(i, start): makeWrapper(ex);
		FiString(s, start): makeWrapper(ex);
		FiBool(b, start): makeWrapper(ex);
		FiRequire(flowfile, e, type, start): 
			expandExpression(e, typeFilter, scopeType, 
                \v -> makeWrapper(FiRequire(flowfile, v, type, start))); 
		FiUnsafe(name, fallback, type, start): 
			expandExpression(fallback, typeFilter, scopeType, 
                \v -> makeWrapper(FiUnsafe(name, v, type, start)));
	}
}

