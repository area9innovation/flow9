import ds/easygraph;

export {
	// A simple graph builder where nodes are identified by the data itself
	makeSimpleGraph() -> SimpleGraph<?, ??>;

	addSimpleNode(g : SimpleGraph<?, ??>, node : ?) -> SimpleGraph<?, ??>;
	hasSimpleNode(g : SimpleGraph<?, ??>, node : ?) -> bool;

	// The id of this node, in the underlying EasyGraph. -1 when not found
	getSimpleNodeId(g : SimpleGraph<?, ??>, node : ?) -> int;
	lookupSimpleNode(g : SimpleGraph<?, ??>, nodid : int, def : ?) -> ?;

	addSimpleEdge(g : SimpleGraph<?, ??>, from : ?, to : ?, data : ??, weight : int) -> SimpleGraph<?, ??>;

	SimpleGraph(nodes : Tree<?, int>, nnodes : int, graph : EasyGraph<?, ??>);

	simpleGraph2dot(
		graph : SimpleGraph<?, ??>, 
		// This will be highlighted, but does not have to exist
		root : ?,
		graphstyles : [DiGraphStyle<??>], 
		node2styles : (?) -> [GNodeStyle], 
		edge2styles : (??) -> [GEdgeStyle]
	) -> string;
}


makeSimpleGraph() -> SimpleGraph<?, ??> {
	SimpleGraph(makeTree(), 0, makeEasyGraph());
}

addSimpleNode(g : SimpleGraph<?, ??>, node : ?) -> SimpleGraph<?, ??> {
	id = lookupTreeDef(g.nodes, node, -1);
	if (id == -1) {
		// New node
		nid = g.nnodes;
		SimpleGraph(
			setTree(g.nodes, node, nid),
			nid + 1,
			addEGNode(g.graph, GNode(nid, node))
		);
	} else {
		// We already have it
		g
	}
}

hasSimpleNode(g : SimpleGraph<?, ??>, node : ?) -> bool {
	containsKeyTree(g.nodes, node)
}

getSimpleNodeId(g : SimpleGraph<?, ??>, node : ?) -> int {
	lookupTreeDef(g.nodes, node, -1);
}

lookupSimpleNode(g : SimpleGraph<?, ??>, nodeid : int, def : ?) -> ? {
	node = lookupTree(g.graph.nodes, nodeid);
	eitherMap(node, \n : GNode<?> -> n.data, def);
}

addSimpleEdge(g : SimpleGraph<?, ??>, from : ?, to : ?, data : ??, weight : int) -> SimpleGraph<?, ??> {
	fromId = lookupTreeDef(g.nodes, from, -1);
	if (fromId == -1) {
		addSimpleEdge(addSimpleNode(g, from), from, to, data, weight);
	} else {
		toId = lookupTreeDef(g.nodes, to, -1);
		if (toId == -1) {
			addSimpleEdge(addSimpleNode(g, to), from, to, data, weight);
		} else {
			SimpleGraph(
				g.nodes,
				g.nnodes,
				addEGEdge(g.graph, GEdge(fromId, toId, data, weight))
			);
		}
	}
}

simpleGraph2dot(
	graph : SimpleGraph<?, ??>, 
	root : ?,
	graphstyles : [DiGraphStyle<??>], 
	node2styles : (?) -> [GNodeStyle], 
	edge2styles : (??) -> [GEdgeStyle]
) -> string {
	rootId = getSimpleNodeId(graph, root);

	easyGraph2dot(
		graph.graph,
		rootId,
		graphstyles,
		\n -> node2styles(n.data),
		\e -> edge2styles(e.data)
	);
}

