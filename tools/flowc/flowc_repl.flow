import tools/flowc/flowc_typecheck;
import tools/flowc/eval;
import string_utils;

export {
	// Runs REPL loop for flow. Console help is available by 'help' command.
	// Help on particular commands is available with 'help <command>'.
	fcReplLoop(config : CompilerConfig) -> void;
}

fcReplDebug(message : string, config : CompilerConfig, level : int) -> void {
	debug_level = s2i(getConfigParameterDef(config.config, "repl-debug", "0"));
	if (debug_level > level) {
		fcReplLog(message, config);
	}
}

fcReplLoop(config : CompilerConfig) -> void {
	code = if (config.flowfile == "") "" else {
		getFcFileInfo(config.flowfile, config).content
	}
	fcReplDebug("REPL STARTED", config, 0);
	fcReplPrintln("Type 'help' and press enter to get more information about REPL mode in flowc.", true, config);
	fcReplPrintln("A piece of code is input from a command line until an empty line (two enters pressed).", true, config);
	for(
		FcReplEnv(config, initFcTypeEnvGlobal(), code, [], makeTree(), false),
		\env -> !env.exit,
		\env -> fcReplLoopStep(env)
	);
	fcReplDebug("REPL ENDED", config, 0);
	quit(0);
}

FcReplPiece ::= FcReplDecls, FcReplStats, FcReplExp;
	FcReplDecls(name : string, code : string, program : Maybe<FiProgram>);
	FcReplStats(name : string, code : string, program : Maybe<FiProgram>);
	FcReplExp(name : string, code : string, program : Maybe<FiProgram>);

FcReplCommand ::= FcReplEval, FcReplExec, FcReplAdd, FcReplDel, FcReplSave, FcReplImport, FcReplConfig, FcReplExit;
	FcReplEval(expr : string);
	FcReplExec(piece : FcReplPiece);
	FcReplAdd(name : string, code : string, exec : bool);
	FcReplDel(name : string);
	FcReplSave(file : string);
	FcReplImport(file : string);
	FcReplConfig(opts : [string]);
	FcReplExit();

FcReplEnv(
	config : CompilerConfig,
	globEnv : FcTypeEnvGlobal,
	code : string,
	imports : [string],
	pieces : Tree<string, FcReplPiece>,
	exit : bool
);

fcReplPrint(str : string, config : CompilerConfig) -> void {
	fcReplDebug("REPL print: \n" + strIndent(str) + "\n", config, 3);
	print(str);
}

fcReplPrintln(str : string, success : bool, config : CompilerConfig) -> void {
	msg = (if (success) "" else "Error: ") + str;
	fcReplDebug("REPL println: \n" + strIndent(msg) + "\n", config, 3);
	println(msg);
}

fcReplReadCommand(env : FcReplEnv) -> FcReplCommand {
	fcReplPrint("> ", env.config);
	header = ltrim2(fcReadLine(), " \r\n\t");
	comm = trim2({
		i = strIndexOf(header, " ");
		if (i == -1) header else strLeft(header, i);
	}, " \r\n\t");
	splitted = filtermap(strSplit(trim2(header, " \r\t\n"), " "), \arg -> 
		if (isNotSpace(arg)) Some(trim2(arg, " \r\n\t")) else None()
	);
	args = tail(splitted);
	if (length(splitted) == 0) {
		fcReplReadCommand(env);
	} else {
		fcReplDebug("REPL have read command: " + comm + ", args: " + strGlue(args, ", "), env.config, 0);
		if (comm == "help") {
			details = if (length(args) == 0) "" else args[0];
			fcReplPrintln(fcReplPrintHelp(details), true, env.config);
			fcReplReadCommand(env);
		} else if (comm == "exit") {
			fcReplPrintln("Bye.", true, env.config);
			FcReplExit();
		} else if (comm == "show") {
			if (length(args) == 0 || args[0] == "all") {
				fcReplPrintln(
					foldTree(env.pieces, "", \name, piece, acc -> 
						(if (acc == "") "" else acc + "\n") + 
						"// " + name + "\n" + piece.code + "\n"
					),
					true, env.config
				);
			} else {
				switch (lookupTree(env.pieces, args[0])) {
					Some(piece): fcReplPrintln(piece.code, true, env.config);
					None(): fcReplPrintln("There's no piece of code with the name " + args[0], false, env.config);
				}
			}
			fcReplReadCommand(env);
		} else if (comm == "eval") {
			if (length(args) == 0) {
				FcReplEval(fcReadCode(env.config)); 
			} else {
				switch (lookupTree(env.pieces, args[0])) {
					Some(p): {
						FcReplExec(p); 
					}
					None(): {
						fcReplPrintln("No piece of code with the name " + args[0] + " is found", false, env.config);
						fcReplReadCommand(env);
					}
				}
			}
		} else if (comm == "exec") {
			if (length(args) == 0) {
				fcReplPrintln("show command must take an argument: the name of a code piece", false, env.config);
				fcReplReadCommand(env);
			} else {
				switch (lookupTree(env.pieces, args[0])) {
					Some(p): {
						FcReplExec(p); 
					}
					None(): {
						fcReplPrintln("No piece of code with the name " + args[0] + " is found", false, env.config);
						fcReplReadCommand(env);
					}
				}
			}
		} else if (comm == "add") {
			if (length(args) == 0) {
				fcReplPrintln("add command must take an argument: the name of a code piece", false, env.config);
				fcReplReadCommand(env);
			} else {
				comm_args = tail(args);
				exec = contains(comm_args, "exec"); 
				switch (lookupTree(env.pieces, args[0])) {
					Some(__): {
						force = contains(comm_args, "force");
						if (!force) {
							fcReplPrintln("A piece of code with the name " + args[0] + " already exists", false, env.config);
							fcReplReadCommand(env);
						} else { 
							FcReplAdd(args[0], fcReadCode(env.config), exec); 
						}
					}
					None(): {
						FcReplAdd(args[0], fcReadCode(env.config), exec); 
					}
				}
			}
		} else if (comm == "del") {
			if (length(args) == 0) {
				fcReplPrintln("del command must take an argument: the name of a code piece", false, env.config);
				fcReplReadCommand(env);
			} else {
				switch (lookupTree(env.pieces, args[0])) {
					Some(__): FcReplDel(args[0]); 
					None(): {
						fcReplPrintln("There's no piece of code with the name " + args[0], false, env.config);
						fcReplReadCommand(env);
					}
				}
			}
		} else if (comm == "save") {
			if (length(args) == 0) {
				fcReplPrintln("save command must take an argument: the name of a file", false, env.config);
				fcReplReadCommand(env);
			} else {
				FcReplSave(args[0]);
			}
		} else if (comm == "import") {
			if (length(args) == 0) {
				fcReplPrintln("import command must take an argument: the name of a file", false, env.config);
				fcReplReadCommand(env);
			} else {
				FcReplImport(args[0]);
			}
		} else if (comm == "config") {
			if (length(args) == 0) {
				fcReplPrintln("config command must take at least one argument", false, env.config);
				fcReplReadCommand(env);
			} else {
				FcReplConfig(args);
			}
		} else {
			FcReplEval(fcReadLines(header, ""));
		}
	}
}

FcReplCode(
	imports : [string],
	source : string
);

fcReplSplitCode(config : CompilerConfig, src : string) -> FcReplCode {
	lines = filtermap(strSplit(src, "\n"), \l -> 
		if (isNotSpace(l)) Some(rtrim2(l, " \t\r")) else None()
	);
	FcReplCode(
		filtermap(lines, \line ->
			if (startsWith(line, "import ")) Some(rtrim2(strRight(line, 7), "; \t")) else None()
		),
		strGlue(filter(lines, \line -> !startsWith(line, "import")), "\n")
	);
}

fcReplLoopStep(env : FcReplEnv) -> FcReplEnv {
	command = fcReplReadCommand(env);
	fcReplDebug("REPL command: " + fcReplCommand2s(command, true) + " have read", env.config, 0);
	run_src = \src -> {
		code = fcReplSplitCode(env.config, src);
		fcReplRun( 
			FcReplEnv(env with imports = concat(env.imports, code.imports)),
			code.source
		);
	}
	run_piece = \piece -> {
		switch (piece) {
			FcReplDecls(name, code, program): {
				// evaluation of a declaration makes no effect
			}
			FcReplStats(name, src, program): {
				run_src(src);
			}
			FcReplExp(name, src, program): {
				run_src(src);
			}
		}
	}
	ret = switch (command) {
		FcReplEval(src): {
			run_src(src);
			env;
		}
		FcReplExec(piece): {
			run_piece(piece);
			env;
		}
		FcReplAdd(name, src, exec): {
			code = fcReplSplitCode(env.config, src);
			env1 = fcReplAdd(
				FcReplEnv(env with imports = concat(env.imports, code.imports)), 
				name,
				code.source
			);
			if (exec) {
				piece = lookupTreeDef(env1.pieces, name, FcReplDecls("", "", None()));
				run_piece(piece);
			}
			env1;
		}
		FcReplDel(name): {
			FcReplEnv(env with pieces = removeFromTree(env.pieces, name));
		}
		FcReplSave(file): {
			setFileContent(file, fcReplJoinCode(env, true));
			env;
		}
		FcReplImport(file): {
			FcReplEnv(env with imports = concat(env.imports, [file]));
		}
		FcReplConfig(opts): {
			FcReplEnv(env with 
				config = setConfigOptions(env.config, filtermap(opts, \opt0 -> {
					opt = trim2(opt0, " \t\r\n");
					if (opt == "") None() else  {
						key = takeBefore(opt, "=", opt);
						val = takeAfter(opt, "=", "");
						Some(Pair(key, val));
					}
				}))
			);
		}
		FcReplExit(): {
			FcReplEnv(env with exit = true);
		}
	}
	fcReplDebug("REPL command: " + fcReplCommand2s(command, false) + " completed", env.config, 0);
	ret;
}

fcReplUnwrapfcReplPrintln(expr : string) -> string {
	expr0 = trim2(expr, " \n\r\t");
	expr1 = if (!endsWith(expr0, ";")) expr0 else strLeft(expr0, strlen(expr0) - 1);
	expr2 = if (!startsWith(expr1, "println(")) expr1 else 
		strRight(strLeft(expr1, strlen(expr1) - 1), 8);
	expr3 = if (!startsWith(expr2, "print(")) expr2 else 
		strRight(strLeft(expr2, strlen(expr2) - 1), 6);
	expr3;
}

fcPrepareExpSource(env : FcReplEnv, code : string, args : [string]) -> string {
	blueprint("
		%env_code%

		main() -> void {
			tmp_var = %expr_code%;
			println(tmp_var);
		}
		",
		[
			"env_code", fcReplJoinCode(env, false),
			"expr_code", code,
		]
	);
}

fcPrepareStatsSource(env : FcReplEnv, code : string, args : [string]) -> string {
	blueprint("
		%env_code%
		
		main() -> void {
			%main_code%
		}
		",
		[
			"env_code", fcReplJoinCode(env, false),
			"main_code", code
		]
	);
}

fcPrepareDeclsSource(env : FcReplEnv, code : string, args : [string]) -> string {
	main = if (strContains(code, "main()")) "" else 
	blueprint("
		main() -> void {
		}
		",
		["quit", (if (contains(args, "repl-no-quit=1")) "//" else "") + "quit(0);"]
	);
	blueprint("
		%env_code%

		%cur_code%
		
		%main%
		",
		[
			"env_code", fcReplJoinCode(env, false),
			"cur_code", code,
			"main", main
		]
	);
}

fcPreparePieceSource(env : FcReplEnv, piece : FcReplPiece, args : [string]) -> string {
	code = switch (piece) {
		FcReplDecls(name, code, prog): fcPrepareDeclsSource(env, code, args);
		FcReplStats(name, code, prog): fcPrepareStatsSource(env, code, args);
		FcReplExp(name, code, prog):   fcPrepareExpSource(env, code, args);
	}
	setFileContent("___tmp___.flow", code);
	code;
}

fcDeleteGently(file : string, config : CompilerConfig) -> void {
	if (fileExists(file) && getConfigParameterDef(config.config, "repl-save-tmp", "0") == "0") {
		err = deleteFile(file);
		if (err != "") {
			fcReplDebug("REPL error while deleting: " + file + "\n" + err, config, 0);
			fcReplPrintln(err, false, config);
		}
	}
}

fcReplMakePiece(env : FcReplEnv, name : string, code0 : string) -> Maybe<FcReplPiece> {
	env_code = fcReplJoinCode(env, false);
	code1 = trim2(code0, " \t\n\r");
	cur_code = if (code1 != "" && !endsWith(code1, ";")) code1 + ";" else code1;
	cur_unwrapped = fcReplUnwrapfcReplPrintln(cur_code);
	code_variants = [
		// At first, try to treat code as an expression
		FcReplExp(name, cur_unwrapped, None()),
		// Then, try to treat code as a set of statements
		FcReplStats(name, cur_code, None()),
		// At last, try to treat code as a set of toplevel definitions 
		FcReplDecls(name, cur_code, None()),
	];
	make = \verb -> findmap(code_variants, \variant -> {
		code = fcPreparePieceSource(env, variant, []);
		fcReplDebug("REPL TRYING TO TYPECHECK: \n" + variant.code + "\n\n" + code, env.config, verb);
		fcSetSkipPrinting(env.config.threadId, true);
		variant_conf = CompilerConfig(env.config with flowfile = "___tmp___");
		pair = parseAndTypecheckProgram(variant_conf, initFcTypeEnvGlobal(), "___tmp___");
		fcSetSkipPrinting(env.config.threadId, false);
		if (pair.second == 0) {
			fcReplDebug("WAS TYPECHECKED", env.config, verb);
			Some(switch(variant) {
				FcReplExp(__, __, __): FcReplExp(variant with program = Some(pair.first));
				FcReplStats(__,__,__): FcReplStats(variant with program = Some(pair.first));
				FcReplDecls(__,__,__): FcReplDecls(variant with program = Some(pair.first));
			});
		} else {
			fcReplDebug("WAS NOT TYPECEHECKED", env.config, verb);
			None();
		}
	});
	ret = make(1);
	if (isNone(ret)) {
		make(0); {}
	}
	ret;
}

fcReplAdd(env0 : FcReplEnv, name : string, code : string) -> FcReplEnv {
	env = FcReplEnv(env0 with 
		pieces = removeFromTree(env0.pieces, name)
	);
	switch (fcReplMakePiece(env, name, code)) {
		Some(piece): {
			fcReplDebug("REPL ADDED: \n" + toString(piece) + "\n\n", env.config, 1);
			FcReplEnv(env with 
				pieces = setTree(env.pieces, name, piece)
			);
		}
		None(): {
			fcReplDebug("REPL ERROR IN CODE:\n" + code, env.config, 0);
			fcReplPrintln("the entered code contains errors and cannot be compiled.", false, env.config);
			env;
		}
	}
}

fcReplRun(env : FcReplEnv, code0 : string) -> void {
	switch (fcReplMakePiece(env, "", code0)) {
		Some(piece): {
			switch (piece.program) {
				Some(program): {
					globals = fcInitEvalGlobals(program, println, env.globEnv);
					ret = fcCallFunction("main", [], globals);
					if (getDataTagForValue(ret) == 4) {
						err = cast(ret : flow -> string);
						println("Runtime error occured: " + err);
					} else if (ret == voidValue()) {
						// Normal exit status
					} else {
						println("Strage, main function must return void, but returned '" + toString(ret) + "'");
					}
				}
				None(): {
				}
			}
		}
		None(): {
			fcReplDebug("REPL ERROR IN CODE:\n" + code0, env.config, 0);
			fcReplPrintln("the entered code contains errors and cannot be compiled.", false, env.config);
		}
	}
	fcDeleteGently("___tmp___.js", env.config);
	fcDeleteGently("___tmp___.flow", env.config);
}

fcReplJoinCode(env : FcReplEnv, all : bool) -> string {
	imports = uniq(concat(env.imports, ["string"]));
	strGlue(map(imports, \imp -> "import " + 
		(if (endsWith(imp, ";")) imp else imp + ";")
	), "\n") + "\n\n" +
	(if (sizeTree(env.pieces) == 0) "" else 
		concatStrings(map(
			sortCustom(tree2pairs(env.pieces), \p -> p.first, true), 
			\pair -> 
				switch (pair.second) {
					FcReplDecls(name, code, prog): "// " + name + "\n" + code + "\n";
					FcReplStats(name, code, prog): if (all) "// " + name + "\n/* \n" + strIndent(code) + "\n*/\n" else "";
					FcReplExp(name, code, prog):   if (all) "// " + name + "\n//" + strReplace(code, "\n", "\\n") + "\n" else "";
				}
		))
	) +
	(if (env.code == "") "" else env.code + "\n\n");
}

fcReplPrintHelp(details : string) -> string {
	if (details == "add") {
		"Adding a piece of code.\n" +
		"-----------------------\n" +
		"To add a piece of code enter the command:\n" +
		"\t> add <name> [force]\n" +
		"where <name> is the name of a function/variable/struct/union/etc.\n" + 
		"then press enter and start input of code. Add a 'force' parameter to overwrite the existing code.\n" + 
		"The empty line (double enter) will be considered the end of the code.\n";
	} else if (details == "del") {
		"Deleting a piece of code.\n" +
		"-------------------------\n" +
		"To delete a piece of code enter the command:\n" +
		"\t> del <name>\n" +
		"where <name> is the name of a function/variable/struct/union/etc. added at some previous steps\n";
	} else if (details == "eval") {
		"Evaluate an expression.\n" +
		"-----------------------\n" +
		"To evaluate an expression enter the command:\n" +
		"\t> eval \n" +
		"and press enter. After that the stage of code of the expression input begins.\n" +
		"The other way to enter an expression is just start typing it, so by default what is on\n"+
		"the console is considered an expression to evaluate\n" +
		"The empty line (double enter) means the end of the input.\n";
	} else if (details == "exec") {
		"Execute a named piece code.\n" +
		"-----------------------\n" +
		"To execute a piece of code the command:\n" +
		"\t> exec <name>\n" +
		"and press enter.\n";
	} else if (details == "save") {
		"Save entered code as a file.\n" +
		"----------------------------\n" +
		"To save all entered code use the command:\n" +
		"\t> save <file>\n" +
		"where <file> is the name of the file, where to the code is saved.\n";
	} else if (details == "show") {
		"Show a piece of code.\n" +
		"----------------------------\n" +
		"To show previously entered piece of code use the command:\n" +
		"\t> show <name>\n" +
		"where <name> is the name of a function/variable/struct/union/etc. added at some previous steps.\n" +
		"You can use 'show all' command to see the whole source code, including the original file source.\n";
	} else if (details == "import") {
		"Add an import.\n" +
		"----------------------------\n" +
		"To add an imported module use command:\n" +
		"\t> import <module>\n" +
		"where <module> is the name of a module.\n";
	} else if (details == "config") {
		"Set a config key-value pairs.\n" +
		"----------------------------\n" +
		"To set config options use a space separated key-value pairs (separated by =):\n" +
		"\t> config <key_1>=<val_1> <key_2>=<val_2> ... <key_n>=<val_n>\n";
	} else {
		"Flowc REPL commands:\n" +
		"--------------------\n" +
		"help            - print this message\n" +
		"help <command>  - print the help on a specific command\n" +
		"exit            - exit from the interpreter\n" +
		"eval            - eval an expression\n" +
		"exec            - execute a named code fragment\n" +
		"add <name>      - add a named code fragment \n" +
		"show <name>     - show a named code fragment \n" +
		"del <name>      - delete a named code fragment \n" +
		"save <file>     - save to a file \n" +
		"import <module> - add an import \n" +
		"config <pairs>  - set config key-value pairs \n";
	}
}

fcReadLine() -> string {
	readUntil("\n");
}

fcReadCode(config : CompilerConfig) -> string {
	code = fcReadLines("", "");
	fcReplDebug("REPL code:\n" + code, config, 3);
	code;
}

fcReadLines(prev : string, acc : string) -> string {
	line = fcReadLine();
	two_lines = prev + line;
	if (endsWith(two_lines, "\n\n") || endsWith(two_lines, "\r\n\r\n")) {
		acc + two_lines
	} else {
		fcReadLines(line, acc + prev);
	}
}

fcReplCommand2s(command : FcReplCommand, full : bool) -> string {
	switch (command) {
		FcReplEval(expr):            "eval" + if (full) " " + expr else "";
		FcReplExec(piece):           "exec " + fcReplPiece2s(piece, full);
		FcReplAdd(name, code, exec): "add " + name + (if (full) "\n" + code else "") + (if (!exec) "" else " exec");
		FcReplDel(name):             "del " + name;
		FcReplSave(file):            "save " + file;
		FcReplImport(file):          "import " + file;
		FcReplConfig(opts):          "config " + strGlue(opts, " ");
		FcReplExit():                "exit";
	}
}

fcReplPiece2s(piece : FcReplPiece, full : bool) -> string {
	switch (piece) {
		FcReplDecls(name, code, prog): name + " decls" + (if (full) " \n" + code else ""); 
		FcReplStats(name, code, prog): name + " stats" + (if (full) " \n" + code else "");
		FcReplExp(name, code, prog):   name + " exp" + (if (full) " \n" + code else "");
	}
}

fcReplLog(message : string, conf : CompilerConfig) -> void {
	log_file = getConfigParameterDef(conf.config, "repl-log", getFlowDir() + "/.log/flowc_repl.log");
	log_dir = fcDirName(log_file);
	if (log_dir != "") {
		err = ensureDirectoryExists(log_dir);
		if (err != "") {
			fcPrintln(err, conf.threadId);
		}
	}
	if (log_file != "") {
		log_size = s2i(getConfigParameterDef(conf.config, "log-max-lines", "128"));
		message_size = getConfigParameterDef(conf.config, "log-max-message", "4096");
		if (isDigits(message_size)) {
			writeLogMessage(fcCutLongStringUpTo(message, s2i(message_size)), log_file, log_size);
		} else {
			writeLogMessage(message, log_file, log_size);
		}
	}
}
