import tools/flowc/manipulation/countvars;
import tools/flowc/preload_modules;
import tools/flowc/completion;
import tools/flowc/find_occurrences;
import lingo/linecolumn;

export {
	handleFindOptions(env : FcTypeEnvGlobal, flowfile : string, prog : FiProgram) -> void;
	findDefDecl(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, symbol : string) -> void;

	// Uses global cache for lookups.
	fcFastFindUses(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void;

	// Find a type info for a symbol at given position.
	fcSymbolInfo(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void;
}

handleFindOptions(env : FcTypeEnvGlobal, file : string, prog : FiProgram) -> void {
	config = prog.config;

	dumpIds = getConfigParameter(config.config, "dump-ids");
	if (dumpIds != "") {
		dumpFcProgramIds(env, prog, dumpIds);
	}

	if (getConfigParameter(config.config, "dump-counts") != "") {
		dumpProgramCounts(prog);
	}

	line = getConfigParameter(config.config, "exp-line");
	col = getConfigParameter(config.config, "exp-column");
	if (isAnyConfigParametersSet(config.config, ["find-type", "find-definition", "find-declaration", "find-uses"])) {
		if (line != "" && col != "") {
			findDefDeclByLineCol(env, file, prog, s2i(line) - 1, s2i(col) - 1);
		} else {
			fcPrintln("Fail: Expect exp-line and exp-column arguments", config.threadId);
		}
	}

	if (isConfigParameterTrue(config.config, "complete")) {
		if (line != "" && col != "") {
			findCompletion(prog, file, s2i(line) - 1, s2i(col) - 1);
		} else {
			fcPrintln("Fail: Expect exp-line and exp-column arguments", config.threadId);
		}
	}
}

findDefDeclByLineCol(env : FcTypeEnvGlobal, file : string, prog : FiProgram, line : int, col : int) -> void {
	config = prog.config;
	found = findFiExpInProgramAtLineCol(prog, file, line, col, true);
	switch (found.first) {
		Some(e):
			if (isConfigParameterTrue(config.config, "find-type")) {
				fcPrintln("Type=" + prettyFiType(FcPretty(false, true, makeTree(), makeTree()), fiExpType(e), makeSet()), config.threadId);
			} else {
				switch (e) {
					FiVar(name, type, start): {
						module = name2FimoduleInFiProgram(prog, file, name);
						if (isConfigParameterTrue(config.config, "find-definition")) {
							switch (lookupTree(prog.names.toplevel, name)) {
								Some(decl): printLocation(config, env, module.fileinfo, decl.defiStart, decl.defiStart + strlen(name), "");
								None(): {
									fcPrintln("Fail: Could not find global name in " + file + " at line " + i2s(line + 1) + " col " + i2s(col + 1), config.threadId);
								}
							}
						} else if (isConfigParameterTrue(config.config, "find-declaration")) {
							switch (lookupTree(prog.names.toplevel, name)) {
								Some(decl): printLocation(config, env, module.fileinfo, decl.declStart, decl.declStart + strlen(name), "");
								None(): {
									fcPrintln("Fail: Could not find global name in " + file + " at line " + i2s(line + 1) + " col " + i2s(col + 1), config.threadId);
								}
							}
						} else if (isConfigParameterTrue(config.config, "find-uses")) {
							//findLocalExpType(prog, flowfile, s2i(line) - 1, s2i(column) - 1);
						}
					}
					default: {
						fcPrintln("Fail: Entity in " + file + " at line " + i2s(line + 1) + " col " + i2s(col + 1) + " is not named", config.threadId);
					}
				}
			}
		None(): {
			fcPrintln("Fail: Could not find anything in " + file + " at line " + i2s(line + 1) + " col " + i2s(col + 1), config.threadId);
		}
	}
}

findLocalExpType(prog : FiProgram, file : string, line : int, col : int) -> void {
	mexp : Maybe<FiExp> = findFiExpInProgramAtLineCol(prog, file, line, col, true).first;
	switch (mexp) {
		Some(e): fcPrintln("Type=" + prettyFiType(FcPretty(false, true, makeTree(), makeTree()), fiExpType(e), makeSet()), prog.config.threadId);
		None(): {
			fcPrintln("Fail: Could not find type in " + file + " at line " + i2s(line) + " col " + i2s(col), prog.config.threadId);
		}
	}
}

findFiExpInProgramAtLineCol(prog : FiProgram, file : string, line : int, col : int, wantType : bool) -> Pair<Maybe<FiExp>, string> {
	workingDir = getConfigParameterDef(prog.config.config, "working-dir", "");
	filepath = findFlowPath(file, true, prog.config.includes, workingDir);
	code = getFileContent(filepath);
	resolver = makeLineResolver(code);

	linestart = findLineIndex(resolver, line, 0);
	linetext = findLine(resolver, linestart).line;
	charsToColumn = goToColumn(linetext, col);
	// This is the text before the point
	text = strLeft(linetext, charsToColumn);

	mfiexp = switch (lookupTree(prog.modules, strReplace(file, ".flow", ""))) {
		Some(module): {
			index = linestart + charsToColumn;

			starts2types = fold(
				module.globalVars,
				fold(
					module.natives,
					fold(
						module.functions, 
						makeTree(), 
						\acc, fun -> start2ExpForTypes(fun.lambda, acc, wantType)
					),
					\acc, nat -> start2ExpForTypes(nat.fallbackLambda, acc, wantType)
				),
				\acc, gv -> start2ExpForTypes(gv.value, acc, wantType)
			);
			/*
			println("Looking for " + i2s(index));
			println(text);
			traverseInOrder(starts2types, \k, v -> {
				if (iabs(k - index) < 10) {
					println("At " + i2s(k) + " we have semantically");
					println(prettyFiExp(FcPretty(false, true, makeTree(), makeTree()), v));
					codeline = substring(code, k, k + 10);
					println("from code '" + takeBefore(codeline, "\n", codeline) + "'");
				}
			});*/
			treeIntervalSearch(starts2types, index);
		}
		None(): {
			None();
		}
	}
	Pair(mfiexp, text);
}

// Given this line, find the index of this column (considering 4-char tab indentation)
goToColumn(line : string, col : int) -> int {
	leadingTabs = countLineIndentation(line);
	if (col < 4 * leadingTabs) col / 4
	else col - 3 * leadingTabs;
}

// Here some starts are shifted, because we need to extract info about variable types, i.e. types of corresponding expressions
start2ExpForTypes(e : FiExp, acc : Tree<int, FiExp>, wantType : bool) -> Tree<int, FiExp> {
	switch (e) {
		FiLambda(__, body, __, s):    setTree(start2ExpForTypes(body, acc, wantType), s, e);
		FiCall(f, args, __, s):       setTree(start2ExpForTypes(f, fold(args, acc, \a, arg -> start2ExpForTypes(arg, a, wantType)), wantType), s, e);
		FiLet(__, __, e1, e2, __, s): {
			// NOTE! Here we use e1, not e, because otherwise we'll get void!
			setTree(start2ExpForTypes(e1, start2ExpForTypes(e2, acc, wantType), wantType), s, if (wantType) e1 else e); 
		}
		FiIf(e1, e2, e3, __, s):      setTree(start2ExpForTypes(e1, start2ExpForTypes(e2, start2ExpForTypes(e3, acc, wantType), wantType), wantType), s, e);
		FiSwitch(v, __, cs, __, s):   setTree(start2ExpForTypes(v, fold(cs, acc, \a, c -> start2ExpForTypes(c.body, a, wantType)), wantType), s, e);
		FiCast(e0, __, __, __, s):    setTree(start2ExpForTypes(e0, acc, wantType), s, e);
		FiSeq(es, __, s):             setTree(fold(es, acc, \a, ex -> start2ExpForTypes(ex, a, wantType)), s, e);
		FiCallPrim(op, es, __, s):
			switch (op) {
				// NOTE! Here we use es[1], not e, because otherwise we'll get void!
				FcAssignPrim(): setTree(fold(es, acc, \a, ex -> start2ExpForTypes(ex, a, wantType)), s, if (wantType) es[1] else e);
				default: setTree(fold(es, acc, \a, ex -> start2ExpForTypes(ex, a, wantType)), s, e);
			}
		FiRequire(__, ex, __, s):     setTree(start2ExpForTypes(ex, acc, wantType), s, e);
		FiUnsafe(__, fb, __, s):      setTree(start2ExpForTypes(fb, acc, wantType), s, e);
		FiVar(__, __, s): setTree(acc, s, e);
		FiString(__, s):  setTree(acc, s, e);
		FiBool(__, s):    setTree(acc, s, e);
		FiDouble(__, s):  setTree(acc, s, e);
		FiVoid(s):        setTree(acc, s, e);
		FiInt(__, s):     setTree(acc, s, e);
	}
}

nameAndFcType(name : string, type : FcType) -> string {
	name + " : " + prettyFcType(
		FcPretty(false, true, makeTree(), makeTree()),
		type,
		makeSet()
	)
}

dumpFcProgramIds(env : FcTypeEnvGlobal, prog : FiProgram, file : string) -> void {
	ids = foldTree(prog.modules, [], \modname, module : FiModule, acc -> {
		pc = FcPretty(true, true, makeTree(), makeTree());
		pt = \t -> prettyFiType(pc, t, makeSet());
		psu = \t -> prettyFiStructOrUnion(pc, t, makeSet());
		allIds = isConfigParameterTrue(prog.config.config, "dump-ids-all");

		pathParts = ["file " + module.fileinfo.flowfile]; //], strSplit(module.flowfile, "/")));
		content = fcFileSource(env, module.fileinfo.fullpath);
		resolver = makeLineResolver(content);

		fl = \pos -> {
			i2s(findLine(resolver, pos).lineno);
		}

		imports = map(module.imports, \im -> "import " + im.flowfile);
		module_exports = buildSet(module.exports);

		structs = fold(module.structs, [], \acc2, s ->
			if (allIds || containsSet(module_exports, s.name)) {
				// TODO: We should expand the struct fields here
				// struct Text(text : string, style : [CharacterStyle])
				arrayPush(acc2, "struct " + psu(s) + ";");
			} else acc2
		);
		unions = fold(module.unions, [], \acc2, u -> 
			if (allIds || containsSet(module_exports, u.name)) {
				// TODO: We should expand the union structs here
				// union Form ::= Text, ...;
				arrayPush(acc2, "union " + trim2(psu(u), "()") + ";");
			} else acc2

		);

		natives = fold(module.natives, [], \acc2, na : FiNativeDec -> 
			if (allIds || containsSet(module_exports, na.name)) {
				arrayPush(acc2, "native " + na.name + " : " + pt(na.type) + " = " + na.nativeName + ";");
			} else acc2
		);

		functions = fold(module.functions, [], \acc2, fn : FiFunctionDec ->
			if (allIds || containsSet(module_exports, fn.name)) {
				arrayPush(acc2, "function " + fn.name + pt(fn.type) + ";");
			} else acc2
		);

		vars = fold(module.globalVars, [], \acc2, gv ->
			if (allIds || containsSet(module_exports, gv.name)) {
				arrayPush(acc2, "global " + gv.name + " : " + pt(gv.type) + ";");
			} else acc2
		);

		strings = concatA([pathParts, imports, structs, unions, natives, functions, vars]);
		arrayPush(acc, strings)
	});
	allstrings = concatA(ids);
	text = strGlue(allstrings, "\n");
	setFileContent(file, text);
	{}
}

findDefDecl(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, name : string) -> void {
	switch (fcLookupNameInCache(globEnv, name)) {
		Some(symbol): {
			//fcServerLog("name: " + name + " is chached");
			switch (fcLoadFromCache(globEnv, symbol.module)) {
				Some(loaded): {
					fileinfo = loaded.module.fileinfo;
					proc_decl = \dec, def -> {
						if (getConfigParameter(config.config, "find-definition") != "") {
							printLocation(config, globEnv, fileinfo, def, def + strlen(name), "");
						} else if (getConfigParameter(config.config, "find-declaration") != "") {
							printLocation(config, globEnv, fileinfo, dec, dec + strlen(name), "");
						} else if (getConfigParameter(config.config, "find-defdecl") != "") {
							printLocation(config, globEnv, fileinfo, def, def + strlen(name), "");
							if (dec != def) {
								printLocation(config, globEnv, fileinfo, dec, dec + strlen(name), "");
							}
						}
					}
					//fcServerLog("module: " + symbol.module + " is chached");
					switch (symbol.named) {
						FiTypeStruct(__,__,__, start): printLocation(config, globEnv, fileinfo, start, start + strlen(name), "");
						FiTypeUnion(__,__,__, start):  printLocation(config, globEnv, fileinfo, start, start + strlen(name), "");
						FiFunctionDec(__,__,__, dec, def): proc_decl(dec, def);
						FiGlobalVar(__,__,__, dec, def): proc_decl(dec, def);
						FiNativeDec(__,__,__,__,__, dec, def): proc_decl(dec, def);
					}
				}
				None(): {
					//fcServerLog("module: " + symbol.module + " is not chached", config);
					fcPrintln("Fail: cound not find definition/declaration for " + name, config.threadId);
					fcTryToLoadFile(config, globEnv);
				}
			}
		}
		None(): {
			//fcServerLog("name: " + name + " is not chached", config);
			//fcPrintln("Complile file " + file + " please", config.threadId);
			fcPrintln("Fail: cound not find definition/declaration for " + name, config.threadId);
			fcTryToLoadFile(config, globEnv);
		}
	}
}

findCompletion(prog : FiProgram, file : string, line : int, col : int) -> void {
	context = findFiExpInProgramAtLineCol(prog, file, line, col, false);
	mexp : Maybe<FiExp> = context.first;
	switch (mexp) {
		Some(e): {
			codeCompletion(prog, e, line, col);
		}
		None(): {
			before = trim2(context.second, " \t\n;");
			codeCompleteName(prog, before, line, col);
		}
	}
}

fcFastFindUses(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void {
	switch (fastSymbolNature(config, globEnv, name, line, col)) {
		Some(nature): {
			print_location = \module, pos -> 
				printLocation(config, globEnv, module.fileinfo, pos, pos + strlen(nature.name), " uses " + nature.name);
			module_uses = \module -> 
				iterSet(
					fcFastFindOccurrencesInFiModule(config, globEnv, module, nature),
					\pos -> print_location(module, pos)
			);
			switch (nature.scope) {
				FcGlobalScope(): {
					fcIterCache(globEnv, \m -> module_uses(m));
				}
				FcModuleScope(): {
					maybeApply(
						fcLoadFromCache(globEnv, nature.module), 
						\loaded -> module_uses(loaded.module)
					);
				}
				FcLocalScope(): {
					maybeApply(
						fcLoadFromCache(globEnv, getTargetModuleName(config)), 
						\loaded -> iterSet(
							fcFindLocalOccurrences(globEnv, loaded.module, line, col, nature.name, nature.kind), 
							\pos -> print_location(loaded.module, pos + 1)
						)
					);
				}
			}
		}
		None(): { 
			fcPrintln("Fail: couldn't find " + name, config.threadId);
			fcTryToLoadFile(config, globEnv);
		}
	}
}

fcSymbolInfo(config: CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> void {
	switch (fastSymbolNature(config, globEnv, name, line, col)) {
		Some(nature): {
			switch (nature.cached) {
				Some(cached): {
					fcPrintln(fcCacheNamed2s(cached), config.threadId);
				}
				None(): {
					maybeApply(
						fcLoadFromCache(globEnv, getTargetModuleName(config)), 
						\loaded ->
							maybeApply(findFiExpInModuleAtLineCol(globEnv, loaded.module, line, col, true), 
								\e -> fcPrintln(prettyFiType(dummyPretty, fiExpType(e), makeSet()), config.threadId)
							)
					);
				}
			}
		}
		None(): { 
			//fcServerLog("no symbol nature for " + name + " at line: " + i2s(line) + ", col: " + i2s(col) + " in " + getTargetModuleName(config), config);
			//fcPrintln("Fail: couldn't find " + name, config.threadId);
			fcTryToLoadFile(config, globEnv);
		}
	}
}

findFiExpInModuleAtLineCol(env : FcTypeEnvGlobal, module : FiModule, line : int, col : int, wantType : bool) -> Maybe<FiExp> {
	code = fcFileSource(env, module.fileinfo.fullpath);
	resolver = makeLineResolver(code);
	index = findLineIndex(resolver, line, col);
	starts2types = fold(
		module.globalVars,
		fold(
			module.natives,
			fold(
				module.functions, 
				makeTree(), 
				\acc, fun -> start2ExpForTypes(fun.lambda, acc, wantType)
			),
			\acc, nat -> start2ExpForTypes(nat.fallbackLambda, acc, wantType)
		),
		\acc, gv -> start2ExpForTypes(gv.value, acc, wantType)
	);
	treeIntervalSearch(starts2types, index);
}

fcCacheNamed2s(cached : FcCacheNamed) -> string {
	symbol = cached.named;
	decl = switch (symbol) {
		FiStructOrUnion(): prettyFiStructOrUnion(FcPretty(true, true, makeTree(), makeTree()), symbol, makeSet());
		FiDeclaration(): prettyFiDeclaration(dummyPretty, symbol, makeSet());
	};
	cached.module + (if (cached.exported) ":" else " (local name)") + cached.module + "\n\n" + decl;
}

fcTryToLoadFile(conf : CompilerConfig, env : FcTypeEnvGlobal) -> void {
	deferred(\-> { 
		// Load silently: error messages are suppressed
		config = CompilerConfig(conf with config = setTree(conf.config, "no-errors", "1"));
		parseAndTypecheckProgram(config, env, config.flowfile); 
		{ } 
	});
}
