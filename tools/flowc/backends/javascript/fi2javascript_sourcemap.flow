import tools/flowc/backends/javascript/fi2javascript_utils;
import sys/system;

export {
	fiAssembleSourceMapFile(cfg : FiJsConfig, ovl : FiJsOverlayGroup, headerCode : string, runtimeContent : string, sourceMap : List<FiJsMapping>, callback : () -> void) -> void;

	FiJsMapping(
		name : string,
		source : string,
		originalLine : int,
		originalColumn : int,
		generatedLine : int,
		generatedColumn : int,
	);
}

fiAssembleSourceMapFile(cfg : FiJsConfig, ovl : FiJsOverlayGroup, headerCode : string, runtimeContent : string, sourceMap : List<FiJsMapping>, callback : () -> void) {
	if (cfg.debug && !cfg.beautify && !cfg.compress && countList(sourceMap) > 0) {
		hasRequire = ovl.requireList != [];
		headerLines = b2i(i2b(strlen(fcJsStrict(cfg)))) + b2i(ovl.requireList != []) + length(strSplit(headerCode + runtimeContent, "\n"));
		sourceMapJsonFile = resolveRelativePath(strSplit(cfg.outputfile, ".")[0] + ".flow.map");
		sourceMapJson = array2json(list2array(sourceMap), \m -> {
			"{
				\"generated\" : {
					\"line\":" + i2s(headerLines + m.generatedLine) + ",
					\"column\":" + i2s(m.generatedColumn) + "
				},
				\"source\" : \"" + m.source + "\",
				\"original\": {
					\"line\":" + i2s(m.originalLine) + ",
					\"column\":" + i2s(m.originalColumn) + "
				},
				\"name\": \"" + m.name + "\"
			}"
		});
		saveFileContent(sourceMapJsonFile, sourceMapJson, cfg.threadId);
		startProcess(
			"node",
			[
				"assemble_source_map.js",
				resolveRelativePath(cfg.outputfile),
				sourceMapJsonFile,
				resolveRelativePath(cfg.outputfile) + ".map"
			],
			getFlowDir() + "tools/source_map/",
			"",
			\errorcode, stdout, stderr -> {
				fcPrintln(stdout, cfg.threadId);
				fcPrintln(stderr, cfg.threadId);
				callback();
			}
		);
	} else {
		callback();
	}
}