import tools/flowc/backends/common;
import formats/json/json_parse;
import formats/uri2/uri2;

export {
	fiPrepareWebFonts(cfg : FiJsConfig) -> Pair<[string], [string]>;
}

fiPrepareWebFonts(cfg : FiJsConfig) {
	fontSetup = [
		Pair("styles", "@fontstyles"),
		Pair("webfontconfig", "@webfontconfig")
	];

	resourcesuffix = "_tmp.json";
	resourceprefix = "_";

	res = if (!fileExists(cfg.fontconfig)) {
		fcPrintln("WARNING: font config file: " + cfg.fontconfig + " doesn't exist", cfg.threadId);
		[];
	} else {
		fcVerbose(cfg, 0, "Using fontconfig file '" + cfg.fontconfig + "'");
		jf = getFileContent(cfg.fontconfig);
		switch (parseJsonSafer(jf)) {
			Some(jsn): {
				fold(fontSetup, [], \acc, e -> {
					v = getJsonFieldValue(jsn, e.first, JsonNull());
					if (v != JsonNull()) {
						fl_name = resourceprefix + e.first + resourcesuffix;
						saveFileContent(fl_name, json2string(v), cfg.threadId);
						arrayPush(acc, Pair(fl_name, e.second));
					} else acc
				});
			}
			None(): {
				fcPrintln("WARNING: Config file: " + cfg.fontconfig + " contains non-valid JSON format", cfg.threadId);
				[]
			}
		}
	}
	tmpfiles = map(res, \p -> p.first);
	args = concatA(map(res, \p -> ["-resource " + p.first + p.second]));

	Pair(tmpfiles, args);
}
