import ds/tree;

export {
	fiJsNative(name: string) -> Maybe<string>;
}

js_natives : ref Maybe<Tree<string, string>> = ref None();

fiJsNative(name: string) -> Maybe<string> {
	natives = onlyOnce(js_natives, fiJsNativesDefinitions);
	lookupTree(natives, name);
}

fiJsNativesDefinitions() -> Tree<string, string> {
pairs2tree([
Pair("makeNativeHashMap",
"function $F_0(makeNativeHashMap)(hash, cap, load) {
	return new Object();
}\n"),
Pair("setNativeHashMap",
"function $F_0(setNativeHashMap)(m, key, value) {
	m[key] = value;
}\n"),
Pair("getNativeHashMap",
"function $F_0(getNativeHashMap)(m, key) {
	return m.key ? $F_1(Some)(m.key) : $F_1(None);
}\n"),
Pair("removeNativeHashMap",
"function $F_0(removeNativeHashMap)(m, key) {
	delete m.key;
}\n"),
Pair("containsNativeHashMap",
"function $F_0(containsNativeHashMap)(m, key) {
	return m.key != undefined;
}\n"),
Pair("sizeNativeHashMap",
"function $F_0(sizeNativeHashMap)(m) {
	return Object.keys(m).length;
}\n"),
Pair("clearNativeHashMap",
"function $F_0(clearNativeHashMap)(m) {
	for (key in m) delete m[key];
}\n"),
Pair("cloneNativeHashMap",
"function $F_0(cloneNativeHashMap)(m) {
	return new Object.assign({}, m);
}\n"),
Pair("iterNativeHashMap",
"function $F_0(iterNativeHashMap)(m, f) {
	for (key in m) {
		f(key, m[key]);
	}
}\n"),
Pair("funcNativeHashMap",
"function $F_0(funcNativeHashMap)(m) {
	return (x) => x.hashCode();
}\n"),
]);
}