import ds/tree;

export {
	fiJsNative(name: string) -> Maybe<string>;
}

js_natives : ref Maybe<Tree<string, string>> = ref None();

fiJsNative(name: string) -> Maybe<string> {
	natives = onlyOnce(js_natives, fiJsNativesDefinitions);
	lookupTree(natives, name);
}

fiJsNativesDefinitions() -> Tree<string, string> {
pairs2tree([
// Functions for a particual version of hash map with integer keys
Pair("makeNativeIntMap",
"function $F_0(makeNativeIntMap)(hash, cap, load) {
	return new Map();
}\n"),
Pair("setNativeIntMap",
"function $F_0(setNativeIntMap)(m, key, value) {
	m.set(key, value);
}\n"),
Pair("getNativeIntMap",
"function $F_0(getNativeIntMap)(m, key) {
	return m.has(key) ? $F_1(Some)(m.get(key)) : $F_1(None);
}\n"),
Pair("removeNativeIntMap",
"function $F_0(removeNativeIntMap)(m, key) {
	m.delete(key);
}\n"),
Pair("containsNativeIntMap",
"function $F_0(containsNativeIntMap)(m, key) {
	return m.has(key);
}\n"),
Pair("sizeNativeIntMap",
"function $F_0(sizeNativeIntMap)(m) {
	return m.size;
}\n"),
Pair("clearNativeIntMap",
"function $F_0(clearNativeIntMap)(m) {
	m.clear();
}\n"),
Pair("cloneNativeIntMap",
"function $F_0(cloneNativeIntMap)(m) {
	var clone = new Map();
	m.forEach((v, k) => clone.set(k, v));
	return clone;
}\n"),
Pair("iterNativeIntMap",
"function $F_0(iterNativeIntMap)(m, f) {
	m.forEach((v, k) => f(k, v))
}\n"),
Pair("funcNativeIntMap",
"function $F_0(funcNativeIntMap)(m) {
	return (x) => x.hashCode();
}\n"),

// Functions for a general polymorphic version of hash map
Pair("makeNativeHashMap",
"function $F_0(makeNativeHashMap)(hash, cap, load, dummy) {
	return new Map();
}\n"),
Pair("setNativeHashMap",
"function $F_0(setNativeHashMap)(m, key, value) {
	m.set(key, value);
}\n"),
Pair("getNativeHashMap",
"function $F_0(getNativeHashMap)(m, key, dummy) {
	return m.has(key) ? $F_1(Some)(m.get(key)) : $F_1(None);
}\n"),
Pair("removeNativeHashMap",
"function $F_0(removeNativeHashMap)(m, key, dummy) {
	m.delete(key);
}\n"),
Pair("containsNativeHashMap",
"function $F_0(containsNativeHashMap)(m, key, dummy) {
	return m.has(key);
}\n"),
Pair("sizeNativeHashMap",
"function $F_0(sizeNativeHashMap)(m, dummy) {
	return m.size;
}\n"),
Pair("clearNativeHashMap",
"function $F_0(clearNativeHashMap)(m, dummy) {
	m.clear();
}\n"),
Pair("cloneNativeHashMap",
"function $F_0(cloneNativeHashMap)(m, dummy) {
	var clone = new Map();
	m.forEach((v, k) => clone.set(k, v));
	return clone;
}\n"),
Pair("iterNativeHashMap",
"function $F_0(iterNativeHashMap)(m, f, dummy) {
	m.forEach((v, k) => f(k, v))
}\n"),
Pair("funcNativeHashMap",
"function $F_0(funcNativeHashMap)(m, dummy) {
	return (x) => x.hashCode();
}\n"),

]);
}
