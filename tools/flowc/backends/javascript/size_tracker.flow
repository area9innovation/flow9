import ds/tree;
import string;
import fs/filesystem;
import tools/flowc/flowc_println;

export {
	makeSizeTracker() -> SizeTracker;

	registerFileSize(s : SizeTracker, file : string, size : int) -> SizeTracker;

	reportFileSizes(s : SizeTracker, id : int) -> void;
}

SizeTracker(filesizes : Tree<string, int>, foldersizes : Tree<string, int>);

makeSizeTracker() {
	SizeTracker(makeTree(), makeTree());
}

registerFileSize(s : SizeTracker, file : string, size : int) -> SizeTracker {
	// To make sure the standard-lib files are counted as root
	folder = dirName("/" + file) + "/";
	folderSize = size + lookupTreeDef(s.foldersizes, folder, 0);
	SizeTracker(
		setTree(s.filesizes, file, size),
		setTree(s.foldersizes, folder, folderSize)
	);
}

reportFileSizes(st : SizeTracker, id : int) -> void {
	rep = \t -> {
		sizes : Tree<int, [string]> = foldTree(t, makeTree(), \f, s, acc -> treePushToArrayValue(acc, s, f));
		traverseRInOrder(sizes, \s, fs -> {
			iter(fs, \f -> 
				fcPrintln(lpad(i2s(s), "0", 7) + ":" + f, id)
			)
		});
	}
	fcPrintln("File size as JS:", id);
	rep(st.filesizes);

	fcPrintln("\nFolder size as JS:", id);
	rep(st.foldersizes);
}
