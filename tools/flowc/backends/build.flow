import tools/flowc/backends/javascript/fi2javascript;
import tools/flowc/backends/java/fi2java;
import tools/flowc/backends/fi2rust;
import tools/flowc/backends/nim/fi2nim;
import tools/flowc/backends/d/fi2d;
import tools/flowc/backends/lisp/fi2lisp;
import tools/flowc/backends/ml/fi2ml;
import tools/flowc/backends/cpp/fc2cpp;
import tools/flowc/backends/bytecode/fi2bytecode;
import tools/flowc/incremental/fc2fi;
import tools/flowc/backends/protobuf/fi2protobuf;
import tools/flowc/backends/html/fi2html;
import tools/flowc/backends/doc/fi2doc;
import tools/flowc/backends/wasm/fi2wasm;
import tools/flowc/backends/inca/fi2inca;
import tools/flowc/backends/flow/fi2flow;

export {
	buildFiProgram(program : FiProgram, globEnv : FcTypeEnvGlobal, callback : (int) -> void) -> void;
}

buildFiProgram(program : FiProgram, globEnv : FcTypeEnvGlobal, callback : (int) -> void) -> void {
	configs = getFcBackendConfigs(program.config);
	bc_step   = eitherFn(configs.bcconfig,   \cfg -> \->fi2bytecode(program, cfg, \ -> callback(0)), \ -> \ -> callback(0));
	html_step = eitherFn(configs.htmlconfig, \cfg -> \->fi2html(program, cfg, bc_step), \ -> \ -> bc_step());
	js_step   = eitherFn(configs.jsconfig,   \cfg -> \->fi2javascript(program, cfg, html_step), \ -> \ -> html_step());
	es_step   = eitherFn(configs.es6config,  \cfg -> \->fi2javascript(program, cfg, js_step), \ -> \ -> js_step());
	ts_step   = eitherFn(configs.tsconfig,   \cfg -> \->fi2javascript(program, cfg, es_step), \ -> \ -> es_step());
	java_step = eitherFn(configs.javaconfig, \cfg -> \->fi2java(program, cfg, ts_step), \ -> \ -> ts_step());
	rust_step = eitherFn(configs.rustconfig, \cfg -> \->fi2rust(program, cfg, java_step), \ -> \ -> java_step());
	nim_step  = eitherFn(configs.nimconfig,  \cfg -> \->fi2nim(program, cfg, rust_step), \ -> \ -> rust_step());
	d_step    = eitherFn(configs.dconfig,    \cfg -> \->fi2d(program, cfg, nim_step), \ -> \ -> nim_step());
	lisp_step = eitherFn(configs.lispconfig, \cfg -> \->fi2lisp(program, cfg, d_step), \ -> \ -> d_step());
	cpp_step  = eitherFn(configs.cppconfig,  \cfg -> \->fc2cpp(program, cfg, lisp_step), \ -> \ -> lisp_step());
	proto_step= eitherFn(configs.protobufconfig,\cfg -> \->fi2protobuf(program, cfg, cpp_step), \ -> \ -> cpp_step());
	ml_step   = eitherFn(configs.mlconfig,   \cfg -> \->fi2ml(program, cfg, proto_step), \ -> \ -> proto_step());
	doc_step  = eitherFn(configs.docconfig,  \cfg -> \->fi2doc(program, cfg, ml_step), \ -> \ -> ml_step());
	wasm_step = eitherFn(configs.wasmconfig, \cfg -> \->fi2wasm(program, globEnv, cfg, doc_step), \ -> \ -> doc_step());
	inca_step = eitherFn(configs.incaconfig, \cfg -> \->fi2inca(program, cfg, wasm_step), \ -> \ -> wasm_step());
	flow_step = eitherFn(configs.flowconfig, \cfg -> \->fi2flow(program, cfg, inca_step), \ -> \ -> inca_step());
	// Actual start of a program building
	flow_step();
}
