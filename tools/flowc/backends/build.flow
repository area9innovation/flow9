import tools/flowc/backends/javascript/fi2javascript;
import tools/flowc/backends/java/fi2java;
import tools/flowc/backends/fi2rust;
import tools/flowc/backends/nim/fi2nim;
import tools/flowc/backends/d/fi2d;
import tools/flowc/backends/lisp/fi2lisp;
import tools/flowc/backends/ml/fi2ml;
import tools/flowc/backends/cpp/fc2cpp;
import tools/flowc/backends/bytecode/fi2bytecode;
import tools/flowc/incremental/fc2fi;
import tools/flowc/backends/protobuf/fi2protobuf;
import tools/flowc/backends/speedy/fi2speedy;
import tools/flowc/backends/html/fi2html;
import tools/flowc/backends/doc/fi2doc;
import tools/flowc/backends/wasm/fi2wasm;
import tools/flowc/backends/inca/fi2inca;
import tools/flowc/backends/cpp2/fi2cpp2;
import tools/flowc/backends/flow/fi2flow;
import tools/flowc/backends/tsd/fi2tsd;
import tools/flowc/backends/cpp3/fi2cpp3;
import promise;

export {
	buildFiProgram(program : FiProgram, globEnv : FcTypeEnvGlobal, callback : (int) -> void) -> void;
}

buildFiProgram(program0 : FiProgram, globEnv : FcTypeEnvGlobal, callback : (int) -> void) -> void {
	configs = getFcBackendConfigs(program0.config);

	program = switch (configs.incaconfig) {
		None(): program0;
		Some(ic): {
			fi2inca(program0, ic);
		}
	}
	exit_code_callback = \fulfil, reject -> \e -> if (e == 0) fulfil(0) else reject(e);
	doneP(
		allP(filtermap([
			maybeMap(configs.bcconfig,       \cfg -> Promise(\fulfil, reject-> fi2bytecode(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.jsconfig,       \cfg -> Promise(\fulfil, reject-> fi2javascript(program, globEnv, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.es6config,      \cfg -> Promise(\fulfil, reject-> fi2javascript(program, globEnv, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.tsconfig,       \cfg -> Promise(\fulfil, reject-> fi2javascript(program, globEnv, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.htmlconfig,     \cfg -> Promise(\fulfil, reject-> fi2html(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.javaconfig,     \cfg -> Promise(\fulfil, reject-> fi2java(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.rustconfig,     \cfg -> Promise(\fulfil, reject-> fi2rust(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.nimconfig,      \cfg -> Promise(\fulfil, reject-> fi2nim(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.dconfig,        \cfg -> Promise(\fulfil, reject-> fi2d(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.lispconfig,     \cfg -> Promise(\fulfil, reject-> fi2lisp(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.cppconfig,      \cfg -> Promise(\fulfil, reject-> fc2cpp(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.protobufconfig, \cfg -> Promise(\fulfil, reject-> fi2protobuf(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.speedyconfig,   \cfg -> Promise(\fulfil, reject-> fi2speedy(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.mlconfig,       \cfg -> Promise(\fulfil, reject-> fi2ml(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.docconfig,      \cfg -> Promise(\fulfil, reject-> fi2doc(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.wasmconfig,     \cfg -> Promise(\fulfil, reject-> fi2wasm(program, globEnv, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.flowconfig,     \cfg -> Promise(\fulfil, reject-> fi2flow(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.cpp2config,     \cfg -> Promise(\fulfil, reject-> fi2cpp2(program, cfg, exit_code_callback(fulfil, reject)))),
			maybeMap(configs.cpp3config,     \cfg -> Promise(\fulfil, reject-> fi2cpp3(program, cfg, exit_code_callback(fulfil, reject)))),
		], idfn)),
		\codes -> if (forall(codes, \code -> code == 0)) callback(0) else callback(5),
		callback
	);
}
