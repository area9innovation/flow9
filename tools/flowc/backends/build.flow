import tools/flowc/backends/javascript/fi2javascript;
import tools/flowc/backends/java/fi2java;
import tools/flowc/backends/fi2rust;
import tools/flowc/backends/nim/fi2nim;
import tools/flowc/backends/d/fi2d;
import tools/flowc/backends/lisp/fi2lisp;
import tools/flowc/backends/ml/fi2ml;
import tools/flowc/backends/cpp/fc2cpp;
import tools/flowc/backends/bytecode/fi2bytecode;
import tools/flowc/backends/protobuf/fi2protobuf;
import tools/flowc/backends/speedy/fi2speedy;
import tools/flowc/backends/html/fi2html;
import tools/flowc/backends/doc/fi2doc;
import tools/flowc/backends/wasm/fi2wasm;
import tools/flowc/backends/inca/fi2inca;
import tools/flowc/backends/cpp2/fi2cpp2;
import tools/flowc/backends/flow/fi2flow;
import tools/flowc/backends/cpp3/fi2cpp3;
import tools/flowc/backends/wise/fi2wise;
import promise;

export {
	buildFiProgram(program : FiProgram, globEnv : FcTypeEnvGlobal, callback : (int) -> void) -> void;

	// List of all backends, available in the current flowc build.
	fcListBackends(available: bool) -> [string];
}

// A set of compile-time flags: which of backends are included to the flowc compiler build.
// Particular backends may be excluded from build by overriding these variables
// in flow.config with `env` option, like:
//   `env += fc_enabled_lisp_backend=0`
// or
//   `env += fc_enabled_lisp_backend = false`

fc_enabled_bytecode_backend = true;
fc_enabled_javascript_backend = true;
fc_enabled_html_backend = true;
fc_enabled_java_backend = true;
fc_enabled_rust_backend = true;
fc_enabled_nim_backend = true;
fc_enabled_d_backend = true;
fc_enabled_lisp_backend = true;
fc_enabled_cpp_backend = true;
fc_enabled_protobuf_backend = true;
fc_enabled_speedy_backend = true;
fc_enabled_ml_backend = true;
fc_enabled_doc_backend = true;
fc_enabled_wasm_backend = true;
fc_enabled_flow_backend = true;
fc_enabled_cpp2_backend = true;
fc_enabled_wise_backend = true;
fc_enabled_cpp3_backend = true;

fcListBackends(available: bool) -> [string] {
	choose = \x -> if (available) x else !x;
	filtermap([
		if (choose(fc_enabled_bytecode_backend)) Some("bytecode") else None(),
		if (choose(fc_enabled_javascript_backend)) Some("javascript") else None(),
		if (choose(fc_enabled_html_backend)) Some("html") else None(),
		if (choose(fc_enabled_java_backend)) Some("java") else None(),
		if (choose(fc_enabled_rust_backend)) Some("rust") else None(),
		if (choose(fc_enabled_nim_backend)) Some("nim") else None(),
		if (choose(fc_enabled_d_backend)) Some("d") else None(),
		if (choose(fc_enabled_lisp_backend)) Some("list") else None(),
		if (choose(fc_enabled_cpp_backend)) Some("cpp") else None(),
		if (choose(fc_enabled_protobuf_backend)) Some("protobuf") else None(),
		if (choose(fc_enabled_speedy_backend)) Some("speedy") else None(),
		if (choose(fc_enabled_ml_backend)) Some("ml") else None(),
		if (choose(fc_enabled_doc_backend)) Some("doc") else None(),
		if (choose(fc_enabled_wasm_backend)) Some("wasm") else None(),
		if (choose(fc_enabled_flow_backend)) Some("flow") else None(),
		if (choose(fc_enabled_cpp2_backend)) Some("cpp2") else None(),
		if (choose(fc_enabled_wise_backend)) Some("wise") else None(),
		if (choose(fc_enabled_cpp3_backend)) Some("cpp3") else None(),
	], idfn);
}

buildFiProgram(program0 : FiProgram, globEnv : FcTypeEnvGlobal, callback : (int) -> void) -> void {
	configs = getFcBackendConfigs(program0.config);
	show_msg = \msg -> fcPrintln(msg, program0.config.threadId);

	program = switch (configs.incaconfig) {
		None(): program0;
		Some(ic): {
			fi2inca(program0, ic);
		}
	}
	exit_code_callback = \fulfil, reject -> \e -> if (e == 0) fulfil(0) else reject(e);
	absent_backend_reject = \name, reject -> {
		fcPrintln("Backend " + name + " is not present in this build of flowc. Available backends: [" + strGlue(fcListBackends(true), ", ") + "]", program.config.threadId);
		reject(5);
	}
	doneP(
		allP(filtermap([
			maybeMap(configs.bcconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_bytecode_backend) {
					fi2bytecode(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("bytecode", reject)
				}
			)),
			maybeMap(configs.jsconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_javascript_backend) {
					fi2javascript(program, globEnv, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("javascript", reject)
				}
			)),
			maybeMap(configs.es6config, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_javascript_backend) {
					fi2javascript(program, globEnv, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("javascript", reject)
				}
			)),
			maybeMap(configs.tsconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_javascript_backend) {
					fi2javascript(program, globEnv, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("javascript", reject)
				}
			)),
			maybeMap(configs.htmlconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_html_backend) {
					fi2html(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("html", reject)
				}
			)),
			maybeMap(configs.javaconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_java_backend) {
					fi2java(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("java", reject)
				}
			)),
			maybeMap(configs.rustconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_rust_backend) {
					fi2rust(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("rust", reject)
				}
			)),
			maybeMap(configs.nimconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_nim_backend) {
					fi2nim(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("nim", reject)
				}
			)),
			maybeMap(configs.dconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_d_backend) {
					fi2d(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("d", reject)
				}
			)),
			maybeMap(configs.lispconfig,\cfg -> Promise(\fulfil, reject->
				if (fc_enabled_lisp_backend) {
					fi2lisp(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("lisp", reject)
				}
			)),
			maybeMap(configs.cppconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_cpp_backend) {
					fc2cpp(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("cpp", reject)
				}
			)),
			maybeMap(configs.protobufconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_protobuf_backend) {
					fi2protobuf(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("protobuf", reject)
				}
			)),
			maybeMap(configs.speedyconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_speedy_backend) {
					fi2speedy(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("speedy", reject)
				}
			)),
			maybeMap(configs.mlconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_ml_backend) {
					fi2ml(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("ml", reject)
				}
			)),
			maybeMap(configs.docconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_doc_backend) {
					fi2doc(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("doc", reject)
				}
			)),
			maybeMap(configs.wasmconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_wasm_backend) {
					fi2wasm(program, globEnv, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("wasm", reject)
				}
			)),
			maybeMap(configs.flowconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_flow_backend) {
					fi2flow(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("flow", reject)
				}
			)),
			maybeMap(configs.cpp2config, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_cpp2_backend) {
					fi2cpp2(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("cpp2", reject)
				}
			)),
			maybeMap(configs.wiseconfig, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_wise_backend) {
					fi2wise(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("wise", reject)
				}
			)),
			maybeMap(configs.cpp3config, \cfg -> Promise(\fulfil, reject->
				if (fc_enabled_cpp3_backend) {
					fi2cpp3(program, cfg, exit_code_callback(fulfil, reject))
				} else {
					absent_backend_reject("cpp3", reject)
				}
			)),
		], idfn)),
		\codes -> if (forall(codes, \code -> code == 0)) callback(0) else callback(5),
		callback
	);
}
