// ref structure (bytes : data)
// 0-3  : counter
// 4+ : value

include tools/flowc/backends/wise/lib/memory;


//------------------------------------------------------------------------------
// PUBLIC
//------------------------------------------------------------------------------

// result is an address
createRef[T](value : T) -> i32 {
	typeSize : i32 = sizeoftype(T);
	adr : i32 = allocateMemory(refOffset + typeSize); // data + 2 service fields
	
	objAdr : i32 = adr + refOffset;
	store<>(objAdr, value); // it will be expanded in N store.
	store<>(adr, 1); // counter

	adr;
}

// TODO: dup(adr)?
// how to check types? (adr.value.type == value.type). defValue : T = defoftype(T);
setRef[T](adr : i32, value : T) -> bool {
	cntr : i32 = load<>(adr);
	if (cntr > 0) {
		objAdr : i32 = adr + refOffset;
		// drop(oldValue) ?
		oldValue : T = load<>(objAdr);
		store<>(objAdr, value);
		true;
	} else {
		false; // error
	}
}

getRef[T](adr : i32) -> T {
	cntr : i32 = load<>(adr);
	if (cntr > 0) {
		objAdr : i32 = adr + refOffset;
		// dup(oldValue) ?
		oldValue : T = load<>(objAdr);
		oldValue;
	} else {
		// error
		defValue : T = defoftype(T);
		defValue;
	}
}

//------------------------------------------------------------------------------
// PRIVATE
//------------------------------------------------------------------------------

// offset before data starts
refOffset : i32 = 4;