// tuple structure (bytes : data)
// 0-3  : counter
// 4-7  : id
// 8+ : values

include tools/flowc/backends/wise/lib/memory;


//------------------------------------------------------------------------------
// PUBLIC
//------------------------------------------------------------------------------

// result is an address
// T is a tuple
createStruct[T](id : i32, value : T) -> i32 {
	typeSize : i32 = sizeoftype(T);
	adr : i32 = allocateMemory(tupleOffset + typeSize); // data + 2 service fields
	
	
	tupleAdr : i32 = adr + tupleOffset;
	store<>(tupleAdr, value); // it will be expanded in N store.
	store<>(adr, 1); // counter
	store<>(adr + 4, id);

	adr;
}

getStructId(adr : i32) -> i32 {
	load<>(adr + 4);
}


//------------------------------------------------------------------------------
// PRIVATE
//------------------------------------------------------------------------------

// offset before data starts
tupleOffset : i32 = 8;

// T is a tuple with 2 service fields at the beggining. don't forget to add two i32
// result is a tuple (not a pointer). new value
getStructValue[T](adr : i32) -> T {
	element : T = load<>(adr); // it will be expanded in N load.
	element;
}
