
// first free cell
MEMORY_HEAP_POINTER : i32 = 4096;

// TODO: find the first free cell
// Heap address is hidden
// size  - size in bytes
// result - address of the block
// code - fn call
allocateMemory(size : i32, code : i32) -> i32 {
	freeCell : i32 = load<>(MEMORY_HEAP_POINTER);
	
	// increase memory if necessary
	memSize : i32 = memory.size<>() * 65536;
	diff : i32 = memSize - freeCell;
	if ( diff < 1024 || diff < size ) {
		pageNum : i32 = (size / 65536) + 1;
		prevPageNum : i32 = memory.grow<>(pageNum); // +N pages
// new size = N (code)
// printByte(78);printByte(69);printByte(87);printByte(32);printByte(83);printByte(73);printByte(90);printByte(69);printByte(32);printByte(61);printByte(32);printi32(prevPageNum + pageNum); printByte(32); printi32(prevPageNum7);printByte(32); printByte(40);printByte(code);printByte(41);printByte(10);
	};

	store<>(MEMORY_HEAP_POINTER, freeCell + size); // move the ptr to the next free cell
	freeCell;
}

// size  - size in bytes
freeMemory(address : i32, size : i32) -> () {
	// mark the memory region as free
	// free cells ?
}



initMemory() -> () {
	store<>(MEMORY_HEAP_POINTER, MEMORY_HEAP_POINTER + memoryOffset);
}

// TODO
// T âˆˆ (Structure, Reference, Array);
// counter_adr = 0 cell;
// ~ dup[T](adr : i32) -> () {
//	cntr : i32 = load<>(adr);
//	if (cntr > 0) {
//		newCntr : i32 = cntr + 1;
//		store<>(adr, newCntr);
//	} else {
		// deleted object. we can't dup it
//	}
// }
// ~ drop[T](adr : i32) -> () {
//	cntr : i32 = load<>(adr);
//	if (cntr > 0) {
//		newCntr : i32 = cntr - 1;
//		store<>(adr, newCntr);
//		freeMemory(adr, ??);
//	} else {
		// deleted object. we can't drop it
//	}
// }

// magic ?
memoryOffset : i32 = 8;