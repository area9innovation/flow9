// Automatically generated from Gringo grammar
import ds/list;

export {
	// This is a monster type used when parsing
	FlowWiseAst ::= FlowWiseAstList, FlowWiseAstBool, FlowWiseAstInt, FlowWiseAstDouble, FlowWiseAstString, FlowWiAtom, FlowWiDecl, FlowWiExp, FlowWiOpttype, FlowWiType, FlowWiWarg, FlowWiAdd, FlowWiAnd, FlowWiBasictype, FlowWiBool, FlowWiBoolAnd, FlowWiBoolNot, FlowWiBoolOr, FlowWiBrace, FlowWiBreak, FlowWiCall, FlowWiContinue, FlowWiDiv, FlowWiDouble, FlowWiEqual, FlowWiFntype, FlowWiFunction, FlowWiGlobal, FlowWiGreater, FlowWiGreaterEqual, FlowWiGreaterEqualu, FlowWiGreateru, FlowWiHex32, FlowWiHex64, FlowWiHexf32, FlowWiHexf64, FlowWiI64, FlowWiIdtype, FlowWiIf, FlowWiIfelse, FlowWiImport, FlowWiInt, FlowWiIsNull, FlowWiLess, FlowWiLessEqual, FlowWiLessEqualu, FlowWiLessu, FlowWiLet, FlowWiMod, FlowWiMul, FlowWiNegate, FlowWiNotEqual, FlowWiOr, FlowWiReturn, FlowWiSet, FlowWiSub, FlowWiTuple, FlowWiTupledot, FlowWiTupletype, FlowWiTypeannotation, FlowWiVar, FlowWiWaseEmpty, FlowWiWasmOp, FlowWiWhile, FlowWiFlowWiseInclude, FlowWiXor;

	FlowWiseAstList(value : List<FlowWiseAst>);
	FlowWiseAstBool(value : bool);
	FlowWiseAstInt(value : int);
	FlowWiseAstDouble(value : double);
	FlowWiseAstString(value : string);

	FlowWiAtom ::= FlowWiBreak, FlowWiContinue, FlowWiIf, FlowWiIfelse, FlowWiReturn, FlowWiSet, FlowWiVar, FlowWiWhile, FlowWiSizeOfType, FlowWiDefValueOfType,
					FlowWiTuple, FlowWiInt, FlowWiBool, FlowWiDouble, FlowWiHex32, FlowWiHex64, FlowWiHexf32, FlowWiHexf64, FlowWiI64;
	FlowWiDecl ::= FlowWiFunction, FlowWiGlobal, FlowWiImport, FlowWiWaseEmpty, FlowWiFlowWiseInclude;
	FlowWiExp ::= FlowWiAtom, FlowWiAdd, FlowWiAnd, FlowWiBoolAnd, FlowWiBoolNot, FlowWiBoolOr, FlowWiBrace, FlowWiCall, FlowWiPolyCall,
					FlowWiDiv, FlowWiEqual, FlowWiGreater, FlowWiGreaterEqual, FlowWiGreaterEqualu, FlowWiGreateru, FlowWiIsNull,
					FlowWiLess, FlowWiLessEqual, FlowWiLessEqualu, FlowWiLessu, FlowWiLet, FlowWiMod, FlowWiMul, FlowWiNegate,
					FlowWiNotEqual, FlowWiOr, FlowWiSub, FlowWiTupledot, FlowWiTypeannotation, FlowWiWasmOp, FlowWiXor,
					FlowWiArrayIndex;
	FlowWiOpttype ::= FlowWiBasictype, FlowWiType;
	FlowWiType ::= FlowWiBasictype, FlowWiFntype, FlowWiTupletype, FlowWiArrayType;
	FlowWiWarg ::= FlowWiInt, FlowWiVar, FlowWiType;
	FlowWiAdd(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiAnd(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiBasictype(s : string);
	FlowWiBool(b : bool);
	FlowWiBoolAnd(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiBoolNot(exp : FlowWiExp);
	FlowWiBoolOr(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiBrace(expsemi : [FlowWiExp]);
	FlowWiBreak();
	FlowWiCall(exp : FlowWiExp, exps : [FlowWiExp]);
	FlowWiPolyCall(exp : FlowWiExp, types : [FlowWiType]);
	FlowWiContinue();
	FlowWiDiv(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiDouble(double_0 : double);
	FlowWiEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiFntype(types : [FlowWiType], type : FlowWiType);
	FlowWiFunction(id : string, optexport : string, templates : [string], lambdaargs : [FlowWiIdtype], type : FlowWiType, exp : FlowWiExp, decl : FlowWiDecl);
	FlowWiGlobal(id : string, optexport : string, type : FlowWiType, optmutable : int, exp : FlowWiExp, decl : FlowWiDecl);
	FlowWiGreater(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiGreaterEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiGreaterEqualu(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiGreateru(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiHex32(s : string);
	FlowWiHex64(s : string);
	FlowWiHexf32(s : string);
	FlowWiHexf64(s : string);
	FlowWiI64(s : string);
	FlowWiIdtype(id : string, type : FlowWiType);
	FlowWiIf(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiIfelse(exp1 : FlowWiExp, exp2 : FlowWiExp, exp3 : FlowWiExp);
	FlowWiImport(id1 : string, type : FlowWiType, optmutable : int, id2 : string, id3 : string, decl : FlowWiDecl);
	FlowWiInt(int_0 : int);
	FlowWiIsNull(exp : FlowWiExp);
	FlowWiLess(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiLessEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiLessEqualu(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiLessu(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiLet(id : string, i : int, opttype : FlowWiOpttype, exp : FlowWiExp, brace : FlowWiBrace);
	FlowWiMod(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiMul(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiNegate(exp : FlowWiExp);
	FlowWiNotEqual(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiOr(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiReturn(exps : [FlowWiExp]);
	FlowWiSet(id : string, exp : FlowWiExp);
	FlowWiSub(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiTuple(exps : [FlowWiExp]);
	FlowWiTupledot(exp : FlowWiExp, int_0 : int);
	FlowWiTupletype(types : [FlowWiType], id : string);
	FlowWiTypeannotation(exp : FlowWiExp, type : FlowWiType);
	FlowWiVar(id : string);
	FlowWiWaseEmpty();
	FlowWiWasmOp(s : string, wargs : [FlowWiWarg], exps : [FlowWiExp]);
	FlowWiWhile(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiFlowWiseInclude(s : string, decl : FlowWiDecl);
	FlowWiXor(exp1 : FlowWiExp, exp2 : FlowWiExp);
	FlowWiSizeOfType(type : FlowWiType);
	FlowWiDefValueOfType(type : FlowWiType);

	// Array
	FlowWiArrayType(type : FlowWiType);
	FlowWiArrayIndex(exp : FlowWiExp, index : int);
}
