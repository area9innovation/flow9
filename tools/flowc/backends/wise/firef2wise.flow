import tools/flowc/backends/wise/flow_wise_compare;

// TODO: dup drop. Memory management ?
export {
	makeWiRefConstruction(exps : [FlowWiExp], type : FlowWiType) -> Maybe<FlowWiExp>;
	makeWiRefDeconstruction(exps : [FlowWiExp], type : FlowWiType) -> Maybe<FlowWiExp>;
	makeWiRefSetter(exps : [FlowWiExp], types : [FlowWiType], tmpInd : int) -> Maybe<FlowWiLet>;
	isWiRefSetter(e : FlowWiExp) -> bool;
}

makeWiRefConstruction(exps : [FlowWiExp], type : FlowWiType) -> Maybe<FlowWiExp> {
	if (exps == []) {
		println("ERROR : can't create a reference. there isn't value");
		None();
	} else if (length(exps) > 1) {
		println("ERROR : can't create a reference. too many values : " + toString(exps));
		None();
	} else {
		Some(FlowWiCall(
			FlowWiPolyCall(FlowWiVar("createRef"), [extractWiseRefType(type)]),
			exps
		));
	}
}

extractWiseRefType(type : FlowWiType) -> FlowWiType {
	switch (type : FlowWiType) {
		FlowWiBasictype(__) : type;
		FlowWiFntype(__, __) : type;
		FlowWiTupletype(__, __) : type;
		FlowWiArrayType(__) : type;
		FlowWiRefType(t) : t;
	}
}

makeWiRefDeconstruction(exps : [FlowWiExp], type : FlowWiType) -> Maybe<FlowWiExp> {
	if (exps == []) {
		println("ERROR : can't create derefFn. there isn't value");
		None();
	} else if (length(exps) > 1) {
		println("ERROR : can't create a derefFn. too many values : " + toString(exps));
		None();
	} else {
		Some(FlowWiCall(
			FlowWiPolyCall(FlowWiVar("getRef"), [extractWiseRefType(type)]),
			exps
		));
	}
}

makeWiRefSetter(exps : [FlowWiExp], types : [FlowWiType], tmpInd : int) -> Maybe<FlowWiLet> {
	if (length(exps) != 2 || length(types) != 2) {
		println("ERROR : can't create setter for Ref. wrong parameters : " + toString(exps));
		None();
	} else {
		// we can detect errors
		tmpVar = "tmp" + i2s(tmpInd);
		Some(FlowWiLet(
			tmpVar,
			0,
			FlowWiBasictype("bool"),
			FlowWiCall(
				FlowWiPolyCall(FlowWiVar("setRef"), [types[1]]),
				exps
			),
			FlowWiBrace([]),
		));
	}
}

// see makeWiRefSetter
isWiRefSetter(e : FlowWiExp) -> bool {
	switch (e : FlowWiExp) {
		FlowWiLet(__, __, __, e2, __): switch (e2 : FlowWiExp) {
			FlowWiCall(e3, __): switch (e3 : FlowWiExp) {
				FlowWiPolyCall(e4, __):switch (e4 : FlowWiExp) {
					FlowWiVar(id): id == "setRef";
					default : false;
				}
				default : false;
			}
			default : false;
		}
		default : false;
	}
}