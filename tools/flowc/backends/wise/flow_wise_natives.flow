import ds/tree;
import tools/flowc/incremental/fitype;

// it is wise-files. we don't have wise2flow, so we'll store some information.
export {
	// flow_name -> wise_name-arg_number
	findNativeName(name : string) -> Maybe<WiseNativeFn>;
	WiseNativeFn(
		nativeName : string,
		type : FiTypeFunction,
		polyParamNumber : int,
	);
}

findNativeName(name : string) -> Maybe<WiseNativeFn> {
	lookupTree(registeredNatives, name);
}

registeredNatives = 
	// wasm natives
	makeTree1("trunc", WiseNativeFn("trunc_s<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeInt()), 0))
	// string
	|> (\t -> setTree(t, "substring", WiseNativeFn("substring", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 0)))
	|> (\t -> setTree(t, "strlen", WiseNativeFn("strlen", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0)))
	// array
	|> (\t -> setTree(t, "subrange", WiseNativeFn("subrangeArray", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 1)))
	|> (\t -> setTree(t, "length", WiseNativeFn("getLengthArray", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0)))
	|> (\t -> setTree(t, "arrayPush", WiseNativeFn("arrayPush", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()), 1)))
	|> (\t -> setTree(t, "replace", WiseNativeFn("replaceArray", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()), 1)))
	|> (\t -> setTree(t, "concat", WiseNativeFn("concatArrays", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 1)))
	|> (\t -> setTree(t, "compareArrays", WiseNativeFn("compareArrays", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeFunction([FiFunArg("", FiTypeParameter("?")), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()))], FiTypeInt()), 1)))
	;
