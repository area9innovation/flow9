import ds/tree;
import tools/flowc/incremental/fitype;

// it is wise-files. we don't have wise2flow, so we'll store some information.
export {
	// flow_name -> wise_name-arg_number
	// result is a chain of ops (reversed order). For example, i2d = promote(extend(value)). Result = [extend, promote]
	findWiseNativeFns(name : string) -> [WiseNativeFn];
	WiseNativeFn(
		nativeName : string,
		type : FiTypeFunction,
		polyParamNumber : int,
	);
}

findWiseNativeFns(name : string) -> [WiseNativeFn] {
	lookupTreeDef(registeredNatives, name, []);
}

registeredNatives = 
	// wasm natives
	makeTree1("trunc", [WiseNativeFn("trunc_s<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeInt()), 0)])
	// TODO: floor for different types
	// |> (\t -> setTree(t, "floor", [WiseNativeFn("floor<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeDouble()), 0)]))
	|> (\t -> setTree(t, "sqrt", [WiseNativeFn("sqrt<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeDouble()), 0)]))
	|> (\t -> {
		ops = [
			WiseNativeFn("extend_s<>", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeDouble()), 0),
			WiseNativeFn("convert_s<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeDouble()), 0),
		];
		setTree(t, "i2d", ops)
	})
	// string
	|> (\t -> setTree(t, "substring", [WiseNativeFn("substring", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 0)]))
	|> (\t -> setTree(t, "strlen", [WiseNativeFn("strlen", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0)]))
	// array
	|> (\t -> setTree(t, "subrange", [WiseNativeFn("subrangeArray", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 1)]))
	|> (\t -> setTree(t, "length", [WiseNativeFn("getLengthArray", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0)]))
	|> (\t -> setTree(t, "arrayPush", [WiseNativeFn("arrayPush", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()), 1)]))
	|> (\t -> setTree(t, "replace", [WiseNativeFn("replaceArray", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()), 1)]))
	|> (\t -> setTree(t, "concat", [WiseNativeFn("concatArrays", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 1)]))
	|> (\t -> setTree(t, "compareArrays", [WiseNativeFn("compareArrays", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeFunction([FiFunArg("", FiTypeParameter("?")), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()))], FiTypeInt()), 1)]))
	;
