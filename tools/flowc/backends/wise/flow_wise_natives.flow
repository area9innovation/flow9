import ds/tree;
import tools/flowc/incremental/fitype;
import tools/flowc/backends/wise/flow_wise_types;

// it is wise-files. we don't have wise2flow, so we'll store some information.
export {
	// flow_name -> wise_name-arg_number
	// result is a chain of ops (reversed order). For example, i2d = promote(extend(value)). Result = [extend, promote]
	findWiseNativeFns(name : string) -> [WiseNativeFn];
	WiseNativeFn(
		nativeName : string,
		type : FiTypeFunction,
		polyParamNumber : int,
		makeOperation : Maybe<([FlowWiExp]) -> FlowWiExp>, // for exampole, bitOr is |
	);
}

findWiseNativeFns(name : string) -> [WiseNativeFn] {
	lookupTreeDef(registeredNatives, name, []);
}

registeredNatives = 
	// wasm natives
	makeTree1("trunc", [WiseNativeFn("trunc_s<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeInt()), 0, None())])
	// TODO: floor for different types
	// |> (\t -> setTree(t, "floor", [WiseNativeFn("floor<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeDouble()), 0)]))
	|> (\t -> setTree(t, "sqrt", [WiseNativeFn("sqrt<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeDouble()), 0, None())]))
	|> (\t -> {
		ops = [
			WiseNativeFn("extend_s<>", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeDouble()), 0, None()),
			WiseNativeFn("convert_s<>", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeDouble()), 0, None()),
		];
		setTree(t, "i2d", ops)
	})
	|> (\t -> setTree(t, "log", [WiseNativeFn("log", FiTypeFunction([FiFunArg("", FiTypeDouble())], FiTypeDouble()), 0, None())]))
	|> (\t -> setTree(t, "bitShl", [WiseNativeFn("shl<>", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	|> (\t -> setTree(t, "bitUshr", [WiseNativeFn("shr_u<>", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	|> (\t -> setTree(t, "bitNot", [WiseNativeFn("bitNot", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	|> (\t -> setTree(t, "bitXor", [WiseNativeFn(
		"bitXor",
		FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()),
		0,
		Some(\vals -> if (length(vals) == 2) FlowWiXor(vals[0], vals[1]) else FlowWiWasmOp("bitXor", [], vals))
	)]))
	|> (\t -> setTree(t, "bitAnd", [WiseNativeFn(
		"bitAnd",
		FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()),
		0,
		Some(\vals -> if (length(vals) == 2) FlowWiAnd(vals[0], vals[1]) else FlowWiWasmOp("bitAnd", [], vals))
	)]))
	|> (\t -> setTree(t, "bitOr", [WiseNativeFn(
		"bitOr",
		FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()),
		0,
		Some(\vals -> if (length(vals) == 2) FlowWiOr(vals[0], vals[1]) else FlowWiWasmOp("bitOr", [], vals))
	)]))

	// string
	|> (\t -> setTree(t, "substring", [WiseNativeFn("substring", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	|> (\t -> setTree(t, "strlen", [WiseNativeFn("strlen", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	|> (\t -> setTree(t, "i2s", [WiseNativeFn("i2s", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	|> (\t -> setTree(t, "getCharCodeAt", [WiseNativeFn("getCharCodeAt", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	// array
	|> (\t -> setTree(t, "subrange", [WiseNativeFn("subrangeArray", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 1, None())]))
	|> (\t -> setTree(t, "length", [WiseNativeFn("getLengthArray", FiTypeFunction([FiFunArg("", FiTypeInt())], FiTypeInt()), 0, None())]))
	|> (\t -> setTree(t, "arrayPush", [WiseNativeFn("arrayPush", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()), 1, None())]))
	|> (\t -> setTree(t, "replace", [WiseNativeFn("replaceArray", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()), 1, None())]))
	|> (\t -> setTree(t, "concat", [WiseNativeFn("concatArrays", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt())], FiTypeInt()), 1, None())]))
	|> (\t -> setTree(t, "compareArrays", [WiseNativeFn("compareArrays", FiTypeFunction([FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeInt()), FiFunArg("", FiTypeFunction([FiFunArg("", FiTypeParameter("?")), FiFunArg("", FiTypeParameter("?"))], FiTypeInt()))], FiTypeInt()), 1, None())]))
	
	// fold
	// filter
	// map
	// enumFromTo
	;
