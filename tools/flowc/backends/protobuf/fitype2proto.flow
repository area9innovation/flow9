import tools/flowc/incremental/fitype;
import ds/set;
import blueprint;

export {
	fitype2proto(type : FiType) -> string;
}

fitype2proto(type : FiType) -> string {
	doFctype2proto(type,  makeSet())
}

doFctype2proto(type : FiType, structs : Set<string>) -> string {
	switch (type) {
		FiTypeVoid(): "void";
		FiTypeBool(): "bool";
		FiTypeInt(): "int32";
		FiTypeDouble(): "double";
		FiTypeString(): "string";
		FiTypeFlow(): "any";
		FiTypeNative(): "native";
		FiTypeArray(at): "repeated " + doFctype2proto(at, structs);
		FiTypeRef(at): "ref " + doFctype2proto(at, structs);
		FiTypeName(id, typelist): {
			// TODO: We should have a flag whether we are top level or not.
			// If we are, we should resolve this name, and make messages and such

			id
			+ (if (typelist == []) ""
				else "<" + superglue(typelist, \rt -> doFctype2proto(rt, structs), ", ") + ">"
			);
		}
		FiTypeParameter(n): {
			n
		}
/*		FiTypeStruct(n, tp, args): {
			if (containsSet(structs, n)) n
			else {
				structs1 = insertSet(structs, n);
				"message " + n  + " {\n"
				+ (if (tp == []) "" else "<" + superglue(tp, \rt -> doFctype2proto(rt, structs1), ", ") + ">")
				+ superglue(args, \a -> "\t" + doFctype2proto(a.type, structs1) + " " + a.name + ";\n", "")
				+ "}\n\n"
				;
			}
		}
		FiTypeUnion(n, typelist, args): {
			if (containsSet(structs, n)) n
			else {
				structs1 = insertSet(structs, n);
				"// ("
				+ n
				+ (if (typelist == []) ""
					else "<" + superglue(typelist, \rt -> doFctype2proto(rt, structs1), ", ") + ">"
				)
				+ (" ::= " + superglue(args, \a -> doFctype2proto(a, structs1), ", ")
					)
				+ ")\n"
				;
			}
		}*/
		FiTypeFunction(args, rt): {
			"(" 
			+ superglue(args, \a -> (if (a.name != "") a.name + " : " else "") + doFctype2proto(a.type, structs), ", ")
			+ ") -> " + doFctype2proto(rt, structs);
		}
	}
}
