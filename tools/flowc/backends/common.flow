import lingo/flow/javascript_cli_params;
import tools/flowc/fctypeenv;
import ds/tree;
import tools/flowc/incremental/fimodule;
import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/bytecode/fi2bytecode_bytecode;
import tools/flowc/flowc_println;
import ds/dlist;

export {
	STANDARD_JS = 0;
	STANDARD_ES6 = 1;
	NODEJS_MODE = 2;
	NWJS_MODE = 3;
	TS_MODE = 4;

	STANDARD_JS_TXT = "Standard JS";
	STANDARD_ES6_TXT = "ES6 JS";
	NODEJS_MODE_TXT = "Node.js";
	NWJS_MODE_TXT = "Node.js, NW.js";
	TS_MODE_TXT = "Typescript";

	FcBackendConfig ::=
		FiJsConfig,
		FiNimConfig,
		FcRustConfig,
		FiJavaConfig,
		FcBytecodeConfig,
		FiHTMLConfig,
		FcLISPConfig,
		FcCppConfig,
		FiDConfig,
		FcMLConfig,
		FiDocConfig,
		FiWasmConfig,
		FcIncaConfig,
		FcFlowConfig,
		FiTsdConfig;

	FcCommonConfig ::= FcBackendConfig, CompilerConfig;

	FiJsConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		// 0 - standard JS, 1 - standard ES6, 2 - nodejs, 3 - NW.js, 4 - TypeScript
		jsmode : int,
		// Node.js server functionality
		webmodule : bool,
		// Set of names we should export in the global JS namespace
		jslibrary : Set<string>,
		// Name of an object to keep all names we export in the library
		jslibraryObject : string,
		// Generate JS modules
		modules : string,
		// Inject comments into generated code
		comments : bool,
		// Do not remove generated code_*.js files (debug)
		code : bool,
		// Call js-beautify before exit
		beautify : bool,
		// Generate js source map before exit
		sourcemap : bool,
		compress : bool,
		haxeRuntime : bool,
		fontconfig : string,
		debug : bool,
		verbose : int,
		threadId : int,
		readable : bool,
		tsProcess : TypeScriptProcessing,
		callMain : bool,
		keepDebugNewlines : bool,
		// The path to the external JS file with natives.
		// Is inlined into the final assembled JS code.
		externLib : string,
		// Names from the external natives lib.
		externNatives : Set<string>
	);

	FiNimConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
		// For consistency, fileinfo should not be here,
		// it should be in module's context.
		// But in Nim generator context wasn't implemented,
		// (wasn't required), and config is passed through
		// all generator calls, so fileinfo is located here.
		mutable fileinfo : FiFileInfo
	);

	FiDConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
		mutable fileinfo : FiFileInfo,
		mutable initVars : string
	);

	FcLISPConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
		mutable fileinfo : FiFileInfo,
		mutable initVars : string,
		mutable structNames: Tree<string, int>,
		mutable structFields: Tree<string, string>
	);

	FcCppConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
		mutable fileinfo : FiFileInfo,
		mutable structIndexes: Tree<string, int>
	);

	FcCpp2Config(
		flowfile : string,
		outputFile : string,
		outputDir : string,
		buildExe : bool,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
		extStructDefs : bool,
		entry : string
	);

	FcRustConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
	);

	FcBytecodeConfig(
		flowfile : string,
		outputfile : string,
		upload : bool,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
		debugInfo : BCDebugInfo,
		// if true, adds a CCallN(ctx.func.nargs) instead if CCall()
		nargs : bool,
		debugVerbose : bool
	);

	FiJavaConfig(
		flowfile : string,
		outputdir : string,
		generatedir : string,
		packageName : string,
		mainClassName : string,
		jarfile : string,
		javaLibrary : Set<string>,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
	);

	FiHTMLConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		jsfile : string,
		verbose : int,
		threadId : int,
		title : string,
		splash : string,
		minify : bool,
		scripts : [string],
		additionalScripts: [string],
		predefinedParams: [Pair<string, string>],
		workingDir : string,
		manifestFileName: string
	);

	FcProtobufConfig(
		flowfile : string,
		outputfile : string,
		types : [string],
		threadId : int,
	);

	FcIncaConfig(
		flowfile : string,
		outputdir : string,
		includes : [string],
		verbose : int,
		threadId : int,
	);

	FcFlowConfig(
		flowfile : string,
		outputdir : string,
		includes : [string],
		verbose : int,
		threadId : int,
	);

	FcMLConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		debug : bool,
		verbose : int,
		threadId : int,
		mutable structNames : Tree<string, int>,
		mutable fileinfo : FiFileInfo,
		mutable combinedUnions : Tree<string, FiTypeUnion>
	);

	FiDocConfig(
		flowfile : string,
		outputfolder : string,
		verbose : int,
		threadId : int,
	);

	FiWasmConfig(
		flowfile : string,
		outputfile : string,
		includes : [string],
		verbose : int,
		threadId : int,
		hostfile : string,
		nodejs : bool,
		listingFile : string,
		wasmast : string,		// Function's AST will be printed in this file
        memory : int,
        doinline : bool
	);

	FiTsdConfig(
		flowfile : string,
		jslibrary : Set<string>,
		jslibraryObject : string,
		outputfolder : string,
		verbose : int,
		threadId : int,
	);

	FcBackendConfigs(
		jsconfig: Maybe<FiJsConfig>,
		es6config: Maybe<FiJsConfig>,
		tsconfig: Maybe<FiJsConfig>,
		bcconfig: Maybe<FcBytecodeConfig>,
		javaconfig: Maybe<FiJavaConfig>,
		rustconfig: Maybe<FcRustConfig>,
		nimconfig: Maybe<FiNimConfig>,
		htmlconfig: Maybe<FiHTMLConfig>,
		dconfig: Maybe<FiDConfig>,
		lispconfig: Maybe<FcLISPConfig>,
		cppconfig : Maybe<FcCppConfig>,
		protobufconfig : Maybe<FcProtobufConfig>,
		mlconfig : Maybe<FcMLConfig>,
		docconfig : Maybe<FiDocConfig>,
		wasmconfig : Maybe<FiWasmConfig>,
		incaconfig : Maybe<FcIncaConfig>,
		flowconfig : Maybe<FcFlowConfig>,
		tsdconfig : Maybe<FiTsdConfig>,
		cpp2config : Maybe<FcCpp2Config>,		
	);

	getFcBackendConfigs(config : CompilerConfig) -> FcBackendConfigs;
	fcVerbose(cfg : FcCommonConfig, level : int, message : string) -> void;

	fiCollectDeclarationsCommon(program : FiProgram) -> [Pair<string, [FiDeclaration]>];

	// Saves a file, but complains if unsuccessful
	saveFileContent(filename : string, content : string, threadId : int) -> void;

	updateJsConfig(conf : CompilerConfig, file : string) -> CompilerConfig;
}

getFcBackendConfigs(config : CompilerConfig) {
	outdir1 = getConfigParameter(config.config, "output-dir");
	outdir = if (outdir1 == "" || endsWith(outdir1, "/")) outdir1 else outdir1 + "/";
	js_external_natives = \-> if (!isConfigParameterSet(config.config, "js-extern-natives")) makeSet() else {
		buildSet(strSplit(getConfigParameter(config.config, "js-extern-natives"), ","));
	}
	jsconfig = if (config.jsParams.jsfile != "") {
			Some(FiJsConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, changeFileExt(config.jsParams.jsfile, ".js")),
				config.includes,
				STANDARD_JS,
				config.jsParams.webmodule,
				config.jsParams.dcePreservedNames,
				config.jsParams.jslibraryObject,
				config.jsParams.modules,
				config.jsParams.comments,
				config.jsParams.code,
				config.jsParams.beautify,
				config.jsParams.sourcemap,
				isConfigParameterTrue(config.config, "jscompress"),
				isConfigParameterTrue(config.config, "use-haxe-runtime"),
				config.jsParams.fontconfig,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				config.jsParams.readable,
				tsProcessing_dummy,
				isConfigParameterTrue(config.config, "js-call-main"),
				isConfigParameterTrue(config.config, "keep-debug-newlines"),
				getConfigParameter(config.config, "js-extern-lib"),
				js_external_natives()
			))
		} else None();

	es6config = if (config.jsParams.esfile != "") {
			isnodejs = isConfigParameterTrue(config.config, "nodejs");
			isnwjs = isConfigParameterTrue(config.config, "nwjs");

			es6mode = if (!isnodejs && isnwjs) NWJS_MODE
				else if (isnodejs) NODEJS_MODE
				else STANDARD_ES6;

			Some(FiJsConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, changeFileExt(config.jsParams.esfile, ".js")),
				config.includes,
				es6mode,
				config.jsParams.webmodule,
				config.jsParams.dcePreservedNames,
				config.jsParams.jslibraryObject,
				config.jsParams.modules,
				config.jsParams.comments,
				config.jsParams.code,
				config.jsParams.beautify,
				config.jsParams.sourcemap,
				isConfigParameterTrue(config.config, "jscompress"),
				isConfigParameterTrue(config.config, "use-haxe-runtime"),
				config.jsParams.fontconfig,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				config.jsParams.readable,
				tsProcessing_dummy,
				isConfigParameterTrue(config.config, "js-call-main"),
				isConfigParameterTrue(config.config, "keep-debug-newlines"),
				getConfigParameter(config.config, "js-extern-lib"),
				js_external_natives()
			))
		} else None();

	tsconfig = if (config.jsParams.typescriptFile != "") {
			Some(FiJsConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, changeFileExt(config.jsParams.typescriptFile, ".ts")),
				config.includes,
				TS_MODE,
				config.jsParams.webmodule,
				config.jsParams.dcePreservedNames,
				config.jsParams.jslibraryObject,
				config.jsParams.modules,
				config.jsParams.comments,
				config.jsParams.code,
				config.jsParams.beautify,
				config.jsParams.sourcemap,
				isConfigParameterTrue(config.config, "jscompress"),
				isConfigParameterTrue(config.config, "use-haxe-runtime"),
				config.jsParams.fontconfig,
				config.jsParams.debug,
				config.jsParams.verbose,
				config.threadId,
				true, // readable = 1, for considering named types and unions
				tsProcessing_dummy,
				isConfigParameterTrue(config.config, "js-call-main"),
				isConfigParameterTrue(config.config, "keep-debug-newlines"),
				getConfigParameter(config.config, "js-extern-lib"),
				js_external_natives()
			))
		} else None();

	jar0 = getConfigParameter(config.config, "jar");
	jar = if (jar0 != "1") jar0 else changeFileExt(config.flowfile, ".jar");
	jv = if (jar == "" || isConfigParameterSet(config.config, "java")) {
		dir = getConfigParameter(config.config, "java");
		if (dir == "1") "javagen" else dir;
	} else "javagen";
	java_package = getConfigParameter(config.config, "java-package");
	javaconfig =
		if (jv != "")
			Some(FiJavaConfig(
				config.flowfile,
				outdir,
				fcConcatTarget(config, outdir, jv),
				if (java_package == "") strReplace(config.flowfile, "/", ".") else java_package,
				getConfigParameterDef(config.config, "java-main", fileNameOnly(config.flowfile)),
				jar,
				buildSet(filtermap(strSplit(getConfigParameterDef(config.config, "java-library", ""), ","), 
					\n -> if (n == "") None() else Some(n)
				)),
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				)
			) else None();

	rs = getConfigParameter(config.config, "rust");
	rustconfig =
		if (rs != "")
			Some(FcRustConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, rs),
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				)
			) else None();
	nim = getConfigParameter(config.config, "nim");
	nimconfig =
		if (nim != "")
			Some(FiNimConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, nim),
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				dummyFiFileInfo)
			) else None();

	dparam = getConfigParameter(config.config, "D");
	dconfig =
		if (dparam != "")
			Some(FiDConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, dparam),
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				dummyFiFileInfo,
				"")
			) else None();

	lispparam = getConfigParameter(config.config, "lisp");
	lispconfig =
		if (lispparam != "")
			Some(FcLISPConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, lispparam),
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				dummyFiFileInfo,
				"",
				makeTree(),
				makeTree()),
			) else None();

	mlparam = getConfigParameter(config.config, "ml");
	mlconfig =
		if (mlparam != "")
			Some(FcMLConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, mlparam),
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				makeTree(),
				dummyFiFileInfo,
				makeTree())
			) else None();

	cppparam = getConfigParameter(config.config, "cpp");
	cppconfig =
		if (cppparam != "")
			Some(FcCppConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, cppparam),
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				dummyFiFileInfo,
				makeTree()
				),
			) else None();

	cpp2 = getConfigParameter(config.config, "cpp2");
	cpp2config =
		if (cpp2 != "")
			Some(FcCpp2Config(
				config.flowfile,
				if (cpp2 != "1") cpp2 else resolveRelativePath(".") + "/" + fileNameOnly(config.flowfile),
				if (outdir != "") rtrim2(outdir, "/") else "./cppgen",
				getConfigParameterDef(config.config, "exe", "1") == "1",
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				true, // extStructDefs
				"native_program", // entry
				),
			) else None();

	bc0 = getConfigParameter(config.config, "bytecode");
	bc1 = if (bc0 == "1") fileNameOnly(config.flowfile) else bc0;
	bc = if (bc1 == "" || endsWith(bc1, ".serverbc")) bc1 else changeFileExt(bc1, ".bytecode");

	bcupload = isConfigParameterTrue(config.config, "upload");
	bytecodeconfig =
		if (bc != "")
			Some(FcBytecodeConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, bc),
				bcupload,
				config.includes,
				config.jsParams.debug,
				config.verbose,
				config.threadId,
				BCDebugInfo(
					ref makeList(),
					ref makeList(),
					ref makeList(),
					ref makeList(),
					ref 0,
				),
				isConfigParameterTrue(config.config, "nargs"),
				isConfigParameterTrue(config.config, "debug-verbose")
				),
			) else None();

	htmlMonolithic = getConfigParameter(config.config, "html");
	htmlTitle = getConfigParameter(config.config, "html-title");
	htmlSplash = getConfigParameter(config.config, "html-splash");
	htmlMinify = isConfigParameterTrue(config.config, "html-minify");
	htmlScripts = filter(strSplit(getConfigParameterDef(config.config, "html-scripts", ""), ","), \e -> e != "");
	htmlAdditionalScripts = filter(strSplit(getConfigParameterDef(config.config, "html-additional-scripts", ""), ","), \e -> e != "");
	htmlPredefinedParams =
		map(filter(strSplit(getConfigParameterDef(config.config, "html-predefined-params", ""), ","), \e -> e != ""), \e -> {
			r = strSplit(e, "=");
			if (length(r) == 1)
				Pair(r[0], "")
			else
				Pair(r[0], r[1]);
		});

	htmlManifest = getConfigParameterDef(config.config, "html-app-manifest", "");

	htmlconfig = if (htmlMonolithic != "")
			Some(FiHTMLConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, htmlMonolithic),
				config.includes,
				config.jsParams.jsfile,
				config.verbose,
				config.threadId,
				htmlTitle,
				htmlSplash,
				htmlMinify,
				htmlScripts,
				htmlAdditionalScripts,
				htmlPredefinedParams,
				getConfigParameterDef(config.config, "working-dir", ""),
				if (htmlManifest == "1") "manifest.json" else htmlManifest)
			) else None();

	protobuffile = getConfigParameter(config.config, "protobuf");
	protobuftypes =  strSplit(getConfigParameter(config.config, "protobuf-types"), ",");

	protobufconfig = 
		if (protobuffile != "") {
			Some(FcProtobufConfig(
				config.flowfile, 
				fcConcatTarget(config,  outdir, protobuffile), 
				protobuftypes,
				config.threadId,
				)
			)
		} else None();

	docparam = getConfigParameter(config.config, "doc");
	docconfig =
		if (docparam != "")
			Some(FiDocConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, docparam),
				config.verbose,
				config.threadId,
				)
			) else None();

	wasmparam = getConfigParameter(config.config, "wasm");
	wasmconfig =
		if (wasmparam != "")
			Some(FiWasmConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, wasmparam),
				config.includes,
				config.verbose,
				config.threadId,
				getConfigParameter(config.config, "wasmhost"),
				isConfigParameterTrue(config.config, "wasmnodejs"),
				getConfigParameter(config.config, "wasmlisting"),
				getConfigParameter(config.config, "wasmast"),
                getConfigParameterInt(config.config, "wasm-memory", 100),
				isConfigParameterTrue(config.config, "wasminline")
				)
			) else None();

	incaparam = getConfigParameter(config.config, "inca");
	incaconfig =
		if (incaparam != "")
			Some(FcIncaConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, incaparam),
				config.includes,
				config.verbose,
				config.threadId,
				)
			) else None();

	flowparam = getConfigParameter(config.config, "flow");
	flowconfig =
		if (flowparam != "")
			Some(FcFlowConfig(
				config.flowfile,
				fcConcatTarget(config, outdir, flowparam),
				config.includes,
				config.verbose,
				config.threadId,
				)
			) else None();

	tsdparam = getConfigParameter(config.config, "tsd");
	tsdconfig =
		if (tsdparam != "")
			Some(FiTsdConfig(
				config.flowfile,
				config.jsParams.dcePreservedNames,
				config.jsParams.jslibraryObject,
				fcConcatTarget(config, outdir, tsdparam),
				//config.includes,
				config.verbose,
				config.threadId,
				)
			) else None();

	FcBackendConfigs(
		jsconfig,
		es6config,
		tsconfig,
		bytecodeconfig,
		javaconfig,
		rustconfig,
		nimconfig,
		htmlconfig,
		dconfig,
		lispconfig,
		cppconfig,
		protobufconfig,
		mlconfig,
		docconfig,
		wasmconfig,
		incaconfig,
		flowconfig,
		tsdconfig,
		cpp2config,
	)
}

fcConcatTarget(config : CompilerConfig, outDir : string, targetName : string) -> string {
	target = if (isAbsolutePath(targetName)) targetName else outDir + targetName;
	dir = dirName(target);
	if (dir != target) {
		if (config.verbose >= 1) {
			fcPrintln("Ensure target directory '" + dir + "' exists", config.threadId);
		}
		ensureDirectoryExists(dir) |> ignore;
	}
	if (config.verbose >= 1) {
		fcPrintln("Using compilation target '" + target + "'", config.threadId);
	}
	fcCorrectUriPath(target);
}

fcVerbose(cfg : FcCommonConfig, level : int, message : string) -> void {
	if (cfg.verbose > level) {
		fcPrintln(message, cfg.threadId);
	}
}

fiCollectDeclarationsCommon(program : FiProgram) {
	fold(program.traversal, [], \macc: [Pair<string, [FiDeclaration]>], file -> {
		m = lookupTree(program.modules, file);
		switch (m) {
			None(): {
				fcPrintln("Could not find module '" + file + "'", program.config.threadId);
				macc;
			}
			Some(module): {
				nativeNames = buildSet(map(module.natives, \n -> n.name));
				notNatives = filter(module.initOrder, \mn -> !containsSet(nativeNames, mn));

				// TODO: Does 'initOrder' strictly follow makeInitOrder(...)?
				decls = concat(
					module.natives,
					filtermap(notNatives, \name -> lookupTree(program.names.toplevel, name))
				);
				arrayPush(macc, Pair(module.fileinfo.flowfile, decls));
			}
		}
	});
}

saveFileContent(filename : string, content : string, threadId : int) -> void {
	if (!setFileContent(filename, content)) {
		fcPrintln("Could not save " + filename, threadId);
	}
}

updateJsConfig(conf : CompilerConfig, file : string) -> CompilerConfig {
	jsfolder = getConfigParameter(conf.config, "jsfolder");
	if (jsfolder == "") {
		conf;
	} else {
		jsfold = if (jsfolder == "1") "tools/flowc/tests/out/js" else jsfolder;
		ensureDirectoryExists(jsfold);
		jsfile = jsfold + "/" + strLeft(fileNameOnly(file), -5) + ".js";
		j = conf.jsParams;
		CompilerConfig(
			conf.flowfile,
			conf.includes,
			conf.objectFolders,
			conf.verbose,
			JSCliParams(
				j with 
				jsfile = jsfile
			),
			setTree(
				setTree(conf.config, "js", jsfile),
				"use-haxe-runtime",
				"0"
			),
			conf.threadId
		)
	}
}
