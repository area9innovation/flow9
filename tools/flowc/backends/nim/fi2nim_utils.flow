import tools/flowc/manipulation/common;
import tools/flowc/incremental/fi_helpers2;
import tools/flowc/backends/nim/fi2nim_defines;
import tools/flowc/backends/nim/fi2nim_mangle;

export {
	fi2nimIsImportLine(line: string) -> bool;
	fiNimRenameKeyword(kwd: string) -> string;
	fiNimRenameGlobal(v : string) -> string;
	fiNimRenameType(v : string) -> string;

	fi2nimTypeId(env : FiNimEnv, type: FiType) -> string;
	fi2nimStructId(env : FiNimEnv, struct: string) -> string;

	fiNimCompileReturnType(env : FiNimEnv, type : FiType) -> string;
	fiNimCompileFuncType(env: FiNimEnv, type: FiTypeFunction) -> string;
	fiNimCompileType(env: FiNimEnv, type: FiType) -> string;

	fiNimTypeParamsList(env: FiNimEnv, type: FiType) -> string;
	fiNimParamsForInstantiate(env: FiNimEnv, params: [FiType]) -> string;
	fiNimTypeTyparsList(env : FiNimEnv, type : FiType) -> string;

	// Get all casts from expression
	fiAllCasts(e: FiExp, acc :Tree<FiType, Set<FiType>>) -> Tree<FiType, Set<FiType>>;

	// All (proper) subterms of a type as a term. 'proper' means the term 't' itself is excluded from the set
	fiTypeSubterms(t: FiType, proper: bool) -> Set<FiType>;

	fi2nimMaxFuncArity(p: FiProgram) -> int;
}

fi2nimIsImportLine(line: string) -> bool {
	startsWith(line, "import") || startsWith(line, "from");
}

fiNimRenameKeyword(kwd : string) -> string {
	k = (if (containsSet(nimKeywordSet, kwd)) "fl0w" else "") + kwd;
	strReplace(k, "_", "u");
}

fiNimRenameGlobal(v : string) -> string {
	if (v == "main") v else {
		strReplace("fl0w" + v, "_", "u");
	}
}

fiNimRenameType(v : string) -> string {
	strReplace("Fl0w" + v, "_", "u");
}

fi2nimTypeId(env : FiNimEnv, type: FiType) -> string {
	if (fiIsCompleteType(type)) {
		"tp_" + fi2nimMangleType(type);
	} else {
		switch (type) {
			FiTypeName(name, typars): {
				"rt_type_id_" + name + fiNimParamsForInstantiate(env, typars) + "()";
			}
			default: fail0("can't figure out type id of: " + pretFiType(type));
		}
	}
}

fi2nimStructId(env : FiNimEnv, struct: string) -> string {
	"st_" + struct;
}

fiNimTypeParamsList(env : FiNimEnv, type : FiType) -> string {
	typars = switch (type) {
		FiTypeName(__, typars): typars;
		default: {
			map(sort(set2array(fiCollectTypars(type, makeSet()))), \n -> FiTypeParameter(n));	
		}
	}
	fiNimParamsForInstantiate(env, typars);
}

fiNimParamsForInstantiate(env : FiNimEnv, params : [FiType]) -> string {
	if (params == []) "" else {
		"[" + strGlue(map(params, \tp -> fiNimCompileType(env, tp)), ", ") + "]"
	}
}

fiNimTypeTyparsList(env : FiNimEnv, type : FiType) -> string {
	typars = map(sort(set2array(fiCollectTypars(type, makeSet()))), \n -> FiTypeParameter(n));
	fiNimParamsForInstantiate(env, typars);
}


fiNimCompileReturnType(env : FiNimEnv, type : FiType) -> string {
	switch (type) {
		FiTypeFunction(__,__): "(" + fiNimCompileType(env, type) + ")";
		default: fiNimCompileType(env, type);
	}
}

fiNimCompileFuncType(env : FiNimEnv, type : FiTypeFunction) -> string {
	"(" + 
		supergluei(type.args, \i, arg -> 
			fiNimRenameKeyword(if (arg.name == "" || arg.name == "__") "a" + i2s(i) else arg.name) + ": " +
			fiNimCompileType(env, arg.type), 
			", "
		) + 
	"): " + fiNimCompileReturnType(env, type.returnType);
}

fiNimCompileType(env : FiNimEnv, type : FiType) -> string {
	switch (type) {
		FiTypeArray(t) :           {
			"seq[" + fiNimCompileType(env, t) + "]";
		}
		FiTypeFunction(args, rt) : {
			"proc" + fiNimCompileFuncType(env, type);
		}
		FiTypeRef(t) :             "Ref[" + fiNimCompileType(env, t) + "]";
		FiTypeParameter(n) :       "T" + i2s(strlen(n));
		FiTypeBool() :             "bool";
		FiTypeInt() :              "int32";
		FiTypeDouble() :           "float";
		FiTypeString() :           "RtString";
		FiTypeFlow() :             "Flow";
		FiTypeVoid() :             "void";
		FiTypeNative() :           "Native";
		FiTypeName(name, params) : {
			fiNimRenameType(name) + fiNimParamsForInstantiate(env, params);
		}
	}
}

fiAllCasts(e: FiExp, acc : Tree<FiType, Set<FiType>>) -> Tree<FiType, Set<FiType>> {
	fiFoldExp(e, acc, \x, env, ac -> {
			switch (x) {
				FiCast(__,from, to,__,__): {
					pure_from = fiPurifyType(from);
					setTree(ac, pure_from, 
						insertSet(lookupTreeDef(ac, pure_from, makeSet()), fiPurifyType(to))
					)
				}
				default: ac;
			}
		}, 
		AstTraverseOrder(true, true)
	);
}

fiTypeProperSubterms(t: FiType) -> Set<FiType> {
	fiFoldType(t, makeSet(), \ac, x ->
		if (fiEqualTypes(x, t)) ac else insertSet(ac, fiPurifyType(x))
	);
}

fiTypeSubterms(t: FiType, proper: bool) -> Set<FiType> {
	fiFoldType(t, makeSet(), \ac, x ->
		if (proper && fiEqualTypes(x, t)) ac else insertSet(ac, fiPurifyType(x))
	);
}

fi2nimMaxFuncArity(p: FiProgram) -> int {
	fiFoldProgramToplevel(p, -1, \toplevel,__,__,acc -> {
		add_type = \ac, t -> {
			switch (t) {
				FiTypeFunction(args,__): max(ac, length(args));
				default: ac;
			}
		}
		proc_exp = \ac, x -> {
			fiFoldExp(x, ac, \e,__,a -> add_type(a, fiExpType(e)), AstTraverseOrder(true, true));
		}
		switch (toplevel) {
			FiTypeStruct(name, typars, args,__): {
				add_type(acc, FiTypeName(name, typars));
			}
			FiTypeUnion(name, typars, types,__): {
				add_type(acc, FiTypeName(name, typars));
			}
			FiFunctionDec(name, lambda, type,__,__): {
				proc_exp(add_type(acc, type), lambda);
			}
			FiGlobalVar(name, value, type,__,__): {
				proc_exp(add_type(acc, type), value);
			}
			FiNativeDec(name,__,type,__,fallback,__,__): {
				proc_exp(add_type(acc, type), fallback);
			}
		}
	});
}
