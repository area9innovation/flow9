import tools/flowc/backends/nim/fi2nim_runtime;
import tools/flowc/backends/nim/fi2nim_types;
import tools/flowc/backends/nim/fi2nim_compile;
import tools/flowc/backends/nim/fi2nim_transform;
import tools/flowc/backends/nim/fi2nim_build;
import tools/flowc/manipulation/specialization;

export {
	fi2nim(program : FiProgram, cfg : FiNimConfig, callback : (int) -> void) -> void;
}

fi2nim(program : FiProgram, cfg0 : FiNimConfig, callback : (int) -> void) -> void {
	cfg = if (cfg0.outputfile != "1") cfg0 else {
		FiNimConfig(cfg0 with outputfile = changeFileExt(cfg0.flowfile, ".nim"));
	}
	fcVerbose(cfg, 0, "Making NIM '" + cfg.outputfile + "'...");
	env = fi2nimInitEnv(program, cfg);
	runtime = fi2nimRuntime(env);
	types = fi2nimCompileTypes(env);
	convs = fi2nimCompileFlowConversions(env);
	defvals = fi2nimCompileDefvals(env);
	tostrings = fi2nimCompileToString(env);
	compares = fi2nimCompileCompare(env);

	compiled = if (isConfigParameterTrue(cfg.options, "nim-mono")) {
		[NimCompiledSource(cfg.outputfile, fi2nimJoinNimCodeMany([
			NimLine(0, "#[ COMMON RUNTIME ]#"),
			NimLine(0, runtime),
			NimLine(0, "#[ TYPES ]#"),
			types,
			NimLine(0, "#[ CONVS ]#"),
			convs,
			NimLine(0, "#[ DEFVALS ]#"),
			defvals,
			NimLine(0, "#[ TO STRINGS ]#"),
			tostrings,
			NimLine(0, "#[ COMPARES ]#"),
			compares,
			NimLine(0, "#[ SOURCE CODE ]#"),
			fi2nimCompileSourceCode(env, runtime),
			NimLine(0, "main()")
		]))];
	} else {
		imports = fi2nimJoinNimCodeMany([
			NimLine(0, "import osproc"),
			NimLine(0, "import strutils"),
			NimLine(0, "import sequtils"),
			NimLine(0, "import asyncdispatch"),
			NimLine(0, "import flow_lib/httpServer_type"),
			NimLine(0, "import flow_runtime")
		]);
		concat(
			[
				NimCompiledSource("flow_runtime", NimLine(0, runtime)),
				NimCompiledSource("flow_types", fi2nimJoinNimCode(imports, types)),
				NimCompiledSource("flow_convs", fi2nimJoinNimCode3(imports, NimLine(0, "import flow_types"), convs)),
				NimCompiledSource("flow_defvals", fi2nimJoinNimCode3(imports, NimLine(0, "import flow_types"), defvals)),
				NimCompiledSource("flow_tostring", fi2nimJoinNimCode3(imports, NimLine(0, "import flow_types"), tostrings)),
				NimCompiledSource("flow_compare", fi2nimJoinNimCode3(imports, NimLine(0, "import flow_types"), compares)),
			],
			map(getTreeValues(env.prog.modules), \m -> fiNimCompileModule(env, m))
		);
	}
	if (!fi2nimSave(cfg, compiled)) callback(5) else {
		fi2nimBuild(cfg, callback);
	}
}

fi2nimCompileTypes(env: FiNimEnv) -> NimCode {
	structs_enum = fi2nimTypeEnums(env.structs);
	type_decls = mapConcat(env.prog.traversal, \mod_name -> {
		module = lookupTreeDef(env.prog.modules, mod_name, dummyFiModule);
		module_types = concat(module.unions, module.structs);
		map(module_types, \tp -> fi2nimTypeDecl(env, tp));
	});

	type_defs = fi2nimJoinNimCode3(
		structs_enum,
		if (length(type_decls) == 0) NimBlock([]) else {
			fi2nimJoinNimCode(
				NimLine(0, "type"),
				fi2nimSureIndent(fi2nimJoinNimCodeMany(type_decls))
			)
		},
		fi2nimEmptyLine()
	);
	typenames = list2array(fold(env.unions, 
		fold(env.structs, makeList(), \acc, s -> Cons(FiTypeName(s.name, s.typars), acc)),
		\acc, u -> Cons(FiTypeName(u.name, u.typeparameters), acc)
	));
	compiled_funcs = concat(
		[fi2nimCommentAsCompiledFunc("TYPARS TYPE TRAITS")],
		filtermap(typenames, \t -> fi2nimTypenameTypars(env, t)),
	);

	fi2nimJoinNimCodeMany(concatA([
		[type_defs, fi2nimEmptyLine()],
		[fi2nimEmptyLine()],
		map(env.structs, \s -> fi2nimRegisterStruct(env, s)),
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.decl),
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.def)
	]));
}

fi2nimCompileFlowConversions(env: FiNimEnv) -> NimCode {
	compiled_funcs = concatA([
		[fi2nimCommentAsCompiledFunc("FROM FLOW CONVERSION")],
		[fi2nimTypeFromFlow(env)],
		[fi2nimCommentAsCompiledFunc("TO FLOW CONVERSIONS")],
		concat(
			[fi2nimFuncToFlow(env)],
			filtermap(env.ordered_types, \t -> fi2nimTypeToFlow(env, t))
		),
	]);
	fi2nimJoinNimCodeMany(concatA([
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.decl),
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.def)
	]));
}

fi2nimCompileDefvals(env: FiNimEnv) -> NimCode {
	compiled_funcs = concat(
		[fi2nimCommentAsCompiledFunc("DEFAULT VALUES")],
		[fi2nimTypeDefVal(env)],
	);
	fi2nimJoinNimCodeMany(concatA([
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.decl),
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.def)
	]));
}

fi2nimCompileToString(env: FiNimEnv) -> NimCode {
	compiled_funcs = concat(
		[fi2nimCommentAsCompiledFunc("TO STRING CONVERSIONS")],
		concat(
			[fi2nimFuncToString(env)],
			filtermap(env.ordered_types, \t -> fi2nimTypeToString(env, t))
		)
	);
	fi2nimJoinNimCodeMany(concatA([
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.decl),
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.def)
	]));
}

fi2nimCompileCompare(env: FiNimEnv) -> NimCode {
	compiled_funcs = concat(
		[fi2nimCommentAsCompiledFunc("COMPARE")],
		filtermap(env.ordered_types, \t -> fi2nimTypeCompare(env, t)),
	);
	fi2nimJoinNimCodeMany(concatA([
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.decl),
		[fi2nimEmptyLine()],
		map(compiled_funcs, \fn -> fn.def)
	]));
}

fi2nimCompileSourceCode(env: FiNimEnv, runtime: string) -> NimCode {
	fcVerbose(env.cfg, 1, "Collecting code for all imported files...");
	// Store all declarations of a program into one large array.
	// Declarations stored in init order (order of their appearance in files).
	decls : [Pair<string, [FiDeclaration]>] = fi2nimOrderDeclarations(env);
	moduleCount = i2s(length(decls));

	fcVerbose(env.cfg, 0, "Generating Nim code for declarations...");
	modulesCode = list2array(foldi(decls, EmptyList(), \i, acc, p: Pair<string, [FiDeclaration]> -> {
		fcVerbose(env.cfg, 1, "[" + i2s(i + 1) + "/" + moduleCount + "] Generating Nim code for module " + p.first);
		module = lookupTreeDef(env.prog.modules, p.first, dummyFiModule);
		module_comment = NimLine(0, "# Module: " + p.first);
		acc1 = Cons(NimCompiledFunc(module_comment, module_comment), acc);
		fold(p.second, acc1, \ac, decl ->
			eitherMap(fiNimCompileToplevel(env, decl), \compiled -> 
				Cons(NimCompiledFunc(compiled with def = fi2nimAddEmptyLine(compiled.def)), ac), 
				ac
			)
		);
	}));
	native_imports = fi2nimNativeImports(env, runtime);
	forward_decls = fi2nimJoinNimCodeMany(map(modulesCode, \c -> c.decl));
	definitions = fi2nimJoinNimCodeMany(map(modulesCode, \c -> c.def));
	fi2nimJoinNimCodeMany([
		native_imports,
		fi2nimEmptyLine(),
		NimLine(0, "# Forward declarations"),
		forward_decls,
		fi2nimEmptyLine(),
		NimLine(0, "# Source code of functions / global variables"),
		definitions,
		fi2nimEmptyLine(),
	]);
}

fi2nimOrderDeclarations(env : FiNimEnv) -> [Pair<string, [FiDeclaration]>] {
	program = env.prog;
	missing_predefined = ref buildSet(map(nimPredefinedNatives, \p -> p.name));
	decls0 = fold(program.traversal, [], \macc: [Pair<string, [FiDeclaration]>], file -> 
		switch (lookupTree(program.modules, file)) {
			None(): {
				fcPrintln("Could not find module '" + file + "'", program.config.threadId);
				macc;
			}
			Some(module): {
				module_natives = filtermap(module.natives, \n -> 
					if (containsKeyTree(env.natives, n.name)) Some(n) else None()
				);
				module_natives_names = buildSet(map(module_natives, \n -> n.name));
				notNatives = filter(module.initOrder, \mn -> !containsSet(module_natives_names, mn));
				decls = concat(
					module_natives,
					filtermap(notNatives, \name -> lookupTree(program.names.toplevel, name))
				);
				iter(decls, \d -> if (containsSet(^missing_predefined, d.name)) {
					// A pre-defined native is found - remove it from missing
					missing_predefined := removeSet(^missing_predefined, d.name)
				});
				arrayPush(macc, Pair(module.fileinfo.flowfile, decls));
			}
		}
	);
	if (isEmptySet(^missing_predefined)) decls0 else {
		concat(
			[Pair("predefined", filtermap(nimPredefinedNatives, \nat ->
				if (containsSet(^missing_predefined, nat.name)) Some(nat) else None()
			))], 
			decls0
		);
	}
}

fi2nimInitEnv(program0 : FiProgram, cfg : FiNimConfig) -> FiNimEnv {
	effects = collectFiEffects(program0);
	natives = fi2nimNatives(cfg);
	program = fiNimTransformProgram(program0, effects, natives);

	is_explicit_polymorphic = \nm -> switch (lookupTree(program.names.structs, nm)) {
		Some(struct): length(struct.typars) > 0;
		None(): switch (lookupTree(program.names.unions, nm)) {
			Some(union): length(union.typeparameters) > 0;
			None(): true;
		}
	}

	polymorphics = filterTree(collect_polymorphic_entities(program, false), \nm, __ -> 
		// leave only true (=explicit) polymorhpic structs/unions and remove implicitly polymorphic
		is_explicit_polymorphic(nm)
	);

	debug_polymorphics = getUrlParameter("nim-debug") == "1";
	if (debug_polymorphics) {
		println("polymorphics:\n" + strIndent(
			superglue(tree2pairs(polymorphics), \p -> p.first + " => " + prettyFiType(dummyPretty, p.second, makeSet()), "\n")
		));
	}
	specializations = filterTree(
		mapTree(
			find_specializations(program, polymorphics, makeTree(), false), 
			\specs -> mapSet(specs, \spec -> fiPurifyType(spec))
		),
		// leave only true (=explicit) polymorhpic structs/unions and remove implicitly polymorphic
		\nm,__ -> is_explicit_polymorphic(nm)
	);

	if (debug_polymorphics) {
		println("specializations:\n" + strIndent(
			superglue(
				tree2pairs(specializations),
				\p -> p.first + " =>\n" + strIndent(superglue(set2array(p.second), \t -> prettyFiType(dummyPretty, t, makeSet()), "\n")),
				"\n"
			))
		);
	}
	structs = fold(program.traversal, [], \acc, mname ->
		eitherFn(lookupTree(program.modules, mname), \module -> concat(acc, module.structs), \ -> acc)
	);
	unions = fold(program.traversal, [], \acc, mname ->
		eitherFn(lookupTree(program.modules, mname), \module -> concat(acc, module.unions), \ -> acc)
	);
	specialized_structs = list2array(fold(structs, makeList(), \acc, struct ->
		switch (lookupTree(specializations, struct.name)) {
			Some(specs): foldSet(specs, acc, \ac, spec -> 
				switch (spec) {
					FiTypeName(nm, typars): {
						if (length(typars) == length(struct.typars)) {
							Cons(fiSpecializeStruct(spec, struct), ac);
						} else {
							fcPrintln("Struct type parameters number mismatch the specialization type parameters number:\n" +
								"struct: " + pretFiStructOrUnion(struct) + ", specialization: " + pretFiType(spec), cfg.threadId
							);
							ac;
						}
					}
					default: fail0("must be a typename");
				}
			);
			None(): {
				if (length(struct.typars) == 0) {
					Cons(struct, acc);
				} else {
					println("Struct " + struct.name + " must occur in specialization, otherwise is not used");
					acc;
				}
			}
		}
	));
	specialized_unions = list2array(fold(unions, makeList(), \acc, union ->
		switch (lookupTree(specializations, union.name)) {
			Some(specs): foldSet(specs, acc, \ac, spec ->
				switch (spec) {
					FiTypeName(nm, typars): Cons(fiSpecializeUnion(spec, union), ac);
					default: fail0("must be a typename");
				}
			);
			None(): {
				if (length(union.typeparameters) == 0) {
					Cons(union, acc);
				} else {
					println("Union " + union.name + " must occur in specialization, otherwise is not used");
					acc;
				}
			}
		}
	));
	if (debug_polymorphics) {
		println("structs:\n" +
			strIndent(superglue(structs, \s -> pretFiStructOrUnion(s), "\n"))
		);
		println("unions:\n" +
			strIndent(superglue(unions, \u -> pretFiStructOrUnion(u), "\n"))
		);
		println("specialized_structs:\n" +
			strIndent(superglue(specialized_structs, \s -> pretFiStructOrUnion(s), "\n"))
		);
		println("specialized_unions:\n" +
			strIndent(superglue(specialized_unions, \u -> pretFiStructOrUnion(u), "\n"))
		);
	}

	funcTypes = set2array(fold(structs, makeSet(), \acc, struct ->
		fold(struct.args, acc, \ac, arg -> 
			switch (arg.type) {
				FiTypeFunction(__,__): insertSet(ac, cast(fiPurifyType(arg.type): FiType -> FiTypeFunction));
				default: ac;
			}
		)
	));

	casts = fiProgramCasts(program);
	if (debug_polymorphics) {
		println("casts:\n" +
			strIndent(superglue(tree2pairs(casts), \p -> 
				pretFiType(p.first) + " =>\n" + strIndent(superglue(set2array(p.second), \x -> pretFiType(x), "\n")),
			"\n"))
		);
	}

	env0 = FiNimEnv(cfg, program, "", ref makeSet(),
		structs,
		unions,
		funcTypes,
		specialized_structs,
		specialized_unions,
		specializations,
		casts,
		collectFiEffects(program), "", [],
		natives,
		[], makeTree(), makeTree(),
		fi2nimMaxFuncArity(program)
	);
	fi2nimInitTypeIndexes(env0, getUrlParameter("nim-debug") == "1");
}

fi2nimNativeImports(env: FiNimEnv, runtime: string) -> NimCode {
	trim_std = \imp -> if (startsWith(imp, "std/")) strRight(imp, 4) else imp;
	runtime_imports = filter(strSplit(runtime, "\n"), fi2nimIsImportLine);
	runtime_import_modules = filtermap(runtime_imports, \str -> 
		if (!startsWith(str, "import")) None() else {
			components = filter(strSplit(str, " "), isNotSpace);
			if (length(components) < 2) None() else Some(trim_std(components[1]));
		}
	)
	runtime_imports_set = buildSet(runtime_imports);
	runtime_import_modules_set = buildSet(runtime_import_modules);
	imports = filter(set2array(^(env.native_imports)), \str ->
		if (containsSet(runtime_imports_set, str)) false else {
			if (startsWith(str, "from")) {
				components = filter(strSplit(str, " "), isNotSpace);
				// Check if a module/component is already imported
				length(components) < 2 || !containsSet(runtime_import_modules_set, trim_std(components[1]));
			} else {
				// Leave an import of unrecognized kind
				true;
			}
		}
	);
	fi2nimMakeNimBlock(0, 
		if (length(imports) == 0) imports else {
			concat(["# Native function imports"], imports)
		}
	);
}
