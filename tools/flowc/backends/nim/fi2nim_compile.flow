import tools/flowc/backends/nim/fi2nim_utils;
import tools/flowc/backends/nim/fi2nim_code;
import tools/flowc/manipulation/transform_exps;
import tools/flowc/manipulation/tail_call;

export {
	fiNimCompileToplevel(env : FiNimEnv, decl: FiDeclaration) -> Maybe<NimCompiled>;
}

fiNimCompileToplevel(env0 : FiNimEnv, decl : FiDeclaration) -> Maybe<NimCompiled> {
	env = FiNimEnv(env0 with currentToplevel = decl.name);
	if (env.cfg.verbose > 1) {
		println("\tcompiling decl: " + decl.name + " ... ");
	}
	compiled = switch (decl) {
		FiNativeDec(name, io, type, nativeName, fallback, __, __) : {
			switch (lookupTree(env.natives, name)) {
				Some(nat): {
					// native is implemented in runtime
					env.native_imports := mergeSets(^(env.native_imports), buildSet(nat.imports));
					Some(nat.code);
				}
				None(): {
					// use a fallback
					switch (fallback) {
						FiLambda(__, __, fn_type, __): {
							fiNimCompileFunction(env, FiFunctionDec(name, fallback, fn_type, 0, 0));
						}
						default: {
							fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + pretFiExp(fallback), env.cfg.threadId);
							None();
						}
					}
				}
			}
		}
		FiFunctionDec(name, lambda,__,__, __): {
			switch (lookupTree(env.natives, name)) {
				Some(nat): {
					//is implemented as native in runtime
					None()
				}
				None(): {
					fiNimCompileFunction(env, decl);
				}
			}
		}
		FiGlobalVar(name, __,__,__,__): {
			Some(fiNimCompileGlobalVar(env, decl));
		}
	};
	if (env.cfg.verbose > 1) {
		println("\t" + decl.name + " is COMPILED");
	}
	compiled;
}

fiDecast(e: FiExp) -> FiExp {
	switch (e) {
		FiCast(x, __,__,__,__): fiDecast(x);
		default: e;
	}
}

fiNimInlineHostCalls(env: FiNimEnv, e: FiExp) -> FiExp {
	fiMapExp(e, \x,__ -> switch (x) {
		FiCall(f, args, ret_type, s1): {
			switch(f) {
				FiVar(v, v_type, s2): {
					if (v != "hostCall") x else {
						fn = cast(args[0]: FiExp -> FiString).s;
						fn_args = cast(fiDecast(args[1]): FiExp -> FiCallPrim).es;
						mdecl: Maybe<FiDeclaration> = lookupTree(env.prog.names.toplevel, fn);
						switch (mdecl) {
							Some(decl): {
								fn_type = cast(decl.type: FiType -> FiTypeFunction);
								out_type = FiTypeFunction(map(fn_args, \arg -> FiFunArg("", fiExpType(arg))), ret_type);
								call1 = FiCall(x with f = FiVar(fn, fn_type, s2), args = fn_args);
								if (fiEqualTypes(fn_type.returnType, ret_type)) call1 else {
									switch (fn_type.returnType) {
										FiTypeVoid(): {
											FiCall(call1 with type = FiTypeVoid());
										}
										default: {
											FiCast(call1, fn_type.returnType, ret_type, ret_type, s1);
										}
									}
								}
							}
							None(): {
								x;
							}
						}
					}
				}
				default: x;
			}
		}
		default: x;
	}, true);
}

fiNimPrepareExp(env: FiNimEnv, e: FiExp, type: FiType, debug: bool) -> FiExp {
	maybe_show = \fn, msg -> \x -> {
		e1 = fn(x);
		if (!debug) e1 else {
			println(msg + ":\n" + pretFiExp(e1));
			e1;
		}
	}
	debug_fiExpMakeCastsExplicit := env.currentToplevel == "captureFreeVars";
	e 
	//|> maybe_show(\x -> fiNimInlineHostCalls(env, x), "fiNimInlineHostCalls")
	|> maybe_show(fiFixVarInSameStructType1, "fiFixVarInSameStructType1")
	|> maybe_show(\x -> fiExpMakeCastsExplicit(x, type, env.prog.names), "fiExpMakeCastsExplicit")
	|> maybe_show(\y -> fiExplicitCastInSwitch1(y, env.prog.names), "fiExplicitCastInSwitch1")
	|> maybe_show(\z -> fiRemoveUnusedVars(z, env.effects), "fiRemoveUnusedVars")
	|> maybe_show(\x -> fiNimInlineHostCalls(env, x), "fiNimInlineHostCalls")
	|> maybe_show(fiExpChangeAndOr2If, "fiExpChangeAndOr2If")
	|> maybe_show(fiExpShortcutIf, "fiExpShortcutIf")
	|> maybe_show(fiExpNormalizeSeqences, "fiExpNormalizeSeqences")
	|> maybe_show(fiPullStatementsUp, "fiPullStatementsUp")
}

fiNimNormalizeMain(func: FiFunctionDec) -> FiFunctionDec {
	if (func.name != "main" || func.type.returnType == FiTypeVoid()) func else {
		// In case 'main' is returning non-void value force it not to return.
		FiFunctionDec(func with
			type = FiTypeFunction(func.lambda.type with returnType = FiTypeVoid()),
			lambda = FiLambda(func.lambda with
				type = FiTypeFunction(func.lambda.type with returnType = FiTypeVoid()),
				body = FiSeq(concat(unFiSeq(func.lambda.body), [FiVoid(0)]), FiTypeVoid(), 0)
			)
		)
	}
}

fiNimCompileFunction(env : FiNimEnv, func0: FiFunctionDec) -> Maybe<NimCompiled> {
	if (containsSet(nimForbiddenFunctions, func0.name)) {
		fcPrintln("Program uses the forbidden function: " + func0.name, env.cfg.threadId);
		None();
	} else {
		debug = (func0.name == getUrlParameter("nim-debug"));
		func = fiNimNormalizeMain(func0);
		type = FiTypeFunction(func.type with args = func.lambda.args);

		lambda = cast(fiNimPrepareExp(env, func.lambda, type, debug): FiExp -> FiLambda);

		fn_typars = fiNimTypeParamsList(env, func.type);
		decl = "proc " + fiNimRenameGlobal(func.name) + fn_typars + fiNimCompileFuncType(env, type);
		has_tailcall = fcDetectTailCall(func);

		locals = fold(lambda.args, makeSet(), \acc, arg -> insertSet(acc, arg.name));
		fn_code = if (!fcDetectTailCall(func)) {
			fiNimCompile(env, lambda.body, true, locals);
		} else {
			tailcall_args = map(lambda.args, \arg -> 
				FiFunArg(arg with name = fiNimRenameKeyword("tailcall_" + arg.name))
			);
			body_type = fiExpType(lambda.body);
			body = foldri(lambda.args, lambda.body, \i, acc, arg -> 
				fiRenameVar(acc, arg.name, tailcall_args[i].name)
			);
			env1 = FiNimEnv(env with 
				tailcall_fn = func.name,
				tailcall_args = tailcall_args
			);
			body_code = fiNimCompile(env1, body, true, 
				fold(tailcall_args, locals, \acc, arg -> insertSet(acc, arg.name))
			);
			fi2nimJoinNimCode(
				fi2nimMakeNimBlock(0, mapi(lambda.args, \i, arg -> 
					"var " + fiNimRenameKeyword(tailcall_args[i].name) + ": " + 
						fiNimCompileType(env, arg.type) + " = " + 
						fiNimRenameKeyword(arg.name)
				)),
				fi2nimJoinNimCode(
					NimLine(0, "while true:"),
					fi2nimSureIndent(body_code)
				)
			);
		}
		//we cannot terminate the program, if there is no quit(). maybe quit() in some callback.
		waitMain = if (func.name == "main") {
			fi2nimMakeNimBlock(0, [
				"# Waiting code",
				"while true: waitFor(sleepAsync(2000000000))"
			]);
		} else {
			NimSnippet("")
		}
		Some(NimCompiled(
			if (func.name == "main") NimSnippet("") else NimLine(0, decl),
			fi2nimJoinNimCode(
				NimLine(0, decl + (if (func.name == "main") " {.discardable.}" else "") + " ="), 
				fi2nimDecideToIndent(lambda.body, fi2nimJoinNimCode(fn_code, waitMain))
			)
		));
	}
}

fiNimCompileGlobalVar(env : FiNimEnv, var: FiGlobalVar) -> NimCompiled {
	debug = (var.name == getUrlParameter("nim-debug"));
	value = fiNimPrepareExp(env, var.value, var.type, debug);
	value1 = if (fiNimIsExp(value)) value else {
		FiCall(FiLambda([], value, FiTypeFunction([], var.type), 0), [], var.type, 0);
	}
	NimCompiled(
		NimSnippet(""), 
		fi2nimJoinNimCode(
			NimLine(0, "var " + fiNimRenameGlobal(var.name) + ": " + fiNimCompileType(env, var.type) + " ="),
			fi2nimDecideToIndent(value1, fiNimCompile(env, value1, false, makeSet()))
		)
	);
}

fi2nimDecideToIndent(x: FiExp, c: NimCode) -> NimCode {
	if (fiNimIsExp(x)) fi2nimMaybeIndent(c) else fi2nimSureIndent(c);
}

fiNimIsExp(e: FiExp) -> bool {
	switch (e) {
		FiConst(): true;
		FiVar(__,__,__): true;
		FiLet(__,__,__,__,__,__): false;
		FiLambda(args, body, type, __): true;
		FiCall(fn, es, __, __): fiNimIsExp(fn) && forall(es, fiNimIsExp);
		FiSeq(es, __, __): {
			if (length(es) == 0) true else
			if (length(es) == 1) fiNimIsExp(es[0]) else false;
		}
		FiIf(e1, e2, e3, __, __):
			fiNimIsExp(e1) && fiNimIsExp(e2) && fiNimIsExp(e3);
		FiSwitch(x, __, cs, __, __): {
			false;
		}
		FiCallPrim(op, es, tp, __): {
			forall(es, fiNimIsExp) && 
			switch (op : FcPrim) {
				FcAssignPrim():	false;
				FcSetMutablePrim(name): false;
				default: true;
			};
		}
		FiCast(ex,__,__,__,__): fiNimIsExp(ex);
		default: false;
	}
}

fiNimCompile(env : FiNimEnv, expr : FiExp, returns: bool, locals: Set<string>) -> NimCode {
	wrap_ret = \c -> if (!returns || fiExpType(expr) == FiTypeVoid()) c else {
		fi2nimJoinNimCode(NimSnippet("return "), c)
	}
	switch (expr) {
		FiVoid(__):    NimSnippet(if (returns) "return" else "discard");
		FiBool(b, __): wrap_ret(NimSnippet(if (b) "true" else "false"));
		FiInt(v, __):  wrap_ret(NimSnippet(i2s(v) + "i32"));
		FiDouble(d, __): {
			s = d2s(d);
			wrap_ret(NimSnippet(if (strIndexOf(s, ".") < 0 && strIndexOf(s, "e") < 0) s + ".0" else s));
		}
		FiString(s,__): wrap_ret(NimSnippet("\"" + escapeStr(s) + "\""));
		FiVar(x,__,__): {
			wrap_ret(NimSnippet(
				if (containsSet(locals, x)) fiNimRenameKeyword(x) else fiNimRenameGlobal(x)
			));
		}
		FiLet(x, tp, e1, e2, __, __): {
			fi2nimJoinNimCode(
				fi2nimJoinNimCode(
					NimLine(0, "var " + fiNimRenameKeyword(x) + ": " + fiNimCompileType(env, tp) + " ="),
					fi2nimMaybeIndent(fiNimCompile(env, e1, false, locals))
				),
				fi2nimCode2Block(fiNimCompile(env, e2, returns, insertSet(locals, x)))
			);
		}
		FiLambda(args, body, type, __): {
			wrap_ret(fi2nimJoinNimCode(
				NimLine(0, fiNimCompileType(env, FiTypeFunction(type with args = args)) + " ="), 
				fi2nimSureIndent(fiNimCompile(
					FiNimEnv(env with tailcall_fn = ""), body, true, 
					fold(args, locals, \acc, arg -> insertSet(acc, arg.name))
				))
			));
		}
		FiCall(fn, es, __, __): {
			args_code: [NimCode] = map(es, \e -> fiNimCompile(env, e, false, locals));
			switch (fn) {
				FiVar(x, __, __): {
					args: NimCode = fi2nimBracketNimCode(fi2nimGlueNimCode(args_code, ", "));
					switch (lookupTree(nimInlinedFuncs, x)) {
						Some(inline): {
							wrap_ret(fi2nimJoinNimCode(NimSnippet(inline), args));
						}
						None(): {
							if (!(returns && x == env.tailcall_fn)) {
								n: Maybe<FiDeclaration> = lookupTree(env.prog.names.toplevel, x);
								typars = switch (n) {
									Some(decl): {
										fiMatchTyparsOrdered(decl.type, fiExpType(fn));
									}
									None(): [];
								}
								decl_type = switch (n) {
									Some(decl): decl.type;
									None(): FiTypeVoid();
								}
								typars_code = NimSnippet(if (length(typars) == 0) "" else {
									"[" + superglue(typars, \tp -> fiNimCompileType(env, tp), ", ") + "]";
								});
								fn_code = fiNimCompile(env, fn, false, locals);
								wrap_ret(fi2nimJoinNimCode3(fn_code, typars_code, args));
							} else {
								// Tail call detected
								arg_is_not_changed = \y, i -> {
									switch (y) {
										FiVar(v,__,__): v == env.tailcall_args[i].name;
										default: false;
									}
								}
								tmp_arg = \i -> fiNimRenameKeyword("tmp__" + env.tailcall_args[i].name);
								fi2nimJoinNimCodeMany(concat3(
									filtermapi(args_code, \i, arg_code -> 
										if (arg_is_not_changed(es[i], i)) None() else {
											Some(fi2nimCode2Block(fi2nimJoinNimCode(
												NimLine(0, "let " + tmp_arg(i) + ": " + fiNimCompileType(env, env.tailcall_args[i].type) + " ="),
												fi2nimMaybeIndent(args_code[i])
											)));
										}
									),
									filtermapi(args_code, \i, arg_code -> 
										if (arg_is_not_changed(es[i], i)) None() else {
											Some(NimLine(0, fiNimRenameKeyword(env.tailcall_args[i].name) + " = " + tmp_arg(i)));
										}
									),
									[NimLine(0, "continue")]
								));
							}
						}
					}
				}
				default: {
					wrap_ret(fi2nimJoinNimCode(
						fi2nimBracketNimCode(fiNimCompile(env, fn, false, locals)),
						fi2nimBracketNimCode(fi2nimGlueNimCode(args_code, ", "))
					));
				}
			}
		}
		FiSeq(es, __, __): {
			if (length(es) == 0) NimSnippet(if (returns) "return" else "discard") else
			if (length(es) == 1) fiNimCompile(env, es[0], returns, locals) else {
				fi2nimJoinNimCodeMany(mapi(es, \i, x -> {
					needs_discard = switch(x) {
						FiLet(__, __, __, __, __, __) : false;
						FiCallPrim(op, __, __, __) : {
							switch (op) {
								FcAssignPrim() : false;
								FcSetMutablePrim(__) : false;
								default: true;
							}
						}
						FiCall(__, __, tp, __): {
							switch (tp) {
								FiTypeVoid() : false;
								default : true;
							}
						}
						default: fiExpType(x) != FiTypeVoid();
					}
					last_returns = returns && i + 1 == length(es);
					x_code = fiNimCompile(env, x, last_returns, locals);
					fi2nimCode2Block(if (needs_discard && !last_returns) {
						fi2nimJoinNimCode(NimSnippet("discard "), x_code)
					} else {
						x_code;
					});
				}))
			}
		}
		FiIf(e1, e2, e3, __, __): {
			fi2nimJoinNimCode(
				fi2nimJoinNimCode(
					fi2nimCode2Block(fi2nimJoinNimCode3(
						NimSnippet("if "), fiNimCompile(env, e1, false, locals), NimSnippet(":")
					)), 
					fi2nimSureIndent(fiNimCompile(env, e2, returns, locals))
				),
				fi2nimJoinNimCode(
					NimLine(0, "else: "), 
					fi2nimSureIndent(fiNimCompile(env, e3, returns, locals))
				)
			);
		}
		FiSwitch(x, x_type, cs, __, __): {
			x_code = fiNimCompile(env, x, false, locals);
			def_case = switch (find(cs, \c -> c.struct == "default")) {
				Some(dc): fi2nimMaybeIndent(fiNimCompile(env, dc.body, returns, locals));
				None():   fi2nimJoinNimCode3(
					NimSnippet("assert(false,\"illegal struct id in switch: \" & $StructType("), x_code, NimSnippet(".str_id))")
				);
			}
			fi2nimJoinNimCodeMany(concat3(
				[fi2nimCode2Block(fi2nimJoinNimCodeMany([NimSnippet("case "), x_code, NimSnippet(".str_id"), NimSnippet(":")]))],
				map(filter(cs, \c -> c.struct != "default"), \c ->
					fi2nimJoinNimCode(
						NimLine(0, "of int32(" + fi2nimStructId(env, c.struct) + "): #[" + c.struct + "]#"), 
						fi2nimMaybeIndent(fiNimCompile(env, c.body, returns, locals))
					)
				),
				[fi2nimJoinNimCode(NimLine(0, "else: "), def_case)]
			));
		}
		FiCallPrim(op, es, tp, __): {
			args = map(es, \arg : FiExp -> fiNimCompile(env, arg, false, locals));
			arg_type = if (length(es) > 0) fiExpType(es[0]) else FiTypeVoid();
			opt = switch (op : FcPrim) {
				FcOrPrim():     fi2nimBinOpNimCode(args[0], " or ", args[1]);
				FcAndPrim():    fi2nimBinOpNimCode(args[0], " and ", args[1]);
				FcNotPrim():    fi2nimJoinNimCode(NimSnippet("not "), args[0]);
				FcEqPrim():     fiNimCompileComparison(args[0], args[1], " == ");
				FcNePrim():     fiNimCompileComparison(args[0], args[1], " != ");
				FcLePrim():     fiNimCompileComparison(args[0], args[1], " <= ");
				FcGePrim():     fiNimCompileComparison(args[0], args[1], " >= ");
				FcLtPrim():     fiNimCompileComparison(args[0], args[1], " < ");
				FcGtPrim():     fiNimCompileComparison(args[0], args[1], " > ");
				FcPlusPrim():   fi2nimBinOpNimCode(args[0], if (arg_type == FiTypeString()) " & " else " + ", args[1]);
				FcMinusPrim():  fi2nimBinOpNimCode(args[0], " - ", args[1]);
				FcMulPrim():    fi2nimBinOpNimCode(args[0], " * ", args[1]);
				FcDivPrim():    fi2nimBinOpNimCode(args[0], if (arg_type == FiTypeInt()) " div " else " / ", args[1]);
				FcModPrim():    fi2nimBinOpNimCode(args[0], " mod ", args[1]);
				FcNegPrim():    fi2nimJoinNimCode(NimSnippet("-"), args[0]);
				FcArrayPrim():  fi2nimJoinNimCode3(NimSnippet("@["), fi2nimGlueNimCode(args, ", "), NimSnippet("]"));
				FcIndexPrim():  fi2nimJoinNimCodeMany([args[0], NimSnippet("["), args[1],  NimSnippet("]")]);
				FcDerefPrim():  fi2nimJoinNimCode(args[0], NimSnippet(".val"));
				FcAssignPrim():	fi2nimJoinNimCodeMany([NimSnippet("("), args[0], NimSnippet(".val = "), args[1], NimSnippet(")")]);
				FcRefPrim():    fi2nimJoinNimCode3(NimSnippet("Ref[" + fiNimCompileType(env, arg_type) + "](val: "), args[0], NimSnippet(")"));
				FcStructPrim(struct_name): {
					tn = cast(tp: FiType -> FiTypeName);
					fiMapTypeName(tn, env.prog.names, 
						\struct -> fi2nimJoinNimCode(
							NimSnippet(fiNimCompileType(env, tn)),
							fi2nimBracketNimCode(
								fi2nimGlueNimCode(
									concat(
										[
											//NimSnippet("tp_id: rt_type_id_" + struct_name + fiNimParamsForInstantiate(env, tn.typeparameters) + "()"),
											NimSnippet("tp_id: -1"),
											NimSnippet("str_id: int32(" + fi2nimStructId(env, struct_name) + ")")
										],
										mapi(args, \i, arg -> fi2nimJoinNimCode(NimSnippet(fiNimRenameKeyword(struct.args[i].name) + ": "), arg))
									), ", "
								)
							)
						),
						\union -> fail0("cannot construct union explicitly: " + tn.name),
						\__ -> fail0("unknown struct or union: " + tn.name)
					);
				};
				FcFieldPrim(name): {
					switch (arg_type) {
						FiTypeName(__,__): {
							fi2nimJoinNimCode(args[0], NimSnippet("." + fiNimRenameKeyword(name)));
						}
						FiTypeFlow(): {
							fi2nimJoinNimCode3(
								NimSnippet("rt_get_flow_field("), 
								args[0], NimSnippet(", \"" + name + "\")")
							);
						}
						default: fail0("field may be get of a struct or a flow, got: " + pretFiExp(expr) + " of type: " + pretFiType(arg_type));
					}
				}
				FcSetMutablePrim(name): {
					fi2nimBracketNimCode(fi2nimJoinNimCode3(
						args[0], NimSnippet("." + fiNimRenameKeyword(name) + " = "), args[1]
					))
				}
				FcCreateClosurePrim(__, __): fail0("TODO");
                FcQuote(): fail0("TODO");
                FcUnquote(): fail0("TODO");
			};
			wrap_ret(opt);
		}
		FiCast(e, from, to, __, __): {
			e_code = fiNimCompile(env, e, false, locals);
			cast_code = if (fiEqualTypes(from, to)) e_code else {
				fiNimCompileCast(env, from, to, e_code);
			}
			wrap_ret(cast_code);
		}
		default: {
			fail0("Not yet supported in Nim backend: " + pretFiExp(expr));
		}
	}
}

fiNimCompileComparison(x: NimCode, y: NimCode, op: string) -> NimCode {
	fi2nimJoinNimCodeMany([
		NimSnippet("(rt_compare("), x, NimSnippet(", "), y, NimSnippet(")"), NimSnippet(op), NimSnippet("0)")
	]);
}

fiNimCompileCast(env: FiNimEnv, from: FiType, to: FiType, ex: NimCode) -> NimCode {
	make_cast = \prefix -> fi2nimJoinNimCode(NimSnippet(prefix), fi2nimBracketNimCode(ex));
	def_cast = \-> make_cast("cast[" + fiNimCompileType(env, to) + "]");
	err_cast = \-> fail0("illegal cast from " + pretFiType(from) + " to" + pretFiType(to));
	if (from == FiTypeFlow()) {
		make_cast("rt_to_" + fi2nimMangleComplexType(to));
	} else {
		switch (to) {
			FiTypeName(to_name,__): {
				fiMapTypeName(to, env.prog.names, 
					\struct_to -> switch (from) {
						FiTypeName(from_name,__): 
							fiMapTypeName(from, env.prog.names, 
								\struct_from -> if (to_name == from_name) def_cast() else err_cast(),
								\union_from -> def_cast(),
								\err -> err_cast()
							);
						default: err_cast();
					},
					\union_to -> switch (from) {
						FiTypeName(__,__): def_cast();
						default: err_cast();
					}, 
					\err -> err_cast()
				);
			}
			FiTypeArray(__): switch (from) {
				FiTypeArray(__): def_cast();
				default: err_cast();
			}
			FiTypeRef(__): switch (from) {
				FiTypeRef(__): def_cast();
				default: err_cast();
			}
			FiTypeFunction(__,__): switch (from) {
				FiTypeFunction(__,__): def_cast();
				default: err_cast();
			}
			FiTypeFlow():   make_cast("rt_to_flow");
			FiTypeString(): make_cast("rt_to_string");
			FiTypeDouble(): make_cast("rt_to_double");
			FiTypeBool():   make_cast("rt_to_bool");
			FiTypeInt():    make_cast("rt_to_int");
			FiTypeNative(): make_cast("rt_to_native");
			FiTypeParameter(__): def_cast();
			FiTypeVoid(): err_cast();
		}
	}
}
