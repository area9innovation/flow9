import string_utils;
import tools/flowc/backends/common;
import tools/flowc/backends/nim/fi2nim_defines;
import tools/flowc/backends/nim/fi2nim_utils;
import tools/flowc/manipulation/transform_exps;

export {
	fiNimCompileToplevel(env : FiNimEnv, decl: FiDeclaration, indent : string) -> string;
	fi2nimStructIds(env : FiNimEnv) -> string;
	fi2nimStructDef(env : FiNimEnv, struct : FiTypeStruct) -> string;
	fi2nimUnionDef(env : FiNimEnv, union : FiTypeUnion) -> string;
	fi2nimStructFuncs(env : FiNimEnv, struct : FiTypeStruct) -> string;
}

// Temporary, will be removed.
doTN : ref bool = ref false;

fiNimCompileToplevel(env : FiNimEnv, decl : FiDeclaration, indent : string) {
	switch (decl) {
		FiNativeDec(name, io, type, nativeName, fallback, __, __) : {
			switch (fallback) {
				FiLambda(__, __, fn_type, __): {
					if (containsSet(nimNativeFunctions, name)) {
						// native is implemented in runtime
						""
					} else {
						// use a fallback
						fiNimCompileFunction(env, name, fn_type, fallback);
					}
				}
				FiVoid(__): {
					if (!containsSet(nimNativeFunctions, name)) {
						fcPrintln("Error: " + name + " native is not implemented in nim backend", env.cfg.threadId);
					}
					"# native: " + nativeName + " " + name + "\n";
				}
				default: {
					fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, fallback), env.cfg.threadId);
					"# native: " + nativeName + " " + name + "\n"
				}
			}
		}
		FiFunctionDec(name, lambda, type, __, __): {
			if (containsSet(nimNativeFunctions, name)) {
				//is implemented as native in runtime
				""
			} else {
				fiNimCompileFunction(env, name, type, lambda);
			}
		}
		FiGlobalVar(name, value, type, __, __): {
			fiNimCompileGlobalVar(env, name, type, value);
		}
	};
}

nim_debug_lambda0 : ref FiExp = ref FiVoid(0);
nim_debug_lambda : ref FiExp = ref FiVoid(0);

fiNimFail(msg: string, expr: FiExp) -> void {
	fail("fail: " + msg + "\n" +
		"expr: " + prettyFiExp(dummyPretty, expr) + "\n" +
		"lambda0: " + prettyFiExp(dummyPretty, ^nim_debug_lambda0) + "\n" +
		"lambda: " + prettyFiExp(dummyPretty, ^nim_debug_lambda0) + "\n" +
		"\n" +
		"RAW expr: " + toStringFormatted(expr) + "\n" +
		"RAW lambda0: " + toStringFormatted(^nim_debug_lambda0) + "\n" +
		"RAW lambda: " + toStringFormatted(^nim_debug_lambda0) + "\n"
	);
}

fiNimShow(msg: string, expr: FiExp) -> void {
	println("show: " + msg + "\n" +
		"expr: " + prettyFiExp(dummyPretty, expr) + "\n" +
		"lambda0: " + prettyFiExp(dummyPretty, ^nim_debug_lambda0) + "\n" +
		"lambda: " + prettyFiExp(dummyPretty, ^nim_debug_lambda) + "\n" +
		"\n" +
		"RAW expr: " + toStringFormatted(expr) + "\n" +
		"RAW lambda0: " + toStringFormatted(^nim_debug_lambda0) + "\n" +
		"RAW lambda: " + toStringFormatted(^nim_debug_lambda) + "\n"
	);
}

fiNimPrepareExp(env: FiNimEnv, e: FiExp, type: FiType) -> FiExp {
	e 
	|> fiFixVarInSameStructType1 
	|> \x -> fiExpMakeCastsExplicit(x, type, env.prog.names)
	|> \y -> fiExplicitCastInSwitch1(y, env.prog.names)
	|> \z -> fiRemoveUnusedVars(z, env.effects)
	|> fiExpNormalizeSeqences
	|> fiPullStatementsUp
}

fiNimCompileFunction(env : FiNimEnv, nm: string, type: FiTypeFunction, lambda0: FiLambda) -> string {
	if (containsSet(nimForbiddenFunctions, nm)) {
		nimProcDefinition := Cons("# " + nm + " forbidden with nimForbiddenFunctions\n", ^nimProcDefinition);
		""
	} else {
		nim_debug_lambda0 := lambda0;
		lambda = cast(fiNimPrepareExp(env, lambda0, type): FiExp -> FiLambda);
		nim_debug_lambda := lambda;

		/*if (nm == "parseJsonDouble2") {
			fiNimShow(nm, FiVoid(0));
			//println(toStringFormatted(fiExpMakeCastsExplicit(lambda0, type, env.prog.names)))
		}*/

		fn_typars = fiNimTypeParamsList(env, FiFunctionDec(nm, lambda, type, -1, -1));

		decl = "proc " + fiNimRenameKeyword(nm) + fn_typars + fiFuncType2NimType(env, type);

		if (nm != "main") {
			nimProcDefinition := Cons(decl + "\n", ^nimProcDefinition);
		}
		fn_code = fiNimCompile(env, lambda.body, true);
		decl + (if (nm == "main") " {.discardable.}" else "") + " =" + 
			fi2nimMaybeIndent(fn_code) + "\n";
	}
}

fiNimCompileGlobalVar(env : FiNimEnv, nm: string, type: FiType, value0: FiExp) {
	value = fiNimPrepareExp(env, value0, type);
	value1 = if (fiNimIsExp(value)) value else {
		FiCall(FiLambda([], value, FiTypeFunction([], type), 0), [], type, 0);
	} 
	"var " + nm + ": " + fiType2NimType(env, type) + " =" +
		fi2nimMaybeIndent(fiNimCompile(env, value1, false));
}

fiNimIsExp(e: FiExp) -> bool {
	switch (e) {
		FiConst(): true;
		FiVar(__,__,__): true;
		FiLet(__,__,__,__,__,__): false;
		FiLambda(args, body, type, __): true;
		FiCall(fn, es, __, __): fiNimIsExp(fn) && forall(es, fiNimIsExp);
		FiSeq(es, __, __): {
			if (length(es) == 0) true else
			if (length(es) == 1) fiNimIsExp(es[0]) else false;
		}
		FiIf(e1, e2, e3, __, __):
			fiNimIsExp(e1) && fiNimIsExp(e2) && fiNimIsExp(e3);
		FiSwitch(x, __, cs, __, __): {
			false;
		}
		FiCallPrim(op, es, tp, __): {
			forall(es, fiNimIsExp) && 
			switch (op : FcPrim) {
				FcAssignPrim():	false;
				FcSetMutablePrim(name): false;
				default: true;
			};
		}
		FiCast(ex,__,__,__,__): fiNimIsExp(ex);
		default: false;
	}
}

fiNimCompile(env : FiNimEnv, expr : FiExp, returns: bool) -> string {
	wrap_ret = \s -> if (returns && fiExpType(expr) != FiTypeVoid()) "return " + s else s;
	add_newlines = \ls -> mapi(ls, \i, line -> if (endsWith(line, "\n") || i + 1 == length(ls)) line else line + "\n");
	switch (expr) {
		FiVoid(__):  "discard";
		FiBool(b, __): wrap_ret(if (b) "true" else "false");
		FiInt(v, __):  wrap_ret(i2s(v));
		FiDouble(d, __): {
			s = d2s(d);
			wrap_ret(if (strIndexOf(s, ".") < 0 && strIndexOf(s, "e") < 0) s + ".0" else s);
		}
		FiString(s,__): wrap_ret("\"" + escapeStr(s) + "\"");
		FiVar(x,__,__): {
			wrap_ret(fiNimRenameKeyword(x));
		}
		FiLet(x, tp, e1, e2, __, __): {
			"let " + fiNimRenameKeyword(x) + ": " + fiType2NimType(env, tp) + " =" + 
			fi2nimMaybeIndent(fiNimCompile(env, e1, false)) + "\n" +
			fiNimCompile(env, e2, returns);
		}
		FiLambda(args, body, type, __): {
			wrap_ret(fiType2NimType(env, FiTypeFunction(type with args = args)) + " =" + 
				fi2nimSureIndent(fiNimCompile(env, body, true)));
		}
		FiCall(fn, es, __, __): {
			args = "(" + superglue(es, \e -> fiNimCompile(env, e, false), ", ") + ")";
			switch (fn) {
				FiVar(x, __, __): {
					n: Maybe<FiDeclaration> = lookupTree(env.prog.names.toplevel, x);
					typars = switch (n) {
						Some(decl): {
							fiMatchTyparsOrdered(decl.type, fiExpType(fn));
						}
						None(): [];
					}
					typars_str = if (length(typars) == 0) "" else {
						"[" + superglue(typars, \tp -> fiType2NimType(env, tp), ", ") + "]";
					}
					wrap_ret(fiNimRenameKeyword(x) + typars_str + args);
				}
				default: {
					wrap_ret("(" + fiNimCompile(env, fn, false) + ")" + args);
				}
			}
		}
		FiSeq(es, __, __): {
			if (length(es) == 0) "discard" else
			if (length(es) == 1) fiNimCompile(env, es[0], returns) else {
				concatStrings(add_newlines(mapi(es, \i, x -> {
					needs_discard = switch(x) {
						FiLet(__, __, __, __, __, __) : false;
						FiCallPrim(op, __, __, __) : {
							switch (op) {
								FcAssignPrim() : false;
								FcSetMutablePrim(__) : false;
								default: true;
							}
						}
						FiCall(__, __, tp, __): {
							switch (tp) {
								FiTypeVoid() : false;
								default : true;
							}
						}
						default: fiExpType(x) != FiTypeVoid();
					}
					last_returns = returns && i + 1 == length(es);
					x_code = fiNimCompile(env, x, last_returns);
					if (needs_discard && !last_returns) {
						"discard" + fi2nimMaybeIndent(x_code);
					} else {
						x_code;
					}
				})));
			}
		}
		FiIf(e1, e2, e3, __, __): {
			"if " + fiNimCompile(env, e1, false) + ":" + 
				fi2nimSureIndent(fiNimCompile(env, e2, returns)) + 
			"else:" + 
				fi2nimSureIndent(fiNimCompile(env, e3, returns));
		}
		FiSwitch(x, __, cs, __, __): {
			non_defcases = filter(cs, \c -> c.struct != "default");
			def_case = switch (find(cs, \c -> c.struct == "default")) {
				Some(dc): fi2nimMaybeIndent(fiNimCompile(env, dc.body, returns));
				None(): "assert(false,\"illegal struct id in switch\")";
			}
			"case cast[StructType](" + fiNimCompile(env, x, false) + ".id)" + "\n" +
			concatStrings(add_newlines(concat(
				map(non_defcases, \c -> "of st" + c.struct + ":" + fi2nimSureIndent(fiNimCompile(env, c.body, returns))),
				["else:" + fi2nimSureIndent(def_case)]
			)));
		}
		FiCallPrim(op, es, tp, __): {
			args = map(es, \arg : FiExp -> Pair(fiNimCompile(env, arg, false), fiExpType(arg)));
			opt = switch (op : FcPrim) {
				FcOrPrim():    "(" + args[0].first + " or " + args[1].first + ")";
				FcAndPrim():   "(" + args[0].first + " and " + args[1].first + ")";
				FcNotPrim():   "not " + args[0].first;
				FcEqPrim():    "(" + args[0].first + " == " + args[1].first + ")";
				FcNePrim():    "(" + args[0].first + " != " + args[1].first + ")";
				FcLePrim():    "(" + args[0].first + " <= " + args[1].first + ")";
				FcGePrim():    "(" + args[0].first + " >= " + args[1].first + ")";
				FcLtPrim():    "(" + args[0].first + " < "  + args[1].first + ")";
				FcGtPrim():    "(" + args[0].first + " > "  + args[1].first + ")";
				FcPlusPrim():  fiNimCompilePlus(env, args[0], " + ", args[1]);
				FcMinusPrim(): "(" + args[0].first + " - "  + args[1].first + ")";
				FcMulPrim():   "(" + args[0].first + " * "  + args[1].first + ")";
				FcDivPrim():   fiNimCompileDiv(env, args[0], " / ", args[1]);
				FcModPrim():   fiNimCompileDiv(env, args[0], " %% ", args[1]);
				FcNegPrim():  "-" + args[0].first;
				FcArrayPrim(): "@[" + strGlue(map(args, \e->e.first), ", ") + "]";
				FcIndexPrim(): args[0].first + "[" + args[1].first + "]";
				FcDerefPrim(): args[0].first;
				FcAssignPrim():	"(" + args[0].first + " = " + args[1].first + ")";
				FcRefPrim(): args[0].first;
				FcStructPrim(struct_name): {
					typars = fiNimParamsForInstantiate(env, cast(tp: FiType -> FiTypeName).typeparameters);
					"make_" + struct_name + typars + "(" + superglue(args, \p ->  p.first, ", ") + ")";
				};
				FcFieldPrim(name): {
					args[0].first +  "." + fiNimRenameKeyword(name)
				}
				FcSetMutablePrim(name): {
					"(" + args[0].first + "." + fiNimRenameKeyword(name) + "=" + args[1].first + ")";
				}
				FcCreateClosurePrim(__, __): fail0("TODO"); // should not happen - Nim does not use lambda lifting
                FcQuote(): fail0("TODO");
                FcUnquote(): fail0("TODO");
			};
			wrap_ret(opt);
		}
		FiCast(e, from, to, __, __): {
			e_code = fiNimCompile(env, e, false);
			def_cast = \-> "cast[" + fiType2NimType(env, to) + "](" + e_code + ")";
			structs = env.prog.names.structs;
			unions = env.prog.names.unions;
			cast_code = switch (from) {
				FiTypeName(from_name, from_typars): {
					switch (to) {
						FiTypeName(to_name, to_typars): {
							switch (lookupTree(structs, from_name)) {
								Some(from_struct): {
									switch (lookupTree(structs, to_name)) {
										Some(to_struct): {
											def_cast();
										}
										None(): {
											switch (lookupTree(unions, to_name)) {
												Some(to_union): {
													"Struct(" +  e_code + ")";
												}
												None(): {
													fail0(to_name + " type is not found");
												}
											}
										}
									}
								}
								None(): {
									switch (lookupTree(unions, from_name)) {
										Some(from_union): {
											switch (lookupTree(structs, to_name)) {
												Some(to_struct): {
													fiType2NimType(env, to) + "(" + e_code + ")";
												}
												None(): {
													e_code;
												}
											}
										}
										None(): {
											fail0(to_name + " type is not found");
										}
									}
								}
							}
						}
						default: def_cast();
					}
				}
				default: def_cast();
			}
			wrap_ret(cast_code);
		}
		default: "#!other!\n" + toString(expr);
	}
}

fiNimCompilePlus(env : FiNimEnv, arg1 : Pair<string, FiType>, op : string, arg2 : Pair<string, FiType>) {
	a1 = arg1.first;
	a2 = arg2.first;
	// Type checker ensures math types are equal, so we only need one type.
	isString = switch (arg1.second) {
		FiTypeString() : true;
		default : false;
	};
	"(" + (if (isString && (op == "+")) a1 + "&" + a2 else a1 + op + a2) + ")";
}

fiNimCompileDiv(env : FiNimEnv, arg1 : Pair<string, FiType>, op : string, arg2 : Pair<string, FiType>) {
	a1 = arg1.first;
	a2 = arg2.first;
	// Type checker ensures math types are equal, so we only need one type.
	isInt = switch (arg1.second) {
		FiTypeInt() : true;
		default : false;
	};
	"(" + (if (isInt && (op == " / ")) {
		a1 + " div " + a2
	} else if (isInt && (op == " %% ")) {
		a1 + " mod " + a2
	} else {
		a1 + op + a2
	}) + ")";
}

fi2nimStructIds(env : FiNimEnv) -> string {
	fiNimIndent + "StructType = enum\n" +
	strGlue(map(env.structs, \s -> fiNimIndent2 + "st" + s.name), ",\n") + "\n\n" 
}

fi2nimStructDef(env : FiNimEnv, struct : FiTypeStruct) -> string {
	typars = fiNimParamsForInstantiate(env, struct.typars);
	fields = if (length(struct.args) == 0) "" else
	"\n" + superglue(struct.args, \arg -> fiNimIndent2 + fiNimRenameKeyword(arg.name) + ": " + fiType2NimType(env, arg.type), "\n");
	struct_type = struct.name + typars;
	fiNimIndent + struct_type + " = ref object of Struct" + fields + "\n\n";
}

fi2nimUnionDef(env : FiNimEnv, union : FiTypeUnion) -> string {
	typars = fiNimParamsForInstantiate(env, union.typeparameters);
	fiNimIndent + union.name + typars + " = ref object of Struct\n\n";
}

fi2nimStructFuncs(env : FiNimEnv, struct : FiTypeStruct) -> string {
	typars = fiNimParamsForInstantiate(env, struct.typars);
	struct_type = struct.name + typars;
	check_struct_in = \tp_arr -> exists(tp_arr, \tp -> switch (tp) {
		FiTypeName(nm,__): nm == struct.name || true;
		default: false;
	});

	// to_flow
	to_flow = //if (!check_struct_in(env.casts_to_flow_from)) "" else {
		"proc rt_to_flow" + typars + "(x: " + struct_type  + "): Flow =\n" +
		fiNimIndent + "Flow(tp: rtStruct, " + 
		"idStruct: cast[int](" + "st" + struct.name + "), " +
		"nameStruct: \"" + struct.name + "\", " +
		"valFields: @[" + superglue(struct.args, \arg -> "rt_to_flow(x." + arg.name + ")", ", ") + 
		"])\n\n";
	//}

	// to_string
	//if (!check_struct_in(env.casts_to_string_from)) "" else {
		to_string_args = if (length(struct.args) == 0) "()" else {
			"(\" & " + superglue(struct.args, \arg -> "rt_to_string(x." + arg.name + ")", " & \", \" & ") + " & \")";
		} 
		to_string = "proc rt_to_string" + typars + "(x: " + struct_type  + "): string =\n" +
		fiNimIndent + "\"" + struct.name + to_string_args + "\"\n\n";
	//}

	// make_struct
	make_args = concat(["id: cast[int](st" + struct.name + ")"], mapi(struct.args, \i, arg -> arg.name + ": a_" + i2s(i)));
	make_struct = "proc make_" + struct_type + "(" + supergluei(struct.args, \i, arg -> "a_" + i2s(i) + ": " + fiType2NimType(env, arg.type), ", ")  + "): " + struct_type + " =\n" +
	fiNimIndent + struct_type + "(" + strGlue(make_args, ", ") + ")\n\n";

	concatStrings([to_flow, to_string, make_struct]);
}
