import tools/flowc/backends/common;
import tools/flowc/backends/nim/fi2nim_utils;
import tools/flowc/backends/nim/fi2nim_code;
import string_utils;

export {
	fi2nimRuntime(cfg : FiNimConfig) -> string;
	fi2nimNatives(cfg : FiNimConfig) -> Tree<string, NimNative>;
	fi2nimAssemble(cfg : FiNimConfig, content : NimCode) -> void;
}

fi2nimRuntime(cfg : FiNimConfig) -> string {
	switch(find(cfg.backendDirs, \dir -> fileExists(pathCombine(dir, "runtime.nim")))) {
		Some(runtime_dir): {
			getFileContent(pathCombine(runtime_dir, "runtime.nim"));
		}
		None(): {
			fcPrintln("Can't find nim runtime file. Please set the 'nim-dirs' option with a path, containing 'runtime.nim'", cfg.threadId);
			""
		}
	}
}

fi2nimNatives(cfg : FiNimConfig) -> Tree<string, NimNative> {
	native_files = fold(cfg.backendDirs, [], \acc, dir -> 
		fi2nimFindAllNativeFiles(pathCombine(dir, "natives"), acc)
	);
	fold(native_files, makeTree(), \acc, path ->
		if (!fileExists(path)) {
			fcPrintln("runtime natives file: " + path + " is not found", cfg.threadId);
			acc;
		} else {
			src = getFileContent(path);
			lines = strSplit(src, "\n");
			imports = filter(lines, fi2nimIsImportLine);
			proc_decl = find(lines, \line0 -> {
				line = rtrim(line0);
				(startsWith(line, "proc") || startsWith(line, "func")) && endsWith(line, "=");
			});
			code_lines = filter(lines, \line -> !fi2nimIsImportLine(line));
			name = changeFileExt(fileNameOnly(path), "");
			code = fi2nimMakeNimBlock(0, concat3(["# native function " + name], code_lines, [""]));
			decl = eitherMap(proc_decl, \decl -> rtrim2(decl, "= "), "");
			nim_native = NimNative(name, imports, 
				NimCompiled(NimLine(0, decl), code)
			);
			setTree(acc, name, nim_native);
		}
	);
}

fi2nimFindAllNativeFiles(dir: string, acc: [string]) -> [string] {
	fold(readDirectory(dir), acc, \ac, file -> {
		path = pathCombine(dir, file);
		if (isDirectory(path)) {
			fi2nimFindAllNativeFiles(path, ac);
		} else if (endsWith(file, ".nim")) {
			concat(ac, [path]); 
		} else {
			ac;
		}
	});
}

fi2nimAssemble(cfg : FiNimConfig, content : NimCode) -> void {
	saveFileContent(cfg.outputfile, fi2nimNimCode2s(content, "  "), cfg.threadId);
}
