import tools/flowc/backends/nim/fi2nim_utils;
import tools/flowc/incremental/fi_helpers2;
import string_utils;

export {
	fi2nimTypeEnums(env : FiNimEnv) -> string;
	fi2nimStructDecl(env : FiNimEnv, struct : FiTypeStruct) -> string;
	fi2nimStructRegister(env : FiNimEnv, struct : FiTypeStruct) -> string;
	fi2nimUnionDecl(env : FiNimEnv, union : FiTypeUnion) -> string;

	fi2nimTypeToFlow(env : FiNimEnv, t: FiType) -> Maybe<NimCompiled>;
	fi2nimTypeFromFlow(env : FiNimEnv, t: FiType) -> Maybe<NimCompiled>;
	fi2nimTypeToString(env : FiNimEnv, t: FiType) -> Maybe<NimCompiled>;
	fi2nimStructMake(env : FiNimEnv, struct : FiTypeStruct) -> NimCompiled;

	fi2nimStructFuncs(env : FiNimEnv, struct : FiTypeStruct) -> [NimCompiled];
	fi2nimUnionFuncs(env : FiNimEnv, union: FiTypeUnion) -> [NimCompiled];
	fi2nimFuncTypeFuncs(env : FiNimEnv, func: FiTypeFunction) -> [NimCompiled];

	fi2nimInitTypeIndexes(env : FiNimEnv, debug_nim_type_ids: bool) -> FiNimEnv;
	fi2nimRegisterTypes(env : FiNimEnv) -> string;
}

fi2nimTypeEnums(env : FiNimEnv) -> string {
	structs_enum = if (length(env.structs) == 0) "" else {
		fiNimIndent + "# All structs, used in program \n" +
		fiNimIndent + "StructType = enum\n" +
		supergluei(env.structs, \i, s ->
			fiNimIndent2 + fi2nimStructId(env, s) + (if (i + 1 == length(env.structs)) "" else "," ) + " # " + i2s(i), "\n"
		) + "\n\n";
	}
	types_enum = if (length(env.ordered_types) == 0) "" else {
		fiNimIndent + "# All types, used in program\n" +
		fiNimIndent + "ProgType = enum\n" +
		supergluei(env.ordered_types, \i, tp ->
			fiNimIndent2 + fi2nimTypeId(env, tp) + (if (i + 1 == length(env.ordered_types)) "" else "," ) + " # " + i2s(i)  + " = " + pretFiType(tp), "\n"
		) + "\n\n";
	}
	structs_enum + types_enum;
}

fi2nimStructDecl(env : FiNimEnv, struct : FiTypeStruct) -> string {
	typars = fiNimParamsForInstantiate(env, struct.typars);
	fields = if (length(struct.args) == 0) "" else
	"\n" + superglue(struct.args, \arg -> fiNimIndent2 + fiNimRenameKeyword(arg.name) + ": " + fiNimCompileType(env, arg.type), "\n");
	struct_type = struct.name + typars;
	fiNimIndent + struct_type + " = ref object of Struct" + fields + "\n\n";
}

fi2nimUnionDecl(env : FiNimEnv, union : FiTypeUnion) -> string {
	kinds = fiNimIndent + "Uk_" + union.name + " = enum\n" + superglue(union.typenames,
		\tn -> fiNimIndent2 + "st_" + tn.name, ",\n"
	) + "\n";
	union_def = fiNimIndent + union.name + fiNimParamsForInstantiate(env, union.typeparameters) + " = ref object of Struct\n" +
		fiNimIndent2 + "case kind: Uk_" + union.name + "\n" +
		superglue(union.typenames,
			\tn -> fiNimIndent2 + "of st_" + tn.name + ": " +
				"ust_" + tn.name + ": " + fiNimCompileType(env, tn),
			"\n"
		);
	kinds + union_def + "\n\n";
}

fi2nimStructRegister(env : FiNimEnv, struct : FiTypeStruct) -> string {
	"rt_register_struct(\"" + struct.name  + "\", @[" + superglue(struct.args, \arg -> "\"" + arg.name + "\"", ", ") + "])\n"
}

fi2nimTypeToFlow(env : FiNimEnv, t: FiType) -> Maybe<NimCompiled> {
	decl = "proc rt_to_flow(x: " + fiNimCompileType(env, t) + "): Flow";
	switch (t) {
		FiTypeRef(__): {
			Some(NimCompiled(decl,
				decl + " = Flow(" + "tp: rtRef, " + "ref_v: rt_to_flow(x.val))\n"
			));
		}
		FiTypeArray(__): {
			Some(NimCompiled(decl,
				decl + " = Flow(" + "tp: rtArray, " + "array_v: map(x, rt_to_flow))\n"
			));
		}
		FiTypeFunction(args,__): {
			Some(NimCompiled(decl,
				decl + " =\n" +
				fiNimIndent + "Flow(" +
					"tp: rtFunc, " +
					"func_v: proc(y: seq[Flow]): Flow = rt_to_flow(x(" +
					supergluei(args, \i, arg -> "rt_to_" + fi2nimMangleComplexType(arg.type) + "(y[" + i2s(i) + "])", ", ") +
				")))\n\n"
			));
		}
		FiTypeName(nm, tps): {
			fiMapTypeName(t, env.prog.names, 
				\struct -> {
					typars = fiNimParamsForInstantiate(env, struct.typars);
					struct_type = struct.name + typars;
					to_flow_decl = "proc rt_to_flow(x: " + struct_type + "): Flow";
					Some(NimCompiled(
						to_flow_decl,
						to_flow_decl + " =\n" +
						fiNimIndent + "Flow(" +
							"tp: rtStruct, " +
							"str_id: x.id, " + 
							"str_name: \"" + struct.name + "\", " + 
							"str_args: @[" + superglue(struct.args, \arg -> "rt_to_flow(x." + fiNimRenameKeyword(arg.name) + ")", ", ") + "]" +
						")\n\n"
					));
				},
				\union -> {
					typars = fiNimParamsForInstantiate(env, union.typeparameters);
					union_type = union.name + typars;
					to_flow_decl = "proc rt_to_flow(x: " + union_type + "): Flow";
					Some(NimCompiled(
						to_flow_decl,
						to_flow_decl + " =\n" +
							fiNimIndent + "case x.kind:\n" +
							superglue(union.typenames, 
								\tn -> fiNimIndent + "of st_" + tn.name + ": " + 
									"rt_to_flow(x.ust_" + tn.name + ")", "\n"
							) + 
							"\n\n"
					));
				},
				\__ -> fail0("unknown struct or union: " + nm)
			);
		}
		FiTypeParameter(__): fail0("FiTypeParameter must not occur in complete specialization in nim: " + pretFiType(t));
		default: None();
	}
}

fi2nimTypeFromFlow(env : FiNimEnv, t: FiType) -> Maybe<NimCompiled> {
	decl = "proc rt_to_" + fi2nimMangleType(t) + "(x: Flow): " + fiNimCompileReturnType(env, t);
	switch (t) {
		FiTypeRef(rt): {
			Some(NimCompiled(decl,
				decl + " = Ref[" + fiNimCompileType(env, rt) + "](val: rt_to_" + fi2nimMangleComplexType(rt) + "(x.ref_v))\n"
			));
		}
		FiTypeArray(at): {
			Some(NimCompiled(decl,
				decl + " = map(x.array_v, " + "rt_to_" + fi2nimMangleComplexType(at) + ")\n"
			));
		}
		FiTypeFunction(args, returnType): {
			Some(NimCompiled(decl,
				decl + " =\n" +
				fiNimIndent + "return proc(" + 
					supergluei(args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ") + 
				"): " + fiNimCompileType(env, returnType) + " =\n" +
					fiNimIndent2 + "rt_to_" + fi2nimMangleComplexType(returnType) + "(x.func_v(@[" +
						supergluei(args, \i,__ -> "rt_to_flow(a_" + i2s(i) + ")", ", ") +
					"]))\n\n"
			));
		}
		FiTypeName(nm, tps): {
			fiMapTypeName(t, env.prog.names, 
				\struct -> {
					Some(NimCompiled(decl,
						decl + " =\n" +
						fiNimIndent + "return " + fiNimCompileType(env, t) + "(id: int32(" + fi2nimTypeId(env, t) + "), " +
							supergluei(struct.args, \i, arg -> fiNimRenameKeyword(arg.name) + ": rt_to_" + fi2nimMangleComplexType(arg.type) + "(x.str_args[" + i2s(i) + "])", ", ") + 
						")\n\n"
					));
				},
				\union -> {
					Some(NimCompiled(decl,
						decl + " =\n" +
						fiNimIndent + "case Uk_" + union.name + "(x.str_id):\n" +
						superglue(union.typenames, 
							\tn -> fiNimIndent + "of st_" + tn.name + ": " + 
								fiNimCompileType(env, t) + "(kind: st_" + tn.name + ", " + 
									"ust_" + tn.name + ": rt_to_" + fi2nimMangleType(tn) + "(x)" + ")", "\n"
						) + 
						"\n\n"
					));
				},
				\__ -> fail0("unknown struct or union: " + nm)
			);
		}
		FiTypeParameter(__): fail0("FiTypeParameter must not occur in complete specialization in nim: " + pretFiType(t));
		default: None();
	}
}

fi2nimTypeToString(env : FiNimEnv, t: FiType) -> Maybe<NimCompiled> {
	decl = "proc rt_to_string(x: " + fiNimCompileType(env, t) + "): string";
	switch (t) {
		FiTypeRef(rt): {
			Some(NimCompiled(decl,
				decl + " = \"ref \" & rt_to_string(x.val)\n"
			));
		}
		FiTypeArray(at): {
			Some(NimCompiled(decl,
				decl + " = \"[\" & map(x, rt_to_string).join(\", \") & \"]\" \n"
			));
		}
		FiTypeFunction(args, returnType): {
			Some(NimCompiled(decl,
				 decl + " = \"<function>\"\n"
			));
		}
		FiTypeName(nm, tps): {
			fiMapTypeName(t, env.prog.names, 
				\struct -> {
					Some(NimCompiled(decl,
						decl + " =\n" +
						fiNimIndent + "\"" + struct.name + "(\"" + 
							concatStrings(map(struct.args, \arg -> " & rt_to_string(x." + fiNimRenameKeyword(arg.name) + ")")) + " & \")\"" + 
						"\n\n"
					));
				},
				\union -> {
					Some(NimCompiled(decl,
						decl + " =\n" +
						fiNimIndent + "case x.kind:\n" +
						superglue(union.typenames, 
							\tn -> fiNimIndent + "of st_" + tn.name + ": " + 
								"rt_to_string(x)", "\n"
						) + "\n\n"
					));
				},
				\__ -> fail0("unknown struct or union: " + nm)
			);
		}
		FiTypeParameter(__): fail0("FiTypeParameter must not occur in complete specialization in nim: " + pretFiType(t));
		default: None();
	}
}

/*
fi2nimType2Make(env : FiNimEnv, t : FiType) -> Maybe<NimCompiled>{
	switch (t) {
		FiTypeRef(rt): {
			decl = "proc rt_make_" + fi2nimMangleType(t) + "(v: " + fiNimCompileType(env, rt) + "): " + fiNimCompileType(env, t);
			Some(NimCompiled(decl,
				decl + " = " + fiNimCompileType(env, t) + "(val: x)\n"
			));
		}
		FiTypeArray(at): {
			decl = "proc rt_make_" + fi2nimMangleType(t) + "(v: @[" + fiNimCompileType(env, at) + "]): " + fiNimCompileType(env, t);
			Some(NimCompiled(decl,
				decl + " = v\n"
			));
		}
		FiTypeFunction(args, returnType): {
			// No need to make a function like this
			None();
		}
		FiTypeName(nm, tps): {
			fiMapTypeName(t, env.prog.names, 
				\struct -> {
					decl = "proc rt_make_" + fi2nimMangleType(t) + "(" + 
						supergluei(struct.args, \i, arg -> fiNimRenameKeyword(arg.name) + ": " + fiNimCompileType(env, arg.type), ", ") + 
					"): " + fiNimCompileType(env, t);
					Some(NimCompiled(decl,
						decl + " =\n" +
						fiNimIndent + fiNimCompileType(env, t) + "(" + 
							concatStrings(map(struct.args, \arg -> " & rt_to_string(x." + fiNimRenameKeyword(arg.name) + ")")) + " & \")\"" + 
						"\n\n"
					));
				},
				\union -> {
					Some(NimCompiled(decl,
						decl + " =\n" +
						fiNimIndent + "case x.kind:\n" +
						superglue(union.typenames, 
							\tn -> fiNimIndent + "of st_" + tn.name + ": " + 
								"rt_to_string(x)", "\n"
						) + "\n\n"
					));
				},
				\__ -> fail0("unknown struct or union: " + nm)
			);
		}
		FiTypeParameter(__): fail0("FiTypeParameter must not occur in complete specialization in nim: " + pretFiType(t));
		default: None();
	}


	typars = fiNimParamsForInstantiate(env, struct.typars);
	struct_type = struct.name + typars;
	specs = set2array(lookupTreeDef(env.specializations, struct.name, makeSet()));
	// make struct
	// rt_struct_id function overloads
	struct_ids = map(specs, \spec ->
		switch (spec) {
			FiTypeName(nm, spec_typars): {
				spec_struct = fiTypeName2Struct(spec, env.prog.names);
				"proc rt_struct_id_" + nm + "(" + 
					supergluei(spec_struct.args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ") + 
				"): int32 = " + "cast[int32](" + fi2nimTypeId(env, spec) + ") # " + pretFiType(spec) + "\n";
			}
			default: fail0("struct specialization must be FiTypeName");
		}
	);

	// struct_id
	struct_id = \x -> if (length(specs) == 0) {
		"int32(" + fi2nimTypeId(env, FiTypeName(struct.name, struct.typars)) + ")";
	} else {
		"rt_struct_id_" + struct.name + "(" + 
			supergluei(struct.args, \i, arg -> 
				if (x) "a_" + i2s(i) else "x." + fiNimRenameKeyword(arg.name), ", "
			) + 
		")";
	}
	make_args = concat(["id: " + struct_id(true)], mapi(struct.args, \i, arg -> fiNimRenameKeyword(arg.name) + ": a_" + i2s(i)));
	decl = "proc make_" + struct_type + "(" + 
		supergluei(struct.args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ")  + 
	"): " + struct_type;	
	NimCompiled(decl,
		concatStrings(struct_ids) + decl + " = " + struct_type + "(" + strGlue(make_args, ", ") + ")\n\n"
	);
}
*/
fi2nimStructMake(env : FiNimEnv, struct : FiTypeStruct) -> NimCompiled {
	typars = fiNimParamsForInstantiate(env, struct.typars);
	struct_type = struct.name + typars;
	specs = set2array(lookupTreeDef(env.specializations, struct.name, makeSet()));
	// make struct
	// rt_struct_id function overloads
	struct_ids = map(specs, \spec ->
		switch (spec) {
			FiTypeName(nm, spec_typars): {
				spec_struct = fiTypeName2Struct(spec, env.prog.names);
				"proc rt_struct_id_" + nm + "(" + 
					supergluei(spec_struct.args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ") + 
				"): int32 = " + "cast[int32](" + fi2nimTypeId(env, spec) + ") # " + pretFiType(spec) + "\n";
			}
			default: fail0("struct specialization must be FiTypeName");
		}
	);

	// struct_id
	struct_id = \x -> if (length(specs) == 0) {
		"int32(" + fi2nimTypeId(env, FiTypeName(struct.name, struct.typars)) + ")";
	} else {
		"rt_struct_id_" + struct.name + "(" + 
			supergluei(struct.args, \i, arg -> 
				if (x) "a_" + i2s(i) else "x." + fiNimRenameKeyword(arg.name), ", "
			) + 
		")";
	}
	make_args = concat(["id: " + struct_id(true)], mapi(struct.args, \i, arg -> fiNimRenameKeyword(arg.name) + ": a_" + i2s(i)));
	decl = "proc make_" + struct_type + "(" + 
		supergluei(struct.args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ")  + 
	"): " + struct_type;	
	NimCompiled(decl,
		concatStrings(struct_ids) + decl + " = " + struct_type + "(" + strGlue(make_args, ", ") + ")\n\n"
	);
}

fi2nimStructFuncs(env : FiNimEnv, struct : FiTypeStruct) -> [NimCompiled] {
	typars = fiNimParamsForInstantiate(env, struct.typars);
	struct_type = struct.name + typars;
	specs = set2array(lookupTreeDef(env.specializations, struct.name, makeSet()));

	// to_flow
	to_flow_decl = "proc rt_to_flow" + typars + "(x: " + struct_type + "): Flow";
	to_flow_def = to_flow_decl + " =\n" +
		fiNimIndent + "Flow(" +
			"tp: rtStruct, " +
			"str_id: x.id, " + 
			"str_name: \"" + struct.name + "\", " + 
			"str_args: @[" + superglue(struct.args, \arg ->
				"rt_to_flow" + fiNimTypeParamsList(env, arg.type) + "(x." + fiNimRenameKeyword(arg.name) + ")", 
				", "
			) + "]" + 
		")\n\n";

	// from_flow
	from_flows = map(specs, \spec -> 
		switch (spec) {
			FiTypeName(nm, spec_typars): {
				spec_struct = fiTypeName2Struct(spec, env.prog.names);
				from_decl = "proc rt_to_" + fi2nimMangleType(spec) + "(x: Flow): " + fiNimCompileType(env, spec);
				from_def = from_decl + " =\n" +
				fiNimIndent + "return " + fiNimCompileType(env, spec) + "(id: int32(" + fi2nimTypeId(env, spec) + "), " +
					supergluei(spec_struct.args, \i, arg ->fiNimRenameKeyword(arg.name) + ": rt_to_" + fi2nimMangleType(arg.type) + "(x.str_args[" + i2s(i) + "])", ", ") + 
				")\n\n";
				NimCompiled(from_decl, from_def);
			}
			default: fail0("struct specialization must be FiTypeName");
		}
	);

	// to_string
	to_string_decl = "proc rt_to_string" + typars + "(x: " + struct_type + "): string"; 
	to_string_def = to_string_decl + " =\n" +
		fiNimIndent + "\"" + struct.name + "(\"" + 
			concatStrings(map(struct.args, \arg -> " & rt_to_string" + fiNimTypeParamsList(env, arg.type) + "(x." + fiNimRenameKeyword(arg.name) + ")"))+ " & \")\"" + 
		"\n\n";

	// make struct
	// rt_struct_id function overloads
	struct_ids = map(specs, \spec ->
		switch (spec) {
			FiTypeName(nm, spec_typars): {
				spec_struct = fiTypeName2Struct(spec, env.prog.names);
				"proc rt_struct_id_" + nm + "(" + 
					supergluei(spec_struct.args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ") + 
				"): int32 = " + "cast[int32](" + fi2nimTypeId(env, spec) + ") # " + pretFiType(spec) + "\n";
			}
			default: fail0("struct specialization must be FiTypeName");
		}
	);

	// struct_id
	struct_id = \x -> if (length(specs) == 0) {
		"int32(" + fi2nimTypeId(env, FiTypeName(struct.name, struct.typars)) + ")";
	} else {
		"rt_struct_id_" + struct.name + "(" + 
			supergluei(struct.args, \i, arg -> 
				if (x) "a_" + i2s(i) else "x." + fiNimRenameKeyword(arg.name), ", "
			) + 
		")";
	}
	make_args = concat(["id: " + struct_id(true)], mapi(struct.args, \i, arg -> fiNimRenameKeyword(arg.name) + ": a_" + i2s(i)));
	make_struct_decl = "proc make_" + struct_type + "(" + 
		supergluei(struct.args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ")  + 
	"): " + struct_type;
	make_struct_def = concatStrings(struct_ids) + make_struct_decl + " =\n" +
	fiNimIndent + struct_type + "(" + strGlue(make_args, ", ") + ")\n\n";

	concat([
		NimCompiled(to_flow_decl, to_flow_def),
		NimCompiled(to_string_decl, to_string_def),
		NimCompiled(make_struct_decl, make_struct_def),
	], from_flows);
}

fi2nimUnionFuncs(env : FiNimEnv, union: FiTypeUnion) -> [NimCompiled] {
	typars = fiNimParamsForInstantiate(env, union.typeparameters);
	union_type = union.name + typars;

	make_cases = \fn -> superglue(union.typenames, 
		\tn -> fiNimIndent + "of " + fi2nimTypeId(env, tn) + ": " + 
			fn + fiNimParamsForInstantiate(env, tn.typeparameters) + "(x)", "\n"
	);
	to_flow_decl = "proc rt_to_flow" + typars + "(x: " + union_type + "): Flow";
	to_flow_def = to_flow_decl + " =\n" +
		fiNimIndent + "case x.kind:\n" +
		make_cases("rt_to_flow") + "\n\n";

	from_flow_decl = "proc rt_to_" + fi2nimMangleType(FiTypeName(union.name, union.typeparameters)) + typars + "(x: Flow): " + union_type;
	from_flow_def = from_flow_decl + " =\n" +
		fiNimIndent + "case x.str_id:\n" +
		superglue(union.typenames, 
			\tn -> fiNimIndent + "of " + fi2nimTypeId(env, tn) + ": " + 
				"rt_to_" + tn.name + fiNimParamsForInstantiate(env, tn.typeparameters) + "(x)", "\n"
		) + 
		"\n\n";

	to_string_decl = "proc rt_to_string" + typars + "(x: " + union_type + "): string";
	to_string_def = to_string_decl + " =\n" +
		fiNimIndent + "case x.kind:\n" +
		make_cases("rt_to_string") + "\n\n";

	[
		NimCompiled(to_flow_decl, to_flow_def),
		NimCompiled(from_flow_decl, from_flow_def),
		NimCompiled(to_string_decl, to_string_def)
	];
}

fi2nimFuncTypeFuncs(env : FiNimEnv, func: FiTypeFunction) -> [NimCompiled] {
	typars = fiNimTypeParamsList(env, func);
	func_type = fiNimCompileType(env, func);

	to_flow_decl = "proc rt_to_flow" + typars + "(fn: " + func_type + "): Flow";
	to_flow_def = to_flow_decl + " =\n" +
		fiNimIndent + "Flow(" +
			"tp: rtFunc, " +
			"func_v: proc(x: seq[Flow]): Flow = rt_to_flow(fn(" + supergluei(func.args, \i, arg ->
			"rt_to_" + fi2nimMangleType(arg.type) + "(x[" + i2s(i) + "])", ", ") +  
		")\n\n";

	from_flow_decl = "proc rt_to_" + fi2nimMangleType(func) + fiNimTypeParamsList(env, func) + "(fn: Flow): " + func_type;
	from_flow_def = from_flow_decl + " =\n" +
		fiNimIndent + "proc(" + 
			supergluei(func.args, \i, arg -> "a_" + i2s(i) + ": " + fiNimCompileType(env, arg.type), ", ") + 
		"): " + fiNimCompileType(env, func.returnType) + " =\n" +
			fiNimIndent2 + "rt_to_" + fi2nimMangleType(func.returnType) + "(x.func_v(" +
				supergluei(func.args, \i,__ -> "rt_to_flow(a_" + i2s(i) + ")", ", ") +
			"))\n\n";

	to_string_decl = "proc rt_to_string" + typars + "(fn: " + func_type + "): string";
	to_string_def = to_string_decl + " = \"<function>\"\n\n";

	[
		NimCompiled(to_flow_decl, to_flow_def),
		NimCompiled(from_flow_decl, from_flow_def),
		NimCompiled(to_string_decl, to_string_def)
	];
}

fi2nim_basic_types = [
	FiTypeVoid(), 
	FiTypeBool(), 
	FiTypeInt(), 
	FiTypeDouble(), 
	FiTypeString(), 
	FiTypeNative(), 
	FiTypeFlow()
];

fi2nimType2RtType(env : FiNimEnv, tp: FiType, type_index: Tree<FiType, int>, struct_index: Tree<string, int>) -> string {
	type_ind = \t0 -> {
		t = fiPurifyType(t0);
		err = \msg -> fail0(msg + " subtype " + pretFiType(t) + " of " + pretFiType(tp) + " is not found in index");
		switch (lookupTree(type_index, t)) {
			Some(ind): i2s(ind) + "i32";
			None(): {
				switch (t) {
					FiTypeName(nm,__): {
						fiMapTypeName(t, env.prog.names, 
							\struct -> {
								err("(struct?): " + pretFiStructOrUnion(struct));
							},
							\union -> {
								switch (lookupTree(type_index, FiTypeName("Struct", []))) {
									Some(ind): i2s(ind) + "i32";
									None(): {
										err("(union?): " + pretFiStructOrUnion(union));
									}
								}
							},
							\tn -> {
								err("(typename?): " + pretFiType(t));
							}
						);
					}
					default: err("(unknown?): " + pretFiType(t));
				}
			}
		}
	}
	struct_ind = \nm -> {
		switch (lookupTree(struct_index, nm)) {
			Some(ind): i2s(ind) + "i32";
			None(): fail0("struct " + nm + " is not found in index");
		}
	}
	p = switch (tp) {
		FiTypeVoid():    Triple("ctVoid", [], "void");
		FiTypeBool():    Triple("ctBool", [], "bool");
		FiTypeInt():     Triple("ctInt", [], "int");
		FiTypeDouble():  Triple("ctDouble", [], "double");
		FiTypeString():  Triple("ctString", [], "string");
		FiTypeNative():  Triple("ctNative", [], "native");
		FiTypeFlow():    Triple("ctFlow", [], "flow");
		FiTypeRef(rt):   Triple("ctRef", [type_ind(rt)], "");
		FiTypeArray(at): Triple("ctArray", [type_ind(at)], "");
		FiTypeFunction(as, rt): {
			Triple("ctFunc", concat([type_ind(rt)], map(as, \arg -> type_ind(arg.type))),"");
		}
		FiTypeName(nm, tps): {
			fiMapTypeName(tp, env.prog.names, 
				\struct -> Triple("ctStruct", concat([struct_ind(nm)], map(struct.args, \arg -> type_ind(arg.type))), nm),
				\union -> Triple("ctUnion", map(union.typenames, type_ind), nm),
				\__ -> fail0("unknown struct or union: " + nm)
				//Triple("ctStruct", [], "Struct"),
			);
		}
		FiTypeParameter(__): fail0("FiTypeParameter must not occur in complete specialization in nim: " + pretFiType(tp));
	}
	"(" + p.first + ", @[" + strGlue(p.second, ", ") + "], \"" + p.third + "\")";
}

fi2nimOrderTypes(types0: [FiType]) -> [FiType] {
	types = filter(types0, \tp -> !exists(fi2nim_basic_types, \x -> fiEqualTypes(x, tp)));
	fi2nimDoOrderTypes(types, fi2nim_basic_types);
}

fi2nimDoOrderTypes(types: [FiType], acc: [FiType]) -> [FiType] {
	if (length(types) == 0) acc else {
		p = unzip(types, \tp -> {
			subterms = set2array(fiTypeSubterms(tp, true));
			forall(subterms, \st -> exists(acc, \x -> fiEqualTypes(x, st)));
		});
		if (length(p.first) == 0) {
			println("types:\n" +
				strIndent(concatStrings(map(types, \t -> "\t" + prettyFiType(dummyPretty, t, makeSet()) + "\n"))) + "\n"
				"acc:\n" + 
				strIndent(concatStrings(map(acc, \t -> "\t" + prettyFiType(dummyPretty, t, makeSet()) + "\n"))) + "\n" 
			);
			fail("cyclic dependency in a set of types - is impossible");
		}
		fi2nimDoOrderTypes(p.second, concat(acc, p.first));
	}
}

fi2nimAddTypenameSubterms(type: FiType, acc: Set<FiType>, names: FiGlobalNames) -> Set<FiType> {
	if (containsSet(acc, type)) acc else {
		acc1 = insertSet(acc, type);
		switch (type) {
			FiTypeName(name, typars): {
				if (name == "Struct") {
					// Special case: universal struct, which represents all structs (thus universal union)
					acc1;
				} else {
					fiMapTypeName(type, names,
						\struct -> fold(struct.args, acc1, \ac, arg -> {
							arg_type = fiPurifyType(arg.type);
							foldSet(fiTypeSubterms(arg_type, false), ac, \a, st ->
								fi2nimAddTypenameSubterms(st, a, names)
							)
						}), 
						\union -> {
							//println("observing union: " + pretFiStructOrUnion(union) + ", type: " + pretFiType(type));
							//println("acc before:\n" + strIndent(superglue(set2array(acc), pretFiType, "\n")));
							ret = fold(union.typenames, acc1, \ac, tn ->
								fi2nimAddTypenameSubterms(tn, ac, names)
							);
							//println("acc after:\n" + strIndent(superglue(set2array(ret), pretFiType, "\n")));
							ret;
						},
						\tn -> fail0("typename " + tn.name + " is not found")
					);
				}
			}
			default: acc1;
		}
	}
}

fi2nimInitTypeIndexes(env : FiNimEnv, debug_nim_type_ids: bool) -> FiNimEnv {
	spec_structs = map(env.specializedStructs, \s -> FiTypeName(s.name, s.typars));
	all_subterms = set2array(fold(spec_structs, makeSet(), \acc, s -> mergeSets(acc, fiTypeSubterms(s, false))));
	if (debug_nim_type_ids) {
		println("all_subterms:\n" +
			concatStrings(map(all_subterms, \t -> "\t" + pretFiType(t) + "\n"))
		);
	}
	//all_types = concat([FiTypeName("Struct", [])], all_subterms);
	all_types = all_subterms;
	if (debug_nim_type_ids) {
		println("all_types:\n" +
			concatStrings(map(all_types, \t -> "\t" + pretFiType(t) + "\n"))
		);
	}
	complete_types = fold(all_types, makeSet(), \acc, tp ->
		fi2nimAddTypenameSubterms(tp, acc, env.prog.names)
	);
	if (debug_nim_type_ids) {
		println("complete_types:\n" +
			concatStrings(map(set2array(complete_types), \t -> "\t" + pretFiType(t) + "\n"))
		);
	}
	ordered_types = fi2nimOrderTypes(set2array(complete_types));
	if (debug_nim_type_ids) {
		println("ordered_types:\n" +
			concatStrings(mapi(ordered_types, \i, t -> "\t" + i2s(i) + ": " + pretFiType(t) + "\n"))
		);
	}
	type_index = foldi(ordered_types, makeTree(), \i, acc, tp -> setTree(acc, tp, i));
	struct_index = foldi(env.structs, makeTree(), \i, acc, s -> setTree(acc, s.name, i));
	FiNimEnv(env with
		ordered_types = ordered_types,
		type_index = type_index,
		struct_index = struct_index
	);
}

fi2nimRegisterTypes(env : FiNimEnv) -> string {
	supergluei(env.ordered_types, 
		\i, tp -> "rt_register_type(" + fi2nimType2RtType(env, tp, env.type_index, env.struct_index) + ") # " + i2s(i) + ": " + pretFiType(tp), 
		"\n"
	) + "\n\n";
}
