import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/common;

export {
	fiNimIndent = "  ";
	fiNimIndent2 = fiNimIndent + fiNimIndent;
	fiNimIndent3 = fiNimIndent2 + fiNimIndent;

	FiNimExp ::= FiExp, FiDiscard;
	FiDiscard(exp : Maybe<FiExp>);
	nimProcDefinition : ref List<string> = ref makeList();

	nimKeywordSet = fold(
		[
			"addr", "and", "array", "as",
			"asm", "atomic", "bind",
			"block", "break", "case",
			"cast", "concept", "const",
			"continue", "converter", "defer",
			"discard", "distinct", "div",
			"do", "elif", "else", "end",
			"enum", "except", "export", "finally",
			"for", "from","func", "generic",
			"if", "import", "in", "include",
			"interface", "is", "isnot", "iterator",
			"len", "let", "macro", "method", "mixin",
			"mod", "nil", "not", "notin",
			"object", "of", "or", "out",
			"proc", "ptr", "raise", "ref", "result",
			"return", "shl", "shr", "static",
			"template", "try", "tuple", "type",
			"using", "var", "when", "while",
			"with", "without", "xor", "yield"
		],

		makeSet(),
		insertSet
	);

	// Nim backend used to make compiler faster.
	// Some functions are difficult to convert to Nim
	// AND not used in compiler. We simply skip their
	// generation at all. Maybe in the future it'll be
	// changed and this set will be removed.
	nimForbiddenFunctions = fold(
		[
			//"strsubsmart",
			"applyAllSync",
			"applyAllAsync"
		],

		makeSet(),
		insertSet
	);

	// Those runtime natives, which are implemented in Nim directly.
	// Others must be compiled as fallbacks.
	nimNativeFunctions = fold(
		[
			"println2", "fcPrintln2", "subrange", "length", "concat", "map", "replace",
			"mapi", "enumFromTo", "fold", "foldi", "filter", "iteriUntil", "iter",
			"isSameStructType", "getUrlParameter", "toString", "toString2", "strlen", "clipLenToRange",
			"substring", "strIndexOf", "toLowerCase", "toUpperCase", "getCharCodeAt",
			"strsubsmart", "list2array", "list2string", "bitAnd", "bitOr", "bitNot", "getKeyValueN",
			"hostCall", "quit", "timestamp", "exp", "log", "getAllUrlParametersArray", "getTargetName",
			"fromCharCode"
		],

		makeSet(),
		insertSet
	);

	FiNimEnv(
		cfg: FiNimConfig,
		prog : FiProgram,
		struct2unions : Tree<string, [string]>,
		structs : [FiTypeStruct],
		casts_to_from: Tree<FiType, Set<FiType>>,
		casts_to_flow_from: [FiType],
		casts_to_string_from: [FiType]
	);
}