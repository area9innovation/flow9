import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/common;
import tools/flowc/manipulation/effects;

export {
	fiNimIndent = "  ";
	fiNimIndent2 = fiNimIndent + fiNimIndent;
	fiNimIndent3 = fiNimIndent2 + fiNimIndent;

	nimKeywordSet = fold(
		[
			"addr", "and", "array", "as",
			"asm", "atomic", "bind",
			"block", "break", "case",
			"cast", "concept", "const",
			"continue", "converter", "defer",
			"discard", "distinct", "div",
			"do", "elif", "else", "end",
			"enum", "except", "export", "finally",
			"for", "from","func", "generic", 
			"id", // Is used in structs
			"if", "import", "in", "include",
			"interface", "is", "isnot", "iterator",
			"len", "let", "macro", "method", "mixin",
			"mod", "nil", "not", "notin",
			"object", "of", "or", "out",
			"proc", "ptr", "raise", "ref", "result",
			"return", "shl", "shr", "static",
			"template", "try", "tuple", "type",
			"using", "var", "when", "while",
			"with", "without", "xor", "yield"
		],

		makeSet(),
		insertSet
	);

	// Nim backend used to make compiler faster.
	// Some functions are difficult to convert to Nim
	// AND not used in compiler. We simply skip their
	// generation at all. Maybe in the future it'll be
	// changed and this set will be removed.
	nimForbiddenFunctions = fold(
		[
			//"strsubsmart",
			"applyAllSync",
			"applyAllAsync"
		],

		makeSet(),
		insertSet
	);

	FiNimEnv(
		cfg: FiNimConfig,
		prog : FiProgram,

		forward_decls: ref List<string>,
		native_imports: ref Set<string>,

		structs : [FiTypeStruct],
		specializedStructs : [FiTypeStruct],
		specializations: Tree<string, Set<FiType>>,

		casts_to_from: Tree<FiType, Set<FiType>>,
		casts_to_flow_from: [FiType],
		casts_to_string_from: [FiType],
		effects: FiEffects,
		tailcall_fn: string,
		tailcall_args: [FiFunArg],
		natives: Tree<string, NimNative>,

		// Types
		ordered_types: [FiType],
		struct_index: Tree<string, int>,
		type_index: Tree<FiType, int>
	);

	NimNative(
		name: string,
		imports: [string],
		decl: string,
		code: string
	);
}
