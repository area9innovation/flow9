import tools/flowc/backends/java/fi2java_compile;
import tools/flowc/backends/java/fi2java_main;
import tools/flowc/backends/java/fi2jar_raw;
import tools/flowc/backends/java/fi2jar_gradle;

export {
	fi2java(program : FiProgram, cfg : FiJavaConfig, callback : (int) -> void) -> void;
}

fi2java(program : FiProgram, cfg : FiJavaConfig, callback : (int) -> void) -> void {
	fcVerbose(cfg, 0, "Building a Java '" + cfg.flowfile + "' application " + (if (cfg.builder == "") "" else "with " + cfg.builder ) + "...");

	builder_is_ready = if (cfg.builder == "gradle") {
		gradle_version = fcGradleVersion(cfg);
		if (gradle_version < 0.0) {
			fcPrintln("No gradle is found in the system", cfg.threadId);
			false;
		} else if (gradle_version < 6.7) {
			fcPrintln("Gradle version is: " + d2s(gradle_version) + ", while should be >= 6.7", cfg.threadId);
			false;
		} else {
			true;
		}
	} else {
		true;
	}
	if (!builder_is_ready) callback(5) else {
		package_path = if (cfg.builder != "gradle") {
			pathCombineMany(concat([cfg.generatedir], strSplit(cfg.packageName, ".")));
		} else {
			pathCombineMany(concat([cfg.generatedir, changeFileExt(cfg.jarfile, ""), "src", "main", "java"], strSplit(cfg.packageName, ".")));
		}
		ensureDirectoryExists(package_path);
		gcontext = fi2javaTranslate(program, cfg, package_path);

		if (length(gcontext.errors) > 0) {
			callback(5);
		} else {
			sources_list_file = pathCombine(package_path, "sources");
			if (!setFileContent(sources_list_file, javaList2String(gcontext.to_compile, ""))) {
				callback(5);
			} else {
				if (cfg.jarfile != "") {
					if (cfg.builder == "gradle") {
						fi2javaBuildWithGradle(cfg, callback);
					} else {
						fi2JavaBuildRaw(cfg, package_path, callback);
					}
				} else {
					callback(0);
				}
			}
		}
	}
}

fi2javaTranslate(program : FiProgram, cfg : FiJavaConfig, package_path : string) -> JavaGlobalContext {
	fcVerbose(cfg, 1, "Collecting code for all imported files...");

	main_fname = pathCombine(package_path, "Main.java");
	prev_build_has_collisions = getCollisionAndTimestampOfFile(main_fname).first;
	cmodules_info = indexJavaModules(program);
	cstructs_collisions = indexJavaStructs(program, cmodules_info.first);
	header_generator = \time ->  {
		header =
			"// HASH COLLISIONS: " + (if (cstructs_collisions.second) "YES" else "NO") + "\n" +
			"// timestamp: " + d2s(time) + "\n\n" +
			"package " + cfg.packageName + ";\n\n" +
			"import com.area9innovation.flow.*;\n\n";
		ref Cons(header, makeList())
	};

	gcontext = JavaGlobalContext(
		program, package_path, cfg.mainClassName,
		cmodules_info.first, cmodules_info.second, cstructs_collisions.first,
		makeTree(), // globals
		makeTree(), // globalFuncs
		fold(enumFromTo(0,5), makeTree(), \a,i -> setTree(a,i,true)), // has_func_def
		makeTree(), // has_field_accessor
		makeTree(), // uses_host
		ref makeList(), // init_code
		ref makeList(), // wrapper_code
		ref makeList(), // native wrapper_code
		header_generator,
		cstructs_collisions.second || prev_build_has_collisions,
		ref makeList(),
		[]
	);

	indexJavaGlobals(gcontext);
	generateJavaModules(gcontext, package_path);
	generateJavaStructDefs(gcontext, package_path);
	generateJavaMain(gcontext, cfg);
	generateJavaSingletonStructs(gcontext);
	generateJavaStructs(gcontext);

	traverseInOrder(gcontext.has_field_accessor, \name, has -> {
		if (has) {
			field_fname = pathCombine(package_path, "Field_" + name + ".java");
			if (fileExists(field_fname)) {
				if (gcontext.program.config.verbose > 1) {
					fcPrintln("Java field module '" + field_fname + "' is already generated - keeping it", cfg.threadId);
				}
				class_path = pathCombine(package_path, "Field_" + name + ".class");
				if (!fileExists(class_path)) {
					rlistPush(gcontext.to_compile, field_fname + "\n");
				}
			} else {
				if (gcontext.program.config.verbose > 1) {
					fcPrintln("Creating java field module '" + field_fname + "'", cfg.threadId);
				}
				ftext = gcontext.header_generator(timestamp());
				text = "interface Field_" + name + "<T> {\n" +
					"\tT get_" + name + "();\n" +
					"\tvoid set_" + name + "(T value);\n" +
				"}\n";
				rlistPush(ftext, text);
				writeJavaSource(gcontext, field_fname, javaList2String(ftext, ""));
			}
		}
	});

	traverseInOrder(gcontext.has_func_def, \nargs, has -> {
		if (nargs > 11 && has) {
			func_fname = pathCombine(package_path, "Func" + i2s(nargs) + ".java");
			if (fileExists(func_fname)) {
				if (gcontext.program.config.verbose > 1) {
					fcPrintln("Java struct module '" + func_fname + "' is already generated - keeping it", cfg.threadId);
				}
				class_path = pathCombine(package_path, "Func" + i2s(nargs) + ".class");
				if (!fileExists(class_path)) {
					rlistPush(gcontext.to_compile, func_fname + "\n");
				}
			} else {
				if (gcontext.program.config.verbose > 1) {
					fcPrintln("Creating java struct module '" + func_fname + "'", cfg.threadId);
				}
				ftext = gcontext.header_generator(timestamp());
				rlistPush(ftext,
					"interface Func" + i2s(nargs) + "<RT," +
					strGlue(map(enumFromTo(0, nargs - 1), \i -> "A" + i2s(i)), ", ") + "> {\n"
				);
				rlistPush(ftext,
					"\tRT invoke(" +
					strGlue(map(enumFromTo(0,nargs - 1), \i -> "A" + i2s(i) + " a" + i2s(i)), ", ") +
					");\n"
				);
				writeJavaSource(gcontext, func_fname, javaList2String(ftext, "}\n"));
			}
		}
	});
	gcontext;
}
