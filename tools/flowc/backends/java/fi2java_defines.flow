import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/java/fi2java_utils;

export {
	JavaModule(
		key : string, 
		module : FiModule, 
		id : string,
		vars : ref List<string>,
		decl_order : [FiDeclaration]
	);

	JavaStruct(
		id : int, 
		name : string, 
		csmodule : JavaModule,
		fields : [JavaStructField],
	);

	JavaStructField(
		name : string, 
		type : FiType, 
		isMutable : bool
	);
	
	JavaGlobalContext(
		program : FiProgram,
		package_path : string,
		main_class : string,

		cmodules : Tree<string, JavaModule>,
		csm_list : [JavaModule],
		cstructs : Tree<string, JavaStruct>,

		mutable globals : Tree<string, JavaGlobalInfo>,
		mutable globalFuncs : Tree<string, JavaGlobalInfo>,

		mutable has_func_def : Tree<int,bool>,
		mutable has_field_accessor : Tree<string,bool>,

		mutable uses_host : Tree<string,bool>,
		init_code : ref List<string>,
		wrapper_code : ref List<string>,
		native_wrapper_code : ref List<string>,
		header_generator : (double) -> ref List<string>,

		hash_collisions : bool,
		to_compile : ref List<string>, // set of java sources for compilation. Some may be already compiled
	);

	JavaScopeContext(
		func : JavaFunctionContext,
		indent : string,
		locals : Tree<string, JavaLocalInfo>
	);

	JavaFunctionContext(
		gctx : JavaGlobalContext,
		csm : JavaModule,
		parent : Maybe<ref JavaScopeContext>,
		text : ref List<string>,
		next_local_id : ref int,
		pullctx : FiStatementPullContext,
		can_tail_call : string,
		mutable has_tail_call : bool,
		arg_locals : [JavaLocalInfo],
	);
	
	JavaLocalInfo(
		name : string, 
		id : string, 
		type : string, 
		is_final : bool, 
		is_obj : bool
	);
	
	JavaGlobalInfo(
		name : string, 
		csmodule : JavaModule, 
		type : FiType, 
		global_scope : bool
	);
	
	JavaReturnLocation ::= JavaReturnIgnore, JavaReturnLocal, JavaReturnStmt;
		JavaReturnIgnore();
		JavaReturnLocal(name : string, type : string);
		JavaReturnStmt(type : string);

	writeJavaSource(gctx : JavaGlobalContext, path : string, src : string) -> void;
}

writeJavaSource(gctx : JavaGlobalContext, path : string, src : string) -> void {
	rlistPush(gctx.to_compile, path + "\n");
	setFileContent(path, src);
	{}
}

