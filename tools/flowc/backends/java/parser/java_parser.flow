import string;
import lingo/compiler/syntaxtree_types;
import tools/flowc/backends/java/parser/java_ast_mnemonics;

export {
	parse_Compilation(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_Compilation(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [], noExpectError);
	r = do_parse_Compilation_Compilation(acc);
	Pair(r, acc.expect);
}
do_parse_Compilation_Compilation(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Spacing(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_CompilationUnit(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_SUB(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_Compilation, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_Compilation_SUB(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 26 /*  */) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_SUB, 0, i, acc.i, []);
	} else {
		// "Expected ''"
		updateExpectError(acc, "", "", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_Spacing(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Spacing__choice287);
	SyntaxTree(st_Spacing, 0, i, acc.i, [c0]);
}

do_parse_Compilation_Identifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier__auto338(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Identifier, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_Letter(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 122}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Letter, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 90}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_Letter, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_Letter, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_Letter, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_Letter, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_LetterOrDigit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 122}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_LetterOrDigit, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 90}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_LetterOrDigit, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_LetterOrDigit, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_LetterOrDigit, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_LetterOrDigit, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_LetterOrDigit, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_Compilation_Keyword(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Keyword__choice288(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			SyntaxTree(st_Keyword, 0, i, acc.i, [[c0]]);
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else c0
}

do_parse_Compilation_ABSTRACT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "abstract", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_ABSTRACT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'abstract'"
		updateExpectError(acc, "", "abstract", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ASSERT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "assert", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_ASSERT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'assert'"
		updateExpectError(acc, "", "assert", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BOOLEAN(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "boolean", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_BOOLEAN, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'boolean'"
		updateExpectError(acc, "", "boolean", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BREAK(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "break", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_BREAK, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'break'"
		updateExpectError(acc, "", "break", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BYTE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "byte", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_BYTE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'byte'"
		updateExpectError(acc, "", "byte", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_CASE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "case", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_CASE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'case'"
		updateExpectError(acc, "", "case", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_CATCH(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "catch", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_CATCH, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'catch'"
		updateExpectError(acc, "", "catch", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_CHAR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "char", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_CHAR, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'char'"
		updateExpectError(acc, "", "char", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_CLASS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "class", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_CLASS, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'class'"
		updateExpectError(acc, "", "class", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_CONTINUE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "continue", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_CONTINUE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'continue'"
		updateExpectError(acc, "", "continue", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DEFAULT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "default", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_DEFAULT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'default'"
		updateExpectError(acc, "", "default", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DOUBLE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "double", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_DOUBLE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'double'"
		updateExpectError(acc, "", "double", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DO(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 100 && getCharCodeAt(acc.input, acc.i + 1) == 111 /* do */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_DO, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'do'"
		updateExpectError(acc, "", "do", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ELSE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "else", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_ELSE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'else'"
		updateExpectError(acc, "", "else", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ENUM(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "enum", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_ENUM, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'enum'"
		updateExpectError(acc, "", "enum", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_EXTENDS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "extends", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_EXTENDS, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'extends'"
		updateExpectError(acc, "", "extends", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_FALSE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "false", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_FALSE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'false'"
		updateExpectError(acc, "", "false", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_FINALLY(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "finally", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_FINALLY, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'finally'"
		updateExpectError(acc, "", "finally", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_FINAL(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "final", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_FINAL, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'final'"
		updateExpectError(acc, "", "final", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_FLOAT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "float", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_FLOAT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'float'"
		updateExpectError(acc, "", "float", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_FOR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "for", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_FOR, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'for'"
		updateExpectError(acc, "", "for", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_IF(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 105 && getCharCodeAt(acc.input, acc.i + 1) == 102 /* if */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_IF, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'if'"
		updateExpectError(acc, "", "if", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_IMPLEMENTS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "implements", acc.i, acc.i + 10) == acc.i) {
		acc.i ::= acc.i + 10;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_IMPLEMENTS, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'implements'"
		updateExpectError(acc, "", "implements", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_IMPORT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "import", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_IMPORT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'import'"
		updateExpectError(acc, "", "import", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_INTERFACE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "interface", acc.i, acc.i + 9) == acc.i) {
		acc.i ::= acc.i + 9;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_INTERFACE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'interface'"
		updateExpectError(acc, "", "interface", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_INT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "int", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_INT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'int'"
		updateExpectError(acc, "", "int", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_INSTANCEOF(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "instanceof", acc.i, acc.i + 10) == acc.i) {
		acc.i ::= acc.i + 10;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_INSTANCEOF, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'instanceof'"
		updateExpectError(acc, "", "instanceof", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_LONG(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "long", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_LONG, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'long'"
		updateExpectError(acc, "", "long", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_NATIVE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "native", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_NATIVE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'native'"
		updateExpectError(acc, "", "native", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_NEW(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "new", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_NEW, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'new'"
		updateExpectError(acc, "", "new", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_NULL(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "null", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_NULL, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'null'"
		updateExpectError(acc, "", "null", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_PACKAGE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "package", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PACKAGE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'package'"
		updateExpectError(acc, "", "package", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_PRIVATE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "private", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PRIVATE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'private'"
		updateExpectError(acc, "", "private", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_PROTECTED(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "protected", acc.i, acc.i + 9) == acc.i) {
		acc.i ::= acc.i + 9;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PROTECTED, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'protected'"
		updateExpectError(acc, "", "protected", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_PUBLIC(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "public", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PUBLIC, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'public'"
		updateExpectError(acc, "", "public", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_RETURN(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "return", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_RETURN, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'return'"
		updateExpectError(acc, "", "return", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SHORT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "short", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_SHORT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'short'"
		updateExpectError(acc, "", "short", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_STATIC(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "static", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_STATIC, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'static'"
		updateExpectError(acc, "", "static", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_STRICTFP(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "strictfp", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_STRICTFP, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'strictfp'"
		updateExpectError(acc, "", "strictfp", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SUPER(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "super", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_SUPER, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'super'"
		updateExpectError(acc, "", "super", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SWITCH(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "switch", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_SWITCH, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'switch'"
		updateExpectError(acc, "", "switch", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SYNCHRONIZED(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "synchronized", acc.i, acc.i + 12) == acc.i) {
		acc.i ::= acc.i + 12;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_SYNCHRONIZED, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'synchronized'"
		updateExpectError(acc, "", "synchronized", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_THIS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "this", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_THIS, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'this'"
		updateExpectError(acc, "", "this", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_THROWS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "throws", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_THROWS, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'throws'"
		updateExpectError(acc, "", "throws", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_THROW(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "throw", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_THROW, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'throw'"
		updateExpectError(acc, "", "throw", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_TRANSIENT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "transient", acc.i, acc.i + 9) == acc.i) {
		acc.i ::= acc.i + 9;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_TRANSIENT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'transient'"
		updateExpectError(acc, "", "transient", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_TRUE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "true", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_TRUE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'true'"
		updateExpectError(acc, "", "true", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_TRY(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "try", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_TRY, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'try'"
		updateExpectError(acc, "", "try", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_VOID(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "void", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_VOID, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'void'"
		updateExpectError(acc, "", "void", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_VOLATILE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "volatile", acc.i, acc.i + 8) == acc.i) {
		acc.i ::= acc.i + 8;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_VOLATILE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'volatile'"
		updateExpectError(acc, "", "volatile", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_WHILE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "while", acc.i, acc.i + 5) == acc.i) {
		acc.i ::= acc.i + 5;
		c1 = do_parse_Compilation_LetterOrDigit(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_WHILE, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LetterOrDigit, -1, 1, acc.i, []);
	} else {
		// "Expected 'while'"
		updateExpectError(acc, "", "while", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_Literal(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_FloatLiteral(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_IntegerLiteral(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_BooleanLiteral(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_CharLiteral(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_StringLiteral(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_NullLiteral(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_Literal, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_IntegerLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_IntegerLiteral__choice289(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_IntegerLiteral__choice290(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_Spacing(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_IntegerLiteral, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_DecimalNumeral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 48 /* 0 */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_DecimalNumeral, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DecimalNumeral__auto340(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_DecimalNumeral, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_DecimalNumeral, -1, i, i, [])
		}

	}

}

do_parse_Compilation_HexNumeral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_HexNumeral__choice291(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_HexDigits(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_HexNumeral, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_OctalNumeral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 48 /* 0 */) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxPlus(acc, do_parse_Compilation_OctalNumeral__auto341);
		if (length(c1) >= 1) {
			SyntaxTree(st_OctalNumeral, 0, i, acc.i, [c1]);
		} else {
			// "Expected at least one OctalNumeral$auto341"
			updateExpectError(acc, "", "OctalNumeral$auto341", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '0'"
		updateExpectError(acc, "", "0", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BinaryNumeral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_BinaryNumeral__choice292(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_BinaryNumeral__choice293(acc);
		if (c1.choice != -1) {
			c2 = SyntaxStar(acc, do_parse_Compilation_BinaryNumeral__auto342);
			SyntaxTree(st_BinaryNumeral, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_Compilation_FloatLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_FloatLiteral__choice295(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_FloatLiteral, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_DecimalFloatingPointLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_DecimalFloatingPointLiteral__auto343(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_DecimalFloatingPointLiteral, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DecimalFloatingPointLiteral__auto344(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_DecimalFloatingPointLiteral, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_DecimalFloatingPointLiteral__auto345(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_DecimalFloatingPointLiteral, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_DecimalFloatingPointLiteral__auto346(acc);
					if (c0.choice != -1) {
						SyntaxTree(st_DecimalFloatingPointLiteral, 3, i, acc.i, [[c0]]);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_DecimalFloatingPointLiteral, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_Exponent(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Exponent__choice300(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_Exponent__choice301(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_Digits(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_Exponent, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_HexadecimalFloatingPointLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_HexSignificand(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_BinaryExponent(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_HexadecimalFloatingPointLiteral__choice302(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_HexadecimalFloatingPointLiteral, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_Compilation_HexSignificand(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_HexSignificand__auto347(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_HexSignificand, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_HexSignificand__auto348(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_HexSignificand, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_HexSignificand, -1, i, i, [])
		}

	}

}

do_parse_Compilation_HexDigits(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_HexDigit(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_HexDigits__auto349);
		SyntaxTree(st_HexDigits, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_HexDigit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 102}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_HexDigit, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 70}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_HexDigit, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_HexDigit, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_HexDigit, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_BinaryExponent(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_BinaryExponent__choice304(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_BinaryExponent__choice305(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_Digits(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_BinaryExponent, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_Digits(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxStar(acc, do_parse_Compilation_Digits__auto350);
		SyntaxTree(st_Digits, 0, i, acc.i, [c1]);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BooleanLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_TRUE(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_FALSE(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_BooleanLiteral, -1, i, i, [])
		}

	}

}

do_parse_Compilation_CharLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_CharLiteral__choice307(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_Compilation_Spacing(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_CharLiteral, 0, i, acc.i, [[c1], [c3]]);
				} else c3
			} else {
				// "Expected '''"
				updateExpectError(acc, "", "'", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected '''"
		updateExpectError(acc, "", "'", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_StringLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxStar(acc, do_parse_Compilation_StringLiteral__choice309);
		if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
			acc.i ::= acc.i + 1;
			c3 = do_parse_Compilation_Spacing(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_StringLiteral, 0, i, acc.i, [c1, [c3]]);
			} else c3
		} else {
			// "Expected '\"'"
			updateExpectError(acc, "", "\"", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '\"'"
		updateExpectError(acc, "", "\"", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_Escape(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Escape__choice311(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Escape, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '\\'"
		updateExpectError(acc, "", "\\", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_OctalEscape(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 51}) {
			acc.i ::= acc.i + 1;
			if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 55}) {
				acc.i ::= acc.i + 1;
				if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 55}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_OctalEscape, 0, i, acc.i, []);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 55}) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_Compilation_OctalEscape__choice312(acc);
				if (c1.choice != -1) {
					SyntaxTree(st_OctalEscape, 1, i, acc.i, [[c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_OctalEscape, -1, i, i, [])
		}

	}

}

do_parse_Compilation_UnicodeEscape(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, \na ->
		if (getCharCodeAt(acc.input, acc.i) == 117 /* u */) {
			acc.i ::= acc.i + 1;
			dummySyntaxTree;
		} else {
			failSyntaxTree
		}
	);
	if (c0 != []) {
		c1 = do_parse_Compilation_HexDigit(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_HexDigit(acc);
			if (c2.choice != -1) {
				c3 = do_parse_Compilation_HexDigit(acc);
				if (c3.choice != -1) {
					c4 = do_parse_Compilation_HexDigit(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_UnicodeEscape, 0, i, acc.i, [[c1], [c2], [c3], [c4]]);
					} else c4
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'u'"
		updateExpectError(acc, "", "u", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_NullLiteral(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_NULL(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_AT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 64 /* @ */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_AT, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '@'"
		updateExpectError(acc, "", "@", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_COLONCOLON(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 && getCharCodeAt(acc.input, acc.i + 1) == 58 /* :: */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_COLONCOLON, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '::'"
		updateExpectError(acc, "", "::", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_COMMA(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_COMMA, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DOT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_DOT, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '.'"
		updateExpectError(acc, "", ".", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ELLIPSIS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "...", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ELLIPSIS, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '...'"
		updateExpectError(acc, "", "...", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_LPAR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_LPAR, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_LBRK(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 91 /* [ */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_LBRK, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '['"
		updateExpectError(acc, "", "[", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_RBRK(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 93 /* ] */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_RBRK, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected ']'"
		updateExpectError(acc, "", "]", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_RPAR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_RPAR, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected ')'"
		updateExpectError(acc, "", ")", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_LWING(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_LWING, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '{'"
		updateExpectError(acc, "", "{", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_RWING(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_RWING, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '}'"
		updateExpectError(acc, "", "}", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SEMI(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_SEMI, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected ';'"
		updateExpectError(acc, "", ";", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_AND(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 38 /* & */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_AND__choice313(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_AND, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_AND__choice313, -1, 1, acc.i, []);
	} else {
		// "Expected '&'"
		updateExpectError(acc, "", "&", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ANDAND(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 38 && getCharCodeAt(acc.input, acc.i + 1) == 38 /* && */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ANDAND, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '&&'"
		updateExpectError(acc, "", "&&", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ANDEQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 38 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* &= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ANDEQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '&='"
		updateExpectError(acc, "", "&=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ARROW(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 45 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* -> */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ARROW, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '->'"
		updateExpectError(acc, "", "->", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BANG(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 33 /* ! */) {
		acc.i ::= acc.i + 1;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_BANG, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '!'"
		updateExpectError(acc, "", "!", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BSR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, ">>>", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_BSR, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '>>>'"
		updateExpectError(acc, "", ">>>", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BSREQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, ">>>=", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_BSREQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '>>>='"
		updateExpectError(acc, "", ">>>=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_COLON(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
			SyntaxTree(-58, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_COLON, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DEC(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 45 && getCharCodeAt(acc.input, acc.i + 1) == 45 /* -- */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_DEC, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '--'"
		updateExpectError(acc, "", "--", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DIV(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
		acc.i ::= acc.i + 1;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_DIV, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '/'"
		updateExpectError(acc, "", "/", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DIVEQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* /= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_DIVEQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '/='"
		updateExpectError(acc, "", "/=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_EQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
		acc.i ::= acc.i + 1;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_EQU, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '='"
		updateExpectError(acc, "", "=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_EQUAL(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 61 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* == */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_EQUAL, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '=='"
		updateExpectError(acc, "", "==", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_GE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 62 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* >= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_GE, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '>='"
		updateExpectError(acc, "", ">=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_GT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_GT__choice314(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_GT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_GT__choice314, -1, 1, acc.i, []);
	} else {
		// "Expected '>'"
		updateExpectError(acc, "", ">", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_HAT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 94 /* ^ */) {
		acc.i ::= acc.i + 1;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_HAT, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '^'"
		updateExpectError(acc, "", "^", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_HATEQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 94 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* ^= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_HATEQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '^='"
		updateExpectError(acc, "", "^=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_INC(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 43 && getCharCodeAt(acc.input, acc.i + 1) == 43 /* ++ */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_INC, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '++'"
		updateExpectError(acc, "", "++", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_LE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 60 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* <= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_LE, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '<='"
		updateExpectError(acc, "", "<=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_LPOINT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 60 /* < */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_LPOINT, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '<'"
		updateExpectError(acc, "", "<", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_LT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 60 /* < */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_LT__choice315(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_LT, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_LT__choice315, -1, 1, acc.i, []);
	} else {
		// "Expected '<'"
		updateExpectError(acc, "", "<", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_MINUS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_MINUS__choice316(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_MINUS, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_MINUS__choice316, -1, 1, acc.i, []);
	} else {
		// "Expected '-'"
		updateExpectError(acc, "", "-", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_MINUSEQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 45 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* -= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_MINUSEQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '-='"
		updateExpectError(acc, "", "-=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_MOD(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 37 /* % */) {
		acc.i ::= acc.i + 1;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_MOD, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '%'"
		updateExpectError(acc, "", "%", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_MODEQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 37 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* %= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_MODEQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '%='"
		updateExpectError(acc, "", "%=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_NOTEQUAL(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 33 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* != */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_NOTEQUAL, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '!='"
		updateExpectError(acc, "", "!=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_OR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 124 /* | */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_OR__choice317(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_OR, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_OR__choice317, -1, 1, acc.i, []);
	} else {
		// "Expected '|'"
		updateExpectError(acc, "", "|", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_OREQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* |= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_OREQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '|='"
		updateExpectError(acc, "", "|=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_OROR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 124 /* || */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_OROR, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '||'"
		updateExpectError(acc, "", "||", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_PLUS(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_PLUS__choice318(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PLUS, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_PLUS__choice318, -1, 1, acc.i, []);
	} else {
		// "Expected '+'"
		updateExpectError(acc, "", "+", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_PLUSEQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 43 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* += */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PLUSEQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '+='"
		updateExpectError(acc, "", "+=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_QUERY(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 63 /* ? */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_QUERY, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '?'"
		updateExpectError(acc, "", "?", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_RPOINT(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_RPOINT, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '>'"
		updateExpectError(acc, "", ">", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SL(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 60 && getCharCodeAt(acc.input, acc.i + 1) == 60 /* << */) {
		acc.i ::= acc.i + 2;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_SL, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '<<'"
		updateExpectError(acc, "", "<<", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SLEQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "<<=", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_SLEQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '<<='"
		updateExpectError(acc, "", "<<=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 62 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* >> */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_SR__choice319(acc);
		if (c1.choice == -1) {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_SR, 0, i, acc.i, [[c2]]);
			} else c2
		} else SyntaxTree(st_DidNotExpectCompilation_SR__choice319, -1, 1, acc.i, []);
	} else {
		// "Expected '>>'"
		updateExpectError(acc, "", ">>", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_SREQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, ">>=", acc.i, acc.i + 3) == acc.i) {
		acc.i ::= acc.i + 3;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_SREQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '>>='"
		updateExpectError(acc, "", ">>=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_STAR(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 42 /* * */) {
		acc.i ::= acc.i + 1;
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			SyntaxTree(-61, -1, i, i, [])
		} else {
			c2 = do_parse_Compilation_Spacing(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_STAR, 0, i, acc.i, [[c2]]);
			} else c2
		}
	} else {
		// "Expected '*'"
		updateExpectError(acc, "", "*", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_STAREQU(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* *= */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_STAREQU, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '*='"
		updateExpectError(acc, "", "*=", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_TILDE(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 126 /* ~ */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Spacing(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_TILDE, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '~'"
		updateExpectError(acc, "", "~", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BasicType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_BYTE(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_SHORT(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_INT(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_LONG(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_CHAR(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_FLOAT(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_DOUBLE(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_BOOLEAN(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									SyntaxTree(st_Expected_BasicType, -1, i, i, [])
								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_PrimitiveType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c1 = do_parse_Compilation_BasicType(acc);
	if (c1.choice != -1) {
		SyntaxTree(st_PrimitiveType, 0, i, acc.i, [c0, [c1]]);
	} else c1
}

do_parse_Compilation_ReferenceType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ReferenceType__auto351(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_ReferenceType, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ReferenceType__auto352(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_ReferenceType, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ReferenceType, -1, i, i, [])
		}

	}

}

do_parse_Compilation_ClassType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c1 = do_parse_Compilation_Identifier(acc);
	if (c1.choice != -1) {
		i2 = acc.i;
		t2 = do_parse_Compilation_TypeArguments(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		c3 = SyntaxStar(acc, do_parse_Compilation_ClassType__auto353);
		SyntaxTree(st_ClassType, 0, i, acc.i, [c0, [c1], c2, c3]);
	} else c1
}

do_parse_Compilation_Type(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_PrimitiveType(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ClassType(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_Type, -1, i, i, [])
		}

	}

}

do_parse_Compilation_ArrayType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ArrayType__auto354(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_ArrayType, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ArrayType__auto355(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_ArrayType, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ArrayType, -1, i, i, [])
		}

	}

}

do_parse_Compilation_TypeVariable(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c1 = do_parse_Compilation_Identifier(acc);
	if (c1.choice != -1) {
		SyntaxTree(st_TypeVariable, 0, i, acc.i, [c0, [c1]]);
	} else c1
}

do_parse_Compilation_Dim(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c1 = do_parse_Compilation_LBRK(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_RBRK(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_Dim, 0, i, acc.i, [c0, [c1], [c2]]);
		} else c2
	} else c1
}

do_parse_Compilation_TypeParameter(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_TypeParameterModifier);
	c1 = do_parse_Compilation_Identifier(acc);
	if (c1.choice != -1) {
		i2 = acc.i;
		t2 = do_parse_Compilation_TypeBound(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_TypeParameter, 0, i, acc.i, [c0, [c1], c2]);
	} else c1
}

do_parse_Compilation_TypeParameterModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_Annotation(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_TypeBound(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_EXTENDS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_TypeBound__choice320(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_TypeBound, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_AdditionalBound(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_AND(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ClassType(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_AdditionalBound, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_TypeArguments(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPOINT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_TypeArgumentList(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_RPOINT(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_TypeArguments, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_TypeArgumentList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_TypeArgument(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_TypeArgumentList__auto356);
		SyntaxTree(st_TypeArgumentList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_TypeArgument(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ReferenceType(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_Wildcard(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_TypeArgument, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Wildcard(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c1 = do_parse_Compilation_QUERY(acc);
	if (c1.choice != -1) {
		i2 = acc.i;
		t2 = do_parse_Compilation_WildcardBounds(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_Wildcard, 0, i, acc.i, [c0, [c1], c2]);
	} else c1
}

do_parse_Compilation_WildcardBounds(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_WildcardBounds__auto357(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_WildcardBounds, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_WildcardBounds__auto358(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_WildcardBounds, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_WildcardBounds, -1, i, i, [])
		}

	}

}

do_parse_Compilation_QualIdent(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_QualIdent__auto359);
		SyntaxTree(st_QualIdent, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_CompilationUnit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_CompilationUnitHeader(acc);
	if (c0.choice != -1) {
		c1 = SyntaxPlus(acc, do_parse_Compilation_TypeDeclaration);
		if (length(c1) >= 1) {
			SyntaxTree(st_CompilationUnit, 0, i, acc.i, [[c0], c1]);
		} else {
			// "Expected at least one TypeDeclaration"
			updateExpectError(acc, "", "TypeDeclaration", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_CompilationUnitHeader(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_PackageDeclaration(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ImportDeclaration);
		SyntaxTree(st_CompilationUnitHeader, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_PackageDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_PackageModifier);
	c1 = do_parse_Compilation_PACKAGE(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			c3 = SyntaxStar(acc, do_parse_Compilation_PackageDeclaration__auto360);
			c4 = do_parse_Compilation_SEMI(acc);
			if (c4.choice != -1) {
				SyntaxTree(st_PackageDeclaration, 0, i, acc.i, [c0, [c1], [c2], c3, [c4]]);
			} else c4
		} else c2
	} else c1
}

do_parse_Compilation_PackageModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_Annotation(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_ImportDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ImportDeclaration__auto363(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_SEMI(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ImportDeclaration, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_TypeDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ClassDeclaration(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_InterfaceDeclaration(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_TypeDeclaration, -1, i, i, [])
		}

	}

}

do_parse_Compilation_ClassDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_NormalClassDeclaration(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_EnumDeclaration(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ClassDeclaration, -1, i, i, [])
		}

	}

}

do_parse_Compilation_NormalClassDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_NormalClassHeader(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ClassBody(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_NormalClassDeclaration, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_NormalClassHeader(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_ClassModifier);
	c1 = do_parse_Compilation_CLASS(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_Compilation_TypeParameters(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			i4 = acc.i;
			t4 = do_parse_Compilation_Superclass(acc);
			c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
			i5 = acc.i;
			t5 = do_parse_Compilation_Superinterfaces(acc);
			c5 = if (t5.choice == -1) {acc.i ::= i5; [] } else [t5];
			SyntaxTree(st_NormalClassHeader, 0, i, acc.i, [c0, [c1], [c2], c3, c4, c5]);
		} else c2
	} else c1
}

do_parse_Compilation_ClassModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_PROTECTED(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_PRIVATE(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_ABSTRACT(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_STATIC(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_FINAL(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_STRICTFP(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									SyntaxTree(st_Expected_ClassModifier, -1, i, i, [])
								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_TypeParameters(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPOINT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_TypeParameterList(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_RPOINT(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_TypeParameters, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_TypeParameterList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_TypeParameter(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_TypeParameterList__auto364);
		SyntaxTree(st_TypeParameterList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_Superclass(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_EXTENDS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ClassType(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Superclass, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_Superinterfaces(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_IMPLEMENTS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_InterfaceTypeList(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Superinterfaces, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_InterfaceTypeList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ClassType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_InterfaceTypeList__auto365);
		SyntaxTree(st_InterfaceTypeList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_ClassBody(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ClassBodyDeclaration);
		c2 = do_parse_Compilation_RWING(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_ClassBody, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_ClassBodyDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_FieldDeclaration(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_MethodDeclaration(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_ClassDeclaration(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_InterfaceDeclaration(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_SEMI(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_InstanceInitializer(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_StaticInitializer(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_ConstructorDeclaration(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									SyntaxTree(st_Expected_ClassBodyDeclaration, -1, i, i, [])
								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_FieldDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_FieldModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_VariableDeclaratorList(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_SEMI(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_FieldDeclaration, 0, i, acc.i, [c0, [c1], [c2], [c3]]);
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_VariableDeclaratorList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_VariableDeclarator(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_VariableDeclaratorList__auto366);
		SyntaxTree(st_VariableDeclaratorList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_VariableDeclarator(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_VariableDeclaratorId(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_VariableDeclarator__auto367(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		SyntaxTree(st_VariableDeclarator, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_VariableDeclaratorId(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Dim);
		SyntaxTree(st_VariableDeclaratorId, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_VariableInitializer(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Expression(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ArrayInitializer(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_VariableInitializer, -1, i, i, [])
		}

	}

}

do_parse_Compilation_UnannClassType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_TypeArguments(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = SyntaxStar(acc, do_parse_Compilation_UnannClassType__auto368);
		SyntaxTree(st_UnannClassType, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_Compilation_UnannType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_UnannType__auto369(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_UnannType, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_UnannType__auto370(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_UnannType, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_UnannType, -1, i, i, [])
		}

	}

}

do_parse_Compilation_FieldModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_PROTECTED(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_PRIVATE(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_STATIC(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_FINAL(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_TRANSIENT(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_VOLATILE(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									SyntaxTree(st_Expected_FieldModifier, -1, i, i, [])
								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_MethodDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_MethodModifier);
	c1 = do_parse_Compilation_MethodHeader(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_MethodBody(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_MethodDeclaration, 0, i, acc.i, [c0, [c1], [c2]]);
		} else c2
	} else c1
}

do_parse_Compilation_MethodHeaderSimple(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Result(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_MethodDeclarator(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_Throws(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_MethodHeaderSimple, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_Compilation_MethodHeaderParametrized(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_TypeParameters(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Annotation);
		c2 = do_parse_Compilation_Result(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_MethodDeclarator(acc);
			if (c3.choice != -1) {
				i4 = acc.i;
				t4 = do_parse_Compilation_Throws(acc);
				c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
				SyntaxTree(st_MethodHeaderParametrized, 0, i, acc.i, [[c0], c1, [c2], [c3], c4]);
			} else c3
		} else c2
	} else c0
}

do_parse_Compilation_MethodHeader(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_MethodHeaderSimple(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_MethodHeaderParametrized(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_MethodHeader, -1, i, i, [])
		}

	}

}

do_parse_Compilation_MethodDeclarator(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_LPAR(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_FormalParameterList(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_RPAR(acc);
			if (c3.choice != -1) {
				c4 = SyntaxStar(acc, do_parse_Compilation_Dim);
				SyntaxTree(st_MethodDeclarator, 0, i, acc.i, [[c0], [c1], c2, [c3], c4]);
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_FormalParameterList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_FormalParameterList__choice321(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_FormalParameterList__auto371);
		SyntaxTree(st_FormalParameterList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_FormalParameter(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_FormalParameter__auto372(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_FormalParameter, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_FormalParameter__auto373(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_FormalParameter, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_FormalParameter, -1, i, i, [])
		}

	}

}

do_parse_Compilation_VariableModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_FINAL(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_VariableModifier, -1, i, i, [])
		}

	}

}

do_parse_Compilation_ReceiverParameter(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_VariableModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		i2 = acc.i;
		t2 = do_parse_Compilation_ReceiverParameter__auto374(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		c3 = do_parse_Compilation_THIS(acc);
		if (c3.choice != -1) {
			SyntaxTree(st_ReceiverParameter, 0, i, acc.i, [c0, [c1], c2, [c3]]);
		} else c3
	} else c1
}

do_parse_Compilation_Result(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_UnannType(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_VOID(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_Result, -1, i, i, [])
		}

	}

}

do_parse_Compilation_MethodModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_PROTECTED(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_PRIVATE(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_ABSTRACT(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_STATIC(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_FINAL(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_SYNCHRONIZED(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										c0 = do_parse_Compilation_NATIVE(acc);
										if (c0.choice != -1) {
											c0
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											c0 = do_parse_Compilation_STRICTFP(acc);
											if (c0.choice != -1) {
												c0
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											SyntaxTree(st_Expected_MethodModifier, -1, i, i, [])
										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_Throws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_THROWS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ExceptionTypeList(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Throws, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ExceptionTypeList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ExceptionType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ExceptionTypeList__auto375);
		SyntaxTree(st_ExceptionTypeList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_ExceptionType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ClassType(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_TypeVariable(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ExceptionType, -1, i, i, [])
		}

	}

}

do_parse_Compilation_MethodBody(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Block(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_SEMI(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_MethodBody, -1, i, i, [])
		}

	}

}

do_parse_Compilation_InstanceInitializer(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_Block(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_StaticInitializer(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_STATIC(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Block(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_StaticInitializer, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ConstructorDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_ConstructorModifier);
	c1 = do_parse_Compilation_ConstructorDeclarator(acc);
	if (c1.choice != -1) {
		i2 = acc.i;
		t2 = do_parse_Compilation_Throws(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		c3 = do_parse_Compilation_ConstructorBody(acc);
		if (c3.choice != -1) {
			SyntaxTree(st_ConstructorDeclaration, 0, i, acc.i, [c0, [c1], c2, [c3]]);
		} else c3
	} else c1
}

do_parse_Compilation_ConstructorDeclarator(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	i0 = acc.i;
	t0 = do_parse_Compilation_TypeParameters(acc);
	c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
	c1 = do_parse_Compilation_Identifier(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_LPAR(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_Compilation_FormalParameterList(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			c4 = do_parse_Compilation_RPAR(acc);
			if (c4.choice != -1) {
				SyntaxTree(st_ConstructorDeclarator, 0, i, acc.i, [c0, [c1], [c2], c3, [c4]]);
			} else c4
		} else c2
	} else c1
}

do_parse_Compilation_ConstructorModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_PROTECTED(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_PRIVATE(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_ConstructorModifier, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_ConstructorBody(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_ExplicitConstructorInvocation(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		i2 = acc.i;
		t2 = do_parse_Compilation_BlockStatements(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		c3 = do_parse_Compilation_RWING(acc);
		if (c3.choice != -1) {
			SyntaxTree(st_ConstructorBody, 0, i, acc.i, [[c0], c1, c2, [c3]]);
		} else c3
	} else c0
}

do_parse_Compilation_ExplicitConstructorInvocation(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ExplicitConstructorInvocation__auto376(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_ExplicitConstructorInvocation, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ExplicitConstructorInvocation__auto377(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_ExplicitConstructorInvocation, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_ExplicitConstructorInvocation__auto378(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_ExplicitConstructorInvocation, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_ExplicitConstructorInvocation__auto379(acc);
					if (c0.choice != -1) {
						SyntaxTree(st_ExplicitConstructorInvocation, 3, i, acc.i, [[c0]]);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_ExplicitConstructorInvocation, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_EnumDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_ClassModifier);
	c1 = do_parse_Compilation_ENUM(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_Compilation_Superinterfaces(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			c4 = do_parse_Compilation_EnumBody(acc);
			if (c4.choice != -1) {
				SyntaxTree(st_EnumDeclaration, 0, i, acc.i, [c0, [c1], [c2], c3, [c4]]);
			} else c4
		} else c2
	} else c1
}

do_parse_Compilation_EnumBody(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_EnumConstantList(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		i2 = acc.i;
		t2 = do_parse_Compilation_COMMA(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		i3 = acc.i;
		t3 = do_parse_Compilation_EnumBodyDeclarations(acc);
		c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
		c4 = do_parse_Compilation_RWING(acc);
		if (c4.choice != -1) {
			SyntaxTree(st_EnumBody, 0, i, acc.i, [[c0], c1, c2, c3, [c4]]);
		} else c4
	} else c0
}

do_parse_Compilation_EnumConstantList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_EnumConstant(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_EnumConstantList__auto380);
		SyntaxTree(st_EnumConstantList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_EnumConstant(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_EnumConstantModifier);
	c1 = do_parse_Compilation_Identifier(acc);
	if (c1.choice != -1) {
		i2 = acc.i;
		t2 = do_parse_Compilation_Arguments(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		i3 = acc.i;
		t3 = do_parse_Compilation_ClassBody(acc);
		c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
		SyntaxTree(st_EnumConstant, 0, i, acc.i, [c0, [c1], c2, c3]);
	} else c1
}

do_parse_Compilation_EnumConstantModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_Annotation(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_EnumBodyDeclarations(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_SEMI(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ClassBodyDeclaration);
		SyntaxTree(st_EnumBodyDeclarations, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_InterfaceDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_NormalInterfaceDeclaration(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_AnnotationTypeDeclaration(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_InterfaceDeclaration, -1, i, i, [])
		}

	}

}

do_parse_Compilation_NormalInterfaceDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_InterfaceModifier);
	c1 = do_parse_Compilation_INTERFACE(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_Compilation_TypeParameters(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			i4 = acc.i;
			t4 = do_parse_Compilation_ExtendsInterfaces(acc);
			c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
			c5 = do_parse_Compilation_InterfaceBody(acc);
			if (c5.choice != -1) {
				SyntaxTree(st_NormalInterfaceDeclaration, 0, i, acc.i, [c0, [c1], [c2], c3, c4, [c5]]);
			} else c5
		} else c2
	} else c1
}

do_parse_Compilation_InterfaceModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_PROTECTED(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_PRIVATE(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_ABSTRACT(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_STATIC(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_STRICTFP(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								SyntaxTree(st_Expected_InterfaceModifier, -1, i, i, [])
							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_ExtendsInterfaces(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_EXTENDS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_InterfaceTypeList(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ExtendsInterfaces, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_InterfaceBody(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_InterfaceMemberDeclaration);
		c2 = do_parse_Compilation_RWING(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_InterfaceBody, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_InterfaceMemberDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ConstantDeclaration(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_InterfaceMethodDeclaration(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_ClassDeclaration(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_InterfaceDeclaration(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_SEMI(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_InterfaceMemberDeclaration, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_Compilation_ConstantDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_ConstantModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_VariableDeclaratorList(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_SEMI(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_ConstantDeclaration, 0, i, acc.i, [c0, [c1], [c2], [c3]]);
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_ConstantModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_STATIC(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_FINAL(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_ConstantModifier, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_InterfaceMethodDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_InterfaceMethodModifier);
	c1 = do_parse_Compilation_MethodHeader(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_MethodBody(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_InterfaceMethodDeclaration, 0, i, acc.i, [c0, [c1], [c2]]);
		} else c2
	} else c1
}

do_parse_Compilation_InterfaceMethodModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_ABSTRACT(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_DEFAULT(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_STATIC(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_STRICTFP(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_InterfaceMethodModifier, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_AnnotationTypeDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_InterfaceModifier);
	c1 = do_parse_Compilation_AT(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_INTERFACE(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_Identifier(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_AnnotationTypeBody(acc);
				if (c4.choice != -1) {
					SyntaxTree(st_AnnotationTypeDeclaration, 0, i, acc.i, [c0, [c1], [c2], [c3], [c4]]);
				} else c4
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_AnnotationTypeBody(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_AnnotationTypeMemberDeclaration);
		c2 = do_parse_Compilation_RWING(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_AnnotationTypeBody, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_AnnotationTypeMemberDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_AnnotationTypeElementDeclaration(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ConstantDeclaration(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_ClassDeclaration(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_InterfaceDeclaration(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_SEMI(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_AnnotationTypeMemberDeclaration, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_Compilation_AnnotationTypeElementDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_AnnotationTypeElementModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_LPAR(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_RPAR(acc);
				if (c4.choice != -1) {
					c5 = SyntaxStar(acc, do_parse_Compilation_Dim);
					i6 = acc.i;
					t6 = do_parse_Compilation_DefaultValue(acc);
					c6 = if (t6.choice == -1) {acc.i ::= i6; [] } else [t6];
					c7 = do_parse_Compilation_SEMI(acc);
					if (c7.choice != -1) {
						SyntaxTree(st_AnnotationTypeElementDeclaration, 0, i, acc.i, [c0, [c1], [c2], [c3], [c4], c5, c6, [c7]]);
					} else c7
				} else c4
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_AnnotationTypeElementModifier(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Annotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PUBLIC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_ABSTRACT(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_AnnotationTypeElementModifier, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_DefaultValue(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DEFAULT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ElementValue(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_DefaultValue, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_Annotation(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_AT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Annotation__choice322(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Annotation, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_NormalAnnotation(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_QualIdent(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_LPAR(acc);
		if (c1.choice != -1) {
			c2 = SyntaxStar(acc, do_parse_Compilation_ElementValuePairList);
			c3 = do_parse_Compilation_RPAR(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_NormalAnnotation, 0, i, acc.i, [[c0], [c1], c2, [c3]]);
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_ElementValuePairList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ElementValuePair(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ElementValuePairList__auto381);
		SyntaxTree(st_ElementValuePairList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_ElementValuePair(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_EQU(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_ElementValue(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_ElementValuePair, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_ElementValue(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ConditionalExpression(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ElementValueArrayInitializer(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_Annotation(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_ElementValue, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_ElementValueArrayInitializer(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_ElementValueList(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		i2 = acc.i;
		t2 = do_parse_Compilation_COMMA(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		c3 = do_parse_Compilation_RWING(acc);
		if (c3.choice != -1) {
			SyntaxTree(st_ElementValueArrayInitializer, 0, i, acc.i, [[c0], c1, c2, [c3]]);
		} else c3
	} else c0
}

do_parse_Compilation_ElementValueList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ElementValue(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ElementValueList__auto382);
		SyntaxTree(st_ElementValueList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_MarkerAnnotation(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_QualIdent(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_SingleElementAnnotation(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_QualIdent(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_LPAR(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_ElementValue(acc);
			if (c2.choice != -1) {
				c3 = do_parse_Compilation_RPAR(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_SingleElementAnnotation, 0, i, acc.i, [[c0], [c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_ArrayInitializer(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_VariableInitializerList(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		i2 = acc.i;
		t2 = do_parse_Compilation_COMMA(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		c3 = do_parse_Compilation_RWING(acc);
		if (c3.choice != -1) {
			SyntaxTree(st_ArrayInitializer, 0, i, acc.i, [[c0], c1, c2, [c3]]);
		} else c3
	} else c0
}

do_parse_Compilation_VariableInitializerList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_VariableInitializer(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_VariableInitializerList__auto383);
		SyntaxTree(st_VariableInitializerList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_Block(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_BlockStatements(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_RWING(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_Block, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_BlockStatements(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_BlockStatement(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_BlockStatement);
		SyntaxTree(st_BlockStatements, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_BlockStatement(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_LocalVariableDeclarationStatement(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ClassDeclaration(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_Statement(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_BlockStatement, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_LocalVariableDeclarationStatement(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LocalVariableDeclaration(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_SEMI(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_LocalVariableDeclarationStatement, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_LocalVariableDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_VariableModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_VariableDeclaratorList(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_LocalVariableDeclaration, 0, i, acc.i, [c0, [c1], [c2]]);
		} else c2
	} else c1
}

do_parse_Compilation_Statement(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Block(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_IF(acc);
			if (c0.choice != -1) {
				c1 = do_parse_Compilation_ParExpression(acc);
				if (c1.choice != -1) {
					c2 = do_parse_Compilation_Statement(acc);
					if (c2.choice != -1) {
						i3 = acc.i;
						t3 = do_parse_Compilation_Statement__auto384(acc);
						c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
						SyntaxTree(st_Statement, 1, i, acc.i, [[c0], [c1], [c2], c3]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_BasicForStatement(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_EnhancedForStatement(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_WHILE(acc);
						if (c0.choice != -1) {
							c1 = do_parse_Compilation_ParExpression(acc);
							if (c1.choice != -1) {
								c2 = do_parse_Compilation_Statement(acc);
								if (c2.choice != -1) {
									SyntaxTree(st_Statement, 4, i, acc.i, [[c0], [c1], [c2]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_DO(acc);
							if (c0.choice != -1) {
								c1 = do_parse_Compilation_Statement(acc);
								if (c1.choice != -1) {
									c2 = do_parse_Compilation_WHILE(acc);
									if (c2.choice != -1) {
										c3 = do_parse_Compilation_ParExpression(acc);
										if (c3.choice != -1) {
											c4 = do_parse_Compilation_SEMI(acc);
											if (c4.choice != -1) {
												SyntaxTree(st_Statement, 5, i, acc.i, [[c0], [c1], [c2], [c3], [c4]]);
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_TryStatement(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_SWITCH(acc);
									if (c0.choice != -1) {
										c1 = do_parse_Compilation_ParExpression(acc);
										if (c1.choice != -1) {
											c2 = do_parse_Compilation_SwitchBlock(acc);
											if (c2.choice != -1) {
												SyntaxTree(st_Statement, 7, i, acc.i, [[c0], [c1], [c2]]);
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										c0 = do_parse_Compilation_SYNCHRONIZED(acc);
										if (c0.choice != -1) {
											c1 = do_parse_Compilation_ParExpression(acc);
											if (c1.choice != -1) {
												c2 = do_parse_Compilation_Block(acc);
												if (c2.choice != -1) {
													SyntaxTree(st_Statement, 8, i, acc.i, [[c0], [c1], [c2]]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											c0 = do_parse_Compilation_RETURN(acc);
											if (c0.choice != -1) {
												i1 = acc.i;
												t1 = do_parse_Compilation_Expression(acc);
												c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
												c2 = do_parse_Compilation_SEMI(acc);
												if (c2.choice != -1) {
													SyntaxTree(st_Statement, 9, i, acc.i, [[c0], c1, [c2]]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											acc.i ::= i;
											r10 = {
												c0 = do_parse_Compilation_THROW(acc);
												if (c0.choice != -1) {
													c1 = do_parse_Compilation_Expression(acc);
													if (c1.choice != -1) {
														c2 = do_parse_Compilation_SEMI(acc);
														if (c2.choice != -1) {
															SyntaxTree(st_Statement, 10, i, acc.i, [[c0], [c1], [c2]]);
														} else failSyntaxTree;
													} else failSyntaxTree;
												} else failSyntaxTree;
											}
											if (r10 != failSyntaxTree) r10
											else {
												acc.i ::= i;
												r11 = {
													c0 = do_parse_Compilation_BREAK(acc);
													if (c0.choice != -1) {
														i1 = acc.i;
														t1 = do_parse_Compilation_Identifier(acc);
														c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
														c2 = do_parse_Compilation_SEMI(acc);
														if (c2.choice != -1) {
															SyntaxTree(st_Statement, 11, i, acc.i, [[c0], c1, [c2]]);
														} else failSyntaxTree;
													} else failSyntaxTree;
												}
												if (r11 != failSyntaxTree) r11
												else {
													acc.i ::= i;
													r12 = {
														c0 = do_parse_Compilation_CONTINUE(acc);
														if (c0.choice != -1) {
															i1 = acc.i;
															t1 = do_parse_Compilation_Identifier(acc);
															c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
															c2 = do_parse_Compilation_SEMI(acc);
															if (c2.choice != -1) {
																SyntaxTree(st_Statement, 12, i, acc.i, [[c0], c1, [c2]]);
															} else failSyntaxTree;
														} else failSyntaxTree;
													}
													if (r12 != failSyntaxTree) r12
													else {
														acc.i ::= i;
														r13 = {
															c0 = do_parse_Compilation_ASSERT(acc);
															if (c0.choice != -1) {
																c1 = do_parse_Compilation_Expression(acc);
																if (c1.choice != -1) {
																	i2 = acc.i;
																	t2 = do_parse_Compilation_Statement__auto385(acc);
																	c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
																	c3 = do_parse_Compilation_SEMI(acc);
																	if (c3.choice != -1) {
																		SyntaxTree(st_Statement, 13, i, acc.i, [[c0], [c1], c2, [c3]]);
																	} else failSyntaxTree;
																} else failSyntaxTree;
															} else failSyntaxTree;
														}
														if (r13 != failSyntaxTree) r13
														else {
															acc.i ::= i;
															r14 = {
																c0 = do_parse_Compilation_SEMI(acc);
																if (c0.choice != -1) {
																	c0
																} else failSyntaxTree;
															}
															if (r14 != failSyntaxTree) r14
															else {
																acc.i ::= i;
																r15 = {
																	c0 = do_parse_Compilation_StatementExpression(acc);
																	if (c0.choice != -1) {
																		c1 = do_parse_Compilation_SEMI(acc);
																		if (c1.choice != -1) {
																			SyntaxTree(st_Statement, 15, i, acc.i, [[c0], [c1]]);
																		} else failSyntaxTree;
																	} else failSyntaxTree;
																}
																if (r15 != failSyntaxTree) r15
																else {
																	acc.i ::= i;
																	r16 = {
																		c0 = do_parse_Compilation_Identifier(acc);
																		if (c0.choice != -1) {
																			c1 = do_parse_Compilation_COLON(acc);
																			if (c1.choice != -1) {
																				c2 = do_parse_Compilation_Statement(acc);
																				if (c2.choice != -1) {
																					SyntaxTree(st_Statement, 16, i, acc.i, [[c0], [c1], [c2]]);
																				} else failSyntaxTree;
																			} else failSyntaxTree;
																		} else failSyntaxTree;
																	}
																	if (r16 != failSyntaxTree) r16
																	else {
																		SyntaxTree(st_Expected_Statement, -1, i, i, [])
																	}

																}

															}

														}

													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_StatementExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Assignment(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_StatementExpression__auto386(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_StatementExpression, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_StatementExpression__auto387(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_StatementExpression, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_Primary(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_StatementExpression, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_SwitchBlock(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LWING(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_SwitchBlockStatementGroup);
		c2 = SyntaxStar(acc, do_parse_Compilation_SwitchLabel);
		c3 = do_parse_Compilation_RWING(acc);
		if (c3.choice != -1) {
			SyntaxTree(st_SwitchBlock, 0, i, acc.i, [[c0], c1, c2, [c3]]);
		} else c3
	} else c0
}

do_parse_Compilation_SwitchBlockStatementGroup(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_SwitchLabels(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_BlockStatements(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_SwitchBlockStatementGroup, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_SwitchLabels(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_SwitchLabel(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_SwitchLabel);
		SyntaxTree(st_SwitchLabels, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_SwitchLabel(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_SwitchLabel__auto388(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_SwitchLabel, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_SwitchLabel__auto389(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_SwitchLabel, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_SwitchLabel, -1, i, i, [])
		}

	}

}

do_parse_Compilation_EnumConstantName(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_BasicForStatement(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_FOR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_LPAR(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_ForInit(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_SEMI(acc);
			if (c3.choice != -1) {
				i4 = acc.i;
				t4 = do_parse_Compilation_Expression(acc);
				c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
				c5 = do_parse_Compilation_SEMI(acc);
				if (c5.choice != -1) {
					i6 = acc.i;
					t6 = do_parse_Compilation_ForUpdate(acc);
					c6 = if (t6.choice == -1) {acc.i ::= i6; [] } else [t6];
					c7 = do_parse_Compilation_RPAR(acc);
					if (c7.choice != -1) {
						c8 = do_parse_Compilation_Statement(acc);
						if (c8.choice != -1) {
							SyntaxTree(st_BasicForStatement, 0, i, acc.i, [[c0], [c1], c2, [c3], c4, [c5], c6, [c7], [c8]]);
						} else c8
					} else c7
				} else c5
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_ForInit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_LocalVariableDeclaration(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_StatementExpressionList(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ForInit, -1, i, i, [])
		}

	}

}

do_parse_Compilation_ForUpdate(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_StatementExpressionList(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_StatementExpressionList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_StatementExpression(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_StatementExpressionList__auto390);
		SyntaxTree(st_StatementExpressionList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_EnhancedForStatement(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_FOR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_LPAR(acc);
		if (c1.choice != -1) {
			c2 = SyntaxStar(acc, do_parse_Compilation_VariableModifier);
			c3 = do_parse_Compilation_UnannType(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_VariableDeclaratorId(acc);
				if (c4.choice != -1) {
					c5 = do_parse_Compilation_COLON(acc);
					if (c5.choice != -1) {
						c6 = do_parse_Compilation_Expression(acc);
						if (c6.choice != -1) {
							c7 = do_parse_Compilation_RPAR(acc);
							if (c7.choice != -1) {
								c8 = do_parse_Compilation_Statement(acc);
								if (c8.choice != -1) {
									SyntaxTree(st_EnhancedForStatement, 0, i, acc.i, [[c0], [c1], c2, [c3], [c4], [c5], [c6], [c7], [c8]]);
								} else c8
							} else c7
						} else c6
					} else c5
				} else c4
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_TryStatement(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_TryStatement__auto391(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_TryStatement, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_TryStatement__auto392(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_TryStatement, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_TryStatement__auto393(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_TryStatement, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_TryStatement, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_Catches(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_CatchClause(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_CatchClause);
		SyntaxTree(st_Catches, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_CatchClause(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_CATCH(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_LPAR(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_CatchFormalParameter(acc);
			if (c2.choice != -1) {
				c3 = do_parse_Compilation_RPAR(acc);
				if (c3.choice != -1) {
					c4 = do_parse_Compilation_Block(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_CatchClause, 0, i, acc.i, [[c0], [c1], [c2], [c3], [c4]]);
					} else c4
				} else c3
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_CatchFormalParameter(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_VariableModifier);
	c1 = do_parse_Compilation_CatchType(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_VariableDeclaratorId(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_CatchFormalParameter, 0, i, acc.i, [c0, [c1], [c2]]);
		} else c2
	} else c1
}

do_parse_Compilation_CatchType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_UnannClassType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_CatchType__auto394);
		SyntaxTree(st_CatchType, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_Finally(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_FINALLY(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Block(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Finally, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ResourceSpecification(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ResourceList(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_SEMI(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_RPAR(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_ResourceSpecification, 0, i, acc.i, [[c0], [c1], c2, [c3]]);
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_ResourceList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Resource(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ResourceList__auto395);
		SyntaxTree(st_ResourceList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_Resource(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_VariableModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_VariableDeclaratorId(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_EQU(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_Expression(acc);
				if (c4.choice != -1) {
					SyntaxTree(st_Resource, 0, i, acc.i, [c0, [c1], [c2], [c3], [c4]]);
				} else c4
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_Expression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_LambdaExpression(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_AssignmentExpression(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_Expression, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Primary(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_PrimaryBase(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_PrimaryRest);
		SyntaxTree(st_Primary, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_PrimaryBase(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_THIS(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_Literal(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_ParExpression(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_PrimaryBase__auto396(acc);
					if (c0.choice != -1) {
						SyntaxTree(st_PrimaryBase, 3, i, acc.i, [[c0]]);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_PrimaryBase__auto397(acc);
						if (c0.choice != -1) {
							SyntaxTree(st_PrimaryBase, 4, i, acc.i, [[c0]]);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_PrimaryBase__auto398(acc);
							if (c0.choice != -1) {
								SyntaxTree(st_PrimaryBase, 5, i, acc.i, [[c0]]);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_PrimaryBase__auto399(acc);
								if (c0.choice != -1) {
									SyntaxTree(st_PrimaryBase, 6, i, acc.i, [[c0]]);
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_PrimaryBase__auto401(acc);
									if (c0.choice != -1) {
										SyntaxTree(st_PrimaryBase, 7, i, acc.i, [[c0]]);
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										c0 = do_parse_Compilation_PrimaryBase__auto402(acc);
										if (c0.choice != -1) {
											SyntaxTree(st_PrimaryBase, 8, i, acc.i, [[c0]]);
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											c0 = do_parse_Compilation_PrimaryBase__auto403(acc);
											if (c0.choice != -1) {
												SyntaxTree(st_PrimaryBase, 9, i, acc.i, [[c0]]);
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											acc.i ::= i;
											r10 = {
												c0 = do_parse_Compilation_PrimaryBase__auto404(acc);
												if (c0.choice != -1) {
													SyntaxTree(st_PrimaryBase, 10, i, acc.i, [[c0]]);
												} else failSyntaxTree;
											}
											if (r10 != failSyntaxTree) r10
											else {
												SyntaxTree(st_Expected_PrimaryBase, -1, i, i, [])
											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_PrimaryRest(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_PrimaryRest__auto405(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_PrimaryRest, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_PrimaryRest__auto406(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_PrimaryRest, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_PrimaryRest__auto407(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_PrimaryRest, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_PrimaryRest, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_ParExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Expression(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_RPAR(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_ParExpression, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_ClassCreator(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ClassCreatorHeader(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_ClassBody(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		SyntaxTree(st_ClassCreator, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_ClassCreatorHeader(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	i0 = acc.i;
	t0 = do_parse_Compilation_TypeArguments(acc);
	c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
	c1 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c2 = do_parse_Compilation_ClassTypeWithDiamond(acc);
	if (c2.choice != -1) {
		c3 = do_parse_Compilation_Arguments(acc);
		if (c3.choice != -1) {
			SyntaxTree(st_ClassCreatorHeader, 0, i, acc.i, [c0, c1, [c2], [c3]]);
		} else c3
	} else c2
}

do_parse_Compilation_ClassTypeWithDiamond(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c1 = do_parse_Compilation_Identifier(acc);
	if (c1.choice != -1) {
		i2 = acc.i;
		t2 = do_parse_Compilation_TypeArgumentsOrDiamond(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		c3 = SyntaxStar(acc, do_parse_Compilation_ClassTypeWithDiamond__auto408);
		SyntaxTree(st_ClassTypeWithDiamond, 0, i, acc.i, [c0, [c1], c2, c3]);
	} else c1
}

do_parse_Compilation_TypeArgumentsOrDiamond(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_TypeArguments(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_TypeArgumentsOrDiamond__auto409(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_TypeArgumentsOrDiamond, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_TypeArgumentsOrDiamond, -1, i, i, [])
		}

	}

}

do_parse_Compilation_ArrayCreator(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ArrayCreator__auto410(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_ArrayCreator, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ArrayCreator__auto411(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_ArrayCreator, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_ArrayCreator, -1, i, i, [])
		}

	}

}

do_parse_Compilation_DimExpr(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_Annotation);
	c1 = do_parse_Compilation_LBRK(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Expression(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_RBRK(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_DimExpr, 0, i, acc.i, [c0, [c1], [c2], [c3]]);
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_Arguments(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_ArgumentList(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_RPAR(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_Arguments, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_ArgumentList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Expression(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ArgumentList__auto412);
		SyntaxTree(st_ArgumentList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_UnaryExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_UnaryExpression__auto413(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_UnaryExpression, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_UnaryExpression__auto414(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_UnaryExpression, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_UnaryExpression__auto415(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_UnaryExpression, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_UnaryExpressionNotPlusMinus(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_UnaryExpression, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_UnaryExpressionNotPlusMinus(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_UnaryExpressionNotPlusMinus__auto416(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_UnaryExpressionNotPlusMinus, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_UnaryExpressionNotPlusMinus__auto417(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_UnaryExpressionNotPlusMinus, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_CastExpression(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_UnaryExpressionNotPlusMinus__auto418(acc);
					if (c0.choice != -1) {
						SyntaxTree(st_UnaryExpressionNotPlusMinus, 3, i, acc.i, [[c0]]);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_UnaryExpressionNotPlusMinus, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_CastExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_CastExpression__auto419(acc);
		if (c0.choice != -1) {
			SyntaxTree(st_CastExpression, 0, i, acc.i, [[c0]]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_CastExpression__auto420(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_CastExpression, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_CastExpression__auto421(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_CastExpression, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_CastExpression, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_InfixExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_UnaryExpression(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_InfixExpression__choice337);
		SyntaxTree(st_InfixExpression, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_InfixOperator(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_OROR(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ANDAND(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_OR(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_HAT(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_AND(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_EQUAL(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_NOTEQUAL(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_LT(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										c0 = do_parse_Compilation_GT(acc);
										if (c0.choice != -1) {
											c0
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											c0 = do_parse_Compilation_LE(acc);
											if (c0.choice != -1) {
												c0
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											acc.i ::= i;
											r10 = {
												c0 = do_parse_Compilation_GE(acc);
												if (c0.choice != -1) {
													c0
												} else failSyntaxTree;
											}
											if (r10 != failSyntaxTree) r10
											else {
												acc.i ::= i;
												r11 = {
													c0 = do_parse_Compilation_SL(acc);
													if (c0.choice != -1) {
														c0
													} else failSyntaxTree;
												}
												if (r11 != failSyntaxTree) r11
												else {
													acc.i ::= i;
													r12 = {
														c0 = do_parse_Compilation_SR(acc);
														if (c0.choice != -1) {
															c0
														} else failSyntaxTree;
													}
													if (r12 != failSyntaxTree) r12
													else {
														acc.i ::= i;
														r13 = {
															c0 = do_parse_Compilation_BSR(acc);
															if (c0.choice != -1) {
																c0
															} else failSyntaxTree;
														}
														if (r13 != failSyntaxTree) r13
														else {
															acc.i ::= i;
															r14 = {
																c0 = do_parse_Compilation_PLUS(acc);
																if (c0.choice != -1) {
																	c0
																} else failSyntaxTree;
															}
															if (r14 != failSyntaxTree) r14
															else {
																acc.i ::= i;
																r15 = {
																	c0 = do_parse_Compilation_MINUS(acc);
																	if (c0.choice != -1) {
																		c0
																	} else failSyntaxTree;
																}
																if (r15 != failSyntaxTree) r15
																else {
																	acc.i ::= i;
																	r16 = {
																		c0 = do_parse_Compilation_STAR(acc);
																		if (c0.choice != -1) {
																			c0
																		} else failSyntaxTree;
																	}
																	if (r16 != failSyntaxTree) r16
																	else {
																		acc.i ::= i;
																		r17 = {
																			c0 = do_parse_Compilation_DIV(acc);
																			if (c0.choice != -1) {
																				c0
																			} else failSyntaxTree;
																		}
																		if (r17 != failSyntaxTree) r17
																		else {
																			acc.i ::= i;
																			r18 = {
																				c0 = do_parse_Compilation_MOD(acc);
																				if (c0.choice != -1) {
																					c0
																				} else failSyntaxTree;
																			}
																			if (r18 != failSyntaxTree) r18
																			else {
																				SyntaxTree(st_Expected_InfixOperator, -1, i, i, [])
																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_ConditionalExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_InfixExpression(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_ConditionalExpression__auto422);
		SyntaxTree(st_ConditionalExpression, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_AssignmentExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Assignment(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ConditionalExpression(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_AssignmentExpression, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Assignment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LeftHandSide(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_AssignmentOperator(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_Expression(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_Assignment, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_LeftHandSide(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Primary(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_QualIdent(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_LeftHandSide, -1, i, i, [])
		}

	}

}

do_parse_Compilation_AssignmentOperator(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_EQU(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_STAREQU(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_DIVEQU(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_MODEQU(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_PLUSEQU(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_MINUSEQU(acc);
							if (c0.choice != -1) {
								c0
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								c0 = do_parse_Compilation_SLEQU(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									c0 = do_parse_Compilation_SREQU(acc);
									if (c0.choice != -1) {
										c0
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										c0 = do_parse_Compilation_BSREQU(acc);
										if (c0.choice != -1) {
											c0
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											c0 = do_parse_Compilation_ANDEQU(acc);
											if (c0.choice != -1) {
												c0
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											acc.i ::= i;
											r10 = {
												c0 = do_parse_Compilation_HATEQU(acc);
												if (c0.choice != -1) {
													c0
												} else failSyntaxTree;
											}
											if (r10 != failSyntaxTree) r10
											else {
												acc.i ::= i;
												r11 = {
													c0 = do_parse_Compilation_OREQU(acc);
													if (c0.choice != -1) {
														c0
													} else failSyntaxTree;
												}
												if (r11 != failSyntaxTree) r11
												else {
													SyntaxTree(st_Expected_AssignmentOperator, -1, i, i, [])
												}

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_LambdaExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LambdaParameters(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ARROW(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_LambdaBody(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_LambdaExpression, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_LambdaParameters(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Identifier(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_LambdaParameters__auto423(acc);
			if (c0.choice != -1) {
				SyntaxTree(st_LambdaParameters, 1, i, acc.i, [[c0]]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_LambdaParameters__auto424(acc);
				if (c0.choice != -1) {
					SyntaxTree(st_LambdaParameters, 2, i, acc.i, [[c0]]);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_LambdaParameters, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_InferredFormalParameterList(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_InferredFormalParameterList__auto425);
		SyntaxTree(st_InferredFormalParameterList, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_LambdaBody(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Expression(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_Block(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_LambdaBody, -1, i, i, [])
		}

	}

}

do_parse_Compilation_ConstantExpression(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_Compilation_Expression(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_Compilation_Spacing__choice284(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Spacing__choice284, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_Spacing__choice284, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 13 /* 
 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_Spacing__choice284, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 10 /* 
					 */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_Spacing__choice284, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 26 /*  */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_Spacing__choice284, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_Spacing__choice284, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_Compilation_Spacing__choice285(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 13 /* 
 */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Spacing__choice285, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 10 /* 
			 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_Spacing__choice285, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_Spacing__choice285, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Spacing__choice286(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 13 /* 
 */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Spacing__choice286, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 10 /* 
			 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_Spacing__choice286, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_Spacing__choice286, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Spacing__choice287(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = SyntaxPlus(acc, do_parse_Compilation_Spacing__choice284);
		if (length(c0) >= 1) {
			SyntaxTree(st_Spacing__choice287, 0, i, acc.i, [c0]);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 42 /* /* */) {
				acc.i ::= acc.i + 2;
				c1 = SyntaxStar(acc, do_parse_Compilation_Spacing__choice287__auto426);
				if (c1 != []) {
					if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
						acc.i ::= acc.i + 2;
						SyntaxTree(st_Spacing__choice287, 1, i, acc.i, [c1]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 47 /* // */) {
					acc.i ::= acc.i + 2;
					c1 = SyntaxStar(acc, do_parse_Compilation_Spacing__choice287__auto427);
					if (c1 != []) {
						c2 = do_parse_Compilation_Spacing__choice286(acc);
						if (c2.choice != -1) {
							SyntaxTree(st_Spacing__choice287, 2, i, acc.i, [c1, [c2]]);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_Spacing__choice287, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_Keyword__choice288(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "abstract", acc.i, acc.i + 8) == acc.i) {
			acc.i ::= acc.i + 8;
			SyntaxTree(st_Keyword__choice288, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "assert", acc.i, acc.i + 6) == acc.i) {
				acc.i ::= acc.i + 6;
				SyntaxTree(st_Keyword__choice288, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (strRangeIndexOf(acc.input, "boolean", acc.i, acc.i + 7) == acc.i) {
					acc.i ::= acc.i + 7;
					SyntaxTree(st_Keyword__choice288, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (strRangeIndexOf(acc.input, "break", acc.i, acc.i + 5) == acc.i) {
						acc.i ::= acc.i + 5;
						SyntaxTree(st_Keyword__choice288, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (strRangeIndexOf(acc.input, "byte", acc.i, acc.i + 4) == acc.i) {
							acc.i ::= acc.i + 4;
							SyntaxTree(st_Keyword__choice288, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (strRangeIndexOf(acc.input, "case", acc.i, acc.i + 4) == acc.i) {
								acc.i ::= acc.i + 4;
								SyntaxTree(st_Keyword__choice288, 5, i, acc.i, []);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								if (strRangeIndexOf(acc.input, "catch", acc.i, acc.i + 5) == acc.i) {
									acc.i ::= acc.i + 5;
									SyntaxTree(st_Keyword__choice288, 6, i, acc.i, []);
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									if (strRangeIndexOf(acc.input, "char", acc.i, acc.i + 4) == acc.i) {
										acc.i ::= acc.i + 4;
										SyntaxTree(st_Keyword__choice288, 7, i, acc.i, []);
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										if (strRangeIndexOf(acc.input, "class", acc.i, acc.i + 5) == acc.i) {
											acc.i ::= acc.i + 5;
											SyntaxTree(st_Keyword__choice288, 8, i, acc.i, []);
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											if (strRangeIndexOf(acc.input, "const", acc.i, acc.i + 5) == acc.i) {
												acc.i ::= acc.i + 5;
												SyntaxTree(st_Keyword__choice288, 9, i, acc.i, []);
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											acc.i ::= i;
											r10 = {
												if (strRangeIndexOf(acc.input, "continue", acc.i, acc.i + 8) == acc.i) {
													acc.i ::= acc.i + 8;
													SyntaxTree(st_Keyword__choice288, 10, i, acc.i, []);
												} else failSyntaxTree;
											}
											if (r10 != failSyntaxTree) r10
											else {
												acc.i ::= i;
												r11 = {
													if (strRangeIndexOf(acc.input, "default", acc.i, acc.i + 7) == acc.i) {
														acc.i ::= acc.i + 7;
														SyntaxTree(st_Keyword__choice288, 11, i, acc.i, []);
													} else failSyntaxTree;
												}
												if (r11 != failSyntaxTree) r11
												else {
													acc.i ::= i;
													r12 = {
														if (strRangeIndexOf(acc.input, "double", acc.i, acc.i + 6) == acc.i) {
															acc.i ::= acc.i + 6;
															SyntaxTree(st_Keyword__choice288, 12, i, acc.i, []);
														} else failSyntaxTree;
													}
													if (r12 != failSyntaxTree) r12
													else {
														acc.i ::= i;
														r13 = {
															if (getCharCodeAt(acc.input, acc.i) == 100 && getCharCodeAt(acc.input, acc.i + 1) == 111 /* do */) {
																acc.i ::= acc.i + 2;
																SyntaxTree(st_Keyword__choice288, 13, i, acc.i, []);
															} else failSyntaxTree;
														}
														if (r13 != failSyntaxTree) r13
														else {
															acc.i ::= i;
															r14 = {
																if (strRangeIndexOf(acc.input, "else", acc.i, acc.i + 4) == acc.i) {
																	acc.i ::= acc.i + 4;
																	SyntaxTree(st_Keyword__choice288, 14, i, acc.i, []);
																} else failSyntaxTree;
															}
															if (r14 != failSyntaxTree) r14
															else {
																acc.i ::= i;
																r15 = {
																	if (strRangeIndexOf(acc.input, "enum", acc.i, acc.i + 4) == acc.i) {
																		acc.i ::= acc.i + 4;
																		SyntaxTree(st_Keyword__choice288, 15, i, acc.i, []);
																	} else failSyntaxTree;
																}
																if (r15 != failSyntaxTree) r15
																else {
																	acc.i ::= i;
																	r16 = {
																		if (strRangeIndexOf(acc.input, "extends", acc.i, acc.i + 7) == acc.i) {
																			acc.i ::= acc.i + 7;
																			SyntaxTree(st_Keyword__choice288, 16, i, acc.i, []);
																		} else failSyntaxTree;
																	}
																	if (r16 != failSyntaxTree) r16
																	else {
																		acc.i ::= i;
																		r17 = {
																			if (strRangeIndexOf(acc.input, "false", acc.i, acc.i + 5) == acc.i) {
																				acc.i ::= acc.i + 5;
																				SyntaxTree(st_Keyword__choice288, 17, i, acc.i, []);
																			} else failSyntaxTree;
																		}
																		if (r17 != failSyntaxTree) r17
																		else {
																			acc.i ::= i;
																			r18 = {
																				if (strRangeIndexOf(acc.input, "finally", acc.i, acc.i + 7) == acc.i) {
																					acc.i ::= acc.i + 7;
																					SyntaxTree(st_Keyword__choice288, 18, i, acc.i, []);
																				} else failSyntaxTree;
																			}
																			if (r18 != failSyntaxTree) r18
																			else {
																				acc.i ::= i;
																				r19 = {
																					if (strRangeIndexOf(acc.input, "final", acc.i, acc.i + 5) == acc.i) {
																						acc.i ::= acc.i + 5;
																						SyntaxTree(st_Keyword__choice288, 19, i, acc.i, []);
																					} else failSyntaxTree;
																				}
																				if (r19 != failSyntaxTree) r19
																				else {
																					acc.i ::= i;
																					r20 = {
																						if (strRangeIndexOf(acc.input, "float", acc.i, acc.i + 5) == acc.i) {
																							acc.i ::= acc.i + 5;
																							SyntaxTree(st_Keyword__choice288, 20, i, acc.i, []);
																						} else failSyntaxTree;
																					}
																					if (r20 != failSyntaxTree) r20
																					else {
																						acc.i ::= i;
																						r21 = {
																							if (strRangeIndexOf(acc.input, "for", acc.i, acc.i + 3) == acc.i) {
																								acc.i ::= acc.i + 3;
																								SyntaxTree(st_Keyword__choice288, 21, i, acc.i, []);
																							} else failSyntaxTree;
																						}
																						if (r21 != failSyntaxTree) r21
																						else {
																							acc.i ::= i;
																							r22 = {
																								if (strRangeIndexOf(acc.input, "goto", acc.i, acc.i + 4) == acc.i) {
																									acc.i ::= acc.i + 4;
																									SyntaxTree(st_Keyword__choice288, 22, i, acc.i, []);
																								} else failSyntaxTree;
																							}
																							if (r22 != failSyntaxTree) r22
																							else {
																								acc.i ::= i;
																								r23 = {
																									if (getCharCodeAt(acc.input, acc.i) == 105 && getCharCodeAt(acc.input, acc.i + 1) == 102 /* if */) {
																										acc.i ::= acc.i + 2;
																										SyntaxTree(st_Keyword__choice288, 23, i, acc.i, []);
																									} else failSyntaxTree;
																								}
																								if (r23 != failSyntaxTree) r23
																								else {
																									acc.i ::= i;
																									r24 = {
																										if (strRangeIndexOf(acc.input, "implements", acc.i, acc.i + 10) == acc.i) {
																											acc.i ::= acc.i + 10;
																											SyntaxTree(st_Keyword__choice288, 24, i, acc.i, []);
																										} else failSyntaxTree;
																									}
																									if (r24 != failSyntaxTree) r24
																									else {
																										acc.i ::= i;
																										r25 = {
																											if (strRangeIndexOf(acc.input, "import", acc.i, acc.i + 6) == acc.i) {
																												acc.i ::= acc.i + 6;
																												SyntaxTree(st_Keyword__choice288, 25, i, acc.i, []);
																											} else failSyntaxTree;
																										}
																										if (r25 != failSyntaxTree) r25
																										else {
																											acc.i ::= i;
																											r26 = {
																												if (strRangeIndexOf(acc.input, "interface", acc.i, acc.i + 9) == acc.i) {
																													acc.i ::= acc.i + 9;
																													SyntaxTree(st_Keyword__choice288, 26, i, acc.i, []);
																												} else failSyntaxTree;
																											}
																											if (r26 != failSyntaxTree) r26
																											else {
																												acc.i ::= i;
																												r27 = {
																													if (strRangeIndexOf(acc.input, "int", acc.i, acc.i + 3) == acc.i) {
																														acc.i ::= acc.i + 3;
																														SyntaxTree(st_Keyword__choice288, 27, i, acc.i, []);
																													} else failSyntaxTree;
																												}
																												if (r27 != failSyntaxTree) r27
																												else {
																													acc.i ::= i;
																													r28 = {
																														if (strRangeIndexOf(acc.input, "instanceof", acc.i, acc.i + 10) == acc.i) {
																															acc.i ::= acc.i + 10;
																															SyntaxTree(st_Keyword__choice288, 28, i, acc.i, []);
																														} else failSyntaxTree;
																													}
																													if (r28 != failSyntaxTree) r28
																													else {
																														acc.i ::= i;
																														r29 = {
																															if (strRangeIndexOf(acc.input, "long", acc.i, acc.i + 4) == acc.i) {
																																acc.i ::= acc.i + 4;
																																SyntaxTree(st_Keyword__choice288, 29, i, acc.i, []);
																															} else failSyntaxTree;
																														}
																														if (r29 != failSyntaxTree) r29
																														else {
																															acc.i ::= i;
																															r30 = {
																																if (strRangeIndexOf(acc.input, "native", acc.i, acc.i + 6) == acc.i) {
																																	acc.i ::= acc.i + 6;
																																	SyntaxTree(st_Keyword__choice288, 30, i, acc.i, []);
																																} else failSyntaxTree;
																															}
																															if (r30 != failSyntaxTree) r30
																															else {
																																acc.i ::= i;
																																r31 = {
																																	if (strRangeIndexOf(acc.input, "new", acc.i, acc.i + 3) == acc.i) {
																																		acc.i ::= acc.i + 3;
																																		SyntaxTree(st_Keyword__choice288, 31, i, acc.i, []);
																																	} else failSyntaxTree;
																																}
																																if (r31 != failSyntaxTree) r31
																																else {
																																	acc.i ::= i;
																																	r32 = {
																																		if (strRangeIndexOf(acc.input, "null", acc.i, acc.i + 4) == acc.i) {
																																			acc.i ::= acc.i + 4;
																																			SyntaxTree(st_Keyword__choice288, 32, i, acc.i, []);
																																		} else failSyntaxTree;
																																	}
																																	if (r32 != failSyntaxTree) r32
																																	else {
																																		acc.i ::= i;
																																		r33 = {
																																			if (strRangeIndexOf(acc.input, "package", acc.i, acc.i + 7) == acc.i) {
																																				acc.i ::= acc.i + 7;
																																				SyntaxTree(st_Keyword__choice288, 33, i, acc.i, []);
																																			} else failSyntaxTree;
																																		}
																																		if (r33 != failSyntaxTree) r33
																																		else {
																																			acc.i ::= i;
																																			r34 = {
																																				if (strRangeIndexOf(acc.input, "private", acc.i, acc.i + 7) == acc.i) {
																																					acc.i ::= acc.i + 7;
																																					SyntaxTree(st_Keyword__choice288, 34, i, acc.i, []);
																																				} else failSyntaxTree;
																																			}
																																			if (r34 != failSyntaxTree) r34
																																			else {
																																				acc.i ::= i;
																																				r35 = {
																																					if (strRangeIndexOf(acc.input, "protected", acc.i, acc.i + 9) == acc.i) {
																																						acc.i ::= acc.i + 9;
																																						SyntaxTree(st_Keyword__choice288, 35, i, acc.i, []);
																																					} else failSyntaxTree;
																																				}
																																				if (r35 != failSyntaxTree) r35
																																				else {
																																					acc.i ::= i;
																																					r36 = {
																																						if (strRangeIndexOf(acc.input, "public", acc.i, acc.i + 6) == acc.i) {
																																							acc.i ::= acc.i + 6;
																																							SyntaxTree(st_Keyword__choice288, 36, i, acc.i, []);
																																						} else failSyntaxTree;
																																					}
																																					if (r36 != failSyntaxTree) r36
																																					else {
																																						acc.i ::= i;
																																						r37 = {
																																							if (strRangeIndexOf(acc.input, "return", acc.i, acc.i + 6) == acc.i) {
																																								acc.i ::= acc.i + 6;
																																								SyntaxTree(st_Keyword__choice288, 37, i, acc.i, []);
																																							} else failSyntaxTree;
																																						}
																																						if (r37 != failSyntaxTree) r37
																																						else {
																																							acc.i ::= i;
																																							r38 = {
																																								if (strRangeIndexOf(acc.input, "short", acc.i, acc.i + 5) == acc.i) {
																																									acc.i ::= acc.i + 5;
																																									SyntaxTree(st_Keyword__choice288, 38, i, acc.i, []);
																																								} else failSyntaxTree;
																																							}
																																							if (r38 != failSyntaxTree) r38
																																							else {
																																								acc.i ::= i;
																																								r39 = {
																																									if (strRangeIndexOf(acc.input, "static", acc.i, acc.i + 6) == acc.i) {
																																										acc.i ::= acc.i + 6;
																																										SyntaxTree(st_Keyword__choice288, 39, i, acc.i, []);
																																									} else failSyntaxTree;
																																								}
																																								if (r39 != failSyntaxTree) r39
																																								else {
																																									acc.i ::= i;
																																									r40 = {
																																										if (strRangeIndexOf(acc.input, "strictfp", acc.i, acc.i + 8) == acc.i) {
																																											acc.i ::= acc.i + 8;
																																											SyntaxTree(st_Keyword__choice288, 40, i, acc.i, []);
																																										} else failSyntaxTree;
																																									}
																																									if (r40 != failSyntaxTree) r40
																																									else {
																																										acc.i ::= i;
																																										r41 = {
																																											if (strRangeIndexOf(acc.input, "super", acc.i, acc.i + 5) == acc.i) {
																																												acc.i ::= acc.i + 5;
																																												SyntaxTree(st_Keyword__choice288, 41, i, acc.i, []);
																																											} else failSyntaxTree;
																																										}
																																										if (r41 != failSyntaxTree) r41
																																										else {
																																											acc.i ::= i;
																																											r42 = {
																																												if (strRangeIndexOf(acc.input, "switch", acc.i, acc.i + 6) == acc.i) {
																																													acc.i ::= acc.i + 6;
																																													SyntaxTree(st_Keyword__choice288, 42, i, acc.i, []);
																																												} else failSyntaxTree;
																																											}
																																											if (r42 != failSyntaxTree) r42
																																											else {
																																												acc.i ::= i;
																																												r43 = {
																																													if (strRangeIndexOf(acc.input, "synchronized", acc.i, acc.i + 12) == acc.i) {
																																														acc.i ::= acc.i + 12;
																																														SyntaxTree(st_Keyword__choice288, 43, i, acc.i, []);
																																													} else failSyntaxTree;
																																												}
																																												if (r43 != failSyntaxTree) r43
																																												else {
																																													acc.i ::= i;
																																													r44 = {
																																														if (strRangeIndexOf(acc.input, "this", acc.i, acc.i + 4) == acc.i) {
																																															acc.i ::= acc.i + 4;
																																															SyntaxTree(st_Keyword__choice288, 44, i, acc.i, []);
																																														} else failSyntaxTree;
																																													}
																																													if (r44 != failSyntaxTree) r44
																																													else {
																																														acc.i ::= i;
																																														r45 = {
																																															if (strRangeIndexOf(acc.input, "throws", acc.i, acc.i + 6) == acc.i) {
																																																acc.i ::= acc.i + 6;
																																																SyntaxTree(st_Keyword__choice288, 45, i, acc.i, []);
																																															} else failSyntaxTree;
																																														}
																																														if (r45 != failSyntaxTree) r45
																																														else {
																																															acc.i ::= i;
																																															r46 = {
																																																if (strRangeIndexOf(acc.input, "throw", acc.i, acc.i + 5) == acc.i) {
																																																	acc.i ::= acc.i + 5;
																																																	SyntaxTree(st_Keyword__choice288, 46, i, acc.i, []);
																																																} else failSyntaxTree;
																																															}
																																															if (r46 != failSyntaxTree) r46
																																															else {
																																																acc.i ::= i;
																																																r47 = {
																																																	if (strRangeIndexOf(acc.input, "transient", acc.i, acc.i + 9) == acc.i) {
																																																		acc.i ::= acc.i + 9;
																																																		SyntaxTree(st_Keyword__choice288, 47, i, acc.i, []);
																																																	} else failSyntaxTree;
																																																}
																																																if (r47 != failSyntaxTree) r47
																																																else {
																																																	acc.i ::= i;
																																																	r48 = {
																																																		if (strRangeIndexOf(acc.input, "true", acc.i, acc.i + 4) == acc.i) {
																																																			acc.i ::= acc.i + 4;
																																																			SyntaxTree(st_Keyword__choice288, 48, i, acc.i, []);
																																																		} else failSyntaxTree;
																																																	}
																																																	if (r48 != failSyntaxTree) r48
																																																	else {
																																																		acc.i ::= i;
																																																		r49 = {
																																																			if (strRangeIndexOf(acc.input, "try", acc.i, acc.i + 3) == acc.i) {
																																																				acc.i ::= acc.i + 3;
																																																				SyntaxTree(st_Keyword__choice288, 49, i, acc.i, []);
																																																			} else failSyntaxTree;
																																																		}
																																																		if (r49 != failSyntaxTree) r49
																																																		else {
																																																			acc.i ::= i;
																																																			r50 = {
																																																				if (strRangeIndexOf(acc.input, "void", acc.i, acc.i + 4) == acc.i) {
																																																					acc.i ::= acc.i + 4;
																																																					SyntaxTree(st_Keyword__choice288, 50, i, acc.i, []);
																																																				} else failSyntaxTree;
																																																			}
																																																			if (r50 != failSyntaxTree) r50
																																																			else {
																																																				acc.i ::= i;
																																																				r51 = {
																																																					if (strRangeIndexOf(acc.input, "volatile", acc.i, acc.i + 8) == acc.i) {
																																																						acc.i ::= acc.i + 8;
																																																						SyntaxTree(st_Keyword__choice288, 51, i, acc.i, []);
																																																					} else failSyntaxTree;
																																																				}
																																																				if (r51 != failSyntaxTree) r51
																																																				else {
																																																					acc.i ::= i;
																																																					r52 = {
																																																						if (strRangeIndexOf(acc.input, "while", acc.i, acc.i + 5) == acc.i) {
																																																							acc.i ::= acc.i + 5;
																																																							SyntaxTree(st_Keyword__choice288, 52, i, acc.i, []);
																																																						} else failSyntaxTree;
																																																					}
																																																					if (r52 != failSyntaxTree) r52
																																																					else {
																																																						SyntaxTree(st_Expected_Keyword__choice288, -1, i, i, [])
																																																					}

																																																				}

																																																			}

																																																		}

																																																	}

																																																}

																																															}

																																														}

																																													}

																																												}

																																											}

																																										}

																																									}

																																								}

																																							}

																																						}

																																					}

																																				}

																																			}

																																		}

																																	}

																																}

																															}

																														}

																													}

																												}

																											}

																										}

																									}

																								}

																							}

																						}

																					}

																				}

																			}

																		}

																	}

																}

															}

														}

													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_IntegerLiteral__choice289(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_HexNumeral(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_BinaryNumeral(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_OctalNumeral(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_DecimalNumeral(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_IntegerLiteral__choice289, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_IntegerLiteral__choice290(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 108 /* l */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_IntegerLiteral__choice290, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 76 /* L */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_IntegerLiteral__choice290, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_IntegerLiteral__choice290, -1, i, i, [])
		}

	}

}

do_parse_Compilation_HexNumeral__choice291(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 48 && getCharCodeAt(acc.input, acc.i + 1) == 120 /* 0x */) {
			acc.i ::= acc.i + 2;
			SyntaxTree(st_HexNumeral__choice291, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 48 && getCharCodeAt(acc.input, acc.i + 1) == 88 /* 0X */) {
				acc.i ::= acc.i + 2;
				SyntaxTree(st_HexNumeral__choice291, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_HexNumeral__choice291, -1, i, i, [])
		}

	}

}

do_parse_Compilation_BinaryNumeral__choice292(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 48 && getCharCodeAt(acc.input, acc.i + 1) == 98 /* 0b */) {
			acc.i ::= acc.i + 2;
			SyntaxTree(st_BinaryNumeral__choice292, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 48 && getCharCodeAt(acc.input, acc.i + 1) == 66 /* 0B */) {
				acc.i ::= acc.i + 2;
				SyntaxTree(st_BinaryNumeral__choice292, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_BinaryNumeral__choice292, -1, i, i, [])
		}

	}

}

do_parse_Compilation_BinaryNumeral__choice293(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 48 /* 0 */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_BinaryNumeral__choice293, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 49 /* 1 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_BinaryNumeral__choice293, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_BinaryNumeral__choice293, -1, i, i, [])
		}

	}

}

do_parse_Compilation_BinaryNumeral__choice294(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 48 /* 0 */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_BinaryNumeral__choice294, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 49 /* 1 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_BinaryNumeral__choice294, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_BinaryNumeral__choice294, -1, i, i, [])
		}

	}

}

do_parse_Compilation_FloatLiteral__choice295(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_HexadecimalFloatingPointLiteral(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DecimalFloatingPointLiteral(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_FloatLiteral__choice295, -1, i, i, [])
		}

	}

}

do_parse_Compilation_DecimalFloatingPointLiteral__choice296(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 102 /* f */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_DecimalFloatingPointLiteral__choice296, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 70 /* F */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_DecimalFloatingPointLiteral__choice296, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 100 /* d */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_DecimalFloatingPointLiteral__choice296, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 68 /* D */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_DecimalFloatingPointLiteral__choice296, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_DecimalFloatingPointLiteral__choice296, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_DecimalFloatingPointLiteral__choice297(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 102 /* f */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_DecimalFloatingPointLiteral__choice297, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 70 /* F */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_DecimalFloatingPointLiteral__choice297, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 100 /* d */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_DecimalFloatingPointLiteral__choice297, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 68 /* D */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_DecimalFloatingPointLiteral__choice297, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_DecimalFloatingPointLiteral__choice297, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_DecimalFloatingPointLiteral__choice298(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 102 /* f */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_DecimalFloatingPointLiteral__choice298, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 70 /* F */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_DecimalFloatingPointLiteral__choice298, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 100 /* d */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_DecimalFloatingPointLiteral__choice298, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 68 /* D */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_DecimalFloatingPointLiteral__choice298, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_DecimalFloatingPointLiteral__choice298, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_DecimalFloatingPointLiteral__choice299(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 102 /* f */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_DecimalFloatingPointLiteral__choice299, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 70 /* F */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_DecimalFloatingPointLiteral__choice299, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 100 /* d */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_DecimalFloatingPointLiteral__choice299, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 68 /* D */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_DecimalFloatingPointLiteral__choice299, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_DecimalFloatingPointLiteral__choice299, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_Exponent__choice300(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 101 /* e */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Exponent__choice300, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 69 /* E */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_Exponent__choice300, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_Exponent__choice300, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Exponent__choice301(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Exponent__choice301, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_Exponent__choice301, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_Exponent__choice301, -1, i, i, [])
		}

	}

}

do_parse_Compilation_HexadecimalFloatingPointLiteral__choice302(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 102 /* f */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_HexadecimalFloatingPointLiteral__choice302, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 70 /* F */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_HexadecimalFloatingPointLiteral__choice302, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 100 /* d */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_HexadecimalFloatingPointLiteral__choice302, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 68 /* D */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_HexadecimalFloatingPointLiteral__choice302, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_HexadecimalFloatingPointLiteral__choice302, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_HexSignificand__choice303(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 48 && getCharCodeAt(acc.input, acc.i + 1) == 120 /* 0x */) {
			acc.i ::= acc.i + 2;
			SyntaxTree(st_HexSignificand__choice303, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 48 && getCharCodeAt(acc.input, acc.i + 1) == 88 /* 0X */) {
				acc.i ::= acc.i + 2;
				SyntaxTree(st_HexSignificand__choice303, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_HexSignificand__choice303, -1, i, i, [])
		}

	}

}

do_parse_Compilation_BinaryExponent__choice304(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 112 /* p */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_BinaryExponent__choice304, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 80 /* P */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_BinaryExponent__choice304, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_BinaryExponent__choice304, -1, i, i, [])
		}

	}

}

do_parse_Compilation_BinaryExponent__choice305(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_BinaryExponent__choice305, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_BinaryExponent__choice305, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_BinaryExponent__choice305, -1, i, i, [])
		}

	}

}

do_parse_Compilation_CharLiteral__choice306(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_CharLiteral__choice306, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_CharLiteral__choice306, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_CharLiteral__choice306, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 13 /* 
 */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_CharLiteral__choice306, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_CharLiteral__choice306, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_CharLiteral__choice307(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Escape(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_CharLiteral__choice306(acc);
			if (c0.choice == -1) {
				if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_CharLiteral__choice307, 1, i, acc.i, []);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_CharLiteral__choice307, -1, i, i, [])
		}

	}

}

do_parse_Compilation_StringLiteral__choice308(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_StringLiteral__choice308, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_StringLiteral__choice308, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_StringLiteral__choice308, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 13 /* 
 */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_StringLiteral__choice308, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_StringLiteral__choice308, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_Compilation_StringLiteral__choice309(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Escape(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_StringLiteral__choice308(acc);
			if (c0.choice == -1) {
				if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_StringLiteral__choice309, 1, i, acc.i, []);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_StringLiteral__choice309, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Escape__choice310(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 98 /* b */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Escape__choice310, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 116 /* t */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_Escape__choice310, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 110 /* n */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_Escape__choice310, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 102 /* f */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_Escape__choice310, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 114 /* r */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_Escape__choice310, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
								acc.i ::= acc.i + 1;
								SyntaxTree(st_Escape__choice310, 5, i, acc.i, []);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								if (getCharCodeAt(acc.input, acc.i) == 39 /* ' */) {
									acc.i ::= acc.i + 1;
									SyntaxTree(st_Escape__choice310, 6, i, acc.i, []);
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
										acc.i ::= acc.i + 1;
										SyntaxTree(st_Escape__choice310, 7, i, acc.i, []);
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									SyntaxTree(st_Expected_Escape__choice310, -1, i, i, [])
								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_Escape__choice311(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Escape__choice310(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_OctalEscape(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_UnicodeEscape(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_Escape__choice311, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_OctalEscape__choice312(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 55}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_OctalEscape__choice312, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			SyntaxTree(st_OctalEscape__choice312, 1, i, acc.i, []);
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_OctalEscape__choice312, -1, i, i, [])
		}

	}

}

do_parse_Compilation_AND__choice313(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_AND__choice313, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 38 /* & */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_AND__choice313, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_AND__choice313, -1, i, i, [])
		}

	}

}

do_parse_Compilation_GT__choice314(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_GT__choice314, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_GT__choice314, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_GT__choice314, -1, i, i, [])
		}

	}

}

do_parse_Compilation_LT__choice315(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_LT__choice315, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 60 /* < */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_LT__choice315, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_LT__choice315, -1, i, i, [])
		}

	}

}

do_parse_Compilation_MINUS__choice316(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_MINUS__choice316, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_MINUS__choice316, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_MINUS__choice316, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_MINUS__choice316, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_OR__choice317(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_OR__choice317, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 124 /* | */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_OR__choice317, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_OR__choice317, -1, i, i, [])
		}

	}

}

do_parse_Compilation_PLUS__choice318(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_PLUS__choice318, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_PLUS__choice318, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_PLUS__choice318, -1, i, i, [])
		}

	}

}

do_parse_Compilation_SR__choice319(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_SR__choice319, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_SR__choice319, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_SR__choice319, -1, i, i, [])
		}

	}

}

do_parse_Compilation_TypeBound__choice320(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ClassType(acc);
		if (c0.choice != -1) {
			c1 = SyntaxStar(acc, do_parse_Compilation_AdditionalBound);
			if (c1 != []) {
				SyntaxTree(st_TypeBound__choice320, 0, i, acc.i, [[c0], c1]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_TypeVariable(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_TypeBound__choice320, -1, i, i, [])
		}

	}

}

do_parse_Compilation_FormalParameterList__choice321(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ReceiverParameter(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_FormalParameter(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_FormalParameterList__choice321, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Annotation__choice322(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_NormalAnnotation(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_SingleElementAnnotation(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_MarkerAnnotation(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_Annotation__choice322, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_StatementExpression__choice323(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_INC(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DEC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_StatementExpression__choice323, -1, i, i, [])
		}

	}

}

do_parse_Compilation_StatementExpression__choice324(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Primary(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_QualIdent(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_StatementExpression__choice324, -1, i, i, [])
		}

	}

}

do_parse_Compilation_StatementExpression__choice325(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Primary(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_QualIdent(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_StatementExpression__choice325, -1, i, i, [])
		}

	}

}

do_parse_Compilation_StatementExpression__choice326(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_INC(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DEC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_StatementExpression__choice326, -1, i, i, [])
		}

	}

}

do_parse_Compilation_SwitchLabel__choice327(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ConstantExpression(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_EnumConstantName(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_SwitchLabel__choice327, -1, i, i, [])
		}

	}

}

do_parse_Compilation_PrimaryBase__choice328(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_DOT(acc);
		if (c0.choice != -1) {
			i1 = acc.i;
			t1 = do_parse_Compilation_TypeArguments(acc);
			c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
			c2 = do_parse_Compilation_Identifier(acc);
			if (c2.choice != -1) {
				c3 = do_parse_Compilation_Arguments(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_PrimaryBase__choice328, 0, i, acc.i, [[c0], c1, [c2], [c3]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DOT(acc);
			if (c0.choice != -1) {
				c1 = do_parse_Compilation_Identifier(acc);
				if (c1.choice != -1) {
					SyntaxTree(st_PrimaryBase__choice328, 1, i, acc.i, [[c0], [c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_COLONCOLON(acc);
				if (c0.choice != -1) {
					i1 = acc.i;
					t1 = do_parse_Compilation_TypeArguments(acc);
					c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
					c2 = do_parse_Compilation_Identifier(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_PrimaryBase__choice328, 2, i, acc.i, [[c0], c1, [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_PrimaryBase__choice328, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_PrimaryBase__choice329(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_ClassCreator(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_ArrayCreator(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_PrimaryBase__choice329, -1, i, i, [])
		}

	}

}

do_parse_Compilation_PrimaryBase__choice330(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_THIS(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_NEW(acc);
			if (c0.choice != -1) {
				c1 = do_parse_Compilation_ClassCreator(acc);
				if (c1.choice != -1) {
					SyntaxTree(st_PrimaryBase__choice330, 1, i, acc.i, [[c0], [c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_TypeArguments(acc);
				if (c0.choice != -1) {
					c1 = do_parse_Compilation_Identifier(acc);
					if (c1.choice != -1) {
						c2 = do_parse_Compilation_Arguments(acc);
						if (c2.choice != -1) {
							SyntaxTree(st_PrimaryBase__choice330, 2, i, acc.i, [[c0], [c1], [c2]]);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_Compilation_SUPER(acc);
					if (c0.choice != -1) {
						c1 = do_parse_Compilation_DOT(acc);
						if (c1.choice != -1) {
							i2 = acc.i;
							t2 = do_parse_Compilation_TypeArguments(acc);
							c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
							c3 = do_parse_Compilation_Identifier(acc);
							if (c3.choice != -1) {
								c4 = do_parse_Compilation_Arguments(acc);
								if (c4.choice != -1) {
									SyntaxTree(st_PrimaryBase__choice330, 3, i, acc.i, [[c0], [c1], c2, [c3], [c4]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_SUPER(acc);
						if (c0.choice != -1) {
							c1 = do_parse_Compilation_DOT(acc);
							if (c1.choice != -1) {
								c2 = do_parse_Compilation_Identifier(acc);
								if (c2.choice != -1) {
									SyntaxTree(st_PrimaryBase__choice330, 4, i, acc.i, [[c0], [c1], [c2]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							c0 = do_parse_Compilation_SUPER(acc);
							if (c0.choice != -1) {
								c1 = do_parse_Compilation_COLONCOLON(acc);
								if (c1.choice != -1) {
									i2 = acc.i;
									t2 = do_parse_Compilation_TypeArguments(acc);
									c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
									c3 = do_parse_Compilation_Identifier(acc);
									if (c3.choice != -1) {
										SyntaxTree(st_PrimaryBase__choice330, 5, i, acc.i, [[c0], [c1], c2, [c3]]);
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_PrimaryBase__choice330, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_Compilation_PrimaryBase__choice331(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_LBRK(acc);
		if (c0.choice != -1) {
			c1 = do_parse_Compilation_Expression(acc);
			if (c1.choice != -1) {
				c2 = do_parse_Compilation_RBRK(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_PrimaryBase__choice331, 0, i, acc.i, [[c0], [c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_Arguments(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_DOT(acc);
				if (c0.choice != -1) {
					c1 = do_parse_Compilation_PrimaryBase__choice330(acc);
					if (c1.choice != -1) {
						SyntaxTree(st_PrimaryBase__choice331, 2, i, acc.i, [[c0], [c1]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = SyntaxStar(acc, do_parse_Compilation_PrimaryBase__choice331__auto428);
					if (c0 != []) {
						c1 = do_parse_Compilation_DOT(acc);
						if (c1.choice != -1) {
							c2 = do_parse_Compilation_CLASS(acc);
							if (c2.choice != -1) {
								SyntaxTree(st_PrimaryBase__choice331, 3, i, acc.i, [c0, [c1], [c2]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_Compilation_COLONCOLON(acc);
						if (c0.choice != -1) {
							i1 = acc.i;
							t1 = do_parse_Compilation_TypeArguments(acc);
							c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
							c2 = do_parse_Compilation_Identifier(acc);
							if (c2.choice != -1) {
								SyntaxTree(st_PrimaryBase__choice331, 4, i, acc.i, [[c0], c1, [c2]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_PrimaryBase__choice331, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_Compilation_PrimaryRest__choice332(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		i0 = acc.i;
		t0 = do_parse_Compilation_TypeArguments(acc);
		c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
		c1 = do_parse_Compilation_Identifier(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_Arguments(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PrimaryRest__choice332, 0, i, acc.i, [c0, [c1], [c2]]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_Identifier(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_Compilation_NEW(acc);
				if (c0.choice != -1) {
					c1 = do_parse_Compilation_ClassCreator(acc);
					if (c1.choice != -1) {
						SyntaxTree(st_PrimaryRest__choice332, 2, i, acc.i, [[c0], [c1]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_PrimaryRest__choice332, -1, i, i, [])
			}

		}

	}

}

do_parse_Compilation_UnaryExpression__choice333(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_INC(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DEC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_UnaryExpression__choice333, -1, i, i, [])
		}

	}

}

do_parse_Compilation_UnaryExpression__choice334(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Primary(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_QualIdent(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_UnaryExpression__choice334, -1, i, i, [])
		}

	}

}

do_parse_Compilation_UnaryExpressionNotPlusMinus__choice335(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_Primary(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_QualIdent(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_UnaryExpressionNotPlusMinus__choice335, -1, i, i, [])
		}

	}

}

do_parse_Compilation_UnaryExpressionNotPlusMinus__choice336(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_INC(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_DEC(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_UnaryExpressionNotPlusMinus__choice336, -1, i, i, [])
		}

	}

}

do_parse_Compilation_InfixExpression__choice337(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_Compilation_InfixOperator(acc);
		if (c0.choice != -1) {
			c1 = do_parse_Compilation_UnaryExpression(acc);
			if (c1.choice != -1) {
				SyntaxTree(st_InfixExpression__choice337, 0, i, acc.i, [[c0], [c1]]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_Compilation_INSTANCEOF(acc);
			if (c0.choice != -1) {
				c1 = do_parse_Compilation_ReferenceType(acc);
				if (c1.choice != -1) {
					SyntaxTree(st_InfixExpression__choice337, 1, i, acc.i, [[c0], [c1]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_InfixExpression__choice337, -1, i, i, [])
		}

	}

}

do_parse_Compilation_Identifier__auto338(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Letter(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_LetterOrDigit);
		SyntaxTree(st_Identifier__auto338, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_DecimalNumeral__auto339(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	SyntaxStar(acc, \na ->
		if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
			acc.i ::= acc.i + 1;
			dummySyntaxTree;
		} else {
			failSyntaxTree
		}
	);
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_DecimalNumeral__auto339, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DecimalNumeral__auto340(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 49 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxStar(acc, do_parse_Compilation_DecimalNumeral__auto339);
		SyntaxTree(st_DecimalNumeral__auto340, 0, i, acc.i, [c1]);
	} else {
		// "Expected '1'-'9'"
		updateExpectError(acc, "", "'1'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_OctalNumeral__auto341(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	SyntaxStar(acc, \na ->
		if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
			acc.i ::= acc.i + 1;
			dummySyntaxTree;
		} else {
			failSyntaxTree
		}
	);
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 55}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_OctalNumeral__auto341, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'7'"
		updateExpectError(acc, "", "'0'-'7'", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_BinaryNumeral__auto342(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	SyntaxStar(acc, \na ->
		if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
			acc.i ::= acc.i + 1;
			dummySyntaxTree;
		} else {
			failSyntaxTree
		}
	);
	c1 = do_parse_Compilation_BinaryNumeral__choice294(acc);
	if (c1.choice != -1) {
		SyntaxTree(st_BinaryNumeral__auto342, 0, i, acc.i, [[c1]]);
	} else c1
}

do_parse_Compilation_DecimalFloatingPointLiteral__auto343(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Digits(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
			acc.i ::= acc.i + 1;
			i2 = acc.i;
			t2 = do_parse_Compilation_Digits(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			i3 = acc.i;
			t3 = do_parse_Compilation_Exponent(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			i4 = acc.i;
			t4 = do_parse_Compilation_DecimalFloatingPointLiteral__choice296(acc);
			c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
			SyntaxTree(st_DecimalFloatingPointLiteral__auto343, 0, i, acc.i, [[c0], c2, c3, c4]);
		} else {
			// "Expected '.'"
			updateExpectError(acc, "", ".", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_DecimalFloatingPointLiteral__auto344(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_Compilation_Digits(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_Exponent(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			i3 = acc.i;
			t3 = do_parse_Compilation_DecimalFloatingPointLiteral__choice297(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			SyntaxTree(st_DecimalFloatingPointLiteral__auto344, 0, i, acc.i, [[c1], c2, c3]);
		} else c1
	} else {
		// "Expected '.'"
		updateExpectError(acc, "", ".", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_DecimalFloatingPointLiteral__auto345(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Digits(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Exponent(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_DecimalFloatingPointLiteral__choice298(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_DecimalFloatingPointLiteral__auto345, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_Compilation_DecimalFloatingPointLiteral__auto346(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Digits(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_Exponent(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_DecimalFloatingPointLiteral__choice299(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_DecimalFloatingPointLiteral__auto346, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_HexSignificand__auto347(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_HexSignificand__choice303(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_HexDigits(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
			acc.i ::= acc.i + 1;
			c3 = do_parse_Compilation_HexDigits(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_HexSignificand__auto347, 0, i, acc.i, [[c0], c1, [c3]]);
			} else c3
		} else {
			// "Expected '.'"
			updateExpectError(acc, "", ".", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_HexSignificand__auto348(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_HexNumeral(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
			acc.i ::= acc.i + 1;
		}
		SyntaxTree(st_HexSignificand__auto348, 0, i, acc.i, [[c0]]);
	} else c0
}

do_parse_Compilation_HexDigits__auto349(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	SyntaxStar(acc, \na ->
		if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
			acc.i ::= acc.i + 1;
			dummySyntaxTree;
		} else {
			failSyntaxTree
		}
	);
	c1 = do_parse_Compilation_HexDigit(acc);
	if (c1.choice != -1) {
		SyntaxTree(st_HexDigits__auto349, 0, i, acc.i, [[c1]]);
	} else c1
}

do_parse_Compilation_Digits__auto350(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	SyntaxStar(acc, \na ->
		if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
			acc.i ::= acc.i + 1;
			dummySyntaxTree;
		} else {
			failSyntaxTree
		}
	);
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_Digits__auto350, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_Compilation_ReferenceType__auto351(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_PrimitiveType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxPlus(acc, do_parse_Compilation_Dim);
		if (length(c1) >= 1) {
			SyntaxTree(st_ReferenceType__auto351, 0, i, acc.i, [[c0], c1]);
		} else {
			// "Expected at least one Dim"
			updateExpectError(acc, "", "Dim", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_ReferenceType__auto352(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ClassType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Dim);
		SyntaxTree(st_ReferenceType__auto352, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_ClassType__auto353(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DOT(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Annotation);
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_Compilation_TypeArguments(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			SyntaxTree(st_ClassType__auto353, 0, i, acc.i, [[c0], c1, [c2], c3]);
		} else c2
	} else c0
}

do_parse_Compilation_ArrayType__auto354(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_PrimitiveType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxPlus(acc, do_parse_Compilation_Dim);
		if (length(c1) >= 1) {
			SyntaxTree(st_ArrayType__auto354, 0, i, acc.i, [[c0], c1]);
		} else {
			// "Expected at least one Dim"
			updateExpectError(acc, "", "Dim", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_ArrayType__auto355(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ClassType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxPlus(acc, do_parse_Compilation_Dim);
		if (length(c1) >= 1) {
			SyntaxTree(st_ArrayType__auto355, 0, i, acc.i, [[c0], c1]);
		} else {
			// "Expected at least one Dim"
			updateExpectError(acc, "", "Dim", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_TypeArgumentList__auto356(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_TypeArgument(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_TypeArgumentList__auto356, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_WildcardBounds__auto357(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_EXTENDS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ReferenceType(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_WildcardBounds__auto357, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_WildcardBounds__auto358(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_SUPER(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ReferenceType(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_WildcardBounds__auto358, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_QualIdent__auto359(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DOT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Identifier(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_QualIdent__auto359, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_PackageDeclaration__auto360(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DOT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Identifier(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PackageDeclaration__auto360, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ImportDeclaration__auto361(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_IMPORT(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_STATIC(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_QualIdent(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_ImportDeclaration__auto361, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_ImportDeclaration__auto362(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DOT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_STAR(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ImportDeclaration__auto362, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ImportDeclaration__auto363(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ImportDeclaration__auto361(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_ImportDeclaration__auto362(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		SyntaxTree(st_ImportDeclaration__auto363, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_TypeParameterList__auto364(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_TypeParameter(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_TypeParameterList__auto364, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_InterfaceTypeList__auto365(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ClassType(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_InterfaceTypeList__auto365, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_VariableDeclaratorList__auto366(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_VariableDeclarator(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_VariableDeclaratorList__auto366, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_VariableDeclarator__auto367(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_EQU(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_VariableInitializer(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_VariableDeclarator__auto367, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_UnannClassType__auto368(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DOT(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Annotation);
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_Compilation_TypeArguments(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			SyntaxTree(st_UnannClassType__auto368, 0, i, acc.i, [[c0], c1, [c2], c3]);
		} else c2
	} else c0
}

do_parse_Compilation_UnannType__auto369(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_BasicType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Dim);
		SyntaxTree(st_UnannType__auto369, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_UnannType__auto370(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_UnannClassType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Dim);
		SyntaxTree(st_UnannType__auto370, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_FormalParameterList__auto371(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_FormalParameter(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_FormalParameterList__auto371, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_FormalParameter__auto372(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_VariableModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_VariableDeclaratorId(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_FormalParameter__auto372, 0, i, acc.i, [c0, [c1], [c2]]);
		} else c2
	} else c1
}

do_parse_Compilation_FormalParameter__auto373(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_Compilation_VariableModifier);
	c1 = do_parse_Compilation_UnannType(acc);
	if (c1.choice != -1) {
		c2 = SyntaxStar(acc, do_parse_Compilation_Annotation);
		c3 = do_parse_Compilation_ELLIPSIS(acc);
		if (c3.choice != -1) {
			c4 = do_parse_Compilation_VariableDeclaratorId(acc);
			if (c4.choice != -1) {
				c5 = do_parse_Compilation_COMMA(acc);
				if (c5.choice == -1) {
					SyntaxTree(st_FormalParameter__auto373, 0, i, acc.i, [c0, [c1], c2, [c3], [c4]]);
				} else SyntaxTree(st_DidNotExpectCompilation_COMMA, -1, 5, acc.i, []);
			} else c4
		} else c3
	} else c1
}

do_parse_Compilation_ReceiverParameter__auto374(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Identifier(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_DOT(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ReceiverParameter__auto374, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ExceptionTypeList__auto375(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ExceptionType(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ExceptionTypeList__auto375, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ExplicitConstructorInvocation__auto376(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	i0 = acc.i;
	t0 = do_parse_Compilation_TypeArguments(acc);
	c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
	c1 = do_parse_Compilation_THIS(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Arguments(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_SEMI(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_ExplicitConstructorInvocation__auto376, 0, i, acc.i, [c0, [c1], [c2], [c3]]);
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_ExplicitConstructorInvocation__auto377(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	i0 = acc.i;
	t0 = do_parse_Compilation_TypeArguments(acc);
	c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
	c1 = do_parse_Compilation_SUPER(acc);
	if (c1.choice != -1) {
		c2 = do_parse_Compilation_Arguments(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_SEMI(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_ExplicitConstructorInvocation__auto377, 0, i, acc.i, [c0, [c1], [c2], [c3]]);
			} else c3
		} else c2
	} else c1
}

do_parse_Compilation_ExplicitConstructorInvocation__auto378(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Primary(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_DOT(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_TypeArguments(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_SUPER(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_Arguments(acc);
				if (c4.choice != -1) {
					c5 = do_parse_Compilation_SEMI(acc);
					if (c5.choice != -1) {
						SyntaxTree(st_ExplicitConstructorInvocation__auto378, 0, i, acc.i, [[c0], [c1], c2, [c3], [c4], [c5]]);
					} else c5
				} else c4
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_ExplicitConstructorInvocation__auto379(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_QualIdent(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_DOT(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_TypeArguments(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_SUPER(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_Arguments(acc);
				if (c4.choice != -1) {
					c5 = do_parse_Compilation_SEMI(acc);
					if (c5.choice != -1) {
						SyntaxTree(st_ExplicitConstructorInvocation__auto379, 0, i, acc.i, [[c0], [c1], c2, [c3], [c4], [c5]]);
					} else c5
				} else c4
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_EnumConstantList__auto380(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_EnumConstant(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_EnumConstantList__auto380, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ElementValuePairList__auto381(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ElementValuePair(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ElementValuePairList__auto381, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ElementValueList__auto382(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ElementValue(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ElementValueList__auto382, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_VariableInitializerList__auto383(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_VariableInitializer(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_VariableInitializerList__auto383, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_Statement__auto384(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ELSE(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Statement(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Statement__auto384, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_Statement__auto385(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COLON(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Expression(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_Statement__auto385, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_StatementExpression__auto386(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_StatementExpression__choice323(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_StatementExpression__choice324(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_StatementExpression__auto386, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_StatementExpression__auto387(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_StatementExpression__choice325(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_StatementExpression__choice326(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_StatementExpression__auto387, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_SwitchLabel__auto388(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_CASE(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_SwitchLabel__choice327(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_COLON(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_SwitchLabel__auto388, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_SwitchLabel__auto389(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DEFAULT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_COLON(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_SwitchLabel__auto389, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_StatementExpressionList__auto390(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_StatementExpression(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_StatementExpressionList__auto390, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_TryStatement__auto391(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_TRY(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Block(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_Catches(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_Finally(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_TryStatement__auto391, 0, i, acc.i, [[c0], [c1], c2, [c3]]);
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_TryStatement__auto392(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_TRY(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Block(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_Catches(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_TryStatement__auto392, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_TryStatement__auto393(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_TRY(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ResourceSpecification(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_Block(acc);
			if (c2.choice != -1) {
				i3 = acc.i;
				t3 = do_parse_Compilation_Catches(acc);
				c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
				i4 = acc.i;
				t4 = do_parse_Compilation_Finally(acc);
				c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
				SyntaxTree(st_TryStatement__auto393, 0, i, acc.i, [[c0], [c1], [c2], c3, c4]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_CatchType__auto394(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_OR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ClassType(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_CatchType__auto394, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_ResourceList__auto395(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_SEMI(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Resource(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ResourceList__auto395, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto396(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_SUPER(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_PrimaryBase__choice328(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PrimaryBase__auto396, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto397(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_NEW(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_PrimaryBase__choice329(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PrimaryBase__auto397, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto398(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_QualIdent(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_PrimaryBase__choice331(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PrimaryBase__auto398, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto399(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_VOID(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_DOT(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_CLASS(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PrimaryBase__auto399, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto400(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LBRK(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_RBRK(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PrimaryBase__auto400, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto401(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_BasicType(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_PrimaryBase__auto400);
		c2 = do_parse_Compilation_DOT(acc);
		if (c2.choice != -1) {
			c3 = do_parse_Compilation_CLASS(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_PrimaryBase__auto401, 0, i, acc.i, [[c0], c1, [c2], [c3]]);
			} else c3
		} else c2
	} else c0
}

do_parse_Compilation_PrimaryBase__auto402(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ReferenceType(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_COLONCOLON(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_TypeArguments(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_Identifier(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_PrimaryBase__auto402, 0, i, acc.i, [[c0], [c1], c2, [c3]]);
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto403(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ClassType(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_COLONCOLON(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_Compilation_TypeArguments(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_Compilation_NEW(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_PrimaryBase__auto403, 0, i, acc.i, [[c0], [c1], c2, [c3]]);
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryBase__auto404(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_ArrayType(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_COLONCOLON(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_NEW(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PrimaryBase__auto404, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryRest__auto405(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DOT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_PrimaryRest__choice332(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PrimaryRest__auto405, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryRest__auto406(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LBRK(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Expression(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_RBRK(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_PrimaryRest__auto406, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_PrimaryRest__auto407(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COLONCOLON(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_TypeArguments(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_PrimaryRest__auto407, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_ClassTypeWithDiamond__auto408(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_DOT(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_Compilation_Annotation);
		c2 = do_parse_Compilation_Identifier(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_Compilation_TypeArgumentsOrDiamond(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			SyntaxTree(st_ClassTypeWithDiamond__auto408, 0, i, acc.i, [[c0], c1, [c2], c3]);
		} else c2
	} else c0
}

do_parse_Compilation_TypeArgumentsOrDiamond__auto409(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPOINT(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_RPOINT(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_DOT(acc);
			if (c2.choice == -1) {
				SyntaxTree(st_TypeArgumentsOrDiamond__auto409, 0, i, acc.i, [[c0], [c1]]);
			} else SyntaxTree(st_DidNotExpectCompilation_DOT, -1, 2, acc.i, []);
		} else c1
	} else c0
}

do_parse_Compilation_ArrayCreator__auto410(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Type(acc);
	if (c0.choice != -1) {
		c1 = SyntaxPlus(acc, do_parse_Compilation_DimExpr);
		if (length(c1) >= 1) {
			c2 = SyntaxStar(acc, do_parse_Compilation_Dim);
			SyntaxTree(st_ArrayCreator__auto410, 0, i, acc.i, [[c0], c1, c2]);
		} else {
			// "Expected at least one DimExpr"
			updateExpectError(acc, "", "DimExpr", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_ArrayCreator__auto411(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Type(acc);
	if (c0.choice != -1) {
		c1 = SyntaxPlus(acc, do_parse_Compilation_Dim);
		if (length(c1) >= 1) {
			c2 = do_parse_Compilation_ArrayInitializer(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_ArrayCreator__auto411, 0, i, acc.i, [[c0], c1, [c2]]);
			} else c2
		} else {
			// "Expected at least one Dim"
			updateExpectError(acc, "", "Dim", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_Compilation_ArgumentList__auto412(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Expression(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_ArgumentList__auto412, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_UnaryExpression__auto413(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_UnaryExpression__choice333(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_UnaryExpression__choice334(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_UnaryExpression__auto413, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_UnaryExpression__auto414(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_PLUS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_UnaryExpression(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_UnaryExpression__auto414, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_UnaryExpression__auto415(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_MINUS(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_UnaryExpression(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_UnaryExpression__auto415, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_UnaryExpressionNotPlusMinus__auto416(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_TILDE(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_UnaryExpression(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_UnaryExpressionNotPlusMinus__auto416, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_UnaryExpressionNotPlusMinus__auto417(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_BANG(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_UnaryExpression(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_UnaryExpressionNotPlusMinus__auto417, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_UnaryExpressionNotPlusMinus__auto418(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_UnaryExpressionNotPlusMinus__choice335(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_UnaryExpressionNotPlusMinus__choice336(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		SyntaxTree(st_UnaryExpressionNotPlusMinus__auto418, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_Compilation_CastExpression__auto419(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_PrimitiveType(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_RPAR(acc);
			if (c2.choice != -1) {
				c3 = do_parse_Compilation_UnaryExpression(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_CastExpression__auto419, 0, i, acc.i, [[c0], [c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_CastExpression__auto420(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ReferenceType(acc);
		if (c1.choice != -1) {
			c2 = SyntaxStar(acc, do_parse_Compilation_AdditionalBound);
			c3 = do_parse_Compilation_RPAR(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_LambdaExpression(acc);
				if (c4.choice != -1) {
					SyntaxTree(st_CastExpression__auto420, 0, i, acc.i, [[c0], [c1], c2, [c3], [c4]]);
				} else c4
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_CastExpression__auto421(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_ReferenceType(acc);
		if (c1.choice != -1) {
			c2 = SyntaxStar(acc, do_parse_Compilation_AdditionalBound);
			c3 = do_parse_Compilation_RPAR(acc);
			if (c3.choice != -1) {
				c4 = do_parse_Compilation_UnaryExpressionNotPlusMinus(acc);
				if (c4.choice != -1) {
					SyntaxTree(st_CastExpression__auto421, 0, i, acc.i, [[c0], [c1], c2, [c3], [c4]]);
				} else c4
			} else c3
		} else c1
	} else c0
}

do_parse_Compilation_ConditionalExpression__auto422(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_QUERY(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Expression(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_COLON(acc);
			if (c2.choice != -1) {
				c3 = do_parse_Compilation_Expression(acc);
				if (c3.choice != -1) {
					SyntaxTree(st_ConditionalExpression__auto422, 0, i, acc.i, [[c0], [c1], [c2], [c3]]);
				} else c3
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_LambdaParameters__auto423(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_Compilation_FormalParameterList(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		c2 = do_parse_Compilation_RPAR(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_LambdaParameters__auto423, 0, i, acc.i, [[c0], c1, [c2]]);
		} else c2
	} else c0
}

do_parse_Compilation_LambdaParameters__auto424(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LPAR(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_InferredFormalParameterList(acc);
		if (c1.choice != -1) {
			c2 = do_parse_Compilation_RPAR(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_LambdaParameters__auto424, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_Compilation_InferredFormalParameterList__auto425(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_COMMA(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_Identifier(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_InferredFormalParameterList__auto425, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

do_parse_Compilation_Spacing__choice287__auto426(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
		SyntaxTree(-42, -1, i, i, [])
	} else {
		if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Spacing__choice287__auto426, 0, i, acc.i, []);
		} else {
			// "Expected ' '-'￿'"
			updateExpectError(acc, "", "' '-'￿'", i);
			failSyntaxTree;
		}
	}
}

do_parse_Compilation_Spacing__choice287__auto427(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_Spacing__choice285(acc);
	if (c0.choice == -1) {
		if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_Spacing__choice287__auto427, 0, i, acc.i, []);
		} else {
			// "Expected ' '-'￿'"
			updateExpectError(acc, "", "' '-'￿'", i);
			failSyntaxTree;
		}
	} else SyntaxTree(st_DidNotExpectCompilation_Spacing__choice285, -1, 0, acc.i, []);
}

do_parse_Compilation_PrimaryBase__choice331__auto428(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_Compilation_LBRK(acc);
	if (c0.choice != -1) {
		c1 = do_parse_Compilation_RBRK(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_PrimaryBase__choice331__auto428, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

