import lingo/compiler/syntaxtree_types;
import tools/flowc/backends/java/parser/java_ast_mnemonics;

export {
	get_Compilation_SUB_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Spacing(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Identifier(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Identifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Letter(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LetterOrDigit_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ABSTRACT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ASSERT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BOOLEAN(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BREAK(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BYTE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CASE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CATCH(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CHAR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CLASS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CONTINUE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DEFAULT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DOUBLE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DO(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ELSE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ENUM(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EXTENDS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FALSE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FINALLY(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FINAL(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FLOAT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FOR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_IF(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_IMPLEMENTS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_IMPORT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_INTERFACE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_INT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_INSTANCEOF(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LONG(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NATIVE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NEW(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NULL(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PACKAGE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PRIVATE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PROTECTED(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PUBLIC(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_RETURN(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SHORT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_STATIC(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_STATIC_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_STRICTFP(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SUPER(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SWITCH(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SYNCHRONIZED(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_THIS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_THROWS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_THROW(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TRANSIENT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TRUE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TRY(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VOID(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VOLATILE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_WHILE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Literal(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_IntegerLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalNumeral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexNumeral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OctalNumeral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryNumeral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FloatLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Exponent(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Exponent_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_HexadecimalFloatingPointLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexSignificand(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexDigits(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexDigits_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_HexDigit(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryExponent(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Digits(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Digits_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_BooleanLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CharLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StringLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Escape(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OctalEscape(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnicodeEscape(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NullLiteral(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_AT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_COLONCOLON(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_COMMA(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_COMMA_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_DOT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ELLIPSIS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LPAR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LBRK(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_RBRK(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_RPAR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LWING(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_RWING(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SEMI(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SEMI_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_AND(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ANDAND(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ANDEQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ARROW(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BANG(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BSR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BSREQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_COLON(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DEC(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DIV(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DIVEQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EQUAL(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_GE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_GT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HAT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HATEQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_INC(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LPOINT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MINUS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MINUSEQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MOD(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MODEQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NOTEQUAL(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OREQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OROR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PLUS(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PLUSEQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_QUERY(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_RPOINT(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SL(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SLEQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SREQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_STAR(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_STAREQU(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TILDE(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BasicType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimitiveType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ReferenceType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Type(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ArrayType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeVariable(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Dim_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeParameter(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeParameterModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeBound_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_AdditionalBound_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeArguments(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeArguments_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeArgumentList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeArgument(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Wildcard(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_WildcardBounds_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_QualIdent(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CompilationUnit(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CompilationUnitHeader(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PackageDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PackageModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ImportDeclaration_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeDeclaration_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ClassDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NormalClassDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NormalClassHeader(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeParameters(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeParameters_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeParameterList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Superclass_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Superinterfaces_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_InterfaceTypeList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassBody(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassBody_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ClassBodyDeclaration_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_FieldDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableDeclaratorList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableDeclarator(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableDeclaratorId(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableInitializer(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnannClassType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnannType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FieldModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_MethodDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MethodHeaderSimple(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MethodHeaderParametrized(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MethodHeader(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MethodDeclarator(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FormalParameterList_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_FormalParameter(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ReceiverParameter(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Result(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MethodModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Throws_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ExceptionTypeList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ExceptionType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MethodBody(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InstanceInitializer(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StaticInitializer(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConstructorDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConstructorDeclarator(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConstructorModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ConstructorBody(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ExplicitConstructorInvocation_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_EnumDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EnumBody(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EnumConstantList_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_EnumConstant(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EnumConstantModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_EnumBodyDeclarations_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_InterfaceDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_NormalInterfaceDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InterfaceModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ExtendsInterfaces_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_InterfaceBody(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InterfaceMemberDeclaration_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ConstantDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConstantModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_InterfaceMethodDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InterfaceMethodModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_AnnotationTypeDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_AnnotationTypeBody(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_AnnotationTypeMemberDeclaration_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_AnnotationTypeElementDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_AnnotationTypeElementModifier_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_DefaultValue_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Annotation(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Annotation_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_NormalAnnotation(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ElementValuePairList_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ElementValuePair(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ElementValue(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ElementValueArrayInitializer(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ElementValueList_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_MarkerAnnotation(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SingleElementAnnotation(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ArrayInitializer(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableInitializerList_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Block(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BlockStatements(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BlockStatements_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_BlockStatement(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BlockStatement_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_LocalVariableDeclarationStatement(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LocalVariableDeclaration(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Statement(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SwitchBlock(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SwitchBlockStatementGroup_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_SwitchLabels(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SwitchLabel(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SwitchLabel_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_EnumConstantName(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BasicForStatement(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ForInit_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ForUpdate_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_StatementExpressionList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EnhancedForStatement(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TryStatement(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Catches(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Catches_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_CatchClause(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CatchClause_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_CatchFormalParameter(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CatchType(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Finally(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Finally_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ResourceSpecification(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ResourceList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Resource(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Expression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Expression_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Primary(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryRest_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ParExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassCreator(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassCreatorHeader(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassTypeWithDiamond(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeArgumentsOrDiamond_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ArrayCreator(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DimExpr_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Arguments(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Arguments_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ArgumentList_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_UnaryExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpressionNotPlusMinus(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CastExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InfixExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InfixOperator(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConditionalExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_AssignmentExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Assignment(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LeftHandSide(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_AssignmentOperator(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LambdaExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LambdaParameters(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InferredFormalParameterList(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LambdaBody(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConstantExpression(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Spacing__choice284(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Spacing__choice284_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Spacing__choice285(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Spacing__choice286(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Spacing__choice287(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Spacing__choice287_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Keyword__choice288(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_IntegerLiteral__choice289(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_IntegerLiteral__choice290(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_IntegerLiteral__choice290_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_HexNumeral__choice291(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryNumeral__choice292(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryNumeral__choice293(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryNumeral__choice294(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FloatLiteral__choice295(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral__choice296(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral__choice296_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_DecimalFloatingPointLiteral__choice297(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral__choice297_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_DecimalFloatingPointLiteral__choice298(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral__choice298_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_DecimalFloatingPointLiteral__choice299(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Exponent__choice300(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Exponent__choice301(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Exponent__choice301_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_HexadecimalFloatingPointLiteral__choice302(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexadecimalFloatingPointLiteral__choice302_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_HexSignificand__choice303(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryExponent__choice304(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryExponent__choice305(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryExponent__choice305_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_CharLiteral__choice306(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CharLiteral__choice307(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StringLiteral__choice308(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StringLiteral__choice309(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StringLiteral__choice309_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Escape__choice310(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Escape__choice311(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OctalEscape__choice312(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_AND__choice313(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_GT__choice314(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LT__choice315(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_MINUS__choice316(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OR__choice317(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PLUS__choice318(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SR__choice319(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeBound__choice320(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FormalParameterList__choice321(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Annotation__choice322(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpression__choice323(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpression__choice324(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpression__choice325(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpression__choice326(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SwitchLabel__choice327(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__choice328(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__choice329(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__choice330(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__choice331(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryRest__choice332(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpression__choice333(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpression__choice334(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpressionNotPlusMinus__choice335(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpressionNotPlusMinus__choice336(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpressionNotPlusMinus__choice336_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_InfixExpression__choice337(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InfixExpression__choice337_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Identifier__auto338(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalNumeral__auto339(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalNumeral__auto339_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_DecimalNumeral__auto340(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OctalNumeral__auto341(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_OctalNumeral__auto341_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_BinaryNumeral__auto342(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_BinaryNumeral__auto342_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_DecimalFloatingPointLiteral__auto343(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral__auto344(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral__auto345(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_DecimalFloatingPointLiteral__auto346(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexSignificand__auto347(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexSignificand__auto348(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexDigits__auto349(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_HexDigits__auto349_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Digits__auto350(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Digits__auto350_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ReferenceType__auto351(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ReferenceType__auto352(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassType__auto353(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassType__auto353_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ArrayType__auto354(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ArrayType__auto355(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeArgumentList__auto356(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeArgumentList__auto356_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_WildcardBounds__auto357(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_WildcardBounds__auto358(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_QualIdent__auto359(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_QualIdent__auto359_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_PackageDeclaration__auto360(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PackageDeclaration__auto360_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ImportDeclaration__auto361(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ImportDeclaration__auto362(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ImportDeclaration__auto362_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ImportDeclaration__auto363(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeParameterList__auto364(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TypeParameterList__auto364_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_InterfaceTypeList__auto365(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InterfaceTypeList__auto365_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_VariableDeclaratorList__auto366(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableDeclaratorList__auto366_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_VariableDeclarator__auto367(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableDeclarator__auto367_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_UnannClassType__auto368(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnannClassType__auto368_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_UnannType__auto369(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnannType__auto370(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FormalParameterList__auto371(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FormalParameterList__auto371_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_FormalParameter__auto372(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_FormalParameter__auto373(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ReceiverParameter__auto374(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ReceiverParameter__auto374_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ExceptionTypeList__auto375(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ExceptionTypeList__auto375_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ExplicitConstructorInvocation__auto376(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ExplicitConstructorInvocation__auto377(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ExplicitConstructorInvocation__auto378(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ExplicitConstructorInvocation__auto379(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EnumConstantList__auto380(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_EnumConstantList__auto380_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ElementValuePairList__auto381(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ElementValuePairList__auto381_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ElementValueList__auto382(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ElementValueList__auto382_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_VariableInitializerList__auto383(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_VariableInitializerList__auto383_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Statement__auto384(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Statement__auto384_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Statement__auto385(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Statement__auto385_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_StatementExpression__auto386(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpression__auto387(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SwitchLabel__auto388(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_SwitchLabel__auto389(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpressionList__auto390(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_StatementExpressionList__auto390_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TryStatement__auto391(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TryStatement__auto392(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_TryStatement__auto393(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CatchType__auto394(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CatchType__auto394_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_ResourceList__auto395(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ResourceList__auto395_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_PrimaryBase__auto396(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto397(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto398(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto399(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto400(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto400_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_PrimaryBase__auto401(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto402(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto403(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__auto404(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryRest__auto405(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryRest__auto406(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryRest__auto407(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassTypeWithDiamond__auto408(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ClassTypeWithDiamond__auto408_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_TypeArgumentsOrDiamond__auto409(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ArrayCreator__auto410(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ArrayCreator__auto411(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ArgumentList__auto412(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ArgumentList__auto412_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_UnaryExpression__auto413(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpression__auto414(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpression__auto415(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpressionNotPlusMinus__auto416(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpressionNotPlusMinus__auto417(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_UnaryExpressionNotPlusMinus__auto418(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CastExpression__auto419(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CastExpression__auto420(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_CastExpression__auto421(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConditionalExpression__auto422(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_ConditionalExpression__auto422_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_LambdaParameters__auto423(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_LambdaParameters__auto424(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InferredFormalParameterList__auto425(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_InferredFormalParameterList__auto425_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Spacing__choice287__auto426(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Spacing__choice287__auto426_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_Spacing__choice287__auto427(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_Spacing__choice287__auto427_s(st : SyntaxTree) -> [SyntaxTree];
	get_Compilation_PrimaryBase__choice331__auto428(st : SyntaxTree) -> SyntaxTree;
	get_Compilation_PrimaryBase__choice331__auto428_s(st : SyntaxTree) -> [SyntaxTree];

}

get_Compilation_Spacing(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Compilation) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_Identifier) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ABSTRACT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ASSERT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_BOOLEAN) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_BREAK) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_BYTE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_CASE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_CATCH) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_CHAR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_CLASS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_CONTINUE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DEFAULT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DOUBLE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DO) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ELSE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ENUM) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EXTENDS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_FALSE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_FINALLY) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_FINAL) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_FLOAT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_FOR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_IF) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_IMPLEMENTS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_IMPORT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_INTERFACE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_INT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_INSTANCEOF) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LONG) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_NATIVE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_NEW) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_NULL) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PACKAGE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PRIVATE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PROTECTED) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PUBLIC) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_RETURN) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SHORT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_STATIC) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_STRICTFP) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SUPER) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SWITCH) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SYNCHRONIZED) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_THIS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_THROWS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_THROW) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_TRANSIENT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_TRUE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_TRY) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_VOID) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_VOLATILE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_WHILE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_IntegerLiteral) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_FloatLiteral) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_CharLiteral) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_StringLiteral) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_AT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_COLONCOLON) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_COMMA) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DOT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ELLIPSIS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LPAR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LBRK) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_RBRK) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_RPAR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LWING) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_RWING) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SEMI) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_AND) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ANDAND) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ANDEQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ARROW) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_BANG) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_BSR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_BSREQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_COLON) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DEC) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DIV) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DIVEQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EQUAL) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_GE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_GT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_HAT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_HATEQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_INC) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LE) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LPOINT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MINUS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MINUSEQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MOD) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MODEQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_NOTEQUAL) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_OR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_OREQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_OROR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PLUS) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PLUSEQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_QUERY) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_RPOINT) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SL) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SLEQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SREQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_STAR) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_STAREQU) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_TILDE) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Identifier(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassType) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_TypeVariable) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_TypeParameter) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_QualIdent) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PackageDeclaration) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_NormalClassHeader) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_VariableDeclaratorId) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_UnannClassType) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MethodDeclarator) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ConstructorDeclarator) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_EnumDeclaration) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_EnumConstant) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_NormalInterfaceDeclaration) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeDeclaration) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ElementValuePair) {
		st.children[0][0];
	} else if (st.choice == 16 && st.rule == st_Statement) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EnumConstantName) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ClassTypeWithDiamond) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_LambdaParameters) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_InferredFormalParameterList) {
		st.children[0][0];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 0) {
		get_Compilation_PrimaryBase__choice328(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 1) {
		get_Compilation_PrimaryBase__choice328(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 2) {
		get_Compilation_PrimaryBase__choice328(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 2) {
		get_Compilation_PrimaryBase__choice330(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 3) {
		get_Compilation_PrimaryBase__choice330(st).children[3][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 4) {
		get_Compilation_PrimaryBase__choice330(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 5) {
		get_Compilation_PrimaryBase__choice330(st).children[3][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 4) {
		get_Compilation_PrimaryBase__choice331(st).children[2][0];
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 0) {
		get_Compilation_PrimaryRest__choice332(st).children[1][0];
	} else if (get_Compilation_PrimaryRest__choice332(st) != failSyntaxTree) {
		get_Compilation_PrimaryRest__choice332(st);
	} else if (get_Compilation_ClassType__auto353(st).choice == 0) {
		get_Compilation_ClassType__auto353(st).children[2][0];
	} else if (get_Compilation_QualIdent__auto359(st).choice == 0) {
		get_Compilation_QualIdent__auto359(st).children[1][0];
	} else if (get_Compilation_PackageDeclaration__auto360(st).choice == 0) {
		get_Compilation_PackageDeclaration__auto360(st).children[1][0];
	} else if (get_Compilation_UnannClassType__auto368(st).choice == 0) {
		get_Compilation_UnannClassType__auto368(st).children[2][0];
	} else if (get_Compilation_ReceiverParameter__auto374(st).choice == 0) {
		get_Compilation_ReceiverParameter__auto374(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__auto402(st).choice == 0) {
		get_Compilation_PrimaryBase__auto402(st).children[3][0];
	} else if (get_Compilation_PrimaryRest__auto407(st).choice == 0) {
		get_Compilation_PrimaryRest__auto407(st).children[2][0];
	} else if (get_Compilation_ClassTypeWithDiamond__auto408(st).choice == 0) {
		get_Compilation_ClassTypeWithDiamond__auto408(st).children[2][0];
	} else if (get_Compilation_InferredFormalParameterList__auto425(st).choice == 0) {
		get_Compilation_InferredFormalParameterList__auto425(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_Letter(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Identifier__auto338(st).choice == 0) {
		get_Compilation_Identifier__auto338(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_ABSTRACT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 4 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 4 && st.rule == st_InterfaceModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_InterfaceMethodModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_AnnotationTypeElementModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ASSERT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 13 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_BOOLEAN(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_BREAK(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 11 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_BYTE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CASE(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_SwitchLabel__auto388(st).choice == 0) {
		get_Compilation_SwitchLabel__auto388(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_CATCH(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CatchClause) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CHAR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CLASS(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_NormalClassHeader) {
		st.children[1][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 3) {
		get_Compilation_PrimaryBase__choice331(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__auto399(st).choice == 0) {
		get_Compilation_PrimaryBase__auto399(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__auto401(st).choice == 0) {
		get_Compilation_PrimaryBase__auto401(st).children[3][0];
	} else failSyntaxTree
}
get_Compilation_CONTINUE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 12 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DEFAULT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_InterfaceMethodModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_DefaultValue) {
		st.children[0][0];
	} else if (get_Compilation_SwitchLabel__auto389(st).choice == 0) {
		get_Compilation_SwitchLabel__auto389(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_DOUBLE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DO(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ELSE(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Statement__auto384(st).choice == 0) {
		get_Compilation_Statement__auto384(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_ENUM(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_EnumDeclaration) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_EXTENDS(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeBound) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_Superclass) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ExtendsInterfaces) {
		st.children[0][0];
	} else if (get_Compilation_WildcardBounds__auto357(st).choice == 0) {
		get_Compilation_WildcardBounds__auto357(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_FALSE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_BooleanLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_FINALLY(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Finally) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_FINAL(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 5 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_VariableModifier) {
		st.children[0][0];
	} else if (st.choice == 6 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_ConstantModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_FLOAT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_FOR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_IF(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_IMPLEMENTS(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Superinterfaces) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_IMPORT(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_ImportDeclaration__auto361(st).choice == 0) {
		get_Compilation_ImportDeclaration__auto361(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_INTERFACE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_NormalInterfaceDeclaration) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeDeclaration) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_INT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_INSTANCEOF(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_InfixExpression__choice337(st).choice == 1) {
		get_Compilation_InfixExpression__choice337(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_LONG(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_NATIVE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 8 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_NEW(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__choice330(st).choice == 1) {
		get_Compilation_PrimaryBase__choice330(st).children[0][0];
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 2) {
		get_Compilation_PrimaryRest__choice332(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__auto397(st).choice == 0) {
		get_Compilation_PrimaryBase__auto397(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__auto403(st).choice == 0) {
		get_Compilation_PrimaryBase__auto403(st).children[3][0];
	} else if (get_Compilation_PrimaryBase__auto404(st).choice == 0) {
		get_Compilation_PrimaryBase__auto404(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_NULL(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_NullLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PACKAGE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_PackageDeclaration) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_PRIVATE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_ConstructorModifier) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_InterfaceModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PROTECTED(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_ConstructorModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_InterfaceModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PUBLIC(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_ConstructorModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_InterfaceModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_ConstantModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_InterfaceMethodModifier) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_AnnotationTypeElementModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_RETURN(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 9 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SHORT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_BasicType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_STATIC(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 4 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else if (st.choice == 5 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_StaticInitializer) {
		st.children[0][0];
	} else if (st.choice == 5 && st.rule == st_InterfaceModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_ConstantModifier) {
		st.children[0][0];
	} else if (st.choice == 4 && st.rule == st_InterfaceMethodModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_STRICTFP(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 9 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 6 && st.rule == st_InterfaceModifier) {
		st.children[0][0];
	} else if (st.choice == 5 && st.rule == st_InterfaceMethodModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SUPER(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__choice330(st).choice == 3) {
		get_Compilation_PrimaryBase__choice330(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 4) {
		get_Compilation_PrimaryBase__choice330(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 5) {
		get_Compilation_PrimaryBase__choice330(st).children[0][0];
	} else if (get_Compilation_WildcardBounds__auto358(st).choice == 0) {
		get_Compilation_WildcardBounds__auto358(st).children[0][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto377(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto377(st).children[1][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[3][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[3][0];
	} else if (get_Compilation_PrimaryBase__auto396(st).choice == 0) {
		get_Compilation_PrimaryBase__auto396(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_SWITCH(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SYNCHRONIZED(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 8 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_THIS(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ReceiverParameter) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else if (get_Compilation_PrimaryBase__choice330(st) != failSyntaxTree) {
		get_Compilation_PrimaryBase__choice330(st);
	} else if (get_Compilation_ExplicitConstructorInvocation__auto376(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto376(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_THROWS(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Throws) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_THROW(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 10 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TRANSIENT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TRUE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BooleanLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TRY(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_TryStatement__auto391(st).choice == 0) {
		get_Compilation_TryStatement__auto391(st).children[0][0];
	} else if (get_Compilation_TryStatement__auto392(st).choice == 0) {
		get_Compilation_TryStatement__auto392(st).children[0][0];
	} else if (get_Compilation_TryStatement__auto393(st).choice == 0) {
		get_Compilation_TryStatement__auto393(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_VOID(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_Result) {
		st.children[0][0];
	} else if (get_Compilation_PrimaryBase__auto399(st).choice == 0) {
		get_Compilation_PrimaryBase__auto399(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_VOLATILE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_WHILE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_Statement) {
		st.children[0][0];
	} else if (st.choice == 5 && st.rule == st_Statement) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_Literal(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_IntegerLiteral(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_Literal) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DecimalNumeral(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_IntegerLiteral__choice289(st) != failSyntaxTree) {
		get_Compilation_IntegerLiteral__choice289(st);
	} else failSyntaxTree
}
get_Compilation_HexNumeral(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_IntegerLiteral__choice289(st) != failSyntaxTree) {
		get_Compilation_IntegerLiteral__choice289(st);
	} else if (get_Compilation_HexSignificand__auto348(st).choice == 0) {
		get_Compilation_HexSignificand__auto348(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_OctalNumeral(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_IntegerLiteral__choice289(st) != failSyntaxTree) {
		get_Compilation_IntegerLiteral__choice289(st);
	} else failSyntaxTree
}
get_Compilation_BinaryNumeral(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_IntegerLiteral__choice289(st) != failSyntaxTree) {
		get_Compilation_IntegerLiteral__choice289(st);
	} else failSyntaxTree
}
get_Compilation_FloatLiteral(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Literal) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_FloatLiteral__choice295(st) != failSyntaxTree) {
		get_Compilation_FloatLiteral__choice295(st);
	} else failSyntaxTree
}
get_Compilation_Exponent(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_DecimalFloatingPointLiteral__auto345(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto345(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_HexadecimalFloatingPointLiteral(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_FloatLiteral__choice295(st) != failSyntaxTree) {
		get_Compilation_FloatLiteral__choice295(st);
	} else failSyntaxTree
}
get_Compilation_HexSignificand(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_HexadecimalFloatingPointLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_HexDigits(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_HexNumeral) {
		st.children[1][0];
	} else if (get_Compilation_HexSignificand__auto347(st).choice == 0) {
		get_Compilation_HexSignificand__auto347(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_HexDigit(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_HexDigits) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_UnicodeEscape) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_UnicodeEscape) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_UnicodeEscape) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_UnicodeEscape) {
		st.children[3][0];
	} else if (get_Compilation_HexDigits__auto349(st).choice == 0) {
		get_Compilation_HexDigits__auto349(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_BinaryExponent(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_HexadecimalFloatingPointLiteral) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_Digits(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Exponent) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_BinaryExponent) {
		st.children[2][0];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto343(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto343(st).children[0][0];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto344(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto344(st).children[0][0];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto345(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto345(st).children[0][0];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto346(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto346(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_BooleanLiteral(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_Literal) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CharLiteral(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_Literal) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_StringLiteral(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_Literal) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Escape(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_CharLiteral__choice307(st) != failSyntaxTree) {
		get_Compilation_CharLiteral__choice307(st);
	} else if (get_Compilation_StringLiteral__choice309(st) != failSyntaxTree) {
		get_Compilation_StringLiteral__choice309(st);
	} else failSyntaxTree
}
get_Compilation_OctalEscape(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Escape__choice311(st) != failSyntaxTree) {
		get_Compilation_Escape__choice311(st);
	} else failSyntaxTree
}
get_Compilation_UnicodeEscape(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Escape__choice311(st) != failSyntaxTree) {
		get_Compilation_Escape__choice311(st);
	} else failSyntaxTree
}
get_Compilation_NullLiteral(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_Literal) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_AT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_AnnotationTypeDeclaration) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_Annotation) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_COLONCOLON(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__choice328(st).choice == 2) {
		get_Compilation_PrimaryBase__choice328(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 5) {
		get_Compilation_PrimaryBase__choice330(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 4) {
		get_Compilation_PrimaryBase__choice331(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__auto402(st).choice == 0) {
		get_Compilation_PrimaryBase__auto402(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__auto403(st).choice == 0) {
		get_Compilation_PrimaryBase__auto403(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__auto404(st).choice == 0) {
		get_Compilation_PrimaryBase__auto404(st).children[1][0];
	} else if (get_Compilation_PrimaryRest__auto407(st).choice == 0) {
		get_Compilation_PrimaryRest__auto407(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_COMMA(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_TypeArgumentList__auto356(st).choice == 0) {
		get_Compilation_TypeArgumentList__auto356(st).children[0][0];
	} else if (get_Compilation_TypeParameterList__auto364(st).choice == 0) {
		get_Compilation_TypeParameterList__auto364(st).children[0][0];
	} else if (get_Compilation_InterfaceTypeList__auto365(st).choice == 0) {
		get_Compilation_InterfaceTypeList__auto365(st).children[0][0];
	} else if (get_Compilation_VariableDeclaratorList__auto366(st).choice == 0) {
		get_Compilation_VariableDeclaratorList__auto366(st).children[0][0];
	} else if (get_Compilation_FormalParameterList__auto371(st).choice == 0) {
		get_Compilation_FormalParameterList__auto371(st).children[0][0];
	} else if (get_Compilation_ExceptionTypeList__auto375(st).choice == 0) {
		get_Compilation_ExceptionTypeList__auto375(st).children[0][0];
	} else if (get_Compilation_EnumConstantList__auto380(st).choice == 0) {
		get_Compilation_EnumConstantList__auto380(st).children[0][0];
	} else if (get_Compilation_ElementValuePairList__auto381(st).choice == 0) {
		get_Compilation_ElementValuePairList__auto381(st).children[0][0];
	} else if (get_Compilation_ElementValueList__auto382(st).choice == 0) {
		get_Compilation_ElementValueList__auto382(st).children[0][0];
	} else if (get_Compilation_VariableInitializerList__auto383(st).choice == 0) {
		get_Compilation_VariableInitializerList__auto383(st).children[0][0];
	} else if (get_Compilation_StatementExpressionList__auto390(st).choice == 0) {
		get_Compilation_StatementExpressionList__auto390(st).children[0][0];
	} else if (get_Compilation_ArgumentList__auto412(st).choice == 0) {
		get_Compilation_ArgumentList__auto412(st).children[0][0];
	} else if (get_Compilation_InferredFormalParameterList__auto425(st).choice == 0) {
		get_Compilation_InferredFormalParameterList__auto425(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_DOT(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__choice328(st).choice == 0) {
		get_Compilation_PrimaryBase__choice328(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 1) {
		get_Compilation_PrimaryBase__choice328(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 3) {
		get_Compilation_PrimaryBase__choice330(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 4) {
		get_Compilation_PrimaryBase__choice330(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 2) {
		get_Compilation_PrimaryBase__choice331(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 3) {
		get_Compilation_PrimaryBase__choice331(st).children[1][0];
	} else if (get_Compilation_ClassType__auto353(st).choice == 0) {
		get_Compilation_ClassType__auto353(st).children[0][0];
	} else if (get_Compilation_QualIdent__auto359(st).choice == 0) {
		get_Compilation_QualIdent__auto359(st).children[0][0];
	} else if (get_Compilation_PackageDeclaration__auto360(st).choice == 0) {
		get_Compilation_PackageDeclaration__auto360(st).children[0][0];
	} else if (get_Compilation_ImportDeclaration__auto362(st).choice == 0) {
		get_Compilation_ImportDeclaration__auto362(st).children[0][0];
	} else if (get_Compilation_UnannClassType__auto368(st).choice == 0) {
		get_Compilation_UnannClassType__auto368(st).children[0][0];
	} else if (get_Compilation_ReceiverParameter__auto374(st).choice == 0) {
		get_Compilation_ReceiverParameter__auto374(st).children[1][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[1][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__auto399(st).choice == 0) {
		get_Compilation_PrimaryBase__auto399(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__auto401(st).choice == 0) {
		get_Compilation_PrimaryBase__auto401(st).children[2][0];
	} else if (get_Compilation_PrimaryRest__auto405(st).choice == 0) {
		get_Compilation_PrimaryRest__auto405(st).children[0][0];
	} else if (get_Compilation_ClassTypeWithDiamond__auto408(st).choice == 0) {
		get_Compilation_ClassTypeWithDiamond__auto408(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_ELLIPSIS(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_FormalParameter__auto373(st).choice == 0) {
		get_Compilation_FormalParameter__auto373(st).children[3][0];
	} else failSyntaxTree
}
get_Compilation_LPAR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodDeclarator) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ConstructorDeclarator) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_NormalAnnotation) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_SingleElementAnnotation) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_CatchClause) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ResourceSpecification) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ParExpression) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_Arguments) {
		st.children[0][0];
	} else if (get_Compilation_CastExpression__auto419(st).choice == 0) {
		get_Compilation_CastExpression__auto419(st).children[0][0];
	} else if (get_Compilation_CastExpression__auto420(st).choice == 0) {
		get_Compilation_CastExpression__auto420(st).children[0][0];
	} else if (get_Compilation_CastExpression__auto421(st).choice == 0) {
		get_Compilation_CastExpression__auto421(st).children[0][0];
	} else if (get_Compilation_LambdaParameters__auto423(st).choice == 0) {
		get_Compilation_LambdaParameters__auto423(st).children[0][0];
	} else if (get_Compilation_LambdaParameters__auto424(st).choice == 0) {
		get_Compilation_LambdaParameters__auto424(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_LBRK(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Dim) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_DimExpr) {
		st.children[1][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 0) {
		get_Compilation_PrimaryBase__choice331(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__auto400(st).choice == 0) {
		get_Compilation_PrimaryBase__auto400(st).children[0][0];
	} else if (get_Compilation_PrimaryRest__auto406(st).choice == 0) {
		get_Compilation_PrimaryRest__auto406(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__choice331__auto428(st).choice == 0) {
		get_Compilation_PrimaryBase__choice331__auto428(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_RBRK(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Dim) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_DimExpr) {
		st.children[3][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 0) {
		get_Compilation_PrimaryBase__choice331(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__auto400(st).choice == 0) {
		get_Compilation_PrimaryBase__auto400(st).children[1][0];
	} else if (get_Compilation_PrimaryRest__auto406(st).choice == 0) {
		get_Compilation_PrimaryRest__auto406(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__choice331__auto428(st).choice == 0) {
		get_Compilation_PrimaryBase__choice331__auto428(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_RPAR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodDeclarator) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ConstructorDeclarator) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_NormalAnnotation) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_SingleElementAnnotation) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_CatchClause) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ResourceSpecification) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ParExpression) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_Arguments) {
		st.children[2][0];
	} else if (get_Compilation_CastExpression__auto419(st).choice == 0) {
		get_Compilation_CastExpression__auto419(st).children[2][0];
	} else if (get_Compilation_CastExpression__auto420(st).choice == 0) {
		get_Compilation_CastExpression__auto420(st).children[3][0];
	} else if (get_Compilation_CastExpression__auto421(st).choice == 0) {
		get_Compilation_CastExpression__auto421(st).children[3][0];
	} else if (get_Compilation_LambdaParameters__auto423(st).choice == 0) {
		get_Compilation_LambdaParameters__auto423(st).children[2][0];
	} else if (get_Compilation_LambdaParameters__auto424(st).choice == 0) {
		get_Compilation_LambdaParameters__auto424(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_LWING(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ConstructorBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EnumBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_InterfaceBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ElementValueArrayInitializer) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ArrayInitializer) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_Block) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SwitchBlock) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_RWING(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassBody) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ConstructorBody) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_EnumBody) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_InterfaceBody) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeBody) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ElementValueArrayInitializer) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_ArrayInitializer) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_Block) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_SwitchBlock) {
		st.children[3][0];
	} else failSyntaxTree
}
get_Compilation_SEMI(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_PackageDeclaration) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_ImportDeclaration) {
		st.children[1][0];
	} else if (st.choice == 4 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_FieldDeclaration) {
		st.children[3][0];
	} else if (st.choice == 1 && st.rule == st_MethodBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EnumBodyDeclarations) {
		st.children[0][0];
	} else if (st.choice == 4 && st.rule == st_InterfaceMemberDeclaration) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ConstantDeclaration) {
		st.children[3][0];
	} else if (st.choice == 4 && st.rule == st_AnnotationTypeMemberDeclaration) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[7][0];
	} else if (st.choice == 0 && st.rule == st_LocalVariableDeclarationStatement) {
		st.children[1][0];
	} else if (st.choice == 5 && st.rule == st_Statement) {
		st.children[4][0];
	} else if (st.choice == 9 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 10 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 11 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 12 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 13 && st.rule == st_Statement) {
		st.children[3][0];
	} else if (st.choice == 14 && st.rule == st_Statement) {
		st.children[0][0];
	} else if (st.choice == 15 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[5][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto376(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto376(st).children[3][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto377(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto377(st).children[3][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[5][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[5][0];
	} else if (get_Compilation_ResourceList__auto395(st).choice == 0) {
		get_Compilation_ResourceList__auto395(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_AND(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_AdditionalBound) {
		st.children[0][0];
	} else if (st.choice == 4 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ANDAND(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ANDEQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 9 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ARROW(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_LambdaExpression) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_BANG(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_UnaryExpressionNotPlusMinus__auto417(st).choice == 0) {
		get_Compilation_UnaryExpressionNotPlusMinus__auto417(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_BSR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 13 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_BSREQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 8 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_COLON(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 16 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[5][0];
	} else if (get_Compilation_Statement__auto385(st).choice == 0) {
		get_Compilation_Statement__auto385(st).children[0][0];
	} else if (get_Compilation_SwitchLabel__auto388(st).choice == 0) {
		get_Compilation_SwitchLabel__auto388(st).children[2][0];
	} else if (get_Compilation_SwitchLabel__auto389(st).choice == 0) {
		get_Compilation_SwitchLabel__auto389(st).children[1][0];
	} else if (get_Compilation_ConditionalExpression__auto422(st).choice == 0) {
		get_Compilation_ConditionalExpression__auto422(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_DEC(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_StatementExpression__choice323(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice323(st);
	} else if (get_Compilation_StatementExpression__choice326(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice326(st);
	} else if (get_Compilation_UnaryExpression__choice333(st) != failSyntaxTree) {
		get_Compilation_UnaryExpression__choice333(st);
	} else if (get_Compilation_UnaryExpressionNotPlusMinus__choice336(st) != failSyntaxTree) {
		get_Compilation_UnaryExpressionNotPlusMinus__choice336(st);
	} else failSyntaxTree
}
get_Compilation_DIV(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 17 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DIVEQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_EQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ElementValuePair) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_Resource) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else if (get_Compilation_VariableDeclarator__auto367(st).choice == 0) {
		get_Compilation_VariableDeclarator__auto367(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_EQUAL(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_GE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 10 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_GT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 8 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_HAT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_HATEQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 10 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_INC(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_StatementExpression__choice323(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice323(st);
	} else if (get_Compilation_StatementExpression__choice326(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice326(st);
	} else if (get_Compilation_UnaryExpression__choice333(st) != failSyntaxTree) {
		get_Compilation_UnaryExpression__choice333(st);
	} else if (get_Compilation_UnaryExpressionNotPlusMinus__choice336(st) != failSyntaxTree) {
		get_Compilation_UnaryExpressionNotPlusMinus__choice336(st);
	} else failSyntaxTree
}
get_Compilation_LE(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 9 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_LPOINT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeArguments) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_TypeParameters) {
		st.children[0][0];
	} else if (get_Compilation_TypeArgumentsOrDiamond__auto409(st).choice == 0) {
		get_Compilation_TypeArgumentsOrDiamond__auto409(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_LT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_MINUS(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 15 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else if (get_Compilation_UnaryExpression__auto415(st).choice == 0) {
		get_Compilation_UnaryExpression__auto415(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_MINUSEQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_MOD(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 18 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_MODEQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_NOTEQUAL(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_OR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else if (get_Compilation_CatchType__auto394(st).choice == 0) {
		get_Compilation_CatchType__auto394(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_OREQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 11 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_OROR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PLUS(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 14 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else if (get_Compilation_UnaryExpression__auto414(st).choice == 0) {
		get_Compilation_UnaryExpression__auto414(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_PLUSEQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_QUERY(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Wildcard) {
		st.children[1][0];
	} else if (get_Compilation_ConditionalExpression__auto422(st).choice == 0) {
		get_Compilation_ConditionalExpression__auto422(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_RPOINT(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeArguments) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_TypeParameters) {
		st.children[2][0];
	} else if (get_Compilation_TypeArgumentsOrDiamond__auto409(st).choice == 0) {
		get_Compilation_TypeArgumentsOrDiamond__auto409(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_SL(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 11 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SLEQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 12 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SREQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_STAR(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 16 && st.rule == st_InfixOperator) {
		st.children[0][0];
	} else if (get_Compilation_ImportDeclaration__auto362(st).choice == 0) {
		get_Compilation_ImportDeclaration__auto362(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_STAREQU(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_AssignmentOperator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TILDE(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_UnaryExpressionNotPlusMinus__auto416(st).choice == 0) {
		get_Compilation_UnaryExpressionNotPlusMinus__auto416(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_BasicType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_PrimitiveType) {
		st.children[1][0];
	} else if (get_Compilation_UnannType__auto369(st).choice == 0) {
		get_Compilation_UnannType__auto369(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__auto401(st).choice == 0) {
		get_Compilation_PrimaryBase__auto401(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimitiveType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Type) {
		st.children[0][0];
	} else if (get_Compilation_ReferenceType__auto351(st).choice == 0) {
		get_Compilation_ReferenceType__auto351(st).children[0][0];
	} else if (get_Compilation_ArrayType__auto354(st).choice == 0) {
		get_Compilation_ArrayType__auto354(st).children[0][0];
	} else if (get_Compilation_CastExpression__auto419(st).choice == 0) {
		get_Compilation_CastExpression__auto419(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_ReferenceType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeArgument) {
		st.children[0][0];
	} else if (get_Compilation_InfixExpression__choice337(st).choice == 1) {
		get_Compilation_InfixExpression__choice337(st).children[1][0];
	} else if (get_Compilation_WildcardBounds__auto357(st).choice == 0) {
		get_Compilation_WildcardBounds__auto357(st).children[1][0];
	} else if (get_Compilation_WildcardBounds__auto358(st).choice == 0) {
		get_Compilation_WildcardBounds__auto358(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__auto402(st).choice == 0) {
		get_Compilation_PrimaryBase__auto402(st).children[0][0];
	} else if (get_Compilation_CastExpression__auto420(st).choice == 0) {
		get_Compilation_CastExpression__auto420(st).children[1][0];
	} else if (get_Compilation_CastExpression__auto421(st).choice == 0) {
		get_Compilation_CastExpression__auto421(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_ClassType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_Type) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_AdditionalBound) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_Superclass) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_InterfaceTypeList) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ExceptionType) {
		st.children[0][0];
	} else if (get_Compilation_TypeBound__choice320(st).choice == 0) {
		get_Compilation_TypeBound__choice320(st).children[0][0];
	} else if (get_Compilation_ReferenceType__auto352(st).choice == 0) {
		get_Compilation_ReferenceType__auto352(st).children[0][0];
	} else if (get_Compilation_ArrayType__auto355(st).choice == 0) {
		get_Compilation_ArrayType__auto355(st).children[0][0];
	} else if (get_Compilation_InterfaceTypeList__auto365(st).choice == 0) {
		get_Compilation_InterfaceTypeList__auto365(st).children[1][0];
	} else if (get_Compilation_CatchType__auto394(st).choice == 0) {
		get_Compilation_CatchType__auto394(st).children[1][0];
	} else if (get_Compilation_PrimaryBase__auto403(st).choice == 0) {
		get_Compilation_PrimaryBase__auto403(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_Type(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_ArrayCreator__auto410(st).choice == 0) {
		get_Compilation_ArrayCreator__auto410(st).children[0][0];
	} else if (get_Compilation_ArrayCreator__auto411(st).choice == 0) {
		get_Compilation_ArrayCreator__auto411(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_ArrayType(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__auto404(st).choice == 0) {
		get_Compilation_PrimaryBase__auto404(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_TypeVariable(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ExceptionType) {
		st.children[0][0];
	} else if (get_Compilation_TypeBound__choice320(st) != failSyntaxTree) {
		get_Compilation_TypeBound__choice320(st);
	} else failSyntaxTree
}
get_Compilation_TypeParameter(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeParameterList) {
		st.children[0][0];
	} else if (get_Compilation_TypeParameterList__auto364(st).choice == 0) {
		get_Compilation_TypeParameterList__auto364(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_TypeArguments(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeArgumentsOrDiamond) {
		st.children[0][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 2) {
		get_Compilation_PrimaryBase__choice330(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_TypeArgumentList(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeArguments) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_TypeArgument(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeArgumentList) {
		st.children[0][0];
	} else if (get_Compilation_TypeArgumentList__auto356(st).choice == 0) {
		get_Compilation_TypeArgumentList__auto356(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_Wildcard(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_TypeArgument) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_QualIdent(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_NormalAnnotation) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MarkerAnnotation) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SingleElementAnnotation) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_LeftHandSide) {
		st.children[0][0];
	} else if (get_Compilation_StatementExpression__choice324(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice324(st);
	} else if (get_Compilation_StatementExpression__choice325(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice325(st);
	} else if (get_Compilation_UnaryExpression__choice334(st) != failSyntaxTree) {
		get_Compilation_UnaryExpression__choice334(st);
	} else if (get_Compilation_UnaryExpressionNotPlusMinus__choice335(st) != failSyntaxTree) {
		get_Compilation_UnaryExpressionNotPlusMinus__choice335(st);
	} else if (get_Compilation_ImportDeclaration__auto361(st).choice == 0) {
		get_Compilation_ImportDeclaration__auto361(st).children[2][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[0][0];
	} else if (get_Compilation_PrimaryBase__auto398(st).choice == 0) {
		get_Compilation_PrimaryBase__auto398(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_CompilationUnit(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Compilation) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_CompilationUnitHeader(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CompilationUnit) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PackageDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CompilationUnitHeader) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ClassDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeDeclaration) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_InterfaceMemberDeclaration) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_AnnotationTypeMemberDeclaration) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_BlockStatement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_NormalClassDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_NormalClassHeader(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_NormalClassDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TypeParameters(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodHeaderParametrized) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TypeParameterList(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeParameters) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_InterfaceTypeList(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Superinterfaces) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ExtendsInterfaces) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_ClassBody(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_NormalClassDeclaration) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_FieldDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_VariableDeclaratorList(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_FieldDeclaration) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ConstantDeclaration) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_LocalVariableDeclaration) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_VariableDeclarator(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_VariableDeclaratorList) {
		st.children[0][0];
	} else if (get_Compilation_VariableDeclaratorList__auto366(st).choice == 0) {
		get_Compilation_VariableDeclaratorList__auto366(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_VariableDeclaratorId(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_VariableDeclarator) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_CatchFormalParameter) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_Resource) {
		st.children[2][0];
	} else if (get_Compilation_FormalParameter__auto372(st).choice == 0) {
		get_Compilation_FormalParameter__auto372(st).children[2][0];
	} else if (get_Compilation_FormalParameter__auto373(st).choice == 0) {
		get_Compilation_FormalParameter__auto373(st).children[4][0];
	} else failSyntaxTree
}
get_Compilation_VariableInitializer(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_VariableInitializerList) {
		st.children[0][0];
	} else if (get_Compilation_VariableDeclarator__auto367(st).choice == 0) {
		get_Compilation_VariableDeclarator__auto367(st).children[1][0];
	} else if (get_Compilation_VariableInitializerList__auto383(st).choice == 0) {
		get_Compilation_VariableInitializerList__auto383(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_UnannClassType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CatchType) {
		st.children[0][0];
	} else if (get_Compilation_UnannType__auto370(st).choice == 0) {
		get_Compilation_UnannType__auto370(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnannType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_FieldDeclaration) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ReceiverParameter) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_Result) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ConstantDeclaration) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_LocalVariableDeclaration) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[3][0];
	} else if (st.choice == 0 && st.rule == st_Resource) {
		st.children[1][0];
	} else if (get_Compilation_FormalParameter__auto372(st).choice == 0) {
		get_Compilation_FormalParameter__auto372(st).children[1][0];
	} else if (get_Compilation_FormalParameter__auto373(st).choice == 0) {
		get_Compilation_FormalParameter__auto373(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_MethodDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_MethodHeaderSimple(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodHeader) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_MethodHeaderParametrized(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_MethodHeader) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_MethodHeader(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodDeclaration) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_InterfaceMethodDeclaration) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_MethodDeclarator(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodHeaderSimple) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_MethodHeaderParametrized) {
		st.children[3][0];
	} else failSyntaxTree
}
get_Compilation_FormalParameter(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_FormalParameterList__choice321(st) != failSyntaxTree) {
		get_Compilation_FormalParameterList__choice321(st);
	} else if (get_Compilation_FormalParameterList__auto371(st).choice == 0) {
		get_Compilation_FormalParameterList__auto371(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_ReceiverParameter(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_FormalParameterList__choice321(st) != failSyntaxTree) {
		get_Compilation_FormalParameterList__choice321(st);
	} else failSyntaxTree
}
get_Compilation_Result(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodHeaderSimple) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MethodHeaderParametrized) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_ExceptionTypeList(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Throws) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_ExceptionType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ExceptionTypeList) {
		st.children[0][0];
	} else if (get_Compilation_ExceptionTypeList__auto375(st).choice == 0) {
		get_Compilation_ExceptionTypeList__auto375(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_MethodBody(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodDeclaration) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_InterfaceMethodDeclaration) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_InstanceInitializer(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_StaticInitializer(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ConstructorDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ConstructorDeclarator(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ConstructorDeclaration) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_ConstructorBody(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ConstructorDeclaration) {
		st.children[3][0];
	} else failSyntaxTree
}
get_Compilation_EnumDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ClassDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_EnumBody(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_EnumDeclaration) {
		st.children[4][0];
	} else failSyntaxTree
}
get_Compilation_EnumConstant(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_EnumConstantList) {
		st.children[0][0];
	} else if (get_Compilation_EnumConstantList__auto380(st).choice == 0) {
		get_Compilation_EnumConstantList__auto380(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_InterfaceDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_TypeDeclaration) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_ClassBodyDeclaration) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_InterfaceMemberDeclaration) {
		st.children[0][0];
	} else if (st.choice == 3 && st.rule == st_AnnotationTypeMemberDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_NormalInterfaceDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_InterfaceDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_InterfaceBody(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_NormalInterfaceDeclaration) {
		st.children[5][0];
	} else failSyntaxTree
}
get_Compilation_ConstantDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_InterfaceMemberDeclaration) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_AnnotationTypeMemberDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_InterfaceMethodDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_InterfaceMemberDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_AnnotationTypeDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_InterfaceDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_AnnotationTypeBody(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_AnnotationTypeDeclaration) {
		st.children[4][0];
	} else failSyntaxTree
}
get_Compilation_AnnotationTypeElementDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_AnnotationTypeMemberDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Annotation(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeParameterModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_PackageModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ClassModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_FieldModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_VariableModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_MethodModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ConstructorModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_EnumConstantModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_InterfaceModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ConstantModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_InterfaceMethodModifier) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementModifier) {
		st.children[0][0];
	} else if (st.choice == 2 && st.rule == st_ElementValue) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_NormalAnnotation(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Annotation__choice322(st) != failSyntaxTree) {
		get_Compilation_Annotation__choice322(st);
	} else failSyntaxTree
}
get_Compilation_ElementValuePair(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ElementValuePairList) {
		st.children[0][0];
	} else if (get_Compilation_ElementValuePairList__auto381(st).choice == 0) {
		get_Compilation_ElementValuePairList__auto381(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_ElementValue(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_DefaultValue) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_ElementValuePair) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ElementValueList) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_SingleElementAnnotation) {
		st.children[2][0];
	} else if (get_Compilation_ElementValueList__auto382(st).choice == 0) {
		get_Compilation_ElementValueList__auto382(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_ElementValueArrayInitializer(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ElementValue) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_MarkerAnnotation(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Annotation__choice322(st) != failSyntaxTree) {
		get_Compilation_Annotation__choice322(st);
	} else failSyntaxTree
}
get_Compilation_SingleElementAnnotation(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Annotation__choice322(st) != failSyntaxTree) {
		get_Compilation_Annotation__choice322(st);
	} else failSyntaxTree
}
get_Compilation_ArrayInitializer(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_VariableInitializer) {
		st.children[0][0];
	} else if (get_Compilation_ArrayCreator__auto411(st).choice == 0) {
		get_Compilation_ArrayCreator__auto411(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_Block(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_MethodBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_InstanceInitializer) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_StaticInitializer) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_Statement) {
		st.children[0][0];
	} else if (st.choice == 8 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_CatchClause) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_Finally) {
		st.children[1][0];
	} else if (st.choice == 1 && st.rule == st_LambdaBody) {
		st.children[0][0];
	} else if (get_Compilation_TryStatement__auto391(st).choice == 0) {
		get_Compilation_TryStatement__auto391(st).children[1][0];
	} else if (get_Compilation_TryStatement__auto392(st).choice == 0) {
		get_Compilation_TryStatement__auto392(st).children[1][0];
	} else if (get_Compilation_TryStatement__auto393(st).choice == 0) {
		get_Compilation_TryStatement__auto393(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_BlockStatements(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_SwitchBlockStatementGroup) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_BlockStatement(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BlockStatements) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_LocalVariableDeclarationStatement(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BlockStatement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_LocalVariableDeclaration(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_LocalVariableDeclarationStatement) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ForInit) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Statement(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_BlockStatement) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 4 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 5 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 16 && st.rule == st_Statement) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[8][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[8][0];
	} else if (get_Compilation_Statement__auto384(st).choice == 0) {
		get_Compilation_Statement__auto384(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 15 && st.rule == st_Statement) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_StatementExpressionList) {
		st.children[0][0];
	} else if (get_Compilation_StatementExpressionList__auto390(st).choice == 0) {
		get_Compilation_StatementExpressionList__auto390(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_SwitchBlock(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_Statement) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_SwitchLabels(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_SwitchBlockStatementGroup) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SwitchLabel(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_SwitchLabels) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_EnumConstantName(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_SwitchLabel__choice327(st) != failSyntaxTree) {
		get_Compilation_SwitchLabel__choice327(st);
	} else failSyntaxTree
}
get_Compilation_BasicForStatement(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpressionList(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ForInit) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ForUpdate) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_EnhancedForStatement(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TryStatement(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_Statement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Catches(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_TryStatement__auto392(st).choice == 0) {
		get_Compilation_TryStatement__auto392(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_CatchClause(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Catches) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CatchFormalParameter(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CatchClause) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_CatchType(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CatchFormalParameter) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_Finally(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_TryStatement__auto391(st).choice == 0) {
		get_Compilation_TryStatement__auto391(st).children[3][0];
	} else failSyntaxTree
}
get_Compilation_ResourceSpecification(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_TryStatement__auto393(st).choice == 0) {
		get_Compilation_TryStatement__auto393(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_ResourceList(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ResourceSpecification) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_Resource(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ResourceList) {
		st.children[0][0];
	} else if (get_Compilation_ResourceList__auto395(st).choice == 0) {
		get_Compilation_ResourceList__auto395(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_Expression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_VariableInitializer) {
		st.children[0][0];
	} else if (st.choice == 10 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 13 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[6][0];
	} else if (st.choice == 0 && st.rule == st_Resource) {
		st.children[4][0];
	} else if (st.choice == 0 && st.rule == st_ParExpression) {
		st.children[1][0];
	} else if (st.choice == 0 && st.rule == st_DimExpr) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_ArgumentList) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_Assignment) {
		st.children[2][0];
	} else if (st.choice == 0 && st.rule == st_LambdaBody) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_ConstantExpression) {
		st.children[0][0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 0) {
		get_Compilation_PrimaryBase__choice331(st).children[1][0];
	} else if (get_Compilation_Statement__auto385(st).choice == 0) {
		get_Compilation_Statement__auto385(st).children[1][0];
	} else if (get_Compilation_PrimaryRest__auto406(st).choice == 0) {
		get_Compilation_PrimaryRest__auto406(st).children[1][0];
	} else if (get_Compilation_ArgumentList__auto412(st).choice == 0) {
		get_Compilation_ArgumentList__auto412(st).children[1][0];
	} else if (get_Compilation_ConditionalExpression__auto422(st).choice == 0) {
		get_Compilation_ConditionalExpression__auto422(st).children[1][0];
	} else if (get_Compilation_ConditionalExpression__auto422(st).choice == 0) {
		get_Compilation_ConditionalExpression__auto422(st).children[3][0];
	} else failSyntaxTree
}
get_Compilation_Primary(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_StatementExpression) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_LeftHandSide) {
		st.children[0][0];
	} else if (get_Compilation_StatementExpression__choice324(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice324(st);
	} else if (get_Compilation_StatementExpression__choice325(st) != failSyntaxTree) {
		get_Compilation_StatementExpression__choice325(st);
	} else if (get_Compilation_UnaryExpression__choice334(st) != failSyntaxTree) {
		get_Compilation_UnaryExpression__choice334(st);
	} else if (get_Compilation_UnaryExpressionNotPlusMinus__choice335(st) != failSyntaxTree) {
		get_Compilation_UnaryExpressionNotPlusMinus__choice335(st);
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Primary) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ParExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 4 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 5 && st.rule == st_Statement) {
		st.children[3][0];
	} else if (st.choice == 7 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 8 && st.rule == st_Statement) {
		st.children[1][0];
	} else if (st.choice == 2 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ClassCreator(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__choice329(st) != failSyntaxTree) {
		get_Compilation_PrimaryBase__choice329(st);
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 1) {
		get_Compilation_PrimaryBase__choice330(st).children[1][0];
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 2) {
		get_Compilation_PrimaryRest__choice332(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_ClassCreatorHeader(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassCreator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ClassTypeWithDiamond(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassCreatorHeader) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_ArrayCreator(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__choice329(st) != failSyntaxTree) {
		get_Compilation_PrimaryBase__choice329(st);
	} else failSyntaxTree
}
get_Compilation_Arguments(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ClassCreatorHeader) {
		st.children[3][0];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 0) {
		get_Compilation_PrimaryBase__choice328(st).children[3][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 2) {
		get_Compilation_PrimaryBase__choice330(st).children[2][0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 3) {
		get_Compilation_PrimaryBase__choice330(st).children[4][0];
	} else if (get_Compilation_PrimaryBase__choice331(st) != failSyntaxTree) {
		get_Compilation_PrimaryBase__choice331(st);
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 0) {
		get_Compilation_PrimaryRest__choice332(st).children[2][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto376(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto376(st).children[2][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto377(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto377(st).children[2][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[4][0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[4][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_InfixExpression) {
		st.children[0][0];
	} else if (get_Compilation_InfixExpression__choice337(st).choice == 0) {
		get_Compilation_InfixExpression__choice337(st).children[1][0];
	} else if (get_Compilation_UnaryExpression__auto414(st).choice == 0) {
		get_Compilation_UnaryExpression__auto414(st).children[1][0];
	} else if (get_Compilation_UnaryExpression__auto415(st).choice == 0) {
		get_Compilation_UnaryExpression__auto415(st).children[1][0];
	} else if (get_Compilation_UnaryExpressionNotPlusMinus__auto416(st).choice == 0) {
		get_Compilation_UnaryExpressionNotPlusMinus__auto416(st).children[1][0];
	} else if (get_Compilation_UnaryExpressionNotPlusMinus__auto417(st).choice == 0) {
		get_Compilation_UnaryExpressionNotPlusMinus__auto417(st).children[1][0];
	} else if (get_Compilation_CastExpression__auto419(st).choice == 0) {
		get_Compilation_CastExpression__auto419(st).children[3][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpressionNotPlusMinus(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_UnaryExpression) {
		st.children[0][0];
	} else if (get_Compilation_CastExpression__auto421(st).choice == 0) {
		get_Compilation_CastExpression__auto421(st).children[4][0];
	} else failSyntaxTree
}
get_Compilation_CastExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_UnaryExpressionNotPlusMinus) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_InfixExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ConditionalExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_InfixOperator(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_InfixExpression__choice337(st).choice == 0) {
		get_Compilation_InfixExpression__choice337(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_ConditionalExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ElementValue) {
		st.children[0][0];
	} else if (st.choice == 1 && st.rule == st_AssignmentExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_AssignmentExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_Expression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Assignment(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_StatementExpression) {
		st.children[0][0];
	} else if (st.choice == 0 && st.rule == st_AssignmentExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_LeftHandSide(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Assignment) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_AssignmentOperator(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Assignment) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_LambdaExpression(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Expression) {
		st.children[0][0];
	} else if (get_Compilation_CastExpression__auto420(st).choice == 0) {
		get_Compilation_CastExpression__auto420(st).children[4][0];
	} else failSyntaxTree
}
get_Compilation_LambdaParameters(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_LambdaExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_InferredFormalParameterList(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_LambdaParameters__auto424(st).choice == 0) {
		get_Compilation_LambdaParameters__auto424(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_LambdaBody(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_LambdaExpression) {
		st.children[2][0];
	} else failSyntaxTree
}
get_Compilation_ConstantExpression(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_SwitchLabel__choice327(st) != failSyntaxTree) {
		get_Compilation_SwitchLabel__choice327(st);
	} else failSyntaxTree
}
get_Compilation_Spacing__choice284(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Spacing__choice285(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Spacing__choice286(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Spacing__choice287(st).choice == 2) {
		get_Compilation_Spacing__choice287(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_Spacing__choice287(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Keyword__choice288(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Keyword) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_IntegerLiteral__choice289(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_IntegerLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_IntegerLiteral__choice290(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_HexNumeral__choice291(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_HexNumeral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_BinaryNumeral__choice292(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BinaryNumeral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_BinaryNumeral__choice293(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BinaryNumeral) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_BinaryNumeral__choice294(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_BinaryNumeral__auto342(st).choice == 0) {
		get_Compilation_BinaryNumeral__auto342(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_FloatLiteral__choice295(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_FloatLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__choice296(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__choice297(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__choice298(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__choice299(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_DecimalFloatingPointLiteral__auto346(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto346(st).children[2][0];
	} else failSyntaxTree
}
get_Compilation_Exponent__choice300(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Exponent) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Exponent__choice301(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_HexadecimalFloatingPointLiteral__choice302(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_HexSignificand__choice303(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_HexSignificand__auto347(st).choice == 0) {
		get_Compilation_HexSignificand__auto347(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_BinaryExponent__choice304(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_BinaryExponent) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_BinaryExponent__choice305(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_CharLiteral__choice306(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_CharLiteral__choice307(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CharLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_StringLiteral__choice308(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_StringLiteral__choice309(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Escape__choice310(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_Escape__choice311(st) != failSyntaxTree) {
		get_Compilation_Escape__choice311(st);
	} else failSyntaxTree
}
get_Compilation_Escape__choice311(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Escape) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_OctalEscape__choice312(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_OctalEscape) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_AND__choice313(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_GT__choice314(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_LT__choice315(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_MINUS__choice316(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_OR__choice317(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_PLUS__choice318(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_SR__choice319(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_TypeBound__choice320(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TypeBound) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_FormalParameterList__choice321(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_FormalParameterList) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_Annotation__choice322(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Annotation) {
		st.children[1][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpression__choice323(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_StatementExpression__auto386(st).choice == 0) {
		get_Compilation_StatementExpression__auto386(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpression__choice324(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_StatementExpression__auto386(st).choice == 0) {
		get_Compilation_StatementExpression__auto386(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpression__choice325(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_StatementExpression__auto387(st).choice == 0) {
		get_Compilation_StatementExpression__auto387(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpression__choice326(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_StatementExpression__auto387(st).choice == 0) {
		get_Compilation_StatementExpression__auto387(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_SwitchLabel__choice327(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_SwitchLabel__auto388(st).choice == 0) {
		get_Compilation_SwitchLabel__auto388(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__choice328(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__auto396(st).choice == 0) {
		get_Compilation_PrimaryBase__auto396(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__choice329(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__auto397(st).choice == 0) {
		get_Compilation_PrimaryBase__auto397(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__choice330(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__choice331(st).choice == 2) {
		get_Compilation_PrimaryBase__choice331(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__choice331(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryBase__auto398(st).choice == 0) {
		get_Compilation_PrimaryBase__auto398(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryRest__choice332(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_PrimaryRest__auto405(st).choice == 0) {
		get_Compilation_PrimaryRest__auto405(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpression__choice333(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_UnaryExpression__auto413(st).choice == 0) {
		get_Compilation_UnaryExpression__auto413(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpression__choice334(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_UnaryExpression__auto413(st).choice == 0) {
		get_Compilation_UnaryExpression__auto413(st).children[1][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpressionNotPlusMinus__choice335(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_UnaryExpressionNotPlusMinus__auto418(st).choice == 0) {
		get_Compilation_UnaryExpressionNotPlusMinus__auto418(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpressionNotPlusMinus__choice336(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_InfixExpression__choice337(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Identifier__auto338(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_Identifier) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DecimalNumeral__auto339(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_DecimalNumeral__auto340(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_DecimalNumeral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_OctalNumeral__auto341(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_BinaryNumeral__auto342(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__auto343(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_DecimalFloatingPointLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__auto344(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_DecimalFloatingPointLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__auto345(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_DecimalFloatingPointLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_DecimalFloatingPointLiteral__auto346(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_DecimalFloatingPointLiteral) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_HexSignificand__auto347(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_HexSignificand) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_HexSignificand__auto348(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_HexSignificand) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_HexDigits__auto349(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Digits__auto350(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ReferenceType__auto351(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ReferenceType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ReferenceType__auto352(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ReferenceType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ClassType__auto353(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ArrayType__auto354(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ArrayType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ArrayType__auto355(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ArrayType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TypeArgumentList__auto356(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_WildcardBounds__auto357(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_WildcardBounds) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_WildcardBounds__auto358(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_WildcardBounds) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_QualIdent__auto359(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_PackageDeclaration__auto360(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ImportDeclaration__auto361(st : SyntaxTree) -> SyntaxTree {
	if (get_Compilation_ImportDeclaration__auto363(st).choice == 0) {
		get_Compilation_ImportDeclaration__auto363(st).children[0][0];
	} else failSyntaxTree
}
get_Compilation_ImportDeclaration__auto362(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ImportDeclaration__auto363(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ImportDeclaration) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TypeParameterList__auto364(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_InterfaceTypeList__auto365(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_VariableDeclaratorList__auto366(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_VariableDeclarator__auto367(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_UnannClassType__auto368(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_UnannType__auto369(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_UnannType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnannType__auto370(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_UnannType) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_FormalParameterList__auto371(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_FormalParameter__auto372(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_FormalParameter) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_FormalParameter__auto373(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_FormalParameter) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ReceiverParameter__auto374(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ExceptionTypeList__auto375(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ExplicitConstructorInvocation__auto376(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ExplicitConstructorInvocation) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ExplicitConstructorInvocation__auto377(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ExplicitConstructorInvocation) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ExplicitConstructorInvocation__auto378(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_ExplicitConstructorInvocation) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ExplicitConstructorInvocation__auto379(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_ExplicitConstructorInvocation) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_EnumConstantList__auto380(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ElementValuePairList__auto381(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ElementValueList__auto382(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_VariableInitializerList__auto383(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Statement__auto384(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Statement__auto385(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_StatementExpression__auto386(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_StatementExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpression__auto387(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_StatementExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SwitchLabel__auto388(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_SwitchLabel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_SwitchLabel__auto389(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_SwitchLabel) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_StatementExpressionList__auto390(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_TryStatement__auto391(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_TryStatement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TryStatement__auto392(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_TryStatement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_TryStatement__auto393(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_TryStatement) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CatchType__auto394(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_ResourceList__auto395(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_PrimaryBase__auto396(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__auto397(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 4 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__auto398(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 5 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__auto399(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 6 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__auto400(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_PrimaryBase__auto401(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 7 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__auto402(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 8 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__auto403(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 9 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryBase__auto404(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 10 && st.rule == st_PrimaryBase) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryRest__auto405(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_PrimaryRest) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryRest__auto406(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_PrimaryRest) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_PrimaryRest__auto407(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_PrimaryRest) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ClassTypeWithDiamond__auto408(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_TypeArgumentsOrDiamond__auto409(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_TypeArgumentsOrDiamond) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ArrayCreator__auto410(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_ArrayCreator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ArrayCreator__auto411(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_ArrayCreator) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ArgumentList__auto412(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_UnaryExpression__auto413(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_UnaryExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpression__auto414(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_UnaryExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpression__auto415(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_UnaryExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpressionNotPlusMinus__auto416(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_UnaryExpressionNotPlusMinus) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpressionNotPlusMinus__auto417(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_UnaryExpressionNotPlusMinus) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_UnaryExpressionNotPlusMinus__auto418(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 3 && st.rule == st_UnaryExpressionNotPlusMinus) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CastExpression__auto419(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 0 && st.rule == st_CastExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CastExpression__auto420(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_CastExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_CastExpression__auto421(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_CastExpression) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_ConditionalExpression__auto422(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_LambdaParameters__auto423(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 1 && st.rule == st_LambdaParameters) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_LambdaParameters__auto424(st : SyntaxTree) -> SyntaxTree {
	if (st.choice == 2 && st.rule == st_LambdaParameters) {
		st.children[0][0];
	} else failSyntaxTree
}
get_Compilation_InferredFormalParameterList__auto425(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Spacing__choice287__auto426(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_Spacing__choice287__auto427(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}
get_Compilation_PrimaryBase__choice331__auto428(st : SyntaxTree) -> SyntaxTree {
	failSyntaxTree
}

get_Compilation_SUB_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Compilation) {
		st.children[2];
	} else []
}
get_Compilation_Identifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ClassType) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_TypeVariable) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_TypeParameter) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_QualIdent) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_PackageDeclaration) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_NormalClassHeader) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_VariableDeclaratorId) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_UnannClassType) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_MethodDeclarator) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ConstructorDeclarator) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_EnumDeclaration) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_EnumConstant) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_NormalInterfaceDeclaration) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeDeclaration) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_ElementValuePair) {
		st.children[0];
	} else if (st.choice == 11 && st.rule == st_Statement) {
		st.children[1];
	} else if (st.choice == 12 && st.rule == st_Statement) {
		st.children[1];
	} else if (st.choice == 16 && st.rule == st_Statement) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_EnumConstantName) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ClassTypeWithDiamond) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_LambdaParameters) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_InferredFormalParameterList) {
		st.children[0];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 0) {
		get_Compilation_PrimaryBase__choice328(st).children[2];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 1) {
		get_Compilation_PrimaryBase__choice328(st).children[1];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 2) {
		get_Compilation_PrimaryBase__choice328(st).children[2];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 2) {
		get_Compilation_PrimaryBase__choice330(st).children[1];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 3) {
		get_Compilation_PrimaryBase__choice330(st).children[3];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 4) {
		get_Compilation_PrimaryBase__choice330(st).children[2];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 5) {
		get_Compilation_PrimaryBase__choice330(st).children[3];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 4) {
		get_Compilation_PrimaryBase__choice331(st).children[2];
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 0) {
		get_Compilation_PrimaryRest__choice332(st).children[1];
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 1) {
		get_Compilation_PrimaryRest__choice332(st).children[0];
	} else if (get_Compilation_ClassType__auto353(st).choice == 0) {
		get_Compilation_ClassType__auto353(st).children[2];
	} else if (get_Compilation_QualIdent__auto359(st).choice == 0) {
		get_Compilation_QualIdent__auto359(st).children[1];
	} else if (get_Compilation_PackageDeclaration__auto360(st).choice == 0) {
		get_Compilation_PackageDeclaration__auto360(st).children[1];
	} else if (get_Compilation_UnannClassType__auto368(st).choice == 0) {
		get_Compilation_UnannClassType__auto368(st).children[2];
	} else if (get_Compilation_ReceiverParameter__auto374(st).choice == 0) {
		get_Compilation_ReceiverParameter__auto374(st).children[0];
	} else if (get_Compilation_PrimaryBase__auto402(st).choice == 0) {
		get_Compilation_PrimaryBase__auto402(st).children[3];
	} else if (get_Compilation_PrimaryRest__auto407(st).choice == 0) {
		get_Compilation_PrimaryRest__auto407(st).children[2];
	} else if (get_Compilation_ClassTypeWithDiamond__auto408(st).choice == 0) {
		get_Compilation_ClassTypeWithDiamond__auto408(st).children[2];
	} else if (get_Compilation_InferredFormalParameterList__auto425(st).choice == 0) {
		get_Compilation_InferredFormalParameterList__auto425(st).children[1];
	} else []
}
get_Compilation_LetterOrDigit_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_Identifier__auto338(st).choice == 0) {
		get_Compilation_Identifier__auto338(st).children[1];
	} else []
}
get_Compilation_STATIC_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 5 && st.rule == st_ClassModifier) {
		st.children[0];
	} else if (st.choice == 4 && st.rule == st_FieldModifier) {
		st.children[0];
	} else if (st.choice == 5 && st.rule == st_MethodModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_StaticInitializer) {
		st.children[0];
	} else if (st.choice == 5 && st.rule == st_InterfaceModifier) {
		st.children[0];
	} else if (st.choice == 2 && st.rule == st_ConstantModifier) {
		st.children[0];
	} else if (st.choice == 4 && st.rule == st_InterfaceMethodModifier) {
		st.children[0];
	} else if (get_Compilation_ImportDeclaration__auto361(st).choice == 0) {
		get_Compilation_ImportDeclaration__auto361(st).children[1];
	} else []
}
get_Compilation_Exponent_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_DecimalFloatingPointLiteral__auto343(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto343(st).children[2];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto344(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto344(st).children[1];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto345(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto345(st).children[1];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto346(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto346(st).children[1];
	} else []
}
get_Compilation_HexDigits_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_HexNumeral) {
		st.children[1];
	} else if (get_Compilation_HexSignificand__auto347(st).choice == 0) {
		get_Compilation_HexSignificand__auto347(st).children[1];
	} else if (get_Compilation_HexSignificand__auto347(st).choice == 0) {
		get_Compilation_HexSignificand__auto347(st).children[2];
	} else []
}
get_Compilation_Digits_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Exponent) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_BinaryExponent) {
		st.children[2];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto343(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto343(st).children[0];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto343(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto343(st).children[1];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto344(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto344(st).children[0];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto345(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto345(st).children[0];
	} else if (get_Compilation_DecimalFloatingPointLiteral__auto346(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto346(st).children[0];
	} else []
}
get_Compilation_COMMA_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_EnumBody) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_ElementValueArrayInitializer) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_ArrayInitializer) {
		st.children[2];
	} else if (get_Compilation_TypeArgumentList__auto356(st).choice == 0) {
		get_Compilation_TypeArgumentList__auto356(st).children[0];
	} else if (get_Compilation_TypeParameterList__auto364(st).choice == 0) {
		get_Compilation_TypeParameterList__auto364(st).children[0];
	} else if (get_Compilation_InterfaceTypeList__auto365(st).choice == 0) {
		get_Compilation_InterfaceTypeList__auto365(st).children[0];
	} else if (get_Compilation_VariableDeclaratorList__auto366(st).choice == 0) {
		get_Compilation_VariableDeclaratorList__auto366(st).children[0];
	} else if (get_Compilation_FormalParameterList__auto371(st).choice == 0) {
		get_Compilation_FormalParameterList__auto371(st).children[0];
	} else if (get_Compilation_ExceptionTypeList__auto375(st).choice == 0) {
		get_Compilation_ExceptionTypeList__auto375(st).children[0];
	} else if (get_Compilation_EnumConstantList__auto380(st).choice == 0) {
		get_Compilation_EnumConstantList__auto380(st).children[0];
	} else if (get_Compilation_ElementValuePairList__auto381(st).choice == 0) {
		get_Compilation_ElementValuePairList__auto381(st).children[0];
	} else if (get_Compilation_ElementValueList__auto382(st).choice == 0) {
		get_Compilation_ElementValueList__auto382(st).children[0];
	} else if (get_Compilation_VariableInitializerList__auto383(st).choice == 0) {
		get_Compilation_VariableInitializerList__auto383(st).children[0];
	} else if (get_Compilation_StatementExpressionList__auto390(st).choice == 0) {
		get_Compilation_StatementExpressionList__auto390(st).children[0];
	} else if (get_Compilation_ArgumentList__auto412(st).choice == 0) {
		get_Compilation_ArgumentList__auto412(st).children[0];
	} else if (get_Compilation_InferredFormalParameterList__auto425(st).choice == 0) {
		get_Compilation_InferredFormalParameterList__auto425(st).children[0];
	} else []
}
get_Compilation_SEMI_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_PackageDeclaration) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_ImportDeclaration) {
		st.children[1];
	} else if (st.choice == 4 && st.rule == st_ClassBodyDeclaration) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_FieldDeclaration) {
		st.children[3];
	} else if (st.choice == 1 && st.rule == st_MethodBody) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_EnumBodyDeclarations) {
		st.children[0];
	} else if (st.choice == 4 && st.rule == st_InterfaceMemberDeclaration) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ConstantDeclaration) {
		st.children[3];
	} else if (st.choice == 4 && st.rule == st_AnnotationTypeMemberDeclaration) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[7];
	} else if (st.choice == 0 && st.rule == st_LocalVariableDeclarationStatement) {
		st.children[1];
	} else if (st.choice == 5 && st.rule == st_Statement) {
		st.children[4];
	} else if (st.choice == 9 && st.rule == st_Statement) {
		st.children[2];
	} else if (st.choice == 10 && st.rule == st_Statement) {
		st.children[2];
	} else if (st.choice == 11 && st.rule == st_Statement) {
		st.children[2];
	} else if (st.choice == 12 && st.rule == st_Statement) {
		st.children[2];
	} else if (st.choice == 13 && st.rule == st_Statement) {
		st.children[3];
	} else if (st.choice == 14 && st.rule == st_Statement) {
		st.children[0];
	} else if (st.choice == 15 && st.rule == st_Statement) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[5];
	} else if (st.choice == 0 && st.rule == st_ResourceSpecification) {
		st.children[2];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto376(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto376(st).children[3];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto377(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto377(st).children[3];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[5];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[5];
	} else if (get_Compilation_ResourceList__auto395(st).choice == 0) {
		get_Compilation_ResourceList__auto395(st).children[0];
	} else []
}
get_Compilation_Dim_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_VariableDeclaratorId) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_MethodDeclarator) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[5];
	} else if (get_Compilation_ReferenceType__auto351(st).choice == 0) {
		get_Compilation_ReferenceType__auto351(st).children[1];
	} else if (get_Compilation_ReferenceType__auto352(st).choice == 0) {
		get_Compilation_ReferenceType__auto352(st).children[1];
	} else if (get_Compilation_ArrayType__auto354(st).choice == 0) {
		get_Compilation_ArrayType__auto354(st).children[1];
	} else if (get_Compilation_ArrayType__auto355(st).choice == 0) {
		get_Compilation_ArrayType__auto355(st).children[1];
	} else if (get_Compilation_UnannType__auto369(st).choice == 0) {
		get_Compilation_UnannType__auto369(st).children[1];
	} else if (get_Compilation_UnannType__auto370(st).choice == 0) {
		get_Compilation_UnannType__auto370(st).children[1];
	} else if (get_Compilation_ArrayCreator__auto410(st).choice == 0) {
		get_Compilation_ArrayCreator__auto410(st).children[2];
	} else if (get_Compilation_ArrayCreator__auto411(st).choice == 0) {
		get_Compilation_ArrayCreator__auto411(st).children[1];
	} else []
}
get_Compilation_TypeParameterModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_TypeParameter) {
		st.children[0];
	} else []
}
get_Compilation_TypeBound_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_TypeParameter) {
		st.children[2];
	} else []
}
get_Compilation_AdditionalBound_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_TypeBound__choice320(st).choice == 0) {
		get_Compilation_TypeBound__choice320(st).children[1];
	} else if (get_Compilation_CastExpression__auto420(st).choice == 0) {
		get_Compilation_CastExpression__auto420(st).children[2];
	} else if (get_Compilation_CastExpression__auto421(st).choice == 0) {
		get_Compilation_CastExpression__auto421(st).children[2];
	} else []
}
get_Compilation_TypeArguments_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ClassType) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_UnannClassType) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_ClassCreatorHeader) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_TypeArgumentsOrDiamond) {
		st.children[0];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 0) {
		get_Compilation_PrimaryBase__choice328(st).children[1];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 2) {
		get_Compilation_PrimaryBase__choice328(st).children[1];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 2) {
		get_Compilation_PrimaryBase__choice330(st).children[0];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 3) {
		get_Compilation_PrimaryBase__choice330(st).children[2];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 5) {
		get_Compilation_PrimaryBase__choice330(st).children[2];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 4) {
		get_Compilation_PrimaryBase__choice331(st).children[1];
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 0) {
		get_Compilation_PrimaryRest__choice332(st).children[0];
	} else if (get_Compilation_ClassType__auto353(st).choice == 0) {
		get_Compilation_ClassType__auto353(st).children[3];
	} else if (get_Compilation_UnannClassType__auto368(st).choice == 0) {
		get_Compilation_UnannClassType__auto368(st).children[3];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto376(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto376(st).children[0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto377(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto377(st).children[0];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[2];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[2];
	} else if (get_Compilation_PrimaryBase__auto402(st).choice == 0) {
		get_Compilation_PrimaryBase__auto402(st).children[2];
	} else if (get_Compilation_PrimaryBase__auto403(st).choice == 0) {
		get_Compilation_PrimaryBase__auto403(st).children[2];
	} else if (get_Compilation_PrimaryRest__auto407(st).choice == 0) {
		get_Compilation_PrimaryRest__auto407(st).children[1];
	} else []
}
get_Compilation_WildcardBounds_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Wildcard) {
		st.children[2];
	} else []
}
get_Compilation_PackageModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_PackageDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_ImportDeclaration_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_CompilationUnitHeader) {
		st.children[1];
	} else []
}
get_Compilation_TypeDeclaration_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_CompilationUnit) {
		st.children[1];
	} else []
}
get_Compilation_ClassModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalClassHeader) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_EnumDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_TypeParameters_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalClassHeader) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_MethodHeaderParametrized) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ConstructorDeclarator) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_NormalInterfaceDeclaration) {
		st.children[3];
	} else []
}
get_Compilation_Superclass_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalClassHeader) {
		st.children[4];
	} else []
}
get_Compilation_Superinterfaces_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalClassHeader) {
		st.children[5];
	} else if (st.choice == 0 && st.rule == st_EnumDeclaration) {
		st.children[3];
	} else []
}
get_Compilation_ClassBody_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalClassDeclaration) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_EnumConstant) {
		st.children[3];
	} else if (st.choice == 0 && st.rule == st_ClassCreator) {
		st.children[1];
	} else []
}
get_Compilation_ClassBodyDeclaration_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ClassBody) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_EnumBodyDeclarations) {
		st.children[1];
	} else []
}
get_Compilation_FieldModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_FieldDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_FormalParameterList_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_MethodDeclarator) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_ConstructorDeclarator) {
		st.children[3];
	} else if (get_Compilation_LambdaParameters__auto423(st).choice == 0) {
		get_Compilation_LambdaParameters__auto423(st).children[1];
	} else []
}
get_Compilation_VariableModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ReceiverParameter) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_LocalVariableDeclaration) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_CatchFormalParameter) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_Resource) {
		st.children[0];
	} else if (get_Compilation_FormalParameter__auto372(st).choice == 0) {
		get_Compilation_FormalParameter__auto372(st).children[0];
	} else if (get_Compilation_FormalParameter__auto373(st).choice == 0) {
		get_Compilation_FormalParameter__auto373(st).children[0];
	} else []
}
get_Compilation_MethodModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_MethodDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_Throws_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_MethodHeaderSimple) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_MethodHeaderParametrized) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_ConstructorDeclaration) {
		st.children[2];
	} else []
}
get_Compilation_ConstructorModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ConstructorDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_ExplicitConstructorInvocation_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ConstructorBody) {
		st.children[1];
	} else []
}
get_Compilation_EnumConstantList_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_EnumBody) {
		st.children[1];
	} else []
}
get_Compilation_EnumConstantModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_EnumConstant) {
		st.children[0];
	} else []
}
get_Compilation_EnumBodyDeclarations_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_EnumBody) {
		st.children[3];
	} else []
}
get_Compilation_InterfaceModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalInterfaceDeclaration) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_ExtendsInterfaces_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalInterfaceDeclaration) {
		st.children[4];
	} else []
}
get_Compilation_InterfaceMemberDeclaration_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_InterfaceBody) {
		st.children[1];
	} else []
}
get_Compilation_ConstantModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ConstantDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_InterfaceMethodModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_InterfaceMethodDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_AnnotationTypeMemberDeclaration_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_AnnotationTypeBody) {
		st.children[1];
	} else []
}
get_Compilation_AnnotationTypeElementModifier_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[0];
	} else []
}
get_Compilation_DefaultValue_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_AnnotationTypeElementDeclaration) {
		st.children[6];
	} else []
}
get_Compilation_Annotation_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_PrimitiveType) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ClassType) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_TypeVariable) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_Dim) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_TypeParameterModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_Wildcard) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_PackageModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ClassModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_FieldModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_MethodHeaderParametrized) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_VariableModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_MethodModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ConstructorModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_EnumConstantModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_InterfaceModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ConstantModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_InterfaceMethodModifier) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_AnnotationTypeElementModifier) {
		st.children[0];
	} else if (st.choice == 2 && st.rule == st_ElementValue) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ClassCreatorHeader) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_ClassTypeWithDiamond) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_DimExpr) {
		st.children[0];
	} else if (get_Compilation_ClassType__auto353(st).choice == 0) {
		get_Compilation_ClassType__auto353(st).children[1];
	} else if (get_Compilation_UnannClassType__auto368(st).choice == 0) {
		get_Compilation_UnannClassType__auto368(st).children[1];
	} else if (get_Compilation_FormalParameter__auto373(st).choice == 0) {
		get_Compilation_FormalParameter__auto373(st).children[2];
	} else if (get_Compilation_ClassTypeWithDiamond__auto408(st).choice == 0) {
		get_Compilation_ClassTypeWithDiamond__auto408(st).children[1];
	} else []
}
get_Compilation_ElementValuePairList_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_NormalAnnotation) {
		st.children[2];
	} else []
}
get_Compilation_ElementValueList_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ElementValueArrayInitializer) {
		st.children[1];
	} else []
}
get_Compilation_VariableInitializerList_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ArrayInitializer) {
		st.children[1];
	} else []
}
get_Compilation_BlockStatements_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ConstructorBody) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_Block) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_SwitchBlockStatementGroup) {
		st.children[1];
	} else []
}
get_Compilation_BlockStatement_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_BlockStatements) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_BlockStatements) {
		st.children[1];
	} else []
}
get_Compilation_SwitchBlockStatementGroup_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_SwitchBlock) {
		st.children[1];
	} else []
}
get_Compilation_SwitchLabel_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_SwitchBlock) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_SwitchLabels) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_SwitchLabels) {
		st.children[1];
	} else []
}
get_Compilation_ForInit_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[2];
	} else []
}
get_Compilation_ForUpdate_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[6];
	} else []
}
get_Compilation_Catches_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_TryStatement__auto391(st).choice == 0) {
		get_Compilation_TryStatement__auto391(st).children[2];
	} else if (get_Compilation_TryStatement__auto392(st).choice == 0) {
		get_Compilation_TryStatement__auto392(st).children[2];
	} else if (get_Compilation_TryStatement__auto393(st).choice == 0) {
		get_Compilation_TryStatement__auto393(st).children[3];
	} else []
}
get_Compilation_CatchClause_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Catches) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_Catches) {
		st.children[1];
	} else []
}
get_Compilation_Finally_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_TryStatement__auto391(st).choice == 0) {
		get_Compilation_TryStatement__auto391(st).children[3];
	} else if (get_Compilation_TryStatement__auto393(st).choice == 0) {
		get_Compilation_TryStatement__auto393(st).children[4];
	} else []
}
get_Compilation_Expression_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_VariableInitializer) {
		st.children[0];
	} else if (st.choice == 9 && st.rule == st_Statement) {
		st.children[1];
	} else if (st.choice == 10 && st.rule == st_Statement) {
		st.children[1];
	} else if (st.choice == 13 && st.rule == st_Statement) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_BasicForStatement) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_EnhancedForStatement) {
		st.children[6];
	} else if (st.choice == 0 && st.rule == st_Resource) {
		st.children[4];
	} else if (st.choice == 0 && st.rule == st_ParExpression) {
		st.children[1];
	} else if (st.choice == 0 && st.rule == st_DimExpr) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_ArgumentList) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_Assignment) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_LambdaBody) {
		st.children[0];
	} else if (st.choice == 0 && st.rule == st_ConstantExpression) {
		st.children[0];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 0) {
		get_Compilation_PrimaryBase__choice331(st).children[1];
	} else if (get_Compilation_Statement__auto385(st).choice == 0) {
		get_Compilation_Statement__auto385(st).children[1];
	} else if (get_Compilation_PrimaryRest__auto406(st).choice == 0) {
		get_Compilation_PrimaryRest__auto406(st).children[1];
	} else if (get_Compilation_ArgumentList__auto412(st).choice == 0) {
		get_Compilation_ArgumentList__auto412(st).children[1];
	} else if (get_Compilation_ConditionalExpression__auto422(st).choice == 0) {
		get_Compilation_ConditionalExpression__auto422(st).children[1];
	} else if (get_Compilation_ConditionalExpression__auto422(st).choice == 0) {
		get_Compilation_ConditionalExpression__auto422(st).children[3];
	} else []
}
get_Compilation_PrimaryRest_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Primary) {
		st.children[1];
	} else []
}
get_Compilation_TypeArgumentsOrDiamond_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ClassTypeWithDiamond) {
		st.children[2];
	} else if (get_Compilation_ClassTypeWithDiamond__auto408(st).choice == 0) {
		get_Compilation_ClassTypeWithDiamond__auto408(st).children[3];
	} else []
}
get_Compilation_DimExpr_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_ArrayCreator__auto410(st).choice == 0) {
		get_Compilation_ArrayCreator__auto410(st).children[1];
	} else []
}
get_Compilation_Arguments_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_EnumConstant) {
		st.children[2];
	} else if (st.choice == 0 && st.rule == st_ClassCreatorHeader) {
		st.children[3];
	} else if (get_Compilation_PrimaryBase__choice328(st).choice == 0) {
		get_Compilation_PrimaryBase__choice328(st).children[3];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 2) {
		get_Compilation_PrimaryBase__choice330(st).children[2];
	} else if (get_Compilation_PrimaryBase__choice330(st).choice == 3) {
		get_Compilation_PrimaryBase__choice330(st).children[4];
	} else if (get_Compilation_PrimaryBase__choice331(st).choice == 1) {
		get_Compilation_PrimaryBase__choice331(st).children[0];
	} else if (get_Compilation_PrimaryRest__choice332(st).choice == 0) {
		get_Compilation_PrimaryRest__choice332(st).children[2];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto376(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto376(st).children[2];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto377(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto377(st).children[2];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto378(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto378(st).children[4];
	} else if (get_Compilation_ExplicitConstructorInvocation__auto379(st).choice == 0) {
		get_Compilation_ExplicitConstructorInvocation__auto379(st).children[4];
	} else []
}
get_Compilation_ArgumentList_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Arguments) {
		st.children[1];
	} else []
}
get_Compilation_Spacing__choice284_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_Spacing__choice287(st).choice == 0) {
		get_Compilation_Spacing__choice287(st).children[0];
	} else []
}
get_Compilation_Spacing__choice287_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Spacing) {
		st.children[0];
	} else []
}
get_Compilation_IntegerLiteral__choice290_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_IntegerLiteral) {
		st.children[1];
	} else []
}
get_Compilation_DecimalFloatingPointLiteral__choice296_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_DecimalFloatingPointLiteral__auto343(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto343(st).children[3];
	} else []
}
get_Compilation_DecimalFloatingPointLiteral__choice297_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_DecimalFloatingPointLiteral__auto344(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto344(st).children[2];
	} else []
}
get_Compilation_DecimalFloatingPointLiteral__choice298_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_DecimalFloatingPointLiteral__auto345(st).choice == 0) {
		get_Compilation_DecimalFloatingPointLiteral__auto345(st).children[2];
	} else []
}
get_Compilation_Exponent__choice301_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Exponent) {
		st.children[1];
	} else []
}
get_Compilation_HexadecimalFloatingPointLiteral__choice302_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_HexadecimalFloatingPointLiteral) {
		st.children[2];
	} else []
}
get_Compilation_BinaryExponent__choice305_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_BinaryExponent) {
		st.children[1];
	} else []
}
get_Compilation_StringLiteral__choice309_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_StringLiteral) {
		st.children[0];
	} else []
}
get_Compilation_UnaryExpressionNotPlusMinus__choice336_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_UnaryExpressionNotPlusMinus__auto418(st).choice == 0) {
		get_Compilation_UnaryExpressionNotPlusMinus__auto418(st).children[1];
	} else []
}
get_Compilation_InfixExpression__choice337_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_InfixExpression) {
		st.children[1];
	} else []
}
get_Compilation_DecimalNumeral__auto339_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_DecimalNumeral__auto340(st).choice == 0) {
		get_Compilation_DecimalNumeral__auto340(st).children[0];
	} else []
}
get_Compilation_OctalNumeral__auto341_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_OctalNumeral) {
		st.children[0];
	} else []
}
get_Compilation_BinaryNumeral__auto342_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_BinaryNumeral) {
		st.children[2];
	} else []
}
get_Compilation_HexDigits__auto349_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_HexDigits) {
		st.children[1];
	} else []
}
get_Compilation_Digits__auto350_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_Digits) {
		st.children[0];
	} else []
}
get_Compilation_ClassType__auto353_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ClassType) {
		st.children[3];
	} else []
}
get_Compilation_TypeArgumentList__auto356_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_TypeArgumentList) {
		st.children[1];
	} else []
}
get_Compilation_QualIdent__auto359_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_QualIdent) {
		st.children[1];
	} else []
}
get_Compilation_PackageDeclaration__auto360_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_PackageDeclaration) {
		st.children[3];
	} else []
}
get_Compilation_ImportDeclaration__auto362_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_ImportDeclaration__auto363(st).choice == 0) {
		get_Compilation_ImportDeclaration__auto363(st).children[1];
	} else []
}
get_Compilation_TypeParameterList__auto364_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_TypeParameterList) {
		st.children[1];
	} else []
}
get_Compilation_InterfaceTypeList__auto365_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_InterfaceTypeList) {
		st.children[1];
	} else []
}
get_Compilation_VariableDeclaratorList__auto366_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_VariableDeclaratorList) {
		st.children[1];
	} else []
}
get_Compilation_VariableDeclarator__auto367_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_VariableDeclarator) {
		st.children[1];
	} else []
}
get_Compilation_UnannClassType__auto368_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_UnannClassType) {
		st.children[2];
	} else []
}
get_Compilation_FormalParameterList__auto371_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_FormalParameterList) {
		st.children[1];
	} else []
}
get_Compilation_ReceiverParameter__auto374_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ReceiverParameter) {
		st.children[2];
	} else []
}
get_Compilation_ExceptionTypeList__auto375_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ExceptionTypeList) {
		st.children[1];
	} else []
}
get_Compilation_EnumConstantList__auto380_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_EnumConstantList) {
		st.children[1];
	} else []
}
get_Compilation_ElementValuePairList__auto381_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ElementValuePairList) {
		st.children[1];
	} else []
}
get_Compilation_ElementValueList__auto382_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ElementValueList) {
		st.children[1];
	} else []
}
get_Compilation_VariableInitializerList__auto383_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_VariableInitializerList) {
		st.children[1];
	} else []
}
get_Compilation_Statement__auto384_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 1 && st.rule == st_Statement) {
		st.children[3];
	} else []
}
get_Compilation_Statement__auto385_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 13 && st.rule == st_Statement) {
		st.children[2];
	} else []
}
get_Compilation_StatementExpressionList__auto390_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_StatementExpressionList) {
		st.children[1];
	} else []
}
get_Compilation_CatchType__auto394_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_CatchType) {
		st.children[1];
	} else []
}
get_Compilation_ResourceList__auto395_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ResourceList) {
		st.children[1];
	} else []
}
get_Compilation_PrimaryBase__auto400_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_PrimaryBase__auto401(st).choice == 0) {
		get_Compilation_PrimaryBase__auto401(st).children[1];
	} else []
}
get_Compilation_ClassTypeWithDiamond__auto408_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ClassTypeWithDiamond) {
		st.children[3];
	} else []
}
get_Compilation_ArgumentList__auto412_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ArgumentList) {
		st.children[1];
	} else []
}
get_Compilation_ConditionalExpression__auto422_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_ConditionalExpression) {
		st.children[1];
	} else []
}
get_Compilation_InferredFormalParameterList__auto425_s(st : SyntaxTree) -> [SyntaxTree] {
	if (st.choice == 0 && st.rule == st_InferredFormalParameterList) {
		st.children[1];
	} else []
}
get_Compilation_Spacing__choice287__auto426_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_Spacing__choice287(st).choice == 1) {
		get_Compilation_Spacing__choice287(st).children[0];
	} else []
}
get_Compilation_Spacing__choice287__auto427_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_Spacing__choice287(st).choice == 2) {
		get_Compilation_Spacing__choice287(st).children[0];
	} else []
}
get_Compilation_PrimaryBase__choice331__auto428_s(st : SyntaxTree) -> [SyntaxTree] {
	if (get_Compilation_PrimaryBase__choice331(st).choice == 3) {
		get_Compilation_PrimaryBase__choice331(st).children[0];
	} else []
}

