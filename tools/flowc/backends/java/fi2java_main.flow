import math/hash;
import tools/flowc/backends/common;
import tools/flowc/backends/java/fi2java_compile;

export {
	generateJavaMainClass(gctx : JavaGlobalContext, cfg : FiJavaConfig) -> void;
	generateJavaSingletonStructs(gctx : JavaGlobalContext) -> void;
	generateJavaStructs(gctx : JavaGlobalContext) -> void;
}

generateJavaMainClass(gctx : JavaGlobalContext, cfg : FiJavaConfig) -> void {
	main_file_text = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(main_file_text, s);
	config = gctx.program.config;
	//main_class = fileNameOnly(config.flowfile);
	if (config.verbose > 0) {
		fcPrintln("Generating the main java module '" + cfg.mainClassName + "'", config.threadId);
	}

	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class " + cfg.mainClassName + " extends FlowRuntime {\n");

	// Module initializers
	generateJavaMainModules(gctx, cfg, pushstr);

	// Wrappers
	generateJavaMainWrappers(gctx, cfg, pushstr);

	// Native wrappers
	generateJavaMainNativeWrappers(gctx, cfg, pushstr);

	// Init hosts
	generateJavaMainInitHosts(gctx, cfg, pushstr);

	// Init code
	generateJavaMainInitCode(gctx, cfg, pushstr);

	// Constructor
	pushstr("\tpublic " + cfg.mainClassName  + "(String[] args) {\n");
	pushstr("\t\tsuper(Structs.structList(), args);\n");
	pushstr("\t}\n");

	// General init function
	pushstr("\tfinal private void init() {\n");
	pushstr("\t\tinit_modules();\n");
	pushstr("\t\tinit_wrappers();\n");
	pushstr("\t\tinit_native_wrappers();\n");
	pushstr("\t\tinit_hosts();\n");
	pushstr("\t\tinit_code();\n");
	pushstr("\t}\n");

	generateJavaMainFunction(gctx, cfg, pushstr);

	main_fname = pathCombine(gctx.package_path, cfg.mainClassName + ".java");
	writeJavaSource(gctx, main_fname, javaList2String(main_file_text, "}\n"));
}

generateJavaMainModules(gctx : JavaGlobalContext, cfg : FiJavaConfig, pushstr : (string) -> void) -> void {
	// Module initializers
	csm_list = filter(gctx.csm_list, \csm -> csm.decl_order != []);
	config = gctx.program.config;
	pushstr("\n\t// Modules: (" + i2s(length(csm_list)) + ")\n");
	iter(csm_list, \csm ->
		pushstr("\tModule_" + csm.id + " m_" + csm.id + ";\n")
	);

	init_module_code = \csm -> "\t\tm_" + csm.id + " = new Module_" + csm.id + "(this);\n";

	if (length(csm_list) < 128) {
		pushstr("\tfinal private void init_modules() {\n");
		pushstr(concatStrings(map(csm_list, init_module_code)));
		pushstr("\t}\n");
	} else {
		init_modules_chuncks = splitByNumber(csm_list, 128);
		iteri(init_modules_chuncks, \i, chunk -> {
			pushstr("\tfinal private void init_modules_" + i2s(i) + "() {\n");
			pushstr(concatStrings(map(chunk, init_module_code)));
			pushstr("\t}\n");
		});
		pushstr("\tfinal private void init_modules() {\n");
		iteri(init_modules_chuncks, \i, __ ->
			pushstr("\t\tinit_modules_" + i2s(i) + "();\n")
		);
		pushstr("\t}\n");
		if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
			fcPrintln(cfg.mainClassName + " init_modules chunks: " + i2s(length(init_modules_chuncks)), config.threadId);
		}
	}

	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln("Main modules: " + i2s(length(csm_list)), config.threadId);
	}
}

generateJavaMainWrappers(gctx : JavaGlobalContext, cfg : FiJavaConfig, pushstr : (string) -> void) -> void {
	config = gctx.program.config;
	wrappers = list2array(^(gctx.wrapper_code));
	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln(cfg.mainClassName + " wrappers: " + i2s(length(wrappers)), config.threadId);
	}
	pushstr("\n\t// Wrappers: " + i2s(length(wrappers)) + "\n");

	// Declare wrappers
	iter(wrappers, \wr ->
		pushstr("\t" + wr.type + " " + wr.name + ";\n")
	);

	// Produce wrapper initialization code
	init_wrapper_code = \wr -> "\t\t" + wr.name + " = " + wr.code + ";\n";
	if (length(wrappers) < 128) {
		pushstr("\tfinal private void init_wrappers() {\n");
		pushstr(concatStrings(map(wrappers, init_wrapper_code)));
		pushstr("\t}\n");
	} else {
		init_wrappers_chuncks = splitByNumber(wrappers, 128);
		iteri(init_wrappers_chuncks, \i, chunk -> {
			pushstr("\tfinal private void init_wrappers_" + i2s(i) + "() {\n");
			pushstr(concatStrings(map(chunk, init_wrapper_code)));
			pushstr("\t}\n");
		});
		pushstr("\tfinal private void init_wrappers() {\n");
		iteri(init_wrappers_chuncks, \i, __ ->
			pushstr("\t\tinit_wrappers_" + i2s(i) + "();\n")
		);
		pushstr("\t}\n");
		if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
			fcPrintln(cfg.mainClassName + " init_wrappers chunks: " + i2s(length(init_wrappers_chuncks)), config.threadId);
		}
	}
}

generateJavaMainNativeWrappers(gctx : JavaGlobalContext, cfg : FiJavaConfig, pushstr : (string) -> void) -> void {
	config = gctx.program.config;
	native_wrappers = list2array(^(gctx.native_wrapper_code));
	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln(cfg.mainClassName + " native wrappers: " + i2s(length(native_wrappers)), config.threadId);
	}
	pushstr("\n\t// Native Wrappers (" + i2s(length(native_wrappers)) + ")\n");

	// Declare wrappers
	iter(native_wrappers, \wr ->
		pushstr("\t" + wr.type + " n_" + wr.name + ";\n")
	);

	// Produce wrapper initialization code
	init_wrapper_code = \wr -> "\t\tn_" + wr.name + " = " + wr.code + ";\n";
	if (length(native_wrappers) < 128) {
		pushstr("\tfinal private void init_native_wrappers() {\n");
		pushstr(concatStrings(map(native_wrappers, init_wrapper_code)));
		pushstr("\t}\n");
	} else {
		init_wrappers_chuncks = splitByNumber(native_wrappers, 128);
		iteri(init_wrappers_chuncks, \i, chunk -> {
			pushstr("\tfinal private void init_native_wrappers_" + i2s(i) + "() {\n");
			pushstr(concatStrings(map(chunk, init_wrapper_code)));
			pushstr("\t}\n");
		});
		pushstr("\tfinal private void init_native_wrappers() {\n");
		iteri(init_wrappers_chuncks, \i, __ ->
			pushstr("\t\tinit_native_wrappers_" + i2s(i) + "();\n")
		);
		pushstr("\t}\n");
		if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
			fcPrintln(cfg.mainClassName + " init_native_wrappers chunks: " + i2s(length(init_wrappers_chuncks)), config.threadId);
		}
	}
}

generateJavaMainInitHosts(gctx : JavaGlobalContext, cfg : FiJavaConfig, pushstr : (string) -> void) -> void {
	pushstr("\n\t// Init function: " + i2s(sizeTree(gctx.uses_host)) +  "\n");
	host_inits = list2array(foldTree(gctx.uses_host, makeList(), \host, v, acc -> {
		pushstr("\t" + host + " h_" + host + ";\n");
		Cons("\t\th_" + host + " = super.getNativeHost(" + host + ".class);\n", acc);
	}));
	pushstr("\n\t// Init hosts: " + i2s(length(host_inits)) + "\n");
	if (length(host_inits) < 32) {
		pushstr("\tfinal private void init_hosts() {\n");
		pushstr(concatStrings(host_inits));
		pushstr("\t}\n");
	} else {
		host_init_chuncks = splitByNumber(host_inits, 32);
		iteri(host_init_chuncks, \i, chunk -> {
			pushstr("\tfinal private void init_hosts_" + i2s(i) + "() {\n");
			pushstr(concatStrings(chunk));
			pushstr("\t}\n");
		});
		pushstr("\tfinal private void init_hosts() {\n");
		iteri(host_init_chuncks, \i, __ ->
			pushstr("\t\tinit_hosts_" + i2s(i) + "();\n")
		);
		pushstr("\t}\n");
	}
}

generateJavaMainInitCode(gctx : JavaGlobalContext, cfg : FiJavaConfig, pushstr : (string) -> void) -> void {
	config = gctx.program.config;
	init_code = list2array(^(gctx.init_code));
	pushstr("\n\t// Init code: " + i2s(length(init_code)) + "\n");
	if (length(init_code) < 32) {
		pushstr("\tfinal private void init_code() {\n");
		pushstr(concatStrings(init_code));
		pushstr("\t}\n");
	} else {
		init_code_chuncks = splitByNumber(init_code, 32);
		iteri(init_code_chuncks, \i, chunk -> {
			pushstr("\tfinal private void init_code_" + i2s(i) + "() {\n");
			pushstr(concatStrings(chunk));
			pushstr("\t}\n");
		});
		pushstr("\tfinal private void init_code() {\n");
		iteri(init_code_chuncks, \i, __ ->
			pushstr("\t\tinit_code_" + i2s(i) + "();\n")
		);
		pushstr("\t}\n");
		if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
			fcPrintln(cfg.mainClassName + " init_code chunks: " + i2s(length(init_code_chuncks)), config.threadId);
		}
	}
}
generateJavaMainFunction(gctx : JavaGlobalContext, cfg : FiJavaConfig, pushstr : (string) -> void) -> void {
	if (isEmptySet(cfg.javaLibrary)) {
		// main function
		pushstr("\tprotected void main() {\n");
		pushstr("\t\tinit();\n");

		switch (lookupTree(gctx.globalFuncs, "main")) {
			Some(finfo):
				pushstr("\t\tm_" + finfo.csmodule.id + "." + finfo.name + "();\n");
			None():
				fail0("No main function");
		}
		pushstr("\t}\n");

		// program entry point
		pushstr("\tpublic static void main(String[] args) {\n");
		pushstr("\t\t" + cfg.mainClassName + " runner = new " + cfg.mainClassName + "(args);\n");
		pushstr("\t\trunner.start(null);\n");
		pushstr("\t}\n");
	} else {
		// main function - does only initialization.
		// Overrides abstract FlowRuntime method.
		pushstr("\tprotected void main() {\n");
		pushstr("\t\tinit();\n");
		pushstr("\t}\n");

		iterSet(cfg.javaLibrary, \name ->
			switch (lookupTree(gctx.globalFuncs, name)) {
				Some(finfo): pushstr(javaInterfaceWrapper(name, gctx, finfo));
				None(): fail0("No function " + name);
			}
		);

		// program initialization
		pushstr("\tprivate static " + cfg.mainClassName + " runner = null;\n\n");
		pushstr("\tpublic static void init(String[] args) {\n");
		pushstr("\t\trunner = new " + cfg.mainClassName + "(args);\n");
		pushstr("\t\trunner.start(null);\n");
		pushstr("\t}\n");
	}
}

javaInterfaceWrapper(name : string, gctx : JavaGlobalContext, finfo : JavaGlobalInfo) -> string {
	switch (finfo.type) {
		FiTypeFunction(arg_types, ret_type): {
			arg_names = mapi(arg_types, \j, t -> type2javaObjType(gctx, t.type, false, false, false) + " a" + i2s(j));
			arg_uses = mapi(arg_types, \j, t -> "a" + i2s(j));
			ret_typestr = type2javaObjType(gctx, ret_type, false, false, false);
			"\tstatic public " + ret_typestr + " " + name + "(" + strGlue(arg_names, ", ") + ") {\n" +
			"\t\treturn runner.m_" + finfo.csmodule.id + "." + finfo.name + "(" + strGlue(arg_uses, ", ") + ")" + ";\n" +
			"\t}\n";
		}
		default: fail0(name + "must be a function");
	}
}

generateJavaSingletonStructs(gctx : JavaGlobalContext) -> void {
	code = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(code, s);
	config = gctx.program.config;

	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class SingletonStructs {\n");

	pushstr("\n\t// Singleton structs\n");
	pushstr("\tstatic final Object[] arr_empty = new Object[0];\n");
	num_singleton_structs = foldTree(gctx.cstructs, 0, \sname, struct : JavaStruct, acc ->
		if (length(struct.fields) != 0) acc else {
			pushstr("\tstatic final SingletonStruct str_" + sname + " = SingletonStruct.make(" + i2s(struct.id) + ",\"" + sname + "\");\n");
			acc + 1
		}
	);
	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln("Singleton structs: " + i2s(num_singleton_structs), config.threadId);
	}
	fname = pathCombine(gctx.package_path, "SingletonStructs.java");
	writeJavaSource(gctx, fname, javaList2String(code, "}\n"));
}

generateJavaStructs(gctx : JavaGlobalContext) -> void {
	code = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(code, s);
	config = gctx.program.config;

	struct_list = foldTree(gctx.cstructs, [], \sname, sdata : JavaStruct,acc -> {
		if (length(sdata.fields) == 0) {
			arrayPush(acc, "\t\t\tSingletonStructs.str_" + sname);
		} else {
			arrayPush(acc, "\t\t\tnew Struct_" + sname + "()");
		}
	});
	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln("Structs: " + i2s(length(struct_list)), config.threadId);
	}
	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class Structs {\n");
	pushstr("\n\t// Structs array\n");
	if (length(struct_list) < 512) {
		// All structs array
		pushstr("\tstatic final private Struct[] struct_list = {\n");
		pushstr(strGlue(struct_list, ",\n") + "\n");
		pushstr("\t};\n");

		pushstr("\tstatic final Struct[] structList() {\n");
		pushstr("\t\treturn struct_list;\n");
		pushstr("\t}\n");
	} else {
		struct_list_chunks = splitByNumber(struct_list, 512);
		// All structs array
		iteri(struct_list_chunks, \i, chunk -> generateJavaStructsChunk(gctx, chunk, i));
		pushstr("\tstatic final Struct[] structList() {\n");
		pushstr("\t\tStruct[] structs = new Struct[" + i2s(length(struct_list)) + "];\n");
		pushstr("\t\tint k = 0;\n");
		iteri(struct_list_chunks, \i, __ ->
			pushstr("\t\tfor (Struct s : Structs_" + i2s(i) +  ".structList()) structs[k++] = s;\n")
		);
		pushstr("\t\treturn structs;\n");
		pushstr("\t}\n");
	}
	fname = pathCombine(gctx.package_path, "Structs.java");
	writeJavaSource(gctx, fname, javaList2String(code, "}\n"));
}

generateJavaStructsChunk(gctx : JavaGlobalContext, chunk : [string], i : int) -> void {
	code = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(code, s);
	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class Structs_" + i2s(i) + " {\n");
	pushstr("\n\t// Structs array - " + i2s(i) + "th part \n");
	pushstr("\tstatic final private Struct[] struct_list = {\n");
	pushstr(strGlue(chunk, ",\n") + "\n");
	pushstr("\t};\n");
	pushstr("\tstatic final Struct[] structList() {\n");
	pushstr("\t\treturn struct_list;\n");
	pushstr("\t}\n");
	fname = pathCombine(gctx.package_path, "Structs_" + i2s(i) + ".java");
	writeJavaSource(gctx, fname, javaList2String(code, "}\n"));
}
