import math/hash;
import tools/flowc/backends/common;
import tools/flowc/backends/java/fi2java_compile;

export {
	generateJavaMainClass(gctx : JavaGlobalContext) -> void;
	generateJavaSingletonStructs(gctx : JavaGlobalContext) -> void;
	generateJavaStructs(gctx : JavaGlobalContext) -> void;
	generateJavaWrappers(gctx : JavaGlobalContext) -> void;
}

generateJavaMainClass(gctx : JavaGlobalContext) -> void {
	main_file_text = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(main_file_text, s);
	config = gctx.program.config;
	if (config.verbose > 0) {
		fcPrintln("Generating the main java module '" + gctx.config.mainClassName + "'", config.threadId);
	}

	flowRuntime = lookupTreeDef(gctx.config.hostSubstitutions, "FlowRuntime", "FlowRuntime");
	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class " + gctx.config.mainClassName + " extends " + flowRuntime + " {\n");

	// Init hosts
	generateJavaMainInitHosts(gctx, pushstr);

	// Init modules
	generateJavaMainInitModules(gctx, pushstr);

	// General init function
	pushstr("\tprivate static final void init() {\n");
	pushstr("\t\tStructs.init();\n");
	pushstr("\t\tinit_hosts();\n");
	pushstr("\t\tinit_modules();\n");
	pushstr("\t}\n");

	generateJavaMainFunction(gctx, pushstr);

	main_fname = pathCombine(gctx.package_path, gctx.config.mainClassName + ".java");
	writeJavaSource(gctx, main_fname, javaList2String(main_file_text, "}\n"));
}

generateJavaMainInitHosts(gctx : JavaGlobalContext, pushstr : (string) -> void) -> void {
	host_inits = list2array(foldSet(gctx.uses_host, makeList(), \acc, host -> {
		if (containsKeyTree(gctx.runtime.nativeHosts, host)) {
			Cons("\t\tFlowRuntime.registerNativeHost(" + host + ".class);\n", acc);
		} else {
			acc;
		}
	}));
	pushstr("\n\t// Init hosts: " + i2s(length(host_inits)) + "\n");
	if (length(host_inits) < 512) {
		pushstr("\tprivate static final void init_hosts() {\n");
		pushstr(concatStrings(host_inits));
		pushstr("\t}\n");
	} else {
		host_init_chuncks = splitByNumber(host_inits, 512);
		iteri(host_init_chuncks, \i, chunk -> {
			pushstr("\tprivate static final void init_hosts_" + i2s(i) + "() {\n");
			pushstr(concatStrings(chunk));
			pushstr("\t}\n");
		});
		pushstr("\tprivate static final void init_hosts() {\n");
		iteri(host_init_chuncks, \i, __ ->
			pushstr("\t\tinit_hosts_" + i2s(i) + "();\n")
		);
		pushstr("\t}\n");
	}
}

generateJavaMainInitModules(gctx : JavaGlobalContext, pushstr : (string) -> void) -> void {
	config = gctx.program.config;
	init_code = list2array(^(gctx.init_code));
	pushstr("\n\t// Init modules: " + i2s(length(init_code)) + "\n");
	if (length(init_code) < 512) {
		pushstr("\tprivate static final void init_modules() {\n");
		pushstr(concatStrings(init_code));
		pushstr("\t}\n");
	} else {
		init_code_chuncks = splitByNumber(init_code, 512);
		iteri(init_code_chuncks, \i, chunk -> {
			pushstr("\tprivate static final void init_modules_" + i2s(i) + "() {\n");
			pushstr(concatStrings(chunk));
			pushstr("\t}\n");
		});
		pushstr("\tprivate static final void init_modules() {\n");
		iteri(init_code_chuncks, \i, __ ->
			pushstr("\t\tinit_modules_" + i2s(i) + "();\n")
		);
		pushstr("\t}\n");
		if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
			fcPrintln(gctx.config.mainClassName + " init_modules chunks: " + i2s(length(init_code_chuncks)), config.threadId);
		}
	}
}
generateJavaMainFunction(gctx : JavaGlobalContext, pushstr : (string) -> void) -> void {
	if (isEmptySet(gctx.config.javaLibrary)) {
		// main function
		switch (lookupTree(gctx.globalFuncs, "main")) {
			Some(main): {
				pushstr(
"	protected void main() {
		init();
		Module_" + main.csmodule.id + "." + main.name + "();
	}
	public static void main(String[] args) {
		FlowRuntime.program_args = args;
		" + main.csmodule.id + " runner = new " + main.csmodule.id + "();
		runner.start();
	}
"
				);
			}
			None(): {
				fail0("No main function");
			}
		}
	} else {
		iterSet(gctx.config.javaLibrary, \name ->
			switch (lookupTree(gctx.globalFuncs, name)) {
				Some(finfo): pushstr(javaInterfaceWrapper(name, gctx, finfo));
				None(): fail0("No function " + name);
			}
		);

		// program initialization
		pushstr("\tpublic static void init(String[] args) {\n");
		// init program args
		pushstr("\t\tFlowRuntime.program_args = args;\n");
		// init all internal stuff
		pushstr("\t\t" + gctx.config.mainClassName + ".init();\n");
		pushstr("\t}\n");
	}
}

javaInterfaceWrapper(name : string, gctx : JavaGlobalContext, finfo : JavaGlobalInfo) -> string {
	switch (finfo.type) {
		FiTypeFunction(arg_types, ret_type): {
			arg_names = mapi(arg_types, \j, t -> type2javaObjType(gctx, t.type, false, false, false) + " a" + i2s(j));
			arg_uses = mapi(arg_types, \j, t -> "a" + i2s(j));
			ret_typestr = type2javaObjType(gctx, ret_type, false, false, false);
			"\tstatic public " + ret_typestr + " " + name + "(" + strGlue(arg_names, ", ") + ") {\n" +
			"\t\treturn " + gctx.config.mainClassName + ".m_" + finfo.csmodule.id + "." + finfo.name + "(" + strGlue(arg_uses, ", ") + ")" + ";\n" +
			"\t}\n";
		}
		default: fail0(name + "must be a function");
	}
}

generateJavaSingletonStructs(gctx : JavaGlobalContext) -> void {
	maxCnt = 1000; // max number of fields in on Singleton structure
	code0 = ^(gctx.header_generator(timestamp()));
	config = gctx.program.config;

	startCode = \nStr, nPrevious -> {
		final = if (nStr == "") {
			" final";
		} else {
			"";
		}
		extends = if (nPrevious > 0) {
			" extends SingletonStructs" + i2s(nPrevious);
		} else {
			"";
		}
		Cons(
"@SuppressWarnings(\"unchecked\")
public" + final + " class SingletonStructs" + nStr + extends + " {
	// Singleton structs
",
		code0);
	}

	startCodeMain = \partsCnt-> {
		Cons(
			"\tstatic final Object[] arr_empty = new Object[0];\n",
			startCode("", partsCnt)
		);
	}

	addStructs = \code, singletons -> {
		fold(singletons, code, \acc, struct -> {
			sname = struct.name;
			s = "\tstatic final SingletonStruct str_" + sname + " = SingletonStruct.make(" + i2s(struct.id) + ",\"" + sname + "\");\n";
			Cons(s, acc);
		});
	}

	writeCode = \nStr, code -> {
		fname = pathCombine(gctx.package_path, "SingletonStructs" + nStr + ".java");
		writeJavaSource(gctx, fname, list2string(Cons("}\n", code)));
	}

	singletons = filterAndMapTreeToArray(gctx.cstructs, \sname, struct -> struct.fields == [], \sname, struct -> struct);
	num_singleton_structs = length(singletons);
	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln("Singleton structs: " + i2s(num_singleton_structs), config.threadId);
	}

	if (num_singleton_structs <= maxCnt) {
		code = addStructs(startCodeMain(0), singletons);
		writeCode("", code);
	} else {
		partsCnt = 1 + (num_singleton_structs - 1) / maxCnt;
		for(1, \n -> n <= partsCnt, \n -> {
			nStr = i2s(n);
			singletonsPart = subrange(singletons, (n - 1) * maxCnt, maxCnt);
			code = addStructs(startCode(nStr, n - 1), singletonsPart);
			writeCode(nStr, code);
			n + 1;
		});

		code = startCodeMain(partsCnt);
		writeCode("", code);
	}
}

generateJavaStructs(gctx : JavaGlobalContext) -> void {
	code = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(code, s);
	config = gctx.program.config;

	struct_list = foldTree(gctx.cstructs, [], \sname, sdata : JavaStruct,acc -> {
		if (length(sdata.fields) == 0) {
			arrayPush(acc, "\t\tSingletonStructs.str_" + sname);
		} else {
			arrayPush(acc, "\t\tnew Struct_" + sdata.javaName + "()");
		}
	});
	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln("Structs: " + i2s(length(struct_list)), config.threadId);
	}
	pushstr("import java.util.concurrent.ConcurrentHashMap;\n\n");
	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class Structs {\n\n");
	pushstr("\t// Structs array\n");
	if (length(struct_list) < 512) {
		pushstr("\tstatic final private Struct[] struct_list = {\n");
		pushstr(strGlue(struct_list, ",\n") + "\n");
		pushstr("\t};\n");
		pushstr("\tpublic static final void init() {\n");
		pushstr("\t\tFlowRuntime.struct_prototypes = struct_list;\n");
	} else {
		pushstr("\tpublic static final void init() {\n");
		struct_list_chunks = splitByNumber(struct_list, 512);
		iteri(struct_list_chunks, \i, chunk -> generateJavaStructsChunk(gctx, chunk, i));
		pushstr("\t\tFlowRuntime.struct_prototypes = new Struct[" + i2s(length(struct_list)) + "];\n");
		pushstr("\t\tint k = 0;\n");
		iteri(struct_list_chunks, \i, __ ->
			pushstr("\t\tfor (Struct s : Structs_" + i2s(i) +  ".structList()) FlowRuntime.struct_prototypes[k++] = s;\n")
		);
	}
	pushstr("\t\tfor (int i = 0; i < FlowRuntime.struct_prototypes.length; i++) {\n");
	pushstr("\t\t\tFlowRuntime.struct_ids.put(FlowRuntime.struct_prototypes[i].getTypeName(), i);\n");
	pushstr("\t\t}\n");
	pushstr("\t}\n");
	fname = pathCombine(gctx.package_path, "Structs.java");
	writeJavaSource(gctx, fname, javaList2String(code, "}\n"));
}

generateJavaStructsChunk(gctx : JavaGlobalContext, chunk : [string], i : int) -> void {
	code = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(code, s);
	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class Structs_" + i2s(i) + " {\n");
	pushstr("\n\t// Structs array - " + i2s(i) + "th part \n");
	pushstr("\tstatic final private Struct[] struct_list = {\n");
	pushstr(strGlue(chunk, ",\n") + "\n");
	pushstr("\t};\n");
	pushstr("\tstatic final Struct[] structList() {\n");
	pushstr("\t\treturn struct_list;\n");
	pushstr("\t}\n");
	fname = pathCombine(gctx.package_path, "Structs_" + i2s(i) + ".java");
	writeJavaSource(gctx, fname, javaList2String(code, "}\n"));
}

generateJavaWrappers(gctx : JavaGlobalContext) -> void {
	code = gctx.header_generator(timestamp());
	pushstr = \s -> rlistPush(code, s);
	config = gctx.program.config;
	wrappers = list2array(^(gctx.wrapper_code));
	if (isConfigParameterTrue(config.config, "java-main-size-stats")) {
		fcPrintln("Wrappers: " + i2s(length(wrappers)), config.threadId);
	}
	pushstr("@SuppressWarnings(\"unchecked\")\npublic final class Wrappers {\n\n");
	pushstr("\t// Functional wrappers for methods: " + i2s(length(wrappers)) + "\n");
	iter(wrappers, \wr -> pushstr("\tstatic " + wr.type + " " + wr.name + " = " + wr.code + ";\n"));
	fname = pathCombine(gctx.package_path, "Wrappers.java");
	writeJavaSource(gctx, fname, javaList2String(code, "}\n"));
}
