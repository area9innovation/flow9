import ds/set;
import tools/flowc/incremental/fitype;
import tools/flowc/incremental/fiprogram;
import ds/tree;
import ds/dlist;
import lingo/linecolumn;
import tools/flowc/backends/bytecode/fi2bytecode_bytecode;

export {
	FiBcNameResolution ::=
		FiBcStruct,
		FiBcGlobal,
		FiBcLocal,
		FiBcClosure;

	FiBcStruct(id : int, struct : FiTypeStruct);
	FiBcGlobal(slot : int);
	FiBcLocal(slot : int);
	FiBcClosure(slot : int);

	FiBcGlobalContext(
		file : string,
		program : FiProgram,
		// global names
		structs : Tree<string, FiBcStruct>,
		// Structs and unions with resolved fields based on unions' members
		//unionsNStructs : Tree<string, Tree<int, ConstructField2>>,
		// Struct or union & module where struct or union is declarated
		//declarationSource : Tree<string, string>,
		//moduleNameSpaces : Tree<string, SharedNames>,
		globals : Tree<string, int>,
		// for naming functions in debug info
		cur_toplevel : string,
		mutable next_closure_id : int,
		resolvers : Tree<string, LineResolver>
	);

	FiBcFunctionContext(
		toplevel : FiBcGlobalContext,
		name : string,
		// Names shadowed by locals of higher scopes - considered free
		shadowed : Set<string>,
		// Allocated locals - only added to
		nargs : int,
		mutable nlocals : int,
		mutable all_locals : Tree<string, [int]>,
		// Allocated closure vars - only added to
		mutable free_vars : [string],
		mutable upvals : Tree<string, int>
	);

	FiBcScopeContext(
		func : FiBcFunctionContext,
		// Current local bindings
		locals : Tree<string, int>
	);

	FiBcStructs (
		id : int,
		bytecode : [BytecodeAsString],
		structs : Tree<string, FiBcStruct>
	);
}
