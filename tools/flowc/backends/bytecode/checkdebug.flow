import string;
import url_parameter;
import ds/set;
import ds/list;
import math;

/*

Debug file consistensy check utility.

Takes all lines from debug file and checks if line's offset
fit exactly to instruction border.

Usage:

1. Get debug file

flowc file=file.flow bytecode=1 debug=1

2. Get disassembled file

flowcpp --disassemble file.flow > file.dis

3. Run utility

flowcpp checkdebug.flow -- dis=file.dis debug=file.debug

File, named 'file.debug.test' will be created.

All lines, which offset will not fit exactly instruction border
(i.e. offset will not be found in disassembled file) will be marked
with exclamation mark `!`

TODO:
- Preserve empty lines between debug sections
- Check positions of variables (lines, started with `L`)
- Check not only offsets, but logical consistency of debug as well

*/

main() {
	dis = getUrlParameter("dis");
	debug = getUrlParameter("debug");

	if (dis == "" || debug == "") {
		fcPrintln("Debug file checker");
		fcPrintln("Usage: flowcpp checkdebug.flow -- dis=file.dis debug=file.debug");
		quit(0);
	}

	disContent = strSplit(getFileContent(dis), "\n");
	debugContent = strSplit(getFileContent(debug), "\n");

	disAddresses = fold(disContent, makeSet(), \acc, line -> {
		v = substring(line, 5, 13);
		insertSet(acc, parseHex(v))
	});
	debugLines = fold(debugContent, makeList(), \acc, line -> {
		i = strIndexOf(line, " ");
		if (i >= 0) {
			prefix = substring(line, 0, i);
			n = s2i(prefix);
			if (containsSet(disAddresses, n)) Cons(line + "\n", acc) else Cons("!" + line + "\n", acc);
		} else acc;
	});

	setFileContent(debug+".test", list2string(debugLines));
	quit(0);
}