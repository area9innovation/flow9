import lingo/flow/bytecode;
import ds/dlist;
import text/binary;

export {
	BytecodeOrChunks ::= Bytecode, BytecodeChunks;
		BytecodeChunks(len : int, chunks: DList<string>);

	//
	// Debug info tracking
	//

	BCDebugInfo(
		functions : ref List<BCDFunction>,
		locals : ref List<BCDLocal>,
		// From file to debug positions information (built one file at a time)
		positions : ref List<string>,
		// For the current file we are collecting debug info for, what are the positions so far?
		currentPositions : ref List<BCDPosition>,
		// For the current file, we collect functions here
		// The last position in the bytecode
		endByte : ref int
	);

	// First section of a debug file for functions:
	// PC                 - function offset in bytecode file
	// NAME               - name of the function
	BCDFunction(pc : int, name : string);

	// Second section of a debug file for line positions:
	// PC                 - function offset
	// POS                - position of the definition
	// TODO: comment field is subject to remove
	// filename is subject to change from string to some index to reduce memory consumption
	BCDPosition(pc : int, pos : int, comment : BcDebugKind);

		// Different kinds of positions
		BcDebugKind ::= DebugPosExpr, DebugPosCall, DebugPosStruct,
			DebugPosFunction, DebugPosFunctionLocals, DebugPosFunctionEnd;

			DebugPosExpr();
			DebugPosCall();
			DebugPosStruct();
			DebugPosFunction(name : string, isNative : bool);
			DebugPosFunctionLocals(isNative : bool);
			DebugPosFunctionEnd(isNative : bool);

	// Third section of a debug file for locals:
	// L                  - "L" symbol
	// PC                 - function offset in bytecode file.
	// TYPE               - type of variable (BC_LOCAL_*)
	// ID                 - local number within function
	// NAME               - name of the local as in source code
	BCDLocal(pc : int, type : int, id : int, name : string);

	BC_LOCAL_VAR = 0;       // = local variable in function
	BC_LOCAL_ARG = 1;       // = function argument
	BC_LOCAL_UPVAR = 2;     // = bounded variable from outer environment (free var in closure)

	fiEmptyBytecode() -> BytecodeChunks;
	fiMakeBytecode(chunks : [BytecodeOrChunks]) -> BytecodeChunks;
	fiBytecodeLength(chunks : BytecodeChunks) -> int;

	fiBytecode2String(b : BytecodeChunks) -> string;
}

fiBytecode2String(b) {
	iterator : ref List<string> = ref EmptyList();
	iterDList(b.chunks, \e -> iterator := Cons(e, ^iterator));
	list2string(^iterator);
}

fiEmptyBytecode() {
	BytecodeChunks(0, makeDList());
}

fiMakeBytecode(chunks) {
	len: ref int = ref 0;

	res = fold(chunks, makeDList(), \acc, e : BytecodeOrChunks -> {
		switch(e) {
			BytecodeChunks(ln, li) : {
				len := ^len + ln;
				concatDList(acc, li);
				acc;
			}
			default : {
				str = bytecode2binary(cast(e : BytecodeOrChunks -> Bytecode));
				len := ^len + strlen(str);
				pushDList(acc, str);
				acc;
			}
		}
	});
	BytecodeChunks(^len, res);
}

fiBytecodeLength(chunks) {
	chunks.len
}
