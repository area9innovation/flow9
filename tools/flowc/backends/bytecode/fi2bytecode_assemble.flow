import tools/flowc/backends/common;
import lingo/flow/bytecode;
import math/md5;
import sys/system;
import ds/list;
import ds/dlist;
import tools/flowc/backends/bytecode/fi2bytecode_defines;
import tools/flowc/backends/bytecode/fi2bytecode_debuginfo;

export {
	fcBcSaveBytecode(cfg : FcBytecodeConfig, gctx : FiBcGlobalContext, bcChunk : BytecodeChunks, callback : () -> void) -> void;
}

FC_UPLOAD_SCRIPT_URL = "https://localhost/flow/php/uploadbytecode.php";
fcBcSaveBytecode(cfg : FcBytecodeConfig, ctx : FiBcGlobalContext, bcChunk : BytecodeChunks, callback : () -> void) {
	bytes = fiBytecode2String(bcChunk);
	isBytecodeWritten = setFileContentBytes(cfg.outputfile, bytes);

	if (cfg.debug) {
		debugInfo = fcBcMakeDebugInfo(cfg);

		fcVerbose(cfg, 1, "Saving content...");
		setFileContentBytes(
			changeFileExt(cfg.outputfile, ".debug"),
			debugInfo
		);
		{}

		// OK, let us also dump all structs and unions for debugging info
		if (false) {
			typeDebug0 = foldTree(ctx.program.names.structs, makeList(), \name, struct, acc -> {
				Cons(toString(struct), acc)
			});
			typeDebug = foldTree(ctx.program.names.unions, typeDebug0, \name, union, acc -> {
				Cons(toString(union), acc)
			});
			setFileContent(
				changeFileExt(cfg.outputfile, ".typenames"),
				strGlue(list2array(typeDebug), "\n")
			);
			{}
		}
	}

	if (isBytecodeWritten) {
		fcVerbose(cfg, 0, "Saved '" + resolveRelativePath(cfg.outputfile) + "'");
		if (cfg.upload) {
			fcPrintln("Uploading to " + FC_UPLOAD_SCRIPT_URL, cfg.threadId);
			startProcess("curl", [FC_UPLOAD_SCRIPT_URL, "-Fbytecode=@" + cfg.outputfile, "-Fhash=" + md5binary(bytes), "-s", "-S", "-k"], ".", "",
				\e, stdout, stderr->{
					if (e == 0) fcPrintln(stdout, cfg.threadId)
					else if (e > 0) fcPrintln(stderr, cfg.threadId)
					else if (e < 0) fcPrintln("Troubles in startProcess(curl, ...", cfg.threadId);
					callback()
				}
			);
		} else {
			callback();
		}
	} else {
		fcPrintln("Couldn't write bytecode file '" + cfg.outputfile + "'", cfg.threadId);
		callback()
	}
}
