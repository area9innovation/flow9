import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/common;
import tools/flowc/backends/cpp2/fi2cpp2_consts;

export {

FiTypeNullable ::= FiType, FiTypeNull;
	FiTypeNull();

Cpp2TagType ::= Cpp2TVoid, Cpp2TBool, Cpp2TInt, Cpp2TDouble, Cpp2TString, Cpp2TArray, Cpp2TStruct, Cpp2TCodePointer, Cpp2TNativeFn, Cpp2TRefTo, Cpp2TNative, Cpp2TClosurePointer, Cpp2TNull;
	Cpp2TVoid();
	Cpp2TBool();
	Cpp2TInt();
	Cpp2TDouble();
	Cpp2TString();
	Cpp2TArray();
	Cpp2TStruct();
	Cpp2TCodePointer();
	Cpp2TNativeFn();
	Cpp2TRefTo();
	Cpp2TNative();
	Cpp2TClosurePointer();
	Cpp2TNull();

Cpp2StructArg(
	name : string,
	type : FiTypeNullable,
	is_mutable : bool
);
	
Cpp2StructOrderInfo(
	compare_idx: int,
	name: string,
	args: [Cpp2StructArg]
);

Cpp2StructInfo(
	mutable id : int, 
	struct_name : string,
	mutable args : [Cpp2StructArg],
	mutable atypes : [Cpp2TagType],
	empty_addr : int
);

Cpp2PlaceType ::= Cpp2GlobalVar, Cpp2Local, Cpp2Argument, Cpp2Temporary, Cpp2SlotAlias, Cpp2FieldAlias, Cpp2GlobalFunction, Cpp2Struct, Cpp2NoPlace;
	Cpp2GlobalVar();
	Cpp2Local();
	Cpp2Argument();
	Cpp2Temporary();
	Cpp2SlotAlias(
		struct_: Cpp2PlaceInfo, 
		idx: string
	);
	Cpp2FieldAlias(
		struct_: Cpp2PlaceInfo, 
		struct_info : Cpp2StructInfo
	);
	Cpp2GlobalFunction(
		nargs : int, 
		native : string
	);
	Cpp2Struct(info : Cpp2StructInfo);
	Cpp2NoPlace(
		code : FiExp, 
		errormsg : string
	);

// Information about already performed type checks
Cpp2PlaceMetadata(
	mutable context : int,
	mutable dirty : bool,
	mutable tag : Cpp2TagType,
	mutable type : FiTypeNullable,
	mutable struct_size : int,
	mutable struct_id : int,
	mutable known_fields : [string],
	mutable known_compares : [Cpp2PlaceInfo],
	mutable struct_ptr_gcid : int,
	mutable struct_ptr_types : [string]
);

Cpp2OutputLocation ::= Cpp2OutputNone, Cpp2OutputReturn, Cpp2OutputVar, Cpp2OutputExpr, Cpp2OutputScalar, Cpp2OutputNull;
	Cpp2OutputNone();
	Cpp2OutputReturn();
	Cpp2OutputVar(rv : Cpp2PlaceInfo);
	Cpp2OutputExpr(cb : (Cpp2Context, string) -> string);
	Cpp2OutputScalar(name : string, tag : Cpp2TagType);
	Cpp2OutputNull();

Cpp2Line ::= Cpp2Decl, Cpp2Any, Cpp2Block;
	Cpp2Decl(
		type : string, 
		name : string, 
		indent : string, 
		origin : Cpp2CodeLines
	);
	Cpp2Any(line : string);
	Cpp2Block(code : Cpp2CodeLines);

Cpp2CodeLines(
	lines : ref [Cpp2Line],
	parent : Maybe<Cpp2CodeLines>,
);

cpp2_next_guid = ref 0;
	
Cpp2PlaceInfo(
	env : Maybe<Cpp2Environment>,
	mutable place : Cpp2PlaceType,
	mutable slot : int,
	mutable name : string,
	mutable meta : Cpp2PlaceMetadata,
	// Unique id for every distinct place in the environment.
	uid: int,
	mutable lvalue : string,
	mutable rvalue : string,
);

// Contains current information about the function being compiled.
// Controls mapping of local variable names to places.
Cpp2Environment(
	writer : Cpp2Writer,
	parent : Maybe<Cpp2Environment>,
	mname : string,
	mutable vname : string,
	nargs : int,
	struct_list : [Cpp2StructInfo],
	depth : int,
	mutable next_uid : int,
	mutable next_ctx : int,
	mutable nlocals : int,
	mutable ntemps : int,
	mutable local_reuse : [int],
	mutable args_used : bool,
	mutable closure : Maybe<Cpp2Closure>,
	mutable upvalues : [string],
	mutable tail_call : bool,
	mutable cur_ctx : Maybe<Cpp2Context>,
	mutable locals : Tree<string, Cpp2PlaceInfo>,
	mutable meta_globals : Tree<int, Cpp2PlaceTriple>,
	mutable code_lines : Cpp2CodeLines,
);

Cpp2Closure(
	mutable place : Cpp2PlaceInfo,
	mutable type : Cpp2StructInfo,
);

Cpp2PlaceTriple(
	mutable def : Cpp2PlaceInfo, 
	old: Cpp2PlaceMetadata, 
	mutable my: Cpp2PlaceMetadata
);

// Tracks information specific to the current code flow branch,
// and implements its proper merging when flow converges.
Cpp2Context(
	env : Cpp2Environment,
	prev : Maybe<Cpp2Context>,
	id : int,
	mutable gc_index : int,
	indent : string,
	mutable local_names : [string],
	mutable local_binds : [Cpp2PlaceInfo],
	mutable idxvars : Tree<string, string>,
	mutable meta : Tree<int, Cpp2PlaceTriple>,
);

Cpp2Writer(
	config : FcCpp2Config,
	program : FiProgram,
	main : FiFunctionDec,

	num_structs : int,
	mutable init_count : int,
	struct_counts : [int], // by size
	structs : Tree<string, Cpp2StructInfo>,
	mutable closure_structs : Tree<string, Cpp2StructInfo>,
	structs_order : ref [Cpp2StructOrderInfo],
	struct_list : [Cpp2StructInfo],
	struct_code : Cpp2StructCode,

	mutable bytecode : string,
	mutable const_strings : Tree<string, Cpp2ConstString>,

	method_names : ref [string],
	function_table : ref [Cpp2FunctionDescr],
	global_vars : [string],
	global_map : Tree<string, Cpp2PlaceInfo>,

	// Table for fast lookup of fields by name; maps [name][structid] -> index
	field_index_table : ref [[int]],
	mutable field_index_map : Tree<string, int>,
	field_index_list : ref [string],
	
	mutable cur_global : string,
 	mutable next_closure_id : int,
	known_natives : Tree<string, Cpp2NativeDescr>,

	// The contents of compiled files.
	mutable compiled_targets : Tree<string, ref [string]>,
	dependencies : Set<string>
);

Cpp2StructCode(
	hdr_lines   : ref [string],
	def_lines   : ref [string],
	gcdef_lines : ref [string],
	field_names : ref [string],
	field_types : ref [int],
	info_refs   : ref [Cpp2StructInfoRef],
);

Cpp2ConstString(
	addr : int, 
	size : int, 
	rslot : string
);

Cpp2StructInfoRef(
	fld_idx : int, 
	type_idx : int,
	def_idx : int, 
	gcdef_idx : int,
	mutable gcdef_cnt : int, 
	empty_addr : int,
	name_addr : int, 
	name_sz : int
);

Cpp2FunctionDescr(
	name: string, 
	native_name: string, 
	nargs: int, 
	fn_name: string
);

Cpp2NativeDescr(
	name: string,
	nargs: int, 
	noalloc: bool, 
	cname: string
);

Cpp2Dependencies(
	funcs : Set<FiFunctionDec>,
	natives : Set<FiNativeDec>,
	vars : Set<FiGlobalVar>,
	all_decls : Set<FiDeclaration>,
);

cpp2_err_count = ref 0;

cpp2_error(msg : string, /*threadId : int*/) -> void {
	cpp2_err_count := ^cpp2_err_count + 1;
	//TODO: fcPrintln("cpp2 error: " + msg, threadId);
	println("cpp2 error: " + msg);
	quit(-1);
}

emptyCpp2Dependencies = Cpp2Dependencies(makeSet(), makeSet(), makeSet(), makeSet());
dummyCpp2Config = FcCpp2Config("", "", "", false, [], false, 0, 0, false, "");
dummyCpp2StructInfo = Cpp2StructInfo(cpp2_int_UNDEF, "", [], [], cpp2_int_UNDEF);
dummyCpp2PlaceMetadata = Cpp2PlaceMetadata(cpp2_int_UNDEF, false, Cpp2TNull(), FiTypeNull(), -1, -1, [], [], -1, []);
dummyCpp2Environment = Cpp2Environment(
	dummyCpp2Writer,
	None(),
	"", //mname : string,
	"", // vname : string,
	-1, // nargs : int,
	[], // struct_list
	-1, // depth : int,
	-1, // mutable next_uid : int,
	-1, // mutable next_ctx : int,
	-1, //mutable nlocals : int,
	-1, //mutable ntemps : int,
	[], // mutable local_reuse : [int],
	false, // mutable args_used : bool,
	None(), // mutable closure : Maybe<Cpp2Closure>,
	[], // mutable upvalues : [string],
	false, // tail_call : bool,
	None(), // mutable cur_ctx : Maybe<Cpp2Context>,
	makeTree(), // mutable locals : Tree<string, Cpp2PlaceInfo>,
	//struct_list : [Cpp2StructInfo],
	makeTree(), // mutable meta_globals : Tree<int, Cpp2PlaceTriple>,
	Cpp2CodeLines(ref [], None()),
);

dummyJSCliParams = JSCliParams("", "", "", false, false, "", false, false, false, false, false, tsProcessing_dummy, false, false, -1, false, "", makeSet(), false, "", false);
dummyCompilerConfig = CompilerConfig("", [], [], -1, dummyJSCliParams, makeTree(), -1);
dummyFiGlobalNames = FiGlobalNames(makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree());
dummyFiProgram = FiProgram(dummyCompilerConfig, makeTree(), [], dummyFiGlobalNames);
dummyFiLambda = FiLambda([], FiVoid(-1), dummyFiTypeFunction, -1);
dummyFiTypeFunction = FiTypeFunction([], FiTypeVoid());
dummyFiFunctionDec = FiFunctionDec("", dummyFiLambda, dummyFiTypeFunction, -1, -1);
dummyCpp2StructCode = Cpp2StructCode(ref [], ref [], ref [], ref [], ref [], ref []);

dummyCpp2Writer = Cpp2Writer(dummyCpp2Config, dummyFiProgram, dummyFiFunctionDec, -1, -1, [], makeTree(), makeTree(), ref [], [], dummyCpp2StructCode, "", makeTree(), ref [], ref [], [], makeTree(), ref [], makeTree(), ref [], "", -1, makeTree(), makeTree(), makeSet());

dummyCpp2PlaceInfo = Cpp2PlaceInfo(
	None(), //env: Maybe<Cpp2Environment>,
	Cpp2NoPlace(FiVoid(0), "dummyCpp2PlaceInfo"), // mutable place: Cpp2PlaceType,
	cpp2_int_UNDEF, // mutable slot: int,
	"", // name : string,
	dummyCpp2PlaceMetadata, //mutable meta : Cpp2PlaceMetadata,
	cpp2_int_UNDEF, ///uid: int,
	"", // mutable lvalue: string,
	"", // mutable rvalue : string,
);
dummyCpp2NativeDescr = Cpp2NativeDescr("", 0, false, "");


Cpp2StackTop(mutable temp: int);

cpp2Mktop(top : Cpp2StackTop) -> Cpp2StackTop {
	val : int = top.temp;
	Cpp2StackTop(val);
}

cpp2_int_UNDEF = 0x80000000;

cpp2_natives = [
	Cpp2NativeDescr("mapi", 2, false, "mapi"),
	Cpp2NativeDescr("map", 2, false, "map"),
	Cpp2NativeDescr("iter", 2, false, "iter"),
	Cpp2NativeDescr("iteri", 2, false, "iteri"),
	Cpp2NativeDescr("fold", 3, false, "fold"),
	Cpp2NativeDescr("foldi", 3, false, "foldi"),
	Cpp2NativeDescr("filter", 2, false, "filter"),
	Cpp2NativeDescr("elemIndex", 3, false, "elemIndex"),
	Cpp2NativeDescr("exists", 2, false, "exists"),
	Cpp2NativeDescr("find", 2, false, "find"),
	Cpp2NativeDescr("subrange", 3, false, "subrange"),
	Cpp2NativeDescr("length", 1, true, "length"),
	Cpp2NativeDescr("strlen", 1, true, "NativeStrlen"),
	Cpp2NativeDescr("strIndexOf", 2, true, "strIndexOf"),
	Cpp2NativeDescr("substring", 3, true, "substring"),
	Cpp2NativeDescr("concat", 2, false, "concat"),
	Cpp2NativeDescr("replace", 3, false, "replace"),
	Cpp2NativeDescr("bitXor", 2, true, "bitXor"),
	Cpp2NativeDescr("bitOr", 2, true, "bitOr"),
	Cpp2NativeDescr("bitAnd", 2, true, "bitAnd"),
	Cpp2NativeDescr("bitNot", 1, true, "bitNot"),
];

}
