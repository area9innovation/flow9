import tools/flowc/backends/cpp2/fi2cpp_compile;
import tools/flowc/backends/common;

export {
	fi2cpp2(program : FiProgram, cfg : FcCpp2Config, callback : () -> void) -> void;
}

fi2cpp2(program : FiProgram, cfg : FcCpp2Config, callback : () -> void) -> void {
	//if (cfg.verbose > 0) {
		fcPrintln("Making cpp2 '" + cfg.flowfile + "'...", cfg.threadId);
		
		fcPrintln("outputFile: " + cfg.outputFile, cfg.threadId);
		fcPrintln("outputDir: " + cfg.outputDir, cfg.threadId);
	//}
	// Translate global functions
	switch (lookupTree(program.names.toplevel, "main")) {
		None(): cpp2_error("No main() function.");
		Some(main): {
			switch (main) {
				FiFunctionDec(__,__,__,__,__): {
				
					println("main:");
					println(main);
					println("");
					writer = cpp2Writer(cfg, program, main);
					cpp2WriterTranslateGlobalFunctions(writer);
					cpp2WriterTranslateGlobalVariables(writer);
					cpp2WriterEmitCommonAndTables(writer);
					cpp2writeSources(writer);
					fi2cpp2renameMainFile(cfg);
				}
				default: cpp2_error("main must be a function.");
			}
		}
	}
	callback();
}

fi2cpp2renameMainFile(cfg : FcCpp2Config) {
	make_path = \s -> {
		normalized = strReplace(strReplace(strReplace(s, "/", "_"), ".flow", ""), ".", "_");
		cfg.outputDir + "flow_" + normalized + ".cpp";
	}
	trimmed = fold(cfg.includes, cfg.flowfile, \acc, incl ->
		strReplace(strReplace(acc, incl, ""), incl + "/", "")
	);
	slash_ind = strLastIndexOf(trimmed, "/");
	reduced = if (slash_ind == -1) trimmed else strRight(trimmed, slash_ind + 1);
	fcPrintln("path1: " + make_path(trimmed), cfg.threadId);
	fcPrintln("path2: " + make_path(reduced), cfg.threadId);
	if (trimmed != reduced) {
		err = renameFile(make_path(trimmed), make_path(reduced));
		if (err != "") {
			fcPrintln(err, cfg.threadId);
		}
	}
}
