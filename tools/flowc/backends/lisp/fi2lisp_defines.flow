import tools/flowc/backends/common;
import ds/tree;

export {
	fiLispRenameKeyword(cfg : FcLISPConfig, kwd : string, isField : bool) -> string;
	fiLispIndent = "  ";

	LispKeywordSet = fold(
		[
			// Must be in capital
			"T", "NIL", "IF", "AND",
			"FIRST", "SECOND", "THIRD", "FOURTH",
			"LENGTH", "LIST", "CAR", "CDR", "SOME",
			"DEBUG", "REST", "PI", "CONS", "LAST",
			"LAMBDA", "OPEN", "EXP", "MIN", "MAX",
			"TAIL", "SET", "TYPE", "FTYPE", "IGNORE",
			"FLOOR", "CEIL", "ROUND", "ABS", "SORT",
			"ARRAY", "FIND", "MAP", "REPLACE", "TREE"
		],

		makeSet(),
		insertSet
	);

	LispSubstitutedFunctions : Set<string> = buildSet([
			//"extractStruct",
			//"fcPrintln",
			//"flow",
			//"ignore",
			//"i2s","d2s","strsubsmart",
			//,
//			"rebalancedTree"
	]);

	LispForbiddenFunctions = fold(
		[
			"devtrace", "isDevMode", "toString",
			"str2blks", "rhex", "bitRol", "md5cmn", "md5ff",
			"md5gg", "md5hh", "md5ii", "md5binary", "md5encodingControl",
			"crc32", "double2bytes"
		],
		makeSet(),
		insertSet
	);

	LispForbiddenVars = fold(
		[
			"devModeCheckFn",
			"redirectAdditionalFn",
			"screenDPI",
			"_boot_target_",
			"currentCategoryTag",
			"currentInstanceTag",

			"js", "pixi3", "neko", "cpp", "cgi", "mobile", "nogui",

			"leakingSubscribersHandler"
		],

		makeSet(),
		insertSet
	);
}
fiLispRenameKeyword(cfg, kwd, isField) {
	(if (isField) "f" else "") + (if (containsSet(LispKeywordSet, toUpperCase(kwd))) "fl0w" else "") + kwd;
}
