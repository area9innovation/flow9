import tools/flowc/backends/common;


import tools/flowc/fctypeenv;
import ds/list;



export {
	fiGetLispRuntimeBefore(cfg : FcLISPConfig) -> string;
	fiGetLispRuntimeAfter(cfg : FcLISPConfig) -> string;
	fiGetLispPackagePrefix(cfg : FcLISPConfig) -> string;
	fiGetLispSubstitute(cfg : FcLISPConfig, fName : string) -> string;
	fiAssembleLispFile(cfg : FcLISPConfig, content : List<string>) -> void;
	fiLispIndicesSomeTypes(cfg : FcLISPConfig) -> string;
}

fiGetLispRuntimeBefore(cfg) {
	 getFileContent(getFlowDir() + "/tools/flowc/backends/lisp/runtime-before.lisp");
}

fiGetLispRuntimeAfter(cfg) {
	 getFileContent(getFlowDir() + "/tools/flowc/backends/lisp/runtime-after.lisp");
}

fiLispIndicesSomeTypes(cfg) {
	types = ["Cons", "EmptyList", "TreeNode", "SyntaxTree"];
	fold(types, "", \acc, type -> {
		acc + "\n(defconstant +" + type + "-id+ " + i2s(either(lookupTree(cfg.structNames, type), -1)) + ")" 
	}) + "\n";
}
fiGetLispSubstitute(cfg, fName) {
	fileName = getFlowDir() + "/tools/flowc/backends/LispSubstitutes/" + fName + ".lisp";
	if (fileExists(fileName)) {
		getFileContent(fileName);
	} else {
		"// '" + fName + "' function substitute not found\n"+
		"// in " + fileName + "\n" +
		"// Please ensure file exists.\n"
	}
}

fiGetLispPackagePrefix(cfg) {
	name = strSplit(cfg.outputfile, ".")[0];
	";;(save-lisp-and-die \"" + name + ".core\" :toplevel '" + name + ":main :executable t)\n" + 
	"(declaim (optimize (safety 1) (speed 2) ))\n" +
	"(defpackage :" + name + "
    (:use :common-lisp)
    (:export #:main))

    (in-package :" + name + ")

"
}

fiAssembleLispFile(cfg, content) {
	saveFileContent(cfg.outputfile, list2string(content), cfg.threadId);
}
