import tools/flowc/backends/inca/lift_exp;
import tools/flowc/backends/inca/lift_graph;
import text/blueprint;

export {
	// Lift our code to lifted, mutable versions
	liftIncaFunctions(env : IncaEnv, outdir : string) -> string;
}

liftIncaFunctions(env : IncaEnv, outdir : string) -> string {
	perform = liftIncaGraph(env);
	blueprint("
		import %out%/types;
		import inca/manager;

		export {
			%performdec%

			%dec%
		}

		%performdef%

		%def%
	", [
		"out", outdir,
		"performdec", perform.first,
		"performdef", perform.second,
		"dec", foldTree(env.functions, "", \name, fn, acc -> acc + {
			if (containsSet(env.alreadyLifted, name)) ""
			else {
				(if (acc != "") "\n" else "") + name + "_lifted(manager : IncaManager" 
					+ superglue(fn.lambda.args, \a -> ", " + a.name + " : IncaValue", "") 
				+ ") -> IncaValue;"
			}
		}),
		"def", foldTree(env.functions, "", \name, fn, acc -> acc + liftIncaFunction(env, name, fn) + "\n")
	]);
}

liftIncaFunction(env : IncaEnv, name : string, fn : FiFunctionDec) -> string {
	if (containsSet(env.alreadyLifted, name)) ""
	else {
		name + "_lifted(manager : IncaManager" + superglue(fn.lambda.args, \a -> ", " + a.name + "_lifted : IncaValue", "") + ") -> IncaValue {\n"
		+ liftIncaExp(env, fn.lambda.body, 1) + ";\n"
		+ "}\n";
	}
}
