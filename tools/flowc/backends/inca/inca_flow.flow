import tools/flowc/incremental/fiexp;
import ds/tree;

export {
	// A toplevel function
	IiFunction(name : string, args : [int], ret : int, body : IiExp);

	// This is a simplified version of flow, which has stack discipline memory behaviour
	// and explicit, global variable scope. No lets, first order functions, refs, polymorphism.
	IiExp ::= IiCall, IiSet, IiVar, IiIf, IiSeq, IiCallPrim, FiConst;
		// We have three types:
		// normal, non-recursive, non-tail call
		// recursive, non-tail call
		// tail-call
		IiCall(name: string, es : [IiExp], recursive : bool, tailcall : bool, type : IiType, start : int);
		IiSet(variable: IiName, type : IiType, val: IiExp, start : int);
		IiVar(variable: IiName, type : IiType, start : int);
		IiIf(e1: IiExp, e2: IiExp, e3: IiExp, type : IiType, start : int);
		IiSeq(es: [IiExp], type : IiType, start : int);
		IiCallPrim(op: IiPrim, es: [IiExp], type : IiType, start : int);

		IiPrim ::= FcOrPrim, FcAndPrim, FcNotPrim,
			FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, 
			FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim,
			FcArrayPrim, FcIndexPrim,
			FcStructPrim, FcFieldPrim;

	IiName(index : int);

	// This mirrors fitype, except we have no first-order functions, polymorphism nor refs
	IiType ::= IiTypeArray, IiTypeName,
		FiTypeBool, FiTypeInt, FiTypeDouble, FiTypeString, FiTypeVoid, FiTypeNative;

		IiTypeArray(t : IiType);
		IiTypeName(name : string);
}
