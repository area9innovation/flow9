import tools/flowc/backends/inca/env;
import tools/flowc/incremental/fiprettyprint;
import text/blueprint;
import ds/treeutils;

export {
	// Lift our structs and unions to lifted, mutable versions
	liftIncaTypes(env : IncaEnv) -> string;
}

liftIncaTypes(env : IncaEnv) -> string {
	structs = getTreeKeys(env.structs);
	parsed = env.parsed;

	nStructArgs = foldTree(env.structs, makeTree(), \s, t, acc -> {
		setTree(acc, s, length(t.args));
	});

	fields : Tree<string, Set<FiTypeStruct>> = foldTree(env.structs, makeTree(), \s, t, acc -> {
		fold(t.args, acc, \acc2, arg -> {
			insertMultimap(acc2, arg.name, t)
		})
	});

	blueprint("
		import inca/support_lifted;
		%imports%

		export {

			%promotedStructs%

			%structs%

			%structnames%

			%liftUnions2incaDec%

			%liftStructs2incaDec%

			%liftIncaStructDec%

			%liftIncaFieldDec%
		}

		%liftUnions2incaDef%

		%liftStructs2incaDef%

		%liftIncaStructDef%

		%liftIncaFieldDef%
	", [
		"imports", fold(parsed, "", \acc, name -> acc + "import " + takeAfter(name, "tools/inca/", name)  + ";\n"),
		"promotedStructs", foldTree(env.promotedStructs, "", \name, struct, acc -> {
			acc + prettyFiStructOrUnion(FcPretty(true, true, makeTree(), makeTree()), struct, makeSet()) + ";\n"
		}),
		"structs", foldi(structs, "", \i, acc, name -> {
			acc + name + "_ID = " + i2s(i) + ";\n"
		}),
		"structnames", "INCA_STRUCT_NAMES = [" + superglue(structs, \s -> toString(s), ", ") + "]",
		"liftUnions2incaDec", foldTree(env.unions, "", \name, union, acc -> {
			acc + name + "2IncaValue(v : " + name + ") -> IncaValue;\n"
		}),
		"liftStructs2incaDec", foldTree(env.structs, "", \name, struct, acc -> {
			acc + name + "2IncaValue(v : " + name + ") -> IncaValue;\n"
		}),
		"liftUnions2incaDef", foldTree(env.unions, "", \name, union, acc -> {
			acc + liftUnion2IncaNode(name, union, nStructArgs)
		}),
		"liftStructs2incaDef", foldTree(env.structs, "", \name, struct, acc -> {
			acc + liftStruct2IncaNode(name, struct)
		}),
		"liftIncaStructDec", foldTree(env.structs, "", \name, struct, acc -> {
			acc + "incaStruct" + name + "(" + superglue(struct.args, \s -> "IncaValue", ",") + ") -> IncaValue;\n"
		}),
		"liftIncaStructDef", foldTree(env.structs, "", \name, struct, acc -> {
			acc + liftIncaStruct(name, struct)
		}),
		"liftIncaFieldDec", foldTree(fields, "", \field, __, acc -> {
			acc + "incaField_" + field + "(v : IncaValue) -> IncaValue;\n"
		}),
		"liftIncaFieldDef", foldTree(fields, "", \field, sts, acc -> {
			acc + liftIncaFieldDef(field, sts)
		}),
	])
}

liftUnion2IncaNode(name : string, u : FiTypeUnion, nargs : Tree<string, int>) -> string {
	blueprint("
		%name%2IncaValue(v : %name%) -> IncaValue {
			switch (v) {
				%cases%
			}
		}
	", [
		"name", name,
		"cases", superglue(u.typenames, \arg : FiTypeName -> {
			args = lookupTreeDef(nargs, arg.name, 0);
			arg.name + "(" + strGlue(generate(0, args, \__ -> "__"), ", ") + "): " + arg.name + "2IncaValue(v);"
		}, "\n")
	]
	);
}

liftStruct2IncaNode(name : string, s : FiTypeStruct) -> string {
	blueprint("
		%name%2IncaValue(v : %name%) -> IncaValue {
			makeIncaNode(%name%_ID, [
				%fields%
			])
		}
	", [
		"name", name,
		"fields", superglue(s.args, \arg : FiStructArg -> {
			liftIncaField("v." + arg.name, arg.type)
		}, ",\n")
	]
	);
}

// Given a field of a type, lift to IncaNode
liftIncaField(field : string, type : FiType) -> string {
	wrap = \n -> "makeInca" + n + "(" + field + ")";
	switch (type) {
		FiTypeVoid(): "NOT SUPPORTED!";
		FiTypeBool(): wrap("Bool");
		FiTypeInt(): wrap("Int");
		FiTypeDouble(): wrap("Double");
		FiTypeString(): wrap("String");
		FiTypeArray(t): "makeIncaArray(map(" + field + ", \\av -> {"
			+ liftIncaField("av", t) +
		"}))";
		FiTypeName(n, __): n + "2IncaValue(" + field + ")";
		//((FiTypeStruct(name, typars, args, info): name + "2IncaValue(" + field + ")";
		//FiTypeUnion(name, typeparameters, typenames, info): name + "2IncaValue(" + field + ")";
		FiTypeNative(): wrap("Native");
		default: "NOT SUPPORTED!";
	}
}

liftIncaType(type : FiType) -> string {
	switch (type : FiType) {
		FiTypeVoid(): "void";
		FiTypeBool(): "bool";
		FiTypeInt(): "int";
		FiTypeDouble(): "double";
		FiTypeString(): "string";
		FiTypeArray(t): "IncaArray"; // Not polymorphic
		FiTypeName(n, __): "IncaNode"; // n + "_M";
		//FiTypeStruct(name, typars, args, info): "IncaNode"; // name + "_ID";
		//FiTypeUnion(name, typeparameters, typenames, info): "IncaNode"; // name + "_ID";
		FiTypeNative(): "native";
		default: "NOT SUPPORTED!";
	}
}

liftIncaStruct(name : string, s : FiTypeStruct) -> string {
	blueprint("
		incaStruct%name%(%args%) -> IncaValue {
			makeIncaNode(%name%_ID, [
				%fields%
			])
		}
	", [
		"name", name,
		"args", superglue(s.args, \arg : FiStructArg -> {
			arg.name + " : IncaValue"
		}, ","),
		"fields", superglue(s.args, \arg : FiStructArg -> {
			arg.name
		}, ",")
	]
	);
}

liftIncaFieldDef(field : string, structs : Set<FiTypeStruct>) -> string {
	blueprint("
		incaField_%name%(v : IncaValue) -> IncaValue {
			switch (getIncaCoreValue(v)) {
				IncaNode(id, fields): {
					%structs%
					else makeIncaVoid();
				}
				default: makeIncaVoid();
			}
		}
	", [
		"name", field,
		"structs", superglue(set2array(structs), \struct : FiTypeStruct -> {
			index = either(findi(struct.args, \a -> a.name == field), -1);
			"if (id == "  + struct.name + "_ID) { fields[" + i2s(index) + "]; }"
		}, "\nelse "),
	]
	);
}
