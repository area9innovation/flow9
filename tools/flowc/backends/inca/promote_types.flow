import tools/flowc/backends/inca/env;
import tools/flowc/incremental/fiprettyprint;
import tools/flowc/incremental/fi_helpers;
import ds/simplegraph;

export {
	/*
	Given
		Form ::= Group, Empty;
			Group(f : [Form]);
	and then we define

		Tropic ::= Form, Cols;
			Cols(f : [Form]);

	In this situation, we have to specialize Group into two different structs:
		Group__Form(f : [Form]);
		Group__Tropic(f : [Tropic]);
	
	This is what we do in this function.

	Secondly, we have to expand union matches in switches to explicitly recurse through
	the expanded unions.

	Todo: We do not handle two extensions at the same time in the same struct.
	*/
	promoteIncaTypes(e : IncaEnv) -> IncaEnv;
}

promoteIncaTypes(e : IncaEnv) -> IncaEnv {
	// A graph of unions that inherit other unions
	graph = foldTree(e.unions, makeSimpleGraph(), \name : string, u : FiTypeUnion, acc : SimpleGraph<string, int> -> {
		fold(u.typenames, acc, \acc2, tn -> {
			if (containsKeyTree(e.unions, tn.name)) {
				// From sub union to super union
				addSimpleEdge(acc2, tn.name, name, 0, 0)
			} else acc2;
		});
	});

	if (false) {
		dot = simpleGraph2dot(graph, "", [], \n -> [DotLabel(n)], \__ -> []);
		setFileContent("inca.dot", dot);
		{}
	}

	// A map from struct to the base union, where the structs is recursive in an extended union
	recStructs = foldTree(e.unions, makeTree(), \name, u : FiTypeUnion, acc : Tree<string, string> -> {
		fold(u.typenames, acc, \acc2, tn -> {
			unions = extractFiTypeUnions(makeSet(), e, tn);
			foldSet(unions, acc2, \acc3, un -> {
				if (tn.name != un) {
					// Check if un is extended. We can do that with the graph above
					if (hasSimpleNode(graph, un)) {
						// println(tn.name + " is recursive in " + un + " and is extended");
						setTree(acc2, tn.name, un)
					} else acc2;
				} else acc2;
			})
		})
	});

	// A tree from struct to what unions we have to promote this struct to
	promotions : Tree<string, [string]> = foldTree(recStructs, makeTree(), \struct, union1, acc -> {
		supers = reachableClosureFromSimpleNode(graph, union1);
		foldSet(supers, acc, \acc2, super -> {
			treePushToArrayValue(acc2, struct, super)
		})
	});

	// Construct the promoted structs
	promotedStructs : Tree<string, FiTypeStruct> = foldTree(e.structs, makeTree(), \name, struct, acc -> {
		baseUnion = lookupTreeDef(recStructs, name, "");
		proms = getTreeArrayValue(promotions, name);
		fold(proms, acc, \acc2, prom : string -> {
			// Set the union replacement in our environment for this promotion
			rep = makeTree1(baseUnion, prom);
			newName = name + "__" + prom;
			promotedStruct = FiTypeStruct(
				newName, [], map(struct.args, \a -> {
					FiStructArg(
						a.name,
						replaceFiTypeUnion(e, rep, a.type),
						a.ismutable
					)
				}), struct.start
			);
			setTree(acc2, newName, promotedStruct)
		});
	});

	// A tree of what unions have expanded structs
	promotedUnions : Tree<string, [string]> = foldTree(promotions, makeTree(), \s, us, acc -> {
		fold(us, acc, \acc2, u -> {
			treePushToArrayValue(acc2, u, s)
		})
	});

	// Expand the union definitions with the promoted structs
	unions : Tree<string, FiTypeUnion> = mapTree(e.unions, \union -> {
		promoted = getTreeArrayValue(promotedUnions, union.name);
		extra = map(promoted, \p -> FiTypeName(p + "__" + union.name, []));
		FiTypeUnion(union with typenames = concat(union.typenames, extra))
	});

	// Expand union matches with promoted structs
	promoteData = PromoteData(e, graph, promotions, promotedStructs, promotedUnions, makeTree());
	promotedFunctions : Tree<string, FiFunctionDec> = mapTree(e.functions, \dec : FiFunctionDec -> {
		promoteIncaFunctionDec(promoteData, dec)
	});

	IncaEnv(
		e with
		structs = mergeTree(e.structs, promotedStructs),
		unions = unions,
		promotedStructs = promotedStructs,
		functions = promotedFunctions
	);
}

// What unions occur in this type (including as arguments in structs)?
extractFiTypeUnions(acc : Set<string>, e : IncaEnv, ty : FiType) -> Set<string> {
	switch (ty) {
		FiTypeArray(t): extractFiTypeUnions(acc, e, t);
		FiTypeFunction(args, returnType): {
			acc0 = extractFiTypeUnions(acc, e, returnType);
			fold(args, acc0, \acc2, a -> extractFiTypeUnions(acc2, e, a.type));
		}
		FiTypeRef(t): extractFiTypeUnions(acc, e, t);
		FiTypeParameter(n): acc;
		FiTypeBool(): acc;
		FiTypeInt(): acc;
		FiTypeDouble(): acc;
		FiTypeString(): acc;
		FiTypeFlow(): acc;
		FiTypeVoid(): acc;
		FiTypeNative(): acc;
		FiTypeName(name, typeparameters): {
			if (containsKeyTree(e.unions, name)) {
				insertSet(acc, name)
			} else {
				st = lookupTree(e.structs, name);
				switch (st) {
					None(): acc;
					Some(sdef): {
						fold(sdef.args, acc, \acc2, arg -> {
							extractFiTypeUnions(acc2, e, arg.type)
						})
					}
				}
			}
		}
	}
}

// Rename typenames according to the promotions map
replaceFiTypeUnion(e : IncaEnv, promotions : Tree<string, string>, ty : FiType) -> FiType {
	switch (ty) {
		FiTypeParameter(n): ty;
		FiTypeBool(): ty;
		FiTypeInt(): ty;
		FiTypeDouble(): ty;
		FiTypeString(): ty;
		FiTypeFlow(): ty;
		FiTypeVoid(): ty;
		FiTypeNative(): ty;
		FiTypeArray(t): FiTypeArray(replaceFiTypeUnion(e, promotions, t));
		FiTypeRef(t): FiTypeRef(replaceFiTypeUnion(e, promotions, t));
		FiTypeName(n, tp): FiTypeName(lookupTreeDef(promotions, n, n), tp);

		FiTypeFunction(args, returnType): ty;
	}
}

//
// Expand union-cases in switches, where one or more of the structs in the union is promoted
//
/*
	fn(tropic) -> {
		switch (tropic) {
			Form(): tropic;
			Lines(): ...;
		}
	}

	-> 

	fn(tropic) -> {
		switch (tropic) {
			Form(): tropic;
			Group__Tropic(c): map(c, fn);	// This is added!
			Lines(): ...;
		}
	}

*/

promoteIncaFunctionDec(data : PromoteData, dec : FiFunctionDec) -> FiFunctionDec {
	argTypes = filtermap(dec.type.args, \a -> {
		argName = getFiTypeName(a.type);
		if (argName == "") None() else Some(argName);
	});
	retType = getFiTypeName(dec.type.returnType);

	data0 = if (length(argTypes) == 1 && retType != "") {
		argType = argTypes[0];
		// What types do we promote retType to?
		supers = reachableClosureFromSimpleNode(data.graph, retType);
		if (containsSet(supers, argType)) {
			// OK, we have a converter from argType to retType
			// Then construct a function which takes an FiExp of argType and returns the res type
			// and insert it in the PromoteData to be used for the recursive calls
			if (length(dec.type.args) != 1) {
				println("TODO: Support functions with more args")
			}
			PromoteData(
				data with
				buildRec = setTree(data.buildRec, argType, \e -> {
					FiCall(
						FiVar(dec.name, dec.type, dec.defiStart),
						[
							e
						],
						FiTypeName(retType, []),
						dec.defiStart
					)
				})
			)
		} else data;
	} else data;

	FiFunctionDec(
		dec with lambda = 
			promoteIncaLambda(data0, dec.lambda)
	)
}

PromoteData(
	env : IncaEnv,
	// Graph from union to super types
	graph : SimpleGraph<string, int>,
	// A tree from struct to what unions we have to promote this struct to
	promotions : Tree<string, [string]>, 
	// A tree from promoted struct to the promoted type
	promotedStructs : Tree<string, FiTypeStruct>,
	// A tree from union to promoted struct names
	promotedUnions : Tree<string, [string]>,
	// A map from type to a function which can do a rec call to lower it
	buildRec : Tree<string, (FiExp) -> FiExp>,
);

promoteIncaExp(data : PromoteData, ex : FiExp) -> FiExp {
	rec = \ex0 -> {
		promoteIncaExp(data, ex0);
	}
	switch (ex) {
		FiLambda(args, body, type, start): promoteIncaLambda(data, ex);

		FiCall(f, args, type, start): FiCall(ex with f = rec(f), args = map(args, rec));

		FiVar(name, type, start): ex;
		FiLet(name, type, e1, e2, type2, start): FiLet(ex with e1 = rec(e1), e2 = rec(e2));
		FiIf(e1, e2, e3, type, start): FiIf(ex with e1 = rec(e1), e2 = rec(e2), e3 = rec(e3));
		FiSwitch(x, switchType, cases, type, start): promoteIncaSwitch(data, ex);
		FiCast(e, tFrom, tTo, type, start): FiCast(ex with e = rec(e));
		FiSeq(es, type, start): FiSeq(ex with es = map(es, rec));
		FiCallPrim(op, es, type, start): FiCallPrim(ex with es = map(es, rec));

		FiVoid(start): ex;
		FiDouble(d, start): ex;
		FiInt(i, start): ex;
		FiString(s, start): ex;
		FiBool(b, start): ex;

		FiRequire(flowfile, e, type, start): FiRequire(ex with e = rec(e));
		FiUnsafe(name, fallback, type, start): FiUnsafe(ex with fallback = rec(fallback))
	}
}

promoteIncaLambda(data : PromoteData, l : FiLambda) -> FiLambda {
	FiLambda(
		l with body = promoteIncaExp(data, l.body)
	)
}

// Expand union-cases in switches, where one or more of the structs in the union is promoted
promoteIncaSwitch(data : PromoteData, s : FiSwitch) -> FiSwitch {
	// What union are we switching on?
	union = getFiTypeName(s.switchType);
	structs = getTreeArrayValue(data.promotedUnions, union);

	FiSwitch(s with
		cases = fold(s.cases, [], \acc0 : [FiCase], case : FiCase -> {
			if (contains(structs, case.struct) && switch (case.body) {
				FiVar(bodyVar, __, __): bodyVar == s.x.name;
				default: false;
			}) {
				// We have a case where we just return the in-bound name
				normal = FiCase(
					case with body = promoteIncaExp(data, case.body)
				);

				mstructDef = lookupTree(data.env.structs, case.struct);
				switch (mstructDef) {
					None(): {
						arrayPush(acc0, normal);
					}
					Some(structdef): {
						promotedStruct = case.struct + "__" + union;
						promotedStructDef = lookupTreeDef(data.promotedStructs, promotedStruct, structdef);

						promoted = FiCase(
							case with 
							struct = promotedStruct,
							body = FiCallPrim(
								FcStructPrim(case.struct),
								mapi(structdef.args, \i, a -> {
									// The incoming type of the argument of the promoted type
									inType = promotedStructDef.args[i].type;

									makeRecursiveIncaStructArg(
										data,
										FiCallPrim(
											FcFieldPrim(a.name),
											[s.x],
											inType,
											case.start
										),
										a.name, inType, 
										a.type, 
										union + "2" + "orig", 	// TODO: Find the name of the converter fn
										case.start
									)
								}),
								s.type,
								case.start
							)
						);
						
						if (false) {
							println(
								prettyFiExp(
									FcPretty(true, true, makeTree(), makeTree()),
									FiSwitch(s with cases = [promoted])
								)
							);
						}
						concat(acc0, [normal, promoted]);
					}
				}
			} else {
				arrayPush(acc0, FiCase(
					case with body = promoteIncaExp(data, case.body)
				))
			}
		})
	)
}

// Construct code for this argument in the inType, so that it becomes resType.
makeRecursiveIncaStructArg(data : PromoteData, arg : FiExp, argName : string, inType : FiType, resType : FiType, recfn : string, start : int) -> FiExp {
	switch (inType) {
		FiTypeArray(t): {
			// Peel off the array of the res type as well
			resArrayType = switch (resType) {
				FiTypeArray(rt): rt;
				default: resType;
			}
			FiCall(
				FiVar("map", FiTypeFunction([FiFunArg(argName + "_", inType)], FiTypeArray(resType)), start), 
				[
					arg, 
					FiLambda(
						[FiFunArg(argName + "_", t)],
						makeRecursiveIncaStructArg(
							data,
							FiVar(argName + "_", resArrayType, start),
							argName + "_", t, resArrayType, recfn, start
						),
						FiTypeFunction(
							[FiFunArg(argName + "_", t)],
							resType
						),
						start
					)
				], 
				FiTypeArray(resType),
				start
			);
		}
		FiTypeName(tn, __): {
			rec = lookupTree(data.buildRec, tn);
			switch (rec) {
				None(): arg;
				Some(r): r(arg)
			}
		}
		FiTypeParameter(n): arg;
		FiTypeBool(): arg;
		FiTypeInt(): arg;
		FiTypeDouble(): arg;
		FiTypeString(): arg;
		FiTypeFlow(): arg;
		FiTypeVoid(): arg;
		FiTypeNative(): arg;

		FiTypeFunction(args, returnType): arg;
		FiTypeRef(t): arg;
	}
}
