import tools/flowc/incremental/fi_helpers;
import tools/flowc/backends/common;

export {

Cpp3GlobalContext(
	config: FiCpp3Config,
	program: FiProgram,
	packagePath: string,
	// Index of all structs
	structs2id: Tree<string, int>,
	// type parameter representation in c++ source
	typar2cpp: (FiTypeParameter) -> string,
	// type name representation in c++ source
	typename2cpp: (string) -> string,
	// global name (function or variable) representation in c++ source
	varname2cpp: (string) -> string,
	// Native functions definition and other information
	natives: Tree<string, CppNative>,
	// Parts of a shared runtime code
	runtimeParts: Tree<string, CppRuntimePart>,
	// Variables, which initialization happens in main function (i.e. cannot be static)
	volatileVars: Set<string>,
	// Code of volatile variables initialization
	volatileInit: ref [string],
	errors: ref [string]
);

CppNative(
	name: string,
	// Definition of native - it's c++ function implementation.
	// Arguments: first - type encoding (typename2cpp), second - var encoding (varname2cpp)
	def: ((string) -> string, (string) -> string) -> string,
	// Possible inlining
	inline: Maybe<CppInline>,
	// External dependencies like <cmath>, which should be included like #include <cmath>
	include: [string],
	// Runtime dependencies on the common parts of runtime (i.e. CppRuntimePart)
	depends: [string]
);

CppInline(
	// construction of an inlined native call, first arg - call arguments, second arg - the type of a call
	def: ([string]) -> string,
);

CppRuntimePart(
	// The name of a runtime part - some natives may share the same parts,
	// so they depend on a name, rather then on a source itself
	name: string,
	// Global definitions of a runtime part
	header: string,
	// A code, which is put in the main .cpp file (i.e. may use anything)
	source: string,
	// Possible initialization calls in main function
	main: string,
	// External dependencies like <cmath>, which should be included like #include <cmath>
	include: [string],
);

CppNativePlain(
	name: string,
	// Definition of native - it's c++ function implementation.
	// Arguments: first - type encoding (typename2cpp), second - var encoding (varname2cpp)
	def: string,
	// Possible inlining
	inline: string,
	// External dependencies like <cmath>, which should be included like #include <cmath>
	include: [string],
	// Runtime dependencies on the common parts of runtime (i.e. CppRuntimePart)
	depends: [string]
);

}
