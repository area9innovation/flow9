import tools/flowc/backends/common;
import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/java/fi2java_utils;

export {
	Cpp3Module(
		key : string,
		module : FiModule,
		id : string,
		vars : ref List<string>,
		decl_order : [FiDeclaration]
	);

	Cpp3Struct(
		id : int,
		name : string,
		cpp3Name : string,
		csmodule : Cpp3Module,
		fields : [Cpp3StructField],
	);

	Cpp3StructField(
		name : string,
		type : FiType,
		isMutable : bool
	);

	Cpp3WrapperCode(
		name : string,
		type : string,
		code : string
	);

	Cpp3GlobalContext(
		config : FiCpp3Config,
		program : FiProgram,
		package_namespace : string,

		cmodules : Tree<string, Cpp3Module>,
		csm_list : [Cpp3Module],
		cstructs : Tree<string, Cpp3Struct>,

		mutable globals : Tree<string, Cpp3GlobalInfo>,
		mutable globalFuncs : Tree<string, Cpp3GlobalInfo>,
		mutable host_natives : Tree<string, Set<string>>, // potential natives, which are present in a host (cpp3 source)
		mutable missing_natives : Set<string>, // natives which are not implemented neither have fallbacks

		mutable has_func_def : Tree<int,bool>,
		mutable has_field_accessor : Tree<string,bool>,

		mutable uses_host : Tree<string,bool>,
		init_code : ref List<string>,
		wrapper_code : ref List<Cpp3WrapperCode>,
		native_wrapper_code : ref List<Cpp3WrapperCode>,
		header_generator : (double) -> ref List<string>,

		hash_collisions : bool,
		to_compile : ref List<string>, // set of cpp3 sources for compilation. Some may be already compiled
		mutable errors : [string]
	);

	Cpp3ScopeContext(
		func : Cpp3FunctionContext,
		indent : string,
		locals : Tree<string, Cpp3LocalInfo>
	);

	Cpp3FunctionContext(
		gctx : Cpp3GlobalContext,
		csm : Cpp3Module,
		parent : Maybe<ref Cpp3ScopeContext>,
		text : ref List<string>,
		next_local_id : ref int,
		pullctx : FiStatementPullContext,
		can_tail_call : string,
		mutable has_tail_call : bool,
		arg_locals : [Cpp3LocalInfo],
	);

	Cpp3LocalInfo(
		name : string,
		id : string,
		type : string,
		is_final : bool,
		is_obj : bool
	);

	Cpp3GlobalInfo(
		class : string,
		name : string,
		csmodule : Cpp3Module,
		type : FiType,
		cast : string // in case a native returns some struct/union value we need an explicit cast
	);

	Cpp3ReturnLocation ::= Cpp3ReturnIgnore, Cpp3ReturnLocal, Cpp3ReturnStmt;
		Cpp3ReturnIgnore();
		Cpp3ReturnLocal(name : string, type : string);
		Cpp3ReturnStmt(type : string);

	writeCpp3Source(gctx : Cpp3GlobalContext, path : string, src : string) -> void;
}

writeCpp3Source(gctx : Cpp3GlobalContext, path : string, src : string) -> void {
	if (!updateFileContent(path, src)) {
		gctx.errors ::= concat(gctx.errors, ["failed to write cpp3 source " + path]);
	}
	resolved = resolveRelativePath(path);
	rlistPush(gctx.to_compile, resolved + "\n");
	{}
}

