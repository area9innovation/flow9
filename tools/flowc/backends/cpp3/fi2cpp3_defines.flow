import tools/flowc/manipulation/effects;
import tools/flowc/backends/common;

export {

Cpp3GlobalContext(
	globEnv : FcTypeEnvGlobal,
	config: FiCpp3Config,
	program: FiProgram,
	effects: FiEffects,
	// Array of all structs
	structs: [FiTypeStruct],
	// Index of all structs
	structs2cpp: Tree<string, Cpp3Struct>,
	// struct name to struct id
	structid2cpp: (string) -> string,
	// Native functions definition and other information
	natives: Tree<string, Cpp3Native>,
	// Parts of a shared runtime code
	runtimeParts: Tree<string, Cpp3RuntimePart>,
	// Indicator of successfull compilation
	success: ref bool,
	// Currently translated module. Used for debugging
	currentModule: string,
	// Currently translated funciton/global variable. Used for debugging
	currentToplevel: Maybe<FiToplevel>,
	// Type parameters of a current toplevel. Used to replace implicit (dummy) typars
	toplevelTypars: Set<string>,
	// Name of a current toplevel
	currentToplevelName: string
);

Cpp3CompiledProgram(
	name: string,      // main module name
	sources: [string], // names of all generated files
	dependencies:  [Cpp3Dependency], // all dependencies, used in program
	success: bool
);

Cpp3CompiledModule(
	name: string,
	isMain: bool,          // indicates the module with main funciton
	decls: [Cpp3CompiledDeclaration], // the main contents of a compiled module
	imports: [string],     // imports from flow module
	natives: [Cpp3Native], // natives, occurred in module. Used to build and link with external dependencies
	hasInit: bool,         // does it have initialization code?
	hasTerm: bool,         // does it have terminalization code?
);

Cpp3StructArg(ind: int, type: FiType);

Cpp3Struct(
	id: int,
	struct: FiTypeStruct,
	argInds: Tree<string, Cpp3StructArg>
);

Cpp3CompiledDeclaration(
	name: string,
	headerOnly : bool,   // whether this definition should be placed in *.hpp or in *.cpp
	forward: string,     // forward declaration
	traits: string,      // type traits, which must be places in ::flow::traits namespace
	declaration: string, // real declaration
	definition: string,  // main contents - c++ code of definition
	init: string,        // initialization code
	term: string,        // terminalization code
);

Cpp3Native(
	name: string,
	// whether this definition should be placed in *.hpp or in *.cpp
	headerOnly : bool,
	// declaration of native.
	declaration: string,
	// Definition of native - it's c++ function implementation.
	definition: string,
	// Possible inlining
	inlining: string,
	// External dependencies like <cmath>, which should be included like #include <cmath>
	dependencies: [Cpp3Dependency],
	// Runtime dependencies on the common parts of runtime (i.e. Cpp3RuntimePart)
	runtimeParts: [string]
);

Cpp3RuntimePart(
	// The name of a runtime part - some natives may share the same parts,
	// so they depend on a name, rather then on a source itself
	name: string,
	// Global definitions of a runtime part
	header: string,
	// A code, which is put in the main .cpp file (i.e. may use anything)
	source: string,
	// Possible initialization calls in main function
	mainInit: string,
	// Possible terminalization calls in main function
	mainTerm: string,
	// External dependencies like <cmath>, which should be included like #include <cmath>
	dependencies: [Cpp3Dependency],
	// If true, the source of the part goes into main module.
	staysInMain: bool
);

Cpp3Dependency ::= Cpp3Std, Cpp3Qt;
	// Default dependency on stadard library
	Cpp3Std(
		includes: [string], // like <cmath>, etc.
		libs: [string]      // like -lglu32, etc.
	);
	// Dependency on some Qt entity
	Cpp3Qt(
		modules: [string],   // like `core`, `concurrent`, `gui`,...
		includes: [string],  // like <QProcess>
		opts: [Cpp3QtOpt]
	);
	// Example of Qt option:
	// win32:contains(QMAKE_TARGET.arch, x86_64) {
    //    CONFIG += use_jit
    // }
	//
	Cpp3QtOpt(
		condition: string, // Like: win32:contains(QMAKE_TARGET.arch, x86_64)
		name: string,      // Like: QT, LIBS, CONFIG, etc.
		sign: string,      // Like +=, -=, =, etc.
		value: [string]    // Like use_jit
	);

	// Functions, which must be in any compiled program.
	cpp3MandatoryNatives = [
		// is used in cast unrolling
		Pair("ds/array", FiNativeDec("map", false,
			FiTypeFunction([
					FiFunArg("", FiTypeArray(FiTypeParameter("?"))),
					FiFunArg("", FiTypeFunction([FiFunArg("", FiTypeParameter("?"))], FiTypeParameter("??")))
				],
				FiTypeArray(FiTypeParameter("??")),
			),
			"Native.map", FiVoid(0), 0, 0
		)),
		Pair("ds/array", FiNativeDec("length", false,
			FiTypeFunction([
					FiFunArg("", FiTypeArray(FiTypeParameter("?")))
				],
				FiTypeInt(),
			),
			"Native.length", FiVoid(0), 0, 0
		)),
		Pair("string", FiNativeDec("strlen", false,
			FiTypeFunction([
					FiFunArg("", FiTypeString())
				],
				FiTypeInt(),
			),
			"Native.strlen", FiVoid(0), 0, 0
		)),
		Pair("runtime", FiNativeDec("fail", true,
			FiTypeFunction([
					FiFunArg("", FiTypeString())
				],
				FiTypeVoid(),
			),
			"Native.fail", FiVoid(0), 0, 0
		)),
		Pair("runtime", FiNativeDec("fail0", true,
			FiTypeFunction([
					FiFunArg("", FiTypeString())
				],
				FiTypeParameter("?"),
			),
			"Native.fail0", FiVoid(0), 0, 0
		))
	];
}
