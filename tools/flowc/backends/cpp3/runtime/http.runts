[
Cpp3RuntimePart("http",
"
struct HttpSupport {
	static void start();
	static void stop();
	static void join();
	static void registerServer(fv::HttpServer* s) { servers_.push_back(s); }
private:
	static std::jthread http_thread;
	static bool is_running_;
	static std::vector<fv::HttpServer*> servers_;
};
",
"

std::jthread HttpSupport::http_thread;
bool HttpSupport::is_running_ = false;
std::vector<fv::HttpServer*> HttpSupport::servers_;

void HttpSupport::start() {
	if (!is_running_) {
		fv::Tasks::Init(std::thread::hardware_concurrency());
		http_thread = std::move(std::jthread([]() -> void {
			fv::Tasks::Run();
		}));
		std::this_thread::sleep_for(std::chrono::milliseconds(10));
		is_running_ = true;
	}
}
void HttpSupport::stop() {
	if (is_running_) {
		fv::Tasks::Stop();
		//std::this_thread::sleep_for(std::chrono::milliseconds(100));
		for (fv::HttpServer* s : servers_) {
			delete s;
		}
		is_running_ = false;
	}
}

void HttpSupport::join() {
	if (is_running_) {
		http_thread.join();
	}
}

",
"HttpSupport::start();",
"HttpSupport::stop();",
"HttpSupport::join();",

[Cpp3Std(["<coroutine>", "<fv/fv.h>"], ["-lz", "-lssl", "-lcrypto", "-lfmt"])], false
)
]