[
Cpp3RuntimePart("http",
"
struct HttpSupport {
	using Map = std::map<std::string, std::string>;
	using MapCI = fv::CaseInsensitiveMap;
	static void start();
	static void stop();
	static void join();
	static void registerServer(fv::HttpServer* s) { servers_.push_back(s); }
	template<typename M>
	static M pairs2map(Vec<Vec<String*>*>* pairs) {
		M m;
		for (Vec<String*>* kv : *pairs) {
			if (kv->size() > 0) {
				std::string key = kv->get(0)->toStd();
				std::string val;
				if (kv->size() > 1) {
					val = kv->get(1)->toStd();
				}
				m[key] = val;
			}
		}
		return m;
	}
	template<typename M>
	static Vec<Vec<String*>*>* map2pairs(const M& m) {
		Vec<Vec<String*>*>* ret = Vec<Vec<String*>*>::make({});
		for (auto p: m) {
			ret->pushBack(
				Vec<String*>::make({
					String::make(p.first), String::make(p.second)
				})
			);
		}
		return ret;
	}
	static String* methodType2s(fv::MethodType t) {
		switch (t) {
			case fv::MethodType::Head:   return String::make(u\"HEAD\");
			case fv::MethodType::Option: return String::make(u\"OPTION\");
			case fv::MethodType::Get:    return String::make(u\"GET\");
			case fv::MethodType::Post:   return String::make(u\"POST\");
			case fv::MethodType::Put:    return String::make(u\"PUT\");
			case fv::MethodType::Delete: return String::make(u\"DELETE\");
		}
	}
private:
	static std::jthread http_thread;
	static bool is_running_;
	static std::vector<fv::HttpServer*> servers_;
};
",
"

std::jthread HttpSupport::http_thread;
bool HttpSupport::is_running_ = false;
std::vector<fv::HttpServer*> HttpSupport::servers_;

void HttpSupport::start() {
	if (!is_running_) {
		fv::Tasks::Init(std::thread::hardware_concurrency());
		http_thread = std::move(std::jthread([]() -> void {
			fv::Tasks::Run();
		}));
		std::this_thread::sleep_for(std::chrono::milliseconds(10));
		is_running_ = true;
	}
}
void HttpSupport::stop() {
	if (is_running_) {
		fv::Tasks::Stop();
		for (fv::HttpServer* s : servers_) {
			delete s;
		}
		is_running_ = false;
	}
}

void HttpSupport::join() {
	if (is_running_) {
		http_thread.join();
	}
}

",
"HttpSupport::start();",
"HttpSupport::stop();",
"HttpSupport::join();",

[Cpp3Std(["<coroutine>", "<fv/fv.h>"], ["-lz", "-lssl", "-lcrypto", "-lfmt"])], false
)
]