[

Cpp3RuntimePart("date_time_format",
"const std::string date_time_format(\"%Y-%m-%d %H:%M:%S\");",
"", "", "", [], false),

Cpp3RuntimePart("std_output_mutex",
"extern std::mutex std_output_mutex;",
"std::mutex std_output_mutex;", "", "", [], false),

Cpp3RuntimePart("to_binary",
"
// Unions for conversion from Double/Int to 16-bit chars and back

struct Two16Chars {
	Two16Chars(char16_t v0, char16_t v1): c0(v0), c1(v1) {}
	char16_t c0;
	char16_t c1;
};

union IntOrChars {
	Two16Chars chars;
	Int int_;
	IntOrChars(Int i): int_(i) { }
	IntOrChars(char16_t i0, char16_t i1): chars(i0, i1) { }
};
struct Four16Chars {
	Four16Chars(char16_t v0, char16_t v1, char16_t v2, char16_t v3): c0(v0), c1(v1), c2(v2), c3(v3) {}
	char16_t c0;
	char16_t c1;
	char16_t c2;
	char16_t c3;
};

union DoubleOrChars {
	Four16Chars chars;
	Double double_;
	DoubleOrChars(Double d): double_(d) { }
	DoubleOrChars(char16_t i0, char16_t i1, char16_t i2, char16_t i3): chars(i0, i1, i2, i3) { }
};

inline void appendCharValue(Int c, string& s) {
	s.push_back(c & 0xffff);
}
inline void appendBinaryInt32(Int v, string& s) {
	IntOrChars i(v);
	appendCharValue(i.chars.c0, s);
	appendCharValue(i.chars.c1, s);
}
void appendBinaryValue(Flow* v, string& s, std::unordered_map<Int, Int>& structIdxs, std::vector<Int>& structDefs);
",
"
void appendBinaryValue(Flow* v, string& s, std::unordered_map<Int, Int>& structIdxs, std::vector<Int>& structDefs) {
	switch (v->typeId()) {
		case TypeFx::VOID: {
			// void values shouldn't be serialized
			break;
		}
		case TypeFx::INT: {
			Int val = v->get<Int>();
			if ((val & 0xFFFF8000) != 0) {
				appendCharValue(0xFFF5, s);
				appendBinaryInt32(val, s);
			} else {
				appendCharValue(val, s);
			}
			break;
		}
		case TypeFx::STRING: {
			const string& val = v->get<String*>()->str();
			Int str_len = val.size();
			if (str_len > 65535) {
				appendCharValue(0xFFFB, s);
				appendBinaryInt32(str_len, s);
			} else {
				appendCharValue(0xFFFA, s);
				appendCharValue(str_len, s);
			}
			for (auto c : val) {
				appendCharValue(c, s);
			}
			break;
		}
		case TypeFx::DOUBLE: {
			Double val = v->get<Double>();
			appendCharValue(0xFFFC, s);
			DoubleOrChars d(val);
			appendCharValue(d.chars.c0, s);
			appendCharValue(d.chars.c1, s);
			appendCharValue(d.chars.c2, s);
			appendCharValue(d.chars.c3, s);
			break;
		}
		case TypeFx::BOOL: {
			appendCharValue(v->get<Bool>() ? 0xFFFE : 0xFFFD, s);
			break;
		}
		case TypeFx::ARRAY: {
			Int l = v->componentSize();
			if (l == 0) {
				appendCharValue(0xFFF7, s);
			} else {
				if (l > 65535) {
					appendCharValue(0xFFF9, s);
					appendBinaryInt32(l, s);
				} else {
					appendCharValue(0xFFF8, s);
					appendCharValue(l, s);
				}
				for (Int i = 0; i < v->componentSize(); ++i) {
					incRc(v);
					appendBinaryValue(v->getFlowRc(i), s, structIdxs, structDefs);
				}
			}
			break;
		}
		default: {
			if (structIdxs.find(v->typeId()) == structIdxs.end()) {
				structIdxs[v->typeId()] = structDefs.size();
				structDefs.push_back(v->typeId());
			}
			Int struct_idx = structIdxs.at(v->typeId());
			appendCharValue(0xFFF4, s);
			appendCharValue(struct_idx, s);
			for (Int i = 0; i < v->componentSize(); ++ i)  {
				incRc(v);
				appendBinaryValue(v->getFlowRc(i), s, structIdxs, structDefs);
			}
			break;
		}
	}
	decRc(v);
}
", "", "",
[Cpp3Std(["<unordered_map>"], [])], false
)

]