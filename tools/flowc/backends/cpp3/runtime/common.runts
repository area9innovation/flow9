[

Cpp3RuntimePart("date_time_format",
"const std::string date_time_format(\"%Y-%m-%d %H:%M:%S\");",
"", "", "", "", [], false),

Cpp3RuntimePart("std_output_mutex",
"extern std::mutex std_output_mutex;",
"std::mutex std_output_mutex;", "", "", "", [], false),

Cpp3RuntimePart("to_binary",
"
// Unions for conversion from Double/Int to 16-bit chars and back

struct Two16Chars {
	Two16Chars(char16_t v0, char16_t v1): c0(v0), c1(v1) {}
	char16_t c0;
	char16_t c1;
};

union IntOrChars {
	Two16Chars chars;
	Int int_;
	IntOrChars(Int i): int_(i) { }
	IntOrChars(char16_t i0, char16_t i1): chars(i0, i1) { }
};
struct Four16Chars {
	Four16Chars(char16_t v0, char16_t v1, char16_t v2, char16_t v3): c0(v0), c1(v1), c2(v2), c3(v3) {}
	char16_t c0;
	char16_t c1;
	char16_t c2;
	char16_t c3;
};

union DoubleOrChars {
	Four16Chars chars;
	Double double_;
	DoubleOrChars(Double d): double_(d) { }
	DoubleOrChars(char16_t i0, char16_t i1, char16_t i2, char16_t i3): chars(i0, i1, i2, i3) { }
};

inline void appendCharValue(Int c, string& s) {
	s.push_back(c & 0xffff);
}
inline void appendBinaryInt32(Int v, string& s) {
	IntOrChars i(v);
	appendCharValue(i.chars.c0, s);
	appendCharValue(i.chars.c1, s);
}
void appendBinaryValue(Flow* v, string& s, phmap::parallel_flat_hash_map<Int, Int>& structIdxs, std::vector<Int>& structDefs);

void decodeBinaryArray(const char16_t*& s, const char16_t* end, Flow* default_, Vec<Vec<Flow*>*>* structDefs, Int n, Vec<Flow*>* arr);

Flow* decodeBinary(const char16_t*& s, const char16_t* end, Flow* default_, Vec<Vec<Flow*>*>* structDefs);
Flow* decodeBinaryFast(const char16_t*& s, const char16_t* end, Flow* default_, Vec<Vec<Flow*>*>* structDefs);

",
"
void appendBinaryValue(Flow* v, string& s, phmap::parallel_flat_hash_map<Int, Int>& structIdxs, std::vector<Int>& structDefs) {
	switch (v->typeId()) {
		case TypeFx::VOID: {
			// void values shouldn't be serialized, but still...
			appendCharValue(0xFFFF, s);
			break;
		}
		case TypeFx::INT: {
			Int val = v->get<Int>();
			if ((val & 0xFFFF8000) != 0) {
				appendCharValue(0xFFF5, s);
				appendBinaryInt32(val, s);
			} else {
				appendCharValue(val, s);
			}
			break;
		}
		case TypeFx::STRING: {
			const string& val = v->get<String*>()->str();
			Int str_len = val.size();
			if (str_len > 65535) {
				appendCharValue(0xFFFB, s);
				appendBinaryInt32(str_len, s);
			} else {
				appendCharValue(0xFFFA, s);
				appendCharValue(str_len, s);
			}
			for (auto c : val) {
				appendCharValue(c, s);
			}
			break;
		}
		case TypeFx::DOUBLE: {
			Double val = v->get<Double>();
			appendCharValue(0xFFFC, s);
			DoubleOrChars d(val);
			appendCharValue(d.chars.c0, s);
			appendCharValue(d.chars.c1, s);
			appendCharValue(d.chars.c2, s);
			appendCharValue(d.chars.c3, s);
			break;
		}
		case TypeFx::BOOL: {
			appendCharValue(v->get<Bool>() ? 0xFFFE : 0xFFFD, s);
			break;
		}
		case TypeFx::ARRAY: {
			Int l = v->componentSize();
			if (l == 0) {
				appendCharValue(0xFFF7, s);
			} else {
				if (l > 65535) {
					appendCharValue(0xFFF9, s);
					appendBinaryInt32(l, s);
				} else {
					appendCharValue(0xFFF8, s);
					appendCharValue(l, s);
				}
				for (Int i = 0; i < v->componentSize(); ++i) {
					incRc(v);
					appendBinaryValue(v->getFlowRc(i), s, structIdxs, structDefs);
				}
			}
			break;
		}
		default: {
			if (structIdxs.find(v->typeId()) == structIdxs.end()) {
				structIdxs[v->typeId()] = structDefs.size();
				structDefs.push_back(v->typeId());
			}
			Int struct_idx = structIdxs.at(v->typeId());
			appendCharValue(0xFFF4, s);
			appendCharValue(struct_idx, s);
			for (Int i = 0; i < v->componentSize(); ++ i)  {
				incRc(v);
				appendBinaryValue(v->getFlowRc(i), s, structIdxs, structDefs);
			}
			break;
		}
	}
	decRc(v);
}

Flow* decodeBinaryFast(const char16_t*& s, const char16_t* end, Flow* default_, Vec<Vec<Flow*>*>* structDefs) {
	std::stack<Flow*> stack;
	struct Deferred { Int counter; Int len; Int struct_id; };
	std::stack<Deferred> deferred;
	bool err = false;
	while (s < end && !err) {
		if (!deferred.empty()) {
			++deferred.top().counter;
		}
		char16_t word = *(s++);
		switch (word) {
			case 0xFFF4: {
				// struct
				Int struct_ind = *(s++);
				Vec<Flow*>* def = structDefs->get(struct_ind);
				Int nargs = reinterpret_cast<FInt*>(def->get(0))->val;
				String* name = reinterpret_cast<String*>(def->get(1));
				TypeId struct_id = Dyn::structId(name->str());
				if (struct_id == -1) {
					err = true;
				} else {
					if (nargs > 0) {
						deferred.push(Deferred{0, nargs, struct_id});
					} else {
						stack.push(Dyn::structDef(struct_id).constructor(Vec<Flow*>::make()));
					}
				}
				break;
			}
			case 0xFFF6: {
				// ref
				deferred.push(Deferred{0, 1, 1});
				break;
			}
			case 0xFFFA: {
				// string, < 65536 length
				Int len = *(s++);
				string str(s, len);
				s += len;
				stack.push(String::make(std::move(str)));
				break;
			}
			case 0xFFFC: {
				// double
				char16_t d1 = *(s++);
				char16_t d2 = *(s++);
				char16_t d3 = *(s++);
				char16_t d4 = *(s++);
				DoubleOrChars dorchars(d1, d2, d3, d4);
				stack.push(FDouble::make(dorchars.double_));
				break;
			}
			case 0xFFF5: {
				// int, long
				char16_t i1 = *(s++); char16_t i2 = *(s++);
				IntOrChars iorchars(i1, i2);
				stack.push(FInt::make(iorchars.int_));
				break;
			}
			case 0xFFF3: {
				// special case for ints in range to avoid issues with UCS-2/UTF16 encoding in JS
				// they are stored as two long integers: value & 0xF0F0F0F0 and value & 0x0F0F0F0F
				char16_t i1 = *(s++); char16_t i2 = *(s++);
				char16_t i3 = *(s++); char16_t i4 = *(s++);
				IntOrChars iorchars1(i1, i2);
				IntOrChars iorchars2(i3, i4);
				stack.push(FInt::make(iorchars1.int_ | iorchars2.int_));
				break;
			}
			case 0xFFFD: {
				// false
				stack.push(FBool::make(false));
				break;
			}
			case 0xFFFE: {
				// true
				stack.push(FBool::make(true));
				break;
			}
			case 0xFFF8: {
				// array, < 65536 length
				Int len = *(s++);
				if (len == 0) {
					stack.push(Vec<Flow*>::make());
				} else {
					deferred.push(Deferred{0, len, 0});
				}
				break;
			}
			case 0xFFF7: {
				// empty array
				stack.push(Vec<Flow*>::make());
				break;
			}
			case 0xFFFB: {
				// string, >= 65536 length
				char16_t i1 = *(s++);
				char16_t i2 = *(s++);
				IntOrChars iorchars(i1, i2);
				string str(s, iorchars.int_);
				s += iorchars.int_;
				stack.push(String::make(std::move(str)));
				break;
			}
			case 0xFFF9: {
				// array, >= 65536 length
				char16_t i1 = *(s++);
				char16_t i2 = *(s++);
				IntOrChars iorchars(i1, i2);
				Int len = iorchars.int_;
				if (len == 0) {
					stack.push(Vec<Flow*>::make());
				} else {
					deferred.push(Deferred{0, len, 0});
				}
				break;
			}
			case 0xFFFF: {
				stack.push(FVoid::make());
				break;
			}
			default: {
				stack.push(FInt::make(word));
				break;
			}
		}
		if (!deferred.empty()) {
			while (!deferred.empty() && deferred.top().counter == deferred.top().len) {
				if (deferred.top().struct_id == 1) {
					Flow* v = stack.top();
					stack.pop();
					stack.push(Ref<Flow*>::make(v));
				} else {
					Int len = deferred.top().len;
					Vec<Flow*>* arr = Vec<Flow*>::makeFilled(len);
					while (len-- > 0) {
						Flow* v = stack.top();
						stack.pop();
						arr->vecRef()[len] = v;
					}
					if (deferred.top().struct_id > 1) {
						stack.push(Dyn::structDef(deferred.top().struct_id).constructor(arr));
					} else {
						stack.push(arr);
					}
				}
				deferred.pop();
			}
		}
	}
	if (err || stack.size() != 1) {
		while (!stack.empty()) {
			decRc(stack.top());
			stack.pop();
		}
		return default_;
	} else {
		decRc(default_);
		return stack.top();
	}
}

Flow* decodeBinary(const char16_t*& s, const char16_t* end, Flow* default_, Vec<Vec<Flow*>*>* structDefs) {
	if (s >= end) {
		return default_;
	} else {
		char16_t word = *(s++);
		switch (word) {
			case 0xFFF4: {
				// struct
				Int struct_ind = *(s++);
				if (struct_ind < structDefs->size()) {
					Vec<Flow*>* def = structDefs->get(struct_ind);
					Int nargs = dynamic_cast<FInt*>(def->get(0))->val;
					String* name = dynamic_cast<String*>(def->get(1));
					Vec<Flow*>* args = Vec<Flow*>::make(nargs);
					while (nargs-- > 0) {
						args->pushBack(decodeBinary(s, end, default_, structDefs));
					}
					TypeId struct_id = Dyn::structId(name->str());
					if (struct_id == -1) {
						return default_;
					} else {
						return Dyn::structDef(struct_id).constructor(args);
					}
				} else {
					return default_;
				}
			}
			case 0xFFF6: {
				// ref
				return Ref<Flow*>::make(decodeBinary(s, end, default_, structDefs));
			}
			case 0xFFFA: {
				// string, < 65536 length
				Int len = *(s++);
				string str(s, len);
				s += len;
				return String::make(std::move(str));
			}
			case 0xFFFC: {
				// double
				char16_t d1 = *(s++);
				char16_t d2 = *(s++);
				char16_t d3 = *(s++);
				char16_t d4 = *(s++);
				DoubleOrChars dorchars(d1, d2, d3, d4);
				return FDouble::make(dorchars.double_);
			}
			case 0xFFF5: {
				// int, long
				char16_t i1 = *(s++); char16_t i2 = *(s++); 
				IntOrChars iorchars(i1, i2);
				return FInt::make(iorchars.int_);
			}
			case 0xFFF3: {
				// special case for ints in range to avoid issues with UCS-2/UTF16 encoding in JS
				// they are stored as two long integers: value & 0xF0F0F0F0 and value & 0x0F0F0F0F
				char16_t i1 = *(s++); char16_t i2 = *(s++);
				char16_t i3 = *(s++); char16_t i4 = *(s++);
				IntOrChars iorchars1(i1, i2);
				IntOrChars iorchars2(i3, i4);
				return FInt::make(iorchars1.int_ | iorchars2.int_);
			}
			case 0xFFFD: {
				// false
				return FBool::make(false);
			}
			case 0xFFFE: {
				// true
				return FBool::make(true);
			}
			case 0xFFF8: {
				// array, < 65536 length
				Int len = *(s++);
				Vec<Flow*>* arr = Vec<Flow*>::make(len);
				while (len-- > 0) {
					arr->pushBack(decodeBinary(s, end, default_, structDefs));
				}
				return arr;
			}
			case 0xFFF7: {
				// empty array
				return Vec<Flow*>::make();
			}
			case 0xFFFB: {
				// string, >= 65536 length
				char16_t i1 = *(s++);
				char16_t i2 = *(s++);
				IntOrChars iorchars(i1, i2);
				string str(s, iorchars.int_);
				s += iorchars.int_;
				return String::make(std::move(str));
			}
			case 0xFFF9: {
				// array, >= 65536 length
				char16_t i1 = *(s++);
				char16_t i2 = *(s++);
				IntOrChars iorchars(i1, i2);
				Int len = iorchars.int_;
				Vec<Flow*>* arr = Vec<Flow*>::make(len);
				while (len-- > 0) {
					arr->pushBack(decodeBinary(s, end, default_, structDefs));
				}
				return arr;
			}
			case 0xFFFF: {
				return FVoid::make();
			}
			default: {
				return FInt::make(word);
			}
		}
	}
}


", "", "", "", [], false
)

]