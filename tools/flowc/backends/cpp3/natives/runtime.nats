[

Cpp3Native("for", true,
"template<typename T> T $F_1(for)(T v, Fun<Bool, T>* p, Fun<T, T>* fn);\n",
"template<typename T> T $F_1(for)(T v, Fun<Bool, T>* p, Fun<T, T>* fn) { 
	while (true) {
		incRc(v);
		if (!p->callRc1(v)) {
			break;
		}
		v = fn->callRc1(v);
	}
	decRc(p);
	decRc(fn);
	return v;
}\n\n", "", [], []),

Cpp3Native("bitAnd", true,
"inline Int $F_1(bitAnd)(Int x, Int y);\n",
"inline Int $F_1(bitAnd)(Int x, Int y) { return x & y; }\n\n", 
"($A_0 & $A_1)", 
[], []),

Cpp3Native("bitOr", true,
"inline Int $F_1(bitOr)(Int x, Int y);\n", 
"inline Int $F_1(bitOr)(Int x, Int y) { return x | y; }\n\n", 
"($A_0 | $A_1)", 
[], []),

Cpp3Native("bitXor", true,
"inline Int $F_1(bitXor)(Int x, Int y);\n",
"inline Int $F_1(bitXor)(Int x, Int y) { return x ^ y; }\n\n", 
"($A_0 ^ $A_1)", 
[], []),

Cpp3Native("bitNot", true,
"inline Int $F_1(bitNot)(Int x);\n",
"inline Int $F_1(bitNot)(Int x) { return ~x; }\n\n", 
"~$A_0", 
[], []),

Cpp3Native("random", false,
"Double $F_1(random)();\n",
"Double $F_1(random)() {
	return static_cast<Double>(rand()) / (static_cast<Double>(RAND_MAX) + 1.0);
}\n", "", 
[Cpp3Std(["<cstdlib>"], [])], []),

Cpp3Native("srand", true,
"inline Void $F_1(srand)(Int seed);\n",
"inline Void $F_1(srand)(Int seed) { srand(seed); return void_value; }\n\n", 
"", [Cpp3Std(["<cstdlib>"], [])], []),

Cpp3Native("gc", true,
"inline Void $F_1(gc)();\n",
"inline Void $F_1(gc)() { return void_value; }\n\n", 
"void_value", [], []),

Cpp3Native("fail", false,
"Void $F_1(fail)(String* msg);\n",
"Void $F_1(fail)(String* msg) {
	std::cerr << msg->toStd() << std::endl;
	decRc(msg);
	exit(1);
	return void_value;
}\n", "", [], []),

Cpp3Native("fail0", true,
"template<typename T> T $F_1(fail0)(String* msg);\n",
"template<typename T>
T $F_1(fail0)(String* msg) {
	std::cerr << msg->toStd() << std::endl;
	decRc(msg);
	exit(1);
}\n", "", [], []),

Cpp3Native("quit", true,
"inline Void $F_1(quit)(Int code);\n",
"inline Void $F_1(quit)(Int code) { 
	term_all_modules();
	ThreadPool::release();
	MemoryPool::release();
	exit(code); 
	return void_value; 
}\n\n", 
"", [Cpp3Std(["<cstdlib>"], [])], []),

Cpp3Native("println2", false,
"Void $F_1(println2)(Flow* x);\n",
"Void $F_1(println2)(Flow* x) {
	if (x->typeId() == TypeFx::STRING) {
		std_output_mutex.lock();
		string2ostream(x->get<String*>()->str(), std::cout);
		decRc(x);
		std::cout << std::endl;
		std_output_mutex.unlock();
	} else {
		string s;
		x->append2string(s);
		decRc(x);
		std_output_mutex.lock();
		string2ostream(s, std::cout);
		std::cout << std::endl;
		std_output_mutex.unlock();
	}
	return void_value;
}\n", "", [Cpp3Std(["<iostream>"], [])], ["std_output_mutex"]),

Cpp3Native("hostCall", false,
"Flow* $F_1(hostCall)(String* name, Vec<Flow*>* args);\n",
"Flow* $F_1(hostCall)(String* name, Vec<Flow*>* args) {
	if (Dyn::funExists(name->str())) {
		const FunDef& def = Dyn::funDef(name->str());
		decRc(name);
		return def.fn(args);
	} else if (name->str() == u\"getOs\") {
		decRc(name);
		decRc(args);
		QString os = QSysInfo::kernelType();
		if (os.size() == 0) {
			return String::make();
		} else {
			// Ensure that first letter is capital
			os[0] = os[0].toUpper();
			return String::make(os.toStdU16String() + u\" other\");
		}
	} else if (name->str() == u\"getVersion\") {
		decRc(name);
		decRc(args);
		return String::make();
	} else if (name->str() == u\"getUserAgent\") {
		decRc(name);
		decRc(args);
		return String::make();
	} else if (name->str() == u\"getBrowser\") {
		decRc(name);
		decRc(args);
		return String::make();
	} else if (name->str() == u\"getResolution\") {
		decRc(name);
		decRc(args);
		return String::make();
	} else if (name->str() == u\"getDeviceType\") {
		decRc(name);
		decRc(args);
		return String::make();
	} else {
		Flow* ret = String::make(u\"runtime error: Native / runtime function \" + name->str() + u\" is not found\");
		decRc(name);
		decRc(args);
		return ret;
	}
}\n", "", [Cpp3Qt(["Core"], ["<QSysInfo>", "<QString>"], [])], []),

Cpp3Native("hostCallExists", false,
"Bool $F_1(hostCallExists)(String* path);\n",
"Bool $F_1(hostCallExists)(String* name) {
	Bool ret = Dyn::funExists(name->str());
	decRc(name);
	return ret;
}\n", "Dyn::funExists($A_0->str())", [], []),

Cpp3Native("getFileContent", false,
"String* $F_1(getFileContent)(String* path);\n",
"String* $F_1(getFileContent)(String* path) {
	std::ifstream is(path->toStd(), std::ios::binary|std::ios::ate);
	decRc(path);
	String* s = String::make(u\"\");
	if (is.is_open()) {
		istream2string(is, s->strRef());
	}
	return s;
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3Native("setFileContent", false,
"Bool $F_1(setFileContent)(String* path, String* content);\n",
"Bool $F_1(setFileContent)(String* path, String* content) {
	std::ofstream os(path->toStd(), std::ios::binary);
	decRc(path);
	string2ostream(content->str(), os);
	decRc(content);
	return os.good();
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3Native("timestamp", false,
"Double $F_1(timestamp)();\n",
"Double $F_1(timestamp)() {
	return std::chrono::duration_cast<std::chrono::milliseconds>(
		std::chrono::system_clock::now().time_since_epoch()
	).count();
}\n", "", [Cpp3Std(["<chrono>", "<ctime>"], [])], []),

Cpp3Native("string2time", false,
"Double $F_1(string2time)(String* s);\n",
"Double $F_1(string2time)(String* s) {
	const std::time_get<char>& time_get = std::use_facet<std::time_get<char>>(std::locale());
	std::ios::iostate state;
	std::istringstream iss(s->toStd());
	decRc(s);
	const time_t rawtime = std::time(0);
	std::tm* when = localtime(&rawtime);
  	time_get.get(iss, std::time_get<char>::iter_type(), iss, state, when,
		date_time_format.data(), date_time_format.data() + date_time_format.length()
	);
	if (!(state & std::ios::ios_base::failbit)) {
		return mktime(when) * 1000.0;
	} else {
		return 0.0;
	}
}\n", "", [Cpp3Std(["<chrono>", "<ctime>", "<locale>"], [])], ["date_time_format"]),

Cpp3Native("time2string", false,
"String* $F_1(time2string)(Double t);\n",
"String* $F_1(time2string)(Double t) {
	const std::time_put<char>& time_put = std::use_facet <std::time_put<char>>(std::locale());
  	std::time_t timestamp = t / 1000.0;
	std::tm* time = std::localtime(&timestamp);
	std::ostringstream out;
	time_put.put(out, out, ' ', time, date_time_format.data(), date_time_format.data() + date_time_format.length());
	return String::make(out.str());
}\n", "", [Cpp3Std(["<chrono>", "<ctime>"], [])], ["date_time_format"]),

Cpp3Native("getApplicationPath", true,
"inline String* $F_1(getApplicationPath)();\n",
"inline String* $F_1(getApplicationPath)() {
	#ifdef __linux__
	return String::make(std::filesystem::canonical(\"/proc/self/exe\").u16string());
	#else
	return String::make(\"getApplicationPath is implemented only in linux\");
	#endif
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3Native("printCallstack", false,
"Void $F_1(printCallstack)();\n",
"Void $F_1(printCallstack)() {
#ifdef _GLIBCXX_HAVE_STACKTRACE
	std::cout << std::stacktrace::current() << std::endl;
#else
	std::cout << \"printCallstack is not available\" << std::endl;
#endif
	return void_value;
}\n", "", [Cpp3Std(["<stacktrace>"], ["-lstdc++_libbacktrace", "-lstdc++exp"])], []),

Cpp3Native("getKeyValueN", true,
"inline String* $F_1(getKeyValueN)(String* key, String* defval);\n",
"inline String* $F_1(getKeyValueN)(String* key, String* defval) { 
	decRc(key);
	return defval;
}\n\n", 
"", [], [])

]