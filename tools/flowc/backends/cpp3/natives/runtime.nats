[

Cpp3NativePlain("bitAnd", "Int $F_1(bitAnd)(Int x, Int y) { return x & y; }\n\n", "($A_0 & $A_1)", [], []),
Cpp3NativePlain("bitOr", "Int $F_1(bitOr)(Int x, Int y) { return x | y; }\n\n", "($A_0 | $A_1)", [], []),
Cpp3NativePlain("bitXor", "Int $F_1(bitXor)(Int x, Int y) { return x ^ y; }\n\n", "($A_0 ^ $A_1)", [], []),
Cpp3NativePlain("bitNot", "Int $F_1(bitNot)(Int x) { return ~x; }\n\n", "~$A_0", [], []),

Cpp3NativePlain("random", "Double $F_1(random)() {
	return static_cast<Double>(rand()) / (static_cast<Double>(RAND_MAX) + 1.0);
}\n", "", [Cpp3Std(["<cstdlib>"], [])], []),

Cpp3NativePlain("srand", "Void $F_1(srand)(Int seed) {
	srand(seed);
}\n", "", [Cpp3Std(["<cstdlib>"], [])], []),

Cpp3NativePlain("gc", "Void $F_1(gc)() { }\n\n", "", [], []),

Cpp3NativePlain("fail", "Void $F_1(fail)(String msg) {
	std::cerr << msg << std::flush;
	assert(false);
}\n", "", [], []),

Cpp3NativePlain("fail0", "
template<typename T>
T $F_1(fail0)(String msg) {
	std::cerr << msg << std::flush;
	assert(false);
	return reinterpret_cast<T>(0);
}\n", "", [], []),

Cpp3NativePlain("quit", 
"void $F_1(quit)(Int code) { exit(code); }\n\n", "exit($A_0)", [Cpp3Std(["<cstdlib>"], [])], []),

Cpp3NativePlain("println2", 
"void $F_1(println2)(Flow x) { 
	flow2string(x, std::cout); std::cout << std::endl; 
}\n", "", [], []),

Cpp3NativePlain("hostCall", "Flow $F_1(hostCall)(String name, Arr<Flow> args) {
	std::cerr << \"hostCall is not yet implemented in cpp3 backend\" << std::endl;
	assert(false);
	return 0;
}\n", "", [], []),

Cpp3NativePlain("getFileContent", "String $F_1(getFileContent)(String path) {
	std::ifstream is(toStdString(path));
	if (is.is_open()) {
		std::stringstream buffer;
		buffer << is.rdbuf();
		if (is.good()) {
			return makeString(buffer.str());
		} else {
			return makeString();
		}
	} else {
		return makeString();
	}
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3NativePlain("setFileContent", "Bool $F_1(setFileContent)(String path, String content) {
	std::ofstream os(toStdString(path));
    os << toStdString(content);
	return os.good();
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3NativePlain("timestamp", 
"Double $F_1(timestamp)() {
	return std::chrono::duration_cast<std::chrono::milliseconds>(
		std::chrono::system_clock::now().time_since_epoch()
	).count();
}\n", "", [Cpp3Std(["<chrono>", "<ctime>"], [])], []),

Cpp3NativePlain("string2time", "
Double $F_1(string2time)(String s) {
	const std::time_get<char>& time_get = std::use_facet<std::time_get<char>>(std::locale());
	std::ios::iostate state;
	std::istringstream iss(toStdString(s));
	std::tm when;
  	time_get.get(iss, std::time_get<char>::iter_type(), iss, state, &when,
		date_time_format.data(), date_time_format.data() + date_time_format.length()
	);
	if (!(state & std::ios::ios_base::failbit)) {
		return mktime(&when) * 1000.0;
	} else {
		return 0.0;
	}
}\n", "", [Cpp3Std(["<chrono>", "<ctime>"], [])], ["date_time_format"]),

Cpp3NativePlain("time2string", "
String $F_1(time2string)(Double t) {
	const std::time_put<char>& time_put = std::use_facet <std::time_put<char>>(std::locale());
  	std::time_t timestamp = t / 1000.0;
	std::tm* time = std::localtime(&timestamp);
	std::ostringstream out;
	time_put.put(out, out, ' ', time, date_time_format.data(), date_time_format.data() + date_time_format.length());
	return makeString(out.str());
}\n", "", [Cpp3Std(["<chrono>", "<ctime>"], [])], ["date_time_format"]),

Cpp3NativePlain("getApplicationPath", "String $F_1(getApplicationPath)() {
	return makeString(std::filesystem::current_path().u16string());
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("printCallstack", "Void $F_1(printCallstack)() {
	//std::cout << std::basic_stacktrace() << std::endl;
	std::cout << \"printCallstack is not yet implemented\" << std::endl;
}\n", "", [], []),

Cpp3NativePlain("getKeyValueN", 
"String $F_1(getKeyValueN)(String key, String defval) { return defval; }\n\n", "$A_1", [], [])

]