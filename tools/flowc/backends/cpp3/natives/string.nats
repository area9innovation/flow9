[

Cpp3NativePlain("strlen", true,
"inline Int $F_1(strlen)(String s);\n",
"inline Int $F_1(strlen)(String s) { return s->size(); }\n\n", 
"$A_0->size()", [], []),

Cpp3NativePlain("i2s", true,
"inline String $F_1(i2s)(Int x);",
"inline String $F_1(i2s)(Int x) { return makeString(std::to_string(x)); }\n\n", 
"", [], []),

Cpp3NativePlain("d2s", true,
"inline String $F_1(d2s)(Double x);\n",
"inline String $F_1(d2s)(Double x) { std::ostringstream os; os << x; return makeString(os.str()); }\n\n", 
"", [], []),

Cpp3NativePlain("getCharCodeAt", true,
"inline Int $F_1(getCharCodeAt)(String s, Int i);\n",
"inline Int $F_1(getCharCodeAt)(String s, Int i) { return s->at(i); }\n\n", 
"$A_0->at($A_1)", 
[], []),

Cpp3NativePlain("getCharAt", true,
"inline String $F_1(getCharAt)(String s, Int i);\n",
"inline String $F_1(getCharAt)(String s, Int i) { return makeString(s->at(i)); }\n\n", 
"makeString($A_0->at($A_1))", 
[], []),

Cpp3NativePlain("fromCharCode", true,
"inline String $F_1(fromCharCode)(Int code);\n",
"inline String $F_1(fromCharCode)(Int code) { return makeString(code); }\n\n", 
"makeString($A_0)", 
[], []),

Cpp3NativePlain("toLowerCase", false,
"String $F_1(toLowerCase)(String s);\n",
"String $F_1(toLowerCase)(String s) {
	String lower = makeString(s);
	std::transform(lower->begin(), lower->end(), lower->begin(), [](auto c){ return std::tolower(c); });
	return lower;
}\n", "", [], []),

Cpp3NativePlain("toUpperCase", false,
"String $F_1(toUpperCase)(String s);\n",
"String $F_1(toUpperCase)(String s) {
	String upper = makeString(s);
	std::transform(upper->begin(), upper->end(), upper->begin(), [](auto c){ return std::toupper(c); });
	return upper;
}\n", "", [], []),

Cpp3NativePlain("strIndexOf", false,
"Int $F_1(strIndexOf)(String s, String p);\n",
"Int $F_1(strIndexOf)(String s, String p) {
	auto i = s->find(*p);
	return (i == string::npos) ? -1 : i;
}\n", "", [], []),

Cpp3NativePlain("substring", false,
"String $F_1(substring)(String str, Int i, Int l);\n",
"String $F_1(substring)(String str, Int i, Int l) {
	Int strlen = static_cast<Int>(str->size());
	Int start = i;
	Int len = l;
	if (len < 0) {
		if (start < 0) {
			len = 0;
		} else {
			Int smartLen1 = len + start;
			if (smartLen1 >= 0) {
				len = 0;
			} else {
				Int smartLen2 = smartLen1 + strlen;
				if (smartLen2 <= 0) len = 0;
				else len = smartLen2;
			}
		}
	}
	if (start < 0) {
		Int smartStart = start + strlen;
		if (smartStart > 0) {
			start = smartStart;
		} else {
			start = 0;
		}
	} else if (start >= strlen) {
		len = 0;
	}

	if (len < 1) {
		return makeString();
	} else {
		Int end = start + len;
		if (end > strlen || end  < 0) {
			len = strlen - start;
		}
		return makeString(str->substr(start, len));
	}
}\n", "", [], []),

Cpp3NativePlain("s2a", false,
"Arr<Int> $F_1(s2a)(String s);\n",
"Arr<Int> $F_1(s2a)(String s) {
	Arr<Int> ret(s->size());
	for (Int c : *s) {
		ret.arr->push_back(c);
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("string2utf8", false,
"Arr<Int> $F_1(string2utf8)(String str);\n",
"Arr<Int> $F_1(string2utf8)(String str) {
	std::string s = toStdString(str);
	Arr<Int> ret(s.size());
	for (Int c : s) {
		ret.arr->push_back(c);
	}
	return ret;
}\n", "", [], [])

]