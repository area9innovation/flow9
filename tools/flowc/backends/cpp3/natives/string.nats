[

Cpp3NativePlain("strlen", true,
"inline Int $F_1(strlen)(String* s);\n",
"inline Int $F_1(strlen)(String* s) {
	Int len = s->size();
	decRc(s);
	return len;
}\n\n", 
"$A_0->size()", [], []),

Cpp3NativePlain("i2s", true,
"inline String* $F_1(i2s)(Int x);",
"inline String* $F_1(i2s)(Int x) { return String::make(int2string(x)); }\n\n", 
"", [], []),

Cpp3NativePlain("d2s", true,
"inline String* $F_1(d2s)(Double x);\n",
"inline String* $F_1(d2s)(Double x) { return String::make(double2string(x)); }\n\n", 
"", [], []),

Cpp3NativePlain("getCharCodeAt", true,
"inline Int $F_1(getCharCodeAt)(String* s, Int i);\n",
"inline Int $F_1(getCharCodeAt)(String* s, Int i) {
	Int ret = s->getInt(i);
	decRc(s);
	return ret;
}\n\n", 
"$A_0->getInt($A_1)",
[], []),

Cpp3NativePlain("getCharAt", true,
"inline String* $F_1(getCharAt)(String* s, Int i);\n",
"inline String* $F_1(getCharAt)(String* s, Int i) {
	if (i < 0 || i >= s->size()) {
		decRc(s);
		return String::make();
	} else {
		char16_t ch = s->getChar(i);
		decRc(s);
		return String::make(ch);
	}
}\n\n", 
"", 
[], []),

Cpp3NativePlain("fromCharCode", true,
"inline String* $F_1(fromCharCode)(Int code);\n",
"inline String* $F_1(fromCharCode)(Int code) { return String::make(code); }\n\n", 
"String::make($A_0)", 
[], []),

Cpp3NativePlain("toLowerCase", false,
"String* $F_1(toLowerCase)(String* s);\n",
"String* $F_1(toLowerCase)(String* s) {
	if (isUnitRc(s)) {
		string& str = s->strRef();
		std::transform(str.begin(), str.end(), str.begin(), [](auto c){ return std::tolower(c); });
		return s;
	} else {
		string lower = s->str();
		decRc(s);
		std::transform(lower.begin(), lower.end(), lower.begin(), [](auto c){ return std::tolower(c); });
		return String::make(std::move(lower));
	}
}\n", "", [], []),

Cpp3NativePlain("toUpperCase", false,
"String* $F_1(toUpperCase)(String* s);\n",
"String* $F_1(toUpperCase)(String* s) {
	if (isUnitRc(s)) {
		string& str = s->strRef();
		std::transform(str.begin(), str.end(), str.begin(), [](auto c){ return std::toupper(c); });
		return s;
	} else {
		string upper = s->str();
		decRc(s);
		std::transform(upper.begin(), upper.end(), upper.begin(), [](auto c){ return std::toupper(c); });
		return String::make(std::move(upper));
	}
}\n", "", [], []),

Cpp3NativePlain("strIndexOf", false,
"Int $F_1(strIndexOf)(String* s, String* p);\n",
"Int $F_1(strIndexOf)(String* s, String* p) {
	auto i = s->str().find(p->str());
	decRc(s);
	decRc(p);
	return static_cast<Int>((i == string::npos) ? -1 : i);
}\n", "", [], []),

Cpp3NativePlain("substring", false,
"String* $F_1(substring)(String* s, Int i, Int l);\n",
"String* $F_1(substring)(String* s, Int i, Int l) {
	Int strlen = s->size();
	Int start = i;
	Int len = l;
	if (len < 0) {
		if (start < 0) {
			len = 0;
		} else {
			Int smartLen1 = len + start;
			if (smartLen1 >= 0) {
				len = 0;
			} else {
				Int smartLen2 = smartLen1 + strlen;
				if (smartLen2 <= 0) len = 0;
				else len = smartLen2;
			}
		}
	}
	if (start < 0) {
		Int smartStart = start + strlen;
		if (smartStart > 0) {
			start = smartStart;
		} else {
			start = 0;
		}
	} else if (start >= strlen) {
		len = 0;
	}
	if (len < 1) {
		decRc(s);
		return String::make();
	} else {
		Int end = start + len;
		if (end > strlen || end  < 0) {
			len = strlen - start;
		}
		if (isUnitRc(s)) {
			string& str = s->strRef();
			if (start > 0) {
				for (Int i = 0; i < len; ++ i) {
					str[i] = str[start + i];
				}
			}
			str.resize(len);
			return s;
		} else {
			String* ret = String::make(s->str().substr(start, len));
			decRc(s);
			return ret;
		}
	}
}\n", "", [], []),

Cpp3NativePlain("s2a", false,
"Vec<Int>* $F_1(s2a)(String* s);\n",
"Vec<Int>* $F_1(s2a)(String* s) {
	Int len = s->size();
	Vec<Int>* ret = Vec<Int>::make(len);
	for (Int i = 0; i < len; ++i) {
		ret->pushBack(s->getChar(i));
	}
	decRc(s);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("string2utf8", false,
"Vec<Int>* $F_1(string2utf8)(String* s);\n",
"Vec<Int>* $F_1(string2utf8)(String* s) {
	std::string str = s->toStd();
	Vec<Int>* ret = Vec<Int>::make(str.size());
	for (unsigned char c : str) {
		ret->pushBack(c);
	}
	decRc(s);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("startsWith", false,
"Bool $F_1(startsWith)(String* s, String* prefix);\n",
"Bool $F_1(startsWith)(String* s, String* prefix) {
	Bool ret = true;
	if (s->size() < prefix->size()) {
		ret = false;
	} else {
		for (Int i = 0; i < prefix->size(); ++i) {
			if (s->getChar(i) != prefix->getChar(i)) {
				ret = false;
				break;
			}
		}

	}
	decRc(s);
	decRc(prefix);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("endsWith", false,
"Bool $F_1(endsWith)(String* s, String* postfix);\n",
"Bool $F_1(endsWith)(String* s, String* postfix) {
	Bool ret = true;
	if (s->size() < postfix->size()) {
		ret = false;
	} else {
		Int delta = s->size() - postfix->size();
		for (Int i = 0; i < postfix->size(); ++i) {
			if (s->getChar(i + delta) != postfix->getChar(i)) {
				ret = false;
				break;
			}
		}

	}
	decRc(s);
	decRc(postfix);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("strRangeIndexOf", false,
"Int $F_1(strRangeIndexOf)(String* s, String* x, Int start, Int end);\n",
"Int $F_1(strRangeIndexOf)(String* s, String* x, Int start, Int end) {
	if (s->size() == 0 || s->size() < x->size() || start > end) {
		decRc(s);
		decRc(x);
		return -1;
	} else if (x->size() == 0) {
		decRc(s);
		decRc(x);
		return start;
	} else {
		Int e = std::min(s->size(), end);
		for (Int i = start, j = 0; i + j < e;) {
			if (s->getChar(i + j) != x->getChar(j)) {
				j = 0;
				i += 1;
			} else {
				j += 1;
			}
			if (j == x->size()) {
				decRc(s);
				decRc(x);
				return i;
			}
		}
		decRc(s);
		decRc(x);
		return -1;
	}
}\n", "", [], []),

Cpp3NativePlain("strReplace", false,
"String* $F_1(strReplace)(String* s, String* old, String* _new);\n",
"String* $F_1(strReplace)(String* s, String* old, String* _new) {
	if (old->size() == 0) {
		decRc(old);
		decRc(_new);
		return s;
	} else {
		if (isUnitRc(s) && _new->size() <= old->size()) {
			string& str = s->strRef();
			Int l = 0;
			for (Int i = 0, j = 0; i + j < s->size();) {
				if (s->getChar(i + j) != old->getChar(j)) {
					if (j == 0) {
						str[l++] = s->getChar(i);
						i += 1;
					} else {
						for (Int k = 0; k < j; ++ k) {
							str[l++] = old->getChar(k);
						}
						i += j;
						j = 0;
					}
				} else {
					j += 1;
					if (j == old->size()) {
						for (Int k = 0; k < _new->size(); ++ k) {
							str[l++] = _new->getChar(k);
						}
						i += j;
						j = 0;
					}
				}
			}
			decRc(old);
			decRc(_new);
			str.resize(l);
			return s;
		} else {
			string x;
			x.reserve(s->size());
			for (Int i = 0, j = 0; i + j < s->size();) {
				if (s->getChar(i + j) != old->getChar(j)) {
					if (j == 0) {
						x.append(1, s->getChar(i));
						i += 1;
					} else {
						for (Int k = 0; k < j; ++ k) {
							x.append(1, old->getChar(k));
						}
						i += j;
						j = 0;
					}
				} else {
					j += 1;
					if (j == old->size()) {
						x.append(_new->str());
						i += j;
						j = 0;
					}
				}
			}
			decRc(old);
			decRc(_new);
			decRc(s);
			return String::make(std::move(x));
		}
	}
}\n", "", [], []),

Cpp3NativePlain("strSplit", false,
"Vec<String*>* $F_1(strSplit)(String* s, String* sep);\n",
"Vec<String*>* $F_1(strSplit)(String* s, String* sep) {
	if (sep->size() == 0) {
		decRc(sep);
		Vec<String*>* ret = Vec<String*>::make(1);
		ret->pushBack(s);
		return ret;
	} else {
		std::vector<Int> pos;
		pos.reserve(16);
		for (Int i = 0, j = 0; i + j < s->size();) {
			if (s->getChar(i + j) != sep->getChar(j)) {
				if (j == 0) {
					i += 1;
				} else {
					i += j;
					j = 0;
				}
			} else {
				j += 1;
				if (j == sep->size()) {
					pos.push_back(i);
					i += j;
					j = 0;
				}
			}
		}
		Int sep_len = sep->size();
		decRc(sep);
		Vec<String*>* ret = Vec<String*>::make(pos.size() + 1);
		if (pos.size() == 0) {
			ret->pushBack(s);
		} else {
			Int beg = 0;
			for (Int end: pos) {
				ret->pushBack(String::make(s->str().substr(beg, end - beg)));
				beg = end + sep_len;
			}
			ret->pushBack(String::make(s->str().substr(beg, s->size() - beg)));
			decRc(s);
		}
		return ret;
	}
}\n", "", [], [])

]