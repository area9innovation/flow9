[

Cpp3NativePlain("strlen", true,
"inline Int $F_1(strlen)(String s);\n",
"inline Int $F_1(strlen)(String s) { 
	Int ret = static_cast<Int>(s->str.size());
	s->decRefs();
	return ret;
}\n\n", 
"", [], []),

Cpp3NativePlain("i2s", true,
"inline String $F_1(i2s)(Int x);",
"inline String $F_1(i2s)(Int x) { return String::make(int2string(x)); }\n\n", 
"String::make(int2string($A_0))", [], []),

Cpp3NativePlain("d2s", true,
"inline String $F_1(d2s)(Double x);\n",
"inline String $F_1(d2s)(Double x) { return String::make(double2string(x)); }\n\n", 
"", [], []),

Cpp3NativePlain("getCharCodeAt", true,
"inline Int $F_1(getCharCodeAt)(String s, Int i);\n",
"inline Int $F_1(getCharCodeAt)(String s, Int i) {
	Int len = static_cast<Int>(s->str.size());
	Int ret = -1;
	if (i >= 0 && i < len) {
		ret = s->str.at(i);
	}
	s->decRefs();
	return ret;
}\n\n", 
"", 
[], []),

Cpp3NativePlain("getCharAt", true,
"inline String $F_1(getCharAt)(String s, Int i);\n",
"inline String $F_1(getCharAt)(String s, Int i) {
	Int len = static_cast<Int>(s->str.size());
	String ret;
	if (i < 0 || i >= len) {
		s->decRefs();
		ret = String::make();
	} else {
		char16_t ch = s->str.at(i);
		if (0xD800 <= ch && ch <= 0xDFFF) {
			ret = String::make(u\"?\");
		} else {
			ret = String::make(ch);
		}	
	}
	s->decRefs();
	return ret;
}\n\n", 
"", 
[], []),

Cpp3NativePlain("fromCharCode", true,
"inline String $F_1(fromCharCode)(Int code);\n",
"inline String $F_1(fromCharCode)(Int code) { return String::make(code); }\n\n", 
"String::make($A_0)", 
[], []),

Cpp3NativePlain("toLowerCase", false,
"String $F_1(toLowerCase)(String s);\n",
"String $F_1(toLowerCase)(String s) {
	string lower = s->str;
	s->decRefs();
	std::transform(lower.begin(), lower.end(), lower.begin(), [](auto c){ return std::tolower(c); });
	return String::make(std::move(lower));
}\n", "", [], []),

Cpp3NativePlain("toUpperCase", false,
"String $F_1(toUpperCase)(String s);\n",
"String $F_1(toUpperCase)(String s) {
	string upper = s->str;
	s->decRefs();
	std::transform(upper.begin(), upper.end(), upper.begin(), [](auto c){ return std::toupper(c); });
	return String::make(std::move(upper));
}\n", "", [], []),

Cpp3NativePlain("strIndexOf", false,
"Int $F_1(strIndexOf)(String s, String p);\n",
"Int $F_1(strIndexOf)(String s, String p) {
	auto i = s->str.find(p->str);
	s->decRefs();
	p->decRefs();
	return static_cast<Int>((i == string::npos) ? -1 : i);
}\n", "", [], []),

Cpp3NativePlain("substring", false,
"String $F_1(substring)(String s, Int i, Int l);\n",
"String $F_1(substring)(String s, Int i, Int l) {
	Int strlen = static_cast<Int>(s->str.size());
	Int start = i;
	Int len = l;
	if (len < 0) {
		if (start < 0) {
			len = 0;
		} else {
			Int smartLen1 = len + start;
			if (smartLen1 >= 0) {
				len = 0;
			} else {
				Int smartLen2 = smartLen1 + strlen;
				if (smartLen2 <= 0) len = 0;
				else len = smartLen2;
			}
		}
	}
	if (start < 0) {
		Int smartStart = start + strlen;
		if (smartStart > 0) {
			start = smartStart;
		} else {
			start = 0;
		}
	} else if (start >= strlen) {
		len = 0;
	}
	String ret;
	if (len < 1) {
		ret = String::make();
	} else {
		Int end = start + len;
		if (end > strlen || end  < 0) {
			len = strlen - start;
		}
		ret = String::make(s->str.substr(start, len));
	}
	s->decRefs();
	return ret;
}\n", "", [], []),

Cpp3NativePlain("s2a", false,
"Vec<Int> $F_1(s2a)(String s);\n",
"Vec<Int> $F_1(s2a)(String s) {
	std::size_t len = s->str.size();
	std::vector<Int> ret;
	ret.reserve(len);
	for (std::size_t i = 0; i < len; ++i) {
		ret.push_back(s->str.at(i));
	}
	s->decRefs();
	return Vec<Int>::make(std::move(ret));
}\n", "", [], []),

Cpp3NativePlain("string2utf8", false,
"Vec<Int> $F_1(string2utf8)(String str);\n",
"Vec<Int> $F_1(string2utf8)(String str) {
	std::string s = str->toStd();
	std::vector<Int> ret;
	ret.reserve(s.size());
	for (Int c : s) {
		ret.push_back(c);
	}
	str->decRefs();
	return Vec<Int>::make(std::move(ret));
}\n", "", [], [])

]