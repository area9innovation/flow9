[

Cpp3NativePlain("stringbytes2int", false,
"Int $F_1(stringbytes2int)(String s);\n",
"Int $F_1(stringbytes2int)(String s) {
	IntOrChars i(s->at(0), s->at(1));
	return i.int_;
}\n", "", [], []),

Cpp3NativePlain("stringbytes2double", false,
"Double $F_1(stringbytes2double)(String s);\n",
"Double $F_1(stringbytes2double)(String s) {
	DoubleOrChars d(s->at(0), s->at(1), s->at(2), s->at(3));
	return d.double_;
}\n", "", [], []),

Cpp3NativePlain("fromBinary", true,
"inline Flow $F_1(fromBinary)(String s, Flow defval, Fun<Flow, String> fixup);\n",
"inline Flow $F_1(fromBinary)(String s, Flow defval, Fun<Flow, String> fixup) {
	return s;
}\n", "$A_0", [], []),

Cpp3NativePlain("toBinary", false,
"String $F_1(toBinary)(Flow value);\n",
"String $F_1(toBinary)(Flow value) {
	std::unordered_map<string, Int> structIdxs;
	std::vector<Ptr<AStruct>> structDefs;

	String s = makeString();
	// Placeholders for size of values - 32 bit int
	s->push_back(0);
	s->push_back(0);
	appendBinaryValue(value, s, structIdxs, structDefs);
	Int len = s->size();
	// Set length at the beginning
	(*s)[0] = len & 0xffff;
	(*s)[1] = len >> 16;

	if (structDefs.size() == 0) {
		appendCharValue(0xFFF7, s);
	} else {
		if (structDefs.size() > 65535) {
			appendCharValue(0xFFF9, s);
			appendBinaryInt32(structDefs.size(), s);
		} else {
			appendCharValue(0xFFF8, s);
			appendCharValue(structDefs.size(), s);
		}
	}
	for (Ptr<AStruct> struct_def : structDefs) {
		appendCharValue(0xFFF8, s);
		appendCharValue(0x0002, s);
		appendCharValue(struct_def->size(), s);

		String sname = struct_def->name();
		appendCharValue(0xFFFA, s);
		appendCharValue(sname->size(), s);
		for (auto c : *sname) {
			appendCharValue(c, s);
		}
	}
	return s;
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["to_binary"])

]