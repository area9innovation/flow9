[

Cpp3NativePlain("makeNativeHashMap", true,
"template<typename K, typename T> Flow $F_1(makeNativeHashMap)(Fun<Int, K> hash, Int capacity, Double load, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Flow $F_1(makeNativeHashMap)(Fun<Int, K> hash, Int capacity, Double load, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	Ptr<FlowHashMap<K, T>> m = makePtr<FlowHashMap<K, T>>(capacity, hash);
	m->max_load_factor(static_cast<float>(load));
	return m.template staticCast<Void>();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("setNativeHashMap", true,
"template<typename K, typename T> Void $F_1(setNativeHashMap)(Flow m, K key, T val);\n",
"template<typename K, typename T>
Void $F_1(setNativeHashMap)(Flow m, K key, T val) {
	m.toNative<FlowHashMap<K, T>>()->insert_or_assign(key, val);
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("getNativeHashMap", true,
"template<typename K, typename T> Flow $F_1(getNativeHashMap)(Flow m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Flow $F_1(getNativeHashMap)(Flow m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	Ptr<FlowHashMap<K, T>> map = m.toNative<FlowHashMap<K, T>>();
	if (map->contains(key)) {
		T ret = map->at(key);
		return Str<$F_0(Some)<T>>(makePtr<$F_0(Some)<T>>(ret));
	} else {
		return Str<$F_0(None)<T>>(makePtr<$F_0(None)<T>>());
	}
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("removeNativeHashMap", true,
"template<typename K, typename T> Void $F_1(removeNativeHashMap)(Flow m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Void $F_1(removeNativeHashMap)(Flow m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	m.toNative<FlowHashMap<K, T>>()->erase(key);
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("containsNativeHashMap", true,
"template<typename K, typename T> Bool $F_1(containsNativeHashMap)(Flow m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Bool $F_1(containsNativeHashMap)(Flow m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	return m.toNative<FlowHashMap<K, T>>()->contains(key);
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("sizeNativeHashMap", true,
"template<typename K, typename T> Int $F_1(sizeNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Int $F_1(sizeNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	return m.toNative<FlowHashMap<K, T>>()->size();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("clearNativeHashMap", true,
"template<typename K, typename T> Void $F_1(clearNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Void $F_1(clearNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	m.toNative<FlowHashMap<K, T>>()->clear();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("cloneNativeHashMap", true,
"template<typename K, typename T> Flow $F_1(cloneNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Flow $F_1(cloneNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	typedef FlowHashMap<K, T> Map;
	return makePtr<Map>(*m.toNative<Map>()).template staticCast<Void>();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("iterNativeHashMap", true,
"template<typename K, typename T> Void $F_1(iterNativeHashMap)(Flow m, Fun<Void, K, T> fn, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Void $F_1(iterNativeHashMap)(Flow m, Fun<Void, K, T> fn, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	for (auto p : *m.toNative<FlowHashMap<K, T>>()) {
		fn(p.first, p.second);
	}
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("funcNativeHashMap", true,
"template<typename K, typename T> Fun<Int, K> $F_1(funcNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Fun<Int, K> $F_1(funcNativeHashMap)(Flow m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	return m.toNative<FlowHashMap<K, T>>()->hash_function();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"])

]