[

Cpp3NativePlain("makeNativeHashMap", true,
"template<typename K, typename T> Nat<Void> $F_1(makeNativeHashMap)(Fun<Int, K> hash, Int capacity, Double load, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Nat<Void> $F_1(makeNativeHashMap)(Fun<Int, K> hash, Int capacity, Double load, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	typedef FlowHashMap<K, T> Map;
	Map* m = new Map(capacity, *hash.fn);
	m->max_load_factor(static_cast<float>(load));
	return Nat<Map>(m).template cast<Void>();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("setNativeHashMap", true,
"template<typename K, typename T> Void $F_1(setNativeHashMap)(Nat<Void> m, K key, T val);\n",
"template<typename K, typename T>
Void $F_1(setNativeHashMap)(Nat<Void> m, K key, T val) {
	typedef FlowHashMap<K, T> Map;
	m.cast<Map>().nat->insert_or_assign(key, val);
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("getNativeHashMap", true,
"template<typename K, typename T> Union $F_1(getNativeHashMap)(Nat<Void> m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Union $F_1(getNativeHashMap)(Nat<Void> m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	typedef FlowHashMap<K, T> Map;
	if (m.template cast<Map>().nat->contains(key)) {
		T ret = m.template cast<Map>().nat->at(key);
		return Str<$F_0(Some)<T>>(std::make_shared<$F_0(Some)<T>>(ret));
	} else {
		return Str<$F_0(None)<T>>(std::make_shared<$F_0(None)<T>>());
	}
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("removeNativeHashMap", true,
"template<typename K, typename T> Void $F_1(removeNativeHashMap)(Nat<Void> m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Void $F_1(removeNativeHashMap)(Nat<Void> m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	m.template cast<FlowHashMap<K, T>>().nat->erase(key);
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("containsNativeHashMap", true,
"template<typename K, typename T> Bool $F_1(containsNativeHashMap)(Nat<Void> m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Bool $F_1(containsNativeHashMap)(Nat<Void> m, K key, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	return m.template cast<FlowHashMap<K, T>>().nat->contains(key);
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("sizeNativeHashMap", true,
"template<typename K, typename T> Int $F_1(sizeNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Int $F_1(sizeNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	return m.template cast<FlowHashMap<K, T>>().nat->size();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("clearNativeHashMap", true,
"template<typename K, typename T> Void $F_1(clearNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Void $F_1(clearNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	m.template cast<FlowHashMap<K, T>>().nat->clear();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("cloneNativeHashMap", true,
"template<typename K, typename T> Nat<Void> $F_1(cloneNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Nat<Void> $F_1(cloneNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	typedef FlowHashMap<K, T> Map;
	Nat<Map> clone(new Map(*m.cast<Map>().nat));
	return clone.template cast<Void>();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("iterNativeHashMap", true,
"template<typename K, typename T> Void $F_1(iterNativeHashMap)(Nat<Void> m, Fun<Void, K, T> fn, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Void $F_1(iterNativeHashMap)(Nat<Void> m, Fun<Void, K, T> fn, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	for (auto p : *(m.template cast<FlowHashMap<K, T>>().nat)) {
		fn(p.first, p.second);
	}
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"]),

Cpp3NativePlain("funcNativeHashMap", true,
"template<typename K, typename T> Fun<Int, K> $F_1(funcNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy);\n",
"template<typename K, typename T>
Fun<Int, K> $F_1(funcNativeHashMap)(Nat<Void> m, Arr<Str<$F_0(Pair)<K, T>>> dummy) {
	return m.template cast<FlowHashMap<K, T>>().nat->hash_function();
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["hash_map"])

]