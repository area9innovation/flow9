[
Cpp3Native("i2d", true,
"inline Double $F_1(i2d)(Int x);\n", 
"inline Double $F_1(i2d)(Int x) { return x; }\n\n", 
"$A_0", 
[], []
),

Cpp3Native("exp", true,
"inline Double $F_1(exp)(Double x);\n", 
"inline Double $F_1(exp)(Double x) { return exp(x); }\n\n", 
"exp($A_0)", 
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("log", true,
"inline Double $F_1(log)(Double x);\n",
"inline Double $F_1(log)(Double x) { return log(x); }\n\n", 
"log($A_0)", 
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("trunc", true,
"inline Int $F_1(trunc)(Double x);\n",
"inline Int $F_1(trunc)(Double x) { return std::isnan(x) ? 0 : trunc(x); } \n\n",
"",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("randomGenerator", false,
"Fun<Double>* $F_1(randomGenerator)(Int seed);",
"Fun<Double>* $F_1(randomGenerator)(Int seed) {
	return Fun<Double>::make([](){ 
		return static_cast<Double>(rand()) / (static_cast<Double>(RAND_MAX) + 1.0);
	});
}\n", "", [], [])

]