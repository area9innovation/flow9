[
Cpp3Native("i2d", true,
"inline Double $F_1(i2d)(Int x);\n", 
"inline Double $F_1(i2d)(Int x) { return x; }\n\n", 
"static_cast<Double>($A_0)", 
[], []
),

Cpp3Native("s2i", true,
"inline Int $F_1(s2i)(String* x);\n",
"inline Int $F_1(s2i)(String* x) { return string2int(x->str()); }\n\n",
"string2int($A_0->str())",
[], []
),

Cpp3Native("exp", true,
"inline Double $F_1(exp)(Double x);\n", 
"inline Double $F_1(exp)(Double x) { return exp(x); }\n\n", 
"exp($A_0)", 
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("log", true,
"inline Double $F_1(log)(Double x);\n",
"inline Double $F_1(log)(Double x) { return log(x); }\n\n", 
"log($A_0)", 
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("trunc", true,
"inline Int $F_1(trunc)(Double x);\n",
"inline Int $F_1(trunc)(Double x) { return std::isnan(x) ? 0 : trunc(x); } \n\n",
"",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("randomGenerator", false,
"Fun<Double>* $F_1(randomGenerator)(Int seed);",
"Fun<Double>* $F_1(randomGenerator)(Int seed) {
	return Fun<Double>::make([](){ 
		return static_cast<Double>(rand()) / (static_cast<Double>(RAND_MAX) + 1.0);
	});
}\n", "", [], []),

Cpp3Native("sin", true,
"inline Double $F_1(sin)(Double x);\n",
"inline Double $F_1(sin)(Double x) { return std::sin(x); } \n\n",
"std::sin($A_0)",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("cos", true,
"inline Double $F_1(cos)(Double x);\n",
"inline Double $F_1(cos)(Double x) { return std::cos(x); } \n\n",
"std::cos($A_0)",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("tan", true,
"inline Double $F_1(tan)(Double x);\n",
"inline Double $F_1(tan)(Double x) { return std::tan(x); } \n\n",
"std::tan($A_0)",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("asin", true,
"inline Double $F_1(asin)(Double x);\n",
"inline Double $F_1(asin)(Double x) { return std::asin(x); } \n\n",
"std::asin($A_0)",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("acos", true,
"inline Double $F_1(acos)(Double x);\n",
"inline Double $F_1(acos)(Double x) { return std::acos(x); } \n\n",
"std::acos($A_0)",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("atan", true,
"inline Double $F_1(atan)(Double x);\n",
"inline Double $F_1(atan)(Double x) { return std::atan(x); } \n\n",
"std::atan($A_0)",
[Cpp3Std(["<cmath>"], [])], []
),

Cpp3Native("atan2", true,
"inline Double $F_1(atan2)(Double x, Double y);\n",
"inline Double $F_1(atan2)(Double x, Double y) { return std::atan2(x, y); } \n\n",
"std::atan2($A_0, $A_1)",
[Cpp3Std(["<cmath>"], [])], []
)

]