[

Cpp3Native("getCurrentDate", true,
"inline $F_0(Date)* $F_1(getCurrentDate)();\n",
"inline $F_0(Date)* $F_1(getCurrentDate)() {
	std::time_t t = std::time(0);   // get time now
	std::tm* now = std::localtime(&t);
	return $F_0(Date)::make<$F_0(Date)*>(now->tm_year + 1900, now->tm_mon + 1, now->tm_mday);
}\n\n",
"", [Cpp3Std(["<ctime>"], [])], []),

Cpp3Native("dayOfWeek1", true,
"inline Int $F_1(dayOfWeek1)(Int year, Int month, Int day);\n",
"inline Int $F_1(dayOfWeek1)(Int year, Int month, Int day) {
	// Zellerâ€™s Algorithm
	Int mon;
	if(month > 2)
		mon = month; //for march to december month code is same as month
	else {
		mon = (12 + month); //for Jan and Feb, month code will be 13 and 14
		year--; //decrease year for month Jan and Feb
	}
	Int y = year % 100; //last two digit
	Int c = year / 100; //first two digit
	Int w = (day + floor((13 * (mon + 1)) / 5) + y + floor(y / 4) + floor(c / 4) + (5 * c));
	w = w % 7;
	// For an ISO week date Day-of-Week d (1 = Monday to 7 = Sunday), use
    // d = ( ( h + 5 ) mod 7 ) + 1
	return (w + 5) % 7;
}\n",
"", [], [])

]