[

Cpp3Native("refCounter", true,
"template<typename T> inline Int $F_1(refCounter)(T a);\n",
"template<typename T>
inline Int $F_1(refCounter)(T a) {
	if constexpr (is_flow_ancestor_v<T>) {
		Int ret = a->getRcVal();
		decRc(a);
		return ret;
	} else {
		return -1;
	}
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("clone", true,
"template<typename T> inline T $F_1(clone)(T x);\n",
"template<typename T>
inline T $F_1(clone)(T x) {
	if constexpr (is_flow_ancestor_v<T>) {
		T ret = clone<T>(x);
		decRc(x);
		return ret;
	} else {
		return x;
	}
}\n", Cpp3Inline(true, "clone($A_0)"), [], []
),

Cpp3Native("typeId", true,
"template<typename T> inline Int $F_1(typeId)(T a);\n",
"template<typename T>
inline Int $F_1(typeId)(T a) {
	if constexpr (is_flow_ancestor_v<T>) {
		return a->typeIdRc();
	} else {
		return get_type_id_v<T>;
	}
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("sizeof", true,
"template<typename T> inline Int $F_1(sizeof)(T a);\n",
"template<typename T>
inline Int $F_1(sizeof)(T a) {
	decRc(a);
	return sizeof(std::remove_pointer_t<T>);
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getThreadPoolSize", true,
"inline Int $F_1(getThreadPoolSize)();\n",
"inline Int $F_1(getThreadPoolSize)() {
	return static_cast<Int>(thread_pool->size());
}\n", Cpp3Inline(true, ""), [], ["concurrent"]
),


Cpp3Native("getThreadPoolSize", true,
"inline Int $F_1(getThreadPoolSize)();\n",
"inline Int $F_1(getThreadPoolSize)() {
	return static_cast<Int>(ThreadPool::size());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getMemoryPoolMaxSize", true,
"inline Int $F_1(getMemoryPoolMaxSize)();\n",
"inline Int $F_1(getMemoryPoolMaxSize)() {
	return static_cast<Int>(MemoryPool::maxSize());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getMemoryPoolMem", true,
"inline Double $F_1(getMemoryPoolMem)();\n",
"inline Double $F_1(getMemoryPoolMem)() {
	return static_cast<Double>(MemoryPool::mem());
}\n", Cpp3Inline(true, ""), [], []
),


Cpp3Native("getMemoryPoolThreadMem", true,
"inline Double $F_1(getMemoryPoolThreadMem)(Int th_id);\n",
"inline Double $F_1(getMemoryPoolThreadMem)(Int th_id) {
	return static_cast<Double>(MemoryPool::getThreadPool(th_id).mem());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getMemoryPoolNumThreads", true,
"inline Int $F_1(getMemoryPoolNumThreads)();\n",
"inline Int $F_1(getMemoryPoolNumThreads)() {
	return static_cast<Int>(MemoryPool::numThreads());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getMemoryPoolShardSize", true,
"inline Int $F_1(getMemoryPoolShardSize)(Int th_id, Int size);\n",
"inline Int $F_1(getMemoryPoolShardSize)(Int th_id, Int size) {
	return static_cast<Int>(MemoryPool::getThreadPool(th_id).getSizePool(size).size());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getMemoryPoolShardMem", true,
"inline Double $F_1(getMemoryPoolShardMem)(Int th_id, Int size);\n",
"inline Double $F_1(getMemoryPoolShardMem)(Int th_id, Int size) {
	return static_cast<Double>(MemoryPool::getThreadPool(th_id).getSizePool(size).mem());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getVecStatsMaxLen", true,
"inline Int $F_1(getVecStatsMaxLen)();\n",
"inline Int $F_1(getVecStatsMaxLen)() {
	return static_cast<Int>(vec_leng_stats.maxVal());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getVecStatsLenNum", true,
"inline Int $F_1(getVecStatsLenNum)(Int len);\n",
"inline Int $F_1(getVecStatsLenNum)(Int len) {
	return static_cast<Int>(vec_leng_stats.valNum(len));
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getStringStatsMaxLen", true,
"inline Int $F_1(getStringStatsMaxLen)();\n",
"inline Int $F_1(getStringStatsMaxLen)() {
	return static_cast<Int>(string_leng_stats.maxVal());
}\n", Cpp3Inline(true, ""), [], []
),

Cpp3Native("getStringStatsLenNum", true,
"inline Int $F_1(getStringStatsLenNum)(Int len);\n",
"inline Int $F_1(getStringStatsLenNum)(Int len) {
	return static_cast<Int>(string_leng_stats.valNum(len));
}\n", Cpp3Inline(true, ""), [], []
)



]