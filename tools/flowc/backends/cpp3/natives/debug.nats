[

Cpp3NativePlain("refCounter", true, 
"template<typename T> inline Int $F_1(refCounter)(T a);\n",
"template<typename T>
inline Int $F_1(refCounter)(T a) {
	if constexpr (is_flow_ancestor_v<T>) {
		Int ret = a->rc_;
		decRc(a);
		return ret;
	} else {
		return CONSTANT_OBJECT_RC;
	}
}\n", "", [], []
),

Cpp3NativePlain("typeId", true, 
"template<typename T> inline Int $F_1(typeId)(T a);\n",
"template<typename T>
inline Int $F_1(typeId)(T a) {
	if constexpr (is_flow_ancestor_v<T>) {
		return a->typeIdRc();
	} else {
		return get_type_id_v<T>;
	}
}\n", "", [], []
),

Cpp3NativePlain("sizeof", true, 
"template<typename T> inline Int $F_1(sizeof)(T a);\n",
"template<typename T>
inline Int $F_1(sizeof)(T a) {
	decRc(a);
	return sizeof(std::remove_pointer_t<T>);
}\n", "", [], []
),

Cpp3NativePlain("getThreadPoolSize", true, 
"inline Int $F_1(getThreadPoolSize)();\n",
"inline Int $F_1(getThreadPoolSize)() {
	return static_cast<Int>(thread_pool->size());
}\n", "", [], ["concurrent"]
)

]