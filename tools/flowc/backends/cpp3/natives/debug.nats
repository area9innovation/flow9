[

Cpp3NativePlain("refCounter", true, 
"template<typename T> inline Int $F_1(refCounter)(T a);\n",
"template<typename T>
inline Int $F_1(refCounter)(T a) {
	if constexpr (is_flow_ancestor_v<T>) {
		Int ret = a->rc_;
		decRc(a);
		return ret;
	} else {
		return CONSTANT_OBJECT_RC;
	}
}\n", "", [], []
),

Cpp3NativePlain("typeId", true, 
"template<typename T> inline Int $F_1(typeId)(T a);\n",
"template<typename T>
inline Int $F_1(typeId)(T a) {
	if constexpr (is_flow_ancestor_v<T>) {
		return a->typeIdRc();
	} else {
		return get_type_id_v<T>;
	}
}\n", "", [], []
),

Cpp3NativePlain("sizeof", true, 
"template<typename T> inline Int $F_1(sizeof)(T a);\n",
"template<typename T>
inline Int $F_1(sizeof)(T a) {
	decRc(a);
	return sizeof(std::remove_pointer_t<T>);
}\n", "", [], []
),

Cpp3NativePlain("getThreadPoolSize", true, 
"inline Int $F_1(getThreadPoolSize)();\n",
"inline Int $F_1(getThreadPoolSize)() {
	return static_cast<Int>(thread_pool->size());
}\n", "", [], ["concurrent"]
),


Cpp3NativePlain("getThreadPoolSize", true, 
"inline Int $F_1(getThreadPoolSize)();\n",
"inline Int $F_1(getThreadPoolSize)() {
	return static_cast<Int>(ThreadPool::size());
}\n", "", [], []
),

Cpp3NativePlain("getMemoryPoolMaxSize", true, 
"inline Int $F_1(getMemoryPoolMaxSize)();\n",
"inline Int $F_1(getMemoryPoolMaxSize)() {
	return static_cast<Int>(MemoryPool::maxSize());
}\n", "", [], []
),

Cpp3NativePlain("getMemoryPoolMem", true, 
"inline Double $F_1(getMemoryPoolMem)();\n",
"inline Double $F_1(getMemoryPoolMem)() {
	return static_cast<Double>(MemoryPool::mem());
}\n", "", [], []
),


Cpp3NativePlain("getMemoryPoolThreadMem", true, 
"inline Double $F_1(getMemoryPoolThreadMem)(Int th_id);\n",
"inline Double $F_1(getMemoryPoolThreadMem)(Int th_id) {
	return static_cast<Double>(MemoryPool::getThreadPool(th_id).mem());
}\n", "", [], []
),

Cpp3NativePlain("getMemoryPoolNumThreads", true, 
"inline Int $F_1(getMemoryPoolNumThreads)();\n",
"inline Int $F_1(getMemoryPoolNumThreads)() {
	return static_cast<Int>(MemoryPool::numThreads());
}\n", "", [], []
),

Cpp3NativePlain("getMemoryPoolShardSize", true, 
"inline Int $F_1(getMemoryPoolShardSize)(Int th_id, Int size);\n",
"inline Int $F_1(getMemoryPoolShardSize)(Int th_id, Int size) {
	return static_cast<Int>(MemoryPool::getThreadPool(th_id).getSizePool(size).size());
}\n", "", [], []
),

Cpp3NativePlain("getMemoryPoolShardMem", true, 
"inline Double $F_1(getMemoryPoolShardMem)(Int th_id, Int size);\n",
"inline Double $F_1(getMemoryPoolShardMem)(Int th_id, Int size) {
	return static_cast<Double>(MemoryPool::getThreadPool(th_id).getSizePool(size).mem());
}\n", "", [], []
),

Cpp3NativePlain("getVecStatsStatsLen", true, 
"inline Int $F_1(getVecStatsStatsLen)();\n",
"inline Int $F_1(getVecStatsStatsLen)() {
	return static_cast<Int>(VecStats::len_distrib.size());
}\n", "", [], []
),

Cpp3NativePlain("getVecStatsMaxLen", true, 
"inline Int $F_1(getVecStatsMaxLen)();\n",
"inline Int $F_1(getVecStatsMaxLen)() {
	return static_cast<Int>(VecStats::max_len);
}\n", "", [], []
),

Cpp3NativePlain("getVecStatsLenUses", true, 
"inline Int $F_1(getVecStatsLenUses)(Int len);\n",
"inline Int $F_1(getVecStatsLenUses)(Int len) {
	return static_cast<Int>(VecStats::lenUses(len));
}\n", "", [], []
)


]