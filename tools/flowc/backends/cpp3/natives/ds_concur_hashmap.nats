[

Cpp3Native("makeConcurHashMapNative", true,
"template<typename K, typename T> Native* $F_1(makeConcurHashMapNative)(Fun<Int, K>* hash, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	decRc(hash);
	FlowConcurHashMap<K, T>* map = new FlowConcurHashMap<K, T>(16);
	return Native::make(map, [map]() { delete map; });
}
",
"", "", [], ["hash_map"]),

Cpp3Native("setConcurHashMapNative", true,
"template<typename K, typename T> Void $F_1(setConcurHashMapNative)(Native* m, K key, T val) {
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	auto p = map->m.find(key);
	if (p != map->m.end()) {
		decRc(p->second);
		map->m.insert_or_assign(key, val);
		decRc(key);
	} else {
		map->m.insert_or_assign(key, val);
	}
	decRc(m);
	return void_value;
}
",
"", "", [], ["hash_map"]),

Cpp3Native("getConcurHashMapNative", true,
"template<typename K, typename T> Union* $F_1(getConcurHashMapNative)(Native* m, K key, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	auto p = map->m.find(key);
	decRc(key);
	if (p != map->m.end()) {
		incRc(p->second);
		Union* ret = $F_0(Some)<T>::template make<$F_0(Some)<T>*>(p->second);
		decRc(m);
		return ret;
	} else {
		decRc(m);
		return $F_0(None)::template make<$F_0(None)*>();
	}
}
",
"", "", [], ["hash_map"]),

Cpp3Native("containsKeyConcurHashMapNative", true,
"template<typename K, typename T> Bool $F_1(containsKeyConcurHashMapNative)(Native* m, K key, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	Bool ret = m->get<FlowConcurHashMap<K, T>*>()->m.contains(key);
	decRc(m);
	decRc(key);
	return ret;
}
",
"", "", [], ["hash_map"]),

Cpp3Native("removeConcurHashMapNative", true,
"template<typename K, typename T> Void $F_1(removeConcurHashMapNative)(Native* m, K key, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Void $F_1(removeConcurHashMapNative)(Native* m, K key, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	auto p = map->m.find(key);
	if (p != map->m.end()) {
		decRc(p->first);
		decRc(p->second);
		map->m.erase(p);
	}
	decRc(key);
	decRc(m);
	return void_value;
}\n", "", [], ["hash_map"]),

Cpp3Native("sizeConcurHashMapNative", true,
"template<typename K, typename T> Int $F_1(sizeConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Int $F_1(sizeConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	Int ret = m->get<FlowConcurHashMap<K, T>*>()->m.size();
	decRc(m);
	return ret;
}\n", "", [], ["hash_map"]),

Cpp3Native("clearConcurHashMapNative", true,
"template<typename K, typename T> Void $F_1(clearConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Void $F_1(clearConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	for (auto p : map->m) {
		decRc(p.first);
		decRc(p.second);
	}
	map->m.clear();
	decRc(m);
	return void_value;
}\n", "", [], ["hash_map"]),


Cpp3Native("cloneConcurHashMapNative", true,
"template<typename K, typename T> Native* $F_1(cloneConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Native* $F_1(cloneConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	FlowConcurHashMap<K, T>* clone = new FlowConcurHashMap<K, T>(map->m.size());
	for (auto p : map->m) {
		clone->m[p.first] = p.second;
		incRc(p.first);
		incRc(p.second);
	}
	decRc(m);
	return Native::make(clone, [clone]() { delete clone; });
}\n", "", [], ["hash_map"]),

Cpp3Native("iterConcurHashMapNative", true,
"template<typename K, typename T> Void $F_1(iterConcurHashMapNative)(Native* m, Fun<Void, K, T>* fn, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Void $F_1(iterConcurHashMapNative)(Native* m, Fun<Void, K, T>* fn, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	for (auto p : map->m) {
		incRc(p.first);
		incRc(p.second);
		fn->callRc1(p.first, p.second);
	}
	decRc(m);
	decRc(fn);
	return void_value;
}\n", "", [], ["hash_map"]),

Cpp3Native("funcConcurHashMapNative", true,
"template<typename K, typename T> Fun<Int, K>* $F_1(funcConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Fun<Int, K>* $F_1(funcConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	decRc(m);
	return Fun<Int, K>::make([](K x) { return static_cast<Int>(hash<std::size_t, K>(x)); });
}\n", "", [], ["hash_map"]),


Cpp3Native("valuesConcurHashMapNative", true,
"template<typename K, typename T> Vec<T>* $F_1(valuesConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Vec<T>* $F_1(valuesConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	Vec<T>* ret = Vec<T>::make(map->m.size());
	for (auto p : map->m) {
		incRc(p.second);
		ret->pushBack(p.second);
	}
	decRc(m);
	return ret;
}\n", "", [], ["hash_map"]),

Cpp3Native("keysConcurHashMapNative", true,
"template<typename K, typename T> Vec<K>* $F_1(keysConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy);\n",
"template<typename K, typename T>
Vec<K>* $F_1(keysConcurHashMapNative)(Native* m, Vec<$F_0(Pair)<K, T>*>* dummy) {
	decRc(dummy);
	FlowConcurHashMap<K, T>* map = m->get<FlowConcurHashMap<K, T>*>();
	Vec<K>* ret = Vec<K>::make(map->m.size());
	for (auto p : map->m) {
		incRc(p.first);
		ret->pushBack(p.first);
	}
	decRc(m);
	return ret;
}\n", "", [], ["hash_map"])


]