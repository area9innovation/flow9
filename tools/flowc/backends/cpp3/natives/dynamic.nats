[

Cpp3NativePlain("toString", true,
"template<typename T> String* $F_1(toString)(T x);\n",
"template<typename T> inline String* $F_1(toString)(T x) { 
	return toString(x);
}\n", "", [], []),

Cpp3NativePlain("toString2", true,
"String* $F_1(toString2)(Flow* x);\n",
"inline String* $F_1(toString2)(Flow* x) {
	return flow2string(x);
}\n", "", [], []),

Cpp3NativePlain("isSameStructType", true,
"template<typename T1, typename T2> Bool $F_1(isSameStructType)(T1 o1, T2 o2);\n",
"template<typename T1, typename T2> Bool $F_1(isSameStructType)(T1 o1, T2 o2) {
	if constexpr (std::is_pointer_v<T1> && std::is_pointer_v<T2>) {
		Bool ret = o1->typeId() == o2->typeId(); 
		RefCount<T1>::dec(o1);
		RefCount<T2>::dec(o2);
		return ret;
	} else {
		return false;
	}
}
/*template<> inline Bool $F_1(isSameStructType)(Int x, Int y) { return false; }
template<> inline Bool $F_1(isSameStructType)(Bool x, Bool y) { return false; }
template<> inline Bool $F_1(isSameStructType)(Double x, Double y) { return false; }
template<> inline Bool $F_1(isSameStructType)(String x, String y) { x->decRC(); y->decRC(); return false; }
template<> inline Bool $F_1(isSameStructType)(Native x, Native y) { x->decRC(); y->decRC(); return false; }*/
\n", "", [], []),

Cpp3NativePlain("makeStructValue", false,
"Flow* $F_1(makeStructValue)(String* name, Vec<Flow*>* args, Flow* defval);\n",
"Flow* $F_1(makeStructValue)(String* name, Vec<Flow*>* args, Flow* defval) {
	if (StructDefs::defs.find(name->str) == StructDefs::defs.end()) {
		name->decRC();
		args->decRC();
		return defval;
	} else {
		Flow ret = StructDefs::defs.at(name->str).make(args);
		name->decRC();
		args->decRC();
		defval->decRC();
		return ret;
	}
}\n", "", [], ["struct_defs"]),

Cpp3NativePlain("isSameObj", true,
"template<typename T> Bool $F_1(isSameObj)(T x, T y);\n",
"template<typename T> inline Bool $F_1(isSameObj)(T x, T y) {
	if constexpr (std::is_scalar<T>) return x == y;
	else if constexpr (std::is_same<T, String*>) return x->str == y->str;
	else {
		Bool ret = x.get() == y.get();
		RefCount<T>::dec(x);
		RefCount<T>::dec(y);
		return ret;
	}
}
/*template<> inline Bool $F_1(isSameObj)(Int x, Int y) { return x == y; }
template<> inline Bool $F_1(isSameObj)(Bool x, Bool y) { return x == y; }
template<> inline Bool $F_1(isSameObj)(Double x, Double y) { return x == y; }
template<> inline Bool $F_1(isSameObj)(String x, String y) { x->decRC(); y->decRC(); return x->str == y->str; }
template<> inline Bool $F_1(isSameObj)(Native x, Native y) { x->decRC(); y->decRC(); return x->nat == y->nat; }*/
\n", 
"", [], []),

Cpp3NativePlain("isStructName", true,
"inline Bool $F_1(isStructName)(String* name);\n",
"inline Bool $F_1(isStructName)(String* name) {
	Bool ret = (StructDefs::defs.find(name->str) != StructDefs::defs.end());
	name->decRC();
	return ret;
}\n", "", [], ["struct_defs"]),

Cpp3NativePlain("voidValue", true,
"inline Flow $F_1(voidValue)();\n",
"inline Flow $F_1(voidValue)() {
	return void_value;
}\n", "", [], []),

Cpp3NativePlain("isArray", true,
"Bool $F_1(isArray)(Flow* f);\n",
"inline Bool $F_1(isArray)(Flow f) {
	Bool ret = f->typeId() == TypeFx::ARRAY;
	f->decRC();
	return ret;
}\n", "", [], []),

Cpp3NativePlain("extractStructArguments", true,
"Vec<Flow*>* $F_1(extractStructArguments)(Flow* f);\n",
"inline Vec<Flow*>* $F_1(extractStructArguments)(Flow* f) {
	if (f->typeId()) {
		std::vector<Flow*> ret;
		ret.reserve(str->size());
		for (Int i = 0; i < str->size(); ++ i) {
			Flow* field = str->getFlow(i);
			field->incRefs();
			ret.push_back(field);
		}
		f->decRC();
		return Vec<Flow*>::make(std::move(ret));
	} else {
		f->decRC();
		return Vec<Flow>::make();
	}
}\n", "", [], []),

Cpp3NativePlain("extractStructName", true,
"String* $F_1(extractStructName)(Flow* f);\n",
"inline String* $F_1(extractStructName)(Flow* f) {
	if (f->isStruct()) {
		String name = f->toAStr()->name();
		f->decRC();
		return name;
	} else {
		f->decRC();
		return String::make();
	}
}\n", "", [], []),

Cpp3NativePlain("runtimeValueType", true,
"String* $F_1(runtimeValueType)(Flow* f);\n",
"inline String* $F_1(runtimeValueType)(Flow* f) {
	return String::make(RTTI::typeName(f->typeId()));
}\n", "", [], []),

Cpp3NativePlain("getDataTagForValue", true,
"Int $F_1(getDataTagForValue)(Flow* f);\n",
"inline Int $F_1(getDataTagForValue)(Flow* f) {
	switch (f->typeId()) {
		case TypeFx::INT:    f->decRC(); return 2;
		case TypeFx::BOOL:   f->decRC(); return 1;
		case TypeFx::DOUBLE: f->decRC(); return 3;
		case TypeFx::STRING: f->decRC(); return 4;
		case TypeFx::ARRAY:  f->decRC(); return 5;
		case TypeFx::REF:    f->decRC(); return 31;
		case TypeFx::FUNC:   f->decRC(); return 34;
		case TypeFx::NATIVE: f->decRC(); return 32;
		default:             f->decRC(); return 6;
	}
}\n", "", [], [])

]