[

Cpp3NativePlain("toString2", 
"String $F_1(toString2)(Flow x) {
	std::ostringstream os;
	flow2string(x, os, false);
	return makeString(os.str());
}\n", "", [], []),

Cpp3NativePlain("isSameStructType", 
"inline Bool $F_1(isSameStructType)(Flow o1, Flow o2) {
	if (o1.type() != Type::STRUCT || o2.type() != Type::STRUCT) {
		return false;
	} else {
		return std::get<Ptr<Struct>>(o1.val)->name() == std::get<Ptr<Struct>>(o2.val)->name();
	}
}\n", "", [], []),

Cpp3NativePlain("makeStructValue", "
Flow $F_1(makeStructValue)(String name, Arr<Flow> args, Flow defval) {
	if (StructDefs::defs.find(*name) == StructDefs::defs.end()) {
		return defval;
	} else {
		return StructDefs::defs.at(*name).make(args);
	}
}\n", "", [], ["struct_defs"]),

Cpp3NativePlain("isSameObj", 
"template<typename T> Bool $F_1(isSameObj)(T x, T y) { return x.isSameObj(y); }
template<> Bool $F_1(isSameObj)(Int x, Int y) { return x == y; }
template<> Bool $F_1(isSameObj)(Bool x, Bool y) { return x == y; }
template<> Bool $F_1(isSameObj)(Double x, Double y) { return x == y; }
template<> Bool $F_1(isSameObj)(String x, String y) { return *x == *y; }
\n", "", [], []),

Cpp3NativePlain("isStructName", 
"Bool $F_1(isStructName)(String name) {
	return (StructDefs::defs.find(*name) != StructDefs::defs.end());
}\n", "", [], ["struct_defs"]),

Cpp3NativePlain("voidValue", "Flow $F_1(voidValue)() {
	return void_value;
}\n", "void_value", [], ["void_value"]),

Cpp3NativePlain("isArray", 
"Bool $F_1(isArray)(Flow f) {
	return f.type() == Type::ARRAY;
}\n", "", [], [])

]