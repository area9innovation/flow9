[

Cpp3Native("toString", true,
"template<typename T> String* $F_1(toString)(T x);\n",
"template<typename T> inline String* $F_1(toString)(T x) {
	if constexpr (std::is_same_v<T, String*>) {
		string s = u\"\\\"\";
		s += x->str();
		decRc(x);
		s += u\"\\\"\";
		return String::make(std::move(s));
	} else {
		return toStringRc(x);
	}
}\n", Cpp3Inline(true, "toString($A_0)"), [], []),

Cpp3Native("toString2", true,
"String* $F_1(toString2)(Flow* x);\n",
"inline String* $F_1(toString2)(Flow* x) {
	if (x->typeId() == TypeFx::STRING) {
		string s = u\"\\\"\";
		s += static_cast<String*>(x)->str();
		decRc(x);
		s += u\"\\\"\";
		return String::make(std::move(s));
	} else {
		return toStringRc(x);
	}
}\n", Cpp3Inline(true, "toString($A_0)"), [], []),

Cpp3Native("isSameStructType", true,
"template<typename T1, typename T2> Bool $F_1(isSameStructType)(T1 x, T2 y);\n",
"template<typename T1, typename T2> Bool $F_1(isSameStructType)(T1 x, T2 y) {
	if constexpr (is_struct_or_union_v<T1> && is_struct_or_union_v<T2>) {
		return (x->typeIdRc() == y->typeIdRc());
	} else {
		decRc(x); decRc(y);
		return false;
	}
}
\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("makeStructValue", false,
"Flow* $F_1(makeStructValue)(String* name, Vec<Flow*>* args, Flow* defval);\n",
"Flow* $F_1(makeStructValue)(String* name, Vec<Flow*>* args, Flow* defval) {
	TypeId struct_id = RTTI::structId(name->str());
	if (struct_id == -1) {
		decRc(args);
		decRc(name);
		return defval;
	} else {
		Flow* str = RTTI::structDef(struct_id).constructor(args);
		decRc(name);
		decRc(defval);
		return str;
	}
}\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("isSameObj", true,
"template<typename T> Bool $F_1(isSameObj)(T x, T y);\n",
"template<typename T> inline Bool $F_1(isSameObj)(T x, T y) {
	Bool ret = false;
	if constexpr (std::is_same_v<T, String*>) {
		ret = (x->str() == y->str());
	} else {
		ret = (x == y);
	}
	decRc(x);
	decRc(y);
	return ret;
}
\n", 
Cpp3Inline(true, ""), [], []),

Cpp3Native("isStructName", true,
"inline Bool $F_1(isStructName)(String* name);\n",
"inline Bool $F_1(isStructName)(String* name) {
	Bool ret = RTTI::structId(name->str()) >= structTypeIdOffset;
	decRc(name);
	return ret;
}\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("voidValue", true,
"inline Flow* $F_1(voidValue)();\n",
"inline Flow* $F_1(voidValue)() {
	return void_value;
}\n", Cpp3Inline(true, "void_value"), [], []),

Cpp3Native("isArray", true,
"Bool $F_1(isArray)(Flow* f);\n",
"inline Bool $F_1(isArray)(Flow* f) {
	return f->typeIdRc() == TypeFx::ARRAY;
}\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("extractStructArguments", true,
"Vec<Flow*>* $F_1(extractStructArguments)(Flow* f);\n",
"inline Vec<Flow*>* $F_1(extractStructArguments)(Flow* f) {
	Vec<Flow*>* ret = nullptr;
	if (f->typeId() >= structTypeIdOffset) {
		ret = Vec<Flow*>::make(f->componentSize());
		for (Int i = 0; i < f->componentSize(); ++ i) {
			ret->pushBack(f->getFlowRc1(i));
		}
	} else {
		ret = Vec<Flow*>::make();
	}
	decRc(f);
	return ret;
}\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("extractStructName", true,
"String* $F_1(extractStructName)(Flow* f);\n",
"inline String* $F_1(extractStructName)(Flow* f) {
	TypeId struct_id = f->typeIdRc();
	if (struct_id >= structTypeIdOffset) {
		String* name = String::make(RTTI::structDef(struct_id).name);
		return name;
	} else {
		decRc(f);
		return String::make();
	}
}\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("structFieldNames", false,
"Vec<String*>* $F_1(structFieldNames)(String* name);\n",
"Vec<String*>* $F_1(structFieldNames)(String* name) {
	TypeId type_id = RTTI::structId(name->str());
	decRc(name);
	Vec<String*>* ret = nullptr;
	if (type_id != -1) {
		const StructDef& def = RTTI::structDef(type_id);
		ret = Vec<String*>::make(def.args.size());
		for (const FieldDef& field : def.args) {
			ret->pushBack(String::make(field.name));
		}
	} else {
		ret = Vec<String*>::make();
	}
	return ret;
}\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("runtimeValueType", true,
"String* $F_1(runtimeValueType)(Flow* f);\n",
"inline String* $F_1(runtimeValueType)(Flow* f) {
	return String::make(RTTI::typeName(f->typeIdRc()));
}\n", Cpp3Inline(true, ""), [], []),

Cpp3Native("getDataTagForValue", true,
"Int $F_1(getDataTagForValue)(Flow* f);\n",
"inline Int $F_1(getDataTagForValue)(Flow* f) {
	switch (f->typeIdRc()) {
		case TypeFx::INT:    return 2;
		case TypeFx::BOOL:   return 1;
		case TypeFx::DOUBLE: return 3;
		case TypeFx::STRING: return 4;
		case TypeFx::ARRAY:  return 5;
		case TypeFx::REF:    return 31;
		case TypeFx::FUNC:   return 34;
		case TypeFx::NATIVE: return 32;
		default:             return 6;
	}
}\n", Cpp3Inline(true, ""), [], [])

]