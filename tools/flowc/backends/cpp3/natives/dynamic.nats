[

Cpp3NativePlain("toString2", false,
"String* $F_1(toString2)(Flow* x);\n",
"String* $F_1(toString2)(Flow* x) {
	return flow2string(x);
}\n", "", [], []),

Cpp3NativePlain("isSameStructType", true,
"inline Bool $F_1(isSameStructType)(Flow* o1, Flow* o2);\n",
"inline Bool $F_1(isSameStructType)(Flow* o1, Flow* o2) {
	if (o1->type() < Type::STRUCT || o2->type() < Type::STRUCT) {
		return false;
	} else {
		return o1->type() == o2->type();
	}
}\n", "", [], []),

Cpp3NativePlain("makeStructValue", false,
"Flow* $F_1(makeStructValue)(String* name, Arr<Flow>* args, Flow* defval);\n",
"Flow* $F_1(makeStructValue)(String* name, Arr<Flow>* args, Flow* defval) {
	if (StructDefs::defs.find(name->str) == StructDefs::defs.end()) {
		return defval;
	} else {
		return StructDefs::defs.at(name->str).make(args);
	}
}\n", "", [], ["struct_defs"]),

Cpp3NativePlain("isSameObj", true,
"template<typename T> Bool $F_1(isSameObj)(T x, T y);\n",
"template<typename T> Bool $F_1(isSameObj)(T* x, T* y) { return x == y; }
template<> inline Bool $F_1(isSameObj)(Int x, Int y) { return x == y; }
template<> inline Bool $F_1(isSameObj)(Bool x, Bool y) { return x == y; }
template<> inline Bool $F_1(isSameObj)(Double x, Double y) { return x == y; }
template<> inline Bool $F_1(isSameObj)(String* x, String* y) { return x->str == y->str; }
template<> inline Bool $F_1(isSameObj)(Native* x, Native* y) { return x->nat == y->nat; }
\n", 
"", [], []),

Cpp3NativePlain("isStructName", true,
"inline Bool $F_1(isStructName)(String* name);\n",
"inline Bool $F_1(isStructName)(String* name) {
	return (StructDefs::defs.find(name->str) != StructDefs::defs.end());
}\n", "", [], ["struct_defs"]),

Cpp3NativePlain("voidValue", true,
"inline Flow* $F_1(voidValue)();\n",
"inline Flow* $F_1(voidValue)() {
	return void_value;
}\n", "void_value", [], ["void_value"]),

Cpp3NativePlain("isArray", true,
"Bool $F_1(isArray)(Flow* f);\n",
"inline Bool $F_1(isArray)(Flow* f) {
	return f->type() == Type::ARRAY;
}\n", "", [], []),

Cpp3NativePlain("extractStructArguments", true,
"Arr<Flow>* $F_1(extractStructArguments)(Flow* f);\n",
"inline Arr<Flow>* $F_1(extractStructArguments)(Flow* f) {
	AStr* str = f->toAStr();
	Arr<Flow>* ret = new Arr<Flow>(str->size());
	for (Int i = 0; i < str->size(); ++ i) {
		ret->vect.push_back(str->getFlow(i));
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("extractStructName", true,
"String* $F_1(extractStructName)(Flow* f);\n",
"inline String* $F_1(extractStructName)(Flow* f) {
	return f->toAStr()->name();
}\n", "", [], []),

Cpp3NativePlain("runtimeValueType", true,
"String* $F_1(runtimeValueType)(Flow* f);\n",
"inline String* $F_1(runtimeValueType)(Flow* f) {
	switch (f->type()) {
		case Type::INT:    return new String(u\"int\");
		case Type::BOOL:   return new String(u\"bool\");
		case Type::DOUBLE: return new String(u\"double\");
		case Type::STRING: return new String(u\"string\");
		case Type::ARRAY:  return new String(u\"array\");
		case Type::REF:    return new String(u\"ref\");
		case Type::FUNC:   return new String(u\"function\");
		case Type::NATIVE: return new String(u\"native\");
		default:           return f->toAStr()->name();
	}
}\n", "", [], []),

Cpp3NativePlain("getDataTagForValue", true,
"Int $F_1(getDataTagForValue)(Flow* f);\n",
"inline Int $F_1(getDataTagForValue)(Flow* f) {
	switch (f->type()) {
		case Type::INT:    return 2;
		case Type::BOOL:   return 1;
		case Type::DOUBLE: return 3;
		case Type::STRING: return 4;
		case Type::ARRAY:  return 5;
		case Type::REF:    return 31;
		case Type::FUNC:   return 34;
		case Type::NATIVE: return 32;
		default:           return 6;
	}
}\n", "", [], [])

]