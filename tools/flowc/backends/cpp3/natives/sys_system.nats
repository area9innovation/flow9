[

Cpp3NativePlain("print", 
"Void $F_1(print)(String s) {
	std::cout << toStdString(s) << std::flush;
}\n", "", [], []),

Cpp3NativePlain("readUntil", 
"String $F_1(readUntil)(String str_pattern) {
	const char* pattern = toStdString(str_pattern).c_str();
	Int len = strlen(pattern);
	std::vector<char> line;
	char ch = '';
	Int pos = 0;
	while (cin.get(ch)) {
		line.push_back(ch);
		if (ch == pattern[pos]) {
			pos += 1;
			if (pos == len) {
				return makeString(std::string(line.data(), line.size());
			}
		} else {
			pos = 0;
		}
	}
}\n", "", [], []),

Cpp3NativePlain("getFileContentBinary", "fun $F_1(getFileContentBinary)(name: String): String {
	try {
		val bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(name))
		return bytes.toString(Charsets.ISO_8859_1)
	} catch (e: java.io.IOException) {
		return \"\"
	}
}\n", "", [], []),

Cpp3NativePlain("setFileContentBytes", "fun $F_1(setFileContentBytes)(name: String, data: String): Boolean {
	java.io.Writer? writer = null;
	try {
		writer = java.io.BufferedWriter(java.io.OutputStreamWriter(
			java.io.FileOutputStream(name), Charsets.ISO_8859_1)
		);
		val chars = CharArray(data.length, {i -> data.codePointAt(i).toChar() })
		writer.write(chars);
	} catch (ex: java.io.IOException) {
	} finally {
		try {
			writer.close();
			return true;
		} catch (_: java.lang.Exception) {
		}
	}
	return false
}\n", "", [], []),

Cpp3NativePlain("execSystemProcess", 
"Int $F_1(execSystemProcess)(String command, Arr<String >args, String cwd, Fun<Void, String> onOut, Fun<Void, String> onErr) {
	FlowProcess p(onOut, onErr);
	p.start(command, args, cwd, false);
	p.process->waitForFinished(-1);
	return p.process->exitCode();
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("startProcess", 
"Void $F_1(startProcess)(String command, Arr<String >args, String cwd, String stdin, Fun<Void, Int, String, String> onExit) {
	Nat<FlowProcess> p(std::move(std::make_shared<FlowProcess>(onExit)));
	p.nat->writeStdin(stdin);
	p.nat->start(command, args, cwd, false);
	p.nat->process->waitForFinished(-1);
	//p.nat->process->waitForStarted(-1);
	//std::cout << \"PROC STARTED\" << std::endl;
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	//std::cout << \"FlowProcess::running.size(): \" << FlowProcess::running.size() << std::endl;
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("runSystemProcess", "Nat<FlowProcess> $F_1(runSystemProcess)(String command, Arr<String >args, String cwd, Fun<Void, String> onOut, Fun<Void, String> onErr, Fun<Void, Int> onExit) {
	Nat<FlowProcess> p(new FlowProcess(onOut, onErr, onExit));
	p.nat->start(command, args, cwd, false);
	p.nat->process->waitForFinished(-1);
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	return p;
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("writeProcessStdin", "Void $F_1(writeProcessStdin)(Nat<void> proc, String arg) {
	proc.cast<FlowProcess>().nat->writeStdin(arg);
}\n", "", [], []),

Cpp3NativePlain("killSystemProcess", "Void $F_1(killSystemProcess)(Nat<void> proc) {
	Ptr<FlowProcess> = proc.cast<FlowProcess>().nat;
	nat->process->kill();
	//nat->processFinished(-100, QProcesS::CrashExit);
}\n", "", [], [])

]