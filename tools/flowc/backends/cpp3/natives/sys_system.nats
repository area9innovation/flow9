[

Cpp3NativePlain("print", false,
"Void $F_1(print)(String* s);\n",
"Void $F_1(print)(String* s) {
	std_output_mutex.lock();
	string2ostream(s->str(), std::cout);
	std::cout << std::flush;
	std_output_mutex.unlock();
	decRc(s);
	return void_value;
}\n", "", [], ["std_output_mutex"]),

Cpp3NativePlain("readUntil", false,
"String* $F_1(readUntil)(String* str_pattern);\n",
"String* $F_1(readUntil)(String* str_pattern) {
	std::string pattern = str_pattern->toStd();
	decRc(str_pattern);
	std::ostringstream buffer;
	char ch = '\0';
	unsigned int pos = 0;
	while (std::cin.get(ch)) {
		buffer << ch;
		if (ch == pattern[pos]) {
			pos += 1;
			if (pos == pattern.size()) {
				return String::make(buffer.str());
			}
		} else {
			pos = 0;
		}
	}
}\n", "", [Cpp3Std(["<sstream>"], [])], []),

Cpp3NativePlain("getFileContentBinary", false,
"String* $F_1(getFileContentBinary)(String* path);\n",
"String* $F_1(getFileContentBinary)(String* path) {
	std::ifstream is(path->toStd(), std::ifstream::binary);
	decRc(path);
	String* s = String::make(u\"\");
	if (is.is_open()) {
		istream2string(is, s->strRef());
	}
	return s;

	/*try {
		val bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(name))
		return bytes.toString(Charsets.ISO_8859_1)
	} catch (e: java.io.IOException) {
		return \"\"
	}*/
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3NativePlain("setFileContentBytes", false,
"Bool $F_1(setFileContentBytes)(String* path, String* data);\n",
"Bool $F_1(setFileContentBytes)(String* path, String* data) {
	std::ofstream os(path->toStd(), std::ofstream::binary);
	decRc(path);
    os << data->toStd();
	decRc(data);
	return os.good();

	/*java.io.Writer? writer = null;
	try {
		writer = java.io.BufferedWriter(java.io.OutputStreamWriter(
			java.io.FileOutputStream(name), Charsets.ISO_8859_1)
		);
		val chars = CharArray(data.length, {i -> data.codePointAt(i).toChar() })
		writer.write(chars);
	} catch (ex: java.io.IOException) {
	} finally {
		try {
			writer.close();
			return true;
		} catch (_: java.lang.Exception) {
		}
	}
	return false*/
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3NativePlain("execSystemProcess", false,
"Int $F_1(execSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr);\n",
"Int $F_1(execSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr) {
	FlowProcess p(onOut, onErr);
	p.start(command, args, cwd, false);
	p.process->waitForFinished(-1);
	return p.process->exitCode();
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("startProcess", false,
"Void $F_1(startProcess)(String* command, Vec<String*>* args, String* cwd, String* stdin, Fun<Void, Int, String*, String*>* onExit);\n",
"Void $F_1(startProcess)(String* command, Vec<String*>* args, String* cwd, String* stdin, Fun<Void, Int, String*, String*>* onExit) {
	FlowProcess p(onExit);
	p.writeStdin(stdin);
	p.start(command, args, cwd, false);
	p.process->waitForFinished(-1);
	//p.nat->process->waitForStarted(-1);
	//std::cout << \"PROC STARTED\" << std::endl;
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	//std::cout << \"FlowProcess::running.size(): \" << FlowProcess::running.size() << std::endl;
	return void_value;
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("runSystemProcess", false,
"Native* $F_1(runSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr, Fun<Void, Int>* onExit);\n",
"Native* $F_1(runSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr, Fun<Void, Int>* onExit) {
	FlowProcess* p = new FlowProcess(onOut, onErr, onExit);
	p->start(command, args, cwd, false);
	// TODO: here we shouldn't wait until the process is finished!!!`
	p->process->waitForFinished(-1);
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	return Native::make(p);
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("writeProcessStdin", false,
"Void $F_1(writeProcessStdin)(Native* proc, String* arg);\n",
"Void $F_1(writeProcessStdin)(Native* proc, String* arg) {
	proc->get<FlowProcess*>()->writeStdin(arg);
	return void_value;
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("killSystemProcess", false,
"Void $F_1(killSystemProcess)(Native* proc);\n",
"Void $F_1(killSystemProcess)(Native* proc) {
	proc->get<FlowProcess*>()->process->kill();
	decRc(proc);
	//nat->processFinished(-100, QProcesS::CrashExit);
	return void_value;
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("totalMemory", false,
"Double $F_1(totalMemory)();\n",
"Double $F_1(totalMemory)() {
	return memory_used();
}\n", "", [], []),

Cpp3NativePlain("freeMemory", false,
"Double $F_1(freeMemory)();\n",
"Double $F_1(freeMemory)() {
	return 0.0; //max_heap_size - allocated_bytes;
}\n", "", [], []),

Cpp3NativePlain("maxMemory", false,
"Double $F_1(maxMemory)();\n",
"Double $F_1(maxMemory)() {
	return 0.0; //max_heap_size;
}\n", "", [], [])


]