[

Cpp3Native("print", false,
"Void $F_1(print)(String* s);\n",
"Void $F_1(print)(String* s) {
	std_output_mutex.lock();
	string2ostream(s->str(), std::cout);
	std::cout << std::flush;
	std_output_mutex.unlock();
	decRc(s);
	return void_value;
}\n", "", [], ["std_output_mutex"]),

Cpp3Native("readUntil", false,
"String* $F_1(readUntil)(String* str_pattern);\n",
"String* $F_1(readUntil)(String* str_pattern) {
	std::string pattern = str_pattern->toStd();
	decRc(str_pattern);
	std::ostringstream buffer;
	char ch = '\0';
	unsigned int pos = 0;
	while (std::cin.get(ch)) {
		buffer << ch;
		if (ch == pattern[pos]) {
			pos += 1;
			if (pos == pattern.size()) {
				return String::make(buffer.str());
			}
		} else {
			pos = 0;
		}
	}
}\n", "", [Cpp3Std(["<sstream>"], [])], []),

Cpp3Native("readBytes", false,
"String* $F_1(readBytes)(Int n);\n",
"String* $F_1(readBytes)(Int n) {
	String* ret = String::make({});
	while (n-- > 0) {
		char byte = 0;
		std::cin >> byte;
		ret->append(byte);
	}
	return ret;
}\n", "", [], []),

Cpp3Native("getFileContentBinary", false,
"String* $F_1(getFileContentBinary)(String* path);\n",
"String* $F_1(getFileContentBinary)(String* path) {
	std::ifstream is(path->toStd(), std::ios::binary|std::ios::ate);
	String* s = String::make(u\"\");
	if (is.is_open()) {
		istream2string(is, s->strRef(), true);
	}
	decRc(path);
	return s;
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3Native("setFileContentBytes", false,
"Bool $F_1(setFileContentBytes)(String* path, String* data);\n",
"Bool $F_1(setFileContentBytes)(String* path, String* data) {
	std::ofstream os(path->toStd(), std::ofstream::binary);
	decRc(path);
	// Saves the lower byte of a two-byte char, ignores the upper one.
	for (char16_t ch: data->str()) {
		os << static_cast<char>(ch && 0xFF);
	}
	decRc(data);
	return os.good();
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3Native("setFileContentBinary", false,
"Bool $F_1(setFileContentBinary)(String* path, String* data);\n",
"Bool $F_1(setFileContentBinary)(String* path, String* data) {
	std::ofstream os(path->toStd(), std::ofstream::binary);
	decRc(path);
	std::unique_ptr<char[]> bytes = std::make_unique<char[]>(data->size() * 2);
	char* s = bytes.get();
	for (char16_t ch : data->str()) {
		*s++ = static_cast<char>(ch & 0xFF);
		*s++ = static_cast<char>(ch >> 8);
	}
	decRc(data);
	os << *bytes.get();
	return os.good();
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3Native("execSystemProcess", false,
"Int $F_1(execSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr);\n",
"Int $F_1(execSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr) {
	FlowProcess p(onOut, onErr);
	p.start(command, args, cwd, false);
	p.process->waitForFinished(-1);
	return p.process->exitCode();
}\n", "", [], ["sys_system"]),

Cpp3Native("startProcess", false,
"Void $F_1(startProcess)(String* command, Vec<String*>* args, String* cwd, String* stdin, Fun<Void, Int, String*, String*>* onExit);\n",
"Void $F_1(startProcess)(String* command, Vec<String*>* args, String* cwd, String* stdin, Fun<Void, Int, String*, String*>* onExit) {
	FlowProcess p(onExit);
	p.writeStdin(stdin);
	p.start(command, args, cwd, false);
	p.process->waitForFinished(-1);
	//p.nat->process->waitForStarted(-1);
	//std::cout << \"PROC STARTED\" << std::endl;
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	//std::cout << \"FlowProcess::running.size(): \" << FlowProcess::running.size() << std::endl;
	return void_value;
}\n", "", [], ["sys_system"]),

Cpp3Native("runSystemProcess", false,
"Native* $F_1(runSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr, Fun<Void, Int>* onExit);\n",
"Native* $F_1(runSystemProcess)(String* command, Vec<String*>* args, String* cwd, Fun<Void, String*>* onOut, Fun<Void, String*>* onErr, Fun<Void, Int>* onExit) {
	FlowProcess* p = new FlowProcess(onOut, onErr, onExit);
	p->start(command, args, cwd, false);
	// TODO: here we shouldn't wait until the process is finished!!!`
	p->process->waitForFinished(-1);
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	return Native::make(p, [p]() { delete p; });
}\n", "", [], ["sys_system"]),

Cpp3Native("writeProcessStdin", false,
"Void $F_1(writeProcessStdin)(Native* proc, String* arg);\n",
"Void $F_1(writeProcessStdin)(Native* proc, String* arg) {
	proc->get<FlowProcess*>()->writeStdin(arg);
	return void_value;
}\n", "", [], ["sys_system"]),

Cpp3Native("killSystemProcess", false,
"Void $F_1(killSystemProcess)(Native* proc);\n",
"Void $F_1(killSystemProcess)(Native* proc) {
	proc->get<FlowProcess*>()->process->kill();
	decRc(proc);
	//nat->processFinished(-100, QProcesS::CrashExit);
	return void_value;
}\n", "", [], ["sys_system"]),

Cpp3Native("totalMemory", false,
"Double $F_1(totalMemory)();\n",
"Double $F_1(totalMemory)() {
	return memory_total();
}\n", "memory_system()", [], []),

Cpp3Native("freeMemory", false,
"Double $F_1(freeMemory)();\n",
"Double $F_1(freeMemory)() {
	return memory_free();
}\n", "memory_free()", [], []),

Cpp3Native("maxMemory", false,
"Double $F_1(maxMemory)();\n",
"Double $F_1(maxMemory)() {
	return memory_system();
}\n", "memory_system()", [], []),

Cpp3Native("usedMemory", false,
"Double $F_1(usedMemory)();\n",
"Double $F_1(usedMemory)() {
	return memory_used(true);
}\n", "memory_used(true)", [], []),

Cpp3Native("usedTotalMemory", false,
"Double $F_1(usedTotalMemory)();\n",
"Double $F_1(usedTotalMemory)() {
	return memory_used(false);
}\n", "memory_used(false)", [], []),

Cpp3Native("usedResidentMemory", false,
"Double $F_1(usedResidentMemory)();\n",
"Double $F_1(usedResidentMemory)() {
	return memory_used(true);
}\n", "memory_used(true)", [], []),

Cpp3Native("procMemory", false,
"Double $F_1(procMemory)();\n",
"Double $F_1(procMemory)() {
	return memory_used_by_process();
}\n", "memory_used_by_process()", [], [])


]