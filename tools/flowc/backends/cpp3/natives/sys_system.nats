[

Cpp3NativePlain("print", false,
"Void $F_1(print)(String s);\n",
"Void $F_1(print)(String s) {
	std::cout << toStdString(s) << std::flush;
}\n", "", [], []),

Cpp3NativePlain("readUntil", false,
"String $F_1(readUntil)(String str_pattern);\n",
"String $F_1(readUntil)(String str_pattern) {
	std::string pattern = toStdString(str_pattern);
	std::ostringstream buffer;
	char ch = '\0';
	unsigned int pos = 0;
	while (std::cin.get(ch)) {
		buffer << ch;
		if (ch == pattern[pos]) {
			pos += 1;
			if (pos == pattern.size()) {
				return makeString(buffer.str());
			}
		} else {
			pos = 0;
		}
	}
}\n", "", [Cpp3Std(["<sstream>"], [])], []),

Cpp3NativePlain("getFileContentBinary", false,
"String $F_1(getFileContentBinary)(String path);\n",
"String $F_1(getFileContentBinary)(String path) {
	std::ifstream is(toStdString(path), std::ifstream::binary);
	if (is.is_open()) {
		/*
		// get length of file:
		is.seekg(0, is.end);
		int length = is.tellg();
		is.seekg(0, is.beg);
		char* buffer = new char [length];
		// read data as a block:
		is.read(buffer, length);
		*/
		std::stringstream buffer;
		buffer << is.rdbuf();
		if (is.good()) {
			return makeString(buffer.str());
		} else {
			return makeString();
		}
	} else {
		return makeString();
	}

	/*try {
		val bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(name))
		return bytes.toString(Charsets.ISO_8859_1)
	} catch (e: java.io.IOException) {
		return \"\"
	}*/
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3NativePlain("setFileContentBytes", false,
"Bool $F_1(setFileContentBytes)(String path, String data);\n",
"Bool $F_1(setFileContentBytes)(String path, String data) {
	std::ofstream os(toStdString(path), std::ofstream::binary);
    os << toStdString(data);
	return os.good();

	/*java.io.Writer? writer = null;
	try {
		writer = java.io.BufferedWriter(java.io.OutputStreamWriter(
			java.io.FileOutputStream(name), Charsets.ISO_8859_1)
		);
		val chars = CharArray(data.length, {i -> data.codePointAt(i).toChar() })
		writer.write(chars);
	} catch (ex: java.io.IOException) {
	} finally {
		try {
			writer.close();
			return true;
		} catch (_: java.lang.Exception) {
		}
	}
	return false*/
}\n", "", [Cpp3Std(["<fstream>"], [])], []),

Cpp3NativePlain("execSystemProcess", false,
"Int $F_1(execSystemProcess)(String command, Arr<String >args, String cwd, Fun<Void, String> onOut, Fun<Void, String> onErr);\n",
"Int $F_1(execSystemProcess)(String command, Arr<String >args, String cwd, Fun<Void, String> onOut, Fun<Void, String> onErr) {
	FlowProcess p(onOut, onErr);
	p.start(command, args, cwd, false);
	p.process->waitForFinished(-1);
	return p.process->exitCode();
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("startProcess", false,
"Void $F_1(startProcess)(String command, Arr<String >args, String cwd, String stdin, Fun<Void, Int, String, String> onExit);\n",
"Void $F_1(startProcess)(String command, Arr<String >args, String cwd, String stdin, Fun<Void, Int, String, String> onExit) {
	FlowProcess p(onExit);
	p.writeStdin(stdin);
	p.start(command, args, cwd, false);
	p.process->waitForFinished(-1);
	//p.nat->process->waitForStarted(-1);
	//std::cout << \"PROC STARTED\" << std::endl;
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	//std::cout << \"FlowProcess::running.size(): \" << FlowProcess::running.size() << std::endl;
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("runSystemProcess", false,
"Flow $F_1(runSystemProcess)(String command, Arr<String>args, String cwd, Fun<Void, String> onOut, Fun<Void, String> onErr, Fun<Void, Int> onExit);\n",
"Flow $F_1(runSystemProcess)(String command, Arr<String>args, String cwd, Fun<Void, String> onOut, Fun<Void, String> onErr, Fun<Void, Int> onExit) {
	Ptr<FlowProcess> p = makePtr<FlowProcess>(onOut, onErr, onExit);
	p->start(command, args, cwd, false);
	p->process->waitForFinished(-1);
	//FlowProcess::running.insert(std::pair(p.nat.get(), p));
	return p.staticCast<Void>();
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("writeProcessStdin", false,
"Void $F_1(writeProcessStdin)(Flow proc, String arg);\n",
"Void $F_1(writeProcessStdin)(Flow proc, String arg) {
	proc.toNative<FlowProcess>()->writeStdin(arg);
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("killSystemProcess", false,
"Void $F_1(killSystemProcess)(Flow proc);\n",
"Void $F_1(killSystemProcess)(Flow proc) {
	proc.toNative<FlowProcess>()->process->kill();
	//nat->processFinished(-100, QProcesS::CrashExit);
}\n", "", [], ["sys_system"]),

Cpp3NativePlain("totalMemory", false,
"Double $F_1(totalMemory)();\n",
"Double $F_1(totalMemory)() {
	return max_heap_size;
}\n", "", [], []),

Cpp3NativePlain("freeMemory", false,
"Double $F_1(freeMemory)();\n",
"Double $F_1(freeMemory)() {
	return max_heap_size - allocated_bytes;
}\n", "", [], []),

Cpp3NativePlain("maxMemory", false,
"Double $F_1(maxMemory)();\n",
"Double $F_1(maxMemory)() {
	return max_heap_size;
}\n", "", [], [])


]