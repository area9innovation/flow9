[

Cpp3NativePlain("print", 
"Void $F_1(print)(String s) {
	std::cout << toStdString(*s);
}\n", "", [], []),

Cpp3NativePlain("readUntil", 
"String $F_1(readUntil)(String str_pattern) {
	const char* pattern = toStdString(str_pattern).c_str();
	Int len = strlen(pattern);
	std::vector<char> line;
	char ch = '';
	Int pos = 0;
	while (cin.get(ch)) {
		line.push_back(ch);
		if (ch == pattern[pos]) {
			pos += 1;
			if (pos == len) {
				return makeString(std::string(line.data(), line.size());
			}
		} else {
			pos = 0;
		}
	}
}\n", "", [], []),

Cpp3NativePlain("getFileContentBinary", "fun $F_1(getFileContentBinary)(name: String): String {
	try {
		val bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(name))
		return bytes.toString(Charsets.ISO_8859_1)
	} catch (e: java.io.IOException) {
		return \"\"
	}
}\n", "", [], []),

Cpp3NativePlain("setFileContentBytes", "fun $F_1(setFileContentBytes)(name: String, data: String): Boolean {
	java.io.Writer? writer = null;
	try {
		writer = java.io.BufferedWriter(java.io.OutputStreamWriter(
			java.io.FileOutputStream(name), Charsets.ISO_8859_1)
		);
		val chars = CharArray(data.length, {i -> data.codePointAt(i).toChar() })
		writer.write(chars);
	} catch (ex: java.io.IOException) {
	} finally {
		try {
			writer.close();
			return true;
		} catch (_: java.lang.Exception) {
		}
	}
	return false
}\n", "", [], []),

Cpp3NativePlain("execSystemProcess", "fun $F_1(execSystemProcess)(command: String, args: ArrayList<String>, cwd: String, onOut: (String) -> Unit, onErr: (String) -> Unit): Int {
	val cmd = arrayOf(*arrayOf(command), *args.toTypedArray())
	val runner = ProcessStarter(cmd, cwd, onOut, onErr, {_ -> })
	runner.run()
	return runner.waitFor()
}\n", "", [], []),

Cpp3NativePlain("startProcess", "fun $F_1(startProcess)(command: String, args: ArrayList<String>, cwd: String, stdin: string, onExit: (int, String, String) -> Unit): Unit {
	val cmd = arrayOf(*arrayOf(command), *args.toTypedArray())
	var stdout = \"\"
	var stderr = \"\"
	val runner = ProcessStarter(cmd, cwd, 
		{out -> stdout = stdout + out}, 
		{err -> stderr = stderr + err}, 
		{code -> onExit(code, stdout, stderr)}
	)
	flow_threadpool.submit(runner)
	runner.writeStdin(stdin)
}\n", "", [], []),

Cpp3NativePlain("runSystemProcess", "fun $F_1(runSystemProcess)(command: String, args: ArrayList<String>, cwd: String, onOut: (String) -> Unit, onErr: (String) -> Unit, onExit: (Int) -> Unit): ProcessStarter {
	val cmd = arrayOf(*arrayOf(command), *args.toTypedArray())
	val runner = ProcessStarter(cmd, cwd, onOut, onErr, onExit)
	flow_threadpool.submit(runner)
	return runner
}\n", "", [], []),

Cpp3NativePlain("writeProcessStdin", "fun $F_1(writeProcessStdin)(proc: Any, arg: String): Unit {
	(proc as ProcessStarter).writeStdin(arg);
}\n", "", [], [])

]