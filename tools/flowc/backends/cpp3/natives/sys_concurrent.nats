[
Cpp3Native("availableProcessors", true,
"inline Int $F_1(availableProcessors)();\n",
"inline Int $F_1(availableProcessors)() {
	return std::thread::hardware_concurrency();
}\n", "", 
[], []),

Cpp3Native("newThreadPool", true,
"inline Native* $F_1(newThreadPool)(Int threadsCount);\n",
"inline Native* $F_1(newThreadPool)(Int threadsCount) {
	ThreadPool* thread_pool = new ThreadPool(threadsCount);
	return Native::make(thread_pool, [thread_pool]() { delete thread_pool; });
}\n", "", [], []),

Cpp3Native("getThreadId", true,
"inline String* $F_1(getThreadId)();\n",
"inline String* $F_1(getThreadId)() {
	std::stringstream ss;
	ss << std::this_thread::get_id();
	return String::make(ss.str());
}\n", "", [], []),

Cpp3Native("concurrent", true,
"template<typename T> Vec<T>* $F_1(concurrent)(Native* nat, Vec<Fun<T>*>* tasks);\n",
"template<typename T> Vec<T>* $F_1(concurrent)(Native* nat, Vec<Fun<T>*>* tasks) {
	std::size_t size = tasks->size();
	if (size == 0) {
		decRc(nat);
		decRc(tasks);
		return Vec<T>::make();
	} else if (size == 1) {
		decRc(nat);
		Vec<T>* ret = Vec<T>::make(1);
		ret->pushBack(tasks->get(0)->callRc1());
		decRc(tasks);
		return ret;
	} else {
		std::vector<std::future<T>> task_jobs;
		task_jobs.reserve(size);
		ThreadPool* thread_pool = nat->get<ThreadPool*>();
		for (Fun<T>* fn: *tasks) {
			task_jobs.emplace_back(
				thread_pool->push<T>(ThreadPool::Shutdown::Block, [fn]() {
					return fn->callRc1();
				})
			);
		}
		std::vector<T> ret;
		ret.reserve(size);
		for (std::future<T>& job: task_jobs) {
			ret.push_back(job.get());
		}
		decRc(nat);
		decRc(tasks);
		return Vec<T>::make(std::move(ret));
	}
}\n", "", 
[], []),

Cpp3Native("atomicRefIntAddition", true,
"inline Int $F_1(atomicRefIntAddition)(Ref<Int>* v, Int delta);\n",
"inline Int $F_1(atomicRefIntAddition)(Ref<Int>* v, Int delta) {
	Int ret = std::atomic_ref<Int>(v->getRef()).fetch_add(delta);
	decRc(v);
	return ret;
}\n", "",
[], []),

Cpp3Native("synchronizedConstFn", true,
"template<typename T> Fun<T>* $F_1(synchronizedConstFn)(Flow* lock, Fun<T>* fn);\n",
"template<typename T> Fun<T>* $F_1(synchronizedConstFn)(Flow* lock, Fun<T>* fn) {
	std::mutex& m = aquireMutex(lock);
	decRc(lock);
	return Fun<T>::make([fn, &m]() mutable {
		const std::lock_guard<std::mutex> l(m);
		return fn->callRc();
	}, fn);
}\n", "", 
[], ["concurrent"]),

Cpp3Native("synchronizedUnaryFn", true,
"template<typename A, typename T> Fun<T, A>* $F_1(synchronizedUnaryFn)(Flow* lock, Fun<T, A>* fn);\n",
"template<typename A, typename T> Fun<T, A>* $F_1(synchronizedUnaryFn)(Flow* lock, Fun<T, A>* fn) {
	std::mutex& m = aquireMutex(lock);
	decRc(lock);
	return Fun<T, A>::make([fn, &m](A a) {
		const std::lock_guard<std::mutex> l(m);
		return fn->callRc(a);
	}, fn);
}\n", "", 
[], ["concurrent"]),

Cpp3Native("synchronizedBinaryFn", true,
"template<typename A1, typename A2, typename T> Fun<T, A1, A2>* $F_1(synchronizedBinaryFn)(Flow* lock, Fun<T, A1, A2>* fn);\n",
"template<typename A1, typename A2, typename T> Fun<T, A1, A2>* $F_1(synchronizedBinaryFn)(Flow* lock, Fun<T, A1, A2>* fn) {
	std::mutex& m = aquireMutex(lock);
	decRc(lock);
	return Fun<T, A1, A2>::make([fn, &m](A1 a1, A2 a2) mutable {
		const std::lock_guard<std::mutex> l(m);
		return fn->callRc(a1, a2);
	}, fn);
}\n", "", 
[], ["concurrent"]),

Cpp3Native("synchronizedTernaryFn", true,
"template<typename A1, typename A2, typename A3, typename T> Fun<T, A1, A2, A3>* $F_1(synchronizedTernaryFn)(Flow* lock, Fun<T, A1, A2, A3>* fn);\n",
"template<typename A1, typename A2, typename A3, typename T> Fun<T, A1, A2, A3>* $F_1(synchronizedTernaryFn)(Flow* lock, Fun<T, A1, A2, A3>* fn) {
	std::mutex& m = aquireMutex(lock);
	decRc(lock);
	return Fun<T, A1, A2, A3>::make([fn, &m](A1 a1, A2 a2, A3 a3) mutable {
		const std::lock_guard<std::mutex> l(m);
		return fn->callRc(a1, a2, a3);
	}, fn);
}\n", "", 
[], ["concurrent"]),

Cpp3Native("concurrentAsyncCallback", true,
"template<typename T> Void $F_1(concurrentAsyncCallback)(
	Native* nat,
	Fun<Void, Fun<Void, T>*, Fun<Void>*>* task,
	Fun<Void, T>* on_done,
	Fun<Void, String*>* on_fail
);\n",
"template<typename T> Void $F_1(concurrentAsyncCallback)(
	Native* nat,
	Fun<Void, Fun<Void, T>*, Fun<Void>*>* task,
	Fun<Void, T>* on_done,
	Fun<Void, String*>* on_fail
) {
	ThreadPool* thread_pool = nat->get<ThreadPool*>();
	decRc(fail); // TODO: use fail
	thread_pool->push<void>(ThreadPool::Shutdown::Block, [task, on_done]() {
		task->callRc(on_done, Fun<Void>::make([] { return void_value; }));
	});
	return void_value;
}\n", "", 
[], [])

]