[

Cpp3Native("makeNativeVector", true,
"template<typename T> Native* $F_1(makeNativeVector)(Int capacity, Vec<T>* dummy);\n",
"template<typename T>
Native* $F_1(makeNativeVector)(Int capacity, Vec<T>* dummy) {
	decRc(dummy);
	Vec<T>* vec = Vec<T>::make(capacity > 0 ? capacity : 0);
	return Native::template make<Vec<T>*>(vec, [vec]() { delete vec; });
}\n", "", [], []),

Cpp3Native("getNativeVector", true,
"template<typename T> T $F_1(getNativeVector)(Native* m, Int i);\n",
"template<typename T>
T $F_1(getNativeVector)(Native* m, Int i) {
	Vec<T>* vec = m->get<Vec<T>*>();
	T ret = vec->getRc1(i);
	decRc(m);
	return ret;
}\n", "", [], []),

Cpp3Native("setNativeVector", true,
"template<typename T> Void $F_1(setNativeVector)(Native* m, Int i, T val);\n",
"template<typename T>
Void $F_1(setNativeVector)(Native* m, Int i, T val) {
	Vec<T>* vec = m->get<Vec<T>*>();
	vec->setRc1(i, val);
	decRc(m);
	return void_value;
}\n", "", [], []),

Cpp3Native("addNativeVector", true,
"template<typename T> Void $F_1(addNativeVector)(Native* m, T val);\n",
"template<typename T>
Void $F_1(addNativeVector)(Native* m, T val) {
	Vec<T>* vec = m->get<Vec<T>*>();
	vec->pushBack(val);
	decRc(m);
	return void_value;
}\n", "", [], []),

Cpp3Native("removeNativeVector", true,
"template<typename T> Void $F_1(removeNativeVector)(Native* m, Int i, Vec<T>* dummy);\n",
"template<typename T>
Void $F_1(removeNativeVector)(Native* m, Int i, Vec<T>* dummy) {
	decRc(dummy);
	Vec<T>* vec = m->get<Vec<T>*>();
	vec->remove(i);
	decRc(m);
	return void_value;
}\n", "", [], []),

Cpp3Native("sizeNativeVector", true,
"template<typename T> Int $F_1(sizeNativeVector)(Native* m, Vec<T>* dummy);\n",
"template<typename T>
Int $F_1(sizeNativeVector)(Native* m, Vec<T>* dummy) {
	decRc(dummy);
	Int ret = m->get<Vec<T>*>()->size();
	decRc(m);
	return ret;
}\n", "", [], []),

Cpp3Native("clearNativeVector", true,
"template<typename T> Void $F_1(clearNativeVector)(Native* m, Vec<T>* dummy);\n",
"template<typename T>
Void $F_1(clearNativeVector)(Native* m, Vec<T>* dummy) {
	decRc(dummy);
	Vec<T>* vec = m->get<Vec<T>*>();
	if constexpr (is_rcbase_ancestor_v<T>) {
		for (T p : *vec) {
			decRc(p);
		}
	}
	vec->vecRef().clear();
	decRc(m);
	return void_value;
}\n", "", [], []),

Cpp3Native("trimToSizeNativeVector", true,
"template<typename T> Void $F_1(trimToSizeNativeVector)(Native* m, Vec<T>* dummy);\n",
"template<typename T>
Void $F_1(trimToSizeNativeVector)(Native* m, Vec<T>* dummy) {
	decRc(dummy);
	Vec<T>* vec = m->get<Vec<T>*>();
	vec->vecRef().shrink_to_fit();
	decRc(m);
	return void_value;
}\n", "", [], []),


Cpp3Native("subNativeVector", true,
"template<typename T> Native* $F_1(subNativeVector)(Native* m, Int i, Int len, Vec<T>* dummy);\n",
"template<typename T>
Native* $F_1(subNativeVector)(Native* m, Int i, Int len, Vec<T>* dummy) {
	decRc(dummy);
	Vec<T>* vec = m->get<Vec<T>*>();
	if (len < 1 || i < 0 || i >= vec->size()) {
		decRc(m);
		return Native::make<Vec<T>*>(Vec<T>::make());
	} else {
		Vec<T>* ret = Vec<T>::make(len);
		auto start = vec->begin() + i;
		auto end = start + (i + len < vec->size() ? len : vec->size() - i); 
		for (auto x = start; x != end; ++ x) {
			incRc<T>(*x);
			ret->pushBack(*x);
		}
		decRc(m);
		return Native::make<Vec<T>*>(ret);
	}
}\n", "", [], []),

Cpp3Native("vector2arrayNative", true,
"template<typename T> Vec<T>* $F_1(vector2arrayNative)(Native* m);\n",
"template<typename T>
Vec<T>* $F_1(vector2arrayNative)(Native* m) {
	Vec<T>* vec = m->get<Vec<T>*>();
	Vec<T>* ret = Vec<T>::make(vec->size());
	for (T x : *vec) {
		incRc<T>(x);
		ret->pushBack(x);
	}
	decRc(m);
	return ret;
}\n", "", [], []),

Cpp3Native("array2vectorNative", true,
"template<typename T> Native* $F_1(array2vectorNative)(Vec<T>* vec);\n",
"template<typename T>
Native* $F_1(array2vectorNative)(Vec<T>* vec) {
	Vec<T>* ret = Vec<T>::make(vec->size());
	for (T x : *vec) {
		incRc<T>(x);
		ret->pushBack(x);
	}
	decRc(vec);
	return Native::make<Vec<T>*>(ret);
}\n", "", [], [])

]