[

CppNativePlain("length",
"template<typename T>
inline Int $F_1(length)(Arr<T> a) { 
	return a.arr->size(); 
}\n",
"$A_0.arr->size()", [], []
),

CppNativePlain("concat",
"template<typename T>
inline Arr<T> $F_1(concat)(Arr<T> a1, Arr<T> a2) {
	Arr<T> ret = Arr<T>(a1.arr->size() + a2.arr->size());
	for(T x : *a1.arr) ret.arr->push_back(x);
	for(T x : *a2.arr) ret.arr->push_back(x);
	return ret;
}\n", "", [], []),

CppNativePlain("fold", 
"template<typename T, typename V>
inline V $F_1(fold)(Arr<T> a, V v, Fun<V, V, T> fn) {
	for (T x : *a.arr) v = fn(v, x);
	return v;
}\n", "", [], []),

CppNativePlain("foldi", 
"template<typename T, typename V>
inline V $F_1(foldi)(Arr<T> a, V v, Fun<V, Int, V, T> fn) {
	Int i = 0;
	for (T x : *a.arr) v = fn(i++, v, x);
	return v;
}\n", "", [], []),

CppNativePlain("map", 
"template<typename T, typename V>
inline Arr<V> $F_1(map)(Arr<T> a, Fun<V, T> fn) {
	Arr<V> ret(a.arr->size());
	for (T x : *a.arr) ret.arr->push_back(fn(x));
	return ret;
}\n", "", [], []),

CppNativePlain("mapi", 
"template<typename T, typename V>
inline Arr<V> $F_1(mapi)(Arr<T> a, Fun<V, Int, T> fn) {
	Arr<V> ret(a.arr->size());
	Int i = 0;
	for (T x : *a.arr) ret.arr->push_back(fn(i++, x));
	return ret;
}\n", "", [], []),

CppNativePlain("filter", 
"template<typename T>
inline Arr<T> $F_1(filter)(Arr<T> a, Fun<Bool, T> fn) {
	Arr<T> ret(a.arr->size());
	for (T x : *a.arr) if (fn(x)) ret.arr->push_back(x);
	return ret;
}\n", "", [], []),

CppNativePlain("isSameStructType", 
"inline Bool $F_1(isSameStructType)(Flow o1, Flow o2) {
	if (o1.type() != Type::STRUCT || o2.type() != Type::STRUCT) {
		return false;
	} else {
		return std::get<Ptr<Struct>>(o1.val)->name() == std::get<Ptr<Struct>>(o2.val)->name();
	}
}\n", "", [], []),

CppNativePlain("quit", 
"void $F_1(quit)(Int code) { exit(code); }\n\n", "exit($A_0)", ["<cstdlib>"], []),

CppNativePlain("println2", 
"void $F_1(println2)(Flow x) { 
	flow2string(x, std::cout); std::cout << std::endl; 
}\n", "", [], []),

CppNativePlain("i2s", "String $F_1(i2s)(Int x) { return makeString(std::to_string(x)); }\n\n", "", [], []),
CppNativePlain("d2s", "String $F_1(d2s)(Double x) { std::ostringstream os; os << x; return makeString(os.str()); }\n\n", "", [], []),
CppNativePlain("i2d", "Double $F_1(i2d)(Int x) { return x; }\n\n", "$A_0", [], []),
CppNativePlain("exp", "Double $F_1(exp)(Double x) { return exp(x); }\n\n", "exp($A_0)", ["<cmath>"], []),
CppNativePlain("log", "Double $F_1(log)(Double x) { return log(x); }\n\n", "log($A_0)", ["<cmath>"], []),
CppNativePlain("trunc", "Int $F_1(trunc)(Double x) { return trunc(x); } \n\n", "trunc($A_0)", ["<cmath>"], []),
CppNativePlain("strlen", "Int $F_1(strlen)(String s) { return s->size(); }\n\n", "$A_0->size()", [], []),
CppNativePlain("bitAnd", "Int $F_1(bitAnd)(Int x, Int y) { return x & y; }\n\n", "($A_0 & $A_1)", [], []),
CppNativePlain("bitOr", "Int $F_1(bitOr)(Int x, Int y) { return x | y; }\n\n", "($A_0 | $A_1)", [], []),
CppNativePlain("bitXor", "Int $F_1(bitXor)(Int x, Int y) { return x ^ y; }\n\n", "($A_0 ^ $A_1)", [], []),
CppNativePlain("bitNot", "Int $F_1(bitNot)(Int x) { return ~x; }\n\n", "~$A_0", [], []),
CppNativePlain("bitShl", "Int $F_1(bitShl)(Int x, Int y) { return x << y; }\n\n", "($A_0 << $A_1)", [], []),
CppNativePlain("bitUshr", "Int $F_1(bitUshr)(Int x, Int y) { return x >> y; }\n\n", "($A_0 >> $A_1)", [], []),
CppNativePlain("getCharCodeAt", "Int $F_1(getCharCodeAt)(String s, Int i) { return s->at(i); }\n\n", "$A_0->at($A_1)", [], []),
CppNativePlain("getCharAt", "String $F_1(getCharAt)(String s, Int i) { return makeString(s->at(i)); }\n\n", "makeString($A_0->at($A_1))", [], []),
CppNativePlain("fromCharCode", "String $F_1(fromCharCode)(Int code) { return makeString(code); }\n\n", "makeString($A_0)", [], []),

CppNativePlain("toString2", 
"String $F_1(toString2)(Flow x) {
	std::ostringstream os;
	flow2string(x, os, false);
	return makeString(os.str());
}\n", "", [], []),

CppNativePlain("toLowerCase", 
"String $F_1(toLowerCase)(String s) {
	String lower = makeString(s);
	std::transform(lower->begin(), lower->end(), lower->begin(), [](auto c){ return std::tolower(c); });
	return lower;
}\n", "", [], []),

CppNativePlain("toUpperCase", 
"String $F_1(toUpperCase)(String s) {
	String upper = makeString(s);
	std::transform(upper->begin(), upper->end(), upper->begin(), [](auto c){ return std::toupper(c); });
	return upper;
}\n", "", [], []),

CppNativePlain("strIndexOf", 
"Int $F_1(strIndexOf)(String s, String p) {
	auto i = s->find(*p);
	return (i == string::npos) ? -1 : i;
}\n", "", [], []),

CppNativePlain("getKeyValueN", 
"String $F_1(getKeyValueN)(String key, String defval) { return defval; }\n\n", "$A_1", [], []),

CppNativePlain("fail", 
"Void $F_1(fail)(String msg) { std::cerr << toStdString(msg); assert(false); }\n
\n", "", [], []),

CppNativePlain("timer", "Void $F_1(timer)(Int delay, Fun<Void> cb) {
	// TODO: implement
}\n", "", [], []),

CppNativePlain("replace", 
"template<typename T>
Arr<T> $F_1(replace)(Arr<T> a, Int i, T v) {
	Arr<T> ret(*a.arr);
	(*ret.arr)[i] = v; 
	return ret; 
}\n", "", [], []),

CppNativePlain("subrange", 
"template<typename T>
Arr<T> $F_1(subrange)(Arr<T> a, Int i, Int len) {
	Arr<T> ret(len);
	for (Int j = 0; j < len; ++ j) {
		ret.arr->push_back(a.arr->at(i + j));
	}
	return ret;
}\n", "", [], []),

CppNativePlain("enumFromTo", 
"Arr<Int> $F_1(enumFromTo)(Int beg, Int end) {
	if (beg > end) {
		return Arr<Int>();
	} else {
		Arr<Int> ret(end - beg + 1);
		for (Int i = 0; i < end - beg + 1; ++i) {
			ret.arr->push_back(beg + i);
		}
		return ret;
	}
}\n", "", [], []),

CppNativePlain("iter", 
"template<typename T>
Void $F_1(iter)(Arr<T> a, Fun<Void, T> fn) { 
	for (T x : *a.arr) fn(x);
}\n", "", [], []),

CppNativePlain("iteri", 
"template<typename T>
Void $F_1(iteri)(Arr<T> a, Fun<Void, Int, T> fn) {
	Int i = 0;
	for (T x : *a.arr) fn(i++, x);
}\n", "", [], []),

CppNativePlain("iteriUntil", 
"template<typename T>
Int $F_1(iteriUntil)(Arr<T> a, Fun<Bool, Int, T> fn) {
	for (Int i = 0; i < a.arr->size(); ++ i) {
		if (fn(i, a.arr->at(i))) return i;
	}
	return a.arr->size();
}\n", "", [], []),
	
CppNativePlain("iterUntil", 
"template<typename T>
Int $F_1(iterUntil)(Arr<T> a, Fun<Bool, T> fn) {
	for (Int i = 0; i < a.arr->size(); ++ i)) {
		if (fn(a.arr->at(i))) return i;
	}
	return a.arr->size();
}\n", "", [], []),

CppNativePlain("substring", 
"String $F_1(substring)(String str, Int i, Int l) {
	Int strlen = str->size();
	Int start = i;
	Int len = l;
	if (len < 0) {
		if (start < 0) {
			len = 0;
		} else {
			Int smartLen1 = len + start;
			if (smartLen1 >= 0) {
				len = 0;
			} else {
				Int smartLen2 = smartLen1 + strlen;
				if (smartLen2 <= 0) len = 0;
				else len = smartLen2;
			}
		}
	}
	if (start < 0) {
		Int smartStart = start + strlen;
		if (smartStart > 0) {
			start = smartStart;
		} else {
			start = 0;
		}
	} else if (start >= strlen) {
		len = 0;
	}

	if (len < 1) {
		return makeString();
	} else {
		//len = clipLenToRange(start, len, strlen);
		Int end = start + len;
		if (end > strlen || end  < 0) {
			len = strlen - start;
		}
		return makeString(str->substr(start, len));
	}
}\n", "", [], []),

CppNativePlain("getUrlParameterNative", 
"String $F_1(getUrlParameterNative)(String n) {
	if (command_args.find(*n) == command_args.end()) {
		std::cout << \"param not found\" << std::endl;
		return makeString();
	} else {
		std::cout << \"param IS found\" << std::endl;
		return makeString(command_args.at(*n));
	}
}\n", "", [], ["command_args"]),

CppNativePlain("list2array", 
"template<typename T>
Arr<T> $F_1(list2array)(Union list) {
	Int count = 0;
	Struct* l = list.get();
	while (l->size() > 0) {
		$F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l);
		++count;
		l = cons->$F_1(tail).get();  
	}
	Arr<T> ret(new std::vector<T>(count));
	l = list.get();
	while (l->size() > 0) {
		$F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l);
		(*ret.arr)[--count] = cons->$F_1(head);
		l = cons->$F_1(tail).get();  
	}
	return ret;
}\n", "", [], []),

CppNativePlain("list2string", 
"String $F_1(list2string)(Union list) {
	Int len = 0;
	Int count = 0;
	String rv = makeString();
	Struct* l = list.get();
	while (l->size() > 0) {
		$F_0(Cons)<String>* cons = dynamic_cast<$F_0(Cons)<String>*>(l);
		len += cons->$F_1(head)->size();
		++count;
		l = cons->$F_1(tail).get();  
	}
	String strings[count];
	l = list.get();
	Int i = count;
	while (l->size() > 0) {
		$F_0(Cons)<String>* cons = dynamic_cast<$F_0(Cons)<String>*>(l);
		strings[--i] = cons->$F_1(head);
		l = cons->$F_1(tail).get();  
	}
	std::ostringstream os;
	for (int i = 0; i < count; i++) {
		os << toStdString(strings[i]);
	}
	return makeString(os.str());
}\n", "", [], []),

CppNativePlain("getAllUrlParametersArray", 
"Arr<Arr<String>> $F_1(getAllUrlParametersArray)() {
	Arr<Arr<String>> params(command_args.size());
	for (auto p : command_args) {
		Arr<String> param(2);
		param.arr->push_back(makeString(p.first));
		if (p.second.size() == 0) {
			param.arr->push_back(makeString());
		} else {
			param.arr->push_back(makeString(p.second));
		}
		params.arr->push_back(param);
	}
	return params;
}\n", "", [], ["command_args"]),

CppNativePlain("makeStructValue", "
Flow $F_1(makeStructValue)(String name, Arr<Flow> args, Flow defval) {
	if (struct_defs.find(*name) == struct_defs.end()) {
		return defval;
	} else {
		return struct_defs.at(*name).make(args);
	}
}\n", "", [], ["struct_defs"]),

CppNativePlain("isSameObj", 
"Bool $F_1(isSameObj)(Flow a, Flow b) {
	if (a.type() != b.type()) {
		return false;
	} else {
		switch (a.type()) {
			case Type::INT:    return std::get<Int>(a.val) == std::get<Int>(b.val);
			case Type::BOOL:   return std::get<Bool>(a.val) == std::get<Bool>(b.val);
			case Type::DOUBLE: return std::get<Double>(a.val) == std::get<Double>(b.val);
			case Type::STRING: return *std::get<String>(a.val) == *std::get<String>(b.val);
			case Type::STRUCT: return std::get<Ptr<Struct>>(a.val).get() == std::get<Ptr<Struct>>(b.val).get();
			case Type::ARRAY:  return std::get<Ptr<Array>>(a.val).get() == std::get<Ptr<Array>>(b.val).get();
			case Type::REF:    return std::get<Ptr<Reference>>(a.val).get() == std::get<Ptr<Reference>>(b.val).get();
			case Type::FUNC:   return std::get<Ptr<Function>>(a.val).get() == std::get<Ptr<Function>>(b.val).get();
			case Type::NATIVE: return std::get<Ptr<Native>>(a.val).get() == std::get<Ptr<Native>>(b.val).get();
		}
	}
}\n", "", [], []),

CppNativePlain("isStructName", 
"Bool $F_1(isStructName)(String name) {
	return (struct_defs.find(*name) != struct_defs.end());
}\n", "", [], ["struct_defs"]),

CppNativePlain("voidValue", "Flow $F_1(voidValue)() {
	return void_value;
}\n", "void_value", [], ["void_value"]),

CppNativePlain("isArray", 
"Bool $F_1(isArray)(Flow f) {
	return f.type() == Type::ARRAY;
}\n", "", [], []),

CppNativePlain("loaderUrl", "String $F_1(loaderUrl)() { return makeString(); }\n\n", "", [], []),

CppNativePlain("getTargetName", 
"String $F_1(getTargetName)() {
	return makeString(\"c++\");
}\n", "", [], []),

CppNativePlain("timestamp", 
"Double $F_1(timestamp)() {
	return std::chrono::duration_cast<std::chrono::milliseconds>(
		std::chrono::system_clock::now().time_since_epoch()
	).count();
}\n", "", ["<chrono>", "<ctime>"], []),

CppNativePlain("string2time", "
Double $F_1(string2time)(String s) {
	const std::time_get<char>& time_get = std::use_facet<std::time_get<char>>(std::locale());
	std::ios::iostate state;
	std::istringstream iss(toStdString(s));
	std::tm when;
  	time_get.get(iss, std::time_get<char>::iter_type(), iss, state, &when,
		date_time_format.data(), date_time_format.data() + date_time_format.length()
	);
	if (!(state & std::ios::ios_base::failbit)) {
		return mktime(&when) * 1000.0;
	} else {
		return 0.0;
	}
}\n", "", ["<chrono>", "<ctime>"], ["date_time_format"]),

CppNativePlain("time2string", "
String $F_1(time2string)(Double t) {
	const std::time_put<char>& time_put = std::use_facet <std::time_put<char>>(std::locale());
  	std::time_t timestamp = t / 1000.0;
	std::tm* time = std::localtime(&timestamp);
	std::ostringstream out;
	time_put.put(out, out, ' ', time, date_time_format.data(), date_time_format.data() + date_time_format.length());
	return makeString(out.str());
}\n", "", ["<chrono>", "<ctime>"], ["date_time_format"]),

CppNativePlain("gc", "Void $F_1(gc)() { }\n\n", "", [], []),

CppNativePlain("fail", "Void $F_1(fail)(String msg) {
	std::cerr << msg << std::flush;
	assert(false);
}\n", "", [], []),

CppNativePlain("fail0", "
template<typename T>
T $F_1(fail0)(String msg) {
	std::cerr << msg << std::flush;
	assert(false);
	return reinterpret_cast<T>(0);
}\n", "", [], []),

CppNativePlain("hostCall", "Flow $F_1(hostCall)(String name, Arr<Flow> args) {
	std::cerr << \"hostCall is not yet implemented in cpp3 backend\" << std::endl;
	assert(false);
	return 0;
}\n", "", [], []),

CppNativePlain("getApplicationPath", "String $F_1(getApplicationPath)() {
	return makeString(std::filesystem::current_path().u16string());
}\n", "", ["<filesystem>"], []),

CppNativePlain("getFileContent", "String $F_1(getFileContent)(String path) {
	string line;
	std::ifstream is(toStdString(path));
	if (is.is_open()) {
		std::stringstream buffer;
		buffer << is.rdbuf();
		if (is.good()) {
			return makeString(buffer.str());
		} else {
			return makeString();
		}
	} else {
		return makeString();
	}
}\n", "", ["<fstream>"], []),

CppNativePlain("setFileContent", "Bool $F_1(setFileContent)(String path, String content) {
	std::ofstream os(toStdString(path));
    os << toStdString(content);
	return os.good();
}\n", "", ["<fstream>"], []),

CppNativePlain("printCallstack", "Void $F_1(printCallstack)() {
	//std::cout << std::basic_stacktrace() << std::endl;
	std::cout << \"printCallstack is not yet implemented\" << std::endl;
}\n", "", [], []),

CppNativePlain("random", "Double $F_1(random)() {
	return static_cast<Double>(rand()) / (static_cast<Double>(RAND_MAX) + 1.0);
}\n", "", ["<cstdlib>"], []),

CppNativePlain("srand", "Void $F_1(srand)(Int seed) {
	srand(seed);
}\n", "", ["<cstdlib>"], []),

CppNativePlain("randomGenerator", "Fun<Double> $F_1(randomGenerator)(Int seed) {
}\n", "", [], []),

CppNativePlain("s2a", "Arr<Int> $F_1(s2a)(String s) {
	Arr<Int> ret(s->size());
	for (Int c : *s) {
		ret.arr->push_back(c);
	}
	return ret;
}\n", "", [], []),

CppNativePlain("string2utf8", "Arr<Int> $F_1(string2utf8)(String str) {
	std::string s = toStdString(str);
	Arr<Int> ret(s.size());
	for (Int c : s) {
		ret.arr->push_back(c);
	}
	return ret;
}\n", "", [], []),

CppNativePlain("createDirectory", "String $F_1(createDirectory)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::create_directory(*path, err);
	if (ret) {
		return makeString();
	} else {
		return makeString(err.message());
	}
}\n", "", ["<filesystem>"], []),

CppNativePlain("fileExists", "Bool $F_1(fileExists)(String path) {
	return std::filesystem::exists(*path);
}\n", "", ["<filesystem>"], []),

CppNativePlain("isDirectory", "Bool $F_1(isDirectory)(String path) {
	return std::filesystem::is_directory(std::filesystem::status(*path));
}\n", "", ["<filesystem>"], []),

CppNativePlain("deleteDirectory", "String $F_1(deleteDirectory)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(*path, err);
	if (ret) {
		return makeString();
	} else {
		return makeString(err.message());
	}
}\n", "", ["<filesystem>"], []),

CppNativePlain("deleteFile", "String $F_1(deleteFile)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(*path, err);
	if (ret) {
		return makeString();
	} else {
		return makeString(err.message());
	}
}\n", "", ["<filesystem>"], []),

CppNativePlain("readDirectory", "Arr<String> $F_1(readDirectory)(String path) {
	std::filesystem::directory_iterator dir_iterator(*path);
	Arr<String> dir_contents;
	for (auto& f : dir_iterator) {
		dir_contents.arr->push_back(makeString(f.path().u16string()));
	}
	return dir_contents;
}\n", "", ["<filesystem>"], []),

CppNativePlain("renameFile", "String $F_1(renameFile)(String old, String _new) {
	std::error_code err;
	std::filesystem::rename(*old, *_new, err);
	return makeString(err.message());
}\n", "", ["<filesystem>"], []),

CppNativePlain("resolveRelativePath", "String $F_1(resolveRelativePath)(String path) {
	return makeString(std::filesystem::absolute(*path));
}\n", "", ["<filesystem>"], []),

CppNativePlain("fileModified", "Double $F_1(fileModified)(String path) {
	std::filesystem::file_time_type mod1 = std::filesystem::last_write_time(*path);
	auto mod2 = std::chrono::file_clock::to_sys(mod1);
	auto mod3 = std::chrono::duration_cast<std::chrono::milliseconds>(mod2.time_since_epoch());
	return mod3.count();
}\n", "", ["<filesystem>", "<chrono>"], []),

CppNativePlain("fileSize", "Double $F_1(fileSize)(String path) {
	return std::filesystem::file_size(*path);
}\n", "", ["<filesystem>"], []),

CppNativePlain("stringbytes2int", "Int $F_1(stringbytes2int)(String s) {
	IntOrChars i(s->at(0), s->at(1));
	return i.int_;
}\n", "", [], []),

CppNativePlain("stringbytes2double", "Double $F_1(stringbytes2double)(String s) {
	DoubleOrChars d(s->at(0), s->at(1), s->at(2), s->at(3));
	return d.double_;
}\n", "", [], []),

CppNativePlain("fromBinary", 
"Flow $F_1(fromBinary)(String s, Flow defval, Fun<Union, String> fixup) {
	return s;
}\n", "$A_0", [], []),

CppNativePlain("toBinary", "
String $F_1(toBinary)(Flow value) {
	std::unordered_map<string, Int> structIdxs;
	std::vector<Ptr<Struct>> structDefs;

	std::vector<char16_t> os;
	// Placeholders for size of values - 32 bit int
	os.push_back(0);
	os.push_back(0);
	writeBinaryValue(value, os, structIdxs, structDefs);
	Int len = os.size();
	// Set length at the beginning
	os[0] = len & 0xffff;
	os[1] = len >> 16;

	if (structDefs.size() == 0) {
		writeCharValue(0xFFF7, os);
	} else {
		if (structDefs.size() > 65535) {
			writeCharValue(0xFFF9, os);
			writeBinaryInt32(structDefs.size(), os);
		} else {
			writeCharValue(0xFFF8, os);
			writeCharValue(structDefs.size(), os);
		}
	}
	for (Ptr<Struct> struct_def : structDefs) {
		writeCharValue(0xFFF8, os);
		writeCharValue(0x0002, os);
		writeCharValue(struct_def->size(), os);

		String s = struct_def->name();
		writeCharValue(0xFFFA, os);
		writeCharValue(s->size(), os);
		for (auto c : *s) {
			writeCharValue(c, os);
		}
	}
	return makeString(os.data(), os.size());
}\n", "", ["<unordered_map>"], ["to_binary"]),

CppNativePlain("createHttpServerNative", 
"Void $F_1(createHttpServerNative)(
	Int port,
	Bool isHttps,
	String pfxPath,
	String pfxPassword,
	Fun<Void> onOpen,
	Fun<
		String,
		String,
		String,
		Arr<Arr<String>>,
		Fun<Unit>,
		Fun<String, String>,
		Fun<String, Int, Bool>,
		Fun<Void, String, Arr<String>>
	> onMessage
): Nat<void> {
	// TODO: fill in the stub
	return Nat<void>();
}\n", "", [], []),

CppNativePlain("closeHttpServerNative", 
"Void $F_1(closeHttpServerNative)(Native server) {
	// TODO: fill in the stub
}\n", "", [], []),

CppNativePlain("makeHttpRequest", 
"Void $F_1(makeHttpRequest)(
	String url, 
	Bool post,
	Arr<Arr<String>> headers,
	Arr<Arr<String>> params,
	Fun<Void, String> onData,
	Fun<Void, String> onError, 
	Fun<Void, Int> onStatus) {
	// TODO: fill in the stub
	onStatus(500);
}\n", "", [], []),

CppNativePlain("httpCustomRequestNative", 
"Void $F_1(httpCustomRequestNative)(
	String url,
	String method,
	Arr<Arr<String>> headers,
	Arr<Arr<String>> parameters,
	String data,
	String responseEncoding,
	Fun<Int, String, Arr<Arr<String>>> onResponse,
	Bool async
) {
	// TODO: fill in the stub
}\n", "", [], []),

CppNativePlain("print", 
"Void $F_1(print)(String s) {
	std::cout << toStdString(*s);
}\n", "", [], []),

CppNativePlain("readUntil", 
"String $F_1(readUntil)(String str_pattern) {
	const char* pattern = toStdString(str_pattern).c_str();
	Int len = strlen(pattern);
	std::vector<char> line;
	char ch = '';
	Int pos = 0;
	while (cin.get(ch)) {
		line.push_back(ch);
		if (ch == pattern[pos]) {
			pos += 1;
			if (pos == len) {
				return makeString(std::string(line.data(), line.size());
			}
		} else {
			pos = 0;
		}
	}
}\n", "", [], []),

CppNativePlain("getFileContentBinary", "fun $F_1(getFileContentBinary)(name: String): String {
	try {
		val bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(name))
		return bytes.toString(Charsets.ISO_8859_1)
	} catch (e: java.io.IOException) {
		return \"\"
	}
}\n", "", [], []),

CppNativePlain("setFileContentBytes", "fun $F_1(setFileContentBytes)(name: String, data: String): Boolean {
	java.io.Writer? writer = null;
	try {
		writer = java.io.BufferedWriter(java.io.OutputStreamWriter(
			java.io.FileOutputStream(name), Charsets.ISO_8859_1)
		);
		val chars = CharArray(data.length, {i -> data.codePointAt(i).toChar() })
		writer.write(chars);
	} catch (ex: java.io.IOException) {
	} finally {
		try {
			writer.close();
			return true;
		} catch (_: java.lang.Exception) {
		}
	}
	return false
}\n", "", [], []),

CppNativePlain("execSystemProcess", "fun $F_1(execSystemProcess)(command: String, args: ArrayList<String>, cwd: String, onOut: (String) -> Unit, onErr: (String) -> Unit): Int {
	val cmd = arrayOf(*arrayOf(command), *args.toTypedArray())
	val runner = ProcessStarter(cmd, cwd, onOut, onErr, {_ -> })
	runner.run()
	return runner.waitFor()
}\n", "", [], []),

CppNativePlain("startProcess", "fun $F_1(startProcess)(command: String, args: ArrayList<String>, cwd: String, stdin: string, onExit: (int, String, String) -> Unit): Unit {
	val cmd = arrayOf(*arrayOf(command), *args.toTypedArray())
	var stdout = \"\"
	var stderr = \"\"
	val runner = ProcessStarter(cmd, cwd, 
		{out -> stdout = stdout + out}, 
		{err -> stderr = stderr + err}, 
		{code -> onExit(code, stdout, stderr)}
	)
	flow_threadpool.submit(runner)
	runner.writeStdin(stdin)
}\n", "", [], []),

CppNativePlain("runSystemProcess", "fun $F_1(runSystemProcess)(command: String, args: ArrayList<String>, cwd: String, onOut: (String) -> Unit, onErr: (String) -> Unit, onExit: (Int) -> Unit): ProcessStarter {
	val cmd = arrayOf(*arrayOf(command), *args.toTypedArray())
	val runner = ProcessStarter(cmd, cwd, onOut, onErr, onExit)
	flow_threadpool.submit(runner)
	return runner
}\n", "", [], []),

CppNativePlain("writeProcessStdin", "fun $F_1(writeProcessStdin)(proc: Any, arg: String): Unit {
	(proc as ProcessStarter).writeStdin(arg);
}\n", "", [], []),

CppNativePlain("availableProcessors", "fun $F_1(availableProcessors)(): Int {
	return java.lang.Runtime.getRuntime().availableProcessors()
}\n", "", [], []),

CppNativePlain("setThreadPoolSize", "fun $F_1(setThreadPoolSize)(threads: Int): Unit {
	flow_threadpool = java.util.concurrent.Executors.newFixedThreadPool(threads);
}\n", "", [], [])

]
