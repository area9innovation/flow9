[

Cpp3Native("makeHttpRequest", false,
"Void $F_1(makeHttpRequest)(
	String* url, 
	Bool post,
	Vec<Vec<String*>*>* headers,
	Vec<Vec<String*>*>* params,
	Fun<Void, String*>* onData,
	Fun<Void, String*>* onError, 
	Fun<Void, Int>* onStatus);
",
"Void $F_1(makeHttpRequest)(
	String* url, 
	Bool post,
	Vec<Vec<String*>*>* headers,
	Vec<Vec<String*>*>* params,
	Fun<Void, String*>* onData,
	Fun<Void, String*>* onError, 
	Fun<Void, Int>* onStatus) {
	fv::Tasks::RunAsync([url, post, headers, params, onData, onError, onStatus]() -> Task<void> {
		HttpSupport::Map headers_map = HttpSupport::pairs2map<HttpSupport::Map>(headers);
		decRc(headers);
		HttpSupport::Map params_map = HttpSupport::pairs2map<HttpSupport::Map>(params);
		decRc(params);
		fv::Response response;
		if (post) {
			response = co_await fv::Post(
				url->toStd(),
				fv::headers(headers_map),
				fv::url_kvs(params_map)
			);
		} else {
			response = co_await fv::Get(
				url->toStd(),
				fv::headers(headers_map),
				fv::url_kvs(params_map)
			);
		}
		decRc(url);
		Int code = response.HttpCode;
		if (code == 200) {
			onData->callRc(String::make(response.Content));
			decRc(onError);
		} else {
			onError->callRc(String::make(response.Content));
			decRc(onData);
		}
		onStatus->callRc(code);
		co_return;
	});
	return void_value;
}
", "", [], ["http"]),

Cpp3Native("httpCustomRequestNative", false,
"Void $F_1(httpCustomRequestNative)(
	String* url,
	String* method,
	Vec<Vec<String*>*>* headers,
	Vec<Vec<String*>*>* parameters,
	String* data,
	String* responseEncoding,
	Fun<Void, Int, String*, Vec<Vec<String*>*>*>* onResponse,
	Bool async
);
",
"Void $F_1(httpCustomRequestNative)(
	String* url,
	String* method,
	Vec<Vec<String*>*>* headers,
	Vec<Vec<String*>*>* params,
	String* data,
	String* responseEncoding,
	Fun<Void, Int, String*, Vec<Vec<String*>*>*>* onResponse,
	Bool async
) {
	fv::Tasks::RunAsync([url, method, headers, params, data, responseEncoding, onResponse]() -> Task<void> {
		HttpSupport::Map headers_map = HttpSupport::pairs2map<HttpSupport::Map>(headers);
		decRc(headers);
		HttpSupport::Map params_map = HttpSupport::pairs2map<HttpSupport::Map>(params);
		decRc(params);
		decRc(responseEncoding);
		std::string data_std = data->toStd();
		decRc(data);
		std::string method_std = method->toStd();
		decRc(method);
		std::string url_std = url->toStd();
		decRc(url);
		fv::Response response;
		if (method_std == \"POST\") {
			response = co_await fv::Post(
				url_std,
				fv::body_raw(\"application/raw\", data_std),
				fv::headers(headers_map),
				fv::url_kvs(params_map)
			);
		} else {
			response = co_await fv::Get(
				url_std,
				fv::headers(headers_map),
				fv::url_kvs(params_map)
			);
		}
		onResponse->callRc(
			response.HttpCode,
			String::make(response.Content),
			HttpSupport::map2pairs<HttpSupport::MapCI>(response.Headers)
		);
		co_return;
	});
	return void_value;
}
", "", [], ["http"])

]