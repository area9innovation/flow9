[

Cpp3Native("list2array", true,
"template<typename T> Vec<T>* $F_1(list2array)(Union* list);\n",
"template<typename T>
Vec<T>* $F_1(list2array)(Union* list) {
	Int count = 0;
	Union* l = list;
	while (l->structId() == $F_2(Cons)) {
		$F_0(Cons)<T>* cons = static_cast<$F_0(Cons)<T>*>(l);
		++count;
		l = cons->template get<1>();
	}
	T arr[count];
	l = list;
	Int i = count;
	while (i > 0) {
		$F_0(Cons)<T>* cons = static_cast<$F_0(Cons)<T>*>(l);
		arr[--i] = cons->template getRc1<0>();
		l = cons->template get<1>(); 
	}
	$F_1(decRcList)<T>(list);
	Vec<T>* ret = Vec<T>::make(count);
	for (i = 0; i < count; i++) {
		ret->pushBack(arr[i]);
	}
	return ret;
}\n", "", [], []),

Cpp3Native("list2string", false,
"String* $F_1(list2string)(Union* list);\n",
"String* $F_1(list2string)(Union* list) {
	Int len = 0;
	Int count = 0;
	Union* l = list;
	while (l->structId() == $F_2(Cons)) {
		$F_0(Cons)<String*>* cons = static_cast<$F_0(Cons)<String*>*>(l);
		len += cons->template get<0>()->size();
		++count;
		l = cons->template get<1>();
	}
	string strings[count];
	l = list;
	Int i = count;
	while (i > 0) {
		$F_0(Cons)<String*>* cons = static_cast<$F_0(Cons)<String*>*>(l);
		strings[--i] = cons->template get<0>()->str();
		l = cons->template get<1>(); 
	}
	$F_1(decRcList)<String>(list);
	string ret;
	ret.reserve(len);
	for (i = 0; i < count; i++) {
		ret.append(strings[i]);
	}
	return String::make(std::move(ret));
}\n", "", [], []),

Cpp3Native("decRcList", true,
"template<typename T> Void $F_1(decRcList)(Union* list);\n",
"template<typename T>
Void $F_1(decRcList)(Union* list) {
	Union* l = list;
	while (l->structId() == $F_2(Cons)) {
		$F_0(Cons)<T>* cons = static_cast<$F_0(Cons)<T>*>(l);
		l = cons->template get<1>();
		RcBase::RcCounter c = cons->template justDecrementRc<$F_0(Cons)<T>*>();
		if (c > 1) {
			break;
		} else {
			cons->template set<1>($F_0(EmptyList)::make<$F_0(EmptyList)*>());
			cons->template justDestroy<$F_0(Cons)<T>*>();
		}
	}
	return void_value;
}\n", "", [], [])

]