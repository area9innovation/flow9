[

Cpp3NativePlain("list2array", true,
"template<typename T> Arr<T>* $F_1(list2array)(AStr* list);\n",
"template<typename T>
Arr<T>* $F_1(list2array)(AStr* list) {
	Int count = 0;
	AStr* l = list;
	while ($F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l)) {
		++count;
		l = cons->$F_1(tail).ptr;
	}
	Arr<T>* ret = new Arr<T>(std::move(typename Arr<T>::Vect(count)));
	l = list;
	while ($F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l)) {
		ret->set(--count, Traits<T>::getter(cons->$F_1(head)));
		l = cons->$F_1(tail).ptr; 
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("list2string", false,
"String* $F_1(list2string)(AStr* list);\n",
"String* $F_1(list2string)(AStr* list) {
	Int len = 0;
	Int count = 0;
	AStr* l = list;
	while ($F_0(Cons)<String>* cons = dynamic_cast<$F_0(Cons)<String>*>(l)) {
		len += cons->$F_1(head)->str.size();
		++count;
		l = cons->$F_1(tail).ptr;
	}
	String* strings[count];
	l = list;
	Int i = count;
	while ($F_0(Cons)<String>* cons = dynamic_cast<$F_0(Cons)<String>*>(l)) {
		strings[--i] = cons->$F_1(head).ptr;
		l = cons->$F_1(tail).ptr; 
	}
	String* ret = new String();
	ret->str.reserve(len);
	for (int i = 0; i < count; i++) {
		ret->str.append(strings[i]->str);
	}
	return ret;
}\n", "", [], [])
]