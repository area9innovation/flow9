[

Cpp3NativePlain("list2array", true,
"template<typename T> Arr<T> $F_1(list2array)(Union list);\n",
"template<typename T>
Arr<T> $F_1(list2array)(Union list) {
	Int count = 0;
	AStruct* l = list.get();
	while (l->size() > 0) {
		$F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l);
		++count;
		l = cons->$F_1(tail).get();  
	}
	Arr<T> ret(std::make_shared<Array<T>>(std::move(std::vector<T>(count))));
	l = list.get();
	while (l->size() > 0) {
		$F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l);
		ret->vect[--count] = cons->$F_1(head);
		l = cons->$F_1(tail).get();  
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("list2string", false,
"String $F_1(list2string)(Union list);\n",
"String $F_1(list2string)(Union list) {
	Int len = 0;
	Int count = 0;
	String rv = makeString();
	AStruct* l = list.get();
	while (l->size() > 0) {
		$F_0(Cons)<String>* cons = dynamic_cast<$F_0(Cons)<String>*>(l);
		len += cons->$F_1(head)->size();
		++count;
		l = cons->$F_1(tail).get();  
	}
	String strings[count];
	l = list.get();
	Int i = count;
	while (l->size() > 0) {
		$F_0(Cons)<String>* cons = dynamic_cast<$F_0(Cons)<String>*>(l);
		strings[--i] = cons->$F_1(head);
		l = cons->$F_1(tail).get();  
	}
	String ret = makeString();
	ret->reserve(len);
	for (int i = 0; i < count; i++) {
		ret->append(*strings[i]);
	}
	return ret;
}\n", "", [], [])
]