[

Cpp3NativePlain("list2array", true,
"template<typename T> Arr<T> $F_1(list2array)(Flow list);\n",
"template<typename T>
Arr<T> $F_1(list2array)(Flow list) {
	Int count = 0;
	Flow l = list;
	while (Ptr<$F_0(Cons)<T>> cons = l.val.dynamicCast<$F_0(Cons)<T>>()) {
		++count;
		l = cons->$F_1(tail);
	}
	Arr<T> ret(makePtr<Array<T>>(std::move(std::vector<T>(count))));
	l = list;
	while (Ptr<$F_0(Cons)<T>> cons = l.val.dynamicCast<$F_0(Cons)<T>>()) {
		ret->vect[--count] = cons->$F_1(head);
		l = cons->$F_1(tail); 
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("list2string", false,
"String $F_1(list2string)(Flow list);\n",
"String $F_1(list2string)(Flow list) {
	Int len = 0;
	Int count = 0;
	String rv = makeString();
	Flow l = list;
	while (Ptr<$F_0(Cons)<String>> cons = l.val.dynamicCast<$F_0(Cons)<String>>()) {
		len += cons->$F_1(head)->size();
		++count;
		l = cons->$F_1(tail);
	}
	String strings[count];
	l = list;
	Int i = count;
	while (Ptr<$F_0(Cons)<String>> cons = l.val.dynamicCast<$F_0(Cons)<String>>()) {
		strings[--i] = cons->$F_1(head);
		l = cons->$F_1(tail); 
	}
	String ret = makeString();
	ret->reserve(len);
	for (int i = 0; i < count; i++) {
		ret->append(*strings[i]);
	}
	return ret;
}\n", "", [], [])
]