[

Cpp3NativePlain("list2array", true,
"template<typename T> Vec<T>* $F_1(list2array)(Union* list);\n",
"template<typename T>
Vec<T>* $F_1(list2array)(Union* list) {
	Int count = 0;
	Union* l = list;
	while ($F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l)) {
		++count;
		l = cons->template get<1>();
	}
	T arr[count];
	l = list;
	Int i = count;
	while ($F_0(Cons)<T>* cons = dynamic_cast<$F_0(Cons)<T>*>(l)) {
		arr[--i] = cons->template getRc1<0>();
		l = cons->template get<1>(); 
	}
	decRc(list);
	Vec<T>* ret = Vec<T>::make(count);
	for (i = 0; i < count; i++) {
		ret->pushBack(arr[i]);
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("list2string", false,
"String* $F_1(list2string)(Union* list);\n",
"String* $F_1(list2string)(Union* list) {
	Int len = 0;
	Int count = 0;
	Union* l = list;
	while ($F_0(Cons)<String*>* cons = dynamic_cast<$F_0(Cons)<String*>*>(l)) {
		len += cons->template get<0>()->size();
		++count;
		l = cons->template get<1>();
	}
	string strings[count];
	l = list;
	Int i = count;
	while ($F_0(Cons)<String*>* cons = dynamic_cast<$F_0(Cons)<String*>*>(l)) {
		strings[--i] = cons->template get<0>()->str();
		l = cons->template get<1>(); 
	}
	decRc(list);
	string ret;
	ret.reserve(len);
	for (i = 0; i < count; i++) {
		ret.append(strings[i]);
	}
	return String::make(std::move(ret));
}\n", "", [], [])
]