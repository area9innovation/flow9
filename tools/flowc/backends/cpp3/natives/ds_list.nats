[

Cpp3NativePlain("list2array", true,
"template<typename T> Vec<T> $F_1(list2array)(Union list);\n",
"template<typename T>
Vec<T> $F_1(list2array)(Union list) {
	Int count = 0;
	Union l = list;
	while (const $F_0(Cons)<T>* cons = dynamic_cast<const $F_0(Cons)<T>*>(l.ptr)) {
		++count;
		l = cons->$F_1(tail);
	}
	std::vector<T> ret(count);
	l = list;
	while (const $F_0(Cons)<T>* cons = dynamic_cast<const $F_0(Cons)<T>*>(l.ptr)) {
		ret[--count] = cons->$F_1(head);
		l = cons->$F_1(tail); 
	}
	return Vec<T>::make(std::move(ret));
}\n", "", [], []),

Cpp3NativePlain("list2string", false,
"String $F_1(list2string)(Union list);\n",
"String $F_1(list2string)(Union list) {
	Int len = 0;
	Int count = 0;
	Union l = list;
	while (const $F_0(Cons)<String>* cons = dynamic_cast<const $F_0(Cons)<String>*>(l.ptr)) {
		len += cons->$F_1(head)->str.size();
		++count;
		l = cons->$F_1(tail);
	}
	String strings[count];
	l = list;
	Int i = count;
	while (const $F_0(Cons)<String>* cons = dynamic_cast<const $F_0(Cons)<String>*>(l.ptr)) {
		strings[--i] = cons->$F_1(head).ptr;
		l = cons->$F_1(tail); 
	}
	string ret;
	ret.reserve(len);
	for (int i = 0; i < count; i++) {
		ret.append(strings[i]->str);
	}
	return String::make(std::move(ret));
}\n", "", [], [])
]