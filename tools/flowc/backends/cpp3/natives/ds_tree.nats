[

Cpp3NativePlain("lookupTree", true,
"template<typename T1, typename T2> Union* $F_1(lookupTree)(Union* tree, T1 key);\n",
"template <typename T1, typename T2>
Union* $F_1(lookupTree)(Union* tree, T1 key) {
	Union* tree0 = tree;
	while (true) {
		if (tree->structId() == $F_2(TreeNode)) {
			$F_0(TreeNode)<T1, T2>* node = static_cast<_TreeNode<T1, T2>*>(tree);
			T1 k = node->template get<0>();
			T2 v = node->template get<1>();
			Union* l = node->template get<2>();
			Union* r = node->template get<3>();
			Int c = compare(key, k);
			if (c < 0) {
				tree = l;
				continue;
			} else {
				if (c == 0) {
					decRc<Union*>(tree0);
					decRc<T1>(key);
					incRc<T2>(v);
					return $F_0(Some)<T2>::template make<$F_0(Some)<T2>*>(v);
				} else {
					tree = r;
					continue;
				}
			}
		} else {
			decRc<Union*>(tree0);
			decRc<T1>(key);
			return $F_0(None)::template make<$F_0(None)*>();
		}
	}
}",
"", [], []
)

]