[

Cpp3Native("lookupTree", true,
"template<typename T1, typename T2> Union* $F_1(lookupTree)(Union* tree, T1 key);\n",
"template <typename T1, typename T2>
inline Union* lookupTree(Union* tree, T1 key) {
	while (true) {
		if (tree->structId() == $F_2(TreeNode)) {
			$F_0(TreeNode)<T1, T2>* node = static_cast<$F_0(TreeNode)<T1, T2>*>(tree);
			Int c = compare(key, node->template get<0>());
			if (c < 0) {
				tree = node->template get<2>();
				continue;
			} else if (c > 0) {
				tree = node->template get<3>();
				continue;
			} else {
				T2 v = node->template getRc1<1>();
				return $F_0(Some)<T2>::template make<$F_0(Some)<T2>*>(v);
			}
		} else {
			return $F_0(None)::template make<$F_0(None)*>();
		}
	}
}

template <typename T1, typename T2>
inline Union* $F_1(lookupTree)(Union* tree, T1 key) {
	Union* t = tree;
	while (true) {
		if (t->structId() == $F_2(TreeNode)) {
			$F_0(TreeNode)<T1, T2>* node = static_cast<$F_0(TreeNode)<T1, T2>*>(t);
			Int c = compare(key, node->template get<0>());
			if (c < 0) {
				t = node->template get<2>();
				continue;
			} else if (c > 0) {
				t = node->template get<3>();
				continue;
			} else {
				T2 v = node->template getRc1<1>();
				decRc<Union*>(tree);
				decRc<T1>(key);
				return $F_0(Some)<T2>::template make<$F_0(Some)<T2>*>(v);
			}
		} else {
			decRc<Union*>(tree);
			decRc<T1>(key);
			return $F_0(None)::template make<$F_0(None)*>();
		}
	}
}
",
Cpp3Inline(true, "lookupTree<$T_0, $T_1>($A_0, $A_1)"), [], []
),

Cpp3Native("treeDepth", true,
"template<typename T1, typename T2> Int $F_1(treeDepth)(Union* tree);\n",
"template <typename T1, typename T2>
inline Int treeDepth(Union* tree) {
	return (tree->structId() == $F_2(TreeNode)) ? static_cast<$F_0(TreeNode)<T1, T2>*>(tree)->template get<4>() : 0;
}

template <typename T1, typename T2>
inline Int $F_1(treeDepth)(Union* tree) {
	Int depth = (tree->structId() == $F_2(TreeNode)) ? static_cast<$F_0(TreeNode)<T1, T2>*>(tree)->template get<4>() : 0;
	decRc<Union*>(tree);
	return depth;
}
",
Cpp3Inline(true, "treeDepth<$T_0, $T_1>($A_0)"), [], []
),


Cpp3Native("treeUpdateValue", true,
"template<typename T1, typename T2> Union* $F_1(treeUpdateValue)(Union* tree, T1 key, Fun<T2, T1, T2>* update);\n",
"template <typename T1, typename T2>
Union* $F_1(treeUpdateValue)(Union* tree, T1 key, Fun<T2, T1, T2>* update) {
	Union* n = tree; 
	$F_0(TreeNode)<T1, T2>* node = nullptr;
	while (true) {
		if (n->structId() == $F_2(TreeNode)) {
			node = static_cast<$F_0(TreeNode)<T1, T2>*>(n);
			Int c = compare(key, node->template get<0>());
			if (c < 0) {
				n = node->template get<2>();
				continue;
			} else if (c > 0) {
				n = node->template get<3>();
				continue;
			} else {
				break;
			}
		} else {
			node = nullptr;
			break;
		}
	}
	if (node) {
		if (node->isUnit()) {
			// Updating the value in-place
			T2 old_val = node->template get<1>();
			T2 new_val = update->call(key, old_val);
			decRc<Fun<T2, T1, T2>*>(update);
			node->template set<1>(new_val);
			return tree;
		} else {
			T2 old_val = node->template getRc1<1>();
			incRc<T1>(key);
			T2 new_val = update->call(key, old_val);
			decRc<Fun<T2, T1, T2>*>(update);
			return $F_1(setTree)(tree, key, new_val);
		}
	} else {
		decRc<T1>(key);
		decRc<Fun<T2, T1, T2>*>(update);
		return tree;
	}
}",
Cpp3Inline(true, ""), [], []
),



Cpp3Native("setTree", true,
"template<typename T1, typename T2> Union* $F_1(setTree)(Union* tree, T1 key, T2 val);\n",
"template <typename T1, typename T2>
inline $F_0(TreeNode)<T1, T2>* treeLeftRotationUnit($F_0(TreeNode)<T1, T2>* node) {
	using Node = $F_0(TreeNode)<T1, T2>;
	Union* left = node->template get<2>();
	Union* right = node->template get<3>();
	Node* node_right = static_cast<Node*>(right);
	Union* cleft = node_right->template getRc1<2>();
	Union* cright = node_right->template get<3>();
	Int new_right_depth = std::max(treeDepth<T1, T2>(left), treeDepth<T1, T2>(cleft)) + 1;
	Int ret_depth = std::max(new_right_depth, treeDepth<T1, T2>(cright)) + 1;
	if (node_right->isUnit()) {
		// here we use plain set, because otherwise `setRc1` destroys the `node_right` itself
		node->template set<3>(cleft);
		node->template set<4>(new_right_depth);
		node_right->template setRc1<2>(node);
		node_right->template setRc1<4>(ret_depth);
		return node_right;
	} else {
		incRc(cright);
		node->template setRc1<3>(cleft);
		node->template set<4>(new_right_depth);
		return Node::template make<Node*>(
			node_right->template getRc1<0>(), 
			node_right->template getRc1<1>(), 
			node, cright, ret_depth
		);
	}
}

template <typename T1, typename T2>
inline $F_0(TreeNode)<T1, T2>* treeLeftRotation($F_0(TreeNode)<T1, T2>* node) {
	if (node->isUnit()) {
		return treeLeftRotationUnit(node);
	} else {
		using Node = $F_0(TreeNode)<T1, T2>;
		T1 k = node->template getRc1<0>();
		T2 v = node->template getRc1<1>();
		Union* left = node->template getRc1<2>();
		Union* right = node->template get<3>();
		Node* node_right = static_cast<Node*>(right);
		T1 ck = node_right->template getRc1<0>();
		T2 cv = node_right->template getRc1<1>();
		Union* cleft = node_right->template getRc1<2>();
		Union* cright = node_right->template getRc1<3>();
		Int new_right_depth = std::max(treeDepth<T1, T2>(left), treeDepth<T1, T2>(cleft)) + 1;
		Int ret_depth = std::max(new_right_depth, treeDepth<T1, T2>(cright)) + 1;
		Node* new_right = Node::template make<Node*>(k, v, left, cleft, new_right_depth);
		decRc<Node*>(node);
		return Node::template make<Node*>(ck, cv, new_right, cright, ret_depth);
	}
}

template <typename T1, typename T2>
inline $F_0(TreeNode)<T1, T2>* treeRightRotationUnit($F_0(TreeNode)<T1, T2>* node) {
	using Node = $F_0(TreeNode)<T1, T2>;
	Union* left = node->template get<2>();
	Union* right = node->template get<3>();
	Node* node_left = static_cast<Node*>(left);
	Union* cleft = node_left->template get<2>();
	Union* cright = node_left->template getRc1<3>();
	Int new_left_depth = std::max(treeDepth<T1, T2>(cright), treeDepth<T1, T2>(right)) + 1;
	Int ret_depth = std::max(treeDepth<T1, T2>(cleft), new_left_depth) + 1;
	if (node_left->isUnit()) {
		// here we use plain set, because otherwise `setRc1` destroys the `node_left` itself
		node->template set<2>(cright);
		node->template set<4>(new_left_depth);
		node_left->template setRc1<3>(node);
		node_left->template setRc1<4>(ret_depth);
		return node_left;
	} else {
		incRc<Union*>(cleft);
		node->template setRc1<2>(cright);
		node->template set<4>(new_left_depth);
		return Node::template make<Node*>(
			node_left->template getRc1<0>(),
			node_left->template getRc1<1>(),
			cleft, node, ret_depth
		);
	}
}

template <typename T1, typename T2>
inline $F_0(TreeNode)<T1, T2>* treeRightRotation($F_0(TreeNode)<T1, T2>* node) {
	if (node->isUnit()) {
		return treeRightRotationUnit(node);
	} else {
		using Node = $F_0(TreeNode)<T1, T2>;
		T1 k = node->template getRc1<0>();
		T2 v = node->template getRc1<1>();
		Union* left = node->template get<2>();
		Union* right = node->template getRc1<3>();
		Node* node_left = static_cast<Node*>(left);
		T1 ck = node_left->template getRc1<0>();
		T2 cv = node_left->template getRc1<1>();
		Union* cleft = node_left->template getRc1<2>();
		Union* cright = node_left->template getRc1<3>();
		Int new_left_depth = std::max(treeDepth<T1, T2>(cright), treeDepth<T1, T2>(right)) + 1;
		Int ret_depth = std::max(treeDepth<T1, T2>(cleft), new_left_depth) + 1;
		Node* new_left = Node::template make<Node*>(k, v, cright, right, new_left_depth);
		decRc(node);
		return Node::template make<Node*>(ck, cv, cleft, new_left, ret_depth);
	}
}

template <typename T1, typename T2>
inline $F_0(TreeNode)<T1, T2>* rebalanceTreeUnit($F_0(TreeNode)<T1, T2>* n) {
	using Node = $F_0(TreeNode)<T1, T2>;
	Union* left = n->template get<2>();
	Union* right = n->template get<3>();
	Int orig_depth = n->template get<4>();
	Int leftDepth = treeDepth<T1, T2>(left);
	Int rightDepth = treeDepth<T1, T2>(right);
	Int balance = (leftDepth - rightDepth);
	Int calc_depth = std::max(leftDepth, rightDepth) + 1;
	if (balance == -1 || balance == 0 || balance == 1) {
		if (calc_depth == orig_depth) {
			return n;
		} else {
			n->template set<4>(calc_depth);
			return n;
		}
	} else {
		if (balance < 0) {
			if (right->structId() == $F_2(TreeEmpty)) {
				if (calc_depth == orig_depth) {
					return n;
				} else {
					n->template set<4>(calc_depth);
					return n;
				}
			} else {
				Node* node_right = static_cast<Node*>(right);
				Union* rl = node_right->template get<2>();
				Union* rr = node_right->template get<3>();
				if (treeDepth<T1, T2>(rl) < treeDepth<T1, T2>(rr)) {
					n->template set<4>(calc_depth);
				} else {
					incRc<Union*>(right);
					Union* rotated = treeRightRotation<T1, T2>(node_right);
					Int depth_rebalanced = std::max(treeDepth<T1, T2>(left), treeDepth<T1, T2>(rotated)) + 1;
					n->template setRc1<3>(rotated);
					n->template set<4>(depth_rebalanced);
				}
				return treeLeftRotationUnit<T1, T2>(n);
			}
		} else {
			if (left->structId() == $F_2(TreeEmpty)) {
				if (calc_depth == orig_depth) {
					return n;
				} else {
					n->template set<4>(calc_depth);
					return n;
				}
			} else {
				Node* node_left = static_cast<Node*>(left);
				Union* ll = node_left->template get<2>();
				Union* lr = node_left->template get<3>();
				if (treeDepth<T1, T2>(ll) < treeDepth<T1, T2>(lr)) {
					incRc<Union*>(left);
					Union* rotated = treeLeftRotation<T1, T2>(node_left);
					Int depth_rebalanced = std::max(treeDepth<T1, T2>(rotated), treeDepth<T1, T2>(right)) + 1;
					n->template setRc1<2>(rotated);
					n->template set<4>(depth_rebalanced);
				} else {
					n->template set<4>(calc_depth);
				}
				return treeRightRotationUnit<T1, T2>(n);
			}
		}
	}
}

template <typename T1, typename T2>
inline $F_0(TreeNode)<T1, T2>* rebalanceTreeNodes(T1 key, T2 val, Union* left, Union* right) {
	using Node = $F_0(TreeNode)<T1, T2>;
	Int leftDepth = treeDepth<T1, T2>(left);
	Int rightDepth = treeDepth<T1, T2>(right);
	Int balance = (leftDepth - rightDepth);
	Int depth = std::max(leftDepth, rightDepth) + 1;
	if (balance == -1 || balance == 0 || balance == 1) {
		return Node::template make<Node*>(key, val, left, right, depth);
	} else {
		if (balance < 0) {
			if (right->structId() == $F_2(TreeEmpty)) {
				return Node::template make<Node*>(key, val, left, right, depth);
			} else {
				Node* node_right = static_cast<Node*>(right);
				Union* rl = node_right->template get<2>();
				Union* rr = node_right->template get<3>();
				if (treeDepth<T1, T2>(rl) < treeDepth<T1, T2>(rr)) {
					return treeLeftRotationUnit<T1, T2>(
						Node::template make<Node*>(key, val, left, right, depth)
					);
				} else {
					Union* rotated = treeRightRotation<T1, T2>(node_right);
					Int depth_rebalanced = std::max(treeDepth<T1, T2>(left), treeDepth<T1, T2>(rotated)) + 1;
					return treeLeftRotationUnit<T1, T2>(
						Node::template make<Node*>(key, val, left, rotated, depth_rebalanced)
					);
				}
			}
		} else {
			if (left->structId() == $F_2(TreeEmpty)) {
				return Node::template make<Node*>(key, val, left, right, depth);
			} else {
				Node* node_left = static_cast<Node*>(left);
				Union* ll = node_left->template get<2>();
				Union* lr = node_left->template get<3>();
				if (treeDepth<T1, T2>(ll) < treeDepth<T1, T2>(lr)) {
					Union* rotated = treeLeftRotation<T1, T2>(node_left);
					Int depth_rebalanced = std::max(treeDepth<T1, T2>(rotated), treeDepth<T1, T2>(right)) + 1;
					return treeRightRotationUnit<T1, T2>(
						Node::template make<Node*>(key, val, rotated, right, depth_rebalanced)
					);
				} else {
					return treeRightRotationUnit<T1, T2>(
						Node::template make<Node*>(key, val, left, right, depth)
					);
				}
			}
		}
	}
}

template <typename T1, typename T2>
Union* $F_1(setTree)(Union* tree, T1 key, T2 val) {
	bool is_unit = true;
	Union* tree0 = tree;
	using Node = $F_0(TreeNode)<T1, T2>;
	$F_0(TreeEmpty)* emptytree = $F_0(TreeEmpty)::template make<$F_0(TreeEmpty)*>();
	// Depth of 36 is enough to store up to 68 billion of elements.
	std::pair<Int, Node*> path[36];
	Int path_len = 0;
	while (true) {
		is_unit = is_unit && tree->isUnit();
		if (tree->structId() == $F_2(TreeNode)) {
			$F_0(TreeNode)<T1, T2>* node = static_cast<$F_0(TreeNode)<T1, T2>*>(tree);
			Int c = compare(key, node->template get<0>());
			if (c < 0) {
				tree = node->template get<2>();
				path[path_len++] = std::pair(c, node);
				continue;
			} else if (c > 0) {
				tree = node->template get<3>();
				path[path_len++] = std::pair(c, node);
				continue;
			} else {
				if (is_unit) {
					decRc(key);
					node->template setRc1<1>(val);
					return tree0;
				} else {
					path[path_len++] = std::pair(c, Node::template make<Node*>(
						key, val,
						node->template getRc1<2>(),
						node->template getRc1<3>(),
						node->template get<4>()
					));
				}
				break;
			}
		} else {
			path[path_len++] = std::pair(0, Node::template make<Node*>(key, val, emptytree, emptytree, 1));
			break;
		}
	}
	Node* ret = path[--path_len].second;
	if (is_unit) {
		while (path_len-- > 0) {
			Node* n = path[path_len].second;
			if (path[path_len].first < 0) {
				n->template set<2>(ret);
				ret = rebalanceTreeUnit<T1, T2>(n);
			} else {
				n->template set<3>(ret);
				ret = rebalanceTreeUnit<T1, T2>(n);
			}
		}
	} else {
		while (path_len-- > 0) {
			Node* n = path[path_len].second;
			if (path[path_len].first < 0) {
				ret = rebalanceTreeNodes<T1, T2>(
					n->template getRc1<0>(), 
					n->template getRc1<1>(), 
					ret, 
					n->template getRc1<3>()
				);
			} else {
				ret = rebalanceTreeNodes<T1, T2>(
					n->template getRc1<0>(),
					n->template getRc1<1>(),
					n->template getRc1<2>(),
					ret
				);
			}
		}
		decRc<Union*>(tree0);
	}
	return ret;
}
",
Cpp3Inline(true, ""), [], [])

]