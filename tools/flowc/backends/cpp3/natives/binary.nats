[

Cpp3NativePlain("stringbytes2int", "Int $F_1(stringbytes2int)(String s) {
	IntOrChars i(s->at(0), s->at(1));
	return i.int_;
}\n", "", [], []),

Cpp3NativePlain("stringbytes2double", "Double $F_1(stringbytes2double)(String s) {
	DoubleOrChars d(s->at(0), s->at(1), s->at(2), s->at(3));
	return d.double_;
}\n", "", [], []),

Cpp3NativePlain("fromBinary", 
"Flow $F_1(fromBinary)(String s, Flow defval, Fun<Union, String> fixup) {
	return s;
}\n", "$A_0", [], []),

Cpp3NativePlain("toBinary", "
String $F_1(toBinary)(Flow value) {
	std::unordered_map<string, Int> structIdxs;
	std::vector<Ptr<Struct>> structDefs;

	std::vector<char16_t> os;
	// Placeholders for size of values - 32 bit int
	os.push_back(0);
	os.push_back(0);
	writeBinaryValue(value, os, structIdxs, structDefs);
	Int len = os.size();
	// Set length at the beginning
	os[0] = len & 0xffff;
	os[1] = len >> 16;

	if (structDefs.size() == 0) {
		writeCharValue(0xFFF7, os);
	} else {
		if (structDefs.size() > 65535) {
			writeCharValue(0xFFF9, os);
			writeBinaryInt32(structDefs.size(), os);
		} else {
			writeCharValue(0xFFF8, os);
			writeCharValue(structDefs.size(), os);
		}
	}
	for (Ptr<Struct> struct_def : structDefs) {
		writeCharValue(0xFFF8, os);
		writeCharValue(0x0002, os);
		writeCharValue(struct_def->size(), os);

		String s = struct_def->name();
		writeCharValue(0xFFFA, os);
		writeCharValue(s->size(), os);
		for (auto c : *s) {
			writeCharValue(c, os);
		}
	}
	return makeString(os.data(), os.size());
}\n", "", [Cpp3Std(["<unordered_map>"], [])], ["to_binary"])

]