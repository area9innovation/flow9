[

Cpp3NativePlain("length",
"template<typename T>
inline Int $F_1(length)(Arr<T> a) { 
	return static_cast<Int>(a.arr->size()); 
}\n",
"$A_0.arr->size()", [], []
),

Cpp3NativePlain("concat",
"template<typename T>
inline Arr<T> $F_1(concat)(Arr<T> a1, Arr<T> a2) {
	Arr<T> ret = Arr<T>(a1.arr->size() + a2.arr->size());
	for(T x : *a1.arr) ret.arr->push_back(x);
	for(T x : *a2.arr) ret.arr->push_back(x);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("fold", 
"template<typename T, typename V>
inline V $F_1(fold)(Arr<T> a, V v, Fun<V, V, T> fn) {
	for (T x : *a.arr) v = fn(v, x);
	return v;
}\n", "", [], []),

Cpp3NativePlain("foldi", 
"template<typename T, typename V>
inline V $F_1(foldi)(Arr<T> a, V v, Fun<V, Int, V, T> fn) {
	Int i = 0;
	for (T x : *a.arr) v = fn(i++, v, x);
	return v;
}\n", "", [], []),

Cpp3NativePlain("map", 
"template<typename T, typename V>
inline Arr<V> $F_1(map)(Arr<T> a, Fun<V, T> fn) {
	Arr<V> ret(a.arr->size());
	for (T x : *a.arr) ret.arr->push_back(fn(x));
	return ret;
}\n", "", [], []),

Cpp3NativePlain("mapi", 
"template<typename T, typename V>
inline Arr<V> $F_1(mapi)(Arr<T> a, Fun<V, Int, T> fn) {
	Arr<V> ret(a.arr->size());
	Int i = 0;
	for (T x : *a.arr) ret.arr->push_back(fn(i++, x));
	return ret;
}\n", "", [], []),

Cpp3NativePlain("filter", 
"template<typename T>
inline Arr<T> $F_1(filter)(Arr<T> a, Fun<Bool, T> fn) {
	Arr<T> ret(a.arr->size());
	for (T x : *a.arr) if (fn(x)) ret.arr->push_back(x);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("replace", 
"template<typename T>
Arr<T> $F_1(replace)(Arr<T> a, Int i, T v) {
	Arr<T> ret(*a.arr);
	(*ret.arr)[i] = v; 
	return ret; 
}\n", "", [], []),

Cpp3NativePlain("subrange", 
"template<typename T>
Arr<T> $F_1(subrange)(Arr<T> a, Int i, Int len) {
	Arr<T> ret(len);
	for (Int j = 0; j < len; ++ j) {
		ret.arr->push_back(a.arr->at(i + j));
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("enumFromTo", 
"Arr<Int> $F_1(enumFromTo)(Int beg, Int end) {
	if (beg > end) {
		return Arr<Int>();
	} else {
		Arr<Int> ret(end - beg + 1);
		for (Int i = 0; i < end - beg + 1; ++i) {
			ret.arr->push_back(beg + i);
		}
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("iter", 
"template<typename T>
Void $F_1(iter)(Arr<T> a, Fun<Void, T> fn) { 
	for (T x : *a.arr) fn(x);
}\n", "", [], []),

Cpp3NativePlain("iteri", 
"template<typename T>
Void $F_1(iteri)(Arr<T> a, Fun<Void, Int, T> fn) {
	Int i = 0;
	for (T x : *a.arr) fn(i++, x);
}\n", "", [], []),

Cpp3NativePlain("iteriUntil", 
"template<typename T>
Int $F_1(iteriUntil)(Arr<T> a, Fun<Bool, Int, T> fn) {
	for (Int i = 0; i < a.arr->size(); ++ i) {
		if (fn(i, a.arr->at(i))) return i;
	}
	return a.arr->size();
}\n", "", [], []),
	
Cpp3NativePlain("iterUntil", 
"template<typename T>
Int $F_1(iterUntil)(Arr<T> a, Fun<Bool, T> fn) {
	for (Int i = 0; i < a.arr->size(); ++ i)) {
		if (fn(a.arr->at(i))) return i;
	}
	return a.arr->size();
}\n", "", [], [])

]