[

Cpp3NativePlain("length", true, 
"template<typename T> Int $F_1(length)(Arr<T>* a);\n",
"template<typename T>
Int $F_1(length)(Arr<T>* a) { 
	return static_cast<Int>(a->vect.size()); 
}\n",
"static_cast<Int>($A_0->vect.size())", [], []
),

Cpp3NativePlain("concat", true,
"template<typename T> Arr<T>* $F_1(concat)(Arr<T>* a1, Arr<T>* a2);\n",
"template<typename T>
Arr<T>* $F_1(concat)(Arr<T>* a1, Arr<T>* a2) {
	Arr<T>* ret = new Arr<T>(a1->size() + a2->size());
	for(typename Traits<T>::RVal x : *a1) {
		ret->push_back(x);
	}
	for(typename Traits<T>::RVal x : *a2) {
		ret->push_back(x);
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("fold", true,
"template<typename T, typename V> typename Traits<V>::RVal $F_1(fold)(Arr<T>* a, typename Traits<V>::RVal v, Fun<V, V, T>* fn);\n",
"template<typename T, typename V>
typename Traits<V>::RVal $F_1(fold)(Arr<T>* a, typename Traits<V>::RVal v, Fun<V, V, T>* fn) {
	for (typename Traits<T>::RVal x : *a) {
		Traits<V>::setter(v, fn->call(v, x));
		//v = fn->call(v, x);
	}
	return v;
}\n", "", [], []),

Cpp3NativePlain("foldi", true,
"template<typename T, typename V> typename Traits<V>::RVal $F_1(foldi)(Arr<T>* a, typename Traits<V>::RVal v, Fun<V, Int, V, T>* fn);\n",
"template<typename T, typename V>
typename Traits<V>::RVal $F_1(foldi)(Arr<T>* a, typename Traits<V>::RVal v, Fun<V, Int, V, T>* fn) {
	Int i = 0;
	for (typename Traits<T>::RVal x : *a) {
		Traits<V>::setter(v, fn->call(i++, v, x));
		//v = fn->call(i++, v, x);
	}
	return v;
}\n", "", [], []),

Cpp3NativePlain("map", true,
"template<typename T, typename V> Arr<V>* $F_1(map)(Arr<T>* a, Fun<V, T>* fn);\n",
"template<typename T, typename V>
Arr<V>* $F_1(map)(Arr<T>* a, Fun<V, T>* fn) {
	Int s = a->size();
	Arr<V>* ret = new Arr<V>(a->size());
	for (typename Traits<T>::RVal x : *a) {
		ret->push_back(fn->call(x));
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("mapi", true,
"template<typename T, typename V> Arr<V>* $F_1(mapi)(Arr<T>* a, Fun<V, Int, T>* fn);\n",
"template<typename T, typename V>
Arr<V>* $F_1(mapi)(Arr<T>* a, Fun<V, Int, T>* fn) {
	Arr<V>* ret = new Arr<T>(a->size());
	Int i = 0;
	for (typename Traits<T>::RVal x : *a) {
		ret->push_back(fn->call(i++, x));
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("filter", true,
"template<typename T> Arr<T>* $F_1(filter)(Arr<T>* a, Fun<Bool, T>* fn);\n",
"template<typename T>
Arr<T>* $F_1(filter)(Arr<T>* a, Fun<Bool, T>* fn) {
	Arr<T>* ret = new Arr<T>(a->size());
	for (typename Traits<T>::RVal x : *a) {
		if (fn->call(x)) {
			ret->vect.push_back(x);
		}
	}
	ret->vect.shrink_to_fit();
	return ret;
}\n", "", [], []),

Cpp3NativePlain("replace", true,
"template<typename T> Arr<T>* $F_1(replace)(Arr<T>* a, Int i, typename Traits<T>::RVal v);\n",
"template<typename T>
Arr<T>* $F_1(replace)(Arr<T>* a, Int i, typename Traits<T>::RVal v) {
	Arr<T>* ret = new Arr<T>(a->vect);
	if (i < a->size()) {
		Traits<T>::setter(ret->vect[i], v); 
	} else if (i == a->size()) {
		ret->push_back(v);
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("subrange", true,
"template<typename T> Arr<T>* $F_1(subrange)(Arr<T>* a, Int i, Int len);\n",
"template<typename T>
Arr<T>* $F_1(subrange)(Arr<T>* a, Int i, Int len) {
	if (len < 0) {
		return new Arr<T>();
	} else {
		Arr<T>* ret = new Arr<T>(len);
		for (Int j = 0; j < len; ++ j) {
			ret->push_back(a->get(i + j));
		}
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("enumFromTo", false,
"Arr<Int>* $F_1(enumFromTo)(Int beg, Int end);\n",
"Arr<Int>* $F_1(enumFromTo)(Int beg, Int end) {
	if (beg > end) {
		return new Arr<Int>();
	} else {
		Arr<Int>* ret = new Arr<Int>(end - beg + 1);
		for (Int i = 0; i < end - beg + 1; ++i) {
			ret->push_back(beg + i);
		}
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("iter", true,
"template<typename T> Void $F_1(iter)(Arr<T>* a, Fun<Void, T>* fn);\n",
"template<typename T>
Void $F_1(iter)(Arr<T>* a, Fun<Void, T>* fn) { 
	for (typename Traits<T>::RVal x : *a) {
		fn->call(x);
	}
}\n", "", [], []),

Cpp3NativePlain("iteri", true,
"template<typename T> Void $F_1(iteri)(Arr<T>* a, Fun<Void, Int, T>* fn);\n",
"template<typename T>
Void $F_1(iteri)(Arr<T>* a, Fun<Void, Int, T>* fn) {
	Int i = 0;
	for (typename Traits<T>::RVal x : *a) {
		fn->call(i++, x);
	}
}\n", "", [], []),

Cpp3NativePlain("iteriUntil", true,
"template<typename T> Int $F_1(iteriUntil)(Arr<T>* a, Fun<Bool, Int, T>* fn);\n",
"template<typename T>
Int $F_1(iteriUntil)(Arr<T>* a, Fun<Bool, Int, T>* fn) {
	for (Int i = 0; i < static_cast<Int>(a->size()); ++ i) {
		if (fn->call(i, a->get(i))) {
			return i;
		}
	}
	return static_cast<Int>(a->size());
}\n", "", [], []),
	
Cpp3NativePlain("iterUntil", true,
"template<typename T> Int $F_1(iterUntil)(Arr<T>* a, Fun<Bool, T>* fn);\n",
"template<typename T>
Int $F_1(iterUntil)(Arr<T>* a, Fun<Bool, T>* fn) {
	for (Int i = 0; i < static_cast<Int>(a->size()); ++ i)) {
		if (fn->call(a->get(i))) {
			return i;
		}
	}
	return static_cast<Int>(a->size());
}\n", "", [], [])

]