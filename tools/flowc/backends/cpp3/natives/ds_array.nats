[

Cpp3NativePlain("length", true, 
"template<typename T> Int $F_1(length)(Arr<T> a);\n",
"template<typename T>
Int $F_1(length)(Arr<T> a) { 
	return static_cast<Int>(a->size()); 
}\n",
"static_cast<Int>($A_0->size())", [], []
),

Cpp3NativePlain("concat", true,
"template<typename T> Arr<T> $F_1(concat)(Arr<T> a1, Arr<T> a2);\n",
"template<typename T>
Arr<T> $F_1(concat)(Arr<T> a1, Arr<T> a2) {
	Arr<T> ret(a1->size() + a2->size());
	for(T x : a1->vect) ret->vect.push_back(x);
	for(T x : a2->vect) ret->vect.push_back(x);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("fold", true,
"template<typename T, typename V> V $F_1(fold)(Arr<T> a, V v, Fun<V, V, T> fn);\n",
"template<typename T, typename V>
V $F_1(fold)(Arr<T> a, V v, Fun<V, V, T> fn) {
	for (T x : a->vect) v = fn(v, x);
	return v;
}\n", "", [], []),

Cpp3NativePlain("foldi", true,
"template<typename T, typename V> V $F_1(foldi)(Arr<T> a, V v, Fun<V, Int, V, T> fn);\n",
"template<typename T, typename V>
V $F_1(foldi)(Arr<T> a, V v, Fun<V, Int, V, T> fn) {
	Int i = 0;
	for (T x : a->vect) v = fn(i++, v, x);
	return v;
}\n", "", [], []),

Cpp3NativePlain("map", true,
"template<typename T, typename V> Arr<V> $F_1(map)(Arr<T> a, Fun<V, T> fn);\n",
"template<typename T, typename V>
Arr<V> $F_1(map)(Arr<T> a, Fun<V, T> fn) {
	Arr<V> ret(a->size());
	for (T x : a->vect) ret->vect.push_back(fn(x));
	return ret;
}\n", "", [], []),

Cpp3NativePlain("mapi", true,
"template<typename T, typename V> Arr<V> $F_1(mapi)(Arr<T> a, Fun<V, Int, T> fn);\n",
"template<typename T, typename V>
Arr<V> $F_1(mapi)(Arr<T> a, Fun<V, Int, T> fn) {
	Arr<V> ret(a->size());
	Int i = 0;
	for (T x : a->vect) ret->vect.push_back(fn(i++, x));
	return ret;
}\n", "", [], []),

Cpp3NativePlain("filter", true,
"template<typename T> Arr<T> $F_1(filter)(Arr<T> a, Fun<Bool, T> fn);\n",
"template<typename T>
Arr<T> $F_1(filter)(Arr<T> a, Fun<Bool, T> fn) {
	Arr<T> ret(a->size());
	for (T x : a->vect) if (fn(x)) ret->vect.push_back(x);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("replace", true,
"template<typename T> Arr<T> $F_1(replace)(Arr<T> a, Int i, T v);\n",
"template<typename T>
Arr<T> $F_1(replace)(Arr<T> a, Int i, T v) {
	Arr<T> ret(a->copy());
	if (i < a->size()) {
		ret->vect[i] = v; 
	} else if (i == a->size()) {
		ret->vect.push_back(v);
	}
	return ret; 
}\n", "", [], []),

Cpp3NativePlain("subrange", true,
"template<typename T> Arr<T> $F_1(subrange)(Arr<T> a, Int i, Int len);\n",
"template<typename T>
Arr<T> $F_1(subrange)(Arr<T> a, Int i, Int len) {
	if (len < 0) {
		return Arr<T>::makeEmpty();
	} else {
		Arr<T> ret(len);
		for (Int j = 0; j < len; ++ j) {
			ret->vect.push_back(a->vect.at(i + j));
		}
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("enumFromTo", false,
"Arr<Int> $F_1(enumFromTo)(Int beg, Int end);\n",
"Arr<Int> $F_1(enumFromTo)(Int beg, Int end) {
	if (beg > end) {
		return Arr<Int>::makeEmpty();
	} else {
		Arr<Int> ret(end - beg + 1);
		for (Int i = 0; i < end - beg + 1; ++i) {
			ret->vect.push_back(beg + i);
		}
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("iter", true,
"template<typename T> Void $F_1(iter)(Arr<T> a, Fun<Void, T> fn);\n",
"template<typename T>
Void $F_1(iter)(Arr<T> a, Fun<Void, T> fn) { 
	for (T x : a->vect) fn(x);
}\n", "", [], []),

Cpp3NativePlain("iteri", true,
"template<typename T> Void $F_1(iteri)(Arr<T> a, Fun<Void, Int, T> fn);\n",
"template<typename T>
Void $F_1(iteri)(Arr<T> a, Fun<Void, Int, T> fn) {
	Int i = 0;
	for (T x : a->vect) fn(i++, x);
}\n", "", [], []),

Cpp3NativePlain("iteriUntil", true,
"template<typename T> Int $F_1(iteriUntil)(Arr<T> a, Fun<Bool, Int, T> fn);\n",
"template<typename T>
Int $F_1(iteriUntil)(Arr<T> a, Fun<Bool, Int, T> fn) {
	for (Int i = 0; i < static_cast<Int>(a->size()); ++ i) {
		if (fn(i, a->vect.at(i))) return i;
	}
	return static_cast<Int>(a->size());
}\n", "", [], []),
	
Cpp3NativePlain("iterUntil", true,
"template<typename T> Int $F_1(iterUntil)(Arr<T> a, Fun<Bool, T> fn);\n",
"template<typename T>
Int $F_1(iterUntil)(Arr<T> a, Fun<Bool, T> fn) {
	for (Int i = 0; i < static_cast<Int>(a->size()); ++ i)) {
		if (fn(a->vect.at(i))) return i;
	}
	return static_cast<Int>(a->size());
}\n", "", [], [])

]