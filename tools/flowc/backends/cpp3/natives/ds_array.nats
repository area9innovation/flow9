[

Cpp3NativePlain("length", true, 
"template<typename T> inline Int $F_1(length)(Vec<T>* a);\n",
"template<typename T>
inline Int $F_1(length)(Vec<T>* a) {
	Int ret = static_cast<Int>(a->size());
	decRc(a);
	return ret;
}\n", "", [], []
),

Cpp3NativePlain("concat", true,
"template<typename T> Vec<T>* $F_1(concat)(Vec<T>* a1, Vec<T>* a2);\n",
"template<typename T>
inline Vec<T>* $F_1(concat)(Vec<T>* v1, Vec<T>* v2) {
	if (v1->rc_ == 1) {
		for(T x : *v2) {
			incRc(x);
			v1->pushBack(x);
		}
		decRc(v2);
		return v1;
	} else {
		Vec<T>* ret = Vec<T>::make();
		ret->reserve(v1->size() + v2->size());
		for(T x : *v1) {
			incRc(x);
			ret->pushBack(x);
		}
		for(T x : *v2) {
			incRc(x);
			ret->pushBack(x);
		}
		decRc(v1); decRc(v2);
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("fold", true,
"template<typename T, typename V> V $F_1(fold)(Vec<T>* a, V v, Fun<V, V, T>* fn);\n",
"template<typename T, typename V>
V $F_1(fold)(Vec<T>* a, V v, Fun<V, V, T>* fn) {
	for (T x : *a) {
		incRc(x);
		v = fn->callRc1(v, x);
	}
	decRc(fn);
	decRc(a);
	return v;
}\n", "", [], []),

Cpp3NativePlain("foldi", true,
"template<typename T, typename V> V $F_1(foldi)(Vec<T>* a, V v, Fun<V, Int, V, T>* fn);\n",
"template<typename T, typename V>
V $F_1(foldi)(Vec<T>* a, V v, Fun<V, Int, V, T>* fn) {
	Int i = 0;
	for (T x : *a) {
		incRc(x);
		v = fn->callRc1(i++, v, x);
	}
	decRc(fn);
	decRc(a);
	return v;
}\n", "", [Cpp3Std(["<typeinfo>"], [])], []),

Cpp3NativePlain("map", true,
"template<typename T, typename V> Vec<V>* $F_1(map)(Vec<T>* a, Fun<V, T>* fn);\n",
"template<typename T, typename V>
Vec<V>* $F_1(map)(Vec<T>* a, Fun<V, T>* fn) {
	Vec<V>* ret = Vec<V>::make();
	ret->reserve(a->size());
	for (T x : *a) {
		incRc(x);
		ret->pushBack(fn->callRc1(x));
	}
	decRc(fn);
	decRc(a);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("mapi", true,
"template<typename T, typename V> Vec<V>* $F_1(mapi)(Vec<T>* a, Fun<V, Int, T>* fn);\n",
"template<typename T, typename V>
Vec<V>* $F_1(mapi)(Vec<T>* a, Fun<V, Int, T>* fn) {
	Vec<V>* ret = Vec<V>::make();
	ret->reserve(a->size());
	Int i = 0;
	for (T x : *a) {
		incRc(x);
		ret->pushBack(fn->callRc1(i++, x));
	}
	decRc(fn);
	decRc(a);
	return ret;
}\n", "", [], []),

Cpp3NativePlain("filter", true,
"template<typename T> Vec<T>* $F_1(filter)(Vec<T>* a, Fun<Bool, T>* fn);\n",
"template<typename T>
Vec<T>* $F_1(filter)(Vec<T>* a, Fun<Bool, T>* fn) {
	Vec<T>* ret = Vec<T>::make();
	ret->reserve(a->size());
	for (T x : *a) {
		incRc(x);
		if (fn->callRc1(x)) {
			incRc(x);
			ret->pushBack(x);
		}
	}
	decRc(fn);
	decRc(a);
	ret->shrink();
	return ret;
}\n", "", [], []),

Cpp3NativePlain("replace", true,
"template<typename T> Vec<T>* $F_1(replace)(Vec<T>* a, Int i, T v);\n",
"template<typename T>
Vec<T>* $F_1(replace)(Vec<T>* a, Int i, T v) {
	Vec<T>* ret = Vec<T>::make(*a);
	decRc(a);
	if (i < ret->size()) {
		ret->setRc1(i, v);
	} else if (i == ret->size()) {
		ret->pushBack(v);
	}
	return ret;
}\n", "", [], []),

Cpp3NativePlain("subrange", true,
"template<typename T> Vec<T>* $F_1(subrange)(Vec<T>* a, Int i, Int len);\n",
"template<typename T>
Vec<T>* $F_1(subrange)(Vec<T>* a, Int i, Int len) {
	Int size = a->size();
	if (i < 0 || len < 1 || i >= size) {
		decRc(a);
		return Vec<T>::make();
	} else {
		Vec<T>* ret = Vec<T>::make();
		Int end = i + len;
		if (end > size || end < 0) {
			len = size - i;
		}
		ret->reserve(len);
		for (Int j = 0; j < len; ++ j) {
			T x = a->get(i + j);
			incRc(x);
			ret->pushBack(x);
		}
		decRc(a);
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("enumFromTo", false,
"Vec<Int>* $F_1(enumFromTo)(Int beg, Int end);\n",
"Vec<Int>* $F_1(enumFromTo)(Int beg, Int end) {
	if (beg > end) {
		return Vec<Int>::make();
	} else {
		Vec<Int>* ret = Vec<Int>::make();
		ret->reserve(end - beg + 1);
		for (Int i = 0; i < end - beg + 1; ++i) {
			ret->pushBack(beg + i);
		}
		return ret;
	}
}\n", "", [], []),

Cpp3NativePlain("iter", true,
"template<typename T> Void $F_1(iter)(Vec<T>* a, Fun<Void, T>* fn);\n",
"template<typename T>
Void $F_1(iter)(Vec<T>* a, Fun<Void, T>* fn) { 
	for (T x : *a) {
		incRc(x);
		fn->callRc1(x);
	}
	decRc(a);
	decRc(fn);
	return void_value;
}\n", "", [], []),

Cpp3NativePlain("iteri", true,
"template<typename T> Void $F_1(iteri)(Vec<T>* a, Fun<Void, Int, T>* fn);\n",
"template<typename T>
Void $F_1(iteri)(Vec<T>* a, Fun<Void, Int, T>* fn) {
	Int i = 0;
	for (T x : *a) {
		incRc(x);
		fn->callRc1(i++, x);
	}
	decRc(a);
	decRc(fn);
	return void_value;
}\n", "", [], []),

Cpp3NativePlain("iteriUntil", true,
"template<typename T> Int $F_1(iteriUntil)(Vec<T>* a, Fun<Bool, Int, T>* fn);\n",
"template<typename T>
Int $F_1(iteriUntil)(Vec<T>* a, Fun<Bool, Int, T>* fn) {
	for (Int i = 0; i < static_cast<Int>(a->size()); ++ i) {
		T x = a->get(i);
		incRc(x);
		if (fn->callRc1(i, x)) {
			decRc(a);
			decRc(fn);
			return i;
		}
	}
	decRc(a);
	decRc(fn);
	return static_cast<Int>(a->size());
}\n", "", [], []),
	
Cpp3NativePlain("iterUntil", true,
"template<typename T> Int $F_1(iterUntil)(Vec<T>* a, Fun<Bool, T>* fn);\n",
"template<typename T>
Int $F_1(iterUntil)(Vec<T>* a, Fun<Bool, T>* fn) {
	for (T x : *a) {
		incRc(x);
		if (fn->callRc1(x)) {
			decRc(a);
			decRc(fn);
			return i;
		}
	}
	decRc(a);
	decRc(fn);
	return static_cast<Int>(a->size());
}\n", "", [], [])

]