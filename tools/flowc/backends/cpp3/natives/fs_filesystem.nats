[

Cpp3NativePlain("createDirectory", false,
"String $F_1(createDirectory)(String path);\n",
"String $F_1(createDirectory)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::create_directory(path->str, err);
	if (ret) {
		return String::make();
	} else {
		return String::make(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("fileExists", true,
"inline Bool $F_1(fileExists)(String path);\n",
"inline Bool $F_1(fileExists)(String path) {
	return std::filesystem::exists(path->str);
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("isDirectory", true,
"inline Bool $F_1(isDirectory)(String path);\n",
"inline Bool $F_1(isDirectory)(String path) {
	return std::filesystem::is_directory(std::filesystem::status(path->str));
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("deleteDirectory", false,
"String $F_1(deleteDirectory)(String path);\n",
"String $F_1(deleteDirectory)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(path->str, err);
	if (ret) {
		return String::make();
	} else {
		return String::make(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("deleteFile", false,
"String $F_1(deleteFile)(String path);\n",
"String $F_1(deleteFile)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(path->str, err);
	if (ret) {
		return String::make();
	} else {
		return String::make(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("readDirectory", false,
"Vec<String> $F_1(readDirectory)(String path);\n",
"Vec<String> $F_1(readDirectory)(String path) {
	try {
		std::filesystem::directory_iterator dir_iterator(path->str);
		std::vector<String> dir_contents;
		for (auto& f : dir_iterator) {
			string item_path = f.path().u16string();	
			dir_contents.push_back(
				String::make(
					item_path.substr(path->str.size() + 1, item_path.size() - (path->str.size() + 1))
				)
			);
		}
		return Vec<String>::make(std::move(dir_contents));
	} catch (std::exception& err) {
		return Vec<String>::make();
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("renameFile", false,
"String $F_1(renameFile)(String old, String _new);\n",
"String $F_1(renameFile)(String old, String _new) {
	std::error_code err;
	std::filesystem::rename(old->str, _new->str, err);
	return String::make(err.message());
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("resolveRelativePath", true,
"inline String $F_1(resolveRelativePath)(String path);\n",
"inline String $F_1(resolveRelativePath)(String path) {
	return String::make(std::filesystem::absolute(path->str));
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("fileModified", false,
"Double $F_1(fileModified)(String path);\n",
"Double $F_1(fileModified)(String path) {
	try {
		std::filesystem::file_time_type mod1 = std::filesystem::last_write_time(path->str);
		auto mod2 = std::chrono::file_clock::to_sys(mod1);
		auto mod3 = std::chrono::duration_cast<std::chrono::milliseconds>(mod2.time_since_epoch());
		return mod3.count();
	} catch (std::exception& err) {
		return 0.0;
	}
}\n", "", [Cpp3Std(["<filesystem>", "<chrono>"], [])], []),

Cpp3NativePlain("fileSize", true,
"inline Double $F_1(fileSize)(String path);\n",
"inline Double $F_1(fileSize)(String path) {
	try {
		return std::filesystem::file_size(path->str);
	} catch (std::exception& err) {
		return 0.0;
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], [])

]