[

Cpp3NativePlain("createDirectory", false,
"String* $F_1(createDirectory)(String* path);\n",
"String* $F_1(createDirectory)(String* path) {
	std::error_code err;
	Bool ret = std::filesystem::create_directory(path->str(), err);
	if (ret) {
		decRc(path);
		return String::make();
	} else {
		decRc(path);
		return String::make(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("fileExists", true,
"inline Bool $F_1(fileExists)(String* path);\n",
"inline Bool $F_1(fileExists)(String* path) {
	Bool ret = std::filesystem::exists(path->str());
	decRc(path);
	return ret;
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("isDirectory", true,
"inline Bool $F_1(isDirectory)(String* path);\n",
"inline Bool $F_1(isDirectory)(String* path) {
	Bool ret = std::filesystem::is_directory(std::filesystem::status(path->str()));
	decRc(path);
	return ret;
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("deleteDirectory", false,
"String* $F_1(deleteDirectory)(String* path);\n",
"String* $F_1(deleteDirectory)(String* path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(path->str(), err);
	decRc(path);
	if (ret) {
		return String::make();
	} else {
		return String::make(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("deleteFile", false,
"String* $F_1(deleteFile)(String* path);\n",
"String* $F_1(deleteFile)(String* path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(path->str(), err);
	decRc(path);
	if (ret) {
		return String::make();
	} else {
		return String::make(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("readDirectory", false,
"Vec<String*>* $F_1(readDirectory)(String* path);\n",
"Vec<String*>* $F_1(readDirectory)(String* path) {
	Vec<String*>* ret = Vec<String*>::make({});
	try {
		std::filesystem::directory_iterator dir_iterator(path->str());
		for (auto& f : dir_iterator) {
			string item_path = f.path().u16string();	
			ret->pushBack(
				String::make(
					item_path.substr(path->size() + 1, item_path.size() - (path->size() + 1))
				)
			);
		}
	} catch (std::exception& err) { }
	decRc(path);
	return ret;

}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("renameFile", false,
"String* $F_1(renameFile)(String* old, String* _new);\n",
"String* $F_1(renameFile)(String* old, String* _new) {
	std::error_code err;
	std::filesystem::rename(old->str(), _new->str(), err);
	decRc(old);
	decRc(_new);
	return String::make(err.message());
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("resolveRelativePath", true,
"inline String* $F_1(resolveRelativePath)(String* path);\n",
"inline String* $F_1(resolveRelativePath)(String* path) {
	String* ret = nullptr;
	if (path->size() == 0 || path->str() == u\".\") {
		ret = String::make(std::filesystem::current_path());
	} else {
		try {
			ret = String::make(std::filesystem::absolute(path->str()).lexically_normal());
		} catch (std::exception& err) {
			ret = String::make();
		}
	}
	decRc(path);
	return ret;
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("fileModified", false,
"Double $F_1(fileModified)(String* path);\n",
"Double $F_1(fileModified)(String* path) {
	Double ret = 0.0;
	if (std::filesystem::exists(path->str())) {
		try {
			std::filesystem::file_time_type mod1 = std::filesystem::last_write_time(path->str());
			auto mod2 = std::chrono::file_clock::to_sys(mod1);
			auto mod3 = std::chrono::duration_cast<std::chrono::milliseconds>(mod2.time_since_epoch());
			ret = mod3.count();
		} catch (std::exception& err) {
		}
	}
	decRc(path);
	return ret;
}\n", "", [Cpp3Std(["<filesystem>", "<chrono>"], [])], []),

Cpp3NativePlain("fileModifiedPrecise", false,
"Double $F_1(fileModifiedPrecise)(String* path);\n",
"Double $F_1(fileModifiedPrecise)(String* path) {
	Double ret = 0.0;
	if (std::filesystem::exists(path->str())) {
		try {
			std::filesystem::file_time_type mod1 = std::filesystem::last_write_time(path->str());
			auto mod2 = std::chrono::file_clock::to_sys(mod1);
			auto mod3 = std::chrono::duration_cast<std::chrono::milliseconds>(mod2.time_since_epoch());
			ret = mod3.count();
		} catch (std::exception& err) {
		}
	}
	decRc(path);
	return ret;
}\n", "", [Cpp3Std(["<filesystem>", "<chrono>"], [])], []),

Cpp3NativePlain("fileSize", true,
"inline Double $F_1(fileSize)(String* path);\n",
"inline Double $F_1(fileSize)(String* path) {
	Double ret = 0.0;
	if (std::filesystem::exists(path->str())) {
		try {
			ret = std::filesystem::file_size(path->str());
		} catch (std::exception& err) {
		}
	}
	decRc(path);
	return ret;
}\n", "", [Cpp3Std(["<filesystem>"], [])], [])

]