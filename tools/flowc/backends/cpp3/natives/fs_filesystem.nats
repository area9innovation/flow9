[

Cpp3NativePlain("createDirectory", false,
"String $F_1(createDirectory)(String path);\n",
"String $F_1(createDirectory)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::create_directory(*path, err);
	if (ret) {
		return makeString();
	} else {
		return makeString(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("fileExists", true,
"inline Bool $F_1(fileExists)(String path);\n",
"inline Bool $F_1(fileExists)(String path) {
	return std::filesystem::exists(*path);
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("isDirectory", true,
"inline Bool $F_1(isDirectory)(String path);\n",
"inline Bool $F_1(isDirectory)(String path) {
	return std::filesystem::is_directory(std::filesystem::status(*path));
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("deleteDirectory", false,
"String $F_1(deleteDirectory)(String path);\n",
"String $F_1(deleteDirectory)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(*path, err);
	if (ret) {
		return makeString();
	} else {
		return makeString(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("deleteFile", false,
"String $F_1(deleteFile)(String path);\n",
"String $F_1(deleteFile)(String path) {
	std::error_code err;
	Bool ret = std::filesystem::remove(*path, err);
	if (ret) {
		return makeString();
	} else {
		return makeString(err.message());
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("readDirectory", false,
"Arr<String> $F_1(readDirectory)(String path);\n",
"Arr<String> $F_1(readDirectory)(String path) {
	try {
		std::filesystem::directory_iterator dir_iterator(*path);
		Arr<String> dir_contents(8);
		for (auto& f : dir_iterator) {
			string item_path = f.path().u16string();	
			dir_contents->vect.push_back(
				makeString(
					item_path.substr(path->size() + 1, item_path.size() - (path->size() + 1))
				)
			);
		}
		return dir_contents;
	} catch (std::exception& err) {
		return Arr<String>::makeEmpty();
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("renameFile", false,
"String $F_1(renameFile)(String old, String _new);\n",
"String $F_1(renameFile)(String old, String _new) {
	std::error_code err;
	std::filesystem::rename(*old, *_new, err);
	return makeString(err.message());
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("resolveRelativePath", true,
"inline String $F_1(resolveRelativePath)(String path);\n",
"inline String $F_1(resolveRelativePath)(String path) {
	return makeString(std::filesystem::absolute(*path));
}\n", "", [Cpp3Std(["<filesystem>"], [])], []),

Cpp3NativePlain("fileModified", false,
"Double $F_1(fileModified)(String path);\n",
"Double $F_1(fileModified)(String path) {
	try {
		std::filesystem::file_time_type mod1 = std::filesystem::last_write_time(*path);
		auto mod2 = std::chrono::file_clock::to_sys(mod1);
		auto mod3 = std::chrono::duration_cast<std::chrono::milliseconds>(mod2.time_since_epoch());
		return mod3.count();
	} catch (std::exception& err) {
		return 0;
	}
}\n", "", [Cpp3Std(["<filesystem>", "<chrono>"], [])], []),

Cpp3NativePlain("fileSize", true,
"inline Double $F_1(fileSize)(String path);\n",
"inline Double $F_1(fileSize)(String path) {
	try {
		return std::filesystem::file_size(*path);
	} catch (std::exception& err) {
		return 0;
	}
}\n", "", [Cpp3Std(["<filesystem>"], [])], [])

]