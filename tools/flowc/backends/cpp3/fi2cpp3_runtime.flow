import text/serialize;
import tools/flowc/backends/common;
import tools/flowc/backends/cpp3/fi2cpp3_util;
import tools/flowc/backends/cpp3/fi2cpp3_defines;

export {
	fiCpp3RuntimeHeader(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string;
	fiCpp3RuntimeSource(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string;

	fiCpp3IsNative(name : string, gctx: Cpp3GlobalContext) -> bool;
	fiCpp3InitNativeFuncs(cfg: FiCpp3Config) -> Tree<string, Cpp3Native>;
	fiCpp3BaseRuntimeFiles(cfg: FiCpp3Config, extension: string) -> [string];
	fiCpp3InitRuntimeParts(cfg: FiCpp3Config) -> Tree<string, Cpp3RuntimePart>;
	fiCpp3DependenciesIncludes(depsA: [[Cpp3Dependency]]) -> [string];
}

fiCpp3RuntimeHeader(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string {
	headers = superglue(
		fiCpp3BaseRuntimeFiles(gctx.config, ".hpp"),
		\header -> "#inc""lude \"" + fileNameOnly(header) + "\"", "\n"
	);
	includes = superglue(
		fiCpp3DependenciesIncludes(map(runtime_parts, \part -> part.dependencies)),
		\inc -> "#inc""lude " + inc, "\n"
	);
	"#pragma once\n\n" +
	"#inc""lude <iostream>\n\n" +
	headers + "\n" +
	(if (includes == "") "" else includes + "\n") +
	fiWrapWithNamespace("flow",
		concatStrings(map(runtime_parts, \part -> "// Runtime part: " + part.name + "\n" + part.header + "\n\n")) + "\n" +
		"void cleanupAtExit();"
	);
}

fiCpp3RuntimeSource(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string {
	"#inc""lude \"__flow_runtime.hpp\"\n\n" +
	fiWrapWithNamespace("flow",
		concatStrings(filtermap(runtime_parts, \part -> 
			if (part.staysInMain) None() else Some("// Runtime part: " + part.name + "\n" + part.source + "\n\n")
		))
	);
}

fiCpp3BaseRuntimeFiles(cfg: FiCpp3Config, extension: string) -> [string] {
	fold(cfg.backendDirs, [], \acc, dir -> 
		fold(readDirectory(pathCombine(dir, "runtime")), acc, \ac, file ->
			if (!endsWith(file, extension)) ac else {
				arrayPush(ac, pathCombineMany([dir, "runtime", file]));
			}
		)
	);
}

fiCpp3BaseRuntimeParts(cfg: FiCpp3Config, extension: string) -> [string] {
	map(fiCpp3BaseRuntimeFiles(cfg, extension), getFileContent);
}

fiCpp3IsNative(name : string, gctx: Cpp3GlobalContext) -> bool {
	containsKeyTree(gctx.natives, name);
}

fiCpp3InitRuntimeParts(cfg: FiCpp3Config) -> Tree<string, Cpp3RuntimePart> {
	runtime_files = fold(cfg.backendDirs, [], \acc, dir -> 
		fold(readDirectory(pathCombine(dir, "runtime")), acc, \ac, file ->
			if (!endsWith(file, ".runts")) ac else {
				concat(ac, [pathCombineMany([dir, "runtime", file])]);
			}
		)
	);
	fold(runtime_files, makeTree(), \acc, runtime_file ->
		if (!fileExists(runtime_file)) {
			fcPrintln("runtime parts file: " + runtime_file + " is not found", cfg.config.threadId);
			acc;
		} else {
			runtime_parts = deserialize(getFileContent(runtime_file), IllegalStruct());
			if (!isArray(runtime_parts)) {
				fcPrintln("runtime parts file: " + runtime_file + " has broken format", cfg.config.threadId);
				acc;
			} else {
				mergeTree(acc, values2tree(runtime_parts, \part -> part.name));
			}
		}
	);
}

fiCpp3InitNativeFuncs(cfg: FiCpp3Config) -> Tree<string, Cpp3Native> {
	native_files = fold(cfg.backendDirs, [], \acc, dir ->
		if (fileExists(dir) && isDirectory(dir)) {
			nats_dir = pathCombine(dir, "natives");
			if (fileExists(nats_dir) && isDirectory(nats_dir)) {
				fold(readDirectory(nats_dir), acc, \ac, file ->
					if (!endsWith(file, ".nats")) ac else {
						concat(ac, [pathCombineMany([dir, "natives", file])]);
					}
				);
			} else {
				fcPrintln("C++ backend directory for natives: " + nats_dir + " doesn't exist or is not a directory", cfg.threadId);
				acc;
			}
		} else {
			fcPrintln("C++ backend directory for natives: " + dir + " doesn't exist or is not a directory", cfg.threadId);
			acc;
		}
	);
	fold(native_files, makeTree(), \acc, natives_file ->
		if (!fileExists(natives_file)) {
			fcPrintln("runtime natives file: " + natives_file + " is not found", cfg.config.threadId);
			acc;
		} else {
			natives = deserialize(getFileContent(natives_file), IllegalStruct());
			if (!isArray(natives)) {
				fcPrintln("runtime natives file: " + natives_file + " has broken format", cfg.config.threadId);
				acc;
			} else {
				mergeTree(acc, values2tree(natives, \nat -> nat.name));
			}
		}
	);
}

fiCpp3DependenciesIncludes(depsA: [[Cpp3Dependency]]) -> [string] {
	set2array(fold(depsA, makeSet(), \acc, deps ->
		fold(deps, acc, \ac, dep ->
			switch (dep) {
				Cpp3Std(incs, __): fold(incs, ac, \a, inc: string -> insertSet(a, inc));
				Cpp3Qt(__,incs,__): fold(incs, ac, \a, inc: string -> insertSet(a, inc));
			}
		)
	));
}
