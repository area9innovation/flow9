import text/serialize;
import tools/flowc/backends/common;
import tools/flowc/backends/cpp3/fi2cpp3_util;
import tools/flowc/backends/cpp3/fi2cpp3_defines;

export {
	fiCpp3Runtime(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string;
	fiCpp3IsNative(name : string, gctx: Cpp3GlobalContext) -> bool;
	fiCpp3InitNativeFuncs(cfg: FiCpp3Config) -> Tree<string, Cpp3Native>;
	fiCpp3InitRuntimeParts(cfg: FiCpp3Config) -> Tree<string, Cpp3RuntimePart>;
	fiCpp3DependenciesIncludes(depsA: [[Cpp3Dependency]]) -> [string];
}

fiCpp3Runtime(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string {
all_includes = fiCpp3DependenciesIncludes(map(runtime_parts, \part -> part.dependencies));
includes = superglue(all_includes, \inc -> "#inc" + "lude " + inc, "\n");
(if (includes == "") "" else includes + "\n") +
"#include tools/flowc/backends/cpp3/__flow_runtime.hpp" + "\n" +
"namespace flow {\n" +
"template<typename T>
T " + gctx.varname2cpp("for") + "(T v, Fun<Bool, T> p, Fun<T, T> fn) {
	while (p(v)) v = fn(v);
	return v;
}
" +
concatStrings(map(runtime_parts, \part -> "// Runtime part: " + part.name + "\n" + part.header + "\n\n")) +
"}\n";
}

fiCpp3IsNative(name : string, gctx: Cpp3GlobalContext) -> bool {
	name == "for" || containsKeyTree(gctx.natives, name);
}

fiCpp3InitRuntimeParts(cfg: FiCpp3Config) -> Tree<string, Cpp3RuntimePart> {
	runtime_files = fold(cfg.nativeDirs, [], \acc, dir -> 
		fold(readDirectory(pathCombine(dir, "runtimes")), acc, \ac, file ->
			if (!endsWith(file, ".runts")) ac else {
				concat(ac, [pathCombineMany([dir, "runtimes", file])]);
			}
		)
	);
	fold(runtime_files, makeTree(), \acc, runtime_file ->
		if (!fileExists(runtime_file)) {
			fcPrintln("runtime parts file: " + runtime_file + " is not found", cfg.config.threadId);
			acc;
		} else {
			runtime_parts = deserialize(getFileContent(runtime_file), IllegalStruct());
			if (!isArray(runtime_parts)) {
				fcPrintln("runtime parts file: " + runtime_file + " has broken format", cfg.config.threadId);
				acc;
			} else {
				mergeTree(acc, values2tree(runtime_parts, \part -> part.name));
			}
		}
	);
}

cppNativePlain2Cpp3Native(n: Cpp3NativePlain) -> Cpp3Native {
	Cpp3Native(
		n.name,
		\type2cpp, var2cpp -> strApplyFns(n.def)([type2cpp, var2cpp]),
		if (n.inline == "") None() else Some(Cpp3Inline(
			\as -> strSubstituteArgs(n.inline)(as)
		)),
		n.dependencies, n.runtimeParts
	);
}

fiCpp3InitNativeFuncs(cfg: FiCpp3Config) -> Tree<string, Cpp3Native> {
	native_files = fold(cfg.nativeDirs, [], \acc, dir -> 
		fold(readDirectory(pathCombine(dir, "natives")), acc, \ac, file ->
			if (!endsWith(file, ".nats")) ac else {
				concat(ac, [pathCombineMany([dir, "natives", file])]);
			}
		)
	);
	fold(native_files, makeTree(), \acc, natives_file ->
		if (!fileExists(natives_file)) {
			fcPrintln("runtime natives file: " + natives_file + " is not found", cfg.config.threadId);
			acc;
		} else {
			defs = deserialize(getFileContent(natives_file), IllegalStruct());
			if (!isArray(defs)) {
				fcPrintln("runtime natives file: " + natives_file + " has broken format", cfg.config.threadId);
				acc;
			} else {
				natives = map(defs, cppNativePlain2Cpp3Native);
				mergeTree(acc, values2tree(natives, \nat -> nat.name));
			}
		}
	);
}

fiCpp3DependenciesIncludes(depsA: [[Cpp3Dependency]]) -> [string] {
	set2array(fold(depsA, makeSet(), \acc, deps ->
		fold(deps, acc, \ac, dep ->
			switch (dep) {
				Cpp3Std(incs, __): fold(incs, ac, \a, inc: string -> insertSet(a, inc));
				Cpp3Qt(incs,__): fold(incs, ac, \a, inc: string -> insertSet(a, inc));
			}
		)
	));
}
