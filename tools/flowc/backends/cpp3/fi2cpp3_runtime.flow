import text/serialize;
import tools/flowc/backends/common;
import tools/flowc/backends/cpp3/fi2cpp3_util;
import tools/flowc/backends/cpp3/fi2cpp3_defines;

export {
	fiCpp3RuntimeHeader(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string;
	fiCpp3RuntimeSource(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string;

	fiCpp3IsNative(name : string, gctx: Cpp3GlobalContext) -> bool;
	fiCpp3InitNativeFuncs(cfg: FiCpp3Config) -> Tree<string, Cpp3Native>;
	fiCpp3BaseRuntimeFiles(cfg: FiCpp3Config, extension: string) -> [string];
	fiCpp3InitRuntimeParts(cfg: FiCpp3Config) -> Tree<string, Cpp3RuntimePart>;
	fiCpp3DependenciesIncludes(depsA: [[Cpp3Dependency]]) -> [string];
}

fiCpp3RuntimeHeader(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string {
	switch (find(fiCpp3BaseRuntimeFiles(gctx.config, ".hpp"), \f -> endsWith(f, "__flow_runtime.hpp"))) {
		Some(base_runtime_file): {
			base_runtime = getFileContent(base_runtime_file);
			all_includes = fiCpp3DependenciesIncludes(map(runtime_parts, \part -> part.dependencies));
			includes = superglue(all_includes, \inc -> "#inc""lude " + inc, "\n");

			constexpr_consts = "namespace flow {\n" +
				"\tconstexpr bool CONCURRENCY_ON   = " + b2s(gctx.config.concurrencyOn) + ";\n" +
			"}\n";

			"#pragma once\n" +
			(if (includes == "") "" else includes + "\n") +
			constexpr_consts + "\n" +
			base_runtime + "\n" +
			"namespace flow {\n" +
				concatStrings(map(runtime_parts, \part -> "// Runtime part: " + part.name + "\n" + part.header + "\n\n")) +
			"}\n";
		}
		None(): {
			gctx.success := false;
			fcPrintln("common runtime header `__flow_runtime.hpp` is not found.", gctx.config.threadId);
			"";
		}
	}
}

fiCpp3RuntimeSource(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string {
	base_runtime = fiCpp3BaseRuntimeParts(gctx.config, ".cpp");
	concatStrings(base_runtime) + "\n\n" +
	"namespace flow {\n" +
		concatStrings(filtermap(runtime_parts, \part -> 
			if (part.staysInMain) None() else Some("// Runtime part: " + part.name + "\n" + part.source + "\n\n")
		)) +
	"}\n";
}

fiCpp3BaseRuntimeFiles(cfg: FiCpp3Config, extension: string) -> [string] {
	fold(cfg.backendDirs, [], \acc, dir -> 
		fold(readDirectory(pathCombine(dir, "runtimes")), acc, \ac, file ->
			if (!endsWith(file, extension)) ac else {
				arrayPush(ac, pathCombineMany([dir, "runtimes", file]));
			}
		)
	);
}

fiCpp3BaseRuntimeParts(cfg: FiCpp3Config, extension: string) -> [string] {
	map(fiCpp3BaseRuntimeFiles(cfg, extension), getFileContent);
}

fiCpp3IsNative(name : string, gctx: Cpp3GlobalContext) -> bool {
	containsKeyTree(gctx.natives, name);
}

fiCpp3InitRuntimeParts(cfg: FiCpp3Config) -> Tree<string, Cpp3RuntimePart> {
	runtime_files = fold(cfg.backendDirs, [], \acc, dir -> 
		fold(readDirectory(pathCombine(dir, "runtimes")), acc, \ac, file ->
			if (!endsWith(file, ".runts")) ac else {
				concat(ac, [pathCombineMany([dir, "runtimes", file])]);
			}
		)
	);
	fold(runtime_files, makeTree(), \acc, runtime_file ->
		if (!fileExists(runtime_file)) {
			fcPrintln("runtime parts file: " + runtime_file + " is not found", cfg.config.threadId);
			acc;
		} else {
			runtime_parts = deserialize(getFileContent(runtime_file), IllegalStruct());
			if (!isArray(runtime_parts)) {
				fcPrintln("runtime parts file: " + runtime_file + " has broken format", cfg.config.threadId);
				acc;
			} else {
				mergeTree(acc, values2tree(runtime_parts, \part -> part.name));
			}
		}
	);
}

cppNativePlain2Cpp3Native(n: Cpp3NativePlain) -> Cpp3Native {
	Cpp3Native(
		n.name,
		\type2cpp, var2cpp, structid2cpp -> Cpp3CompiledDeclaration(n.name,
			n.headerOnly, "", "",
			strApplyFns(n.declaration)([type2cpp, var2cpp, structid2cpp]),
			strApplyFns(n.definition)([type2cpp, var2cpp, structid2cpp]), ""
		),
		if (n.inline == "") None() else Some(Cpp3Inline(
			\as -> strSubstituteArgs(n.inline)(as)
		)),
		n.dependencies, n.runtimeParts
	);
}

fiCpp3InitNativeFuncs(cfg: FiCpp3Config) -> Tree<string, Cpp3Native> {
	native_files = fold(cfg.backendDirs, [], \acc, dir -> 
		fold(readDirectory(pathCombine(dir, "natives")), acc, \ac, file ->
			if (!endsWith(file, ".nats")) ac else {
				concat(ac, [pathCombineMany([dir, "natives", file])]);
			}
		)
	);
	fold(native_files, makeTree(), \acc, natives_file ->
		if (!fileExists(natives_file)) {
			fcPrintln("runtime natives file: " + natives_file + " is not found", cfg.config.threadId);
			acc;
		} else {
			defs = deserialize(getFileContent(natives_file), IllegalStruct());
			if (!isArray(defs)) {
				fcPrintln("runtime natives file: " + natives_file + " has broken format", cfg.config.threadId);
				acc;
			} else {
				natives = map(defs, cppNativePlain2Cpp3Native);
				mergeTree(acc, values2tree(natives, \nat -> nat.name));
			}
		}
	);
}

fiCpp3DependenciesIncludes(depsA: [[Cpp3Dependency]]) -> [string] {
	set2array(fold(depsA, makeSet(), \acc, deps ->
		fold(deps, acc, \ac, dep ->
			switch (dep) {
				Cpp3Std(incs, __): fold(incs, ac, \a, inc: string -> insertSet(a, inc));
				Cpp3Qt(__,incs,__): fold(incs, ac, \a, inc: string -> insertSet(a, inc));
			}
		)
	));
}
