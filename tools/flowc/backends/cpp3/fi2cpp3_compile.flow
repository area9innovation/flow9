import tools/flowc/backends/cpp3/fi2cpp3_runtime;
import tools/flowc/backends/cpp3/fi2cpp3_types;
import tools/flowc/backends/cpp3/fi2cpp3_structs;
import tools/flowc/statements/fs_tailcall;
import tools/flowc/statements/fs_module;

export {
	fsModule2cpp3(module : FsModule, gctx: Cpp3GlobalContext) -> Cpp3CompiledModule;
}

fsModule2cpp3(module : FsModule, gctx0: Cpp3GlobalContext) -> Cpp3CompiledModule {
	gctx = Cpp3GlobalContext(gctx0 with currentModule = module.name);
	names = gctx.program.names;
	compiled_structs = fiStructs2cpp3(module.structs, gctx);
	compiled_decls = filtermap(
		concat(module.functions, module.globalVars),
		\decl -> {
			start = fi2cpp3StartOperationMessage(gctx.config, 2, "compiling declaration", decl.name);
			ret = fsDeclaration2cpp3(decl, gctx);
			fi2cpp3EndOperationMessage(gctx.config, 2, "compilation of declaration", decl.name, start);
			ret;
		}
	);
	is_main = exists(module.functions, \fn -> fn.name == "main");
	init_body = concatStrings(concat(
		map(compiled_structs, \s -> strIndent(s.init) + "\n"),
		filtermap(compiled_decls, \d -> if (d.init == "") None() else Some(strIndent(d.init) + "\n")),
	));
	term_body = concatStrings(concat(
		map(compiled_structs, \s -> strIndent(s.term) + "\n"),
		filtermap(compiled_decls, \d -> if (d.term == "") None() else Some(strIndent(d.term) + "\n")),
	));
	init_term_decls = filtermap([if (isSpace(init_body)) None() else
		Some(Cpp3CompiledDeclaration(fi2cpp3flowfile2cpp(module.name) + "_init",
			false, "", "",
			"void init_" + fi2cpp3flowfile2cpp(module.name) + "();\n",
			"void init_" + fi2cpp3flowfile2cpp(module.name) + "() {\n" + init_body + "\n}\n\n",
			"", ""
		)),
		if (isSpace(term_body)) None() else
		Some(Cpp3CompiledDeclaration(fi2cpp3flowfile2cpp(module.name) + "_term",
			false, "", "",
			"void term_" + fi2cpp3flowfile2cpp(module.name) + "();\n",
			"void term_" + fi2cpp3flowfile2cpp(module.name) + "() {\n" + term_body + "\n}\n\n",
			"", ""
		))
	], idfn);
	Cpp3CompiledModule(
		fi2cpp3flowfile2cpp(module.name),
		is_main,
		concat3(compiled_structs, compiled_decls, init_term_decls),
		map(module.imports, \imp -> imp.flowfile),
		filtermap(module.functions, \fn -> {
			if (isSome(fn.lambda)) None() else {
				lookupTree(gctx.natives, fn.name);
			}
		}),
		isNotSpace(init_body),
		isNotSpace(term_body),
	);
}

fsDeclaration2cpp3(decl: FsDeclaration, gctx: Cpp3GlobalContext) -> Maybe<Cpp3CompiledDeclaration> {
	switch (decl) {
		FsGlobalVar(name, value, type): {
			Some(fiGlobalVar2cpp3(name, value, type, gctx));
		}
		FsFunctionDec(name, l, type,__): {
			switch (l) {
				Some(lambda): {
					// Normal function
					if (fiCpp3IsNative(name, gctx)) None() else {
						Some(fiFunc2cpp3(name, lambda, type, gctx));
					}
				}
				None(): {
					fns = [fi2cpp3typename2cpp, fi2cpp3varname2cpp, gctx.structid2cpp];
					has_complete_type = fiIsCompleteType(type);
					// Native function
					maybeMap(lookupTree(gctx.natives, name), \nat ->
						Cpp3CompiledDeclaration(nat.name,
							nat.headerOnly, "", "",
							strApplyFns(nat.declaration, fns),
							strApplyFns(nat.definition, fns),
							"Dyn::registerFun(std::move(" + fiFunction2DynFunc(name, type, gctx) + "));",
							"Dyn::removeFun(u\"" + nat.name + "\");"
						)
					);
				}
			}
		}
	}
}

fiFunction2DynFunc(name: string, type: FiTypeFunction, gctx: Cpp3GlobalContext) -> string {
	typars = set2array(fiCollectTypars(type, makeSet()));
	subst = fold(typars, makeTree(), \acc, tp -> setTree(acc, tp, FiTypeFlow()));
	type1 = cast(fiSubstituteTypars(type, subst): FiType -> FiTypeFunction);

	typars_str = if (length(typars) == 0) "" else  "<" + superglue(typars, \__ -> "Flow*", ", ") + ">";
	call1 = fi2cpp3varname2cpp(name) + typars_str + "(" + supergluei(type1.args, \i, arg -> {
		arg_val = "args->getRc1(" + i2s(i) + ")";
			if (arg.type == FiTypeFlow()) arg_val else {
				"castRc<Flow*, " + fiType2cpp3(arg.type, gctx) + ">(" + arg_val + ")"
			}
		},  ",") + ")";
	call2 = if (type1.returnType == FiTypeVoid() || type1.returnType == FiTypeFlow()) call1 else {
		"castRc<" + fiType2cpp3(type1.returnType, gctx) + ", Flow*>(" + call1 + ")";
	}
	body = if (type1.returnType == FiTypeVoid()) {
		"\t" + call2 + ";\n" +
		"\tdecRc(args);\n" +
		"\treturn FVoid::make();"
	} else {
		"\tFlow* ret = " + call2 + ";\n" +
		"\tdecRc(args);\n" +
		"\treturn ret;\n"
	}
	"FunDef({" + strGlue([
		"u\"" + name + "\"",
		i2s(fiType2cpp3TypeId(type1.returnType, gctx)),
		"{" + superglue(type1.args, \arg ->
			"ArgDef{u\"" + arg.name + "\", " + i2s(fiType2cpp3TypeId(arg.type, gctx)) + "}", ", "
		) + "}",
		"[](Vec<Flow*>* args) {\n" + body + "\n}"
	], ", ") + "})";
}

fiGlobalVar2cpp3(name: string, value: FsStat, type: FiType, gctx0: Cpp3GlobalContext) -> Cpp3CompiledDeclaration {
	names = gctx0.program.names;
	gctx = Cpp3GlobalContext(gctx0 with 
		currentToplevel = None(),
		// Global vars must not have type parameters!
		toplevelTypars = makeSet(),
		currentToplevelName = name
	);
	var_name = fi2cpp3varname2cpp(name);
	var_type = fiType2cpp3(type, gctx);
	init = switch (value) {
		FsRet(e,__,__): {
			"\t" + var_name + " = " + fsExp2cpp3(e, gctx) + ";";
		}
		default: {
			value4 = fsStatReplaceReturnOntoAssign(value,
				FsVarUse(FsVar(name, type), FsVarInfo(FsVarGlobalVar(), true, false), -1),
				false
			);
			"{\n" + strIndent(fsStat2cpp3(value4, gctx)) + "\n}";
		}
	}
	def_val = switch (type) {
		FiTypeBool(): "false";
		FiTypeInt(): "0";
		FiTypeDouble(): "0.0";
		default: "nullptr";
	}
	var_decl = var_type + " " + var_name;
	Cpp3CompiledDeclaration(name, false, "", "",
		"extern " + var_decl + ";\n\n",
		var_decl + " = " + def_val + ";\n\n",
		init,
		if (fiTypeIsScalar(type)) "" else "decRc<" + var_type + ">(" + var_name + ");"
	);
}

fiFunc2cpp3(name: string, lambda: FsLambda, type: FiTypeFunction, gctx0: Cpp3GlobalContext) -> Cpp3CompiledDeclaration {
	gctx = Cpp3GlobalContext(
		gctx0 with currentToplevel = None(),
		toplevelTypars = fiCollectTypars(type, makeSet()),
		currentToplevelName = name
	);
	fun_typars = map(set2array(fiCollectTypars(type, makeSet())), \n -> FiTypeParameter(n));
	decl_typars = fiDeclTypars2cpp3(fun_typars, gctx);
	headerOnly = cpp3InlineFunction(name, lambda, type);
	fun_signature =
		(if (headerOnly) "inline " else "") + fiType2cpp3(type.returnType, gctx) + " " + 
		fi2cpp3varname2cpp(name) + fsArgs2cpp(lambda.args, gctx);
	forward_decl = decl_typars + fun_signature + ";\n\n";
	cpp_body = fsStat2cpp3(lambda.body, gctx);
	cpp_fun = if (!fsHasTailCall(lambda.body)) cpp_body else {
		"while (true) " + fiWrapWithBraces(cpp_body, gctx.config);
	}
	generated_func = startsWith(name, "__struct_cast_of_");
	definition = decl_typars + fun_signature + " " + fiWrapWithBraces(cpp_fun, gctx.config) + "\n\n";
	Cpp3CompiledDeclaration(
		name, headerOnly, "", "",
		forward_decl, definition,
		if (generated_func) "" else "Dyn::registerFun(std::move(" + fiFunction2DynFunc(name, type, gctx) + "));",
		if (generated_func) "" else "Dyn::removeFun(u\"" + name + "\");"
	);
}

cpp3InlineFunction(name: string, lambda: FsLambda, type: FiTypeFunction) -> bool {
	if (!isEmptySet(fiCollectTypars(type, makeSet()))) true else {
		if (!fsIsSimple(lambda.body)) false else {
			fsAstNodesCount(lambda.body) < 9;
		}
	}
}

fsArgs2cpp(args: [FsVar], gctx: Cpp3GlobalContext) -> string {
	arg2cpp = \i, arg -> {
		if (arg.name == "" || arg.name == "__") {
			fail("anonymous argument is met: '" + arg.name + "', must be prohibited");
		}
		fiType2cpp3(arg.type, gctx) + " " + fi2cpp3varname2cpp(arg.name)
	};
	"(" + strGlue(mapi(args, arg2cpp), ", ") + ")";
}

fsStat2cpp3(stat : FsStat, gctx: Cpp3GlobalContext) -> string {
	cpp = switch (stat) {
		FsIf(cond, pos, neg,__,__): {
			cond_cpp = fsExp2cpp3(cond, gctx);
			pos_cpp = fsStat2cpp3(pos, gctx);
			neg_cpp = fsStat2cpp3(neg, gctx);
			if (pos_cpp != "" && pos_cpp != "void_value;") {
				if (neg_cpp != "" && neg_cpp != "void_value;") {
					"if " + fiWrapWithPars(cond_cpp, gctx.config) + " " + 
						fiWrapWithBraces(pos_cpp, gctx.config) +
					" else " + 
						fiWrapWithBraces(neg_cpp, gctx.config);
				} else {
					"if " + fiWrapWithPars(cond_cpp, gctx.config) + " " + 
						fiWrapWithBraces(pos_cpp, gctx.config);
				}
			} else {
				if (neg_cpp != "" && neg_cpp != "void_value;") {
					"if (!" + cond_cpp + ") " + 
						fiWrapWithBraces(neg_cpp, gctx.config);
				} else {
					"";
				}
			}
		}
		FsSwitch(x, sw_type, cases,__,__): {
			type_id = switch (x.var.type) {
				FiTypeName(__,__): fsExp2cpp3(x, gctx) + "->structId()";
				FiTypeFlow(): fsExp2cpp3(x, gctx) + "->typeId()";
				default: fail0("switch on a wrong type: " + pretFiType(x.var.type));
			}
			fsSwitch2cpp3(stat, type_id + "/*" + fiType2cpp3(fsType(x), gctx) + "*/", gctx);
		}
		FsLet(v, e, s,__,__): {
			if (v.name == "__") {
				fail0("definition of anonymous variable");
			} else {
				// `FiVoid` definition of a variable means that it is a forward declaration,
				// so the variable is not initialized at this place, but somewhere later
				init = switch (e) {
					FsConst(c,__): switch (c) {
						FiVoid(__): {
							switch (v.type) {
								FiTypeVoid(): "void_value";
								FiTypeBool(): "false";
								FiTypeInt(): "0";
								FiTypeDouble(): "0.0";
								FiTypeParameter(__): "makeDefInit<" + fiType2cpp3(v.type, gctx) + ">()";
								default: "nullptr";
							}
						}
						default: fsExp2cpp3(e, gctx);
					}
					default: fsExp2cpp3(e, gctx);
				}
				fiType2cpp3(v.type, gctx) + " " + fi2cpp3varname2cpp(v.name) + " = " + init + ";\n" +
				fsStat2cpp3(s, gctx);
			}
		}
		FsFor(v, arr, s, free,__,__): {
			"for (" + fiType2cpp3(v.type, gctx) + " " + fi2cpp3varname2cpp(v.name) + ": *" + fsExp2cpp3(arr, gctx) + ") {\n" +
				strIndent(fsStat2cpp3(s, gctx)) +
			"\n}";
		}
		FsWrapExp(e, __,__): {
			e_cpp = fsExp2cpp3(e, gctx);
			if (e_cpp == "") "" else {
				tp = fsType(e);
				if (fiTypeIsScalar(tp)) {
					e_cpp + ";";
				} else {
					"decRc<" + fiType2cpp3(tp, gctx) + ">(" + e_cpp + ");";
				}
			}
		}
		FsRet(e,__,__): {
			"return " + fsExp2cpp3(e, gctx) + ";"
		}
		FsTailCall(args, id,__): {
			"continue;";
		}
		FsIntrinsicStat(name, id,__): {
			if (endsWith(name, ";")) name else name + ";";
		}
		FsAssign(to, what, direct,__,__): {
			if (direct) {
				// Direct assignment - is used in native inlinings like `fold`
				fsExp2cpp3(to, gctx) + " = " + fsExp2cpp3(what, gctx) + ";";
			} else {
				to_type = fsType(to);
				make_assignment = \-> switch (to) {
					FsVarUse(v, info,__): {
						switch (info.kind) {
							FsVarUninit(): fsExp2cpp3(to, gctx) + " = " + fsExp2cpp3(what, gctx) + ";";
							default: "assignRc<" + fiType2cpp3(to_type, gctx) + " >(" + fsExp2cpp3(to, gctx) + ", " + fsExp2cpp3(what, gctx) + ");";
						}
					}
					default:  fail0("assignment to non-var:\n" + fs2s(to));
				}
				switch (to_type) {
					FiTypeRef(__): {
						switch (fsType(what)) {
							FiTypeRef(__): {
								make_assignment();
							}
							FiTypeFlow():
								fsExp2cpp3(to, gctx) + "->setFlowRc(0, " + fsExp2cpp3(what, gctx) + ");";
							default:
								fsExp2cpp3(to, gctx) + "->setRc(" + fsExp2cpp3(what, gctx) + ");";
						}
					}
					default: {
						switch (to) {
							FsCallPrim(op, as,__,__): {
								switch (op) {
									FsFieldPrim(field, field_ind): {
										fsExp2cpp3(as[0], gctx) + "->template setRc1<" + i2s(field_ind) + ">(" + fsExp2cpp3(what, gctx) + ");";
									}
									default: {
										fail0("assignment to non-var:\n" + fs2s(to));
									}
								}
							}
							default: {
								make_assignment();
							}
						}
					}
				}
			}
		}
		FsIncRc(v, delta,__,__): {
			if (delta == 0) "" else {
				"incRc<" + fiType2cpp3(v.type, gctx) + ">(" + fi2cpp3varname2cpp(v.name) + (if (delta == 1) "" else ", " + i2s(delta)) + ");";
			}
		}
		FsDecRc(v, mode,__,__): {
			switch (mode) {
				FsDecDirect(): {
					ordinary = "decRc<" + fiType2cpp3(v.type, gctx) + ">(" + fi2cpp3varname2cpp(v.name) + ");";
					switch (v.type) {
						FiTypeName(name, typars): {
							if (name != "List") ordinary else {
								fi2cpp3varname2cpp("decRcList") + "<" + fiType2cpp3(typars[0], gctx) + ">(" + fi2cpp3varname2cpp(v.name) + ");";
							}
						}
						default: ordinary;
					}
				}
				FsDecReuse(w): {
					fiType2cpp3(v.type, gctx) + " " + fi2cpp3varname2cpp(w.name) + " = decRcReuse<" + fiType2cpp3(v.type, gctx) + ">(" + fi2cpp3varname2cpp(v.name) + ");";
				}
				FsDecFinish(): {
					"decRcFinish<" + fiType2cpp3(v.type, gctx) + ">(" + fi2cpp3varname2cpp(v.name) + ");";
				}
			}
		}
	}
	cpp + switch (stat.next) {
		Some(n): "\n" + fsStat2cpp3(n, gctx);
		None(): "";
	}
}

fsSwitch2cpp3(sw: FsSwitch, sw_cond: string, gctx: Cpp3GlobalContext) -> string {
	nondef_cases = filtermap(sw.cases, \c ->
		if (c.struct == "default") None() else Some(fsCase2cpp3(c, gctx))
	);
	all_cases = switch (find(sw.cases, \case -> case.struct == "default")) {
		Some(def_case): {
			concat(nondef_cases, [fsCase2cpp3(def_case, gctx)]);
		}
		None(): {
			path = findFlowPath(gctx.currentModule, true, gctx.config.config.includes, ".");
			src = fcFileSource(gctx.globEnv, path);
			concat(nondef_cases, [
				"default: " + fiWrapWithBraces(
					"std::cerr << \"unexpected case: \" << " + sw_cond + " << \" of type \" << string2std(Dyn::typeName(" + sw_cond + ")) << \" = '" + sw_cond + "' in switch\" << std::endl;\n" +
					"std::cerr << \"expected to have value of type '" + sw.type.name +  "' there\" << std::endl;\n" +
					"exit(1);\n" +
					"break;", gctx.config
				)
			]);
		}
	}
	"switch (" + sw_cond + ") {\n" +
		superglue(all_cases, \case -> strIndent(case), "\n") +
	"\n}";
}

fsCase2cpp3(c: FsCase, gctx: Cpp3GlobalContext) -> string {
	switch (lookupTree(gctx.program.names.structs, c.struct)) {
		Some(struct): {
			body = fsStat2cpp3(c.body, gctx);
			id = eitherMap(lookupTree(gctx.structs2cpp, c.struct), \str -> str.id, -1);
			"case " + i2s(id) + " /*" + c.struct + "*/: " +
				fiWrapWithBraces(fiUnwrap(body, "{", "}") + "\nbreak;", gctx.config);
		}
		None(): {
			// default case
			if (c.struct != "default") fail0("struct is not found") else {
				body = fsStat2cpp3(c.body, gctx);
				"default: " + fiWrapWithBraces(body, gctx.config);
			}
		}
	}
}

fsExp2cpp3(e : FsExp, gctx: Cpp3GlobalContext) -> string {
	switch (e) {
		FsConst(x,__): {
			switch (x) {
				FiVoid(__):      "void_value";
				FiBool(b, __):   b2s(b);
				FiInt(i, __):    i2s(i);
				FiDouble(d, __): { 
					s = d2s(d);
					if (strContains(s, ".") || strContains(s, "e")) s else s + ".0";
				}
			}
		}
		FsString(s, info,__): {
			args1 = switch (info.reuse) {
				Some(v): [fi2cpp3varname2cpp(v.name)];
				None(): []
			}
			codes = s2a(s);
			code2cpp = \c -> "static_cast<char16_t>(" + i2s(c) + ")";
			args2 = if (s == "") {
				args1
			} else if (!gctx.config.debug) {
				arrayPush(args1, "{" + superglue(codes, code2cpp, ", ") + "}");
			} else {
				if (exists(codes, \code -> 0xD800 <= code && code <= 0xDFFF)) {
					arrayPush(args1, "{" + superglue(codes, code2cpp, ", ") + "}");
				} else {
					s1 = concatStrings(mapi(codes, \i, code ->
						if (code == 0x09) "\\t" else
						if (code == 0x0a) "\\n" else
						if (code == 0x0d) "\\r" else
						if (code == 0x22) "\\\"" else
						if (code == 0x5c) "\\\\" else
						if (0 < code && code < 0x80) fromCharCode(code) else
						"\\u" + lpad(formatHex(code), "0", 4)
					));
					arrayPush(args1, "u\"" + s1 + "\"s");
				}
			}
			switch (info.reuse) {
				Some(__): "String::makeOrReuse" + "(" + strGlue(args2, ", ") + ")";
				None():   "String::make"        + "(" + strGlue(args2, ", ") + ")";
			}
		}
		FsCall(f, args, type,__): {
			s_args = map(args, \arg -> fsExp2cpp3(arg, gctx));
			s_args_len = fold(s_args, 0, \acc, s_arg -> acc + strlen(s_arg) + 2);
			s_args_all = if (gctx.config.debug || length(args) > 7 || s_args_len > 64 || exists(s_args, \s_arg -> strContains(s_arg, "\n"))) {
				strGlue(s_args, ",\n");
			} else {
				strGlue(s_args, ", ");
			}
			call_args = fiWrapWithPars(s_args_all, gctx.config);
			toplevel: Maybe<FiDeclaration> = lookupTree(gctx.program.names.toplevel, f.var.name);
			typars = switch (toplevel) {
				Some(fn): {
					f_raw_type = fsType(f);
					f_type = switch (f_raw_type) {
						FiTypeFunction(__,__): f_raw_type;
						default: fail0("call first argument must have a functional type, got: \n" + 
							pretFiType(f_raw_type) + "\n" +
							"while compiling: " + gctx.currentToplevelName + "\n" +
							"expression:\n" + fs2s(e)
						);
					}
					typars_instances = fiMatchTyparsOrdered(fn.type, f_type);
					if (length(typars_instances) == 0) "" else {
						"<" + superglue(typars_instances, \tp -> fiType2cpp3(tp, gctx), ", ") + ">";
					}
				}
				None(): "";
			}
			switch (f.info.kind) {
				FsVarGlobalFunc(): {
					fi2cpp3varname2cpp(f.var.name) + typars + call_args;
				}
				default: {
					fi2cpp3varname2cpp(f.var.name) + typars + "->callRc" + call_args;
				}
			}
		}
		FsInlineExp(fn_name, args, type,__): {
			switch (lookupTree(gctx.natives, fn_name)) {
				Some(nat): {
					toplevel: Maybe<FiDeclaration> = lookupTree(gctx.program.names.toplevel, fn_name);
					fn_type = FiTypeFunction(map(args, \arg -> FiFunArg("", fsType(arg))), type);
					typars = switch (toplevel) {
						Some(fn): {
							map(fiMatchTyparsOrdered(fn.type, fn_type), \tp -> fiType2cpp3(tp, gctx));
						}
						None(): [];
					}
					strSubstituteArgsGroup(
						strSubstituteArgs(nat.inlining, map(args, \arg -> fsExp2cpp3(arg, gctx))),
						typars, "T"
					);
				}
				None(): fail0("missing inlining of: " + fn_name);
			}
		}
		FsClosure(closure, lambda, info,__): {
			fun_type = "Fun<" + fiType2cpp3(lambda.type.returnType, gctx) + concatStrings(map(lambda.type.args, \arg -> ", " + fiType2cpp3(arg.type, gctx))) + ">";
			lambda_cpp = 
				"[" + superglue(closure, \v -> fi2cpp3varname2cpp(v.var.name), ", ") + "]" + " " + 
				fsArgs2cpp(lambda.args, gctx) + " " + fiWrapWithBraces(fsStat2cpp3(lambda.body, gctx), gctx.config);
			args1 = switch (info.reuse) {
				Some(v): [fi2cpp3varname2cpp(v.name), lambda_cpp];
				None(): [lambda_cpp];
			}
			args2 = concat(args1,
				filtermap(closure, \v ->
					if (fiTypeIsScalar(v.var.type)) None() else Some(fi2cpp3varname2cpp(v.var.name))
				)
			);
			switch (info.reuse) {
				Some(v): fun_type + "::makeOrReuse(" + strGlue(args2, ", ") + ")";
				None():  fun_type + "::make(" + strGlue(args2, ", ") + ")";
			}
		}
		FsCallPrim(op, es, type,__): {
			fsCallPrim2cpp3(e, gctx);
		}
		FsCast(e1, from, to,__): {
			from_cpp = fiType2cpp3(from, gctx);
			to_cpp = fiType2cpp3(to, gctx);
			e1_cpp = fsExp2cpp3(e1, gctx);
			if (from_cpp == to_cpp) e1_cpp else {
				def_cast = \-> "castRc<" + from_cpp + ", " + to_cpp + ">(" + e1_cpp + ")";
				switch (from) {
					FiTypeName(from_name, __): {
						switch (to) {
							FiTypeName(__,__): {
								// The cast from union to struct - fast branch (static_cast)
								"static_cast<" + to_cpp + ">(" + e1_cpp + ")";
							}
							default: def_cast();
						}
					}
					default: def_cast();
				}
			}
		}
		FsVarUse(v,__,__): {
			fi2cpp3varname2cpp(v.name);
		}
	}
}

fsCallPrimMulty2cpp3(op: FsPrim, es : [FsExp], gctx : Cpp3GlobalContext, acc: [FsExp]) -> [FsExp] {
	fold(es, acc, \ac, e -> {
		switch (e) {
			FsCallPrim(o, es1, __,__): {
				if (o == op) {
					fsCallPrimMulty2cpp3(op, es1, gctx, ac);
				} else {
					concat(ac, [e]);
				}
			}
			default: concat(ac, [e]);
		}
	});
}

fsCallPrim2cpp3(e : FsCallPrim, gctx : Cpp3GlobalContext) -> string {
	e2k = \x -> fsExp2cpp3(x, gctx);
	arg_type = if (length(e.es) > 0) fsType(e.es[0]) else FiTypeVoid();
	switch (e.op) {
		FcOrPrim(): {
			mult_args = fsCallPrimMulty2cpp3(FcOrPrim(), e.es, gctx, []);
			"(" + superglue(mult_args, e2k, " || ") + ")";
		}
		FcAndPrim(): {
			mult_args = fsCallPrimMulty2cpp3(FcAndPrim(), e.es, gctx, []);
			"(" + superglue(mult_args, e2k, " && ") + ")";
		}
		FcNotPrim(): "!" + e2k(e.es[0]);

		FcEqPrim():  fsCompare2cpp3(e, gctx);
		FcNePrim():  fsCompare2cpp3(e, gctx);
		FcLePrim():  fsCompare2cpp3(e, gctx);
		FcGePrim():  fsCompare2cpp3(e, gctx);
		FcLtPrim():  fsCompare2cpp3(e, gctx);
		FcGtPrim():  fsCompare2cpp3(e, gctx);

		FcPlusPrim():  {
			plus_args = fsCallPrimMulty2cpp3(FcPlusPrim(), e.es, gctx, []);
			if (e.type == FiTypeString()) {
				fold(tail(plus_args), e2k(plus_args[0]), \acc, arg ->
					"String::concatRc(" + acc + ", " + e2k(arg) + ")"
				);
			} else {
				"(" + superglue(plus_args, e2k, " + ") + ")";
			}
		}
		FcMinusPrim(): "(" + e2k(e.es[0]) + " - " + e2k(e.es[1]) + ")"; 
		FcMulPrim(): {
			mult_args = fsCallPrimMulty2cpp3(FcMulPrim(), e.es, gctx, []);
			"(" + superglue(mult_args, e2k, " * ") + ")";
		}
		FcDivPrim():   "(" + e2k(e.es[0]) + " / " + e2k(e.es[1]) + ")";
		FcModPrim(): {
			if (e.type == FiTypeDouble()) {
				"fmod(" + e2k(e.es[0]) + ", " + e2k(e.es[1]) + ")";
			} else {
				"(" + e2k(e.es[0]) + " % " + e2k(e.es[1]) + ")";
			}
		}
		FcNegPrim():   "-" + e2k(e.es[0]);
		FsArrayPrim(info): {
			vec_type = "Vec<" + fiType2cpp3(fiDearrayType(e.type), gctx) + ">";
			args1 = switch (info.reuse) {
				Some(v): [fi2cpp3varname2cpp(v.name)];
				None(): []
			}
			arr_s = map(e.es, e2k);
			s1 = strGlue(arr_s, ", ");
			args2 = if (length(e.es) == 0) {
				args1;
			} else if (!gctx.config.debug && strlen(s1) < 64 && !strContains(s1, "\n")) {
				arrayPush(args1, "{" + s1 + "}");
			} else {
				arrayPush(args1, "{\n" + strIndent(strGlue(arr_s, ",\n")) + "\n}");
			}
			switch (info.reuse) {
				Some(__): vec_type + "::makeOrReuse" + "(" + strGlue(args2, ", ") + ")";
				None():   vec_type + "::make"        + "(" + strGlue(args2, ", ") + ")";
			}
		}
		FcIndexPrim(): {
			switch (arg_type) {
				FiTypeFlow(): {
					e2k(e.es[0]) + "->getFlowRc1(" + e2k(e.es[1]) + ")";
				}
				FiTypeString(): {
					e2k(e.es[0]) + "->getChar(" + e2k(e.es[1]) + ")";
				}
				default:
					e2k(e.es[0]) + "->getRc1(" + e2k(e.es[1]) + ")";
			}
		}
		FcDerefPrim(): {
			switch (arg_type) {
				FiTypeFlow(): {
					e2k(e.es[0]) + "->getFlowRc1(0)";
				}
				default: {
					e2k(e.es[0]) + "->getRc1()";
				}
			}
		}
		FsRefPrim(info): {
			ref_type = "Ref<" + fiType2cpp3(fiDerefType(e.type), gctx) + ">";
			switch (info.reuse) {
				Some(v): ref_type + "::makeOrReuse" + "(" + fi2cpp3varname2cpp(v.name) + ", " + e2k(e.es[0]) + ")";
				None():  ref_type + "::make"        + "(" + e2k(e.es[0]) + ")";
			}
		}
		FsStructPrim(__, info): {
			struct_type = cast(e.type : FiType -> FiTypeName);
			struct_name = fiStructName2cpp3(struct_type, gctx);
			switch (info.reuse) {
				None(): {
					args = map(e.es, e2k);
					struct_name + "::template make<" + struct_name + "*>(" + strGlue(args, ", ") + ")";
				}
				Some(v): {
					args = concat([fi2cpp3varname2cpp(v.name)], map(e.es, e2k));
					struct_name + "::template makeOrReuse<" + struct_name + "*>(" + strGlue(args, ", ") + ")";
				}
			}
		}
		FsFieldPrim(field_name, field_ind): {
			if (field_name == "structname") {
				switch (arg_type) {
					FiTypeName(struct_name, params): {
						if (containsKeyTree(gctx.program.names.structs, struct_name)) {
							"String::make(u\"" + struct_name + "\")";
						} else {
							"String::make(Dyn::typeName(" + e2k(e.es[0]) + "->typeId()))";
						}
					}
					FiTypeFlow(): {
						"String::make(Dyn::typeName(" + e2k(e.es[0]) + "->typeId()))";
					}
					default: fail0("accees to field '" + field_name + "' of non-struct: " + fs2s(e.es[0]) + " of type: " + prettyFiType(dummyPretty, arg_type, makeSet()));
				}
			} else {
				switch (arg_type) {
					FiTypeFlow(): {
						e2k(e.es[0]) + "->getFlowRc1(String::make(u\"" + field_name + "\"))";
					}
					FiTypeName(struct_name,__): {
						e2k(e.es[0]) + "->template getRc1<" + i2s(field_ind) + ">()";
					}
					default: {
						fail0("accees to field '" + field_name + "' of non-struct: " + fs2s(e.es[0]) + " of type: " + prettyFiType(dummyPretty, arg_type, makeSet()));
					}
				}
			}
		}
		FsIntrinsicPrim(name): {
			if (name == "isUnitRc") {
				"isUnitRc(" + e2k(e.es[0]) + ")";
			} else if (name == "vecPush") {
				e2k(e.es[0]) + "->pushBack(" + e2k(e.es[1]) + ")";
			} else if (name == "vecReserve") {
				"Vec<" + fiType2cpp3(fiDearrayType(e.type), gctx) + ">::make(" + e2k(e.es[0]) + ")";
			} else if (name == "vecFill") {
				arr_type = fiType2cpp3(fiDearrayType(e.type), gctx);
				"Vec<" + arr_type + ">::make(" + 
					"std::move(std::vector<" + arr_type + ">(" + e2k(e.es[0]) + ", " + "makeDefInit<" + arr_type + ">))" +
				")";
			} else if (name == "vecLen") {
				e2k(e.es[0]) + "->size()";
			} else if (name == "vecSet") {
				e2k(e.es[0]) + "->setRc1(" + e2k(e.es[1]) + ", " + e2k(e.es[2]) + ")";
			} else {
				fail0("unsupported intrinsic primitive: '" + name + "'");
			}
		}
	}
}

fsCompare2cpp3(e : FsCallPrim, gctx : Cpp3GlobalContext) -> string {
	e2k = \x -> fsExp2cpp3(x, gctx);
	arg_type = if (length(e.es) > 0) fsType(e.es[0]) else FiTypeVoid();
	scalar_comparison = \ -> switch (e.op) {
		FcEqPrim():  "(" + e2k(e.es[0]) + " == " + e2k(e.es[1]) + ")";
		FcNePrim():  "(" + e2k(e.es[0]) + " != " + e2k(e.es[1]) + ")";
		FcLePrim():  "(" + e2k(e.es[0]) + " <= " + e2k(e.es[1]) + ")";
		FcGePrim():  "(" + e2k(e.es[0]) + " >= " + e2k(e.es[1]) + ")";
		FcLtPrim():  "(" + e2k(e.es[0]) + " < "  + e2k(e.es[1]) + ")";
		FcGtPrim():  "(" + e2k(e.es[0]) + " > "  + e2k(e.es[1]) + ")";
		default: fail0("not comparison: " + toString(e.op));
	}
	switch (arg_type) {
		FiTypeBool(): scalar_comparison();
		FiTypeInt(): scalar_comparison();
		FiTypeDouble(): scalar_comparison();
		default: {
			switch (e.op) {
				FcEqPrim():  "(compare<" + fiType2cpp3(arg_type, gctx) + ">(" + e2k(e.es[0]) + ", " + e2k(e.es[1]) + ") == 0)";
				FcNePrim():  "(compare<" + fiType2cpp3(arg_type, gctx) + ">(" + e2k(e.es[0]) + ", " + e2k(e.es[1]) + ") != 0)";
				FcLePrim():  "(compare<" + fiType2cpp3(arg_type, gctx) + ">(" + e2k(e.es[0]) + ", " + e2k(e.es[1]) + ") <= 0)";
				FcGePrim():  "(compare<" + fiType2cpp3(arg_type, gctx) + ">(" + e2k(e.es[0]) + ", " + e2k(e.es[1]) + ") >= 0)";
				FcLtPrim():  "(compare<" + fiType2cpp3(arg_type, gctx) + ">(" + e2k(e.es[0]) + ", " + e2k(e.es[1]) + ") < 0)";
				FcGtPrim():  "(compare<" + fiType2cpp3(arg_type, gctx) + ">(" + e2k(e.es[0]) + ", " + e2k(e.es[1]) + ") > 0)";
				default: fail0("not comparison: " + toString(e.op));
			}
		}
	}
}
