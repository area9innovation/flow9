Flow compiler (3rd generation)

fiTransEliminateUnionFields:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): Pair<int, int>(fin, fin);
			Cons(__, __): {
				__ : Pair<string, Json> = acc.head;
				__ : List<Pair<string, Json>> = acc.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExpShortcutTrivialSwitch:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): Pair<int, int>(fin, fin);
			Cons(__, __): {
				__ : Pair<string, Json> = acc.head;
				__ : List<Pair<string, Json>> = acc.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExplicitCastInSwitch1:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec.head;
				__ : List<Pair<string, Json>> = acc__spec.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiFixVarInSameStructType1:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec.head;
				__ : List<Pair<string, Json>> = acc__spec.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExpRenameRecurringVars1:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec.head;
				__ : List<Pair<string, Json>> = acc__spec.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExpMakeVarsUnique:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec__ssa_1 : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec__ssa_1.head;
				__ : List<Pair<string, Json>> = acc__spec__ssa_1.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExpInterpolateTypars:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec__ssa_1 : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec__ssa_1.head;
				__ : List<Pair<string, Json>> = acc__spec__ssa_1.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExpMakeCastsExplicit:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec__ssa_1 : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec__ssa_1.head;
				__ : List<Pair<string, Json>> = acc__spec__ssa_1.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiRemoveImplicitCasts:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec__ssa_1 : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec__ssa_1.head;
				__ : List<Pair<string, Json>> = acc__spec__ssa_1.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExpNormalizeSeqences:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				acc__spec : EmptyList<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> EmptyList<Pair<string, Json>>);
				Pair<int, int>(fin, fin)
			}
			Cons(__, __): {
				acc__spec__ssa_1 : Cons<Pair<string, Json>> = cast(acc : List<Pair<string, Json>> -> Cons<Pair<string, Json>>);
				__ : Pair<string, Json> = acc__spec__ssa_1.head;
				__ : List<Pair<string, Json>> = acc__spec__ssa_1.tail;
				skipJson2(json, jsonLength, start, ",")
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiRemoveUnusedVars:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = skipJson2(json, jsonLength, start, " ").second;
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): Pair<int, int>(fin, fin);
			Cons(__, __): skipJson2(json, jsonLength, start, ",");
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) ParsingAcc<Json>(JsonObject(list2array(acc)), start, (fin + 1)) else {
		if (((head.second >= jsonLength) || (head.first < 0))) ParsingAcc<Json>(JsonObject([]), start, start) else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) Pair<string, int>("", (head.second + 1)) else v
				} else Pair<string, int>("", (head.second + 1))
			};
			afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, ":");
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) ParsingAcc<Json>(JsonObject([]), start, start) else {
				parseJsonObject2(
					json, jsonLength, value.finish, Cons<Pair<string, Json>>(Pair<string, Json>(key.first, value.data), acc)
				)
			}
		}
	}
}

fiExtractCallNonScalarExp:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = {
		w0_0 : Pair<int, int> = {
			skipJson2(
				json, jsonLength, start, w1_0 : string = " ";
				w1_0
			)
		};
		w0_0.second
	};
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				w2_0 : Pair<int, int> = Pair<int, int>(fin, fin);
				w2_0
			}
			Cons(__, __): {
				w3_0 : Pair<int, int> = {
					skipJson2(
						json, jsonLength, start, w4_0 : string = ",";
						w4_0
					)
				};
				w3_0
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) {
		ParsingAcc<Json>(w5_0 : JsonObject = {
			JsonObject(w6_0 : [Pair<string, Json>] = list2array(acc);
			w6_0)
		};
		w5_0, start, (fin + 1))
	} else {
		if (((head.second >= jsonLength) || (head.first < 0))) {
			ParsingAcc<Json>(w7_0 : JsonObject = {
				JsonObject(w8_0 : [Pair<string, Json>] = [];
				w8_0)
			};
			w7_0, start, start)
		} else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) {
						Pair<string, int>(w9_0 : string = "";
						w9_0, (head.second + 1))
					} else v
				} else {
					Pair<string, int>(w10_0 : string = "";
					w10_0, (head.second + 1))
				}
			};
			afterColon : Pair<int, int> = {
				skipJson2(
					json, jsonLength, key.second, w11_0 : string = ":";
					w11_0
				)
			};
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) {
				ParsingAcc<Json>(w12_0 : JsonObject = {
					JsonObject(w13_0 : [Pair<string, Json>] = [];
					w13_0)
				};
				w12_0, start, start)
			} else {
				parseJsonObject2(
					json, jsonLength, value.finish, w14_0 : Cons<Pair<string, Json>> = {
						Cons<Pair<string, Json>>(w15_0 : Pair<string, Json> = {
							Pair<string, Json>(w16_0 : string = key.first;
							w16_0, w17_0 : Json = value.data;
							w17_0)
						};
						w15_0, acc)
					};
					w14_0
				)
			}
		}
	}
}

original expression:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	fin : int = {
		w0_0 : Pair<int, int> = {
			skipJson2(
				json, jsonLength, start, w1_0 : string = " ";
				w1_0
			)
		};
		w0_0.second
	};
	head : Pair<int, int> = {
		switch (acc) {
			EmptyList(): {
				w2_0 : Pair<int, int> = Pair<int, int>(fin, fin);
				w2_0
			}
			Cons(__, __): {
				w3_0 : Pair<int, int> = {
					skipJson2(
						json, jsonLength, start, w4_0 : string = ",";
						w4_0
					)
				};
				w3_0
			}
		}
	};
	charCode : int = getCharCodeAt(json, head.second);
	if ((getCharCodeAt(json, fin) == 125)) {
		ParsingAcc<Json>(w5_0 : JsonObject = {
			JsonObject(w6_0 : [Pair<string, Json>] = list2array(acc);
			w6_0)
		};
		w5_0, start, (fin + 1))
	} else {
		if (((head.second >= jsonLength) || (head.first < 0))) {
			ParsingAcc<Json>(w7_0 : JsonObject = {
				JsonObject(w8_0 : [Pair<string, Json>] = [];
				w8_0)
			};
			w7_0, start, start)
		} else {
			key : Pair<string, int> = {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
					if ((v.second == (head.second + 1))) {
						Pair<string, int>(w9_0 : string = "";
						w9_0, (head.second + 1))
					} else v
				} else {
					Pair<string, int>(w10_0 : string = "";
					w10_0, (head.second + 1))
				}
			};
			afterColon : Pair<int, int> = {
				skipJson2(
					json, jsonLength, key.second, w11_0 : string = ":";
					w11_0
				)
			};
			value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
			if (
				(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
			) {
				ParsingAcc<Json>(w12_0 : JsonObject = {
					JsonObject(w13_0 : [Pair<string, Json>] = [];
					w13_0)
				};
				w12_0, start, start)
			} else {
				parseJsonObject2(
					json, jsonLength, value.finish, w14_0 : Cons<Pair<string, Json>> = {
						Cons<Pair<string, Json>>(w15_0 : Pair<string, Json> = {
							Pair<string, Json>(w16_0 : string = key.first;
							w16_0, w17_0 : Json = value.data;
							w17_0)
						};
						w15_0, acc)
					};
					w14_0
				)
			}
		}
	}
}
pulled and original are equal: false
statements are pulled:
\json : string, jsonLength : int, start : int, acc : List<Pair<string, Json>> -> ParsingAcc<Json> {
	w1_0 : string = " ";
	w0_0 : Pair<int, int> = skipJson2(json, jsonLength, start, w1_0);
	fin : int = w0_0.second;
	switch (acc) {
		EmptyList(): {
			w2_0 : Pair<int, int> = Pair<int, int>(fin, fin);
			head : Pair<int, int> = w2_0;
			charCode : int = getCharCodeAt(json, head.second);
			if ((getCharCodeAt(json, fin) == 125)) {
				w6_0 : [Pair<string, Json>] = list2array(acc);
				w5_0 : JsonObject = JsonObject(w6_0);
				ParsingAcc<Json>(w5_0, start, (fin + 1))
			} else {
				if (((head.second >= jsonLength) || (head.first < 0))) {
					w8_0 : [Pair<string, Json>] = [];
					w7_0 : JsonObject = JsonObject(w8_0);
					ParsingAcc<Json>(w7_0, start, start)
				} else {
					if ((charCode == 34)) {
						v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
						if ((v.second == (head.second + 1))) {
							w9_0 : string = "";
							key : Pair<string, int> = Pair<string, int>(w9_0, (head.second + 1));
							w11_0 : string = ":";
							afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, w11_0);
							value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
							if (
								(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
							) {
								w13_0 : [Pair<string, Json>] = [];
								w12_0 : JsonObject = JsonObject(w13_0);
								ParsingAcc<Json>(w12_0, start, start)
							} else {
								w16_0 : string = key.first;
								w17_0 : Json = value.data;
								w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0, w17_0);
								w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0, acc);
								parseJsonObject2(json, jsonLength, value.finish, w14_0)
							}
						} else {
							key : Pair<string, int> = v;
							w11_0 : string = ":";
							afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, w11_0);
							value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
							if (
								(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
							) {
								w13_0 : [Pair<string, Json>] = [];
								w12_0 : JsonObject = JsonObject(w13_0);
								ParsingAcc<Json>(w12_0, start, start)
							} else {
								w16_0 : string = key.first;
								w17_0 : Json = value.data;
								w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0, w17_0);
								w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0, acc);
								parseJsonObject2(json, jsonLength, value.finish, w14_0)
							}
						}
					} else {
						w10_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w10_0, (head.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, w11_0);
						value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
						if (
							(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
						) {
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0);
							ParsingAcc<Json>(w12_0, start, start)
						} else {
							w16_0 : string = key.first;
							w17_0 : Json = value.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0, w17_0);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0, acc);
							parseJsonObject2(json, jsonLength, value.finish, w14_0)
						}
					}
				}
			}
		}
		Cons(__, __): {
			w4_0 : string = ",";
			w3_0 : Pair<int, int> = skipJson2(json, jsonLength, start, w4_0);
			head : Pair<int, int> = w3_0;
			charCode : int = getCharCodeAt(json, head.second);
			if ((getCharCodeAt(json, fin) == 125)) {
				w6_0 : [Pair<string, Json>] = list2array(acc);
				w5_0 : JsonObject = JsonObject(w6_0);
				ParsingAcc<Json>(w5_0, start, (fin + 1))
			} else {
				if (((head.second >= jsonLength) || (head.first < 0))) {
					w8_0 : [Pair<string, Json>] = [];
					w7_0 : JsonObject = JsonObject(w8_0);
					ParsingAcc<Json>(w7_0, start, start)
				} else {
					if ((charCode == 34)) {
						v : Pair<string, int> = deserializeRestOfString2(json, (head.second + 1));
						if ((v.second == (head.second + 1))) {
							w9_0 : string = "";
							key : Pair<string, int> = Pair<string, int>(w9_0, (head.second + 1));
							w11_0 : string = ":";
							afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, w11_0);
							value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
							if (
								(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
							) {
								w13_0 : [Pair<string, Json>] = [];
								w12_0 : JsonObject = JsonObject(w13_0);
								ParsingAcc<Json>(w12_0, start, start)
							} else {
								w16_0 : string = key.first;
								w17_0 : Json = value.data;
								w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0, w17_0);
								w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0, acc);
								parseJsonObject2(json, jsonLength, value.finish, w14_0)
							}
						} else {
							key : Pair<string, int> = v;
							w11_0 : string = ":";
							afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, w11_0);
							value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
							if (
								(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
							) {
								w13_0 : [Pair<string, Json>] = [];
								w12_0 : JsonObject = JsonObject(w13_0);
								ParsingAcc<Json>(w12_0, start, start)
							} else {
								w16_0 : string = key.first;
								w17_0 : Json = value.data;
								w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0, w17_0);
								w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0, acc);
								parseJsonObject2(json, jsonLength, value.finish, w14_0)
							}
						}
					} else {
						w10_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w10_0, (head.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2(json, jsonLength, key.second, w11_0);
						value : ParsingAcc<Json> = doParseJson(json, jsonLength, afterColon.second);
						if (
							(((key.second == (head.second + 1)) || (afterColon.first < 0)) || (value.start == value.finish))
						) {
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0);
							ParsingAcc<Json>(w12_0, start, start)
						} else {
							w16_0 : string = key.first;
							w17_0 : Json = value.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0, w17_0);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0, acc);
							parseJsonObject2(json, jsonLength, value.finish, w14_0)
						}
					}
				}
			}
		}
	}
}
FS RAW:
return []\json:string, jsonLength:int, start:int, acc:List<Pair<string, Json>> -> {
	w1_0 : string = " ";
	w0_0 : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, start/*not last*/, w1_0/*not last*/);
	fin : int = w0_0/*not last*/.second;
	switch (acc/*not last*/) {
		EmptyList(): w2_0 : Pair<int, int> = Pair<int, int>(fin/*not last*/, fin/*not last*/);
		head : Pair<int, int> = w2_0/*not last*/;
		charCode : int = getCharCodeAt/*not last*/(json/*not last*/, head/*not last*/.second);
		if ((getCharCodeAt/*not last*/(json/*not last*/, fin/*not last*/) == 125))
			w6_0 : [Pair<string, Json>] = list2array/*not last*/(acc/*not last*/);
			w5_0 : JsonObject = JsonObject(w6_0/*not last*/);
			return ParsingAcc<Json>(w5_0/*not last*/, start/*not last*/, (fin/*not last*/ + 1));
		else
			if (((head/*not last*/.second >= jsonLength/*not last*/) || (head/*not last*/.first < 0)))
				w8_0 : [Pair<string, Json>] = [];
				w7_0 : JsonObject = JsonObject(w8_0/*not last*/);
				return ParsingAcc<Json>(w7_0/*not last*/, start/*not last*/, start/*not last*/);
			else
				if ((charCode/*not last*/ == 34))
					v : Pair<string, int> = deserializeRestOfString2/*not last*/(json/*not last*/, (head/*not last*/.second + 1));
					if ((v/*not last*/.second == (head/*not last*/.second + 1)))
						w9_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w9_0/*not last*/, (head/*not last*/.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							return parseJsonObject2/*not last*/(json/*not last*/, jsonLength/*not last*/, value/*not last*/.finish, w14_0/*not last*/);
					else
						key : Pair<string, int> = v/*not last*/;
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							return parseJsonObject2/*not last*/(json/*not last*/, jsonLength/*not last*/, value/*not last*/.finish, w14_0/*not last*/);
				else
					w10_0 : string = "";
					key : Pair<string, int> = Pair<string, int>(w10_0/*not last*/, (head/*not last*/.second + 1));
					w11_0 : string = ":";
					afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
					value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
					if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
						w13_0 : [Pair<string, Json>] = [];
						w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
						return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
					else
						w16_0 : string = key/*not last*/.first;
						w17_0 : Json = value/*not last*/.data;
						w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
						w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
						return parseJsonObject2/*not last*/(json/*not last*/, jsonLength/*not last*/, value/*not last*/.finish, w14_0/*not last*/);
		Cons(__, __): w4_0 : string = ",";
		w3_0 : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, start/*not last*/, w4_0/*not last*/);
		head : Pair<int, int> = w3_0/*not last*/;
		charCode : int = getCharCodeAt/*not last*/(json/*not last*/, head/*not last*/.second);
		if ((getCharCodeAt/*not last*/(json/*not last*/, fin/*not last*/) == 125))
			w6_0 : [Pair<string, Json>] = list2array/*not last*/(acc/*not last*/);
			w5_0 : JsonObject = JsonObject(w6_0/*not last*/);
			return ParsingAcc<Json>(w5_0/*not last*/, start/*not last*/, (fin/*not last*/ + 1));
		else
			if (((head/*not last*/.second >= jsonLength/*not last*/) || (head/*not last*/.first < 0)))
				w8_0 : [Pair<string, Json>] = [];
				w7_0 : JsonObject = JsonObject(w8_0/*not last*/);
				return ParsingAcc<Json>(w7_0/*not last*/, start/*not last*/, start/*not last*/);
			else
				if ((charCode/*not last*/ == 34))
					v : Pair<string, int> = deserializeRestOfString2/*not last*/(json/*not last*/, (head/*not last*/.second + 1));
					if ((v/*not last*/.second == (head/*not last*/.second + 1)))
						w9_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w9_0/*not last*/, (head/*not last*/.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							return parseJsonObject2/*not last*/(json/*not last*/, jsonLength/*not last*/, value/*not last*/.finish, w14_0/*not last*/);
					else
						key : Pair<string, int> = v/*not last*/;
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							return parseJsonObject2/*not last*/(json/*not last*/, jsonLength/*not last*/, value/*not last*/.finish, w14_0/*not last*/);
				else
					w10_0 : string = "";
					key : Pair<string, int> = Pair<string, int>(w10_0/*not last*/, (head/*not last*/.second + 1));
					w11_0 : string = ":";
					afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
					value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
					if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
						w13_0 : [Pair<string, Json>] = [];
						w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
						return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
					else
						w16_0 : string = key/*not last*/.first;
						w17_0 : Json = value/*not last*/.data;
						w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
						w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
						return parseJsonObject2/*not last*/(json/*not last*/, jsonLength/*not last*/, value/*not last*/.finish, w14_0/*not last*/);
	}
};
FS TAILCALL:
return []\json:string, jsonLength:int, start:int, acc:List<Pair<string, Json>> -> {
	w1_0 : string = " ";
	w0_0 : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, start/*not last*/, w1_0/*not last*/);
	fin : int = w0_0/*not last*/.second;
	switch (acc/*not last*/) {
		EmptyList(): w2_0 : Pair<int, int> = Pair<int, int>(fin/*not last*/, fin/*not last*/);
		head : Pair<int, int> = w2_0/*not last*/;
		charCode : int = getCharCodeAt/*not last*/(json/*not last*/, head/*not last*/.second);
		if ((getCharCodeAt/*not last*/(json/*not last*/, fin/*not last*/) == 125))
			w6_0 : [Pair<string, Json>] = list2array/*not last*/(acc/*not last*/);
			w5_0 : JsonObject = JsonObject(w6_0/*not last*/);
			return ParsingAcc<Json>(w5_0/*not last*/, start/*not last*/, (fin/*not last*/ + 1));
		else
			if (((head/*not last*/.second >= jsonLength/*not last*/) || (head/*not last*/.first < 0)))
				w8_0 : [Pair<string, Json>] = [];
				w7_0 : JsonObject = JsonObject(w8_0/*not last*/);
				return ParsingAcc<Json>(w7_0/*not last*/, start/*not last*/, start/*not last*/);
			else
				if ((charCode/*not last*/ == 34))
					v : Pair<string, int> = deserializeRestOfString2/*not last*/(json/*not last*/, (head/*not last*/.second + 1));
					if ((v/*not last*/.second == (head/*not last*/.second + 1)))
						w9_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w9_0/*not last*/, (head/*not last*/.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
					else
						key : Pair<string, int> = v/*not last*/;
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
				else
					w10_0 : string = "";
					key : Pair<string, int> = Pair<string, int>(w10_0/*not last*/, (head/*not last*/.second + 1));
					w11_0 : string = ":";
					afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
					value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
					if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
						w13_0 : [Pair<string, Json>] = [];
						w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
						return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
					else
						w16_0 : string = key/*not last*/.first;
						w17_0 : Json = value/*not last*/.data;
						w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
						w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
						start__tailcall__ : int = value/*not last*/.finish;
						acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
						{
							start/*not last*/ := start__tailcall__/*not last*/;
							acc/*not last*/ := acc__tailcall__/*not last*/;
							tailcall
						}
		Cons(__, __): w4_0 : string = ",";
		w3_0 : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, start/*not last*/, w4_0/*not last*/);
		head : Pair<int, int> = w3_0/*not last*/;
		charCode : int = getCharCodeAt/*not last*/(json/*not last*/, head/*not last*/.second);
		if ((getCharCodeAt/*not last*/(json/*not last*/, fin/*not last*/) == 125))
			w6_0 : [Pair<string, Json>] = list2array/*not last*/(acc/*not last*/);
			w5_0 : JsonObject = JsonObject(w6_0/*not last*/);
			return ParsingAcc<Json>(w5_0/*not last*/, start/*not last*/, (fin/*not last*/ + 1));
		else
			if (((head/*not last*/.second >= jsonLength/*not last*/) || (head/*not last*/.first < 0)))
				w8_0 : [Pair<string, Json>] = [];
				w7_0 : JsonObject = JsonObject(w8_0/*not last*/);
				return ParsingAcc<Json>(w7_0/*not last*/, start/*not last*/, start/*not last*/);
			else
				if ((charCode/*not last*/ == 34))
					v : Pair<string, int> = deserializeRestOfString2/*not last*/(json/*not last*/, (head/*not last*/.second + 1));
					if ((v/*not last*/.second == (head/*not last*/.second + 1)))
						w9_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w9_0/*not last*/, (head/*not last*/.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
					else
						key : Pair<string, int> = v/*not last*/;
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
				else
					w10_0 : string = "";
					key : Pair<string, int> = Pair<string, int>(w10_0/*not last*/, (head/*not last*/.second + 1));
					w11_0 : string = ":";
					afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
					value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
					if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
						w13_0 : [Pair<string, Json>] = [];
						w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
						return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
					else
						w16_0 : string = key/*not last*/.first;
						w17_0 : Json = value/*not last*/.data;
						w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
						w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
						start__tailcall__ : int = value/*not last*/.finish;
						acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
						{
							start/*not last*/ := start__tailcall__/*not last*/;
							acc/*not last*/ := acc__tailcall__/*not last*/;
							tailcall
						}
	}
};
MEM RAW:
return []\json:string, jsonLength:int, start:int, acc:List<Pair<string, Json>> -> {
	w1_0 : string = " ";
	w0_0 : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, start/*not last*/, w1_0/*not last*/);
	fin : int = w0_0/*not last*/.second;
	switch (acc/*not last*/) {
		EmptyList(): w2_0 : Pair<int, int> = Pair<int, int>(fin/*not last*/, fin/*not last*/);
		head : Pair<int, int> = w2_0/*not last*/;
		charCode : int = getCharCodeAt/*not last*/(json/*not last*/, head/*not last*/.second);
		if ((getCharCodeAt/*not last*/(json/*not last*/, fin/*not last*/) == 125))
			w6_0 : [Pair<string, Json>] = list2array/*not last*/(acc/*not last*/);
			w5_0 : JsonObject = JsonObject(w6_0/*not last*/);
			return ParsingAcc<Json>(w5_0/*not last*/, start/*not last*/, (fin/*not last*/ + 1));
		else
			if (((head/*not last*/.second >= jsonLength/*not last*/) || (head/*not last*/.first < 0)))
				w8_0 : [Pair<string, Json>] = [];
				w7_0 : JsonObject = JsonObject(w8_0/*not last*/);
				return ParsingAcc<Json>(w7_0/*not last*/, start/*not last*/, start/*not last*/);
			else
				if ((charCode/*not last*/ == 34))
					v : Pair<string, int> = deserializeRestOfString2/*not last*/(json/*not last*/, (head/*not last*/.second + 1));
					if ((v/*not last*/.second == (head/*not last*/.second + 1)))
						w9_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w9_0/*not last*/, (head/*not last*/.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
					else
						key : Pair<string, int> = v/*not last*/;
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
				else
					w10_0 : string = "";
					key : Pair<string, int> = Pair<string, int>(w10_0/*not last*/, (head/*not last*/.second + 1));
					w11_0 : string = ":";
					afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
					value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
					if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
						w13_0 : [Pair<string, Json>] = [];
						w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
						return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
					else
						w16_0 : string = key/*not last*/.first;
						w17_0 : Json = value/*not last*/.data;
						w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
						w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
						start__tailcall__ : int = value/*not last*/.finish;
						acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
						{
							start/*not last*/ := start__tailcall__/*not last*/;
							acc/*not last*/ := acc__tailcall__/*not last*/;
							tailcall
						}
		Cons(__, __): w4_0 : string = ",";
		w3_0 : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, start/*not last*/, w4_0/*not last*/);
		head : Pair<int, int> = w3_0/*not last*/;
		charCode : int = getCharCodeAt/*not last*/(json/*not last*/, head/*not last*/.second);
		if ((getCharCodeAt/*not last*/(json/*not last*/, fin/*not last*/) == 125))
			w6_0 : [Pair<string, Json>] = list2array/*not last*/(acc/*not last*/);
			w5_0 : JsonObject = JsonObject(w6_0/*not last*/);
			return ParsingAcc<Json>(w5_0/*not last*/, start/*not last*/, (fin/*not last*/ + 1));
		else
			if (((head/*not last*/.second >= jsonLength/*not last*/) || (head/*not last*/.first < 0)))
				w8_0 : [Pair<string, Json>] = [];
				w7_0 : JsonObject = JsonObject(w8_0/*not last*/);
				return ParsingAcc<Json>(w7_0/*not last*/, start/*not last*/, start/*not last*/);
			else
				if ((charCode/*not last*/ == 34))
					v : Pair<string, int> = deserializeRestOfString2/*not last*/(json/*not last*/, (head/*not last*/.second + 1));
					if ((v/*not last*/.second == (head/*not last*/.second + 1)))
						w9_0 : string = "";
						key : Pair<string, int> = Pair<string, int>(w9_0/*not last*/, (head/*not last*/.second + 1));
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
					else
						key : Pair<string, int> = v/*not last*/;
						w11_0 : string = ":";
						afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
						value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
						if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
							w13_0 : [Pair<string, Json>] = [];
							w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
							return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
						else
							w16_0 : string = key/*not last*/.first;
							w17_0 : Json = value/*not last*/.data;
							w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
							w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
							start__tailcall__ : int = value/*not last*/.finish;
							acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
							{
								start/*not last*/ := start__tailcall__/*not last*/;
								acc/*not last*/ := acc__tailcall__/*not last*/;
								tailcall
							}
				else
					w10_0 : string = "";
					key : Pair<string, int> = Pair<string, int>(w10_0/*not last*/, (head/*not last*/.second + 1));
					w11_0 : string = ":";
					afterColon : Pair<int, int> = skipJson2/*not last*/(json/*not last*/, jsonLength/*not last*/, key/*not last*/.second, w11_0/*not last*/);
					value : ParsingAcc<Json> = doParseJson/*not last*/(json/*not last*/, jsonLength/*not last*/, afterColon/*not last*/.second);
					if ((((key/*not last*/.second == (head/*not last*/.second + 1)) || (afterColon/*not last*/.first < 0)) || (value/*not last*/.start == value/*not last*/.finish)))
						w13_0 : [Pair<string, Json>] = [];
						w12_0 : JsonObject = JsonObject(w13_0/*not last*/);
						return ParsingAcc<Json>(w12_0/*not last*/, start/*not last*/, start/*not last*/);
					else
						w16_0 : string = key/*not last*/.first;
						w17_0 : Json = value/*not last*/.data;
						w15_0 : Pair<string, Json> = Pair<string, Json>(w16_0/*not last*/, w17_0/*not last*/);
						w14_0 : Cons<Pair<string, Json>> = Cons<Pair<string, Json>>(w15_0/*not last*/, acc/*not last*/);
						start__tailcall__ : int = value/*not last*/.finish;
						acc__tailcall__ : List<Pair<string, Json>> = w14_0/*not last*/;
						{
							start/*not last*/ := start__tailcall__/*not last*/;
							acc/*not last*/ := acc__tailcall__/*not last*/;
							tailcall
						}
	}
};
done in 11.74s
