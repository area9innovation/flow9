Flow compiler (3rd generation)

unused: [x]
fiTransEliminateUnionFields:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExpShortcutTrivialSwitch:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExplicitCastInSwitch1:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiFixVarInSameStructType1:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExpRenameRecurringVars1:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExpMakeVarsUnique:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExpInterpolateTypars:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExpMakeCastsExplicit:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiRemoveImplicitCasts:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExpNormalizeSeqences:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiRemoveUnusedVars:
\x : ref () -> int -> () -> int \ -> int ((*x)() + 1)

fiExtractCallNonScalarExp:
\x : ref () -> int -> () -> int {
	w0_0 : () -> int = {
		\ -> int {
			(w1_0 : () -> int = (*x);
			w1_0(
				
			) + 1)
		}
	};
	w0_0
}

original expression:
\x : ref () -> int -> () -> int {
	w0_0 : () -> int = {
		\ -> int {
			(w1_0 : () -> int = (*x);
			w1_0(
				
			) + 1)
		}
	};
	w0_0
}
pulled and original are equal: false
statements are pulled:
\x : ref () -> int -> () -> int {
	w0_0 : () -> int = {
		\ -> int {
			w1_0 : () -> int = (*x);
			(w1_0() + 1)
		}
	};
	w0_0
}
FS RAW:
return []\x:ref () -> int -> {
	w0_0 : () -> int = [x]\ -> {
		w1_0 : () -> int = (*x/*not last*/);
		return (w1_0/*not last*/() + 1);
	};
	return w0_0/*not last*/;
};
FS TAILCALL:
return []\x:ref () -> int -> {
	w0_0 : () -> int = [x]\ -> {
		w1_0 : () -> int = (*x/*not last*/);
		return (w1_0/*not last*/() + 1);
	};
	return w0_0/*not last*/;
};
fsStatLastVarUsage:
FsRet(
	FsLambda(
		[],
		[FiFunArg("x", FiTypeRef(FiTypeFunction([], FiTypeInt())))],
		FsLet(
			"w0_0",
			FiTypeFunction([], FiTypeInt()),
			FsLambda(
				[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
				[],
				FsLet(
					"w1_0",
					FiTypeFunction([], FiTypeInt()),
					FsCallPrim(
						FsDerefPrim(),
						[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
						FiTypeFunction([], FiTypeInt())
					),
					FsRet(
						FsCallPrim(
							FsPlusPrim(),
							[
								FsCall(
									FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
									[],
									FiTypeInt()
								),
								FiInt(1, 611)
							],
							FiTypeInt()
						)
					)
				),
				FiTypeFunction([], FiTypeInt())
			),
			FsRet(FsVar("w0_0", false, FiTypeFunction([], FiTypeInt())))
		),
		FiTypeFunction(
			[FiFunArg("x", FiTypeRef(FiTypeFunction([], FiTypeInt())))],
			FiTypeFunction([], FiTypeInt())
		)
	)
)
fsExpLastVarUsage:
FsLambda(
	[],
	[FiFunArg("x", FiTypeRef(FiTypeFunction([], FiTypeInt())))],
	FsLet(
		"w0_0",
		FiTypeFunction([], FiTypeInt()),
		FsLambda(
			[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
			[],
			FsLet(
				"w1_0",
				FiTypeFunction([], FiTypeInt()),
				FsCallPrim(
					FsDerefPrim(),
					[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
					FiTypeFunction([], FiTypeInt())
				),
				FsRet(
					FsCallPrim(
						FsPlusPrim(),
						[
							FsCall(
								FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
								[],
								FiTypeInt()
							),
							FiInt(1, 611)
						],
						FiTypeInt()
					)
				)
			),
			FiTypeFunction([], FiTypeInt())
		),
		FsRet(FsVar("w0_0", false, FiTypeFunction([], FiTypeInt())))
	),
	FiTypeFunction(
		[FiFunArg("x", FiTypeRef(FiTypeFunction([], FiTypeInt())))],
		FiTypeFunction([], FiTypeInt())
	)
)
fsStatLastVarUsage:
FsLet(
	"w0_0",
	FiTypeFunction([], FiTypeInt()),
	FsLambda(
		[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
		[],
		FsLet(
			"w1_0",
			FiTypeFunction([], FiTypeInt()),
			FsCallPrim(
				FsDerefPrim(),
				[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
				FiTypeFunction([], FiTypeInt())
			),
			FsRet(
				FsCallPrim(
					FsPlusPrim(),
					[
						FsCall(
							FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
							[],
							FiTypeInt()
						),
						FiInt(1, 611)
					],
					FiTypeInt()
				)
			)
		),
		FiTypeFunction([], FiTypeInt())
	),
	FsRet(FsVar("w0_0", false, FiTypeFunction([], FiTypeInt())))
)
fsStatLastVarUsage:
FsRet(FsVar("w0_0", false, FiTypeFunction([], FiTypeInt())))
fsExpLastVarUsage:
FsVar("w0_0", false, FiTypeFunction([], FiTypeInt()))
analysing var:  w0_0, last: true
fsExpLastVarUsage:
FsLambda(
	[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
	[],
	FsLet(
		"w1_0",
		FiTypeFunction([], FiTypeInt()),
		FsCallPrim(
			FsDerefPrim(),
			[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
			FiTypeFunction([], FiTypeInt())
		),
		FsRet(
			FsCallPrim(
				FsPlusPrim(),
				[
					FsCall(
						FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
						[],
						FiTypeInt()
					),
					FiInt(1, 611)
				],
				FiTypeInt()
			)
		)
	),
	FiTypeFunction([], FiTypeInt())
)
fsStatLastVarUsage:
FsLet(
	"w1_0",
	FiTypeFunction([], FiTypeInt()),
	FsCallPrim(
		FsDerefPrim(),
		[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
		FiTypeFunction([], FiTypeInt())
	),
	FsRet(
		FsCallPrim(
			FsPlusPrim(),
			[
				FsCall(
					FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
					[],
					FiTypeInt()
				),
				FiInt(1, 611)
			],
			FiTypeInt()
		)
	)
)
fsStatLastVarUsage:
FsRet(
	FsCallPrim(
		FsPlusPrim(),
		[
			FsCall(
				FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
				[],
				FiTypeInt()
			),
			FiInt(1, 611)
		],
		FiTypeInt()
	)
)
fsExpLastVarUsage:
FsCallPrim(
	FsPlusPrim(),
	[
		FsCall(
			FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
			[],
			FiTypeInt()
		),
		FiInt(1, 611)
	],
	FiTypeInt()
)
fsExpLastVarUsage:
FiInt(1, 611)
fsExpLastVarUsage:
FsCall(
	FsVar("w1_0", false, FiTypeFunction([], FiTypeInt())),
	[],
	FiTypeInt()
)
fsExpLastVarUsage:
FsVar("w1_0", false, FiTypeFunction([], FiTypeInt()))
analysing var:  w1_0, last: true
fsExpLastVarUsage:
FsCallPrim(
	FsDerefPrim(),
	[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
	FiTypeFunction([], FiTypeInt())
)
fsExpLastVarUsage:
FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))
analysing var:  x, last: true
fsStatLastVarUsage:
s:
return []\x:ref () -> int -> {
	w0_0 : () -> int = [x]\ -> {
		w1_0 : () -> int = (*x/*not last*/);
		return (w1_0/*not last*/() + 1);
	};
	return w0_0/*not last*/;
};
s1:
return []\x:ref () -> int -> {
	w0_0 : () -> int = [x]\ -> {
		w1_0 : () -> int = (*x/*last*/);
		return (w1_0/*last*/() + 1);
	};
	return w0_0/*last*/;
};
s RAW:
FsRet(
	FsLambda(
		[],
		[FiFunArg("x", FiTypeRef(FiTypeFunction([], FiTypeInt())))],
		FsLet(
			"w0_0",
			FiTypeFunction([], FiTypeInt()),
			FsLambda(
				[FsVar("x", false, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
				[],
				FsLet(
					"w1_0",
					FiTypeFunction([], FiTypeInt()),
					FsCallPrim(
						FsDerefPrim(),
						[FsVar("x", true, FiTypeRef(FiTypeFunction([], FiTypeInt())))],
						FiTypeFunction([], FiTypeInt())
					),
					FsRet(
						FsCallPrim(
							FsPlusPrim(),
							[
								FsCall(
									FsVar("w1_0", true, FiTypeFunction([], FiTypeInt())),
									[],
									FiTypeInt()
								),
								FiInt(1, 611)
							],
							FiTypeInt()
						)
					)
				),
				FiTypeFunction([], FiTypeInt())
			),
			FsRet(FsVar("w0_0", true, FiTypeFunction([], FiTypeInt())))
		),
		FiTypeFunction(
			[FiFunArg("x", FiTypeRef(FiTypeFunction([], FiTypeInt())))],
			FiTypeFunction([], FiTypeInt())
		)
	)
)

unused: [x]
MEM RAW:
return []\x:ref () -> int -> {
	w0_0 : () -> int = [x]\ -> {
		w1_0 : () -> int = (*x/*last*/);
		return (w1_0/*last*/() + 1);
	};
	{
		decRc(x/*not last*/, -1);
		return w0_0/*last*/;
	}
};
unused: [acc__ssa_2]
unused: [acc__ssa_3]
unused: [acc__ssa_4]
unused: [acc__ssa_5]
unused: [acc__ssa_6]
unused: [acc__ssa_7]
unused: [acc__ssa_8]
done in 3.04s
