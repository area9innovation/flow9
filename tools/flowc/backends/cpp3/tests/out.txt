Flow compiler (3rd generation)

fiTransEliminateUnionFields:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v.first, start, v.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExplicitCastInSwitch1:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v.first, start, v.second)
							}
						}
					}
				}
			}
		}
	}
}

fiFixVarInSameStructType1:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v.first, start, v.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExpRenameRecurringVars1:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v.first, start, v.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExpMakeVarsUnique:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v__ssa_1.first, start, v__ssa_1.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExpInterpolateTypars:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v__ssa_1.first, start, v__ssa_1.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExpMakeCastsExplicit:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v__ssa_1.first, start, v__ssa_1.second)
							}
						}
					}
				}
			}
		}
	}
}

fiRemoveImplicitCasts:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v__ssa_1.first, start, v__ssa_1.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExpNormalizeSeqences:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v__ssa_1.first, start, v__ssa_1.second)
							}
						}
					}
				}
			}
		}
	}
}

fiRemoveUnusedVars:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) parseJsonArray2(json, jsonLength, (start + 1), makeList()) else {
			if ((charCode == 123)) parseJsonObject2(json, jsonLength, (start + 1), makeList()) else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(JsonString(v.first), (start + 1), v.second)
				} else {
					if (((charCode == 110) && (substring(json, start, 4) == "null"))) ParsingAcc<Json>(JsonNull(), start, (start + 4)) else {
						if (((charCode == 116) && (substring(json, start, 4) == "true"))) ParsingAcc<Json>(JsonBool(true), start, (start + 4)) else {
							if (((charCode == 102) && (substring(json, start, 5) == "false"))) ParsingAcc<Json>(JsonBool(false), start, (start + 5)) else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(v__ssa_1.first, start, v__ssa_1.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExtractCallNonScalarExp:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) doParseJson(json, jsonLength, (start + 1)) else {
		if ((charCode == 91)) {
			parseJsonArray2(
				json, jsonLength, (start + 1), w0_0 : List<Json> = makeList();
				w0_0
			)
		} else {
			if ((charCode == 123)) {
				parseJsonObject2(
					json, jsonLength, (start + 1), w1_0 : List<Pair<string, Json>> = makeList();
					w1_0
				)
			} else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					ParsingAcc<Json>(w2_0 : JsonString = JsonString(w3_0 : string = v.first;
					w3_0);
					w2_0, (start + 1), v.second)
				} else {
					if (((charCode == 110) && (w4_0 : string = substring(json, start, 4);
					w4_0 == w5_0 : string = "null";
					w5_0))) {
						ParsingAcc<Json>(w6_0 : JsonNull = JsonNull();
						w6_0, start, (start + 4))
					} else {
						if (((charCode == 116) && (w7_0 : string = substring(json, start, 4);
						w7_0 == w8_0 : string = "true";
						w8_0))) {
							ParsingAcc<Json>(w9_0 : JsonBool = JsonBool(true);
							w9_0, start, (start + 4))
						} else {
							if (((charCode == 102) && (w10_0 : string = substring(json, start, 5);
							w10_0 == w11_0 : string = "false";
							w11_0))) {
								ParsingAcc<Json>(w12_0 : JsonBool = JsonBool(false);
								w12_0, start, (start + 5))
							} else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								ParsingAcc<Json>(w13_0 : Json = v__ssa_1.first;
								w13_0, start, v__ssa_1.second)
							}
						}
					}
				}
			}
		}
	}
}

fiExpReturnVars:
\json : string, jsonLength : int, start : int -> ParsingAcc<Json> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13))) {
		__ret_var__ : ParsingAcc<Json> = doParseJson(json, jsonLength, (start + 1));
		__ret_var__
	} else {
		if ((charCode == 91)) {
			__ret_var__ : ParsingAcc<Json> = parseJsonArray2(
				json, jsonLength, (start + 1), w0_0 : List<Json> = makeList();
				w0_0
			);
			__ret_var__
		} else {
			if ((charCode == 123)) {
				__ret_var__ : ParsingAcc<Json> = parseJsonObject2(
					json, jsonLength, (start + 1), w1_0 : List<Pair<string, Json>> = makeList();
					w1_0
				);
				__ret_var__
			} else {
				if ((charCode == 34)) {
					v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
					__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w2_0 : JsonString = JsonString(w3_0 : string = v.first;
					w3_0);
					w2_0, (start + 1), v.second);
					__ret_var__
				} else {
					if (((charCode == 110) && (w4_0 : string = substring(json, start, 4);
					w4_0 == w5_0 : string = "null";
					w5_0))) {
						__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w6_0 : JsonNull = JsonNull();
						w6_0, start, (start + 4));
						__ret_var__
					} else {
						if (((charCode == 116) && (w7_0 : string = substring(json, start, 4);
						w7_0 == w8_0 : string = "true";
						w8_0))) {
							__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w9_0 : JsonBool = JsonBool(true);
							w9_0, start, (start + 4));
							__ret_var__
						} else {
							if (((charCode == 102) && (w10_0 : string = substring(json, start, 5);
							w10_0 == w11_0 : string = "false";
							w11_0))) {
								__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w12_0 : JsonBool = JsonBool(false);
								w12_0, start, (start + 5));
								__ret_var__
							} else {
								v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
								__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w13_0 : Json = v__ssa_1.first;
								w13_0, start, v__ssa_1.second);
								__ret_var__
							}
						}
					}
				}
			}
		}
	}
}

FS RAW:
return []\json:string, jsonLength:int, start:int -> {
	charCode : int = getCharCodeAt(json, start);
	if (((((charCode == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13)))
		{
			__ret_var__ : ParsingAcc<Json> = doParseJson(json, jsonLength, (start + 1));
			return __ret_var__;
		}
	else
		if ((charCode == 91))
			{
				w0_0 : List<Json> = makeList();
				__ret_var__ : ParsingAcc<Json> = parseJsonArray2(json, jsonLength, (start + 1), w0_0);
				return __ret_var__;
			}
		else
			if ((charCode == 123))
				{
					w1_0 : List<Pair<string, Json>> = makeList();
					__ret_var__ : ParsingAcc<Json> = parseJsonObject2(json, jsonLength, (start + 1), w1_0);
					return __ret_var__;
				}
			else
				if ((charCode == 34))
					{
						v : Pair<string, int> = deserializeRestOfString2(json, (start + 1));
						w3_0 : string = v.first;
						w2_0 : JsonString = JsonString(w3_0);
						__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w2_0, (start + 1), v.second);
						return __ret_var__;
					}
				else
					{
						w4_0 : string = substring(json, start, 4);
						w5_0 : string = "null";
						if (((charCode == 110) && (w4_0 == w5_0)))
							{
								w6_0 : JsonNull = JsonNull();
								__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w6_0, start, (start + 4));
								return __ret_var__;
							}
						else
							{
								w7_0 : string = substring(json, start, 4);
								w8_0 : string = "true";
								if (((charCode == 116) && (w7_0 == w8_0)))
									{
										w9_0 : JsonBool = JsonBool(true);
										__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w9_0, start, (start + 4));
										return __ret_var__;
									}
								else
									{
										w10_0 : string = substring(json, start, 5);
										w11_0 : string = "false";
										if (((charCode == 102) && (w10_0 == w11_0)))
											{
												w12_0 : JsonBool = JsonBool(false);
												__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w12_0, start, (start + 5));
												return __ret_var__;
											}
										else
											{
												v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json, jsonLength, start);
												w13_0 : Json = v__ssa_1.first;
												__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w13_0, start, v__ssa_1.second);
												return __ret_var__;
											}
									}
							}
					}
};
MEM RAW:
return []\json:string, jsonLength:int, start:int -> {
	incRc(json/*first, */);
	charCode : int = getCharCodeAt(json/*first, */, start/*first, */);
	if (((((charCode/*first, */ == 32) || (charCode == 9)) || (charCode == 10)) || (charCode == 13)))
		{
			__ret_var__ : ParsingAcc<Json> = doParseJson(json/*last*/, jsonLength/*first, last*/, (start/*last*/ + 1));
			return __ret_var__/*first, last*/;
		}
	else
		if ((charCode == 91))
			{
				w0_0 : List<Json> = makeList();
				__ret_var__ : ParsingAcc<Json> = parseJsonArray2(json/*last*/, jsonLength/*first, last*/, (start/*last*/ + 1), w0_0/*first, last*/);
				return __ret_var__/*first, last*/;
			}
		else
			if ((charCode == 123))
				{
					w1_0 : List<Pair<string, Json>> = makeList();
					__ret_var__ : ParsingAcc<Json> = parseJsonObject2(json/*last*/, jsonLength/*first, last*/, (start/*last*/ + 1), w1_0/*first, last*/);
					return __ret_var__/*first, last*/;
				}
			else
				if ((charCode == 34))
					{
						v : Pair<string, int> = deserializeRestOfString2(json/*last*/, (start + 1));
						incRc(v/*first, */);
						w3_0 : string = v/*first, */.first;
						w2_0 : JsonString = JsonString(w3_0/*first, last*/);
						__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w2_0/*first, last*/, (start/*last*/ + 1), v/*last*/.second);
						return __ret_var__/*first, last*/;
					}
				else
					{
						incRc(json);
						w4_0 : string = substring(json, start, 4);
						w5_0 : string = "null";
						if (((charCode == 110) && (w4_0/*first, last*/ == w5_0/*first, last*/)))
							{
								decRc(json);
								decRc(w4_0);
								decRc(w5_0);
								w6_0 : JsonNull = JsonNull();
								__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w6_0/*first, last*/, start, (start/*last*/ + 4));
								return __ret_var__/*first, last*/;
							}
						else
							{
								incRc(json);
								w7_0 : string = substring(json, start, 4);
								w8_0 : string = "true";
								if (((charCode == 116) && (w7_0/*first, last*/ == w8_0/*first, last*/)))
									{
										decRc(json);
										decRc(w4_0);
										decRc(w5_0);
										decRc(w7_0);
										decRc(w8_0);
										w9_0 : JsonBool = JsonBool(true);
										__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w9_0/*first, last*/, start, (start/*last*/ + 4));
										return __ret_var__/*first, last*/;
									}
								else
									{
										incRc(json);
										w10_0 : string = substring(json, start, 5);
										w11_0 : string = "false";
										if (((charCode/*last*/ == 102) && (w10_0/*first, last*/ == w11_0/*first, last*/)))
											{
												decRc(json);
												decRc(w4_0);
												decRc(w5_0);
												decRc(w7_0);
												decRc(w8_0);
												decRc(w10_0);
												decRc(w11_0);
												w12_0 : JsonBool = JsonBool(false);
												__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w12_0/*first, last*/, start, (start/*last*/ + 5));
												return __ret_var__/*first, last*/;
											}
										else
											{
												decRc(w4_0);
												decRc(w5_0);
												decRc(w7_0);
												decRc(w8_0);
												decRc(w10_0);
												decRc(w11_0);
												v__ssa_1 : Pair<Json, int> = parseJsonDouble2(json/*last*/, jsonLength/*first, last*/, start);
												incRc(v__ssa_1/*first, */);
												w13_0 : Json = v__ssa_1/*first, */.first;
												__ret_var__ : ParsingAcc<Json> = ParsingAcc<Json>(w13_0/*first, last*/, start/*last*/, v__ssa_1/*last*/.second);
												return __ret_var__/*first, last*/;
											}
									}
							}
					}
};
done in 11.15s
