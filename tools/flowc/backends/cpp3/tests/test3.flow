//import string;
//import ds/tuples;

native println2 : io (flow) -> void = Native.println;
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native i2s : (int) -> string = Native.i2s;
native substring : (s : string, start : int, length : int) -> string = Native.substring;
//native length : ([?]) -> int = Native.length;


test3_counter = ref 0;
test3_fn0 : ref () -> int = ref \ -> { 
	ret = ^test3_counter; 
	test3_counter := ^test3_counter + 1; 
	ret; 
}
test3_fn1 : ref (ref () -> int) -> () -> int = ref \x -> \ -> ^x() + 1;
test3_fn2(x: ref () -> int) -> () -> int { \ -> ^x() + 1; }

test3_S(fld: int);

test3_Pair(first: ?, second: ??);

test3_fn(acc: int, x: test3_Pair) -> int {
	acc + x.first + x.second;
}

test3() -> void {
	println2("substring(\"+++c+++\", 2, 3) = " + substring("+++c+++", 2, 3));
	println2("sum[1, 2, 3]: " + i2s(fold([1, 2, 3], 0, \acc, x -> acc + x)));
	println2("^test3_fn0(): " + i2s(^test3_fn0()));
	println2("^test3_fn0(): " + i2s(^test3_fn0()));
	test3_fn0 := \ -> { 
		ret = ^test3_counter; 
		test3_counter := ^test3_counter * 2; 
		ret; 
	}
	println2("^test3_fn0(): " + i2s(^test3_fn0()));
	println2("^test3_fn0(): " + i2s(^test3_fn0()));
	test3_fn0 := \ -> { 
		ret = ^test3_counter; 
		test3_counter := ^test3_counter * ^test3_counter; 
		ret; 
	}
	println2("^test3_fn0(): " + i2s(^test3_fn0()));
	println2("^test3_fn0(): " + i2s(^test3_fn0()));
	x_AAA = test3_S(15);
	(\-> { println2(x_AAA); })();
	(\-> { println2(test3_S(15)); })();

	println2("sum[test3_Pair(1, 2), test3_Pair(3, 4)]: " + 
		i2s(fold([test3_Pair(1, 2), test3_Pair(3, 4)], 0, \acc, x -> acc + x.first + x.second))
	);
	
	println2("sum[test3_Pair(1, 2), test3_Pair(3, 4)]: " + 
		i2s(fold([test3_Pair(1, 2), test3_Pair(3, 4)], 0, test3_fn))
	);
	

	println2(i2s(fold([], test3_S(0), \acc, x -> test3_S(x)).fld));
	println2(i2s(fold([1], test3_S(0), \acc, x -> test3_S(x)).fld));
	println2(i2s(fold([1, 2], test3_S(0), \acc, x -> test3_S(x)).fld));
	println2(i2s(fold([1, 2, 3], test3_S(0), \acc, x -> test3_S(x)).fld));

//!!!	
	println2(i2s(fold([1, 2, 3], test3_S(0), \acc, x -> test3_S(x)).fld));
	println2(i2s(fold([1, 2, 3, 4, 5, 6], test3_S(0), \acc, x -> test3_S(x)).fld));
	println2(i2s(fold([1, 2, 3, 4, 5, 6, 7, 8, 9, 19], test3_S(0), \acc, x -> test3_S(x)).fld));
	
	println2("^test3_fn1(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("test3_fn2(test3_fn0)(): " + i2s(test3_fn2(test3_fn0)()));


	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	test3_fn1 := \x -> \ -> ^x() + 5;
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	test3_counter := 100;
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));
	println2("^test3_fn(test3_fn0)(): " + i2s(^test3_fn1(test3_fn0)()));

}

main() {
	test3();
	//println2("substring(\"+++c+++\", 2, 3) = " + substring("+++c+++", 2, 3));
	//println2("strSplit(\"c++,native,linux\") = " + toString(strSplit("c++,native,linux", ",")));
	//println2("strSplit(\"c++,native,linux\") = " + toString(strSplit("c++", ",")));
	//quit(0);
}
