import string_utils;
import text/blueprint;

export {
	native getMemoryPoolMem : () -> double = Native.getMemoryPoolMem;
	native getMemoryPoolMaxSize : () -> int = Native.getMemoryPoolMaxSize;
	native getMemoryPoolNumThreads : () -> int = Native.getMemoryPoolNumThreads;
	native getMemoryPoolThreadMem : (thread: int) -> double = Native.getMemoryPoolShardSize;
	native getMemoryPoolShardSize : (thread: int, size: int) -> int = Native.getMemoryPoolShardSize;
	native getMemoryPoolShardMem : (thread: int, size: int) -> double = Native.getMemoryPoolShardMem;

	native getVecStatsMaxLen : () -> int = Native.getVecStatsMaxLen;
	native getVecStatsStatsLen : () -> int = Native.getVecStatsStatsLen;
	native getVecStatsLenUses : (len: int) -> int = Native.getVecStatsLenUses;

	memoryPoolStats() -> string;
}

// Fallbacks (non cpp3)
getMemoryPoolMem() -> double { 0.0 }
getMemoryPoolMaxSize() -> int { 0 }
getMemoryPoolNumThreads() -> int { 0 }
getMemoryPoolThreadMem(thread: int) -> double { 0.0 }
getMemoryPoolShardSize(thread: int, size: int) -> int { 0 }
getMemoryPoolShardMem(thread: int, size: int) -> double { 0.0 }

getVecStatsMaxLen() -> int { 0 }
getVecStatsStatsLen() -> int { 0 }
getVecStatsLenUses(len: int) -> int { 0 }

memoryPoolThreadStats(thread: int) -> string {
	"[" +
		strGlue(
			filtermap(
				enumFromTo(0, getMemoryPoolMaxSize()),
				\size -> {
					if (size < 16 || size % 8 != 0) None() else {
						mem = getMemoryPoolShardMem(thread, size);
						if (mem == 0.0) None() else
						Some("mem(" + i2s(size) + ")=" + memory2s(mem));
					}
				}
			),
			", "
		) +
	"]";
}

memoryVecStats() -> string {
	stats_len = getVecStatsStatsLen();
	max_len = getVecStatsMaxLen();
	distrib = filter(
		generate(0, stats_len, \len -> Pair(len, getVecStatsLenUses(len))),
		\p -> (p.second != 0)
	);
	"max vector len: " + i2s(max_len) + ",\n" +
	"stats vector len: " + i2s(stats_len) + ",\n"
	//+ "distrib:\n" + strIndent(superglue(distrib, \p -> i2s(p.first) + ": " + i2s(p.second) + " (" + memory2s(i2d(p.first * p.second)) + ")", "\n"));
}

memoryPoolStats() -> string {
	total_mem2 = fold(generate(0, getMemoryPoolNumThreads(), getMemoryPoolThreadMem), 0.0, \acc, mem -> acc + mem);
	"total memory: " + memory2s(getMemoryPoolMem()) + " ==? " + memory2s(total_mem2) + "\n" +
	concatStrings(generate(0, getMemoryPoolNumThreads(), \th_id ->
		"thread " + i2s(th_id) + ", mem=" + memory2s(getMemoryPoolThreadMem(th_id)) + ": " + memoryPoolThreadStats(th_id) + "\n"
	)) + "\n" + memoryVecStats();
}
