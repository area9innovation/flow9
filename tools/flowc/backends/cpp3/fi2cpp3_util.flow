import tools/flowc/incremental/fi_helpers;
import tools/flowc/manipulation/freevars;
import string_utils;

export {
	// Wrap a string with ( ... ) if it's not yet wrapped
	fiWrapWithPars(s : string) -> string;

	// Wrap a string with { ... } if it's not yet wrapped
	fiWrapWithBraces(s : string) -> string;

	// Collect all type parameters, met in a type
	fiTypeTypars(acc : Set<FiTypeParameter>, type : FiType) -> Set<FiTypeParameter>;

	// Checks if a type is void, bool, int or double.
	fiIsScalarType(t : FiType) -> bool;

	// Perform a transformation in all type parameters. Used to remove stray type parameters on void
	fiTransformTypars(t : FiType, transform : (FiTypeParameter) -> FiType) -> FiType;

	// For each global name associates a set of all other global names, on which it depends
	varsDependencies(prog : FiProgram) -> Tree<string, Set<string>>;

	// Unwrap the array type from FiTypeArray
	fiDearrayType(tp: FiType) -> FiType;

	// Unwrap the reference type from FiTypeRef
	fiDerefType(tp: FiType) -> FiType;
}

fiWrapWithPars(s : string) -> string {
	if (strlen(s) == 0) "" else 
	if (getCharAt(s,0) == "(" && getCharAt(s, strlen(s) - 1) == ")") s else 
	"(" + s + ")";
}

fiWrapWithBraces(s : string) -> string {
	if (startsWith(s, "{") && endsWith(s, "}")) s else "{\n" + strIndent(s) + "\n}";
}

fiTypeTypars(acc : Set<FiTypeParameter>, type : FiType) -> Set<FiTypeParameter> {
	switch (type) {
		FiTypeVoid():       acc;
		FiTypeBool():       acc;
		FiTypeInt():        acc;
		FiTypeDouble():     acc;
		FiTypeString():     acc;
		FiTypeFlow():       acc;
		FiTypeNative():     acc;
		FiTypeParameter(n): insertSet(acc, type);
		FiTypeRef(rt):      fiTypeTypars(acc, rt);
		FiTypeArray(at):    fiTypeTypars(acc, at);
		FiTypeName(id, tp): fold(tp, acc, fiTypeTypars);
		FiTypeFunction(args, rt): fold(args, fiTypeTypars(acc, rt), \ac, arg -> fiTypeTypars(ac, arg.type));
	}
}

fiIsScalarType(t : FiType) -> bool {
	switch (t) {
		FiTypeVoid():       true;
		FiTypeBool():       true;
		FiTypeInt():        true;
		FiTypeDouble():     true;
		default: false;
	}
}

fiTransformTypars(t : FiType, transform : (FiTypeParameter) -> FiType) -> FiType {
	switch (t) {
		FiTypeArray(arr): 
			FiTypeArray(fiTransformTypars(arr, transform));
		FiTypeFunction(args, retType):
			FiTypeFunction(
				map(args, \arg -> FiFunArg(arg with type = fiTransformTypars(arg.type, transform))), 
				fiTransformTypars(retType, transform)
			);
		FiTypeRef(tp):
			FiTypeRef(fiTransformTypars(tp, transform));
		FiTypeParameter(nm):
			transform(t);
		FiTypeName(name, typars):
			FiTypeName(name, map(typars, \tp -> fiTransformTypars(tp, transform)));
		default: t;
	}
}

fiDeclDependencies(d : FiDeclaration, deps : Tree<string, Set<string>>, visited : Set<string>, names : FiGlobalNames) -> Tree<string, Set<string>> {
	if (containsKeyTree(deps, d.name) || containsSet(visited, d.name)) deps else {
		visited1 = insertSet(visited, d.name);
		find_deps = \e -> {
			free = fifreevars(e);
			deps1 = foldSet(free, deps, \acc, v -> 
				switch (lookupTree(names.toplevel, v)) {
					Some(v_d): {
						fiDeclDependencies(v_d, acc, visited1, names);
					}
					None(): acc;
				}
			);
			decl_deps = foldSet(free, free, \acc, v -> 
				mergeSets(acc, lookupTreeDef(deps1, v, makeSet()))
			);
			setTree(deps1, d.name, decl_deps);
		}
		switch (d) {
			FiFunctionDec(__, lambda,__,__,__): find_deps(lambda);
			FiGlobalVar(__, value,__,__,__): find_deps(value);
			FiNativeDec(__,__,__,__,fallback,__,__): find_deps(fallback);
		}
	}
}

varsDependencies(prog : FiProgram) -> Tree<string, Set<string>> {
	fold(prog.traversal, makeTree(), \acc, mod_name -> {
		module = lookupTreeDef(prog.modules, mod_name, dummyFiModule);
		fold(module.initOrder, acc, \ac, name -> {
			switch (lookupTree(prog.names.toplevel, name)) {
				Some(d): {
					switch (d) {
						FiGlobalVar(__,__,__,__,__): {
							fiDeclDependencies(d, ac, makeSet(), prog.names);
						}
						default: ac;
					}
 				}
				None(): ac;
			}

		})
	});
}

fiDearrayType(tp: FiType) -> FiType {
	switch (tp) {
		FiTypeArray(t): t;
		default: fail0("non-array treated as array");
	}
}

fiDerefType(tp: FiType) -> FiType {
	switch (tp) {
		FiTypeRef(t): t;
		default: fail0("non-reference treated as reference: " + prettyFiType(dummyPretty, tp, makeSet()));
	}
}
