import tools/flowc/backends/cpp3/fi2cpp3_util;
import text/blueprint;
import string_utils;
import sys/process;

export {
	fi2cpp3Build(cfg: FiCpp3Config, sources: [string], deps: [Cpp3Dependency], callback : (int) -> void) -> void;
}

fi2cpp3Build(cfg: FiCpp3Config, sources: [string], deps: [Cpp3Dependency], callback : (int) -> void) -> void {
	cpp_sorces = filter(sources, \src -> !endsWith(src, ".hpp"));
	qt_deps = filtermap(deps, \dep -> switch (dep) {
		Cpp3Qt(__,__,__): Some(dep);
		default: None();
	});
	std_libs = uniq(concatA(filtermap(deps, \dep -> switch (dep) {
		Cpp3Std(__,libs): Some(libs);
		default: None();
	})));
	qt_modules = uniq(concatA(map(qt_deps, \dep -> dep.modules)));
	use_qt = length(qt_modules) > 0;
	target = fileNameOnly(cfg.outputfile);
	use_mimalloc = lookupTreeDef(cfg.config.config, "cpp-mimalloc", "") == "1";
	link_dirs = lookupTreeDef(cfg.config.config, "cpp-link-dirs", "");
	cmakelists = blueprint("
		cmake_minimum_required(VERSION 3.19.1)
		project(%target%)
		set(CMAKE_CXX_STANDARD 23)
		set(CMAKE_CXX_STANDARD_REQUIRED ON)

		%auto%
		if(CMAKE_VERSION VERSION_LESS \"3.7.0\")
			set(CMAKE_INCLUDE_CURRENT_DIR ON)
		endif()

		set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} %supress_warnings%\")
		set(CMAKE_CXX_FLAGS_RELEASE \"-O3\")
		#message(\"Output directory: `%outdir%`\")
		set(CMAKE_RUNTIME_OUTPUT_DIRECTORY %outdir%)
		%link_dirs%

		%gprof%
		%qt_packages%
		%mimalloc_package%
		%qt_module_includes%

		set(sources
			%sources%
		)
		add_executable(%target% ${sources})
		set_target_properties(%target% PROPERTIES OUTPUT_NAME %outfile%)
		target_compile_options(%target% PRIVATE -fPIC)
		%qt_module_libs%
		%mimalloc_lib%
		%std_libs%
	", [
		"target", target,
		"outfile", fileNameOnly(cfg.outputfile),
		"outdir", resolveRelativePath(cfg.outputdir),
		"supress_warnings", strGlue(fi2cpp3BuildCxxSupressWarningsFlags(), " "),
		"link_dirs", if (link_dirs == "") "" else {
			dirs = strSplit(link_dirs, ",");
			"link_directories(" + strGlue(dirs, " ") + ")"
		},
		"gprof", if (lookupTreeDef(cfg.config.config, "cpp-gprof", "") != "1") "# No profiling" else
			"SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pg\")\n" +
			"SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pg\")\n"
			"SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -pg\")",
		"auto", if (!use_qt) "" else
			"set(CMAKE_AUTOMOC ON)\n" +
			"set(CMAKE_AUTORCC ON)\n" +
			"set(CMAKE_AUTOUIC ON)\n",
		"qt_packages", if (use_qt) "find_package(Qt5 COMPONENTS " + strGlue(qt_modules, " ") + " REQUIRED)" else "",
		"qt_module_includes", if (use_qt) "include_directories(" + superglue(qt_modules, \m -> "${Qt5" + m + "_INCLUDE_DIRS}", " ") + ")" else "",
		"qt_module_libs", if (use_qt) "target_link_libraries(" + target + " " + superglue(qt_modules, \m -> "Qt5::" + m, " ") + " )" else "",
		"sources", superglue(cpp_sorces, \src -> fileNameOnly(src), "\n"),
		"mimalloc_package", if (use_mimalloc) "find_package(mimalloc 2.1 REQUIRED)" else "",
		"mimalloc_lib", if (use_mimalloc) "target_link_libraries(" + target + " mimalloc-static)" else "",
		"std_libs", if (std_libs == []) "" else "target_link_libraries(" + target + " " + strGlue(std_libs, " ") + ")",
	]);
	gen_dir = pathCombine(cfg.outputdir, "cpp3gen");
	build_dir = pathCombine(gen_dir, "build");
	ensureDirectoryExists(build_dir) |> \err -> if (err != "") fcPrintln(err, cfg.threadId);
	fi2cpp3SaveFile(pathCombine(gen_dir, "CMakeLists.txt"), cmakelists, cfg);
	qt_args = if (qt_modules == []) [] else {
		["-DCMAKE_PREFIX_PATH=${QTLIBDIR}\":\"${CMAKE_PREFIX_PATH})"]
	}
	debug_or_release = "-DCMAKE_BUILD_TYPE=" +
	if (getConfigParameter(cfg.config.config, "cpp-debug") == "1") {
		"Debug"
	} else {
		"Release"
	}
	cpp_compiler = lookupTreeDef(cfg.config.config, "cpp-compiler", "");
	cmake_args = concatA([
		qt_args,
		if (cpp_compiler == "") [] else ["-D", "CMAKE_CXX_COMPILER=" + cpp_compiler],
		["..", debug_or_release]
	]);
	if (cfg.verbose > 0) {
		fcPrintln("cmake invokation: cmake " + strGlue(cmake_args, " "), cfg.config.threadId);
	}
	cmake_exit_code = execSystemProcess("cmake", cmake_args, build_dir,
		\out -> if (cfg.verbose > 0 && !isSpace(out)) {
			fcPrintln(out, cfg.config.threadId);
		},
		\err -> if (!isSpace(err)) {
			fcPrintln(err, cfg.config.threadId);
		}
	);
	if (cmake_exit_code != 0) callback(5) else {
		fi2cpp3Make(cfg, build_dir, callback);
	}
}

fi2cpp3BuildCxxSupressWarningsFlags() -> [string] {[
	"-Wno-unused-value", "-Wno-unused-parameter",
	"-Wno-unused-variable", "-Wno-return-type",
	"-Wno-unused-but-set-variable", "-Wno-trigraphs",
	"-Wno-use-after-free"
]}

fi2cpp3BuildOpts(cfg: FiCpp3Config) -> [string] {
	debug_opts = if (cfg.debug) ["-O0", "-ggdb3"] else [];
	opt_param = getConfigParameterDef(cfg.config.config, "cpp-optimize", "3");
	optimize_opts = if (opt_param == "" || cfg.debug) [] else ["-O" + opt_param];
	include = ["-I", pathCombine(".", cfg.outputdir)];
	concatA([debug_opts, optimize_opts, include, fi2cpp3BuildCxxSupressWarningsFlags()]);
}

fi2cpp3Make(cfg: FiCpp3Config, builddir: string, callback : (int) -> void) -> void {
	if (getConfigParameterDef(cfg.config.config, "cpp-build", "1") != "1") {
		callback(0);
	} else {
		build_concurrency = getConfigParameterDef(
			cfg.config.config, 
			"cpp-build-jobs", 
			"4" // 4 is relatively safe. Bigger values may cause exhaust of memory.
		);
		make_args = [
			"-j" + build_concurrency,  // Building concurrency level
			"-C", builddir // The actual build directory. Make changes to it.
		];
		if (cfg.verbose > 0) {
			fcPrintln("Building Makefile with cpp3: 'make " + strGlue(make_args, " ") + "'", cfg.config.threadId);
		}
		make_exit_code = execSystemProcess("make", make_args, ".",
			\out -> if (cfg.verbose > 0 && !isSpace(out)) {
				fcPrintln(out, cfg.config.threadId);
			},
			\err -> if (!isSpace(err)) {
				fcPrintln(err, cfg.config.threadId);
			}
		);
		if (make_exit_code != 0) callback(5) else callback(0);
	}
}
