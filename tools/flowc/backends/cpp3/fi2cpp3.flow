import tools/flowc/backends/cpp3/fi2cpp3_compile;
import tools/flowc/backends/cpp3/fi2cpp3_build;
import tools/flowc/manipulation/tail_call;
import tools/flowc/manipulation/flatten_unions;

export {
	fi2cpp3(program : FiProgram, cfg : FiCpp3Config, callback : (int) -> void) -> void;
}

fi2cpp3(program : FiProgram, cfg : FiCpp3Config, callback : (int) -> void) -> void {
	if (cfg.config.verbose > 0) {
		fcPrintln("Building a cpp3 '" + cfg.outfile + "' application ...", cfg.config.threadId);
	}
	compiled = fi2cpp3Compile(program, cfg);
	if (length(compiled.errors) > 0) {
		fcPrintln(strGlue(compiled.errors, "\n"), cfg.config.threadId);
		callback(5);
	} else {
		fi2cpp3Build(cfg, compiled.name, compiled.sources, compiled.qtDeps, callback);
	}
}

fi2cpp3Compile(program0 : FiProgram, cfg : FiCpp3Config) -> Cpp3CompiledProgram {
	natives = fiCpp3InitNativeFuncs(cfg);
	setImplicitTypars = \prog -> fiSetImplicitStructTypars(prog, FiTypeFlow());
	resolveNatives = \prog -> fiResolveNatives(prog, \name -> containsKeyTree(natives, name));
	program = program0
		|> resolveNatives
		|> fiFlattenUnions
		|> fiCompleteStructTypars
		|> setImplicitTypars
	;
	ensureDirectoryExists(cfg.outputdir);
	structs2ids = foldi(getTreeValues(program.names.structs), makeTree(), \i, acc, struct -> setTree(acc, struct.name, i + 8));
	vars = filtermap(getTreeValues(program.names.toplevel), \decl -> 
		switch (decl) {
			FiGlobalVar(__,__,__,__,__): Some(decl);
			default: None();
		}
	);
	var_deps = varsDependencies(program);
	volatile_vars = filter(vars, \v -> 
		exists(cfg.volatile, \name -> v.name == name || containsSet(lookupTreeDef(var_deps, v.name, makeSet()), name))
	);
	gctx0 = Cpp3GlobalContext(cfg, program, 
		collectFiEffects(program),
		\flowfile -> strReplace(flowfile, "/", "_"),
		structs2ids,
		\t -> "T" + i2s(strlen(t.n)),
		\name -> "F_" + name,
		\name -> "f_" + name,
		natives,
		fiCpp3InitRuntimeParts(cfg),
		buildSet(map(volatile_vars, \v -> v.name)),
		ref [], ref [], None(), makeSet()
	);
	gctx = Cpp3GlobalContext(gctx0 with 
		runtimeParts = setTree(gctx0.runtimeParts, "struct_defs", cpp3StructDefsRuntimePart(gctx0))
	);
	fi2cpp3Translate(gctx);
}

fi2cpp3Translate(gctx: Cpp3GlobalContext) -> Cpp3CompiledProgram {
	// The runtime fragents, which are used in a program
	runtime_parts = fi2cpp3RuntimeParts(gctx);
	fi2cpp3SaveFile("__flow_includes.hpp", fiCpp3RuntimeIncludes(gctx, runtime_parts), gctx.config);
	fi2cpp3SaveFile("__flow_runtime.hpp", fiCpp3RuntimeHeader(gctx, runtime_parts), gctx.config);
	fi2cpp3SaveFile("__flow_runtime.cpp", fiCpp3RuntimeSource(gctx, runtime_parts), gctx.config);

	compiled0 = fold(gctx.program.traversal, makeTree(), \acc, name -> {
		if (gctx.config.config.verbose > 0) {
			fcPrintln("Compiling to cpp3: " + name, gctx.config.config.threadId);
		}
		module = lookupTreeDef(gctx.program.modules, name, dummyFiModule);
		cpp_module = fiModule2cpp3(module, gctx);
		setTree(acc, name, cpp_module);
	});
	main_name = either(findInOrder(compiled0, \__, module -> if (module.isMain) Some(module.name) else None()), "");
	compiled = if (!gctx.config.monolith) compiled0 else fi2cpp3Monolith(main_name, compiled0, gctx);

	sources = list2array(fold(gctx.program.traversal, 
		array2list(["__flow_includes.hpp", "__flow_runtime.hpp", "__flow_runtime.cpp"]), 
		\srcs, module_name -> {
			switch (lookupTree(compiled, module_name)) {
				Some(module): {
					name = module.name;
					header = fiCompiledModule2cpp3header(module, gctx, runtime_parts);
					fi2cpp3SaveFile(changeFileExt(name, ".hpp"), header, gctx.config);
					srcs1 = Cons(changeFileExt(name, ".hpp"), srcs);
					sources = fiCompiledModule2cpp3sources(module, gctx, runtime_parts);
					if (length(sources) == 0) srcs1 else {
						foldi(sources, srcs, \i, acc, source -> {
							src_name = if (i == 0) name else name + "_" + i2s(i);
							fi2cpp3SaveFile(changeFileExt(src_name, ".cpp"), source, gctx.config);
							Cons(changeFileExt(src_name, ".cpp"), acc);
						});
					}
				}
				None(): srcs;
			}
		}
	));
	fi2cpp3SaveFile(gctx.config.outfile + "_sources", concatStrings(map(sources, \src -> src + "\n")), gctx.config);
	Cpp3CompiledProgram(
		main_name,
		sources, 
		fi2cpp3QtDeps(compiled, gctx),
		^(gctx.errors)
	);
}

cpp3MainFunc(gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string {
	init = strGlue(^(gctx.volatileInit), "\n");
	mainInits = superglue(runtime_parts, \part -> part.mainInit, "\n");
	mainTerms = superglue(runtime_parts, \part -> part.mainTerm, "\n");
	sources = superglue(filter(runtime_parts, \part -> part.staysInMain), \part -> part.source, "\n");
"
using namespace flow;
using namespace std::string_literals;
using namespace " + gctx.config.namespace + ";\n\n" +
(if (sources == "") "" else sources + "\n") +
"int main(int argc, const char* argv[]) {\n" +
//"\talloc_stats = new AllocStats();\n" + 
"\tinitMaxHeapSize(argc, argv);\n" +
(if (mainInits == "") "" else strIndent(mainInits) + "\n") +
(if (init == "") "" else strIndent(init) + "\n") +
"\t" + gctx.varname2cpp("main") + "();\n" +
(if (mainTerms == "") "" else strIndent(mainTerms) + "\n") +
//"\talloc_stats->print();\n" + 
"\treturn 0;\n}\n";
}

fiCompiledModule2cpp3header(module: Cpp3CompiledModule, gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> string {
	includes = superglue(
		fiCpp3DependenciesIncludes(map(module.natives, \nat -> nat.dependencies)), 
		\inc -> "#inc" + "lude " + inc, 
		"\n"
	);
	forward_decls = map(module.decls, \decl -> decl.forward);
	header_defs = filtermap(module.decls, \decl -> if (decl.headerOnly) Some(decl.definition) else None());
	"#pragma once\n" +
	(if (includes == "") "" else includes + "\n") +
	"#inc" + "lude \"__flow_runtime.hpp\"\n" +
	"// Module " + module.name + "\n\n" + 
	(if (gctx.config.monolith) "" else concatStrings(map(module.imports, \imp -> "#inc" + "lude \"" + strReplace(imp, "/", "_") + ".hpp\"\n")) + "\n") +
	"namespace " + gctx.config.namespace + " {\n" +
	"using namespace std::string_literals;\n" +
	"using namespace flow;\n\n" + 
	concatStrings(forward_decls) + "\n" + 
	concatStrings(header_defs) + "\n" + 
	"}\n";
}

fiCompiledModule2cpp3sources(module: Cpp3CompiledModule, gctx: Cpp3GlobalContext, runtime_parts: [Cpp3RuntimePart]) -> [string] {
	all_source_defs = filtermap(module.decls, \decl -> if (!decl.headerOnly) Some(decl.definition) else None());
	max_cpp_source = s2i(lookupTreeDef(gctx.program.config.config, "cpp-max-source", "100000"));
	// Cut all definition into parts, not exceeding max-cpp-source kb
	source_defs_cut = list2array(fold(all_source_defs, Pair(makeList(), 0), \acc, def -> 
		if (acc.second + strlen(def) < max_cpp_source) {
			switch (acc.first) {
				Cons(arr, tail_): Pair(Cons(concat(arr, [def]), tail_), acc.second + strlen(def));
				EmptyList(): Pair(makeList1([def]), strlen(def));
			}
		} else {
			Pair(Cons([def], acc.first), strlen(def));
		}
	).first);

	mapi(source_defs_cut, \i, source_defs ->
		if (length(source_defs) == 0 && !module.isMain) "" else {
			"#inc" + "lude \"" + module.name + ".hpp\"\n" +
			"namespace " + gctx.config.namespace + " {\n" +
			"using namespace std::string_literals;\n" +
			"using namespace flow;\n\n" + 
			concatStrings(source_defs) + "\n" +
			"}\n" +
			if (i == 0 && module.isMain) cpp3MainFunc(gctx, runtime_parts) else "";
		}
	);
}

cpp3StructDefsRuntimePart(gctx: Cpp3GlobalContext) -> Cpp3RuntimePart {
Cpp3RuntimePart("struct_defs", 
"struct StructDefs {
	static void init();
	static std::map<string, StructDef> defs;
};
", 
fiCpp3StructDefs(gctx), 
"StructDefs::init();", "", 
[Cpp3Std(["<map>"], [])], true
);
}

fiCpp3StructDefs(gctx : Cpp3GlobalContext) -> string {
	struct_defs = map(getTreeValues(gctx.program.names.structs), \struct -> {
		typars = if (struct.typars == []) "" else "<" + superglue(struct.typars, \__ -> "Flow", ", ") + ">";
		"\tdefs[u\"" + struct.name + "\"] = " + gctx.typename2cpp(struct.name) + typars + "::def();\n"
	});
"
std::map<string, StructDef> StructDefs::defs;
void StructDefs::init() {\n" + 
	concatStrings(struct_defs) + 
"\n}\n";

}

fi2cpp3Monolith(main_name: string, compiled: Tree<string, Cpp3CompiledModule>, gctx: Cpp3GlobalContext) -> Tree<string, Cpp3CompiledModule> {
	all_decls = concatA(list2array(fold(gctx.program.traversal, makeList(), \acc, module_name -> 
		switch (lookupTree(compiled, module_name)) {
			Some(module): Cons(module.decls, acc);
			None(): acc;
		}
	)));
	all_natives = concatA(list2array(fold(gctx.program.traversal, makeList(), \acc, module_name ->
		switch (lookupTree(compiled, module_name)) {
			Some(module): Cons(module.natives, acc);
			None(): acc;
		}
	)));
	makeTree1(
		main_name, 
		Cpp3CompiledModule(main_name, true, all_decls, [], all_natives)
	);
}

fi2cpp3QtDeps(modules: Tree<string, Cpp3CompiledModule>, gctx: Cpp3GlobalContext) -> [Cpp3Qt] {
	list2array(foldTree(modules, makeList(), \__,m, acc -> 
		fold(m.natives, acc, \ac, nat -> {
			runtime_deps = fold(nat.runtimeParts, [], \a, part_name -> 
				switch (lookupTree(gctx.runtimeParts, part_name)) {
					Some(part): {
						concat(a, part.dependencies);
					}
					None(): {
						refArrayPush(gctx.errors, "unkonwn runtime part: " + part_name);
						a;
					}
				}
			);
			fold(concat(nat.dependencies, runtime_deps), ac, \a, dep ->
				switch (dep) {
					Cpp3Qt(__,__): Cons(dep, a);
					default: a;
				}
			)
		})
	));
}

fi2cpp3RuntimeParts(gctx: Cpp3GlobalContext) -> [Cpp3RuntimePart] {
	parts = set2array(foldTree(gctx.program.names.toplevel, makeSet(), \name, __, acc ->
		switch (lookupTree(gctx.natives, name)) {
			Some(nat): fold(nat.runtimeParts, acc, \ac, dep -> insertSet(ac, dep));
			None(): acc;
		}
	));
	filtermap(parts, \p -> 
		switch (lookupTree(gctx.runtimeParts, p)) {
			Some(part): {
				Some(part);
			}
			None(): {
				refArrayPush(gctx.errors, "unknown runtime part: " + p);
				None();
			}
		}
	);
}
