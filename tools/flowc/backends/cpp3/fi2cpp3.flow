import tools/flowc/backends/cpp3/fi2cpp3_compile;
import tools/flowc/backends/cpp3/fi2cpp3_source;
import tools/flowc/backends/cpp3/fi2cpp3_build;
import tools/flowc/backends/cpp3/fi2cpp3_transform;
import tools/flowc/manipulation/wrap_funcs_as_args;

import tools/common/stats;

export {
	fi2cpp3(program : FiProgram, globEnv : FcTypeEnvGlobal, cfg : FiCpp3Config, callback : (int) -> void) -> void;
}

fi2cpp3(program : FiProgram, globEnv : FcTypeEnvGlobal, cfg : FiCpp3Config, callback : (int) -> void) -> void {
	if (cfg.config.verbose > 0) {
		fcPrintln("Building a cpp3 '" + cfg.outputfile + "' application in directory '" + cfg.outputdir + "'", cfg.config.threadId);
	}
	compiled = fi2cpp3Compile(program, globEnv, cfg);
	if (compiled.success) {
		fi2cpp3Build(cfg, compiled.sources, compiled.dependencies, callback);
	} else {
		callback(5);
	}
}

fi2cpp3Compile(program : FiProgram, globEnv : FcTypeEnvGlobal, cfg : FiCpp3Config) -> Cpp3CompiledProgram {
	gctx = fi2cpp3initGctx(program, globEnv, cfg);
	cpp_natives = fiCpp3InitNativeFuncs(cfg);
	stub_missing_natives = isConfigParameterTrue(cfg.config.config, "cpp-stub-missing-natives");
	resolved = fiResolveNatives(program,
		\name -> containsKeyTree(cpp_natives, name),
		\__ -> stub_missing_natives
	);
	if (isConfigParameterSet(program.config.config, "cpp3-debug")) {
		name = getConfigParameter(program.config.config, "cpp3-debug");
		maybeApply(lookupTree(program.names.toplevel, name), \decl ->
			fcPrintln("original decl:\n" + strIndent(toStringFormatted(decl)), program.config.threadId)
		)
	}
	if (resolved.second != []) {
		missing_names = map(resolved.second, \nat -> nat.name);
		missing_string = if (length(missing_names) <= 8) strGlue(missing_names, ", ") else {
			strArrayWrap(missing_names, 128, false, ",");
		}
		fcPrintln(
			(if (stub_missing_natives) "Warning" else "Error") +
			": missing cpp3 natives:\n" + strIndent(missing_string), cfg.config.threadId);
	}
	if (resolved.second != [] && !stub_missing_natives) {
		// Missing natives are not ignored
		Cpp3CompiledProgram(program.config.flowfile, [], [], false);
	} else {
		program1 = resolved.first
			|> (\p -> fiAddExternalNatives(p, cpp3MandatoryNatives))
			|> fiFuncGlobalVar2Func
			|> fiFlattenUnions
			|> fiCompleteImplicitUnionTypars
			|> fiRemoveImplicitStructTypars
			|> fiWasmWrapFuncArgs
			|> fiProgramAddPolymorphicStructsCasts
			|> fiRemoveSigletonSeqences
		;
		gctx1 = fi2cpp3updateGctx(program1, gctx);
		program2 = program1
			|> (\ p -> fi2cpp3TransformProgramExps(p, gctx1))
			//|> fiAddThreadIdAsLastArg
		;
		gctx2 = fi2cpp3updateGctx(program2, gctx);
		fi2cpp3Translate(gctx2);
	}
}

fi2cpp3initGctx(program : FiProgram, globEnv : FcTypeEnvGlobal, cfg : FiCpp3Config) -> Cpp3GlobalContext {
	Cpp3GlobalContext(globEnv, cfg, program,
		collectFiEffects(program),
		[],
		makeTree(),
		\name -> "",
		fiCpp3InitNativeFuncs(cfg),
		fiCpp3InitRuntimeParts(cfg),
		ref true, "", None(), makeSet(), ""
	);
}

fi2cpp3updateGctx(program: FiProgram, gctx: Cpp3GlobalContext) -> Cpp3GlobalContext {
	structs = getTreeValues(program.names.structs);
	structs2cpp = foldi(structs, makeTree(), \i, acc, struct ->
		setTree(acc, struct.name,
			Cpp3Struct(i + fi2cpp3_struct_offset, struct,
				foldi(struct.args, makeTree(), \j, ac, arg ->
					setTree(ac, arg.name, Cpp3StructArg(j, arg.type))
				)
			)
		)
	);
	Cpp3GlobalContext(gctx with
		program = program,
		effects = collectFiEffects(program),
		structs = structs,
		structs2cpp = structs2cpp,
		structid2cpp = \name -> eitherMap(lookupTree(structs2cpp, name), \str -> i2s(str.id), "")
	);
}

fi2cpp3Translate(gctx: Cpp3GlobalContext) -> Cpp3CompiledProgram {
	// The runtime fragments, which are used in a program
	runtime_parts = fi2cpp3RuntimeParts(gctx);
	gen_dir = pathCombine(gctx.config.outputdir, "cpp3gen");
	ensureDirectoryExists(gen_dir) |> \err -> if (err != "") fcPrintln(err, gctx.config.threadId);
	src_path = \name, ext -> pathCombine(gen_dir, changeFileExt(name, ext));
	runtime_headers = fiCpp3BaseRuntimeFiles(gctx.config, ".hpp");
	runtime_sources = fiCpp3BaseRuntimeFiles(gctx.config, ".cpp");
	iter(runtime_headers, \header ->
		fi2cpp3SaveFile(
			src_path(fileNameOnly(header), ".hpp"),
			getFileContent(header), gctx.config
		)
	);
	iter(runtime_sources, \source ->
		fi2cpp3SaveFile(
			src_path(fileNameOnly(source), ".cpp"),
			getFileContent(source), gctx.config
		)
	);
	fi2cpp3SaveFile(src_path("__flow_runtime", ".hpp"), fiCpp3RuntimeHeader(gctx, runtime_parts), gctx.config);
	fi2cpp3SaveFile(src_path("__flow_runtime", ".cpp"), fiCpp3RuntimeSource(gctx, runtime_parts), gctx.config);

	do_compile_modules =  map(gctx.program.traversal, \name -> { 
		module = lookupTreeDef(gctx.program.modules, name, dummyFiModule);
		\ -> {
			start = fi2cpp3StartOperationMessage(gctx.config, 1, "compiling module", name);
			fs_module = fi2cpp3TransformModule(module, gctx);
			cpp_module = fsModule2cpp3(fs_module, gctx);
			fi2cpp3EndOperationMessage(gctx.config, 1, "compiling module", name, start);
			cpp_module
		}
	});
	compiled = if (fcParallelOn(gctx.program.config)) {
		sequential(true, do_compile_modules);
	} else {
		concurrent(true, do_compile_modules);
	}
	fi2cpp3SaveFile(
		src_path("__flow_runtime_init_term", ".cpp"),
		fiInitTermModule2cpp3Source(compiled, runtime_parts, gctx), gctx.config
	);
	main_name = eitherMap(find(compiled, \module -> module.isMain), \module -> module.name, "");
	sources = list2array(fold(compiled,
		array2list(
			concat3(
				["__flow_runtime.hpp", "__flow_runtime.cpp", "__flow_runtime_init_term.cpp"],
				map(runtime_headers, \header -> fileNameOnly(header)),
				map(runtime_sources, \source -> fileNameOnly(source)),
			)
		), 
		\srcs, module -> {
			name = module.name;
			mod_gctx = Cpp3GlobalContext(gctx with currentModule = name);
			header = fiCompiledModule2cpp3header(module, mod_gctx);
			header_path = src_path(name, ".hpp");
			fi2cpp3SaveFile(header_path, header, mod_gctx.config);
			srcs1 = Cons(changeFileExt(name, ".hpp"), srcs);
			sources = fiCompiledModule2cpp3sources(module, runtime_parts, mod_gctx);
			if (length(sources) == 0) srcs1 else {
				foldi(sources, srcs, \i, acc, source -> {
					src_name = if (i == 0) name else name + "_" + i2s(i);
					source_path = src_path(src_name, ".cpp");
					fi2cpp3SaveFile(source_path, source, mod_gctx.config);
					Cons(changeFileExt(src_name, ".cpp"), acc);
				});
			}
		}
	));
	Cpp3CompiledProgram(
		main_name,
		sources, 
		fi2cpp3Deps(compiled, gctx),
		^(gctx.success)
	);
}

fi2cpp3Deps(modules: [Cpp3CompiledModule], gctx: Cpp3GlobalContext) -> [Cpp3Dependency] {
	uniq(fold(modules, [], \acc, m ->
		fold(m.natives, acc, \ac, nat -> {
			runtime_deps = fold(nat.runtimeParts, [], \a, part_name -> 
				switch (lookupTree(gctx.runtimeParts, part_name)) {
					Some(part): {
						concat(a, part.dependencies);
					}
					None(): {
						gctx.success := false;
						fcPrintln("unkonwn runtime part: " + part_name, gctx.config.threadId);
						a;
					}
				}
			);
			concat3(ac, nat.dependencies, runtime_deps)
		})
	));
}

fi2cpp3RuntimeParts(gctx: Cpp3GlobalContext) -> [Cpp3RuntimePart] {
	parts = set2array(foldTree(gctx.program.names.toplevel, makeSet(), \name, __, acc ->
		switch (lookupTree(gctx.natives, name)) {
			Some(nat): fold(nat.runtimeParts, acc, \ac, dep -> insertSet(ac, dep));
			None(): acc;
		}
	));
	filtermap(parts, \p -> 
		switch (lookupTree(gctx.runtimeParts, p)) {
			Some(part): {
				Some(part);
			}
			None(): {
				gctx.success := false;
				fcPrintln("unkonwn runtime part: " + p, gctx.config.threadId);
				None();
			}
		}
	);
}
