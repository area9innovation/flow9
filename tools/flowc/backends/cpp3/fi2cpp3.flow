import tools/flowc/backends/cpp3/fi2cpp3_compile;
import tools/flowc/backends/cpp3/fi2cpp3_build;
import tools/flowc/manipulation/tail_call;
import tools/flowc/manipulation/flatten_unions;

export {
	fi2cpp3(program : FiProgram, cfg : FiCpp3Config, callback : (int) -> void) -> void;
}

fi2cpp3(program0 : FiProgram, cfg : FiCpp3Config, callback : (int) -> void) -> void {
	if (cfg.config.verbose > 0) {
		fcPrintln("Building a cpp3 '" + cfg.config.flowfile + "' application ...", cfg.config.threadId);
	}
	setImplicitTypars = \prog -> fiSetImplicitStructTypars(prog, FiTypeVoid());
	program = program0 |> 
		fcOptimizeTailCalls |>
		fiFlattenUnions |> 
		fiCompleteStructTypars |> 
		setImplicitTypars;
	package_path = pathCombineMany(concat([cfg.outputdir], strSplit(cfg.namespace, ".")));
	ensureDirectoryExists(package_path);
	structs2ids = foldi(getTreeValues(program.names.structs), makeTree(), \i, acc, struct -> setTree(acc, struct.name, i));
	vars = filtermap(getTreeValues(program.names.toplevel), \decl -> 
		switch (decl) {
			FiGlobalVar(__,__,__,__,__): Some(decl);
			default: None();
		}
	);
	var_deps = varsDependencies(program);
	volatile_vars = filter(vars, \v -> 
		exists(cfg.volatile, \name -> v.name == name || containsSet(lookupTreeDef(var_deps, v.name, makeSet()), name))
	);
	gctx0 = Cpp3GlobalContext(cfg, program, package_path,
		structs2ids,
		\t -> "T" + i2s(strlen(t.n)),
		\name -> "F_" + name,
		\name -> "f_" + name,
		fiCpp3InitNativeFuncs(cfg),
		fiCpp3InitRuntimeParts(cfg),
		buildSet(map(volatile_vars, \v -> v.name)),
		ref [], ref []
	);
	gctx = Cpp3GlobalContext(gctx0 with 
		runtimeParts = setTree(gctx0.runtimeParts, "struct_defs", cpp3StructDefsRuntimePart(gctx0))
	);
	compiled = fi2cpp3Translate(gctx);
	if (^(gctx.errors) != []) {
		fcPrintln(strGlue(^(gctx.errors), "\n"), cfg.config.threadId);
		callback(5);
	} else {
		fi2cpp3Build(gctx, compiled, callback);
	}
}

fi2cpp3RuntimeParts(gctx: Cpp3GlobalContext) -> [Cpp3RuntimePart] {
	parts = set2array(foldTree(gctx.program.names.toplevel, makeSet(), \name, __, acc ->
		switch (lookupTree(gctx.natives, name)) {
			Some(nat): fold(nat.runtimeParts, acc, \ac, dep -> insertSet(ac, dep));
			None(): acc;
		}
	));
	filtermap(parts, \p -> 
		switch (lookupTree(gctx.runtimeParts, p)) {
			Some(part): {
				Some(part);
			}
			None(): {
				refArrayPush(gctx.errors, "unknown runtime part: " + p);
				None();
			}
		}
	);
}

fi2cpp3Translate(gctx: Cpp3GlobalContext) -> Cpp3CompiledProgram {
	// The runtime fragents, which are used in a program
	runtime_parts = fi2cpp3RuntimeParts(gctx);
	fi2cpp3SaveFile("__flow_runtime.hpp", fiCpp3Runtime(gctx, runtime_parts), gctx);

	compiled1 = fold(gctx.program.traversal, makeTree(), \acc, name -> {
		if (gctx.config.config.verbose > 0) {
			fcPrintln("Compiling to cpp3: " + name, gctx.config.config.threadId);
		}
		module = lookupTreeDef(gctx.program.modules, name, dummyFiModule);
		setTree(acc, name, fiModule2cpp3(module, gctx));
	});
	compiled = fi2cpp3RemoveEmptyModules(compiled1);

	sources = list2array(foldTree(compiled, makeList1("__flow_runtime.hpp"), \name, cpp3_module, srcs -> {
		cpp3_src = fiCompiledModule2cpp3(cpp3_module, gctx, runtime_parts);
		cpp3_path = strReplace(changeFileExt(name, if (!cpp3_module.isMain) ".hpp" else ".cpp"), "/", "_");
		//if (cpp3_src == "") srcs else {
			fi2cpp3SaveFile(cpp3_path, cpp3_src, gctx);
			Cons(cpp3_path, srcs);
		//}
	}));
	fi2cpp3SaveFile(gctx.config.config.flowfile + "_sources", concatStrings(map(sources, \src -> src + "\n")), gctx);
	Cpp3CompiledProgram(compiled, sources);
}

fi2cpp3RemoveEmptyModules(modules: Tree<string, Cpp3CompiledModule>) -> Tree<string, Cpp3CompiledModule> {
	empty_names = filtermap(getTreeValues(modules), \m -> if (length(m.source) == 0) Some(m.name) else None());
	modules1 = mapTree(modules, \module -> {
		real_imps = filter(module.imports, \imp -> !contains(empty_names, imp));
		empty_transitive = set2array(fold(
			filter(module.imports, \imp -> contains(empty_names, imp)), 
			makeSet(), \acc, imp -> fi2cpp3ModuleTransitiveImports(imp, modules, acc)
		));
		implicit_imports = filter(empty_transitive, \imp -> !contains(empty_names, imp));
		Cpp3CompiledModule(module with imports = concat(real_imps, implicit_imports));
	});
	filterTree(modules1, \__,m -> length(m.source) > 0);
}

fi2cpp3ModuleTransitiveImports(
	m: string,
	modules: Tree<string, Cpp3CompiledModule>,
	acc: Set<string>
) -> Set<string> {
	if (containsSet(acc, m)) acc else {
		acc1 = insertSet(acc, m);
		module = lookupTreeDef(modules, m, Cpp3CompiledModule("", false, [], [], []));
		fold(module.imports, insertSet(acc, m), \ac, imp -> fi2cpp3ModuleTransitiveImports(imp, modules, ac));
	}
}
