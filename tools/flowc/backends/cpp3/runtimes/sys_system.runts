[

Cpp3RuntimePart("sys_system", 
"
class FlowProcess : public QObject {
    Q_OBJECT
public:
	FlowProcess();
	// execSystemProcess
	FlowProcess(Fun<Void, String> out, Fun<Void, String> err);
	// runSystemProcess
	FlowProcess(Fun<Void, String> out, Fun<Void, String> err, Fun<Void, Int> ex);
	// startProcess
	FlowProcess(Fun<Void, Int, String, String> all);

	~FlowProcess() override;

	bool start(String command, Arr<String> args, String cwd, bool detached);

	static String bytes2s(QByteArray bytes) {
		return makeString(std::move(QString::fromLocal8Bit(bytes).toStdU16String()));
	}
	void writeStdin(String s) {
		to_write.append(QString::fromStdU16String(*s).toUtf8());
	}

	QByteArray to_write;
	QProcess* process;
	
	Fun<Void, String> stdout_cb;
	Fun<Void, String> stderr_cb;
	Fun<Void, Int>    exit_cb;
	Fun<Void, Int, String, String> all_cb;

	static std::map<FlowProcess*, Flow> running;

	void showSelf(QString msg) {
		std::cout << msg.toStdString() << \" [:\" <<
		\"pointer: \" << this << \", \" << 
		\"proc id: \" << process->processId() << \", \" << 
		\"execution of: \" << process->program().toStdString() << \" \" << process->arguments().join(QLatin1String(\" \")).toStdString() << \", \" <<
		\"exitCode: \" << process->exitCode() << \", \" <<
		\"exitStatus: \" << process->exitStatus() << \", \" <<
		\"state: \" << process->state() << \", \" <<
		\"error: \" << process->error() << \":]\" << std::endl;
	}
	static void showRunning(QString msg) {
		std::cout << msg.toStdString() << \"  -- Running processes:\" << std:: endl;
		for (auto p : running) {
			std::cout << p.first << \" --> \";
			p.second.toNative<FlowProcess>()->showSelf(QString());
		}
	}

	static void waitForAllFinished() {
		if (running.size() != 0) {
			using namespace std::chrono_literals;
			std::this_thread::sleep_for(3000ms);
			//std::cout << \"waitForAllFinished()...\" << std::endl;
			showRunning(QLatin1String(\"waitForAllFinished()...\"));
			waitForAllFinished();
		}
	}

private slots:
	void processStarted();
    void processReadyWrite();
    void processReadyStdout();
    void processReadyStderr();
    void processFinished(int code, QProcess::ExitStatus status);
    void processFailed(QProcess::ProcessError err);
};

", 
"

std::map<FlowProcess*, Flow> FlowProcess::running;

FlowProcess::FlowProcess() : process(new QProcess(this)) {
	connect(process, SIGNAL(started()), SLOT(processStarted()));
    connect(process, SIGNAL(readyReadStandardOutput()), SLOT(processReadyStdout()));
    connect(process, SIGNAL(readyReadStandardError()), SLOT(processReadyStderr()));
    connect(process, SIGNAL(finished(int,QProcess::ExitStatus)), SLOT(processFinished(int,QProcess::ExitStatus)));
    connect(process, SIGNAL(errorOccurred(QProcess::ProcessError)), SLOT(processFailed(QProcess::ProcessError)));
}

// execSystemProcess
FlowProcess::FlowProcess(
	Fun<Void, String> out, 
	Fun<Void, String> err
) : FlowProcess() {
	stdout_cb = out;
	stderr_cb = err;
}

// runSystemProcess
FlowProcess::FlowProcess(
	Fun<Void, String> out, 
	Fun<Void, String> err, 
	Fun<Void, Int> ex
) : FlowProcess() {
	stdout_cb = out;
	stderr_cb = err;
	exit_cb = ex;
}

// startProcess
FlowProcess::FlowProcess(
	Fun<Void, Int, String, String> all
) : FlowProcess() {
	all_cb = all;
} 

FlowProcess::~FlowProcess() {
	//showSelf(QLatin1String(\"~FlowProcess()\"));
	delete process;
}

bool FlowProcess::start(String command, Arr<String> args, String cwd, bool detached) {
	if (cwd->size() > 0) {
		process->setWorkingDirectory(QString::fromStdU16String(*cwd));
	}
	QStringList qt_args;
	for (String arg : args->vect) {
		qt_args << QString::fromStdU16String(*arg);
	}
	process->setProgram(QString::fromStdU16String(*command));
	process->setArguments(qt_args);
	if (detached) {
		qint64 pid;
		return process->startDetached(&pid);
	} else {
		process->start();
		return true;
	}
}

void FlowProcess::processStarted() {
	//std::cout << \"SIGNAL STARTED\" << std::endl;
    processReadyWrite();
}

void FlowProcess::processReadyWrite() {
	//std::cout << \"processReadyWrite\" << std::endl;
    if (process->state() == QProcess::Running) {
		size_t to_write_size = to_write.size();
		while (to_write_size > 0) {
			qint64 written = process->write(
				to_write.data(), 
				to_write.size()
			);
			to_write_size -= (size_t)written;
		}
		//std::cout << \"written: \" << to_write.size() << std::endl;
		to_write.clear();
	}
}

void FlowProcess::processReadyStdout() {
	//std::cout << \"processReadyStdout\" << std::endl;
	if (stdout_cb.fn.get() != nullptr) {
		process->setReadChannel(QProcess::StandardOutput);
		//char buf[process->bytesAvailable()];
		char buf[2048];
		QByteArray bytes;
		while (true) {
			qint64 read = process->read(buf, sizeof(buf));
			if (read <= 0) {
				break;
			} else {
				bytes.append(buf, read);
			}
		}
		//std::cout << \"have read: \" << bytes.size() << std::endl;
		if (bytes.size() > 0) {
			stdout_cb(bytes2s(bytes));
		}
	}
}

void FlowProcess::processReadyStderr() {
	if (stderr_cb.fn.get() != nullptr) {
		process->setReadChannel(QProcess::StandardError);
		//char buf[process->bytesAvailable()];
		char buf[2048];
		QByteArray bytes;
		while (true) {
			qint64 read = process->read(buf, sizeof(buf));
			if (read <= 0) {
				break;
			} else {
				bytes.append(buf, read);
			}
		}
		if (bytes.size() > 0) {
			stderr_cb(bytes2s(bytes));
		}
	}
}

void FlowProcess::processFinished(int code0, QProcess::ExitStatus status) {
	//showSelf(QLatin1String(\"processFinished - started\"));
	//std::cout << \"SIGNAL processFinished\" << std::endl;
	int code = (status == QProcess::NormalExit) ? code0 : -100;
	//std::cout << \"AAAAAA\" << std::endl;
    process->closeWriteChannel();
	//std::cout << \"BBBBBB\" << std::endl;
    processReadyStdout();
    processReadyStderr();
	if (all_cb.fn.get() != nullptr) {
		//std::cout << \"all_cb.fn.get() != nullptr\" << std::endl;
		all_cb(
			code, 
			bytes2s(process->readAllStandardOutput()), 
			bytes2s(process->readAllStandardError())
		);
    }
	if (exit_cb.fn.get() != nullptr) {
		exit_cb(code);
	}
	/*if (running.find(this) == running.end()) {
		std::cout << \"running.find(this) == running.end() (!!!! sic), this: \" << this << std::endl;
		std::cout << \"running.size(): \" << running.size() << std::endl;
		showRunning(QLatin1String(\"running.find(this) == running.end() (!!!! sic)\"));
	}*/
	running.erase(this);
	//showRunning(QLatin1String(\"processFinished - ended\"));
}

void FlowProcess::processFailed(QProcess::ProcessError err) {
	//std::cout << \"processFailed\" << std::endl;
	processFinished(200 + err, QProcess::CrashExit);
}

",
"",
"FlowProcess::waitForAllFinished();",
[Cpp3Std(["<map>", "<chrono>", "<thread>"], []), Cpp3Qt(["<QProcess>"], [])], false
)

]