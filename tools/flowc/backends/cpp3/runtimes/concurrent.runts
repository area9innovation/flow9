[

Cpp3RuntimePart("concurrent", 
"extern QThreadPool thread_pool;",
"QThreadPool thread_pool;",
"thread_pool.setMaxThreadCount(std::thread::hardware_concurrency());", "",
[Cpp3Qt(["<QtConcurrent>"], []), Cpp3Std(["<thread>"], [])], false
),

Cpp3RuntimePart("synchronized", 
"template<typename R, typename... As> 
struct SyncFun : public Function<R, As...> {
	SyncFun(Flow lock, Fun<R, As...> f): Function<R, As...>(f->fn) { }
	//SyncFun(const SyncFun& f): fn(f.fn) { }
	//SyncFun(SyncFun&& f): fn(std::move(f.fn)) { }

	//Int arity() const override { return fn->arity(); }
	//Flow callFlow() const override { return fn->callFlow(); }
	//Flow callFlow(Flow as...) const override { return fn->callFlow(as); }

	R call(As... as) const override { 
		const std::lock_guard<std::mutex> lock(mx);
		return Function<R, As...>::call(as...); 
	}
	//Fun<R, As...> fn;
	mutable std::mutex mx;
};
", "", "", "",
[Cpp3Std(["<mutex>"], [])], false
)


]