import tools/flowc/backends/wasm/wasm_runtime_typetable;
import tools/flowc/backends/wasm/wasm_runtime_type_info;

// Implementations of natives which should run Wasm side
export {

	bitNot(int) -> int;
	bitAnd(int, int) -> int;
	bitOr(int, int) -> int;
	bitXor(int, int) -> int;
	bitShl(int, int) -> int;
	bitUshr(int, int) -> int;
	
	isArray(int) -> bool;
	isSameStructType(int, int) -> bool;
	makeStructValue(structname : int, args : int, default_value : int) -> int;
	
	isSameObj(int, int) -> bool;
	number2double2(int) -> double;
	toString2(int) -> int;
	toString222(int) -> int;

	
	list2string(int) -> int;
	list2array(int) -> int;
	
	//////////////////////////////////////////////////////////////////////////////
	// Natives from array.flow

	// native length : ([?]) -> int = Native.length;
	wasm_typed_length(int, int) -> int;
	
	// native concat : ([?], [?]) -> [?] = Native.concat;
	wasm_typed_concat_i32(int, int, int) -> int;	
	wasm_typed_concat_f64(int, int, int) -> int;	
	wasm_typed_concat_i32_ref(int, int, int) -> int;	

	// native elemIndex : (a : [?], elem : ?, illegal : int) -> int = Native.elemIndex;
	// elemIndex(int, int, int) -> int;
	
	// native map : ([?], (?) -> ??) -> [??] = Native.map;
	wasm_typed_map(int, int, int) -> int;
	
	// native mapi : ([?], (int, ?) -> ??) -> [??] = Native.mapi;
	wasm_typed_mapi(int, int, int) -> int;
	
	// native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
	wasm_typed_fold_i32(int, int, int, int) -> int;
	wasm_typed_fold_f64(int, double, int, int) -> double;
	wasm_typed_fold_i32_ref(int, int, int, int) -> int;
	
	// native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;
	wasm_typed_foldi_i32(int, int, int, int) -> int;
	wasm_typed_foldi_f64(int, double, int, int) -> double;
	wasm_typed_foldi_i32_ref(int, int, int, int) -> int;
	
	// native replace : ([?], int, ?) -> [?] = Native.replace;
	wasm_typed_replace_i32(int, int, int, int) -> int;	
	wasm_typed_replace_f64(int, int, double, int) -> int;	
	wasm_typed_replace_i32_ref(int, int, int, int) -> int;	
	
	// native subrange : ([?], index : int, length : int) -> [?] = Native.subrange;
	wasm_typed_subrange_i32(int, int, int, int) -> int;
	wasm_typed_subrange_f64(int, int, int, int) -> int;
	wasm_typed_subrange_i32_ref(int, int, int, int) -> int;

	// native enumFromTo : (start : int, end : int) -> [int] = Native.enumFromTo;
	enumFromTo(int, int) -> int;
	
	// native iter : ([?], (?)->void) -> void = Native.iter;
	wasm_typed_iter(int, int, int) -> void;
	
	// native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
	wasm_typed_iteri(int, int, int) -> void;
	
	// native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;
	wasm_typed_iteriUntil(int, int, int) -> int;
	
	// native filter : ([?], (?)->bool) -> [?] = Native.filter;
	wasm_typed_filter(arr : int, f : int, int) -> int;


	//////////////////////////////////////////////////////////////////////////////
	// Natives from string.flow
	
	strlen(int) -> int;
	wasm_s2a(int) -> int;
	wasm_string2utf8(int) -> int;
	strIndexOf(int, int) -> int;
	substring(int, int, int) -> int;
	strRangeIndexOf(int, int, int, int) -> int;
	fromCharCode(int) -> int;
	getCharCodeAt(int, int) -> int;

	//////////////////////////////////////////////////////////////////////////////
	// Natives from runtime.flow
	
	// native println2 : io (flow) -> void = Native.println;
	println2(int) -> void;
	
	//////////////////////////////////////////////////////////////////////////////
	// Some stubs
	
	printCallstack() -> void;
	captureCallstack() -> int;

	// TODO:
	// native quit : io (code : int) -> void = Native.quit;
	// native gc : io () -> void = Native.gc;
	// native deleteNative : io (native) -> void = Native.deleteNative;

	// native fcPrintln2 : io (flow) -> void = Native.fcPrintln;

	// native captureStringCallstack : io () -> string = Native.captureStringCallstack;
	// native captureCallstackItem : io (index : int) -> native = Native.captureCallstackItem;
	// native callstack2string : io (native) -> string = Native.callstack2string

	// native impersonateCallstackItem : io (callstack : native, flags : int) -> void = Native.impersonateCallstackItem;
	// native impersonateCallstackFn : io (fn : flow, flags : int) -> void = Native.impersonateCallstackFn;
	// native impersonateCallstackNone : io (flags : int) -> void = Native.impersonateCallstackNone;

	// native fail : io (msg : string) -> void = Native.failWithError;
	// native fail0 : io (msg : string) -> ? = Native.failWithError;
}


bitNot(b : int) -> int {
	wasm_i32_xor(b, 0xffffffff)
}

bitAnd(a : int, b : int) -> int {
	wasm_i32_and(a, b)
}

bitOr(a : int, b : int) -> int {
	wasm_i32_or(a, b)
}

bitXor(a : int, b : int) -> int {
	wasm_i32_xor(a, b)
}

bitShl(a : int, b : int) -> int {
	wasm_i32_shl(a, b)
}

bitUshr(a : int, b : int) -> int {
	wasm_i32_shr_u(a, b)
}

// expected that v is flow here
isArray(v : int) -> bool {
	td = wasm_i32_load(v + 4);
	9 == wasm_i32_load8_u(td);
}

wasm_debug_ensure_flow_type(addr : int) -> void {
	t = wasm_i32_load8_u(addr);
	if (t != 5) {
		prints("ERROR! Expected flow-type but got:");
		printi(t);
		wasm_unreachable();
	}
}

// both v1 and v2 are addresses of flow
isSameStructType(v1 : int, v2 : int) -> bool {
	addr1 = wasm_i32_load(v1 + 4);
	addr2 = wasm_i32_load(v2 + 4);
	// wasm_debug_ensure_flow_type(addr1);
	// wasm_debug_ensure_flow_type(addr2);
	t1 = wasm_i32_load8_u(addr1);
	t2 = wasm_i32_load8_u(addr2);
	// printi(t1);
	// printi(t2);
	(t1 == 10) && (t2 == 10) && (addr1 == addr2)
}

// all arguments are memory pointers
makeStructValue(structname : int, args : int, default_value : int) -> int {
	typedesc = wasm_find_struct_descriptor(structname);
	
	if (typedesc != -1) {
		struct = wasm_alloc_struct(typedesc, wasm_calc_struct_size(typedesc));
		wasm_set_struct_values(struct, typedesc, args);
	
		// printi(wasm_i32_load(struct + 0));
		// printi(wasm_i32_load(struct + 4));
		// printi(wasm_i32_load(struct + 8));
		// printi(wasm_i32_load(struct + 12));
		// printi(wasm_i32_load(struct + 16));
		// printi(wasm_i32_load(struct + 20));
		wasm_alloc_flow_i32_ref(struct, 12, typedesc)
	} else {
		default_value
	}
}

// both parameters are pointers
isSameObj(v1 : int, v2 : int) -> bool {
	v1 == v2
}

number2double2(v : int) -> double {
	t = wasm_i32_load8_u(wasm_i32_load(v + 4));
	if (t == 3) {
		wasm_f64_load(v + 8)
	} else {
		wasm_f64_convert_s_i32(wasm_i32_load(v + 8))
	}
}

wasm_i2s(v : int) -> int {
	wasm_int_to_string(v)
}

wasm_d2s(v : double) -> int {
	wasm_double_to_string(v)
}

wasm_b2s(v : int) -> int {
	wasm_bool_to_string(v)
}

wasm_array2string(v : int, type_addr : int) -> int {
	wasm_array_to_string(v, type_addr)
}

toString222(v : int) -> int {
	toString2(v)
}

// v - flow
toString2(v : int) -> int {
	type_addr = wasm_i32_load(v + 4);
	type = wasm_i32_load8_u(type_addr);

	res = if (type == 3) {	// double
		wasm_d2s(wasm_f64_load(v + 8))
	} else if (type == 4) {	// string
		wasm_i32_load(v + 8)
	} else {
		val = wasm_i32_load(v + 8);
		if (type == 1) {	// bool
			wasm_b2s(val)
		} else if (type == 2) {	// int
			wasm_i2s(val)
		} else if (type == 9) {	// array
			wasm_array2string(val, type_addr)
		} else {
			prints("Type not known! Type: " + cast(type : int -> string) + 
				"; v: " + cast(v : int -> string) +
				"; type_addr: " + cast(type_addr : int -> string) + 
				"; type: " + wasm_dump_type(type_addr)
				);
			wasm_address_of("")
		}
	}

	res;
}

wasm_do_calc_string_list_length(v : int) {
	if (wasm_calc_struct_nfields(v) == 2) {	// Cons
		head = wasm_i32_load(v + 8);
		len = wasm_i32_load(head + 4);
		tail = wasm_i32_load(v + 12);
		len + wasm_do_calc_string_list_length(tail)
	} else { // EmptyList
		0
	}
}

wasm_copy_strings_from_list(dst : int, v : int) -> void {
	if (wasm_calc_struct_nfields(v) == 2) {	// Cons
		head = wasm_i32_load(v + 8);
		len = wasm_i32_load(head + 4);
		tail = wasm_i32_load(v + 12);
		wasm_copy_mem(head + 8, len, dst - len);
		wasm_copy_strings_from_list(dst - len, tail);
	}
}

// v is string
list2string(v : int) -> int {
	len = wasm_do_calc_string_list_length(v);
	str = wasm_alloc(8 + (len + 3) / 4 * 4);
	wasm_i32_store(str, 1); // initial refcnt is 1
	wasm_i32_store(str + 4, len);
	wasm_copy_strings_from_list(str + 8 + len, v);
	str
}

// type is WasmTypeDescriptor for this function
wasm_typed_length(arr : int, type : int) -> int {
	do_wasm_length(arr);
}

do_wasm_length(arr : int) -> int {
	wasm_i32_load(arr + 4)
}

list2array(l : int) -> int {
	type = wasm_load_list_type(l);
	elemSize = if (type == 3) 8 else 4; // 3 == double
	n = wasm_do_calc_list_size(l, elemSize);
	arr = wasm_alloc_array(n, 8 + n * elemSize);
	if (n > 0) {
		wasm_do_copy_list_to_array(arr + 8 + (n-1) * elemSize, l, elemSize, type);
	}
	arr
}

wasm_load_list_type(l : int) -> int {
	nfieldsAddr = wasm_struct_nfields_address(l);
	nfields = wasm_i32_load8_u(nfieldsAddr);
	if (nfields == 2) wasm_i32_load8_u(nfieldsAddr + 1 + 2)
	else -1;
}

wasm_do_calc_list_size(v : int, elemSize : int) -> int {
	if (wasm_calc_struct_nfields(v) == 2) {	// Cons
		tail = wasm_i32_load(v + 8 + elemSize);
		1 + wasm_do_calc_list_size(tail, elemSize)
	} else { // EmptyList
		0
	}
}

wasm_copy_item(dst : int, src : int, type : int) {
	if (type == 3) { // double
		// doesn't compile by some reason...
		// v = wasm_f32_load(src);	
		// wasm_f32_store(dst, v);
		
		// workaround
		wasm_i32_store(dst, wasm_i32_load(src));
		wasm_i32_store(dst + 4, wasm_i32_load(src + 4));
	} else if (type == 1 || type == 2) { // bool, int
		wasm_i32_store(dst, wasm_i32_load(src));
	} else if (type == 4 || type == 10 || type == 11) { // string, struct, union
		addr = wasm_i32_load(src);
		wasm_i32_store(dst, addr);
		wasm_inc_refcnt(addr);
	} else {
		printi(type);
		wasm_unreachable();
	}
}

wasm_do_copy_list_to_array(dst : int, src : int, elemSize : int, type : int) -> void {
	if (wasm_calc_struct_nfields(src) == 2) {	// Cons
		wasm_copy_item(dst, src + 8, type);
		tail = wasm_i32_load(src + 8 + elemSize);
		wasm_do_copy_list_to_array(dst - elemSize, tail, elemSize, type)
	} else { // EmptyList
	}
}

wasm_typed_iter(arr : int, f : int, type : int) -> void {
	wasm_iter(arr, f, type, false);
}

wasm_typed_iteri(arr : int, f : int, type : int) -> void {
	wasm_iter(arr, f, type, true);
}

wasm_iter(arr : int, f : int, type : int, isIteri : bool) -> void {
	arr_td = wasm_get_arg_td(type, 0);
	f_td = wasm_get_arg_td(type, 1);
	
	elemType = wasm_get_arg_type(f_td, if (isIteri) 1 else 0);
	elemSize = type2size(elemType);
	
	heap = isHeap(elemType);
	
	n = wasm_i32_load(arr + 4);
	if (n > 0) {
		faddr = wasm_i32_load(f + 8);
		wasm_do_iter(arr + 8, f, faddr, elemSize, 0, n, isIteri, heap);
	}
}

wasm_do_iter_call(idx : int, v : ?, f : int, faddr : int, isIteri : bool) -> void {
	// wasm_inc_refcnt(f);
	if (!isIteri) wasm_call_indirect1(v, f, faddr)
	else wasm_call_indirect2(idx, v, f, faddr)
}

wasm_i32_load_inc(src : int, heap : bool) -> int {
	v = wasm_i32_load(src);
	if (heap) wasm_inc_refcnt(v);
	v
}

wasm_do_iter(src : int, f : int, faddr : int, elemSize : int, idx : int, n : int, isIteri : bool, heap : bool) -> void {
	if (idx < n) {
		if (elemSize == 8) {
			wasm_do_iter_call(idx, wasm_f64_load(src), f, faddr, isIteri);
		} else {
			wasm_do_iter_call(idx, wasm_i32_load_inc(src, heap), f, faddr, isIteri);
		}
		wasm_do_iter(src + elemSize, f, faddr, elemSize, idx + 1, n, isIteri, heap);
	}
}

// arr is array, f is function, returns int
wasm_typed_iteriUntil(arr: int, f : int, type : int) -> int {
	arr_td = wasm_get_arg_td(type, 0);
	f_td = wasm_get_arg_td(type, 1);
	
	n = do_wasm_length(arr);

	elemType = wasm_get_arg_type(f_td, 1);
	elemSize = type2size(elemType);
	heap = isHeap(elemType);

	wasm_do_iteriUntil(arr + 8, f, elemSize, n, 0, heap);	
}

wasm_do_iteriUntil(arr : int, f : int, elemSize : int, n : int, idx : int, heap : bool) -> int {
	if (idx == n) {
		idx
	} else {
		faddr = wasm_i32_load(f + 8);
		wasm_inc_refcnt(f);
		cur = arr + idx * elemSize;
		y = if (elemSize == 8) {
			wasm_call_indirect2ret(idx, wasm_f64_load(cur), f, faddr);
		} else {
			wasm_call_indirect2ret(idx, wasm_i32_load_inc(cur, heap), f, faddr);
		}
		if (y == 1) {
			idx
		} else {
			wasm_do_iteriUntil(arr, f, elemSize, n, idx + 1, heap);
		}
	}
}

wasm_typed_map(arr : int, f : int, type : int) -> int {
	wasm_map(arr, f, type, false)
}

wasm_typed_mapi(arr : int, f : int, type : int) -> int {
	wasm_map(arr, f, type, true);
}

// arr is array, f is function, returns array
wasm_map(arr : int, f : int, type : int, isMapi : bool) -> int {
	n = do_wasm_length(arr);

	idx = if (isMapi) 1 else 0;
	
	arr_td = wasm_get_arg_td(type, 0);
	f_td = wasm_get_arg_td(type, 1);

	elemType = wasm_get_arg_type(f_td, idx);
	elemSize = type2size(elemType);

	retType = wasm_get_arg_type(f_td, -1);
	retSize = type2size(retType);

	heap = isHeap(elemType);

	res = wasm_alloc_array(n, 8 + n * retSize);

	wasm_do_map(res + 8, arr + 8, n, 0, f, elemSize, retSize, isMapi, heap);

	res
}

wasm_do_map_call(idx : int, xx : ?, f : int, isMapi : bool) -> ?? {
	faddr = wasm_i32_load(f + 8);
	// wasm_inc_refcnt(f);
	if (!isMapi) wasm_call_indirect1ret(xx, f, faddr)
	else wasm_call_indirect2ret(idx, xx, f, faddr)
}

wasm_do_map(dst : int, src : int, n : int, idx : int, f : int, elemSize : int, retSize : int, isMapi : bool, heap : bool) -> void {
	if (idx < n) {
		curSrc = src + idx * elemSize;
		curDst = dst + idx * retSize;
		if (elemSize == 8) {
			xx = wasm_f64_load(curSrc);
			if (retSize == 8) {
				wasm_f64_store(curDst, wasm_do_map_call(idx, xx, f, isMapi))
			} else {
				wasm_i32_store(curDst, wasm_do_map_call(idx, xx, f, isMapi))
			}

		} else {
			x = wasm_i32_load_inc(curSrc, heap);
			if (retSize == 8) {
				wasm_f64_store(curDst, wasm_do_map_call(idx, x, f, isMapi))
			} else {
				wasm_i32_store(curDst, wasm_do_map_call(idx, x, f, isMapi))
			}
		}
		wasm_do_map(dst, src, n, idx + 1, f, elemSize, retSize, isMapi, heap);
	}
}

// fold does not need special processsing for ref/stack accumulator - it is just passed as is
// it does need special processing based on array element double/ref/stack - this is done dynamically

wasm_typed_fold_i32(arr : int, acc : int, f : int, type : int) -> int {
	wasm_do_fold_init_i(arr, acc, f, type, false)	
}

wasm_typed_fold_i32_ref(arr : int, acc : int, f : int, type : int) -> int {
	wasm_inc_refcnt(acc);
	res = wasm_do_fold_init_i(arr, acc, f, type, false);
	res;
}

wasm_typed_foldi_i32(arr : int, acc : int, f : int, type : int) -> int {
	wasm_do_fold_init_i(arr, acc, f, type, true)	
}

wasm_typed_foldi_i32_ref(arr : int, acc : int, f : int, type : int) -> int {
	wasm_inc_refcnt(acc);
	res = wasm_do_fold_init_i(arr, acc, f, type, true);
	res;
}

wasm_typed_fold_f64(arr : int, acc : double, f : int, type : int) -> double {
	wasm_do_fold_init_f(arr, acc, f, type, false)
}

wasm_typed_foldi_f64(arr : int, acc : double, f : int, type : int) -> double {
	wasm_do_fold_init_f(arr, acc, f, type, true)
}

wasm_do_fold_call(idx : int, acc : ?, xx : ??, f : int, isFoldi : bool) -> ? {
	faddr = wasm_i32_load(f + 8);
	// increase refcnt for closure pointer
	// wasm_inc_refcnt(f); 
	if(!isFoldi) wasm_call_indirect2ret(acc, xx, f, faddr)
	else wasm_call_indirect3ret(idx, acc, xx, f, faddr)
}

/*
  There are 4 refcounts to manage:
    - to closure (f) - just increase upon every function call
	- accumulator (acc) - do nothing, we got it live and we pass as is to function, get 
		return value, pass further - all inc's/dec's are compensated
	- to array element [if needed]
	- to array itself
*/
wasm_do_fold_init_f(arr : int, acc : double, f : int, type : int, isFoldi : bool) -> double {
	arr_td = wasm_get_arg_td(type, 0);
	f_td = wasm_get_arg_td(type, 2);

	idx = if (isFoldi) 2 else 1;
	elemType = wasm_get_arg_type(f_td, idx);
	elemHeap = isHeap(elemType);
	elemSize = type2size(elemType);
	
	n = do_wasm_length(arr);

	res = if (n == 0) {
		acc
	} else {
		wasm_do_fold_f(arr + 8, acc, f, elemSize, n, 0, isFoldi, elemHeap)
	}

	res;
}

wasm_do_fold_init_i(arr : int, acc : int, f : int, type : int, isFoldi : bool) -> int {
	arr_td = wasm_get_arg_td(type, 0);
	f_td = wasm_get_arg_td(type, 2);

	idx = if (isFoldi) 2 else 1;
	elemType = wasm_get_arg_type(f_td, idx);
	elemHeap = isHeap(elemType);
	elemSize = type2size(elemType);

	acc_td = wasm_get_arg_td(type, 1);
	isAccRef = isHeap(wasm_i32_load8_u(acc_td));
	
	n = do_wasm_length(arr);

	res = if (n == 0) {
		acc
	} else {
		wasm_do_fold_i(arr + 8, acc, f, elemSize, n, 0, isFoldi, elemHeap, acc_td, isAccRef)
	}

	res;
}

wasm_do_fold_f(arr : int, acc : double, f : int, elemSize : int, n : int, idx : int, isFoldi : bool, elemHeap : bool) -> double {
	if (idx == n) {
		acc;
	} else {
		src = arr + idx * elemSize;
		y = if (elemSize == 8) {
			wasm_do_fold_call(idx, acc, wasm_f64_load(src), f, isFoldi)
		} else {
			wasm_do_fold_call(idx, acc, wasm_i32_load(src), f, isFoldi)
		}

		wasm_do_fold_f(arr, y, f, elemSize, n, idx + 1, isFoldi, elemHeap);
	}
}

wasm_do_fold_i(arr : int, acc : int, f : int, elemSize : int, n : int, idx : int, isFoldi : bool, elemHeap : bool, acc_td : int, isAccRef : bool) -> int {
	if (idx == n) {
		acc;
	} else {
		src = arr + idx * elemSize;
		y = if (elemSize == 8) {
			wasm_do_fold_call(idx, acc, wasm_f64_load(src), f, isFoldi)
		} else {
			wasm_do_fold_call(idx, acc, wasm_i32_load(src), f, isFoldi)
		}

		if (isAccRef) {
			wasm_dec_refcnt(acc, acc_td);
		}

		wasm_do_fold_i(arr, y, f, elemSize, n, idx + 1, isFoldi, elemHeap, acc_td, isAccRef);
	}
}

enumFromTo(start : int, end : int) -> int {
	n = if (start <= end) end - start + 1 else 0;
	res = wasm_alloc_array(n, 8 + n * 4);
	wasm_do_enumFromTo(res + 8, start, n);
	res
}

wasm_do_enumFromTo(dst : int, cur : int, count : int) -> void {
	if (count > 0) {
		wasm_i32_store(dst, cur);
		wasm_do_enumFromTo(dst + 4, cur + 1, count - 1);
	}
}

wasm_typed_concat_i32(arr1 : int, arr2 : int, type : int) -> int {
	wasm_concat_impl(arr1, arr2, 4, type, false);
}

wasm_typed_concat_f64(arr1 : int, arr2 : int, type : int) -> int {
	wasm_concat_impl(arr1, arr2, 8, type, false);
}

wasm_typed_concat_i32_ref(arr1 : int, arr2 : int, type : int) -> int {
	wasm_concat_impl(arr1, arr2, 4, type, true);
}

wasm_concat_impl(arr1 : int, arr2 : int, elemSize : int, type : int, isRefCnt : bool) -> int {
	len1 = do_wasm_length(arr1);
	len2 = do_wasm_length(arr2);
	res = wasm_alloc_array(len1 + len2, 8 + elemSize * (len1 + len2));
	wasm_copy_mem(arr1 + 8, len1 * elemSize, res + 8);
	wasm_copy_mem(arr2 + 8, len2 * elemSize, res + 8 + len1 * elemSize);
	if (isRefCnt) {
		wasm_inc_refcnt_array(res + 8, len1 + len2);
	}

	res;
}

wasm_inc_refcnt_array(address : int, len : int) -> void {
	if (len > 0) {
		wasm_inc_refcnt(wasm_i32_load(address)); // each element is an address of refcounted value
		wasm_inc_refcnt_array(address + 4, len - 1);
	}
}

strlen(s : int) -> int {
	do_strlen(s)
}

do_strlen(s : int) -> int {
	wasm_i32_load(s + 4) / 2
}

wasm_s2a(str : int) -> int {
	len = wasm_i32_load(str + 4) / 2;
	arr = wasm_alloc_array(len, 8 + len * 4);
	wasm_do_s2a(str + 8, arr + 8, len);
	arr
}

wasm_do_s2a(src : int, dst : int, count : int) -> void {
	if (count > 0) {
		c = wasm_i32_load16_u(src);
		wasm_i32_store(dst, c);
		wasm_do_s2a(src + 2, dst + 4, count - 1);
	}
}

wasm_string2utf8(str : int) -> int {
	// TODO: works only for ascii, fix it later
	wasm_s2a(str)
}


strIndexOf(str : int, substr : int) -> int {
	len = do_strlen(str);
	sub_len = do_strlen(substr);
	
	res = if (sub_len > len)
		-1
	else if (sub_len == 0)
		0
	else 
		wasm_do_strIndexOf(str, substr, len, sub_len, 0, 0);

	res;
}

strRangeIndexOf(str : int, substr : int, start : int, end : int) -> int {
	str_len = do_strlen(str);
	sub_len = do_strlen(substr);

	len = if (end > str_len) str_len - start else end - start;

	res = if (sub_len > len)
		-1
	else if (sub_len == 0)
		0
	else
		wasm_do_strIndexOf(str, substr, end, sub_len, start, 0);

	res;
}

wasm_do_strIndexOf(str : int, substr : int, len : int, sub_len : int, index : int, sub_index : int) -> int {
	if (index == len) {
		-1
	} else{
		str_index_char = wasm_i32_load16_u(str + 8 + index * 2);
		sub_index_char = wasm_i32_load16_u(substr + 8 + sub_index * 2);

		if (str_index_char == sub_index_char) {
			if (sub_index == sub_len - 1) {
				//full substring matched - return index of first matched char in string
				index - (sub_len - 1)
			} else {
				//char matches, check next.
				wasm_do_strIndexOf(str, substr, len, sub_len, index + 1, sub_index + 1)
			}
		} else {
				//chars did not match, start over from substring[0]
				wasm_do_strIndexOf(str, substr, len, sub_len, index + 1, 0)
		}
	}
}

substring(str : int, start : int, new_length : int) -> int {
	len = do_strlen(str);
	if (start == 0 && new_length >= len) {
		str;
	} else if (start >= len) {
		//return empty string
		new_string = wasm_alloc(8);
		wasm_i32_store(new_string, 1); // initial refcnt set to 1
		wasm_i32_store(new_string + 4, 0);
		new_string;
	} else {
		//if start + length > strlen(str), we just take the rest of string to avoid allocating too much mem.
		new_length_real = if (new_length + start > len) len - start else new_length;  

		new_string = wasm_alloc(new_length_real * 2 + 8);
		wasm_i32_store(new_string, 1); // initial refcnt set to 1
		wasm_i32_store(new_string + 4, new_length_real * 2);
		wasm_copy_mem(str + 8 + start * 2, new_length_real * 2, new_string + 8);
		new_string;
	}

}

fromCharCode(code : int) -> int {
	char = wasm_alloc(4 + 4 + 2);
	wasm_i32_store(char, 1); // initial refcnt set to 1
	wasm_i32_store(char + 4, 2);
	wasm_i32_store16(char + 8, code);
	char;
}

getCharCodeAt(str : int, index : int) -> int {
	if (index < do_strlen(str) && index >= 0) {
		wasm_i32_load16_u(str + 8 + index * 2);
	} else {
		0
	}
}

println2(x : int) -> void { // TODO: check refcounts here
	typedesc = wasm_i32_load(x + 4);
	type = wasm_i32_load8_u(typedesc);
	if (!(
		(type == 2) ||	// int
		(type == 3) ||	// double
		(type == 4) ||	// string
		(type == 9)		// array
	)) {
		prints("Unsupported type in println2: ");
		printi(type);
	}
	// wasm_inc_refcnt(x);
	prints(wasm_get_string_by_addr(toString2(x)));
}


// some stubs to be implemented later

printCallstack() -> void {
	prints("printCallstack() not implemented yet");
	wasm_unreachable();
}

captureCallstack() -> int {
	prints("captureCallstack() not implemented yet");
	//wasm_unreachable();
	0
}

wasm_typed_subrange_i32(arr : int, start : int, count : int, type : int) -> int {
	wasm_subrange_impl(arr, start, count, 4, type, false);
}

wasm_typed_subrange_f64(arr : int, start : int, count : int, type : int) -> int {
	wasm_subrange_impl(arr, start, count, 8, type, false);
}

wasm_typed_subrange_i32_ref(arr : int, start : int, count : int, type : int) -> int {
	wasm_subrange_impl(arr, start, count, 4, type, true);
}

wasm_subrange_impl(arr : int, start : int, count : int, elemSize : int, type : int, isRefCnt : bool) -> int {
	len = do_wasm_length(arr);

	if (start < 0 || start >= len || count <= 0) {
		// empty array
		wasm_alloc_array(0, 8);
	} else {
		cnt = if (count < len - start) count else len - start;

		res1 = wasm_alloc_array(cnt, 8 + elemSize * len);
		wasm_copy_mem(arr + 8 + start * elemSize, cnt * elemSize, res1 + 8);	

		if (isRefCnt) {
			wasm_inc_refcnt_array(res1 + 8, cnt);
		}

		res1;
	}
}

wasm_typed_replace_i32(arr : int, idx : int, elem : int, type : int) -> int {
	wasm_replace_impl(arr, idx, elem, 0.0, 4, type, false);
}

wasm_typed_replace_f64(arr : int, idx : int, elem : double, type : int) -> int {
	wasm_replace_impl(arr, idx, 0, elem, 8, type, false);
}

wasm_typed_replace_i32_ref(arr : int, idx : int, elem : int, type : int) -> int {
	wasm_replace_impl(arr, idx, elem, 0.0, 4, type, true);
}

wasm_replace_impl(arr : int, idx : int, elemI : int, elemD : double, elemSize : int, type : int, isRefCnt : bool) -> int {
	len1 = do_wasm_length(arr);

	if (idx < 0 || idx > len1) {
		prints("replace(): index out of range");
		wasm_unreachable();
		0
	} else {
		len = if (idx == len1) {
			len1 + 1;
		} else {
			len1;
		}

		res = wasm_alloc_array(len, 8 + elemSize * len);
		dest = res + 8 + idx * elemSize;
		wasm_copy_mem(arr + 8, len * elemSize, res + 8);	

		if (elemSize == 4) {
			wasm_i32_store(dest, elemI);
		} else {
			wasm_f64_store(dest, elemD);
		}
		
		if (isRefCnt) {
			wasm_inc_refcnt_array(res + 8, len);
		}

		res;
	}
}

wasm_typed_filter(arr : int, f : int, type : int) -> int {
	arr_td = wasm_get_arg_td(type, 0);
	f_td = wasm_get_arg_td(type, 1);

	len = do_wasm_length(arr);
	
	elemType = wasm_get_arg_type(f_td, 0);
	elemSize = type2size(elemType);

	heap = isHeap(elemType);

	res = wasm_alloc(len * elemSize);

	cnt = wasm_do_filter(res, arr + 8, len, 0, 0, f, elemSize, heap);

	out = wasm_alloc_array(cnt, 8 + elemSize * cnt);
	wasm_copy_mem(res, cnt * elemSize, out + 8);	

	wasm_free(res);

	if (heap) {
		wasm_inc_refcnt_array(out + 8, cnt);
	}

	out;
}

wasm_do_filter_call(xx : ?, f : int) -> int {
	faddr = wasm_i32_load(f + 8);
	// wasm_inc_refcnt(f);
	wasm_call_indirect1ret(xx, f, faddr)
}

wasm_do_filter(dst : int, src : int, n : int, idxSrc : int, idxDst : int, f : int, elemSize : int, heap : bool) -> int {
	if (idxSrc < n) {
		curSrc = src + idxSrc * elemSize;
		curDst = dst + idxDst * elemSize;

		idxDstNext = 
		if (elemSize == 8) {
			xx = wasm_f64_load(curSrc);
			yy = wasm_do_filter_call(xx, f);

			if (yy != 0) {
				wasm_f64_store(curDst, xx);
				idxDst + 1;
			} else {
				idxDst;
			}

		} else {
			x = wasm_i32_load_inc(curSrc, heap);
			y = wasm_do_filter_call(x, f);

			if (y != 0) {
				wasm_i32_store(curDst, x);
				idxDst + 1;
			} else {
				idxDst;
			}
		}

		wasm_do_filter(dst, src, n, idxSrc + 1, idxDstNext, f, elemSize, heap);
	} else idxDst;
}
