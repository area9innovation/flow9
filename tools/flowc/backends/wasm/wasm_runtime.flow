import tools/flowc/backends/wasm/wasm_runtime_allocator;

export {
	wasm_init_runtime() -> void;
	native init_heap_js : () -> void = host.init_heap_js;

	// JS natives

	native js_free_native : (int) -> void = host.js_free_native;
	// native printi : (int) -> void = host.printi;
	native printd : (double) -> void = host.printd;
	// native prints : (string) -> void = host.prints;
	native printa : ([?], [?]) -> void = host.printa;
	native wasm_dmod : (double, double) -> double = host.wasm_dmod;

	native wasm_int_to_string : (int) -> int = host.wasm_int_to_string;
	native wasm_double_to_string : (double) -> int = host.wasm_double_to_string;
	native wasm_bool_to_string : (int) -> int = host.wasm_bool_to_string;
	native wasm_array_to_string : (int, int) -> int = host.wasm_array_to_string;

 	// a way to get the address of any object as int - essentially a specialized type conversion
	native wasm_address_of : (v : ?) -> int = wasm_compiler.address_of;
	// a way to get type descriptor for a specific type
	native wasm_type_of : (v : ?) -> int = wasm_compiler.type_of;
	// a way to get the number of bytes needed on stack for a given type
	native wasm_stack_size_of : (v : ?) -> int = wasm_compiler.stack_size_of;
	// a way to check if a given type uses heap or not
	native wasm_uses_heap : (v : ?) -> int = wasm_compiler.uses_heap;

	// returns a type descriptor for a string type
	native wasm_string_type_id : () -> int = wasm_compiler.string_type_id;
	// returns a type descriptor for a flow type
	native wasm_flow_type_id : () -> int = wasm_compiler.flow_type_id;
	// returns a type descriptor for a native type
	native wasm_native_type_id : () -> int = wasm_compiler.native_type_id;
	// returns a type descriptor for an array of flow
	native wasm_array_flow_type_id : () -> int = wasm_compiler.array_flow_type_id;

	// Some helpers
	wasm_type_size(typeDescriptor : int) -> int;
	wasm_next_typedescriptor(typeDescriptor : int) -> int;

	// low-level memory management - used by wasm-side natives implementation
	wasm_copy_mem(from : int, bytes : int, to : int) -> void;

	// Strings

	wasm_compare_strings(val1 : int, val2 : int) -> int;
	wasm_concat_strings(val1 : int, val2 : int) -> int;

	native wasm_get_string_by_addr : (addr : int) -> string = wasm_compiler.get_string_by_addr;

	// References

	// Make a reference to a pure i32 stack value
	wasm_make_ref_i32(val : int) -> int;

	// Make a reference to a heap-based i32 value
	wasm_make_ref_i32_ref(val : int) -> int;

	// Make a reference to a f64 pure stack value
	wasm_make_ref_f64(val : double) -> int;


	// Dereference a i32 pure stack value
	wasm_deref_i32(reference : int, typeDescriptor : int) -> int;

	// Dereference a heap-based i32 value
	wasm_deref_i32_ref(reference : int, typeDescriptor : int) -> int;

	// Dereference a f64 pure stack value
	wasm_deref_f64(reference : int, typeDescriptor : int) -> double;


	// Set a reference to a pure i32 value
	wasm_set_ref_i32(reference : int, val : int, typeDescriptor : int) -> void;

	// Update a reference to a heap-based value
	wasm_set_ref_i32_ref(reference : int, val : int, typeDescriptor : int) -> void;

	// Set a reference to a pure f64 value
	wasm_set_ref_f64(reference : int, val : double, typeDescriptor : int) -> void;

	// Ref. counting

	// Increase ref. counting for this heap value
	wasm_inc_refcnt(address : int) -> void;

	// Increase ref. counting for this heap value and return the argument
	wasm_inc_refcnt_passthru(address : int) -> int;

	// Decrease ref. counting for this heap value
	wasm_dec_refcnt(address : int, typeDescriptor : int) -> void;

	// Print refcnt - used for debugging
	wasm_print_refcnt_passthru(address : int) -> int;

	// Return current refcnt
	wasm_get_refcnt(address : int, typeDescriptor : int) -> int;

	// Allocator debugging

	// Dump current list of free blocks
	// label is a number that is dumped before dumping blocks - useful to identify output 
	wasm_dump_free_blocks(label : int) -> void;

	// Arrays

	wasm_alloc_array(elements : int, bytes : int) -> int;

	// Sets the element of an array! 
	// Returns the original address
	// Used for array initialization
	wasm_set_array_i32(array_address : int, offset : int, value : int) -> int;
	wasm_set_array_i32_ref(array_address : int, offset : int, value : int) -> int;
	wasm_set_array_f64(array_address : int, offset : int, value : double) -> int;

	wasm_get_array_i32(array_address : int, index : int, typeDescriptor : int) -> int;
	wasm_get_array_i32_ref(array_address : int, index : int, typeDescriptor : int) -> int;
	wasm_get_array_f64(array_address : int, index : int, typeDescriptor : int) -> double;

	wasm_compare_arrays_i32(val1 : int, val2 : int, typeDescriptor : int) -> int;
	wasm_compare_arrays_i32_ref(val1 : int, val2 : int, typeDescriptor : int) -> int;
	wasm_compare_arrays_f64(val1 : int, val2 : int, typeDescriptor : int) -> int;

	// Structs
	wasm_alloc_struct(id : int, bytes : int) -> int;

	wasm_get_field_i32(struct_address : int, offset : int) -> int;
	wasm_get_field_i32_ref(struct_address : int, offset : int) -> int;
	wasm_get_field_f64(struct_address : int, offset : int) -> double;

	wasm_set_mutable_field_i32(struct_address, value : int, offset : int) -> void;
	wasm_set_mutable_field_i32_ref(struct_address, value : int, offset : int, valTypeDescriptor : int) -> void;
	wasm_set_mutable_field_f64(struct_address, value : double, offset : int) -> void;

	wasm_compare_typenames(val1 : int, val2 : int) -> int;

	// returns an address of struct typedescriptor or -1 if not found
	// structname is an address of string constant
	wasm_find_struct_descriptor(structname : int) -> int;	
	
	// Unions
	wasm_get_fieldno_i32(struct_address : int, fieldno : int) -> int;
	wasm_get_fieldno_i32_ref(struct_address : int, fieldno : int) -> int;
	wasm_get_fieldno_f64(struct_address : int, fieldno : int) -> double;

	wasm_compare_struct_type(value : int, typeDescriptor : int) -> int;


	// Closure

	// a wrapper to pass global functions as values - wraps function address to closure
	WasmGlobalClosureWrapper(functionPointer : int);

	// Flow

	wasm_alloc_flow_i32(value : int, bytes : int, typeDescriptor : int) -> int;
	wasm_alloc_flow_f64(value : double, bytes : int, typeDescriptor : int) -> int;
	wasm_alloc_flow_i32_ref(value : int, bytes : int, typeDescriptor : int) -> int;

	wasm_unbox_flow_i32(value : int, typeDescriptor : int) -> int;
	wasm_unbox_flow_f64(value : int, typeDescriptor : int) -> double;
	wasm_unbox_flow_i32_ref(address : int, typeDescriptor : int) -> int;

	wasm_compare_flow(val1 : int, val2 : int) -> int;
	wasm_compare_native(val1 : int, val2 : int) -> int;

	wasm_get_flow_content_type(address : int) -> int;

	native wasm_typetable_start: () -> int = wasm_compiler.typetable_start;

	wasm_dump_type(type_ptr : int) -> string;
}

// this is used as a temporary place to hold return value of a function 
// that is itself a function - wasm lacks dup instruction, do we do
// set_global $wasm_global_temp_holder
// get_global $wasm_global_temp_holder // to get the closure pointer to pass to function
// get_global $wasm_global_temp_holder // to get the closure pointer again to compute function address
// mut suffix is important - it makes global variable mutable
wasm_global_temp_holder_mut : int = 0; 

wasm_init_runtime() {
	wasm_init_allocator();
	init_heap_js();
}


wasm_compare_strings(val1 : int, val2 : int) -> int {
	if (val1 == val2) 0
	else {
		len1 = wasm_i32_load(val1 + 4); // in bytes
		len2 = wasm_i32_load(val2 + 4); // in bytes
		minLen = if (len1 < len2) len1 else len2;
		lenBust = if (len1 == len2) 0 else if (len1 < len2) -1 else 1;
		// do_wasm_compare accepts len in chars, so dividing by 2
		do_wasm_compare_strings(val1 + 8, val2 + 8, 0, minLen / 2, lenBust);
	}
}

do_wasm_compare_strings(address1 : int, address2 : int, i : int, len : int, equal : int) -> int {
	if (i < len) {
		char1 = wasm_i32_load16_u(address1);
		char2 = wasm_i32_load16_u(address2);
		if (char1 == char2) {
			do_wasm_compare_strings(address1 + 2, address2 + 2, i + 1, len, equal);
		} else if (char1 < char2) {
			-1
		} else {
			1;
		}
	} else equal;
}

// The values are void, bool, int. All compare the same way
wasm_compare_arrays_i32(val1 : int, val2 : int, typeDescriptor : int) -> int {
	if (val1 == val2) 0
	else {
		len1 = wasm_i32_load(val1 + 4);
		len2 = wasm_i32_load(val2 + 4);
		minLen = if (len1 < len2) len1 else len2;
		lenBust = if (len1 == len2) 0 else if (len1 < len2) -1 else 1;
		do_wasm_compare_arrays_i32(val1 + 8, val2 + 8, 0, minLen, lenBust);
	}
}

do_wasm_compare_arrays_i32(address1 : int, address2 : int, i : int, len : int, equal : int) -> int {
	if (i < len) {
		val1 = wasm_i32_load(address1);
		val2 = wasm_i32_load(address2);

		if (val1 == val2) {
			do_wasm_compare_arrays_i32(address1 + 4, address2 + 4, i + 1, len, equal);
		} else if (val1 < val2) -1 else 1;
	} else {
		equal;
	}
}


wasm_compare_arrays_i32_ref(val1 : int, val2 : int, typeDescriptor : int) -> int {
	if (val1 == val2) 0
	else {
		len1 = wasm_i32_load(val1 + 4);
		len2 = wasm_i32_load(val2 + 4);
		minLen = if (len1 < len2) len1 else len2;
		lenBust = if (len1 == len2) 0 else if (len1 < len2) -1 else 1;
		do_wasm_compare_arrays_i32_ref(val1 + 8, val2 + 8, 0, minLen, lenBust, typeDescriptor);
	}
}

do_wasm_compare_arrays_i32_ref(address1 : int, address2 : int, i : int, len : int, equal : int, typeDescriptor : int) -> int {
	if (i < len) {
		val1 = wasm_i32_load(address1);
		val2 = wasm_i32_load(address2);
		cmp = wasm_compare_i32_using_typedescriptor(val1, val2, typeDescriptor);

		if (cmp == 0) {
			do_wasm_compare_arrays_i32_ref(address1 + 4, address2 + 4, i + 1, len, equal, typeDescriptor);
		} else cmp;
	} else {
		equal;
	}
}


// The values are double
wasm_compare_arrays_f64(val1 : int, val2 : int, typeDescriptor : int) -> int {
	if (val1 == val2) 0
	else {
		len1 = wasm_i32_load(val1 + 4);
		len2 = wasm_i32_load(val2 + 4);
		minLen = if (len1 < len2) len1 else len2;
		lenBust = if (len1 == len2) 0 else if (len1 < len2) -1 else 1;
		do_wasm_compare_arrays_f64(val1 + 8, val2 + 8, 0, minLen, lenBust);
	}
}

do_wasm_compare_arrays_f64(address1 : int, address2 : int, i : int, len : int, equal : int) -> int {
	if (i < len) {
		val1 = wasm_f64_load(address1);
		val2 = wasm_f64_load(address2);

		if (val1 == val2) {
			do_wasm_compare_arrays_f64(address1 + 8, address2 + 8, i + 1, len, equal);
		} else if (val1 < val2) -1 else 1;
	} else equal;
}


wasm_compare_i32_using_typedescriptor(val1 : int, val2 : int, typeDescriptor : int) -> int {
	tag = wasm_i32_load8_u(typeDescriptor);
	// This should match wasmTypeDescriptor2bytes 
	if (tag == 0 || tag == 1 || tag == 2 || tag == 8 || tag == 12) {
		// void, bool, int, ref, function (index in function table)
		if (val1 == val2) 0
		else if (val1 < val2) -1
		else 1
	} else if (tag == 4) {
		// string
		wasm_compare_strings((val1), (val2));
	} else if (tag == 9) {
		// array
		// What is the type of the array?
		atag = wasm_i32_load8_u(typeDescriptor + 1);
		if (atag == 3) {
			// double array
			wasm_compare_arrays_f64((val1), (val2), typeDescriptor + 1);
		} else {
			wasm_compare_arrays_i32_ref((val1), 
				(val2), typeDescriptor + 1);
		}
	} else if (tag == 10 || tag == 11)  {
		// 10: struct
		// 11: union
		wasm_compare_typenames((val1), (val2));
	} else if (tag == 5) {
		// 5: flow
		wasm_compare_flow((val1), (val2));
	} else if (tag == 6) {
		// 6: flow
		wasm_compare_native((val1), (val2));
	} else {
		// 3: double - not supposed to happen here

		// 7: type parameter
		printi(tag);
		0;
	}
}

wasm_concat_strings(val1 : int, val2 : int) -> int {
	len1 = wasm_i32_load(val1 + 4);
	len2 = wasm_i32_load(val2 + 4);
	if (len1 == 0) {
		wasm_inc_refcnt_passthru(val2)		
	} else if (len2 == 0) {
		wasm_inc_refcnt_passthru(val1)		
	} else {
		val3 = wasm_alloc(8 + (len1 + len2 + 3) / 4 * 4);

		// Reset ref count
		wasm_i32_store(val3, 1); // put 1 as the result will have to be stored somewhere
		wasm_i32_store(val3 + 4, len1 + len2);
		wasm_copy_mem(val1 + 8, len1, val3 + 8);
		wasm_copy_mem(val2 + 8, len2, val3 + 8 + len1);
		val3;
	}
}


wasm_make_ref_i32(val : int) -> int {
	address = wasm_alloc(8);
	// Reset ref counter
	wasm_i32_store(address, 1);	// initial refcnt 
	wasm_i32_store(address + 4, val);
	address;
}

wasm_make_ref_i32_ref(val : int) -> int {
	address = wasm_alloc(8);
	// Reset ref counter
	wasm_i32_store(address, 1); // initial refcnt 
	wasm_i32_store(address + 4, val);
	wasm_inc_refcnt(val);
	address;
}

wasm_make_ref_f64(val : double) -> int {
	address = wasm_alloc(12);
	// Reset ref counter
	wasm_i32_store(address, 1); // initial refcnt 
	wasm_f64_store(address + 4, val);
	address;
}

wasm_deref_i32(reference : int, typeDescriptor : int) -> int {
	wasm_i32_load(reference + 4);
}

wasm_deref_i32_ref(reference : int, typeDescriptor : int) -> int {
	val = wasm_i32_load(reference + 4);
	wasm_inc_refcnt(val); // returning val, so increasing its refcount before returning
	val;
}

wasm_deref_f64(reference : int, typeDescriptor : int) -> double {
	wasm_f64_load(reference + 4);
}

wasm_set_ref_i32(reference : int, val : int, typeDescriptor : int) -> void {
	wasm_i32_store(reference + 4, val);
}

wasm_set_ref_i32_ref(reference : int, val : int, typeDescriptor : int) -> void {
	// valDescriptor + 1 holds type descriptor for the value
	old_val = wasm_i32_load(reference + 4);
	wasm_i32_store(reference + 4, val);
	wasm_dec_refcnt(old_val, typeDescriptor + 1);
}

wasm_set_ref_f64(reference : int, val : double, typeDescriptor : int) -> void {
	wasm_f64_store(reference + 4, val);
}

wasm_free_ref(reference : int, typeDescriptor : int) -> void {
	valueTag = wasm_i32_load8_u(typeDescriptor + 1);
	if (is_ref_tag(valueTag))
		wasm_dec_refcnt(wasm_i32_load(reference + 4), typeDescriptor + 1);
}

wasm_inc_refcnt(address : int) -> void {
	if (address < 0 || address >= 65536 * wasm_memory_size()) {
		printi(1952);
		printi(address);
	}
	// printi(address);
	counter = wasm_i32_load(address);
	if (counter < 1) {
		printi(address);
		printi(counter);
		wasm_unreachable();
	}
	wasm_i32_store(address, counter + 1);
}

wasm_inc_refcnt_passthru(address : int) -> int {
	wasm_inc_refcnt(address);
	address;
}

wasm_dec_refcnt(address : int, typeDescriptor : int) -> void {
	val = wasm_i32_load(address);
	if (val <= 0) {
		printi(val);
		wasm_unreachable();
	}
	wasm_i32_store(address, val - 1);

	// finally free mem if refcnt equal 1
	// do not attempt to free static strings
	if (val == 1 && address >= wasm_heap_start()) {
		// process refs. we have to decrement refcnt for underlying elements
		tag = wasm_i32_load8_u(typeDescriptor);
		if (!is_ref_tag(tag)) {
			// do nothing
		} else if (tag == 5) {
			// flow
			wasm_free_flow(address); 
		} else if (tag == 6) {
			// native - ??
			if (val == 1) js_free_native(wasm_i32_load(address + 4));
		}else if (tag == 8) {
			// ref
			wasm_free_ref(address, typeDescriptor);
		} else if (tag == 9) { 
			// array
			wasm_free_array(address, typeDescriptor);		
		} else if (tag == 10) {
			// struct
			wasm_free_struct(address);
		} else if (tag == 11) {
			// union - actually it is a struct there
			wasm_free_struct(address);
		} else if (tag == 12) {
			// function / closure
			// is actually a struct - so treat like a struct
			wasm_free_struct(address);
		} else {
			// TODO:
			// 7: type parameter
		}

		wasm_free(address);
	}
}

wasm_print_refcnt_passthru(address : int) -> int {
	val = wasm_i32_load(address);
	printi(val);
	address;
}

wasm_get_refcnt(address : int, typeDescriptor : int) -> int {
	wasm_i32_load(address);
}

// label is a number that is dumped before dumping blocks - useful to identify output 
wasm_dump_free_blocks(label : int) -> void {
	printi(label);
	wasm_do_dump_free_blocks(wasm_read_head());
}

wasm_do_dump_free_blocks(block : int) -> void {
	next = wasm_i32_load(block);
	printi(block); // address 
	printi(wasm_i32_load(block + 8)); // size
	printi(wasm_i32_load(block + 4)); // prev
	printi(next); // next, -1 here indicates end of list
	if (next > 0)
		wasm_do_dump_free_blocks(next);
}

wasm_copy_mem(from : int, bytes : int, to : int) -> void {
	if (bytes < 4) {
		if (bytes == 0) {
		} else if (bytes == 1) {
			wasm_i32_store8(to, wasm_i32_load8_u(from));
		} else if (bytes == 2) {
			wasm_i32_store16(to, wasm_i32_load16_u(from));
		} else {
			wasm_i32_store16(to, wasm_i32_load16_u(from));
			wasm_i32_store8(to + 2, wasm_i32_load8_u(from + 2));
		}
	} else {
		wasm_i32_store(to, wasm_i32_load(from));
		wasm_copy_mem(from + 4, bytes - 4, to + 4);
	}
}


wasm_alloc_array(elements : int, bytes : int) -> int {
	addr = wasm_alloc(bytes);
	// Reset ref count
	wasm_i32_store(addr, 1); // initialize refcount to 1 - it will be stored somewhere 
	wasm_i32_store(addr + 4, elements);
	addr;
}

// whether a given tag represents a reference type
is_ref_tag(tag : int) {
	if (tag < 0 || tag > 12) // validating the tag
		wasm_unreachable();

	tag >= 4; // void, int, bool, double are not references 
}

wasm_free_array(addr : int, typeDescriptor : int) {
	count = wasm_i32_load(addr + 4);
	if (count > 0) {
		elementTag = wasm_i32_load8_u(typeDescriptor + 1);
		if (is_ref_tag(elementTag)) {
			do_wasm_free_array(addr + 8, typeDescriptor + 1, count);
		}
	}
}

// this function is intended to be called for arrays of ref types. And thus we'll increment element address by 4 bytes
do_wasm_free_array(elementAddr : int, typeDescriptor : int, count : int) {
	elm = wasm_i32_load(elementAddr);
	wasm_dec_refcnt(elm, typeDescriptor);
	if (count > 1)
		do_wasm_free_array(elementAddr + 4, typeDescriptor, count - 1);
}

wasm_set_array_i32(array_address : int, offset : int, val : int) -> int {
	wasm_i32_store(array_address + offset, val);
	array_address;
}

wasm_set_array_i32_ref(array_address : int, offset : int, val : int) -> int {
	wasm_inc_refcnt(val);
	wasm_i32_store(array_address + offset, val);
	array_address;
}

wasm_set_array_f64(array_address : int, offset : int, val : double) -> int {
	wasm_f64_store(array_address + offset, val);
	array_address;
}

wasm_get_array_i32(array_address : int, index : int, typeDescriptor : int) -> int {
	// TODO: We could do bounds checking here. Out of bounds could call  wasm_unreachable();
	wasm_i32_load(array_address + 8 + 4 * index);
}

wasm_get_array_i32_ref(array_address : int, index : int, typeDescriptor : int) -> int {
	// TODO: We could do bounds checking here
	val = wasm_i32_load(array_address + 8 + 4 * index);
	wasm_inc_refcnt(val);
	val;
}

wasm_get_array_f64(array_address : int, index : int, typeDescriptor : int) -> double {
	// TODO: We could do bounds checking here
	wasm_f64_load(array_address + 8 + 8 * index);
}

wasm_alloc_struct(id : int, bytes : int) -> int {
	addr = wasm_alloc(bytes);
	// Reset ref count
	wasm_i32_store(addr, 1); // initialize refcount to 1 - it will be stored somewhere 
	wasm_i32_store(addr + 4, id);
	addr;
}

wasm_free_struct(addr : int) {
	typeDescriptor = wasm_i32_load(addr + 4);
	snamelen = wasm_i32_load8_u(typeDescriptor + 1);
	nfields = wasm_i32_load8_u(typeDescriptor + 2 + snamelen);
	if (nfields > 0) wasm_free_struct_fields(addr + 8, typeDescriptor + 3 + snamelen, nfields);
}

wasm_free_struct_fields(fieldAddr : int, fieldDesc : int, nfields : int) {
	typeDescriptor = fieldDesc + 2; // skipping field ID
	tag = wasm_i32_load8_u(typeDescriptor);
	if (is_ref_tag(tag)) {
		field = wasm_i32_load(fieldAddr);
		wasm_dec_refcnt(field, typeDescriptor);
	}
	if (nfields > 1) {
		fieldSize = wasm_type_size(typeDescriptor);
		wasm_free_struct_fields(fieldAddr + fieldSize, wasm_next_typedescriptor(typeDescriptor), nfields - 1);
	}
}

wasm_get_field_i32(struct_address : int, offset : int) -> int {
	typeDescriptor = wasm_i32_load(struct_address + 4);
	wasm_i32_load(struct_address + offset);
}

wasm_get_field_i32_ref(struct_address : int, offset : int) -> int {
	typeDescriptor = wasm_i32_load(struct_address + 4);
	val = wasm_i32_load(struct_address + offset);
	wasm_inc_refcnt(val);
	val;
}

wasm_get_field_f64(struct_address : int, offset : int) -> double {
	typeDescriptor = wasm_i32_load(struct_address + 4);
	wasm_f64_load(struct_address + offset);
}

wasm_set_mutable_field_i32(struct_address : int, value : int, offset : int) -> void {
	typeDescriptor = wasm_i32_load(struct_address + 4);
	wasm_i32_store(struct_address + offset, value);
}

wasm_set_mutable_field_i32_ref(struct_address : int, value : int, offset : int, valTypeDescriptor : int) -> void {
	typeDescriptor = wasm_i32_load(struct_address + 4);
	old_val = wasm_i32_load(struct_address + offset);
	wasm_i32_store(struct_address + offset, value);
	wasm_inc_refcnt(value);
	wasm_dec_refcnt(old_val, valTypeDescriptor);
}

wasm_set_mutable_field_f64(struct_address : int, value : double, offset : int) -> void {
	typeDescriptor = wasm_i32_load(struct_address + 4);
	wasm_f64_store(struct_address + offset, value);
}

wasm_get_fieldno_i32(struct_address : int, fieldno : int) -> int {
	wasm_get_field_i32(struct_address, wasm_find_fieldoffset(struct_address, fieldno));
}

wasm_get_fieldno_i32_ref(struct_address : int, fieldno : int) -> int {
	wasm_get_field_i32_ref(struct_address, wasm_find_fieldoffset(struct_address, fieldno));
}

wasm_get_fieldno_f64(struct_address : int, fieldno : int) -> double {
	wasm_get_field_f64(struct_address, wasm_find_fieldoffset(struct_address, fieldno));
}

// Find the offset to this field id number in the structure at this address
wasm_find_fieldoffset(address : int, fieldno : int) -> int {
	type = wasm_i32_load(address + 4);
	snamelen = wasm_i32_load8_u(type + 1);
	nfields = wasm_i32_load8_u(type + 2 + snamelen);

	wasm_do_find_fieldoffset(type + 3 + snamelen, 0, nfields, 8, fieldno);
}

// Find the offset to the field with the fieldno id field.
wasm_do_find_fieldoffset(type : int, field : int, nfields : int, offset: int, fieldno : int) -> int {
	if (field < nfields) {
		currentId = wasm_i32_load16_u(type);
		if (currentId == fieldno) {
			offset
		} else {
			nextOffset = offset + wasm_type_size(type + 2);
			nextFieldStart = wasm_next_typedescriptor(type + 2);
			wasm_do_find_fieldoffset(nextFieldStart, field + 1, nfields, nextOffset, fieldno);
		}
	} else {
		// Did not find it
		wasm_unreachable();
		offset;
	}
}

wasm_compare_typenames(address1 : int, address2 : int) -> int {
	// The struct layout:
	// struct - i32. Heap pointer to ref. count, 32-bit pointer to type descriptor, then args in stack value format
	type1 = wasm_i32_load(address1 + 4);
	type2 = wasm_i32_load(address2 + 4);
	if (type1 == type2) {
		// The type descriptor layout:
		// 10, strlen(sname), sname-bytes (ascii), 
		// #fields, 
		//    fields (fieldid, field-type)
		snamelen = wasm_i32_load8_u(type1 + 1);
		nfields = wasm_i32_load8_u(type1 + 2 + snamelen);

		wasm_compare_struct_fields(address1 + 8, address2 + 8, 0, nfields, type1 + 3 + snamelen);
	} else if (type1 < type2) {
		-1
	} else {
		1
	}
}


wasm_compare_struct_fields(address1 : int, address2 : int, field : int, nfields : int, typeDescriptor : int) -> int {
	if (field < nfields) {
		// Skip the field id
		ftypedesc = typeDescriptor + 2;
		fcompare = wasm_compare_using_typedescriptor(address1, address2, ftypedesc);
		if (fcompare == 0) {
			fieldSize = wasm_type_size(ftypedesc);
			wasm_compare_struct_fields(
				address1 + fieldSize, 
				address2 + fieldSize, field + 1, nfields, 
				wasm_next_typedescriptor(ftypedesc)
			);
		} else fcompare;
	} else {
		0;
	}
}

// With values of the given type at these address, compare these
wasm_compare_using_typedescriptor(address1 : int, address2 : int, typeDescriptor : int) -> int {
	tag = wasm_i32_load8_u(typeDescriptor);
	if (tag == 3) {
		// doubles
		dval1 = wasm_f64_load(address1);
		dval2 = wasm_f64_load(address2);
		if (dval1 == dval2) 0 else if (dval1 < dval2) -1 else 1;
	} else {
		val1 = wasm_i32_load(address1);
		val2 = wasm_i32_load(address2);
		wasm_compare_i32_using_typedescriptor(val1, val2, typeDescriptor);
	}
}

// How many bytes does a value with this type descriptor take up?
wasm_type_size(typeDescriptor : int) -> int {
	tag = wasm_i32_load8_u(typeDescriptor);
	if (tag == 3) 8 else 4;
}

wasm_next_typedescriptor(typeDescriptor : int) -> int {
	tag = wasm_i32_load8_u(typeDescriptor);
	// This should match wasmTypeDescriptor2bytes 
	if (tag == 0 || tag == 1 || tag == 2 || tag == 3 || tag == 4 || tag == 5 || tag == 6) {
		// void, bool, int, double, string, flow, native
		typeDescriptor + 1;
	} else if (tag == 8 || tag == 9) {
		// ref, array
		wasm_next_typedescriptor(typeDescriptor + 1);
	} else if (tag == 10) {
		// struct
		snamelen = wasm_i32_load8_u(typeDescriptor + 1);
		nfields = wasm_i32_load8_u(typeDescriptor + 2 + snamelen);
		wasm_next_field_typedescriptor(typeDescriptor + 2 + snamelen + 1, nfields);
	} else if (tag == 11) {
		// union
		slen = wasm_i32_load8_u(typeDescriptor + 1);
		typeDescriptor + 1 + 1 + slen * 2;
	} else if (tag == 12) {
		nargs = wasm_i32_load8_u(typeDescriptor + 1);
		returntype = wasm_next_arg_typedescriptor(typeDescriptor + 2, nargs);
		wasm_next_typedescriptor(returntype);
	} else {
		// TODO:
		// 7: type parameter
		typeDescriptor + 1;
	}
}

// difference between field and arg is that field has field ID, and arg is just an array
wasm_next_arg_typedescriptor(arg : int, nargs : int) -> int {
	if (nargs <= 0) arg
	else wasm_next_arg_typedescriptor(wasm_next_typedescriptor(arg), nargs - 1);
}

// difference between field and arg is that field has field ID, and arg is just an array element
wasm_next_field_typedescriptor(field : int, nfields : int) -> int {
	if (nfields <= 0) field
	else {
		nextField = wasm_next_typedescriptor(field + 2);
		wasm_next_field_typedescriptor(nextField, nfields - 1);
	}
}

wasm_compare_struct_type(value : int, typeDescriptor : int) -> int {
	ts = wasm_i32_load(value + 4);
	if (ts < typeDescriptor) -1
	else if (ts == typeDescriptor) 0 else 1
}

wasm_alloc_flow_i32(value : int, bytes : int, typeDescriptor : int) -> int {
	addr = wasm_alloc(bytes);
	// Reset ref count to 1
	wasm_i32_store(addr, 1);
	wasm_i32_store(addr + 4, typeDescriptor);
	wasm_i32_store(addr + 8, value);
	addr;
}

wasm_alloc_flow_f64(value : double, bytes : int, typeDescriptor : int) -> int {
	addr = wasm_alloc(bytes);
	// Reset ref count to 1
	wasm_i32_store(addr, 1);
	wasm_i32_store(addr + 4, typeDescriptor);
	wasm_f64_store(addr + 8, value);
	addr;
}

// TODO: wasm_alloc_i32_ref() is exactly the same as wasm_alloc_flow_i32(). Why?
wasm_alloc_flow_i32_ref(value : int, bytes : int, typeDescriptor : int) -> int {
	addr = wasm_alloc(bytes);
	wasm_i32_store(addr, 1); // Reset ref count to 1
	wasm_i32_store(addr + 4, typeDescriptor);
	wasm_i32_store(addr + 8, value);
	wasm_inc_refcnt(value);
	addr;
}

wasm_free_flow(address : int) {
	// type descriptor is embedded along with the value
	typeDescriptor = wasm_i32_load(address + 4);
	tag = wasm_i32_load8_u(typeDescriptor);
	if (is_ref_tag(tag)) {
		wasm_dec_refcnt(wasm_i32_load(address + 8), typeDescriptor);
	}
}

wasm_compare_flow(address1 : int, address2 : int) -> int {
	if (address1 == address2) 0
	else {
		type1 = wasm_i32_load(address1 + 4);
		type2 = wasm_i32_load(address2 + 4);
		if (type1 == type2) {
			tag = wasm_i32_load8_u(type1);
			if (tag == 1 || tag == 2) { // bools or ints
				ival1 = wasm_i32_load(address1 + 8);
				ival2 = wasm_i32_load(address2 + 8);
				if (ival1 == ival2) 0 else if (ival1 < ival2) -1 else 1;
			} else if (tag == 3) {
				// doubles
				dval1 = wasm_f64_load(address1 + 8);
				dval2 = wasm_f64_load(address2 + 8);
				if (dval1 == dval2) 0 else if (dval1 < dval2) -1 else 1;
			} else {
				val1 = wasm_i32_load(address1 + 8);
				val2 = wasm_i32_load(address2 + 8);
				wasm_compare_i32_using_typedescriptor(val1, val2, type1);
			}
		} else if (type1 < type2) -1
		else 1
	}
}

wasm_compare_native(address1 : int, address2 : int) -> int {
	if (address1 == address2) 0
	else {
		val1 = wasm_i32_load(address1 + 4);
		val2 = wasm_i32_load(address2 + 4);
		if (val1 == val2) 0 else if (val1 < val2) -1 else 1;
	}
}

wasm_unbox_error(typeRequested : int, typeActual : int) {
	prints("Types mismatch\n    requested(addr: " + cast(typeRequested : int -> string) + "): " + wasm_dump_type(typeRequested) + 
		"\n    actual(addr: " + cast(typeActual : int -> string) + "): " + wasm_dump_type(typeActual));
	wasm_unreachable();
}

wasm_unbox_flow_i32(address : int, typeDescriptor : int) -> int {
	type = wasm_i32_load(address + 4);
	if (type != typeDescriptor) {
		wasm_unbox_error(typeDescriptor, type);
	}
	wasm_i32_load(address + 8);
}

wasm_unbox_flow_f64(address : int, typeDescriptor : int) -> double {
	type = wasm_i32_load(address + 4);
	if (type != typeDescriptor) {
		wasm_unbox_error(typeDescriptor, type);
	}
	wasm_f64_load(address + 8);
}

wasm_get_flow_content_type(address : int) -> int {
	wasm_i32_load(address + 4);
}

wasm_unbox_flow_i32_ref(address : int, typeDescriptor : int) -> int {
	type = wasm_i32_load(address + 4);
	if (type != typeDescriptor) {
		wasm_unbox_error(typeDescriptor, type);
	}
	r = wasm_i32_load(address + 8);
	td = wasm_i32_load(r + 4);
	wasm_inc_refcnt(r);
	r;
}

// checks if wide string and ascii string are equal
wasm_compare_string_to_ascii_string(str : int, astr : int) -> bool {
	len1 = wasm_i32_load(str + 4) / 2;
	len2 = wasm_i32_load8_u(astr);
	if (len1 != len2) false
	else do_wasm_compare_string_to_ascii_string(str + 8, astr + 1, len1)
}

do_wasm_compare_string_to_ascii_string(str : int, astr : int, len : int) -> bool {
	if (len == 0) true
	else {
		wchar = wasm_i32_load16_u(str);
		char = wasm_i32_load8_u(astr);
		if (wchar != char) false 
		else {
			do_wasm_compare_string_to_ascii_string(str + 2, astr + 1, len - 1)
		}
	}
}

wasm_find_struct_descriptor(structname : int) -> int {
	do_wasm_find_struct_descriptor(wasm_typetable_start(), structname)
}

do_wasm_find_struct_descriptor(typedescriptor : int, structname : int) -> int {
	tag = wasm_i32_load8_u(typedescriptor);
	if (tag == 10 && wasm_compare_string_to_ascii_string(structname, typedescriptor + 1)) typedescriptor
	else {
		if (typedescriptor != wasm_heap_start()) {
			do_wasm_find_struct_descriptor(wasm_next_typedescriptor(typedescriptor), structname)
		} else -1;
	}
}

wasm_do_dump_type(type_ptr : int, type_len : int, offset : int, acc : string) -> string {
	if (offset < type_len) {
		type = wasm_i32_load8_u(type_ptr + offset);
		s = acc + (if (acc == "") "" else ", ") + cast(type : int -> string);

		wasm_do_dump_type(type_ptr, type_len, offset + 1, s);
	} else acc;
}

wasm_dump_type(type_ptr : int) -> string { 
	wasm_do_dump_type(type_ptr, wasm_next_typedescriptor(type_ptr) - type_ptr, 0, "");
}

