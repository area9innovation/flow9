import tools/flowc/incremental/fiexp;
import tools/flowc/backends/wasm/wasm_type_descriptor;
import tools/flowc/backends/wasm/wasm_exp;
import ds/array;
import tools/flowc/backends/wasm/wasm_print;
import tools/flowc/backends/wasm/f2wasm_utils;

export {
	fiexp2wasmexp(context : WasmContext, names : FiGlobalNames, e : FiExp) -> WasmExp;
	wasmExpType(e : WasmExp) -> WasmTypeDescriptor;
}

nextWasmExpId = ref 0;

getNextWasmExpId() {
	value = ^nextWasmExpId;
	nextWasmExpId := value + 1;
	value;
}

fiWasmFunctionReturnType(type : WasmTypeDescriptor) -> WasmTypeDescriptor {
	switch (type) {
		WasmTypeFunction(args, returnType): returnType;
		WasmTypeJSCallback(args, returnType): returnType;
		default: {
			println("ERROR! Expected function type, but got " + toString(type));
			WasmTypeVoid();
		}
	}
}

fiTypeFromExp(e : WasmExp, locals : Tree<string, WasmTypeDescriptor>) -> WasmTypeDescriptor {
	checkVar = \e1, t -> {
		switch (e1) {
			WasmVar(x, type, __): fiWasmFunctionReturnType(type);
			default: {
				// This place is never reached in tests! Is that correct?
				t
			}
		}
	}

	switch (e) {
		WasmLambda(args, b, type, __) : type;
		WasmCall(e1, args, type, __, __) : checkVar(e1, type);
		WasmVar(name, type, __) : 
			// The locals is only used to replace WasmTypeFunction() with WasmTypeJSCallback()
			// when needed. Probably we can do it in another place of code.
			lookupTreeDef(locals, name, type);
		WasmLet(__, __, __, __, type2, __) : type2;
		WasmIf(__, __, __, type, __) : type;
		WasmSwitch(__, __, __, type, __) : type;
		WasmCast(__, __, __, type, __) : type;
		WasmSeq(__, type, __) : type;
		WasmCallPrim(__, __, type, __) : type;
		WasmRequire(__, __, type, __) : type;
		WasmUnsafe(__, __, type, __) : type;
		WasmVoid(__) : WasmTypeVoid();
		WasmDouble(__, __) : WasmTypeDouble();
		WasmInt(__, __) : WasmTypeInt();
		WasmString(__, __) : WasmTypeString();
		WasmBool(__, __) : WasmTypeBool();
        WasmIncRefcnt(__, type, __): type;
        WasmDecRefcnt(__, __, __): WasmTypeVoid();
	}
}

// We cache types for var since we need to now correct type when perform Call convert.
// i.e. situation
// 1	Let(FFF, typeFunction)
// 2		Call(
// 3			Var(function1, typeFunction), 
// 4			args1, 
// 5			typeFunction
// 6		),
// 7		Call(
// 8			Var(FFF, typeFunction), 
// 9			args2,
// 10			type2
// 11		)
// if function1 on line 3 is native function then it will return not a simple function but JS callback.
// So,  with caching we'll get proper type for FFF on line 8 and convert Call (line 7) to WasmCallHost
dofiexp2wasmexp(context : WasmContext, names : FiGlobalNames, e : FiExp, locals : Tree<string, WasmTypeDescriptor>, isnative : bool) {
	do_type	= \t -> fitype2wasmtype(names, t);
	do_expExt = \ex, newLocals, isNative -> dofiexp2wasmexp(context, names, ex, newLocals, isNative);
	do_exp	= \ex -> do_expExt(ex, locals, false);
	do_var	= \v, n -> WasmVar(v.name, fitype2wasmtypeEx(names, v.type, n), []);

	switch (e) {
		FiLambda(args, b, type, __): {
			args2 = map(args, \a -> WasmFunArg(a.name, do_type(a.type)));
			WasmLambda(args2, do_exp(b), do_type(type), [])
		}
		FiCall(f, args1, type, __): {
			args = map(args1, \a -> fiexpWrapNative(context, a));
			switch (f) {
				FiVar(fname, ftype, __): {
					is_native_call = containsKeyTree(context.natives, fname);
					ee = do_var(f, is_native_call);
					tt = fiTypeFromExp(ee, locals);
					ttt = fiWasmFunctionReturnType(fitype2wasmtypeEx(names, ftype, is_native_call));

					args2 = map(args, \a -> do_expExt(a, locals, is_native_call));
					
					frontArgs = if (fiWasmIsJSCallback(tt)) [WasmVar(fname, WasmTypeInt(), [])]
							    else [];
					callType = if (fiWasmIsJSCallback(tt)) WasmCallHost()
							   else if (is_native_call) WasmCallNative()
							   else WasmCallSimple();
					WasmCall(ee, concat(frontArgs, args2), ttt, callType, [])
				}
				default: {
					WasmCall(do_exp(f), map(args, \a -> do_exp(a)), do_type(type), WasmCallSimple(), []);
				}
			}
		}
		FiVar(name, type, __): {
			do_var(e, isnative);	// isnative needed here
		}
		FiLet(name, type, e1, e2, type2, __): {
			e1_conv = do_exp(e1);
			name2 = getWasmLocalVarName(name, do_type(type));
			t1_conv = fiTypeFromExp(e1_conv, locals);
			locals2 = if (fiWasmIsJSCallback(t1_conv)) setTree(locals, name2, t1_conv)
					  else locals;
			e2_conv = do_expExt(e2, locals2, false);
			t2_conv = do_type(type2);
			WasmLet(name, t1_conv, e1_conv, e2_conv, t2_conv, [])
		}
		FiIf(e1, e2, e3, type, __): {
			WasmIf(do_exp(e1), do_exp(e2), do_exp(e3), do_type(type), []);
		}
		FiSwitch(x, switchType, cases, type, __): {
			cases2 = map(cases, \c -> WasmCase(c.struct, c.argNames, do_exp(c.body)));
			WasmSwitch(do_var(x, false), do_type(switchType), cases2, do_type(type), [])
		}
		FiCast(ex, tFrom, tTo, type, __): {
			WasmCast(do_exp(ex), do_type(tFrom), do_type(tTo), do_type(type), []);
		}
		FiSeq(es, type, __): {
			WasmSeq(map(es, \stmt -> do_exp(stmt)), do_type(type), []);
		}
		FiCallPrim(op, es, type, __): {
			WasmCallPrim(op, map(es, \stmt -> do_exp(stmt)), do_type(type), []);
		}
		FiVoid(start): WasmVoid([]);
		FiDouble(d, __): WasmDouble(d, []);
		FiInt(i, __): WasmInt(i, []);
		FiString(s, __): WasmString(s, []);
		FiBool(b, __): WasmBool(b, []);
		FiRequire(flowfile, ex, type, __): 
			WasmRequire(flowfile, do_exp(ex), do_type(type), []); 
		FiUnsafe(name, fallback, type, __): 
			WasmUnsafe(name, do_exp(fallback), do_type(type), []);
	}
}

fiWasmIsJSCallback(type : WasmTypeDescriptor) {
	switch (type) {
		WasmTypeJSCallback(__, __): true;
		default: false;
	}
}

fiexpWrapNative(context : WasmContext, a : FiExp) -> FiExp {
	switch (a) {
		FiVar(n, t, start): {
			switch (t) {
				FiTypeFunction(args, rt): {
					if (containsKeyTree(context.natives, n)) {
						FiVar(n + "__wrapped__", t, start)
					} else a;
				}
				default: a;
			}
		}
		default: a;
	}
}

fiexp2wasmexp(context : WasmContext, names : FiGlobalNames, e : FiExp) {
	dofiexp2wasmexp(context, names, e, makeTree(), false);
}

wasmExpType(e : WasmExp) -> WasmTypeDescriptor {
	switch (e) {
		WasmLambda(__, __, type, __) : type;
		WasmCall(__, __, type, __, __) : type;
		WasmVar(__, type, __) : type;
		WasmLet(__, __, __, __, type2, __) : type2;
		WasmIf(__, __, __, type, __) : type;
		WasmSwitch(__, __, __, type, __) : type;
		WasmCast(__, __, __, type, __) : type;
		WasmSeq(__, type, __) : type;
		WasmCallPrim(__, __, type, __) : type;
		WasmRequire(__, __, type, __) : type;
		WasmUnsafe(__, __, type, __) : type;
		WasmVoid(__) : WasmTypeVoid();
		WasmDouble(__, __) : WasmTypeDouble();
		WasmInt(__, __) : WasmTypeInt();
		WasmString(__, __) : WasmTypeString();
		WasmBool(__, __) : WasmTypeBool();
        WasmIncRefcnt(__, type, __): type;
        WasmDecRefcnt(__, __, __): WasmTypeVoid();
	}
}
