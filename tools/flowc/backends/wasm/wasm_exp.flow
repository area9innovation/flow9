import tools/flowc/backends/wasm/wasm_type;
import tools/flowc/fcexp;

export {
	// This mirrors FiExp with some extensions
	WasmExp ::= WasmLambda, WasmCall, WasmVar, WasmLet, WasmIf, WasmSwitch, WasmCast, WasmSeq, 
			  WasmCallPrim, WasmConst, WasmRequire, WasmUnsafe, WasmIncRefcnt;
		WasmLambda(args: [WasmFunArg], body: WasmExp, type : WasmTypeDescriptor, id : int);
		WasmCall(f: WasmExp, args: [WasmExp], type : WasmTypeDescriptor, calltype : WasmCallType, id : int);
			WasmCallType ::= WasmCallSimple, WasmCallHost, WasmCallNative;
				WasmCallSimple();
				WasmCallHost();
				WasmCallNative();
		WasmVar(name: string, type : WasmTypeDescriptor, id : int);
		WasmLet(name: string, type : WasmTypeDescriptor, e1: WasmExp, e2: WasmExp, type2 : WasmTypeDescriptor, id : int);
		WasmIf(e1: WasmExp, e2: WasmExp, e3: WasmExp, type : WasmTypeDescriptor, id : int);
		WasmSwitch(x: WasmVar, switchType : WasmTypeDescriptor, cases: [WasmCase], type : WasmTypeDescriptor, id : int);
			// struct is "default" for default case
			WasmCase(struct: string, argNames : [string], body: WasmExp, id : int);
		WasmCast(e: WasmExp, tFrom : WasmTypeDescriptor, tTo : WasmTypeDescriptor, type : WasmTypeDescriptor, id : int);
		WasmSeq(es: [WasmExp], type : WasmTypeDescriptor, id : int);
		WasmCallPrim(op: FcPrim, es: [WasmExp], type : WasmTypeDescriptor, id : int);
		WasmRequire(flowWasmle : string, e : WasmExp, type : WasmTypeDescriptor, id : int);
		WasmUnsafe(name : string, fallback : WasmExp, type : WasmTypeDescriptor, id : int);
        WasmIncRefcnt(e : WasmExp, type : WasmTypeDescriptor, id : int); // means to increase refcount on the argument

	WasmConst ::= WasmVoid, WasmDouble, WasmInt, WasmString, WasmBool;
		WasmVoid(id : int);
		WasmDouble(d : double, id : int);
		WasmInt(i : int, id : int);
		WasmString(s : string, id : int);
		WasmBool(b: bool, id : int);
		
	Wasm2Cmd ::= Wasm2Seq, Wasm2Code, Wasm2I32Const, Wasm2F64Const, Wasm2Drop, 
				 Wasm2Void, Wasm2If, Wasm2Call, Wasm2SetLocal, Wasm2GetLocal, 
				 Wasm2SetGlobal, Wasm2GetGlobal;
		Wasm2Seq(commands : [Wasm2Cmd]);
		Wasm2If(cond : Wasm2Cmd, isVoid : bool, f64 : bool, thenBranch : Wasm2Cmd, elseBranch : Wasm2Cmd);
		Wasm2I32Const(i : int);
		Wasm2F64Const(d : double);
		Wasm2Drop();
		Wasm2Void();
		Wasm2SetLocal(name : string);
		Wasm2GetLocal(name : string);
		Wasm2SetGlobal(name : string);
		Wasm2GetGlobal(name : string);
		Wasm2Call(name : string);
		// Old-style representation for compatibily purposes. To be removed.
		Wasm2Code(code : string);	
}
