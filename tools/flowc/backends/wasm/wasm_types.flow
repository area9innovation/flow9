import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/wasm/wasm_type;
import tools/flowc/backends/wasm/wasm_exp;

export {
    FiWasmFunctionTable (
        functionIndices : Tree<string, int>, // mapping function names to indices in type table
   		// lambda declarations to names - TODO
		//lambdas : Tree<FiLambda, string>
        nextIndex : int
    );

	// A global type table in both a serialized form (list of binary sequences) and compile-time - 
	// - lookup of type-to-offset in binary
	FiWasmTypeTable(
		// type-to-offset in table
		typesMap : Tree<WasmTypeDescriptor, int>, 
		// next offset == end of the table - used when generating table. Starts right after constant strings
		nextOffset : int, 
		// what structure does this struct have?
		structTypes : Tree<string, WasmTypeStruct>,
		// union types
		unionTypes : Tree<string, WasmTypeUnion>,
		// What ids do fields in structs have?
		fieldIds : Tree<string, int>
	);

    WasmStringAcc(
		// Lookup what address the given string has
		address : Tree<string, int>, 
		// The address for the next string
		offset : int
	);

    FiWasmNativeWrap(
    	name: string,
    	decl: string,
    );

    FiWasmNativeDec(
    	decl: FiNativeDec,
    	wrap: FiWasmNativeWrap
	);

	FiWasmWrapper(
		decl : FiFunctionDec,
		type : FiTypeStruct
	);


    WasmContext(
		// From flow name to full native declaration
		natives: Tree<string, FiWasmNativeDec>,
		// Lookup of string places
		stringAcc : WasmStringAcc,
		// Set of FiCall's that are tail calls
		tailCalls : Set<WasmExp>,
		// type table
		typeTable : FiWasmTypeTable,
		// function table
		functions : FiWasmFunctionTable,
		// To help lookup typenames
		globalNames : FiGlobalNames,
		// To make sure local names take priority over global
		localNames : Tree<string, WasmTypeDescriptor>,
		// Global variable initializers - contents of the global initialization function 
		globalVarsInitializers : ref List<Pair<string, string>>
	);

    // Accumulator of info from the compile step. For now, we just keep track of errors
	WasmAcc(errors : ref int);
}
