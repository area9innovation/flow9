import tools/flowc/incremental/fiprogram;
import tools/flowc/backends/common;
import tools/flowc/backends/wasm/fi2wasm_compile;
import tools/flowc/backends/wasm/wasm_type_descriptor;
import tools/flowc/backends/wasm/wasm_function_table;
import tools/flowc/manipulation/lambda_lifting;
import tools/flowc/manipulation/specialization;
import tools/flowc/manipulation/wrap_funcs_as_args;
import tools/flowc/manipulation/auto_smart_cast;
import tools/flowc/manipulation/inline_functions;
import tools/flowc/backends/wasm/wasm_js_wrapper;
import tools/flowc/backends/wasm/wasm_native_linkage;
import tools/flowc/backends/wasm/wasm_native_wrapper;
import text/blueprint;
import sys/system;
import sys/target;

import tools/flowc/flowc_typecheck;

export {
	fi2wasm(program : FiProgram, globEnv : FcTypeEnvGlobal, cfg : FiWasmConfig, callback : () -> void) -> void;
}

inlineFunctions = [
	"bitNot", 
	"bitAnd", 
	"bitOr", "bitXor", "bitShl", "bitUshr", 
	"wasm_inc_refcnt", "wasm_inc_refcnt_passthru", "wasm_dec_refcnt", "wasm_dec_refcnt_sys",
	"makeBitSet", "setBitSet", "unsetBitSet", "getBitSet", 
	"wasm_get_next_field", "wasm_get_prev_field", "wasm_get_size_field", "wasm_get_next_block", 
	"wasm_get_prev_block", "wasm_get_block_size", "wasm_set_next_block", "wasm_set_prev_block",
	"wasm_read_head", "wasm_write_head", "wasm_write_header",
	"wasm_get_array_i32", "wasm_get_array_i32_ref", "wasm_get_field_i32", "wasm_get_field_i32_ref", 
];

fi2wasm(program0 : FiProgram, globEnv : FcTypeEnvGlobal, cfg : FiWasmConfig, callback : () -> void) -> void {
	fcVerbose(cfg, 0, "Making Wasm '" + cfg.outputfile + "'...");

    // applying transformations in sequence
    processors = [
        \p -> fiWasmExtendWithRuntime(p, globEnv),
        \p -> fiWasmAddIndirectWrappers(p, cfg.flowfile),
        \p -> specializeProgram(cfg, p),
        expandCasts,
        fiWasmWrapFuncArgs,
        lift_lambdas,
        \p -> (if (cfg.doinline) fiInlineFunctions(p, \fname -> contains(inlineFunctions, fname)) else p),
    ];

    program3 = fold(processors, program0, \p, proc -> proc(p));

	fcVerbose(cfg, 1, "Collecting declarations..");
	decls1: [Pair<string, [FiDeclaration]>] = fiCollectDeclarationsCommon(program3);

	fcVerbose(cfg, 1, "Collecting natives..");
	natives1 : Tree<string, FiNativeDec> = fiWasmCollectNativeNames(cfg, program3);
	natives2 = mapTree(natives1, \n -> wasmLinkNative(cfg, program3, n));

	fcVerbose(cfg, 1, "Collecting string constants..");
	stringAcc = fiWasmCollectStrings(cfg, decls1);

	fcVerbose(cfg, 1, "Building type table..");
	types0 : FiWasmTypeTable = fiWasmBuildTypeTable(program3.names, decls1, stringAcc.offset, cfg.threadId);
	
	fcVerbose(cfg, 1, "Creating JS wrappers..");
	wrapped = fiWasmCreateNativeWrappers(natives2, types0, program3.names, cfg.threadId);
	natives : Tree<string, FiWasmNativeDec> = wrapped.natives;
	callbacks : Tree<string, FiDeclaration> = wrapped.callbacks;

	// since we need Native we add 'math' as initial
	usedModules = foldTree(natives, ["math/math"], \k, v, acc -> {
		s = if (startsWith(v.decl.nativeName, "RenderSupport.")) "form/renderform" // will create a RenderSupportHx object
		else if (startsWith(v.decl.nativeName, "FlowFileSystem.")) "fs/filesystem" 
		else "";

		if (s != "" && !contains(acc, s))
			arrayPush(acc, s)
		else acc;
	});

	
	fcVerbose(cfg, 1, "Creating WASM-side wrappers..");
	program = wrap_natives(cfg, program3, program3.names, types0, natives);
	decls2: [Pair<string, [FiDeclaration]>] = fiCollectDeclarationsCommon(program);
	types : FiWasmTypeTable = fiWasmBuildTypeTable(program.names, decls2, stringAcc.offset, cfg.threadId);

	fcVerbose(cfg, 1, "Building function table..");

	// add JS callbacks to main module's declarations
	mainmodulename = cfg.flowfile;
	decls : [Pair<string, [FiDeclaration]>] = map(decls2, \d : Pair<string, [FiDeclaration]> -> {
		if (cfg.flowfile == d.first) {
			dd = foldTree(callbacks, d.second, \type, cb, acc -> arrayPush(acc, cb));
			Pair(d.first, dd);
		} else d;
	});

	allDecls : [FiDeclaration] = concatA(map(decls, \p -> p.second));
	// collect all FiFunctionDec
	funcDecls : Tree<string, FiFunctionDec> = fold(allDecls, makeTree(), \acc, decl : FiDeclaration -> {
		switch (decl) {
			FiFunctionDec(__, __, __, __, __): setTree(acc, decl.name, decl);
			default: acc;
		}
	});

	// register fallbacks for non-existing natives
	functions = fold(allDecls, fiWasmBuildFunctionTable(cfg, decls), \acc, decl -> {
		doAdd = switch (decl) {
			FiNativeDec(__, __, __, __, fallbackLambda, __, __):
				!containsKeyTree(funcDecls, decl.name) && fallbackLambda != FiVoid(0);
			default: false;
		}
		if (doAdd) fiWasmAddFunctionToTable(acc, decl.name) else acc
	});

	names = FiGlobalNames(program.names.struct2module, program.names.union2module, program.names.function2module, 
		program.names.globalVar2module, program.names.native2module, program.names.structs, program.names.unions, 
		mergeTree(program.names.toplevel, callbacks)
	);

	moduleCount = i2s(length(decls));

	wasmContext = WasmContext(
		natives, 
		stringAcc, 
		[], 
		types, 
		functions, 
		names, 
		makeTree(), 
		ref makeList()
	);
	moduleHeader = fiWasmCreateModuleHeader(cfg, wasmContext, wrapped.import_string);
	
	fcVerbose(cfg, 0, "Generating Wasm code for declarations...");

	fiWriteASTFile(cfg, wasmContext, decls);

	modulesCode1 = foldi(decls, Cons("", makeList()), \i, acc, p: Pair<string, [FiDeclaration]> -> {
		fcVerbose(cfg, 1, "[" + i2s(i + 1) + "/" + moduleCount + "] Generating Wasm code for module " + p.first);

		mdl = lookupTree(program.modules, p.first);
		switch (mdl) {
			None(): {
				fail("Could not retrieve module " + p.first);
				Cons("", makeList());
			}
			Some(module): {
				r = fold(p.second, acc, \l, decl : FiDeclaration -> {
					// skip fallbacks if we have native
					declFixup : Maybe<FiDeclaration> = fiWasmBuildFallbackFixup(decl, natives2, funcDecls);
					tl = fiWasmCompileToplevel(cfg, program, wasmContext, either(declFixup, decl));
					Cons(if (tl == "") "" else "\n", Cons(tl, l));
				});
				
				// only generate exports for the last module
				if (i == length(decls) - 1) fiWasmCompileModuleExports(module, r) else r;
			}
		}
	});

	modulesCode2 : List<string> = concatList(modulesCode1,  moduleHeader);
	
	modulesCode = Cons(fiWasmBuildInitGlobalVars(wasmContext), modulesCode2);

	// Now build the data segment for all strings and types
	strings = foldTree((wasmContext.stringAcc).address, makeList(), 
		\s, a, acc -> Cons(fiWasmMakeStringData(s, a), acc));
	typestring = fiWasmSerializeTypeTable(cfg, types, wasmContext.stringAcc.offset);

	contents = list2string(Cons("\n)", 
		Cons(fiWasmEmitFunctionTable(wasmContext.functions), 
			Cons(typestring, concatList(strings, modulesCode))))
	);
	wasmfile = changeFileExt(cfg.outputfile, ".wasm");
	fiInvokeWat2Wasm(cfg, contents, wasmfile, \result -> { 
		if (result) {
			fiGenerateNativeJSFile(cfg, usedModules, \result1, native_code -> {
				if (result1) {
					fiWriteHostTemplateFile(cfg, wasmfile, native_code, wrapped.js_code, wrapped.wrappersJSCode, usedModules);
				}
				fiWriteListingFile(cfg, wasmContext);
				callback();
			});			
		} else {
			callback();
		}
	});

	fcVerbose(cfg, 0, "Making Wasm '" + cfg.outputfile + "' finished.");
}

fiWasmBuildFallbackFixup(
	decl : FiDeclaration, 
	natives : Tree<string, FiNativeDec>,
	funcDecls : Tree<string, FiFunctionDec>
) -> Maybe<FiDeclaration> {
	switch (decl) {
		FiFunctionDec(n, lambda, __, declStart, defiStart): {
			switch (lookupTree(natives, n)) {
				Some(nat): {
					lambda2 : FiExp = nat.fallbackLambda;
					switch (lambda2) {
						FiLambda(__, __, __, __): {
							if (lambda2 != lambda) {
								Some(FiFunctionDec(n, lambda2, lambda2.type, declStart, defiStart));
							} else None();
						}
						default: None();
					}
				}
				None(): None();
			}
		}
		FiNativeDec(name, io, type, nativeName, fallbackLambda, declStart, defiStart): {
			if (containsKeyTree(funcDecls, name)) {
				// OK, we have a fallback for this native, so skip it here
				None();
			} else {
				switch (fallbackLambda) {
					FiLambda(__, __, __, __): {
						// we have no fallback yet, but native has a body
						Some(FiFunctionDec(name, fallbackLambda, fallbackLambda.type, declStart, defiStart))
					}
					default: None();
				}
			}
		}
		default: None();
	}
}

fiWasmBuildInitGlobalVars(context : WasmContext) -> string {
	gvi = ^(context.globalVarsInitializers);
	"(func $wasm_init_global_vars\n" 
		+ list2string(mapList(gvi, \nameExprLocals -> 
			nameExprLocals.second
		)
	) + ")\n(export \"wasm_init_global_vars\" (func $wasm_init_global_vars))\n"
}


fiWasmExtendWithRuntime(program : FiProgram, globEnv : FcTypeEnvGlobal) -> FiProgram {
	// TODO: We should collect the natives that are referenced, and make sure to
	// also parse those files. alternatively, just import all Wasm natives always...
	runtimeFile = getFlowDir() + "/tools/flowc/backends/wasm/wasm_runtime.flow";
	nativesFile = getFlowDir() + "/tools/flowc/backends/wasm/wasm_natives_native.flow";
	runtimeMConfig = failEither(getCompilerConfig(), program.config);
	runtimeConfig = setConfigFlowfile(runtimeMConfig, runtimeFile);
	parsedWasmRuntime = parseAndTypecheckFlowFile(runtimeConfig, globEnv, nativesFile);
	if (parsedWasmRuntime.second != 0) {
		fcPrintln("Could not compile Wasm runtime in " + runtimeFile, program.config.threadId);
	}
	wasmRuntime = parsedWasmRuntime.first;

	overridden = wasmOverrideNatives(program.modules, wasmRuntime.names.toplevel);

	FiProgram(
		program.config,
		mergeTree(wasmRuntime.modules, overridden),
		concat(wasmRuntime.traversal, program.traversal),
		FiGlobalNames(
			mergeTree(wasmRuntime.names.struct2module, program.names.struct2module),
			mergeTree(wasmRuntime.names.union2module, program.names.union2module),
			mergeTree(wasmRuntime.names.function2module, program.names.function2module),
			mergeTree(wasmRuntime.names.globalVar2module, program.names.globalVar2module),
			mergeTree(wasmRuntime.names.native2module, program.names.native2module),
			mergeTree(wasmRuntime.names.structs, program.names.structs),
			mergeTree(wasmRuntime.names.unions, program.names.unions),
			mergeTree(program.names.toplevel, wasmRuntime.names.toplevel),
		)
	);
}

fiWriteListingFile(cfg : FiWasmConfig, context : WasmContext) {
	if (strlen(cfg.listingFile) > 0) {
		contents = JsonObject([
			Pair("types", wasmTypeDescriptor2Json(context.typeTable)),
			Pair("functions", fiWasmFunctionTableToJson(context.functions))
		]);
		setFileContent(cfg.listingFile, json2stringFormatted(contents));
	} else true;
}

// for now it will output functions only
fiWriteASTFile(cfg : FiWasmConfig, context : WasmContext, decls : [Pair<string, [FiDeclaration]>]) {
	if (strlen(cfg.wasmast) > 0) {
		contents = strGlue(fold(decls, [], \acc, p -> {
			m = map(p.second, \decl -> {
				switch (decl) {
					FiFunctionDec(name, lambda, type, declStart, defiStart): {
						"FUNCTION: " + 
						decl.name + " " + 
						fiPrintWasmType(fitype2wasmtype(context.globalNames, type, cfg.threadId)) + 
						fiPrintWasmExp(fiexp2wasmexp(context, context.globalNames, lambda, cfg.threadId), "");
					}
					FiGlobalVar(name, value, type, declStart, defiStart): {
						"GLOBAL VAR: " + name + " " +
						fiPrintWasmType(fitype2wasmtype(context.globalNames, type, cfg.threadId)) + 
						fiPrintWasmExp(fiexp2wasmexp(context, context.globalNames, value, cfg.threadId), "");
					}
					FiNativeDec(name, io, type, nativeName, fallbackLambda, declStart, defiStart): {
						"NATIVE: " + name + " " +
						fiPrintWasmType(fitype2wasmtype(context.globalNames, type, cfg.threadId)) + 
                        fiPrintWasmExp(fiexp2wasmexp(context, context.globalNames, fallbackLambda, cfg.threadId), "");
					}
				}
			});
			concat(acc, m);
		}), "\n");

		setFileContent(cfg.wasmast, contents);
	} else true;
}

fiInvokeWat2Wasm(cfg: FiWasmConfig, contents: string, wasmfile: string, callback : (bool) -> void) {
	watfile = changeFileExt(cfg.outputfile, ".wat");
	if (!setFileContent(watfile, contents)) {
		fcPrintln("Could not save " + watfile, cfg.threadId);
		callback(false);
	} else {
		startProcess("wat2wasm", [watfile, "--debug-names", "-o", wasmfile], ".", "",
			\c, o, e -> {
				fcVerbose(cfg, 1, "Wasm succeeded");
				if (c != 0) {
					fcPrintln("Wasm failed", cfg.threadId);
					fcPrintln(e, cfg.threadId);
					fcPrintln(o, cfg.threadId);
					fcPrintln(i2s(c), cfg.threadId);
					fcPrintln("wat2wasm " + watfile + " -o " + wasmfile, cfg.threadId);
					callback(false);
				} else {
					fcPrintln("Saved '" + wasmfile + "'", cfg.threadId);
					// deleteFile(watfile);
					callback(true);
				}
			}
		);
	}
}

fiWriteHostTemplateFile(cfg : FiWasmConfig, wasmfile: string, native_code : string, jscallbacks_code : [string], jswrappers_code : string, usedModules : [string]) {
	if (cfg.hostfile != "") {
		fcVerbose(cfg, 0, "Creating Wasm host template '" + cfg.hostfile + "'...");

		IDHandler = "#include tools/flowc/backends/wasm/idhandler.js";
		TagsFromValue = "#include tools/flowc/backends/wasm/tags_from_value.js";
		TestJS = "#include tools/flowc/backends/wasm/tests.js";

		result =
			"// ******************** NATIVE *************************\n" + 
			 native_code + 
			"\n// ******************** JSWrap *************************\n" + 
			jswrappers_code +
			"\n// ******************** JSCallbacks *************************\n" + 
			"var callbacks = {\n" + strGlue(jscallbacks_code, ",\n") + "\n};" + 
			"\n// ******************** MAIN *************************\n" + 
			(if (cfg.nodejs) "const fs = require(\"fs\");\n" else "") + // fs for node.js
			(if (cfg.nodejs) "const util = require(\"util\");\n" else "") + // util for node.js
			"
			var WASMInstance;
			var HEAP8, HEAPU8, HEAP16, HEAP32, HEAPF64;
			var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : new util.TextDecoder('utf-16le');
			var _malloc;
			var _free;
			var _descriptor_from_type;
			var _table;
			var MisalignedDoubleF64, MisalignedDoubleI32;\n" +

			TestJS + "

			function stringToUTF16(str, outPtr, maxBytesToWrite) {
				if (maxBytesToWrite < 2) return 0;
				var startPtr = outPtr;
				var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;
				for (var i = 0; i < numCharsToWrite; ++i) {
					// charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
					var codeUnit = str.charCodeAt(i);
					HEAP16[((outPtr)>>1)]=codeUnit;
					outPtr += 2;
				}
			}

			function expandTypeTagByTypedesc(desc_address) {
				var tag = HEAP8[desc_address];
				switch (tag) {
					case 9: // array
						return [tag].concat(expandTypeTagByTypedesc(desc_address + 1));
				
					default:
						return [tag];
				}
			}\n" + 

			TagsFromValue + "

			function pushDoubleToHeap(address, value) {
				MisalignedDoubleF64[0] = value;
				HEAP32[(address >> 2)] = MisalignedDoubleI32[0];
				HEAP32[(address >> 2) + 1] = MisalignedDoubleI32[1];
			}

			function alignBytes(bytes, base) {
				return Math.ceil(bytes / base) * base;
			}

			// address - pointer to struct definition (closures described by this)
			function getFunctionFromTable(address) {
				var index = HEAP32[(address + 8) >> 2];
				return _table.get(index);
			}\n\n" + 
			IDHandler + "

			// will return a [decoded value, current ptr (i.e. address + length of decoded value)]
			function decode_data(base, address, tag, stack) {
				switch (tag[0]) {
					case 1: // bool
						return HEAP32[address >> 2] != 0;
					
					case 2 : // int
						return HEAP32[address >> 2];
					
					case 3: { // double
						// easy if aligned to 8
						if ((address & 7) == 0)
							return HEAPF64[address >> 3];

						MisalignedDoubleI32[0] = HEAP32[(address >> 2)];
						MisalignedDoubleI32[1] = HEAP32[(address >> 2) + 1];
						return MisalignedDoubleF64[0];
					}
					
					case 4 : { // string (ref cnt; len in bytes; data)
						if (stack) address = HEAP32[address >> 2];
						var len;
						if (address % 4 == 0) {
							len = HEAP32[(address + 4) >> 2];
						} else {
							len = ((HEAPU8[address + 7] * 256 + 
								  HEAPU8[address + 6]) * 256 + 
								  HEAPU8[address + 5]) * 256 + 
								  HEAPU8[address + 4];
						}
						var ptr = address + 8;
						if (len == 0)
							return \"\";
						return UTF16Decoder.decode(HEAPU8.subarray(ptr, ptr + len));
					}
					
					case 5 : { // flow 
						if (stack) address = HEAP32[address >> 2];

						var ptr = address + 8;
						var typeAddr = HEAP32[(address + 4) >> 2];
						var tags = expandTypeTagByTypedesc(typeAddr);

						return decode_data(base, ptr, tags, true);
					}

					case 6 : { // native (ref cnt; ptr to js heap)
						return HEAP32[(address + 4) >> 2]; // skip ref count and return a value
					}

					case 9: { // array 
						if (stack) address = HEAP32[address >> 2];

						var ptr = address + 8;
						var len = HEAP32[(address + 4) >> 2];
						var arr = [];
						var elementTag = tag.slice(1);
						var elmsize = 4;
						if (tag[1] == 3 /*double*/) elmsize = 8;
						for (var i = 0; i < len; i++) {
							arr[i] = decode_data(base, ptr + elmsize * i, elementTag, true);
						}

						return arr;
					}

					case 11: { // union
						console.log('Trying to decode union');
					}

					default: {
						console.error('Unsupported data type: ' + tag);
						return "";
					}
				}
			}

			function encode_data(value, tag) {
				switch (tag[0]) {
					case 1: // bool
						return value;
					
					case 2 : // int
						return value;
					
					case 3: // double
						return value;

					case 4 : // string (ref cnt; len in bytes; data)
						var bufLen = value.length * 2;
						var strPtr = _malloc(4 + 4 + alignBytes(bufLen, 4));
						HEAP32[(strPtr>>2) + 0] = 1; // initial refcount
						HEAP32[(strPtr>>2) + 1] = bufLen;
						stringToUTF16(value, strPtr + 8, bufLen);
						return strPtr;

					case 5: // flow
						elementTag = extractTagsFromValue(value);

						if (elementTag == -1) {
							// problem;
							return 0;
						}

						// alloc memory for type
						var type_lenght = elementTag.length;
						var type_ptr = _malloc(alignBytes(type_lenght, 4));
						var offset = 0;
						elementTag.forEach(function(entry) {
							HEAPU8[type_ptr + offset] = entry;
							offset += 1;
						});
						var type = _descriptor_from_type(type_ptr, type_lenght);
						// free type memory. it's no longer needed
						_free(type_ptr);

						// alloc memory for flow itself
						bytes = 4 + 4 + 4 * (elementTag[0] == 3 ? 2 : 1); //  2 for double
						var ptr = _malloc(alignBytes(bytes, 4));
						HEAP32[(ptr >> 2) + 0] = 1; // initial refcount
						HEAP32[(ptr >> 2) + 1] = type; //  ????????????????????????????????????
						if (elementTag[0] == 3 /*double*/) {
							pushDoubleToHeap(ptr + 8, value);
						} else {
							HEAP32[(ptr + 8) >> 2] = encode_data(value, elementTag);
						}

						return ptr;						

					case 6 : // native (ref cnt; ptr to js heap)
						var ptr = _malloc(8);
						HEAP32[(ptr >> 2) + 0] = 1; // initial refcount
						HEAP32[(ptr >> 2) + 1] = value;
						return ptr;

					case 9: // array 
						var elementTag = tag.slice(1);
						var bufLen = value.length * (elementTag[0] == 3 ? 2 : 1) * 4;
						var strPtr = _malloc(alignBytes(4 + 4 + bufLen, 4));
						HEAP32[(strPtr>>2) + 0] = 1; // initial refcount
						HEAP32[(strPtr>>2) + 1] = value.length;
						var offset = 0;
						value.forEach(function(entry) {
							if (elementTag[0] == 3 /*double*/) {
								pushDoubleToHeap(strPtr + 8 + offset, entry);
								offset += 8;
							} else {
								HEAP32[(strPtr + 8 + offset) >> 2] = encode_data(entry, elementTag);
								offset += 4;
							}						
						});

						return strPtr;

					default:
						console.error('Unsupported data type: ' + tag);
				}
			}\n" + 
			(if (cfg.nodejs) 
				"var bytes = fs.readFileSync('" + fileNameOnly(wasmfile) + "');\n"
			else "
				fetch('" + fileNameOnly(wasmfile) + "').then(response =>
				  response.arrayBuffer()
				).then(bytes => {
			") + "
				var imports = {
					native,
					callbacks,
					'runtime': { 
						'init_heap_js': function () {
							let exports = WASMInstance.exports;
							let buffer = exports.memory.buffer;
							HEAP8 = new Int8Array(buffer);
							HEAP16 = new Int16Array(buffer);
							HEAP32 = new Int32Array(buffer);
							HEAPU8 = new Uint8Array(buffer);
							HEAPF64 = new Float64Array(buffer);

							var buf = new ArrayBuffer(8);
							MisalignedDoubleF64 = new Float64Array(buf);
							MisalignedDoubleI32 = new Int32Array(buf);
						},
						'timestamp' : function (s) {
							var t = new Date().getTime();
							return t;
						},
						'prints' : function (s) {
							var ss = decode_data(0, s, [4], false);
							console.log(ss);
						},
						'js_free_native' : function (i) {  IDHandler.revokeObjectId(i); console.log('free native: ' + i); },
						'printi' : function (i) { console.log(i); },
						'printd' : function (d) { console.log(d); },
						'wasm_dmod' : function(a,b) { return a % b; },
						'wasm_store_string' : function(s) { return encode_data(s, [4]); },
						'wasm_int_to_string' : function(i) {
							var s = i.toString();
							return encode_data(s, [4]);
						},
						'wasm_double_to_string' : function(d) {
							var s = d.toString();
							return encode_data(s, [4]);
						},
						'wasm_bool_to_string' : function(b) {
							var s = b > 0 ? 'true' : 'false';
							return encode_data(s, [4]);
						},
						'printa' : function(a, t) {
							var aa = decode_data(0, a, [9, t], false);
							console.log(aa.toString());
						},
						'wasm_array_to_string' : function(a, t_addr) {
							var tags = expandTypeTagByTypedesc(t_addr);
							var arr = decode_data(0, a, tags, false);
							var s = arr.toString();
							return encode_data(s, [4]);
						}				  		
					}
				};\n" + 
		(if (cfg.nodejs)  // nodejs has to fetch API that supports local urls - workaround
			"				WebAssembly.instantiate(bytes, imports)"
			else 
			"				return WebAssembly.instantiate(bytes, imports);
				})") + 
					".then(m => {
					WASMInstance = m.instance;
					_malloc = WASMInstance.exports.wasm_alloc;
					_free = WASMInstance.exports.wasm_free;
					_descriptor_from_type = WASMInstance.exports.wasm_descriptor_from_type;
					WASMInstance.exports.wasm_init_runtime();
					WASMInstance.exports.wasm_init_global_vars();
					_table = WASMInstance.exports.table;
					WASMInstance.exports.main();
				});";
		if (!setFileContent(cfg.hostfile, result)) {
			fcPrintln("Problem saving template file", cfg.threadId);
		} else {
			fcVerbose(cfg, 1, "Creating Wasm host template finished");
		}
	}
}

// creates module import section by generating import declaration for import functions
// obeys 2-level wasm namespace, defaults to "runtime" module is missing
fiWasmCreateModuleHeader(cfg : FiWasmConfig, wasmContext : WasmContext, callbacks : [string]) {
	imports1 = foldTree(wasmContext.natives, Cons("(module \n", makeList()), \name, nativeDec, acc -> {
		if (fiWasmIsHostNative(nativeDec.decl.nativeName)) {
			nameComponents = strSplit(nativeDec.decl.nativeName, ".");
			module = if (length(nameComponents) > 2) nameComponents[1] else "runtime";
			function = if (length(nameComponents) > 2) nameComponents[2] else nameComponents[1];
			if (fiTypeIsFunction(nativeDec.decl.type)) {
				Cons("(import \"" + module + "\" \"" + function + "\"" + 
					fiWasmBuildFunctionDecl(name, fitype2wasmtype(wasmContext.globalNames, nativeDec.decl.type, cfg.threadId), 
						false, true, cfg.threadId) 
					+ "))\n", acc)
			} else acc;
		} else if (fiWasmIsPureNative(nativeDec.decl.nativeName) || fiWasmIsHostWNative(nativeDec.decl.nativeName)) {
			// create an js wrapper here
			module = "native";
		
			if (nativeDec.wrap.name != "") {
				if (fiTypeIsFunction(nativeDec.decl.type)) {
					Cons("(import \"" + module + "\" \"" + nativeDec.wrap.name + "\"" + nativeDec.wrap.decl + "))\n", acc)
				} else acc
			} else acc;

		} else acc;
	});

	imports = reverseList(foldList(imports1, EmptyList(), \acc, i -> {
		if (containsList(acc, i)) acc
		else Cons(i, acc);
	}));

	invokers = fold(callbacks, imports, \acc, cb -> {
		Cons(cb, acc)
	});

	Cons("(memory $memory (export \"memory\") " + i2s(cfg.memory) + ")\n", invokers);
}

fiNativeJSFileName(hostfile: string) {
	hostfile + ".native.js";
}

// Temporary solution.
// TODO: fix that
fiGenerateNativeJSFile(cfg : FiWasmConfig, usedModules : [string], callback : (bool, string) -> void) -> void {	
	tmp_name = "__temp_js_source.flow";

	// import math covers string & array as well
	if (setFileContent(tmp_name, strGlue(map(usedModules, \m -> { "import " + m + ";"	}), "\n") + "\nmain() {}")) {
		fcPrintln("Compiling natives ...", cfg.threadId);
		nativeJsFn = fiNativeJSFileName(cfg.hostfile);
		// call compilation routine
		startProcess(
			if (windows()) "flowc.bat" else "flowc",
			["server=0", "file=" + tmp_name, 
				(if (cfg.nodejs) "es6=" else "js=" ) + nativeJsFn, 
				if (cfg.nodejs) "nodejs=1" else "", 
				"dce=0",
				"use_haxe_runtime=1"
			], 
			".", "",
			\ec, so, se -> { 
				if (ec != 0 || strContains(so, "Error")) {
					fcPrintln("Error while compiling native js.\nCode: " + i2s(ec) + "\nOutput: " + so + "\nError: " + se, cfg.threadId);
				}

				if (ec == 0) fiSuppressNodeJsWarning(nativeJsFn);

				data = getFileContent(nativeJsFn);
				deleteFile(tmp_name);
				deleteFile(nativeJsFn);

				callback(ec == 0, data);
			}
		);
	}
}

fiSuppressNodeJsWarning(fn : string) {
	s = "if (process.version < \"v4.0.0\")";
	ss = strReplace(s, "4", "10");
	content = getFileContent(fn);
	if (strContains(content, s)) {
		setFileContent(fn, strReplace(content, s, ss)) |> ignore;
	}
}

iterProgramExpr(program : FiProgram, cb : (FiExp, FiExp, bool) -> void) -> void {
	traverseInOrder(program.names.toplevel, \__, decl : FiDeclaration -> {
		switch (decl) {
			FiFunctionDec(__, lambda, __, __, __): iterFiExp(lambda, FiVoid(0), false, cb);
			default: {}
		}
	});
}

iterFiExp(expr : FiExp, parent : FiExp, b : bool, cb : (FiExp, FiExp, bool) -> void) -> void {
	cb(expr, parent, b);
	rec2 = \ex, bb -> iterFiExp(ex, expr, bb, cb);
	rec = \ex -> rec2(ex, false);
	switch (expr) {
		FiBool(__, __): {}
		FiInt(__, __): {}
		FiVar(__, __, __): {}
		FiString(s, __): {}
		FiDouble(d, __): {}
		FiVoid(__): {}
		FiCall(f, args, __, __): {
			rec2(f, true);
			iter(args, rec);
		}
		FiSwitch(x, __, cases, __, __): {
			rec2(x, true); 
			iter(cases, \c -> rec(c.body));
		}
		FiLambda(__, body, __, __): 
			rec(body);
		FiLet(__, __, e1, e2, __, __): {
			rec2(e1, true); rec(e2);
		}
		FiIf(e1, e2, e3, __, __): {
			rec(e1); rec(e2); rec(e3);
		}
		FiCallPrim(__, es, __, __):
			iter(es, rec);
		FiRequire(__, e, __, __): 
			rec(e);
		FiUnsafe(__, fallback, __, __): 
			rec(fallback);
		FiSeq(es, __, __): 
			iter(es, rec);
		FiCast(e, __, __, __, __): 
			rec(e);
	}
}

fiWasmAddIndirectWrappers(program : FiProgram, flowfile : string) {
	nativesToWrap = ref makeTree();
	iterProgramExpr(program, \e : FiExp, parent : FiExp, isFirst : bool -> {
		switch (e) {
			FiVar(n, t, __): {
				if (fiTypeIsFunction(t)) {
					doWrap = switch (parent) {
						FiCall(__, __, __, __): !isFirst;
						FiLet(__, __, __, __, __, __): true;
						default: false;
					}
					if (doWrap) switch (lookupTree(program.names.toplevel, n)) {
						Some(d): {
							switch (d) {
								FiNativeDec(__, __, __, __, __, __, __): {
									nativesToWrap := setTree(^nativesToWrap, n, d);
								}
								default: {}
							}
						}
						None(): {}
					}
				}
			}
			default: {}
		}
	});
	funcs = map(getTreeValues(^nativesToWrap), \f -> {
		// println("*** adding wrapper for " + f.name);
		type0 = cast(f.type : FiType -> FiTypeFunction);
		args = mapi(type0.args, \i, a -> FiFunArg("arg" + i2s(i), a.type));
		type = FiTypeFunction(args, type0.returnType);
		FiFunctionDec(
			f.name + "__wrapped__",
			FiLambda(
				args, 
				FiCall(
					FiVar(f.name, type, 0),
					map(args, \a -> FiVar(a.name, a.type, 0)),
					type.returnType, 0),
				type, 0),
			type, 0, 0)
	});
	fiInjectFunctions(program, flowfile, funcs)
}

fiInjectFunctions(program : FiProgram, flowfile : string, funcs : [FiFunctionDec]) {
	switch (lookupTree(program.modules, flowfile)) {
		Some(module): {
			module2 = FiModule(module with
				functions = concat(module.functions, funcs),
				initOrder = concat(module.initOrder, map(funcs, \f -> f.name))
			);
			FiProgram(program with 
				modules = setTree(program.modules, flowfile, module2),
				names = FiGlobalNames(program.names with 
					toplevel = fold(funcs, program.names.toplevel, \acc, f -> setTree(acc, f.name, f))
				)
			)
		}
		None(): {
			fcPrintln("Cannot find module " + flowfile, program.config.threadId);
			program
		}
	}
}
