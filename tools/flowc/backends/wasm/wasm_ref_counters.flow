import tools/flowc/incremental/fitype;
import tools/flowc/manipulation/split_expressions;
import tools/flowc/backends/common;
import tools/flowc/backends/wasm/wasm_types;
import tools/flowc/backends/wasm/f2wasm_utils;
import tools/flowc/backends/wasm/wasm_exp;
import tools/flowc/backends/wasm/wasm_exp_convert;
import ds/array;
import string;

export {
    fiWasmInjectTempVariables(ex : FiExp) -> FiExp;
    wasmAddRefcounting(e : WasmExp, args : [WasmFunArg]) -> WasmExp;
}

// checks if the statement is last in control flow sense - there is no nesting
// i.e. consts or vars are last, while if, switch, or sequence are not
wasmIsLastStemenet(ex : WasmExp) {
    ex0 : WasmExp = ex;
    switch (ex0 : WasmExp) {
		WasmLambda(__, __, __, __): true;
		WasmCall(__, __, __, __, __): true;
		WasmVar(__, __, __): true;
		WasmLet(__, __, __, __, __, __): false;
		WasmIf(e1, e2, e3, __, __): false;
		WasmSwitch(__, __, cases, __, __): false;
		WasmCast(__, __, __, __, __): true;
		WasmSeq(es, __, iid): length(es) == 0; // last if there are no statements inside
		WasmCallPrim(__, __, __, __): true;
		WasmVoid(__): true;
		WasmDouble(__, __): true;
		WasmInt(__, __): true;
		WasmString(__, __): true;
		WasmBool(__, __): true;
		WasmRequire(__, __, __, __): true; 
		WasmUnsafe(__, fallback, __, __): false;
        WasmIncRefcnt(__, __, __): true;
        WasmDecRefcnt(__, __, __): true;
	}
}

fiTypeUsesWasmHeap(t : FiType) {
	switch (t) {
		FiTypeVoid(): false;
		FiTypeDouble(): false;
		FiTypeInt(): false;
		FiTypeBool(): false;
		default: true;
	}
}

fiWasmInjectTempVariables(ex : FiExp) {
	splitExpressions(ex, fiTypeUsesWasmHeap);
}

wasmAddRefcounting(ex : WasmExp, args : [WasmFunArg]) {
    /*scopeVars = map(filter(args, \a -> wasmTypeUsesWasmHeap(a.type)), \a -> {
        if (a.name == "") println("Internal error: empty var name passed as scope parameter");
        WasmScopeVar(a.name, a.type, false);
    });*/ 
    fiWasmInjectIncrements(ex, [], false);
}

// scopeVars - a list of vars currently in scope
// when calling recursively for a statement that cannot be last on itself, list as passed as empty
// it may come non-empty inside when new vars are introduced
fiWasmInjectIncrements(ex : WasmExp, scopeVars : [WasmScopeVar], skipIncrement : bool) {
    rec = \e -> fiWasmInjectIncrements(e, scopeVars, false);
    recNotLast = \e -> fiWasmInjectIncrements(e, [], false);
	recNotLastNoIncrement = \e -> fiWasmInjectIncrements(e, [], true);

    switch (ex : WasmExp) {
		WasmLambda(args, b, type, __): WasmLambda(ex with destructedVars=scopeVars);
		WasmCall(f, args, type, callType, __): 
            WasmCall(f, 
                map(args, recNotLastNoIncrement), type, callType, scopeVars);
		WasmVar(name, type, __): 
            if (!skipIncrement && wasmTypeUsesWasmHeap(type))
                WasmIncRefcnt(ex, type, scopeVars)
            else
                WasmVar(ex with destructedVars=scopeVars);
		WasmLet(name, type, e1, e2, type2, __): {
            newScopeVars = if (wasmTypeUsesWasmHeap(type)) 
                arrayPush(scopeVars, WasmScopeVar(name, type, true))
            else
                scopeVars;
			WasmLet(name, type, recNotLast(e1), 
                fiWasmInjectIncrements(e2, newScopeVars, false), type2, []); 
        }
		WasmIf(e1, e2, e3, type, __): 
			WasmIf(recNotLast(e1), rec(e2), rec(e3), type, []);
		WasmSwitch(x, switchType, cases, type, __): 
			WasmSwitch(x, switchType, // TODO : this is implicit scope
                map(cases, \c -> WasmCase(c.struct, c.argNames, rec(c.body))),
                type, []);
		WasmCast(e, tFrom, tTo, type, __): 
            WasmCast(recNotLast(e), tFrom, tTo, type, scopeVars);
		WasmSeq(es, type, __): 
            WasmSeq(mapi(es, 
                \i, e -> if (i != length(es) - 1) recNotLast(e) else rec(e),
                ), type, if (length(es) > 0) [] else scopeVars); // empty seq is last statement
		WasmCallPrim(op, es, type, __): WasmCallPrim(op, map(es, recNotLastNoIncrement), type, scopeVars);
		WasmVoid(__): WasmVoid(scopeVars);
		WasmDouble(__, __): WasmDouble(ex with destructedVars=scopeVars);
		WasmInt(__, __): WasmInt(ex with destructedVars=scopeVars);
		WasmString(__, __): WasmIncRefcnt(ex, WasmTypeString(), scopeVars);
		WasmBool(__, __): WasmBool(ex with destructedVars=scopeVars);
		WasmRequire(flowfile, e, type, id): WasmRequire(flowfile, rec(e), type, []); 
		WasmUnsafe(name, fallback, type, id): WasmUnsafe(name, rec(fallback), type, []);
        WasmIncRefcnt(__, __, __): ex; // should not happen
        WasmDecRefcnt(__, __, __): ex; // should not happen
	}
}
