import string;
import tools/flowc/backends/wasm/wasm_exp;

export {
	fiPrintWasmExp(ex : WasmExp, ident : string) -> string;
	fiPrintWasmType(type : WasmTypeDescriptor) -> string;
}

fiPrintWasmFunArgs(arg : WasmFunArg) {
	"\"" + arg.name + "\" : " + fiPrintWasmType(arg.type);
}

// WasmCase(struct: string, argNames : [string], body: WasmExp);
fiPrintWasmCase(arg : WasmCase, indent : string) {
	"WasmCase(\"" + arg.struct + "\", " + "[" + strGlue(arg.argNames, ", ") + "]" + ", " + fiPrintWasmExp(arg.body, indent) + "\n" + indent + ")";// + fiPrintWasmExp(arg.body, indent);
}

fiPrintWasmStructFields(arg : WasmStructField) {
	"\"" + arg.name + "\" : " + fiPrintWasmType(arg.type);
}

fiPrintWasmType(type : WasmTypeDescriptor) {	
	switch (type) {
		WasmTypeArray(t): "WasmTypeArray(" + fiPrintWasmType(t) + ")";
		WasmTypeRef(t): "WasmTypeRef(" + fiPrintWasmType(t) + ")";
		WasmTypeBool(): "WasmTypeBool";
		WasmTypeInt(): "WasmTypeInt";
		WasmTypeStruct(name, fields): "WasmTypeStruct(\"" + name + "\", [" + strGlue(fold(fields, [], \acc, a -> arrayPush(acc, fiPrintWasmStructFields(a))), ", ") + "])";
		WasmTypeUnion(name, structs): "WasmTypeUnion(\"" + name + "\", [" + strGlue(structs, ", ") + "])";
		WasmTypeDouble(): "WasmTypeDouble";
		WasmTypeString(): "WasmTypeString";
		WasmTypeFlow(): "WasmTypeFlow";
		WasmTypeVoid(): "WasmTypeVoid";
		WasmTypeNative(): "WasmTypeNative";
		WasmTypeFunction(args, returnType): "WasmTypeFunction([" + strGlue(fold(args, [], \acc, a -> arrayPush(acc, fiPrintWasmFunArgs(a))), ", ") + "], " + fiPrintWasmType(returnType) + ")";
		WasmTypeJSCallback(args, returnType): "WasmTypeJSCallback([" + strGlue(fold(args, [], \acc, a -> arrayPush(acc, fiPrintWasmFunArgs(a))), ", ") + "], " + fiPrintWasmType(returnType) + ")";
	}
}

fiPrintWasmCallType(type : WasmCallType) {	
	switch (type) {
		WasmCallSimple(): "WasmCallSimple";
		WasmCallNative(): "WasmCallNative";
		WasmCallHost(): "WasmCallHost";
	}
}

fiPrintFcPrim(type : FcPrim) {	
	switch (type) {
		FcOrPrim(): 	"FcOrPrim";
		FcAndPrim():	"FcAndPrim";
		FcNotPrim():	"FcNotPrim";
		FcEqPrim(): 	"FcEqPrim";
		FcNePrim(): 	"FcNePrim";
		FcLePrim(): 	"FcLePrim";
		FcGePrim(): 	"FcGePrim";
		FcLtPrim(): 	"FcLtPrim";
		FcGtPrim(): 	"FcGtPrim";
		FcPlusPrim(): 	"FcPlusPrim";
		FcMinusPrim(): 	"FcMinusPrim";
		FcMulPrim(): 	"FcMulPrim";
		FcDivPrim(): 	"FcDivPrim";
		FcModPrim(): 	"FcModPrim";
		FcNegPrim(): 	"FcNegPrim";
		FcArrayPrim(): 	"FcArrayPrim";
		FcIndexPrim():	"FcIndexPrim";
		FcDerefPrim(): 	"FcDerefPrim";
		FcAssignPrim(): "FcAssignPrim";
		FcRefPrim(): 	"FcRefPrim";
		FcStructPrim(struct_name): 	"FcStructPrim(\"" + struct_name + "\")";
		FcFieldPrim(name): 			"FcFieldPrim(\"" + name + "\")";
		FcSetMutablePrim(name): 	"FcSetMutablePrim(\"" + name + "\")";
		// creates a closure explicitly - appears after lambda lifting
		FcCreateClosurePrim(structName, functionName): 	"FcCreateClosurePrim(\"" + structName + "\", \"" + functionName + "\")";
		FcQuote():      "FcQuote";
		FcUnquote():    "FcUnquote";
	}
}

fiPrintWasmExp(ex : WasmExp, ident : string) {
	ident1 = ident + "    ";	
	ni1 = ", \n" + ident1;
	i1 = "\n" + ident1;
	ident2 = ident1 + "    ";	
	ni2 = ", \n" + ident2;
	i2 = "\n" + ident2;
	ident3 = ident2 + "    ";	
	i3 = "\n" + ident3;
	ni3 = ", \n" + ident3;
	switch (ex) {
		WasmBool(b, __): i1 + "WasmBool(" + b2s(b) + ")";
		WasmInt(i, __): i1 + "WasmInt(" + i2s(i) + ")";
		WasmVar(name, type, __): i1 + "WasmVar(\"" + name + "\"," + fiPrintWasmType(type) + ")";
		WasmString(s, __): i1 + "WasmString(\"" + s + "\")";
		WasmDouble(d, __): i1 + "WasmDouble(" + d2s(d) + ")";
		WasmVoid(__): i1 + "WasmVoid()";
		WasmCall(f, args, type, calltype, __): {
			i1 + "WasmCall(" + fiPrintWasmExp(f, ident1) + ni2 + "[" + strGlue(fold(args, [], \acc, a-> arrayPush(acc, fiPrintWasmExp(a, ident2))), ", ") + i2 + "]" + ni2 + fiPrintWasmType(type) + ni2 + fiPrintWasmCallType(calltype) + i1 + ")";
		}
		WasmLambda(args, body, type, __): 
			i1 + "WasmLambda([" + strGlue(fold(args, [], \acc, a-> arrayPush(acc, fiPrintWasmFunArgs(a))), ", ") + "], " + 
			fiPrintWasmExp(body, ident1) + ni2 + fiPrintWasmType(type) + i1 + ")";
		
		// WasmSwitch(x: WasmVar, switchType : WasmTypeDescriptor, cases: [WasmCase], type : WasmTypeDescriptor);
		WasmSwitch(x, switchType, cases, type, __): 
			i1 + "WasmSwitch(" + 
			fiPrintWasmExp(x, ident1) + 
			ni2 + fiPrintWasmType(switchType) + 
			ni2 + "[" + i3 + strGlue(fold(cases, [], \acc, c -> arrayPush(acc, fiPrintWasmCase(c, ident3))), ni3) + ni2 + "]" + 			ni2 + fiPrintWasmType(type) + 
			i1 + ")";
		WasmLet(name, type, e1, e2, type2, __): 
			i1 + "WasmLet(\"" + 				name + "\"," + 				fiPrintWasmType(type) + "," + 				fiPrintWasmExp(e1, ident1) + "," + 				fiPrintWasmExp(e2, ident1) + ni2 + 				fiPrintWasmType(type2) + 			i1 + ")";
		WasmIf(e1, e2, e3, type, __): i1 + "WasmIf(" + 
			fiPrintWasmExp(e1, ident1) + ", " + 
			fiPrintWasmExp(e2, ident1) + ", " + 
			fiPrintWasmExp(e3, ident1) + 
			ni2 + fiPrintWasmType(type) + 
			i1 + ")";
		WasmCallPrim(op, es, type, __): i1 + "WasmCallPrim(\n" + ident2 + fiPrintFcPrim(op) + ni2 + "[" + strGlue(fold(es, [], \acc, a-> arrayPush(acc, fiPrintWasmExp(a, ident2))), ", ") + i2 + "]" + ni2 + fiPrintWasmType(type) + i1 + ")";
		WasmRequire(flowfile, e, type, __): i1 + "WasmRequire(flowfile, process(e), type, start)";
		WasmUnsafe(name, fallback, type, __): i1 + "WasmUnsafe(\"" + name + "\", process(fallback), type, start)";
		WasmSeq(es, type, __): i1 + "WasmSeq(" + i2 + "[" + strGlue(fold(es, [], \acc, a-> arrayPush(acc, fiPrintWasmExp(a, ident2))), ", ") + i2 + "]" + ni2 + fiPrintWasmType(type) + i1 + ")";
		WasmCast(e, tFrom, tTo, type, __): 
			i1 + "WasmCast(" + 
			fiPrintWasmExp(e, ident1) + 
			ni2 + fiPrintWasmType(tFrom) + 
			ni2 + fiPrintWasmType(tTo) + 
			ni2 + fiPrintWasmType(type) + 
			i1 + ")";
		WasmIncRefcnt(e, __, __): i1 + "WasmIncRefcnt(" + fiPrintWasmExp(e, ident1) + i1 + ")";
		WasmDecRefcnt(name, type, __): i1 + "WasmDecRefcnt(" + 
			name + 
			ni2 + fiPrintWasmType(type) + 
			i1 + ")";
	}
}
