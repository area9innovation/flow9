import tools/flowc/backends/wasm/wasm_opcodes;
import tools/flowc/backends/wasm/wasm_runtime;
import wasm_internals;

export {
	wasm_descriptor_from_type(typedesc : int, typelength : int) -> int;
}

// this function is intended to be called from js side.
// typedesc - pointer to type (memory representation of a type, see wasmTypeDescriptor2bytes)
// typelength - lenght of memory representation of a type
// this function search in typetable for passed type and return descriptor if found. 
// Otherwise it search (create if not exist) this type created in 'runtime' type table and return descriptor from there 
wasm_descriptor_from_type(typedesc : int, typelength : int) -> int {
	// 1. search for type in table
	ret = wasm_find_type(typedesc, typelength, wasm_typetable_start());
	if (ret < 0) {
		// try to find in runtime type table 
		ret2 = wasm_find_runtimetype(typedesc, typelength, runtimeTypeTable.first);
		if (ret2 >= 0) {
			ret2;
		} else {
			// create in 'runtime' table
			wasm_alloc_runtime_type(typedesc, typelength)
		}
	} else {
		ret;
	}
}

WasmRuntimeTypesTable(
	mutable first : int,
	mutable last : int,
	mutable blocks_count : int
);

WasmRuntimeTypesTableBlock(
	mutable free : int,		// offset from the start of block data (self_ptr + RuntimeTypeTableBlockHeaderLength)
	mutable next : int,		// pointer to next block
	// Usually will be RuntimeTypeTableBlockLength. 
	// But if requested type's length greater than this value we'll allocate enought length to fit type
	length : int,		
	self_ptr : int,
);

DummyWasmRuntimeTypesTableBlock = WasmRuntimeTypesTableBlock(-1, -1, 0, -1);

RuntimeTypeTableBlockLength = 64;
RuntimeTypeTableBlockHeaderLength = 12;

runtimeTypeTable = WasmRuntimeTypesTable(-1, -1, 0);

wasm_get_runtime_type_table_block(ptr : int) -> WasmRuntimeTypesTableBlock {	
	WasmRuntimeTypesTableBlock(
		wasm_i32_load(ptr + 0),
		wasm_i32_load(ptr + 4),
		wasm_i32_load(ptr + 8),
		ptr
	)
}

wasm_set_runtime_type_table(table : WasmRuntimeTypesTableBlock) -> void {	
	if (table.self_ptr >= 0) {
		wasm_i32_store(table.self_ptr + 0, table.free);
		wasm_i32_store(table.self_ptr + 4, table.next);
		wasm_i32_store(table.self_ptr + 8, table.length);
	}
}

// return blcok where free area will be >= then required
wasm_get_suitable_block(required_length : int, table_ptr : int) -> WasmRuntimeTypesTableBlock {
	if (table_ptr < 0) {
		DummyWasmRuntimeTypesTableBlock;
	} else {
		table = wasm_get_runtime_type_table_block(table_ptr);
		if (table.length - table.free >= required_length) {
			table;
		} else {
			if (table.next < 0) {
				DummyWasmRuntimeTypesTableBlock;
			} else {
				wasm_get_suitable_block(required_length, table.next);
			}
		}
	}
}

wasm_alloc_runtime_type(typedesc : int, typelength : int) -> int {
	table_block_0 = wasm_get_suitable_block(typelength, runtimeTypeTable.first);
	table = if (table_block_0.free < 0) {
		// dummy block. we need to allocate a new one
		len = if (typelength > RuntimeTypeTableBlockLength) typelength else RuntimeTypeTableBlockLength;
		ret = WasmRuntimeTypesTableBlock(
			0, // points to bytes right after the header
			-1,
			len,
			wasm_alloc(RuntimeTypeTableBlockHeaderLength + len)
		);

		if (runtimeTypeTable.last >= 0) 
			wasm_i32_store(runtimeTypeTable.last + 4, ret.self_ptr);

		runtimeTypeTable.last ::= ret.self_ptr;

		if (runtimeTypeTable.first < 0)
			runtimeTypeTable.first ::= ret.self_ptr;

		runtimeTypeTable.blocks_count ::= runtimeTypeTable.blocks_count + 1;

		ret;
	} else table_block_0;
	type_ptr = table.self_ptr + RuntimeTypeTableBlockHeaderLength + table.free;
	table.free ::= table.free + typelength;
	wasm_copy_mem(typedesc, typelength, type_ptr);
	wasm_set_runtime_type_table(table);

	type_ptr;
}

wasm_do_find_type_loop(type : int, typelength : int, curindex : int, typeDescriptor : int) {
	if (curindex >= typelength) {
		true;
	} else {
		tag1 = wasm_i32_load8_u(type + curindex);
		tag2 = wasm_i32_load8_u(typeDescriptor + curindex);

		if (tag1 == tag2)
			wasm_do_find_type_loop(type, typelength, curindex + 1, typeDescriptor)
		else  {
			false;
		}
	}
}

wasm_do_find_type(type : int, typelength : int, typeDescriptor : int, bound : int) -> int {
	if (typeDescriptor >= bound || typelength > bound - typeDescriptor) 
		-1
	else {
		if (wasm_do_find_type_loop(type, typelength, 0, typeDescriptor))
			typeDescriptor
		else
			wasm_do_find_type(type, typelength, wasm_next_typedescriptor(typeDescriptor), bound);
	}
}

wasm_find_type(type : int, typelength : int, typeDescriptor : int) -> int {
	wasm_do_find_type(type, typelength, typeDescriptor, wasm_heap_start());
}

__i2s(i:int) -> string { cast(i : int -> string); }

wasm_find_runtimetype(type : int, typelength : int, block : int) -> int {
	if (block < 0) { -1 } else {
		table = wasm_get_runtime_type_table_block(block);

		ret = wasm_do_find_type(type, typelength, table.self_ptr + RuntimeTypeTableBlockHeaderLength, table.self_ptr + RuntimeTypeTableBlockHeaderLength + table.free);

		if (ret >= 0) ret
		else wasm_find_runtimetype(type, typelength, table.next);
	}
}

//************************* DEBUG section ***********************************

wasm_rtt_blocks_count() -> int {
	runtimeTypeTable.blocks_count;
}

// return default block length
wasm_rtt_block_length() -> int {
	RuntimeTypeTableBlockLength;
}

wasm_do_rrt_foreach_block(block : int, fn : (WasmRuntimeTypesTableBlock) -> void) {	
	if (block >= 0) {
		table = wasm_get_runtime_type_table_block(block);
		fn(table);
		wasm_do_rrt_foreach_block(table.next, fn);
	}
}

wasm_rrt_foreach_block(fn : (WasmRuntimeTypesTableBlock) -> void) {
	wasm_do_rrt_foreach_block(runtimeTypeTable.first, fn);	
}

wasm_rtt_dump_blocks(fn : (string) -> void) -> void {
	wasm_rrt_foreach_block(\t -> 
		fn("Block: " + __i2s(t.self_ptr) + 
			";\n    length: " + __i2s(t.length) + 
			";\n    free bytes: " + __i2s(t.length - t.free) + 
			";\n    next block: " + __i2s(t.next)
		)
	);
}

wasm_rrt_do_dump_types(type_ptr : int, bound : int, fn : (string) -> void) {
	if (type_ptr >= bound) {
	} else {
		fn("    " + wasm_dump_type(type_ptr));
		wasm_rrt_do_dump_types(wasm_next_typedescriptor(type_ptr), bound, fn);
	}
}

wasm_rtt_dump_types(fn : (string) -> void) -> void {
	wasm_rrt_foreach_block(\t -> {
		data_ptr = t.self_ptr + RuntimeTypeTableBlockHeaderLength;
		fn("Block: " + __i2s(t.self_ptr));
		wasm_rrt_do_dump_types(data_ptr, data_ptr + t.free, fn);
	});
}
