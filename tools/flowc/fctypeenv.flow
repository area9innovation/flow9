import tools/flowc/flowcacc;
import tools/flowc/typechecker/type_expect;
import tools/flowc/dependencies;

import tools/flowc/typechecker2/gsubtype_graph_type;

export {
	// The typing environment for the entire compilation process
	FcTypeEnv(
		global : FcTypeEnvGlobal,
		program : FcTypeEnvProgram,
		local : FcTypeEnvLocal
	);

	// A global environment for a batch compilation of several programs 
	FcTypeEnvGlobal(
		moduleCache : ref Tree<string, FcLoaded>
	);

	// A single program typing environment
	FcTypeEnvProgram(
		acc : FlowcAcc, 

		// The resolved type of functions and variables
		types : Tree<string, FcType>,

		// Function that prings an error, and increases the error count
		printError : (FcError) -> void,

		// Count of type errors
		errors : ref int,

		// Cache for fast resolving which structs constitute a union
		union2typenamesCache : ref Tree<string, [FcTypeName]>,

		// A graph of subtypes
		subtypeGraph : GSubtypeGraph
	);

	// Typing environment for a single module
	FcTypeEnvLocal(
		// Requirements for types.
		expects : ref List<FcTypeExpect>,
		// Final checks after type checking
		checks : ref List<FcTypeCheck>,
		// The resolved type of tyvars
		tyvars : ref Tree<int, FcType>,
		// The current type of type parameters
		typars : ref Tree<string, FcTypeVar>,
		// The local stack variables info, used for duplication checking
		varinfo : Tree<string, FcInfo>,

		// Which expectations are collected during debug?
		debugExpects : ref Set<FcTypeExpect>,

		// Are we debug typing?
		debugTyping : ref int,

		// Indentation for debug
		debugIndentation : ref string,
	);

	initFcTypeEnvLocal() -> FcTypeEnvLocal {
		FcTypeEnvLocal(ref makeList(), ref makeList(), ref makeTree(), ref makeTree(), makeTree(), ref makeSet(), ref 0, ref "")
	}

	fcLoadFromCache(env : FcTypeEnvGlobal, name : string) -> Maybe<FcLoaded> {
		lookupTree(^(env.moduleCache), name)
	}

	fcRemoveFromCache(env : FcTypeEnvGlobal, name : string) -> void {
		env.moduleCache := removeFromTree(^(env.moduleCache), name)
	}

	fcAddToCache(env : FcTypeEnvGlobal, name : string, loaded : FcLoaded) -> void {
		env.moduleCache := setTree(^(env.moduleCache), name, loaded)
	}
}
