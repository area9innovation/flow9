import tools/flowc/flowc_local;
import tools/flowc/flowc_remote;
import tools/flowc/flowc_server;
import tools/flowc/flowc_repl;

main() {
	threadId = s2i(getThreadId());
	if (getUrlParameterDef("server-mode", "") != "console") {
		fcPrintln("Flow compiler (3rd generation)", threadId);
		fcPrintln("", threadId);
	}
	switch (getCompilerConfig(fcCurrentWorkingDir())) {
		Failed(msg): {
			fcPrintln(msg, threadId);
			quit(1);
		}
		Some(config): {
			if (isConfigParameterSet(config.config, "compilefile")) {
				starttime = timestamp();
				compilefile = getConfigParameter(config.config, "compilefile");
				configs = reverseA(readConfigsFormCompileFile(config, compilefile));
				exit_callback = \code -> {
					if (code != 0) fcPrintln("Exit code " + i2s(code), config.threadId);
					fcPrintln("Total batch compilation time: " + d2st((timestamp() - starttime) / 1000.0, 2) + "s", config.threadId);
					quit(0);
				};
				globalEnv = initFcTypeEnvGlobal();
				callback_chain = fold(configs, [exit_callback], \acc, conf -> 
					concat(acc, [
							\code -> {
								if (code != 0) {
									fcPrintln("Exit code " + i2s(code), conf.threadId);
									quit(code);
								}
								fcPrintln("Processing '" + conf.flowfile + "'", conf.threadId);
								clearTimePhases(conf.threadId);
								runConfig(conf, globalEnv, lastElement(acc, \__-> {}))
							}
						]
					)
				);
				lastElement(callback_chain, nop1)(0);
			} else if (isConfigParameterSet(config.config, "server-mode")) {
				server_mode = getConfigParameter(config.config, "server-mode");
				if (server_mode == "http") {
					fcHttpServer(config);
				} else if (server_mode == "console") {
					fcConsoleServer(config);
				} else {
					fcPrintln("Server mode should be 'http' or 'console'", config.threadId);
					quit(0);
				}
			} else if (isConfigParameterTrue(config.config, "repl")) {
				fcReplLoop(config);
			} else {
				runConfig(config, initFcTypeEnvGlobal(), 
					\code -> {
						if (code != 0) fcPrintln("Exit code " + i2s(code), config.threadId);
						quit(code);
					}
				);
			}
		}
	}
}
