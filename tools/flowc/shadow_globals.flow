import tools/flowc/fcmodule;

export {
	// In case of name collision of a local variable with a global name,
	// create a disambiguation and use it insead of the original name in the local scope.
	fcShadowGlobals(module : FcModule, toplevel : Tree<string, FcDeclaration>) -> FcModule;
}

fcShadowGlobals(module : FcModule, toplevel : Tree<string, FcDeclaration>) -> FcModule {
	module_toplevels = foldTree(module.natives, 
		foldTree(module.globalVars, 
			foldTree(module.functions, toplevel, 
				\nm, f, acc -> setTree(acc, nm, f)
			),
			\nm, v, acc -> setTree(acc, nm, v)
		),
		\nm, n, acc -> setTree(acc, nm, n)
	);
	FcModule(module with
		functions = mapTree(module.functions, \f -> 
			FcFunctionDec(f with 
				lambda = maybeMap(f.lambda, \lambda ->
					cast(fcShadowExpGlobals(lambda, module_toplevels, makeTree()) : FcExp -> FcLambda)
				)
			)
		),
		globalVars = mapTree(module.globalVars, \v ->
			FcGlobalVar(v with 
				value = maybeMap(v.value, \value -> fcShadowExpGlobals(value, module_toplevels, makeTree()))
			)
		),
		natives = mapTree(module.natives, \n -> 
			FcNativeDec(n with 
				flowfallback = maybeMap(n.flowfallback, \f -> 
					FcFunctionDec(f with 
						lambda = maybeMap(f.lambda, \lambda -> 
							cast(fcShadowExpGlobals(lambda, module_toplevels, makeTree()) : FcExp -> FcLambda)
						)
					)
				)
			)
		)
	);
}

fcShadowExpGlobals(expr : FcExp, toplevel : Tree<string, FcDeclaration>, renaming : Tree<string, string>) -> FcExp {
	res_e = \e -> fcShadowExpGlobals(e, toplevel, renaming);
	res_es = \es -> map(es, res_e);
	upd_renaming = \acc, name ->
		if (!containsKeyTree(toplevel, name)) acc else {
			new_name = fcMakeUnusedName(name, toplevel);
			setTree(acc, name, new_name);
		}
	switch (expr) {
		FcSeq(es, __): 
			FcSeq(expr with es = res_es(es));
		FcCast(e1,__,__,__): 
			FcCast(expr with e = res_e(e1));
		FcCall(f, args,__): 
			FcCall(expr with f = res_e(f), args = res_es(args));
		FcSwitch(x, __, cases, __): 
			FcSwitch(expr with
				x = cast(res_e(x) : FcExp -> FcVar), 
				cases = map(cases, \c -> FcCase(c with body = res_e(c.body)))
			);
		FcLambda(args, body, __): {
			new_renaming = fold(args, renaming, \acc, arg -> upd_renaming(acc, arg.name));
			FcLambda(expr with
				args = map(args, \arg -> FcFunArg(arg with name = lookupTreeDef(new_renaming, arg.name, arg.name))),
				body = fcShadowExpGlobals(body, toplevel, new_renaming)
			);
		}
		FcLet(name, __, e1, e2, __): {
			new_renaming = upd_renaming(renaming, name);
			FcLet(expr with
				name = lookupTreeDef(new_renaming, name, name),
				e1 = res_e(e1),
				e2 = fcShadowExpGlobals(e2, toplevel, new_renaming)
			);
		}
		FcIf(e1, e2, e3, info): 
			FcIf(res_e(e1), res_e(e2), res_e(e3), info);
		FcCallPrim(__, es, __): 
			FcCallPrim(expr with es = res_es(es));
		FcVar(name, __): 
			FcVar(expr with name = lookupTreeDef(renaming, name, name));
		FcRequire(__, ex, __): 
			FcRequire(expr with e = res_e(ex));
		FcUnsafe(__, fallback, __): 
			FcUnsafe(expr with fallback = res_e(fallback));
		FcConst(): 
			expr;
	}
}

fcMakeUnusedName(name : string, toplevel : Tree<string, FcDeclaration>) -> string {
	fcDoMakeUnusedName(name, toplevel, 0);
}

fcDoMakeUnusedName(name : string, toplevel : Tree<string, FcDeclaration>, i : int) -> string {
	new_name = name + "_" + i2s(i);
	if (!containsKeyTree(toplevel, new_name)) new_name else {
		fcDoMakeUnusedName(name, toplevel, i + 1);
	}
}
