import tools/flowc/statements/fsexp;
import tools/flowc/incremental/fiprettyprint;
import tools/flowc/manipulation/effects;
import string_utils;

export {

	fsExpType(e: FsExp) -> FiType;
	fsStatType(s: FsStat) -> FiType;

	fsExp2s(e: FsExp) -> string;
	fsStat2s(s: FsStat) -> string;

	fsSetExpType(e : FsExp, t: FiType) -> FsExp;

	fsHasTailCall(s: FsStat) -> bool;

	fiExpIsFsExp(e: FiExp) -> bool;
	fiExpHasEffects(e: FiExp, effects: FiEffects) -> bool;

	fsWrapSeq(stats: [FsStat]) -> FsStat;
	fsUnwrapSeq(stat: FsStat) -> [FsStat];

	fsStatFreevars(s : FsStat) -> Set<FsVar>;
	fsExpFreevars(e : FsExp) -> Set<FsVar>;
}

fsExpType(e: FsExp) -> FiType {
	switch (e) {
		FsLambda(__,__,__, type,__): type;
		FsCall(__,__, type,__):      type;
		FsVar(__, type,__,__):       type;
		FsCallPrim(__,__, type,__):  type;
		FiVoid(__):       FiTypeVoid();
		FiDouble(__, __): FiTypeDouble();
		FiInt(__, __):    FiTypeInt();
		FiString(__, __): FiTypeString();
		FiBool(__, __):   FiTypeBool();
	}
}

fsStatType(s: FsStat) -> FiType {
	switch (s) {
		FsLet(__,__,s1,__):       fsStatType(s1);
		FsIf(__,__,__, type,__):  type;
		FsSwitch(__,__,__, type,__): type;
		FsSeq(ss, type,__):       type;
		FsWrapExp(e,__):          fsExpType(e);
		FsRet(e,__):              fsExpType(e);
		FsTailCall(__):           FiTypeVoid();
		FsVarDecl(var,__):        var.type;
		FsAssign(__,__,__):       FiTypeVoid();
		FsMemory(op,__, e,__): {
			switch (op) {
				FmReuse():    fsExpType(e);
				FmIsUnique(): FiTypeBool();
				default:      FiTypeVoid();
			}
		}
	}
}

fsStat2s(s: FsStat) -> string {
	t2s = \t -> prettyFiType(dummyPretty, t, makeSet());
	switch (s) {
		FsLet(v, e, s1,__): {
			v.name + " : " + t2s(v.type) + " = " + fsExp2s(e) + ";\n" + fsStat2s(s1);
		}
		FsIf(e, s1, s2, __,__): {
			"if (" + fsExp2s(e) + ") " + fsStat2s(s1) + " else " + fsStat2s(s2);
		}
		FsSwitch(v,__, cases, __,__): {
			"switch (" + fsExp2s(v) + ") {\n" +
				strIndent(superglue(cases, \c -> {
					body_s = fsStat2s(c.body);
					body_s1 = if (strContains(body_s, "\n") || startsWith(body_s, "{")) body_s else body_s + ";";
					c.struct + "(" + superglue(c.args, \arg -> arg.name, ", ") + "): " + body_s1;
				}, "\n")) +
			"\n}";
		}
		FsSeq(ss, type,__): {
			if (length(ss) == 0) "{}" else
			if (length(ss) == 1) fsStat2s(ss[0]) else
			"{\n" + strIndent(superglue(ss, fsStat2s, ";\n")) + "\n}";
		}
		FsWrapExp(e,__): {
			fsExp2s(e);
		}
		FsRet(e,__): {
			"return " + fsExp2s(e);
		}
		FsTailCall(__): {
			"tailcall";
		}
		FsVarDecl(var,__): {
			var.name + " : " + t2s(var.type);
		}
		FsAssign(to, what,__): {
			fsExp2s(to) + " := " +  fsExp2s(what);
		}
		FsMemory(op, var, e,__): {
			switch (op) {
				FmDup():      "dup(" + var  + ");" + fsExp2s(e);
				FmDrop():     "drop(" +  var + ");" + fsExp2s(e);
				FmReuse():    "reuse(" +  var + ");" + fsExp2s(e);
				FmDispose():  "dispose(" +  var + ");" + fsExp2s(e);
				FmIsUnique(): "is_unique(" +  var + ");" + fsExp2s(e);
				FmDecRef():   "dec_ref(" +  var + ")" + fsExp2s(e);
				FmNull():     "nullptr";
			}
		}
	}
}

fsExp2s(e: FsExp) -> string {
	t2s = \t -> prettyFiType(dummyPretty, t, makeSet());
	switch (e) {
		FsLambda(closure, args, body,__,__): {
			body_s = fsStat2s(body);
			closure_s = "[" + superglue(closure, \v -> v.name, ", ") + "]";
			header = closure_s + "\\" + superglue(args, \arg -> arg.name + ":" + t2s(arg.type), ", ") + " -> ";
			if (!strContains(body_s, "\n") || startsWith(body_s, "{")) header + body_s else header + "{\n" + strIndent(body_s) + "\n}";
		}
		FsCall(f, args,__,__): {
			fsExp2s(f) + "(" + superglue(args, fsExp2s, ", ") + ")";
		}
		FsCallPrim(__,__,__,__): {
			fsCallPrim2s(e);
		}
		FsVar(name,__,__,__): name;
		FiVoid(__):      "{}";
		FiDouble(d, __): d2s(d);
		FiInt(i, __):    i2s(i)
		FiString(s, __): "\"" + escapeStr(s) + "\"";
		FiBool(b, __):   b2s(b);
	}
}

fsCallPrim2s(call: FsCallPrim) -> string {
	t2s = \t -> prettyFiType(dummyPretty, t, makeSet());
	es = call.es;
	switch (call.op) {
		FsOrPrim():  "(" + fsExp2s(es[0]) + " || " + fsExp2s(es[1]) + ")";
		FsAndPrim(): "(" + fsExp2s(es[0]) + " && " + fsExp2s(es[1]) + ")";
		FsNotPrim(): "!" + fsExp2s(es[0]);
		FsEqPrim():  "(" + fsExp2s(es[0]) + " == " + fsExp2s(es[1]) + ")";
		FsNePrim():  "(" + fsExp2s(es[0]) + " != " + fsExp2s(es[1]) + ")";
		FsLePrim():  "(" + fsExp2s(es[0]) + " <= " + fsExp2s(es[1]) + ")";
		FsGePrim():  "(" + fsExp2s(es[0]) + " >= " + fsExp2s(es[1]) + ")";
		FsLtPrim():  "(" + fsExp2s(es[0]) + " < " + fsExp2s(es[1]) + ")";
		FsGtPrim():  "(" + fsExp2s(es[0]) + " > " + fsExp2s(es[1]) + ")";
		FsPlusPrim():  "(" + fsExp2s(es[0]) + " + " + fsExp2s(es[1]) + ")";
		FsMinusPrim(): "(" + fsExp2s(es[0]) + " - " + fsExp2s(es[1]) + ")"; 
		FsMulPrim():   "(" + fsExp2s(es[0]) + " * " + fsExp2s(es[1]) + ")";
		FsDivPrim():   "(" + fsExp2s(es[0]) + " / " + fsExp2s(es[1]) + ")";
		FsModPrim():   "(" + fsExp2s(es[0]) + " % " + fsExp2s(es[1]) + ")";
		FsNegPrim():   "-" + fsExp2s(es[0]);
		FsArrayPrim():   "[" + superglue(es, fsExp2s, ", ") + "]";
		FsIndexPrim():   fsExp2s(es[0]) + "[" + fsExp2s(es[1]) + "]";
		FsDerefPrim():   "(*" +fsExp2s(es[0]) + ")";
		FsRefPrim():     "ref " + fsExp2s(es[0]);
		FsStructPrim(struct_name): {
			struct_type = cast(call.type : FiType -> FiTypeName);
			typars = if (struct_type.typeparameters == []) "" else 
				"<" + superglue(struct_type.typeparameters, \tp -> t2s(tp), ", ") + ">";
			struct_name + typars + "(" + superglue(es, fsExp2s, ", ") + ")";
		}
		FsFieldPrim(name): fsExp2s(es[0]) + "." + name;
		FsRequirePrim(file): {
			"require " + file + " " + fsExp2s(es[0]);
		}
		FsUnsafePrim(name): {
			"unsafe " + name + " " + fsExp2s(es[0]);
		}
		FsCastPrim(from, to): {
			"(" + fsExp2s(es[0]) + " : " + t2s(from) + " -> " + t2s(to) + ")";
		}
		FsIfPrim(): {
			"(" + fsExp2s(es[0]) + " ? " + fsExp2s(es[1]) + " : " + fsExp2s(es[2]) + ")";
		}
		FsReuseStructPrim(name, reuse): {
			struct_type = cast(call.type : FiType -> FiTypeName);
			typars = if (struct_type.typeparameters == []) "" else 
				"<" + superglue(struct_type.typeparameters, \tp -> t2s(tp), ", ") + ">";
			name + typars + "@" + reuse.name + "(" + superglue(es, fsExp2s, ", ") + ")";
		}
		
	}
}

fsSetExpType(e : FsExp, t: FiType) -> FsExp {
	switch(e) {
		FsLambda(__,__,__,__,__):    FsLambda(e with type = cast(t : FiType -> FiTypeFunction));
		FsCall(__,__,__,__):         FsCall(e with type = t);
		FsCallPrim(__,__,__,__):     FsCallPrim(e with type = t);
		FsVar(__,__,__,__):          FsVar(e with type = t);
		default: e;
	}
}

fsHasTailCall(s: FsStat) -> bool {
	switch (s) {
		FsIf(e, s1, s2, __,__): fsHasTailCall(s1) || fsHasTailCall(s2);
		FsSwitch(v,__, cases, __,__): exists(cases, \c -> fsHasTailCall(c.body));
		FsSeq(ss, type,__): if (length(ss) == 0) false else fsHasTailCall(ss[length(ss) - 1]);
		FsTailCall(__):  true;
		FsLet(v, e, s1, __): fsHasTailCall(s1);
		default: false;
	}
}

fiExpIsFsExp(e: FiExp) -> bool {
	switch (e) {
		FiSeq(es, type,__): 
			if (length(es) == 0) true else	
			if (length(es) == 1) {
				fiExpIsFsExp(es[0]) && type != FiTypeVoid();
			} else false;
		FiCast(ex,__,__,__,__): fiExpIsFsExp(ex);
		FiCall(f, args,__,__): fiExpIsFsExp(f) && forall(args, fiExpIsFsExp);
		FiSwitch(__,__,__,__,__): false;
		FiLambda(__,__,__,__): true;
		FiLet(__,__,__,__,__, __): false;
		FiIf(e1, e2, e3,__, __): fiExpIsFsExp(e1) && fiExpIsFsExp(e2) && fiExpIsFsExp(e3);   
		FiCallPrim(op, es,__, __): forall(es, fiExpIsFsExp);
		FiRequire(__,__,__,__): false;
		FiUnsafe(__,__,__,__): false;
		default: true;
	}
}

fiExpHasEffects(e: FiExp, effects: FiEffects) -> bool {
	switch (e) {
		FiSeq(es, type,__): exists(es, \x -> fiExpHasEffects(x, effects));
		FiCast(ex,__,__,__,__): fiExpHasEffects(ex, effects);
		FiCall(f, args,__,__): fiExpHasEffects(f, effects) || exists(args, \x -> fiExpHasEffects(x, effects));
		FiSwitch(__,__,cases,__,__): exists(cases, \c -> fiExpHasEffects(c.body, effects));
		FiLambda(__,body,__,__): fiExpHasEffects(body, effects);
		FiLet(__,__,e1,e2,__, __): fiExpHasEffects(e1, effects) || fiExpHasEffects(e2, effects);
		FiIf(e1, e2, e3,__, __): fiExpHasEffects(e1, effects) || fiExpHasEffects(e2, effects) || fiExpHasEffects(e3, effects);
		FiCallPrim(op, es,__, __): {
			exists(es, \x -> fiExpHasEffects(x, effects)) ||
			switch (op) {
				FcRefPrim(): true;
				default: false;
			}
		}
		FiRequire(__,ex,__,__): fiExpHasEffects(ex, effects);
		FiUnsafe(__,__,__,__): true;
		FiVar(name,__,__): containsSet(effects.hasEffects, name);
		default: false;
	}
}

fsWrapSeq(stats: [FsStat]) -> FsStat {
	if (length(stats) == 0) FsSeq([], FiTypeVoid(), -1) else 
	if (length(stats) == 1) stats[0] else {
		last = stats[length(stats) - 1];
		FsSeq(stats, fsStatType(last), last.start);
	}
}

fsUnwrapSeq(stat: FsStat) -> [FsStat] {
	switch (stat) {
		FsSeq(stats,__,__): stats; 
		default: [stat]; 
	}
}

fsStatFreevars(s : FsStat) -> Set<FsVar> {
	fsStatFreevarsBoundFree(s, makeSet(), makeSet());
}

fsStatFreevarsBoundFree(s : FsStat, bound : Set<FsVar>, free : Set<FsVar>) -> Set<FsVar> {
	switch (s) {
		FsLet(v, e, s1,__): {
			bound1 = insertSet(bound, v);
			free1 = fsExpFreevarsBoundFree(e, bound1, free);
			fsStatFreevarsBoundFree(s1, bound1, free1);
		}
		FsIf(e, s1, s2, __,__): {
			fsStatFreevarsBoundFree(s2, bound, 
				fsStatFreevarsBoundFree(s1, bound, 
					fsExpFreevarsBoundFree(e, bound, free)
				)
			);
		}
		FsSwitch(v,__, cases, __,__): {
			fold(cases, fsExpFreevarsBoundFree(v, bound, free), \acc, c -> 
				fsStatFreevarsBoundFree(c.body, bound, acc)
			);
		}
		FsSeq(ss, type,__): {
			fold(ss, free, \acc, x -> 
				fsStatFreevarsBoundFree(x, bound, acc)
			);
		}
		FsWrapExp(e,__): {
			fsExpFreevarsBoundFree(e, bound, free);
		}
		FsRet(e,__): {
			fsExpFreevarsBoundFree(e, bound, free);
		}
		FsTailCall(__): free;
		FsVarDecl(v,__): free;
		FsAssign(to, what,__): {
			fsExpFreevarsBoundFree(to, bound, fsExpFreevarsBoundFree(what, bound, free));
		}
		FsMemory(__,__,e,__): {
			fsExpFreevarsBoundFree(e, bound, free);
		}
	}
}

fsExpFreevars(e : FsExp) -> Set<FsVar> {
	fsExpFreevarsBoundFree(e, makeSet(), makeSet());
}

fsExpFreevarsBoundFree(expr : FsExp, bound : Set<FsVar>, free : Set<FsVar>) -> Set<FsVar> {
	switch (expr) {
		FsLambda(closure, args, body,__,loc): {
			fsStatFreevarsBoundFree(body, 
				fold(args, bound, \acc, arg -> insertSet(acc, FsVar(arg.name, arg.type, FsVarArg(), loc))),
				free
			);
		}
		FsCall(f, args,__,__): {
			fold(args, 
				fsExpFreevarsBoundFree(f, bound, free),
				\acc, arg -> fsExpFreevarsBoundFree(arg, bound, acc)
			);
		}
		FsCallPrim(__,es,__,__): {
			fold(es, bound, \acc, arg -> fsExpFreevarsBoundFree(arg, bound, acc));
		}
		FsVar(name,__,__,__): if (containsSet(bound, expr)) free else insertSet(free, expr);
		FiVoid(__):      free;
		FiDouble(d, __): free;
		FiInt(i, __):    free;
		FiString(s, __): free;
		FiBool(b, __):   free;
	}
}
