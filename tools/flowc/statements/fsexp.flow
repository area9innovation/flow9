import tools/flowc/incremental/fiexp;

export {
	// General control-flow statements
	FsStat ::= FsIf, FsSwitch, FsSeq, FsAtomic;

		FsIf(cond: FsExp, s1: FsStat, s2: FsStat, type: FiType);
		FsSwitch(x: FsVar, switchType: FiType, cases: [FsCase], type: FiType);
			FsCase(struct: string, args: [FsVar], body: FsStat);
		FsSeq(ss: [FsStat], type: FiType);

	// Statements, which doesn't contain other statements
	FsAtomic ::= FsLet, FsWrapExp, FsRet, FsTailCall, FsVarDecl, FsAssign, FsMemDispose, FsMemProtect, FsMemUnprotect;

		FsLet(var: FsVar, e: FsExp);
		FsWrapExp(e: FsExp);
		FsRet(e: FsExp);
		FsTailCall();
		FsVarDecl(var: FsVar);
		FsAssign(var: FsVar, e: FsExp);

		// A group of memory managing operations (statements)
		FsMemDispose(e: FsExp);   // dispose (delete) unused object
		FsMemProtect(e: FsExp);   // protect an expression from disposal
		FsMemUnprotect(e: FsExp); // remove protection from disposal

	// Expressions (returns value)
	FsExp ::= FsLambda, FsCall, FsCallPrim, FsTernaryIf, FsCast, FsRequire, FsUnsafe, FsVar, FiConst;
		FsLambda(closure: [FsVar], args: [FiFunArg], body: FsStat, type : FiTypeFunction);
		FsCall(f: FsExp, args: [FsExp], type : FiType);
		FsCallPrim(op: FcPrim, es: [FsExp], type: FiType);
		FsRequire(flowfile : string, e : FsExp, type : FiType);
		FsUnsafe(name : string, fallback : FsExp, type : FiType);
		FsCast(e: FsExp, from : FiType, to : FiType);
		FsTernaryIf(cond: FsExp, s1: FsExp, s2: FsExp, type: FiType);
		FsVar(name: string, type: FiType, kind: FsVarKind);
			FsVarKind ::= FsVarGlobal, FsVarLoc, FsVarArg, FsVarRet;
			FsVarGlobal();   // A global variable (maybe of a functional type)
			FsVarLoc();      // A local variable defined by a let statement, i.e. x = f(y, z);
			FsVarArg();      // A local variable which is an argument of a function/lambda, i.e. fn(x: T1) { ... g(x) ... }
			FsVarRet();      // Return variable - needs special treatment
}



