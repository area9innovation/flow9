import tools/flowc/incremental/fiexp;
//import tools/flowc/memory/fmexp;

export {
	// Supertype for all statements/expressions
	FsAll ::= FsStat, FsExp;

	// General control-flow statements
	FsStat ::= FsIf, FsSwitch, FsSeq, FsAtomic;

		FsIf(cond: FsExp, s1: FsStat, s2: FsStat);
		FsSwitch(x: FsVar, switchType: FiType, cases: [FsCase]);
			FsCase(struct: string, args: [FsVar], body: FsStat);
		FsSeq(ss: [FsStat]);

	// Statements, which doesn't contain other statements
	FsAtomic ::= FsWrapExp, FsRet, FsTailCall, FsVarDecl, FsVarDef, FsAssign, FsMemory;

		FsWrapExp(e: FsExp);
		FsRet(e: FsExp);
		FsTailCall();
		FsVarDecl(var: FsVar);
		FsVarDef(var: FsVar, e: FsExp);
		FsAssign(to: FsExp, what: FsExp);
		FsMemory(op: FsMemoryOp, e: FsExp);
			FsMemoryOp ::= FsRC, FsReuse, FsDispose, FsIsUnique, FsDecRef, FsNull;
			FsRC(delta: int); FsReuse(); FsDispose(); FsIsUnique(); FsDecRef(); FsNull();

	// Expressions (returns value)
	FsExp ::= FsLambda, FsCall, FsCallPrim, FsCast, FsVar, FiConst;
		FsLambda(toplevel: bool, closure: [FsVar], args: [FiFunArg], body: FsStat, type : FiTypeFunction);
		FsCall(f: FsExp, args: [FsExp], type : FiType);
		FsCallPrim(op: FsPrim, es: [FsExp], type: FiType);
		FsCast(e: FsExp, from: FiType, type: FiType);
		FsVar(name: string, last: bool, type: FiType);

	FsPrim ::= 
		FsOrPrim,    FsAndPrim,   FsNotPrim,   FsEqPrim,      FsNePrim, 
		FsLePrim,    FsGePrim,    FsLtPrim,    FsGtPrim,      FsPlusPrim, 
		FsMinusPrim, FsMulPrim,   FsDivPrim,   FsModPrim,     FsNegPrim,
		FsArrayPrim, FsIndexPrim, FsDerefPrim, FsRefPrim,     FsStructPrim, 
		FsFieldPrim, FsReusePrim, FsIfPrim,    FsRequirePrim, FsUnsafePrim;
		

		FsOrPrim();    FsAndPrim();   FsNotPrim();   FsEqPrim();  FsNePrim(); 
		FsLePrim();    FsGePrim();    FsLtPrim();    FsGtPrim();  FsPlusPrim(); 
		FsMinusPrim(); FsMulPrim();   FsDivPrim();   FsModPrim(); FsNegPrim();
		FsArrayPrim(); FsIndexPrim(); FsDerefPrim(); FsRefPrim(); FsIfPrim();

		FsStructPrim(struct: string); FsFieldPrim(field: string);
		FsRequirePrim(flowfile : string);
		FsUnsafePrim(name : string);

		FsReusePrim(struct: string, reuse: string);
}
