import tools/flowc/incremental/fiexp;
import tools/flowc/memory/fmexp;

export {
	// General control-flow statements
	FsStat ::= FsIf, FsSwitch, FsSeq, FsAtomic, FsLet;

		FsIf(cond: FsExp, s1: FsStat, s2: FsStat, type: FiType, start: int);
		FsSwitch(x: FsVar, switchType: FiType, cases: [FsCase], type: FiType, start: int);
			FsCase(struct: string, args: [FsVar], body: FsStat, start: int);
		FsSeq(ss: [FsStat], type: FiType, start: int);
		FsLet(var: FsVar, e: FsExp, s: FsStat, start: int);

	// Statements, which doesn't contain other statements
	FsAtomic ::= FsWrapExp, FsRet, FsTailCall, FsVarDecl, FsAssign, FsMemory;

		FsWrapExp(e: FsExp, start: int);
		FsRet(e: FsExp, start: int);
		FsTailCall(start: int);
		FsVarDecl(var: FsVar, start: int);
		FsAssign(to: FsExp, what: FsExp, start: int);
		FsMemory(op: FmMemoryOp, var: string, e: FsExp, start: int);

	// Expressions (returns value)
	FsExp ::= FsLambda, FsCall, FsCallPrim, FsVar, FiConst;
		FsLambda(closure: [FsVar], args: [FiFunArg], body: FsStat, type : FiTypeFunction, start: int);
		FsCall(f: FsExp, args: [FsExp], type : FiType, start: int);
		FsCallPrim(op: FsPrim, es: [FsExp], type: FiType, start: int);
		FsVar(name: string, type: FiType, kind: FsVarKind, start: int);
			FsVarKind ::= FsVarGlobal, FsVarLoc, FsVarArg, FsVarRet, FsVarReuse;
			FsVarGlobal(); // A global variable (maybe of a functional type)
			FsVarLoc();    // A local variable defined by a let statement, i.e. x = f(y, z);
			FsVarArg();    // A local variable which is an argument of a function/lambda, i.e. fn(x: T1) { ... g(x) ... }
			FsVarRet();    // Return variable - needs special treatment
			FsVarReuse();  // a variable for reusing structs

	FsPrim ::= FsOrPrim, FsAndPrim, FsNotPrim,
		FsEqPrim, FsNePrim, FsLePrim, FsGePrim, FsLtPrim, FsGtPrim,
		FsPlusPrim, FsMinusPrim, FsMulPrim, FsDivPrim, FsModPrim, FsNegPrim,
		FsArrayPrim, FsIndexPrim,
		FsDerefPrim, FsRefPrim,
		FsStructPrim, FsFieldPrim, FsReuseStructPrim,
		FsRequirePrim, FsUnsafePrim, FsCastPrim, FsIfPrim;

		FsOrPrim(); FsAndPrim(); FsNotPrim();
		FsEqPrim(); FsNePrim(); FsLePrim(); FsGePrim(); FsLtPrim(); FsGtPrim();
		FsPlusPrim(); FsMinusPrim(); FsMulPrim(); FsDivPrim(); FsModPrim(); FsNegPrim();
		FsArrayPrim(); FsIndexPrim();
		FsDerefPrim(); FsRefPrim();
		FsStructPrim(struct: string); FsFieldPrim(field: string);

		// new, compared to FcPrim primitives:
		FsRequirePrim(flowfile : string);
		FsUnsafePrim(name : string);
		FsCastPrim(from : FiType, to : FiType); 
		FsIfPrim();

		// Reuse previously allocated struct, don't allocate a new one
		FsReuseStructPrim(struct: string, reuse: FsVar);
}
