import tools/flowc/incremental/fiexp;

export {
	FsStat ::= FsLet, FsIf, FsSwitch, FsSeq, FsWrapExp, FsRet, FsTailCall, FsVarDecl, FsAssign;

		FsLet(name: string, vtype: FiType, e: FsExp);
		FsIf(cond: FsExp, s1: FsStat, s2: FsStat, type: FiType);
		FsSwitch(x: FsVar, switchType: FiType, cases: [FsCase], type: FiType);
			FsCase(struct: string, args: [string], body: FsStat);
		FsSeq(ss: [FsStat], type: FiType);
		FsWrapExp(e: FsExp);
		FsRet(e: FsExp);
		FsTailCall(type : FiType);
		FsVarDecl(var: FsVar);
		FsAssign(var: FsVar, e: FsExp);

	FsExp ::= FsLambda, FsCall, FsCallPrim, FsTernaryIf, FsCast, FsRequire, FsUnsafe, FsVar, FiConst;
		FsLambda(closure: [string], args: [FiFunArg], body: FsStat, type : FiTypeFunction);
		FsCall(f: FsExp, args: [FsExp], type : FiType);
		FsCallPrim(op: FcPrim, es: [FsExp], type: FiType);
		FsRequire(flowfile : string, e : FsExp, type : FiType);
		FsUnsafe(name : string, fallback : FsExp, type : FiType);
		FsCast(e: FsExp, from : FiType, to : FiType);
		FsTernaryIf(cond: FsExp, s1: FsExp, s2: FsExp, type: FiType);
		FsVar(name: string, type: FiType, local: bool);
}



