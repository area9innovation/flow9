import tools/flowc/statements/fs_transform;

export {
	// Expands the AST with corresponding ref-counter operations
	fsExpandMem(s: FsStat, id2mem: [FsMem]) -> FsStat;
}

fsExpandMem(s: FsStat, id2mem: [FsMem]) -> FsStat {
	cast(fsMap(s, \x -> switch (x) {
		FsIf(cond, pos, neg, id,__):  {
			if (id == -1) x else 
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					FsIf(x with
						s1 = fsAppendBefore(fsExpandDecs(id2mem[id], FsDecPost()), pos),
						s2 = fsAppendBefore(fsExpandDecs(id2mem[id], FsDecPost()), neg)
					)
				)
			);
		};
		FsSwitch(v, __, cs, id,__): {
			if (id == -1) x else 
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					FsSwitch(x with
						cases = map(cs, \c -> 
							FsCase(c with
								body = fsAppendBefore(fsExpandDecs(id2mem[id], FsDecPost()), c.body)
							)
						)
					)
				)
			);
		}
		FsRet(e, id,__): {
			if (id == -1) x else 
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					fsAppendReturn(x, fsExpandDecs(id2mem[id], FsDecPost()))
				)
			);
		}
		FsWrapExp(e, id,__): {
			if (id == -1) x else 
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					fsAppendAfter(x, fsExpandDecs(id2mem[id], FsDecPost()))
				)
			);
		}
		FsLet(__,e, s1, id,__): {
			if (id == -1) x else
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					FsLet(x with
						s = fsAppendBefore(fsExpandDecs(id2mem[id], FsDecPost()), s1)
					)
				)
			);
		}
		FsFor(__,e, s1,__, id,__): {
			if (id == -1) x else
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					fsAppendAfter(x, fsExpandDecs(id2mem[id], FsDecPost()))
				)
			);
		}
		FsAssign(to, what,__, id,__): {
			if (id == -1) x else 
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					fsAppendAfter(x, fsExpandDecs(id2mem[id], FsDecPost()))
				)
			);
		}
		FsTailCall(__,id,__): {
			if (id == -1) x else
			fsAppendBefore(
				fsExpandDecs(id2mem[id], FsDecPre()),
				fsAppendBefore(
					fsExpandIncs(id2mem[id]),
					fsAppendBefore(fsExpandDecs(id2mem[id], FsDecPost()), x)
				)
			);
		}
		default: x;
	}, true): FsAll -> FsStat);
}

fsExpandIncs(m: FsMem) -> Maybe<FsStat> {
	foldTree(m.ops, None(), \v, ops, acc ->
		if (ops.inc == 0) acc else Some(FsIncRc(v, ops.inc, -1, acc))
	);
}

fsExpandDecs(m: FsMem, ord: FsDecOrd) -> Maybe<FsStat> {
	foldTree(m.ops, None(), \v, ops, acc -> 
		switch (ops.dec) {
			Some(o): if (o != ord) acc else Some(FsDecRc(v, FsDecDirect(), -1, acc));
			None(): acc;
		}
	);
}

fsAppendBefore(mops: Maybe<FsStat>, x: FsStat) -> FsStat {
	eitherMap(mops, \ops -> fsAppendLast(ops, x), x);
}

fsAppendAfter(x: FsStat, mops: Maybe<FsStat>) -> FsStat {
	eitherMap(mops, \ops -> fsSetNext(x, 
		eitherMap(x.next, \n -> fsAppendLast(ops, n), ops)), x
	);
}

fsAppendReturn(x: FsRet, mops: Maybe<FsStat>) -> FsStat {
	eitherMap(mops, \ops -> {
		ret_var = FsVar("tmp_return_var", fsType(x.e));
		FsLet(ret_var, x.e,
			fsAppendBefore(mops, FsRet(FsVarUse(ret_var, FsVarInfo(FsVarLocal(), true, false), -1), -1, None())),
			-1, None()
		);
	}, x);
}
