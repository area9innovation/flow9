import ds/treeutils;
import tools/flowc/statements/fs_transform;

export {
	fsStatPerceus2(s: FsStat, debug: bool) -> FsStat;
}

fsStatPerceus2(s: FsStat, debug: bool) -> FsStat {
	id_counter = ref 0;
	new_id = \-> {
		id = ^id_counter;
		id_counter := ^id_counter + 1;
		id;
	}
	s1 = cast(fsMap(s, fsIds2(new_id), false): FsAll -> FsStat);
	if (debug) {
		println("s1 with ids:\n" +
			//"s:\n" + fs2s(s) + "\n" +
			"s1:\n" + fs2s(s1) + "\n"
			//"s RAW:\n" + toStringFormatted(s1) + "\n"
		);
	}
	id2vars_pre = fsId2varsPre2(s1, debug);
	id2vars_post = fsId2varsPost2(s1, debug);
	id2vars_last: Tree<int, Set<FsVar>> = fsId2varsLast2(s1, id2vars_pre, id2vars_post, debug);
	if (debug) {
		set_tree2s = \st -> {
			superglue(tree2pairs(st), \p ->
				i2s(p.first) + ": " + "[" + superglue(set2array(p.second), \v -> v.name, ", ") + "]", "\n"
			);
		}
		println(
			"id2vars_pre:\n" + set_tree2s(id2vars_pre) + "\n" +
			"id2vars_post:\n" + set_tree2s(id2vars_post) + "\n" +
			"id2vars_last:\n" + set_tree2s(id2vars_last) + "\n" +
			""
		);
	}
	cast(fsMap(s1, \x -> switch (x) {
		FsIf(cond,__, pos, neg, id):  {
			memops = fsGetMemops22(cond, id2vars_last, debug);
			fsAddIncs2(memops,
				FsIf(x with
					s1 = fsDecUnused2(pos.id, fsAddDecs222(memops, pos, id), id2vars_last, debug),
					s2 = fsDecUnused2(neg.id, fsAddDecs222(memops, neg, id), id2vars_last, debug)
				), id
			);
		};
		FsSwitch(v,__,__, cs, id): {
			memops = fsGetMemops22(v, id2vars_last, debug);
			fsAddIncs2(memops,
				FsSwitch(x with
					cases = map(cs, \c ->
						FsCase(c with
							body = fsDecUnused2(c.body.id, fsAddDecs222(memops, c.body, id), id2vars_last, debug)
						)
					)
				), id
			);
		}
		FsRet(e,__,id): {
			memops = fsGetMemops22(e, id2vars_last, debug);
			fsAddDecs221(memops, fsAddIncs2(memops, x, id), id);
		}
		FsWrapExp(e,__,id): {
			memops = fsGetMemops22(e, id2vars_last, debug);
			x1 = if (fiTypeIsScalar(fsType(e))) x else {
				FsDecRc(e, -1);
			}
			fsAddIncs2(memops, fsAddDecs22(memops, x1, id), id);
		}
		FsLet(__,e,__,s2, id): {
			memops = fsGetMemops22(e, id2vars_last, debug);
			fsAddIncs2(memops, FsLet(x with s = fsAddDecs222(memops, s2, s2.id)), id);
		}
		FsAssign(to, what,__,id): {
			memops = fsGetMemops222(to, what, id2vars_last, debug);
			fsAddIncs2(memops, fsAddDecs22(memops, x, id), id);
		}
		FsIncRc(__,__,__): fail0("FsIncRc met during memory operations markup");
		FsDecRc(__,__): fail0("FsDecRc met during memory operations markup");
		FsLambda(__,__, body,__,id): {
			FsLambda(x with body = fsDecUnused2(id, body, id2vars_last, debug));
		}
		default: x;
	}, true): FsAll -> FsStat);
}

fsDecUnused2(id: int, x: FsStat, id2vars_last: Tree<int, Set<FsVar>>, debug: bool) -> FsStat {
	unused = set2array(lookupTreeDef(id2vars_last, id, makeSet()));
	if (debug) {
		println("to dec <" + i2s(id) + "> unused: [" + superglue(unused, \v -> v.name, ", ") + "]");
	}
	if (length(unused) == 0) x else {
		FsSeq(concat(
			map(unused, \v -> FsDecRc(FsVarUse(v, FsVarLocal(), false, -1), -1)),
			fsUnwrapSeq(x)
		), -1);
	}
}

fsGetMemops22(e: FsExp, id2vars_last: Tree<int, Set<FsVar>>, debug: bool) -> [Pair<FsVar, FsMemOps>] {
	memops = tree2pairs(fsExpVarIncs2(e, makeTree(), id2vars_last, -1, FsOrPrim()));
	if (debug) {
		memops_str = superglue(memops, \p -> p.first.name + "=inc(" + i2s(p.second.incs) + ")" + if (p.second.dec) ", dec" else "", ", ");
		println("memops for <" + i2s(e.id) + ">: [" + memops_str + "]");
	}
	memops;
}

fsGetMemops222(e1: FsExp, e2: FsExp, id2vars_last: Tree<int, Set<FsVar>>, debug: bool) -> [Pair<FsVar, FsMemOps>] {
	memops = tree2pairs(fsExpVarIncs2(e2, 
		fsExpVarIncs2(e1, makeTree(), id2vars_last, -1, FsOrPrim()), 
		id2vars_last, -1, FsOrPrim()
	));
	if (debug) {
		memops_str = superglue(memops, \p -> p.first.name + "=inc(" + i2s(p.second.incs) + ")" + if (p.second.dec) ", dec" else "", ", ");
		println("memops for <" + i2s(e1.id) + ", " + i2s(e2.id) + ">: [" + memops_str + "]");
	}
	memops;
}

fsAddIncs2(memops: [Pair<FsVar, FsMemOps>], x: FsStat, id: int) -> FsStat {
	incs = filtermap(memops, \p ->
		if (p.second.incs > 0) {
			Some(FsIncRc(p.second.incs, FsVarUse(p.first, FsVarLocal(), false, -1), -1));
		} else {
			None();
		}
	);
	if (length(incs) == 0) x else {
		FsSeq(concat(incs, fsUnwrapSeq(x)), id);
	}
}

fsAddDecs22(memops: [Pair<FsVar, FsMemOps>], x: FsStat, id: int) -> FsStat {
	decs = filtermap(memops, \p ->
		if (p.second.dec) {
			Some(FsDecRc(FsVarUse(p.first, FsVarLocal(), false, -1), -1));
		} else {
			None();
		}
	);
	if (length(decs) == 0) x else {
		FsSeq(concat(fsUnwrapSeq(x), decs), id);
	}
}


fsAddDecs221(memops: [Pair<FsVar, FsMemOps>], x: FsStat, id: int) -> FsStat {
	decs = filtermap(memops, \p ->
		if (p.second.dec) Some(FsDecRc(FsVarUse(p.first, FsVarLocal(), false, -1), -1)) else None()
	);
	if (length(decs) == 0) x else {
		seq1 = fsUnwrapSeq(x);
		ret = cast(seq1[length(seq1) - 1]: FsStat -> FsRet);
		switch (ret.e) {
			FsTailCall(__,__,__,__): {
				FsSeq(concat3(tail(seq1), decs, [ret]), id);
			}
			default: {
				ret_var = FsVar("tmp_return_var", fsType(ret));
				FsSeq(
					arrayPush(tail(seq1),
						FsLet(ret_var, ret.e, [],
							FsSeq(arrayPush(decs, FsRet(FsVarUse(ret_var, FsVarLocal(), false, -1), [], -1)), id),
							-1
						)
					), -1
				);
			}
		}
	}
}

fsAddDecs222(memops: [Pair<FsVar, FsMemOps>], x: FsStat, id: int) -> FsStat {
	decs = filtermap(memops, \p ->
		if (p.second.dec) {
			Some(FsDecRc(FsVarUse(p.first, FsVarLocal(), false, -1), -1));
		} else {
			None();
		}
	);
	if (length(decs) == 0) x else {
		FsSeq(concat(decs, fsUnwrapSeq(x)), id);
	}
}

fsExpVarIncs2(e: FsExp, acc: Tree<FsVar, FsMemOps>, last: Tree<int, Set<FsVar>>, ind: int, op: FsPrim) -> Tree<FsVar, FsMemOps> {
	switch (e) {
		FsClosure(closure, __,__): {
			fold(closure, acc, \ac, x -> fsExpVarIncs2(x, ac, last, -1, FsOrPrim()));
		}
		FsCall(f, args,__,__): {
			fold(args, fsExpVarIncs2(f, acc, last, -1, FsOrPrim()), \ac, x ->
				fsExpVarIncs2(x, ac, last, -1, FsOrPrim())
			);
		}
		FsCallPrim(o, es,__,__): {
			foldi(es, acc, \i, ac, x -> fsExpVarIncs2(x, ac, last, i, o));
		}
		FsTailCall(args, vals, type, id): {
			fold(vals, acc, \ac, x -> fsExpVarIncs2(x, ac, last, -1, FsOrPrim()));
		}
		FsCast(e1,__,__,__): {
			fsExpVarIncs2(e1, acc, last, -1, FsOrPrim());
		}
		FsVarUse(x, kind, last1, id): {
			call_case = \-> if (containsSet(lookupTreeDef(last, id, makeSet()), x)) acc else {
				switch (lookupTree(acc, x)) {
					Some(p): setTree(acc, x, FsMemOps(p with incs = p.incs + 1));
					None(): setTree(acc, x, FsMemOps(x, 1, false));
				}
			}
			prim_case = \-> if (!containsSet(lookupTreeDef(last, id, makeSet()), x)) acc else {
				switch (lookupTree(acc, x)) {
					Some(p): setTree(acc, x, FsMemOps(p with dec = true));
					None(): setTree(acc, x, FsMemOps(x, 0, true));
				}
			}
			if (fiTypeIsScalar(x.type)) acc else {
				switch (kind) {
					FsVarGlobalFunc(): acc;
					FsVarUninit(): acc;
					default: {
						switch (op) {
							FsGePrim(): prim_case();
							FsLePrim(): prim_case();
							FsGtPrim(): prim_case();
							FsLtPrim(): prim_case();
							FsEqPrim(): prim_case();
							FsNePrim(): prim_case();
							FsFieldPrim(__,__): prim_case();
							FsIndexPrim(): prim_case();
							FsDerefPrim(): prim_case();
							default: call_case();
						}
					}
				}
			}
		}
		FsConst(c, id): acc;
	}
}

FsPerceusAcc2(
	id2vars: Tree<int, Set<FsVar>>,
	vars: Set<FsVar>
);

fsMergeStacks2(l1: List<Set<FsVar>>, l2: List<Set<FsVar>>) -> List<Set<FsVar>> {
	switch (l1) {
		Cons(s1, t1): {
			switch (l2) {
				Cons(s2, t2): {
					Cons(mergeSets(s1, s2), fsMergeStacks2(t1, t2));
				}
				EmptyList(): l1;
			}
		}
		EmptyList(): l2;
	}
}


fsMergeVars2(p1: FsPerceusAcc2, p2: FsPerceusAcc2) -> FsPerceusAcc2 {
	FsPerceusAcc2(
		mergeTreeCustom(p1.id2vars, p2.id2vars, \id, x1, x2 -> mergeSets(x1, x2)),
		mergeSets(p1.vars, p2.vars)
	);
}

fsId2varsPre2(s1: FsStat, debug: bool) -> Tree<int, Set<FsVar>> {
	fsFold2(s1, Pair(FsPerceusAcc2(makeTree(), makeSet()), makeList()),
		\acc, x: FsAll -> {
			add_v = \ac, v -> if (fiTypeIsScalar(v.type)) ac else insertSet(ac, v);
			switch (x) {
				FsLambda(closure, args,__,__,__): {
					new_vars = fold(args, fold(closure, makeSet(), \ac, v -> add_v(ac, v)), \ac, v -> add_v(ac, v));
					Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, new_vars), new_vars), Cons(acc.first.vars, acc.second));
				}
				FsLet(v, __,__,__,id): {
					new_vars = add_v(acc.first.vars, v);
					Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, acc.first.vars), new_vars), acc.second);
				}
				default: {
					Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, acc.first.vars), acc.first.vars), acc.second);
				}
			}
		},
		\acc, x -> {
			switch (x) {
				FsLambda(__,__,__,__,id): {
					switch (acc.second) {
						Cons(pop_vars, pop_stack): {
							if (debug) {
								println("(A) id=" + i2s(id) + " poping stack: " +
									"[" + superglue(set2array(pop_vars), \v -> v.name, ", ") + "]"
								);
							}
							Pair(FsPerceusAcc2(acc.first.id2vars, pop_vars), pop_stack);
						}
						default: acc;
					}
				}
				default: acc;
			}
		},
		\args -> args,
		\p1, p2 -> Pair(fsMergeVars2(p1.first, p2.first), fsMergeStacks2(p1.second, p2.second))
	).first.id2vars;
}

fsId2varsPost2(s1: FsStat, debug: bool) -> Tree<int, Set<FsVar>> {
	show_vars = \vs -> "[" + superglue(set2array(vs), \v -> v.name, ", ") + "]";
	fsFold2(s1, Pair(FsPerceusAcc2(makeTree(), makeSet()), makeList()),
		\acc, x -> {
			switch (x) {
				FsLambda(__,__,__,__,id): {
					if (debug) {
						st = switch (acc.second) {
							Cons(vars,__): show_vars(vars);
							EmptyList(): ""
						}
						println(
							"(B) id=" + i2s(id) + " pushing stack: [" + show_vars(acc.first.vars) + "]\n" +
							"\tacc.second: [" + st + "]\n"
						);
					}
					Pair(
						FsPerceusAcc2(setTree(acc.first.id2vars, x.id, makeSet()), makeSet()), 
						Cons(acc.first.vars, acc.second)
					);
				}
				default: acc;
			}
		},
		\acc, x: FsAll -> {
			add_v = \ac, v -> if (fiTypeIsScalar(v.type)) ac else insertSet(ac, v);
			switch (x) {
				FsLambda(__,__,__,__,__): {
					switch (acc.second) {
						Cons(new_vars, new_stack): {
							if (debug) {
								println("(B) id=" + i2s(x.id) + " poping stack: " + show_vars(new_vars));
							}
							Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, acc.first.vars), new_vars), new_stack);
						}
						default: fail0("empty stack pop");
					}
				}
				FsVarUse(v, kind, last, id): {
					new_vars = switch (kind) {
						FsVarLocal(): add_v(acc.first.vars, v);
						default: acc.first.vars;
					}
					Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, acc.first.vars), new_vars), acc.second);
				}
				default: {
					Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, acc.first.vars), acc.first.vars), acc.second);
				}
			}
		},
		\args -> reverseA(args),
		\p1, p2 -> Pair(fsMergeVars2(p1.first, p2.first), fsMergeStacks2(p1.second, p2.second))
	).first.id2vars;
}

fsId2varsLast2(s1: FsStat, id2vars_pre: Tree<int, Set<FsVar>>, id2vars_post: Tree<int, Set<FsVar>>, debug: bool) -> Tree<int, Set<FsVar>> {
	show_vars = \vs -> "[" + superglue(set2array(vs), \v -> v.name, ", ") + "]";
	fsFold2(s1, Pair(FsPerceusAcc2(makeTree(), makeSet()), makeList()),
		\acc, x: FsAll -> {
			pre_vars = lookupTreeDef(id2vars_pre, x.id, makeSet());
			post_vars = lookupTreeDef(id2vars_post, x.id, makeSet());
			diff1 = differenceSets(pre_vars, post_vars);
			diff = differenceSets(diff1, acc.first.vars);
			if (debug) {
				println(
					"(C) x.id: " + i2s(x.id) + "\n" +
					strIndent(
						"pre_vars: " + show_vars(pre_vars) + "\n" +
						"post_vars: " + show_vars(post_vars) + "\n" +
						"acc.first.vars: " + show_vars(acc.first.vars) + "\n" +
						"diff1: " + show_vars(diff1) + "\n" +
						"diff: " + show_vars(diff)
					)
				);
			}
			switch (x) {
				FsLambda(__,__,__,__,id): {
					if (debug) {
						println("(C) id=" + i2s(id) + " pushing stack: " + show_vars(acc.first.vars));
					}
					Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, diff), makeSet()), Cons(acc.first.vars, acc.second));
				}
				default: {
					Pair(FsPerceusAcc2(setTree(acc.first.id2vars, x.id, diff), mergeSets(acc.first.vars, diff1)), acc.second);
				}
			}
		},
		\acc, x -> {
			switch (x) {
				FsLambda(__,__,__,__,id): {
					switch (acc.second) {
						Cons(vars, t): {
							if (debug) {
								println("(C) id=" + i2s(id) + " poping stack: " + show_vars(vars));
							}
							Pair(FsPerceusAcc2(acc.first.id2vars, vars), t);
						}
						default: acc;
					}
				}
				default: acc;
			}
		},
		\args -> args,
		\p1, p2 -> Pair(fsMergeVars2(p1.first, p2.first), fsMergeStacks2(p1.second, p2.second))
	).first.id2vars;
}

fsIds2(new_id: () -> int) -> (FsAll) -> FsAll {
	\s -> switch(s) {
		FsIf(__,__,__,__,__):     FsIf(s with id = new_id());
		FsSwitch(__,__,__,__,__): FsSwitch(s with id = new_id());
		FsSeq(__, __):            FsSeq(s with id = new_id());
		FsWrapExp(__,__,__):      FsWrapExp(s with id = new_id());
		FsRet(__,__,__):          FsRet(s with id = new_id());
		FsAssign(__,__,__,__):    FsAssign(s with id = new_id());
		FsIncRc(__,__,__):        FsIncRc(s with id = new_id());
		FsDecRc(__,__):           FsDecRc(s with id = new_id());
		FsLet(__,__,__,__,__):    FsLet(s with id = new_id());
		FsClosure(__,__,__):      FsClosure(s with id = new_id());
		FsLambda(__,__,__,__,__): FsLambda(s with id = new_id());
		FsCall(__,__,__,__):      FsCall(s with id = new_id());
		FsCallPrim(__,__,__,__):  FsCallPrim(s with id = new_id());
		FsCast(__,__,__,__):      FsCast(s with id = new_id());
		FsConst(__,__):           FsConst(s with id = new_id());
		FsTailCall(__,__,__,__):  FsTailCall(s with id = new_id());
		FsVarUse(__,__,__,__):    FsVarUse(s with id = new_id());
	}
}
