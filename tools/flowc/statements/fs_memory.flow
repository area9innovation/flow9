import ds/array;
import ds/multiset;
import tools/flowc/incremental/fi_helpers;
import tools/flowc/statements/fs_transform;

export {
	fsStatPerceus(s: FsStat, names: FiGlobalNames) -> FsStat;
	fsExpPerceus(e: FsExp, names: FiGlobalNames) -> FsExp;

	debug_perceus = ref false;
}

fsStatPerceus(s: FsStat, names: FiGlobalNames) -> FsStat {
	s1 = fsStatLastVarUsage(s, makeSet(), names).first;
	if (^debug_perceus) {
		println("LAST VARS:\n" + 
			"s:\n" + fsStat2s(s) + "\n" + 
			"s1:\n" + fsStat2s(s1) + "\n"
			//"s RAW:\n" + toStringFormatted(s1) + "\n"
		);
	}
	fsDoStatPerceus(s1, makeTree(), names).first;
	//fsStatMap(fsDoStatPerceus(s1, [], names).first, fsStatOptimize, idfn);
}

fsExpPerceus(e: FsExp, names: FiGlobalNames) -> FsExp {
	e1 = fsExpLastVarUsage(e, makeSet(), names).first;
	fsDoExpPerceus(e1, makeTree(), names).first;
	//fsExpMap(fsDoExpPerceus(e1, names), fsStatOptimize, idfn);
}

fsDoStatPerceus(s: FsStat, locals: Tree<string, FsVar>, names: FiGlobalNames) -> Pair<FsStat, Tree<string, FsVar>> {
	/*remove_finalized = \x, locs -> {
		x_vars = fsExpVars(x, []);
		filter(locs, \v -> 
			!exists(x_vars, \w -> w.last && w.name == v.name)
		);
	}*/
	switch (s) {
		FsIf(c, s1, s2): {
			c_p = fsDoExpPerceus(c, locals, names);
			s1_p = fsDoStatPerceus(s1, c_p.second, names);
			s2_p = fsDoStatPerceus(s2, c_p.second, names);
			/*if (^debug_perceus) {
				println("If !!!!:\n" +
					"cond:\n" + fsExp2s(cond) + "\n" + 
					"locals: [" + superglue(locals, fsExp2s, ", ") + "]\n" +
					"new_locals: [" + superglue(locals, fsExp2s, ", ") + "]\n" +
					"locals: [" + superglue(locals, fsExp2s, ", ") + "]\n" +
					"fsUnusedVars(pos): [" + superglue(fsUnusedVars(t_s1.first, new_locals), fsExp2s, ", ") + "]\n" +
					"fsUnusedVars(neg): [" + superglue(fsUnusedVars(t_s2.first, new_locals), fsExp2s, ", ") + "]\n"
				);
			}*/
			Pair(
				FsIf(s with
					cond = c_p.first,
					s1 = fsInsertDecUnused(s1_p.first, c_p.second),
					s2 = fsInsertDecUnused(s2_p.first, c_p.second)
				), 
				mergeTree(s1_p.second, s2_p.second)
			);
		}
		FsSwitch(x, sw_type, cs): {
			x_p = fsDoExpPerceus(x, locals, names);
			cs_p = map(cs, \c -> {
				c_m = fsDoStatPerceus(c.body, x_p.second, names);
				Pair(FsCase(c with body = fsInsertDecUnused(c_m.first, x_p.second)), c_m.second);
			});
			Pair(
				FsSwitch(s with 
					x = x_p.first,
					cases = map(cs_p, \p -> p.first)
				), 
				mergeTrees(map(cs_p, \p -> p.second))
			);
		}
		FsSeq(es): {
			p_es = fold(es, Pair([], locals), \acc, x -> {
				p_x = fsDoStatPerceus(x, acc.second, names);
				/*println("LOCALS AFTER:\n" + fsStat2s(x) + "\n" +
					"ARE: " + superglue(p_x.second, fsExp2s, ", ") + "\n"
				);*/
				Pair(concat(acc.first, fsUnwrapSeq(p_x.first)), p_x.second);
			});
			Pair(fsWrapSeq(p_es.first), p_es.second);
		}
		FsLet(name, type, e1, s1): {
			e1_p = fsDoExpPerceus(e1, setTree(locals, name, FsVar(name, false, type)), names);
			s1_p = fsDoStatPerceus(s1, e1_p.second, names);
			if (^debug_perceus) {
				println(
					"FsLet: !!!!!!!\n" +
					"e1: " + fsExp2s(e1) + "\n" +
					"s: " + fsStat2s(s) + "\n" +
					"locals of: " + name + " are: " + superglue(getTreeValues(locals), fsExp2s, ", ") + "\n" +
					"e1_p.second: " + superglue(getTreeValues(e1_p.second), fsExp2s, ", ") + "\n"
					//"e1 vars: " + superglue(fsExpVars(e1, []), fsExp2s, ", ") + "\n\n"
				);
			}
			Pair(
				FsLet(s with
					e = e1_p.first,
					//s = fsInsertDecUnused(s1_p.first, e1_p.second)
					s = s1_p.first
				),
				s1_p.second
			);
		}
		FsVarDef(v, e): {
			fail("obsolete");
			Pair(s, locals);
		}
		FsWrapExp(e): {
			e_p = fsDoExpPerceus(e, locals, names);
			Pair(
				//FsWrapExp(s with e = e_p.first),
				fsWrapSeq(concat(
					[FsWrapExp(s with e = e_p.first)],
					if (fsExpType(e) == FiTypeVoid()) [] else [FsDecRc(1, e)],
				)),
				e_p.second
			);
		}
		FsRet(e): {
			e_p = fsDoExpPerceus(e, locals, names);
			Pair(
				FsRet(s with e = e_p.first),
				e_p.second
			);
		}
		FsTailCall(): {
			Pair(s, locals);
		}
		FsVarDecl(var): {
			fail("obsolete");
			Pair(s, locals);
		}
		FsAssign(to, what): {
			to_p = fsDoExpPerceus(to, locals, names);
			what_p = fsDoExpPerceus(what, to_p.second, names);
			Pair(
				FsAssign(s with to = to_p.first, what = what_p.first), 
				what_p.second
			);
		}
		FsDecRc(delta, e): {
			fail("double memory operators markup");
			Pair(s, locals);
		}
	}
}

fsDoExpPerceus(ex: FsExp, locals: Tree<string, FsVar>, names: FiGlobalNames) -> Pair<FsExp, Tree<string, FsVar>> {
	switch (ex) {
		FsCall(f, args, type): {
			f_p = fsDoExpPerceus(f, locals, names);
			// In reverse order because of order of evaluation in gcc !!!
			args_p = foldr(args, Pair([], f_p.second), \acc, arg -> {
				arg_p = fsDoExpPerceus(arg, acc.second, names);
				Pair(concat([arg_p.first], acc.first), arg_p.second);
			});
			Pair(
				FsCall(ex with 
					f = f_p.first, 
					args = args_p.first
				), 
				args_p.second
			);
		}
		FsLambda(closure, args, body, type): {
			//locals1 = fold(args, makeTree(), \acc, v -> setTree(acc, v.name, v));
			body_p = fsDoStatPerceus(body, makeTree(), names);

			/*if (^debug_perceus) {
				println("FsLambda !!!!:\n" +
					"args:  [" + superglue(args, fsExp2s, ", ") + "]\n" +
					"locals:  [" + superglue(getTreeValues(locals), fsExp2s, ", ") + "]\n" +
					//"locals1: [" + superglue(getTreeValues(locals1), fsExp2s, ", ") + "]\n" +
					"body_p.second: [" + superglue(getTreeValues(body_p.second), fsExp2s, ", ") + "]\n" +
					//"fsUnusedVars(body_p.first, locals1): [" + superglue(fsUnusedVars(body_p.first, locals1), fsExp2s, ", ") + "]\n"
					//"fsUnusedVars(neg): [" + superglue(fsUnusedVars(t_s2.first, new_locals), fsExp2s, ", ") + "]\n"
				);
			}*/

			unused_vars = filter(args, \v -> v.last && !fiTypeIsScalar(v.type));
			body1 = if (length(unused_vars) == 0) body_p.first else {
				FsSeq(concat(
					map(unused_vars, \v -> FsDecRc(1, v)),
					[body_p.first]
				));
			}

			Pair(
				FsLambda(ex with body = body1),
				fold(closure, locals, \acc, v -> setTree(acc, v.name, v))
			);
		}
		FsCallPrim(op, es, type): {
			es_p = fold(es, Pair([], locals), \acc, e -> {
				e_p = fsDoExpPerceus(e, acc.second, names);
				Pair(concat(acc.first, [e_p.first]), e_p.second);
			});
			Pair(
				FsCallPrim(ex with es = es_p.first),
				es_p.second
			);
		}
		FsCast(e, from, type): {
			e_p = fsDoExpPerceus(e, locals, names);
			Pair(FsCast(ex with e = e_p.first), e_p.second);
		}
		FsIncRc(e, type): {
			fail("double memory operators markup");
			Pair(e, locals);
		}
		FsVar(name, last, type): {
			e1 = if (fiTypeIsScalar(type) || last || fiIsGlobalFunction(name, names)) ex else {
				FsIncRc(ex, type);
			}
			Pair(e1, 
				if (containsKeyTree(names.toplevel, name)) locals else setTree(locals, name, ex)
			);
		}
		FiString(s, __): Pair(ex, locals);
		FiVoid(__):      Pair(ex, locals);
		FiBool(b, __):   Pair(ex, locals);
		FiInt(i, __):    Pair(ex, locals);
		FiDouble(d, __): Pair(ex, locals);
	}
}
/*
fsExpMemOps(ex: FsExp, names: FiGlobalNames) -> [FsMemory] {
	vars1 = fsExpVars(ex, []);
	vars2 = filter(vars1, \v -> !fiTypeIsScalar(v.type) && !fiIsGlobalFunction(v.name, names));
	filtermap(vars2, \v -> 
		if (v.last) None() else Some(FsMemory(FsIncRc(1), v))
	);
}
*/

fsUnusedVars(s: FsStat, locals: Tree<string, FsVar>) -> [FsVar] {
	s_vars = map(fsStatVars(s, []), \v -> v.name);
	filter(getTreeValues(locals), \v -> 
		!v.last && !fiTypeIsScalar(v.type) && !contains(s_vars, v.name)
	);
}

fsInsertDecUnused(s: FsStat, locals: Tree<string, FsVar>) -> FsStat {
	s_vars = map(fsStatVars(s, []), \v -> v.name);
	unused_vars = filter(getTreeValues(locals), \v -> 
		!v.last && !fiTypeIsScalar(v.type) && !contains(s_vars, v.name)
	);
	if (length(unused_vars) == 0) s else {
		FsSeq(concat(
			map(unused_vars, \v -> 
				FsDecRc(1, v)
			),
			fsUnwrapSeq(s)
		));
	}
}

fsExpVars(ex: FsExp, vars: [FsVar]) -> [FsVar] {
	switch (ex) {
		FsCall(f, args, type): {
			fold(args, fsExpVars(f, vars), \acc, x -> fsExpVars(x, acc));
		}
		FsLambda(closure, args, body, type): {
			fold(closure, vars, \acc, x -> concat(acc, [x]));
			//vars;
		}
		FsCallPrim(op, es, type): {
			fold(es, vars, \acc, x -> fsExpVars(x, acc));
		}
		FsCast(e,__,__): {
			fsExpVars(e, vars);
		}
		FsIncRc(e,__): {
			fsExpVars(e, vars);
		}
		FsVar(name,__,__): {
			concat(vars, [ex]);
		}
		FiString(s, __): vars;
		FiVoid(__):      vars;
		FiBool(b, __):   vars;
		FiInt(i, __):    vars;
		FiDouble(d, __): vars;
	}
}

fsStatVars(s: FsStat, vars: [FsVar]) -> [FsVar] {
	switch (s) {
		FsIf(cond, s1, s2): {
			fsStatVars(s2, fsStatVars(s1, fsExpVars(cond, vars)));
		}
		FsSwitch(x, sw_type, cases): {
			fold(cases, fsExpVars(x, vars), \acc, c -> fsStatVars(c.body, acc));
		}
		FsSeq(es): {
			fold(es, vars, \acc, x -> fsStatVars(x, acc));
		}
		FsLet(name, type, e1, s1): {
			fsStatVars(s1, fsExpVars(e1, vars));
		}
		FsVarDef(v, e): {
			fsExpVars(e, vars);
		}
		FsWrapExp(e): {
			fsExpVars(e, vars);
		}
		FsRet(e): {
			fsExpVars(e, vars);
		}
		FsTailCall(): {
			vars;
		}
		FsVarDecl(var): {
			vars;
		}
		FsAssign(to, what): {
			fsExpVars(what, fsExpVars(to, vars));
		}
		FsDecRc(__, e): {
			fsExpVars(e, vars);
		}
	}
}

// Traverse the AST backwards and markup the first variable use as last

fsStatLastVarUsage(ex: FsStat, vars: Set<string>, names: FiGlobalNames) -> Pair<FsStat, Set<string>> {
	switch(ex) {
		FsIf(cond, s1, s2): {
			p1 = fsStatLastVarUsage(s1, vars, names);
			p2 = fsStatLastVarUsage(s2, vars, names);
			c = fsExpLastVarUsage(cond, mergeSets(p1.second, p2.second), names);
			Pair(
				FsIf(ex with 
					cond = c.first,
					s1 = p1.first,
					s2 = p2.first
				),
				c.second
			);
		}
		FsSwitch(v, type, cases): {
			cases_ps = map(cases, \c -> {
				p = fsStatLastVarUsage(c.body, vars, names);
				Pair(FsCase(c with body = p.first), p.second);
			});
			vars1 = fold(cases_ps, vars, \acc, p -> mergeSets(acc, p.second));
			v_p = fsExpLastVarUsage(v, vars1, names);
			Pair(
				FsSwitch(ex with
					x = cast(v_p.first: FsExp -> FsVar),
					cases = map(cases_ps, \p -> p.first)
				),
				v_p.second
			);
		}
		FsSeq(ss): {
			ps = foldr(ss, Pair([], vars), \acc, x -> {
				p = fsStatLastVarUsage(x, acc.second, names);
				Pair(concat([p.first], acc.first), p.second);
			});
			Pair(
				FsSeq(ex with ss = ps.first),
				ps.second
			);
		}
		FsLet(__,__, e1, s1): {
			p1 = fsStatLastVarUsage(s1, vars, names);
			p2 = fsExpLastVarUsage(e1, p1.second, names);
			Pair(
				FsLet(ex with 
					e = p2.first,
					s = p1.first
				),
				p2.second
			);
		}
		FsAssign(to, what): {
			p1 = fsExpLastVarUsage(what, vars, names);
			p2 = fsExpLastVarUsage(to, p1.second, names);
			Pair(
				FsAssign(ex with
					to = p2.first,
					what = p1.first
				),
				p2.second
			);
		}
		FsDecRc(__, e): {
			p = fsExpLastVarUsage(e, vars, names);
			Pair(FsDecRc(ex with e = p.first), p.second);
		}
		FsWrapExp(e): {
			p = fsExpLastVarUsage(e, vars, names);
			Pair(FsWrapExp(ex with e = p.first), p.second);
		}
		FsRet(e): {
			p = fsExpLastVarUsage(e, vars, names);
			Pair(FsRet(ex with e = p.first), p.second);
		}
		FsVarDef(v, e): {
			fail("obsolete: " + toStringFormatted(ex));
			p = fsExpLastVarUsage(e, vars, names);
			Pair(
				FsVarDef(ex with 
					var = FsVar(v with last = !containsSet(p.second, v.name)),
					e = p.first
				),
				insertSet(p.second, v.name)
			);
		}
		FsTailCall(): {
			Pair(ex, vars);
		}
		FsVarDecl(var): {
			Pair(ex, vars);
		}
	}
}

fsExpLastVarUsage(ex: FsExp, vars: Set<string>, names: FiGlobalNames) -> Pair<FsExp, Set<string>> {
	update_var : (FsVar, Set<string>) -> Pair<FsVar, Set<string>> = \var, vs -> Pair(
		FsVar(var with last = !containsSet(vs, var.name) && !fiIsGlobal(var.name, names)),
		insertSet(vs, var.name)
	);
	switch(ex) {
		FsLambda(closure, args, body, __): {
			p_b = fsStatLastVarUsage(body, makeSet(), names);
			p_args = foldr(args, Pair([], p_b.second), \acc, v -> {
				p_v = update_var(v, acc.second);
				Pair(concat([p_v.first], acc.first), p_v.second);
			});
			p_cl = foldr(closure, Pair([], p_args.second), \acc, v -> {
				p_v = update_var(v, acc.second);
				Pair(concat([p_v.first], acc.first), p_v.second);
			});
			Pair(
				FsLambda(ex with 
					closure = p_cl.first,
					args = p_args.first,
					body = p_b.first
				), 
				p_cl.second
			);
		}
		FsCall(fn, args, __): {
			/*ps = foldr(args, Pair([], vars), \acc, x -> {
				p = fsExpLastVarUsage(x, acc.second, names);
				Pair(concat([p.first], acc.first), p.second);
			});*/

			// C++ evaluation order of func arguments: BACKWARDS!! in g++ at least.
			ps = fold(args, Pair([], vars), \acc, x -> {
				p = fsExpLastVarUsage(x, acc.second, names);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			fp = fsExpLastVarUsage(fn, ps.second, names);
			Pair(
				FsCall(ex with
					f = fp.first,
					args = ps.first
				),
				fp.second
			);
		}
		FsCast(e, from, type): {
			pe = fsExpLastVarUsage(e, vars, names);
			Pair(FsCast(ex with e = pe.first), pe.second);
		}
		FsCallPrim(op, es, __): {
			ps = foldr(es, Pair([], vars), \acc, x -> {
				p = fsExpLastVarUsage(x, acc.second, names);
				Pair(concat([p.first], acc.first), p.second);
			});
			Pair(FsCallPrim(ex with es = ps.first), ps.second);
		}
		FsVar(name, last,__): {
			update_var(ex, vars);
		}
		default: Pair(ex, vars);
	}
}


/*fsStatOptimize(s: FsStat) -> FsStat {
	switch (s) {
		FsSeq(ss): {
			equal_e = \e1, e2 -> switch (e1) {
				FsVar(name1,__,__):
					switch (e2) {
						FsVar(name2,__,__): name1 == name2;
						default: false;
					}
				default: false;
			}
			delta = \x1, x2 -> {
				switch (x1) {
					FsMemory(op1, e1): {
						switch (x2) {
							FsMemory(op2, e2): {
								if (!equal_e(e1, e2)) None() else {
									switch (op1) {
										FsIncRc(d1): 
											switch (op2) {
												FsDecRc(d2): Some(Pair(d1 - d2, e1));
												default: None();
											}
										default: None();
									}
								}
							}
							default: None();
						}
					}
					default: None();
				}
			}
			FsSeq(s with 
				ss = transformArrayPairs(
					mapConcat(ss, fsUnwrapSeq), 
					\x1, x2 -> maybeMap(delta(x1, x2), \p ->
						if (p.first == 0) [] else [FsMemory(FsRC(p.first), p.second)]
					)
				)
			);
		}
		default: s;
	}
}
*/
