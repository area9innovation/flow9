import ds/treeutils;
import tools/flowc/statements/fs_transform;

export {
	fsStatPerceus1(s: FsStat, names: FiGlobalNames) -> FsStat;
	debug_perceus = ref false;
}

FsVarTag ::= FsVarTagDecl, FsVarTagArg, FsVarTagClosure, FsVarTagUse, FsVarTagTailCall;
	FsVarTagDecl();
	FsVarTagArg();
	FsVarTagClosure();
	FsVarTagUse(kind: FsVarKind /*, isAssignedTo: bool*/);
		FsVarKind ::= FsVarKindLocal, FsVarKindGlobal;
			FsVarKindLocal(); 
			FsVarKindGlobal(isFunc: bool);
	FsVarTagTailCall();

fsStatPerceus1(s: FsStat, names: FiGlobalNames) -> FsStat {
	id_counter = ref 0;
	new_id = \-> {
		id = ^id_counter;
		id_counter := ^id_counter + 1;
		id;
	}
	s1 = cast(fsMap(s, fsIds(new_id), false): FsAll -> FsStat);
	if (^debug_perceus) {
		println("s1 with ids:\n" + 
			"s:\n" + fs2s(s) + "\n" + 
			"s1:\n" + fs2s(s1) + "\n"
			//"s RAW:\n" + toStringFormatted(s1) + "\n"
		);
	}

	var_tags = fsFold(s1, makeTree(), \acc, x: FsAll -> {
		switch (x) {
			//FsIf(cond, s1, s2,__):   fsFold(s2, fsFold(s1, fsFold(cond, v, f), f), f);
			//FsSwitch(x,__, cs,__):   do_fold(concat([x], map(cs, \c -> c.body)));
			//FsSeq(ss,__):            do_fold(ss);
			FsLet(v,__,__):   setTree(acc, v.id, FsVarTagDecl());
			//FsWrapExp(e1,__):        fsFold(e1, v, f);
			//FsRet(e1,__):            fsFold(e1, v, f);
			//FsAssign(to, what,__):   fsFold(what, fsFold(to, v, f), f);
			//FsModRc(__, e1,__):      fsFold(e1, v, f);
			//FsIncRc(e1,__,__):       fsFold(e1, v, f);
			//FsDecRc(e1,__):          fsFold(e1, v, f);
			FsLambda(closure, args,__,__,__): {
				fold(args, 
					fold(closure, acc, \ac, v -> setTree(ac, v.id, FsVarTagClosure())), 
					\ac, v -> setTree(ac, v.id, FsVarTagArg())
				);
			}
			//FsCall(fn, args, __,__): do_fold(concat([fn], args));
			//FsCallPrim(__,es,__,__): do_fold(es);
			FsTailCall(args, vals,__,__): 
				fold(args, acc, \ac, v -> setTree(ac, v.id, FsVarTagTailCall()));
			//FsCast(e1,__,__,__):     fsFold(e1, v, f);
			FsVar(name,__,__,id): {
				kind = switch (lookupTree(names.toplevel, name)) {
					Some(decl): {
						FsVarKindGlobal(switch (decl) {
							FiGlobalVar(__,__,__,__,__): false;
							default: true;
						});
					}
					None(): FsVarKindLocal();
				}
				setTree(acc, id, FsVarTagUse(kind));
			}
			default: acc;
			//FsConst(__,__):          v;
		}
	}, true);
	if (^debug_perceus) {
		println(
			"var_tags:\n" + superglue(tree2pairs(var_tags), \p -> 
				"\t" + i2s(p.first) + "->" + toString(p.second), "\n"
			) + "\n"
			""
		);
	}

	id2vars_pre = fsFold(s1, Pair(makeTree(), makeSet()), \acc, x: FsAll -> {
		s2 = switch (x) {
			FsVar(__,__,__,id): 
				switch (lookupTree(var_tags, id)) {
					Some(tag): {
						switch (tag) {
							FsVarTagDecl(): insertSet(acc.second, FsVar(x with id = -1));
							FsVarTagArg():  insertSet(acc.second, FsVar(x with id = -1));
							default:        acc.second;
							//FsVarClosure(): acc.second;
							//FsVarGlobal(isFunc): acc.second;
							//FsVarTailCall(): acc.second;
						}
					}
					None(): acc.second;
				}
			default: acc.second;
		}
		Pair(
			setTree(acc.first, x.id, s2),
			s2,
		)
	}, false).first;
	id2vars_post = fsFoldr(s1, Pair(makeTree(), makeSet()), \acc, x: FsAll ->
		Pair(
			setTree(acc.first, x.id, acc.second),
			switch (x) {
				FsVar(__,__,__,id): //insertSet(acc.second, x);
					switch (lookupTree(var_tags, id)) {
						Some(tag): {
							switch (tag) {
								FsVarTagUse(kind): {
									switch (kind) {
										FsVarKindLocal(): insertSet(acc.second, FsVar(x with id = -1));
										FsVarKindGlobal(isFunc): acc.second;
									}
								}
								default: acc.second;
							}
						}
						None(): acc.second;
					}
				default: acc.second;
			},
		), true
	).first;
	id2vars_last = mapTree2(id2vars_pre, \id, pre_vars -> 
		differenceSets(pre_vars, lookupTreeDef(id2vars_post, id, makeSet()))
	);
	set_tree2s = \st -> {
		superglue(tree2pairs(st), \p -> 
			i2s(p.first) + ": [" + superglue(set2array(p.second), \v -> v.name, ", ") + "]", "\n" 
		);
	}
	if (^debug_perceus) {
		println(
			"id2vars_pre:\n" + set_tree2s(id2vars_pre) + "\n" +
			"id2vars_post:\n" + set_tree2s(id2vars_post) + "\n" +
			"id2vars_last:\n" + set_tree2s(id2vars_last) + "\n" +
			""
		);
	}
	dec_unused = \x -> {
		unused = filter(set2array(lookupTreeDef(id2vars_last, x.id, makeSet())), \v ->
			!(fiTypeIsScalar(v.type) || fiIsGlobalFunction(v.name, names))
		);
		if (length(unused) == 0) x else {
			FsSeq(concat(
				map(unused, \v -> FsDecRc(v, -1)),
				fsUnwrapSeq(x)
			), -1);
		}
	}
	cast(fsMap(s1, \x -> switch (x) {
		FsIf(cond, pos, neg, id):  {
			FsIf(x with s1 = dec_unused(pos), s2 = dec_unused(pos));
		};
		FsSwitch(__,__, cs,__): {
			FsSwitch(x with cases = map(cs, \c -> FsCase(c with body = dec_unused(c.body))));
		}
		FsWrapExp(e1,__): {
			if (fiTypeIsScalar(fsExpType(e1))) x else {
				FsDecRc(e1, -1);
			}
		}
		FsModRc(__, e1,__): {
			fail("double memory operators markup");
			x;
		}
		FsVar(name,__,type, id): {
			if (fiTypeIsScalar(type) || fiIsGlobal(name, names)) x  else {
				unused = lookupTreeDef(id2vars_last, x.id, makeSet());
				if (containsSet(unused, FsVar(name, false, type, -1))) {
					switch (lookupTree(var_tags, id)) {
						Some(tag): {
							switch (tag) {
								FsVarTagUse(kind): {
									FsVar(x with last = true);
								}
								default: x;
							}
						}
						None(): x;
					}
				} else {
					x;
				}
			}
		}
		default: x;
	}, true): FsAll -> FsStat);
}

fsIds(new_id: () -> int) -> (FsAll) -> FsAll {
	\s -> switch(s) {
		FsIf(__,__,__,__):        FsIf(s with id = new_id());
		FsSwitch(__,__,__,__):    FsSwitch(s with id = new_id());
		FsSeq(__, __):            FsSeq(s with id = new_id());
		FsWrapExp(__,__):         FsWrapExp(s with id = new_id());
		FsRet(__,__):             FsRet(s with id = new_id());
		FsAssign(__,__,__):       FsAssign(s with id = new_id());
		FsModRc(__,__,__):        FsModRc(s with id = new_id());
		FsDecRc(__,__):           FsDecRc(s with id = new_id());
		FsIncRc(__,__,__):        FsIncRc(s with id = new_id());
		FsLet(__,__,__):          FsLet(s with id = new_id());
		FsLambda(__,__,__,__,__): FsLambda(s with id = new_id());
		FsCall(__,__,__,__):      FsCall(s with id = new_id());
		FsCallPrim(__,__,__,__):  FsCallPrim(s with id = new_id());
		FsCast(__,__,__,__):      FsCast(s with id = new_id());
		FsConst(__,__):           FsConst(s with id = new_id());
		FsTailCall(__,__,__,__):  FsTailCall(s with id = new_id());
		FsVar(__,__,__,__):       FsVar(s with id = new_id()); 
	}
}
