import ds/array;
import tools/flowc/statements/fs_transform;

export {
	//fsStatPerceus(s: FsStat) -> FsStat;
	fsExpPerceus(e: FsExp, name: string) -> FsExp;
}
/*
fsStatPerceus(s: FsStat) -> FsStat {
	s1 = fsStatLastVarUsage(s, makeSet()).first;
	fsStatTransform(fsDoStatPerceus(s1, FsPerceusEnv(makeSet())), fsStatOptimize, idfn);
}
*/
do_perceus_debug  = ref false;

FsPerceusEnv(
	caseArgs: Set<string>
);

fsExpPerceus(e: FsExp, name: string) -> FsExp {
	do_perceus_debug := name == "main";
	//fsTraverseExpLasVarUsage(e, makeSet());
	e1 = fsExpLastVarUsage(e, makeSet()).first;
	/*if (^do_perceus_debug) {
		println(
			"EXP:\n" + fsExp2s(e) + "\n\n" + 
			"EXP1:\n" + fsExp2s(e1)
		);
	}*/
	e2 = fsExpFirstVarUsage(e1, makeSet()).first;
	fsExpTransform(fsDoExpPerceus(e2), fsStatOptimize, idfn);
	//fsDoExpPerceus(e1);
}

MemOps(pre: [FsMemory], post: [FsMemory]);

fsDoStatPerceus(s: FsStat, env: FsPerceusEnv) -> FsStat {
	switch (s) {
		FsIf(cond, s1, s2, __,__): {
			expOps = fsExpMemOps(cond);
			fsWrapSeq(concat(
				expOps.pre,
				[FsIf(s with
					cond = fsDoExpPerceus(cond),
					s1 = fsWrapSeq(concat(expOps.post, fsUnwrapSeq(fsDoStatPerceus(s1, env)))),
					s2 = fsWrapSeq(concat(expOps.post, fsUnwrapSeq(fsDoStatPerceus(s2, env))))
				)]
			));
		}
		FsSwitch(x, sw_type, cases,__,__): {
			xOps = fsExpMemOps(x);
			fsWrapSeq(concat(
				xOps.pre,
				[FsSwitch(s with 
					cases = map(cases, \c -> {
						env1 = FsPerceusEnv(env with 
							caseArgs = fold(c.args, env.caseArgs, \acc, arg -> 
								insertSet(acc, arg.name)
							)
						);
						FsCase(c with 
							body = fsWrapSeq(concat(
								xOps.post, 
								fsUnwrapSeq(fsDoStatPerceus(c.body, env1))
							))
						)
					})
				)]
			));
		}
		FsSeq(es, type,__): {
			fsWrapSeq(concatA(
				map(es, \x -> fsUnwrapSeq(fsDoStatPerceus(x, env)))
			));
		}
		FsLet(v, e, s1, __,start): {
			eOps = fsExpMemOps(e);
			/*env1 = if (!containsSet(env.caseArgs, v.name)) env else {
				FsPerceusEnv(env with caseArgs = removeSet(env.caseArgs, v.name));
			}
			post = concat(eOps.post, fsUnwrapSeq(fsDoStatPerceus(s1, env1)));
			post1 = if (!containsSet(env.caseArgs, v.name)) post else {
				concat([FsMemory(FmDup(), v, start)], post);
			}*/
			fsWrapSeq(concat(
				eOps.pre,
				[FsLet(s with
					e = fsDoExpPerceus(e),
					//s = fsWrapSeq(post1)
					s = fsWrapSeq(concat(eOps.post, fsUnwrapSeq(fsDoStatPerceus(s1, env))))
				)]
			));
		}
		FsWrapExp(e,__): {
			eOps = fsExpMemOps(e);
			fsWrapSeq(concat3(eOps.pre, [FsWrapExp(s with e = fsDoExpPerceus(e))], eOps.post));
		}
		FsRet(e,__): {
			FsRet(s with e = fsDoExpPerceus(e));
		}
		FsTailCall(__): {
			s;
		}
		FsVarDecl(var,__): {
			s;
		}
		FsAssign(to, what,__): {
			toOps = fsExpMemOps(to);
			whatOps = fsExpMemOps(what);
			fsWrapSeq(concat3(
				concat(toOps.post, whatOps.pre),
				//whatOps.pre,
				[FsAssign(s with to = fsDoExpPerceus(to), what = fsDoExpPerceus(what))],
				whatOps.post
			));
		}
		FsMemory(op, e,__): {
			FsMemory(s with e = fsDoExpPerceus(e));
		}
	}
}

fsExpMemOps(ex: FsExp) -> MemOps {
	vars1 = set2array(fsExpVars(ex, makeSet()));
	vars2 = filter(vars1, \v -> !(fiTypeIsScalar(v.type)) && !fsVarIsGlobal(v.traits));
	// Filter out arguemnt vars, which are used exactly once in each go-through function body path 
	vars = filter(vars2, \v -> 
		switch (v.traits.kind) {
			FsVarTmp(): false;
			//FsVarLocal(): !(v.traits.firstUse && v.traits.lastUse);
			default: true;
		}
	);
	to_dup = \v -> v.traits.firstUse /*&& !v.traits.last*/;
	to_drop = \v -> !(fiTypeIsScalar(v.type)) && !fsVarIsGlobal(v.traits) && v.traits.lastUse /*&& !v.traits.first*/;
	MemOps(
		filtermap(vars, \v -> if (to_dup(v)) Some(FsMemory(FmDup(), v, v.start)) else None()),
		filtermap(vars, \v -> if (to_drop(v)) Some(FsMemory(FmDrop(), v, v.start)) else None())
	);
}

fsExpVars(ex: FsExp, vars: Set<FsVar>) -> Set<FsVar> {
	switch (ex) {
		FsCall(f, args, type,__): {
			fold(args, fsExpVars(f, vars), \acc, x -> fsExpVars(x, acc));
		}
		FsLambda(toplevel, closure, args, body, type,__): {
			fold(closure, vars, \acc, x -> insertSet(acc, x));
		}
		FsCallPrim(op, es, type,__): {
			fold(es, vars, \acc, x -> fsExpVars(x, acc));
		}
		FsVar(name,__,__,__): {
			insertSet(vars, ex);
		}
		FiString(s, __): vars;
		FiVoid(__):      vars;
		FiBool(b, __):   vars;
		FiInt(i, __):    vars;
		FiDouble(d, __): vars;
	}
}

fsStatLocals(ex: FsExp, vars: Set<FsVar>) -> Set<FsVar> {
	switch (ex) {
		FsCall(f, args, type,__): {
			fold(args, fsExpVars(f, vars), \acc, x -> fsExpVars(x, acc));
		}
		FsLambda(toplevel, closure, args, body, type,__): {
			vars;
		}
		FsCallPrim(op, es, type,__): {
			fold(es, vars, \acc, x -> fsExpVars(x, acc));
		}
		FsVar(name, __,__,__): {
			insertSet(vars, ex);
		}
		FiString(s, __): vars;
		FiVoid(__):      vars;
		FiBool(b, __):   vars;
		FiInt(i, __):    vars;
		FiDouble(d, __): vars;
	}
}

fsDoExpPerceus(ex: FsExp) -> FsExp {
	switch (ex) {
		FsCall(f, args, type,__): {
			FsCall(ex with
				f = fsDoExpPerceus(f),
				args = map(args, fsDoExpPerceus)
			);
		}
		FsLambda(toplevel, closure, args, body, type, start): {
			FsLambda(ex with body = fsDoStatPerceus(body, FsPerceusEnv(makeSet())));
		}
		FsCallPrim(op, es, type,__): {
			FsCallPrim(ex with es = map(es, fsDoExpPerceus));
		}
		FsVar(name,__,__,__): ex;
		FiString(s, __): ex;
		FiVoid(__):      ex;
		FiBool(b, __):   ex;
		FiInt(i, __):    ex;
		FiDouble(d, __): ex;
	}
}

fsStatOptimize(s: FsStat) -> FsStat {
	switch (s) {
		FsSeq(ss, type,__): {
			un_memop = \op, x -> switch (x) {
				FsMemory(o, e, __): if (op == o) Some(e) else None();
				default: None();
			}
			equal_e = \e1, e2 -> switch (e1) {
				FsVar(name1,__,__,__):
					switch (e2) {
						FsVar(name2,__,__,__): name1 == name2;
						default: false;
					}
				default: false;
			}
			op1_op2 = \op1, op2, x1, x2 -> {
				switch (un_memop(op1, x1)) {
					Some(e1): {
						switch (un_memop(op2, x2)) {
							Some(e2): equal_e(e1, e2);
							None(): false;
						}
					}
					None(): false;
				}
			}
			FsSeq(s with 
				ss = transformArrayPairs(
					mapConcat(ss, fsUnwrapSeq), 
					\x1, x2 -> {
						v1 = op1_op2(FmDup(), FmDrop(), x1, x2);
						v2 = op1_op2(FmDrop(), FmDup(), x1, x2);
						if (v1 || v2) Some([]) else None();
					}
				)
			);
		}
		default: s;
	}
}


// Traverse the AST backwards and markup the first variable use as last

fsStatLastVarUsage(ex: FsStat, vars: Set<string>) -> Pair<FsStat, Set<string>> {
	switch(ex) {
		FsLet(v, e, s1, __,__): {
			p1 = fsStatLastVarUsage(s1, vars);
			p2 = fsExpLastVarUsage(e, p1.second);
			Pair(
				FsLet(ex with 
					var = FsVar(v with traits = FsVarTraits(v.traits with lastUse = !containsSet(p1.second, v.name))),
					e = p2.first,
					s = p1.first
				),
				insertSet(p2.second, v.name)
			);
		}
		FsIf(cond, s1, s2, __,__): {
			p1 = fsStatLastVarUsage(s1, vars);
			p2 = fsStatLastVarUsage(s2, vars);
			c = fsExpLastVarUsage(cond, mergeSets(p1.second, p2.second));
			Pair(
				FsIf(ex with 
					cond = c.first,
					s1 = p1.first,
					s2 = p2.first
				),
				c.second
			);
		}
		FsSwitch(v, type, cases, __,__): {
			cases_ps = map(cases, \c -> {
				p = fsStatLastVarUsage(c.body, vars);
				Pair(FsCase(c with body = p.first), p.second);
			});
			vars1 = fold(cases_ps, vars, \acc, p -> mergeSets(acc, p.second));
			Pair(
				FsSwitch(ex with
					x = FsVar(v with traits = FsVarTraits(v.traits with lastUse = !containsSet(vars1, v.name))),
					cases = map(cases_ps, \p -> p.first)
				),
				insertSet(vars1, v.name)
			);
		}
		FsSeq(ss, __,__): {
			ps = foldr(ss, Pair([], vars), \acc, x -> {
				p = fsStatLastVarUsage(x, acc.second);
				Pair(concat([p.first], acc.first), p.second);
			});
			Pair(
				FsSeq(ex with ss = ps.first),
				ps.second
			);
		}
		FsAssign(to, what, __): {
			p1 = fsExpLastVarUsage(what, vars);
			p2 = fsExpLastVarUsage(to, p1.second);
			Pair(
				FsAssign(ex with
					to = p2.first,
					what = p1.first
				),
				p2.second
			);
		}
		FsMemory(op, e, __): {
			p = fsExpLastVarUsage(e, vars);
			Pair(FsMemory(ex with e = p.first), p.second);
		}
		FsWrapExp(e, start): {
			p = fsExpLastVarUsage(e, vars);
			Pair(FsWrapExp(ex with e = p.first), p.second);
		}
		FsRet(e, start): {
			p = fsExpLastVarUsage(e, vars);
			Pair(FsRet(ex with e = p.first), p.second);
		}
		FsTailCall(start): {
			Pair(ex, vars);
		}
		FsVarDecl(var, start): {
			Pair(ex, vars);
		}
	}
}

fsExpLastVarUsage(ex: FsExp, vars: Set<string>) -> Pair<FsExp, Set<string>> {
	switch(ex) {
		FsLambda(toplevel, closure, args, body, __,__): {
			p = fsStatLastVarUsage(body, makeSet());
			Pair(FsLambda(ex with body = p.first), vars);
		}
		FsCall(fn, args, __,__): {
			ps = fold(args, Pair([], vars), \acc, x -> {
				p = fsExpLastVarUsage(x, acc.second);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			fp = fsExpLastVarUsage(fn, ps.second);
			Pair(
				FsCall(ex with
					f = fp.first,
					args = ps.first
				),
				fp.second
			);
		}
		FsCallPrim(op, es, __,__): {
			ps = foldr(es, Pair([], vars), \acc, x -> {
				p = fsExpLastVarUsage(x, acc.second);
				Pair(concat([p.first], acc.first), p.second);
			});
			Pair(FsCallPrim(ex with es = ps.first), ps.second);
		}
		FsVar(name, traits,__,__): {
			Pair(
				FsVar(ex with traits = FsVarTraits(traits with lastUse = !containsSet(vars, name))), 
				insertSet(vars, name)
			);
		}
		default: Pair(ex, vars);
	}
}

// Traverse the AST straight and markup the first variable use as first

fsStatFirstVarUsage(ex: FsStat, vars: Set<string>) -> Pair<FsStat, Set<string>> {
	switch(ex) {
		FsLet(v, e, s1, __,__): {
			p1 = fsExpFirstVarUsage(e, vars);
			p2 = fsStatFirstVarUsage(s1, p1.second);
			Pair(
				FsLet(ex with
					e = p1.first,
					s = p2.first
				),
				p2.second
			);
		}
		FsIf(cond, s1, s2, __,__): {
			c = fsExpFirstVarUsage(cond, vars);
			p1 = fsStatFirstVarUsage(s1, c.second);
			p2 = fsStatFirstVarUsage(s2, c.second);
			Pair(
				FsIf(ex with 
					cond = c.first,
					s1 = p1.first,
					s2 = p2.first
				),
				mergeSets(p1.second, p2.second)
			);
		}
		FsSwitch(v, type, cases, __,__): {
			vars1 = insertSet(vars, v.name);
			cases_ps = map(cases, \c -> {
				p = fsStatFirstVarUsage(c.body, vars1);
				Pair(FsCase(c with body = p.first), p.second);
			});
			Pair(
				FsSwitch(ex with
					x = FsVar(v with traits = FsVarTraits(v.traits with firstUse = !containsSet(vars, v.name))),
					cases = map(cases_ps, \p -> p.first)
				),
				fold(cases_ps, vars1, \acc, p -> mergeSets(acc, p.second))
			);
		}
		FsSeq(ss, __,__): {
			ps = fold(ss, Pair([], vars), \acc, x -> {
				p = fsStatFirstVarUsage(x, acc.second);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			Pair(
				FsSeq(ex with ss = ps.first),
				ps.second
			);
		}
		FsAssign(to, what, __): {
			p1 = fsExpFirstVarUsage(what, vars);
			p2 = fsExpFirstVarUsage(to, vars);
			Pair(
				FsAssign(ex with
					to = p2.first,
					what = p1.first
				),
				mergeSets(p1.second, p2.second)
			);
		}
		FsMemory(op, e, __): {
			p = fsExpFirstVarUsage(e, vars);
			Pair(FsMemory(ex with e = p.first), p.second);
		}
		FsWrapExp(e, start): {
			p = fsExpFirstVarUsage(e, vars);
			Pair(FsWrapExp(ex with e = p.first), p.second);
		}
		FsRet(e, start): {
			p = fsExpFirstVarUsage(e, vars);
			Pair(FsRet(ex with e = p.first), p.second);
		}
		FsTailCall(start): {
			Pair(ex, vars);
		}
		FsVarDecl(var, start): {
			Pair(ex, vars);
		}
	}
}

fsExpFirstVarUsage(ex: FsExp, vars: Set<string>) -> Pair<FsExp, Set<string>> {
	switch(ex) {
		FsLambda(toplevel, closure, args, body, __,__): {
			p = fsStatFirstVarUsage(body, makeSet());
			Pair(FsLambda(ex with body = p.first), p.second);
		}
		FsCall(fn, args, __,__): {
			fp = fsExpFirstVarUsage(fn, vars);
			ps = fold(args, Pair([], fp.second), \acc, x -> {
				p = fsExpFirstVarUsage(x, acc.second);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			Pair(
				FsCall(ex with
					f = fp.first,
					args = ps.first
				),
				ps.second
			);
		}
		FsCallPrim(op, es, __,__): {
			ps = fold(es, Pair([], vars), \acc, x -> {
				p = fsExpFirstVarUsage(x, acc.second);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			Pair(FsCallPrim(ex with es = ps.first), ps.second);
		}
		FsVar(name, traits,__,__): {
			Pair(
				FsVar(ex with traits = FsVarTraits(traits with firstUse = !containsSet(vars, name))), 
				insertSet(vars, name)
			);
		}
		default: Pair(ex, vars);
	}
}
