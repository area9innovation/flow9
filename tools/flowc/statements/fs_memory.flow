import ds/array;
import ds/multiset;
import tools/flowc/incremental/fi_helpers;
import tools/flowc/statements/fs_transform;

export {
	fsStatPerceus(s: FsStat) -> FsStat;
	fsExpPerceus(e: FsExp) -> FsExp;
}

fsStatPerceus(s: FsStat) -> FsStat {
	s1 = fsStatLastVarUsage(s, makeSet()).first;
	s2 = fsStatFirstVarUsage(s1, makeSet()).first;
	fsStatMap(fsDoStatPerceus(s2, [], []).first, fsStatOptimize, idfn);
}

fsExpPerceus(e: FsExp) -> FsExp {
	e1 = fsExpLastVarUsage(e, makeSet()).first;
	e2 = fsExpFirstVarUsage(e1, makeSet()).first;
	fsExpMap(fsDoExpPerceus(e2), fsStatOptimize, idfn);
}

MemOps(pre: [FsMemory], post: [FsMemory]);

fsDoStatPerceus(s: FsStat, locals: [FsVar], finalized: [FsVar]) -> Pair<FsStat, [FsVar]> {
	add_finalized = \x, f -> concat(f, filter(fsExpVars(x, []), \v -> v.traits.lastUse));
	switch (s) {
		FsIf(cond, s1, s2): {
			expOps = fsExpMemOps(cond);
			t_s1 = fsDoStatPerceus(s1, locals, finalized);
			t_s2 = fsDoStatPerceus(s2, locals, finalized);
			Pair(fsWrapSeq(concat(
				expOps.pre,
				[FsIf(s with
					cond = fsDoExpPerceus(cond),
					s1 = fsWrapSeq(concat(expOps.post, fsUnwrapSeq(fsInsertDecUnused(t_s1.first, locals, finalized)))),
					s2 = fsWrapSeq(concat(expOps.post, fsUnwrapSeq(fsInsertDecUnused(t_s2.first, locals, finalized))))
				)]
			)), locals);
		}
		FsSwitch(x, sw_type, cases): {
			xOps = fsExpMemOps(x);
			cases_1 = map(cases, \c -> {
				c_m = fsDoStatPerceus(c.body, locals, finalized).first;
				FsCase(c with 
					body = fsWrapSeq(concat(
						xOps.post, 
						fsUnwrapSeq(fsInsertDecUnused(c_m, locals, finalized))
					))
				)
			})
			Pair(fsWrapSeq(concat(
				xOps.pre,
				[FsSwitch(s with 
					cases = map(cases, \c -> {
						c_m = fsDoStatPerceus(c.body, locals, finalized).first;
						FsCase(c with 
							body = fsWrapSeq(concat(
								xOps.post, 
								fsUnwrapSeq(fsInsertDecUnused(c_m, locals, finalized))
							))
						)
					})
				)]
			)), locals);
		}
		FsSeq(es): {
			p_es = fold(es, Triple([], locals, finalized), \acc, x -> {
				p_x = fsDoStatPerceus(x, acc.second, acc.third);
				Triple(concat(acc.first, fsUnwrapSeq(p_x.first)), p_x.second, acc.third);
			});
			Pair(fsWrapSeq(p_es.first), p_es.second);
		}
		FsVarDef(v, e): {
			eOps = fsExpMemOps(e);
			Pair(
				fsWrapSeq(concat3(
					eOps.pre,
					[FsVarDef(s with e = fsDoExpPerceus(e))],
					eOps.post
				)),
				concat(locals, [v])
			);
		}
		FsWrapExp(e): {
			eOps = fsExpMemOps(e);
			Pair(fsWrapSeq(concatA([
				eOps.pre, 
				[FsWrapExp(s with e = fsDoExpPerceus(e))],
				if (fsExpType(e) == FiTypeVoid()) [] else [FsMemory(FsRC(-1), e)],
				eOps.post
			])), locals);
		}
		FsRet(e): {
			Pair(FsRet(s with e = fsDoExpPerceus(e)), locals);
		}
		FsTailCall(): {
			Pair(s, locals);
		}
		FsVarDecl(var): {
			//Pair(s, concat(locals, [var]));
			Pair(s, locals);
		}
		FsAssign(to, what): {
			toOps = fsExpMemOps(to);
			whatOps = fsExpMemOps(what);
			Pair(fsWrapSeq(concat3(
				concat3(toOps.pre, toOps.post, whatOps.pre),
				[FsAssign(s with to = fsDoExpPerceus(to), what = fsDoExpPerceus(what))],
				whatOps.post
			)), locals);
		}
		FsMemory(op, e): {
			Pair(FsMemory(s with e = fsDoExpPerceus(e)), locals);
		}
	}
}

fsExpMemOps(ex: FsExp) -> MemOps {
	vars1 = fsExpVars(ex, []);
	vars2 = filter(vars1, \v -> !fiTypeIsScalar(v.type) && !fsVarIsGlobalFunc(v.traits));
	// Filter out arguemnt vars, which are used exactly once in each go-through function body path 
	vars = filter(vars2, \v -> 
		switch (v.traits.kind) {
			FsVarTmp(): false;
			default: true;
		}
	);
	/*to_dup = \v -> { if (v.traits.lastUse) v.second - 1 else v.second;
		//c1 = if (v.traits.lastUse) v.second - 1 else v.second;
		// Global variables should be bumped ref counter by 1
		//if (fsVarIsGlobal(v.first.traits)) c1 + 1 else c1;
		//c1;
	}
	to_drop = \v -> -v.second;*/
	MemOps(
		filtermap(vars, \v -> 
			if (v.traits.lastUse) None() else Some(FsMemory(FsRC(1), v))
		),
		[]
		//filtermap(vars, \v -> 
		//	if (v.traits.lastUse && v.traits.kind == FsVarArg()) None() else Some(FsMemory(FsRC(-1), v))
		//	//FsMemory(FsRC(-1), v)
		//)
	);
}

fsExpVars(ex: FsExp, vars: [FsVar]) -> [FsVar] {
	switch (ex) {
		FsCall(f, args, type): {
			fold(args, fsExpVars(f, vars), \acc, x -> fsExpVars(x, acc));
		}
		FsLambda(toplevel, closure, args, body, type): {
			fold(closure, vars, \acc, x -> concat(acc, [x]));
			// Maybe just vars?
		}
		FsCallPrim(op, es, type): {
			fold(es, vars, \acc, x -> fsExpVars(x, acc));
		}
		FsCast(e,__,__): {
			fsExpVars(e, vars);
		}
		FsVar(name,__,__): {
			concat(vars, [ex]);
		}
		FiString(s, __): vars;
		FiVoid(__):      vars;
		FiBool(b, __):   vars;
		FiInt(i, __):    vars;
		FiDouble(d, __): vars;
	}
}

fsStatVars(s: FsStat, vars: [FsVar]) -> [FsVar] {
	switch (s) {
		FsIf(cond, s1, s2): {
			fsStatVars(s2, fsStatVars(s1, fsExpVars(cond, vars)));
		}
		FsSwitch(x, sw_type, cases): {
			fold(cases, concat(vars, [x]), \acc, c -> fsStatVars(c.body, acc));
		}
		FsSeq(es): {
			fold(es, vars, \acc, x -> fsStatVars(x, acc));
		}
		FsVarDef(v, e): {
			fsExpVars(e, vars);
		}
		FsWrapExp(e): {
			fsExpVars(e, vars);
		}
		FsRet(e): {
			fsExpVars(e, vars);
		}
		FsTailCall(): {
			vars;
		}
		FsVarDecl(var): {
			vars;
		}
		FsAssign(to, what): {
			fsExpVars(what, fsExpVars(to, vars));
		}
		FsMemory(op, e): {
			fsExpVars(e, vars);
		}
	}
}

fsInsertDecUnused(s: FsStat, locals: [FsVar], finalized: [FsVar]) -> FsStat {
	s_vars = map(fsStatVars(s, []), \v -> v.name);
	unused_vars = filter(locals, \v -> 
		!fiTypeIsScalar(v.type) && !contains(s_vars, v.name) && !exists(finalized, \f -> f.name == v.name)
	);
	if (length(unused_vars) == 0) s else {
		FsSeq(concat(
			map(unused_vars, \v -> 
				FsMemory(FsRC(-1), FsVar(v.name, FsVarTraits(FsVarArg(), false, false, false), v.type))
			),
			fsUnwrapSeq(s)
		));
	}
}

fsDoExpPerceus(ex: FsExp) -> FsExp {
	switch (ex) {
		FsCall(f, args, type): {
			FsCall(ex with f = fsDoExpPerceus(f), args = map(args, fsDoExpPerceus));
		}
		FsLambda(toplevel, closure, args, body, type): {
			arg_vars = map(args, \arg -> FsVar(arg.name, FsVarTraits(FsVarArg(), false, false, false), arg.type));
			FsLambda(ex with body = fsInsertDecUnused(fsDoStatPerceus(body, arg_vars, []).first, arg_vars, []));
		}
		FsCallPrim(op, es, type): {
			FsCallPrim(ex with es = map(es, fsDoExpPerceus));
		}
		FsCast(e, from, type): {
			FsCast(ex with e = fsDoExpPerceus(e));
		}
		FsVar(name,__,__): ex;
		FiString(s, __): ex;
		FiVoid(__):      ex;
		FiBool(b, __):   ex;
		FiInt(i, __):    ex;
		FiDouble(d, __): ex;
	}
}

fsStatOptimize(s: FsStat) -> FsStat {
	switch (s) {
		FsSeq(ss): {
			equal_e = \e1, e2 -> switch (e1) {
				FsVar(name1,__,__):
					switch (e2) {
						FsVar(name2,__,__): name1 == name2;
						default: false;
					}
				default: false;
			}
			delta = \x1, x2 -> {
				switch (x1) {
					FsMemory(op1, e1): {
						switch (x2) {
							FsMemory(op2, e2): {
								if (!equal_e(e1, e2)) None() else {
									switch (op1) {
										FsRC(d1): 
											switch (op2) {
												FsRC(d2): Some(Pair(d1 + d2, e1));
												default: None();
											}
										default: None();
									}
								}
							}
							default: None();
						}
					}
					default: None();
				}
			}
			FsSeq(s with 
				ss = transformArrayPairs(
					mapConcat(ss, fsUnwrapSeq), 
					\x1, x2 -> maybeMap(delta(x1, x2), \p ->
						if (p.first == 0) [] else [FsMemory(FsRC(p.first), p.second)]
					)
				)
			);
		}
		default: s;
	}
}


// Traverse the AST backwards and markup the first variable use as last

fsStatLastVarUsage(ex: FsStat, vars: Set<string>) -> Pair<FsStat, Set<string>> {
	switch(ex) {
		FsIf(cond, s1, s2): {
			p1 = fsStatLastVarUsage(s1, vars);
			p2 = fsStatLastVarUsage(s2, vars);
			c = fsExpLastVarUsage(cond, mergeSets(p1.second, p2.second));
			Pair(
				FsIf(ex with 
					cond = c.first,
					s1 = p1.first,
					s2 = p2.first
				),
				c.second
			);
		}
		FsSwitch(v, type, cases): {
			cases_ps = map(cases, \c -> {
				p = fsStatLastVarUsage(c.body, vars);
				Pair(FsCase(c with body = p.first), p.second);
			});
			vars1 = fold(cases_ps, vars, \acc, p -> mergeSets(acc, p.second));
			Pair(
				FsSwitch(ex with
					x = FsVar(v with traits = FsVarTraits(v.traits with lastUse = !containsSet(vars1, v.name))),
					cases = map(cases_ps, \p -> p.first)
				),
				insertSet(vars1, v.name)
			);
		}
		FsSeq(ss): {
			ps = foldr(ss, Pair([], vars), \acc, x -> {
				p = fsStatLastVarUsage(x, acc.second);
				Pair(concat([p.first], acc.first), p.second);
			});
			Pair(
				FsSeq(ex with ss = ps.first),
				ps.second
			);
		}
		FsAssign(to, what): {
			p1 = fsExpLastVarUsage(what, vars);
			p2 = fsExpLastVarUsage(to, p1.second);
			Pair(
				FsAssign(ex with
					to = p2.first,
					what = p1.first
				),
				p2.second
			);
		}
		FsMemory(op, e): {
			p = fsExpLastVarUsage(e, vars);
			Pair(FsMemory(ex with e = p.first), p.second);
		}
		FsWrapExp(e): {
			p = fsExpLastVarUsage(e, vars);
			Pair(FsWrapExp(ex with e = p.first), p.second);
		}
		FsRet(e): {
			p = fsExpLastVarUsage(e, vars);
			Pair(FsRet(ex with e = p.first), p.second);
		}
		FsVarDef(v, e): {
			p = fsExpLastVarUsage(e, vars);
			Pair(
				FsVarDef(ex with 
					var = FsVar(v with traits = FsVarTraits(v.traits with lastUse = !containsSet(p.second, v.name))),
					e = p.first
				),
				insertSet(p.second, v.name)
			);
		}
		FsTailCall(): {
			Pair(ex, vars);
		}
		FsVarDecl(var): {
			Pair(ex, vars);
		}
	}
}

fsExpLastVarUsage(ex: FsExp, vars: Set<string>) -> Pair<FsExp, Set<string>> {
	switch(ex) {
		FsLambda(toplevel, closure, args, body, __): {
			p = fsStatLastVarUsage(body, makeSet());
			Pair(FsLambda(ex with body = p.first), vars);
		}
		FsCall(fn, args, __): {
			ps = foldr(args, Pair([], vars), \acc, x -> {
				p = fsExpLastVarUsage(x, acc.second);
				Pair(concat([p.first], acc.first), p.second);
			});
			fp = fsExpLastVarUsage(fn, ps.second);
			Pair(
				FsCall(ex with
					f = fp.first,
					args = ps.first
				),
				fp.second
			);
		}
		FsCallPrim(op, es, __): {
			ps = foldr(es, Pair([], vars), \acc, x -> {
				p = fsExpLastVarUsage(x, acc.second);
				Pair(concat([p.first], acc.first), p.second);
			});
			Pair(FsCallPrim(ex with es = ps.first), ps.second);
		}
		FsVar(name, traits,__): {
			switch (traits.kind) {
				FsVarGlobal(__): {
					Pair(ex, vars);
				}
				default: {
					Pair(
						FsVar(ex with traits = FsVarTraits(traits with lastUse = !containsSet(vars, name))), 
						insertSet(vars, name)
					);
				}
			}
		}
		default: Pair(ex, vars);
	}
}

// Traverse the AST straight and markup the first variable use as first

fsStatFirstVarUsage(ex: FsStat, vars: Set<string>) -> Pair<FsStat, Set<string>> {
	switch(ex) {
		FsIf(cond, s1, s2): {
			c = fsExpFirstVarUsage(cond, vars);
			p1 = fsStatFirstVarUsage(s1, c.second);
			p2 = fsStatFirstVarUsage(s2, c.second);
			Pair(
				FsIf(ex with 
					cond = c.first,
					s1 = p1.first,
					s2 = p2.first
				),
				mergeSets(p1.second, p2.second)
			);
		}
		FsSwitch(v, type, cases): {
			vars1 = insertSet(vars, v.name);
			cases_ps = map(cases, \c -> {
				p = fsStatFirstVarUsage(c.body, vars1);
				Pair(FsCase(c with body = p.first), p.second);
			});
			Pair(
				FsSwitch(ex with
					x = FsVar(v with traits = FsVarTraits(v.traits with firstUse = !containsSet(vars, v.name))),
					cases = map(cases_ps, \p -> p.first)
				),
				fold(cases_ps, vars1, \acc, p -> mergeSets(acc, p.second))
			);
		}
		FsSeq(ss): {
			ps = fold(ss, Pair([], vars), \acc, x -> {
				p = fsStatFirstVarUsage(x, acc.second);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			Pair(
				FsSeq(ex with ss = ps.first),
				ps.second
			);
		}
		FsAssign(to, what): {
			p1 = fsExpFirstVarUsage(what, vars);
			p2 = fsExpFirstVarUsage(to, vars);
			Pair(
				FsAssign(ex with
					to = p2.first,
					what = p1.first
				),
				mergeSets(p1.second, p2.second)
			);
		}
		FsMemory(op, e): {
			p = fsExpFirstVarUsage(e, vars);
			Pair(FsMemory(ex with e = p.first), p.second);
		}
		FsWrapExp(e): {
			p = fsExpFirstVarUsage(e, vars);
			Pair(FsWrapExp(ex with e = p.first), p.second);
		}
		FsRet(e): {
			p = fsExpFirstVarUsage(e, vars);
			Pair(FsRet(ex with e = p.first), p.second);
		}
		FsVarDef(v, e): {
			p = fsExpFirstVarUsage(e, vars);
			Pair(FsVarDef(ex with e = p.first), p.second);
		}
		FsTailCall(): {
			Pair(ex, vars);
		}
		FsVarDecl(var): {
			Pair(ex, vars);
		}
	}
}

fsExpFirstVarUsage(ex: FsExp, vars: Set<string>) -> Pair<FsExp, Set<string>> {
	switch(ex) {
		FsLambda(toplevel, closure, args, body, __): {
			p = fsStatFirstVarUsage(body, makeSet());
			Pair(FsLambda(ex with body = p.first), p.second);
		}
		FsCall(fn, args, __): {
			fp = fsExpFirstVarUsage(fn, vars);
			ps = fold(args, Pair([], fp.second), \acc, x -> {
				p = fsExpFirstVarUsage(x, acc.second);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			Pair(
				FsCall(ex with
					f = fp.first,
					args = ps.first
				),
				ps.second
			);
		}
		FsCallPrim(op, es, __): {
			ps = fold(es, Pair([], vars), \acc, x -> {
				p = fsExpFirstVarUsage(x, acc.second);
				Pair(concat(acc.first, [p.first]), p.second);
			});
			Pair(FsCallPrim(ex with es = ps.first), ps.second);
		}
		FsVar(name, traits,__): {
			switch (traits.kind) {
				FsVarGlobal(__): Pair(ex, vars);
				default:
					Pair(
						FsVar(ex with traits = FsVarTraits(traits with firstUse = !containsSet(vars, name))), 
						insertSet(vars, name)
					);
			}
		}
		default: Pair(ex, vars);
	}
}
