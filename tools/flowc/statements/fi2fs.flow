import tools/flowc/statements/fs_helpers;
import tools/flowc/manipulation/freevars;
import tools/flowc/manipulation/transform_exps;

export {
	// The variable pair second bool component tells, if a var was initialized, or is uninitialized (dangling pointer)
	// The non-initialized are markuped with the `FiVoid` init value
	fiExp2FsStat2(e : FiExp, names: FiGlobalNames, returns: bool, locals: Tree<string, Pair<FiVar, bool>>) -> FsStat;
	fiExp2FsExp2(e : FiExp, names: FiGlobalNames, locals: Tree<string, Pair<FiVar, bool>>) -> FsExp;
}

fiExp2FsStat2(e : FiExp, names: FiGlobalNames, returns: bool, locals: Tree<string, Pair<FiVar, bool>>) -> FsStat {
	wrap = \x -> if (returns) FsRet(x, -1, None()) else FsWrapExp(x, -1, None());
	switch (e) {
		FiSeq(es, __, start): {
			ss1 = mapi(es, \i, x ->
				if (i + 1 == length(es)) fiExp2FsStat2(x, names, returns, locals)
				else fiExp2FsStat2(x, names, false, locals)
			);
			foldri(ss1, wrap(FsConst(FiVoid(0), -1)), \i, acc, y ->
				if (i + 1 == length(ss1)) y else {
					fsSetNext(y, acc);
				}
			);
		}
		FiSwitch(v, vtype, cs, type, start): {
			FsSwitch(
				fiVar2FsVarUse(FsVar(v.name, v.type), names, locals), 
				switch (vtype) {
					FiTypeName(__,__): vtype;
					default: FiTypeName("", []);
				},
				map(cs, \c ->
					FsCase(c.struct, fsCaseStructArgs(c, names), fiExp2FsStat2(c.body, names, returns, locals), -1)
				), -1, None()
			);
		}
		FiLet(name, vtype, e1, e2, type, start): {
			// The void value of a variable means it is not initialized at this point
			var_is_initialized = switch (e1) {
				FiVoid(__): false;
				default: true;
			}
			FsLet(FsVar(name, vtype), false,
				fiExp2FsExp2(e1, names, locals),
				fiExp2FsStat2(e2, names, returns, setTree(locals, name, Pair(FiVar(name, vtype, start), var_is_initialized))),
				-1, None()
			);
		}
		FiIf(e1, e2, e3, type, start): {
			FsIf(
				fiExp2FsExp2(e1, names, locals),
				fiExp2FsStat2(e2, names, returns, locals), 
				fiExp2FsStat2(e3, names, returns, locals), -1, None()
			);
		}
		FiCallPrim(op, es, type, start): {
			switch (op) {
				FcAssignPrim(): {
					FsAssign(
						fiExp2FsExp2(es[0], names, locals),
						fiExp2FsExp2(es[1], names, locals), false, -1,
						if (!returns) None() else Some(FsRet(FsConst(FiVoid(start), -1), -1, None()))
					);
					
				}
				FcSetMutablePrim(field_name): {
					ind = fiFieldInd(es[0], field_name, names);
					FsAssign(
						FsCallPrim(FsFieldPrim(field_name, ind), [fiExp2FsExp2(es[0], names, locals)], fiExpType(es[1]), -1), 
						fiExp2FsExp2(es[1], names, locals), false, 1,
						if (!returns) None() else Some(FsRet(FsConst(FiVoid(start), -1), -1, None()))
					);
				}
				default: {
					wrap(fiExp2FsExp2(e, names, locals));
				}
			}
		}
		default: {
			wrap(fiExp2FsExp2(e, names, locals));
		}
	}
}

fiFieldInd(e: FiExp, field_name: string, names: FiGlobalNames) -> int {
	if (field_name == "structname") -1 else {
		switch (fiExpType(e)) {
			FiTypeName(struct_name, typars): {
				struct = lookupTreeDef(names.structs, struct_name, FiTypeStruct("", [], [], 0));
				switch (findi(struct.args, \arg -> arg.name == field_name)) {
					Some(i): i;
					None(): fail0("struct '" + struct_name + "' doesn't have a field '" + field_name + "'");
				}
			}
			default: -1;
		}
	}
}

fiVar2FsVarUse(v: FsVar, names: FiGlobalNames, locals: Tree<string, Pair<FiVar, bool>>) -> FsVarUse {
	kind = switch (lookupTree(locals, v.name)) {
		Some(p): {
			if (p.second) {
				FsVarLocal(false);
			} else {
				FsVarUninit();
			}
		}
		None(): {
			if (fiIsGlobalFunction(v.name, names)) {
				FsVarGlobalFunc(FsFunCall());
			} else {
				if (fiIsGlobalVariable(v.name, names)) {
					FsVarGlobalVar();
				} else {
					FsVarLocal(false);
				}
			}
		}
	}
	FsVarUse(v, FsVarInfo(kind, false, false), -1);
}

fiExp2FsExp2(x : FiExp, names: FiGlobalNames, locals: Tree<string, Pair<FiVar, bool>>) -> FsExp {
	switch (x) {
		FiSeq(es, type, start): {
			fail("must not happen: expression expected, got: FiSeq " + prettyFiExp(dummyPretty, x));
			FsConst(FiVoid(0), -1);
		}
		FiCast(ex, from, to, type, start): {
			FsCast(fiExp2FsExp2(ex, names, locals), from, type, -1);
		}
		FiCall(fn, args, type, start): {
			switch (fn) {
				FiVar(fn_name, fn_type,__): {
					FsCall(
						fiVar2FsVarUse(FsVar(fn_name, fn_type), names, locals),
						map(args, \arg -> fiExp2FsExp2(arg, names, locals)),
						type, -1
					);
				}
				default: {
					fail0("must not happen: variable expected, got: " + prettyFiExp(dummyPretty, x));
				}
			}
		}
		FiSwitch(v, vtype, cases, type, start): {
			fail("must not happen: expression expected, got: FiSwitch " + prettyFiExp(dummyPretty, x));
			FsConst(FiVoid(0), -1);
		}
		FiLambda(as, body, type, start): {
			free_vars = fifreevars(x);
			local_vars = buildSet(getTreeKeys(locals));
			closure = intersectSets(free_vars, local_vars);
			fs_args = map(as, \arg -> FsVar(arg.name, arg.type));
			closure_vars = map(set2array(closure), \name -> 
				switch (lookupTree(locals, name)) {
					Some(v): FsVar(v.first.name, v.first.type);
					None(): fail0("can't find type of a var: " + name);
				}
			);
			lambda_locals = fold(as, locals, \acc, arg -> setTree(acc, arg.name, Pair(FiVar(arg.name, arg.type, start), true)));
			lambda = FsLambda(closure_vars,fs_args, fiExp2FsStat2(body, names, true, lambda_locals), type, -1);
			FsClosure(map(closure_vars, \v -> fiVar2FsVarUse(v, names, locals)), lambda, FsMetaInfo(None(), false), -1);
		}
		FiLet(name, vtype, e1, e2, type, start): {
			fail(
				"must not happen: expression expected, got:\n" + 
				"FiLet " + prettyFiExp(dummyPretty, x) + "\n" +
				toStringFormatted(x)
			);
			FsConst(FiVoid(0), -1);
		}
		FiIf(e1, e2, e3, type, start): {
			fail("must not happen: expression expected, got: FiIf " + prettyFiExp(dummyPretty, x));
			FsConst(FiVoid(0), -1);
		}
		FiCallPrim(op, es, type, start): {
			switch (op) {
				FcAssignPrim(): {
					fail("must not happen: expression expected, got: FcAssignPrim " + prettyFiExp(dummyPretty, x));
					FsConst(FiVoid(0), -1);
				}
				FcSetMutablePrim(name): {
					fail("must not happen: expression expected, got: FcSetMutablePrim " + prettyFiExp(dummyPretty, x));
					FsConst(FiVoid(0), -1);
				}
				default: {
					FsCallPrim(fcPrim2FsPrim(x, names), map(es, \e -> fiExp2FsExp2(e, names, locals)), type, -1);
				}
			}
		}
		FiRequire(file, ex, type, start): {
			fail("must not happen: expression expected, got: FiRequire " + prettyFiExp(dummyPretty, x));
			FsConst(FiVoid(0), -1);
		}
		FiUnsafe(name, ex, type, start): {
			fail("must not happen: expression expected, got: FiUnsafe " + prettyFiExp(dummyPretty, x));
			FsConst(FiVoid(0), -1);
		}
		FiVar(name, type, start): {
			fiVar2FsVarUse(FsVar(name, type), names, locals);
		}
		FiString(s,__): {
			FsString(s, FsMetaInfo(None(), false), -1);
		}
		FiVoid(__): FsConst(x, -1);
		FiInt(__,__): FsConst(x, -1);
		FiBool(__,__): FsConst(x, -1);
		FiDouble(__,__): FsConst(x, -1);
	}
}

fcPrim2FsPrim(call: FiCallPrim, names: FiGlobalNames) -> FsPrim {
	switch (call.op) {
		FcOrPrim():  FcOrPrim();
		FcAndPrim(): FcAndPrim();
		FcNotPrim(): FcNotPrim();

		FcEqPrim():  FcEqPrim();
		FcNePrim():  FcNePrim();
		FcLePrim():  FcLePrim();
		FcGePrim():  FcGePrim();
		FcLtPrim():  FcLtPrim();
		FcGtPrim():  FcGtPrim();

		FcPlusPrim():  FcPlusPrim();
		FcMinusPrim(): FcMinusPrim();
		FcMulPrim():   FcMulPrim();
		FcDivPrim():   FcDivPrim();
		FcModPrim():   FcModPrim();
		FcNegPrim():   FcNegPrim();
		FcArrayPrim(): FsArrayPrim(FsMetaInfo(None(), false));
		FcIndexPrim(): FcIndexPrim();
		FcDerefPrim(): FcDerefPrim();
		FcAssignPrim(): fail0("FcAssignPrim has no Fs counterpart");
		FcRefPrim():   FsRefPrim(FsMetaInfo(None(), false));
		FcStructPrim(s): FsStructPrim(s, FsMetaInfo(None(), false));
		FcFieldPrim(field): {
			ind = fiFieldInd(call.es[0], field, names);
			FsFieldPrim(field, ind);
		}
		FcSetMutablePrim(name): fail0("FcSetMutablePrim has no Fs counterpart");
		FcCreateClosurePrim(__,__): fail0("FcCreateClosurePrim has no Fs counterpart");
		FcQuote():   fail0("FcQuote has no Fs counterpart");
		FcUnquote(): fail0("FcUnquote has no Fs counterpart");
	}
}

fsCaseStructArgs(c: FiCase, names: FiGlobalNames) -> [FsVar] {
	struct = lookupTreeDef(names.structs, c.struct, FiTypeStruct("", [], [], 0));
	mapi(c.argNames, \i, arg_name -> 
		FsVar(arg_name, struct.args[i].type)
	);
}
