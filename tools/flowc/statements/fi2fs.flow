import tools/flowc/statements/env;
import tools/flowc/manipulation/freevars;
import tools/flowc/memory/fm_helpers;

export {
	fiExp2FsStat(e : FiExp, returns: FsReturnPolicy, env: FsEnv, fn: string, is_toplevel: bool) -> FsStat;
	fiExp2FsExp(e : FiExp, env: FsEnv) -> Pair<FsExp, [FsStat]>;
}

fiExp2FsStat(e : FiExp, returns: FsReturnPolicy, env: FsEnv, fn: string, is_toplevel: bool) -> FsStat {
	wrap = \x -> switch (returns) {
		FsReturnToOuter():  FsRet(x, x.start);
		FsReturnNowhere():  FsWrapExp(x, x.start);
		FsReturnToLocal(v): FsAssign(v, x, e.start);
	}
	do_exp = \x -> fiExp2FsExp(x, env);
	switch (e) {
		FiSeq(es, __, start): {
			fsWrapSeq(concatA(mapi(es, \i, x -> 
				fsUnwrapSeq(fiExp2FsStat(x, if (i + 1 == length(es)) returns else FsReturnNowhere(), env, fn, is_toplevel))
			)));
		}
		FiCast(ex, from, to,__, start): {
			pair = do_exp(ex);
			fsWrapSeq(concat(pair.second, [wrap(
				FsCallPrim(FmCastPrim(from, to), [pair.first], to, start)
			)]));
		}
		FiCall(f, args, type, start): {
			args_pairs = map(args, do_exp);
			do_call = \ -> {
				f_pair = do_exp(f);
				fsWrapSeq(concat(
					concatA(concat(
						[f_pair.second], 
						map(args_pairs, \p -> p.second))
					), 
					[wrap(FsCall(f_pair.first, 
						map(args_pairs, \p -> p.first), type, start
					))]
				));
			}
			switch (f) {
				FiVar(nm,__,__): {
					if (nm != fn || returns != FsReturnToOuter()) do_call() else {
						switch (lookupTree(env.names.toplevel, fn)) {
							Some(func): {
								func_args = cast(func: FiDeclaration -> FiFunctionDec).lambda.args;
								assign_func_vars = filtermapi(args_pairs, \i, p -> {
									make_assign = \-> FsAssign(
										FsVar(func_args[i].name, true, ref false, func_args[i].type, start), 
										FsVar(func_args[i].name + "__tmp__", true, ref false, func_args[i].type, start), start
									);
									switch (p.first) {
										FsVar(name,__,__,__,__): if (name == env.args[i].name) None() else Some(make_assign());
										default: Some(make_assign());
									}
								});
								assing_and_tailcall = FsSeq(concat(assign_func_vars, [FsTailCall(start)]), FiTypeVoid(), start);
								fsWrapSeq(concat(
									concatA(map(args_pairs, \p -> p.second)),
									[foldi(args_pairs, assing_and_tailcall, \i, acc, p -> {
										make_let = \-> FsLet(
											FsVar(func_args[i].name + "__tmp__", true, ref false, func_args[i].type, start), 
											p.first, acc, func_args[i].type, start
										);
										switch (p.first) {
											FsVar(name,__,__,__,__): if (name == env.args[i].name) acc else make_let();
											default: make_let();
										}
									})]
								));
							}
							None(): fail0("function " + fn + " is not found");
						}
					}
				}
				default: do_call();
			}
		}
		FiSwitch(v, vtype, cs, type, start): {
			default_switch = \ -> FsSwitch(
				fiVar2FsVar(v.name, v.type, v.start, env), vtype,
				map(cs, \c -> {
					struct = lookupTreeDef(env.names.structs, c.struct, FiTypeStruct("", [], [], 0));
					struct_args = mapi(c.argNames, \i, arg_name -> FsVar(arg_name, true, ref false, struct.args[i].type, c.start));
					case_env = FsEnv(env with
						locals = fold(struct_args, env.locals, \acc, arg -> if (arg.name == "__") acc else 
							setTree(acc, arg.name, FsVar(arg.name, true, ref false, arg.type, c.start))
						)
					);
					FsCase(c.struct, struct_args, fiExp2FsStat(c.body, returns, case_env, fn, is_toplevel), c.start)
				}), 
				type, start
			);
			switch (vtype) {
				FiTypeName(typename,__): {
					if (containsKeyTree(env.names.unions, typename)) {
						default_switch();
					} else {
						switch (find(cs, \c -> c.struct == typename)) {
							Some(c): {
								struct = lookupTreeDef(env.names.structs, c.struct, FiTypeStruct("", [], [], 0));
								struct_args = mapi(c.argNames, \i, arg_name -> FiStructArg(arg_name, struct.args[i].type, struct.args[i].ismutable));
								case_env = FsEnv(env with
									locals = fold(struct_args, env.locals, \acc, arg -> if (arg.name == "__") acc else 
										setTree(acc, arg.name, FsVar(arg.name, true, ref false, arg.type, c.start))
									)
								);
								fiExp2FsStat(c.body, returns, case_env, fn, is_toplevel);
							}
							None(): {
								fail0("unmatched struct type '" + typename + "' in switch:\n" + prettyFiExp(dummyPretty, e));
							}
						}
					}
				}
				FiTypeFlow(): {
					default_switch();
				}
				default: {
					fail0("non-struct|union|flow type " + prettyFiType(dummyPretty, v.type, makeSet()) + " in switch:\n" + prettyFiExp(dummyPretty, e));
				}
			}
		}
		FiLambda(args, body, type, start): {
			free_vars = fifreevars(e);
			locals = buildSet(getTreeKeys(env.locals));
			closure = intersectSets(free_vars, locals);
			lambda_env = FsEnv(env with
				locals = foldSet(closure,
					fold(args, env.locals, \acc, arg -> 
						setTree(acc, arg.name, FsVar(arg.name, true, ref false, arg.type, start))
					),
					\acc, arg -> {
						v = lookupTreeDef(acc, arg, FsVar("", true, ref false, FiTypeVoid(), start));
						setTree(acc, arg, FsVar(arg, true, ref false, v.type, start));
					}
				)
			);
			closure_vars = map(set2array(closure), \name -> 
				switch (lookupTree(env.locals, name)) {
					Some(tp): tp;
					None(): fail0("can't find type of a var: " + name);
				}
			);
			wrap(FsLambda(is_toplevel, closure_vars, args, fiExp2FsStat(body, FsReturnToOuter(), lambda_env, fn, is_toplevel), type, start));
		}
		FiLet(name, vtype, e1, e2, type, start): {
			if (name == "__") {
				fiExp2FsStat(e2, returns, env, fn, is_toplevel);
			} else {
				let_var = FsVar(name, true, ref false, vtype, start);
				let_env = FsEnv(env with
					locals = setTree(env.locals, name, let_var)
				);
				if (fiExpIsFsExp(e1)) {
					e1_pair = do_exp(e1);
					fsWrapSeq(concat(e1_pair.second,
						[FsLet(let_var, e1_pair.first, fiExp2FsStat(e2, returns, let_env, fn, is_toplevel), type, start)]
					));
				} else {
					fsWrapSeq(concat3(
						[FsVarDecl(let_var, start)],
						fsUnwrapSeq(fiExp2FsStat(e1, FsReturnToLocal(let_var), let_env, fn, is_toplevel)),
						fsUnwrapSeq(fiExp2FsStat(e2, returns, let_env, fn, is_toplevel))
					));
				}
			}
		}
		FiIf(e1, e2, e3, type, start): {
			e1_pair = do_exp(e1);
			fsWrapSeq(concat(e1_pair.second,
				[FsIf(
					e1_pair.first, 
					fiExp2FsStat(e2, returns, env, fn, is_toplevel), 
					fiExp2FsStat(e3, returns, env, fn, is_toplevel), 
					type, start
				)]
			));
		}
		FiCallPrim(op, es, type, start): {
			es_pairs = map(es, do_exp);
			switch (op) {
				FcAssignPrim(): {
					fsWrapSeq(concat(
						concatA(map(es_pairs, \p -> p.second)), 
						[FsAssign(es_pairs[0].first, es_pairs[1].first, start), wrap(FiVoid(0))]
					));
				}
				FcSetMutablePrim(name): {
					fsWrapSeq(concat(
						concatA(map(es_pairs, \p -> p.second)), 
						[FsAssign(
							FsCallPrim(FmFieldPrim(name), [es_pairs[0].first], fsExpType(es_pairs[1].first), start), 
							es_pairs[1].first, start
						), wrap(FiVoid(0))]
					));
				}
				default: {
					fsWrapSeq(concat(
						concatA(map(es_pairs, \p -> p.second)), 
						[wrap(FsCallPrim(fcPrim2FsPrim(op), 
							map(es_pairs, \p -> p.first), type, start
						))]
					));
				}
			}
		}
		FiRequire(file, ex, type, start): {
			pair = do_exp(ex);
			fsWrapSeq(concat(pair.second, [wrap(
				FsCallPrim(FmRequirePrim(file), [pair.first], type, start)
			)]));
		}
		FiUnsafe(name, ex, type, start): {
			pair = do_exp(ex);
			fsWrapSeq(concat(pair.second, [wrap(
				FsCallPrim(FmUnsafePrim(name), [pair.first], type, start)
			)]));
		}
		FiVar(name, type, start): wrap(fiVar2FsVar(name, type, start, env));
		FiVoid(__):        wrap(e);
		FiDouble(__, __):  wrap(e);
		FiInt(__, __):     wrap(e);
		FiString(__, __):  wrap(e);
		FiBool(__, __):    wrap(e);
	}
}

fiExp2FsExp(e : FiExp, env: FsEnv) -> Pair<FsExp, [FsStat]> {
	do_exps = \x -> fiExp2FsExp(x, env);
	switch (e) {
		FiSeq(es, type, start): {
			if (length(es) == 0) {
				Pair(FiVoid(0), []);
			} else if (length(es) == 1) {
				do_exps(es[0]);
			} else {
				last = lastElement(es, FiVoid(0));
				other = take(es, length(es) - 1);
				last_p = do_exps(last);
				other_s = fsUnwrapSeq(fiExp2FsStat(FiSeq(other, type, start), FsReturnNowhere(), env, "", false));
				Pair(
					last_p.first,
					concat(other_s, last_p.second)
				);
			}
		}
		FiCast(ex, from, to,__, start): {
			pair = do_exps(ex);
			Pair(
				FsCallPrim(FmCastPrim(from, to), [pair.first], to, start),
				pair.second
			);
		}
		FiCall(f, args, type, start): {
			args_pairs = map(args, do_exps);
			f_pair = do_exps(f);
			Pair(
				FsCall(f_pair.first, 
					map(args_pairs, \p -> p.first), type, start
				),
				concatA(concat(
					[f_pair.second], 
					map(args_pairs, \p -> p.second)
				)), 
			);
		}
		FiSwitch(v, vtype, cases, type, start): {
			default_switch_stat = \return -> {
				cases_stats = map(cases, \c -> {
					struct = lookupTreeDef(env.names.structs, c.struct, FiTypeStruct("", [], [], 0));
					struct_args = mapi(c.argNames, \i, arg_name -> FsVar(arg_name, true, ref false, struct.args[i].type, c.start));
					case_env = FsEnv(env with 
						locals = fold(struct_args, env.locals, \acc, arg -> if (arg.name == "__") acc else 
							setTree(acc, arg.name, FsVar(arg.name, true, ref false, arg.type, c.start))
						)
					);
					case_stat = fiExp2FsStat(c.body, return, case_env, "", false);
					FsCase(c.struct, struct_args, case_stat, c.start);
				});
				FsSwitch(fiVar2FsVar(v.name, v.type, v.start, env), vtype, cases_stats, type, start);
			}
			if (type == FiTypeVoid()) {
				switch (vtype) {
					FiTypeName(typename,__): {
						switch_stat = if (containsKeyTree(env.names.unions, typename)) {
							default_switch_stat(FsReturnNowhere());
						} else {
							switch (find(cases, \c -> c.struct == typename)) {
								Some(c): {
									struct = lookupTreeDef(env.names.structs, c.struct, FiTypeStruct("", [], [], 0));
									struct_args = mapi(c.argNames, \i, arg_name -> FiStructArg(arg_name, struct.args[i].type, struct.args[i].ismutable));
									case_env = FsEnv(env with
										locals = fold(struct_args, env.locals, \acc, arg -> if (arg.name == "__") acc else 
											setTree(acc, arg.name, FsVar(arg.name, true, ref false, arg.type, c.start))
										)
									);
									fiExp2FsStat(c.body, FsReturnNowhere(), case_env, "", false);
								}
								None(): {
									fail0("unmatched struct type '" + typename + "' in switch:\n" + prettyFiExp(dummyPretty, e));
								}
							}
						}
						Pair(FiVoid(start), [switch_stat]);
					}
					FiTypeFlow(): {
						Pair(FiVoid(start), [default_switch_stat(FsReturnNowhere())]);
					}
					default: {
						fail0("non-struct|union|flow type " + prettyFiType(dummyPretty, v.type, makeSet()) + " in switch:\n" + prettyFiExp(dummyPretty, e));
					}
				}
			} else {
				tmp_var = FsVar("__switch_" + v.name + (if (^(env.tmp_sw) == 0) "" else "_" + i2s(^(env.tmp_sw))), true, ref false, type, v.start);
				env.tmp_sw := ^(env.tmp_sw) + 1;
				switch (vtype) {
					FiTypeName(typename,__): {
						switch_stat = if (containsKeyTree(env.names.unions, typename)) {
							default_switch_stat(FsReturnToLocal(tmp_var));
						} else {
							switch (find(cases, \c -> c.struct == typename)) {
								Some(c): {
									struct = lookupTreeDef(env.names.structs, c.struct, FiTypeStruct("", [], [], 0));
									struct_args = mapi(c.argNames, \i, arg_name -> FiStructArg(arg_name, struct.args[i].type, struct.args[i].ismutable));
									case_env = FsEnv(env with 
										locals = fold(struct_args, env.locals, \acc, arg -> if (arg.name == "__") acc else 
											setTree(acc, arg.name, FsVar(arg.name, true, ref false, arg.type, c.start))
										)
									);
									fiExp2FsStat(c.body, FsReturnToLocal(tmp_var), case_env, "", false);
								}
								None(): {
									fail0("unmatched struct type '" + typename + "' in switch:\n" + prettyFiExp(dummyPretty, e));
								}
							}
						}
						Pair(tmp_var, [FsVarDecl(tmp_var, start), switch_stat]);
					}
					FiTypeFlow(): {
						Pair(tmp_var, [FsVarDecl(tmp_var, start), default_switch_stat(FsReturnToLocal(tmp_var))]);
					}
					default: {
						fail0("non-struct|union|flow type " + prettyFiType(dummyPretty, v.type, makeSet()) + " in switch:\n" + prettyFiExp(dummyPretty, e));
					}
				}
			}
		}
		FiLambda(args, body, type, start): {
			free_vars = fifreevars(e);
			locals = buildSet(getTreeKeys(env.locals));
			closure = intersectSets(free_vars, locals);
			lambda_env = FsEnv(env with
				locals = foldSet(
					closure,
					fold(args, env.locals, \acc, arg -> 
						setTree(acc, arg.name, FsVar(arg.name, true, ref false, arg.type, start))
					), \acc, arg -> {
						v = lookupTreeDef(acc, arg, FsVar("", true, ref false, FiTypeVoid(), start));
						setTree(acc, arg, FsVar(arg, v.local, ref false, v.type, start));
					}
				)
			);
			closure_vars = map(set2array(closure), \name -> 
				switch (lookupTree(env.locals, name)) {
					Some(tp): tp;
					None(): fail0("can't find type of a var: " + name);
				}
			);
			Pair(FsLambda(false, closure_vars, args, fiExp2FsStat(body, FsReturnToOuter(), lambda_env, "", false), type, start), []);
		}
		FiLet(name, vtype, e1, e2, type, start): {
			if (name == "__") {
				do_exps(e2);
			} else {
				e1_pair = do_exps(e1);
				let_var = FsVar(name, true, ref false, vtype, start);
				let_env = FsEnv(env with
					locals = setTree(env.locals, name, let_var)
				);
				e2_pair = fiExp2FsExp(e2, let_env);
				Pair(
					e2_pair.first,
					concat(
						e1_pair.second, 
						[FsLet(let_var, e1_pair.first, fsWrapSeq(e2_pair.second), type, start)]
					)
				);
			}
		}
		FiIf(e1, e2, e3, type, start): {
			good_exp = \x -> fiExpIsFsExp(x) && !fiExpHasEffects(x, env.effects);
			e1_pair = do_exps(e1);
			e2_pair = do_exps(e2);
			e3_pair = do_exps(e3);
			if (good_exp(e1) && good_exp(e2) && good_exp(e3)) {
				Pair(
					FsCallPrim(FmIfPrim(), [e1_pair.first, e2_pair.first, e3_pair.first], type, start),
					concat3(e1_pair.second, e2_pair.second, e3_pair.second)
				);
			} else {
				tmp_var = FsVar("__if_" + (if (^(env.tmp_if) == 0) "" else "_" + i2s(^(env.tmp_if))), true, ref false, type, start);
				env.tmp_if := ^(env.tmp_if) + 1;
				Pair(
					tmp_var,
					concat(
						e1_pair.second,
						[FsVarDecl(tmp_var, start), FsIf(
							e1_pair.first,
							FsSeq(
								concat(e2_pair.second, [FsAssign(tmp_var, e2_pair.first, start)]), 
								type, start
							),
							FsSeq(
								concat(e3_pair.second, [FsAssign(tmp_var, e3_pair.first, start)]), 
								type, start
							),
							type, start
						)]
					)
				);
			}
		}
		FiCallPrim(op, es, type, start): {
			es_pairs = map(es, do_exps);
			switch (op) {
				FcAssignPrim(): {
					Pair(
						FiVoid(start),
						concat(
							concatA(map(es_pairs, \p -> p.second)),
							[FsAssign(es_pairs[0].first, es_pairs[1].first, start)]
						)
					);
				}
				FcSetMutablePrim(name): {
					Pair(
						FiVoid(start),
						concat(
							concatA(map(es_pairs, \p -> p.second)),
							[FsAssign(
								FsCallPrim(FmFieldPrim(name), [es_pairs[0].first], fsExpType(es_pairs[1].first), start),
								es_pairs[1].first, start
							)]
						)
					);
				}
				default: {
					Pair(
						FsCallPrim(fcPrim2FsPrim(op),
							map(es_pairs, \p -> p.first), type, start
						),
						concatA(map(es_pairs, \p -> p.second))
					);
				}
			}
		}
		FiRequire(file, ex, type, start): {
			pair = do_exps(ex);
			Pair(FsCallPrim(FmRequirePrim(file), [pair.first], type, start), pair.second);
		}
		FiUnsafe(name, ex, type, start): {
			pair = do_exps(ex);
			Pair(FsCallPrim(FmUnsafePrim(name), [pair.first], type, start), pair.second);
		}
		FiVar(name, type, start): Pair(fiVar2FsVar(name, type, start, env), []);
		FiVoid(__):        Pair(e, []);
		FiDouble(__, __):  Pair(e, []);
		FiInt(__, __):     Pair(e, []);
		FiString(__, __):  Pair(e, []);
		FiBool(__, __):    Pair(e, []);
	}
}

fcPrim2FsPrim(op: FcPrim) -> FmPrim {
	switch (op) {
		FcOrPrim():  FmOrPrim();
		FcAndPrim(): FmAndPrim();
		FcNotPrim(): FmNotPrim();

		FcEqPrim():  FmEqPrim();
		FcNePrim():  FmNePrim();
		FcLePrim():  FmLePrim();
		FcGePrim():  FmGePrim();
		FcLtPrim():  FmLtPrim();
		FcGtPrim():  FmGtPrim();

		FcPlusPrim():  FmPlusPrim();
		FcMinusPrim(): FmMinusPrim();
		FcMulPrim():   FmMulPrim();
		FcDivPrim():   FmDivPrim();
		FcModPrim():   FmModPrim();
		FcNegPrim():   FmNegPrim();
		FcArrayPrim(): FmArrayPrim();
		FcIndexPrim(): FmIndexPrim();
		FcDerefPrim(): FmDerefPrim();
		FcAssignPrim(): fail0("FcAssignPrim has no Fm counterpart");
		FcRefPrim(): FmRefPrim();
		FcStructPrim(s): FmStructPrim(s);
		FcFieldPrim(f): FmFieldPrim(f);
		FcSetMutablePrim(name): fail0("FcSetMutablePrim has no Fm counterpart");
		FcCreateClosurePrim(__,__): fail0("FcCreateClosurePrim has no Fm counterpart");
		FcQuote():   fail0("FcQuote has no Fm counterpart");
		FcUnquote(): fail0("FcUnquote has no Fm counterpart");
	}
}

fiVar2FsVar(name: string, type: FiType, start: int, env: FsEnv) -> FsVar {
	switch (lookupTree(env.locals, name)) {
		Some(v): v;
		None(): {
			FsVar(name, false, ref false, type, start);
		}
	}
}
