import tools/flowc/statements/fsexp;
import ds/set;

export {

FsVars(
	free: Set<string>,
	bound: Set<string>
);
fsExpFreevars(e : FsExp) -> FsVars;
fsStatFreevars(s : FsStat) -> FsVars;

}

fsExpFreevars(e : FsExp) -> FsVars {
	fsExpFreevarsBoundFree(e, FsVars(makeSet(), makeSet()));
}

fsExpFreevarsBoundFree(expr : FsExp, vars: FsVars) -> FsVars {
	fold_freevars = \es, acc -> fold(es, acc, \ac, e -> fsExpFreevarsBoundFree(e, ac));
	switch (expr) {
		FsLambda(args, e, __): {
			fsStatFreevarsBoundFree(e,
				FsVars(vars with bound = fold(args, vars.bound, \acc, arg -> insertSet(acc, arg.name)))
			);
		}
		FsCall(f, es, __): {
			fold_freevars(es, fsExpFreevarsBoundFree(f, vars));
		}
		FiVar(x, __,__):  {
			if (containsSet(vars.bound, x)) vars else FsVars(vars with free = insertSet(vars.free, x));
		}
		FsTernary(e1, e2, e3, __): fold_freevars([e1, e2, e3], vars);
		FsCast(e, __, __):         fsExpFreevarsBoundFree(e, vars);
		FsCallPrim(__, es, __):    fold_freevars(es, vars);
        FsRequire(__, e, __):      fsExpFreevarsBoundFree(e, vars);
        FsUnsafe(__, fb, __):      fsExpFreevarsBoundFree(fb, vars);
		FiConst():                 vars;
	}
}

fsStatFreevars(s : FsStat) -> FsVars {
	fsStatFreevarsBoundFree(s, FsVars(makeSet(), makeSet()));
}

fsStatFreevarsBoundFree(stat : FsStat, vars: FsVars) -> FsVars {
	fold_freevars = \es, acc -> fold(es, acc, \ac, e -> fsStatFreevarsBoundFree(e, ac));
	switch (stat) {
		FsLet(x, __, e): {
			fsExpFreevarsBoundFree(e, FsVars(vars with bound = insertSet(vars.bound, x)));
		}
		FsIf(cond, e1, e2, __):  {
			fold_freevars([e1, e2], fsExpFreevarsBoundFree(cond, vars));
		}
		FsSwitch(e, cs, __):  {
			fold(cs, fsExpFreevarsBoundFree(e, vars), \acc, c -> 
				fsStatFreevarsBoundFree(c.body, acc)
			);
		}
		FsSeq(es, __): fold_freevars(es, vars);
		FsWrap(e): fsExpFreevarsBoundFree(e, vars);
		FsRet(e): fsExpFreevarsBoundFree(e, vars);
		FsVarDecl(x,__): {
			FsVars(vars with bound = insertSet(vars.bound, x));
		}
		FsAssign(x, __, e): {
			fsExpFreevarsBoundFree(e, FsVars(vars with bound = insertSet(vars.bound, x)));
		}
	}
}
