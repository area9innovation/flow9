import ds/array;
import tools/flowc/statements/fs_helpers;
import tools/flowc/manipulation/common;

export {
	fsStatMap(s: FsStat, trans_s: (FsStat) -> FsStat, trans_e: (FsExp) -> FsExp) -> FsStat;
	fsExpMap(e: FsExp, trans_s: (FsStat) -> FsStat, trans_e: (FsExp) -> FsExp) -> FsExp;

	fsStatIter(s: FsStat, trans_s: (FsStat) -> void, trans_e: (FsExp) -> void) -> void;
	fsExpIter(e: FsExp, trans_s: (FsStat) -> void, trans_e: (FsExp) -> void) -> void;

	FsTraverseEnv(
		parents: List<FsAll>,
		locals: Tree<string, FsVar>,
		args: Tree<string, FsVar>,
		lets: Tree<string, FsVar>,
	);

	//fsMap(s: FsAll, fn: (FsAll, FsTraverseEnv) -> FsAll, order: AstTraverseOrder) -> FsAll;

	//fsFoldMap(s: FsAll, acc: ?, fn: (FsAll, FsTraverseEnv, ?) -> Pair<FsAll, ?>, order: AstTraverseOrder) -> Pair<FsAll, ?>;

/*
	fsStatFoldMap(
		s: FsStat, acc: ?, 
		fn_s: (FsStat, ?) -> Pair<FsStat, ?>, 
		fn_e: (FsExp, ?) -> Pair<FsExp, ?>,
		order: AstTraverseOrder
	) -> Pair<FsStat, ?>;
	fsExpFoldMap(
		e: FsExp, acc: ?, 
		fn_s: (FsStat, ?) -> Pair<FsStat, ?>, 
		fn_e: (FsExp, ?) -> Pair<FsExp, ?>,
		order: AstTraverseOrder
	) -> Pair<FsExp, ?>;

	fsFoldMap(s: FsAll, acc: ?, fn: (FsAll, ?) -> Pair<FsAll, ?>, order: AstTraverseOrder) -> Pair<FsAll, ?>;*/
}

fsStatMap(s: FsStat, trans_s: (FsStat) -> FsStat, trans_e: (FsExp) -> FsExp) -> FsStat {
	trans_s(switch (s) {
		FsIf(cond, s1, s2): {
			FsIf(s with
				cond = fsExpMap(cond, trans_s, trans_e),
				s1 = fsStatMap(s1, trans_s, trans_e),
				s2 = fsStatMap(s2, trans_s, trans_e)
			);
		}
		FsSwitch(x, sw_type, cases): {
			FsSwitch(s with 
				cases = map(cases, \c -> FsCase(c with body = fsStatMap(c.body, trans_s, trans_e)))
			);
		}
		FsSeq(ss): {
			FsSeq(s with 
				ss = map(ss, \x -> fsStatMap(x, trans_s, trans_e))
			);
		}
		FsLet(__,__, e1, s1): {
			FsLet(s with 
				e = fsExpMap(e1, trans_s, trans_e),
				s = fsStatMap(s1, trans_s, trans_e),
			);
		}
		FsWrapExp(e): {
			FsWrapExp(s with e = fsExpMap(e, trans_s, trans_e));
		}
		FsRet(e): {
			FsRet(s with e = fsExpMap(e, trans_s, trans_e));
		}
		/*FsTailCall(args): {
			FsTailCall(s with args = map(args, \x -> fsExpMap(x, trans_s, trans_e)));
		}*/
		FsTailCall(): {
			s;
		}
		FsVarDecl(var): {
			s;
		}
		FsVarDef(v, e): {
			FsVarDef(s with e = fsExpMap(e, trans_s, trans_e));
		}
		FsAssign(to, what): {
			FsAssign(s with 
				to = fsExpMap(to, trans_s, trans_e),
				what = fsExpMap(what, trans_s, trans_e)
			);
		}
		FsMemory(op, e): {
			FsMemory(s with e = fsExpMap(e, trans_s, trans_e));
		}
	});
}

fsExpMap(ex: FsExp, trans_s: (FsStat) -> FsStat, trans_e: (FsExp) -> FsExp) -> FsExp {
	trans_e(switch(ex) {
		FsLambda(__,__, body, __): {
			FsLambda(ex with body = fsStatMap(body, trans_s, trans_e));
		}
		FsCall(fn, args, __): {
			FsCall(ex with 
				f = fsExpMap(fn, trans_s, trans_e),
				args = map(args, \x -> fsExpMap(x, trans_s, trans_e))
			);
		}
		FsCallPrim(op, es, __): {
			FsCallPrim(ex with es = map(es, \x -> fsExpMap(x, trans_s, trans_e)));
		}
		FsCast(e, from, type): {
			FsCast(ex with e = fsExpMap(e, trans_s, trans_e));
		}
		FsVar(name,__,__): ex;
		FiConst(): ex;
	});
}

fsStatIter(s: FsStat, trans_s: (FsStat) -> void, trans_e: (FsExp) -> void) -> void {
	switch (s) {
		FsIf(cond, s1, s2): {
			fsExpIter(cond, trans_s, trans_e);
			fsStatIter(s1, trans_s, trans_e);
			fsStatIter(s2, trans_s, trans_e);
		}
		FsSwitch(x, sw_type, cases): {
			fsExpIter(x, trans_s, trans_e);
			iter(cases, \c -> fsStatIter(c.body, trans_s, trans_e));
		}
		FsSeq(ss): { 
			iter(ss, \x -> fsStatIter(x, trans_s, trans_e));
		}
		FsLet(__,__, def, body): { 
			fsExpIter(def, trans_s, trans_e);
			fsStatIter(body, trans_s, trans_e);
		}
		FsWrapExp(e): {
			fsExpIter(e, trans_s, trans_e);
		}
		FsRet(e): {
			fsExpIter(e, trans_s, trans_e);
		}
		/*FsTailCall(args): { 
			iter(args, \arg -> fsExpIter(arg, trans_s, trans_e));
		}*/
		FsTailCall(): {
		}
		FsVarDecl(var): { 
			fsExpIter(var, trans_s, trans_e);
		}
		FsVarDef(v, e): {
			fsExpIter(v, trans_s, trans_e);
			fsExpIter(e, trans_s, trans_e);
		}
		FsAssign(to, what): {
			fsExpIter(to, trans_s, trans_e);
			fsExpIter(what, trans_s, trans_e);
		}
		FsMemory(op, e): {
			fsExpIter(e, trans_s, trans_e);
		}
	}
	trans_s(s);
}

fsExpIter(ex: FsExp, trans_s: (FsStat) -> void, trans_e: (FsExp) -> void) -> void {
	switch(ex) {
		FsLambda(__,__, body, __): {
			fsStatIter(body, trans_s, trans_e);
		}
		FsCall(fn, args, __): {
			fsExpIter(fn, trans_s, trans_e);
			iter(args, \x -> fsExpIter(x, trans_s, trans_e));
		}
		FsCallPrim(op, es, __): {
			iter(es, \x -> fsExpIter(x, trans_s, trans_e));
		}
		FsCast(e,__,__): {
			fsExpIter(e, trans_s, trans_e);
		}
		FsVar(name,__,__): { }
		FiConst(): { }
	};
	trans_e(ex);
}

/*
fsFoldMap(e: FsAll, acc: ?, fn: (FsAll, FsTraverseEnv, ?) -> Pair<FsAll, ?>, order: AstTraverseOrder) -> Pair<FsAll, ?> {
	fsDoFoldMap(e, 
		FsTraverseEnv(makeList(), makeTree(), makeTree(), makeTree()),
		acc, fn, order
	);
}

fsDoFoldMap(e: FsAll, env: FsTraverseEnv, acc: ?, fn: (FsAll, FsTraverseEnv, ?) -> Pair<FsAll, ?>, order: AstTraverseOrder) -> Pair<FsAll, ?> {
	if (order.argsFirst) {
		env1 = FsTraverseEnv(env with parents = Cons(e, env.parents));
		p = fsDoFoldMapArgs(e, env1, acc, fn, order);
		fn(p.first, env, p.second);
	} else {
		p = fn(e, env, acc);
		env1 = FsTraverseEnv(env with parents = Cons(p.first, env.parents));
		fsDoFoldMapArgs(p.first, env1, p.second, fn, order);
	}
}

fsDoFoldMapArgs(
	e: FsAll, env: FsTraverseEnv, acc: ?, 
	fn: (FsAll, FsTraverseEnv, ?) -> Pair<FsAll, ?>,
	order: AstTraverseOrder
) -> ? {
	switch (s) {
		FsIf(cond, s1, s2): {
			if (order.direct) {
				p_cond = fsDoFoldMap(cond, env, acc, fn, order);
				p_s1 = fsDoFoldMap(p_cond.first, env, p_cond.second, fn, order);
				p_s2 = fsDoFoldMap(p_s1.first, env, p_s1.second, fn, order);
				Pair(FsIf(p_cond.first, p_s1.first, p_s2.first), p_s2.second);
			} else {
				p_s2 = fsDoFoldMap(p_s1.first, env, p_s1.second, fn, order);
				p_s1 = fsDoFoldMap(p_cond.first, env, p_cond.second, fn, order);
				p_cond = fsDoFoldMap(cond, env, acc, fn, order);
				Pair(FsIf(p_cond.first, p_s1.first, p_s2.first), p_s2.second);
			}
		}
		FsSwitch(x, sw_type, cases): {
			fsDoFoldMap(x, trans_s, trans_e);
			iter(cases, \c -> fsDoFoldMap(c.body, trans_s, trans_e));
		}
		FsSeq(ss): { 
			iter(ss, \x -> fsDoFoldMap(x, trans_s, trans_e));
		}
		FsLet(v, e): {
			fsDoFoldMap(v, trans_s, trans_e);
			fsDoFoldMap(e, trans_s, trans_e);
		}
		FsWrapExp(e): {
			fsDoFoldMap(e, trans_s, trans_e);
		}
		FsRet(e): {
			fsDoFoldMap(e, trans_s, trans_e);
		}
		FsTailCall(): { }
		FsVarDecl(var): { 
			fsDoFoldMap(var, trans_s, trans_e);
		}
		FsAssign(to, what): {
			fsDoFoldMap(to, trans_s, trans_e);
			fsDoFoldMap(what, trans_s, trans_e);
		}
		FsMemory(op, e): {
			fsDoFoldMap(e, trans_s, trans_e);
		}
		FsLambda(__,__,__, body, __): {
			fsDoFoldMap(body, trans_s, trans_e);
		}
		FsCall(fn, args, __): {
			fsDoFoldMap(fn, trans_s, trans_e);
			iter(args, \x -> fsDoFoldMap(x, trans_s, trans_e));
		}
		FsCallPrim(op, es, __): {
			iter(es, \x -> fsDoFoldMap(x, trans_s, trans_e));
		}
		FsCast(e,__,__): {
			fsDoFoldMap(e, trans_s, trans_e);
		}
		FsVar(name,__,__): { }
		FiConst(): { }
	}
}
*/
/*
fsStatFoldMap(
	s: FsStat, acc: ?, 
	fn_s: (FsStat, ?) -> Pair<FsStat, ?>,
	fn_e: (FsExp, ?) -> Pair<FsExp, ?>
	) -> ? {
	switch (s) {
		FsIf(cond, s1, s2): {
			fsExpFold(cond, trans_s, trans_e);
			fsStatFold(s1, trans_s, trans_e);
			fsStatFold(s2, trans_s, trans_e);
		}
		FsSwitch(x, sw_type, cases): {
			fsExpFold(x, trans_s, trans_e);
			iter(cases, \c -> fsStatFold(c.body, trans_s, trans_e));
		}
		FsSeq(ss): { 
			iter(ss, \x -> fsStatFold(x, trans_s, trans_e));
		}
		FsLet(v, e): {
			fsExpFold(v, trans_s, trans_e);
			fsExpFold(e, trans_s, trans_e);
		}
		FsWrapExp(e): {
			fsExpFold(e, trans_s, trans_e);
		}
		FsRet(e): {
			fsExpFold(e, trans_s, trans_e);
		}
		FsTailCall(): { }
		FsVarDecl(var): { 
			fsExpFold(var, trans_s, trans_e);
		}
		FsAssign(to, what): {
			fsExpFold(to, trans_s, trans_e);
			fsExpFold(what, trans_s, trans_e);
		}
		FsMemory(op, e): {
			fsExpFold(e, trans_s, trans_e);
		}
	}
	trans_s(s);
}

fsExpFold(ex: FsExp, acc: ?, fn_s: (?, FsStat) -> ?, fn_e: (?, FsExp) -> ?) -> ? {
	switch(ex) {
		FsLambda(__,__,__, body, __): {
			fsStatFold(body, trans_s, trans_e);
		}
		FsCall(fn, args, __): {
			fsExpFold(fn, trans_s, trans_e);
			iter(args, \x -> fsExpFold(x, trans_s, trans_e));
		}
		FsCallPrim(op, es, __): {
			iter(es, \x -> fsExpFold(x, trans_s, trans_e));
		}
		FsCast(e,__,__): {
			fsExpFold(e, trans_s, trans_e);
		}
		FsVar(name,__,__): { }
		FiConst(): { }
	};
	trans_e(ex);
}


fsFoldMap(s: FsAll, acc: ?, fn: (FsAll, ?) -> Pair<FsAll, ?>, order: AstTraverseOrder) -> Pair<FsAll, ?> {
	if (order.argsFirst) {
		env1 = FiExpEnv(env with parents = Cons(e, env.parents));
		p = fiFoldMapExpArgs(e, env1, acc, fn, order);
		fn(p.first, env, p.second);
	} else {
		p = fn(e, env, acc);
		env1 = FiExpEnv(env with parents = Cons(p.first, env.parents));
		fiFoldMapExpArgs(p.first, env1, p.second, fn, order);
	}
}

fsDoFoldMap(s: FsAll, acc: ?, fn: (FsAll, ?) -> Pair<FsAll, ?>, order: AstTraverseOrder) -> Pair<FsAll, ?> {
	
}
*/