import ds/array;
import tools/flowc/statements/fs_helpers;
import tools/flowc/manipulation/common;

export {
	fsMap(s: FsAll, fn: (FsAll) -> FsAll, args_first: bool) -> FsAll;
	//fsMap2(s: FsAll, fn: ([?], FsAll) -> ?) -> ?;

	fsFold(s: FsAll, v: ?, fn: (?, FsAll) -> ?, merge: (?, ?) -> ?, args_first: bool) ->?;
	fsFoldr(s: FsAll, v: ?, fn: (?, FsAll) -> ?, merge: (?, ?) -> ?, args_first: bool) ->?;
	fsFold1(s: FsAll, v0: ?, pre: (?, FsAll) -> ?, post: (?, FsAll) -> ?, order: ([FsAll]) -> [FsAll], merge: (?, ?) -> ?) -> ?;
}

fsMap(a: FsAll, f: (FsAll) -> FsAll, args_first: bool) -> FsAll {
	map_exp = \x -> cast(fsMap(x, f, args_first): FsAll -> FsExp);
	map_stat = \x -> cast(fsMap(x, f, args_first): FsAll -> FsStat);
	map_var = \x -> cast(fsMap(x, f, args_first): FsAll -> FsVarUse);
	do_args = \s -> switch (s) {
		FsIf(cond, s1, s2,__):
			FsIf(s with cond = map_exp(cond), s1 = map_stat(s1), s2 = map_stat(s2));
		FsSwitch(x, sw_type, cases,__):
			FsSwitch(s with x = map_exp(x), cases = map(cases, \c -> FsCase(c with body = map_stat(c.body))));
		FsSeq(ss,__):
			FsSeq(s with ss = map(ss, \x -> map_stat(x)));
		FsLet(__, e1,__):
			FsLet(s with e = map_exp(e1));
		FsWrapExp(e,__):
			FsWrapExp(s with e = map_exp(e));
		FsRet(e,__):
			FsRet(s with e = map_exp(e));
		FsAssign(to, what,__):
			FsAssign(s with to = map_exp(to), what = map_exp(what));
		FsIncRc(__,e,__):
			FsIncRc(s with e = map_exp(e));
		FsDecRc(e,__):
			FsDecRc(s with e = map_exp(e));
		FsClosure(vars, lambda,__):
			FsClosure(s with vars = map(vars, map_var), lambda = cast(fsMap(lambda, f, args_first): FsAll -> FsLambda));
		FsLambda(__,__, body, __,__):
			FsLambda(s with body = map_stat(body));
		FsCall(fn, args, __,__):
			FsCall(s with f = map_exp(fn), args = map(args, \x -> map_exp(x)));
		FsCallPrim(__, es, __,__):
			FsCallPrim(s with es = map(es, \x -> map_exp(x)));
		FsTailCall(__, vals,__,__):
			FsTailCall(s with vals = map(vals, \x -> map_exp(x)));
		FsCast(e, from, type,__):
			FsCast(s with e = map_exp(e));
		FsVarUse(__,__,__): s;
		FsConst(__,__): s;
	}
	if (args_first) f(do_args(a)) else do_args(f(a));
}

fsFold(s: FsAll, v0: ?, f: (?, FsAll) -> ?, merge: (?, ?) -> ?, args_first: bool) -> ? {
	do_args = \w -> fold(fsArgs(s), w,
		\acc, as -> merge(acc, fold(as, w, \ac, x -> fsFold(x, ac, f, merge, args_first))),
	);
	if (args_first) f(do_args(v0), s) else do_args(f(v0, s));
}

fsFoldr(s: FsAll, v0: ?, f: (?, FsAll) -> ?, merge: (?, ?) -> ?, args_first: bool) -> ? {
	do_args = \w, -> fold(fsArgs(s), w, 
		\acc, as -> merge(acc, foldr(as, w, \ac, x -> fsFoldr(x, ac, f, merge, args_first)))
	);
	if (args_first) f(do_args(v0), s) else do_args(f(v0, s));
}

fsFold1(s: FsAll, v0: ?, pre: (?, FsAll) -> ?, post: (?, FsAll) -> ?, order: ([FsAll]) -> [FsAll], merge: (?, ?) -> ?) -> ? {
	v1 = pre(v0, s);
	v2 = fold(fsArgs(s), v1,
		\acc, as -> merge(acc, fold(order(as), v1, \ac, x -> fsFold1(x, ac, pre, post, order, merge)))
	);
	post(v2, s);
}

fsArgs(s: FsAll) -> [[FsAll]] {
	switch (s) {
		FsIf(cond, s1, s2,__):    [[cond, s1], [cond, s2]];
		FsSwitch(x,__, cs,__):    map(cs, \c -> [x, c.body]);
		FsSeq(ss,__):             [ss];
		FsLet(__, e1,__):         [[e1]];
		FsWrapExp(e1,__):         [[e1]];
		FsRet(e1,__):             [[e1]];
		FsAssign(to, what,__):    [[to, what]];
		FsIncRc(__,e1,__):        [[e1]];
		FsDecRc(e1,__):           [[e1]];
		FsClosure(vs,lam,__):     [concat(vs, [lam])];
		FsLambda(__,__,e1,__,__): [[e1]];
		FsCall(fn, args, __,__):  [concat([fn], args)];
		FsCallPrim(__,es,__,__):  [es];
		FsTailCall(__,vs,__,__):  [vs];
		FsCast(e1,__,__,__):      [[e1]];
		FsVarUse(__,__,__):       [[]];
		FsConst(__,__):           [[]];
	}
}

/*fsFold2(s: FsAll, v0: ?, 
	pre: (?, FsAll) -> ?, 
	post: (?, FsAll) -> ?, 
	order: ([FsAll]) -> [FsAll],
	init: (FsAll) -> ?, 
	merge: (?, ?) -> ?
) -> ? {
	switch (s) {
		FsLambda(__,__,body,__,__): {
			fsFold2(body, init(s), pre, post, order, init, merge);
		}
		default: {
			v1 = pre(v0, s);
			v2 = fold(fsArgs(s), v1,
				\acc, as -> merge(acc, fold(order(as), v1, \ac, x -> fsFold1(x, ac, pre, post, order, merge)))
			);
			post(v2, s);
		}
	}
}*/

/*
fsMap2(a: FsAll, f: ([?], FsAll) -> ?) -> ? {
	get_args = \s -> switch (s) {
		FsIf(cond, s1, s2,__):   [cond, s1, s2];
		FsSwitch(x,__, cs,__):   concat([x], map(cs, \c -> c.body));
		FsSeq(ss,__):            ss;
		FsLet(__, e1,__):        [e1];
		FsWrapExp(e1,__):        [e1];
		FsRet(e1,__):            [e1];
		FsAssign(to, what,__):   [to, what];
		FsModRc(__, e1,__):      [e1];
		FsDecRc(e1,__):          [e1];
		FsIncRc(e1,__,__):       [e1];
		FsLambda(__,__,e,__,__): [e];
		FsCall(fn, args, __,__): concat([fn], args);
		FsCallPrim(__,es,__,__): es;
		FsTailCall(__,vs,__,__): vs;
		FsCast(e1,__,__,__):     [e1];
		FsVarUse(__,__):         [];
		FsConst(__,__):          [];
	}
	f(map(get_args(a), \x -> fsMap2(x, f)), a);
}
*/