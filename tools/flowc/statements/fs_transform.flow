import ds/array;
import tools/flowc/statements/fs_helpers;
import tools/flowc/manipulation/common;

export {
	fsArgs(s: FsAll) -> [FsAll];
	fsMap(s: FsAll, fn: (FsAll) -> FsAll, args_first: bool) -> FsAll;
	fsIter(s: FsAll, fn: (FsAll) -> void, args_first: bool) -> void;
	fsFold(s: FsAll, v: ?, fn: (?, FsAll) -> ?, args_first: bool) -> ?;
	fsFold1(s: FsAll, v0: ?, pre: (?, FsAll) -> ?, post: (?, FsAll) -> ?, order: ([FsAll]) -> [FsAll]) -> ?;
	fsFold2(s: FsAll, v0: ?, pre: (?, FsAll) -> ?, post: (?, FsAll) -> ?, backwards: bool, merge: (?, ?) -> ?) -> ?;
	fsFold3(s: FsAll, v: ?, fn: (?, FsAll) -> ?, merge_branches: (?, ?) -> ?, init: () -> ?, copy: (?) -> ?, args_first: bool, backwards: bool) -> ?;

	fsFold4(s: FsAll, parent: Maybe<FsAll>, v: ?, fn: (?, FsAll, Maybe<FsAll>) -> ?, args_first: bool) -> ?;
	fsFold5(s: FsAll, v: ?, fn: (?, FsAll) -> ?, args_first: bool) -> ?;
}

fsMap(a: FsAll, f: (FsAll) -> FsAll, args_first: bool) -> FsAll {
	map_exp = \x -> cast(fsMap(x, f, args_first): FsAll -> FsExp);
	map_stat = \x -> cast(fsMap(x, f, args_first): FsAll -> FsStat);
	map_var = \x -> cast(fsMap(x, f, args_first): FsAll -> FsVarUse);
	do_args = \s -> switch (s) {
		FsIf(cond, s1, s2,__, n):
			FsIf(s with
				cond = map_exp(cond),
				s1 = map_stat(s1),
				s2 = map_stat(s2),
				next = maybeMap(n, map_stat)
			);
		FsSwitch(x, sw_type, cases,__, n):
			FsSwitch(s with 
				x = map_var(x),
				cases = map(cases, \c -> FsCase(c with body = map_stat(c.body))),
				next = maybeMap(n, map_stat)
			);
		FsLet(__, e1, s1,__, n):
			FsLet(s with
				e = map_exp(e1),
				s = map_stat(s1),
				next = maybeMap(n, map_stat)
			);
		FsFor(__, e1, s1,__,__, n):
			FsFor(s with
				e = map_exp(e1),
				s = map_stat(s1),
				next = maybeMap(n, map_stat)
			);
		FsWrapExp(e,__, n):
			FsWrapExp(s with
				e = map_exp(e),
				next = maybeMap(n, map_stat)
			);
		FsRet(e,__, n):
			FsRet(s with
				e = map_exp(e),
				next = maybeMap(n, map_stat)
			);
		FsTailCall(args,__, n): {
			FsTailCall(s with
				args = map(args, map_exp),
				next = maybeMap(n, map_stat)
			);
		}
		FsAssign(to, what, __,__, n):
			FsAssign(s with
				to = map_exp(to),
				what = map_exp(what),
				next = maybeMap(n, map_stat)
			);
		FsIncRc(__,__,__, n): {
			FsIncRc(s with next = maybeMap(n, map_stat));
		}
		FsDecRc(__,__,__, n): {
			FsDecRc(s with next = maybeMap(n, map_stat));
		}
		FsIntrinsicStat(__,__, n): {
			FsIntrinsicStat(s with next = maybeMap(n, map_stat));
		}
		FsClosure(vars, lambda,__,__):
			FsClosure(s with
				vars = map(vars, map_var),
				lambda = cast(fsMap(lambda, f, args_first): FsAll -> FsLambda)
			);
		FsLambda(__,__, body, __,__):
			FsLambda(s with body = map_stat(body));
		FsCall(fn, args, __,__):
			FsCall(s with f = map_var(fn), args = map(args, \x -> map_exp(x)));
		FsInlineExp(__,args, __,__):
			FsInlineExp(s with args = map(args, \x -> map_exp(x)));
		FsCallPrim(__, es, __,__):
			FsCallPrim(s with es = map(es, \x -> map_exp(x)));
		FsCast(e, from, type,__):
			FsCast(s with e = map_exp(e));
		FsVarUse(__,__,__): s;
		FsString(__,__,__): s;
		FsConst(__,__): s;
	}
	if (args_first) f(do_args(a)) else do_args(f(a));
}

fsIter(a: FsAll, f: (FsAll) -> void, args_first: bool) -> void {
	do_x = \x -> fsIter(x, f, args_first);
	do_args = \s -> switch (s) {
		FsIf(cond, s1, s2,__, n): {
			do_x(cond);
			do_x(s1);
			do_x(s2);
			maybeApply(n, do_x);
		}
		FsSwitch(x, sw_type, cases,__, n): {
			do_x(x);
			iter(cases, \c -> do_x(c.body));
			maybeApply(n, do_x);
		}
		FsLet(__, e1, s1,__, n): {
			do_x(e1);
			do_x(s1);
			maybeApply(n, do_x);
		}
		FsFor(__, e1, s1,__,__, n): {
			do_x(e1);
			do_x(s1);
			maybeApply(n, do_x);
		}
		FsWrapExp(e,__, n): {
			do_x(e);
			maybeApply(n, do_x);
		}
		FsRet(e,__,n): {
			do_x(e);
			maybeApply(n, do_x);
		}
		FsTailCall(args,__,n): {
			iter(args, \x -> do_x(x));
			maybeApply(n, do_x);
		}
		FsAssign(to, what,__,__, n): {
			do_x(to);
			do_x(what);
			maybeApply(n, do_x);
		}
		FsIncRc(__,e,__, n): {
			maybeApply(n, do_x);
		}
		FsDecRc(e,__,__, n): {
			maybeApply(n, do_x);
		}
		FsIntrinsicStat(__,__,n): {
			maybeApply(n, do_x);
		}
		FsClosure(vars, lambda,__,__): {
			iter(vars, do_x);
			do_x(lambda);
		}
		FsLambda(__,__, body, __,__):
			do_x(body);
		FsCall(fn, args, __,__): {
			do_x(fn);
			iter(args, \x -> do_x(x));
		}
		FsInlineExp(__,args, __,__): {
			iter(args, \x -> do_x(x));
		}
		FsCallPrim(__, es, __,__):
			iter(es, do_x);
		FsCast(e, from, type,__):
			do_x(e);
		FsVarUse(__,__,__): {}
		FsString(__,__,__): {}
		FsConst(__,__): {}
	}
	if (args_first) {
		do_args(a); f(a);	
	} else {
		f(a); do_args(a);
	}
}

fsFold(s: FsAll, v0: ?, f: (?, FsAll) -> ?, args_first: bool) -> ? {
	do_args = \w -> fold(fsArgs(s), w,
		\acc, x -> fsFold(x, acc, f, args_first),
	);
	if (args_first) f(do_args(v0), s) else do_args(f(v0, s));
}

fsFold4(s: FsAll, parent: Maybe<FsAll>, v0: ?, f: (?, FsAll, Maybe<FsAll>) -> ?, args_first: bool) -> ? {
	do_args = \w -> fold(fsArgs(s), w,
		\acc, x -> fsFold4(x, Some(s), acc, f, args_first),
	);
	if (args_first) f(do_args(v0), s, parent) else do_args(f(v0, s, parent));
}

fsFold5(s: FsAll, v0: ?, f: (?, FsAll) -> ?, args_first: bool) -> ? {
	do_args = \w -> fold(fsArgs1(s), w,
		\acc, x -> fsFold5(x, acc, f, args_first),
	);
	if (args_first) f(do_args(v0), s) else do_args(f(v0, s));
}

fsFold1(s: FsAll, v0: ?, pre: (?, FsAll) -> ?, post: (?, FsAll) -> ?, order: ([FsAll]) -> [FsAll]) -> ? {
	post(fold(order(fsArgs(s)), pre(v0, s), \acc, x -> fsFold1(x, acc, pre, post, order)), s);
}

fsArgs(s: FsAll) -> [FsAll] {
	as = switch (s) {
		FsIf(cond, s1, s2,__,__): [cond, s1, s2];
		FsSwitch(x,__,cs,__,__):  map(cs, \c -> c.body);
		FsLet(__, e1, s1,__,__):  [e1, s1];
		FsFor(__,e1,s1,__,__,__): [e1, s1];
		FsWrapExp(e1,__,__):      [e1];
		FsRet(e1,__,__):          [e1];
		FsTailCall(args,__,__):   args;
		FsIntrinsicStat(__,__,__):[];
		FsAssign(e, e1,__,__,__): [e, e1];
		FsIncRc(__,e1,__,__):     [];
		FsDecRc(e1,__,__,__):     [];
		FsClosure(vs,lam,__,__):  arrayPush(vs, lam);
		FsLambda(__,__,e1,__,__): [e1];
		FsCall(fn, args, __,__):  concat([fn], args);
		FsCallPrim(__,es,__,__):  es;
		FsInlineExp(__,es,__,__): es;
		FsCast(e1,__,__,__):      [e1];
		FsVarUse(__,__,__):       [];
		FsString(__,__,__):       [];
		FsConst(__,__):           [];
	}
	switch (s) {
		FsStat(): eitherMap(s.next, \n -> arrayPush(as, n), as);
		default: as;
	}
}

fsArgs1(s: FsAll) -> [FsAll] {
	as = switch (s) {
		FsIf(cond, s1, s2,__,__): [cond, s1, s2];
		FsSwitch(x,__,cs,__,__):  map(cs, \c -> c.body);
		FsLet(__, e1, s1,__,__):  [e1, s1];
		FsFor(__,e1,s1,__,__,__): [e1, s1];
		FsWrapExp(e1,__,__):      [e1];
		FsRet(e1,__,__):          [e1];
		FsTailCall(args,__,__):   args;
		FsIntrinsicStat(__,__,__):[];
		FsAssign(e, e1,__,__,__): [e, e1];
		FsIncRc(__,e1,__,__):     [];
		FsDecRc(e1,__,__,__):     [];
		FsClosure(vs,__,__,__):   vs;
		FsLambda(__,__,e1,__,__): [e1];
		FsCall(fn, args, __,__):  concat([fn], args);
		FsCallPrim(__,es,__,__):  es;
		FsInlineExp(__,es,__,__): es;
		FsCast(e1,__,__,__):      [e1];
		FsVarUse(__,__,__):       [];
		FsString(__,__,__):       [];
		FsConst(__,__):           [];
	}
	switch (s) {
		FsStat(): eitherMap(s.next, \n -> arrayPush(as, n), as);
		default: as;
	}
}

fsFold2(s: FsAll, v: ?, pre: (?, FsAll) -> ?, post: (?, FsAll) -> ?, backwards: bool, merge: (?, ?) -> ?) -> ? {
	v0 = if (!backwards) v else {
		switch (s) {
			FsStat(): eitherMap(s.next, \n -> fsFold2(n, v, pre, post, backwards, merge), v);
			default: v;
		}
	}
	v1 = pre(v0, s);
	order = \as -> if (backwards) reverseA(as) else as;
	args = fsArgs2(s);
	v2 = if (length(args) == 1) {
		fold(order(args[0]), v1, \ac, x -> fsFold2(x, ac, pre, post, backwards, merge));
	} else {
		fold(args, v1,
			\acc, as -> merge(acc, fold(order(as), v1, \ac, x -> fsFold2(x, ac, pre, post, backwards, merge)))
		);
	}
	v3 = post(v2, s);
	if (backwards) v3 else {
		switch (s) {
			FsStat(): eitherMap(s.next, \n -> fsFold2(n, v3, pre, post, backwards, merge), v3);
			default: v3;
		}
	}
}

fsArgs2(s: FsAll) -> [[FsAll]] {
	switch (s) {
		FsIf(cond, s1, s2,__,__): [[cond, s1], [cond, s2]];
		FsSwitch(x,__,cs,__,__):  map(cs, \c -> [x, c.body]);
		FsLet(__, e1, s1,__,__):  [[e1, s1]];
		FsFor(__,e1,s1,__,__,__): [[e1, s1]];
		FsWrapExp(e1,__,__):      [[e1]];
		FsRet(e1,__,__):          [[e1]];
		FsTailCall(args,__,__):   [args];
		FsIntrinsicStat(__,__,__):[];
		FsAssign(e, e1,__,__,__): [[e, e1]];
		FsIncRc(__,e1,__,__):     [[]];
		FsDecRc(e1,__,__,__):     [[]];
		FsClosure(vs,lam,__,__):  [concat(vs, [lam])];
		FsLambda(__,__,e1,__,__): [[e1]];
		FsCall(fn, args, __,__):  [concat([fn], args)];
		FsInlineExp(__,as,__,__): [as];
		FsCallPrim(__,es,__,__):  [es];
		FsCast(e1,__,__,__):      [[e1]];
		FsVarUse(__,__,__):       [[]];
		FsString(__,__,__):       [[]];
		FsConst(__,__):           [[]];
	}
}

fsFold3(s: FsAll, v: ?, 
	fn: (?, FsAll) -> ?, 
	merge_branches: (?, ?) -> ?,
	init: () -> ?,
	copy: (?) -> ?,
	args_first: bool, backwards: bool
) -> ? {
	args = fsArgs2(s);
	// Fold alongside a sequential execution
	do_seq = \v1, as -> fold(
		if (backwards) reverseA(as) else as, v1, 
		\ac, x -> fsFold3(x, ac, fn, merge_branches, init, copy, args_first, backwards)
	);
	// Fold alongside a forking of executions - branching.
	do_choice = if (length(args) == 1) {
		\v1 -> do_seq(v1, args[0]);
	} else {
		\v1 -> fold(args, copy(v1),
			\acc, as -> merge_branches(acc, do_seq(copy(v1), as))
		);
	}
	do_job = \v1 -> if (args_first) {
		fn(do_choice(v1), s);
	} else {
		do_choice(fn(v1, s));
	}
	v0 = if (!backwards) v else {
		switch (s) {
			FsStat(): eitherMap(s.next, \n -> fsFold3(n, v, fn, merge_branches, init, copy, args_first, backwards), v);
			default: v;
		}
	}
	// In Lambda case a new acc is created.
	v1 = switch (s) {
		FsLambda(__,__,__,__,__): {
			do_job(init());
			v0;
		}
		default: {
			do_job(v0);
		} 
	}
	if (backwards) v1 else {
		switch (s) {
			FsStat(): eitherMap(s.next, \n -> fsFold3(n, v1, fn, merge_branches, init, copy, args_first, backwards), v1);
			default: v1;
		}
	}
}
