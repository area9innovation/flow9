import tools/flowc/incremental/fiexp;
//import tools/flowc/memory/fmexp;

export {
	// Supertype for all statements/expressions
	FsAll ::= FsStat, FsExp;

	// General control-flow statements
	FsStat ::= FsIf, FsSwitch, FsSeq, FsAtomic;

		FsIf(cond: FsExp, s1: FsStat, s2: FsStat, id: int);
		FsSwitch(x: FsExp, switchType: FiType, cases: [FsCase], id: int);
			FsCase(struct: string, args: [FsVar], body: FsStat, id: int);
		FsSeq(ss: [FsStat], id: int);

	// Statements, which doesn't contain other statements
	FsAtomic ::= FsWrapExp, FsRet, FsLet, FsAssign, FsDecRc;

		FsWrapExp(e: FsExp, id: int);
		FsRet(e: FsExp, id: int);
		FsLet(var: FsVar, e: FsExp, id: int);
		FsAssign(to: FsExp, what: FsExp, id: int);
		FsDecRc(e: FsExp, id: int);

	// Expressions (returns value)
	FsExp ::= FsLambda, FsCall, FsCallPrim, FsTailCall, FsCast, FsVarUse, FsConst;

		FsLambda(closure: [FsVarUse], args: [FsVar], body: FsStat, type: FiTypeFunction, id: int);
		FsCall(f: FsExp, args: [FsExp], type: FiType, id: int);
		FsCallPrim(op: FsPrim, es: [FsExp], type: FiType, id: int);
		FsTailCall(args: [FsVar], vals: [FsExp], type: FiType, id: int);
		FsCast(e: FsExp, from: FiType, type: FiType, id: int);
		FsVarUse(var: FsVar, incRc: bool, id: int);
		FsConst(const: FiConst, id: int);

	FsVar(name: string, type: FiType);

	FsPrim ::= 
		FsOrPrim,    FsAndPrim,   FsNotPrim,   FsEqPrim,      FsNePrim, 
		FsLePrim,    FsGePrim,    FsLtPrim,    FsGtPrim,      FsPlusPrim, 
		FsMinusPrim, FsMulPrim,   FsDivPrim,   FsModPrim,     FsNegPrim,
		FsArrayPrim, FsIndexPrim, FsDerefPrim, FsRefPrim,     FsStructPrim, 
		FsFieldPrim, FsReusePrim, FsIfPrim,    FsRequirePrim, FsUnsafePrim;
		

		FsOrPrim();    FsAndPrim();   FsNotPrim();   FsEqPrim();  FsNePrim(); 
		FsLePrim();    FsGePrim();    FsLtPrim();    FsGtPrim();  FsPlusPrim(); 
		FsMinusPrim(); FsMulPrim();   FsDivPrim();   FsModPrim(); FsNegPrim();
		FsArrayPrim(); FsIndexPrim(); FsDerefPrim(); FsRefPrim(); FsIfPrim();

		FsStructPrim(struct: string); FsFieldPrim(field: string);
		FsRequirePrim(flowfile : string);
		FsUnsafePrim(name : string);

		FsReusePrim(struct: string, reuse: string);
}
