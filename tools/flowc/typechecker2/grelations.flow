import tools/flowc/typechecker2/gtype;

export {
	// This exposes the unifications we need to consider
	makeGRelations() -> GRelations;

	addGRelation(r : GRelations, lower : GType, upper : GType, pos : int) -> GRelations;

	getGUpperRelations(r : GRelations, from : GType) -> [GType];
	getGLowerRelations(r : GRelations, from : GType) -> [GType];
	getGRelationPositions(r : GRelations, from : GType) -> [int];

	transitiveGUpperRelations(r : GRelations, from : GType, seen : Set<GType>) ->  Set<GType>;
	transitiveGLowerRelations(r : GRelations, from : GType, seen : Set<GType>) ->  Set<GType>;

	// TODO: Add .dot output to help debug these graphs
}

makeGRelations() -> GRelations {
	GRelations(makeTree(), makeTree(), makeTree());
}
 
addGRelation(r : GRelations, from : GType, to : GType, pos : int) -> GRelations {
	GRelations(
		treePushToArrayUnique(r.uppers, from, to),
		treePushToArrayUnique(r.lowers, to, from),
		treePushToArrayUnique(
			treePushToArrayUnique(r.positions, to, pos),
			from, pos
		),
	);
}

getGUpperRelations(r : GRelations, from : GType) -> [GType] {
	getTreeArrayValue(r.uppers, from);
}

getGLowerRelations(r : GRelations, from : GType) -> [GType] {
	getTreeArrayValue(r.lowers, from);
}

getGRelationPositions(r : GRelations, from : GType) -> [int] {
	getTreeArrayValue(r.positions, from);
}

transitiveGUpperRelations(r : GRelations, from : GType, acc : Set<GType>) -> Set<GType> {
	if (containsSet(acc, from)) {
		acc
	} else {
		uppers = getGUpperRelations(r, from);
		fold(uppers, acc, \acc2, edge -> {
			nacc = insertSet(acc2, edge);
			transitiveGUpperRelations(r, edge, nacc)
		});
	}
}

transitiveGLowerRelations(r : GRelations, from : GType, acc : Set<GType>) -> Set<GType> {
	if (containsSet(acc, from)) {
		acc
	} else {
		uppers = getGLowerRelations(r, from);
		fold(uppers, acc, \acc2, edge -> {
			nacc = insertSet(acc2, edge);
			transitiveGLowerRelations(r, edge, nacc)
		});
	}
}
