import tools/flowc/typechecker2/gtype_util;
import tools/flowc/typechecker2/gtype_resolve;
import tools/flowc/typechecker2/fctype2gtype;
import tools/flowc/typechecker2/gtype2fctype;
import tools/flowc/typechecker2/gsubtype_graph;
import tools/flowc/typechecker/combine_types;
import tools/flowc/fcexp_description;
import tools/flowc/debug;
import tools/flowc/type_helpers;
import tools/flowc/typechecker/type_expect_helpers;
import ds/easygraph_utils;
import tools/flowc/typechecker/solve_expectations;

export {
	// This resolves the constraints for the named function or var
	gtypeSolve(name : string, tyvarIdGroup : IdGroup, pos : FcPosition, env : FcTypeEnv, subtype : GSubtypeGraph) -> GEnv;
}

/*
This works using a few passes algorithm:
First, recursively deconstruct all relations based on the expectations and build a graph
of requirements for each tyvar.
Then, for each tyvar, figure out how to resolve it by taking all information about it
into account.


Run with something like

	flowcpp tools/flowc/flowc.flow -- test=1 incremental=0 gtype=1 >out.flow

and then

	mkdot

to produce the graphviz relations if you use verbose=2 or above.

TODO:
- Consider a special graph type for our relations, which allows easy reversal
  and faster reachableClosure (which is the bottleneck)
- Consider to only recalculate tyvar bounds when edges are added to related
  nodes for a tyvar. I.e. keep tyvar bounds up-to-date.
- Field against union needs to check the type of the field as well
*/

gtypeSolve(name : string, tyvarIdGroup : IdGroup, pos : FcPosition, env : FcTypeEnv, subtype : GSubtypeGraph) -> GEnv {
	if (false) {
		dot = simpleGraph2dot(subtype.supertypes, "", [], 
			\n -> [DotLabel(n)], 
			\e -> []
		);
		setFileContent(name + "-subtypes.dot", dot);

		dot2 = simpleGraph2dot(subtype.fieldSupertypes, "", [], 
			\n -> [DotLabel(n)], 
			\e -> []
		);
		setFileContent(name + "-fieldsubtypes.dot", dot2);
		{}
	}

	expects = ^(env.local.expects);

	// Build a map from tyvar to typar
	typars : Tree<int, GType> = foldTree(^(env.local.typars), makeTree(), \typar, tyvar, acc : Tree<int, GType> -> {
		setTree(acc, tyvar.id, GTypePar(typar));
	});

	ge = GEnv(
		env, 
		tyvarIdGroup, 
		// While debugging, let us do this
		if (^(env.local.debugTyping) > 0 || getConfigParameter(env.program.acc.config.config, "verbose") == name) 3 else env.program.acc.config.verbose, 
		typars, 
		makeSet(), 
		makeSet(),
		makeSimpleGraph(),
		makeSimpleGraph(),
		subtype,
		extractNamesFromExpectations(expects)
	);

	if (ge.verbose >= 2)  {
		fcPrintln("\nType " + name);
	}

	onError = \m, info, description -> {
		poss = FcPosition(pos.file, info.start, info.end);
		addFcTypeError(env.program, FcError(name + ": " + (if (description != "") description + ": " else "") + m, [poss]));
	};

	gunify = \genv : GEnv, output : FcType, input : FcType, info : FcInfo2, description : () -> string -> {
		ot = fctype2gtype(genv.env, tyvarIdGroup, output);
		it = fctype2gtype(genv.env, tyvarIdGroup, input);
		unifyGType(genv, ot, it, info.start, \m -> onError(m, info, description()));
	}

	ge1 = foldList(expects, ge, \acc, e -> {
		// If verbose is on, we keep track of what expects to debug
		solveDebug = (ge.verbose >= 1 && containsSet(^(env.local.debugExpects), e)) || ge.verbose >= 3;
		if (solveDebug) {
			env.local.debugTyping := 1;
		};
		if (solveDebug || ge.verbose >= 3) {
			fcPrintln("\n// " + strReplace(fcExpect2string(acc.env, e), "\n", " "));
		}

		re = switch (e : FcTypeExpect) {
			FcLessOrEqual(e1, e2, d, info, ex): {
				gunify(acc, e1, e2, info, \ -> d + ": " + fcexpDescription(ex));
			}
			FcVerifyType(e1, e2, info): {
				et1 = gunify(acc, e1, e2, info, \ -> "");
				gunify(et1, e2, e1, info, \ -> "");
			}
			FcExpectField(field, ftype, struct, info, ex): {
				st = fctype2gtype(env, tyvarIdGroup, struct);
				gfield = GField(field, fctype2gtype(env, tyvarIdGroup, ftype));
				unifyGType(acc, gfield, st, info.start, \m -> onError(m, info, ""));
			}
			FcSetMutableField(stype, field, ftype, info): {
				st = fctype2gtype(acc.env, tyvarIdGroup, stype);
				ft = fctype2gtype(acc.env, tyvarIdGroup, ftype);
				gfield = GField(field, ft);
				unifyGType(acc, st, gfield, info.start, \m -> onError(m, info, "set mutable"));
			}
		}
		if (solveDebug) {
			env.local.debugTyping := 0;
		}
		re;
	});


	if (ge1.verbose >= 3) {
		saveGDot(ge1, name + "_orig");
	}

	// Go ahead and resolve it
	ge2 = resolveGGraph(ge1, name, \e, l, u, ps -> {
		fpos = if (isEmptySet(ps)) pos.start else set2array(ps)[0];
		unifyGType(e, l, u, fpos, \err -> {
			poss = mapSet(ps, \start -> FcPosition(pos.file, start, start));
			addFcTypeError(env.program, FcError(name + ": " + err, set2array(poss)));
		})
	}, \err, starts -> {
		poss = mapSet(starts, \start -> FcPosition(pos.file, start, start));
		addFcTypeError(env.program, FcError(name + ": " + err, set2array(poss)));
	});

	// Now, set the tyvars in the environment
	foldTree(ge2.tyvars, env, \tv, type, acc -> {
		setTyvar(acc, tv, gtype2fctype(ge2, type));
		acc;
	});

	if (ge2.verbose >= 2) {
		saveGDot(ge2, name);

		batch = getFileContent("mkdot.bat");
		batch0 = batch + "dot "+ name + ".dot -Tsvg -o" + name + ".svg\n";
		setFileContent("mkdot.bat", batch0);
		{}
	}

	// Run the final checks
	onError2 = \m, is -> {
		addFcTypeError(ge2.env.program, FcError(name + ": " + m, map(is, \i -> {
				FcPosition(pos.file, i.start, i.end)
			})
		));
	};
	applyList(^(ge2.env.local.checks), \e -> {
		checkFinalTypeExpect(ge2.env, e, onError2);
	});

	// And we have resolved all expectations
	ge2.env.local.expects := makeList();
	ge2.env.local.checks := makeList();

	ge2;
}

extractNamesFromExpectations(expectations : List<FcTypeExpect>) -> Set<string> {
	foldList(expectations, makeSet(), \acc, expect -> {
		switch (expect) {
			FcLessOrEqual(output, input, description, info, e): extractNamesFromFcType(extractNamesFromFcType(acc, output), input);
			FcExpectField(field, fieldType, t, info, e): extractNamesFromFcType(acc, fieldType);
			FcVerifyType(type, declared, info): extractNamesFromFcType(extractNamesFromFcType(acc, type), declared);
			FcSetMutableField(struct, field, ftype, info): extractNamesFromFcType(extractNamesFromFcType(acc, struct), ftype);
		}
	});
}

extractNamesFromFcType(acc : Set<string>, type : FcType) -> Set<string> {
	switch (type) {
		FcTypeVoid(info): acc;
		FcTypeBool(info): acc;
		FcTypeInt(info): acc;
		FcTypeDouble(info): acc;
		FcTypeString(info): acc;
		FcTypeNative(info): acc;
		FcTypeArray(t, info): extractNamesFromFcType(acc, t);
		FcTypeFunction(args, returnType, info): extractNamesFromFcTypes(extractNamesFromFcType(acc, returnType), map(args, \a -> a.type));
		FcTypeRef(t, info): extractNamesFromFcType(acc, t);
		FcTypeParameter(n, info): acc;
		FcTypeFlow(info): acc;
		FcTypeName(name, typeparameters, info): extractNamesFromFcTypes(insertSet(acc, name), typeparameters);
		FcTypeStruct(name, typars, args, info): extractNamesFromFcTypes(insertSet(acc, name), typars);
		FcTypeUnion(name, typeparameters, typenames, info): {
			nacc = extractNamesFromFcTypes(insertSet(acc, name), typeparameters);
			extractNamesFromFcTypes(nacc, typenames);
		}
		FcTypeVar(id, info): acc;
	}
}

extractNamesFromFcTypes(acc : Set<string>, types : [FcType]) -> Set<string> {
	fold(types, acc, extractNamesFromFcType)
}

saveGDot(env : GEnv, name : string) -> void {
	dot = simpleGraph2dot(env.relations, GTypeVar(0), [], 
		\n -> [DotLabel(gtype2string(env, n))], 
		\e -> [DotLabel(i2s(e))]
	);
	setFileContent(name + ".dot", dot);

	if (false) {
		dotr = simpleGraph2dot(env.reverseRelations, GTypeVar(0), [], 
			\n -> [DotLabel(gtype2string(env, n))], 
			\e -> [DotLabel(i2s(e))]
		);
		setFileContent(name + "r.dot", dotr);
		{}
	}

	{}
}

// Extract constraints against this left and right hand side.
// The pos is for error positions.
unifyGType(env : GEnv, output : GType, input : GType, pos : int, onError : (string) -> void) -> GEnv {
	if (output == input) {
		env;
	} else {
		tr = Pair(output, input);
		if (containsSet(env.seen, tr)) {
			env;
		} else {
			// We set an entry in the cache to avoid infinite recursion
			seen = insertSet(env.seen, tr);
			if (env.verbose >= 3)  {
				pt = \t -> gtype2string(env, t);
				printIndent(env.env, "Unify " + gtype2string(env, output) + " c= " + gtype2string(env, input));
			}
			env2 = GEnv(env with seen = seen);
			env3 = unifyAndRecurseGType(env2, output, input, pos, onError);

			if (env.verbose >= 3)  {
				printDedent(env.env, "Done " + gtype2string(env3, output) + " c= " + gtype2string(env3, input));
			}
			env3;
		}
	}
}

// Alright, these GTypes meet. We have to recursively spiral down on these guys
unifyAndRecurseGType(env : GEnv, left : GType, right : GType, pos : int, onError : (string) -> void) -> GEnv {
	if (env.verbose >= 4)  {
		printIndent(env.env, "Unify  " + gtype2string(env, left) + " c= " + gtype2string(env, right));
	}

	error = \ -> {
		onError(gtype2string(env, left) + " != " + gtype2string(env, right));
		env;
	}

	rest = \ -> {
		switch (right) {
			GTypeVar(rid): {
				// OK, if this is bound, we have to recurse into the beast
				bound = lookupTree(env.tyvars, rid);
				nenv = switch (bound) {
					None(): env;
					Some(btyvar): unifyGType(env, left, btyvar, pos, onError);
				}
				gunifyTyvar(nenv, left, right, pos, onError);
			}
			GFlow(): {
				explicit_flow = isConfigParameterTrue(env.env.program.acc.config.config, "explicit-flow");
				switch (left) {
					GFlow(): env;
					GBasicType(bt): {
						if (explicit_flow) {
							switch (bt) {
								FcTypeNative(__): env;
								default: {
									// We require explicit casts to/from flow
									error();
								}
							}
						} else env;
					}
					GArray(__): if (explicit_flow) error() else env;
					GSubType(__): if (explicit_flow) error() else env;
					GTypePar(id): if (explicit_flow) error() else env;
					GFunction(args, rt): if (explicit_flow) error() else env;
					GRef(type): if (explicit_flow) error() else env;
					GTypeVar(id): error();
				}
			}
			default: {
/*
				if (left == GFlow()) {
					// OK, we find all unbound tyvars and bind them to flow!
					tyvars = extractFTypeVars(env, right, makeSet());
					acc2 = foldSet(tyvars, env, \acc, tv -> {
						if (containsKeyTree(acc.tyvars, tv)) acc
						else setFTypeVar(acc, tv, left);
					});
					FEnvType(acc2, 
						if (kind == FUnifyLeft() || kind == FReduceLeft()) left else right
					);
				} else {
					onError(ftype2string(env, left) + "   and   " + ftype2string(env, right) + " are incompatible");
						// we do not support toString(FType) at the moment
						// + (if (env.verbose > 1) "\n   " + toString(left) + "\nvs " + toString(right) else ""));
					simplest = switch (left) {
						FBasicType(__): left;
						default: right;
					}
					FEnvType(env, simplest);
				}*/
				error();
			}
		}
	}

	nenv = switch (left) {
		GBasicType(ltype): {
			switch (right) {
				GBasicType(rtype): {
					if (isSameFcType(env.env, ltype, rtype, false)) {
						env;
					} else {
						error();
					}
				}
				default: rest();
			}
		}
		GFlow(): {
			explicit_flow = isConfigParameterTrue(env.env.program.acc.config.config, "explicit-flow");
			switch (right) {
				GFlow(): env;
				GBasicType(bt): {
					if (explicit_flow) {
						switch (bt) {
							FcTypeNative(__): env;
							default: {
								// We require explicit casts to/from flow
								error();
							}
						}
					} else env;
				}
				GArray(__): if (explicit_flow) error() else env;
				GSubType(__): if (explicit_flow) error() else env;
				GTypePar(id): if (explicit_flow) error() else env;
				GFunction(args, rt): if (explicit_flow) error() else env;
				GRef(type): if (explicit_flow) error() else env;
				GTypeVar(id): rest();
			}
		}
		GTypePar(lid): {
			switch (right) {
				GTypePar(rid): {
					if (lid == rid) {
						env;
					} else {
						strict = getConfigParameter(env.env.program.acc.config.config, "strict");
						if (strict == "1") {
							onError(lid + " and " + rid + " are distinct");
						}
						env;
					}
				}
				default: {
					rest();
				}
			}
		}
		GFunction(largs, lrt): {
			switch (right) {
				GFunction(rargs, rrt): {
					nenv = unifyGTypes(env, rargs, largs, pos, \i, e -> {
						if (i == -1) {
							onError(e + " function args")
						} else {
							onError("Arg #" + i2s(i) + ": " + e)
						}
					});
					unifyGType(nenv, lrt, rrt, pos, onError);
				}
				default: rest();
			}
		}
		GArray(ltype): {
			switch (right) {
				GArray(rtype): {
					unifyGType(env, ltype, rtype, pos, onError);
				}
				default: rest();
			}
		}
		GRef(ltype): {
			switch (right) {
				GRef(rtype): {
					unifyGType(env, ltype, rtype, pos, onError);
				}
				default: rest();
			}
		}
		GTypeVar(lid): {
			bound = lookupTree(env.tyvars, lid);
			nenv = switch (bound) {
				None(): env;
				Some(btyvar): unifyGType(env, btyvar, right, pos, onError);
			}
			gunifyTyvar(nenv, left, right, pos, onError);
		}
		GSubType(): {
			switch (right) {
				GBasicType(t): error();
				GFlow(): rest();
				GTypePar(id): rest();
				GFunction(args, rt): error();
				GArray(type): error();
				GRef(type): error();
				GTypeVar(rid): rest();
				GSubType(): {
					gunifySubType(env, left, right, pos, onError);
				}
			}
		}
	}

	if (env.verbose >= 4)  {
		printDedent(env.env, "Unify  " + gtype2string(env, left) + " c= " + gtype2string(env, right));
	}

	nenv;
}

unifyGTypes(env : GEnv, lefts : [GType], rights : [GType], pos : int, onError : (int, string) -> void) -> GEnv {
	if (length(lefts) != length(rights)) {
		onError(-1, "Got " + i2s(length(lefts)) + ", but expected " + i2s(length(rights)));
		env;
	} else {
		foldi(lefts, env, \i, acc, l -> {
			unifyGType(acc, l, rights[i], pos, \e -> onError(i + 1, e))
		})
	}
}

gunifyTyvar(env : GEnv, left : GType, right : GType, pos : int, onError : (string) -> void) -> GEnv {
	addTyvars = \ut, t -> extractGTypeVars(env, t, ut);
	if (env.verbose >= 3) {
		printStay(env.env, "Adding edge between  " + gtype2string(env, left) + " and " + gtype2string(env, right));
	}
	GEnv(
		env with 
		unresolvedTyvars = addTyvars(addTyvars(env.unresolvedTyvars, left), right),
		relations = addSimpleEdge(env.relations, left, right, pos, pos),
		reverseRelations = addSimpleEdge(env.reverseRelations, right, left, pos, pos)
	)
}

gunifySubType(env : GEnv, left : GSubType, right : GSubType, pos : int, onError : (string) -> void) -> GEnv {
	switch (left) {
		GNamed(lname, ltypars): {
			switch (right) {
				GNamed(rname, rtypars): {
					if (lname == rname) {
						// Do the typars
						// TODO: We could extend based on implicit polymorphism
						// See test1.
						unifyGTypes(env, ltypars, rtypars, pos, \i, e -> {
							if (i == -1) {
								onError(e + " type parameters")
							} else {
								onError("Type par #" + i2s(i) + ": " + e)
							}
						});
					} else {
						gunifyNamedTypes(env, left, right, pos, onError);
					}
				}
				GField(rname, rtype): {
					unifyGNamedAgainstField(env, left, right, pos, onError);
				}
			}
		}
		GField(lname, ltype): {
			switch (right) {
				GNamed(rname, rtypars): {
					unifyGFieldAgainstName(env, left, right, pos, onError);
				}
				default: {
					onError("TODO: Subtype " + gtype2string(env, left) + " c= " + gtype2string(env, right));
					env;
				}
			}
		}
	}
}

// We know the names are different, and that the right name is supposed to be a union.
gunifyNamedTypes(env : GEnv, left : GNamed, right : GNamed, pos : int, onError : (string) -> void) -> GEnv {
	// From the name of a union to the structs, uninstantiated
	rtypenames : [FcTypeName] = union2typenames(env.env, right.name);
	mstruct = find(rtypenames, \tn -> tn.name == left.name);
	switch (mstruct) {
		None(): {
			// It could be that the left is a union.
			ltypenames : [FcTypeName] = union2typenames(env.env, left.name);
			if (ltypenames == []) {
				onError("No overlap between " + gtype2string(env, left) + " and " + gtype2string(env, right));
			}
			// The unify against each struct in it
			fold(ltypenames, env, \acc, tn -> {
				istruct = ginstantiateStructFromUnion(acc, right, tn, onError);
				unifyGType(acc, istruct, right, pos, onError);
			});
		}
		Some(ustruct): {
			// The struct as it appears in the union. Let us remap typars from the union to the struct
			istruct = ginstantiateStructFromUnion(env, right, ustruct, onError);
		
			// And then subtype with our struct
			unifyGType(env, left, istruct, pos, onError);
		}
	}
}

// We known that master is a union, and we want the instantiated struct which we know is part of it
ginstantiateStructFromUnion(env : GEnv, master : GNamed, ustruct : FcTypeName, onError : (string) -> void) -> GType {
	munion = lookupTree(env.env.program.acc.names.unions, master.name);
	switch (munion) {
		None(): {
			if (master.name == ustruct.name) {
				master
			} else {
				onError("Expected " + master.name + " to be a union with " + ustruct.name);
				GNamed(ustruct.name, []);
			}
		}
		Some(union): {
			// Take the union def and map the typars
			typars = foldi(union.typeparameters, makeTree(), \i, acc, tp -> {
				setTree(acc, strLeft("????????????", i + 1), tp)
			});
			// Now we make a struct with typar names that correspond to the unions
			instantiated = instantiateTyParsToTypes(env.env, typars, ustruct, onError);
			gtype0 = fctype2gtype(env.env, env.tyvarIdGroup, instantiated);
	
			// We might have to do implicit type-par promotion from the union
			gtype = switch (gtype0) {
				GNamed(gname, tps): {
					// Extend the type parameters to match the number of parameters
					ntps = concat(tps, generate(0, length(master.typars), \i -> {
						GTypePar(strLeft("????????????", i + 1))
					}));
					GNamed(gname, subrange(uniq(ntps), 0, length(master.typars)))
				}
				default: gtype0;
			}

			if (env.verbose >= 4) {
				printStay(env.env, "Constructed " + gtype2string(env, gtype) + " from " + gtype2string(env, master));
			}

			// Now, instantiate the typars in this gtype
			gtypars = foldi(master.typars, makeTree(), \i, acc, tp -> {
				setTree(acc, strLeft("????????????", i + 1), tp)
			});
			instantiateGTypePars(env, gtypars, gtype, onError);
		}
	}
}

unifyGFieldAgainstName(env : GEnv, left : GField, right : GNamed, pos : int, onError : (string) -> void) -> GEnv {
	//printStay(env.env, "Subtyping field " + left.name + " against " + right.name);
	fieldTypes = getInstantiatedGNamedFields(env, right, left.name, left.type, true, onError);
	if (env.verbose >= 3) {
		printStay(env.env, "Subtyping field " + left.name + " against " + right.name + " gave field types " + toString(fieldTypes));
	}
	fold(fieldTypes, env, \acc, ft -> {
		unifyGType(acc, left.type, ft, pos, onError);
	});
}

// Does this name have this field? If so, what type is it?
getGNameField(env : GEnv, named : string, field : string) -> Maybe<GType> {
	mstruct = lookupTree(env.env.program.acc.names.structs, named);
	switch (mstruct) {
		None(): {
			munion = lookupTree(env.env.program.acc.names.unions, named);
			switch (munion) {
				None(): None();
				Some(union): {
					typenames : [FcTypeName] = union2typenames(env.env, named);
					fieldTypes = filtermap(typenames, \tn -> getGNameField(env, tn.name, field));
					if (length(fieldTypes) != length(typenames)) {
						// Not all had it
						None()
					} else {
						unique = uniq(fieldTypes);
						if (length(unique) != 1) {
							None();
						} else Some(unique[0]);
					}
				}
			}
		}
		Some(struct): {
			sa = find(struct.args, \a : FcStructArg -> {
				a.name == field;
			});
			switch (sa) {
				None(): None();
				Some(sar): Some(fctype2gtype(env.env, env.tyvarIdGroup, sar.type));
			}
		}
	}
}

unifyGNamedAgainstField(env : GEnv, left : GNamed, right : GField, pos : int, onError : (string) -> void) -> GEnv {
	fieldTypes = getInstantiatedGNamedFields(env, left, right.name, right.type, false, onError);
	fold(fieldTypes, env, \acc, ft -> {
		unifyGType(env, ft, right.type, pos, onError);
	})
}

// Given a named structure, extract the instantiated type of a given field
getInstantiatedGNamedFields(env : GEnv, named : GNamed, field : string, expectFieldType : GType, existEnough : bool, onError : (string) -> void) -> [GType] {
	error = \ -> {
		onError("Expected " + gtype2string(env, named) + " to have ." + field);
		[];
	}
	mstruct = lookupTree(env.env.program.acc.names.structs, named.name);
	switch (mstruct) {
		None(): {
			munion = lookupTree(env.env.program.acc.names.unions, named.name);
			switch (munion) {
				None(): error();
				Some(union): {
					typenames : [FcTypeName] = union2typenames(env.env, named.name);
					withField = if (existEnough) filter(typenames, \tn -> {
						fieldType = getGNameField(env, tn.name, field);
						switch (fieldType) {
							None(): false;
							Some(ft): {
								isGTypeCompatible(env, ft, expectFieldType)
							}
						}
					}) else typenames;
					instantiated = map(withField, \tn -> {
						ginstantiateStructFromUnion(env, named, tn, onError);
					});
					fields = map(instantiated, \i : GType -> {
						switch (i) {
							GNamed(__, __): {
								getInstantiatedGNamedFields(env, i, field, expectFieldType, existEnough, onError);
							}
							default: {
								error();
								[];
							}
						}
					});
					shared = uniq(concatA(fields));
					if (shared == []) {
						error();
					} else {
						shared;
					}
				}
			}
		}
		Some(struct): {
			sfield = find(struct.args, \a : FcStructArg -> {
				a.name == field;
			});
			switch (sfield) {
				None(): error();
				Some(stfield): {
					// OK, instantiate the struct typars from our named struct
					gtypars = foldi(named.typars, makeTree(), \i, acc, tp -> {
						setTree(acc, strLeft("????????????", i + 1), tp)
					});
					gfield = fctype2gtype(env.env, env.tyvarIdGroup, stfield.type);
					[instantiateGTypePars(env, gtypars, gfield, onError)];
				}
			}
		}
	}
}

isGTypeCompatible(env : GEnv, left : GType, right : GType) -> bool {
	todo = \ -> {
		println("TODO: Are " + gtype2string(env, left) + " and " + gtype2string(env, right) + " compatible?");
		false;
	}

	left == right || right == GFlow() || switch (left) {
		GBasicType(t):  switch (right) {
			GTypeVar(rid): true;
			default: false;
		}
		GFlow(): true;
		GTypePar(lid): switch (right) {
			GTypePar(rid): true;
			GTypeVar(rid): true;
			default: false;
		}
		GFunction(args, rt): todo();
		GArray(ltype): switch (right) {
			GArray(rtype): isGTypeCompatible(env, ltype, rtype);
			GTypeVar(rid): true;
			default: false;
		};
		GRef(ltype): switch (right) {
			GRef(rtype): isGTypeCompatible(env, ltype, rtype);
			GTypeVar(rid): true;
			default: false;
		};
		GTypeVar(id): true;
		GNamed(lname, ltypars): switch (right) {
			GNamed(rname, rtypars): {
				if (lname == rname) {
					areGTypesCompatible(env, ltypars, rtypars);
				} else {
					todo();
				}
			}
			GTypeVar(rid): true;
			default: false;
		};
		GField(name, type): todo();
	}
}

areGTypesCompatible(env : GEnv, left : [GType], right : [GType]) -> bool {
	length(left) == length(right)
	&& forall(mapi(left, \i, l -> isGTypeCompatible(env, l, right[i])), idfn)
}
