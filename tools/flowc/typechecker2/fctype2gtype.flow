import tools/flowc/typechecker2/gtype;

export {
	// Convert fctype to gtype. Resolved tyvars
	fctype2gtype(env : FcTypeEnv, type : FcType) -> GType;
}

fctype2gtype(env : FcTypeEnv, type : FcType) -> GType {
	ni = FcInfo2(0, 0);
	switch (type) {
		FcTypeVoid(i): GBasicType(FcTypeVoid(ni));
		FcTypeBool(i): GBasicType(FcTypeBool(ni));
		FcTypeInt(i): GBasicType(FcTypeInt(ni));
		FcTypeDouble(i): GBasicType(FcTypeDouble(ni));
		FcTypeString(i): GBasicType(FcTypeString(ni));
		FcTypeNative(i): GBasicType(FcTypeNative(ni));
		FcTypeFlow(i): GFlow();
		FcTypeArray(t, __): GArray(fctype2gtype(env, t));
		FcTypeRef(t, __): GRef(fctype2gtype(env, t));
		FcTypeParameter(n, i): GTypePar(n);
		FcTypeVar(id, i): {
			tv = lookupTree(^(env.local.tyvars), id);
			switch (tv) {
				None(): GTypeVar(id);
				Some(ttv): fctype2gtype(env, ttv);
			}
		}
		FcTypeName(id, tp, __): GNamed(id, fctypes2gtypes(env, tp));
		FcTypeStruct(name, tps, args, info): {
			GNamed(name, fctypes2gtypes(env, tps));
		}
		FcTypeUnion(n, tps, names, __): {
			GNamed(n, fctypes2gtypes(env, tps));
		}
		FcTypeFunction(args, rt, __): {
			GFunction(map(args, \a -> fctype2gtype(env, a.type)), fctype2gtype(env, rt));
		}
	}
}

fctypes2gtypes(env : FcTypeEnv, types : [FcType]) -> [GType] {
	map(types, \t -> fctype2gtype(env, t));
}
