export {
	// We implement a staged heuristic for solving things.
	GResolutionStage ::= GResolveSafeOnly, GResolveSafeButAmbiguous, GResolveSpeculative, GResolveTypars;
		// 1. Resolve all unambigious cases, not considering fields. We restructured fixed ones in this stage only
		GResolveSafeOnly();

		// 2. Also resolve unambigious cases, but consider field constraints as well.
		GResolveSafeButAmbiguous();

		// 3. Here we do prolog-style search of all allowed results, and check if they pan out
		GResolveSpeculative();

		// 4. Convert connected, unbound tyvars to type pars
		GResolveTypars();

	nextGResolutionStage(stage : GResolutionStage) -> GResolutionStage;
	gresolutionStage2int(stage : GResolutionStage) -> int;
	int2gresolutionStage(v : int) -> GResolutionStage;
}

nextGResolutionStage(stage : GResolutionStage) -> GResolutionStage {
	switch (stage) {
		GResolveSafeOnly(): GResolveSafeButAmbiguous();
		GResolveSafeButAmbiguous(): GResolveSpeculative();
		GResolveSpeculative(): GResolveTypars();
		GResolveTypars(): GResolveTypars();
	}
}

gresolutionStage2int(stage : GResolutionStage) -> int {
	switch (stage) {
		GResolveSafeOnly(): 0;
		GResolveSafeButAmbiguous(): 1;
		GResolveSpeculative(): 2;
		GResolveTypars(): 3;
	}
}

int2gresolutionStage(v : int) -> GResolutionStage {
	if (v == 0) GResolveSafeOnly()
	else if (v == 1) GResolveSafeButAmbiguous()
	else if (v == 2) GResolveSpeculative()
	else GResolveTypars();
}
