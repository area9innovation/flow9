import ds/easygraph_utils;

export {
	// Find the set of common ancestors for these nodes
	leastCommonAncestors(graph : EasyGraph<?, ??>, nodes : Set<int>) -> Set<int>;
}

leastCommonAncestors(graph : EasyGraph<?, ??>, nodes : Set<int>) -> Set<int> {
	reversed = reverseEasyGraph(graph);
	reachable : Tree<int, Set<int>> = reachableClosure(reversed);

	// Find the nodes which are reachable from all
	commonAncestors : Maybe<Set<int>> = foldSet(nodes, None(), \acc : Maybe<Set<int>>, node -> {
		reaches = lookupTreeDef(reachable, node, makeSet());
		Some(switch (acc) {
			None(): reaches;
			Some(set): intersectSets(set, insertSet(reaches, node));
		})
	});

	switch (commonAncestors) {
		None(): makeSet();
		Some(ca): {
			// OK, we have a set of ancestors.
			// To find the least common ones, let us remove all that is
			// reachable from each
			foldSet(ca, ca, \acc, node -> {
				reaches = lookupTreeDef(reachable, node, makeSet());
				differenceSets(acc, reaches)
			});
		}
	}
}
