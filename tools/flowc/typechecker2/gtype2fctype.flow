import tools/flowc/typechecker2/gtype_util;

export {
	gtype2fctype(env : GEnv, type : GType) -> FcType;
}

gtype2fctype(env : GEnv, type : GType) -> FcType {
	in = FcInfo2(0, 0);

	todo = \ -> {
		println("Can not convert gtype " + gtype2string(env, type) + " to fctype");
		FcTypeFlow(in);
	}

	switch (type) {
		GBasicType(t): t;
		GFlow(): FcTypeFlow(in);
		GTypePar(id): FcTypeParameter(id, in);
		GFunction(args, rt): FcTypeFunction(
			map(gtypes2fctypes(env, args), \t -> FcFunArg("", t)), 
			gtype2fctype(env, rt), in
		);
		GArray(atype): FcTypeArray(gtype2fctype(env, atype), in);
		GRef(rtype): FcTypeRef(gtype2fctype(env, rtype), in);
		GTypeVar(id): {
			mtype = lookupTree(env.tyvars, id);
			switch (mtype) {
				None(): FcTypeVar(id, in);
				Some(ttype): gtype2fctype(env, ttype);
			}
		}
		GNamed(name, typars): FcTypeName(name, gtypes2fctypes(env, typars), in);
		GField(name, ftype): todo();
	}
}

gtypes2fctypes(env : GEnv, types : [GType]) -> [FcType] {
	map(types, \t -> gtype2fctype(env, t));
}

