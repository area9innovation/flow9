import sys/concurrent;
import ds/treeutils;
import tools/common/compilerconfig;
import tools/flowc/flowcacc;
import tools/flowc/flowc_module;
import tools/flowc/incremental/fc2fi;

export {
	preloadedFcImports(preloaded : FcPreloadedModule) -> [FcImport];

	preloadedFcForbids(preloaded : FcPreloadedModule) -> [FcForbid];

	preloadedFiFileInfo(preloaded : FcPreloadedModule) -> FiFileInfo;

	// Preloads the given module recursively including imports. Either loads from cache or parses files.
	preloadModules(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, errHandler : (FcError) -> void) -> Tree<string, FcPreloadedModule>;

	reparseOutdatedModule(flowfile : string, config : CompilerConfig, env : FcTypeEnvGlobal, errHandler : (FcError) -> void) -> FcParsed;

	// Preloads only one module.
	preloadModule(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string) -> FcPreloadedModule;

	// Loads incremental modules, which are not yet cached. Used to fill up cache with ready files.
	loadIncrementalModulesToCache(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string) -> void;
}

FcImport2(flowfile : string, fromfile : string, start : int, end : int);

preloadedFcImports(preloaded : FcPreloadedModule) -> [FcImport] {
	switch (preloaded) {
		FcParsed(fileinfo, syntaxtree, imports, __, oldExports): imports;
		FcLoaded(module, __): map(module.imports, fiimport2fc);
	}
}

preloadedFcForbids(preloaded : FcPreloadedModule) -> [FcForbid] {
	switch (preloaded) {
		FcParsed(fileinfo, syntaxtree, __, forbids, oldExports): forbids;
		FcLoaded(module, __): map(module.forbids, fiforbid2fc);
	}
}

preloadedFiFileInfo(preloaded : FcPreloadedModule) -> FiFileInfo {
	switch (preloaded) {
		FcParsed(fileinfo, syntaxtree, imports, __, oldExports): fcfileinfo2fi(fileinfo);
		FcLoaded(module, __): module.fileinfo;
	}
}

preloadModules(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, errHandler : (FcError) -> void) -> Tree<string, FcPreloadedModule> {
	workingDir = getConfigParameterDef(config.config, "working-dir", "");
	flowfile = trimFlowfile(file, config.includes, workingDir);
	preloadedModulesAndErrors = preloadModulesInParallel(config, globEnv, makeTree1(flowfile, FcImport2(flowfile, "", 0, 0)), Pair(makeTree(), []));
	all_preloaded = preloadedModulesAndErrors.first;
	load_errors = preloadedModulesAndErrors.second;
	if (load_errors != []) {
		iter(load_errors, errHandler);
	}
	cyclic_import_errors = checkImportCycles(all_preloaded);
	if (cyclic_import_errors != []) {
		iter(cyclic_import_errors, errHandler);
	}
	all_preloaded
}

// Preloads given modules recursively adding imports. Either loads from cache or parses file.
preloadModulesInParallel(
	config : CompilerConfig,
	globEnv : FcTypeEnvGlobal,
	files : Tree<string, FcImport2>, 
	preloadedModulesAndErrors : Pair<Tree<string, FcPreloadedModule>, [FcError]>
) -> Pair<Tree<string, FcPreloadedModule>, [FcError]> {

	filesToLoad : [FcImport2] = map(tree2pairs(files), \pr -> pr.second);

	// Load the incremental or parse all the files given in parallel (no recursion)
	// Triple<flowfile, module, error>
	results : [Triple<string, FcPreloadedModule, Maybe<FcError>>] = concurrent(true, map(filesToLoad, \im : FcImport2 -> \ -> {
		pr2 = parseFlowFileOrLoadCached(config, globEnv, im.flowfile, im.fromfile, im.start, im.end);
		preloadedModule : FcPreloadedModule = pr2.first;
		errM = if (pr2.second != dummyFcError) Some(pr2.second) else None();
		Triple(preloadedFiFileInfo(preloadedModule).flowfile, preloadedModule, errM)
	}));

	// Grab the results
	parsedFiles2 : Tree<string, FcPreloadedModule> = fold(results, preloadedModulesAndErrors.first, \acc, r -> {
		setTree(acc, r.first, r.second)
	});
	newErrors = concat(preloadedModulesAndErrors.second, filtermap(results, \r -> r.third));

	// Find all the new imports in these files
	newImports : Tree<string, FcImport2> = fold(results, makeTree(), \acc, r -> {
		fold(getFcImport2s(r.second, r.first), acc, \acc2, im2 -> {
			if (containsKeyTree(parsedFiles2, im2.flowfile)) acc2
			else setTree(acc2, im2.flowfile, im2)
		})
	});

	if (newImports != TreeEmpty()) preloadModulesInParallel(config, globEnv, newImports, Pair(parsedFiles2, newErrors))
	else Pair(parsedFiles2, newErrors)
}

getFcImport2s(m : FcPreloadedModule, fromfile : string) -> [FcImport2] {
	switch (m) {
		FcParsed(fileinfo, syntaxtree, imports, __, oldExports): {
			map(imports, \im -> FcImport2(im.flowfile, fromfile, im.start, im.end))
		}
		FcLoaded(module, __): {
			map(module.imports, \im -> FcImport2(im.flowfile, fromfile, im.start, im.start))
		}
	}
}

checkImportCycles(all_preloaded : Tree<string, FcPreloadedModule>) -> [FcError] {
	imports_map : ref Tree<string, Set<string>> = ref makeTree();
	visited = ref makeSet();
	foldTree(all_preloaded, [], 
		\name, preloaded, acc -> {
			fileinfo = preloadedFiFileInfo(preloaded);
			all_imports = collectPreloadedImports(preloaded, all_preloaded, imports_map, visited);
			cycle_error = if (!containsSet(all_imports, name)) [] else {
				cycle = findPreloadedImportCycle(preloaded, fileinfo.flowfile, all_preloaded, ^imports_map, []);
				[FcError("Cyclic import in module '" + fileinfo.flowfile + "'",
					map(cycle, \bad_mod_pair -> {
							bad_mod = bad_mod_pair.first;
							bad_imp = bad_mod_pair.second;
							FcPosition(preloadedFiFileInfo(bad_mod).flowfile, bad_imp.start, bad_imp.end)
						}
					)
				)]
			}
			concat(acc, cycle_error)
		}
	)
}

collectPreloadedImports(curr : FcPreloadedModule, all_preloaded : Tree<string, FcPreloadedModule>, imports_map : ref Tree<string, Set<string>>, visited : ref Set<string>) -> Set<string> {
	fileinfo = preloadedFiFileInfo(curr);
	visited := insertSet(^visited, fileinfo.flowfile);
	switch (lookupTree(^imports_map, fileinfo.flowfile)) {
		Some(all_imports): all_imports;
		None(): {
			imports = preloadedFcImports(curr);
			all_imports = fold(imports, buildSet(map(imports, \imp -> imp.flowfile)), 
				\acc, imp -> {
					imp_preloaded = lookupTreeDef(all_preloaded, imp.flowfile, dummyFcPreloaded);
					if (containsSet(^visited, preloadedFiFileInfo(imp_preloaded).flowfile)) acc else {
						mergeSets(acc, collectPreloadedImports(imp_preloaded, all_preloaded, imports_map, visited))
					}
				}
			);
			imports_map := setTree(^imports_map, fileinfo.flowfile, all_imports);
			all_imports
		}
	}
}

findPreloadedImportCycle(preloaded : FcPreloadedModule, cyclic_name : string, all_preloaded : Tree<string, FcPreloadedModule>, imports_map : Tree<string, Set<string>>, acc : [Pair<FcPreloadedModule, FcImport>]) -> [Pair<FcPreloadedModule, FcImport>] {
	fileinfo = preloadedFiFileInfo(preloaded);
	if ((fileinfo.flowfile == cyclic_name && acc != []) || exists(acc, \pm -> preloadedFiFileInfo(pm.first).flowfile == fileinfo.flowfile)) {
		acc
	} else {
		imports = preloadedFcImports(preloaded);
		cyclic_import = findmap(imports, 
			\imp -> {
				imp_preloaded = lookupTreeDef(all_preloaded, imp.flowfile, dummyFcPreloaded);
				imp_imps = lookupTreeDef(imports_map, preloadedFiFileInfo(imp_preloaded).flowfile, makeSet());
				if (containsSet(imp_imps, cyclic_name)) {
					Some(Pair(imp_preloaded, imp)) 
				} else {
					None()
				}
			}
		);
		switch (cyclic_import) {
			Some(imp_preloaded): findPreloadedImportCycle(
				imp_preloaded.first, 
				cyclic_name, all_preloaded, imports_map, 
				concat(acc, [Pair(preloaded, imp_preloaded.second)])
			);
			None(): acc;
		}
	}
}

reparseOutdatedModule(flowfile : string, config : CompilerConfig, env : FcTypeEnvGlobal, errHandler : (FcError) -> void) -> FcParsed {
	// remove outdated cached module for safety and simplicity
	deleteIncrementalModule(config, env, flowfile);
	if (config.verbose >= 1) {
		fcPrintln("Reparsing outdated module " + flowfile, config.threadId);
	}
	fileinfo = getFcFileInfo(flowfile, config);
	fromfile = ""; // TODO: fix this later if possible
	t = timestamp();
	stErrPair = parseFlowfile(config, fileinfo, fromfile);
	incrementTimePhase(getTimePhases(config.threadId).parse, t);
	maybeApply(stErrPair.second, \error -> errHandler(error));
	FcParsed(
		fileinfo, 
		stErrPair.first, 
		extractFcImports(fileinfo, stErrPair.first), 
		extractFcForbids(fileinfo, stErrPair.first), 
		makeTree() // oldExports - TODO: Figure out if we have some old exports here
	)
}

preloadModule(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string) -> FcPreloadedModule {
	workingDir = getConfigParameterDef(config.config, "working-dir", "");
	flowfile = trimFlowfile(file, config.includes, workingDir);
	parseFlowFileOrLoadCached(config, globEnv, flowfile, "", 0, 0).first;
}

loadIncrementalModulesToCache(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string) -> void {
	workingDir = getConfigParameterDef(config.config, "working-dir", "");
	flowfile = trimFlowfile(file, config.includes, workingDir);
	fcDebugLog("loading cache for: " + flowfile + " ...", config); 
	doLoadIncrementalModulesToCache(config, globEnv, makeSet1(flowfile), makeSet());
	fcDebugLog("cache for: " + flowfile + " is updated", config); 
}

doLoadIncrementalModulesToCache(config : CompilerConfig, globEnv : FcTypeEnvGlobal, to_load : Set<string>, prev_loaded : Set<string>) -> void {
	// Load the incremental in parallel.
	// Loaded modules will be automatically placed in chache by 'preloadIncrementalModule' function,
	// so there's no need to return then explicitly.
	loaded : [FcLoaded] = filtermap(
		concurrent(true, filtermap(set2array(to_load), \file ->
			switch (fcLoadFromCache(globEnv, file)) {
				None(): Some(\ -> preloadIncrementalModule(config, globEnv, file).module);
				Some(__): None();
			}
		)), 
		idfn
	);
	next_loaded = mergeSets(prev_loaded, buildSet(map(loaded, \l -> l.module.fileinfo.flowfile)));

	// Find all the new imports in loaded files
	new_to_load = differenceSets(
		fold(loaded, makeSet(), \acc, l -> fold(l.module.imports, acc, \ac, im -> insertSet(ac, im.flowfile))),
		next_loaded
	);
	if (sizeSet(new_to_load) > 0) {
		doLoadIncrementalModulesToCache(config, globEnv, new_to_load, next_loaded);
	}
}
