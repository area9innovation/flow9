import tools/flowc/flow_parser;
import tools/flowc/incremental;
import tools/flowc/flowc_helpers;
import tools/flowc/desugar;
import math/stringmath;
import tools/flowc/incremental/fi2fc;

export {
	dummyFcError = FcError("", []);

	// Parses a flow file (or grabs it from incremental cache)
	parseFlowFileOrLoadCached(
		config : CompilerConfig,
		globEnv : FcTypeEnvGlobal,
		// The flow path to a file to read
		file : string,
		// What file imports this, and where?
		fromfile : string, start : int, end : int
	) -> Pair<FcPreloadedModule, FcError>;

	parseFlowfile(config : CompilerConfig, fileinfo : FcFileInfo, fromfile : string) -> Pair<SyntaxTree, Maybe<FcError>>;

	// Monitoring of time spent in difference phases
	fcTimePhases = FcTimePhasesT(ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0.);

	incrementTimePhase(counter : ref double, start : double) -> void;
	displayTimePhase(config : CompilerConfig) -> void;
	clearTimePhases() -> void;
}

parseFlowFileOrLoadCached(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string, fromfile : string, start : int, end : int) -> Pair<FcPreloadedModule, FcError> {
	switch (fcLoadFromCache(globEnv, file)) {
		Some(loaded): {
			module = loaded.module;
			checkMd5 = isConfigParameterTrue(config.config, "use-md5");

			needToReload = fiFileInfoFileChanged(module.fileinfo, checkMd5) || exists(module.stringIncludes, \inc -> fiFileInfoFileChanged(inc, checkMd5))
				// We also have to check that the NEW full path of the file MATCHES
				// the full path inside the incremental, because if the file is moved
				// it might register as unchanged, even if it really is.
				|| {
					fileinfo = getFcFileInfo(file, config);
					if (config.verbose > 0) {
						fcPrintln("Incremental file says original was found at\n" + module.fileinfo.flowfile + ".\nSource file is found at\n" + fileinfo.fullpath);
					}
					!isSamePath(module.fileinfo.fullpath, fileinfo.fullpath)
				};

			if ((!isConfigParameterTrue(config.config, "incremental-priority") && needToReload) || isConfigParameterFalse(config.config, "incremental")) {

				if (needToReload && config.verbose >= 1) {
					fcPrintln("Outdated cache entry: " + module.fileinfo.flowfile);
					fiFileInfoFileChangedMessage(module.fileinfo, checkMd5);
					iter(module.stringIncludes, \inc -> fiFileInfoFileChangedMessage(inc, checkMd5));
				}
				doParseFlowFileOrLoadCached(config, globEnv, file, fromfile, start, end);
			} else {
				if (config.verbose >= 1) fcPrintln("Reusing from cache module: " + file);
				Pair(FcLoaded(module, fcDependencyChangedCallback(config, globEnv, module)), dummyFcError);
			}
		}
		None(): {
			doParseFlowFileOrLoadCached(config, globEnv, file, fromfile, start, end);
		}
	}
}

doParseFlowFileOrLoadCached(
	config : CompilerConfig,
	globEnv : FcTypeEnvGlobal,
	file : string, 
	fromfile : string, 
	start : int, end : int
) -> Pair<FcPreloadedModule, FcError> {
	fileinfo = getFcFileInfo(file, config);
	if (fileExists(fileinfo.fullpath)) {

		// TODO: Inside this result, we have a list of old exported names, which
		// we should use for more fine-grained dependency tracking

		preloadResult = if (!isConfigParameterFalse(config.config, "incremental")) {
			preloadIncrementalModule(config, globEnv, fileinfo.flowfile)
		} else PreloadResult(None(), makeTree());

		switch (preloadResult.module : Maybe<FcLoaded>) {
			Some(loaded): {
				preloaded : FcPreloadedModule = loaded;
				Pair(preloaded, dummyFcError);
			}
			None(): {
				stErr = parseFlowfile(config, fileinfo, fromfile);
				st = stErr.first;
				switch (stErr.second) {
					None(): {
						parsed : FcPreloadedModule = FcParsed(fileinfo, st, extractFcImports(fileinfo, st), extractFcForbids(fileinfo, st), preloadResult.oldExports);
						Pair(parsed, dummyFcError)
					}
					Some(err):{
						parsed : FcPreloadedModule = FcParsed(fileinfo, dummySyntaxTree, extractFcImports(fileinfo, st), [], makeTree());
						Pair(parsed, err)
					}
				}
			}
		}
	} else {
		parsed : FcPreloadedModule = FcParsed(fileinfo, dummySyntaxTree, [], [], makeTree());
		error = FcError("Import " + file + ": file not found. Check flow.config or use I=<includes>", [FcPosition(fromfile, start, end)]);
		Pair(parsed, error);
	}
}


parseFlowfile(config : CompilerConfig, fileinfo : FcFileInfo, fromfile : string) -> Pair<SyntaxTree, Maybe<FcError>> {
	if (config.verbose >= 1) {
		fcPrintln("Parsing '" + fileinfo.flowfile + "'" + (if (fromfile == "") "" else " from '" + fromfile + "'"));
	}
	pr = parse_flow(fileinfo.content);
	st = pr.first;
	err = pr.second;
	errorM = if (st.end != strlen(fileinfo.content)) {
		Some(FcError("Syntax error: expected one of " + strGlue(err.expected, ", "), [FcPosition(fileinfo.flowfile, err.pos, err.pos)]));
	} else None();
	Pair(st, errorM)
}

FcTimePhasesT : (
	total : ref double,
	parse : ref double,
	desugar : ref double,
	typecheck : ref double,
	typeverify : ref double,
	checkImports : ref double,
	loadIncremental : ref double,
	unpackIncremental : ref double,
	saveIncremental : ref double,
	optimize : ref double,
	cse : ref double,
	build : ref double
);

incrementTimePhase(counter : ref double, start : double) {
	counter := ^counter + timestamp() - start;
}

displayTimePhase(config : CompilerConfig) {
		prn = \label, time -> {
			fcPrintln(label + ": " + d2st(^time / ^(fcTimePhases.total) * 100.0, 1) + "% (" + d2st(^time / 1000.0, 2) + "s)");
		}
		prn("Parse     ", fcTimePhases.parse);
		prn("Desugar   ", fcTimePhases.desugar);
		prn("Typecheck ", fcTimePhases.typecheck);
		if (^(fcTimePhases.typeverify) > 0.0) {
			prn("Typeverify", fcTimePhases.typeverify);
		}
		if (!isConfigParameterFalse(config.config, "optimize") && ^(fcTimePhases.optimize) > 0.0) {
			prn("Optimize  ", fcTimePhases.optimize);
		}
		if ((!isConfigParameterFalse(config.config, "cse") || !isConfigParameterFalse(config.config, "cse-global")) && ^(fcTimePhases.cse) > 0.0) {
			prn("CSE       ", fcTimePhases.cse);
		}
		if (^(fcTimePhases.checkImports) > 0.0) {
			prn("Imports   ", fcTimePhases.checkImports);
		}
		if (buildPhaseIsUsed(config) && ^(fcTimePhases.build) > 0.0) {
			prn("Build     ", fcTimePhases.build);
		}
		if (!isConfigParameterFalse(config.config, "incremental")) {
			prn("Incremental (load)   ", fcTimePhases.loadIncremental);
			prn("Incremental (unpack) ", fcTimePhases.unpackIncremental);
			prn("Incremental (save)   ", fcTimePhases.saveIncremental);
		}
}

clearTimePhases() -> void {
	fcTimePhases.total := 0.0;
	fcTimePhases.parse := 0.0;
	fcTimePhases.desugar := 0.0;
	fcTimePhases.typecheck := 0.0;
	fcTimePhases.typeverify := 0.0;
	fcTimePhases.checkImports := 0.0;
	fcTimePhases.loadIncremental := 0.0;
	fcTimePhases.unpackIncremental := 0.0;
	fcTimePhases.saveIncremental := 0.0;
	fcTimePhases.optimize := 0.0;
	fcTimePhases.cse := 0.0;
	fcTimePhases.build := 0.0;
}

buildPhaseIsUsed(config : CompilerConfig) -> bool {
	if (!isConfigParameterFalse(config.config, "js")) true
	else if (!isConfigParameterFalse(config.config, "es6")) true
	else if (!isConfigParameterFalse(config.config, "nodejs")) true
	else if (!isConfigParameterFalse(config.config, "nwjs")) true
	else if (!isConfigParameterFalse(config.config, "ts")) true
	else if (!isConfigParameterFalse(config.config, "bytecode")) true
	else if (!isConfigParameterFalse(config.config, "ml")) true
	else if (!isConfigParameterFalse(config.config, "java")) true
	else if (!isConfigParameterFalse(config.config, "D")) true
	else if (!isConfigParameterFalse(config.config, "cpp")) true
	else if (!isConfigParameterFalse(config.config, "lisp")) true
	else if (!isConfigParameterFalse(config.config, "rust")) true
	else if (!isConfigParameterFalse(config.config, "csharp")) true
	else if (!isConfigParameterFalse(config.config, "html")) true
	else if (!isConfigParameterFalse(config.config, "protobuf")) true
	else false
}
