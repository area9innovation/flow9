import tools/flowc/fcexp;
import runtime;

export {
	// For error messages, try to generate some useful short description of this expression
	fcexpDescription(e : FcExp) -> string;
}

fcexpDescription(e : FcExp) -> string {
	switch (e) {
		FcLet(n, t, v, s, __): n;
		FcCast(__, __, __, __): "cast";
		FcIf(__, __, __, __): "if";
		FcVoid(__): "{}";
		FcBool(b, __): b2s(b);
		FcInt(__, __): "int";
		FcDouble(__, __): "double";
		FcString(__, __): "string";

		FcVar(name, __): name;
		FcCall(f, a, __): "call of " + fcexpDescription(f) + "()";
		FcSwitch(__, __, __, __): "switch";
		FcLambda(__, __, __): "lambda";
		FcCallPrim(op, __, __): {
			switch (op) {
				FcEqPrim(): ("==");
				FcNePrim(): ("!=");
				FcGePrim(): (">=");
				FcLePrim(): ("<=");
				FcGtPrim(): (">");
				FcLtPrim(): ("<");

				FcPlusPrim(): ("+");
				FcMinusPrim(): ("-");
				FcMulPrim(): ("*");
				FcDivPrim(): ("/");
				FcModPrim(): ("%");
				FcNegPrim(): ("-");

				FcAndPrim(): ("&&");
				FcOrPrim(): ("||");
				FcNotPrim(): ("!");

				FcDerefPrim(): ("^");
				FcRefPrim(): ("ref");

				FcFieldPrim(n): ".";
				FcIndexPrim(): "array index";
				FcArrayPrim(): "[ ]";

				FcAssignPrim(): ":=";
				FcStructPrim(n): n + "()";

				FcSetMutablePrim(name): "::=";
				FcCreateClosurePrim(__, __): "create closure";

				FcQuote(): ("@");
				FcUnquote(): ("$");
			}
		}

		FcRequire(__, __, __): "";
		FcUnsafe(__, __, __): "";
		FcSeq(__, __): "{...}";
	}
}
