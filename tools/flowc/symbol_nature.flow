import tools/flowc/flowc_typecheck;
import tools/flowc/incremental/fi2flowsrc;

export {

	// Description of a symbol (lexical uint) in flow source.
	FcSymbolNature(
		name   : string,
		module : string,        // module, where a symbol is defined
		scope  : FcSymbolScope, // scope (global, module or local)
		kind   : FcSymbolKind,  // kind (name, type or field)
		cached : Maybe<FcCacheNamed>
	);

	// Enumeration type for classes of renamed entities: var/function names, types and struct fields
	FcSymbolKind ::= FcVarSymbol, FcTypeSymbol, FcFieldSymbol;
		FcVarSymbol();
		FcTypeSymbol();
		FcFieldSymbol(struct : string);

	// Enumeration type for classes of symbol visibility scope.
	FcSymbolScope ::= FcGlobalScope, FcModuleScope, FcLocalScope;
		FcGlobalScope();
		FcModuleScope();
		FcLocalScope();

	// Unions, which hold all possible syntax structures of flow program
	FiExpOrCase ::= FiExp, FiCase;
	FiAll ::= FiExpOrCase, FiDeclaration, FiStructOrUnion;

	// The components of bool pair in return:
	// 1) first: symbol is global, i.e. may be shared with other modules (stays in export)
	// 2) second: symbol is local, i.e. is defined in a scope of some expression
	// When symbol is not global or local, it is a toplevel, but not exported: module-scope
	symbolNature(config : CompilerConfig, globEnv : FcTypeEnvGlobal, symbol : string) -> Maybe<FcSymbolNature>;
	fcSymbolNature2s(n : FcSymbolNature) -> string;

	// Uses global name cache
	fastSymbolNature(config : CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> Maybe<FcSymbolNature>;

	// Markup all syntactic structures in AST with their starts.
	fimoduleStarts2fiall(module : FiModule) -> Tree<int, Set<FiAll>>;

	// Returns the underlying typename, unwrapping it from functions and refs.
	unrollTypeToTypeName(type : FiType) -> string;

	// Maps start positions to the appropriate program entities.
	start2fiall(fiany : FiAll, acc : Tree<int, Set<FiAll>>) -> Tree<int, Set<FiAll>>;

	fiExpOrCaseChildren(ex : FiExpOrCase) -> [FiExpOrCase];
	fiExpOrCaseTypes(ex : FiExpOrCase) -> [FiType];
}

fastSymbolNature(config : CompilerConfig, globEnv : FcTypeEnvGlobal, name : string, line : int, col : int) -> Maybe<FcSymbolNature> {
	switch (fcLookupNameInCache(globEnv, name)) {
		Some(symbol): {
			switch (symbol.named) {
				FiDeclaration(): {
					if (symbol.exported) {
						Some(FcSymbolNature(name, symbol.module, FcGlobalScope(), FcVarSymbol(), Some(symbol)));
					} else {
						Some(FcSymbolNature(name, symbol.module, FcModuleScope(), FcVarSymbol(), Some(symbol)));
					}
				}
				FiStructOrUnion(): {
					if (symbol.exported) {
						Some(FcSymbolNature(name, symbol.module, FcGlobalScope(), FcTypeSymbol(), Some(symbol)));
					} else {
						Some(FcSymbolNature(name, symbol.module, FcModuleScope(), FcTypeSymbol(), Some(symbol)));
					}
				}
			}
		}
		None(): {
			fcModule = parseAndDesugarFile(config, globEnv, config.flowfile);
			fiModule = fcmodule2fiWithErrorHandler(initFcTypeEnvLocal(), fcModule, nop2);
			switch (fastGuessSymbolFieldOrVar(globEnv, config, fiModule, name, line, col)) {
				Some(kind) : {
					scope : FcSymbolScope = switch (kind) {
						FcVarSymbol(): FcLocalScope();
						FcTypeSymbol(): FcLocalScope();
						FcFieldSymbol(struct_name): {
							switch (fcLookupNameInCache(globEnv, struct_name)) {
								Some(struct): {
									if (struct.exported) FcGlobalScope() else FcModuleScope();
								}
								None(): FcModuleScope();
							}
						}
					}
					Some(FcSymbolNature(name, config.flowfile, scope, kind, None()));
				}
				None(): None();
			}
		}
	}
}

symbolNature(config : CompilerConfig, globEnv : FcTypeEnvGlobal, symbol : string) -> Maybe<FcSymbolNature> {
	ensureIncrementalDirectoryExists(config);
	prog_error = parseAndTypecheckProgram(config, globEnv, config.flowfile);
	prog = prog_error.first;
	error = prog_error.second;
	if (error == 0) {
		line_str = getConfigParameter(config.config, "exp-line");
		column_str = getConfigParameter(config.config, "exp-column");
		findSymbolNature(
			globEnv,
			prog, 
			config.flowfile,
			symbol, 
			if (line_str == "") -1 else s2i(line_str) - 1, 
			if (column_str == "") -1 else s2i(column_str) - 1
		)
	} else {
		None();
	}
}

findSymbolNature(env : FcTypeEnvGlobal, prog : FiProgram, file : string, symbol : string, line : int, col : int) -> Maybe<FcSymbolNature> {
	decl2module = \decl : FiDeclaration -> {
		mod_name = switch (decl) {
			FiFunctionDec(name, __, __, __, __):       lookupTreeDef(prog.names.function2module, name, "");
			FiGlobalVar(name, __, __, __, __):         lookupTreeDef(prog.names.globalVar2module, name, "");
			FiNativeDec(name, __, __, __, __, __, __): lookupTreeDef(prog.names.native2module, name, "");
		}
		lookupTreeDef(prog.modules, mod_name, dummyFiModule)
	};
	type2module = \type : FiStructOrUnion -> {
		mod_name = switch (type) {
			FiTypeStruct(name, __, __, __): lookupTreeDef(prog.names.struct2module, name, "");
			FiTypeUnion(name, __, __, __):  lookupTreeDef(prog.names.union2module, name, "");
		}
		lookupTreeDef(prog.modules, mod_name, dummyFiModule)
	};
	struct2module = \struct : string -> {
		mod_name = lookupTreeDef(prog.names.struct2module, struct, "");
		lookupTreeDef(prog.modules, mod_name, dummyFiModule)
	}
	switch (lookupTree(prog.names.toplevel, symbol)) {
		Some(decl): {
			module = decl2module(decl);
			Some(FcSymbolNature(symbol, 
				module.fileinfo.flowfile,
				if (exists(module.exports, \n -> n == symbol)) {
					FcGlobalScope();
				} else {
					FcModuleScope()
				},
				FcVarSymbol(),
				None()
			));
		}
		None(): 
			switch (lookupTree(prog.names.structs, symbol)) {
				Some(struct): {
					module = type2module(struct);
					Some(FcSymbolNature(symbol, 
						module.fileinfo.flowfile,
						if (exists(module.exports, \n -> n == symbol)) {
							FcGlobalScope()
						} else {
							FcModuleScope()
						}, 
						FcTypeSymbol(),
						None()
					));
				}
				None(): 
					switch (lookupTree(prog.names.unions, symbol)) {
						Some(union): {
							module = type2module(union);
							Some(FcSymbolNature(symbol,
								module.fileinfo.flowfile,
								if (exists(module.exports, \n -> n == symbol)) {
									FcGlobalScope()
								} else {
									FcModuleScope()
								}, 
								FcTypeSymbol(),
								None()
							));
						}
						None(): {
							// May be a variable/function or a field name.
							switch (guessSymbolFieldOrVar(env, prog, file, symbol, line, col)) {
								Some(kind) : {
									scope : FcSymbolScope = switch (kind) {
										FcVarSymbol(): FcLocalScope();
										FcTypeSymbol(): FcLocalScope();
										FcFieldSymbol(struct): {
											module = struct2module(struct);
											if (exists(module.exports, \n -> n == struct)) {
												FcGlobalScope()
											} else {
												FcModuleScope()
											};
										}
									}
									Some(FcSymbolNature(symbol, file, scope, kind, None()))
								}
								None(): None();
							}
						}
					}
			}
	}
}

guessSymbolFieldOrVar(env : FcTypeEnvGlobal, prog : FiProgram, file : string, symbol : string, line : int, col : int) -> Maybe<FcSymbolKind> {
	workingDir = getConfigParameterDef(prog.config.config, "working-dir", "");
	relative = trimFlowfile(file, prog.config.includes, workingDir);
	switch (lookupTree(prog.modules, relative)) {
		Some(module): {
			starts2fiall = fimoduleStarts2fiall(module);
			code = fcFileSource(env, module.fileinfo.fullpath);
			resolver = makeLineResolver(code);
			index = findLineIndex(resolver, line, col);
			switch (treeIntervalSearch(starts2fiall, index)) {
				Some(fiallSet): {
					accum : Maybe<FcSymbolKind> = None();
					foldSet(fiallSet, accum, \acc, fiall ->
						switch (acc) {
							Some(__): acc;
							None(): {
								switch (fiall) {
									FiVar(name,__,__):
										if (name == symbol) Some(FcVarSymbol()) else acc;
									FiCallPrim(op, es, __, __): {
										name = if (length(es) > 0) unrollTypeToTypeName(fiExpType(es[0])) else "";
										if (name == "") acc else {
											switch (op) {
												FcFieldPrim(field):
													if (field == symbol) Some(FcFieldSymbol(name)) else acc;
												FcSetMutablePrim(field):
													if (field == symbol) Some(FcFieldSymbol(name)) else acc;
												default: acc;
											}
										}
									}
									FiLet(name,__,__,__,__,__): {
										if (name == symbol) Some(FcVarSymbol()) else acc;
									}
									FiTypeStruct(struct, __, args, __): {
										if (exists(args, \arg -> arg.name == symbol)) {
											Some(FcFieldSymbol(struct));
										} else {
											acc;
										}
									}
									default: acc;
								}
							}
						}
					)
				}
				None(): {
					//fcPrintln("program entity " + symbol + " at " + i2s(line) + " line and " + i2s(col) + " column is not found", prog.config.threadId);
					None();
				}
			}
		}
		None(): {
			//fcPrintln("module = " + relative + " not found", prog.config.threadId);
			None();
		}
	}
}

fastGuessSymbolFieldOrVar(env : FcTypeEnvGlobal, config : CompilerConfig, module : FiModule, symbol : string, line : int, col : int) -> Maybe<FcSymbolKind> {
	starts2fiall = fimoduleStarts2fiall(module);
	code = fcFileSource(env, module.fileinfo.fullpath);
	resolver = makeLineResolver(code);
	index = findLineIndex(resolver, line, col);
	maybeBind(treeIntervalSearch(starts2fiall, index),
		\fiallSet -> {
			accum : Maybe<FcSymbolKind> = None();
			foldSet(fiallSet, accum, \acc, fiall ->
				switch (acc) {
					Some(__): acc;
					None(): {
						switch (fiall) {
							FiVar(name,__,__): {
								if (name == symbol) Some(FcVarSymbol()) else acc;
							}
							FiCallPrim(op, es, __, __): {
								name = if (length(es) > 0) unrollTypeToTypeName(fiExpType(es[0])) else "";
								if (name == "") acc else {
									switch (op) {
										FcFieldPrim(field): {
											if (field == symbol) Some(FcFieldSymbol(name)) else acc
										}
										FcSetMutablePrim(field): {
											if (field == symbol) Some(FcFieldSymbol(name)) else acc
										}
										default: acc;
									}
								}
							}
							FiLet(name,__,__,__,__,__): {
								if (name == symbol) Some(FcVarSymbol()) else acc;
							}
							FiTypeStruct(struct, __, args, __): {
								if (exists(args, \arg -> arg.name == symbol)) {
									Some(FcFieldSymbol(struct));
								} else {
									acc;
								}
							}
							default: acc;
						}
					}
				}
			)
		}
	);
}


fimoduleStarts2fiall(module : FiModule) -> Tree<int, Set<FiAll>> {
	fold(module.unions, 
		fold(module.structs, 
			fold(module.natives, 
				fold(module.globalVars, 
					fold(module.functions, 
						makeTree(), 
						\a, fn -> start2fiall(fn, a)
					), 
					\a, gv -> start2fiall(gv, a)
				), 
				\a, nt -> start2fiall(nt, a)
			), 
			\a, struct -> start2fiall(struct, a)
		), 
		\a, union ->start2fiall(union, a)
	)
}

start2fiall(fiany : FiAll, acc : Tree<int, Set<FiAll>>) -> Tree<int, Set<FiAll>> {
	add_any = \ac, s -> if (s >= 0) setTree(ac, s, insertSet(lookupTreeDef(ac, s, makeSet()), fiany)) else ac;
	switch (fiany) {
		FiLambda(__, body, __, s):    start2fiall(body, add_any(acc, s));
		FiCall(f, args, __, s):       start2fiall(f, fold(args, add_any(acc, s), \a, arg -> start2fiall(arg, a)));
		FiLet(__, __, e1, e2, __, s): start2fiall(e1, start2fiall(e2, add_any(acc, s)));
		FiIf(e1, e2, e3, __, s):      start2fiall(e1, start2fiall(e2, start2fiall(e3, add_any(acc, s))));
		FiSwitch(v, __, cs, __, s):   start2fiall(v, fold(cs, add_any(acc, s), \a, c -> start2fiall(c, a)));
		FiCase(__, __, body, s):      start2fiall(body, add_any(acc, s));
		FiCast(e0, __, __, __, s):    start2fiall(e0, add_any(acc, s));
		FiSeq(es, __, s):             fold(es, add_any(acc, s), \a, ex -> start2fiall(ex, a));
		FiCallPrim(__, es, __, s):    fold(es, add_any(acc, s), \a, ex -> start2fiall(ex, a));
		FiRequire(__, ex, __, s):     start2fiall(ex, add_any(acc, s));
		FiUnsafe(__, fb, __, s):      start2fiall(fb, add_any(acc, s));
		FiVar(__, __, s):             add_any(acc, s);
		FiString(__, s):              add_any(acc, s);
		FiBool(__, s):                add_any(acc, s);
		FiDouble(__, s):              add_any(acc, s);
		FiVoid(s):                    add_any(acc, s);
		FiInt(__, s):                 add_any(acc, s);
		FiFunctionDec(__, l, __, s1, s2): start2fiall(l, add_any(add_any(acc, s1), s2));
		FiGlobalVar(__, v, __, s1, s2):   start2fiall(v, add_any(add_any(acc, s1), s2));
		FiNativeDec(__, __, __, __, f, s1, s2): start2fiall(f, add_any(add_any(acc, s1), s2));
		FiTypeStruct(__, __, __, s):  add_any(acc, s);
		FiTypeUnion(__, __, __, s):   add_any(acc, s);
	}
}

unrollTypeToTypeName(type : FiType) -> string {
	switch (type) {
		FiTypeName(name, __):   name;
		FiTypeFunction(__, tp): unrollTypeToTypeName(tp);
		FiTypeRef(tp):          unrollTypeToTypeName(tp);
		default:                "";
	}
}

fiExpOrCaseChildren(ex : FiExpOrCase) -> [FiExpOrCase] {
	switch (ex) {
		FiLambda(__, e, __, __): [e];
		FiCall(f, es, __, __): concat([f], es);
		FiLet(__, __, e1, e2, __, __): [e1, e2];
		FiIf(e1, e2, e3, __, __): [e1, e2, e3];
		FiSwitch(e, __, cs, __, __): concat([e], cs);
		FiCase(__, __, e, __): [e];
		FiCast(e, __, __, __, __): [e];
		FiSeq(es, __, __): es;
		FiCallPrim(__, es, __, __): es;
		FiVar(__, __,__):  [];
		FiString(__, __):  [];
		FiBool(__, __):    [];
		FiDouble(__, __):  [];
		FiVoid(__):        [];
		FiInt(__, __):     [];
        FiRequire(__, e, __, __): [e];
        FiUnsafe(__, fb, __, __): [fb];
	}
}

fiExpOrCaseTypes(ex : FiExpOrCase) -> [FiType] {
	switch (ex) {
		FiLambda(__,__, t, __): [t];
		FiCall(__, __, t, __): [t];
		FiLet(__, t1, __, __, t2, __): [t1, t2];
		FiIf(___, __, __, t, __): [t];
		FiSwitch(__, t1, __, t2, __): [t1, t2];
		FiCase(s,__, e,__): [FiTypeName(s, [])];
		FiCast(__, t1, t2, t3, __): [t1, t2, t3];
		FiSeq(__, t, __): [t];
		FiCallPrim(__, __, t, __): [t];
		FiVar(__, __,__):  [];
		FiString(__, __):  [];
		FiBool(__, __):    [];
		FiDouble(__, __):  [];
		FiVoid(__):        [];
		FiInt(__, __):     [];
        FiRequire(__,__, t, __): [t];
        FiUnsafe(__,__, t, __): [t];
	}
}

fcSymbolNature2s(n : FcSymbolNature) -> string {
	"name: " + n.name + ", " + 
	"mod: " + n.module + ", " +
	"scope: " + fcSymbolScope2s(n.scope) + ", " +
	"kind: " + fcSymbolKind2s(n.kind);
}

fcSymbolKind2s(k : FcSymbolKind) -> string {
	switch (k) {
		FcVarSymbol(): "var/func";
		FcTypeSymbol(): "type";
		FcFieldSymbol(s): "field of " + s;
	}
}

fcSymbolScope2s(s : FcSymbolScope) -> string {
	switch (s) {
		FcGlobalScope(): "global";
		FcModuleScope(): "module";
		FcLocalScope():  "local";
	}
}
