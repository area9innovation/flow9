import tools/common/config;
import tools/flowc/fcmodule;
import tools/flowc/dependencies;
import tools/flowc/idfactory;
import lingo/compiler/syntaxtree_types;
import tools/flowc/incremental/fimodule;
import tools/flowc/export_signature;
import tools/flowc/tracer;

export {
	FlowcAcc(
		// A graph of dependencies between files
		dependency : DependencyTracker<string>,
		// The files we have parsed
		preloaded : Tree<string, FcPreloadedModule>,
		// The modules we have parsed and desugared and typechecked so far
		modules : Tree<string, FiModule>,
		// A set of what global files we have loaded to catch duplicate imports by different flowpaths
		file2flowfile : Tree<string, string>,
		// Traversal order of flowfiles that respects dependencies
		traversal : [string],
		// A global map of all names
		names : FcGlobalNames,
		// The configuration of the compiler invocation
		config : CompilerConfig,
		// The global factory
		tyvarIdFactory : IdFactory,
		// We have a global group for type var id
		tyvarIdGroup : IdGroup,
		// For performance monitoring
		tracer : Tracer
	);

	// In what file is each name defined?
	FcGlobalNames(
		struct2module : Tree<string, string>,
		union2module : Tree<string, string>,
		function2module : Tree<string, string>,
		globalVar2module : Tree<string, string>,
		native2module : Tree<string, string>,
		structs : Tree<string, FcTypeStruct>,
		unions : Tree<string, FcTypeUnion>,
		struct2unions : Tree<string, [string]>,
		field2structs : Tree<string, [string]>,
		// global vars, functions, natives
		toplevel : Tree<string, FcDeclaration>,
		// How many typars did the struct have originally?
		structTypars : Tree<string, int>,
		moduleImports : Tree<string, Set<string>>
	);

	FcPreloadedModule ::= FcParsed, FcLoaded;

	// This struct is used for modules, which are not just parsed, but
	// which come from memory cache or incremental serialization.
	FcLoaded(
		module : FiModule,
		// True iff some imported source via a chain of imports is changed.
		dependencyChanged : () -> bool,
	);

	FcParsed(
		fileinfo : FcFileInfo, 
		syntaxtree : SyntaxTree, 
		imports : [FcImport],
		forbids : [FcForbid],
		// In case we had an old incremental file, we keep the old signatures
		oldExports : Tree<string, FiExportSignature>
	);

	dummyFcGlobalNames = FcGlobalNames(makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree());
	dummyFcPreloaded = FcLoaded(dummyFiModule, \-> false);
}
