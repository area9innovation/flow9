import server/http;
import tools/flowc/flowc_local;

export {
	// A language server working over http.
	fcHttpServer(config : CompilerConfig) -> void;
}

// Global array of request ids, shared by concurrent threads.
// When a request is finished, corresponding id is removed from the array and may be reused.
fc_request_ids : ref [int] = ref [1];

// Makes a new fresh id and stores it in fc_request_ids. Thread safe.
fcMakeNewRequestId = synchronizedConstFn(fc_request_ids, \ -> {
	new_id = for(2, \id -> contains(^fc_request_ids, id), \id -> id + 1);
	fc_request_ids := concat(^fc_request_ids, [new_id]);
	new_id
});

// Removes an id from fc_request_ids. Thread safe.
fcRemoveRequestId = synchronizedUnaryFn(fc_request_ids, \id -> 
	fc_request_ids := removeAll(^fc_request_ids, id)
);

fcDecodeConfigRequest(s : string) -> Maybe<CompilerConfig> {
	conf = deserialize(s, IllegalStruct());
	if (conf == IllegalStruct()) None() else {
		switch (conf) {
			CompilerConfig(__,__,__,__,__,__,__): {
				Some(CompilerConfig(conf with threadId = fcMakeNewRequestId()));
			}
			default: None();
		}
	}
}

fcProcessRequest(serverConf : CompilerConfig, globEnv : FcTypeEnvGlobal, req : string, out_cb : (int, string) ->  void, loop_cb : () -> void, exit_cb : () -> void) -> void {
	if (startsWith(req, "config_")) {
		encoded_conf = substring(req, 7, strlen(req) - 7);
		switch (fcDecodeConfigRequest(encoded_conf)) {
			Some(config): {
				pair = fcPrepareConfig(config);
				conf = pair.first;
				if (isConfigParameterTrue(config.config, "server-shutdown")) {
					exit_cb();
				} else {
					if (!(isConfigParameterTrue(conf.config, "symbol-info") || isConfigParameterTrue(conf.config, "print-flow-dir"))) {
						fcPrintln("Processing '" + conf.flowfile + "' on " + getConfigParameter(serverConf.config, "server-mode") + " server", config.threadId);
					}
					// Special watermark for non-logging
					log_request = !isConfigParameterSet(conf.config, "do_not_log_this");
					if (log_request) {
						fcServerLog("Request: " + escapeStr(nonDefaultCompilerConfigToString(config)), serverConf);
					}
					start_time = timestamp();
					runConfigLocally(conf, globEnv, \code -> {
						pair.second();
						bin_out = isConfigParameterTrue(conf.config, "dump-program") || isConfigParameterSet(conf.config, "compile-expression");
						out = if (bin_out) {
							fcBinary(conf.threadId);
						} else {
							fcOutput(conf.threadId);
						}
						clearFcOutput(conf.threadId);
						clearTimePhases(conf.threadId);
						fcRemoveRequestId(conf.threadId);
						if (log_request) {
							fcServerLog("Response[" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + escapeStr(if (bin_out) "<binary>" else out), serverConf);
						}
						out_cb(code, out);
						loop_cb();
					});
				}
			}
			None(): {
				out_cb(200, "WARNING: Illegal request.");
				loop_cb();
			}
		}
	} else {
		out_cb(200, "WARNING: Illegal request");
		loop_cb();
	}
}

fcHttpServer(config : CompilerConfig) -> void {
	port = s2i(getConfigParameter(config.config, "server-port"));
	globEnv = initFcTypeEnvGlobal();
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			fcServerLog("Http server started in: " + resolveRelativePath(".") + " directory", config);
			fcPrintln("Http server started.", config.threadId)
		},
		\request, response -> {
			if (request.body == "ping") {
				HttpResponse(200, "Flow http server is online", []) |> response
			} else {
				fcProcessRequest(config, globEnv, request.body,
					\code, output -> HttpResponse(200 + code, output, []) |> response,
					nop,
					\-> {
						fcPrintln("Http server stopped.", config.threadId);
						fcServerLog("Http server stopped.", config);
						HttpResponse(200, fcOutput(config.threadId), []) |> response;
						^server();
						quit(0);
					}
				);
			}
		}
	);
}
