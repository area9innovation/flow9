import server/http;
import tools/flowc/flowc_local;
import tools/flowc/flowc_lsp;

export {
	// A language server working over http.
	fcHttpServer(config : CompilerConfig) -> void;

	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	fcProcServer(config : CompilerConfig) -> void;
}

fcProcessRequest(env : FcTypeEnvGlobal, req : string, out_cb : (int, string) ->  void, loop_cb : () -> void, exit_cb : () -> void) -> void {
	switch (fcDecodeRequest(req)) {
		FcRequestConfig(config): {
			println("config");
			start_time = timestamp();
			pair = fcPrepareConfig(config);
			conf = pair.first;
			conf_callback = pair.second;
			conf_str = foldTree(compilerConfigToTree(conf), "",
				\key, val, acc -> acc + " " + key + (if (val != "") "=" + val else "")
			);
			if (isConfigParameterTrue(config.config, "server-shutdown")) {
				exit_cb();
			} else {
				fcServerLog("Processing request: <" + conf_str + " >");
				fcPrintln("Processing '" + conf.flowfile + "' on server.", config.threadId);
				runConfigLocally(conf, env, \code -> {
					fcServerLog("Request processing finished in " + d2st((timestamp() - start_time) / 1000.0, 2) + " s.");
					conf_callback();
					out = if (isConfigParameterTrue(conf.config, "dump-program") || isConfigParameterSet(conf.config, "compile-expression")) {
						fcBinary(conf.threadId);
					} else {
						fcOutput(conf.threadId);
					}
					out_cb(code, out);
					clearFcOutput(conf.threadId);
					clearTimePhases(conf.threadId);
					loop_cb();
				});
			}
		}
		FcRequestJson(json): {
			println("json");
			println(json);
			out_cb(1, "json is not yet implemented");
			loop_cb();
		}
		FcRequestNone(): {
			out_cb(200, "WARNING: Illegal request.");
			loop_cb();
		}
	}
}

fcProcServer(config : CompilerConfig) -> void { 
	fcServerLog("Proc server started.");
	fcRunProcServer(initFcTypeEnvGlobal(), config);
}

fcRunProcServer(globalEnv : FcTypeEnvGlobal, config : CompilerConfig) -> void {
	req = fcReadRequest();
	fcProcessRequest(globalEnv, req, 
		\__,__ -> {
			clearFcOutput(config.threadId);
			clearTimePhases(config.threadId);
		},
		\-> fcRunProcServer(globalEnv, config),
		\-> {
			fcServerLog("Proc server stopped.");
			quit(0);
		}
	);
}

fcHttpServer(config : CompilerConfig) -> void {
	port = s2i(getConfigParameter(config.config, "server-port"));
	globalEnv = initFcTypeEnvGlobal();
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			fcServerLog("Http server started.");
			fcPrintln("Http server started.", config.threadId)
		},
		\request, response -> {
			fcProcessRequest(globalEnv, request.body,
				\code, output -> HttpResponse(200 + code, output, []) |> response,
				nop,
				\-> {
					^server();
					fcPrintln("Http server stopped.", config.threadId);
					fcServerLog("Http server stopped.");
					quit(0);
				}
			)
		}
	);
}
