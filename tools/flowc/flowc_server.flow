import server/http;
import tools/flowc/flowc_lsp;

export {
	// A language server working over http.
	fcHttpServer(config : CompilerConfig) -> void;

	// A language server using stdin/stdout to communicate. Usually is invoked as a child process of an IDE.
	fcConsoleServer(config : CompilerConfig) -> void;
}

fcDecodeConfigRequest(s : string) -> Maybe<CompilerConfig> {
	conf = deserialize(s, IllegalStruct());
	if (conf == IllegalStruct()) None() else {
		switch (conf) {
			CompilerConfig(__,__,__,__,__,__,__): {
				Some(CompilerConfig(conf with threadId = s2i(getThreadId())));
			}
			default: None();
		}
	}
}

fcProcessRequest(serverConf : CompilerConfig, env : FcTypeEnvGlobal, req : string, out_cb : (int, string) ->  void, loop_cb : () -> void, exit_cb : () -> void) -> void {
	if (startsWith(req, "config_")) {
		encoded_conf = substring(req, 7, strlen(req) - 7);
		switch (fcDecodeConfigRequest(encoded_conf)) {
			Some(config): {
				pair = fcPrepareConfig(config);
				conf = pair.first;
				if (isConfigParameterTrue(config.config, "server-shutdown")) {
					exit_cb();
				} else {
					if (!isConfigParameterTrue(conf.config, "symbol-info")) {
						fcPrintln("Processing '" + conf.flowfile + "' on http server", config.threadId);
					}
					fcServerLog("Request: " + fcServerEscapeString(nonDefaultCompilerConfigToString(config)), serverConf);
					start_time = timestamp();
					runConfigLocally(conf, env, \code -> {
						pair.second();
						bin_out = isConfigParameterTrue(conf.config, "dump-program") || isConfigParameterSet(conf.config, "compile-expression");
						out = if (bin_out) {
							fcBinary(conf.threadId);
						} else {
							fcOutput(conf.threadId);
						}
						clearFcOutput(conf.threadId);
						clearTimePhases(conf.threadId);
						fcServerLog("Response[" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + fcServerEscapeString(if (bin_out) "<binary>" else out), serverConf);
						out_cb(code, out);
						loop_cb();
					});
				}
			}
			None(): {
				out_cb(200, "WARNING: Illegal request.");
				loop_cb();
			}
		}
	} else {
		json = fcDecodeJsonRequest(req);
		if (json == JsonNull()) {
			out_cb(200, "WARNING: Illegal request");
			loop_cb();
		} else {
			fcLspProcessRequest(serverConf, env, json, \msg -> out_cb(0, msg), loop_cb, exit_cb);
		}
	}
}

fcConsoleServer(config : CompilerConfig) -> void { 
	fcServerLog("Console server started.", config);
	fcSetSkipPrinting(config.threadId, true);
	fcRunConsoleServer(initFcTypeEnvGlobal(), config);
}

fcRunConsoleServer(env : FcTypeEnvGlobal, config : CompilerConfig) -> void {
	switch (fcLspReadRequest()) {
		Some(req): {
			fcServerLog("Request: " + fcServerEscapeString(req.request), config);
			start_time = timestamp();
			fcProcessRequest(config, env, req.json, 
				\__, msg -> {
					fcServerLog("Response[" + d2st((timestamp() - start_time) / 1000.0, 2) + " s.]: " + fcServerEscapeString(msg), config);
					print(msg);
				},
				\-> fcRunConsoleServer(env, config),
				\-> {
					fcServerLog("Console server stopped.", config);
					quit(0);
				}
			);
		}
		None(): {
			fcServerLog("Failed to read a request.", config);
			fcRunConsoleServer(env, config);
		}
	}
}

fcHttpServer(config : CompilerConfig) -> void {
	port = s2i(getConfigParameter(config.config, "server-port"));
	env = initFcTypeEnvGlobal();
	server = ref nop;
	server := createHttpServer(port,
		\-> {
			fcServerLog("Http server started.", config);
			fcPrintln("Http server started.", config.threadId)
		},
		\request, response -> {
			fcProcessRequest(config, env, request.body,
				\code, output -> HttpResponse(200 + code, output, []) |> response,
				nop,
				\-> {
					fcPrintln("Http server stopped.", config.threadId);
					fcServerLog("Http server stopped.", config);
					HttpResponse(200, fcOutput(config.threadId), []) |> response;
					^server();
					quit(0);
				}
			)
		}
	);
}

// Do a replacement "\n" to "\\n" and so on
fcServerEscapeString(str : string) -> string {
	strReplaces(str, ["\n", "\\n", "\r", "\\r", "\t", "\\t"]);
}
