import ds/concur_hashmap;
import sys/system;
import sys/concurrent;

export {
	// In server mode this function transfers argument to the http
	// response buffer as well as to the console output. Id is a thread id.
	fcPrintln(str : string, id : int) -> void;
	fcPrint(str : string, id : int) -> void;

	// In server mode this function transfers argument to the http
	// response buffer as well ass to the console output. Id is a thread id.
	fcPrintBinary(str : string, id : int) -> void;

	// Returns accumulated output string (buffer). Id is a thread id.
	fcOutput(id : int) -> string;

	// Returns accumulated binary buffer. Id is a thread id.
	fcBinary(id : int) -> string;

	// Clears the output buffers, accociated with a thread id.
	clearFcOutput(id : int) -> void;

	// Set the skip printing flag for a given thread
	fcSetSkipPrinting(id : int, val : bool) -> void;

	// Set the skip buffering flag for a given thread
	fcSetSkipBuffering(id : int, val : bool) -> void;
}

FcSyncBuffer(
	buff: ref [string],
	push: (string) -> void
);

fcOutputBuffer : ConcurHashMap<int, FcSyncBuffer> = makeConcurHashMap(idfn);
fcBinaryBuffer : ConcurHashMap<int, FcSyncBuffer> = makeConcurHashMap(idfn);
fcSkipPrinting : ConcurHashMap<int, bool> = makeConcurHashMap(idfn);
fcSkipBuffering : ConcurHashMap<int, bool> = makeConcurHashMap(idfn);

fcGetSkipPrinting(id : int) -> bool {
	getConcurHashMap(fcSkipPrinting, id, false);
}

fcSetSkipBuffering(id : int, val : bool) -> void {
	setConcurHashMap(fcSkipBuffering, id, val);
}

fcGetSkipBuffering(id : int) -> bool {
	getConcurHashMap(fcSkipBuffering, id, true);
}

fcSetSkipPrinting(id : int, val : bool) -> void {
	setConcurHashMap(fcSkipPrinting, id, val);
}

fcPrintln(str : string, id : int) -> void {
	if (!fcGetSkipBuffering(id)) {
		if (!containsKeyConcurHashMap(fcOutputBuffer, id)) {
			setConcurHashMap(fcOutputBuffer, id, emptyFcSyncBuffer());
		}
		getConcurHashMap(fcOutputBuffer, id, emptyFcSyncBuffer()).push(str);
	}
	if (!fcGetSkipPrinting(id)) {
		println(str);
	}
}

fcPrint(str : string, id : int) -> void {
	if (!fcGetSkipBuffering(id)) {
		if (!containsKeyConcurHashMap(fcOutputBuffer, id)) {
			setConcurHashMap(fcOutputBuffer, id, emptyFcSyncBuffer());
		}
		getConcurHashMap(fcOutputBuffer, id, emptyFcSyncBuffer()).push(str);
	}
	if (!fcGetSkipPrinting(id)) {
		print(str);
	}
}

emptyFcSyncBuffer() -> FcSyncBuffer {
	buff = ref [];
	FcSyncBuffer(
		buff,
		synchronizedUnaryFn(buff, \s -> refArrayPush(buff, s))
	);
}

fcPrintBinary(str : string, id : int) -> void {
	if (!containsKeyConcurHashMap(fcBinaryBuffer, id)) {
		setConcurHashMap(fcBinaryBuffer, id, emptyFcSyncBuffer());
	}
	getConcurHashMap(fcBinaryBuffer, id, emptyFcSyncBuffer()).push(str);
}

fcOutput(id : int) -> string {
	if (!containsKeyConcurHashMap(fcOutputBuffer, id)) "" else
	strGlue(^(getConcurHashMap(fcOutputBuffer, id, emptyFcSyncBuffer()).buff), "\n")
}

fcBinary(id : int) -> string {
	if (!containsKeyConcurHashMap(fcBinaryBuffer, id)) "" else
	strGlue(^(getConcurHashMap(fcBinaryBuffer, id, emptyFcSyncBuffer()).buff), "\n")
}

clearFcOutput(id : int) -> void {
	setConcurHashMap(fcOutputBuffer, id, emptyFcSyncBuffer());
	setConcurHashMap(fcBinaryBuffer, id, emptyFcSyncBuffer());
}
