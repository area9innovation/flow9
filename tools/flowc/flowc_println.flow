import sys/concurrent;
import net/url_parameter;

export {
	// In server mode this function transfers argument to the http
	// response buffer as well as to the console output. Id is a thread id.
	fcPrintln(str : string, id : int) -> void;

	// In server mode this function transfers argument to the http
	// response buffer as well ass to the console output. Id is a thread id.
	fcPrintBinary(str : string, id : int) -> void;

	// Returns accumulated output string (buffer). Id is a thread id.
	fcOutput(id : int) -> string;

	// Returns accumulated binary buffer. Id is a thread id.
	fcBinary(id : int) -> string;

	// Clears the output buffers, accociated with a thread id.
	clearFcOutput(id : int) -> void;

	// Set the skip printing flag for a given thread
	fcSetSkipPrinting(id : int, val : bool) -> void;

	// Set the skip buffering flag for a given thread
	fcSetSkipBuffering(id : int, val : bool) -> void;
}

fcOutputBuffer = initConcurrentHashMap();
fcBinaryBuffer = initConcurrentHashMap();
fcSkipPrinting = initConcurrentHashMap();
fcSkipBuffering = initConcurrentHashMap();

fcGetSkipPrinting(id : int) -> bool {
	getConcurrentHashMap(fcSkipPrinting, id, false);
}

fcSetSkipBuffering(id : int, val : bool) -> void {
	setConcurrentHashMap(fcSkipBuffering, id, val);
}

fcGetSkipBuffering(id : int) -> bool {
	getConcurrentHashMap(fcSkipBuffering, id, false);
}

fcSetSkipPrinting(id : int, val : bool) -> void {
	setConcurrentHashMap(fcSkipPrinting, id, val);
}

fcPrintln(str : string, id : int) -> void {
	if (!fcGetSkipBuffering(id)) {
		if (getUrlParameterDef("http-server-mode", "") != "" || getUrlParameterDef("lsp-server-mode", "") != "") {
			if (!containsConcurrentHashMap(fcOutputBuffer, id)) {
				setConcurrentHashMap(fcOutputBuffer, id, ref []);
			}
			refArrayPush(getConcurrentHashMap(fcOutputBuffer, id, ref []), str);
		}
	}
	if (!fcGetSkipPrinting(id)) {
		println(str);
	}
}

fcPrintBinary(str : string, id : int) -> void {
	if (getUrlParameterDef("http-server-mode", "") != "" || getUrlParameterDef("lsp-server-mode", "") != "") {
		if (!containsConcurrentHashMap(fcBinaryBuffer, id)) {
			setConcurrentHashMap(fcBinaryBuffer, id, ref []);
		}
		refArrayPush(getConcurrentHashMap(fcBinaryBuffer, id, ref []), str);
	}
}

fcOutput(id : int) -> string {
	if (!containsConcurrentHashMap(fcOutputBuffer, id)) "" else
	strGlue(^(getConcurrentHashMap(fcOutputBuffer, id, ref [])), "\n")
}

fcBinary(id : int) -> string {
	if (!containsConcurrentHashMap(fcBinaryBuffer, id)) "" else
	strGlue(^(getConcurrentHashMap(fcBinaryBuffer, id, ref [])), "\n")
}

clearFcOutput(id : int) -> void {
	setConcurrentHashMap(fcOutputBuffer, id, ref []);
	setConcurrentHashMap(fcBinaryBuffer, id, ref []);
}
