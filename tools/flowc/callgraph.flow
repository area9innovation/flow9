import tools/flowc/symbol_nature;
import formats/lsp;

export {
	// Print the import graph in dot format
	saveImportGraph(filename : string, simplify : bool, prog : FiProgram) -> void;

	// Print a callgraph in format:
	//
	// *** file: algorithms.flow
	// arrayPushSortedWithLimit: length mergeArrays subrange
	// binarySearch: binarySearchInternal genericCompare length
	// binarySearch2: binarySearchInternal length
	// binarySearchEx: binarySearchInternal genericCompare
	// ....
	printCallGraph(filename : string, prog : FiProgram) -> void;

	// Prints all paths from the one function to another.
	// Default value for 'func_to' is "main". 
	// max_num is a limit on the number of reported paths (there may be too much paths).
	// exclude - skip paths, containing functions from set
	pathInCallGraph(func_from : string, func_to : string, max_num : int, exclude : Set<string>, prog : FiProgram) -> void;

	// Execute following LSP methods:
	// - textDocument/callHierarchy 
	// - callHierarchy/incomingCalls
	// - callHierarchy/outgoingCalls
	// Output is made in LSP format (JSON).
	lspCallHierarchyMethods(prog : FiProgram, globEnv : FcTypeEnvGlobal) -> void;

	rewriteImports(fi : FiProgram, fine : bool, showPathTo : string) -> void;
}

saveImportGraph(filename : string, simplify : bool, prog : FiProgram) -> void {
	// Node type is flowfile. Edge type is file position for the import
	importGraph = foldTree(prog.modules, makeSimpleGraph(), \file, modul, acc -> {
		addModuleToImportGraph(prog, acc, file)
	});
	// Remove redundant imports to simplify the graph
	reduced = if (simplify) simpleTransitiveReduction(importGraph) else importGraph;
	dot = simpleGraph2dot(reduced, prog.config.flowfile, [], \f -> [DotLabel(f)], \e -> []);
	setFileContent(filename, dot);
	println("Saved import graph to " + filename + ". Convert to SVG with Graphviz:\n");
	println("  dot -Tsvg " + filename + " -o " + changeFileExt(filename, ".svg") + "\n");
}

addModuleToImportGraph(prog : FiProgram, acc : SimpleGraph<string, int>, flowfile : string) -> SimpleGraph<string, int> {
	if (hasSimpleNode(acc, flowfile)) {
		acc
	} else {
		acc1 = addSimpleNode(acc, flowfile);
		eitherMap(lookupTree(prog.modules, flowfile), \module -> {
			fold(module.imports, acc1, \acc2 : SimpleGraph<string, int>, im : FiImport -> {
				// OK, recursively add the chlidren's imports
				acc3 = addModuleToImportGraph(prog, acc2, im.flowfile);
				// And an edge to his guy
				addSimpleEdge(acc3, flowfile, im.flowfile, im.start, 1)
			});
		}, acc1)
	}
}

printCallGraph(filename : string, prog : FiProgram) -> void {
	lines = concatA(map(getTreeValues(prog.modules), \module -> {
		config = prog.config.config;
		useFullPath = isConfigParameterTrue(config, "callgraph-fullpath");

		heading = "*** file: " + (if (useFullPath) module.fileinfo.fullpath else {module.fileinfo.flowfile + ".flow"});
		functions = map(module.functions, \f : FiFunctionDec ->
			Pair(f.name, fifreevars(f.lambda))
		);
		natives = map(module.natives, \f : FiNativeDec ->
			Pair(f.name,
				switch (f.fallbackLambda) {
					FiLambda(__, __, __, __): fifreevars(f.fallbackLambda);
					FiVoid(__): makeSet();
					default: {
						fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, f.fallbackLambda), prog.config.threadId);
						makeSet()
					}
				}
			)
		);
		lines2 = map(concat(natives, functions), \p : Pair<string, Set<string>> ->
			p.first + ": " + strGlue(set2array(p.second), " ")
		);
		concat([heading], lines2)
	}));
	if (setFileContent(filename, strGlue(map(lines, \l -> l + "\n"), ""))) {
		if (prog.config.verbose > 0) {
			fcPrintln("Callgraph was successfully written to file '" + filename + "'", prog.config.threadId);	
		}
	} else {
		fcPrintln("Cannot write callgraph to file '" + filename + "'", prog.config.threadId);
	}
}

// A tree, which juxtaposes a set of all symbols, which uses a given name to a given name.
symbolUses(prog : FiProgram) -> Tree<string, Set<string>> {
	// Uses - inversed dependencies
	fold(getTreeValues(prog.modules), makeTree(), \acc, module -> {
		acc1 = fold(module.functions, acc, \ac, fn ->
			foldSet(fifreevars(fn.lambda), ac, \a, free ->
				setTree(a, free, insertSet(lookupTreeDef(a, free, makeSet()), fn.name))
			)
		);
		fold(module.natives, acc1, \ac, nat ->
			switch (nat.fallbackLambda) {
				FiLambda(__, __, __, __): {
					foldSet(fifreevars(nat.fallbackLambda), ac, \a, free ->
						setTree(a, free, insertSet(lookupTreeDef(a, free, makeSet()), nat.name))
					);
				}
				FiVoid(__): ac;
				default: {
					fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, nat.fallbackLambda), prog.config.threadId);
					ac;
				}
			}
		);
	});
}

symbolDependencies(prog : FiProgram) -> Tree<string, Set<string>> {
	fold(getTreeValues(prog.modules), makeTree(), \acc, module -> {
		acc1 = fold(module.functions, acc, \ac, fn ->
			setTree(ac, fn.name, fifreevars(fn.lambda))
		);
		fold(module.natives, acc1, \ac, nat ->
			switch (nat.fallbackLambda) {
				FiLambda(__, __, __, __): {
					setTree(ac, nat.name, fifreevars(nat.fallbackLambda));
				}
				FiVoid(__): ac;
				default: {
					fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, nat.fallbackLambda), prog.config.threadId);
					ac;
				}
			}
		);
	});
}

// For each module, collects globals, functinos and type names that are required
moduleDependencies(prog : FiProgram) -> Tree<string, Set<string>> {
	free : (FiExp) -> Set<string> = \e -> mergeSets(fifreevars(e), fifreetypes(e));
	fold(getTreeValues(prog.modules), makeTree(), \acc : Tree<string, Set<string>>, module -> {
		acc1 = fold(module.functions, acc, \ac : Tree<string, Set<string>>, fn ->
			insertMultipleMultimap(ac, module.fileinfo.flowfile, free(fn.lambda))
		);
		acc2 = fold(module.globalVars, acc1, \ac : Tree<string, Set<string>>, gl -> {
			insertMultipleMultimap(ac, module.fileinfo.flowfile, free(gl.value))
		});
		acc3 = fold(module.structs, acc2, \ac, st -> {
			used = fold(st.args, makeSet(), \ac2, arg -> {
				extractTypeNames(ac2, arg.type)
			});
			insertMultipleMultimap(ac, module.fileinfo.flowfile, used)
		});
		acc4 = fold(module.unions, acc3, \ac, un -> {
			used = fold(un.typenames, makeSet(), \ac2, tn -> {
				extractTypeNames(ac2, tn)
			});
			insertMultipleMultimap(ac, module.fileinfo.flowfile, used)
		});
		fold(module.natives, acc4, \ac, nat ->
			switch (nat.fallbackLambda) {
				FiLambda(__, __, __, __): {
					insertMultipleMultimap(ac, module.fileinfo.flowfile, free(nat.fallbackLambda));
				}
				FiVoid(__): ac;
				default: {
					fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, nat.fallbackLambda), prog.config.threadId);
					ac;
				}
			}
		);
	});
}


pathInCallGraph(func_from : string, func_to : string, max_num : int, exclude : Set<string>, prog : FiProgram) -> void {
	// Uses - inversed dependencies
	uses = foldTree(symbolUses(prog), makeTree(), \id, uses, acc ->
		if (containsSet(exclude, id)) acc else setTree(acc, id, differenceSets(uses, exclude))
	);
	paths = findAllPathsToMain(mapTree(uses, set2array), [[func_from]], [], func_to, max_num);
	fcPrintln(
		"Call paths from '" + func_from + "' to '" + func_to + "':\n" + 
		concatStrings(map(paths, \path -> "\t" + strGlue(path, " -> ") + "\n")) +
		(if (length(paths) > max_num) "\n  ... \n" else ""), 
		prog.config.threadId
	);
}

findAllPathsToMain(uses : Tree<string, [string]>, paths : [[string]], acc : [[string]], func_to : string, max_num : int) -> [[string]] {
	frontier = filter(paths, \path -> length(path) == sizeSet(buildSet(path)));
	if (frontier == [] || length(acc) > max_num) acc else {
		new_paths = mapConcat(frontier, \path -> 
			map(lookupTreeDef(uses, lastElement(path, ""), []), \last -> concat(path, [last]))
		);
		new_acc = concat(acc, filter(new_paths, \path -> lastElement(path, "") == func_to));
		findAllPathsToMain(uses, new_paths, new_acc, func_to, max_num);
	}
}

rewriteImports(prog : FiProgram, fine : bool, showPathTo : string) -> void {
	// Find out what dependencies each file has
	deps : Tree<string, Set<string>> = moduleDependencies(prog);
	simpleGraph = foldTree(deps, makeSimpleGraph(), \mod, uses, acc -> {
		mods0 = mapSet(uses, \u -> lookupName2module(prog.names, u));
		required = removeSet(mods0, mod);
		foldSet(required, acc, \acc2, n -> {
			addSimpleEdge(acc2, mod, n, 1, 1)
		});
	});

	// This is the graph of what we need
	simplified = simpleTransitiveReduction(simpleGraph);

	// OK, we we can find the real set of files we need
	realNeed : Set<string> = reachableClosureFromSimpleNode(simplified, prog.config.flowfile);

	pr = \s -> fcPrintln(s, prog.config.threadId);

	if (false) {
		pr("Real need");
		pr(toString(set2array(realNeed)));
	}

	// This is what the real graph is
	importGraph = foldTree(prog.modules, makeSimpleGraph(), \file, modul, acc -> {
		addModuleToImportGraph(prog, acc, file)
	});
	// Remove redundant imports to simplify the graph
	reduced = simpleTransitiveReduction(importGraph);
	current : Set<string> = reachableClosureFromSimpleNode(reduced, prog.config.flowfile);

	if (showPathTo != "") {
		opposite = reverseSimpleGraph(reduced);
		path : Set<string> = reachableClosureFromSimpleNode(opposite, showPathTo);
		println("Path to " + showPathTo + ":");
		println(toString(set2array(path)));
	}

	if (false) {
		println("Current set");
		println(toString(set2array(current)));
	}

	super = differenceSets(current, realNeed);
	if (!isEmptySet(super)) {
		pr("At a top level, these imports are not required:");
		files : [Pair<string, int>] = map(set2array(super), \s -> {
			mod = lookupTreeDef(prog.modules, s, dummyFiModule);
			Pair(s, round(mod.fileinfo.filesize))
		});
		order = sortCustom(files, \a -> a.second, false);
		pr(
			strGlue(strWordWrap(
				superglue(order, \p -> {
					size = p.second;
					t = if (size > 1024 * 1024) {
						d2st(i2d(size) / (1024.0 * 1024.0), 1) + "M"
					}  else if (size > 1024) {
						d2st(i2d(size) / 1024.0, 1) + "k"
					} else i2s(size);
					p.first + "(" + t + ")"
				}, ", "),
				80, [" "]
			), "\n")
		);
	}
	pr("The real need is " + i2s(sizeSet(realNeed)) + " modules while the current program uses " + i2s(sizeSet(current)) + " modules");

	traverseInOrder(prog.modules, \name, module -> {
		uses = lookupMultimap(deps, name);
		// These are the modules that this module really requires
		mods0 = mapSet(uses, \u -> lookupName2module(prog.names, u));
		required = removeSet(mods0, name);

		used = fold(module.imports, makeSet(), \acc, i -> {
			insertSet(acc, i.flowfile)
		});

		extra = differenceSets(used, required);
		missing = differenceSets(required, used);

		if (!isEmptySet(extra) && (
			fine || !isEmptySet(intersectSets(extra, super))
		)) {
			pr("\n" + name + " can reduce imports:");
			iterSet(extra, \i -> {
				superflous = differenceSets(reachableClosureFromSimpleNode(simplified, i), realNeed);
				if (!isEmptySet(superflous)) {
					pr("- import " + i + "  saves " + toString(set2array(superflous)));
				} else {
					pr("- import " + i);
				}
			});

			if (!isEmptySet(missing)) {
				realMiss = intersectSets(simplifyExtraImports(simplified, required), missing);
				iterSet(realMiss, \i -> {
					pr("+ import " + i + ";");
				});
			}
		}
	});
}

simplifyExtraImports(simplified : SimpleGraph<string, int>, missing : Set<string>) -> Set<string> {
	realMiss = foldSet(missing, missing, \acc, m -> {
		// Remove those that are reached from other means
		reach = intersectSets(
				reachableClosureFromSimpleNode(simplified, m),
				acc
			);
		differenceSets(acc, reach);
	});
	if (sizeSet(realMiss) != sizeSet(missing)) simplifyExtraImports(simplified, realMiss)
	else realMiss;
}

// Find out what module defines a given name
lookupName2module(globalNames : FiGlobalNames, name : string) -> string {
	lookupTreeDef(globalNames.function2module, name,
		lookupTreeDef(globalNames.globalVar2module, name,
			lookupTreeDef(globalNames.struct2module, name,
				lookupTreeDef(globalNames.union2module, name,
					lookupTreeDef(globalNames.native2module, name, "")
				)
			)
		)
	);
}

type2LspSymbolkind(type : FiType, names : FiGlobalNames) -> int {
	switch (type) {
		FiTypeArray(__): lookupTreeDef(lspSymbolKindName2id, "Array", 0);
		FiTypeFunction(args, retType): lookupTreeDef(lspSymbolKindName2id, "Function", 0);
		FiTypeInt(): lookupTreeDef(lspSymbolKindName2id, "Number", 0);
		FiTypeBool(): lookupTreeDef(lspSymbolKindName2id, "Boolean", 0);
		FiTypeDouble(): lookupTreeDef(lspSymbolKindName2id, "Number", 0);
		FiTypeString(): lookupTreeDef(lspSymbolKindName2id, "String", 0);
		FiTypeFlow(): lookupTreeDef(lspSymbolKindName2id, "Object", 0);
		FiTypeVoid(): lookupTreeDef(lspSymbolKindName2id, "Object", 0);
		FiTypeNative(): lookupTreeDef(lspSymbolKindName2id, "Object", 0);
		FiTypeName(name, typars): {
			if (containsKeyTree(names.structs, name)) {
				lookupTreeDef(lspSymbolKindName2id, "Struct", 0);
			} else {
				lookupTreeDef(lspSymbolKindName2id, "Enum", 0);
			}
		}
		FiTypeRef(t): type2LspSymbolkind(t, names);
		FiTypeParameter(n): lookupTreeDef(lspSymbolKindName2id, "TypeParameter", 0);
	}
}

nature2LspSymbolkind(nature : FcSymbolNature, names : FiGlobalNames) -> int {
	switch (nature.kind) {
		FcVarSymbol(type): type2LspSymbolkind(type, names);
		FcTypeSymbol(type): type2LspSymbolkind(type, names);
		FcFieldSymbol(type_name, field_name, field_type): type2LspSymbolkind(field_type, names);
	}
}

pos2LspPosition(pos : int, resolver : LineResolver) -> LspPosition {
	linecol = findLine1(resolver, pos, 1);
	LspPosition(linecol.lineno - 1, linecol.column - 1);
}

info2LspRange(range : FcInfo2, resolver : LineResolver) -> LspRange {
	LspRange(
		pos2LspPosition(range.start, resolver),
		pos2LspPosition(range.end, resolver),
	);
}

lspCallHierarchyMethods(prog : FiProgram, env : FcTypeEnvGlobal) -> void {
	config = prog.config;
	if (isConfigParameterSet(config.config, "calls-info")) {
		line = s2i(getConfigParameterDef(config.config, "exp-line", "-1"));
		col = s2i(getConfigParameterDef(config.config, "exp-column", "-1"));
		lspPrepareCallHierarchy(prog, line, col, env);
	}
	if (isConfigParameterSet(config.config, "calls-incoming")) {
		json = getConfigParameter(config.config, "calls-incoming");
		lspCallHierarchyIncoming(prog, json, env);
	}
	if (isConfigParameterSet(config.config, "calls-outgoing")) {
		json = getConfigParameter(config.config, "calls-outgoing");
		lspCallHierarchyOutgoing(prog, json, env);
	}
}

lspPrepareCallHierarchy(prog : FiProgram, line : int, col : int, env : FcTypeEnvGlobal) -> void {
	config = prog.config;
	file = config.flowfile;
	path = findFlowPath(config.flowfile, true, config.includes, lookupTreeDef(config.config, "working-dir", ""));
	src = fcFileSource(env, path);
	resolver = makeLineResolver(src);
	name = getNameByLineCol(line, col, src);
	maybeApply(getFcInfo2ByLineCol(line, col, src), \fc_range ->
		maybeApply(fastSymbolNature(config, env, name, line, col), \nature -> {
			kind = nature2LspSymbolkind(nature, prog.names);
			range = info2LspRange(fc_range, resolver);
			item = LspCallHierarchyItem(
				name, kind, 
				[], // no tags yet
				"", // no details yet
				URI("file", URIAuthority("", "", ""), path, "", ""),
				range, range, JsonNull()
			);
			fcPrintln(json2string(lspCallHierarchyItem2Json(item)), config.threadId);
		})
	);
}

lspCallHierarchyIncoming(prog : FiProgram, json : string, env : FcTypeEnvGlobal) -> void {
	config = prog.config;
	file = config.flowfile;
	maybeApply(json2LspCallHierarchyItem(parseJsonSafe(json)), \item -> {
		calls = map(symbolIcomingCalls(prog, item.name, env), lspCallHierarchyIncomingCall2Json);
		fcPrintln(json2string(JsonArray(calls)), config.threadId);
	});
}

lspCallHierarchyOutgoing(prog : FiProgram, json : string, env : FcTypeEnvGlobal) -> void {
	config = prog.config;
	file = config.flowfile;
	maybeApply(json2LspCallHierarchyItem(parseJsonSafe(json)), \item -> {
		calls = map(symbolOutgoingCalls(prog, item.name, env), lspCallHierarchyOutgoingCall2Json);
		fcPrintln(json2string(JsonArray(calls)), config.threadId);
	});
}

FiSymbolOccurrence(
	path : string, // path to the file
	info : FcInfo2 // start/end positions
);

fiSymbolOccur2LspLocation(occur : FiSymbolOccurrence, env : FcTypeEnvGlobal) -> LspLocation {
	src = fcFileSource(env, occur.path);
	resolver = makeLineResolver(src);
	LspLocation(
		URI("file", URIAuthority("", "", ""), occur.path, "", ""),
		info2LspRange(occur.info, resolver)
	);
}

fifreevarsOccurs(e : FiExp, path : string, src : string, threadId : int) -> Tree<string, Set<FiSymbolOccurrence>> {
	fifreevarsOccursBoundFree(e, path, src, threadId, makeSet(), makeTree());
}

fifreevarsOccursBoundFree(expr : FiExp, path : string, src : string, threadId : int, bound : Set<string>, free : Tree<string, Set<FiSymbolOccurrence>>) -> Tree<string, Set<FiSymbolOccurrence>> {
	fold_freevars = \es, f -> {
		fold(es, f, \acc, e -> fifreevarsOccursBoundFree(e, path, src, threadId, bound, acc));
	}
	switch (expr) {
		FiLambda(args, e, __, __): {
			lambda_bound = fold(args, bound, \acc, arg -> insertSet(acc, arg.name));
			fifreevarsOccursBoundFree(e, path, src, threadId, lambda_bound, free);
		}
		FiCall(f, es, __, __):{
			free_f = fifreevarsOccursBoundFree(f, path, src, threadId, bound, free);
			fold_freevars(es, free_f);
		}
		FiVar(x, __, beg): {
			if (containsSet(bound, x)) free else {
				switch (getFcInfo2ByPos(beg, src)) {
					Some(info2): {
						setTree(free, x, insertSet(lookupTreeDef(free, x, makeSet()), 
							FiSymbolOccurrence(path, info2)
						));
					}
					None(): {
						fcPrintln("Couldn't find a symbol boundaries - an error", threadId);
						free;
					}
				}
			}
		}
		FiLet(x, __, e1, e2, __, __): {
			e1_free = fifreevarsOccursBoundFree(e1, path, src, threadId, bound, free);
			let_bound = insertSet(bound, x);
			fifreevarsOccursBoundFree(e2, path, src, threadId, let_bound, e1_free);
		}
		FiIf(e1, e2, e3, __, __): {
			fold_freevars([e1, e2, e3], free);
		}
		FiSwitch(e, __, cs, __, __): {
			e_free = fifreevarsOccursBoundFree(e, path, src, threadId, bound, free);
			fold(cs, e_free, \acc, c -> {
				case_bound = fold(c.argNames, bound, \ac, arg_name -> if (arg_name == "__") ac else insertSet(ac, arg_name));
				fifreevarsOccursBoundFree(c.body, path, src, threadId, case_bound, acc);
			});
		}
		FiCast(e, __, __, __, __): {
			fifreevarsOccursBoundFree(e, path, src, threadId, bound, free);
		}
		FiSeq(es, __, __): {
			fold_freevars(es, free);
		}
		FiCallPrim(__, es, __, __): {
			fold_freevars(es, free)
		}
		FiString(__, __):             free; // here I would want to match simply on union FcConst
		FiBool(__, __):               free;
		FiDouble(__, __):             free;
		FiVoid(__):                   free;
		FiInt(__, __):                free;
        FiRequire(__, e, __, __):     fifreevarsOccursBoundFree(e, path, src, threadId, bound, free);
        FiUnsafe(__, fb, __, __):     fifreevarsOccursBoundFree(fb, path, src, threadId, bound, free);
	}
}

fiDeclarationIcomingCalls(
	path : string, name : string, src : string, threadId : int, 
	decl : FiDeclaration, env : FcTypeEnvGlobal
) -> [LspCallHierarchyIncomingCall] {
	body = bodyOfFiDeclaration(decl);
	freeOccurs = fifreevarsOccurs(body, path, src, threadId);
	fromRanges = map(set2array(lookupTreeDef(freeOccurs, name, makeSet())), \occur -> 
		fiSymbolOccur2LspLocation(occur, env).range
	);
	if (fromRanges == []) [] else {
		switch (getFcInfo2ByPos(decl.defiStart, src)) {
			Some(info2): {
				resolver = makeLineResolver(src);
				range = info2LspRange(info2, resolver);
				item = LspCallHierarchyItem(
					decl.name, lspKindOfFiDeclaration(decl), 
					[], // no tags yet
					"", // no details yet
					URI("file", URIAuthority("", "", ""), path, "", ""),
					range, range, JsonNull()
				);
				[LspCallHierarchyIncomingCall(item, fromRanges)];
			}
			None(): {
				[];
			}
		}
	}
}

symbolIcomingCalls(prog : FiProgram, name : string, env : FcTypeEnvGlobal) -> [LspCallHierarchyIncomingCall] {
	fcFoldCache(env, [], \acc, module -> {
		path = module.fileinfo.fullpath;
		src = fcFileSource(env, path);
		acc1 = fold(module.functions, acc, \ac, fn ->
			concat(ac, 
				fiDeclarationIcomingCalls(
					path, name, src, prog.config.threadId, 
					fn, env
				)
			)
		);
		acc2 = fold(module.globalVars, acc1, \ac, var ->
			concat(ac, 
				fiDeclarationIcomingCalls(
					path, name, src, prog.config.threadId, 
					var, env
				)
			)
		);
		fold(module.natives, acc2, \ac, nat ->
			switch (nat.fallbackLambda) {
				FiLambda(__, __, __, __): {
					concat(ac, 
						fiDeclarationIcomingCalls(
							path, name, src, prog.config.threadId, 
							nat, env
						)
					);
				}
				FiVoid(__): ac;
				default: {
					fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, nat.fallbackLambda), prog.config.threadId);
					ac;
				}
			}
		);
	});
}

bodyOfFiDeclaration(decl : FiDeclaration) -> FiExp {
	switch (decl) {
		FiFunctionDec(__, lambda, type, declStart, defiStart): {
			lambda;
		}
		FiGlobalVar(__, value, type, declStart, defiStart): {
			value;
		}
		FiNativeDec(__, io, type, nativeName, fallback, declStart, defiStart): {
			fallback;
		}
	}
}

lspKindOfFiDeclaration(decl : FiDeclaration) -> int {
	switch (decl) {
		FiFunctionDec(__, lambda, type, declStart, defiStart): {
			lookupTreeDef(lspSymbolKindName2id, "Function", 0)
		}
		FiGlobalVar(__, value, type, declStart, defiStart): {
			lookupTreeDef(lspSymbolKindName2id, "Variable", 0)
		}
		FiNativeDec(__, io, type, nativeName, fallback, declStart, defiStart): {
			lookupTreeDef(lspSymbolKindName2id, "Method", 0)
		}
	}
}

symbolOutgoingCalls(prog : FiProgram, name : string, env : FcTypeEnvGlobal) -> [LspCallHierarchyOutgoingCall] {
	conf = prog.config;
	switch (lookupTree(prog.names.toplevel, name)) {
		Some(decl): {
			body = bodyOfFiDeclaration(decl);
			module = name2FimoduleInFiProgram(prog, conf.flowfile, name);
			path = module.fileinfo.fullpath;
			src = fcFileSource(env, path);
			freeOccurs = fifreevarsOccurs(body, path, src, conf.threadId);
			filtermap(tree2pairs(freeOccurs), \p -> {
				called_name = p.first;
				occurs = set2array(p.second);
				called_module = name2FimoduleInFiProgram(prog, conf.flowfile, called_name);
				called_path = called_module.fileinfo.fullpath;
				called_src = fcFileSource(env, called_path);
				fromRanges = map(occurs, \occur -> fiSymbolOccur2LspLocation(occur, env).range);
				switch (lookupTree(prog.names.toplevel, called_name)) {
					Some(called_decl): {
						called_start = called_decl.defiStart;
						switch (getFcInfo2ByPos(called_start, called_src)) {
							Some(called_info2): {
								resolver = makeLineResolver(called_src);
								range = info2LspRange(called_info2, resolver);
								called_item = LspCallHierarchyItem(
									called_name, lspKindOfFiDeclaration(called_decl), 
									[], // no tags yet
									"", // no details yet
									URI("file", URIAuthority("", "", ""), called_path, "", ""),
									range, range, JsonNull()
								);
								Some(LspCallHierarchyOutgoingCall(called_item, fromRanges));
							}
							None(): {
								// Must not happen
								None();
							}
						}
					}
					None(): {
						// Must not happen
						None();
					}
				}
			});
		}
		None(): {
			[];
		}
	}
}
