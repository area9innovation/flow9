import tools/flowc/incremental/fi2fc;
import tools/flowc/incremental/fi_helpers;
import tools/flowc/export_signature;
import tools/flowc/flowc_helpers;
import tools/flowc/flowc_timephases;
import text/binary;
import utctime;

export {
	saveIncrementalModulesIfNeeded(modules : [FiModule], tenv : FcTypeEnvProgram) -> void;

	saveModuleInIncremental(config : CompilerConfig, module : FiModule, verbose : int, env : FcTypeEnvProgram) -> void;

	/* Loads any up-to-date incremental file if we have it. If we have an outdated one,
	 * we extract what the types of the old exports are to allow more fine-grained
	 * dependency tracking
	 */
	preloadIncrementalModule(config : CompilerConfig, globEnv : FcTypeEnvGlobal, flowfile : string) -> PreloadResult;
		PreloadResult(module : Maybe<FcLoaded>, oldExports : Tree<string, FiExportSignature>);


	deleteIncrementalModule(config : CompilerConfig, env : FcTypeEnvGlobal, flowfile : string) -> void;

	// Add incremental, typed modules to the environment
	mergeIncremental2TypeEnvProgram(env : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal, module : FiModule) -> FcTypeEnvProgram;
}

incrementalVersion = 5;
IncrementalModule(version : int, module : FiModule);

saveModuleInIncremental(config : CompilerConfig, module : FiModule, verbose : int, env : FcTypeEnvProgram) -> void {
	if (!isConfigParameterFalse(config.config, "incremental")) {
		t = timestamp();
		doSaveModuleInIncremental(config, module, verbose, env);
		incrementTimePhase(getTimePhases(config.threadId).save, t);
	}
}

saveIncrementalModulesIfNeeded(modules : [FiModule], tenv : FcTypeEnvProgram) -> void {
	config = tenv.acc.config;
	if (!isConfigParameterFalse(config.config, "incremental")) {
		// Incremental
		t = timestamp();
		runTasks(config, map(uniq(modules), \module -> \ -> {
			if (!moduleIsCached(config, module.fileinfo)) {
				doSaveModuleInIncremental(config, module, config.verbose, tenv);
				{}
			}
			true
		}));
		incrementTimePhase(getTimePhases(tenv.acc.config.threadId).save, t);
	}
}

doSaveModuleInIncremental(config : CompilerConfig, module0 : FiModule, verbose : int, env : FcTypeEnvProgram) -> void {
	module = FiModule(module0 with incremental = true);
	fn = getCacheFilename(config, module.fileinfo.flowfile);
	if (module.end != 0) {
		if (verbose >= 1) {
			fcPrintln("Saving incremental for " + module.fileinfo.flowfile, config.threadId);
		}
		s = toBinary(IncrementalModule(incrementalVersion, module));
		if (!setFileContent(fn, s)) {
			fcPrintln("WARNING: Cannot create incremental file " + fn, config.threadId);
		} else {
			if (fileModified(module.fileinfo.fullpath) > module.fileinfo.trampstamp) {
				// This is not an error, in fact, just annoying
				if (verbose >= 1) {
					fcPrintln("File '" + module.fileinfo.flowfile + "' has changed during compilation. Incremental file not saved.", config.threadId);
				}
				// Delete obsolete incremental file
				deleteFile(fn);
				{}
			}
		}
	} else {

		// This branch should not happen normally.
		// If we enter here, it means that something wrong happened
		// before saveModuleInIncremental() was called.
		// It means, in turn, that real errors happened earlier
		// and we only state that there were error(s).
		// So it is not error, but warning instead.

		fcPrintln("WARNING: Cannot convert " + fn + " to fimodule", config.threadId);
	}
}

preloadIncrementalModule(config : CompilerConfig, globEnv : FcTypeEnvGlobal, flowfile : string) -> PreloadResult {
	fn = getCacheFilename(config, flowfile);
	f = getFileContent(fn);
	if (f == "") PreloadResult(None(), makeTree())
	else {
		// fcPrintln(fn + " string is " + i2s(strlen(f)) + " UCS-2 chars long, expected " + d2s(fileSize(fn) / 2.0 - 1.0));
		// Workaround from broken reading of UTF-16 files
		cachedVersion = if (strlen(f) >= 4) s2a(substring(f, 4, 1))[0] else -1;
		if (cachedVersion != incrementalVersion) {
			if (config.verbose >= 1) {
				fcPrintln("Incremental for '" + flowfile + "' has wrong format version " + i2s(cachedVersion) + ", current is " + i2s(incrementalVersion), config.threadId);
			}
			deleteIncrementalModule(config, globEnv, flowfile);
			PreloadResult(None(), makeTree());
		} else {
			fi = deserializeBinary(f, IllegalStruct());
			if (fi == IllegalStruct()) {

				// Compiler failed to read and interpret contents
				// of incremental file for given flow file.
				// It is not an error, we ignore incremental file
				// and force compiler to reread and reparse flow file. 

				fcPrintln("WARNING: Illegal structure of incremental file for " + flowfile + ". Incremental file deleted.", config.threadId);
				deleteIncrementalModule(config, globEnv, flowfile);
				PreloadResult(None(), makeTree());
			} else {
				im : IncrementalModule = cast(fi : flow -> IncrementalModule);
				needToReload = fcModuleNeedReloading(im.module.fileinfo, im.module.stringIncludes, config);
				if ((!isConfigParameterTrue(config.config, "incremental-priority") && needToReload) || isConfigParameterFalse(config.config, "incremental")) {
					if (needToReload && config.verbose >= 1) {
						fcPrintln("Outdated incremental file:", config.threadId);
						fiFileInfoFileChangedMessage(im.module.fileinfo, config);
						iter(im.module.stringIncludes, \inc -> fiFileInfoFileChangedMessage(inc, config));
					}
					deleteIncrementalModule(config, globEnv, flowfile);

					oldExports = getExportedFiTypes(im.module);

					PreloadResult(None(), oldExports);
				} else {
					if (config.verbose >= 1) {
						fcPrintln("Loaded incremental for " + flowfile, config.threadId);
					}
					PreloadResult(Some(FcLoaded(im.module, fcDependencyChangedCallback(config, globEnv, im.module))), makeTree());
				}
			}
		}
	}
}


deleteIncrementalModule(config : CompilerConfig, env : FcTypeEnvGlobal, flowfile : string) {
	fn = getCacheFilename(config, flowfile);
	if (config.verbose >= 1) fcPrintln("Deleting outdated incremental for " + flowfile + ", file " + fn, config.threadId);
	e = deleteFile(fn);
	fcRemoveFromCache(env, flowfile);
	if (e != "") {
		if (fileExists(fn)) {
			fcPrintln("Could not delete " + fn + ": " + e, config.threadId);
		}
	}
	{}
}

mergeIncremental2TypeEnvProgram(tenv0 : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal, module : FiModule) -> FcTypeEnvProgram {
	if (tenv0.acc.config.verbose >= 1) {
		fcPrintln("Updating global environment with incremental module " + module.fileinfo.flowfile, tenv0.acc.config.threadId);
	}

	tenv = addFiModuleToFcTypeEnv(tenv0, globEnv, module);

	env = addDesugaredModuleToGlobal(tenv, fimodule2fc(module, false));

	FcTypeEnvProgram(
		env with types = {
			types1 = fold(module.functions, env.types, \acc2, fn -> setTree(acc2, fn.name, fitype2fc(fn.type)));
			types2 = fold(module.globalVars, types1, \acc2, gv -> setTree(acc2, gv.name, fitype2fc(gv.type)));
			fold(module.natives, types2, \acc2, nt -> setTree(acc2, nt.name, fitype2fc(nt.type)))
		},
	)
}

//ensureIncrementalFolders(config : CompilerConfig) {
//	ensureDirectoryExists(getCacheFilename(config, "")) |> ignore;
//}
