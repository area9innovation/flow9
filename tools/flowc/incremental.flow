import tools/flowc/incremental/fi2fc;
import tools/flowc/incremental/fi_helpers;
import tools/flowc/export_signature;
import tools/flowc/flowc_helpers;
import text/binary;
import utctime;

export {
	getFlowcObjectFolder(config : CompilerConfig) -> string;
	saveModuleInIncremental(config : CompilerConfig, module : FiModule, verbose : int, env : FcTypeEnvProgram) -> void;
	ensureIncrementalDirectoryExists(config : CompilerConfig) -> void;

	/* Loads any up-to-date incremental file if we have it. If we have an outdated one,
	 * we extract what the types of the old exports are to allow more fine-grained
	 * dependency tracking
	 */
	preloadIncrementalModule(config : CompilerConfig, globEnv : FcTypeEnvGlobal, flowfile : string) -> PreloadResult;
		PreloadResult(module : Maybe<FcLoaded>, oldExports : Tree<string, FiExportSignature>);


	deleteIncrementalModule(config : CompilerConfig, flowfile : string) -> void;

	// Add incremental, typed modules to the environment
	updateTypeEnvForIncrementalModule(env : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal, module : FiModule) -> FcTypeEnvProgram;

	ensureIncrementalFolders(config : CompilerConfig) -> void;
	moduleIsCached(config : CompilerConfig, module : FiModule) -> bool;
	getCacheFilename(config : CompilerConfig, flowname : string) -> string;
}

incrementalVersion = 3;
IncrementalModule(version : int, module : FiModule);

getFlowcObjectFolder(config : CompilerConfig) -> string {
	cobj = getConfigParameter(config.config, "obj");
	// Workaround when incremental is 0
	if (cobj == "obj,objshared") "objc"
	else if (config.objectFolders == []) "objc" else lastElement(config.objectFolders, config.objectFolders[0]);
}

getCacheFilename(config, flowname) {
	getFlowcObjectFolder(config) + "/" + strReplace(strReplace(flowname, "/", "_"), ":", "_")  + ".module"
}

moduleIsCached(config : CompilerConfig, module : FiModule) -> bool {
	fileExists(getCacheFilename(config, module.fileinfo.flowfile))
}

ensureIncrementalDirectoryExists(config : CompilerConfig) -> void {
	isIncremental = !isConfigParameterFalse(config.config, "incremental");
	if (isIncremental) {
		incrementalDir = getFlowcObjectFolder(config);
		ensureDirectoryExists(incrementalDir) |> ignore;
	}
}

saveModuleInIncremental(config : CompilerConfig, module : FiModule, verbose : int, env : FcTypeEnvProgram) -> void {
	fn = getCacheFilename(config, module.fileinfo.flowfile);
	if (module.end != 0) {
		if (verbose >= 1) fcPrintln("Saving incremental for " + module.fileinfo.flowfile);
		s = toBinary(IncrementalModule(incrementalVersion, module));
		if (!setFileContent(fn, s)) {
			fcPrintln("WARNING: Cannot create incremental file " + fn);
		} else {
			if (fileModified(module.fileinfo.fullpath) > module.fileinfo.trampstamp) {
				// This is not an error, in fact, just annoying
				if (verbose >= 1) {
					fcPrintln("File '" + module.fileinfo.flowfile + "' has changed during compilation. Incremental file not saved.");
				}
				// Delete obsolete incremental file
				deleteFile(fn);
				{}
			}
		}
	} else {

		// This branch should not happen normally.
		// If we enter here, it means that something wrong happened
		// before saveModuleInIncremental() was called.
		// It means, in turn, that real errors happened earlier
		// and we only state that there were error(s).
		// So it is not error, but warning instead.

		fcPrintln("WARNING: Cannot convert " + fn + " to fimodule");
	}
}

preloadIncrementalModule(config : CompilerConfig, globEnv : FcTypeEnvGlobal, flowfile : string) -> PreloadResult {
	fn = getCacheFilename(config, flowfile);
	f = getFileContent(fn);
	if (f == "") PreloadResult(None(), makeTree())
	else {
		// fcPrintln(fn + " string is " + i2s(strlen(f)) + " UCS-2 chars long, expected " + d2s(fileSize(fn) / 2.0 - 1.0));
		// Workaround from broken reading of UTF-16 files
		cachedVersion = if (strlen(f) >= 4) s2a(substring(f, 4, 1))[0] else -1;
		if (cachedVersion != incrementalVersion) {
			if (config.verbose >= 1) {
				fcPrintln("Incremental for '" + flowfile + "' has wrong format version " + i2s(cachedVersion) + ", current is " + i2s(incrementalVersion));
			}
			deleteIncrementalModule(config, flowfile);
			PreloadResult(None(), makeTree());
		} else {
			fi = deserializeBinary(f, IllegalStruct());
			if (fi == IllegalStruct()) {

				// Compiler failed to read and interpret contents
				// of incremental file for given flow file.
				// It is not an error, we ignore incremental file
				// and force compiler to reread and reparse flow file. 

				fcPrintln("WARNING: Illegal structure of incremental file for " + flowfile + ". Incremental file ignored.");
				PreloadResult(None(), makeTree());
			} else {
				im : IncrementalModule = cast(fi : flow -> IncrementalModule);
				fimodule : FiModule = im.module;
				fileinfo = fimodule.fileinfo;
				checkMd5 = getConfigParameter(config.config, "use-md5") == "1";
				incrementalPriority = getConfigParameter(config.config, "incremental-priority") == "1";

				needToReload = fiFileInfoFileChanged(fileinfo, checkMd5) || exists(fimodule.stringIncludes, \inc -> fiFileInfoFileChanged(inc, checkMd5))
					// We also have to check that the NEW full path of the file MATCHES
					// the full path inside the incremental, because if the file is moved
					// it might register as unchanged, even if it really is.
					|| {
						sourcefileinfo = getFcFileInfo(flowfile, config);
						if (config.verbose > 0) {
							if (fileinfo.fullpath != sourcefileinfo.fullpath) {
								fcPrintln("Incremental file says original was found at '" + fileinfo.fullpath + "' Source file is found at ''" + sourcefileinfo.fullpath + "'");
							} else {
								if (config.verbose > 1) {
									fcPrintln("  File is found at '" + fileinfo.fullpath + "'");
								}
							}
						}
						fileinfo.fullpath != sourcefileinfo.fullpath
					};

				if (!incrementalPriority && needToReload) {
					if (needToReload && config.verbose >= 1) {
						fcPrintln("Outdated incremental file:");
						fiFileInfoFileChangedMessage(fileinfo, checkMd5);
						iter(fimodule.stringIncludes, \inc -> fiFileInfoFileChangedMessage(inc, checkMd5));
					}
					deleteIncrementalModule(config, flowfile);

					oldExports = getExportedFiTypes(fimodule);

					PreloadResult(None(), oldExports);
				} else {
					if (config.verbose >= 1) fcPrintln("Loaded incremental for " + flowfile);
					PreloadResult(Some(FcLoaded(fimodule, fcDependencyChangedCallback(config, globEnv, fimodule))), makeTree());
				}
			}
		}
	}
}


deleteIncrementalModule(config : CompilerConfig, flowfile : string) {
	fn = getCacheFilename(config, flowfile);
	if (config.verbose >= 1) fcPrintln("Deleting outdated incremental for " + flowfile + ", file " + fn);
	e = deleteFile(fn);
	if (e != "") {
		if (fileExists(fn)) {
			fcPrintln("Could not delete " + fn + ": " + e);
		}
	}
	{}
}

updateTypeEnvForIncrementalModule(tenv0 : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal, module : FiModule) -> FcTypeEnvProgram {
	if (tenv0.acc.config.verbose >= 1) {
		fcPrintln("Updating global environment with incremental module " + module.fileinfo.flowfile);
	}

	tenv = addFiModuleToFcTypeEnv(tenv0, globEnv, module);

	env = addDesugaredModuleToGlobal(tenv, fimodule2fc(module, false));

	FcTypeEnvProgram(
		env with types = {
			types1 = fold(module.functions, env.types, \acc2, fn -> setTree(acc2, fn.name, fitype2fc(fn.type)));
			types2 = fold(module.globalVars, types1, \acc2, gv -> setTree(acc2, gv.name, fitype2fc(gv.type)));
			fold(module.natives, types2, \acc2, nt -> setTree(acc2, nt.name, fitype2fc(nt.type)))
		},
	)
}

ensureIncrementalFolders(config : CompilerConfig) {
	ensureDirectoryExists(getCacheFilename(config, "")) |> ignore;
}
