import formats/json/json;
import formats/uri2/uri2;

export {

LspPosition : (line : int, character : int);
LspRange : (start : LspPosition, end : LspPosition);
LspLocation : (uri : URI, range : LspRange);
LspCommand : (title : string, command : string, arguments : [Json]);
LspTextDocumentIdentifier : (uri : URI);
LspTextDocumentItem : (uri : URI, languageId : string, version : string, text : string);
LspTextDocumentPositionParams : (textDocument : LspTextDocumentIdentifier, position : LspPosition);
LspTextDocumentSymbol : (name : string, detail : string, kind : int, deprecated : bool, range : LspRange, selectionRange : LspRange, children : [LspTextDocumentSymbol]);
LspTextDocumentSymbolInfo : (name : string, detail : string, kind : int, deprecated : bool, location : LspLocation, containerName : string);
LspHover : (contents : [LspMarkedString], range : Maybe<LspRange>);
LspMarkedString : (language : string, value : string);
LspRename : (textDocument : LspTextDocumentIdentifier, position : LspPosition, newName : string);

lspPosition2Json(pos : LspPosition) -> Json;
lspRange2Json(range : LspRange) -> Json;
lspLocation2Json(loc : LspLocation) -> Json;
lspCommand2Json(com : LspCommand) -> Json;
lspTextDocumentIdentifier2Json(id : LspTextDocumentIdentifier) -> Json;
lspTextDocumentItem2Json(it : LspTextDocumentItem) -> Json;
lspTextDocumentPositionParams2Json(params : LspTextDocumentPositionParams) -> Json;
lspTextDocumentSymbol2Json(symbol : LspTextDocumentSymbol) -> Json;
lspMarkedString2Json(str : LspMarkedString) -> Json;
lspHover2Json(hover : LspHover) -> Json;

json2LspPosition(json : Json) -> Maybe<LspPosition>;
json2LspRange(json : Json) -> Maybe<LspRange>;
json2LspLocation(json : Json) -> Maybe<LspLocation>;
json2LspCommand(json : Json) -> Maybe<LspCommand>;
json2LspTextDocumentIdentifier(json : Json) -> Maybe<LspTextDocumentIdentifier>;
json2LspTextDocumentItem(json : Json) -> Maybe<LspTextDocumentItem>;
json2LspTextDocumentPositionParams(json : Json) -> Maybe<LspTextDocumentPositionParams>;
json2LspRename(json : Json) -> Maybe<LspRename>;

fcLspSymbolKindName2id = pairs2tree([
	Pair("File", 1),       Pair("Module", 2),      Pair("Namespace", 3), Pair("Package", 4),     Pair("Class", 5),
	Pair("Method", 6),     Pair("Property", 7),    Pair("Field", 8),     Pair("Constructor", 9), Pair("Enum", 10),
	Pair("Interface", 11), Pair("Function", 12),   Pair("Variable", 13), Pair("Constant", 14),   Pair("String", 15),
	Pair("Number", 16),    Pair("Boolean", 17),    Pair("Array", 18),    Pair("Object", 19),     Pair("Key", 20),
	Pair("Null", 21),      Pair("EnumMember", 22), Pair("Struct", 23),   Pair("Event", 24),      Pair("Operator", 25),
	Pair("TypeParameter", 26),
]);

fcLspSymbolKindId2Name = ["", 
	"File",      "Module",     "Namespace", "Package",     "Class",
	"Method",    "Property",   "Field",     "Constructor", "Enum", 
	"Interface", "Function",   "Variable",  "Constant",    "String",
	"Number",    "Boolean",    "Array",     "Object",      "Key", 
	"Null",      "EnumMember", "Struct",    "Event",       "Operator", 
	"TypeParameter"
];

}

lspPosition2Json(pos : LspPosition) -> Json {
	JsonObject([Pair("line", JsonDouble(i2d(pos.line))), Pair("character", JsonDouble(i2d(pos.character)))]);
}

lspRange2Json(range : LspRange) -> Json {
	JsonObject([Pair("start", lspPosition2Json(range.start)), Pair("end", lspPosition2Json(range.end))]);
}

lspLocation2Json(loc : LspLocation) -> Json {
	JsonObject([Pair("uri", JsonString(uri2string(loc.uri))), Pair("range", lspRange2Json(loc.range))]);
}

lspCommand2Json(com : LspCommand) -> Json {
	JsonObject([
		Pair("title", JsonString(com.title)), 
		Pair("command", JsonString(com.command)), 
		Pair("arguments", JsonArray(com.arguments))
	]);
}

lspTextDocumentIdentifier2Json(id : LspTextDocumentIdentifier) -> Json {
	JsonObject([Pair("uri", JsonString(uri2string(id.uri)))]);
}

lspTextDocumentItem2Json(it : LspTextDocumentItem) -> Json {
	JsonObject([
		Pair("uri", JsonString(uri2string(it.uri))),
		Pair("languageId", JsonString(it.languageId)),
		Pair("version", JsonString(it.version)),
		Pair("text", JsonString(it.text))
	]);
}

lspTextDocumentPositionParams2Json(params : LspTextDocumentPositionParams) -> Json {
	JsonObject([
		Pair("textDocument", lspTextDocumentIdentifier2Json(params.textDocument)),
		Pair("position", lspPosition2Json(params.position))
	]);
}

lspTextDocumentSymbol2Json(symbol : LspTextDocumentSymbol) -> Json {
	JsonObject([
		Pair("name", JsonString(symbol.name)),
		Pair("detail", JsonString(symbol.detail)),
		Pair("kind", JsonDouble(i2d(symbol.kind))),
		Pair("deprecated", JsonBool(symbol.deprecated)),
		Pair("range", lspRange2Json(symbol.range)),
		Pair("selectionRange", lspRange2Json(symbol.selectionRange)),
		Pair("children", JsonArray(map(symbol.children, lspTextDocumentSymbol2Json)))
	]);
}

lspMarkedString2Json(str : LspMarkedString) -> Json {
	if (str.language == "") {
		JsonString(str.value);
	} else {
		JsonObject([Pair("language", JsonString(str.language)), Pair("value", JsonString(str.value))]);
	}
}

lspHover2Json(hover : LspHover) -> Json {
	properties0 = if (length(hover.contents) == 1) {
		[Pair("contents", lspMarkedString2Json(hover.contents[0]))];
	} else {
		[Pair("contents", JsonArray(map(hover.contents, lspMarkedString2Json)))];
	}
	properties1 = eitherMap(hover.range, \range -> concat(properties0, [Pair("range", lspRange2Json(range))]), properties0);
	JsonObject(properties1);
}

json2LspPosition(json : Json) -> Maybe<LspPosition> {
	line = getJsonIntField(json, "line", -1);
	char = getJsonIntField(json, "character", -1);
	if (line != -1 && char != -1) Some(LspPosition(line, char)) else None();
}

json2LspRange(json : Json) -> Maybe<LspRange> {
	maybeBind(json2LspPosition(getJsonObjectField(json, "start")), \start ->
		maybeMap(json2LspPosition(getJsonObjectField(json, "end")), \end ->
			LspRange(start, end)
		)
	);
}

json2LspLocation(json : Json) -> Maybe<LspLocation> {
	maybeBind(json2LspRange(getJsonObjectField(json, "range")), \range -> {
		uri = getJsonStringField(json, "uri", "");
		if (uri == "") None() else Some(LspLocation(parseURI(uri), range));
	});
}

json2LspCommand(json : Json) -> Maybe<LspCommand> {
	title = getJsonStringField(json, "title", "");
	command = getJsonStringField(json, "command", "");
	args = getJsonArrayField(json, "arguments");
	if (title == "" || command == "") None() else {
		Some(LspCommand(title, command, args));
	}
}

json2LspTextDocumentIdentifier(json : Json) -> Maybe<LspTextDocumentIdentifier> {
	uri = getJsonStringField(json, "uri", "");
	if (uri == "") None() else Some(LspTextDocumentIdentifier(parseURI(uri)));
}

json2LspTextDocumentItem(json : Json) -> Maybe<LspTextDocumentItem> {
	uri = getJsonStringField(json, "uri", "");
	languageId = getJsonStringField(json, "languageId", "");
	version = getJsonStringField(json, "version", "");
	text = getJsonStringField(json, "text", "");
	if (uri == "" || languageId == "" || version == "" || text == "") None() else {
		Some(LspTextDocumentItem(parseURI(uri), languageId, version, text));
	}
}

json2LspTextDocumentPositionParams(json : Json) -> Maybe<LspTextDocumentPositionParams> {
	maybeBind(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \doc ->
		maybeMap(json2LspPosition(getJsonObjectField(json, "position")), \position ->
			LspTextDocumentPositionParams(doc, position)
		)
	)
}

json2LspRename(json : Json) -> Maybe<LspRename> {
	maybeBind(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \doc ->
		maybeBind(json2LspPosition(getJsonObjectField(json, "position")), \position -> {
			newName = getJsonStringField(json, "newName", "");
			if (newName == "") None() else Some(LspRename(doc, position, newName));
		})
	)
}
