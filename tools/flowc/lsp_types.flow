import ds/trie;
import formats/json/json;
import formats/uri2/uri2;

/*
 This module describes basic structures and encoding/decoding functions for the language Server Protocol (LSP)
 The detailed description and specification of LSP may be found at https://microsoft.github.io/language-server-protocol/
*/

export {

LspPosition : (line : int, character : int);
LspRange : (start : LspPosition, end : LspPosition);
LspLocation : (uri : URI, range : LspRange);
LspCommand : (title : string, command : string, arguments : [Json]);
LspTextEdit : (range: LspRange, newText: string);
LspTextDocumentIdentifier : (uri : URI);
LspTextDocumentItem : (uri : URI, languageId : string, version : string, text : string);
LspTextDocumentPositionParams : (textDocument : LspTextDocumentIdentifier, position : LspPosition);
LspTextDocumentSymbol : (name : string, detail : string, kind : int, deprecated : bool, range : LspRange, selectionRange : LspRange, children : [LspTextDocumentSymbol]);
LspTextDocumentSymbolInfo : (name : string, detail : string, kind : int, deprecated : bool, location : LspLocation, containerName : string);
LspHover : (contents : [LspMarkedString], range : Maybe<LspRange>);
LspMarkedString : (language : string, value : string);
LspRename : (textDocument : LspTextDocumentIdentifier, position : LspPosition, newName : string);
LspExecuteCommandParams : (command : string, arguments: [Json]);
LspCompletionContext : (
	triggerKind : int,  // Values: Invoked=1, triggerCharacter=2, TriggerIncompleteCompletions=3
	triggerCharacter : string
);
LspCompletionParams : (textDocument : LspTextDocumentIdentifier, position : LspPosition, context : LspCompletionContext);
LspCompletionList : (isIncomplete : bool, items : [LspCompletionItem]);
LspCompletionItem : (
	label: string,
	kind: int,
	tags: [int], // Values: Deprecated=1
	detail: string,
	documentation: string,
	deprecated: bool,
	preselect: bool,
	sortText: string,
	filterText: string,
	insertText: string,
	insertTextFormat: int, // Value: PlainText=1, Snippet=2
	textEdit: Maybe<LspTextEdit>,
	additionalTextEdits: [LspTextEdit],
	commitCharacters: [string],
	command: Maybe<LspCommand>,
	data: Json
);

LspVersionedTextDocumentIdentifier : (uri : URI, version : string);
LspDidChangeTextDocumentParams : (textDocument : LspVersionedTextDocumentIdentifier, contentChanges : [LspTextDocumentContentChangeEvent]);
LspTextDocumentContentChangeEvent : (range : LspRange, rangeLength : int, text : string);
LspDidSaveTextDocumentParams : (textDocument : LspTextDocumentIdentifier, text : string);

LspRegistration : (id : string, method : string, registerOptions : Json);
LspRegistrationParams : (registrations : [LspRegistration]);
LspDocumentFilter : (
	language : string, // A language id, like `typescript`.
	scheme : string, // A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
	/**
	 * A glob pattern, like `*.{ts,js}`.
	 *
	 * Glob patterns can have the following syntax:
	 * - `*` to match one or more characters in a path segment
	 * - `?` to match on one character in a path segment
	 * - `**` to match any number of path segments, including none
	 * - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
	 * - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
	 * - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
	 */
	pattern : string
);
LspTextDocumentRegistrationOptions : (
	documentSelector: [LspDocumentFilter] // A document selector to identify the scope of the registration.
);

LspInitializeParams : (
	processId : int, 
	clientInfoName : string,
	clientInfoVersion : string,
	rootPath : string, 
	rootUri : URI, 
	initializationOptions : Json, 
	capabilities: LspClientCapabilities, 
	trace : LspTrace, 
	workspaceFolders : [LspWorkspaceFolder]
);
LspTrace ::= LspTraceOff, LspTraceMessages, LspTraceVerbose; LspTraceOff(); LspTraceMessages(); LspTraceVerbose();

LspClientCapabilities : (
	workspace : LspWorkspaceClientCapabilities,
	textDocument : LspTextDocumentClientCapabilities,
	experimental : Json,
);

LspWorkspaceFolder : (uri : URI, name: string);

LspMarkupKind ::= LspMarkupPlaintext, LspMarkupMarkdown; LspMarkupPlaintext(); LspMarkupMarkdown();

 LspCodeActionKind ::= 
	LspCodeActionEmpty,          LspCodeActionQuickFix,        LspCodeActionRefactor, LspCodeActionRefactorExtract,
	LspCodeActionRefactorInline, LspCodeActionRefactorRewrite, LspCodeActionSource,   LspCodeActionOrganizeImports,
	LspCodeActionCustom;

	LspCodeActionEmpty();          LspCodeActionQuickFix();        LspCodeActionRefactor(); LspCodeActionRefactorExtract();
	LspCodeActionRefactorInline(); LspCodeActionRefactorRewrite(); LspCodeActionSource();   LspCodeActionOrganizeImports();
	LspCodeActionCustom(action : string);

LspResourceOperationKind ::= LspResourceOperationCreate, LspResourceOperationRename, LspResourceOperationDelete;
	LspResourceOperationCreate();
	LspResourceOperationRename();
	LspResourceOperationDelete();

LspFailureHandlingKind ::= 
	LspFailureHandlingAbort, LspFailureHandlingTtransactional, 
	LspFailureHandlingUndo, LspFailureHandlingTextOnlyTransactional;

	LspFailureHandlingAbort();
	LspFailureHandlingTtransactional();
	LspFailureHandlingUndo();
	LspFailureHandlingTextOnlyTransactional();

LspWorkspaceClientCapabilities : (
	applyEdit : bool,
	workspaceEditDocumentChanges : bool,
	workspaceEditResourceOperations : [LspResourceOperationKind],
	workspaceEditFailureHandling : Maybe<LspFailureHandlingKind>,
	didChangeConfigurationDynamicRegistration : bool,
	didChangeWatchedFilesDynamicRegistration : bool, 
	symbolDynamicRegistration : bool,
	symbolKindValueSet : [LspSymbolKind],
	executeCommandDynamicRegistration : bool,
	workspaceFolders : bool,
	configuration : bool
);

LspTextDocumentClientCapabilities : (
	synchronizationDynamicRegistration : bool, 
	synchronizationWillSave : bool, 
	synchronizationWillSaveWaitUntil : bool, 
	synchronizationDidSave : bool,

	completionDynamicRegistration : bool, 
	completionItemSnippetSupport : bool, 
	completionItemCommitCharactersSupport: bool,
	completionItemDocumentationFormat : [LspMarkupKind],
	completionItemDeprecatedSupport : bool, 
	completionItemPreselectSupport : bool, 
	completionItemKindValueSet : [LspCompletionItemKind],
	completionContextSupport : bool, 

	hoverDynamicRegistration : bool, 
	hoverContentFormat : [LspMarkupKind],

	signatureHelpDynamicRegistration : bool, 
	signatureInformationDocumentationFormat : [LspMarkupKind],
	signatureInformationParameterInformationLabelOffsetSupport : bool, 

	referencesDynamicRegistration: bool, 
	documentHighlightDynamicRegistration : bool, 

	documentSymbolDynamicRegistration : bool,
	documentSymbolSymbolKindDocumentSymbolValueSet : [LspSymbolKind],
	documentSymbolHierarchicalDocumentSymbolSupport : bool,

	formattingDynamicRegistration : bool, 
	rangeFormattingDynamicRegistration : bool, 

	onTypeFormattingDynamicRegistration : bool,

	declarationDynamicRegistration : bool, 
	declarationLinkSupport : bool,

	definitionDynamicRegistration : bool,
	definitionLinkSupport : bool, 


	typeDefinitionDynamicRegistration : bool, 
	typeDefinitionLinkSupport : bool, 

	implementationDynamicRegistration : bool, 
	implementationLinkSupport : bool, 

	codeActionDynamicRegistration : bool, 
	codeActionLiteralSupportValueSet: [LspCodeActionKind],

	codeLensDynamicRegistration : bool, 
	documentLinkDynamicRegistration : bool, 
	colorProviderDynamicRegistration : bool, 

	renameDynamicRegistration : bool,
	renamePrepareSupport : bool, 

	publishDiagnosticsRelatedInformation : bool, 

	foldingRangeDynamicRegistration : bool,
	foldingRangeRangeLimit : int,
	foldingRangeLineFoldingOnly: bool
);

lspPosition2Json(pos : LspPosition) -> Json;
lspRange2Json(range : LspRange) -> Json;
lspLocation2Json(loc : LspLocation) -> Json;
lspCommand2Json(com : LspCommand) -> Json;
lspTextDocumentIdentifier2Json(id : LspTextDocumentIdentifier) -> Json;
lspTextDocumentItem2Json(it : LspTextDocumentItem) -> Json;
lspTextDocumentPositionParams2Json(params : LspTextDocumentPositionParams) -> Json;
lspTextDocumentSymbol2Json(symbol : LspTextDocumentSymbol) -> Json;
lspMarkedString2Json(str : LspMarkedString) -> Json;
lspHover2Json(hover : LspHover) -> Json;
lspTextEdit2Json(edit : LspTextEdit) -> Json;
lspCompletionList2Json(list : LspCompletionList) -> Json;
lspRegistration2Json(registration : LspRegistration) -> Json;
lspRegistrationParams2Json(params : LspRegistrationParams) -> Json;
lspDocumentFilter2Json(documentFilter : LspDocumentFilter) -> Json;
lspTextDocumentRegistrationOptions2Json(options : LspTextDocumentRegistrationOptions) -> Json;

json2LspPosition(json : Json) -> Maybe<LspPosition>;
json2LspRange(json : Json) -> Maybe<LspRange>;
json2LspLocation(json : Json) -> Maybe<LspLocation>;
json2LspCommand(json : Json) -> Maybe<LspCommand>;
json2LspTextDocumentIdentifier(json : Json) -> Maybe<LspTextDocumentIdentifier>;
json2LspTextDocumentItem(json : Json) -> Maybe<LspTextDocumentItem>;
json2LspTextDocumentPositionParams(json : Json) -> Maybe<LspTextDocumentPositionParams>;
json2LspRename(json : Json) -> Maybe<LspRename>;
json2LspExecuteCommandParams(json : Json) -> Maybe<LspExecuteCommandParams>;
json2LspCompletionParams(json : Json) -> Maybe<LspCompletionParams>;
json2LspVersionedTextDocumentIdentifier(json : Json) -> Maybe<LspVersionedTextDocumentIdentifier>;
json2LspDidChangeTextDocumentParams(json : Json) -> Maybe<LspDidChangeTextDocumentParams>;
json2LspTextDocumentContentChangeEvent(json : Json) -> Maybe<LspTextDocumentContentChangeEvent>;
json2LspDidSaveTextDocumentParams(json : Json) -> Maybe<LspDidSaveTextDocumentParams>;

json2LspWorkspaceFolder(json : Json) -> Maybe<LspWorkspaceFolder>;
json2LspClientCapabilities(json : Json) -> Maybe<LspClientCapabilities>;
json2LspWorkspaceClientCapabilities(json : Json) -> Maybe<LspWorkspaceClientCapabilities>;
json2LspTextDocumentClientCapabilities(json : Json) -> Maybe<LspTextDocumentClientCapabilities>;
json2LspInitializeParams(json : Json) -> Maybe<LspInitializeParams>;

// 0 stands for no kin
fcLspSymbolKindName2id = pairs2tree([
	Pair("File", 1),       Pair("Module", 2),      Pair("Namespace", 3), Pair("Package", 4),     Pair("Class", 5),
	Pair("Method", 6),     Pair("Property", 7),    Pair("Field", 8),     Pair("Constructor", 9), Pair("Enum", 10),
	Pair("Interface", 11), Pair("Function", 12),   Pair("Variable", 13), Pair("Constant", 14),   Pair("String", 15),
	Pair("Number", 16),    Pair("Boolean", 17),    Pair("Array", 18),    Pair("Object", 19),     Pair("Key", 20),
	Pair("Null", 21),      Pair("EnumMember", 22), Pair("Struct", 23),   Pair("Event", 24),      Pair("Operator", 25),
	Pair("TypeParameter", 26),
]);

// 0 stands for no kind
fcLspCompletionItemKind2id = pairs2tree([
	Pair("Text", 1),       Pair("Method", 2),      Pair("Function", 3),   Pair("Constructor", 4), Pair("Field", 5),
	Pair("Variable", 6),   Pair("Class", 7),       Pair("Interface", 8),  Pair("Module", 9),      Pair("Property", 10),
	Pair("Unit", 11),      Pair("Value", 12),      Pair("Enum", 13),      Pair("Keyword", 14),    Pair("Snippet", 15),
	Pair("Color", 16),     Pair("File", 17),       Pair("Reference", 18), Pair("Folder", 19),     Pair("EnumMember", 20),
	Pair("Constant", 21),  Pair("Struct", 22),     Pair("Event", 23),     Pair("Operator", 24),   Pair("TypeParameter", 25)
]);

fcLspSymbolKindId2Name = ["", 
	"File",      "Module",     "Namespace", "Package",     "Class",
	"Method",    "Property",   "Field",     "Constructor", "Enum", 
	"Interface", "Function",   "Variable",  "Constant",    "String",
	"Number",    "Boolean",    "Array",     "Object",      "Key", 
	"Null",      "EnumMember", "Struct",    "Event",       "Operator", 
	"TypeParameter"
];

LspSymbolKind ::= 
	LspSymbolFile,      LspSymbolModule,     LspSymbolNamespace, LspSymbolPackage,     LspSymbolClass,
	LspSymbolMethod,    LspSymbolProperty,   LspSymbolField,     LspSymbolConstructor, LspSymbolEnum, 
	LspSymbolInterface, LspSymbolFunction,   LspSymbolVariable,  LspSymbolConstant,    LspSymbolString,
	LspSymbolNumber,    LspSymbolBoolean,    LspSymbolArray,     LspSymbolObject,      LspSymbolKey,
	LspSymbolNull,      LspSymbolEnumMember, LspSymbolStruct,    LspSymbolEvent,       LspSymbolOperator, 
	LspSymbolTypeParameter;

	LspSymbolFile();    LspSymbolModule();     LspSymbolNamespace(); LspSymbolPackage();     LspSymbolClass();
	LspSymbolMethod();    LspSymbolProperty();   LspSymbolField();     LspSymbolConstructor(); LspSymbolEnum(); 
	LspSymbolInterface(); LspSymbolFunction();   LspSymbolVariable();  LspSymbolConstant();    LspSymbolString();
	LspSymbolNumber();    LspSymbolBoolean();    LspSymbolArray();     LspSymbolObject();      LspSymbolKey();
	LspSymbolNull();      LspSymbolEnumMember(); LspSymbolStruct();    LspSymbolEvent();       LspSymbolOperator(); 
	LspSymbolTypeParameter();

lspSymbolKindTrie : ref Maybe<Trie<LspSymbolKind>> = ref None();

lspInitSymbolKindTrie() -> Trie<LspSymbolKind> {
	pairs2trie([
		Pair("file", LspSymbolFile()),
		Pair("module", LspSymbolModule()),
		Pair("namespace", LspSymbolNamespace()),
		Pair("package", LspSymbolPackage()),
		Pair("class", LspSymbolClass()),
		
		Pair("method", LspSymbolMethod()),
		Pair("property", LspSymbolProperty()),
		Pair("field", LspSymbolField()),
		Pair("constructor", LspSymbolConstructor()),
		Pair("enum", LspSymbolEnum()),
		
		Pair("interface", LspSymbolInterface()),
		Pair("funciton", LspSymbolFunction()),
		Pair("variable", LspSymbolVariable()),
		Pair("constant", LspSymbolConstant()),
		Pair("string", LspSymbolString()),
	
		Pair("number", LspSymbolNumber()),
		Pair("boolean", LspSymbolBoolean()),
		Pair("array", LspSymbolArray()),
		Pair("object", LspSymbolObject()),
		Pair("key", LspSymbolKey()),
		
		Pair("null", LspSymbolNull()),
		Pair("enummember", LspSymbolEnumMember()),
		Pair("struct", LspSymbolStruct()),
		Pair("event", LspSymbolEvent()),
		Pair("operator", LspSymbolOperator()),
	
		Pair("typeoperator", LspSymbolTypeParameter()),
	]);
}

LspCompletionItemKind ::=
	LspCompletionItemText, LspCompletionItemMethod, LspCompletionItemFunction, LspCompletionItemConstructor, LspCompletionItemField,
	LspCompletionItemVariable, LspCompletionItemClass, LspCompletionItemInterface, LspCompletionItemModule, LspCompletionItemProperty,
	LspCompletionItemUnit, LspCompletionItemValue, LspCompletionItemEnum, LspCompletionItemKeyword, LspCompletionItemSnippet,
	LspCompletionItemColor, LspCompletionItemFile, LspCompletionItemReference, LspCompletionItemFolder, LspCompletionItemEnumMember,
	LspCompletionItemConstant, LspCompletionItemStruct, LspCompletionItemEvent, LspCompletionItemOperator, LspCompletionItemTypeParameter;
	
	LspCompletionItemText(); LspCompletionItemMethod(); LspCompletionItemFunction(); LspCompletionItemConstructor(); LspCompletionItemField();
	LspCompletionItemVariable(); LspCompletionItemClass(); LspCompletionItemInterface(); LspCompletionItemModule(); LspCompletionItemProperty();
	LspCompletionItemUnit(); LspCompletionItemValue(); LspCompletionItemEnum(); LspCompletionItemKeyword(); LspCompletionItemSnippet();
	LspCompletionItemColor(); LspCompletionItemFile(); LspCompletionItemReference(); LspCompletionItemFolder(); LspCompletionItemEnumMember();
	LspCompletionItemConstant(); LspCompletionItemStruct(); LspCompletionItemEvent(); LspCompletionItemOperator(); LspCompletionItemTypeParameter();


lspCompletionItemKindTrie : ref Maybe<Trie<LspCompletionItemKind>> = ref None();

lspInitCompletionItemKindTrie() -> Trie<LspCompletionItemKind> {
	pairs2trie([
		Pair("text", LspCompletionItemText()),
		Pair("method", LspCompletionItemMethod()),
		Pair("function", LspCompletionItemFunction()),
		Pair("constructor", LspCompletionItemConstructor()),
		Pair("field", LspCompletionItemField()),
		
		Pair("variable", LspCompletionItemVariable()),
		Pair("class", LspCompletionItemClass()),
		Pair("interface", LspCompletionItemInterface()),
		Pair("module", LspCompletionItemModule()),
		Pair("property", LspCompletionItemProperty()),
		
		Pair("unit", LspCompletionItemUnit()),
		Pair("value", LspCompletionItemValue()),
		Pair("enum", LspCompletionItemEnum()),
		Pair("keyword", LspCompletionItemKeyword()),
		Pair("snippet", LspCompletionItemSnippet()),
	
		Pair("color", LspCompletionItemColor()),
		Pair("file", LspCompletionItemFile()),
		Pair("reference", LspCompletionItemReference()),
		Pair("folder", LspCompletionItemFolder()),
		Pair("enummember", LspCompletionItemEnumMember()),
		
		Pair("constant", LspCompletionItemConstant()),
		Pair("struct", LspCompletionItemStruct()),
		Pair("event", LspCompletionItemEvent()),
		Pair("operator", LspCompletionItemOperator()),
		Pair("typeparameter", LspCompletionItemTypeParameter()),
	]);
}

fcJsonObjectHasField(json : Json, member : string) -> bool;

}

lspPosition2Json(pos : LspPosition) -> Json {
	JsonObject([Pair("line", JsonDouble(i2d(pos.line))), Pair("character", JsonDouble(i2d(pos.character)))]);
}

lspRange2Json(range : LspRange) -> Json {
	JsonObject([Pair("start", lspPosition2Json(range.start)), Pair("end", lspPosition2Json(range.end))]);
}

lspLocation2Json(loc : LspLocation) -> Json {
	JsonObject([Pair("uri", JsonString(uri2string(loc.uri))), Pair("range", lspRange2Json(loc.range))]);
}

lspCommand2Json(com : LspCommand) -> Json {
	JsonObject([
		Pair("title", JsonString(com.title)), 
		Pair("command", JsonString(com.command)), 
		Pair("arguments", JsonArray(com.arguments))
	]);
}

lspTextDocumentIdentifier2Json(id : LspTextDocumentIdentifier) -> Json {
	JsonObject([Pair("uri", JsonString(uri2string(id.uri)))]);
}

lspTextDocumentItem2Json(it : LspTextDocumentItem) -> Json {
	JsonObject([
		Pair("uri", JsonString(uri2string(it.uri))),
		Pair("languageId", JsonString(it.languageId)),
		Pair("version", JsonString(it.version)),
		Pair("text", JsonString(it.text))
	]);
}

lspTextDocumentPositionParams2Json(params : LspTextDocumentPositionParams) -> Json {
	JsonObject([
		Pair("textDocument", lspTextDocumentIdentifier2Json(params.textDocument)),
		Pair("position", lspPosition2Json(params.position))
	]);
}

lspTextDocumentSymbol2Json(symbol : LspTextDocumentSymbol) -> Json {
	JsonObject([
		Pair("name", JsonString(symbol.name)),
		Pair("detail", JsonString(symbol.detail)),
		Pair("kind", JsonDouble(i2d(symbol.kind))),
		Pair("deprecated", JsonBool(symbol.deprecated)),
		Pair("range", lspRange2Json(symbol.range)),
		Pair("selectionRange", lspRange2Json(symbol.selectionRange)),
		Pair("children", JsonArray(map(symbol.children, lspTextDocumentSymbol2Json)))
	]);
}

lspMarkedString2Json(str : LspMarkedString) -> Json {
	if (str.language == "") {
		JsonString(str.value);
	} else {
		JsonObject([Pair("language", JsonString(str.language)), Pair("value", JsonString(str.value))]);
	}
}

lspHover2Json(hover : LspHover) -> Json {
	properties0 = if (length(hover.contents) == 1) {
		[Pair("contents", lspMarkedString2Json(hover.contents[0]))];
	} else {
		[Pair("contents", JsonArray(map(hover.contents, lspMarkedString2Json)))];
	}
	properties1 = eitherMap(hover.range, \range -> concat(properties0, [Pair("range", lspRange2Json(range))]), properties0);
	JsonObject(properties1);
}

lspTextEdit2Json(edit : LspTextEdit) -> Json {
	JsonObject([
		Pair("range", lspRange2Json(edit.range)),
		Pair("newText", JsonString(edit.newText)),
	]);
}

lspCompletionItem2Json(item : LspCompletionItem) -> Json {
	JsonObject(filtermap([
		Some(Pair("label", JsonString(item.label))),
		if (item.kind == 0) None() else Some(Pair("kind", JsonString(i2s(item.kind)))),
		Some(Pair("tags", JsonArray(map(item.tags, \tag -> JsonString(i2s(tag)))))),
		Some(Pair("detail", JsonString(item.detail))),
		Some(Pair("documentation", JsonString(item.documentation))),
		Some(Pair("deprecated", JsonBool(item.deprecated))),
		Some(Pair("preselect", JsonBool(item.preselect))),
		Some(Pair("sortText", JsonString(item.sortText))),
		Some(Pair("filterText", JsonString(item.filterText))),
		Some(Pair("insertText", JsonString(item.insertText))),
		Some(Pair("insertTextFormat", JsonString(i2s(item.insertTextFormat)))),
		maybeMap(item.textEdit, \edit -> Pair("textEdit", lspTextEdit2Json(edit))),
		Some(Pair("additionalTextEdits", JsonArray(map(item.additionalTextEdits, lspTextEdit2Json)))),
		Some(Pair("commitCharacters", JsonArray(map(item.commitCharacters, \ch -> JsonString(ch))))),
		maybeMap(item.command, \command -> Pair("command", lspCommand2Json(command))),
		if (item.data == JsonNull()) None() else Some(Pair("data", item.data))
	], idfn));
}

lspCompletionList2Json(list : LspCompletionList) -> Json {
	JsonObject([
		Pair("isIncomplete", JsonBool(list.isIncomplete)),
		Pair("items", JsonArray(map(list.items, lspCompletionItem2Json)))
	]);
}

lspRegistration2Json(registration : LspRegistration) -> Json {
	JsonObject(filtermap([
		Some(Pair("id", JsonString(registration.id))),
		Some(Pair("method", JsonString(registration.method))),
		if (registration.registerOptions == JsonNull()) None() else Some(Pair("registerOptions", registration.registerOptions))
	], idfn));
}

lspRegistrationParams2Json(params : LspRegistrationParams) -> Json {
	JsonObject([
		Pair("registrations", JsonArray(map(params.registrations, lspRegistration2Json)))
	]);
}

lspDocumentFilter2Json(documentFilter : LspDocumentFilter) -> Json {
	JsonObject(filtermap([
		if (documentFilter.language == "") None() else Some(Pair("language", JsonString(documentFilter.language))),
		if (documentFilter.scheme == "") None() else Some(Pair("scheme", JsonString(documentFilter.scheme))),
		if (documentFilter.pattern == "") None() else Some(Pair("pattern", JsonString(documentFilter.pattern)))
	], idfn));
}

lspTextDocumentRegistrationOptions2Json(options : LspTextDocumentRegistrationOptions) -> Json {
	JsonObject([
		Pair("documentSelector", JsonArray(map(options.documentSelector, lspDocumentFilter2Json)))
	]);
}

json2LspPosition(json : Json) -> Maybe<LspPosition> {
	line = getJsonIntField(json, "line", -1);
	char = getJsonIntField(json, "character", -1);
	if (line != -1 && char != -1) Some(LspPosition(line, char)) else None();
}

json2LspRange(json : Json) -> Maybe<LspRange> {
	maybeBind(json2LspPosition(getJsonObjectField(json, "start")), \start ->
		maybeMap(json2LspPosition(getJsonObjectField(json, "end")), \end ->
			LspRange(start, end)
		)
	);
}

json2LspLocation(json : Json) -> Maybe<LspLocation> {
	maybeBind(json2LspRange(getJsonObjectField(json, "range")), \range -> {
		uri = getJsonStringField(json, "uri", "");
		if (uri == "") None() else Some(LspLocation(parseURI(uri), range));
	});
}

json2LspCommand(json : Json) -> Maybe<LspCommand> {
	title = getJsonStringField(json, "title", "");
	command = getJsonStringField(json, "command", "");
	args = getJsonArrayField(json, "arguments");
	if (title == "" || command == "") None() else {
		Some(LspCommand(title, command, args));
	}
}

json2LspTextDocumentIdentifier(json : Json) -> Maybe<LspTextDocumentIdentifier> {
	uri = getJsonStringField(json, "uri", "");
	if (uri == "") None() else Some(LspTextDocumentIdentifier(parseURI(uri)));
}

json2LspTextDocumentItem(json : Json) -> Maybe<LspTextDocumentItem> {
	uri = getJsonStringField(json, "uri", "");
	languageId = getJsonStringField(json, "languageId", "");
	version = getJsonStringField(json, "version", "");
	text = getJsonStringField(json, "text", "");
	if (uri == "" || languageId == "" || version == "" || text == "") None() else {
		Some(LspTextDocumentItem(parseURI(uri), languageId, version, text));
	}
}

json2LspTextDocumentPositionParams(json : Json) -> Maybe<LspTextDocumentPositionParams> {
	maybeBind(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \doc ->
		maybeMap(json2LspPosition(getJsonObjectField(json, "position")), \position ->
			LspTextDocumentPositionParams(doc, position)
		)
	)
}

json2LspRename(json : Json) -> Maybe<LspRename> {
	maybeBind(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \doc ->
		maybeBind(json2LspPosition(getJsonObjectField(json, "position")), \position -> {
			newName = getJsonStringField(json, "newName", "");
			if (newName == "") None() else Some(LspRename(doc, position, newName));
		})
	)
}

json2LspExecuteCommandParams(json : Json) -> Maybe<LspExecuteCommandParams> {
	command = getJsonStringField(json, "command", "");
	args = getJsonArrayField(json, "arguments");
	if (command == "") None() else {
		Some(LspExecuteCommandParams(command, args));
	}
}

json2LspCompletionParams(json : Json) -> Maybe<LspCompletionParams> {
	maybeMap(json2LspTextDocumentPositionParams(json), \pos -> {
			context = getJsonObjectField(json, "context");
			LspCompletionParams(
				pos.textDocument, 
				pos.position, 
				LspCompletionContext(
					getJsonIntField(context, "triggerKind", 0), 
					getJsonStringField(context, "triggerCharacter", "")
				)
			);
		}
	);
}

json2LspVersionedTextDocumentIdentifier(json : Json) -> Maybe<LspVersionedTextDocumentIdentifier> {
	uri = getJsonStringField(json, "uri", "");
	version = getJsonStringField(json, "version", "");
	if (uri == "" || version == "") None() else Some(LspVersionedTextDocumentIdentifier(parseURI(uri), version));
}

json2LspDidChangeTextDocumentParams(json : Json) -> Maybe<LspDidChangeTextDocumentParams> {
	maybeMap(json2LspVersionedTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \textDocument ->
		LspDidChangeTextDocumentParams(textDocument, 
			filtermap(getJsonArrayField(json, "contentChanges"), json2LspTextDocumentContentChangeEvent)
		)
	);
}

json2LspTextDocumentContentChangeEvent(json : Json) -> Maybe<LspTextDocumentContentChangeEvent> {
	if (!fcJsonObjectHasField(json, "text")) None() else {
		text = getJsonStringField(json, "text", "");
		range = json2LspRange(getJsonObjectField(json, "range"));
		rangeLength = getJsonStringField(json, "rangeLength", "");
		Some(LspTextDocumentContentChangeEvent(
			switch (range) {
				Some(r): r;
				None(): LspRange(LspPosition(-1, -1), LspPosition(-1, -1));
			},
			if (rangeLength == "") -1 else s2i(rangeLength),
			text
		))
	}
}

json2LspDidSaveTextDocumentParams(json : Json) -> Maybe<LspDidSaveTextDocumentParams> {
	maybeMap(json2LspTextDocumentIdentifier(getJsonObjectField(json, "textDocument")), \textDocument ->
		LspDidSaveTextDocumentParams(textDocument, getJsonStringField(json, "text", ""))
	);
}

json2LspWorkspaceFolder(json : Json) -> Maybe<LspWorkspaceFolder> {
	uri = getJsonStringField(json, "uri", "");
	name = getJsonStringField(json, "name", "");
	if (uri == "") None() else Some(LspWorkspaceFolder(parseURI(uri), name));
}

json2LspClientCapabilities(json : Json) -> Maybe<LspClientCapabilities> {
	maybeBind(json2LspWorkspaceClientCapabilities(getJsonObjectField(json, "workspace")), \workspace ->
		maybeMap(json2LspTextDocumentClientCapabilities(getJsonObjectField(json, "textDocument")), \textDocument ->
			LspClientCapabilities(
				workspace,
				textDocument,
				getJsonObjectField(json, "experimental")
			)
		)
	);
}

json2LspWorkspaceClientCapabilities(json : Json) -> Maybe<LspWorkspaceClientCapabilities> {
	applyEdit = getJsonBoolField(json, "applyEdit", false);
	workspace = getJsonObjectField(json, "workspaceEdit");
	symbol = getJsonObjectField(json, "symbol");
	ro2kind = \ro -> {
		operation = toLowerCase(ro.s);
		if (operation == "create") Some(LspResourceOperationCreate()) else
		if (operation == "rename") Some(LspResourceOperationRename()) else
		if (operation == "delete") Some(LspResourceOperationDelete()) else None();
	}
	fail2kind = \f -> {
		fail_ = toLowerCase(f);
		if (fail_ == "abort") Some(LspFailureHandlingAbort()) else
		if (fail_ == "transactional") Some(LspFailureHandlingTtransactional()) else
		if (fail_ == "undo") Some(LspFailureHandlingUndo()) else 
		if (fail_ == "textonlytransactional") Some(LspFailureHandlingTextOnlyTransactional()) else None();
	}
	Some(LspWorkspaceClientCapabilities(
		getJsonBoolField(json, "applyEdit", false),
		getJsonBoolField(workspace, "documentChanges", false),
		filtermap(fcGetJsonStringArrayField(workspace, "resourceOperations"), ro2kind),
		fail2kind(getJsonStringField(workspace, "failureHandling", "")),
		getJsonBoolField(getJsonObjectField(json, "didChangeConfiguration"), "dynamicRegistration", false),
		getJsonBoolField(getJsonObjectField(json, "didChangeWatchedFiles"), "dynamicRegistration", false),
		getJsonBoolField(symbol, "dynamicRegistration", false),
		filtermap(fcGetJsonStringArrayField(getJsonObjectField(symbol, "symbolKind"), "valueSet"), 
			\val -> lookupTrie(onlyOnce(lspSymbolKindTrie, lspInitSymbolKindTrie), val.s)
		),
		getJsonBoolField(getJsonObjectField(json, "executeCommand"), "dynamicRegistration", false),
		getJsonBoolField(json, "workspaceFolders", false),
		getJsonBoolField(json, "configuration", false),
	));
}

json2LspTextDocumentClientCapabilities(json : Json) -> Maybe<LspTextDocumentClientCapabilities> {
	synchronization = getJsonObjectField(json, "synchronization");
	completion = getJsonObjectField(json, "completion");
	completionItem = getJsonObjectField(completion, "completionItem");
	format2kind = \f -> {
		format = toLowerCase(f.s);
		if (format == "plaintext") Some(LspMarkupPlaintext()) else
		if (format == "markdown") Some(LspMarkupMarkdown()) else None();
	}
	hover = getJsonObjectField(json, "hover");
	signature = getJsonObjectField(json, "signatureHelp");
	signatureInfo = getJsonObjectField(signature, "signatureInformation");
	symbol = getJsonObjectField(signature, "documentSymbol");
	declaration = getJsonObjectField(json, "declaration");
	definition = getJsonObjectField(json, "definition");
	typeDefinition = getJsonObjectField(json, "typeDefinition");
	implementation = getJsonObjectField(json, "implementation");
	codeAction = getJsonObjectField(json, "codeAction");
	codeAction2kind = \a -> {
		action = toLowerCase(a.s);
		if (action == "") Some(LspCodeActionEmpty()) else 
		if (action == "quickfix") Some(LspCodeActionQuickFix()) else 
		if (action == "refactor") Some(LspCodeActionRefactor()) else 
		if (action == "refactor.extract") Some(LspCodeActionRefactorExtract()) else 
		if (action == "refactor.inline") Some(LspCodeActionRefactorInline()) else 
		if (action == "refactor.rewrite") Some(LspCodeActionRefactorRewrite()) else 
		if (action == "source") Some(LspCodeActionSource()) else 
		if (action == "source.organizeimports") Some(LspCodeActionOrganizeImports()) else 
		Some(LspCodeActionCustom(a.s));
	}
	rename = getJsonObjectField(json, "rename");
	foldingRange = getJsonObjectField(json, "foldingRange");
	Some(LspTextDocumentClientCapabilities(
		getJsonBoolField(synchronization, "dynamicRegistration", false),
		getJsonBoolField(synchronization, "willSave", false),
		getJsonBoolField(synchronization, "willSaveWaitUntil", false),
		getJsonBoolField(synchronization, "didSave", false),
	
		getJsonBoolField(completion, "dynamicRegistration", false),
		getJsonBoolField(completionItem, "snippetSupport", false),
		getJsonBoolField(completionItem, "commitCharactersSupport", false),
		filtermap(fcGetJsonStringArrayField(completionItem, "documentationFormat"), format2kind),
		getJsonBoolField(completionItem, "deprecatedSupport", false),
		getJsonBoolField(completionItem, "preselectSupport", false),
		filtermap(fcGetJsonStringArrayField(getJsonObjectField(completion, "completionItemKind"), "valueSet"), 
			\val -> lookupTrie(onlyOnce(lspCompletionItemKindTrie, lspInitCompletionItemKindTrie), val.s)
		),
		getJsonBoolField(completion, "contextSupport", false),
	
		getJsonBoolField(hover, "dynamicRegistration", false),
		filtermap(fcGetJsonStringArrayField(hover, "contentFormat"), format2kind),
		
		getJsonBoolField(signature, "dynamicRegistration", false),
		filtermap(fcGetJsonStringArrayField(signatureInfo, "documentationFormat"), format2kind),
		getJsonBoolField(getJsonObjectField(signatureInfo, "parameterInformation"), "labelOffsetSupport", false),
	
		getJsonBoolField(getJsonObjectField(json, "references"), "dynamicRegistration", false),
		getJsonBoolField(getJsonObjectField(json, "documentHighlight"), "dynamicRegistration", false),
		
		getJsonBoolField(symbol, "dynamicRegistration", false),
		filtermap(fcGetJsonStringArrayField(getJsonObjectField(symbol, "symbolKind"), "valueSet"), 
			\val -> lookupTrie(onlyOnce(lspSymbolKindTrie, lspInitSymbolKindTrie), val.s)
		),
		getJsonBoolField(symbol, "hierarchicalDocumentSymbolSupport", false),
		
		getJsonBoolField(getJsonObjectField(json, "formatting"), "dynamicRegistration", false),
		getJsonBoolField(getJsonObjectField(json, "rangeFormatting"), "dynamicRegistration", false),
		getJsonBoolField(getJsonObjectField(json, "onTypeFormatting"), "dynamicRegistration", false),
	
		getJsonBoolField(declaration, "dynamicRegistration", false),
		getJsonBoolField(declaration, "linkSupport", false),
	
		getJsonBoolField(definition, "dynamicRegistration", false),
		getJsonBoolField(definition, "linkSupport", false),
	
		getJsonBoolField(typeDefinition, "dynamicRegistration", false),
		getJsonBoolField(typeDefinition, "linkSupport", false),
	
		getJsonBoolField(implementation, "dynamicRegistration", false),
		getJsonBoolField(implementation, "linkSupport", false),
		
		getJsonBoolField(codeAction, "dynamicRegistration", false),
		filtermap(fcGetJsonStringArrayField(getJsonObjectField(getJsonObjectField(codeAction, "codeActionLiteralSupport"), "codeActionKind"), "valueSet"), codeAction2kind),
		
		getJsonBoolField(getJsonObjectField(json, "codeLens"), "dynamicRegistration", false),
		getJsonBoolField(getJsonObjectField(json, "documentLink"), "dynamicRegistration", false),
		getJsonBoolField(getJsonObjectField(json, "colorProvider"), "dynamicRegistration", false),
	
		getJsonBoolField(rename, "dynamicRegistration", false),
		getJsonBoolField(rename, "prepareSupport", false),
		
		getJsonBoolField(getJsonObjectField(json, "publishDiagnostics"), "relatedInformation", false),
		
		getJsonBoolField(foldingRange, "dynamicRegistration", false),
		s2i(getJsonStringField(foldingRange, "rangeLimit", "-1")),
		getJsonBoolField(foldingRange, "lineFoldingOnly", false),
	));
}

json2LspInitializeParams(json : Json) -> Maybe<LspInitializeParams> {
	trace2kind = \tr -> 
		if (tr == "messages") LspTraceMessages() else 
		if (tr == "verbose") LspTraceVerbose() else LspTraceOff();
	maybeMap(json2LspClientCapabilities(getJsonObjectField(json, "capabilities")), \capabilities ->
		LspInitializeParams(
			s2i(getJsonStringField(json, "processId", "-1")),
			getJsonStringField(json, "clientInfoName", ""),
			getJsonStringField(json, "clientInfoVersion", "-1"),
			getJsonStringField(json, "rootPath", ""),
			parseURI(getJsonStringField(json, "rootUri", "")),
			getJsonObjectField(json, "initializationOptions"),
			capabilities,
			trace2kind(getJsonStringField(json, "trace", "")),
			filtermap(fcGetJsonStringArrayField(json, "workspaceFolders"), json2LspWorkspaceFolder)
		)
	);
}

fcJsonObjectHasField(json : Json, member : string) -> bool {
	switch (json) {
		JsonObject(members): exists(members, \p -> p.first == member);
		default: false;
	}
}

fcGetJsonStringArrayField(json: Json, field: string) -> [JsonString] {
	filtermap(getJsonArrayField(json, field), \m -> 
		switch (m) {
			JsonString(__): Some(m);
			default: None();
		}
	);
}
