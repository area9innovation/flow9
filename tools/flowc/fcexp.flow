import tools/flowc/fctype;

export {
	FcExp ::= FcLambda, FcCall, FcVar, FcLet, FcIf, FcSwitch, FcCast, FcSeq, 
			  FcCallPrim, FcConst, /*FcForeign, */ FcRequire, FcUnsafe;
		FcLambda(args: [FcFunArg], body: FcExp, info: FcInfo);
		FcCall(f: FcExp, args: [FcExp], info : FcInfo);
		FcVar(name: string, info : FcInfo);
		FcLet(name: string, type : FcType, e1: FcExp, e2: FcExp, info : FcInfo);
		FcIf(e1: FcExp, e2: FcExp, e3: FcExp, info : FcInfo);
		FcSwitch(x: FcVar, switchType : FcType, cases: [FcCase], info : FcInfo);
			// struct is "default" for default case
			FcCase(struct: string, argNames : [string], body: FcExp, info : FcInfo);
		FcCast(e: FcExp, tFrom : FcType, tTo : FcType, info : FcInfo);
		FcSeq(es: [FcExp], info : FcInfo);
		// FcForeign(payload : ?, es : [FcExp], info : FcInfo);
		FcCallPrim(op: FcPrim, es: [FcExp], info : FcInfo);
		FcRequire(flowfile : string, e : FcExp, info : FcInfo);
		FcUnsafe(name : string, fallback : FcExp, info : FcInfo);

	FcPrim ::= FcOrPrim, FcAndPrim, FcNotPrim,
		FcEqPrim, FcNePrim, FcLePrim, FcGePrim, FcLtPrim, FcGtPrim, 
		FcPlusPrim, FcMinusPrim, FcMulPrim, FcDivPrim, FcModPrim, FcNegPrim,
		FcArrayPrim, FcIndexPrim, 		
		FcDerefPrim, FcAssignPrim, FcRefPrim, 
		FcStructPrim, FcFieldPrim, FcSetMutablePrim,
		FcCreateClosurePrim, FcQuote, FcUnquote;

		FcOrPrim(); FcAndPrim(); FcNotPrim();
		FcEqPrim(); FcNePrim(); FcLePrim(); FcGePrim(); FcLtPrim(); FcGtPrim(); 
		FcPlusPrim(); FcMinusPrim(); FcMulPrim(); FcDivPrim(); FcModPrim(); FcNegPrim();
		FcArrayPrim(); FcIndexPrim();
		FcDerefPrim(); FcAssignPrim(); FcRefPrim(); 
		FcStructPrim(struct_name: string); FcFieldPrim(name: string); 
		FcSetMutablePrim(name: string);
		// creates a closure explicitly - appears after lambda lifting
		FcCreateClosurePrim(structName: string, functionName : string);
		FcQuote();
		FcUnquote();

	FcConst ::= FcVoid, FcDouble, FcInt, FcString, FcBool;
		FcVoid(info : FcInfo);
		FcDouble(d : double, info : FcInfo);
		FcInt(i : int, info : FcInfo);
		FcString(s : string, info : FcInfo);
		FcBool(b: bool, info : FcInfo);

	FcInfo(type : ref Maybe<FcType>, start : int, end : int);
}
