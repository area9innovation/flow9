import tools/common/pathutil;
import tools/common/logging;
import math/md5;
import lingo/linecolumn;
import tools/flowc/fctypeenv;
import tools/flowc/type_helpers;
import tools/flowc/incremental/fi2fc;
import tools/flowc/flowc_println;
import tools/flowc/typechecker2/gsubtype_graph;

export {
	// Register this desugared module into the environment, before it is type checked.
	// Sets up structures, checks for duplicates, and track dependencies.
	// Returns the updated FcTypeEnvGlobal and set of files ready to be processed next
	addDesugaredModuleToGlobal(tenv : FcTypeEnvProgram, module : FcModule) -> FcTypeEnvProgram;

	addErrorsToTypeEnv(tenv : FcTypeEnvProgram, errors : [FcError]) -> FcTypeEnvProgram;
	printFcError(config : CompilerConfig, env : FcTypeEnvGlobal, error : FcError) -> void;
	prepareInitialFlowcAcc(config : CompilerConfig) -> FlowcAcc;

	// Add the types we got from the typechecker to the environment
	mergeTypechecked2TypeEnv(typing : Tree<string, FcType>, fimodule : FiModule, tenv : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal) -> FcTypeEnvProgram;

	// Adds the typed module to the tree of modules, checking that we have consistent imports of the module
	addFiModuleToFcTypeEnv(tenv : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal, fimodule : FiModule) -> FcTypeEnvProgram;

	// Run a set of tasks in parallel or sequential mode, depdending on the compiler config
	runTasks(config : CompilerConfig, tasks : [() -> ?]) -> [?];

	// Returns a callback for deferred check of dependencies.
	fcDependencyChangedCallback(config : CompilerConfig, globEnv : FcTypeEnvGlobal, module : FiModule) -> () -> bool;

	printLocation(config : CompilerConfig, env : FcTypeEnvGlobal, fileinfo : FiFileInfo, start : int,end : int, message : string) -> void;
	makeLocation(config : CompilerConfig, env : FcTypeEnvGlobal, fileinfo : FiFileInfo, start : int, end : int) -> string;

	name2FimoduleInFiProgram(prog : FiProgram, flowfile : string, name : string) -> FiModule;

	name2FimoduleInFlowcAcc(prog : FlowcAcc, flowfile : string, name : string) -> FiModule;

	// Dump a message to a server log
	fcServerLog(message : string, conf : CompilerConfig) -> void;
	// Dump a message to a debug log, not to mess up with the normal logs.
	fcDebugLog(message : string, conf : CompilerConfig) -> void;
	// Update a config for 'compile-expression' option
	fcPrepareConfig(conf : CompilerConfig) -> Pair<CompilerConfig, () -> void>;

	getNameByLineCol(line : int, col : int, src : string) -> string;
	getNameByPos(pos : int, src : string) -> string;
	getFcInfo2ByLineCol(line : int, col : int, src : string) -> Maybe<FcInfo2>;
	getFcInfo2ByPos(pos : int, src : string) -> Maybe<FcInfo2>;
	getFcInfo2ByPos2(pos : int, allowed : string, src : string) -> Maybe<FcInfo2>;

	// Detects if a string is an char, allowed for id in flow.
	fcIsIdChar(s : string) -> bool;

	// Approximate borders of toplevel function/global variable expressions.
	// Returns a tree: a toplevel name is mapped onto a pair of start-end, 
	// of corresponding expression "{ ... }" in braces.
	fcApproxToplevels(src : string) -> Tree<string, Pair<int, int>>;

	// Simple string search utilities.
	forwardUntil(src : string, i : int, pred : (string) -> bool) -> int;
	backwardUntil(src : string, i : int, pred : (string) -> bool) -> int;
	forwardWhile(src : string, i : int, pred : (string) -> bool) -> int;
	backwardWhile(src : string, i : int, pred : (string) -> bool) -> int;
}

addDesugaredModuleToGlobal(tenv : FcTypeEnvProgram, module : FcModule) -> FcTypeEnvProgram {
	config = tenv.acc.config; 
	acc = tenv.acc;
	f = module.fileinfo.flowfile;
	names = acc.names;

	// OK, print errors from parsing and desugaring first
	addErrorsToTypeEnv(tenv, module.errors);

	errors : ref [FcError] = ref [];

	field2structs = foldTree(module.structs, names.field2structs, \name : string, st : FcTypeStruct, acc2 : Tree<string, [string]> -> {
		fold(st.args, acc2, \acc3 : Tree<string, [string]>, field : FcStructArg -> {
			treePushToArrayUnique(acc3, field.name, st.name)
		});
	});

	unions = foldTree(module.unions, names.unions, \name, st, acc2 -> {
		setTree(acc2, name, st)
	});

	barestructs = foldTree(module.structs, names.structs, \name, st, acc2 -> {
		setTree(acc2, name, st)
	});

	// Build a map from struct to what unions it is in
	struct2unions = foldTree(module.unions, names.struct2unions, \name, un : FcTypeUnion, acc2 -> {
		onError = \m -> refArrayPush(errors, FcError(m, [
					FcPosition(f, un.info.start, un.info.end),
				]));
		structsInUnion = getStructsInUnion(barestructs, unions, un, onError);
		fold(structsInUnion, acc2, \acc3, sn -> {
			treePushToArrayUnique(acc3, sn, un.name)
		});
	});

	structTypars = foldTree(module.structs, names.structTypars, \name, st, acc2 -> {
		ntp = sizeSet(collectTyparsGlobal(tenv, st, makeSet()));
		// fcPrintln(name + " has " + i2s(ntp));
		setTree(acc2, name, ntp);
	});

	structs = foldTree(module.structs, names.structs, \name, st, acc2 -> {
		// OK, because of polymorphism in unions, we have to see if this struct
		// is part of any unions.
		unionNames = getTreeArrayValue(struct2unions, name);
		st2 = if (unionNames == []) {
			// No, just keep it as is
			st;
		} else {
			// OK, it is part of union(s). Do those have any type parameters?
			// If they do, we need to have at least as many here. See test 23.
			// Stephen Dolan confirmed that in this situation, we need to
			// make sure the constituent structs have as many type parameters
			// as the union itself.
			unionTypars = map(unionNames, \un -> {
				mu : Maybe<FcTypeUnion> = lookupTree(unions, un);
				switch (mu) {
					None(): 0;
					Some(ud): {
						// Grab the ?, instead of checking the number of type pars, since they can be instantiated
						tps = collectTyparsGlobal(tenv, ud, makeSet());
						sizeSet(tps);
					}
				}
			});
			maxUnionTypars = fold(unionTypars, 0, max);

			strict = getConfigParameter(acc.config.config, "strict");
			if (strict == "1") {
				// Do a check that we have a fixed number of typars
				iter(unionTypars, \ntp -> {
					if (ntp != maxUnionTypars) {
						refArrayPush(errors, FcError("Unions for " + name + " have different number of type parameters: " + strGlue(unionNames, ", "), [
							FcPosition(f, st.info.start, st.info.end),
						]));
					}
				});
			}

			// Extend the type parameters
			tps = st.typars;
			utps = generate(0, maxUnionTypars, \i -> {
				if (i < length(tps)) tps[i]
				else {
					typar = strLeft("????????????????????", i + 1);
					// fcPrintln("Adding " + typar + " to " + name);
					FcTypeParameter(typar, st.info);
				}
			});
			FcTypeStruct(name, utps, st.args, st.info);
		}

		setTree(acc2, name, st2)
	});

	checkDuplicate = \acc2 : Tree<string, string>, name : string -> {
		exist = lookupTree(acc2, name);
		switch (exist) {
			None(): {}
			Some(file): {
				switch (lookupTree(acc.modules, file)) {
					Some(prevmodule): {
						nextinfo = findModuleNameInfo(module, name);
						if (f != file || prevmodule.start != nextinfo.start) {
							refArrayPush(errors, FcError("Duplicate name '" + name + "'", [
								FcPosition(f, nextinfo.start, nextinfo.end),
								FcPosition(file, prevmodule.start, prevmodule.end),
							]));
						}
					}
					None(): {
						//fcPrintln("module " + file + " not found");
						nextinfo = findModuleNameInfo(module, name);
						if (f != file) {
							refArrayPush(errors, FcError("Duplicate name '" + name + "'", [
								FcPosition(f, nextinfo.start, nextinfo.end)
							]));
						}
					}
				}
			}
		}
	}

	set = \acc2 : Tree<string, string>, name : string -> {
		// Check for collisions!
		checkDuplicate(names.struct2module, name);
		checkDuplicate(names.union2module, name);
		checkDuplicate(names.function2module, name);
		checkDuplicate(names.globalVar2module, name);
		checkDuplicate(names.native2module, name);

		setTree(acc2, name, f);
	}

	newnames = FcGlobalNames(
		foldTree(module.structs, names.struct2module, \name, __, acc2 -> {
			set(acc2, name);
		}),
		foldTree(module.unions, names.union2module, \name, __, acc2 -> {
			set(acc2, name);
		}),
		foldTree(module.functions, names.function2module, \name, __, acc2 -> {
			set(acc2, name);
		}),
		foldTree(module.globalVars, names.globalVar2module, \name, __, acc2 -> {
			set(acc2, name);
		}),
		foldTree(module.natives, names.native2module, \name, __, acc2 -> {
			set(acc2, name);
		}),
		structs,
		unions,
		struct2unions,
		field2structs,
		{
			top1 = foldTree(module.functions, names.toplevel, \name, fn, acc2 -> {
				setTree(acc2, name, fn)
			});
			top2 = foldTree(module.globalVars, top1, \name, v, acc2 -> {
				setTree(acc2, name, v)
			});
			foldTree(module.natives, top2, \name, n, acc2 -> {
				setTree(acc2, name, n)
			});
		},
		structTypars,
		setTree(
			names.moduleImports, 
			module.fileinfo.flowfile,
			fold(module.imports, makeSet1(module.fileinfo.flowfile), \acc2, imp -> {
					mergeSets(
						mergeSets(acc2, 
							lookupTreeDef(names.moduleImports, imp.flowfile, makeSet())
						),
						makeSet1(imp.flowfile)
					)
				}
			)
		)
	);

	// Print the errors immediately
	tenv2 = addErrorsToTypeEnv(tenv, ^errors);

	// OK, now mark that we are done with the dependency
	flowfile = module.fileinfo.flowfile;
	ndep = resolveDependency(acc.dependency, flowfile);

	ndep2 = extractNonDependent(ndep);
	nacc = FlowcAcc(
		ndep2.first,
		removeFromTree(acc.preloaded, flowfile),
		acc.modules,
		acc.file2flowfile,
		arrayPush(acc.traversal, flowfile),
		newnames,
		acc.config,
		acc.tyvarIdFactory,
		acc.tyvarIdGroup,
		acc.tracer
	);

	// TODO: Update the subtype graph
	subtype = addFcModuleToGSubtypeGraph(tenv2.subtypeGraph, newnames, module);

	// OK, now this dude is ready for type checking
	FcTypeEnvProgram(tenv2 with acc = nacc, subtypeGraph = subtype)
}

getStructsInUnion(structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, union : FcTypeUnion, onError : (string) -> void) -> [string] {
	fold(union.typenames, [], \acc, tn -> {
		concat(acc, getStructsInName(structs, unions, tn.name, onError))
	});
}

getStructsInName(structs : Tree<string, FcTypeStruct>, unions : Tree<string, FcTypeUnion>, name : string, onError : (string) -> void) -> [string] {
	if (containsKeyTree(structs, name)) {
		[name]
	} else {
		un = lookupTree(unions, name);
		switch (un) {
			None(): {
				onError("Unknown struct/union name " + name);
				[];
			}
			Some(ut): {
				getStructsInUnion(structs, unions, ut, onError);
			}
		}
	}
}

findModuleNameInfo(module : FcModule, name : string) -> FcInfo2 {
	eitherMap(lookupTree(module.structs, name), \st -> st.info,
		eitherMap(lookupTree(module.unions, name), \un -> un.info,
		eitherMap(lookupTree(module.functions, name), \fn -> copyFcInfo2(fn.declInfo),
		eitherMap(lookupTree(module.globalVars, name), \gv -> copyFcInfo2(gv.declInfo),
		eitherMap(lookupTree(module.natives, name), \nt -> copyFcInfo2(nt.info), FcInfo2(0, 0)
	)))));
}

addErrorsToTypeEnv(tenv : FcTypeEnvProgram, errors : [FcError]) -> FcTypeEnvProgram {
	iter(errors, \e -> addFcTypeError(tenv, e));
	tenv
}

printFcError(config : CompilerConfig, env : FcTypeEnvGlobal, error : FcError) -> void {
	un = uniq(error.positions);

	if (length(error.positions) == 0) {
		fcPrintln(error.message, config.threadId);
	}

	iteri(un, \i : int, p : FcPosition -> {
		err =  (if (i == 0) " " + error.message else " and here");
		fileinfo = switch (fcLoadFromCache(env, p.file)) {
			None():  fcfileinfo2fi(getFcFileInfo(p.file, config));
			Some(cached): cached.loaded.module.fileinfo;
		}
		printLocation(config, env, fileinfo, p.start, -1, "Error: " + err);
	});
}

prepareInitialFlowcAcc(config : CompilerConfig) -> FlowcAcc {
	// Our global id tracker with buckets
	idfactory = makeIdFactory(0, 10000);
	// A global one without buckets
	globalid = makeIdFactory(10000000, 0);	// With bucket zero, it becomes atomic

	FlowcAcc(
		makeDependencyTracker(),
		makeTree(),
		makeTree(), 
		makeTree(),
		[],
		dummyFcGlobalNames, 
		config, 
		idfactory,
		makeIdGroup(globalid),
		makeTracer()
	)
}

mergeTypechecked2TypeEnv(typing : Tree<string, FcType>, fimodule : FiModule, tenv0 : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal) -> FcTypeEnvProgram {
	tenv = addFiModuleToFcTypeEnv(tenv0, globEnv, fimodule);

	acc = tenv.acc;
	names = acc.names;

	FcTypeEnvProgram(
		tenv 
		with acc = FlowcAcc(
			acc with names = FcGlobalNames(
				names with toplevel = updateToplevel(names.toplevel, fimodule)
			)
		),
		types = foldTree(typing, tenv.types, \name, type, a -> 
			setTree(a, name, type)
		),
	)
}

// The functions tree is used to resolve fallback natives
updateToplevel(toplevel : Tree<string, FcDeclaration>, fimodule : FiModule) -> Tree<string, FcDeclaration> {
	funcs = fold(fimodule.functions, makeTree(), \acc, fn -> setTree(acc, fn.name, fifunctiondec2fc(fn, true)));
	toplevel1 = foldTree(funcs, toplevel, \name, fn, acc -> setTree(acc, name, fn));
	toplevel2 = fold(fimodule.globalVars, toplevel1, \acc, gv -> setTree(acc, gv.name, figlobalvar2fc(gv)));
	fold(fimodule.natives, toplevel2, \acc, nt -> setTree(acc, nt.name, finative2fc(funcs, nt)))
}

addFiModuleToFcTypeEnv(tenv : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal, fimodule : FiModule) -> FcTypeEnvProgram {

	switch (fcLoadFromCache(globEnv, fimodule.fileinfo.flowfile)) {
		None(): {
			fcAddToCache(globEnv, fimodule.fileinfo.flowfile, FcLoaded(fimodule, \-> true));
		}
		Some(loaded): {
			// Creation of this callback automatically adds appropriate FcLoaded to cache.
			fcDependencyChangedCallback(tenv.acc.config, globEnv, fimodule);
			{ }
		}
	}

	acc = tenv.acc;
	exist = lookupTreeDef(acc.file2flowfile, fimodule.fileinfo.fullpath, "");
	if (exist != "" && exist != fimodule.fileinfo.flowfile) {
		// TODO: Make this an error instead
		fcPrintln(fimodule.fileinfo.fullpath + " imported both as " + fimodule.fileinfo.flowfile + " and " + exist, tenv.acc.config.threadId);
	}

	FcTypeEnvProgram(
		tenv with acc = FlowcAcc(acc with
			// A set of what global files we have loaded to catch duplicate imports by different flowpaths
			modules = setTree(acc.modules, fimodule.fileinfo.flowfile, fimodule),
			file2flowfile = setTree(acc.file2flowfile, fimodule.fileinfo.fullpath, fimodule.fileinfo.flowfile),
		)
	);
}

runTasks(config : CompilerConfig, tasks : [() -> ?]) -> [?] {
	// Note that concurrent() might not work for some targets
	if (isConfigParameterFalse(config.config, "parallel")) sequential(true, tasks)
	else concurrent(true, tasks)
}
   
fcDependencyChangedCallback(config : CompilerConfig, globEnv : FcTypeEnvGlobal, module : FiModule) -> () -> bool {
	checkMd5 = isConfigParameterTrue(config.config, "use-md5");
	changed = \ -> {
		check_imports = exists(module.imports, \imp ->
			switch (fcLoadFromCache(globEnv, imp.flowfile)) {
				Some(cachedInc): {
					cachedInc.outdated || 
					module.fileinfo.lastupdate < cachedInc.loaded.module.fileinfo.lastupdate || 
					cachedInc.loaded.dependencyChanged();
				}
				None(): {
					fcPrintln("ERROR: a module " + imp.flowfile + " must be already in cache, but is not there", config.threadId); true; 
				}
			}
		);
		check_string_includes = exists(module.stringIncludes, \inc ->fiFileInfoFileChanged(inc, config));
		ret = check_imports || check_string_includes;
		fcAddToCache(globEnv, module.fileinfo.flowfile, FcLoaded(module, \ -> ret));
		ret
	}
	fcAddToCache(globEnv, module.fileinfo.flowfile, FcLoaded(module, changed));
	changed
}

printLocation(config : CompilerConfig, env : FcTypeEnvGlobal, fileinfo : FiFileInfo, start : int, end : int, message : string) -> void {
	location = makeLocation(config, env, fileinfo, start, end) + " " + message;
	fcPrintln(location, config.threadId);
}

makeLocation(config : CompilerConfig, env : FcTypeEnvGlobal, fileinfo : FiFileInfo, start : int, end : int) -> string {
	if (fileinfo.fullpath == "") "" else {
		code = fcFileSource(env, fileinfo.fullpath);
		resolver = makeLineResolver(code);
		s = findLine(resolver, start);
		if (isConfigParameterTrue(config.config, "legacy-format")) {
			fileinfo.fullpath + ":" + i2s(s.lineno) + " (" + fileinfo.fullpath + ":" + i2s(s.lineno) + ")";
		} else {
			if (end < 0) {
				switch (getFcInfo2ByPos(start, code)) {
					Some(info): {
						s1 = findLine(resolver, info.start);
						e1 = findLine(resolver, info.end);
						fileinfo.fullpath + ":" + i2s(s1.lineno) + ":" + i2s(s1.lineIndex + 1) + ":" + i2s(e1.lineno) + ":" + i2s(e1.lineIndex + 1) + ":";
					}
					None(): {
						fileinfo.fullpath + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":";
					}
				}
			} else {
				e = findLine(resolver, end);
				fileinfo.fullpath + ":" + i2s(s.lineno) + ":" + i2s(s.lineIndex + 1) + ":" + i2s(e.lineno) + ":" + i2s(e.lineIndex + 1) + ":";
			}
		}
	}
}

name2FimoduleInFiProgram(prog : FiProgram, flowfile : string, name : string) -> FiModule {
	globals = prog.names;
	modname = lookupTreeDef(globals.struct2module, name,
		lookupTreeDef(globals.union2module, name,
			lookupTreeDef(globals.function2module, name,
				lookupTreeDef(globals.globalVar2module, name,
					lookupTreeDef(globals.native2module, name, flowfile)
				)
			)
		)
	);
	lookupTreeDef(prog.modules, modname, dummyFiModule)
}

name2FimoduleInFlowcAcc(prog : FlowcAcc, flowfile : string, name : string) -> FiModule {
	globals = prog.names;
	modname = lookupTreeDef(globals.struct2module, name,
		lookupTreeDef(globals.union2module, name,
			lookupTreeDef(globals.function2module, name,
				lookupTreeDef(globals.globalVar2module, name,
					lookupTreeDef(globals.native2module, name, flowfile)
				)
			)
		)
	);
	lookupTreeDef(prog.modules, modname, dummyFiModule)
}

fcServerLog(message : string, conf : CompilerConfig) -> void {
	log_file = getConfigParameterDef(conf.config, "server-log", getFlowDir() + 
		"/.log/flowc_" + getConfigParameter(conf.config, "server-mode") + "_server.log");
	log_dir = fcDirName(log_file);
	if (log_dir != "") {
		err = ensureDirectoryExists(log_dir);
		if (err != "") {
			fcPrintln(err, conf.threadId);
		}
	}
	if (log_file != "") {
		log_size = s2i(getConfigParameterDef(conf.config, "log-max-lines", "128"));
		message_size = getConfigParameterDef(conf.config, "log-max-message", "4096");
		if (isDigits(message_size)) {
			writeLogMessage(fcCutLongStringUpTo(message, s2i(message_size)), log_file, log_size);
		} else {
			writeLogMessage(message, log_file, log_size);
		}
	}
}

fcDebugLog(message : string, conf : CompilerConfig) -> void {
	log_file = getConfigParameterDef(conf.config, "debug-log", getFlowDir() + "/.log/flowc_debug.log");
	log_dir = fcDirName(log_file);
	if (log_dir != "") {
		err = ensureDirectoryExists(log_dir);
		if (err != "") {
			fcPrintln(err, conf.threadId);
		}
	}
	if (log_file != "") {
		log_size = s2i(getConfigParameterDef(conf.config, "log-max-lines", "128"));
		message_size = getConfigParameterDef(conf.config, "log-max-message", "4096");
		if (isDigits(message_size)) {
			writeLogMessage(fcCutLongStringUpTo(message, s2i(message_size)), log_file, log_size);
		} else {
			writeLogMessage(message, log_file, log_size);
		}
	}
}

fcCutLongStringUpTo(str : string, up_to : int) -> string {
	if (strlen(str) < up_to) str else {
		strLeft(str, up_to / 2) + "...[" + i2s(strlen(str) - up_to) + " is cut off ]..." + strRight(str, strlen(str) - (up_to / 2));
	}
}

fcPrepareConfig(conf : CompilerConfig) -> Pair<CompilerConfig, () -> void> {
	if (!isConfigParameterSet(conf.config, "compile-expression")) Pair(conf, nop) else {
		expr = getConfigParameter(conf.config, "compile-expression");
		fileinfo = getFcFileInfo(conf.flowfile, conf);
		file = trimFlowfile(fileinfo.fullpath, conf.includes, getConfigParameterDef(conf.config, "working-dir", ""));
		file_dir = dirName(fileinfo.fullpath);
		file_path = file_dir + "/___tmp_expr___.flow";
		file_str = "import " + file + ";\n\n ___tmpvar___ = " + expr + ";\n\n";
		setFileContent(file_path, file_str);
		upd_conf = CompilerConfig(conf with flowfile = "___tmp_expr___.flow");
		Pair(upd_conf, \ -> {
			deleteFile(file_path);
			{}
		});
	}
}

getNameByLineCol(line : int, col : int, src : string) -> string {
	resolver = makeLineResolver(src);
	getter = \c -> getNameByPos(findLineIndex(resolver, line, c), src);
	name = getter(col);
	// Fix for vscode behavior: it may give a first column after the last symbol if a word was selected.
	if (name != "" || col <= 0) name else getter(col - 1);
}

getNameByPos(pos : int, src : string) -> string {
	eitherMap(getFcInfo2ByPos(pos, src), \info -> substring(src, info.start, info.end - info.start + 1), "");
}

getFcInfo2ByLineCol(line : int, col : int, src : string) -> Maybe<FcInfo2> {
	resolver = makeLineResolver(src);
	getFcInfo2ByPos(findLineIndex(resolver, line, col), src);
}

getFcInfo2ByPos(pos : int, src : string) -> Maybe<FcInfo2> {
	if (pos < 0 || pos >= strlen(src) || !fcIsIdChar(getCharAt(src, pos))) None() else {
		start = for(pos, 
			\i -> if (i <= 0) false else fcIsIdChar(getCharAt(src, i - 1)), 
			\i -> i - 1
		);
		end = for(pos, 
			\i -> if (i + 1 >= strlen(src)) false else fcIsIdChar(getCharAt(src, i + 1)), 
			\i -> i + 1
		);
		if (isDigit(getCharAt(src, start))) None() else Some(FcInfo2(start, end));
	}
}

getFcInfo2ByPos2(pos : int, allowed : string, src : string) -> Maybe<FcInfo2> {
	ok_char = \c -> fcIsIdChar(c) || strContains(allowed, c);
	if (pos < 0 || pos >= strlen(src) || !ok_char(getCharAt(src, pos))) None() else {
		start = for(pos, 
			\i -> if (i <= 0) false else ok_char(getCharAt(src, i - 1)), 
			\i -> i - 1
		);
		end = for(pos, 
			\i -> if (i + 1 >= strlen(src)) false else ok_char(getCharAt(src, i + 1)), 
			\i -> i + 1
		);
		if (isDigit(getCharAt(src, start))) None() else Some(FcInfo2(start, end));
	}
}

fcIsIdChar(s : string) -> bool {
	s == "_" || isLetter(s) || isDigit(s);
}

fcMatchingBrackets(src : string) -> [Pair<int,int>] {
	fold(enumFromTo(0, strlen(src) - 1), Triple([], -1, 0), \acc, i ->
		if (getCharAt(src, i) == "{") {
			if (acc.third == 0) {
				Triple(acc.first, i, 1);
			} else {
				Triple(acc.first, acc.second, acc.third + 1);
			}
		} else if (getCharAt(src, i) == "}") {
			if (acc.third == 1) {
				Triple(concat(acc.first, [Pair(acc.second, i)]), -1, 0);
			} else {
				Triple(acc.first, acc.second, acc.third - 1);
			}
		} else {
			acc;
		}
	).first;
}

forwardUntil(src : string, i : int, pred : (string) -> bool) -> int {
	if (i < 0 || i >= strlen(src)) -1 else
	if (pred(getCharAt(src, i))) i else
	forwardUntil(src, i + 1, pred);
}

backwardUntil(src : string, i : int, pred : (string) -> bool) -> int {
	if (i < 0 || i >= strlen(src)) -1 else
	if (pred(getCharAt(src, i))) i else
	backwardUntil(src, i - 1, pred);
}

forwardWhile(src : string, i : int, pred : (string) -> bool) -> int {
	if (i < 0 || i >= strlen(src) || !pred(getCharAt(src, i))) -1 else
	if (!pred(getCharAt(src, i + 1))) i else
	forwardWhile(src, i + 1, pred);
}

backwardWhile(src : string, i : int, pred : (string) -> bool) -> int {
	if (i < 0 || i >= strlen(src) || !pred(getCharAt(src, i))) -1 else
	if (!pred(getCharAt(src, i - 1))) i else
	backwardWhile(src, i - 1, pred);
}

fcApproxToplevels(src : string) -> Tree<string, Pair<int, int>> {
	fold(fcMatchingBrackets(src), makeTree(), \acc, pair -> {
		bracket_depth = ref 0;
		border = max(
			backwardUntil(src, pair.first, \s -> s == "="), 
			backwardUntil(src, pair.first, \s -> {
				if (s == ")") bracket_depth := ^bracket_depth + 1 else 
				if (s == "(") bracket_depth := ^bracket_depth - 1;
				s == "(" && ^bracket_depth == 0;
			})
		);
		if (border == -1) acc else { 
			id_end = backwardUntil(src, border, fcIsIdChar);
			id_beg = backwardWhile(src, id_end, fcIsIdChar);
			if (id_end == -1 || id_beg == -1) acc else {
				name = substring(src, id_beg, id_end - id_beg + 1);
				setTree(acc, name, pair);
			}
		}
	});
}

