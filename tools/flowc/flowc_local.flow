import text/serialize;
import formats/lsp;
import tools/flowc/flowc_println;
import tools/flowc/flowc_find;
import tools/flowc/flowc_usage;
import tools/flowc/flowc_version;
import tools/flowc/flowc_rename;
import tools/flowc/flowc_outline;
import tools/flowc/backends/build;
import tools/flowc/manipulation/deadcode;
import tools/flowc/manipulation/cse;
import tools/flowc/manipulation/cse_global;
import tools/flowc/manipulation/lint;
import tools/flowc/manipulation/xliff;

// We do not want that old peg compiler
forbid lingo/pegcode/grammar2code;
forbid lingo/flow/stringtools;
forbid lingo/flow/treetools;

export {
	// Run a task, described by a config, with a current instance of flowc
	runConfigLocally(config : CompilerConfig, globalEnv : FcTypeEnvGlobal, onRunComplete : (int) -> void) -> void;
}

fcCompileUnittests(config : CompilerConfig, globEnv : FcTypeEnvGlobal, folder : string, showStopper : (int) -> void) -> void {
	tests = readDirectory(folder);
	skipp = getConfigParameter(config.config, "skip");
	skips = if (skipp == "") [] else map(strSplit(skipp, ","), \t -> "test" + t);

	compile = \file -> {
		fcPrintln("Testing " + file, config.threadId);
		starttime = timestamp();

		config1 = CompilerConfig(updateJsConfig(config, file) with flowfile = file);

		fcCompile(config1, globEnv, \e -> {
			fcPrintln(d2st((timestamp() - starttime) / 1000.0, 2) + "s\n", config.threadId);
		});
	}

	iter(tests, \test -> {
		if (skips != [] && exists(skips, \skip -> startsWith(test, skip))) {
			fcPrintln("Skipping " + test, config.threadId);
		} else {
			file = folder + "/" + test + "/" + test + ".flow";
			if (isDirectory(folder + "/" + test) && fileExists(file)) {
				compile(file);
			} else {
				file1 = folder + (if (endsWith(folder, "/")) "" else "/") + test;
				if (endsWith(file1, ".flow") && fileExists(file1)) {
					compile(file1);
				}
			}
		}
	});
	fcPrintln("Test complete", config.threadId);
	showStopper(0);
}

fcCompile(config : CompilerConfig, globEnv : FcTypeEnvGlobal, showStopper : (int) -> void) -> void {
	forceBuild = isConfigParameterTrue(config.config, "force-build");
	ensureIncrementalDirectoryExists(config);
	parsedAndChecked = parseAndTypecheckProgram(config, globEnv, config.flowfile);
	progTypechecked = parsedAndChecked.first;
	errors = ref parsedAndChecked.second;

	if (^errors == 0 || forceBuild) {
		progOptimized = doFiProgramAnalysis(globEnv, progTypechecked,
			\err -> {
				errors := ^errors + 1;
				printFiError(progTypechecked, err)
			},
			config.flowfile
		);
		if (^errors == 0 || forceBuild) {
			if (^errors != 0 && forceBuild) {
				fcPrintln("WARNING: Building program despite of type check errors (force-build=1)", config.threadId);
			}
			t = timestamp();
			if (isConfigParameterTrue(config.config, "dump-program")) {
				fcPrintBinary(serialize(progOptimized), config.threadId);
			}
			if (isConfigParameterSet(config.config, "compile-expression")) {
				switch (lookupTree(progOptimized.names.toplevel, "___tmpvar___")) {
					Some(decl): {
						switch (decl) {
							FiGlobalVar(__, value, __,__,__): fcPrintBinary(serialize(value), config.threadId);
							default: fcPrintln("___tmpvar___ is not a var", config.threadId);
						}
					}
					None(): fcPrintln("___tmpvar___ is not found", config.threadId);
				}
			}
			buildFiProgram(progOptimized, globEnv, \code -> {
				incrementTimePhase(getTimePhases(config.threadId).build, t);
				showStopper(code)
			});
		} else {
			showStopper(4);
		}
	} else {
		showStopper(3);
	}
}

// Here code analysis for  FiProgram is done:
// - callgraph output
// - check for unused symbols
// - dead code elimination
// - common sub-expression elimination
// - optimizations
doFiProgramAnalysis(env : FcTypeEnvGlobal, prog : FiProgram, onError : (FcError) -> void, file : string) -> FiProgram {
	config = prog.config.config;

	callgraphFilename = getConfigParameter(config, "callgraph");
	if (callgraphFilename != "") {
		printCallGraph(callgraphFilename, prog);
	}

	// Handle all switches that look and dump info about the program
	handleFindOptions(env, file, prog);

	// Extract translation data from program
	xliff = isConfigParameterTrue(config, "xliff");
	if (xliff) {
		saveXliffData(prog, changeFileExt(fileNameOnly(file), ".xlf"));
	}

	lint = getConfigParameterDef(config, "lint", "0");
	findUnusedLocalsParam = getConfigParameterDef(config, "find-unused-locals", "0");
	if (lint >= "1"|| findUnusedLocalsParam != "0") {
		lintCode(prog, env, isConfigParameterTrue(config, "lint-picky"), onError);
		findUnusedLocals(prog, findUnusedLocalsParam == "2", onError)
	}

	findUnusedExportsParam = getConfigParameterDef(config, "find-unused-exports", "0");
	if (lint >= "2" || findUnusedExportsParam != "0") {
		findUnusedExports(prog, findUnusedExportsParam == "2", onError)
	}

	prog_elim =
		if (isParameterFalse(getConfigParameter(config, "dce")) 
			|| isConfigParameterTrue(config, "readable")
			|| getConfigParameterDef(config, "inca", "") != "") {
			prog
		} else {
			if (prog.config.verbose >= 1) fcPrintln("Dead code elimination...", prog.config.threadId);
			preservedNames = fold(strSplit(getConfigParameterDef(config, "dce-preserved-names", ""), ","), makeSet(), \accPn, v -> 
				if (v != "") insertSet(accPn, v) else accPn
			);
			dceRemoveMain = isConfigParameterTrue(config, "dce-remove-main");
			// don't include globals (even if they have side-effects) to the initial used names set at DCE
			removeGlobals = isConfigParameterTrue(config, "dce-force-remove-globals");
			// forcefully eliminate names from the given file at DCE
			// file should contain names line-by-line; everything after '//' is skipped
			eliminateNamesFile = getConfigParameterDef(config, "dce-force-eliminate-names-file", "");
			eliminateNames = if (eliminateNamesFile == "") {
				makeSet();
			} else {
				workingDir = getConfigParameterDef(config, "working-dir", "");
				eliminateNamesFileResolved = if (workingDir == "") eliminateNamesFile else {
					workingDir + "/" + eliminateNamesFile
				};
				eliminateNamesFileContent = getFileContent(eliminateNamesFileResolved);
				if (eliminateNamesFileContent == "") {
					onError(FcError("dce-force-eliminate-names-file: file not fount or empty", []));
					makeSet();
				} else {
					fold(strSplit(eliminateNamesFileContent, "\n"), makeSet(), \acc, v -> {
						v1 = trim(takeBefore(v, "//", v));
						if (v1 != "") insertSet(acc, v1) else acc
					});
				}
			}
			// TODO: use common effects for dead code and optimizations
			deadFiCode(prog, collectFiEffects(prog), preservedNames, eliminateNames, dceRemoveMain, removeGlobals, prog.config.verbose);
		};

	cse = if (isConfigParameterTrue(config, "cse") || isConfigParameterTrue(config, "cse-global")) {
		t = timestamp();
		if (prog.config.verbose >= 1) fcPrintln("Common subexpression elimination...", prog.config.threadId);
		cse_result = if (isConfigParameterTrue(config, "cse-global")) {
			csegFiProgram(prog_elim, env);
		} else {
			cseFiProgram(prog_elim);
		}
		incrementTimePhase(getTimePhases(prog.config.threadId).cse, t);
		cse_result
	} else prog_elim;

	t = timestamp();
	prog_optimized = optimizeCode(cse, env, file, makeTree());
	incrementTimePhase(getTimePhases(prog.config.threadId).optimize, t);
	prog_optimized
}

printCallGraph(filename : string, prog : FiProgram) -> void {
	lines = concatA(map(getTreeValues(prog.modules), \module -> {
		config = prog.config.config;
		useFullPath = isConfigParameterTrue(config, "callgraph-fullpath");

		heading = "*** file: " + (if (useFullPath) module.fileinfo.fullpath else {module.fileinfo.flowfile + ".flow"});
		functions = map(module.functions, \f : FiFunctionDec ->
			Pair(f.name, fifreevars(f.lambda))
		);
		natives = map(module.natives, \f : FiNativeDec ->
			Pair(f.name,
				switch (f.fallbackLambda) {
					FiLambda(__, __, __, __): fifreevars(f.fallbackLambda);
					FiVoid(__): makeSet();
					default: {
						fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, f.fallbackLambda), prog.config.threadId);
						makeSet()
					}
				}
			)
		);
		lines2 = map(concat(natives, functions), \p : Pair<string, Set<string>> ->
			p.first + ": " + strGlue(set2array(p.second), " ")
		);
		concat([heading], lines2)
	}));
	if (setFileContent(filename, strGlue(map(lines, \l -> l + "\n"), ""))) {}
	else fcPrintln("Cannot write callgraph to file '" + filename + "'", prog.config.threadId);
}

runConfigLocally(config : CompilerConfig, globalEnv : FcTypeEnvGlobal, onRunComplete : (int) -> void) -> void {
	starttime = timestamp();
	showStopper = \code -> {
		endtime = timestamp();
		getTimePhases(config.threadId).total := endtime - starttime;

		if (code == 0 && isConfigParameterTrue(config.config, "timephases")) {
			displayTimePhase(config);
		}
		fcPrintln(d2st((endtime - starttime) / 1000.0, 2) + "s", config.threadId);

		if (isConfigParameterTrue(config.config, "dot")) {
		} else {
			onRunComplete(code);
		}
	}
	file = config.flowfile;
	line = s2i(getConfigParameterDef(config.config, "exp-line", "-1"));
	col = s2i(getConfigParameterDef(config.config, "exp-column", "-1"));
	renameSymbol = getConfigParameter(config.config, "rename");
	// The current state of source file (in editor) may have changes, which make it
	// different from the file on the hard disk and which are tracked in cache.
	// This function returns updated current FiFileInfo
	current_fileinfo = \-> {
		fileinfo = getFcFileInfo(file, config);
		curr_content = fcFileSource(globalEnv, fileinfo.fullpath);
		FcFileInfo(fileinfo with content = curr_content);
	}
	check_syntax = \level -> {
		if (level == "3") {
			parseAndDesugarProgram(config, globalEnv, config.flowfile, false); { }
		} else if (level == "2") {
			module = parseAndDesugarFile(config, globalEnv, config.flowfile);
			iter(module.errors, \err -> printFcError(config, globalEnv, err));
		} else if (level == "1") {
			switch (parseFlowfile(config, current_fileinfo(), "").second) {
				Some(err): printFcError(config, globalEnv, err);
				None(): { }
			}
		} else { }
	}
	if (renameSymbol != "") {
		if (renameSymbol != "1") {
			fcFastRename(config, globalEnv, renameSymbol, line, col);
		} else {
			if (line != -1 && col != -1) {
				name = getNameByLineCol(line, col, current_fileinfo().content);
				fcFastRename(config, globalEnv, name, line, col);
			} else {
				fcPrintln("Expect exp-line and exp-column arguments", config.threadId);
			}
		}
		onRunComplete(0);
	} else {
		if (file == "") {
			if (isConfigParameterTrue(config.config, "print-flow-dir")) {
				fcPrintln(getFlowDir(), config.threadId);
				onRunComplete(0);
			} else if (isConfigParameterSet(config.config, "unittests")) {
				unittests = getConfigParameter(config.config, "unittests");
				ut = if (unittests == "1") "tools/flowc/tests" else unittests;
				fcCompileUnittests(config, globalEnv, ut, showStopper);
			} else if (isConfigParameterTrue(config.config, "server-shutdown")) {
				fcPrintln("no flowc server is running", config.threadId);
				onRunComplete(0);
			} else {
				fcPrintln("No file is provided", config.threadId);
				printUsage(config);
				showStopper(2);
			}
		} else if (file == "/?" || file == "-?" || file == "--help" || file == "-help" || file == "-h") {
			printUsage(config);
			onRunComplete(0);
		} else if (file == "/v" || file == "-v" || file == "--version") {
			fcPrintln("Version " + flowc_version + " (git rev: " + flowc_git_revision + ")", config.threadId);
			onRunComplete(0);
		} else {
			findSymbol = getConfigParameterDef(config.config, "find-definition", 
				getConfigParameterDef(config.config, "find-declaration", 
					getConfigParameter(config.config, "find-defdecl")
				)
			);
			if (findSymbol != "") {
				if (findSymbol != "1") {
					findDefDecl(config, globalEnv, file, findSymbol);
				} else {
					if (line != -1 && col != -1) {
						name = getNameByLineCol(line, col, current_fileinfo().content);
						findDefDecl(config, globalEnv, file, name);
					} else {
						fcPrintln("find-defdecl: Expect exp-line and exp-column arguments", config.threadId);
					}
				}
				onRunComplete(0);
			} else {
				findUses = getConfigParameter(config.config, "find-uses");
				if (findUses != "") {
					if (findUses != "1") {
						fcFastFindUses(config, globalEnv, findUses, line, col);
					} else {
						if (line != -1 && col != -1) {
							name = getNameByLineCol(line, col, current_fileinfo().content);
							fcFastFindUses(config, globalEnv, name, line, col);
						} else {
							fcPrintln("find-uses: Expect exp-line and exp-column arguments", config.threadId);
						}
					}
					onRunComplete(0);
				} else if (isConfigParameterTrue(config.config, "print-outline")) {
					fcPrintOutline(config, globalEnv);
					onRunComplete(0);
				} else if (isConfigParameterTrue(config.config, "update-cache")) {
					loadIncrementalModulesToCache(config, globalEnv, config.flowfile);
					onRunComplete(0);
				} else if (isConfigParameterSet(config.config, "did-open")) {
					source_path = getConfigParameter(config.config, "did-open");
					source_text = getConfigParameter(config.config, "did-open-text");
					if (source_text != "" && source_path != "") {
						fcSetFileSource(globalEnv, source_path, source_text);
					} else {
						fcPrintln("did-open: Options 'did-open-text' must be provided", config.threadId);
					}
					check_syntax(getConfigParameter(config.config, "check-syntax"));
					onRunComplete(0);
				} else if (isConfigParameterSet(config.config, "did-change")) {
					json = getConfigParameter(config.config, "did-change-json");
					switch (json2LspDidChangeTextDocumentParams(parseJson(json))) {
						Some(params): {
							path = fcCorrectUriPath(params.textDocument.uri.path);
							contents = fcFileSource(globalEnv, path);
							changed = fold(params.contentChanges, contents, \acc, changes -> lspApplyContentChangeEvent(changes, acc));
							fcSetFileSource(globalEnv, path, changed);
						}
						None(): {
							fcPrintln("did-change: An option 'did-change-json' must be a vaid Json-encoded LSP DidChangeTextDocimentParams", config.threadId);
						}
					}
					check_syntax(getConfigParameter(config.config, "check-syntax"));
					onRunComplete(0);
				} else if (isConfigParameterSet(config.config, "check-syntax")) {
					check_syntax(getConfigParameter(config.config, "check-syntax"));
					onRunComplete(0);
				} else if (isConfigParameterSet(config.config, "did-save")) {
					path = getConfigParameter(config.config, "did-save");
					fcLoadFileSource(globalEnv, path);
					onRunComplete(0);
				} else if (isConfigParameterTrue(config.config, "complete")) {
					if (line != -1 && col != -1) {
						kind = s2i(getConfigParameterDef(config.config, "complete-kind", "1"));
						char = getConfigParameterDef(config.config, "complete-character", "");
						fcFindCompletion(config, globalEnv, line, col, kind, char);
					} else {
						fcPrintln("complete: Expect exp-line and exp-column arguments", config.threadId);
					}
					onRunComplete(0);
				} else if (isConfigParameterSet(config.config, "symbol-info")) {
					symbol = getConfigParameter(config.config, "symbol-info");
					if (symbol != "1") {
						fcSymbolInfo(config, globalEnv, symbol, line, col);
					} else {
						if (line != -1 && col != -1) {
							name = getNameByLineCol(line, col, current_fileinfo().content);
							fcSymbolInfo(config, globalEnv, name, line, col);
						} else {
							fcPrintln("symbol-info: Expect exp-line and exp-column arguments", config.threadId);
						}
					}
					onRunComplete(0);
				} else {
					fcCompile(config, globalEnv, showStopper);
				}
			}
		}
	}
}
