import math/uuid;
import formats/lsp;
import tools/common/config;
import text/serialize;
import text/utf8;
import tools/flowc/flowc_remote;

/*
 This module implements a request processing function for the language Server Protocol (LSP)
 The detailed description and specification of LSP may be found at https://microsoft.github.io/language-server-protocol/
 Particularly, following request methods are implemented:
	- initialize
	- initialized
	- shutdown
	- exit
	- textDocument/didOpen
	- textDocument/didChange
	- textDocument/documentSymbol
	- textDocument/declaration
	- textDocument/definition
	- textDocument/references
	- textDocument/hover
	- textDocument/rename
	- textDocument/completion
	- workspace/executeCommand
*/

export {
	fcDecodeJsonRequest(s : string) -> Json;
	fcLspReadRequest() -> Maybe<FcLspRequest>;
	FcLspRequest(
		request : string, // the whole request string
		length : int,  // Content-Length
		type : string, // Content-Type
		json : string  // the Json description of request
	);
	fcLspProcessRequest(conf : CompilerConfig, globEnv : FcTypeEnvGlobal, json : Json, out_cb : (string) -> void, loop_cb : () -> void, exit_cb : () -> void) -> void;
}

fcDecodeJsonRequest(s : string) -> Json {
	json = parseJsonSafe(s);
	switch (json) {
		JsonObject(members): if (fcJsonObjectHasField(json, "jsonrpc")) json else JsonNull();
		default: JsonNull();
	}
}

fcLspReadRequest() -> Maybe<FcLspRequest> {
	header = readUntil("\r\n\r\n"); // \r\n\r\n is included into header
	lines = filtermap(strSplit(header, "\n"), \line -> {
		trimmed = trim2(line, " \r\n\t");
		if (trimmed != "") Some(line) else None();
	});
	key_value = pairs2tree(map(lines, \line -> {
			key_val = strSplit(line, ":");
			if (length(key_val) == 1) {
				Pair(line, line);
			} else {
				Pair(trim2(key_val[0], " \t\n\r"), trim2(key_val[1], " \t\n\r"));
			}
	}));
	switch (lookupTree(key_value, "Content-Length")) {
		Some(len): {
			json = readBytes(s2i(len));
			Some(FcLspRequest(
				header + json,
				s2i(len), 
				lookupTreeDef(key_value, "Content-Type", ""),
				json
			));
		}
		None(): None();
	}
}

FcLspMethodCall(
	conf : CompilerConfig,
	globEnv : FcTypeEnvGlobal,
	id : Json, 
	params : Json, 
	out_cb : (Json) ->  void, 
	loop_cb : () -> void, 
	exit_cb : () -> void
);

fcLspMethods = pairs2tree([
	Pair("initialize", fcLspInitialize),
	Pair("initialized", fcLspInitialized),
	Pair("shutdown", fcLspShutdown),
	Pair("exit", fcLspExit),
	Pair("textDocument/didOpen", fcLspTextDocumentDidOpen),
	Pair("textDocument/didChange", fcLspTextDocumentDidChange),
	Pair("textDocument/didSave", fcLspTextDocumentDidSave),
	Pair("textDocument/documentSymbol", fcLspTextDocumentDocumentSymbol),
	Pair("textDocument/declaration", fcLspTextDocumentDeclaration),
	Pair("textDocument/definition", fcLspTextDocumentDefinition),
	Pair("textDocument/references", fcLspTextDocumentReferences),
	Pair("textDocument/hover", fcLspTextDocumentHover),
	Pair("textDocument/rename", fcLspTextDocumentRename),
	Pair("textDocument/completion", fcLspTextDocumentCompletion),
	Pair("workspace/executeCommand", fcLspWorkspaceExecuteCommand),
]);

FcLspServerState(
	mutable clientConf : Json,
	mutable currId : int,
	mutable requests : Tree<Json, LspRequestMessage>
);

fcLspServerState = FcLspServerState(JsonNull(), 1, makeTree());

fcLspErrorResponse(id : Json, code : int, msg : string) -> Json {
	lspResponseMessage2Json(LspResponseMessage("2.0", id, JsonNull(), 
		Some(LspResponseError(code, msg, JsonNull()))
	));
}

fcLspNormalResponse(id : Json, result : Json) -> Json {
	lspResponseMessage2Json(LspResponseMessage("2.0", id, result, None()));
}

fcLspProcessRequest(conf : CompilerConfig, globEnv : FcTypeEnvGlobal, json : Json, str_out_cb : (string) ->  void, loop_cb : () -> void, exit_cb : () -> void) -> void {
	out_cb = \msg -> {
		js_len = strlen(expandUtf8(json2string(msg)));
		js_out = json2string(msg);
		str_out_cb("Content-Length: " + i2s(js_len) + "\r\n\r\n" + js_out);
	}
	switch (json2LspRequestMessage(json)) {
		Some(request): {
			if (request.method == "") {
				out_cb(fcLspErrorResponse(request.id, 1, "request method is not set"));
				loop_cb();
			} else {
				switch (lookupTree(fcLspMethods, request.method)) {
					Some(m): m(FcLspMethodCall(conf, globEnv, request.id, request.params, out_cb, loop_cb, exit_cb));
					None(): {
						out_cb(fcLspErrorResponse(request.id, 1, "request method " + request.method + " is not found"));
						loop_cb();
					}
				}
			}
		}
		None(): {
			switch (json2LspResponseMessage(json)) {
				Some(response): {
					// TODO: handle properly
					switch (lookupTree(fcLspServerState.requests, response.id)) {
						Some(request): {
							fcDebugLog("response to the request: " + 
								json2string(lspRequestMessage2Json(request)) + ":\n" + 
								json2string(lspResponseMessage2Json(response))
								, conf
							);
						}
						None(): {
							fcDebugLog("unknown request: " + json2string(response.id), conf);
						}
					}
					loop_cb();
				}
				None(): {
					out_cb(fcLspErrorResponse(getJsonFieldValue(json, "id", JsonNull()), 1, "illegal request '" + json2string(json) + "'"));
					loop_cb();
				}
			}
		}
	}
}

fcLspShutdown(call : FcLspMethodCall) -> void {
	fcLspServerState.clientConf ::= JsonNull();
	fcLspServerState.currId ::= 1;
	fcLspServerState.requests ::= makeTree();
	fcClearCache(call.globEnv); // reset module cache
	call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
	call.loop_cb();
}

fcLspExit(call : FcLspMethodCall) -> void {
	call.exit_cb();
}

/*
LspDocumentFilter : (
	language : string, // A language id, like `typescript`.
	scheme : string, // A Uri [scheme](#Uri.scheme), like `file` or `untitled`.
	/**
	 * A glob pattern, like `*.{ts,js}`.
	 *
	 * Glob patterns can have the following syntax:
	 * - `*` to match one or more characters in a path segment
	 * - `?` to match on one character in a path segment
	 * - `**` to match any number of path segments, including none
	 * - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
	 * - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
	 * - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
	 * /
	pattern : string
);
LspTextDocumentChangeRegistrationOptions : (
	documentSelector: [LspDocumentFilter], // A document selector to identify the scope of the registration.
	syncKind : int // None = 0, Full = 1, Incremental = 2
);
*/

fcLspInitialized(call: FcLspMethodCall) -> void {
	if (getJsonBoolField(fcGetJsonNestedField(fcLspServerState.clientConf, ["capabilities", "workspace", "didChangeConfiguration"]), "dynamicRegistration", false)) {
		request = LspRequestMessage("2.0", JsonDouble(i2d(fcLspServerState.currId)), "client/registerCapability", 
			lspRegistrationParams2Json(LspRegistrationParams([
				LspRegistration(makeUuid(), "textDocument/didChange", 
					lspTextDocumentChangeRegistrationOptions2Json(
						LspTextDocumentChangeRegistrationOptions([LspDocumentFilter("flow", "file", "*.{flow}")], 1)
					)
				)
			]))
		);
		//fcDebugLog("didChangeConfiguration dynamic config: \n" + json2string(lspRequestMessage2Json(request)), call.conf);
		fcLspServerState.requests ::= setTree(fcLspServerState.requests, request.id, request);
		fcLspServerState.currId ::= fcLspServerState.currId + 1;
		call.out_cb(lspRequestMessage2Json(request));
	}
	call.loop_cb(); // It's a notification, no response.
}

fcLspInitialize(call: FcLspMethodCall) -> void {
	fcLspServerState.clientConf ::= call.params;
	call.out_cb(fcLspNormalResponse(call.id, 
		JsonObject([
			Pair("capabilities", JsonObject([
					Pair("declarationProvider", JsonBool(true)),
					Pair("definitionProvider", JsonBool(true)),
					Pair("referencesProvider", JsonBool(true)),
					Pair("workspaceSymbolProvider", JsonBool(true)),
					Pair("documentSymbolProvider", JsonBool(true)),
					Pair("documentSymbolProvider", JsonBool(true)),
					Pair("hoverProvider", JsonBool(true)),
					Pair("renameProvider", JsonBool(true)),
					Pair("executeCommandProvider", 
						JsonObject([Pair("commands", JsonArray([JsonString("compile")]))])
					),
					Pair("completionProvider", 
						JsonObject([
							Pair("triggerCharacters", JsonArray([JsonString("."), JsonString("/")])),
							Pair("allCommitCharacters", JsonArray([])),
							Pair("resolveProvider", JsonBool(false)),
							Pair("workDoneProgress", JsonBool(false))
						])
					),
					Pair("textDocumentSync",
						JsonObject([
							Pair("openClose", JsonBool(true)),
							Pair("change", JsonDouble(2.0))
						])
					)
				])
			)
		])
	));
	call.loop_cb();
}

fcLspTextDocumentDidOpen(call: FcLspMethodCall) -> void {
	switch (json2LspTextDocumentItem(getJsonObjectField(call.params, "textDocument"))) {
		Some(textitem): {
			path = fcCorrectUriPath(textitem.uri.path);
			conf = fcLspFileConfig(call.conf, path);
			runConfig(
				CompilerConfig(conf with config = setTree(conf.config, "update-cache", "1")),
				call.globEnv, 
				\code -> {
					if (code != 0) call.loop_cb() else {
						runConfig(
							CompilerConfig(conf with config = mergeTree(conf.config, 
								pairs2tree([
									Pair("did-open", path),
									Pair("did-open-text", textitem.text)
								])
							)),
							call.globEnv, 
							\code_ -> {
								clearFcOutput(call.conf.threadId);
								call.loop_cb();
							}
						);
					}
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspTextDocumentDidChange(call: FcLspMethodCall) -> void {
	switch (json2LspDidChangeTextDocumentParams(call.params)) {
		Some(params): {
			path = fcCorrectUriPath(params.textDocument.uri.path);
			conf = fcLspFileConfig(call.conf, path);
			runConfig(
				CompilerConfig(conf with config = mergeTree(conf.config, 
					pairs2tree([
						Pair("did-change", path),
						Pair("did-change-json", json2string(call.params)),
					])
				)),
				call.globEnv, 
				\code_ -> {
					clearFcOutput(call.conf.threadId);
					call.loop_cb();
				}
			);
		}
		None(): {
			fcDebugLog("Failed to load a file " + json2string(call.params) + " ", call.conf);
			call.out_cb(fcLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspTextDocumentDidSave(call: FcLspMethodCall) -> void {
	switch (json2LspDidSaveTextDocumentParams(call.params)) {
		Some(params): {
			path = fcCorrectUriPath(params.textDocument.uri.path);
			conf = fcLspFileConfig(call.conf, path);
			runConfig(
				CompilerConfig(conf with config = setTree(conf.config, "did-save", path)),
				call.globEnv, 
				\code_ -> {
					clearFcOutput(call.conf.threadId);
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text document item is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspFileConfig(def : CompilerConfig, file : string) -> CompilerConfig {
	cwd_dir = strReplace(resolveRelativePath("."), "\\", "/");
	file_dir = dirName(file);
	conf_dir = findFlowConfigDir(file_dir);
	if (conf_dir == "") def else {
		switch (getCompilerConfig(file_dir)) {
			Some(conf): {
				if (conf_dir == "") def else {
					CompilerConfig(conf with 
						includes = uniq(concat(def.includes, map(conf.includes, \inc ->
							if (isAbsolutePath(inc)) inc else {
								if (inc == ".") {
									conf_dir;
								} else {
									conf_dir + "/" + inc;
								}
							}
						))),
						config = setTree(combineConfigsOverride(conf.config, def.config), "working-dir", cwd_dir),
						flowfile = file
					);
				}
			}
			Failed(msg): def;
		}
	}
}

fcLspTextDocumentDocumentSymbol(call: FcLspMethodCall) -> void {
	switch (json2LspTextDocumentIdentifier(getJsonObjectField(call.params, "textDocument"))) {
		Some(textid): {
			conf = fcLspFileConfig(call.conf, fcCorrectUriPath(textid.uri.path));
			runConfig(
				CompilerConfig(conf with config = setTree(conf.config, "print-outline", "1")),
				call.globEnv, 
				\code -> {
					out = fcOutput(call.conf.threadId);
					clearFcOutput(call.conf.threadId);
					if (fcDetectLspError(out, call.conf)) {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					} else {
						symbols = fcLspParseSymbols(out);
						call.out_cb(fcLspNormalResponse(call.id, JsonArray(symbols)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text document id is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspParseLocations(s : string) -> [Json] {
	isNum = \st -> st != "" && isDigits(st);
	filtermap(strSplit(s, "\n"), \l -> maybeMap(fcLspParseLocation(l), \p -> lspLocation2Json(p.first)));
}

fcLspParseSymbols(s : string) -> [Json] {
	isNum = \st -> st != "" && isDigits(st);
	filtermap(strSplit(s, "\n"), \l -> 
		maybeBind(fcLspParseLocation(l), \p -> {
			loc = p.first;
			descr_parts = strSplit(trim(p.second), " ");

			if (length(descr_parts) == 1) {
				Some(lspTextDocumentSymbol2Json(LspTextDocumentSymbol(p.second, "", 0, false, loc.range, loc.range, [])))
			} else if (length(descr_parts) > 1) {
				name = descr_parts[1];
				kind = if (descr_parts[0] == "import") {
					lookupTreeDef(fcLspSymbolKindName2id, "Module", 0);
				} else if (descr_parts[0] == "forbid") {
					lookupTreeDef(fcLspSymbolKindName2id, "Package", 0);
				} else if (descr_parts[0] == "struct") {
					lookupTreeDef(fcLspSymbolKindName2id, "Struct", 0);
				} else if (descr_parts[0] == "union") {
					lookupTreeDef(fcLspSymbolKindName2id, "Enum", 0);
				} else if (descr_parts[0] == "fundef") {
					lookupTreeDef(fcLspSymbolKindName2id, "Function", 0);
				} else if (descr_parts[0] == "fundecl") {
					lookupTreeDef(fcLspSymbolKindName2id, "Interface", 0);
				} else if (descr_parts[0] == "vardef") {
					lookupTreeDef(fcLspSymbolKindName2id, "Object", 0);
				} else if (descr_parts[0] == "vardecl") {
					lookupTreeDef(fcLspSymbolKindName2id, "Variable", 0);
				} else if (descr_parts[0] == "natdef") {
					lookupTreeDef(fcLspSymbolKindName2id, "Method", 0);
				} else if (descr_parts[0] == "natdecl") {
					lookupTreeDef(fcLspSymbolKindName2id, "Method", 0);
				} else {
					0
				}
				Some(lspTextDocumentSymbol2Json(LspTextDocumentSymbol(name, "", kind, false, loc.range, loc.range, [])));
			} else {
				None();
			}
		})
	);
}

fcLspParseLocation(s : string) -> Maybe<Pair<LspLocation, string>> {
	isNum = \st -> st != "" && isDigits(st);
	parts0 = strSplit(s, ":");
	if (length(parts0) < 3 || strContains(s, "Error: ") || strContains(s, "Fail: ")) None() else {
		// Windows path may start with C:/... and 
		parts = if (!hasTargetName("windows") || !isLetter(parts0[0])) parts0 else {
			concat(["/" + parts0[0] + ":" + parts0[1]], tailFrom(parts0, 2));
		}
		if (length(parts) < 3 || parts[0] == "" || !isNum(parts[1]) || !isNum(parts[2])) {
			None() ;
		} else {
			path = strReplace(parts[0], "\\", "/");
			sline = s2i(parts[1]) - 1;
			schar = s2i(parts[2]) - 1;
			if (length(parts) < 5 || !isNum(parts[3]) || !isNum(parts[4])) {
				Some(Pair(LspLocation(
					URI("file", URIAuthority("", "", ""), path, "", ""),
					LspRange(LspPosition(sline, schar), LspPosition(sline, schar + 1))
					), trim(parts[3]))
				);
			} else {
				eline = s2i(parts[3]) - 1;
				echar = s2i(parts[4]) - 1;
				Some(Pair(LspLocation(
					URI("file", URIAuthority("", "", ""), path, "", ""),
					LspRange(LspPosition(sline, schar), LspPosition(eline, echar))
					), trim(parts[5]))
				);
			}
		}
	}
}

fcLspTextDocumentDeclaration(call: FcLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			conf = fcLspFileConfig(call.conf, fcCorrectUriPath(textpos.textDocument.uri.path));
			runConfig(
				CompilerConfig(conf with
					config = mergeTree(conf.config, 
						pairs2tree([
							Pair("exp-line", i2s(textpos.position.line)), 
							Pair("exp-column", i2s(textpos.position.character)), 
							Pair("find-declaration", "1")
						])
					)
				),
				call.globEnv, 
				\code -> {
					out = fcOutput(call.conf.threadId);
					clearFcOutput(call.conf.threadId);
					if (fcDetectLspError(out, call.conf)) {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = fcLspParseLocations(out);
						call.out_cb(fcLspNormalResponse(call.id, JsonArray(locations)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspTextDocumentDefinition(call: FcLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			conf = fcLspFileConfig(call.conf, fcCorrectUriPath(textpos.textDocument.uri.path));
			runConfig(
				CompilerConfig(conf with
					config = mergeTree(conf.config, 
						pairs2tree([
							Pair("exp-line", i2s(textpos.position.line)), 
							Pair("exp-column", i2s(textpos.position.character)), 
							Pair("find-definition", "1")
						])
					)
				),
				call.globEnv, 
				\code -> {
					out = fcOutput(call.conf.threadId);
					clearFcOutput(call.conf.threadId);
					if (fcDetectLspError(out, call.conf)) {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = fcLspParseLocations(out);
						call.out_cb(fcLspNormalResponse(call.id, JsonArray(locations)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspTextDocumentReferences(call: FcLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			conf = fcLspFileConfig(call.conf, fcCorrectUriPath(textpos.textDocument.uri.path));
			runConfig(
				CompilerConfig(conf with
					config = mergeTree(conf.config, 
						pairs2tree([
							Pair("exp-line", i2s(textpos.position.line)), 
							Pair("exp-column", i2s(textpos.position.character)), 
							Pair("find-uses", "1")
						])
					)
				),
				call.globEnv, 
				\code -> {
					out = fcOutput(call.conf.threadId);
					clearFcOutput(call.conf.threadId);
					if (fcDetectLspError(out, call.conf)) {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					} else {
						locations = fcLspParseLocations(out);
						call.out_cb(fcLspNormalResponse(call.id, JsonArray(locations)));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspTextDocumentHover(call: FcLspMethodCall) -> void {
	switch (json2LspTextDocumentPositionParams(call.params)) {
		Some(textpos): {
			conf = fcLspFileConfig(call.conf, fcCorrectUriPath(textpos.textDocument.uri.path));
			runConfig(
				CompilerConfig(conf with
					config = mergeTree(conf.config, 
						pairs2tree([
							Pair("exp-line", i2s(textpos.position.line)), 
							Pair("exp-column", i2s(textpos.position.character)), 
							Pair("symbol-info", "1")
						])
					)
				),
				call.globEnv, 
				\code -> {
					out = fcOutput(call.conf.threadId);
					clearFcOutput(call.conf.threadId);
					//fcDebugLog("out:\n" + out + "\n", call.conf);
					if (fcDetectLspError(out, call.conf)) {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					} else {
						if (isNotSpace(out)) {
							hover = LspHover([LspMarkedString("", out)], None());
							call.out_cb(fcLspNormalResponse(call.id, lspHover2Json(hover)));
						} else {
							call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
						}
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspTextDocumentRename(call: FcLspMethodCall) -> void {
	switch (json2LspRename(call.params)) {
		Some(rename): {
			conf = fcLspFileConfig(call.conf, fcCorrectUriPath(rename.textDocument.uri.path));
			runConfig(
				CompilerConfig(conf with
					config = mergeTree(conf.config, 
						pairs2tree([
							Pair("exp-line", i2s(rename.position.line)), 
							Pair("exp-column", i2s(rename.position.character)), 
							Pair("rename", "1"),
							Pair("to", rename.newName),
						])
					)
				),
				call.globEnv, 
				\code -> {
					out = fcOutput(call.conf.threadId);
					clearFcOutput(call.conf.threadId);
					if (fcDetectLspError(out, call.conf)) {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					} else {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "text position is invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspTextDocumentCompletion(call: FcLspMethodCall) -> void {
	switch (json2LspCompletionParams(call.params)) {
		Some(completion): {
			conf = fcLspFileConfig(call.conf, fcCorrectUriPath(completion.textDocument.uri.path));
			//fcDebugLog("completion: " + json2string(call.params), call.conf);
			runConfig(
				CompilerConfig(conf with
					config = mergeTree(conf.config, 
						pairs2tree([
							Pair("exp-line", i2s(completion.position.line)), 
							Pair("exp-column", i2s(completion.position.character)), 
							Pair("complete", "1"),
							Pair("complete-kind", i2s(completion.context.triggerKind)),
							Pair("complete-character", completion.context.triggerCharacter),
						])
					)
				),
				call.globEnv, 
				\code -> {
					out = fcOutput(call.conf.threadId);
					clearFcOutput(call.conf.threadId);
					if (fcDetectLspError(out, call.conf)) {
						call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
					} else {
						if (isNotSpace(out)) {
							list = takeBefore(takeAfter(out, "completion[", ""), "]completion", "");
							if (list != "") {
								call.out_cb(fcLspNormalResponse(call.id, parseJsonSafe(list)));
							} else {
								call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
							}
						} else {
							call.out_cb(fcLspNormalResponse(call.id, JsonNull()));
						}
					}
					call.loop_cb();
				}
			);
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "completion params are invalid: " + json2string(call.params)));
			call.loop_cb();
		}
	}
}

fcLspWorkspaceExecuteCommand(call: FcLspMethodCall) -> void {
	switch (json2LspExecuteCommandParams(call.params)) {
		Some(commandParams): {
			if (commandParams.command == "compile") {
				if (length(commandParams.arguments) == 0) {
					call.out_cb(fcLspErrorResponse(call.id, 1, "no file for compilation is provided"));
					call.loop_cb();
				} else {
					file = ref "";
					params = filtermap(commandParams.arguments, \arg -> 
						switch (arg) {
							JsonString(str): {
								opt_val = strSplit(str, "=");
								if (length(opt_val) == 0) None() else
								if (length(opt_val) == 1) { file := opt_val[0]; None(); } else {
									opt = opt_val[0];
									val = opt_val[1];
									if (opt == "file") {
										file := val;
										None();
									} else {
										Some(Pair(opt, val));
									}
								}
							}
							default: None();
						}
					);
					if (^file == "") {
						call.out_cb(fcLspErrorResponse(call.id, 1, "no file for compilation"));
						call.loop_cb();
					} else {
						conf = fcLspFileConfig(call.conf, fcCorrectUriPath(^file));
						runConfig(
							CompilerConfig(conf with config = mergeTree(conf.config, pairs2tree(params))), 
							call.globEnv, 
							\code -> {
								out = fcOutput(call.conf.threadId);
								clearFcOutput(call.conf.threadId);
								call.out_cb(fcLspNormalResponse(call.id, JsonString(out)));
								call.loop_cb();
							}
						);
					}
				}
			} else {
				call.out_cb(fcLspErrorResponse(call.id, 1, "command " + commandParams.command + " is unknown"));
				call.loop_cb();
			}
		}
		None(): {
			call.out_cb(fcLspErrorResponse(call.id, 1, "ExecuteCommand request is illegal"));
			call.loop_cb();
		}
	}
}

fcDetectLspError(out : string, conf : CompilerConfig) -> bool {
	if (strContains(out, "Error: ") || strContains(out, "Fail: ")) {
		fcServerLog("ERROR: " + out, conf);
		true
	} else false;
}
