import tools/common/config;
import formats/json/json;
import text/serialize;

export {

FcRequest ::= FcRequestConfig, FcRequestJson, FcRequestNone;
	FcRequestConfig : (conf : CompilerConfig);
	FcRequestJson : (json : Json);
	FcRequestNone : ();

fcDecodeRequest(s : string) -> FcRequest;
fcReadRequest() -> string;

}

fcDecodeRequest(s : string) -> FcRequest {
	decode_json = \ -> {
		json = parseJsonSafe(s);
		switch (json) {
			JsonObject(__): FcRequestJson(json);
			JsonArray(__):  FcRequestJson(json);
			default:        FcRequestNone();
		}
	}
	cf = deserialize(s, IllegalStruct());
	if (cf == IllegalStruct()) decode_json() else {
		switch (cf) {
			CompilerConfig(__,__,__,__,__,__,__): {
				FcRequestConfig(CompilerConfig(cf with threadId = s2i(getThreadId())));
			}
			default: decode_json();
		}
	}
}

fcReadRequest() -> string {
	""
}

