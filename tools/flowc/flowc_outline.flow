import tools/flowc/flowc_typecheck;

export {
	fcPrintOutline(config : CompilerConfig, globEnv : FcTypeEnvGlobal) -> void;
}

fcPrintOutline(config : CompilerConfig, globEnv : FcTypeEnvGlobal) -> void {
	module = parseAndDesugarFile(config, globEnv, config.flowfile);
	iter(module.errors, \err -> printFcError(config, globEnv, err));
	if (module.errors == []) {
		fcPrintOutlineOfFcModule(config, globEnv, module);
		// Load to cache all imported incrementals.
		deferred(\-> iter(module.imports, \imp -> loadIncrementalModulesToCache(config, globEnv, imp.flowfile)));
	}
}

fcPrintOutlineOfFcModule(config : CompilerConfig, env : FcTypeEnvGlobal, module : FcModule) -> void {
	fileinfo = fcfileinfo2fi(module.fileinfo);
	code = fcFileSource(env, fileinfo.fullpath);
	declStarts =
	foldTree(module.functions,
		foldTree(module.globalVars,
			foldTree(module.natives,
				makeTree(),
				\name, nat, acc -> setTree(acc, name, nat.info.start)
			),
			\name, var, acc -> setTree(acc, name, var.declInfo.start)
		),
		\name, fun, acc -> setTree(acc, name, fun.declInfo.start)
	);
	print_id = \pos, msg -> {
		switch (getFcInfo2ByPos(pos, code)) {
			Some(i): printLocation(config, env, fileinfo, i.start, i.end, msg);
			None():  printLocation(config, env, fileinfo, pos, -1, msg);
		}
	};
	print_path = \pos, msg -> {
		switch (getFcInfo2ByPos2(pos, "/\\.-", code)) {
			Some(i): printLocation(config, env, fileinfo, i.start, i.end, msg);
			None():  printLocation(config, env, fileinfo, pos, -1, msg);
		}
	};
	iter(module.imports, \imp -> print_path(imp.start, "import " + imp.flowfile));
	iter(module.forbids, \fbd -> print_path(fbd.start, "forbid " + fbd.flowfile));
	traverseInOrder(module.structs, \name, str -> print_id(str.info.start, "struct " + name));
	traverseInOrder(module.unions, \name, uni -> print_id(uni.info.start, "union " + name));

	traverseInOrder(module.functions, \name, fun -> {
		print_id(fun.defiInfo.start, "fundef " + name);
		if (fun.declInfo.start != fun.defiInfo.start) {
			print_id(fun.declInfo.start, "fundecl " + name);
		}
	});

	traverseInOrder(module.globalVars, \name, var -> {
		print_id(var.bodyInfo.start, "vardef " + name);
		if (var.declInfo.start != var.bodyInfo.start) {
			print_id(var.declInfo.start, "vardecl " + name);
		}
	});

	traverseInOrder(module.natives, \name, nat -> {
		print_id(nat.info.start, "natdecl " + name);
		switch (nat.flowfallback) {
			Some(func): {
				print_id(func.defiInfo.start, "natdef " + name);
			}
			None(): { }
		}
	});
}
