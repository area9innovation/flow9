import tools/flowc/eval;
import tools/flowc/flowc_typecheck;
import tools/flowc/manipulation/deadcode;
import tools/flowc/manipulation/compile_time;
import tools/flowc/manipulation/tail_call;

export {
	fcInterpret(config : CompilerConfig) -> void;
}

fcInterpret(conf : CompilerConfig) -> void {
	working_dir = getConfigParameter(conf.config, "working-dir");
	run_file = getConfigParameter(conf.config, "run");
	run_flowfile = trimFlowfile(findFlowPath(run_file, true, conf.includes, working_dir), conf.includes, working_dir);

	run_config = CompilerConfig(conf with 
		config = setTree(conf.config, "file", run_file),
		flowfile = run_flowfile
	);
	globEnv = initFcTypeEnvGlobal();
	pair = parseAndTypecheckProgram(run_config, globEnv, run_config.flowfile);
	ok = ref true;
	on_err = \err -> {
		printFcError(run_config, globEnv, err);
		ok := false
	}
	program1 = substituteCompileTimeValues(pair.first, on_err);
	program = deadFiCode(program1, collectFiEffects(program1), makeSet1("for"), makeSet(), false, true, conf.verbose);
	optimzied = fcOptimizeTailCalls(program);
	if (pair.second == 0) {
		fcCallFunctionByName("main", [], fcInitEvalEnv(optimzied, None(), None(), on_err));
		quit(if (^ok) 0 else 1);
	} else {
		// Some errors in a code
		quit(1);
	}
}
