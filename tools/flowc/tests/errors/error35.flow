native length : ([?]) -> int = Native.length;

Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

either(m: Maybe<?>, alternative: ?) -> ? {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}

isSome(m : Maybe<?>) -> bool {
	switch (m : Maybe) {
		None() : false;
		Some(__) : true;
	}
}

findmap(a : [?], fn : (?) -> Maybe<??>) -> Maybe<??> {
	doFindmapi(a, 0, \__, el -> fn(el))
}

doFindmapi(a : [?], i : int, fn : (int, ?) -> Maybe<??>) -> Maybe<??> {
	if (i < length(a)) {
		res = fn(i, a[i]);
		if (isSome(res)) res
		else doFindmapi(a, i + 1, fn);
	} else {
		None()
	}
}

// from https://github.com/area9innovation/material/blob/05e9eefeff00152767272c0b7589e18b0622c6cf/customdb/reports/report_builder_controls.flow#L565-L569
main() {
	// The "\n -> Some(n)"" is typed as "(int) -> Some<int>", but
	// findmap is typed as ([int], (int) -> Maybe<double>) -> Maybe<double>
	// which is clearly wrong
	newPriority = findmap([0], \n -> Some(n));
	either(newPriority, 0.0);	// newPriority is Maybe<int>, not double
}
