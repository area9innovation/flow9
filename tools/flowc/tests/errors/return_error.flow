import runtime;

export {
    findFirstPositive(numbers : [int]) -> int;
}

// Incorrect implementation using return statements
findFirstPositive(numbers : [int]) -> int {
    // Flow9 doesn't support return statements
    if (length(numbers) == 0) {
        return -1; // Error: no return keyword in Flow9
    }
    
    i = 0;
    while (i < length(numbers)) {
        if (numbers[i] > 0) {
            return numbers[i]; // Error: no return keyword in Flow9
        }
        i = i + 1;
    }
    
    return -1; // Error: no return keyword in Flow9
}

// The correct way would be:
/*
findFirstPositive(numbers : [int]) -> int {
    index = find(numbers, \n -> n > 0);
    switch (index) {
        None(): -1;
        Some(i): numbers[i];
    }
}
*/