import form/form;

ClipCapabilities(move : bool, filters : bool, interactive : bool, scale : bool, alpha : bool);

RenderResult(
	clips : [native],
	widthHeight : Behaviour<WidthHeight>,
	baseline : Behaviour<double>,
	pending : Behaviour<int>,
	disposers :[() -> void],
	capabilities : ClipCapabilities
);

allClipCapabilities = ClipCapabilities(true, true, true, true, true);

zeroSize = const(zeroWH);

emptyRenderResult = RenderResult([], zeroSize, const(0.0), const(0), [], allClipCapabilities);

optimizeAndRenderForm(form : Form) -> RenderResult {
	emptyRenderResult
}

// Render a form with the given space available
renderForm(rform : Form, available : Behaviour<WidthHeight>, zorder : [int], tabOrder: [int]) -> RenderResult {
	switch (rform : Form) {
		default: emptyRenderResult;
		Camera(filename, parameters, listeners, controls): {
			map(controls, \c -> switch (c: RecordControl) {
				Recording(status): {
					0;
				}
			});
			emptyRenderResult
		}
		Mutable2(behaviour, stack): {
			dodisplay = \form -> {
				result = optimizeAndRenderForm(form);

				getValue(result.widthHeight).width;
				getValue(result.widthHeight).height;
				{}
			};
			emptyRenderResult
		}
		TextInput(state, listeners, stateaccess): {
			fontFamily = {
				style = fold(state, [], \acc, s ->
					switch (s : TextInputState) {
						Content(c, style): style;
						default: acc;
					}
				);
				getMappedFontFamily(style)
			};
			emptyRenderResult
		}
	}
}

getMappedFontFamily(style : [CharacterStyle]) -> string {
	"";
}
