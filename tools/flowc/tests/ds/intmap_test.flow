import ds/intmap;
import math/hash;
import math/stringmath;

checkTreeAndIntMapEqual(tree : Tree<int, ?>, intMap : IntMap<?>) -> bool {
	result = ref true;
	if (sizeIntMap(intMap) != sizeTree(tree)) {
		println("Hash map size: " + i2s(sizeIntMap(intMap)) + " != tree size: "  + i2s(sizeTree(tree)));
		result := false;
	}
	iterIntMap(intMap, \k1,v1 -> {
			switch (lookupTree(tree, k1)) {
				Some(v2): {
					if (v1 != v2) {
						println("values differ: ");
						println("key:");
						println(k1);
						println("hash map value:");
						println(v1);
						println("tree value:");
						println(v2);
						result := false;
					}
				}
				None(): {
					println("tree doesn't have a key:");
					println(k1);
					result := false;
				}
			}
		}
	);
	traverseInOrder(tree, \k1,v1 -> {
			switch (lookupIntMap(intMap, k1)) {
				Some(v2): {
					if (v1 != v2) {
						println("values differ: ");
						println("key:");
						println(k1);
						println("hash map value:");
						println(v2);
						println("tree value:");
						println(v1);
						result := false;
					}
				}
				None(): {
					println("hash map doesn't have a key:");
					println(k1);
					result := false;
				}
			}
		}
	);
	^result
}

// dump
dumpIntMap(m : IntMap<?>) -> string {
	dumpIntMapExt(m, toString, toString);
}

dumpIntMapExt(m : IntMap<?>, fn1 : (int) -> string, fn2 : (?) -> string) -> string {
	strGlue(intMapValues(mapIntMap(m, \k,v -> fn1(k) + " |-> " + fn2(v))), "\n")
}

dumpIntMapComplete(m : IntMap<int, int>) -> string {
	"size=" + i2s(sizeIntMap(m)) + "\n" + 
	//"capacity=" + i2s(length(m.data)) + "\n" + 
	/*strGlue(map(m.data, \tree -> {
		"  [" + foldTree(^tree, "", \key, value, acc ->
				acc  + i2s(key) + " |-> " + i2s(value) + ", "
		) + "]"
	}),  "\n")*/
	"mapping:\n" + concatStrings(map(intMap2pairs(m), \p -> "\t" + i2s(p.first) + " -> " + i2s(p.second)))
	;
}

testArrayOfPairs(
	testPairs : [Pair<int, ??>], 
	removeKeys : [int], 
	looupKeys : [int], 
	descr : string
) -> bool {
	println("---------------------");
	test_size = length(testPairs);
	println("TEST: " + descr + " OF SIZE: " + i2s(test_size));
	tree_time_start1 = timestamp();
	tree = pairs2tree(testPairs);
	tree_time1 = (timestamp() - tree_time_start1) / 1000.0;

	//loadFactor = 0.75;
	loadFactor = 0.75;
	hash_time_start1 = timestamp();
	intMap = pairs2intMap(testPairs);
	hash_time1 = (timestamp() - hash_time_start1) / 1000.0;
	if (hash_time1 > 0.1 || tree_time1 > 0.1) {
		//println("BUILDING TREE OF SIZE: " + i2s(test_size) + " DONE IN: " + d2st(tree_time1, 2) + "s");
		//println("BUILDING HASH MAP OF SIZE: " + i2s(test_size) + ", LOAD FACTOR: " + d2s(loadFactor) + " DONE IN: " + d2st(hash_time1, 2) + "s");
		println("HASH ADDING IS FASTER: " + d2s(tree_time1 / hash_time1) + " TIMES");
	}


	tree_time_start3 = timestamp();
	iter(looupKeys, \k -> {
		lookupTree(tree, k);
		{}
	});
	tree_time3 = (timestamp() - tree_time_start3) / 1000.0;

	hash_time_start3 = timestamp();
	iter(looupKeys, \k -> {
		lookupIntMap(intMap, k);
		{}
	});
	hash_time3 = (timestamp() - hash_time_start3) / 1000.0;
	if (hash_time3 > 0.1 || tree_time1 > 0.3) {
		//println("BUILDING TREE OF SIZE: " + i2s(test_size) + " DONE IN: " + d2st(tree_time1, 2) + "s");
		//println("BUILDING HASH MAP OF SIZE: " + i2s(test_size) + ", LOAD FACTOR: " + d2s(loadFactor) + " DONE IN: " + d2st(hash_time1, 2) + "s");
		println("HASH LOOKUP IS FASTER: " + d2s(tree_time3 / hash_time3) + " TIMES");
	}


	if (!checkTreeAndIntMapEqual(tree, intMap)) {
		println("FAILED");
		false
	} else {
		/*if (test_size < 10000) {
			testPopIntMap(copyIntMap(intMap), buildSet(testPairs));
		}*/

		tree_time_start2 = timestamp();
		tree1 = fold(removeKeys, tree, \acc, toRemove -> removeFromTree(acc, toRemove));
		tree_time2 = (timestamp() - tree_time_start2) / 1000.0;
		
		hash_time_start2 = timestamp();
		iter(removeKeys, \toRemove -> removeFromIntMap(intMap, toRemove));
		hash_time2 = (timestamp() - hash_time_start2) / 1000.0;
		
		if (hash_time2 > 0.1 || tree_time2 > 0.1) {
			//println("REMOVING FROM TREE OF SIZE: " + i2s(test_size) + " DONE IN: " + d2st(tree_time2, 2) + "s");
			//println("REMOVING FROM HASH MAP OF SIZE: " + i2s(test_size) + ", LOAD FACTOR: " + d2s(loadFactor) + " DONE IN: " + d2st(hash_time2, 2) + "s");
			println("HASH REMOVING IS FASTER: " + d2s(tree_time2 / hash_time2) + " TIMES");
		}
		
		if (!checkTreeAndIntMapEqual(tree1, intMap)) {
			println("FAILED AFTER REMOVE");
			false
		} else {
			println("PASSED");
			true
		}
	}
}
/*
testPopIntMap(m : IntMap<?>, test : Set<Pair<?, ??>>) -> void {
	doTestPopIntMap(m, test, sizeSet(test));
}


doTestPopIntMap(m : IntMap<?>, test : Set<Pair<?, ??>>, i : int) -> void {
	if (i == 0) {
		if (sizeIntMap(m) == 0) {
			println("POP HASH MAP - PASSED");
		} else {
			println("POP HASH MAP FAILED: A)");
		}
	} else if (sizeIntMap(m) == 0) {
		println("POP HASH MAP FAILED: B)");
	} else {
		switch (popIntMap(m)) {
			Some(pair): {
					if (!containsSet(test, pair)) {
						println("POP HASH MAP FAILED: C)");
					} else {
						test1 = removeSet(test, pair);
						doTestPopIntMap(m, test, i - 1);
					}
				}
			None(): {
				println("POP HASH MAP FAILED: D)");
			}
		}
	}
}
*/
random_string() -> string {
	len = cast(random() * 20.0 : double -> int) + 1;
	symbs = arrayRepeatDeferred(\ -> 
		33 + cast(cast((126 - 33) : int -> double) * random() : double -> int),
		len
	);
	fold(symbs, "", \acc, code -> acc + fromCharCode(code))
}

main() -> int {
	testPassed = ref true;

	// Test 1
	// with a hand-written key-value pairs
	if (!testArrayOfPairs([Pair(1, 5), Pair(3, 6), Pair(92, -6), Pair(34, -9), Pair(18, 6)], [3, 18], [5, 3, 1], "HAND WRITTEN 1")) {
		testPassed := false;
	}
	
	// Test 2
	// with a hand-written key-value pairs
	if (!testArrayOfPairs([Pair(1, 5), Pair(3, 6), Pair(92, -6), Pair(34, -9), Pair(18, 6)], [3, 18, 92, 45, 1], [3, 45, 7, 9], "HAND WRITTEN 2")) {
		testPassed := false;
	}
	
	// Test 3
	// with a hand-written key-value pairs
	if (!testArrayOfPairs([Pair(1, 5), Pair(-3, 6), Pair(-92, -6), Pair(34, -9), Pair(18, 6)], [3, 18, 92, -92, -3, 45, 1], [1, 2, 3, 4, 5], "HAND WRITTEN 3")) {
		testPassed := false;
	}
	
	// Test 4
	// failed test
	failedPairs = [Pair(-1041393, -15773548),Pair(-17206635, -32378919),Pair(-33250064, -6983416)];
	failedRemove = [-1041393];
	if (!testArrayOfPairs(failedPairs, failedRemove, [-17206635, -33250064, 100500], "HAND WRITTEN 4")) {
		testPassed := false;
	}
	
	random_int = \-> {
		cast(random() * 100000000.0 - 50000000.0 : double -> int);
	}

	// Test 5
	// with a large randomly generated integer key-value pairs
	int_test_size = 2000000;
	int_testPairs = map(enumFromTo(1, int_test_size), \__ ->
		Pair(random_int(), random_int())
	);
	int_removeSize = 200000;
	int_toRemovePairs = fold(enumFromTo(0, int_removeSize - 1), [], \acc, i ->
		concat(acc, [int_testPairs[(int_test_size / int_removeSize) * i].first])
	);

	int_toLookup = concat(
		map(take(int_testPairs, int_test_size / 2), \p -> p.first),
		map(enumFromTo(1, int_test_size / 2), \__ -> random_int())
	);
	
	if (!testArrayOfPairs(int_testPairs, int_toRemovePairs, int_toLookup, "RANDOMLY GENERATED INTEGER KEYS")) {
		testPassed := false;
	}
	
	println("=========================");
	if (^testPassed) {
		println("ALL HASH MAP TESTS PASSED");
	} else {
		println("SOME HASH MAP TEST FAILED");
	}
	0
}
