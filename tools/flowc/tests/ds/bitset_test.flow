import ds/bitset;
import arrayutils;
import stringmath;


createRandomBoolArray(maxLen : int) -> [bool] {
	len = cast(random() * cast(maxLen : int -> double) : double -> int) + 1;
	arrayRepeatDeferred(\ -> random() > 0.5, len);
}

dumpBitSet(bitset : BitSet) -> string {
	fold(
		enumFromTo(0, bitset.bitcount - 1), "",
		\acc, i -> {
			switch (getBitSet(bitset, i)) {
				Some(val): if (val) acc + "1" else acc + "0";
				None(): acc + "_";
			}
		}
	)
}

dumpBitArray(bitarr : [bool]) -> string {
	fold(
		enumFromTo(0, length(bitarr) - 1), "",
		\acc, i ->
			if (bitarr[i]) acc + "1" else acc + "0"
	)
}

main() -> int {
	maxLen = 100000;
	iter(enumFromTo(1, 1000), 
		\n -> {
			randArr = createRandomBoolArray(maxLen);
			len = length(randArr);
			println("RUNNING " + i2s(n) + " TEST OF SIZE: " + i2s(len));
			bitsetPos = makeBitSet(len);
			bitsetNeg = makeBitSet(len);
			iter(enumFromTo(0, len - 1), \i -> { setBitSet(bitsetNeg, i); { }} );
			iteri(randArr, \i, bit -> { if (bit) setBitSet(bitsetPos, i) else unsetBitSet(bitsetNeg, i); { }});
			
			error = \err, pos -> {
				println(err);
				println("bitarr:    " + dumpBitArray(randArr));
				if (pos) {
					println("bitset(P): " + dumpBitSet(bitsetPos));
				} else {
					println("bitset(N): " + dumpBitSet(bitsetNeg));
				}
				quit(0);
			}
			
			iteri(randArr, \i, bit -> {
					if (Some(bit) != getBitSet(bitsetPos, i)) {
						error("TEST FAIL: bits differ", true);
					}
					if (Some(bit) != getBitSet(bitsetNeg, i)) {
						error("TEST FAIL: bits differ", false);
					}
				}
			);
			switch (getBitSet(bitsetPos, -1)) {
				Some(__):  error("TEST FAIL: index '-1' has value", true);
				None(): { }
			}
			switch (getBitSet(bitsetPos, len)) {
				Some(__):  error("TEST FAIL: index '" + i2s(len) + "' has value", true);
				None(): { }
			}
			switch (getBitSet(bitsetNeg, -1)) {
				Some(__):  error("TEST FAIL: index '-1' has value", false);
				None(): { }
			}
			switch (getBitSet(bitsetNeg, len)) {
				Some(__):  error("TEST FAIL: index '" + i2s(len) + "' has value", false);
				None(): { }
			}
		}
	);

	println("=========================");
	println("ALL BIT SET TESTS PASSED");
	0
}
