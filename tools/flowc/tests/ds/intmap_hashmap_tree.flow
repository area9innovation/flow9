import ds/intmap;
import math/hash;

main() {
    pairs = [
		Triple(1, 2, 10),
		Triple(1, 3, 20),
		Triple(2, 1, 40),
		Triple(3, 1, 50),
		Triple(2, 3, 60),
		Triple(2, 3, 100),
	];
	trips = generate(1, 100, \i -> Triple(
		floor(random()*1000.),
		floor(random()*1000.),
		floor(random()*10.)
	));

	t1 = timestamp();

	generate(1, 1000, \__ -> {
		//im = makeIntMap();
		im = makeHashMap(hashPairOfInt);
		
		iter(pairs, \p -> {
		//im = fold(trips, makeTree(), \acc, p -> {
			h = hashPairOfInt(Pair(p.first, p.second));
			//h = addHashInt(addHashInt(FNV_offset_basis, p.first), p.second);
			//v = lookupIntMapDef(im, h, 0);
			v = lookupHashMapDef(im, Pair(p.first, p.second), 0);
			//v = lookupTreeDef(acc, Pair(p.first, p.second), 0);

			//setIntMap(im, h, v + p.third)
			setHashMap(im, Pair(p.first, p.second), v);
			//setTree(acc, Pair(p.first, p.second), v)
		});
		
		//generate(1, 10000, \__ -> lookupIntMap(im, floor(random()*1000.)) |> ignore);
		generate(1, 10000, \__ -> lookupHashMap(im, Pair(floor(random()*1000.), floor(random()*1000.))) |> ignore);
		//generate(1, 10000, \__ -> lookupTree(im, Pair(floor(random()*1000.), floor(random()*1000.))) |> ignore);
	});

	println(timestamp() - t1);
	gc();
}