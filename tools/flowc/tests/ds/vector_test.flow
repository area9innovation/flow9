import ds/vector;
import ds/arrayutils;
import math/hash;
import math/stringmath;

checkArrayAndVectorEqual(arr : [?], vect : Vector<?>) -> bool {
	result = ref true;
	if (length(arr) != sizeVector(vect)) {
		println("Array size: " + i2s(length(arr)) + " != vect size: "  + i2s(sizeVector(vect)));
		result := false;
	}
	iteriVector(vect, \i, v1 -> {
			v2 = arr[i];
			if (v1 != v2 && ^result) {
				println("values differ: ");
				println("i:");
				println(i2s(i));
				println("vector value:");
				println(v1);
				println("array value:");
				println(v2);
				result := false;
			}
		}
	);
	^result
}

testArray(mods : [int], rand_val : () -> ?) -> bool {
	vect = makeVector(16);
	ret = ref true;
	fold(mods, [], \arr, mod -> 
		if (!^ret || mod == 0) arr else
		if (mod > 0) {
			fold(enumFromTo(0, mod), arr, \ar, __ -> {
				v = rand_val();
				pushVector(vect, v);
				r = concat(ar, [v]);
				if (!checkArrayAndVectorEqual(r, vect)) {
					ret := false;
				}
				r
			});
		} else {
			fold(enumFromTo(0, -mod), arr, \ar, __ -> {
				if (length(ar) == 0) ar else {
					i = cast(random() * i2d(length(ar)) : double -> int);
					removeVector(vect, i);
					r = removeIndex(ar, i);
					if (!checkArrayAndVectorEqual(r, vect)) {
						ret := false;
						println("at removing index: " + i2s(i) + ", arlen: " + i2s(length(ar)));
						quit(-1);
					}
					r
				}
			});
		}
	);
	^ret;
}

procArray(mods : [int]) -> double {
	start = timestamp();
	fold(mods, [], \arr, mod -> 
		if (mod == 0) arr else
		if (mod > 0) {
			fold(enumFromTo(0, mod), arr, \ar, __ -> 
				concat(ar, [random_int(10000)()])
			);
		} else {
			fold(enumFromTo(0, -mod), arr, \ar, __ -> {
				if (length(ar) == 0) ar else {
					i = cast(random() * i2d(length(ar)) : double -> int);
					removeIndex(ar, i);
				}
			});
		}
	);
	(timestamp() - start) / 1000.0;
}


procVect(mods : [int]) -> double {
	start = timestamp();
	vect = makeVector(16);
	iter(mods, \mod -> 
		if (mod > 0) {
			iter(enumFromTo(0, mod), \__ ->
				pushVector(vect, random_int(10000)())
			);
		} else {
			iter(enumFromTo(0, -mod), \__ -> 
				if (sizeVector(vect) > 0) {
					i = cast(random() * i2d(sizeVector(vect)) : double -> int);
					removeVector(vect, i);
				}
			);
		}
	);
	(timestamp() - start) / 1000.0;
}

random_string() -> string {
	len = cast(random() * 20.0 : double -> int) + 1;
	symbs = arrayRepeatDeferred(\ -> 
		33 + cast(cast((126 - 33) : int -> double) * random() : double -> int),
		len
	);
	fold(symbs, "", \acc, code -> acc + fromCharCode(code))
}

random_int(max_int : int) -> () -> int {
	\ -> cast(random() * i2d(max_int) : double -> int);
}

random_int_array(sz : int, max_val : int) -> [int] {
	rand = random_int(max_val);
	map(enumFromTo(0, sz), \i -> {
		if (i % 2 == 0) {
			rand();
		} else {
			-rand();
		}
	});
}

main() -> void {
	testPassed = ref true;
	sz_arr = random_int_array(16, 256);
	println("Modifications:\n" + toString(sz_arr));
	ret = testArray(sz_arr, random_int(10000)) && testArray(sz_arr, random_string);
	if (ret) {
		println("Vector tests passed");
	} else {
		println("Vector tests FAILED");
	}
	bench_arr = random_int_array(128, 20000);
	println("Benchmarking:\n" + toString(bench_arr));
	time_arr = procArray(bench_arr);
	time_vect = procVect(bench_arr);
	println("Vector proc. time: " + d2st(time_vect, 3) + "s.");
	println("Array proc. time: " + d2st(time_arr, 3) + "s.");
	println("Vector is faster: " + d2st(time_arr / time_vect, 3) + " TIMES");
	quit(0);
}
