import ds/bitvector;
import arrayutils;
import stringmath;


createRandomLength(maxLen : int) -> int {
	cast(random() * cast(maxLen : int -> double) : double -> int)
}

createRandomBoolArray(len : int) -> [bool] {
	arrayRepeatDeferred(\ -> random() > 0.5, len);
}

dumpBitVector(bitvector : BitVector) -> string {
	fold(
		enumFromTo(0, bitvector.bitcount - 1), "",
		\acc, i -> {
			switch (getBitVector(bitvector, i)) {
				Some(val): if (val) acc + "1" else acc + "0";
				None(): acc + "_";
			}
		}
	)
}

dumpBitArray(bitarr : [bool]) -> string {
	fold(
		enumFromTo(0, length(bitarr) - 1), "",
		\acc, i ->
			if (bitarr[i]) acc + "1" else acc + "0"
	)
}

testsOnCreation(maxLen : int) -> void {
	time_start = timestamp();
	iter(enumFromTo(1, 100), 
		\n -> {
			len = createRandomLength(maxLen);
			randArr = createRandomBoolArray(len);
			//println("RUNNING " + i2s(n) + " TEST OF SIZE: " + i2s(len));
			bitvectorPos = foldi(randArr, makeBitVector(len, \__ -> false),
				\i, acc, bit -> if (bit) setBitVector(acc, i) else acc
			);
			bitvectorNeg = foldi(randArr, makeBitVector(len, \__ -> true),
				\i, acc, bit -> if (bit) acc else unsetBitVector(acc, i)
			);
			
			error = \err, pos -> {
				println(err);
				println("bitarr:    " + dumpBitArray(randArr));
				if (pos) {
					println("bitvector(P): " + dumpBitVector(bitvectorPos));
				} else {
					println("bitvector(N): " + dumpBitVector(bitvectorNeg));
				}
				quit(0);
			}
			
			iteri(randArr, \i, bit -> {
					if (Some(bit) != getBitVector(bitvectorPos, i)) {
						error("TEST FAIL: bits differ", true);
					}
					if (Some(bit) != getBitVector(bitvectorNeg, i)) {
						error("TEST FAIL: bits differ", false);
					}
				}
			);
			switch (getBitVector(bitvectorPos, -1)) {
				Some(__):  error("TEST FAIL: index '-1' has value", true);
				None(): { }
			}
			switch (getBitVector(bitvectorPos, len)) {
				Some(__):  error("TEST FAIL: index '" + i2s(len) + "' has value", true);
				None(): { }
			}
			switch (getBitVector(bitvectorNeg, -1)) {
				Some(__):  error("TEST FAIL: index '-1' has value", false);
				None(): { }
			}
			switch (getBitVector(bitvectorNeg, len)) {
				Some(__):  error("TEST FAIL: index '" + i2s(len) + "' has value", false);
				None(): { }
			}
		}
	);
	time = (timestamp() - time_start) / 1000.0;
	println("TEST COMPLETED IN: " + d2st(time, 2) + "s");
}

testsOnOperations(maxLen : int) -> void {
	time_start = timestamp();
	iter(enumFromTo(1, 100), 
		\n -> {
			len = createRandomLength(maxLen);
			randArr1 = createRandomBoolArray(len);
			randArr2 = createRandomBoolArray(len);
			
			//println("RUNNING " + i2s(n) + " TEST OF SIZE: " + i2s(len));
			
			bitvector1 = makeBitVector(len,
				\i -> {
					if (i < length(randArr1)) {
						randArr1[i]
					} else {
						println("index violation: " + i2s(i) + " >= " + i2s(length(randArr1)));
						false;
					}
				}
			);
			bitvector2 = makeBitVector(len, 
				\i -> {
					if (i < length(randArr2)) {
						randArr2[i]
					} else {
						println("index violation: " + i2s(i) + " >= " + i2s(length(randArr2)));
						false;
					}
				}
			);
			
			error = \err -> {
				println(err);
				quit(0);
			}
			
			union = bitVectorOr(bitvector1, bitvector2); 
			iteri(randArr1, 
				\i, bit -> {
					if (Some(bit || randArr2[i]) != getBitVector(union, i)) {
						error("TEST FAIL: union differs");
					}
				}
			);
			
			intersect = bitVectorAnd(bitvector1, bitvector2);
			iteri(randArr1, 
				\i, bit -> {
					if (Some(bit && randArr2[i]) != getBitVector(intersect, i)) {
						error("TEST FAIL: intersection differs");
					}
				}
			);

			complement = bitVectorNot(bitvector1);
			iteri(randArr1, 
				\i, bit -> {
					if (Some(!bit) != getBitVector(complement, i)) {
						error("TEST FAIL: complemetation differs");
					}
				}
			);
		}
	);
	time = (timestamp() - time_start) / 1000.0;
	println("TEST COMPLETED IN: " + d2st(time, 2) + "s");
}

main() -> int {
	maxLen = 20000;
	println("\nTESTS OF CREATION OF IMMUTABLE BITSETS");
	testsOnCreation(maxLen);

	println("\nTESTS OF SET-THEORETIC IMMUTABLE OPERATIONS");
	testsOnOperations(maxLen);

	println("=========================");
	println("ALL BIT VECTOR TESTS PASSED");
	0
}
