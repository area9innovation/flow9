export {

// Post-MVP WebAssembly features to legalize.
WasmFeatures(
	// Exception handling 
    exceptions: bool,
	// Import/Export mutable globals 
    mutable_globals: bool,
	// Non-trapping Float-to-int Conversions 
    sat_float_to_int: bool,
	// Sign-extension operators
    sign_extension: bool,
	// 128-bit packed SIMD
    simd: bool,
	// Threading
    threads: bool,
	// Multi-value
    multi_value: bool,
	// Tail Call
    tail_call: bool,
	// Bulk Memory Operations and Conditional Segment Initialization
    bulk_memory: bool,
	// Reference Types
    reference_types: bool,
	// Custom Annotation Syntax for the Wasm Text Format
    annotations: bool,
	// Garbage collection.
    gc: bool
);


// A class representing a WebAssembly module.
WasmModule(
	// Validates the module. Throws if not valid.
    validate: () -> void,
	// Resolves names to indexes.
    resolveNames: () -> void,
	// Generates textual names for function types, globals, labels etc.
    generateNames: () -> void,
    // Applies textual names. Throws on error.
    applyNames: () -> void,
	// Converts the module to wat text format.
    toText: (options: ToTextOptions) -> string,
    // Converts the module to a wasm binary.
    toBinary: (options: ToBinaryOptions) -> ToBinaryResult,
    // Disposes the module and frees its resources.
    destroy: () -> void
);


// Options modifying the behavior of readWasm.
ReadWasmOptions(
	// Reads textual names from the name section.
    readDebugNames: bool
);

// Options modifying the behavior of WasmModule#toText.
ToTextOptions(
    foldExprs: bool,
    inlineExport: bool,
);

// Options modifying the behavior of WasmModule#toBinary.
ToBinaryOptions(
    log: bool,
    canonicalize_lebs: bool,
    relocatable: bool,
    write_debug_names: bool,
);

// Result object of WasmModule#toBinary.
ToBinaryResult(
	// The wasm binary buffer.
    buffer: [int],
	// Generated log output.
    log: string
);

// Parses a WebAssembly text format source to a module.
native parseWat : (filename: string, buffer: string, options: WasmFeatures, on_module : (WasmModule) -> void) -> void = WabtNativeHost.parseWat;

// Reads a WebAssembly binary to a module.
native readWasm : (buffer: [int], read_options: ReadWasmOptions,  options: WasmFeatures, on_module : (WasmModule) -> void) -> void = WabtNativeHost.readWasm;

}
