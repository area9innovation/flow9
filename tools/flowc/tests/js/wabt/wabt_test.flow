import string;
import sys/system;
import text/blueprint;
import tools/flowc/tests/js/wabt/wabt_natives;

/*
 resolveNames: () -> void,
	// Generates textual names for function types, globals, labels etc.
    generateNames: () -> void,
    // Applies textual names. Throws on error.
    applyNames: () -> void,
*/

wat_test(callback : () -> void) -> void {
	opts = WasmFeatures(
		true, true, true, true, true, true,
		true, true, true, true, true, true
	);
	src = getFileContent("module.wat");
	parseWat("module.wat", src, opts, \module -> {
		module.validate();
		module.resolveNames();
		module.applyNames();
		println("Module: " + module.toText(ToTextOptions(true, true)));
		bin = module.toBinary(ToBinaryOptions(true, true, true, true));
		//println("toBinary log:\n" + bin.log);
		setFileContent("module-1.wasm", concatStrings(map(bin.buffer, fromCharCode)));
		module.destroy();
		callback();
	});
}

wasm_test(file : string, callback : () -> void) -> void {
	opts = WasmFeatures(
		true, true, true, true, true, true,
		true, true, true, true, true, true
	);
	read_opts = ReadWasmOptions(true);
	src = getFileContent(file);
	readWasm(s2a(src), read_opts, opts, \module -> {
		module.validate();
		module.resolveNames();
		module.applyNames();
		println("Module: " + module.toText(ToTextOptions(true, true)));
		bin = module.toBinary(ToBinaryOptions(true, true, true, true));
		module.destroy();
		callback();
	});
}

main() -> void {
	wat_test(\-> 
		wasm_test("module.wasm", \->
			//wasm_test("module-1.wasm", \-> 
				quit(0)
			//)
		)
	);
}
