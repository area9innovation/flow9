import string;
import sys/system;
import text/blueprint;
import tools/flowc/tests/js/wabt/wabt_natives;

wat_test(callback : () -> void) -> void {
	opts = WasmFeatures(
		true, true, true, true, true, true,
		true, true, true, true, true, true
	);
	src = getFileContent("module.wat");
	parseWat("module.wat", src, opts, \module -> {
		module.validate();
		module.resolveNames();
		module.applyNames();
		//println("Module: " + module.toText(ToTextOptions(true, true)));
		bin = module.toBinary(ToBinaryOptions(true, true, true, true));
		runAdd(bin, 2, 3, \x -> println("A: runAdd=" + i2s(x)));
		runFunc(bin, "add", [2, 3], \x -> println("A: runFunc=" + i2s(x)));
		doneP(
			runFunc1(bin, "add", [6, 7]),
			\x -> println("A: runFunc1=" + i2s(x)),
			\x -> println("A: reject: runFunc1=" + i2s(x))
		);
		//println("toBinary log:\n" + bin.log);
		setFileContent("module-1.wasm", concatStrings(map(bin.buffer, fromCharCode)));
		module.destroy();
		callback();
	});
}

wasm_test(file : string, callback : () -> void) -> void {
	opts = WasmFeatures(
		true, true, true, true, true, true,
		true, true, true, true, true, true
	);
	read_opts = ReadWasmOptions(true);
	src = getFileContent(file);
	readWasm(s2a(src), read_opts, opts, \module -> {
		module.validate();
		module.resolveNames();
		module.applyNames();
		//println("Module: " + module.toText(ToTextOptions(true, true)));
		bin = module.toBinary(ToBinaryOptions(true, true, true, true));
		runAdd(bin, 6, 7, \x -> println("B: runAdd=" + i2s(x)));
		runFunc(bin, "add", [6, 7], \x -> println("B: runFunc=" + i2s(x)));
		doneP(
			runFunc1(bin, "add", [6, 7]),
			\x -> println("B: runFunc1=" + i2s(x)),
			\x -> println("B: reject: runFunc1=" + i2s(x))
		);
		module.destroy();
		callback();
	});
}

main() -> void {
	wat_test(\-> 
		wasm_test("module.wasm", \->
			//wasm_test("module-1.wasm", \-> 
				timer(1000, \-> quit(0))
			//)
		)
	);
}
