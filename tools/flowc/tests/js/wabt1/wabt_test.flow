import string;
import sys/system;
import text/blueprint;
import formats/wabt;

wat_test(callback : () -> void) -> void {
	opts = WasmFeatures(
		true, true, true, true, true, true,
		true, true, true, true, true, true
	);
	src = getFileContent("module.wat");
	doneP(
		parseWat("module.wat", src, opts), 
		\module -> {
			module.validate();
			module.resolveNames();
			module.applyNames();
			//println("Module: " + module.toText(ToTextOptions(true, true)));
			bin = module.toBinary(ToBinaryOptions(true, true, true, true));
			doneP(
				runWasmFunc(bin, "add", [3, 2]),
				\x -> {
					println("A: runWasmFunc=" + i2s(x) + " (must be 5)");
					//println("toBinary log:\n" + bin.log);
					setFileContent("module-1.wasm", concatStrings(map(bin.buffer, fromCharCode)));
					module.destroy();
					callback();
				},
				\x -> println("A: reject: runWasmFunc=" + i2s(x))
			);
		},
		\err -> println(err)
	);
}

wasm_test(file : string, callback : () -> void) -> void {
	opts = WasmFeatures(
		true, true, true, true, true, true,
		true, true, true, true, true, true
	);
	read_opts = ReadWasmOptions(true);
	src = getFileContent(file);
	doneP(
		readWasm(s2a(src), read_opts, opts), 
		\module -> {
			module.validate();
			module.resolveNames();
			module.applyNames();
			//println("Module: " + module.toText(ToTextOptions(true, true)));
			bin = module.toBinary(ToBinaryOptions(true, true, true, true));
			doneP(
				runWasmFunc(bin, "add", [5, 2]),
				\x -> {
					println("B: runWasmFunc=" + i2s(x) + " (must be 7)");
					module.destroy();
					callback();
				},
				\x -> println("B: reject: runWasmFunc=" + i2s(x))
			);
		},
		\err -> println(err)
	);
}

main() -> void {
	wat_test(\-> 
		wasm_test("module.wasm", \->
			quit(0)
		)
	);
}
