// testing flow-type

import serialize;
import binary;
import algorithms;
import ds/treeutils;
import blueprint;
import behaviour;
import tools/flowc/incremental/fitype;
import tools/flowc/incremental/fiexp;
import tools/flowc/incremental/fimodule;
import lingo/flow/bytecode;

check1(ok : bool) {
	println(if (ok) "OK!" else "FAILURE!!!");
}

MyStruct011(i : int);
MyStruct012(i : int);
MyStruct013(i : int);

test01() {
	s1 = MyStruct011(1);
	s2 = MyStruct012(2);
	s3 = MyStruct013(3);
	a : [flow] = [flow(s1), flow(s2)];
	check1(extractStruct(a, MyStruct011(0)) == s1);
	check1(extractStruct(a, MyStruct012(0)) == s2);
	// println(extractStruct(a, s3));
	check1(extractStruct(a, s3) == s3);
}

test02() {
	s1 = MyStruct011(1);
	s = toString(s1);
	// println(s);
	check1(s == "MyStruct011(1)");
	
	m : Maybe<int> = Some(123);
	ss = toString(m);
	check1(ss == "Some(123)");
	
	f0 : flow = [flow(s1)];
	f1 : [flow] = concat(f0, f0);
	check1(length(f1) == 2);
	
	f = deserialize(s, MyStruct011(0));
	check1(f == s1);
	
	f2 : flow = 1.0;
}

MyStruct031(i : int);
MyStruct032(s : MyStruct031);
MyStruct033(a : [MyStruct031]);

MyUnion031 ::= MyStruct031, MyStruct034;
MyStruct034();

MyStruct035(a : [MyUnion031]);

MyStruct036(s : string);

test03() {
	f1 : flow = makeStructValue("MyStruct031", [1], IllegalStruct());
	// println(toString(f));
	check1(toString(f1) == "MyStruct031(1)");
	f2 : flow = makeStructValue("MyStruct032", [f1], IllegalStruct());
	println(toString(f2));
	check1(toString(f2) == "MyStruct032(MyStruct031(1))");
	f3 : flow = makeStructValue("MyStruct033", [[f1, f1]], IllegalStruct());
	println(toString(f3));
	check1(toString(f3) == "MyStruct033([MyStruct031(1), MyStruct031(1)])");
	f4 : flow = MyStruct034();
	f5 : flow = makeStructValue("MyStruct035", [[f1, f4]], IllegalStruct());
	println(toString(f5));
	check1(toString(f5) == "MyStruct035([MyStruct031(1), MyStruct034()])");
	
	f5_ : flow = deserialize(toString(f5), IllegalStruct());
	println(toString(f5_));
	check1(toString(f5_) == "MyStruct035([MyStruct031(1), MyStruct034()])");
	
	s5 : MyStruct035 = f5_;
	check1(s5.a[0] == MyStruct031(1));
	check1(s5.a[1] == MyStruct034());
	check1(toString(s5) == "MyStruct035([MyStruct031(1), MyStruct034()])");
	
	f6 = deserialize(toString(f5), IllegalStruct());
	println(toString(f6));

	f7 : flow = "123";
	println(toString(f7));
	check1(toString(f7) == "\"123\"");
	
	f8 : flow = makeStructValue("MyStruct036", ["123"], IllegalStruct());
	check1(toString(f8) == "MyStruct036(\"123\")");
}

test031() {
	conv = \s : string -> {
		map(enumFromTo(0, strlen(s)-1), \i -> getCharCodeAt(s, i));
	}
	s1 = MyStruct031(123);
	b1 = toBinary(s1);
	a1 = [5, 0, 65524, 0, 123, 65528, 1, 65528, 2, 1, 65530, 11, 77, 121, 83, 116, 114, 117, 99, 116, 48, 51, 49];
	// println(conv(b1));
	check1(conv(b1) == a1);
	x = deserializeBinary(b1, None());
	println(toString(x));
	check1(x == s1);
}

test032() {
	conv = \s : string -> {
		map(enumFromTo(0, strlen(s)-1), \i -> getCharCodeAt(s, i));
	}
	s = MyStruct035([MyStruct031(1), MyStruct034()]);
	f1 : flow = s.a[0];
	f2 : flow = s.a;
	b = toBinary(s);
	// println(toString(conv(b)));
	x = deserializeBinary(b, None());
	println(toString(x));
	check1(x == s);
}

test033() {
	conv = \s : string -> {
		map(enumFromTo(0, strlen(s)-1), \i -> getCharCodeAt(s, i));
	}
	s = MyStruct033([MyStruct031(1)]);
	f1 : flow = s.a[0];
	f2 : flow = s.a;
	b = toBinary(s);
	x = deserializeBinary(b, None());
	println(toString(x));
	check1(x == s);
}

MyStruct0341(i : int, b : bool, d : double, s : string, sa : [string]);

test034() {
	s = MyStruct0341(123, true, 123.0, "123", ["1", "2"]);
	b = toBinary(s);
	x = deserializeBinary(b, None());
	println(toString(x));
	check1(x == s);
}

test035() {
	s = FiTypeArray(FiTypeBool());
	b = toBinary(s);
	x = deserializeBinary(b, None());
	println(toString(x));
	check1(x == s);
}

test036() {
	s = FiVar("var", FiTypeArray(FiTypeBool()), 0);
	b = toBinary(s);
	x = deserializeBinary(b, None());
	println(toString(x));
	check1(x == s);
	check1(setFileContent("objc/test1.module", b));
}

test041() {
	x = if (true) 1
	else fail0("ttt");
	check1(x == 1);
}

test042() {
	check1(round(1.5) == 2);
}

test043() {
	f = \e : FiExp -> e.start;
	check1(f(FiInt(0, 123)) == 123);
	lambda = FiLambda([], FiInt(0, 123), FiTypeInt(), 0);
	check1(f(lambda.body) == 123);
	check1(lambda.body.start == 123);
}

FiExpOrCase ::= FiExp, FiCase;
FiAll ::= FiExpOrCase, FiDeclaration, FiStructOrUnion;

test044() {
	a = map([1,2,3], \x -> {});
	check1(toString(a) == "[{}, {}, {}]");
}

test045() {
	getInt = \l : FiLambda -> {
		switch (l.body) {
			FiInt(v, __): v;
			default: 0;
		}
	}
	lambda = FiLambda([], FiInt(123, 0), FiTypeInt(), 0);
	check1(getInt(lambda) == 123);
}

test046() {
	// snippet from setJsonFieldCustom()
	b = true;
	f = if (b) \x -> 2*x else \x -> x;
	check1(f(1) == 2);
}

test047() {
	a = [3, 2, 1];
	aa = sort(a);
	check1(aa == [1, 2, 3]);
}

MyStruct048(tree : Tree<string, FiExp>);

test048() {
	makeVar = \s -> FiVar(s, FiTypeVoid(), 0);
	s = MyStruct048(
		pairs2tree(map(["a", "b", "c"], \x -> Pair(x, makeVar(x))))
	);
	check1(lookupTreeDef(s.tree, "b", makeVar("")) == makeVar("b"));
}

test049() {
	x = FiInt(0, 123);
	switch (x) {
		FiInt(__, pos): check1(pos == 123);
		default: check1(false);
	}
}

test050() {
	s = blueprint("%x%", ["x", "y"]);
	check1(s == "y");
}

BytecodeOrChunks ::= Bytecode, BytecodeChunks;
BytecodeChunks(len : int);

test051() {
	f = \x : BytecodeOrChunks -> {
		switch (x) {
			BytecodeChunks(__): CVoid();
			default: {
				cast(x : BytecodeOrChunks -> Bytecode);
			}
		}
	}
	check1(f(BytecodeChunks(1)) == CVoid());
	check1(f(CInt(0)) == CInt(0)); 
}

test052() {
	sz = fileSize("test1.flow");
	println(d2s(sz));
	check1(sz > 0.0);
	println("test=" + getUrlParameter("test"));
	println(toString(getAllUrlParametersArray()));
}

test053() {
	t = make(0);
	r = ref 0;
	un = subscribe2(t, \v -> r := v);
	next(t, 1);
	check1(getValue(t) == 1 && (^r) == 1);
	un();
	next(t, 2);
	check1(getValue(t) == 2 && (^r) == 1);
}

main() {
	// test01();
	// test02();
	// test03();
	// test031();
	// test032();
	// test033();
	// test034();
	// test035();
	// test036();
	// test041();
	// test042();
	// test043();
	// // test044();	// not working - array of voids
	// test045();
	// test046();
	// test047();
	// // test048();	// not working yet
	// test049();
	// test050();
	// test051();
	// test052();
	test053();
}
