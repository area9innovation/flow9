// testing arrays and lists

import runtime;	// for println
import array;
import ds/list;

i2s(i) { cast(i : int -> string); }

check(ok : bool) {
	println(if (ok) "OK!" else "FAILURE!!!");
}

strGlue(arr: [string], sep: string) {
	if (arr == []) ""
	else if (length(arr) == 1) arr[0]
	else arr[0] + sep + strGlue(tail(arr), sep);
}

test1() {
	a = [1,2,3];
	a2 = tail(a);
	check(length(a2) == 2 && a2[0] == 2 && a2[1] == 3);
	a3 = take(a, 2);
	check(length(a3) == 2 && a3[0] == 1 && a3[1] == 2);
	b3 = [1,2];
	check(a3 == b3);
	a4 = reverseA(a);
	b4 = [3,2,1];
	check(a4 == b4);
	check(concat3([1],[2],[3]) == a);
	a5 = map(a, \x -> [x]);
	check(concatA(a5) == a);
	s = strGlue(map(a, i2s), ",");
	println(s);
	check(s == "1,2,3");
	a6 = subrange(a, 2, 5);
	check(length(a6) == 1 && a6[0] == 3);
}

test2() {
	prn = \arr -> strGlue(map(arr, \x -> i2s(x)), "");
	check2 = \arr, answer -> {
		s = prn(arr);
		println(s);
		check(s == answer);
	}
	a = enumFromTo(0, 9);
	check2(a, "0123456789");
	a2 = map(a, \x -> x % 2);
	check2(a2, "0101010101");
	prn2 = \arr -> fold(arr, "", \acc, x -> acc + i2s(x));
	check(prn(a) == prn2(a));
	
	countMod3 = \m -> countA(a, \x -> x % 3 == m);
	check((countMod3(0) == 4) && (countMod3(1) == 3) && (countMod3(2) == 3));
	
	check(elemIndex(a, 5, -1) == 5);
	check(elemIndex(reverseA(a), 5, -1) == 4);
	check(exists(a, \x -> x == 5) && !exists(a, \x -> x == 55));
	
	find2 = \x -> isSome(find(a, \xx -> x == xx));
	check(find2(5) && !find2(55));
	
	a3 = filter(a, \x -> x % 2 == 0);
	check2(a3, "02468");
	
	a4 = filtermap(a, \x -> if (x % 3 == 0) Some(x*x) else None());
	check2(a4, "093681");

	a5 = filter(filter(a, \x -> x % 2 == 0), \x -> x % 4 == 0);
	check2(a5, "048");
}

test3() {
	l0 = makeList();
	l1 = Cons(1, l0);
	l2 = Cons(2, l1);
	check(countList(l0) == 0 && countList(l1) == 1 && countList(l2) == 2);
	arr = list2array(l2);
	println("[" + strGlue(map(arr,i2s), ",") + "]");
	check(arr == [1,2]);
}

// testing list2string

test4() {
	l = Cons("5", Cons("4", Cons("3", Cons("2", Cons("1", makeList())))));
	check(list2string(l) == "12345");
}

// testing Pair<List, int> conversions

test5_f(s : string) -> Pair<List<string>, int> {
	Pair(Cons(s, makeList()), 0);
}

test5() {
	check("1" == list2string(test5_f("1").first));
}

main() {
	test1();
	test2();
	test3();
	test4();
	test5();
}