native setTree : (tree : Tree<?, ??>, key : ?, value : ??) -> Tree<?, ??> = Native.fast_setTree;

Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);


Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

FcExp ::= FcLambda, FcBool;
		FcLambda(args: [FcFunArg], body: FcExp, info: FcInfo);
	FcBool(b: bool, info : FcInfo);

FcType ::= FcTypeBool;
	FcTypeBool();

		FcFunArg(name : string, type : FcType);


FcInfo(type : ref Maybe<FcType>, start : int, end : int);

validateFcExpInfos(infos : Tree<FcInfo, FcExp>, c : FcExp) -> Tree<FcInfo, FcExp> {
	infos1 = setTree(infos, c.info, c);
	switch (c) {
		FcLambda(args, b, li): {
			switch (^(li.type)) {
				None(): {}
				Some(ft): {}
			};
			validateFcExpInfos(infos1, b);
		}
		default: infos;
	}
}
