import runtime;
import ds/dlist;
import lingo/flow/bytecode;

BytecodeOrChunks ::= Bytecode, BytecodeChunks;
BytecodeChunks(len : int, chunks: DList<string>);


fiBytecodeLength(chunks : BytecodeChunks) -> int {
	chunks.len
}

fiMakeBytecode(chunks : [BytecodeOrChunks]) -> BytecodeChunks {
	len: ref int = ref 0;

	res = fold(chunks, makeDList(), \acc, e : BytecodeOrChunks -> {
		switch(e) {
			BytecodeChunks(ln, li) : {
				len := ^len + ln;
				concatDList(acc, li);
				acc;
			}
			default : {
				str = bytecode2binary(cast(e : BytecodeOrChunks -> Bytecode));
				len := ^len + strlen(str);
				pushDList(acc, str);
				acc;
			}
		}
	});
	BytecodeChunks(^len, res);
}

main() {
	pc = ref 0;
	pc := ^pc + fiBytecodeLength(fiMakeBytecode([]));
}
