import runtime;
import ds/dlist;
import lingo/flow/bytecode;

BytecodeOrChunks ::= Bytecode, BytecodeChunks;
BytecodeChunks(len : int, chunks: DList<string>);


fiBytecodeLength(chunks : BytecodeChunks) -> int {
	chunks.len
}

fiMakeBytecode(chunks : [BytecodeOrChunks]) -> BytecodeChunks {
	len: ref int = ref 0;

	res = fold(chunks, makeDList(), \acc, e : BytecodeOrChunks -> {
		switch(e) {
			BytecodeChunks(ln, li) : {
				len := ^len + ln;
				concatDList(acc, li);
				acc;
			}
			default : {
				str = bytecode2binary(cast(e : BytecodeOrChunks -> Bytecode));
				len := ^len + strlen(str);
				pushDList(acc, str);
				acc;
			}
		}
	});
	BytecodeChunks(^len, res);
}

main() {
	pc = ref 0;
	pc := ^pc + fiBytecodeLength(fiMakeBytecode([]));
}

----------

fiBytecodeLength = \chunks:BytecodeChunks ->
	chunks.len


fiMakeBytecode = \chunks:[BytecodeOrChunks] ->
	len : ref int = ref 0;
	res : DList<string> = fold(chunks, makeDList(), \acc:DList<string>, e:BytecodeOrChunks ->
		switch (e : BytecodeOrChunks) {
			BytecodeChunks(ln,li): {
				ln : int = e.len;
				li : DList<string> = e.chunks;
				{
					(len  :=  (^len + ln));
					concatDList(acc, li);
					acc
				}

			}
			default(): {
				str : string = bytecode2binary(cast(e : BytecodeOrChunks -> Bytecode));
				{
					(len  :=  (^len + strlen(str)));
					pushDList(acc, str);
					acc
				}

			}
		}
	);
	BytecodeChunks(^len, res)


main = \ ->
	pc : ref int = ref 0;
	(pc  :=  (^pc + tmp_var_0 : BytecodeChunks = fiMakeBytecode([]);
	tmp_var_0.len))

