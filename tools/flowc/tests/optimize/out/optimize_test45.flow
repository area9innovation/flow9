import runtime; // for println
import ds/tree;
import math;

SyntTree : (a : int);

SyntaxParseAcc_1 : (caches : [ref Tree<int, SyntTree>]);

do_parse_flow_int_1(acc : SyntaxParseAcc_1) -> SyntTree {
	cache = (acc.caches)[0];
	lookupTreeDef(^cache, 1, SyntTree(0))
}

main() {
	t0 = ref makeTree();
	t1 = ref makeTree();
	t2 = ref makeTree();
	acc = SyntaxParseAcc_1([t0, t1, t2]);
	println(i2s(do_parse_flow_int_1(acc).a))
}

----------

do_parse_flow_int_1 = \acc:SyntaxParseAcc_1 ->
	cache : ref Tree<int, SyntTree> = acc.caches[0];
	lookupTreeDef(^cache, 1, SyntTree(0))


main = \ ->
	t0 : ref Tree<int, SyntTree> = ref TreeEmpty();
	t1 : ref Tree<int, SyntTree> = ref TreeEmpty();
	t2 : ref Tree<int, SyntTree> = ref TreeEmpty();
	acc : SyntaxParseAcc_1 = SyntaxParseAcc_1([t0, t1, t2]);
	println(i2s(do_parse_flow_int_1(acc).a))

