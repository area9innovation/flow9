// Â© Copyright 2011 Area9 Technologies.

export {
	//
	// Option type
	//

	Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

	isNone : (Maybe<?>) -> bool;
	isSome : (Maybe<?>) -> bool;

	// give the value in a Maybe or a default value
	either    : (m: Maybe<?>, alternative: ?) -> ?;
	eitherMap : (m: Maybe<?>, fn : (?) -> ??, alternative: ??) -> ??;
	eitherFn  : (m: Maybe<?>, fn : (?) -> ??, alternativeFn: () -> ??) -> ??;
	eitherFn2 : (a: Maybe<?>, b : Maybe<?>, fn2 : (?, ?) -> ??, fn1 : (?) -> ??, fn0 : () -> ??) -> ??;

	// Monadic bind over Maybe seen as the exception monad.
	maybeBind  : (m: Maybe<?>, f: (?)->Maybe<??>) -> Maybe<??>;
	maybeBind2 : (f: (?, ??)-> Maybe<???>) -> (m1 : Maybe<?>, m2 : Maybe<??>) -> Maybe<???>;
	maybeMap   : (m: Maybe<?>, f: (?) -> ??) -> Maybe<??>;
	maybeMap2  : (f: (?, ??) -> ???) -> (m1 : Maybe<?>, m2 : Maybe<??>) -> Maybe<???>;
	maybeApply : (m: Maybe<?>, f: (?) -> void) -> void;

	// This is a helper that ensures that the given function is called only once
	// Use like this:
	//   a = ref None();
	//   b = onlyOnce(a, \ -> { println("Hello"); 1 });
	//   c = onlyOnce(a, \ -> { println("world"); 2 });
	// This program will print "Hello", and BOTH b and c will be 1
	onlyOnce(pad : ref Maybe<?>, init : () -> ?) -> ?;

	// helper for generating Some(fn(?) -> ??)
	fn2some : (fn : (?) -> ??) -> (?) -> Maybe<??>;
}

isNone(m) {
	switch (m : Maybe) {
		None() : true;
		Some(__) : false;
	}
}

isSome(m) {
	switch (m : Maybe) {
		None() : false;
		Some(__) : true;
	}
}

either(m, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}

eitherMap(m, fn, alternative) {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): fn(v);
	}
}

eitherFn(m, fn, alternativeFn) {
	switch (m : Maybe) {
		None(): alternativeFn();
		Some(v): fn(v);
	}
}

maybeBind(m, f) {
	switch (m : Maybe) {
		None(): None();
		Some(v): f(v);
	}
}

maybeBind2(f : (?, ??)-> Maybe<???>) -> (m1 : Maybe<?>, m2 : Maybe<??>) -> Maybe<???> {
	\m1, m2 -> {
		maybeBind(m1,
			\v1 -> {
				maybeBind(m2,
					\v2 -> f(v1, v2)
				)
			}
		)
	}
}

maybeMap(m, f) {
	switch (m : Maybe) {
		None(): None();
		Some(v): Some(f(v));
	}
}

maybeMap2(f : (?, ??) -> ???) -> (m1 : Maybe<?>, m2 : Maybe<??>) -> Maybe<???> {
	\m1, m2 -> {
		maybeBind(m1,
			\v1 -> {
				maybeMap(m2,
					\v2 -> f(v1, v2)
				)
			}
		)
	}
}

maybeApply(m, f) {
	switch (m : Maybe) {
		None(): {};
		Some(v): f(v);
	}
}


onlyOnce(pad : ref Maybe<?>, init : () -> ?) -> ? {
	switch (^pad : Maybe) {
		None(): {
			v = init();
			pad := Some(v);
			v;
		}
		Some(v): v;
	}
}

eitherFn2(a : Maybe<?>, b : Maybe<?>, fn2 : (?, ?) -> ??, fn1 : (?) -> ??, fn0 : () -> ??) -> ?? {
	eitherFn(a,
		\x -> eitherFn(b, \y -> fn2(x, y), \ -> fn1(x)),
		\ -> eitherFn(b, fn1, fn0)
	)
}

fn2some(fn : (?) -> ??) -> (?) -> Maybe<??> {
	\v -> Some(fn(v));
}

----------
