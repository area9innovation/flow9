import runtime;
import string;

// Optimization of inlined mutualy recursive calls
// Here recursive finctions 'fun1' and 'fun2' is inlined independently,
// because an 'inlining_rec_depth' command line parameter
// in this test is set to '1', so the joined depth of inlined call is 2.
//
// When 'fun(1)' is called, two recursive
// calls for 'fun1' and 'fun2' are unrolled, so the optimization evaluation 
// stops with '2 + 1 + fun1(0)' value.

fun2(x : int) -> int {
	if (x == 0) 0 else x + fun1(x - 1)
}

fun1(x : int) -> int {
	if (x == 0) 0 else x + fun2(x - 1)
}

main() {
	println(fun1(2));
}

----------

fun1 = \x:int ->
	if ((x == 0)) {
		0
	} else {
		(x + if (((x - 1) == 0)) {
			0
		} else {
			((x - 1) + if ((((x - 1) - 1) == 0)) {
				0
			} else {
				(((x - 1) - 1) + fun2((((x - 1) - 1) - 1)))
			}
			)
		}
		)
	}



fun2 = \x:int ->
	if ((x == 0)) {
		0
	} else {
		(x + if (((x - 1) == 0)) {
			0
		} else {
			((x - 1) + if ((((x - 1) - 1) == 0)) {
				0
			} else {
				(((x - 1) - 1) + fun1((((x - 1) - 1) - 1)))
			}
			)
		}
		)
	}



main = \ ->
	println((2 + (1 + fun1(0))))

