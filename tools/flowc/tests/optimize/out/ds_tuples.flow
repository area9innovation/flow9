
export {
	Pair(first : ?, second : ??);
	Triple(first : ?, second : ??, third : ???);
	Quadruple(first : ?, second : ??, third : ???, fourth : ????);

	KeyValue(key : string, value : string);

	// Split pair on first and second to name them
	unpair : (pair : Pair<?, ??>, fn : (?, ??) -> ???) -> ???;

	// Pipe version of "unpair"
	unpairC : (fn : (?, ??) -> ???) -> (pair : Pair<?, ??>) -> ???;

	untriple : (triple : Triple<?, ??, ???>, fn : (?, ??, ???) -> ????) -> ????;
	untripleC : (fn : (?, ??, ???) -> ????) -> (triple : Triple<?, ??, ???>) -> ????;

	unquadruple : (q : Quadruple<?, ??, ???, ????>, fn : (?, ??, ???, ????) -> ?????) -> ?????;
	unquadrupleC(fn : (?, ??, ???, ????) -> ?????) -> (quadruple :  Quadruple<?, ??, ???, ????>) -> ?????;

	// pair access functions (for use with high-order functions)
	firstOfPair : (pair : Pair<?, ??>) -> ?;
	secondOfPair : (pair : Pair<?, ??>) -> ??;

	// triple access functions
	firstOfTriple: (triple: Triple<?, ??, ???>) -> ?;
	secondOfTriple: (triple: Triple<?, ??, ???>) -> ??;
	thirdOfTriple: (triple: Triple<?, ??, ???>) -> ???;

	// quadruple access functions
	firstOfQuadruple: (quadruple: Quadruple<?, ??, ???, ????>) -> ?;
	secondOfQuadruple: (quadruple: Quadruple<?, ??, ???, ????>) -> ??;
	thirdOfQuadruple: (quadruple: Quadruple<?, ??, ???, ????>) -> ???;
	fourthOfQuadruple: (quadruple: Quadruple<?, ??, ???, ????>) -> ????;
}

unpair(pair : Pair<?, ??>, fn : (?, ??) -> ???) {
	fn(pair.first, pair.second)
}

unpairC(fn : (?, ??) -> ???) -> (pair : Pair<?, ??>) -> ??? {
	\pair : Pair<?, ??> ->  fn(pair.first, pair.second)
}

untriple(triple : Triple<?, ??, ???>, fn : (?, ??, ???) -> ????) {
	fn(triple.first, triple.second, triple.third)
}

untripleC(fn : (?, ??, ???) -> ????) -> (triple : Triple<?, ??, ???>) -> ???? {
	\triple : Triple<?, ??, ???> ->  fn(triple.first, triple.second, triple.third)
}

unquadruple(q : Quadruple<?, ??, ???, ????>, fn : (?, ??, ???, ????) -> ?????) -> ????? {
	fn(q.first, q.second, q.third, q.fourth)
}

unquadrupleC(fn : (?, ??, ???, ????) -> ?????) -> (quadruple :  Quadruple<?, ??, ???, ????>) -> ????? {
	\quadruple : Quadruple<?, ??, ???, ????> -> fn(quadruple.first, quadruple.second, quadruple.third, quadruple.fourth)
}

firstOfPair(p) { p.first }

secondOfPair(p) { p.second }

firstOfTriple(t) { t.first }

secondOfTriple(t) { t.second }

thirdOfTriple(t) { t.third }

firstOfQuadruple(q) { q.first }

secondOfQuadruple(q) { q.second }

thirdOfQuadruple(q) { q.third }

fourthOfQuadruple(q) { q.fourth }

----------
