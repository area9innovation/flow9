// Â© Copyright 2011 Area9 Technologies.

import maybe;

// Single-linked list. For a double-linked list, see dlist
export {

	List<?> ::= EmptyList, Cons<?>;
		EmptyList();
		// Add head to the list "tail"
		Cons(head : ?, tail : List<?>);
	// O(1)
	makeList() -> List<?>;
	// O(n)
	listAt(xs : List<?>, i : int, x0 : ?) -> ?;
	// O(1)
	headList(l : List<?>, default : ?) -> ?;
	// O(1)
	tailList(l : List<?>) -> List<?>;

	countList(l : List<?>) -> int;

	// O(n). Warning: stack space usage is O(n) (no tail recursion).
	generateList(from : int, to : int, fn : (int) -> ?) -> List<?>;

	// O(n) in l1
	concatList(l1 : List<?>, l2 : List<?>) -> List<?>;

	// O(n)
	reverseList(xs : List<?>) -> List<?>;

	// Convert a list to a string - notice, it does this in reverse order!
	native list2string :(l : List<string>) -> string = Native.list2string;
	native list2array : (l : List<?>) -> [?] = Native.list2array;

	// apply function to list elements. Tail recursion.
	applyList : (l : List<?>, fn : (?) -> void) -> void;

	// With a list of functions, call them all
	callList : (l : List<() -> void>) -> void;

	// apply function to list elements.
	mapList : (l : List<?>, fn : (?) -> ??) -> List<??>;

	// Apply a collecting function.
	foldList : (l : List<?>, init : ??, fn : (??, ?) -> ??) -> ??;

	// Does the list contain the given element? O(n)
	containsList : (l : List<?>, v : ?) -> bool;

	// Find an element in a list
	findList : (l : List<?>, fn : (?) -> bool) -> Maybe<?>;

	// Reduce the list to those that match the criteria
	filterList(l : List<?>, fn : (?) -> bool) -> List<?>;


	// Add a value to the head of a list reference
	rlistPush(l : ref List<?>, s : ?) -> void;

	isEmptyList : (xs : List<?>) -> bool;
}

makeList() -> List<?> {
	EmptyList();
}

listAt(xs, i, x0) {
	if (i < 0) x0
	else switch (xs : List) {
				EmptyList(): x0;
				Cons(h, t): if (i == 0) h else listAt(t, i - 1, x0);
	};
}

native headList : (l : List<?>, default : ?) -> ? = Native.headList;

headList(l, default) {
	switch (l : List) {
		EmptyList(): default;
		Cons(h, t): h;
	}
}

native tailList : (l : List<?>) -> List<?> = Native.tailList;
tailList(l) {
	switch (l : List) {
		EmptyList(): l;
		Cons(h, t): t;
	}
}

countList(l) {
	countListRec(l, 0)
}
countListRec(l : List<?>, count : int) -> int {
	switch (l : List<?>) {
		EmptyList(): count;
		Cons(__, tail0): countListRec(tail0, count + 1);
	}
}

generateList(start, end, fn) {
	if (start < end) {
		Cons(fn(start), generateList(start + 1, end, fn));
	} else {
		EmptyList();
	}
}

concatList(l1 : List<?>, l2 : List<?>) -> List<?> {
	switch (l2 : List<?>) {
		EmptyList(): l1;
		//#39534 reverseList increases const in O(n) but allows concatToNonEmptyList to be tail rec
		Cons(h, t): concatToNonEmptyList(reverseList(l1), l2);
	}
}
concatToNonEmptyList(l1 : List<?>, l2 : List<?>) -> List<?> {
	switch (l1 : List<?>) {
		EmptyList(): l2;
		Cons(h, t): {
			concatToNonEmptyList(t, Cons(h, l2));
		}
	}
}

reverseList(xs) {
	reverseAcc(xs, makeList());
}

reverseAcc(xs : List<?>, acc : List<?>) -> List<?> {
	switch (xs : List<?>) {
		EmptyList(): acc;
		Cons(x, ys): reverseAcc(ys, Cons(x, acc));
	}
}

applyList(l : List<?>, fn : (?) -> void) -> void {
	switch (l : List<?>) {
		EmptyList(): {}
		Cons(h, t): {
			fn(h);
			applyList(t, fn);
		}
	}
}

callList(l : List<() -> void>) -> void {
	switch (l : List<() -> void>) {
		EmptyList(): {}
		Cons(h, t): {
			h();
			callList(t);
		}
	}
}

mapList(l : List<?>, fn : (?) -> ??) -> List<??> {
	switch (l : List<?>) {
		EmptyList(): EmptyList();
		Cons(h, t): Cons(fn(h), mapList(t, fn));
	}
}

// Apply a collecting function.
foldList(l : List<?>, init : ??, fn : (??, ?)->??) -> ?? {
	switch (l : List<?>) {
		EmptyList(): init;
		Cons(h, t): foldList(t, fn(init, h), fn);
	}
}

containsList(l : List<?>, v : ?) -> bool {
	switch (l : List<?>) {
		EmptyList(): false;
		// short-circuit boolean expression compilation are not supported(disabled?),
		// so replacing it manually in the code to enable tail call
		Cons(h, t): if (h == v) true else containsList(t, v);
	}
}

findList(l : List<?>, fn : (?) -> bool) -> Maybe<?> {
	switch (l : List<?>) {
		EmptyList(): None();
		Cons(h, t): if (fn(h)) Some(h) else findList(t, fn);
	}
}

filterList(l : List<?>, fn : (?) -> bool) -> List<?> {
	switch (l : List<?>) {
		EmptyList(): l;
		Cons(h, t): if (fn(h)) Cons(h, filterList(t, fn)) else filterList(t, fn);
	}
}

rlistPush(l : ref List<?>, s : ?) -> void {
	l := Cons(s, ^l);
}

isEmptyList(xs : List<?>) -> bool {
	switch (xs) {
		Cons(__, __): false;
		EmptyList(): true;
	};
}

----------
