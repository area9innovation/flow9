// Â© Copyright 2011 Area9 Technologies.
import ds/list;
import ds/tree;
import string;

export {
	// For deserialization of downloaded binary content (.binflow).

	// Be sure it has the correct MIME type and encoding on the web server.
	// Easy way to do it is to add "AddType "text/plain; charset=UTF-16" .binflow" in a .htaccess
	// file in the same folder as the binflow file.
	// Another way is to the line to the httpd.conf:
	//   AddType "text/plain; charset=UTF-16" .binflow

	// Also, make sure that when you save a binary file using flow, use setFileContentUTF16.
	// You have to use httpRequest to retrieve it (and not downloadfile), and the BOM marker from 
	// the server will make our end understand that it is UCS-2 (camouflaged as UTF-16).
	deserializeBinary(value : string, default_ : flow) -> flow;
	deserializeBinary2(value : string, structFixups : Tree<string, (args : [flow]) -> flow>, default_ : flow) -> flow;
	native toBinary : (value : flow) -> string = Native.toBinary;
	native stringbytes2double : (str : string) -> double = Native.stringbytes2double;
	native stringbytes2int : (str : string) -> int = Native.stringbytes2int;
}

native fromBinary : (s : string, default_ : flow, fixups : (string)->Maybe<([flow])->flow>) -> flow = Native.fromBinary;

deserializeBinary(s, default_) {
	deserializeBinary2(s, makeTree(), default_);
}

deserializeBinary2(s, structFixups, default_) {
	rv = fromBinary(s, default_, \name -> lookupTree(structFixups, name));
	if (rv == flow(s)) { // Not implemented
		deserializeBinary_flow(s, structFixups, default_);
	} else {
		rv;
	}
}

getFooterOffset(s : string) -> Pair<int, int> {
	// UTF-16 reserves these values 0xD800-0xDFFF for surrogates
	// This is a workaround for having reserved valuew in structs offset: first pair of symbols contains 0x00000001
	// the next two pairs have (offset & 0x0F0F0F0F) and (offset & 0xF0F0F0F0). So if the first pair of symbols
	// contain 0x00000001 then offset = <2nd pair> | <3rd pair>
	footer_offset = stringbytes2int(strLeft(s, 2));
	if (footer_offset != 1) {
		Pair(footer_offset, 2)
	} else {
		Pair(bitOr(stringbytes2int(substring(s, 2, 2)), stringbytes2int(substring(s, 4, 2))), 6)
	}
}

deserializeBinary_flow(s : string, structFixups : Tree<string, ([flow]) -> flow>, default_ : flow) -> flow {
	footer_offset = getFooterOffset(s);
	flowStructDefs : flow = (doBinary(s, footer_offset.first, strlen(s), structFixups, [], [])).first;
	structDefs : [[flow]] = cast(flowStructDefs : flow -> [[flow]]);

	r = doBinary(s, footer_offset.second, footer_offset.first, structFixups, default_, structDefs);
	if (r.second < footer_offset.first) {
		println("Did not understand all!");
	}
	r.first;
}

doBinary(s : string, index : int, endIndex : int, structFixups : Tree<string, (args : [flow]) -> flow>, default_ : flow, structDefs : [[flow]]) -> Pair<flow, int> {
	if (index >= endIndex) {
		Pair(default_, index);
	} else {
		word = getCharCodeAt(s, index);
		ni = index + 1;
		if (word == 0xFFF4) {
			// struct
			def : [flow] = structDefs[getCharCodeAt(s, ni)];
			nargs : int = flow2i(def[0]);
			name = flow2s(def[1]);
			args = appendBinaryList(s, ni + 1, endIndex, structFixups, default_, nargs, makeList(), structDefs);
			fixup = lookupTree(structFixups, name);
			Pair(switch (fixup : Maybe) { 
					Some(v): v(list2array(args.first));
					None(): {
						makeStructValue(name, list2array(args.first), IllegalStruct());
					}
				}, args.second);
		} else if (word == 0xFFF6) {
			// ref
			v = doBinary(s, ni, endIndex, structFixups, default_, structDefs);
			Pair(flow(ref v.first), v.second);
		} else if (word == 0xFFFA) {
			// string, < 65536 length
			l = getCharCodeAt(s, ni);
			Pair(flow(substring(s, ni + 1, l)), ni + 1 + l);
		} else if (word == 0xFFFC) {
			// double
			d : double = stringbytes2double(substring(s, ni, 4));
			Pair(flow(d), ni + 4);
		} else if (word == 0xFFF5) {
			// int, long
			i = stringbytes2int(substring(s, ni, 2));
			Pair(flow(i), ni + 2);
		} else if (word < 0xFFF3) { // Special case, since ints are common.
			Pair(flow(word), ni);
		} else if (word == 0xFFF3) {
			// special case for ints in range to avoid issues with UCS-2/UTF16 encoding in JS
			// they are stored as two long integers: value & 0xF0F0F0F0 and value & 0x0F0F0F0F
			Pair(flow(bitOr(stringbytes2int(substring(s, ni, 2)), stringbytes2int(substring(s, ni + 2, 2)))), ni + 4);
		} else if (word == 0xFFFD) Pair(flow(false), ni)
		else if (word == 0xFFFE) Pair(flow(true), ni)
		else if (word == 0xFFF8) {
			// array, < 65536 length
			l = getCharCodeAt(s, ni);
			result = appendBinaryList(s, ni + 1, endIndex, structFixups, default_, l, makeList(), structDefs);
			Pair(flow(list2array(result.first)), result.second);
		} else if (word == 0xFFF7) {
			// empty array
			arr : [flow] = [];
			Pair(flow(arr), ni)
		} else if (word == 0xFFFB) {
			// string, >= 65536 length
			l = stringbytes2int(substring(s, ni, 2));
			Pair(flow(substring(s, ni + 2, l)), ni + 2 + l);
		} else if (word == 0xFFF9) {
			// array, >= 65536 length
			l = stringbytes2int(substring(s, ni, 2));
			result = appendBinaryList(s, ni + 2, endIndex, structFixups, default_, l, makeList(), structDefs);
			Pair(flow(list2array(result.first)), result.second);
		} else if (word == 0xFFFF) Pair(flow(0), ni)		// It is not possible to construct a void value
		// int
		else Pair(flow(word), ni);
	}
}

appendBinaryList(s : string, index : int, endIndex : int, structFixups : Tree<string, (args : [flow]) -> flow>, 
			default_ : flow, n : int, l : List<flow>, structDefs : [[flow]]) -> Pair<List<flow>, int> {
	if (n == 0) Pair(l, index)
	else {
		v = doBinary(s, index, endIndex, structFixups, default_, structDefs);
		appendBinaryList(s, v.second, endIndex, structFixups, default_, n - 1, Cons(v.first, l), structDefs);
	}
}

// Proposed format:

// It is designed so that all values are a multiple of 2 bytes to fit
// UCS-2 indexing we have for our strings.

// FFFF: void
// FFFE: true
// FFFD: false

// FFFC  B1 B2 B3 B4 B5 B6 B7 B8: double 0x...

// FFFB  L1 L2 L3 L4 B0 ... Bn: string of length 0xL4L3L2L1 encoded in UTF-16
// FFFA  L1 L2 B0 ... (Bn): string of length 0x0000L2L1 encoded in UTF-16

// FFF9  L1 L2 L3 L4 (data): array of length 0xL4L3L2L1, each value itself encoded
// FFF8  L1 L2 (data): array of length 0x0000L2L1, each value itself encoded
// FFF7  empty array

// FFF6 (value): ref to value

// FFF5 B1 B2 B3 B4: int 0xB4B3B2B1

// FFF4 B1 B2  n*value: strut with structdef index 0xB2B1 in the footer
// Footer: [ [FIELDS_COUNT, STRUCT_NAME ] ]

// FFF3 B1 B2 B3 B4 B5 B6 B7 B8: 32-bit integer preserving UTF-16 surrogate pairs
// stored as two 32-bit integers: value & 0xF0F0F0F0 and value & 0x0F0F0F0F

// FE B1 (structname:string) n*value: struct with B1 values

// 00-EF B1: int 0x00B1-0xEFB1

// Free prefixes: F0-FB

----------
