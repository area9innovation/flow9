import ds/tree;
import string;

// Sorted set implementation

export {
	Set : (tree : Tree<?, bool>);

	makeSet() -> Set<?>;
	makeSet1(v : ?) -> Set<?>;

	buildSet(xs : [?]) -> Set<?>;  // O(n*log(n))

	// modifiers
	insertSet(s : Set<?>, value : ?) -> Set<?>;  // O(log(n))

	removeSet(s : Set<?>, value : ?) -> Set<?>;  // O(log(n))

	updateSet(s : Set<?>, value : ?, newValue : ?) -> Set<?>;  // remove value if any; then add newValue if none yet

	// heap operations are just O(log(n)) because of current implementation
	PopSetResult : (value : ?, rest : Set<?>);
	popMinSet(s : Set<?>) -> Maybe<PopSetResult<?>>;
	popMaxSet(s : Set<?>) -> Maybe<PopSetResult<?>>;

	// getters
	containsSet(s : Set<?>, value : ?) -> bool; // O(log(n))

	existsSet(s : Set<?>, fn : (?) -> bool) -> bool;  // O(n)

	sizeSet(s : Set<?>) -> int; // O(n)

	isEmptySet(s : Set<?>) -> bool; // O(1)

	// traversals
	foldSet(s : Set<?>, init : ??, fn : (??, ?) -> ??) -> ??;
	
	// reverse traversals
	foldRSet(s : Set<?>, init : ??, fn : (??, ?) -> ??) -> ??;

	mapSet(s : Set<?>, fn : (?) -> ??) -> Set<??>;
	iterSet(s : Set<?>, fn : (?) -> void) -> void;

	filterSet(s : Set<?>, fn : (?) -> bool) -> Set<?>;

	set2array(s : Set<?>) -> [?];

	// classic set operations
	// a or b
	mergeSets(a : Set<?>, b : Set<?>) -> Set<?>;
	// Merge array of sets
	mergeSetsA(xs : [Set<?>]) -> Set<?>;

	// a and b
	intersectSets(a : Set<?>, b : Set<?>) -> Set<?>;

	// a \ b
	differenceSets(a : Set<?>, b : Set<?>) -> Set<?>;

	// dump
	set2string(s : Set<?>) -> string;
	set2stringExt(s : Set<?>, fn : (?) -> string) -> string;

	// Since sets are based on trees, which might not be balanced identically, you can not use == directly on sets
	equalSet(a : Set<?>, b : Set<?>) -> bool;
}

// constructors
makeSet() -> Set<?> {
	Set(makeTree())
}

makeSet1(v : ?) -> Set<?> {
	insertSet(makeSet(), v)
}

buildSet(xs : [?]) -> Set<?> {
	fold(xs, makeSet(), insertSet)
}

// modifiers
insertSet(s : Set<?>, value : ?) -> Set<?> {
	setTree(s.tree, value, true) |> Set
}

removeSet(s : Set<?>, value : ?) -> Set<?> {
	removeFromTree(s.tree, value) |> Set
}

updateSet(s : Set<?>, value : ?, newValue : ?) -> Set<?> {
	tree = removeFromTree(s.tree, value);
	insertSet(Set(tree), newValue)
}

// heap operations
popMinSet(s : Set<?>) -> Maybe<PopSetResult<?>> {
	res = popmin(s.tree);
	switch (res) {
		EmptyPopResult(): None();
		PopResult(rk, rv, rrest): PopSetResult(rk, Set(rrest)) |> Some
	}
}

popMaxSet(s : Set<?>) -> Maybe<PopSetResult<?>> {
	res = popmax(s.tree);
	switch (res) {
		EmptyPopResult(): None();
		PopResult(rk, rv, rrest): PopSetResult(rk, Set(rrest)) |> Some
	}
}

// getters
containsSet(s : Set<?>, value : ?) -> bool {
	containsKeyTree(s.tree, value)
}

existsSet(s : Set<?>, fn : (?) -> bool) -> bool {
	foldSet(s, false, \acc, v -> {
		acc || fn(v)
	})
}

sizeSet(s : Set<?>) -> int {
	sizeTree(s.tree) // O(n)
}

isEmptySet(s : Set<?>) -> bool {
	s.tree == makeTree()
}

// traversals
foldSet(s : Set<?>, init : ??, fn : (??, ?) -> ??) -> ?? {
	foldTree(s.tree, init, \k, v, acc -> {
		fn(acc, k)
	})
}
// traversals reverse
foldRSet(s : Set<?>, init : ??, fn : (??, ?) -> ??) -> ?? {
	foldRTree(s.tree, init, \k, v, acc -> {
		fn(acc, k)
	})
}

mapSet(s : Set<?>, fn : (?) -> ??) -> Set<??> {
	foldSet(s, makeSet(), \acc, x -> insertSet(acc, fn(x)))
}

iterSet(s : Set<?>, fn : (?) -> void) -> void {
	traverseInOrder(s.tree, \k, v -> fn(k));
}


filterSet(s : Set<?>, fn : (?) -> bool) -> Set<?> {
	foldSet(s, makeSet(), \acc, x -> {
		if (fn(x)) {
			insertSet(acc, x)
		} else {
			acc
		}
	})
}

set2array(s : Set<?>) -> [?] {
	getTreeKeys(s.tree)  // O(n)
}

// classic set operations
mergeSets(a : Set<?>, b : Set<?>) -> Set<?> {
	Set(mergeTree(a.tree, b.tree))
}

intersectSets(a : Set<?>, b : Set<?>) -> Set<?> {
	foldSet(a, makeSet(), \acc, ax -> {
		if (containsSet(b, ax)) {
			insertSet(acc, ax)
		} else {
			acc
		}
	})
}

differenceSets(a : Set<?>, b : Set<?>) -> Set<?> {
	foldSet(a, makeSet(), \acc, x -> {
		if (containsSet(b, x)) {
			acc
		} else {
			insertSet(acc, x)
		}
	})
}

// dump
set2string(s : Set<?>) -> string {
	set2stringExt(s, toString);
}

set2stringExt(s : Set<?>, fn : (?) -> string) -> string {
	strGlue(
		map(
			set2array(s),
			fn
		),
		", "
	)
}

equalSet(a : Set<?>, b : Set<?>) -> bool {
	s1 = sizeSet(a);
	s2 = sizeSet(b);
	if (s1 != s2)
		false
	else {
		foldSet(a, true, \acc, ae -> {
			acc && containsSet(b, ae)
		});
	}
}

mergeSetsA(xs : [Set<?>]) -> Set<?> {
	fold(xs, makeSet(), mergeSets)
}


----------
