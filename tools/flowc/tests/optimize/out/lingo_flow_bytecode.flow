import string;
import ds/list;
import ds/tree;
import math/bits;
import text/binary;
import algorithms;

export {
	BytecodeTypeCode ::= TCFlow, TCVoid, TCBool, TCInt, TCDouble, TCString,
		TCArray, TCStruct, TCRefTo, TCTypedArray, TCTypedStruct, TCTypedRefTo, TCSetMutable;

	TCFlow(); TCVoid(); TCBool(); TCInt(); TCDouble(); TCString();
	TCArray(); TCStruct(); TCRefTo();
	// Opcodes for complex types description in the StructDefs
	TCTypedArray(arg : BytecodeTypeCode); // 0x41;
	TCTypedStruct(arg : string); // 0x42;
	TCTypedRefTo(arg : BytecodeTypeCode); // 0x43;
	TCSetMutable(arg : BytecodeTypeCode); // 0x45;

	bytecodetype2binary(c : BytecodeTypeCode) -> string;

	Bytecode ::= CVoid, CBool, CInt, CDouble, CString, CArray,
		CStruct, CSetLocal, CGetLocal, CGetGlobal, CReturn, CGoto,
		CCodePointer, CCall, CCallN, /*CNotImplemented,*/  CIfFalse,  CNot,  CPlus,
		CMinus,  CLessThan,  CNativeFn,  CEqual,  CNegate,  CMultiply,
		CDivide,  CModulo,  CPop,  CLessEqual,  CArrayGet,
		CReserveLocals,  CRefTo,  CDebugInfo,  CDeref,  CSetRef,
		CInt2Double,  CInt2String,  CDouble2Int,  CDouble2String,  CField,
		CFieldName,  CStructDef,  CGetFreeVar,  CClosureReturn,
		CClosurePointer,  CSwitch,  CUncaughtSwitch,  CTailCall,

		CPlusString, CPlusInt, CMinusInt, CNegateInt, CMultiplyInt,
		CDivideInt, CModuloInt, CSimpleSwitch, CWString, CLast,
		CBreakpoint, COptionalNativeFn, CSetMutable, CSetMutableName;

	bytecode2binary(c : Bytecode) -> string;
	sizeofBytecode(c : Bytecode) -> int;

	CVoid(); // 0x00; // ( --> void)
	CBool(value : bool); // 0x01; // value : byte ( --> bool)
	CInt(value : int); // 0x02; // value : int ( --> int)
	CDouble(value : double); // 0x03; // value : double ( --> double)
	CString(value : string); // 0x04; // length : int, utf8chars : byte[length] ( --> string)
	CArray(size : int); // 0x05; // length : int ( v1 ... vn --> constantarray ) 
	CStruct(index : int); // 0x06; // kind : int ( v1 ... vn --> struct)
	CSetLocal(index : int); // 0x07; // slot : int ( value --> )
	CGetLocal(index : int); // 0x08; // idnumber : int ( --> value)
	CGetGlobal(index : int); // 0x09; // idnumber : int ( --> value)
	CReturn(); // 0x0a; // ( --> )
	CGoto(offset : int); // 0x0b; // offset : int ( --> )
	CCodePointer(offset : int); // 0x0c; // offset : int ( --> pointer ) Takes pc, adds offset, and puts that as a pointer to code
	CCall(); // 0x0d; // ( args closure --> result )
	//CNotImplemented(); // 0x0e; // message : string
	CIfFalse(offset : int); // 0x0f; // ( bool --> )
	CNot(); // 0x10; // ( bool --> bool )
	CPlus(); // 0x11; // ( int/double/string int/double/string --> int/double/string )
	CMinus(); // 0x12; // ( int/double int/double --> int/double )
	CLessThan(); // 0x13; // ( int/double/string int/double/string --> bool )
	CNativeFn(name : string, args : int); // 0x14; // args : int, name : string ( args --> value )
	CEqual(); // 0x15; // ( int/double/string int/double/string --> int/double/string )
	CNegate(); // 0x16; // ( int/double --> int/double )
	CMultiply(); // 0x18; // ( int/double int/double --> int/double )
	CDivide(); // 0x19; // ( int/double int/double --> int/double )
	CModulo(); // 0x1a; // ( int/double int/double --> int/double )
	CPop(); // 0x1b; // ( value --> )
	CLessEqual(); // 0x1c; // ( int/double/string int/double/string --> int/double/string )
	CArrayGet(); // 0x1d; // ( array index --> value )
	CReserveLocals(locals : int, args : int); // 0x1e; // locals : int args : int ( --> )
	CRefTo(); // 0x1f; // ( value --> pointer )
	CDebugInfo(name : string); // 0x20; // name : string ( --> )
	CDeref(); // 0x21; // ( pointer --> value )
	CSetRef(); // 0x22; // ( pointer value --> )
	CInt2Double(); // 0x23; // (int --> double)
	CInt2String(); // 0x24; // (int --> string)
	CDouble2Int(); // 0x25; // (double --> int)
	CDouble2String(); // 0x26; // (string --> int)
	CField(index : int); // 0x27; // index : int (structvalue --> value)
	CFieldName(name : string); // 0x28; // name : string (structvalue --> value)
	CStructDef(index : int, name : string, args : [Pair<string,BytecodeTypeCode>]); // 0x29; // kind : int, name : string, n : int, name1: string, type1: type ... ( --> )
	CGetFreeVar(index : int); // 0x2a; // index : int ( --> value )
	CClosureReturn(); // 0x2b; // ( --> )
	CClosurePointer(size : int, offset : int); // 0x2c; // n : int offset : int ( v1 ... vn --> call )
		// Takes pc, adds offset, and puts that as a pointer to code along with a closure pointer
	CSwitch(defoffset : int, cases : [Pair<int,int>]); // 0x2d; // cases : int, defaultoffset : int, c1 : int, off1 : int, ... cn : int, offn : int
	CUncaughtSwitch(); // 0x2e; // This should crash the execution. Used for the uncatch switches
	CTailCall(nargs : int); // 0x2f; // ( args closure --> result )

	CPlusString(); // 0x30; // ( string string --> string )
	CPlusInt(); // 0x31; // ( int int --> int )
	CMinusInt(); // 0x32; // ( int int --> int )
	CNegateInt(); // 0x33; // ( int --> int )
	CMultiplyInt(); // 0x34; // ( int int --> int )
	CDivideInt(); // 0x35; // ( int int --> int )
	CModuloInt(); // 0x36; // ( int int --> int )
	CSimpleSwitch(defoffset : int, cases : [Pair<int,int>]); // 0x37; // same layout as CSwitch; see BytecodeRunner for difference
	CWString(value : string); // 0x38; // length : byte, utf16chars : int16[length] ( --> string)
	CLast(); // 0x39; // Nothing, just sentinel
	CBreakpoint(); // 0x40; // Breakpoint marker in the C++ runner
	// like CNativeFn, but replaces top value on stack, or does nothing if no such native
	COptionalNativeFn(name : string, args : int); // 0x44;
	// Mutable fields
	CSetMutable(index : int); // 0x45; // index : int (structvalue value -->)
	CSetMutableName(name : string); // 0x46; // name : string (structvalue value -->)
	CCallN(nargs : int); // 0x47; // ( nargs args closure --> result )

	BytecodeOrChunk ::= Bytecode, BytecodeChunk;

	// The bytecode for some expression, function, or whatever.
	// There is a tree which maps bytecode indexes to what debug info we have about it.
	BytecodeChunk(bytes : string, info : Tree<int, [BytecodeInfo]>);

	// This is debug info
	BytecodeInfo ::= BCILine, BCIFunction, BCILocals;

		BCILine(file : string, line : int);
		BCIFunction(name : string);
		BCILocals(nargs : int, locals : [string], upvals : [string]);

	emptyBytecode() -> BytecodeChunk;
	makeBytecode(code : [BytecodeOrChunk], info : [BytecodeInfo]) -> BytecodeChunk;

	formatDebugInfo(chunk : BytecodeChunk) -> string;
}

int2binary(value : int) -> string {
	fromCharCode(bitAnd(value,0xFF))+
		fromCharCode(bitAnd(bitUshr(value,8),0xFF))+
		fromCharCode(bitAnd(bitUshr(value,16),0xFF))+
		fromCharCode(bitAnd(bitUshr(value,24),0xFF));
}

string2binary(value : string) -> string {
	utfbytes = string2utf8(value);
	list2string(fold(utfbytes, Cons(int2binary(length(utfbytes)), makeList()), \s,v -> Cons(fromCharCode(v), s)));
}

bytecodetype2binary(c : BytecodeTypeCode) -> string {
	switch (c : BytecodeTypeCode) {
		TCFlow(): "\xFF";
		TCVoid(): "\x00";
		TCBool(): "\x01";
		TCInt(): "\x02";
		TCDouble(): "\x03";
		TCString(): "\x04";
		TCArray(): "\x05";
		TCStruct(): "\x06";
		TCRefTo(): "\x1f";
		// Opcodes for complex types description in the StructDefs
		TCTypedArray(arg): "\x41"+bytecodetype2binary(arg);
		TCTypedStruct(arg): "\x42"+string2binary(arg);
		TCTypedRefTo(arg): "\x43"+bytecodetype2binary(arg);
		TCSetMutable(arg): "\x45"+bytecodetype2binary(arg);
	}
}

sizeofBytecode(c : Bytecode) -> int {
	strlen(bytecode2binary(c));
}

double2bytes(d : double) -> [int] {
	fold(subrange(s2a(toBinary(flow(d))), 3, 4), [], \acc, b -> {
		concat(acc, [bitAnd(b, 0xff), bitUshr(b, 8)])
	});
}

bytecode2binary(c) {
	switch (c) {
		CVoid(): "\x00"; // ( --> void)
		CBool(value): // value : byte ( --> bool)
			if (value) "\x01\x01" else "\x01\x00";
		CInt(value): // value : int ( --> int)
			"\x02"+int2binary(value);
		CDouble(value): // value : double ( --> double)
		{
			bytes = double2bytes(value);
			"\x03" + strGlue(map(bytes, fromCharCode), "");
		}
		CString(value): // length : int, utf8chars : byte[length] ( --> string)
			"\x04"+string2binary(value);
		CArray(size): // length : int ( v1 ... vn --> constantarray )
			if (size < 0 || size >= 65536)
				fail0("constant array size out of bounds")
			else
				"\x05"+int2binary(size);
		CStruct(index): // kind : int ( v1 ... vn --> struct)
			if (index < 0 || index >= 65536)
				fail0("constant struct index out of bounds")
			else
				"\x06"+int2binary(index);
		CSetLocal(index): // slot : int ( value --> )
			if (index < 0 || index >= 65536)
				fail0("local slot index out of bounds")
			else
				"\x07"+int2binary(index);
		CGetLocal(index): // idnumber : int ( --> value)
			if (index < 0 || index >= 65536)
				fail0("local slot index out of bounds")
			else
				"\x08"+int2binary(index);
		CGetGlobal(index): // idnumber : int ( --> value)
			if (index < 0 || index >= 65536)
				fail0("global slot index out of bounds")
			else
				"\x09"+int2binary(index);
		CReturn(): "\x0a"; // ( --> )
		CGoto(offset): // offset : int ( --> )
			"\x0b"+int2binary(offset);
		CCodePointer(offset): // offset : int ( --> pointer ) Takes pc, adds offset, and puts that as a pointer to code
			"\x0c"+int2binary(offset);
		CCall(): "\x0d"; // ( args closure --> result )
		CCallN(nargs): "\x47" + (if (nargs >= 0) int2binary(nargs) else ""); // ( nargs args closure --> result )
		//CNotImplemented(): "\x0e"; // message : string
		CIfFalse(offset): // ( bool --> )
			"\x0f"+int2binary(offset);
		CNot(): "\x10"; // ( bool --> bool )
		CPlus(): "\x11"; // ( int/double/string int/double/string --> int/double/string )
		CMinus(): "\x12"; // ( int/double int/double --> int/double )
		CLessThan(): "\x13"; // ( int/double/string int/double/string --> bool )
		CNativeFn(name, args): // args : int, name : string ( args --> value )
			"\x14"+int2binary(args)+string2binary(name);
		CEqual(): "\x15"; // ( int/double/string int/double/string --> int/double/string )
		CNegate(): "\x16"; // ( int/double --> int/double )
		CMultiply(): "\x18"; // ( int/double int/double --> int/double )
		CDivide(): "\x19"; // ( int/double int/double --> int/double )
		CModulo(): "\x1a"; // ( int/double int/double --> int/double )
		CPop(): "\x1b"; // ( value --> )
		CLessEqual(): "\x1c"; // ( int/double/string int/double/string --> int/double/string )
		CArrayGet(): "\x1d"; // ( array index --> value )
		CReserveLocals(locals, args): // locals : int args : int ( --> )
			if (locals < 0 || locals >= 65536 || args < 0 || args >= 256)
				fail0("local slot count out of bounds")
			else
				"\x1e"+int2binary(locals)+int2binary(args);
		CRefTo(): "\x1f"; // ( value --> pointer )
		CDebugInfo(name): // name : string ( --> )
			"\x20"+string2binary(name);
		CDeref(): "\x21"; // ( pointer --> value )
		CSetRef(): "\x22"; // ( pointer value --> )
		CInt2Double(): "\x23"; // (int --> double)
		CInt2String(): "\x24"; // (int --> string)
		CDouble2Int(): "\x25"; // (double --> int)
		CDouble2String(): "\x26"; // (string --> int)
		CField(index): // index : int (structvalue --> value)
			if (index < 0 || index >= 256)
				fail0("field index out of bounds")
			else
				"\x27"+int2binary(index);
		CFieldName(name): // name : string (structvalue --> value)
			if (strlen(name) >= 256)
				fail0("field name is too long")
			else
				"\x28"+string2binary(name);
		CStructDef(index, name, args): // kind : int, name : string, n : int, name1: string, type1: type ... ( --> )
			fold(
				args, "\x29"+int2binary(index)+string2binary(name)+int2binary(length(args)),
				\s, ainfo -> s + string2binary(ainfo.first) + bytecodetype2binary(ainfo.second)
			);
		CGetFreeVar(index): // index : int ( --> value )
			if (index < 0 || index >= 256)
				fail0("upvalue index out of bounds")
			else
				"\x2a"+int2binary(index);
		CClosureReturn(): "\x2b"; // ( --> )
		CClosurePointer(size, offset): // n : int offset : int ( v1 ... vn --> call )
			// Takes pc, adds offset, and puts that as a pointer to code along with a closure pointer
			if (size < 0 || size >= 256)
				fail0("upvalue count out of bounds")
			else
				"\x2c"+int2binary(size)+int2binary(offset);
		CSwitch(defoffset, cases): // cases : int, defaultoffset : int, c1 : int, off1 : int, ... cn : int, offn : int
			fold(
				cases, "\x2d"+int2binary(length(cases))+int2binary(defoffset),
				\s, cv -> {
					if (cv.first < 0 || cv.first >= 65536)
						fail0("struct index out of bounds in switch")
					else
						s + int2binary(cv.first) + int2binary(cv.second)
				}
			);
		CUncaughtSwitch(): "\x2e"; // This should crash the execution. Used for the uncatch switches
		CTailCall(args): "\x2f" + int2binary(args); // ( args closure --> result )

		CPlusString(): "\x30"; // ( string string --> string )
		CPlusInt(): "\x31"; // ( int int --> int )
		CMinusInt(): "\x32"; // ( int int --> int )
		CNegateInt(): "\x33"; // ( int --> int )
		CMultiplyInt(): "\x34"; // ( int int --> int )
		CDivideInt(): "\x35"; // ( int int --> int )
		CModuloInt(): "\x36"; // ( int int --> int )
		CSimpleSwitch(defoffset, cases): // same layout as CSwitch; see BytecodeRunner for difference
			fold(
				cases, "\x37"+int2binary(length(cases))+int2binary(defoffset),
				\s, cv -> {
					if (cv.first < 0 || cv.first >= 65536)
						fail0("struct index out of bounds in switch")
					else
						s + int2binary(cv.first) + int2binary(cv.second)
				}
			);
		CWString(value): // length : byte, utf16chars : int16[length] ( --> string)
			stringFold(
				value, "\x38" + fromCharCode(strlen(value)),
				\s, cc -> s + fromCharCode(bitAnd(cc,0xFF)) + fromCharCode(bitAnd(cc/256,0xFF))
			);
		CLast(): "\x39"; // Nothing, just sentinel
		CBreakpoint(): "\x40"; // Breakpoint marker in the C++ runner
		// like CNativeFn, but replaces top value on stack, or does nothing if no such native
		COptionalNativeFn(name, args):
			"\x44"+int2binary(args)+string2binary(name);
		// Mutable fields
		CSetMutable(index): // index : int (structvalue value -->)
			if (index < 0 || index >= 256)
				fail0("field index out of bounds")
			else
				"\x45"+int2binary(index);
		CSetMutableName(name): // name : string (structvalue value -->)
			if (strlen(name) >= 256)
				fail0("field name is too long")
			else
				"\x46"+string2binary(name);
	}
}

bytecodeChunk2Binary(c : BytecodeOrChunk) -> string {
	switch(c) {
		BytecodeChunk(bytes, info):
			bytes;
		default : bytecode2binary(cast(c : BytecodeOrChunk -> Bytecode));
	}
}



makeBytecodeInfoFilter() -> (Tree<int,[BytecodeInfo]>, int, BytecodeInfo) -> Tree<int, [BytecodeInfo]> {
	last_line = ref BCILine("",-1);
	last_func = ref BCIFunction("");
	\t : Tree<int, [BytecodeInfo]>, k : int, cinfo : BytecodeInfo -> {
		switch (cinfo : BytecodeInfo) {
			BCILine(f, l):
				if (cinfo == ^last_line) t
				else { last_line := cinfo; treePushToArrayValue(t, k, cinfo); }
			BCIFunction(f):
				if (cinfo == ^last_func) t
				else { last_func := cinfo; treePushToArrayValue(t, k, cinfo); }
			default:
				treePushToArrayValue(t,k,cinfo);
		}
	}
}

emptyBytecode() { BytecodeChunk("", makeTree()); }

BytecodeChunkAcc(code : List<string>, offset : int, debugMap : Tree<int, [BytecodeInfo]>);

// Collect this code together into one chunk
// All the different infos should be recorded at offset 0
makeBytecode(code : [BytecodeOrChunk], info : [BytecodeInfo]) -> BytecodeChunk {
	if (true) {
		// println(length(code));
		// println(info);
		data = fold(code, BytecodeChunkAcc(makeList(), 0, makeTree1(0, info)), \acc, c -> {
			bs = bytecodeChunk2Binary(c);
			switch (c : BytecodeOrChunk) {
				BytecodeChunk(bbs, rinfo): {
					off = acc.offset;
					debugMap0 = foldTree(rinfo, acc.debugMap, \offs : int, vals : [BytecodeInfo], acc2 : Tree<int, [BytecodeInfo]> -> {
						exi = lookupTreeDef(acc2, off + offs, []);
						setTree(acc2, off + offs, uniq(concat(vals, exi)));
					});
					BytecodeChunkAcc(Cons(bs, acc.code), off + strlen(bs), debugMap0)
				}
				default: {
					BytecodeChunkAcc(Cons(bs, acc.code), acc.offset + strlen(bs), acc.debugMap)
				};
			}
		});
		BytecodeChunk(list2string(data.code), data.debugMap)
	} else {
		check_last = makeBytecodeInfoFilter();
		itree = ref fold(info, makeTree(), \t, i -> check_last(t, 0, i));
		runningLength : ref int = ref 0;
		data = fold(code, Cons("", makeList()), \acc, c -> {
			bs = bytecodeChunk2Binary(c);
			switch (c : BytecodeOrChunk) {
				BytecodeChunk(bbs, /*rcode,*/ rinfo): {
						off = ^runningLength;
						itree := foldArrayTree(rinfo, ^itree, \k,v,t -> {
							check_last(t, k+off, v)
						});
					}
				default: {};
			}
			runningLength := ^runningLength + strlen(bs);
			Cons(bs, acc);
		});
		BytecodeChunk(list2string(data), /*code,*/ ^itree)
	}
}

formatDebugInfo(chunk :  BytecodeChunk) -> string {
	data = foldArrayTree(chunk.info, Triple(makeList(), makeList(), makeList()), \k : int, v : BytecodeInfo, t -> {
		switch (v : BytecodeInfo) {
			BCIFunction(f):
				// Top-level map: 
				// pc, top_level name
				Triple(Cons(i2s(k)+" "+f+"\n", t.first), t.second, t.third);
			BCILine(f,l):
				// Line number map
				// pc, file, line, starting token index
				Triple(t.first, Cons(i2s(k)+" "+f+" "+i2s(l)+" 0\n", t.second), t.third);
			BCILocals(nargs, locals, upvals): {
				// Map of variables
				// L pc, type, id, name
				// Type codes:
				//	LOCAL_VAR = 0;
				//	LOCAL_ARG = 1;
				//  LOCAL_UPVAR = 2;
				lstr = foldi(locals, "", \i,s,n -> {
					s+("L "+i2s(k)+" "+(if (i >= nargs) "0" else "1")+" "+i2s(i)+" "+n+"\n")
				});
				ustr = foldi(upvals, "", \i,s,n -> {
					s+("L "+i2s(k)+" 2 "+i2s(i)+" "+n+"\n")
				});
				Triple(t.first, t.second, Cons(lstr+ustr, t.third));
			}
		}
	});

	fold(reverseA([
		data.first,
		Cons("\n", makeList()),
		data.second,
		Cons("\n", makeList()),
		data.third,
	]), makeList(), concatList) |> list2string;
}

----------

double2bytes = \d:double ->
	fold(subrange(s2a(toBinary(flow(d))), 3, 4), [], \acc:[int], b:int ->
		concat(acc, [bitAnd(b, 255), bitUshr(b, 8)])
	)


int2binary = \value:int ->
	(((fromCharCode(bitAnd(value, 255)) + fromCharCode(bitAnd(bitUshr(value, 8), 255))) + fromCharCode(bitAnd(bitUshr(value, 16), 255))) + fromCharCode(bitAnd(bitUshr(value, 24), 255)))


string2binary = \value:string ->
	utfbytes : [int] = string2utf8(value);
	list2string(fold(utfbytes, Cons(int2binary(length(utfbytes)), EmptyList()), \s:Cons<string>, v:int ->
		Cons(fromCharCode(v), s)
	))


bytecodetype2binary = \c:BytecodeTypeCode ->
	switch (c : BytecodeTypeCode) {

	}


bytecode2binary = \c:Bytecode ->
	switch (c : Bytecode) {

	}

