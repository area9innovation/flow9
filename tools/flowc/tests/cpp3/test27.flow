import sys/concurrent;
import math/stringmath;
import tools/flowc/backends/cpp3/fi2cpp3_mem;

//native getThreadPoolSize : () -> int = Native.getThreadPoolSize;

calcSometh(n: int) -> int {
	acc = ref 1;
	for(0,
		\i -> i < 10000, 
		\i -> {
			acc := (^acc * n) % 1000000;
			acc := (^acc * (n - 1)) % 1000000;
			acc := (^acc * (n - 2)) % 1000000;
			i + 1;
		}
	)
	^acc;
}

main() {
	//println("Thread pool size: " + i2s(getThreadPoolSize()));
	if (getUrlParameter("determ") == "") {
		println(memoryPoolStats());
	}
	concurrent(true, generate(0, availableProcessors() * 5,  \i -> \ -> {
		if (getUrlParameter("determ") != "1") {
			println(i2s(i) + " job, thread: " + getThreadId());
		}
	}));
	println("job thread ids are tested");
	if (getUrlParameter("determ") == "") {
		println(memoryPoolStats());
	}
	N = 1000;
	inds = generate(0, N, idfn);
	test_tree = pairs2tree(map(inds, \i -> Pair(i, i*(i - 1))));
	start_concur = timestamp();
	job = \i -> \ -> {
		j = calcSometh(i) % N;
		s = strRepeat("A", j % 10);
		lookupTreeDef(test_tree, j, strlen(s)); 
	}
	test1 = concurrent(true, map(inds, job));
	concurrent_time = timestamp() - start_concur;
	if (getUrlParameter("determ") != "1") {
		println("concurrent took: " + d2st(concurrent_time / 1000.0, 2));
	}

	start_seq = timestamp();
	test2 = sequential(true, map(inds, job));
	sequential_time = timestamp() - start_seq;
	if (getUrlParameter("determ") != "1") {
		println("sequential took: " + d2st(sequential_time / 1000.0, 2));
	}

	if (test1 != test2) {
		println("seq and concur DIFFER !!!!!");
	} else {
		println("seq and concur coincide - ok");
	}
	if (getUrlParameter("determ") != "1") {
		println("concurrent is faster: " + d2st(sequential_time / concurrent_time, 2) + " times");
	}
	if (getUrlParameter("determ") == "") {
		println(memoryPoolStats());
	}
	quit(0);
}
