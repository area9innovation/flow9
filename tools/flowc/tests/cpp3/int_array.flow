import string;
import ds/array;
import ds/bitset;
import math/math;
import string_utils;
import net/url_parameter;
import sys/target;
import sys/concurrent;
import sys/system;
import fs/filesystem;
import text/binary;
import tools/flowc/backends/cpp3/fi2cpp3_mem;
import compile_time;

euler1(limit : int) -> int {
    foldRange(1, limit - 1, 0, \acc, i -> {
        if (i % 3 == 0 || i % 5 == 0) {
            acc + i;
        } else acc;
    });
}

euler2(a : double, b : double, sum : double) -> double {
    fib = a + b;
    nsum = if (fib % 2.0 == 0.0) sum + fib else sum;
    if (fib < 4000000.0) {
        euler2(b, fib, nsum)
    } else {
        nsum;
    }
}

biggestFactor(factor : double, limit : double, biggest : double, n : double) -> double {
	if (factor < limit) {
		if (n % factor == 0.0) {
			biggestFactor(factor, limit, factor, n / factor);
		} else {
			biggestFactor(if (factor == 2.0) 3.0 else factor + 2.0, limit, biggest, n)
		}
	} else {
		biggest;
	}
}

findBiggestDivisor(n : double) -> double {
	biggestFactor(2.0, sqrt(n), 1.0, n);
}

isPalindromic(s : string) -> bool {
	l = strlen(s);
    l <= 1 || {
		first = strLeft(s, 1);
		last = strRight(s, l - 1);
        first == last && isPalindromic(strsubsmart(s, 1, -1));
    }
}

euler4() -> int {
    foldRange(100, 999, 0, \acc, a -> {
        foldRange(100, 999, acc, \acc2, b -> {
        	p = a * b;
	        if (p < acc2 || !isPalindromic(i2s(p))) acc2 else p;
        })
    });
}

euler5(limit : int) -> int {
    foldRange(1, limit, 1, \acc, n -> {
        if (acc % n == 0) {
            // We already are a factor
            acc;
        } else {
            // We are not a factor. Figure out what
            // factors are missing, and add those
            required = n / gcd(acc, n);
            acc * required;
        }
    })
}

euler6(limit : int) -> double {
    sumsquares = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n * n));
    natsum = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n));
	natsum * natsum - sumsquares
}

sieve(n : int, set : BitSet, onPrime : (int) -> void) -> void {
    if (n < set.bitcount) {
        if (either(getBitSet(set, n), false)) {
            // OK, this is a prime. Mark the rest
            clearFactors(n + n, n, set);
            onPrime(n);
        };
        sieve(n + 1, set, onPrime);
    }
}

clearFactors(n : int, step : int, set : BitSet) -> void {
    if (n < set.bitcount) {
        unsetBitSet(set, n);
        clearFactors(n + step, step, set);
    }
}

euler7(target : int) -> int {
    // HACK: Upper bound for how many numbers we have to search
    // for the Nth prime.
    // This is speculative. If we do not find it, the
    // result will be 0. Then increase this bound.
    size = target * round(E_CONST * log(i2d(target)));

    // OK, make a set filled with 1
    set = makeBitSet(size);
    fori(2, size, \i -> {
        setBitSet(set, i);
        {}
    });

    // Now, run the sieve and knock out factors, this way
    // finding primes
    count = ref 0;
    ret = ref 0;
    sieve(2, set, \prime -> {
        // This is called whenever we find a prime
        count := ^count + 1;
        if (^count == target) {
            ret := prime;
        }
    });
    ^ret;
}

euler8(digits : string, len : int) -> double {
    foldRange(0, strlen(digits) - len - 1, 0.0, \greatest, i -> {
        numbers = substring(digits, i, len);
        product = stringFoldChar(numbers, 1.0, \acc, d -> {
            acc * s2d(d)
        });
        max(product, greatest)
    });
}

euler9(limit : int) -> int {
    foldRange(1, limit - 1, 0, \biggest : int, a : int -> {
		b = (1000 * (a - 500))/(a - 1000);
		c = 1000 - b - a;
		if (b < 0 || c < 0 || a * a + b * b != c * c) {
			biggest;
		} else {
            product = a * b * c;
            max(product, biggest);
		}
    });
}

// Erasthoses sieve
sieve1(n : int, set : BitSet, onPrime : (int) -> void) -> void {
    if (n < set.bitcount) {
        if (either(getBitSet(set, n), false)) {
            // OK, this is a prime. Mark the rest
            clearFactors1(n + n, n, set);
            onPrime(n);
        };
        sieve1(n + 1, set, onPrime);
    }
}

clearFactors1(n : int, step : int, set : BitSet) -> void {
    if (n < set.bitcount) {
        unsetBitSet(set, n);
        clearFactors1(n + step, step, set);
    }
}

euler10(size : int) -> double {
    // OK, make a set filled with 1
    set = makeBitSet(size);
    fori(2, size, \i -> {
        setBitSet(set, i);
        {}
    });

    // Now, run the sieve and knock out factors, this way
    // finding primes
    primesum = ref 0.0;
    sieve1(2, set, \prime -> {
        // This is called whenever we find a prime
        primesum := ^primesum + i2d(prime);
    });
    ^primesum;
}


// Alternative method using predicate directly

isPrime(x : int) -> bool {
    x == 2 || (x > 2 && (x % 2 != 0) && doIsPrime(x, 3, round(sqrt(i2d(x))) + 1))
}

doIsPrime(x : int, i : int, stop : int) -> bool {
    i >= stop
    || (
        (x % i) != 0
        && doIsPrime(x, i + 2, stop)
    );
}

euler10b(size : int) -> double {
    primes = filter(enumFromTo(1, size), isPrime);
    fold(primes, 0.0, \acc, prime -> acc + i2d(prime));
}


S1(a: int, b: bool, mutable x: string);
S2(a: int, c: bool, mutable x: string);
S3(d: int, c: bool, mutable x: string);
Un1 ::= S1, S2;
Un2 ::= S2, S3;

getCommonAField(u: Un1) -> int {
	u.a + 1;
}

getCommonXField1(u: Un1) -> string {
	u.x;
}

getCommonCField(u: Un2) -> bool {
	!u.c;
}

getCommonXField2(u: Un2) -> string {
	u.x;
}

setCommonXField(u: Un1, s: string) -> void {
	u.x ::= s;
}


SWithPairs(
	p1: Pair<int, string>,
	p2: Pair<Pair<int, string>, Pair<int, bool>>,
);


concurrencyTest() -> void {
	println("Testing concurrency...");
	start = 2000;
	num_iters = 2; //10;
	//test_params = enumFromTo(start, start + 100);
	test_params = enumFromTo(start, start + num_iters);
	t1 = timestamp();
	task = \i -> euler10(i);
	run_seq = sequential(true, map(test_params, \i -> 
		\ -> {
			t0 = timestamp();
			ret = task(i);
			if (getUrlParameter("determ") == "") {
				println("Test iteration: " + i2s(i) + " took: " + d2st(timestamp() - t0, 2) + " ms");
			} else {
				println("Test iteration: " + i2s(i) + "...");
			}
			ret;
		}
	));
	seq_time = timestamp() - t1;
	if (getUrlParameter("determ") == "") {
		println("Sequantial execution of test took: " + d2st(seq_time, 2) + " ms");
	} else {
		println("Sequantial execution finished");
	}/*
	t2 = timestamp();
	run_concur = concurrent(true, map(test_params, \i -> 
		\ -> {
			t0 = timestamp();
			ret = task(i);
			if (getUrlParameter("determ") == "") {
				println("Test iteration: " + i2s(i) + " took: " + d2st(timestamp() - t0, 2) + " ms");
			}
			ret;
		}
	));
	concur_time = timestamp() - t2;
	if (getUrlParameter("determ") == "") {
		println("Parallel execution of test took: " + d2st(concur_time, 2) + " ms");
	} else {
		println("Parallel execution finished");
	}
	if (run_seq != run_concur) {
		println("Concurrency test FAILED.");
		println("seq results: " + i2s(length(run_seq)) + " =\n" + strGlue(map(run_seq, d2s), ", "));
		println("concur results: " + i2s(length(run_concur)) + " =\n" + strGlue(map(run_concur, d2s), ", "));
	} else {
		if (getUrlParameter("determ") == "") {
			println("Concurrency test succeeded, concurent is faster " + d2st(seq_time / concur_time, 2) + " times");
		} else {
			println("Concurrency test succeeded");
		}
	}*/
}

counter : ref int = ref 0;
ids : ref Tree<int, int> = ref makeTree();

//synchronizedConstFn : (lock : flow, fn : () -> ?) -> () -> ? = Native.synchronizedConstFn;
//synchronizedUnaryFn : (lock : flow, fn : (?) -> ??) -> (?) -> ?? = Native.synchronizedUnaryFn;

synchronizedTest(do_print: bool) -> void {
	get_id = synchronizedUnaryFn(None(), \i -> {
		switch (lookupTree(^ids, i)) {
			Some(id): id;
			 None(): {
				id = ^counter;
				counter := id + 1;
				ids := setTree(^ids, i, id);
				id;
			 }
		}
	});
	ids = concurrent(true, map(enumFromTo(0, 1000), \i -> \-> get_id(i)));
	if (do_print) {
		iteri(ids, \i, id -> println(i2s(i) + " -> " + i2s(id)));
		println("--------------");
	}
	ids1 = concurrent(true, map(enumFromTo(0, 1000), \i -> \-> get_id(i)));
	if (do_print) {
		iteri(ids1, \i, id -> println(i2s(i) + " -> " + i2s(id)));
		println("--------------");
	}
	if (ids == ids1) {
		println("ids are the same - ok");
	} else {
		println("ids are NOT the same - FAILED");
	}
	if (length(ids) == length(uniq(ids))) {
		println("all ids are different - ok");
	} else {
		println("NOT all of ids are different - FAILED");
	}
	iter(enumFromTo(0, 1000), \i -> 
		if (!exists(ids, \x -> x == i)) {
			println("id " + i2s(i) + " is NOT FOUND - FAILED");
		}
	);
}

memoryStats() {
	if (getUrlParameter("determ") == "") {
		println("Used memory: " + memory2s(usedMemory()));
		println("Total memory: " + memory2s(totalMemory()));
		println("Free memory: " + memory2s(freeMemory()));

		println("vector stats:\n" + strIndent(memoryVecStats()));
		println("string stats:\n" + strIndent(memoryStringStats()));
	}
}

showTime(fn: () -> string) -> void {
	t = timestamp();
	s = fn();
	if (getUrlParameter("determ") == "") {
		println(s + " in " + d2st((timestamp() - t) / 1000.0, 4) + ".s");
	} else {
		println(s);
	}
}


main() {
	println(generate(0, 5, \i -> generate(0, 5, \j -> Pair(i, j))));
	if (getUrlParameter("determ") == "") {
		println(memoryPoolStats());
	}
	memoryStats();
	t = timestamp();
	if (getUrlParameter("determ") == "") {
		println("CPP TESTS: " + time2string(t) + ", t = " + d2s(t) + " ?= " + d2s(string2time(time2string(t))) + " == " + time2string(string2time(time2string(t))));
	}
	println("Command paramter: 'param' = '" + getUrlParameter("param") + "'");
	println("Command paramter: 'determ' = '" + getUrlParameter("determ") + "'");
	println("URL parameters: " + toString(getAllUrlParametersArray()));
    arr = generate(0, 1000, \i -> i * (i + 1));
    println(generate(0, 9, \i -> i * (i + 1)));
	println(arr[15]);

	showTime(\ -> "euler1: " + i2s(euler1(1000)) + " (must be 233168)"); // Correct: 233168
	showTime(\ -> "euler2: " + d2s(euler2(0.0, 1.0, 0.0)) + " (must be 4613732)"); // Correct: 461373
	showTime(\ -> "euler3: " + d2s(findBiggestDivisor(600851475143.0)) + " (must be 6857)"); // Correct: 6857
	showTime(\ -> "euler4: " + i2s(euler4()) + " (must be 906609)"); // 906609
	showTime(\ -> "euler5: " + i2s(euler5(20)) + " (must be 232792560)"); // Correct: 232792560
	showTime(\ -> "euler6: " + d2s(euler6(100)) + " (must be 25164150)"); // Correct: 25164150
	
	showTime(\ -> "euler7: " + i2s(euler7(10001)) + " (must be 104743)"); // Correct: 104743
	digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    showTime(\ -> "euler8: " + d2s(euler8(digits, 13)) + " (must be 23514624000)"); // Correct: 23514624000
    showTime(\ -> "euler9: " + i2s(euler9(1000)) + " (must be 31875000)"); // Correct: 31875000
	showTime(\ -> "euler10: " + d2s(euler10(2000000)) + " (must be 142913828922)"); // Correct: 142913828922
    showTime(\ -> "euler10b: " + d2s(euler10b(2000000)) + " (must be 142913828922)"); // Correct: 142913828922

	memoryStats();

    println("Triple(\"a\", 1, false): " + toString(makeStructValue("Triple", [flow("a"), flow(1), flow(false)], IllegalStruct())));
	if (getUrlParameter("determ") == "") {
    	println("getTargetName: " + getTargetName());
	}

	for(1, \x -> x < 9, \x -> {
		println("x: " + i2s(x));
		x + 1;
	});

	if (getUrlParameter("determ") == "") {
    	println("getApplicationPath: " + getApplicationPath());
	}

	concurrencyTest();

	memoryStats();

    test0 = getFileContent("test.txt");
    //println("test.txt:\n" + test0);
    setFileContent("test1.txt", test0);
	test1 = getFileContent("test1.txt");
    assertEquals(test0, test1);

    x1 = string2utf8(test0);
    println("x1.len: " + i2s(length(x1)));


    //assertEquals(x1, x2);

	if (getUrlParameter("determ") == "") {
		iter(enumFromTo(0, 9), \i -> println("rand " + i2s(i) + ": " + d2s(random())));
		// rand = randomGenerator(42);
		// iter(enumFromTo(0, 9), \i -> println("rand " + i2s(i) + ": " + d2s(rand())));
    	printCallstack();
	}

	if (getUrlParameter("determ") == "") {
		createDirectory("tmpdir");
		println("fileExists(tmpdir): " + b2s(fileExists("tmpdir")));
		println("isDirectory(tmpdir): " + b2s(isDirectory("tmpdir")));
		println("isDirectory(AAAA): " + b2s(isDirectory("AAAA")));
		setFileContent("tmpdir/tmpfile.txt", "AAAAA\nBBBB\nVVVVV\n");
		println("fileExists(tmpfile): " + b2s(fileExists("tmpdir/tmpfile.txt")));
		println("isDirectory(tmpfile): " + b2s(isDirectory("tmpdir/tmpfile.txt")));

		renameFile("tmpdir/tmpfile.txt", "tmpdir/tmpfile111.txt");
		println("fileExists(tmpfile): " + b2s(fileExists("tmpdir/tmpfile.txt")));
		println("isDirectory(tmpfile): " + b2s(isDirectory("tmpdir/tmpfile.txt")));
		println("fileExists(tmpfile111): " + b2s(fileExists("tmpdir/tmpfile111.txt")));
		println("isDirectory(tmpfile111): " + b2s(isDirectory("tmpdir/tmpfile11.txt")));

		println("readDirectory(..): \n" + concatStrings(map(readDirectory(".."), \d -> "\t" + d + "\n")));
		println("readDirectory(.): \n" + concatStrings(map(readDirectory("."), \d -> "\t" + d + "\n")));
		println("readDirectory(cpp3gen/int_array): \n" + concatStrings(map(readDirectory("cpp3gen/int_array"), \d -> "\t" + d + "\n")));
		println("resolveRelativePath(.): \n" + resolveRelativePath("."));

		println("tmpfile modified: " + time2string(fileModified("tmpdir/tmpfile111.txt")));
		println("tmpfile size: " + d2s(fileSize("tmpdir/tmpfile111.txt")));

		println("AAAA modified: " + time2string(fileModified("AAAA")));
		println("AAAA size: " + d2s(fileSize("AAAA")));

		println("rename AAAA: " + renameFile("AAAA", "BBBB"));

		println("stringbytes2double(\"asas\"): " + d2s(stringbytes2double("asas")));
		println("stringbytes2int(\"as\"): " + i2s(stringbytes2int("as")));
	}


	test_pair1 = Pair("ABC", 2.34);
	test_pair2 = Pair("∫x+∞xx∫→ℝℂ∀Ⅎ", false);
	test_pair3 = Pair(100500,[
            [[1,2,3], [3,4,5]],
            [[6,7,8], [9,10,11]],
        ]);
	//test_bin : Pair<Pair<string, double>, int> = Pair(test_pair1, 11);
	//test_bin = Pair(test_pair1, 11);
    test_bin = Triple(
        Pair("ABC", 2.34),
        Pair("∫x+∞xx∫→ℝℂ∀Ⅎ", false),
        Pair(100500,[
            [[1,2,3], [3,4,5]],
            [[6,7,8], [9,10,11]],
        ])
    );
	println("test_bin: " + toString(test_bin));
	bin = toBinary(test_bin);
	setFileContent("test_bin", bin);
	println("bin: '" + bin + "'");
	println("toString of string: '" + toString("aaaa") + "'");

	sq = cast(map(enumFromTo(0, 9), \_-> enumFromTo(0, 9)): [[int]] -> flow);
	xarr = cast(sq: flow -> [flow]);
	println(xarr);

	bin_one = toBinary(1.0);
	println("toBinary(1.0): " + toString(bin_one) + " = [" + strGlue(map(s2a(bin_one), i2s), ", ") + "]");
	println("deserializeBinary(toBinary(1.0), IllegalStruct()): " + toString(deserializeBinary(toBinary(1.0), IllegalStruct())));


	zarr = cast(sq: flow -> [[flow]]);
	println(zarr);
	unbin = deserializeBinary(bin, IllegalStruct());
	println("unbin: '" + toString(unbin) + "' == '" + toString(test_bin) + "'");
	println("unbin.structname: " + unbin.structname);
	println("string with $a ${$b} $${cd} \\$");

	memoryStats();

	list = Cons("A", Cons("B", Cons("C", EmptyList())));

    println("list2array(list): " + toString(list2array(list)));
    println("list2string(list): " + list2string(list));

    yarr = cast(xarr: [flow] -> [[flow]]);
	println("yarr: " + toString(yarr));
	arr_arr_arr = [
        [[1,2,3], [3,4,5]],
        [[6,7,8], [9,10,11]],
    ];
    zzz = cast(cast(arr_arr_arr : [[[int]]] -> flow): flow -> [[[flow]]]);
	println("zarr: " + toString(zarr));
	println("zzarr: " + toString(cast(cast(arr_arr_arr : [[[int]]] -> [flow]): [flow] -> [[[flow]]])));
	println("zzarr: " + toString(cast(cast(arr_arr_arr : [[[int]]] -> [[flow]]): [[flow]] -> [[[flow]]])));

	switch (compileTime(pprint("lookupTree(makeTree1(\"BBB\", 12), \"AAA\"): ")(lookupTree(makeTree1("BBB", 12), "AAA")))) {
		Some(v): {
			println(i2s(v));
		}
		None(): { }
	}
	switch (compileTime(pprint("lookupTree(makeTree1(\"BBB\", 12), \"AAA\"): ")(lookupTree(makeTree1("BBB", 12), "BBB")))) {
		Some(v): { 
			println(i2s(v));
		}
		None(): { }
	}

	un2: Un2 = S2(2, true, "AAA");
	println("get common c field: " + b2s(getCommonCField(un2)));
	println("get common x field: " + getCommonXField2(un2));

	enclosed_callback = \x -> { z = x * 2; \ -> z + 1};
	println("enclosed_callback(2)(): " + i2s(enclosed_callback(2)()));

	println("isSameObj(1, 1): " + b2s(isSameObj(1, 1)));
	println("isSameObj(1, 2): " + b2s(isSameObj(1, 2)));
	println("isSameObj(1.0, 1.0): " + b2s(isSameObj(1.0, 1.0)));
	println("isSameObj(1.0, 2.0): " + b2s(isSameObj(1.0, 2.0)));
	println("isSameObj(abc, abc): " + b2s(isSameObj("abc", "abc")));
	println("isSameObj(abc, aaa): " + b2s(isSameObj("abc", "aaa")));
	obj_arr = [1, 2, 3];
	obj_arr1 = obj_arr;
	println("isSameObj(obj_arr, obj_arr1): " + b2s(isSameObj(obj_arr, obj_arr1)));
	//println("isSameObj([1, 2, 3], [1, 2, 3]): " + b2s(isSameObj([1, 2, 3], [1, 2, 3])));
	enclosed_callback1 = enclosed_callback;
	
	//println("isSameObj(enclosed_callback1, enclosed_callback): " + b2s(isSameObj(enclosed_callback1, enclosed_callback)));

	if (getUrlParameter("determ") == "") {
		runSystemProcess("javac", ["-version"], ".", 
			\x -> println("run: " + x), 
			\x -> println("run: " + x),
			\code -> {
				println("runSystemProcess exit code: " + i2s(code));
				//quit(0);
		});
		exit_code = execSystemProcess("javac", ["-version"], ".", 
			\x -> println("exec: " + x), 
			\x -> println("exec: " + x)
		);
		println("exit_code of execSystemProcess(javac): " + i2s(exit_code));
		memoryStats();

		startProcess("javac", ["-version"], ".", "", \code, stdout, stderr -> {
			println("startProcess exit code: " + i2s(code));
			println("startProcess stdout: '" + stdout + "'");
			println("startProcess stderr: '" + stderr + "'");
			//quit(0);
		});
	}
	println("availableProcessors(): " + i2s(availableProcessors()));
	//quit(0);

	
	//rettype = {
	//	switch (type) {
	//		FiTypeFunction(__, rettype): fiCppLambdaRetType(cfg, program, rettype);
	//		default: "TODO";
	//	}
	//}

	un1: Un1 = S2(2, true, "AAA");
	println("get common a field: " + i2s(getCommonAField(un1)));
	println("get common x field: " + getCommonXField1(un1));
	setCommonXField(un1, "BBB");
	println("get common x field: " + getCommonXField1(un1));
	println("concat test: " + strGlue(concat(["A", "B"], ["C", "D"]), ","));
	x2 = switch (un1) {
		S1(a, b, x): b;
		S2(a, c, x): c;
	}
	y2 = switch (un1) {
		S1(a, b, x): a;
		S2(a, c, x): a;
	}
	x22 = {
		switch (un1) {
			S1(a, x22, x): x22;
			S2(a, x22, x): x22;
		}
	}

	//large_array = generate(0, 96, \i -> generate(0, i, \j -> i * j));
	//println("large_array: \n" + toStringFormatted(large_array));
	//timer(3000, \ -> println("Timer event!"));


	memoryStats();
	concurrencyTest();
	memoryStats();
	//println("Synchronized funcs tests");
	//iter(enumFromTo(1, 10), \i -> {
	//	println("Iteration: " + i2s(i));
	//	synchronizedTest(false);
	//});


	big_arr_size = 10000;
	fold_arr_time = timestamp();
	big_arr = fold(enumFromTo(1, big_arr_size), [], \acc, i -> concat(acc, [2 * i + 1]));
	if (getUrlParameter("determ") == "") {
		println("Array of size " + i2s(big_arr_size) + " is created during fold in: " + d2st((timestamp() - fold_arr_time) / 1000.0, 2) + " s");
	} else {
		println("Array of size " + i2s(big_arr_size) + " is created");
	}

	big_str_size = 10000;
	fold_str_time = timestamp();
	big_str = fold(enumFromTo(1, big_str_size), "", \acc, i -> acc + fromCharCode(2 * i + 1));
	if (getUrlParameter("determ") == "") {
		println("String of size " + i2s(big_str_size) + " is created during fold in: " + d2st((timestamp() - fold_str_time) / 1000.0, 2) + " s");
	} else {
		println("String of size " + i2s(big_str_size) + " is created");
	}

	if (getUrlParameter("determ") == "") {
		println("t, timestamp: ");
		println(t);
		println(timestamp());
		println("Tests passed in: " + d2st((timestamp() - t) / 1000.0, 2) + " s");
	}
	memoryStats();
	if (getUrlParameter("determ") == "") {
		//println(memoryPoolStats());
		println("used memory: " + memory2s(totalMemory()));
	}

	quit(0);
	//println("NOT REACHEABLE");
}


