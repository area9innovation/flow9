Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native toString : io (v : ?) -> string = Native.toString;
native fromBinary : (s : string, default_ : flow, fixups : (string)->Maybe<([flow])->flow>) -> flow = Native.fromBinary;

funcB(b: string) -> string {
	b + " ";
}

funcA(a: int, b: string) -> flow {
	if (a == 0) b else funcB(b) + "!" + funcB(b);
}

func(s: string, default_: string) -> flow {
	rv = fromBinary(s, default_, \__ -> None());
	//rv = cast(default_: string -> flow);
	if (rv == cast(s: string -> flow)) { // Not implemented
		//deserializeBinary_flow(s, structFixups, default_);
		//funcA(5, s);
		5;
	} else {
		rv;
	}
}

main() {
	println2(func("a", "?"));
	quit(0);
}
