import text/binary;
import math/math;

funcB(b: string) -> string {
	b + " ";
}

funcA(a: int, b: string) -> flow {
	if (a == 0) b else funcB(b) + "!" + funcB(b);
}

func(s: string, default_: string) -> flow {
	rv = deserializeBinary(s, default_);
	//rv = cast(default_: string -> flow);
	if (rv == cast(s: string -> flow)) { // Not implemented
		//deserializeBinary_flow(s, structFixups, default_);
		//funcA(5, s);
		println("AAA: '" + s + "', " + toString(rv));
		cast(5: int -> flow);
	} else {
		println("BBB: '" + s + "', " + toString(rv));
		rv;
	}
}

test_s2i(x: string, ref_val: int) -> void {
	//x_i = cast(x: string -> int);
	x_ii = s2i(x);
	//assert(x_i == ref_val, "cast(x: string -> int) fails on: '" + x + "', got: " + i2s(x_i));
	assert(x_ii == ref_val, "s2i fails on: '" + x + "', got: " + i2s(x_ii));
	println("s2i(\"" + x + "\"): " + i2s(x_ii));
}

main() {
	test_s2i("a", 0);
	test_s2i("", 0);
	test_s2i("123", 123);
	test_s2i("99999", 99999);
	test_s2i("-99999", -99999);
	test_s2i("-0", -0);
	test_s2i(i2s(intMax), intMax);
	test_s2i(i2s(intMin), intMin);
	//test_s2i("-121a234", 0);
	//test_s2i("131b334", 0);
	println("XXX: " + toString(func("a", "?")));
	quit(0);
}
