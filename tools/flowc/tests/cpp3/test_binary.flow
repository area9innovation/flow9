import text/binary;


fromBinaryToFlow(v : string) -> flow {
	deserializeBinary(v, IllegalStruct())
}


doTest(x: ?) -> void {
	println("To test: " + toString(x));
	s = toBinary(cast(x: ? -> flow));
	println("Serialized: '" + s + "' = " +
		toString(mapi(s2a(s),
			\i, c -> i2s(i) + "->" + formatHex(c)
		))
	);
	y = deserializeBinary(s, None());
	println("Deserialized: " + toString(y));
	z = cast(y: flow -> ?);
	println("Deserialized(2): " + toString(z));
	if (x != z) {
		fail("deserialization fails:\n" +
			toString(x) + " != " + toString(z)
		);
	}
	println("Test of " + toString(x) + " IS FINISHED\n");
}

main() {

	println("start");
	x = "12.4";
	xb = toBinary(x);
	println("String " + x + ":");
	println(s2a(xb));
	xr = fromBinaryToFlow(xb);
	println("x.type: " + runtimeValueType(xr));
	println("Restored : " + cast(xr: flow -> string));
	println("");

	doTest("12.4");

	y = 3.45;
	yb = toBinary(y);
	// [7, 0, 65532, 39322, 39321, 39321, 16395, 65527]
	println("Float " + toString(y) + ":");
	println(s2a(yb));
	println("");

	doTest(3.45);

	z = [1.0, 2.0];
	zb = toBinary(z);
	println("Array " + toString(z) + ":");
	println(s2a(zb));
	println("");
	z2 = [1, 2];
	zb2 = toBinary(z2);
	println("ArrayI " + toString(z2) + ":");
	println(s2a(zb2));
	println("");

	doTest([]);
	doTest([1.0, 2.0]);
	doTest([1, 2]);
	doTest(["a", "b", "c"]);

	p = 14;
	pb = toBinary(p);
	println("Int " + toString(p) + ":");
	println(s2a(pb));
	println("");

	doTest(14);

	q = 14376368;
	qb = toBinary(q);
	println("Large int " + toString(q) + ":");
	println(s2a(qb));
	println("");

	doTest(14376368);

	n = None();
	nb = toBinary(n);
	println("None " + toString(n) + ":");
	println(s2a(nb));
	println("");

	doTest(None());


	m = Some([Some("bla"), None(), Some("")]);
	mb = toBinary(m);
	println("Struct " + toString(m) + ":");
	println(s2a(mb));
	println("");

	doTest(None());

	doTest(Some(None()));
	doTest([None()]);
	doTest(Some("zzz"));
	doTest(Some([None()]));
	doTest(Some([None(), None()]));
	doTest(Some([Some("A"), Some("B")]));

	doTest(Some([Some("bla"), None(), Some("")]));
	doTest([Some([Some("bla"), None(), Some("")]), Some([Some("b"), None(), Some("ccc")]), Some([Some("xxx"), None(), Some("fff"), None()])]);

	y2 = 1447671199000.0;
	y2b = toBinary(y2);
	println("Float " + toString(y2) + ":");
	println(s2a(y2b));
	println("");

	doTest(1447671199000.0);
	
	quit(0);
}