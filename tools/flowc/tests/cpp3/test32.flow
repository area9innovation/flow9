import lingo/pegcode/driver;

sharedLockRulePegOps = compilePegGrammar("
	rule = rulePart:r1 (ws '+' ws rulePart)*:rs { debug(consArray(:r1, :rs)) };
	rulePart = join1:j1 ws table$t1 (ws join:j ws table$t { debug(SharedLockRuleTable(:j, $t)) })*:jts { debug(consArray(SharedLockRuleTable(:j1, :t1), :jts)) };
	join1 = joinFields:j { debug(:j) }
		| '' { debug(None()) };
	join = joinFields | joinAny;
	joinFields = '(' ws field$f1 ws '=' ws field$f2 ws ')' { debug(Some(SharedLockRuleJoinFields($f1, $f2))) };
	joinAny = '*' { debug(None()) };
	field = name;
	table = name;
	name = ('a'-'z' | 'A'-'Z' | '0'-'9' | '_')+;
	ws = (' ' | '\t')*;
");

SharedLockRuleTable(joinFieldsM : Maybe<SharedLockRuleJoinFields>, tableName : string);
SharedLockRuleJoinFields(field1 : string, field2 : string);

parseSharedLockRule(src : string) -> [[SharedLockRuleTable]] {
	untriple(
		parsic3(sharedLockRulePegOps, src, defaultPegActions, []),
		\res, __, error -> {
			if (error != "") {
				println("Has wrong SharedLockRule annotation: " + src);
				fail0(error);
			} else {
				res;
			}
		}
	);
}

main() {
	//println(sharedLockRulePegOps);
	println(parseSharedLockRule("product_roles_permissions"));
	quit(0);
}