import string;
import ds/tree;

//native clone: (x: ?) -> ? = Native.clone;
native refCounter: (x: ?) -> int = Native.refCounter;

Str(a: string, b: [int]);

testClone(x: ?, cl: (?) -> ?) -> void {
	println("refCounter(x): " + i2s(refCounter(x)));
	if (refCounter(x) == 1) {
		fail("ref counter of x must NOT be 1");
	}
	println("refCounter(clone(x)): " + i2s(refCounter(cl(x))));
	if (refCounter(cl(x)) != 1) {
		fail("ref counter of clone(x) MUST be 1, is: " + i2s(refCounter(cl(x))));
	}
	y = cl(x);
	if (refCounter(y) != 2) {
		fail("ref counter of y MUST be 1, is: " + i2s(refCounter(y)));
	}
	z = cl(x);
	if (refCounter(z) != 2) {
		fail("ref counter of z MUST be 1");
	}
	println(x);
	println(y);
	println(z);
	println("");
}

main() {
	println(clone("abc"));
	println(clone([1, 2, 3]));
	println(clone(Str("abc", [1, 2, 3])));
	println(clone([Str("abc", [1, 2, 3]), Str("xyz", [5, 6, 7])]));

	testClone("abc", clone);
	testClone([1, 2, 3], clone);
	testClone(Str("abc", [1, 2, 3]), clone);
	testClone([Str("abc", [1, 2, 3]), Str("xyz", [5, 6, 7])], clone);

	testClone(setTree(makeTree1("a", "b"), "c", "d"), clone);
	testClone(setTree(makeTree1("a", "b"), "c", "d"), idfn);

	println(clone(setTree(makeTree1("a", "b"), "c", "d")));
	println(clone(setTree(makeTree1(1, 2), 2, 3)));
	quit(0);
}