import ds/array;
import runtime;
import string;
//import sys/target;


S(a: int);

main() {
	//println(getTargetName());
	println("map([S(0), S(1), S(2)], \\x -> S(x.a + 1)): " + toString(map([S(0), S(1), S(2)], \x -> S(x.a + 1))));
	println("mapi([S(0), S(1), S(2)], \\i, x -> S(x.a + i)): " + toString(mapi([S(0), S(1), S(2)], \i, x -> S(x.a + i))));

	ma1 = [S(0), S(1), S(2)];
	ma2 = mapi(ma1, \i, x -> S(x.a + i));
	ma3 = mapi(ma2, \i, x -> S(x.a * i));
	println("mapi([S(0), S(1), S(2)], \\i, x -> S(x.a + i)): " + toString(ma3));

	println("filter([S(0), S(1), S(2), S(3)], \\x -> x.a % 2 == 0): " + toString(filter([S(0), S(1), S(2), S(3)], \x -> x.a % 2 == 0)));
	println("filter([S(0), S(1), S(2), S(3)], \\x -> x.a % 2 == 1): " + toString(filter([S(0), S(1), S(2), S(3)], \x -> x.a % 2 == 1)));
	println("filter([S(0), S(1), S(2), S(3)], \\x -> true): " + toString(filter([S(0), S(1), S(2), S(3)], \x -> true)));
	println("filter([S(0), S(1), S(2), S(3)], \\x -> false): " + toString(filter([S(0), S(1), S(2), S(3)], \x -> false)));

	println("replace([S(0), S(1), S(2), S(3)], 1, S(-4)): " + toString(replace([S(0), S(1), S(2), S(3)], 1, S(-4))));
	println("replace([S(0), S(1), S(2), S(3)], 4, S(-15)): " + toString(replace([S(0), S(1), S(2), S(3)], 4, S(-15))));
	println("replace([S(0), S(1), S(2), S(3)], 0, S(-6)): " + toString(replace([S(0), S(1), S(2), S(3)], 0, S(-6))));


	// NOTICE!!!! FOLLOWING TWO TEST MAKE DIFFERENCE WITH JAVA !!!
	//println("replace([S(0), S(1), S(2), S(3)], 5, S(-5)): " + toString(replace([S(0), S(1), S(2), S(3)], 5, S(-5))));
	//println("replace([S(0), S(1), S(2), S(3)], -1, S(-7)): " + toString(replace([S(0), S(1), S(2), S(3)], -1, S(-7))));

	println("subrange([S(0), S(1), S(2), S(3)], 0, 2): " + toString(subrange([S(0), S(1), S(2), S(3)], 0, 2)));
	println("subrange([S(0), S(1), S(2), S(3)], 0, 5): " + toString(subrange([S(0), S(1), S(2), S(3)], 0, 5)));
	println("subrange([S(0), S(1), S(2), S(3)], 3, 4): " + toString(subrange([S(0), S(1), S(2), S(3)], 3, 4)));
	println("subrange([S(0), S(1), S(2), S(3)], 3, 1): " + toString(subrange([S(0), S(1), S(2), S(3)], 3, 1)));
	println("subrange([S(0), S(1), S(2), S(3)], 3, 0): " + toString(subrange([S(0), S(1), S(2), S(3)], 3, 0)));
	println("subrange([S(0), S(1), S(2), S(3)], 2, 1): " + toString(subrange([S(0), S(1), S(2), S(3)], 2, 1)));
	println("subrange([S(0), S(1), S(2), S(3)], 2, 2): " + toString(subrange([S(0), S(1), S(2), S(3)], 2, 2)));
	println("subrange([S(0), S(1), S(2), S(3)], 2, 3): " + toString(subrange([S(0), S(1), S(2), S(3)], 2, 3)));

	println("toLowerCase(\"A strin with Caps and CAPS\"): " + toLowerCase("A strin with Caps and CAPS"));
	println("toUpperCase(\"A strin with Caps and CAPS\"): " + toUpperCase("A strin with Caps and CAPS"));

	println("substring(\"A strin with Caps and CAPS\", 2, 5): " + substring("A strin with Caps and CAPS", 2, 5));
	println("substring(\"A strin with Caps and CAPS\", 0, 100): " + substring("A strin with Caps and CAPS", 0, 100));
	println("substring(\"A strin with Caps and CAPS\", 5, -2): " + substring("A strin with Caps and CAPS", 5, -2));
	println("substring(\"A strin with Caps and CAPS\", -2, 5): " + substring("A strin with Caps and CAPS", -2, 5));

	println("find([S(0), S(1), S(2), S(3)], \\x -> x.a % 2 == 1): " + toString(find([S(0), S(1), S(2), S(3)], \x -> x.a % 2 == 1)));
	println("find([S(0), S(1), S(2), S(3)], \\x -> x.a % 2 == 2): " + toString(find([S(0), S(1), S(2), S(3)], \x -> x.a % 2 == 2)));

	println("exists([S(0), S(1), S(2), S(3)], \\x -> x.a % 2 == 1): " + toString(exists([S(0), S(1), S(2), S(3)], \x -> x.a % 2 == 1)));
	println("exists([S(0), S(1), S(2), S(3)], \\x -> x.a % 2 == 2): " + toString(exists([S(0), S(1), S(2), S(3)], \x -> x.a % 2 == 2)));

	println("elemIndex([S(0), S(1), S(2), S(3)], S(2), -3): " + toString(elemIndex([S(0), S(1), S(2), S(3)], S(2), -3)));
	println("elemIndex([S(0), S(1), S(2), S(3)], S(-2), -4): " + toString(elemIndex([S(0), S(1), S(2), S(3)], S(-2), -4)));

	println("removeIndex([S(0), S(1), S(2), S(3)], 0): " + toString(removeIndex([S(0), S(1), S(2), S(3)], 0)));
	println("removeIndex([S(0), S(1), S(2), S(3)], -1): " + toString(removeIndex([S(0), S(1), S(2), S(3)], -1)));
	println("removeIndex([S(0), S(1), S(2), S(3)], 2): " + toString(removeIndex([S(0), S(1), S(2), S(3)], 2)));
	println("removeIndex([S(0), S(1), S(2), S(3)], 3): " + toString(removeIndex([S(0), S(1), S(2), S(3)], 3)));
	println("removeIndex([S(0), S(1), S(2), S(3)], 4): " + toString(removeIndex([S(0), S(1), S(2), S(3)], 4)));


	fma1 = [S(0), S(1), S(2), S(3)];
	println("(A) filtermapi([S(0), S(1), S(2), S(3)],...): " +
		toString(filtermapi(fma1, \i, x -> 
			if (x.a % 2 == 0) Some(S(x.a + 1)) else None()
		))
	);
	println("(B) filtermapi([S(0), S(1), S(2), S(3)],...): " +
		toString(filtermapi(fma1, \i, x -> 
			if (x.a % 2 == 0) Some(S(x.a + 1)) else None()
		))
	);
	println("filtermapi([S(0), S(1), S(2), S(3)],...): " +
		toString(filtermapi([S(0), S(1), S(2), S(3)], \i, x -> 
			if (x.a % 2 == 2) Some(S(x.a + 1)) else None()
		))
	);
	println("filtermapi([S(0), S(1), S(2), S(3)],...): " +
		toString(filtermapi([S(0), S(1), S(2), S(3)], \i, x -> Some(x)))
	);
	println("filtermapi([S(0), S(1), S(2), S(3)],...): " +
		toString(filtermapi([S(0), S(1), S(2), S(3)], \i, x -> None()))
	);
	println("filtermapi([S(0), S(1), S(2), S(3)],...): " +
		toString(filtermapi([S(0), S(1), S(2), S(3)], \i, x -> 
			if (x.a < 100) Some(S(x.a + 1)) else None()
		))
	);
	fma2 = [S(0), S(1), S(2), S(3)];
	fma3 = filtermapi(fma2, \i, x -> 
		if (x.a % 2 == 0) Some(S(x.a + 1)) else None()
	);
	//println("(ะก) filtermapi([S(0), S(1), S(2), S(3)],...): " + toString(fma3));
	fma4 = filtermapi(fma3, \i, x -> 
		if (x.a % 2 == 0) Some(S(x.a + 1)) else None()
	);
	println("(D) filtermapi([S(0), S(1), S(2), S(3)],...): " + toString(fma4));

	xma1 = generate(0, 32, \i -> S(i));
	xma2 = mapi(xma1, \i, x -> S(x.a + i));
	xma3 = filtermapi(xma2, \i, x -> if (x.a % 2 == 0) Some(S(x.a + 1)) else None());
	xma4 = mapi(xma3, \i, x -> S(x.a * i));
	xma5 = filtermapi(xma4, \i, x -> if (x.a < 20) Some(S(x.a + 1)) else None());
	xma6 = mapi(xma5, \i, x -> S(x.a - 1));
	println("xma6: " + toString(xma6));


	println(startsWith("abc", ""));
	println(startsWith("abc", "a"));
	println(startsWith("abc", "ab"));
	println(startsWith("abc", "abc"));
	println(startsWith("abc", "abcd"));
	println(startsWith("abc", "x"));

	println(endsWith("abc", ""));
	println(endsWith("abc", "c"));
	println(endsWith("abc", "bc"));
	println(endsWith("abc", "abc"));
	println(endsWith("abc", "xabc"));
	println(endsWith("abc", "y"));

	//strRangeIndexOf(String* s, String* x, Int start, Int end)
	println("toString(strRangeIndexOf(\"\", \"\", 0, 0): " + toString(strRangeIndexOf("", "", 0, 0)));
	println("toString(strRangeIndexOf(\"\", \"\", 0, 1): " + toString(strRangeIndexOf("", "", 0, 1)));
	println("toString(strRangeIndexOf(\"abc\", \"\", 0, 0): " + toString(strRangeIndexOf("abc", "", 0, 0)));
	println("toString(strRangeIndexOf(\"abc\", \"\", 0, 1): " + toString(strRangeIndexOf("abc", "", 0, 1)));
	println("toString(strRangeIndexOf(\"\", \"a\", 0, 1): " + toString(strRangeIndexOf("", "a", 0, 1)));
	println("toString(strRangeIndexOf(\"abcdefg\", \"a\", 0, 1): " + toString(strRangeIndexOf("abcdefg", "a", 0, 1)));
	println("toString(strRangeIndexOf(\"abcdefg\", \"b\", 0, 1): " + toString(strRangeIndexOf("abcdefg", "b", 0, 1)));
	println("toString(strRangeIndexOf(\"abcdefg\", \"\", 0, 1): " + toString(strRangeIndexOf("abcdefg", "", 0, 1)));
	println("toString(strRangeIndexOf(\"abcdefg\", \"c\", 0, 1): " + toString(strRangeIndexOf("abcdefg", "c", 0, 1)));
	println("toString(strRangeIndexOf(\"abcdefg\", \"c\", 1, 3): " + toString(strRangeIndexOf("abcdefg", "c", 1, 3)));

	println(strRangeIndexOf("abcd", "a", 0, 0));
	println(strRangeIndexOf("abcd", "a", 0, 1));
	println(strRangeIndexOf("abcd", "a", 0, 2));
	println(strRangeIndexOf("abcd", "a", 0, 3));

	println(strRangeIndexOf("abcd", "a", 1, 0));
	println(strRangeIndexOf("abcd", "a", 1, 1));
	println(strRangeIndexOf("abcd", "a", 1, 2));
	println(strRangeIndexOf("abcd", "a", 1, 3));

	println(strRangeIndexOf("abcd", "b", 1, 0));
	println(strRangeIndexOf("abcd", "b", 1, 1));
	println(strRangeIndexOf("abcd", "b", 1, 2));
	println(strRangeIndexOf("abcd", "b", 1, 3));


	println(strRangeIndexOf("abcd", "ab", 0, 0));
	println(strRangeIndexOf("abcd", "ab", 0, 1));
	println(strRangeIndexOf("abcd", "ab", 0, 2));
	println(strRangeIndexOf("abcd", "ab", 0, 3));

	println(strRangeIndexOf("abcd", "ab", 1, 0));
	println(strRangeIndexOf("abcd", "ab", 1, 1));
	println(strRangeIndexOf("abcd", "ab", 1, 2));
	println(strRangeIndexOf("abcd", "ab", 1, 3));

	println(strRangeIndexOf("abcd", "bc", 1, 0));
	println(strRangeIndexOf("abcd", "bc", 1, 1));
	println(strRangeIndexOf("abcd", "bc", 1, 2));
	println(strRangeIndexOf("abcd", "bc", 1, 3));


	println(strRangeIndexOf("abcd", "abcde", 0, 0));
	println(strRangeIndexOf("abcd", "a", 0, 5));
	println(strRangeIndexOf("abcd", "b", 0, 5));
	println(strRangeIndexOf("abcd", "c", 0, 5));
	println(strRangeIndexOf("abcd", "d", 0, 5));

	println(strRangeIndexOf("abcd", "a", 1, 5));
	println(strRangeIndexOf("abcd", "b", 1, 5));
	println(strRangeIndexOf("abcd", "c", 1, 5));
	println(strRangeIndexOf("abcd", "d", 1, 5));

	println(strRangeIndexOf("abcd", "a", 2, 5));
	println(strRangeIndexOf("abcd", "b", 2, 5));
	println(strRangeIndexOf("abcd", "c", 2, 5));
	println(strRangeIndexOf("abcd", "d", 2, 5));

	println(strRangeIndexOf("abcd", "a", 0, 1));
	println(strRangeIndexOf("abcd", "b", 0, 1));
	println(strRangeIndexOf("abcd", "c", 0, 1));
	println(strRangeIndexOf("abcd", "d", 0, 1));

	println(strRangeIndexOf("abcd", "a", 1, 2));
	println(strRangeIndexOf("abcd", "b", 1, 2));
	println(strRangeIndexOf("abcd", "c", 1, 2));
	println(strRangeIndexOf("abcd", "d", 1, 2));

	println(strRangeIndexOf("abcd", "a", 2, 3));
	println(strRangeIndexOf("abcd", "b", 2, 3));
	println(strRangeIndexOf("abcd", "c", 2, 3));
	println(strRangeIndexOf("abcd", "d", 2, 3));

	println(strReplace("asd", "ab", "AB"));
	println(strReplace("aab", "ab", "AB"));
	println(strReplace("abcd  asdvasdf sddd abb  ab", "ab", "AB"));
	println(strReplace("abcd  asdvasdf sddd aabb  ab", "ab", "AB"));
	println(strReplace("abcd  asdvasdf sddd aabb  ab", "ab", "A"));
	println(strReplace("abcd  asdvasdf sddd aabb  ab", "ab", ""));
	println(strReplace("abcd  asdvasdf sddd abb  ab", "ab", "ABX"));
	println(strReplace("abcd  asdvasdf sddd aabb  ab", "ab", "ABX"));

	println(strSplit("abc", ""));
	println(strSplit(" afdalkgafdlngaflgafngafbh ewga lknkewakgnlngtlaksngalfd aerg;lml;gm    ", " "));
	println(strSplit(" afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm    ", "F"));
	println(strSplit(" afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm    ", "FF"));
	println(strSplit(" afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm    ", "FFF"));
	println(strSplit(" afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm    FFF", "FFF"));
	println(strSplit("FFF afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm   ", "FFF"));
	println(strSplit("FFF afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm    FFF", "FFF"));
	println(strSplit("FFF afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm    FFF", "FFF"));
	println(strSplit("FFF afdalkgaFFFFfdlngafFFFFFFFlgafngafbh ewga lknkewFFakgnlngtFFFFFlaksngalfd aerg;lml;gm    FFF", "FFF"));

	quit(0);
}