//import runtime;
//import string;
//import ds/array;
import ds/tree;
import math/math;

Str(a: string, b: [int]);

native refCounter: (x: ?) -> int = Native.refCounter;

//native println2 : io (flow) -> void = Native.println;
//native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
//native quit : io (code : int) -> void = Native.quit;

//native fold_xxx : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold_xxx;

test_fold() {
	x = "a";
	s1 = fold([1, 2, 3], Str("", []), \acc, i -> Str(acc.a + x, arrayPush(acc.b, i)));
	println2(s1);
	s2 = fold(["a", "b", "c"], "", \acc, s -> acc + " " + s1.a + " " + s);
	println2(s2);

	arr2 = ["1", "2", "3"];
	println(fold([1, 2, 3], 0, \acc, i -> acc + i));
	println(fold(arr2, "0", \acc, i -> acc + i));
	println(arr2);


	println(fold([1, 2, 3], 0, \acc, i -> acc + i));
	println(fold(arr2, "0", \acc, i -> acc + i));
	arr3 = ["1", "2", "3"];
	println(fold(arr3, "0", \acc, i -> acc + i));
	println(arr2);

	y = [1, 2, 3, 4];
	println(fold([0, 1, 2], 0, \acc, i -> acc + y[i] + y[i + 1]));


	t = pairs2tree([
		Pair(0, 1),
		Pair(1, 2)
	]);
	println(lookupTreeDef(t, 0, 1));
	println(fold([0, 1, 2], 0, \acc, i -> acc + lookupTreeDef(t, i, 1) + lookupTreeDef(t, i + 1, -1)));


	arr31 = [1, 2, 3];
	println(fold([0, 1, 2], 0, \acc, i -> acc + arr31[i]));

	arr4 = ["1", "2", "3"];
	println(fold(["0", "1", "2"], "0", \acc, i -> acc + arr4[s2i(i)]));
	println(arr4);

	arr5 = [1, 2, 3];
	println(fold([], 0, \acc, i -> acc + arr5[i]));

	arr6 = ["a_1", "a_2", "a_3"];
	println(fold(arr6, "", \acc, x1 ->
		fold(arr6, acc, \ac, x2 ->
			ac + "(" + x1 + ", " + x2 + "), " 
		) + "\n"
	));

	arr7 = ["1", "2", "3", "4", "5"];
	println(fold(arr7, "0", \acc, x1 ->
		fold(arr7, acc, \ac, x2 ->
			ac + x1 + x2
		)
	));

	arr8 = ["1", "2", "3", "4", "5"];
	println(fold(arr8, "0", \acc, x1 ->
		fold(arr8, acc, \ac, x2 ->
			ac + x1 + x2 + i2s(length(arr8))
		)
	));

	arr9 = ["13", "25", "3", "4", "5"];
	println(fold(["1", "2", "3"], "0", \acc, x1 ->
		fold(["3", "4", "5"], acc, \ac, x2 ->
			if (contains(arr9, x1 + x2)) ac + "!" else ac
		)
	));
	println(arr9);

	arr10 = ["13", "25", "3", "4", "5"];
	println(fold(["1", "2", "3"], "0", \acc, x1 ->
		fold([], acc, \ac, x2 ->
			if (contains(arr10, x1 + x2)) ac + "!" else ac
		)
	));
	println(arr10);
/*
	arr11 = ["13", "25", "3", "4", "5"];
	println(fold(["3", "4", "5"], "0", \acc, x1 ->
		if (contains(arr11, x1)) acc + "!" else acc
	));
	println(refCounter(arr11));
*/
}

test_foldi() {
	x = "a";
	s1 = foldi([1, 2, 3], Str("", []), \ind, acc, i -> Str(acc.a + x + i2s(ind), arrayPush(acc.b, i)));
	println2(s1);
	s2 = foldi(["a", "b", "c"], "", \i, acc, s -> acc + " " + s1.a + " " + s + i2s(i));
	println2(s2);

	arr2 = ["1", "2", "3"];
	println(foldi([1, 2, 3], 0, \j, acc, i -> acc + i * (j + 1)));
	println(foldi(arr2, "0", \j, acc, i -> acc + i + i2s(j)));
	println(arr2);


	println(foldi([1, 2, 3], 0, \j, acc, i -> acc + i + j));
	println(foldi(arr2, "0", \j, acc, i -> acc + i + i2s(j)));
	arr3 = ["1", "2", "3"];
	println(foldi(arr3, "0", \j, acc, i -> acc + i + i2s(j)));
	println(arr2);

	y = [1, 2, 3, 4];
	println(foldi([0, 1, 2], 0, \j, acc, i -> acc + y[i] + (j + 1) * y[i + 1]));


	t = pairs2tree([
		Pair(0, 1),
		Pair(1, 2)
	]);
	println(lookupTreeDef(t, 0, 1));
	println(foldi([0, 1, 2], 0, \j, acc, i -> acc + lookupTreeDef(t, i, 1) + lookupTreeDef(t, i + 1, -1) * (j + 1)));


	arr31 = [1, 2, 3];
	println(foldi([0, 1, 2], 0, \j, acc, i -> acc + arr31[i] * (j + 1)));

	arr4 = ["1", "2", "3"];
	println(foldi(["0", "1", "2"], "0", \j, acc, i -> acc + arr4[s2i(i)] + i2s(j)));
	println(arr4);

	arr5 = [1, 2, 3];
	println(foldi([], 0, \j, acc, i -> acc + arr5[i] * (j + 1)));

	arr6 = ["a_1", "a_2", "a_3"];
	println(foldi(arr6, "", \i, acc, x1 ->
		foldi(arr6, acc, \j, ac, x2 ->
			ac + "(" + x1 + ":" + i2s(i) + ", " + x2 + ":" + i2s(j) + "), " 
		) + "\n"
	));

	arr7 = ["1", "2", "3", "4", "5"];
	println(foldi(arr7, "0", \i, acc, x1 ->
		foldi(arr7, acc, \j, ac, x2 ->
			ac + x1 + x2 + i2s(i) + i2s(j)
		)
	));

	arr8 = ["1", "2", "3", "4", "5"];
	println(foldi(arr8, "0", \i, acc, x1 ->
		foldi(arr8, acc, \j, ac, x2 ->
			ac + x1 + x2 + i2s(length(arr8)) + i2s(i) + i2s(j)
		)
	));

	arr9 = ["13", "25", "3", "4", "5"];
	println(foldi(["1", "2", "3"], "0", \i, acc, x1 ->
		foldi(["3", "4", "5"], acc, \j, ac, x2 ->
			(if (contains(arr9, x1 + x2)) ac + "!" else ac) + i2s(i) + i2s(j)
		)
	));
	println(arr9);

	arr10 = ["13", "25", "3", "4", "5"];
	println(foldi(["1", "2", "3"], "0", \i, acc, x1 ->
		foldi([], acc, \j, ac, x2 ->
			(if (contains(arr10, x1 + x2)) ac + "!" else ac) + i2s(i) + i2s(j)
		)
	));
	println(arr10);

/*
	arr11 = ["13", "25", "3", "4", "5"];
	println(foldi(["3", "4", "5"], "0", \i, acc, x1 ->
		(if (contains(arr11, x1)) acc + "!" else acc) + i2s(i)
	));
	println(refCounter(arr11));
*/
}

test_map() {
	println(map([1, 2, 3], \i -> i * (i + 1)));
	println(mapi([1, 2, 3], \k, i -> i * (i + 1) * k));
	a = [1, 2, 3];
	println(map(a, \i -> i * (i + 1)));
	println(mapi(a, \k, i -> i * (i + 1) * k));
}

test_iter() {
	iter([1, 2, 3], \i -> println(i));
	iter(["1", "2", "3"], \i -> println(i));
	iter([1, 2, 3], \i -> println(i2s(i) + "!"));
	iter(["1", "2", "3"], \i -> println(i + "!"));
	s1 = " AA ";
	iter([1, 2, 3], \i -> println(i2s(i) + s1));
	iter(["1", "2", "3"], \i -> println(i + s1));
	arr1 = [1, 2, 3];
	iter(arr1, \i -> println(i2s(i)));
	iter(arr1, \i -> println(i2s(i * 2)));
	arr2 = ["1", "2", "3"];
	iter(arr2, \i -> println(i));
	iter(arr2, \i -> println(i + "!"));

	iteri([1, 2, 3], \i, j -> println(i + j));
	iteri(["1", "2", "3"], \i, j -> println(j + i2s(i)));
	iteri([1, 2, 3], \i, j -> println(i2s(j) + "!" + i2s(i)));
	iteri(["1", "2", "3"], \i, j -> println(j + "!" + i2s(i)));
	s2 = " AA ";
	iteri([1, 2, 3], \i, j -> println(i2s(i) + s2 + i2s(j)));
	iteri(["1", "2", "3"], \i, j -> println(i2s(i) + s2 + j));
	arr3 = [1, 2, 3];
	iteri(arr3, \i, j -> println(i + j));
	iteri(arr3, \i, j -> println(i * j));
	arr4 = ["1", "2", "3"];
	iteri(arr4, \i, j -> println(i2s(i) + j));
	iteri(arr4, \i, j -> println(i2s(i) + j + "!"));
}

test_closure() {
	a = 1;
	fn = \x -> x + a;
	x = \ -> println(map([1, 2, 3], fn));
	x();
}

Expr ::= Es, Int;
Es(ex: [Expr]);
Int(i: int);


rec_iter(e: Expr, fn: (int) -> void) {
	switch (e) {
		Es(es): {
			iter(es, \x -> rec_iter(x, fn));
			iter(es, \x -> rec_iter(x, fn));
		}
		Int(x): fn(x);
	}
}

test_rec_iter() {
	rec_iter(Int(5), println);
	rec_iter(Es([Int(5), Int(7)]), println);
	rec_iter(Es([Int(5), Es([Int(7), Int(9)])]), println);
}

test_exists_forall() {
	println(exists([1, 2, 3], \x -> x % 2 == 0));
	println(forall([1, 2, 3], \x -> x % 2 == 0));
	println(exists([1, 2, 3], \x -> x % 2 != 3));
	println(forall([1, 2, 3], \x -> x % 2 != 3));
	println(exists(["1", "2", "3"], \x -> x == "1"));
	println(exists(["1", "2", "3"], \x -> x == "3"));
	println(exists(["1", "2", "3"], \x -> x != "1"));
	println(exists(["1", "2", "3"], \x -> x != "3"));
	println(forall(["1", "2", "3"], \x -> x == "1"));
	println(forall(["1", "2", "3"], \x -> x == "3"));
	println(forall(["1", "2", "3"], \x -> x != "1"));
	println(forall(["1", "2", "3"], \x -> x != "3"));
	arr1 = [1, 2, 3];
	println(exists(arr1, \x -> x % 2 == 0));
	println(forall(arr1, \x -> x % 2 == 0));
	println(exists(arr1, \x -> x % 2 != 3));
	println(forall(arr1, \x -> x % 2 != 3));
	arr2 = ["1", "2", "3"];
	println(exists(arr2, \x -> x == "1"));
	println(exists(arr2, \x -> x == "3"));
	println(exists(arr2, \x -> x != "1"));
	println(exists(arr2, \x -> x != "3"));
	println(forall(arr2, \x -> x == "1"));
	println(forall(arr2, \x -> x == "3"));
	println(forall(arr2, \x -> x != "1"));
	println(forall(arr2, \x -> x != "3"));
}

test_find() {
	println(find([1, 2, 3], \x -> x % 2 == 0));
	println(find([1, 2, 3], \x -> x % 2 != 3));
	println(find(["1", "2", "3"], \x -> x == "1"));
	println(find(["1", "2", "3"], \x -> x == "3"));
	println(find(["1", "2", "3"], \x -> x != "1"));
	println(find(["1", "2", "3"], \x -> x != "3"));
	arr1 = [1, 2, 3];
	println(find(arr1, \x -> x % 2 == 0));
	println(find(arr1, \x -> x % 2 != 3));
	arr2 = ["1", "2", "3"];
	println(find(arr2, \x -> x == "1"));
	println(find(arr2, \x -> x == "3"));
	println(find(arr2, \x -> x != "1"));
	println(find(arr2, \x -> x != "3"));
}

main() {
	println(fold([1, 2, 3], 0, \acc, i -> acc + i));
	println(mapi([1, 2, 3], \k, i -> i * (i + 1) * k));

	test_fold();
	test_foldi();
	arr = [1, 2];
	println(foldi(arr, 0, \i, acc, x1 ->
		foldi(arr, acc, \j, ac, x2 ->
			ac + x1 + x2 + i + j * 3
		)
	));
	test_map();
	test_iter();
	test_closure();
	test_rec_iter();
	test_exists_forall();
	test_find();

	quit(0);
}
