//import ds/array;
//import runtime;
//import ds/tree;
import net/url_parameter;
import ds/tuples;
import dynamic;
import string;

TestStruct(s1: string, s2: string, s3: string);

deserializeListUntil(s : string) -> Pair<int, string> {
	head = Pair(0, "options");
	if ("A" != "") {
		Pair(head.first, head.second)
	} else {
		nextChar = getCharAt(s, 0);
		if (nextChar == "") {
			Pair(0, "");
		} else {
			Pair(0, "");
		}
	}
}

Un ::= A, B;
A(x: int);
B(y: string);

main() {
	structs = [
		TestStruct("a1", "b1", "c1"),
		TestStruct("a1", "b2", "c2"),
		TestStruct("a2", "b1", "c1"),
		TestStruct("a3", "b3", "c3"),
		TestStruct("a", "b", "c"),
	];
	tree1 = pairs2tree(mapi(structs, \i, s -> Pair(i, s)));
	tree2 = pairs2tree(mapi(structs, \i, s -> Pair(s, i)));
	println2(lookupTree(tree2, TestStruct("a2", "b1", "c1")));
	println2(lookupTree(tree1, 2));
	/*s0 = getUrlParameter("param");
	s = getCharAt(s0, 0);
	if (s == "p") {
		println("param was AAA");
	} else if (s == "a") {
		println("param is: a");
	} else {
		println("??..");
	}*/
	// deserializeListUntil(s : string, endChar : string, acc : Triple<List<flow>, int, string>) -> Triple<List<flow>, int, string> { 
	println(deserializeListUntil(""));
	println(
		cast(cast([1, 2, 3]: [int] -> flow): flow -> [flow])
	);
	
	println(isSameStructType(Some("1"), None()));
	println(isSameStructType(Some("1"), Some(2)));
	println(isSameStructType(None(), None()));
	quit(0);
}