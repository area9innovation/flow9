//import ds/array;
//import runtime;
//import ds/tree;
import net/url_parameter;
import ds/tuples;
import dynamic;
import string;
import compile_time;

TestStruct(s1: string, s2: string, s3: string);

deserializeListUntil(s : string) -> Pair<int, string> {
	head = Pair(0, "options");
	if ("A" != "") {
		Pair(head.first, head.second)
	} else {
		nextChar = getCharAt(s, 0);
		if (nextChar == "") {
			Pair(0, "");
		} else {
			Pair(0, "");
		}
	}
}

Un ::= A, B;
A(x: int);
B(y: string);

testCompare(sign: string, structs: [TestStruct], op: (TestStruct, TestStruct) -> bool) {
	iter(structs, \s1-> iter(structs, \s2 -> 
		println(toString(s1) + sign + toString(s2) + ": " + b2s(op(s1, s2)))
	));
}

main() {
	structs = compileTime([
		TestStruct("a1", "b1", "c1"),
		TestStruct("a1", "b2", "c2"),
		TestStruct("a2", "b1", "c1"),
		TestStruct("a3", "b3", "c3"),
		TestStruct("a", "b", "c"),
	]);
	testCompare(" == ", structs, \s1, s2 -> s1 == s2);
	testCompare(" != ", structs, \s1, s2 -> s1 != s2);
	testCompare(" <= ", structs, \s1, s2 -> s1 <= s2);
	testCompare(" >= ", structs, \s1, s2 -> s1 >= s2);
	testCompare(" < ", structs, \s1, s2 -> s1 < s2);
	testCompare(" > ", structs, \s1, s2 -> s1 >  s2);

	tree1 = compileTime(
		pprint("pairs2tree: ")
		(pairs2tree(mapi(
				pprint("structs (!!!): ")(structs),
				\i, s -> Pair(i, s)
			))
		)
	);
	tree2 = pairs2tree(mapi(compileTime(structs), \i, s -> Pair(s, i)));
	println2(compileTime(
		pprint("lookupTree(1): ")
		(lookupTree(
			compileTime(tree1), 
			compileTime(1)
		))
	));
	println2(compileTime(pprint("lookupTree(2): ")
		(compileTime(
			lookupTree(
				compileTime(tree2), 
				compileTime(TestStruct("a2", "b1", "c1"))
			)
		))
	));


	//s0 = getUrlParameter("param");
	//s = getCharAt(s0, 0);
	//if (s == "p") {
	//	println("param was AAA");
	//} else if (s == "a") {
	//	println("param is: a");
	//} else {
	//	println("??..");
	//}
	// deserializeListUntil(s : string, endChar : string, acc : Triple<List<flow>, int, string>) -> Triple<List<flow>, int, string> { 
	println(deserializeListUntil(""));
	println(
		cast(cast([1, 2, 3]: [int] -> flow): flow -> [flow])
	);
	
	println(isSameStructType(Some("1"), None()));
	println(isSameStructType(Some("1"), Some(2)));
	println(isSameStructType(None(), None()));
	quit(0);
}