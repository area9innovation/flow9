import string;
import ds/array;
import ds/tree;
import math/stringmath;
import net/url_parameter;
import compile_time;

main() {
	//N = 1000000;
	N = 10000;
	//N = 5000;
	println("must be quick (arrayPush): ");
	t1  = timestamp();
	arr1 = fold(enumFromTo(0, N), [], \acc, i -> arrayPush(acc, i2s(i + 1)));
	if (getUrlParameter("determ") == "") {
		println(i2s(length(arr1)) + " done in " + d2st((timestamp() - t1) / 1000.0, 2) + "s.");
	} else {
		println(i2s(length(arr1)));
	}

	println("must be quick (treeUpdateValue): ");
	t2  = timestamp();
	tree2 = fold(enumFromTo(0, N),
		makeTree1("a", []),
		\acc, i -> treeUpdateValue(acc, "a", \__, arr -> arrayPush(arr, i2s(i + 1)))
	);
	if (getUrlParameter("determ") == "") {
		println(i2s(length(lookupTreeDef(tree2, "a", [])))  + " done in " + d2st((timestamp() - t2) / 1000.0, 2) + "s.");
	} else {
		println(i2s(length(lookupTreeDef(tree2, "a", []))));
	}

	//M = 400000;
	M = 10000;
	//M = 4000;
	println("unfortunately is slow (treeUpdateValue): ");
	x = lookupTreeDef(tree2, "a", []);
	tree4 = fold(enumFromTo(0, M),
		tree2,
		\acc, i -> treeUpdateValue(acc, "a", \__, arr -> arrayPush(arr, i2s(i + 1)))
	);
	if (getUrlParameter("determ") == "") {
		println(
			i2s(length(x)) + " to - " +
			i2s(length(lookupTreeDef(tree4, "a", [])))
			+ " done in " + d2st((timestamp() - t2) / 1000.0, 2) + "s."
		);
	} else {
		println(
			i2s(length(x)) + " to - " +
			i2s(length(lookupTreeDef(tree4, "a", [])))
		);
	}

	quit(0);
}
