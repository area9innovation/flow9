//import ds/array;
//import runtime;

native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native toString : io (v : ?) -> string = Native.toString;

native replace : ([?], int, ?) -> [?] = Native.replace;
native subrange : (a : [?], index : int, length : int) -> [?] = Native.subrange;
native length : ([?]) -> int = Native.length;
native concat : ([?], [?]) -> [?] = Native.concat;
native map : ([?], (?) -> ??) -> [??] = Native.map;
native mapi : ([?], (int, ?) -> ??) -> [??] = Native.mapi;
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;
native enumFromTo : (start : int, end : int) -> [int] = Native.enumFromTo;
native iter : ([?], (?)->void) -> void = Native.iter;
native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;
native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;
//native filtermapi : (a : [?], test : (int, ?) -> Maybe<??>) -> [??] = Native.filtermapi;

native i2s : (int) -> string = Native.i2s;
native d2s : (double) -> string = Native.d2s;
native strlen : (string) -> int = Native.strlen;
native strIndexOf : (str : string, substr : string) -> int = Native.strIndexOf;
native substring : (s : string, start : int, length : int) -> string = Native.substring;
native toLowerCase : (string) -> string = Native.toLowerCase;
native toUpperCase : (string) -> string = Native.toUpperCase;
native getCharAt : (string, int) -> string = Native.getCharAt;
native string2utf8 : (s : string) -> [int] = Native.string2utf8;
native s2a : (string) -> [int] = Native.s2a;
native fromCharCode : (charCode: int) -> string = Native.fromCharCode;
native getCharCodeAt : (s : string, i : int) -> int = Native.getCharCodeAt;

U ::= S1, S2, S3;
S3(s1: string, s2: string, u3: U);
S2(s1: string, s2: string);
S1(s: string);

test_equality(a: ?, b: ?) -> void {
	println2(toString(a) + " == " + toString(b) + ": " + if (a == b) "1" else "0");
	println2(toString(a) + " != " + toString(b) + ": " + if (a != b) "1" else "0");
	println2(toString(a) + " <  " + toString(b) + ": " + if (a < b) "1" else "0");
	println2(toString(a) + " <= " + toString(b) + ": " + if (a <= b) "1" else "0");
	println2(toString(a) + " >  " + toString(b) + ": " + if (a > b) "1" else "0");
	println2(toString(a) + " >= " + toString(b) + ": " + if (a >= b) "1" else "0");
	println2("");
}

// GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GRange(48, 57), GString("_"))))
/*
GChoice(GRange(97, 102), GChoice(GRange(65, 70), GRange(48, 57)))
 == 
GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GRange(48, 57), GString("_")))): true
'a'-'f' | 'A'-'F' | '0'-'9'
 == 
'a'-'z' | 'A'-'Z' | '0'-'9' | "_": true
*/

GTerm ::= GChoice, GString, GRange;
	// Ordered choice
	GChoice(left : GTerm, right : GTerm);
	GString(text : string);
	GRange(lower : int, upper : int);

main() {
	test_equality(1, 1);
	test_equality(1, 2);
	test_equality([1], [1]);
	test_equality([1], [2]);
	test_equality([1, 1], [1, 2]);

//	DO NOT PASS!!! -  ???...

	test_equality(1.2, 1.2);
	test_equality(1.2, 1.3);
	test_equality([1.2], [1.2]);
	test_equality([1.2], [1.3]);
	test_equality([1.1, 1.1], [1.1, 1.2]);

	test_equality("aaa", "aa");
	test_equality("aa", "aaa");

	test_equality(S2("a", "b"), S2("a", "b1"));
	test_equality(S2("a", "b"), S2("a", "b"));
	test_equality(S2("a1", "b"), S2("a", "b"));
	test_equality(S2("", ""), S2("", ""));
	
	test_equality(S3("a", "b", S1("")), S3("a", "b", S1("A")));
	test_equality(S3("a", "b", S1("")), S3("a", "b", S1("")));
	test_equality(
		GChoice(GRange(97, 102), GChoice(GRange(65, 70), GRange(48, 57))),
		GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GRange(48, 57), GString("_"))))
	);
	test_equality(
		GChoice(GRange(98, 102), GChoice(GRange(65, 70), GRange(48, 57))),
		GChoice(GRange(97, 122), GChoice(GRange(65, 90), GChoice(GRange(48, 57), GString("_"))))
	);
	quit(0);
}