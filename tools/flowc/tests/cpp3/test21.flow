import lingo/pegcode/driver;

ArExpr ::= ArSum, ArMult, ArInt;
		ArSum(lhs : ArExpr, rhs : ArExpr);
		ArMult(lhs : ArExpr, rhs : ArExpr);
		ArInt(val : int);
		

ar2s(e : ArExpr) -> string {
	switch (e) {
		ArSum(lhs, rhs): "(" + ar2s(lhs) + " + " + ar2s(rhs) + ")";
		ArMult(lhs, rhs): "(" + ar2s(lhs) + " * " + ar2s(rhs) + ")";
		ArInt(val): i2s(val);
	}
}

ar2i(e : ArExpr) -> int {
	switch (e) {
		ArSum(lhs, rhs): ar2i(lhs) + ar2i(rhs);
		ArMult(lhs, rhs): ar2i(lhs) * ar2i(rhs);
		ArInt(val): val;
	}
}

s2ar(str : string) -> ArExpr {
	println("default peg actions: " + strGlue(getTreeKeys(defaultPegActions.t), ", "));
	compiled_grammar = compilePegGrammar(ar_grammar);
	println("compiled_grammar = compilePegGrammar(e_gr); - done");
	semantic_actions = SemanticActions(setTree(defaultPegActions.t, "createArInt", \s -> ArInt(s2i(s[0]))));
	println("semantic_actions - done");
	parsic(
		compiled_grammar, 
		str,
		semantic_actions
	);
}

main() {
	expr = ArSum(ArInt(3), ArMult(ArInt(2), ArInt(5)));
	expr_str = ar2s(expr);
	println("expr: " + expr_str);
	ast = s2ar(expr_str);
	println("expr': " + ar2s(ast));
	println("eval': " + i2s(ar2i(ast)));
	quit(0);
}

ar_grammar = <<
S = sum | mul | int ;
sum = "(" ws S:l ws "+" ws S:r ws ")" { ArSum(:l, :r)};
mul = "(" ws S:l ws "*" ws S:r ws ")" { ArMult(:l, :r)};
int = digit+ $s { ArInt(s2i($s)) };
digit = '0'-'9';
ws = (' ' | '\t' | '\n' | '\r')*;
>>

