import ds/tree;
import string;
import math/stringmath;
import net/url_parameter;
//import profile_time;

fn(i: int) -> int {
	(5 + i * 7  + 3 * i * i - 2 * i * i * i) % 100000;
}

gn(i: int) -> int {
	(7 - i * 2  + 5 * i * i +  i * i * i) % 1000000;
}

main() {
	start0 = timestamp();

	t0 = fold(enumFromTo(0, 100), makeTree(), \acc, i -> {
		setTree(acc, i2s(gn(i)), i2s(fn(i)));
	});
	println("sizeTree(t0): " + i2s(sizeTree(t0)));
	t1 = fold(enumFromTo(0, 100), t0, \acc, i -> {
		setTree(acc, i2s(gn(i)), i2s(fn(i)));
	});
	println("sizeTree(t1): " + i2s(sizeTree(t1)));

	//N = 2000;
	//N = 100000;
	//N = 200000;
	//N = 2000000;
	N = 4000000;

	//tm = profileTime();

	inds1 = enumFromTo(0, N);
	//tm("inds1 = enumFromTo(0, N)");

	start1 = timestamp();
	t = fold(inds1, makeTree(), \acc, i ->
		setTree(acc, gn(i), fn(i))
	);
	total = timestamp() - start1;
	if (getUrlParameter("determ") == "") {
		println("time setTree: " + d2st(total / 1000.0, 2) + " s.\n");
	}
	//tm("fold(inds1, makeTree(), \\acc, i -> setTree(acc, gn(i), fn(i)))");
	println("s0 = " + i2s(sizeTree(t)));

	s1 = foldTree(t, 0, \__, n, acc -> (acc + n) % 100000);
	//tm("foldTree(t, 0, \\__, n, acc -> (acc + n) % 100000)");

	println("s1 = " + i2s(s1));

	inds2 = filter(inds1, \i -> (i % 3 == 0) || (i % 3 == 1));
	//tm("filter(inds1, \\i -> (i % 3 == 0) || (i % 3 == 1))");

	start2 = timestamp();
	s2 = fold(inds2, 0, \acc, k -> (acc + lookupTreeDef(t, k, 0) + lookupTreeDef(t, -k, 0)) % 100000);
	if (getUrlParameter("determ") == "") {
		println("time lookupTree: " + d2st((timestamp() - start2) / 1000.0, 2) + " s.");
	}
	//tm("fold(map(inds2, i2s), 0, \\acc, k -> (acc + lookupTreeDef(t, k, 0) + lookupTreeDef(t, -k, 0)) % 100000)");

	println("s2 = " + i2s(s2));

	if (getUrlParameter("determ") == "") {
		println("time total: " + d2st((timestamp() - start0) / 1000.0, 2) + " s.");
	}

	quit(0);
}
