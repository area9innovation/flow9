import string;
import lingo/compiler/syntaxtree_types;

parse_exp(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [], noExpectError);
	r = do_parse_exp_exp(acc);
	Pair(r, acc.expect);
}
do_parse_exp_exp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_exp_sum(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_exp_mul(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_exp_int(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_exp, -1, i, i, [])
			}

		}

	}

}

do_parse_exp_sum(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_exp_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_exp_exp(acc);
			if (c2.choice != -1) {
				c3 = do_parse_exp_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_exp_ws(acc);
						if (c5.choice != -1) {
							c6 = do_parse_exp_exp(acc);
							if (c6.choice != -1) {
								c7 = do_parse_exp_ws(acc);
								if (c7.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
										acc.i ::= acc.i + 1;
										SyntaxTree(st_sum, 0, i, acc.i, [[c1], [c2], [c3], [c5], [c6], [c7]]);
									} else {
										// "Expected ')'"
										updateExpectError(acc, "", ")", i);
										failSyntaxTree;
									}
								} else c7
							} else c6
						} else c5
					} else {
						// "Expected '+'"
						updateExpectError(acc, "", "+", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_exp_mul(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_exp_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_exp_exp(acc);
			if (c2.choice != -1) {
				c3 = do_parse_exp_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 42 /* * */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_exp_ws(acc);
						if (c5.choice != -1) {
							c6 = do_parse_exp_exp(acc);
							if (c6.choice != -1) {
								c7 = do_parse_exp_ws(acc);
								if (c7.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
										acc.i ::= acc.i + 1;
										SyntaxTree(st_mul, 0, i, acc.i, [[c1], [c2], [c3], [c5], [c6], [c7]]);
									} else {
										// "Expected ')'"
										updateExpectError(acc, "", ")", i);
										failSyntaxTree;
									}
								} else c7
							} else c6
						} else c5
					} else {
						// "Expected '*'"
						updateExpectError(acc, "", "*", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_exp_int(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_exp_digit);
	if (length(c0) >= 1) {
		SyntaxTree(st_int, 0, i, acc.i, [c0]);
	} else {
		// "Expected at least one digit"
		updateExpectError(acc, "", "digit", i);
		failSyntaxTree;
	}
}

do_parse_exp_digit(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_digit, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_exp_ws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_exp_ws__choice6);
	SyntaxTree(st_ws, 0, i, acc.i, [c0]);
}

do_parse_exp_ws__choice6(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_ws__choice6, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_ws__choice6, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_ws__choice6, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 13 /* 
 */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_ws__choice6, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_ws__choice6, -1, i, i, [])
				}

			}

		}

	}

}

st_exp = 0;
st_Expected_exp = 1;
st_DidNotExpectsource_exp = 2;
st_sum = 3;
st_Expected_sum = 4;
st_DidNotExpectsource_sum = 5;
st_mul = 6;
st_Expected_mul = 7;
st_DidNotExpectsource_mul = 8;
st_int = 9;
st_Expected_int = 10;
st_DidNotExpectsource_int = 11;
st_digit = 12;
st_Expected_digit = 13;
st_DidNotExpectsource_digit = 14;
st_ws = 15;
st_Expected_ws = 16;
st_DidNotExpectsource_ws = 17;
st_ws__choice6 = 18;
st_Expected_ws__choice6 = 19;
st_DidNotExpectsource_ws__choice6 = 20;

main() {
	e = parse_exp("(1 + (2 * 3))");
	println(e);
	quit(0);
}
