native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native toString : io (v : ?) -> string = Native.toString;

test1_A(a: int, b: string, c: [int]);
test1_B(x: [int]);

test1() {
	zz = test1_B([1, 2, 3]);
	println2("A: " + toString(zz.x));
	println2("A: " + toString(cast(zz: test1_B -> flow).x));
	println2("1: '" + toString(1) + "'");
	println2("true: '" + toString(true) + "'");
	println2("2.78: '" + toString(2.78) + "'");
	println2("1.1 == 1.0: " + toString(cast(1.1: double -> flow) == cast(1.0: double -> flow)));
	println2("1.1: " + toString(1.1));
	println2("1.1 * 10.0: " + toString(1.1 * 10.0));
	println2("\"AAA\": '" + toString("AAA") + "'");
	println2("flow(\"BBB\"): '" + toString(cast("BBB": string -> flow)) + "'");
	println2(toString(cast("BBB": string -> flow)));
	println2(cast("CCC": string -> flow));
	println2("AAAA!!!!!!!!!!!!!!!---------------------");
	z = test1_A(2, "XXX00", [5, 6, 7]);
	println2("z='" + toString(z) + "'");
	println2("z.b='" + toString(z.b) + "'");
	println2("z.c='" + toString(z.c) + "'");
	println2("[1, 2, 3]: '" + toString([1, 2, 3]) + "'");
	println2("1=" + toString(1));
	println2("cast(42.0: double -> string): " + cast(42.0: double -> string));
	println2("toString(42.0): " + toString(42.0));
	println2([] == []);
	println2("[1, 2, 3] == [1, 2, 3]: " + toString([1, 2, 3] == [1, 2, 3]));
	println2("[1, 2, 3] != [1, 2, 3]: " + toString([1, 2, 3] != [1, 2, 3]));
	println2("test1_B([1, 2, 3]) == test1_B([1, 2, 3]): " + toString(test1_B([1, 2, 3]) == test1_B([1, 2, 3])));
	println2("test1_B([1, 2, 3]) != test1_B([1, 2, 3]): " + toString(test1_B([1, 2, 3]) != test1_B([1, 2, 3])));
	println2("test1_B([1, 2, 3]) < test1_B([3, 4, 5]): " + toString(test1_B([1, 2, 3]) < test1_B([3, 4, 5])));
	println2("END.");
}

main() {
	test1();
	quit(0);
}
