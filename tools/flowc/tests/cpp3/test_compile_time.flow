import text/binary;
import math/stringmath;
import ds/tree;
import compile_time;
import net/url_parameter;

euler1(limit : int) -> int {
    foldRange(1, limit - 1, 0, \acc, i -> {
        if (i % 3 == 0 || i % 5 == 0) {
            acc + i;
        } else acc;
    });
}

euler2(a : double, b : double, sum : double) -> double {
    fib = a + b;
    nsum = if (fib % 2.0 == 0.0) sum + fib else sum;
    if (fib < 4000000.0) {
        euler2(b, fib, nsum)
    } else {
        nsum;
    }
}

biggestFactor(factor : double, limit : double, biggest : double, n : double) -> double {
	if (factor < limit) {
		if (n % factor == 0.0) {
			biggestFactor(factor, limit, factor, n / factor);
		} else {
			biggestFactor(if (factor == 2.0) 3.0 else factor + 2.0, limit, biggest, n)
		}
	} else {
		biggest;
	}
}

findBiggestDivisor(n : double) -> double {
	biggestFactor(2.0, sqrt(n), 1.0, n);
}

isPalindromic(s : string) -> bool {
	l = strlen(s);
    l <= 1 || {
		first = strLeft(s, 1);
		last = strRight(s, l - 1);
        first == last && isPalindromic(strsubsmart(s, 1, -1));
    }
}

euler4() -> int {
    foldRange(100, 999, 0, \acc, a -> {
        foldRange(100, 999, acc, \acc2, b -> {
        	p = a * b;
	        if (p < acc2 || !isPalindromic(i2s(p))) acc2 else p;
        })
    });
}

euler5(limit : int) -> int {
    foldRange(1, limit, 1, \acc, n -> {
        if (acc % n == 0) {
            // We already are a factor
            acc;
        } else {
            // We are not a factor. Figure out what
            // factors are missing, and add those
            required = n / gcd(acc, n);
            acc * required;
        }
    })
}

euler6(limit : int) -> double {
    sumsquares = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n * n));
    natsum = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n));
	natsum * natsum - sumsquares
}

showTime(fn: () -> string) -> void {
	if (getUrlParameter("determ") == "") {
		t = timestamp();
		println(fn() + " in " + d2st((timestamp() - t) / 1000.0, 6) + ".s");
	} else {
		println(fn());
	}
}

mutRecFn1(a: int, b: int) -> string {
	if (a == 0) "A" else {
		mutRecFn2(a, b - 1);
	}
}

mutRecFn2(a: int, b: int) -> string {
	if (b == 0) "B" else {
		mutRecFn1(a - 1, b);
	}
}


test1(M: int) -> double {
	foldTree(
		pairs2tree(generate(0, M, \i -> Pair(i + 3, i * 2))),
		0.0, \key, val, acc -> acc + i2d(key + val)
	);
}

fn(i: int) -> int {
	(5 + i * 7  + 3 * i * i - 2 * i * i * i) % 100000;
}

gn(i: int) -> int {
	(7 - i * 2  + 5 * i * i +  i * i * i) % 1000000;
}

fromBinaryToFlow(v : string) -> flow {
	deserializeBinary(v, None())
}

main() {
	m = Some([Some("bla"), None(), Some("")]);
	mb = toBinary(m);
	println(mb);
	println("Struct " + toString(m) + ":");

	x0 = "12.4";
	x1 = compileTime(toBinary(x0));
	x3 = compileTime({v = toBinary(x0); println("toBinary(x0): ''  " + v + " ''"); v});
	println("x3 = '' " + x3 + " '' ");

	xb = compileTime(pprint("toBinary(x): ")(toBinary(x0)));
	//println("String " + x0 + ":");
	//println(s2a(xb));
	xr = compileTime(pprint("deserializeBinary(xb, None()): ")(deserializeBinary(xb, None())));
	xr1 = compileTime(pprint("fromBinaryToFlow(xb): ")(fromBinaryToFlow(xb)));
	println("x.type: " + runtimeValueType(compileTime(pprint("xr: ")(xr))));

	enclosed_callback = \x -> {
		z = pprint("z = x * 2: ")(pprint("x: ")(x) * 2);
		\ -> pprint("z + 1: ")(pprint("z: ")(z) + 1)
	};
	println("(CT/RT) enclosed_callback(2)(): " +
		i2s(compileTime(pprint("(CT) enclosed_callback(2)(): ")(enclosed_callback(2)())))
	);

	println("(CT/RT) mutRecFn1(5, 8): " + 
		compileTime(pprint("(CT) mutRecFn1(5, 8): ")(mutRecFn1(5, 8)))
	);
	println("(CT/RT) mutRecFn1(5, 3): " +
		compileTime(pprint("(CT) mutRecFn1(5, 3): ")(mutRecFn1(5, 3)))
	);
	println("(CT/RT) mutRecFn2(5, 8): " +
		compileTime(pprint("(CT) mutRecFn2(5, 8): ")(mutRecFn2(5, 8)))
	);
	println("(CT/RT) mutRecFn2(5, 3): " +
		compileTime(pprint("(CT) mutRecFn2(5, 3): ")(mutRecFn2(5, 3)))
	);

	N = 10;
	arr1 = compileTime(pprint("arr1 (CT " + i2s(N) + "): ")(enumFromTo(0, N)));
	println("arr1 (CT/RT " + i2s (N) + ")" + toString(arr1));
	compileTime(pprint("t0: ")(fold(arr1, makeTree(), \acc, i ->
		setTree(acc, i2s(gn(i)), i2s(fn(i)))
	)));
	t0 = compileTime(pprint("t0: ")(fold(arr1, makeTree(), \acc, i ->
		setTree(acc, i2s(gn(i)), i2s(fn(i)))
	)));
	start0 = timestamp();
	t1 = compileTime(pprint("t0: ")(fold(enumFromTo(0, N), makeTree(), \acc, i ->
		setTree(acc, i2s(gn(i)), i2s(fn(i)))
	)));

	println("(CT/RT) enumFromTo(1, 5): " +
		compileTime(toString(pprint("(CT) enumFromTo(1, 5): ")(enumFromTo(1, 5))))
	);
	println("(CT/RT) generate(0, 5, \\i -> i + 1)): " +
		compileTime(toString(pprint("(CT) generate(0, 5, \\i -> i + 1)): ")(generate(0, 5, \i -> i + 1))))
	);
	println("(CT/RT) generate(0, 5, \\i -> Pair(i, i)): " +
		compileTime(toString(pprint("(CT) generate(0, 5, \\i -> Pair(i, i)): ")(generate(0, 5, \i -> Pair(i, i)))))
	);
	println("(CT/RT) generate(0, 5, \\i -> Pair(i + 3, i * 2)): " +
		compileTime(toString(pprint("(CT) generate(0, 5, \\i -> Pair(i + 3, i * 2)): ")(generate(0, 5, \i -> Pair(i + 3, i * 2)))))
	);

	println("(CT/RT) tree (1): " +
		compileTime(toString(pprint("(CT) tree (1): ")(fold(enumFromTo(0, N), makeTree(), \acc, i ->
			setTree(acc, i2s(gn(i)), i2s(fn(i)))
		)
	))));
	tree = compileTime(pprint("(CT) tree (2): ")(fold(enumFromTo(0, N), makeTree(), \acc, i ->
		setTree(acc, i2s(gn(i)), i2s(fn(i)))
	)));
	println("(CT/RT) tree (2): " + compileTime(toString(pprint("(CT) tree (3): ")(tree))));

	M = 362893;
	showTime(\ -> "(CT/RT) A big num(1): " +
		compileTime(pprint("(CT) d2s(test1(" + i2s(M) + ")) = ")(d2s(test1(M))))
	);
	showTime(\ -> "(CT/RT) A big num(2): " +
		compileTime(pprint("(CT) d2s(foldTree(
			pairs2tree(generate(0, 362893, \\i -> Pair(i + 3, i * 2))),
			0.0, \\key, val, acc -> acc + i2d(key + val)
		)) = \n")(d2s(foldTree(
				pairs2tree(
					generate(0, M, \i -> Pair(i + 3, i * 2))
				),
			0.0, \key, val, acc -> acc + i2d(key + val)
		))))
	);
	showTime(\ -> "(CT/RT) A big num(3): " +
		compileTime(pprint("(CT) d2s(foldTree(
			pairs2tree(generate(0, 362893, \\i -> Pair(i + 3, i * 2))),
			0.0, \\key, val, acc -> acc + i2d(key + val)
		)) = \n")(d2s(foldTree(
			pairs2tree(generate(0, M, \i -> Pair(i + 3, i * 2))),
			0.0, \key, val, acc -> acc + i2d(key + val)
		))))
	);

	//euler_1 = pprint(\ -> "(CT) euler1(1000)(must be 233168)", \ -> i2s(euler1(1000)));

	showTime(\ -> "(CT/RT) euler1(1000)(must be 233168): " +
		i2s(compileTime(pprint(
			"(CT) euler1(1000)(must be 233168): ")(
			euler1(1000)
		)))
	); // Correct: 233168
	showTime(\ -> "(CT/RT) euler2(0.0, 1.0, 0.0)(must be 4613732) = " +
		compileTime(pprint("(CT) euler2(0.0, 1.0, 0.0)(must be 4613732): ")(d2s(euler2(0.0, 1.0, 0.0))))
	); // Correct: 461373
	showTime(\ -> "(CT/RT) findBiggestDivisor(600851475143.0))(must be 6857) = " +
		compileTime(pprint(
			"(CT) findBiggestDivisor(600851475143.0))(must be 6857): ")(
			d2s(findBiggestDivisor(600851475143.0))
		))
	); // Correct: 6857
	showTime(\ -> "(CT/RT) euler4(must be 906609) = " +
		compileTime(pprint(
			"(CT) euler4(must be 906609): ")(
			i2s(euler4())
		))
	); // 906609
	showTime(\ -> "(CT/RT) euler5(must be 232792560) = " +
		compileTime(pprint("(CT) euler5(must be 232792560): ")(i2s(euler5(20))))
	); // Correct: 232792560
	showTime(\ -> "(CT/RT) euler6(must be 25164150) = " +
		compileTime(pprint("(CT) euler6(must be 25164150): ")(d2s(euler6(100))))
	); // Correct: 25164150

	showTime(\ -> "(RT) euler1: " + i2s(euler1(1000)) + " (must be 233168)"); // Correct: 233168
	showTime(\ -> "(RT) euler2: " + d2s(euler2(0.0, 1.0, 0.0))+ " (must be 4613732)"); // Correct: 461373
	showTime(\ -> "(RT) euler3: " + d2s(findBiggestDivisor(600851475143.0)) + " (must be 6857)"); // Correct: 6857
	showTime(\ -> "(RT) euler4: " + i2s(euler4()) + " (must be 906609)"); // 906609
	showTime(\ -> "(RT) euler5: " + i2s(euler5(20)) + " (must be 232792560)"); // Correct: 232792560
	showTime(\ -> "(RT) euler6: " + d2s(euler6(100)) + " (must be 25164150)"); // Correct: 25164150

	obj_arr = [1, 2, 3];
	obj_arr1 = obj_arr;
	println("(CT/RT) isSameObj(obj_arr, obj_arr1): " +
		b2s(compileTime(pprint("(CT) isSameObj(obj_arr, obj_arr1): ")(isSameObj(obj_arr, obj_arr1))))
	);
	println("(RT) isSameObj([1, 2, 3], [1, 2, 3]): " + b2s(isSameObj(obj_arr, obj_arr1)));

	// This line must emit error, since x in not known at compilation
	//fn = \x -> compileTime(x + 1);
	quit(0);
}