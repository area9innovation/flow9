native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native toString : io (v : ?) -> string = Native.toString;

native bitNot : (int) -> int = Native.bitNot;
native bitAnd : (int, int) -> int = Native.bitAnd;
native bitOr : (int, int) -> int = Native.bitOr;
native bitXor : (int, int) -> int = Native.bitXor;
native bitShl : (a : int, n : int) -> int = Native.bitShl;
native bitUshr : (a : int, n : int) -> int = Native.bitUshr;

native replace : ([?], int, ?) -> [?] = Native.replace;
native subrange : (a : [?], index : int, length : int) -> [?] = Native.subrange;
native length : ([?]) -> int = Native.length;
native concat : ([?], [?]) -> [?] = Native.concat;
native map : ([?], (?) -> ??) -> [??] = Native.map;
native mapi : ([?], (int, ?) -> ??) -> [??] = Native.mapi;
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;
native enumFromTo : (start : int, end : int) -> [int] = Native.enumFromTo;
native iter : ([?], (?)->void) -> void = Native.iter;
native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;
native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;
//native filtermapi : (a : [?], test : (int, ?) -> Maybe<??>) -> [??] = Native.filtermapi;

native i2s : (int) -> string = Native.i2s;
native d2s : (double) -> string = Native.d2s;
native strlen : (string) -> int = Native.strlen;
native strIndexOf : (str : string, substr : string) -> int = Native.strIndexOf;
native substring : (s : string, start : int, length : int) -> string = Native.substring;
native toLowerCase : (string) -> string = Native.toLowerCase;
native toUpperCase : (string) -> string = Native.toUpperCase;
native getCharAt : (string, int) -> string = Native.getCharAt;
native string2utf8 : (s : string) -> [int] = Native.string2utf8;
native s2a : (string) -> [int] = Native.s2a;
native fromCharCode : (charCode: int) -> string = Native.fromCharCode;
native getCharCodeAt : (s : string, i : int) -> int = Native.getCharCodeAt;


IntTree1 ::= IntTreeNode1, IntTreeValue;
	IntTreeNode1(ch : ref IntTree1);
	IntTreeValue();

addOrUpdateIntTree2(tree : ref IntTree1) -> IntTree1 {
	switch (^tree) {
		IntTreeNode1(ch1): {
			^tree;
		}
		IntTreeValue(): {
			addOrUpdateIntTree2(ref IntTreeNode1(ref IntTreeValue()));
		}
	}
}

main() {
	t = ref IntTreeValue();
	cb = \-> t := addOrUpdateIntTree2(t);
	cb();
	cb();
	println2(t);
	quit(0);
}
