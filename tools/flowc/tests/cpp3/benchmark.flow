import ds/tree;
import string;

fn(i: int) -> int {
	(5 + i * 7  + 3 * i * i - 2 * i * i * i) % 100000;
}

main() {
	//N = 100000;
	//N = 200000;
	N = 2000000;
	inds1 = enumFromTo(0, N);
	t = fold(inds1, makeTree(), \acc, i -> setTree(acc, i2s(i), fn(i)));
	s1 = foldTree(t, 0, \__, n, acc -> (acc + n) % 100000);
	println("s1 = " + i2s(s1));

	inds2 = filter(inds1, \i -> (i % 3 == 0) || (i % 3 == 1));
	s2 = fold(map(inds2, i2s), 0, \acc, k ->
		(acc + lookupTreeDef(t, k, 0) + lookupTreeDef(t, k + "_", 0)) % 100000
	);
	println("s2 = " + i2s(s2));
	quit(0);
}
