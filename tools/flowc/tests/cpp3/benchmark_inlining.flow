import math/stringmath;
import net/url_parameter;

bench_fold(n: int, m: int) {
	t0 = timestamp();
	arr = map(enumFromTo(0, n), i2d);
	x = fold(enumFromTo(0, m), 0.0, \acc, x ->
		fold(arr, acc, \ac, y -> ac + i2d(x) + y)
	);
	t1 = timestamp() - t0;
	println("fold timing: " + d2st(t1 / 1000.0, 2) + " s., ret: " + d2s(x));
}

bench_map(n: int, m: int) {
	arr = map(enumFromTo(0, n), i2d);
	t0 = timestamp();
	a_x = map(enumFromTo(0, m), \x ->
		map(arr, \y -> i2d(x) + y)
	);
	t1 = timestamp() - t0;
	x = fold(a_x, 0.0, \acc, x -> acc + i2d(length(x)));
	println("map timing: " + d2st(t1 / 1000.0, 2) + " s., ret: " + d2s(x));
}

bench_iter(n: int, m: int) {
	t0 = timestamp();
	arr = map(enumFromTo(0, n), i2d);
	z = ref 0.0;
	iter(enumFromTo(0, m), \x ->
		iter(arr, \y -> z := ^z + y + i2d(x))
	);
	t1 = timestamp() - t0;
	println("iter timing: " + d2st(t1 / 1000.0, 2) + " s., ret: " + d2s(^z));
}

bench_suite(n: int, m: int) {
	println("Benching: n = " + i2s(n) + ", m = " + i2s(m));
	bench_fold(n, m);
	bench_map(n, m);
	bench_iter(n, m);
}

main() {
	t = timestamp();
	k_param = getUrlParameter("n");
	K = if (k_param == "") 3000 else s2i(k_param);
	bench_suite(K * 1, K * 100);
	bench_suite(K * 10, K * 10);
	bench_suite(K * 100, K * 1);
	println("benchmarking done in: " + d2st((timestamp() - t) / 1000.0, 2) + " s.");
	quit(0);
}
