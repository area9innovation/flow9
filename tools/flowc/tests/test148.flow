Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

Promise : (
	f : (/* fulfill */ (?) -> void, /* reject */(??) -> void) -> void
);

native replace : ([?], int, ?) -> [?] = Native.replace;

startParallelXP(
	promises : [Promise<?, ??>], started : ref int, finished : ref int,
	resultsR : ref [Maybe<?>], errorR : ref Maybe<??>,
	fulfill : ([?]) -> void, reject : (??) -> void
) {
	i = ^started;
	started := ^started + 1;
	promise = promises[i];
	doneP(promise,
		\result : ? -> {
			resultsR := replace(^resultsR, i, Some(result));
			onDoneParallerXP(promises, started, finished, resultsR, errorR, fulfill, reject);
		},
		\error : ?? -> {
			errorR := Some(error);
			onDoneParallerXP(promises, started, finished, resultsR, errorR, fulfill, reject);
		}
	)
}

doneP(promise : Promise<?, ??>, fulfill : (?) -> void, reject : (??) -> void) -> void {

}

onDoneParallerXP(
	promises : [Promise<?, ??>], started : ref int, finished : ref int,
	resultsR : ref [Maybe<?>], errorR : ref Maybe<??>,
	fulfill : ([?]) -> void, reject : (??) -> void
) {

}