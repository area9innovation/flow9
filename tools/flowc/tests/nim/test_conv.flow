import string_utils;

fn1(x: string, y: string, descr: string) -> void {
	x1 = "\"" + x + "\"";
	println(x + ": " + y + " " + if (x1 == y) "ok" else "NOX - " + descr);
}

fn(x: string) -> void {
	fn1(x, toStringFormatted(x), "toStringFormatted");
	fn1(x, toString(x), "toString");
}

main() {
	// Flow conversion tests
	fn("∫x+∞");
	fn("∫x+∞ ∫xx");
	fn("∫x+∞ ∫xx");
	fn("∫x+∞ ∫xx∫");
	fn("∫x+∞ ∫xx∫ℝℂ∀Ⅎ");
	fn("∫x+∞ ∫ℝℂ∀Ⅎ");
	fn("∫x+∞ ∫xx ∫ →ℝℂ∀Ⅎ");

	x: flow = Triple(Triple(15, "aaa", Pair(12.23, true)), false, Pair(["abc", "xyz", "!!!"], [1, 2, 3]));
	println(x);
	println(x.first);
	println(x.third);
	test_bin = Triple(
        Pair("ABC
		wddqw
			we	wqe			SDFSD", 2.34),
        Pair("∫x+∞xx∫→ℝℂ∀Ⅎ", false),
        Pair(100500,[
            [[1,2,3], [3,4,5]],
            [[6,7,8], [9,10,11]],
        ])
    );
	println("test_bin: " + toString(test_bin));
	println("test_bin(formatted):\n" + strIndent(toStringFormatted(test_bin)));
	println("ABC
		wddqw
			we	wqe			SDFSD");
	println("strlen(\"∫x+∞xx∫→ℝℂ∀Ⅎ\"): " + i2s(strlen("∫x+∞xx∫→ℝℂ∀Ⅎ")));

	println(toLowerCase("aBcDefGH"));
	println(toLowerCase("abc"));
	println(toLowerCase("ABC"));
	println(toLowerCase(""));
	println(toLowerCase("ABDDEFZZZHIJKLMNOP"));
	println(toUpperCase("aBcDefGH"));
	println(toUpperCase("abc"));
	println(toUpperCase("ABC"));
	println(toUpperCase(""));
	println(toUpperCase("ABDDEFZZZHIJKLMNOP"));
	println(toUpperCase("abcdefghijklmnopqrstuvwxyz"));

	test_chars = \s -> iter(enumFromTo(0, strlen(s) - 1), \i ->
		println("getCharCodeAt(" + i2s(i) + "): code=" + i2s(getCharCodeAt(s, i)) + " char: " + getCharAt(s, i))
	);
	// Fails - because UTF16 surrogate pairs are not mapped onto symbols 
	//test_chars("𝕳𝖊𝖑𝖑𝖔, 𝖂𝖔𝖗𝖑𝖉!SØRENsøren"); - 
	test_chars("∫x+∞ ∫xx ∫ →ℝℂ∀Ⅎ");
	println(fromCharCode(120179) + fromCharCode(120202) + fromCharCode(120209) + fromCharCode(120209) + fromCharCode(120212));
	println(fromCharCode(8747) + fromCharCode(8594) + fromCharCode(8704));
	println(fromCharCode(120179) + fromCharCode(8747) + fromCharCode(120202) + fromCharCode(8594) + fromCharCode(120209) + fromCharCode(120209) + fromCharCode(120212) + fromCharCode(8704));
	quit(0);
}