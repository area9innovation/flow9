import ds/bitset;
import string_utils;

euler1(limit : int) -> int {
    foldRange(1, limit - 1, 0, \acc, i -> {
        if (i % 3 == 0 || i % 5 == 0) {
            acc + i;
        } else acc;
    });
}

euler2(a : double, b : double, sum : double) -> double {
    fib = a + b;
    nsum = if (fib % 2.0 == 0.0) sum + fib else sum;
    if (fib < 4000000.0) {
        euler2(b, fib, nsum)
    } else {
        nsum;
    }
}

biggestFactor(factor : double, limit : double, biggest : double, n : double) -> double {
	if (factor < limit) {
		if (n % factor == 0.0) {
			// println(factor);
			biggestFactor(factor, limit, factor, n / factor);
		} else {
			biggestFactor(if (factor == 2.0) 3.0 else factor + 2.0, limit, biggest, n)
		}
	} else {
		biggest;
	}
}

findBiggestDivisor(n : double) -> double {
	biggestFactor(2.0, sqrt(n), 1.0, n);
}

isPalindromic(s : string) -> bool {
	l = strlen(s);
    l <= 1 || {
		first = strLeft(s, 1);
		last = strRight(s, l - 1);
        first == last && isPalindromic(strsubsmart(s, 1, -1));
    }
}

euler4() -> int {
    foldRange(100, 999, 0, \acc, a -> {
        foldRange(100, 999, acc, \acc2, b -> {
        	p = a * b;
	        if (p < acc2 || !isPalindromic(i2s(p))) acc2 else p;
        })
    });
}

euler5(limit : int) -> int {
    foldRange(1, limit, 1, \acc, n -> {
        if (acc % n == 0) {
            // We already are a factor
            acc;
        } else {
            // We are not a factor. Figure out what
            // factors are missing, and add those
            required = n / gcd(acc, n);
            acc * required;
        }
    })
}

euler6(limit : int) -> double {
    sumsquares = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n * n));
    natsum = foldRange(1, limit, 0.0, \acc, n -> acc + i2d(n));
	natsum * natsum - sumsquares
}

sieve(n : int, set : BitSet, onPrime : (int) -> void) -> void {
    if (n < set.bitcount) {
        if (either(getBitSet(set, n), false)) {
            // OK, this is a prime. Mark the rest
            clearFactors(n + n, n, set);
            onPrime(n);
        };
        sieve(n + 1, set, onPrime);
    }
}

clearFactors(n : int, step : int, set : BitSet) -> void {
    if (n < set.bitcount) {
        unsetBitSet(set, n);
        clearFactors(n + step, step, set);
    }
}

euler7(target : int) -> int {
    // HACK: Upper bound for how many numbers we have to search
    // for the Nth prime.
    // This is speculative. If we do not find it, the
    // result will be 0. Then increase this bound.
    size = target * round(E_CONST * log(i2d(target)));

    // OK, make a set filled with 1
    set = makeBitSet(size);
    fori(2, size, \i -> {
        setBitSet(set, i);
        {}
    });

    // Now, run the sieve and knock out factors, this way
    // finding primes
    count = ref 0;
    ret = ref 0;
    sieve(2, set, \prime -> {
        // This is called whenever we find a prime
        count := ^count + 1;
        if (^count == target) {
            ret := prime;
        }
    });
    ^ret;
}

euler8(digits : string, len : int) -> double {
    foldRange(0, strlen(digits) - len - 1, 0.0, \greatest, i -> {
        numbers = substring(digits, i, len);
        product = stringFoldChar(numbers, 1.0, \acc, d -> {
            acc * s2d(d)
        });
        max(product, greatest)
    });
}

euler9(limit : int) -> int {
    foldRange(1, limit - 1, 0, \biggest : int, a : int -> {
		b = (1000 * (a - 500))/(a - 1000);
		c = 1000 - b - a;
		if (b < 0 || c < 0 || a * a + b * b != c * c) {
			biggest;
		} else {
            product = a * b * c;
            max(product, biggest);
		}
    });
}

// Erasthoses sieve
sieve1(n : int, set : BitSet, onPrime : (int) -> void) -> void {
    if (n < set.bitcount) {
        if (either(getBitSet(set, n), false)) {
            // OK, this is a prime. Mark the rest
            clearFactors1(n + n, n, set);
            onPrime(n);
        };
        sieve1(n + 1, set, onPrime);
    }
}

clearFactors1(n : int, step : int, set : BitSet) -> void {
    if (n < set.bitcount) {
        unsetBitSet(set, n);
        clearFactors1(n + step, step, set);
    }
}

euler10(size : int) -> double {
    // OK, make a set filled with 1
    set = makeBitSet(size);
    fori(2, size, \i -> {
        setBitSet(set, i);
        {}
    });

    // Now, run the sieve and knock out factors, this way
    // finding primes
    primesum = ref 0.0;
    sieve1(2, set, \prime -> {
        // This is called whenever we find a prime
        primesum := ^primesum + i2d(prime);
    });
    ^primesum;
}


// Alternative method using predicate directly

isPrime(x : int) -> bool {
    x == 2 || (x > 2 && (x % 2 != 0) && doIsPrime(x, 3, round(sqrt(i2d(x))) + 1))
}

doIsPrime(x : int, i : int, stop : int) -> bool {
    i >= stop
    || (
        (x % i) != 0
        && doIsPrime(x, i + 2, stop)
    );
}

euler10b(size : int) -> double {
    primes = filter(enumFromTo(1, size), isPrime);
    fold(primes, 0.0, \acc, prime -> acc + i2d(prime));
}


main() {
	println("euler1: " + i2s(euler1(1000)) + " (must be 233168)"); // Correct: 233168
	println("euler2: " + d2s(euler2(0.0, 1.0, 0.0)) + " (must be 4613732)"); // Correct: 461373
	println("euler3: " + d2s(findBiggestDivisor(600851475143.0)) + " (must be 6857)"); // Correct: 6857
	println("euler4: " + i2s(euler4()) + " (must be 906609)"); // 906609
	println("euler5: " + i2s(euler5(20)) + " (must be 232792560)"); // Correct: 232792560
	println("euler6: " + d2s(euler6(100)) + " (must be 25164150)"); // Correct: 25164150
	println("euler7: " + i2s(euler7(10001)) + " (must be 104743)"); // Correct: 104743
	digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    println("euler8: " + d2s(euler8(digits, 13)) + " (must be 23514624000)"); // Correct: 23514624000
    println("euler9: " + i2s(euler9(1000)) + " (must be 31875000)"); // Correct: 31875000
	println("euler10: " + d2s(euler10(2000000)) + " (must be 142913828922)"); // Correct: 142913828922
    println("euler10b: " + d2s(euler10b(2000000)) + " (must be 142913828922)"); // Correct: 142913828922
	quit(0);
}