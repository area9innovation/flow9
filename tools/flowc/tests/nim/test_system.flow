import sys/target;
import sys/system;
import fs/filesystem;

winTest() {
	startProcess("notepad.exe", [], "C:/a9/flow9/tools/flowc/backends/nim/", "testf.txt", \errorcode, stdout, stderr -> {
		println("after start process1");
		println(errorcode);
		println(stdout);
		println(stderr);
		println("after end process1");
		quit(0);
	});
	startProcess("wasm2wat", ["test.wasm", "-o", "test.wat"], ".", "", \ec, so, se -> {
		println("Wasm2Wat ::");
		println("   Err code: " + i2s(ec));
		println("   Out: " + so);
		println("   Err out: " + se);
	});
	startProcess("wasmer", ["test.wasm"], ".", "", \ec, so, se -> {
		println("\nExec -wasm ::");
		println("   Err code: " + i2s(ec));
		println("   Out: " + so);
		println("   Err out: " + se);
	});
	startProcess("wasmer", ["euler1.wasm"], ".", "", \ec, so, se -> {
		println("\nExec +wasm ::");
		println("   Err code: " + i2s(ec));
		println("   Out: " + so);
		println("   Err out: " + se);
	});

	println("after start processes");
	generate(0, 1000, \i-> {println(i); i});
	println("after loop");


	p1 = runSystemProcess("notepad.exe", [], ".", \out -> println("[P1] Out: " + out), \err -> println("[P1] Err: " + err), \ec -> println("[P1] Err_Code: " + i2s(ec)));
	p2 = runSystemProcess("wasm2wat", ["test.wasm", "-o", "test.wat"], ".", \out -> println("[P2] Out: " + out), \err -> println("[P2] Err: " + err), \ec -> println("[P2] Err_Code: " + i2s(ec)));
	p3 = runSystemProcess("wasmer", ["test.wasm"], ".", \out -> println("[P3] Out: " + out), \err -> println("[P3] Err: " + err), \ec -> println("[P3] Err_Code: " + i2s(ec)));
	p4 = runSystemProcess("wasmer", ["euler1.wasm"], ".", \out -> println("[P4] Out: " + out), \err -> println("[P4] Err: " + err), \ec -> println("[P4] Err_Code: " + i2s(ec)));

	writeProcessStdin(p1, "test string");

	timer(2000, \-> killSystemProcess(p4));
	timer(3000, \-> killSystemProcess(p4));
} 

linTest(end: () -> void) {
	println(changeFileExt(getApplicationPath(), ""));
	if (getUrlParameter("determ") == "") {
		startProcess("kwrite", [], ".", "testf.txt", \errorcode, stdout, stderr -> {
			println("after start process1");
			println(errorcode);
			println(stdout);
			println(stderr);
			println("after end process1");
			quit(0);
		});
		startProcess("wasm2wat", ["test.wasm", "-o", "test.wat"], "./nim", "", \ec, so, se -> {
			println("Wasm2Wat ::");
			println("   Err code: " + i2s(ec));
			println("   Out: " + so);
			println("   Err out: " + se);
		});
		startProcess("wasmer", ["test.wasm"], "./nim", "", \ec, so, se -> {
			println("\nExec -wasm ::");
			println("   Err code: " + i2s(ec));
			println("   Out: " + so);
			println("   Err out: " + se);
		});
		startProcess("wasmer", ["euler1.wasm"], "./nim", "", \ec, so, se -> {
			println("\nExec +wasm ::");
			println("   Err code: " + i2s(ec));
			println("   Out: " + so);
			println("   Err out: " + se);
		});

		println("after start processes");
		generate(0, 1000, \i-> {println(i); i});
		println("after loop");


		p1 = runSystemProcess("kwrite", [], ".", \out -> println("[P1] Out: " + out), \err -> println("[P1] Err: " + err), \ec -> println("[P1] Err_Code: " + i2s(ec)));
		p2 = runSystemProcess("wasm2wat", ["test.wasm", "-o", "test.wat"], ".", \out -> println("[P2] Out: " + out), \err -> println("[P2] Err: " + err), \ec -> println("[P2] Err_Code: " + i2s(ec)));
		p3 = runSystemProcess("wasmer", ["test.wasm"], ".", \out -> println("[P3] Out: " + out), \err -> println("[P3] Err: " + err), \ec -> println("[P3] Err_Code: " + i2s(ec)));
		p4 = runSystemProcess("wasmer", ["euler1.wasm"], ".", \out -> println("[P4] Out: " + out), \err -> println("[P4] Err: " + err), \ec -> println("[P4] Err_Code: " + i2s(ec)));

		writeProcessStdin(p1, "test string");

		timer(2000, \-> killSystemProcess(p4));
		timer(3000, \-> killSystemProcess(p4));
	} else {
		startProcess("wasm2wat", ["test.wasm", "-o", "test.wat"], "nim", "", \ec, so, se -> {
			println("Wasm2Wat ::");
			println("   Err code: " + i2s(ec));
			println("   Out: " + so);
			println("   Err out: " + se);
			startProcess("wasmer", ["test.wasm"], "nim", "", \ec1, so1, se1 -> {
				println("\nExec -wasm ::");
				println("   Err code: " + i2s(ec1));
				println("   Out: " + so1);
				println("   Err out: " + se1);
				startProcess("wasmer", ["euler1.wasm"], "./nim", "", \ec2, so2, se2 -> {
					println("\nExec +wasm ::");
					println("   Err code: " + i2s(ec2));
					println("   Out: " + so2);
					println("   Err out: " + se2);

					println("after start processes");
					generate(0, 1000, \i-> {println(i); i});
					println("after loop");

					//p1 = runSystemProcess("kwrite", [], ".", \out -> println("[P1] Out: " + out), \err -> println("[P1] Err: " + err), \ec3 -> println("[P1] Err_Code: " + i2s(ec3)));
					ignore(runSystemProcess("wasm2wat", ["test.wasm", "-o", "test.wat"], "./nim", \out -> println("[P2] Out: " + out), \err -> println("[P2] Err: " + err), \ec4 -> {
						println("[P2] Exit_Code: " + i2s(ec4));
						ignore(runSystemProcess("wasmer", ["test.wasm"], "./nim", \out -> println("[P3] Out: " + out), \err -> println("[P3] Err: " + err), \ec5 -> {
							println("[P3] Exit_Code: " + i2s(ec5));
							ignore(runSystemProcess("wasmer", ["euler1.wasm"], "./nim", \out -> println("[P4] Out: " + out), \err -> println("[P4] Err: " + err), \ec6 -> {
								println("[P4] Exit_Code: " + i2s(ec6));
								end();
							}));
						}));
					}));
				});
			});
		});
	}
}

main() {
	if (hasTargetName("windows")) {
		winTest();
		// Wait until all is done
		timer(10000, \ -> quit(0));
	} else if (hasTargetName("linux")) {
		linTest(\ -> quit(0));
	} else {
		println("unsupported platform: " + getTargetName());
		quit(0);
	}
}