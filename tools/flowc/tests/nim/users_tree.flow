import date;
import net/url_parameter;

User(
	id : int,
	email : string,
	firstName : string,
	lastName : string,
	userName : Maybe<string>,
	createdAt : Time,
	valid : bool,
	avatar : string,
	phone : string,
	dateOfBirth : Date,
	active : bool,
	passwordSetDate : Date,
	trusted : bool
);


makeDummyUser(id : int) -> User {
	determ = getUrlParameter("determ") != "";
	User(
		id,
		"user" + i2s(id) + "@area9.dk", // email
		"Name", // firstName
		"UID" + i2s(id), // lastName
		Some("user_" + i2s(id)), // userName
		if (determ) stamp2time(1685976863352.0) else getCurrentTime(),
		true, // valid
		"link_" + (if (determ) "?" else d2s(random())), // avatar
		"", // phone
		time2date(getCurrentTime()),// getCurrentDate(), // dateOfBirth // TODO
		true, // active
		nullDate, // passwordSetDate
		false, // trusted
	);
}

main() {
	determ = getUrlParameter("determ") != "";
	println("deterministic: " + b2s(determ) + ", param: '" + getUrlParameter("determ") + "'");
	t1 = timestamp();
	users = generate(1, 1000001, makeDummyUser);
	t2 = timestamp();
	println("Create array : " + (if (determ) "<some>" else d2s(t2-t1)) + " ms");
	uTree = values2tree(users, \u -> u.id);
	t3 = timestamp();
	println("Create tree : " + (if (determ) "<some>" else d2s(t3-t2)) + " ms");
	println("Created tree. Size=" + i2s(sizeTree(uTree)));
	println(toString(users[1000000 - 1]));
	println(toString(lookupTree(uTree, 1000000)));

	quit(0);
}