import string_utils;

testDynamicStruct(f: flow, msg: string) -> void {
	println("Testing dynamically constructed: " + msg);
	println("struct: " + toString(f));
	struct_name = extractStructName(f);
	println("extractStructName: " + struct_name);
	struct_fields = structFieldNames(struct_name);
	struct_args = extractStructArguments(f);
	println("structFieldNames: [" + strGlue(struct_fields, ", ") + "]");
	println("args:\n" + strIndent(strGlue(mapi(struct_fields, \i, field -> {
		val = struct_args[i];
		i2s(i) + ") field: " + field +  ", " +
			"type = " + runtimeValueType(val) + ", tag: " + i2s(getDataTagForValue(val)) + ", " "\n" +
			strIndent(toString(val))
		}
	), "\n")));
	println("")
}

MutStruct(mutable a: int, mutable b: string);

main() {
	p1 = makeStructValue("Pair", [flow(1), flow("a")], IllegalStruct());
	testDynamicStruct(p1, "Pair(1, a)");

	p2 = makeStructValue("Triple", [flow(1), flow("a"), flow(p1)], IllegalStruct());
	testDynamicStruct(p2, "Triple(1, a, p1)");

	p3 = makeStructValue("Triple", [flow(p2), flow(1.23), flow(p1)], IllegalStruct());
	testDynamicStruct(p3, "Triple(p2, 1.23, p1)");
	
	p4 = makeStructValue("non-existent", [flow(1), flow("a")], IllegalStruct());
	testDynamicStruct(p4, "non-existent");

	println("isStructName(Some): " + b2s(isStructName("Some")));
	println("isStructName(Pair): " + b2s(isStructName("Pair")));
	println("isStructName(OWASP): " + b2s(isStructName("OWASP")));
	println("isStructName(non-existent): " + b2s(isStructName("non-existent")));
/*
	TODO: check what's the hell with mutable structs in java - why there's a runtime error

	x = MutStruct(1, "abc");
	println("mutable struct: " + toString(x));
	setMutableField(x, "a", 5);
	println("setMutableField(x, a, 5) : " + toString(x));
	setMutableField(x, "b", "00000");
	println("setMutableField(x, b, 00000) : " + toString(x));

	y = flow(MutStruct(1, "abc"));
	println("mutable struct: " + toString(y));
	setMutableField(y, "a", 5);
	println("setMutableField(x, a, 5) : " + toString(y));
	setMutableField(y, "b", "00000");
	println("setMutableField(x, b, 00000) : " + toString(y));
*/
	//x.a ::= 10;
	//println("x.a ::= 10) : " + toString(x));
	//x.b ::= "11111";
	//println("x.b ::= 11111) : " + toString(x));
	quit(0);
}
