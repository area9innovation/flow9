/* import server/http;
import timer; */

native println2 : io (flow) -> void = Native.println;
native createHttpServerNative : (
	port : int,
	isHttps : bool,
	pfxPath : string,
	pfxPassword : string,
	onOpen : () -> void,
	onMessage : (
		requestUrl : string,
		requestBody : string,
		requestMethod : string,
		requestHeaders : [[string]],
		endResponse : (string) -> void,
		setResponseHeader : (string, [string]) -> void,
		setResponseStatus : (int) -> void
	) -> void
) -> native = HttpServerSupport.createHttpServerNative;

main() {
	/*stopServer = createHttpServer(
		8082,
		\ -> println("Server started!"),
		\request, send -> {
		println("Request: " + toString(request));
		send(HttpResponse(200, "Received request. OK", []));
	});

	timer(5 * 60 * 1000, \-> {
		println("Stopping server...");
		stopServer();
		quit(0);
	}); */
	createHttpServerNative(
		8082,
		false,
		"",
		"",
		\-> println2("onOpen"),
		\requestUrl, requestBody, requestMethod, requestHeaders,
			stopResponse : (string) -> void,
			setResponseHeader : (string, [string]) -> void,
			setResponseStatus -> {
				println2("nRequest");
		}
	);
}