import ds/hashset;
import math/hash;
import math/stringmath;

checkTreeAndHashMapEqual(tree : Tree<?, ??>, hashMap : HashMap<?, ??>) -> bool {
	result = ref true;
	if (sizeHashMap(hashMap) != sizeTree(tree)) {
		println("Hash map size: " + i2s(sizeHashMap(hashMap)) + " != tree size: "  + i2s(sizeTree(tree)));
		result := false;
	}
	iterHashMap(hashMap, \k1,v1 -> {
			switch (lookupTree(tree, k1)) {
				Some(v2): {
					if (v1 != v2) {
						println("values differ: ");
						println("key:");
						println(toString(k1));
						println("hash map value:");
						println(toString(v1));
						println("tree value:");
						println(toString(v2));
						result := false;
					}
				}
				None(): {
					println("tree doesn't have a key:");
					println(toString(k1));
					result := false;
				}
			}
		}
	);
	traverseInOrder(tree, \k1,v1 -> {
			switch (lookupHashMap(hashMap, k1)) {
				Some(v2): {
					if (v1 != v2) {
						println("values differ: ");
						println("key:");
						println(toString(k1));
						println("hash map value:");
						println(toString(v2));
						println("tree value:");
						println(toString(v1));
						result := false;
					}
				}
				None(): {
					println("hash map doesn't have a key:");
					println(toString(k1));
					result := false;
				}
			}
		}
	);
	^result
}

// dump
dumpHashMap(m : HashMap<?, ??>) -> string {
	dumpHashMapExt(m, toString, toString);
}

dumpHashMapExt(m : HashMap<?, ??>, fn1 : (?) -> string, fn2 : (??) -> string) -> string {
	strGlue(hashMapValues(mapHashMap(m, \k,v -> fn1(k) + " |-> " + fn2(v))), "\n")
}

dumpHashMapComplete(m : HashMap<int, int>) -> string {
	"size=" + i2s(sizeHashMap(m)) + "\n" + 
	"mapping:\n" + concatStrings(map(hashMap2pairs(m), \p -> "\t" + i2s(p.first) + " -> " + i2s(p.second)))
	;
}

testArrayOfPairs(
	testPairs : [Pair<?, ??>], 
	removeKeys : [?], 
	looupKeys : [?], 
	hash : (?) -> int, 
	descr : string
) -> bool {
	println("---------------------");
	test_size = length(testPairs);
	println("TEST: " + descr + " OF SIZE: " + i2s(test_size));
	tree_time_start1 = timestamp();
	tree = pairs2tree(testPairs);

	//loadFactor = 0.75;
	loadFactor = 0.75;
	hash_time_start1 = timestamp();
	hashMap = pairs2hashMapLoad(testPairs, hash, loadFactor);

	iter(looupKeys, \k -> ignore(lookupTree(tree, k)));

	hash_time_start3 = timestamp();
	iter(looupKeys, \k ->ignore(lookupHashMap(hashMap, k)));


	if (!checkTreeAndHashMapEqual(tree, hashMap)) {
		println("FAILED");
		false
	} else {
		tree1 = fold(removeKeys, tree, \acc, toRemove -> removeFromTree(acc, toRemove));
		
		iter(removeKeys, \toRemove -> {
			size_1 = sizeHashMap(hashMap);
			key_exists_1 = containsKeyHashMap(hashMap, toRemove);
			removeFromHashMap(hashMap, toRemove);
			size_2 = sizeHashMap(hashMap);
			key_exists_2 = containsKeyHashMap(hashMap, toRemove);
			if (key_exists_1) {
				if (key_exists_2) {
					println("key: " + toString(toRemove) + " was NOT erased from hash map");
				} else { 
					//println("key: " + toString(toRemove) + " was SUCESSFULLY erased from hash map");
				}
				if (size_2 + 1 != size_1) {
					println("size WAS NOT: size_1=" + i2s(size_1) + ", size_2=" + i2s(size_2));
				} else {
					//println("size decremented SUCESSFULLY");
				}
			} else {
				//println("key: " + toString(toRemove) + " DOES NOT exist\n" + dumpHashMap(hashMap));
			}
		});
		if (!checkTreeAndHashMapEqual(tree1, hashMap)) {
			println("FAILED AFTER REMOVE");
			false
		} else {
			println("PASSED");
			true
		}
	}
}

random_string() -> string {
	len = cast(random() * 20.0 : double -> int) + 1;
	symbs = arrayRepeatDeferred(\ -> 
		33 + cast(cast((126 - 33) : int -> double) * random() : double -> int),
		len
	);
	fold(symbs, "", \acc, code -> acc + fromCharCode(code))
}

main() -> void {
	testPassed = ref true;

	// Test 1
	// with a hand-written key-value pairs
	if (!testArrayOfPairs([Pair(1, 5), Pair(3, 6), Pair(92, -6), Pair(34, -9), Pair(18, 6)], [3, 18], [5, 3, 1], idfn, "HAND WRITTEN 1")) {
		testPassed := false;
	}
	
	// Test 2
	// with a hand-written key-value pairs
	if (!testArrayOfPairs([Pair(1, 5), Pair(3, 6), Pair(92, -6), Pair(34, -9), Pair(18, 6)], [3, 18, 92, 45, 1], [3, 45, 7, 9], idfn, "HAND WRITTEN 2")) {
		testPassed := false;
	}
	
	// Test 3
	// with a hand-written key-value pairs
	if (!testArrayOfPairs([Pair(1, 5), Pair(-3, 6), Pair(-92, -6), Pair(34, -9), Pair(18, 6)], [3, 18, 92, -92, -3, 45, 1], [1, 2, 3, 4, 5], idfn, "HAND WRITTEN 3")) {
		testPassed := false;
	}
	
	// Test 4
	// failed test
	failedPairs = [Pair(-1041393, -15773548),Pair(-17206635, -32378919),Pair(-33250064, -6983416)];
	failedRemove = [-1041393];
	if (!testArrayOfPairs(failedPairs, failedRemove, [-17206635, -33250064, 100500], idfn, "HAND WRITTEN 4")) {
		testPassed := false;
	}

	// with a hand-written key-value pairs
	if (!testArrayOfPairs(
			[Pair("", 5), Pair("abc", 6), Pair("123", -6), Pair("12", -9), Pair("AAA", 6)], 
			["ass", "abc", "ass", "", "122"], 
			["ass", "abc", "", "122", "abc", "123", "12", "AAA", "AAAA"], 
			\str -> fastHashStringWithCutoff(str, 4), 
			"HAND WRITTEN 5"
		)) {
		testPassed := false;
	}
	
	random_int = \-> {
		cast(random() * 100000000.0 - 50000000.0 : double -> int);
	}

	// Test 5
	// with a large randomly generated integer key-value pairs
	int_test_size = 200000;
	int_testPairs = map(enumFromTo(1, int_test_size), \__ ->
		Pair(random_int(), random_int())
	);
	println("Generated int_testPairs of size: " + i2s(int_test_size));

	int_removeSize = 20000;
	int_toRemovePairs = fold(enumFromTo(0, int_removeSize - 1), [], \acc, i ->
		concat(acc, [int_testPairs[(int_test_size / int_removeSize) * i].first])
	);
	println("Generated int_toRemovePairs of size: " + i2s(int_removeSize));

	int_toLookup = concat(
		map(take(int_testPairs, int_test_size / 2), \p -> p.first),
		map(enumFromTo(1, int_test_size / 2), \__ -> random_int())
	);
	println("Generated int_toLookup of size: " + i2s(length(int_toLookup)));

	if (!testArrayOfPairs(int_testPairs, int_toRemovePairs, int_toLookup, idfn, "RANDOMLY GENERATED INTEGER KEYS")) {
		testPassed := false;
	}
	println("Passed RANDOMLY GENERATED INTEGER KEYS");
	
	// Test 6
	// with a large randomly generated string key-value pairs
	string_test_size = 200000;
	string_testPairs = map(enumFromTo(1, string_test_size), \__ ->
		Pair(random_string(), random_int())
	);
	println("Generated string_testPairs of size: " + i2s(string_test_size));

	string_removeSize = 2000;
	string_toRemovePairs = fold(enumFromTo(0, string_removeSize - 1), [], \acc, i ->
		concat(acc, [string_testPairs[(string_test_size / string_removeSize) * i].first])
	);
	println("Generated string_toRemovePairs of size: " + i2s(string_removeSize));

	string_toLookup = concat(
		map(take(string_testPairs, string_test_size / 2), \p -> p.first),
		map(enumFromTo(1, string_test_size / 2), \__ -> random_string())
	);
	println("Generated int_toLookup of size: " + i2s(length(string_toLookup)));

	if (!testArrayOfPairs(string_testPairs, string_toRemovePairs, string_toLookup, 
			\str -> fastHashStringWithCutoff(str, 4),
			"RANDOMLY GENERATED STRING KEYS")
		) {
		testPassed := false;
	}
	println("RANDOMLY GENERATED STRING KEYS");
	
	println("=========================");
	if (^testPassed) {
		println("ALL HASH MAP TESTS PASSED");
		quit(0);
	} else {
		println("SOME HASH MAP TEST FAILED");
		quit(1);
	}
}

