import form;
import ds/tree;
import ui/conditions;
import gui;


export {
	GridLayout(columns : LayoutSpec, rows : LayoutSpec, cells : [LayoutCell]);

	// The gutter, as well as numbers that defines how much each column/row should grow with available space
	LayoutSpec(gutter : double, growth : [double]);

	LayoutCell(column : int, row : int, widthInCells : int, heightInCells : int, content : SForm);

	SForm ::= BaseSForm, ControlSForm, NamedForm, NamedFormModificator;
		BaseSForm ::= Text, Graphics, Picture, FixedSForm;
			FixedSForm : (width : double, height : double);

		ControlSForm ::= ResizeCell, OverlapCell, ConditionalForm;

			// Resize the content to the available space, as well as optional alignment
			ResizeCell : (resizeToWidth : bool, resizeToHeight : bool, preserveAspectRatio : bool, alignX : double, alignY : double, content : BaseSForm);

			// Extend the cell outwards the given number of pixels
			OverlapCell(left : double, top : double, right : double, bottom : double, sform : SForm);

			ConditionalForm : (condition : SkinCondition, form : SForm);

		// z-order of NamedForms depends of its names, but not from declaration order â€” it will be sort in alphabetical order (NamedForm("b") will overlap NamedForm("a") in any cases)
		NamedForm : (name : string);
		NamedFormModificator : (modificators : [NamedFormModifier], namedForm : NamedForm);
			NamedFormModifier ::= NamedFormScale, NamedFormAlign;
				NamedFormScale : (xScale : Behaviour<double>, yScale : Behaviour<double>);
				NamedFormAlign : (xAlign : Behaviour<double>, yAlign : Behaviour<double>);


	// A complete API for rendering a grid that can be updated in different ways.
	// if respectFatCells is true multicolumn (multirow) cells are taken into account during calculation of columns (rows) widths(heights).
	grid2form0(grid : GridLayout, namedForms : Tree<string, NamedFormDescription>, environment : SkinEnvironment, alpha : DynamicBehaviour<double>, respectFatCells : bool) -> Pair<Form, [Coordinates]>;
		NamedFormDescription : (
			form : Form,
			visible : Behaviour<bool>, stayVisible : ref bool, resetModifiers : ref bool,
			x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, awh : DynamicBehaviour<WidthHeight>,
			xAlign : DynamicBehaviour<double>, yAlign : DynamicBehaviour<double>,
			xScale : DynamicBehaviour<double>, yScale : DynamicBehaviour<double>,
			size : DynamicBehaviour<WidthHeight>);
		Coordinates(x : Behaviour<double>, y : Behaviour<double>, awh : Behaviour<WidthHeight>);

}

gl_eps = 0.001;

sform2form(namedForms : Tree<string, NamedFormDescription>, coordinates : Coordinates, environment : SkinEnvironment, sform : SForm, outSize : DynamicBehaviour<WidthHeight>) -> Form {
	Empty()
}

GridLayoutSizesData : (size : WidthHeight, xOffsets : [double], yOffsets : [double], availables : [WidthHeight]);

AvailableReset ::= ARBoth, ARDynamic, ARNo;
	ARBoth : (); ARDynamic : (); ARNo : ();


gridId = ref 0;
// foo = debugtyping;

grid2form0(grid : GridLayout, namedForms, environment, alpha, respectFatCells) {
	myId = ^gridId + 1;
	gridId := myId;
	gPrint : (string) -> ((flow) -> flow) = cprint(getUrlParameter("gridprint") == "1", "Grid " + i2s(myId) + " ");


	awh = environment.awh;
	currentAWH = ref zeroWH;
	currentSizes : ref [WidthHeight] = ref [];
	wrongSource = ref false;
	assertWithSideEffects = \cond, msg -> {
		if (!cond) {
		 	wrongSource := true;
		 	println(msg);
		}
	}

	getGrowthSum = \growth -> fold(growth, 0.0, \acc, val -> {
		assertWithSideEffects(val >= 0.0, "Negative growth value could not be processed");
		acc + val
	});

	sformsCount : int = length(grid.cells) |> gPrint("sformsCount: ");

	colsCount : int = length(grid.columns.growth) |> gPrint("colsCount: ");
	rowsCount : int = length(grid.rows.growth) |> gPrint("rowsCount: ");


	columnsGrowthSum = getGrowthSum(grid.columns.growth) |> gPrint("columnsGrowthSum: ");
	rowsGrowthSum = getGrowthSum(grid.rows.growth) |> gPrint("rowsGrowthSum: ");

	getGrowthPart = \growthSum : double, growth : [double] -> map(growth, \g -> if (growthSum > gl_eps) g / growthSum else 0.0);

	columnsGrowthParts = getGrowthPart(columnsGrowthSum, grid.columns.growth);
	rowsGrowthParts = getGrowthPart(rowsGrowthSum, grid.rows.growth);

	colsIds = enumFromTo(0, colsCount - 1);
	rowsIds = enumFromTo(0, rowsCount - 1);
	cellsIds = enumFromTo(0, sformsCount - 1);

	sizesSrc = generate(0, sformsCount, \i -> makeWH());

	constantWidthsIds = filter(colsIds, \i -> columnsGrowthParts[i] == 0.0) |> gPrint("constantWidthsIds: ");
	columnWidthsCalculationRelatedData = map(
		colsIds,
		\i -> {
			ids = filter(cellsIds, \id -> {
				cell = (grid.cells)[id];
				cell.column == i && cell.widthInCells == 1

			});
			assertWithSideEffects(length(ids) > 0 || columnsGrowthParts[i] > 0.0, "There is no one column width form in column " + i2s(i) + ". Column width will be 0.0");
			map(ids, \id -> {
				cell = (grid.cells)[id];
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (contains(constantWidthsIds, i)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				}
				Pair(resetType, id)
			})
		}
	) |> gPrint("columnsWidthCalculationsRelatedData: ");

	fatWidthCells = if (respectFatCells) {
		mapi(grid.cells, \id, cell -> {
			if (cell.widthInCells > 1) {
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (exists(constantWidthsIds, \i -> cell.column <= i && i < cell.column + cell.widthInCells)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				};
				[Pair(resetType, id)]
			} else {
				[]
			}
		}) |> concatA
	} else {
		[]
	}  |> gPrint("fatWidthCells: ");

	hGutters = i2d(colsCount - 1) * grid.columns.gutter;

	constantHeightsIds = filter(rowsIds, \i -> rowsGrowthParts[i] == 0.0) |> gPrint("constantHeights: ");

	rowsHeightsCalculationRelatedData = map(
		rowsIds,
		\i -> {
			ids = filter(cellsIds, \id -> {
				cell = (grid.cells)[id];
				cell.row == i && cell.heightInCells == 1
			});
			assertWithSideEffects(length(ids) > 0 || rowsGrowthParts[i] > 0.0, "There is no one row height form in row " + i2s(i) + ". Row height will be 0.0");
			map(ids, \id -> {
				cell = (grid.cells)[id];
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (contains(constantHeightsIds, i)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				}
				Pair(resetType, id)
			})
		}
	) |> gPrint("rowsHeightsCalculationRelatedData: ");

	fatHeightCells = if (respectFatCells) {
		mapi(grid.cells, \id, cell -> {
			if (cell.heightInCells > 1) {
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (exists(constantHeightsIds, \i -> cell.row <= i && i < cell.row + cell.heightInCells)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				};
				[Pair(resetType, id)]
			} else {
				[]
			}
		}) |> concatA
	} else {
		[]
	}  |> gPrint("fatHeightCells: ");



	vGutters = i2d(rowsCount - 1) * grid.rows.gutter;

	iteri(grid.cells,  \i, cell -> {
		assertWithSideEffects(
			0 <= cell.column && cell.column < colsCount,
			"Incorrect column number: " + i2s(cell.column) + " in grid cell id = " + i2s(i)
		);
		assertWithSideEffects(
			0 <= cell.row && cell.row < rowsCount,
			"Incorrect row number: " + i2s(cell.row) + " in grid cell id = " + i2s(i)
		);
		assertWithSideEffects(
			0 <= cell.column && cell.column < colsCount && 0 < cell.widthInCells && cell.column + cell.widthInCells <= colsCount,
			"Incorrect column number: " + i2s(cell.column) + " in grid cell id = " + i2s(i)
		);
		assertWithSideEffects(
			0 <= cell.row && cell.row < rowsCount && 0 < cell.heightInCells && cell.row + cell.heightInCells <= rowsCount,
			"Incorrect row number: " + i2s(cell.row) + " in grid cell id = " + i2s(i)
		);
	});

	sizeRelatedBehaviours = map(sizesSrc, whenSizeChanged) |> merge;

	internalUpdate = ref false;

	data = make(GridLayoutSizesData(
		zeroWH,
		generate(0, sformsCount, \i -> 0.0),
		generate(0, sformsCount, \i -> 0.0),
		generate(0, sformsCount, \i -> zeroWH)
	));

	isToReset = \cellResetType, resetType -> {
		switch (cellResetType : AvailableReset) {
			ARNo() : false;
			ARDynamic() : resetType != ARNo();
			ARBoth() : resetType == ARBoth();
		}
	}

	calculateNewCoordinates = \resetAvailableDependentSizes : AvailableReset, updateWholeSize  -> {
		gPrint("Calculating new coordinates")("") |> ignore;
		gPrint("resetAvailableDependentSizes: ")(resetAvailableDependentSizes) |> ignore;
		gPrint("updateWholeSize: ")(updateWholeSize) |> ignore;
		nextDistinct(alpha, b2d(resetAvailableDependentSizes == ARNo()));
		currentSizes := getValue(sizeRelatedBehaviours) |> gPrint("currentSizes: ");
		currentAWH := getValue(awh) |> gPrint("currentAWH: ");
		wh = (if (resetAvailableDependentSizes != ARNo()) zeroWH else ^currentAWH) |> gPrint("awh: ");

		sizes = ^currentSizes |> gPrint("sizes: ");

		maxWidths = {
			fatlessWidths = map(
				columnWidthsCalculationRelatedData,
				\widthsData -> {
					map(widthsData, \dt -> {
							unpair(dt, \sizeToReset, id -> if (isToReset(sizeToReset, resetAvailableDependentSizes)) 0.0 else sizes[id].width)
					}) |> \sz -> either(maxA(sz), 0.0)
				}
			) |> gPrint("fatlessWidths: ");
			fold(fatWidthCells, fatlessWidths, \widths, cellTriple -> unpair(cellTriple, \sizeToReset, id -> {
				if (isToReset(sizeToReset, resetAvailableDependentSizes)) {
					widths
				} else {
					cell = grid.cells[id];
					width = sizes[id].width;
					cols = subrange(fatlessWidths, cell.column, cell.widthInCells);
					columnsWidthsSum = cols |> dsum;
					delta = width - columnsWidthsSum;
					if (columnsWidthsSum > 0.0 && delta > 0.0) {
						updateWidth = \w -> {
							w + w / columnsWidthsSum * delta
						};
						concatA([
							subrange(widths, 0, cell.column),
							map(cols, updateWidth),
							subrange(widths, cell.column + cell.widthInCells, colsCount - cell.column - cell.widthInCells)
						])
					} else {
						widths
					}
				}
			})) |> gPrint("maxWidths: ")
		}

		constantWidths = map(constantWidthsIds, \id -> maxWidths[id]) |> gPrint("constantWidths: ");
		additionalWidth : double = max(wh.width - dsum(constantWidths) - hGutters, 0.0) |> gPrint("additionalWidth: ");

		colsWidths = foldi(columnsGrowthParts, [], \i, acc : [double], growth -> {
				if  (growth == 0.0) {
					arrayPush(acc, maxWidths[i])
				} else {
					arrayPush(acc, max(additionalWidth * growth, maxWidths[i]))
				}
		}) |> gPrint("colsWidths: ");

		maxHeights = {
			fatlessHeights = map(
				rowsHeightsCalculationRelatedData,
				\heightsData -> {
					map(heightsData, \dt -> {
							unpair(dt, \sizeToReset, id -> if (isToReset(sizeToReset, resetAvailableDependentSizes)) 0.0 else sizes[id].height)
					}) |> \sz -> either(maxA(sz), 0.0)
				}
			) |> gPrint("fatlessHeights: ");
			fold(fatHeightCells, fatlessHeights, \heights, cellTriple -> unpair(cellTriple, \sizeToReset, id -> {
				if (isToReset(sizeToReset, resetAvailableDependentSizes)) {
					heights
				} else {
					cell = grid.cells[id];
					height = sizes[id].height;
					cols = subrange(fatlessHeights, cell.row, cell.heightInCells);
					rowsHeightsSum = cols |> dsum;
					delta = height - rowsHeightsSum;
					if (rowsHeightsSum > 0.0 && delta > 0.0) {
						updateHeight = \h -> {
							h + h / rowsHeightsSum * delta
						};
						concatA([
							subrange(heights, 0, cell.row),
							map(cols, updateHeight),
							subrange(heights, cell.row + cell.heightInCells, colsCount - cell.row - cell.heightInCells)
						])
					} else {
						heights
					}
				}
			})) |> gPrint("maxHeights: ")
		}

		constantHeights = map(constantHeightsIds, \id -> {
			if (id >= length(maxHeights)) 0.0 else maxHeights[id]
		}) |> gPrint("constantHeights: ");
		additionalHeight : double = max(wh.height - dsum(constantHeights) - vGutters, 0.0) |> gPrint("additionalHeight: ");

		rowsHeights = foldi(rowsGrowthParts, [], \i, acc : [double], growth -> {
			maxHeight = if (i >= length(maxHeights)) 0.0 else maxHeights[i];

			if  (growth == 0.0) {
				arrayPush(acc, maxHeight)
			} else {
				arrayPush(acc, max(additionalHeight * growth, maxHeight))
			}
		}) |> gPrint("rowsHeights: ");

		xOffsets = mapi(grid.cells,  \i, cell -> {
			dsum(subrange(colsWidths, 0, cell.column)) + i2d(cell.column) * grid.columns.gutter
		});

		yOffsets = mapi(grid.cells,  \i, cell -> {
			dsum(subrange(rowsHeights, 0, cell.row)) + i2d(cell.row) * grid.rows.gutter
		});

		availables = mapi(grid.cells, \i, cell -> {
			WidthHeight(
				dsum(subrange(colsWidths, cell.column, cell.widthInCells)) + i2d(cell.widthInCells - 1) * grid.columns.gutter,
				dsum(subrange(rowsHeights, cell.row, cell.heightInCells)) + i2d(cell.heightInCells - 1) * grid.rows.gutter
			)
		}) |> gPrint("availables: ");

		wholeWidth = colsWidths |> dsum |> floor |> i2d;
		wholeHeight = rowsHeights |> dsum |> floor |> i2d;
		addGutters = \gutters -> \base -> {
			if (base > 0.0) {
				base + gutters
			} else {
				0.0
			}
		}
		wholeSize = WidthHeight(wholeWidth |> addGutters(hGutters), wholeHeight |> addGutters(vGutters)) |> gPrint("wholeSize: ");
		newWholeSize = (if (updateWholeSize) wholeSize else getValue(data).size) |> gPrint("newWholeSize: ");
		nextDistinct(data, GridLayoutSizesData(newWholeSize, xOffsets, yOffsets, availables))
	}

	stopUpdate = ref \ -> {};
	protectedApply = \fn -> {
		^stopUpdate();
		if (!^internalUpdate) {
			internalUpdate := true;
			stopUpdate := interruptibleTimer(5, fn);
		} else {
			stopUpdate := interruptibleTimer(5, fn);
		}
	}

	stableSizes = {
		provider = make(getValue(sizeRelatedBehaviours));
		stopTimer = ref \ -> {};
		subscribe2(sizeRelatedBehaviours, \v -> {
			^stopTimer();
			stopTimer := interruptibleTimer(
				5,
				\ -> {
					stopTimer := \ ->  {};
					nextDistinct(provider, getValue(sizeRelatedBehaviours));
				}
			);
		});
		provider;
	}
	currentSizes := getValue(sizeRelatedBehaviours);
	infiniteLoop = \ -> {
		uns0 = subscribe2(awh |> whenSizeChanged, \wh -> {
				protectedApply(\ -> {
					calculateNewCoordinates(ARBoth(), false);
					calculateNewCoordinates(ARDynamic(), false);
					calculateNewCoordinates(ARNo(), false);
					calculateNewCoordinates(ARNo(), true);
					internalUpdate := false;
				});
		});

		uns1 = subscribe2(stableSizes, \sizes -> protectedApply(\ -> {
			calculateNewCoordinates(ARDynamic(), true);
			calculateNewCoordinates(ARNo(), true);
			calculateNewCoordinates(ARNo(), true);
			internalUpdate := false;
		}));

		\ -> {
			uns1();
			uns0();
		}
	};


	if (^wrongSource) {
		Pair(Text("Incorrect source", [Fill(0x000000)]), [])
	} else {
		coordinatesArray = mapi(grid.cells, \i, __ -> Coordinates(
			select(data, \dt -> dt.xOffsets[i]),
			select(data, \dt -> dt.yOffsets[i]),
			select(data, \dt -> dt.availables[i])
		));
		Pair(
			Size2(
				select(data, \dt -> dt.size) |> whenSizeChanged,
				Constructor(
					Group(mapi(
						grid.cells,
						\i,cell -> {
							coordinates = coordinatesArray[i];
							form = sform2form(namedForms, coordinates, environment, cell.content, sizesSrc[i]);
							RenderAtCoordinates(coordinates, form)
						}
					)),
					infiniteLoop
				)
			),
			coordinatesArray
		)
	}
}


hasAvailableDependentNamedForm(sform : SForm, namedForms : Tree<string, NamedFormDescription>) {
	false;
}

RenderAtCoordinates(coordinates : Coordinates, form : Form) {
	Grid([]);
}

----------

RenderAtCoordinates = (\coordinates:Coordinates, form:Form ->
	(Grid(([] : [[Form]])) : Grid)
 : (coordinates : Coordinates, form : Form) -> Grid);

gl_eps = (0.001 : double);

gridId = (ref (0 : int) : ref int);

hasAvailableDependentNamedForm = (\sform:SForm, namedForms:Tree<string, NamedFormDescription> ->
	(false : bool)
 : (sform : SForm, namedForms : Tree<string, NamedFormDescription>) -> bool);

sform2form = (\namedForms:Tree<string, NamedFormDescription>, coordinates:Coordinates, environment:SkinEnvironment, sform:SForm, outSize:DynamicBehaviour<WidthHeight> ->
	(Empty() : Empty)
 : (namedForms : Tree<string, NamedFormDescription>, coordinates : Coordinates, environment : SkinEnvironment, sform : SForm, outSize : DynamicBehaviour<WidthHeight>) -> Empty);

grid2form0 = (\grid:GridLayout, namedForms:Tree<string, NamedFormDescription>, environment:SkinEnvironment, alpha:DynamicBehaviour<double>, respectFatCells:bool ->
	(myId : int = (((^(gridId : ref int) : int) + (1 : int)) : int);
	({
		(((gridId : ref int)  :=  (myId : int)) : void);
		(gPrint : (string) -> (flow) -> flow = ((cprint : (doPrint : bool, prefix : string) -> (string) -> (flow) -> flow)(((((getUrlParameter : (name : string) -> string)(("gridprint" : string)) : string) == ("1" : string)) : bool), ((((("Grid " : string) + ((i2s : (i : int) -> string)((myId : int)) : string)) : string) + (" " : string)) : string)) : (string) -> (flow) -> flow);
		({
			(awh : Behaviour<WidthHeight> = ((environment : SkinEnvironment).awh : Behaviour<WidthHeight>);
			({
				(currentAWH : ref WidthHeight = (ref (zeroWH : WidthHeight) : ref WidthHeight);
				({
					(currentSizes : ref [WidthHeight] = (ref ([] : [WidthHeight]) : ref [WidthHeight]);
					({
						(wrongSource : ref bool = (ref (false : bool) : ref bool);
						({
							(assertWithSideEffects : (bool, flow) -> void = (\cond:bool, msg:flow ->
								(if ((!(cond : bool) : bool)) {
									({
										(((wrongSource : ref bool)  :=  (true : bool)) : void);
										((println : (str : flow) -> void)((msg : flow)) : void)
									}
									 : void)
								} else {
									({} : void)
								}
								 : void)
							 : (cond : bool, msg : flow) -> void);
							({
								(getGrowthSum : ([double]) -> double = (\growth:[double] ->
									((fold : (xs : [double], init : double, fn : (double, double) -> double) -> double)((growth : [double]), (0.0 : double), (\acc:double, val:double ->
										({
											((assertWithSideEffects : (bool, flow) -> void)((((val : double) >= (0.0 : double)) : bool), ("Negative growth value could not be processed" : string)) : void);
											(((acc : double) + (val : double)) : double)
										}
										 : double)
									 : (acc : double, val : double) -> double)) : double)
								 : (growth : [double]) -> double);
								({
									(sformsCount : int = (((gPrint : (string) -> (flow) -> flow)(("sformsCount: " : string)) : (flow) -> flow)(((length : ([LayoutCell]) -> int)(((grid : GridLayout).cells : [LayoutCell])) : int)) : flow);
									({
										(colsCount : int = (((gPrint : (string) -> (flow) -> flow)(("colsCount: " : string)) : (flow) -> flow)(((length : ([double]) -> int)((((grid : GridLayout).columns : LayoutSpec).growth : [double])) : int)) : flow);
										({
											(rowsCount : int = (((gPrint : (string) -> (flow) -> flow)(("rowsCount: " : string)) : (flow) -> flow)(((length : ([double]) -> int)((((grid : GridLayout).rows : LayoutSpec).growth : [double])) : int)) : flow);
											({
												(columnsGrowthSum : flow = (((gPrint : (string) -> (flow) -> flow)(("columnsGrowthSum: " : string)) : (flow) -> flow)(((getGrowthSum : ([double]) -> double)((((grid : GridLayout).columns : LayoutSpec).growth : [double])) : double)) : flow);
												({
													(rowsGrowthSum : flow = (((gPrint : (string) -> (flow) -> flow)(("rowsGrowthSum: " : string)) : (flow) -> flow)(((getGrowthSum : ([double]) -> double)((((grid : GridLayout).rows : LayoutSpec).growth : [double])) : double)) : flow);
													({
														(getGrowthPart : (double, [double]) -> [double] = (\growthSum:double, growth:[double] ->
															((map : ([double], (double) -> double) -> [double])((growth : [double]), (\g:double ->
																(if ((((growthSum : double) > (gl_eps : double)) : bool)) {
																	(((g : double) / (growthSum : double)) : double)
																} else {
																	(0.0 : double)
																}
																 : double)
															 : (g : double) -> double)) : [double])
														 : (growthSum : double, growth : [double]) -> [double]);
														({
															(columnsGrowthParts : [double] = ((getGrowthPart : (double, [double]) -> [double])((columnsGrowthSum : flow), (((grid : GridLayout).columns : LayoutSpec).growth : [double])) : [double]);
															({
																(rowsGrowthParts : [double] = ((getGrowthPart : (double, [double]) -> [double])((rowsGrowthSum : flow), (((grid : GridLayout).rows : LayoutSpec).growth : [double])) : [double]);
																({
																	(colsIds : [int] = ((enumFromTo : (int, int) -> [int])((0 : int), (((colsCount : int) - (1 : int)) : int)) : [int]);
																	({
																		(rowsIds : [int] = ((enumFromTo : (int, int) -> [int])((0 : int), (((rowsCount : int) - (1 : int)) : int)) : [int]);
																		({
																			(cellsIds : [int] = ((enumFromTo : (int, int) -> [int])((0 : int), (((sformsCount : int) - (1 : int)) : int)) : [int]);
																			({
																				(sizesSrc : [DynamicBehaviour<WidthHeight>] = ((generate : (start : int, end : int, fn : (i : int) -> DynamicBehaviour<WidthHeight>) -> [DynamicBehaviour<WidthHeight>])((0 : int), (sformsCount : int), (\i:int ->
																					((makeWH : () -> DynamicBehaviour<WidthHeight>)() : DynamicBehaviour<WidthHeight>)
																				 : (i : int) -> DynamicBehaviour<WidthHeight>)) : [DynamicBehaviour<WidthHeight>]);
																				({
																					(constantWidthsIds : flow = (((gPrint : (string) -> (flow) -> flow)(("constantWidthsIds: " : string)) : (flow) -> flow)(((filter : (a : [int], test : (int) -> bool) -> [int])((colsIds : [int]), (\i:int ->
																						((((columnsGrowthParts : [double])[(i : int)] : double) == (0.0 : double)) : bool)
																					 : (i : int) -> bool)) : [int])) : flow);
																					({
																						(columnWidthsCalculationRelatedData : flow = (((gPrint : (string) -> (flow) -> flow)(("columnsWidthCalculationsRelatedData: " : string)) : (flow) -> flow)(((map : ([int], (int) -> [flow]) -> [[flow]])((colsIds : [int]), (\i:int ->
																							(ids : [int] = ((filter : (a : [int], test : (int) -> bool) -> [int])((cellsIds : [int]), (\id:int ->
																								(cell : LayoutCell = (((grid : GridLayout).cells : [LayoutCell])[(id : int)] : LayoutCell);
																								({
																									((((((cell : LayoutCell).column : int) == (i : int)) : bool) && ((((cell : LayoutCell).widthInCells : int) == (1 : int)) : bool)) : bool)
																								}
																								 : bool) : bool)
																							 : (id : int) -> bool)) : [int]);
																							({
																								((assertWithSideEffects : (bool, flow) -> void)(((((((length : ([int]) -> int)((ids : [int])) : int) > (0 : int)) : bool) || ((((columnsGrowthParts : [double])[(i : int)] : double) > (0.0 : double)) : bool)) : bool), ((((("There is no one column width form in column " : string) + ((i2s : (i : int) -> string)((i : int)) : string)) : string) + (". Column width will be 0.0" : string)) : string)) : void);
																								((map : ([int], (int) -> flow) -> [flow])((ids : [int]), (\id:int ->
																									(cell : LayoutCell = (((grid : GridLayout).cells : [LayoutCell])[(id : int)] : LayoutCell);
																									({
																										(resetType : flow = (if (((hasAvailableDependentNamedForm : (sform : SForm, namedForms : Tree<string, NamedFormDescription>) -> bool)(((cell : LayoutCell).content : SForm), (namedForms : Tree<string, NamedFormDescription>)) : bool)) {
																											(if (((contains : (a : [flow], v : flow) -> bool)((constantWidthsIds : flow), (i : int)) : bool)) {
																												(ARBoth() : ARBoth)
																											} else {
																												(ARDynamic() : ARDynamic)
																											}
																											 : flow)
																										} else {
																											(ARNo() : ARNo)
																										}
																										 : flow);
																										({
																											(Pair((resetType : flow), (id : int)) : Pair<flow, int>)
																										}
																										 : Pair<flow, int>) : Pair<flow, int>)
																									}
																									 : Pair<flow, int>) : Pair<flow, int>)
																								 : (id : int) -> Pair<flow, int>)) : [flow])
																							}
																							 : [flow]) : [flow])
																						 : (i : int) -> [flow])) : [[flow]])) : flow);
																						({
																							(fatWidthCells : [Pair<AvailableReset, int>] = (if ((respectFatCells : bool)) {
																								((concatA : (a : [[Pair<AvailableReset, int>]]) -> [Pair<AvailableReset, int>])(((mapi : ([LayoutCell], (int, LayoutCell) -> [Pair<AvailableReset, int>]) -> [[Pair<AvailableReset, int>]])(((grid : GridLayout).cells : [LayoutCell]), (\id:int, cell:LayoutCell ->
																									(if (((((cell : LayoutCell).widthInCells : int) > (1 : int)) : bool)) {
																										(resetType : AvailableReset = (if (((hasAvailableDependentNamedForm : (sform : SForm, namedForms : Tree<string, NamedFormDescription>) -> bool)(((cell : LayoutCell).content : SForm), (namedForms : Tree<string, NamedFormDescription>)) : bool)) {
																											(if (((exists : (a : [flow], fn : (flow) -> bool) -> bool)((constantWidthsIds : flow), (\i:flow ->
																												((((((cell : LayoutCell).column : int) <= (i : flow)) : bool) && (((i : flow) < ((((cell : LayoutCell).column : int) + ((cell : LayoutCell).widthInCells : int)) : int)) : bool)) : bool)
																											 : (i : flow) -> bool)) : bool)) {
																												(ARBoth() : ARBoth)
																											} else {
																												(ARDynamic() : ARDynamic)
																											}
																											 : AvailableReset)
																										} else {
																											(ARNo() : ARNo)
																										}
																										 : AvailableReset);
																										({
																											([(Pair((resetType : AvailableReset), (id : int)) : Pair<AvailableReset, int>)] : [Pair<AvailableReset, int>])
																										}
																										 : [Pair<AvailableReset, int>]) : [Pair<AvailableReset, int>])
																									} else {
																										([] : [Pair<AvailableReset, int>])
																									}
																									 : [Pair<AvailableReset, int>])
																								 : (id : int, cell : LayoutCell) -> [Pair<AvailableReset, int>])) : [[Pair<AvailableReset, int>]])) : [Pair<AvailableReset, int>])
																							} else {
																								(((gPrint : (string) -> (flow) -> flow)(("fatWidthCells: " : string)) : (flow) -> flow)(([] : [flow])) : flow)
																							}
																							 : [Pair<AvailableReset, int>]);
																							({
																								(hGutters : double = ((((i2d : (i : int) -> double)((((colsCount : int) - (1 : int)) : int)) : double) * (((grid : GridLayout).columns : LayoutSpec).gutter : double)) : double);
																								({
																									(constantHeightsIds : flow = (((gPrint : (string) -> (flow) -> flow)(("constantHeights: " : string)) : (flow) -> flow)(((filter : (a : [int], test : (int) -> bool) -> [int])((rowsIds : [int]), (\i:int ->
																										((((rowsGrowthParts : [double])[(i : int)] : double) == (0.0 : double)) : bool)
																									 : (i : int) -> bool)) : [int])) : flow);
																									({
																										(rowsHeightsCalculationRelatedData : flow = (((gPrint : (string) -> (flow) -> flow)(("rowsHeightsCalculationRelatedData: " : string)) : (flow) -> flow)(((map : ([int], (int) -> [flow]) -> [[flow]])((rowsIds : [int]), (\i:int ->
																											(ids : [int] = ((filter : (a : [int], test : (int) -> bool) -> [int])((cellsIds : [int]), (\id:int ->
																												(cell : LayoutCell = (((grid : GridLayout).cells : [LayoutCell])[(id : int)] : LayoutCell);
																												({
																													((((((cell : LayoutCell).row : int) == (i : int)) : bool) && ((((cell : LayoutCell).heightInCells : int) == (1 : int)) : bool)) : bool)
																												}
																												 : bool) : bool)
																											 : (id : int) -> bool)) : [int]);
																											({
																												((assertWithSideEffects : (bool, flow) -> void)(((((((length : ([int]) -> int)((ids : [int])) : int) > (0 : int)) : bool) || ((((rowsGrowthParts : [double])[(i : int)] : double) > (0.0 : double)) : bool)) : bool), ((((("There is no one row height form in row " : string) + ((i2s : (i : int) -> string)((i : int)) : string)) : string) + (". Row height will be 0.0" : string)) : string)) : void);
																												((map : ([int], (int) -> flow) -> [flow])((ids : [int]), (\id:int ->
																													(cell : LayoutCell = (((grid : GridLayout).cells : [LayoutCell])[(id : int)] : LayoutCell);
																													({
																														(resetType : flow = (if (((hasAvailableDependentNamedForm : (sform : SForm, namedForms : Tree<string, NamedFormDescription>) -> bool)(((cell : LayoutCell).content : SForm), (namedForms : Tree<string, NamedFormDescription>)) : bool)) {
																															(if (((contains : (a : [flow], v : flow) -> bool)((constantHeightsIds : flow), (i : int)) : bool)) {
																																(ARBoth() : ARBoth)
																															} else {
																																(ARDynamic() : ARDynamic)
																															}
																															 : flow)
																														} else {
																															(ARNo() : ARNo)
																														}
																														 : flow);
																														({
																															(Pair((resetType : flow), (id : int)) : Pair<flow, int>)
																														}
																														 : Pair<flow, int>) : Pair<flow, int>)
																													}
																													 : Pair<flow, int>) : Pair<flow, int>)
																												 : (id : int) -> Pair<flow, int>)) : [flow])
																											}
																											 : [flow]) : [flow])
																										 : (i : int) -> [flow])) : [[flow]])) : flow);
																										({
																											(fatHeightCells : [Pair<AvailableReset, int>] = (if ((respectFatCells : bool)) {
																												((concatA : (a : [[Pair<AvailableReset, int>]]) -> [Pair<AvailableReset, int>])(((mapi : ([LayoutCell], (int, LayoutCell) -> [Pair<AvailableReset, int>]) -> [[Pair<AvailableReset, int>]])(((grid : GridLayout).cells : [LayoutCell]), (\id:int, cell:LayoutCell ->
																													(if (((((cell : LayoutCell).heightInCells : int) > (1 : int)) : bool)) {
																														(resetType : AvailableReset = (if (((hasAvailableDependentNamedForm : (sform : SForm, namedForms : Tree<string, NamedFormDescription>) -> bool)(((cell : LayoutCell).content : SForm), (namedForms : Tree<string, NamedFormDescription>)) : bool)) {
																															(if (((exists : (a : [flow], fn : (flow) -> bool) -> bool)((constantHeightsIds : flow), (\i:flow ->
																																((((((cell : LayoutCell).row : int) <= (i : flow)) : bool) && (((i : flow) < ((((cell : LayoutCell).row : int) + ((cell : LayoutCell).heightInCells : int)) : int)) : bool)) : bool)
																															 : (i : flow) -> bool)) : bool)) {
																																(ARBoth() : ARBoth)
																															} else {
																																(ARDynamic() : ARDynamic)
																															}
																															 : AvailableReset)
																														} else {
																															(ARNo() : ARNo)
																														}
																														 : AvailableReset);
																														({
																															([(Pair((resetType : AvailableReset), (id : int)) : Pair<AvailableReset, int>)] : [Pair<AvailableReset, int>])
																														}
																														 : [Pair<AvailableReset, int>]) : [Pair<AvailableReset, int>])
																													} else {
																														([] : [Pair<AvailableReset, int>])
																													}
																													 : [Pair<AvailableReset, int>])
																												 : (id : int, cell : LayoutCell) -> [Pair<AvailableReset, int>])) : [[Pair<AvailableReset, int>]])) : [Pair<AvailableReset, int>])
																											} else {
																												(((gPrint : (string) -> (flow) -> flow)(("fatHeightCells: " : string)) : (flow) -> flow)(([] : [flow])) : flow)
																											}
																											 : [Pair<AvailableReset, int>]);
																											({
																												(vGutters : double = ((((i2d : (i : int) -> double)((((rowsCount : int) - (1 : int)) : int)) : double) * (((grid : GridLayout).rows : LayoutSpec).gutter : double)) : double);
																												({
																													((iteri : ([LayoutCell], (int, LayoutCell) -> void) -> void)(((grid : GridLayout).cells : [LayoutCell]), (\i:int, cell:LayoutCell ->
																														({
																															((assertWithSideEffects : (bool, flow) -> void)((((((0 : int) <= ((cell : LayoutCell).column : int)) : bool) && ((((cell : LayoutCell).column : int) < (colsCount : int)) : bool)) : bool), ((((((("Incorrect column number: " : string) + ((i2s : (i : int) -> string)(((cell : LayoutCell).column : int)) : string)) : string) + (" in grid cell id = " : string)) : string) + ((i2s : (i : int) -> string)((i : int)) : string)) : string)) : void);
																															((assertWithSideEffects : (bool, flow) -> void)((((((0 : int) <= ((cell : LayoutCell).row : int)) : bool) && ((((cell : LayoutCell).row : int) < (rowsCount : int)) : bool)) : bool), ((((((("Incorrect row number: " : string) + ((i2s : (i : int) -> string)(((cell : LayoutCell).row : int)) : string)) : string) + (" in grid cell id = " : string)) : string) + ((i2s : (i : int) -> string)((i : int)) : string)) : string)) : void);
																															((assertWithSideEffects : (bool, flow) -> void)((((((((((0 : int) <= ((cell : LayoutCell).column : int)) : bool) && ((((cell : LayoutCell).column : int) < (colsCount : int)) : bool)) : bool) && (((0 : int) < ((cell : LayoutCell).widthInCells : int)) : bool)) : bool) && ((((((cell : LayoutCell).column : int) + ((cell : LayoutCell).widthInCells : int)) : int) <= (colsCount : int)) : bool)) : bool), ((((((("Incorrect column number: " : string) + ((i2s : (i : int) -> string)(((cell : LayoutCell).column : int)) : string)) : string) + (" in grid cell id = " : string)) : string) + ((i2s : (i : int) -> string)((i : int)) : string)) : string)) : void);
																															((assertWithSideEffects : (bool, flow) -> void)((((((((((0 : int) <= ((cell : LayoutCell).row : int)) : bool) && ((((cell : LayoutCell).row : int) < (rowsCount : int)) : bool)) : bool) && (((0 : int) < ((cell : LayoutCell).heightInCells : int)) : bool)) : bool) && ((((((cell : LayoutCell).row : int) + ((cell : LayoutCell).heightInCells : int)) : int) <= (rowsCount : int)) : bool)) : bool), ((((((("Incorrect row number: " : string) + ((i2s : (i : int) -> string)(((cell : LayoutCell).row : int)) : string)) : string) + (" in grid cell id = " : string)) : string) + ((i2s : (i : int) -> string)((i : int)) : string)) : string)) : void)
																														}
																														 : void)
																													 : (i : int, cell : LayoutCell) -> void)) : void);
																													(sizeRelatedBehaviours : Behaviour<[WidthHeight]> = ((merge : (behaviours : [Behaviour<WidthHeight>]) -> Behaviour<[WidthHeight]>)(((map : ([DynamicBehaviour<WidthHeight>], (DynamicBehaviour<WidthHeight>) -> Behaviour<WidthHeight>) -> [Behaviour<WidthHeight>])((sizesSrc : [DynamicBehaviour<WidthHeight>]), (whenSizeChanged : (b : Behaviour<WidthHeight>) -> Behaviour<WidthHeight>)) : [Behaviour<WidthHeight>])) : Behaviour<[WidthHeight]>);
																													({
																														(internalUpdate : ref bool = (ref (false : bool) : ref bool);
																														({
																															(data : DynamicBehaviour<GridLayoutSizesData> = ((make : (value : GridLayoutSizesData) -> DynamicBehaviour<GridLayoutSizesData>)((GridLayoutSizesData((zeroWH : WidthHeight), ((generate : (start : int, end : int, fn : (i : int) -> double) -> [double])((0 : int), (sformsCount : int), (\i:int ->
																																(0.0 : double)
																															 : (i : int) -> double)) : [double]), ((generate : (start : int, end : int, fn : (i : int) -> double) -> [double])((0 : int), (sformsCount : int), (\i:int ->
																																(0.0 : double)
																															 : (i : int) -> double)) : [double]), ((generate : (start : int, end : int, fn : (i : int) -> WidthHeight) -> [WidthHeight])((0 : int), (sformsCount : int), (\i:int ->
																																(zeroWH : WidthHeight)
																															 : (i : int) -> WidthHeight)) : [WidthHeight])) : GridLayoutSizesData)) : DynamicBehaviour<GridLayoutSizesData>);
																															({
																																(isToReset : (AvailableReset, AvailableReset) -> bool = (\cellResetType:AvailableReset, resetType:AvailableReset ->
																																	(switch (cellResetType : AvailableReset) {
																																		ARNo(): {
																																			(false : bool)
																																		}
																																		ARDynamic(): {
																																			(((resetType : AvailableReset) != (ARNo() : ARNo)) : bool)
																																		}
																																		ARBoth(): {
																																			(((resetType : AvailableReset) == (ARBoth() : ARBoth)) : bool)
																																		}
																																	} : bool)
																																 : (cellResetType : AvailableReset, resetType : AvailableReset) -> bool);
																																({
																																	(calculateNewCoordinates : (AvailableReset, bool) -> void = (\resetAvailableDependentSizes:AvailableReset, updateWholeSize:bool ->
																																		({
																																			((ignore : (dummy : flow) -> void)((((gPrint : (string) -> (flow) -> flow)(("Calculating new coordinates" : string)) : (flow) -> flow)(("" : string)) : flow)) : void);
																																			((ignore : (dummy : flow) -> void)((((gPrint : (string) -> (flow) -> flow)(("resetAvailableDependentSizes: " : string)) : (flow) -> flow)((resetAvailableDependentSizes : AvailableReset)) : flow)) : void);
																																			((ignore : (dummy : flow) -> void)((((gPrint : (string) -> (flow) -> flow)(("updateWholeSize: " : string)) : (flow) -> flow)((updateWholeSize : bool)) : flow)) : void);
																																			((nextDistinct : (behaviour : DynamicBehaviour<double>, value : double) -> void)((alpha : DynamicBehaviour<double>), ((b2d : (b : bool) -> double)((((resetAvailableDependentSizes : AvailableReset) == (ARNo() : ARNo)) : bool)) : double)) : void);
																																			(((currentSizes : ref [WidthHeight])  :=  (((gPrint : (string) -> (flow) -> flow)(("currentSizes: " : string)) : (flow) -> flow)(((getValue : (behaviour : Behaviour<[WidthHeight]>) -> [WidthHeight])((sizeRelatedBehaviours : Behaviour<[WidthHeight]>)) : [WidthHeight])) : flow)) : void);
																																			(((currentAWH : ref WidthHeight)  :=  (((gPrint : (string) -> (flow) -> flow)(("currentAWH: " : string)) : (flow) -> flow)(((getValue : (behaviour : Behaviour<WidthHeight>) -> WidthHeight)((awh : Behaviour<WidthHeight>)) : WidthHeight)) : flow)) : void);
																																			(wh : flow = (((gPrint : (string) -> (flow) -> flow)(("awh: " : string)) : (flow) -> flow)((if ((((resetAvailableDependentSizes : AvailableReset) != (ARNo() : ARNo)) : bool)) {
																																				(zeroWH : WidthHeight)
																																			} else {
																																				(^(currentAWH : ref WidthHeight) : WidthHeight)
																																			}
																																			 : WidthHeight)) : flow);
																																			({
																																				(sizes : flow = (((gPrint : (string) -> (flow) -> flow)(("sizes: " : string)) : (flow) -> flow)((^(currentSizes : ref [WidthHeight]) : [WidthHeight])) : flow);
																																				({
																																					(maxWidths : flow = (fatlessWidths : flow = (((gPrint : (string) -> (flow) -> flow)(("fatlessWidths: " : string)) : (flow) -> flow)(((map : ([flow], (flow) -> double) -> [double])((columnWidthsCalculationRelatedData : flow), (\widthsData:[flow] ->
																																						((\sz:[double] ->
																																							((either : (m : Maybe<double>, alternative : double) -> double)(((maxA : (a : [double]) -> Maybe<double>)((sz : [double])) : Maybe<double>), (0.0 : double)) : double)
																																						 : (sz : [double]) -> double)(((map : ([Pair<AvailableReset, int>], (Pair<AvailableReset, int>) -> double) -> [double])((widthsData : [flow]), (\dt:Pair<AvailableReset, int> ->
																																							((unpair : (pair : Pair<AvailableReset, int>, fn : (AvailableReset, int) -> double) -> double)((dt : Pair<AvailableReset, int>), (\sizeToReset:AvailableReset, id:int ->
																																								(if (((isToReset : (AvailableReset, AvailableReset) -> bool)((sizeToReset : AvailableReset), (resetAvailableDependentSizes : AvailableReset)) : bool)) {
																																									(0.0 : double)
																																								} else {
																																									(((sizes : flow)[(id : int)] : flow).width : flow)
																																								}
																																								 : double)
																																							 : (sizeToReset : AvailableReset, id : int) -> double)) : double)
																																						 : (dt : Pair<AvailableReset, int>) -> double)) : [double])) : double)
																																					 : (widthsData : [flow]) -> double)) : [double])) : flow);
																																					({
																																						(((gPrint : (string) -> (flow) -> flow)(("maxWidths: " : string)) : (flow) -> flow)(((fold : (xs : [Pair<AvailableReset, int>], init : flow, fn : (flow, Pair<AvailableReset, int>) -> flow) -> flow)((fatWidthCells : [Pair<AvailableReset, int>]), (fatlessWidths : flow), (\widths:[double], cellTriple:Pair<AvailableReset, int> ->
																																							((unpair : (pair : Pair<AvailableReset, int>, fn : (AvailableReset, int) -> [double]) -> [double])((cellTriple : Pair<AvailableReset, int>), (\sizeToReset:AvailableReset, id:int ->
																																								(if (((isToReset : (AvailableReset, AvailableReset) -> bool)((sizeToReset : AvailableReset), (resetAvailableDependentSizes : AvailableReset)) : bool)) {
																																									(widths : [double])
																																								} else {
																																									(cell : LayoutCell = (((grid : GridLayout).cells : [LayoutCell])[(id : int)] : LayoutCell);
																																									({
																																										(width : flow = (((sizes : flow)[(id : int)] : flow).width : flow);
																																										({
																																											(cols : [flow] = ((subrange : ([flow], index : int, length : int) -> [flow])((fatlessWidths : flow), ((cell : LayoutCell).column : int), ((cell : LayoutCell).widthInCells : int)) : [flow]);
																																											({
																																												(columnsWidthsSum : double = ((dsum : (l : [double]) -> double)((cols : [flow])) : double);
																																												({
																																													(delta : flow = (((width : flow) - (columnsWidthsSum : double)) : flow);
																																													({
																																														(if ((((((columnsWidthsSum : double) > (0.0 : double)) : bool) && (((delta : flow) > (0.0 : double)) : bool)) : bool)) {
																																															(updateWidth : (double) -> double = (\w:double ->
																																																(((w : double) + (((((w : double) / (columnsWidthsSum : double)) : double) * (delta : flow)) : double)) : double)
																																															 : (w : double) -> double);
																																															({
																																																((concatA : (a : [[double]]) -> [double])(([((subrange : ([double], index : int, length : int) -> [double])((widths : [double]), (0 : int), ((cell : LayoutCell).column : int)) : [double]), ((map : ([flow], (flow) -> double) -> [double])((cols : [flow]), (updateWidth : (double) -> double)) : [double]), ((subrange : ([double], index : int, length : int) -> [double])((widths : [double]), ((((cell : LayoutCell).column : int) + ((cell : LayoutCell).widthInCells : int)) : int), (((((colsCount : int) - ((cell : LayoutCell).column : int)) : int) - ((cell : LayoutCell).widthInCells : int)) : int)) : [double])] : [[double]])) : [double])
																																															}
																																															 : [double]) : [double])
																																														} else {
																																															(widths : [double])
																																														}
																																														 : [double])
																																													}
																																													 : [double]) : [double])
																																												}
																																												 : [double]) : [double])
																																											}
																																											 : [double]) : [double])
																																										}
																																										 : [double]) : [double])
																																									}
																																									 : [double]) : [double])
																																								}
																																								 : [double])
																																							 : (sizeToReset : AvailableReset, id : int) -> [double])) : [double])
																																						 : (widths : [double], cellTriple : Pair<AvailableReset, int>) -> [double])) : flow)) : flow)
																																					}
																																					 : flow) : flow);
																																					({
																																						(constantWidths : flow = (((gPrint : (string) -> (flow) -> flow)(("constantWidths: " : string)) : (flow) -> flow)(((map : ([flow], (flow) -> flow) -> [flow])((constantWidthsIds : flow), (\id:int ->
																																							((maxWidths : flow)[(id : int)] : flow)
																																						 : (id : int) -> flow)) : [flow])) : flow);
																																						({
																																							(additionalWidth : double = (((gPrint : (string) -> (flow) -> flow)(("additionalWidth: " : string)) : (flow) -> flow)(((max : (flow, flow) -> flow)(((((((wh : flow).width : flow) - ((dsum : (l : [double]) -> double)((constantWidths : flow)) : double)) : flow) - (hGutters : double)) : flow), (0.0 : double)) : flow)) : flow);
																																							({
																																								(colsWidths : flow = (((gPrint : (string) -> (flow) -> flow)(("colsWidths: " : string)) : (flow) -> flow)(((foldi : (xs : [double], init : [double], fn : (int, [double], double) -> [double]) -> [double])((columnsGrowthParts : [double]), ([] : [double]), (\i:int, acc:[double], growth:double ->
																																									(if ((((growth : double) == (0.0 : double)) : bool)) {
																																										((arrayPush : (array : [double], value : double) -> [double])((acc : [double]), ((maxWidths : flow)[(i : int)] : flow)) : [double])
																																									} else {
																																										((arrayPush : (array : [double], value : double) -> [double])((acc : [double]), ((max : (double, double) -> double)((((additionalWidth : double) * (growth : double)) : double), ((maxWidths : flow)[(i : int)] : flow)) : double)) : [double])
																																									}
																																									 : [double])
																																								 : (i : int, acc : [double], growth : double) -> [double])) : [double])) : flow);
																																								({
																																									(maxHeights : flow = (fatlessHeights : flow = (((gPrint : (string) -> (flow) -> flow)(("fatlessHeights: " : string)) : (flow) -> flow)(((map : ([flow], (flow) -> double) -> [double])((rowsHeightsCalculationRelatedData : flow), (\heightsData:[flow] ->
																																										((\sz:[double] ->
																																											((either : (m : Maybe<double>, alternative : double) -> double)(((maxA : (a : [double]) -> Maybe<double>)((sz : [double])) : Maybe<double>), (0.0 : double)) : double)
																																										 : (sz : [double]) -> double)(((map : ([Pair<AvailableReset, int>], (Pair<AvailableReset, int>) -> double) -> [double])((heightsData : [flow]), (\dt:Pair<AvailableReset, int> ->
																																											((unpair : (pair : Pair<AvailableReset, int>, fn : (AvailableReset, int) -> double) -> double)((dt : Pair<AvailableReset, int>), (\sizeToReset:AvailableReset, id:int ->
																																												(if (((isToReset : (AvailableReset, AvailableReset) -> bool)((sizeToReset : AvailableReset), (resetAvailableDependentSizes : AvailableReset)) : bool)) {
																																													(0.0 : double)
																																												} else {
																																													(((sizes : flow)[(id : int)] : flow).height : flow)
																																												}
																																												 : double)
																																											 : (sizeToReset : AvailableReset, id : int) -> double)) : double)
																																										 : (dt : Pair<AvailableReset, int>) -> double)) : [double])) : double)
																																									 : (heightsData : [flow]) -> double)) : [double])) : flow);
																																									({
																																										(((gPrint : (string) -> (flow) -> flow)(("maxHeights: " : string)) : (flow) -> flow)(((fold : (xs : [Pair<AvailableReset, int>], init : flow, fn : (flow, Pair<AvailableReset, int>) -> flow) -> flow)((fatHeightCells : [Pair<AvailableReset, int>]), (fatlessHeights : flow), (\heights:[double], cellTriple:Pair<AvailableReset, int> ->
																																											((unpair : (pair : Pair<AvailableReset, int>, fn : (AvailableReset, int) -> [double]) -> [double])((cellTriple : Pair<AvailableReset, int>), (\sizeToReset:AvailableReset, id:int ->
																																												(if (((isToReset : (AvailableReset, AvailableReset) -> bool)((sizeToReset : AvailableReset), (resetAvailableDependentSizes : AvailableReset)) : bool)) {
																																													(heights : [double])
																																												} else {
																																													(cell : LayoutCell = (((grid : GridLayout).cells : [LayoutCell])[(id : int)] : LayoutCell);
																																													({
																																														(height : flow = (((sizes : flow)[(id : int)] : flow).height : flow);
																																														({
																																															(cols : [flow] = ((subrange : ([flow], index : int, length : int) -> [flow])((fatlessHeights : flow), ((cell : LayoutCell).row : int), ((cell : LayoutCell).heightInCells : int)) : [flow]);
																																															({
																																																(rowsHeightsSum : double = ((dsum : (l : [double]) -> double)((cols : [flow])) : double);
																																																({
																																																	(delta : flow = (((height : flow) - (rowsHeightsSum : double)) : flow);
																																																	({
																																																		(if ((((((rowsHeightsSum : double) > (0.0 : double)) : bool) && (((delta : flow) > (0.0 : double)) : bool)) : bool)) {
																																																			(updateHeight : (double) -> double = (\h:double ->
																																																				(((h : double) + (((((h : double) / (rowsHeightsSum : double)) : double) * (delta : flow)) : double)) : double)
																																																			 : (h : double) -> double);
																																																			({
																																																				((concatA : (a : [[double]]) -> [double])(([((subrange : ([double], index : int, length : int) -> [double])((heights : [double]), (0 : int), ((cell : LayoutCell).row : int)) : [double]), ((map : ([flow], (flow) -> double) -> [double])((cols : [flow]), (updateHeight : (double) -> double)) : [double]), ((subrange : ([double], index : int, length : int) -> [double])((heights : [double]), ((((cell : LayoutCell).row : int) + ((cell : LayoutCell).heightInCells : int)) : int), (((((colsCount : int) - ((cell : LayoutCell).row : int)) : int) - ((cell : LayoutCell).heightInCells : int)) : int)) : [double])] : [[double]])) : [double])
																																																			}
																																																			 : [double]) : [double])
																																																		} else {
																																																			(heights : [double])
																																																		}
																																																		 : [double])
																																																	}
																																																	 : [double]) : [double])
																																																}
																																																 : [double]) : [double])
																																															}
																																															 : [double]) : [double])
																																														}
																																														 : [double]) : [double])
																																													}
																																													 : [double]) : [double])
																																												}
																																												 : [double])
																																											 : (sizeToReset : AvailableReset, id : int) -> [double])) : [double])
																																										 : (heights : [double], cellTriple : Pair<AvailableReset, int>) -> [double])) : flow)) : flow)
																																									}
																																									 : flow) : flow);
																																									({
																																										(constantHeights : flow = (((gPrint : (string) -> (flow) -> flow)(("constantHeights: " : string)) : (flow) -> flow)(((map : ([flow], (flow) -> double) -> [double])((constantHeightsIds : flow), (\id:int ->
																																											(if ((((id : int) >= ((length : ([flow]) -> int)((maxHeights : flow)) : int)) : bool)) {
																																												(0.0 : double)
																																											} else {
																																												((maxHeights : flow)[(id : int)] : flow)
																																											}
																																											 : double)
																																										 : (id : int) -> double)) : [double])) : flow);
																																										({
																																											(additionalHeight : double = (((gPrint : (string) -> (flow) -> flow)(("additionalHeight: " : string)) : (flow) -> flow)(((max : (flow, flow) -> flow)(((((((wh : flow).height : flow) - ((dsum : (l : [double]) -> double)((constantHeights : flow)) : double)) : flow) - (vGutters : double)) : flow), (0.0 : double)) : flow)) : flow);
																																											({
																																												(rowsHeights : flow = (((gPrint : (string) -> (flow) -> flow)(("rowsHeights: " : string)) : (flow) -> flow)(((foldi : (xs : [double], init : [double], fn : (int, [double], double) -> [double]) -> [double])((rowsGrowthParts : [double]), ([] : [double]), (\i:int, acc:[double], growth:double ->
																																													(maxHeight : double = (if ((((i : int) >= ((length : ([flow]) -> int)((maxHeights : flow)) : int)) : bool)) {
																																														(0.0 : double)
																																													} else {
																																														((maxHeights : flow)[(i : int)] : flow)
																																													}
																																													 : double);
																																													({
																																														(if ((((growth : double) == (0.0 : double)) : bool)) {
																																															((arrayPush : (array : [double], value : double) -> [double])((acc : [double]), (maxHeight : double)) : [double])
																																														} else {
																																															((arrayPush : (array : [double], value : double) -> [double])((acc : [double]), ((max : (double, double) -> double)((((additionalHeight : double) * (growth : double)) : double), (maxHeight : double)) : double)) : [double])
																																														}
																																														 : [double])
																																													}
																																													 : [double]) : [double])
																																												 : (i : int, acc : [double], growth : double) -> [double])) : [double])) : flow);
																																												({
																																													(xOffsets : [double] = ((mapi : ([LayoutCell], (int, LayoutCell) -> double) -> [double])(((grid : GridLayout).cells : [LayoutCell]), (\i:int, cell:LayoutCell ->
																																														((((dsum : (l : [double]) -> double)(((subrange : ([flow], index : int, length : int) -> [flow])((colsWidths : flow), (0 : int), ((cell : LayoutCell).column : int)) : [flow])) : double) + ((((i2d : (i : int) -> double)(((cell : LayoutCell).column : int)) : double) * (((grid : GridLayout).columns : LayoutSpec).gutter : double)) : double)) : double)
																																													 : (i : int, cell : LayoutCell) -> double)) : [double]);
																																													({
																																														(yOffsets : [double] = ((mapi : ([LayoutCell], (int, LayoutCell) -> double) -> [double])(((grid : GridLayout).cells : [LayoutCell]), (\i:int, cell:LayoutCell ->
																																															((((dsum : (l : [double]) -> double)(((subrange : ([flow], index : int, length : int) -> [flow])((rowsHeights : flow), (0 : int), ((cell : LayoutCell).row : int)) : [flow])) : double) + ((((i2d : (i : int) -> double)(((cell : LayoutCell).row : int)) : double) * (((grid : GridLayout).rows : LayoutSpec).gutter : double)) : double)) : double)
																																														 : (i : int, cell : LayoutCell) -> double)) : [double]);
																																														({
																																															(availables : flow = (((gPrint : (string) -> (flow) -> flow)(("availables: " : string)) : (flow) -> flow)(((mapi : ([LayoutCell], (int, LayoutCell) -> WidthHeight) -> [WidthHeight])(((grid : GridLayout).cells : [LayoutCell]), (\i:int, cell:LayoutCell ->
																																																(WidthHeight(((((dsum : (l : [double]) -> double)(((subrange : ([flow], index : int, length : int) -> [flow])((colsWidths : flow), ((cell : LayoutCell).column : int), ((cell : LayoutCell).widthInCells : int)) : [flow])) : double) + ((((i2d : (i : int) -> double)(((((cell : LayoutCell).widthInCells : int) - (1 : int)) : int)) : double) * (((grid : GridLayout).columns : LayoutSpec).gutter : double)) : double)) : double), ((((dsum : (l : [double]) -> double)(((subrange : ([flow], index : int, length : int) -> [flow])((rowsHeights : flow), ((cell : LayoutCell).row : int), ((cell : LayoutCell).heightInCells : int)) : [flow])) : double) + ((((i2d : (i : int) -> double)(((((cell : LayoutCell).heightInCells : int) - (1 : int)) : int)) : double) * (((grid : GridLayout).rows : LayoutSpec).gutter : double)) : double)) : double)) : WidthHeight)
																																															 : (i : int, cell : LayoutCell) -> WidthHeight)) : [WidthHeight])) : flow);
																																															({
																																																(wholeWidth : double = ((i2d : (i : int) -> double)(((floor : (d : double) -> int)(((dsum : (l : [double]) -> double)((colsWidths : flow)) : double)) : int)) : double);
																																																({
																																																	(wholeHeight : double = ((i2d : (i : int) -> double)(((floor : (d : double) -> int)(((dsum : (l : [double]) -> double)((rowsHeights : flow)) : double)) : int)) : double);
																																																	({
																																																		(addGutters : (double) -> (double) -> double = (\gutters:double ->
																																																			(\base:double ->
																																																				(if ((((base : double) > (0.0 : double)) : bool)) {
																																																					(((base : double) + (gutters : double)) : double)
																																																				} else {
																																																					(0.0 : double)
																																																				}
																																																				 : double)
																																																			 : (base : double) -> double)
																																																		 : (gutters : double) -> (base : double) -> double);
																																																		({
																																																			(wholeSize : flow = (((gPrint : (string) -> (flow) -> flow)(("wholeSize: " : string)) : (flow) -> flow)((WidthHeight((((addGutters : (double) -> (double) -> double)((hGutters : double)) : (double) -> double)((wholeWidth : double)) : double), (((addGutters : (double) -> (double) -> double)((vGutters : double)) : (double) -> double)((wholeHeight : double)) : double)) : WidthHeight)) : flow);
																																																			({
																																																				(newWholeSize : flow = (((gPrint : (string) -> (flow) -> flow)(("newWholeSize: " : string)) : (flow) -> flow)((if ((updateWholeSize : bool)) {
																																																					(wholeSize : flow)
																																																				} else {
																																																					(((getValue : (behaviour : Behaviour<GridLayoutSizesData>) -> GridLayoutSizesData)((data : DynamicBehaviour<GridLayoutSizesData>)) : GridLayoutSizesData).size : WidthHeight)
																																																				}
																																																				 : flow)) : flow);
																																																				({
																																																					((nextDistinct : (behaviour : DynamicBehaviour<GridLayoutSizesData>, value : GridLayoutSizesData) -> void)((data : DynamicBehaviour<GridLayoutSizesData>), (GridLayoutSizesData((newWholeSize : flow), (xOffsets : [double]), (yOffsets : [double]), (availables : flow)) : GridLayoutSizesData)) : void)
																																																				}
																																																				 : void) : void)
																																																			}
																																																			 : void) : void)
																																																		}
																																																		 : void) : void)
																																																	}
																																																	 : void) : void)
																																																}
																																																 : void) : void)
																																															}
																																															 : void) : void)
																																														}
																																														 : void) : void)
																																													}
																																													 : void) : void)
																																												}
																																												 : void) : void)
																																											}
																																											 : void) : void)
																																										}
																																										 : void) : void)
																																									}
																																									 : void) : void)
																																								}
																																								 : void) : void)
																																							}
																																							 : void) : void)
																																						}
																																						 : void) : void)
																																					}
																																					 : void) : void)
																																				}
																																				 : void) : void)
																																			}
																																			 : void) : void)
																																		}
																																		 : void)
																																	 : (resetAvailableDependentSizes : AvailableReset, updateWholeSize : bool) -> void);
																																	({
																																		(stopUpdate : ref () -> void = (ref (\ ->
																																			({} : void)
																																		 : () -> void) : ref () -> void);
																																		({
																																			(protectedApply : (() -> void) -> void = (\fn:() -> void ->
																																				({
																																					((^(stopUpdate : ref () -> void) : () -> void)() : void);
																																					(if ((!(^(internalUpdate : ref bool) : bool) : bool)) {
																																						({
																																							(((internalUpdate : ref bool)  :=  (true : bool)) : void);
																																							(((stopUpdate : ref () -> void)  :=  ((interruptibleTimer : (t : int, fn : () -> void) -> () -> void)((5 : int), (fn : () -> void)) : () -> void)) : void)
																																						}
																																						 : void)
																																					} else {
																																						(((stopUpdate : ref () -> void)  :=  ((interruptibleTimer : (t : int, fn : () -> void) -> () -> void)((5 : int), (fn : () -> void)) : () -> void)) : void)
																																					}
																																					 : void)
																																				}
																																				 : void)
																																			 : (fn : () -> void) -> void);
																																			({
																																				(stableSizes : DynamicBehaviour<[WidthHeight]> = (provider : DynamicBehaviour<[WidthHeight]> = ((make : (value : [WidthHeight]) -> DynamicBehaviour<[WidthHeight]>)(((getValue : (behaviour : Behaviour<[WidthHeight]>) -> [WidthHeight])((sizeRelatedBehaviours : Behaviour<[WidthHeight]>)) : [WidthHeight])) : DynamicBehaviour<[WidthHeight]>);
																																				({
																																					(stopTimer : ref () -> void = (ref (\ ->
																																						({} : void)
																																					 : () -> void) : ref () -> void);
																																					({
																																						((subscribe2 : (behaviour : Behaviour<[WidthHeight]>, fn : ([WidthHeight]) -> void) -> () -> void)((sizeRelatedBehaviours : Behaviour<[WidthHeight]>), (\v:[WidthHeight] ->
																																							({
																																								((^(stopTimer : ref () -> void) : () -> void)() : void);
																																								(((stopTimer : ref () -> void)  :=  ((interruptibleTimer : (t : int, fn : () -> void) -> () -> void)((5 : int), (\ ->
																																									({
																																										(((stopTimer : ref () -> void)  :=  (\ ->
																																											({} : void)
																																										 : () -> void)) : void);
																																										((nextDistinct : (behaviour : DynamicBehaviour<[WidthHeight]>, value : [WidthHeight]) -> void)((provider : DynamicBehaviour<[WidthHeight]>), ((getValue : (behaviour : Behaviour<[WidthHeight]>) -> [WidthHeight])((sizeRelatedBehaviours : Behaviour<[WidthHeight]>)) : [WidthHeight])) : void)
																																									}
																																									 : void)
																																								 : () -> void)) : () -> void)) : void)
																																							}
																																							 : void)
																																						 : (v : [WidthHeight]) -> void)) : () -> void);
																																						(provider : DynamicBehaviour<[WidthHeight]>)
																																					}
																																					 : DynamicBehaviour<[WidthHeight]>) : DynamicBehaviour<[WidthHeight]>)
																																				}
																																				 : DynamicBehaviour<[WidthHeight]>) : DynamicBehaviour<[WidthHeight]>);
																																				({
																																					(((currentSizes : ref [WidthHeight])  :=  ((getValue : (behaviour : Behaviour<[WidthHeight]>) -> [WidthHeight])((sizeRelatedBehaviours : Behaviour<[WidthHeight]>)) : [WidthHeight])) : void);
																																					(infiniteLoop : () -> () -> void = (\ ->
																																						(uns0 : () -> void = ((subscribe2 : (behaviour : Behaviour<WidthHeight>, fn : (WidthHeight) -> void) -> () -> void)(((whenSizeChanged : (b : Behaviour<WidthHeight>) -> Behaviour<WidthHeight>)((awh : Behaviour<WidthHeight>)) : Behaviour<WidthHeight>), (\wh:WidthHeight ->
																																							((protectedApply : (() -> void) -> void)((\ ->
																																								({
																																									((calculateNewCoordinates : (AvailableReset, bool) -> void)((ARBoth() : ARBoth), (false : bool)) : void);
																																									((calculateNewCoordinates : (AvailableReset, bool) -> void)((ARDynamic() : ARDynamic), (false : bool)) : void);
																																									((calculateNewCoordinates : (AvailableReset, bool) -> void)((ARNo() : ARNo), (false : bool)) : void);
																																									((calculateNewCoordinates : (AvailableReset, bool) -> void)((ARNo() : ARNo), (true : bool)) : void);
																																									(((internalUpdate : ref bool)  :=  (false : bool)) : void)
																																								}
																																								 : void)
																																							 : () -> void)) : void)
																																						 : (wh : WidthHeight) -> void)) : () -> void);
																																						({
																																							(uns1 : () -> void = ((subscribe2 : (behaviour : Behaviour<[WidthHeight]>, fn : ([WidthHeight]) -> void) -> () -> void)((stableSizes : DynamicBehaviour<[WidthHeight]>), (\sizes:[WidthHeight] ->
																																								((protectedApply : (() -> void) -> void)((\ ->
																																									({
																																										((calculateNewCoordinates : (AvailableReset, bool) -> void)((ARDynamic() : ARDynamic), (true : bool)) : void);
																																										((calculateNewCoordinates : (AvailableReset, bool) -> void)((ARNo() : ARNo), (true : bool)) : void);
																																										((calculateNewCoordinates : (AvailableReset, bool) -> void)((ARNo() : ARNo), (true : bool)) : void);
																																										(((internalUpdate : ref bool)  :=  (false : bool)) : void)
																																									}
																																									 : void)
																																								 : () -> void)) : void)
																																							 : (sizes : [WidthHeight]) -> void)) : () -> void);
																																							({
																																								(\ ->
																																									({
																																										((uns1 : () -> void)() : void);
																																										((uns0 : () -> void)() : void)
																																									}
																																									 : void)
																																								 : () -> void)
																																							}
																																							 : () -> void) : () -> void)
																																						}
																																						 : () -> void) : () -> void)
																																					 : () -> () -> void);
																																					({
																																						(if ((^(wrongSource : ref bool) : bool)) {
																																							(Pair((Text(("Incorrect source" : string), ([(Fill((0 : int)) : Fill)] : [Fill])) : Text), ([] : [Coordinates])) : Pair<Form, [Coordinates]>)
																																						} else {
																																							(coordinatesArray : [Coordinates] = ((mapi : ([LayoutCell], (int, LayoutCell) -> Coordinates) -> [Coordinates])(((grid : GridLayout).cells : [LayoutCell]), (\i:int, __:LayoutCell ->
																																								(Coordinates(((select : (behaviour : Behaviour<GridLayoutSizesData>, fn : (GridLayoutSizesData) -> double) -> Behaviour<double>)((data : DynamicBehaviour<GridLayoutSizesData>), (\dt:GridLayoutSizesData ->
																																									(((dt : GridLayoutSizesData).xOffsets : [double])[(i : int)] : double)
																																								 : (dt : GridLayoutSizesData) -> double)) : Behaviour<double>), ((select : (behaviour : Behaviour<GridLayoutSizesData>, fn : (GridLayoutSizesData) -> double) -> Behaviour<double>)((data : DynamicBehaviour<GridLayoutSizesData>), (\dt:GridLayoutSizesData ->
																																									(((dt : GridLayoutSizesData).yOffsets : [double])[(i : int)] : double)
																																								 : (dt : GridLayoutSizesData) -> double)) : Behaviour<double>), ((select : (behaviour : Behaviour<GridLayoutSizesData>, fn : (GridLayoutSizesData) -> WidthHeight) -> Behaviour<WidthHeight>)((data : DynamicBehaviour<GridLayoutSizesData>), (\dt:GridLayoutSizesData ->
																																									(((dt : GridLayoutSizesData).availables : [WidthHeight])[(i : int)] : WidthHeight)
																																								 : (dt : GridLayoutSizesData) -> WidthHeight)) : Behaviour<WidthHeight>)) : Coordinates)
																																							 : (i : int, __ : LayoutCell) -> Coordinates)) : [Coordinates]);
																																							({
																																								(Pair((Size2(((whenSizeChanged : (b : Behaviour<WidthHeight>) -> Behaviour<WidthHeight>)(((select : (behaviour : Behaviour<GridLayoutSizesData>, fn : (GridLayoutSizesData) -> WidthHeight) -> Behaviour<WidthHeight>)((data : DynamicBehaviour<GridLayoutSizesData>), (\dt:GridLayoutSizesData ->
																																									((dt : GridLayoutSizesData).size : WidthHeight)
																																								 : (dt : GridLayoutSizesData) -> WidthHeight)) : Behaviour<WidthHeight>)) : Behaviour<WidthHeight>), (Constructor((Group(((mapi : ([LayoutCell], (int, LayoutCell) -> Grid) -> [Grid])(((grid : GridLayout).cells : [LayoutCell]), (\i:int, cell:LayoutCell ->
																																									(coordinates : Coordinates = ((coordinatesArray : [Coordinates])[(i : int)] : Coordinates);
																																									({
																																										(form : Form = ((sform2form : (namedForms : Tree<string, NamedFormDescription>, coordinates : Coordinates, environment : SkinEnvironment, sform : SForm, outSize : DynamicBehaviour<WidthHeight>) -> Form)((namedForms : Tree<string, NamedFormDescription>), (coordinates : Coordinates), (environment : SkinEnvironment), ((cell : LayoutCell).content : SForm), ((sizesSrc : [DynamicBehaviour<WidthHeight>])[(i : int)] : DynamicBehaviour<WidthHeight>)) : Form);
																																										({
																																											((RenderAtCoordinates : (coordinates : Coordinates, form : Form) -> Grid)((coordinates : Coordinates), (form : Form)) : Grid)
																																										}
																																										 : Grid) : Grid)
																																									}
																																									 : Grid) : Grid)
																																								 : (i : int, cell : LayoutCell) -> Grid)) : [Grid])) : Group), (infiniteLoop : () -> () -> void)) : Constructor)) : Size2), (coordinatesArray : [Coordinates])) : Pair<Form, [Coordinates]>)
																																							}
																																							 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																																						}
																																						 : Pair<Form, [Coordinates]>)
																																					}
																																					 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																																				}
																																				 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																																			}
																																			 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																																		}
																																		 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																																	}
																																	 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																																}
																																 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																															}
																															 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																														}
																														 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																													}
																													 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																												}
																												 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																											}
																											 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																										}
																										 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																									}
																									 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																								}
																								 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																							}
																							 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																						}
																						 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																					}
																					 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																				}
																				 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																			}
																			 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																		}
																		 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																	}
																	 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
																}
																 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
															}
															 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
														}
														 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
													}
													 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
												}
												 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
											}
											 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
										}
										 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
									}
									 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
								}
								 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
							}
							 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
						}
						 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
					}
					 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
				}
				 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
			}
			 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
		}
		 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
	}
	 : Pair<Form, [Coordinates]>) : Pair<Form, [Coordinates]>)
 : (grid : GridLayout, namedForms : Tree<string, NamedFormDescription>, environment : SkinEnvironment, alpha : DynamicBehaviour<double>, respectFatCells : bool) -> Pair<Form, [Coordinates]>);
