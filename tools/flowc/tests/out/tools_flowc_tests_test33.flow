import ds/set;

// Does the partition, and returns the final partition
doHopcroft(partitions : Set<Set<int>>, work : Set<Set<int>>) -> Set<Set<int>> {
	pw = fold([], Pair(partitions, makeSet()), \pacc0, Xa -> {
		foldSet(pacc0.first, pacc0, \pacc, Ypartition -> {
			pacc;
		});
	});

	doHopcroft(pw.first, pw.second);
}

----------

doHopcroft = (\partitions:Set<Set>, work:Set<Set> ->
	(pw : Pair<Set<Set<int>>, Set<Set<int>>> = ((fold : (xs : [?], init : Pair<Set<Set<int>>, Set<Set<int>>>, fn : (Pair<Set<Set<int>>, Set<Set<int>>>, ?) -> Pair<Set<Set<int>>, Set<Set<int>>>) -> Pair<Set<Set<int>>, Set<Set<int>>>)(([] : [?]), (Pair((partitions : Set<Set>), ((makeSet : () -> Set<Set<int>>)() : Set<Set<int>>)) : Pair<Set<Set<int>>, Set<Set<int>>>), (\pacc0:Pair<Set<Set<int>>, Set<Set<int>>>, Xa:? ->
		((foldSet : (s : Set<Set<int>>, init : Pair<Set<Set<int>>, Set<Set<int>>>, fn : (Pair<Set<Set<int>>, Set<Set<int>>>, Set<int>) -> Pair<Set<Set<int>>, Set<Set<int>>>) -> Pair<Set<Set<int>>, Set<Set<int>>>)(((pacc0 : Pair<Set<Set<int>>, Set<Set<int>>>).first : Set<Set<int>>), (pacc0 : Pair<Set<Set<int>>, Set<Set<int>>>), (\pacc:Pair<Set<Set<int>>, Set<Set<int>>>, Ypartition:Set<int> ->
			(pacc : Pair<Set<Set<int>>, Set<Set<int>>>)
		 : (pacc : Pair<Set<Set<int>>, Set<Set<int>>>, Ypartition : Set<int>) -> Pair<Set<Set<int>>, Set<Set<int>>>)) : Pair<Set<Set<int>>, Set<Set<int>>>)
	 : (pacc0 : Pair<Set<Set<int>>, Set<Set<int>>>, Xa : ?) -> Pair<Set<Set<int>>, Set<Set<int>>>)) : Pair<Set<Set<int>>, Set<Set<int>>>);
	({
		((doHopcroft : (partitions : Set<Set>, work : Set<Set>) -> Set<Set>)(((pw : Pair<Set<Set<int>>, Set<Set<int>>>).first : Set<Set<int>>), ((pw : Pair<Set<Set<int>>, Set<Set<int>>>).second : Set<Set<int>>)) : Set<Set>)
	}
	 : Set<Set>) : Set<Set>)
 : (partitions : Set<Set>, work : Set<Set>) -> Set<Set>);
