import ds/easygraph;
import ds/tree;
import text/serialize;

TestType ::= TestType1, TestType2, TestType3;

TestType1();
TestType2();
TestType3();

testFunc(triples : [Triple<TestType, TestType, double>]) -> void {
	typesInvolved = [TestType1(), TestType2(), TestType3()];
	ids = pairs2tree(mapi(typesInvolved, \i, unit -> Pair(unit, i)));

	graph = fold(triples,
		foldi(typesInvolved, makeEasyGraph(), \i, acc, type -> addEGNode(acc, GNode(i, type))),
		\acc, triple -> {
			edgeIds = [
				lookupTreeDef(ids, triple.first, 0),
				lookupTreeDef(ids, triple.second, 0),
			];

			addEGEdge(addEGEdge(acc, GEdge(edgeIds[0], edgeIds[1], triple.third, 1)), GEdge(edgeIds[1], edgeIds[0], 1.0 / triple.third, 1))
		}
	);

	reverseConversions = map(
		[Pair(TestType3(), TestType2()), Pair(TestType3(), TestType1()), Pair(TestType2(), TestType1())],
		\convPair : Pair<TestType, TestType> -> {
			Triple(convPair.first, convPair.second, deepFirstSearchInEasyGraphBackward(
				graph,
				lookupTreeDef(ids, convPair.first, -1),
				Pair(1.0, false),
				\acc, __, edgeM : Maybe<GEdge>, isVisited -> {
					println("Preprocessing node (" + serialize(acc) + ")"); //					<-------- This is the root cause, commenting this line produces errors from typechecker
					if (!isVisited) {
						Pair(
							eitherMap(edgeM, \edge -> Pair(1.0, true), acc),
							true
						);
					} else
						acc; //						<----- This is our wrong guy, should be Pair(acc, whatever)
				},
				\acc, __, __ -> {
					acc
				}
			))
		}
		
	);
}

main() {
	testFunc([
		Triple(TestType1(), TestType2(), 1.609344),
		Triple(TestType1(), TestType3(), 1760.0),
	]);
}
