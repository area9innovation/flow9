import tools/flowc/incremental/fi2flowsrc;
import tools/flowc/tests/incremental/stochastic_gen;

export {
	// Returns an array of indexes of changed modules
	renameAStructField(i : int, struct : FiTypeStruct, gen : GenModules) -> GenModules;
}

renameAStructField(i : int, struct : FiTypeStruct, gen : GenModules) -> GenModules {
	if (length(struct.args) == 0) gen else {
		field_ind = randomInt(gen.env.rand, length(struct.args));
		to_rename = struct.args[field_ind];
		renamed = FiStructArg("f" + to_rename.name, to_rename.type, false);
		println("\tfield " + to_rename.name + " of type " + prettyFiType(dummyPretty, to_rename.type, makeSet()) + " from struct " + struct.name + " is renamed to " + renamed.name);
		new_struct = FiTypeStruct(
			struct.name, [], 
			fold(struct.args, [], \acc, arg -> concat(acc, [if (arg == to_rename) renamed else arg])), -1
		);
		orig_module = gen.modules[i];
		new_module = FiModule(orig_module with 
			structs = [new_struct],
			imports = generateImports(gen.env, new_struct)
		);
		new_env = GenEnv(gen.env with structs = setTree(gen.env.structs, struct.name, new_struct));
		new_modules = foldi(gen.modules, [],
			\j, acc, m -> {
				if (i == j) {
					writeModule(new_module);
					concat(acc, [new_module])
				} else {
					switch (renameAStructFieldInModule(gen.env, struct.name, field_ind, renamed, m)) {
						Some(new_m): {
							writeModule(new_m);
							concat(acc, [new_m])
						}
						None(): concat(acc, [m]);
					}
				}
			}
		)
		GenModules(new_modules, new_env)
	}
}

renameAStructFieldInModule(env : GenEnv, struct : string, field_ind : int, renamed : FiStructArg, m : FiModule) -> Maybe<FiModule> {
	if (length(m.structs) > 0) {
		None()
	} else if (length(m.unions) > 0) {
		None()
	} else if (length(m.functions) > 0) {
		func = m.functions[0];
		new_lambda = renameAStructFieldInExp(env, struct, field_ind, renamed, func.lambda);
		if (func.lambda == new_lambda) None() else {
			println("\tmodule: " + m.fileinfo.flowfile + " changed");
			Some(FiModule(m with functions = [FiFunctionDec(func with lambda = cast(new_lambda : FiExp -> FiLambda))]))
		}
	} else if (length(m.globalVars) > 0) {
		var = m.globalVars[0];
		new_value = renameAStructFieldInExp(env, struct, field_ind, renamed, var.value);
		if (var.value == new_value) None() else {
			println("\tmodule: " + m.fileinfo.flowfile + " changed");
			Some(FiModule(m with globalVars = [FiGlobalVar(var with value = new_value)]))
		}
	} else {
		None()
	}
}

renameAStructFieldInExp(env : GenEnv, struct : string, field_ind : int, renamed : FiStructArg, ex : FiExp) -> FiExp {
	ex
}
