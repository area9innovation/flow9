import tools/flowc/tests/incremental/stochastic_gen;
import tools/flowc/tests/incremental/stochastic_add_field;
import tools/flowc/tests/incremental/stochastic_remove_field;
import tools/flowc/tests/incremental/stochastic_rename_field;
import tools/flowc/tests/incremental/stochastic_change_field_type;
import tools/flowc/tests/incremental/stochastic_expand_union;
import tools/flowc/tests/incremental/stochastic_reduce_union;

export {
	mutateModules(curr : GenModules) -> GenModules;
}

mutateModules(curr : GenModules) -> GenModules {
	next = tryToMutateModules(curr);
	if (next != curr) next else mutateModules(curr);
}

tryToMutateModules(curr : GenModules) -> GenModules {
	ind = randomInt(curr.env.rand, length(curr.modules));
	module = curr.modules[ind];
	if (length(module.structs) > 0) {
		// A struct module
		struct = module.structs[0];
		choice = randomInt(curr.env.rand, 4);
		if (choice == 0) {
			// add a field
			addAStructField(ind, struct, curr);
		} else if (choice == 1) {
			// delete a field 
			removeAStructField(ind, struct, curr);
		} else if (choice == 2) {
			// rename a field
			renameAStructField(ind, struct, curr);
		} else if (choice == 3) {
			// change field type
			changeAStructFieldType(ind, struct, curr);
		} else {
			curr
		}
	} else if (length(module.unions) > 0) {
		// A union module
		union = module.unions[0];
		choice = randomInt(curr.env.rand, 2);
		if (choice == 0) {
			// Add a random type name to the union
			expandAUnion(ind, union, curr);
		} else if (choice == 1) {
			// Remove a random struct from the union
			reduceAUnion(ind, union, curr);
		} else {
			curr
		}
	} else if (length(module.functions) > 0) {
		tryToMutateModules(curr)  ///[]
	} else if (length(module.globalVars) > 0) {
		tryToMutateModules(curr)  //[]
	} else {
		curr
	}
}


