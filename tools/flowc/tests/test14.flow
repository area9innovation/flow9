import ds/array;

for(init, predicate, f) {
	if (predicate(init)) for(f(init), predicate, f) else init
}

native strlen : (string) -> int = Native.strlen;
native strIndexOf : (string, string) -> int = Native.strIndexOf;
native substring : (s : string, start : int, length : int) -> string = Native.substring;

strsubsmart(s : string, start : int, len : int) -> string {
	if (start >= 0 && len > 0) {
		substring(s, start, len)
	} else {
		slen = strlen(s);
		trueStart = if (start >= 0) start else { ss = slen + start; if (ss >= 0) ss else 0; };
		trueLength = if (len > 0) len else slen + len - trueStart;

		substring(s, trueStart, trueLength)
	}
}

// Implemented natively by targets where substring actually copies characters & cpp
native strRangeIndexOf : (string, string, int, int) -> int = Native.strRangeIndexOf;

strRangeIndexOf(str, substr, start, end) {
	rv = strIndexOf(substring(str, start, end-start), substr);
	if (rv < 0) rv else start+rv;
}


countUntil(start, maxcount, predicate) {
	if (start >= maxcount) maxcount
	else if (predicate(start)) start
	else countUntil(start + 1, maxcount, predicate);
}

strLastIndexOf(s, p) {
	i = strIndexOf(s, p);
	if (i == -1) {
		-1;
	} else {
		l = strlen(s);
		pl = strlen(p);
		if (pl == 0) {
			0;
		} else {
			// TODO: We could skip until i and call ourselves recursively
			f = countUntil(0, l - pl + 1, \i2 -> {
				substring(s, l - pl - i2, pl) == p;
			});
			l - pl - f;
		}
	}
}

strReplaceCustomRec(prefix, suffix, old, new, charBeforeFn, charAfterFn) {
	if (old == "") {
		prefix + suffix
	} else {
		// assuming prefix is part with replacement done
		i = strIndexOf(suffix, old);
		if (i >= 0) {
			oldLen = strlen(old);
			getCharBefore = \ -> {
				if (i == 0) strsubsmart(prefix, -1, 0)
				else substring(suffix, i-1, 1);
			};

			isCharBeforeGood = \ -> eitherMap(charBeforeFn, \fn -> fn(getCharBefore()), true);
			ischarAfterGood = \ ->  eitherMap(charAfterFn, \fn -> fn(substring(suffix, i + oldLen, 1)), true);

			l = strlen(suffix);
			if (isCharBeforeGood() && ischarAfterGood()) {
				// do replace and continue search
				strReplaceCustomRec(prefix + substring(suffix, 0, i) + new, substring(suffix, i + oldLen, l - i - oldLen), old, new, charBeforeFn, charAfterFn);
			} else {
				// continue search
				if (i + 1 < l)
					strReplaceCustomRec(prefix + substring(suffix, 0, i + 1), substring(suffix, i + 1, l - (i + 1)), old, new, charBeforeFn, charAfterFn)
				else
					prefix + suffix  // end of string reached, stopping
			}
		} else {
			prefix + suffix // no more matches, stopping
		}
	}
}
