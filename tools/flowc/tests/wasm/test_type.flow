import expect;

// test_type will return passed data wrapped with array. i.e. pass int -> get [int]; pass [string] -> [[string]] etc.
// It's done in order to get unique types that should be added into 'runtime' type table
native test_type : (flow) -> flow = host_w.test_type;
native wasm_rtt_blocks_count : () -> int = host_w.wasm_rtt_blocks_count;
native wasm_rtt_block_length : () -> int = host_w.wasm_rtt_block_length;
native wasm_rtt_dump_blocks : (fn : (string) -> void) -> void = host_w.wasm_rtt_dump_blocks;
native wasm_rtt_dump_types : (fn : (string) -> void) -> void = host_w.wasm_rtt_dump_types;

test(a : flow, len : int, goal_len : int) {
	test_type(a);

	if (len < goal_len) {
		test([a], len + 1, goal_len);
	}
}

main() {
	prints("start");

	// we'll get it +1 to get type with length greater then default block length
	required_length = wasm_rtt_block_length() + 1;
	test(1, 2, required_length);

	prints("Blocks count: " + toString222(wasm_rtt_blocks_count()));
	wasm_rtt_dump_blocks(\s -> prints(s));
	wasm_rtt_dump_types(\s -> prints(s));

	prints("end");
}