import string;
import expect;

native wasm_dump_free_blocks : (label : int) -> void = host_w.wasm_dump_free_blocks;
native wasm_available_memory : () -> int = host_w.wasm_available_memory;
native wasm_free_memory : () -> int = host_w.wasm_free_memory;

Aaa(
	name : string,
	data : int
);

Bbb(data: int);

printFree(i) {
	printi(i);
	printi(wasm_free_memory());
}

test_print(a : Aaa) {
	prints(a.name + ": " + i2s(a.data));
}

test00(a : Aaa) {
}

test0() {
	aaa = Aaa("test", 0);
}

test1() {
	aaa = Aaa("test", 0);
	test_print(aaa);
}

test() {
	for(0, \i -> i < 10, \i -> {
		aaa = Aaa("st_" + i2s(i), i);
		test_print(aaa);
		i + 1;
	});
}

get_data() { Bbb(0) }

test_data() {
	printFree(30);
	bb = Bbb(0);
	tttt = \c : Bbb -> {};
	printFree(31);

	s = get_data();
	printFree(32);
	tttt(s);
}

Func(f : () -> void);

test_func() {
	f = Func(\ -> {});
	arr = [f, f, f];
}

test_prints() {
	s = "aaa" + "bbb";
	prints(s);
}

test_println1() {
	println(0);
}

test_println2() {
	println(0.0);
}

test_println3() {
	println("aaa");
}

test_ref_1() {
	r = ref 55;
	printi(^r);
}

test_ref_2() {
	r = ref "";
	r := ^r + "abc";	
	println(^r);
}

arr_g = ["aa", "bb", "cc"];

test_fold_1() {
	fold(arr_g, "", \acc, a -> acc + a);
}

test_filter_1() {
	filter(arr_g, \a -> a == "aa" || a == "bb");
}

test_map_1() {
	map(arr_g, \a -> a + "_mapped");
}

arrb = [true, true, false];
test_fold_2() {
	fold(arrb, [], \a, b -> if (b) concat(a, [1]) else concat(a, [0]));
}

test_fold_3() {
	fold(arrb, [[]], \a, b -> [[b]]) == [[false]];
	{}
}

test_fold_4() {
	fold([101, 108, 108, 111], "H", \a, b -> a + fromCharCode(b));// == "Hello";
	{}
}

main() {
	printi(0);
	printi(wasm_available_memory());
	printFree(1);
/*	test0();
	printFree(2);
	test1();*/
	printFree(3);
	test_data();
	printFree(6);
	test_func();
	printFree(7);
	test_prints();
	printFree(8);
	test_println1();
	printFree(9);
	test_println2();
	printFree(10);
	test_println3();
	printFree(11);
	test_ref_1();
	printFree(12);
	test_ref_2();
	printFree(13);
	test_fold_1();
	printFree(14);
	test_fold_2();
	printFree(15);
	test_fold_3();
	printFree(16);
	test_fold_4();
	printFree(17);
	test_filter_1();
	printFree(18);
	test_map_1();
	printFree(19);
}

