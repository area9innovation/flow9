import runtime;
import ds/bitset;

/*
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see 
that the 6th prime is 13.

What is the 10 001st prime number?
*/

native wasm_free_memory : () -> int = host_w.wasm_free_memory;
native printi : (int) -> void = host.printi;

// TODO: Rewrite to get number of remaining primes to find,
// so we can stop early instead of keep going. That will
// also allow us to avoid the refs in the main loop.

// Erasthoses sieve
sieve(n : int, set : BitSet, onPrime : (int) -> void) -> void {
    if (n < set.bitcount) {
        if (either(getBitSet(set, n), false)) {
            // OK, this is a prime. Mark the rest
            clearFactors(n + n, n, set);
            onPrime(n);
        }
        sieve(n + 1, set, onPrime);
    }
}

clearFactors(n : int, step : int, set : BitSet) -> void {
    if (n < set.bitcount) {
        unsetBitSet(set, n);
        clearFactors(n + step, step, set);
    }
}

euler7(target : int) -> void {
    // HACK: Upper bound for how many numbers we have to search
    // for the Nth prime.
    // This is speculative. If we do not find it, the
    // result will be 0. Then increase this bound.
    size = target * round(E_CONST * log(i2d(target))); 

    // OK, make a set filled with 1
    set = makeBitSet(size);
//	printi(wasm_free_memory());
    fori(2, size, \i -> {
        setBitSet(set, i);
        {}
    });
//	printi(wasm_free_memory());

    // Now, run the sieve and knock out factors, this way
    // finding primes
    count = ref 0;
    sieve(2, set, \prime -> {
        // This is called whenever we find a prime
        count := ^count + 1;
        if (^count == target) {
            println(prime);  // Correct: 104743
        }
    });
//	printi(wasm_free_memory());
}

printFree(i) {
	printi(i);
	printi(wasm_free_memory());
}

run(counter : int) {
    if (counter > 0) {
        euler7(10001);
        run(counter - 1);
    }
}

main() {
    printFree(0);
    d1 = timestamp();
    run(10);
    d2 = timestamp();
	println(cast(d2 - d1 : double -> string) + " ms");
    printFree(1);
}
