// md5

import expect;
import ds/array;
import math/bits;
import runtime;

native timestamp2 : () -> double = host.timestamp;

str2blks(str : string, convert16to8 : bool) -> [[int]] {
	bytes = if (convert16to8) string2utf8(str) else s2a(str);
	
	l = length(bytes);
	
	bits = l * 8;
	
	getByte = \i -> {
		if (i < l) {
			bytes[i];
		} else if (i == l) {
			0x80;
		} else {
			0;
		}
	}
	
	nblk = ((l + 8) / 64) + 1;
	
	blks = generate(0, nblk, \b -> {
		generate(0, 16, \i -> {
			r = if (b == nblk - 1 && i == 14) {
				bits;
			} else {
				index = 4 * i + b * 64;
				bitOr(bitOr(bitOr(getByte(index), bitShl(getByte(index + 1), 8)), bitShl(getByte(index + 2), 16)), bitShl(getByte(index + 3), 24));
			}
			r;
		});
	});

	blks;
}

rhex(a : int) -> string {
	nibble = \n -> {
		if (n < 10) {
			// i2s(n);
			["0","1","2","3","4","5","6","7","8","9"] [ n ];
		} else {
			[ "a", "b", "c", "d", "e", "f" ] [ n - 10];
		}
	}
	byte = \d -> {
		nibble(d / 16) + nibble(d % 16);
	}
	byte(bitAnd(a, 0xff)) + byte(bitAnd(bitUshr(a, 8), 0xff)) + byte(bitAnd(bitUshr(a, 16), 0xff)) + byte(bitAnd(bitUshr(a, 24), 0xff));
}

bitRol(a : int, b : int) -> int {
	bitOr(bitShl(a, b), bitUshr(a, 32 - b));
}

md5cmn(q : int, a : int, b : int, x : int, s : int, t : int) -> int {
	bitRol(a + q + x + t, s) + b;
}

md5ff(a : ref int, b : ref int, c : ref int, d : ref int, x : int, s : int, t : int) -> int {
	md5cmn(bitOr(bitAnd(^b, ^c), bitAnd(bitNot(^b), ^d)), ^a, ^b, x, s, t);
}

md5gg(a : ref int, b : ref int, c : ref int, d : ref int, x : int, s : int, t : int) -> int {
	md5cmn(bitOr(bitAnd(^b, ^d), bitAnd(^c, bitNot(^d))), ^a, ^b, x, s, t);
}

md5hh(a : ref int, b : ref int, c : ref int, d : ref int, x : int, s : int, t : int) -> int {
	md5cmn(bitXor(bitXor(^b, ^c), ^d), ^a, ^b, x, s, t);
}

md5ii(a : ref int, b : ref int, c : ref int, d : ref int, x : int, s : int, t : int) -> int {
	md5cmn(bitXor(^c, bitOr(^b, bitNot(^d))), ^a, ^b, x, s, t);
}

md5binary(s)
	md5encodingControl(s, false);

md5(s)
	md5encodingControl(s, true);

md5encodingControl(str : string, convert16to8 : bool) -> string {
	blocks = str2blks(str, convert16to8);

	a = ref 0x67452301;
	b = ref 0xefcdab89;
	c = ref 0x98BADCFE;
	d = ref 0x10325476;
	
	iteri(blocks, \bn, x -> {
		olda = ^a;
		oldb = ^b;
		oldc = ^c;
		oldd = ^d;
		
		a := md5ff(a, b, c, d, x[0], 7, -680876936);
		d := md5ff(d, a, b, c, x[1], 12, -389564586);
		c := md5ff(c, d, a, b, x[2], 17,  606105819);
		b := md5ff(b, c, d, a, x[3], 22, -1044525330);
		a := md5ff(a, b, c, d, x[4], 7, -176418897);
		d := md5ff(d, a, b, c, x[5], 12,  1200080426);
		c := md5ff(c, d, a, b, x[6], 17, -1473231341);
		b := md5ff(b, c, d, a, x[7], 22, -45705983);
		a := md5ff(a, b, c, d, x[8], 7,  1770035416);
		d := md5ff(d, a, b, c, x[9], 12, -1958414417);
		c := md5ff(c, d, a, b, x[10], 17, -42063);
		b := md5ff(b, c, d, a, x[11], 22, -1990404162);
		a := md5ff(a, b, c, d, x[12], 7,  1804603682);
		d := md5ff(d, a, b, c, x[13], 12, -40341101);
		c := md5ff(c, d, a, b, x[14], 17, -1502002290);
		b := md5ff(b, c, d, a, x[15], 22,  1236535329);
		a := md5gg(a, b, c, d, x[1], 5, -165796510);
		d := md5gg(d, a, b, c, x[6], 9, -1069501632);
		c := md5gg(c, d, a, b, x[11], 14,  643717713);
		b := md5gg(b, c, d, a, x[0], 20, -373897302);
		a := md5gg(a, b, c, d, x[5], 5, -701558691);
		d := md5gg(d, a, b, c, x[10], 9,  38016083);
		c := md5gg(c, d, a, b, x[15], 14, -660478335);
		b := md5gg(b, c, d, a, x[4], 20, -405537848);
		a := md5gg(a, b, c, d, x[9], 5,  568446438);
		d := md5gg(d, a, b, c, x[14], 9, -1019803690);
		c := md5gg(c, d, a, b, x[3], 14, -187363961);
		b := md5gg(b, c, d, a, x[8], 20,  1163531501);
		a := md5gg(a, b, c, d, x[13], 5, -1444681467);
		d := md5gg(d, a, b, c, x[2], 9, -51403784);
		c := md5gg(c, d, a, b, x[7], 14,  1735328473);
		b := md5gg(b, c, d, a, x[12], 20, -1926607734);
		a := md5hh(a, b, c, d, x[5], 4, -378558);
		d := md5hh(d, a, b, c, x[8], 11, -2022574463);
		c := md5hh(c, d, a, b, x[11], 16,  1839030562);
		b := md5hh(b, c, d, a, x[14], 23, -35309556);
		a := md5hh(a, b, c, d, x[1], 4, -1530992060);
		d := md5hh(d, a, b, c, x[4], 11,  1272893353);
		c := md5hh(c, d, a, b, x[7], 16, -155497632);
		b := md5hh(b, c, d, a, x[10], 23, -1094730640);
		a := md5hh(a, b, c, d, x[13], 4,  681279174);
		d := md5hh(d, a, b, c, x[0], 11, -358537222);
		c := md5hh(c, d, a, b, x[3], 16, -722521979);
		b := md5hh(b, c, d, a, x[6], 23,  76029189);
		a := md5hh(a, b, c, d, x[9], 4, -640364487);
		d := md5hh(d, a, b, c, x[12], 11, -421815835);
		c := md5hh(c, d, a, b, x[15], 16,  530742520);
		b := md5hh(b, c, d, a, x[2], 23, -995338651);
		a := md5ii(a, b, c, d, x[0], 6, -198630844);
		d := md5ii(d, a, b, c, x[7], 10,  1126891415);
		c := md5ii(c, d, a, b, x[14], 15, -1416354905);
		b := md5ii(b, c, d, a, x[5], 21, -57434055);
		a := md5ii(a, b, c, d, x[12], 6,  1700485571);
		d := md5ii(d, a, b, c, x[3], 10, -1894986606);
		c := md5ii(c, d, a, b, x[10], 15, -1051523);
		b := md5ii(b, c, d, a, x[1], 21, -2054922799);
		a := md5ii(a, b, c, d, x[8], 6,  1873313359);
		d := md5ii(d, a, b, c, x[15], 10, -30611744);
		c := md5ii(c, d, a, b, x[6], 15, -1560198380);
		b := md5ii(b, c, d, a, x[13], 21,  1309151649);
		a := md5ii(a, b, c, d, x[4], 6, -145523070);
		d := md5ii(d, a, b, c, x[11], 10, -1120210379);
		c := md5ii(c, d, a, b, x[2], 15,  718787259);
		b := md5ii(b, c, d, a, x[9], 21, -343485551);

		a := ^a + olda;
		b := ^b + oldb;
		c := ^c + oldc;
		d := ^d + oldd;
	});
	rhex(^a) + rhex(^b) + rhex(^c) + rhex(^d);
}

// crc32(str : string) -> int {
	// init = 0xFFFFFFFF;
	// polynom = 0xEDB88320;
	// crc = ref init;

	// bytes = string2utf8(str);
	
	// iter(bytes, \x -> {
		// tmp = ref bitAnd(bitXor(^crc, x), 0xFF);

		// fori(0, 7, \j -> {
			// if (bitAnd(^tmp, 1) == 1)
				// tmp := bitXor(bitUshr(^tmp, 1), polynom)
			// else
				// tmp := bitUshr(^tmp, 1);
		// });

		// crc := bitXor(bitUshr(^crc, 8), ^tmp);
	// });

	// bitXor(^crc, init)
// }

rec(s : string, count : int, mute : bool) -> void {
	if (count > 0) {
		ss = md5(s);
		if (!mute || count == 1) {
			n = cast(count : int -> string);
			prints(n + ": " + ss);
		}
		rec(ss, count - 1, mute);
	}
}


main() {
	// expectVerbose();
	expect2(0, "098f6bcd4621d373cade4e832627b4f6" == md5("test"));
	expectFinish();
	rec("test", 5, false);
	n = 15000;
	prints("Benchmarking: " + toString(n));
	t1 = timestamp2();
	rec("test", n, true);
	t2 = timestamp2();
	prints(cast(t2 - t1 : double -> string) + " ms");
}
