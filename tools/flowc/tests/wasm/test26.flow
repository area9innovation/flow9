import ds/list;

native printi : (int) -> void = host.printi;
native prints : (string) -> void = host.prints;
native isSameStructType : (value1 : flow, value2 : flow) -> bool = Native.isSameStructType;

	// List<?> ::= EmptyList, Cons<?>;
		// EmptyList();
		// Cons(head : ?, tail : List<?>);
		
// native list2string : (List<string>) -> string = Native.list2string;

printList(l : List<string>) -> void {
	switch (l) {	
		Cons(head, tail): {
			prints(head);
		}
		EmptyList(): {
			prints("empty");
		}
	}
}

printList2(l : List<string>) {
	s = list2string(l);
	if (s == "") prints("<empty string>")
	else prints(s);
}
		
main() {
	l0 : List<string> = EmptyList();
	l1 : List<string> = Cons("111", l0);
	l2 : List<string> = Cons("222", l1);
	l3 : List<string> = Cons("333", l2);
	printList(l3);
	prints(list2string(l0));
	prints(list2string(l1));
	prints(list2string(l2));
	prints(list2string(l3));
}
