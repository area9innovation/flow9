import wasm_internals;

export {
    expect(i : int, got : bool, expected : bool) -> void;
	expecti(i : int, got : int, expected : int) -> void;
	
	expect2(idx : int, value : bool) -> void;
	expect2v(idx : int, exp : ?, got : ?) -> void;
	expectVerbose() -> void;
	expectFinish() -> void;
	
	native printi : (int) -> void = host.printi;
	native prints : (string) -> void = host.prints;
	native toString222 : (value : flow) -> string = Native.toString222;	// a copy of toString2 to avoid collisions if runtime is included
	wasm_print_refcount(v : ?) -> void;
	
}

wasm_print_refcount(v) {
    printi(wasm_get_refcount(v) - 1); // -1 to comprensate to auto-decrement upon function exit
}

expect(i : int, got : bool, expected : bool) {
	if (got != expected) {
		prints(int2string(i) + " - FAILED!!!!!!");
		printi(i);
		if (got) {
			printi(1);
		} else {
			printi(0);
		}
	} else {
		prints(int2string(i) + " - passed");
	}
}

expecti(i : int, got : int, expected : int) {
	expect(i, got == expected, true);
}

int2string(i : int) -> string {
	if (i == 0) "0"
	else {
		d = ["0","1","2","3","4","5","6","7","8","9"];
		s = if (i >= 10) int2string(i/10) else "";
		s + d[i%10];
	}
}

expect2total = ref 0;
expect2failed = ref 0;
expect2verbose = ref false;

expectVerbose() -> void {
	expect2verbose := true;
}

expect2(idx : int, value : bool) -> void {
	expect2total := ^expect2total + 1;
	if (!value) expect2failed := ^expect2failed + 1;
	if (^expect2verbose || !value) {
		s = if (value) "ok" else "FAILED!!!!!!!";
		prints(int2string(idx) + " - " + s);
	}
}

expect2v(idx : int, exp : ?, got : ?) -> void {
	expect2total := ^expect2total + 1;
	if (exp == got) {
		if (^expect2verbose) {
			prints(int2string(idx) + " - ok");
		}
	} else {
		expect2failed := ^expect2failed + 1;
		prints(int2string(idx) + " - FAILED! Expected: " + toString222(exp) + ", but got: " + toString222(got));
	}
}

expect2finish() -> void {
	expectFinish();
}

expectFinish() -> void {
	s = "Passed " + int2string(^expect2total - ^expect2failed) + " tests";
	ss = if (^expect2failed > 0) ", failed: " + int2string(^expect2failed) else "";
	prints(s + ss);
}
