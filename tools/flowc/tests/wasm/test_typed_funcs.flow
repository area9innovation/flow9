import expect;

native iter : ([?], (?)->void) -> void = Native.iter;
native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
native length : ([?]) -> int = Native.length;
native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;
native map : ([?], (?) -> ??) -> [??] = Native.map;
native mapi : ([?], (int, ?) -> ??) -> [??] = Native.mapi;
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;
native concat : ([?], [?]) -> [?] = Native.concat;
native replace : ([?], int, ?) -> [?] = Native.replace;
native subrange : ([?], index : int, length : int) -> [?] = Native.subrange;
native filter : ([?], (?)->bool) -> [?] = Native.filter;

test1(a) {
	prints(toString222(a));
}

test2(a) {
	len = length(a);
	printi(len);
}

test3(a : [?]) {
	prints("iter test");
	iter(a, \aa -> prints(toString222(cast(aa : ? -> flow))));
	iteri(a, \i, aa -> prints(toString222(cast(aa : ? -> flow))));
	iteriUntil(a, \i, aa -> { prints(toString222(cast(aa : ? -> flow))); false });
}

test4(a : [?]) {
	prints("map test");
	map(a, \aa -> {prints(toString222(cast(aa : ? -> flow))); aa; });
	mapi(a, \i, aa -> {prints(toString222(cast(aa : ? -> flow))); aa; });
}

test5(a : [?]) {
	prints("fold test");
	fold(a, "", \acc, aa -> { acc + toString222(cast(aa : ? -> flow)) });
	foldi(a, "", \i, acc, aa -> { acc + toString222(cast(aa : ? -> flow)) });
}

test6(a : [?]) {
	prints("concat test");
	aa = concat(a, a);
	prints(toString222(cast(aa : [?] -> flow)));
}

test7(a : [int]) {
	prints("replace test");
	aa = replace(a, 0, 3);
	prints(toString222(cast(aa : [int] -> flow)));
}

test8(a : [?]) {
	prints("subrange test");
	aa = subrange(a, 0, 2);
	prints(toString222(cast(aa : [?] -> flow)));
}

test9(a : [int]) {
	prints("filter test");
	aa = filter(a, \aaa -> ((aaa / 2) > 0));
	prints(toString222(cast(aa : [int] -> flow)));
}

main() {
	test1([1, 2, 3]);
	test2([1, 2, 3]);
	test3([1, 2, 3]);
	test4([1, 2, 3]);
	test5([1, 2, 3]);
	test6([1, 2, 3]);
	test7([1, 2, 3]);
	test8([1, 2, 3]);
	test9([1, 2, 3]);
}