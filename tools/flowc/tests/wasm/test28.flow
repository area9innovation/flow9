import expect;

native length : ([?]) -> int = Native.length;

native iter : ([?], (?)->void) -> void = Native.iter;
native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
native map : ([?], (?)->??) -> [??] = Native.map;
native enumFromTo : (int, int) -> [int] = Native.enumFromTo;

native s2a : (string) -> [int] = Native.s2a;
native string2utf8 : (string) -> [int] = Native.string2utf8;
native strlen : (string) -> int = Native.strlen;

native bitShl : (a : int, n : int) -> int = Native.bitShl;
native bitUshr : (a : int, n : int) -> int = Native.bitUshr;


iter2(a : [?], f : (?) -> void) -> void {
	do_iter2(a, f, 0);
}

do_iter2(a: [?], f : (?) -> void, idx : int) -> void {
	if (idx < length(a)) {
		f(a[idx]);
		do_iter2(a, f, idx+1);
	}
}

test1() {
	s = ref 0;
	fff = \x : int -> {
		s := ^s + x;
	}
	a = [111, 222, 333, 444];
	iter(a, fff);
	expect2(101, ^s == 1110);
	iter(a, fff);
	expect2(102, ^s == 2220);
	iter(a, fff);
	expect2(103, ^s == 3330);
}

test2() {
	s = ref "";
	f = \x : string -> {
		s := ^s + x;
	}
	a = ["111", "222"];
	iter(a, f);
	expect2(201, ^s == "111222");
	iter(a, f);
	expect2(202, ^s == "111222111222");
}

test3() {
	s : ref double = ref 0.0;
	f = \x : double -> {
		s := ^s + x;
	}
	a = [111.0, 222.0];
	iter(a, f);
	expect2(301, ^s == 333.0);
	iter(a, f);
	expect2(302, ^s == 666.0);
}

test4() {
	f = \x : int -> x * 2;
	
	a0 : [int] = [];
	b0 = map(a0, f);
	expect2(400, b0 == []);
	
	a = [111, 222, 333];
	b = map(a, f);
	expect2(401, b == [222, 444, 666]);
	
	ff = \x : int -> [x];
	bb = map(a, ff);
	expect2(402, bb == [[111],[222],[333]]);
}

test5() {
	a1 = enumFromTo(0, -1);
	expect2(501, a1 == []);
	a2 = enumFromTo(1, 5);
	expect2(502, a2 == [1,2,3,4,5]);
}

test6() {
	a = [1,2,3,4,5];
	ok = ref true;
	id = ref 0;
	f = \i : int, x : int -> {
		if (i != ^id) ok := false
		else {
			if (x != a[i]) ok := false;
		}
		id := i + 1;
	}
	iteri(a, f);
	expect2(601, ^ok);
}

test7() {
	a = s2a("abc123");
	expect2(701, a == [97,98,99,49,50,51]);
	a2 = string2utf8("abc123");
	expect2(702, a2 == [97,98,99,49,50,51]);
}

test8() {
	expect2(801, bitShl(1,20) == 1048576);
	expect2(802, bitShl(1,30) == 1073741824);
	expect2(803, bitShl(1,31) == -2147483648);
	expect2(804, bitShl(1,32) == 1);
	expect2(805, bitUshr(1048576,20) == 1);
	expect2(806, bitUshr(1073741824,30) == 1);
	expect2(807, bitUshr(-2147483648,31) == 1);
}

g_test9_ref = ref 0;

test9() {
	expect2(901, ^g_test9_ref == 0);
	g_test9_ref := 111;
	expect2(902, ^g_test9_ref == 111);
}

// testing fallback issue
s2a(s : string) -> [int] { [1,2,3]; }		// if to comment this out all tests work!

test10() {
	a = [[1], [2, 2], [3, 3, 3]];
	l = map(a, \aa -> length(aa));
	expect2v(1001, [1, 2, 3], l);
}

test11helper(i : int, cb : (string) -> [int]) -> void {
	expect2v(i, [49, 50, 51], cb("123"));
}

test11() {
	s2aa = \x : string -> s2a(x);
	test11helper(1101, s2aa);
	test11helper(1102, \x : string -> s2a(x));
	test11helper(1103, s2a);
	f4 = s2a;
	test11helper(1104, f4);
	f5 = ref \s : string -> [1,2,3];
	f5 := s2a;
	test11helper(1105, ^f5);
	f6 = strlen;
	expect2v(1106, 3, f6("abc"));
	f7 = string2utf8;
	test11helper(1107, f7);
	test11helper(1108, string2utf8);
	f9 = ref \s : string -> [1,2,3];
	f9 := string2utf8;
	test11helper(1109, ^f9);

	// TODO: structs, polymorphic natives
}

test12() {
	// checking local functions with conflicting names
	f1 = \x -> x*2;
	f2 = \x, y -> x + y;
	f = \x, y, b -> {
		if (!b) {
			ff = f1;
			ff(x)
		} else {
			ff = f2;
			ff(x, y)
		}
	}
	expect2v(1201, 22, f(11, 22, false));
	expect2v(1202, 33, f(11, 22, true));
}

main() {
	test1();
	test2();
	test3();
	test4();
	test5();
	test6();
	test7();
	test8();
	test9();
	test10();
	test11();
	// test12();	// compilation error
	expectFinish();
}
