Pair(first : ?, second : ??);

Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

	DynamicBehaviour(value : ref ?);
	ConstBehaviour : (constv : ?);
make(v : ?) -> DynamicBehaviour<?> {
	DynamicBehaviour(ref v);
}

const(v : ?) -> ConstBehaviour<?> {
	ConstBehaviour(v)
}

Point(x : double, y : double);

Form ::= Empty, Inspect, Mutable2, Constructor;

Empty : ();
Constructor : (form : Form, fn : () -> () -> void);
Inspect : (inspectors : [Inspector], form : Form);
	Inspector ::= ITag;
	ITag(i : int);

/// An element in the design that can change
Mutable2 : (form : Behaviour<Form>);

zeroPoint = Point(0.0, 0.0);

findTaggedFormPositionB(form : Form, tag : int) -> Pair<Form, Behaviour<Maybe<Point>>> {
	switch (form : Form) {
		Inspect(inspectors, f): {
			if (true)
				Pair(form, const(Some(zeroPoint))) // found the tag
			else if (true)
				Pair(form, const(None())) // found blocker tag - stop traversing
			else {
				t = findTaggedFormPositionB(f, tag);
				Pair(
					Inspect(inspectors, t.first),
					t.second
				)
			}
		}

		Mutable2(bf): {
			formB = make(Empty());
			pointB = make(None());
			resForm = Constructor(
				Mutable2(formB),
				\ -> {
					\ -> {
					}
				}
			);
			Pair(resForm, pointB)
		}

		default: Pair(Empty(), const(None()));
	}
}
