import form;
import ds/tree;
import ui/conditions;
import gui;


export {
	GridLayout(columns : LayoutSpec, rows : LayoutSpec, cells : [LayoutCell]);

	// The gutter, as well as numbers that defines how much each column/row should grow with available space
	LayoutSpec(gutter : double, growth : [double]);

	LayoutCell(column : int, row : int, widthInCells : int, heightInCells : int, content : SForm);

	SForm ::= BaseSForm, ControlSForm, NamedForm, NamedFormModificator;
		BaseSForm ::= Text, Graphics, Picture, FixedSForm;
			FixedSForm : (width : double, height : double);

		ControlSForm ::= ResizeCell, OverlapCell, ConditionalForm;

			// Resize the content to the available space, as well as optional alignment
			ResizeCell : (resizeToWidth : bool, resizeToHeight : bool, preserveAspectRatio : bool, alignX : double, alignY : double, content : BaseSForm);

			// Extend the cell outwards the given number of pixels
			OverlapCell(left : double, top : double, right : double, bottom : double, sform : SForm);

			ConditionalForm : (condition : SkinCondition, form : SForm);

		// z-order of NamedForms depends of its names, but not from declaration order â€” it will be sort in alphabetical order (NamedForm("b") will overlap NamedForm("a") in any cases)
		NamedForm : (name : string);
		NamedFormModificator : (modificators : [NamedFormModifier], namedForm : NamedForm);
			NamedFormModifier ::= NamedFormScale, NamedFormAlign;
				NamedFormScale : (xScale : Behaviour<double>, yScale : Behaviour<double>);
				NamedFormAlign : (xAlign : Behaviour<double>, yAlign : Behaviour<double>);


	// A complete API for rendering a grid that can be updated in different ways.
	// if respectFatCells is true multicolumn (multirow) cells are taken into account during calculation of columns (rows) widths(heights).
	grid2form0(grid : GridLayout, namedForms : Tree<string, NamedFormDescription>, environment : SkinEnvironment, alpha : DynamicBehaviour<double>, respectFatCells : bool) -> Pair<Form, [Coordinates]>;
		NamedFormDescription : (
			form : Form,
			visible : Behaviour<bool>, stayVisible : ref bool, resetModifiers : ref bool,
			x : DynamicBehaviour<double>, y : DynamicBehaviour<double>, awh : DynamicBehaviour<WidthHeight>,
			xAlign : DynamicBehaviour<double>, yAlign : DynamicBehaviour<double>,
			xScale : DynamicBehaviour<double>, yScale : DynamicBehaviour<double>,
			size : DynamicBehaviour<WidthHeight>);
		Coordinates(x : Behaviour<double>, y : Behaviour<double>, awh : Behaviour<WidthHeight>);

}

gl_eps = 0.001;

sform2form(namedForms : Tree<string, NamedFormDescription>, coordinates : Coordinates, environment : SkinEnvironment, sform : SForm, outSize : DynamicBehaviour<WidthHeight>) -> Form {
	Empty()
}

GridLayoutSizesData : (size : WidthHeight, xOffsets : [double], yOffsets : [double], availables : [WidthHeight]);

AvailableReset ::= ARBoth, ARDynamic, ARNo;
	ARBoth : (); ARDynamic : (); ARNo : ();


gridId = ref 0;
// foo = debugtyping;

grid2form0(grid : GridLayout, namedForms, environment, alpha, respectFatCells) {
	myId = ^gridId + 1;
	gridId := myId;
	gPrint : (string) -> ((flow) -> flow) = cprint(getUrlParameter("gridprint") == "1", "Grid " + i2s(myId) + " ");


	awh = environment.awh;
	currentAWH = ref zeroWH;
	currentSizes : ref [WidthHeight] = ref [];
	wrongSource = ref false;
	assertWithSideEffects = \cond, msg -> {
		if (!cond) {
		 	wrongSource := true;
		 	println(msg);
		}
	}

	getGrowthSum = \growth -> fold(growth, 0.0, \acc, val -> {
		assertWithSideEffects(val >= 0.0, "Negative growth value could not be processed");
		acc + val
	});

	sformsCount : int = length(grid.cells) |> gPrint("sformsCount: ");

	colsCount : int = length(grid.columns.growth) |> gPrint("colsCount: ");
	rowsCount : int = length(grid.rows.growth) |> gPrint("rowsCount: ");


	columnsGrowthSum = getGrowthSum(grid.columns.growth) |> gPrint("columnsGrowthSum: ");
	rowsGrowthSum = getGrowthSum(grid.rows.growth) |> gPrint("rowsGrowthSum: ");

	getGrowthPart = \growthSum : double, growth : [double] -> map(growth, \g -> if (growthSum > gl_eps) g / growthSum else 0.0);

	columnsGrowthParts = getGrowthPart(columnsGrowthSum, grid.columns.growth);
	rowsGrowthParts = getGrowthPart(rowsGrowthSum, grid.rows.growth);

	colsIds = enumFromTo(0, colsCount - 1);
	rowsIds = enumFromTo(0, rowsCount - 1);
	cellsIds = enumFromTo(0, sformsCount - 1);

	sizesSrc = generate(0, sformsCount, \i -> makeWH());

	constantWidthsIds = filter(colsIds, \i -> columnsGrowthParts[i] == 0.0) |> gPrint("constantWidthsIds: ");
	columnWidthsCalculationRelatedData = map(
		colsIds,
		\i -> {
			ids = filter(cellsIds, \id -> {
				cell = (grid.cells)[id];
				cell.column == i && cell.widthInCells == 1

			});
			assertWithSideEffects(length(ids) > 0 || columnsGrowthParts[i] > 0.0, "There is no one column width form in column " + i2s(i) + ". Column width will be 0.0");
			map(ids, \id -> {
				cell = (grid.cells)[id];
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (contains(constantWidthsIds, i)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				}
				Pair(resetType, id)
			})
		}
	) |> gPrint("columnsWidthCalculationsRelatedData: ");

	fatWidthCells = if (respectFatCells) {
		mapi(grid.cells, \id, cell -> {
			if (cell.widthInCells > 1) {
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (exists(constantWidthsIds, \i -> cell.column <= i && i < cell.column + cell.widthInCells)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				};
				[Pair(resetType, id)]
			} else {
				[]
			}
		}) |> concatA
	} else {
		[]
	}  |> gPrint("fatWidthCells: ");

	hGutters = i2d(colsCount - 1) * grid.columns.gutter;

	constantHeightsIds = filter(rowsIds, \i -> rowsGrowthParts[i] == 0.0) |> gPrint("constantHeights: ");

	rowsHeightsCalculationRelatedData = map(
		rowsIds,
		\i -> {
			ids = filter(cellsIds, \id -> {
				cell = (grid.cells)[id];
				cell.row == i && cell.heightInCells == 1
			});
			assertWithSideEffects(length(ids) > 0 || rowsGrowthParts[i] > 0.0, "There is no one row height form in row " + i2s(i) + ". Row height will be 0.0");
			map(ids, \id -> {
				cell = (grid.cells)[id];
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (contains(constantHeightsIds, i)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				}
				Pair(resetType, id)
			})
		}
	) |> gPrint("rowsHeightsCalculationRelatedData: ");

	fatHeightCells = if (respectFatCells) {
		mapi(grid.cells, \id, cell -> {
			if (cell.heightInCells > 1) {
				resetType = if (hasAvailableDependentNamedForm(cell.content, namedForms)) {
					if (exists(constantHeightsIds, \i -> cell.row <= i && i < cell.row + cell.heightInCells)) {
						ARBoth()
					} else {
						ARDynamic()
					}
				} else {
					ARNo()
				};
				[Pair(resetType, id)]
			} else {
				[]
			}
		}) |> concatA
	} else {
		[]
	}  |> gPrint("fatHeightCells: ");



	vGutters = i2d(rowsCount - 1) * grid.rows.gutter;

	iteri(grid.cells,  \i, cell -> {
		assertWithSideEffects(
			0 <= cell.column && cell.column < colsCount,
			"Incorrect column number: " + i2s(cell.column) + " in grid cell id = " + i2s(i)
		);
		assertWithSideEffects(
			0 <= cell.row && cell.row < rowsCount,
			"Incorrect row number: " + i2s(cell.row) + " in grid cell id = " + i2s(i)
		);
		assertWithSideEffects(
			0 <= cell.column && cell.column < colsCount && 0 < cell.widthInCells && cell.column + cell.widthInCells <= colsCount,
			"Incorrect column number: " + i2s(cell.column) + " in grid cell id = " + i2s(i)
		);
		assertWithSideEffects(
			0 <= cell.row && cell.row < rowsCount && 0 < cell.heightInCells && cell.row + cell.heightInCells <= rowsCount,
			"Incorrect row number: " + i2s(cell.row) + " in grid cell id = " + i2s(i)
		);
	});

	sizeRelatedBehaviours = map(sizesSrc, whenSizeChanged) |> merge;

	internalUpdate = ref false;

	data = make(GridLayoutSizesData(
		zeroWH,
		generate(0, sformsCount, \i -> 0.0),
		generate(0, sformsCount, \i -> 0.0),
		generate(0, sformsCount, \i -> zeroWH)
	));

	isToReset = \cellResetType, resetType -> {
		switch (cellResetType : AvailableReset) {
			ARNo() : false;
			ARDynamic() : resetType != ARNo();
			ARBoth() : resetType == ARBoth();
		}
	}

	calculateNewCoordinates = \resetAvailableDependentSizes : AvailableReset, updateWholeSize  -> {
		gPrint("Calculating new coordinates")("") |> ignore;
		gPrint("resetAvailableDependentSizes: ")(resetAvailableDependentSizes) |> ignore;
		gPrint("updateWholeSize: ")(updateWholeSize) |> ignore;
		nextDistinct(alpha, b2d(resetAvailableDependentSizes == ARNo()));
		currentSizes := getValue(sizeRelatedBehaviours) |> gPrint("currentSizes: ");
		currentAWH := getValue(awh) |> gPrint("currentAWH: ");
		wh = (if (resetAvailableDependentSizes != ARNo()) zeroWH else ^currentAWH) |> gPrint("awh: ");

		sizes = ^currentSizes |> gPrint("sizes: ");

		maxWidths = {
			fatlessWidths = map(
				columnWidthsCalculationRelatedData,
				\widthsData -> {
					map(widthsData, \dt -> {
							unpair(dt, \sizeToReset, id -> if (isToReset(sizeToReset, resetAvailableDependentSizes)) 0.0 else sizes[id].width)
					}) |> \sz -> either(maxA(sz), 0.0)
				}
			) |> gPrint("fatlessWidths: ");
			fold(fatWidthCells, fatlessWidths, \widths, cellTriple -> unpair(cellTriple, \sizeToReset, id -> {
				if (isToReset(sizeToReset, resetAvailableDependentSizes)) {
					widths
				} else {
					cell = grid.cells[id];
					width = sizes[id].width;
					cols = subrange(fatlessWidths, cell.column, cell.widthInCells);
					columnsWidthsSum = cols |> dsum;
					delta = width - columnsWidthsSum;
					if (columnsWidthsSum > 0.0 && delta > 0.0) {
						updateWidth = \w -> {
							w + w / columnsWidthsSum * delta
						};
						concatA([
							subrange(widths, 0, cell.column),
							map(cols, updateWidth),
							subrange(widths, cell.column + cell.widthInCells, colsCount - cell.column - cell.widthInCells)
						])
					} else {
						widths
					}
				}
			})) |> gPrint("maxWidths: ")
		}

		constantWidths = map(constantWidthsIds, \id -> maxWidths[id]) |> gPrint("constantWidths: ");
		additionalWidth : double = max(wh.width - dsum(constantWidths) - hGutters, 0.0) |> gPrint("additionalWidth: ");

		colsWidths = foldi(columnsGrowthParts, [], \i, acc : [double], growth -> {
				if  (growth == 0.0) {
					arrayPush(acc, maxWidths[i])
				} else {
					arrayPush(acc, max(additionalWidth * growth, maxWidths[i]))
				}
		}) |> gPrint("colsWidths: ");

		maxHeights = {
			fatlessHeights = map(
				rowsHeightsCalculationRelatedData,
				\heightsData -> {
					map(heightsData, \dt -> {
							unpair(dt, \sizeToReset, id -> if (isToReset(sizeToReset, resetAvailableDependentSizes)) 0.0 else sizes[id].height)
					}) |> \sz -> either(maxA(sz), 0.0)
				}
			) |> gPrint("fatlessHeights: ");
			fold(fatHeightCells, fatlessHeights, \heights, cellTriple -> unpair(cellTriple, \sizeToReset, id -> {
				if (isToReset(sizeToReset, resetAvailableDependentSizes)) {
					heights
				} else {
					cell = grid.cells[id];
					height = sizes[id].height;
					cols = subrange(fatlessHeights, cell.row, cell.heightInCells);
					rowsHeightsSum = cols |> dsum;
					delta = height - rowsHeightsSum;
					if (rowsHeightsSum > 0.0 && delta > 0.0) {
						updateHeight = \h -> {
							h + h / rowsHeightsSum * delta
						};
						concatA([
							subrange(heights, 0, cell.row),
							map(cols, updateHeight),
							subrange(heights, cell.row + cell.heightInCells, colsCount - cell.row - cell.heightInCells)
						])
					} else {
						heights
					}
				}
			})) |> gPrint("maxHeights: ")
		}

		constantHeights = map(constantHeightsIds, \id -> {
			if (id >= length(maxHeights)) 0.0 else maxHeights[id]
		}) |> gPrint("constantHeights: ");
		additionalHeight : double = max(wh.height - dsum(constantHeights) - vGutters, 0.0) |> gPrint("additionalHeight: ");

		rowsHeights = foldi(rowsGrowthParts, [], \i, acc : [double], growth -> {
			maxHeight = if (i >= length(maxHeights)) 0.0 else maxHeights[i];

			if  (growth == 0.0) {
				arrayPush(acc, maxHeight)
			} else {
				arrayPush(acc, max(additionalHeight * growth, maxHeight))
			}
		}) |> gPrint("rowsHeights: ");

		xOffsets = mapi(grid.cells,  \i, cell -> {
			dsum(subrange(colsWidths, 0, cell.column)) + i2d(cell.column) * grid.columns.gutter
		});

		yOffsets = mapi(grid.cells,  \i, cell -> {
			dsum(subrange(rowsHeights, 0, cell.row)) + i2d(cell.row) * grid.rows.gutter
		});

		availables = mapi(grid.cells, \i, cell -> {
			WidthHeight(
				dsum(subrange(colsWidths, cell.column, cell.widthInCells)) + i2d(cell.widthInCells - 1) * grid.columns.gutter,
				dsum(subrange(rowsHeights, cell.row, cell.heightInCells)) + i2d(cell.heightInCells - 1) * grid.rows.gutter
			)
		}) |> gPrint("availables: ");

		wholeWidth = colsWidths |> dsum |> floor |> i2d;
		wholeHeight = rowsHeights |> dsum |> floor |> i2d;
		addGutters = \gutters -> \base -> {
			if (base > 0.0) {
				base + gutters
			} else {
				0.0
			}
		}
		wholeSize = WidthHeight(wholeWidth |> addGutters(hGutters), wholeHeight |> addGutters(vGutters)) |> gPrint("wholeSize: ");
		newWholeSize = (if (updateWholeSize) wholeSize else getValue(data).size) |> gPrint("newWholeSize: ");
		nextDistinct(data, GridLayoutSizesData(newWholeSize, xOffsets, yOffsets, availables))
	}

	stopUpdate = ref \ -> {};
	protectedApply = \fn -> {
		^stopUpdate();
		if (!^internalUpdate) {
			internalUpdate := true;
			stopUpdate := interruptibleTimer(5, fn);
		} else {
			stopUpdate := interruptibleTimer(5, fn);
		}
	}

	stableSizes = {
		provider = make(getValue(sizeRelatedBehaviours));
		stopTimer = ref \ -> {};
		subscribe2(sizeRelatedBehaviours, \v -> {
			^stopTimer();
			stopTimer := interruptibleTimer(
				5,
				\ -> {
					stopTimer := \ ->  {};
					nextDistinct(provider, getValue(sizeRelatedBehaviours));
				}
			);
		});
		provider;
	}
	currentSizes := getValue(sizeRelatedBehaviours);
	infiniteLoop = \ -> {
		uns0 = subscribe2(awh |> whenSizeChanged, \wh -> {
				protectedApply(\ -> {
					calculateNewCoordinates(ARBoth(), false);
					calculateNewCoordinates(ARDynamic(), false);
					calculateNewCoordinates(ARNo(), false);
					calculateNewCoordinates(ARNo(), true);
					internalUpdate := false;
				});
		});

		uns1 = subscribe2(stableSizes, \sizes -> protectedApply(\ -> {
			calculateNewCoordinates(ARDynamic(), true);
			calculateNewCoordinates(ARNo(), true);
			calculateNewCoordinates(ARNo(), true);
			internalUpdate := false;
		}));

		\ -> {
			uns1();
			uns0();
		}
	};


	if (^wrongSource) {
		Pair(Text("Incorrect source", [Fill(0x000000)]), [])
	} else {
		coordinatesArray = mapi(grid.cells, \i, __ -> Coordinates(
			select(data, \dt -> dt.xOffsets[i]),
			select(data, \dt -> dt.yOffsets[i]),
			select(data, \dt -> dt.availables[i])
		));
		Pair(
			Size2(
				select(data, \dt -> dt.size) |> whenSizeChanged,
				Constructor(
					Group(mapi(
						grid.cells,
						\i,cell -> {
							coordinates = coordinatesArray[i];
							form = sform2form(namedForms, coordinates, environment, cell.content, sizesSrc[i]);
							RenderAtCoordinates(coordinates, form)
						}
					)),
					infiniteLoop
				)
			),
			coordinatesArray
		)
	}
}


hasAvailableDependentNamedForm(sform : SForm, namedForms : Tree<string, NamedFormDescription>) {
	false;
}

RenderAtCoordinates(coordinates : Coordinates, form : Form) {
	Grid([]);
}
