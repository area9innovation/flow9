Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

/*

We do manage to find the correct type, but we complain before we finish.

	Unify .(.value : α10001)  c= . {None<α10000> .. *}

is not handled correctly. This is similar to test31.


// (α3)⁺ c= (α10002)⁻   from   array construction in [ ] ([(a : α0), (b : α3)] : [α10002])
Unify α3 (=.(.value : α10001))  c=  α10002 (={None<α10000> .. *})
  Unify .(.value : α10001)  c=  tyvar α10002 (={None<α10000> .. *})
    Unify .(.value : α10001)  c= . {None<α10000> .. *}
      Unify .(.value : α10001)  grow right  None<α10000>
C:/flow9/tools/flowc/tests/improvable/test55.flow:9:5:  foo: array construction: [ ]: Expected .value in None
      Gave None<α10000>
    Gave {None<α10000> .. *}
  Unify .(.value : α10001)  c=  tyvar α10002 gave α10002 (={None<α10000> .. *})
  Unify tyvar α3 (=.(.value : α10001))  c=  {None<α10000> .. *}
    Unify .(.value : α10001)  c=  {None<α10000> .. *}
      Cached .(.value : α10001)  grow right  None<α10000>  =  None<α10000>
    Gave .(.value : α10001) seen None
    Setting α3 to .(.value : α10001) seen None
  Unify tyvar α3  c=  {None<α10000> .. *} gave α3 (=.(.value : α10001) seen None)
  Adding dependency: α3 (=.(.value : α10001) seen None)  c=  α10002 (={None<α10000> .. *})
Gave α3 (=.(.value : α10001) seen None)


*/


foo(b) {
	a = None();
	c = b.value;
	// We could infer that b is Some<?>, and the array is Maybe<?>
	[a, b]
}
