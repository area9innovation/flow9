import tools/flowc/fcexp;

// Note: the C++ runner implements some functions as natives and relies on the layout of this:
Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

lookupTree(tree : Tree<?, ??>, key : ?) -> Maybe<??> {
	None();
}


FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;

FcFunctionDec(
	name: string,
	lambda: Maybe<FcLambda>,
	info : FcInfo
);

FcGlobalVar(
	name: string,
	value: Maybe<FcExp>,
	declInfo : FcInfo,
	bodyInfo : FcInfo
);

FcNativeDec(
	name: string, io: bool,
	type : FcType,
	nativeName : string,
	flowfallback: Maybe<FcFunctionDec>,
	info : FcInfo
);

typecheckFcModule(functions : Tree<string, FcFunctionDec>) -> void {
	gfn = lookupTree(functions, "");
	switch (gfn) {
		None(): {
		}
		Some(fn): {
			switch (fn.lambda) {
				None(): {
				}
				Some(fnlam): {
					// We should infer that fnlam is FcLambda, not FcCall
					fnlam.info;
					prettyFcExp(fnlam);
					fnlam.body;
					{}
				}
			}
		}
	}
}

prettyFcExp(e : FcExp) -> string {
	""
}
