import ds/array;

Promise(
	f : (fulfill: (?) -> void, reject: (??) -> void) -> void
);

allPromises(promises : [Promise<?, ??>]) -> Promise<[?], ??>
{
	ps: int = length(promises);

	if (ps == 0) {
		// No results, success with empty list
		Promise(\fulfill: ([?]) -> void, reject: (??) -> void -> {
			fulfill([])
		});
	} else if (ps == 1) {
		// One result, success with one element list
		Promise(\fulfill: ([?]) -> void, reject: (??) -> void -> {
			promises[0].f(
				\result: ? -> fulfill([result]),
				reject
			);
		});
	} else {
		psHalf: int = ps / 2;

		left: [Promise<?, ??>] = take(promises, psHalf); // "take" does not include the element at index psHalf.
		Promise(\fulfill: ([?]) -> void, reject: (??) -> void -> {
			allPromises(left).f(
				\leftResults: [?] -> {
					right: [Promise<?, ??>] = tailFrom(promises, psHalf); // "tailFrom" does include the element at index psHalf.
					allPromises(right).f(
						\rightResults: [?] -> fulfill(concat(leftResults, rightResults)),
						reject
					);
				},
				reject
			);
		});
	}
}