import sys/sound;
	// Control voice play
	VoiceOption ::= SoundComplete, SoundVolume, PauseSound,
					SpeechEnabled, SpeechVoiceEnabled, SpeechControlVisibility,
					SpeechProgress, NoSoundHandler, ResetSpeech;
		//SoundComplete : (done : () -> void);
		//SoundVolume : (volume : Behaviour<double>);
		//PauseSound : (isPaused: Behaviour<bool>);

		SpeechEnabled : (
			speechEnabled : Behaviour<bool>, // global soundEnabled
		);
		SpeechVoiceEnabled : (
			speechVoiceEnabled : Behaviour<bool>, // global soundEnabled
		);
		SpeechControlVisibility : (
			speechControlVisibility : DynamicBehaviour<int> // global soundControlVisibility
		);
		SpeechProgress: (
			speechProgress: DynamicBehaviour<double>	// what percent of voices were played so far
		);
		NoSoundHandler: (
			handler: () -> void	// callback to call when there is no voice-over recorded for the current phrase
		);
		ResetSpeech: (
			resetSpeech : bool
		);


VoiceLoadOptions ::= VoiceLoadOptionUrlMapper;
	VoiceLoadOptionUrlMapper(
		handler: ( originalUrl: string, onContinue: (mappedUrl: string) -> void, onError: (msg: string) -> void) -> void
	);

	Voice ::= NoVoice, SimpleVoice, MultiVoice, NumberVoice;
		NoVoice : ();
		// plain voice
		SimpleVoice : (text : string);
		// number -
		NumberVoice : (number : string);
		MultiVoice : (voices : [Voice]);

loadVoiceExt(
	voice : Voice,
	soundPath : string,
	options: [VoiceLoadOptions],
	onLoadResult : (hasSound : bool, soundLength: double) -> void, // reports if there were any sound files loaded and the length of the sound
	) -> (([VoiceOption]) -> () -> void) {

	switch(voice : Voice) {
		default: {
			\opts : [VoiceOption] -> nop
		};
		MultiVoice(voices) : {
			soundsP = map(voices, \subsound -> {
				hasSound : DynamicBehaviour<Maybe<bool>> = make(None()); // not loaded yet
				soundLength = make(0.0);
				sound = loadVoiceExt(subsound, soundPath, options, \result, len -> {
					next(soundLength, len); next(hasSound, Some(result));
				});
				Triple(hasSound, sound, soundLength)
			});

			hasSounds = map(soundsP, firstOfTriple);
			sounds : [([VoiceOption]) -> (() -> void)] = map(soundsP, secondOfTriple);

			//onLoadResult(true) if loaded any sound, onLoadResult(false) - if failed all of them
			unsResult = ref nop;

			onLoadResult(true, dsum(map(soundsP, \t -> getValue(t.third)))); // some sounds were loaded successfully

			\opts : [VoiceOption] -> {
				\ -> {
				}
			}
		};
	}
}

