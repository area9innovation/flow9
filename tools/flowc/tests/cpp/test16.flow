// TEST16 - testing various natives

// 
// Compile with QtByteRunner/core included: 
// 
//   cl /EHsc /I C:\flow9 /I C:\flow9\QtByteRunner\core\ test15.cpp
//

import tools/flowc/tests/cpp/test_utils;

import string;
import md5;
import target; // for getTargetName()
import filesystem;
import binary;
import deserialize_string;

test1() {
	a = "Test string";
	is_(toUpperCase(a), "TEST STRING", "toUpperCase");
	is_(toLowerCase(a), "test string", "toLowerCase");

	b = "0123456789";
	is_(strlen(b), 10, "strlen");

	is_(getTargetName(), "cpp,native", "getTargetName");

	testFileName = "test.txt";
	setFileContent(testFileName, a);
	is_(fileExists(testFileName), true, "fileExists");
	is_(fileModified(testFileName) > 0.0, true, "fileModified (file exists)");
	deleteFile(testFileName);
	is_(fileExists(testFileName), false, "deleteFile");
	is_(fileModified(testFileName) == 0.0, true, "fileModified (file DOES NOT exist)");

	is_(md5("asdf"), "912ec803b2ce49e4a541068d495ab570", "md5");

	v = [1, 2, 3];
	is_(exists(v, \e -> e == 2), true,  "exists (value available)");
	is_(exists(v, \e -> e == 4), false, "exists (value NOT available)");

	is_(foldi(v, 0, \i, acc, e -> {acc + i}), 3, "foldi");

	is_(substring("asdf", 1, 1000), "sdf", "substring");
	
	check2(isLetter("a") && !isLetter("0"), "isLetter");
	check2("a" < "b" && "b" > "a", "string < and >");
	
	check2(toString([1,2,3]) == "[1, 2, 3]", "toString(array<int>)");

	str = "123asdf55";

	is_(strRangeIndexOf(str, "asdf", 2, 7),  3, "strRangeIndexOf (value in range)");
	is_(strRangeIndexOf(str, "asdf", 2, 6), -1, "strRangeIndexOf (value NOT in range)");
	is_(strIndexOf(str, "asdf"), 3, "strIndexOf");

	r : ref int = ref 0;
	iter(v, \__ -> r := ^r + 1);
	is_(^r, 3, "iter");

	c = getCharCodeAt("asdf", 2);
	is_(c, 100, "getCharCodeAt");

	is_(fromCharCode(100), "d", "fromCharCode");

	u: [int] = string2utf8("фыва"); // Text in quotes is_ in UTF-8 
	is_(u, [209, 132, 209, 139, 208, 178, 208, 176], "string2utf8");

	testFileNameUTF ="utftest.txt";
	is_(isDirectory(testFileNameUTF), false, "isDirectory (not directory)");

	utfText = "ТЕКСТ В UTF-8"; // Text in quotes is_ in UTF-8 
	setFileContent(testFileNameUTF, utfText); 
	txt = getFileContent(testFileNameUTF);
	is_(utfText, txt, "setFileContent/getFileContent");
	deleteFile(testFileNameUTF);

	is_(elemIndex(v, 2, -1), 1, "elemIndex (value in array)");
	is_(elemIndex(v, 4, -1), -1, "elemIndex (value NOT in array)");

	testDirName = "testdir";

	createDirectory(testDirName);
	is_(isDirectory(testDirName), true, "isDirectory (directory created)");

	deleteDirectory(testDirName);
	is_(isDirectory(testDirName), false, "isDirectory (directory removed)");	

	d = -1.0;
	is_(subrange(s2a(toBinary(d)), 3, 4), [0,0,0,0xBFF0], "toBinary");
}

// testing fileModified()
test2() {
	testFileName = "test.txt";
	t = timestamp();
	setFileContent(testFileName, "");
	t2 = fileModified(testFileName);
	// println(d2s(t));
	// println(d2s(t2));
	check2(t2 > t - 1000.0 && t2 < t + 1000.0, "fileModified (timestamp)");	// checking timestamp
	deleteFile(testFileName);
	t3 = fileModified(testFileName);
	check2(t3 == 0.0, "fileModified (deleted)");
}

// testing isDevMode()
test3() {
	check2(!isDevMode(), "isDevMode");
}

// testing deserialize_string
test4() {
	s = deserializeString("\"1\\\"2\"").first;
	check2(s == "1\"2", "deserializeString");
}

main() {
	test1();
	test2();
	test3();
	test4();
	// quit(1);
}