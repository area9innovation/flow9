// test for binarytree.flow

import runtime;		// for println
import math; // for i2d
import ds/tree;
import url_parameter;

check1(ok : bool) {
	println(if (ok) "OK!" else "FAILURE!!!");
}

print_time(t1 : double, t2 : double) {
	d2i2 = \d -> cast(d : double -> int); 
	println("t = " + i2s(d2i2(t2 - t1)) + " ms");
}

MyStruct31(i : int);

test31() {
	n = if (isUrlParameterTrue("fast")) 100 else 30000;
	k = 17; nn = 10;
	a = enumFromTo(0, n-1);
	t = fold(a, makeTree(), \acc, x -> {
		xx = (x * k) % n;
		setTree(acc, i2s(xx), MyStruct31(xx));
	});
	
	ok = ref true;
	ann = enumFromTo(0, nn-1);
	iter(ann, \__ -> {
		t1 = timestamp();
			iter(ann, \__ -> {
			iter(a, \x -> {
				xx = (x * k) % n;
				m = lookupTree(t, i2s(xx));
				switch (m) {
					None(): ok := false;
					Some(st): if (st.i != xx) ok := false;
				}
			});
		})
		t2 = timestamp();
		print_time(t1, t2);
	});
	check1(^ok);
}

main() {
	test31();
}
