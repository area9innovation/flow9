native println : io (string) -> void = Native.println;
native timestamp : io () -> double = Native.timestamp;
i2s(i) { cast(i : int -> string); }
d2s(i) { cast(i : double -> string); }

native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native enumFromTo : (int, int) -> [int] = Native.enumFromTo;
native map : ([?], (?) -> ??) -> [??] = Native.map;
native iter : ([?], (?)->void) -> void = Native.iter;
native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
native replace : ([?], int, ?) -> [?] = Native.replace;
native length : ([?]) -> int = Native.length;
arrayPush(array :[?], value :?) -> [?] { replace(array, length(array), value); }

native list2array : (l : List<?>) -> [?] = Native.list2array;

assert(cond : bool, msg : string) {
	if (!cond) println("ERROR! " + msg);
}

print_time(t1 : double, t2 : double) {
	d2i2 = \d -> cast(d : double -> int); 
	println("t = " + i2s(d2i2(t2 - t1)) + " ms");
}

List<?> ::= EmptyList, Cons<?>;
	EmptyList();
	// Add head to the list "tail"
	Cons(head : ?, tail : List<?>);
	
Struct(s1 : string, s2 : string);

iterList(l : List<?>, fn : (?) -> void) -> void {
	switch (l) {
		Cons(head, tail): {
			fn(head);
			iterList(tail, fn);
		}
		EmptyList(): {}
	}
}

test1() {
	t1 = timestamp();
	n = 5000;
	a = enumFromTo(0, n-1);
	s = Struct("111", "222");
	iter(a, \__ -> {
		l = fold(a, EmptyList(), \acc, __ -> Cons(s, acc));
		iterList(l, \ss -> assert(s == ss, "s == ss"));
	});
	t2 = timestamp();
	print_time(t1, t2);
}

test2_base(label : string, n : int, item : ?) -> void {
	println("test2. " + label);
	t1 = timestamp();
	a : [?] = [];
	aa = enumFromTo(0, n-1);
	a2 = fold(aa, a, \acc, __ -> {
		arrayPush(acc, item)
	});
	assert(length(a2) == n, "length(a2)");
	iter(a2, \ss -> assert(item == ss, "item == ss"));
	t2 = timestamp();
	print_time(t1, t2);
}

test2() {
	n = 25000;
	// test2_base("int", n, 123);
	test2_base("string", n, "123");
	// test2_base("struct", n, Struct("111", "222"));
}

test3() {
	println("test3");
	t1 = timestamp();
	n = 2500;
	a = enumFromTo(0, n-1);
	s = Struct("111", "222");
	iter(a, \__ -> {
		l = fold(a, EmptyList(), \acc, __ -> Cons(s, acc));
		x = list2array(l);
		iter(x, \ss -> assert(s == ss, "s == ss"));
	});
	t2 = timestamp();
	print_time(t1, t2);
}

main() {
	// test1();
	test2();
	// test3();
}