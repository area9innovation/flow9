// testing concurrency

import concurrent;
import ds/tree;
import tools/flowc/tests/cpp/test_utils;
import url_parameter;


runTask(f : () -> ?) -> ? {
	concurrent(true, [f])[0];
}


/*
test1() {
	println(toString(isUrlParameterTrue("fast")));
	p = if (isUrlParameterTrue("fast")) Pair(4, 1000) else Pair(20*2, 30000*2);
	verbose = !isUrlParameterFalse("verbose");
	// p = Pair(4, 1000);
	N = p.first; M = p.second;
	println(toString(N) + " " + toString(M));
	a = enumFromTo(0, M-1);
	tasks = map(enumFromTo(0, N-1), \i -> {
		\ -> {
			if (verbose) println("starting " + i2s(i));
			t = fold(a, makeTree(), \acc, j -> {
				// s = i2s(j);
				// setTree(acc, s, s);
				setTree(acc, j, j);
			});
			if (verbose) println("finishing " + i2s(i));
			getTreeKeys(t)
		}
	});
	println("starting...");
	t1 = timestamp();
	results = concurrent(true, tasks);
	t2 = timestamp();
	print_time(t1, t2);
	// results = sequential(true, tasks);
	ok = ref true;
	iter(results, \r -> {
		ok := (^ok) && (results[0] == r); 
		// println(toString(r));
	});
	check1(^ok);
}

MyStruct02(i : int, refI : ref int);

test02() {
	a = enumFromTo(0, 9);
	tasks = map(a, \i -> 
		\ -> {
			MyStruct02(i, ref i)
		}
	);
	res = concurrent(true, tasks);
	ans = map(a, \i -> MyStruct02(i, ref i));
	// println(toString(res));
	// println(toString(ans));
	ok = ref true;
	iter(a, \i -> {
		ok := (^ok) && (res[i].i == ans[i].i) && ^(res[i].refI) == ^(ans[i].refI);
	});
	check1(^ok);
}

test04() {
	p = Pair(1, 2);
	t = \ -> {
		[p]
	}
	r = runTask(t);
	check1(isSameObj(r[0], p));
}
*/

test01() {
	p = Pair(1, 2);
	r = runTask(\ -> p);
	check1(isSameObj(r, p));
}

test02() {
	r = runTask(\ -> Pair(1, 2));
	check1(r.first == 1 && r.second == 2);
}

test03() {
	s1 = "abc";
	s2 = s1;
	s3 = "ccc";
	check1(isSameObj(s1, s2) && !isSameObj(s1, s3));
	r = runTask(\ -> Pair(s1, s2));
	check1(isSameObj(r.first, s1) && isSameObj(r.second, s1));
}

test04() {
	p1 = Pair(1, 1);
	p3 = Pair(3, 3);
	t = pairs2tree([p1, p3]);
	tt = runTask(\ -> setTree(t, 2, 2));
	r1 = lookupTreeDef(tt, 1, 0);
	r3 = lookupTreeDef(tt, 3, 0);
	check1(r1 == 1 && r3 == 3);
}

test05() {
	t = \ -> {
		r = ref 0;
		Pair(r, r)
	}
	p : Pair<ref int, ref int> = runTask(t);
	p.first := 123;
	check1(^(p.second) == 123);
}

test06() {
	a = enumFromTo(0, 1000);
	t = \ -> {
		fold(a, makeTree(), \acc, x -> setTree(acc, i2s(x), Pair(x, x)))
	}
	tree = runTask(t);
	ok = ref true;
	iter(a, \x -> switch (lookupTree(tree, i2s(x))) {
		Some(p): ok := (^ok) && (p.first == x) && (p.second == x);
		None(): ok := false;
	});
	check1(^ok);
}

test07() {
	tr : Tree<int, int> = makeTree1(1, 1);
	tr2 = runTask(\ -> tr);
	check1(isSameObj(tr, tr2));
}

test08() {
	a = enumFromTo(0, 9999);
	t = \ -> fold(a, makeTree(), \acc, x -> setTree(acc, x, i2s(x)));
	r = concurrent(true, [t, t]);
	check1(r[0] == r[1]);
}

test09() {
	s = "abc";
	p = runTask(\ -> {
		ss = s + s;
		Pair(ss, ss)
	});
	check1(isSameObj(p.first, p.second) && p.first == p.second && p.first == s + s);
}

myTreeDepth(tree : Tree<?, ??>) -> int {
	switch (tree : Tree) {
	TreeEmpty(): 0;
	TreeNode(k, v, left, right, depth):
		depth;
	}
}

test10() {
	key = \x -> Triple(x / 16, (x / 4) % 4, x % 4);
	a = enumFromTo(0, 63);
	tr = fold(a, makeTree(), \acc, x -> setTree(acc, key(x), x));
	println(myTreeDepth(tr));
	tr2 = fold(a, tr, \acc, x -> setTree(acc, key(x), x));
	println(myTreeDepth(tr2));
	ok = fold(a, true, \acc, x -> acc && x == lookupTreeDef(tr2, key(x), -1));
	// iter(a, \x -> {
		// println(x);
		// println(toString(key(x)));
		// println(toString(lookupTree(tr2, key(x))));
	// });
	check1(ok);
	r1 = Pair(0, ref 0);
	r2 = Pair(0, ref 1);
	check1(r1 < r2);
}

main() {
	/*
	test01();
	
	test02();
	test03();
	test04();
	test05();
	
	test06();
	// test07();	// TODO
	
	test08();
	
	println("test09...");
	test09();
	*/
	test10();
}