import tools/common/compilerconfig;
import tools/flowc/flow_parser;
import tools/flowc/flowc_helpers;
import tools/flowc/desugar;
import tools/flowc/prettyprint;
import tools/flowc/typechecker/typechecker;
import tools/flowc/incremental/fc2fi;
import tools/flowc/backends/cpp/fc2cpp;

import tools/flowc/tests/cpp/test_utils;

forbid serialize;
// forbid tools/flowc/incremental;
forbid tools/flowc/flowc_module;
// forbid deserialize_string;
forbid formats/json/json;


parseFile(file : string, config) -> FcParsed {
	fileinfo = getFcFileInfo(file, config);
	if (0 == strlen(fileinfo.content)) {
		println("ERROR! Cannot find " + file);
	}
	pr = parse_flow(fileinfo.content);
	st = pr.first;
	if (st.end != strlen(fileinfo.content)) {
		println("ERROR! Parsing error in " + file);
	}
	FcParsed(fileinfo, st, extractFcImports(fileinfo, st));
}

desugarParsed(tenv : FcTypeEnv, parsed : FcParsed) -> FcTypeEnv {
	acc = tenv.global.acc;
	config = acc.config;
	module = desugarFcModule(acc, tenv.local, parsed.fileinfo, parsed.syntaxtree, config);
	tenv_ndep = addDesugaredModuleToGlobal(config, tenv.global, module);
	tenv2 = FcTypeEnv(tenv_ndep.first, tenv.local);
	typechecked = typecheckFcModule(tenv2, module);
	FcTypeEnv(mergeTypingToFcTypeEnv(typechecked.first, typechecked.second, module, tenv2.global), tenv.local)
}

addModule(tenv : FcTypeEnv, file : string) -> FcTypeEnv {
	parsed = parseFile(file, tenv.global.acc.config);
	desugarParsed(tenv, parsed)
}

makeTenv(config) -> FcTypeEnv {
	idfactory = makeIdFactory(0, 10000);
	globalid = makeIdFactory(10000000, 0);	// With bucket zero, it becomes atomic
	acc = FlowcAcc(
		makeDependencyTracker(),
		makeTree(),
		makeTree(), 
		[],
		FcGlobalNames(makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), makeTree()), 
		config, 
		idfactory,
		makeIdGroup(globalid),
	);
	errors = ref 0;
	FcTypeEnv(
		FcTypeEnvGlobal(
			acc,
			makeTree(),
			\e -> println(e.message),
			ref 0
		),
		initFcTypeEnvLocal()
	);
}

run(f : (CompilerConfig) -> void) {
	config1 = getCompilerConfig();
	switch (config1) {
		Some(config): f(config);
		default: println("ERROR getting config!");
	}
}

getCppConfig(config : CompilerConfig) -> FcCppConfig {
	FcCppConfig(
		"", //config.flowfile,
		"test151_out.cpp", //cppparam,
		config.includes,
		config.jsParams.debug,
		config.verbose,
		FiFileInfo("", 0.0,"",""),
		makeTree()
	)
}

test1(config : CompilerConfig, files : [string]) {
	t1 = timestamp();
	n = 100;
	iter(enumFromTo(0, n-1), \__ -> {
		tenv = makeTenv(config);
		tenv2 = fold(files, tenv, \tenvacc, fn -> addModule(tenvacc, fn + ".flow"));
		program = fctypeenv2fi(tenv2.global);
		cppconfig = getCppConfig(config);
		fc2cpp(program, cppconfig, \ -> {});
	});
	t2 = timestamp();
	print_time(t1, t2);
}

main() {
	files = [
		"test1"
	];
	run(\config -> test1(config, files));
	// run(\config -> test2(config, files));
}

