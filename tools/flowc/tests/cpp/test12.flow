// test for binarytree.flow

import runtime;		// for println
import math; // for i2d
import ds/tree;
import ds/set;
import url_parameter;

import tools/flowc/tests/cpp/test_utils;

// d2i(d) { cast(d : double -> int); }

strGlue2(arr: [string], sep: string) {
	if (arr == []) ""
	else if (length(arr) == 1) arr[0]
	else arr[0] + sep + strGlue2(tail(arr), sep);
}

// -------------------------------------------------------------------------------------

test1() {
	tr1 = makeTree1(1, 1);
	tr2 = setTree(tr1, 3, 3);
	tr3 = setTree(tr2, 2, 2);
	keys = getTreeKeys(tr3);
	s = strGlue2(map(keys, i2s), "");
	println(s);
	check1(s == "123");
}

test2() {
	a = [5,9,3,7,1,0,6,2,8,4];
	tr = fold(a, makeTree(), \acc, x -> setTree(acc, x, x));
	keys = getTreeKeys(tr);
	s = strGlue2(map(keys, i2s), "");
	println(s);
	check1(s == "0123456789");
}

test3() {
	params = if (isUrlParameterTrue("fast")) Pair(60*1000, 1001)
			 else {
				Pair(600*1000*5, 101)
			 }
	n = params.first; k = params.second;
	// n = 600*1000*5; k = 101;
	// n = 600*1000; k = 1001;
	// n = 60*1000; k = 1001;
	
	if (i2d(n) * i2d(k) > 2000000000.0) println("Overflow!!!");
	a = enumFromTo(0, n-1);
	t0 : Tree<int, int> = makeTree();
	t1 = timestamp();
	tr = fold(a, t0, \acc, x -> setTree(acc, (x * k) % n, x));
	t2 = timestamp();
	keys = getTreeKeys(tr);
	print_time(t1, t2);
	aa = subrange(keys, 0, 20);
	println(strGlue2(map(aa, i2s), ","));
	check1(keys == a);
	check1(isSome(lookupTree(tr, 0)) && isNone(lookupTree(tr, -1)));
}


// testing Set

test4() {
	s0 = makeSet();
	s1 = insertSet(s0, 1);
	s2 = insertSet(s1, 0);
	// println(toString(set2array(s2)));
	check1(set2array(s2) == [0, 1]);
}

// testing tree 

Union5 ::= Struct51, Struct52;
	Struct51(i : int);
	Struct52(i : int);

test5() {
	a = [Struct51(51), Struct52(52)];
	tr = fold(a, makeTree(), \acc, s -> {
		setTree(acc, i2s(s.i), s)
	});
	f = \x -> {
		m = lookupTree(tr, x);
		switch (m) {
			Some(s): s.i;
			None(): 0;
		}
	}
	check3(f("51") == 51, "test5.1");
	check3(f("52") == 52, "test5.2");
}

main() {
	// test1();
	// test2();
	test3();
	// test4();
	// test5();
}
