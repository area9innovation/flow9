import tools/common/compilerconfig;
import tools/flowc/flowcacc;
import tools/flowc/preload_modules;
import tools/flowc/typechecker/typechecker;
import tools/flowc/flowc_typeverify;

export {
	// Parse and typecheck this program. Uses recursive parseAndTypecheckFlowFile2() to do the main job
	// Returns a pair: a program and an error counter
	parseAndTypecheckFlowFile(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string) -> Pair<FiProgram, int>;
}

parseAndTypecheckFlowFile(config : CompilerConfig, globEnv : FcTypeEnvGlobal, file : string) -> Pair<FiProgram, int> {
	errors = ref 0;
	acc = prepareInitialFlowcAcc(config);
	errHandler = \e -> {
			errors := ^errors + 1;
			if (^errors < 200) {
				printFcError(acc, e)
			} else if (^errors == 200) {
				fcPrintln("Too many errors. Ignoring the rest", config.threadId);
			}
		};

	tenv1 = FcTypeEnvProgram(
		acc,
		makeTree(),
		errHandler,
		errors,
		ref makeTree(),
		emptyGSubtypeGraph()
	);

	// Parse all files, or load incremental files
	t0 = timestamp();
	modules = preloadModules(config, globEnv, file, tenv1.printError);
	incrementTimePhase(getTimePhases(tenv1.acc.config.threadId).parse, t0);

	t1 = timestamp();
	// OK, let us reclaim what we can before we continue
	gc();
	incrementTimePhase(getTimePhases(tenv1.acc.config.threadId).other, t1);

	if (^errors == 0) {

		// Typecheck all files
		tenv2 = processPreloadedModulesInParallel(tenv1, globEnv, modules);

		t2 = timestamp();
		prog = fctypeenv2fi(tenv2);
		incrementTimePhase(getTimePhases(tenv2.acc.config.threadId).other, t2);

		Pair(prog, ^errors)
	} else {
		Pair(fctypeenv2fi(tenv1), ^errors)
	}
}

processPreloadedModulesInParallel(tenv : FcTypeEnvProgram, globEnv : FcTypeEnvGlobal, preloadedModules : Tree<string, FcPreloadedModule>) -> FcTypeEnvProgram {
	t0 = timestamp();
	// Find the loaded modules where all dependent files are ready
	readyForProcessing : [FcPreloadedModule] = filtermap(
		tree2pairs(preloadedModules),
		\p : Pair<string, FcPreloadedModule> ->
			if (!containsKeyTree(tenv.acc.modules, preloadedFiFileInfo(p.second).flowfile) &&
				forall(preloadedFcImports(p.second), \im : FcImport -> containsKeyTree(tenv.acc.modules, im.flowfile))) {
				Some(p.second)
			} else {
				None()
			}
	);
	incrementTimePhase(getTimePhases(tenv.acc.config.threadId).other, t0);

	if (readyForProcessing == []) {
		// We are done, everything is processed
		tenv
	} else {
		// Proceed with modules that are ready 

		resolved : [FcPreloadedModule] = map(readyForProcessing, \preloaded -> 
			switch (preloaded : FcPreloadedModule) {
				FcParsed(fileinfo, __, __, __, __): {
					switch (fcLoadFromCache(globEnv, fileinfo.flowfile)) {
						Some(__): {
							if (tenv.acc.config.verbose >= 1) {
								fcPrintln("Removing outdated module '" + fileinfo.flowfile + "' from cache", tenv.acc.config.threadId);
							}
							// When a module is parsed, it means that its version in cache is outdated.
							fcRemoveFromCache(globEnv, fileinfo.flowfile)
						}
						None(): { }
					}
					preloaded;
				}
				FcLoaded(module, dependencyChanged): {
					if (dependencyChanged()) {
						if (tenv.acc.config.verbose >= 1) {
							fcPrintln("Verifying types in module '" + module.fileinfo.flowfile + "'", tenv.acc.config.threadId);
						}
						if (typeverifyFiModule(tenv, module, \__ -> {})) {
							updated = FiModule(module with
								fileinfo = updateFiFileInfo(module.fileinfo),
								allImports = updateAllImports(module.imports, tenv.acc.modules)
							);
							if (!isConfigParameterFalse(tenv.acc.config.config, "incremental")) {
								saveModuleInIncremental(tenv.acc.config, updated, tenv.acc.config.verbose, tenv);
							}
							FcLoaded(updated, dependencyChanged);
						} else {
							if (tenv.acc.config.verbose >= 1) {
								fcPrintln("Failed type verification for incremental for " + module.fileinfo.flowfile, tenv.acc.config.threadId);
							}
							reparseOutdatedModule(module.fileinfo.flowfile, tenv.acc.config, tenv.printError)
						}
					} else {
						preloaded
					}
				}
			}
		);
		
		//
		// First, grab those that are parsed, and ready for desugaring and typechecking
		//
		ready2 : [FcParsed] = filtermap(resolved, \preloaded -> switch (preloaded : FcPreloadedModule) {
			FcParsed(__,__,__,__,__): Some(preloaded);
			FcLoaded(__,__): None();
		});
		config = tenv.acc.config;
		tenv1 = tenv;

		// Now process parsed modules: desugar, and leave only error-free modules.
		t1 = timestamp();
		desugared : [Pair<FcModule, FcTypeEnvLocal>] = fold(
			runTasks(config, map(ready2, \parsed ->
				\ -> {
					localEnv = initFcTypeEnvLocal();
					Pair(desugarFcModule(tenv1.acc, localEnv, parsed.fileinfo, parsed.syntaxtree), localEnv)
				}
			)),
			[],
			\acc, pair -> {
				// Filter out modules with errors
				if (pair.first.errors != []) {
					// Something went wrong - remove old incremental files and erase cache entry
					flowfile = pair.first.fileinfo.flowfile;
					deleteIncrementalModule(config, flowfile);
					fcRemoveFromCache(globEnv, flowfile);
					// Print all module errors, because they are not printed in 'desugarFcModule'
					iter(pair.first.errors, \err -> tenv1.printError(err));
					acc
				} else {
					concat(acc, [pair])
				}
			}
		);
		// add all parsed and desugared modules to tenv
		tenv2 = fold(desugared, tenv1, \tenvCur, modEnv ->
			addDesugaredModuleToGlobal(tenvCur, modEnv.first)
		);
		incrementTimePhase(getTimePhases(tenv2.acc.config.threadId).desugar, t1);

		// Typecheck all modules. Leave only error-free modules.
		t2 = timestamp();
		typechecked_all = fold(
				runTasks(config, map(desugared, \modEnv : Pair<FcModule, FcTypeEnvLocal> -> \ ->
					typecheckFcModule(FcTypeEnv(globEnv, tenv2, modEnv.second), modEnv.first)
				)
			),
			[],
			// Filter out modules with errors
			\acc, typechecked -> {
				if (typechecked.errors) {
					// Something went wrong - remove old incremental files and erase cache entry
					flowfile = typechecked.module.fileinfo.flowfile;
					deleteIncrementalModule(config, flowfile);
					fcRemoveFromCache(globEnv, flowfile);
					acc
				} else {
					concat(acc, [typechecked])
				}
			}
		);

		tenv3 = fold(typechecked_all, tenv2, \tenvCur, typechecked ->
			mergeTypechecked2TypeEnv(typechecked.typing, typechecked.module, tenvCur, globEnv)
		);

		//
		// Now, do the incremental modules
		//
		ready4 : [FiModule] = filtermap(resolved, \preloaded -> switch (preloaded : FcPreloadedModule) {
			FcLoaded(module, __): Some(module);
			FcParsed(__,__,__,__,__): None();
		});

		tenv4 = fold(ready4, tenv3, \acc, m : FiModule -> mergeIncremental2TypeEnvProgram(acc, globEnv, m));
		incrementTimePhase(getTimePhases(tenv4.acc.config.threadId).typecheck, t2);

		// save cached modules
		saveIncrementalModulesIfNeeded(map(typechecked_all, \typechecked -> typechecked.module), tenv4);

		t3 = timestamp();
		processedNames = buildSet(map(readyForProcessing, \preloaded -> preloadedFiFileInfo(preloaded).flowfile));
		whatIsLeft = foldTree(
			preloadedModules,
			makeTree(),
			\name, preloaded, acc -> {
				if (containsSet(processedNames, name)) {
					acc
				} else {
					setTree(acc, name, preloaded)
				}
			}
		);
		incrementTimePhase(getTimePhases(tenv4.acc.config.threadId).other, t3);

		// Process what is left
		processPreloadedModulesInParallel(tenv4, globEnv, whatIsLeft)
	}
}

updateAllImports(imports : [FiImport], modules : Tree<string, FiModule>) -> Set<string> {
	fold(imports, buildSet(map(imports, \imp -> imp.flowfile)),
		\acc, imp -> {
			imp_mod = lookupTreeDef(modules, imp.flowfile, dummyFiModule);
			mergeSets(acc, imp_mod.allImports)
		}
	);
}
