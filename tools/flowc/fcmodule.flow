import tools/flowc/fcexp;
import ds/set;
import tools/flowc/incremental/fifileinfo;

export {
	FcModule(
		fileinfo : FcFileInfo,
		imports: [FcImport], // unresolved paths to included modules
		forbids : [FcForbid], // unresolved paths to forbid
		exports: Set<string>, // names of unions, structs, functions, values, natives
		structs : Tree<string, FcTypeStruct>,
		unions : Tree<string, FcTypeUnion>,
		functions: Tree<string, FcFunctionDec>,
		globalVars: Tree<string, FcGlobalVar>,
		natives: Tree<string, FcNativeDec>,
		// Safe initialization order of globals and functions.
		initOrder : [string],
		stringIncludes : [FiFileInfo], // "#include file"
		// Errors from parsing and desugaring
		errors : [FcError],
		// Next alpha id
		typevarid : int,
		isCached : bool,
		start : int, end : int,
		allImports : Set<string>, // All imported files, transitive closure
	);

	FcImport(flowfile : string, dynamic : bool, start : int, end : int);
	FcForbid(flowfile : string, start : int, end : int);

	FcDeclaration ::= FcFunctionDec, FcGlobalVar, FcNativeDec;

	// The info is for the declaration, while the lambda is for the implementation
	FcFunctionDec(
		name: string,
		lambda: Maybe<FcLambda>,
		declType : FcTypeFunction2,
		declInfo : FcInfo,
		defiInfo : FcInfo
	);
		FcPolymorphicConstraint(from : string, to : string);

	FcGlobalVar(
		name: string,
		value: Maybe<FcExp>,
		declInfo : FcInfo,
		bodyInfo : FcInfo
	);

	FcNativeDec(
		name: string, io: bool,
		type : FcType,
		nativeName : string,
		flowfallback: Maybe<FcFunctionDec>,
		info : FcInfo
	);

	// Some error message
	FcError(message : string, positions : [FcPosition]);
	FcPosition(file : string, start : int, end : int);

	fcNativeHasFallback(nat : FcNativeDec) -> bool;
	fcDeclarationInfo(decl : FcDeclaration) -> FcInfo;
	fcCheckAvailableContent(info : FcFileInfo) -> void;
}

fcNativeHasFallback(nat : FcNativeDec) -> bool {
	switch (nat.flowfallback) {
		None() : false;
		Some(__) : true;
	}
}

fcDeclarationInfo(decl) {
	switch (decl) {
		FcFunctionDec(__, __, __, declInfo, __) : declInfo;
		FcGlobalVar(__, __, declInfo, __) : declInfo;
		FcNativeDec(__, __, __, __, __, info) : info;
	}
}

// (Re)Load file content from disk if required.
// Used at least while generating FcInt for hex numbers detection.
fcCheckAvailableContent(info) {
	if (info.content == "") {
		info.content ::= getFileContent(info.fullpath);
	}
}
