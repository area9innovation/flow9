import sys/concurrent;
import math/stringmath;
import tools/common/config;
import tools/flowc/flowc_println;

export {
	// Get time phases for a given thread id.
	getTimePhases(id : int) -> FcTimePhasesT;

	incrementTimePhase(counter : ref double, start : double) -> void;

	displayTimePhase(config : CompilerConfig) -> void;

	// Clear time phases for a given thread id.
	clearTimePhases(id : int) -> void;

	// Monitoring of time spent in difference phases
	FcTimePhasesT : (
		total : ref double,
		parse : ref double,
		desugar : ref double,
		typecheck : ref double,
		typeverify : ref double,
		save : ref double,
		optimize : ref double,
		cse : ref double,
		build : ref double,
		other : ref double,
	);
}

fcTimePhasesMap = initConcurrentHashMap();

getTimePhases(id : int) -> FcTimePhasesT {
	if (!containsConcurrentHashMap(fcTimePhasesMap, id)) {
		setConcurrentHashMap(fcTimePhasesMap, id, 
			FcTimePhasesT(ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0.)
		);
	}
	getConcurrentHashMap(fcTimePhasesMap, id);
}

incrementTimePhase(counter : ref double, start : double) {
	counter := ^counter + timestamp() - start;
}

displayTimePhase(config : CompilerConfig) {
		fcTimePhases = getTimePhases(config.threadId);
		prn = \label, time -> {
			fcPrintln(label + ": " + d2st(^time / ^(fcTimePhases.total) * 100.0, 1) + "% (" + d2st(^time / 1000.0, 2) + "s)", config.threadId);
		}
		prn("Parse/load", fcTimePhases.parse);
		prn("Desugar   ", fcTimePhases.desugar);
		prn("Typecheck ", fcTimePhases.typecheck);
		if (^(fcTimePhases.typeverify) > 0.0) {
			prn("Typeverify", fcTimePhases.typeverify);
		}
		if (!isConfigParameterFalse(config.config, "optimize") && ^(fcTimePhases.optimize) > 0.0) {
			prn("Optimize  ", fcTimePhases.optimize);
		}
		if ((!isConfigParameterFalse(config.config, "cse") || !isConfigParameterFalse(config.config, "cse-global")) && ^(fcTimePhases.cse) > 0.0) {
			prn("CSE       ", fcTimePhases.cse);
		}
		if (buildPhaseIsUsed(config) && ^(fcTimePhases.build) > 0.0) {
			prn("Build     ", fcTimePhases.build);
		}
		if (!isConfigParameterFalse(config.config, "incremental")) {
			prn("Save      ", fcTimePhases.save);
		}
		if (^(fcTimePhases.other) > 0.0) {
			prn("Other     ", fcTimePhases.other);
		}
		prn("Total     ", ref
			^(fcTimePhases.parse) +
			^(fcTimePhases.desugar) +
			^(fcTimePhases.typecheck) +
			^(fcTimePhases.typeverify) +
			^(fcTimePhases.save) +
			^(fcTimePhases.optimize) +
			^(fcTimePhases.cse) +
			^(fcTimePhases.build) +
			^(fcTimePhases.other)
		);
}

clearTimePhases(id : int) -> void {
	setConcurrentHashMap(fcTimePhasesMap	, id, 
		FcTimePhasesT(ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0.)
	);
}

buildPhaseIsUsed(config : CompilerConfig) -> bool {
	if (!isConfigParameterFalse(config.config, "js")) true
	else if (!isConfigParameterFalse(config.config, "es6")) true
	else if (!isConfigParameterFalse(config.config, "nodejs")) true
	else if (!isConfigParameterFalse(config.config, "nwjs")) true
	else if (!isConfigParameterFalse(config.config, "ts")) true
	else if (!isConfigParameterFalse(config.config, "bytecode")) true
	else if (!isConfigParameterFalse(config.config, "ml")) true
	else if (!isConfigParameterFalse(config.config, "java")) true
	else if (!isConfigParameterFalse(config.config, "D")) true
	else if (!isConfigParameterFalse(config.config, "cpp")) true
	else if (!isConfigParameterFalse(config.config, "lisp")) true
	else if (!isConfigParameterFalse(config.config, "rust")) true
	else if (!isConfigParameterFalse(config.config, "inca")) true
	else if (!isConfigParameterFalse(config.config, "html")) true
	else if (!isConfigParameterFalse(config.config, "protobuf")) true
	else if (!isConfigParameterFalse(config.config, "wasm")) true
	else if (!isConfigParameterFalse(config.config, "doc")) true
	else if (!isConfigParameterFalse(config.config, "flow")) true
	else if (!isConfigParameterFalse(config.config, "html")) true
	else false
}
