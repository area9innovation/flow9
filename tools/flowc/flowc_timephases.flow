import math/stringmath;
import tools/common/config;
import tools/flowc/flowc_println;

export {
	// Monitoring of time spent in difference phases
	fcTimePhases = FcTimePhasesT(ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0., ref 0.);

	incrementTimePhase(counter : ref double, start : double) -> void;
	displayTimePhase(config : CompilerConfig) -> void;
	clearTimePhases() -> void;

	FcTimePhasesT : (
		total : ref double,
		parse : ref double,
		desugar : ref double,
		typecheck : ref double,
		typeverify : ref double,
		save : ref double,
		optimize : ref double,
		cse : ref double,
		build : ref double,
		other : ref double,
	);
}

incrementTimePhase(counter : ref double, start : double) {
	counter := ^counter + timestamp() - start;
}

displayTimePhase(config : CompilerConfig) {
		prn = \label, time -> {
			fcPrintln(label + ": " + d2st(^time / ^(fcTimePhases.total) * 100.0, 1) + "% (" + d2st(^time / 1000.0, 2) + "s)");
		}
		prn("Parse/load", fcTimePhases.parse);
		prn("Desugar   ", fcTimePhases.desugar);
		prn("Typecheck ", fcTimePhases.typecheck);
		if (^(fcTimePhases.typeverify) > 0.0) {
			prn("Typeverify", fcTimePhases.typeverify);
		}
		if (!isConfigParameterFalse(config.config, "optimize") && ^(fcTimePhases.optimize) > 0.0) {
			prn("Optimize  ", fcTimePhases.optimize);
		}
		if ((!isConfigParameterFalse(config.config, "cse") || !isConfigParameterFalse(config.config, "cse-global")) && ^(fcTimePhases.cse) > 0.0) {
			prn("CSE       ", fcTimePhases.cse);
		}
		if (buildPhaseIsUsed(config) && ^(fcTimePhases.build) > 0.0) {
			prn("Build     ", fcTimePhases.build);
		}
		if (!isConfigParameterFalse(config.config, "incremental")) {
			prn("Save      ", fcTimePhases.save);
		}
		if (^(fcTimePhases.other) > 0.0) {
			prn("Other     ", fcTimePhases.other);
		}
		prn("Total     ", ref
			^(fcTimePhases.parse) +
			^(fcTimePhases.desugar) +
			^(fcTimePhases.typecheck) +
			^(fcTimePhases.typeverify) +
			^(fcTimePhases.save) +
			^(fcTimePhases.optimize) +
			^(fcTimePhases.cse) +
			^(fcTimePhases.build) +
			^(fcTimePhases.other)
		);
}

clearTimePhases() -> void {
	fcTimePhases.total := 0.0;
	fcTimePhases.parse := 0.0;
	fcTimePhases.desugar := 0.0;
	fcTimePhases.typecheck := 0.0;
	fcTimePhases.typeverify := 0.0;
	fcTimePhases.save := 0.0;
	fcTimePhases.optimize := 0.0;
	fcTimePhases.cse := 0.0;
	fcTimePhases.build := 0.0;
	fcTimePhases.other := 0.0;
}

buildPhaseIsUsed(config : CompilerConfig) -> bool {
	if (!isConfigParameterFalse(config.config, "js")) true
	else if (!isConfigParameterFalse(config.config, "es6")) true
	else if (!isConfigParameterFalse(config.config, "nodejs")) true
	else if (!isConfigParameterFalse(config.config, "nwjs")) true
	else if (!isConfigParameterFalse(config.config, "ts")) true
	else if (!isConfigParameterFalse(config.config, "bytecode")) true
	else if (!isConfigParameterFalse(config.config, "ml")) true
	else if (!isConfigParameterFalse(config.config, "java")) true
	else if (!isConfigParameterFalse(config.config, "D")) true
	else if (!isConfigParameterFalse(config.config, "cpp")) true
	else if (!isConfigParameterFalse(config.config, "lisp")) true
	else if (!isConfigParameterFalse(config.config, "rust")) true
	else if (!isConfigParameterFalse(config.config, "inca")) true
	else if (!isConfigParameterFalse(config.config, "html")) true
	else if (!isConfigParameterFalse(config.config, "protobuf")) true
	else if (!isConfigParameterFalse(config.config, "wasm")) true
	else if (!isConfigParameterFalse(config.config, "doc")) true
	else if (!isConfigParameterFalse(config.config, "flow")) true
	else if (!isConfigParameterFalse(config.config, "html")) true
	else false
}
