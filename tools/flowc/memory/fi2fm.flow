import tools/flowc/incremental/fi_helpers;
import tools/flowc/memory/fmexp;

export {
	fiExp2fmExp(e: FiExp) -> FmExp;
}

fiExp2fmExp(ex: FiExp) -> FmExp {
	switch (ex) {
		FiSeq(es, type, start): {
			FmSeq(map(es, fiExp2fmExp), type, start)
		}
		FiCast(e, from, to, type, start): {
			FmCallPrim(FmCastPrim(from, to), [fiExp2fmExp(e)], type, start);
		}
		FiCall(f, args, type, start): {
			FmCall(fiExp2fmExp(f), map(args, fiExp2fmExp), type, start);
		}
		FiSwitch(v, vtype, cases, type, start): {
			FmSwitch(v, type, map(cases, \c -> FmCase(c.struct, c.argNames, fiExp2fmExp(c.body), c.start)), type, start)
		}
		FiLambda(args, body, type, start): {
			FmLambda(args, fiExp2fmExp(body), type, start);
		}
		FiLet(name, vtype, e1, e2, type, start): {
			FmLet(FiVar(name, vtype, start), fiExp2fmExp(e1), fiExp2fmExp(e2), type, start);
		}
		FiIf(e1, e2, e3, type, start): {
			FmIf(fiExp2fmExp(e1), fiExp2fmExp(e2), fiExp2fmExp(e3), type, start);
		}
		FiCallPrim(op, es, type, start): {
			switch (op) {
				FcAssignPrim(): {
					FmAssign(fiExp2fmExp(es[0]), fiExp2fmExp(es[1]), start);
				}
				FcSetMutablePrim(field): {
					FmAssign(
						FmCallPrim(FmFieldPrim(field), [fiExp2fmExp(es[0])], fiExpType(es[1]), start),
						fiExp2fmExp(es[1]), start
					);
				}
				default: FmCallPrim(fcPrim2FmPrim(op), map(es, fiExp2fmExp), type, start);
			}
		}
		FiRequire(file, e, type, start): {
			FmCallPrim(FmRequirePrim(file), [fiExp2fmExp(e)], type, start);
		}
		FiUnsafe(name, fb, type, start): {
			FmCallPrim(FmUnsafePrim(name), [fiExp2fmExp(fb)], type, start);
		}
		FiVar(__,__,__):   ex;
		FiVoid(__):        ex;
		FiDouble(__, __):  ex;
		FiInt(__, __):     ex;
		FiString(__, __):  ex;
		FiBool(__, __):    ex;
	}
}

fcPrim2FmPrim(op: FcPrim) -> FmPrim {
	switch (op) {
		FcOrPrim():  FmOrPrim();
		FcAndPrim(): FmAndPrim();
		FcNotPrim(): FmNotPrim();

		FcEqPrim():  FmEqPrim();
		FcNePrim():  FmNePrim();
		FcLePrim():  FmLePrim();
		FcGePrim():  FmGePrim();
		FcLtPrim():  FmLtPrim();
		FcGtPrim():  FmGtPrim();

		FcPlusPrim():  FmPlusPrim();
		FcMinusPrim(): FmMinusPrim();
		FcMulPrim():   FmMulPrim();
		FcDivPrim():   FmDivPrim();
		FcModPrim():   FmModPrim();
		FcNegPrim():   FmNegPrim();
		FcArrayPrim(): FmArrayPrim();
		FcIndexPrim(): FmIndexPrim();
		FcDerefPrim(): FmDerefPrim();
		FcAssignPrim(): fail0("FcAssignPrim has no Fm counterpart");
		FcRefPrim(): FmRefPrim();
		FcStructPrim(s): FmStructPrim(s);
		FcFieldPrim(f): FmFieldPrim(f);
		FcSetMutablePrim(name): fail0("FcSetMutablePrim has no Fm counterpart");
		FcCreateClosurePrim(__,__): fail0("FcCreateClosurePrim has no Fm counterpart");
		FcQuote():   fail0("FcQuote has no Fm counterpart");
		FcUnquote(): fail0("FcUnquote has no Fm counterpart");
	}
}
