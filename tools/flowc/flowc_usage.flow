import tools/common/compilerconfig;
import tools/flowc/flowc_println;

export {
	printUsage(config : CompilerConfig) -> void;
}

printUsage(config) {
	ih = isConfigParameterTrue(config.config, "help");
	prih = \i, st -> {
		if (i) fcPrintln(st);
	}
	fcPrintln("Usage:");
	fcPrintln("  flowc <file> [I=library,paths] [other=params]");
	fcPrintln("");
	fcPrintln("Options:");
	fcPrintln("      js=<file.js>              Generate JavaScript output");
	fcPrintln("      es6=<file.js>             Generate JavaScript ES6 output");
	prih(ih,"        jscode=1                Do not remove generated files");
	prih(ih,"        jsmodules=<dir>         Generate ES6 modules");
	prih(ih,"                                  Folder <dir> will be created and modules will be placed there");
	prih(ih,"        jscomments=1            Copy comments from Flow modules to JS modules");
	prih(ih,"        nodejs=1                Generate Node.js-ready code.");
	prih(ih,"        nwjs=1                  Generate NWJS.io-ready code.");
	prih(ih,"        jsbeautify=1            Run js-beautify utility for generated JS file");
	prih(ih,"                                  (install with 'npm -g install js-beautify')");
	prih(ih,"        jslibrary=name,name,... Same as: js-call-main=0 dce-preserved-names=name,name,... dce-remove-main=1");
	prih(ih,"          html-stub=name        Generate html stub file, which makes debug call to 'name()'");
	prih(ih,"");
	prih(ih,"        js-call-main=1          Generate call to 'main' function in JS file");
	prih(ih,"");
	prih(ih,"        js-report-sizes=1       Dump sizes of resulting output for each flow file in JS (bytes)");
	prih(ih,"        js-no-otc=1             Optimize tail call recursion with iteration (default) or trampoline");
	prih(ih,"        use-haxe-runtime=1      Use Javascript runtime, generated with Haxe");
	prih(ih,"        fontconfig=<file>       Font configuration file. Default is 'resources/fontconfig.json'");
	prih(ih,"");
	prih(ih,"      ts=<file.ts>              Generate TypeScript modules");
	fcPrintln("      bytecode=<file.bytecode>  Generate bytecode output");
	prih(ih,"         upload=1               Upload bytecode file to the server");
	prih(ih,"");
	fcPrintln("      ml=<filename>             Generate OCaml output");
	fcPrintln("      java=<dirname>            Generate Java output");
	prih(ih,"      java-package=<name>       Specify the java package for the project.");
	prih(ih,"      D=<file>                  Generate D output");
	prih(ih,"      cpp=<file>                Generate C++ output");
	prih(ih,"      lisp=<file>               Generate Lisp output");
	prih(ih,"      rust=<file>               Generate Rust output");
	prih(ih,"      csharp=<dirname>          Generate C# output");
	fcPrintln("      html=<filename>           Link solid html file with with all JS files bundled.");
	fcPrintln("                                Expects js=<file> to be set.");
	prih(ih,"        html-title=<string>     Contents of generated HTML's <TITLE> tag.");
	prih(ih,"        html-minify=1           Minification of <file> from js=<file>");
	prih(ih,"        html-splash=<file>      Path to picture, used as splash screen. Default to 'www/images/splash/splash.png'");
	prih(ih,"      protobuf=<file>           Generate Google protobuf output for the types given by protobuf-types");
	prih(ih,"        protobuf-types=<types>  Comma-separated list of types to output protobuf definitions for");
	prih(ih,"");
	prih(ih,"      readable=1                Same as: dce=0 debug=1 jscomments=1 preserveorder=1 obj=objjs jsbeautify=1");
	fcPrintln("      debug=1                   Generate debug info or debug version of generated files");
	fcPrintln("      lint=1,2                  Check the code for coding conventions");
	fcPrintln("      lint-picky=1              Setup 'picky' option for lint checker");
	prih(ih,"      strict=1                  Make the type checker more strict");
	prih(ih,"      explicit-flow=1           Require explicit casts for flow type");
	prih(ih,"      no-fn-comparison=1        Do not allow comparisons on function types");
	prih(ih,"      thorough-exports=1        Make thorough check of all exports. Slows down the compiler significantly.");

	prih(ih,"      force-build=1             Build program even if there are type checker errors");
	prih(ih,"      dce=1                     Turn on dead-code elimination");
	prih(ih,"                                dce=2 Turn on Haxe DCE (requre Haxe 3.4)");
	prih(ih,"      cse=1                     Turn on common subexpression eliminiation");
	prih(ih,"      cse-global=1              Use a separate module to store common subexpressions");
	prih(ih,"");
	prih(ih,"      dce-preserved-names=name,name,...");
	prih(ih,"                                Keep names listed untouched during DCE");
	prih(ih,"      dce-remove-main=0         Do not use name 'main' as a start of DCE");
	prih(ih,"      dce-force-eliminate-names-file=<filename>");
	prih(ih,"                                Forcefully eliminate names from the given file");
	prih(ih,"      dce-force-remove-globals=1    Forcefully eliminate globals with side effects");
	prih(ih,"      find-unused-locals=1,2    Find unused locals (1) and function and lambda arguments (2)");
	prih(ih,"      find-unused-exports=1,2   Find unused exports (1) and functions (2)");
	prih(ih,"      keep-sources=1            During compilation keep module sources in memory");
	prih(ih,"                                  (saves disk accesses, consumes more memory).");
	prih(ih,"");
	fcPrintln("      incremental=1             Do incremental compilation, default is '1'");
	fcPrintln("      incremental-priority=1    Load saved incremental file even if source changed");
	fcPrintln("      parallel=1                Compile in parallel");
	prih(ih,"      obj=<folders>             Define the object folders for incremental compilation. Default is 'objc'");
	prih(ih,"      obj=-                     Do not use object folder for incremental compilation");
	prih(ih,"      use-md5=1                 Use md5 checksum while checking if incremental file is obsolete. Default is off");
	prih(ih,"");
	fcPrintln("      verbose=<N>               Verbosity level (N=1..3)");
	prih(ih,"      timephases=1              Profile the time spent in each phase");
	prih(ih,"");
	prih(ih,"      extract=<NAME>            Extracts all strings occuring in calls to the NAME function");
	prih(ih,"      xliff=1                   Extracts all ui texts (coach and tagged by _ function) and saves it in xliff format");
	prih(ih,"      regen=1                   Generation of outdated modules");
//	fcPrintln("      warnunsafe=1              Warns on unsafe declarations that are not guarded by require.");
	fcPrintln("");
//	fcPrintln("      pe=<file>                 Partially evaluate the program using constants and functions in the given file.");
//	fcPrintln("");
	prih(ih,"      find-declaration=<NAME>   Looks up the given name and provides the location of declaration");
	prih(ih,"      find-definition=<NAME>    Looks up the given name and provides the location of definition");
	prih(ih,"      find-defdecl=<NAME>       Looks up the given name and provides the location of declaration & definition");
	prih(ih,"         includelocals=1        Also include local variables and parameters");
	prih(ih,"      find-uses=<NAME>          Looks up the given name only in base file and provides the list of locations of usings");
	prih(ih,"      find-type=1               Finds a type of a local variable/expression at a certain location in a source file");
	prih(ih,"      rename=<id1> to=<id2>     Rename a global symbol (function/variable/type/...) 'id1' to symbol 'id2' ");
	prih(ih,"      exp-line=<int>            - a line of a variable (used in find-* and rename-*)");
	prih(ih,"      exp-col=<int>             - a column of a variable (used in find-* and rename-*)");
	prih(ih,"      dump-ids=<file>           Save exported ids from the source and imports in the file");
	prih(ih,"      dump-counts=1             Prints the top 100 used names");
	prih(ih,"      dump-ids-all=1            Save all, not only exported ids with dump-ids");
	prih(ih,"      legacy-format=1           Use legacy output format for location info");

	prih(ih,"      callgraph=<file>          Prints call graph to a file");
	prih(ih,"      callgraph-fullpath=1      Print full path for imported modules in call graph");

	prih(ih,"");
	prih(ih,"      optimize=1                Switch optimization on");
	prih(ih,"      do-live-structs=1         Should we optimize dead structs out of switches?");
	prih(ih,"      eager-optimization=1      Should we do eager evaluation, even if it increases code size?");
	prih(ih,"      force-inlining=<names>    Comma-separated function names, which are going to be inlined anyway");
	prih(ih,"      inline-rec-depth=<int>    Restriction on the unrolling of a recursive function inlining to a limited number");
	prih(ih,"      inline-max-nesting=<int>  The boundary for nesting level of primitive calls in functions to be inlined");
	prih(ih,"      do-const-structs=1        Inline variables of limited nesting, which refer to constant structs");
	prih(ih,"      remove-dup-strings=1      Global optimization: remove duplicate string literals with variables, holding common strings");

	prih(ih,"");
	prih(ih,"      test=<NUMBER>             Runs test case number from the tools/flowc/tests folder");
	prih(ih,"      unittests=<FOLDER>        Runs all test cases in the given folder");
	prih(ih,"      outfolder=<FOLDER>        Save the typed result of all test cases in the given folder");
	prih(ih,"      verify-types=1            Verify the assigned types after typechecking is done");
	prih(ih,"");
	prih(ih,"      server-mode=1             Run flowc in a server mode");
	prih(ih,"      server-port=<num>         A port, used in a server mode. Default is '10001'");
	prih(ih,"      server-shutdown=1         Pass this parameter in config in order to stop server");
	prih(ih,"      server=0                  Do not use the compile server");
	prih(ih,"      client-mode=1             Force flowc to work in a client mode");
	prih(ih,"      output-dir=<dirname>      Use a specified directory to store built targets");
	prih(ih,"      working-dir=<dirname>     The directory, relative to which files are resolved");

	prih(ih,"      file=<file>               Another way pass the input file");
	prih(ih,"      project=<file1,file2,..>  A CSV list of root flow sources, used for global operations like replace/find-uses. If skipped or set to 0, the compiler will try to find these sources by itself.");
	prih(ih,"      compilefile=<file>        File contains a text file, where each line is a command-line invocation of the compiler");
	prih(!ih,"");
	prih(!ih,"Full options list:");
	prih(!ih,"  flowc help=1");
	prih(!ih,"");
}

