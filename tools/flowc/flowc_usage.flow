import tools/common/compilerconfig;
import tools/flowc/flowc_println;

export {
	printUsage(config : CompilerConfig) -> void;
}

printUsage(config) {
	help = isConfigParameterTrue(config.config, "help");
	prih = \i, st -> {
		if (i) fcPrintln(st, config.threadId);
	}
	pri = \st -> fcPrintln(st, config.threadId);
	pri("Usage:");
	pri("  flowc <file> [I=library,paths] [other=params]");
	pri("");
	pri("Options:");
	pri("      js=<file.js>              Generate JavaScript output");
	pri("      es6=<file.js>             Generate JavaScript ES6 output");
	prih(help,"        jscode=1                Do not remove generated files");
	prih(help,"        jsmodules=<dir>         Generate ES6 modules");
	prih(help,"                                  Folder <dir> will be created and modules will be placed there");
	prih(help,"        jscomments=1            Copy comments from Flow modules to JS modules");
	prih(help,"        nodejs=1                Generate Node.js-ready code.");
	prih(help,"        nwjs=1                  Generate NWJS.io-ready code.");
	prih(help,"        jsbeautify=1            Run js-beautify utility for generated JS file");
	prih(help,"                                  (install with 'npm -g install js-beautify')");
	prih(help,"        jslibrary=name,name,... Same as: js-call-main=0 dce-preserved-names=name,name,... dce-remove-main=1");
	prih(help,"          html-stub=name        Generate html stub file, which makes debug call to 'name()'");
	prih(help,"          jslibraryobject=name  Make an object with all exported names");
	prih(help,"");
	prih(help,"        js-call-main=1          Generate call to 'main' function in JS file");
	prih(help,"");
	prih(help,"        js-report-sizes=1       Dump sizes of resulting output for each flow file in JS (bytes)");
	prih(help,"        js-no-otc=1             Optimize tail call recursion with iteration (default) or trampoline");
	prih(help,"        js-source-map=1         Generate js source map");
	prih(help,"                                  (install with 'npm i source-map' in flow9 folder)");
	prih(help,"        use-haxe-runtime=1      Use Javascript runtime, generated with Haxe");
	prih(help,"        fontconfig=<file>       Font configuration file. Default is 'resources/fontconfig.json'");
	prih(help,"        specialize=1            Specialize polymorphism in the JS output");
	prih(help,"");
	prih(help,"      ts=<file.ts>              Generate TypeScript modules");
	pri("      bytecode=<file.bytecode>  Generate bytecode output");
	prih(help,"         upload=1               Upload bytecode file to the server");
	prih(help,"");
	prih(help,"      flow=<dirname>            Generates flow output after type-check and optimizations");
	prih(help,"         comments=1             Includes comments for names");
	prih(help,"      ml=<filename>             Generate OCaml output");
	pri("      java=<dirname>            Generate Java output in the specified directory");
	pri("      jar=<filename>            Generate Java jar file. If <filename> == 1, the input file name will be used");
	prih(help,"      java-package=<name>       Specify the java package for the project. By default it is converted from flow module path");
	prih(help,"      java-main=<name>          Specify the java main class for the project. By default it is a name of a programm");
	prih(help,"      java-incremental=1        Switch on incremental java target generation");
	prih(help,"      java-library=id1,id2,...  Build a java library with id1, id2, ... interface");
	prih(help,"");
	prih(help,"      D=<file>                  Generate D output");
	prih(help,"      cpp=<file>                Generate C++ output");
	prih(help,"      cpp2=<file>               Generate C++ output (former flow backend)");
	prih(help,"      lisp=<file>               Generate Lisp output");
	prih(help,"      rust=<file>               Generate Rust output");
	prih(help,"      csharp=<dirname>          Generate C# output");
	pri("      html=<filename>           Link solid html file with with all JS files bundled.");
	pri("                                Expects js=<file> to be set.");
	prih(help,"        html-title=<string>     Contents of generated HTML's <TITLE> tag.");
	prih(help,"        html-minify=1           Minification of <file> from js=<file>");
	prih(help,"        html-splash=<file>      Path to picture, used as splash screen. Default to 'www/images/splash/splash_innovation_trans.png'");
	prih(help,"        html-scripts=<script,script,...> List of JS scripts, to be included to HTML bundle instead of default.");
	prih(help,"        html-additional-scripts=<file,file,...> List of JS scripts, to be included to HTML bundle in addition to default");
	prih(help,"        html-predefined-params=param1=value,param2=value List of parameters, hardcoded into HTML bundle");
	prih(help,"");
	prih(help,"        html-app-manifest=1     Add link to HTML application manifest into generated html file.");
	prih(help,"                                Also possible to set html-app-manifest=<filename>, link will point to <filename>.");
	prih(help,"");
	prih(help,"      protobuf=<file>           Generate Google protobuf output for the types given by protobuf-types");
	prih(help,"        protobuf-types=<types>  Comma-separated list of types to output protobuf definitions for");
	prih(help,"");
	prih(help,"      readable=1                Same as: dce=0 debug=1 jscomments=1 preserveorder=1 obj=objjs jsbeautify=1");
	pri("      debug=1                   Generate debug info or debug version of generated files");
	prih(help,"      lint=1,2                  Check the code for coding conventions");
	prih(help,"      lint-picky=1              Setup 'picky' option for lint checker");
	prih(help,"      strict=1                  Make the type checker more strict");
	prih(help,"      explicit-flow=1           Require explicit casts for flow type");
	prih(help,"      no-fn-comparison=1        Do not allow comparisons on function types");
	prih(help,"      check-fields=1            Check, that all struct fields access is valid, i.e. corresponding structs are reacheable.");
	prih(help,"      force-build=1             Build program even if there are type checker errors");
	prih(help,"      dce=1                     Turn on dead-code elimination");
	prih(help,"                                dce=2 Turn on Haxe DCE (requre Haxe 3.4)");
	prih(help,"      cse=1                     Turn on common subexpression eliminiation");
	prih(help,"      cse-global=1              Use a separate module to store common subexpressions");
	prih(help,"");
	prih(help,"      dce-preserved-names=name,name,...");
	prih(help,"                                Keep names listed untouched during DCE");
	prih(help,"      dce-remove-main=0         Do not use name 'main' as a start of DCE");
	prih(help,"      dce-force-eliminate-names-file=<filename>");
	prih(help,"                                Forcefully eliminate names from the given file");
	prih(help,"      dce-force-remove-globals=1    Forcefully eliminate globals with side effects");
	prih(help,"      find-unused-locals=1,2    Find unused locals (1) and function and lambda arguments (2)");
	prih(help,"      find-unused-exports=1,2   Find unused exports (1) and functions (2)");
	prih(help,"      keep-sources=1            During compilation keep module sources in memory");
	prih(help,"                                  (saves disk accesses, consumes more memory).");
	prih(help,"");
	prih(help,"      incremental=1             Do incremental compilation, default is '1'");
	prih(help,"      incremental-priority=1    Load saved incremental file even if source changed");
	prih(help,"      parallel=1                Compile in parallel");
	prih(help,"      obj=<folders>             Define the object folders for incremental compilation. Default is 'objc'");
	prih(help,"      obj=-                     Do not use object folder for incremental compilation");
	prih(help,"      use-md5=1                 Use md5 checksum while checking if incremental file is obsolete. Default is off");
	prih(help,"");
	pri("      verbose=<N>               Verbosity level (N=1..3)");
	prih(help,"      no-errors=1               Suppress error messages");
	prih(help,"      timephases=1              Profile the time spent in each phase");
	prih(help,"");
	prih(help,"      extract=<NAME>            Extracts all strings occuring in calls to the NAME function");
	prih(help,"      xliff=1                   Extracts all ui texts (coach and tagged by _ function) and saves it in xliff format");
	prih(help,"      regen=1                   Generation of outdated modules");
//	pri("      warnunsafe=1              Warns on unsafe declarations that are not guarded by require.");
	pri("");
//	pri("      pe=<file>                 Partially evaluate the program using constants and functions in the given file.");
//	pri("");
	prih(help,"      find-declaration=<NAME>   Looks up the given name and provides the location of declaration");
	prih(help,"      find-definition=<NAME>    Looks up the given name and provides the location of definition");
	prih(help,"      find-defdecl=<NAME>       Looks up the given name and provides the location of declaration & definition");
	prih(help,"         includelocals=1        Also include local variables and parameters");
	prih(help,"      find-uses=<NAME>          Looks up the given name only in base file and provides the list of locations of usings");
	prih(help,"      find-type=1               Finds a type of a local variable/expression at a certain location in a source file");
	prih(help,"      symbol-info=<NAME>        Outputs information about a symbol by name or by position (in this case exp-line and exp-col must be set)");
	prih(help,"      rename=<id1> to=<id2>     Rename a global symbol (function/variable/type/...) 'id1' to symbol 'id2' ");
	prih(help,"      exp-line=<int>            - a line of a variable (used in find-* and rename-*)");
	prih(help,"      exp-col=<int>             - a column of a variable (used in find-* and rename-*)");
	prih(help,"      dump-ids=<file>           Save exported ids from the source and imports in the file");
	prih(help,"      dump-counts=1             Prints the top 100 used names");
	prih(help,"      dump-ids-all=1            Save all, not only exported ids with dump-ids");
	prih(help,"      dump-program=1            Output serialized internal representation of a program");
	prih(help,"      legacy-format=1           Use legacy output format for location info");
	prih(help,"      print-outline=1           Print outline of all toplevel entities in the module");
	prih(help,"      check-syntax=1            Perform a syntax checking of a file. Typechecking is not done.");
	prih(help,"");
	prih(help,"      callgraph=<file>          Prints call graph to a file");
	prih(help,"      callgraph-fullpath=1      Print full path for imported modules in call graph");
	prih(help,"      importgraph=1             Saves import graph in a 1.dot file. Useful for imports' loop debug, can be explored in graphviz");
	prih(help,"");
	prih(help,"      optimize=1                Switch optimization on");
	prih(help,"      do-live-structs=1         Should we optimize dead structs out of switches?");
	prih(help,"      eager-optimization=1      Should we do eager evaluation, even if it increases code size?");
	prih(help,"      force-inlining=<names>    Comma-separated function names, which are going to be inlined anyway");
	prih(help,"      inline-rec-depth=<int>    Restriction on the unrolling of a recursive function inlining to a limited number");
	prih(help,"      inline-max-nesting=<int>  The boundary for nesting level of primitive calls in functions to be inlined");
	prih(help,"      do-const-structs=1        Inline variables of limited nesting, which refer to constant structs");
	prih(help,"      remove-dup-strings=1      Global optimization: remove duplicate string literals with variables, holding common strings");
	prih(help,"");
	prih(help,"      test=<NUMBER>             Runs test case number from the tools/flowc/tests folder");
	prih(help,"      unittests=<FOLDER>        Runs all test cases in the given folder");
	prih(help,"      outfolder=<FOLDER>        Save the typed result of all test cases in the given folder");
	prih(help,"      verify-types=0            Do not verify the assigned types after typechecking is done");
	prih(help,"");
	prih(help,"      server-mode=<http|console> Run flowc as an http server or a console server accordingly to the option value");
	prih(help,"      server-port=<num>         A port, used in an http server mode. Default is '10001'");
	prih(help,"      server-shutdown=1         Pass this parameter in config in order to stop server");
	prih(help,"      server-log=<file>         A file for server logs. Default is <flow_dir>/.log/flowc_server.log");
	prih(help,"      server-log-size=<num>     A number of lines, which are kept in a log. Default is 128");
	prih(help,"      server=0                  Do not use the compile server");
	prih(help,"      client-mode=1             Force flowc to work in a client mode, i.e. to use http server");
	prih(help,"      output-dir=<dirname>      Use a specified directory to store built targets");
	prih(help,"      working-dir=<dirname>     The directory, relative to which files are resolved");
	prih(help,"      flowgen-dir=<dirname>     Use a specified directory for generated files");
	prih(help,"      compile-expression=<exp>  Compile the expression and return corresponding serialized internal representation");
	prih(help,"      update-cache=1            Load all ready incremental files to cache. Used to fill up a cache for lookup operations");
	prih(help,"      print-flow-dir=1          Print the flow9 installation directory");
	prih(!help,"");
	prih(help,"      file=<file>               Another way pass the input file");
	prih(help,"      project=<file1,file2,..>  A CSV list of root flow sources, used for global operations like replace/find-uses. ");
	prih(help,"                                If skipped or set to 0, the compiler will try to find these sources by itself.");
	prih(help,"      compilefile=<file>        File contains a text file, where each line is a command-line invocation of the compiler");
	prih(!help,"");
	prih(help,"      repl=1                    Run flowc interpreter in REPL loop. Use 'help' command to see documentation on flowc REPL mode.");
	prih(help,"      repl-engine=<jar|js|bc>   Choose the execution engine for evaluation in REPL: java, JavaScript or native bytecode. By default it is bytecode.");
	prih(!help,"Full options list:");
	prih(!help,"  flowc help=1");
	prih(!help,"");
}

