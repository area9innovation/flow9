import tools/flowc/incremental/fiexp;
import tools/flowc/incremental/fifileinfo;


export {
	// Mirrors FcModule, except we get rid of excessive stuff and keep it as tight as we can

	FiModule(
		fileinfo : FiFileInfo,
		imports: [FiImport], // unresolved paths to included modules
		forbids : [FiForbid], // unresolved paths to forbid
		exports: [string], // names of unions, structs, functions, values, natives
		structs : [FiTypeStruct],
		unions : [FiTypeUnion],
		functions: [FiFunctionDec],
		globalVars: [FiGlobalVar],
		natives: [FiNativeDec],
		// Safe initialization order of globals and functions.
		initOrder : [string],
		stringIncludes : [FiFileInfo],
		start : int, end : int,
		incremental : bool // module was loaded 'as is', without changes
	);

	dummyFiModule = FiModule(dummyFiFileInfo, [], [], [], [], [], [], [], [], [], [], 0, 0, true);

	FiImport(flowfile : string, dynamic : bool, start : int);
	FiForbid(flowfile : string, start : int);

	FiToplevel ::= FiDeclaration, FiStructOrUnion;
	FiDeclaration ::= FiFunctionDec, FiGlobalVar, FiNativeDec;

	// The info is for the declaration, while the lambda is for the implementation
	FiFunctionDec(
		name: string,
		lambda: FiLambda,
		type : FiTypeFunction,
		declStart : int,
		defiStart : int
	);

	FiGlobalVar(
		name: string,
		value: FiExp,
		type : FiType,
		declStart : int,
		defiStart : int
	);

	FiNativeDec(
		name: string, 
		io: bool,
		type : FiType,
		nativeName : string,
		// This is FiVoid if there is no fallback, a FiLambda if there is
		fallbackLambda : FiExp,
		declStart : int,
		defiStart : int
	);
}
