import utctime;
import lingo/linecolumn;
import tools/common/pathutil;
import tools/flowc/incremental/fiprogram;
import tools/flowc/incremental/fiexp;
import tools/flowc/incremental/fiprettyprint;
import ds/array;

export {
	// If t is a typename, we resolve it to FiStruct or FiUnion
	resolveFiTypeName(names : FiGlobalNames, t : FiType, id : int) -> FiStructOrUnion;

	// Get type of the FiExp
	fiExpType(expr : FiExp) -> FiType;

	// Analog of union2structs from type_helpers
	fiUnion2structs(prog : FiProgram, union : FiTypeUnion) -> [FiTypeStruct];

	// Analog of typename2structs from type_helpers
	fiTypename2structs(prog : FiProgram, typename : FiTypeName) -> [FiTypeStruct];

	// Analog of union2unions from type_helpers
	fiUnion2unions(prog : FiProgram, union : FiTypeUnion) -> [FiTypeUnion];

	fiNames2unions(prog : FiProgram, struct2unions : Tree<string, [string]>, names : [string], open : bool) -> [string];

	fiStruct2unions(prog : FiProgram) -> Tree<string, [string]>;

	fiUnion2typenames(prog : FiProgram, name : string) -> [FiTypeName];

	// Analog of collectTypars
	fiCollectTypars(type : FiType, acc : Set<string>) -> Set<string>;

	// Analog of fcNativeHasFallback
	fiNativeHasFallback(nat : FiNativeDec, id : int) -> bool;

	isSameFiExp(e1 : FiExp, e2 : FiExp) -> bool;
	getFiTypeName(t : FiType) -> string;
	extractTypeNames(types : Set<string>, type : FiType) -> Set<string>;

	// This function compares two types structurally, and in places, where
	// there is a FiTypeParameter(name), it matches name with the 
	// corresponding type in the second type (pattern) 
	fiMatchTypars(type : FiType, pattern : FiType, acc : Tree<string, FiType>) -> Tree<string, FiType>;

	// The same as fiMatchTypars, but matching goes through the array of FiTypes
	fiMatchTyparsArr(tps : [FiType], ptns : [FiType], acc : Tree<string, FiType>) -> Tree<string, FiType>;

	// Returns the values of matched typars, ordered by typars string lengths (number of ???s)
	fiMatchTyparsOrdered(type : FiType, pattern : FiType) -> [FiType];

	fiDeclarationArgNames(decl : FiDeclaration) -> [string];

	// whether type has no parameters
	fiTypeFullyDefined(type: FiType) -> bool;

	// Gets all unbound parameters from type 
	fiTypeGetUnboundParameters(type : FiType) -> Set<string>;

	// Gets all unbound type parameters from exp 
	fiTypeGetUnboundParametersExp(ex : FiExp) -> Set<string>;

	// Checks whether exp is constant (i.e. FiBool or FiString)
	fiExpIsConstant(ex : FiExp) -> bool;

	// Is this expression constant data (bool, int, string, double, array, structs)
	fiExpIsData(ex : FiExp) -> bool;

	// Checks whether type is function (i.e. FiTypeFunction)
	fiTypeIsFunction(t : FiType) -> bool;

	// Checks whether type is array (i.e. FiTypeArray)
	fiTypeIsArray(t : FiType) -> bool;
	
	// Checks whether type is flow (i.e. FiTypeFlow)
	fiTypeIsFlow(t : FiType) -> bool;

	// Checks whether type is scalar (i.e. void, bool, int or double)
	fiTypeIsScalar(t : FiType) -> bool;

	// All FiModule declarations in one array;
	fiModuleDecls(m : FiModule) -> [FiDeclaration];

	// All FiModule structs and unions in one array;
	fiModuleStructsAndUnions(m : FiModule) -> [FiStructOrUnion];

	fiDeclType(d : FiDeclaration) -> FiType;
	fiDeclExp(d : FiDeclaration) -> FiExp;
	fiTypeContainsName(tp : FiType, name : string) -> bool;

	// Checks if a name is a name of a global function or native (not variable!)
	fiIsGlobalFunction(name: string, names: FiGlobalNames) -> bool;
	// Analogical check, but on global variable
	fiIsGlobalVariable(name: string, names: FiGlobalNames) -> bool;
	// Any toplevel entry: global var, function or native
	fiIsGlobal(name: string, names: FiGlobalNames) -> bool;

	// Clear from the name: renames a variable
	fiRenameVar(e : FiExp, var: string, new: string) -> FiExp;

	// Replace a var with some expression
	fiReplaceVar(e : FiExp, var: string, new: FiExp) -> FiExp;

	// Checks the equivalence of types (function arg names are ignored)
	fiEqualTypes(type1 : FiType, type2 : FiType) -> bool;

	// Unwrap the array type from FiTypeArray
	fiDearrayType(tp: FiType) -> FiType;

	// Unwrap the reference type from FiTypeRef
	fiDerefType(tp: FiType) -> FiType;

	fiTypeUpperBoundary(t1: FiType, t2: FiType, names: FiGlobalNames) -> FiType;

	fiSetExpType(e : FiExp, t: FiType) -> FiExp;

	// Remove argument names from functional types
	fiPurifyType(t: FiType) -> FiType;

	// If 'e' is FiSeq - return its contents, otherwise return an array of single 'e'
	unFiSeq(e: FiExp) -> [FiExp];
}

fiDeclarationArgNames(decl) {
	switch (decl) {
		FiGlobalVar(__, __, __, __, __) : [];
		FiNativeDec(__, __, type, __, fallback, __, __) : {
			switch(fallback) {
				FiLambda(args, __, __, __): map(args, \argt -> argt.name);
				FiVoid(__) : [];
				default : [];
			}
		}
		FiFunctionDec(__, lambda, __, __, __) : map(lambda.args, \argt -> argt.name);
	}
}

fiExpType(expr) {
	switch(expr) {
		FiLambda(__, __, type, __) : type;
		FiCall(__, __, type, __) : type;
		FiVar(__, type, __) : type;
		FiLet(__, __, __, __, type2, __) : type2;
		FiIf(__, __, __, type, __) : type;
		FiSwitch(__, __, __, type, __) : type;
		FiCast(__, __, __, type, __) : type;
		FiSeq(__, type, __) : type;
		FiCallPrim(__, __, type, __) : type;
		FiRequire(__, __, type, __) : type;
		FiUnsafe(__, __, type, __) : type;
		FiVoid(__) : FiTypeVoid();
		FiDouble(__, __) : FiTypeDouble();
		FiInt(__, __) : FiTypeInt();
		FiString(__, __) : FiTypeString();
		FiBool(__, __) : FiTypeBool();
	}
}

resolveFiTypeName(names : FiGlobalNames, t : FiType, id : int) -> FiStructOrUnion {
	switch (t) {
		FiTypeName(n, tps): {
			ms = lookupTree(names.structs, n);
			switch (ms) {
				None(): {
					mu = lookupTree(names.unions, n);
					switch (mu) {
						None(): {
							fcPrintln("Unknown type name " + n, id);
							dummyFiTypeStruct;
						}
						Some(u): {
							FiTypeUnion(n, tps, u.typenames, u.start);
						}
					}
				}
				Some(s): {
					FiTypeStruct(n, tps, s.args, s.start);
				}
			}
		}
		default: dummyFiTypeStruct;
	}
}

fiUnion2structs(prog : FiProgram, union : FiTypeUnion) -> [FiTypeStruct] {
	uniq(concatA(map(union.typenames, \n -> fiTypename2structs(prog, n))))
}

fiTypename2structs(prog : FiProgram, typename : FiTypeName) -> [FiTypeStruct] {
	rt = resolveFiTypeName(prog.names, typename, prog.config.threadId);
	switch (rt) {
		FiTypeStruct(__, __, __, __): [rt];
		FiTypeUnion(__, __, __, __): fiUnion2structs(prog, rt);
	}
}

fiUnion2unions(prog : FiProgram, union : FiTypeUnion) -> [FiTypeUnion] {
	concatA(map(union.typenames, \typename : FiTypeName -> {
		rt = resolveFiTypeName(prog.names, typename, prog.config.threadId);
		switch (rt) {
			FiTypeUnion(__, __, __, __): arrayPush(fiUnion2unions(prog, rt), rt);
			default: []
		}
	}))
}

fiUnion2typenames(prog : FiProgram, name : string) -> [FiTypeName] {
	munion = lookupTree(prog.names.unions, name);
	switch (munion) {
		None(): [];
		Some(union): {
			list2array(fold(union.typenames, Pair(makeList(), makeSet()), \acc : Pair<List<FiTypeName>, Set<string>>, n -> {
				batch = if (containsKeyTree(prog.names.unions, n.name)) {
					fiUnion2typenames(prog, n.name)
				} else {
					[n]
				}
				fold(batch, acc, \acc2, tn -> {
					if (containsSet(acc2.second, tn.name)) acc2
					else Pair(Cons(tn, acc2.first), insertSet(acc2.second, tn.name))
				})
			}).first)
		}
	}
}

fiNames2unions(prog : FiProgram, struct2unions : Tree<string, [string]>, names : [string], open : bool) -> [string] {
	if (names == []) [] else {
		unions : [Set<string>] = map(names, \n -> buildSet(getTreeArrayValue(struct2unions, n)));
		shared = fold(tail(unions), unions[0], \acc : Set<string>, c -> intersectSets(acc, c));
		candidates = set2array(shared);
		if (open) {
			candidates
		} else {
			filter(candidates, 
				\c -> {
					structs = fiUnion2typenames(prog, c);
					length(structs) == length(names)
				}
			)
		}
	}
}

fiStruct2unions(prog : FiProgram) -> Tree<string, [string]> {
	foldTree(
		prog.names.unions,
		makeTree(),
		\uname, union, acc -> {
			fold(
				union.typenames,
				acc,
				\a, typename -> {
					switch (resolveFiTypeName(prog.names, typename, prog.config.threadId)) {
						FiTypeStruct(sname, __, __, __) : {
							switch (lookupTree(a, sname)) {
								Some(arr) : setTree(a, sname, concat(arr, [uname]));
								None()    : setTree(a, sname, [uname]);
							} 
						}
						default : a;
					}
				}
			)
		}
	)
}

fiCollectTypars(type : FiType, acc : Set<string>) -> Set<string> {
	switch (type) {
		FiTypeVoid():       acc;
		FiTypeBool():       acc;
		FiTypeInt():        acc;
		FiTypeDouble():     acc;
		FiTypeString():     acc;
		FiTypeFlow():       acc;
		FiTypeNative():     acc;
		FiTypeParameter(n): insertSet(acc, n);
		FiTypeRef(rt):      fiCollectTypars(rt, acc);
		FiTypeArray(at):    fiCollectTypars(at, acc);
		FiTypeName(id, tp): fold(tp, acc, \ac, t -> fiCollectTypars(t, ac));
		FiTypeFunction(args, rt): {
			fiCollectTypars(rt, fold(args, acc, \ac, arg -> fiCollectTypars(arg.type, ac)));
		}
	}
}

fiNativeHasFallback(nat : FiNativeDec, id : int) -> bool {
	switch (nat.fallbackLambda) {
		FiLambda(__, __, __, __) : true;
		FiVoid(__) : false;
		default : {
			fcPrintln("fallbackLambda in FiNativeDec must be FiLambda or FiVoid, but is: " + prettyFiExp(dummyPretty, nat.fallbackLambda), id);
			false
		}
	}
}

isSameFiExp(e1 : FiExp, e2 : FiExp) -> bool {
	switch (e1) {
		FiVoid(__):       switch (e2) { FiVoid(__): true; default: false; }
		FiBool(b1, __):   switch (e2) { FiBool(b2, __): b1 == b2; default: false; }
		FiInt(i1, __):    switch (e2) { FiInt(i2, __): i1 == i2; default: false; }
		FiDouble(d1, __): switch (e2) { FiDouble(d2, __): d1 == d2; default: false; }
		FiString(s1, __): switch (e2) { FiString(s2, __): s1 == s2; default: false; }
		FiVar(n1, __, __):    switch (e2) { FiVar(n2, __, __): n1 == n2; default: false; }

		FiCast(ce1, f1, t1, __, __): 
			switch (e2) { 
				FiCast(ce2, f2, t2, __, __): isSameFiExp(ce1, ce2) && f1 == f2 && t1 == t2;
				default: false
			}
		FiIf(c1, t1, el1, __, __): 
			switch (e2) {
				FiIf(c2, t2, el2, __, __): isSameFiExps([c1, t1, el1], [c2, t2, el2]);
				default: false;
			}
		FiCall(f1, a1, __, __): 
			switch (e2) {
				FiCall(f2, a2, __, __): isSameFiExp(f1, f2) && isSameFiExps(a1, a2);
				default: false;
			}
		FiLet(n1, t1, ee1, b1, __, __): 
			switch (e2) {
				FiLet(n2, t2, ee2, b2, __, __): n1 == n2 && isSameFiExps([ee1, b1], [ee2, b2]);
				default: false;
			}
		FiCallPrim(o1, es1, __, __): 
			switch (e2) {
				FiCallPrim(o2, es2, __, __): o1 == o2 && isSameFiExps(es1, es2);
				default: false;
			}
		FiSeq(es1, __, __): 
			switch (e2) {
				FiSeq(es2, __, __): isSameFiExps(es1, es2);
				default: false;
			}
		FiLambda(as1, b1, __, __): 
			switch (e2) {
				FiLambda(as2, b2, __, __): isSameFiExp(b1, b2)
					&& length(as1) == length(as2) 
					&& foldi(as1, true,
						\i, acc, a1 -> 
							acc && a1.name == as2[i].name && a1.type == as2[i].type
					);
				default: false;
			}
		FiSwitch(x1, t1, cs1, __, __): 
			switch (e2) {
				FiSwitch(x2, t2, cs2, __, __): {
					isSameFiExp(x1, x2)
					&& t1 == t2
					&& length(cs1) == length(cs2)
					&& foldi(cs1, true, 
						\i, acc, c1 -> 
							acc && c1.struct == cs2[i].struct
							&& c1.argNames == cs2[i].argNames
							&& isSameFiExp(c1.body, cs2[i].body)
					)
				}
				default: false;
			}
		FiRequire(f1, ex1, __, __): 
			switch (e2) {
				FiRequire(f2, ex2, __, __): f1 == f2 && isSameFiExp(ex1, ex2);
				default: false;
			}
		FiUnsafe(n1, ex1, __, __): 
			switch (e2) {
				FiUnsafe(n2, ex2, __, __): n1 == n2 && isSameFiExp(ex1, ex2);
				default: false;
			}
	}
}

isSameFiExps(es1 : [FiExp], es2 : [FiExp]) -> bool {
	length(es1) == length(es2) && forall(mapi(es1, \i, e1 -> isSameFiExp(e1, es2[i])), idfn)
}

// If this type is a union in some name or shape, give the name of it
getFiTypeName(t : FiType) -> string {
	 switch (t) {
		FiTypeName(name, __): name;
		default: "";
	}
}

fiMatchTypars(type : FiType, pattern : FiType, acc : Tree<string, FiType>) -> Tree<string, FiType> {
	switch (type) {
		FiTypeArray(t):
			switch (pattern) {
				FiTypeArray(tp): fiMatchTypars(t, tp, acc);
				default: acc;
			}
		FiTypeFunction(at, rt):
			switch (pattern) {
				FiTypeFunction(atp, rtp): 
					fiMatchTypars(rt, rtp, 
						fiMatchTyparsArr(
							map(at, \a -> a.type), 
							map(atp, \a -> a.type), 
							acc)
					);
				default: acc;
			}
		FiTypeRef(t): 
			switch (pattern) {
				FiTypeRef(tp): fiMatchTypars(t, tp, acc);
				default: acc;
			}
		FiTypeParameter(s): setTree(acc, s, pattern);
		FiTypeBool():    acc; 
		FiTypeInt():     acc;
		FiTypeDouble():  acc; 
		FiTypeString():  acc; 
		FiTypeFlow():    acc;
		FiTypeVoid():    acc;
		FiTypeNative():  acc;
		FiTypeName(__, ts): 
			switch (pattern) {
				FiTypeName(__, tps): fiMatchTyparsArr(ts, tps, acc);
				default: acc;
			}
	}
}

fiMatchTyparsArr(tps : [FiType], ptns : [FiType], acc : Tree<string, FiType>) -> Tree<string, FiType> {
	fold(
		zipWith(tps, ptns, \t, p -> Pair(t, p)), 
		acc,
		\a, p -> fiMatchTypars(p.first, p.second, a)
	)
}

fiMatchTyparsOrdered(type : FiType, pattern : FiType) -> [FiType] {
	typars = sort(set2array(fiCollectTypars(type, makeSet())));
	if (length(typars) == 0) [] else {
		substitution = fiMatchTypars(type, pattern, makeTree());
		typar_instance = \typar -> {
			switch (lookupTree(substitution, typar)) {
				Some(tp): tp;
				None(): fail0("unmatched typar: " + typar);
			}
		}
		map(typars, typar_instance);
	}
}

getFiFileInfo(file : string, config : CompilerConfig) -> FiFileInfo {
	workingDir = getConfigParameterDef(config.config, "working-dir", "");
	realfile = findFlowPath(file, true, config.includes, workingDir);
	content = getFileContent(realfile);

	FiFileInfo(
		trimFlowfile(file, config.includes, workingDir),
		fileModified(realfile),
		realfile,
		md5(content),
		fileSize(realfile),
		-1.0
	);
}

fiTypeFullyDefined(type: FiType) -> bool {
	switch (type) {
		FiTypeArray(t): fiTypeFullyDefined(t);
		FiTypeFunction(args, returnType): 
			fiTypeFullyDefined(returnType) && 
				forall(args, \a -> fiTypeFullyDefined(a.type));
		FiTypeRef(t): fiTypeFullyDefined(t);
		FiTypeParameter(n): false;
		FiTypeBool(): true;
		FiTypeInt(): true;
		FiTypeDouble(): true;
		FiTypeString(): true;
		FiTypeFlow(): true;
		FiTypeVoid(): true;
		FiTypeNative(): true;
		FiTypeName(name, typeparameters): 
			forall(typeparameters, fiTypeFullyDefined);
	}
}

fiTypeGetUnboundParameters(type : FiType) -> Set<string> {
	switch (type) {
		FiTypeArray(t): fiTypeGetUnboundParameters(t);
		FiTypeFunction(args, returnType): 
			mergeSetsA(arrayPush( 
				map(args, \a -> fiTypeGetUnboundParameters(a.type)),
				fiTypeGetUnboundParameters(returnType)
			));
		FiTypeRef(t): fiTypeGetUnboundParameters(t);
		FiTypeParameter(n): makeSet1(n);
		FiTypeBool(): makeSet();
		FiTypeInt(): makeSet();
		FiTypeDouble(): makeSet();
		FiTypeString(): makeSet();
		FiTypeFlow(): makeSet();
		FiTypeVoid(): makeSet();
		FiTypeNative(): makeSet();
		FiTypeName(name, typeparameters): 
			mergeSetsA(map(typeparameters, fiTypeGetUnboundParameters));
	}
}

fiTypeGetUnboundParametersExp(ex : FiExp) -> Set<string> {
	switch (ex) {
		FiVoid(__):       makeSet();
		FiBool(b1, __):   makeSet();
		FiInt(i1, __):    makeSet();
		FiDouble(d1, __): makeSet();
		FiString(s1, __): makeSet();
		FiVar(__, type, __): fiTypeGetUnboundParameters(type);
		FiCast(e, tFrom, tTo, type, __):
			mergeSetsA([fiTypeGetUnboundParametersExp(e), fiTypeGetUnboundParameters(tFrom),
				fiTypeGetUnboundParameters(tTo), fiTypeGetUnboundParameters(type)]);
		FiIf(e1, e2, e3, type, __): 
			mergeSetsA([fiTypeGetUnboundParametersExp(e1), fiTypeGetUnboundParametersExp(e2),
				fiTypeGetUnboundParametersExp(e3), fiTypeGetUnboundParameters(type)]);			
		FiCall(f, args, type, __): 
			mergeSetsA(arrayPush(map(args, fiTypeGetUnboundParametersExp),
				fiTypeGetUnboundParameters(type)));
		FiLet(__, type, e1, e2, type2, __): 
			mergeSetsA([fiTypeGetUnboundParameters(type), fiTypeGetUnboundParametersExp(e1),
				fiTypeGetUnboundParametersExp(e2), fiTypeGetUnboundParameters(type2)]);
		FiCallPrim(__, exps, type, __): 
			mergeSetsA(arrayPush(map(exps, fiTypeGetUnboundParametersExp),
				fiTypeGetUnboundParameters(type)));
		FiSeq(es, type, __): 
			mergeSetsA(arrayPush(map(es, fiTypeGetUnboundParametersExp),
				fiTypeGetUnboundParameters(type)));
		FiLambda(args, body, type, __): 
			mergeSetsA(concat(map(args, \a -> fiTypeGetUnboundParameters(a.type)),
				[fiTypeGetUnboundParametersExp(body), fiTypeGetUnboundParameters(type)]));
		FiSwitch(v, switchType, cases, type, __): 
			mergeSetsA(concat(
				map(cases, \c -> fiTypeGetUnboundParametersExp(c.body)),
				[
					fiTypeGetUnboundParametersExp(v),
					fiTypeGetUnboundParameters(type),
					fiTypeGetUnboundParameters(switchType)
				]
			));
		FiRequire(__, e, type, __): 
			mergeSets(fiTypeGetUnboundParametersExp(e), fiTypeGetUnboundParameters(type));
		FiUnsafe(__, fb, type, __): 
			mergeSets(fiTypeGetUnboundParameters(type), fiTypeGetUnboundParametersExp(fb));
	}
}

fiExpIsConstant(ex : FiExp) -> bool {
	switch (ex) {
		FiVoid(__):       true;
		FiBool(b1, __):   true;
		FiInt(i1, __):    true;
		FiDouble(d1, __): true;
		FiString(s1, __): true;
		default: false;
	}
}

fiExpIsData(ex : FiExp) -> bool {
	switch (ex) {
		FiVoid(__):       false;
		FiBool(b1, __):   true;
		FiInt(i1, __):    true;
		FiDouble(d1, __): true;
		FiString(s1, __): true;
		FiCallPrim(op, es, type, start): {
			switch (op) {
				FcArrayPrim(): fiExpsIsData(es);
				FcStructPrim(struct_name): fiExpsIsData(es);
				default: false;
			}
		}
		default: false;
	}
}

fiExpsIsData(es : [FiExp]) -> bool {
	forall(es, fiExpIsData)
}

fiTypeIsFunction(t : FiType) {
	switch (t) {
		FiTypeFunction(__, __): true;
		default: false;
	}
}

fiTypeIsArray(t : FiType) {
	switch (t) {
		FiTypeArray(__): true;
		default: false;
	}
}

fiTypeIsFlow(t : FiType) {
	switch (t) {
		FiTypeFlow(): true;
		default: false;
	}
}

fiTypeIsScalar(t : FiType) -> bool {
	switch (t) {
		FiTypeVoid():   true;
		FiTypeBool():   true;
		FiTypeInt():    true;
		FiTypeDouble(): true;
		default:        false;
	}
}

fiModuleDecls(m : FiModule) -> [FiDeclaration] {
	concatA([m.functions, m.globalVars, m.natives]);
}

fiModuleStructsAndUnions(m : FiModule) -> [FiStructOrUnion] {
	concatA([m.structs, m.unions]);
}

fiDeclType(d : FiDeclaration) -> FiType {
	switch (d) {
		FiGlobalVar(__, __, t, __, __): t;
		FiNativeDec(__, __, t, __, __, __, __) : t;
		FiFunctionDec(__, __, t, __, __) : t;
	}
}

fiDeclExp(d : FiDeclaration) -> FiExp {
	switch (d) {
		FiGlobalVar(__, value, __, __, __): value;
		FiNativeDec(__, __, __, __, fallback, __, __): fallback;
		FiFunctionDec(__, lambda, __, __, __): lambda;
	}
}

fiTypeContainsName(tp : FiType, name : string) -> bool {
	switch (tp) {
		FiTypeVoid():       false;
		FiTypeBool():       false;
		FiTypeInt():        false;
		FiTypeDouble():     false;
		FiTypeString():     false;
		FiTypeFlow():       false;
		FiTypeNative():     false;
		FiTypeParameter(n): false;
		FiTypeRef(rt):      fiTypeContainsName(rt, name);
		FiTypeArray(at):    fiTypeContainsName(at, name);
		FiTypeName(n, ts):  n == name || exists(ts, \t -> fiTypeContainsName(t, name));
		FiTypeFunction(args, rt):
			fiTypeContainsName(rt, name) || exists(args, \arg -> fiTypeContainsName(arg.type, name));
	}
}

fiIsGlobalFunction(name: string, names: FiGlobalNames) -> bool {
	 switch (lookupTree(names.toplevel, name)) {
		Some(decl): {
			switch (decl) {
				FiFunctionDec(__,__,__,__,__): true;
				FiNativeDec(__,__,__,__,__,__,__): true;
				default: false;
			}
		}
		None(): false;
	}
}

fiIsGlobalVariable(name: string, names: FiGlobalNames) -> bool {
	 switch (lookupTree(names.toplevel, name)) {
		Some(decl): {
			switch (decl) {
				FiGlobalVar(__,__,__,__,__): true;
				default: false;
			}
		}
		None(): false;
	}
}

fiIsGlobal(name: string, names: FiGlobalNames) -> bool {
	 containsKeyTree(names.toplevel, name);
}

fiRenameVar(e : FiExp, var: string, new: string) -> FiExp {
	ren = \x -> fiRenameVar(x, var, new);
	switch(e) {
		FiLambda(__, body,__, __): {
			FiLambda(e with body = ren(body));
		}
		FiCall(fn, args,__,__): {
			FiCall(e with
				f = ren(fn),
				args = map(args, ren)
			);
		}
		FiLet(__, __,e1, e2,__, __): {
			FiLet(e with
				e1 = ren(e1),
				e2 = ren(e2)
			);
		}
		FiIf(e1, e2, e3,__, __): {
			FiIf(e with
				e1 = ren(e1),
				e2 = ren(e2),
				e3 = ren(e3)
			);
		}
		FiSwitch(v, __,cases,__, __): {
			FiSwitch(e with 
				x = if (v.name != var) v else FiVar(v with name = new),
				cases = map(cases, \c -> FiCase(c with body = ren(c.body)))
			);
		}
		FiCast(ex, __, __, __, __): {
			FiCast(e with e = ren(ex));
		}
		FiSeq(es,__,__): {
			FiSeq(e with es = map(es, ren));
		}
		FiCallPrim(__, es,__,__): {
			FiCallPrim(e with es = map(es, ren));
		}
		FiRequire(__, ex,__,__): {
			FiRequire(e with e = ren(ex));
		}
		FiUnsafe(__, ex,__,__): {
			FiUnsafe(e with fallback = ren(ex));
		}
		FiVar(name,__, __): if (name != var) e else FiVar(e with name = new);
		FiVoid(__):       e;
		FiDouble(__,__):  e;
		FiInt(__,__):     e;
		FiString(__,__):  e;
		FiBool(__,__):    e;
	}
}

fiReplaceVar(e : FiExp, var: string, new: FiExp) -> FiExp {
	ren = \x -> fiReplaceVar(x, var, new);
	switch(e) {
		FiLambda(__, body,__, __): {
			FiLambda(e with body = ren(body));
		}
		FiCall(fn, args,__,__): {
			FiCall(e with
				f = ren(fn),
				args = map(args, ren)
			);
		}
		FiLet(__, __,e1, e2,__, __): {
			FiLet(e with
				e1 = ren(e1),
				e2 = ren(e2)
			);
		}
		FiIf(e1, e2, e3,__, __): {
			FiIf(e with
				e1 = ren(e1),
				e2 = ren(e2),
				e3 = ren(e3)
			);
		}
		FiSwitch(v, __,cases,__, __): {
			FiSwitch(e with 
				//x = if (v.name != var) v else FiVar(v with name = new),
				cases = map(cases, \c -> FiCase(c with body = ren(c.body)))
			);
		}
		FiCast(ex, __, __, __, __): {
			FiCast(e with e = ren(ex));
		}
		FiSeq(es,__,__): {
			FiSeq(e with es = map(es, ren));
		}
		FiCallPrim(__, es,__,__): {
			FiCallPrim(e with es = map(es, ren));
		}
		FiRequire(__, ex,__,__): {
			FiRequire(e with e = ren(ex));
		}
		FiUnsafe(__, ex,__,__): {
			FiUnsafe(e with fallback = ren(ex));
		}
		FiVar(name,__, __): if (name != var) e else new;
		FiVoid(__):       e;
		FiDouble(__,__):  e;
		FiInt(__,__):     e;
		FiString(__,__):  e;
		FiBool(__,__):    e;
	}
}

fiEqualTypes(type1 : FiType, type2 : FiType) -> bool {
	switch (type1) {
		FiTypeRef(rt1): {
			switch (type2) {
				FiTypeRef(rt2): fiEqualTypes(rt1, rt2);
				default: false;
			}
		}
		FiTypeArray(at1): {
			switch (type2) {
				FiTypeArray(at2): fiEqualTypes(at1, at2);
				default: false;
			}
		}
		FiTypeName(id1, tp1): {
			switch (type2) {
				FiTypeName(id2, tp2): {
					id1 == id2 && length(tp1) == length(tp2) 
					&& all(mapi(tp1, \i, t1 -> fiEqualTypes(t1, tp2[i])));
				}
				default: false;
			}
		}
		FiTypeFunction(args1, rt1): {
			switch (type2) {
				FiTypeFunction(args2, rt2): {
					fiEqualTypes(rt1, rt2) && length(args1) == length(args2) 
					&& all(mapi(args1, \i, t1 -> fiEqualTypes(t1.type, args2[i].type)));
				}
				default: false;
			}
		}
		default: type1 == type2;
	}
}

fiDearrayType(tp: FiType) -> FiType {
	switch (tp) {
		FiTypeArray(t): t;
		default: fail0("non-array treated as array: " + prettyFiType(dummyPretty, tp, makeSet()));
	}
}

fiDerefType(tp: FiType) -> FiType {
	switch (tp) {
		FiTypeRef(t): t;
		default: fail0("non-reference treated as reference: " + prettyFiType(dummyPretty, tp, makeSet()));
	}
}

fiTypeUpperBoundary(t1: FiType, t2: FiType, names: FiGlobalNames) -> FiType {
	if (t1 == t2) t1 else {
		t0 = switch (t2) {
			FiTypeFlow(): t2;
			FiTypeNative(): t2;
			default: t1;
		}
		switch (t1) {
			FiTypeFlow(): t1;
			FiTypeNative(): t1;
			FiTypeName(n1, __): {
				switch (t2) {
					FiTypeFlow(): t2;
					FiTypeNative(): t2;
					FiTypeName(n2, __): {
						switch (lookupTree(names.structs, n1)) {
							Some(__): t2;
							None(): {
								switch (lookupTree(names.structs, n2)) {
									Some(__): t1;
									None(): {
										u1 = lookupTreeDef(names.unions, n1, FiTypeUnion("", [], [], 0));
										u2 = lookupTreeDef(names.unions, n2, FiTypeUnion("", [], [], 0));
										if (isEmptySet(differenceSets(buildSet(u1.typenames), buildSet(u2.typenames)))) t2 else t1;
									}
								}
							}
						}
					}
					default: t0;
				}
			} 
			default: t0;
		}
	}
}

fiSetExpType(e : FiExp, t: FiType) -> FiExp {
	switch(e) {
		FiLambda(__,__,__, __): {
			switch (t) {
				FiTypeFunction(__,__): FiLambda(e with type = t);
				default: {
					fail("attempt assign a type " + prettyFiType(dummyPretty, t, makeSet()) + " to function");
					e;
				}
			}
		}
		FiCall(__,__,__,__):      FiCall(e with type = t);
		FiLet(__,__,__,__,__,__): FiLet(e with type = t);
		FiIf(__,__,__,__, __):    FiIf(e with type = t);
		FiSwitch(__,__,__,__,__): FiSwitch(e with type = t);
		FiCast(__,__,__,__,__):   FiCast(e with type = t);
		FiSeq(__,__,__):          FiSeq(e with type = t);
		FiCallPrim(__,__,__,__):  FiCallPrim(e with type = t);
		FiRequire(__,__,__,__):   FiRequire(e with type = t);
		FiUnsafe(__,__,__,__):    FiUnsafe(e with type = t);
		FiVar(__,__,__):          FiVar(e with type = t);
		FiVoid(__):       e;
		FiDouble(__,__):  e;
		FiInt(__,__):     e;
		FiString(__,__):  e;
		FiBool(__,__):    e;
	}
}

fiPurifyType(t: FiType) -> FiType {
	switch (t) {
		FiTypeRef(rt): {
			FiTypeRef(fiPurifyType(rt));
		}
		FiTypeArray(at): {
			FiTypeArray(fiPurifyType(at));
		}
		FiTypeName(n, ts): {
			FiTypeName(n, map(ts, fiPurifyType));
		}
		FiTypeFunction(args, rt): {
			FiTypeFunction(
				map(args, \arg -> FiFunArg("", arg.type)), 
				fiPurifyType(rt)
			);
		}
		FiTypeParameter(n): t;
		default: t;
	}
}


extractTypeNames(types : Set<string>, type : FiType) -> Set<string> {
	rec = \acc2, tt -> extractTypeNames(acc2, tt);
	switch (type) {
		FiTypeArray(t): rec(types, t);
		FiTypeFunction(args, returnType): rec(fold(args, types, \acc, fa -> rec(acc, fa.type)), returnType);
		FiTypeRef(t): rec(types, t);
		FiTypeParameter(n): types;
		FiTypeBool(): types;
		FiTypeInt(): types;
		FiTypeDouble(): types;
		FiTypeString(): types;
		FiTypeFlow(): types;
		FiTypeVoid(): types;
		FiTypeNative(): types;
		FiTypeName(name, typeparameters): {
			fold(typeparameters, insertSet(types, name), rec);
		}
	}
}

unFiSeq(e: FiExp) -> [FiExp] {
	switch (e) {
		FiSeq(es,__,__): es;
		default: [e];
	}
}