import tools/flowc/prettyprint;
import tools/flowc/incremental/fi2fc;

export {
	// Prettyprinting for FiExp
	prettyFiExp(conf : FcPretty, e : FiExp) -> string;
	prettyFiType(conf : FcPretty, type : FiType, seen : Set<int>) -> string;
	prettyFiStructOrUnion(conf : FcPretty, type : FiStructOrUnion, seen : Set<int>) -> string;
	prettyFiDeclaration(conf : FcPretty, decl : FiDeclaration, seen : Set<int>) -> string;
}

prettyFiExp(conf : FcPretty, e : FiExp) -> string {
	prettyFcExp(conf, fiexp2fc(e))
}

prettyFiType(conf : FcPretty, type : FiType, seen : Set<int>) -> string {
	prettyFcType(conf, fitype2fc(type), seen)
}

prettyFiStructOrUnion(conf : FcPretty, type : FiStructOrUnion, seen : Set<int>) -> string {
	switch (type) {
		FiTypeStruct(__, __, __, __) : prettyFcType(conf, fitypestruct2fc(type), seen);
		FiTypeUnion(__, __, __, __) : prettyFcType(conf, fitypeunion2fc(type), seen);
	}
}

prettyFiDeclaration(conf : FcPretty, decl : FiDeclaration, seen : Set<int>) -> string {
	switch (decl) {
		FiFunctionDec(name, __, type,__,__): name + " : " + prettyFiType(conf, type, makeSet());
		FiGlobalVar(name, __, type, __,__): name + " : " + prettyFiType(conf, type, makeSet());
		FiNativeDec(name, io, type, __,__,__,__): "native " + name + " :" + (if (io) "io " else " ") + prettyFiType(conf, type, makeSet());
	}
}
