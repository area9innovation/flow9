import tools/flowc/prettyprint;
import tools/flowc/incremental/fi2fc;

export {
	// Prettyprinting for FiExp
	prettyFiExp(conf : FcPretty, e : FiExp) -> string;
	prettyFiType(conf : FcPretty, type : FiType, seen : Set<int>) -> string;
	prettyFiStructOrUnion(conf : FcPretty, type : FiStructOrUnion) -> string;
	prettyFiDeclarationType(conf : FcPretty, decl : FiDeclaration) -> string;
	prettyFiDeclaration(conf : FcPretty, decl : FiDeclaration) -> string;

	// Simple versions of prettyprinting with default parameters
	pretFiExp(e : FiExp) -> string;
	pretFiType(type : FiType) -> string;
	pretFiStructOrUnion(type : FiStructOrUnion) -> string;
	pretFiDeclarationType(decl : FiDeclaration) -> string;
	pretFiDeclaration(decl : FiDeclaration) -> string;
	pretFiToplevel(toplevel : FiToplevel) -> string;
}

prettyFiExp(conf : FcPretty, e : FiExp) -> string {
	prettyFcExp(conf, fiexp2fc(e))
}

prettyFiType(conf : FcPretty, type : FiType, seen : Set<int>) -> string {
	prettyFcType(conf, fitype2fc(type), seen)
}

prettyFiStructOrUnion(conf : FcPretty, type : FiStructOrUnion) -> string {
	switch (type) {
		FiTypeStruct(__, __, __, __) : prettyFcType(conf, fitypestruct2fc(type), makeSet());
		FiTypeUnion(__, __, __, __) : prettyFcType(conf, fitypeunion2fc(type), makeSet());
	}
}

prettyFiDeclarationType(conf : FcPretty, decl : FiDeclaration) -> string {
	switch (decl) {
		FiFunctionDec(name, lambda, type,__,__): name + prettyFiType(conf, type, makeSet());
		FiGlobalVar(name, __, type, __,__): name + " : " + prettyFiType(conf, type, makeSet());
		FiNativeDec(name, io, type, __,__,__,__): "native " + name + " :" + (if (io) "io " else " ") + prettyFiType(conf, type, makeSet());
	}
}

prettyFiDeclaration(conf : FcPretty, decl : FiDeclaration) -> string {
	switch (decl) {
		FiFunctionDec(name, lambda, type,__,__): {
			name + prettyFiType(conf, type, makeSet()) + " =\n" + 
			prettyFiExp(conf, lambda);
		}
		FiGlobalVar(name, value, type, __,__): {
			name + " : " + prettyFiType(conf, type, makeSet()) + " =\n" + 
			prettyFiExp(conf, value);
		}
		FiNativeDec(name, io, type, nativeName, fallback,__,__): {
			fallback_str = switch (fallback) {
				FiLambda(__,__,__,__): prettyFiExp(conf, fallback);
				default: "";
			}
			"native " + name + " :" + (if (io) "io " else " ") + prettyFiType(conf, type, makeSet()) + " =" + 
			(if (strlen(fallback_str) == 0) " " + nativeName else "\n" + fallback_str);
		}
	}
}

pretFiExp(e : FiExp) -> string {
	prettyFiExp(dummyPretty, e);
}

pretFiType(type : FiType) -> string {
	prettyFiType(dummyPretty, type, makeSet());
}

pretFiStructOrUnion(type : FiStructOrUnion) -> string {
	prettyFiStructOrUnion(dummyPretty, type);
}

pretFiDeclarationType(decl : FiDeclaration) -> string {
	prettyFiDeclaration(dummyPretty, decl);
}

pretFiDeclaration(decl : FiDeclaration) -> string {
	prettyFiDeclaration(dummyPretty, decl);
}

pretFiToplevel(toplevel : FiToplevel) -> string {
	switch (toplevel) {
		FiStructOrUnion(): pretFiStructOrUnion(toplevel);
		FiDeclaration(): pretFiDeclaration(toplevel);
	}
}