import string;
import lingo/compiler/syntaxtree_types;
import tools/flowc/flow_ast_mnemonics;

export {
	parse_flow(t : string) -> Pair<SyntaxTree, ExpectError>;
}

parse_flow(t : string) -> Pair<SyntaxTree, ExpectError> {
	acc = SyntaxParseAcc(t, strlen(t), 0, [ref makeTree(), ref makeTree(), ref makeTree()], noExpectError);
	r = do_parse_flow_flow(acc);
	Pair(r, acc.expect);
}
do_parse_flow_flow(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 65279 /* ï»¿ */) {
		acc.i ::= acc.i + 1;
	}
	c1 = do_parse_flow_ws(acc);
	if (c1.choice != -1) {
		c2 = SyntaxStar(acc, do_parse_flow_importExport);
		c3 = SyntaxStar(acc, do_parse_flow_toplevelDeclaration);
		i4 = acc.i;
		t4 = do_parse_flow_lastLineComment(acc);
		c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
		SyntaxTree(st_flow, 0, i, acc.i, [[c1], c2, c3, c4]);
	} else c1
}

do_parse_flow_importExport(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_import(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_dynamicImport(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_flow_export(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_flow_forbid(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_importExport, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_flow_import(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "import", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_flow_s(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_path(acc);
			if (c2.choice != -1) {
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_flow_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_import, 0, i, acc.i, [[c1], [c2], [c3], [c5]]);
						} else c5
					} else {
						// "Expected ';'"
						updateExpectError(acc, "", ";", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'import'"
		updateExpectError(acc, "", "import", i);
		failSyntaxTree;
	}
}

do_parse_flow_dynamicImport(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "require", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_flow_s(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_path(acc);
			if (c2.choice != -1) {
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_flow_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_dynamicImport, 0, i, acc.i, [[c1], [c2], [c3], [c5]]);
						} else c5
					} else {
						// "Expected ';'"
						updateExpectError(acc, "", ";", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'require'"
		updateExpectError(acc, "", "require", i);
		failSyntaxTree;
	}
}

do_parse_flow_export(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "export", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					c4 = SyntaxPlus(acc, do_parse_flow_toplevelDeclaration);
					if (length(c4) >= 1) {
						if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
							acc.i ::= acc.i + 1;
							c6 = do_parse_flow_ws(acc);
							if (c6.choice != -1) {
								SyntaxTree(st_export, 0, i, acc.i, [[c1], [c3], c4, [c6]]);
							} else c6
						} else {
							// "Expected '}'"
							updateExpectError(acc, "", "}", i);
							failSyntaxTree;
						}
					} else {
						// "Expected at least one toplevelDeclaration"
						updateExpectError(acc, "", "toplevelDeclaration", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected '{'"
				updateExpectError(acc, "", "{", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected 'export'"
		updateExpectError(acc, "", "export", i);
		failSyntaxTree;
	}
}

do_parse_flow_forbid(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "forbid", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_flow_s(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_path(acc);
			if (c2.choice != -1) {
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_flow_ws(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_forbid, 0, i, acc.i, [[c1], [c2], [c3], [c5]]);
						} else c5
					} else {
						// "Expected ';'"
						updateExpectError(acc, "", ";", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'forbid'"
		updateExpectError(acc, "", "forbid", i);
		failSyntaxTree;
	}
}

do_parse_flow_toplevelDeclaration(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_native(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_assign(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_flow_union(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_flow_function(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_flow_typedecl(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_toplevelDeclaration, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_flow_native(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "native", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_flow_s(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_id(acc);
			if (c2.choice != -1) {
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_flow_ws(acc);
						if (c5.choice != -1) {
							i6 = acc.i;
							t6 = do_parse_flow_native_io(acc);
							c6 = if (t6.choice == -1) {acc.i ::= i6; [] } else [t6];
							c7 = do_parse_flow_type(acc);
							if (c7.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
									acc.i ::= acc.i + 1;
									c9 = do_parse_flow_ws(acc);
									if (c9.choice != -1) {
										c10 = do_parse_flow_name(acc);
										if (c10.choice != -1) {
											c11 = do_parse_flow_ws(acc);
											if (c11.choice != -1) {
												if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
													acc.i ::= acc.i + 1;
													c13 = do_parse_flow_ws(acc);
													if (c13.choice != -1) {
														SyntaxTree(st_native, 0, i, acc.i, [[c1], [c2], [c3], [c5], c6, [c7], [c9], [c10], [c11], [c13]]);
													} else c13
												} else {
													// "Expected ';'"
													updateExpectError(acc, "", ";", i);
													failSyntaxTree;
												}
											} else c11
										} else c10
									} else c9
								} else {
									// "Expected '='"
									updateExpectError(acc, "", "=", i);
									failSyntaxTree;
								}
							} else c7
						} else c5
					} else {
						// "Expected ':'"
						updateExpectError(acc, "", ":", i);
						failSyntaxTree;
					}
				} else c3
			} else c2
		} else c1
	} else {
		// "Expected 'native'"
		updateExpectError(acc, "", "native", i);
		failSyntaxTree;
	}
}

do_parse_flow_native_io(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 105 && getCharCodeAt(acc.input, acc.i + 1) == 111 /* io */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_native_io, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected 'io'"
		updateExpectError(acc, "", "io", i);
		failSyntaxTree;
	}
}

do_parse_flow_name(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_dot_name);
		SyntaxTree(st_name, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_dot_name(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_id(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_dot_name, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '.'"
		updateExpectError(acc, "", ".", i);
		failSyntaxTree;
	}
}

do_parse_flow_assign(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					c4 = do_parse_flow_exp(acc);
					if (c4.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
							acc.i ::= acc.i + 1;
						}
						c6 = do_parse_flow_ws(acc);
						if (c6.choice != -1) {
							SyntaxTree(st_assign, 0, i, acc.i, [[c0], [c1], [c3], [c4], [c6]]);
						} else c6
					} else c4
				} else c3
			} else {
				// "Expected '='"
				updateExpectError(acc, "", "=", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_flow_union(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_flow_typelist(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_flow_ws(acc);
			if (c3.choice != -1) {
				if (strRangeIndexOf(acc.input, "::=", acc.i, acc.i + 3) == acc.i) {
					acc.i ::= acc.i + 3;
					c5 = do_parse_flow_ws(acc);
					if (c5.choice != -1) {
						c6 = do_parse_flow_typenames(acc);
						if (c6.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
								acc.i ::= acc.i + 1;
								c8 = do_parse_flow_ws(acc);
								if (c8.choice != -1) {
									SyntaxTree(st_union, 0, i, acc.i, [[c0], [c1], c2, [c3], [c5], [c6], [c8]]);
								} else c8
							} else {
								// "Expected ';'"
								updateExpectError(acc, "", ";", i);
								failSyntaxTree;
							}
						} else c6
					} else c5
				} else {
					// "Expected '::='"
					updateExpectError(acc, "", "::=", i);
					failSyntaxTree;
				}
			} else c3
		} else c1
	} else c0
}

do_parse_flow_function(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					c4 = do_parse_flow_function_args(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_function, 0, i, acc.i, [[c0], [c1], [c3], [c4]]);
					} else c4
				} else c3
			} else {
				// "Expected '('"
				updateExpectError(acc, "", "(", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_flow_function_args(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		i0 = acc.i;
		t0 = do_parse_flow_funargs2(acc);
		c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
		if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
			acc.i ::= acc.i + 1;
			c2 = do_parse_flow_ws(acc);
			if (c2.choice != -1) {
				i3 = acc.i;
				t3 = do_parse_flow_returnType(acc);
				c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
				if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
					acc.i ::= acc.i + 1;
					c5 = do_parse_flow_ws(acc);
					if (c5.choice != -1) {
						SyntaxTree(st_function_args, 0, i, acc.i, [c0, [c2], c3, [c5]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			i0 = acc.i;
			t0 = do_parse_flow_funargs(acc);
			c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
			if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
				acc.i ::= acc.i + 1;
				c2 = do_parse_flow_ws(acc);
				if (c2.choice != -1) {
					c3 = do_parse_flow_function_2(acc);
					if (c3.choice != -1) {
						SyntaxTree(st_function_args, 1, i, acc.i, [c0, [c2], [c3]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_function_args, -1, i, i, [])
		}

	}

}

do_parse_flow_function_2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_returnType(acc);
		if (c0.choice != -1) {
			c1 = do_parse_flow_brace_or_semi(acc);
			if (c1.choice != -1) {
				SyntaxTree(st_function_2, 0, i, acc.i, [[c0], [c1]]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_exp(acc);
			if (c0.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
					acc.i ::= acc.i + 1;
				}
				c2 = do_parse_flow_ws(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_function_2, 1, i, acc.i, [[c0], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_function_2, -1, i, i, [])
		}

	}

}

do_parse_flow_typedecl(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_functiondecl(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_structdecl(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_flow_vardecl(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_typedecl, -1, i, i, [])
			}

		}

	}

}

do_parse_flow_vardecl(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					c4 = do_parse_flow_type(acc);
					if (c4.choice != -1) {
						i5 = acc.i;
						t5 = do_parse_flow_assignExp(acc);
						c5 = if (t5.choice == -1) {acc.i ::= i5; [] } else [t5];
						if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
							acc.i ::= acc.i + 1;
						}
						c7 = do_parse_flow_ws(acc);
						if (c7.choice != -1) {
							SyntaxTree(st_vardecl, 0, i, acc.i, [[c0], [c1], [c3], [c4], c5, [c7]]);
						} else c7
					} else c4
				} else c3
			} else {
				// "Expected ':'"
				updateExpectError(acc, "", ":", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_flow_assignExp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_assignExp, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '='"
		updateExpectError(acc, "", "=", i);
		failSyntaxTree;
	}
}

do_parse_flow_functiondecl(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_flow_ws(acc);
						if (c5.choice != -1) {
							i6 = acc.i;
							t6 = do_parse_flow_argtypes(acc);
							c6 = if (t6.choice == -1) {acc.i ::= i6; [] } else [t6];
							if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
								acc.i ::= acc.i + 1;
								c8 = do_parse_flow_ws(acc);
								if (c8.choice != -1) {
									c9 = do_parse_flow_returnType(acc);
									if (c9.choice != -1) {
										if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
											acc.i ::= acc.i + 1;
											c11 = do_parse_flow_ws(acc);
											if (c11.choice != -1) {
												SyntaxTree(st_functiondecl, 0, i, acc.i, [[c0], [c1], [c3], [c5], c6, [c8], [c9], [c11]]);
											} else c11
										} else {
											// "Expected ';'"
											updateExpectError(acc, "", ";", i);
											failSyntaxTree;
										}
									} else c9
								} else c8
							} else {
								// "Expected ')'"
								updateExpectError(acc, "", ")", i);
								failSyntaxTree;
							}
						} else c5
					} else {
						// "Expected '('"
						updateExpectError(acc, "", "(", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected ':'"
				updateExpectError(acc, "", ":", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_flow_structdecl(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
				acc.i ::= acc.i + 1;
				c3 = do_parse_flow_ws(acc);
				if (c3.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
						acc.i ::= acc.i + 1;
						c5 = do_parse_flow_ws(acc);
						if (c5.choice != -1) {
							i6 = acc.i;
							t6 = do_parse_flow_funargs(acc);
							c6 = if (t6.choice == -1) {acc.i ::= i6; [] } else [t6];
							if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
								acc.i ::= acc.i + 1;
								c8 = do_parse_flow_ws(acc);
								if (c8.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
										acc.i ::= acc.i + 1;
										c10 = do_parse_flow_ws(acc);
										if (c10.choice != -1) {
											SyntaxTree(st_structdecl, 0, i, acc.i, [[c0], [c1], [c3], [c5], c6, [c8], [c10]]);
										} else c10
									} else {
										// "Expected ';'"
										updateExpectError(acc, "", ";", i);
										failSyntaxTree;
									}
								} else c8
							} else {
								// "Expected ')'"
								updateExpectError(acc, "", ")", i);
								failSyntaxTree;
							}
						} else c5
					} else {
						// "Expected '('"
						updateExpectError(acc, "", "(", i);
						failSyntaxTree;
					}
				} else c3
			} else {
				// "Expected ':'"
				updateExpectError(acc, "", ":", i);
				failSyntaxTree;
			}
		} else c1
	} else c0
}

do_parse_flow_returnType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 45 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* -> */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_type(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_returnType, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '->'"
		updateExpectError(acc, "", "->", i);
		failSyntaxTree;
	}
}

do_parse_flow_brace_or_semi(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_brace(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
			acc.i ::= acc.i + 1;
		}
		c2 = do_parse_flow_ws(acc);
		if (c2.choice != -1) {
			SyntaxTree(st_brace_or_semi, 0, i, acc.i, [[c0], [c2]]);
		} else c2
	} else c0
}

do_parse_flow_funargs2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_funarg2(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_funargs2_more);
		i2 = acc.i;
		t2 = do_parse_flow_trailingComma(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_funargs2, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_flow_funargs2_more(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_funarg2(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_funargs2_more, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_funarg2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	i0 = acc.i;
	t0 = do_parse_flow_funarg_mutable(acc);
	c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
	c1 = do_parse_flow_funarg2_arg(acc);
	if (c1.choice != -1) {
		SyntaxTree(st_funarg2, 0, i, acc.i, [c0, [c1]]);
	} else c1
}

do_parse_flow_funarg2_arg(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_id(acc);
		if (c0.choice != -1) {
			c1 = do_parse_flow_ws(acc);
			if (c1.choice != -1) {
				i2 = acc.i;
				t2 = do_parse_flow_colontype(acc);
				c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
				SyntaxTree(st_funarg2_arg, 0, i, acc.i, [[c0], [c1], c2]);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_type(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_funarg2_arg, -1, i, i, [])
		}

	}

}

do_parse_flow_funargs(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_funarg(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_funargs_more);
		i2 = acc.i;
		t2 = do_parse_flow_trailingComma(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_funargs, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_flow_funargs_more(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_funarg(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_funargs_more, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_funarg(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	i0 = acc.i;
	t0 = do_parse_flow_funarg_mutable(acc);
	c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
	c1 = do_parse_flow_id(acc);
	if (c1.choice != -1) {
		c2 = do_parse_flow_ws(acc);
		if (c2.choice != -1) {
			i3 = acc.i;
			t3 = do_parse_flow_colontype(acc);
			c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
			SyntaxTree(st_funarg, 0, i, acc.i, [c0, [c1], [c2], c3]);
		} else c2
	} else c1
}

do_parse_flow_funarg_mutable(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "mutable", acc.i, acc.i + 7) == acc.i) {
		acc.i ::= acc.i + 7;
		c1 = do_parse_flow_s(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_funarg_mutable, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected 'mutable'"
		updateExpectError(acc, "", "mutable", i);
		failSyntaxTree;
	}
}

do_parse_flow_colontype(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_type(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_colontype, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_flow_typenames(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_typename(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_typenames2);
		SyntaxTree(st_typenames, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_typenames2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_typename(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_typenames2, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_typename(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_flow_typelist(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_typename, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_flow_typelist(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 60 /* < */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_types(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_flow_ws(acc);
					if (c4.choice != -1) {
						SyntaxTree(st_typelist, 0, i, acc.i, [[c1], [c2], [c4]]);
					} else c4
				} else {
					// "Expected '>'"
					updateExpectError(acc, "", ">", i);
					failSyntaxTree;
				}
			} else c2
		} else c1
	} else {
		// "Expected '<'"
		updateExpectError(acc, "", "<", i);
		failSyntaxTree;
	}
}

do_parse_flow_types(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_type(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_types2);
		SyntaxTree(st_types, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_types2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_type(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_types2, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_type(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 91 /* [ */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_flow_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_flow_type(acc);
				if (c2.choice != -1) {
					c3 = do_parse_flow_ws(acc);
					if (c3.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 93 /* ] */) {
							acc.i ::= acc.i + 1;
							c5 = do_parse_flow_ws(acc);
							if (c5.choice != -1) {
								SyntaxTree(st_type, 0, i, acc.i, [[c1], [c2], [c3], [c5]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_flow_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_flow_type_fn_par(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_type, 1, i, acc.i, [[c1], [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 94 /* ^ */) {
					acc.i ::= acc.i + 1;
					c1 = do_parse_flow_ws(acc);
					if (c1.choice != -1) {
						c2 = do_parse_flow_type(acc);
						if (c2.choice != -1) {
							SyntaxTree(st_type, 2, i, acc.i, [[c1], [c2]]);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = SyntaxPlus(acc, \na ->
						if (getCharCodeAt(acc.input, acc.i) == 63 /* ? */) {
							acc.i ::= acc.i + 1;
							dummySyntaxTree;
						} else {
							failSyntaxTree
						}
					);
					if (c0 != []) {
						c1 = do_parse_flow_ws(acc);
						if (c1.choice != -1) {
							SyntaxTree(st_type, 3, i, acc.i, [[c1]]);
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (strRangeIndexOf(acc.input, "bool", acc.i, acc.i + 4) == acc.i) {
							acc.i ::= acc.i + 4;
							c1 = do_parse_flow_letterOrDigit_(acc);
							if (c1.choice == -1) {
								c2 = do_parse_flow_ws(acc);
								if (c2.choice != -1) {
									SyntaxTree(st_type, 4, i, acc.i, [[c2]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (strRangeIndexOf(acc.input, "int", acc.i, acc.i + 3) == acc.i) {
								acc.i ::= acc.i + 3;
								c1 = do_parse_flow_letterOrDigit_(acc);
								if (c1.choice == -1) {
									c2 = do_parse_flow_ws(acc);
									if (c2.choice != -1) {
										SyntaxTree(st_type, 5, i, acc.i, [[c2]]);
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								if (strRangeIndexOf(acc.input, "double", acc.i, acc.i + 6) == acc.i) {
									acc.i ::= acc.i + 6;
									c1 = do_parse_flow_letterOrDigit_(acc);
									if (c1.choice == -1) {
										c2 = do_parse_flow_ws(acc);
										if (c2.choice != -1) {
											SyntaxTree(st_type, 6, i, acc.i, [[c2]]);
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									if (strRangeIndexOf(acc.input, "string", acc.i, acc.i + 6) == acc.i) {
										acc.i ::= acc.i + 6;
										c1 = do_parse_flow_letterOrDigit_(acc);
										if (c1.choice == -1) {
											c2 = do_parse_flow_ws(acc);
											if (c2.choice != -1) {
												SyntaxTree(st_type, 7, i, acc.i, [[c2]]);
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									acc.i ::= i;
									r8 = {
										if (strRangeIndexOf(acc.input, "flow", acc.i, acc.i + 4) == acc.i) {
											acc.i ::= acc.i + 4;
											c1 = do_parse_flow_letterOrDigit_(acc);
											if (c1.choice == -1) {
												c2 = do_parse_flow_ws(acc);
												if (c2.choice != -1) {
													SyntaxTree(st_type, 8, i, acc.i, [[c2]]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									}
									if (r8 != failSyntaxTree) r8
									else {
										acc.i ::= i;
										r9 = {
											if (strRangeIndexOf(acc.input, "void", acc.i, acc.i + 4) == acc.i) {
												acc.i ::= acc.i + 4;
												c1 = do_parse_flow_letterOrDigit_(acc);
												if (c1.choice == -1) {
													c2 = do_parse_flow_ws(acc);
													if (c2.choice != -1) {
														SyntaxTree(st_type, 9, i, acc.i, [[c2]]);
													} else failSyntaxTree;
												} else failSyntaxTree;
											} else failSyntaxTree;
										}
										if (r9 != failSyntaxTree) r9
										else {
											acc.i ::= i;
											r10 = {
												if (strRangeIndexOf(acc.input, "native", acc.i, acc.i + 6) == acc.i) {
													acc.i ::= acc.i + 6;
													c1 = do_parse_flow_letterOrDigit_(acc);
													if (c1.choice == -1) {
														c2 = do_parse_flow_ws(acc);
														if (c2.choice != -1) {
															SyntaxTree(st_type, 10, i, acc.i, [[c2]]);
														} else failSyntaxTree;
													} else failSyntaxTree;
												} else failSyntaxTree;
											}
											if (r10 != failSyntaxTree) r10
											else {
												acc.i ::= i;
												r11 = {
													if (strRangeIndexOf(acc.input, "ref", acc.i, acc.i + 3) == acc.i) {
														acc.i ::= acc.i + 3;
														c1 = do_parse_flow_letterOrDigit_(acc);
														if (c1.choice == -1) {
															c2 = do_parse_flow_ws(acc);
															if (c2.choice != -1) {
																c3 = do_parse_flow_type(acc);
																if (c3.choice != -1) {
																	SyntaxTree(st_type, 11, i, acc.i, [[c2], [c3]]);
																} else failSyntaxTree;
															} else failSyntaxTree;
														} else failSyntaxTree;
													} else failSyntaxTree;
												}
												if (r11 != failSyntaxTree) r11
												else {
													acc.i ::= i;
													r12 = {
														c0 = do_parse_flow_typename(acc);
														if (c0.choice != -1) {
															c1 = do_parse_flow_ws(acc);
															if (c1.choice != -1) {
																SyntaxTree(st_type, 12, i, acc.i, [[c0], [c1]]);
															} else failSyntaxTree;
														} else failSyntaxTree;
													}
													if (r12 != failSyntaxTree) r12
													else {
														SyntaxTree(st_Expected_type, -1, i, i, [])
													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_flow_type_fn_par(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		i0 = acc.i;
		t0 = do_parse_flow_argtypes(acc);
		c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
		i1 = acc.i;
		t1 = do_parse_flow_trailingComma(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
			acc.i ::= acc.i + 1;
			c3 = do_parse_flow_ws(acc);
			if (c3.choice != -1) {
				c4 = do_parse_flow_type_rettype(acc);
				if (c4.choice != -1) {
					SyntaxTree(st_type_fn_par, 0, i, acc.i, [c0, c1, [c3], [c4]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_type(acc);
			if (c0.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
					acc.i ::= acc.i + 1;
					c2 = do_parse_flow_ws(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_type_fn_par, 1, i, acc.i, [[c0], [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_type_fn_par, -1, i, i, [])
		}

	}

}

do_parse_flow_type_rettype(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 45 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* -> */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_type(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_type_rettype, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '->'"
		updateExpectError(acc, "", "->", i);
		failSyntaxTree;
	}
}

do_parse_flow_argtypes(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_argtype(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_argtypes2);
		SyntaxTree(st_argtypes, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_argtypes2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_argtype(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_argtypes2, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_argtype(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_id(acc);
		if (c0.choice != -1) {
			c1 = do_parse_flow_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_flow_colontype(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_argtype, 0, i, acc.i, [[c0], [c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_type(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_argtype, -1, i, i, [])
		}

	}

}

do_parse_flow_exp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 64 /* @ */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_flow_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_flow_exp0(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_exp, 0, i, acc.i, [[c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_exp0(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_exp, -1, i, i, [])
		}

	}

}

do_parse_flow_exp0(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_id(acc);
		if (c0.choice != -1) {
			c1 = do_parse_flow_ws(acc);
			if (c1.choice != -1) {
				i2 = acc.i;
				t2 = do_parse_flow_colontype(acc);
				c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
				if (getCharCodeAt(acc.input, acc.i) == 61 /* = */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_flow_ws(acc);
					if (c4.choice != -1) {
						c5 = do_parse_flow_exp(acc);
						if (c5.choice != -1) {
							SyntaxTree(st_exp0, 0, i, acc.i, [[c0], [c1], c2, [c4], [c5]]);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 105 && getCharCodeAt(acc.input, acc.i + 1) == 102 /* if */) {
				acc.i ::= acc.i + 2;
				c1 = do_parse_flow_letterOrDigit_(acc);
				if (c1.choice == -1) {
					c2 = do_parse_flow_ws(acc);
					if (c2.choice != -1) {
						if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
							acc.i ::= acc.i + 1;
							c4 = do_parse_flow_ws(acc);
							if (c4.choice != -1) {
								c5 = do_parse_flow_condexp(acc);
								if (c5.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
										acc.i ::= acc.i + 1;
										c7 = do_parse_flow_ws(acc);
										if (c7.choice != -1) {
											c8 = do_parse_flow_exp(acc);
											if (c8.choice != -1) {
												i9 = acc.i;
												t9 = do_parse_flow_elseExp(acc);
												c9 = if (t9.choice == -1) {acc.i ::= i9; [] } else [t9];
												SyntaxTree(st_exp0, 1, i, acc.i, [[c2], [c4], [c5], [c7], [c8], c9]);
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_flow_atom(acc);
				if (c0.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
						acc.i ::= acc.i + 1;
						c2 = do_parse_flow_ws(acc);
						if (c2.choice != -1) {
							c3 = do_parse_flow_id(acc);
							if (c3.choice != -1) {
								c4 = do_parse_flow_ws(acc);
								if (c4.choice != -1) {
									if (strRangeIndexOf(acc.input, "::=", acc.i, acc.i + 3) == acc.i) {
										acc.i ::= acc.i + 3;
										c6 = do_parse_flow_ws(acc);
										if (c6.choice != -1) {
											c7 = do_parse_flow_exp(acc);
											if (c7.choice != -1) {
												SyntaxTree(st_exp0, 2, i, acc.i, [[c0], [c2], [c3], [c4], [c6], [c7]]);
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_flow_exp1(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_exp0, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_flow_condexp(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_flow_exp(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_flow_exp1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp2(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_flow_exp1_assign(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		SyntaxTree(st_exp1, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_exp1_assign(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* := */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_exp1_assign, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ':='"
		updateExpectError(acc, "", ":=", i);
		failSyntaxTree;
	}
}

do_parse_flow_elseExp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "else", acc.i, acc.i + 4) == acc.i) {
		acc.i ::= acc.i + 4;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_elseExp, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected 'else'"
		updateExpectError(acc, "", "else", i);
		failSyntaxTree;
	}
}

do_parse_flow_exp2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp3(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_pipeExp);
		SyntaxTree(st_exp2, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_pipeExp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* |> */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp3(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_pipeExp, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '|>'"
		updateExpectError(acc, "", "|>", i);
		failSyntaxTree;
	}
}

do_parse_flow_exp3(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp4(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_orExp);
		SyntaxTree(st_exp3, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_orExp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 124 && getCharCodeAt(acc.input, acc.i + 1) == 124 /* || */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp4(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_orExp, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '||'"
		updateExpectError(acc, "", "||", i);
		failSyntaxTree;
	}
}

do_parse_flow_exp4(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp5(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_andExp);
		SyntaxTree(st_exp4, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_andExp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 38 && getCharCodeAt(acc.input, acc.i + 1) == 38 /* && */) {
		acc.i ::= acc.i + 2;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp5(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_andExp, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected '&&'"
		updateExpectError(acc, "", "&&", i);
		failSyntaxTree;
	}
}

do_parse_flow_exp5(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp6(acc);
	if (c0.choice != -1) {
		i1 = acc.i;
		t1 = do_parse_flow_exp5_compare(acc);
		c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
		SyntaxTree(st_exp5, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_exp5_compare(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_comparisonOp(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp6(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_exp5_compare, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_flow_comparisonOp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 61 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* == */) {
			acc.i ::= acc.i + 2;
			SyntaxTree(st_comparisonOp, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 33 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* != */) {
				acc.i ::= acc.i + 2;
				SyntaxTree(st_comparisonOp, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 60 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* <= */) {
					acc.i ::= acc.i + 2;
					SyntaxTree(st_comparisonOp, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 62 && getCharCodeAt(acc.input, acc.i + 1) == 61 /* >= */) {
						acc.i ::= acc.i + 2;
						SyntaxTree(st_comparisonOp, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 60 /* < */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_comparisonOp, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (getCharCodeAt(acc.input, acc.i) == 62 /* > */) {
								acc.i ::= acc.i + 1;
								SyntaxTree(st_comparisonOp, 5, i, acc.i, []);
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							SyntaxTree(st_Expected_comparisonOp, -1, i, i, [])
						}

					}

				}

			}

		}

	}

}

do_parse_flow_exp6(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_term(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_additiveExp);
		SyntaxTree(st_exp6, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_additiveExp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_plusMinus(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_term(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_additiveExp, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_flow_plusMinus(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 43 /* + */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_plusMinus, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_plusMinus, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_plusMinus, -1, i, i, [])
		}

	}

}

do_parse_flow_term(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_factor(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_multiExp);
		SyntaxTree(st_term, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_multiExp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_multiOp(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_factor(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_multiExp, 0, i, acc.i, [[c0], [c1], [c2]]);
			} else c2
		} else c1
	} else c0
}

do_parse_flow_multiOp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 42 /* * */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_multiOp, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_multiOp, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 37 /* % */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_multiOp, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_multiOp, -1, i, i, [])
			}

		}

	}

}

do_parse_flow_factor(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 33 /* ! */) {
			acc.i ::= acc.i + 1;
			c1 = do_parse_flow_ws(acc);
			if (c1.choice != -1) {
				c2 = do_parse_flow_factor(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_factor, 0, i, acc.i, [[c1], [c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 45 /* - */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_flow_ws(acc);
				if (c1.choice != -1) {
					c2 = do_parse_flow_factor(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_factor, 1, i, acc.i, [[c1], [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
					acc.i ::= acc.i + 1;
					c1 = do_parse_flow_ws(acc);
					if (c1.choice != -1) {
						i2 = acc.i;
						t2 = do_parse_flow_argNames(acc);
						c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
						i3 = acc.i;
						t3 = do_parse_flow_trailingComma(acc);
						c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
						c4 = do_parse_flow_ws(acc);
						if (c4.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 45 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* -> */) {
								acc.i ::= acc.i + 2;
								c6 = do_parse_flow_ws(acc);
								if (c6.choice != -1) {
									c7 = do_parse_flow_exp(acc);
									if (c7.choice != -1) {
										SyntaxTree(st_factor, 2, i, acc.i, [[c1], c2, c3, [c4], [c6], [c7]]);
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_flow_call(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_factor, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_flow_argNames(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_argName(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_argNames2);
		SyntaxTree(st_argNames, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_argNames2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_argName(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_argNames2, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_argName(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_flow_colontype(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_argName, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_flow_call(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_atom(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_postfix);
		SyntaxTree(st_call, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_postfix(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_args(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
				acc.i ::= acc.i + 1;
				c1 = do_parse_flow_id(acc);
				if (c1.choice != -1) {
					c2 = do_parse_flow_ws(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_postfix, 1, i, acc.i, [[c1], [c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 91 /* [ */) {
					acc.i ::= acc.i + 1;
					c1 = do_parse_flow_ws(acc);
					if (c1.choice != -1) {
						c2 = do_parse_flow_exp(acc);
						if (c2.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 93 /* ] */) {
								acc.i ::= acc.i + 1;
								c4 = do_parse_flow_ws(acc);
								if (c4.choice != -1) {
									SyntaxTree(st_postfix, 2, i, acc.i, [[c1], [c2], [c4]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
						acc.i ::= acc.i + 1;
						c1 = do_parse_flow_ws(acc);
						if (c1.choice != -1) {
							c2 = do_parse_flow_call(acc);
							if (c2.choice != -1) {
								if (strRangeIndexOf(acc.input, "with", acc.i, acc.i + 4) == acc.i) {
									acc.i ::= acc.i + 4;
									c4 = do_parse_flow_s(acc);
									if (c4.choice != -1) {
										c5 = do_parse_flow_fields(acc);
										if (c5.choice != -1) {
											if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
												acc.i ::= acc.i + 1;
												c7 = do_parse_flow_ws(acc);
												if (c7.choice != -1) {
													SyntaxTree(st_postfix, 3, i, acc.i, [[c1], [c2], [c4], [c5], [c7]]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_postfix, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_flow_args(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_flow_arglist(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			c3 = do_parse_flow_ws(acc);
			if (c3.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
					acc.i ::= acc.i + 1;
					c5 = do_parse_flow_ws(acc);
					if (c5.choice != -1) {
						SyntaxTree(st_args, 0, i, acc.i, [[c1], c2, [c3], [c5]]);
					} else c5
				} else {
					// "Expected ')'"
					updateExpectError(acc, "", ")", i);
					failSyntaxTree;
				}
			} else c3
		} else c1
	} else {
		// "Expected '('"
		updateExpectError(acc, "", "(", i);
		failSyntaxTree;
	}
}

do_parse_flow_arglist(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_one_more_exp);
		i2 = acc.i;
		t2 = do_parse_flow_trailingComma(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_arglist, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_flow_fields(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_assign(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_fields_tail);
		i2 = acc.i;
		t2 = do_parse_flow_fields__auto119(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_fields, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_flow_fields_tail(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_assign(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_fields_tail, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_one_more_exp(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_one_more_exp, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_trailingComma(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_trailingComma, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_atom(acc : SyntaxParseAcc) -> SyntaxTree {
	cache = (acc.caches)[0];
	ci = acc.i;
	cached = lookupTree(^cache, ci);
	switch (cached) {
		None(): {
			rs = {
				i = acc.i;
				acc.i ::= i;
				r0 = {
					c0 = do_parse_flow_keywords(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r0 != failSyntaxTree) r0
				else {
					acc.i ::= i;
					r1 = {
						c0 = do_parse_flow_id(acc);
						if (c0.choice != -1) {
							c1 = do_parse_flow_ws(acc);
							if (c1.choice != -1) {
								SyntaxTree(st_atom, 1, i, acc.i, [[c0], [c1]]);
							} else failSyntaxTree;
						} else failSyntaxTree;
					}
					if (r1 != failSyntaxTree) r1
					else {
						acc.i ::= i;
						r2 = {
							c0 = do_parse_flow_number(acc);
							if (c0.choice != -1) {
								c1 = do_parse_flow_ws(acc);
								if (c1.choice != -1) {
									SyntaxTree(st_atom, 2, i, acc.i, [[c0], [c1]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						}
						if (r2 != failSyntaxTree) r2
						else {
							acc.i ::= i;
							r3 = {
								c0 = do_parse_flow_string(acc);
								if (c0.choice != -1) {
									c0
								} else failSyntaxTree;
							}
							if (r3 != failSyntaxTree) r3
							else {
								acc.i ::= i;
								r4 = {
									if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
										acc.i ::= acc.i + 1;
										c1 = do_parse_flow_ws(acc);
										if (c1.choice != -1) {
											c2 = do_parse_flow_exp(acc);
											if (c2.choice != -1) {
												if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
													acc.i ::= acc.i + 1;
													c4 = do_parse_flow_ws(acc);
													if (c4.choice != -1) {
														SyntaxTree(st_atom, 4, i, acc.i, [[c1], [c2], [c4]]);
													} else failSyntaxTree;
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								}
								if (r4 != failSyntaxTree) r4
								else {
									acc.i ::= i;
									r5 = {
										if (getCharCodeAt(acc.input, acc.i) == 123 && getCharCodeAt(acc.input, acc.i + 1) == 125 /* {} */) {
											acc.i ::= acc.i + 2;
											c1 = do_parse_flow_ws(acc);
											if (c1.choice != -1) {
												SyntaxTree(st_atom, 5, i, acc.i, [[c1]]);
											} else failSyntaxTree;
										} else failSyntaxTree;
									}
									if (r5 != failSyntaxTree) r5
									else {
										acc.i ::= i;
										r6 = {
											c0 = do_parse_flow_brace(acc);
											if (c0.choice != -1) {
												c1 = do_parse_flow_ws(acc);
												if (c1.choice != -1) {
													SyntaxTree(st_atom, 6, i, acc.i, [[c0], [c1]]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										}
										if (r6 != failSyntaxTree) r6
										else {
											acc.i ::= i;
											r7 = {
												if (getCharCodeAt(acc.input, acc.i) == 91 /* [ */) {
													acc.i ::= acc.i + 1;
													c1 = do_parse_flow_ws(acc);
													if (c1.choice != -1) {
														i2 = acc.i;
														t2 = do_parse_flow_exps(acc);
														c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
														i3 = acc.i;
														t3 = do_parse_flow_trailingComma(acc);
														c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
														if (getCharCodeAt(acc.input, acc.i) == 93 /* ] */) {
															acc.i ::= acc.i + 1;
															c5 = do_parse_flow_ws(acc);
															if (c5.choice != -1) {
																SyntaxTree(st_atom, 7, i, acc.i, [[c1], c2, c3, [c5]]);
															} else failSyntaxTree;
														} else failSyntaxTree;
													} else failSyntaxTree;
												} else failSyntaxTree;
											}
											if (r7 != failSyntaxTree) r7
											else {
												acc.i ::= i;
												r8 = {
													if (getCharCodeAt(acc.input, acc.i) == 94 /* ^ */) {
														acc.i ::= acc.i + 1;
														c1 = do_parse_flow_ws(acc);
														if (c1.choice != -1) {
															c2 = do_parse_flow_atom(acc);
															if (c2.choice != -1) {
																SyntaxTree(st_atom, 8, i, acc.i, [[c1], [c2]]);
															} else failSyntaxTree;
														} else failSyntaxTree;
													} else failSyntaxTree;
												}
												if (r8 != failSyntaxTree) r8
												else {
													acc.i ::= i;
													r9 = {
														if (getCharCodeAt(acc.input, acc.i) == 36 /* $ */) {
															acc.i ::= acc.i + 1;
															c1 = do_parse_flow_ws(acc);
															if (c1.choice != -1) {
																c2 = do_parse_flow_atom(acc);
																if (c2.choice != -1) {
																	SyntaxTree(st_atom, 9, i, acc.i, [[c1], [c2]]);
																} else failSyntaxTree;
															} else failSyntaxTree;
														} else failSyntaxTree;
													}
													if (r9 != failSyntaxTree) r9
													else {
														SyntaxTree(st_Expected_atom, -1, i, i, [])
													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

			};
			cache := setTree(^cache, ci, rs);
			rs;
		}
		Some(st): {
			acc.i ::= st.end;
			st;
		}
	}
}

do_parse_flow_brace(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			i2 = acc.i;
			t2 = do_parse_flow_brace_exps(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_brace, 0, i, acc.i, [[c1], c2]);
			} else {
				// "Expected '}'"
				updateExpectError(acc, "", "}", i);
				failSyntaxTree;
			}
		} else c1
	} else {
		// "Expected '{'"
		updateExpectError(acc, "", "{", i);
		failSyntaxTree;
	}
}

do_parse_flow_brace_exps(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_brace_exps_more);
		i2 = acc.i;
		t2 = do_parse_flow_brace_semi(acc);
		c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
		SyntaxTree(st_brace_exps, 0, i, acc.i, [[c0], c1, c2]);
	} else c0
}

do_parse_flow_brace_exps_more(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	i0 = acc.i;
	t0 = do_parse_flow_brace_semi(acc);
	c0 = if (t0.choice == -1) {acc.i ::= i0; [] } else [t0];
	c1 = do_parse_flow_exp(acc);
	if (c1.choice != -1) {
		SyntaxTree(st_brace_exps_more, 0, i, acc.i, [c0, [c1]]);
	} else c1
}

do_parse_flow_brace_semi(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_brace_semi, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected ';'"
		updateExpectError(acc, "", ";", i);
		failSyntaxTree;
	}
}

do_parse_flow_exps(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_exp(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_exps2);
		SyntaxTree(st_exps, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_exps2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_exp(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_exps2, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_keywords(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "true", acc.i, acc.i + 4) == acc.i) {
			acc.i ::= acc.i + 4;
			c1 = do_parse_flow_letterOrDigit_(acc);
			if (c1.choice == -1) {
				c2 = do_parse_flow_ws(acc);
				if (c2.choice != -1) {
					SyntaxTree(st_keywords, 0, i, acc.i, [[c2]]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "false", acc.i, acc.i + 5) == acc.i) {
				acc.i ::= acc.i + 5;
				c1 = do_parse_flow_letterOrDigit_(acc);
				if (c1.choice == -1) {
					c2 = do_parse_flow_ws(acc);
					if (c2.choice != -1) {
						SyntaxTree(st_keywords, 1, i, acc.i, [[c2]]);
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 105 && getCharCodeAt(acc.input, acc.i + 1) == 102 /* if */) {
					acc.i ::= acc.i + 2;
					c1 = do_parse_flow_letterOrDigit_(acc);
					if (c1.choice == -1) {
						c2 = do_parse_flow_ws(acc);
						if (c2.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
								acc.i ::= acc.i + 1;
								c4 = do_parse_flow_ws(acc);
								if (c4.choice != -1) {
									c5 = do_parse_flow_condexp(acc);
									if (c5.choice != -1) {
										if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
											acc.i ::= acc.i + 1;
											c7 = do_parse_flow_ws(acc);
											if (c7.choice != -1) {
												c8 = do_parse_flow_exp(acc);
												if (c8.choice != -1) {
													i9 = acc.i;
													t9 = do_parse_flow_elseExp(acc);
													c9 = if (t9.choice == -1) {acc.i ::= i9; [] } else [t9];
													SyntaxTree(st_keywords, 2, i, acc.i, [[c2], [c4], [c5], [c7], [c8], c9]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (strRangeIndexOf(acc.input, "ref", acc.i, acc.i + 3) == acc.i) {
						acc.i ::= acc.i + 3;
						c1 = do_parse_flow_letterOrDigit_(acc);
						if (c1.choice == -1) {
							c2 = do_parse_flow_ws(acc);
							if (c2.choice != -1) {
								c3 = do_parse_flow_exp(acc);
								if (c3.choice != -1) {
									SyntaxTree(st_keywords, 3, i, acc.i, [[c2], [c3]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						c0 = do_parse_flow_switch(acc);
						if (c0.choice != -1) {
							c0
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						acc.i ::= i;
						r5 = {
							if (strRangeIndexOf(acc.input, "cast", acc.i, acc.i + 4) == acc.i) {
								acc.i ::= acc.i + 4;
								c1 = do_parse_flow_letterOrDigit_(acc);
								if (c1.choice == -1) {
									c2 = do_parse_flow_ws(acc);
									if (c2.choice != -1) {
										if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
											acc.i ::= acc.i + 1;
											c4 = do_parse_flow_ws(acc);
											if (c4.choice != -1) {
												c5 = do_parse_flow_exp2(acc);
												if (c5.choice != -1) {
													if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
														acc.i ::= acc.i + 1;
														c7 = do_parse_flow_ws(acc);
														if (c7.choice != -1) {
															c8 = do_parse_flow_type(acc);
															if (c8.choice != -1) {
																if (getCharCodeAt(acc.input, acc.i) == 45 && getCharCodeAt(acc.input, acc.i + 1) == 62 /* -> */) {
																	acc.i ::= acc.i + 2;
																	c10 = do_parse_flow_ws(acc);
																	if (c10.choice != -1) {
																		c11 = do_parse_flow_totype(acc);
																		if (c11.choice != -1) {
																			if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
																				acc.i ::= acc.i + 1;
																				c13 = do_parse_flow_ws(acc);
																				if (c13.choice != -1) {
																					SyntaxTree(st_keywords, 5, i, acc.i, [[c2], [c4], [c5], [c7], [c8], [c10], [c11], [c13]]);
																				} else failSyntaxTree;
																			} else failSyntaxTree;
																		} else failSyntaxTree;
																	} else failSyntaxTree;
																} else failSyntaxTree;
															} else failSyntaxTree;
														} else failSyntaxTree;
													} else failSyntaxTree;
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						}
						if (r5 != failSyntaxTree) r5
						else {
							acc.i ::= i;
							r6 = {
								if (strRangeIndexOf(acc.input, "require", acc.i, acc.i + 7) == acc.i) {
									acc.i ::= acc.i + 7;
									c1 = do_parse_flow_letterOrDigit_(acc);
									if (c1.choice == -1) {
										c2 = do_parse_flow_ws(acc);
										if (c2.choice != -1) {
											if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
												acc.i ::= acc.i + 1;
												c4 = do_parse_flow_ws(acc);
												if (c4.choice != -1) {
													c5 = do_parse_flow_path(acc);
													if (c5.choice != -1) {
														c6 = do_parse_flow_ws(acc);
														if (c6.choice != -1) {
															if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
																acc.i ::= acc.i + 1;
																c8 = do_parse_flow_ws(acc);
																if (c8.choice != -1) {
																	c9 = do_parse_flow_exp(acc);
																	if (c9.choice != -1) {
																		c10 = do_parse_flow_ws(acc);
																		if (c10.choice != -1) {
																			SyntaxTree(st_keywords, 6, i, acc.i, [[c2], [c4], [c5], [c6], [c8], [c9], [c10]]);
																		} else failSyntaxTree;
																	} else failSyntaxTree;
																} else failSyntaxTree;
															} else failSyntaxTree;
														} else failSyntaxTree;
													} else failSyntaxTree;
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							}
							if (r6 != failSyntaxTree) r6
							else {
								acc.i ::= i;
								r7 = {
									if (strRangeIndexOf(acc.input, "unsafe", acc.i, acc.i + 6) == acc.i) {
										acc.i ::= acc.i + 6;
										c1 = do_parse_flow_letterOrDigit_(acc);
										if (c1.choice == -1) {
											c2 = do_parse_flow_ws(acc);
											if (c2.choice != -1) {
												if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
													acc.i ::= acc.i + 1;
													c4 = do_parse_flow_ws(acc);
													if (c4.choice != -1) {
														c5 = do_parse_flow_id(acc);
														if (c5.choice != -1) {
															c6 = do_parse_flow_ws(acc);
															if (c6.choice != -1) {
																if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
																	acc.i ::= acc.i + 1;
																	c8 = do_parse_flow_ws(acc);
																	if (c8.choice != -1) {
																		c9 = do_parse_flow_exp(acc);
																		if (c9.choice != -1) {
																			if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
																				acc.i ::= acc.i + 1;
																				c11 = do_parse_flow_ws(acc);
																				if (c11.choice != -1) {
																					SyntaxTree(st_keywords, 7, i, acc.i, [[c2], [c4], [c5], [c6], [c8], [c9], [c11]]);
																				} else failSyntaxTree;
																			} else failSyntaxTree;
																		} else failSyntaxTree;
																	} else failSyntaxTree;
																} else failSyntaxTree;
															} else failSyntaxTree;
														} else failSyntaxTree;
													} else failSyntaxTree;
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								}
								if (r7 != failSyntaxTree) r7
								else {
									SyntaxTree(st_Expected_keywords, -1, i, i, [])
								}

							}

						}

					}

				}

			}

		}

	}

}

do_parse_flow_totype(acc : SyntaxParseAcc) -> SyntaxTree {
	c0 = do_parse_flow_type(acc);
	if (c0.choice != -1) {
		c0
	} else c0
}

do_parse_flow_switch(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (strRangeIndexOf(acc.input, "switch", acc.i, acc.i + 6) == acc.i) {
		acc.i ::= acc.i + 6;
		c1 = do_parse_flow_letterOrDigit_(acc);
		if (c1.choice == -1) {
			c2 = do_parse_flow_ws(acc);
			if (c2.choice != -1) {
				if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
					acc.i ::= acc.i + 1;
					c4 = do_parse_flow_ws(acc);
					if (c4.choice != -1) {
						c5 = do_parse_flow_exp2(acc);
						if (c5.choice != -1) {
							i6 = acc.i;
							t6 = do_parse_flow_switchType(acc);
							c6 = if (t6.choice == -1) {acc.i ::= i6; [] } else [t6];
							if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
								acc.i ::= acc.i + 1;
								c8 = do_parse_flow_ws(acc);
								if (c8.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 123 /* { */) {
										acc.i ::= acc.i + 1;
										c10 = do_parse_flow_ws(acc);
										if (c10.choice != -1) {
											c11 = SyntaxStar(acc, do_parse_flow_defaultOrNamedCase);
											if (getCharCodeAt(acc.input, acc.i) == 125 /* } */) {
												acc.i ::= acc.i + 1;
												c13 = do_parse_flow_ws(acc);
												if (c13.choice != -1) {
													SyntaxTree(st_switch, 0, i, acc.i, [[c2], [c4], [c5], c6, [c8], [c10], c11, [c13]]);
												} else c13
											} else {
												// "Expected '}'"
												updateExpectError(acc, "", "}", i);
												failSyntaxTree;
											}
										} else c10
									} else {
										// "Expected '{'"
										updateExpectError(acc, "", "{", i);
										failSyntaxTree;
									}
								} else c8
							} else {
								// "Expected ')'"
								updateExpectError(acc, "", ")", i);
								failSyntaxTree;
							}
						} else c5
					} else c4
				} else {
					// "Expected '('"
					updateExpectError(acc, "", "(", i);
					failSyntaxTree;
				}
			} else c2
		} else SyntaxTree(st_DidNotExpectflow_letterOrDigit_, -1, 1, acc.i, []);
	} else {
		// "Expected 'switch'"
		updateExpectError(acc, "", "switch", i);
		failSyntaxTree;
	}
}

do_parse_flow_switchType(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_type(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_switchType, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ':'"
		updateExpectError(acc, "", ":", i);
		failSyntaxTree;
	}
}

do_parse_flow_defaultOrNamedCase(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (strRangeIndexOf(acc.input, "default", acc.i, acc.i + 7) == acc.i) {
			acc.i ::= acc.i + 7;
			c1 = do_parse_flow_letterOrDigit_(acc);
			if (c1.choice == -1) {
				c2 = do_parse_flow_ws(acc);
				if (c2.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
						acc.i ::= acc.i + 1;
						c4 = do_parse_flow_ws(acc);
						if (c4.choice != -1) {
							c5 = do_parse_flow_exp(acc);
							if (c5.choice != -1) {
								if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
									acc.i ::= acc.i + 1;
								}
								c7 = do_parse_flow_ws(acc);
								if (c7.choice != -1) {
									SyntaxTree(st_defaultOrNamedCase, 0, i, acc.i, [[c2], [c4], [c5], [c7]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_id(acc);
			if (c0.choice != -1) {
				c1 = do_parse_flow_ws(acc);
				if (c1.choice != -1) {
					if (getCharCodeAt(acc.input, acc.i) == 40 /* ( */) {
						acc.i ::= acc.i + 1;
						c3 = do_parse_flow_ws(acc);
						if (c3.choice != -1) {
							i4 = acc.i;
							t4 = do_parse_flow_names(acc);
							c4 = if (t4.choice == -1) {acc.i ::= i4; [] } else [t4];
							if (getCharCodeAt(acc.input, acc.i) == 41 /* ) */) {
								acc.i ::= acc.i + 1;
								c6 = do_parse_flow_ws(acc);
								if (c6.choice != -1) {
									if (getCharCodeAt(acc.input, acc.i) == 58 /* : */) {
										acc.i ::= acc.i + 1;
										c8 = do_parse_flow_ws(acc);
										if (c8.choice != -1) {
											c9 = do_parse_flow_exp(acc);
											if (c9.choice != -1) {
												if (getCharCodeAt(acc.input, acc.i) == 59 /* ; */) {
													acc.i ::= acc.i + 1;
												}
												c11 = do_parse_flow_ws(acc);
												if (c11.choice != -1) {
													SyntaxTree(st_defaultOrNamedCase, 1, i, acc.i, [[c0], [c1], [c3], c4, [c6], [c8], [c9], [c11]]);
												} else failSyntaxTree;
											} else failSyntaxTree;
										} else failSyntaxTree;
									} else failSyntaxTree;
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_defaultOrNamedCase, -1, i, i, [])
		}

	}

}

do_parse_flow_names(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = SyntaxStar(acc, do_parse_flow_names_more);
			SyntaxTree(st_names, 0, i, acc.i, [[c0], [c1], c2]);
		} else c1
	} else c0
}

do_parse_flow_names_more(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 44 /* , */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			c2 = do_parse_flow_id(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_names_more, 0, i, acc.i, [[c1], [c2]]);
			} else c2
		} else c1
	} else {
		// "Expected ','"
		updateExpectError(acc, "", ",", i);
		failSyntaxTree;
	}
}

do_parse_flow_number(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 48 && getCharCodeAt(acc.input, acc.i + 1) == 120 /* 0x */) {
			acc.i ::= acc.i + 2;
			c1 = SyntaxPlus(acc, do_parse_flow_hexdigit_);
			if (length(c1) >= 1) {
				SyntaxTree(st_number, 0, i, acc.i, []);
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = do_parse_flow_number_float1(acc);
			if (c0.choice != -1) {
				c0
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				c0 = do_parse_flow_number_float2(acc);
				if (c0.choice != -1) {
					c0
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_flow_int(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_number, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_flow_number_float1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_int(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_number_float1, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '.'"
		updateExpectError(acc, "", ".", i);
		failSyntaxTree;
	}
}

do_parse_flow_number_float2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_int(acc);
	if (c0.choice != -1) {
		if (getCharCodeAt(acc.input, acc.i) == 46 /* . */) {
			acc.i ::= acc.i + 1;
			i2 = acc.i;
			t2 = do_parse_flow_int(acc);
			c2 = if (t2.choice == -1) {acc.i ::= i2; [] } else [t2];
			SyntaxTree(st_number_float2, 0, i, acc.i, [[c0], c2]);
		} else {
			// "Expected '.'"
			updateExpectError(acc, "", ".", i);
			failSyntaxTree;
		}
	} else c0
}

do_parse_flow_int(acc : SyntaxParseAcc) -> SyntaxTree {
	cache = (acc.caches)[1];
	ci = acc.i;
	cached = lookupTree(^cache, ci);
	switch (cached) {
		None(): {
			rs = {
				i = acc.i;
				c0 = SyntaxPlus(acc, do_parse_flow_digit_);
				if (length(c0) >= 1) {
					SyntaxTree(st_int, 0, i, acc.i, []);
				} else {
					// "Expected at least one digit_"
					updateExpectError(acc, "", "digit_", i);
					failSyntaxTree;
				}
			};
			cache := setTree(^cache, ci, rs);
			rs;
		}
		Some(st): {
			acc.i ::= st.end;
			st;
		}
	}
}

do_parse_flow_id(acc : SyntaxParseAcc) -> SyntaxTree {
	cache = (acc.caches)[2];
	ci = acc.i;
	cached = lookupTree(^cache, ci);
	switch (cached) {
		None(): {
			rs = {
				i = acc.i;
				c0 = do_parse_flow_letter_(acc);
				if (c0.choice != -1) {
					c1 = SyntaxStar(acc, do_parse_flow_letterOrDigit_);
					SyntaxTree(st_id, 0, i, acc.i, []);
				} else c0
			};
			cache := setTree(^cache, ci, rs);
			rs;
		}
		Some(st): {
			acc.i ::= st.end;
			st;
		}
	}
}

do_parse_flow_letterOrDigit_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 122}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_letterOrDigit_, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 90}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_letterOrDigit_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_letterOrDigit_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_letterOrDigit_, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_letterOrDigit_, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_flow_letter_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 122}) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_letter_, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 90}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_letter_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 95 /* _ */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_letter_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_letter_, -1, i, i, [])
			}

		}

	}

}

do_parse_flow_digit_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 48 <= c && c <= 57}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_digit_, 0, i, acc.i, []);
	} else {
		// "Expected '0'-'9'"
		updateExpectError(acc, "", "'0'-'9'", i);
		failSyntaxTree;
	}
}

do_parse_flow_hexdigit_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		c0 = do_parse_flow_digit_(acc);
		if (c0.choice != -1) {
			c0
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if ({c = getCharCodeAt(acc.input, acc.i); 97 <= c && c <= 102}) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_hexdigit_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if ({c = getCharCodeAt(acc.input, acc.i); 65 <= c && c <= 70}) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_hexdigit_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				SyntaxTree(st_Expected_hexdigit_, -1, i, i, [])
			}

		}

	}

}

do_parse_flow_onechar_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 92 && getCharCodeAt(acc.input, acc.i + 1) == 117 /* \u */) {
			acc.i ::= acc.i + 2;
			c1 = do_parse_flow_hexdigit_(acc);
			if (c1.choice != -1) {
				c2 = do_parse_flow_hexdigit_(acc);
				if (c2.choice != -1) {
					c3 = do_parse_flow_hexdigit_(acc);
					if (c3.choice != -1) {
						c4 = do_parse_flow_hexdigit_(acc);
						if (c4.choice != -1) {
							SyntaxTree(st_onechar_, 0, i, acc.i, []);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 92 && getCharCodeAt(acc.input, acc.i + 1) == 88 /* \X */) {
				acc.i ::= acc.i + 2;
				c1 = do_parse_flow_hexdigit_(acc);
				if (c1.choice != -1) {
					c2 = do_parse_flow_hexdigit_(acc);
					if (c2.choice != -1) {
						c3 = do_parse_flow_hexdigit_(acc);
						if (c3.choice != -1) {
							c4 = do_parse_flow_hexdigit_(acc);
							if (c4.choice != -1) {
								SyntaxTree(st_onechar_, 1, i, acc.i, []);
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 92 && getCharCodeAt(acc.input, acc.i + 1) == 120 /* \x */) {
					acc.i ::= acc.i + 2;
					c1 = do_parse_flow_hexdigit_(acc);
					if (c1.choice != -1) {
						c2 = do_parse_flow_hexdigit_(acc);
						if (c2.choice != -1) {
							SyntaxTree(st_onechar_, 2, i, acc.i, []);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
						acc.i ::= acc.i + 1;
						c1 = do_parse_flow_escapedchar_(acc);
						if (c1.choice != -1) {
							SyntaxTree(st_onechar_, 3, i, acc.i, []);
						} else failSyntaxTree;
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
							failSyntaxTree
						} else {
							if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
								failSyntaxTree
							} else {
								c2 = do_parse_flow_char_(acc);
								if (c2.choice != -1) {
									SyntaxTree(st_onechar_, 4, i, acc.i, []);
								} else failSyntaxTree;
							}
						}
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_onechar_, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_flow_escapedchar_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 92 /* \ */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_escapedchar_, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_escapedchar_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 110 /* n */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_escapedchar_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 116 /* t */) {
						acc.i ::= acc.i + 1;
						SyntaxTree(st_escapedchar_, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 114 /* r */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_escapedchar_, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_escapedchar_, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_flow_char_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if ({c = getCharCodeAt(acc.input, acc.i); 0 <= c && c <= 65535}) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_char_, 0, i, acc.i, []);
	} else {
		// "Expected ' '-'ï¿¿'"
		updateExpectError(acc, "", "' '-'ï¿¿'", i);
		failSyntaxTree;
	}
}

do_parse_flow_string(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
			acc.i ::= acc.i + 1;
			if (strRangeIndexOf(acc.input, "#inc", acc.i, acc.i + 4) == acc.i) {
				acc.i ::= acc.i + 4;
				if (strRangeIndexOf(acc.input, "lude", acc.i, acc.i + 4) == acc.i) {
					acc.i ::= acc.i + 4;
					c3 = do_parse_flow_s(acc);
					if (c3.choice != -1) {
						c4 = do_parse_flow_stringinclude(acc);
						if (c4.choice != -1) {
							if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
								acc.i ::= acc.i + 1;
								c6 = do_parse_flow_ws(acc);
								if (c6.choice != -1) {
									SyntaxTree(st_string, 0, i, acc.i, [[c3], [c4], [c6]]);
								} else failSyntaxTree;
							} else failSyntaxTree;
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			c0 = SyntaxPlus(acc, do_parse_flow_singlestring);
			if (length(c0) >= 1) {
				SyntaxTree(st_string, 1, i, acc.i, [c0]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_string, -1, i, i, [])
		}

	}

}

do_parse_flow_stringinclude(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_flow_nonspace_);
	if (length(c0) >= 1) {
		SyntaxTree(st_stringinclude, 0, i, acc.i, []);
	} else {
		// "Expected at least one nonspace_"
		updateExpectError(acc, "", "nonspace_", i);
		failSyntaxTree;
	}
}

do_parse_flow_path(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_id(acc);
	if (c0.choice != -1) {
		c1 = SyntaxStar(acc, do_parse_flow_path_more);
		SyntaxTree(st_path, 0, i, acc.i, [[c0], c1]);
	} else c0
}

do_parse_flow_path_more(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_id(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_path_more, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '/'"
		updateExpectError(acc, "", "/", i);
		failSyntaxTree;
	}
}

do_parse_flow_singlestring(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
		acc.i ::= acc.i + 1;
		c1 = SyntaxStar(acc, do_parse_flow_onechar_);
		if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
			acc.i ::= acc.i + 1;
			c3 = do_parse_flow_ws(acc);
			if (c3.choice != -1) {
				SyntaxTree(st_singlestring, 0, i, acc.i, [[c3]]);
			} else c3
		} else {
			// "Expected '\"'"
			updateExpectError(acc, "", "\"", i);
			failSyntaxTree;
		}
	} else {
		// "Expected '\"'"
		updateExpectError(acc, "", "\"", i);
		failSyntaxTree;
	}
}

do_parse_flow_ws(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_flow_whitespace_);
	SyntaxTree(st_ws, 0, i, acc.i, []);
}

do_parse_flow_s(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxPlus(acc, do_parse_flow_whitespace_);
	if (length(c0) >= 1) {
		SyntaxTree(st_s, 0, i, acc.i, []);
	} else {
		// "Expected at least one whitespace_"
		updateExpectError(acc, "", "whitespace_", i);
		failSyntaxTree;
	}
}

do_parse_flow_nonspace_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_whitespace_(acc);
	if (c0.choice == -1) {
		if (getCharCodeAt(acc.input, acc.i) == 34 /* " */) {
			SyntaxTree(-34, -1, i, i, [])
		} else {
			c2 = do_parse_flow_char_(acc);
			if (c2.choice != -1) {
				SyntaxTree(st_nonspace_, 0, i, acc.i, []);
			} else c2
		}
	} else SyntaxTree(st_DidNotExpectflow_whitespace_, -1, 0, acc.i, []);
}

do_parse_flow_whitespace_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_whitespace_, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_whitespace_, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 10 /* 
				 */) {
					acc.i ::= acc.i + 1;
					SyntaxTree(st_whitespace_, 2, i, acc.i, []);
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					c0 = do_parse_flow_comment(acc);
					if (c0.choice != -1) {
						c0
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					acc.i ::= i;
					r4 = {
						if (getCharCodeAt(acc.input, acc.i) == 13 /*  */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_whitespace_, 4, i, acc.i, []);
						} else failSyntaxTree;
					}
					if (r4 != failSyntaxTree) r4
					else {
						SyntaxTree(st_Expected_whitespace_, -1, i, i, [])
					}

				}

			}

		}

	}

}

do_parse_flow_comment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
		acc.i ::= acc.i + 1;
		c1 = do_parse_flow_restOfComment(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_comment, 0, i, acc.i, [[c1]]);
		} else c1
	} else {
		// "Expected '/'"
		updateExpectError(acc, "", "/", i);
		failSyntaxTree;
	}
}

do_parse_flow_restOfComment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 42 /* * */) {
			acc.i ::= acc.i + 1;
			c1 = SyntaxStar(acc, do_parse_flow_nonstarchar_);
			if (c1 != []) {
				if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
					acc.i ::= acc.i + 2;
					i3 = acc.i;
					t3 = do_parse_flow_restOfComment2(acc);
					c3 = if (t3.choice == -1) {acc.i ::= i3; [] } else [t3];
					SyntaxTree(st_restOfComment, 0, i, acc.i, [c3]);
				} else failSyntaxTree;
			} else failSyntaxTree;
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (strRangeIndexOf(acc.input, "**/", acc.i, acc.i + 3) == acc.i) {
				acc.i ::= acc.i + 3;
				i1 = acc.i;
				t1 = do_parse_flow_restOfComment2(acc);
				c1 = if (t1.choice == -1) {acc.i ::= i1; [] } else [t1];
				SyntaxTree(st_restOfComment, 1, i, acc.i, [c1]);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			acc.i ::= i;
			r2 = {
				if (getCharCodeAt(acc.input, acc.i) == 47 /* / */) {
					acc.i ::= acc.i + 1;
					c1 = SyntaxStar(acc, do_parse_flow_nonlinebreakchar_);
					if (c1 != []) {
						if (getCharCodeAt(acc.input, acc.i) == 10 /* 
						 */) {
							acc.i ::= acc.i + 1;
							SyntaxTree(st_restOfComment, 2, i, acc.i, []);
						} else failSyntaxTree;
					} else failSyntaxTree;
				} else failSyntaxTree;
			}
			if (r2 != failSyntaxTree) r2
			else {
				acc.i ::= i;
				r3 = {
					if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 10 /* /
					 */) {
						acc.i ::= acc.i + 2;
						SyntaxTree(st_restOfComment, 3, i, acc.i, []);
					} else failSyntaxTree;
				}
				if (r3 != failSyntaxTree) r3
				else {
					SyntaxTree(st_Expected_restOfComment, -1, i, i, [])
				}

			}

		}

	}

}

do_parse_flow_restOfComment2(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = SyntaxStar(acc, do_parse_flow_restOfComment1);
	if (getCharCodeAt(acc.input, acc.i) == 10 /* 
	 */) {
		acc.i ::= acc.i + 1;
		SyntaxTree(st_restOfComment2, 0, i, acc.i, [c0]);
	} else {
		// "Expected '\n'"
		updateExpectError(acc, "", "\n", i);
		failSyntaxTree;
	}
}

do_parse_flow_restOfComment1(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	acc.i ::= i;
	r0 = {
		if (getCharCodeAt(acc.input, acc.i) == 32 /*   */) {
			acc.i ::= acc.i + 1;
			SyntaxTree(st_restOfComment1, 0, i, acc.i, []);
		} else failSyntaxTree;
	}
	if (r0 != failSyntaxTree) r0
	else {
		acc.i ::= i;
		r1 = {
			if (getCharCodeAt(acc.input, acc.i) == 9 /* 	 */) {
				acc.i ::= acc.i + 1;
				SyntaxTree(st_restOfComment1, 1, i, acc.i, []);
			} else failSyntaxTree;
		}
		if (r1 != failSyntaxTree) r1
		else {
			SyntaxTree(st_Expected_restOfComment1, -1, i, i, [])
		}

	}

}

do_parse_flow_nonstarchar_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 42 && getCharCodeAt(acc.input, acc.i + 1) == 47/* * / */) {
		SyntaxTree(-42, -1, i, i, [])
	} else {
		c1 = do_parse_flow_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_nonstarchar_, 0, i, acc.i, []);
		} else c1
	}
}

do_parse_flow_nonlinebreakchar_(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 10 /* 
	 */) {
		SyntaxTree(-10, -1, i, i, [])
	} else {
		c1 = do_parse_flow_char_(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_nonlinebreakchar_, 0, i, acc.i, []);
		} else c1
	}
}

do_parse_flow_lastLineComment(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	if (getCharCodeAt(acc.input, acc.i) == 47 && getCharCodeAt(acc.input, acc.i + 1) == 47 /* // */) {
		acc.i ::= acc.i + 2;
		c1 = SyntaxStar(acc, do_parse_flow_nonlinebreakchar_);
		SyntaxTree(st_lastLineComment, 0, i, acc.i, []);
	} else {
		// "Expected '//'"
		updateExpectError(acc, "", "//", i);
		failSyntaxTree;
	}
}

do_parse_flow_fields__auto119(acc : SyntaxParseAcc) -> SyntaxTree {
	i = acc.i;
	c0 = do_parse_flow_trailingComma(acc);
	if (c0.choice != -1) {
		c1 = do_parse_flow_ws(acc);
		if (c1.choice != -1) {
			SyntaxTree(st_fields__auto119, 0, i, acc.i, [[c0], [c1]]);
		} else c1
	} else c0
}

