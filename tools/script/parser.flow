import tools/flowc/flowc_module;
import tools/flowc/preload_modules;
import tools/common/compilerconfig;
import tools/flowc/flowc_typecheck;


export {
	// This constructs an empty type environment
	makeEmptyFcTypeEnv() -> FcTypeEnv;

	// Loads and parses a given file. No typechecking, no incremental
	parseFcModule(env : FcTypeEnv, file : string) -> FcModule;

	// Load and parse the given .flow file, and all imports. No typechecking
	loadFiModules(env : FcTypeEnv, file : string, onError : (string) -> void) -> Tree<string, FiModule>;

	// Loads and parses the given .flow file, and all imports, with type checking
	loadFiProgram(env : FcTypeEnv, file : string) -> FiProgram;
}

makeEmptyFcTypeEnv() -> FcTypeEnv {
	config0 = makeCompilerConfig();
	config = CompilerConfig(config0 with config = setTree(config0.config, "untyped", "1"));
	factory = makeIdFactory(100, 0);
	acc = FlowcAcc(
			makeDependencyTracker(), makeTree(), makeTree(), makeTree(),
			[], dummyFcGlobalNames, config, factory, makeIdGroup(factory),
			makeTracer()
		);

	FcTypeEnv(
		FcTypeEnvGlobal(ref makeTree()),
		FcTypeEnvProgram(acc, makeTree(), \error : FcError -> {
			// OK, we ignore that we can not get type info
			//if (!strContains(error.message, "Expression typing failed")) {
				printFcError(acc, error)
			//}
		}, ref 0, ref makeTree(), emptyGSubtypeGraph()),
		FcTypeEnvLocal(
			// Requirements for types.
			ref makeList(),
			// Final checks after type checking
			ref makeList(),
			// The resolved type of tyvars
			ref makeTree(),
			// The current type of type parameters
			ref makeTree(),
			// varinfo
			makeTree(),
			// Which expectations are collected during debug?
			ref makeSet(),
			// Are we debug typing?
			ref 0,
			// Indentation for debug
			ref "",
		)
	);
}

makeCompilerConfig() -> CompilerConfig {
	config1 = getCompilerConfig();
	switch (config1) {
		Failed(m): {
			println(m);
			quit(1);
			flow(0); // This will crash, but so what
		}
		Some(c): c;
	} 
}


parseFcModule(env : FcTypeEnv, file : string) -> FcModule {
	config = env.program.acc.config;
	fileinfo = getFcFileInfo(file, config);
	stErr = parseFlowfile(config, fileinfo, "");
	st = stErr.first;
	errorM = stErr.second;
	errorM ?? printFcError(env.program.acc, errorM) : {};
	desugarFcModule(env.program.acc, env.local, fileinfo, st);
}

loadFiModules(env : FcTypeEnv, file : string, onError : (string) -> void) -> Tree<string, FiModule> {
	modules = preloadModules(env.program.acc.config, env.global, file, \error : FcError -> {
		printFcError(env.program.acc, error)
	});

	mapTree(modules, \preloaded : FcPreloadedModule -> {
		switch (preloaded) {
			FcParsed(__, __, __, __, __): {
				parsed : FcParsed = preloaded;
				fcm = desugarFcModule(env.program.acc, env.local, preloaded.fileinfo, parsed.syntaxtree);

				fcmodule2fi(env, fcm);
			}
			FcLoaded(modul, __): modul;
		}
	});
}


loadFiProgram(env : FcTypeEnv, file : string) -> FiProgram {
	config = env.program.acc.config;
	parseAndTypecheckFlowFile(setConfigFlowfile(config, file), env.global, file).first;
}


