/*
	exp_* is expression
	id_* is identifier
	Type_* is type
*/
Rewrite(f : flow, to : string);

rewrites = [
	Rewrite(\ -> {}, "nop"),
	Rewrite(if (exp_c) true else false, "%exp_c%"),
	Rewrite(if (exp_c) false else true, "!%exp_c%"),
	Rewrite(
		switch (id_m : Type_1) {
			None(): exp_none;
			Some(id_v): exp_some;
		},
		"%id_m% ?? { 
			%id_v% = %id1_m%; 
			%exp_some% 
		} : %exp_none%"
	),
	Rewrite(
		MBorder(exp_b, exp_b, exp_b, exp_b, exp_m), "MBorder4(%exp_b%, %exp_m%)"
	),
];

/*
	either(<var>, a)			 	-> <var> ?? <var> : a
	eitherMap(<var>, fn, a) 		-> <var> ?? fn(<var>) : a
	eitherFn(<var>, fn, afn)		-> <var> ?? fn(<var>) : afn()
	maybeBind(<var>, f) 			-> <var> ?? f(<var>) : None()
	maybeMap(<var>, f)				-> <var> ?? Some(f(<var>)) : None()
	maybeApply(<var>, f)			-> <var> ?? f(<var>) : {}

	maybeBind(<exp1>, \<id> -> <exp2>) 				-> <id> = <exp1>; <id> ?? <exp2> : None()
	eitherFn(<exp1>, \<id> -> <exp2>, <exp3>) 		-> <id> = <exp1>; <id> ?? <exp2> : <exp3>()
	eitherFn(<exp1>, \<id> -> <exp2>, \ -> <exp3>) 	-> <id> = <exp1>; <id> ?? <exp2> : <exp3>
*/
