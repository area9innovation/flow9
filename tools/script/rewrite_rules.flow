/*
	exp_* is expression
	id_* is identifier
	Type_* is type
*/
Rewrite(f : flow, to : string);

rewrites = [
	Rewrite(\ -> {}, "nop"),
	Rewrite(if (exp_c) true else false, "%exp_c%"),
	Rewrite(if (exp_c1 == expc2) false else true, "%exp_c1% != %exp_c2%"),
	Rewrite(if (exp_c) false else true, "!%exp_c%"),
	Rewrite(!(exp_l == exp_r), "%exp_l% != %exp_r%"),
	Rewrite(!(exp_l != exp_r), "%exp_l% == %exp_r%"),
	Rewrite(
		MBorder(exp_b, exp_b, exp_b, exp_b, exp_m), "MBorder4(%exp_b%, %exp_m%)"
	),
	// Functions are first class - TODO: If the fn is Some or some other struct, it does not work
	// We could check that the id is lower-case using some convention...
	Rewrite(\id_a1 -> id_fn(id_a1), "%id_fn%"),
	Rewrite(\id_a1, id_a2 -> id_fn(id_a1, id_a2), "%id_fn%"),
	Rewrite(\id_a1, id_a2, id_a3 -> id_fn(id_a1, id_a2, id_a3), "%id_fn%"),

	// Move fn out of if, unless it is _
	Rewrite(
		if (exp_c) _(exp_t) else _(exp_e),
		"if (%exp_c%) _(%exp_t%) else _(%exp_e%)"
	),
	Rewrite(
		if (exp_c) id_fn(exp_t) else id_fn(exp_e),
		"%id_fn%(if (%exp_c%) %exp_t% else %exp_e%)"
	),

	Rewrite(filtermap(exp_arr, \id_v -> if (exp_cond) Some(id_v) else None()), "filter(%exp_arr%, \\%id_v% -> %exp_cond%)"),

/*
	|>
	// fold(items, "", \acc, item -> acc + item2string(item));

	\ -> subscribe(smth1, doSmth1) ->  makeSubscribe

	fold(<exp>, [], \acc, <id1> -> {
		if (<c>) {
			arrayPush(acc, <e2>);
		} else acc;
	});
	-> filtermap(<exp>, \<id1> -> if (<c>) Some(<e2>) else None())
*/
	/*
	Rewrite(
		switch (id_m : Type_1) {
			None(): exp_none;
			Some(__): exp_some;
		},
		"%id_m% ?? %exp_some% : %exp_none%"
	),
	Rewrite(
		switch (id_m : Type_1) {
			Some(__): exp_some;
			None(): exp_none;
		},
		"%id_m% ?? %exp_some% : %exp_none%"
	),
	Rewrite(
		switch (id_m : Type_1) {
			None(): exp_none;
			Some(id_v): exp_some;
		},
		"%id_m% ?? { %id_v% = %id_m%; %exp_some% } : %exp_none%"
	),
	Rewrite(
		switch (id_m : Type_1) {
			Some(id_v): exp_some;
			None(): exp_none;
		},
		"%id_m% ?? { %id_v% = %id_m%; %exp_some% } : %exp_none%"
	),
	Rewrite(
		eitherFn(id_m, exp_fn, exp_afn),
		"%id_m% ?? %exp_fn%(%id_m%) : %exp_afn%()"
	),
	Rewrite(
		eitherFn(exp_m, idfn, \ -> exp_afn),
		"maybeM = %exp_m%; maybeM ?? maybeM : %exp_afn%"
	),
	*/
];

/*
	either(<var>, a)			 	-> <var> ?? <var> : a
	eitherMap(<var>, fn, a) 		-> <var> ?? fn(<var>) : a
	eitherFn(<var>, fn, afn)		-> <var> ?? fn(<var>) : afn()
	maybeBind(<var>, f) 			-> <var> ?? f(<var>) : None()
	maybeMap(<var>, f)				-> <var> ?? Some(f(<var>)) : None()
	maybeApply(<var>, f)			-> <var> ?? f(<var>) : {}

	maybeBind(<exp1>, \<id> -> <exp2>) 				-> <id> = <exp1>; <id> ?? <exp2> : None()
	eitherFn(<exp1>, \<id> -> <exp2>, <exp3>) 		-> <id> = <exp1>; <id> ?? <exp2> : <exp3>()
	eitherFn(<exp1>, \<id> -> <exp2>, \ -> <exp3>) 	-> <id> = <exp1>; <id> ?? <exp2> : <exp3>
*/
