import material/material;

// Default arguments and short names
cols = MCols([]);
lines = MLines([]);
input = MTextInput(make(""), [], []);
button = MTextButton("BUTTON", nop, [], []);
dropdown = MDropDown(make(-1), "Pick", [], []);

// We can lift strings to MText
convert_text(t : string) -> MText { MText(t, []) }

// Implicit construction of behaviours
convert_b0(t : bool) -> DynamicBehaviour<bool> { make(t); }
convert_b1(t : int) -> DynamicBehaviour<int> { make(t); }
convert_b2(t : double) -> DynamicBehaviour<double> { make(t); }
convert_b3(t : string) -> DynamicBehaviour<string> { make(t); }

// Implicit extraction of behaviours
convert_v0(t : Transform<bool>) -> bool { fgetValue(t) }
convert_v1(t : Transform<int>) -> int { fgetValue(t) }
convert_v2(t : Transform<double>) -> double { fgetValue(t) }
convert_v3(t : Transform<string>) -> string { fgetValue(t) }

// Implicit construction of arrays
convert_a1(t : ?) -> [?] { [t] }
convert_a2(t1 : ?, t2 : ?) -> [?] { [t1, t2] }
convert_a3(t1 : ?, t2 : ?, t3 : ?) -> [?] { [t1, t2, t3] }
convert_a4(t1 : ?, t2 : ?, t3 : ?, t4 : ?) -> [?] { [t1, t2, t3, t4] }
convert_a5(t1 : ?, t2 : ?, t3 : ?, t4 : ?, t5 : ?) -> [?] { [t1, t2, t3, t4, t5] }
