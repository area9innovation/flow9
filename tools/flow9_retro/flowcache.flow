import tools/flow9/lookup;
import string_utils;
import lingo/linecolumn;

export {
	// Constructs a compilation cache
	makeFlowCache(
		// How to report an error
		onError : (string) -> void,
		// The includes we should use to find files
		includes : [string]
	) -> FlowCache;

	// Once a module has been typed, we clear the name cache
	clearFlowCache(cache : FlowCache) -> void;

	makeOnError(file : string, onError : (string) -> void) -> (int, string) -> void;
}

FlowCache(
	// How to report an error
	onError : (string) -> void,
	// The include paths we should use to find files
	includes : [string], 
	// Map of the Modules we have already parsed and desugared
	modules : BModules,
	// Helpers to look up things in imports
	structLookup : BLookupFromImport<DStruct>,
	unionLookup : BLookupFromImport<DUnion>,
	fieldLookup : BLookupFromImport<[string]>,
	unionFieldLookup : BLookupFromImport<[string]>,
	superTypeLookup : BLookupFromImport<[string]>,
	subTypeLookup : BLookupFromImport<[string]>,
	globalLookup : BLookupFromImport<BGlobal>,
	nativeLookup : BLookupFromImport<BNative>,
	// Global lookups
	globalStructs : ref Tree<string, DStruct>,
	globalUnions : ref Tree<string, DUnion>,
	// Transitive map of subtypes for this type
	globalSubtypes : ref Tree<string, [string]>,
	// Transitive map of super types for this type
	globalSupertypes : ref Tree<string, [string]>,
	// What is the next id
	nextId : ref int,
	// Awaiting modules that are being parsed
	awaiting : ref Set<string>,
	// Tracing helper
	tracing : Tracing,
	// How many errors have we reported?
	errorCount : ref int,
);

makeFlowCache(
	// How to report an error
	onError1 : (string) -> void,
	// The includes we should use to find files
	includes : [string]
) -> FlowCache {
	errorCount = ref 0;
	onError = \e -> {
		errorCount := ^errorCount + 1;
		onError1(e);
	};
	globalStructs = ref makeTree();
	globalUnions = ref makeTree();

	// A helper to lookup structs.
	structLookup = BLookupFromImport("struct", \module, n -> {
			lookupTree(module.structs, n)
		}, \module, n -> {
			containsSet(module.exported.exportedTypes, n)
			|| containsSet(module.exported.exportedTypeNames, n)
		},
		\spath, struct, error -> {
			makeOnError(spath, onError)(struct.pos, error)
		},
		ref makeTree()
	);

	// A helper to lookup unions.
	unionLookup = BLookupFromImport("union", \module, n -> {
			lookupTree(module.unions, n)
		}, 
		\module, n -> {
			containsSet(module.exported.exportedTypes, n)
			|| containsSet(module.exported.exportedTypeNames, n)
		},
		\upath, struct, error -> {
			makeOnError(upath, onError)(struct.pos, error)
		},
		ref makeTree()
	);

	globalLookup = BLookupFromImport("global", \module, n -> {
			lookupTree(module.globals, n);
		},
		\module, n -> {
			containsSet(module.exported.exportedGlobals, n)
		},
		\upath, gl, error -> {
			makeOnError(upath, onError)(gl.pos, error)
		},
		ref makeTree()
	);
	nativeLookup = BLookupFromImport("native", \module, n -> {
			lookupTree(module.natives, n);
		},
		\module, n -> {
			containsSet(module.exported.exportedGlobals, n);
		},
		\upath, nat, error -> {
			makeOnError(upath, onError)(nat.pos, error)
		},
		ref makeTree()
	);
	fieldLookup = BLookupFromImport("field", \module, n -> {
			lookupTree(module.fields, n);
		}, \module, n -> {
			structs = getTreeArrayValue(module.fields, n);
			// TODO: Maybe this is too much. We should probably just restrict
			// to those that are exported
			forall(structs, \s -> {
				containsSet(module.exported.exportedTypes, s)
			})
		}, \upath, n, error -> {
			println("TODO: What about the position of this field? " + toString(n));
			makeOnError(upath, onError)(0, error)
		}, ref makeTree()
	);
	unionFieldLookup = BLookupFromImport("union-field", \module, n -> {
			unionFields = makeDUnionFields(module.unions, module.structs, \st -> {
				lookupTree(^globalStructs, st)
			}, \un -> {
				lookupTree(^globalUnions, un)
			});
			unions = lookupTreeDef(unionFields, n, makeSet());
			if (isEmptySet(unions)) None()
			else Some(set2array(unions))
		}, \module, n -> {
			// TODO: I guess we could refine this
			true;
		}, \upath, n, error -> {
			println("TODO: What about the position of this field? " + toString(n));
			makeOnError(upath, onError)(0, error)
		}, ref makeTree()
	);

	superTypeLookup = BLookupFromImport("supertype", \module, n -> {
			supers = makeDSupers(module.unions);
			Some(getTreeArrayValue(supers, n));
		}, \module, n -> {
			true;
		}, \upath, nat, error -> {
			println("TODO: What about the position of this field? " + toString(nat));
			makeOnError(upath, onError)(0, error)
		}, ref makeTree()
	);

	subTypeLookup = BLookupFromImport("subtype", \module, n -> {
			subs = makeDSubtypes(module.unions);
			Some(getTreeArrayValue(subs, n));
		}, \module, n -> {
			true;
		}, \upath, nat, error -> {
			println("TODO: What about the position of this field? " + toString(nat));
			makeOnError(upath, onError)(0, error)
		}, ref makeTree()
	);

	FlowCache(
		onError, includes, makeBModules(), 
		structLookup, unionLookup, fieldLookup, 
		unionFieldLookup, superTypeLookup, subTypeLookup,
		globalLookup, nativeLookup,
		// Global lookups
		globalStructs, globalUnions, ref makeTree(), ref makeTree(),
		ref 0, ref makeSet(), makeTracing(), errorCount
	);
}

clearFlowCache(cache : FlowCache) -> void {
	cache.structLookup.cache := makeTree();
	cache.unionLookup.cache := makeTree();
	cache.fieldLookup.cache := makeTree();
	cache.unionFieldLookup.cache := makeTree();
	cache.superTypeLookup.cache := makeTree();
	cache.subTypeLookup.cache := makeTree();
	cache.globalLookup.cache := makeTree();
	cache.nativeLookup.cache := makeTree();
}

makeOnError(file : string, onError : (string) -> void) -> (int, string) -> void {
	resolver = ref None();
	\pos, error -> {
		if (pos == -1 || pos == 0) {
			onError(
				file + ":" + error
			);
		} else {
			res = onlyOnce(resolver, \ -> {
				text = getFileContent(file);
				makeLineResolver(text);
			});
			linecol = findLine(res, pos); // maxi

			indentation = strLeft(linecol.line, linecol.lineIndex - 1);
			spaced = stringFoldChar(indentation, "", \acc, s -> {
				acc + if (s == "\t") s else " ";
			});

			onError(
				file + ":" + i2s(linecol.lineno) + ":" + i2s(linecol.column) + ": " + error
				+ "\n" + linecol.line
				+ "\n" + spaced + "^"
			);
		}
	}
}

