import sys/system;
import sys/target;
import promise;
import sys/concurrent;

main() {
	t = timestamp();

	testPath = "../tests/refcnt/";
	tests = [
		Pair("refcnt1", "foo\r\n"),
		Pair("refcnt2", "[foo,]\r\n"),
		// TODO
		Pair("refcnt30", ""),
		//Pair("refcnt27", ""),
	];

	doneP(
		parallelP(map(tests, unpairC(\fileName, expectedResult -> 
			Promise(\fulfill, __ -> execFlow9Test(testPath, fileName, expectedResult, \-> fulfill(0)))
		))),
		\__ -> {
			println("TOTAL: passed " + i2s(^passedCnt) + ", failed " + i2s(^failedCnt));
			println("Time : " + d2s((timestamp() - t) / 1000.) + " s");
			quit(0)
		},
		\__ -> quit(1)
	);
}

execFlow9Test(testPath : string, testName : string, expectedResult : string, onDone : () -> void) -> void {
	onError = \e -> {
		println("Test failed '" + testName + "'' with error" + e);
		atomicRefIntAddition(failedCnt, 1);
		onDone();
	}

	assertTest = \result -> assertEqualFlow9Test(expectedResult, result, testName, onDone);

	actTest = \-> actFlow9Test(testName, assertTest, onError);
	
	arrangeFlow9Test(testPath + testName, actTest, onError);
}

arrangeFlow9Test(fileName : string, onDone : () -> void, onError : (string) -> void) -> void {
	if (windows()) {
		startProcess("cmpl_test.bat", [fileName], ".", "", \errorcode, stdout, stderr -> {
			if (errorcode == 0) {
				onDone();
			} else {
				onError(i2s(errorcode) + " :\n" + stdout + "\n" + stderr);
			}
		});
	} else {
		onError("TODO : OS");
	}
}

actFlow9Test(fileName : string, onDone : (string) -> void, onError : (string) -> void) -> void {
	if (windows()) {
		startProcess(fileName + ".exe", [], ".", "", \errorcode, stdout, stderr -> {
			if (errorcode == 0) {
				onDone(stdout);
			} else {
				onError(i2s(errorcode) + " :\n" + stdout + "\n" + stderr);
			}
		});
	} else {
		onError("TODO : OS");
	}
}

assertEqualFlow9Test(expected : string, actual : string, testName : string, onDone : () -> void) -> void {
	if (expected == actual) {
		atomicRefIntAddition(passedCnt, 1);
		println("Test passed : " + testName);
		onDone();
	} else {
		atomicRefIntAddition(failedCnt, 1);
		println("Test failed : " + testName);
		println("   Expected : '" + expected + "'");
		println("   Actual   : '" + actual + "'");
		onDone();
	}
}

passedCnt = ref 0;
failedCnt = ref 0;