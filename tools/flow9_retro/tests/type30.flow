import behaviour;

/*
Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;
	DynamicBehaviour(value : ref ?);
	ConstBehaviour : (constv : ?);

make(value : ?) -> DynamicBehaviour<?> {
	DynamicBehaviour(ref value);
}

subscribe(b  : Behaviour<?>, fn : (?) -> void) -> () -> void {
	\ -> {}
}
*/

native i2d : (i : int) -> double = Native.i2d;

Timer(
	value : Behaviour<double>,
);

getTimeline(f : int) -> void {
	factor = make(1);

	// timelines won't work in neko...or work horribly wrong
	uns2 = subscribe(factor, \ff -> {
		ticker = Timer(make(1.0));

		b = subscribe(ticker.value, \t -> {
			a = t * i2d(ff);
		});
	});
}
