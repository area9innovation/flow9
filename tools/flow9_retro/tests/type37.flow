native length : ([?]) -> int = Native.length;
native subrange : (a : [?], index : int, length : int) -> [?] = Native.subrange;

Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

	XmlEvent ::= XmlTagEvent, XmlTextEvent, XmlEndEvent, XmlCommentEvent;

		XmlTagEvent ::= XmlEmptyElement, XmlElementStart, XmlElementEnd, XmlProcessingEvent;

		// Both start and end tag, with attributes "<something a=b ... />"
		XmlEmptyElement(tag : string, attributes : [XmlAttribute]);
		// XML attributes
		XmlAttribute(key : string, value : string);
		// Start tag with attributes "<something a=b ...>"
		XmlElementStart(tag : string, attributes : [XmlAttribute]);
		// The end tag "<something/>"
		XmlElementEnd(tag : string);
		// Text between tags (also "outside" elements)
		XmlTextEvent(text : string);
		// A <!-- comment -->
		XmlCommentEvent(comment : string);
		// <?xml attr=something ?>
		XmlProcessingEvent(tag : string, attributes : [XmlAttribute]);
		// The end of the parsing
		XmlEndEvent();

	XmlNode ::= XmlElement, XmlText;
		XmlElement(tag : string, attributes : [XmlAttribute], children : [XmlNode]);
		XmlText(text : string);

xmlElements(nodes : [XmlNode]) -> [XmlElement] {
	[];
}

getXmlElement(xmlroots: [XmlElement], tag: string) -> Maybe<XmlElement> {
	rl = length(xmlroots);
	if (rl == 1) {
		if (xmlroots[0].tag == tag)
			Some(xmlroots[0])
		else
			getXmlElement(xmlElements(xmlroots[0].children), tag)
	} else if (rl == 0) {
		None()
	} else {
		r0 = getXmlElement([xmlroots[0]], tag);
		if (r0 != None()) r0 else getXmlElement(subrange(xmlroots, 1, rl-1), tag);
	}
}
