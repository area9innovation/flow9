////////////////////
Z ::= Y, X;
	X : (x : double);
	Y : ();

native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;

uniqq(a : [?]) -> [?] {
	a
}

fn10(init : ?) -> [?] {
//	debugtyping;
	z : Z = X(11.0);

	transitiveImports = fold([1, 2], [init], \acc : [?], imp -> {
		hfdsgfdhdfhkljfklsdhjkljdklsgj = 
			switch(z) {
				X(x): x;
			    Y(): 3.0;
			};
		acc
	}) |> uniqq;
	transitiveImports
}

native println2 : io (?) -> void = Native.println; 
native quit : io (code : int) -> void = Native.quit;

main() -> void {
	println2("Test3...");
	arr = fn10(11);
	fold(arr, 0, \acc, v -> {println2(v); acc}); // 11
	quit(0);
}