native iter : ([?], (?)->void) -> void = Native.iter;
native println2 : io (flow) -> void = Native.println;

Test(left : flow, right : flow);
InnerStruct(name : FlowStruct);
FlowStruct(val : flow);
UnionStruct(val : U1);
U1 ::= U2;
U2 ::= FlowStruct;

SimpleStruct(val : string);
U3 ::= SimpleStruct;
SimpleStruct2(uv : U3);


Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);


main() -> void {
	val = FlowStruct(Test(1, Test(true, Test(1.1, FlowStruct("union22")))));
	valSome = Test(Some(1), Some("str"));

	u1 : U2 = FlowStruct("union21");
	u2 : U2 = FlowStruct("union22");
	v = InnerStruct(FlowStruct("first"));
	tests = [
		Test(1, 1),
		Test(2.1, 1.2),
		Test(false, true),
		Test("abc", "abc"),
		Test(InnerStruct(FlowStruct("first")), InnerStruct(FlowStruct("last"))),
		Test(u1, u2),
		Test(UnionStruct(u2), UnionStruct(u1)),
		Test(["a", "b"], ["c", "d"]),
	];
	println2("ARRAY");
	iter(tests, \t -> println2(t));
	println2("LEFT");
	iter(tests, \t -> println2(t.left));

	u3 : U3 = SimpleStruct("union21");
	u4 = SimpleStruct("union22");
	u5 = SimpleStruct2(u3);
	
}
