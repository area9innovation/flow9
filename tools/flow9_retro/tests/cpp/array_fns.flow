import ds/array;
import string;

//native println : io (?) -> void = Native.println;

testVal(v : int) -> bool {
	v% 2 == 0
}

addVal(str : string, val : int) -> string {
	str + " " + i2s(val);
}

changeVal(val : int) -> int {
	val * 20
}

ASt(arr : [?]);
mapToStruct(arr : [int]) -> ASt {
	fold(arr, ASt([]), \acc, v -> if (v % 2 == 0) ASt(arrayPush(acc.arr, v)) else acc);
}

main() {
	println(fold(enumFromTo(1, -1), "", \acc, v -> acc + " " + i2s(v))); // ""
	println(fold(enumFromTo(1, 1), "", \acc, v -> acc + " " + i2s(v))); // 1
	println(fold(enumFromTo(10, 20), "", \acc, v -> acc + " " + i2s(v))); // 10 11 12 13 14 15 16 17 18 19 20
	println(fold(enumFromTo(1, 3), "", addVal)); // 1 2 3

	arr1 = enumFromTo(1, 10);
	arr2 = map(arr1, \v -> v * 10);
	println("EnumFromTo");
	println(fold(arr1, "", \acc, v -> acc + "  " + i2s(v))); //  1  2  3  4  5  6  7  8  9  10
	println("Map");
	println(fold(arr2, "", \acc, v -> acc + " " + i2s(v))); // 10 20 30 40 50 60 70 80 90 100
	println("Map fn");
	println(fold(map(arr1, changeVal), "", \acc, v -> acc + " " + i2s(v))); // 20 40 60 80 100 120 140 160 180 200

	println("Filter");
	println(fold(filter(arr1, \v -> v% 2 == 0), "", \acc, v -> acc + " " + i2s(v))); // 2 4 6 8 10
	println("Filter fn");
	println(fold(filter(arr1, testVal), "", \acc, v -> acc + " " + i2s(v))); // 2 4 6 8 10

	println("Concat");
	println(fold(concat([-1, 0], arr1), "", addVal)); // -1 0 1 2 3 4 5 6 7 8 9 10

	println("Array -> Array");
	arr3 = mapToStruct([1, 2, 3, 4]);
	println(fold(arr3.arr, "", \acc, v -> acc + " " + i2s(v)));
}
