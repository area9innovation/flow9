import ds/tree;

Material ::= MButton, MDecoratedCounter;
MButton ::= MCounter, MAnyButton, MEmpty;

MCounter(count : int, btn : MButton);
MDecoratedCounter(intCounter : MCounter);
MEmpty();
MAnyButton(view : Material);

/*native isSameStructType : (value1 : ?, value2 : ??) -> bool = Native.isSameStructType;
native extractStruct : (a : [?], e : ??) -> ?? = Native.extractStruct;
native println2 : io (?) -> void = Native.println;*/

i2s(i) { cast(i : int -> string); }

main() {

	u1 = MCounter(1, MCounter(2, MEmpty()));
	s1 = extractStruct([u1], MCounter(0, MEmpty()));
	s2 : MCounter = extractStruct([s1.btn], MCounter(-1, MEmpty()));
	println2(i2s(s2.count)); // 2

	u2 = MAnyButton(MDecoratedCounter(MCounter(12, MAnyButton(MDecoratedCounter(MCounter(13, MEmpty()))))));
	switch (u2.view : Material) {
		MDecoratedCounter(counter): if (isSameStructType(counter.btn, MAnyButton(MEmpty()))) println2("MAnyButton") else println2("MButton");
		MButton(): println2("wrong");
	} // MAnyButton

	v = setTree(makeTree1(1, "1"), 2, "2");
	println2(lookupTreeDef(v, 2, "-")); // 2

	v2 = mapTree(v, \value -> value + "!");
	println2(lookupTreeDef(v2, 1, "?")); // 1!
}