
Maybe<?> ::= None, Some<?>;

None();
Some(value : ?);

either(m : Maybe<?>, def : ?) -> ? {
	switch (m) {
		None(): {
			// m : None<?>
			def;
		}
		Some(v): {
			// m : Some<?>
			m.value;
		}
	}
}
/*
maybeBind(m : Maybe<?>, f: (?)->Maybe<??>) -> Maybe<??> {
	switch (m : Maybe) {
		None(): None();
		Some(v): f(v);
	}
}
maybeMap(m : Maybe<?>, f: (?) -> ??) -> Maybe<??> {
	switch (m : Maybe) {
		None(): None();
		Some(v): Some(f(v));
	}
}

maybeMap2(f : (?, ??) -> ???) -> (m1 : Maybe<?>, m2 : Maybe<??>) -> Maybe<???> {
	\m1, m2 -> {
		maybeBind(m1,
			\v1 -> {
				maybeMap(m2,
					\v2 -> f(v1, v2)
				)
			}
		)
	}
}
*/