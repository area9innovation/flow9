import tools/flowe/bexp/pretty;
import tools/flowe/backends/bprogram;

export {
	prettyBProgram(b : BProgram) -> string;
	prettyBExpProgram(p : BExpProgram) -> string;
	prettyBExpDeclaration(b : BExpDeclaration) -> string;
}
prettyBProgram(p : BProgram) -> string {
	superglue(p.declarations, prettyBDeclaration, "\n");
}

prettyBExpProgram(p : BExpProgram) -> string {
	superglue(p.declarations, prettyBExpDeclaration, "\n");
}

prettyBExpDeclaration(b : BExpDeclaration) -> string {
	switch (b) {
		BExpFunction(name, args, body, type): {
			blueprint("
				%header% {
					%body%
				}
			", [
				"header", name + "(" + strGlue(args, ", ") + ") : " + prettyBType(type),
				"body", prettyBExp(body)
			])
		}
		BGlobalVar(name, body, type): {
			name + " : " + prettyBType(type) + " = " + prettyBExp(body);
		}
		BExpNative(name, isio, type, nativeName): {
			"native " + name + " : " + (if (isio) "io" else "") + prettyBType(type) + " = " + nativeName;
		}
	}
}


prettyBDeclaration(b : BDeclaration) -> string {
	switch (b) {
		BStatFunction(name, args, body, tc, type): {
			blueprint("
				%header% {
					%body%
				}
			", [
				"header", (if (tc) "tailcall " else "") + name + "(" + strGlue(args, ", ") + ") : " + prettyBType(type),
				"body", prettyBStatement(body)
			])
		}
		BGlobalVar(name, body, type): {
			name + " : " + prettyBType(type) + " = " + prettyBExp(body);
		}
		BExpNative(name, isio, type, nativeName): {
			"native " + name + " : " + (if (isio) "io" else "") + prettyBType(type) + " = " + nativeName;
		}
	}
}

prettyBStatement(b : BStatement) -> string {
	switch (b) {
		BIfStatement(cond, then, else_): {
			blueprint("
				if (%cond%) {
					%then%
				} else {
					%else%
				}", [
				"cond", prettyBExp(cond),
				"then", prettyBStatement(then),
				"else", prettyBStatement(else_),
			])
		}
		BLetStatement(name, value, body): {
			blueprint("
				%name% = %value%;
				%body%", [
					"name", name,
					"value", prettyBExp(value),
					"body", prettyBStatement(body),
			])
		}
		BReturnVoid(): "{}";
		BReturn(val): prettyBExp(val);
		BTailCall(fn, args, values, type): "tailcall " + fn + "(" + supergluei(args, \i, arg -> arg + ":" + prettyBExp(values[i]), ", ") + ")";
		BSequenceStatement(statements): {
			"{" + superglue(statements, \s -> prettyBStatement(s), ";\n") + "}";
		}
		BSwitchStatement(val, cases, type): {
			blueprint("
				switch (%val%) {
					%cases%
				} : %type%", [
					"val", prettyBExp(val),
					"cases", superglue(cases, \c -> {
						blueprint("
							%value%: {
								%body%
							}
							",
							["value", c.id,
							"body", prettyBStatement(c.body)
						])
					}, ""),
					"type", prettyBType(type),
			])
		}
		BSetMutableStatement(left, field, value): {
			blueprint("
				%left%.%field = %value%;", [
					"name", prettyBExp(left),
					"field", field,
					"value", prettyBExp(value),
			]);
		}
	}
}
