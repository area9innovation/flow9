import tools/flowe/backends/backend;
import text/blueprint;

export {
	zigBackend() -> Backend;
}

zigBackend() -> Backend {
	comparison = \name, target, prec -> {
		[
			BackGen(name, BTypeFunction([bTypeBool, bTypeBool], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bTypeInt, bTypeInt], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bTypeDouble, bTypeDouble], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bTypeString, bTypeString], bTypeBool), BackBinOp(target, prec, BackArg(0), BackArg(1))),
		]
	};

	makeBackend("zig", [
			// Keywords
			"align", "allowzero", "and", "anyframe", "anytype", "asm", "async", "await",
			"break", "callconv", "catch", "comptime", "const", "continue", "defer",
			"else", "enum", "errdefer", "error", "export", "extern", "false",
			"fn", "for", "if", "inline", "noalias", "noinline", "nosuspend",
			"null", "opaque", "or", "orelse", "packed", "pub", "resume",
			"return", "linksection", "struct", "suspend", "switch", "test", "threadlocal",
			"true", "try", "undefined", "union", "unreachable", "usingnamespace", "var",
			"volatile", "while",
			"R_" // Used by runtime for references
			/*
			"i8", "u8", "i16", "u16", "i32", "u32", "i64", "u64", "i128", "u128", 
			"isize", "usize", "c_short", "c_ushort", "c_int", "c_uint", "c_long", 
			"c_ulong", "c_longlong", "c_ulonglong", "c_longdouble", "c_void", 
			"f16", "f32", "f64", "f128", "bool", "void", "noreturn", "type", 
			"anyerror", "comptime_int", comptime_float	*/
		], 

		//
		// Inlined operators
		//
		concatA([

		[
			BackGen("||", bTypeBool, BackBinOp("||", 10, BackArg(0), BackArg(1))),
			BackGen("&&", bTypeBool, BackBinOp("&&", 20, BackArg(0), BackArg(1))),
		],

		//	BackBinOp("|", 25, BackArg(0), BackArg(1)),
		//	BackBinOp("^", 26, BackArg(0), BackArg(1)),
		// 	BackBinOp("^", 27, BackArg(0), BackArg(1)),

		comparison("==", "===", 30),
		comparison("!=", "!==", 30),

		comparison("<=", "<=", 35),
		comparison("<", "<", 35),
		comparison(">=", ">=", 35),
		comparison(">", ">", 35),

		[
			// General deep comparison of objects
			BackGen("==", bTypeVoid, 
				BackRequire(
					BackText(
						blueprint("
							var deepEquality = function(a,b) {
								if (a === b) return true;

								var isArray = Array.isArray;
								var hasProp = Object.prototype.hasOwnProperty;

								if (a && b && (typeof a == 'object') && (typeof b == 'object')) {
									var arrA = isArray(a), arrB = isArray(b), i, length, key;
									if (arrA && arrB) {
										length = a.length;
										if (length != b.length) return false;
										for (i = length; i-- !== 0;) {
											if (!deepEquality(a[i], b[i])) return false;
										}
										return true;
									}

									if (arrA != arrB) return false;
									var result = false;

									if (hasProp.call(a, '_id') && hasProp.call(b, '_id')) {
										if (a._id !== b._id) {
											return false;
										} else {
											result = true;
										}
										var keys = Object.keys(a);
										length = keys.length;
										for (i = 1; i < length; i++) {
											key = keys[i];
											if (!deepEquality(a[key], b[key])) return false;
										}
									}
									if (hasProp.call(a, '__v') && hasProp.call(b, '__v')) {
										return false;
									}
									return result;
								}
								return false;
							}
							", []
						)
					),
					BackCall("deepEquality", [BackArg(0), BackArg(1)])
				)
			),
		],

		// In JS, we have bitshifts here <<, >>, >>>

		[
			BackGen("+", bTypeInt, BackBinOp("+%", 40, BackArg(0), BackArg(1))),
			BackGen("+", bTypeDouble, BackBinOp("+", 40, BackArg(0), BackArg(1))),
//			BackGen("+", bTypeString, BackBinOp("+", 40, BackArg(0), BackArg(1))),

			BackGen("-", bTypeInt, BackBinOp("-%", 40, BackArg(0), BackArg(1))),
			BackGen("-", bTypeDouble, BackBinOp("-", 40, BackArg(0), BackArg(1))),

			BackGen("*", bTypeInt, BackBinOp("*%", 50, BackArg(0), BackArg(1))),
			BackGen("*", bTypeDouble, BackBinOp("*", 50, BackArg(0), BackArg(1))),

			BackGen("/", bTypeInt, BackCall("@divFloor", [BackArg(0), BackArg(1)])),
			BackGen("/", bTypeDouble, BackBinOp("/", 50, BackArg(0), BackArg(1))),

			BackGen("%", bTypeInt, BackCall("@mod", [BackArg(0), BackArg(1)])),
			BackGen("%", bTypeDouble, BackCall("@mod", [BackArg(0), BackArg(1)])),

			BackGen("__negate", BTypeFunction([bTypeInt], bTypeInt), BackPreOp("-%", 60, BackArg(0))),
			BackGen("__negate", BTypeFunction([bTypeDouble], bTypeDouble), BackPreOp("-", 60, BackArg(0))),
			BackGen("__not", bTypeVoid, BackPreOp("!", 60, BackArg(0))),

			// Cast and type is ignored
			BackGen(":", bTypeVoid, BackArg(0)),

/*			BackGen("__ref", bTypeVoid, 
				BackRequire(
					// Alternative: class R_ {constructor(v) { this.__v = v; } }
					BackText("function R_(v){this.v=v}"),
					BackCall("new R_", [BackArg(0)])
				)
			),
			BackGen("__deref", bTypeVoid, BackPostOp(".v", 60, BackArg(0))),
			BackGen(":=", bTypeVoid, BackBinOp(".v=", 70, BackArg(0), BackArg(1))),
*/
			// [_]u8{
			// BackGen("[", bTypeVoid, BackConcat([BackText("["), BackArg(0), BackText("]")])),
			BackGen("__index", bTypeVoid, BackConcat([BackBinOp("[", 80, BackArg(0), BackArg(1)), BackText("]")])),

			BackGen(".", bTypeVoid, BackBinOp(".", 60, BackArg(0), BackUnquote(BackArg(1)))),

			// Inlined natives
			BackGen("Native.println", bTypeVoid, BackText("stdout.print")),

/*			BackGen("Native.fold", bTypeVoid, BackText("function(values,init,fn){for(var i=0;i<values.length;i++){init=fn(init,values[i]);}return init;}")),
			BackGen("Native.map", bTypeVoid, BackText("function(a,fn){return a.map(fn);}")),
			BackGen("Native.filter", bTypeVoid, BackText("function(a,fn){return a.filter(fn);}")),
			BackGen("Native.enumFromTo", bTypeVoid, BackText("function(init,n){var r=[];for(var i=init;i<=n;i++){r.push(i);}return r;}")),
			BackGen("Native.length", bTypeVoid, BackText("function(a){return a.length;}")),

			BackGen("Native.isSameStructType", bTypeVoid, BackText("function(a,b){return Object.prototype.hasOwnProperty.call(a,'_id')&&Object.prototype.hasOwnProperty.call(b,'_id')&&a._id==b._id}")),

			BackGen("Native.quit", bTypeVoid, 
				BackIfDef("browser",
					BackText("function(c) {window.open('','_top').close();}"),
					BackText("function(c) {}")
				)
			),*/
			BackGen("Native.sin", bTypeVoid, BackText("@sin")),
			//BackGen("Native.asin", bTypeVoid, BackText("Math.asin")),
			BackGen("Native.cos", bTypeVoid, BackText("@cos")),
			// BackGen("Native.acos", bTypeVoid, BackText("Math.acos")),
			// BackGen("Native.atan", bTypeVoid, BackText("Math.atan")),
			// BackGen("Native.atan2", bTypeVoid, BackText("Math.atan2")),
			BackGen("Native.exp", bTypeVoid, BackText("@exp")),
			BackGen("Native.log", bTypeVoid, BackText("@log")),
			// d->i
			BackGen("Native.trunc", bTypeVoid, BackText("@trunc")),
			BackGen("Native.i2d", bTypeVoid, BackCall("@intToFloat", [BackText("f64"), BackArg(0)])),
//			BackGen("Native.i2s", bTypeVoid, BackText("function(i){return String(i);}")),
//			BackGen("Native.d2s", bTypeVoid, BackText("function(d){return String(d);}")),
			BackGen("Native.bitXor", bTypeVoid, BackBinOp("^", 50, BackArg(0), BackArg(1))),
			BackGen("Native.bitAnd", bTypeVoid, BackBinOp("&", 50, BackArg(0), BackArg(1))),
			BackGen("Native.bitOr", bTypeVoid, BackBinOp("|", 50, BackArg(0), BackArg(1))),

//			BackGen("Native.bitUshr", bTypeVoid, BackText("function(a,b){return a>>>b;}")),
//			BackGen("Native.bitShl", bTypeVoid, BackText("function(a,b){return a<<b;}")),
//			BackGen("Native.bitNot", bTypeVoid, BackText("function(a){return ~a;}")),

			BackGen("Native.strlen", bTypeVoid, BackText("function(s){return s.length;}")),
			BackGen("Native.strIndexOf", bTypeVoid, BackText("function(str,substr) {return str.indexOf(substr,0);}")),

			BackGen("Native.substring", bTypeVoid, 
				// It turns out that Chrome does NOT copy strings out when doing substring,
				// and thus we never free the original string
				BackText("function(str,start,len){
					var s = str.slice(start,start+len);
					if (2 * s.length < str.length){return (' '+s).slice(1);} else return s;
				}")
			),
			BackGen("Native.cloneString", bTypeVoid, BackText("function(s){return (' '+s).slice(1);}")),

			BackGen("Native.getCharCodeAt", bTypeVoid, BackText("function(s,i){return s.charCodeAt(i);}")),
			BackGen("Native.getCharAt", bTypeVoid, BackText("function(s,i){return s.charAt(i);}")),



/*
Native.toLowerCase = function(str) {
	return str.toLowerCase();
};
Native.toUpperCase = function(str) {
	return str.toUpperCase();
};
Native.strReplace = function(str,find,replace) {
	return StringTools.replace(str,find,replace);
};

Native.concat = function(arr1,arr2) {
	return arr1.concat(arr2);
};

Native.iter = function(values,clos) {
	var _g = 0;
	while(_g < values.length) {
		var v = values[_g];
		++_g;
		clos(v);
	}
};
*/

		]
		]),
	);
}
