import ds/set;
import tools/flowe/bexp/type;

export {
	// A DSL for producing output for our backends
	Backend(
		keywords : Set<string>,
		generators : Tree<string, [BackGen]>,
		onError : (msg : string) -> void,
		requirements : ref Set<string>,
		// A placeholder for each backend to place some data they want to carry around
		info : ?
	);

	// Definition of a operator in a backend
	BackGen(
		// What is the name of the function?
		name : string, 
		// Type requirement for the call fn (if this is not a fn, then consider it the result type)
		type : BType,
		// What should we produce as output?
		product : BackExp
	);

	// How to produce the output? A minimal expression language
	BackExp ::= BackText, BackBinOp, BackPreOp, BackPostOp, BackArg, BackConcat, BackCall, BackUnquote, 
				BackIfDef, BackRequire;
		// Concrete, specific text
		BackText(text : string);
		// A binary operator
		BackBinOp(name : string, 
			// What precedence does this have?
			precedence : int,
			arg0 : BackExp, 
			arg1 : BackExp
		);
		// A prefix operator
		BackPreOp(
			name : string,
			precedence : int,
			arg : BackExp
		);
		// A postfix operator
		BackPostOp(
			name : string,
			precedence : int,
			arg : BackExp
		);
		// A given argument number in the original call. 0 indexed
		BackArg(n : int);
		// Append these
		BackConcat(es : [BackExp]);
		// Call to a named function
		BackCall(name : string, args : [BackExp]);

		// Convert a string to raw text
		BackUnquote(e : BackExp);

		// Conditional
		BackIfDef(flag : string, then : BackExp, else_ : BackExp);

		// This prelude should go at the top
		BackRequire(prelude : BackExp, in : BackExp);
}
