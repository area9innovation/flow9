// import runtime;
forbid ds/tree;

export {
	i : int;
	foo(a : int) -> int;
}

i = 1;
d = 1.0;
s = "1";
t = true;
f = false;
h = 0xdead;

v = i;

e0 = !false;
e1 = -1;
r = ref 0;
dr = ^r;
a0 : [int] = [];	// Implicit polymorphism
a1 = [1];

None();
Some(value : ?);

Maybe<?> ::= None, Some<?>;

n : None<int> = None();

s0 = switch(n) {
	None(): 0;
	default: 1;
};

m : Maybe<int> = None();

o = true || false;
an = true && false;
ceq = 0 == 0;
cneq = 0 != 0;
clt = 0 < 0;
cle = 0 <= 0;
cgt = 0 > 0;
cge = 0 >= 0;

plus = 1 + 1;
minus = 1 - 1;
mult = 1 * 1;
divide = 1 / 1;
modulo = 1 % 1;

a = {b = 1; b};
at = {b : int = 1; b};
mm : int = m ?? 0 : 1;

l0 = \ -> 0;
l1 = \__ : int -> 0;

c0 = l0();

d0 = { r = ref 0; r := 1; 0 };

some = Some(1);
f0 = some.value;

i0 = [0][0];

native println : io (flow) -> void = Native.println;

bb : bool = false;
ii : int = 0;
dd : double = 0.0;
ss : string = "abc\n\t \\\"\x0d\u2345\r";
ss2 = "#include flowe/tests/hello.flow";

native captureCallstack : io () -> native = Native.captureCallstack;
nn : native = captureCallstack();

ff : flow = 0;
aa : [int] = [];
rn : ref Maybe<int> = ref None();

/* This is a nice comment*/

Mut(mutable field : int);
Baz(a : int, b : double);

mut() {
	m = Mut(0);
	m.field ::= 1;
	b = Baz(1, 2.0);
	c = Baz(b with b = 1.0, a = 2);
	c;
}


foo(a : int) -> int {
	if (a == 0) {
		{}
	};
	if (a == 0) {
		1
	} else {
		2;
	};
	if (a == 0) {
		1;
	} else if (a == 1) {
		2;
	} else 3;
	a;
}

pipe() {
	foo |> println
}

native i2s : (int) -> string = Native.i2s;
native d2s : (double) -> string = Native.d2s;
native i2d : (i : int) -> double = Native.i2d;
native trunc : (d : double) -> int = Native.trunc;

main() {
	\file : string -> {
		code = file;
	};

	{};

	cast(1 : int -> string);
	cast(1 : int -> double);
	/*cast(1.1 : double -> int);
	cast(1.1 : double -> string);*/
}

trunc(d) cast(d : double -> int);

/*
Missing semicolon because of brace
*/

brace() {
	if (false) 2 else { 3 }
	b = 1;
}


// This only works in the newer compilers
// ty = 1 : int;
// The explicit name of the auto type
// aa : auto = 2;
