native impersonateCallstackFn : io (fn : flow, flags : int) -> void = Native.impersonateCallstackFn;

Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;
	DynamicBehaviour(value : ref ?);
	ConstBehaviour : (constv : ?);

// Do the same, but only if the value is different from the current value
nextDistinct(b : DynamicBehaviour<?>, value : ?) -> void {
}

subscribe2(b  : Behaviour<?>, fn : (?) -> void) -> () -> void {
	\ -> {}
}


makeBidirectionalLink(a : DynamicBehaviour<?>, b : DynamicBehaviour<??>, a2b : (?) -> ??, b2a : (??) -> ?, distinct : bool) -> void {
	nextFn1 = if (distinct) nextDistinct else nextDistinct;
	nextFn2 = if (distinct) nextDistinct else nextDistinct;
	u1 = subscribe2(a, \v -> {
		impersonateCallstackFn(a2b,0);
		nextFn1(b, a2b(v));
	});
	u2 = subscribe2(b, \v -> {
		impersonateCallstackFn(b2a,0);
		nextFn2(a, b2a(v));
	});
}
