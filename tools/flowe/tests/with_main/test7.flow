Pair(first : ?, second : ??);
Triple(first : ?, second : ??, third : ???);

// Apply a collecting function.  This is a left fold, i.e., it folds with the start of
// the array first, i.e., fold([x1, x2, x3], x0, o) = ((x0 o x1) o x2) o x3
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native concat : ([?], [?]) -> [?] = Native.concat;

// a = debugtyping1;

unzipFirst(a: [Pair<?, ??>]) -> [?] {
	fold(a, [], \acc, p -> concat(acc, [p.first]));
}

unzipSecond(a: [Pair<?, ??>]) -> [??] {
	fold(a, [], \acc, p -> concat(acc, [p.second]));
}

native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native toString2 : (flow) -> string = Native.toString;

main() -> void {
	println2("Test7...");
	println2(unzipFirst([Pair(1, 2), Pair(3, 4)]));
	println2(unzipSecond([Pair(1, 2), Pair(3, 4)]));
	quit(0);
}