import maybe;

export {
	DList(mutable first : DNode<?>, mutable last : DNode<?>);
		DNode<?> ::= DEnd, DLink<?>;
	DEnd : ();
	DLink(v : ?, mutable before : DNode<?>, mutable after : DNode<?>, mutable attached : bool);

	makeDList() -> DList<?> {
		DList(DEnd(), DEnd());
	}

	lengthDList(list : DList<?>) -> int { 1 }

	Behaviour<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

	// The runtime representation of a behaviour
	DynamicBehaviour(value : ref ?, subscribers : DList<(?) -> void>);
	ConstBehaviour : (constv : ?);
}

lookingForSubscribersLeak = ref false;
nextCounter = DynamicBehaviour(ref 0, makeDList());
countNexts : ref Maybe<bool> = ref None();

uncountNexts(behaviour : DynamicBehaviour<?>, value : ?) -> void {
}

next(behaviour : DynamicBehaviour<?>, value : ?) -> void {
	// We could check to make sure the behaviour is not const here, but
	// since this is called so often, we just don't. If it happens,
	// we will get a nice little crash as deserved
	if (^lookingForSubscribersLeak) {
		uncountNexts(nextCounter, getValue(nextCounter) + 1);
	}
}

getValue : (Behaviour<?>) -> ?;

getValue(behaviour) {
	switch (behaviour : Behaviour) {
		ConstBehaviour(v): v;
		DynamicBehaviour(v,s): ^v;
	}
}
