import ds/list;

export {
	// This is the AST used for parsing. As such, it is a "complete" expression
	// grammar so that Gringo has a strongly typed construct for semantic actions

	PValue ::= PVoid, PBool, PInt, PDouble, PString;
		PVoid(pos : int);
		PBool(v : bool, pos : int);
		PInt(v : int, pos : int);
		PDouble(v : double, pos : int);
		PString(v : string, pos : int);

	PExp ::= PValue, PTopLevel, PType, PArgType,
		PStringInclude, 
		PVar, PLet, PIf, PCall, PCallOp, PLambda,
		PRef, PSetMutable, PField, PArray, PSequence, PSwitch, 
		PCase, PCast, PTyped, PWith, PFieldAssign, PMaybe,

		// While parsing, we have an efficient list for collecting arrays
		PList
		;

	PTopLevel ::= PModule, PImport, PForbid, PExport, PGlobal, PNative, PUnion, PStruct, PStructArg,
		PTypeDef;
		PModule(toplevels : [PTopLevel], pos : int);
		PImport(path : string, pos : int);
		PForbid(path : string, pos : int);
		PExport(exports : [PTopLevel], pos : int);
		PGlobal(id : string, value : PExp, pos : int);
		PTypeDef(id : string, type : PType, pos : int);
		PNative(id : string, isIo : bool, type : PType, name : string, pos : int);
		PUnion(typename : PTypeName, types : [PTypeName], pos : int);
		PStruct(id : string, structArgs : [PStructArg], pos : int);
			PStructArg(id : string, ismutable : bool, type : PType, pos : int);
		
		PStringInclude(path : string, pos : int);

		PRef(value : PExp, pos : int);
		PField(value : PExp, field : string, pos : int);
		PSetMutable(lhs : PExp, field : string, value : PExp, pos : int);
		PVar(var : string, pos : int);
		PLet(var : string, value : PExp, body : PExp, pos : int);
		PIf(cond : PExp, then : PExp, else_ : PExp, pos : int);
		// Array construction
		PArray(exps : [PExp], pos : int);
		PSequence(exps : [PExp], pos : int);
		PCall(fn : PExp, args : [PExp], pos : int);
		// For built-in operators
		PCallOp(op : string, args : [PExp], pos : int);
		PLambda(args : [PArgType], body : PExp, pos : int);

			PArgType(id : string, type : PType, pos : int);

		PSwitch(value : PExp, cases : [PCase], pos : int);
		PCase(id : string, args : [string], body : PExp, pos : int);
		PCast(value : PExp, target : PType, pos : int);
		PTyped(value : PExp, type : PType, pos : int);

		PWith(struct : string, value : PExp, fields : [PFieldAssign], pos : int);
			PFieldAssign(id : string, value : PExp, pos : int);
		PMaybe(value : PExp, match : PExp, otherwise : PExp, pos : int);

	// Useful while parsing to avoid n^2 behaviour
	PList(l : List<PExp>, pos : int);

	PType ::= PTypePar, PTypeName, PTypeFunction, PArgType;

	PTypeName(id : string, typars : [PType], pos : int);
	PTypePar(id : string, pos : int);
	PTypeFunction(args : [PArgType], returnType : PType, pos : int);
}
