import tools/flowe/pexp/pexp;
import maybe;
import runtime;

export {
	getPBool(e : PExp) -> bool;
	getPInt(e : PExp) -> int;
	getPDouble(e : PExp) -> double;
	getPString(e : PExp) -> string;

	getPVar(e : PExp) -> string;
	getPArray(e : PExp) -> [PExp];
	getPSequence(e : PExp) -> [PExp];
	getPFieldAssign(p : PExp) -> PFieldAssign;

	getPType(e : PExp) -> PType;
	getPTypeName(e : PExp) -> PTypeName;
	getPTypeFunction(p : PExp) -> PTypeFunction;

	getPListArray(p : PExp) -> [PExp];

	getPModule(p : PExp) -> PModule;
}

getPBool(e : PExp) -> bool {
	switch (e) {
		PBool(b, __): b;
		default: false;
	}
}

getPInt(e : PExp) -> int {
	switch (e) {
		PInt(d, __): d;
		default: 0;
	}
}

getPDouble(e : PExp) -> double {
	switch (e) {
		PDouble(d, __): d;
		default: 0.0;
	}
}

getPString(e : PExp) -> string {
	switch (e) {
		PString(s, __): s;
		default: "";
	}
}

getPArray(e : PExp) -> [PExp] {
	switch (e) {
		PArray(es, __): es;
		default: {
			println("Expected an array!");
			[];
		}
	}
}

getPVar(e : PExp) -> string {
	switch (e) {
		PVar(v, __): v;
		default: "";
	}
}

getPSequence(e : PExp) -> [PExp] {
	switch (e) {
		PSequence(es, __): es;
		default: [];
	}
}

getPType(e : PExp) -> PType {
	switch (e) {
		PType(): e;
		default: PTypeName("", [], -1);
	}
}

getPTypeName(e : PExp) -> PTypeName {
	switch (e) {
		PTypeName(__, __, __): e;
		default: PTypeName("", [], -1);
	}
}

getPTypeFunction(p : PExp) -> PTypeFunction {
	switch (p) {
		PTypeFunction(__, __, __): p;
		default: PTypeFunction([], PTypeName("", [], -1), -1)
	}
}

getPFieldAssign(p : PExp) -> PFieldAssign {
	switch (p) {
		PFieldAssign(__, __, __): p;
		default: PFieldAssign("", PBool(false, -1), -1);
	}
}

getPListArray(p : PExp) -> [PExp] {
	switch (p) {
		PList(l, __): list2array(l);
		default: [];
	}
}

getPModule(p : PExp) -> PModule {
	switch (p) {
		PModule(__, __): p;
		default: PModule([], -1);
	}
}
