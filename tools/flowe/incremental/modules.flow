import tools/flowe/bexp/bmodule;
import tools/flowe/incremental/serialize;
import sys/concurrent;

import tools/flowe/dexp/desugar;

export {
	// A concurrent hash map from flowpath to BModule 
	BModules(modules : native);

	makeBModules() -> BModules;

	getDummyBModule() -> BModule;

	// Do we have this module in memory?
	hasCachedBModule(m : BModules, flowpath : string) -> bool;
	hasIncrementalBModule(tracing : Tracing, m : BModules, fullpath : string, flowpath : string) -> bool;
	getCachedBModule(m : BModules, flowpath : string) -> BModule;
	setCachedBModule(m : BModules, flowpath : string, bmod : BModule) -> void;
	clearCachedBModule(m : BModules, flowpath : string, bmod : BModule) -> void;
}

makeBModules() -> BModules {
	BModules(initConcurrentHashMap())
}

getDummyBModule() -> BModule {
	BModule("", "", [], [], DExport(makeSet(), makeSet(), makeSet(), -1), 
		makeTree(), makeTree(), makeTree(), makeTree(), makeTree(), []
	);
}

hasCachedBModule(m : BModules, flowpath : string) -> bool {
	containsConcurrentHashMap(m.modules, flowpath);
}

hasIncrementalBModule(tracing : Tracing, m : BModules, fullpath : string, flowpath : string) -> bool {
	incremental = readBModule(tracing, fullpath, flowpath);
	incremental ?? {
		// Register this guy in our cache
		setConcurrentHashMap(m.modules, flowpath, incremental);
		true;
	} : {
		false;
	}
}

getCachedBModule(m : BModules, flowpath : string) -> BModule {
	getConcurrentHashMap(m.modules, flowpath, getDummyBModule());
}

setCachedBModule(m : BModules, flowpath : string, bmod : BModule) -> void {
	setConcurrentHashMap(m.modules, flowpath, bmod);
}

clearCachedBModule(m : BModules, flowpath : string, bmod : BModule) -> void {
	removeConcurrentHashMap(m.modules, flowpath);
}