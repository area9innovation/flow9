import ds/set;
import net/url_parameter;

export {
	Tracing(
		// What ids should we trace? globals, types, modules
		debugIds : Set<string>,
		// What stages should we debug?
		debugStages : Set<CompileStage>,
		// How much debug info? 0 is a bit, 1 is more, 2 is a lot
		debugLevel : int
	);

	makeTracing() -> Tracing;

	isTracingId(t : Tracing, stage : CompileStage, verbose : int, id : string) -> bool;

	isTracingStage(t : Tracing, stage : CompileStage, verbose : int) -> bool;

	// Does any of the debug ids we have match this condition?
	matchTracingId(t : Tracing, fn : (string) -> bool) -> bool;

	// The different stages in the compiler
	CompileStage ::= StageParse, StageTypeInference, StageTypeResolve, StageLower;
		// Parse source code
		StageParse();
		// Infer types
		StageTypeInference();
		// Resolve type constraints
		StageTypeResolve();
		// Lower to typed BExp and optimize
		StageLower();

}

makeTracing() -> Tracing {
	ids = filter(strSplit(getUrlParameter("debug"), ","), neq(""));

	stagestr = getUrlParameterDef("stages", "parse,type,resolve,lower");
	stages = fold(strSplit(stagestr, ","), makeSet(), \acc, stage -> {
		if (stage == "parse") insertSet(acc, StageParse())
		else if (stage == "type") insertSet(acc, StageTypeInference())
		else if (stage == "resolve") insertSet(acc, StageTypeResolve())
		else if (stage == "lower") insertSet(acc, StageLower())
		else {
			println("Unknown stage: " + stage);
			acc;
		}
	});
	level = s2i(getUrlParameter("verbose"));

	Tracing(buildSet(ids), stages, level);
}

isTracingId(t : Tracing, stage : CompileStage, verbose : int, id : string) -> bool {
	t.debugLevel >= verbose && containsSet(t.debugStages, stage) &&
	(containsSet(t.debugIds, id) || containsSet(t.debugIds, "1"));
}

isTracingStage(t : Tracing, stage : CompileStage, verbose : int) -> bool {
	t.debugLevel >= verbose && containsSet(t.debugStages, stage) && !isEmptySet(t.debugIds)
}

matchTracingId(t : Tracing, fn : (string) -> bool) -> bool {
	existsSet(t.debugIds, fn);
}
