import tools/common/config;
import tools/common/pathutil;
import lingo/flow/fail;

export {
    // Reads compiler options from config file and url parameters.
    getCompilerConfig : ()->Fail<CompilerConfig>;
    
    // Read a compilefile and for each line make a config, combined with a given one.
    readConfigsFormCompileFile(config : CompilerConfig, compilefile : string) -> [CompilerConfig];
    
	// Find out what file to compile, returns a path
	// Extract compilation file from: command line and flow.config
	getCompilationFile(config : Tree<string, string>, verbose : int) -> string;

	// Parses a string with compiler oiptions and output a config, combined with a given one.
	readConfigFormString(config : CompilerConfig, str : string) -> Maybe<CompilerConfig>;

	// Trims a config.flowfile so that it gives a valid module name.
	getTargetModuleName(config : CompilerConfig) -> string;
}

getCompilerConfig() {
    configFile = combineConfigsOverride(getAllUrlConfig(), parseFlowConfig());

    v = getUrlParameterDef("verbose", "0");
    verbose = if (isDigits(v)) s2i(v) else 0;
    flowDir = getFlowDir();
    flowLibDir = flowDir + "lib";
    flowLibMaterialDir = flowLibDir + "/material";
    innovationDir = resolveRelativePath(flowDir + "../innovation");
    innovationLibDir = innovationDir + "/lib";

    cliIncludes = getUrlParameter("I");

    configIncludes = lookupTreeDef(configFile, "include", "");
    includesArray = concat(strSplit(cliIncludes, ","), strSplit(configIncludes, ","));
    includesNFlowLib = uniq(concat(includesArray, [flowLibDir, flowLibMaterialDir, innovationLibDir]));
    includesNFlow = uniq(concat(includesNFlowLib, [flowDir, innovationDir]));
    includesCwd = concat(includesNFlow, ["."]);    

    includes = filter(includesCwd, neq(""));

    if (verbose > 0) {
        println("Flow path: " + flowDir);
        println("Flow library path: " + flowLibDir);
        println("Flow includes paths: " + toString(includes));
    }

    workingDir = getUrlParameterDef("working-dir", "");
    readable = isUrlParameterTrue("readable");
    afile = getCompilationFile(configFile, verbose);
    flowfile = trimFlowfile(afile, includes, workingDir);

    // Meaningful only for flowc
    fcIncremental = !isUrlParameterFalse("incremental");

    objectFolders = {
        folders = getUrlParameterDef("obj", if (fcIncremental) flowDir + "/objc" else (if (readable) "objjs" else "obj,objshared"));
        configFolders = lookupTreeDef(configFile, "obj", "");
        filter(concat(
            strSplit(if (folders == "-") "" else folders, ","),
            strSplit(configFolders, ",")
        ), \e -> e != "")
    }

    htmlMonolithic = getUrlParameter("html");

    htmlManifest = getUrlParameter("html-app-manifest");
    hamName = getUrlParameter("ham-name");
    hamShortName = getUrlParameter("ham-short-name");
    hamStartUrl = getUrlParameter("ham-start-url");
    hamDir = getUrlParameter("ham-dir");
    hamLang = getUrlParameter("ham-lang");
    hamOrientation = getUrlParameter("ham-orientation");
    hamDisplay = getUrlParameter("ham-display");
    hamBackgroundColor = getUrlParameter("ham-background-color");
    hamDescription = getUrlParameter("ham-description");
    hamIcons =  getUrlParameter("ham-icons");

    jsfile_init = getUrlParameterDef("js", "");
    jsfile = if ((htmlMonolithic != "") && (jsfile_init == "")) htmlMonolithic + ".js" else jsfile_init;

    es6file = getUrlParameterDef("es6", "");
    // removing extension
    typescriptFile = getUrlParameterDef("ts", "") |> \tsf0 -> if (endsWith(tsf0, ".ts"))  strsubsmart(tsf0, 0, -3) else tsf0;

    jscode = isUrlParameterTrue("jscode");
    jsmodules = getUrlParameterDef("jsmodules", "");
    jscomments = isUrlParameterTrue("jscomments") || readable;
    nodejsmode = isUrlParameterTrue("nodejs");
    webmodule = isUrlParameterTrue("webmodule");
    nwjsmode = isUrlParameterTrue("nwjs");
    beautify = isUrlParameterTrue("jsbeautify") || readable;

    debug = isUrlParameterTrue("debug") || readable;

    regen = isUrlParameterTrue("regen");

    bytecode = getUrlParameterDef("bytecode", "");
    upload = isUrlParameterTrue("upload");
    haskell = getUrlParameterDef("haskell", "");
    //NB! csharp is a global variable in target.flow that is imported to translation.flow
    csharpPath = getUrlParameterDef("csharp", "");
    javaPath = getUrlParameterDef("java", "");

    finddecl = getUrlParameter("find-declaration");
    finddef = getUrlParameter("find-definition");
    finduses = getUrlParameter("find-uses");

    extractName = getUrlParameter("extract");
    xliff = isUrlParameterTrue("xliff");

    partialevaluate = getUrlParameterDef("pe", "");
    prettyprint = getUrlParameterDef("pp", "");

    fontconfigFile = getUrlParameterDef("fontconfig-file", "");
    dumpids = getUrlParameter("dump-ids");

    htmlMinify = isUrlParameterTrue("html-minify");
    htmlTitle = getUrlParameter("html-title");
    htmlSplash = getUrlParameterDef("html-splash", "www/images/splash/splash_innovation_trans.png");

    jsLibrary = getUrlParameterDef("jslibrary", "");
	jsLibraryObject =getUrlParameterDef("jslibraryobject", "");
    isJsLibrary = jsLibrary != "";

    preservedNames = getUrlParameterDef("dce-preserved-names", if (isJsLibrary) jsLibrary else "");
    dcePreservedNames = fold(strSplit(preservedNames, ","), makeSet(), \a, i -> {
        if (i != "") insertSet(a, i) else a
    });

    dceRemoveMain = getUrlParameterDef("dce-remove-main", if (isJsLibrary) "1" else "0");
	noOtc = getUrlParameterDef("js-no-otc", "1");

    jsCallMain = getUrlParameterDef("js-call-main", if (!isJsLibrary && !nwjsmode) "1" else "0");

    // For flowc compiler, has no meaning for flowcompiler
    fcUseHaxeRuntime = getUrlParameterDef("use-haxe-runtime", "1");
    fcKeepSources = getUrlParameterDef("keep-sources", "0");
    fcForceBuild = getUrlParameterDef("force-build", "0");
    fcDceForceRemoveGlobals = getUrlParameterDef("dce-force-remove-globals", "0");

    fcServerPort = getUrlParameterDef("server-port", "10001");

    if (nodejsmode && (es6file == "")) {
        println("WARNING: 'nodejs' set, but 'es6' not. If you want code for Node.js use 'es6=<file> nodejs=1'");
    }
    if ((es6file == jsfile) && (jsfile != "")) {
        Failed("ERROR: js and es6 parameters should not be equal.");
    } else if (nwjsmode && nodejsmode) {
        Failed("ERROR: 'nodejs' mode and 'nwjs' modes are mutually exclusive.");
    } else if ((dumpids == afile) && (dumpids != "")) {
        Failed("ERROR: 'dump-ids' and 'file' should not be equal");
    } else if ((htmlMonolithic != "") && (jsfile == "")) {
        Failed("ERROR: 'html' parameter requires 'js' parameter to be set.");
    } else if ((dceRemoveMain == "1") && (isEmptySet(dcePreservedNames))) {
        Failed("ERROR: set 'dce-preserved-names' if you want to remove 'main' with 'dce-remove-main'");
    } else {
        configTree = combineConfigsOverride(getConstConfig([
            Pair("include", strGlue(includes, ",")),
            Pair("readable", if (readable) "1" else ""),
            Pair("flowfile", flowfile),
            Pair("obj", strGlue(objectFolders, ",")),
            Pair("js", jsfile),
            Pair("es6", es6file),
            Pair("ts", typescriptFile),
            Pair("jscode", if (jscode) "1" else ""),
            Pair("jsmodules", jsmodules),
            Pair("jscomments", if (jscomments) "1" else ""),
            Pair("nwjs", if (nwjsmode) "1" else ""),
            Pair("jsbeautify", if (beautify) "1" else ""),
            Pair("verbose", if (verbose>0) i2s(verbose) else ""),
            Pair("debug", if (debug) "1" else ""),
            Pair("regen", if (regen) "1" else ""),
            Pair("bytecode", bytecode),
            Pair("upload", if (upload) "1" else ""),
            Pair("haskell", haskell),
            Pair("csharp", csharpPath),
            Pair("java", javaPath),
            Pair("find-declaration", finddecl),
            Pair("find-definition", finddef),
            Pair("find-uses", finduses),
            Pair("extract", extractName),
            Pair("xliff", if (xliff) "1" else ""),
            Pair("pe", partialevaluate),
            Pair("pp", prettyprint),
            Pair("servicefile", "/flowcompiler.rpc"),
            Pair("servicetimeout", "30"),
            Pair("keepmodules", "1"),

            // HTML bundle
            Pair("html", htmlMonolithic),
            Pair("html-minify", if (htmlMinify) "1" else ""),
            Pair("html-title", htmlTitle),
            Pair("html-splash", htmlSplash),

            // HTML Application manifest
            Pair("html-app-manifest", htmlManifest),
            Pair("ham-name", hamName),
            Pair("ham-short-name", hamShortName),
            Pair("ham-start-url", hamStartUrl),
            Pair("ham-dir", hamDir),
            Pair("ham-lang", hamLang),
            Pair("ham-orientation", hamOrientation),
            Pair("ham-display", hamDisplay),
            Pair("ham-background-color", hamBackgroundColor),
            Pair("ham-description", hamDescription),
            Pair("ham-icons", hamIcons),

            Pair("use-haxe-runtime", fcUseHaxeRuntime),
            Pair("dce-preserved-names", preservedNames),
            Pair("dce-remove-main", dceRemoveMain),
            Pair("dce-force-remove-globals", fcDceForceRemoveGlobals),
            Pair("keep-sources", fcKeepSources),
            Pair("fontconfig-file", fontconfigFile),
            Pair("js-call-main", jsCallMain),
            Pair("force-build", fcForceBuild),
            Pair("incremental", if (fcIncremental) "1" else ""),
            Pair("js-no-otc", noOtc),
            Pair("server-port", fcServerPort),
        ]), configFile);

        // FontConfig. When empty - fallback to default fontconfig filename.
        // If default filename doesn't exist as relative path - fallback to absolute path in flowDir.
        configFC = getConfigParameterDef(configFile, "fontconfig-file", fontconfigFile);
        defaultFC = "resources/fontconfig.json";
        relativeFC = if (configFC == "") defaultFC else configFC;
        fontconfig = if (fileExists(relativeFC)) relativeFC else flowDir + defaultFC;

        dceRemoveMainParam = isConfigParameterTrue(configTree, "dce-remove-main");
        jsCallMainParam = isConfigParameterTrue(configTree, "js-call-main");
        Some(CompilerConfig(
            flowfile, 
            includes,
            objectFolders,
            verbose,
            JSCliParams(
                jsfile,
                es6file,
                typescriptFile,
                debug,
                jscode,
                jsmodules,
                jscomments,
                nodejsmode,
                webmodule,
                false, // isES6
                false, // isTypeScript
                tsProcessing_dummy,
                readable,
                beautify,
                verbose,
                nwjsmode,
                fontconfig,
                dcePreservedNames,
                dceRemoveMainParam,
				jsLibraryObject,
                jsCallMainParam
            ),
            configTree,
            s2i(getThreadId())
        ));
    }
}

readConfigFormString(config : CompilerConfig, str : string) -> Maybe<CompilerConfig> {
	line = trim(str);
	// Skip comment and empty lines in flow.config
	if (!startsWith(ltrim2(line, " \t"), "#") && strlen(line) > 0) {
		opts = filter(strSplit(line, " "), \opt -> opt != "");
		new_config = fold(opts, makeTree(),
			\a, opt -> {
				name_val = strSplit(opt, "=");
				if (length(name_val) == 2) {
					name = trim2(name_val[0], " \t\u000d");
					val = trim2(name_val[1], " \t\u000d");
					val1 = if (name == "resource-file") {
						val2 = if (endsWith(val, ".swf")) val else val + ".swf";
						if (strFindFirstOf(val2, "/\\") != -1) val2 else "resources/" + val2
					} else val;
					setTree(a, name, val1)
				} else a;
			}
		);
		conf = compilerConfigFromConfig(combineConfigsOverride(new_config, config.config));
		file = getCompilationFile(new_config, config.verbose);
		workingDir = getConfigParameterDef(config.config, "working-dir", "");
		filetrimmed = trimFlowfile(file, conf.includes, workingDir);
		Some(CompilerConfig(conf with flowfile = filetrimmed))
	} else None()
}

readConfigsFormCompileFile(config : CompilerConfig, compilefile : string) -> [CompilerConfig] {
	if (fileExists(compilefile)) {
		fold(strSplit(getFileContent(compilefile), "\n"), [], 
			\acc, line -> eitherMap(readConfigFormString(config, line), \conf -> concat(acc, [conf]), acc)
		);
	} else [];
}

getCompilationFile(config : Tree<string, string>, verbose : int) -> string {
	filepar = getConfigParameter(config, "file");
	files = filtermap(getAllUrlParametersArray(), \a -> if (a[1] == "") Some(a[0]) else None());
	if (length(files) > 1) {
		println("Only expected one file, not: " + strGlue(files, " & "));
	}
	file0 = if (filepar == "" && files != []) files[0] else filepar;
	file1 = makeRelativePath(file0);
	if (verbose >= 1) println("Normalized path: " + file1);

	test = getConfigParameter(config, "test");
	error = getConfigParameter(config, "error");
	outfolder = getConfigParameter(config, "outfolder");
	if (outfolder != "") {
		of = if (outfolder == "1") "tools/flowc/tests/out" else outfolder;
		ensureDirectoryExists(of);
		{}
	}

	deleteFile("mkdot.bat");

	file2 = if (file0 == "" && test != "") "tools/flowc/tests/test" + test 
	else if (file0 == "" && error != "") "tools/flowc/tests/errors/error" + error
	else file0;
	strReplace(file2, "\\", "/");
}

makeRelativePath(file : string) -> string {
	cwd0 = resolveRelativePath(".");
	cwd1 = strReplace(cwd0, "\\", "/");
	cwd = if (endsWith(cwd1, "/")) cwd1 else cwd1 + "/";
	file0 = strReplace(file, "\\", "/");
	if (startsWith(toLowerCase(file0), toLowerCase(cwd))) {
		strRight(file0, strlen(cwd))
	} else file0;
}

getTargetModuleName(config : CompilerConfig) -> string {
	trimFlowfile(config.flowfile, config.includes, getConfigParameterDef(config.config, "working-dir", ""))
}
