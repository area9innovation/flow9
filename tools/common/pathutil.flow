import fs/filesystem;
import sys/system;
import common/config_type;

export {
	// Make Linux style path
	normalizePath(path : string) -> string;
	// Make Linux style path ending with "/"
	normalizeFolderPath(path : string) -> string;

	splitIncludes(includesStr : string) -> [string];

	// Trims the filename to be a flow path, i.e. no .flow suffix, and no lib/ prefix or anything like that
	trimFlowfile(flowFile : string, config : CompilerConfig) -> string;
	trimFlowfile2(flowFile : string, includesResolved : [string]) -> string;
	makeResolvedIncludes(includesRaw : [string], workingDir : string) -> [string];

	// Find the given flow-file, using imports. Returns a full filesystem path
	findFlowPath(flowfile : string, flowsuffix : bool, imports : [string], workingDir : string) -> string;

	// Find the given flow-file, using imports. Returns a relative filesystem path
	findFlowRelativePath(flowfile : string, flowsuffix : bool, imports : [string], workingDir : string) -> string;

	// Returns current working directory with slashes (/) and no slash at the end
	fcCurrentWorkingDir() -> string;

	// Convert \ to / and C:-like prefix to c: (lowercase) in path.
	fcNormalizeWindowsPath(path : string) -> string;

	fcDirName(path : string) -> string;

	// When URI parser parses something like:
	//	file:///c:/Users/dmitr/area9/flow9/tools/flowc
	// it outputs path as:
	//	/c:/Users/dmitr/area9/flow9/tools/flowc
	// which is wrong in windows, first slash must be removed.
	//
	fcUriPath2path(path : string) -> string;
	fcPath2uriPath(path : string) -> string;

	// Copy a file relative to some base directory, e.g.:
	//   base = /home/user/lib
	//   from = /home/user/lib/src/java/com/package/class.java
	//   to   = /home/user/dir1/dir2
	// will copy a 'from' file to
	//   /home/user/dir1/dir2/src/java/com/package/class.java
	// Returns an error string, when copying fails, empty string otherwise.
	copyFileRelative(base : string, from : string, to : string) -> string;

	// Copies all files from the directory directory, which satisfy predicate,
	// keeping the relative path.
	// Returns a non-empty array of errors, when copying fails and empty array otherwise.
	copyDirectory(base : string, from : string, to : string, pred : (string) -> bool) -> [string];


	// Try to resolve a flowpath (file exists) with all possible variants:
	// absolute/relative; current dir/working dir; as is/via an import path.
	// If there's more then one possible variant - it's an ambiguity (error).
	findAllFlowPaths(flowpath : string, imports : [string], workingDir : string) -> [string];
}

// We need it to speed up slow trimFlowfile -- do not resolve the same includes many times.
makeResolvedIncludes(includesRaw : [string], workingDir : string) -> [string] {
	workingDir2 = normalizeFolderPath(workingDir);
	resolve = \path -> {
		resolved = resolveRelativePath(path);
		toLowerCase(normalizePath(resolved));
	}
	map(includesRaw, \inc0 -> {
		inc = toLowerCase(inc0);
		if (isAbsolutePath(inc)) {
			resolve(inc);
		} else {
			resolve(workingDir2 + inc);
		}
	});
}

trimFlowfile(flowFile : string, config : CompilerConfig) -> string {
	trimFlowfile2(flowFile, config.includesResolved);
}

trimFlowfile2(flowFile : string, includesResolved : [string]) -> string {
	noflow0 = if (endsWith(flowFile, ".flow")) strsubsmart(flowFile, 0, -5) else flowFile;
	noflow = normalizePath(noflow0);
	noflowLC = toLowerCase(noflow);
	trimmed = fold(includesResolved, noflow, \acc, resolvedInc -> {
		if (acc != noflow) {
			acc;
		} else if (startsWith(noflowLC, resolvedInc)) {
			strRight(noflow, strlen(resolvedInc));
		} else {
			acc;
		}
	});
	trim2(trimmed, "/");
}

findFlowPath(flowpath : string, flowsuffix : bool, imports : [string], workingDir : string) -> string {
	withFlow = if (endsWith(flowpath, ".flow") || !flowsuffix) flowpath else flowpath + ".flow";
	path = if (isAbsolutePath(withFlow) && fileExists(withFlow)) {
		resolveRelativePath(withFlow);
	} else {
		doFindFlowPath(withFlow, imports, true, workingDir);
	}
	fcNormalizeWindowsPath(path);
}

findFlowRelativePath(flowpath : string, flowsuffix : bool, imports : [string], workingDir : string) -> string {
	withFlow = if (endsWith(flowpath, ".flow") || !flowsuffix) flowpath else flowpath + ".flow";
	doFindFlowPath(withFlow, imports, false, workingDir);
}

doFindFlowPath(withFlow : string, imports : [string], doResolve : bool, workingDir : string) -> string {
	doFindFlowPath2(withFlow, arrayPush(imports, workingDir), 0, doResolve, normalizeFolderPath(workingDir));
}

doFindFlowPath2(withFlow : string, imports : [string], idx : int, doResolve : bool, pathShift : string) -> string {
	if (idx >= length(imports)) {
		withFlow;
	} else {
		head = imports[idx];
		directPath = normalizeFolderPath(head) + withFlow;
		if (isAbsolutePath(directPath) && fileExists(directPath)) {
			if (!doResolve) directPath
			else resolveRelativePath(directPath);
		} else {
			shiftedPath = pathShift + directPath;
			if (fileExists(shiftedPath)) {
				if (!doResolve) shiftedPath
				else resolveRelativePath(shiftedPath);
			} else {
				doFindFlowPath2(withFlow, imports, idx + 1, doResolve, pathShift);
			}
		}
	}
}

fcCurrentWorkingDir() -> string {
	rtrim2(fcNormalizeWindowsPath(resolveRelativePath(".")), "/");
}

fcNormalizeWindowsPath(path : string) -> string {
	path1 = normalizePath(path);
	if (hasTargetName("windows")) {
		drive = getCharAt(path1, 0);
		// Detect C: windows prefix
		if (isLetter(drive) && getCharAt(path1, 1) == ":") {
				// Convert C:, D:, ... to lowercase c:, d:, ...
				toLowerCase(drive) + ":" + strRight(path1, 2);
		} else {
			path1;
		}
	} else {
		path1;
	}
}

fcUriPath2path(path : string) -> string {
	if (!(startsWith(path, "/") || startsWith(path, "\\")) || !hasTargetName("windows")) path else {
		// Detect c:, d:, C:, D:, etc.
		drive = getCharAt(path, 1);
		if (isLetter(drive) && getCharAt(path, 2) == ":") {
			// Convert C: to c:
			toLowerCase(drive) + ":" + strRight(path, 3);
		} else {
			// keep original path
			path
		}
	}
}

fcPath2uriPath(path : string) -> string {
	if (hasTargetName("windows")) {
		path2 = if (startsWith(path, "/") || startsWith(path, "\\")) {
			path;
		} else {
			// Detect c:, d:, C:, D:, etc.
			drive = getCharAt(path, 0);
			if (isLetter(drive) && getCharAt(path, 1) == ":") {
				// Convert C: to c:
				"/" + toLowerCase(drive) + ":" + strRight(path, 2);
			} else {
				// keep original path
				path;
			}
		}
		normalizePath(path2);
	} else {
		path;
	}
}

normalizePath(path : string) -> string {
	strReplace(path, "\\", "/");
}

normalizeFolderPath(path : string) -> string {
	if (path == "") {
		path;
	} else {
		path2 = normalizePath(path);
		if (endsWith(path2, "/")) {
			path2;
		} else {
			path2 + "/";
		}
	}
}

splitIncludes(includesStr : string) -> [string] {
	includesStr2 = trim(includesStr);
	if (includesStr2 == "") {
		[];
	} else {
		filtermap(strSplit(includesStr2, ","), \s -> {
			i = normalizeFolderPath(trim(s));
			if (i != "") {
				Some(i);
			} else {
				None();
			}
		});
	}
}

copyFileRelative(base : string, from : string, to : string) -> string {
	if (!fileExists(from)) {
		"file: '" + from + "' doesn't exist - not possible to copy";
	} else {
		name = strRight(from, strlen(base));
		path_to = pathCombine(to, name);
		ensureDirectoryExists(fcDirName(path_to));
		if (copyFile(from, path_to)) "" else {
			"error while copying file '" + path_to + "' from '" + from + "' to '" + to + "'";
		}
	}
}

copyDirectory(base : string, from : string, to : string, pred : (string) -> bool) -> [string] {
	filtermap(
		filter(readDirectoryRecursively(from), pred),
		\file -> {
			ret = copyFileRelative(base, file, to);
			if (ret == "") None() else Some(ret)
		}
	);
}

findAllFlowPaths(flowpath : string, imports : [string], workingDir : string) -> [string] {
	file = fcNormalizeWindowsPath(changeFileExt(flowpath, ".flow"));
	path1 = if (fileExists(file)) [file] else [];

	file_shifted = fcNormalizeWindowsPath(pathCombine(workingDir, file));
	path2 = if (fileExists(file_shifted)) [file_shifted] else [];

	paths1 = filtermap(imports, \imp -> {
		file_via_imp = fcNormalizeWindowsPath(pathCombine(imp, file));
		if (!fileExists(file_via_imp)) None() else {
			Some(file_via_imp)
		}
	});
	paths2 = filtermap(imports, \imp -> {
		file_shifted_via_imp = fcNormalizeWindowsPath(pathCombineMany([workingDir, imp, file]));
		if (!fileExists(file_shifted_via_imp)) None() else {
			Some(file_shifted_via_imp);
		}
	});
	uniq(map(concatA([path1, path2, paths1, paths2]), resolveRelativePath));
}

fcDirName(path : string) -> string {
	takeBeforeLast(normalizePath(path), "/", "");
}
