import sys/concurrent;
import common/pathutil;
import tools/flowc/flowc_println;
import tools/common/parse_config;

// Use compilerconfig.flow to get a useful, easy-to-use configuration,
// and then functions here to work with it
export {
	// Parses config file as a string for options
	parseFlowConfig(config : string, dir : string) -> Tree<string, string>;

	// Finds directory, containing 'flow.config' file upwards from the given directory. Empty string means no such directory.
	findFlowConfigDir(dir : string) -> string;

	// Finds 'flow.config' file upwards from the given directory and returns its content. Returns empty string if there's no such file.
	findFlowConfig(dir : string) -> string;

	// Read config parameter.
	// Priority (increasing):
	// 1) Take default value
	// 2) Read from flow.config
	// 3) Get from command line/url
	getConfigParameterDef(config : Tree<string, string>, paramName : string, defValue : string) -> string;
	getConfigParameter(config : Tree<string, string>, paramName : string) -> string;

    isConfigParameterTrue : (config : Tree<string, string>, param : string)->bool;
    isConfigParameterFalse : (config : Tree<string, string>, param : string)->bool;
    isConfigParameterSet : (config : Tree<string, string>, param : string)->bool;
    isAnyConfigParametersTrue : (config : Tree<string, string>, params : [string])->bool;
    areAllConfigParametersTrue : (config : Tree<string, string>, params : [string])->bool;
    isAnyConfigParametersSet : (config : Tree<string, string>, params : [string])->bool;
    areAllConfigParametersSet : (config : Tree<string, string>, params : [string])->bool;

    getConfigParameterInt(config : Tree<string, string>, paramName : string, defValue : int) -> int;

    // Sets (overrides) the given config.
    setConfigParameter : (conf : CompilerConfig, key : string, value : string)->CompilerConfig;
    // Sets the given config if it is not already set.
    underrideConfigParameter : (conf : CompilerConfig, key : string, value : string)->CompilerConfig;

    getConstConfig : (config : [Pair<string, string>])->Tree<string, string>;

    // Gets config from select url parameters
    getUrlConfig : (params : [string])->Tree<string, string>;

    // Gets config from all url parameters
    getAllUrlConfig() -> Tree<string, string>;

    // Gets config from select url parameters given by first of params and
    // stores them under second of params.
    getUrlConfigMapNames : (params : [Pair<string, string>])->Tree<string, string>;

    // Combines two configs. Settings in over overrides settings in under.
    combineConfigsOverride : (
        over : Tree<string, string>,
        under : Tree<string, string>
    )->Tree<string, string>;
    combineConfigs : (
        left : Tree<string, string>,
        right : Tree<string, string>,
        combine : (param : string, fromLeft : string, fromRight : string)->string
    )->Tree<string, string>;

	// What is the thread pool?
	getCompilerThreadPool() -> native;
	// Set up the thread pool for the compiler
	setCompilerThreadPool(threads : int) -> void;

    compilerConfigFromConfig : (config : Tree<string, string>) -> CompilerConfig;
    compilerConfigToTree : (config : CompilerConfig) -> Tree<string, string>;
    compilerConfigToString(config : CompilerConfig) -> string;
	jsCliParamsToTree(params : JSCliParams) -> Tree<string, string>;

    // Finds the directory of flow distribution.
	// In case of failure prints the warning message and returns "../flow9/"
	getFlowDir() -> string;

	// Tries to find the directory of flow distribution.
	// In case of failure returns "" and doens't report anything.
	findFlowDir() -> string;

	setConfigFlowfile(config : CompilerConfig, flowfile : string) -> CompilerConfig;

	patchRemoteConfig(conf : CompilerConfig) -> CompilerConfig;
	resolvePathsInConfig(conf : CompilerConfig) -> CompilerConfig;

	// Set (add or modify) a config field(s) in conf struct.
	setConfigOption(conf : CompilerConfig, opt : string, val : string) -> CompilerConfig;
	setConfigOptions(conf : CompilerConfig, opt_pairs : [Pair<string, string>]) -> CompilerConfig;

	// Gather includes from external flow.config's, listed in include_extern as CSV.
	// When gathering external includes, relative paths are resolved to absolute.
	fcExternIncludes(parentConfDir : string, includeExtern : [string], globalConfigM : Maybe<CompilerConfig>) -> [string];

	// Tries to run a program with '-version' option, and output the result.
	// In case a program doesn't exist on path or any other errors return an empty string.
	fcProgramVersion(program : string) -> string;
}

getFlowDir() -> string {
	flowdir = findFlowDir();
	if (flowdir != "" && isDirectory(flowdir)) flowdir else {
		println("WARNING: Could not determine the flow directory.");
		println("Defaults to ../flow9/. Use bin-dir=<path> to specify where the flow folder is");
		"../flow9/";
	}
}

fcFlowDir : ref Maybe<string> = ref None();

findFlowDir() -> string {
	init_dir = \-> {
		// Use the 'print-flow-dir=1' option of flowc
		flowDirByFlowc = \-> {
			if (strContains(getApplicationPath(), "flowc1")) {
				// flowc1 must not use itsef in this function,
				// otherwise there's a fork bomb.
				""
			} else {
				dir_lines = ref "";
				err_lines = ref "";
				flowc = if (windows()) "flowc1.bat" else "flowc1";
				code = execSystemProcess(flowc, ["print-flow-dir=1"], ".",
					\out -> dir_lines := ^dir_lines + out,
					\err -> {
						println(err);
						err_lines := err;
					}
				);
				filtered = filtermap(strSplit(^dir_lines, "\n"), \line -> {
					line1 = trim2(line, " \n\t\r");
					if (line1 == "") None() else Some(line1);
				});
				if (code != 0 || ^err_lines != "" || length(filtered) != 1) "" else {
					filtered[0];
				}
			}
		}
		// Use the path of the executable
		flowDirByAppPath = \-> {
			appPath = normalizePath(getApplicationPath());
			if (strContains(appPath, "/platforms/qt")) {
				takeBefore(appPath, "/platforms/qt", appPath) + "/"
			} else if (strContains(appPath, "/QtByteRunner-build-release/QtByteRunner")) {
				takeBefore(appPath, "/QtByteRunner-build-release/QtByteRunner", appPath)
			} else if (strContains(appPath, "flow9/platforms/java")) {
				takeBefore(appPath, "platforms/java", appPath)
			} else if (strContains(appPath, "tools/flowc/")) {
				takeBefore(appPath, "tools/flowc/", appPath)
			} else if (strContains(appPath, "tools/flowc_lsp/")) {
				takeBefore(appPath, "tools/flowc_lsp/", appPath)
			} else if (strContains(appPath, "flow9/bin/")) {
				takeBefore(appPath, "bin/", appPath)
			} else if (strContains(appPath, "bin/")) {
				takeBefore(appPath, "bin/", appPath)
			} else {
				flowDirByFlowc();
			}
		}
		binDir0 = getUrlParameter("bin-dir");
		flowdir = if (binDir0 == "") {
			flowDirByAppPath()
		} else {
			binDir = if (isDirectory(binDir0)) {
				binDir0;
			} else {
				println("Invalid bin-dir parameter: folder does not exist: " + binDir0);
				"";
			}
			takeBeforeLast(binDir, "bin", binDir);
		};
		normalizeFolderPath(flowdir);
	}
	onlyOnce(fcFlowDir, init_dir);
}

findFlowConfig(dir : string) -> string {
	conf_dir = findFlowConfigDir(dir);
	if (conf_dir == "") "" else  getFileContent(conf_dir + "/flow.config");
}

findFlowConfigDir(d : string) -> string {
	dir = rtrim2(d, "/");
	if (fileExists(dir + "/flow.config")) dir else {
		// Check for root directory or c:/ in windows
		if (dir == "" || (strlen(dir) <= 3 && isLetter(getCharAt(dir, 0)) && getCharAt(dir, 1) == ":")) "" else {
			findFlowConfigDir(fcDirName(dir));
		}
	}
}

fcFirstExistentFile(files : [string], i : int, def : string) -> string {
	if (i == length(files)) def else
	if (fileExists(files[i])) resolveRelativePath(files[i]) else
	fcFirstExistentFile(files, i + 1, def);
}

parseFlowConfig(config : string, dir : string) -> Tree<string, string> {
	mapTree2(parseConfig(config), \opt, val  -> {
		val1 = if (opt == "resource-file") {
			val2 = if (endsWith(val, ".swf")) val
				else val + ".swf";
			if (strFindFirstOf(val2, "/\\") != -1) val2
			else "resources/" + val2
		} else val;
		if (!contains(["fontconfig", "js-extern-lib"], opt)) val1 else {
			fcFirstExistentFile([val1, pathCombine(dir, val1)], 0, val1)
		}
	});
}

getConfigParameterDef(config : Tree<string, string>, paramName : string, defValue : string) -> string {
	getUrlParameterDef(paramName, lookupTreeDef(config, paramName, defValue))
}

getConfigParameter(config : Tree<string, string>, paramName : string) -> string {
	getConfigParameterDef(config, paramName, "");
}

getConfigParameterInt(config : Tree<string, string>, paramName : string, defValue : int) -> int {
    raw = getConfigParameterDef(config, paramName, "");
    if (raw == "") defValue else s2i(raw);
}

isConfigParameterSet(config, param)
    getConfigParameter(config, param) != "";

isConfigParameterTrue(config, param)
    isParameterTrue(getConfigParameter(config, param));

isConfigParameterFalse(config, param)
    isParameterFalse(getConfigParameter(config, param));

isAnyConfigParametersTrue(config : Tree<string, string>, params : [string]) -> bool {
	exists(params, \param -> isConfigParameterTrue(config, param));
}

areAllConfigParametersTrue(config : Tree<string, string>, params : [string]) -> bool {
	forall(params, \param -> isConfigParameterTrue(config, param));
}

isAnyConfigParametersSet(config : Tree<string, string>, params : [string]) -> bool {
	exists(params, \param -> isConfigParameterSet(config, param));
}

areAllConfigParametersSet(config : Tree<string, string>, params : [string]) -> bool {
	forall(params, \param -> isConfigParameterSet(config, param));
}

setConfigParameter(conf, key, value)
    compilerConfigFromConfig(setTree(conf.config, key, value));

underrideConfigParameter(conf, key, value)
    if (containsKeyTree(conf.config, key)) conf
    else setConfigParameter(conf, key, value);

getConstConfig(params)
    fold(params, makeTree(), \t, pair->
        if (pair.second != "") setTree(t, pair.first, pair.second)
        else t
    );

getUrlConfig(params)
    getUrlConfigMapNames(map(params, \param->Pair(param, param)));

getUrlConfigMapNames(params)
    fold(params, makeTree(), \config, param->
        eitherGetUrlParameter(param.first,
            \value->setTree(config, param.second, value),
            config
        )
    );

getAllUrlConfig() -> Tree<string, string> {
	fold(getAllUrlParametersArray(), makeTree(), \acc, p ->
		if (endsWith(p[0], "+") && p[1] != "") {
			// The case of `par+=val` option - do not rewrite `par` or even `par+`,
			// but rather append the `val` to already contained value
			name = substring(p[0], 0, strlen(p[0]) - 1);
			switch (lookupTree(acc, name)) {
				Some(val): setTree(acc, name, val + "," + p[1]);
				None(): setTree(acc, name, p[1]);
			}
		} else {
			// The case of `par=val` option - just rewrite `par`.
			setTree(acc, p[0], p[1])
		}
	)
}

combineConfigsOverride(over, under)
    mergeTreeCustom(over, under, \__, upper, __ -> upper);

combineConfigs(left, right, combine)
    mergeTreeCustom(left, right, combine);

compilerThreadPool : ref Maybe<native> = ref None();
compilerThreadPoolSize = ref 0;
getCompilerThreadPool() -> native {
	onlyOnce(compilerThreadPool, \ -> {
		compilerThreadPoolSize := availableProcessors();
		newThreadPool(^compilerThreadPoolSize);
	});
}

setCompilerThreadPool(threads : int) -> void {
	if (^compilerThreadPoolSize != threads) {
		compilerThreadPoolSize := threads;
		compilerThreadPool := Some(newThreadPool(threads));
	}
}

compilerConfigFromConfig(config) {
	v = getConfigParameterDef(config, "verbose", "0");
	verboseLevel = if (isDigits(v)) s2i(v) else 0;

	dpn = getConfigParameterDef(config, "dce-preserved-names", "");
	dcePreservedNames = fold(strSplit(dpn, ","), makeSet(), \a, i -> {
		if (i != "") insertSet(a, i) else a
	});

	setCompilerThreadPool(getConfigParameterInt(config, "threads", availableProcessors()));

	includesRaw = splitIncludes(getConfigParameter(config, "include"));
	workingDir = lookupTreeDef(config, "working-dir", "");
	CompilerConfig(
		getConfigParameter(config, "flowfile"),
		//includes : [string]
		includesRaw,
		makeResolvedIncludes(includesRaw, workingDir),
		workingDir,
		//objectFolders : [string]
		strSplit(getConfigParameter(config, "obj"), ","),
		//verbose : int
		verboseLevel,
		//jsParam
		JSCliParams(
			//jsfile : string,
			getConfigParameter(config, "js"),
			//esfile : string,
			getConfigParameter(config, "es6"),
			//typescriptFile : string,
			getConfigParameter(config, "ts"),
			//debug : bool,
			isConfigParameterTrue(config, "debug"),
			//code : bool,
			isConfigParameterTrue(config, "jscode"),
			//mutable modules : string,
			getConfigParameter(config, "jsmodules"),
			//comments : bool,
			isConfigParameterTrue(config, "jscomments"),
			//node : bool,
			isConfigParameterTrue(config, "nodejs"),
			// webmodule : bool,
			isConfigParameterTrue(config, "webmodule"),
			//isES6 : bool,
			false,
			//isTypeScript : bool,
			false,
			//tsProcess : TypeScriptProcessing,
			tsProcessing_dummy,
			//readable : bool,
			isConfigParameterTrue(config, "readable"),
			//beautify : bool,
			isConfigParameterTrue(config, "readable"),
			//sourcemap : bool,
			isConfigParameterTrue(config, "js-source-map"),
			//verbose : int,
			verboseLevel,
			//nwjs : bool
			isConfigParameterTrue(config, "nwjsmode"),
			// fontconfig : string
			getConfigParameter(config, "fontconfig"),
			// dcePreservedNames : Set<string>,
			dcePreservedNames,
			isConfigParameterTrue(config, "dce-remove-main"),
			getConfigParameter(config, "jslibraryobject"),
			isConfigParameterTrue(config, "call-main")
		),
		//config : Tree<string, string>
		config,
		s2i(getThreadId()), // current thread id
	);
}

compilerConfigToTree(config : CompilerConfig) -> Tree<string, string> {
	mergeTree(
		mergeTree(
			config.config,
			jsCliParamsToTree(config.jsParams),
		),
		getConstConfig([
			Pair("flowfile", config.flowfile),
			Pair("include", strGlue(config.includesRaw, ",")),
			Pair("working-dir", config.workingDir),
			Pair("obj", strGlue(config.objectFolders, ",")),
			Pair("verbose", i2s(config.verbose)),
			Pair("threadId", i2s(config.threadId)),
		])
	)
}

compilerConfigToString(config : CompilerConfig) -> string {
	"flowfile=" + config.flowfile + ", " +
	"verbose=" + i2s(config.verbose) + ", " +
	"includes=[" + strGlue(config.includesRaw, ",") + "], " +
	"objectFolders=[" + strGlue(config.objectFolders, ",") + "], " +
	"threadId=" + i2s(config.threadId) + ", " +
	strGlue(map(tree2pairs(config.config), \p -> p.first + "=" + p.second), ", ");
}

jsCliParamsToTree(params : JSCliParams) -> Tree<string, string> {
	getConstConfig([
		Pair("js", params.jsfile),
		Pair("es6", params.esfile),
		Pair("ts", params.typescriptFile),
		Pair("debug", b2s(params.debug)),
		Pair("jscode", b2s(params.code)),
		Pair("jsmodules", params.modules),
		Pair("jscomments", b2s(params.comments)),
		Pair("nodejs", b2s(params.node)),
		Pair("webmodule", b2s(params.webmodule)),
		Pair("isES6", b2s(params.isES6)),
		Pair("isTypeScript", b2s(params.isTypeScript)),
		Pair("readable", b2s(params.readable)),
		Pair("jsbeautify", b2s(params.beautify)),
		Pair("js-source-map", b2s(params.sourcemap)),
		Pair("jsverbose", i2s(params.verbose)),
		Pair("nwjs", b2s(params.nwjs)),
		Pair("fontconfig", params.fontconfig),
		Pair("dce-preserved-names", strGlue(set2array(params.dcePreservedNames), ",")),
		Pair("dce-remove-main", b2s(params.dceRemoveMain)),
		Pair("jslibraryobject", params.jslibraryObject),
		Pair("js-call-main", b2s(params.callMain))
	])
}

setConfigFlowfile(conf : CompilerConfig, file : string) -> CompilerConfig {
	CompilerConfig(conf with flowfile = file)
}

resolveFileToConfigDir(file : string, configDir : string) -> string {
	file2 = if (isAbsolutePath(file)) {
		file;
	} else {
		file2 = pathCombine(configDir, file);
		if (fileExists(file2)) {
			file2;
		} else {
			file;
		}
	}
	resolveRelativePath(file2);
}

resolveDirToConfigDir(dir : string, configDir : string) -> string {
	dir2 = if (isAbsolutePath(dir)) {
		dir;
	} else {
		dir2 = pathCombine(configDir, dir);
		if (isDirectory(dir2)) {
			dir2;
		} else {
			dir;
		}
	}
	resolveRelativePath(dir2);
}

resolvePathsInConfig(conf : CompilerConfig) -> CompilerConfig {
	cwd = normalizePath(resolveRelativePath("."));
	configDir = findFlowConfigDir(fcDirName(resolveRelativePath(changeFileExt(conf.flowfile, ".flow"))));

	// Setup the 'output-dir' in case it is not set explicitly.
	conf1 = switch (lookupTree(conf.config, "output-dir")) {
		Some(__): conf.config;
		None():   setTree(conf.config, "output-dir", cwd);
	}
	// Add a flowfile as a config tree option.
	conf3 = setTree(conf1, "file", conf.flowfile);

	resolve_fontconfig = \file -> {
		resolved = resolveFileToConfigDir(file, configDir);
		setTree(setTree(conf3, "fontconfig", resolved), "fontconfig-file", resolved);
	}

	// Resolve relative path for 'fontconfig', because server may run in a different place.
	conf4 = switch (lookupTree(conf3, "fontconfig")) {
		Some(file): resolve_fontconfig(file);
		None(): {
			switch (lookupTree(conf3, "fontconfig-file")) {
				Some(file): resolve_fontconfig(file);
				None(): conf3;
			}
		}
	}

	// Resolve relative path for 'js-extern-lib', because server may run in a different place.
	conf6 = switch (lookupTree(conf4, "js-extern-lib")) {
		Some(file): setTree(conf4, "js-extern-lib", resolveFileToConfigDir(file, configDir));
		None(): conf4;
	}

	// Update 'fontconfig' field in JSCliParams
	fontconfig = lookupTreeDef(conf6, "fontconfig-file", conf.jsParams.fontconfig);
	jsParams = JSCliParams(conf.jsParams with fontconfig = resolveFileToConfigDir(fontconfig, configDir));

	conf7 = switch (lookupTree(conf6, "java-natives")) {
		Some(natives):
			setTree(conf6, "java-natives",
				strGlue(filtermap(strSplit(natives, ","), \nat ->
					if (isSpace(nat)) None() else {
						Some(resolveDirToConfigDir(nat, configDir))
					}
				), ",")
			);
		None(): conf6;
	}

	CompilerConfig(conf with
		config = conf7,
		jsParams = jsParams
	);
}

patchRemoteConfig(config : CompilerConfig) -> CompilerConfig {
	// Output the result
	CompilerConfig(resolvePathsInConfig(config) with
		includesResolved = makeResolvedIncludes(config.includesRaw, config.workingDir),
	);
}

setConfigOption(conf : CompilerConfig, opt : string, val : string) -> CompilerConfig {
	isIncludesOpt = opt == "I" || opt == "include";
	includesRaw = if (isIncludesOpt && val != "") {
		uniq(concat(conf.includesRaw, splitIncludes(val)));
	} else conf.includesRaw;
	workingDir = if (opt == "working-dir") val else conf.workingDir;
	includesResolved = if (includesRaw == conf.includesRaw && workingDir == conf.workingDir) {
		conf.includesResolved;
	} else {
		makeResolvedIncludes(includesRaw, workingDir);
	}
	CompilerConfig(conf with
		flowfile = if (opt == "file" || opt == "flowfile") val else conf.flowfile,
		includesRaw = includesRaw,
		includesResolved = includesResolved,
		workingDir = workingDir,
		objectFolders = if (opt == "obj" || opt == "objectFolders") strSplit(val, ",") else conf.objectFolders,
		verbose = if (opt == "verbose") s2i(val) else conf.verbose,
		jsParams = JSCliParams(conf.jsParams with
			jsfile = if (opt == "js") val else if (opt == "html") val + ".js" else conf.jsParams.jsfile,
			esfile = if (opt == "es6") val else conf.jsParams.esfile,
			typescriptFile = if (opt == "ts") val else conf.jsParams.typescriptFile,
			debug = if (opt == "debug") s2b(val) else conf.jsParams.debug,
			code = if (opt == "jscode") s2b(val) else conf.jsParams.code,
			modules = if (opt == "jsmodules") val else conf.jsParams.modules,
			comments = if (opt == "jscomments") s2b(val) else conf.jsParams.comments,
			node = if (opt == "nodejs") s2b(val) else conf.jsParams.node,
			webmodule = if (opt == "webmodule") s2b(val) else conf.jsParams.webmodule,
			readable = if (opt == "readable") s2b(val) else conf.jsParams.readable,
			beautify = if (opt == "jsbeautify") s2b(val) else conf.jsParams.beautify,
			sourcemap = if (opt == "js-source-map") s2b(val) else conf.jsParams.sourcemap,
			verbose = if (opt == "jsverbose") s2i(val) else conf.jsParams.verbose,
			nwjs = if (opt == "nwjs" || opt == "nwjsmode") s2b(val) else conf.jsParams.nwjs,
			fontconfig = if (opt == "fontconfig-file" || opt == "fontconfig") val else conf.jsParams.fontconfig,
			dcePreservedNames = if (opt == "dce-preserved-names") buildSet(strSplit(val, ",")) else conf.jsParams.dcePreservedNames,
			dceRemoveMain = if (opt == "dce-remove-main") s2b(val) else conf.jsParams.dceRemoveMain,
			jslibraryObject = if (opt == "jslibraryobject") val else conf.jsParams.jslibraryObject,
			callMain = if (opt == "js-call-main") s2b(val) else conf.jsParams.callMain,
		),
		config = if (isIncludesOpt) conf.config else setTree(conf.config, opt, val)
	);
}

setConfigOptions(conf : CompilerConfig, opt_pairs : [Pair<string, string>]) -> CompilerConfig {
	fold(opt_pairs, conf, \acc, pair -> setConfigOption(acc, pair.first, pair.second));
}

fcExternIncludes(parentConfDir : string, includeExtern : [string], globalConfigM : Maybe<CompilerConfig>) -> [string] {
	if (includeExtern == []) [] else {
		mapConcat(includeExtern, \confFile -> {
			if (!fileExists(confFile)) {
				msg = "WARNING: Could not find external flow.config file: " + confFile + " specified in " + parentConfDir + "/flow.config";
				eitherFn(
					globalConfigM,
					\globalConfig -> if (globalConfig.threadId > 0) fcPrintln(msg, globalConfig.threadId),
					\ -> println(msg)
				);
				[];
			} else {
				confingText = getFileContent(confFile);
				confDir2 = fcDirName(confFile);
				externConf = parseFlowConfig(confingText, confDir2);
				includesStr = lookupTreeDef(externConf, "include", "");
				includes = splitIncludes(includesStr);
				concat([confDir2], map(includes, \incl ->
					if (isAbsolutePath(incl)) incl else
					resolveRelativePath(pathCombine(confDir2, incl))
				));
			}
		});
	}
}

fcProgramVersion(program : string) -> string {
	out = ref "";
	err = ref false;
	exit_code = execSystemProcess(program, ["-version"], ".", \o -> out := ^out + "\n" + o, \e -> err := true);
	if (exit_code == 0 && !^err) ^out else "";
}
