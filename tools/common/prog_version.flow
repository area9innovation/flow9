import sys/process;

export {
	// Try to invoke `prog --version`, find there a line with version and extract the version,
	// which is of format like 11.0.13 or "11.0.13" and follows the `prefix` argument.
	// So, version like: `11.0.13` will be represented as an array `[11, 0, 13]`
	// Empty array means no version information, may be used to check if a programm is installed.
	programVersion(prog : string, ver_opt : string, prefix : string) -> [int];

	// Lexicographically compare two version arrays: go down to the smallest common rank and do a comparison.
	// i.e. `1.2.3` < `1.3.1` and `1.2.3` == `1.2`
	compareVersion(v1 : [int], v2 : [int], cmp : (int, int) -> bool) -> bool;
}

programVersion(prog : string, ver_opt : string, prefix : string) -> [int] {
	out = execSystemProcessOutput(prog, [ver_opt], ".");
	if (out.exitCode != 0) [] else {
		lines = strSplit(out.stdall, "\n");
		pref = toLowerCase(prefix);
		switch (find(lines, \line -> strContains(toLowerCase(line), pref))) {
			Some(line0): {
				line = toLowerCase(line0);
				str1 = trim(substring(line, strIndexOf(line, pref) + strlen(pref), strlen(line)));
				words = strSplit(str1, " ");
				if (length(words) == 0) [] else {
					ver_str = trim2(words[0], " \t\"'");
					nums = strSplit(ver_str, ".");
					if (!forall(nums, isDigits)) {
						[]
					} else {
						map(nums, s2i);
					}
				}
			}
			None(): [];
		}
	}
}

compareVersion(v1 : [int], v2 : [int], cmp : (int, int) -> bool) -> bool {
	if (length(v1) == 0 || length(v2) == 0) {
		false; 
	} else {
		doCompareVersion(v1, v2, cmp, 0);
	}
}

doCompareVersion(v1 : [int], v2 : [int], cmp : (int, int) -> bool, i : int) -> bool {
	if (i == length(v1) || i == length(v2)) {
		cmp(v1[i - 1], v2[i - 1]);
	} else {
		if (v1[i] == v2[i]) {
			doCompareVersion(v1, v2, cmp, i + 1);
		} else {
			cmp(v1[i], v2[i]);
		}
	}
}
