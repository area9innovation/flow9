import string;

export {
	/*
	Whips out the header messages from flowc1 output like:
		Flow compiler (3rd generation)

		Processing 'tools/flowc/flowc' on http server
		<< Meaningful compiler messages >>
		done in 0.76s
	
	into just 
		<< Meaningful compiler messages >>
	*/
	trimFlowcHeaderFromOutput(out : string) -> string;
}

lspLTrimLines(lines : [string]) -> [string] {
	if (length(lines) == 0 || trim2(lines[0], " \t\r") != "") {
		lines 
	} else {
		lspLTrimLines(tail(lines));
	}
}

lspLTrimLines2(lines : [string], beginning : string) -> [string] {
	if (length(lines) == 0 || !startsWith(lines[0], beginning)) {
		lines 
	} else {
		lspLTrimLines(tail(lines));
	}
}

lspRTrimLines(lines : [string]) -> [string] {
	if (length(lines) == 0 || trim2(lastElement(lines, ""), " \t\r") != "") {
		lines 
	} else {
		lspRTrimLines(take(lines, length(lines) - 1));
	}
}

lspRTrimLines2(lines : [string], beginning : string) -> [string] {
	if (length(lines) == 0 || !startsWith(lastElement(lines, ""), beginning)) {
		lines 
	} else {
		lspRTrimLines(take(lines, length(lines) - 1));
	}
}

lspTrimLines(lines : [string]) -> [string] {
	lspLTrimLines(lspRTrimLines(lines));
}

trimFlowcHeaderFromOutput(out : string) -> string {
	lines0 = strSplit(out, "\n");
	
	lines1 = lspLTrimLines2(lines0, "Flow compiler (3rd generation)");
	lines2 = lspLTrimLines(lines1);
	lines3 = lspLTrimLines2(lines2, "Processing '");
	lines4 = lspLTrimLines(lines3);

	lines5 = lspRTrimLines(lines4);
	lines6 = lspRTrimLines2(lines5, "done in ");
	lines7 = lspRTrimLines(lines6);
	strGlue(lines7, "\n");
}
