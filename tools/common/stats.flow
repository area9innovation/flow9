import sys/concurrent;
import math/hash;
import math/stringmath;

export {
	// Add statistics for some entity, identified by name - a single double value.
	addStats(name: string, v: double) -> void;

	// Produce the following statistics for the `name` entity:
	//  - number of entries
	//  - average value
	//  - standard deviation
	//  - min of all entries
	//  - max of all entries
	showStats(name: string) -> string;
}

StatsData(
	add: (double) -> void,
	vals: ref List<double>
);

stats_db: native = initConcurrentHashMap();

addStats(name: string, v: double) -> void {
	switch (getConcurrentHashMap(stats_db, name, None())) {
		Some(data): {
			data.add(v);
		}
		None(): {
			list = ref makeList1(v);
			setConcurrentHashMap(stats_db, name,
				Some(StatsData(synchronizedUnaryFn(list, \x -> rlistPush(list, x)), list))
			);
		}
	}
}

showStats(name: string) -> string {
	switch (getConcurrentHashMap(stats_db, name, None())) {
		Some(data): {
			vals = list2array(^(data.vals));
			sum = fold(vals, 0.0, \acc, v -> acc + v);
			min_v = fold(vals, doubleMax, \acc, v -> min(acc, v));
			max_v = fold(vals, doubleMin, \acc, v -> max(acc, v));
			avg = sum / i2d(length(vals));
			sum1 = fold(vals, 0.0, \acc, v -> acc + (avg - v) * (avg - v));
			sig =  sqrt(sum1) / i2d(length(vals));
			"N=" + i2s(length(vals)) + ", avg=" + d2st(avg, 3) + ", " + "sig=" + d2st(sig, 3) + ", min=" + d2st(min_v, 3) + ", max=" + d2st(max_v, 3);
		}
		None(): {
			"no such statistics: " + name;
		}
	}
}