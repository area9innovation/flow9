import sys/concurrent;
import math/hash;
import math/stringmath;

export {
	// Add statistics for some entity, identified by name - a single double value.
	addStats(name: string, v: double) -> void;

	// Produce the following statistics for the `name` entity:
	//  - number of entries
	//  - average value
	//  - standard deviation
	//  - sum of all entries
	showStats(name: string) -> string;
}

StatsData(
	add: (double) -> void,
	vals: ref [double]
);

stats_db: native = initConcurrentHashMap();

addStats(name: string, v: double) -> void {
	switch (getConcurrentHashMap(stats_db, name, None())) {
		Some(data): {
			data.add(v);
		}
		None(): {
			arr = ref [v];
			setConcurrentHashMap(stats_db, name,
				Some(StatsData(synchronizedUnaryFn(arr, \x -> refArrayPush(arr, x)), arr))
			);
		}
	}
}

showStats(name: string) -> string {
	switch (getConcurrentHashMap(stats_db, name, None())) {
		Some(data): {
			sum = fold(^(data.vals), 0.0, \acc, v -> acc + v);
			avg = sum / i2d(length(^(data.vals)));
			sum1 = fold(^(data.vals), 0.0, \acc, v -> acc + (avg - v) * (avg - v));
			sig =  sqrt(sum1) / i2d(length(^(data.vals)));
			"N=" + i2s(length(^(data.vals))) + ", avg=" + d2st(avg, 3) + ", " + "sig=" + d2st(sig, 3) + ", sum=" + d2st(sum, 1);
		}
		None(): {
			"no such statistics: " + name;
		}
	}
}