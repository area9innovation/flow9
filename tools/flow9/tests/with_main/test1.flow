Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

// a = debugtyping2;

either(m: Maybe<?>, alternative: ?) -> ? {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): v;
	}
}

maybeBind(m : Maybe<?>, f : (?) -> Maybe<??>) -> Maybe<??> {
    switch (m : Maybe) {
        None(): None();
        Some(v): f(v);
    }
}

maybeMap(m : Maybe<?>, f : (?) -> ??) -> Maybe<??> {
	switch (m : Maybe) {
		None(): None();
		Some(v): Some(f(v));
	}
}

eitherMap(m : Maybe<?>, fn : (?) -> ??, alternative: ??) -> ?? {
	switch (m : Maybe) {
		None(): alternative;
		Some(v): fn(v);
	}
}

func(x : Maybe<string>) -> string {
	eitherMap(
		maybeBind(x, \s1 -> 
			if (s1 == "") None() else Some(s1 + "+")
		), 
		\s2 -> s2 + "*",
		"-"
	);
}

native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;

main() -> void {
	println2("Test1...");
	println2(func(None()));
	println2(func(Some("")));
	println2(func(Some("A")));
	quit(0);
}
