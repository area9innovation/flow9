// check if these are structs of the same type; isSameStructType(a,a) == isStruct
native isSameStructType : (value1 : flow, value2 : flow) -> bool = Native.isSameStructType;

// Apply a collecting function.  This is a left fold, i.e., it folds with the start of
// the array first, i.e., fold([x1, x2, x3], x0, o) = ((x0 o x1) o x2) o x3
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;

extractStruct(a : [?], e : ??) -> ?? {
	fold(a, e, \acc, el : ? -> if (isSameStructType(acc, el)) {
		// Funky way to down-cast. This should not work, but it seems we get away with it
		t : ?? = el;
		t
	} else acc);
}

U ::= A, B, C;
A(a : int);
B(b : bool);
C(c : string);

native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native toString2 : (flow) -> string = Native.toString;

main() -> void {
	println2("Test6...");
	println2(extractStruct([A(5), B(false), C("abc")], B(true)));
	println2(extractStruct([A(5), B(false), C("abc")], C("")));
	println2(extractStruct([A(5), B(false), C("abc")], A(0)));
	quit(0);
}
