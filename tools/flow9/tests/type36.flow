Tree<?, ??> ::= TreeNode<?, ??>, TreeEmpty;
	TreeNode : (key : ?, value : ??, left : Tree<?, ??>, right : Tree<?, ??>, depth : int);
	TreeEmpty : ();

makeTree() -> Tree<?, ??> {
	TreeEmpty();
}

foldTree(
	tree : Tree<?, ??>,
	acc : ???,
	f : (key : ?, value : ??, acc : ???) -> ???
) -> ??? {
	acc;
}

native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;

treePushToArrayValue(tree : Tree<?, [??]>, key : ?, value : ??) -> Tree<?, [??]> {
	tree;
}

DUnion(id : string, typars : [DTypePar], types : [DTypeName], pos : int);

	DType ::= DTypePar, DTypeName, DTypeFunction;
		// This is used for void, int, Maybe, etc. Also, "auto" is used for implicit types
		DTypeName(id : string, typars : [DType], pos : int);
		// This is ?, ??, ...
		DTypePar(id : string, pos : int);
		DTypeFunction(args : [DType], returnType : DType, pos : int);

makeDSupers(unions : Tree<string, DUnion>) -> Tree<string, [string]> {
	foldTree(unions, makeTree(), \un, uni, acc -> {
		fold(uni.types, acc, \acc2, tn -> {
			treePushToArrayValue(acc2, tn.id, un)
		})
	});
}
