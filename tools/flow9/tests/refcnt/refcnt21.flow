native println2 : io (flow) -> void = Native.println;
native isSameStructType : (value1 : ?, value2 : ??) -> bool = Native.isSameStructType;
native extractStruct : (a : [?], e : ??) -> ?? = Native.extractStruct;

Struct1(v : Union1);
Struct2(v : Union1, s : string);
Struct3();

Union1 ::= Struct1, Struct2, Struct3;

// ------------------------------------------------------------------------------------------
foo1() -> void {
	v = Struct1(Struct2(Struct3(), "s2"));

	switch (v.v : Union1) {
		Struct1(v2) : println2(if (isSameStructType(v2, Struct3())) "s1 : yes" else "s1 : no");
		Struct2(v2, s) : println2((if (isSameStructType(v2, Struct3())) "s2 : yes <= " else "s2 : no <= ") + s);
		Struct3() : println2("st3");
	} // s2 : yes
	{}
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	a = extractStruct([Struct1(Struct2(Struct3(), "s1")), Struct3()], Struct1(Struct3()));
}
// ------------------------------------------------------------------------------------------
main() {
	foo1();
	foo2();
	{}
	// std::cout<<"_____________" <<std::endl;
}
