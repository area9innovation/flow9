native println2 : io (flow) -> void = Native.println;
native isSameStructType : (value1 : ?, value2 : ??) -> bool = Native.isSameStructType;

Struct1();
Struct2();
Struct3();
Struct4(val1 : StructVal, val2 : StructVal, val3 : StructVal);
Struct5();

StructVal(i : int);

Union1 ::= Struct1, Struct2;
Union2 ::= Struct3, Struct4;
Union3 ::= Struct5;

UnionUnion ::= Union1, Union2, Struct5;

// ------------------------------------------------------------------------------------------
foo1() -> void {
	v : UnionUnion = Struct4(StructVal(1), StructVal(3), StructVal(3));
	switch (v : UnionUnion) {
		Struct1() : println2("part of a subunion");
		Struct2() : println2("part of a subunion");
		Struct3() : println2("union inside the union");
		Struct4(__, __, __) : println2("union inside the union");
		Struct5() : println2("independent item");
	}
	{}
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	switch (Struct3() : UnionUnion) {
		Struct1() : println2("part of a subunion");
		Struct2() : println2("part of a subunion");
		Union2() : println2("union inside the union");
		Struct5() : println2("independent item");
	}
}
// ------------------------------------------------------------------------------------------
compareUnions1(union1 : UnionUnion, union2 : UnionUnion) -> bool {
	isSameStructType(union1, union2)
}

compareUnions2(union1 : UnionUnion, union2 : Union2) -> bool {
	isSameStructType(union1, union2)
}

compareUnions3(union1 : UnionUnion, union2 : Union3) -> bool {
	isSameStructType(union1, union2)
}
foo3() -> void {
	compareUnions1(Struct1(), Struct4(StructVal(11), StructVal(12), StructVal(13))); // false
	{}
}
// ------------------------------------------------------------------------------------------
foo4() -> void {
	a = Struct4(StructVal(21), StructVal(22), StructVal(23));
	b = Struct4(StructVal(21), StructVal(22), StructVal(23));
	compareUnions2(a, b); // true
	b;
	{}
}
// ------------------------------------------------------------------------------------------
foo5() -> void {
	compareUnions3(Struct5(), Struct5()); // true
	{}
}
// ------------------------------------------------------------------------------------------
foo6() -> void {
	a : Union3 = Struct5();
	{}
}
// ------------------------------------------------------------------------------------------
foo7() -> void {
	a = Struct1();
	b = Struct2();
	isSameStructType(a, b);
	b;
	{}
}
// ------------------------------------------------------------------------------------------
main() {
	foo1();
	foo2();
	foo3();
	foo4();
	foo5();
	foo6();
	foo7();
	{}
	// std::cout<<"_____________" <<std::endl;
}
