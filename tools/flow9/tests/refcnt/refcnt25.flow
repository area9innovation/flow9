native println2 : io (flow) -> void = Native.println;
native isArray : (value : flow) -> bool = Native.isArray;
native enumFromTo : (start : int, end : int) -> [int] = Native.enumFromTo;
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native length : ([?]) -> int = Native.length;
native concat : ([?], [?]) -> [?] = Native.concat;
native replace : ([?], int, ?) -> [?] = Native.replace;
native map : ([?], (?) -> ??) -> [??] = Native.map;
native iter : ([?], (?)->void) -> void = Native.iter;
native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
native iteriUntil : ([?], (int, ?)->bool) -> int = Native.iteriUntil;
native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;

Struct1(i : int);
// ------------------------------------------------------------------------------------------
foo1() -> void {
	b1 = isArray([1, 2]);
	b2 = isArray(2);
	b3= isArray(Struct1(4));
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	a = enumFromTo(1, -1);
	b = enumFromTo(1, 1);
	c = enumFromTo(1, 3);
}
// ------------------------------------------------------------------------------------------
getFirstValue(v1 : Struct1, v2 : Struct1) -> Struct1 {
	v1;
}
getSecondValue(v1 : Struct1, v2 : Struct1) -> Struct1 {
	v2;
}
getNewOrOldValue(v1 : Struct1, v2 : Struct1) -> Struct1 {
	i = v2.i;
	if (i < 0) Struct1(-6) else v1;
}
foo3() -> void {
	//a = fold([], "", \acc, v -> "-"); // error about types
	arr = [Struct1(1), Struct1(2)];
	e = fold(arr, Struct1(-1), getFirstValue);
	f = fold(arr, Struct1(-1), getSecondValue);
	// b = fold(arr, -1, \acc, v -> acc); // TODO : lambda
	// c = fold(arr, -1, \acc, v -> v); // TODO : lambda
	length(arr);
	g = fold([Struct1(-1), Struct1(2)], Struct1(-1), getNewOrOldValue); // OK
	// d = fold([1, 2], -1, \acc, v -> if (v == 1) 3 else acc); // TODO : lambda
}
// ------------------------------------------------------------------------------------------
foo4() -> void {
	arr1 = [Struct1(1), Struct1(2)];
	arr2 = [Struct1(3), Struct1(4)];
	a = concat(arr1, arr2);
	b = concat(arr1, [Struct1(5)]);
	c = concat([Struct1(6)], arr2);
	d = concat([Struct1(7)], [Struct1(6)]);
}
// ------------------------------------------------------------------------------------------
foo5() -> void {
	a = [Struct1(1), Struct1(2)];
	println2(replace(a, 3, Struct1(3))); // push
}
// ------------------------------------------------------------------------------------------
foo6() -> void {
	println2(replace([Struct1(1), Struct1(2)], 1, Struct1(4))); //reuse array
}
// ------------------------------------------------------------------------------------------
foo7() -> void {
	d = [Struct1(1), Struct1(2)];
	println2(replace(d, 1, Struct1(5))); // new array
	d;
	{}
}
// ------------------------------------------------------------------------------------------
foo8() -> void {
	d = [Struct1(1), Struct1(2)];
	println2(replace(d, 3, Struct1(5))); // new array
	d;
	{}
}
// ------------------------------------------------------------------------------------------
foo9() -> void {
	v = Struct1(1);
	arr = [v, v];
	println2(replace(arr, 1, Struct1(2)));
	v;
	{}
}
// ------------------------------------------------------------------------------------------
foo10() -> void {
	println2(fold([Struct1(-1), Struct1(-2)], Struct1(-3), getFirstValue));

	v = Struct1(1);
	arr = [v, v];
	println2(fold(arr, Struct1(2), getSecondValue));
	v;
	{}
}
// ------------------------------------------------------------------------------------------
fn11(v : Struct1) -> Struct1 { v }
foo11() -> void {
	arr = [Struct1(1), Struct1(2)];
	map(arr, fn11); // TODO: lambda
	arr;
	{}
}
// ------------------------------------------------------------------------------------------
fn12(v : Struct1) -> Struct1 { Struct1(-1); }
foo12() -> void {
	arr = [Struct1(1), Struct1(2)];
	map(arr, fn12); // TODO: lambda
	arr;
	{}
}
// ------------------------------------------------------------------------------------------
fn13(v : Struct1) -> Struct1 { v }
foo13() -> void {
	map([Struct1(1), Struct1(2)], fn13); // TODO: lambda
	{}
}
// ------------------------------------------------------------------------------------------
fn14(v : Struct1) -> Struct1 { Struct1(-1); }
foo14() -> void {
	map([Struct1(1), Struct1(2)], fn14); // TODO: lambda
	{}
}
// ------------------------------------------------------------------------------------------
fn15(v : Struct1) -> Struct1 { Struct1(-1); }
foo15() -> void {
	v = Struct1(1);
	map([v, v], fn15); // TODO: lambda
	v;
	{}
}
// ------------------------------------------------------------------------------------------
fn16(v : Struct1) -> Struct1 { v; }
foo16() -> void {
	v = Struct1(1);
	map([v, v], fn16); // TODO: lambda
	v;
	{}
}
// ------------------------------------------------------------------------------------------
fn17(v : Struct1) -> void {  }
foo17() -> void {
	v = Struct1(1);
	iter([v, v], fn17); // TODO: lambda
	v;
	{}
}
// ------------------------------------------------------------------------------------------
fn18(v : Struct1) -> void {  }
foo18() -> void {
	iter([Struct1(1), Struct1(2)], fn18); // TODO: lambda
	{}
}
// ------------------------------------------------------------------------------------------
fn19(v : Struct1) -> void {  }
foo19() -> void {
	arr = [Struct1(1), Struct1(2)];
	iter(arr, fn19); // TODO: lambda
	arr;
	{}
}
// ------------------------------------------------------------------------------------------
// TODO: filter, iteri, iteriUntil
// ------------------------------------------------------------------------------------------
main() {
	// foo1();
	// foo2();
	// foo3();
	// foo4();
	// foo5();
	// foo6();
	// foo7();
	// foo8();
	// foo9();
	// foo10();
	// foo11();
	// foo12();
	// foo13();
	// foo14();
	// foo15();
	// foo16();
	foo17();
	foo18();
	foo19();
	{}
}
