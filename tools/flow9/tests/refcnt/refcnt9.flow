native println2 : io (flow) -> void = Native.println;
Struct(v : int);
Union ::= Struct, Struct2;
Struct2(s : string);
Struct3(s : string);
Struct4(s : string);
Struct5(s : string);
Struct6(s : string);

Union2 ::= Struct, Struct2, Struct3, Struct4, Struct5, Struct6;
// ------------------------------------------------------------------------------------------
foo1() -> void {
	a = Struct(1); // dup(a)
	println2(a); // dup(a) // in println : drop(a)
	b = Struct(a.v + 2 + a.v); // no dup(a) because this is the last use // in + : drop(a) // no dup(b) because this is the last use
	println2("END FOO 1");
}
// ------------------------------------------------------------------------------------------
fn2(a : Struct) -> Struct {
	c = a; // dup(a) // drop(a) inside '=' // dup(c)
	b = a; // no dup(a) because this is the last use // drop(a) inside '=' // no dup(b) because this is the last use 
	c; // dup(return_value) // no dup(c) because this is the last use // drop(c) 
	/*
		c;
		==
		tmp = c; // drop(c) // dup(tmp)
		return tmp;
	*/
}
foo2() -> void {
	i = Struct(22); // dup(i)
	fn2(i); // no dup(i) because this is the last use
	println2("END FOO 2");
}
// ------------------------------------------------------------------------------------------
// return = create a tmp var
fn3(a : Struct, c : Struct) -> Struct {
	b = a; // dup(a) // drop(a) inside '=' // no dup(b) because this is the last use
	// a; --> tmp = a; return tmp;
	a; // dup(return_value) // no dup(a) because this is the last use // drop(a) because Dangling/Hanging var = expr 
//  a + 1; --> tmp = a + 1; return tmp;
//  a + 1; // dup(return_value) // no dup(a) because this is the last use // in + : drop(a)
}
foo3() -> void {
	i = Struct(35); // dup(i)
	j = Struct(37);
	// TODO: variants:
	// 1) don't add dup() + fn(Type var) (without &)
	// 2) add tmp var. auto _tmp = ...; fn(dup(_tmp));
	v = fn3(i, j); // no dup(i) because this is the last use // dup(v) // in fn3 drop(i)
	println2(v); // no dup(v) because this is the last use // in println drop(v)
	println2("END FOO 3");
}
// ------------------------------------------------------------------------------------------
foo4() -> void {
	a = 4;
	b = a + 2 + a * 5;
	println2("END FOO 4");
}
// ------------------------------------------------------------------------------------------
foo5(a : Struct) -> Struct {
	a;
}
// ------------------------------------------------------------------------------------------
foo6(a : Struct) -> Struct {
	a;
	b = Struct(68);
	b;
}
// ------------------------------------------------------------------------------------------
foo7() -> Struct {
	Struct(705)
}
// ------------------------------------------------------------------------------------------
foo8() -> void {
	a = Struct(809);
	println2("Before IF");
	if (a.v > 8) {
		println2(a);
	} else {
		println2("else");
	}
	println2("After IF");
}
// ------------------------------------------------------------------------------------------
foo9() -> void {
	a = Struct(809);
	println2("Before IF");
	if (a.v > 8) {
		println2("yes");
	} else {
		println2("no");
	}
	println2("After IF");
}
// ------------------------------------------------------------------------------------------
foo9_2() -> void {
	a = Struct(809);
	println2("Before IF");
	if (a.v > 8) {
		a;
		println2(a);
	} else {
		println2("else");
	}
	a;
	println2("After IF");
}
// ------------------------------------------------------------------------------------------
foo10() -> Struct {
	a = Struct(809);
	println2("Before IF");
	b = if (false) {println2(a); Struct(201);} else {Struct(801);}
	println2("After IF");
	b;
}
// ------------------------------------------------------------------------------------------
foo11() -> Struct {
	a = Struct(809);
	println2("Before IF");
	b = if (false) {println2(a); Struct(201);} else {Struct(801);}
	println2("After IF");
	a;
	b;
}
// ------------------------------------------------------------------------------------------
foo12() -> Struct {
	a = Struct(809);
	println2("Before IF");
	b = if (a.v > 8) a else Struct(801);
	println2("After IF");
	b;
}
// ------------------------------------------------------------------------------------------
foo13() -> Struct {
	a = Struct(809);
	println2("Before IF");
	b = if (a.v > 8) {println2(a); a} else Struct(801);
	println2("After IF");
	b;
}
// ------------------------------------------------------------------------------------------
foo14() -> int {
	a = Struct(809);
	println2("Before IF");
	b = if (a.v > 8) 10 else 20;
	println2("After IF");
	a;
	b;
}
// ------------------------------------------------------------------------------------------
foo15() -> int {
	a = Struct(809);
	println2("Before IF");
	b = if (a.v > 8) 10 else 20;
	println2("After IF");
	b;
}
// ------------------------------------------------------------------------------------------
foo16() -> int {
	a = Struct(809);
	println2("Before IF");
	b = if ( (a.v - a.v + a.v * 2) > 809) 10 else 20;
	println2("After IF");
	b;
}
// ------------------------------------------------------------------------------------------
foo17() -> int {
	println2("Before IF");
	b = if ( Struct(809).v > 808) {println2("Inside IF");10} else {println2("Inside IF");20;}
	println2("After IF");
	b;
}
// ------------------------------------------------------------------------------------------
makeStruct() -> Struct {
	Struct(18);
}
foo18() -> int {
	println2("Before IF");
	b = if ( makeStruct().v > 809) {println2("Inside IF");10} else {println2("Inside IF");20;}
	println2("After IF");
	b;
}
// ------------------------------------------------------------------------------------------
foo19() -> int {
	println2("Before IF");
	if ( Struct(809).v > 808) {println2("Inside IF");10} else {println2("Inside IF");20;}
}
// ------------------------------------------------------------------------------------------
foo20() -> int {
	println2("Before IF");
	if ( makeStruct().v > 809) {println2("Inside IF");10} else {println2("Inside IF");20;}
}
// ------------------------------------------------------------------------------------------
getUnionVar() -> Union {
	Struct(21);
}
foo21() -> int {
	println2("Before SWITCH");
	b = switch (getUnionVar() : Union) {
		Struct(v): 1;
		Struct2(s): 2;
	};
	println2("After SWITCH");
	b;
}
// ------------------------------------------------------------------------------------------
foo22() -> int {
	a : Union = Struct(637);
	println2("Before SWITCH");
	b = switch (a : Union) {
		Struct(v): 101;
		Struct2(s): 201;
	};
	println2("After SWITCH");
	b;
}
// ------------------------------------------------------------------------------------------
foo23() -> int {
	a : Union2 = Struct(637);
	println2("Before SWITCH");
	b = switch (a : Union2) {
		Struct(v): 101;
		Struct2(s): 201;
		Struct3(s): 301;
		Struct4(s): 401;
		Struct5(s): 501;
		Struct6(s): 601;
	};
	println2("After SWITCH");
	b;
}
// ------------------------------------------------------------------------------------------
foo24() -> int {
	a : Union = Struct(637);
	println2("Before SWITCH");
	b = switch (a : Union) {
		Struct(v): 101;
		Struct2(s): 201;
	};
	println2("After SWITCH");
	a;
	b;
}
// ------------------------------------------------------------------------------------------
foo25() -> int {
	a : Union2 = Struct(637);
	println2("Before SWITCH");
	b = switch (a : Union2) {
		Struct(v): 101;
		Struct2(s): 201;
		Struct3(s): 301;
		Struct4(s): 401;
		Struct5(s): 501;
		Struct6(s): 601;
	};
	println2("After SWITCH");
	a;
	b;
}
// ------------------------------------------------------------------------------------------
main() {
	println2("------------------------");
	println2("FOO 1");
	foo1();
	println2("------------------------");
	println2("FOO 2");
	foo2();
	println2("------------------------");
	println2("FOO 3");
	foo3();
	println2("------------------------");
	println2("FOO 4");
	foo4();
	println2("------------------------");
	println2("FOO 5");
	foo5(Struct(563));
	println2("FOO 7 & 5");
	foo5(foo7());
	println2("------------------------");
	println2("FOO 6");
	foo6(Struct(999));
	println2("------------------------");
	println2("FOO 8");
	foo8();
	println2("------------------------");
	println2("FOO 9");
	foo9();
	println2("------------------------");
	println2("FOO 9.2");
	foo9_2();
	println2("------------------------");
	println2("FOO 10");
	foo10();
	println2("------------------------");
	println2("FOO 11");
	foo11();
	println2("------------------------");
	println2("FOO 12");
	foo12();
	println2("------------------------");
	println2("FOO 13");
	foo13();
	println2("------------------------");
	println2("FOO 14");
	foo14();
	println2("------------------------");
	println2("FOO 15");
	foo15();
	println2("------------------------");
	println2("FOO 16");
	foo16();
	println2("------------------------");
	println2("FOO 17");
	foo17(); // TODO
	println2("------------------------");
	println2("FOO 18");
	foo18(); // TODO
	println2("------------------------");
	println2("FOO 19");
	foo19();
	println2("------------------------");
	println2("FOO 20");
	foo20();
	println2("------------------------");
	foo7();
	println2("FOO 21");
	foo21();
	println2("------------------------");
	println2("FOO 22");
	foo22();
	println2("------------------------");
	println2("FOO 23");
	foo23();
	println2("------------------------");
	println2("FOO 24");
	foo24();
	println2("------------------------");
	println2("FOO 25");
	foo25();
	println2("------------------------");
}
// ------------------------------------------------------------------------------------------


// TODO: 
// 1) dup(return_value) or not dup ?
// if the result of the fn is ignored. example : fn2 in foo2
// 2) unused arguments
// when to delete/drop? example : c in fn3()


/*

main() {
	foo();
}

+(a : string, b : string) -> string {
	dup(native_+(drop(a), drop(b));
}

*/
