native println2 : io (flow) -> void = Native.println;

Struct1(i : int);
Struct2();
Struct5();

Struct3(arr : [Union1]);
Struct4(s : Struct1);

Union1 ::= Struct1, Struct5, Struct2;

// ------------------------------------------------------------------------------------------
foo1() -> void {
	b = Struct1(10);
	c = Struct1(10);
	a = b == c;
	i = 2 == 3;
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	b = Struct1(10);
	c = Struct1(10);
	f = b.i == c.i;
}
// ------------------------------------------------------------------------------------------
foo3() -> void {
	a = Struct4(Struct1(10));
	b = Struct4(Struct1(10));
	c = a == b;
}
// ------------------------------------------------------------------------------------------
foo4() -> void {
	b = Struct3([]);
}
// ------------------------------------------------------------------------------------------
foo5() -> void {
	b = [Struct1(10)];
	c = b == [Struct1(10)];
	d = b == [Struct1(1)];
}
// ------------------------------------------------------------------------------------------
foo6() -> void {
	b = [10, 11];
	c = b == [10, 11];
	d = b == [11, 10];
}
// ------------------------------------------------------------------------------------------
foo7() -> void {
	b = [Struct1(10)];
	println2(b < [Struct1(10)]); // false
	println2(b > [Struct1(10)]); // false
	println2(b < [Struct1(11)]); // true
	println2(b > [Struct1(11)]); // false
	println2(b < [Struct1(10), Struct1(11)]); // true
	println2(b > [Struct1(10), Struct1(11)]); // false
	println2(b < [Struct1(12), Struct1(11)]); // true
	println2(b > [Struct1(12), Struct1(11)]); // false
	println2(b < [Struct1(9), Struct1(11)]); // false
	println2(b > [Struct1(9), Struct1(11)]); // true

	println2([Struct1(10), Struct1(12)] > [Struct1(9), Struct1(11)]); // true
	println2([Struct1(8), Struct1(12)] > [Struct1(9), Struct1(11)]); // false
	println2([Struct1(10), Struct1(9)] > [Struct1(9), Struct1(11)]); // true
	println2([Struct1(9), Struct1(9)] > [Struct1(9), Struct1(11)]); // false
	println2([Struct1(9), Struct1(12)] > [Struct1(9), Struct1(11)]); // true

	println2(b > []); // true
	println2(b < []); // false

	println2([Struct1(10), Struct1(12)] > [Struct1(9)]); // true
	println2([Struct1(8), Struct1(12)] > [Struct1(9)]); // false
	println2([Struct1(10), Struct1(9)] > [Struct1(9)]); // true
	println2([Struct1(8), Struct1(12)] > [Struct1(9)]); // false
}
// ------------------------------------------------------------------------------------------
foo8() -> void {
	a = [1] > [2];
}
// ------------------------------------------------------------------------------------------
foo9() -> void {
	a : Union1 = Struct1(1);
	b : Union1 = Struct1(2);
	c : Union1 = Struct1(1);
	d : Union1 = Struct2();
	println2(a == b); // false
	println2(a == c); // true
	println2(a == d); // false
}
// ------------------------------------------------------------------------------------------
foo10() -> void {
	a : Union1 = Struct1(1);
	b : Union1 = Struct1(2);
	c : Union1 = Struct1(1);
	d : Union1 = Struct2();
	e : Union1 = Struct5();
	println2(a > b); // false
	println2(a < b); // true
	println2(a > c); // false
	println2(a > d); // false
	println2(e < d); // false
}
// ------------------------------------------------------------------------------------------
// 1) no structure definition
// 2) no drop()
// 3) wrong drop in if
foo11() -> void {
	Struct1(1) == Struct1(2);
	if (Struct1(1) > Struct1(2)) 1 else 2;
	{}
}
// ------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------
main() {
	// foo1();
	// foo2();
	// foo3();
	// foo4();
	// foo5();
	// foo6();
	// foo7();
	// foo8();
	// foo9();
	// foo10();
	foo11(); // TODO
	// foo12();
	// foo13();
	// foo14();
	{}
}
