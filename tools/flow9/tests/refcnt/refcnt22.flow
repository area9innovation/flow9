native println2 : io (flow) -> void = Native.println;
native extractStruct : (a : [?], e : ??) -> ?? = Native.extractStruct;

Struct1(i : int);
Struct2();

Union1 ::= Struct1, Struct2;

// ------------------------------------------------------------------------------------------
foo1() -> void {
	[Struct2(), Struct1(10)];
	{}
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	v = Struct2();
	arr = [v, Struct1(10)];
	v;
	{}
}
// ------------------------------------------------------------------------------------------
foo3() -> void {
	v = Struct2();
	arr = [v, Struct1(10)];
	{}
}
// ------------------------------------------------------------------------------------------
foo4() -> void {
	v = Struct2();
	arr = [v, Struct1(10)];
	arr;
	{}
}
// ------------------------------------------------------------------------------------------
foo5() -> void {
	v = Struct2();
	arr = [v, Struct1(10), v];
	{}
}
// ------------------------------------------------------------------------------------------
foo6() -> void {
	a = extractStruct([Struct1(10), Struct2()], Struct1(20));
	{}
}
// ------------------------------------------------------------------------------------------
makeVal() -> Union1 {Struct2();}
foo7() -> void {
	v = Struct2();
	arr = [v, makeVal()];
	v;
	{}
}
// ------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------
main() {
	foo1(); // ok
	foo2(); // add dup(v)
	foo3(); // OK
	foo4(); // ok
	foo5(); // add dup(v)
	foo6(); // ok
	foo7();
	{}
	// std::cout<<"_____________" <<std::endl;
}
