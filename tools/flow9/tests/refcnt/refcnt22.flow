native println2 : io (flow) -> void = Native.println;
native extractStruct : (a : [?], e : ??) -> ?? = Native.extractStruct;

Struct1(i : int);
Struct2();

Union1 ::= Struct1, Struct2;

// ------------------------------------------------------------------------------------------
foo1() -> void {
	[Struct2(), Struct1(10)];
	{}
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	v = Struct2();
	arr = [v, Struct1(10)];
	v;
	{}
}
// ------------------------------------------------------------------------------------------
foo3() -> void {
	v = Struct2();
	arr = [v, Struct1(10)];
	{}
}
// ------------------------------------------------------------------------------------------
foo4() -> void {
	v = Struct2();
	arr = [v, Struct1(10)];
	arr;
	{}
}
// ------------------------------------------------------------------------------------------
foo5() -> void {
	v = Struct2();
	arr = [v, Struct1(10), v];
	{}
}
// ------------------------------------------------------------------------------------------
foo6() -> void {
	a = extractStruct([Struct1(10), Struct2()], Struct1(20));
	{}
}
// ------------------------------------------------------------------------------------------
makeVal() -> Union1 {Struct2();}
foo7() -> void {
	v = Struct2();
	arr = [v, makeVal()];
	v;
	{}
}
// ------------------------------------------------------------------------------------------
foo8() -> void {
	a = [1, 2, 3];
	a[1] + a[0];
	{}
}
// ------------------------------------------------------------------------------------------
foo9() -> void {
	a = [Struct2(), Struct2()];
	b = a[1];
	{}
}
// ------------------------------------------------------------------------------------------
foo10() -> void {
	b : [int] = [];
}
// ------------------------------------------------------------------------------------------
foo11() -> void {
	a = Struct1(10);
	a.i+a.i*a.i;
	{}
}
// ------------------------------------------------------------------------------------------
foo12() -> void {
	a = 11;
	a+a*a;
	{}
}
// ------------------------------------------------------------------------------------------
foo13() -> void {
	c = Struct1(10);
	b = if (c.i > 0 && c.i < 10) 0 else 1;
}
// ------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------
main() {
	foo1();
	foo2();
	foo3();
	foo4();
	foo5();
	foo6();
	foo7();
	foo8();
	foo9();
	foo10();
	foo11();
	// foo12();
	// foo13();
	{}
}
