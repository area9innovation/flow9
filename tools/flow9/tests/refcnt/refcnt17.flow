native println2 : io (flow) -> void = Native.println;

Struct(val : int);
// ------------------------------------------------------------------------------------------
test1() -> void {
	println2("TEST 1");
	dx = 2;
	dec = \v -> {
		v2 = v.val;
		Struct(v2 - dx);
	}

	dec(Struct(10));
	{}
}
// ------------------------------------------------------------------------------------------
test2() -> void {
	println2("TEST 2");
	dx = 2;
	inc = \v -> Struct(v.val + dx);
	inc(Struct(9));
	{}
}
// ------------------------------------------------------------------------------------------
test3() -> void {
	println2("TEST 3");
	useVars3 = \v, v2 -> v;
	useVars3(Struct(8), Struct(11));
	2;
	{}
}
// ------------------------------------------------------------------------------------------
test4() -> void {
	println2("TEST 4");
	useVars4 = \v, v2 -> {v; Struct(4);}
	v1 = Struct(2);
	useVars4(v1, Struct(11));
	v1;
	{}
}
// ------------------------------------------------------------------------------------------
test5() -> void {
	a=2;
	b=a;
	println2("TEST 5");
	useVars5 = \v, v2 -> v;
	alias1 = useVars5;
	alias2 = useVars5;
	alias1(Struct(-1), Struct(1));
	{}
}
// ------------------------------------------------------------------------------------------
test6() -> void {
	println2("TEST 6");
	useVars = \v, v2 -> Struct(v.val + 1);
	useVars(Struct(8), Struct(11));
	{}
}
// ------------------------------------------------------------------------------------------
test7() -> void {
	println2("TEST 7");
	val = Struct(9);
	useVars = \v, v2 -> v;
	useVars(val, Struct(11));
	useVars(val, Struct(23));
	{}
}
// ------------------------------------------------------------------------------------------
useVarsEx(v : Struct, v2 : Struct) -> Struct {v}
test71() -> void {
	println2("TEST 7 (2)");
	val = Struct(9);
	useVarsEx(val, Struct(11));
	useVarsEx(val, Struct(23));
	{}
}
// ------------------------------------------------------------------------------------------
test8() -> void {
	println2("TEST 8");
	useVars8 = \v, v2 -> v;
	a = useVars8(Struct(8), Struct(11));
	{}
}
// ------------------------------------------------------------------------------------------
// for Drop(result)
test9() -> Struct {
	println2("TEST 9");
	Struct(5);
}
// ------------------------------------------------------------------------------------------
main() {
	// test1();
	// test2();
	test3();
	// test4();
	 test5();
	// test6();
	// test7();
	// test71();
	test8();
	// a1=test9();
	// test9();
	{}
}