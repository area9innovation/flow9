native println2 : io (?) -> void = Native.println;

native map : ([?], (?) -> ??) -> [??] = Native.map;
native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;
native fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ?? = Native.fold;
native iter : ([?], (?)->void) -> void = Native.iter;

Struct1(i : int);

// ------------------------------------------------------------------------------------------
// anonymous. templates
fn1(v : ?, fn : (?) -> ??) -> ?? {
	fn(v);
}
foo1() -> void {
	fn1(10, \i -> i + 1);
	fn1(Struct1(10), \val -> Struct1(val.i * 20));
	{}
}
// ------------------------------------------------------------------------------------------
// anonymous. native
foo2() -> void {
	a = fold([Struct1(1), Struct1(2), Struct1(3)], 0, \acc, v -> acc + v.i);
}
// ------------------------------------------------------------------------------------------
// anonymous. struct2int
foo3() -> void {
	arr = [Struct1(10), Struct1(20)];
	b = map(arr, \s -> s.i + 1);
	{}
}
// ------------------------------------------------------------------------------------------
// anonymous. int2struct
foo4() -> void {
	arr = [10, 10];
	b = map(arr, \i -> Struct1(i + 1));
	arr;
	{}
}
// ------------------------------------------------------------------------------------------
fn4Ex(v : Struct1) -> bool {
	v.i > 0;
}
fn4Ex2(v : ?) -> void {
	println2(v);
}
// var as param
foo5() -> void {
	fn5 = \v -> v.i > 0;
	a = filter([Struct1(1), Struct1(-1), Struct1(2)], fn5); // 1 lambda
	b = filter([Struct1(1), Struct1(-1), Struct1(2)], fn4Ex); // 2 user fn
	iter([Struct1(1), Struct1(-1), Struct1(2)], println2); // 3 native fn
	iter([1, 2, 3], println2); // 3 native fn
	iter([Struct1(1), Struct1(-1), Struct1(2)], \v -> println2(v)); // 1 lambda
	iter([Struct1(1), Struct1(-1), Struct1(2)], fn4Ex2); // 2 user fn


	c = map([[Struct1(1), Struct1(-1)], [Struct1(2), Struct1(-2)]], \a -> filter(a, \v -> v.i > 0));
	{}
}
// ------------------------------------------------------------------------------------------
// drop var = lambda
foo6() -> void {
	fn6 = \v -> v.i > 0;
	a1 = fn6(Struct1(10));
	a2 = fn6(Struct1(-20));
	{}
}
// ------------------------------------------------------------------------------------------
foo7() -> void {
// lambda in lambda
	fn71 = \s, dx -> Struct1(s.i + dx);
	fn7 = \s -> fn71(s, 3);
	a1 = fn7(Struct1(10));
	a2 = fn71(Struct1(-20), 5);
	{}
}
// ------------------------------------------------------------------------------------------
// capture . drop(dx) after/inside drop(inc)
foo8() -> void {
	dx = Struct1(2);
	inc = \v -> Struct1(v.i + dx.i);
	v = Struct1(9);
	inc(v);
	v;
	{}
}
// ------------------------------------------------------------------------------------------
// capture . drop(dx) after b
foo9() -> void {
	dx = Struct1(2);
	inc = \v -> Struct1(v.i + dx.i);
	inc(Struct1(9));
	b = dx;
	{}
}
// ------------------------------------------------------------------------------------------
// capture . drop(dx) after the last drop(inc)
foo10() -> void {
	dx = Struct1(2);
	inc = \v -> Struct1(v.i + dx.i);
	inc(Struct1(9));
	b = dx;
	inc(Struct1(10));
	{}
}
// ------------------------------------------------------------------------------------------
// capture . drop(dx) after Construct
foo11() -> void {
	dx = Struct1(2);
	inc = \v -> Struct1(v.i + dx.i);
	{}
}
// ------------------------------------------------------------------------------------------
// capture . drop(dx) after iter()
foo12() -> void {
	dx = Struct1(2);
	inc = \i -> println2(i + dx.i);
	iter([1, 2], inc);
}
// ------------------------------------------------------------------------------------------
// capture . drop(dx) after the last inc()
foo13() -> void {
	dx = Struct1(2);
	inc = \i -> println2(i + dx.i);
	inc(1);
	inc(2);
}
// ------------------------------------------------------------------------------------------
// aliases 
foo14() -> void {
	useVars5 = \v, v2 -> v;
	alias1 = useVars5;
	alias2 = useVars5;
	alias1(Struct1(-1), Struct1(1));
}
// ------------------------------------------------------------------------------------------

main() {
	// foo1(); // ok?
	// foo2(); // ok?
	// foo3(); // ok?
	// foo4(); // ok?
	// foo5(); // ok?
	// foo6();
	// foo7();
	// capture
	// foo8();
	// foo9();
	// foo10();
	// foo11();
	// foo12();
	foo13();
	// aliases
	// foo14();
	{}
}
