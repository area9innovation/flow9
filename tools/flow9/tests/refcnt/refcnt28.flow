native println2 : io (?) -> void = Native.println;

Union<?, ??, ???> ::= ErrorType<?>, ResultType<??, ???>, Unknown;
ResultType(desc : ?, value1 : int, str : string, value2 : ??);
ErrorType(error : ?);
Unknown();

Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

// ------------------------------------------------------------------------------------------
foo1() -> void {
	result2 : Union<string, string, int> = ErrorType("fatal error");
	var : Maybe<int> = switch (result2) {
		ResultType(s1, val1, s2, val2): Some(val1 + val2);
		ErrorType(err): Some(-1);
		Unknown(): None();
	}
    {}
}
// ------------------------------------------------------------------------------------------
foo2() -> void {
	error1 : Union<string, string, int> = ErrorType("fatal error");

	switch(error1) {
		ResultType(s1, val1, s2, val2): println2(val1 + val2);
		ErrorType(err): println2(err);
		Unknown(): println2("Unknown");
	}
}
// ------------------------------------------------------------------------------------------
foo3() -> void {
	error2 : Union<string, string, int> = ErrorType("warning");
	result1 : Union<string, string, int> = ResultType("+", 1, "one", 10);
	result2 : Union<string, string, int> = ResultType("++" , 2, "two", 100);
	result3 = ResultType("-", 3, "3", 300);

	arr = [result2, error2, result1];
	{}
}
// ------------------------------------------------------------------------------------------
fn4(a : ?, b : ??) -> void {

}
foo4() -> void {
	fn4(Some("q"), 2);
	fn4(Some("q"), None());
	fn4(2, None());
}
// ------------------------------------------------------------------------------------------
foo5() -> void {
	i = 10;
	var : Maybe<int> =
		if (i > 0 && i > 11) Some(1 + 10)
		else if (i < 0) Some(-1)
		else None();
	{}
}
// ------------------------------------------------------------------------------------------
foo6() -> void {
	// TODO: compilation error
	//  ERROR: typed, sub vs super, typar #1, Could not subtype double vs string
    //    		result1 : Union<string, double, int> = ResultType(1., 1, "one", 10);

	/* error2 : Union<string, double, int> = ErrorType("warning");
	result1 : Union<string, double, int> = ResultType(1., 1, "one", 10); */
	{}
}
// ------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------

main() {
	foo1(); // error: bcast(auto)
	foo2(); // error: bcast(auto)
	foo3(); // error: bcast(auto) + <typars>
	foo4();
	foo5(); // ok
	{}
}
