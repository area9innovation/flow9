List<?> ::= EmptyList, Cons<?>;
	EmptyList();
	// Add head to the list "tail"
	Cons(head : ?, tail : List<?>);

native list2string :(l : List<string>) -> string = Native.list2string;
native foldi : (xs : [?], init : ??, fn : (int, ??, ?)->??) -> ?? = Native.foldi;

makeList() -> List<?> {
	EmptyList();
}

strGlue(arr: [string], sep: string) -> string {
	list2string(foldi(arr, makeList(), \idx, acc, e -> {
		if (idx == 0) Cons(e, acc) else Cons(e, Cons(sep, acc));
	}))
}
