import behaviour;
import math/math;

Transform<?> ::= ConstBehaviour<?>, DynamicBehaviour<?>;

FFn<?, ??> ::= FMaxConst;

		FMaxConst(c : ?);

FFn2<?, ??, ???> ::= FLift2<?, ??, ???>, FMax;
		FLift2(fn : (?, ??) -> ???);
		FMax();

fselect(b : Transform<??>, fn : FFn<??, ?>) -> Transform<?> {
	b;
}

fselect2(b1 : Transform<??>, b2 : Transform<???>, fn : FFn2<??, ???, ?>) -> Transform<?> {
	b1;
}



fmax(b1 : Transform<?>, b2 : Transform<?>) -> Transform<?> {
	if (isSameObj(b1, b2))
		b1
	else switch (b1 : Transform<?>) {
		ConstBehaviour(v1): {
			switch (b2 : Transform<?>) {
				ConstBehaviour(v2): {
					// While the default case effectively reduces to this case,
					// it does so after a lot of garbage is made, so let us just
					// handle this common case directly
					ConstBehaviour(max(v1, v2));
				}
				default: {
					if (flow(v1) == true || flow(v1) == doubleMax) {
						ConstBehaviour(flow(v1))
					} else {
						fselect(b2, FMaxConst(v1));
					}
				}
			}
		}
		default: {
			switch (b2) {
				ConstBehaviour(v2): {
					if (flow(v2) == true || flow(v2) == doubleMax) {
						ConstBehaviour(flow(v2))
					} else {
						fselect(b1, FMaxConst(v2));
					}
				}
				default: {
					fselect2(b1, b2, FMax());
				}
			}
		}
	}
}