native println2 : io (flow) -> void = Native.println;
native quit : io (code : int) -> void = Native.quit;
native iter : ([?], (?)->void) -> void = Native.iter;
native iteri : ([?], (int, ?)->void) -> void = Native.iteri;
native i2s : (int) -> string = Native.i2s;
i2s(i) { cast(i : int -> string); }

Un ::= A, B, C;

A(a : int);
C(s : string);
B(l : Un, r : [Un]);

/*a = B(
	B(C("xyz"), [A(1), B(A(3), [C("A")])]), 
	[B(C("123"), [B(C("#"), [B(A(-1), [])]), A(5)]), A(123)]
);
b = B(
	B(C("xyz"), [A(1), B(A(3), [C("A")])]), 
	[B(C("123"), [B(C("#"), [B(A(-1), [])]), A(5)]), A(123)]
);
c = B(
	B(C("xyz"), [A(1), B(A(3), [C("A")])]), 
	[B(C("123"), [B(C("#"), [B(A(-2), [])]), A(5)]), A(123)]
);*/


main() -> void {
	println2("Test on comparisons ...");
	a = B(
		B(C("xyz"), [A(1), B(A(3), [C("A")])]), 
		[B(C("123"), [B(C("#"), [B(A(-1), [])]), A(5)]), A(123)]
	);
	b = B(
		B(C("xyz"), [A(1), B(A(3), [C("A")])]), 
		[B(C("123"), [B(C("#"), [B(A(-1), [])]), A(5)]), A(123)]
	);
	c = B(
		B(C("xyz"), [A(1), B(A(3), [C("A")])]), 
		[B(C("123"), [B(C("#"), [B(A(-2), [])]), A(5)]), A(123)]
	);
	println2("  Less:");
	println2(a < b); // false
	println2(a < c); // false
	println2(c < a); // true
	println2("  Greater:");
	println2(a > b); // false
	println2(a > c); // true
	println2(c > a); // false
	println2("  Equal:");
	println2(a == b); // true
	println2(a == c); // false
	println2(b == c); // false
	println2("  Not Equal:");
	println2(a != b); // false
	println2(a != c); // true
	println2(b != c); // true
	println2("  Less or Equal:");
	println2(a <= b); // true
	println2(a <= c); // false
	println2(c <= a); // true
	println2("  Greater or Equal:");
	println2(a >= b); // true
	println2(a >= c); // true
	println2(c >= a); // false

	quit(0);
}
