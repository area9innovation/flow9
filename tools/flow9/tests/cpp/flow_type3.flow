native iter : ([?], (?)->void) -> void = Native.iter;
native println2 : io (flow) -> void = Native.println;
native map : ([?], (?) -> ??) -> [??] = Native.map;
native filter : (a : [?], test : (?) -> bool) -> [?] = Native.filter;

FlowStruct(val : flow);


Maybe<?> ::= None, Some<?>;
	None();
	Some(value : ?);

flow2s(f : flow) -> string {
	cast(f : flow -> string);
}

isSome(m : Maybe<?>) -> bool {
	switch (m : Maybe) {
		None(): false;
		Some(__): true;
	}
}

testCast(a : [?], test : (?) -> Maybe<??>) -> [??] {
	mapped : [Maybe<??>] = map(a, test);
	filtered = filter(mapped, isSome);
	map(filtered, \v : Maybe<??> ->
		cast(v : Maybe<??> -> Some<??>).value
	);
}

main() -> void {

	cast1 = testCast([1, 2, 3, 4], \v -> if (v > 2) Some(-v) else None());
	println2(cast1);

	println2(flow2s(FlowStruct("str")));
}
