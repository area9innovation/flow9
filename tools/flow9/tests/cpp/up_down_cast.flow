native println : io (?) -> void = Native.println;

Maybe ::= None, Some;

None();
Some(val1 : int, val2 : int);

Union ::= Struct1, Struct2, Struct3, Struct4, Struct5, Struct6;
Struct1(val : int);
Struct2();
Struct3();
Struct4();
Struct5();
Struct6();

// downcasting : union -> type
printMaybeValue(value : Maybe) -> void {
	switch (value) {
		None(): println("none");
		Some(v1, v2): {
			k = 10;
			res = k - v1 + v2;
			println(if (res > 0) "positive" else "negative")
		}
	}
}

// downcasting : union -> type
printUnionValue(value : Union) -> void {
	switch (value) {
		Struct2() : println("Struct2");
		Struct3() : println("Struct3");
		Struct4() : println("Struct4");
		Struct5() : println("Struct5");
		Struct6() : println("Struct6");
		Struct1(v): println(if (v > 0) "Struct1 positive" else "Struct1 negative");
	}
}

main() {

	st = Some(101, 99);
	printMaybeValue(st); // positive

	printUnionValue(Struct1(-2)); // struct1

	// upcasting : type -> union
	println(switch (if (1 > 0) Some(1, 0) else None()) {
		Some(__, __): "Some";
		None(): "None";
	}); // some
}
