native println : io (?) -> void = Native.println;

Union<?, ??, ???> ::= ErrorType<?>, ResultType<??, ???>, Unknown;
ErrorType(error : ?);
ResultType(desc : ?, value1 : int, str : string, value2 : ??);
Unknown();

Maybe<?> ::= None, Some<?>;
None();
Some(value : ?);

main() {
	error1 : Union<string, string, int> = ErrorType("fatal error");
	error2 : Union<string, string, int> = ErrorType("warning");
	result1 : Union<string, string, int> = ResultType("+", 1, "one", 10);
	result2 : Union<string, string, int> = ResultType("++" , 2, "two", 100);
	result3 = ResultType("-" , 3, "3", 300);

	switch(error1) {
		ResultType(s1, val1, s2, val2): println(val1 + val2);
		ErrorType(err): println(err);
		Unknown(): println("Unknown");
	}

	var : Maybe<int> = switch (result2) {
		ResultType(s1, val1, s2, val2): Some(val1 + val2);
		ErrorType(err): Some(-1);
		Unknown(): None();
	}

	//arr = [error1, result2, error2, result1];
	//println(arr[2]); // TODO: implement : toString or println(flow)
}
