native println2 : io (?) -> void = Native.println;
native isSameStructType : (value1 : ?, value2 : ??) -> bool = Native.isSameStructType;

Struct1();
Struct2();
Struct3();
Struct4();
Struct5();

Union1 ::= Struct1, Struct2;
Union2 ::= Struct3, Struct4;
Union3 ::= Struct5;

UnionUnion ::= Union1, Union2, Struct5;

compareUnions1(union1 : UnionUnion, union2 : UnionUnion) -> bool {
	isSameStructType(union1, union2)
}

compareUnions2(union1 : UnionUnion, union2 : Union2) -> bool {
	isSameStructType(union1, union2)
}

compareUnions3(union1 : UnionUnion, union2 : Union3) -> bool {
	isSameStructType(union1, union2)
}

main() {
	println2(compareUnions1(Struct1(), Struct4())); // false
	println2(compareUnions2(Struct4(), Struct4())); // true
	println2(compareUnions1(Struct1(), Struct5())); // false
	println2(compareUnions3(Struct5(), Struct5())); // true

	switch (Struct1() : UnionUnion) {
		Struct1() : println2("part of a subunion");
		Struct2() : println2("part of a subunion");
		Union2() : println2("union inside the union");
		Struct5() : println2("independent item");
	}

	/*v : Union2 = Struct4();
	switch (v : UnionUnion) {
		Struct1() : println("part of a subunion");
		Struct2() : println("part of a subunion");
		Struct3() : println("union inside the union");
		Struct4() : println("union inside the union");
		Struct5() : println("independent item");
	}*/

	switch (Struct5() : UnionUnion) {
		Struct1() : println2("part of a subunion");
		Struct2() : println2("part of a subunion");
		Union2() : println2("union inside the union");
		Struct5() : println2("independent item");
	}

	switch (Struct3() : UnionUnion) {
		Struct1() : println2("part of a subunion");
		Struct2() : println2("part of a subunion");
		Union2() : println2("union inside the union");
		Struct5() : println2("independent item");
	}
}
