flow = '\uFEFF'? $$pos ws toplevels $"module" $"setpos" lastLineComment?;

toplevels = $"list" toplevel $"cons" (toplevel $"cons")* optsemi | $"list";

toplevel = import | export | forbid | native | union | global | functionOrStruct;
	semi = #";" ws;
	optsemi = (";" ws)?;

import = "import" s pathpos ws semi $"import";
export = "export" $$pos ws "{" ws toplevels "}" ws $"export" $"setpos";
forbid = "forbid" s pathpos ws semi $"forbid";
	pathpos = $$pos $path $"setpos";
	path = bid ('/' bid)*;

native = "native" s idpos ':' ws $"list" ("io" ws $$"io" $"cons")? type '=' ws $nativename ws semi $"native";
	nativename = bid ('.' bid)*;

union = typename "::=" ws typenames semi $"union";
	typenames = $"list" typename $"cons" ("," ws typename $"cons")* ("," ws)? | $"list";

global = idpos "=" ws brace optsemi $"global"
		| idpos "=" ws exp semi $"global" 
		| idpos ":" ws type "=" ws brace optsemi $"global_typed"
		| idpos ":" ws type "=" ws exp semi $"global_typed";

functionOrStruct = 
	// Forward declaration
	  idpos lambdatype brace optsemi $"fndef_typed" 
	| idpos lambdatype exp semi $"fndef_typed"
	| idpos lambdatype semi $"typedef"
	| idpos lambdatypeauto brace optsemi $"fndef_typed" 
	| idpos lambdatypeauto exp semi $"fndef_typed" 
	| idpos '(' ws structargs ')' ws semi $"structdef" // This is a struct!

	// Forward type declarations
	| idpos ':' ws type semi $"typedef"
	// Struct
	| idpos ':' ws '(' ws structargs ')' ws semi $"structdef"
	;

	// listof(structarg, ",")
	structargs = $"list" structarg $"cons" ("," ws structarg $"cons")* ("," ws)? | $"list";
	structarg = $"list" ("mutable" !letterOrDigit ws $$"mutable" $"cons")? idpos ':' ws type $"structarg";

exp = 
	// These optsemi should really be semi, but we have too much legacy without
	(idpos "=" ws exp optsemi $$pos expsemi $"sequence" $"setpos" $"let" 
		| idpos ":" ws type "=" ws exp optsemi $$pos expsemi $"sequence" $"setpos" $"let_typed"
	)
	|> exp ":=" $$pos $"b2" $"swap" ws exp $":=" $"setpos"
	|> exp < ( "|>" $$pos $"b2" $"swap" ws exp $"|>" $"setpos")*
	|> exp "||" $$pos $"b2" $"swap" ws exp $"||" $"setpos"
	|> exp "&&" $$pos $"b2" $"swap" ws exp $"&&" $"setpos"
	|> exp "==" $$pos $"b2" $"swap" ws exp $"==" $"setpos" | exp "!=" $$pos $"b2" $"swap" ws exp $"!=" $"setpos"
	|> exp ("<=" $$pos $"b2" $"swap" ws exp $"<=" $"setpos" |"<" $$pos $"b1" $"swap" ws exp $"<" $"setpos" | ">=" $$pos $"b2" $"swap" ws exp $">=" $"setpos" | ">" $$pos $"b1" $"swap" ws exp $">" $"setpos")
	|> exp < ("+" $$pos $"b1" $"swap"ws exp $"+" $"setpos" | "-" $$pos $"b1" $"swap" ws exp $"-" $"setpos")*
	|> exp ("*" $$pos $"b1" $"swap" ws exp $"*" $"setpos" | "/" $$pos $"b1" $"swap" ws exp $"/" $"setpos" | "%" $$pos $"b1" $"swap" ws exp $"%" $"setpos")*

	// To ensure that ?? does not consider the : as part of the type
	|> exp (":" $$pos $"b1" $"swap" ws type $":" $"setpos")+

	|> exp "??" $$pos $"b2" $"swap" ws <exp ":" ws exp $"maybe" $"setpos"

	|> (
		$$pos '!' ws exp $"__not" $"setpos"
		| $$pos "-" ws exp $"__negate" $"setpos"
		| lambda
		| exp (
			( $$pos "(" $"swap" ws exps ")" ws $"call" $"setpos")
			| with
			| $$pos "." $"swap" ws idpos "::=" ws exp "" $"::=" $"setpos"	// The "" prevents right recursion
			| $$pos "." $"swap" ws idpos $"dot" $"setpos"
			| $$pos "[" $"swap" ws exp "]" ws $"__index" $"setpos"
		)*
	)

	|> $$pos '^' ws exp $"__deref" $"setpos"

	|> (
		$$pos "if" !letterOrDigit ws "(" ws exp ")" ws exp "else" ws exp $"ifelse" $"setpos"
		| $$pos "if" !letterOrDigit ws "(" ws exp ")" ws exp $$pos $"void" $"setpos" $"ifelse" $"setpos"
		| "(" ws exp ")" ws 
		| $$pos "ref" !letterOrDigit ws exp $"ref" $"setpos"
		| switch
		| $$pos "cast" !letterOrDigit ws '(' ws exp "->" ws type ')' ws $"cast" $"setpos"
		| brace
		| $$pos "true" !letterOrDigit ws $"true" $"setpos"
		| $$pos "false" !letterOrDigit ws $"false" $"setpos"
		| $$pos id $"var" $"setpos"
		| $$pos '"#inc' "lude" s pathpos '"' ws $"stringinclude" $"setpos"
		| $$pos string ws $"unescape" $"setpos"
		| $$pos "0x" $(hexdigit+) ws $"hex" $"setpos"
		| $$pos $double ws $"s2d" $"setpos"
		| $$pos $int ws $"s2i" $"setpos"
		| $$pos "[" ws exps "]" ws $"array" $"setpos"
	);

with = $$pos '(' $"swap" ws exp "with" s fields ')' ws $"with" $"setpos";
	fields = $"list" fieldassign $"cons" ("," ws fieldassign $"cons")*  ("," ws)? | $"list";
		fieldassign = idpos '=' ws exp $"fieldassign";

switch = $$pos "switch" !letterOrDigit ws
		'(' ws exp ')' ws 
		'{' ws cases #'}' ws $"switch" $"setpos";

	cases = $"list" defaultOrNamedCase $"cons" (defaultOrNamedCase $"cons")*
			| $"list";

	defaultOrNamedCase = 
		$$pos "default" !letterOrDigit ws ':' ws exp (';' ws)? $"default" $"setpos"
		| idpos '(' ws names ')' ws ':' ws exp (';' ws)? $"case";

	names = $"list" id $"cons" ("," ws id $"cons")* ("," ws)? | $"list";

brace = $$pos "{" ws expsemi "}" ws $"sequence" $"setpos";
	// The first optsemi here is to have backwards compatibility. Really, it should be semi
	expsemi = $"list" exp $"cons" (optsemi exp $"cons")* optsemi
		| $"list";

lambda = $$pos backslash ws lambdaargs "->" ws exp "" $"lambda" $"setpos"; // The "" makes right-recursion disappear
	lambdaargs = $"list" lambdaarg $"cons" ("," ws lambdaarg $"cons")* ("," ws)? 
		| $"list";

	lambdaarg = id ":" ws type $"argtype" |
		id $$pos $"auto" $"setpos" $"argtype";	// We add auto automatically

lambdatype = $$pos "(" ws lambdaargs ")" ws "->" ws type $"fntype" $"setpos";
lambdatypeauto = $$pos "(" ws lambdaargs ")" ws $$pos $"auto" $"setpos" $"fntype" $"setpos";


exps = $"list" exp $"cons" ("," ws exp $"cons")* ("," ws)? 
	| $"list";

idpos = $$pos id $"setpos";

//
// Types
//

type = 	
	$$pos "bool" !letterOrDigit ws $"bool" $"setpos"
	| $$pos "int" !letterOrDigit ws $"int" $"setpos"
	| $$pos "double" !letterOrDigit ws $"double" $"setpos"
	| $$pos "string" !letterOrDigit ws $"string" $"setpos"
	| $$pos "flow" !letterOrDigit ws $"flow" $"setpos"
	| $$pos "void" !letterOrDigit ws $"voidtype" $"setpos"
	| $$pos "auto" !letterOrDigit ws $"auto" $"setpos"
	| $$pos "native" !letterOrDigit ws $"nativetype" $"setpos"
	| $$pos "ref" !letterOrDigit ws type $"reftype" $"setpos"
	| fntype
	| typename
	| $$pos "[" ws type "]" ws $"arraytype" $"setpos"
	| $$pos $("?"+) ws $"polytype" $"setpos"
	;

fntype = $$pos "(" ws argtypes ")" ws "->" ws type $"fntype" $"setpos";
	argtypes = $"list" argtype $"cons" ("," ws argtype $"cons")* ("," ws)? | $"list";
	argtype = $$pos id ":" ws type $"argtype" $"setpos" | type $$"" $"swap" $"argtype";

typename = idpos typars $"typename";
	typars = "<" ws types ">" ws | $"list";

	types = $"list" type $"cons" ("," ws type $"cons")* ("," ws)? 
		| $"list";

//
// Lexing
//

hexdigit = '0'-'9'
	| 'a'-'f'
	| 'A'-'F';

id = $bid ws;

bid = ('a'-'z' | 'A'-'Z' | '_') (letterOrDigit)*;

letterOrDigit = 'a'-'z'
	| 'A'-'Z'
	| '_'
	| '0'-'9';

string = $('"' onechar_* '"') ws;

onechar_ = backslash "u" hexdigit hexdigit hexdigit hexdigit
	| backslash "X" hexdigit hexdigit hexdigit hexdigit
	| backslash "x" hexdigit hexdigit
	| backslash escapedchar_
	| !'"' !backslash anychar;

escapedchar_ = backslash | '"' | "n" | "t" | "r";
backslash = '\';
anychar = '0x0000'-'0xffff';

double = int '.' int? | '.' int;
int = '0'-'9'+;

ws = s*;
s = cs+;

cs = " " | "\t" | "\n" | "//" (!"\n" anychar)* "\n" | "/*" (!"*/" anychar)* "*/" | "\r";

lastLineComment = "//" (!"\n" anychar)*;

flow
