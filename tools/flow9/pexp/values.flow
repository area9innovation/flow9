import tools/flow9/pexp/pexp;
import maybe;
import runtime;

export {
	getPString(e : PExp) -> string;

	getPVar(e : PExp) -> string;
	getPFieldAssign(p : PExp) -> PFieldAssign;

	getPType(e : PExp) -> PType;
	getPTypeName(e : PExp) -> PTypeName;
	getPTypeFunction(p : PExp) -> PTypeFunction;

	getPListArray(p : PExp) -> [PExp];

	getPModule(p : PExp) -> PModule;
}

getPString(e : PExp) -> string {
	switch (e) {
		PString(s, __): s;
		default: "";
	}
}

getPVar(e : PExp) -> string {
	switch (e) {
		PVar(v, __): v;
		default: "";
	}
}

getPType(e : PExp) -> PType {
	switch (e) {
		PType(): e;
		default: PTypeName("", [], -1);
	}
}

getPTypeName(e : PExp) -> PTypeName {
	switch (e) {
		PTypeName(__, __, __): e;
		default: PTypeName("", [], -1);
	}
}

getPTypeFunction(p : PExp) -> PTypeFunction {
	switch (p) {
		PTypeFunction(__, __, __): p;
		default: PTypeFunction([], PTypeName("", [], -1), -1)
	}
}

getPFieldAssign(p : PExp) -> PFieldAssign {
	switch (p) {
		PFieldAssign(__, __, __): p;
		default: PFieldAssign("", PBool(false, -1), -1);
	}
}

getPListArray(p : PExp) -> [PExp] {
	switch (p) {
		PList(l, __): list2array(l);
		default: [];
	}
}

getPModule(p : PExp) -> PModule {
	switch (p) {
		PModule(__, __): p;
		default: PModule([], -1);
	}
}
