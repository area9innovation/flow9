import tools/flow9/bexp/bexp;

export {
	bvoidType : BTypeName = BTypeName("void", []);
	bboolType : BTypeName = BTypeName("bool", []);
	bintType : BTypeName = BTypeName("int", []);
	bdoubleType : BTypeName = BTypeName("double", []);
	bstringType : BTypeName = BTypeName("string", []);

	getBType(b : BExp) -> BType;
	getBArgTypes(b : BType) -> [BType];
	getBReturnType(b : BType) -> BType;
}

getBType(b : BExp) -> BType {
	switch (b) {
		BVoid(): bvoidType;
		BBool(v): bboolType;
		BInt(v): bintType;
		BDouble(v): bdoubleType;
		BString(v): bstringType;
		BVar(id, type): type;
		BLet(id, value, body, type): type;
		BIf(cond, then, else_, type): type;
		BCall(fn, args, type): type;
		BLambda(args, body, type): type;
		BSequence(exps, type): type;
		BConstruct(struct, args, type): type;
		BField(value, field, type): type;
		BSetMutable(left, field, value, type): type;
		BSwitch(value, switchType, cases, defaultCase, type): type;
		BArray(args, type): type;
		BCast(e, from, to): to;
	}
}

getBArgTypes(b : BType) -> [BType] {
	switch (b) {
		BTypeFunction(args, rt): args;
		default: [];
	}
}

getBReturnType(b : BType) -> BType {
	switch (b) {
		BTypeFunction(args, rt): rt;
		default: b;
	}
}
