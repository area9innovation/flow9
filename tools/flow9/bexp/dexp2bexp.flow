import tools/flow9/dexp/dexp;
import tools/flow9/dexp/pretty;
import tools/flow9/types/typeenv;
import tools/flow9/types/builtin;
import tools/flow9/types/cgraph/constraint;
import tools/flow9/bexp/bexp;
import tools/flow9/types/util;
import tools/flow9/dexp/implicit_casts;
import tools/flow9/bexp/dtype2btype;
import tools/flow9/bexp/type;

export {
	dexp2bexp(env : BExpEnv, d : DExp) -> BExp;

	BExpEnv(
		onError : (int, string) -> void,
		tmap : TMap,
		eclassType : Tree<int, TType>,
		resolveStructName : (string) -> Maybe<DStruct>,
	);

	ttype2btype(env : BExpEnv, type : TType) -> BType;

	resolveBType(env : BExpEnv, pos : int, eclass : int) -> BType;
}

resolveBType(env : BExpEnv, pos : int, eclass : int) -> BType {
	mtype = resolveCNode(env.tmap, env.eclassType, eclass);
	mtype ?? {
		mtype;
	} : {
		// These are already reported
		if (false) {
			env.onError(pos, "Add type annotation. Unresolved type (equivalence class e" + i2s(eclass) + ")");
		} else {
			println("Implicit typar or flow cast. Ignore this unresolved type (equivalence class e" + i2s(eclass) + ")");
		}
		BTypeName("auto", []);
	}
}

reportErrorOnType(env : BExpEnv, type : TType) -> bool {
	rec = \tt -> reportErrorOnType(env, tt);
	switch (type) {
		TTypeName(id, typars): {
			mstruct = env.resolveStructName(id);
			mstruct ?? {
				// OK, if this struct has implicit type-pars, we do not care
				!mstruct.implicitTypars;
			} : {
				// Check recursively
				forall(typars, rec)
			}
		}
		TTypeFunction(args, returnType): forall(args, rec) && rec(returnType);
		default: true;
	}
}

dexp2bexp(env : BExpEnv, d : DExp) -> BExp {
	todo = \ -> {
		println("TODO: dexp2bexp for " + d.structname);
		// prettyDExp("", "", d);
		BString("ERROR!");
	}
	rec = \ee -> {
		dexp2bexp(env, ee);
	}
	type = \eclass : int -> resolveBType(env, d.pos, eclass);
	switch (d) {
		DVoid(pos): BVoid();
		DBool(v, pos): BBool(v);
		DInt(v, pos): BInt(v);
		DDouble(v, pos): BDouble(v);
		DString(v, pos): BString(v);
		DStringInclude(path, pos): {
			BString(getFileContent(path));
		}
		DVar(id, pos, eclass): {
			BVar(id, type(eclass));
		}
		DLet(id, value, body, pos, eclass): BLet(id, rec(value), rec(body), type(eclass));
		DIf(cond, then, else_, pos, eclass): BIf(rec(cond), rec(then), rec(else_), type(eclass));
		DCall(fn, args, pos, eclass): dcall2bexp(env, d);
		DConstruct(structid, args, pos, eclass): {
			BConstruct(structid, map(args, rec), type(eclass))
		}
		DLambda(args, body, pos, eclass): {
			BLambda(map(args, \a -> a.id), rec(body), type(eclass));
		}
		DRef(value, pos, eclass): {
			typ = type(eclass);
			// The type of __ref is not right, but should not matter. It is really (typar_0_of(typ)) -> typ
			BCall(BVar("__ref", typ), [rec(value)], typ);
		}
		DField(value, field, pos, eclass): BField(rec(value), field, type(eclass));	
		DSetMutable(lhs, field, value, pos, eclass): {
			BSetMutable(rec(lhs), field, rec(value), type(eclass))
		}
		DArray(exps, pos, eclass): {
			typ = type(eclass);
			// The type of array is not right, but should not matter. It is really (typar_0_of(typ)) -> typ
			BArray(map(exps, rec), typ);
		}
		DSequence(exps, pos, eclass): BSequence(map(exps, rec), type(eclass));
		DSwitch(value, stype, cases, defaultCase, pos, eclass): {
			swtype = type(value.eclass);
			BSwitch(
				BVar(value.id, swtype), swtype,
				map(cases, \case : DCase -> {
					BCase(case.id, rec(case.body))
				}),
				defaultCase ?? {
					Some(rec(defaultCase))
				} : None(),
				type(eclass)
			);
		}
		DCast(value, target, pos): {
			// casting of types by cast(variable : Type1 -> Type2)
			castFn2bexp(env, d);
		}
		DDowncast(oldid, newid, subtype, subeclass, supereclass, scope, pos, eclass): {
			println("INTERAL ERROR: Downcasts should be converted to casts by implicit_casts");
			BLet(
				newid, BVar(oldid, type(supereclass)),
				rec(scope),
				type(eclass)
			);
		}
		DTyped(value, subtype, pos, eclass): rec(value);
	}
}

ttype2btype(env : BExpEnv, type : TType) -> BType {
	switch (type) {
		TTypeName(id, typars): {
			if (trim2(id, "?") == "" && typars == []) {
				BTypePar(id);
			} else {
				BTypeName(id, map(typars, \tp -> ttype2btype(env, tp)));
			}
		}
		TTypeEClass(eclass): {
			// println("ERROR: Tyvar");
			BTypeName("bool", []);
		}
		TTypeFunction(args, returnType): {
			BTypeFunction(map(args, \a -> ttype2btype(env, a)), ttype2btype(env, returnType));
		}
		TTypeOverload(tt, overloads): {
			println("ERROR: Overload");
			BTypeName("ERROR overload " + toString(tt), []);
		}
	}
}

dcall2bexp(env : BExpEnv, d : DCall) -> BExp {
	rec = \ee -> dexp2bexp(env, ee);
	type = \eclass : int -> resolveBType(env, d.pos, eclass);
	dcall2bcall = \-> BCall(rec(d.fn), map(d.args, rec), type(d.eclass));
	extractCastType = \exp -> {
		eclass = switch (exp : DExp) {
			DInt(v, pos): v;
			default: -1;
		}
		type(eclass);
	}

	switch (d.fn : DExp) {
		DVar(id, pos, eclass): {
			if (id == makeImplicitCastId() && (length(d.args) == 3)) {
				from = extractCastType(d.args[1]);
				to = extractCastType(d.args[2]);
				value = rec(d.args[0]);
				if (from == to) value else BCast(value, from, to);
			} else {
				dcall2bcall();
			}
		}
		default : dcall2bcall();
	}
}

castFn2bexp(env : BExpEnv, d : DCast) -> BExp {
	returnType = dtype2btype(d.target);
	value = dexp2bexp(env, d.value);
	BCall(
		BVar("__cast", BTypeFunction([getBType(value)], returnType)),
		[value],
		returnType
	)
}