import tools/flow9/dexp/dexp;
import ds/rvalue_api;

export {
	foldDExp(x : DExp, init : ?, fn : (?, DExp) -> ?) -> ?;
	getDExpChildren(e : DExp) -> [DExp];
}

getDExpChildren(e : DExp) -> [DExp] {
	switch (e) {
		DValue(): [];
		DStringInclude(path, pos): [];
		DVar(id, pos, eclass): [];
		DLet(id, value, body, pos, eclass): [value, body];
		DIf(cond, then, else_, pos, eclass): [cond, then, else_];
		DCall(fn, args, pos, eclass): concat([fn], args);
		DConstruct(structid, args, pos, eclass): args;
		DLambda(args, body, pos, eclass): [body];
		DRef(value, pos, eclass): [value];
		DField(value, field, pos, eclass): [value];
		DSetMutable(lhs, field, value, pos, eclass): [lhs, value];
		DArray(exps, pos, eclass): exps;
		DSequence(exps, pos, eclass): exps;
		DSwitch(value, type, cases, defaultCase, pos, eclass): {
			cc = concat([value], map(cases, \c -> c.body));
			defaultCase ?? {
				arrayPush(cc, defaultCase);
			} : cc
		}
		DCast(value, target, pos): [value];
		DDowncast(oldid, newid, subtype, subeclass, supereclass, scope, pos, eclass): [scope];
		DTyped(value, subtype, pos, eclass): [value];
	}
}

dexpApi : RecApi<DExp> = RecApi(
	// Clear out recursive children to make the parent value canonical to comparison
	\e : DExp -> {
		v = DVoid(0);
		switch (e) {
			DValue(): e;
			DStringInclude(path, pos): e;
			DVar(id, pos, eclass): e;
			DLet(id, value, body, pos, eclass): DLet(id, v, v, pos, eclass);
			DIf(cond, then, else_, pos, eclass): DIf(v, v, v, pos, eclass);
			DCall(fn, args, pos, eclass): DCall(v, [], pos, eclass);
			DConstruct(structid, args, pos, eclass): DConstruct(structid, [], pos, eclass);
			DLambda(args, body, pos, eclass): DLambda(args, v, pos, eclass);
			DRef(value, pos, eclass): DRef(v, pos, eclass);
			DField(value, field, pos, eclass): DField(v, field, pos, eclass);
			DSetMutable(lhs, field, value, pos, eclass): DSetMutable(v, field, v, pos, eclass);
			DArray(exps, pos, eclass): DArray([], pos, eclass);
			DSequence(exps, pos, eclass): DSequence([], pos, eclass);
			DSwitch(value, type, cases, defaultCase, pos, eclass): DSwitch(value, type, [], None(), pos, eclass);
			DCast(value, target, pos): DCast(v, target, pos);
			DDowncast(oldid, newid, subtype, subeclass, supereclass, scope, pos, eclass): DDowncast(e with scope = v);
			DTyped(value, subtype, pos, eclass): DTyped(v, subtype, pos, eclass);
		}
	},
	// Extract the recursive children of a value
	getDExpChildren,
	// Reconstitute a value from the parent with these children
	\h : DExp, c : [DExp] -> {
		switch (h) {
			DValue(): h;
			default: {
				println("TODO");
				h;
			}
		}
	}
);

foldDExp(x : DExp, init : ?, fn : (?, DExp) -> ?) -> ? {
	recfold(dexpApi, x, init, fn)
}
