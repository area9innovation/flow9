import tools/flow9/dexp/dexp;

export {
	getDExpChildren(e : DExp) -> [DExp];
}

getDExpChildren(e : DExp) -> [DExp] {
	switch (e) {
		DValue(): [];
		DStringInclude(path, pos): [];
		DVar(id, pos, eclass): [];
		DLet(id, value, body, pos, eclass): [value, body];
		DIf(cond, then, else_, pos, eclass): [cond, then, else_];
		DCall(fn, args, pos, eclass): concat([fn], args);
		DConstruct(structid, args, pos, eclass): args;
		DLambda(args, body, pos, eclass): [body];
		DRef(value, pos, eclass): [value];
		DField(value, field, pos, eclass): [value];
		DSetMutable(lhs, field, value, pos, eclass): [lhs, value];
		DArray(exps, pos, eclass): exps;
		DSequence(exps, pos, eclass): exps;
		DSwitch(value, type, cases, defaultCase, pos, eclass): {
			cc = concat([value], map(cases, \c -> c.body));
			defaultCase ?? {
				arrayPush(cc, defaultCase);
			} : cc
		}
		DCast(value, target, pos): [value];
		DDowncast(oldid, newid, subtype, subeclass, supereclass, scope, pos, eclass): [scope];
		DTyped(value, subtype, pos, eclass): [value];
	}
}
