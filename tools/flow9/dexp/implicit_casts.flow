import tools/flow9/dexp/dexp;
import tools/flow9/dexp/pretty;
import tools/flow9/types/cgraph/resolve;
import tools/flow9/types/builtin;

export {
	// This introduces explicit __cast__ cast where we have implicit ones.
	// It also converts DDowncasts to __cast__ calls
	implicitCasts(tmap : TMap, global : DGlobal) -> DGlobal;

	// return __cast__
	makeImplicitCastId() -> string;
}

implicitCasts(tmap : TMap, global : DGlobal) -> DGlobal {
	DGlobal(global with value = implicitDExpCasts(tmap, global.value, global.eclass));
}

implicitDExpCasts(tmap : TMap, e : DExp, expectedEClass : int) -> DExp {
	if (false && expectedEClass != -1) {
		println("We expect " + prettyCEClass(tmap.cmap, expectedEClass) + " for " + summarizeDExp(e));
	}
	// Adds a cast if we do not have the type that is expected
	wrap = \hasEClass : int, ee : DExp -> {
		// Check if these eclasses correspond to the same type in the eclass world:
		if (expectedEClass == -1 || hasEClass == -1 || isSameEClassInCMap(tmap.cmap, expectedEClass, hasEClass)) ee
		else {
			// OK, we need a cast.
			makeImplicitCast(tmap, ee, hasEClass, expectedEClass)
		}
	}
	// The same, but with a TType as the interface
	wrapType = \type : TType, ee : DExp, pos -> {
		eclass = findOrMakeCNodeClass(tmap, type, makeErrorReason([pos], "implicit-cast"));
		wrap(eclass, ee);
	}
	switch (e) {
		DVoid(pos): wrapType(voidTType, e, pos);
		DBool(v, pos): wrapType(boolTType, e, pos);
		DInt(v, pos): wrapType(intTType, e, pos);
		DDouble(v, pos): wrapType(doubleTType, e, pos);
		DString(v, pos): wrapType(stringTType, e, pos);
		DStringInclude(path, pos): wrapType(stringTType, e, pos);
		DVar(id, pos, eclass): wrap(eclass, e);
		DLet(id, value, body, pos, eclass): {
			// TODO: We should probably record the value type
			evalue = implicitDExpCasts(tmap, value, -1);
			ebody = implicitDExpCasts(tmap, body, eclass);
			wrap(eclass, DLet(e with value = evalue, body = ebody));
		}
		DIf(cond, then, else_, pos, eclass): {
			boolEClass = findOrMakeCNodeClass(tmap, boolTType, makeErrorReason([pos], "implicit-cast"));
			econd = implicitDExpCasts(tmap, cond, boolEClass);
			ethen = implicitDExpCasts(tmap, then, eclass);
			eelse = implicitDExpCasts(tmap, else_, eclass);
			wrap(eclass, DIf(e with cond = econd, then = ethen, else_ = eelse));
		}
		DCall(fn, args, pos, eclass): {
			// TODO: We should maybe record the expected type for the fn and args?

			fnEclass = getDExpEClass(fn);
			argEClasses = if (fnEclass != -1) {
				fnType = getUnionMapValue(tmap.cmap.cmap, fnEclass);
				switch (fnType) {
					CFunction(fnargs, return, reason): fnargs;
					default: map(args, \a -> -1);
				}
			} else map(args, \a -> -1);

			efn = implicitDExpCasts(tmap, fn, -1);
			eargs = mapi(args, \i, a -> {
				implicitDExpCasts(tmap, a, argEClasses[i]);
			});
			wrap(eclass, DCall(e with fn = efn, args = eargs));
		}
		DConstruct(structid, args, pos, eclass): {
			mstruct = ^(tmap.resolveStructName)(structid);
			argEClasses = mstruct ?? {
				map(mstruct.structArgs, \sa -> {
					dtype2eclass(tmap, sa.type, pos);
				})
			} : map(args, \__ -> -1);
			eargs = mapi(args, \i, a -> {
				implicitDExpCasts(tmap, a, argEClasses[i]);
			});
			wrap(eclass, DConstruct(e with args = eargs));
		}
		DLambda(args, body, pos, eclass): {
			ebody = implicitDExpCasts(tmap, body, eclass);
			wrap(eclass, DLambda(e with body = ebody));
		}
		DRef(value, pos, eclass): {
			// TODO: We should probably extract the type of the ref
			evalue = implicitDExpCasts(tmap, value, -1);
			wrap(eclass, DRef(e with value = evalue));
		}
		DField(value, field, pos, eclass): {
			// TODO: Should we record the value type?
			evalue = implicitDExpCasts(tmap, value, -1);
			wrap(eclass, DField(e with value = evalue));
		}
		DSetMutable(lhs, field, value, pos, eclass): {
			// println("Set mutable " + prettyEClass(tmap, eclass) + " " + summarizeDExp(lhs) + " ::= " + summarizeDExp(value));
			// TODO: Maybe we should record this type in the DSetMutable?
			elhs = implicitDExpCasts(tmap, lhs, -1);
			// TODO: Maybe we should record this type in the DSetMutable?
			evalue = implicitDExpCasts(tmap, value, -1);
			DSetMutable(e with lhs = elhs, value = evalue);
		}
		DArray(exps, pos, eclass): {
			elmClasses = 
				if (eclass != -1) {
					arrayType = getUnionMapValue(tmap.cmap.cmap, eclass);
					switch (arrayType) {
						CName(name, typars, reason): typars[0];
						default: -1;
					} 
				} else -1;

			eexps = mapi(exps, \i, ee -> {
				implicitDExpCasts(tmap, ee, elmClasses);
			});
			wrap(eclass, DArray(e with exps = eexps));
		}
		DSequence(exps, pos, eclass): {
			voidEclass = findOrMakeCNodeClass(tmap, voidTType, makeErrorReason([pos], "implicit-cast"));
			eexps = mapi(exps, \i, ee -> {
				implicitDExpCasts(tmap, ee, if (i + 1 == length(exps)) eclass else voidEclass);
			});
			wrap(eclass, DSequence(e with exps = eexps));
		}
		DSwitch(value, type, cases, defaultCase, pos, eclass): {
			ecases = map(cases, \case -> {
				DCase(case with body = implicitDExpCasts(tmap, case.body, eclass));
			});
			edef = defaultCase ?? {
				Some(implicitDExpCasts(tmap, defaultCase, eclass))
			} : None();
			eswitch = DSwitch(e with cases = ecases, defaultCase = edef);
			wrap(eclass, eswitch);
		}
		DCast(value, target, pos): {
			// TODO: Maybe we should record the original type?
			evalue = implicitDExpCasts(tmap, value, -1);
			DCast(e with value = evalue);
		}
		DDowncast(id, newid, subtype, subeclass, supereclass, scope, pos, eclass): {
			escope = implicitDExpCasts(tmap, scope, eclass);
			// OK, we can make this into a DLet with a cast instead!
			ecast = makeImplicitCast(tmap, DVar(id, pos, supereclass), supereclass, subeclass);
			let = DLet(newid, ecast, escope, pos, eclass);
			if (false) {
				println("We turn "  + summarizeDExp(e) + " into " + prettyCEClass(tmap.cmap, supereclass) + " -> " + prettyCEClass(tmap.cmap, subeclass) + " as " + toString(let));
			}
			let;
		}
		DTyped(value, supertype, pos, eclass): {
			evalue = implicitDExpCasts(tmap, value, eclass);
			wrap(eclass, DTyped(e with value = evalue));
		}
	}
}

getDExpEClass(d : DExp) -> int {
	switch (d) {
		DVoid(pos): -1;
		DBool(v, pos): -1;
		DInt(v, pos): -1;
		DDouble(v, pos): -1;
		DString(v, pos): -1;
		DStringInclude(path, pos): -1;
		DVar(id, pos, eclass): eclass;
		DLet(id, value, body, pos, eclass): eclass;
		DIf(cond, then, else_, pos, eclass): eclass;
		DCall(fn, args, pos, eclass): eclass;
		DConstruct(structid, args, pos, eclass): eclass;
		DLambda(args, body, pos, eclass): eclass;
		DRef(value, pos, eclass): eclass;
		DField(value, field, pos, eclass): eclass;
		DSetMutable(lhs, field, value, pos, eclass): eclass;
		DArray(exps, pos, eclass): eclass;
		DSequence(exps, pos, eclass): eclass;
		DSwitch(value, type, cases, defaultCase, pos, eclass): eclass;
		DCast(value, target, pos): -1;
		DDowncast(id, newid, subtype, subeclass, supereclass, scope, pos, eclass): eclass;
		DTyped(value, supertype, pos, eclass): eclass;
	}
}

dtype2eclass(tmap : TMap, d : DType, pos : int) -> int {
	tt = dtype2CType2(tmap, ref makeTree(), d);
	findOrMakeCNodeClass(tmap, tt, makeErrorReason([pos], ""));
}

makeImplicitCast(tmap : TMap, d : DExp, gotEClass : int, expectedEClass : int) -> DExp {
	// Do a call to a special fn __cast__ for this conversion.
	call = DCall(
		DVar(makeImplicitCastId(), d.pos, gotEClass),
		[d, DInt(gotEClass, d.pos), DInt(expectedEClass, d.pos)], // expression, from, to
		d.pos,
		expectedEClass
	);
	if (false) {
		println("Added an explicit cast from " + prettyCEClass(tmap.cmap, gotEClass) + " to " + prettyCEClass(tmap.cmap, expectedEClass) + " of " + summarizeDExp(d));
		// println(call);
	}
	call;
}

makeImplicitCastId() -> string {
	"__cast__"
}
