import tools/flow9/types/type;
import algorithms;

export {
	unresolvedTType(t : TType) -> bool;

	// Collect all unresolved types
	unresolvedTTypes(acc : Set<TType>, t : TType) -> Set<TType>;
}

unresolvedTType(t : TType) -> bool {
	switch (t) {
		TTypeName(id, typars): (id == "" && typars == []) || exists(typars, unresolvedTType);
		TTypeEClass(eclass): true;
		TTypeFunction(args, returnType): exists(args, unresolvedTType) || unresolvedTType(returnType);
		TTypeOverload(unique, overloads): true;
	}
}

unresolvedTTypes(acc : Set<TType>, t : TType) -> Set<TType> {
	switch (t) {
		TTypeName(id, typars): if (unresolvedTType(t)) insertSet(acc, t) else acc;
		TTypeEClass(eclass): insertSet(acc, t);
		TTypeFunction(args, returnType): {
			fold(args, unresolvedTTypes(acc, returnType), unresolvedTTypes)
		}
		TTypeOverload(unique, overloads): insertSet(acc, t);
	}
}
