export {
	TType ::= TTypeName, TTypeEClass, TTypeFunction, TTypeOverload, TTypeSupertype;
		TTypeEClass(eclass : int);
		TTypeName(id : string, typars : [TType]);
		TTypeFunction(args : [TType], returnType : TType);
		// To avoid collapsing equivalence classes, we have a unique id here.
		// It does not have any other significance - it just typically points to where it originates, but is not that type
		// We know the real type is one of these overloaded ones.
		TTypeOverload(unique : TType, overloads : [TType]);
		// Find a type which contains all subtypes. If maxed is true, it can NOT be bigger
		// than what is in the types. All types are <= to the supertype we need
		TTypeSupertype(unique : int, subtypes : [TType], maxed : bool);
}
