import tools/flow9/types/ugraph/tmap;
import tools/flow9/types/cgraph/init;

export {
	// Set up the type unification map
	makeTMap(
		onError : (int, string) -> void, 
		nextEClass : ref int,
		mkUnique : () -> int, 
		tracing : Tracing
	) -> TMap;

	// Define the resolvers we need. Required before unification works
	setTMapResolvers(t : TMap, 
		resolveStructName : (string) -> Maybe<DStruct>,
		resolveUnionName : (string) -> Maybe<DUnion>,
		resolveSupertypes : (string) -> [string], 
		resolveSubtypes : (string) -> [string], 
	) -> TMap;
}

makeTMap(onError : (int, string) -> void, nextEClass : ref int,
			mkUnique : () -> int, tracing : Tracing
		) -> TMap {
	self = ref None();
	tmap = TMap(
		makeCMap(),
		ref \__ -> {
			println("TODO: The resolvers are not set");
			None();
		},
		ref \__ -> {
			println("TODO: The resolvers are not set");
			None();
		},
		ref \__ -> {
			println("TODO: The resolvers are not set");
			[];
		},
		ref \__ -> {
			println("TODO: The resolvers are not set");
			[];
		},
		\er -> {
			reportErrors(er, onError)
		},
		nextEClass,
		mkUnique,
		tracing,
		ref "",
	);
	self := Some(tmap);
	tmap;
}

setTMapResolvers(t : TMap, 
	resolveStructName : (string) -> Maybe<DStruct>,
	resolveUnionName : (string) -> Maybe<DUnion>,
	resolveSupertypes : (string) -> [string], 
	resolveSubtypes : (string) -> [string], 
) -> TMap {
	t.resolveStructName := resolveStructName;
	t.resolveUnionName := resolveUnionName;
	t.resolveSupertypes := resolveSupertypes;
	t.resolveSubtypes := resolveSubtypes;
	t;
}

