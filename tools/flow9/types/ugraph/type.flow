import tools/flow9/types/ugraph/class;

export {
	// Construct or find an eclass for this DType. Optionally, give a map from typar ? to eclass'es
	dtype2eclass(tmap : TMap, typars : Tree<string, int>, d : DType) -> int;
}

dtype2eclass(tmap : TMap, typars : Tree<string, int>, d : DType) -> int {
	switch (d) {
		DTypePar(id, pos): {
			meclass = lookupTree(typars, id);
			switch (meclass) {
				None(): {
					node = TNodeName(id, [], [pos]);
					findOrMakeTNode(tmap, node, makeErrorReason([pos], "dtype2eclass"));
				}
				Some(eclass): eclass;
			}
		}
		DTypeName(id, ttypars, pos): {
			if (id == "auto") {
				makeTNodeClass(tmap)
			} else {
				node = TNodeName(id, map(ttypars, \tp -> dtype2eclass(tmap, typars, tp)), [pos]);
				findOrMakeTNode(tmap, node, makeErrorReason([pos], "dtype2eclass"));
			}
		}
		DTypeFunction(args, returnType, pos): {
			node = TNodeName("", 
				arrayPush(
					map(args, \arg -> dtype2eclass(tmap, typars, arg)),
					dtype2eclass(tmap, typars, returnType)
				),
				[pos]
			);
			findOrMakeTNode(tmap, node, makeErrorReason([pos], "dtype2eclass"));
		}
	}
}
