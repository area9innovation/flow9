import tools/flow9/types/ugraph/tmap;
import tools/flow9/types/type;
import text/blueprint;

export {
	prettyTTypeNode(tmap : TMap, t : TType) -> string;
	debugTNode(tmap : TMap, root : int) -> string;
	prettyTNode(tmap : TMap, t : TNode) -> string;
	prettyEClass(tmap : TMap, eclass : int) -> string;
	dumpTNodes(tmap : TMap) -> void;

	isEmptyTNode(n : TNode) -> bool;
	getTNodes(tmap : TMap) -> Set<int>;

	isDebuggingTopid(tmap : TMap) -> bool;
	isDebuggingEClass(tmap : TMap, eclass : int, seen : Set<int>) -> bool;
	dumpDebugEClasses(tmap : TMap) -> void;
}


prettyTTypeNode(tmap : TMap, t : TType) -> string {
	rec = \tt -> prettyTTypeNode(tmap, tt);
	switch (t) {
		TTypeEClass(eclass): {
			node = getUnionMapValue(tmap.tmap, eclass);
			root = findUnionMapRoot(tmap.tmap, eclass);
			"e" + i2s(root) 
			+ (if (isEmptyTNode(node)) {""}
			else {
				"=" + prettyEClass(tmap, root);
			});
		}
		TTypeName(id, typars): id + (if (typars == []) "" else "<" + superglue(typars, rec, ", ") + ">");
		TTypeFunction(args, returnType): "(" + superglue(args, rec, ", ") + ") -> " + rec(returnType);
		TTypeOverload(typar, overloads): "overloads_" + prettyTTypeNode(tmap, typar) + " {" + superglue(overloads, rec, ", ") + "}";
		TTypeSupertype(unique, subtypes, maxed): "super" + i2s(unique) + "{" + superglue(subtypes, rec, if (maxed) " & " else ", ") + "}";
	}
}

prettyTNode(tmap : TMap, t : TNode) -> string {
	switch (t) {
		TNodeName(name, typars, pos): {
			if (name == "") {
				if (typars == []) "Îµ"
				else {
					args = subrange(typars, 0, length(typars) - 1);
					rt = typars[length(typars) - 1];
					"(" + superglue(args, \e -> prettyEClass(tmap, e), ", ") + ")"
					+ "->" + prettyEClass(tmap, rt)
				}
			} else {
				name
				+ (if (typars != []) "<" + superglue(typars, \e -> prettyEClass(tmap, e), ",") + ">" else "");
			}
		}
		TNodeOverload(uniques, overloads, pos): {
			"overload" + superglue(set2array(uniques), i2s, "_") + "{"
			+ superglue(overloads, \o -> prettyTNode(tmap, o), ", ")
			+ "}"
		}
		TNodeSupertype(uniques, subtypes, usub, maxed, pos): {
			"super" + superglue(set2array(uniques), i2s, "_") 
			+ (if (maxed) "=" else "")
			+ "{"
			+ superglue(subtypes, \o -> prettyTNode(tmap, o), ", ")
			+ (if (isEmptySet(usub)) "" else 
				superglue(set2array(usub), \st -> {
					root = findUnionMapRoot(tmap.tmap, st);
					"e" + i2s(root)
				}, ", ")
			)
			+ "}" 
			;
		}
	}
}

prettyEClass(tmap : TMap, eclass : int) -> string {
	root = findUnionMapRoot(tmap.tmap, eclass);
	node = getUnionMapValue(tmap.tmap, eclass);
	if (isEmptyTNode(node)) "e" + i2s(root)
	else prettyTNode(tmap, node)
}

debugTNode(tmap : TMap, root : int) -> string {
	node = getUnionMapValue(tmap.tmap, root);

	childClasses = foldRange(0, ^(tmap.nextEClass), [], \acc2, ec -> {
		r = findUnionMapRoot(tmap.tmap, ec);
		if (r == root) {
			arrayPush(acc2, ec)
		} else acc2;
	});

	rpad(prettyTNode(tmap, node), " ", 30) + "   covers " + superglue(childClasses, \c -> "e" + i2s(c), " ");
}

dumpTNodes(tmap : TMap) -> void {
	roots = getTNodes(tmap);
	iterSet(roots, \root -> {
		node = getUnionMapValue(tmap.tmap, root);
		if (!isEmptyTNode(node)) {
			println("e" + i2s(root) + " = " + debugTNode(tmap, root));
		}
	});
}

getTNodes(tmap : TMap) -> Set<int> {
	aroots = getUnionMapRoots(tmap.tmap);
	filterSet(aroots, \r -> {
		r < ^(tmap.nextEClass)
	});
}


isEmptyTNode(n : TNode) -> bool {
	switch (n) {
		TNodeName(name, pars, pos): name == "" && pars == [];
		default: false;
	}
}

isDebuggingTopid(tmap : TMap) -> bool {
	isTracingId(tmap.tracing, StageTypeInference(), 1, ^(tmap.topid));
}

isDebuggingEClass(tmap : TMap, eclass : int, seen : Set<int>) -> bool {
	if (containsSet(seen, eclass)) false
	else {
		seen2 = insertSet(seen, eclass);	
		eclass != -1 && isDebuggingTopid(tmap)
		&& (
			isDebuggingEClass2(tmap, eclass)
			|| {
				node = getUnionMapValue(tmap.tmap, eclass);
				switch (node) {
					TNodeName(name, typars, pos): exists(typars, \tp -> {
						isDebuggingEClass(tmap, tp, seen2)
					});
					TNodeOverload(unique, overloads, pos): {
						exists(overloads, \ol -> {
							exists(ol.typars, \tp -> {
								isDebuggingEClass(tmap, tp, seen2)
							})
						})
					}
					TNodeSupertype(uniques, subtypes, unknownSubtypes, maxed, pos): {
						existsSet(unknownSubtypes, \st -> {
							isDebuggingEClass(tmap, st, seen2)
						}) || exists(subtypes, \ol -> {
							exists(ol.typars, \tp -> {
								isDebuggingEClass(tmap, tp, seen2)
							})
						})
					}
				}
			}
		)
	}
}

isDebuggingEClass2(tmap : TMap, eclass : int) -> bool {
	root = findUnionMapRoot(tmap.tmap, eclass);
	matchTracingId(tmap.tracing, \id -> {
		i2s(s2i(id)) == id
		&& findUnionMapRoot(tmap.tmap, s2i(id)) == root
	});
}

dumpDebugEClasses(tmap : TMap) -> void {
	if (isDebuggingTopid(tmap)) {
		println("\nDebug e-classes for " + ^(tmap.topid) + ":");
		roots = getTNodes(tmap);
		iterSet(roots, \root -> {
			node = getUnionMapValue(tmap.tmap, root);
			if (isDebuggingEClass2(tmap, root)) {
				println("e" + i2s(root) + " = " + debugTNode(tmap, root));
			}
		});
	}
}
