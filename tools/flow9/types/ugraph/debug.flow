import tools/flow9/types/ugraph/tmap;
import tools/flow9/types/cgraph/pretty;

export {
	debugCNode(tmap : TMap, root : int) -> string;
	isDebuggingTopid(tmap : TMap) -> bool;
	dumpDebugEClasses(tmap : TMap) -> void;
}

isDebuggingTopid(tmap : TMap) -> bool {
	isTracingId(tmap.tracing, StageTypeInference(), 1, ^(tmap.topid));
}

getTNodes(tmap : TMap) -> Set<int> {
	aroots = getUnionMapRoots(tmap.cmap.cmap);
	filterSet(aroots, \r -> {
		r < ^(tmap.nextEClass)
	});
}

dumpDebugEClasses(tmap : TMap) -> void {
	if (isDebuggingTopid(tmap)) {
		println("\nDebug e-classes for " + ^(tmap.topid) + ":");
		roots = getTNodes(tmap);
		iterSet(roots, \root -> {
			node = getUnionMapValue(tmap.cmap.cmap, root);
			println("e" + i2s(root) + " = " + debugCNode(tmap, root));
		});
		println("");
	}
}

debugCNode(tmap : TMap, root : int) -> string {
	node = getUnionMapValue(tmap.cmap.cmap, root);

	childClasses = foldRange(0, ^(tmap.nextEClass), [], \acc2, ec -> {
		r = findUnionMapRoot(tmap.cmap.cmap, ec);
		if (r == root) {
			arrayPush(acc2, ec)
		} else acc2;
	});

	"e" + i2s(root) + "=" + rpad(prettyCNode(tmap.cmap, node), " ", 30) + "   covers " + superglue(childClasses, \c -> "e" + i2s(c), " ");
}
