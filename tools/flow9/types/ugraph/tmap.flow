import ds/union_find_map;
import tools/flow9/dexp/dexp;
import tools/flow9/tracing;
import tools/flow9/types/reason;
import tools/flow9/types/cgraph/cmap;

export {
	TMap(
		// The eclasses are kept here
		cmap : CMap,
		// The helpers we need to do the unification
		resolveStructName : ref (string) -> Maybe<DStruct>,
		// The helpers we need to do the unification
		resolveUnionName : ref (string) -> Maybe<DUnion>,
		// Find the supertypes of this type - transitive
		resolveSupertypes : ref (string) -> [string],
		// Find the subtypes of this type - transitive
		resolveSubtypes : ref (string) -> [string],
		// For error reporting
		onError : (ErrorReason) -> void,
		// The next eclass
		nextEClass : ref int,
		// What names go to what classes?
		namedClasses : ref Tree<string, Set<int>>,
		// What functions with this arity go to what classes?
		functionClasses : ref Tree<int, Set<int>>,
		// Make a unique id for supertypes
		mkUnique : () -> int,
		// For debugging
		tracing : Tracing,
		// What id are we type checking at the moment?
		topid : ref string,
	);
}
