import tools/flow9/types/typeenv;
import tools/flow9/types/pretty;
import tools/flow9/types/util;
import tools/flow9/types/typeof;

export {
	// Instantiates typars into eclasses
	instantiateTTypePar(env : TTypeEnv, t : TType) -> TType;

	// Given this typename, instantiate it as either a union or struct typename, or a basic type
	instantiateTTypeName(env : TTypeEnv, name : string) -> TType;

	// Given this struct definition, instantiate a typename for it, 
	// and a consistent set of field types
	// Instantiates polymorphism.
	instantiateTTypeNameForStruct(env : TTypeEnv, struct : DStruct) -> Pair<TType, [Triple<string, bool, TType>]>;
}

instantiateTTypePar(env : TTypeEnv, t : TType) -> TType {
	doInstantiateTTypePar(env, ref makeTree(), t);
}

doInstantiateTTypePar(env : TTypeEnv, typars : ref Tree<string, TTypeEClass>, t : TType) -> TType {
	rec = \tt -> doInstantiateTTypePar(env, typars, tt);
	switch (t) {
		TTypeName(id, tyargs): {
			ityargs = map(tyargs, rec);
			if (id != "" && trim2(id, "?") == "") {
				mtype = lookupTree(^typars, id);
				mtype ?? {
					mtype;
				} : {
					tv = TTypeEClass(env.mkEClass());
					typars := setTree(^typars, id, tv);
					tv;
				}
			} else {
				TTypeName(id, ityargs);
			}
		}
		TTypeEClass(id): {
			// This happens when we have mutual "auto" top-levels in a chunk
			// println("Invariant broken: We can not instantiate type class e" + i2s(id));
			t;
		}
		TTypeFunction(args, returnType): TTypeFunction(map(args, rec), rec(returnType));
		TTypeOverload(typar, overloads): {
			TTypeOverload(rec(typar), sortUnique(map(overloads, rec)));
		}
	}
}

instantiateTTypeNameForStruct(env : TTypeEnv, struct : DStruct) -> Pair<TType, [Triple<string, bool, TType>]> {
	typars : [TTypeEClass] = map(struct.typars, \tp -> TTypeEClass(env.mkEClass()));

	typarTree = foldi(struct.typars, makeTree(), \i, acc, tp : string -> {
		setTree(acc, tp, typars[i].eclass)
	});

	tn = TTypeName(struct.id, typars);
	fields = map(struct.structArgs, \sa -> {
		Triple(sa.id, sa.ismutable, dtype2ttype(TTypeEnv(env with typars = typarTree), true, sa.type))
	});

	Pair(tn, fields);
}

instantiateTTypeName(env : TTypeEnv, name : string) -> TType {
	mstruct = env.resolveStructName(name);
	mstruct ?? {
		instantiateTTypeNameForStruct(env, mstruct).first
	} : {
		munion = env.resolveUnionName(name);
		switch (munion) {
			None(): {
				typars = if (name == "array" || name == "ref") 1 else 0;
				TTypeName(name, generate(0, typars, \__ -> TTypeEClass(env.mkEClass())));
			}
			Some(union): {
				typars = map(union.typars, \tp -> TTypeEClass(env.mkEClass()));
				TTypeName(name, typars);
			}
		}
	}
}
