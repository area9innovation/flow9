import ds/union_find_map;
import tools/flow9/types/type;
import tools/flow9/types/reason;

export {
	CMap(
		cmap : UnionFindMap<CNode, ErrorReason>,
		// Pending constraints
		constraints : ref List<TConstraint>
	);

	// The kinds of constraints
	TConstraint(subtype : int, supertype : int, reason : ErrorReason);

	// The nodes in our type unification graph
	CNode ::= CEpsilon, CName, CFunction, COverload;
		// Empty node
		CEpsilon();
		// A named type
		CName(name : string, typars : [int], reason : ErrorReason);
		// A function type
		CFunction(args : [int], return : int, reason : ErrorReason);
		// An overloaded type
		COverload(
			unique : Set<int>, 
			options : Set<CName>, 
			reason : ErrorReason
		);
}
