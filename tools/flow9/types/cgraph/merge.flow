import tools/flow9/types/cgraph/cgraph;
import tools/flow9/types/cgraph/pretty;

export {
	// This propagates all info between these nodes, but does not unify them at the top level
	mergeCNodes(cmap : CMap, left : CNode, right : CNode, reason : ErrorReason) -> CNode;
}

mergeCNodes(cmap : CMap, left : CNode, right : CNode, reason : ErrorReason) -> CNode {
	if (right == CEpsilon()) left
	else {
		error = \r2 -> {
			println(
				joinReasons(reason,
					elaborateReason(r2, 
						prettyCNode(cmap, left) + " != " + prettyCNode(cmap, right)
					)
				)
			);
			left;
		};
		todo = \ -> {
			println("TODO: Merge " + toString(left) + " and " + toString(right));
			left;
		}
		switch (left) {
			CEpsilon(): right;
			CName(name, typars, nreason): {
				todo();
			}
			CFunction(largs, lreturn, lreason): {
				switch (right) {
					CFunction(rargs, rreturn, rreason): {
						if (length(largs) == length(rargs)) {
							nargs = mapi(largs, \i, larg : int -> {
								unionUnionMap(cmap.cmap, larg, rargs[i], reason);
							});
							CFunction(
								nargs,
								unionUnionMap(cmap.cmap, lreturn, rreturn, reason),
								joinReasons(lreason, rreason)
							);
						} else {
							error(joinReasons(lreason, rreason));
						}
					}
					default: error(lreason);
				}
			}
			COverload(unique, options, oreason): {
				todo();
			}
		}
	}
}