import tools/flow9/dexp/dexp;
import tools/flow9/types/ugraph/tmap;
import tools/flow9/types/ugraph/class;
import tools/flow9/types/type;

export {
	// When we have a DType, we use this one. Instantiates polymorphism
	dtype2CType2(tmap : TMap, d : DType) -> TType;
}

dtype2CType2(tmap : TMap, d : DType) -> TType {
	switch (d) {
		DTypePar(id, pos): {
			TTypeName(id, [])
		}
		DTypeName(id, ntypars, pos): {
			if (id == "auto") {
				TTypeEClass(makeTNodeClass(tmap));
			} else {
				TTypeName(id, map(ntypars, \tp -> {
					dtype2CType2(tmap, tp)
				}));
			}
		}
		DTypeFunction(args, returnType, pos): {
			TTypeFunction(
				map(args, \arg -> {
					dtype2CType2(tmap, arg)
				}),
				dtype2CType2(tmap, returnType)
			)
		}
	}
}
