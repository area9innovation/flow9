import tools/flow9/types/cgraph/cgraph;
import tools/flow9/types/cgraph/dtype;
import tools/flow9/types/cgraph/unionmap;
import tools/flow9/types/ugraph/tmap;
import tools/flow9/types/cgraph/subtype;
import tools/flow9/types/pretty;

export {
	// When we know the type, find or make an eclass for this type
	resultCType(tmap : TMap, t : TType, reason : ErrorReason) -> TTypeEClass;

	// We know the result is a unification of these types
	unifyCType(tmap : TMap, left : TType, right : TType, reason : ErrorReason) -> TTypeEClass;
	unifyCEClass(tmap : TMap, lclass : int, rclass : int, reason : ErrorReason) -> TTypeEClass;

	// We know we have to subtype here - TODO: Figure out what the result is?
	// checkOnly defines whether we should update our types, or just do a check.
	// Returns true if this is possible.
	subtypeCType(tmap : TMap, subtype : TType, supertype : TType, checkOnly : bool, reason : ErrorReason) -> bool;
	subtypeCEClass(tmap : TMap, subClass : int, superClass : int, checkOnly : bool, reason : ErrorReason) -> bool;

	// When we have a DType, we use this one. Instantiates polymorphism
	dtype2CType(tmap : TMap, d : DType, reason : ErrorReason) -> TTypeEClass;
}

resultCType(tmap : TMap, t : TType, reason : ErrorReason) -> TTypeEClass {
	eclass = findOrMakeCNodeClass(tmap, t, reason);
	if (isTracingId(tmap.tracing, StageTypeInference(), 2, ^(tmap.topid))) {
		println("  " + prettyCEClass(tmap.cmap, eclass) + " = ttype " + prettyTType(t));
	}
	
	TTypeEClass(eclass);
}

unifyCType(tmap : TMap, left : TType, right : TType, reason : ErrorReason) -> TTypeEClass {
	lclass = findOrMakeCNodeClass(tmap, left, reason);
	rclass = findOrMakeCNodeClass(tmap, right, reason);
	unifyCEClass(tmap, lclass, rclass, reason);
}

unifyCEClass(tmap : TMap, lclass : int, rclass : int, reason : ErrorReason) -> TTypeEClass {
	if (isTracingId(tmap.tracing, StageTypeInference(), 1, ^(tmap.topid))) {
		debugErrorReason(reason, "  Unify " + prettyCEClass(tmap.cmap, lclass) + " with " + prettyCEClass(tmap.cmap, rclass) + ". ");
	}

	// TODO: This might not work.
	// In some cases, we have to postpone this.
	// Especially if it is an overload, which can not be resolved.

	root = unionUnionMap(tmap.cmap.cmap, lclass, rclass, reason);

	if (isTracingId(tmap.tracing, StageTypeInference(), 2, ^(tmap.topid))) {
		println("   to get root " + prettyCEClass(tmap.cmap, root));
	}

	TTypeEClass(root);
}

subtypeCType(tmap : TMap, subtype : TType, supertype : TType, checkOnly : bool, reason : ErrorReason) -> bool {
	subClass = findOrMakeCNodeClass(tmap, subtype, reason);
	superClass = findOrMakeCNodeClass(tmap, supertype, reason);
	orig = prettyCEClass(tmap.cmap, subClass) + " with super " + prettyCEClass(tmap.cmap, superClass);
	res = subtypeCEClass(tmap, subClass, superClass, checkOnly, reason);

	if (res) {
		if (isTracingId(tmap.tracing, StageTypeInference(), 1, ^(tmap.topid))) {
			debugErrorReason(reason, "  Subtype success " + orig + ". ");
			debugErrorReason(reason, "  Subtype success " + prettyCEClass(tmap.cmap, subClass) + " with super " + prettyCEClass(tmap.cmap, superClass) + ". ");
		}
	}
	res;
}

subtypeCEClass(tmap : TMap, subClass : int, superClass : int, checkOnly : bool, reason : ErrorReason) -> bool {
	sub : CNode = getUnionMapValue(tmap.cmap.cmap, subClass);
	super : CNode = getUnionMapValue(tmap.cmap.cmap, superClass);

	if (isTracingId(tmap.tracing, StageTypeInference(), 2, ^(tmap.topid))) {
		println("subtype " + prettyCEClass(tmap.cmap, subClass) + " with super " + prettyCEClass(tmap.cmap, superClass));
	}

	error = \ -> {
		if (!checkOnly) {
			println("TODO: Report error on subtype " + prettyCNode(tmap.cmap, sub) + " vs "  + prettyCNode(tmap.cmap, super));
		}
		false;
	}

	postpone = \ -> {
		if (!checkOnly) {
			constraint = TConstraint(subClass, superClass, reason);
			tmap.cmap.constraints := Cons(constraint, ^(tmap.cmap.constraints));
		}
		true;
	}

	// If we have a subtype against an overload. I.e. name or function against overload
	subVsOverload = \ov : COverload -> {
		potentials = filterSet(ov.options, \opt : int -> {
			subtypeCEClass(tmap, subClass, opt, true, reason);
		});
		npot = sizeSet(potentials);
		if (npot == 0) {
			error();
		} else if (npot == 1) {
			// OK, exactly one is possible.
			if (!checkOnly) {
				// We resolve the overload
				cand : int = set2array(potentials)[0];
				setUnionMapValue(tmap.cmap.cmap, superClass, CEpsilon());
				root = unionUnionMap(tmap.cmap.cmap, superClass, cand, reason);
				subtypeCEClass(tmap, subClass, cand, checkOnly, reason);
			} else true;
		} else {
			if (sizeSet(ov.options) > npot) {
				// OK, it is at least reduced
				if (!checkOnly) {
					nover = COverload(ov with options = potentials);
					setUnionMapValue(tmap.cmap.cmap, superClass, nover);
					true;
				} else true;
			} else {
				postpone();
			}
		}
	}

	// overload vs name or function
	overloadVsSuper = \ov : COverload -> {
		potentials = filterSet(ov.options, \opt : int -> {
			subtypeCEClass(tmap, opt, superClass, true, reason);
		});
		npot = sizeSet(potentials);
		if (npot == 0) {
			error();
		} else if (npot == 1) {
			// OK, exactly one is possible.
			if (!checkOnly) {
				// We resolve the overload
				cand : int = set2array(potentials)[0];
				setUnionMapValue(tmap.cmap.cmap, subClass, CEpsilon());
				root = unionUnionMap(tmap.cmap.cmap, subClass, cand, reason);
				subtypeCEClass(tmap, cand, superClass, checkOnly, reason);
			} else true;
		} else {
			if (npot < sizeSet(ov.options)) {
				if (!checkOnly) {
					nover = COverload(ov with options = potentials);
					setUnionMapValue(tmap.cmap.cmap, subClass, nover);
					true;
				} else true;
			} else {
				postpone();
			}
		}
	}

	anyVsEpsilon = \ -> {
		if (!checkOnly) {
			moverload = makeSupertypeOverload(tmap, sub, reason);
			moverload ?? {
				setUnionMapValue(tmap.cmap.cmap, superClass, moverload);
			} : {
				postpone();
				{}
			}
		}
		true;
	};

	if (sub == CEpsilon() && super == CEpsilon()) {
		// OK, postpone
		postpone();
	} else if (isCFlow(sub) || isCFlow(super)) {
		true;
	} else {
		switch (sub) {
			CEpsilon(): {
				// OK, we should find all subtypes of super, and make an overload for those
				moverload = makeSubtypeOverload(tmap, super, checkOnly, reason);
				moverload ?? {
					if (!checkOnly) {
						setUnionMapValue(tmap.cmap.cmap, subClass, moverload);
					}
					true;
				} : {
					postpone();
				}
			}
			CName(name, typars, subreason): {
				switch (super) {
					CEpsilon(): anyVsEpsilon();
					CName(sname, stypars, supreason): {
						if (name == sname) {
							if (length(typars) == length(stypars)) {
								foldi(typars, true, \i, ok : bool, typar -> {
									ok && subtypeCEClass(tmap, typar, stypars[i], checkOnly, reason);	// TODO: Elaborate reason?
								});
							} else {
								error();
							}
						} else {
							supers = ^(tmap.resolveSupertypes)(name);
							if (contains(supers, sname)) {
								// OK, lift the sub to the superworld, and do it there
								sub2super = makeSupertypeFromSub(tmap, sub, sname);
								subtypeCEClass(tmap, sub2super, superClass, checkOnly, reason);
							} else {
								error();
							}
						}
					}
					CFunction(sargs, return, supreason): error();
					COverload(sunique, options, supreason): subVsOverload(super);
				}
			}
			CFunction(args, return, subreason): {
				switch (super) {
					CEpsilon(): anyVsEpsilon();
					CName(sname, stypars, supreason): error();
					CFunction(sargs, sreturn, supreason): {
						if (length(args) == length(sargs)) {
							foldi(args, true, \i, ok : bool, arg -> {
								ok && subtypeCEClass(tmap, sargs[i], arg, checkOnly, reason);	// TODO: Elaborate reason?
							}) && subtypeCEClass(tmap, return, sreturn, checkOnly, reason);	// TODO: Elaborate reason?
						} else {
							error();
						}
					}
					COverload(sunique, options, supreason): subVsOverload(super);
				}
			}
			COverload(unique, options, subreason): {
				switch (super) {
					CEpsilon(): anyVsEpsilon();
					CName(__, __, __): overloadVsSuper(sub);
					CFunction(__, __, __): overloadVsSuper(sub);
					COverload(sunique, soptions, supreason): {
						// Find the supers that work for all subsets:
						supPotentials = filterSet(soptions, \sopt -> {
							forall(set2array(mapSet(options, \opt : int -> {
								subtypeCEClass(tmap, opt, sopt, true, reason);
							})), idfn)
						});
						if (isEmptySet(supPotentials)) {
							println("TODO: No super works for all subs, but probably something works for " + prettyCNode(tmap.cmap, sub) + " sub " + prettyCNode(tmap.cmap, super));
							postpone();
						} else {
							// OK, we have the list of supers that work.
							resSuper = if (sizeSet(supPotentials) == 1) {
								cand = set2array(supPotentials)[0];
								getUnionMapValue(tmap.cmap.cmap, cand);
							} else {
								COverload(sunique, supPotentials, supreason);
							};
							// println("Result of " + prettyCNode(tmap.cmap, sub) + " sub " + prettyCNode(tmap.cmap, super) + " is " + prettyCNode(tmap.cmap, resSuper));
							if (!checkOnly) {
								setUnionMapValue(tmap.cmap.cmap, superClass, resSuper);
								subtypeCEClass(tmap, subClass, superClass, checkOnly, reason);
							} else true;
						}
					}
				}
			}
		}
	}
}

dtype2CType(tmap : TMap, d : DType, reason : ErrorReason) -> TTypeEClass {
	tt = dtype2CType2(tmap, ref makeTree(), d);
	resultCType(tmap, tt, reason);
}

isCFlow(c : CNode) -> bool {
	switch (c) {
		CName(n, tp, __): n == "flow" && tp == [];
		default: false;
	}
}
