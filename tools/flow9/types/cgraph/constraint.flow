import tools/flow9/types/cgraph/cgraph;
import tools/flow9/types/cgraph/dtype;
import tools/flow9/types/cgraph/unionmap;
import tools/flow9/types/ugraph/tmap;
import tools/flow9/types/pretty;

export {
	// When we know the type, find or make an eclass for this type
	resultCType(tmap : TMap, t : TType, reason : ErrorReason) -> TTypeEClass;

	// We know the result is a unification of these types
	unifyCType(tmap : TMap, left : TType, right : TType, reason : ErrorReason) -> TTypeEClass;

	// We know we have to subtype here - TODO: Figure out what the result is?
	subtypeCType(tmap : TMap, subtype : TType, supertype : TType, reason : ErrorReason) -> void;

	// When we have a DType, we use this one. Instantiates polymorphism
	dtype2CType(tmap : TMap, d : DType, reason : ErrorReason) -> TTypeEClass;
}

resultCType(tmap : TMap, t : TType, reason : ErrorReason) -> TTypeEClass {
	TTypeEClass(findOrMakeCNodeClass(tmap, t, reason));
}

unifyCType(tmap : TMap, left : TType, right : TType, reason : ErrorReason) -> TTypeEClass {
	lclass = findOrMakeCNodeClass(tmap, left, reason);
	rclass = findOrMakeCNodeClass(tmap, right, reason);
	root = unionUnionMap(tmap.cmap.cmap, lclass, rclass, reason);
	TTypeEClass(root);
}

subtypeCType(tmap : TMap, subtype : TType, supertype : TType, reason : ErrorReason) -> void {
	subClass = findOrMakeCNodeClass(tmap, subtype, reason);
	superClass = findOrMakeCNodeClass(tmap, supertype, reason);
	sub = getUnionMapValue(tmap.cmap.cmap, subClass);
	super = getUnionMapValue(tmap.cmap.cmap, superClass);
	if (sub == CEpsilon() && super == CEpsilon()) {
		// OK, postpone
		println("TODO: Postpone " + prettyTType(subtype) + " ≤ " + prettyTType(supertype));
	} else {
		println("TODO: Subtype " + prettyTType(subtype) + " ≤ " + prettyTType(supertype) + " as " + toString(sub) + " vs "  + toString(super));
	}
}

dtype2CType(tmap : TMap, d : DType, reason : ErrorReason) -> TTypeEClass {
	tt = dtype2CType2(tmap, ref makeTree(), d);
	resultCType(tmap, tt, reason);
}
