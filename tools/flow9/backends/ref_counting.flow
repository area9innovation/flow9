import tools/flow9/backends/bprogram;
import tools/flow9/bexp/type;
import tools/flow9/backends/cpp/cpp_backend;

export {
	addRefCounting(prog : BExpProgram) -> BExpProgram;
}

addRefCounting(prog : BExpProgram) -> BExpProgram {
	BExpProgram(prog with declarations = map(prog.declarations, refCountingBExpDeclaration));
}

refCountingBExpDeclaration(decl : BExpDeclaration) -> BExpDeclaration {
	generators = fold(cppGenerators(), makeSet(), \acc, g -> insertSet(acc, g.name));
	switch (decl) {
		BGlobalVar(id, body, type): BGlobalVar(id, refCountingBExp(BExpUsedVars(body, makeSet()), generators).exp, type);
		BExpFunction(id, typars, args, body, type): {
			BExpFunction(id, typars, args, refCountingBExp(BExpUsedVars(body, makeSet()), generators).exp, type);
		}
		BExpNative(id, isio, type, nativeName): decl;
	}
}

BExpUsedVars(
	exp : BExp,
	usedVars : Set<string>,
);

refCountingBExp(exp : BExpUsedVars, generators : Set<string>) -> BExpUsedVars {
	dupDrop = \e -> dropBExpUsedVars(dupBExpUsedVars(e));
	recInc = \e, tails -> refCountingBExp(BExpUsedVars(e, tails), generators);
	rec = \e -> recInc(e, exp.usedVars);
	mapExpA = \args -> {
		foldr(args, Pair([], exp.usedVars), \acc, arg -> unpair(acc, \newArgs, newTails -> {
			newExp = recInc(arg, newTails);
			Pair(concat([reduceBCounter(newExp.exp)], newArgs), newExp.usedVars);
		}));
	}

	switch (exp.exp) {
		BVoid() : exp;
		BBool(v) : exp;
		BInt(v) : exp;
		BDouble(v) : exp;
		BString(v): exp; // TODO: ?? dupBExpUsedVars(exp);
		BVar(id, type): if (isBTypeFunction(type)) exp else dupDrop(exp);
		BArray(args, type): {
			values = mapExpA(args);
			BExpUsedVars(BArray(values.first, type), values.second);
			// TODO: dupBExpUsedVars(BArray(map(args, rec), type));
		}
		BLet(id, val, body, type): {
			newBody = rec(body);
			newValue = recInc(val, newBody.usedVars);
			dupExp = dupDrop(BExpUsedVars(BVar(id, getBType(val)), newValue.usedVars));
			reducedBCounter = reduceBCounter(dupExp.exp);
			bodyWithDup = switch (reducedBCounter : BExp) {
				BCounter(): BSequence([reducedBCounter, newBody.exp], type);
				default: newBody.exp;
			}
			BExpUsedVars(
				BLet(id, reduceBCounter(newValue.exp), bodyWithDup, type),
				dupExp.usedVars
			);
		}
		BLambda(args, body, type): {
			newBody = rec(body);
			BExpUsedVars(BLambda(args, newBody.exp, type), newBody.usedVars);
		}
		BCall(fn, args, type): {
			newFn = rec(fn);
			newArgs = foldr(args, Pair([], newFn.usedVars), \acc, arg -> unpair(acc, \newArgs, newTails -> {
				newArg = recInc(arg, newTails);
				if (isNativeWithoutDropFn(fn, generators)) {
					Pair(concat([reduceBCounter(newArg.exp)], newArgs), newArg.usedVars);
				} else {
					// drop is inside the FN
					dupedArg = dupBExpUsedVars(newArg);
					Pair(concat([reduceBCounter(dupedArg.exp)], newArgs), dupedArg.usedVars);
				}
			}));
			BExpUsedVars(BCall(newFn.exp, newArgs.first, type), newArgs.second)
		}
		BIf(cond, then, else_, type): {
			newCond = rec(cond);
			newThen = recInc(then, newCond.usedVars);
			newElse = recInc(else_, newThen.usedVars);
			BExpUsedVars(
				BIf(newCond.exp, newThen.exp, newElse.exp, type),
				newElse.usedVars
			);
		}
		BSequence(exps, type): {
			values = mapExpA(exps);
			BExpUsedVars(BSequence(values.first, type), values.second);
		}
		BSwitch(value, switchType, cases, defaultCase, type): {
			newValueExp = rec(value);
			newValue : BVar = switch (newValueExp.exp) {
				BVar(id, t) : BVar(id, t);
				default: BVar("", type);
			}
			newCases = foldr(cases, Pair([], newValueExp.usedVars), \acc, case -> unpair(acc, \newArgs, newTails -> {
				newBody = recInc(case.body, newTails);
				Pair(concat([BCase(case.id, newBody.exp)], newArgs), newBody.usedVars);
			}));
			newDefCase = maybeMap(defaultCase, \c -> recInc(c, newCases.second));
			BExpUsedVars(
				BSwitch(newValue, switchType, newCases.first, maybeMap(newDefCase, \c -> c.exp), type),
				eitherMap(newDefCase, \c -> c.usedVars, newCases.second)
			);
		}
		BConstruct(struct, args, type): {
			values = mapExpA(args);
			BExpUsedVars(BConstruct(struct, values.first, type), values.second);
		}
		BField(value, field, type): {
			newValue = rec(value);
			BExpUsedVars(BField(newValue.exp, field, type), newValue.usedVars);
		}
		BSetMutable(left, field, value, type): {
			newLeft = rec(left);
			newValue = recInc(value, newLeft.usedVars);
			BExpUsedVars(
				BSetMutable(newLeft.exp, field, newValue.exp, type),
				newValue.usedVars
			)
		}
		BCast(value, from, to): {
			newValue = rec(value);
			BExpUsedVars(BCast(newValue.exp, from, to), newValue.usedVars);
		}
		BCounter(): exp; // shouldn't happen
	}
}

dropBExpUsedVars(exp : BExpUsedVars) -> BExpUsedVars {
	BExpUsedVars(BDropValue(exp.exp), exp.usedVars);
}

dupBExpUsedVars(exp : BExpUsedVars) -> BExpUsedVars {
	id = extractBVarId(exp.exp);
	if (id == "") {
		exp;
	} else if (!containsSet(exp.usedVars, id)){
		BExpUsedVars(exp.exp, insertSet(exp.usedVars, id));
	} else {
		BExpUsedVars(BDupValue(exp.exp), exp.usedVars);
	}
}

extractBVarId(exp : BExp) -> string {
	switch (exp) {
		BVar(id, __) : id;
		BDupValue(value) : extractBVarId(value);
		BDropValue(value) : extractBVarId(value);
		default : "";
	}
}

isBTypeFunction(type : BType) -> bool {
	switch (type) {
		BTypePar(__) : false;
		BTypeName(__, __) : false;
		BTypeFunction(__, __) : true;
	}
}

// TODO
isNativeWithoutDropFn(exp : BExp, generators : Set<string>) -> bool {
	switch (exp) {
		BVar(id, __) : containsSet(generators, id);
		default : false;
	}
}

reduceBCounter(counter : BCounter) -> BExp {
	untriple(extractBExpFromBCounter(counter, 0, 0), \exp, dupCnt, dropCnt -> {
		cnt = min(dupCnt, dropCnt);
		reducedDupCnt = dupCnt - cnt;
		reducedDropCnt = dropCnt - cnt;
		newValue = fold(enumFromTo(1, reducedDupCnt), exp, \newExp, __ -> BDupValue(newExp));
		fold(enumFromTo(1, reducedDropCnt), newValue, \newExp, __ -> BDropValue(newExp));
	});
}

extractBExpFromBCounter(exp : BExp, dupCnt : int, dropCnt : int) -> Triple<BExp, int, int> {
	switch (exp : BExp) {
		BDupValue(value) : extractBExpFromBCounter(value, dupCnt + 1, dropCnt);
		BDropValue(value) : extractBExpFromBCounter(value, dupCnt, dropCnt + 1);
		default : Triple(exp, dupCnt, dropCnt);
	}
}