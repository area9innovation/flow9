import tools/flow9/bexp/bexp;
import tools/flow9/dexp/dexp;

export {
	// Typed intermediate representation with code in topological order, but not in statements yet
	BExpProgram(
		structs : Tree<string, DStruct>,
		unions : Tree<string, DUnion>,
		declarations : [BExpDeclaration]
	);

	// This is the typed AST we send to the backends when they need to compile using statements
	BProgram(
		structs : Tree<string, DStruct>,
		unions : Tree<string, DUnion>,
		declarations : [BDeclaration]
	);

	BExpDeclaration ::= BGlobalVar, BExpFunction, BExpNative;
	BDeclaration ::= BGlobalVar, BStatFunction, BExpNative;

		BGlobalVar(id : string, body : BExp, type : BType);

		BExpFunction(id : string, args : [string], body : BExp, type : BType);
		BStatFunction(id : string, args : [string], body : BStatement, tailCall : bool, type : BType);

		BExpNative(id : string, isio : bool, type : BType, nativeName : string);

	// Statement-based languages can get this format:
	BStatement ::= BIfStatement, BLetStatement, BSetMutableStatement, BReturnVoid, BReturn, BTailCall, BSequenceStatement, BSwitchStatement;
		BIfStatement(cond : BExp, then : BStatement, else_ : BStatement);
		BLetStatement(id : string, value : BExp, body : BStatement);
		BSetMutableStatement(left : BExp, field : string, value : BExp);
		BSequenceStatement(statements : [BStatement]);

		// The empty return. We could maybe have BVoid and BVoidType instead?
		BReturnVoid();
		// Return a value
		BReturn(val : BExp);

		// Do a tail call to ourselves with these bindings
		BTailCall(fn : string, args : [string], values : [BExp], type : BType);

		BSwitchStatement(expr : BExp, cases : [BCaseStatement], type : BType);
			// TODO: We should arguably add a downcast type here
			BCaseStatement(id : string, body : BStatement);
}
