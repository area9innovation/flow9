import ds/array;
import ds/set;

export {
	getNativeNames() -> [string];
	getImplementedNatives() -> Set<string>;
	getPolimorpicNatives() -> Set<string>;
}


getNativeNames() -> [string] {
	concat(
		[
			"Native.d2s",
			"Native.trunc",
		],
		map(getAllNativeNames(), \v -> "Native." + v.first)
	);
}

getImplementedNatives() -> Set<string> {
	fold(getAllNativeNames(), makeSet(), \acc, v -> insertSet(acc, "flow_" + v.first));
}

getPolimorpicNatives() -> Set<string> {
	fold(getAllNativeNames(), makeSet(), \acc, v -> if (v.second) insertSet(acc, "flow_" + v.first) else acc);
}

// TODO: find a better way
// native functions can have multiple implementations (polimorphic)
// add fn to this array if it has only 1 implementation with template + std::function
// name - polimorphic
getAllNativeNames() -> [Pair<string, bool>] {
	[
		Pair("fold", true),
		Pair("println", false),
		Pair("println2", false),
		Pair("quit", false),
		Pair("isSameStructType", false),
		Pair("extractStruct", true),
		Pair("exp", false),
		Pair("log", false),
		Pair("strlen", false),
		Pair("substring", false),
		Pair("getCharCodeAt", false),
		Pair("enumFromTo", false),
		Pair("map", true),
		Pair("filter", true),
		Pair("concat", false),
		Pair("bitNot", false),
		Pair("bitAnd", false),
		Pair("bitOr", false),
		Pair("bitXor", false),
		Pair("bitShl", false),
		Pair("bitUshr", false),
		Pair("length", false),
		Pair("replace", true),
		Pair("iter", true),
		Pair("iteri", true),
		Pair("iteriUntil", true),

		Pair("getStructName", false),
		Pair("isArray", false),
		Pair("isSameObj", false),
	]
}