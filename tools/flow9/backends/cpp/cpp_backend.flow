import tools/flow9/backends/backend;
import text/blueprint;

export {
	CppInfo(
		globals : Set<string>,
		structIds : Tree<string, int>, // id - globalIndex
		unionTypes : Tree<string, [BType]>,
		statFunctions : Tree<string, BType>, // id - type
	);
	cppBackend(info : CppInfo) -> Backend<CppInfo>;
	cppBackendSpec() -> BackendSpec;
}

cppBackend(info : CppInfo) -> Backend<CppInfo> {
	makeBackend("cpp", 
	[
		// Keywords
		"and_eq", "And", "asm", "auto", "bitand", "bitor", "bool", "break", "case", "catch", 
		"char", "class", "compl", "const_cast", "const", "continue", "default", "delete", "do", 
		"double", "dynamic_cast", "else", "enum", "explicit", "export", "extern", "false", "float", 
		"for", "friend", "goto", "if", "inline", "int", "long", "mutable", "namespace", "new", 
		"not_eq", "not", "operator", "or_eq", "or", "private", "protected", "public", "register", 
		"reinterpret_cast", "return", "short", "signed", "sizeof", "static_cast", "static", "struct", 
		"switch", "template", "this", "throw", "true", "try", "typedef", "typeid", "typename", 
		"union", "unsigned", "using", "virtual", "void", "volatile", "wchar_t", "while", "xor_eq", 
		"xor", 	
	], 

	// generators
	[
		BackGen("||", bboolType, BackBinOp(" || ", 10, BackArg(0), BackArg(1))),
		BackGen("&&", bboolType, BackBinOp(" && ", 20, BackArg(0), BackArg(1))),
		BackGen("==", bvoidType, BackBinOp(" == ", 30, BackArg(0), BackArg(1))),
		BackGen("!=", bvoidType, BackBinOp(" != ", 30, BackArg(0), BackArg(1))),

		BackGen("<=", bvoidType, BackBinOp(" <= ", 35, BackArg(0), BackArg(1))),
		BackGen("<", bvoidType, BackBinOp(" < ", 35, BackArg(0), BackArg(1))),
		BackGen(">=", bvoidType, BackBinOp(" >= ", 35, BackArg(0), BackArg(1))),
		BackGen(">", bvoidType, BackBinOp(" > ", 35, BackArg(0), BackArg(1))),

		BackGen("+", bintType, BackBinOp(" + ", 40, BackArg(0), BackArg(1))),
		BackGen("+", bdoubleType, BackBinOp(" + ", 40, BackArg(0), BackArg(1))),
		BackGen("+", bstringType, BackBinOp(" + ", 40, BackArg(0), BackArg(1))),

		BackGen("-", bintType, BackBinOp(" - ", 40, BackArg(0), BackArg(1))),
		BackGen("-", bdoubleType, BackBinOp(" - ", 40, BackArg(0), BackArg(1))),

		BackGen("*", bintType, BackBinOp(" * ", 50, BackArg(0), BackArg(1))),
		BackGen("*", bdoubleType, BackBinOp(" * ", 50, BackArg(0), BackArg(1))),

		BackGen("/", bintType, BackBinOp(" / ", 50, BackArg(0), BackArg(1))),
		BackGen("/", bdoubleType, BackBinOp(" / ", 50, BackArg(0), BackArg(1))),

		BackGen("%", bintType, BackBinOp(" % ", 50, BackArg(0), BackArg(1))),
		BackGen("%", bdoubleType, BackCall("std::fmod", [BackArg(0), BackArg(1)])),

		BackGen("__negate", BTypeFunction([bintType], bintType), BackPreOp(" -", 60, BackArg(0))),
		BackGen("__negate", BTypeFunction([bdoubleType], bdoubleType), BackPreOp(" -", 60, BackArg(0))),
		BackGen("__not", bvoidType, BackPreOp(" !", 60, BackArg(0))),

		BackGen("__ref", bvoidType, BackCall("makeFlowRef", [BackArg(0)])),
		BackGen("__deref", bvoidType, BackConcat([BackText("("), BackCall("*", [BackArg(0)]), BackText(")"), ])),
		BackGen(":=", bvoidType, BackBinOp(" = ", 70, BackConcat([BackText("*"), BackArg(0)]), BackArg(1))),

		BackGen("__index", bvoidType, BackConcat([BackBinOp("[", 80, BackArg(0), BackArg(1)), BackText("]")])),
	], info);
}

cppBackendSpec() -> BackendSpec {
	makeBackendSpec(
		cppBackend(CppInfo(makeSet(), makeTree(), makeTree(), makeTree())),
		"", "flow_", "",
		[
			// Natives
			"Native.fold",
			"Native.println",
			"Native.println2",
			"Native.quit",
			"Native.isSameStructType",
			"Native.extractStruct",
			"Native.exp",
			"Native.log",
			"Native.strlen",
			"Native.substring",
			"Native.getCharCodeAt",
			"Native.enumFromTo",
			"Native.map",
			"Native.filter",
			"Native.concat",
			"Native.bitNot",
			"Native.bitAnd",
			"Native.bitOr",
			"Native.bitXor",
			"Native.bitShl",
			"Native.bitUshr",
			"Native.d2s",
			"Native.trunc",
			"Native.length",
			"Native.replace",
		]
	)
}
