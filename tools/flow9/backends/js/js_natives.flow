import tools/flow9/backends/backend;
import text/blueprint;

export {
	jsBackend() -> Backend;
}

jsBackend() -> Backend {
	comparison = \name, target, prec -> {
		[
			BackGen(name, BTypeFunction([bboolType, bboolType], bboolType), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bintType, bintType], bboolType), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bdoubleType, bdoubleType], bboolType), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			BackGen(name, BTypeFunction([bstringType, bstringType], bboolType), BackBinOp(target, prec, BackArg(0), BackArg(1))),
			// TODO: We need something fancy for other types here
		]
	};

	backend = makeBackend("js", [
			// Keywords
			"abstract", "arguments",  "await",        "boolean",
			"break",    "byte",       "case",         "catch",
			"char",     "class",      "const",        "continue",
			"debugger", "default",    "delete",       "do",
			"double",   "else",       "enum",         "eval",
			"export",   "extends",    "false",        "final",
			"finally",  "float",      "for",          "function",
			"goto",     "if",         "implements",   "import",
			"in",       "instanceof", "int",          "interface",
			"let",      "long",       "native",       "new",
			"null",     "package",    "private",      "protected",
			"public",   "return",     "short",        "static",
			"super",    "switch",     "synchronized", "this",
			"throw",    "throws",     "transient",    "true",
			"try",      "typeof",     "var",          "void",
			"volatile", "while",      "with",         "yield",
			"R_" // Used by runtime for references
		], 

		//
		// Inlined operators
		//
		concatA([

		// In JS, there is ? here for if

		[
			BackGen("||", bboolType, BackBinOp("||", 10, BackArg(0), BackArg(1))),
			BackGen("&&", bboolType, BackBinOp("&&", 20, BackArg(0), BackArg(1))),
		],

		//	BackBinOp("|", 25, BackArg(0), BackArg(1)),
		//	BackBinOp("^", 26, BackArg(0), BackArg(1)),
		// 	BackBinOp("^", 27, BackArg(0), BackArg(1)),

		comparison("==", "===", 30),
		comparison("!=", "!==", 30),

		comparison("<=", "<=", 35),
		comparison("<", "<", 35),
		comparison(">=", ">=", 35),
		comparison(">", ">", 35),

		[
			// General deep comparison of objects
			BackGen("==", bvoidType, 
				BackRequire(BackText(equality_native),
					BackCall("deepEquality", [BackArg(0), BackArg(1)])
				)
			),
			BackGen("!=", bvoidType, 
				BackRequire(BackText(equality_native),
					BackPreOp("!", 60,
						BackCall("deepEquality", [BackArg(0), BackArg(1)])
					)
				)
			),
			BackGen("<", bvoidType, 
				BackRequire(BackText(less_native),
					BackBinOp("<", 35,
						BackCall("compareByValue", [BackArg(0), BackArg(1)]),
						BackText("0")
					)
				)
			),
			BackGen(">", bvoidType, 
				BackRequire(BackText(less_native),
					BackBinOp("<", 35,
						BackCall("compareByValue", [BackArg(1), BackArg(0)]),
						BackText("0")
					)
				)
			),
			BackGen("<=", bvoidType, 
				BackRequire(BackText(less_native),
					BackBinOp("<=", 35,
						BackCall("compareByValue", [BackArg(0), BackArg(1)]),
						BackText("0")
					)
				)
			),
			BackGen(">=", bvoidType, 
				BackRequire(BackText(less_native),
					BackBinOp("<=", 35,
						BackCall("compareByValue", [BackArg(1), BackArg(0)]),
						BackText("0")
					)
				)
			),
		],

		// In JS, we have bitshifts here <<, >>, >>>

		[
			BackGen("+", bintType, BackBinOp("|", 25, BackBinOp("+", 40, BackArg(0), BackArg(1)), BackText("0"))),
			BackGen("+", bdoubleType, BackBinOp("+", 40, BackArg(0), BackArg(1))),
			BackGen("+", bstringType, BackBinOp("+", 40, BackArg(0), BackArg(1))),

			BackGen("-", bintType, BackBinOp("|", 25, BackBinOp("-", 40, BackArg(0), BackArg(1)), BackText("0"))),
			BackGen("-", bdoubleType, BackBinOp("-", 40, BackArg(0), BackArg(1))),

			BackGen("*", bintType, 
				BackRequire(
					// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
					BackText("if (!Math.imul) Math.imul = function(opA, opB) {var result = (opA & 0x003fffff) * opB;if (opA & 0xffc00000) result += (opA & 0xffc00000) * opB |0;return result |0;};"),
					BackCall("Math.imul", [BackArg(0), BackArg(1)])
				)
			),
			BackGen("*", bdoubleType, BackBinOp("*", 50, BackArg(0), BackArg(1))),

			BackGen("/", bintType, BackBinOp("|", 25, BackBinOp("/", 50, BackArg(0), BackArg(1)), BackText("0"))),
			BackGen("/", bdoubleType, BackBinOp("/", 50, BackArg(0), BackArg(1))),

			BackGen("%", bintType, BackBinOp("|", 25, BackBinOp("%", 50, BackArg(0), BackArg(1)), BackText("0"))),
			BackGen("%", bdoubleType, BackBinOp("%", 50, BackArg(0), BackArg(1))),

			BackGen("__negate", BTypeFunction([bintType], bintType), BackBinOp("|", 25, BackPreOp("-", 60, BackArg(0)), BackText("0"))),
			BackGen("__negate", BTypeFunction([bdoubleType], bdoubleType), BackPreOp("-", 60, BackArg(0))),
			BackGen("__not", bvoidType, BackPreOp("!", 60, BackArg(0))),

			// Cast and type is ignored
			BackGen(":", bvoidType, BackArg(0)),

			BackGen("__ref", bvoidType, 
				BackRequire(
					// Alternative: class R_ {constructor(v) { this.__v = v; } }
					BackText("function R_(v){this.v=v}"),
					BackCall("new R_", [BackArg(0)])
				)
			),
			BackGen("__deref", bvoidType, BackPostOp(".v", 60, BackArg(0))),
			BackGen(":=", bvoidType, BackBinOp(".v=", 70, BackArg(0), BackArg(1))),

			BackGen("[", bvoidType, BackConcat([BackText("["), BackArg(0), BackText("]")])),
			BackGen(",", bvoidType, BackBinOp(",", 80, BackArg(0), BackArg(1))),
			BackGen("__index", bvoidType, BackConcat([BackBinOp("[", 80, BackArg(0), BackArg(1)), BackText("]")])),

			BackGen(".", bvoidType, BackBinOp(".", 60, BackArg(0), BackUnquote(BackArg(1)))),

			// Inlined natives
			BackGen("Native.println", bvoidType, 
				BackRequire(
					BackText(to_string_native),
					BackText("function(x) { console.log((typeof x === 'string') ? x : toString(x)); }")
				)
			),

			BackGen("Native.fold", bvoidType, BackText("function(values,init,fn){for(var i=0;i<values.length;i++){init=fn(init,values[i]);}return init;}")),
			BackGen("Native.map", bvoidType, BackText("function(a,fn){return a.map(fn);}")),
			BackGen("Native.filter", bvoidType, BackText("function(a,fn){return a.filter(fn);}")),
			BackGen("Native.enumFromTo", bvoidType, BackText("function(init,n){var r=[];for(var i=init;i<=n;i++){r.push(i);}return r;}")),
			BackGen("Native.length", bvoidType, BackText("function(a){return a.length;}")),
			BackGen("Native.concat", bvoidType, BackText("function(a,b){return a.concat(b);}")),
			BackGen("Native.iter", bvoidType, BackText("function(a,fn){for(var i=0;i<a.length;i++){fn(a[i]);}}")),
			BackGen("Native.replace", bvoidType, BackText("function(a,i,b){var c=a.slice();c[i]=b;return c;}")),

			BackGen("Native.isSameStructType", bvoidType, 
				BackText("function(a,b){return Object.prototype.hasOwnProperty.call(a,'_id')&&Object.prototype.hasOwnProperty.call(b,'_id')&&a._id==b._id}")
			),

			BackGen("Native.quit", bvoidType, 
				BackIfDef("browser",
					BackText("function(c) {window.open('','_top').close();}"),
					BackText("function(c) {}")
				)
			),
			BackGen("Native.sin", bvoidType, BackText("Math.sin")),
			BackGen("Native.asin", bvoidType, BackText("Math.asin")),
			BackGen("Native.cos", bvoidType, BackText("Math.cos")),
			BackGen("Native.acos", bvoidType, BackText("Math.acos")),
			BackGen("Native.atan", bvoidType, BackText("Math.atan")),
			BackGen("Native.atan2", bvoidType, BackText("Math.atan2")),
			BackGen("Native.exp", bvoidType, BackText("Math.exp")),
			BackGen("Native.log", bvoidType, BackText("Math.log")),
			// d->i
			BackGen("Native.trunc", bvoidType, BackText("function(d){return (d)|0;}")),
			BackGen("Native.i2d", bvoidType, BackText("function(i){return i;}")),
			BackGen("Native.i2s", bvoidType, BackText("function(i){return String(i);}")),
			BackGen("Native.d2s", bvoidType, BackText("function(d){return String(d);}")),
			BackGen("Native.bitXor", bvoidType, BackText("function(a,b){return a^b;}")),
			BackGen("Native.bitAnd", bvoidType, BackText("function(a,b){return a&b;}")),
			BackGen("Native.bitOr", bvoidType, BackText("function(a,b){return a|b;}")),
			BackGen("Native.bitUshr", bvoidType, BackText("function(a,b){return a>>>b;}")),
			BackGen("Native.bitShl", bvoidType, BackText("function(a,b){return a<<b;}")),
			BackGen("Native.bitNot", bvoidType, BackText("function(a){return ~a;}")),

			BackGen("Native.strlen", bvoidType, BackText("function(s){return s.length;}")),
			BackGen("Native.strIndexOf", bvoidType, BackText("function(str,substr) {return str.indexOf(substr,0);}")),

			BackGen("Native.substring", bvoidType, 
				// It turns out that Chrome does NOT copy strings out when doing substring,
				// and thus we never free the original string
				BackText("function(str,start,len){
					var s = str.slice(start,start+len);
					if (2 * s.length < str.length){return (' '+s).slice(1);} else return s;
				}")
			),
			BackGen("Native.cloneString", bvoidType, BackText("function(s){return (' '+s).slice(1);}")),

			BackGen("Native.getCharCodeAt", bvoidType, BackText("function(s,i){return s.charCodeAt(i);}")),
			BackGen("Native.getCharAt", bvoidType, BackText("function(s,i){return s.charAt(i);}")),

			BackGen("Native.getStructName", bvoidType, 
				BackText(blueprint("
					function(s) {
						if (Object.prototype.hasOwnProperty.call(s, '_id')) {
							return Runtime.structnames[s._id];
						} else {
							return \"\";
						}
					}
					", [])
				)
			),
			BackGen("Native.extractStructArguments", bvoidType, 
				BackText(blueprint("
					function(s) {
						if (Object.prototype.hasOwnProperty.call(s, '_id')) {
							var args = new Array();
							for (var field in s) {
								if (field != '_id') {
									args.push(s[field]);
								}
							}
							return args;
						} else {
							return [];
						}
					}
					", [])
				)
			),
			BackGen("Native.isArray", bvoidType, BackText("function(a){return Array.isArray(a);}")),
			BackGen("Native.makeStructValue", bvoidType, 
				BackText(blueprint("
					function(name, args, default_value) {
						var sid = Runtime.structids[name];
						if (sid == null) {
							return default_value;
						}
						var sargs = Runtime.structargs[sid];
						var o = { _id : sid };
						for (var i in sargs) {
							o[sargs[i]] = args[i];
						}
						return o;
					}
					", []
				))
			),
			BackGen("Native.isSameObj", bvoidType, 
				BackText(blueprint("
					function(a, b) {
						if (a == b) {
							return true;
						}
						// Singletons
						if (a != null && b != null && Object.prototype.hasOwnProperty.call(a, '_id') && a._id == b._id && Runtime.structargs[a._id].length == 0) {
							return true;
						}
						return false;
					};
					", []
				))
			),

			BackGen("Native.toString", bvoidType, 
				BackRequire(
					BackText(to_string_native),
					BackText("toString")
				)
			),

/*
Native.toLowerCase = function(str) {
	return str.toLowerCase();
};
Native.toUpperCase = function(str) {
	return str.toUpperCase();
};
Native.strReplace = function(str,find,replace) {
	return StringTools.replace(str,find,replace);
};

Native.concat = function(arr1,arr2) {
	return arr1.concat(arr2);
};

Native.iter = function(values,clos) {
	var _g = 0;
	while(_g < values.length) {
		var v = values[_g];
		++_g;
		clos(v);
	}
};
*/

		]
		]),
		false,
	);
	backend.requirements := insertSet(^(backend.requirements), 
		blueprint("
		var Runtime = function() { };

		Runtime.structnames = { };
		Runtime.structids = { };
		Runtime.structargs = { };
		Runtime.structargtypes = { };

		Runtime.initStruct = function(id, name, args, atypes) {
			this.structnames[id] = name;
			this.structids[name] = id;
			this.structargs[id] = args;
			this.structargtypes[id] = atypes;
		};

		Runtime.makeType = function(name, id, args) {
			return function() {
				this.id = id;
				this.name = name;
				this.args = args;
				this.equals = function(t) {
					if (this.is != t.id) {
						return false;
					}
					if (this.name != t.name) {
						return false;
					}
					if (this.args.length == t.args.length) {
						return false;
					}
					for (var i in this.args) {
						if (!this.args[i].equals(t.args[i])) {
							return false;
						}
					};
					return true;
				}
				this.toString = function() {
					var args = '';
					var s = '';
					for (var i in this.args) {
						args += s + this.args[i].toString();
						s = ', '
					};
					if (args == '') {
						return this.name;
					} else {
						return this.name + '(' + args + ')';
					}
				}
			}
		}

		Runtime.TypeVoid = Runtime.makeType('RTVoid', 0, []);
		Runtime.TypeBool = Runtime.makeType('RTBool', 1, []);
		Runtime.TypeInt = Runtime.makeType('RTInt', 2, []);
		Runtime.TypeDouble = Runtime.makeType('RTDouble', 3, []);
		Runtime.TypeString = Runtime.makeType('RTString', 4, []);
		Runtime.TypeArray = function(t) {
			return Runtime.makeType('RTArray', 5, [t]);
		}
		Runtime.TypeStruct = function(n) {
			return Runtime.makeType(n, 6, []);
		}
		Runtime.TypeRef = function(t) {
			return Runtime.makeType('RTRef', 7, [t]);
		}
		Runtime.TypeUnknown = Runtime.makeType('RTUnknown', 8, []);

		", []
		)
	);
	backend;
}

to_string_native : string = 
"var toString = function(value, keepStringEscapes) {
	if (keepStringEscapes == null) {
		keepStringEscapes = false;
	}
	if (value == null) {
		return '{}';
	}
	if (!Reflect.isObject(value)) {
		return Std.string(value);
	}
	if (Array.isArray(value)) {
		var r = '[';
		var s = '';
		for (var i in value) {
			r += s + toString(value[i]);
			s = ', ';
		}
		return r + ']';
	}
	if (Object.prototype.hasOwnProperty.call(value,'__v')) {
		return 'ref ' + toString(value.__v);
	}
	if (Object.prototype.hasOwnProperty.call(value, '_id')) {
		var id = value._id;
		var name = Runtime.structnames[id];
		var r = name + '(';
		if (name == 'DLink') {
			return r + '...)';
		}
		var s = '';
		var first = true;
		for (field in value) {
			if (field != '_id') {
				r += s + toString(value[field]);
				s = ', ';
			}
		}
		r += ')';
		return r;
	}
	if (Reflect.isFunction(value)) {
		return '<function>';
	}
	try {
		var s = value;
		if (!keepStringEscapes) {
			s = StringTools.replace(s,'\\\\','\\\\\\\\');
			s = StringTools.replace(s,'\\\"','\\\\\"');
			s = StringTools.replace(s,'\\n','\\\\n');
			s = StringTools.replace(s,'\\t','\\\t');
			return '\\\"' + s + '\\\"';
		} else {
			StringTools.replace(s,'\\\\','\\\\\\\\');
			return s;
		}
	} catch ( _g ) {
		//haxe_NativeStackTrace.lastError = _g;
		return '<native>';
	}
};
";

equality_native : string = "
var deepEquality = function(a, b) {
	if (a === b) return true;

	var isArray = Array.isArray;
	var hasProp = Object.prototype.hasOwnProperty;

	if (a && b && (typeof a == 'object') && (typeof b == 'object')) {
		var arrA = isArray(a), arrB = isArray(b), length, key;
		if (arrA && arrB) {
			length = a.length;
			if (length != b.length) return false;
			for (var i = length; i-- !== 0;) {
				if (!deepEquality(a[i], b[i])) return false;
			}
			return true;
		}

		if (arrA != arrB) return false;
		var result = false;

		if (hasProp.call(a, '_id') && hasProp.call(b, '_id')) {
			if (a._id !== b._id) {
				return false;
			} else {
				result = true;
			}
			for (field in a) {
				if (!deepEquality(a[field], b[field])) return false;
			}
		}
		if (hasProp.call(a, '__v') && hasProp.call(b, '__v')) {
			return false;
		}
		return result;
	}
	return false;
}
";

less_native : string = "
let compareByValue = function(o1, o2) {
	if (o1 === o2) return 0;
	if (o1 == null || o2 == null) {
		return 1;
	}
	var isArray = Array.isArray;
	if (isArray(o1)) {
		if (!isArray(o2)) {
			return 1;
		}
		var l1 = o1.length;
		var l2 = o2.length;
		var l = l1 < l2 ? l1 : l2;
		for (var i = 0; i < l; ++ i) {
			var c = compareByValue(o1[i], o2[i]);
			if(c != 0) {
				return c;
			}
		}
		if (l1 == l2) {
			return 0;
		} else if (l1 < l2) {
			return -1;
		} else {
			return 1;
		}
	}
	var hasProp = Object.prototype.hasOwnProperty;
	if (hasProp.call(o1, '_id')) {
		if (!hasProp.call(o2, '_id')) {
			return 1;
		}
		var i1 = o1._id;
		var i2 = o2._id;
		if (i1 < i2) {
			return -1;
		}
		if (i1 > i2) {
			return 1;
		}
		for (field in a) {
			var c = compareByValue(o1[field], o2[field]);
			if(c != 0) {
				return c;
			}
		}
		return 0;
	}
	if (o1 < o2) {
		return -1;
	} else {
		return 1;
	}
}
";
