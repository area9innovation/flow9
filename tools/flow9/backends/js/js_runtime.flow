import text/blueprint;
import tools/flow9/flow_path;
import tools/flow9/backends/js/js_utils;
import tools/flow9/backends/js/js_webfont;

export {
	// Returns a string with a full runtime JS code.
	linkRuntime(cfg : JsConfig, native_classes : Set<string>, mainFn : string) -> string;
}

linkRuntime(cfg : JsConfig, native_classes : Set<string>, mainFn : string) -> string {
	delfile = if (cfg.debug) \s -> "" else deleteFile;
	deleteFiles = \filenames : [string] -> iter(filenames, \fn -> {delfile(fn); {}});

	imports = superglue(set2array(native_classes), \e -> {
			importName = if ((e == "RenderSupport" || e == "RenderSupport3D" || e == "MediaStreamSupport" || e == "MediaRecorderSupport") && (cfg.jsmode == NODEJS_MODE || !isEmptySet(cfg.jslibrary))) {
				e + "NodeJs" 
			} else {
				e
			};
			"import " + importName + ";"
		}, 
		"\n"
	);

	jsfile = cfg.outputfile;
	hx = "FlowJsProgram.hx";
	code = blueprint("
		%imports%

		class FlowJsProgram {
			static public var globals__  = {
				%render%
			}
		}
		", [
			"imports", imports, 
			"render", if (containsSet(native_classes, "RenderSupport")) "  new RenderSupport();" else ""
		]
	);

	plSaveFileContent("FlowJsProgram.hx", code);
	srcDir = pathCombine(getFlowDirectory(), "platforms/js");
	commonSrcDir = pathCombine(getFlowDirectory(), "platforms/common/haxe");
	hxparams =
		if (cfg.jsmode == NODEJS_MODE && cfg.webmodule)
			["-js " + jsfile, hx, "-cp " + srcDir, "-cp " + commonSrcDir, "-D jsruntime", "-D no-deprecation-warnings", "-lib hxnodejs", "-D flow_nodejs", "-D flow_webmodule", "-D js-classic", "-lib node-express"]
		else if (cfg.jsmode == NODEJS_MODE)
			["-js " + jsfile, hx, "-cp " + srcDir, "-cp " + commonSrcDir, "-D jsruntime", "-D no-deprecation-warnings", "-lib hxnodejs", "-D flow_nodejs", "-D js-classic"]
		else if (cfg.jsmode == NWJS_MODE)
			["-js " + jsfile, hx, "-cp " + srcDir, "-cp " + commonSrcDir, "-D jsruntime", "-D no-deprecation-warnings", "-lib hxnodejs", "-D nwjs", "-D js-classic"]
		else if (cfg.sourcemap)
			["-js " + jsfile, hx, "-cp " + srcDir, "-cp " + commonSrcDir, "-debug", "-D jsruntime", "-D no-deprecation-warnings", "-D js-classic"]
		else
			["-js " + jsfile, hx, "-cp " + srcDir, "-cp " + commonSrcDir, "-D jsruntime", "-D no-deprecation-warnings", "-D js-classic"];

	tmpfiles = ref [];
	hxparams1 = if (containsSet(native_classes, "RenderSupport") && cfg.jsmode != NODEJS_MODE) {
			p = prepareWebFonts(cfg);
			tmpfiles := p.first;
			fontparams = p.second;
			if (fontparams == []) [] else concat(
				concat(
					concat(hxparams, ["-lib pixijs"]),
					fontparams
				), ["-D flow_main=\"" + mainFn + "\""])
		} else hxparams;

	hxparams2 = if (hxparams1 != [] && containsSet(native_classes, "RenderSupport3D") && cfg.jsmode != NODEJS_MODE) {
			concat(hxparams1, ["-lib threejs"])
		} else hxparams1;

	// Push 'readable' into haxe code.
	hxparams3 = if (hxparams2 == []) []
		else if (cfg.readable) {
			concat(hxparams2, ["-D readable"])
		} else if (!isEmptySet(cfg.jslibrary)) {
			concat(hxparams2, ["-D jslibrary"])
		} else hxparams2;

	buildFile = "haxe_build.hxml";
	if (cfg.verbose > 1) {
		println("Call 'haxe " + buildFile + "'");
	}
	//buildScript = strGlue(concat(hxparams3, ["-v"]), "\n");
	buildScript = strGlue(concat(hxparams3, ["-D skip_haxe_runtime"]), "\n");

	setFileContent(buildFile, buildScript);
	proc_out : (?) -> void = if (cfg.verbose > 0) println else nop1;
	if (hxparams3 == []) "" else {
		ret_code = execSystemProcess("haxe", [buildFile], ".", if (cfg.verbose > 0) println else nop1, println);
		if (ret_code != 0) {
			println("Haxe failed.");
			deleteFile(cfg.outputfile);
			""
		} else {
			if (cfg.verbose > 1) {
				println("Haxe succeeded.");
			}
			runtime_code = getFileContent(jsfile);
			if (!cfg.code) {
				delfile(jsfile);
				delfile(hx);
				delfile(buildFile);
				deleteFiles(^tmpfiles);
			}
			runtime_code
		}
	}
}
