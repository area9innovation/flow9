import tools/flow9/backends/js/js_defines;
import tools/flow9/bexp/pretty;
import fs/filesystem;

export {
	// Mangle a single name. (It is required for calling Haxe DCE ?)
	mangleNativeName(name : string, add_class : (string) -> void) -> string;

	// Makes a default JS config for a given file.
	makeJsConfig(flowfile : string) -> JsConfig;

	// Output the JS runtime type corresponding with an argument.
	bype2JsType(type : BType, struct_names : Set<string>) -> string;
}

mangleNativeName(name : string, add_class : (string) -> void) {
	parts = strSplit(name, ".");
	// Some names, like Native and RenderSupport need a gentle extra renaming to avoid colliding
	// with other implementations of these natives
	class = parts[0];
	add_class(class);
	renamed = class + "." + parts[1];
	if (renamed == "Native.length") "Native.length__" else renamed;
}

makeJsConfig(flowfile : string) -> JsConfig {
	JsConfig(flowfile, 
		changeFileExt(flowfile, ".js"),
		[], //includes : [string],
		0, //jsmode : int, 0 - standard JS, 1 - standard ES6, 2 - nodejs, 3 - NW.js, 4 - TypeScript
		false, // webmodule : bool, Node.js server functionality
		makeSet(), // jslibrary : Set<string>, Set of names we should export in the global JS namespace
		"", // jslibraryObject : string, Name of an object to keep all names we export in the library
		"", // modules : string, Generate JS modules
		false, // comments : bool, Inject comments into generated code
		false, // code : bool, Do not remove generated code_*.js files (debug)
		false, // beautify : bool, Call js-beautify before exit
		false, // sourcemap : bool, Generate js source map before exit
		false, // compress : bool,
		"", // fontconfig : string,
		false, //debug : bool,
		0,  // verbose : int,
		false, //readable : bool,
		tsProcessing_dummy, //tsProcess : TypeScriptProcessing,
		true, // callMain : bool,
		false, // keepDebugNewlines : bool,
		"", // externLib : string, The path to the external JS file with natives. Is inlined into the final assembled JS code.
		makeSet(), // externNatives : Set<string>, Names from the external natives lib.
	);
} 

bype2JsType(type : BType, struct_names : Set<string>) -> string {
	switch (type) {
		BTypePar(id): {
			"Runtime.TypeUnknown";
		}
		BTypeName(id, typars): {
			if (id == "void") {
				"Runtime.TypeVoid";
			} else if (id == "bool") {
				"Runtime.TypeBool";
			} else if (id == "int") {
				"Runtime.TypeInt";
			} else if (id == "double") {
				"Runtime.TypeDouble";
			} else if (id == "string") {
				"Runtime.TypeString";
			} else if (id == "flow") {
				"Runtime.TypeUnknown";
			} else if (id == "native") {
				"Runtime.TypeUnknown";
			} else if (id == "array") {
				if (length(typars) != 1) {
					fail("array typars length != 1: " + prettyBType(type));
				}
				"Runtime.TypeArray(" + bype2JsType(typars[0], struct_names) + ")";
			} else if (id == "ref") {
				if (length(typars) != 1) {
					fail("ref typars length != 1: " + prettyBType(type));
				}
				"Runtime.TypeRef(" + bype2JsType(typars[0], struct_names) + ")";
			} else if (containsSet(struct_names, id)) {
				"Runtime.TypeStruct('" + id + "')";
			} else {
				// Case of a union
				"Runtime.TypeUnknown";
			}
		}
		BTypeFunction(args, ret_type): {
			"Runtime.TypeUnknown";
		}
	}
}
