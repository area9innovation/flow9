import tools/flow9/backends/link;
import tools/flow9/backends/back_eval;
import tools/flow9/backends/pretty;
import tools/flow9/backends/utils;
import tools/flow9/backends/js/js_natives;
import tools/flow9/backends/js/js_runtime;

export {
	// Compiles the given flow path to JS as a single string
	bmodule2js(cache : FlowCache, flowpath : string, shorten_ids : bool) -> string;
}

bmodule2js(cache : FlowCache, flowpath : string, shorten_ids : bool) -> string {
	backend = jsBackend();
	spec = makeBackendSpec(backend, "t_", "", "__",
		// We consider a native is a generator for a named identifier (non arithmetic, comparison, etc.)
		filter(getTreeKeys(backend.generators), \gen_name -> isLetter(getCharAt(gen_name, 0)))
	);
	modules = list2array(programBModules(cache, flowpath, makeList(), makeSet()).first);
	bexp_program = renameIdsBExpProgram(bmodules2BExpProgram(modules, spec), spec, shorten_ids);
	prog = bexpProgram2BProgram(bexp_program.first);
	shortenIds = bexp_program.second;
	bprogram2js(prog, flowpath, backend, shortenIds);
}

bprogram2js(b : BProgram, flowpath : string, backend : Backend<bool>, shorten_ids : RenameIds) -> string {
	cfg = JsConfig(makeJsConfig(flowpath) with 
		// The debugging configuration: while backend is under development.
		verbose = 2,
		jsmode = NODEJS_MODE,
		code = true
	);

	native_classes = ref makeSet();
	native_names = collectBProgramNativeNames(b, \class_ -> native_classes := insertSet(^native_classes, class_));

	runtime = linkRuntime(cfg, ^native_classes, "main");
	structs = getTreeValues(b.structs);
	original_ids = reverseRenameIds(shorten_ids);

	struct_names = buildSet(map(structs, \s -> s.id));
	struct_funcs = supergluei(structs, \i, s : DStruct -> dstruct2js(i, backend, s, original_ids, struct_names), "\n");
	body = superglue(b.declarations, \d : BDeclaration -> bdeclaration2js(backend, d), "\n");

	// The backend keeps track of what requirements are used by the various
	// constructs used
	getBackendRequirements(backend)
	+ "// RUNTIME\n" 
	+ runtime + "\n"
	+ "// STRUCTS\n"
	+ struct_funcs + "\n"
	+ "// BODY\n"
	+ body + "\n"
	+ lookupTreeDef(shorten_ids.varRenamings, "main", "main") + "()";
}

collectBProgramNativeNames(b : BProgram, add_class : (string) -> void) -> Tree<string, string> {
	fold(b.declarations, makeTree(), \acc, decl ->
		switch (decl) {
			BExpNative(id, __,__, nativeName): {
				setTree(acc, nativeName, mangleNativeName(nativeName, add_class));
			}
			default: acc;
		}
	);
}

dstruct2js(i : int, backend : Backend<bool>, s : DStruct, original_ids : RenameIds, struct_names : Set<string>) -> string {
	blueprint("
		function %id%(%args%) {
			this._id = '%id%';
			%body%
		}
		Runtime.initStruct('%id%', '%name%', [%arg_names%], [%arg_types%]);
		", [
		"id", s.id,
		"name", lookupTreeDef(original_ids.typeRenamings, s.id, s.id),
		"arg_names", superglue(s.structArgs, 
			\arg -> "'" + /*lookupTreeDef(original_ids.fieldRenamings, arg.id, arg.id)*/ arg.id + "'", 
			", "
		),
		"arg_types", superglue(s.structArgs, 
			\arg -> bype2JsType(renameBType(dtype2btype(arg.type), original_ids.typeRenamings), struct_names), 
			", "
		),
		"args", superglue(s.structArgs, \arg -> arg.id, ", "),
		"body", superglue(s.structArgs, \arg -> "this." + arg.id + " = " + arg.id + ";", "\n")
	]);
}

bdeclaration2js(backend : Backend<bool>, b : BDeclaration) -> string {
	switch (b) {
		BStatFunction(name, typars, args, body, tailcall, __): {
			if (tailcall) {
				blueprint("
					function %name%(%args%) {
						T:  while(true) {
							%body%
						}
					}", [
					"name", name,
					"args", strGlue(args, ", "),
					"body", bstatement2js(backend, body, true)
				]);
			} else {
				blueprint("
					function %name%(%args%) {
						%body%
					}", [
					"name", name,
					"args", strGlue(args, ", "),
					"body", bstatement2js(backend, body, bstatementType(body) != bvoidType)
				]);
			}
		}
		BGlobalVar(name, body, __): "var " + name + " = " + bexp2js(backend, body) + ";";
		BExpNative(name, isIo, type, nativeName): {
			generated = produceBackendNative(backend, nativeName);
			if (generated == "") {
				// If the native is missing in runtime provided, a JS runtime error will occur.
				"var " + name + " = " + nativeName + ";"
			} else {
				"var " + name + " = " + generated + ";"
			}
		}
	}
}

bstatement2js(backend : Backend<bool>, b : BStatement, withReturn : bool) -> string {
	switch (b) {
		BIfStatement(cond, then, else_): {
			if (!withReturn && else_ == BReturnVoid()) {
				blueprint("
					if (%cond%) {
						%then%
					}", [
					"cond", bexp2js(backend, cond),
					"then", bstatement2js(backend, then, withReturn),
				])
			} else {
				blueprint("
					if (%cond%) {
						%then%
					} else {
						%else%
					}", [
					"cond", bexp2js(backend, cond),
					"then", bstatement2js(backend, then, withReturn),
					"else", bstatement2js(backend, else_, withReturn),
				])
			}
		}
		BLetStatement(name, value, body): {
			blueprint("
				var %name% = %value%;
				%body%", [
					"name", name,
					"value", bexp2js(backend, value),
					"body", bstatement2js(backend, body, withReturn),
			])
		}
		BReturnVoid(): if (withReturn) "return;" else "";
		BReturn(val): {
			(if (withReturn) "return " else "") + bexp2js(backend, val) + ";";
		}
		BTailCall(fn, args, values, type): {
			/*
				var $a_=((start+1)|0);
				start=$a_;
				continue T*/
			if (length(args) == 1) {
				blueprint("
					%arg% = %value%;
					continue T;
				", ["arg", args[0],
					"value", bexp2js(backend, values[0])])
			} else {
				// Define tmps
				supergluei(values, \i, value -> {
					"var $a" + i2s(i) + "=" + bexp2js(backend, value)
				}, ";")
				+ ";" + supergluei(args, \i, arg -> {
					arg + "=" + "$a" + i2s(i);
				}, ";")
				+ ";continue T";
			}
		}
		BSequenceStatement(statements): {
			supergluei(statements, \i, stat -> {
				bstatement2js(backend, stat, withReturn && i == length(statements) - 1 && bstatementType(stat) != bvoidType)
			}, "\n");
		}
		BSwitchStatement(val, cases, type): {
			def_case = filter(cases, \c -> c.id == "default");
			js_cases = concat(
				map(
					filter(cases, \c -> c.id != "default"), \c -> 
					blueprint("
						if (__case_val._id == '%id%') {
							%body%
						} else ", 
						["id", c.id, "body", bstatement2js(backend, c.body, withReturn)]
					)
				),
				[if (def_case == []) {
					blueprint("
						{
							throw 'Unexpected value is switch: ' + __case_val.toString();
						}", []
					);
				} else {
					blueprint("
						{
							%body%
						}", 
						["body", bstatement2js(backend, def_case[0].body, withReturn)]
					)
				}]
			);
			blueprint("
				let __case_val = %val%;
				%cases%
				", [
					"val", bexp2js(backend, val),
					"cases", concatStrings(js_cases),
			]);
		}
		BSetMutableStatement(left, field, value): {
			bexp2js(backend, left) + "." + field + "=" + bexp2js(backend, value) + ";";
		}
	}
}

bexp2js(backend : Backend<bool>, b : BExp) -> string {
	switch (b) {
		BValue(): bvalue2js(b);
		BVar(name, __): name;
		BLet(name, value, body, type): {
			blueprint("
				function() {
					var %name% = %value%;
					%body%
				}()", [
					"name", name,
					"value", bexp2js(backend, value),
					"body", bstatement2js(backend, bexp2BReturn(body), type != bvoidType),
			])
		}
		BLambda(args, body, __): {
			"function(" 
			+ strGlue(args, ", ") + ") {" 
			+ bstatement2js(backend, bexp2BReturn(body), getBType(body) != bvoidType)
			+ "}"
		};
		BCall(fn, args, restype): {
			produceBackendCall(backend, b, bexp2js);
		}
		BIf(cond, then, else_, __): "(" + bexp2js(backend, cond) + " ? " + bexp2js(backend, then) + " : " + bexp2js(backend, else_) + ")";
		BSequence(statements, __): {
			if (statements == []) {
				"null"
			} else {
				"(" + superglue(statements, \s -> bexp2js(backend, s), ", ") + ")";
			}
		}
		BSwitch(val, __, cases, __, type): {
			"function() {" 
			+ bstatement2js(backend, bexp2BReturn(b), type != bvoidType)
			+ "}()"
		}
		BConstruct(struct, args, type): {
			"new " + struct + "(" + superglue(args, \arg -> bexp2js(backend, arg), ", ") + ")";
		}
		BField(value, field, type): {
			bexp2js(backend, value) + "." + field;
		}
		BSetMutable(left, field, value, type): {
			bexp2js(backend, left) + "." + field + "=" + bexp2js(backend, value);
		}
		BArray(args, type): {
			"[" + superglue(args, \arg -> bexp2js(backend, arg), ", ") + "]";
		}
		BCast(value, from, to) : bexp2js(backend, value);
	}
}

bvalue2js(b : BValue) -> string {
	switch (b) {
		BVoid(): "null";
		BBool(v): b2s(v);
		BInt(v):  i2s(v);
		BDouble(value): if (dfloor(value) == value) d2s(value) else double2string(value);
		BString(value): toString(value);
	}
}
