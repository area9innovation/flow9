import tools/flow9/backends/backend;
import text/blueprint;

export {
	kokaBackend() -> Backend;
	kokaBackendSpec() -> BackendSpec;
}

kokaBackend() -> Backend {
	makeBackend("koka", 
	[
		// Keywords
		"infix", "infixr", "infixl", "prefix", "postfix"
		, "type", "alias"
		, "struct", "enum", "con"
		, "val", "fun", "fn", "extern", "var"
		, "control", "rcontrol", "except"
		, "if", "then", "else", "elif"
		, "return", "match", "with", "in"
		, "forall", "exists", "some"
		, "private", "public", "abstract"
		, "module", "import", "as"
		, "pub"
		, "handler", "handle"
		, "effect", "receffect"
		, "named"
		, "mask"
		, "override"
		, "unsafe"
		, "ambient", "context"
		, "inject"
		, "use", "using"
		, "function"
		, "instance"
		, "interface"
		, "unsafe"
	], 
	// generators
	[
		BackGen("||", bboolType, BackBinOp(" || ", 10, BackArg(0), BackArg(1))),
		BackGen("&&", bboolType, BackBinOp(" && ", 20, BackArg(0), BackArg(1))),
		BackGen("==", bvoidType, BackBinOp(" == ", 30, BackArg(0), BackArg(1))),
		BackGen("!=", bvoidType, BackBinOp(" != ", 30, BackArg(0), BackArg(1))),

		BackGen("<=", bvoidType, BackBinOp(" <= ", 35, BackArg(0), BackArg(1))),
		BackGen("<", bvoidType, BackBinOp(" < ", 35, BackArg(0), BackArg(1))),
		BackGen(">=", bvoidType, BackBinOp(" >= ", 35, BackArg(0), BackArg(1))),
		BackGen(">", bvoidType, BackBinOp(" > ", 35, BackArg(0), BackArg(1))),

		BackGen("+", bintType, BackBinOp(" + ", 40, BackArg(0), BackArg(1))),
		BackGen("+", bdoubleType, BackBinOp(" + ", 40, BackArg(0), BackArg(1))),
		BackGen("+", bstringType, BackBinOp(" ++ ", 40, BackArg(0), BackArg(1))),

		BackGen("-", bintType, BackBinOp(" - ", 40, BackArg(0), BackArg(1))),
		BackGen("-", bdoubleType, BackBinOp(" - ", 40, BackArg(0), BackArg(1))),

		BackGen("*", bintType, BackBinOp(" * ", 50, BackArg(0), BackArg(1))),
		BackGen("*", bdoubleType, BackBinOp(" * ", 50, BackArg(0), BackArg(1))),

		BackGen("/", bintType, BackBinOp(" / ", 50, BackArg(0), BackArg(1))),
		BackGen("/", bdoubleType, BackBinOp(" / ", 50, BackArg(0), BackArg(1))),

		BackGen("%", bintType, BackBinOp(" % ", 50, BackArg(0), BackArg(1))),
		BackGen("%", bdoubleType, BackBinOp(" % ", 50, BackArg(0), BackArg(1))),

		BackGen("__negate", BTypeFunction([bintType], bintType), BackCall("negate", [BackArg(0)])),
		BackGen("__negate", BTypeFunction([bdoubleType], bdoubleType), BackPreOp(" -", 60, BackArg(0))),
		BackGen("__not", bvoidType, BackPreOp(" !", 60, BackArg(0))),

		BackGen("__ref", bvoidType, BackCall("ref", [BackArg(0)])),
		BackGen("__deref", bvoidType, BackPreOp(" !", 60, BackArg(0))),

		BackGen("flow_exp", bvoidType, 
			BackRequire(
				BackText("import std/num/double"),
				BackCall("exp", [BackArg(0)])
			)
		),
		BackGen("flow_log", bvoidType, 
			BackRequire(
				BackText("import std/num/double"),
				BackCall("log", [BackArg(0)])
			)
		),
	], false);
}

kokaBackendSpec() -> BackendSpec {
	makeBackendSpec(kokaBackend(),
		"", "flow_", "",
		[
			// Natives
			"Native.fold",
			"Native.println",
			"Native.quit",
			"Native.isSameStructType",
			"Native.exp",
			"Native.log",
			"Native.strlen",
			"Native.substring",
		]
	)
}
