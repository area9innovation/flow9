import tools/flow9/backends/backend;
import text/blueprint;

export {
	flixBackend(cookie : ?) -> Backend<?>;
	flixBackendSpec() -> BackendSpec;
}

flixBackend(cookie : ?) -> Backend<?> {
	makeBackend(
		"flix", 
		// Keywords
		flixKeywords(),
		// generators
		flixGenerators(),
		cookie
	);
}

flixKeywords() {
	concat([
			"println"
		],
		strSplit(
			"case|def|else|enum|if|lat|let|match|rel|select|spawn|with|namespace|pub|not|opaque|type|alias|use|import|get|set|new|as|ref|deref|project|into|from|where|query|solve|instance", 
			"|"
		)
	);
}
flixBackendSpec() -> BackendSpec {
	BackendSpec(
		buildSet(flixKeywords()),
		"Flow", // For renaming types
		"", // For renaming top-level ids
		"", // For renaming top-level ids
		buildSet(["Native.println", "Native.quit"]), // A set of all supported natives
		println, // onError
	);
}

flixGenerators() -> [BackGen] {
	[
		BackGen("||", bboolType, BackBinOp(" or ", 10, BackArg(0), BackArg(1))),
		BackGen("&&", bboolType, BackBinOp(" and ", 20, BackArg(0), BackArg(1))),
		BackGen("==", bvoidType, BackBinOp(" == ", 30, BackArg(0), BackArg(1))),
		BackGen("!=", bvoidType, BackBinOp(" != ", 30, BackArg(0), BackArg(1))),

		BackGen("<=", bvoidType, BackBinOp(" <= ", 35, BackArg(0), BackArg(1))),
		BackGen("<", bvoidType, BackBinOp(" < ", 35, BackArg(0), BackArg(1))),
		BackGen(">=", bvoidType, BackBinOp(" >= ", 35, BackArg(0), BackArg(1))),
		BackGen(">", bvoidType, BackBinOp(" > ", 35, BackArg(0), BackArg(1))),

		BackGen("+", bintType, BackBinOp(" + ", 40, BackArg(0), BackArg(1))),
		BackGen("+", bdoubleType, BackBinOp(" + ", 40, BackArg(0), BackArg(1))),
//		BackGen("+", bstringType, BackCall("concatFlowStrings", [BackArg(0), BackArg(1)])),

		BackGen("-", bintType, BackBinOp(" - ", 40, BackArg(0), BackArg(1))),
		BackGen("-", bdoubleType, BackBinOp(" - ", 40, BackArg(0), BackArg(1))),

		BackGen("*", bintType, BackBinOp(" * ", 50, BackArg(0), BackArg(1))),
		BackGen("*", bdoubleType, BackBinOp(" * ", 50, BackArg(0), BackArg(1))),

		BackGen("/", bintType, BackBinOp(" / ", 50, BackArg(0), BackArg(1))),
		BackGen("/", bdoubleType, BackBinOp(" / ", 50, BackArg(0), BackArg(1))),

		BackGen("%", bintType, BackBinOp(" mod ", 50, BackArg(0), BackArg(1))),
		BackGen("%", bdoubleType, BackBinOp(" mod ", 50, BackArg(0), BackArg(1))),

		BackGen("__negate", BTypeFunction([bintType], bintType), BackPreOp(" -", 60, BackArg(0))),
		BackGen("__negate", BTypeFunction([bdoubleType], bdoubleType), BackPreOp(" -", 60, BackArg(0))),
		BackGen("__not", bvoidType, BackPreOp("not ", 60, BackArg(0))),

		BackGen("__ref", bvoidType, BackCall("ref ", [BackArg(0)])),
		BackGen("__deref", bvoidType, BackCall("deref ", [BackArg(0)])),
		BackGen(":=", bvoidType, BackBinOp(" := ", 70, BackArg(0), BackArg(1))),

//		BackGen("__index", bvoidType, BackCall("getFlowArrayItem", [BackArg(0), BackArg(1)])),

		BackGen("println2", bvoidType, BackCall("println", [BackArg(0)])),
		BackGen("quit", bvoidType, BackArg(0)),
	]
}
