import tools/flow9/backends/bprogram;
import tools/flow9/dexp/types;

export {
	// Resolve our type hierarchy into a simpler one
	// where we have no struct nor union reuse.
	resolveBTypeHierarchy(
		structs : Tree<string, DStruct>,
		unions : Tree<string, DUnion>,
	) -> BTypeHierarchy;

	BTypeHierarchy(
		unions : [DUnion],
		structs : [DStruct],
		unionedStructs : Tree<string, DStruct>,
		unionTypes : Tree<string, [DTypeName]>,
	);

	// find a match between polyType (BTypePar) and real type (BTypeName)
	// example:
	// we have : 
	//	BTypeFunction(												BTypeFunction(
	//		[															[
	//			BTypePar("?"),												BTypeName("int", []),
	//			BTypeFunction([BTypePar("?")], BTypePar("??")),				BTypeFunction([BTypeName("int", [])], BTypeName("int", [])),
	//			BTypeFunction([BTypePar("??")], BTypePar("???"))			BTypeFunction([BTypeName("int", [])], BTypeName("string", []))
	//		],															],
	//		BTypePar("???")												BTypeName("string", [])
	//	)															)
	// the result is a Tree of values : [?=int, ??=int, ???=string]
	extractPolyTypes(acc : Tree<BTypePar, BType>, type : BType, polyType : BType) -> Tree<BTypePar, BType>;
}

resolveBTypeHierarchy(
	bstructs : Tree<string, DStruct>,
	bunions : Tree<string, DUnion>,
) -> BTypeHierarchy {
	// Build a map from a type name to the super types it might have
	supers : Tree<string, [string]> = makeDSupers(bunions);

	// Build a map from a type name to the subtypes it might have
	subs : Tree<string, [DTypeName]> = makeDSubtypeNames(bunions);

	structs = getTreeValues(bstructs);
	bareStructs = filter(structs, \s -> {
		!containsKeyTree(supers, s.id)
	});

	unionedStructs = fold(structs, makeTree(), \acc, st -> {
		if (containsKeyTree(supers, st.id)) {
			setTree(acc, st.id, st)
		} else acc;
	});

	// TODO: Find only top unions and resolve them
	unions = getTreeValues(bunions);

	BTypeHierarchy(unions, bareStructs, unionedStructs, subs)
}

extractPolyTypes(acc : Tree<BTypePar, BType>, type : BType, polyType : BType) -> Tree<BTypePar, BType> {
	switch (polyType) {
		BTypePar(id): eitherMap(extractBTypeName(type), \t -> setTree(acc, polyType, t), acc);
		BTypeName(id, typars): {
			// this is polyvar
			if (isBTypeNamePolyvar(polyType)) {
				eitherMap(extractBTypeName(type), \t -> setTree(acc, BTypePar(id), t), acc);
			} else {
				foldi(typars, acc, \i, acc2, t -> {
					eitherMap(
						extractBTypeNameParam(type, i),
						\tt -> extractPolyTypes(acc2, tt, t),
						acc2
					)
				});
			}
		}
		BTypeFunction(args, returnType): {
			eitherMap(
				extractBTypeFunctionReturn(type),
				\t -> foldi(args, extractPolyTypes(acc, t, returnType), \i, acc2, arg -> 
					eitherMap(
						extractBTypeFunctionArg(type, i),
						\argType -> extractPolyTypes(acc2, argType, arg),
						acc2
					)
				),
				acc
			)
		}

	}
}

isBTypeNamePolyvar(type : BType) -> bool {
	switch (type) {
		BTypePar(id): false;
		BTypeName(id, typars): startsWith(id, "?") && typars == [];
		BTypeFunction(args, returnType): false;
	}
}

extractBTypeName(type : BType) -> Maybe<BType> {
	switch (type) {
		BTypePar(id): Some(type);
		BTypeName(id, typars): Some(type);
		BTypeFunction(args, returnType): None();
	}
}
extractBTypeFunctionReturn(type : BType) -> Maybe<BType> {
	switch (type) {
		BTypePar(id): None();
		BTypeName(id, typars): None();
		BTypeFunction(args, returnType): Some(returnType);
	}
}
extractBTypeFunctionArg(type : BType, i : int) -> Maybe<BType> {
	switch (type) {
		BTypePar(id): None();
		BTypeName(id, typars): None();
		BTypeFunction(args, returnType): if (existsIndex(args, i)) Some(args[i]) else None();
	}
}
extractBTypeNameParam(type : BType, i : int) -> Maybe<BType> {
	switch (type) {
		BTypePar(id): None();
		BTypeName(id, typars): if (existsIndex(typars, i)) Some(typars[i]) else None();
		BTypeFunction(args, returnType): if (existsIndex(args, i)) Some(args[i]) else None();
	}
}
