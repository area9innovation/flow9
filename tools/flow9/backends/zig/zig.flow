import tools/flow9/backends/link;
import tools/flow9/backends/back_eval;
import tools/flow9/backends/pretty;
import tools/flow9/backends/zig/zig_natives;

export {
	// Compiles the given flow path to Zig as a single string
	bmodule2zig(cache : FlowCache, flowpath : string) -> string;
}

bmodule2zig(cache : FlowCache, flowpath : string) -> string {
	bprogram2zig(linkBProgram(cache, flowpath), flowpath);
}

bprogram2zig(b : BProgram, flowpath : string) -> string {
	backend = zigBackend();
	structs = superglue(getTreeValues(b.structs), \s : DStruct -> dstruct2zig(backend, s), "\n");
	body = superglue(b.declarations, \d : BDeclaration -> bdeclaration2zig(backend, d), "\n");

	// The backend keeps track of what requirements are used by the various
	// constructs used
	getBackendRequirements(backend)
	+ "// RUNTIME\n" 
	+ runtime + "\n"
	+ "// STRUCTS\n"
	+ structs + "\n"
	+ "// BODY\n"
	+ body
	+ "\nmain()";
}

dstruct2zig(backend : Backend, s : DStruct) -> string {

}
