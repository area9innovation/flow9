import tools/flow9/bexp/type;
import ds/set;
import ds/arrayutils;
import sys/concurrent;

export {
	addCapturedVarsToLambdas(exp : BExp, fnIds : Set<string>) -> BExp;

	isBTypeFunction(type : BType) -> bool;
	extractBVarId(exp : BExp) -> string;
	extractSwitchVar(exp : BExp, defType : BType) -> BVar;

	getLambdaId(fn : BExp, functionIds : Set<string>) -> Pair<string, BType>;
	isBCallLambda(exp : BCall) -> bool;
	markCapturedArgs(args : [BExp]) -> [Triple<BExp, bool, bool>];
}

addCapturedVarsToLambdas(exp : BExp, fnIds : Set<string>) -> BExp {
	addCapturedVarsToBLambdas(exp, fnIds, makeTree(), "", makeSet()).first;
}

isBTypeFunction(type : BType) -> bool {
	switch (type) {
		BTypePar(__) : false;
		BTypeName(__, __) : false;
		BTypeFunction(__, __) : true;
	}
}

extractBVarId(exp : BExp) -> string {
	switch (exp) {
		BVar(id, __) : id;
		BDupValue(value) : extractBVarId(value);
		BDropValue(value) : extractBVarId(value);
		BReuseValue(value) : extractBVarId(value);
		BCast(value, __, __) : extractBVarId(value);
		default : "";
	}
}

extractSwitchVar(exp : BExp, defType : BType) -> BVar {
	switch (exp) {
		BVar(id, t) : exp;
		BReuseValue(value) : extractSwitchVar(value, defType);
		default: BVar("", defType);
	}
}

// TODO: alias ?
// case 1:
// onError = println;
// onError("error");
// case 2:
// l = \-> {};
// fn = l;
// fn();
// case 3:
// (if (1 > 0) fn1 else fn2)();
// case 4
// fn(i : int) -> {}
// fn2() -> { fn = \k : int -> {} fn(5);} //call(lambda)
getLambdaId(fn : BExp, functionIds : Set<string>) -> Pair<string, BType> {
	switch (fn) {
		BVar(id, type) : if (!containsSet(functionIds, id)) Pair(id, type) else Pair("", bvoidType);
		BDupValue(value) : getLambdaId(value, functionIds);
		BDropValue(value) : getLambdaId(value, functionIds);
		BReuseValue(value) : getLambdaId(value, functionIds);
		BCast(value, __, __) : getLambdaId(value, functionIds);
		default : Pair("", bvoidType);
	}
}

 // TODO : native fn ?
isBLambda(exp : BExp, functionIds : Set<string>) -> bool {
	switch (exp) {
		BLambda(__, __, __, __) : true;
		default : isSameStructType(getBType(exp), BTypeFunction([], bvoidType));
	}
}

capturedVarPrefix = "_lambda_";

makeCapturedLambdaVar(v : BVar) -> BVar {
	BVar(capturedVarPrefix + v.id, v.type);
}

getCapturedLambdaVarId(arg : string) -> Maybe<Pair<string, string>> {
	if (startsWith(arg, capturedVarPrefix)) Some(Pair(ltrim2(arg, capturedVarPrefix), arg)) else None();
}

getCapturedLambdaVars(args : [BVar]) -> [BVar] {
	concatA(filtermap(args, \arg -> 
		maybeMap(getCapturedLambdaVarId(arg.id), unpairC(\id, alias -> [BVar(alias, arg.type), BVar(id, arg.type)]))
	));
}

markCapturedArgs(args : [BExp]) -> [Triple<BExp, bool, bool>] {
	ids = fold2(args, makeSet(), makeSet(), \acc1, acc2, arg -> eitherFn(
		getCapturedLambdaVarId(extractBVarId(arg)),
		unpairC(\id1, id2 -> Pair(if (id1 != "") insertSet(acc1, id1) else acc1, insertSet(acc2, id2))),
		\-> Pair(acc1, acc2)
	));
	map(args, \arg -> {
		id = extractBVarId(arg);
		Triple(arg, containsSet(ids.first, id), containsSet(ids.second, id));
	});
}

// fake argument, to mark BCall as BCall(lambda)
addLambdaFlag(exps: [BExp]) -> [BExp] {
	arrayPush(exps, makeCapturedLambdaVar(BVar("", bvoidType)));
}

isBCallLambda(exp : BCall) -> bool {
	lambdaFlag = addLambdaFlag([])[0];
	exists(exp.args, \arg -> arg == lambdaFlag);
}

getBVarLambdaId(exp : BExp, createdVarIds : Set<string>) -> string {
	switch (exp) {
		BVar(id, type): if (isBTypeFunction(type) && containsSet(createdVarIds, id)) id else "";
		BCast(value, from, to): getBVarLambdaId(value, createdVarIds);
		BDupValue(value) : getBVarLambdaId(value, createdVarIds);
		BDropValue(value) : getBVarLambdaId(value, createdVarIds);
		BReuseValue(value): getBVarLambdaId(value, createdVarIds);
		default: "";
	}
}

addCapturedVarsToBLambdas(exp : BExp, fnIds : Set<string>, usedVars : Tree<string, [BVar]>, lambdaId : string, createdVarIds : Set<string>) -> Triple<BExp, Tree<string, [BVar]>, Set<string>> {
	switch (exp) {
		BValue() : Triple(exp, usedVars, createdVarIds);
		BVar(id, type): if (isBTypeFunction(type) || containsSet(fnIds, id)) {
			Triple(exp, usedVars, createdVarIds)
		} else {
			Triple(exp, treePushToArrayValue(usedVars, lambdaId, exp), insertSet(createdVarIds, id));
		}
		BArray(args, type): {
			newArgs = map(args, \arg -> addCapturedVarsToBLambdas(arg, fnIds, usedVars, lambdaId, createdVarIds));
			Triple(
				BArray(map(newArgs, firstOfTriple), type),
				fold(newArgs, makeTree(), \acc, p -> mergeTree(acc, p.second)),
				fold(newArgs, makeSet(), \acc, p -> mergeSets(acc, p.third))
			);
		}
		BLet(id, val, body, type): {
			newLambdaId = if (isBLambda(val, fnIds)) id else lambdaId;
			newVal = addCapturedVarsToBLambdas(val, fnIds, usedVars, newLambdaId, createdVarIds);
			newBody = addCapturedVarsToBLambdas(body, fnIds, treePushToArrayValue(newVal.second, newLambdaId, BVar(id, type)), newLambdaId, insertSet(createdVarIds, id));
			Triple(BLet(id, newVal.first, newBody.first, type), newBody.second, newBody.third);
		}
		BLambda(args, body, type, cvars): {
			// reset used vars to arrange drop() correctly
			newBody = addCapturedVarsToBLambdas(body, fnIds, makeTree(), lambdaId, createdVarIds);
			argIds = buildSet(args);
			capturedVars = fold2(
				map(concatA(getTreeValues(newBody.second)), \v -> eitherMap(getCapturedLambdaVarId(v.id), \r -> BVar(r.first, v.type), v)),
				[], [],
				\acc1, acc2, usedVar ->  if (!containsSet(createdVarIds, usedVar.id) || containsSet(argIds, usedVar.id) ) {
					Pair(acc1, acc2) // local var
				} else {
					Pair(arrayPush(acc1, usedVar.id), arrayPush(acc2, makeCapturedLambdaVar(usedVar)));
				}
			);
			Triple(
				BLambda(args, newBody.first, type, capturedVars.first),
				setTree(usedVars, lambdaId, concat(lookupTreeDef(usedVars, lambdaId, []), capturedVars.second)),
				mergeSets(newBody.third, createdVarIds)
			);
		}
		BCall(fn, args, type): {
			// TODO: overloading ?
			// remove functions for which there is a lambda of the same name in the scope.
			execLambdaId = getLambdaId(fn, foldTree(usedVars, fnIds, \lId, __, visibleFnIds -> removeSet(visibleFnIds, lId))).first;
			isLambda = execLambdaId == "";
			capturedLambdaVars = if (isLambda) [] else getCapturedLambdaVars(lookupTreeDef(usedVars, execLambdaId, []));
			newFn = addCapturedVarsToBLambdas(fn, fnIds, usedVars, lambdaId, createdVarIds);
			newArgs = map(args, \arg -> {
				newLambdaId = if (isBLambda(arg, fnIds)) makeAnonymousLambdaId() else lambdaId;
				lambdaArgId = getBVarLambdaId(arg, createdVarIds);
				capturedLambdaArgVars = if (lambdaArgId == "") [] else getCapturedLambdaVars(lookupTreeDef(usedVars, lambdaArgId, []));
				newArg = addCapturedVarsToBLambdas(arg, fnIds, newFn.second, newLambdaId, newFn.third);
				Quadruple(newArg.first, newArg.second, newArg.third, capturedLambdaArgVars);
			});
			allCapturedVars = concat(capturedLambdaVars, mapConcat(newArgs, fourthOfQuadruple));
			allArgs = if (allCapturedVars == []) {
				map(newArgs, firstOfQuadruple);
			} else {
				concat(map(newArgs, firstOfQuadruple), allCapturedVars);
			}
			Triple(
				BCall(newFn.first, if (isLambda) allArgs else addLambdaFlag(allArgs), type),
				fold(newArgs, newFn.second, \acc, p -> mergeTree(acc, p.second)),
				fold(newArgs, newFn.third, \acc, p -> mergeSets(acc, p.third))
			);
		}
		BIf(cond, then, else_, type): {
			newCond = addCapturedVarsToBLambdas(cond, fnIds, usedVars, lambdaId, createdVarIds);
			newThen = addCapturedVarsToBLambdas(then, fnIds, newCond.second, lambdaId, newCond.third);
			newElse = addCapturedVarsToBLambdas(else_, fnIds, newCond.second, lambdaId, newCond.third);
			Triple(
				BIf(newCond.first, newThen.first, newElse.first, type),
				mergeTree(newThen.second, newElse.second),
				mergeSets(newThen.third, newElse.third)
			);
		}
		BSequence(exps, type): {
			newExps = fold(exps, Triple([], usedVars, createdVarIds), \t, e -> untriple(t, \newExps, newUsedVars, newCreatedVarIds -> {
				newExp = addCapturedVarsToBLambdas(e, fnIds, newUsedVars, lambdaId, newCreatedVarIds);
				Triple(arrayPush(newExps, newExp), newExp.second, newExp.third)
			})).first;
			Triple(
				BSequence(map(newExps, firstOfTriple), type),
				fold(newExps, makeTree(), \acc, p -> mergeTree(acc, p.second)),
				fold(newExps, makeSet(), \acc, p -> mergeSets(acc, p.third))
			);
		}
		BSwitch(value, switchType, cases, defaultCase, type): {
			newValue = addCapturedVarsToBLambdas(value, fnIds, usedVars, lambdaId, createdVarIds);
			newCases = map(cases, \c -> untriple(
				addCapturedVarsToBLambdas(c.body, fnIds, newValue.second, lambdaId, newValue.third),
				\newBody, uv, cv -> Triple(BCase(c.id, newBody), uv, cv)
			));
			newDefCase = maybeMap(defaultCase, \c -> addCapturedVarsToBLambdas(c, fnIds, newValue.second, lambdaId, newValue.third));

			Triple(
				BSwitch(
					extractSwitchVar(newValue.first, switchType),
					switchType,
					map(newCases, firstOfTriple),
					maybeMap(newDefCase, firstOfTriple),
					type
				),
				fold(newCases, newDefCase ?? mergeTree(newDefCase.second, newValue.second) : newValue.second, \acc, p -> mergeTree(acc, p.second)),
				fold(newCases, newDefCase ?? mergeSets(newDefCase.third, newValue.third) : newValue.third, \acc, p -> mergeSets(acc, p.third))
			)
		}
		BConstruct(struct, args, type): {
			newArgs = map(args, \arg -> addCapturedVarsToBLambdas(arg, fnIds, usedVars, lambdaId, createdVarIds));
			Triple(
				BConstruct(struct, map(newArgs, firstOfTriple), type),
				fold(newArgs, makeTree(), \acc, p -> mergeTree(acc, p.second)),
				fold(newArgs, makeSet(), \acc, p -> mergeSets(acc, p.third))
			);
		}
		BField(value, field, type): {
			newValue = addCapturedVarsToBLambdas(value, fnIds, usedVars, lambdaId, createdVarIds);
			Triple(BField(newValue.first, field, type), newValue.second, newValue.third);
		}
		BSetMutable(left, field, value, type): {
			newLeft = addCapturedVarsToBLambdas(left, fnIds, usedVars, lambdaId, createdVarIds);
			newValue = addCapturedVarsToBLambdas(value, fnIds, usedVars, lambdaId, createdVarIds);
			Triple(
				BSetMutable(newLeft.first, field, newValue.first, type),
				mergeTree(newLeft.second, newValue.second),
				mergeSets(newLeft.third, newValue.third)
			);
		}
		BCast(value, from, to): {
			newValue = addCapturedVarsToBLambdas(value, fnIds, usedVars, lambdaId, createdVarIds);
			Triple(BCast(newValue.first, from, to), newValue.second, newValue.third);
		}
		BDupValue(value) : {
			newValue = addCapturedVarsToBLambdas(value, fnIds, usedVars, lambdaId, createdVarIds);
			Triple(BDupValue(newValue.first), newValue.second, newValue.third);
		}
		BDropValue(value) : {
			newValue = addCapturedVarsToBLambdas(value, fnIds, usedVars, lambdaId, createdVarIds);
			Triple(BDropValue(newValue.first), newValue.second, newValue.third);
		}
		BReuseValue(value) : {
			newValue = addCapturedVarsToBLambdas(value, fnIds, usedVars, lambdaId, createdVarIds);
			Triple(BReuseValue(newValue.first), newValue.second, newValue.third);
		}
	}
}

AnonymousLambdaId = ref 1;
makeAnonymousLambdaId() -> string {
	"_anonymous_lambda" + i2s(atomicRefIntAddition(AnonymousLambdaId, 1));
}