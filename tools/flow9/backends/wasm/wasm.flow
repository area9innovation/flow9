import tools/flow9/backends/link;
import tools/flow9/backends/back_eval;
import tools/flow9/bexp/type;

// https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format
// https://livebook.manning.com/book/webassembly-in-action/chapter-11/98
export {
	// Compiles the given flow path to JS as a single string
	bmodule2wasm(cache : FlowCache, flowpath : string) -> string;
}

bmodule2wasm(cache : FlowCache, flowpath : string) -> string {
	// TODO:  make a proper backend specification
	backend = makeBackend("wasm", [], [], false);
	spec = makeBackendSpec(backend, "Type", "flow", "", []);
	bprogram2wasm(linkBExpProgram(cache, flowpath, false, spec), flowpath);
}

bprogram2wasm(b : BExpProgram, flowpath : string) -> string {
	blueprint("
		(module
			%decls%
		)
	", ["decls", superglue(b.declarations, bdeclaration2wasm, "\n")])
}

BWasm(
	local : Set<string>
);

bdeclaration2wasm(b : BExpDeclaration) -> string {
	todo = \ -> {
		println("TODO: " + toString(b));
		"";
	}
	switch (b) {
		BGlobalVar(id, body, type): {
			todo();
/*			blueprint("(global %id% (%type%) (%body%))",
				[
					"id", id2wasm(id),
					"type", btype2wasm(type),
					"body", bexp2wasm(body)
				]
			);*/
		}
		BExpFunction(id, args, body, type): {
			blueprint("(func %id% %params% %result% %body%)",
				[
					"id", id2wasm(id),
					"params", fnTypeParams2wasm(args, type),
					"result", fnReturnType2wasm(type),
					"body", bexp2wasm(body)
				]
			);
		}
		BExpNative(id, isio, type, nativeName): todo();
	}
}

// (param i32) (param (i32))
fnTypeParams2wasm(args : [string], b : BType) -> string {
	todo = \ -> {
		println("TODO: Wasm param type: " + toString(b));
		"";
	}
	switch (b) {
		BTypeFunction(targs, returnType): {
			supergluei(targs, \i, t -> {
				"(param " + id2wasm(args[i]) + " " + btype2wasm(t) + ")"
			}, " ")
		}
		default: todo();
	}
}

// (result i32) or (result f64) or empty for void
fnReturnType2wasm(b : BType) -> string {
	todo = \ -> {
		println("TODO: Wasm return type: " + toString(b));
		"";
	}
	switch (b) {
		BTypeFunction(args, returnType): {
			if (returnType == bvoidType) {
				""
			} else "(result " + btype2wasm(returnType) + ")"
		}
		default: todo();
	}
}

id2wasm(id : string) -> string {
	"$" + id;
}

btype2wasm(t : BType) -> string {
	todo = \ -> {
		println("TODO: Wasm type: " + toString(t));
		"";
	}
	switch (t) {
		BTypePar(id): todo();
		BTypeName(id, typars): {
			if (id == "int") {
				"i32";
			} else if (id == "double") {
				"f64";
			} else {
				todo();
			}
		}
		BTypeFunction(args, returnType): todo();
	}
}

bexp2wasm(b : BExp) -> string {
	todo = \ -> {
		println("TODO: Exp 2 wasm: " + toString(b));
		"";
	}
	switch (b) {
		BVoid(): todo();
		BBool(v): "i32.const " + i2s(b2i(v));
		BInt(v): "i32.const " + i2s(v);
		BDouble(v): "f64.const " +d2s(v);
		BString(v): todo();
		BVar(id, type): id2wasm(id);
		BLet(id, value, body, type): todo();
		BIf(cond, then, else_, type): todo();
		BCall(fn, args, type): {
			doargs = \ -> {
				superglue(args, bexp2wasm, "\n");
			}
			switch (fn) {
				BVar(fnid, fntype): {
					if (fnid == "+") {
						if (getBReturnType(fntype) == bintType) {
							"(" + doargs()
							+ " i32.add )";
						} else if (getBReturnType(fntype) == bdoubleType) {
							"(" + doargs()
							+ " f64.add )";
						} else {
							todo();
						}
					} else {
						todo();
					}
				}
				default: todo();
			}
		}
		BLambda(args, body, type): todo();
		BSequence(exps, type): {
			if (length(exps) == 1) {
				bexp2wasm(exps[0]);
			} else "(" + supergluei(exps, \i, ee -> {
				et = getBType(ee);
				if (i != length(exps) - 1 && et != bvoidType) {
					"drop " + bexp2wasm(ee);
				} else {
					bexp2wasm(ee);
				}
			}, "\n") + ")"
		}
		BConstruct(struct, args, type): todo();
		BField(value, field, type): todo();
		BSetMutable(left, field, value, type): todo();
		BSwitch(value, switchType, cases, defaultCase, type): todo();
		BArray(args, type): todo();
		BCast(value, from, to): {
			todo();
			bexp2wasm(value);
		}
	}
}
