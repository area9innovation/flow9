import tools/flow9/backends/rename_ids;
import tools/flow9/backends/bprogram_lower;
import tools/flow9/driver;
import tools/flow9/backends/ref_counting;

export {
	linkBExpProgram(cache : FlowCache, flowpath : string, shorten_ids : bool, spec : BackendSpec) -> BExpProgram;
	linkBProgram(cache : FlowCache, flowpath : string, shorten_ids : bool, spec : BackendSpec) -> BProgram;
	programBModules(cache : FlowCache, file : string, acc : List<BModule>, visited : Set<string>) -> Pair<List<BModule>, Set<string>>;
}

linkBExpProgram(cache : FlowCache, flowpath : string, shorten_ids : bool, spec : BackendSpec) -> BExpProgram {
	modules = list2array(programBModules(cache, flowpath, makeList(), makeSet()).first);
	addRefCounting(renameIdsBExpProgram(bmodules2BExpProgram(modules, spec), spec, shorten_ids).first);
}

linkBProgram(cache : FlowCache, flowpath : string, shorten_ids : bool, spec : BackendSpec) -> BProgram {
	bexp_program = linkBExpProgram(cache, flowpath, shorten_ids, spec);
	addRefCounting2BProgram(bexpProgram2BProgram(bexp_program));
}

programBModules(cache : FlowCache, file : string, acc : List<BModule>, visited : Set<string>) -> Pair<List<BModule>, Set<string>> {
	module = getCachedBModule(cache.modules, file);
	imported_visited : Pair<List<BModule>, Set<string>> = fold(module.imports, Pair(acc, insertSet(visited, file)), \ac : Pair<List<BModule>, Set<string>>, imp : DImport -> {
		if (containsSet(ac.second, imp.path)) ac else {
			programBModules(cache, imp.path, ac.first, ac.second)
		}
	});
	Pair(Cons(module, imported_visited.first), imported_visited.second);
}
