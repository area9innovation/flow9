import tools/flow9/backends/dce;
import tools/flow9/backends/bprogram;
import tools/flow9/backends/backend;
import tools/flow9/bexp/type;

import ds/arrayutils;

export {
	// Lowers and does DCE
	bmodules2BExpProgram(modules : [BModule], spec : BackendSpec) -> BExpProgram;

	bexpProgram2BProgram(b : BExpProgram) -> BProgram;

	// For use in backends, when expressions need a statement
	bexp2BReturn(b : BExp) -> BStatement;


	bstatementType(b : BStatement) -> BType;
}

bmodules2BExpProgram(modules : [BModule], spec : BackendSpec) -> BExpProgram {
	names = bmodules2BNames(modules);
	alive = aliveCode(names);

	deadreport = getUrlParameter("dead");
	if (deadreport != "") {
		report = \type, thenames -> {
			dead = set2array(differenceSets(buildSet(thenames), alive));
			if (dead != []) {
				println(type + " dead: " + strGlue(dead, ","));
			}
		}
		mods = filter(modules, \m -> deadreport == "1" || startsWith(m.flowpath, deadreport));

		structs = fold(mods, [], \acc, module -> {
			concat(acc, getTreeKeys(module.structs))
		});
		report("Structs", structs);
		unions = fold(mods, [], \acc, module -> {
			concat(acc, getTreeKeys(module.unions))
		});
		report("Unions", unions);
		natives = fold(mods, [], \acc, module -> {
			concat(acc, getTreeKeys(module.natives))
		});
		report("Natives", natives);
		globals = fold(mods, [], \acc, module -> {
			concat(acc, getTreeKeys(module.globals))
		});
		report("Globals", globals);

		// OK, something funky here: Find unused files
		/* if (deadreport != "1") {
			files = readDirectoryRecursively(deadreport);
			aliveFiles = buildSet(fold(mods, [], \acc, m -> arrayPush(acc, m.flowpath)));
			deadFiles = filter(files, \file -> {
				endsWith(file, ".flow")
				&& {
					flowpath = strsubsmart(file, 0, -5);
					!containsSet(aliveFiles, flowpath);
				}
			});
			iter(deadFiles, println);
		} */
	}

	BExpProgram(
		filterTree(names.structs, \id, __ -> containsSet(alive, id)),
		filterTree(names.unions, \id, __ -> containsSet(alive, id)),
		fold(modules, [], \acc, module -> {
			fold(module.order, 
				foldTree(module.natives, acc, \id, nat, ac -> 
					if (!containsSet(alive, id)) {
						// The native is not used
						ac
					} else if (containsSet(spec.natives, nat.name)) {
						// Use a native since it is supported by a backend
						concat(ac, [BExpNative(id, nat.isIo, nat.type, nat.name)]);
					} else {
						// The native is not implemented in a backend
						if (!containsKeyTree(module.globals, id)) {
							// The native is supported neither by a backend or by a fallback - error.
							spec.onError(makeErrorMessage(nat.pos, module.fullpath, "Native " + nat.id + " (" + nat.name + ") is supported neither by a backend or by a fallback"));
						}
						ac
					}
				),
				\ac, id -> {
				if (!containsSet(alive, id)) ac else {
					switch (lookupTree(module.globals, id)) {
						Some(decl): {
							switch (lookupTree(module.natives, id)) {
								Some(nat): {
									if (containsSet(spec.natives, nat.name)) {
										// This is a fallback for a native, which is supported by a backend. Ignore it.
										ac;
									} else {
										// Use a fallback for a native, since it is not supported by a backend.
										concat(ac, [bexp2BExpDeclaration(id, decl.typars, decl.value)]);
									}
								}
								None(): {
									// Ordinary global entity.
									concat(ac, [bexp2BExpDeclaration(id, decl.typars, decl.value)]);
								}
							}
						}
						None(): {
							println("Unknown id: '" + id + "'");
							ac;
						}
					}
				}
			})
		})
	);
}

bexpProgram2BProgram(b : BExpProgram) -> BProgram {
	BProgram(
		b.structs,
		b.unions,
		map(b.declarations, bexpDeclaration2Declaration)
	);
}

bexpDeclaration2Declaration(be : BExpDeclaration) -> BDeclaration {
	switch (be) {
		BGlobalVar(name, body, type): be;
		BExpFunction(name, typars, args, body, type): {
			hasTailcall = ref false;
			bbody = bexp2BStatement(name, args, hasTailcall, true, body, idfn);
			BStatFunction(
				name, typars, args, bbody,
				^hasTailcall,
				type
			);
		}
		BExpNative(name, isio, type, nativeName): be;
	}
}

bexp2BExpDeclaration(declid : string, typars : [string], b : BExp) -> BExpDeclaration {
	var = \ -> {
		BGlobalVar(declid, b, getBType(b));
	};
	expFn = \args, body, type -> BExpFunction(
		declid, typars, args, body,
		type
	);
	switch (b) {
		BValue(): var();
		BVar(__, __): var();
		BLet(__, __, __, __): var();
		BLambda(args, body, type, capturedVars): expFn(args, body, type);
		BCall(fn, args, type): var();
		BIf(cond, then, else_, type): var();
		BSequence(exps, type): var();
		BSwitch(val, __, cases, __, type): var();
		BConstruct(struct, args, type): var();
		BField(value, field, type): var();
		BSetMutable(left, field, value, type): var();
		BArray(args, type): var();
		BCast(value, from, to): {
			switch (value : BExp) {
				// move BCast just before the return value of BLambda
				BLambda(args, body, type, capturedVars): expFn(args, downBCastToReturnValue(body, b, idfn), to);
				default : var();
			}
		}
		BDupValue(value) : var();
		BDropValue(value) : var();
		BReuseValue(value) : var();
	}
}

// add BCast to a value after dup/drop.
// addBCounter : before BDupValue(BCast(BVar)), after BCast(BDupValue(BVar))
downBCastToReturnValue(exp : BExp, bcast : BCast, addBCounter : (BExp) -> BExp) -> BExp {
	castExp = \-> BCast(addBCounter(exp), bcast.from, bcast.to);
	switch (exp) {
		BValue(): castExp();
		BVar(__, __): castExp();
		BLet(id, value, body, type): BLet(id, value, downBCastToReturnValue(body, bcast, addBCounter), bcast.to);
		BLambda(args, body, type, capturedVars): BLambda(args, downBCastToReturnValue(body, bcast, addBCounter), bcast.to, capturedVars);
		BCall(fn, args, type): castExp();
		BIf(cond, then, else_, type): castExp();
		BSequence(exps, type): {
			lastIndex = length(exps) - 1;
			BSequence(mapi(exps, \i, e -> if (i == lastIndex) downBCastToReturnValue(e, bcast, addBCounter) else e), bcast.to);
		}
		BSwitch(val, __, cases, __, type): castExp();
		BConstruct(struct, args, type): castExp();
		BField(value, field, type): castExp();
		BSetMutable(left, field, value, type): castExp();
		BArray(args, type): castExp();
		BCast(value, from, to): downBCastToReturnValue(value, bcast, addBCounter);
		BDupValue(value) : downBCastToReturnValue(value, bcast, \e -> addBCounter(BDupValue(e)));
		BDropValue(value) : downBCastToReturnValue(value, bcast, \e -> addBCounter(BDropValue(e)));
		BReuseValue(value) : downBCastToReturnValue(value, bcast, \e -> addBCounter(BReuseValue(e)));
	}
}

bexp2BStatement(decl : string, fnargs : [string], hasTailcall : ref bool, tailcall : bool, b : BExp, wrapReturn : (BExp) -> BExp) -> BStatement {
	return = \v -> BReturn(wrapReturn(v));
	switch (b : BExp) {
		/*BInt(value): {
			//if (type == BTypeName("void", [])) BReturnVoid() else 
			return(b);
		}*/
		BValue(): return(b);
		BVar(name, type): return(b);
		BLet(name, value, body, type): {
			BLetStatement(name, value, bexp2BStatement(decl, fnargs, hasTailcall, tailcall, body, wrapReturn));
		}
		BLambda(args, body, type, capturedVars): return(b);
		BCall(fn, args, type): {
			if (tailcall) {
				switch (fn) {
					BVar(fname, __): if (fname == decl) {
						// Tail call
						// Filter out trivial arguments
						newArgs = foldi2(fnargs, [], [], \i, accnames, accvals, fnarg -> {
							val = args[i];
							def = \ -> {
								Pair(arrayPush(accnames, fnarg), arrayPush(accvals, val));
							};
							switch (val) {
								BVar(aname, __): {
									if (aname == fnarg) {
										// OK, no need for it
										Pair(accnames, accvals)
									} else {
										def();
									}
								}
								default: def();
							}
						});
						hasTailcall := true;
						BTailCall(decl, newArgs.first, newArgs.second, type);
					} else return(b);
					default: return(b);
				}
			} else return(b);
		}
		BIf(cond, then, else_, type): {
			BIfStatement(cond, 
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall, then, wrapReturn), 
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall, else_, wrapReturn)
			);
		}
		BSequence(exps, type): {
			if (exps == []) BReturnVoid()
			else BSequenceStatement(mapi(exps, \i, e -> {
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall && i == length(exps) - 1, e, if (i == length(exps) - 1) wrapReturn else idfn)
			}));
		} 
		BSwitch(val, s_type, cases, def_case, type): {
			BSwitchStatement(val, map(cases, \case -> {
					BCaseStatement(case.id, 
						bexp2BStatement(decl, fnargs, hasTailcall, tailcall, case.body, wrapReturn)
					)
				}), type
			);
		}
		BConstruct(struct, args, type):  {
			return(b);
		}
		BField(value, field, type): {
			return(b);
		}
		BSetMutable(left, field, value, type): {
			BSetMutableStatement(left, field, value);
		}
		BArray(args, type): {
			return(b);
		}
		BCast(value, from, to): {
			bexp2BStatement(decl, fnargs, hasTailcall, tailcall, value, \rv -> BCast(rv, from, to));
		}
		BDupValue(value) : addBCounterValue2BStatement(bexp2BStatement(decl, fnargs, hasTailcall, tailcall, value, \e -> BDupValue(e)), wrapReturn);
		BDropValue(value) : addBCounterValue2BStatement(bexp2BStatement(decl, fnargs, hasTailcall, tailcall, value, \e -> BDropValue(e)), wrapReturn);
		BReuseValue(value) : addBCounterValue2BStatement(bexp2BStatement(decl, fnargs, hasTailcall, tailcall, value, \e -> BReuseValue(e)), wrapReturn);
	}
}

bexp2BReturn(b : BExp) -> BStatement {
	switch (b) {
		//BVoid(): 
		/*BInt(value): {
			//if (type == miniTypeVoid) BReturnVoid() else
			BReturn(b);
		}*/
		BValue(): BReturn(b);
		BVar(name, type): BReturn(b);
		BLet(name, value, body, type): {
			BLetStatement(name, value, bexp2BReturn(body));
		}
		BLambda(args, body, type, capturedVars): BReturn(b);
		BCall(fn, args, type): BReturn(b);
		BIf(cond, then, else_, type): BIfStatement(cond, bexp2BReturn(then), bexp2BReturn(else_));
		BSequence(exps, type): BSequenceStatement(map(exps, bexp2BReturn));
		BSwitch(val, __, cases, __, type): 
			BSwitchStatement(val, map(cases, \case -> {
				BCaseStatement(case.id, bexp2BReturn(case.body))
			}), type);
		BConstruct(struct, args, type): {
			BReturn(b);
		}
		BField(value, field, type): {
			BReturn(b);
		}
		BSetMutable(left, field, value, type): {
			BSetMutableStatement(left, field, value);
		}
		BArray(args, type): {
			BReturn(b);
		}
		BCast(value, from, to): {
			// TODO ??
			bexp2BReturn(value);
		}
		BDupValue(value) : bexp2BReturn(value);
		BDropValue(value) : bexp2BReturn(value);
		BReuseValue(value) : bexp2BReturn(value);
	}
}

bstatementType(b : BStatement) -> BType {
	switch (b) {
		BIfStatement(cond, then, else_): bstatementType(then);
		BLetStatement(name, value, body): bstatementType(body);
		BReturnVoid(): bvoidType;
		BReturn(val): getBType(val);
		BTailCall(fn, args, values, type): type;
		BSequenceStatement(statements): {
			bstatementType(lastElement(statements, BReturnVoid()));
		}
		BSwitchStatement(expr, cases, type): type;
		BSetMutableStatement(left, field, value): getBType(value);
	}
}

// TODO : drop doesn't have return value
addBCounterValue2BStatement(b : BStatement, wrap : (BExp) -> BExp) -> BStatement {
	switch (b) {
		BIfStatement(cond, then, else_): b;
		BLetStatement(name, value, body): b;
		BReturnVoid(): b;
		BReturn(val): BReturn(wrap(val));
		BTailCall(fn, args, values, type): b;
		BSequenceStatement(statements): b;
		BSwitchStatement(expr, cases, type): b;
		BSetMutableStatement(left, field, value): b;
	}
}
