import tools/flow9/backends/dce;
import tools/flow9/backends/bprogram;
import tools/flow9/backends/backend;
import tools/flow9/bexp/type;

import ds/arrayutils;

export {
	bmodules2BExpProgram(modules : [BModule], spec : BackendSpec) -> BExpProgram;

	bexpProgram2BProgram(b : BExpProgram) -> BProgram;

	// For use in backends, when expressions need a statement
	bexp2BReturn(b : BExp) -> BStatement;

	bexp2BStatement(decl : string, fnargs : [string], hasTailcall : ref bool, tailcall : bool, b : BExp) -> BStatement;

	bstatementType(b : BStatement) -> BType;
}

bmodules2BExpProgram(modules : [BModule], spec : BackendSpec) -> BExpProgram {
	names = bmodules2BNames(modules);
	alive = aliveCode(names);
	BExpProgram(
		filterTree(names.structs, \id, __ -> containsSet(alive, id)),
		filterTree(names.unions, \id, __ -> containsSet(alive, id)),
		fold(modules, [], \acc, module -> {
			fold(module.order, 
				foldTree(module.natives, acc, \id, nat, ac -> 
					if (!containsSet(alive, id)) {
						// The native is not used
						ac
					} else if (containsSet(spec.natives, nat.name)) {
						// Use a native since it is supported by a backend
						concat(ac, [BExpNative(id, nat.isIo, nat.type, nat.name)]);
					} else {
						// The native is not implemented in a backend
						if (!containsKeyTree(module.globals, id)) {
							// The native is supported neither by a backend or by a fallback - error.
							spec.onError(makeErrorMessage(nat.pos, module.fullpath, "Native " + nat.id + " (" + nat.name + ") is supported neither by a backend or by a fallback"));
						}
						ac
					}
				),
				\ac, id -> {
				if (!containsSet(alive, id)) ac else {
					switch (lookupTree(module.globals, id)) {
						Some(decl): {
							switch (lookupTree(module.natives, id)) {
								Some(nat): {
									if (containsSet(spec.natives, nat.name)) {
										// This is a fallback for a native, which is supported by a backend. Ignore it.
										ac;
									} else {
										// Use a fallback for a native, since it is not supported by a backend.
										concat(ac, [bexp2BExpDeclaration(id, decl.value)]);
									}
								}
								None(): {
									// Ordinary global entity.
									concat(ac, [bexp2BExpDeclaration(id, decl.value)]);
								}
							}
						}
						None(): {
							println("Unknown id: '" + id + "'");
							ac;
						}
					}
				}
			})
		})
	);
}

bexpProgram2BProgram(b : BExpProgram) -> BProgram {
	BProgram(
		b.structs, b.unions,
		map(b.declarations, bexpDeclaration2Declaration)
	);
}

bexpDeclaration2Declaration(be : BExpDeclaration) -> BDeclaration {
	switch (be) {
		BGlobalVar(name, body, type): be;
		BExpFunction(name, args, body, type): {
			hasTailcall = ref false;
			bbody = bexp2BStatement(name, args, hasTailcall, true, body);
			BStatFunction(
				name, args, bbody,
				^hasTailcall,
				type
			);
		}
		BExpNative(name, isio, type, nativeName): be;
	}
}

bexp2BExpDeclaration(declid : string, b : BExp) -> BExpDeclaration {
	var = \ -> {
		BGlobalVar(declid, b, getBType(b));
	};
	switch (b) {
		BValue(): var();
		BVar(__, __): var();
		BLet(__, __, __, __): var();
		BLambda(args, body, type): {
			BExpFunction(
				declid, args, body,
				type
			);
		}
		BCall(fn, args, type): var();
		BIf(cond, then, else_, type): var();
		BSequence(exps, type): var();
		BSwitch(val, __, cases, __, type): var();
		BConstruct(struct, args, type): var();
		BField(value, field, type): var();
		BSetMutable(left, field, value, type): var();
		BArray(args, type): var();
	}
}

bexp2BStatement(decl : string, fnargs : [string], hasTailcall : ref bool, tailcall : bool, b : BExp) -> BStatement {
	switch (b : BExp) {
		/*BInt(value): {
			//if (type == BTypeName("void", [])) BReturnVoid() else 
			BReturn(b);
		}*/
		BValue(): BReturn(b);
		BVar(name, type): BReturn(b);
		BLet(name, value, body, type): {
			BLetStatement(name, value, bexp2BStatement(decl, fnargs, hasTailcall, tailcall, body));
		}
		BLambda(args, body, type): BReturn(b);
		BCall(fn, args, type): {
			if (tailcall) {
				switch (fn) {
					BVar(fname, __): if (fname == decl) {
						// Tail call
						// Filter out trivial arguments
						newArgs = foldi2(fnargs, [], [], \i, accnames, accvals, fnarg -> {
							val = args[i];
							def = \ -> {
								Pair(arrayPush(accnames, fnarg), arrayPush(accvals, val));
							};
							switch (val) {
								BVar(aname, __): {
									if (aname == fnarg) {
										// OK, no need for it
										Pair(accnames, accvals)
									} else {
										def();
									}
								}
								default: def();
							}
						});
						hasTailcall := true;
						BTailCall(decl, newArgs.first, newArgs.second, type);
					} else BReturn(b);
					default: BReturn(b);
				}
			} else BReturn(b);
		}
		BIf(cond, then, else_, type): {
			BIfStatement(cond, 
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall, then), 
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall, else_)
			);
		}
		BSequence(exps, type): {
			if (exps == []) BReturnVoid()
			else BSequenceStatement(mapi(exps, \i, e -> {
				bexp2BStatement(decl, fnargs, hasTailcall, tailcall && i == length(exps) - 1, e)
			}));
		} 
		BSwitch(val, s_type, cases, def_case, type): {
			BSwitchStatement(val, map(cases, \case -> {
					BCaseStatement(case.id, 
						bexp2BStatement(decl, fnargs, hasTailcall, tailcall, case.body)
					)
				}), type
			);
		}
		BConstruct(struct, args, type):  {
			BReturn(b);
		}
		BField(value, field, type): {
			BReturn(b);
		}
		BSetMutable(left, field, value, type): {
			BSetMutableStatement(left, field, value);
		}
		BArray(args, type): {
			BReturn(b);
		}
	}
}

bexp2BReturn(b : BExp) -> BStatement {
	switch (b) {
		//BVoid(): 
		/*BInt(value): {
			//if (type == miniTypeVoid) BReturnVoid() else
			BReturn(b);
		}*/
		BValue(): BReturn(b);
		BVar(name, type): BReturn(b);
		BLet(name, value, body, type): {
			BLetStatement(name, value, bexp2BReturn(body));
		}
		BLambda(args, body, type): BReturn(b);
		BCall(fn, args, type): BReturn(b);
		BIf(cond, then, else_, type): BIfStatement(cond, bexp2BReturn(then), bexp2BReturn(else_));
		BSequence(exps, type): BSequenceStatement(map(exps, bexp2BReturn));
		BSwitch(val, __, cases, __, type): 
			BSwitchStatement(val, map(cases, \case -> {
				BCaseStatement(case.id, bexp2BReturn(case.body))
			}), type);
		BConstruct(struct, args, type): {
			BReturn(b);
		}
		BField(value, field, type): {
			BReturn(b);
		}
		BSetMutable(left, field, value, type): {
			BSetMutableStatement(left, field, value);
		}
		BArray(args, type): {
			BReturn(b);
		}
	}
}

bstatementType(b : BStatement) -> BType {
	switch (b) {
		BIfStatement(cond, then, else_): bstatementType(then);
		BLetStatement(name, value, body): bstatementType(body);
		BReturnVoid(): bvoidType;
		BReturn(val): getBType(val);
		BTailCall(fn, args, values, type): type;
		BSequenceStatement(statements): {
			bstatementType(lastElement(statements, BReturnVoid()));
		}
		BSwitchStatement(expr, cases, type): type;
		BSetMutableStatement(left, field, value): getBType(value);
	}
}
