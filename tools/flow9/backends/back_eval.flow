import ds/tree;
import tools/flow9/backends/bprogram;
import text/blueprint;
import text/serialize;
import tools/flow9/backends/backend;
import tools/flow9/bexp/pretty;
import tools/flow9/bexp/utils;
import tools/flow9/types/builtin;

export {
	// Produce code for this call operator, respecting precedence
	produceBackendCall(backend : Backend<?>, call : BCall, rec : (Backend<?>, BExp) -> string) -> string;

	// See if we can produce code for this native
	produceBackendNative(backend : Backend<?>, nativeName : string) -> string;

	// What stuff is required at the top?
	getBackendRequirements(backend : Backend<?>) -> string;
}

produceBackendCall(backend : Backend<?>, call : BCall, rec : (Backend<?>, BExp) -> string) -> string {
	produceCodeWithPrec(backend, call, rec).first;
}

produceCodeWithPrec(backend : Backend<?>, e : BExp, rec : (Backend<?>, BExp) -> string) -> Pair<string, int> {
	switch (e) {
		BCall(fn, args, type): {
			call_type = BTypeFunction(map(args, \arg -> getBType(arg)), type);
			def = \ -> Pair(rec(backend, fn) + "(" + superglue(args, \a -> rec(backend, a), ", ") + ")", 1000);
			switch (fn) {
				BVar(name, __): {
					// OK, we have a named call. Look for a code gen proc for this that matches the type
					gens = getTreeArrayValue(backend.generators, name);
					match = filter(gens, \g -> g.type == getBType(fn));
					universal = filter(gens, \g -> g.type == bvoidType);

					if (length(match) == 1) {
						// We have a hit
						gen = match[0];
						evalBackExp(backend, args, rec, gen.product);
					} else if (length(match) == 0 && length(universal) == 1) {
						// We use a general form
						gen = universal[0];
						evalBackExp(backend, args, rec, gen.product);
					} else if (gens != []) {
						backend.onError(
							"Can not generate " + name + " for type " + prettyBType(getBType(fn)) + "\n" +
							"expr: " + prettyBExp(e) + "\n" + 
							"generators: \n" + concatStrings(map(concat(match, universal), \gen -> "\t" + gen.name + " : " + prettyBType(gen.type) + "\n"))
						);

						gen = gens[0];
						evalBackExp(backend, args, rec, gen.product);
					} else def();
				}
				default: def();
			}
		}
		default: Pair(rec(backend, e), 1000);
	}
}

produceBackendNative(backend : Backend<?>, nativeName : string) -> string {
	gens = getTreeArrayValue(backend.generators, nativeName);
	if (length(gens) == 1) {
		gen = gens[0];
		evalBackExp(backend, [], \__, __ -> "", gen.product).first;
	} else "";
}

evalBackExp(backend : Backend<?>, args : [BExp], rec : (Backend<?>, BExp) -> string, e : BackExp) -> Pair<string, int> {
	switch (e) {
		BackText(text): Pair(text, 1000);
		BackBinOp(name, precedence, arg0, arg1): {
			left = evalBackExp(backend, args, rec, arg0);
			right = evalBackExp(backend, args, rec, arg1);

			wrap = \pair -> if (pair.second <= precedence) "(" + pair.first + ")" else pair.first;

			Pair(wrap(left) + name + wrap(right), precedence);
		}
		BackPreOp(name, precedence, arg): {
			left = evalBackExp(backend, args, rec, arg);

			wrap = \pair -> if (pair.second < precedence) "(" + pair.first + ")" else pair.first;
			Pair(name + wrap(left), precedence);
		}
		BackPostOp(name, precedence, arg): {
			left = evalBackExp(backend, args, rec, arg);

			wrap = \pair -> if (pair.second < precedence) "(" + pair.first + ")" else pair.first;
			Pair(wrap(left) + name, precedence);
		}
		BackCall(name, cargs): {
			eargs = map(cargs, \arg ->  evalBackExp(backend, args, rec, arg));
			Pair(name + "(" + superglue(eargs, \ap -> ap.first, ",") + ")", fold(eargs, 1000, \acc, ep -> min(ep.second, acc)));
		}
		BackArg(n): {
			arg = elementAt(args, n, BInt(0));
			produceCodeWithPrec(backend, arg, rec)
		}
		BackConcat(es): {
			eargs = map(es, \arg ->  evalBackExp(backend, args, rec, arg));
			Pair(superglue(eargs, \ap -> ap.first, ""), fold(eargs, 1000, \acc, ep -> min(ep.second, acc)));
		}
		BackUnquote(ex): {
			left = evalBackExp(backend, args, rec, ex);
			Pair(deserializeString(left.first).first, left.second);
		}
		BackIfDef(flag, then, else_): {
			evalBackExp(backend, args, rec, 
				if (false /*TODO: Figure out where to place flags isUrlParameterTrue(flag)*/) then else else_
			);
		}
		BackRequire(code, in): {
			fp = evalBackExp(backend, args, rec, code);
			// Add this to the backend requirements
			backend.requirements := insertSet(^(backend.requirements), fp.first);
			evalBackExp(backend, args, rec, in);
		}
	}
}

getBackendRequirements(backend : Backend<?>) -> string {
	t = strGlue(set2array(^(backend.requirements)), "\n");
	if (t != "") t + "\n" else t;
}
