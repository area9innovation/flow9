import gringo/gringo_pretty;
import gringo/optimize;
import gringo/precedence;
import gringo/cse;
import gringo/left_recursion;
import gringo/right_assoc;
import gringo/prefix;

export {
	// Expands precedence, left recursion, prefix-optimizations, CSE, fixes associativity, dead code and simplifications
	prepareGringoGrammar(g : GTerm) -> GTerm;
}

prepareGringoGrammar(grammar : GTerm) -> GTerm {
	prgrammar = expandPrecedence(grammar);
	if (false) {
		println("Precedence:");
		println(gterm2string(prgrammar));
	};

	egrammar = reduceCommon(prgrammar);
	if (false) {
		println("CSE, dead-code:");
		println(gterm2string(egrammar));
	};
	pgrammar = commonPrefix(egrammar);
	rgrammar = rightAssociateGTerm(pgrammar);
	lgrammar = rewriteLeftRecursion(rgrammar);
	// Do CSE again
	ogrammar = optimizeGTerm(reduceCommon(lgrammar));

	ogrammar;
}
