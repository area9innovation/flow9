// Produced by  flowcpp gringo/gringo.flow -- file=tools/gringo/griego/griego.gringo compile=1
import text/gringo/dcode_lib;
import string;

export {
	griego_parse_grammar(acc : DParseAcc<?>) -> bool;
}


griego_parse_term(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (griego_parse_term1(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "|>") && ((griego_parse_ws(acc) && griego_parse_term(acc))))) {
					{
						addVerbatim(acc, "precedence_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term1(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (griego_parse_term2(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "|") && ((griego_parse_ws(acc) && griego_parse_term1(acc))))) {
					{
						addVerbatim(acc, "choice_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term2(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (griego_parse_term3(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if (griego_parse_term2(acc)) {
					{
						addVerbatim(acc, "seq_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term3(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if ((if ((matchString(acc, "$") && ((griego_parse_ws(acc) && griego_parse_term3(acc))))) {
			{
				addVerbatim(acc, "unquote_1");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) || griego_parse_term4(acc)) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term4(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if ((if ((matchString(acc, "<") && ((griego_parse_ws(acc) && griego_parse_term4(acc))))) {
			{
				addVerbatim(acc, "lower_1");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) || griego_parse_term5(acc)) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term5(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if ((if ((matchString(acc, "#") && ((griego_parse_ws(acc) && griego_parse_term5(acc))))) {
			{
				addVerbatim(acc, "error_1");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) || griego_parse_term6(acc)) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term6(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (griego_parse_term7(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "*") && griego_parse_ws(acc))) {
					{
						addVerbatim(acc, "star_1");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term7(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (griego_parse_term8(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "+") && griego_parse_ws(acc))) {
					{
						addVerbatim(acc, "plus_1");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term8(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (griego_parse_term9(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "?") && griego_parse_ws(acc))) {
					{
						addVerbatim(acc, "opt_1");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term9(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if ((if ((matchString(acc, "!") && ((griego_parse_ws(acc) && griego_parse_term9(acc))))) {
			{
				addVerbatim(acc, "negate_1");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) || griego_parse_term10(acc)) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

griego_parse_term10(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if ((matchString(acc, "(") && ((griego_parse_ws(acc) && ((griego_parse_term(acc) && ((matchString(acc, ")") && griego_parse_ws(acc))))))))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "\"") && ((griego_parse_string(acc) && ((matchString(acc, "\"") && griego_parse_ws(acc))))))) {
					{
						addVerbatim(acc, "string_1");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "'") && ((griego_parse_char(acc) && ((matchString(acc, "'") && ((griego_parse_ws(acc) && ((matchString(acc, "-") && ((griego_parse_ws(acc) && ((matchString(acc, "'") && ((griego_parse_char(acc) && ((matchString(acc, "'") && griego_parse_ws(acc))))))))))))))))))) {
							{
								addVerbatim(acc, "range_2");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if ((matchString(acc, "'") && ((griego_parse_stringq(acc) && ((matchString(acc, "'") && griego_parse_ws(acc))))))) {
									{
										addVerbatim(acc, "string_1");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if (if ((griego_parse_id(acc) && ((griego_parse_ws(acc) && ((matchString(acc, "=") && ((griego_parse_ws(acc) && ((griego_parse_term(acc) && ((matchString(acc, ";") && ((griego_parse_ws(acc) && griego_parse_term(acc))))))))))))))) {
											{
												addVerbatim(acc, "rule_3");
												discardDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											{
												pushDCheckpoint(acc);
												if (if ((griego_parse_id(acc) && griego_parse_ws(acc))) {
													{
														addVerbatim(acc, "var_1");
														discardDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

griego_parse_id(acc : DParseAcc<?>) -> bool {
	{
		acc.starti ::= acc.i;
		if (if (matchRange(acc, 97, 122) || (matchRange(acc, 65, 90) || (matchRange(acc, 48, 57) || matchString(acc, "_")))) {
			{
				parseStar(acc, \ -> {
					matchRange(acc, 97, 122) || (matchRange(acc, 65, 90) || (matchRange(acc, 48, 57) || matchString(acc, "_")))
				});
				true
			}
		} else {
			false
		}) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}
	}
}

griego_parse_string(acc : DParseAcc<?>) -> bool {
	{
		acc.starti ::= acc.i;
		parseStar(acc, \ -> {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (((if (matchString(acc, "\"")) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) && griego_parse_anychar(acc))) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		});
		addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
	}
}

griego_parse_stringq(acc : DParseAcc<?>) -> bool {
	{
		acc.starti ::= acc.i;
		parseStar(acc, \ -> {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (((if (matchString(acc, "'")) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) && griego_parse_anychar(acc))) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		});
		addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
	}
}

griego_parse_char(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		acc.starti ::= acc.i;
		pushDCheckpoint(acc);
		if (if (if (matchString(acc, "0x")) {
			{
				pushDCheckpoint(acc);
				if (if (griego_parse_hexdigit(acc)) {
					{
						parseStar(acc, \ -> {
							griego_parse_hexdigit(acc)
						});
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				acc.starti ::= acc.i;
				if (if (griego_parse_anychar(acc)) {
					addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
				} else {
					false
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}
	}
}

griego_parse_anychar(acc : DParseAcc<?>) -> bool {
	matchRange(acc, 0, 65535)
}

griego_parse_hexdigit(acc : DParseAcc<?>) -> bool {
	matchRange(acc, 97, 102) || (matchRange(acc, 65, 70) || matchRange(acc, 48, 57))
}

griego_parse_ws(acc : DParseAcc<?>) -> bool {
	parseStar(acc, \ -> {
		griego_parse_s(acc)
	})
}

griego_parse_s(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, " ") || (matchString(acc, "\t") || (matchString(acc, "\n") || matchString(acc, "\u000d")))) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (matchString(acc, "//")) {
					{
						parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (((if (matchString(acc, "\n")) {
									restoreDCheckpoint(acc)
								} else {
									{
										restoreDCheckpoint(acc);
										true
									}
								}) && griego_parse_anychar(acc))) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						});
						if (matchString(acc, "\n")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if (matchString(acc, "/*")) {
							{
								parseStar(acc, \ -> {
									{
										pushDCheckpoint(acc);
										pushDCheckpoint(acc);
										if (((if (matchString(acc, "*/")) {
											restoreDCheckpoint(acc)
										} else {
											{
												restoreDCheckpoint(acc);
												true
											}
										}) && griego_parse_anychar(acc))) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									}
								});
								if (matchString(acc, "*/")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}
			}
		}
	}
}

griego_parse_grammar(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if ((griego_parse_ws(acc) && griego_parse_term(acc))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}





















