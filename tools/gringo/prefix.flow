import gringo/gringo_ast;
import gringo/utils;

export {
	commonPrefix(g : GTerm) -> GTerm;
}

commonPrefix(g : GTerm) -> GTerm {
	switch (g) {
		GRule(rule, term, body): {
			GRule(rule, pullOutCommonPrefix(term), commonPrefix(body));
		}
		GSeq(left, right): {
			GSeq(commonPrefix(left), commonPrefix(right));
		}
		default: g;
	}
}

/* 
	TODO: We should factor common prefixes first:
	e1 = e1 tail1
		| e1 tail2
		| rest

		->

	e1 = e1 (tail1 | tail2) 
		| rest
*/

pullOutCommonPrefix(g : GTerm) -> GTerm {
	choices = getChoices(g);

	seq : [[GTerm]]= map(choices, getSequence);

	if (length(seq) <= 1) {
		g
	} else {
		prefix = seq[0][0];
		// What choice # has a different prefix than this?
		firstDifferent = findiDef(seq, \s -> {
			s[0] != prefix
		}, 100000);

		if (firstDifferent >= 2) {
			// OK, at least two rows have the same prefix at the start

			// These choices have the same prefix
			first = subrange(seq, 0, firstDifferent);
			// These are the remaining ones without the same
			rest = tailFrom(seq, firstDifferent);

			// OK, pull out the first common token, and recurse to get all out
			firstChoice = GSeq(
				prefix,
				pullOutCommonPrefix(gchoices(
					map(first, \s : [GTerm] -> gseq(tail(s)))
				)
			));

			gchoices(concat([firstChoice], map(rest, \r -> gseq(r))));
		} else {
			g;
		}
	}
}



getChoices(g : GTerm) -> [GTerm] {
	switch (g) {
		GChoice(left, right): concat(getChoices(left), getChoices(right));
		default: [g];
	}
}

getSequence(g : GTerm) -> [GTerm] {
	switch (g) {
		GSeq(left, right): concat(getSequence(left), getSequence(right));
		default: [g];
	}
}
