// Generated by 
// gringo file=gringo/exp1.gringo fast=1 accTYpe=List<string> verb=addVerbatim matched=addMatched
import parsec;

gringo_exp1_e_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::sequenceParseC1(
		gringo_exp1_e1_rule,
		compiletime::optionalParseC1(
			compiletime::sequenceParseC1(
				compiletime::sequenceParseC1(
					compiletime::tokenParseC1("+"),
					gringo_exp1_e_rule
				),
				compiletime::addVerbatimParseC1(addVerbatim, "Sum")
			)
		)
	);
	p(input, i, acc);
}

gringo_exp1_e1_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::sequenceParseC1(
		gringo_exp1_e2_rule,
		compiletime::optionalParseC1(
			compiletime::sequenceParseC1(
				compiletime::sequenceParseC1(
					compiletime::tokenParseC1("*"),
					gringo_exp1_e1_rule
				),
				compiletime::addVerbatimParseC1(addVerbatim, "Prod")
			)
		)
	);
	p(input, i, acc);
}

gringo_exp1_e2_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::addMatchedParseC1(
		gringo_exp1_var_rule,
		addMatched
	);
	p(input, i, acc);
}

gringo_exp1_var_rule(input : string, i : i32, acc : List<string>) -> Tuple<i32, List<string> > {
	p = compiletime::plusParseC1(
		compiletime::rangeParseC1(48, 57)
	);
	p(input, i, acc);
}

