import tools/gringo/compiler/dopcode;
import text/blueprint;

export {
	dopcode2string(d : DOpCode) -> string;
}

dopcode2string(d : DOpCode) -> string {
	switch (d) {
		DFunction(name, code, body): blueprint("
				%name% = %code%;
				%body%
			", [
				"name", name,
				"code", dopcode2string(code),
				"body", dopcode2string(body),
			]);
		DTrue(): "true";
		DFalse(): "false";
		DString(s): toString(s); 
		DIf(cond, then, else_): {
			condi = dopcode2string(cond);
			if (strContains(condi, "\n")) {
				blueprint("
					if (
						%cond%
					)
						%then%
					else
						%else%", [
					"cond", condi,
					"then", dopcode2string(then),
					"else", dopcode2string(else_),
				]);
			} else {
				blueprint("
					if (%cond%)
						%then%
					else
						%else%", [
					"cond", condi,
					"then", dopcode2string(then),
					"else", dopcode2string(else_),
				]);

			}
		}
		DSequence(exps): {
			blueprint("
				{
					%exps%
				}",
				[
					"exps",	superglue(exps, dopcode2string, "\n")
				]
			)
		}
		DPushCheckpoint(): "push";
		DDiscardCheckpoint(): "discard";
		DRestoreCheckpoint(): "restore";
		DParseStar(term): dopcode2string(term) + "*";
		DAddError(error): "error(" + error + ")";
		DCaptureI(): "capture-i";
		DMatched(): "matched";
		DPosition(): "position";
		DAddVerbatim(e): "add-verbatim(" + dopcode2string(e) + ")";
		DAddMatched(e): "add-matched(" + dopcode2string(e) + ")";
		DMatchString(text): "match(" + toString(text) + ")";
		DMatchRange(lower, upper): "0x" + formatHex(lower) + "-" + formatHex(upper);
		DCall(id): id;
		DAnd(left, right): dopcode2string(left) + " && " + dopcode2string(right);
		DOr(left, right): dopcode2string(left) + " || " + dopcode2string(right);
	}
}
