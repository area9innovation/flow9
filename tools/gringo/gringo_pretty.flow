import gringo/gringo_ast;
import text/blueprint;
import string;

export {
	gterm2string(g : GTerm) -> string;
	gterm2summary(g : GTerm) -> string;
}

gterm2string(g : GTerm) -> string {
	switch (g) {
		GRule(id, term, body): "\n" + id + " = " + gterm2string(term) + ";\n" + gterm2string(body);
		GPrecedence(left, right): gterm2string(left) + " \n\t|> " + gterm2string(right);
		GChoice(left, right): "(" + gterm2string(left) + " | " + gterm2string(right) + ")";
		GSeq(left, right): "(" + gterm2string(left) + " " + gterm2string(right) + ")";
		GStar(term): "(" + gterm2string(term) + ")*";
		GPlus(term): "(" + gterm2string(term) + ")+";
		GOpt(term): "(" + gterm2string(term) + ")?";
		GNegate(term): "!" + gterm2string(term);
		GError(term): "#(" + gterm2string(term) +")";
		GLower(term): "<(" + gterm2string(term) +")";
		GUnquote(term): "$" + gterm2string(term);
		GString(text): {
			if (text == "\"") "'\"'"
			else toString(text);
		}
		GRange(lower, upper): {
			c = \code -> {
				if (code < 0x20 || code > 0xff) {
					"0x" + formatHex(code)
				} else fromCharCode(code)
			};
			"'" + c(lower) + "'-'" + c(upper) + "'"
		}
		GVar(id): id;
		GEpsilon(): "<epsilon>";
	}
}

gterm2summary(g : GTerm) -> string {
	switch (g) {
		GSeq(left, right): {
			gterm2summary(left) + "...";
		}
		GRule(id, v, body): id + "=...";
		GChoice(left, right): {
			gterm2summary(left) + "|...";
		}
		default : gterm2string(g);
	}
}
