import text/blueprint;
import tools/gringo/pflow/pexp;

export {
	prettyPExp(p : PExp) -> string;
}

prettyPExp(p : PExp) -> string {
	switch (p) {
		PBool(b): b2s(b);
		PInt(i): i2s(i);
		PString(s): toString(s);
		PArrayValue(values): "[" + superglue(values, prettyPExp, ", ") + "]";
		PLambda(args, body): "\\" + strGlue(args, ", ") + " -> " + prettyPExp(body);
		PLet(id, value, body): {
			blueprint("
				%id% = %value%;
				%body%", [
				"id", id,
				"value", prettyPExp(value),
				"body", prettyPExp(body),
			])
		}
		PVar(id): id;
		PIf(cond, then, else_): {
			blueprint("
				if (%cond%) {
					%then%
				} else {
					%else%
				}", [
				"cond", prettyPExp(cond),
				"then", prettyPExp(then),
				"else", prettyPExp(else_),
			])
		}
		PCall(fn, args): prettyPExp(fn) + "(" + superglue(args, prettyPExp, ", ") + ")";
		PArray(values): "[" + superglue(values, prettyPExp, ", ") + "]";
		PSequence(values): {
			blueprint("
				{
					%values%
				}", [
				"values", superglue(values, prettyPExp, ";\n"),
			])
		}
	}
}
