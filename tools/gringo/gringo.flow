import tools/gringo/gringo_embed;
import tools/gringo/compiler/dcode;
import tools/gringo/gringo_ast_actions;
import tools/gringo/json_actions;
import tools/gringo/gringo_to_fast;
import net/url_parameter;
import fs/filesystem;

readFile(filepar : string) -> Pair<string, string> {
	files = strSplit(filepar, ",");
	fold(files, Pair("", ""), \acc, file0 -> {
		file = if (strContains(file0, ".")) file0 else changeFileExt(file0, ".gringo");
		if (!fileExists(file)) {
			println(file + " not found");
		}
		text = getFileContent(file);
		
		Pair(file, peelLastLine(acc.second) + text);
	});
}

peelLastLine(text : string) -> string {
	lines = strSplit(text, "\n");
	nonempty = filter(lines, neq(""));
	strGlue(subrange(nonempty, 0, length(nonempty) - 1), "\n");
 }

main() {
	file0 = getUrlParameter("file");

	if (file0 != "") {
		grammar = gringoGrammar();
		filetext = readFile(file0);
		file = filetext.first;
		text = filetext.second;
		// println(text);

		typeOutput = getUrlParameter("types");
		typeOutfile = if (typeOutput == "1") changeFileExt(file, "") + "_types.flow" else typeOutput;

		grammar_term = parseAndCheckGringoGrammar(file, text, true, typeOutfile);
		if (grammar_term != GEpsilon()) {
			// Produce flow output with the grammar AST
			out = getUrlParameter("out");
			if (out != "") {
				outfile = if (out == "1") changeFileExt(file, "") + "_grammar.flow" else out;
				println("Saving " + outfile);
				setFileContent(
					outfile,
					blueprint("
						// Generated by 
						// gringo file=%file% out=%out%
						import text/gringo/gringo_ast;

						export {
							%name%() -> GTerm;
						}

						%name%() -> GTerm {
							%grammar%
						}
					", [
						"file", file,
						"out", out,
						"name", changeFileExt(fileNameOnly(file), "") + "Grammar",
						"grammar", toString(grammar_term),
					])
				);
				{}
			};

			// Produce fast parser code with the grammar AST
			fast = getUrlParameter("fast");
			if (fast != "") {
				name = strReplaces(changeFileExt(file, ""), ["/", "_", "\\", "_"]);
				outfile = if (fast == "1") changeFileExt(file, "") + "_grammar.fast" else fast;
				println("Saving " + outfile);
				conf = Gringo2FastConf(
					getUrlParameter("accType"),
					getUrlParameter("verb"),
					getUrlParameter("matched")
				);
				setFileContent(
					outfile,
					blueprint("
						// Generated by 
						// gringo file=%file% fast=%fast% accTYpe=%accType% verb=%verb% matched=%matched%
						import parsec;

						%funcs%
					", [
						"file", file,
						"fast", fast,
						"funcs", generateFastParserFromGringo(name, grammar_term, conf),
						"accType", getUrlParameter("accType"),
						"verb", getUrlParameter("verb"),
						"matched", getUrlParameter("matched"),
					])
				);
				{}
			};

			// Compile to flow code
			compile = getUrlParameter("compile");
			if (compile != "") {
				name = strReplaces(changeFileExt(file, ""), ["/", "_", "\\", "_"]);
				outfile = if (compile == "1") changeFileExt(file, "") + "_parser.flow" else compile;
				println("Saving " + outfile);
				setFileContent(outfile, makeDExpParser(grammar_term, file));
				{}
			}

			// Test parse
			test = getUrlParameterDef("test", "");
			testfile = getUrlParameter("testfile");
			testtext = if (test != "") test else if (testfile != "") getFileContent(testfile) else "";
			if (testtext != "") {
				tenv = doGringoParse("test", grammar_term, jsonAction, makeList(), testtext, isUrlParameterTrue("trace"), isUrlParameterTrue("grammar"));
				if (!tenv.fail && strlen(testtext) == tenv.i) {
					println("Parsed test: " + i2s(tenv.i) + " chars successfully.");
				};
				if (false) {
					println("Stack");
					iterList(tenv.output, \j -> {
						println(json2stringFormatted(j));
					});
				};
				json : Json = getJsonGringo(tenv.output);
				result = getUrlParameter("result");
				if (result == "1") {
					println(json2stringFormatted(json));
				} else if (result != "") {
					setFileContent(result, json2stringFormatted(json));
					println("Saved output to " + result);
				}
			} else if (isUrlParameterTrue("grammar")) {
				println("Fully optimized:");
				println(gterm2string(grammar_term));
			} else if (getUrlParameter("savegrammar") != "") {
				setFileContent(getUrlParameter("savegrammar"), gterm2string(grammar_term));
				{}
			}

			quit(0);
		} else {
			quit(1);
		}
	} else {
		println("
Usage:

gringo file=path/grammar.gringo <options>

    file=<file> gives the path to the Gringo file to work with.

    out=1 or <file> compiles the grammar to AST and saves it as a flow file.

    compile=1 or <file> compiles the grammar to efficient flow code.
	  prefix=<id> prefixes the generated parser name with this prefix.
    fast=1 or <file> compiles the grammar to fast code.

	types=1 or <file> types the grammar and produces flow types for it.
	  type-prefix=<id> prefixes the generated types with this prefix.
	  master-type=<id> also produce a master union type for use with parsing.

    grammar=1 prints the optimized grammar for inspection.
	savegrammar=<file> saves the optimized grammar for inspection.
	dump-prefix=1 dumps the prefix terminals per processed rule.

	profile=<rule> will count the number of times rules with the <rule> prefix are called

    test=<string> immediately tests the grammar on that string.
	testfile=<filename> tests the grammar on the contents of that file.
    result=1 prints the output of the test parse.
    result=<file> saves the output of the test parse.
	trace=1 will print debugging while parsing the test
");

		quit(0);
	}
}

