import gringo/jingo/utils;
import ds/tree;
import string;
import math/math;

export {
	getJingoBuiltins() -> Tree<string, (stack : List<Jingo<?>>) -> List<Jingo<?>>>;
}

getJingoBuiltins() -> Tree<string, (stack : List<Jingo<?>>) -> List<Jingo<?>>> {
	pairs2tree([
		// x drop ->
		Pair("drop", \stack -> {
			elm = popJStack(stack);
			elm.second;
		}),

		// x dup -> x x
		Pair("dup", \stack -> {
			elm = popJStack(stack);
			pushJStack(stack, elm.first);
		}),

		// x y dup2 -> x y x y
		Pair("dup2", \stack -> {
			elm1 = popJStack(stack);
			elm2 = popJStack(elm1.second);
			ns = pushJStack(stack, elm2.first);
			pushJStack(ns, elm1.first);
		}),

		// x y z dup3 -> x y z x y z
		Pair("dup3", \stack -> {
			elm1 = popJStack(stack);
			elm2 = popJStack(elm1.second);
			elm3 = popJStack(elm2.second);
			ns0 = pushJStack(stack, elm3.first);
			ns1 = pushJStack(ns0, elm2.first);
			pushJStack(ns1, elm1.first);
		}),

		// w x y z dup3 -> w x y z w x y z
		Pair("dup4", \stack -> {
			elm1 = popJStack(stack);
			elm2 = popJStack(elm1.second);
			elm3 = popJStack(elm2.second);
			elm4 = popJStack(elm3.second);
			ns0 = pushJStack(stack, elm4.first);
			ns1 = pushJStack(ns0, elm3.first);
			ns2 = pushJStack(ns1, elm2.first);
			pushJStack(ns2, elm1.first);
		}),

		// x y z rot -> y z x
		Pair("rot", \stack -> {
			z = popJStack(stack);
			y = popJStack(z.second);
			x = popJStack(y.second);
			ns0 = pushJStack(x.second, y.first);
			ns1 = pushJStack(ns0, z.first);
			pushJStack(ns1, x.first);
		}),


		// x print ->
		Pair("print", \stack -> {
			elm = popJStack(stack);
			println(elm);
			elm.second;
		}),

		// x y swap -> y x
		Pair("swap", \stack -> {
			y = popJStack(stack);
			x = popJStack(y.second);
			ns = pushJStack(x.second, y.first);
			pushJStack(ns, x.first);
		}),

		// x y + -> x+y
		Pair("+", \stack -> {
			y = popJStack(stack);
			x = popJStack(y.second);
			if (isJInt(x.first) && isJInt(y.first)) {
				pushJStack(x.second, JInt(getJInt(x.first) + getJInt(y.first)));
			} else if (isJString(x.first) && isJString(y.first)) {
				pushJStack(x.second, JString(getJString(x.first) + getJString(y.first)));
			} else {
				println("Can only add ints and strings");
				stack;
			}
		}),

		// x y - -> x-y
		Pair("-", \stack -> {
			y = popJStack(stack);
			x = popJStack(y.second);
			pushJStack(x.second, JInt(getJInt(x.first) - getJInt(y.first)));
		}),

		// x y * -> x*y
		Pair("*", \stack -> {
			y = popJStack(stack);
			x = popJStack(y.second);
			pushJStack(x.second, JInt(getJInt(x.first) * getJInt(y.first)));
		}),

		// x y / -> x/y
		Pair("/", \stack -> {
			y = popJStack(stack);
			x = popJStack(y.second);
			pushJStack(x.second, JInt(getJInt(x.first) / getJInt(y.first)));
		}),

		// x y % -> x%y
		Pair("%", \stack -> {
			y = popJStack(stack);
			x = popJStack(y.second);
			pushJStack(x.second, JInt(getJInt(x.first) % getJInt(y.first)));
		}),

		// <string> strlen -> <int>
		Pair("strlen", \stack -> {
			x = popJStack(stack);
			st = getJString(x.first);
			pushJStack(x.second, JInt(strlen(st)));
		}),

		// <string> <int> get -> <string>
		Pair("get", \stack -> {
			i = popJStack(stack);
			x = popJStack(i.second);
			st = getJString(x.first);
			pushJStack(x.second, JString(getCharAt(st, getJInt(i.first))));
		}),

		// <string> <int> get -> <int>
		Pair("getcode", \stack -> {
			i = popJStack(stack);
			x = popJStack(i.second);
			st = getJString(x.first);
			pushJStack(x.second, JInt(getCharCodeAt(st, getJInt(i.first))));
		}),

		// <string> s2i -> <int>
		Pair("s2i", \stack -> {
			x = popJStack(stack);
			st = getJString(x.first);
			pushJStack(x.second, JInt(s2i(st)));
		}),

		// <int> i2s -> <string>
		Pair("i2s", \stack -> {
			x = popJStack(stack);
			st = getJInt(x.first);
			pushJStack(x.second, JString(i2s(st)));
		}),

		// <string> <int> <string> substring -> <string>
		Pair("strContainsAt", \stack -> {
			s = popJStack(stack);
			i = popJStack(s.second);
			x = popJStack(i.second);
			st = getJString(x.first);
			pushJStack(x.second, JInt(b2i(strContainsAt(st, getJInt(i.first), getJString(s.first)))));
		}),

		// <string> <int> <int> substring -> <string>
		Pair("substring", \stack -> {
			l = popJStack(stack);
			i = popJStack(l.second);
			x = popJStack(i.second);
			st = getJString(x.first);
			pushJStack(x.second, JString(substring(st, getJInt(i.first), getJInt(l.first))));
		}),

	])
}
