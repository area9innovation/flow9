import gringo/jingo/jingo_ast;
import ds/list;
import ds/tuples;
import runtime;

export {
	isJInt(j : Jingo<?>) -> bool;
	isJString(j : Jingo<?>) -> bool;

	getJInt(j : Jingo<?>) -> int;
	getJString(j : Jingo<?>) -> string;
	getJArray(j : Jingo<?>) -> [Jingo<?>];

	pushJStack(a : List<Jingo<?>>, e : Jingo<?>) -> List<Jingo<?>>;
	popJStack(a : List<Jingo<?>>) -> Pair<Jingo<?>, List<Jingo<?>>>;
}

isJInt(j : Jingo<?>) -> bool {
	switch (j) {
		JInt(__): true;
		default: false;
	}
}

isJString(j : Jingo<?>) -> bool {
	switch (j) {
		JString(__): true;
		default: false;
	}
}

getJInt(j : Jingo<?>) -> int {
	switch (j) {
		JOperand(op): 0;
		JInt(val): val;
		JString(s): 0;
		JArray(vals): 0;
		JNative(value): 0;
	}
}

getJString(j : Jingo<?>) -> string {
	switch (j) {
		JOperand(op): "";
		JInt(val): "";
		JString(s): s;
		JArray(vals): "";
		JNative(value): "";
	}
}

getJArray(j : Jingo<?>) -> [Jingo<?>] {
	switch (j) {
		JOperand(op): [j];
		JInt(val): [j];
		JString(s): [j];
		JArray(vals): vals;
		JNative(value): [j];
	}
}

pushJStack(a : List<Jingo<?>>, e : Jingo<?>) -> List<Jingo<?>> {
	Cons(e, a);
}

popJStack(a : List<Jingo<?>>) -> Pair<Jingo<?>, List<Jingo<?>>> {
	switch (a) {
		EmptyList(): {
			println("Stack underflow");
			Pair(JOperand(""), a);
		}
		Cons(head, tailL): {
			Pair(head, tailL)
		}
	}
}
