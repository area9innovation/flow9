import text/gringo/gringo_ast;
import string;

export {
	// TODO: If a rule is only referenced once, inline it
	optimizeGTerm(g : GTerm) -> GTerm;
}

optimizeGTerm(g : GTerm) -> GTerm {
	switch (g) {
		GRule(id, term, body): GRule(id, optimizeGTerm(term), optimizeGTerm(body));
		GPrecedence(left, right): GPrecedence(optimizeGTerm(left), optimizeGTerm(right));
		GChoice(left, right): {
			ol = optimizeGTerm(left);
			or = optimizeGTerm(right);
			if (or == GEpsilon()) {
				GOpt(ol);
			} else {
				GChoice(ol, or);
			}
		}
		GSeq(left, right): {
			ol = optimizeGTerm(left);
			or = optimizeGTerm(right);
			if (ol == GEpsilon()) {
				or
			} else if (ol == GEpsilon()) {
				or
			} else if (isGString(ol) && isGString(or)) {
				GString(getGString(ol) + getGString(or));
			} else 
				GSeq(ol, or);
		}
		GStar(term): {
			GStar(optimizeGTerm(term));
		}
		GPlus(term): GPlus(optimizeGTerm(term));
		GOpt(term): {
			oterm = optimizeGTerm(term);
			switch (oterm) {
				GOpt(__): oterm;
				GStar(__): oterm;
				default: GOpt(oterm);
			}
		}
		GNegate(term): GNegate(optimizeGTerm(term));
		GError(term): GError(optimizeGTerm(term));
		GLower(term): GLower(optimizeGTerm(term));
		GUnquote(term): GUnquote(optimizeGTerm(term));
		GString(text): if (text == "") GEpsilon() else g;
		GRange(lower, upper): if (lower == upper) GString(fromCharCode(lower)) else g;
		GVar(id): g;
		GEpsilon(): g;
	}
}

isGString(g : GTerm) -> bool {
	switch (g) {
		GString(__): true;
		default: false;
	}
}

getGString(g : GTerm) -> string {
	switch (g) {
		GString(t): t;
		default: "";
	}
}
