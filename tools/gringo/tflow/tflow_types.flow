// Automatically generated from Gringo grammar
import ds/list;

export {
	// This is a monster type used when parsing
	TypedFlowAst ::= TypedFlowAstList, TypedFlowAstBool, TypedFlowAstInt, TypedFlowAstDouble, TypedFlowAstString, TfExp, TfOpttype, TfType, TfAdd, TfAnd, TfArg, TfArray, TfBasictype, TfBool, TfCall, TfDiv, TfEq, TfFntype, TfGe, TfGt, TfIf, TfIfelse, TfIndex, TfInt, TfLambda, TfLe, TfLet, TfLt, TfMod, TfMul, TfNe, TfNegate, TfNot, TfOr, TfSequence, TfString, TfSub, TfTuple, TfTupletype, TfTypeannot, TfVar;

	TypedFlowAstList(value : List<TypedFlowAst>);
	TypedFlowAstBool(value : bool);
	TypedFlowAstInt(value : int);
	TypedFlowAstDouble(value : double);
	TypedFlowAstString(value : string);

	TfExp ::= TfAdd, TfAnd, TfArray, TfBool, TfCall, TfDiv, TfEq, TfGe, TfGt, TfIf, TfIfelse, TfIndex, TfInt, TfLambda, TfLe, TfLet, TfLt, TfMod, TfMul, TfNe, TfNegate, TfNot, TfOr, TfSequence, TfString, TfSub, TfTuple, TfTypeannot, TfVar;
	TfOpttype ::= TfBasictype, TfType;
	TfType ::= TfBasictype, TfFntype, TfTupletype;
	TfAdd(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfAnd(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfArg(id : string, opttype : TfOpttype, eclass : int);
	TfArray(exps : [TfExp], eclass : int);
	TfBasictype(s : string, eclass : int);
	TfBool(b : bool, eclass : int);
	TfCall(exp : TfExp, exps : [TfExp], eclass : int);
	TfDiv(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfEq(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfFntype(types : [TfType], type : TfType, eclass : int);
	TfGe(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfGt(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfIf(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfIfelse(exp1 : TfExp, exp2 : TfExp, exp3 : TfExp, eclass : int);
	TfIndex(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfInt(i : int, eclass : int);
	TfLambda(args : [TfArg], exp : TfExp, eclass : int);
	TfLe(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfLet(id : string, opttype : TfOpttype, exp : TfExp, sequence : TfSequence, eclass : int);
	TfLt(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfMod(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfMul(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfNe(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfNegate(exp : TfExp, eclass : int);
	TfNot(exp : TfExp, eclass : int);
	TfOr(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfSequence(expsemis : [TfExp], eclass : int);
	TfString(s : string, eclass : int);
	TfSub(exp1 : TfExp, exp2 : TfExp, eclass : int);
	TfTuple(exps : [TfExp], eclass : int);
	TfTupletype(types : [TfType], eclass : int);
	TfTypeannot(exp : TfExp, type : TfType, eclass : int);
	TfVar(id : string, eclass : int);
}
