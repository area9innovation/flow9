tflow = ws exp;

exp = 
	exp ("||" ws exp $"or_2")*
	|> exp ("&&" ws exp $"and_2")*
	|> exp ("==" ws exp $"eq_2" | "!=" ws exp $"ne_2")*
	|> exp ("<=" ws exp $"le_2" | "<" ws exp $"lt_2" | ">=" ws exp $"ge_2" | ">" ws exp $"gt_2")*
	|> exp <("+" ws exp $"add_2" | "-" ws exp $"sub_2")*
	|> exp ("*" ws exp $"mul_2" | "/" ws exp $"div_2" | "%" ws exp $"mod_2")*
	|> exp (":" ws type $"typeannot_2")?
	|> exp ("(" ws exps ")" ws $"call_2")+
	|> exp ("[" ws exp "]" ws $"index_2")+
	|> (
		'-' ws exp $"negate_1"
		| '!' ws exp $"not_1"
	)
	|> (
		"if" !firstid ws "(" ws exp ")" ws exp "else" ws exp $"ifelse_3"
		| "if" !firstid ws "(" ws exp ")" ws exp $"if_2"
		| backslash ws args "->" ws exp $"lambda_2"
		| id opttype "=" ws exp ";" ws expsemis $"sequence_1" $"let_4"
		| "{" ws expsemis "}" ws $"sequence_1"
		| "(" ws exp ")" ws
		| '(' ws $"nil" exp "," ws $"cons" ')' ws $"tuple_1"
		| '(' ws exps ')' ws $"tuple_1"
		| "[" ws exps "]" ws $"array_1"
		| $int ws $"s2i" $"int_1"
		| $('"' stringchar* '"') ws $"unescape" $"string_1"
		| "true" ws $"true" $"bool_1"
		| "false" ws $"false" $"bool_1"
		| id $"var_1"
	)
	;

expsemis = $"nil" exp $"cons" (";" ws exp $"cons")* | $"nil";

exps = $"nil" exp $"cons" ("," ws exp $"cons")* | $"nil";

args = $"nil" id opttype $"arg_2" $"cons" ("," ws id opttype $"arg_2" $"cons")* | $"nil";

opttype = ":" ws type | $$"auto" $"basictype_1";

type = $("bool" ws | "int" ws | "string" ws | "auto" ws) $"basictype_1"
	| "(" ws types ")" ws "->" ws type $"fntype_2"
	| "(" ws types ")" ws $"tupletype_1"; // Tuples

types = $"nil" type $"cons" ("," ws type $"cons")* | $"nil";

id = $(firstid restid*) ws;

firstid = 'a' - 'z' | 'A' - 'Z' | '_';
restid = firstid | '0'-'9';

stringchar = !'"' anychar;
anychar = '0x0000'-'0xffff';

int = '0'-'9'+;

ws = s*;
s = cs+;
cs = " " | "\t" | "\n" | "//" (!"\n" anychar)* "\n" | "/*" (!"*/" anychar)* "*/" | "\r";
backslash = '\';

tflow
