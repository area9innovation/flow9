// Produced by  flowcpp gringo/gringo.flow -- file=tools/gringo/tflow/tflow.gringo compile=1
import text/gringo/dcode_lib;
import string;

export {
	tflow_parse_tflow(acc : DParseAcc<?>) -> bool;
}


tflow_parse_tflow(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if ((tflow_parse_ws(acc) && tflow_parse_exp(acc))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp1(acc)) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if ((matchString(acc, "||") && ((tflow_parse_ws(acc) && tflow_parse_exp(acc))))) {
							{
								addVerbatim(acc, "or_2");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp1(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp2(acc)) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if ((matchString(acc, "&&") && ((tflow_parse_ws(acc) && tflow_parse_exp1(acc))))) {
							{
								addVerbatim(acc, "and_2");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp2(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp3(acc)) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "==") && ((tflow_parse_ws(acc) && tflow_parse_exp2(acc))))) {
							{
								addVerbatim(acc, "eq_2");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if ((matchString(acc, "!=") && ((tflow_parse_ws(acc) && tflow_parse_exp2(acc))))) {
									{
										addVerbatim(acc, "ne_2");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp3(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp4(acc)) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "<=") && ((tflow_parse_ws(acc) && tflow_parse_exp3(acc))))) {
							{
								addVerbatim(acc, "le_2");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if ((matchString(acc, "<") && ((tflow_parse_ws(acc) && tflow_parse_exp3(acc))))) {
									{
										addVerbatim(acc, "lt_2");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if (if ((matchString(acc, ">=") && ((tflow_parse_ws(acc) && tflow_parse_exp3(acc))))) {
											{
												addVerbatim(acc, "ge_2");
												discardDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											{
												pushDCheckpoint(acc);
												if (if ((matchString(acc, ">") && ((tflow_parse_ws(acc) && tflow_parse_exp3(acc))))) {
													{
														addVerbatim(acc, "gt_2");
														discardDCheckpoint(acc)
													}
												} else {
													restoreDCheckpoint(acc)
												}) {
													discardDCheckpoint(acc)
												} else {
													restoreDCheckpoint(acc)
												}
											}
										}
									}
								}
							}
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp4(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp5(acc)) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "+") && ((tflow_parse_ws(acc) && tflow_parse_exp5(acc))))) {
							{
								addVerbatim(acc, "add_2");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if ((matchString(acc, "-") && ((tflow_parse_ws(acc) && tflow_parse_exp5(acc))))) {
									{
										addVerbatim(acc, "sub_2");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp5(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp6(acc)) {
			{
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "*") && ((tflow_parse_ws(acc) && tflow_parse_exp5(acc))))) {
							{
								addVerbatim(acc, "mul_2");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if ((matchString(acc, "/") && ((tflow_parse_ws(acc) && tflow_parse_exp5(acc))))) {
									{
										addVerbatim(acc, "div_2");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if (if ((matchString(acc, "%") && ((tflow_parse_ws(acc) && tflow_parse_exp5(acc))))) {
											{
												addVerbatim(acc, "mod_2");
												discardDCheckpoint(acc)
											}
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									}
								}
							}
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp6(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp7(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, ":") && ((tflow_parse_ws(acc) && tflow_parse_type(acc))))) {
					{
						addVerbatim(acc, "typeannot_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp7(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp8(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "(") && ((tflow_parse_ws(acc) && ((tflow_parse_exps(acc) && ((matchString(acc, ")") && tflow_parse_ws(acc))))))))) {
					{
						addVerbatim(acc, "call_2");
						parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if ((matchString(acc, "(") && ((tflow_parse_ws(acc) && ((tflow_parse_exps(acc) && ((matchString(acc, ")") && tflow_parse_ws(acc))))))))) {
									{
										addVerbatim(acc, "call_2");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						});
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp8(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_exp9(acc)) {
			{
				pushDCheckpoint(acc);
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "[") && ((tflow_parse_ws(acc) && ((tflow_parse_exp(acc) && ((matchString(acc, "]") && tflow_parse_ws(acc))))))))) {
					{
						addVerbatim(acc, "index_2");
						parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								if ((matchString(acc, "[") && ((tflow_parse_ws(acc) && ((tflow_parse_exp(acc) && ((matchString(acc, "]") && tflow_parse_ws(acc))))))))) {
									{
										addVerbatim(acc, "index_2");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}
							}
						});
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				};
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_exp9(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if ((matchString(acc, "-") && ((tflow_parse_ws(acc) && tflow_parse_exp9(acc))))) {
			{
				addVerbatim(acc, "negate_1");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if ((if ((matchString(acc, "!") && ((tflow_parse_ws(acc) && tflow_parse_exp9(acc))))) {
					{
						addVerbatim(acc, "not_1");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) || tflow_parse_exp10(acc)) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}
	}
}

tflow_parse_exp10(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (matchString(acc, "if")) {
			{
				pushDCheckpoint(acc);
				if (((if (tflow_parse_firstid(acc)) {
					restoreDCheckpoint(acc)
				} else {
					{
						restoreDCheckpoint(acc);
						true
					}
				}) && ((tflow_parse_ws(acc) && ((matchString(acc, "(") && ((tflow_parse_ws(acc) && ((tflow_parse_exp(acc) && ((matchString(acc, ")") && ((tflow_parse_ws(acc) && tflow_parse_exp(acc))))))))))))))) {
					{
						pushDCheckpoint(acc);
						pushDCheckpoint(acc);
						if (if (if ((matchString(acc, "else") && ((tflow_parse_ws(acc) && tflow_parse_exp(acc))))) {
							{
								addVerbatim(acc, "ifelse_3");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								addVerbatim(acc, "if_2");
								discardDCheckpoint(acc)
							}
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if ((tflow_parse_backslash(acc) && ((tflow_parse_ws(acc) && ((tflow_parse_args(acc) && ((matchString(acc, "->") && ((tflow_parse_ws(acc) && tflow_parse_exp(acc))))))))))) {
					{
						addVerbatim(acc, "lambda_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if ((tflow_parse_id(acc) && ((tflow_parse_opttype(acc) && ((matchString(acc, "=") && ((tflow_parse_ws(acc) && ((tflow_parse_exp(acc) && ((matchString(acc, ";") && ((tflow_parse_ws(acc) && tflow_parse_expsemis(acc))))))))))))))) {
							{
								addVerbatim(acc, "sequence_1");
								addVerbatim(acc, "let_4");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if ((matchString(acc, "{") && ((tflow_parse_ws(acc) && ((tflow_parse_expsemis(acc) && ((matchString(acc, "}") && tflow_parse_ws(acc))))))))) {
									{
										addVerbatim(acc, "sequence_1");
										discardDCheckpoint(acc)
									}
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									{
										pushDCheckpoint(acc);
										if (if ((matchString(acc, "(") && ((tflow_parse_ws(acc) && ((tflow_parse_exp(acc) && ((matchString(acc, ")") && tflow_parse_ws(acc))))))))) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}) {
											discardDCheckpoint(acc)
										} else {
											{
												pushDCheckpoint(acc);
												if (if ((matchString(acc, "(") && tflow_parse_ws(acc))) {
													{
														addVerbatim(acc, "nil");
														if ((tflow_parse_exp(acc) && ((matchString(acc, ",") && tflow_parse_ws(acc))))) {
															{
																addVerbatim(acc, "cons");
																if ((matchString(acc, ")") && tflow_parse_ws(acc))) {
																	{
																		addVerbatim(acc, "tuple_1");
																		discardDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}
															}
														} else {
															restoreDCheckpoint(acc)
														}
													}
												} else {
													restoreDCheckpoint(acc)
												}) {
													discardDCheckpoint(acc)
												} else {
													{
														pushDCheckpoint(acc);
														if (if ((matchString(acc, "(") && ((tflow_parse_ws(acc) && ((tflow_parse_exps(acc) && ((matchString(acc, ")") && tflow_parse_ws(acc))))))))) {
															{
																addVerbatim(acc, "tuple_1");
																discardDCheckpoint(acc)
															}
														} else {
															restoreDCheckpoint(acc)
														}) {
															discardDCheckpoint(acc)
														} else {
															{
																pushDCheckpoint(acc);
																if (if ((matchString(acc, "[") && ((tflow_parse_ws(acc) && ((tflow_parse_exps(acc) && ((matchString(acc, "]") && tflow_parse_ws(acc))))))))) {
																	{
																		addVerbatim(acc, "array_1");
																		discardDCheckpoint(acc)
																	}
																} else {
																	restoreDCheckpoint(acc)
																}) {
																	discardDCheckpoint(acc)
																} else {
																	{
																		pushDCheckpoint(acc);
																		acc.starti ::= acc.i;
																		if (if (((if (tflow_parse_int(acc)) {
																			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
																		} else {
																			false
																		}) && tflow_parse_ws(acc))) {
																			{
																				addVerbatim(acc, "s2i");
																				addVerbatim(acc, "int_1");
																				discardDCheckpoint(acc)
																			}
																		} else {
																			restoreDCheckpoint(acc)
																		}) {
																			discardDCheckpoint(acc)
																		} else {
																			{
																				pushDCheckpoint(acc);
																				acc.starti ::= acc.i;
																				pushDCheckpoint(acc);
																				if (if (((if (if (matchString(acc, "\"")) {
																					{
																						parseStar(acc, \ -> {
																							tflow_parse_stringchar(acc)
																						});
																						if (matchString(acc, "\"")) {
																							discardDCheckpoint(acc)
																						} else {
																							restoreDCheckpoint(acc)
																						}
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}) {
																					addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
																				} else {
																					false
																				}) && tflow_parse_ws(acc))) {
																					{
																						addVerbatim(acc, "unescape");
																						addVerbatim(acc, "string_1");
																						discardDCheckpoint(acc)
																					}
																				} else {
																					restoreDCheckpoint(acc)
																				}) {
																					discardDCheckpoint(acc)
																				} else {
																					{
																						pushDCheckpoint(acc);
																						if (if ((matchString(acc, "true") && tflow_parse_ws(acc))) {
																							{
																								addVerbatim(acc, "true");
																								addVerbatim(acc, "bool_1");
																								discardDCheckpoint(acc)
																							}
																						} else {
																							restoreDCheckpoint(acc)
																						}) {
																							discardDCheckpoint(acc)
																						} else {
																							{
																								pushDCheckpoint(acc);
																								if (if ((matchString(acc, "false") && tflow_parse_ws(acc))) {
																									{
																										addVerbatim(acc, "false");
																										addVerbatim(acc, "bool_1");
																										discardDCheckpoint(acc)
																									}
																								} else {
																									restoreDCheckpoint(acc)
																								}) {
																									discardDCheckpoint(acc)
																								} else {
																									{
																										pushDCheckpoint(acc);
																										if (if (tflow_parse_id(acc)) {
																											{
																												addVerbatim(acc, "var_1");
																												discardDCheckpoint(acc)
																											}
																										} else {
																											restoreDCheckpoint(acc)
																										}) {
																											discardDCheckpoint(acc)
																										} else {
																											restoreDCheckpoint(acc)
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

tflow_parse_expsemis(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		addVerbatim(acc, "nil");
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (tflow_parse_exp(acc)) {
			{
				addVerbatim(acc, "cons");
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if ((matchString(acc, ";") && ((tflow_parse_ws(acc) && tflow_parse_exp(acc))))) {
							{
								addVerbatim(acc, "cons");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		};
		discardDCheckpoint(acc)
	}
}

tflow_parse_exps(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		addVerbatim(acc, "nil");
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (tflow_parse_exp(acc)) {
			{
				addVerbatim(acc, "cons");
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if ((matchString(acc, ",") && ((tflow_parse_ws(acc) && tflow_parse_exp(acc))))) {
							{
								addVerbatim(acc, "cons");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		};
		discardDCheckpoint(acc)
	}
}

tflow_parse_args(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		addVerbatim(acc, "nil");
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if ((tflow_parse_id(acc) && tflow_parse_opttype(acc))) {
			{
				addVerbatim(acc, "arg_2");
				addVerbatim(acc, "cons");
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if ((matchString(acc, ",") && ((tflow_parse_ws(acc) && ((tflow_parse_id(acc) && tflow_parse_opttype(acc))))))) {
							{
								addVerbatim(acc, "arg_2");
								addVerbatim(acc, "cons");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		};
		discardDCheckpoint(acc)
	}
}

tflow_parse_opttype(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if ((matchString(acc, ":") && ((tflow_parse_ws(acc) && tflow_parse_type(acc))))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				addMatched(acc, "auto");
				addVerbatim(acc, "basictype_1");
				if (discardDCheckpoint(acc)) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}
			}
		}
	}
}

tflow_parse_type(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		acc.starti ::= acc.i;
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (if (if (if ((matchString(acc, "bool") && tflow_parse_ws(acc))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "int") && tflow_parse_ws(acc))) {
					discardDCheckpoint(acc)
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "string") && tflow_parse_ws(acc))) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							{
								pushDCheckpoint(acc);
								if (if ((matchString(acc, "auto") && tflow_parse_ws(acc))) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						}
					}
				}
			}
		}) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) {
			{
				addVerbatim(acc, "basictype_1");
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if ((matchString(acc, "(") && ((tflow_parse_ws(acc) && ((tflow_parse_types(acc) && ((matchString(acc, ")") && ((tflow_parse_ws(acc) && ((matchString(acc, "->") && ((tflow_parse_ws(acc) && tflow_parse_type(acc))))))))))))))) {
					{
						addVerbatim(acc, "fntype_2");
						discardDCheckpoint(acc)
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if (if ((matchString(acc, "(") && ((tflow_parse_ws(acc) && ((tflow_parse_types(acc) && ((matchString(acc, ")") && tflow_parse_ws(acc))))))))) {
							{
								addVerbatim(acc, "tupletype_1");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}
			}
		}
	}
}

tflow_parse_types(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		addVerbatim(acc, "nil");
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (if (tflow_parse_type(acc)) {
			{
				addVerbatim(acc, "cons");
				parseStar(acc, \ -> {
					{
						pushDCheckpoint(acc);
						if ((matchString(acc, ",") && ((tflow_parse_ws(acc) && tflow_parse_type(acc))))) {
							{
								addVerbatim(acc, "cons");
								discardDCheckpoint(acc)
							}
						} else {
							restoreDCheckpoint(acc)
						}
					}
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		};
		discardDCheckpoint(acc)
	}
}

tflow_parse_id(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		acc.starti ::= acc.i;
		pushDCheckpoint(acc);
		if (((if (if (tflow_parse_firstid(acc)) {
			{
				parseStar(acc, \ -> {
					tflow_parse_restid(acc)
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}) {
			addMatched(acc, substring(acc.input, acc.starti, acc.i - acc.starti))
		} else {
			false
		}) && tflow_parse_ws(acc))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_firstid(acc : DParseAcc<?>) -> bool {
	matchRange(acc, 97, 122) || (matchRange(acc, 65, 90) || matchString(acc, "_"))
}

tflow_parse_restid(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_firstid(acc) || matchRange(acc, 48, 57)) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_stringchar(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		pushDCheckpoint(acc);
		if (((if (matchString(acc, "\"")) {
			restoreDCheckpoint(acc)
		} else {
			{
				restoreDCheckpoint(acc);
				true
			}
		}) && tflow_parse_anychar(acc))) {
			discardDCheckpoint(acc)
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_anychar(acc : DParseAcc<?>) -> bool {
	matchRange(acc, 0, 65535)
}

tflow_parse_int(acc : DParseAcc<?>) -> bool {
	if (matchRange(acc, 48, 57)) {
		{
			parseStar(acc, \ -> {
				matchRange(acc, 48, 57)
			});
			true
		}
	} else {
		false
	}
}

tflow_parse_ws(acc : DParseAcc<?>) -> bool {
	parseStar(acc, \ -> {
		tflow_parse_s(acc)
	})
}

tflow_parse_s(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (tflow_parse_cs(acc)) {
			{
				parseStar(acc, \ -> {
					tflow_parse_cs(acc)
				});
				discardDCheckpoint(acc)
			}
		} else {
			restoreDCheckpoint(acc)
		}
	}
}

tflow_parse_cs(acc : DParseAcc<?>) -> bool {
	{
		pushDCheckpoint(acc);
		if (matchString(acc, " ") || (matchString(acc, "\t") || matchString(acc, "\n"))) {
			discardDCheckpoint(acc)
		} else {
			{
				pushDCheckpoint(acc);
				if (if (matchString(acc, "//")) {
					{
						parseStar(acc, \ -> {
							{
								pushDCheckpoint(acc);
								pushDCheckpoint(acc);
								if (((if (matchString(acc, "\n")) {
									restoreDCheckpoint(acc)
								} else {
									{
										restoreDCheckpoint(acc);
										true
									}
								}) && tflow_parse_anychar(acc))) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						});
						if (matchString(acc, "\n")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				} else {
					restoreDCheckpoint(acc)
				}) {
					discardDCheckpoint(acc)
				} else {
					{
						pushDCheckpoint(acc);
						if ((if (matchString(acc, "/*")) {
							{
								parseStar(acc, \ -> {
									{
										pushDCheckpoint(acc);
										pushDCheckpoint(acc);
										if (((if (matchString(acc, "*/")) {
											restoreDCheckpoint(acc)
										} else {
											{
												restoreDCheckpoint(acc);
												true
											}
										}) && tflow_parse_anychar(acc))) {
											discardDCheckpoint(acc)
										} else {
											restoreDCheckpoint(acc)
										}
									}
								});
								if (matchString(acc, "*/")) {
									discardDCheckpoint(acc)
								} else {
									restoreDCheckpoint(acc)
								}
							}
						} else {
							restoreDCheckpoint(acc)
						}) || matchString(acc, "\u000d")) {
							discardDCheckpoint(acc)
						} else {
							restoreDCheckpoint(acc)
						}
					}
				}
			}
		}
	}
}

tflow_parse_backslash(acc : DParseAcc<?>) -> bool {
	matchString(acc, "\\")
}





























