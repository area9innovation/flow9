import tools/gringo/tflow/tflow_types;
import runtime;
import tools/dsl/dsl_util;

export {
	typedFlowAst2DslAst(w : TypedFlowAst) -> DslAst;
	dslAst2TypedFlowAst(d : DslAst) -> TypedFlowAst;
	dslAst2TfExp(d : DslAst) -> TfExp;
	dslAst2TfOpttype(d : DslAst) -> TfOpttype;
	dslAst2TfType(d : DslAst) -> TfType;
}

typedFlowAst2DslAst(wal : TypedFlowAst) -> DslAst {
	switch (wal) {
		TypedFlowAstBool(value): DslBool(value);
		TypedFlowAstInt(value): DslInt(value);
		TypedFlowAstDouble(value): DslDouble(value);
		TypedFlowAstString(value): DslString(value);
		TypedFlowAstList(value): DslList(mapList(value, typedFlowAst2DslAst));
		TfAdd(a0, a1, a2): DslNode("add", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfAnd(a0, a1, a2): DslNode("and", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfArg(a0, a1, a2): DslNode("arg", [DslString(a0), typedFlowAst2DslAst(a1)], 0);
		TfArray(a0, a1): DslNode("array", [DslList(fold(a0, makeList(), \acc, e -> Cons(typedFlowAst2DslAst(e), acc)))], 0);
		TfBasictype(a0, a1): DslNode("basictype", [DslString(a0)], 0);
		TfBool(a0, a1): DslNode("bool", [DslBool(a0)], 0);
		TfCall(a0, a1, a2): DslNode("call", [typedFlowAst2DslAst(a0), DslList(fold(a1, makeList(), \acc, e -> Cons(typedFlowAst2DslAst(e), acc)))], 0);
		TfDiv(a0, a1, a2): DslNode("div", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfEq(a0, a1, a2): DslNode("eq", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfFntype(a0, a1, a2): DslNode("fntype", [DslList(fold(a0, makeList(), \acc, e -> Cons(typedFlowAst2DslAst(e), acc))), typedFlowAst2DslAst(a1)], 0);
		TfGe(a0, a1, a2): DslNode("ge", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfGt(a0, a1, a2): DslNode("gt", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfIf(a0, a1, a2): DslNode("if", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfIfelse(a0, a1, a2, a3): DslNode("ifelse", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1), typedFlowAst2DslAst(a2)], 0);
		TfIndex(a0, a1, a2): DslNode("index", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfInt(a0, a1): DslNode("int", [DslInt(a0)], 0);
		TfLambda(a0, a1, a2): DslNode("lambda", [DslList(fold(a0, makeList(), \acc, e -> Cons(typedFlowAst2DslAst(e), acc))), typedFlowAst2DslAst(a1)], 0);
		TfLe(a0, a1, a2): DslNode("le", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfLet(a0, a1, a2, a3, a4): DslNode("let", [DslString(a0), typedFlowAst2DslAst(a1), typedFlowAst2DslAst(a2), typedFlowAst2DslAst(a3)], 0);
		TfLt(a0, a1, a2): DslNode("lt", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfMod(a0, a1, a2): DslNode("mod", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfMul(a0, a1, a2): DslNode("mul", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfNe(a0, a1, a2): DslNode("ne", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfNegate(a0, a1): DslNode("negate", [typedFlowAst2DslAst(a0)], 0);
		TfNot(a0, a1): DslNode("not", [typedFlowAst2DslAst(a0)], 0);
		TfOr(a0, a1, a2): DslNode("or", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfSequence(a0, a1): DslNode("sequence", [DslList(fold(a0, makeList(), \acc, e -> Cons(typedFlowAst2DslAst(e), acc)))], 0);
		TfString(a0, a1): DslNode("string", [DslString(a0)], 0);
		TfSub(a0, a1, a2): DslNode("sub", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfTuple(a0, a1): DslNode("tuple", [DslList(fold(a0, makeList(), \acc, e -> Cons(typedFlowAst2DslAst(e), acc)))], 0);
		TfTupletype(a0, a1): DslNode("tupletype", [DslList(fold(a0, makeList(), \acc, e -> Cons(typedFlowAst2DslAst(e), acc)))], 0);
		TfTypeannot(a0, a1, a2): DslNode("typeannot", [typedFlowAst2DslAst(a0), typedFlowAst2DslAst(a1)], 0);
		TfVar(a0, a1): DslNode("var", [DslString(a0)], 0);

	}
}

dslAst2TypedFlowAst(d : DslAst) -> TypedFlowAst {
	switch (d) {
		DslBool(value): TypedFlowAstBool(value);
		DslInt(value): TypedFlowAstInt(value);
		DslDouble(value): TypedFlowAstDouble(value);
		DslString(value): TypedFlowAstString(value);
		DslList(value): TypedFlowAstList(mapList(value, dslAst2TypedFlowAst));
		DslNode(name, args, pos): {
			if (name == "add") {
				TfAdd(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "and") {
				TfAnd(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "arg") {
				TfArg(getDslString(args[0]), dslAst2TfOpttype(args[1]), 0)
			} else if (name == "array") {
				TfArray((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
			} else if (name == "basictype") {
				TfBasictype(getDslString(args[0]), 0)
			} else if (name == "bool") {
				TfBool(getDslBool(args[0]), 0)
			} else if (name == "call") {
				TfCall(dslAst2TfExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[1]), 0)
			} else if (name == "div") {
				TfDiv(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "eq") {
				TfEq(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "fntype") {
				TfFntype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), dslAst2TfType(args[1]), 0)
			} else if (name == "ge") {
				TfGe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "gt") {
				TfGt(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "if") {
				TfIf(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "ifelse") {
				TfIfelse(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), dslAst2TfExp(args[2]), 0)
			} else if (name == "index") {
				TfIndex(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "int") {
				TfInt(getDslInt(args[0]), 0)
			} else if (name == "lambda") {
				TfLambda((\t -> map(list2array(getDslList(t)), dslAst2TfArg))(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "le") {
				TfLe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "let") {
				TfLet(getDslString(args[0]), dslAst2TfOpttype(args[1]), dslAst2TfExp(args[2]), dslAst2TfSequence(args[3]), 0)
			} else if (name == "lt") {
				TfLt(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "mod") {
				TfMod(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "mul") {
				TfMul(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "ne") {
				TfNe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "negate") {
				TfNegate(dslAst2TfExp(args[0]), 0)
			} else if (name == "not") {
				TfNot(dslAst2TfExp(args[0]), 0)
			} else if (name == "or") {
				TfOr(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "sequence") {
				TfSequence((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
			} else if (name == "string") {
				TfString(getDslString(args[0]), 0)
			} else if (name == "sub") {
				TfSub(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
			} else if (name == "tuple") {
				TfTuple((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
			} else if (name == "tupletype") {
				TfTupletype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), 0)
			} else if (name == "typeannot") {
				TfTypeannot(dslAst2TfExp(args[0]), dslAst2TfType(args[1]), 0)
			} else if (name == "var") {
				TfVar(getDslString(args[0]), 0)
			} else { println("ERROR: Could not convert " + name + " in TypedFlowAst"); TypedFlowAstBool(false) }

		}
	}
}

dslAst2TfExp(d : DslAst) -> TfExp {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "add") {
		TfAdd(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "and") {
		TfAnd(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "array") {
		TfArray((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
	} else if (name == "bool") {
		TfBool(getDslBool(args[0]), 0)
	} else if (name == "call") {
		TfCall(dslAst2TfExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[1]), 0)
	} else if (name == "div") {
		TfDiv(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "eq") {
		TfEq(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "ge") {
		TfGe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "gt") {
		TfGt(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "if") {
		TfIf(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "ifelse") {
		TfIfelse(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), dslAst2TfExp(args[2]), 0)
	} else if (name == "index") {
		TfIndex(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "int") {
		TfInt(getDslInt(args[0]), 0)
	} else if (name == "lambda") {
		TfLambda((\t -> map(list2array(getDslList(t)), dslAst2TfArg))(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "le") {
		TfLe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "let") {
		TfLet(getDslString(args[0]), dslAst2TfOpttype(args[1]), dslAst2TfExp(args[2]), dslAst2TfSequence(args[3]), 0)
	} else if (name == "lt") {
		TfLt(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "mod") {
		TfMod(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "mul") {
		TfMul(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "ne") {
		TfNe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "negate") {
		TfNegate(dslAst2TfExp(args[0]), 0)
	} else if (name == "not") {
		TfNot(dslAst2TfExp(args[0]), 0)
	} else if (name == "or") {
		TfOr(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "sequence") {
		TfSequence((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
	} else if (name == "string") {
		TfString(getDslString(args[0]), 0)
	} else if (name == "sub") {
		TfSub(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
	} else if (name == "tuple") {
		TfTuple((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
	} else if (name == "typeannot") {
		TfTypeannot(dslAst2TfExp(args[0]), dslAst2TfType(args[1]), 0)
	} else if (name == "var") {
		TfVar(getDslString(args[0]), 0)
	} else { println("ERROR: Could not convert " + name + " in TfExp"); TfAdd(TfArray([], 0), TfArray([], 0), 0) }

}
dslAst2TfOpttype(d : DslAst) -> TfOpttype {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "basictype") {
		TfBasictype(getDslString(args[0]), 0)
	} else if (name == "fntype") {
		TfFntype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), dslAst2TfType(args[1]), 0)
	} else if (name == "tupletype") {
		TfTupletype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), 0)
	} else { println("ERROR: Could not convert " + name + " in TfOpttype"); TfTupletype([], 0) }

}
dslAst2TfType(d : DslAst) -> TfType {
	node = getDslNode(d);
	name = node.name;
	args = node.args;
	if (name == "basictype") {
		TfBasictype(getDslString(args[0]), 0)
	} else if (name == "fntype") {
		TfFntype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), dslAst2TfType(args[1]), 0)
	} else if (name == "tupletype") {
		TfTupletype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), 0)
	} else { println("ERROR: Could not convert " + name + " in TfType"); TfFntype([], TfTupletype([], 0), 0) }

}
dslAst2TfAdd(d : DslAst) -> TfAdd {
	node = getDslNode(d);
	args = node.args;
	TfAdd(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfAnd(d : DslAst) -> TfAnd {
	node = getDslNode(d);
	args = node.args;
	TfAnd(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfArg(d : DslAst) -> TfArg {
	node = getDslNode(d);
	args = node.args;
	TfArg(getDslString(args[0]), dslAst2TfOpttype(args[1]), 0)
}
dslAst2TfArray(d : DslAst) -> TfArray {
	node = getDslNode(d);
	args = node.args;
	TfArray((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
}
dslAst2TfBasictype(d : DslAst) -> TfBasictype {
	node = getDslNode(d);
	args = node.args;
	TfBasictype(getDslString(args[0]), 0)
}
dslAst2TfBool(d : DslAst) -> TfBool {
	node = getDslNode(d);
	args = node.args;
	TfBool(getDslBool(args[0]), 0)
}
dslAst2TfCall(d : DslAst) -> TfCall {
	node = getDslNode(d);
	args = node.args;
	TfCall(dslAst2TfExp(args[0]), (\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[1]), 0)
}
dslAst2TfDiv(d : DslAst) -> TfDiv {
	node = getDslNode(d);
	args = node.args;
	TfDiv(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfEq(d : DslAst) -> TfEq {
	node = getDslNode(d);
	args = node.args;
	TfEq(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfFntype(d : DslAst) -> TfFntype {
	node = getDslNode(d);
	args = node.args;
	TfFntype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), dslAst2TfType(args[1]), 0)
}
dslAst2TfGe(d : DslAst) -> TfGe {
	node = getDslNode(d);
	args = node.args;
	TfGe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfGt(d : DslAst) -> TfGt {
	node = getDslNode(d);
	args = node.args;
	TfGt(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfIf(d : DslAst) -> TfIf {
	node = getDslNode(d);
	args = node.args;
	TfIf(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfIfelse(d : DslAst) -> TfIfelse {
	node = getDslNode(d);
	args = node.args;
	TfIfelse(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), dslAst2TfExp(args[2]), 0)
}
dslAst2TfIndex(d : DslAst) -> TfIndex {
	node = getDslNode(d);
	args = node.args;
	TfIndex(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfInt(d : DslAst) -> TfInt {
	node = getDslNode(d);
	args = node.args;
	TfInt(getDslInt(args[0]), 0)
}
dslAst2TfLambda(d : DslAst) -> TfLambda {
	node = getDslNode(d);
	args = node.args;
	TfLambda((\t -> map(list2array(getDslList(t)), dslAst2TfArg))(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfLe(d : DslAst) -> TfLe {
	node = getDslNode(d);
	args = node.args;
	TfLe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfLet(d : DslAst) -> TfLet {
	node = getDslNode(d);
	args = node.args;
	TfLet(getDslString(args[0]), dslAst2TfOpttype(args[1]), dslAst2TfExp(args[2]), dslAst2TfSequence(args[3]), 0)
}
dslAst2TfLt(d : DslAst) -> TfLt {
	node = getDslNode(d);
	args = node.args;
	TfLt(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfMod(d : DslAst) -> TfMod {
	node = getDslNode(d);
	args = node.args;
	TfMod(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfMul(d : DslAst) -> TfMul {
	node = getDslNode(d);
	args = node.args;
	TfMul(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfNe(d : DslAst) -> TfNe {
	node = getDslNode(d);
	args = node.args;
	TfNe(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfNegate(d : DslAst) -> TfNegate {
	node = getDslNode(d);
	args = node.args;
	TfNegate(dslAst2TfExp(args[0]), 0)
}
dslAst2TfNot(d : DslAst) -> TfNot {
	node = getDslNode(d);
	args = node.args;
	TfNot(dslAst2TfExp(args[0]), 0)
}
dslAst2TfOr(d : DslAst) -> TfOr {
	node = getDslNode(d);
	args = node.args;
	TfOr(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfSequence(d : DslAst) -> TfSequence {
	node = getDslNode(d);
	args = node.args;
	TfSequence((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
}
dslAst2TfString(d : DslAst) -> TfString {
	node = getDslNode(d);
	args = node.args;
	TfString(getDslString(args[0]), 0)
}
dslAst2TfSub(d : DslAst) -> TfSub {
	node = getDslNode(d);
	args = node.args;
	TfSub(dslAst2TfExp(args[0]), dslAst2TfExp(args[1]), 0)
}
dslAst2TfTuple(d : DslAst) -> TfTuple {
	node = getDslNode(d);
	args = node.args;
	TfTuple((\t -> map(list2array(getDslList(t)), dslAst2TfExp))(args[0]), 0)
}
dslAst2TfTupletype(d : DslAst) -> TfTupletype {
	node = getDslNode(d);
	args = node.args;
	TfTupletype((\t -> map(list2array(getDslList(t)), dslAst2TfType))(args[0]), 0)
}
dslAst2TfTypeannot(d : DslAst) -> TfTypeannot {
	node = getDslNode(d);
	args = node.args;
	TfTypeannot(dslAst2TfExp(args[0]), dslAst2TfType(args[1]), 0)
}
dslAst2TfVar(d : DslAst) -> TfVar {
	node = getDslNode(d);
	args = node.args;
	TfVar(getDslString(args[0]), 0)
}

