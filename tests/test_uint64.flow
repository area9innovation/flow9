import algorithms;
import math/uint64;

genResult(initV : int, diff : UInt64) -> [string] {
	arr = [
		UInt64(0, 0),
		UInt64(0, initV),
		UInt64(initV, 0),
		UInt64(initV, initV),
		UInt64(0, -initV),
		UInt64(-initV, 0),
		UInt64(-initV, -initV),
	];
	map(
		mergeSort(arr, cmpUInt64),
		\v -> {
			uint642hex(v) + " + " + uint642hex(diff) + " = " + uint642hex(add64(v, diff));
		}
	);
}

genAndCheck(initV : int, diff : UInt64, validResult : [string]) -> void {
	result = genResult(initV, diff);
	if (result != validResult) {
		iter(result, println);
		fail("WRONG RESULT!");
	}
}

main() {
	genAndCheck(7, toUInt64(1), [
		"0 + 1 = 1",
		"7 + 1 = 8",
		"FFFFFFF9 + 1 = FFFFFFFA",
		"700000000 + 1 = 700000001",
		"700000007 + 1 = 700000008",
		"FFFFFFF900000000 + 1 = FFFFFFF900000001",
		"FFFFFFF9FFFFFFF9 + 1 = FFFFFFF9FFFFFFFA",
	]);
	genAndCheck(7, toUInt64(-1), [
		"0 + FFFFFFFFFFFFFFFF = FFFFFFFFFFFFFFFF",
		"7 + FFFFFFFFFFFFFFFF = 6",
		"FFFFFFF9 + FFFFFFFFFFFFFFFF = FFFFFFF8",
		"700000000 + FFFFFFFFFFFFFFFF = 6FFFFFFFF",
		"700000007 + FFFFFFFFFFFFFFFF = 700000006",
		"FFFFFFF900000000 + FFFFFFFFFFFFFFFF = FFFFFFF8FFFFFFFF",
		"FFFFFFF9FFFFFFF9 + FFFFFFFFFFFFFFFF = FFFFFFF9FFFFFFF8",
	]);
	quit(0);
}
