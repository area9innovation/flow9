import pebbles/pebble_controller;
import pebbles/pebble_parameters;
import material/material2tropic;

main () {
	mManager = makeMaterialManager([]);
	controller = makePebbleController(println);
	mrender(mManager, true, getPebblesControlledView(controller));

	// registerDispatcher(controller, "home", \-> showView(controller, mManager));
	registerDispatcher(controller, "home", \-> showView2(controller, mManager));

	validateCurrentPebbleAndInitView(controller, mManager, makeSimplePebble("home"));
}

showView(controller : PebbleController, mManager : MaterialManager) -> Material {
	value1B = make("");
	value1ParameterB = cloneBehaviour(value1B);

	value2B = make("");
	value2ParameterB = cloneBehaviour(value2B);

	confirmation = \key, parameterB : DynamicBehaviour<string> -> {
		\callbackToApprove -> {
			closeB = make(false);
			onClose = \x -> {
				next(closeB, true);
				callbackToApprove(x);
			}
			ShowMDialog(
				mManager,
				closeB,
				[
			        MDialogUseFrame(),
			        MDialogActions([
			            MTextButton(_("CANCEL"), \ -> {
			            	onClose(false);
			            	str = getValue(parameterB);
			            	nextDistinct(parameterB, substring(str, 0, strlen(str) - 1));
			            }, [], []),
			            MTextButton(_("OK"), \ -> {
			            	onClose(true);
			            }, [], []),
			        ])
				],
				MText("Confirm " + key + " change?", [])
			)
		}
	}

	MLinkPebbleParameters(
		controller,
		[
			PebbleStringLink(
				"param1",
				value1ParameterB,
				\value1 -> {
					println("value1 = " + value1);
					nextDistinct(value1B, value1);
				},
				RecordURLChange()
			),
			PebbleStringLink(
				"param2",
				value2ParameterB,
				\value2 -> {
					println("value2 = " + value2);
					nextDistinct(value2B, value2);
				},
				RecordURLChange()
			),
		],
		MLines([
			MTextButton("Click me to change parameter", \-> {
				next(value1ParameterB, getValue(value1ParameterB) + "0")
			}, [], [])
			|> (\m -> MSelect(value1B, \value1 ->
				if (value1 == "") m
				else MConfirmPebbleParameterSwitch(
					controller,
					[KeyValue("param1", pprint("test : value1 : ")(value1))],
					confirmation("param1", value1ParameterB),
					None(),
					m
				)
			)),
			MSelect(value1B, \value1 -> {
				MText("Value is " + value1, [])
			}),
			MTextButton("Click me to change parameter 2", \-> {
				next(value2ParameterB, getValue(value2ParameterB) + "0")
			}, [], [])
			|> (\m -> MSelect(value2B, \value2 ->
				if (value2 == "") m
				else MConfirmPebbleParameterSwitch(
					controller,
					[KeyValue("param2", value2)],
					confirmation("param2", value2ParameterB),
					None(),
					m
				)
			)),
			MSelect(value2B, \value2 -> {
				MText("Value is " + value2, [])
			})
		])
	)
}

showView2(controller : PebbleController, mManager : MaterialManager) -> Material {
	valueB = make("");
	valueParameterB = cloneBehaviour(valueB);

	MLinkPebbleParameters(
		controller,
		[
			PebbleStringLink(
				"param",
				valueParameterB,
				\value -> {
					println("call onChange");
					nextDistinct(valueB, value);
				},
				RecordURLChange()
			),
		],
		MSelect(valueB, \value -> {
			MLines([
				MTextButton("Click me to change parameter", \-> {
					// due to the encoded value onChange well be called twice
					next(valueParameterB, getValue(valueParameterB) + "%20Pebbles%20test%20")
				}, [], []),
				MText("Value is " + value, [])
			])
		})
	)	
}
