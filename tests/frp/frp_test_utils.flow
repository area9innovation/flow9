import runtime;
import string;
import behaviour;

import frp/frp;


export {
	checkFrp(frp : FrpValue<?>, value : ?) -> bool;
	checkFrp2(frp : FrpValue<?>, value : ?, status : bool) -> bool;
	checkFrpArr(frp : FrpArray<?>, values : [?]) -> bool;
	checkBeh(beh : DynamicBehaviour<?>, value : ?) -> bool;
	printTestResult(name : string, r : bool) -> void;
	runTests(title : string, tests : [() -> bool]) -> bool;
	frpTest(name : string, testFn : () -> bool) -> bool;
}

frpCheckCounter = ref 0;


checkFrp2(frp : FrpValue<?>, value : ?, status : bool) -> bool {
	frpCheckCounter := ^frpCheckCounter + 1;
	r0 = if (^(frp.status) != status) "wrong status" else "";
	r1 = if (rget(frp) != value) "wrong value" else "";
	r3 =
		if (r0 != "" || r1 != "") {
			"\nvalue:" + toString(rget(frp)) + "\nexpected:" + toString(value)
		} else "";
	r = r0 + r1 + r3;
	printCheckResult(frp, r);
	r == "";
}

checkFrp(frp : FrpValue<?>, value : ?) -> bool {
	checkFrp2(frp, value, true);
}


checkFrpArr(frp : FrpArray<?>, values : [?]) -> bool {
	frpCheckCounter := ^frpCheckCounter + 1;
	r0 = if (!^(frp.status)) "wrong status" else "";
	r1 = if (rgetA(frp) != values) "wrong value" else "";
	r3 =
		if (r0 != "" || r1 != "") {
			"\nvalues:" + toString(rgetA(frp)) + "\nexpected array values:" + toString(values)
		} else "";
	r = r0 + r1 + r3;
	printCheckResult(frp, r);
	r == "";
}


checkBeh(beh : DynamicBehaviour<?>, value : ?) -> bool {
	frpCheckCounter := ^frpCheckCounter + 1;
	if (getValue(beh) == value) {
		true;
	} else {
		println("check " + i2s(^frpCheckCounter) + " failed");
		println("behaviours value:" + toString(getValue(beh)));
		println("expected:" + toString(value));
		false;
	}
}


printCheckResult(frp : FrpNode<?>, r : string) -> void {
	if (r != "") {
		println("check " + i2s(^frpCheckCounter) + " failed" + ": " + r);
	};
}

printTestResult(name : string, r : bool) -> void {
	println(name + ": " + if (r) "OK" else "ERROR");
}


frpTest(
	name : string,
	testFn : () -> bool
) -> bool {
	println("START test: " + name);
	frpCheckCounter := 0;
	result = testFn();
	println("END test: " + name + ": " + if (result) "OK" else "ERROR");
	result;
}

runTests(title : string, tests : [() -> bool]) -> bool {
	println("FRP '" + title +  "' tests start");
	result = all(map(tests, \fn -> fn()));
	println("FRP '" + title +  "' tests end:" + (if (result) "SUCCESS" else "FAILURE"));
	result;
}
