import runtime;
import string;
import math/math;

import frp/frp;
import frp/frp_behaviour;
import tests/frp/frp_test_utils;

export {
	frpBehaviourTests =
		[
			rbConnect2_test,
			rbBidiConnect_test,
			rbBidiConnect_acc_test,
			rbConnectStar2_test,
			rbConnectStar2_conflict_test,
		];
}

rbConnect2_test = \-> frpTest("rbConnect2", \-> {
	// rbConnect basic test - connection and disconnection
	cell1 = rmake(100);
	cell2 = rselect(cell1, \v -> v * 2);
	beh1 = make(2);
	beh2 = make(3);

	rbConnect2(cell1, beh1, beh2,
		\c,v1,v2 -> c + v1 + v2,
	);

	r1 = checkFrp(cell1, 105) && checkFrp(cell2, 210) && checkBeh(beh1, 2) && checkBeh(beh2, 3);

	rnext(cell1, 200);
	r2 = checkFrp(cell1, 200) && checkFrp(cell2, 400) && checkBeh(beh1, 2) && checkBeh(beh2, 3);

	next(beh1, 3);
	r3 = checkFrp(cell1, 206) && checkFrp(cell2, 412) && checkBeh(beh1, 3) && checkBeh(beh2, 3);

	next(beh2, 5);
	r4 = checkFrp(cell1, 214) && checkFrp(cell2, 428) && checkBeh(beh1, 3) && checkBeh(beh2, 5);

	rdisconnect(cell1);

	next(beh2, 1000);
	r5 = checkFrp(cell1, 214) && checkFrp(cell2, 428) && checkBeh(beh1, 3) && checkBeh(beh2, 1000);

	r1 && r2 && r3 && r4 && r5
})

rbBidiConnect_test = \-> frpTest("rbBidiConnect", \-> {
	// rbConnect basic test - connection and disconnection

	cell1 = rmake("1");
	beh = make(10);

	rbBidiConnect(cell1, beh,
		\__,v -> i2s(v),
		\c -> s2i(c),
	);

	cell2 = rselect(cell1, \s -> s + "*");

	r1 = checkFrp(cell1, "1") && checkFrp(cell2, "1*") && checkBeh(beh, 1);

	rnext(cell1, "2");
	r2 = checkFrp(cell1, "2") && checkFrp(cell2, "2*") && checkBeh(beh, 2);

	next(beh, 3);
	r3 = checkFrp(cell1, "3") && checkFrp(cell2, "3*") && checkBeh(beh, 3);

	rdisconnect(cell1);
	// disconnect behaviours only but cell2

	rnext(cell1, "4");
	r4 = checkFrp(cell1, "4") && checkFrp(cell2, "4*") && checkBeh(beh, 3);

	next(beh, 5);
	r5 = checkFrp(cell1, "4") && checkFrp(cell2, "4*") && checkBeh(beh, 5);

	r1 && r2 && r3 && r4 && r5;
})


rbBidiConnect_acc_test = \-> frpTest("rbBidiConnect_acc", \-> {
	// rbConnect - accumulation values test
	// cell1 is updated on any new Some(...) value, None() is ignored

	cell1 = rmake(0);
	beh = make(None());

	rbBidiConnect(cell1, beh,
		\c,valM -> eitherMap(valM, \v -> c + v, c),
		\c -> None()
	);

	r1 = checkFrp(cell1, 0) && checkBeh(beh, None());

	next(beh, Some(1));
	r2 = checkFrp(cell1, 1) && checkBeh(beh, Some(1));

	next(beh, None());
	r3 = checkFrp(cell1, 1) && checkBeh(beh, None());

	next(beh, Some(2));
	r4 = checkFrp(cell1, 3) && checkBeh(beh, Some(2));

	r1 && r2 && r3 && r4;
})


rbConnectStar2_test = \-> frpTest("rbConnectStar2", \-> {
	// rbConnectStar2 basic test - connection and disconnection

	cell1 = rmake(Pair(1, 2.0));
	beh1 = make(10);
	beh2 = make(2.5);

	rbConnectStar2(cell1, beh1, beh2,
		\__,v1,v2 -> Pair(v1, v2),
		\c -> c.first,
		\c -> c.second
	);

	cell2 = rselect(cell1, \p -> Pair(p.first * 2, p.second * 3.0));

	r1 = checkFrp(cell1, Pair(1, 2.0)) && checkFrp(cell2, Pair(2, 6.0)) && checkBeh(beh1, 1) && checkBeh(beh2, 2.0);

	rnext(cell1, Pair(2, 2.5));
	r2 = checkFrp(cell1, Pair(2, 2.5)) && checkFrp(cell2, Pair(4, 7.5)) && checkBeh(beh1, 2) && checkBeh(beh2, 2.5);

	next(beh1, 3);
	r3 = checkFrp(cell1, Pair(3, 2.5)) && checkFrp(cell2, Pair(6, 7.5)) && checkBeh(beh1, 3) && checkBeh(beh2, 2.5);

	next(beh2, 4.0);
	r4 = checkFrp(cell1, Pair(3, 4.0)) && checkFrp(cell2, Pair(6, 12.0)) && checkBeh(beh1, 3) && checkBeh(beh2, 4.0);

	rdisconnect(cell1);
	// disconnect behaviours only but cell2

	rnext(cell1, Pair(1, 1.5));
	r5 = checkFrp(cell1, Pair(1, 1.5)) && checkFrp(cell2, Pair(2, 4.5)) && checkBeh(beh1, 3) && checkBeh(beh2, 4.0);

	next(beh1, 1);
	r6 = checkFrp(cell1, Pair(1, 1.5)) && checkFrp(cell2, Pair(2, 4.5)) && checkBeh(beh1, 1) && checkBeh(beh2, 4.0);

	next(beh2, 10.0);
	r7 = checkFrp(cell1, Pair(1, 1.5)) && checkFrp(cell2, Pair(2, 4.5)) && checkBeh(beh1, 1) && checkBeh(beh2, 10.0);

	r1 && r2 && r3 && r4 && r5 && r6 && r7;
})

rbConnectStar2_conflict_test = \-> frpTest("rbConnectStar2_conflict", \-> {
	// rbConnectStar2 // check propagation: beh1 -> cell1 -> beh2

	cell1 = rmake(1);
	beh1 = make(0);
	beh2 = make(0);

	rbConnectStar2(cell1, beh1, beh2,
		\__,v1,v2 -> if (v1 >= 0) v1 else if (v2 >= 0) v2 else -1, // resolve conflicts, set priority of v1
		idfn,
		idfn
	);

	r1 = checkFrp(cell1, 1) && checkBeh(beh1, 1) && checkBeh(beh2, 1);

	rnext(cell1, 2);
	r2 = checkFrp(cell1, 2) && checkBeh(beh1, 2) && checkBeh(beh2, 2);

	next(beh1, 3); // check propagation: beh1 -> cell1 -> beh2
	r3 = checkFrp(cell1, 3) && checkBeh(beh1, 3) && checkBeh(beh2, 3);

	next(beh2, 4); // don't propagate this
	r4 = checkFrp(cell1, 3) && checkBeh(beh1, 3) && checkBeh(beh2, 4);

	next(beh1, -1); // use beh2 value now
	r5 = checkFrp(cell1, 4) && checkBeh(beh1, -1) && checkBeh(beh2, 4);

	r1 && r2 && r3 && r4 && r5
})
