import material/material_ui;

main() {
	fori(0, s2i(getUrlParameterDef("repeat", "1")) - 1, \__ -> {
		test_da();
	});
}

test_da() {
	t = ref timestamp();

	a = generate(0, 1000, \v -> floor(random() * 1000.0));
	b = map(a, \v -> v + v * 2);
	c = mapi(b, \i, v -> v * i);
	d = subrange(c, 50, 900);
	e = filter(d, \v -> v < 1000);
	f = concat(e, d);
	g = concatA([a]);
	h = map(g, \v -> v + v * 2);
	j = order(h, f);

	println("Array: " + d2s(timestamp() - ^t));
	println("Order length: " + toString(length(j)));
	t := timestamp();

	da = makeDynamicArray([]);
	db0 = submapDynamicArray(da, make);
	db1 = mapuDynamicArray(db0, \v -> Disposable(v, nop));
	db = mapDynamicArray(da, \v -> v + v * 2);
	dc0 = submapiDynamicArray(db, \i, v -> make(v));
	dc1 = mapiuDynamicArray(dc0, \i, v -> Disposable(v, nop));
	dc = mapiDynamicArray(dc1, \i, v -> v * i);
	dd = subrangeDynamicArray(dc, const(50), const(900));
	de = filterDynamicArray(dd, \v -> v < 1000);
	df = concatDynamicArray(de, dd);
	dg = mergeDynamicArray(makeDynamicArray([da]));
	dh = mapDynamicArray(dg, \v -> v + v * 2);
	dj = orderDynamicArray(dh, df);

	tt = h;
	dt = dh;

	println("PRE-SUB");
	subscribeDynamicArray(dt, nop1);
	println("POST-SUB");

	iter(a, \v -> {
		if (random() > 0.5 && isUrlParameterTrue("delete")) {
			i = floor(random() * i2d(getDynamicArrayLength(da)));

			insertDynamicArray(da, i, v);
			deleteDynamicArray(da, i);
		}

		appendDynamicArray(da, v);
	});

	println("GET-VALUE");
	println(tt);
	println(getDynamicArrayValue(dt));

	// subscribeDynamicArray(db, nop1);

	// nextDynamicArray(da, []);
	// nextDynamicArray(da, a);

	println("DynamicArray: " + d2s(timestamp() - ^t));
	println("Order length: " + toString(getDynamicArrayLength(dh)));

	println("Assert init:");
	assertEquals(a, getDynamicArrayValue(da));

	println("Assert map:");
	assertEquals(b, getDynamicArrayValue(db));

	println("Assert mapi:");
	assertEquals(c, getDynamicArrayValue(dc));

	println("Assert subrange:");
	assertEquals(d, getDynamicArrayValue(dd));

	println("Assert filter:");
	assertEquals(e, getDynamicArrayValue(de));

	println("Assert concat:");
	assertEquals(f, getDynamicArrayValue(df));

	println("Assert merge:");
	assertEquals(g, getDynamicArrayValue(dg));

	println("Assert second map:");
	assertEquals(h, getDynamicArrayValue(dh));

	println("Assert order:");
	assertEquals(j, getDynamicArrayValue(dj));

	t := timestamp();

	// fa = make(a);
	// fb = fmap(fb,)
}

order(a, b) {
	filtermap(b, \i -> if (length(a) > i) Some(a[i]) else None());
}