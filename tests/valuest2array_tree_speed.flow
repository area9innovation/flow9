import math/math;
import ds/tree;

values2arrayTreeOld(xs : [?], getKey : (?) -> ??) -> Tree<??, [?]> {
	fold(xs, makeTree(), \t, d -> treePushToArrayValue(t, getKey(d), d));
}

testSpeed(arrLength : int, avgTreeValueLength : int) -> void {
	keysCount = arrLength / avgTreeValueLength;

	println(formatString(
		"Compare values2arrayTree speed on array of %1 elements, splitting this array into ~%2 parts by ~%3 elements",
		[i2s(arrLength), i2s(keysCount), i2s(avgTreeValueLength)]
	));

	arr = generate(0, arrLength, \i -> random());
	getKey = \v -> trunc(v * i2d(keysCount));

	tm1 = timestamp();
	t1 = values2arrayTree(arr, getKey);
	dt1 = timestamp() - tm1;

	tm2 = timestamp();
	t2 = values2arrayTreeOld(arr, getKey);
	dt2 = timestamp() - tm2;

	f1 = if (dt1 < dt2) "*" else "";
	f2 = if (dt2 < dt1) "*" else "";

	println(f1 + "New function: " + i2s(trunc(dt1)) + " ms");
	println(f2 + "Old function: " + i2s(trunc(dt2)) + " ms");

	if (t1 == t2) {
		println("Trees are exactly the same. Tree size: " + i2s(sizeTree(t1)) + "\n");
	} else {
		fail("Trees are different!");
	}
}

testSpeed2(arrLength : int, avgTreeValueLength : int) -> void {
	println("----------");
	testSpeed(arrLength, avgTreeValueLength);
	testSpeed(arrLength, avgTreeValueLength);
}

main() {
	arrLength = 100000;

	iter(
		[1, 2, 4, 8, 16, 32, 64, 100, 128, 1000, 10000],
		\avgTreeValueLength -> testSpeed2(arrLength, avgTreeValueLength)
	);

	testSpeed2(arrLength * 10, 10000);

	quit(0);
}
