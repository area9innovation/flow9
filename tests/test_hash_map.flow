import ds/hashmap;
import math/math;
import math/hash;
import string;

HashMapTest(
	step : int,
	iterations : int,
	max_size : int,
	additions : int,
	deletions : int,
	hashMap : HashMap<?, ??>,
	tree : Tree<?, ??>
);

makeHashMapTest(hash : (?) -> int, iters : int) -> HashMapTest<?, ??> {
	HashMapTest(
		0, 
		iters,
		0, 0, 0,
		makeHashMap(hash),
		makeTree()
	);
}

setHashMapTest(test : HashMapTest<?, ??>, key : ?, value : ??) -> HashMapTest<?, ??> {
	setHashMap(test.hashMap, key, value);
	new_tree = setTree(test.tree, key, value);
	ret = HashMapTest(
		test.step, 
		test.iterations,
		max(test.max_size, sizeTree(new_tree)),
		test.additions + 1,
		test.deletions,
		test.hashMap, 
		new_tree
	);
	if (sizeHashMap(ret.hashMap) != sizeTree(ret.tree)) {
		println(
			"ERROR: sizes of hash map and tree differ\n" +
			i2s(sizeTree(ret.tree)) + " !=  " + i2s(sizeHashMap(ret.hashMap)) + "\n" +
 			"at setting: key='" + toString(key) + "' val='" + toString(value) + "'"
		);
		quit(-1);
	}
	switch (lookupHashMap(ret.hashMap, key)) {
		Some(val): {
			if (val != value) {
				println(
					"ERROR: hash map stores a wrong value: '" + toString(val) + "'\n" +
					"at setting: key='" + toString(key) + "' val='" + toString(value) + "'"
				);
				quit(-1);
			}
		}
		None(): {
			println(
				"ERROR: hash map doesn't contain a key: " + toString(key) + "\n"
				"at setting: key='" + toString(key) + "' val='" + toString(value) + "'"
			);
			quit(-1);
		}
	}
	ret;
}

removeHashMapTest(test : HashMapTest<?, ??>, key : ?) -> HashMapTest<?, ??> {
	removeFromHashMap(test.hashMap, key);
	new_tree = removeFromTree(test.tree, key);
	ret = HashMapTest(
		test.step, 
		test.iterations, 
		test.max_size, 
		test.additions,
		test.deletions + 1,
		test.hashMap, 
		new_tree
	);
	if (sizeHashMap(ret.hashMap) != sizeTree(ret.tree)) {
		println(
			"ERROR: sizes of hash map and tree differ:\n" + 
			i2s(sizeTree(ret.tree)) + " !=  " + i2s(sizeHashMap(ret.hashMap)) + "\n" +
 			"at removing: key='" + toString(key) + "'"
		);
		quit(-1);
	}
	switch (lookupHashMap(ret.hashMap, key)) {
		Some(val): {
			println(
				"ERROR: hash map must not contain the value: '" + toString(val) + "'\n" + 
				"at removing: key='" + toString(key) + "'"
			);
			quit(-1);
		}
		None(): {
		}
	}
	ret;
}

checkHashMapTest(test : HashMapTest<?, ??>) -> void {
	err = ref false;
	if (sizeTree(test.tree) != sizeHashMap(test.hashMap)) {
		println(
			"ERROR: sizes of hash map and tree differ:\n" +
			i2s(sizeTree(test.tree)) + " !=  " + i2s(sizeHashMap(test.hashMap))
		);
		err := true;
		quit(-1);
	}
	iter(getTreeKeys(test.tree), \key -> {
		switch (lookupTree(test.tree, key)) {
			Some(tree_val): {
				switch (lookupHashMap(test.hashMap, key)) {
					Some(hash_val): {
						if (tree_val != hash_val) {
							println(
								"ERROR: hash map stores a wrong value: " + 
								toString(hash_val) + " while should " + toString(tree_val)
							);
							err := true;
							quit(-1);
						}
					}
					None(): { 
						println("ERROR: hash map doesn't contain a key: " + toString(key));
						err := true;
						quit(-1);
					}
				}
			}
			None(): { }
		}
	});
	iter(getHashMapKeys(test.hashMap), \key -> {
		switch (lookupHashMap(test.hashMap, key)) {
			Some(hash_val): {
				switch (lookupTree(test.tree, key)) {
					Some(tree_val): {
						if (tree_val != hash_val) {
							println(
								"ERROR: hash map stores a wrong value: " + 
								toString(hash_val) + " while should " + toString(tree_val)
							);
							err := true;
							quit(-1);
						}
					}
					None(): { 
						println("ERROR: hash map must not contain the value for the key: " + toString(key));
						err := true;
						quit(-1);
					}
				}
			}
			None(): { }
		}
	});
	if (^err) {
		println("Test FAILED at " + i2s(test.step));
		println(hashMapTest2s(test, true));
	} else {
		println("Test SUCCEEDED " + i2s(test.iterations) + " iterations");
		println(hashMapTest2s(test, false));
	}
}

hashMapTest2s(test : HashMapTest<?, ??>, with_vals : bool) -> string {	
	"size: " + i2s(sizeTree(test.tree)) + "\n" +
	"max_size: " + i2s(test.max_size) + "\n" + 
	"additions: " + i2s(test.additions) + "\n" + 
	"deletions: " + i2s(test.deletions) + "\n" + 
	if (!with_vals) "" else {
		concatStrings(map(tree2pairs(test.tree), \p ->
			"\t" + toString(p.first) + " => " + toString(p.second) + "\n"
		));
	}
}


runTestWithThreshold(
	test : HashMapTest<?, ??>,
	rand : () -> double,
	add_threshold : double, 
	gen_key : (() -> double) -> ?, 
	gen_val : (() -> double) -> ??,
) -> HashMapTest {
	if (test.step > test.iterations) test else {
		mod_test = if (rand() > add_threshold || isEmptyTree(test.tree)) {
			key = gen_key(rand);
			val = gen_val(rand);
			//println("adding key='" + toString(key) + "' val='" + toString(val) + "'");
			setHashMapTest(test, key, val);
		} else {
			keys = getTreeKeys(test.tree);
			key = keys[round(rand() * i2d(length(keys) - 1))];
			//println("removing key='" + toString(key) + "'");
			removeHashMapTest(test, key);
		}
		runTestWithThreshold(
			HashMapTest(mod_test with step = test.step + 1), 
			rand,
			add_threshold,
			gen_key, 
			gen_val
		);
	}
}

gen_rand_int(rand : () -> double) -> int {
	round(rand() * 100000.0);
}

gen_rand_str(rand : () -> double) -> string {
	len = round(rand() * 100.0) % 100;
	chars = map(enumFromTo(1, len), \__ -> 
		round(rand() * 128.0) % 128
	);
	concatStrings(map(chars, \code -> fromCharCode(code)));
}

runTest(
	iters : int,
	rand : () -> double,
	gen_key : (() -> double) -> ?, 
	gen_val : (() -> double) -> ??,
	hash : (?) -> int,
) -> void {
	checkHashMapTest(runTestWithThreshold(
		makeHashMapTest(hash, iters),
		rand,
		0.5,
		gen_key,
		gen_val
	));
	checkHashMapTest(runTestWithThreshold(
		makeHashMapTest(hash, iters),
		rand,
		0.2,
		gen_key,
		gen_val
	));
	checkHashMapTest(runTestWithThreshold(
		makeHashMapTest(hash, iters),
		rand,
		0.8,
		gen_key,
		gen_val
	));
}

main() -> void {
	rand = randomGenerator(0);
	println("Test: int keys, int vals");
	runTest(20000, rand, gen_rand_int, gen_rand_int, idfn);

	println("Test: int keys, string vals");
	runTest(20000, rand, gen_rand_int, gen_rand_str, idfn);

	println("Test: string keys, int vals");
	runTest(20000, rand, gen_rand_str, gen_rand_int, fastHashString);

	println("Test: string keys, string vals"); 
	runTest(20000, rand, gen_rand_str, gen_rand_str, fastHashString);

	println("ALL TEST ARE PASSED"); 
	quit(0);
}