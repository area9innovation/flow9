import runtime;
import formats/csv;
import text/blueprint;

TestStats(
	total : int,
	passed : int
);

testCsvParsing(testName : string, input : string, expected : [[string]], onlyRectangular : bool, stats : TestStats) -> TestStats {
	println("\n=== Test: " + testName + " ===");
	println("Input:");
	println(input);

	result = parseCsvFile(input, onlyRectangular);

	println("\nResult:");
	println(formatArray(result));

	println("\nExpected:");
	println(formatArray(expected));

	if (result == expected) {
		println("Test passed");
		TestStats(stats.total + 1, stats.passed + 1)
	} else {
		println("Test failed");
		TestStats(stats.total + 1, stats.passed)
	}
}

formatArray(arr : [[string]]) -> string {
	superglue(arr, \row -> "[" + strGlue(row, ", ") + "]", "\n")
}

printTestSummary(stats : TestStats) -> void {
	println("\n=== Test Summary ===");
	println("Total tests: " + i2s(stats.total));
	println("Passed: " + i2s(stats.passed));
	println("Failed: " + i2s(stats.total - stats.passed));
	successRate = round(i2d(stats.passed) / i2d(stats.total) * 100.0);
	println("Success rate: " + i2s(successRate) + "%");
}

main() {
	stats = ref TestStats(0, 0);

	// Test 1: Basic CSV
	test1 = "a,b,c\n1,2,3\n4,5,6";
	expected1 = [["a", "b", "c"], ["1", "2", "3"], ["4", "5", "6"]];
	stats := testCsvParsing("Basic CSV", test1, expected1, true, ^stats);

	// Test 2: Quoted fields with commas
	test2 = "name,description,value\n\"Doe, John\",\"First, second\",100\n\"Smith, Jane\",\"Another, value\",200";
	expected2 = [["name", "description", "value"],
				 ["Doe, John", "First, second", "100"],
				 ["Smith, Jane", "Another, value", "200"]];
	stats := testCsvParsing("Quoted fields with commas", test2, expected2, true, ^stats);

	// Test 3: Mixed quoted and unquoted fields
	test3 = "normal,\"quoted,field\",normal2\n1,\"2,3\",4";
	expected3 = [["normal", "quoted,field", "normal2"], ["1", "2,3", "4"]];
	stats := testCsvParsing("Mixed quoted fields", test3, expected3, true, ^stats);

	// Test 4: Empty fields
	test4 = "a,,c\n1,2,\n,,3";
	expected4 = [["a", "", "c"], ["1", "2", ""], ["", "", "3"]];
	stats := testCsvParsing("Empty fields", test4, expected4, true, ^stats);

	// Test 5: Quoted fields with double quotes
	test5 = "field1,field2\n\"quoted \"\"with\"\" quotes\",normal\n\"another\"\"quote\"\"\",value";
	expected5 = [["field1", "field2"],
				 ["quoted \"with\" quotes", "normal"],
				 ["another\"quote\"", "value"]];
	stats := testCsvParsing("Quoted fields with escaped quotes", test5, expected5, true, ^stats);

	// Test 6: Different separators (semicolon)
	test6 = "a;b;c\n1;2;3\n4;5;6";
	expected6 = [["a", "b", "c"], ["1", "2", "3"], ["4", "5", "6"]];
	stats := testCsvParsing("Semicolon separator", test6, expected6, true, ^stats);

	// Test 7: Irregular number of columns (with onlyRectangular = false)
	test7 = "a,b,c\n1,2\n3,4,5,6";
	expected7 = [["a", "b", "c"], ["1", "2"], ["3", "4", "5", "6"]];
	stats := testCsvParsing("Irregular columns (non-rectangular)", test7, expected7, false, ^stats);

	// Test 8: Irregular number of columns (with onlyRectangular = true)
	stats := testCsvParsing("Irregular columns (rectangular)", test7, [[]], true, ^stats);

	// Test 9: With whitespace
	test9 = " a , b , c \n 1 , 2 , 3 ";
	expected9 = [["a", "b", "c"], ["1", "2", "3"]];
	stats := testCsvParsing("Whitespace handling", test9, expected9, true, ^stats);

	// Test 10: Mixed line endings
	test10 = "a,b,c\r\n1,2,3\n4,5,6\r";
	expected10 = [["a", "b", "c"], ["1", "2", "3"], ["4", "5", "6"]];
	stats := testCsvParsing("Mixed line endings", test10, expected10, true, ^stats);

	// Print test summary
	printTestSummary(^stats);
}