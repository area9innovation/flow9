import material/material;

main() {
	setLeakingSubscribersHandler(1000, 10, nop2);

	ts = timestamp();

	randomMultiplier = 600.0;
	debugOut = false;

	if (debugOut) println("--0--");
	v0 = [0, 1, 2, 3, 4];

	if (debugOut) println(v0);
	if (debugOut) println("sum = " + toString(sum(v0)));

	a = make(v0);

	b1 = fmap(a, \v -> { if (debugOut) println("fmapi item: " + toString(v)); v; });
	b2 = fmapu(a, \v -> { if (debugOut) println("fmapu item: " + toString(v)); Pair(v, [\ -> if (debugOut) println("fmapu dispose: " + toString(v))]); });
	b3 = fmapi(a, \i, v -> { if (debugOut) println("fmapi item " + toString(i) + " : " + toString(v)); v; });
	b4 = fmapiu(a, \ii, v ->
			Pair(
				v,
				[
					makeSubscribe(ii, \i -> if (debugOut) println("fmapiu item " + toString(i) + " : " + toString(v)))(),
					\ -> if (debugOut) println("fmapiu dispose: " + toString(v))
				]
			)
		);
	b5 = fsubmap(a, \vv -> fselect(make(vv), FLift(\v -> { if (debugOut) println("fsubmap item: " + toString(v)); v; })));
	b6 = fsubmapi(a, \ii, v -> fselect(ii, FLift(\i -> { if (debugOut) println("fsubmapi item " + toString(i) + " : " + toString(v)); v; })));
	b7 = ffold(a, 0, \acc, v -> { if (debugOut) println("ffold item (acc = " + toString(acc) + ") : " + toString(v)); acc + v; });

	d1 = makeSubscribe(b1, \v -> if (debugOut) println("fmap result: " + toString(v)))();
	d2 = makeSubscribe(b2, \v -> if (debugOut) println("fmapu result: " + toString(v)))();
	d3 = makeSubscribe(b3, \v -> if (debugOut) println("fmapi result: " + toString(v)))();
	d4 = makeSubscribe(b4, \v -> if (debugOut) println("fmapiu result: " + toString(v)))();
	d5 = makeSubscribe(b5, \v -> if (debugOut) println("fsubmap result: " + toString(v)))();
	d6 = makeSubscribe(b6, \v -> if (debugOut) println("fsubmapi result: " + toString(v)))();
	d7 = makeSubscribe(b7, \v -> if (debugOut) println("ffold result: " + toString(v)))();

	assert(v0 == fgetValue(b1), "fmap v0: ");
	assert(v0 == fgetValue(b2), "fmapu v0: ");
	assert(v0 == fgetValue(b3), "fmapi v0: ");
	assert(v0 == fgetValue(b4), "fmapiu v0: ");
	assert(v0 == fgetValue(b5), "fsubmap v0: ");
	assert(v0 == fgetValue(b6), "fsubmapi v0: ");
	assert(sum(v0) == fgetValue(b7), "ffold v0: ");

	if (debugOut) println("--1--");
	v1 = generate(0, floor(random() * randomMultiplier), \i -> floor(random() * randomMultiplier));

	if (debugOut) println(v1);
	if (debugOut) println("sum = " + toString(sum(v1)));

	next(a, v1);

	assert(v1 == fgetValue(b1), "fmap v1: ");
	assert(v1 == fgetValue(b2), "fmapu v1: ");
	assert(v1 == fgetValue(b3), "fmapi v1: ");
	assert(v1 == fgetValue(b4), "fmapiu v1: ");
	assert(v1 == fgetValue(b5), "fsubmap v1: ");
	assert(v1 == fgetValue(b6), "fsubmapi v1: ");
	assert(sum(v1) == fgetValue(b7), "ffold v1: ");

	if (debugOut) println("--2--");
	v2 = generate(0, floor(random() * randomMultiplier), \i -> floor(random() * randomMultiplier));

	if (debugOut) println(v2);
	if (debugOut) println("sum = " + toString(sum(v2)));

	next(a, v2);

	assert(v2 == fgetValue(b1), "fmap v2: ");
	assert(v2 == fgetValue(b2), "fmapu v2: ");
	assert(v2 == fgetValue(b3), "fmapi v2: ");
	assert(v2 == fgetValue(b4), "fmapiu v2: ");
	assert(v2 == fgetValue(b5), "fsubmap v2: ");
	assert(v2 == fgetValue(b6), "fsubmapi v2: ");
	assert(sum(v2) == fgetValue(b7), "ffold v2: ");

	if (debugOut) println("--3--");
	v3 = generate(0, floor(random() * randomMultiplier), \i -> floor(random() * randomMultiplier));

	if (debugOut) println(v3);
	if (debugOut) println("sum = " + toString(sum(v3)));

	next(a, v3);

	assert(v3 == fgetValue(b1), "fmap v3: ");
	assert(v3 == fgetValue(b2), "fmapu v3: ");
	assert(v3 == fgetValue(b3), "fmapi v3: ");
	assert(v3 == fgetValue(b4), "fmapiu v3: ");
	assert(v3 == fgetValue(b5), "fsubmap v3: ");
	assert(v3 == fgetValue(b6), "fsubmapi v3: ");
	assert(sum(v3) == fgetValue(b7), "ffold v3: ");

	if (debugOut) println("--4--");
	v4 = [];

	if (debugOut) println(v4);
	if (debugOut) println("sum = " + toString(sum(v4)));

	next(a, v4);

	assert(v4 == fgetValue(b1), "fmap v4: ");
	assert(v4 == fgetValue(b2), "fmapu v4: ");
	assert(v4 == fgetValue(b3), "fmapi v4: ");
	assert(v4 == fgetValue(b4), "fmapiu v4: ");
	assert(v4 == fgetValue(b5), "fsubmap v4: ");
	assert(v4 == fgetValue(b6), "fsubmapi v4: ");
	assert(sum(v4) == fgetValue(b7), "ffold v4: ");

	d1();
	d2();
	d3();
	d4();
	d5();
	d6();
	d7();

	println("time took: " + toString(timestamp() - ts));

	assert(getCurrentSubscribersCount() == 0, "sub counter:");
}