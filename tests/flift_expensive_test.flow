import fusion_utils;

printTransformsState(transforms : [Transform]) -> void {
	println("\nState:");
	iteri(transforms, \i, trans -> {
		println("trans" + i2s(i + 1) + ": " + trans2state(trans));
	});
}

trans2state(trans : Transform) -> string {
	switch (trans) {
		FSelect(__, __, fBeh): fBeh2state(fBeh);
		FSelect2(__, __, __, fBeh): fBeh2state(fBeh);
		FSubSelect(__, __, fBeh): fBeh2state(fBeh);
		FConstructable(__, __, fBeh): fBeh2state(fBeh);
		default: "None";
	}
}

fBeh2state(fBeh : FBehaviour<?>) -> string {
	switch (fBeh) {
		FDestroyed(): "Destroyed";
		FInitialized(__, __, __): "Initialized";
	}
}

createTransforms(useFLiftExpensive : bool) -> [Transform] {
	createFLift = \fn : (int) -> flow -> if (useFLiftExpensive) FLiftExpensive(fn) else FLift(fn);

	beh1 = make(1);
	beh2 = make(2);

	trans1 = fselect(beh1, createFLift(\v -> {
		println("  call fn1");
		v;
	}));
	trans2 = fselect(trans1, createFLift(\v -> {
		println("  call fn2");
		v;
	}));
	trans3 = fselect(beh2, createFLift(\v -> {
		println("  call fn3");
		v;
	}));
	trans4 = fselect2Lift(trans2, trans3, \v1, v2 -> {
		println("  call fn4");
		v1 + v2;
	});
	trans5 = fselect2Lift(trans4, trans3, \v1, v2 -> {
		println("  call fn5");
		v1 + v2;
	});
	trans6 = fselect2Lift(trans5, const(9), \v1, v2 -> {
		println("  call fn6");
		v1 + v2;
	});
	trans7 = fsubselect(trans6, createFLift(\__ -> {
		println("  call fn7");
		trans6;
	}));
	trans8 = fsubselect(const(9), createFLift(\__ -> {
		println("  call fn8");
		trans7;
	}));
	trans9 = fselect(trans8, createFLift(\v -> {
		println("  call fn9");
		v;
	}));
	trans10 = fselect2Lift(trans8, trans9, \v1, v2 -> {
		println("  call fn10");
		v1 + v2;
	});
	[trans1, trans2, trans3, trans4, trans5, trans6, trans7, trans8, trans9, trans10];
}

test(useFLiftExpensive : bool, reversSubscribe : bool) -> void {
	println("Creating transforms");
	transforms = createTransforms(useFLiftExpensive);
	count = length(transforms);

	subscribeTransformIfNotInitialized = \idx -> {
		name = i2s(idx + 1);
		trans = transforms[idx];
		if (trans2state(trans) == "Initialized") {
			println("Transform " + name + " is already initialized");
			makeList();
		} else {
			println("Subscribing transform " + name);
			fsubscribe(trans, \__ -> {
				println("  Transform " + name + " calculated");
			});
		}
	}

	uns = if (reversSubscribe) {
		println("Subscribing transforms from last to first");
		generate(0, count, \i -> {
			subscribeTransformIfNotInitialized(count - 1 - i);
		});
	} else {
		println("Subscribing transforms from first to last");
		mapi(transforms, \i, __ -> subscribeTransformIfNotInitialized(i));
	}

	println("Getting values");
	println(map(transforms, \trans -> fgetValue(trans)));

	iter(uns, \u -> applyList(u, apply0));
	println("Done");
}

main() {
	reversSubscribe = true;

	println("=== Using FLift");
	test(false, reversSubscribe);

	println("");
	println("=== Using FLiftExpensive");
	test(true, reversSubscribe);

	quit(0);
}
