import fusion_utils;

printTransformsState(transforms : [Transform]) -> void {
	println("\nState:");
	iteri(transforms, \i, trans -> {
		println("trans" + i2s(i + 1) + ": " + trans2state(trans));
	});
}

trans2state(trans : Transform) -> string {
	switch (trans) {
		FSelect(__, __, fBeh): fBeh2state(fBeh);
		FSelect2(__, __, __, fBeh): fBeh2state(fBeh);
		FSubSelect(__, __, fBeh): fBeh2state(fBeh);
		FConstructable(__, __, fBeh): fBeh2state(fBeh);
		default: "None";
	}
}

fBeh2state(fBeh : FBehaviour<?>) -> string {
	switch (fBeh) {
		FDestroyed(): "Destroyed";
		FInitialized(__, __, __): "Initialized";
	}
}

createFLift(fn : (?) -> ??, fnName : string, useFLiftExpensive : bool) -> FFn<?, ??> {
	fn2 = \v -> {
		println("  call " + fnName + " with " + toString(v));
		fn(v);
	}
	if (useFLiftExpensive) FLiftExpensive(fn2) else FLift(fn2);
}

createTransforms(useFLiftExpensive : bool) -> Pair<[Transform<int>], () -> void> {
	createFLift1 = \fnName -> createFLift(idfn, fnName, useFLiftExpensive);
	createFLiftT = \fn : (int) -> Transform, fnName -> createFLift(fn, fnName, useFLiftExpensive);
	createFLiftBool = \fn : (bool) -> int, fnName -> createFLift(fn, fnName, useFLiftExpensive);

	beh1 = make(1);
	beh2 = make(2);
	beh3 = make(3);

	println("Creating trans1");
	trans1 = fselect(beh1, createFLift1("fn1"));
	println("Creating trans2");
	trans2 = fselect(beh2, createFLift1("fn2"));
	println("Creating trans3");
	trans3 = fselect(beh3, createFLift1("fn3"));

	println("Creating eq12");
	eq12 = fequal(trans1, trans2);	// false
	println("Creating eq23");
	eq23 = fequal(trans2, trans3);	// false
	println("Creating and");
	andT = fandLazy(eq12, eq23);	// false

	println("Creating trans4");
	trans4 = fselect(andT, createFLiftBool(b2i, "fn4 (fselect(andT))"));
	println("Creating trans5");
	trans5 = fselect2Lift(trans4, trans3, \v1, v2 -> {
		println("  call fn5");
		v1 + v2;
	});
	println("Creating trans6");
	trans6 = fselect2Lift(trans5, const(9), \v1, v2 -> {
		println("  call fn6");
		v1 + v2;
	});
	println("Creating trans7");
	trans7 = fsubselect(trans6, createFLiftT(\__ -> beh3, "fn7"));
	println("Creating trans8");
	trans8 = fsubselect(const(9), createFLiftT(\__ -> trans7, "fn8"));
	println("Creating trans9");
	trans9 = fselect(trans8, createFLift1("fn9"));
	println("Creating trans10");
	trans10 = fselect2Lift(trans8, trans9, \v1, v2 -> {
		println("  call fn10");
		v1 + v2;
	});

	Pair(
		[trans1, trans2, trans3, trans4, trans5, trans6, trans7, trans8, trans9, trans10],
		\ -> {
			println("\n> Update one of the behaviors");
			next(beh2, 1);
		}
	);
}

test(useFLiftExpensive : bool, reversSubscribe : bool) -> void {
	println("> Creating transforms");
	transformsAndUpdFn = createTransforms(useFLiftExpensive);
	transforms = transformsAndUpdFn.first;
	updFn = transformsAndUpdFn.second;

	count = length(transforms);

	subscribeTransformIfNotInitialized = \idx -> {
		name = i2s(idx + 1);
		trans = transforms[idx];
		if (trans2state(trans) == "Initialized") {
			println("Transform " + name + " is already initialized");
			makeList();
		} else {
			println("Subscribing transform " + name);
			fsubscribe(trans, \__ -> {
				println("  Transform " + name + " calculated");
			});
		}
	}

	uns = if (reversSubscribe) {
		println("\n> Subscribing transforms from last to first");
		generate(0, count, \i -> {
			subscribeTransformIfNotInitialized(count - 1 - i);
		});
	} else {
		println("\n> Subscribing transforms from first to last");
		mapi(transforms, \i, __ -> subscribeTransformIfNotInitialized(i));
	}

	println("\n> Getting values");
	println(map(transforms, \trans -> fgetValue(trans)));
	updFn();


	iter(uns, \u -> applyList(u, apply0));
	println("\n! Done");
}

main() {
	reversSubscribe = true;

	println("=== Using FLift");
	test(false, reversSubscribe);

	println("");
	println("=== Using FLiftExpensive");
	test(true, reversSubscribe);

	quit(0);
}
