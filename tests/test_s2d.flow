import runtime;
import math/math;
import string;
import maybe;
import ds/array;

export {
	runS2dTests() -> void;
}

runS2dTests() {
	testBasicCases();
	testSpecialCases();
	testExponents();
	testLargeExponents();
	testPrecisionCases();
	testInvalidInputs();
	testPerformanceEdgeCases();
}

// Helper to check if results are close enough (for floating point comparison)
isClose(a : double, b : double) -> bool {
	equalDoubles(a, b) || abs(a - b) < 0.0000001
}

testAndReport(testName : string, input : string, expected : double) -> void {
	result = s2d(input);

	// Note: For infinity/NaN checking, use isNanOrInf
	passed = if (isNanOrInf(expected) && isNanOrInf(result))
		true
	else
		isClose(result, expected);

	println(testName + ": " + (if (passed) "PASSED" else "FAILED") +
		" - Input: '" + input + "', Expected: " + d2s(expected) + ", Got: " + d2s(result));
}

// Basic functionality tests
testBasicCases() {
	println("\n--- Testing Basic Cases ---");
	testAndReport("Integer", "123", 123.0);
	testAndReport("Negative", "-456", -456.0);
	testAndReport("Decimal", "789.012", 789.012);
	testAndReport("Leading zeros", "00123", 123.0);
	testAndReport("Trailing zeros", "123.0000", 123.0);
	testAndReport("Zero", "0", 0.0);
	testAndReport("Negative zero", "-0", 0.0);
	testAndReport("Float from the old comment", "9.10000985294723e-016", 9.10000985294723 / dpow(10.0, 16.0))
}

// Special case tests
testSpecialCases() {
	println("\n--- Testing Special Cases ---");
	testAndReport("Empty string", "", 0.0);
	testAndReport("Single decimal point", ".", 0.0);
	testAndReport("Starting with decimal", ".123", 0.123);
	testAndReport("Ending with decimal", "123.", 123.0);
	testAndReport("Negative decimal", "-.123", -0.123);
	testAndReport("Multiple decimals", "123.456.789", 123.456); // Should only parse up to first invalid char
}

// Exponents tests
testExponents() {
	println("\n--- Testing Exponents ---");
	testAndReport("Positive exponent", "1.23e2", 123.0);
	testAndReport("Negative exponent", "1.23e-2", 0.0123);
	testAndReport("Zero exponent", "1.23e0", 1.23);
	testAndReport("Uppercase E", "1.23E2", 123.0);
	testAndReport("Exponent with plus", "1.23e+2", 123.0);
	testAndReport("Integer with exponent", "123e2", 12300.0);
}

// Large exponent tests (potential performance issues)
testLargeExponents() {
	println("\n--- Testing Large Exponents ---");
	// Values close to double limits
	testAndReport("Large positive exponent", "1.23e308", dpow(10.0, 308.0) * 1.23);
	testAndReport("Exponent at double limit", "1.79e308", dpow(10.0, 308.0) * 1.79);
	testAndReport("Beyond double limit", "1.8e308", doubleMax);
	testAndReport("Large negative exponent", "1.23e-308", 1.23 / dpow(10.0, 308.0));
	testAndReport("Very small number", "1.0e-324", 0.0);

	// The problematic case that causes performance issues
	println("Testing problematic exponent: 09651e959647100176b7dc5f56eb0002");
	start = timestamp();
	result = s2d("09651e959647100176b7dc5f56eb0002");
	timeTaken = timestamp() - start;

	// Should either return infinity or complete quickly
	println("Result: " + d2s(result) + ", Time taken: " + d2s(timeTaken) + "ms");
	if (timeTaken > 1000.0) {
		println("WARNING: Processing time exceeded 1 second - likely a performance issue!");
	}
}

// Precision test cases
testPrecisionCases() {
	println("\n--- Testing Precision Cases ---");
	testAndReport("Small decimal", "0.0000000001", 0.0000000001);
	testAndReport("Repeating decimal", "0.33333333333333333", 0.33333333333333333);
	testAndReport("Large with precision", "123456789.123456789", 123456789.123456789);

	// Test cases that might suffer from accumulation errors
	testAndReport("Multiple of 0.1", "0.3", 0.3);
	testAndReport("Fraction close to 0.6", "0.6", 0.6);
}

// Invalid input tests
testInvalidInputs() {
	println("\n--- Testing Invalid Inputs ---");
	testAndReport("Letters only", "abc", 0.0);
	testAndReport("Mixed letters and numbers", "123abc", 123.0);
	testAndReport("Invalid exponent", "123e", 123.0);
	testAndReport("Invalid negative", "-abc", 0.0);
	testAndReport("Invalid characters", "#@&!", 0.0);
	testAndReport("Invalid decimal", "123..456", 123.0);
}

// Performance edge cases
testPerformanceEdgeCases() {
	println("\n--- Testing Performance Edge Cases ---");

	// Test very long strings
	longDigits = generate(0, 1000, \i -> "9");
	longNumber = strGlue(longDigits, "");
	println("Testing 1000-digit number processing time:");
	start = timestamp();
	s2d(longNumber);
	println("Time taken: " + d2s(timestamp() - start) + "ms");

	// Test various problematic exponents
	testExtremeExponent("1e100");
	testExtremeExponent("1e1000");
	testExtremeExponent("1e-100");
	testExtremeExponent("1e-1000");

	// Test malformed but large inputs
	testExtremeExponent("1e1000000");
	testExtremeExponent("1e-1000000");
}

testExtremeExponent(value : string) -> void {
	println("Testing exponent performance: " + value);
	start = timestamp();
	result = s2d(value);
	timeTaken = timestamp() - start;
	println("Result: " + d2s(result) + ", Time taken: " + d2s(timeTaken) + "ms");
}

main() {
	runS2dTests();
	quit(0);
}