import jwt;

// To run the test use java: 
//	build-jar tests/test_jwt.flow --run
//  or
//  flowc1 tests/test_jwt.flow jar=test_jwt.flow && java -jar test_jwt.jar
main() {
	// RSA keys that have been used to encode JWT's that are expired
	keyPemRSA = "
		-----BEGIN PUBLIC KEY-----
		MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6S7asUuzq5Q/3U9rbs+P
		kDVIdjgmtgWreG5qWPsC9xXZKiMV1AiV9LXyqQsAYpCqEDM3XbfmZqGb48yLhb/X
		qZaKgSYaC/h2DjM7lgrIQAp9902Rr8fUmLN2ivr5tnLxUUOnMOc2SQtr9dgzTONY
		W5Zu3PwyvAWk5D6ueIUhLtYzpcB+etoNdL3Ir2746KIy/VUsDwAM7dhrqSK8U2xF
		CGlau4ikOTtvzDownAMHMrfE7q1B6WZQDAQlBmxRQsyKln5DIsKv6xauNsHRgBAK
		ctUxZG8M4QJIx3S6Aughd3RZC4Ca5Ae9fd8L8mlNYBCrQhOZ7dS0f4at4arlLcaj
		twIDAQAB
		-----END PUBLIC KEY-----
	";
	keyJwkRSA = <<{
		"kty": "RSA",
		"n": "6S7asUuzq5Q_3U9rbs-PkDVIdjgmtgWreG5qWPsC9xXZKiMV1AiV9LXyqQsAYpCqEDM3XbfmZqGb48yLhb_XqZaKgSYaC_h2DjM7lgrIQAp9902Rr8fUmLN2ivr5tnLxUUOnMOc2SQtr9dgzTONYW5Zu3PwyvAWk5D6ueIUhLtYzpcB-etoNdL3Ir2746KIy_VUsDwAM7dhrqSK8U2xFCGlau4ikOTtvzDownAMHMrfE7q1B6WZQDAQlBmxRQsyKln5DIsKv6xauNsHRgBAKctUxZG8M4QJIx3S6Aughd3RZC4Ca5Ae9fd8L8mlNYBCrQhOZ7dS0f4at4arlLcajtw",
		"e": "AQAB",
		"kid": "test-rsa"
	}
	>>;

	// The v2 RSA keys have been used to encode JWT's that does not have an expired time
	keyPemRSAv2 = <<-----BEGIN PUBLIC KEY-----
		MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtOajBOgIUEkMLK3IxCW3
		D8R8nQOu9Fc4P4oyQ0I3r7nNxhRTTtTmWgQ22MS1beFSAZ2y9SjaqLVZZHX5Sxnn
		b0u4QiJ9f8wqC5beOVOIG9f5Q2/+R8wEi69636IDqkkJqiD6LyJ5jaOlmTaIF3sq
		tXwkBkd1QgdbQTRYOy9voZDeYUPzwrQZkDzjTIi+xNEc7RSfqmUnHNpgrzry+Gd4
		uJfPycm9pzinvHYrEM3vaV+bXBq/s7KUpHPgp9XgN8USPfwKD7HrlDXy9kiVYfFH
		ncFq2DhD4OFAYSHaBLYPyMvbWqxW/YPFY0FjibCCVcthayAa5oLIgHPktkyVkM2Y
		TwIDAQAB
		-----END PUBLIC KEY-----
	>>;
	keyJwkRSAv2 = <<{
		"kid": "305ceaac81d759e11d4fd442e543acde12228d6c",
		"kty": "RSA",
		"alg": "RS256",
		"use": "sig",
		"n": "tOajBOgIUEkMLK3IxCW3D8R8nQOu9Fc4P4oyQ0I3r7nNxhRTTtTmWgQ22MS1beFSAZ2y9SjaqLVZZHX5Sxnnb0u4QiJ9f8wqC5beOVOIG9f5Q2_-R8wEi69636IDqkkJqiD6LyJ5jaOlmTaIF3sqtXwkBkd1QgdbQTRYOy9voZDeYUPzwrQZkDzjTIi-xNEc7RSfqmUnHNpgrzry-Gd4uJfPycm9pzinvHYrEM3vaV-bXBq_s7KUpHPgp9XgN8USPfwKD7HrlDXy9kiVYfFHncFq2DhD4OFAYSHaBLYPyMvbWqxW_YPFY0FjibCCVcthayAa5oLIgHPktkyVkM2YTw",
		"e": "AQAB"
	}>>;

	// The "---" lines and line breaks are optional
	keyPrivatePemPkcs8RSAv2 = <<-----BEGIN PRIVATE KEY-----
		MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC05qME6AhQSQws
		rcjEJbcPxHydA670Vzg/ijJDQjevuc3GFFNO1OZaBDbYxLVt4VIBnbL1KNqotVlk
		dflLGedvS7hCIn1/zCoLlt45U4gb1/lDb/5HzASLr3rfogOqSQmqIPovInmNo6WZ
		NogXeyq1fCQGR3VCB1tBNFg7L2+hkN5hQ/PCtBmQPONMiL7E0RztFJ+qZScc2mCv
		OvL4Z3i4l8/Jyb2nOKe8disQze9pX5tcGr+zspSkc+Cn1eA3xRI9/AoPseuUNfL2
		SJVh8UedwWrYOEPg4UBhIdoEtg/Iy9tarFb9g8VjQWOJsIJVy2FrIBrmgsiAc+S2
		TJWQzZhPAgMBAAECggEBAIVsipYm0WLtzaXyc16AdrmRcVuZiOO8pMbwlcvXvhzE
		zQmomh1Nl6yS6SUOSMaHZqW8e26ouEWwpAMdpEYJEBKdZYSZzbiBjA1KNBNSEdR/
		geCEbKblygCA5/6jj1J8Vj193yj+o2qdZZlQiCXReRmsOyHKeKi/pkW8ZssYXJxr
		cCFyo7gb3vAderH0k3+VaIReQioTOo7J2ZOAvi78dD0zHdCgoPxZiNEluWYJ0ZzZ
		njQKYFF8+vwXDPNK2/II7Hj08r9TLT4H8jEFjh8SaGERole45QIKrtsr1YK+GihC
		Fm6PfV/8zepTO7DXWr2K9Xi+Sg8fvVmrNGyeNldrNskCgYEA5Kvc+slpumc6KJUK
		yvFtGNhljRiEnwYOjmVESK4Qi1fJeg6PHxuPFN2hCE3Sp8MVPGYIpWbhjw1y0Fvy
		kdLZGK0Q5sWuPSahDgm0VLHju/2n+o9qfGXqKs0tpXlAMzs1F6/gEXhuDcZGdl1U
		vygL3Np6UyRZtVR3Tc7gd0hNh+UCgYEAyoVAOEDm5NXI5Xsalsbe/09l72gsUO9S
		YlORrgv6tEbif0wB6l2HuaJ4L3qdIyqIvlCdrPIlExQq+igeZOSQooDZBs4TBBj0
		FKylNHSglzNDb1WhPXJ2ELjeps+61XWqN/5h1ylVWH+76wcnGuIsdEqiPPyNM448
		58mo7yebtCMCgYA66yVW4MqDItHTXwOW4rnPawJPZn/VUYQyoFkFuQO+Q3JAJrwt
		sbYeFDTHpPWgEB3KoCeeJnH7n+VzVh2cAQ260+zE6S5Jx0g8C7gREnyxFVxQrN8t
		Cj1ZpeAbALDQAnNdlQ1Qswz4M5w4JzgMwM69qvVVssoCdK8At0sSsOh5GQKBgAfG
		XdTLCRI38uJ8e2TWdbEvhyZNxYXF6k/EDY+0/gb1wbRJYrlwpclGp36LIoU7GMzV
		o3gEQ9Abshqwd5o//B2A/NP6DVjW7GfuyNjesVucqDYZ/3qwbj/uGP4mc3HGdqZ3
		qaHtAE3JeZloSOQLUtGUG+5jc7hK+aOcZlPoHV4pAoGAeJYCY482x2CmqLIpeJI9
		dh9IBEqnN7+qWbuLGtB64EDLDJrzxysTItLfscNNdLThWpJ/l8fMCl8gaEUgcVOq
		ZH4uxim//XRzI5izHHclrikYEd+2DdH2gGTLj5HrwSYq+tGw2FU3GMBzwD2HzhdD
		24/l90mGVg6UmpHTd9uoDpY=
		-----END PRIVATE KEY-----
		>>;

	keyPemECDSA256 = "
		-----BEGIN PUBLIC KEY-----
		MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERqVXn+o+6zEOpWEsGw5CsB+wd8zO
		jxu0uASGpiGP+wYfcc1unyMxcStbDzUjRuObY8DalaCJ9/J6UrkQkZBtZw==
		-----END PUBLIC KEY-----
	";
	keyPemECDSA384 = "
		-----BEGIN PUBLIC KEY-----
		MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAElS+JW3VaBvVr9GKZGn1399WDTd61Q9fw
		QMmZuBGAYPdl/rWk705QY6WhlmbokmEVva/mEHSoNQ98wFm9FBCqzh45IGd/DGwZ
		04Xhi5ah+1bKbkVhtds8nZtHRdSJokYp
		-----END PUBLIC KEY-----
	";
	keyPemECDSA512 = "
		-----BEGIN PUBLIC KEY-----
		MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBh4Cv4rcExpKWeuOazO4l05gGy0Yl
		/SK0zZNMbCxo7T5wZxeivx/Qs9dsH0H+AsrubS2HeiRfPKkiur6qBMywyKAAYt2/
		3ZoBGbp597+wQnJEn6fggHGExFObrAh7wBmGWR0tbHMTJ+6yJctkeifU2C39Dx38
		9hZitslVZLtWucrTlsk=
		-----END PUBLIC KEY-----
	";
	// https://token.dev/jwks/keys.json contains JWK for ES512 only.
	keyJwkECDSA512 = <<{
		"kty": "EC",
		"crv": "P-521",
		"x": "AYeAr-K3BMaSlnrjmszuJdOYBstGJf0itM2TTGwsaO0-cGcXor8f0LPXbB9B_gLK7m0th3okXzypIrq-qgTMsMig",
		"y": "AGLdv92aARm6efe_sEJyRJ-n4IBxhMRTm6wIe8AZhlkdLWxzEyfusiXLZHon1Ngt_Q8d_PYWYrbJVWS7VrnK05bJ",
		"kid": "test-ec"
	}
	>>;

	haveFailed : ref bool = ref false;

	verify = \expected, jwt, algorithm, sym, pem, jwk -> {
		resPem = if (pem == "") "" else verifyJwtAlgorithm(jwt, pem, algorithm);
		resJwk = if (jwk == "") "" else verifyJwtAlgorithm(jwt, jwk, algorithm);
		resSym = if (sym == "") "" else verifyJwtAlgorithm(jwt, sym, algorithm);

		if (
			(resPem != "" || resJwk != "" || resSym != "") && 
			(resPem == "" || startsWith(resPem, expected)) && 
			(resJwk == "" || startsWith(resJwk, expected)) && 
			(resSym == "" || startsWith(resSym, expected))
		) {
			println("OK");
		} else {
			haveFailed := true;
			println("FAILED");
		}
		//println("\t" + algorithm + " JWT: " + jwt);
		println("\t" + algorithm + " Sym format: " + resSym); // Symmetric key format
		println("\t" + algorithm + " PEM format: " + resPem);
		println("\t" + algorithm + " JWK format: " + resJwk);
	}

	// Test with pre-created JWT's with symmetric key
	verify(
		"OK",
		"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1M30._Fr8Iq51SDl29-wYUoA8uvVH1MKdNtBEKdJce9Jy93U",
		"HS256",
		"myKey",
		"",
		""
	);

	// Test with new key
	hs256Key = "someKey";
	verify(
		"OK",
		createJwtAlgorithm(hs256Key, "{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true,\"iat\":1725605153}", "HS256", ""),
		"HS256",
		hs256Key,
		"",
		""
	);

	nowSeconds: int = floor(timestamp() / 1000.0);

	makeHsJwtIat = \addIat: int -> {
		createJwtAlgorithm(hs256Key, "{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true,\"iat\":" + i2s(nowSeconds + addIat) + "}", "HS256", "");
	};

	// Verify that the token is valid now 
	verify(
		"OK",
		makeHsJwtIat(0),
		"HS256",
		hs256Key,
		"",
		""
	);

	// Verify that the token can't be used before the iat time (We allow 5min time skew, but not 6)
	verify(
		"The Token can't be used before",
		makeHsJwtIat(60*6),
		"HS256",
		hs256Key,
		"",
		""
	);

	// Verify that we allow 4min time skew (We should allow 5)
	verify(
		"OK",
		makeHsJwtIat(60*4),
		"HS256",
		hs256Key,
		"",
		""
	);

	// Make a token with invalid JSON
	verify(
		"The token was expected",
		"notanjwt",
		"HS256",
		hs256Key,
		"",
		""
	);

	// Empty JWT
	verify(
		"The token was expected",
		"",
		"HS256",
		hs256Key,
		"",
		""
	);

	// JWT created with illegal JSON
	verify(
		"The token was expected",
		createJwtAlgorithm(hs256Key, "{\"sub\":\"1234567890\"", "HS256", ""),
		"HS256",
		hs256Key,
		"",
		""
	);

	// Make an JWT that is issued 10 minutes hour ago, and expire now + addIat
	makeHsJwtExp = \addExp: int -> {
		createJwtAlgorithm(hs256Key, "{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true,\"iat\":" + i2s(nowSeconds - 600) + ",\"exp\": " + i2s(nowSeconds + addExp) + "}", "HS256", "");
	};

	// Verify that we allow expiration 30 seconds in the future 
	verify(
		"OK",
		makeHsJwtExp(30),
		"HS256",
		hs256Key,
		"",
		""
	);

	// Verify that we allow expiration 4 minutes in the past (We allow 5 min time skew)
	verify(
		"OK",
		makeHsJwtExp(-240),
		"HS256",
		hs256Key,
		"",
		""
	);

	// Verify that we do not allow expiration 6 minutes in the past (We only allow 5 min time skew)
	verify(
		"The Token has expired",
		makeHsJwtExp(-360),
		"HS256",
		hs256Key,
		"",
		""
	);

	verify(
		"The Token has expired",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1MywiZXhwIjoxNzI3NjA4NzUzfQ.krXFlCT20Yy0Rw20Xjt1RL7_cn_HJC_0lmFhjhv9j7NH2vz4FhOfwnWqImBY6VM6jVyY5g2oLBQsLbmM2woLOFxCB5_SZDBuhBV0UC_zf4G9OOsEd-xf07OaMtDukkR6zZMMrpmvwolsuoeivX6GsMo7KElqJuL8M9GkcsjZl2__3E5GHAffdQ3EcsEt0Oz6-Okxk-1u6CtiZwfTMQeH3AcbygGwRHisKtzSJ_Y5DA7JBTF1QsCjfavGpuwqDQgf8pUaOAmmHTGQOo-kkXQ_pp_f7Y1JOfNPrTXIhVul49tXl_f1f0pxz0dXqRwvwbTcVFSEsAitJLtPKup220zrWw",
		"RS256",
		"",
		keyPemRSA,
		keyJwkRSA
	);
	verify(
		"The Token has expired",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzM4NCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1MywiZXhwIjoxNzI3NjA4NzUzfQ.riDnkkyxZgG5hSvzEomrf4Y7MFHe-97YfH40hJyh9dwr7W7q5yqNQ_ORMzOccC4yTCXx0M0zOAzgZ-tYckQOlGPzBarbyXWErgTWuAatkR6gvZZshOYeEpfNCF4vPJ7A_HNVmfEhlwhUkG8QlaaF1ESdNsHIbzYQ6rpVxDA27UcTznUf_pbvzi72vhv1qEnbiYV5llSwtxSqvXZW5e22arJSwvhhtXi-Z89fB4PQyBM7qWjFlq85KR0S0cDcHANxGULAFnH0zDIKEH4S9Heb1Kz8D7JMysZockA2mmD2vUjOFKCM0RwzYpdrpL6rvtLXOwZY9DSvr2T3yrSJd9_h8Q",
		"RS384",
		"",
		keyPemRSA,
		keyJwkRSA
	);
	verify(
		"The Token has expired",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1MywiZXhwIjoxNzI3NjA4NzUzfQ.LpsksC0Zo5P75B2M98_YdkBze_jlxNi-DQbD-gbsnftlYWSAU_PIIiF9OHTcE7H7RTqt5m_eK5mSA2dWn7UH0I2KlfQ2lMwJOd9ybSkr-wQ30mDzAXR0ZZQQQ3ydpB_dRFnopDJlK7odTfcjvA2a3AXlhp41TyfogbmOATo-VDBw9nvhFsSksmbOI6vmUXOhpPo7uBBerjLbbBiZRlDB9jSA4ylhWiYte_US15oZ0CWkJdEwdiAL0G1R_RN0BBrwoWA4cJK4DtemkhCQ4QHb9pJCzBcsR7PpgJ-N5FhZ-1qcFdnjDj_e9MVs_ggx-xE2N1mEvXxjkuHUtBna4Qmq9w",
		"RS512",
		"",
		keyPemRSA,
		keyJwkRSA
	);

	// Verify RSA with a predefined JWT, that does not expire
	verify(
		"OK",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1M30.OaH9DCqCrf1chCXp8TqvanX5RwZqO5VhQCV2x3dsRo0EmPZpJH7OEilWOTCyWr1k12qMxyswr2LKU0OUw7nv0lPdUgsO4VpvEhO6s-Bw0q8aNXYPkLRMT7ML5qnxnJ0F1g_jYdOgEIrvJGvVOQs8bQcDJlfl9RRe0YRadNbGVJdaFtYniIgBykZthBDXVoKNFAhPXzvGWsrtUD-oFVhxxCg507mkxw8lTuTRt5jSLBo2KmJfJrBIg5UyNf8fDaJcSwQ5PyOUetpruV2w51uG43Uvqg35ABvaIVSi64LSIN78DxntOXp9cGIFzt077_UAdf82OWboXvw88H2FSpf5VA",
		"RS256",
		"",
		keyPemRSAv2,
		keyJwkRSAv2
	);

	makeRsJwtIat = \key: string, kid: string, addIat: int -> {
		jwt = createJwtAlgorithm(key, "{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true,\"iat\":" + i2s(nowSeconds + addIat) + "}", "RS256", kid);
		if (startsWith(jwt, "Error:")) {
			println("createJwtAlgorithm failed: " + jwt);
		} else {
			println("RS jwt: " + jwt);
		};
		jwt;
	};

	// Verify we can create a key with a Private Key
	verify(
		"OK",
		makeRsJwtIat(keyPrivatePemPkcs8RSAv2, "", 0),
		"RS256",
		"",
		keyPemRSAv2,
		keyJwkRSAv2
	);

	// Create a key with kid
	verify(
		"OK",
		makeRsJwtIat(keyPrivatePemPkcs8RSAv2, "12345", 0),
		"RS256",
		"",
		keyPemRSAv2,
		keyJwkRSAv2
	);

	// Issue a jwt in the future
	verify(
		"The Token can't be used before",
		makeRsJwtIat(keyPrivatePemPkcs8RSAv2, "", 360),
		"RS256",
		"",
		keyPemRSAv2,
		keyJwkRSAv2
	);

	// Test that we get an error, not an exception when the public key JSON is invalid
	verify(
		"ParseException",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1M30.OaH9DCqCrf1chCXp8TqvanX5RwZqO5VhQCV2x3dsRo0EmPZpJH7OEilWOTCyWr1k12qMxyswr2LKU0OUw7nv0lPdUgsO4VpvEhO6s-Bw0q8aNXYPkLRMT7ML5qnxnJ0F1g_jYdOgEIrvJGvVOQs8bQcDJlfl9RRe0YRadNbGVJdaFtYniIgBykZthBDXVoKNFAhPXzvGWsrtUD-oFVhxxCg507mkxw8lTuTRt5jSLBo2KmJfJrBIg5UyNf8fDaJcSwQ5PyOUetpruV2w51uG43Uvqg35ABvaIVSi64LSIN78DxntOXp9cGIFzt077_UAdf82OWboXvw88H2FSpf5VA",
		"RS256",
		"",
		"",
		"{\"123\"}"
	);

	verify(
		"The Token has expired",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1MywiZXhwIjoxNzI3NjA4NzUzfQ.yeFjg_EB233uGMO0sH0NoImjsD9GzD7qxvZGOo7srJ-mKd-01gY5hBtK5iSQYsIrJnxpfpfe6hg9xGsii-vdLg",
		"ES256",
		"",
		keyPemECDSA256,
		""
	);
	verify(
		"The Token has expired",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzM4NCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1MywiZXhwIjoxNzI3NjA4NzUzfQ.Qk6K5Zo-6-4LRqjYToertiSwcs8Z6wSRClXOwTFCRn2lCYcZXx4_65oucVzGoWVmPa81U71Jlszk1xenU9voq52sLFKS2TI7m-INcgQlpf4ro15MTU6fm2FFGxCmeK-d",
		"ES384",
		"",
		keyPemECDSA384,
		""
	);
	verify(
		"The Token has expired",
		"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzUxMiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTcyNTYwNTE1MywiZXhwIjoxNzI3NjA4NzUzfQ.AGX8VWl6VBh9M_O5Zps1bfY8k6Vy-yoUSiBL2E_a2z0iopHJOf-W4RmWX31QJGizJoWRx591EhE_ut8drZNqrhlmAddfI3k2DA2rHG-tX3Dmvconx2-VU2Ss5UaQM8Rn5KrY0lV_joMh18RVk4Q03oYUk9wT5NXgU60WqlBdIhp5SO2J",
		"ES512",
		"",
		keyPemECDSA512,
		keyJwkECDSA512
	);

	quit(if (^haveFailed) {
		println("Some tests failed");
		1;
	} else {
		println("All tests passed");
		0;
	});
}
