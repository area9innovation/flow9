import ds/easygraph;

test_easygraph_cycles() -> bool {
	// Test 1: Simple self loop
	g1 = makeEasyGraph();
	g1a = addEGNode(g1, GNode(0, "A"));
	g1b = addEGEdge(g1a, GEdge(0, 0, "loop", 1));
	
	cycles1 = findEasyGraphCycles(g1b);
	println("Test 1 - Self loop:");
	println(cycles1);
	test1 = length(cycles1) == 1 && length(cycles1[0]) == 1 && 
			cycles1[0][0].from == 0 && cycles1[0][0].to == 0;

	// Test 2: Simple cycle between two nodes
	g2 = makeEasyGraph();
	g2a = addEGNode(g2, GNode(0, "A"));
	g2b = addEGNode(g2a, GNode(1, "B"));
	g2c = addEGEdge(g2b, GEdge(0, 1, "A->B", 1));
	g2d = addEGEdge(g2c, GEdge(1, 0, "B->A", 1));

	cycles2 = findEasyGraphCycles(g2d);
	println("\nTest 2 - Two node cycle:");
	println(cycles2);
	test2 = length(cycles2) == 1 && length(cycles2[0]) == 2;

	// Test 3: Triangle cycle
	g3 = makeEasyGraph();
	g3a = addEGNode(g3, GNode(0, "A"));
	g3b = addEGNode(g3a, GNode(1, "B"));
	g3c = addEGNode(g3b, GNode(2, "C"));
	g3d = addEGEdge(g3c, GEdge(0, 1, "A->B", 1));
	g3e = addEGEdge(g3d, GEdge(1, 2, "B->C", 1));
	g3f = addEGEdge(g3e, GEdge(2, 0, "C->A", 1));

	cycles3 = findEasyGraphCycles(g3f);
	println("\nTest 3 - Triangle cycle:");
	println(cycles3);
	test3 = length(cycles3) == 1 && length(cycles3[0]) == 3;

	// Test 4: Two independent cycles
	g4 = makeEasyGraph();
	g4a = addEGNode(g4, GNode(0, "A"));
	g4b = addEGNode(g4a, GNode(1, "B"));
	g4c = addEGNode(g4b, GNode(2, "C"));
	g4d = addEGNode(g4c, GNode(3, "D"));
	g4e = addEGEdge(g4d, GEdge(0, 1, "A->B", 1));
	g4f = addEGEdge(g4e, GEdge(1, 0, "B->A", 1));
	g4g = addEGEdge(g4f, GEdge(2, 3, "C->D", 1));
	g4h = addEGEdge(g4g, GEdge(3, 2, "D->C", 1));

	cycles4 = findEasyGraphCycles(g4h);
	println("\nTest 4 - Two independent cycles:");
	println(cycles4);
	test4 = length(cycles4) == 2 && length(cycles4[0]) == 2 && length(cycles4[1]) == 2;

	// Test 5: Multiple self loops
	g5 = makeEasyGraph();
	g5a = addEGNode(g5, GNode(0, "A"));
	g5b = addEGNode(g5a, GNode(1, "B"));
	g5c = addEGEdge(g5b, GEdge(0, 0, "A-loop", 1));
	g5d = addEGEdge(g5c, GEdge(1, 1, "B-loop", 1));

	cycles5 = findEasyGraphCycles(g5d);
	println("\nTest 5 - Multiple self loops:");
	println(cycles5);
	test5 = length(cycles5) == 2 && length(cycles5[0]) == 1 && length(cycles5[1]) == 1;

	// Test 6: No cycles
	g6 = makeEasyGraph();
	g6a = addEGNode(g6, GNode(0, "A"));
	g6b = addEGNode(g6a, GNode(1, "B"));
	g6c = addEGNode(g6b, GNode(2, "C"));
	g6d = addEGEdge(g6c, GEdge(0, 1, "A->B", 1));
	g6e = addEGEdge(g6d, GEdge(1, 2, "B->C", 1));

	cycles6 = findEasyGraphCycles(g6e);
	println("\nTest 6 - No cycles:");
	println(cycles6);
	test6 = length(cycles6) == 0;

	test1 && test2 && test3 && test4 && test5 && test6;
}

main() {
	println(test_easygraph_cycles());
	quit(0);
}